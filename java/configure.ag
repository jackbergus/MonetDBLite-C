#                                               -*- Autoconf -*-
#                                               vim: ft=config :

# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2010 MonetDB B.V.
# All Rights Reserved.

# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.60)
AC_INIT([MonetDB Java], [1.36.6], [monet@cwi.nl], [MonetDB-java])
AC_CONFIG_AUX_DIR(conf)
AM_INIT_AUTOMAKE
AM_CONFIG_HEADER([monetdb_java_config.h])

# MONETDB_JAVA_BUILD and MONETDB_JAVA_SOURCE are *only* used for RunMtest & RunMapprove
# MONETDB_JAVA_SOURCE is the absolute path name of the source directory
# (srcdir can be relative)

# The Q versions of various variables are used in places where \'s
# need to be escapes with an extra \.  Configure does not support \'s
# in path names, so there is no need to do anything special here
# except set the variables.  The command to set them in case we do
# need to escape the \'s is Qvar=`echo "$var" | sed 's/\\\\/\\\\\\\\/g'`
MONETDB_JAVA_BUILD=[`pwd`]
AC_SUBST(MONETDB_JAVA_BUILD)

MONETDB_JAVA_SOURCE=[`(cd $srcdir && pwd)`]
AC_SUBST(MONETDB_JAVA_SOURCE)

AM_MONETDB_XQ_VARS_1()

AC_ARG_ENABLE(jdbc,
	AC_HELP_STRING([--enable-jdbc], [build the MonetDB JDBC driver]),
	enable_jdbc="$enableval",
	enable_jdbc=auto)
case $enable_jdbc in
	yes|auto) enable_jdbc=$enable_jdbc;;
	*) enable_jdbc=no;;
esac

have_java_jdbc=no
if test "x$enable_jdbc" != xno; then
	req_java_ver_min=1.5 # >= $req_java_ver_min required
	req_java_ver_max=1.6 # <  $req_java_ver_max required
	AM_MONETDB_ANT_JAVA($req_java_ver_min, $req_java_ver_max)
	if test "x$have_java" = xno; then
		if test "x$enable_jdbc" = xyes; then
			AC_MSG_ERROR([MonetDB JDBC requires ant and Java >= $req_java_ver_min, but < $req_java_ver_max.])
		else
			AC_MSG_WARN([Cannot build MonetDB JDBC as it requires ant and Java >= $req_java_ver_min, but < $req_java_ver_max.])
		fi
	else
		have_java_jdbc=yes
	fi
fi
AM_CONDITIONAL(HAVE_JAVAJDBC,test x$have_java_jdbc != xno)

AC_ARG_ENABLE(xrpcwrapper,
	AC_HELP_STRING([--enable-xrpcwrapper], [build the MonetDB XRPC wrapper]),
	enable_xrpc="$enableval",
	enable_xrpc=auto)
case $enable_xrpc in
	yes|auto) enable_xrpc=$enable_xrpc;;
	*) enable_xrpc=no;;
esac

have_java_xrpc=no
if test "x$enable_xrpc" != xno; then
	req_java_ver_min=1.5 # >= $req_java_ver_min required
	unset req_java_ver_max # <  $req_java_ver_max required
	AM_MONETDB_ANT_JAVA($req_java_ver_min, $req_java_ver_max)
	if test "x$have_java" = xno; then
		if test "x$enable_xrpc" = xyes; then
			AC_MSG_ERROR([MonetDB XRPC requires ant and Java >= $req_java_ver_min.])
		else
			AC_MSG_WARN([Cannot build MonetDB XRPC as it requires ant and Java >= $req_java_ver_min.])
		fi
	else
		have_java_xrpc=yes
	fi
fi
AM_CONDITIONAL(HAVE_JAVAXRPC,test x$have_java_xrpc != xno)

if test "x${have_java_jdbc}x${have_java_xrpc}" = xnoxno; then
	AC_MSG_ERROR([Java and Ant are required to build MonetDB Java.])
else
	# Make sure that HAVE_JAVA is TRUE if at least one of HAVE_JAVAJDBC and HAVE_JAVAXRPC is TRUE,
	# i.e., even in case the test for Java/XRPC failed, setting HAVE_JAVA to FALSE.
	AM_CONDITIONAL(HAVE_JAVA,true)
fi

AM_MONETDB_UTILS()	# for buildtools
AM_MONETDB_TRANSLATEPATH()
AC_PATH_PROG(BASH,bash, /usr/bin/bash, $PATH)
AC_CHECK_PROG(RM,rm,rm -f)

dnl provide different versions of the paths derived above
AM_MONETDB_XQ_VARS_2()
QMONETDB_JAVA_BUILD="$MONETDB_JAVA_BUILD"
XMONETDB_JAVA_BUILD="`$translatepath "$MONETDB_JAVA_BUILD"`"
QXMONETDB_JAVA_BUILD="`echo "$XMONETDB_JAVA_BUILD" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(QMONETDB_JAVA_BUILD)
AC_SUBST(XMONETDB_JAVA_BUILD)
AC_SUBST(QXMONETDB_JAVA_BUILD)
QMONETDB_JAVA_SOURCE="$MONETDB_JAVA_SOURCE"
XMONETDB_JAVA_SOURCE="`$translatepath "$MONETDB_JAVA_SOURCE"`"
QXMONETDB_JAVA_SOURCE="`echo "$XMONETDB_JAVA_SOURCE" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(QMONETDB_JAVA_SOURCE)
AC_SUBST(XMONETDB_JAVA_SOURCE)
AC_SUBST(QXMONETDB_JAVA_SOURCE)
