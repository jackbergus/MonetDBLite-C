@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2008 CWI.
@' All Rights Reserved.

@f geom
@a Wouter Scherphof, Niels Nes
@* The simple geom module

@mal
module geom;

atom mbr:lng;

command tostr() :str 		address mbrTOSTR;
command fromstr() :mbr		address mbrFROMSTR;
command hash() :int    		address mbrHASH;
command null() :int   		address mbrNULL;
command cmp() :int		address mbrCOMP;
command read()    		address mbrREAD;
command write()   		address mbrWRITE;

command mbr(v:str) :mbr address mbrFromString;

atom wkb;

command tostr() :str 		address wkbTOSTR;
command fromstr() :wkb		address wkbFROMSTR;
command hash() :int    		address wkbHASH;
command null() :int   		address wkbNULL;
command cmp() :int		address wkbCOMP;
command read()    		address wkbREAD;
command write()   		address wkbWRITE;

command put() :int		address wkbPUT;
command del() :int		address wkbDEL;
command length() :int		address wkbLENGTH;
command heap() :int		address wkbHEAP;

command wkb(v:str) :wkb address wkbFromString;
command FromText(w:str, type:int) :wkb	address wkbFromText;

module geom;

@= types
function @1FromText( wkt:str, srid:sht ) :wkb;
	x := wkb.FromText(wkt,@3);
	return x;
end @1FromText;

@mal
@:types(Point,point,1)@
@:types(Curve,curve,2)@
@:types(Line,linestring,2)@
@:types(Surface,surface,3)@
@:types(Poly,polygon,3)@
@:types(MultiPoint,multipoint,4)@
@:types(MultiCurve,multicurve,5)@
@:types(MultiLine,multilinestring,5)@
@:types(MultiSurface,multisurface,6)@
@:types(MultiPoly,multipolygon,6)@
@:types(Geom,geometry,7)@
@:types(GeomCollection,geomcollection,7)@

command mbroverlaps(a:mbr, b:mbr) :bit
address mbroverlaps
comment "Returns true if the two mbrs overlap";


command AsText(w:wkb) :str	address wkbAsText;
command mbr(:flt,:flt,:flt,:flt) :mbr 
address ordinatesMBR
comment "Creates the mbr for the given (xmin,ymin) and (xmax,ymax).";
   
command mbr(:wkb) :mbr 
address wkbMBR
comment "Creates the mbr for the given wkb.";

@+
command mbr(:bat[:any_1,:wkb]) :bat[:any_1,:mbr]
address bat_wkbMBR
comment "Creates the mbr's for the given wkb's.";

@+ ogc basic methods
@mal
command Dimension(w:wkb) :int
address wkbDimension
comment "The inherent dimension of this geometry object, which must be less than or equal to the coordinate dimension. This specification is restricted to geometries in two-dimensional coordinate space.";

command GeometryTypeId(w:wkb) :int
address wkbGeometryTypeId
comment "Returns the name of the instantiable subtype of Geometry of which this Geometry instance is a member. The name of the instantiable subtype of Geometry is returned as string.";

command SRID(w:wkb) :int
address wkbSRID
comment "Returns the Spatial Reference System ID for this Geometry.";

command Envelope(w:wkb) :wkb
address wkbEnvelope
comment "The minimum bounding box for this Geometry, returned as a Geometry. The polygon is defined by the corner points of the bounding box ((MINX,MINY),(MAXX,MINY),(MAXX,MAXY),(MINX,MAXY)).";

command IsEmpty(w:wkb) :bit
address wkbIsEmpty
comment "Returns true if this Geometry is the empty geometry. If true, then this Geometry represents the empty point set, for the coordinate space.";

command IsSimple(w:wkb) :bit
address wkbIsSimple
comment "Returns true if this Geometry has no anomalous geometric points, such as self intersection or self tangency. The description of each instantiable geometric class will include the specific conditions that cause an instance of that class to be classified as not simple.";

command Boundary(w:wkb) :wkb
address wkbBoundary
comment "Returns the closure of the combinatorial boundary of this Geometry.";

@+ ogc spatial relation methods
@mal

command Equals(a:wkb, b:wkb) :bit
address wkbEquals
comment "Returns true if these Geometries are 'spatially equal'";

command Disjoint(a:wkb, b:wkb) :bit
address wkbDisjoint
comment "Returns true if these Geometries are 'spatially disjoint'";

command Intersect(a:wkb, b:wkb) :bit
address wkbIntersect
comment "Returns true if these Geometries 'spatially intersect'";

command Touches(a:wkb, b:wkb) :bit
address wkbTouches
comment "Returns true if these Geometries 'spatially touch' each other";

command Crosses(a:wkb, b:wkb) :bit
address wkbCrosses
comment "Returns true if the Geometry a 'spatially crosses' Geometry b";

command Within(a:wkb, b:wkb) :bit
address wkbWithin
comment "Returns true if the Geometry a 'spatially within' Geometry b";

command Contains(a:wkb, b:wkb) :bit
address wkbContains
comment "Returns true if the Geometry a 'spatially contains' Geometry b";

command Overlaps(a:wkb, b:wkb) :bit
address wkbOverlaps
comment "Returns true if the Geometry a 'spatially overlaps' Geometry b";

command Relate(a:wkb, b:wkb, intersectionPatternMatrix:str) :bit
address wkbRelate
comment "Returns true if the Geometry a 'spatially related' to Geometry b, by testing for intersection between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionPatternMatrix.";

@+ ogc constructor functions
@mal
command point(x:dbl,y:dbl) :wkb
address wkbcreatepoint
comment "Construct a point from two geometries";

@+ ogc information methods
@mal
command X(g:wkb) :dbl
address wkbgetcoordX
comment "Returns the x-coordinate of a point geometry.";

command Y(g:wkb) :dbl
address wkbgetcoordY
comment "Returns the y-coordinate of a point geometry.";

@+ ogc Spatial Analysis methods
@mal

command Area(g:wkb) :dbl
address wkbArea
comment "Returns the area of the geometry.";

command Length(g:wkb) :dbl
address wkbLength
comment "Returns the length of the geometry.";

command Distance(a:wkb, b:wkb) :dbl
address wkbDistance
comment "Returns the shortest distance between any two points in the two geometries as calculated in the spatial reference system of this Geometries.";

command Buffer(a:wkb, distance:dbl) :wkb
address wkbBuffer
comment "Returns a geometry that represents all points whose distance from this geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry.";

command ConvexHull(a:wkb) :wkb
address wkbConvexHull
comment "Returns a geometry that represents the convex hull of this geometry.";

command Intersection(a:wkb, b:wkb) :wkb
address wkbIntersection
comment "Returns a geometry that represents the point set intersection of Geometry a with b.";

command Union(a:wkb, b:wkb) :wkb
address wkbUnion
comment "Returns a geometry that represents the point set union of Geometry a with b.";

command Difference(a:wkb, b:wkb) :wkb
address wkbDifference
comment "Returns a geometry that represents the point set difference of Geometry a with b.";

command SymDifference(a:wkb, b:wkb) :wkb
address wkbSymDifference
comment "Returns a geometry that represents the point set semmetric difference of Geometry a with b.";


command prelude():void 	address geom_prelude;
command epilogue():void address geom_epilogue;
   
geom.prelude();

module calc;

command mbr(v:str) :mbr address mbrFromString;
command mbr(v:mbr) :mbr address mbrFromMBR;
command wkb(v:str) :wkb address wkbFromString;
command wkb(v:wkb) :wkb address wkbFromWKB;

@= ctypes
function @2( wkt:str ) :wkb;
	x := wkb.FromText(wkt,@3);
	return x;
end @2;
@mal
@:ctypes(Point,point,1)@
@:ctypes(Curve,curve,2)@
@:ctypes(Line,linestring,2)@
@:ctypes(Surface,surface,3)@
@:ctypes(Poly,polygon,3)@
@:ctypes(MultiPoint,multipoint,4)@
@:ctypes(MultiCurve,multicurve,5)@
@:ctypes(MultiLine,multilinestring,5)@
@:ctypes(MultiSurface,multisurface,6)@
@:ctypes(MultiPoly,multipolygon,6)@
@:ctypes(Geom,geometry,7)@
@:ctypes(GeomCollection,geometrycollection,7)@

@h
#ifndef GEOM_H
#define GEOM_H

#include "libgeom.h"

#ifdef WIN32
#ifndef LIBGEOM
#define geom_export extern __declspec(dllimport)
#else
#define geom_export extern __declspec(dllexport)
#endif
#else
#define geom_export extern
#endif

geom_export wkb * wkbNULL(void);

#endif /* GEOM_H */

@c

#include <geom_config.h>
#include <mal.h>
#include <mal_atom.h>
#include <mal_exception.h>
#include "geom.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <time.h>

int TYPE_mbr;

bat*
geom_prelude(void)
{
	libgeom_init();
	TYPE_mbr = malAtomSize(sizeof(mbr), sizeof(oid), "mbr");
	return NULL;	
}

void
geom_epilogue(void)
{
	libgeom_exit();
}

/*
 * Implementation of fixed-sized atom mbr.
 */
static int
mbr_isnil(mbr *mbr)
{
	if (!mbr || mbr->xmin == flt_nil || mbr->ymin == flt_nil ||
	            mbr->xmax == flt_nil || mbr->ymax == flt_nil )
		return 1;
	return 0;
}

/* NULL: generic nil mbr. */
/* returns a pointer to a nil-mbr. */
mbr*
mbrNULL(void)
{
	static mbr mbrNIL;
	mbrNIL.xmin = flt_nil;
	mbrNIL.ymin = flt_nil;
	mbrNIL.xmax = flt_nil;
	mbrNIL.ymax = flt_nil;
	return (&mbrNIL);
}

/* FROMSTR: parse string to mbr. */
/* return number of parsed characters. */
int
mbrFROMSTR(
   char*	src,	/* IN: to-be-parsed string. */
   int*		len,	/* INOUT: length of area pointed to by atom [may need enlarging!] */
   mbr**	atom	/* INOUT: ptr to atom-ptr [may need (re-)alloc!] */
)
{
	int nil = 0;
	int nchars = 0; /* The number of characters parsed; the return value. */
	GEOSGeom geosMbr = NULL; /* The geometry object that is parsed from the src string. */
	
	if (strcmp(src, str_nil) == 0) 
		nil = 1;

	if (!nil && (geosMbr = GEOSGeomFromWKT(src)) == NULL)
		return 0;

	if (*len < (int)sizeof(mbr)) {
		if (*atom) GDKfree(*atom);
		*atom = GDKmalloc(*len = sizeof(mbr));
	}
	if (nil) {
		nchars = 3;
		**atom = *mbrNULL();
	} else if (getMbrGeos(*atom, geosMbr))
		nchars = strlen(src);
	if (geosMbr)
		GEOSGeom_destroy(geosMbr);
	return nchars;
}

#define MBR_WKTLEN 256

/* TOSTR: print atom in a string. */
/* return length of resulting string. */
int
mbrTOSTR(
   char**	dst,	/* INOUT: dst charbuffer [maybe 0, may need realloc]*/
   int*		len,	/* INOUT: length of buffer */
   mbr*	atom	/* IN: to-be-printed mbr. */
)
{
	static char tempWkt[MBR_WKTLEN];
	size_t dstStrLen = 3;
	
	if (!mbr_isnil(atom)) {
		snprintf(tempWkt, MBR_WKTLEN, "BOX (%f %f, %f %f)",
			atom->xmin, atom->ymin,
			atom->xmax, atom->ymax
		);
		dstStrLen = strlen(tempWkt);
	}
	
	if (*len < (int) dstStrLen + 1) { 
		if (*dst) GDKfree(*dst);
		*dst = GDKmalloc(*len = dstStrLen + 1);
	}
	
	if (dstStrLen > 3)
		strcpy(*dst, tempWkt);
	else
		strcpy(*dst, "nil");
	return dstStrLen;
}

/* HASH: compute a hash value. */
/* returns a positive integer hash value */
hash_t
mbrHASH(
   mbr*	atom	/* IN: to-be-hashed mbr. */
)
{
	return (hash_t) ( (((int) atom->xmin) * ((int) atom->ymin)) * (((int) atom->xmax) * ((int) atom->ymax)) );
}

/* COMP: compare two mbrs. */
/* returns int <0 if l<r, 0 if l==r, >0 else */
int
mbrCOMP(
   mbr*	l,	/* IN: first geom_point. */
   mbr*	r	/* IN: second geom_point. */
)
{
	/* simple lexicographical ordering on (x,y) */
	int res;
	if (l->xmin == r->xmin)
		res = (l->ymin < r->ymin)? -1: (l->ymin == r->ymin)? 0: 1;
	else 
		res = (l->xmin < r->xmin)? -1: 1;
	if (res == 0) {
		if (l->xmax == r->xmax)
			res = (l->ymax < r->ymax)? -1: (l->ymax == r->ymax)? 0: 1;
		else 
			res = (l->xmax < r->xmax)? -1: 1;
	}
	return res;
}

mbr *
mbrREAD(mbr *a, stream *s, size_t cnt)
{
	mbr *c;
	size_t i;
	int xmin, ymin, xmax, ymax;

	for(i=0, c = a;i<cnt;i++, c++) {
		if (!stream_readInt(s, &xmin) ||
		    !stream_readInt(s, &ymin) ||
		    !stream_readInt(s, &xmax) ||
		    !stream_readInt(s, &ymax) ) 
			return NULL;
		c->xmin = (flt)xmin;
		c->ymin = (flt)ymin;
		c->xmax = (flt)xmax;
		c->ymax = (flt)ymax;
	}
	return a;
}

void
mbrWRITE(mbr *c, stream *s, size_t cnt)
{
	size_t i;

	for(i=0;i<cnt;i++, c++) {
		if (!stream_writeInt(s, c->xmin) ||
		    !stream_writeInt(s, c->ymin) ||
		    !stream_writeInt(s, c->xmax) ||
		    !stream_writeInt(s, c->ymax))
			break;
	}
}

str
mbrFromString(mbr **w, str *src)
{
	int len = 0;

	if (mbrFROMSTR(*src, &len, w))
		return MAL_SUCCEED;
	throw(MAL, "mbr.FromString", GDKerrbuf);
}

str
mbrFromMBR(mbr **w, mbr **src)
{
	*w = (mbr*)GDKmalloc(sizeof(mbr));

	**w = **src;
	return MAL_SUCCEED;
}

/*
 * Implementation of variable-sized atom wkb.
 */

static size_t
wkb_size(size_t len)
{
	if (len == ~(size_t) 0)
		len = 0;
	return sizeof(wkb) - 1 + len;
}

/* TOSTR: print atom in a string. */
/* return length of resulting string. */
int
wkbTOSTR(
   char**	dst,	/* INOUT: dst charbuffer [maybe 0, may need realloc]*/
   int*		len,	/* INOUT: length of buffer */
   wkb*	atom	/* IN: to-be-printed geom_geometry. */
)
{
	char* wkt = NULL;
	int dstStrLen = 3; /* "nil" */
	GEOSGeom geosGeometry = wkb2geos(atom);
	
	if (geosGeometry) {
		wkt = GEOSGeomToWKT(geosGeometry);
		dstStrLen = strlen(wkt);
		GEOSGeom_destroy(geosGeometry);
	}
	
	if (*len < dstStrLen + 1) { /* + 1 for the '\0' */
		if (*dst) GDKfree(*dst);
		*dst = GDKmalloc(*len = dstStrLen + 1);
	}
	
	if (wkt) {
		strcpy(*dst, wkt);
		free(wkt);
	} else {
		strcpy(*dst, "nil");
	}

	return dstStrLen;
}

/* FROMSTR: parse string to @1. */
/* return number of parsed characters. */
int
wkbFROMSTR(
   char*	src,	/* IN: to-be-parsed string. */
   int*		len,	/* INOUT: length of area pointed to by atom [may need enlarging!] */
   wkb**	atom	/* INOUT: ptr to atom-ptr [may need (re-)alloc!] */
)
{
	GEOSGeom geosGeometry = NULL; /* The geometry object that is parsed from the src string. */
	unsigned char* wkb = NULL; /* The "well known binary" serialization of the geometry object. */
	size_t wkbLen = 0; /* The length of the wkb string. */
	int nil = 0;

	if (strcmp(src, str_nil) == 0) 
		nil = 1;

	if (!nil && (geosGeometry = GEOSGeomFromWKT(src)) == NULL)
		return 0;
	
	if (!nil && GEOSGeomTypeId(geosGeometry) == -1) {
		GEOSGeom_destroy(geosGeometry);
		return 0;
	}

	if (!nil) {
		wkb = GEOSGeomToWKB_buf(geosGeometry, &wkbLen);
		GEOSGeom_destroy(geosGeometry);
	}
	if (*len < (int)wkb_size(wkbLen)) {
		if (*atom) GDKfree(*atom);
		*atom = GDKmalloc(*len = (int)wkb_size(wkbLen));
	}
	if (!wkb) {
		**atom = *wkbNULL();
	} else {
		(*atom)->len = wkbLen;
		memcpy(&(*atom)->data, wkb, wkbLen);
		free(wkb);
	}
	return strlen(src);
}

str
wkbFromString(wkb **w, str *wkt)
{
	int len = 0;

	if (wkbFROMSTR(*wkt, &len, w))
		return MAL_SUCCEED;
	throw(MAL, "wkb.FromString", GDKerrbuf);
}

str
wkbFromWKB(wkb **w, wkb **src)
{
	*w = (wkb*)GDKmalloc(wkb_size((*src)->len));

	if (wkb_isnil(*src)) {
		**w = *wkbNULL();
	} else {
		(*w)->len = (*src)->len;
		memcpy(&(*w)->data, &(*src)->data, (*src)->len);
	}
	return MAL_SUCCEED;
}

str
wkbFromText(wkb **w, str *wkt, int *tpe)
{
	int len = 0, te = *tpe;

	*w = NULL;
	if (wkbFROMSTR(*wkt, &len, w) && 
	    (wkb_isnil(*w) ||
	     *tpe == wkbGeometryCollection || (te = (((*w)->data[1])&0x0f)) == *tpe ))
		return MAL_SUCCEED;
	if (!(*w))
		*w = (wkb*)GDKmalloc(sizeof(wkb));
	**w = *wkbNULL();
	if (te != *tpe) 
		throw(MAL, "wkb.FromText", "Geometry type '%s' not found", geom_type2str(*tpe));
	throw(MAL, "wkb.FromText", GDKerrbuf);
}

hash_t
wkbHASH(wkb *w)
{
	int i;
	hash_t h = 0;

	for (i = 0; i<(w->len-1); i+=2) {
		int a = w->data[i], b = w->data[i+1];
                h = (h << 3) ^ (h >> 11) ^ (h >> 17) ^ (b << 8) ^ a;
	}
	return h;
}

int
wkbCOMP(wkb *l, wkb *r)
{
	int len = l->len;

	if (len != r->len)
		return len-r->len;

	if (len == ~(int) 0)
		return (0);

	return memcmp(l->data, r->data, len);
}

wkb *
wkbNULL(void)
{
	static wkb nullval;

	nullval.len = ~(int) 0;
	return (&nullval);
}

str
wkbAsText(str *r, wkb** w) 
{
	int len = 0;

	wkbTOSTR(r, &len, *w);
	if (len)
		return MAL_SUCCEED;
	throw(MAL, "geom.AsText", "Failed to create Text from Well Known Format");
}

void
wkbDEL(Heap *h, var_t *index)
{
	HEAP_free(h, *index);
}

wkb *
wkbREAD(wkb *a, stream *s, size_t cnt)
{
	int len;

	(void) cnt;
	assert(cnt == 1);
	if (!stream_readInt(s, &len))
		return NULL;
	if ((a = GDKmalloc(wkb_size(len))) == NULL)
		return NULL;
	a->len = len;
	if (len > 0 && stream_read(s, (char *) a->data, len, 1) != 1) {
		GDKfree(a);
		return NULL;
	}
	return a;
}

void
wkbWRITE(wkb *a, stream *s, size_t cnt)
{
	int len = a->len;

	(void) cnt;
	assert(cnt == 1);
	if (stream_writeInt(s, len) && len > 0) /* 64bit: check for overflow */
		stream_write(s, (char *) a->data, len, 1);
}

void
wkbCONVERT(wkb *b, int direction)
{
	(void) direction;
	b->len = normal_int_SWAP(b->len);
}

int
wkbLENGTH(wkb *p)
{
	return wkb_size(p->len);
}

void
wkbHEAP(Heap *heap, size_t capacity)
{
	HEAP_initialize(heap, capacity, 0, (int) sizeof(var_t));
}

var_t
wkbPUT(Heap *h, var_t *bun, wkb *val)
{
	char *base;

	*bun = HEAP_malloc(h, wkb_size(val->len));
	base = h->base;
	if (*bun)
		memcpy(&base[*bun], (char *) val, wkb_size(val->len));
	return *bun;
}

/* COMMAND mbr
 * Creates the mbr for the given geom_geometry.
 */
str
ordinatesMBR(
	mbr** res, /* INOUT. */
	flt* minX, /* IN. */
	flt* minY, /* IN. */
	flt* maxX, /* IN. */
	flt* maxY /* IN. */
)
{
	*res = (mbr*)GDKmalloc(sizeof(mbr));
	(*res)->xmin = *minX;
	(*res)->ymin = *minY;
	(*res)->xmax = *maxX;
	(*res)->ymax = *maxY;
	return MAL_SUCCEED;
}


/* COMMAND mbr
 * Creates the mbr for the given geom_geometry.
 */
str
wkbMBR(
	mbr** res, /* INOUT. */
	wkb** geom /* IN. */
)
{
	*res = (mbr*)GDKmalloc(sizeof(mbr));
	if (*res && getMbrGeom(*res, *geom))
	{
		return MAL_SUCCEED;
	}
	throw(MAL, "geom.mbr", "Failed to create mbr");
}

wkb *
geos2wkb( GEOSGeom geosGeometry )
{
	size_t wkbLen = 0; 
	unsigned char *w = GEOSGeomToWKB_buf(geosGeometry, &wkbLen);
	wkb *atom = GDKmalloc((int)wkb_size(wkbLen));

	if (!w) {
		*atom = *wkbNULL();
	} else {
		atom->len = wkbLen;
		memcpy(&atom->data, w, wkbLen);
		free(w);
	}
	return atom;
}

@= getcoord
str
wkbgetcoord@1(double *out, wkb **geom)
{
	str ret = "";
	GEOSGeom geosGeometry = wkb2geos(*geom);

	if (geosGeometry) { 
		if (GEOSCoordSeq_get@1(GEOSGeom_getCoordSeq( geosGeometry),0,out) != 0) {
			ret = MAL_SUCCEED;
		}
		GEOSGeom_destroy(geosGeometry);
	}
	if (ret)
		throw(MAL, "geom.@1", "Failed");
	return ret;
}
@c
@:getcoord(X)@
@:getcoord(Y)@

@c
str
wkbcreatepoint(wkb **out, double *x,double *y)
{
	GEOSCoordSeq pnt = GEOSCoordSeq_create(1, 2);
	GEOSCoordSeq_setX(pnt,0,*x);
	GEOSCoordSeq_setY(pnt,0,*y);
	*out = geos2wkb(GEOSGeom_createPoint(pnt));
	return MAL_SUCCEED;
}

str
mbroverlaps( bit *out, mbr *b1, mbr *b2)
{
    *out = ((b1->ymax >= b2->ymax && b1->xmin <= b2->ymax) ||
	    (b2->ymax >= b1->ymax && b2->xmin <= b1->ymax)) &&
	   ((b1->xmax >= b2->xmax && b1->ymin <= b2->xmax) ||
	    (b2->xmax >= b1->xmax && b2->ymin <= b1->xmax));
    return MAL_SUCCEED;
}

@= basic
str
wkb@1( @2 *out, wkb **geom)
{
	str ret = "";
	GEOSGeom geosGeometry = wkb2geos(*geom);

	if (geosGeometry) { 
		if ((*out=@4(@3( geosGeometry))) != @5) {
			ret = MAL_SUCCEED;
		}
		GEOSGeom_destroy(geosGeometry);
	}
	if (ret)
		throw(MAL, "geom.@1", "Failed");
	return ret;
}
@c
@:basic(Dimension,int,GEOSGeom_getDimensions,,0)@
@:basic(GeometryTypeId,int,GEOSGeomTypeId,,-1)@
@:basic(SRID,int,GEOSGetSRID,,0)@
@:basic(Envelope,wkb*,GEOSEnvelope,geos2wkb,NULL)@
@:basic(IsEmpty,bit,GEOSisEmpty,,2)@
@:basic(IsSimple,bit,GEOSisSimple,,2)@
@:basic(Boundary,wkb*,GEOSBoundary,geos2wkb,NULL)@

@= spatial
str
wkb@1( bit *out, wkb **a, wkb **b)
{
	str ret = "";
	GEOSGeom ga = wkb2geos(*a);
	GEOSGeom gb = wkb2geos(*b);

	if (ga && gb) { 
		*out= @2( ga, gb);
		ret = MAL_SUCCEED;
	}
	if (ga)
		GEOSGeom_destroy(ga);
	if (gb)
		GEOSGeom_destroy(gb);
	if (ret)
		throw(MAL, "geom.@1", "Failed");
	return ret;
}
@= spatial2
str
wkb@1( bit *out, wkb **a, wkb **b, @3 @4)
{
	str ret = "";
	GEOSGeom ga = wkb2geos(*a);
	GEOSGeom gb = wkb2geos(*b);

	if (ga && gb) { 
		*out= @2( ga, gb, @4);
		ret = MAL_SUCCEED;
	}
	if (ga)
		GEOSGeom_destroy(ga);
	if (gb)
		GEOSGeom_destroy(gb);
	if (ret)
		throw(MAL, "geom.@1", "Failed");
	return ret;
}
@c
@:spatial(Equals,GEOSEquals)@
@:spatial(Disjoint,GEOSDisjoint)@
@:spatial(Intersect,GEOSIntersects)@
@:spatial(Touches,GEOSTouches)@
@:spatial(Crosses,GEOSCrosses)@
@:spatial(Within,GEOSWithin)@
@:spatial(Contains,GEOSContains)@
@:spatial(Overlaps,GEOSOverlaps)@
@:spatial2(Relate,GEOSRelatePattern,char*,pattern)@

@= analysis
str
wkb@1( dbl *out, wkb **a)
{
	str ret = "";
	GEOSGeom ga = wkb2geos(*a);

	if (ga) { 
		if ( @2( ga, out) != 0)
			ret = MAL_SUCCEED;
		GEOSGeom_destroy(ga);
	}
	if (ret)
		throw(MAL, "geom.@1", "Failed");
	return ret;
}
@= analysis2
str
wkb@1( dbl *out, wkb **a, wkb **b)
{
	str ret = "";
	GEOSGeom ga = wkb2geos(*a);
	GEOSGeom gb = wkb2geos(*b);

	if (ga && gb) { 
		if ( @2( ga, gb, out) != 0)
			ret = MAL_SUCCEED;
	}
	if (ga)
		GEOSGeom_destroy(ga);
	if (gb)
		GEOSGeom_destroy(gb);
	if (ret)
		throw(MAL, "geom.@1", "Failed");
	return ret;
}
@= analysis3
str
wkb@1( @2 *out, wkb **a, wkb **b)
{
	str ret = "";
	GEOSGeom ga = wkb2geos(*a);
	GEOSGeom gb = wkb2geos(*b);

	if (ga && gb) { 
		if ( (*out=@4(@3( ga, gb))) != NULL)
			ret = MAL_SUCCEED;
	}
	if (ga)
		GEOSGeom_destroy(ga);
	if (gb)
		GEOSGeom_destroy(gb);
	if (ret)
		throw(MAL, "geom.@1", "Failed");
	return ret;
}
@c
@:analysis(Area,GEOSArea)@
@:analysis(Length,GEOSLength)@
@:analysis2(Distance,GEOSDistance)@
@:basic(ConvexHull,wkb*,GEOSConvexHull,geos2wkb,NULL)@
@:analysis3(Intersection,wkb*,GEOSIntersection,geos2wkb)@
@:analysis3(Union,wkb*,GEOSUnion,geos2wkb)@
@:analysis3(Difference,wkb*,GEOSDifference,geos2wkb)@
@:analysis3(SymDifference,wkb*,GEOSSymDifference,geos2wkb)@

@c
str
wkbBuffer( wkb **out, wkb **geom, dbl *distance)
{
	str ret = "";
	GEOSGeom geosGeometry = wkb2geos(*geom);

	if (geosGeometry) { 
		if ((*out=geos2wkb(GEOSBuffer( geosGeometry, *distance, -1))) != NULL) {
			ret = MAL_SUCCEED;
		}
		GEOSGeom_destroy(geosGeometry);
	}
	if (ret)
		throw(MAL, "geom.Buffer", "Failed");
	return ret;
}

@(
#define prepareOperand(X,Y,Z) \
	if( (X= BATdescriptor(*Y)) == NULL ) \
		throw(MAL, "geom." Z, "Cannot access descriptor");
#define prepareResult(X,Y,T,Z) \
	X= BATnew(Y->htype,T,BATcount(Y)); \
	if( Y->htype== TYPE_void) \
		BATseqbase(X, Y->hseqbase); \
	if( X == NULL){ \
		BBPreleaseref(Y->batCacheid); \
		throw(MAL, "geom." Z, "no space available "); \
	} \
	X->hsorted=Y->hsorted; \
	X->tsorted=0; 
#define finalizeResult(X,Y,Z) \
	if (!((Y)->batDirty&2)) (Y) = BATsetaccess((Y), BAT_READ); \
	*X = (Y)->batCacheid; \
	BBPkeepref(*(X));\
	BBPreleaseref(Z->batCacheid);
str 
bat_wkbMBR(int *ret, int *l)
{   
	BAT *bn, *b;
	BUN p,q;
	int xx;
	wkb *x;
	mbr y;

	prepareOperand(b,l,"mbr");
	prepareResult(bn,b,TYPE_mbr,"mbr");

	BATloopFast(b, p, q, xx) {
		mbr *yp = &y;
		ptr h = BUNhead(b,p);
		x = (wkb*)BUNtail(b,p);
		if (wkb_isnil(x))
			yp = mbrNULL();
		else 
			wkbMBR(yp,&x);
		bunfastins(bn, h, yp);
	}
	finalizeResult(ret,bn,b);
	return MAL_SUCCEED;
bunins_failed:
	BBPreleaseref(b->batCacheid);
	BBPunfix(bn->batCacheid);
	throw(MAL, "geom.mbr", "bunins failed");
}
@)

@mal

# wkbPoint := 1;
# wkbLineString := 2;
# wkbPolygon := 3;
# wkbMultiPoint := 4;
# wkbMultiLineString := 5;
# wkbMultiPolygon := 6;
# wkbGeometryCollection := 7;

