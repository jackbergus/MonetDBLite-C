stdout of test 'udf-reverse` in directory 'sql/backends/monet5/UDF/cudf` itself:


# 18:44:21 >  
# 18:44:21 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "gdk_dbfarm=/ufs/manegold/_/Monet/HG/default/prefix/--disable-debug_--enable-optimize_--disable-assert/var/MonetDB" "--set" "mapi_open=true" "--set" "mapi_port=36851" "--set" "monet_prompt=" "--trace" "--forcemito" "--set" "mal_listing=2" "--dbname=mTests_backends_monet5_UDF" "--set" "mal_listing=0"
# 18:44:21 >  

# MonetDB 5 server v11.8.0
# This is an unreleased version
# Serving database 'mTests_backends_monet5_UDF', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.630 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:36851/
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_history.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_compress.sql
# loading sql script: 18_dictionary.sql
# loading sql script: 19_cluster.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 40_geom.sql
# loading sql script: 80_udf.sql
# loading sql script: 99_system.sql

# 18:44:21 >  
# 18:44:21 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=rome" "--port=36851"
# 18:44:21 >  

#explain select reverse('MonetDB');
% .explain # table_name
% mal # name
% clob # type
% 99 # length
function user.s4_1():void;
    X_10:void := querylog.define("explain select reverse(\\'MonetDB\\');","sequential_pipe",6:int);
    X_3:str := udf.reverse("MonetDB");
# querylog.define("explain select reverse(\\'MonetDB\\');","sequential_pipe")
    sql.resultSet(".L2","L2","clob",0:int,0:int,4:int,X_3);
end user.s4_1;
#inline               actions= 0 time=2 usec 
#candidates           actions= 1 time=8 usec 
#remap                actions= 0 time=3 usec 
#costModel            actions= 1 time=7 usec 
#coercions            actions= 0 time=2 usec 
#evaluate             actions= 1 time=18 usec 
#emptybind            actions= 0 time=3 usec 
#pushselect           actions= 0 time=3 usec 
#aliases              actions= 1 time=9 usec 
#mergetable           actions= 0 time=14 usec 
#deadcode             actions= 1 time=8 usec 
#aliases              actions= 0 time=3 usec 
#constants            actions= 2 time=7 usec 
#commonTerms          actions= 0 time=3 usec 
#projectionpath       actions= 0 time=3 usec 
#reorder              actions= 1 time=15 usec 
#deadcode             actions= 0 time=4 usec 
#reduce               actions=22 time=18 usec 
#matpack              actions= 0 time=4 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=2 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=4 usec 
#garbageCollector     actions= 1 time=9 usec 
#total                actions= 1 time=204 usec 
#select reverse('MonetDB');
% .L2 # table_name
% L2 # name
% clob # type
% 7 # length
[ "BDtenoM"	]
#create table udf_reverse ( x string );
#insert into udf_reverse values ('MonetDB');
[ 1	]
#insert into udf_reverse values ('Database Architecture');
[ 1	]
#insert into udf_reverse values ('Information Systems');
[ 1	]
#insert into udf_reverse values ('Centrum Wiskunde & Informatica');
[ 1	]
#select * from udf_reverse;
% sys.udf_reverse # table_name
% x # name
% clob # type
% 30 # length
[ "MonetDB"	]
[ "Database Architecture"	]
[ "Information Systems"	]
[ "Centrum Wiskunde & Informatica"	]
#explain select reverse(x) from udf_reverse;
% .explain # table_name
% mal # name
% clob # type
% 105 # length
function user.s12_1():void;
    X_28:void := querylog.define("explain select reverse(x) from udf_reverse;","sequential_pipe",20:int);
    X_13 := bat.new(nil:str);
    X_20 := bat.append(X_13,"sys.L2");
    X_15 := bat.new(nil:str);
    X_22 := bat.append(X_15,"L2");
    X_16 := bat.new(nil:str);
    X_24 := bat.append(X_16,"clob");
    X_17 := bat.new(nil:int);
    X_26 := bat.append(X_17,0:int);
    X_19 := bat.new(nil:int);
    X_27 := bat.append(X_19,0:int);
    X_3 := sql.mvc();
    C_4:bat[:oid] := sql.tid(X_3,"sys","udf_reverse");
    X_7:bat[:str] := sql.bind(X_3,"sys","udf_reverse","x",0:int);
    X_10 := algebra.projection(C_4,X_7);
    X_11:bat[:str] := batudf.reverse(X_10);
# querylog.define("explain select reverse(x) from udf_reverse;","sequential_pipe")
    sql.resultSet(X_20,X_22,X_24,X_26,X_27,X_11);
end user.s12_1;
#inline               actions= 0 time=4 usec 
#candidates           actions= 1 time=15 usec 
#remap                actions= 1 time=25 usec 
#costModel            actions= 1 time=12 usec 
#coercions            actions= 0 time=2 usec 
#evaluate             actions= 0 time=3 usec 
#emptybind            actions= 0 time=4 usec 
#pushselect           actions= 0 time=4 usec 
#aliases              actions= 1 time=16 usec 
#mergetable           actions= 0 time=23 usec 
#deadcode             actions= 2 time=15 usec 
#aliases              actions= 0 time=4 usec 
#constants            actions= 0 time=5 usec 
#commonTerms          actions= 0 time=5 usec 
#projectionpath       actions= 0 time=4 usec 
#reorder              actions= 1 time=25 usec 
#deadcode             actions= 0 time=5 usec 
#reduce               actions=26 time=26 usec 
#matpack              actions= 0 time=4 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=3 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=10 usec 
#garbageCollector     actions= 1 time=15 usec 
#total                actions= 1 time=291 usec 
#select reverse(x) from udf_reverse;
% sys.L2 # table_name
% L2 # name
% clob # type
% 30 # length
[ "BDtenoM"	]
[ "erutcetihcrA esabataD"	]
[ "smetsyS noitamrofnI"	]
[ "acitamrofnI & ednuksiW murtneC"	]

# 18:44:22 >  
# 18:44:22 >  "Done."
# 18:44:22 >  

