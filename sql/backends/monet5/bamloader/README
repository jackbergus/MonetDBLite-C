This document describes how to use the code that can be found in sql/backends/monet5/bam/


***************************************************************************************************
Installation
***************************************************************************************************
In order to run the code, samtools [1][2] has to be installed. To do so, create a directory named
samtools in some location <samtools_location> and unpack the contents of samtools into
<samtools_location>/samtools. Then, create symbolic links <samtools_location>/lib and 
<samtools_location>/include that both link to <samtools_location>/samtools. Now install
samtools with the compiler flag -fPIC (in my case, I had to alter the by samtools provided
Makefile by setting the constant CFLAGS to -g -Wall -O2 -fPIC.

The bamloader writes messages to a log file. For now, this logfile is specified in sql/
backends/monet5/bam/bamloader.h in the constant LOG_FILE. Change this to a filepath of 
choice. The given directory must exist, while the file does not. If the file doesn't
exist it is automatically created.

Then you can compile and install MonetDB with BAM file support using the usual sequence
as described at http://www.monetdb.org/wiki/MonetDB:Building_from_sources ,
but telling configure where to find your samtools installation, i.e., 
	bootstrap
	configure --with-samtools=<samtools_location>
	make
	make install


[1] http://samtools.sourceforge.net/
[2] http://en.wikipedia.org/wiki/SAMtools


***************************************************************************************************
Loading BAM files in the database
***************************************************************************************************
- First of all, the BAM schema needs to be loaded in the database. This can be done by executing
  the SQL code found in sql/backends/monet5/bam/bam_schema.sql (note that cleaning of the database
  is done by executing sql/backends/monet5/bam/bam_clear.sql).
- From the SQL interpreter, you can now call the UDF bamloader(str filepath, int, int). The first
  string needs to contain the absolute or relative path to a bam file. The last two arguments are 
  not used yet.
- If all went well, the data from the specified bam file is now loaded into the tables of the bam
  schema. Details of the loading process can be found in the aforementioned logfile. Note that you
  can load multiple BAM files into the database my doing multiple calls to bamloader.
  
  
  
  
If you have any questions, please contact me at c.p.cijvat@cwi.nl
