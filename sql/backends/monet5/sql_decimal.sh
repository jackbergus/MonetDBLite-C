# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2014 MonetDB B.V.
# All Rights Reserved.

cat <<EOF
# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2014 MonetDB B.V.
# All Rights Reserved.

# This file was generated by using the script ${0##*/}.

EOF

integer="bte sht int wrd lng"	# all integer types
numeric="$integer flt dbl"	# all numeric types

for tp1 in $integer ; do
	for tp2 in flt dbl ; do
	    cat <<EOF
command calc.${tp1}( v:${tp2}, digits:int, scale:int ) :${tp1}
address ${tp2}_num2dec_${tp1}
comment "cast number to decimal(${tp1}) and check for overflow";

command batcalc.${tp1}( v:bat[:oid,:${tp2}], digits:int, scale:int ) :bat[:oid,:${tp1}]
address bat${tp2}_num2dec_${tp1}
comment "cast number to decimal(${tp1}) and check for overflow";

EOF
done
done

for tp1 in $numeric ; do
	for tp2 in $integer ; do
	    cat <<EOF
command calc.${tp1}( v:${tp2}, digits:int, scale:int ) :${tp1}
address ${tp2}_num2dec_${tp1}
comment "cast number to decimal(${tp1}) and check for overflow";

command batcalc.${tp1}( v:bat[:oid,:${tp2}], digits:int, scale:int ) :bat[:oid,:${tp1}]
address bat${tp2}_num2dec_${tp1}
comment "cast number to decimal(${tp1}) and check for overflow";

command calc.${tp1}( s1:int, v:${tp2}) :${tp1} 
address ${tp2}_dec2_${tp1}
comment "cast decimal(${tp2}) to ${tp1} and check for overflow";
command calc.${tp1}( s1:int, v:${tp2}, d2:int, s2:int ) :${tp1} 
address ${tp2}_dec2dec_${tp1}
comment "cast decimal(${tp2}) to decimal(${tp1}) and check for overflow";

command batcalc.${tp1}( s1:int, v:bat[:oid,:${tp2}]) :bat[:oid,:${tp1}]
address bat${tp2}_dec2_${tp1}
comment "cast decimal(${tp2}) to ${tp1} and check for overflow";
command batcalc.${tp1}( s1:int, v:bat[:oid,:${tp2}], d2:int, s2:int ) :bat[:oid,:${tp1}] 
address bat${tp2}_dec2dec_${tp1}
comment "cast decimal(${tp2}) to decimal(${tp1}) and check for overflow";

EOF
done
done
