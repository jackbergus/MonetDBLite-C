@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2008 CWI.
@' All Rights Reserved.

@f readme
@a Romulo Goncalves, Erietta Liarou, Martin Kersten
@v 1
@+ DataCell Demo Reference
This document is a temporary manual to help new DataCell (DC) users to
create a working configuration for demo purposes.

[sensor -> DC <- actuator]

The simplest setup consists of a single sensor connected to the DC 
and a single actuator.
Events produced by the sensor are handled by the DataCell and
stream query results are delivered to the actuators.

The DC contains a single receptor and an emitter.
Both are controlled by three essential MAL commands:
START -> starts the receptor/emitter (setting a new connection)
PAUSE -> pause the emission/reception of tuples (to continue use START)
STOP  -> stops the receptor/emitter (closing the connection)

These commands allow you to influence tuples movements in the system.
[OBSOLETE]
A concrete example is given in the test file:
datacell/src/engine/Tests/conveyor/ConveyorScript2.mal.demo 

A DC simulation environment is constructed using implementations
for the sensor and actuator. For both a simple tool has been
constructed. Their functional properties can be inspected using the --help,
for example:
&> sensor --help
&> actuator --help

The prime options for both are <host> and <port>, which allow you 
to set the connection parameters. 
The sensor contains the option <sequence> whose value determines how 
many times it should sent batches of events to the receptor. 
The sequence length -1 denotes an infinite loop.

Starting an experimentation environment requires care in
starting the components in the correct order and functionality
(e.g. server/client). An erroneous sequence affects the
timing results, or even lead to a non-operational environment.

Each component can act as a server or a client and their interaction 
can be done in the following ways:
sensor   (client/server) -> receptor (server/client)
emitter  (client/server) -> receptor (server/client)
actuator (client/server) -> emitter  (server/client)

The role of the component as server or client is controlled
with the --server command line argument.
For sensor/actuator:
	--server=1 (to take a server role, the sensor is one by default).
	--server=0 (to take a client role, the actuator is zero by default).

The behavior of the DataCell is described in a MAL file, where
the role can be made explicit with:
	receptor.setType(X1,<server>) 
(sets the receptor for basket X1 as a server). 
	emitter.setType(X2,<client>)  
(sets the emitter for basket X2 as a client).
Note: By default the receptor is a client and the emitter is a server.
 

With the options presented you can create your own complex DC network.
The DC's interactions are created through connections between 
emitters and receptors. 
For example: a connection between an emitter (DC A) and receptor (DC B) 
creates a link between 2 DC's. The chain could be completed with
a sensor hooked up to DC A and an actuator with DC B.

For testing we suggest to use the following configuration
and steps. An (client) actuator is started to receive the results:

actuator --trace 1 --server 1 --port 50001

The actuator is a server, which means it can be contacted
by process in client mode.

The DataCell is configured with a server receptor and
a client emitter: The corresponding MAL code becomes:

... create receptor...
receptor.setType("X1","server"); 
... create emitter...
emitter.setType("X3","client");

Preconfigured DataCell scenarios.

The source distribution contains two functional complete examples:
a conveyor and diamond. Their MAL code are located in
datacell/src/engine/Tests/conveyor/ and
datacell/src/engine/Tests/diamond/, respectively.
The size of both experiments is a parameter. Shell scripts
are included to generate the experiment scenario:

For example, a conveyor scenario can be derived with
	CreateCovenyorScript <n>
where "n" is the number of continuous queries

For the diamond scenario use: CreateDiamondScript <n>
where number of queries =  
	for (i=0; i<n; i++)
	{ number of queries = number of queries + 2 raised to the (n-i)-th power }
i.e., if n=3, we will have 2^1+2^2+2^3 diamond queries.

Both scripts leave the scenario file behind, e.g.
CreateConveyorScript 2 will create Conveyor2.mal

Finally, start a sensor that should be a client, i.e.,
sensor --sequence 100 -b 2 -c 2 --trace 0 --server 0 -d 0 --port 45000

The order to start the components should be:
actuator, DC, sensor, i.e., in three different terminals write:

actuator --trace 1 --server 1 --port 50001
mserver5 ConveyorScript2.mal.demo
sensor --sequence 100 -b 2 -c 2 --trace 1 --server 0 -d 1 --port 45000

WHAT IS THE OUTPUT

We hope this information is enough to help you in the DC configuration. 
Don't hesitate to contact the DC team otherwise.
