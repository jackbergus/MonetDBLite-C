@/
The contents of this file are subject to the MonetDB Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is the MonetDB Database System.

The Initial Developer of the Original Code is CWI.
Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
Copyright August 2008-2011 MonetDB B.V.
All Rights Reserved.
@

@f opt_datacell
@a M. Kersten
@- Datacell optimizer
Assume simple queries 
@{
@mal
pattern optimizer.datacell():str
address OPTdatacell;
pattern optimizer.datacell(mod:str, fcn:str):str
address OPTdatacell
comment "Datacell expression optimizer";

@h
#ifndef _OPT_DATACELL_
#define _OPT_DATACELL_
#include "opt_prelude.h"
#include "opt_support.h"

#define OPTDEBUGdatacell  if ( optDebug & (1 <<DEBUG_OPT_DATACELL) )

@-
We keep a flow dependency table to detect.
@c
#include "monetdb_config.h"
#include "opt_datacell.h"
#include "opt_deadcode.h"
#include "mal_interpreter.h"	/* for showErrors() */
#include "mal_builder.h"

static int
OPTdatacellImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{

	addPipeDefinition("default_pipe",   
					"inline,remap,datacell,evaluate,costModel,coercions,emptySet,aliases,mitosis,"
					"mergetable,deadcode,commonTerms,joinPath,reorder,deadcode,reduce,dataflow,"
					"history,multiplex,accumulators,garbageCollector" );
	OPTDEBUGdatacell {
		mnstr_printf(cntxt->fdout, "#Datacell optimizer started\n");
		printFunction(cntxt->fdout, mb, 0, LIST_MAL_STMT);
	}
	(void) stk;
	(void) pci;
	return 0;
}
@= exportOptimizer
opt_export str OPT@1(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);

@= wrapOptimizer
/* #define _DEBUG_OPTIMIZER_*/

str OPT@1(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p){
    str modnme;
    str fcnnme;
    str msg= MAL_SUCCEED;
    Symbol s= NULL;
    lng t,clk= GDKusec();
    int actions = 0;

    optimizerInit();
    if( p )
        removeInstruction(mb, p);
    OPTDEBUG@1 mnstr_printf(cntxt->fdout,"=APPLY OPTIMIZER @1\n");
    if( p && p->argc > 1 ){
        if( getArgType(mb,p,1) != TYPE_str ||
            getArgType(mb,p,2) != TYPE_str ||
            !isVarConstant(mb,getArg(p,1)) ||
            !isVarConstant(mb,getArg(p,2))
        ) {
            throw(MAL, "optimizer.@1", ILLARG_CONSTANTS);
        }
        if( stk != 0){
            modnme= *(str*)getArgReference(stk,p,1);
            fcnnme= *(str*)getArgReference(stk,p,2);
        } else {
            modnme= getArgDefault(mb,p,1);
            fcnnme= getArgDefault(mb,p,2);
        }
        s= findSymbol(cntxt->nspace, putName(modnme,strlen(modnme)),putName(fcnnme,strlen(fcnnme)));

        if( s == NULL) {
            char buf[1024];
            snprintf(buf,1024, "%s.%s",modnme,fcnnme);
            throw(MAL, "optimizer.@1", RUNTIME_OBJECT_UNDEFINED ":%s", buf);
        }
        mb = s->def;
        stk= 0;
    }
    if( mb->errors ){
        /* when we have errors, we still want to see them */
        addtoMalBlkHistory(mb,"@1");
        return MAL_SUCCEED;
    }
    actions= OPT@1Implementation(cntxt, mb,stk,p);
    msg= optimizerCheck(cntxt, mb, "optimizer.@1", actions, t=(GDKusec() - clk),@2);
    OPTDEBUG@1 {
        mnstr_printf(cntxt->fdout,"=FINISHED @1 %d\n",actions);
        printFunction(cntxt->fdout,mb,0,LIST_MAL_STMT | LIST_MAPI);
    }
    DEBUGoptimizers
        mnstr_printf(cntxt->fdout,"#opt_reduce: %d ms\n",t);
    QOTupdateStatistics("@1",actions,t);
    addtoMalBlkHistory(mb,"@1");
    return msg;
}
@h
@:exportOptimizer(datacell)@
#endif
@c
#include "opt_statistics.h"
@:wrapOptimizer(datacell,OPT_CHECK_ALL)@
@}
