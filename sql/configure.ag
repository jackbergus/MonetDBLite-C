#                                               -*- Autoconf -*-

# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-2007 CWI.
# All Rights Reserved.

dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.53)
AC_INIT([MonetDB SQL Server], [2.19.0], [monet@cwi.nl], [sql])
#                              ^^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AC_CONFIG_AUX_DIR(conf)
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
AH_TOP([#include "sysdefs.h"])
AH_BOTTOM([#include "stddef.h"])

dnl ----------------------
AM_INIT_AUTOMAKE([tar-ustar])
AC_CONFIG_SRCDIR([src/include/sql_catalog.h])
AM_CONFIG_HEADER(sql_config.h:conf/config.h.in)
CONFIG_H=sql_config.h
AC_SUBST(CONFIG_H)

# SQL_BUILD and SQL_SOURCE are *only* used for monetdb-sql-config and RunMserver
# SQL_SOURCE is the absolute path name of the source directory
# (srcdir can be relative)

# The Q versions of various variables are used in places where \'s
# need to be escapes with an extra \.  Configure does not support \'s
# in path names, so there is no need to do anything special here
# except set the variables.  The command to set them in case we do
# need to escape the \'s is Qvar=`echo "$var" | sed 's/\\\\/\\\\\\\\/g'`
SQL_BUILD=[`pwd`]
AC_SUBST(SQL_BUILD)

SQL_SOURCE=[`(cd $srcdir && pwd)`]
AC_SUBST(SQL_SOURCE)

# if no --prefix option, we must set Qprefix to the default value
# the problem is that prefix is set very late in the process if it
# wasn't set by --prefix
if test "${prefix}x" = "NONEx"; then
	Qprefix="${ac_default_prefix}"
else
	Qprefix="${prefix}"
fi
Qprefix="`echo "$Qprefix" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qprefix)
# exec_prefix is created very late, so let make do the expansion
if test "${exec_prefix}x" = "NONEx"; then
	Qexec_prefix='${prefix}'
else
	Qexec_prefix="`echo "$exec_prefix" | sed 's/\\\\/\\\\\\\\/g'`"
fi
AC_SUBST(Qexec_prefix)


dnl Check for Monet
req_monetdb_ver='1.18.0'
#                ^^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AM_MONETDB_COMMON($req_monetdb_ver)
if test "x$have_monetdb" != xyes; then
	if test "x$MONETDBVERS" = "x"; then
		AC_MSG_ERROR([MonetDB was not found. MonetDB/SQL requires at least version $req_monetdb_ver of MonetDB.])
	else
		AC_MSG_ERROR([MonetDB/SQL requires at least version $req_monetdb_ver of MonetDB, but only version $MONETDBVERS was found.])
	fi
fi
req_clients_ver='1.19.0'
#                ^^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AM_MONETDB_CLIENTS($req_clients_ver)
AM_MONETDB_DEFAULTS()
AM_MONETDB_COMPILER()
AM_MONETDB_TOOLS()
AM_MONETDB_OPTIONS()
AM_MONETDB_LIBS()
AM_MONETDB_UTILS()
req_monetdb4_ver='4.19.0'
#                 ^^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AM_MONETDB4($req_monetdb4_ver)
req_monetdb5_ver='5.1.0'
#                 ^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AM_MONETDB5($req_monetdb5_ver)

if test "x$have_monetdb4" != xyes -a "x$have_monetdb5" != xyes; then
	if test "x$MONETDB4VERS" = "x" -a "x$MONETDB5VERS" = "x"; then
		AC_MSG_ERROR([Neither MonetDB4 nor MonetDB5 was not found. MonetDB/SQL requires at least version $req_monetdb4_ver of MonetDB4 or version $req_monetdb5_ver of MonetDB5.])
	else
		if test "x$MONETDB4VERS" = "x"; then
			MONETDB4VERS='none'
		fi
		if test "x$MONETDB5VERS" = "x"; then
			MONETDB5VERS='none'
		fi
		AC_MSG_ERROR([MonetDB/SQL requires at least version $req_monetdb4_ver of MonetDB4 (found $MONETDB4VERS) or version $req_monetdb5_ver of MonetDB5 (found $MONETDB5VERS).])
	fi
fi

dnl provide different versions of the paths derived above
if test "${prefix}x" = "NONEx"; then
	Xprefix="`$translatepath "$Qprefix"`"
	QXprefix="`echo "$Xprefix" | sed 's/\\\\/\\\\\\\\/g'`"
else
	Xprefix="`$translatepath "$prefix"`"
	QXprefix="`echo "$Xprefix" | sed 's/\\\\/\\\\\\\\/g'`"
fi
if test "${exec_prefix}x" = "NONEx"; then
	Xexec_prefix="`$translatepath "$Qexec_prefix"`"
	QXexec_prefix="`echo "$Xexec_prefix" | sed 's/\\\\/\\\\\\\\/g'`"
else
	Xexec_prefix="`$translatepath "$exec_prefix"`"
	QXexec_prefix="`echo "$Xexec_prefix" | sed 's/\\\\/\\\\\\\\/g'`"
fi
AC_SUBST(Xprefix)
AC_SUBST(QXprefix)
AC_DEFINE_UNQUOTED(SQL_PREFIX,"$QXprefix",[architecture-independent files])
AC_SUBST(Xexec_prefix)
AC_SUBST(QXexec_prefix)
AC_DEFINE_UNQUOTED(SQL_EXEC_PREFIX,"$QXexec_prefix",[architecture-dependent files])
QSQL_BUILD="$SQL_BUILD"
XSQL_BUILD="`$translatepath "$SQL_BUILD"`"
QXSQL_BUILD="`echo "$XSQL_BUILD" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(QSQL_BUILD)
AC_SUBST(XSQL_BUILD)
AC_SUBST(QXSQL_BUILD)
QSQL_SOURCE="$SQL_SOURCE"
XSQL_SOURCE="`$translatepath "$SQL_SOURCE"`"
QXSQL_SOURCE="`echo "$XSQL_SOURCE" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(QSQL_SOURCE)
AC_SUBST(XSQL_SOURCE)
AC_SUBST(QXSQL_SOURCE)
Qsrcdir="$srcdir"
Xsrcdir="`$translatepath "$srcdir"`"
QXsrcdir="`echo "$Xsrcdir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qsrcdir)
AC_SUBST(Xsrcdir)
AC_SUBST(QXsrcdir)
Qlocalstatedir="$localstatedir"
Xlocalstatedir="`$translatepath "$localstatedir"`"
QXlocalstatedir="`echo "$Xlocalstatedir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qlocalstatedir)
AC_SUBST(Xlocalstatedir)
AC_SUBST(QXlocalstatedir)
Qlibdir="$libdir"
Xlibdir="`$translatepath "$libdir"`"
QXlibdir="`echo "$Xlibdir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qlibdir)
AC_SUBST(Xlibdir)
AC_SUBST(QXlibdir)
Qsysconfdir="$sysconfdir"
Xsysconfdir="`$translatepath "$sysconfdir"`"
QXsysconfdir="`echo "$Xsysconfdir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qsysconfdir)
AC_SUBST(Xsysconfdir)
AC_SUBST(QXsysconfdir)
Qbindir="$bindir"
Xbindir="`$translatepath "$bindir"`"
QXbindir="`echo "$Xbindir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qbindir)
AC_SUBST(Xbindir)
AC_SUBST(QXbindir)
Qlibexecdir="$libexecdir"
Xlibexecdir="`$translatepath "$libexecdir"`"
QXlibexecdir="`echo "$Xlibexecdir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qlibexecdir)
AC_SUBST(Xlibexecdir)
AC_SUBST(QXlibexecdir)
Qdatarootdir="$datarootdir"
Xdatarootdir="`$translatepath "$datarootdir"`"
QXdatarootdir="`echo "$Xdatarootdir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qdatarootdir)
AC_SUBST(Xdatarootdir)
AC_SUBST(QXdatarootdir)
if test "${datadir}" = '${datarootdir}'; then
	datadir="${datarootdir}"
fi
Qdatadir="$datadir"
Xdatadir="`$translatepath "$datadir"`"
QXdatadir="`echo "$Xdatadir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qdatadir)
AC_SUBST(Xdatadir)
AC_SUBST(QXdatadir)
Qmandir="$mandir"
Xmandir="`$translatepath "$mandir"`"
QXmandir="`echo "$Xmandir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qmandir)
AC_SUBST(Xmandir)
AC_SUBST(QXmandir)
Qincludedir="$includedir"
Xincludedir="`$translatepath "$includedir"`"
QXincludedir="`echo "$Xincludedir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qincludedir)
AC_SUBST(Xincludedir)
AC_SUBST(QXincludedir)
Qinfodir="$infodir"
Xinfodir="`$translatepath "$infodir"`"
QXinfodir="`echo "$Xinfodir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qinfodir)
AC_SUBST(Xinfodir)
AC_SUBST(QXinfodir)

dnl AC_CHECK_HEADERS(limits.h malloc.h pwd.h)

dnl  stuff required for merovingian and monetdb
AC_CHECK_HEADERS(fcntl.h)
AC_DEFINE_UNQUOTED(MONETDB5_CONFFILE, "$MONETDB5_CONFFILE", [MonetDB5 config file location])
AC_DEFINE_UNQUOTED(MONETDB5_PREFIX, "$MONETDB5_PREFIX", [MonetDB5 configured prefix])

dnl  CFLAGS for our code are stricter than what autoconf can cope with.
CFLAGS="$CFLAGS \$(X_CFLAGS)"

case "$host_os" in
*mingw*)
AM_CONDITIONAL(NOT_WIN32, false)
AM_CONDITIONAL(NATIVE_WIN32, true)
;;
*)
AM_CONDITIONAL(NOT_WIN32, true)
AM_CONDITIONAL(NATIVE_WIN32, false)
;;
esac
