#                                               -*- Autoconf -*-
#                                               vim: ft=config :

# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2011 MonetDB B.V.
# All Rights Reserved.

dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.60)
AC_INIT([MonetDB SQL Server], [2.41.0], [info@monetdb.org], [MonetDB-SQL])
#                              ^^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AC_CONFIG_AUX_DIR(conf)
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
AH_BOTTOM([#include "stddef.h"])

dnl ----------------------
AM_INIT_AUTOMAKE([tar-ustar])
AC_CONFIG_SRCDIR([src/include/sql_catalog.h])
AM_CONFIG_HEADER(sql_config.h:conf/config.h.in)
CONFIG_H=sql_config.h
AC_SUBST(CONFIG_H)

# SQL_BUILD and SQL_SOURCE are *only* used for monetdb-sql-config and RunMserver
# SQL_SOURCE is the absolute path name of the source directory
# (srcdir can be relative)

# The Q versions of various variables are used in places where \'s
# need to be escapes with an extra \.  Configure does not support \'s
# in path names, so there is no need to do anything special here
# except set the variables.  The command to set them in case we do
# need to escape the \'s is Qvar=`echo "$var" | sed 's/\\\\/\\\\\\\\/g'`
SQL_BUILD=[`pwd`]
AC_SUBST(SQL_BUILD)

SQL_SOURCE=[`(cd $srcdir && pwd)`]
AC_SUBST(SQL_SOURCE)

AM_MONETDB_XQ_VARS_1()


dnl Check for Monet
req_monetdb_ver='1.40.0'
#                ^^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AM_MONETDB_COMMON($req_monetdb_ver)
if test "x$have_monetdb" != xyes; then
	if test "x$MONETDB_VERSION" = "x"; then
		AC_MSG_ERROR([MonetDB was not found. MonetDB/SQL requires at least version $req_monetdb_ver of MonetDB.])
	else
		AC_MSG_ERROR([MonetDB/SQL requires at least version $req_monetdb_ver of MonetDB, but only version $MONETDB_VERSION was found.])
	fi
fi
req_clients_ver='1.40.0'
#                ^^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AM_MONETDB_CLIENTS($req_clients_ver)
AM_MONETDB_DEFAULTS()
AM_MONETDB_COMPILER()
AM_MONETDB_TOOLS()
AM_MONETDB_OPTIONS()
AM_MONETDB_LIBS()
AM_MONETDB_UTILS()

req_monetdb5_ver='5.22.0'
#                 ^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AM_MONETDB5($req_monetdb5_ver)

if test "x$have_monetdb5" != xyes; then
	if test "x$MONETDB5_VERSION" = "x"; then
		MONETDB5_VERSION='none'
	fi
	AC_MSG_ERROR([MonetDB/SQL requires at least version $req_monetdb5_ver of MonetDB5 (found $MONETDB5_VERSION).])
fi

dnl src/backends/monet5/merovingian does UNIX domain socket ancillary
dnl data handling
AM_MONETDB_MSG_CONTROL()

dnl provide different versions of the paths derived above
AM_MONETDB_XQ_VARS_2()
AC_DEFINE_UNQUOTED(SQL_PREFIX,"$QXprefix",[architecture-independent files])
AC_DEFINE_UNQUOTED(SQL_EXEC_PREFIX,"$QXexec_prefix",[architecture-dependent files])
QSQL_BUILD="$SQL_BUILD"
XSQL_BUILD="`$translatepath "$SQL_BUILD"`"
QXSQL_BUILD="`echo "$XSQL_BUILD" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(QSQL_BUILD)
AC_SUBST(XSQL_BUILD)
AC_SUBST(QXSQL_BUILD)
QSQL_SOURCE="$SQL_SOURCE"
XSQL_SOURCE="`$translatepath "$SQL_SOURCE"`"
QXSQL_SOURCE="`echo "$XSQL_SOURCE" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(QSQL_SOURCE)
AC_SUBST(XSQL_SOURCE)
AC_SUBST(QXSQL_SOURCE)
AC_DEFINE_UNQUOTED(SQL_LOCALSTATEDIR,"$QXlocalstatedir",[modifiable single-machine data])
AC_DEFINE_UNQUOTED(SQL_LIBDIR,"$QXlibdir",[object code libraries])
AC_DEFINE_UNQUOTED(SQL_SYSCONFDIR,"$QXsysconfdir",[read-only single-machine data])


dnl AC_CHECK_HEADERS(limits.h malloc.h pwd.h)

have_mseed="auto"
AC_ARG_WITH(mseed,
    AS_HELP_STRING([--with-mseed=DIR],[mseed library is installed in DIR]),
    [have_mseed="$withval"], [have_mseed="auto"])
if test "x$have_mseed" != xno; then

	case "$have_mseed" in
	auto|yes)
	    ;;
	*)
	    MSEED_CFLAGS="-I$have_mseed/include"
	    MSEED_LIBS="-L$have_mseed/lib -lmseed"
	    ;;
	esac

	save_CPPFLAGS="$CPPFLAGS"
	save_LDFLAGS="$LDFLAGS"
	CPPFLAGS="$CPPFLAGS $MSEED_CFLAGS"
	LDFLAGS="$LDFLAGS $MSEED_LIBS"
	AC_CHECK_HEADER(libmseed.h,
		AC_CHECK_LIB(mseed, msr_init,
			AC_DEFINE(HAVE_MSEED, 1, [Define if you have the mseed library])
			have_mseed=yes,
			[ if test "x$have_mseed" != xauto; then AC_MSG_ERROR([-lmseed library not found]); fi; have_mseed=no ], "-lm"),
		[ if test "x$have_mseed" != xauto; then AC_MSG_ERROR([libmseed.h header not found]); fi; have_mseed=no ])
	LDFLAGS="$save_LDFLAGS"
	CPPFLAGS="$save_CPPFLAGS"
  if test "x$have_mseed" = "xyes"; then
	    MSEED_CFLAGS=
	    MSEED_LIBS="-lmseed"
  fi
fi
AC_SUBST(MSEED_CFLAGS, $MSEED_CFLAGS)
AC_SUBST(MSEED_LIBS, $MSEED_LIBS)
AM_CONDITIONAL(HAVE_MSEED, test x"$have_mseed" != xno)

have_cfitsio="auto"
AC_ARG_WITH(cfitsio,
    AS_HELP_STRING([--with-cfitsio=DIR],[cfitsio library is installed in DIR]),
    [have_cfitsio="$withval"], [have_cfitsio="auto"])
if test "x$have_cfitsio" != xno; then

    CFITSIO_CONFIG=""
    XPATH="$PATH"
    case "$have_cfitsio" in
    auto|yes)
	;;
    *)
	XPATH="$have_cfitsio/bin"
	;;
    esac

    AC_PATH_PROG(CFITSIO_CONFIG,pkg-config,,$XPATH)

    if test "x$CFITSIO_CONFIG" != x; then
		if `$CFITSIO_CONFIG --exists cfitsio` ; then
			CFITSIO_CFLAGS="`$CFITSIO_CONFIG cfitsio --cflags`"
			CFITSIO_LIBS="`$CFITSIO_CONFIG cfitsio --libs`"
		fi
    else
	case "$have_cfitsio" in
	auto|yes)
	    ;;
	*)
	    CFITSIO_CFLAGS="-I$have_cfitsio/include/cfitsio"
	    CFITSIO_LIBS="-L$have_cfitsio/lib -lcfitsio"
	    ;;
	esac
    fi

	save_CPPFLAGS="$CPPFLAGS"
	save_LDFLAGS="$LDFLAGS"
	CPPFLAGS="$CPPFLAGS $CFITSIO_CFLAGS"
	LDFLAGS="$LDFLAGS $CFITSIO_LIBS"
	AC_CHECK_HEADER(fitsio.h,
		AC_CHECK_LIB(cfitsio, ffopen,
			AC_DEFINE(HAVE_CFITSIO, 1, [Define if you have the cfitsio library])
			have_cfitsio=yes,
			[ if test "x$have_cfitsio" != xauto; then AC_MSG_ERROR([-lcfitsio library not found]); fi; have_cfitsio=no ], "-lm"),
		[ if test "x$have_cfitsio" != xauto; then AC_MSG_ERROR([fitsio.h header not found]); fi; have_cfitsio=no ])
	LDFLAGS="$save_LDFLAGS"
	CPPFLAGS="$save_CPPFLAGS"
fi
AC_SUBST(CFITSIO_CFLAGS, $CFITSIO_CFLAGS)
AC_SUBST(CFITSIO_LIBS, $CFITSIO_LIBS)
AM_CONDITIONAL(HAVE_CFITSIO, test x"$have_cfitsio" != xno)

dnl  stuff required for merovingian and monetdb
AC_CHECK_HEADERS([fcntl.h stropts.h sys/ioctl.h sys/un.h termios.h])
AC_CHECK_HEADERS([uuid/uuid.h],
				  AC_SEARCH_LIBS([uuid_generate], [uuid],
								 [AC_DEFINE([HAVE_UUID], 1, [Define when uuid_* is available and linkable on this system])]))
AC_SUBST([MONETDB5_CONFFILE])
AC_SUBST([MERO_LOG], [$MONETDB5_LOGDIR/merovingian.log])
AC_DEFINE_UNQUOTED([MERO_LOG], ["$MONETDB5_LOGDIR/merovingian.log"], [where Merovingian will store its logs by default])

dnl  CFLAGS for our code are stricter than what autoconf can cope with.
CFLAGS="$CFLAGS \$(X_CFLAGS)"
