@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@f sql_optimizer
@t SQL catalog management
@a N. Nes, M.L. Kersten
@+ SQL scenario
The SQL scenario implementation is a derivative of the MAL session scenario.

It is also the first version that uses state records attached to
the client record. They are initialized as part of the initialization 
phase of the scenario.

The SQL compiler uses only a small subset of the MAL language.
This involves ca 70 different operators, divided into the
catalog management (?) and query processing (?)
@{
[Make complete list of MAL instructions used in the compilation]
alarm.usec
algebra.count
algebra.join
algebra.kunique
algebra.likeselect
algebra.markT
algebra.outerjoin
algebra.semijoin
algebra.sintersect
algebra.slice
algebra.tunique
algebra.uselect
bat.append
batcalc.project
bat.insert
bat.mirror
bat.new
bat.replace
bat.reverse
bat.seqbase
bat.{setReadMode, setWriteMode}
bat.sort
bat.tsort
bbp.project
calc.{<,<=,=,!=,>,>=}
calc.{-.+.*,/,%}
calc.{oid,int,flt,dbl,str,chr,bit}
group.group 
group.refine
group.refine_reverse
io.printf
optimizer.multiplex
sql.assert
sql.bind
sql.bind_dbat
sql.bind_idxbat
sql_cache.???
sql.clear_table
sql.column
sql.columnBind
sql.eval
sql.output
sql.print
sql.setVariable
str.codeset
stream.close
stream.openRead
str.iconv
??.{sum,min,max,count}
@}
@h
#ifndef _SQL_OPTIMIZER_H_
#define _SQL_OPTIMIZER_H_
#include "sql.h"

/* #define _SQL_OPTIMIZER_DEBUG  */

sql_export void addQueryToCache(Client c);
sql_export str SQLoptimizer(Client c);
sql_export void SQLsetAccessMode(Client c);

#endif /* _SQL_OPTIMIZER_H_ */

@-
The queries are stored in a cache after they have been
type checked and optimized.
The Factory optimizer encapsulates the query with a re-entrance
structure. However, this structure is only effective if
quite some (expensive) instructions can be safed.
The current heuristic is geared at avoiding trivial
factory structures.
@c
#include "mal_builder.h"
#include "bat5.h"

#include "opt_prelude.h"
#include "opt_support.h"
#include "opt_aliases.h"
#include "opt_coercion.h"
#include "opt_commonTerms.h"
#include "opt_costModel.h"
#include "opt_deadcode.h"
#include "opt_emptySet.h"
#include "opt_crack.h"
#include "opt_garbageCollector.h"
#include "opt_macro.h"
#include "opt_modes.h"
#include "opt_multiplex.h"
#include "opt_peephole.h"
#include "opt_reduce.h"
#include "mal_debugger.h"
#include "mal_namespace.h"
#include "sql_mvc.h"
#include "sql_optimizer.h"
#include "sql_scenario.h"
#include "sql_gencode.h"
#include "optimizer.h"

#define TOSMALL 10

str 
FXoptimizer(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	InstrPtr *ns, p;
	int v;
	int i, k, newssize;
	lng clk = GDKusec();

#ifdef _SQL_OPTIMIZER_DEBUG
	stream_printf(GDKout, "First call to FXoptimizer\n");
	printFunction(GDKout, mb, LIST_MAL_ALL);
#endif
	(void)stk;
	if( mb->errors) {
		/* remove the FXoptimizer request */
		if (pci)
			removeInstruction(mb, pci);
		return MAL_SUCCEED;
	}
	if( !factoryHasFreeSpace())
		return MAL_SUCCEED;

@-
The factory code is also used for small blocks when there
is a bind operation.
@c
	if (mb->stop <= TOSMALL){
		for(i=0; i< mb->stop; i++){
			p= getInstrPtr(mb,0);
			if (getFunctionId(p)== bindRef && 
				getModuleId(p)== sqlRef)  break;
		}
		if(i == mb->stop)
			return MAL_SUCCEED;
	}
@-
The first step is to collect all the sql bind operations and
to extract some compiler relevant properties from the catalogue.
Double bind operations should also be eliminated.
@c
	newssize = mb->ssize * 2;
	ns = (InstrPtr *) GDKmalloc(sizeof(InstrPtr) * newssize);
	k = 1;
	ns[0] = getInstrPtr(mb, 0);	/* its signature */
	ns[0]->token = FACTORYsymbol;
 	setVarType(mb, getArg(ns[0],0), TYPE_bit);
	for (i = 0; i < mb->stop; i++) {
		p = getInstrPtr(mb, i);
		if ( (getFunctionId(p) == bindRef || 
			getFunctionId(p) == bindidxRef) && 
			getModuleId(p) == sqlRef) {
			ns[k++] = p;
		}
		if ( getFunctionId(p) == binddbatRef && 
		     getModuleId(p) == sqlRef) {
			ns[k++] = p;
		}
	}
@-
The prelude code has been generated, now we can inject the remaining
instructions, producing a syntactic correct MAL program again.
@c
	p = newInstruction(mb, ASSIGNsymbol);
	v = newTmpVariable(mb, TYPE_bit);
	p->barrier = BARRIERsymbol;
	p->argv[0] = v;
	pushBit(mb,p,TRUE);
	ns[k++] = p;

	for (i = 1; i < mb->stop - 1; i++) {
		int doit = 1;

		p = getInstrPtr(mb, i);
		if ( getModuleId(p) == sqlRef &&
		     (getFunctionId(p) == bindRef || 
		      getFunctionId(p) == bindidxRef)) {
			doit = 0;
		}
		if ( getModuleId(p) == sqlRef &&
		     getFunctionId(p) == binddbatRef ) {
			doit = 0;
		}
		if (doit)
			ns[k++] = p;
	}
@-
Finalize the factory loop
@c
	p = newInstruction(mb,ASSIGNsymbol);
	p->barrier = YIELDsymbol;
	p->argv[0] = v;
	ns[k++] = p;
	p = newInstruction(mb,ASSIGNsymbol);
	p->barrier = REDOsymbol;
	p->argv[0] = v;
	ns[k++] = p;
	p = newInstruction(mb,ASSIGNsymbol);
	p->barrier = EXITsymbol;
	p->argv[0] = v;
	ns[k++] = p;
	ns[k++] = getInstrPtr(mb, i);

	mb->stop = k;
	mb->ssize = newssize;
	GDKfree(mb->stmt);
	mb->stmt = ns;

	optimizerCheck(mb,"sql.factorize",1,GDKusec()-clk, OPT_CHECK_ALL);
@-
At this stage we can once call upon the optimizers to do their work.
Static known information is known and stored in constant variables,
which can be used by the rewrite rules.
This all works under the assumption that the SQL layer properly invalidates
the cache when the underlying table is changed.
@c
#ifdef _SQL_OPTIMIZER_DEBUG
	printFunction(GDKout, mb, LIST_MAL_INSTR);
#endif
	return MAL_SUCCEED;
}
@-
Cost-based optimization and semantic evaluations require statistics to work with.
They should come from the SQL catalog or the BATs themselves.
The properties passed at this point are the number of rows. 
A better way is to mark all BATs used as a constant, because that permits
access to all properties. However, this creates unnecessary locking during stack
initialization. Therfore, we store the BAT id as a property for the optimizer
to work with. It can pick up the BAT if needed.

Care should be taken in marking the delta bats as empty, because their
purpose is to fill them during the query. Therefore, we keep track
of all bound tables and mark them not-empty when a direct update
takes place using append().

The bind operations are also moved into the front to ensure
binding errors and assertions to be tested quickly.
@c
int
SQLgetStatistics(mvc *m,MalBlkPtr mb)
{
	int res = 0;
	int i,j,k, actions=0;
	BAT *b;
	lng clk = GDKusec();
	lng *count = (lng*) alloca(sizeof(lng)* mb->vtop);
	InstrPtr *rest= (InstrPtr*) alloca(sizeof(InstrPtr)*mb->stop);
	int n=1,rtop=0;

	for(i=1; i<mb->stop; i++){
		InstrPtr p = getInstrPtr(mb,i);
		char *f = getFunctionId(p);

		/* default counts */
		for (j = 0; j<p->retc; j++)
			count[getArg(p,j)] = -1;

		if( getModuleId(p)== sqlRef && 
		    (f == bindRef || f == bindidxRef || f == binddbatRef ) ){

			mb->stmt[n++]=p;
			if( f == binddbatRef)
				b= mvc_bind_dbat(m, 
				getVarConstant(mb, getArg(p,1)).val.sval,
				getVarConstant(mb, getArg(p,2)).val.sval,
				getVarConstant(mb, getArg(p,3)).val.ival);
			else if( f == bindidxRef)
				b= mvc_bind_idxbat(m, 
				getVarConstant(mb, getArg(p,1)).val.sval,
				getVarConstant(mb, getArg(p,2)).val.sval,
				getVarConstant(mb, getArg(p,3)).val.sval,
				getVarConstant(mb, getArg(p,4)).val.ival);
			else
				b= mvc_bind(m, 
				getVarConstant(mb, getArg(p,1)).val.sval,
				getVarConstant(mb, getArg(p,2)).val.sval,
				getVarConstant(mb, getArg(p,3)).val.sval,
				getVarConstant(mb, getArg(p,4)).val.ival);
			if( b ) {
				lng rows = BATcount(b);

				k = getArg(p,0);
				count[k] = rows; 
				getVarConstant(mb, k).val.bval = b->batCacheid;
				if (mb->var[k]->props == 0)
					mb->var[k]->props = newPropertySet();
				setProperty(getProps(k),"bid", "=", TYPE_int, &b->batCacheid);

				BBPunfix(b->batCacheid);

				setProperty(getProps(k),"rows", "=", TYPE_lng, &rows);
				actions++;
			}
		} else if( getModuleId(p) == sqlRef && 
		    (f == appendRef || f == appendidxRef) ){
			res = 1;
			rest[rtop++]= p;
		} else if (getModuleId(p) == batRef &&
		    (f == appendRef || f == insertRef || deleteRef) ){
			res = 1;
			rest[rtop++]= p;
		} else
			rest[rtop++]= p;
	}
	/* move remainder again into place */
	memcpy((char*)(mb->stmt+n),(char*)rest, sizeof(InstrPtr)*rtop);
	optimizerCheck(mb,"optimizer.SQLgetstatistics",actions,GDKusec()-clk,0);
	return res;
}


void
addQueryToCache(Client c)
{
	Module cache;
	backend *be = ((backend *) c->state[PARSER]);
	str optimizer;
	MalBlkPtr mb;

	cache = findModule(c->nspace, putName("sql_cache",9));
	if (cache == 0) 
		return;
	
	insertSymbol(cache, c->curprg);
	trimMalBlk(c->curprg->def);
	c->blkmode = 0;
	mb= c->curprg->def;
	chkProgram(c->nspace, mb);
#ifdef _SQL_OPTIMIZER_DEBUG
	printf("ADD QUERY TO CACHE\n");
	printFunction(GDKout,mb,LIST_MAL_ALL);
#endif
@-
An error in the compilation should be reported to the user.
And if the debugging option is set, the debugger is called
to allow inspection.
@c
	if (mb->errors) {
		mvc *m;
		m = ((mvc *) c->state[OPTIMIZE]);
		showErrors();

		if (c->listing)
			printFunction(c->fdout, mb, c->listing);
		if ( m->debug )
			runMALDebugger(c->curprg);
		return;
	}
	optimizer = backend_get_string(be->mvc, "optimizer");
#ifdef _SQL_OPTIMIZER_DEBUG
	if( optimizer)
		stream_printf(c->fdout,"optimizer=%s\n",optimizer);
#endif
@-
A few optimizations are always needed. First, the multiplex
code should be turned into a proper MAL blocks before
other optimizations take place.
And before we actually execute the program, we should
expand the macros (unless this has already been taken
care of.
@c
	if( optimizer == 0 || strcmp(optimizer,"on")==0){
		if (c->debug)
			optimizerCheck(mb,"sql.baseline",-1,0, OPT_CHECK_ALL);
		/* if there are no updates, do the emptySet optimizer */
		if (!SQLgetStatistics(((mvc *) c->state[OPTIMIZE]),mb)) {
			OPTcostModel(mb,0,0); /* propagate costs */
			OPTemptySet(mb,0,0);  /* remove empty results */
		}
		OPTmodes(mb,0,0);	/* reduce number of BAT copies */

		OPTcoercion(mb,0,0);	/* coercions */
		OPTaliases(mb, 0, 0);	/* alias removal */
		OPTcommonTerms(mb,0,0);	/* common terms */
		OPTdeadcode(mb, 0, 0);	/* dead code removal */
		OPTreduce(mb,0,0);	/* reduce stack space */
		OPTgarbageCollector(mb,0,0);	/* free BAT space quickly */

		/* FXoptimizer(mb, 0, 0);	 factory code */
		/* OPTcrack(mb,0,0); too early !!*/
	} else if( optimizer && strcmp(optimizer,"off")==0 ){
		/* no optimization needed */
	} else if( optimizer ){
		/* the optimizer control is a comma separated list of names */
		char *nxt, *nme;
		while(optimizer && *optimizer )
		{
			nxt= strchr(optimizer,',');
			if( nxt){
				*nxt= 0;
				nxt++;
			}
			if( (nme = getName(optimizer,strlen(optimizer))) == 0) {
				GDKerror("optimizer '%s' does not exist\n",optimizer);
				mb->errors++;
			} else{
				InstrPtr call;
				call=  newFcnCall(mb,getName("optimizer",9),nme);
				typeChecker(c->nspace, mb,call,TRUE);
			}
			optimizer =nxt;
		} 
		if( c->debug)
			optimizerCheck(mb,"sql.baseline",-1,0, OPT_CHECK_ALL);
		optimizeMALBlock(mb);
	}
	OPTmultiplex(mb,0,0);	/* multiplex expansions */
}

@-
The default SQL optimizer performs a limited set of operations
that are known to be (reasonably) stable and effective.
Finegrained control over the optimizer steps is available thru
setting the corresponding SQL variable.

This version simply runs through the MAL script and re-orders the instructions
into catalog operations, query graph, and result preparation.
This distinction is used to turn the function into a factory, which would
enable re-entry when used as a cache-optimized query.
The second optimization is move access mode changes on the base tables
to the front of the plan.


@c
str
SQLoptimizer(Client c)
{
	(void) c;
#ifdef _SQL_OPTIMIZER_DEBUG
	stream_printf(GDKout, "SQLoptimizer\n");
	printFunction(c->fdout, c->curprg->def, LIST_MAL_INSTR);
	stream_printf(GDKout, "done\n");
#endif
	return MAL_SUCCEED;
}
@}
