@/
The contents of this file are subject to the MonetDB Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
 
Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.
 
The Original Code is the MonetDB Database System.

The Initial Developer of the Original Code is CWI.
Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
Copyright August 2008-2010 MonetDB B.V.
All Rights Reserved.
@

@f mseed
@a Martin Kersten
@v 0.1
@+ Mseed
These routines are meant to interpret mseed files.
It is derived from the mseed library example.
The code base assumes that libmseed has been installed on your system.
@mal
module mseed;
pattern import(vid:int, fnme:str):str
address MSEmseedImport
comment "Dump the record content of an mseed file from the vault";
@h
#ifndef _MSEED_H
#define _MSEED_H

#include "sql_config.h"
#include "clients.h"
#include "mal.h" 
#include "mal_client.h"
#include "mal_interpreter.h"
#include "mal_function.h"
#ifdef HAVE_MSEED
#include "libmseed.h"
#endif

#ifdef WIN32
#ifndef LIBMSEED
#define vault_export extern __declspec(dllimport)
#else
#define vault_export extern __declspec(dllexport)
#endif
#else
#define vault_export extern
#endif

vault_export str MSEmseedImport(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);

#define _MSEED_DEBUG_

#endif /* _MSEED_H */
@c
#include "mseed.h"
#include "vault.h"
str SQLstatementIntern(Client c, str *expr, str nme, int execute, bit output);

#define QRYinsert "INSERT INTO mseedCatalog(mseed, seqno, dataquality, network, \
	 station, location, channel, starttime , samplerate, samplecnt, sampletype) \
	 VALUES(%d, %d,'%c','%s', '%s','%s','%s','%s',%f,%d,%s);"

str
MSEmseedImport(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	str *ret = (str*) getArgReference(stk,pci,0); 
	str msg = MAL_SUCCEED;
#ifdef HAVE_MSEED
	int *vid = (int*) getArgReference(stk,pci,1); 
	str *sourcefile = (str*) getArgReference(stk,pci,2); 
	MSRecord *msr = 0;

	int verbose   = 1;
	//int ppackets  = 2;
	int reclen    = -1;
	int dataflag  = 1;
	int totalrecs = 0;
	int totalsamps = 0;
	int retcode;
	int j;
	time_t t;
	struct tm *tm;
	char *s,*kind;
	char file[BUFSIZ];
	char buf[BUFSIZ];
	char starttime[BUFSIZ];
	char stoptime[BUFSIZ];
	int stepsize;

	if ( vaultpath[0] == 0){
		msg= createException(MAL,"mseed.dump","Vault not initialized");
		*ret = GDKstrdup(msg);
		return msg;
	}
	snprintf(file,BUFSIZ,"%s%c%s",vaultpath, DIR_SEP,*sourcefile);
	s= buf;

	printf("FTP Processing %s -> %s\n",*sourcefile,file);

	/* Loop over the input file */
	while ( (retcode = ms_readmsr (&msr, file, reclen, NULL, NULL, 1, dataflag, verbose)) == MS_NOERROR )
	{
		totalrecs++;
		totalsamps += msr->samplecnt;
		//msr_print(msr, ppackets);

		t= MS_HPTIME2EPOCH(msr->starttime);
		tm = gmtime(&t);
		snprintf(starttime,BUFSIZ,"%d-%02d-%02d %02d:%02d:%02d.%06ld", tm->tm_year +(tm->tm_year > 80?1900:2000), tm->tm_mon+1,tm->tm_mday, tm->tm_hour, tm->tm_min,tm->tm_sec, msr->starttime % HPTMODULUS);

		switch(msr->sampletype){
			case 'a': kind="'string'"; break;
			case 'i': kind="'int'"; break;
			case 'f': kind="'flt'"; break;
			case 'd': kind="'dbl'"; break;
			default : kind="null";
		}
		snprintf(buf,BUFSIZ,QRYinsert, *vid, msr->sequence_number,msr->dataquality,msr->network, msr->station, msr->location, msr->channel,
		starttime,msr->samprate, msr->samplecnt,kind);
		printf("%s\n",buf);
		msg =SQLstatementIntern(cntxt,&s,"mseed.import",TRUE,FALSE);
		if ( msg != MAL_SUCCEED){
			break;
		}

		stepsize = 1000000/ msr->samprate;
		if (msr->samplecnt) {
			/* calculate end of series */
			msr->starttime += msr->samplecnt * stepsize;
			t= MS_HPTIME2EPOCH(msr->starttime);
			tm = gmtime(&t);
			snprintf(stoptime,BUFSIZ,"%d-%02d-%02d %02d:%02d:%02d.%06ld", tm->tm_year +(tm->tm_year > 80?1900:2000), tm->tm_mon+1,tm->tm_mday, tm->tm_hour, tm->tm_min,tm->tm_sec, msr->starttime % HPTMODULUS);
			printf("%s\n",stoptime);
		}
		if (msr->datasamples)
		for ( j=0;j< msr->samplecnt; j++){
			t= MS_HPTIME2EPOCH(msr->starttime);
			tm = gmtime(&t);
			snprintf(stoptime,BUFSIZ,"%d-%02d-%02d %02d:%02d:%02d.%06ld", tm->tm_year +(tm->tm_year > 80?1900:2000), tm->tm_mon+1,tm->tm_mday, tm->tm_hour, tm->tm_min,tm->tm_sec, msr->starttime % HPTMODULUS);
			msr->starttime += stepsize;
			switch(msr->sampletype){
			case 'a':
				snprintf(buf,BUFSIZ, "INSERT INTO mseedVolumn(time,adata) VALUES (%s, %d,%s);", stoptime, *vid, ((char**) msr->datasamples)[j]);
				break;
			case 'i':
				snprintf(buf,BUFSIZ, "INSERT INTO mseedVolumn(time,idata) VALUES (%s, %d,%d);", stoptime, *vid, ((int*) msr->datasamples)[j]);
				break;
			case 'f':
				snprintf(buf,BUFSIZ, "INSERT INTO mseedVolumn(time,fdata) VALUES (%s, %d,%f);", stoptime, *vid, ((flt*) msr->datasamples)[j]);
				break;
			case 'd':
				snprintf(buf,BUFSIZ, "INSERT INTO mseedVolumn(time,ddata) VALUES (%s, %d,%f);", stoptime, *vid, ((dbl*) msr->datasamples)[j]);
				break;
			default:
				snprintf(buf,BUFSIZ,"undef %d",msr->encoding);
			}
			printf("%s\n",buf);
		}
	}

	if ( msg== MAL_SUCCEED && retcode != MS_ENDOFFILE )
		msg = createException(MAL, "mseed.dump", "Cannot read %s: %s\n", file, ms_errorstr(retcode));

	/* Make sure everything is cleaned up */
	ms_readmsr (&msr, NULL, 0, NULL, NULL, 0, 0, 0);
#else
	(void) cntxt;
	throw(MAL,"mseed.dump","libmseed not available");
#endif
	(void) mb;
	if (msg )
		*ret= GDKstrdup(msg);
	else *ret= 0;
	return msg;
}  
