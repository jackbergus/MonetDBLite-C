@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
@' Copyright August 2008-2009 MonetDB B.V.
@' All Rights Reserved.

@f merovingian
@a Fabian Groffen
@v 1.0
@* The MonetDB keeper
The role of the Merovingian within the MonetDB suite is to act as a
smart proxy, with capabilities to start Mservers when necessary.

Since some people appear to have troubles pronouncing or remembering its
name, one can also refer to the Merovingian, as Mero, Merov or Nebula.
While the latter one has nothing to do with the former, it is provided
as convenience for those who keep on having technical problems with
pronouncing the former.  In any case, people having difficulties here
should watch the Matrix once more.

Most of the Merovingian's decisions are based on information provided by
Sabaoth.  Sabaoth is a file-system based administration shared between
all Mservers in the same farm on a local machine.  It keeps track of how
Mservers can be reached, with which scenarios, and what the crashcounter
of each server is.

The Merovingian will fork off an Mserver whenever a client requests a
database which is not running yet.  The forked Mserver is detached from
the Merovingian, such that the Mserver can live on, even if the
Merovingian is restarted (or dies).  Sabaoth will deal with the
Merovingian finding the Mservers already running, or forked.

Forking off an Mserver isn't done unconditionally.  The crashlog
information maintained by Sabaoth for a given database is consulted
before each fork.  While Sabaoth itself will make sure that the Mserver
logs a warning upon restart after a crash, Merovingian will refuse to
start an Mserver if it has crashed a number of times during a recent
period.  The Merovingian will log such refusals as well as return this
as error to the connecting client.
FIXME: actually implement that

@h
#define MEROV_VERSION   "0.9"
#define MEROV_PORT      50000

@c
#include "sql_config.h"
#include "merovingian.h"
#include "mal_sabaoth.h"
#include <stdlib.h> /* exit, getenv, rand, srand */
#include <stdarg.h>	/* variadic stuff */
#include <stdio.h> /* fprintf */
#include <sys/types.h>
#include <sys/stat.h> /* stat */
#include <sys/wait.h> /* wait */
#include <sys/socket.h>
#include <sys/un.h>
#include <netdb.h>
#include <netinet/in.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h> /* strerror */
#ifdef HAVE_ALLOCA_H
#include <alloca.h>
#endif
#include <errno.h>
#include <signal.h> /* handle Ctrl-C, etc. */
#include <pthread.h>
#include <time.h>
#include <stream.h>
#include <stream_socket.h>

#define SOCKPTR struct sockaddr *
#ifdef HAVE_SOCKLEN_T
#define SOCKLEN socklen_t
#else
#define SOCKLEN int
#endif

typedef char* err;

#define freeErr(X) GDKfree(X)
#define getErrMsg(X) X
#define NO_ERR (err)0

static str _merovingian_mserver = NULL;
static str _merovingian_conffile = NULL;

typedef struct _dpair {
	int out;          /* where to read stdout messages from */
	int err;          /* where to read stderr messages from */
	pid_t pid;        /* this process' id */
	char* dbname;     /* the database that this server serves */
	pthread_t tid;    /* thread id used when terminating this server */
	char started;     /* is it started? (and can be terminated) */
	struct _dpair* next;
}* dpair;
static dpair topdp = NULL;
static pthread_mutex_t topdplock = PTHREAD_MUTEX_INITIALIZER;

typedef struct _remotedb {
	char* dbname;
	char* conn;
	int ttl;
	struct _remotedb* next;
}* remotedb;
static remotedb _merovingian_remotedbs = NULL;
static pthread_mutex_t remotedblock = PTHREAD_MUTEX_INITIALIZER;

static int _keepLogging = 1;
static int _timeInterval = 0;
static void
logListener(void *x)
{
	dpair d = topdp;
	dpair w;
	FILE *fout, *ferr;
	char buf[8096];
	char *p, *q;
	char mytime[20];
	time_t now, lastout, lasterr;
	struct tm *tmp;
	char equalouterr;
	struct timeval tv;
	fd_set readfds;
	int nfds;
	size_t len;
	char writeident;

	(void)x;

	/* the first entry in the list of d is where our output should go to */
	fout = fdopen(d->out, "a");
	if (d->out == d->err) {
		ferr = fout;
		equalouterr = 1;
	} else {
		ferr = fdopen(d->err, "a");
		equalouterr = 0;
	}

	/* if we print to the console, avoid double TME messages */
	if (d->dbname == NULL) {
		equalouterr = 1;
	} else {
		equalouterr = 0;
	}


	/* skip the first entry, we don't care about it in the normal loop */
	d = d->next;

#define PRINT_TIME(STREAM, CHAN) \
	now = time(NULL); \
	if (now - CHAN >= _timeInterval) { \
		tmp = localtime(&now); \
		strftime(mytime, sizeof(mytime), "%Y-%m-%d %H:%M:%S", tmp); \
		fprintf(STREAM, "TME %s\n", mytime); \
		CHAN = now; \
	}

	lastout = 0;
	lasterr = 0;
	do {
		/* wait max 1 second, tradeoff between performance and being
		 * able to catch up new logger streams */
		tv.tv_sec = 1;
		tv.tv_usec = 0;
		FD_ZERO(&readfds);
		nfds = 0;

		/* make sure noone is killing or adding entries here */
		pthread_mutex_lock(&topdplock);

		w = d;
		while (w != NULL) {
			FD_SET(w->out, &readfds);
			if (nfds < w->out)
				nfds = w->out;
			FD_SET(w->err, &readfds);
			if (nfds < w->err)
				nfds = w->err;
			w = w->next;
		}

		pthread_mutex_unlock(&topdplock);
		
		if (select(nfds + 1, &readfds, NULL, NULL, &tv) <= 0)
			continue;

		pthread_mutex_lock(&topdplock);

		w = d;
		while (w != NULL) {
			if (FD_ISSET(w->out, &readfds) != 0) {
				PRINT_TIME(fout, lastout);
				writeident = 1;
				do {
					if ((len = read(w->out, buf, 8095)) <= 0)
						break;
					buf[len] = '\0';
					q = buf;
					while ((p = strchr(q, '\n')) != NULL) {
						if (writeident == 1)
							fprintf(fout, "MSG %s[" LLFMT "]: ",
									w->dbname, (long long int)w->pid);
						*p = '\0';
						fprintf(fout, "%s\n", q);
						q = p + 1;
						writeident = 1;
					}
					if ((size_t)(q - buf) < len) {
						if (writeident == 1)
							fprintf(fout, "MSG %s[" LLFMT "]: ",
									w->dbname, (long long int)w->pid);
						writeident = 0;
						fprintf(fout, "%s", q);
					}
				} while (len == 8095);
			}
			if (w->err != w->out && FD_ISSET(w->err, &readfds) != 0) {
				if (equalouterr == 1) {
					PRINT_TIME(ferr, lastout);
				} else {
					PRINT_TIME(ferr, lasterr);
				}
				writeident = 1;
				do {
					if ((len = read(w->err, buf, 8095)) <= 0)
						break;
					buf[len] = '\0';
					q = buf;
					while ((p = strchr(q, '\n')) != NULL) {
						if (writeident == 1)
							fprintf(ferr, "ERR %s[" LLFMT "]: ",
									w->dbname, (long long int)w->pid);
						*p = '\0';
						fprintf(ferr, "%s\n", q);
						q = p + 1;
						writeident = 1;
					}
					if ((size_t)(q - buf) < len) {
						if (writeident == 1)
							fprintf(ferr, "ERR %s[" LLFMT "]: ",
									w->dbname, (long long int)w->pid);
						writeident = 0;
						fprintf(ferr, "%s", q);
					}
				} while (len == 8095);
			}
			w = w->next;
		}

		pthread_mutex_unlock(&topdplock);

		fflush(fout);
		if (equalouterr == 0)
			fflush(ferr);
	} while (_keepLogging != 0);
	/* make sure we emit the current timestamp before we quit */
	lastout = 0;
	PRINT_TIME(fout, lastout);
	fflush(fout);
	if (equalouterr == 0) {
		lasterr = 0;
		PRINT_TIME(ferr, lasterr);
		fflush(ferr);
	}
}

int timeout = 0;
/**
 * The terminateProcess function tries to let the given mserver process
 * shut down gracefully within a given time-out.  If that fails, it
 * sends the deadly SIGKILL signal to the mserver process and returns.
 */
static void
terminateProcess(void *p)
{
	dpair d = (dpair)p;
	sabdb *stats;
	str er;
	int i;

	er = SABAOTHgetStatus(&stats, d->dbname);
	if (er != MAL_SUCCEED) {
		fprintf(stderr, "cannot terminate process " LLFMT ": %s\n",
				(long long int)d->pid, er);
		GDKfree(er);
		return;
	}

	if (stats == NULL) {
		fprintf(stderr, "strange, process " LLFMT " serves database '%s' "
				"which does not exist\n", (long long int)d->pid, d->dbname);
		return;
	}

	switch (stats->state) {
		case SABdbRunning:
			/* ok, what we expect */
		break;
		case SABdbCrashed:
			fprintf(stderr, "cannot shut down database '%s', mserver "
					"(pid " LLFMT ") has crashed\n",
					d->dbname, (long long int)d->pid);
			SABAOTHfreeStatus(&stats);
			return;
		case SABdbInactive:
			fprintf(stdout, "database '%s' appears to have shut down already\n",
					d->dbname);
			fflush(stdout);
			SABAOTHfreeStatus(&stats);
			return;
		default:
			fprintf(stderr, "unknown state: %d", (int)stats->state);
			SABAOTHfreeStatus(&stats);
			return;
	}

	/* ok, once we get here, we'll be shutting down the server */
	fprintf(stdout, "sending process " LLFMT " (database '%s') the "
			"TERM signal\n", (long long int)d->pid, d->dbname);
	fflush(stdout);
	kill(d->pid, SIGTERM);
	for (i = 0; i < timeout * 2; i++) {
		if (stats != NULL)
			SABAOTHfreeStatus(&stats);
		MT_sleep_ms(500);
		er = SABAOTHgetStatus(&stats, d->dbname);
		if (er != MAL_SUCCEED) {
			fprintf(stderr, "unexpected problem: %s\n", er);
			GDKfree(er);
			/* don't die, just continue, so we KILL in the end */
		} else if (stats == NULL) {
			fprintf(stderr, "hmmmm, database '%s' suddenly doesn't exist "
					"any more\n", d->dbname);
		} else {
			switch (stats->state) {
				case SABdbRunning:
					/* ok, try again */
				break;
				case SABdbCrashed:
					fprintf (stderr, "database '%s' crashed after SIGTERM\n",
							d->dbname);
					SABAOTHfreeStatus(&stats);
					return;
				case SABdbInactive:
					fprintf(stdout, "database '%s' has shut down\n", d->dbname);
					fflush(stdout);
					SABAOTHfreeStatus(&stats);
					return;
				default:
					fprintf(stderr, "unknown state: %d", (int)stats->state);
				break;
			}
		}
	}
	fprintf(stderr, "timeout of %d seconds expired, sending process " LLFMT
			" (database '%s') the KILL signal\n",
			timeout, (long long int)d->pid, d->dbname);
	kill(d->pid, SIGKILL);
	return;
}

/**
 * Logs the given string and formatting parameter stuff by writing it to
 * stdout.
 */
static void
merlog(str fmt, ...)
{
	va_list ap;
	char message[4096];
	int len;

	va_start(ap, fmt);

	len = vsnprintf(message, 4095, fmt, ap);
	message[len] = '\0';

	/* trim trailing newlines */
	while (len > 0 && message[--len] == '\n')
		message[len] = '\0';

	fprintf(stdout, "%s\n", message);
	/* flush the stream, it seems that for some reason this is necessary */
	fflush(stdout);

	va_end(ap);
}

/**
 * Creates a new error, allocated with malloc.  The error should be
 * freed using freeErr().
 */
static str
newErr(str fmt, ...)
{
	va_list ap;
	char message[4096];
	str ret;
	int len;

	va_start(ap, fmt);

	len = vsnprintf(message, 4095, fmt, ap);
	message[len] = '\0';

	va_end(ap);

	ret = GDKstrdup(message);
	return(ret);
}

static int doproxy;
/**
 * Fork an Mserver and detach.  Before forking off, Sabaoth is consulted
 * to see if forking makes sense, or whether it is necessary at all, or
 * forbidden by restart policy, e.g. when in maintenance.
 */
static err
forkMserver(str database, sabdb** stats, int force)
{
	pid_t pid;
	str er;
	sabuplog info;
	struct tm *t;
	char tstr[20];
	int pfdo[2];
	int pfde[2];
	dpair dp;
	str vaultkey = NULL;
	struct stat statbuf;

	er = SABAOTHgetStatus(stats, database);
	if (er != MAL_SUCCEED) {
		err e = newErr("%s", er);
		GDKfree(er);
		return(e);
	}

	if (*stats == NULL) {
		remotedb rdb;

		/* check the remote databases */
		pthread_mutex_lock(&remotedblock);

		rdb = _merovingian_remotedbs;
		while (rdb != NULL) {
			if (strcmp(rdb->dbname, database) == 0) {
				/* take first match, create a fake sabdb struct */
				*stats = GDKmalloc(sizeof(sabdb));
				(*stats)->dbname = GDKstrdup(rdb->dbname);
				(*stats)->path = (*stats)->dbname; /* only freed by sabaoth */
				(*stats)->locked = 0;
				(*stats)->state = SABdbRunning;
				(*stats)->scens = GDKmalloc(sizeof(sablist));
				(*stats)->scens->val = GDKstrdup("sql");
				(*stats)->scens->next = NULL;
				(*stats)->conns = GDKmalloc(sizeof(sablist));
				(*stats)->conns->val = GDKstrdup(rdb->conn);
				(*stats)->conns->next = NULL;
				(*stats)->next = NULL;
				pthread_mutex_unlock(&remotedblock);
				return(NO_ERR);
			}
			rdb = rdb->next;
		}

		pthread_mutex_unlock(&remotedblock);

		return(newErr("no such database: %s", database));
	}

	/* Since we ask for a specific database, it should be either there
	 * or not there.  Since we checked the latter case above, it should
	 * just be there, and be the right one.  There also shouldn't be
	 * more than one entries in the list, so we assume we have the right
	 * one here. */

	/* retrieve uplog information to print a short conclusion */
	er = SABAOTHgetUplogInfo(&info, *stats);
	if (er != MAL_SUCCEED) {
		err e = newErr("could not retrieve uplog information: %s", er);
		GDKfree(er);
		SABAOTHfreeStatus(stats);
		return(e);
	}

	if ((*stats)->locked == 1) {
		merlog("database '%s' is under maintenance", database);
		if (force == 0)
			return(NO_ERR);
	}

	switch ((*stats)->state) {
		case SABdbRunning:
			t = localtime(&info.laststart);
			strftime(tstr, sizeof(tstr), "%Y-%m-%d %H:%M:%S", t);
			merlog("database '%s' already running since %s, "
					"up min/avg/max: " LLFMT "/" LLFMT "/" LLFMT ", "
					"crash average: %d.00 %.2f %.2f (%d-%d=%d)",
					database, tstr,
					(lng)info.minuptime, (lng)info.avguptime, (lng)info.maxuptime,
					info.crashavg1, info.crashavg10, info.crashavg30,
					info.startcntr, info.stopcntr, info.crashcntr);
			return(NO_ERR);
		break;
		case SABdbCrashed:
			t = localtime(&info.lastcrash);
			strftime(tstr, sizeof(tstr), "%Y-%m-%d %H:%M:%S", t);
			merlog("database '%s' has crashed after start on %s, "
					"attempting restart, "
					"up min/avg/max: " LLFMT "/" LLFMT "/" LLFMT ", "
					"crash average: %d.00 %.2f %.2f (%d-%d=%d)",
					database, tstr,
					(lng)info.minuptime, (lng)info.avguptime, (lng)info.maxuptime,
					info.crashavg1, info.crashavg10, info.crashavg30,
					info.startcntr, info.stopcntr, info.crashcntr);
		break;
		case SABdbInactive:
			merlog("starting database '%s', "
					"up min/avg/max: " LLFMT "/" LLFMT "/" LLFMT ", "
					"crash average: %d.00 %.2f %.2f (%d-%d=%d)",
					database,
					(lng)info.minuptime, (lng)info.avguptime, (lng)info.maxuptime,
					info.crashavg1, info.crashavg10, info.crashavg30,
					info.startcntr, info.stopcntr, info.crashcntr);
		break;
		default:
			SABAOTHfreeStatus(stats);
			return(newErr("unknown state: %d", (int)(*stats)->state));
	}

	if ((*stats)->locked == 1 && force == 1)
		merlog("startup of database under maintenance '%s' forced", database);

	/* check if the vaultkey is there, otherwise abort early (value
	 * lateron reused when server is started) */
	vaultkey = alloca(sizeof(char) * 512);
	snprintf(vaultkey, 511, "%s/.vaultkey", (*stats)->path);
	if (stat(vaultkey, &statbuf) == -1) {
		SABAOTHfreeStatus(stats);
		return(newErr("cannot start database '%s': no .vaultkey found "
					"(did you create the database with `monetdb create %s`?)",
					database, database));
	}

	/* create the pipes (filedescriptors) now, such that we and the
	 * child have the same descriptor set */
	if (pipe(pfdo) == -1) {
		SABAOTHfreeStatus(stats);
		return(newErr("unable to create pipe: %s", strerror(errno)));
	}
	if (pipe(pfde) == -1) {
		close(pfdo[0]);
		close(pfdo[1]);
		SABAOTHfreeStatus(stats);
		return(newErr("unable to create pipe: %s", strerror(errno)));
	}

	pid = fork();
	if (pid == 0) {
		str conffile = alloca(sizeof(char) * 512);
		str dbname = alloca(sizeof(char) * 512);
		str argv[13];	/* for the exec arguments */
		int c = 0;

		/* redirect stdout and stderr to a new pair of fds for
		 * logging help */
		close(pfdo[0]);
		dup2(pfdo[1], 1);
		close(pfdo[1]);

		close(pfde[0]);
		dup2(pfde[1], 2);
		close(pfde[1]);

		/* ok, now exec that mserver we want */
		snprintf(conffile, 511, "--config=%s", _merovingian_conffile);
		snprintf(dbname, 511, "--dbname=%s", database);
		snprintf(vaultkey, 511, "monet_vault_key=%s/.vaultkey", (*stats)->path);
		argv[c++] = _merovingian_mserver;
		argv[c++] = conffile;
		argv[c++] = dbname;
		argv[c++] = "--dbinit=include sql;"; /* yep, no quotes needed! */
		argv[c++] = "--set"; argv[c++] = "monet_daemon=yes";
		if (doproxy == 0) {
			argv[c++] = "--set"; argv[c++] = "mapi_open=false";
		} else {
			argv[c++] = "--set"; argv[c++] = "mapi_open=true";
		}
		argv[c++] = "--set"; argv[c++] = "mapi_port=0"; /* force autosensing! */
		argv[c++] = "--set"; argv[c++] = vaultkey;
		argv[c++] = NULL;

		merlog("executing '%s' for database '%s'",
				_merovingian_mserver, database);
		execv(_merovingian_mserver, argv);
		/* if the exec returns, it is because of a failure */
		fprintf(stderr, "executing failed: %s\n", strerror(errno));
		exit(1);
	} else if (pid > 0) {
		int i;

		/* make sure no entries are shot while adding and that we
		 * deliver a consistent state */
		pthread_mutex_lock(&topdplock);

		/* parent: fine, let's add the pipes for this child */
		dp = topdp;
		while (dp->next != NULL)
			dp = dp->next;
		dp = dp->next = GDKmalloc(sizeof(struct _dpair));
		dp->out = pfdo[0];
		close(pfdo[1]);
		dp->err = pfde[0];
		close(pfde[1]);
		dp->next = NULL;
		dp->pid = pid;
		dp->dbname = GDKstrdup(database);
		dp->started = 0;

		pthread_mutex_unlock(&topdplock);

		/* wait for the child to open up a communication channel */
		for (i = 0; i < 20; i++) {	/* wait up to 10 seconds */
			/* give the database a break */
			MT_sleep_ms(500);
			/* stats cannot be NULL, as we don't allow starting not
			 * existing databases, note that we need to run this loop at
			 * least once not to leak */
			SABAOTHfreeStatus(stats);
			er = SABAOTHgetStatus(stats, database);
			if (er != MAL_SUCCEED) {
				/* since the client mserver lives its own life anyway,
				 * it's not really a problem we exit here */
				err e = newErr("%s", er);
				GDKfree(er);
				return(e);
			}
			if ((*stats)->state == SABdbRunning &&
					(*stats)->conns != NULL &&
					(*stats)->conns->val != NULL &&
					(*stats)->scens != NULL &&
					(*stats)->scens->val != NULL)
			{
				sablist *scen = (*stats)->scens;
				do {
					if (scen->val != NULL && strcmp(scen->val, "sql") == 0)
						break;
				} while ((scen = scen->next) != NULL);
				if (scen != NULL)
					break;
			}
		}
		/* if we've never found a connection, try to figure out why */
		if (i >= 20) {
			int state = (*stats)->state;
			dpair pdp;

			/* starting failed */
			SABAOTHfreeStatus(stats);

			/* in the meanwhile the list may have changed so refetch the
			 * parent */
			pthread_mutex_lock(&topdplock);
			pdp = topdp;
			while (pdp != NULL && pdp->next != dp)
				pdp = pdp->next;
			/* pdp is NULL when the database terminates somehow while
			 * starting, we still need to free db in that case */

			switch (state) {
				case SABdbRunning:
					/* not sure what's going on with it, but its not
					 * like we want to have it, so kill it */
					terminateProcess(dp);
					/* allow the logger to catch up */
					MT_sleep_ms(100);
					/* remove from the list again */
					if (pdp != NULL)
						pdp->next = dp->next;
					GDKfree(dp->dbname);
					GDKfree(dp);
					pthread_mutex_unlock(&topdplock);
					return(newErr(
								"timeout when waiting for database '%s' to "
								"open up a communication channel or to "
								"initialise the sql scenario", database));
				case SABdbCrashed:
					/* remove from the list again */
					if (pdp != NULL)
						pdp->next = dp->next;
					GDKfree(dp->dbname);
					GDKfree(dp);
					pthread_mutex_unlock(&topdplock);
					return(newErr(
								"database '%s' has crashed after starting, "
								"manual intervention needed", database));
				case SABdbInactive:
					/* due to GDK only locking once it has loaded all
					 * its stuff, Sabaoth cannot "see" if a database is
					 * starting up, or just shut down, this means that
					 * in this case GDK may still be trying to start up,
					 * or that it indeed cleanly shut itself down after
					 * starting... kill it in any case. */
					terminateProcess(dp);
					/* allow the logger to catch up */
					MT_sleep_ms(100);
					/* remove from the list again */
					if (pdp != NULL)
						pdp->next = dp->next;
					GDKfree(dp->dbname);
					GDKfree(dp);
					pthread_mutex_unlock(&topdplock);
					return(newErr(
								"database '%s' either needs a longer timeout "
								"to start up, or appears to shut "
								"itself down after starting", database));
				default:
					/* remove from the list again */
					if (pdp != NULL)
						pdp->next = dp->next;
					GDKfree(dp->dbname);
					GDKfree(dp);
					pthread_mutex_lock(&topdplock);
					return(newErr("unknown state: %d", (int)(*stats)->state));
			}
		}
		if ((*stats)->locked == 1) {
			merlog("database '%s' has been put into maintenance "
					"mode during startup", database);
		}

		/* from now on the SIGCHLD handler can find this database */
		dp->started = 1;

		return(NO_ERR);
	}
	/* forking failed somehow, cleanup the pipes */
	close(pfdo[0]);
	close(pfdo[1]);
	close(pfde[0]);
	close(pfde[1]);
	return(newErr(strerror(errno)));
}

typedef struct _merovingian_proxy {
	stream *in;      /* the input to read from and to dispatch to out */
	stream *out;     /* where to write the read input to */
	stream *co_in;   /* the input stream of the co-thread,
	                    don't read from this stream!  close only */
	stream *co_out;  /* the output stream of the co-thread,
	                    don't write to this stream!  close only */
	char *name;      /* a description to log when this thread ends */
	pthread_t co_thr;/* the other proxyThread */
} merovingian_proxy;

static void
proxyThread(void *d)
{
	merovingian_proxy *p = (merovingian_proxy *)d;
	int len;
	char data[8 * 1024];

	/* pass everything from in to out, until either reading from in, or
	 * writing to out fails, then close in and its related out-stream
	 * (not out!) to make sure the co-thread dies as well */
	while ((len = stream_read(p->in, data, 1, sizeof(data))) >= 0) {
		if (len > 0 && stream_write(p->out, data, len, 1) != 1)
			break;
		if (len == 0 &&	stream_flush(p->out) == -1)
			break;
	}

	stream_close(p->co_out);  /* out towards target B */
	stream_close(p->in);      /* related in from target B */

	stream_close(p->out);     /* out towards target A */
	stream_close(p->co_in);   /* related in from target A */

	if (p->name != NULL) {
		/* name is only set on the client-to-server thread */
		if (len <= 0) {
			merlog("client has %s disconnected from proxy", p->name);
		} else {
			merlog("server has terminated proxy connection, disconnecting client %s", p->name);
		}
		GDKfree(p->name);

		/* wait for the other thread to finish, after which we can
		 * finally destroy the streams */
		pthread_join(p->co_thr, NULL);
		stream_destroy(p->co_out);
		stream_destroy(p->in);
		stream_destroy(p->out);
		stream_destroy(p->co_in);
	}

	GDKfree(p);
}

static err
startProxy(stream *cfdin, stream *cfout, char *url, char *client)
{
	struct hostent *hp;
	struct sockaddr_in server;
	struct sockaddr *serv;
	socklen_t servsize;
	int ssock;
	char *port, *t;
	char *conn;
	stream *sfdin, *sfout;
	merovingian_proxy *pctos, *pstoc;
	pthread_t ptid;
	pthread_attr_t detachattr;

	/* quick 'n' dirty parsing */
	if (strncmp(url, "mapi:monetdb://", sizeof("mapi:monetdb://") - 1) == 0) {
		conn = alloca(sizeof(char) * (strlen(url) + 1));
		memcpy(conn, url, strlen(url) + 1);
		conn += sizeof("mapi:monetdb://") - 1;
		/* drop anything off after the hostname */
		if ((port = strchr(conn, ':')) != NULL) {
			*port = '\0';
			port++;
			if ((t = strchr(port, '/')) != NULL)
				*t = '\0';
		} else {
			return(newErr("can't find a port in redirect, "
						"this is not going to work: %s", url));
		}
	} else {
		return(newErr("unsupported protocol/scheme in redirect: %s", url));
	}

	hp = gethostbyname(conn);
	if (hp == NULL)
		return(newErr("cannot get address for hostname '%s': %s",
					conn, strerror(errno)));

	memset(&server, 0, sizeof(server));
	memcpy(&server.sin_addr, hp->h_addr_list[0], hp->h_length);
	server.sin_family = hp->h_addrtype;
	server.sin_port = htons((unsigned short) (atoi(port) & 0xFFFF));
	serv = (struct sockaddr *) &server;
	servsize = sizeof(server);

	ssock = socket(serv->sa_family, SOCK_STREAM, IPPROTO_TCP);
	if (ssock == INVALID_SOCKET)
		return(newErr("failed to open socket: %s", strerror(errno)));

	if (connect(ssock, serv, servsize) < 0)
		return(newErr("failed to connect: %s", strerror(errno)));

	sfdin = block_stream(socket_rastream(ssock, "merovingian<-server (proxy read)"));
	sfout = block_stream(socket_wastream(ssock, "merovingian->server (proxy write)"));

	if (sfdin == 0 || sfout == 0) {
		close_stream(sfout);
		close_stream(sfdin);
		return(newErr("merovingian-server inputstream or outputstream problems"));
	}

	/* our proxy schematically looks like this:
	 *
	 *                  A___>___B
	 *        out     in |     | out     in
	 * client  --------- |  M  | ---------  server
	 *        in     out |_____| in     out
	 *                  C   <   D
	 *
	 * the thread that does A -> B is called ctos, C -> D stoc
	 * the merovingian_proxy structs are filled like:
	 * ctos: in = A, out = B, co_in = D, co_out = C
	 * stoc: in = D, out = C, co_in = A, co_out = B
	 */

	pstoc = GDKmalloc(sizeof(merovingian_proxy));
	pstoc->in     = sfdin;
	pstoc->out    = cfout;
	pstoc->co_in  = cfdin;
	pstoc->co_out = sfout;
	pstoc->name   = NULL;  /* we want only one log-message on disconnect */
	pstoc->co_thr = 0;

	if (pthread_create(&ptid, NULL,
				(void *(*)(void *))proxyThread, (void *)pstoc) < 0)
	{
		close_stream(sfout);
		close_stream(sfdin);
		return(newErr("failed to create proxy thread"));
	}

	pctos = GDKmalloc(sizeof(merovingian_proxy));
	pctos->in     = cfdin;
	pctos->out    = sfout;
	pctos->co_in  = sfdin;
	pctos->co_out = cfout;
	pctos->name   = GDKstrdup(client);
	pctos->co_thr = ptid;

	pthread_attr_init(&detachattr);
	pthread_attr_setdetachstate(&detachattr, PTHREAD_CREATE_DETACHED);
	if (pthread_create(&ptid, &detachattr,
				(void *(*)(void *))proxyThread, (void *)pctos) < 0)
	{
		close_stream(sfout);
		close_stream(sfdin);
		return(newErr("failed to create proxy thread"));
	}

	return(NO_ERR);
}

static err
handleClient(int sock)
{
	stream *fdin, *fout;
	str buf = alloca(sizeof(char) * 8096);
	char *user = NULL, *algo = NULL, *passwd = NULL, *lang = NULL;
	char *database = NULL, *s;
	char *host = NULL;
	sabdb *top = NULL;
	sabdb *stat = NULL;
	struct sockaddr_in saddr;
	socklen_t saddrlen = sizeof(struct sockaddr_in);
	err e;

	fdin = socket_rastream(sock, "merovingian<-client (read)");
	if (fdin == 0)
		return(newErr("merovingian-client inputstream problems"));
	fdin = block_stream(fdin);

	fout = socket_wastream(sock, "merovingian->client (write)");
	if (fout == 0) {
		close_stream(fdin);
		return(newErr("merovingian-client outputstream problems"));
	}
	fout = block_stream(fout);

	/* note that we claim to speak proto 8 here */
	stream_printf(fout, "%s:merovingian:8:%s:%s",
			"void",  /* some bs */
			"plain", /* FIXME: don't do difficult things for now */
#ifdef WORDS_BIGENDIAN
			"BIG"
#else
			"LIT"
#endif
			);
	stream_flush(fout);
	/* get response */
	if (stream_read_block(fdin, buf, 8095, 1) < 0) {
		/* we didn't get a terminated block :/ */
		e = newErr("client sent challenge in incomplete block: %s", buf);
		stream_printf(fout, "!merovingian: client sent something this server could not understand, sorry\n", user);
		stream_flush(fout);
		close_stream(fout);
		close_stream(fdin);
		return(e);
	}

	/* decode BIG/LIT:user:{cypher}passwordchal:lang:database: line */

	user = buf;
	/* byte order */
	s = strchr(user, ':');
	if (s) {
		*s = 0;
		/* we don't use this in merovingian */
		/* stream_set_byteorder(fin->s, strcmp(user, "BIG") == 0); */
		user = s + 1;
	} else {
		e = newErr("client challenge error: %s", buf);
		stream_printf(fout, "!merovingian: incomplete challenge '%s'\n", user);
		stream_flush(fout);
		close_stream(fout);
		close_stream(fdin);
		return(e);
	}

	/* passwd */
	s = strchr(user, ':');
	if (s) {
		*s = 0;
		passwd = s + 1;
		/* decode algorithm, i.e. {plain}mypasswordchallenge */
		if (*passwd != '{') {
			e = newErr("client challenge error: %s", buf);
			stream_printf(fout, "!merovingian: invalid password entry\n");
			stream_flush(fout);
			close_stream(fout);
			close_stream(fdin);
			return(e);
		}
		algo = passwd + 1;
		s = strchr(algo, '}');
		if (!s) {
			e = newErr("client challenge error: %s", buf);
			stream_printf(fout, "!merovingian: invalid password entry\n");
			stream_flush(fout);
			close_stream(fout);
			close_stream(fdin);
			return(e);
		}
		*s = 0;
		passwd = s + 1;
	} else {
		e = newErr("client challenge error: %s", buf);
		stream_printf(fout, "!merovingian: incomplete challenge '%s'\n", user);
		stream_flush(fout);
		close_stream(fout);
		close_stream(fdin);
		return(e);
	}

	/* lang */
	s = strchr(passwd, ':');
	if (s) {
		*s = 0;
		lang = s + 1;
	} else {
		e = newErr("client challenge error: %s", buf);
		stream_printf(fout, "!merovingian: incomplete challenge, missing language\n");
		stream_flush(fout);
		close_stream(fout);
		close_stream(fdin);
		return(e);
	}

	/* database */
	s = strchr(lang, ':');
	if (s) {
		*s = 0;
		database = s + 1;
		/* we can have stuff following, make it void */
		s = strchr(database, ':');
		if (s)
			*s = 0;
	}

	if (*database == '\0') {
		/* we need to have a database, if we haven't gotten one,
		 * complain */
		stream_printf(fout, "!merovingian: please specify a database\n");
		stream_flush(fout);
		close_stream(fout);
		close_stream(fdin);
		return(newErr("no database specified"));
	} else {
		if ((e = forkMserver(database, &top, 0)) != NO_ERR) {
			if (top == NULL) {
				stream_printf(fout, "!merovingian: no such database '%s', please create it first\n", database);
			} else {
				stream_printf(fout, "!merovingian: internal error while starting mserver, please refer to the logs\n");
			}
			stream_flush(fout);
			close_stream(fout);
			close_stream(fdin);
			return(e);
		}
		stat = top;
	}

	/* if we can't redirect, our mission ends here */
	if (stat->conns == NULL || stat->conns->val == NULL) {
		e = newErr("database '%s' does not allow connections", stat->dbname);
		stream_printf(fout, "!merovingian: database '%s' does not allow connections\n", stat->dbname);
		stream_flush(fout);
		close_stream(fout);
		close_stream(fdin);
		SABAOTHfreeStatus(&top);
		return(e);
	}

	if (getpeername(sock, (struct sockaddr *)&saddr, &saddrlen) == -1) {
		merlog("couldn't get peername of client: %s", strerror(errno));
		host = "(unknown)";
	} else {
		/* avoid doing this, it requires some includes that probably
		 * give trouble on windowz
		host = inet_ntoa(saddr.sin_addr);
		 */
		host = alloca(sizeof(char) * ((3 + 1 + 3 + 1 + 3 + 1 + 3 + 1 + 5) + 1));
		sprintf(host, "%u.%u.%u.%u:%d",
				(unsigned) ((ntohl(saddr.sin_addr.s_addr) >> 24) & 0xff),
				(unsigned) ((ntohl(saddr.sin_addr.s_addr) >> 16) & 0xff),
				(unsigned) ((ntohl(saddr.sin_addr.s_addr) >> 8) & 0xff),
				(unsigned) (ntohl(saddr.sin_addr.s_addr) & 0xff),
				(int)ntohs(saddr.sin_port));
	}

	/* need to send a redirect, either we are going to proxy, or we send
	 * a redirect */
	if (doproxy == 0) {
		merlog("redirecting client %s for database '%s' to %s",
				host, stat->dbname, stat->conns->val);
		stream_printf(fout, "^%s%s\n", stat->conns->val, stat->dbname);
		/* flush redirect */
		stream_flush(fout);
	} else {
		merlog("proxying client %s for database '%s' to %s",
				host, stat->dbname, stat->conns->val);
		stream_printf(fout, "^mapi:merovingian:proxy\n");
		/* flush redirect */
		stream_flush(fout);

		/* wait for input, or disconnect in a proxy runner */
		if ((e = startProxy(fdin, fout, stat->conns->val, host)) != NO_ERR) {
			/* TODO: I violate the protocol this way */
			stream_printf(fout, "!merovingian: an internal error has occurred, please try again later\n");
			stream_flush(fout);
			close_stream(fout);
			close_stream(fdin);
			merlog("starting a proxy failed: %s", e);
			SABAOTHfreeStatus(&top);
			return(e);
		};
	}

	SABAOTHfreeStatus(&top);
	return(NO_ERR);
}

static err
openConnectionTCP(int *ret, unsigned short port)
{
	struct sockaddr_in server;
	int sock = -1;

	socklen_t length = 0;
	int on = 1;
	int i = 0;
	char host[512];

	sock = socket(AF_INET, SOCK_STREAM, 0);
	if (sock < 0)
		return(newErr("creation of stream socket failed: %s",
					strerror(errno)));

	setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, (char *) &on, sizeof on);

	server.sin_family = AF_INET;
	server.sin_addr.s_addr = htonl(INADDR_ANY);
	for (i = 0; i < 8; i++)
		server.sin_zero[i] = 0;
	length = (socklen_t) sizeof(server);

	server.sin_port = htons((unsigned short) ((port) & 0xFFFF));
	if (bind(sock, (SOCKPTR) &server, length) < 0) {
		return(newErr("binding to stream socket port %hu failed: %s",
				port, strerror(errno)));
	}

	if (getsockname(sock, (SOCKPTR) &server, &length) < 0)
		return(newErr("failed getting socket name: %s",
				strerror(errno)));
	/* keep queue of 5 */
	listen(sock, 5);

	gethostname(host, 512);
	merlog("listening for TCP connections on %s:%hu", host, port);

	*ret = sock;
	return(NO_ERR);
}

static err
openConnectionUDP(int *ret, unsigned short port)
{
	struct addrinfo hints;
	struct addrinfo *result, *rp;
	int sock = -1;

	char sport[10];
	char host[512];

	memset(&hints, 0, sizeof(struct addrinfo));
	hints.ai_family = AF_INET;      /* Allow IPv4 only (broadcasting) */
	hints.ai_socktype = SOCK_DGRAM; /* Datagram socket */
	hints.ai_flags = AI_PASSIVE;    /* For wildcard IP address */
	hints.ai_protocol = 0;          /* Any protocol */
	hints.ai_canonname = NULL;
	hints.ai_addr = NULL;
	hints.ai_next = NULL;

	snprintf(sport, 10, "%hu", port);
	sock = getaddrinfo(NULL, sport, &hints, &result);
	if (sock != 0)
		return(newErr("failed getting address info: %s", gai_strerror(sock)));

	for (rp = result; rp != NULL; rp = rp->ai_next) {
		sock = socket(rp->ai_family, rp->ai_socktype, rp->ai_protocol);
		if (sock == -1)
			continue;

		if (bind(sock, rp->ai_addr, rp->ai_addrlen) == 0)
			break; /* working */

		close(sock);
	}

	if (rp == NULL)
		return(newErr("binding to datagram socket port %hu failed: "
					"no available address", port));

	freeaddrinfo(result);

	gethostname(host, 512);
	merlog("listening for UDP messages on %s:%hu", host, port);

	*ret = sock;
	return(NO_ERR);
}

static err
openConnectionUNIX(int *ret, char *path)
{
	struct sockaddr_un server;
	int sock = -1;

	sock = socket(AF_UNIX, SOCK_STREAM, 0);
	if (sock < 0)
		return(newErr("creation of UNIX stream socket failed: %s",
					strerror(errno)));

	memset(&server, 0, sizeof(struct sockaddr_un));
	server.sun_family = AF_UNIX;
	strncpy(server.sun_path, path, sizeof(server.sun_path) - 1);

	if (bind(sock, (SOCKPTR) &server, sizeof(struct sockaddr_un)) < 0)
		return(newErr("binding to UNIX stream socket at %s failed: %s",
				path, strerror(errno)));

	/* keep queue of 5 */
	listen(sock, 5);

	merlog("listening for UNIX connections on %s", path);

	*ret = sock;
	return(NO_ERR);
}

static int _keepListening = 1;
static str
acceptConnections(int sock)
{
	str msg;
	int retval;
	fd_set fds;
	int msgsock;
	err e;

	do {
		/* handle socket connections */
		FD_ZERO(&fds);
		FD_SET(sock, &fds);

		retval = select(sock + 1, &fds, NULL, NULL, NULL);
		if (retval == 0) {
			/* nothing interesting has happened */
			continue;
		}
		if (retval < 0) {
			if (_keepListening == 0)
				break;
			if (errno != EINTR) {
				msg = strerror(errno);
				goto error;
			}
			continue;
		}
		if (FD_ISSET(sock, &fds)) {
			if ((msgsock = accept(sock, (SOCKPTR) 0, (socklen_t *) 0)) < 0) {
				if (_keepListening == 0)
					break;
				if (errno != EINTR) {
					msg = strerror(errno);
					goto error;
				}
				continue;
			}
		} else
			continue;
		e = handleClient(msgsock);
		if (e != NO_ERR) {
			fprintf(stderr, "client error: %s\n", getErrMsg(e));
			freeErr(e);
		}
	} while (_keepListening);
	shutdown(sock, SHUT_RDWR);
	close(sock);
	return(NO_ERR);

error:
	_keepListening = 0;
	shutdown(sock, SHUT_RDWR);
	close(sock);
	return(newErr("accept connection: %s", msg));
}

static void
controlRunner(void *d)
{
	int sock = *(int *)d;
	char buf[256];
	char buf2[256];
	char *p, *q;
	sabdb *stats;
	int pos = 0;
	int retval;
	fd_set fds;
	int msgsock;
	size_t len;
	err e;

	do {
		/* handle socket connections */
		FD_ZERO(&fds);
		FD_SET(sock, &fds);

		retval = select(sock + 1, &fds, NULL, NULL, NULL);
		if (retval == 0) {
			/* nothing interesting has happened */
			continue;
		}
		if (retval < 0) {
			if (_keepListening == 0)
				break;
			if (errno != EINTR) {
				e = newErr("control runner: error during select: %s",
						strerror(errno));
				goto error;
			}
			continue;
		}
		if (FD_ISSET(sock, &fds)) {
			if ((msgsock = accept(sock, (SOCKPTR) 0, (socklen_t *) 0)) < 0) {
				if (_keepListening == 0)
					break;
				if (errno != EINTR) {
					e = newErr("control runner: error during accept: %s",
							strerror(errno));
					goto error;
				}
				continue;
			}
		} else
			continue;

		while (_keepListening) {
			if (pos == 0) {
				if ((pos = recv(msgsock, buf, sizeof(buf), 0)) == 0) {
					/* EOF */
					break;
				} else if (pos == -1) {
					/* we got interrupted ... so what? */
					if (errno == EINTR) {
						pos = 0;
						continue;
					}
					/* hmmm error ... give up */
					fprintf(stderr, "error reading from control channel: %s\n",
							strerror(errno));
					break;
				} else {
					buf[pos] = '\0';
					pos = 0;
				}
			}
			q = buf + pos;
			p = strchr(q, '\n');
			if (p == NULL) {
				/* skip, must be garbage */
				fprintf(stderr, "skipping garbage on control channel: %s\n", buf);
				pos = 0;
				continue;
			}
			*p++ = '\0';
			if (*p == '\0') {
				pos = 0;
			} else {
				pos = p - buf;
			}

			/* format is simple: database<space>command */
			if ((p = strchr(q, ' ')) == NULL) {
				fprintf(stderr, "malformed control signal: %s\n", q);
			} else {
				*p++ = '\0';
				if (strcmp(p, "start") == 0) {
					err e;
					merlog("starting database %s due to control signal", q);
					if ((e = forkMserver(q, &stats, 1)) != NO_ERR) {
						fprintf(stderr, "failed to fork mserver: %s\n",
								getErrMsg(e));
						len = snprintf(buf2, sizeof(buf2), "starting %s failed: %s\n",
								q, getErrMsg(e));
						send(msgsock, buf2, len, 0);
						freeErr(e);
						stats = NULL;
					} else {
						len = snprintf(buf2, sizeof(buf2), "OK\n");
						send(msgsock, buf2, len, 0);
					}

					if (stats != NULL)
						SABAOTHfreeStatus(&stats);
				} else if (strcmp(p, "stop") == 0 ||
						strcmp(p, "kill") == 0)
				{
					dpair dp;
					/* we need to find the right dpair, that is we
					 * sort of assume the control signal is right */
					pthread_mutex_lock(&topdplock);
					dp = topdp->next; /* don't need the console/log */
					while (dp != NULL) {
						if (strcmp(dp->dbname, q) == 0) {
							if (strcmp(p, "stop") == 0) {
								merlog("stopping database %s due to control "
										"signal", q);
								kill(dp->pid, SIGTERM);
							} else {
								merlog("killing database %s due to control "
										"signal", q);
								kill(dp->pid, SIGKILL);
							}
							len = snprintf(buf2, sizeof(buf2), "OK\n");
							send(msgsock, buf2, len, 0);
							break;
						}
						dp = dp->next;
					}
					if (dp == NULL) {
						fprintf(stderr, "received control stop signal for "
								"database not under merovingian control: %s\n",
								q);
						len = snprintf(buf2, sizeof(buf2),
								"%s is not controlled by merovingian\n", q);
						send(msgsock, buf2, len, 0);
					}
					pthread_mutex_unlock(&topdplock);
				} else if (strcmp(q, "anelosimus") == 0 &&
						strcmp(p, "eximius") == 0)
				{
					/* return a list of remote databases from our Aranita */
					remotedb rdb;

					pthread_mutex_lock(&remotedblock);

					rdb = _merovingian_remotedbs;
					while (rdb != NULL) {
						len = snprintf(buf2, sizeof(buf2), "%s\t%s\n",
								rdb->dbname, rdb->conn);
						send(msgsock, buf2, len, 0);
						rdb = rdb->next;
					}

					pthread_mutex_unlock(&remotedblock);

					/* because this command is multi line, you can't
					 * combine it, disconnect the client */
					break;
				} else {
					fprintf(stderr, "unknown control command: %s", p);
					len = snprintf(buf2, sizeof(buf2),
							"unknown command: %s\n", p);
					send(msgsock, buf2, len, 0);
				}
			}
		}
		close(msgsock);
		continue;

error:
		fprintf(stderr, "%s\n", e);
	} while (_keepListening);
	shutdown(sock, SHUT_RDWR);
	close(sock);
	merlog("control channel closed");
}

static int discoveryttl;
static void
discoveryRunner(void *d)
{
	int sock = *(int *)d;
	int s = -1;
	struct sockaddr local;
	socklen_t addrlen;
	struct sockaddr_storage peer_addr;
	socklen_t peer_addr_len;
	fd_set fds;
	struct timeval tv;
	int bcs;
	struct sockaddr_in brdcst;
	int c;
	time_t deadline = 0;
	time_t now = 0;
	int forceannc = 0;
	sabdb *orig;
	sabdb *stats;
	err e;
	remotedb rdb;
	remotedb prv;

	ssize_t nread;
	char buf[512]; /* our packages should be pretty small */
	char host[128];
	char lhost[128];
	char service[8];

	/* seed random number generation for random delay in HELO response */
	srand(time(NULL));

	gethostname(lhost, 128);

	addrlen = sizeof(local);
	if (getsockname(sock, &local, &addrlen) < 0) {
		fprintf(stderr, "neighbour discovery: cannot get own hostname, "
				"discovery services disabled\n");
		return;
	}

	bcs = socket(AF_INET, SOCK_DGRAM, 0);

	s = 1;
	if ((setsockopt(bcs, SOL_SOCKET, SO_BROADCAST, &s, sizeof(s))) == -1) {
		fprintf(stderr, "neighbour discovery: cannot broadcast, "
				"discovery services disabled\n");
		return;
	}

	brdcst.sin_family = AF_INET;
	brdcst.sin_addr.s_addr = htonl(INADDR_BROADCAST);
	/* the target port is our configured port, not elegant, but how
	 * else can we do it? can't broadcast to all ports or something */
	brdcst.sin_port = ((struct sockaddr_in *)&local)->sin_port;

	/* start shouting around that we're here ;) request others to tell
	 * what databases they have */
	snprintf(buf, 512, "HELO %s", lhost);
	c = strlen(buf) + 1;
	if (sendto(bcs, buf, c, 0,
				(struct sockaddr *)&brdcst, sizeof(brdcst)) != c)
		fprintf(stderr, "HELO message: error while sending "
				"message: %s\n", strerror(errno));

	/* main loop */
	while (_keepListening == 1) {
		now = time(NULL);
		/* do a round of announcements, we're ahead of the ttl because
		 * when we announce, we add 60 seconds to avoid a "gap" */
		if (forceannc == 1 || deadline <= now) {
			/* set new deadline */
			deadline = now + discoveryttl;
			forceannc = 0;

			/* list all known databases */
			if ((e = SABAOTHgetStatus(&stats, NULL)) != MAL_SUCCEED) {
				fprintf(stderr, "neighbour discovery: SABAOTHgetStatus error: "
						"%s, discovery services disabled\n", e);
				GDKfree(e);
				return;
			}

			orig = stats;
			while (stats != NULL) {
				/* craft ANNC messages for each db */
				snprintf(buf, 512, "ANNC %s mapi:monetdb://%s:%hu/ %d",
						stats->dbname,
						lhost,
						ntohs(((struct sockaddr_in *)&local)->sin_port),
						discoveryttl + 60);

				c = strlen(buf) + 1;
				if (sendto(bcs, buf, c, 0,
							(struct sockaddr *)&brdcst, sizeof(brdcst)) != c)
					fprintf(stderr, "ANNC message: error while sending "
							"message: %s\n", strerror(errno));

				stats = stats->next;
			}

			if (orig != NULL)
				SABAOTHfreeStatus(&orig);
		}

		/* do a round to see if we have to cleanup anything (expired
		 * ttl) */
		pthread_mutex_lock(&remotedblock);

		prv = NULL;
		rdb = _merovingian_remotedbs;
		while (rdb != NULL) {
			if (rdb->ttl <= now) {
				/* expired, let's remove */
				if (prv == NULL) {
					_merovingian_remotedbs = rdb->next;
				} else {
					prv->next = rdb->next;
				}
				merlog("neighbour database %s at %s has expired",
						rdb->dbname, rdb->conn);
				free(rdb->dbname);
				free(rdb->conn);
				free(rdb);
				break;
			}
			prv = rdb;
			rdb = rdb->next;
		}

		pthread_mutex_unlock(&remotedblock);

		peer_addr_len = sizeof(struct sockaddr_storage);
		FD_ZERO(&fds);
		FD_SET(sock, &fds);
		/* Wait up to 5 seconds. */
		tv.tv_sec = 5;
		tv.tv_usec = 0;
		nread = select(sock + 1, &fds, NULL, NULL, &tv);
		if (nread == 0) {
			/* nothing interesting has happened */
			buf[0] = '\0';
			continue;
		}
		nread = recvfrom(sock, buf, 512, 0,
				(struct sockaddr *)&peer_addr, &peer_addr_len);
		if (nread == -1) {
			buf[0] = '\0';
			continue; /* ignore failed request */
		}

		s = getnameinfo((struct sockaddr *)&peer_addr,
				peer_addr_len, host, 128,
				service, 8, NI_NUMERICSERV);
		if (s != 0) {
			fprintf(stderr, "neighbour discovery: cannot retrieve "
					"name info: %s\n", gai_strerror(s));
			continue; /* skip this message */
		}

		/* ignore messages from self: FIXME make this more robust */
		if (strcmp(host, lhost) == 0
				|| strcmp(host, "localhost") == 0
				|| strcmp(host, "0.0.0.0") == 0)
			continue;

		if (strncmp(buf, "HELO ", 5) == 0) {
			/* HELLO message, respond with current databases */
			merlog("discovered neighbour %s", host);
			/* sleep a random amount of time to avoid an avalanche of
			 * ANNC messages flooding the network */
			c = 1 + (int)(2500.0 * (rand() / (RAND_MAX + 1.0)));
			MT_sleep_ms(c);
			/* force an announcement round by dropping the deadline */
			forceannc = 1;
			continue;
		} else if (strncmp(buf, "LEAV ", 5) == 0) {
			/* LEAVE message, unregister database */
			char *sp = NULL;
			char *dbname;
			char *conn;

			strtok_r(buf, " ", &sp); /* discard the msg type */
			dbname = strtok_r(NULL, " ", &sp);
			conn = strtok_r(NULL, " ", &sp);

			if (dbname == NULL || conn == NULL)
				continue;

			/* look for the database, and verify that its "conn"
			 * (merovingian) is the same */

			/* technically, we could use Diffie-Hellman (without Debian
			 * modifications) to negotiate a shared secret key, such
			 * that only the original registrant can unregister a
			 * database, however... do we really care that much? */

			pthread_mutex_lock(&remotedblock);

			prv = NULL;
			rdb = _merovingian_remotedbs;
			while (rdb != NULL) {
				if (strcmp(dbname, rdb->dbname) == 0 &&
						strcmp(conn, rdb->conn) == 0)
				{
					/* found, let's remove */
					if (prv == NULL) {
						_merovingian_remotedbs = rdb->next;
					} else {
						prv->next = rdb->next;
					}
					free(rdb->dbname);
					free(rdb->conn);
					free(rdb);
					merlog("removed neighbour database %s at %s (%s)",
							dbname, conn, host);
					break;
				}
				prv = rdb;
				rdb = rdb->next;
			}

			pthread_mutex_unlock(&remotedblock);
		} else if (strncmp(buf, "ANNC ", 5) == 0) {
			/* ANNOUNCE message, register database */
			char *sp = NULL;
			char *dbname;
			char *conn;
			char *ttl;

			strtok_r(buf, " ", &sp); /* discard the msg type */
			dbname = strtok_r(NULL, " ", &sp);
			conn = strtok_r(NULL, " ", &sp);
			ttl = strtok_r(NULL, " ", &sp);

			if (dbname == NULL || conn == NULL || ttl == NULL)
				continue;

			pthread_mutex_lock(&remotedblock);

			if (_merovingian_remotedbs == NULL) {
				rdb = _merovingian_remotedbs = malloc(sizeof(struct _remotedb));
			} else {
				prv = NULL;
				rdb = _merovingian_remotedbs;
				while (rdb != NULL) {
					if (strcmp(dbname, rdb->dbname) == 0) {
						if (strcmp(conn, rdb->conn) == 0) {
							/* refresh ttl */
							rdb->ttl = time(NULL) + atoi(ttl);
						}
						rdb = prv;
						merlog("refresh from %s for database %s",
								host, dbname);
						break; /* skip duplicate entries */
					}
					prv = rdb;
					rdb = rdb->next;
				}
				if (rdb == prv) {
					pthread_mutex_unlock(&remotedblock);
					continue;
				}
				rdb = prv->next = malloc(sizeof(struct _remotedb));
			}
			rdb->dbname = strdup(dbname);
			rdb->conn = strdup(conn);
			rdb->ttl = time(NULL) + atoi(ttl);
			rdb->next = NULL;

			pthread_mutex_unlock(&remotedblock);

			merlog("discovered neighbour database %s at %s "
					"(refresh from %s in %s seconds)",
					dbname, conn, host, ttl);
		} else {
			merlog("neighbour discovery: ignoring unknown message "
					"from %s:%s: '%s'", host, service, buf);
		}
	}

	/* now notify of our soon to be absence ;) */

	/* list all known databases */
	if ((e = SABAOTHgetStatus(&stats, NULL)) != MAL_SUCCEED) {
		fprintf(stderr, "neighbour discovery: SABAOTHgetStatus error: "
				"%s, discovery services disabled\n", e);
		GDKfree(e);
		return;
	}

	orig = stats;
	while (stats != NULL) {
		/* craft LEAV messages for each db */
		snprintf(buf, 512, "LEAV %s mapi:monetdb://%s:%hu/",
				stats->dbname,
				lhost,
				ntohs(((struct sockaddr_in *)&local)->sin_port));

		c = strlen(buf) + 1;
		if (sendto(bcs, buf, c, 0,
					(struct sockaddr *)&brdcst, sizeof(brdcst)) != c)
			fprintf(stderr, "LEAV message: error while sending "
					"message: %s\n", strerror(errno));

		stats = stats->next;
	}

	if (orig != NULL)
		SABAOTHfreeStatus(&orig);

	close(bcs);
}

static str
replacePrefix(str s, str prefix)
{
	str p;
	str buf;

	/* unfortunately we have to replace occurences of ${prefix}, which
	 * is medieval in this language */
	p = strstr(s, "${prefix}");
	if (p != NULL) {
		buf = GDKmalloc(sizeof(char) * (strlen(s) + strlen(prefix) + 1));
		memcpy(buf, s, p - s);
		memcpy(buf + (p - s), prefix, strlen(prefix));
		memcpy(buf + (p - s) + strlen(prefix), s + (p - s) + 9, strlen(s) - 9 - (p - s) + 1);
		return(buf);
	} else {
		return(GDKstrdup(s));
	}
}

static void
handler(int sig)
{
	merlog("caught signal %d, Merovingian %s stopping ...", sig, MEROV_VERSION);
	_keepListening = 0;
}

static void
childhandler(int sig, siginfo_t *si, void *unused)
{
	dpair p, q;

	(void)sig;
	(void)unused;

	/* wait for the child to get properly terminated, hopefully filling
	 * in the siginfo struct on FreeBSD */
	wait(NULL);

	if (si->si_code != CLD_EXITED &&
			si->si_code != CLD_KILLED &&
			si->si_code != CLD_DUMPED)
	{
		/* ignore traps, stops and continues, we only want terminations
		 * of the client process */
		return;
	}

	/* get the pid from the former child, and locate it in our list */
	pthread_mutex_lock(&topdplock);

	q = topdp->next;
	p = q->next;
	while (p != NULL) {
		if (p->pid == si->si_pid) {
			/* wait a little (we're not in a hurry anyway, are we?) such
			 * that the logger catches the messages (if any). */
			MT_sleep_ms(100);
			/* remove it, disconnect first, then free (because the
			 * logger might access it otherwise after the free) */
			q->next = p->next;
			/* close the descriptors */
			close(p->out);
			close(p->err);
			if (si->si_code == CLD_EXITED) {
				merlog("database '%s' (%d) has exited with exit status %d",
						p->dbname, p->pid, si->si_status);
			} else if (si->si_code == CLD_KILLED) {
				merlog("database '%s' (%d) was killed by signal %d",
						p->dbname, p->pid, si->si_status);
			} else if (si->si_code == CLD_DUMPED) {
				merlog("database '%s' (%d) has crashed (dumped core)",
						p->dbname, p->pid);
			}
			/* if we're starting up, don't clean up */
			if (p->started == 0) {
				pthread_mutex_unlock(&topdplock);
				return;
			}
			if (p->dbname)
				GDKfree(p->dbname);
			GDKfree(p);
			pthread_mutex_unlock(&topdplock);
			return;
		}
		q = p;
		p = q->next;
	}

	pthread_mutex_unlock(&topdplock);
	merlog("received SIGCHLD from unknown child with pid %d", si->si_pid);
}

int
main(int argc, char *argv[])
{
	err e;
	int argp;
	str dbfarm, msglog, errlog, pidfilename;
	str p, prefix;
	FILE *cnf = NULL, *pidfile = NULL;
	char buf[1024];
	char lockfile[512];
	sabdb* stats = NULL;
	dpair d;
	int pfd[2];
	int retfd = -1;
	pthread_t tid;
	struct sigaction sa;
	int ret;
	int sock = -1;
	int usock = -1;
	int unsock = -1;
	struct stat sb;
	FILE *oerr = NULL;
	unsigned short port = MEROV_PORT;

	/* fork into the background immediately
	 * By doing this our child can simply do everything it needs to do
	 * itself.  Via a pipe it will tell us if it is happy or not. */
	if (pipe(pfd) == -1) {
		fprintf(stderr, "unable to create pipe: %s\n",
				strerror(errno));
		return(1);
	}
#ifndef MERO_DONTFORK
	switch (fork()) {
		case -1:
			/* oops, forking went wrong! */
			fprintf(stderr, "unable to fork into background: %s\n",
					strerror(errno));
			return(1);
		case 0:
			/* detach client from controlling tty, we only write to the
			 * pipe to daddy */
			if (setsid() < 0)
				fprintf(stderr, "hmmm, can't detach from controlling tty, continuing anyway\n");
			retfd = open("/dev/null", O_RDONLY);
			dup2(retfd, 0);
			close(retfd);
			close(pfd[0]); /* close unused read end */
			retfd = pfd[1]; /* store the write end */
		break;
		default:
			/* the parent, we want it to die, after we know the child
			 * has a good time */
			close(pfd[1]); /* close unused write end */
			if (read(pfd[0], &buf, 1) != 1) {
				fprintf(stderr, "unable to retrieve startup status\n");
				return(1);
			}
			close(pfd[0]);
			return(buf[0]); /* whatever the child returned, we return */
	}
#endif

	/* Paranoia umask, but good, because why would people have to sniff
	 * our private parts? */
	umask(S_IRWXG | S_IRWXO);

	/* hunt for the config file, and read it, allow the caller to
	 * specify where to look using the MONETDB5CONF environment variable */
	p = getenv("MONETDB5CONF");
	if (p == NULL)
		p = MONETDB5_CONFFILE;
	cnf = fopen(p, "r");
	if (cnf == NULL) {
		fprintf(stderr, "cannot open config file %s\n", p);
		fflush(stderr);
		return(1);
	}
	/* store this conffile for later use in forkMserver */
	_merovingian_conffile = p;

	prefix = GDKstrdup(MONETDB5_PREFIX);
	dbfarm = NULL;
	msglog = NULL;
	errlog = NULL;
	timeout = 0;
	pidfilename = NULL;
	doproxy = 0;
	discoveryttl = 600;
	while (fgets(buf, 1024, cnf) != NULL) {
		/* eliminate fgets' newline */
		buf[strlen(buf) - 1] = '\0';
		if (*buf && strncmp(buf, "prefix=", 7) == 0) {
			/* this should always come before it's used, so it's safe
			 * this way */
			p = strchr(buf, '=');
			GDKfree(prefix);
			prefix = GDKstrdup(++p);
		} else if (*buf && strncmp(buf, "gdk_dbfarm=", 11) == 0) {
			p = strchr(buf, '=');
			dbfarm = replacePrefix(++p, prefix);
		} else if (*buf && strncmp(buf, "mero_msglog=", 12) == 0) {
			p = strchr(buf, '=');
			msglog = replacePrefix(++p, prefix);
		} else if (*buf && strncmp(buf, "mero_errlog=", 12) == 0) {
			p = strchr(buf, '=');
			errlog = replacePrefix(++p, prefix);
		} else if (*buf && strncmp(buf, "mero_exittimeout=", 17) == 0) {
			p = strchr(buf, '=');
			timeout = atoi(++p);
		} else if (*buf && strncmp(buf, "mero_timeinterval=", 18) == 0) {
			p = strchr(buf, '=');
			_timeInterval = atoi(++p);
		} else if (*buf && strncmp(buf, "mero_pidfile=", 13) == 0) {
			p = strchr(buf, '=');
			pidfilename = replacePrefix(++p, prefix);
		} else if (*buf && strncmp(buf, "mero_port=", 10) == 0) {
			p = strchr(buf, '=');
			/* temporarily misuse ret */
			ret = atoi(++p);
			if (ret <= 0 || ret > 65535) {
				fprintf(stderr, "invalid port number: %s\n", p);
				fflush(stderr);
			}
			port = (unsigned short)ret;
		} else if (*buf && strncmp(buf, "mero_doproxy=", 13) == 0) {
			p = strchr(buf, '=') + 1;
			if (strcmp(p, "yes") == 0 ||
					strcmp(p, "true") == 0 ||
					strcmp(p, "1") == 0)
			{
				doproxy = 1;
			} else {
				doproxy = 0;
			}
		} else if (*buf && strncmp(buf, "mero_discoveryttl=", 18) == 0) {
			p = strchr(buf, '=');
			discoveryttl = atoi(++p);
		}
	}

	fclose(cnf);

#define MERO_EXIT(status) \
	buf[0] = status; \
	if (write(retfd, &buf, 1) != 1 || close(retfd) != 0) { \
		fprintf(stderr, "could not write to parent\n"); \
		fflush(stderr); \
	}

	/* where is the mserver5 binary we fork on demand? */
	snprintf(buf, 1023, "%s/bin/mserver5", prefix);
	_merovingian_mserver = alloca(sizeof(char) * (strlen(buf) + 1));
	memcpy(_merovingian_mserver, buf, strlen(buf) + 1);
	/* exit early if this is not going to work well */
	if (stat(_merovingian_mserver, &sb) == -1) {
		fprintf(stderr, "cannot stat %s executable: %s\n",
				_merovingian_mserver, strerror(errno));
		fflush(stderr);

		MERO_EXIT(1);
		return(1);
	}

	/* we no longer need prefix */
	GDKfree(prefix);
	prefix = NULL;

	/* we need a dbfarm */
	if (dbfarm == NULL) {
		fprintf(stderr, "cannot find dbfarm via config file\n");
		fflush(stderr);
		MERO_EXIT(1);
		return(1);
	} else {
		/* check if dbfarm actually exists */
		struct stat statbuf;
		if (stat(dbfarm, &statbuf) == -1) {
			/* try to create the dbfarm */
			char *p = dbfarm;
			while ((p = strchr(p + 1, '/')) != NULL) {
				*p = '\0';
				if (stat(dbfarm, &statbuf) == -1 && mkdir(dbfarm, 0755)) {
					fprintf(stderr, "unable to create directory '%s': %s\n",
							dbfarm, strerror(errno));
					fflush(stderr);
					MERO_EXIT(1);
					return(1);
				}
				*p = '/';
			}
			if (mkdir(dbfarm, 0755)) {
				fprintf(stderr, "unable to create directory '%s': %s\n",
						dbfarm, strerror(errno));
				fflush(stderr);
				MERO_EXIT(1);
				return(1);
			}
		}
	}

	/* chdir to dbfarm so we are at least in a known to exist location */
	if (chdir(dbfarm) < 0) {
		fprintf(stderr, "could not move to dbfarm '%s': %s\n",
				dbfarm, strerror(errno));
		fflush(stderr);
		MERO_EXIT(1);
		return(1);
	}

	/* we need a pidfile */
	if (pidfilename == NULL) {
		fprintf(stderr, "cannot find pidfilename via config file\n");
		fflush(stderr);
		MERO_EXIT(1);
		return(1);
	}

	snprintf(lockfile, 512, "%s/.merovingian_lock", dbfarm);
	/* lock such that we are alone on this world */
	if ((ret = MT_lockf(lockfile, F_TLOCK, 4, 1)) == -1) {
		/* locking failed */
		fprintf(stderr, "another merovingian is already running\n");
		fflush(stderr);
		MERO_EXIT(1);
		return(1);
	} else if (ret == -2) {
		/* directory or something doesn't exist */
		fprintf(stderr, "unable to create .merovingian_lock file in %s: %s\n",
				dbfarm, strerror(errno));
		fflush(stderr);
		MERO_EXIT(1);
		return(1);
	}

	topdp = alloca(sizeof(struct _dpair));
	topdp->pid = 0;
	topdp->dbname = NULL;

	/* where should our msg output go to? */
	if (msglog == NULL) {
		/* stdout, save it */
		argp = dup(1);
		topdp->out = argp;
	} else {
		/* write to the given file */
		topdp->out = open(msglog, O_WRONLY | O_APPEND | O_CREAT,
				S_IRUSR | S_IWUSR);
		if (topdp->out == -1) {
			fprintf(stderr, "unable to open '%s': %s\n",
					msglog, strerror(errno));
			MERO_EXIT(1);
			return(1);
		}
		topdp->dbname = "file";
	}

	/* where should our err output go to? */
	if (errlog == NULL) {
		/* stderr, save it */
		argp = dup(2);
		topdp->err = argp;
	} else {
		/* write to the given file */
		if (strcmp(msglog, errlog) == 0) {
			topdp->err = topdp->out;
		} else {
			topdp->err = open(errlog, O_WRONLY | O_APPEND | O_CREAT,
					S_IRUSR | S_IWUSR);
			if (topdp->err == -1) {
				fprintf(stderr, "unable to open '%s': %s\n",
						errlog, strerror(errno));
				MERO_EXIT(1);
				return(1);
			}
		}
		topdp->dbname = "file";
	}
	GDKfree(msglog);
	GDKfree(errlog);

	d = topdp->next = alloca(sizeof(struct _dpair));

	/* make sure we will be able to write our pid */
	if ((pidfile = fopen(pidfilename, "w")) == NULL) {
		fprintf(stderr, "unable to open '%s' for writing: %s\n",
				pidfilename, strerror(errno));
		MERO_EXIT(1);
		return(1);
	}
	GDKfree(pidfilename);

	/* redirect stdout */
	if (pipe(pfd) == -1) {
		fprintf(stderr, "unable to create pipe: %s\n",
				strerror(errno));
		MERO_EXIT(1);
		return(1);
	}
	d->out = pfd[0];
	dup2(pfd[1], 1);
	close(pfd[1]);

	/* redirect stderr */
	if (pipe(pfd) == -1) {
		fprintf(stderr, "unable to create pipe: %s\n",
				strerror(errno));
		MERO_EXIT(1);
		return(1);
	}
	/* before it is too late, save original stderr */
	oerr = fdopen(dup(2), "w");
	d->err = pfd[0];
	dup2(pfd[1], 2);
	close(pfd[1]);

	d->next = NULL;
	d->pid = getpid();
	d->dbname = "merovingian";

	/* write out the pid */
	fprintf(pidfile, "%d\n", (int)d->pid);
	fflush(pidfile);
	fclose(pidfile);

	if (pthread_create(&tid, NULL, (void *(*)(void *))logListener, (void *)NULL) < 0) {
		fprintf(oerr, "%s: unable to create logthread, exiting\n", argv[0]);
		MERO_EXIT(1);
		return(1);
	}

	sigemptyset(&sa.sa_mask);
	sa.sa_flags = 0;
	sa.sa_handler = handler;
	if (
			sigaction(SIGINT, &sa, NULL) == -1 ||
			sigaction(SIGQUIT, &sa, NULL) == -1 ||
			sigaction(SIGTERM, &sa, NULL) == -1)
	{
		fprintf(oerr, "%s: unable to create signal handlers\n", argv[0]);
		MERO_EXIT(1);
		return(1);
	}

	sigemptyset(&sa.sa_mask);
	sa.sa_flags = 0;
	sa.sa_handler = SIG_IGN;
	if (sigaction(SIGPIPE, &sa, NULL) == -1) {
		fprintf(oerr, "%s: unable to create signal handlers\n", argv[0]);
		MERO_EXIT(1);
		return(1);
	}
	if (sigaction(SIGHUP, &sa, NULL) == -1) {
		fprintf(oerr, "%s: unable to create signal handlers\n", argv[0]);
		MERO_EXIT(1);
		return(1);
	}

	sa.sa_flags = SA_SIGINFO;
	sigemptyset(&sa.sa_mask);
	sa.sa_sigaction = childhandler;
	if (sigaction(SIGCHLD, &sa, NULL) == -1) {
		fprintf(oerr, "%s: unable to create signal handlers\n", argv[0]);
		MERO_EXIT(1);
		return(1);
	}

	merlog("Merovingian %s starting ...", MEROV_VERSION);
	merlog("monitoring dbfarm %s", dbfarm);

	SABAOTHinit(dbfarm, NULL);

	/* set up control channel path */
	snprintf(buf, 1024, "%s/.merovingian_control", dbfarm);
	unlink(buf);
	GDKfree(dbfarm);

	/* open up connections */
	if (
			(e = openConnectionTCP(&sock, port)) == NO_ERR &&
			(e = openConnectionUDP(&usock, port)) == NO_ERR &&
			(e = openConnectionUNIX(&unsock, buf)) == NO_ERR)
	{
		pthread_t ctid = 0;
		pthread_t dtid = 0;

		/* From this point merovingian considers itself to be in position to
		 * start running, so flag the parent we will have fun. */
		MERO_EXIT(0);

		for (argp = 1; argp < argc; argp++) {
			e = forkMserver(argv[argp], &stats, 0);
			if (e != NO_ERR) {
				fprintf(stderr, "failed to fork mserver: %s\n", getErrMsg(e));
				freeErr(e);
				stats = NULL;
			}
			if (stats != NULL)
				SABAOTHfreeStatus(&stats);
		}

		/* handle control commands */
		if (pthread_create(&ctid, NULL, (void *(*)(void *))controlRunner,
					(void *)&unsock) < 0)
		{
			fprintf(stderr, "unable to create control command thread\n");
			ctid = 0;
		}

		/* start neighbour discovery and notification thread */ 
		if (pthread_create(&dtid, NULL, (void *(*)(void *))discoveryRunner,
					(void *)&usock) < 0)
		{
			fprintf(stderr, "unable to start neighbour discovery thread\n");
			dtid = 0;
		}

		/* handle external connections main loop */
		e = acceptConnections(sock);

		/* wait for the control runner and discovery thread to have
		 * finished announcing it's going down */
		close(unsock);
		if (ctid != 0)
			pthread_join(ctid, NULL);
		close(usock);
		if (dtid != 0)
			pthread_join(dtid, NULL);
	}

	unlink(lockfile);
	unlink(buf);

	if (e != NO_ERR) {
		/* console */
		fprintf(oerr, "%s: %s\n", argv[0], e);
		MERO_EXIT(1);
		/* logfile */
		fprintf(stderr, "%s\n", e);
	}

	/* we don't need merovingian itself */
	d = d->next;

	/* before we kill all our children, make sure we won't shoot
	 * ourself in the foot because of our SIGCHLD handler */
	sigemptyset(&sa.sa_mask);
	sa.sa_flags = 0;
	sa.sa_handler = SIG_DFL;
	/* ignore error, if it fails, the only thing we can do is fail and
	 * don't kill anything, so risk a race condition with hard crash
	 * here */
	sigaction(SIGCHLD, &sa, NULL);
	/* stop started mservers */
	if (timeout > 0) {
		dpair t = d;
		while (t != NULL) {
			if (pthread_create(&(t->tid), NULL,
						(void *(*)(void *))terminateProcess, (void *)t) < 0)
			{
				fprintf(stderr, "%s: unable to create thread to terminate "
						"database '%s'\n", argv[0], d->dbname);
				t->tid = 0;
			}
			t = t->next;
		}
		/* wait for all processes to be terminated */
		t = d;
		while (t != NULL) {
			if (t->tid != 0 && (argp = pthread_join(t->tid, NULL)) != 0) {
				fprintf(stderr, "failed to wait for termination thread: "
						"%s\n", strerror(argp));
			}
			t = t->next;
		}
	}

	merlog("Merovingian %s stopped", MEROV_VERSION);

	_keepLogging = 0;
	if ((argp = pthread_join(tid, NULL)) != 0) {
		fprintf(oerr, "failed to wait for logging thread: %s\n", strerror(argp));
	}

	close(topdp->out);
	if (topdp->out != topdp->err)
		close(topdp->err);

	/* clean up dbpair structs */
	while (d != NULL) {
		topdp = d->next;
		close(d->out);
		close(d->err);
		if (d->dbname != NULL)
			GDKfree(d->dbname);
		GDKfree(d);
		d = topdp;
	}

	/* the child's return code at this point doesn't matter, as noone
	 * will see it */
	return(0);
}

/* vim:set ts=4 sw=4 noexpandtab: */
