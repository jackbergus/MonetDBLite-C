@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
@' Copyright August 2008- MonetDB B.V.
@' All Rights Reserved.

@f sql_user
@t SQL catalog management
@a N. Nes, F. Groffen
@+ SQL user
The SQL user and authorisation implementation differs per backend.  This
file implements the authorisation and user management as a self
contained engine stored in SQL tables itself.
@h
#ifndef _SQL_USER_H_
#define _SQL_USER_H_
#include "sql_server.h"
#include <sql_backend.h>

sql_server_export void monet4_user_init(backend_functions *be_funcs);

#endif /* _SQL_USER_H_ */

@c
#include "sql_config.h"
#include "sql_user.h"
#include <sql_mvc.h>
#include <sql_statement.h>
#include <sql_privileges.h>

int
sql_find_auth_schema(mvc *m, str auth)
{
	int res = -1;
	ssize_t rid;
	sql_schema *sys = find_sql_schema(m->session->tr, "sys");
	sql_table *users = find_sql_table(sys, "db_users");
	sql_column *users_name = find_sql_column(users, "name");

	rid = table_funcs.column_find_row(m->session->tr, users_name, auth, NULL);

	if (rid >= 0) {
		sql_column *users_schema = find_sql_column(users, "default_schema");
		int *p = (int *) table_funcs.column_find_value(m->session->tr, users_schema, rid);

		if (p) {
			res = *p;
			_DELETE(p);
		}
	}
	return res;
}

char *
monet4_create_user(list *l, char *user, char *passwd, char *fullname, sqlid schema_id, sqlid grantorid) {
	char buf[BUFSIZ];
	size_t user_id;

	/* create two SQL statements that insert the user in the SQL
	 * administration */
	user_id = (size_t)store_next_oid();
	snprintf(buf, BUFSIZ, "INSERT INTO \"sys\".\"db_users\" VALUES('%s','%s','%s',%d);", user, passwd, fullname, schema_id);
	list_append(l, stmt_sql(_strdup(buf)));
	snprintf(buf, BUFSIZ, "INSERT INTO \"sys\".\"auths\" VALUES(" SZFMT ", '%s', %d);", user_id, user, grantorid);
	list_append(l, stmt_sql(_strdup(buf)));

	return(NULL);
}

int
monet4_find_user(ptr mp, char *user)
{
	int res = -1;
	ssize_t rid;
	mvc *m = (mvc *)mp;
	sql_schema *sys = find_sql_schema(m->session->tr, "sys");
	sql_table *auths = find_sql_table(sys, "auths");
	sql_column *auths_name = find_sql_column(auths, "name");

	rid = table_funcs.column_find_row(m->session->tr, auths_name, user, NULL);

	if (rid >= 0) {
		sql_column *auths_id = find_sql_column(auths, "id");
		int *p = (int *) table_funcs.column_find_value(m->session->tr, auths_id, rid);

		if (p) {
			res = *p;
			_DELETE(p);
		}
	}
	return res;
}

void
monet4_create_privileges(ptr _mvc, sql_schema *s)
{
	sql_table *t;
	mvc *m = (mvc *)_mvc;
	sqlid schema_id = 0;

	/* now the authorisation related tables */
	t = mvc_create_table(m, s, "db_users", 1, SQL_PERSIST, 0, -1);
	mvc_create_column_(m, t, "name", "varchar", 1024);
	mvc_create_column_(m, t, "passwd", "varchar", 1024);
	mvc_create_column_(m, t, "fullname", "varchar", 2048);
	mvc_create_column_(m, t, "default_schema", "int", 32);

	/* add monetdb user */
	schema_id = sql_find_schema(m, "sys");
	assert(schema_id >= 0);
	table_funcs.table_insert(m->session->tr, t, "monetdb", "monetdb", "MonetDB Admin", &schema_id);

	t = mvc_create_view(m, s, "users", "SELECT \"name\", \"fullname\", \"default_schema\" FROM \"sys\".\"db_users\";", 1);
	mvc_create_column_(m, t, "name", "varchar", 1024);
	mvc_create_column_(m, t, "fullname", "varchar", 2024);
	mvc_create_column_(m, t, "default_schema", "int", 32);
}

int
monet4_schema_has_user(ptr _mvc, sql_schema *s)
{
	mvc *m = (mvc*)_mvc;
	sql_schema *sys = find_sql_schema(m->session->tr, "sys");
	sql_table *users = find_sql_table(sys, "db_users");
	sql_column *users_schema = find_sql_column(users, "default_schema");
	sqlid schema_id = s->base.id;
	ssize_t rid = table_funcs.column_find_row(m->session->tr, users_schema, &schema_id, NULL);
	if (rid < 0)
		return FALSE;
	return TRUE;
}

int
monet4_alter_user(ptr _mvc, str user, str passwd, sqlid schema_id)
{
	mvc *m = (mvc*)_mvc;
	ssize_t rid;
	sql_schema *sys = find_sql_schema(m->session->tr, "sys");
	sql_table *users = find_sql_table(sys, "db_users");
	sql_column *users_name = find_sql_column(users, "name");

	rid = table_funcs.column_find_row(m->session->tr, users_name, user, NULL);
	if (rid < 0)
		return FALSE;

	if (passwd) {
		sql_column *users_passwd = find_sql_column(users, "passwd");

		table_funcs.column_update_value(m->session->tr, users_passwd, rid, passwd);
	}
	if (schema_id) {
		sql_column *users_schema = find_sql_column(users, "default_schema");

		table_funcs.column_update_value(m->session->tr, users_schema, rid, &schema_id);
	}

	return TRUE;
}

int
monet4_drop_user(ptr _mvc, char * user)
{
	ssize_t rid;
	mvc *m = (mvc*)_mvc;
	sql_schema *sys = find_sql_schema(m->session->tr, "sys");
	sql_table *users = find_sql_table(sys, "db_users");
	sql_column *users_name = find_sql_column(users, "name");

	rid = table_funcs.column_find_row(m->session->tr, users_name, user, NULL);
	if (rid < 0)
		return FALSE;
	table_funcs.table_delete(m->session->tr, users, rid);
	
	return TRUE;	
}

void* 
monet4_schema_user_dependencies(ptr _trans, int schema_id)
{
	rids *A, *U;
	sql_trans *tr = (sql_trans*) _trans;
	sql_schema *s = find_sql_schema(tr, "sys");
	
        sql_table *auths = find_sql_table(s, "auths");
        sql_column *auth_name = find_sql_column(auths, "name");

        sql_table *users = find_sql_table(s, "db_users");
        sql_column *users_name = find_sql_column(users, "name");
        sql_column *users_sch = find_sql_column(users, "default_schema");

	/* select users with give schema */
	U = table_funcs.rids_select(tr, users_sch, &schema_id, &schema_id, NULL);
	/* select all authorization ids */
	A = table_funcs.rids_select(tr, auth_name, NULL, NULL);
	/* join all authorization with the selected users */
	A = table_funcs.rids_join(tr, A, auth_name, U, users_name);
	table_funcs.rids_destroy(U);
	return A;
}


void
monet4_user_init(backend_functions *be_funcs)
{
	be_funcs->fcuser	= &monet4_create_user;
	be_funcs->ffuser	= &monet4_find_user;
	be_funcs->fcrpriv	= &monet4_create_privileges;
	be_funcs->fshuser	= &monet4_schema_has_user;
	be_funcs->fauser	= &monet4_alter_user;
	be_funcs->fduser	= &monet4_drop_user;
	be_funcs->fschuserdep	= &monet4_schema_user_dependencies;
}
