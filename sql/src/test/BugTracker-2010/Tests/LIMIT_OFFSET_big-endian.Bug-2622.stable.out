stdout of test 'LIMIT_OFFSET_big-endian.Bug-2622` in directory 'src/test/BugTracker-2010` itself:


# 21:05:24 >  
# 21:05:24 >   mserver5 "--config=/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/lib64/MonetDB5:/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/lib64/MonetDB5/lib:/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/lib64/MonetDB5/bin" --set "gdk_dbfarm=/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/var/MonetDB5/dbfarm"  --set mapi_open=true --set xrpc_open=true --set mapi_port=38140 --set xrpc_port=48203 --set monet_prompt= --set mal_listing=2 --trace  "--dbname=mTests_src_test_BugTracker-2010" --set mal_listing=0 ; echo ; echo Over..
# 21:05:24 >  

# MonetDB server v5.20.3, based on kernel v1.38.3
# Serving database 'mTests_src_test_BugTracker-2010', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 7.751 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2010 MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://rig.ins.cwi.nl:38140/
# MonetDB/SQL module v2.38.3 loaded
# MonetDB/GIS module v0.18.3 loaded

Ready.

Over..

# 21:05:24 >  
# 21:05:24 >  mclient -lsql -ftest -i -e --host=rig --port=38140 
# 21:05:24 >  

[ 1	]
[ 1	]
[ 1	]
[ 1	]

#PLAN select * from oblo;
% .plan # table_name
% rel # name
% clob # type
% 48 # length
project (
| table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ]
) [ oblo.a ]
#PLAN select * from oblo OFFSET 2;
% .plan # table_name
% rel # name
% clob # type
% 50 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ]
| ) [ oblo.a ]
) [ 2 ]
#PLAN select * from oblo LIMIT 2;
% .plan # table_name
% rel # name
% clob # type
% 50 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ]
| ) [ oblo.a ]
) [ 2 ]
#PLAN select * from oblo LIMIT 1 OFFSET 2;
% .plan # table_name
% rel # name
% clob # type
% 50 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ]
| ) [ oblo.a ]
) [ 1, 2 ]
#PLAN select * from oblo LIMIT 2 OFFSET 1;
% .plan # table_name
% rel # name
% clob # type
% 50 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ]
| ) [ oblo.a ]
) [ 2, 1 ]
#PLAN select * from oblo ORDER BY a;
% .plan # table_name
% rel # name
% clob # type
% 48 # length
project (
| table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ]
) [ oblo.a ASC ] [ oblo.a ]
#PLAN select * from oblo ORDER BY a OFFSET 2;
% .plan # table_name
% rel # name
% clob # type
% 50 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ]
| ) [ oblo.a ASC ] [ oblo.a ]
) [ 2 ]
#PLAN select * from oblo ORDER BY a LIMIT 2;
% .plan # table_name
% rel # name
% clob # type
% 50 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ]
| ) [ oblo.a ASC ] [ oblo.a ]
) [ 2 ]
#PLAN select * from oblo ORDER BY a LIMIT 2 OFFSET 1;
% .plan # table_name
% rel # name
% clob # type
% 50 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ]
| ) [ oblo.a ASC ] [ oblo.a ]
) [ 2, 1 ]
#PLAN select * from oblo ORDER BY a LIMIT 1 OFFSET 2;
% .plan # table_name
% rel # name
% clob # type
% 50 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ]
| ) [ oblo.a ASC ] [ oblo.a ]
) [ 1, 2 ]

#EXPLAIN select * from oblo;
% .explain # table_name
% mal # name
% clob # type
% 0 # length
function user.s1_1{autoCommit=true}():void;
    _2 := sql.mvc();
    _9:bat[:oid,:oid]  := sql.bind_dbat(_2,"sys","oblo",1);
    _12 := bat.reverse(_9);
    _13:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",1);
    _14:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",2);
    _16:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",0);
    _18 := algebra.kdifference(_16,_14);
    _19 := algebra.kunion(_18,_14);
    _20 := algebra.kunion(_19,_13);
    _21 := algebra.kdifference(_20,_12);
    _22 := sql.resultSet(1,1,_21);
    sql.rsColumn(_22,"sys.oblo","a","int",32,0,_21);
    _27 := io.stdout();
    sql.exportResult(_27,_22);
end s1_1;
#EXPLAIN select * from oblo OFFSET 2;
% .explain # table_name
% mal # name
% clob # type
% 0 # length
function user.s2_1{autoCommit=true}():void;
    _2 := sql.mvc();
    _11:bat[:oid,:oid]  := sql.bind_dbat(_2,"sys","oblo",1);
    _14 := bat.reverse(_11);
    _15:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",1);
    _16:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",2);
    _18:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",0);
    _20 := algebra.kdifference(_18,_16);
    _21 := algebra.kunion(_20,_16);
    _22 := algebra.kunion(_21,_15);
    _23 := algebra.kdifference(_22,_14);
    _24 := calc.wrd(nil:wrd);
    _26 := calc.wrd(2:wrd);
    _30 := calc.+(_26,_24);
    _31 := calc.-(_30,1);
    _32 := algebra.slice(_23,_26,_31);
    _33 := bat.mirror(_32);
    _34 := algebra.leftjoin(_33,_23);
    _35 := sql.resultSet(1,1,_34);
    sql.rsColumn(_35,"sys.oblo","a","int",32,0,_34);
    _41 := io.stdout();
    sql.exportResult(_41,_35);
end s2_1;
#EXPLAIN select * from oblo LIMIT 2;
% .explain # table_name
% mal # name
% clob # type
% 0 # length
function user.s3_1{autoCommit=true}():void;
    _2 := sql.mvc();
    _11:bat[:oid,:oid]  := sql.bind_dbat(_2,"sys","oblo",1);
    _14 := bat.reverse(_11);
    _15:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",1);
    _16:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",2);
    _18:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",0);
    _20 := algebra.kdifference(_18,_16);
    _21 := algebra.kunion(_20,_16);
    _22 := algebra.kunion(_21,_15);
    _23 := algebra.kdifference(_22,_14);
    _24 := calc.wrd(2:wrd);
    _26 := calc.wrd(0:wrd);
    _30 := calc.+(_26,_24);
    _31 := calc.-(_30,1);
    _32 := algebra.slice(_23,_26,_31);
    _33 := bat.mirror(_32);
    _34 := algebra.leftjoin(_33,_23);
    _35 := sql.resultSet(1,1,_34);
    sql.rsColumn(_35,"sys.oblo","a","int",32,0,_34);
    _41 := io.stdout();
    sql.exportResult(_41,_35);
end s3_1;
#EXPLAIN select * from oblo LIMIT 1 OFFSET 2;
% .explain # table_name
% mal # name
% clob # type
% 0 # length
function user.s4_1{autoCommit=true}():void;
    _2 := sql.mvc();
    _11:bat[:oid,:oid]  := sql.bind_dbat(_2,"sys","oblo",1);
    _14 := bat.reverse(_11);
    _15:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",1);
    _16:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",2);
    _18:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",0);
    _20 := algebra.kdifference(_18,_16);
    _21 := algebra.kunion(_20,_16);
    _22 := algebra.kunion(_21,_15);
    _23 := algebra.kdifference(_22,_14);
    _24 := calc.wrd(1:wrd);
    _26 := calc.wrd(2:wrd);
    _30 := calc.+(_26,_24);
    _31 := calc.-(_30,1);
    _32 := algebra.slice(_23,_26,_31);
    _33 := bat.mirror(_32);
    _34 := algebra.leftjoin(_33,_23);
    _35 := sql.resultSet(1,1,_34);
    sql.rsColumn(_35,"sys.oblo","a","int",32,0,_34);
    _41 := io.stdout();
    sql.exportResult(_41,_35);
end s4_1;
#EXPLAIN select * from oblo LIMIT 2 OFFSET 1;
% .explain # table_name
% mal # name
% clob # type
% 0 # length
function user.s5_1{autoCommit=true}():void;
    _2 := sql.mvc();
    _11:bat[:oid,:oid]  := sql.bind_dbat(_2,"sys","oblo",1);
    _14 := bat.reverse(_11);
    _15:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",1);
    _16:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",2);
    _18:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",0);
    _20 := algebra.kdifference(_18,_16);
    _21 := algebra.kunion(_20,_16);
    _22 := algebra.kunion(_21,_15);
    _23 := algebra.kdifference(_22,_14);
    _24 := calc.wrd(2:wrd);
    _26 := calc.wrd(1:wrd);
    _30 := calc.+(_26,_24);
    _31 := calc.-(_30,1);
    _32 := algebra.slice(_23,_26,_31);
    _33 := bat.mirror(_32);
    _34 := algebra.leftjoin(_33,_23);
    _35 := sql.resultSet(1,1,_34);
    sql.rsColumn(_35,"sys.oblo","a","int",32,0,_34);
    _41 := io.stdout();
    sql.exportResult(_41,_35);
end s5_1;
#EXPLAIN select * from oblo ORDER BY a;
% .explain # table_name
% mal # name
% clob # type
% 0 # length
function user.s6_1{autoCommit=true}():void;
    _2 := sql.mvc();
    _11:bat[:oid,:oid]  := sql.bind_dbat(_2,"sys","oblo",1);
    _14 := bat.reverse(_11);
    _15:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",1);
    _16:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",2);
    _18:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",0);
    _20 := algebra.kdifference(_18,_16);
    _21 := algebra.kunion(_20,_16);
    _22 := algebra.kunion(_21,_15);
    _23 := algebra.kdifference(_22,_14);
    _24 := calc.oid(0@0);
    _26 := algebra.sortTail(_23);
    _27 := algebra.markT(_26,_24);
    _28 := bat.reverse(_27);
    _29 := algebra.leftjoin(_28,_23);
    _30 := sql.resultSet(1,1,_29);
    sql.rsColumn(_30,"sys.oblo","a","int",32,0,_29);
    _35 := io.stdout();
    sql.exportResult(_35,_30);
end s6_1;
#EXPLAIN select * from oblo ORDER BY a OFFSET 2;
% .explain # table_name
% mal # name
% clob # type
% 0 # length
function user.s7_1{autoCommit=true}():void;
    _2 := sql.mvc();
    _13:bat[:oid,:oid]  := sql.bind_dbat(_2,"sys","oblo",1);
    _16 := bat.reverse(_13);
    _17:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",1);
    _18:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",2);
    _20:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",0);
    _22 := algebra.kdifference(_20,_18);
    _23 := algebra.kunion(_22,_18);
    _24 := algebra.kunion(_23,_17);
    _25 := algebra.kdifference(_24,_16);
    _26 := calc.oid(0@0);
    _28 := algebra.sortTail(_25);
    _29 := algebra.markT(_28,_26);
    _30 := bat.reverse(_29);
    _31 := algebra.leftjoin(_30,_25);
    _32 := calc.wrd(nil:wrd);
    _34 := calc.wrd(2:wrd);
    _40 := calc.+(_34,_32);
    _41 := calc.-(_40,1);
    _42 := algebra.slice(_31,_34,_41);
    _43 := bat.mirror(_42);
    _44 := algebra.leftjoin(_43,_31);
    _45 := sql.resultSet(1,1,_44);
    sql.rsColumn(_45,"sys.oblo","a","int",32,0,_44);
    _50 := io.stdout();
    sql.exportResult(_50,_45);
end s7_1;
#EXPLAIN select * from oblo ORDER BY a LIMIT 2;
% .explain # table_name
% mal # name
% clob # type
% 0 # length
function user.s8_1{autoCommit=true}():void;
    _2 := sql.mvc();
    _11:bat[:oid,:oid]  := sql.bind_dbat(_2,"sys","oblo",1);
    _14 := bat.reverse(_11);
    _15:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",1);
    _16:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",2);
    _18:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",0);
    _20 := algebra.kdifference(_18,_16);
    _21 := algebra.kunion(_20,_16);
    _22 := algebra.kunion(_21,_15);
    _23 := algebra.kdifference(_22,_14);
    _24 := calc.wrd(2:wrd);
    _26 := calc.wrd(0:wrd);
    _28 := calc.+(_26,_24);
    _29 := pqueue.topn_max(_23,_28);
    _30 := bat.mirror(_29);
    _31 := algebra.leftjoin(_30,_23);
    _32 := calc.wrd(2:wrd);
    _33 := calc.wrd(0:wrd);
    _36 := calc.+(_33,_32);
    _37 := calc.-(_36,1);
    _38 := algebra.slice(_31,_33,_37);
    _39 := bat.mirror(_38);
    _40 := algebra.leftjoin(_39,_31);
    _41 := sql.resultSet(1,1,_40);
    sql.rsColumn(_41,"sys.oblo","a","int",32,0,_40);
    _47 := io.stdout();
    sql.exportResult(_47,_41);
end s8_1;
#EXPLAIN select * from oblo ORDER BY a LIMIT 2 OFFSET 1;
% .explain # table_name
% mal # name
% clob # type
% 0 # length
function user.s9_1{autoCommit=true}():void;
    _2 := sql.mvc();
    _11:bat[:oid,:oid]  := sql.bind_dbat(_2,"sys","oblo",1);
    _14 := bat.reverse(_11);
    _15:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",1);
    _16:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",2);
    _18:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",0);
    _20 := algebra.kdifference(_18,_16);
    _21 := algebra.kunion(_20,_16);
    _22 := algebra.kunion(_21,_15);
    _23 := algebra.kdifference(_22,_14);
    _24 := calc.wrd(1:wrd);
    _26 := calc.wrd(2:wrd);
    _28 := calc.+(_26,_24);
    _29 := calc.wrd(0:wrd);
    _31 := calc.+(_29,_28);
    _32 := pqueue.topn_max(_23,_31);
    _33 := bat.mirror(_32);
    _34 := algebra.leftjoin(_33,_23);
    _35 := calc.wrd(2:wrd);
    _36 := calc.wrd(1:wrd);
    _41 := calc.+(_36,_35);
    _42 := calc.-(_41,1);
    _43 := algebra.slice(_34,_36,_42);
    _44 := bat.mirror(_43);
    _45 := algebra.leftjoin(_44,_34);
    _46 := sql.resultSet(1,1,_45);
    sql.rsColumn(_46,"sys.oblo","a","int",32,0,_45);
    _53 := io.stdout();
    sql.exportResult(_53,_46);
end s9_1;
#EXPLAIN select * from oblo ORDER BY a LIMIT 1 OFFSET 2;
% .explain # table_name
% mal # name
% clob # type
% 0 # length
function user.s10_1{autoCommit=true}():void;
    _2 := sql.mvc();
    _11:bat[:oid,:oid]  := sql.bind_dbat(_2,"sys","oblo",1);
    _14 := bat.reverse(_11);
    _15:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",1);
    _16:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",2);
    _18:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",0);
    _20 := algebra.kdifference(_18,_16);
    _21 := algebra.kunion(_20,_16);
    _22 := algebra.kunion(_21,_15);
    _23 := algebra.kdifference(_22,_14);
    _24 := calc.wrd(2:wrd);
    _26 := calc.wrd(1:wrd);
    _28 := calc.+(_26,_24);
    _29 := calc.wrd(0:wrd);
    _31 := calc.+(_29,_28);
    _32 := pqueue.topn_max(_23,_31);
    _33 := bat.mirror(_32);
    _34 := algebra.leftjoin(_33,_23);
    _35 := calc.wrd(1:wrd);
    _36 := calc.wrd(2:wrd);
    _41 := calc.+(_36,_35);
    _42 := calc.-(_41,1);
    _43 := algebra.slice(_34,_36,_42);
    _44 := bat.mirror(_43);
    _45 := algebra.leftjoin(_44,_34);
    _46 := sql.resultSet(1,1,_45);
    sql.rsColumn(_46,"sys.oblo","a","int",32,0,_45);
    _53 := io.stdout();
    sql.exportResult(_53,_46);
end s10_1;

#select * from oblo;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 4	]
[ 3	]
[ 2	]
[ 1	]
#select * from oblo OFFSET 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 2	]
[ 1	]
#select * from oblo LIMIT 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 4	]
[ 3	]
#select * from oblo LIMIT 1 OFFSET 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 2	]
#select * from oblo LIMIT 2 OFFSET 1;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 3	]
[ 2	]
#select * from oblo ORDER BY a;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
[ 4	]
#select * from oblo ORDER BY a OFFSET 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 3	]
[ 4	]
#select * from oblo ORDER BY a LIMIT 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 1	]
[ 2	]
#select * from oblo ORDER BY a LIMIT 2 OFFSET 1;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 2	]
[ 3	]
#select * from oblo ORDER BY a LIMIT 1 OFFSET 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 3	]

# 21:05:24 >  
# 21:05:24 >  Done.
# 21:05:24 >  

