stdout of test 'LIMIT_OFFSET_big-endian.Bug-2622` in directory 'src/test/BugTracker-2010` itself:


# 21:05:24 >  
# 21:05:24 >   mserver5 "--config=/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/lib64/MonetDB5:/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/lib64/MonetDB5/lib:/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/lib64/MonetDB5/bin" --set "gdk_dbfarm=/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/var/MonetDB5/dbfarm"  --set mapi_open=true --set xrpc_open=true --set mapi_port=38140 --set xrpc_port=48203 --set monet_prompt= --set mal_listing=2 --trace  "--dbname=mTests_src_test_BugTracker-2010" --set mal_listing=0 ; echo ; echo Over..
# 21:05:24 >  

# MonetDB server v5.20.3, based on kernel v1.38.3
# Serving database 'mTests_src_test_BugTracker-2010', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 7.751 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2010 MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://rig.ins.cwi.nl:38140/
# MonetDB/SQL module v2.38.3 loaded
# MonetDB/GIS module v0.18.3 loaded

Ready.

Over..

# 21:05:24 >  
# 21:05:24 >  mclient -lsql -ftest -i -e --host=rig --port=38140 
# 21:05:24 >  

[ 1	]
[ 1	]
[ 1	]
[ 1	]

#PLAN select * from oblo;
% .plan # table_name
% rel # name
% clob # type
% 48 # length
project (
| table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ]
) [ oblo.a ]
#PLAN select * from oblo OFFSET 2;
% .plan # table_name
% rel # name
% clob # type
% 50 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ]
| ) [ oblo.a ]
) [ 2 ]
#PLAN select * from oblo LIMIT 2;
% .plan # table_name
% rel # name
% clob # type
% 52 # length
top N (
| project (
| | top N (
| | | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ]
| | ) [ 2 ]
| ) [ oblo.a ]
) [ 2 ]
#PLAN select * from oblo LIMIT 1 OFFSET 2;
% .plan # table_name
% rel # name
% clob # type
% 52 # length
top N (
| project (
| | top N (
| | | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ]
| | ) [ 3 ]
| ) [ oblo.a ]
) [ 1, 2 ]
#PLAN select * from oblo LIMIT 2 OFFSET 1;
% .plan # table_name
% rel # name
% clob # type
% 52 # length
top N (
| project (
| | top N (
| | | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ]
| | ) [ 3 ]
| ) [ oblo.a ]
) [ 2, 1 ]
#PLAN select * from oblo ORDER BY a;
% .plan # table_name
% rel # name
% clob # type
% 48 # length
project (
| table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ]
) [ oblo.a ASC ] [ oblo.a ]
#PLAN select * from oblo ORDER BY a OFFSET 2;
% .plan # table_name
% rel # name
% clob # type
% 50 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ]
| ) [ oblo.a ASC ] [ oblo.a ]
) [ 2 ]
#PLAN select * from oblo ORDER BY a LIMIT 2;
% .plan # table_name
% rel # name
% clob # type
% 50 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ]
| ) [ oblo.a ASC ] [ oblo.a ]
) [ 2 ]
#PLAN select * from oblo ORDER BY a LIMIT 2 OFFSET 1;
% .plan # table_name
% rel # name
% clob # type
% 50 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ]
| ) [ oblo.a ASC ] [ oblo.a ]
) [ 2, 1 ]
#PLAN select * from oblo ORDER BY a LIMIT 1 OFFSET 2;
% .plan # table_name
% rel # name
% clob # type
% 50 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ]
| ) [ oblo.a ASC ] [ oblo.a ]
) [ 1, 2 ]

#EXPLAIN select * from oblo;
% .explain # table_name
% mal # name
% clob # type
% 0 # length
function user.s1_1{autoCommit=true}():void;
    _2 := sql.mvc();
    _3:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",0);
    _8:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",2);
    _10 := algebra.kdifference(_3,_8);
    _11 := algebra.kunion(_10,_8);
    _12:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",1);
    _14 := algebra.kunion(_11,_12);
    _15:bat[:oid,:oid]  := sql.bind_dbat(_2,"sys","oblo",1);
    _16 := bat.reverse(_15);
    _17 := algebra.kdifference(_14,_16);
    _18 := sql.resultSet(1,1,_17);
    sql.rsColumn(_18,"sys.oblo","a","int",32,0,_17);
    _23 := io.stdout();
    sql.exportResult(_23,_18);
end s1_1;
#EXPLAIN select * from oblo OFFSET 2;
% .explain # table_name
% mal # name
% clob # type
% 0 # length
function user.s2_1{autoCommit=true}():void;
    _2 := sql.mvc();
    _3:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",0);
    _8:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",2);
    _10 := algebra.kdifference(_3,_8);
    _11 := algebra.kunion(_10,_8);
    _12:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",1);
    _14 := algebra.kunion(_11,_12);
    _15:bat[:oid,:oid]  := sql.bind_dbat(_2,"sys","oblo",1);
    _16 := bat.reverse(_15);
    _17 := algebra.kdifference(_14,_16);
    _18 := calc.wrd(2:wrd);
    _20 := calc.wrd(nil:wrd);
    _22 := calc.+(_18,_20);
    _23 := calc.-(_22,1);
    _24 := algebra.slice(_17,_18,_23);
    _25 := bat.mirror(_24);
    _26 := algebra.leftjoin(_25,_17);
    _27 := sql.resultSet(1,1,_26);
    sql.rsColumn(_27,"sys.oblo","a","int",32,0,_26);
    _32 := io.stdout();
    sql.exportResult(_32,_27);
end s2_1;
#EXPLAIN select * from oblo LIMIT 2;
% .explain # table_name
% mal # name
% clob # type
% 0 # length
function user.s3_1{autoCommit=true}():void;
    _2 := sql.mvc();
    _3:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",0);
    _8:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",2);
    _10 := algebra.kdifference(_3,_8);
    _11 := algebra.kunion(_10,_8);
    _12:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",1);
    _14 := algebra.kunion(_11,_12);
    _15:bat[:oid,:oid]  := sql.bind_dbat(_2,"sys","oblo",1);
    _16 := bat.reverse(_15);
    _17 := algebra.kdifference(_14,_16);
    _18 := calc.wrd(0:wrd);
    _20 := calc.wrd(2:wrd);
    _22 := calc.+(_18,_20);
    _23 := calc.-(_22,1);
    _24 := algebra.slice(_17,_18,_23);
    _25 := bat.mirror(_24);
    _26 := algebra.leftjoin(_25,_17);
    _27 := calc.wrd(0:wrd);
    _28 := calc.wrd(2:wrd);
    _29 := calc.+(_27,_28);
    _30 := calc.-(_29,1);
    _31 := algebra.slice(_26,_27,_30);
    _32 := bat.mirror(_31);
    _33 := algebra.leftjoin(_32,_26);
    _34 := sql.resultSet(1,1,_33);
    sql.rsColumn(_34,"sys.oblo","a","int",32,0,_33);
    _39 := io.stdout();
    sql.exportResult(_39,_34);
end s3_1;
#EXPLAIN select * from oblo LIMIT 1 OFFSET 2;
% .explain # table_name
% mal # name
% clob # type
% 0 # length
function user.s4_1{autoCommit=true}():void;
    _2 := sql.mvc();
    _3:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",0);
    _8:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",2);
    _10 := algebra.kdifference(_3,_8);
    _11 := algebra.kunion(_10,_8);
    _12:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",1);
    _14 := algebra.kunion(_11,_12);
    _15:bat[:oid,:oid]  := sql.bind_dbat(_2,"sys","oblo",1);
    _16 := bat.reverse(_15);
    _17 := algebra.kdifference(_14,_16);
    _18 := calc.wrd(0:wrd);
    _20 := calc.wrd(3:wrd);
    _22 := calc.+(_18,_20);
    _23 := calc.-(_22,1);
    _24 := algebra.slice(_17,_18,_23);
    _25 := bat.mirror(_24);
    _26 := algebra.leftjoin(_25,_17);
    _27 := calc.wrd(2:wrd);
    _29 := calc.wrd(1:wrd);
    _31 := calc.+(_27,_29);
    _32 := calc.-(_31,1);
    _33 := algebra.slice(_26,_27,_32);
    _34 := bat.mirror(_33);
    _35 := algebra.leftjoin(_34,_26);
    _36 := sql.resultSet(1,1,_35);
    sql.rsColumn(_36,"sys.oblo","a","int",32,0,_35);
    _43 := io.stdout();
    sql.exportResult(_43,_36);
end s4_1;
#EXPLAIN select * from oblo LIMIT 2 OFFSET 1;
% .explain # table_name
% mal # name
% clob # type
% 0 # length
function user.s5_1{autoCommit=true}():void;
    _2 := sql.mvc();
    _3:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",0);
    _8:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",2);
    _10 := algebra.kdifference(_3,_8);
    _11 := algebra.kunion(_10,_8);
    _12:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",1);
    _14 := algebra.kunion(_11,_12);
    _15:bat[:oid,:oid]  := sql.bind_dbat(_2,"sys","oblo",1);
    _16 := bat.reverse(_15);
    _17 := algebra.kdifference(_14,_16);
    _18 := calc.wrd(0:wrd);
    _20 := calc.wrd(3:wrd);
    _22 := calc.+(_18,_20);
    _23 := calc.-(_22,1);
    _24 := algebra.slice(_17,_18,_23);
    _25 := bat.mirror(_24);
    _26 := algebra.leftjoin(_25,_17);
    _27 := calc.wrd(1:wrd);
    _29 := calc.wrd(2:wrd);
    _31 := calc.+(_27,_29);
    _32 := calc.-(_31,1);
    _33 := algebra.slice(_26,_27,_32);
    _34 := bat.mirror(_33);
    _35 := algebra.leftjoin(_34,_26);
    _36 := sql.resultSet(1,1,_35);
    sql.rsColumn(_36,"sys.oblo","a","int",32,0,_35);
    _43 := io.stdout();
    sql.exportResult(_43,_36);
end s5_1;
#EXPLAIN select * from oblo ORDER BY a;
% .explain # table_name
% mal # name
% clob # type
% 0 # length
function user.s6_1{autoCommit=true}():void;
    _2 := sql.mvc();
    _3:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",0);
    _8:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",2);
    _10 := algebra.kdifference(_3,_8);
    _11 := algebra.kunion(_10,_8);
    _12:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",1);
    _14 := algebra.kunion(_11,_12);
    _15:bat[:oid,:oid]  := sql.bind_dbat(_2,"sys","oblo",1);
    _16 := bat.reverse(_15);
    _17 := algebra.kdifference(_14,_16);
    _18 := algebra.sortTail(_17);
    _19 := calc.oid(0@0);
    _21 := algebra.markT(_18,_19);
    _22 := bat.reverse(_21);
    _23 := algebra.leftjoin(_22,_17);
    _24 := sql.resultSet(1,1,_23);
    sql.rsColumn(_24,"sys.oblo","a","int",32,0,_23);
    _29 := io.stdout();
    sql.exportResult(_29,_24);
end s6_1;
#EXPLAIN select * from oblo ORDER BY a OFFSET 2;
% .explain # table_name
% mal # name
% clob # type
% 0 # length
function user.s7_1{autoCommit=true}():void;
    _2 := sql.mvc();
    _3:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",0);
    _8:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",2);
    _10 := algebra.kdifference(_3,_8);
    _11 := algebra.kunion(_10,_8);
    _12:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",1);
    _14 := algebra.kunion(_11,_12);
    _15:bat[:oid,:oid]  := sql.bind_dbat(_2,"sys","oblo",1);
    _16 := bat.reverse(_15);
    _17 := algebra.kdifference(_14,_16);
    _18 := algebra.sortTail(_17);
    _19 := calc.oid(0@0);
    _21 := algebra.markT(_18,_19);
    _22 := bat.reverse(_21);
    _23 := algebra.leftjoin(_22,_17);
    _24 := calc.wrd(2:wrd);
    _26 := calc.wrd(nil:wrd);
    _28 := calc.+(_24,_26);
    _29 := calc.-(_28,1);
    _30 := algebra.slice(_23,_24,_29);
    _31 := bat.mirror(_30);
    _32 := algebra.leftjoin(_31,_23);
    _33 := sql.resultSet(1,1,_32);
    sql.rsColumn(_33,"sys.oblo","a","int",32,0,_32);
    _38 := io.stdout();
    sql.exportResult(_38,_33);
end s7_1;
#EXPLAIN select * from oblo ORDER BY a LIMIT 2;
% .explain # table_name
% mal # name
% clob # type
% 0 # length
function user.s8_1{autoCommit=true}():void;
    _2 := sql.mvc();
    _3:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",0);
    _8:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",2);
    _10 := algebra.kdifference(_3,_8);
    _11 := algebra.kunion(_10,_8);
    _12:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",1);
    _14 := algebra.kunion(_11,_12);
    _15:bat[:oid,:oid]  := sql.bind_dbat(_2,"sys","oblo",1);
    _16 := bat.reverse(_15);
    _17 := algebra.kdifference(_14,_16);
    _18 := calc.wrd(0:wrd);
    _20 := calc.wrd(2:wrd);
    _22 := calc.+(_18,_20);
    _23 := pqueue.topn_max(_17,_22);
    _24 := bat.mirror(_23);
    _25 := algebra.leftjoin(_24,_17);
    _26 := calc.wrd(0:wrd);
    _27 := calc.wrd(2:wrd);
    _28 := calc.+(_26,_27);
    _29 := calc.-(_28,1);
    _30 := algebra.slice(_25,_26,_29);
    _31 := bat.mirror(_30);
    _32 := algebra.leftjoin(_31,_25);
    _33 := sql.resultSet(1,1,_32);
    sql.rsColumn(_33,"sys.oblo","a","int",32,0,_32);
    _38 := io.stdout();
    sql.exportResult(_38,_33);
end s8_1;
#EXPLAIN select * from oblo ORDER BY a LIMIT 2 OFFSET 1;
% .explain # table_name
% mal # name
% clob # type
% 0 # length
function user.s9_1{autoCommit=true}():void;
    _2 := sql.mvc();
    _3:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",0);
    _8:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",2);
    _10 := algebra.kdifference(_3,_8);
    _11 := algebra.kunion(_10,_8);
    _12:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",1);
    _14 := algebra.kunion(_11,_12);
    _15:bat[:oid,:oid]  := sql.bind_dbat(_2,"sys","oblo",1);
    _16 := bat.reverse(_15);
    _17 := algebra.kdifference(_14,_16);
    _18 := calc.wrd(0:wrd);
    _20 := calc.wrd(2:wrd);
    _22 := calc.wrd(1:wrd);
    _24 := calc.+(_20,_22);
    _25 := calc.+(_18,_24);
    _26 := pqueue.topn_max(_17,_25);
    _27 := bat.mirror(_26);
    _28 := algebra.leftjoin(_27,_17);
    _29 := calc.wrd(1:wrd);
    _30 := calc.wrd(2:wrd);
    _31 := calc.+(_29,_30);
    _32 := calc.-(_31,1);
    _33 := algebra.slice(_28,_29,_32);
    _34 := bat.mirror(_33);
    _35 := algebra.leftjoin(_34,_28);
    _36 := sql.resultSet(1,1,_35);
    sql.rsColumn(_36,"sys.oblo","a","int",32,0,_35);
    _43 := io.stdout();
    sql.exportResult(_43,_36);
end s9_1;
#EXPLAIN select * from oblo ORDER BY a LIMIT 1 OFFSET 2;
% .explain # table_name
% mal # name
% clob # type
% 0 # length
function user.s10_1{autoCommit=true}():void;
    _2 := sql.mvc();
    _3:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",0);
    _8:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",2);
    _10 := algebra.kdifference(_3,_8);
    _11 := algebra.kunion(_10,_8);
    _12:bat[:oid,:int]  := sql.bind(_2,"sys","oblo","a",1);
    _14 := algebra.kunion(_11,_12);
    _15:bat[:oid,:oid]  := sql.bind_dbat(_2,"sys","oblo",1);
    _16 := bat.reverse(_15);
    _17 := algebra.kdifference(_14,_16);
    _18 := calc.wrd(0:wrd);
    _20 := calc.wrd(1:wrd);
    _22 := calc.wrd(2:wrd);
    _24 := calc.+(_20,_22);
    _25 := calc.+(_18,_24);
    _26 := pqueue.topn_max(_17,_25);
    _27 := bat.mirror(_26);
    _28 := algebra.leftjoin(_27,_17);
    _29 := calc.wrd(2:wrd);
    _30 := calc.wrd(1:wrd);
    _31 := calc.+(_29,_30);
    _32 := calc.-(_31,1);
    _33 := algebra.slice(_28,_29,_32);
    _34 := bat.mirror(_33);
    _35 := algebra.leftjoin(_34,_28);
    _36 := sql.resultSet(1,1,_35);
    sql.rsColumn(_36,"sys.oblo","a","int",32,0,_35);
    _43 := io.stdout();
    sql.exportResult(_43,_36);
end s10_1;

#select * from oblo;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 4	]
[ 3	]
[ 2	]
[ 1	]
#select * from oblo OFFSET 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 2	]
[ 1	]
#select * from oblo LIMIT 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 4	]
[ 3	]
#select * from oblo LIMIT 1 OFFSET 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 2	]
#select * from oblo LIMIT 2 OFFSET 1;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 3	]
[ 2	]
#select * from oblo ORDER BY a;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
[ 4	]
#select * from oblo ORDER BY a OFFSET 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 3	]
[ 4	]
#select * from oblo ORDER BY a LIMIT 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 1	]
[ 2	]
#select * from oblo ORDER BY a LIMIT 2 OFFSET 1;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 2	]
[ 3	]
#select * from oblo ORDER BY a LIMIT 1 OFFSET 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 3	]

# 21:05:24 >  
# 21:05:24 >  Done.
# 21:05:24 >  

