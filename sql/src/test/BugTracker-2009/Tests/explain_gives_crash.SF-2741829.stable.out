stdout of test 'explain_gives_crash.SF-2741829` in directory 'src/test/BugTracker-2009` itself:


# 22:45:54 >  
# 22:45:54 >   mserver5 "--config=/ufs/niels/scratch/rc/Linux-x86_64/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/niels/scratch/rc/Linux-x86_64/lib/MonetDB5:/ufs/niels/scratch/rc/Linux-x86_64/lib/MonetDB5/lib:/ufs/niels/scratch/rc/Linux-x86_64/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/niels/scratch/rc/Linux-x86_64/var/MonetDB5/dbfarm"    --set mapi_open=true --set xrpc_open=true --set mapi_port=35519 --set xrpc_port=48894 --set monet_prompt= --trace  "--dbname=mTests_src_test_BugTracker-2009" --set mal_listing=0 "--dbinit= include sql;" ; echo ; echo Over..
# 22:45:54 >  

# MonetDB server v5.12.0, based on kernel v1.30.0
# Serving database 'mTests_src_test_BugTracker-2009', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2009 MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://alf.ins.cwi.nl:35519/
# MonetDB/SQL module v2.30.0 loaded

Ready.
#function user.main():void;
#    clients.quit();
#end main;

Over..

# 21:13:40 >  
# 21:13:40 >  mclient -lsql -i --host=alf --port=39638 
# 21:13:40 >  

#~BeginVariableOutput~#
function user.s1_1{autoCommit=true}():void;
"    sql.catalog(28\,\"sys\"\,140219811293400\,0);"
barrier _46 := language.dataflow();
"    _6:bat[:oid\,:int]  := sql.bind(\"sys\"\,\"blabla\"\,\"id\"\,0);"
    _9 := algebra.selectNotNil(_6);
"    _6:bat[:oid\,:int]  := nil:BAT;"
"    _10:bat[:oid\,:oid]  := sql.bind_dbat(\"sys\"\,\"blabla\"\,1);"
    _12 := bat.reverse(_10);
"    _10:bat[:oid\,:oid]  := nil:BAT;"
"    _13 := algebra.kdifference(_9\,_12);"
    _9 := nil:BAT;
    _12 := nil:BAT;
"    (ext20\,grp18) := group.new(_13);"
    _13 := nil:BAT;
    _16 := bat.mirror(ext20);
    ext20 := nil:BAT;
"    _17:bat[:oid\,:wrd]  := aggr.count(grp18\,grp18\,_16);"
    grp18 := nil:BAT;
    _16 := nil:BAT;
    _18 := aggr.count(_17);
    _19:wrd  := aggr.sum(_17);
"    _17:bat[:oid\,:wrd]  := nil:BAT;"
    _20 := calc.isnil(_19);
"    _22 := calc.ifthenelse(_20\,0:wrd\,_19);"
"    _23 := calc.!=(_18\,_22);"
exit _46;
"    sql.assert(_23\,\"UPDATE: UNIQUE constraint 'blabla.dada' violated\");"
end s1_1;
function user.s2_1{autoCommit=true}():void;
"    sql.catalog(28\,\"sys\"\,140219811563080\,0);"
barrier _46 := language.dataflow();
"    _6:bat[:oid\,:int]  := sql.bind(\"sys\"\,\"blabla\"\,\"id\"\,0);"
    _9 := algebra.selectNotNil(_6);
"    _6:bat[:oid\,:int]  := nil:BAT;"
"    _10:bat[:oid\,:oid]  := sql.bind_dbat(\"sys\"\,\"blabla\"\,1);"
    _12 := bat.reverse(_10);
"    _10:bat[:oid\,:oid]  := nil:BAT;"
"    _13 := algebra.kdifference(_9\,_12);"
    _9 := nil:BAT;
    _12 := nil:BAT;
"    (ext20\,grp18) := group.new(_13);"
    _13 := nil:BAT;
    _16 := bat.mirror(ext20);
    ext20 := nil:BAT;
"    _17:bat[:oid\,:wrd]  := aggr.count(grp18\,grp18\,_16);"
    grp18 := nil:BAT;
    _16 := nil:BAT;
    _18 := aggr.count(_17);
    _19:wrd  := aggr.sum(_17);
"    _17:bat[:oid\,:wrd]  := nil:BAT;"
    _20 := calc.isnil(_19);
"    _22 := calc.ifthenelse(_20\,0:wrd\,_19);"
"    _23 := calc.!=(_18\,_22);"
exit _46;
"    sql.assert(_23\,\"UPDATE: UNIQUE constraint 'blabla.dada' violated\");"
end s2_1;
#~EndVariableOutput~#
#~BeginVariableOutput~#
function user.s1_1{autoCommit=true}():void;
"    sql.catalog(28\,\"sys\"\,140219810609496\,0);"
barrier _46 := language.dataflow();
"    _6:bat[:oid\,:int]  := sql.bind(\"sys\"\,\"blabla\"\,\"id\"\,0);"
    _9 := algebra.selectNotNil(_6);
"    _6:bat[:oid\,:int]  := nil:BAT;"
"    _10:bat[:oid\,:oid]  := sql.bind_dbat(\"sys\"\,\"blabla\"\,1);"
    _12 := bat.reverse(_10);
"    _10:bat[:oid\,:oid]  := nil:BAT;"
"    _13 := algebra.kdifference(_9\,_12);"
    _9 := nil:BAT;
    _12 := nil:BAT;
"    (ext20\,grp18) := group.new(_13);"
    _13 := nil:BAT;
    _16 := bat.mirror(ext20);
    ext20 := nil:BAT;
"    _17:bat[:oid\,:wrd]  := aggr.count(grp18\,grp18\,_16);"
    grp18 := nil:BAT;
    _16 := nil:BAT;
    _18 := aggr.count(_17);
    _19:wrd  := aggr.sum(_17);
"    _17:bat[:oid\,:wrd]  := nil:BAT;"
    _20 := calc.isnil(_19);
"    _22 := calc.ifthenelse(_20\,0:wrd\,_19);"
"    _23 := calc.!=(_18\,_22);"
exit _46;
"    sql.assert(_23\,\"UPDATE: UNIQUE constraint 'blabla.dada' violated\");"
end s1_1;
#~EndVariableOutput~#

# 11:37:28 >  
# 11:37:28 >  Done.
# 11:37:28 >  

