@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
@' Copyright August 2008-2009 MonetDB B.V.
@' All Rights Reserved.

@f sql_updates
@a N.J. Nes
@* 

@h
#ifndef _SQL_UPDATES_H_
#define _SQL_UPDATES_H_

#include <stdio.h>
#include <stdarg.h>
#include <sql_list.h>
#include "sql_symbol.h"
#include "sql_statement.h"

extern stmt *updates(mvc *sql, symbol *sym);

#endif /*_SQL_UPDATES_H_*/
@c

#include "sql_config.h"
#include "sql_updates.h"
#include "sql_parser.h"
#include "sql_semantic.h"
#include "sql_privileges.h"

#include "rel_subquery.h"
#include "rel_select.h"

static stmt *
copyto(mvc *sql, symbol *sq, str filename, dlist *seps, str null_string)
{
	char *tsep = seps->h->data.sval;
	char *rsep = seps->h->next->data.sval;
	char *ssep = (seps->h->next->next)?seps->h->next->next->data.sval:"\"";
	char *ns = (null_string)?null_string:"null";
	stmt *s = flat_subquery(sql, sq);
	stmt *fname = (filename) ? stmt_atom_string(_strdup(filename)) : NULL;
	list *slist;

	if (!s) 
		return NULL;

	slist = create_stmt_list();
	list_append(slist, stmt_export(s, _strdup(tsep), _strdup(rsep), _strdup(ssep), _strdup(ns), fname));
	if (s->type == st_list && ((stmt*)s->op1.lval->h->data)->nrcols != 0) {
		stmt *cnt = stmt_aggr(stmt_dup(s->op1.lval->h->data), NULL, sql_bind_aggr(sql->session->schema, "count", NULL), 1);
		list_append(slist, stmt_affected_rows(cnt));
	} else {
		list_append(slist, stmt_affected_rows(stmt_atom_wrd(1)));
	}
	return stmt_list(slist);
}

stmt *
updates(mvc *sql, symbol *s)
{
	stmt *ret = NULL;

	switch (s->token) {
	case SQL_COPYTO:
	{
		dlist *l = s->data.lval;

		ret = copyto(sql, l->h->data.sym, l->h->next->data.sval, l->h->next->next->data.lval, l->h->next->next->next->data.sval);
		sql->type = Q_UPDATE;
	}
		break;
	default:
		return sql_error(sql, 01, "Updates statement unknown Symbol(" PTRFMT ")->token = %s", PTRFMTCAST s, token2string(s->token));
	}

	return ret;
}
