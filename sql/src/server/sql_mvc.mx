@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2007 CWI.
@' All Rights Reserved.

@f sql_mvc
@a N.J. Nes
@* 

@h
/* multi version catalog */
#ifndef _SQL_MVC_H
#define _SQL_MVC_H

#include <sql_mem.h>
#include <gdk.h>
#include <stdarg.h>
#include <sql_scan.h>
#include <sql_query.h>
#include <sql_list.h>
#include <sql_types.h>
#include <sql_backend.h>
#include <sql_catalog.h>
#include <sql_storage.h>
#include <stream.h>
#include <sql_keyword.h>
#include <sql_atom.h>

#define ERRSIZE 8192

typedef enum modes_t {
	m_normal = 0,
	m_prepare = 1,
	m_execute = 2,
	m_explain = 3,
	m_profile = 4,
	m_debug = 5,
	m_trace = 6,
	m_inplace = 7
} modes_t;

#define CACHE_MODE(m) (m==m_normal||m==m_profile||m==m_debug||m==m_trace)

typedef struct sql_var {
	struct stmt *s;
	char *name;
	ValRecord value;
	sql_subtype type;
	int view;
} sql_var;

#define MAXSTATS 8

typedef struct mvc {
	char errstr[ERRSIZE];

	sql_allocator *sa;
	struct qc *qc;
	int clientid;		/* id of the owner */
	struct scanner scanner;

	list *params;
	sql_var *vars; 		/* stack of variables, frames are simply a
				   NULL in the var stack 
					(sometimes with name (label) )*/ 
	int topvars; 
	int sizevars;
	int frame;
	atom *args[MAXPARAMS];
	int argc;
	struct symbol *sym;

	int user_id;
	int role_id;

	/* current session variables */
	int timezone;		/* minutes west of UTC */
	int cache;		/* some queries should not be cached ! */
	int reply_size;		/* reply size */ 
	int debug;

	modes_t mode;		
	modes_t explain; 	/* set explain starts after that statement */ 

	sql_session *session;	

	int type;		/* query type */
	unsigned int depth;	/* depth of the current expression */
	int label;		/* numbers for relational projection labels */
	list *called_triggers;  /* protection against recursive triggers */

	int opt_stats[MAXSTATS];/* keep statistics about optimizer rewrites */

	int result_id;
	res_table *results;
} mvc;

extern int mvc_init(int debug, backend_stack stk);
extern void mvc_exit(void);
extern void mvc_logmanager(void);

extern mvc *mvc_create(int clientid, backend_stack stk, int debug, bstream *rs, stream *ws);
extern void mvc_reset(mvc *m, bstream *rs, stream *ws, int debug, int globalvars);
extern void mvc_destroy(mvc *c);

extern int mvc_status(mvc *c);
extern int mvc_type(mvc *c);

/* since Savepoints and transactions are related the 
 * commit function includes the savepoint creation.
 * Rollbacks can be either full or until a given savepoint. 
 * The special mvc_release can be used to release savepoints. 
 */
extern int mvc_trans(mvc *c);
extern int mvc_commit(mvc *c, int chain, char *name);
extern int mvc_rollback(mvc *c, int chain, char *name);
extern int mvc_release(mvc *c, char *name);

extern sql_type *mvc_bind_type(mvc *sql, char *name);
extern sql_type *schema_bind_type(mvc *sql, sql_schema * s, char *name);
extern sql_func *mvc_bind_func(mvc *sql, char *name);
extern sql_func *schema_bind_func(mvc *sql, sql_schema * s, char *name);

extern sql_schema *mvc_bind_schema(mvc *c, char *sname);
extern sql_table *mvc_bind_table(mvc *c, sql_schema *s, char *tname);
extern sql_column *mvc_bind_column(mvc *c, sql_table *t, char *cname);
extern sql_column *mvc_first_column(mvc *c, sql_table *t);
extern sql_idx *mvc_bind_idx(mvc *c, sql_schema *s, char *iname);
extern sql_key *mvc_bind_key(mvc *c, sql_schema *s, char *kname);
extern sql_key *mvc_bind_ukey(sql_table *t, list *cols);
extern sql_trigger *mvc_bind_trigger(mvc *c, sql_schema *s, char *tname);

extern sql_type *mvc_create_type(mvc *sql, sql_schema *s, char *sqlname, int digits, int scale, int radix, char *impl);
extern sql_func *mvc_create_func(mvc *sql, sql_schema *s, char *name, list *args, sql_subtype *res, bit issql, bit aggr, char *mod, char *impl);
extern void mvc_drop_func(mvc *c, sql_schema *s, char *name, int cascade);

extern void mvc_drop_schema(mvc *c, char *name);
extern sql_schema *mvc_create_schema(mvc *m, char *name, int auth_id, int owner);
extern size_t mvc_clear_table(mvc *m, sql_table *t);
extern void mvc_drop_table(mvc *c, sql_schema *s, char *name, int cascade);
extern sql_table *mvc_create_table(mvc *c, sql_schema *s, char *name, bit system, int persistence, int commit_action, int sz);
extern sql_table *mvc_create_view(mvc *c, sql_schema *s, char *name, char *sql, bit system);
extern sql_table *mvc_create_generated(mvc *c, sql_schema *s, char *name, char *sql, bit system);

extern void mvc_drop_column(mvc *c, sql_table *t, char *name);
extern sql_column *mvc_create_column(mvc *c, sql_table *t, char *name, sql_subtype *type);
extern sql_column *mvc_create_column_(mvc *c, sql_table *t, char *name, char *type, int digits);
extern sql_column *mvc_null(mvc *c, sql_column *col, int flag);
extern sql_column *mvc_default(mvc *c, sql_column *col, char *val);

extern sql_key *mvc_create_key(mvc *m, sql_table *t, char *kname, key_type kt, sql_key *rk);
extern sql_key *mvc_create_kc(mvc *m, sql_key *k, sql_column *c);

extern void mvc_drop_key(mvc *c, sql_schema *s, char *kname);

extern sql_idx *mvc_create_idx(mvc *m, sql_table *t, char *iname, idx_type it);
extern sql_idx *mvc_create_ic(mvc *m, sql_idx * i, sql_column *c);
extern void mvc_drop_idx(mvc *c, sql_schema *s, char *iname);

extern sql_trigger * mvc_create_trigger(mvc *m, sql_table *t, char *name, sht time, sht orientation, sht event, char *old_name, char *new_name, char *condition, char *statement );
extern sql_trigger * mvc_create_tc(mvc *m, sql_trigger * i, sql_column *c /*, extra options such as trunc */ );
extern void mvc_drop_trigger(mvc *m, sql_schema *s, char *name);

/*dependency control*/
extern void mvc_create_dependency(mvc *m, int id, int depend_id, int depend_type);
extern void mvc_drop_dependencies(mvc *m, int depend_id);
extern void mvc_create_dependencies(mvc *m, list *id_l, sqlid depend_id, int dep_type);
extern int mvc_check_dependency(mvc * m, int id, int type);

/* variable management */
extern void stack_push_var(mvc *sql, char *name, struct stmt *var, sql_subtype *type);
extern void stack_push_view(mvc *sql, char *name, struct stmt *var);
extern void stack_push_frame(mvc *sql, char *name);
extern void stack_pop_frame(mvc *sql);
extern void stack_pop_until(mvc *sql, int top);
extern sql_subtype *stack_find_type(mvc *sql, char *name);
extern struct stmt *stack_find_table(mvc *sql, char *name);
extern struct stmt *stack_find_var(mvc *sql, char *name);
/* find var in current frame */
extern int frame_find_var(mvc *sql, char *name);
extern int stack_find_frame(mvc *sql, char *name);

extern ValRecord * stack_get_var(mvc *sql, char *name);
extern void stack_set_var(mvc *sql, char *name, ValRecord *v);

extern str stack_get_string(mvc *sql, char *name);
extern void stack_set_string(mvc *sql, char *name, str v);
extern lng stack_get_number(mvc *sql, char *name);
extern void stack_set_number(mvc *sql, char *name, lng v);

#endif /*_SQL_MVC_H*/
@c

/* multi version catalog */

#include "sql_config.h"
#include <gdk.h>

#include "sql_mvc.h"
#include "sql_qc.h"
#include "sql_statement.h"
#include "sql_types.h"
#include "sql_env.h"
#include "sql_semantic.h"
#include "sql_privileges.h"

static int mvc_debug = 0;

int
mvc_init(int debug, backend_stack stk)
{
	int first = 0;
	char *logdir = GDKgetenv("sql_logdir");
	char *dbname = GDKgetenv("gdk_dbname");

	assert(logdir && dbname);

	mvc_debug = debug;
	if (mvc_debug)
		fprintf(stderr, "mvc_init logdir %s%c%s\n", logdir, DIR_SEP, dbname);
	keyword_init();
	scanner_init_keywords();

	if ((first = store_init(debug, logdir, dbname, stk)) < 0) {
		fprintf(stderr, "!mvc_init: unable to create system tables\n");
		return -1;
	}
	if (first) {
		sql_schema *s;
		sql_table *t;
		mvc *m = mvc_create(0, stk, 0, NULL, NULL);

		/* disable caching */
		m->cache = 0;
		mvc_trans(m);
		s = m->session->schema = mvc_bind_schema(m, "sys");
		assert(m->session->schema != NULL);

		t = mvc_create_view(m, s, "tables", "SELECT * FROM (SELECT p.*, 0 AS \"temporary\" FROM \"sys\".\"_tables\" AS p UNION ALL SELECT t.*, 1 AS \"temporary\" FROM \"tmp\".\"_tables\" AS t) AS tables where tables.type < 2;", 1);
		mvc_create_column_(m, t, "id", "int", 32);
		mvc_create_column_(m, t, "name", "varchar", 1024);
		mvc_create_column_(m, t, "schema_id", "int", 32);
		mvc_create_column_(m, t, "query", "varchar", 2048);
		mvc_create_column_(m, t, "type", "smallint", 16);
		mvc_create_column_(m, t, "system", "boolean", 1);
		mvc_create_column_(m, t, "commit_action", "smallint", 16);
		mvc_create_column_(m, t, "temporary", "smallint", 16);

		t = mvc_create_view(m, s, "columns", "SELECT * FROM (SELECT p.* FROM \"sys\".\"_columns\" AS p UNION ALL SELECT t.* FROM \"tmp\".\"_columns\" AS t) AS columns;", 1);
		mvc_create_column_(m, t, "id", "int", 32);
		mvc_create_column_(m, t, "name", "varchar", 1024);
		mvc_create_column_(m, t, "type", "varchar", 1024);
		mvc_create_column_(m, t, "type_digits", "int", 32);
		mvc_create_column_(m, t, "type_scale", "int", 32);
		mvc_create_column_(m, t, "table_id", "int", 32);
		mvc_create_column_(m, t, "default", "varchar", 2048);
		mvc_create_column_(m, t, "null", "boolean", 1);
		mvc_create_column_(m, t, "number", "int", 32);

		sql_create_env(m, s);
		sql_create_privileges(m, s);

		s = m->session->schema = mvc_bind_schema(m, "tmp");
		assert(m->session->schema != NULL);
		sql_create_profile(m, s);

		if (mvc_commit(m, 0, NULL) < 0) {
			fprintf(stderr, "!mvc_init: unable to commit system tables\n");
			return -1;
		}

		mvc_destroy(m);
	}
	return first;
}

void
mvc_exit()
{
	if (mvc_debug)
		fprintf(stderr, "mvc_exit\n");

	store_exit();
	keyword_exit();
}

void
mvc_logmanager()
{
	store_manager();
}

int
mvc_status(mvc *m)
{
	int res = m->session->status;

	return res;
}

int
mvc_type(mvc *m)
{
	int res = m->type;

	m->type = Q_PARSE;
	return res;
}

int
mvc_trans(mvc *m)
{
	int schema_changed = 0;
	assert(!m->session->active);	/* can only start a new transaction */

	store_lock();
	schema_changed = sql_trans_begin(m->session);
	if (m->session->active) 
		m->type = Q_TRANS;
	store_unlock();
	return schema_changed;
}

int
mvc_commit(mvc *m, int chain, char *name)
{
	sql_trans *cur, *tr = m->session->tr;
	int ok = SQL_OK;

	assert(tr);
	assert(m->session->active);	/* only commit an active transaction */
	
	if (mvc_debug)
		fprintf(stderr, "mvc_commit %s\n", (name) ? name : "");

	if (m->session->status < 0) {
		GDKerror("COMMIT: transaction is aborted, will ROLLBACK instead");
		mvc_rollback(m, chain, name);
		return -1;
	}

	/* savepoint then simply make a copy of the current transaction */
	if (name && name[0] != '\0') {
		sql_trans *tr = m->session->tr;
		if (mvc_debug)
			fprintf(stderr, "mvc_savepoint\n");
		store_lock();
		m->session->tr = sql_trans_create(m->session->stk, tr, name);
		store_unlock();
		m->type = Q_TRANS;
		m->session->schema = find_sql_schema(m->session->tr, m->session->schema_name);
		if (mvc_debug)
			fprintf(stderr, "mvc_commit %s done\n", (name) ? name : "");
		return 0;
	}

	/* first release all intermediate savepoints */
	cur = tr;
	tr = tr->parent;
	if (tr->parent) {
		store_lock();
		while (tr->parent->parent != NULL && ok == SQL_OK) {
			tr = sql_trans_destroy(tr);
		}
		store_unlock();
	}
	cur -> parent = tr;
	tr = cur;
	if (ok != SQL_OK) {
		GDKerror("COMMIT: transaction is aborted, will ROLLBACK instead");
		mvc_rollback(m, chain, name);
		return -1;
	}

	/* if there is nothing to commit reuse the current transaction */
	if (tr->wtime == 0) {
		if (!chain) 
			sql_trans_end(m->session);
		m->type = Q_TRANS;
		if (mvc_debug)
			fprintf(stderr, "mvc_commit %s done\n", (name) ? name : "");
		return 0;
	}

	/* validation phase */
	store_lock();
	if (sql_trans_validate(tr)) {
		if ((ok = sql_trans_commit(tr)) != SQL_OK)
			GDKfatal("Your disk seems to be full, exiting ...");
	} else {
		store_unlock();
		GDKerror("COMMIT: transaction is aborted because of concurency conflicts, will ROLLBACK instead");
		mvc_rollback(m, chain, name);
		return -1;
	}
	sql_trans_end(m->session);
	if (chain) 
		sql_trans_begin(m->session);
	store_unlock();
	m->type = Q_TRANS;
	if (mvc_debug)
		fprintf(stderr, "mvc_commit %s done\n", (name) ? name : "");
	return ok;
}

int
mvc_rollback(mvc *m, int chain, char *name)
{
	int res = 0;
	sql_trans *tr = m->session->tr;

	if (mvc_debug)
		fprintf(stderr, "mvc_rollback %s\n", (name) ? name : "");

	assert(tr);
	assert(m->session->active);	/* only abort an active transaction */

	store_lock();
	if (name && name[0] != '\0') {
		while (tr && (!tr->name || strcmp(tr->name, name) != 0))
			tr = tr->parent;
		if (!tr) {
			GDKerror("rollback savepoint %s doesn't exists", name);
			m->session->status = -1;
			store_unlock();
			return -1;
		}
		tr = m->session->tr;
		while (!tr->name || strcmp(tr->name, name) != 0) {
			/* make sure we do not reuse changed data */
			if (tr->wtime)
				tr->status = 1;
			tr = sql_trans_destroy(tr);
		}
		m->session->tr = tr;	/* restart at savepoint */
		m->session->status = tr->status;
		if (tr->name) {
			_DELETE(tr->name)
			tr->name = NULL;
		}
		m->session->schema = find_sql_schema(m->session->tr, m->session->schema_name);
	} else if (tr->parent) {
		/* first release all intermediate savepoints */
		while (tr->parent->parent != NULL) {
			tr = sql_trans_destroy(tr);
		}
		m->session-> tr = tr;
		/* make sure we do not reuse changed data */
		if (tr->wtime)
			tr->status = 1;
		sql_trans_end(m->session);
		if (chain) 
			sql_trans_begin(m->session);
	}
	store_unlock();
	m->type = Q_TRANS;
	if (mvc_debug)
		fprintf(stderr, "mvc_rollback %s done\n", (name) ? name : "");
	return res;
}

/* release all savepoints up including the given named savepoint 
 * but keep the current changes.
 * */
int
mvc_release(mvc *m, char *name)
{
	int ok = SQL_OK;
	int res = Q_TRANS;
	sql_trans *tr = m->session->tr;
	sql_trans *cur = tr;

	assert(tr);
	assert(m->session->active);	/* only release active transactions */

	if (mvc_debug)
		fprintf(stderr, "mvc_release %s\n", (name) ? name : "");

	while (tr && (!tr->name || strcmp(tr->name, name) != 0))
		tr = tr->parent;
	if (!tr || !tr->name || strcmp(tr->name, name) != 0) {
		GDKerror("release savepoint %s doesn't exists", name);
		m->session->status = -1;
		return -1;
	}
	tr = m->session->tr;
	tr = tr->parent;
	store_lock();
	while (ok == SQL_OK && (!tr->name || strcmp(tr->name, name) != 0)) {
		tr = sql_trans_destroy(tr);
	}
	if (tr->name && strcmp(tr->name, name) == 0) {
		tr = sql_trans_destroy(tr);
	}
	store_unlock();
	cur -> parent = tr;

	m->type = res;
	return res;
}

mvc *
mvc_create(int clientid, backend_stack stk, int debug, bstream *rs, stream *ws)
{
	int i;
	mvc *m;

 	m = NEW(mvc);
	if (mvc_debug)
		fprintf(stderr, "mvc_create\n");

	m->errstr[0] = '\0';
	/* if an error exceeds the buffer we don't want garbage at the end */
	m->errstr[ERRSIZE-1] = '\0';

	m->qc = qc_create(clientid);
	m->sa = sa_create();

	m->params = NULL;
	m->vars = NEW_ARRAY(sql_var, MAXPARAMS);
	m->topvars = 0;
	m->sizevars = MAXPARAMS;
	m->frame = 1;
	m->argc = 0;
	m->sym = NULL;

	m->role_id = m->user_id = -1;
	m->timezone = 0;
	m->clientid = clientid;

	m->mode = m_normal;
	m->explain = m_normal;
	m->reply_size = 100;
	m->debug = debug;
	m->cache = 1;

	m->depth = 0;
	m->label = 0;
	m->called_triggers = NULL;
	for(i=0;i<MAXSTATS;i++)
		m->opt_stats[i] = 0;

	store_lock();
	m->session = sql_session_create(stk, 1 /*autocommit on*/);
	store_unlock();

	m->type = Q_PARSE;

	m->result_id = 0;
	m->results = NULL;

	scanner_init(&m->scanner, rs, ws);
	return m;
}

void
mvc_reset(mvc *m, bstream *rs, stream *ws, int debug, int globalvars)
{
	int i;
	sql_trans *tr;

	if (mvc_debug)
		fprintf(stderr, "mvc_reset\n");
	tr = m->session->tr;
	if (tr && tr->parent) {
		assert(m->session->active == 0);
		store_lock();
		while (tr->parent->parent != NULL) 
			tr = sql_trans_destroy(tr);
		store_unlock();
	}
	if (tr)
		sql_session_reset(m->session, 1 /*autocommit on*/);

	if (m->sa)
		m->sa = sa_reset(m->sa);
	else 
		m->sa = sa_create();

	m->errstr[0] = '\0';

	m->params = NULL;
	/* reset topvars to the set of global variables */
	stack_pop_until(m, globalvars);
	m->frame = 1;
	m->argc = 0;
	m->sym = NULL;

	m->role_id = m->user_id = -1;
	m->mode = m_normal;
	if (m->explain != m_normal)
		stack_set_number(m, "explain", m_normal);
	m->explain = m_normal;
	if (m->reply_size != 100)
		stack_set_number(m, "reply_size", 100);
	m->reply_size = 100;
	if (m->timezone != 0)
		stack_set_number(m, "current_timezone", 0);
	m->timezone = 0;
	if (m->debug != debug)
		stack_set_number(m, "debug", debug);
	m->debug = debug;
	if (m->cache != 1)
		stack_set_number(m, "cache", 1);
	m->cache = 1;

	m->depth = 0;
	m->label = 0;
	m->type = Q_PARSE;

	for(i=0;i<MAXSTATS;i++)
		m->opt_stats[i] = 0;

	m->result_id = 0;
	m->results = NULL;

	scanner_init(&m->scanner, rs, ws);
}

void
mvc_destroy(mvc *m)
{
	sql_trans *tr;

	if (mvc_debug)
		fprintf(stderr, "mvc_destroy\n");
	tr = m->session->tr;
	if (tr) {
		store_lock();
		if (m->session->active)
			sql_trans_end(m->session);
		while (tr->parent)
			tr = sql_trans_destroy(tr);
		m->session->tr = NULL;
		store_unlock();
	}
	sql_session_destroy(m->session);

	stack_pop_until(m, 0);

	if (m->scanner.log) /* close and destroy stream */
		close_stream(m->scanner.log);

	if (m->sa)
		sa_destroy(m->sa);
	m->sa = NULL;
	if (m->qc)
		qc_destroy(m->qc);
	m->qc = NULL;

	_DELETE(m);
}

sql_type *
mvc_bind_type(mvc *sql, char *name)
{
	sql_type *t = sql_trans_bind_type(sql->session->tr, NULL, name);

	if (mvc_debug)
		fprintf(stderr, "mvc_bind_type %s\n", name);
	return t;
}

sql_type *
schema_bind_type(mvc *sql, sql_schema *s, char *name)
{
	sql_type *t = find_sql_type(s, name);

	(void) sql;
	if (!t)
		return NULL;
	if (mvc_debug)
		fprintf(stderr, "schema_bind_type %s\n", name);
	return t;
}

sql_func *
mvc_bind_func(mvc *sql, char *name)
{
	sql_func *t = sql_trans_bind_func(sql->session->tr, name);

	if (mvc_debug)
		fprintf(stderr, "mvc_bind_func %s\n", name);
	return t;
}

sql_func *
schema_bind_func(mvc *sql, sql_schema * s, char *name)
{
	sql_func *t = find_sql_func(s, name);

	(void) sql;
	if (!t)
		return NULL;
	if (mvc_debug)
		fprintf(stderr, "schema_bind_func %s\n", name);
	return t;
}

sql_schema *
mvc_bind_schema(mvc *m, char *sname)
{
	sql_trans *tr = m->session->tr;
	sql_schema *s;

	if (!tr)
		return NULL;
 	s = find_sql_schema(tr, sname);
	if (!s)
		return NULL;

	if (mvc_debug)
		fprintf(stderr, "mvc_bind_schema %s\n", sname);
	return s;
}

sql_table *
mvc_bind_table(mvc *m, sql_schema *s, char *tname)
{
	sql_table *t = find_sql_table(s, tname);

	(void) m;
	if (!t)
		return NULL;
	if (mvc_debug)
		fprintf(stderr, "mvc_bind_table %s.%s\n", s->base.name, tname);

	return t;
}

sql_column *
mvc_bind_column(mvc *m, sql_table *t, char *cname)
{
	sql_column *c = find_sql_column(t, cname);

	(void) m;
	if (!c)
		return NULL;
	if (mvc_debug)
		fprintf(stderr, "mvc_bind_column %s.%s\n", t->base.name, cname);

	return c;
}

static sql_column *
first_column(sql_table *t)
{
	node *n = cs_first_node(&t->columns);

	if (n)
		return n->data;
	return NULL;
}


sql_column *
mvc_first_column(mvc *m, sql_table *t)
{
	sql_column *c = first_column(t);

	(void) m;
	if (!c)
		return NULL;
	if (mvc_debug)
		fprintf(stderr, "mvc_first_column %s.%s\n", t->base.name, c->base.name);

	return c;
}

sql_key *
mvc_bind_key(mvc *m, sql_schema *s, char *kname)
{
	node *n = list_find_name(s->keys, kname);
	sql_key *k;

	(void) m;
	if (!n)
		return NULL;
	k = n->data;

	if (mvc_debug)
		fprintf(stderr, "mvc_bind_key %s.%s\n", s->base.name, kname);

	return k;
}

sql_idx *
mvc_bind_idx(mvc *m, sql_schema *s, char *iname)
{
	node *n = list_find_name(s->idxs, iname);
	sql_idx *i;

	(void) m;
	if (!n)
		return NULL;
	i = n->data;

	if (mvc_debug)
		fprintf(stderr, "mvc_bind_idx %s.%s\n", s->base.name, iname);

	return i;
}

int
uniqueKey(sql_key *k)
{
	return (k->type == pkey || k->type == ukey);
}

sql_key *
mvc_bind_ukey(sql_table *t, list *colnames)
{
	node *cn;
	node *cur;
	sql_key *res = NULL;
	int len = list_length(colnames);

	if (cs_size(&t->keys))
		for (cur = t->keys.set->h; cur; cur = cur->next) {
			node *cc;
			sql_key *k = cur->data;

			if (uniqueKey(k) && list_length(k->columns) == len) {
				res = k;
				for (cc = k->columns->h, cn = colnames->h; cc && cn; cc = cc->next, cn = cn->next) {
					sql_kc *c = cc->data;
					char *n = cn->data;

					if (strcmp(c->c->base.name, n) != 0) {
						res = NULL;
						break;
					}
				}
				if (res)
					break;
			}
		}
	return res;
}

sql_trigger *
mvc_bind_trigger(mvc *m, sql_schema *s, char *tname)
{
	node *n = list_find_name(s->triggers, tname);
	sql_trigger *trigger;

	(void) m;
	if (!n)
		return NULL;
	trigger = n->data;

	if (mvc_debug)
		fprintf(stderr, "mvc_bind_trigger %s.%s\n", s->base.name, tname);

	return trigger;
}

sql_type *
mvc_create_type(mvc *sql, sql_schema * s, char *name, int digits, int scale, int radix, char *impl)
{
	sql_type *t = NULL;

	if (mvc_debug)
		fprintf(stderr, "mvc_create_type %s\n", name);

	t = sql_trans_create_type(sql->session->tr, s, name, digits, scale, radix, impl);
	sql->type = Q_SCHEMA;
	return t;
}

sql_func *
mvc_create_func(mvc *sql, sql_schema * s, char *name, list *args, sql_subtype *res, bit issql, bit aggr, char *mod, char *impl)
{
	sql_func *f = NULL;

	if (mvc_debug)
		fprintf(stderr, "mvc_create_func %s\n", name);

	f = sql_trans_create_func(sql->session->tr, s, name, args, res, issql, aggr, mod, impl);
	sql->type = Q_SCHEMA;
	return f;
}

void
mvc_drop_func(mvc *m, sql_schema *s, char *name, int cascade)
{
	if (mvc_debug)
		fprintf(stderr, "mvc_drop_func %s %s\n", s->base.name, name);

	sql_trans_drop_func(m->session->tr, s, name, cascade);
	m->type = Q_SCHEMA;
}

sql_schema *
mvc_create_schema(mvc *m, char *name, int auth_id, int owner)
{
	sql_schema *s = NULL;

	if (mvc_debug)
		fprintf(stderr, "mvc_create_schema %s %d %d\n", name, auth_id, owner);

	s = sql_trans_create_schema(m->session->tr, name, auth_id, owner);
	m->type = Q_SCHEMA;
	return s;
}

void
mvc_drop_schema(mvc *m, char *sname)
{
	if (mvc_debug)
		fprintf(stderr, "mvc_drop_schema %s\n", sname);
	sql_trans_drop_schema(m->session->tr, sname);
	m->type = Q_SCHEMA;
}

sql_key *
mvc_create_key(mvc *m, sql_table *t, char *name, key_type kt, sql_key *rkey)
{
	sql_key *k;

	if (mvc_debug)
		fprintf(stderr, "mvc_create_key %s %u %ld\n", t->base.name, kt, (long) rkey);
	k = sql_trans_create_key(m->session->tr, t, name, kt, rkey);
	m->type = Q_SCHEMA;
	return k;
}

sql_key *
mvc_create_kc(mvc *m, sql_key *k, sql_column *c /*, extra options such as trunc */ )
{
	sql_trans_create_kc(m->session->tr, k, c);
	m->type = Q_SCHEMA;
	return k;
}

void
mvc_drop_key(mvc *m, sql_schema *s, char *name)
{
	if (mvc_debug)
		fprintf(stderr, "mvc_drop_key %s %s\n", s->base.name, name);
	sql_trans_drop_key(m->session->tr, s, name);
}

sql_idx *
mvc_create_idx(mvc *m, sql_table *t, char *name, idx_type it)
{
	sql_idx *i;

	if (mvc_debug)
		fprintf(stderr, "mvc_create_idx %s %u\n", t->base.name, it);

	i = sql_trans_create_idx(m->session->tr, t, name, it);
	m->type = Q_SCHEMA;
	return i;
}

sql_idx *
mvc_create_ic(mvc *m, sql_idx * i, sql_column *c /*, extra options such as trunc */ )
{
	sql_trans_create_ic(m->session->tr, i, c);
	m->type = Q_SCHEMA;
	return i;
}

void
mvc_drop_idx(mvc *m, sql_schema *s, char *name)
{
	if (mvc_debug)
		fprintf(stderr, "mvc_drop_idx %s %s\n", s->base.name, name);

	m->type = Q_SCHEMA;
	sql_trans_drop_idx(m->session->tr, s, name);
}

sql_trigger * 
mvc_create_trigger(mvc *m, sql_table *t, char *name, sht time, sht orientation, sht event, char *old_name, char *new_name, char *condition, char *statement )
{
	sql_trigger *i;

	if (mvc_debug)
		fprintf(stderr, "mvc_create_trigger %s %d %d %d\n", t->base.name, time, orientation, event);

	i = sql_trans_create_trigger(m->session->tr, t, name, time, orientation, 
			event, old_name, new_name, condition, statement);
	m->type = Q_SCHEMA;
	return i;
}

sql_trigger *
mvc_create_tc(mvc *m, sql_trigger * i, sql_column *c /*, extra options such as trunc */ )
{
	sql_trans_create_tc(m->session->tr, i, c);
	m->type = Q_SCHEMA;
	return i;
}

void
mvc_drop_trigger(mvc *m, sql_schema *s, char *name)
{
	if (mvc_debug)
		fprintf(stderr, "mvc_drop_trigger %s %s\n", s->base.name, name);

	m->type = Q_SCHEMA;
	sql_trans_drop_trigger(m->session->tr, s, name);
}


sql_table *
mvc_create_table(mvc *m, sql_schema *s, char *name, bit system, int persistence, int commit_action, int sz)
{
	sql_table *t = NULL;

	if (mvc_debug)
		fprintf(stderr, "mvc_create_table %s %s %d %d %d\n", s->base.name, name, system, persistence, commit_action);

	if (persistence == SQL_DECLARED_TABLE)
		/* declared tables should not end up in the catalog */
		t = create_sql_table(name, tt_table, system, persistence, commit_action);
	else
		t = sql_trans_create_table(m->session->tr, s, name, system, persistence, commit_action, sz);
	m->type = Q_SCHEMA;
	return t;
}


sql_table *
mvc_create_view(mvc *m, sql_schema *s, char *name, char *sql, bit system)
{
	sql_table *t = NULL;

	if (mvc_debug)
		fprintf(stderr, "mvc_create_view %s %s %s\n", s->base.name, name, sql);

	t = sql_trans_create_view(m->session->tr, s, name, sql, system);
	m->type = Q_SCHEMA;
	return t;
}

sql_table *
mvc_create_generated(mvc *m, sql_schema *s, char *name, char *sql, bit system)
{
	sql_table *t = NULL;

	if (mvc_debug)
		fprintf(stderr, "mvc_create_generated %s %s %s\n", s->base.name, name, sql);

	t = sql_trans_create_generated(m->session->tr, s, name, sql, system);
	m->type = Q_SCHEMA;
	return t;
}

void
mvc_drop_table(mvc *m, sql_schema *s, char *name, int cascade)
{
	if (mvc_debug)
		fprintf(stderr, "mvc_drop_table %s %s\n", s->base.name, name);

	sql_trans_drop_table(m->session->tr, s, name, cascade);
	m->type = Q_SCHEMA;
}

size_t
mvc_clear_table(mvc *m, sql_table *t)
{
	m->type = Q_UPDATE;
	return sql_trans_clear_table(m->session->tr, t);
}

sql_column *
mvc_create_column_(mvc *m, sql_table *t, char *name, char *type, int digits)
{
	sql_subtype tpe;

	if (!sql_find_subtype(&tpe, type, digits, 0))
		return NULL;

	m->type = Q_SCHEMA;
	return sql_trans_create_column(m->session->tr, t, name, &tpe);
}

sql_column *
mvc_create_column(mvc *m, sql_table *t, char *name, sql_subtype *tpe)
{
	if (mvc_debug)
		fprintf(stderr, "mvc_create_column %s %s %s\n", t->base.name, name, tpe->type->sqlname);
	m->type = Q_SCHEMA;
	if (t->persistence == SQL_DECLARED_TABLE)
		/* declared tables should not end up in the catalog */
		return create_sql_column(t, name, tpe);
	else
		return sql_trans_create_column(m->session->tr, t, name, tpe);
}

void
mvc_drop_column(mvc *m, sql_table *t, char *name)
{
	if (mvc_debug)
		fprintf(stderr, "mvc_drop_column %s %s\n", t->base.name, name);
	sql_trans_drop_column(m->session->tr, t, name);
	m->type = Q_SCHEMA;
}

void
mvc_create_dependency(mvc *m, int id, int depend_id, int depend_type)
{
	if (mvc_debug)
		fprintf(stderr, "mvc_create_dependency %d %d %d\n", id, depend_id, depend_type);
	m->type = Q_SCHEMA;
	if (id != depend_id)
		sql_trans_create_dependency(m->session->tr, id, depend_id, depend_type);
	
}

void
mvc_drop_dependencies(mvc *m, int depend_id)
{
	if (mvc_debug)
		fprintf(stderr, "mvc_drop_dependencies on %d\n", depend_id);
	m->type = Q_SCHEMA;

	sql_trans_drop_dependencies(m->session->tr, depend_id);
}

void
mvc_create_dependencies(mvc *m, list *id_l, sqlid depend_id, int dep_type)
{
	node *n = id_l->h;
	int i;
	
	for (i = 0; i < list_length(id_l); i++)
	{
		mvc_create_dependency(m, *(int *) n->data, depend_id, dep_type);
		n = n->next;
	}

}

int
mvc_check_dependency(mvc * m, int id, int type)
{
	list *dep_list = NULL;

	switch(type) {
		case OWNER_DEPENDENCY : dep_list = sql_trans_owner_schema_dependencies(m->session->tr, id);
					break;
		case SCHEMA_DEPENDENCY : dep_list = sql_trans_schema_user_dependencies(m->session->tr, id);
					break;
		case TABLE_DEPENDENCY : dep_list = sql_trans_get_dependencies(m->session->tr, id, TABLE_DEPENDENCY);
					break;
		default: dep_list =  sql_trans_get_dependencies(m->session->tr, id, COLUMN_DEPENDENCY);
	}
	
	if ( list_length(dep_list) >= 2 ) {
		list_destroy(dep_list);
		return HAS_DEPENDENCY;
	}
	
	list_destroy(dep_list);
	return NO_DEPENDENCY;
}

sql_column *
mvc_null(mvc *m, sql_column *col, int isnull)
{
	if (mvc_debug)
		fprintf(stderr, "mvc_null %s %d\n", col->base.name, isnull);

	m->type = Q_SCHEMA;
	return sql_trans_alter_null(m->session->tr, col, isnull);
}

sql_column *
mvc_default(mvc *m, sql_column *col, char *val)
{
	if (mvc_debug)
		fprintf(stderr, "mvc_default %s %s\n", col->base.name, val);

	m->type = Q_SCHEMA;
	return sql_trans_alter_default(m->session->tr, col, val);
}

/* variable management */
void 
stack_push_var(mvc *sql, char *name, stmt *var, sql_subtype *type)
{
	if (sql->topvars == sql->sizevars) {
		sql->sizevars <<= 1;
		sql->vars = RENEW_ARRAY(sql_var,sql->vars,sql->sizevars);
	}
	sql->vars[sql->topvars].s = stmt_dup(var);
	sql->vars[sql->topvars].name = _strdup(name);
	sql->vars[sql->topvars].value.vtype = 0;
	sql->vars[sql->topvars].type = *type;
	sql->vars[sql->topvars].view = 0;
	sql->topvars++;
}

void 
stack_push_view(mvc *sql, char *name, stmt *var)
{
	if (sql->topvars == sql->sizevars) {
		sql->sizevars <<= 1;
		sql->vars = RENEW_ARRAY(sql_var,sql->vars,sql->sizevars);
	}
	sql->vars[sql->topvars].s = stmt_dup(var);
	sql->vars[sql->topvars].name = _strdup(name);
	sql->vars[sql->topvars].value.vtype = 0;
	sql->vars[sql->topvars].view = 1;
	sql->topvars++;
}


void
stack_set_var(mvc *sql, char *name, ValRecord *v)
{
	int i;

	for (i = sql->topvars-1; i >= 0; i--) {
		if (sql->vars[i].s && strcmp(sql->vars[i].name, name)==0) {
			VALclear(&sql->vars[i].value);
			VALcopy(&sql->vars[i].value, v);
		}
	}
}

ValRecord *
stack_get_var(mvc *sql, char *name)
{
	int i;

	for (i = sql->topvars-1; i >= 0; i--) {
		if (sql->vars[i].s && strcmp(sql->vars[i].name, name)==0) {
			return &sql->vars[i].value;
		}
	}
	return NULL;
}

void 
stack_push_frame(mvc *sql, char *name)
{
	if (sql->topvars == sql->sizevars) {
		sql->sizevars <<= 1;
		sql->vars = RENEW_ARRAY(sql_var,sql->vars,sql->sizevars);
	}
	sql->vars[sql->topvars].s = NULL;
	sql->vars[sql->topvars].name = NULL;
	sql->vars[sql->topvars].value.vtype = 0;
	if (name)
		sql->vars[sql->topvars].name = _strdup(name);
	sql->topvars++;
	sql->frame++;
}

void
stack_pop_until(mvc *sql, int top) 
{
	while(sql->topvars > top) {
		sql_var *v = &sql->vars[--sql->topvars];

		_DELETE(v->name);
		if (v->s) {
			stmt_destroy(v->s);
			v->value.vtype = 0;
			VALclear(&v->value);
			if (v->type.comp_type) 
				table_destroy(v->type.comp_type);
		}
	}
}

void 
stack_pop_frame(mvc *sql)
{
	while(sql->vars[--sql->topvars].s) {
		sql_var *v = &sql->vars[sql->topvars];

		stmt_destroy(v->s);
		_DELETE(v->name);
		v->value.vtype = 0;
		VALclear(&v->value);
		if (v->type.comp_type) 
			table_destroy(v->type.comp_type);
	}
	if (sql->topvars && sql->vars[sql->topvars].name)  
		_DELETE(sql->vars[sql->topvars].name);
	sql->frame--;
}

sql_subtype *
stack_find_type(mvc *sql, char *name)
{
	int i;

	for (i = sql->topvars-1; i >= 0; i--) {
		if (sql->vars[i].s && strcmp(sql->vars[i].name, name)==0)
			return &sql->vars[i].type;
	}
	return NULL;
}

stmt *
stack_find_table(mvc *sql, char *name)
{
	int i;

	for (i = sql->topvars-1; i >= 0; i--) {
		if (sql->vars[i].s && strcmp(sql->vars[i].name, name)==0)
			return stmt_dup(sql->vars[i].s);
	}
	return NULL;
}

stmt *
stack_find_var(mvc *sql, char *name)
{
	int i;

	for (i = sql->topvars-1; i >= 0; i--) {
		if (sql->vars[i].s && strcmp(sql->vars[i].name, name)==0)
			return sql->vars[i].s;
	}
	return NULL;
}

int 
frame_find_var(mvc *sql, char *name)
{
	int i;

	for (i = sql->topvars-1; i >= 0 && sql->vars[i].s; i--) {
		if (strcmp(sql->vars[i].name, name)==0)
			return 1;
	}
	return 0;
}

int
stack_find_frame(mvc *sql, char *name)
{
	int i, frame = sql->frame;

	for (i = sql->topvars-1; i >= 0; i--) {
		/* frame has no statement and only sometimes a name */
		if (!sql->vars[i].s) 
			frame--;
		else if ( sql->vars[i].name &&
		    strcmp(sql->vars[i].name, name)==0)
			return frame;
	}
	return 0;
}

void
stack_set_string(mvc *sql, char *name, char *val)
{
	ValRecord *v = stack_get_var(sql, name);

	if (v != NULL) {
		if (v->val.sval)
			_DELETE(v->val.sval);
		v->val.sval = _strdup(val);
	}
}

str
stack_get_string(mvc *sql, char *name)
{
	ValRecord *v = stack_get_var(sql, name);

	if (!v || v->vtype != TYPE_str)
		return NULL;
	return v->val.sval;
}

void
stack_set_number(mvc *sql, char *name, lng val)
{
	ValRecord *v = stack_get_var(sql, name);

	if (v != NULL) {
		if (v->vtype == TYPE_lng) 
			v->val.lval = val;
		if (v->vtype == TYPE_int) 
			v->val.lval = (int) val;
		if (v->vtype == TYPE_sht) 
			v->val.lval = (sht) val;
		if (v->vtype == TYPE_bit) {
			if (val)
				v->val.cval[0] = 1;
			else 
				v->val.cval[0] = 0;
		}
	}
}

lng
stack_get_number(mvc *sql, char *name)
{
	ValRecord *v = stack_get_var(sql, name);

	if (v != NULL) {
		if (v->vtype == TYPE_lng) 
			return v->val.lval;
		if (v->vtype == TYPE_int) 
			return v->val.ival;
		if (v->vtype == TYPE_sht) 
			return v->val.shval;
		if (v->vtype == TYPE_bit) 
			if (v->val.cval[0])
				return 1;
			return 0;
	}
	return 0;
}
