@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@f sql_env
@a N.J. Nes
@* Environment variables
The processing setting of the SQL front-end can collect information
for postprocessing and debugging by setting a flag
using the SQL construct: 
SET <variable>=<string> 
SET <variable>=<boolean>
SET <variable>=<int>

The SQL engine comes with a limited set of environment variables
to control its behavior. 
The 'debug' variable takes an integer and sets the Mserver global
debug flag. (See MonetDB documentation.)
The 'explain' variable currently takes the values 'plan' or
'profile'. The 'plan' qualifier produces a relational table with
the plan derived for execution using the applicable back end and
optimizer schemes. The 'profile' qualifier produces a performance
trace of the SQL queries for post analysis. It is available in
the system table called 'profile'. Omission of either qualifier merely
results in a straight execution of the query.

By default all remaining variables are stored as strings and 
any type analysis is up to the user. The can be freely used by the
SQL programmer for inclusion in his queries. [TODO]

The limited number of built-in variables defined above are 
strongly typed the hard way.
Moreover, they have a counterpart representation in the 
MVC structure to ease inspection during query processing.

The variables and their type definition are assembled in a system table
called 'sessions'.
@{
@h
#ifndef _SQL_ENV_H_
#define _SQL_ENV_H_

#include "sql_parser.h"
#include "sql_symbol.h"
#include "sql_statement.h"
#include "sql_mvc.h"

extern int mvc_debug_on(mvc *m, int flag);

extern int sql_update_var(mvc *sql, char *name);

extern int sql_create_env(mvc *sql, sql_schema *s);
extern int sql_create_profile(mvc *sql, sql_schema *tmp);

#endif /* _SQL_ENV_H_ */
@c
#include "sql_config.h"
#include "sql_env.h"
#include "sql_scope.h"
#include "sql_select.h"
#include "sql_updates.h"
#include "sql_semantic.h"
#include "sql_privileges.h"

#define SESSION_RW 0
#define SESSION_RO 1

int
mvc_debug_on(mvc *m, int flg)
{

	if (m->debug & flg)
		return 1;

	return 0;
}

int
sql_update_var(mvc *m, char *name)
{
	if (strcmp(name, "debug") == 0) {
		m->debug = stack_get_number(m, "debug");
	} else if (strcmp(name, "current_schema") == 0) {
		char *schema = stack_get_string(m, "current_schema");

		if (!mvc_set_schema(m, schema)) {
			GDKwarning("Schema (%s) missing\n", schema);
			return GDK_FAIL;
		}
	} else if (strcmp(name, "current_role") == 0) {
		char *role = stack_get_string(m, "current_role");

		if (!mvc_set_role(m, role)) {
			GDKwarning("Role (%s) missing\n", role);
			return GDK_FAIL;
		}
	} else if (strcmp(name, "current_timezone") == 0) {
		m->timezone = stack_get_number(m, "current_timezone") / 60;
	} else if (strcmp(name, "explain") == 0) {
		char *explain = stack_get_string(m, "explain");

		if (!explain || strcmp(explain, "") == 0)
			m->explain = m_normal;
		else if (strcmp(explain, "plan") == 0)
			m->explain = m_explain;
		else if (strcmp(explain, "profile") == 0)
			m->explain = m_profile;
		else if (strcmp(explain, "trace") == 0)
			m->explain = m_trace;
		else {
			GDKwarning("Session variable explain can only be set to 'plan', 'profile' or to the empty string\n");
			return GDK_FAIL;
		}
		m->mode = m_explain;
	} else if (strcmp(name, "cache") == 0) {
		m->cache = stack_get_number(m, "cache");
	}  else if (strcmp(name,"profile") == 0){
		m->explain= stack_get_number(m, "profile")? m_profile:m_normal;
	}  else if (strcmp(name,"trace") == 0){
		m->explain= stack_get_number(m, "trace")? m_trace:m_normal;
	}
	return GDK_SUCCEED;
}


int
sql_create_env(mvc *m, sql_schema *s)
{
	list *l;
	/* here we create a new table-type */
	sql_subtype tpe;
	sql_table *

	t = mvc_create_generated(m, s, "#env", NULL, 1);
	mvc_create_column_(m, t, "name", "varchar", 1024);
	mvc_create_column_(m, t, "value", "varchar", 2048);

	sql_find_subtype(&tpe, "table", 0, 0);
	tpe.comp_type = t;
	tpe.digits = t->base.id; /* pass the table through digits */

	/* add function */
	l = list_create((fdestroy) &arg_destroy);
	mvc_create_func(m, s, "env", l, &tpe, FALSE, FALSE, "sql", "sql_environment");

	t = mvc_create_generated(m, s, "#var", NULL, 1);
	mvc_create_column_(m, t, "name", "varchar", 1024);

	sql_find_subtype(&tpe, "table", 0, 0);
	tpe.comp_type = t;
	tpe.digits = t->base.id; /* pass the table through digits */

	/* add function */
	l = list_create((fdestroy) &arg_destroy);
	mvc_create_func(m, s, "var", l, &tpe, FALSE, FALSE, "sql", "sql_variables");
	return 0;
}

@-
The 'profile' table contains information on the parsing, optimization,
and execution time. More detailed information should be obtained using
the MonetDB kernel profiler, e.g. using Mknife
@c

int
sql_create_profile(mvc *m, sql_schema *s)
{
	sql_table *t = mvc_create_table(m, s, "profile", 1, SQL_GLOBAL_TEMP, CA_PRESERVE, -1);

	mvc_create_column_(m, t, "start", "timestamp", 0);
	mvc_create_column_(m, t, "query", "varchar", 2048);
	mvc_create_column_(m, t, "parse", "int", 32);
	mvc_create_column_(m, t, "optimize", "int", 32);
	mvc_create_column_(m, t, "exec", "int", 32);
	mvc_create_column_(m, t, "total", "int", 32);
	mvc_create_column_(m, t, "user", "varchar", 512);

	return 0;
}

@}
