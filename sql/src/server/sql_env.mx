@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@f sql_env
@a N.J. Nes
@* Environment variables
The processing setting of the SQL front-end can collect information
for postprocessing and debugging by setting a flag
using the SQL construct: 
SET <variable>=<string> 
SET <variable>=<boolean>
SET <variable>=<int>

The SQL engine comes with a limited set of environment variables
to control its behavior. 
The 'debug' variable takes an integer and sets the Mserver global
debug flag. (See MonetDB documentation.)
The 'explain' variable currently takes the values 'plan' or
'profile'. The 'plan' qualifier produces a relational table with
the plan derived for execution using the applicable back end and
optimizer schemes. The 'profile' qualifier produces a performance
trace of the SQL queries for post analysis. It is available in
the system table called 'profile'. Omission of either qualifier merely
results in a straight execution of the query.

By default all remaining variables are stored as strings and 
any type analysis is up to the user. The can be freely used by the
SQL programmer for inclusion in his queries. [TODO]

The limited number of built-in variables defined above are 
strongly typed the hard way.
Moreover, they have a counterpart representation in the 
MVC structure to ease inspection during query processing.

The variables and their type definition are assembled in a system table
called 'sessions'.
@{
@h
#ifndef _SQL_ENV_H_
#define _SQL_ENV_H_

#include "sql_parser.h"
#include "sql_symbol.h"
#include "sql_statement.h"
#include "sql_mvc.h"

extern int mvc_debug_on(mvc *m, int flag);

extern stmt *env(mvc *sql, symbol *s);

extern int sql_update_var(mvc *sql, char *name);
extern int sql_set_var_value(mvc *sql, char *name, char *value);

extern char *sql_get_var(mvc *sql, char *name);
extern char *sql_get_type(mvc *sql, char *name);

extern int sql_create_env(mvc *sql, sql_schema *s);
extern int sql_create_sessions(mvc *sql, sql_schema *tmp);
extern int sql_create_profile(mvc *sql, sql_schema *tmp);
extern int sql_sessions(mvc *sql);

#endif /* _SQL_ENV_H_ */
@c
#include "sql_env.h"
#include "sql_scope.h"
#include "sql_select.h"
#include "sql_updates.h"
#include "sql_semantic.h"
#include "sql_privileges.h"

#define SESSION_RW 0
#define SESSION_RO 1

int
mvc_debug_on(mvc *m, int flg)
{

	if (m->debug & flg)
		return 1;

	return 0;
}

char *
sql_get_var(mvc *m, char *name)
{
	sql_trans *tr = m->session->tr;
	sql_schema *tmp;
	sql_table *sessions;
	sql_column *s_name;
	ssize_t rid;
	char *val = NULL;

	if (!tr)
		return NULL;
	tmp = mvc_bind_schema(m, "tmp");
	sessions = mvc_bind_table(m, tmp, "sessions");
	s_name = mvc_bind_column(m, sessions, "name");
	rid = column_find_row(tr, s_name, name, NULL);

	if (rid >= 0) {
		sql_column *s_value = mvc_bind_column(m, sessions, "value");

		val = column_find_value(tr, s_value, rid);
	}
	return val;
}

char *
sql_get_type(mvc *m, char *name)
{
	sql_trans *tr = m->session->tr;
	sql_schema *tmp = mvc_bind_schema(m, "tmp");
	sql_table *sessions = mvc_bind_table(m, tmp, "sessions");
	sql_column *s_name = mvc_bind_column(m, sessions, "name");
	ssize_t rid = column_find_row(tr, s_name, name, NULL);
	char *type = NULL;

	if (rid >= 0) {
		sql_column *s_type = mvc_bind_column(m, sessions, "type");

		type = column_find_value(tr, s_type, rid);
	}
	return type;
}

int
sql_get_access(mvc *m, char *name)
{
	sql_trans *tr = m->session->tr;
	sql_schema *tmp = mvc_bind_schema(m, "tmp");
	sql_table *sessions = mvc_bind_table(m, tmp, "sessions");
	sql_column *s_name = mvc_bind_column(m, sessions, "name");
	ssize_t rid = column_find_row(tr, s_name, name, NULL);
	int access = -1;

	if (rid >= 0) {
		sql_column *s_access = mvc_bind_column(m, sessions, "access");
		int *a = (int *) column_find_value(tr, s_access, rid);

		if (a) {
			access = *a;
			_DELETE(a);
		}
	}
	return access;
}

int
sql_get_bit_var(mvc *sql, char *name)
{
	char *val = sql_get_var(sql, name);

	if (val && strcmp(val, "true") == 0) {
		_DELETE(val);
		return TRUE;
	}
	if (val)
		_DELETE(val);
	return FALSE;
}

static int
sql_get_int_var(mvc *sql, char *name)
{
	int r = 0;
	char *val = sql_get_var(sql, name);

	if (val) {
		char *v;
		r = strtol(val, &v, 10);
		_DELETE(val);
	}
	return r;
}

static char *
sql_get_str_var(mvc *sql, char *name)
{
	char *val = sql_get_var(sql, name);

	if (val)
		return (char *) val;
	assert(0);
	return NULL;
}

int
inttype(sql_subtype *itype, sql_subtype *rtype)
{
	if (strcmp(rtype->type->base.name, "int") == 0) {
		if (strcmp(itype->type->base.name, "sht") == 0 || strcmp(itype->type->base.name, "int") == 0 || strcmp(itype->type->base.name, "lng") == 0)
			return 1;
	}
	return 0;
}

static stmt *
set_var(mvc *sql, char *name, symbol *val, char *typename)
{
	sql_subtype ctype;
	scope *scp = scope_open(NULL);
	sql_schema *tmp = mvc_bind_schema(sql, "tmp");
	sql_table *sessions = mvc_bind_table(sql, tmp, "sessions");
	/* sessions bat is a temp ie use INS instead of UPD */
	tvar *tv = scope_add_table_columns(sql, scp, sessions, sessions->base.name, INS);
	stmt *st, *v = sql_value_exp(sql, scp, val, NULL, NULL, sql_sel);
	sql_column *c = mvc_bind_column(sql, sessions, "value");
	list *l;

	if (!v) {
		scope_close(scp);
		return NULL;
	}

	/* find variable */
	sql_find_subtype(&ctype, typename, 0, 0);
	v = check_types(sql, &ctype, v, type_equal);
	if (!v || (v = check_types(sql, &c->type, v, type_equal)) == NULL) {
		return NULL;
	}
	st = sql_compare(sql, scope_bind(scp, NULL, "name"), stmt_atom_string(_strdup(name)), "=", sql_where);
	st = stmt_const(st, v);
	/* TODO, need general intermediate code for updates! */
	/* sessions bat is a temp ie use INS instead of UPD */
	st = stmt_replace(stmt_bat(c, stmt_dup(tv->s), INS), st);
	scp = scope_close(scp);
	l = create_stmt_list();
	list_append(l, st);
	list_append(l, stmt_update_var(_strdup(name)));
	list_append(l, stmt_affected_rows(stmt_atom_int(1)));
	return stmt_list(l);
}

static stmt *
sql_set_var(mvc *sql, symbol *s)
{
	if (s->token == SQL_SET) {
		dlist *dl = s->data.lval;
		char *typename, *name = dl->h->data.sval;
		symbol *val = dl->h->next->data.sym;
		int access = sql_get_access(sql, name);
		stmt *r;

		if (access < 0) {
			return sql_error(sql, 02, "Unknown session variable %s\n", name);
		} else if (access == SESSION_RO) {
			return sql_error(sql, 02, "You have no permissions to change the session variable %s\n", name);
		}
		typename = sql_get_type(sql,name);
		r = set_var(sql, name, val, typename);
		_DELETE(typename);
		return r;
	}
	return NULL;
}

int
sql_set_var_value(mvc *m, char *name, char *value)
{
	int res = -1;

	sql_trans *tr = m->session->tr;
	sql_schema *tmp = mvc_bind_schema(m, "tmp");
	sql_table *sessions = mvc_bind_table(m, tmp, "sessions");
	sql_column *s_name = mvc_bind_column(m, sessions, "name");
	ssize_t rid = column_find_row(tr, s_name, name, NULL);

	if (rid >= 0) {
		sql_column *s_access = mvc_bind_column(m, sessions, "access");
		void *p = column_find_value(tr, s_access, rid);
		int access = *(int *)p;

		_DELETE(p);
		if (access == SESSION_RW) {
			sql_column *s_value = mvc_bind_column(m, sessions, "value");

			return column_update_value(tr, s_value, rid, value);
		}
	}
	return res;
}

int
sql_update_var(mvc *m, char *name)
{
	if (strcmp(name, "debug") == 0) {
		m->debug = sql_get_int_var(m, "debug");
	} else if (strcmp(name, "current_schema") == 0) {
		char *schema = sql_get_str_var(m, "current_schema");

		if (!mvc_set_schema(m, schema)) {
			GDKwarning("Schema (%s) missing\n", schema);
			if (schema)
				_DELETE(schema);
			return GDK_FAIL;
		}
		if (schema)
			_DELETE(schema);
	} else if (strcmp(name, "current_role") == 0) {
		char *role = sql_get_str_var(m, "current_role");

		if (!mvc_set_role(m, role)) {
			GDKwarning("Role (%s) missing\n", role);
			if (role)
				_DELETE(role);
			return GDK_FAIL;
		}
		if (role)
			_DELETE(role);
	} else if (strcmp(name, "current_timezone") == 0) {
		m->timezone = sql_get_int_var(m, "current_timezone") / 60;
	} else if (strcmp(name, "explain") == 0) {
		char *explain = sql_get_str_var(m, "explain");

		if (!explain || strcmp(explain, "") == 0)
			m->explain = m_normal;
		else if (strcmp(explain, "plan") == 0)
			m->explain = m_explain;
		else if (strcmp(explain, "profile") == 0)
			m->explain = m_profile;
		else if (strcmp(explain, "trace") == 0)
			m->explain = m_trace;
		else {
			GDKwarning("Session variable explain can only be set to 'plan', 'profile' or to the empty string\n");
			if (explain)
				_DELETE(explain);
			return GDK_FAIL;
		}
		if (explain)
			_DELETE(explain);
		m->mode = m_explain;
	} else if (strcmp(name, "cache") == 0) {
		m->cache = sql_get_bit_var(m, "cache");
	} 
	return GDK_SUCCEED;
}


stmt *
sql_declare_var(mvc *m, symbol *s)
{
	if (s->token == SQL_DECLARE) {
		int rw = SESSION_RW;
		sql_trans *tr = m->session->tr;
		sql_schema *tmp = mvc_bind_schema(m, "tmp");
		sql_table *sessions = mvc_bind_table(m, tmp, "sessions");
		sql_column *s_name = mvc_bind_column(m, sessions, "name");
		dlist *l = s->data.lval;
		char *name = l->h->data.sval;
		sql_subtype *ctype = &l->h->next->data.typeval;

		if (column_find_row(tr, s_name, name, NULL) >= 0) {
@-
Any user defined variable should be added to the table.
They don't survive session boundaries
@c
			return sql_error(m, 02, "Allready used session variable, %s\n", name);
		}

		table_insert(tr, sessions, name, "NULL", ctype->type->sqlname, &rw, NULL);
		return stmt_none();
	}
	return NULL;
}

@-
Handling of SQL variables is straightforward.
@c
int
sql_sessions(mvc *m)
{
	char buf[BUFSIZ];
	sql_trans *tr = m->session->tr;
	sql_schema *tmp = mvc_bind_schema(m, "tmp");
	sql_table *s = mvc_bind_table(m, tmp, "sessions");
	int rw = SESSION_RW, ro = SESSION_RO;

	snprintf(buf, BUFSIZ, "%d", m->debug);
	table_insert(tr, s, "debug", buf, "int", &rw, NULL);

	buf[0] = 0;
	if (m->explain == m_normal)
		table_insert(tr, s, "explain", "", "varchar", &rw, NULL);
	else if (m->explain == m_explain)
		table_insert(tr, s, "explain", "plan", "varchar", &rw, NULL);
	else if (m->explain == m_profile)
		table_insert(tr, s, "explain", "profile", "varchar", &rw, NULL);

	table_insert(tr, s, "current_schema", m->session->schema_name, "varchar", &ro, NULL);

	/* MonetDB/SQL user/current_user/session_user (authorization id) */
	table_insert(tr, s, "current_user", m->user, "varchar", &ro, NULL);

	/* MonetDB/SQL role/current_role/session_role */
	table_insert(tr, s, "current_role", m->role, "varchar", &rw, NULL);

	snprintf(buf, BUFSIZ, "%d", m->timezone * 60);
	table_insert(tr, s, "current_timezone", buf, "sec_interval", &rw, NULL);

	table_insert(tr, s, "cache", "true", "boolean", &rw, NULL);

/* Actually 'factory' and 'cache' are optimizer decisions too
	table_insert(tr, s, "optimizer", "sql.optimizer();", "varchar", &rw, NULL);
*/
	return 0;
}

int
sql_create_sessions(mvc *m, sql_schema *s)
{
	sql_table *t = mvc_create_table(m, s, "sessions", 1, SQL_GLOBAL_TEMP, CA_PRESERVE, -1);

	mvc_create_column_(m, t, "name", "varchar", 1024);
	mvc_create_column_(m, t, "value", "varchar", 2048);
	mvc_create_column_(m, t, "type", "varchar", 1024);
	mvc_create_column_(m, t, "access", "int", 9);
	/* access 0     read/write
	   1    via sql_privileges (role/user)  
	   ie set session authorization bla
	   set role bla
	   2    read only
	 */
	return 0;
}

int
sql_create_env(mvc *m, sql_schema *s)
{
	BUN p, q;

	/* TODO change to view AS BATS ? */
	sql_table *t = mvc_create_table(m, s, "env", 1, SQL_PERSIST, 0, -1);

	mvc_create_column_(m, t, "name", "varchar", 1024);
	mvc_create_column_(m, t, "value", "varchar", 2048);
	BATloop(GDKenv, p, q) {
		char *name = BUNhead(GDKenv, p);
		char *val = BUNtail(GDKenv, p);

		table_insert(m->session->tr, t, name, val, NULL);
	}
	return 0;
}

@-
The 'profile' table contains information on the parsing, optimization,
and execution time. More detailed information should be obtained using
the MonetDB kernel profiler, e.g. using Mknife
@c

int
sql_create_profile(mvc *m, sql_schema *s)
{
	sql_table *t = mvc_create_table(m, s, "profile", 1, SQL_GLOBAL_TEMP, CA_PRESERVE, -1);

	mvc_create_column_(m, t, "start", "timestamp", 0);
	mvc_create_column_(m, t, "query", "varchar", 2048);
	mvc_create_column_(m, t, "parse", "int", 9);
	mvc_create_column_(m, t, "optimize", "int", 9);
	mvc_create_column_(m, t, "exec", "int", 9);
	mvc_create_column_(m, t, "total", "int", 9);
	mvc_create_column_(m, t, "user", "varchar", 512);

	return 0;
}

@}

stmt *
env(mvc * sql, symbol * s) 
{
	stmt *ret = NULL;

	switch (s->token) {
	case SQL_SET:
		sql->type = Q_UPDATE;
		return sql_set_var(sql, s);
	case SQL_DECLARE:
		return sql_declare_var(sql, s);
	default:
		return sql_error(sql, 01, 
			 "Env statement unknown Symbol(%ld)->token = %s",
			 (long) s, token2string(s->token));
	}
	return ret;
}
