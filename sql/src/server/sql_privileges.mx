@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@f sql_privileges
@a N.J. Nes
@* Privileges

Sql has a simple access control schema. There are two types of authorization,
users and roles. Each user may be part of several roles.
For each authorization identity a set of privileges is administrated.
These are administrated on multiple levels where lower levels (ie.
table or column level) overwrite privileges on higher levels.

@h
#ifndef _SQL_PRIV_H_
#define _SQL_PRIV_H_

/* privileges */
#include <sql_mvc.h>
#include <sql_catalog.h>

extern int mvc_set_role(mvc *m, char *role);
extern int mvc_set_schema(mvc *m, char *schema);
extern char *mvc_login(mvc *c, char *user, char *passwd);

extern int schema_privs(int grantor, sql_schema *t);
extern int table_privs(mvc *m, sql_table *t, int privs);

extern int sql_privilege(mvc *m, int auth_id, int obj_id, int privs, int sub);
extern int sql_grantable(mvc *m, int grantorid, int obj_id, int privs, int sub);
extern int sql_find_auth(mvc *m, str auth);
extern int sql_find_schema(mvc *m, str schema);

extern int sql_create_role(mvc *m, str auth, int grantor);
extern int sql_drop_role(mvc *m, str auth);
extern int sql_grant_role(mvc *m, str grantee, str auth);
extern int sql_revoke_role(mvc *m, str grantee, str auth);
extern int sql_create_user(mvc *m, str user, str passwd, str fullname, str schema_name, int grantor);
extern int sql_alter_user(mvc *m, str user, str passwd, oid schema_id);
extern int sql_drop_user(mvc *m, str user);
extern int sql_create_privileges(mvc *m, sql_schema *s);

#endif /*_SQL_PRIV_H_ */
@c
#include "sql_privileges.h"
#include "sql_statement.h"

@c
int
sql_create_role_id(mvc *m, unsigned int id, str auth, int grantor)
{
	sql_schema *sys = find_sql_schema(m->trans, "sys");
	sql_table *auths = find_sql_table(sys, "auths");
	sql_column *auth_name = find_sql_column(auths, "name");

	if (column_find_row(m->trans, auth_name, auth, NULL) >= 0)
		return FALSE;

	table_insert(m->trans, auths, &id, auth, &grantor);
	return TRUE;
}

int
sql_create_role(mvc *m, str auth, int grantor)
{
	oid id;
	sql_schema *sys = find_sql_schema(m->trans, "sys");
	sql_table *auths = find_sql_table(sys, "auths");
	sql_column *auth_name = find_sql_column(auths, "name");

	if (column_find_row(m->trans, auth_name, auth, NULL) >= 0)
		return FALSE;

	id = store_next_oid();
	table_insert(m->trans, auths, &id, auth, &grantor);

	return TRUE;
}

int
sql_drop_role(mvc *m, str auth)
{
	ssize_t rid;
	sql_schema *sys = find_sql_schema(m->trans, "sys");
	sql_table *auths = find_sql_table(sys, "auths");
	sql_column *auth_name = find_sql_column(auths, "name");

	rid = column_find_row(m->trans, auth_name, auth, NULL);
	if (rid >= 0)
		table_delete(m->trans, auths, rid);
	return TRUE;
}

int
sql_grant_role(mvc *m, str grantee, str auth /*, grantor?, admin? */ )
{
	ssize_t rid;
	sql_schema *sys = find_sql_schema(m->trans, "sys");
	sql_table *auths = find_sql_table(sys, "auths");
	sql_table *roles = find_sql_table(sys, "user_role");
	sql_column *auths_name = find_sql_column(auths, "name");
	sql_column *auths_id = find_sql_column(auths, "name");

	void *auth_id, *grantee_id;

	rid = column_find_row(m->trans, auths_name, grantee, NULL);
	if (rid < 0)
		return FALSE;
	grantee_id = column_find_value(m->trans, auths_id, rid);

	rid = column_find_row(m->trans, auths_name, auth, NULL);
	if (rid < 0) {
		_DELETE(grantee_id);
		return FALSE;
	}
	auth_id = column_find_value(m->trans, auths_id, rid);

	table_insert(m->trans, roles, grantee_id, auth_id);
	_DELETE(grantee_id);
	_DELETE(auth_id);
	return TRUE;
}

int
sql_revoke_role(mvc *m, str grantee, str auth)
/* grantee no longer belongs the role (auth) */
{
	ssize_t rid;
	sql_schema *sys = find_sql_schema(m->trans, "sys");
	sql_table *auths = find_sql_table(sys, "auths");
	sql_table *roles = find_sql_table(sys, "user_role");
	sql_column *auths_name = find_sql_column(auths, "name");
	sql_column *auths_id = find_sql_column(auths, "name");
	sql_column *role_id = find_sql_column(roles, "role_id");
	sql_column *login_id = find_sql_column(roles, "login_id");

	void *auth_id, *grantee_id;

	rid = column_find_row(m->trans, auths_name, grantee, NULL);
	if (rid < 0)
		return FALSE;
	grantee_id = column_find_value(m->trans, auths_id, rid);

	rid = column_find_row(m->trans, auths_name, auth, NULL);
	if (rid < 0) {
		_DELETE(grantee_id);
		return FALSE;
	}
	auth_id = column_find_value(m->trans, auths_id, rid);

	rid = column_find_row(m->trans, login_id, grantee_id, role_id, auth_id, NULL);
	table_delete(m->trans, roles, rid);
	_DELETE(grantee_id);
	_DELETE(auth_id);
	return TRUE;
}

int
sql_find_auth(mvc *m, str auth)
{
	int res = -1;
	ssize_t rid;
	sql_schema *sys = find_sql_schema(m->trans, "sys");
	sql_table *auths = find_sql_table(sys, "auths");
	sql_column *auths_name = find_sql_column(auths, "name");

	rid = column_find_row(m->trans, auths_name, auth, NULL);

	if (rid >= 0) {
		sql_column *auths_id = find_sql_column(auths, "id");
		int *p = (int *) column_find_value(m->trans, auths_id, rid);

		if (p) {
			res = *p;
			_DELETE(p);
		}
	}
	return res;
}

int
sql_find_schema(mvc *m, str schema)
{
	int schema_id = -1;
	ssize_t rid;
	sql_schema *sys = find_sql_schema(m->trans, "sys");
	sql_table *schemas = find_sql_table(sys, "schemas");
	sql_column *schemas_name = find_sql_column(schemas, "name");

	rid = column_find_row(m->trans, schemas_name, schema, NULL);

	if (rid >= 0) {
		sql_column *schemas_id = find_sql_column(schemas, "id");
		int *p = (int *) column_find_value(m->trans, schemas_id, rid);

		if (p) {
			schema_id = *p;
			_DELETE(p);
		}
	}
	return schema_id;
}

int
sql_create_user_id(mvc *m, oid id, str user, str passwd, str fullname, str schema_name, int grantor)
{
	sql_schema *sys = find_sql_schema(m->trans, "sys");
	sql_table *users = find_sql_table(sys, "db_users");
	int schema_id = -1;

	if (!(sql_create_role_id(m, id, user, grantor)))
		 return FALSE;

	if ((schema_id = sql_find_schema(m, schema_name)) < 0)
		return FALSE;

	table_insert(m->trans, users, user, passwd, fullname, &schema_id);
	return TRUE;
}

int
sql_create_user(mvc *m, str user, str passwd, str fullname, str schema_name, int grantor)
{
	sql_schema *sys = find_sql_schema(m->trans, "sys");
	sql_table *users = find_sql_table(sys, "db_users");
	int schema_id = -1;

	if (!(sql_create_role(m, user, grantor)))
		return FALSE;

	if ((schema_id = sql_find_schema(m, schema_name)) < 0)
		return FALSE;

	table_insert(m->trans, users, user, passwd, fullname, &schema_id);
	return TRUE;
}

int
sql_alter_user(mvc *m, str user, str passwd, oid schema_id)
{
	ssize_t rid;
	sql_schema *sys = find_sql_schema(m->trans, "sys");
	sql_table *users = find_sql_table(sys, "db_users");
	sql_column *users_name = find_sql_column(users, "name");

	rid = column_find_row(m->trans, users_name, user, NULL);
	if (rid < 0)
		return FALSE;

	if (passwd) {
		sql_column *users_passwd = find_sql_column(users, "passwd");

		column_update_value(m->trans, users_passwd, rid, passwd);
	}
	if (schema_id) {
		sql_column *users_schema = find_sql_column(users, "default_schema");

		column_update_value(m->trans, users_schema, rid, &schema_id);
	}
	return TRUE;
}

int
sql_drop_user(mvc *m, str user)
{
	ssize_t rid;
	sql_schema *sys = find_sql_schema(m->trans, "sys");
	sql_table *users = find_sql_table(sys, "db_users");
	sql_column *users_name = find_sql_column(users, "name");

	rid = column_find_row(m->trans, users_name, user, NULL);
	if (rid < 0)
		return FALSE;

	sql_drop_role(m, user);
	table_delete(m->trans, users, rid);
	return TRUE;
}

int
sql_privilege(mvc *m, int auth_id, int obj_id, int priv, int sub)
{
	ssize_t rid;
	sql_schema *sys = find_sql_schema(m->trans, "sys");
	sql_table *privs = find_sql_table(sys, "privileges");
	sql_column *priv_obj = find_sql_column(privs, "obj_id");
	sql_column *priv_auth = find_sql_column(privs, "auth_id");
	sql_column *priv_priv = find_sql_column(privs, "privileges");
	int res = 0;

	(void) sub;
	rid = column_find_row(m->trans, priv_obj, &obj_id, priv_auth, &auth_id, priv_priv, &priv, NULL);
	if (rid >= 0) {
		/* found priv */
		res = priv;
	}
	return res;
}

int
schema_privs(int grantor, sql_schema *s)
{
	if (grantor == USER_MONETDB || grantor == s->auth_id) {
		return 1;
	}
	return 0;
}

int
table_privs(mvc *m, sql_table *t, int priv)
{
	/* temporary and clearable tables are owned by the session user */
	if (!t->persists || t->clear)
		return 1;
	if (m->user_id == USER_MONETDB || m->role_id == t->s->auth_id || sql_privilege(m, m->user_id, t->base.id, priv, 0) == priv || sql_privilege(m, m->role_id, t->base.id, priv, 0) == priv || sql_privilege(m, ROLE_PUBLIC, t->base.id, priv, 0) == priv) {
		return 1;
	}
	return 0;
}

int
sql_grantable_(mvc *m, int grantorid, int obj_id, int privs, int sub)
{
	ssize_t rid;
	sql_schema *sys = find_sql_schema(m->trans, "sys");
	sql_table *prvs = find_sql_table(sys, "privileges");
	sql_column *priv_obj = find_sql_column(prvs, "obj_id");
	sql_column *priv_auth = find_sql_column(prvs, "auth_id");
	sql_column *priv_priv = find_sql_column(prvs, "privileges");
	sql_column *priv_allowed = find_sql_column(prvs, "grantable");
	int priv;

	(void) sub;
	for (priv = 1; priv < privs; priv <<= 1) {
		if (!(priv & privs))
			continue;
		rid = column_find_row(m->trans, priv_obj, &obj_id, priv_auth, &grantorid, priv_priv, &priv, NULL);
		if (rid >= 0) {
			void *p = column_find_value(m->trans, priv_allowed, rid);
			int allowed = *(int *)p;

			_DELETE(p);
			/* switch of priv bit */
			if (allowed)
				privs = (privs & ~priv);
		}
	}
	if (privs != 0)
		return 0;
	return 1;
}

int
sql_grantable(mvc *m, int grantorid, int obj_id, int privs, int sub)
{
	if (m->user_id == USER_MONETDB)
		return 1;
	return sql_grantable_(m, grantorid, obj_id, privs, sub);
}

static int
mvc_set_user(mvc *m, char *user)
{
	ssize_t rid;
	sql_schema *sys = find_sql_schema(m->trans, "sys");
	sql_table *users = find_sql_table(sys, "db_users");
	sql_column *users_name = find_sql_column(users, "name");
	int res = 0;

	if (m->debug)
		fprintf(stderr, "mvc_set_user %s\n", user);

	rid = column_find_row(m->trans, users_name, user, NULL);
	if (rid >= 0) {
		sql_table *auths = find_sql_table(sys, "auths");
		sql_column *auths_name = find_sql_column(auths, "name");

		rid = column_find_row(m->trans, auths_name, user, NULL);
		if (rid >= 0) {
			sql_column *auths_id = find_sql_column(auths, "id");
			void *p = column_find_value(m->trans, auths_id, rid);
			int id = *(int *) p;

			_DELETE(p);
			m->user_id = m->role_id = id;

			m->user = _strdup(user);
			m->role = _strdup(user);
			res = 1;
		}
	}
	return res;
}

int
mvc_set_role(mvc *m, char *role)
{
	ssize_t rid;
	sql_schema *sys = find_sql_schema(m->trans, "sys");
	sql_table *auths = find_sql_table(sys, "auths");
	sql_column *auths_name = find_sql_column(auths, "name");
	int res = 0;

	if (m->debug)
		fprintf(stderr, "mvc_set_role %s\n", role);

	rid = column_find_row(m->trans, auths_name, role, NULL);
	if (rid >= 0) {
		sql_column *auths_id = find_sql_column(auths, "id");
		void *p = column_find_value(m->trans, auths_id, rid);
		int id = *(int *)p;

		_DELETE(p);
		/* todo check if user is part of this role */
		m->role_id = id;

		m->role = _strdup(role);
		res = 1;
	}
	return res;
}

int
mvc_set_schema(mvc *m, char *schema)
{
	int ret = 0;
	sql_schema *s = find_sql_schema(m->trans, schema);

	if (s) {
		if (m->schema)
			_DELETE(m->schema);
		m->schema = _strdup(schema);
		m->status = 0;
		m->type = Q_TRANS;
		if (m->trans)
			m->trans->schema = s;
		ret = 1;
	}
	return ret;
}

char *
mvc_login(mvc *m, char *user, char *passwd)
{
	ssize_t rid;
	sql_schema *sys = NULL;
	sql_table *users = NULL;
	sql_column *users_name = NULL;

	char *schema = NULL;

	if (m->debug)
		fprintf(stderr, "mvc_login %s\n", user);

	mvc_trans(m);

	sys = find_sql_schema(m->trans, "sys");
	users = find_sql_table(sys, "db_users");
	users_name = find_sql_column(users, "name");

	if ((rid = column_find_row(m->trans, users_name, user, NULL)) >= 0) {
		sql_column *users_passwd = find_sql_column(users, "passwd");
		char *pwd = column_find_value(m->trans, users_passwd, rid);

		if (pwd && strcmp(passwd, pwd) == 0) {
			sql_column *users_schema = find_sql_column(users, "default_schema");
			void *p = column_find_value(m->trans, users_schema, rid);
			unsigned int schema_id = *(unsigned int *)p;
			sql_table *schemas = find_sql_table(sys, "schemas");
			sql_column *schemas_name = find_sql_column(schemas, "name");
			sql_column *schemas_id = find_sql_column(schemas, "id");

			_DELETE(p);
			if ((rid = column_find_row(m->trans, schemas_id, &schema_id, NULL)) >= 0)
				schema = column_find_value(m->trans, schemas_name, rid);
			/* only set schema if user is found */
			if (!mvc_set_user(m, user)) {
				schema = NULL;
			}
		}
		if (pwd)
			_DELETE(pwd);
	}

	if (!schema)
		return NULL;

	if (!mvc_set_schema(m, schema)) {
		if (m->trans)
			mvc_rollback(m, 0, NULL);
		return NULL;
	}
	mvc_rollback(m, 0, NULL);
	return schema;
}

int
sql_create_privileges(mvc *m, sql_schema *s)
{
	int pub, p, zero = 0;
	sql_table *t, *privs;

	/* now the authorisation related tables */
	t = mvc_create_table(m, s, "db_users", 1, 1, 0, -1);
	mvc_create_column_(m, t, "name", "varchar", 1024);
	mvc_create_column_(m, t, "passwd", "varchar", 1024);
	mvc_create_column_(m, t, "fullname", "varchar", 2048);
	mvc_create_column_(m, t, "default_schema", "int", 9);

	t = mvc_create_table(m, s, "user_role", 1, 1, 0, -1);
	mvc_create_column_(m, t, "login_id", "int", 9);
	mvc_create_column_(m, t, "role_id", "int", 9);
	/*
	   mvc_create_column_(m, t, "grantor", "int", 9);
	   mvc_create_column_(m, t, "admin", "int", 9);
	 */

	/* all roles and users are in the auths table */
	t = mvc_create_table(m, s, "auths", 1, 1, 0, -1);
	mvc_create_column_(m, t, "id", "int", 9);
	mvc_create_column_(m, t, "name", "varchar", 1024);
	mvc_create_column_(m, t, "grantor", "int", 9);

	t = mvc_create_table(m, s, "privileges", 1, 1, 0, -1);
	mvc_create_column_(m, t, "obj_id", "int", 9);
	mvc_create_column_(m, t, "auth_id", "int", 9);
	mvc_create_column_(m, t, "privileges", "int", 9);
	mvc_create_column_(m, t, "grantor", "int", 9);
	mvc_create_column_(m, t, "grantable", "int", 9);

	/* add monetdb user */
	sql_create_role_id(m, ROLE_PUBLIC, "public", 0);
	sql_create_role_id(m, ROLE_SYSADMIN, "sysadmin", 0);
	sql_create_user_id(m, USER_MONETDB, "monetdb", "monetdb", "MonetDB Admin", "sys", 0);

	t = mvc_create_view(m, s, "users", "SELECT \"name\", \"fullname\", \"default_schema\" FROM \"sys\".\"db_users\";", 1, 1);
	mvc_create_column_(m, t, "name", "varchar", 1024);
	mvc_create_column_(m, t, "fullname", "varchar", 2024);
	mvc_create_column_(m, t, "default_schema", "int", 9);

	pub = ROLE_PUBLIC;
	p = PRIV_SELECT;
	privs = find_sql_table(s, "privileges");

	t = find_sql_table(s, "modules");
	table_insert(m->trans, privs, &t->base.id, &pub, &p, &zero, &zero);
	t = find_sql_table(s, "schemas");
	table_insert(m->trans, privs, &t->base.id, &pub, &p, &zero, &zero);
	t = find_sql_table(s, "tables");
	table_insert(m->trans, privs, &t->base.id, &pub, &p, &zero, &zero);
	t = find_sql_table(s, "ptables");
	table_insert(m->trans, privs, &t->base.id, &pub, &p, &zero, &zero);
	t = find_sql_table(s, "columns");
	table_insert(m->trans, privs, &t->base.id, &pub, &p, &zero, &zero);
	t = find_sql_table(s, "pcolumns");
	table_insert(m->trans, privs, &t->base.id, &pub, &p, &zero, &zero);
	t = find_sql_table(s, "keys");
	table_insert(m->trans, privs, &t->base.id, &pub, &p, &zero, &zero);
	t = find_sql_table(s, "idxs");
	table_insert(m->trans, privs, &t->base.id, &pub, &p, &zero, &zero);
	t = find_sql_table(s, "keycolumns");
	table_insert(m->trans, privs, &t->base.id, &pub, &p, &zero, &zero);
	t = find_sql_table(s, "types");
	table_insert(m->trans, privs, &t->base.id, &pub, &p, &zero, &zero);

	t = find_sql_table(s, "env");
	table_insert(m->trans, privs, &t->base.id, &pub, &p, &zero, &zero);

	/* owned by the users anyway 
	t = find_sql_table(s, "sessions");
	table_insert(m->trans, privs, &t->base.id, &pub, &p, &zero, &zero);
	t = find_sql_table(s, "profile");
	table_insert(m->trans, privs, &t->base.id, &pub, &p, &zero, &zero);
	t = find_sql_table(s, "ttables");
	table_insert(m->trans, privs, &t->base.id, &pub, &p, &zero, &zero);
	t = find_sql_table(s, "tcolumns");
	table_insert(m->trans, privs, &t->base.id, &pub, &p, &zero, &zero);
	*/

	return 0;
}
