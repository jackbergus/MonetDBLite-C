@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2005 CWI.
@' All Rights Reserved.

@f sql_trans
@a N.J. Nes
@*

@h
#ifndef _SQL_TRANS_H_
#define _SQL_TRANS_H_

#include <stdio.h>
#include <stdarg.h>
#include <sql_list.h>
#include "sql_symbol.h"
#include "sql_statement.h"

#define tr_none		0
#define tr_readonly	1
#define tr_writable	2
#define tr_serializable 4

extern stmt *transactions(mvc *sql, symbol *sym);

#endif /*_SQL_TRANS_H_*/

@c

#include "sql_config.h"
#include "sql_trans.h"
#include "sql_parser.h"
#include "sql_env.h"

stmt *
transactions(mvc *sql, symbol *s)
{
	int ret = 0;

	switch (s->token) {
	case TR_RELEASE:
		if (sql->auto_commit == 1) 
			return sql_error(sql, 01, "transaction release not allowed in auto commit mode");
		ret = mvc_release(sql, s->data.sval);
		if (ret < 0)
			return sql_error(sql, 01, "release savepoint %s failed", s->data.sval);
		break;
	case TR_COMMIT:
		if (sql->auto_commit == 1) 
			return sql_error(sql, 01, "transaction commit not allowed in auto commit mode");
		ret = mvc_commit(sql, s->data.ival, NULL);
		if (ret < 0)
			return sql_error(sql, 01, "transaction commit failed");
		break;
	case TR_SAVEPOINT:
		if (sql->auto_commit == 1) 
			return sql_error(sql, 01, "transaction savepoint not allowed in auto commit mode");
		ret = mvc_commit(sql, 0, s->data.sval);
		if (ret < 0)
			return sql_error(sql, 01, "transaction savepoint (%s) failed", s->data.sval);
		break;
	case TR_ROLLBACK:{
		dlist *l = s->data.lval;

		if (sql->auto_commit == 1) 
			return sql_error(sql, 01, "transaction rollback not allowed in auto commit mode");
		ret = mvc_rollback(sql, l->h->data.ival, l->h->next->data.sval);
		if (ret < 0 && l->h->next->data.sval)
			return sql_error(sql, 01, "transaction rollback to savepoint (%s) failed", l->h->next->data.sval);
	}
		break;
	case TR_START:{
	case TR_MODE:
		if (sql->trans)
			mvc_rollback(sql, 0, NULL);
		if (sql->auto_commit == 1)
			sql->auto_commit = 0;
		(void) mvc_trans(sql);
		sql->trans->level = s->data.ival;
	} break;
	default:
		return sql_error(sql, 01, "transaction unknown Symbol(%ld)->token = %s", (long) s, token2string(s->token));
	}
	return stmt_none();
}
