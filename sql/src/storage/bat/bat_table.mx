@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@f bat_table
@+ The bat table store
The bat table stores tables using, Monet's binary association tables (BATs).
In the global view of the database, a table with columns Cj with 1<j<n,
is stored on disk using the following set of BATs. Each column has one
base bat (Bj), containing the current column values. As we like to use
void bats we cannot use the bat delete functionality, so we keep an extra
bat with the deleted oids (D).

To support the full ACID properties we need to keep a little more. First
when we get inserts, we need to add bats (BIj) with these inserts (we cannot
change the read only base columns). For deletes we also need an extra
delete bat (DI) in which we can insert the newly deleted oids.

Last to support updates we need one more set of bats (Uj) which stores
oid, values pairs.

Merging of base, insert, deletes and updates is done during the query
execution. There we try to reduce the overhead of these extra bats by
pushing the union, minus and update operations through the relational
operators.  

@c

#include "sql_storage.h"
#include "bat_logger.h"
#include "bat_bm.h"
#include "bat_store.h"
#include <bat.h>

static BAT *
full_column(sql_column *c, BAT *d, BAT *s )
{
	/* return full normalized column bat

		if (s) {
			b := b.semijoin(s);
			i := i.semijoin(s);
			u := u.semijoin(s);
		}
		b := b.kunion(i);
		b := b.kdiff(u);
		b := b.kunion(u);
		b := b.kdiff(reverse(d));
	*/
	BAT *r, *b, *u, *i = temp_descriptor(c->bat.ibid);
	r = i; 
	if (c->t->base.flag == TR_NEW || !c->t->persists || c->t->clear) {
		if (s) {
			r = BATsemijoin(i,s);
			bat_destroy(i);
		}
		return r;
	}
	b = temp_descriptor(c->bat.bid);
	u = temp_descriptor(c->bat.ubid);
	if (s) {
		BAT *t;

		t = BATsemijoin(b,s); bat_destroy(b); b = t;
		t = BATsemijoin(i,s); bat_destroy(i); i = t;
		t = BATsemijoin(u,s); bat_destroy(u); u = t;
	}
	assert(b->ttype == i->ttype);
	r = BATkunion(b,i); bat_destroy(b); bat_destroy(i); b = r;
	r = BATkdiff(b,u); bat_destroy(b); b = r;
	assert(b->ttype == u->ttype);
	r = BATkunion(b,u); bat_destroy(b); bat_destroy(u); b = r;
	if (d) {
		r = BATkdiff(b,BATmirror(d)); bat_destroy(b); b = r;
	}
	return r;
}

ssize_t
column_find_row(sql_trans *tr, sql_column *c, void *value, ...)
{
	va_list va;
	BUN p;
	BAT *b = NULL, *s = NULL, *r = NULL, *d = NULL;
	ssize_t rid = -1;
	sql_column *nc;
	void *nv;

	if (c->t->dbid) 
		d = bind_dbat(tr, c->t, DEL);
	va_start(va, value);
	while ((nc = va_arg(va, sql_column *)) != NULL) {
		nv = va_arg(va, void *);

		b = full_column(c, d, s);
		if (s)
			bat_destroy(s);
		s = BATselect(b, value, value);
		bat_destroy(b);
		c = nc;
		value = nv;
	}
	b = full_column(c, d, s);
	if (s)
		bat_destroy(s);
	if (d)
		bat_destroy(d);

	r = BATmirror(b);
	p = BUNfnd(r, value);
	if (p)
		rid = *(oid *) BUNtail(r, p);
	bat_destroy(b);
	return rid;
}

void *
column_find_value(sql_trans *tr, sql_column *c, oid rid)
{
	BUN p;
	BAT *b, *d = NULL;
	void *res = NULL;

	if (c->t->dbid) 
		d = bind_dbat(tr, c->t, DEL);
	b = full_column(c, d, NULL);
	if (d)
		bat_destroy(d);

	p = BUNfnd(b, (ptr) &rid);
	if (p) {
		void *r;
		int sz;

		res = BUNtail(b, p);
                sz = ATOMlen(b->ttype, res);
                r = GDKmalloc(sz);
		memcpy(r,res,sz);
		res = r;
	}
	bat_destroy(b);
	return res;
}

int
column_update_value(sql_trans *tr, sql_column *c, oid rid, void *value)
{
	BAT *b;

	assert(rid != oid_nil);

	if (c->bat.ubid) {
		b = temp_descriptor(c->bat.ubid);
		if (BUNfnd(b, &rid))
			BUNreplace(b, (ptr) &rid, value);
		else
			BUNins(b, (ptr) &rid, value);
		bat_destroy(b);
	} else {
		b = temp_descriptor(c->bat.ibid);
		void_inplace(b, rid, value);
		bat_destroy(b);
	}
	c->base.wtime = c->t->base.wtime = c->t->s->base.wtime = tr->wtime = tr->stime;
	return 0;
}

int
table_insert(sql_trans *tr, sql_table *t, ...)
{
	va_list va;
	node *n = cs_first_node(&t->columns);
	sql_column *c = n->data;
	BAT *b = temp_descriptor(c->bat.ibid);
	void *val = NULL;
	oid rid = BATcount(b) + b->hseqbase;
	int cnt = 0;

	bat_destroy(b);
	va_start(va, t);

	c->base.wtime = tr->stime;
	for (val = va_arg(va, void *); n && val; n = n->next, val = va_arg(va, void *)) {

		cnt++;
		c = n->data;
		b = temp_descriptor(c->bat.ibid);
		BUNins(b, (ptr) &rid, val);
		bat_destroy(b);
		c->base.wtime = tr->stime;
	}
	t->cnt += cnt;
	if (n) {
		fprintf(stderr, "called table_insert(%s) with wrong number of args (%d,%d)\n", t->base.name, list_length(t->columns.set), cnt);
		return -1;
	}
	t->base.wtime = t->s->base.wtime = tr->wtime = tr->stime;
	return 0;
}

int
table_delete(sql_trans *tr, sql_table *t, oid rid)
{
	BAT *b = bind_dbat(tr, t, INS);
	oid id = b->hseqbase + BATcount(b);

	assert(rid != oid_nil);

	BUNins(b, (ptr) &id, (ptr) &rid);
	bat_destroy(b);
	t->base.wtime = t->s->base.wtime = tr->wtime = tr->stime;
	return 0;
}


int
table_dump(sql_trans *tr, sql_table *t)
{
	node *n = cs_first_node(&t->columns);
	int i, l = cs_size(&t->columns);
	BAT **b = (BAT**)GDKmalloc(sizeof(BAT*) * l);
	
	(void)tr;
	for (i = 0; n; n = n->next, i++) {
		sql_column *c = n->data;

		b[i] = temp_descriptor(c->bat.bid);
	}
	BATmultiprintf(GDKstdout, l +1, b, TRUE, 0, 1);
	for (i = 0; i < l; i++)
		bat_destroy(b[i]);
	return 0;
}

int
table_check(sql_trans *tr, sql_table *t)
{
	node *n = cs_first_node(&t->columns);
	int cnt = -1;

	(void)tr;
	for (; n; n = n->next) {
		sql_column *c = n->data;
		BAT *b;

		b = temp_descriptor(c->bat.bid);
		if (cnt == -1) {
			cnt = BATcount(b);
		} else if (cnt != BATcount(b)) {
			assert(0);
			return (cnt - BATcount(b));
		}
		bat_destroy(b);
	}
	return 0;
}
