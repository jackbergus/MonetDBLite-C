How To Start with MonetDB/SQL
=============================

.. This document is written in reStructuredText (see
   http://docutils.sourceforge.net/ for more information).
   Use ``rst2html.py`` to convert this file to HTML.

This document will help you compile and install the MonetDB/SQL front
end.

In case you prefer to install a pre-compiled binary distribution, please
check out `the SourceForge documentation`__.

This document assumes that you have installed MonetDB on a Unix system
(e.g., Linux, IRIX, Solaris, AIX, Mac OS X/Darwin, or CYGWIN), and that
you are planning to compile and install the MonetDB/SQL front end on
the same system.

For compilation and installation on a native Windows system (NT, 2000,
XP) see the instructions in the file `HowToStart-SQL-Win32.txt`__.

__ http://sourceforge.net/project/showfiles.php?group_id=56967
__ ../Windows/index.html


Prerequisites
-------------

There are no additional prerequisites for MonetDB/SQL except for the
extra disk space needed to compile and install the front end.

disk space
	After downloading, MonetDB/SQL takes up about 75 MB of disk space;
	compilation adds another 13 MB.  Testing takes about 155 MB, and
	the installation about 3 MB (not including any databases).


Getting the Software
--------------------

There are two ways to get the source code:

(1) checking it out from the CVS repository on SourceForge;
(2) downloading the pre-packaged source distribution from
    SourceForge__.

__ http://sourceforge.net/project/showfiles.php?group_id=56967

The following instruction first describe how to check out the source
code from the CVS repository on SourceForge; in case you downloaded
the pre-packaged source distribution, you can skip this and proceed
with to `Bootstrap, Configure and Make`_.

CVS checkout
~~~~~~~~~~~~

We assume the MonetDB sources have already been acquired from
SourceForge.  Here we only show the additional commands to get the SQL
source.

Get the software by using the command::

 cvs -d:pserver:anonymous@monetdb.cvs.sourceforge.net:/cvsroot/monetdb checkout sql

This will create a directory ``sql`` in your current working
directory.

Also see `the SourceForge documentation`__ for more information.

__ http://sourceforge.net/cvs/?group_id=56967


Bootstrap, Configure and Make
-----------------------------

Before executing the following steps, make sure that your
shell-environment (especially variables like ``PATH`` and
``LD_LIBRARY_PATH``) is set up, thus that the tools listed above as
well as MonetDB can be found.  (Bash users at CWI and DD can simply
``source conf/conf.bash``.  This sets the proper environment and even
provides aliases ``configure_sql`` and ``Mtest_sql`` for convenience.
See ``conf/conf.bash`` for more details.)

In case you checked out the CVS version, you have to run ``bootstrap``
first; in case you downloaded the pre-packaged source distribution,
you should skip ``bootstrap`` and start with ``configure`` (see
`Configure`_).

Bootstrap
~~~~~~~~~

In the top-level directory of ``sql`` type the command (note that this
uses autogen.py which is part of the ``buildtools`` package --- make
sure it can be found in your ``$PATH``)::

 ./bootstrap

If it responds with an error message, it means the MonetDB server 
could not be found, or less likely, you have not installed 
MonetDB properly.

Configure
~~~~~~~~~

Then in any directory (preferably a *new empty* directory and *not* in
the ``sql`` top-level directory) give the command::

 .../configure [<options>]

where ``...`` is replaced with the (absolute or relative) path to the
``sql`` top-level directory.

The directory where you execute ``configure`` is the place where all
intermediate source and object files are generated during compilation
via ``make``.

By default, MonetDB/SQL is installed in ``/usr/local``.  To choose
another target directory, you need to call

::

 .../configure --prefix=<prefixdir> [<options>]

It is usually most convenient to choose the directory where the
MonetDB server was installed as target directory for installing
MonetDB/SQL.

Some other useful ``configure`` options are:

--enable-debug          enable full debugging default=off
--enable-optimize       enable extra optimization default=off
--enable-warning        enable extended compiler warnings default=off
--enable-profile        enable profiling default=off
--enable-instrument     enable instrument default=off
CC=<compiler>           which C compiler to use default=gcc
--enable-bits=<#bits>   specify number of bits (32 or 64)
                        default is compiler default
--enable-oid32          use 32-bit OIDs on 64-bit systems default=off

Use the ``--help`` option of ``configure`` to find out more about
``configure`` options.

Make
~~~~

In the same directory (where you called ``configure``) give the
command

::

 make

to compile the source code.  Please note that parallel make
runs (e.g. ``make -j2``) are currently known to be unsuccessful.

On my lightly loaded, dual 1.4 GHz Athlon Linux system, ``configure`` takes
about 13 seconds, and ``make`` about one minute.


Testing the Build
-----------------

If ``make`` went successfully, you can try

::

 make check

This perform a large number of tests, some are unfortunately still
expected to fail, but most should go successfully.  At the end of the
output there is a reference to an HTML file which is created by the
test process and shows the test results.  An explanation of the test
results can be found in XXX --- to be filled in.

Testing takes about 155 MB of disk space in the build directory.

Running the tests takes about 20 minutes on my system.


Installing
----------

Give the command

::

 make install

By default (if no ``--prefix`` option was given to ``configure``
above), this will install in ``/usr/local``.  Make sure you have
appropriate privileges.


Testing the Installation
------------------------

Make sure that ``/usr/local/bin`` (respectively
``<monetdb-prefix>/bin`` and ``<sql-prefix>/bin``, where
<monetdb-prefix> and <sql-prefix> are the directories you specified
with ``--prefix`` when calling ``configure`` for MonetDB and
MonetDB/SQL, respectively) is in your PATH.

In case you started your compilation with ``source conf/conf.bash``
(see `Bootstrap, Configure and Make`_ above), you can use the
``Mtest_sql`` alias, now.  In the ``sql`` top-level directory issue
the command

 Mtest_sql  -r

It will run a large number of SQL tests to assure correct installation.

In case you did not use ``source conf/conf.bash``, you need to type
more.  Let <sql-source>, <sql-build>, and <sql-prefix> denote the
absolute or relative paths to the ``sql`` top-level source directory,
the directory where you called ``configure`` for ``sql``, and the
directory you specified as ``--prefix`` with ``sql``'s ``configure``,
respectively.  Then, the test runs as follows from the ``sql``
top-level directory::

 Mtest.py --monet_mod_path=`monetdb-config --modpath`:<sql-prefix>/lib(64)/MonetDB:<sql-prefix>/lib(64)/MonetDB/lib --SQL_PREFIX=<sql-prefix> --TSTSRCBASE=<sql-source> --TSTBLDBASE=<sql-build> --TSTTRGBASE=<sql-prefix> -r

You need write permissions on part of the installation directory for
this command: it will create subdirectories ``var/dbfarm`` and ``Tests``.


Usage
-----

To use the MonetDB/SQL front end interactively, you first need to
start a MonetDB server (``Mserver``) with SQL support.  To do so,
first make sure, that your environment is set as described in
`Bootstrap, Configure and Make`_ and `Testing the Installation`_
above.

In case the install (i.e., prefix) directories of MonetDB and
MonetDB/SQL are the same, simply call

::

 Mserver --dbinit="module(sql_server);"

In case you use different install (i.e., prefix) directories for MonetDB
and MonetDB/SQL, call

::

 Mserver --set monet_mod_path=`monetdb-config --modpath`:<sql-prefix>/lib(64)/MonetDB:<sql-prefix>/lib(64)/MonetDB/lib --dbinit="module(sql_server);"

Then, in a second shell, set up the same environment and start the
MonetDB/SQL front end by calling

::

 mclient -lsql -umonetdb -Pmonetdb

Usage of SQL Front-end with MonetDB5
-----

To use MonetDB/SQL front-end with MonetDB 5, you first need to install both MonetDB 4 and MonetDB 5. Then perform the `Bootstrap, Configure and Make` sequence for the SQL module. 
Note: check that the SQL configure finds MonetDB5 installation, which is a prerequisite for the installation of SQL front-end for MonetDB5. There should be a message like:
...
checking for monetdb5-config... <monetdb5-prefix>/bin/monetdb5-config
checking whether MonetDB version 4.99.19 or newer is installed... yes: found version 4.99.21
...

 
After successful instalation of the SQL module, start MonetDB5 server by

::

 mserver5 --set monet_mod_path=<monetdb5-prefix>/lib(64)/MonetDB5:<monetdb5-prefix>/lib(64)/MonetDB5/lib:<sql-prefix>/lib(64)/MonetDB5:<sql-prefix>/lib(64)/MonetDB5/lib
 --dbinit="include sql;"


Then, in a second shell, set up the same environment and start the
MonetDB/SQL front-end by calling

::

 mclient -lsql -umonetdb -Pmonetdb


Documentation
-------------

Some initial documentation of the MonetDB/SQL front end is available in
SQLfeatures.tex and the `SQL VOC demo`__.

__ ../../../TechDocs/FrontEnds/SQL/index.html


Troubleshooting
---------------

``bootstrap`` fails if any of the requisite programs cannot be found
or is an incompatible version.

``bootstrap`` adds files to the source directory, so it must have
write permissions.

During ``bootstrap``, warnings like

::

 Remember to add `AC_PROG_LIBTOOL' to `configure.in'.
 You should add the contents of `/usr/share/aclocal/libtool.m4' to `aclocal.m4'.
 configure.in:37: warning: do not use m4_patsubst: use patsubst or m4_bpatsubst
 configure.in:104: warning: AC_PROG_LEX invoked multiple times
 configure.in:334: warning: do not use m4_regexp: use regexp or m4_bregexp
 automake/aclocal 1.6.3 is older than 1.7.
 Patching aclocal.m4 for Intel compiler on Linux (icc/ecc).
 patching file aclocal.m4
 Hunk #1 FAILED at 2542.
 1 out of 1 hunk FAILED -- saving rejects to file aclocal.m4.rej
 patching file aclocal.m4
 Hunk #1 FAILED at 1184.
 Hunk #2 FAILED at 2444.
 Hunk #3 FAILED at 2464.
 3 out of 3 hunks FAILED -- saving rejects to file aclocal.m4.rej

might occur.  For some technical reasons, it's hard to completely
avoid them.  However, it is usually safe to ignore them and simply
proceed with the usual compilation procedure.  Only in case the
subsequent ``configure`` or ``make`` fails, these warning might have
to be take more seriously.  In any case, you should include the
``bootstrap`` output whenever you report (see below) compilation
problems.

``configure`` will fail if certain essential programs cannot be found
or certain essential tasks (such as compiling a C program) cannot be
executed.  The problem will usually be clear from the error message.

E.g., if ``configure`` cannot find package XYZ, it is either not installed
on your machine, or it is not installed in places that ``configure``
searches (i.e., ``/usr``, ``/usr/local``).  In the first case, you
need to install package XYZ before you can ``configure``, ``make``,
and install MonetDB.  In the latter case, you need to tell
``configure`` via ``--with-XYZ=<DIR>`` where to find package XYZ on
your machine. ``configure`` then looks for the header files in
<DIR>/include, and for the libraries in <DIR>/lib.

In case one of ``bootstrap``, ``configure``, or ``make`` fails ---
especially after a ``cvs update``, or after you changed some code
yourself --- try the following steps (in this order; if you are using
the pre-packages source distribution, you can to skip steps 2 and 3):

(In case you experience problems after a ``cvs update``, first make
sure that you used ``cvs update -dP`` (or have a line ``update -dP``
in your ``~/.cvsrc``); ``-d`` ensures that cvs checks out directories that
have been added since your last ``cvs update``; ``-P`` removes
directories that have become empty, because all their file have been
removed from the cvs repository.  In case you did not use ``cvs update
-dP``, re-run ``cvs update -dP``, and remember to always use ``cvs
update -dP`` from now on (or simply add a line ``update -dP`` to your
``~/.cvsrc``)!)

0) In case only ``make`` fails, you can try running::

	make clean

   in your build directory and proceed with step 5; however, if ``make``
   then still fails, you have to re-start with step 1.
1) Clean up your whole build directory (i.e., the one where you ran
   ``configure`` and ``make``) by going there and running::

	make maintainer-clean

   In case your build directory is different from your source
   directory, you are advised to remove the whole build directory.
2) Go to the top-level source directory and run::

	./de-bootstrap

   and type ``y`` when asked whether to remove the listed files.  This
   will remove all the files that were created during ``bootstrap``.
3) In the top-level source directory, re-run::

	./bootstrap

4) In the build-directory, re-run::

	configure

   as described above.
5) In the build-directory, re-run::

	make
	make install

   as described above.

If this still does not help, please contact us.

Bugs and other problems with compiling or running MonetDB/SQL should
be reported using the bug tracking system at SourceForge__ (preferred)
or emailed to monet@cwi.nl; see also
http://monetdb.cwi.nl/Development/Bugtracker/index.html.  Please make
sure that you give a *detailed* description of your problem!

__ https://sourceforge.net/tracker/?group_id=56967&atid=482468
