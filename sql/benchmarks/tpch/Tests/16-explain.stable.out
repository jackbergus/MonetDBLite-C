stdout of test '16-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:29 >  
# 22:53:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:29 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:29 >  
# 22:53:29 >  "/usr/bin/python2" "16-explain.SQL.py" "16-explain"
# 22:53:29 >  

#set optimizer = 'sequential_pipe';
#explain select
#	p_brand,
#	p_type,
#	p_size,
#	count(distinct ps_suppkey) as supplier_cnt
#from
#	partsupp,
#	part
#where
#	p_partkey = ps_partkey
#	and p_brand <> 'Brand#45'
#	and p_type not like 'MEDIUM POLISHED%'
#	and p_size in (49, 14, 23, 45, 19, 3, 36, 9)
#	and ps_suppkey not in (
#		select
#			s_suppkey
#		from
#			supplier
#		where
#			s_comment like '%Customer%Complaints%'
#	)
#group by
#	p_brand,
#	p_type,
#	p_size
#order by
#	supplier_cnt desc,
#	p_brand,
#	p_type,
#	p_size;
% .explain # table_name
% mal # name
% clob # type
% 598 # length
function user.s2_1{autoCommit=true}(A0:str,A1:str,A2:int,A3:int,A4:int,A5:int,A6:int,A7:int,A8:int,A9:int,A10:str):void;
    X_205:void := querylog.define("explain select\n\tp_brand,\n\tp_type,\n\tp_size,\n\tcount(distinct ps_suppkey) as supplier_cnt\nfrom\n\tpartsupp,\n\tpart\nwhere\n\tp_partkey = ps_partkey\n\tand p_brand <> \\'Brand#45\\'\n\tand p_type not like \\'MEDIUM POLISHED%\\'\n\tand p_size in (49, 14, 23, 45, 19, 3, 36, 9)\n\tand ps_suppkey not in (\n\t\tselect\n\t\t\ts_suppkey\n\t\tfrom\n\t\t\tsupplier\n\t\twhere\n\t\t\ts_comment like \\'%Customer%Complaints%\\'\n\t)\ngroup by\n\tp_brand,\n\tp_type,\n\tp_size\norder by\n\tsupplier_cnt desc,\n\tp_brand,\n\tp_type,\n\tp_size;","sequential_pipe",118);
    X_162 := bat.new(nil:oid,nil:str);
    X_170 := bat.append(X_162,"sys.part");
    X_180 := bat.append(X_170,"sys.part");
    X_188 := bat.append(X_180,"sys.part");
    X_196 := bat.append(X_188,"sys.L4");
    X_165 := bat.new(nil:oid,nil:str);
    X_172 := bat.append(X_165,"p_brand");
    X_181 := bat.append(X_172,"p_type");
    X_189 := bat.append(X_181,"p_size");
    X_198 := bat.append(X_189,"supplier_cnt");
    X_166 := bat.new(nil:oid,nil:str);
    X_174 := bat.append(X_166,"char");
    X_183 := bat.append(X_174,"varchar");
    X_191 := bat.append(X_183,"int");
    X_200 := bat.append(X_191,"wrd");
    X_167 := bat.new(nil:oid,nil:int);
    X_176 := bat.append(X_167,10);
    X_185 := bat.append(X_176,25);
    X_193 := bat.append(X_185,32);
    X_202 := bat.append(X_193,64);
    X_169 := bat.new(nil:oid,nil:int);
    X_178 := bat.append(X_169,0);
    X_187 := bat.append(X_178,0);
    X_195 := bat.append(X_187,0);
    X_204 := bat.append(X_195,0);
    X_13 := sql.mvc();
    X_14:bat[:oid,:oid]  := sql.tid(X_13,"sys","partsupp");
    X_17:bat[:oid,:int]  := sql.bind(X_13,"sys","partsupp","ps_suppkey",0);
    (X_20,r1_20) := sql.bind(X_13,"sys","partsupp","ps_suppkey",2);
    X_23:bat[:oid,:int]  := sql.bind(X_13,"sys","partsupp","ps_suppkey",1);
    X_25 := sql.delta(X_17,X_20,r1_20,X_23);
    X_26 := algebra.leftfetchjoin(X_14,X_25);
    X_27 := bat.mirror(X_26);
    X_28:bat[:oid,:oid]  := sql.tid(X_13,"sys","supplier");
    X_30:bat[:oid,:str]  := sql.bind(X_13,"sys","supplier","s_comment",0);
    (X_32,r1_32) := sql.bind(X_13,"sys","supplier","s_comment",2);
    X_34:bat[:oid,:str]  := sql.bind(X_13,"sys","supplier","s_comment",1);
    X_35 := sql.delta(X_30,X_32,r1_32,X_34);
    X_36 := algebra.leftfetchjoin(X_28,X_35);
    X_38 := algebra.likesubselect(X_36,nil:BAT,A10,"",false);
    X_41:bat[:oid,:int]  := sql.bind(X_13,"sys","supplier","s_suppkey",0);
    (X_43,r1_45) := sql.bind(X_13,"sys","supplier","s_suppkey",2);
    X_45:bat[:oid,:int]  := sql.bind(X_13,"sys","supplier","s_suppkey",1);
    X_46 := sql.delta(X_41,X_43,r1_45,X_45);
    X_47:bat[:oid,:int] := algebra.leftfetchjoinPath(X_38,X_28,X_46);
    (X_48,r1_51) := algebra.subjoin(X_26,X_47,nil:BAT,nil:BAT,false,nil:lng);
    X_51 := algebra.tdiff(X_27,X_48);
    X_52:bat[:oid,:oid] := sql.bind_idxbat(X_13,"sys","partsupp","partsupp_ps_partkey_fkey",0);
    (X_54,r1_57) := sql.bind_idxbat(X_13,"sys","partsupp","partsupp_ps_partkey_fkey",2);
    X_56:bat[:oid,:oid] := sql.bind_idxbat(X_13,"sys","partsupp","partsupp_ps_partkey_fkey",1);
    X_57 := sql.delta(X_52,X_54,r1_57,X_56);
    X_58:bat[:oid,:oid] := algebra.leftfetchjoinPath(X_51,X_14,X_57);
    X_59:bat[:oid,:oid] := sql.tid(X_13,"sys","part");
    X_61:bat[:oid,:int] := sql.bind(X_13,"sys","part","p_size",0);
    (X_63,r1_67) := sql.bind(X_13,"sys","part","p_size",2);
    X_65:bat[:oid,:int] := sql.bind(X_13,"sys","part","p_size",1);
    X_66 := sql.delta(X_61,X_63,r1_67,X_65);
    X_67 := algebra.leftfetchjoin(X_59,X_66);
    X_68:bat[:oid,:str] := sql.bind(X_13,"sys","part","p_type",0);
    (X_70,r1_75) := sql.bind(X_13,"sys","part","p_type",2);
    X_72:bat[:oid,:str] := sql.bind(X_13,"sys","part","p_type",1);
    X_73 := sql.delta(X_68,X_70,r1_75,X_72);
    X_74 := algebra.leftfetchjoin(X_59,X_73);
    X_76:bat[:oid,:str] := sql.bind(X_13,"sys","part","p_brand",0);
    (X_78,r1_85) := sql.bind(X_13,"sys","part","p_brand",2);
    X_80:bat[:oid,:str] := sql.bind(X_13,"sys","part","p_brand",1);
    X_81 := sql.delta(X_76,X_78,r1_85,X_80);
    X_82 := algebra.leftfetchjoin(X_59,X_81);
    X_83 := algebra.subselect(X_82,A0,A0,true,true,true);
    X_86 := algebra.likesubselect(X_74,X_83,A1,"",true);
    X_87 := algebra.subselect(X_67,X_86,A2,A2,true,false,false);
    X_90 := algebra.subselect(X_67,X_86,A3,A3,true,false,false);
    X_91 := bat.mergecand(X_87,X_90);
    X_92 := algebra.subselect(X_67,X_86,A4,A4,true,false,false);
    X_93 := bat.mergecand(X_91,X_92);
    X_94 := algebra.subselect(X_67,X_86,A5,A5,true,false,false);
    X_95 := bat.mergecand(X_93,X_94);
    X_96 := algebra.subselect(X_67,X_86,A6,A6,true,false,false);
    X_97 := bat.mergecand(X_95,X_96);
    X_98 := algebra.subselect(X_67,X_86,A7,A7,true,false,false);
    X_99 := bat.mergecand(X_97,X_98);
    X_100 := algebra.subselect(X_67,X_86,A8,A8,true,false,false);
    X_101 := bat.mergecand(X_99,X_100);
    X_102 := algebra.subselect(X_67,X_86,A9,A9,true,false,false);
    X_103 := bat.mergecand(X_101,X_102);
    X_104 := algebra.leftfetchjoin(X_103,X_59);
    (X_105,r1_120) := algebra.subjoin(X_58,X_104,nil:BAT,nil:BAT,false,nil:lng);
    X_110:bat[:oid,:str] := algebra.leftfetchjoinPath(r1_120,X_103,X_74);
    X_111:bat[:oid,:int] := algebra.leftfetchjoinPath(r1_120,X_103,X_67);
    X_112:bat[:oid,:int] := algebra.leftfetchjoinPath(X_105,X_51,X_26);
    X_113:bat[:oid,:str] := algebra.leftfetchjoinPath(r1_120,X_103,X_82);
    (X_114,r1_133,r2_133) := group.subgroup(X_113);
    (X_117,r1_136,r2_136) := group.subgroup(X_112,X_114);
    (X_120,r1_139,r2_139) := group.subgroup(X_111,X_117);
    (X_123,r1_142,r2_142) := group.subgroupdone(X_110,X_120);
    X_126 := algebra.leftfetchjoin(r1_142,X_110);
    X_127 := algebra.leftfetchjoin(r1_142,X_111);
    X_128 := algebra.leftfetchjoin(r1_142,X_113);
    X_141 := algebra.leftfetchjoin(r1_142,X_112);
    (X_129,r1_148,r2_148) := group.subgroup(X_128);
    (X_132,r1_151,r2_151) := group.subgroup(X_127,X_129);
    (X_135,r1_154,r2_154) := group.subgroupdone(X_126,X_132);
    X_138 := algebra.leftfetchjoin(r1_154,X_127);
    X_139 := algebra.leftfetchjoin(r1_154,X_126);
    X_140 := algebra.leftfetchjoin(r1_154,X_128);
    X_142:bat[:oid,:wrd] := aggr.subcount(X_141,X_135,r1_154,true);
    (X_144,r1_163,r2_163) := algebra.subsort(X_142,true,false);
    (X_148,r1_167,r2_167) := algebra.subsort(X_140,r1_163,r2_163,false,false);
    (X_151,r1_170,r2_170) := algebra.subsort(X_139,r1_167,r2_167,false,false);
    (X_154,r1_173,r2_173) := algebra.subsort(X_138,r1_170,r2_170,false,false);
    X_157 := algebra.leftfetchjoin(r1_173,X_140);
    X_158 := algebra.leftfetchjoin(r1_173,X_139);
    X_159 := algebra.leftfetchjoin(r1_173,X_138);
    X_160 := algebra.leftfetchjoin(r1_173,X_142);
    sql.resultSet(X_196,X_198,X_200,X_202,X_204,X_157,X_158,X_159,X_160);
end user.s2_1;

# 22:53:29 >  
# 22:53:29 >  "Done."
# 22:53:29 >  

