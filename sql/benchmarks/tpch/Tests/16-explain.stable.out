stdout of test '16-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:29 >  
# 22:53:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:29 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2013 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:29 >  
# 22:53:29 >  "/usr/bin/python2" "16-explain.SQL.py" "16-explain"
# 22:53:29 >  

#set optimizer = 'sequential_pipe';
#explain select
#	p_brand,
#	p_type,
#	p_size,
#	count(distinct ps_suppkey) as supplier_cnt
#from
#	partsupp,
#	part
#where
#	p_partkey = ps_partkey
#	and p_brand <> 'Brand#45'
#	and p_type not like 'MEDIUM POLISHED%'
#	and p_size in (49, 14, 23, 45, 19, 3, 36, 9)
#	and ps_suppkey not in (
#		select
#			s_suppkey
#		from
#			supplier
#		where
#			s_comment like '%Customer%Complaints%'
#	)
#group by
#	p_brand,
#	p_type,
#	p_size
#order by
#	supplier_cnt desc,
#	p_brand,
#	p_type,
#	p_size;
% .explain # table_name
% mal # name
% clob # type
% 577 # length
function user.s2_1{autoCommit=true}(A0:str,A1:str,A2:int,A3:int,A4:int,A5:int,A6:int,A7:int,A8:int,A9:int,A10:str):void;
    X_13 := sql.mvc();
    X_14:bat[:oid,:oid]  := sql.tid(X_13,"sys","partsupp");
    X_17 := sql.bind_idxbat(X_13,"sys","partsupp","partsupp_ps_partkey_fkey",0);
    (X_20,r1_20) := sql.bind_idxbat(X_13,"sys","partsupp","partsupp_ps_partkey_fkey",2);
    X_23 := sql.bind_idxbat(X_13,"sys","partsupp","partsupp_ps_partkey_fkey",1);
    X_25 := sql.delta(X_17,X_20,r1_20,X_23);
    X_26 := algebra.leftfetchjoin(X_14,X_25);
    X_27:bat[:oid,:oid]  := sql.tid(X_13,"sys","part");
    X_29 := sql.bind(X_13,"sys","part","p_size",0);
    (X_31,r1_31) := sql.bind(X_13,"sys","part","p_size",2);
    X_33 := sql.bind(X_13,"sys","part","p_size",1);
    X_34 := sql.delta(X_29,X_31,r1_31,X_33);
    X_35 := algebra.leftfetchjoin(X_27,X_34);
    X_36 := sql.bind(X_13,"sys","part","p_type",0);
    (X_38,r1_39) := sql.bind(X_13,"sys","part","p_type",2);
    X_40 := sql.bind(X_13,"sys","part","p_type",1);
    X_41 := sql.delta(X_36,X_38,r1_39,X_40);
    X_42 := algebra.leftfetchjoin(X_27,X_41);
    X_44 := sql.bind(X_13,"sys","part","p_brand",0);
    (X_47,r1_50) := sql.bind(X_13,"sys","part","p_brand",2);
    X_49 := sql.bind(X_13,"sys","part","p_brand",1);
    X_50 := sql.delta(X_44,X_47,r1_50,X_49);
    X_51 := algebra.leftfetchjoin(X_27,X_50);
    X_52 := algebra.subselect(X_51,A0,A0,true,true,true);
    X_54 := algebra.likesubselect(X_42,X_52,A1,"",true);
    X_55 := algebra.subselect(X_35,X_54,A2,A2,true,true,false);
    X_57 := algebra.subselect(X_35,X_54,A3,A3,true,true,false);
    X_58 := bat.mergecand(X_55,X_57);
    X_59 := algebra.subselect(X_35,X_54,A4,A4,true,true,false);
    X_60 := bat.mergecand(X_58,X_59);
    X_61 := algebra.subselect(X_35,X_54,A5,A5,true,true,false);
    X_62 := bat.mergecand(X_60,X_61);
    X_63 := algebra.subselect(X_35,X_54,A6,A6,true,true,false);
    X_64 := bat.mergecand(X_62,X_63);
    X_65 := algebra.subselect(X_35,X_54,A7,A7,true,true,false);
    X_66 := bat.mergecand(X_64,X_65);
    X_67 := algebra.subselect(X_35,X_54,A8,A8,true,true,false);
    X_68 := bat.mergecand(X_66,X_67);
    X_69 := algebra.subselect(X_35,X_54,A9,A9,true,true,false);
    X_70 := bat.mergecand(X_68,X_69);
    X_71 := algebra.leftfetchjoin(X_70,X_27);
    (X_72,r1_83) := algebra.join(X_26,X_71);
    X_74 := sql.bind(X_13,"sys","partsupp","ps_suppkey",0);
    (X_79,r1_90) := sql.bind(X_13,"sys","partsupp","ps_suppkey",2);
    X_82 := sql.bind(X_13,"sys","partsupp","ps_suppkey",1);
    X_84 := sql.delta(X_74,X_79,r1_90,X_82);
    X_85:bat[:oid,:int]  := algebra.leftfetchjoinPath(X_72,X_14,X_84);
    X_86 := bat.mirror(X_85);
    X_87:bat[:oid,:oid]  := sql.tid(X_13,"sys","supplier");
    X_89 := sql.bind(X_13,"sys","supplier","s_comment",0);
    (X_91,r1_103) := sql.bind(X_13,"sys","supplier","s_comment",2);
    X_93 := sql.bind(X_13,"sys","supplier","s_comment",1);
    X_94 := sql.delta(X_89,X_91,r1_103,X_93);
    X_95 := algebra.leftfetchjoin(X_87,X_94);
    X_97 := algebra.likesubselect(X_95,A10,"",false);
    X_99 := sql.bind(X_13,"sys","supplier","s_suppkey",0);
    (X_101,r1_115) := sql.bind(X_13,"sys","supplier","s_suppkey",2);
    X_103 := sql.bind(X_13,"sys","supplier","s_suppkey",1);
    X_104 := sql.delta(X_99,X_101,r1_115,X_103);
    X_105:bat[:oid,:int]  := algebra.leftfetchjoinPath(X_97,X_87,X_104);
    (X_106,r1_121) := algebra.join(X_85,X_105);
    X_108 := algebra.tdiff(X_86,X_106);
    X_207 := algebra.leftfetchjoin(X_108,r1_83);
    X_109:bat[:oid,:str]  := algebra.leftfetchjoinPath(X_207,X_70,X_42);
    X_110:bat[:oid,:str]  := algebra.leftfetchjoinPath(X_207,X_70,X_51);
    X_111:bat[:oid,:int]  := algebra.leftfetchjoinPath(X_207,X_70,X_35);
    X_112 := algebra.leftfetchjoin(X_108,X_85);
    (X_113,r1_134,r2_134) := group.subgroup(X_112);
    (X_116,r1_137,r2_137) := group.subgroup(X_111,X_113);
    (X_119,r1_140,r2_140) := group.subgroup(X_110,X_116);
    (X_122,r1_143,r2_143) := group.subgroupdone(X_109,X_119);
    X_125 := algebra.leftfetchjoin(r1_143,X_109);
    X_126 := algebra.leftfetchjoin(r1_143,X_110);
    X_127 := algebra.leftfetchjoin(r1_143,X_111);
    X_140 := algebra.leftfetchjoin(r1_143,X_112);
    (X_128,r1_149,r2_149) := group.subgroup(X_127);
    (X_131,r1_152,r2_152) := group.subgroup(X_126,X_128);
    (X_134,r1_155,r2_155) := group.subgroupdone(X_125,X_131);
    X_137 := algebra.leftfetchjoin(r1_155,X_127);
    X_138 := algebra.leftfetchjoin(r1_155,X_125);
    X_139 := algebra.leftfetchjoin(r1_155,X_126);
    X_141:bat[:oid,:wrd]  := aggr.subcount(X_140,X_134,r1_155,true);
    (X_143,r1_164,r2_164) := algebra.subsort(X_141,true,false);
    (X_147,r1_168,r2_168) := algebra.subsort(X_139,r1_164,r2_164,false,false);
    (X_150,r1_171,r2_171) := algebra.subsort(X_138,r1_168,r2_168,false,false);
    (X_153,r1_174,r2_174) := algebra.subsort(X_137,r1_171,r2_171,false,false);
    X_156 := algebra.leftfetchjoin(r1_174,X_139);
    X_159 := algebra.leftfetchjoin(r1_174,X_141);
    X_158 := algebra.leftfetchjoin(r1_174,X_137);
    X_157 := algebra.leftfetchjoin(r1_174,X_138);
    X_160 := sql.resultSet(4,1,X_156);
    sql.rsColumn(X_160,"sys.part","p_brand","varchar",10,0,X_156);
    sql.rsColumn(X_160,"sys.part","p_type","varchar",25,0,X_157);
    sql.rsColumn(X_160,"sys.part","p_size","int",32,0,X_158);
    sql.rsColumn(X_160,"sys.L4","supplier_cnt","wrd",64,0,X_159);
    X_181 := io.stdout();
    sql.exportResult(X_181,X_160);
end s2_1;
# querylog.define("explain select\n\tp_brand,\n\tp_type,\n\tp_size,\n\tcount(distinct ps_suppkey) as supplier_cnt\nfrom\n\tpartsupp,\n\tpart\nwhere\n\tp_partkey = ps_partkey\n\tand p_brand <> \\'Brand#45\\'\n\tand p_type not like \\'MEDIUM POLISHED%\\'\n\tand p_size in (49, 14, 23, 45, 19, 3, 36, 9)\n\tand ps_suppkey not in (\n\t\tselect\n\t\t\ts_suppkey\n\t\tfrom\n\t\t\tsupplier\n\t\twhere\n\t\t\ts_comment like \\'%Customer%Complaints%\\'\n\t)\ngroup by\n\tp_brand,\n\tp_type,\n\tp_size\norder by\n\tsupplier_cnt desc,\n\tp_brand,\n\tp_type,\n\tp_size;","sequential_pipe")

# 22:53:29 >  
# 22:53:29 >  "Done."
# 22:53:29 >  

