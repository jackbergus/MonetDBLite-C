stdout of test '16-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:29 >  
# 22:53:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:29 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:29 >  
# 22:53:29 >  "/usr/bin/python2" "16-explain.SQL.py" "16-explain"
# 22:53:29 >  

#set optimizer = 'sequential_pipe';
#explain select
#	p_brand,
#	p_type,
#	p_size,
#	count(distinct ps_suppkey) as supplier_cnt
#from
#	partsupp,
#	part
#where
#	p_partkey = ps_partkey
#	and p_brand <> 'Brand#45'
#	and p_type not like 'MEDIUM POLISHED%'
#	and p_size in (49, 14, 23, 45, 19, 3, 36, 9)
#	and ps_suppkey not in (
#		select
#			s_suppkey
#		from
#			supplier
#		where
#			s_comment like '%Customer%Complaints%'
#	)
#group by
#	p_brand,
#	p_type,
#	p_size
#order by
#	supplier_cnt desc,
#	p_brand,
#	p_type,
#	p_size;
% .explain # table_name
% mal # name
% clob # type
% 555 # length
function user.s2_1(A0:str,A1:str,A2:int,A3:int,A4:int,A5:int,A6:int,A7:int,A8:int,A9:int,A10:str):void;
    X_210:void := querylog.define("explain select\n p_brand,\n p_type,\n p_size,\n count(distinct ps_suppkey) as supplier_cnt\nfrom\n partsupp,\n part\nwhere\n p_partkey = ps_partkey\n and p_brand <> \\'Brand#45\\'\n and p_type not like \\'MEDIUM POLISHED%\\'\n and p_size in (49, 14, 23, 45, 19, 3, 36, 9)\n and ps_suppkey not in (\n select\n s_suppkey\n from\n supplier\n where\n s_comment like \\'%Customer%Complaints%\\'\n )\ngroup by\n p_brand,\n p_type,\n p_size\norder by\n supplier_cnt desc,\n p_brand,\n p_type,\n p_size;","sequential_pipe",118);
    X_168 := bat.new(nil:str);
    X_175 := bat.append(X_168,"sys.part");
    X_185 := bat.append(X_175,"sys.part");
    X_193 := bat.append(X_185,"sys.part");
    X_201 := bat.append(X_193,"sys.L4");
    X_170 := bat.new(nil:str);
    X_177 := bat.append(X_170,"p_brand");
    X_186 := bat.append(X_177,"p_type");
    X_194 := bat.append(X_186,"p_size");
    X_203 := bat.append(X_194,"supplier_cnt");
    X_171 := bat.new(nil:str);
    X_179 := bat.append(X_171,"char");
    X_188 := bat.append(X_179,"varchar");
    X_196 := bat.append(X_188,"int");
    X_205 := bat.append(X_196,"bigint");
    X_172 := bat.new(nil:int);
    X_181 := bat.append(X_172,10);
    X_190 := bat.append(X_181,25);
    X_198 := bat.append(X_190,32);
    X_207 := bat.append(X_198,64);
    X_174 := bat.new(nil:int);
    X_183 := bat.append(X_174,0);
    X_192 := bat.append(X_183,0);
    X_200 := bat.append(X_192,0);
    X_209 := bat.append(X_200,0);
    X_0 := sql.mvc();
    X_1:bat[:oid] := sql.tid(X_0,"sys","partsupp");
    X_4:bat[:int] := sql.bind(X_0,"sys","partsupp","ps_suppkey",0);
    (X_7,r1_19) := sql.bind(X_0,"sys","partsupp","ps_suppkey",2);
    X_10:bat[:int] := sql.bind(X_0,"sys","partsupp","ps_suppkey",1);
    X_12 := sql.delta(X_4,X_7,r1_19,X_10);
    X_13 := algebra.projection(X_1,X_12);
    X_14 := bat.mirror(X_13);
    X_15:bat[:oid] := sql.tid(X_0,"sys","supplier");
    X_17:bat[:str] := sql.bind(X_0,"sys","supplier","s_comment",0);
    (X_19,r1_31) := sql.bind(X_0,"sys","supplier","s_comment",2);
    X_21:bat[:str] := sql.bind(X_0,"sys","supplier","s_comment",1);
    X_22 := sql.delta(X_17,X_19,r1_31,X_21);
    X_23 := algebra.projection(X_15,X_22);
    X_27 := algebra.likesubselect(X_23,nil:BAT,A10,"",false);
    X_30:bat[:int] := sql.bind(X_0,"sys","supplier","s_suppkey",0);
    (X_32,r1_44) := sql.bind(X_0,"sys","supplier","s_suppkey",2);
    X_34:bat[:int] := sql.bind(X_0,"sys","supplier","s_suppkey",1);
    X_35 := sql.delta(X_30,X_32,r1_44,X_34);
    X_37:bat[:int] := algebra.projectionpath(X_27,X_15,X_35);
    (X_38,r1_50) := algebra.subjoin(X_13,X_37,nil:BAT,nil:BAT,false,nil:lng);
    X_41 := algebra.subdiff(X_14,X_38,nil:BAT,nil:BAT,false,nil:lng);
    X_42:bat[:oid] := sql.bind_idxbat(X_0,"sys","partsupp","partsupp_ps_partkey_fkey",0);
    (X_44,r1_56) := sql.bind_idxbat(X_0,"sys","partsupp","partsupp_ps_partkey_fkey",2);
    X_46:bat[:oid] := sql.bind_idxbat(X_0,"sys","partsupp","partsupp_ps_partkey_fkey",1);
    X_47 := sql.delta(X_42,X_44,r1_56,X_46);
    X_49:bat[:oid] := algebra.projectionpath(X_41,X_1,X_47);
    X_50:bat[:oid] := sql.tid(X_0,"sys","part");
    X_52:bat[:int] := sql.bind(X_0,"sys","part","p_size",0);
    (X_54,r1_66) := sql.bind(X_0,"sys","part","p_size",2);
    X_56:bat[:int] := sql.bind(X_0,"sys","part","p_size",1);
    X_57 := sql.delta(X_52,X_54,r1_66,X_56);
    X_58 := algebra.projection(X_50,X_57);
    X_60:bat[:str] := sql.bind(X_0,"sys","part","p_type",0);
    (X_62,r1_74) := sql.bind(X_0,"sys","part","p_type",2);
    X_64:bat[:str] := sql.bind(X_0,"sys","part","p_type",1);
    X_65 := sql.delta(X_60,X_62,r1_74,X_64);
    X_66 := algebra.projection(X_50,X_65);
    X_70:bat[:str] := sql.bind(X_0,"sys","part","p_brand",0);
    (X_72,r1_84) := sql.bind(X_0,"sys","part","p_brand",2);
    X_74:bat[:str] := sql.bind(X_0,"sys","part","p_brand",1);
    X_75 := sql.delta(X_70,X_72,r1_84,X_74);
    X_76 := algebra.projection(X_50,X_75);
    X_78 := algebra.subselect(X_76,A0,A0,true,true,true);
    X_81 := algebra.likesubselect(X_66,X_78,A1,"",true);
    X_82 := algebra.subselect(X_58,X_81,A2,A2,true,false,false);
    X_86 := algebra.subselect(X_58,X_81,A3,A3,true,false,false);
    X_87 := bat.mergecand(X_82,X_86);
    X_89 := algebra.subselect(X_58,X_81,A4,A4,true,false,false);
    X_90 := bat.mergecand(X_87,X_89);
    X_92 := algebra.subselect(X_58,X_81,A5,A5,true,false,false);
    X_93 := bat.mergecand(X_90,X_92);
    X_95 := algebra.subselect(X_58,X_81,A6,A6,true,false,false);
    X_96 := bat.mergecand(X_93,X_95);
    X_98 := algebra.subselect(X_58,X_81,A7,A7,true,false,false);
    X_99 := bat.mergecand(X_96,X_98);
    X_101 := algebra.subselect(X_58,X_81,A8,A8,true,false,false);
    X_102 := bat.mergecand(X_99,X_101);
    X_104 := algebra.subselect(X_58,X_81,A9,A9,true,false,false);
    X_105 := bat.mergecand(X_102,X_104);
    X_106 := algebra.projection(X_105,X_50);
    (X_107,r1_119) := algebra.subjoin(X_49,X_106,nil:BAT,nil:BAT,false,nil:lng);
    X_113:bat[:str] := algebra.projectionpath(r1_119,X_105,X_66);
    X_115:bat[:int] := algebra.projectionpath(r1_119,X_105,X_58);
    X_117:bat[:int] := algebra.projectionpath(X_107,X_41,X_13);
    X_119:bat[:str] := algebra.projectionpath(r1_119,X_105,X_76);
    (X_120,r1_132,r2_132) := group.subgroup(X_119);
    (X_123,r1_135,r2_135) := group.subgroup(X_117,X_120);
    (X_126,r1_138,r2_138) := group.subgroup(X_115,X_123);
    (X_129,r1_141,r2_141) := group.subgroupdone(X_113,X_126);
    X_132 := algebra.projection(r1_141,X_113);
    X_133 := algebra.projection(r1_141,X_115);
    X_134 := algebra.projection(r1_141,X_119);
    X_147 := algebra.projection(r1_141,X_117);
    (X_135,r1_147,r2_147) := group.subgroup(X_134);
    (X_138,r1_150,r2_150) := group.subgroup(X_133,X_135);
    (X_141,r1_153,r2_153) := group.subgroupdone(X_132,X_138);
    X_144 := algebra.projection(r1_153,X_133);
    X_145 := algebra.projection(r1_153,X_132);
    X_146 := algebra.projection(r1_153,X_134);
    X_148:bat[:lng] := aggr.subcount(X_147,X_141,r1_153,true);
    (X_150,r1_162,r2_162) := algebra.subsort(X_148,true,false);
    (X_154,r1_166,r2_166) := algebra.subsort(X_146,r1_162,r2_162,false,false);
    (X_157,r1_169,r2_169) := algebra.subsort(X_145,r1_166,r2_166,false,false);
    (X_160,r1_172,r2_172) := algebra.subsort(X_144,r1_169,r2_169,false,false);
    X_163 := algebra.projection(r1_172,X_146);
    X_164 := algebra.projection(r1_172,X_145);
    X_165 := algebra.projection(r1_172,X_144);
    X_166 := algebra.projection(r1_172,X_148);
    sql.resultSet(X_201,X_203,X_205,X_207,X_209,X_163,X_164,X_165,X_166);
end user.s2_1;

# 22:53:29 >  
# 22:53:29 >  "Done."
# 22:53:29 >  

