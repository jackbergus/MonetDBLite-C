stdout of test '16-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:29 >  
# 22:53:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:29 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:29 >  
# 22:53:29 >  "/usr/bin/python2" "16-explain.SQL.py" "16-explain"
# 22:53:29 >  

#set optimizer = 'sequential_pipe';
#explain select
#	p_brand,
#	p_type,
#	p_size,
#	count(distinct ps_suppkey) as supplier_cnt
#from
#	partsupp,
#	part
#where
#	p_partkey = ps_partkey
#	and p_brand <> 'Brand#45'
#	and p_type not like 'MEDIUM POLISHED%'
#	and p_size in (49, 14, 23, 45, 19, 3, 36, 9)
#	and ps_suppkey not in (
#		select
#			s_suppkey
#		from
#			supplier
#		where
#			s_comment like '%Customer%Complaints%'
#	)
#group by
#	p_brand,
#	p_type,
#	p_size
#order by
#	supplier_cnt desc,
#	p_brand,
#	p_type,
#	p_size;
% .explain # table_name
% mal # name
% clob # type
% 555 # length
function user.s4_1():void;
    X_213:void := querylog.define("explain select\n p_brand,\n p_type,\n p_size,\n count(distinct ps_suppkey) as supplier_cnt\nfrom\n partsupp,\n part\nwhere\n p_partkey = ps_partkey\n and p_brand <> \\'Brand#45\\'\n and p_type not like \\'MEDIUM POLISHED%\\'\n and p_size in (49, 14, 23, 45, 19, 3, 36, 9)\n and ps_suppkey not in (\n select\n s_suppkey\n from\n supplier\n where\n s_comment like \\'%Customer%Complaints%\\'\n )\ngroup by\n p_brand,\n p_type,\n p_size\norder by\n supplier_cnt desc,\n p_brand,\n p_type,\n p_size;","sequential_pipe",100);
    X_171 := bat.new(nil:str);
    X_178 := bat.append(X_171,"sys.part");
    X_188 := bat.append(X_178,"sys.part");
    X_196 := bat.append(X_188,"sys.part");
    X_204 := bat.append(X_196,"sys.L15");
    X_173 := bat.new(nil:str);
    X_180 := bat.append(X_173,"p_brand");
    X_189 := bat.append(X_180,"p_type");
    X_197 := bat.append(X_189,"p_size");
    X_206 := bat.append(X_197,"supplier_cnt");
    X_174 := bat.new(nil:str);
    X_182 := bat.append(X_174,"char");
    X_191 := bat.append(X_182,"varchar");
    X_199 := bat.append(X_191,"int");
    X_208 := bat.append(X_199,"bigint");
    X_175 := bat.new(nil:int);
    X_184 := bat.append(X_175,10);
    X_193 := bat.append(X_184,25);
    X_201 := bat.append(X_193,32);
    X_210 := bat.append(X_201,64);
    X_177 := bat.new(nil:int);
    X_186 := bat.append(X_177,0);
    X_195 := bat.append(X_186,0);
    X_203 := bat.append(X_195,0);
    X_212 := bat.append(X_203,0);
    X_0 := sql.mvc();
    C_1:bat[:oid] := sql.tid(X_0,"sys","partsupp");
    X_4:bat[:int] := sql.bind(X_0,"sys","partsupp","ps_suppkey",0);
    X_13 := algebra.projection(C_1,X_4);
    X_48 := bat.mirror(X_13);
    C_21:bat[:oid] := sql.tid(X_0,"sys","supplier");
    X_30:bat[:str] := sql.bind(X_0,"sys","supplier","s_comment",0);
    X_36 := algebra.projection(C_21,X_30);
    C_40 := algebra.likesubselect(X_36,nil:BAT,"%Customer%Complaints%","",false);
    X_23:bat[:int] := sql.bind(X_0,"sys","supplier","s_suppkey",0);
    X_43:bat[:int] := algebra.projectionpath(C_40,C_21,X_23);
    (X_45,X_46) := algebra.subjoin(X_13,X_43,nil:BAT,nil:BAT,false,nil:lng);
    X_49 := algebra.subdiff(X_48,X_45,nil:BAT,nil:BAT,false,nil:lng);
    X_14:bat[:oid] := sql.bind_idxbat(X_0,"sys","partsupp","partsupp_ps_partkey_fkey",0);
    (X_17,X_18:bat[:oid]) := sql.bind_idxbat(X_0,"sys","partsupp","partsupp_ps_partkey_fkey",2);
    X_16:bat[:oid] := sql.bind_idxbat(X_0,"sys","partsupp","partsupp_ps_partkey_fkey",1);
    X_19 := sql.delta(X_14,X_17,X_18,X_16);
    X_51:bat[:oid] := algebra.projectionpath(X_49,C_1,X_19);
    C_52:bat[:oid] := sql.tid(X_0,"sys","part");
    X_68:bat[:int] := sql.bind(X_0,"sys","part","p_size",0);
    X_74 := algebra.projection(C_52,X_68);
    X_61:bat[:str] := sql.bind(X_0,"sys","part","p_type",0);
    X_67 := algebra.projection(C_52,X_61);
    X_54:bat[:str] := sql.bind(X_0,"sys","part","p_brand",0);
    X_60 := algebra.projection(C_52,X_54);
    C_76 := algebra.subselect(X_60,"Brand#45","Brand#45",true,true,true);
    C_82 := algebra.likesubselect(X_67,C_76,"MEDIUM POLISHED%","",true);
    C_84 := algebra.subselect(X_74,C_82,49,49,true,false,false);
    C_88 := algebra.subselect(X_74,C_82,14,14,true,false,false);
    X_89 := bat.mergecand(C_84,C_88);
    C_91 := algebra.subselect(X_74,C_82,23,23,true,false,false);
    X_92 := bat.mergecand(X_89,C_91);
    C_94 := algebra.subselect(X_74,C_82,45,45,true,false,false);
    X_95 := bat.mergecand(X_92,C_94);
    C_97 := algebra.subselect(X_74,C_82,19,19,true,false,false);
    X_98 := bat.mergecand(X_95,C_97);
    C_100 := algebra.subselect(X_74,C_82,3,3,true,false,false);
    X_101 := bat.mergecand(X_98,C_100);
    C_103 := algebra.subselect(X_74,C_82,36,36,true,false,false);
    X_104 := bat.mergecand(X_101,C_103);
    C_106 := algebra.subselect(X_74,C_82,9,9,true,false,false);
    X_107 := bat.mergecand(X_104,C_106);
    X_111 := algebra.projection(X_107,C_52);
    (X_112,X_113) := algebra.subjoin(X_51,X_111,nil:BAT,nil:BAT,false,nil:lng);
    X_120:bat[:str] := algebra.projectionpath(X_113,X_107,X_67);
    X_121:bat[:int] := algebra.projectionpath(X_113,X_107,X_74);
    X_117:bat[:int] := algebra.projectionpath(X_112,X_49,X_13);
    X_119:bat[:str] := algebra.projectionpath(X_113,X_107,X_60);
    (X_123,X_124,X_125) := group.subgroup(X_119);
    (X_126,X_127,X_128) := group.subgroup(X_117,X_123);
    (X_129,X_130,X_131) := group.subgroup(X_121,X_126);
    (X_132,X_133,X_134) := group.subgroupdone(X_120,X_129);
    X_135 := algebra.projection(X_133,X_119);
    X_136 := algebra.projection(X_133,X_120);
    X_137 := algebra.projection(X_133,X_121);
    X_138 := algebra.projection(X_133,X_117);
    (X_139,X_140,X_141) := group.subgroup(X_135);
    (X_142,X_143,X_144) := group.subgroup(X_137,X_139);
    (X_145,X_146,X_147) := group.subgroupdone(X_136,X_142);
    X_148 := algebra.projection(X_146,X_135);
    X_149 := algebra.projection(X_146,X_136);
    X_150 := algebra.projection(X_146,X_137);
    X_151:bat[:lng] := aggr.subcount(X_138,X_145,X_146,true);
    (X_153,X_154,X_155) := algebra.subsort(X_151,true,false);
    (X_157,X_158,X_159) := algebra.subsort(X_148,X_154,X_155,false,false);
    (X_160,X_161,X_162) := algebra.subsort(X_149,X_158,X_159,false,false);
    (X_163,X_164,X_165) := algebra.subsort(X_150,X_161,X_162,false,false);
    X_166 := algebra.projection(X_164,X_148);
    X_167 := algebra.projection(X_164,X_149);
    X_168 := algebra.projection(X_164,X_150);
    X_169 := algebra.projection(X_164,X_151);
    sql.resultSet(X_204,X_206,X_208,X_210,X_212,X_166,X_167,X_168,X_169);
end user.s4_1;
#inline               actions= 0 time=3 usec 
#candidates           actions= 1 time=60 usec 
#remap                actions= 0 time=5 usec 
#costModel            actions= 1 time=54 usec 
#coercions            actions= 2 time=57 usec 
#evaluate             actions=11 time=87 usec 
#emptybind            actions= 0 time=6 usec 
#pushselect           actions= 0 time=3 usec 
#aliases              actions=17 time=73 usec 
#mergetable           actions= 0 time=67 usec 
#deadcode             actions=12 time=56 usec 
#aliases              actions= 0 time=14 usec 
#constants            actions=24 time=69 usec 
#commonTerms          actions= 0 time=17 usec 
#projectionpath       actions= 6 time=55 usec 
#reorder              actions= 1 time=90 usec 
#deadcode             actions= 6 time=49 usec 
#reduce               actions=85 time=92 usec 
#matpack              actions= 0 time=6 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=5 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=44 usec 
#garbageCollector     actions= 1 time=54 usec 
#total                actions= 1 time=1042 usec 

# 22:53:29 >  
# 22:53:29 >  "Done."
# 22:53:29 >  

