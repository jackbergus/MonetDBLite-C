stdout of test '16-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:29 >  
# 22:53:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:29 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:29 >  
# 22:53:29 >  "/usr/bin/python2" "16-explain.SQL.py" "16-explain"
# 22:53:29 >  

#set optimizer = 'sequential_pipe';
#explain select
#	p_brand,
#	p_type,
#	p_size,
#	count(distinct ps_suppkey) as supplier_cnt
#from
#	partsupp,
#	part
#where
#	p_partkey = ps_partkey
#	and p_brand <> 'Brand#45'
#	and p_type not like 'MEDIUM POLISHED%'
#	and p_size in (49, 14, 23, 45, 19, 3, 36, 9)
#	and ps_suppkey not in (
#		select
#			s_suppkey
#		from
#			supplier
#		where
#			s_comment like '%Customer%Complaints%'
#	)
#group by
#	p_brand,
#	p_type,
#	p_size
#order by
#	supplier_cnt desc,
#	p_brand,
#	p_type,
#	p_size;
% .explain # table_name
% mal # name
% clob # type
% 577 # length
function user.s2_1{autoCommit=true}(A0:str,A1:str,A2:int,A3:int,A4:int,A5:int,A6:int,A7:int,A8:int,A9:int,A10:str):void;
    X_166 := bat.new(nil:oid,nil:str);
    X_174 := bat.append(X_166,"sys.part");
    X_184 := bat.append(X_174,"sys.part");
    X_191 := bat.append(X_184,"sys.part");
    X_199 := bat.append(X_191,"sys.L4");
    X_169 := bat.new(nil:oid,nil:str);
    X_176 := bat.append(X_169,"p_brand");
    X_185 := bat.append(X_176,"p_type");
    X_192 := bat.append(X_185,"p_size");
    X_201 := bat.append(X_192,"supplier_cnt");
    X_170 := bat.new(nil:oid,nil:str);
    X_178 := bat.append(X_170,"varchar");
    X_187 := bat.append(X_178,"varchar");
    X_194 := bat.append(X_187,"int");
    X_203 := bat.append(X_194,"wrd");
    X_171 := bat.new(nil:oid,nil:int);
    X_180 := bat.append(X_171,10);
    X_188 := bat.append(X_180,25);
    X_196 := bat.append(X_188,32);
    X_205 := bat.append(X_196,64);
    X_173 := bat.new(nil:oid,nil:int);
    X_182 := bat.append(X_173,0);
    X_190 := bat.append(X_182,0);
    X_198 := bat.append(X_190,0);
    X_207 := bat.append(X_198,0);
    X_13 := sql.mvc();
    X_14:bat[:oid,:oid]  := sql.tid(X_13,"sys","partsupp");
    X_17:bat[:oid,:int]  := sql.bind(X_13,"sys","partsupp","ps_suppkey",0);
    (X_20,r1_20) := sql.bind(X_13,"sys","partsupp","ps_suppkey",2);
    X_23:bat[:oid,:int]  := sql.bind(X_13,"sys","partsupp","ps_suppkey",1);
    X_25 := sql.delta(X_17,X_20,r1_20,X_23);
    X_26 := algebra.leftfetchjoin(X_14,X_25);
    X_27 := bat.mirror(X_26);
    X_28:bat[:oid,:oid]  := sql.tid(X_13,"sys","supplier");
    X_30:bat[:oid,:str]  := sql.bind(X_13,"sys","supplier","s_comment",0);
    (X_32,r1_32) := sql.bind(X_13,"sys","supplier","s_comment",2);
    X_34:bat[:oid,:str]  := sql.bind(X_13,"sys","supplier","s_comment",1);
    X_35 := sql.delta(X_30,X_32,r1_32,X_34);
    X_36 := algebra.leftfetchjoin(X_28,X_35);
    X_38 := algebra.likesubselect(X_36,nil:BAT,A10,"",false);
    X_41:bat[:oid,:int]  := sql.bind(X_13,"sys","supplier","s_suppkey",0);
    (X_43,r1_45) := sql.bind(X_13,"sys","supplier","s_suppkey",2);
    X_45:bat[:oid,:int]  := sql.bind(X_13,"sys","supplier","s_suppkey",1);
    X_47 := sql.delta(X_41,X_43,r1_45,X_45);
    X_48:bat[:oid,:int]  := algebra.leftfetchjoinPath(X_38,X_28,X_47);
    (X_49,r1_52) := algebra.subjoin(X_26,X_48,nil:BAT,nil:BAT,true,nil:lng);
    X_53 := algebra.tdiff(X_27,X_49);
    X_54:bat[:oid,:oid]  := sql.bind_idxbat(X_13,"sys","partsupp","partsupp_ps_partkey_fkey",0);
    (X_58,r1_61) := sql.bind_idxbat(X_13,"sys","partsupp","partsupp_ps_partkey_fkey",2);
    X_61:bat[:oid,:oid]  := sql.bind_idxbat(X_13,"sys","partsupp","partsupp_ps_partkey_fkey",1);
    X_63 := sql.delta(X_54,X_58,r1_61,X_61);
    X_64:bat[:oid,:oid]  := algebra.leftfetchjoinPath(X_53,X_14,X_63);
    X_65:bat[:oid,:oid]  := sql.tid(X_13,"sys","part");
    X_67:bat[:oid,:int]  := sql.bind(X_13,"sys","part","p_size",0);
    (X_69,r1_73) := sql.bind(X_13,"sys","part","p_size",2);
    X_71:bat[:oid,:int]  := sql.bind(X_13,"sys","part","p_size",1);
    X_72 := sql.delta(X_67,X_69,r1_73,X_71);
    X_73 := algebra.leftfetchjoin(X_65,X_72);
    X_74:bat[:oid,:str]  := sql.bind(X_13,"sys","part","p_type",0);
    (X_76,r1_81) := sql.bind(X_13,"sys","part","p_type",2);
    X_79:bat[:oid,:str]  := sql.bind(X_13,"sys","part","p_type",1);
    X_80 := sql.delta(X_74,X_76,r1_81,X_79);
    X_81 := algebra.leftfetchjoin(X_65,X_80);
    X_83:bat[:oid,:str]  := sql.bind(X_13,"sys","part","p_brand",0);
    (X_85,r1_92) := sql.bind(X_13,"sys","part","p_brand",2);
    X_87:bat[:oid,:str]  := sql.bind(X_13,"sys","part","p_brand",1);
    X_88 := sql.delta(X_83,X_85,r1_92,X_87);
    X_89 := algebra.leftfetchjoin(X_65,X_88);
    X_90 := algebra.subselect(X_89,A0,A0,true,true,true);
    X_92 := algebra.likesubselect(X_81,X_90,A1,"",true);
    X_93 := algebra.subselect(X_73,X_92,A2,A2,true,true,false);
    X_95 := algebra.subselect(X_73,X_92,A3,A3,true,true,false);
    X_96 := bat.mergecand(X_93,X_95);
    X_97 := algebra.subselect(X_73,X_92,A4,A4,true,true,false);
    X_98 := bat.mergecand(X_96,X_97);
    X_99 := algebra.subselect(X_73,X_92,A5,A5,true,true,false);
    X_100 := bat.mergecand(X_98,X_99);
    X_101 := algebra.subselect(X_73,X_92,A6,A6,true,true,false);
    X_102 := bat.mergecand(X_100,X_101);
    X_103 := algebra.subselect(X_73,X_92,A7,A7,true,true,false);
    X_104 := bat.mergecand(X_102,X_103);
    X_105 := algebra.subselect(X_73,X_92,A8,A8,true,true,false);
    X_106 := bat.mergecand(X_104,X_105);
    X_107 := algebra.subselect(X_73,X_92,A9,A9,true,true,false);
    X_108 := bat.mergecand(X_106,X_107);
    X_109 := algebra.leftfetchjoin(X_108,X_65);
    (X_110,r1_125) := algebra.subjoin(X_64,X_109,nil:BAT,nil:BAT,true,nil:lng);
    X_233 := algebra.leftfetchjoin(r1_125,X_108);
    X_114:bat[:oid,:str]  := algebra.leftfetchjoin(X_233,X_81);
    X_115:bat[:oid,:str]  := algebra.leftfetchjoin(X_233,X_89);
    X_116:bat[:oid,:int]  := algebra.leftfetchjoin(X_233,X_73);
    X_117:bat[:oid,:int]  := algebra.leftfetchjoinPath(X_110,X_53,X_26);
    (X_118,r1_137,r2_137) := group.subgroup(X_117);
    (X_121,r1_140,r2_140) := group.subgroup(X_116,X_118);
    (X_124,r1_143,r2_143) := group.subgroup(X_115,X_121);
    (X_127,r1_146,r2_146) := group.subgroupdone(X_114,X_124);
    X_130 := algebra.leftfetchjoin(r1_146,X_114);
    X_131 := algebra.leftfetchjoin(r1_146,X_115);
    X_132 := algebra.leftfetchjoin(r1_146,X_116);
    X_145 := algebra.leftfetchjoin(r1_146,X_117);
    (X_133,r1_152,r2_152) := group.subgroup(X_132);
    (X_136,r1_155,r2_155) := group.subgroup(X_131,X_133);
    (X_139,r1_158,r2_158) := group.subgroupdone(X_130,X_136);
    X_142 := algebra.leftfetchjoin(r1_158,X_132);
    X_143 := algebra.leftfetchjoin(r1_158,X_130);
    X_144 := algebra.leftfetchjoin(r1_158,X_131);
    X_146:bat[:oid,:wrd]  := aggr.subcount(X_145,X_139,r1_158,true);
    (X_148,r1_167,r2_167) := algebra.subsort(X_146,true,false);
    (X_152,r1_171,r2_171) := algebra.subsort(X_144,r1_167,r2_167,false,false);
    (X_155,r1_174,r2_174) := algebra.subsort(X_143,r1_171,r2_171,false,false);
    (X_158,r1_177,r2_177) := algebra.subsort(X_142,r1_174,r2_174,false,false);
    X_161 := algebra.leftfetchjoin(r1_177,X_144);
    X_162 := algebra.leftfetchjoin(r1_177,X_143);
    X_163 := algebra.leftfetchjoin(r1_177,X_142);
    X_164 := algebra.leftfetchjoin(r1_177,X_146);
    sql.resultSet(X_199,X_201,X_203,X_205,X_207,X_161,X_162,X_163,X_164);
end s2_1;
# querylog.define("explain select\n\tp_brand,\n\tp_type,\n\tp_size,\n\tcount(distinct ps_suppkey) as supplier_cnt\nfrom\n\tpartsupp,\n\tpart\nwhere\n\tp_partkey = ps_partkey\n\tand p_brand <> \\'Brand#45\\'\n\tand p_type not like \\'MEDIUM POLISHED%\\'\n\tand p_size in (49, 14, 23, 45, 19, 3, 36, 9)\n\tand ps_suppkey not in (\n\t\tselect\n\t\t\ts_suppkey\n\t\tfrom\n\t\t\tsupplier\n\t\twhere\n\t\t\ts_comment like \\'%Customer%Complaints%\\'\n\t)\ngroup by\n\tp_brand,\n\tp_type,\n\tp_size\norder by\n\tsupplier_cnt desc,\n\tp_brand,\n\tp_type,\n\tp_size;","sequential_pipe")

# 22:53:29 >  
# 22:53:29 >  "Done."
# 22:53:29 >  

