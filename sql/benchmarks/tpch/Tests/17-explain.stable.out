stdout of test '17-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:29 >  
# 22:53:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:29 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2014 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:29 >  
# 22:53:29 >  "/usr/bin/python2" "17-explain.SQL.py" "17-explain"
# 22:53:29 >  

#set optimizer = 'sequential_pipe';
#explain select
#	sum(l_extendedprice) / 7.0 as avg_yearly
#from
#	lineitem,
#	part
#where
#	p_partkey = l_partkey
#	and p_brand = 'Brand#23'
#	and p_container = 'MED BOX'
#	and l_quantity < (
#		select
#			0.2 * avg(l_quantity)
#		from
#			lineitem
#		where
#			l_partkey = p_partkey
#	);
% .explain # table_name
% mal # name
% clob # type
% 358 # length
function user.s2_1{autoCommit=true}(A0:bte,A1:str,A2:str,A3:dbl):void;
    X_6 := sql.mvc();
    X_7:bat[:oid,:oid]  := sql.tid(X_6,"sys","lineitem");
    X_10 := sql.bind_idxbat(X_6,"sys","lineitem","lineitem_l_partkey_fkey",0);
    (X_13,r1_13) := sql.bind_idxbat(X_6,"sys","lineitem","lineitem_l_partkey_fkey",2);
    X_16 := sql.bind_idxbat(X_6,"sys","lineitem","lineitem_l_partkey_fkey",1);
    X_18 := sql.projectdelta(X_7,X_10,X_13,r1_13,X_16);
    X_21 := sql.bind(X_6,"sys","part","p_container",0);
    X_26 := sql.bind(X_6,"sys","part","p_brand",0);
    X_19:bat[:oid,:oid]  := sql.tid(X_6,"sys","part");
    X_128 := algebra.subselect(X_26,X_19,A1,A1,true,true,false);
    (X_28,r1_32) := sql.bind(X_6,"sys","part","p_brand",2);
    X_129 := algebra.subselect(r1_32,A1,A1,true,true,false);
    X_30 := sql.bind(X_6,"sys","part","p_brand",1);
    X_130 := algebra.subselect(X_30,X_19,A1,A1,true,true,false);
    X_31 := sql.subdelta(X_128,X_19,X_28,X_129,X_130);
    X_131 := algebra.subselect(X_21,X_31,A2,A2,true,true,false);
    (X_23,r1_24) := sql.bind(X_6,"sys","part","p_container",2);
    X_132 := algebra.subselect(r1_24,A2,A2,true,true,false);
    X_25 := sql.bind(X_6,"sys","part","p_container",1);
    X_133 := algebra.subselect(X_25,X_31,A2,A2,true,true,false);
    X_34 := sql.subdelta(X_131,X_31,X_23,X_132,X_133);
    X_35 := X_34;
    (X_36,r1_43) := algebra.join(X_18,X_35);
    X_38 := sql.bind(X_6,"sys","part","p_partkey",0);
    (X_42,r1_49) := sql.bind(X_6,"sys","part","p_partkey",2);
    X_45 := sql.bind(X_6,"sys","part","p_partkey",1);
    X_47 := sql.projectdelta(X_34,X_38,X_42,r1_49,X_45);
    X_48 := algebra.leftfetchjoin(r1_43,X_47);
    X_50 := sql.bind(X_6,"sys","lineitem","l_partkey",0);
    (X_52,r1_62) := sql.bind(X_6,"sys","lineitem","l_partkey",2);
    X_54 := sql.bind(X_6,"sys","lineitem","l_partkey",1);
    X_55 := sql.projectdelta(X_7,X_50,X_52,r1_62,X_54);
    (X_56,r1_67,r2_67) := group.subgroupdone(X_55);
    X_59 := algebra.leftfetchjoin(r1_67,X_55);
    X_62 := sql.bind(X_6,"sys","lineitem","l_quantity",0);
    (X_64,r1_75) := sql.bind(X_6,"sys","lineitem","l_quantity",2);
    X_66 := sql.bind(X_6,"sys","lineitem","l_quantity",1);
    X_67 := sql.projectdelta(X_7,X_62,X_64,r1_75,X_66);
    X_74 := batcalc.dbl(X_67);
    X_75:bat[:oid,:dbl]  := aggr.subavg(X_74,X_56,r1_67,true,true);
    (X_60,r1_71) := algebra.join(X_48,X_59);
    X_134 := algebra.leftfetchjoin(X_60,X_36);
    X_68:bat[:oid,:int]  := algebra.leftfetchjoin(X_134,X_67);
    X_69 := batcalc.dbl(X_68);
    X_77 := algebra.leftfetchjoin(r1_71,X_75);
    X_78:bat[:oid,:dbl]  := batcalc.*(A3,X_77);
    X_79:bat[:oid,:bit]  := batcalc.<(X_69,X_78);
    X_80 := algebra.subselect(X_79,true,true,true,true,false);
    X_82 := sql.bind(X_6,"sys","lineitem","l_extendedprice",0);
    (X_85,r1_108) := sql.bind(X_6,"sys","lineitem","l_extendedprice",2);
    X_87 := sql.bind(X_6,"sys","lineitem","l_extendedprice",1);
    X_88 := sql.projectdelta(X_7,X_82,X_85,r1_108,X_87);
    X_89:bat[:oid,:lng]  := algebra.leftfetchjoinPath(X_80,X_134,X_88);
    X_90:lng  := aggr.sum(X_89);
    X_91 := calc.lng(2,X_90,18,5);
    X_94 := calc.lng(1,A0,15,2);
    X_97 := calc./(X_91,X_94);
    sql.exportValue(1,"sys.L3","avg_yearly","decimal",18,3,8,X_97,"");
end s2_1;
# querylog.define("explain select\n\tsum(l_extendedprice) / 7.0 as avg_yearly\nfrom\n\tlineitem,\n\tpart\nwhere\n\tp_partkey = l_partkey\n\tand p_brand = \\'Brand#23\\'\n\tand p_container = \\'MED BOX\\'\n\tand l_quantity < (\n\t\tselect\n\t\t\t0.2 * avg(l_quantity)\n\t\tfrom\n\t\t\tlineitem\n\t\twhere\n\t\t\tl_partkey = p_partkey\n\t);","sequential_pipe")

# 22:53:29 >  
# 22:53:29 >  "Done."
# 22:53:29 >  

