stdout of test '01-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:25 >  
# 22:53:25 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:25 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:25 >  
# 22:53:25 >  "/usr/bin/python2" "01-explain.SQL.py" "01-explain"
# 22:53:25 >  

#set optimizer = 'sequential_pipe';
#explain select
#	l_returnflag,
#	l_linestatus,
#	sum(l_quantity) as sum_qty,
#	sum(l_extendedprice) as sum_base_price,
#	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
#	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
#	avg(l_quantity) as avg_qty,
#	avg(l_extendedprice) as avg_price,
#	avg(l_discount) as avg_disc,
#	count(*) as count_order
#from
#	lineitem
#where
#	l_shipdate <= date '1998-12-01' - interval '90' day (3)
#group by
#	l_returnflag,
#	l_linestatus
#order by
#	l_returnflag,
#	l_linestatus;
% .explain # table_name
% mal # name
% clob # type
% 124 # length
function user.main():void;
    X_1244 := bat.new(nil:str);
    X_1251 := bat.append(X_1244,"sys.lineitem");
    X_1261 := bat.append(X_1251,"sys.lineitem");
    X_1267 := bat.append(X_1261,"sys.L2");
    X_1277 := bat.append(X_1267,"sys.L4");
    X_1284 := bat.append(X_1277,"sys.L6");
    X_1292 := bat.append(X_1284,"sys.L10");
    X_1300 := bat.append(X_1292,"sys.L12");
    X_1310 := bat.append(X_1300,"sys.L14");
    X_1317 := bat.append(X_1310,"sys.L16");
    X_1324 := bat.append(X_1317,"sys.L20");
    X_1246 := bat.new(nil:str);
    X_1253 := bat.append(X_1246,"l_returnflag");
    X_1262 := bat.append(X_1253,"l_linestatus");
    X_1269 := bat.append(X_1262,"sum_qty");
    X_1279 := bat.append(X_1269,"sum_base_price");
    X_1286 := bat.append(X_1279,"sum_disc_price");
    X_1294 := bat.append(X_1286,"sum_charge");
    X_1302 := bat.append(X_1294,"avg_qty");
    X_1312 := bat.append(X_1302,"avg_price");
    X_1319 := bat.append(X_1312,"avg_disc");
    X_1326 := bat.append(X_1319,"count_order");
    X_1247 := bat.new(nil:str);
    X_1255 := bat.append(X_1247,"char");
    X_1264 := bat.append(X_1255,"char");
    X_1271 := bat.append(X_1264,"decimal");
    X_1281 := bat.append(X_1271,"decimal");
    X_1288 := bat.append(X_1281,"decimal");
    X_1296 := bat.append(X_1288,"decimal");
    X_1304 := bat.append(X_1296,"double");
    X_1314 := bat.append(X_1304,"double");
    X_1321 := bat.append(X_1314,"double");
    X_1328 := bat.append(X_1321,"bigint");
    X_1248 := bat.new(nil:int);
    X_1257 := bat.append(X_1248,1);
    X_1265 := bat.append(X_1257,1);
    X_1273 := bat.append(X_1265,19);
    X_1282 := bat.append(X_1273,19);
    X_1289 := bat.append(X_1282,19);
    X_1297 := bat.append(X_1289,19);
    X_1306 := bat.append(X_1297,53);
    X_1315 := bat.append(X_1306,53);
    X_1322 := bat.append(X_1315,53);
    X_1330 := bat.append(X_1322,64);
    X_1250 := bat.new(nil:int);
    X_1259 := bat.append(X_1250,0);
    X_1266 := bat.append(X_1259,0);
    X_1275 := bat.append(X_1266,2);
    X_1283 := bat.append(X_1275,2);
    X_1290 := bat.append(X_1283,4);
    X_1298 := bat.append(X_1290,6);
    X_1308 := bat.append(X_1298,0);
    X_1316 := bat.append(X_1308,0);
    X_1323 := bat.append(X_1316,0);
    X_1332 := bat.append(X_1323,0);
    X_1113 := sql.mvc();
    X_1117:bat[:date] := sql.bind(X_1113,"sys","lineitem","l_shipdate",0);
    C_1114:bat[:oid] := sql.tid(X_1113,"sys","lineitem");
    X_1129:date := mtime.date_sub_msec_interval("1998-12-01",7776000000);
    C_1130 := algebra.thetasubselect(X_1117,C_1114,X_1129,"<=");
    X_1132:bat[:str] := sql.bind(X_1113,"sys","lineitem","l_linestatus",0);
    X_1139 := algebra.projection(C_1130,X_1132);
    X_1140:bat[:str] := sql.bind(X_1113,"sys","lineitem","l_returnflag",0);
    X_1147 := algebra.projection(C_1130,X_1140);
    (X_1148,r1_44,r2_44) := group.subgroup(X_1147);
    (X_1151,r1_47,r2_47) := group.subgroupdone(X_1139,X_1148);
    X_1154 := algebra.projection(r1_47,X_1139);
    X_1155 := algebra.projection(r1_47,X_1147);
    X_1166:bat[:lng] := sql.bind(X_1113,"sys","lineitem","l_quantity",0);
    X_1173 := algebra.projection(C_1130,X_1166);
    X_1174:bat[:lng] := aggr.subsum(X_1173,X_1151,r1_47,true,true);
    X_1178:bat[:lng] := sql.bind(X_1113,"sys","lineitem","l_extendedprice",0);
    X_1185 := algebra.projection(C_1130,X_1178);
    X_1186:bat[:lng] := aggr.subsum(X_1185,X_1151,r1_47,true,true);
    X_1192:bat[:lng] := sql.bind(X_1113,"sys","lineitem","l_discount",0);
    X_1199 := algebra.projection(C_1130,X_1192);
    X_1200:bat[:lng] := batcalc.-(100:lng,X_1199);
    X_1203:bat[:lng] := batcalc.*(X_1185,X_1200);
    X_1205:bat[:lng] := aggr.subsum(X_1203,X_1151,r1_47,true,true);
    X_1211:bat[:lng] := sql.bind(X_1113,"sys","lineitem","l_tax",0);
    X_1218 := algebra.projection(C_1130,X_1211);
    X_1221:bat[:lng] := batcalc.+(X_1218,100:lng);
    X_1223:bat[:lng] := batcalc.*(X_1203,X_1221);
    X_1224:bat[:lng] := aggr.subsum(X_1223,X_1151,r1_47,true,true);
    X_1228:bat[:dbl] := batcalc.dbl(2,X_1173);
    X_1231:bat[:dbl] := aggr.subavg(X_1228,X_1151,r1_47,true,true);
    X_1233:bat[:dbl] := batcalc.dbl(2,X_1185);
    X_1235:bat[:dbl] := aggr.subavg(X_1233,X_1151,r1_47,true,true);
    X_1237:bat[:dbl] := batcalc.dbl(2,X_1199);
    X_1238:bat[:dbl] := aggr.subavg(X_1237,X_1151,r1_47,true,true);
    X_1240:bat[:lng] := aggr.subcount(X_1151,X_1151,r1_47,false);
    (X_1156,r1_52,r2_52) := algebra.subsort(X_1155,false,false);
    (X_1161,r1_57,r2_57) := algebra.subsort(X_1154,r1_52,r2_52,false,false);
    X_1164 := algebra.projection(r1_57,X_1155);
    X_1165 := algebra.projection(r1_57,X_1154);
    X_1177 := algebra.projection(r1_57,X_1174);
    X_1187 := algebra.projection(r1_57,X_1186);
    X_1206 := algebra.projection(r1_57,X_1205);
    X_1227 := algebra.projection(r1_57,X_1224);
    X_1232 := algebra.projection(r1_57,X_1231);
    X_1236 := algebra.projection(r1_57,X_1235);
    X_1239 := algebra.projection(r1_57,X_1238);
    X_1242 := algebra.projection(r1_57,X_1240);
    sql.resultSet(X_1324,X_1326,X_1328,X_1330,X_1332,X_1164,X_1165,X_1177,X_1187,X_1206,X_1227,X_1232,X_1236,X_1239,X_1242);
end user.main;
#inline               actions= 0 time=7 usec 
#remap                actions= 9 time=95 usec 
#costmodel            actions= 1 time=7 usec 
#coercion             actions= 0 time=5 usec 
#evaluate             actions=13 time=51 usec 
#emptybind            actions=21 time=48 usec 
#aliases              actions=27 time=27 usec 
#mergetable           actions= 0 time=108 usec 
#deadcode             actions=21 time=18 usec 
#aliases              actions= 0 time=14 usec 
#constants            actions=23 time=43 usec 
#commonTerms          actions= 2 time=27 usec 
#projectionpath       actions= 0 time=10 usec 
#reorder              actions= 1 time=60 usec 
#deadcode             actions= 2 time=12 usec 
#reduce               actions=114 time=30 usec 
#matpack              actions= 0 time=3 usec 
#multiplex            actions= 0 time=3 usec 
#profiler             actions= 1 time=5 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=34 usec 
#total                actions= 1 time=840 usec 

# 22:53:25 >  
# 22:53:25 >  "Done."
# 22:53:25 >  

