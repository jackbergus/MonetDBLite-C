stdout of test '01-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:25 >  
# 22:53:25 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:25 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:25 >  
# 22:53:25 >  "/usr/bin/python2" "01-explain.SQL.py" "01-explain"
# 22:53:25 >  

#set optimizer = 'sequential_pipe';
#explain select
#	l_returnflag,
#	l_linestatus,
#	sum(l_quantity) as sum_qty,
#	sum(l_extendedprice) as sum_base_price,
#	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
#	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
#	avg(l_quantity) as avg_qty,
#	avg(l_extendedprice) as avg_price,
#	avg(l_discount) as avg_disc,
#	count(*) as count_order
#from
#	lineitem
#where
#	l_shipdate <= date '1998-12-01' - interval '90' day (3)
#group by
#	l_returnflag,
#	l_linestatus
#order by
#	l_returnflag,
#	l_linestatus;
% .explain # table_name
% mal # name
% clob # type
% 109 # length
function user.main():void;
    X_137 := bat.new(nil:str);
    X_144 := bat.append(X_137,"sys.lineitem");
    X_154 := bat.append(X_144,"sys.lineitem");
    X_160 := bat.append(X_154,"sys.L5");
    X_170 := bat.append(X_160,"sys.L10");
    X_177 := bat.append(X_170,"sys.L13");
    X_185 := bat.append(X_177,"sys.L16");
    X_193 := bat.append(X_185,"sys.L21");
    X_203 := bat.append(X_193,"sys.L24");
    X_210 := bat.append(X_203,"sys.L27");
    X_217 := bat.append(X_210,"sys.L32");
    X_139 := bat.new(nil:str);
    X_146 := bat.append(X_139,"l_returnflag");
    X_155 := bat.append(X_146,"l_linestatus");
    X_162 := bat.append(X_155,"sum_qty");
    X_172 := bat.append(X_162,"sum_base_price");
    X_179 := bat.append(X_172,"sum_disc_price");
    X_187 := bat.append(X_179,"sum_charge");
    X_195 := bat.append(X_187,"avg_qty");
    X_205 := bat.append(X_195,"avg_price");
    X_212 := bat.append(X_205,"avg_disc");
    X_219 := bat.append(X_212,"count_order");
    X_140 := bat.new(nil:str);
    X_148 := bat.append(X_140,"char");
    X_157 := bat.append(X_148,"char");
    X_164 := bat.append(X_157,"decimal");
    X_174 := bat.append(X_164,"decimal");
    X_181 := bat.append(X_174,"decimal");
    X_189 := bat.append(X_181,"decimal");
    X_197 := bat.append(X_189,"double");
    X_207 := bat.append(X_197,"double");
    X_214 := bat.append(X_207,"double");
    X_221 := bat.append(X_214,"bigint");
    X_141 := bat.new(nil:int);
    X_150 := bat.append(X_141,1);
    X_158 := bat.append(X_150,1);
    X_166 := bat.append(X_158,19);
    X_175 := bat.append(X_166,19);
    X_182 := bat.append(X_175,19);
    X_190 := bat.append(X_182,19);
    X_199 := bat.append(X_190,53);
    X_208 := bat.append(X_199,53);
    X_215 := bat.append(X_208,53);
    X_223 := bat.append(X_215,64);
    X_143 := bat.new(nil:int);
    X_152 := bat.append(X_143,0);
    X_159 := bat.append(X_152,0);
    X_168 := bat.append(X_159,2);
    X_176 := bat.append(X_168,2);
    X_183 := bat.append(X_176,4);
    X_191 := bat.append(X_183,6);
    X_201 := bat.append(X_191,0);
    X_209 := bat.append(X_201,0);
    X_216 := bat.append(X_209,0);
    X_225 := bat.append(X_216,0);
    X_11 := sql.mvc();
    X_60:bat[:date] := sql.bind(X_11,"sys","lineitem","l_shipdate",0);
    C_12:bat[:oid] := sql.tid(X_11,"sys","lineitem");
    X_69:date := mtime.date_sub_msec_interval("1998-12-01",7776000000);
    C_70 := algebra.thetasubselect(X_60,C_12,X_69,"<=");
    X_53:bat[:str] := sql.bind(X_11,"sys","lineitem","l_linestatus",0);
    X_77 := algebra.projection(C_70,X_53);
    X_46:bat[:str] := sql.bind(X_11,"sys","lineitem","l_returnflag",0);
    X_76 := algebra.projection(C_70,X_46);
    (X_101,X_102,X_103) := group.subgroup(X_76);
    (X_104,X_105,X_106) := group.subgroupdone(X_77,X_101);
    X_107 := algebra.projection(X_105,X_76);
    X_108 := algebra.projection(X_105,X_77);
    X_15:bat[:lng] := sql.bind(X_11,"sys","lineitem","l_quantity",0);
    X_72 := algebra.projection(C_70,X_15);
    X_109:bat[:lng] := aggr.subsum(X_72,X_104,X_105,true,true);
    X_25:bat[:lng] := sql.bind(X_11,"sys","lineitem","l_extendedprice",0);
    X_73 := algebra.projection(C_70,X_25);
    X_112:bat[:lng] := aggr.subsum(X_73,X_104,X_105,true,true);
    X_32:bat[:lng] := sql.bind(X_11,"sys","lineitem","l_discount",0);
    X_74 := algebra.projection(C_70,X_32);
    X_83:bat[:lng] := batcalc.-(100:lng,X_74);
    X_86:bat[:lng] := batcalc.*(X_73,X_83);
    X_113:bat[:lng] := aggr.subsum(X_86,X_104,X_105,true,true);
    X_39:bat[:lng] := sql.bind(X_11,"sys","lineitem","l_tax",0);
    X_75 := algebra.projection(C_70,X_39);
    X_94:bat[:lng] := batcalc.+(X_75,100:lng);
    X_96:bat[:lng] := batcalc.*(X_86,X_94);
    X_114:bat[:lng] := aggr.subsum(X_96,X_104,X_105,true,true);
    X_97:bat[:dbl] := batcalc.dbl(2,X_72);
    X_115:bat[:dbl] := aggr.subavg(X_97,X_104,X_105,true,true);
    X_99:bat[:dbl] := batcalc.dbl(2,X_73);
    X_116:bat[:dbl] := aggr.subavg(X_99,X_104,X_105,true,true);
    X_100:bat[:dbl] := batcalc.dbl(2,X_74);
    X_117:bat[:dbl] := aggr.subavg(X_100,X_104,X_105,true,true);
    X_118:bat[:lng] := aggr.subcount(X_104,X_104,X_105,false);
    (X_120,X_121,X_122) := algebra.subsort(X_107,false,false);
    (X_123,X_124,X_125) := algebra.subsort(X_108,X_121,X_122,false,false);
    X_126 := algebra.projection(X_124,X_107);
    X_127 := algebra.projection(X_124,X_108);
    X_128 := algebra.projection(X_124,X_109);
    X_129 := algebra.projection(X_124,X_112);
    X_130 := algebra.projection(X_124,X_113);
    X_131 := algebra.projection(X_124,X_114);
    X_132 := algebra.projection(X_124,X_115);
    X_133 := algebra.projection(X_124,X_116);
    X_134 := algebra.projection(X_124,X_117);
    X_135 := algebra.projection(X_124,X_118);
    sql.resultSet(X_217,X_219,X_221,X_223,X_225,X_126,X_127,X_128,X_129,X_130,X_131,X_132,X_133,X_134,X_135);
end user.main;
#inline               actions= 0 time=7 usec 
#remap                actions= 9 time=95 usec 
#costmodel            actions= 1 time=7 usec 
#coercion             actions= 0 time=5 usec 
#evaluate             actions=13 time=51 usec 
#emptybind            actions=21 time=48 usec 
#aliases              actions=27 time=27 usec 
#mergetable           actions= 0 time=108 usec 
#deadcode             actions=21 time=18 usec 
#aliases              actions= 0 time=14 usec 
#constants            actions=23 time=43 usec 
#commonTerms          actions= 2 time=27 usec 
#projectionpath       actions= 0 time=10 usec 
#reorder              actions= 1 time=60 usec 
#deadcode             actions= 2 time=12 usec 
#reduce               actions=114 time=30 usec 
#matpack              actions= 0 time=3 usec 
#multiplex            actions= 0 time=3 usec 
#profiler             actions= 1 time=5 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=34 usec 
#total                actions= 1 time=840 usec 

# 22:53:25 >  
# 22:53:25 >  "Done."
# 22:53:25 >  

