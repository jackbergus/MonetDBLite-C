stdout of test '18-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:30 >  
# 22:53:30 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:30 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:30 >  
# 22:53:30 >  "/usr/bin/python2" "18-explain.SQL.py" "18-explain"
# 22:53:30 >  

#set optimizer = 'sequential_pipe';
#explain select
#	c_name,
#	c_custkey,
#	o_orderkey,
#	o_orderdate,
#	o_totalprice,
#	sum(l_quantity)
#from
#	customer,
#	orders,
#	lineitem
#where
#	o_orderkey in (
#		select
#			l_orderkey
#		from
#			lineitem
#		group by
#			l_orderkey having
#				sum(l_quantity) > 300
#	)
#	and c_custkey = o_custkey
#	and o_orderkey = l_orderkey
#group by
#	c_name,
#	c_custkey,
#	o_orderkey,
#	o_orderdate,
#	o_totalprice
#order by
#	o_totalprice desc,
#	o_orderdate
#limit 100;
% .explain # table_name
% mal # name
% clob # type
% 514 # length
function user.s4_1():void;
    X_149:void := querylog.define("explain select\n c_name,\n c_custkey,\n o_orderkey,\n o_orderdate,\n o_totalprice,\n sum(l_quantity)\nfrom\n customer,\n orders,\n lineitem\nwhere\n o_orderkey in (\n select\n l_orderkey\n from\n lineitem\n group by\n l_orderkey having\n sum(l_quantity) > 300\n )\n and c_custkey = o_custkey\n and o_orderkey = l_orderkey\ngroup by\n c_name,\n c_custkey,\n o_orderkey,\n o_orderdate,\n o_totalprice\norder by\n o_totalprice desc,\n o_orderdate\nlimit 100;","sequential_pipe",97);
    X_100 := bat.new(nil:oid,nil:str);
    X_108 := bat.append(X_100,"sys.customer");
    X_116 := bat.append(X_108,"sys.customer");
    X_123 := bat.append(X_116,"sys.orders");
    X_129 := bat.append(X_123,"sys.orders");
    X_135 := bat.append(X_129,"sys.orders");
    X_142 := bat.append(X_135,"sys.L6");
    X_103 := bat.new(nil:oid,nil:str);
    X_110 := bat.append(X_103,"c_name");
    X_117 := bat.append(X_110,"c_custkey");
    X_125 := bat.append(X_117,"o_orderkey");
    X_130 := bat.append(X_125,"o_orderdate");
    X_136 := bat.append(X_130,"o_totalprice");
    X_144 := bat.append(X_136,"L6");
    X_104 := bat.new(nil:oid,nil:str);
    X_111 := bat.append(X_104,"varchar");
    X_118 := bat.append(X_111,"int");
    X_126 := bat.append(X_118,"int");
    X_131 := bat.append(X_126,"date");
    X_137 := bat.append(X_131,"decimal");
    X_146 := bat.append(X_137,"decimal");
    X_105 := bat.new(nil:oid,nil:int);
    X_113 := bat.append(X_105,25);
    X_120 := bat.append(X_113,32);
    X_127 := bat.append(X_120,32);
    X_133 := bat.append(X_127,0);
    X_139 := bat.append(X_133,15);
    X_147 := bat.append(X_139,39);
    X_107 := bat.new(nil:oid,nil:int);
    X_115 := bat.append(X_107,0);
    X_122 := bat.append(X_115,0);
    X_128 := bat.append(X_122,0);
    X_134 := bat.append(X_128,0);
    X_141 := bat.append(X_134,2);
    X_148 := bat.append(X_141,2);
    X_1 := sql.mvc();
    C_2:bat[:oid] := sql.tid(X_1,"sys","orders");
    X_5:bat[:int] := sql.bind(X_1,"sys","orders","o_orderkey",0);
    X_10 := algebra.projection(C_2,X_5);
    X_11 := bat.mirror(X_10);
    C_12:bat[:oid] := sql.tid(X_1,"sys","lineitem");
    X_14:bat[:lng] := sql.bind(X_1,"sys","lineitem","l_quantity",0);
    X_16 := algebra.projection(C_12,X_14);
    X_17:bat[:int] := sql.bind(X_1,"sys","lineitem","l_orderkey",0);
    X_19 := algebra.projection(C_12,X_17);
    (X_20,r1_33,r2_33) := group.subgroupdone(X_19);
    X_23:bat[:hge] := aggr.subsum(X_16,X_20,r1_33,true,true);
    X_28 := algebra.projection(r1_33,X_19);
    C_26 := algebra.thetasubselect(X_23,30000:hge,">");
    X_29 := bat.setKey(X_28,true);
    X_30 := algebra.projection(C_26,X_29);
    (X_31,r1_47) := algebra.subjoin(X_10,X_30,nil:BAT,nil:BAT,false,nil:lng);
    C_36 := algebra.subinter(X_11,X_31,nil:BAT,nil:BAT,false,nil:lng);
    X_37 := algebra.projection(C_36,X_10);
    (X_38,r1_63) := algebra.subjoin(X_37,X_19,nil:BAT,nil:BAT,false,nil:lng);
    X_40:bat[:oid] := sql.bind_idxbat(X_1,"sys","orders","orders_o_custkey_fkey",0);
    (X_42,r1_67) := sql.bind_idxbat(X_1,"sys","orders","orders_o_custkey_fkey",2);
    X_44:bat[:oid] := sql.bind_idxbat(X_1,"sys","orders","orders_o_custkey_fkey",1);
    X_45 := sql.delta(X_40,X_42,r1_67,X_44);
    X_46:bat[:oid] := algebra.projectionpath(X_38,C_36,C_2,X_45);
    C_47:bat[:oid] := sql.tid(X_1,"sys","customer");
    (X_49,r1_76) := algebra.subjoin(X_46,C_47,nil:BAT,nil:BAT,false,nil:lng);
    X_51:bat[:int] := sql.bind(X_1,"sys","customer","c_custkey",0);
    X_53 := algebra.projection(C_47,X_51);
    X_54 := algebra.projection(r1_76,X_53);
    X_55:bat[:int] := algebra.projectionpath(X_49,X_38,X_37);
    (X_56,r1_88,r2_88) := group.subgroup(X_55);
    (X_59,r1_91,r2_91) := group.subgroupdone(X_54,X_56);
    X_62 := algebra.projection(r1_91,X_54);
    (X_63,r1_102) := algebra.subjoin(X_62,X_53,nil:BAT,nil:BAT,false,nil:lng);
    X_65:bat[:int] := algebra.projectionpath(X_63,r1_91,X_55);
    X_96:bat[:lng] := algebra.projectionpath(X_49,r1_63,X_16);
    X_97:bat[:hge] := aggr.subsum(X_96,X_59,r1_91,true,true);
    (X_66,r1_118) := algebra.subjoin(X_65,X_10,nil:BAT,nil:BAT,false,nil:lng);
    X_68:bat[:date] := sql.bind(X_1,"sys","orders","o_orderdate",0);
    X_70:bat[:date] := algebra.projectionpath(r1_118,C_2,X_68);
    X_71:bat[:lng] := sql.bind(X_1,"sys","orders","o_totalprice",0);
    X_73:bat[:lng] := algebra.projectionpath(r1_118,C_2,X_71);
    (C_76,r1_141) := algebra.firstn(X_73,100,false,false);
    C_78 := algebra.firstn(X_70,C_76,r1_141,100,true,false);
    X_79 := algebra.projection(C_78,X_70);
    X_80 := algebra.projection(C_78,X_73);
    (X_81,r1_151,r2_151) := algebra.subsort(X_80,true,false);
    (X_84,r1_154,r2_154) := algebra.subsort(X_79,r1_151,r2_151,false,false);
    X_87:bat[:str] := sql.bind(X_1,"sys","customer","c_name",0);
    X_89:bat[:str] := algebra.projectionpath(r1_154,C_78,X_66,r1_102,C_47,X_87);
    X_90 := algebra.subslice(X_89,0,99:wrd);
    X_91 := algebra.projection(X_90,X_89);
    X_92:bat[:int] := algebra.projectionpath(X_90,r1_154,C_78,X_66,X_63,X_62);
    X_93:bat[:int] := algebra.projectionpath(X_90,r1_154,C_78,X_66,X_65);
    X_94:bat[:date] := algebra.projectionpath(X_90,r1_154,X_79);
    X_95:bat[:lng] := algebra.projectionpath(X_90,r1_154,X_80);
    X_98:bat[:hge] := algebra.projectionpath(X_90,r1_154,C_78,X_66,X_63,X_97);
    sql.resultSet(X_142,X_144,X_146,X_147,X_148,X_91,X_92,X_93,X_94,X_95,X_98);
end user.s4_1;
#inline               actions= 0 time=7 usec 
#candidates           actions= 1 time=142 usec 
#remap                actions= 0 time=9 usec 
#costModel            actions= 1 time=118 usec 
#coercions            actions= 5 time=122 usec 
#evaluate             actions= 6 time=180 usec 
#emptybind            actions= 0 time=10 usec 
#pushselect           actions= 0 time=7 usec 
#aliases              actions=17 time=115 usec 
#mergetable           actions= 0 time=127 usec 
#deadcode             actions=22 time=100 usec 
#aliases              actions= 0 time=25 usec 
#constants            actions=25 time=118 usec 
#commonTerms          actions=11 time=100 usec 
#projectionpath       actions=24 time=124 usec 
#reorder              actions= 1 time=168 usec 
#deadcode             actions=35 time=86 usec 
#reduce               actions=134 time=155 usec 
#matpack              actions= 0 time=10 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=7 usec 
#generator            actions= 0 time=3 usec 
#profiler             actions= 1 time=69 usec 
#garbageCollector     actions= 1 time=83 usec 
#total                actions= 1 time=2009 usec 

# 22:53:30 >  
# 22:53:30 >  "Done."
# 22:53:30 >  

