stdout of test '09-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:27 >  
# 22:53:27 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:27 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:27 >  
# 22:53:27 >  "/usr/bin/python2" "09-explain.SQL.py" "09-explain"
# 22:53:27 >  

#set optimizer = 'sequential_pipe';
#explain select
#	nation,
#	o_year,
#	sum(amount) as sum_profit
#from
#	(
#		select
#			n_name as nation,
#			extract(year from o_orderdate) as o_year,
#			l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
#		from
#			part,
#			supplier,
#			lineitem,
#			partsupp,
#			orders,
#			nation
#		where
#			s_suppkey = l_suppkey
#			and ps_suppkey = l_suppkey
#			and ps_partkey = l_partkey
#			and p_partkey = l_partkey
#			and o_orderkey = l_orderkey
#			and s_nationkey = n_nationkey
#			and p_name like '%green%'
#	) as profit
% .explain # table_name
% mal # name
% clob # type
% 640 # length
function user.s4_1():void;
    X_287:void := querylog.define("explain select\n nation,\n o_year,\n sum(amount) as sum_profit\nfrom\n (\n select\n n_name as nation,\n extract(year from o_orderdate) as o_year,\n l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount\n from\n part,\n supplier,\n lineitem,\n partsupp,\n orders,\n nation\n where\n s_suppkey = l_suppkey\n and ps_suppkey = l_suppkey\n and ps_partkey = l_partkey\n and p_partkey = l_partkey\n and o_orderkey = l_orderkey\n and s_nationkey = n_nationkey\n and p_name like \\'%green%\\'\n ) as profit\ngroup by\n nation,\n o_year\norder by\n nation,\n o_year desc;","sequential_pipe",88);
    X_252 := bat.new(nil:str);
    X_259 := bat.append(X_252,"sys.profit");
    X_269 := bat.append(X_259,"sys.profit");
    X_277 := bat.append(X_269,"sys.L13");
    X_254 := bat.new(nil:str);
    X_261 := bat.append(X_254,"nation");
    X_270 := bat.append(X_261,"o_year");
    X_279 := bat.append(X_270,"sum_profit");
    X_255 := bat.new(nil:str);
    X_263 := bat.append(X_255,"char");
    X_272 := bat.append(X_263,"int");
    X_281 := bat.append(X_272,"decimal");
    X_256 := bat.new(nil:int);
    X_265 := bat.append(X_256,25);
    X_274 := bat.append(X_265,32);
    X_283 := bat.append(X_274,39);
    X_258 := bat.new(nil:int);
    X_267 := bat.append(X_258,0);
    X_276 := bat.append(X_267,0);
    X_285 := bat.append(X_276,4);
    X_0 := sql.mvc();
    X_14:bat[:str] := sql.bind(X_0,"sys","part","p_name",0);
    C_1:bat[:oid] := sql.tid(X_0,"sys","part");
    C_24 := algebra.likesubselect(X_14,C_1,"%green%","",false);
    X_4:bat[:int] := sql.bind(X_0,"sys","part","p_partkey",0);
    X_27 := algebra.projection(C_24,X_4);
    C_29:bat[:oid] := sql.tid(X_0,"sys","lineitem");
    X_31:bat[:int] := sql.bind(X_0,"sys","lineitem","l_partkey",0);
    X_37 := algebra.projection(C_29,X_31);
    (X_80,X_81) := algebra.subjoin(X_27,X_37,nil:BAT,nil:BAT,false,nil:lng);
    X_38:bat[:int] := sql.bind(X_0,"sys","lineitem","l_suppkey",0);
    X_89:bat[:int] := algebra.projectionpath(X_81,C_29,X_38);
    C_95:bat[:oid] := sql.tid(X_0,"sys","supplier");
    X_97:bat[:int] := sql.bind(X_0,"sys","supplier","s_suppkey",0);
    X_103 := algebra.projection(C_95,X_97);
    (X_111,X_112) := algebra.subjoin(X_89,X_103,nil:BAT,nil:BAT,false,nil:lng);
    X_73:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineitem","lineitem_l_partkey_l_suppkey_fkey",0);
    (X_76,X_77:bat[:oid]) := sql.bind_idxbat(X_0,"sys","lineitem","lineitem_l_partkey_l_suppkey_fkey",2);
    X_75:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineitem","lineitem_l_partkey_l_suppkey_fkey",1);
    X_79 := sql.projectdelta(C_29,X_73,X_76,X_77,X_75);
    X_121:bat[:oid] := algebra.projectionpath(X_111,X_81,X_79);
    C_124:bat[:oid] := sql.tid(X_0,"sys","partsupp");
    (X_133,X_134) := algebra.subjoin(X_121,C_124,nil:BAT,nil:BAT,false,nil:lng);
    X_66:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineitem","lineitem_l_orderkey_fkey",0);
    (X_69,X_70:bat[:oid]) := sql.bind_idxbat(X_0,"sys","lineitem","lineitem_l_orderkey_fkey",2);
    X_68:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineitem","lineitem_l_orderkey_fkey",1);
    X_72 := sql.projectdelta(C_29,X_66,X_69,X_70,X_68);
    X_146:bat[:oid] := algebra.projectionpath(X_133,X_111,X_81,X_72);
    C_152:bat[:oid] := sql.tid(X_0,"sys","orders");
    (X_161,X_162) := algebra.subjoin(X_146,C_152,nil:BAT,nil:BAT,false,nil:lng);
    X_104:bat[:oid] := sql.bind_idxbat(X_0,"sys","supplier","supplier_s_nationkey_fkey",0);
    (X_107,X_108:bat[:oid]) := sql.bind_idxbat(X_0,"sys","supplier","supplier_s_nationkey_fkey",2);
    X_106:bat[:oid] := sql.bind_idxbat(X_0,"sys","supplier","supplier_s_nationkey_fkey",1);
    X_110 := sql.projectdelta(C_95,X_104,X_107,X_108,X_106);
    X_173:bat[:oid] := algebra.projectionpath(X_161,X_133,X_112,X_110);
    C_178:bat[:oid] := sql.tid(X_0,"sys","nation");
    (X_187,X_188) := algebra.subjoin(X_173,C_178,nil:BAT,nil:BAT,false,nil:lng);
    X_154:bat[:date] := sql.bind(X_0,"sys","orders","o_orderdate",0);
    X_206:bat[:date] := algebra.projectionpath(X_187,X_162,C_152,X_154);
    X_210:bat[:int] := batmtime.year(X_206);
    X_180:bat[:str] := sql.bind(X_0,"sys","nation","n_name",0);
    X_208:bat[:str] := algebra.projectionpath(X_188,C_178,X_180);
    (X_229,X_230,X_231) := group.subgroup(X_208);
    (X_232,X_233,X_234) := group.subgroupdone(X_210,X_229);
    X_235 := algebra.projection(X_233,X_208);
    X_236 := algebra.projection(X_233,X_210);
    X_52:bat[:lng] := sql.bind(X_0,"sys","lineitem","l_extendedprice",0);
    X_198:bat[:lng] := algebra.projectionpath(X_187,X_161,X_133,X_111,X_81,C_29,X_52);
    X_59:bat[:lng] := sql.bind(X_0,"sys","lineitem","l_discount",0);
    X_199:bat[:lng] := algebra.projectionpath(X_187,X_161,X_133,X_111,X_81,C_29,X_59);
    X_221:bat[:lng] := batcalc.-(100:lng,X_199);
    X_225:bat[:hge] := batcalc.*(X_198,X_221);
    X_126:bat[:lng] := sql.bind(X_0,"sys","partsupp","ps_supplycost",0);
    X_204:bat[:lng] := algebra.projectionpath(X_187,X_161,X_134,C_124,X_126);
    X_45:bat[:lng] := sql.bind(X_0,"sys","lineitem","l_quantity",0);
    X_197:bat[:lng] := algebra.projectionpath(X_187,X_161,X_133,X_111,X_81,C_29,X_45);
    X_227:bat[:hge] := batcalc.*(X_204,X_197);
    X_228:bat[:hge] := batcalc.-(X_225,X_227);
    X_237:bat[:hge] := aggr.subsum(X_228,X_232,X_233,true,true);
    (X_240,X_241,X_242) := algebra.subsort(X_235,false,false);
    (X_245,X_246,X_247) := algebra.subsort(X_236,X_241,X_242,true,false);
    X_248 := algebra.projection(X_246,X_235);
    X_249 := algebra.projection(X_246,X_236);
    X_250 := algebra.projection(X_246,X_237);
    sql.resultSet(X_277,X_279,X_281,X_283,X_285,X_248,X_249,X_250);
end user.s4_1;
#inline               actions= 0 time=11 usec 
#candidates           actions= 1 time=104 usec 
#remap                actions= 7 time=693 usec 
#costModel            actions= 1 time=200 usec 
#coercions            actions= 1 time=322 usec 
#evaluate             actions= 3 time=260 usec 
#emptybind            actions= 0 time=9 usec 
#pushselect           actions= 6 time=247 usec 
#aliases              actions=16 time=224 usec 
#mergetable           actions= 0 time=241 usec 
#deadcode             actions=27 time=208 usec 
#aliases              actions= 0 time=21 usec 
#constants            actions=18 time=238 usec 
#commonTerms          actions= 0 time=25 usec 
#projectionpath       actions=27 time=222 usec 
#reorder              actions= 1 time=279 usec 
#deadcode             actions=27 time=187 usec 
#reduce               actions=130 time=249 usec 
#matpack              actions= 0 time=9 usec 
#querylog             actions= 0 time=2 usec 
#multiplex            actions= 0 time=6 usec 
#generator            actions= 0 time=3 usec 
#profiler             actions= 1 time=178 usec 
#garbageCollector     actions= 1 time=194 usec 
#total                actions= 1 time=4253 usec 

# 22:53:27 >  
# 22:53:27 >  "Done."
# 22:53:27 >  

