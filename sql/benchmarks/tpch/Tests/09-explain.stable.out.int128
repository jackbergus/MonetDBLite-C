stdout of test '09-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:27 >  
# 22:53:27 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:27 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:27 >  
# 22:53:27 >  "/usr/bin/python2" "09-explain.SQL.py" "09-explain"
# 22:53:27 >  

#set optimizer = 'sequential_pipe';
#explain select
#	nation,
#	o_year,
#	sum(amount) as sum_profit
#from
#	(
#		select
#			n_name as nation,
#			extract(year from o_orderdate) as o_year,
#			l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
#		from
#			part,
#			supplier,
#			lineitem,
#			partsupp,
#			orders,
#			nation
#		where
#			s_suppkey = l_suppkey
#			and ps_suppkey = l_suppkey
#			and ps_partkey = l_partkey
#			and p_partkey = l_partkey
#			and o_orderkey = l_orderkey
#			and s_nationkey = n_nationkey
#			and p_name like '%green%'
#	) as profit
% .explain # table_name
% mal # name
% clob # type
% 640 # length
function user.s4_1():void;
    X_250:void := querylog.define("explain select\n nation,\n o_year,\n sum(amount) as sum_profit\nfrom\n (\n select\n n_name as nation,\n extract(year from o_orderdate) as o_year,\n l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount\n from\n part,\n supplier,\n lineitem,\n partsupp,\n orders,\n nation\n where\n s_suppkey = l_suppkey\n and ps_suppkey = l_suppkey\n and ps_partkey = l_partkey\n and p_partkey = l_partkey\n and o_orderkey = l_orderkey\n and s_nationkey = n_nationkey\n and p_name like \\'%green%\\'\n ) as profit\ngroup by\n nation,\n o_year\norder by\n nation,\n o_year desc;","sequential_pipe",88);
    X_215 := bat.new(nil:str);
    X_222 := bat.append(X_215,"sys.profit");
    X_232 := bat.append(X_222,"sys.profit");
    X_240 := bat.append(X_232,"sys.L5");
    X_217 := bat.new(nil:str);
    X_224 := bat.append(X_217,"nation");
    X_233 := bat.append(X_224,"o_year");
    X_242 := bat.append(X_233,"sum_profit");
    X_218 := bat.new(nil:str);
    X_226 := bat.append(X_218,"char");
    X_235 := bat.append(X_226,"int");
    X_244 := bat.append(X_235,"decimal");
    X_219 := bat.new(nil:int);
    X_228 := bat.append(X_219,25);
    X_237 := bat.append(X_228,32);
    X_246 := bat.append(X_237,39);
    X_221 := bat.new(nil:int);
    X_230 := bat.append(X_221,0);
    X_239 := bat.append(X_230,0);
    X_248 := bat.append(X_239,4);
    X_0 := sql.mvc();
    X_4:bat[:str] := sql.bind(X_0,"sys","part","p_name",0);
    C_1:bat[:oid] := sql.tid(X_0,"sys","part");
    C_17 := algebra.likesubselect(X_4,C_1,"%green%","",false);
    X_20:bat[:int] := sql.bind(X_0,"sys","part","p_partkey",0);
    X_27 := algebra.projection(C_17,X_20);
    C_28:bat[:oid] := sql.tid(X_0,"sys","lineitem");
    X_30:bat[:int] := sql.bind(X_0,"sys","lineitem","l_partkey",0);
    X_36 := algebra.projection(C_28,X_30);
    (X_37,r1_40) := algebra.subjoin(X_27,X_36,nil:BAT,nil:BAT,false,nil:lng);
    X_40:bat[:int] := sql.bind(X_0,"sys","lineitem","l_suppkey",0);
    X_47:bat[:int] := algebra.projectionpath(r1_40,C_28,X_40);
    C_48:bat[:oid] := sql.tid(X_0,"sys","supplier");
    X_50:bat[:int] := sql.bind(X_0,"sys","supplier","s_suppkey",0);
    X_56 := algebra.projection(C_48,X_50);
    (X_57,r1_60) := algebra.subjoin(X_47,X_56,nil:BAT,nil:BAT,false,nil:lng);
    X_62:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineitem","lineitem_l_partkey_l_suppkey_fkey",0);
    (X_64,r1_67) := sql.bind_idxbat(X_0,"sys","lineitem","lineitem_l_partkey_l_suppkey_fkey",2);
    X_66:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineitem","lineitem_l_partkey_l_suppkey_fkey",1);
    X_68 := sql.projectdelta(C_28,X_62,X_64,r1_67,X_66);
    X_70:bat[:oid] := algebra.projectionpath(X_57,r1_40,X_68);
    C_71:bat[:oid] := sql.tid(X_0,"sys","partsupp");
    (X_73,r1_76) := algebra.subjoin(X_70,C_71,nil:BAT,nil:BAT,false,nil:lng);
    X_76:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineitem","lineitem_l_orderkey_fkey",0);
    (X_78,r1_81) := sql.bind_idxbat(X_0,"sys","lineitem","lineitem_l_orderkey_fkey",2);
    X_80:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineitem","lineitem_l_orderkey_fkey",1);
    X_82 := sql.projectdelta(C_28,X_76,X_78,r1_81,X_80);
    X_85:bat[:oid] := algebra.projectionpath(X_73,X_57,r1_40,X_82);
    C_86:bat[:oid] := sql.tid(X_0,"sys","orders");
    (X_88,r1_91) := algebra.subjoin(X_85,C_86,nil:BAT,nil:BAT,false,nil:lng);
    X_90:bat[:oid] := sql.bind_idxbat(X_0,"sys","supplier","supplier_s_nationkey_fkey",0);
    (X_92,r1_95) := sql.bind_idxbat(X_0,"sys","supplier","supplier_s_nationkey_fkey",2);
    X_94:bat[:oid] := sql.bind_idxbat(X_0,"sys","supplier","supplier_s_nationkey_fkey",1);
    X_96 := sql.projectdelta(C_48,X_90,X_92,r1_95,X_94);
    X_99:bat[:oid] := algebra.projectionpath(X_88,X_73,r1_60,X_96);
    C_100:bat[:oid] := sql.tid(X_0,"sys","nation");
    (X_102,r1_105) := algebra.subjoin(X_99,C_100,nil:BAT,nil:BAT,false,nil:lng);
    X_107:bat[:date] := sql.bind(X_0,"sys","orders","o_orderdate",0);
    X_115:bat[:date] := algebra.projectionpath(X_102,r1_91,C_86,X_107);
    X_116:bat[:int] := batmtime.year(X_115);
    X_119:bat[:str] := sql.bind(X_0,"sys","nation","n_name",0);
    X_126:bat[:str] := algebra.projectionpath(r1_105,C_100,X_119);
    (X_127,r1_130,r2_130) := group.subgroup(X_126);
    (X_130,r1_133,r2_133) := group.subgroupdone(X_116,X_127);
    X_133 := algebra.projection(r1_133,X_116);
    X_134 := algebra.projection(r1_133,X_126);
    X_145:bat[:lng] := sql.bind(X_0,"sys","lineitem","l_extendedprice",0);
    X_156:bat[:lng] := algebra.projectionpath(X_102,X_88,X_73,X_57,r1_40,C_28,X_145);
    X_165:bat[:lng] := sql.bind(X_0,"sys","lineitem","l_discount",0);
    X_176:bat[:lng] := algebra.projectionpath(X_102,X_88,X_73,X_57,r1_40,C_28,X_165);
    X_177:bat[:lng] := batcalc.-(100:lng,X_176);
    X_179:bat[:hge] := batcalc.*(X_156,X_177);
    X_181:bat[:lng] := sql.bind(X_0,"sys","partsupp","ps_supplycost",0);
    X_190:bat[:lng] := algebra.projectionpath(X_102,X_88,r1_76,C_71,X_181);
    X_196:bat[:lng] := sql.bind(X_0,"sys","lineitem","l_quantity",0);
    X_207:bat[:lng] := algebra.projectionpath(X_102,X_88,X_73,X_57,r1_40,C_28,X_196);
    X_208:bat[:hge] := batcalc.*(X_190,X_207);
    X_209:bat[:hge] := batcalc.-(X_179,X_208);
    X_210:bat[:hge] := aggr.subsum(X_209,X_130,r1_133,true,true);
    (X_135,r1_138,r2_138) := algebra.subsort(X_134,false,false);
    (X_138,r1_141,r2_141) := algebra.subsort(X_133,r1_138,r2_138,true,false);
    X_143 := algebra.projection(r1_141,X_134);
    X_144 := algebra.projection(r1_141,X_133);
    X_213 := algebra.projection(r1_141,X_210);
    sql.resultSet(X_240,X_242,X_244,X_246,X_248,X_143,X_144,X_213);
end user.s4_1;
#inline               actions= 0 time=11 usec 
#candidates           actions= 1 time=104 usec 
#remap                actions= 7 time=693 usec 
#costModel            actions= 1 time=200 usec 
#coercions            actions= 1 time=322 usec 
#evaluate             actions= 3 time=260 usec 
#emptybind            actions= 0 time=9 usec 
#pushselect           actions= 6 time=247 usec 
#aliases              actions=16 time=224 usec 
#mergetable           actions= 0 time=241 usec 
#deadcode             actions=27 time=208 usec 
#aliases              actions= 0 time=21 usec 
#constants            actions=18 time=238 usec 
#commonTerms          actions= 0 time=25 usec 
#projectionpath       actions=27 time=222 usec 
#reorder              actions= 1 time=279 usec 
#deadcode             actions=27 time=187 usec 
#reduce               actions=130 time=249 usec 
#matpack              actions= 0 time=9 usec 
#querylog             actions= 0 time=2 usec 
#multiplex            actions= 0 time=6 usec 
#generator            actions= 0 time=3 usec 
#profiler             actions= 1 time=178 usec 
#garbageCollector     actions= 1 time=194 usec 
#total                actions= 1 time=4253 usec 

# 22:53:27 >  
# 22:53:27 >  "Done."
# 22:53:27 >  

