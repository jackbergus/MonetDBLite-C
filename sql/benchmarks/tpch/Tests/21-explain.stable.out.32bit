stdout of test '21-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:30 >  
# 22:53:30 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:30 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:31 >  
# 22:53:31 >  "/usr/bin/python2" "21-explain.SQL.py" "21-explain"
# 22:53:31 >  

#set optimizer = 'sequential_pipe';
#explain select
#	s_name,
#	count(*) as numwait
#from
#	supplier,
#	lineitem l1,
#	orders,
#	nation
#where
#	s_suppkey = l1.l_suppkey
#	and o_orderkey = l1.l_orderkey
#	and o_orderstatus = 'F'
#	and l1.l_receiptdate > l1.l_commitdate
#	and exists (
#		select
#			*
#		from
#			lineitem l2
#		where
#			l2.l_orderkey = l1.l_orderkey
#			and l2.l_suppkey <> l1.l_suppkey
#	)
#	and not exists (
#		select
#			*
#		from
#			lineitem l3
#		where
#			l3.l_orderkey = l1.l_orderkey
#			and l3.l_suppkey <> l1.l_suppkey
#			and l3.l_receiptdate > l3.l_commitdate
% .explain # table_name
% mal # name
% clob # type
% 811 # length
function user.s2_1{autoCommit=true}(A0:str,A1:str):void;
    X_237:void := querylog.define("explain select\n\ts_name,\n\tcount(*) as numwait\nfrom\n\tsupplier,\n\tlineitem l1,\n\torders,\n\tnation\nwhere\n\ts_suppkey = l1.l_suppkey\n\tand o_orderkey = l1.l_orderkey\n\tand o_orderstatus = \\'F\\'\n\tand l1.l_receiptdate > l1.l_commitdate\n\tand exists (\n\t\tselect\n\t\t\t*\n\t\tfrom\n\t\t\tlineitem l2\n\t\twhere\n\t\t\tl2.l_orderkey = l1.l_orderkey\n\t\t\tand l2.l_suppkey <> l1.l_suppkey\n\t)\n\tand not exists (\n\t\tselect\n\t\t\t*\n\t\tfrom\n\t\t\tlineitem l3\n\t\twhere\n\t\t\tl3.l_orderkey = l1.l_orderkey\n\t\t\tand l3.l_suppkey <> l1.l_suppkey\n\t\t\tand l3.l_receiptdate > l3.l_commitdate\n\t)\n\tand s_nationkey = n_nationkey\n\tand n_name = \\'SAUDI ARABIA\\'\ngroup by\n\ts_name\norder by\n\tnumwait desc,\n\ts_name\nlimit 100;","sequential_pipe",135);
    X_210 := bat.new(nil:oid,nil:str);
    X_218 := bat.append(X_210,"sys.supplier");
    X_228 := bat.append(X_218,"sys.L1");
    X_213 := bat.new(nil:oid,nil:str);
    X_220 := bat.append(X_213,"s_name");
    X_230 := bat.append(X_220,"numwait");
    X_214 := bat.new(nil:oid,nil:str);
    X_222 := bat.append(X_214,"char");
    X_232 := bat.append(X_222,"wrd");
    X_215 := bat.new(nil:oid,nil:int);
    X_224 := bat.append(X_215,25);
    X_234 := bat.append(X_224,32);
    X_217 := bat.new(nil:oid,nil:int);
    X_226 := bat.append(X_217,0);
    X_236 := bat.append(X_226,0);
    X_4 := sql.mvc();
    X_5:bat[:oid,:oid]  := sql.tid(X_4,"sys","lineitem");
    X_8:bat[:oid,:date]  := sql.bind(X_4,"sys","lineitem","l_receiptdate",0);
    (X_11,r1_11) := sql.bind(X_4,"sys","lineitem","l_receiptdate",2);
    X_14:bat[:oid,:date]  := sql.bind(X_4,"sys","lineitem","l_receiptdate",1);
    X_16 := sql.delta(X_8,X_11,r1_11,X_14);
    X_17 := algebra.leftfetchjoin(X_5,X_16);
    X_18:bat[:oid,:date]  := sql.bind(X_4,"sys","lineitem","l_commitdate",0);
    (X_20,r1_20) := sql.bind(X_4,"sys","lineitem","l_commitdate",2);
    X_22:bat[:oid,:date]  := sql.bind(X_4,"sys","lineitem","l_commitdate",1);
    X_23 := sql.delta(X_18,X_20,r1_20,X_22);
    X_24 := algebra.leftfetchjoin(X_5,X_23);
    X_25:bat[:oid,:bit]  := batcalc.>(X_17,X_24);
    X_26 := algebra.subselect(X_25,true,true,true,true,false);
    X_28:bat[:oid,:oid]  := sql.bind_idxbat(X_4,"sys","lineitem","lineitem_l_orderkey_fkey",0);
    (X_30,r1_32) := sql.bind_idxbat(X_4,"sys","lineitem","lineitem_l_orderkey_fkey",2);
    X_32:bat[:oid,:oid]  := sql.bind_idxbat(X_4,"sys","lineitem","lineitem_l_orderkey_fkey",1);
    X_33 := sql.delta(X_28,X_30,r1_32,X_32);
    X_34:bat[:oid,:oid] := algebra.leftfetchjoinPath(X_26,X_5,X_33);
    X_35:bat[:oid,:oid]  := sql.tid(X_4,"sys","orders");
    X_38:bat[:oid,:str]  := sql.bind(X_4,"sys","orders","o_orderstatus",0);
    (X_41,r1_44) := sql.bind(X_4,"sys","orders","o_orderstatus",2);
    X_44:bat[:oid,:str]  := sql.bind(X_4,"sys","orders","o_orderstatus",1);
    X_46 := sql.delta(X_38,X_41,r1_44,X_44);
    X_47 := algebra.leftfetchjoin(X_35,X_46);
    X_48 := algebra.subselect(X_47,A0,A0,true,false,false);
    X_50 := algebra.leftfetchjoin(X_48,X_35);
    (X_51,r1_55) := algebra.subjoin(X_34,X_50,nil:BAT,nil:BAT,false,nil:lng);
    X_55:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_suppkey",0);
    (X_58,r1_62) := sql.bind(X_4,"sys","lineitem","l_suppkey",2);
    X_60:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_suppkey",1);
    X_61 := sql.delta(X_55,X_58,r1_62,X_60);
    X_62:bat[:oid,:int] := algebra.leftfetchjoinPath(X_51,X_26,X_5,X_61);
    X_63:bat[:oid,:oid] := sql.tid(X_4,"sys","supplier");
    X_65:bat[:oid,:int] := sql.bind(X_4,"sys","supplier","s_suppkey",0);
    (X_68,r1_74) := sql.bind(X_4,"sys","supplier","s_suppkey",2);
    X_70:bat[:oid,:int] := sql.bind(X_4,"sys","supplier","s_suppkey",1);
    X_71 := sql.delta(X_65,X_68,r1_74,X_70);
    X_72 := algebra.leftfetchjoin(X_63,X_71);
    (X_73,r1_79) := algebra.subjoin(X_62,X_72,nil:BAT,nil:BAT,false,nil:lng);
    X_76:bat[:oid,:oid] := sql.bind_idxbat(X_4,"sys","supplier","supplier_s_nationkey_fkey",0);
    (X_79,r1_85) := sql.bind_idxbat(X_4,"sys","supplier","supplier_s_nationkey_fkey",2);
    X_82:bat[:oid,:oid] := sql.bind_idxbat(X_4,"sys","supplier","supplier_s_nationkey_fkey",1);
    X_84 := sql.delta(X_76,X_79,r1_85,X_82);
    X_85:bat[:oid,:oid] := algebra.leftfetchjoinPath(r1_79,X_63,X_84);
    X_86:bat[:oid,:oid] := sql.tid(X_4,"sys","nation");
    X_88:bat[:oid,:str] := sql.bind(X_4,"sys","nation","n_name",0);
    (X_90,r1_97) := sql.bind(X_4,"sys","nation","n_name",2);
    X_92:bat[:oid,:str] := sql.bind(X_4,"sys","nation","n_name",1);
    X_93 := sql.delta(X_88,X_90,r1_97,X_92);
    X_94 := algebra.leftfetchjoin(X_86,X_93);
    X_95 := algebra.subselect(X_94,A1,A1,true,false,false);
    X_97 := algebra.leftfetchjoin(X_95,X_86);
    (X_98,r1_106) := algebra.subjoin(X_85,X_97,nil:BAT,nil:BAT,false,nil:lng);
    X_102:bat[:oid,:int] := algebra.leftfetchjoinPath(X_98,r1_79,X_72);
    X_103 := bat.mirror(X_102);
    X_104:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_orderkey",0);
    (X_109,r1_118) := sql.bind(X_4,"sys","lineitem","l_orderkey",2);
    X_112:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_orderkey",1);
    X_114 := sql.delta(X_104,X_109,r1_118,X_112);
    X_115:bat[:oid,:int] := algebra.leftfetchjoinPath(X_98,X_73,X_51,X_26,X_5,X_114);
    X_116:bat[:oid,:oid] := sql.tid(X_4,"sys","lineitem");
    X_117 := algebra.leftfetchjoin(X_116,X_114);
    (X_118,r1_136) := algebra.subjoin(X_115,X_117,nil:BAT,nil:BAT,false,nil:lng);
    X_121:bat[:oid,:int] := algebra.leftfetchjoinPath(r1_136,X_116,X_61);
    X_122:bat[:oid,:int] := algebra.leftfetchjoinPath(X_98,X_73,X_62);
    X_123 := algebra.leftfetchjoin(X_118,X_122);
    X_124:bat[:oid,:bit] := batcalc.!=(X_121,X_123);
    X_125 := algebra.subselect(X_124,true,true,true,true,false);
    X_127 := algebra.leftfetchjoin(X_125,X_118);
    X_128 := algebra.tinter(X_103,X_127);
    X_129 := algebra.leftfetchjoin(X_128,X_102);
    X_130 := bat.mirror(X_129);
    X_131 := algebra.leftfetchjoin(X_128,X_115);
    X_134:bat[:oid,:date] := sql.bind(X_4,"sys","lineitem","l_receiptdate",0);
    (X_137,r1_166) := sql.bind(X_4,"sys","lineitem","l_receiptdate",2);
    X_140:bat[:oid,:date] := sql.bind(X_4,"sys","lineitem","l_receiptdate",1);
    X_142 := sql.delta(X_134,X_137,r1_166,X_140);
    X_143 := algebra.leftfetchjoin(X_116,X_142);
    X_144:bat[:oid,:date] := sql.bind(X_4,"sys","lineitem","l_commitdate",0);
    (X_146,r1_175) := sql.bind(X_4,"sys","lineitem","l_commitdate",2);
    X_148:bat[:oid,:date] := sql.bind(X_4,"sys","lineitem","l_commitdate",1);
    X_149 := sql.delta(X_144,X_146,r1_175,X_148);
    X_150 := algebra.leftfetchjoin(X_116,X_149);
    X_151:bat[:oid,:bit] := batcalc.>(X_143,X_150);
    X_152 := algebra.subselect(X_151,true,true,true,true,false);
    X_154 := algebra.leftfetchjoin(X_152,X_117);
    (X_155,r1_192) := algebra.subjoin(X_131,X_154,nil:BAT,nil:BAT,false,nil:lng);
    X_159:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_suppkey",0);
    (X_164,r1_201) := sql.bind(X_4,"sys","lineitem","l_suppkey",2);
    X_167:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_suppkey",1);
    X_169 := sql.delta(X_159,X_164,r1_201,X_167);
    X_170:bat[:oid,:int] := algebra.leftfetchjoinPath(r1_192,X_152,X_116,X_169);
    X_171:bat[:oid,:int] := algebra.leftfetchjoinPath(X_155,X_128,X_122);
    X_172:bat[:oid,:bit] := batcalc.!=(X_170,X_171);
    X_173 := algebra.subselect(X_172,true,true,true,true,false);
    X_176 := algebra.leftfetchjoin(X_173,X_155);
    X_177 := algebra.tdiff(X_130,X_176);
    X_178:bat[:oid,:str] := sql.bind(X_4,"sys","supplier","s_name",0);
    (X_181,r1_223) := sql.bind(X_4,"sys","supplier","s_name",2);
    X_183:bat[:oid,:str] := sql.bind(X_4,"sys","supplier","s_name",1);
    X_184 := sql.delta(X_178,X_181,r1_223,X_183);
    X_185:bat[:oid,:str] := algebra.leftfetchjoinPath(X_177,X_128,X_98,r1_79,X_63,X_184);
    (X_186,r1_232,r2_232) := group.subgroupdone(X_185);
    X_189 := algebra.leftfetchjoin(r1_232,X_185);
    X_191:bat[:oid,:wrd] := aggr.subcount(X_186,X_186,r1_232,false);
    X_190 := bat.setKey(X_189,true);
    (X_193,r1_243) := algebra.firstn(X_191,100:wrd,false,false);
    X_195 := algebra.firstn(X_190,X_193,r1_243,100:wrd,true,false);
    X_196 := algebra.leftfetchjoin(X_195,X_190);
    X_197 := algebra.leftfetchjoin(X_195,X_191);
    (X_198,r1_250,r2_250) := algebra.subsort(X_197,true,false);
    (X_203,r1_255,r2_255) := algebra.subsort(X_196,r1_250,r2_250,false,false);
    X_206 := algebra.leftfetchjoin(r1_255,X_196);
    X_207 := algebra.subslice(X_206,0,99:wrd);
    X_208 := algebra.leftfetchjoin(X_207,X_206);
    X_209:bat[:oid,:wrd] := algebra.leftfetchjoinPath(X_207,r1_255,X_197);
    sql.resultSet(X_229,X_231,X_233,X_235,X_237,X_208,X_209);
end user.s2_1;

# 22:53:31 >  
# 22:53:31 >  "Done."
# 22:53:31 >  

