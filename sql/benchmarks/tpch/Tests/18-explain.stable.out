stdout of test '18-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:30 >  
# 22:53:30 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:30 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:30 >  
# 22:53:30 >  "/usr/bin/python2" "18-explain.SQL.py" "18-explain"
# 22:53:30 >  

#set optimizer = 'sequential_pipe';
#explain select
#	c_name,
#	c_custkey,
#	o_orderkey,
#	o_orderdate,
#	o_totalprice,
#	sum(l_quantity)
#from
#	customer,
#	orders,
#	lineitem
#where
#	o_orderkey in (
#		select
#			l_orderkey
#		from
#			lineitem
#		group by
#			l_orderkey having
#				sum(l_quantity) > 300
#	)
#	and c_custkey = o_custkey
#	and o_orderkey = l_orderkey
#group by
#	c_name,
#	c_custkey,
#	o_orderkey,
#	o_orderdate,
#	o_totalprice
#order by
#	o_totalprice desc,
#	o_orderdate
#limit 100;
% .explain # table_name
% mal # name
% clob # type
% 514 # length
function user.s4_1():void;
    X_236:void := querylog.define("explain select\n c_name,\n c_custkey,\n o_orderkey,\n o_orderdate,\n o_totalprice,\n sum(l_quantity)\nfrom\n customer,\n orders,\n lineitem\nwhere\n o_orderkey in (\n select\n l_orderkey\n from\n lineitem\n group by\n l_orderkey having\n sum(l_quantity) > 300\n )\n and c_custkey = o_custkey\n and o_orderkey = l_orderkey\ngroup by\n c_name,\n c_custkey,\n o_orderkey,\n o_orderdate,\n o_totalprice\norder by\n o_totalprice desc,\n o_orderdate\nlimit 100;","sequential_pipe",92);
    X_180 := bat.new(nil:str);
    X_187 := bat.append(X_180,"sys.customer");
    X_197 := bat.append(X_187,"sys.customer");
    X_205 := bat.append(X_197,"sys.orders");
    X_212 := bat.append(X_205,"sys.orders");
    X_219 := bat.append(X_212,"sys.orders");
    X_228 := bat.append(X_219,"sys.L6");
    X_182 := bat.new(nil:str);
    X_189 := bat.append(X_182,"c_name");
    X_198 := bat.append(X_189,"c_custkey");
    X_207 := bat.append(X_198,"o_orderkey");
    X_213 := bat.append(X_207,"o_orderdate");
    X_220 := bat.append(X_213,"o_totalprice");
    X_230 := bat.append(X_220,"L6");
    X_183 := bat.new(nil:str);
    X_191 := bat.append(X_183,"varchar");
    X_200 := bat.append(X_191,"int");
    X_209 := bat.append(X_200,"int");
    X_215 := bat.append(X_209,"date");
    X_222 := bat.append(X_215,"decimal");
    X_232 := bat.append(X_222,"decimal");
    X_184 := bat.new(nil:int);
    X_193 := bat.append(X_184,25);
    X_202 := bat.append(X_193,32);
    X_210 := bat.append(X_202,32);
    X_217 := bat.append(X_210,0);
    X_224 := bat.append(X_217,15);
    X_233 := bat.append(X_224,19);
    X_186 := bat.new(nil:int);
    X_195 := bat.append(X_186,0);
    X_204 := bat.append(X_195,0);
    X_211 := bat.append(X_204,0);
    X_218 := bat.append(X_211,0);
    X_226 := bat.append(X_218,2);
    X_235 := bat.append(X_226,2);
    X_0 := sql.mvc();
    C_1:bat[:oid] := sql.tid(X_0,"sys","orders");
    X_4:bat[:int] := sql.bind(X_0,"sys","orders","o_orderkey",0);
    X_13 := algebra.projection(C_1,X_4);
    X_14 := bat.mirror(X_13);
    C_15:bat[:oid] := sql.tid(X_0,"sys","lineitem");
    X_17:bat[:lng] := sql.bind(X_0,"sys","lineitem","l_quantity",0);
    X_23 := algebra.projection(C_15,X_17);
    X_24:bat[:int] := sql.bind(X_0,"sys","lineitem","l_orderkey",0);
    X_30 := algebra.projection(C_15,X_24);
    (X_31,r1_33,r2_33) := group.subgroupdone(X_30);
    X_34:bat[:lng] := aggr.subsum(X_23,X_31,r1_33,true,true);
    X_42 := algebra.projection(r1_33,X_30);
    C_40 := algebra.thetasubselect(X_34,30000:lng,">");
    X_43 := bat.setKey(X_42,true);
    X_44 := algebra.projection(C_40,X_43);
    (X_45,r1_47) := algebra.subjoin(X_13,X_44,nil:BAT,nil:BAT,false,nil:lng);
    C_51 := algebra.subinter(X_14,X_45,nil:BAT,nil:BAT,false,nil:lng);
    X_52 := algebra.projection(C_51,X_13);
    (X_61,r1_63) := algebra.subjoin(X_52,X_30,nil:BAT,nil:BAT,false,nil:lng);
    X_63:bat[:oid] := sql.bind_idxbat(X_0,"sys","orders","orders_o_custkey_fkey",0);
    (X_65,r1_67) := sql.bind_idxbat(X_0,"sys","orders","orders_o_custkey_fkey",2);
    X_67:bat[:oid] := sql.bind_idxbat(X_0,"sys","orders","orders_o_custkey_fkey",1);
    X_68 := sql.delta(X_63,X_65,r1_67,X_67);
    X_71:bat[:oid] := algebra.projectionpath(X_61,C_51,C_1,X_68);
    C_72:bat[:oid] := sql.tid(X_0,"sys","customer");
    (X_74,r1_76) := algebra.subjoin(X_71,C_72,nil:BAT,nil:BAT,false,nil:lng);
    X_77:bat[:int] := algebra.projectionpath(X_74,X_61,X_52);
    X_78:bat[:int] := sql.bind(X_0,"sys","customer","c_custkey",0);
    X_85:bat[:int] := algebra.projectionpath(r1_76,C_72,X_78);
    (X_86,r1_88,r2_88) := group.subgroup(X_85);
    (X_89,r1_91,r2_91) := group.subgroupdone(X_77,X_86);
    X_92:bat[:date] := sql.bind(X_0,"sys","orders","o_orderdate",0);
    X_102:bat[:date] := algebra.projectionpath(r1_91,X_74,X_61,C_51,C_1,X_92);
    X_103:bat[:lng] := sql.bind(X_0,"sys","orders","o_totalprice",0);
    X_113:bat[:lng] := algebra.projectionpath(r1_91,X_74,X_61,C_51,C_1,X_103);
    X_135:bat[:str] := sql.bind(X_0,"sys","customer","c_name",0);
    (C_119,r1_121) := algebra.firstn(X_113,100,false,false);
    C_125 := algebra.firstn(X_102,C_119,r1_121,100,true,false);
    X_127 := algebra.projection(C_125,X_102);
    X_128 := algebra.projection(C_125,X_113);
    (X_129,r1_131,r2_131) := algebra.subsort(X_128,true,false);
    (X_132,r1_134,r2_134) := algebra.subsort(X_127,r1_131,r2_131,false,false);
    X_145:bat[:str] := algebra.projectionpath(r1_134,C_125,r1_91,r1_76,C_72,X_135);
    X_151 := algebra.subslice(X_145,0,99:lng);
    X_156:bat[:int] := algebra.projectionpath(X_151,r1_134,C_125,r1_91,X_85);
    X_160:bat[:int] := algebra.projectionpath(X_151,r1_134,C_125,r1_91,X_77);
    X_172:bat[:lng] := algebra.projectionpath(X_74,r1_63,X_23);
    X_173:bat[:lng] := aggr.subsum(X_172,X_89,r1_91,true,true);
    X_152 := algebra.projection(X_151,X_145);
    X_162:bat[:date] := algebra.projectionpath(X_151,r1_134,X_127);
    X_164:bat[:lng] := algebra.projectionpath(X_151,r1_134,X_128);
    X_178:bat[:lng] := algebra.projectionpath(X_151,r1_134,C_125,X_173);
    sql.resultSet(X_228,X_230,X_232,X_233,X_235,X_152,X_156,X_160,X_162,X_164,X_178);
end user.s4_1;
#inline               actions= 0 time=3 usec 
#remap                actions= 0 time=5 usec 
#costmodel            actions= 1 time=7 usec 
#coercion             actions= 5 time=25 usec 
#evaluate             actions= 6 time=64 usec 
#emptybind            actions=27 time=56 usec 
#aliases              actions=15 time=24 usec 
#mergetable           actions= 0 time=89 usec 
#deadcode             actions=27 time=19 usec 
#aliases              actions= 0 time=15 usec 
#constants            actions=26 time=28 usec 
#commonTerms          actions= 5 time=30 usec 
#projectionpath       actions=27 time=44 usec 
#reorder              actions= 1 time=96 usec 
#deadcode             actions=32 time=20 usec 
#reduce               actions=134 time=28 usec 
#matpack              actions= 0 time=4 usec 
#multiplex            actions= 0 time=5 usec 
#profiler             actions= 1 time=8 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=42 usec 
#total                actions= 1 time=880 usec 

# 22:53:30 >  
# 22:53:30 >  "Done."
# 22:53:30 >  

