stdout of test '18-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:30 >  
# 22:53:30 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:30 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:30 >  
# 22:53:30 >  "/usr/bin/python2" "18-explain.SQL.py" "18-explain"
# 22:53:30 >  

#set optimizer = 'sequential_pipe';
#explain select
#	c_name,
#	c_custkey,
#	o_orderkey,
#	o_orderdate,
#	o_totalprice,
#	sum(l_quantity)
#from
#	customer,
#	orders,
#	lineitem
#where
#	o_orderkey in (
#		select
#			l_orderkey
#		from
#			lineitem
#		group by
#			l_orderkey having
#				sum(l_quantity) > 300
#	)
#	and c_custkey = o_custkey
#	and o_orderkey = l_orderkey
#group by
#	c_name,
#	c_custkey,
#	o_orderkey,
#	o_orderdate,
#	o_totalprice
#order by
#	o_totalprice desc,
#	o_orderdate
#limit 100;
% .explain # table_name
% mal # name
% clob # type
% 514 # length
function user.s4_1():void;
    X_251:void := querylog.define("explain select\n c_name,\n c_custkey,\n o_orderkey,\n o_orderdate,\n o_totalprice,\n sum(l_quantity)\nfrom\n customer,\n orders,\n lineitem\nwhere\n o_orderkey in (\n select\n l_orderkey\n from\n lineitem\n group by\n l_orderkey having\n sum(l_quantity) > 300\n )\n and c_custkey = o_custkey\n and o_orderkey = l_orderkey\ngroup by\n c_name,\n c_custkey,\n o_orderkey,\n o_orderdate,\n o_totalprice\norder by\n o_totalprice desc,\n o_orderdate\nlimit 100;","sequential_pipe",90);
    X_195 := bat.new(nil:str);
    X_202 := bat.append(X_195,"sys.customer");
    X_212 := bat.append(X_202,"sys.customer");
    X_220 := bat.append(X_212,"sys.orders");
    X_227 := bat.append(X_220,"sys.orders");
    X_234 := bat.append(X_227,"sys.orders");
    X_243 := bat.append(X_234,"sys.L22");
    X_197 := bat.new(nil:str);
    X_204 := bat.append(X_197,"c_name");
    X_213 := bat.append(X_204,"c_custkey");
    X_222 := bat.append(X_213,"o_orderkey");
    X_228 := bat.append(X_222,"o_orderdate");
    X_235 := bat.append(X_228,"o_totalprice");
    X_245 := bat.append(X_235,"L21");
    X_198 := bat.new(nil:str);
    X_206 := bat.append(X_198,"varchar");
    X_215 := bat.append(X_206,"int");
    X_224 := bat.append(X_215,"int");
    X_230 := bat.append(X_224,"date");
    X_237 := bat.append(X_230,"decimal");
    X_247 := bat.append(X_237,"decimal");
    X_199 := bat.new(nil:int);
    X_208 := bat.append(X_199,25);
    X_217 := bat.append(X_208,32);
    X_225 := bat.append(X_217,32);
    X_232 := bat.append(X_225,0);
    X_239 := bat.append(X_232,15);
    X_248 := bat.append(X_239,19);
    X_201 := bat.new(nil:int);
    X_210 := bat.append(X_201,0);
    X_219 := bat.append(X_210,0);
    X_226 := bat.append(X_219,0);
    X_233 := bat.append(X_226,0);
    X_241 := bat.append(X_233,2);
    X_250 := bat.append(X_241,2);
    X_0 := sql.mvc();
    C_3:bat[:oid] := sql.tid(X_0,"sys","orders");
    X_6:bat[:int] := sql.bind(X_0,"sys","orders","o_orderkey",0);
    X_15 := algebra.projection(C_3,X_6);
    X_74 := bat.mirror(X_15);
    C_37:bat[:oid] := sql.tid(X_0,"sys","lineitem");
    X_46:bat[:lng] := sql.bind(X_0,"sys","lineitem","l_quantity",0);
    X_52 := algebra.projection(C_37,X_46);
    X_39:bat[:int] := sql.bind(X_0,"sys","lineitem","l_orderkey",0);
    X_45 := algebra.projection(C_37,X_39);
    (X_53,X_54,X_55) := group.subgroupdone(X_45);
    X_57:bat[:lng] := aggr.subsum(X_52,X_53,X_54,true,true);
    C_64 := algebra.thetasubselect(X_57,30000:lng,">");
    X_66:bat[:int] := algebra.projectionpath(C_64,X_54,X_45);
    (X_68,X_69) := algebra.subjoin(X_15,X_66,nil:BAT,nil:BAT,false,nil:lng);
    C_75 := algebra.subinter(X_74,X_68,nil:BAT,nil:BAT,false,nil:lng);
    X_76 := algebra.projection(C_75,X_15);
    (X_94,X_95) := algebra.subjoin(X_76,X_45,nil:BAT,nil:BAT,false,nil:lng);
    X_30:bat[:oid] := sql.bind_idxbat(X_0,"sys","orders","orders_o_custkey_fkey",0);
    (X_33,X_34:bat[:oid]) := sql.bind_idxbat(X_0,"sys","orders","orders_o_custkey_fkey",2);
    X_32:bat[:oid] := sql.bind_idxbat(X_0,"sys","orders","orders_o_custkey_fkey",1);
    X_35 := sql.delta(X_30,X_33,X_34,X_32);
    X_99:bat[:oid] := algebra.projectionpath(X_94,C_75,C_3,X_35);
    C_102:bat[:oid] := sql.tid(X_0,"sys","customer");
    (X_118,X_119) := algebra.subjoin(X_99,C_102,nil:BAT,nil:BAT,false,nil:lng);
    X_124:bat[:int] := algebra.projectionpath(X_118,X_94,X_76);
    X_104:bat[:int] := sql.bind(X_0,"sys","customer","c_custkey",0);
    X_130:bat[:int] := algebra.projectionpath(X_119,C_102,X_104);
    (X_133,X_134,X_135) := group.subgroup(X_130);
    (X_136,X_137,X_138) := group.subgroupdone(X_124,X_133);
    X_111:bat[:str] := sql.bind(X_0,"sys","customer","c_name",0);
    X_23:bat[:date] := sql.bind(X_0,"sys","orders","o_orderdate",0);
    X_142:bat[:date] := algebra.projectionpath(X_137,X_118,X_94,C_75,C_3,X_23);
    X_16:bat[:lng] := sql.bind(X_0,"sys","orders","o_totalprice",0);
    X_143:bat[:lng] := algebra.projectionpath(X_137,X_118,X_94,C_75,C_3,X_16);
    X_129:bat[:lng] := algebra.projectionpath(X_118,X_95,X_52);
    X_144:bat[:lng] := aggr.subsum(X_129,X_136,X_137,true,true);
    (C_150,X_151) := algebra.firstn(X_143,100,false,false);
    C_154 := algebra.firstn(X_142,C_150,X_151,100,true,false);
    X_159 := algebra.projection(C_154,X_142);
    X_160 := algebra.projection(C_154,X_143);
    (X_168,X_169,X_170) := algebra.subsort(X_160,true,false);
    (X_171,X_172,X_173) := algebra.subsort(X_159,X_169,X_170,false,false);
    X_174:bat[:str] := algebra.projectionpath(X_172,C_154,X_137,X_119,C_102,X_111);
    X_187 := algebra.subslice(X_174,0,99:lng);
    X_189:bat[:int] := algebra.projectionpath(X_187,X_172,C_154,X_137,X_130);
    X_190:bat[:int] := algebra.projectionpath(X_187,X_172,C_154,X_137,X_124);
    X_188 := algebra.projection(X_187,X_174);
    X_191:bat[:date] := algebra.projectionpath(X_187,X_172,X_159);
    X_192:bat[:lng] := algebra.projectionpath(X_187,X_172,X_160);
    X_193:bat[:lng] := algebra.projectionpath(X_187,X_172,C_154,X_144);
    sql.resultSet(X_243,X_245,X_247,X_248,X_250,X_188,X_189,X_190,X_191,X_192,X_193);
end user.s4_1;
#inline               actions= 0 time=3 usec 
#remap                actions= 0 time=5 usec 
#costmodel            actions= 1 time=7 usec 
#coercion             actions= 5 time=25 usec 
#evaluate             actions= 6 time=64 usec 
#emptybind            actions=27 time=56 usec 
#aliases              actions=15 time=24 usec 
#mergetable           actions= 0 time=89 usec 
#deadcode             actions=27 time=19 usec 
#aliases              actions= 0 time=15 usec 
#constants            actions=26 time=28 usec 
#commonTerms          actions= 5 time=30 usec 
#projectionpath       actions=27 time=44 usec 
#reorder              actions= 1 time=96 usec 
#deadcode             actions=32 time=20 usec 
#reduce               actions=134 time=28 usec 
#matpack              actions= 0 time=4 usec 
#multiplex            actions= 0 time=5 usec 
#profiler             actions= 1 time=8 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=42 usec 
#total                actions= 1 time=880 usec 

# 22:53:30 >  
# 22:53:30 >  "Done."
# 22:53:30 >  

