stdout of test '18-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:30 >  
# 22:53:30 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:30 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:30 >  
# 22:53:30 >  "/usr/bin/python2" "18-explain.SQL.py" "18-explain"
# 22:53:30 >  

#set optimizer = 'sequential_pipe';
#explain select
#	c_name,
#	c_custkey,
#	o_orderkey,
#	o_orderdate,
#	o_totalprice,
#	sum(l_quantity)
#from
#	customer,
#	orders,
#	lineitem
#where
#	o_orderkey in (
#		select
#			l_orderkey
#		from
#			lineitem
#		group by
#			l_orderkey having
#				sum(l_quantity) > 300
#	)
#	and c_custkey = o_custkey
#	and o_orderkey = l_orderkey
#group by
#	c_name,
#	c_custkey,
#	o_orderkey,
#	o_orderdate,
#	o_totalprice
#order by
#	o_totalprice desc,
#	o_orderdate
#limit 100;
% .explain # table_name
% mal # name
% clob # type
% 566 # length
function user.s2_1{autoCommit=true}(A0:sht):void;
    X_234:void := querylog.define("explain select\n\tc_name,\n\tc_custkey,\n\to_orderkey,\n\to_orderdate,\n\to_totalprice,\n\tsum(l_quantity)\nfrom\n\tcustomer,\n\torders,\n\tlineitem\nwhere\n\to_orderkey in (\n\t\tselect\n\t\t\tl_orderkey\n\t\tfrom\n\t\t\tlineitem\n\t\tgroup by\n\t\t\tl_orderkey having\n\t\t\t\tsum(l_quantity) > 300\n\t)\n\tand c_custkey = o_custkey\n\tand o_orderkey = l_orderkey\ngroup by\n\tc_name,\n\tc_custkey,\n\to_orderkey,\n\to_orderdate,\n\to_totalprice\norder by\n\to_totalprice desc,\n\to_orderdate\nlimit 100;","sequential_pipe",129);
    X_177 := bat.new(nil:oid,nil:str);
    X_185 := bat.append(X_177,"sys.customer");
    X_195 := bat.append(X_185,"sys.customer");
    X_203 := bat.append(X_195,"sys.orders");
    X_210 := bat.append(X_203,"sys.orders");
    X_217 := bat.append(X_210,"sys.orders");
    X_226 := bat.append(X_217,"sys.L6");
    X_180 := bat.new(nil:oid,nil:str);
    X_187 := bat.append(X_180,"c_name");
    X_196 := bat.append(X_187,"c_custkey");
    X_205 := bat.append(X_196,"o_orderkey");
    X_211 := bat.append(X_205,"o_orderdate");
    X_218 := bat.append(X_211,"o_totalprice");
    X_228 := bat.append(X_218,"L6");
    X_181 := bat.new(nil:oid,nil:str);
    X_189 := bat.append(X_181,"varchar");
    X_198 := bat.append(X_189,"int");
    X_207 := bat.append(X_198,"int");
    X_213 := bat.append(X_207,"date");
    X_220 := bat.append(X_213,"decimal");
    X_230 := bat.append(X_220,"decimal");
    X_182 := bat.new(nil:oid,nil:int);
    X_191 := bat.append(X_182,25);
    X_200 := bat.append(X_191,32);
    X_208 := bat.append(X_200,32);
    X_215 := bat.append(X_208,0);
    X_222 := bat.append(X_215,15);
    X_231 := bat.append(X_222,19);
    X_184 := bat.new(nil:oid,nil:int);
    X_193 := bat.append(X_184,0);
    X_202 := bat.append(X_193,0);
    X_209 := bat.append(X_202,0);
    X_216 := bat.append(X_209,0);
    X_224 := bat.append(X_216,2);
    X_233 := bat.append(X_224,2);
    X_3 := sql.mvc();
    X_4:bat[:oid,:oid]  := sql.tid(X_3,"sys","orders");
    X_7:bat[:oid,:int]  := sql.bind(X_3,"sys","orders","o_orderkey",0);
    (X_10,r1_10) := sql.bind(X_3,"sys","orders","o_orderkey",2);
    X_13:bat[:oid,:int]  := sql.bind(X_3,"sys","orders","o_orderkey",1);
    X_15 := sql.delta(X_7,X_10,r1_10,X_13);
    X_16 := algebra.leftfetchjoin(X_4,X_15);
    X_17 := bat.mirror(X_16);
    X_18:bat[:oid,:oid]  := sql.tid(X_3,"sys","lineitem");
    X_20:bat[:oid,:lng]  := sql.bind(X_3,"sys","lineitem","l_quantity",0);
    (X_22,r1_22) := sql.bind(X_3,"sys","lineitem","l_quantity",2);
    X_24:bat[:oid,:lng]  := sql.bind(X_3,"sys","lineitem","l_quantity",1);
    X_25 := sql.delta(X_20,X_22,r1_22,X_24);
    X_26 := algebra.leftfetchjoin(X_18,X_25);
    X_27:bat[:oid,:int]  := sql.bind(X_3,"sys","lineitem","l_orderkey",0);
    (X_29,r1_29) := sql.bind(X_3,"sys","lineitem","l_orderkey",2);
    X_31:bat[:oid,:int]  := sql.bind(X_3,"sys","lineitem","l_orderkey",1);
    X_32 := sql.delta(X_27,X_29,r1_29,X_31);
    X_33 := algebra.leftfetchjoin(X_18,X_32);
    (X_34,r1_34,r2_34) := group.subgroupdone(X_33);
    X_37:bat[:oid,:lng]  := aggr.subsum(X_26,X_34,r1_34,true,true);
    X_43 := algebra.leftfetchjoin(r1_34,X_33);
    X_39 := calc.lng(A0,19,2);
    X_41 := algebra.thetasubselect(X_37,X_39,">");
    X_44 := bat.setKey(X_43,true);
    X_45 := algebra.leftfetchjoin(X_41,X_44);
    (X_46,r1_47) := algebra.subjoin(X_16,X_45,nil:BAT,nil:BAT,false,nil:lng);
    X_51 := algebra.tinter(X_17,X_46);
    X_52 := algebra.leftfetchjoin(X_51,X_16);
    (X_57,r1_67) := algebra.subjoin(X_52,X_33,nil:BAT,nil:BAT,false,nil:lng);
    X_59:bat[:oid,:oid] := sql.bind_idxbat(X_3,"sys","orders","orders_o_custkey_fkey",0);
    (X_62,r1_72) := sql.bind_idxbat(X_3,"sys","orders","orders_o_custkey_fkey",2);
    X_64:bat[:oid,:oid] := sql.bind_idxbat(X_3,"sys","orders","orders_o_custkey_fkey",1);
    X_65 := sql.delta(X_59,X_62,r1_72,X_64);
    X_66:bat[:oid,:oid] := algebra.leftfetchjoinPath(X_57,X_51,X_4,X_65);
    X_67:bat[:oid,:oid] := sql.tid(X_3,"sys","customer");
    (X_69,r1_81) := algebra.subjoin(X_66,X_67,nil:BAT,nil:BAT,false,nil:lng);
    X_74:bat[:oid,:int] := sql.bind(X_3,"sys","customer","c_custkey",0);
    (X_76,r1_88) := sql.bind(X_3,"sys","customer","c_custkey",2);
    X_79:bat[:oid,:int] := sql.bind(X_3,"sys","customer","c_custkey",1);
    X_80 := sql.delta(X_74,X_76,r1_88,X_79);
    X_81 := algebra.leftfetchjoin(X_67,X_80);
    X_82 := algebra.leftfetchjoin(r1_81,X_81);
    X_83:bat[:oid,:int] := algebra.leftfetchjoinPath(X_69,X_57,X_52);
    (X_84,r1_97,r2_97) := group.subgroup(X_83);
    (X_87,r1_100,r2_100) := group.subgroupdone(X_82,X_84);
    X_90 := algebra.leftfetchjoin(r1_100,X_82);
    (X_94,r1_114) := algebra.subjoin(X_90,X_81,nil:BAT,nil:BAT,false,nil:lng);
    X_99:bat[:oid,:int] := algebra.leftfetchjoinPath(X_94,r1_100,X_83);
    X_161:bat[:oid,:lng] := sql.bind(X_3,"sys","lineitem","l_quantity",0);
    (X_166,r1_214) := sql.bind(X_3,"sys","lineitem","l_quantity",2);
    X_169:bat[:oid,:lng] := sql.bind(X_3,"sys","lineitem","l_quantity",1);
    X_171 := sql.delta(X_161,X_166,r1_214,X_169);
    X_172:bat[:oid,:lng] := algebra.leftfetchjoinPath(X_69,r1_67,X_18,X_171);
    X_173:bat[:oid,:lng] := aggr.subsum(X_172,X_87,r1_100,true,true);
    X_100:bat[:oid,:oid] := sql.tid(X_3,"sys","orders");
    X_102:bat[:oid,:int] := sql.bind(X_3,"sys","orders","o_orderkey",0);
    (X_105,r1_126) := sql.bind(X_3,"sys","orders","o_orderkey",2);
    X_107:bat[:oid,:int] := sql.bind(X_3,"sys","orders","o_orderkey",1);
    X_108 := sql.delta(X_102,X_105,r1_126,X_107);
    X_109 := algebra.leftfetchjoin(X_100,X_108);
    (X_110,r1_131) := algebra.subjoin(X_99,X_109,nil:BAT,nil:BAT,false,nil:lng);
    X_112:bat[:oid,:date] := sql.bind(X_3,"sys","orders","o_orderdate",0);
    (X_114,r1_135) := sql.bind(X_3,"sys","orders","o_orderdate",2);
    X_116:bat[:oid,:date] := sql.bind(X_3,"sys","orders","o_orderdate",1);
    X_117 := sql.delta(X_112,X_114,r1_135,X_116);
    X_118:bat[:oid,:date] := algebra.leftfetchjoinPath(r1_131,X_100,X_117);
    X_119:bat[:oid,:lng] := sql.bind(X_3,"sys","orders","o_totalprice",0);
    (X_122,r1_144) := sql.bind(X_3,"sys","orders","o_totalprice",2);
    X_125:bat[:oid,:lng] := sql.bind(X_3,"sys","orders","o_totalprice",1);
    X_127 := sql.delta(X_119,X_122,r1_144,X_125);
    X_128:bat[:oid,:lng] := algebra.leftfetchjoinPath(r1_131,X_100,X_127);
    (X_129,r1_157) := algebra.firstn(X_128,100:wrd,false,false);
    X_132 := algebra.firstn(X_118,X_129,r1_157,100:wrd,true,false);
    X_134 := algebra.leftfetchjoin(X_132,X_118);
    X_135 := algebra.leftfetchjoin(X_132,X_128);
    (X_136,r1_166,r2_166) := algebra.subsort(X_135,true,false);
    (X_139,r1_169,r2_169) := algebra.subsort(X_134,r1_166,r2_166,false,false);
    X_142:bat[:oid,:str] := sql.bind(X_3,"sys","customer","c_name",0);
    (X_147,r1_177) := sql.bind(X_3,"sys","customer","c_name",2);
    X_150:bat[:oid,:str] := sql.bind(X_3,"sys","customer","c_name",1);
    X_152 := sql.delta(X_142,X_147,r1_177,X_150);
    X_153:bat[:oid,:str] := algebra.leftfetchjoinPath(r1_169,X_132,X_110,r1_114,X_67,X_152);
    X_155 := algebra.subslice(X_153,0,99:wrd);
    X_156 := algebra.leftfetchjoin(X_155,X_153);
    X_157:bat[:oid,:int] := algebra.leftfetchjoinPath(X_155,r1_169,X_132,X_110,X_94,X_90);
    X_158:bat[:oid,:int] := algebra.leftfetchjoinPath(X_155,r1_169,X_132,X_110,X_99);
    X_159:bat[:oid,:date] := algebra.leftfetchjoinPath(X_155,r1_169,X_134);
    X_160:bat[:oid,:lng] := algebra.leftfetchjoinPath(X_155,r1_169,X_135);
    X_175:bat[:oid,:lng] := algebra.leftfetchjoinPath(X_155,r1_169,X_132,X_110,X_94,X_173);
    sql.resultSet(X_226,X_228,X_230,X_231,X_233,X_156,X_157,X_158,X_159,X_160,X_175);
end user.s2_1;

# 22:53:30 >  
# 22:53:30 >  "Done."
# 22:53:30 >  

