stdout of test '04-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:25 >  
# 22:53:25 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:25 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:26 >  
# 22:53:26 >  "/usr/bin/python2" "04-explain.SQL.py" "04-explain"
# 22:53:26 >  

#set optimizer = 'sequential_pipe';
#explain select
#	o_orderpriority,
#	count(*) as order_count
#from
#	orders
#where
#	o_orderdate >= date '1993-07-01'
#	and o_orderdate < date '1993-07-01' + interval '3' month
#	and exists (
#		select
#			*
#		from
#			lineitem
#		where
#			l_orderkey = o_orderkey
#			and l_commitdate < l_receiptdate
#	)
#group by
#	o_orderpriority
#order by
#	o_orderpriority;
% .explain # table_name
% mal # name
% clob # type
% 421 # length
function user.s4_1():void;
    X_77:void := querylog.define("explain select\n o_orderpriority,\n count(*) as order_count\nfrom\n orders\nwhere\n o_orderdate >= date \\'1993-07-01\\'\n and o_orderdate < date \\'1993-07-01\\' + interval \\'3\\' month\n and exists (\n select\n *\n from\n lineitem\n where\n l_orderkey = o_orderkey\n and l_commitdate < l_receiptdate\n )\ngroup by\n o_orderpriority\norder by\n o_orderpriority;","sequential_pipe",48);
    X_52 := bat.new(nil:oid,nil:str);
    X_60 := bat.append(X_52,"sys.orders");
    X_68 := bat.append(X_60,"sys.L1");
    X_55 := bat.new(nil:oid,nil:str);
    X_62 := bat.append(X_55,"o_orderpriority");
    X_70 := bat.append(X_62,"order_count");
    X_56 := bat.new(nil:oid,nil:str);
    X_63 := bat.append(X_56,"char");
    X_72 := bat.append(X_63,"wrd");
    X_57 := bat.new(nil:oid,nil:int);
    X_65 := bat.append(X_57,15);
    X_74 := bat.append(X_65,64);
    X_59 := bat.new(nil:oid,nil:int);
    X_67 := bat.append(X_59,0);
    X_76 := bat.append(X_67,0);
    X_3 := sql.mvc();
    C_4:bat[:oid] := sql.tid(X_3,"sys","orders");
    X_7:bat[:date] := sql.bind(X_3,"sys","orders","o_orderdate",0);
    X_10 := algebra.projection(C_4,X_7);
    X_11:date := mtime.addmonths("1993-07-01",3);
    C_12 := algebra.subselect(X_10,"1993-07-01",X_11,true,false,false);
    X_15:bat[:int] := sql.bind(X_3,"sys","orders","o_orderkey",0);
    X_17:bat[:int] := algebra.projectionpath(C_12,C_4,X_15);
    X_18 := bat.mirror(X_17);
    C_19:bat[:oid] := sql.tid(X_3,"sys","lineitem");
    X_21:bat[:date] := sql.bind(X_3,"sys","lineitem","l_commitdate",0);
    X_23 := algebra.projection(C_19,X_21);
    X_24:bat[:date] := sql.bind(X_3,"sys","lineitem","l_receiptdate",0);
    X_26 := algebra.projection(C_19,X_24);
    X_27:bat[:bit] := batcalc.<(X_23,X_26);
    C_28 := algebra.subselect(X_27,true,true,true,true,false);
    X_29:bat[:int] := sql.bind(X_3,"sys","lineitem","l_orderkey",0);
    X_31:bat[:int] := algebra.projectionpath(C_28,C_19,X_29);
    (X_32,r1_63) := algebra.subjoin(X_17,X_31,nil:BAT,nil:BAT,false,nil:lng);
    C_36 := algebra.subinter(X_18,X_32,nil:BAT,nil:BAT,false,nil:lng);
    X_37:bat[:str] := sql.bind(X_3,"sys","orders","o_orderpriority",0);
    X_39:bat[:str] := algebra.projectionpath(C_36,C_12,C_4,X_37);
    (X_40,r1_79,r2_79) := group.subgroupdone(X_39);
    X_43 := algebra.projection(r1_79,X_39);
    X_49:bat[:wrd] := aggr.subcount(X_40,X_40,r1_79,false);
    X_44 := bat.setKey(X_43,true);
    (X_45,r1_85,r2_85) := algebra.subsort(X_44,false,false);
    X_48 := algebra.projection(r1_85,X_44);
    X_50 := algebra.projection(r1_85,X_49);
    sql.resultSet(X_68,X_70,X_72,X_74,X_76,X_48,X_50);
end user.s4_1;
#inline               actions= 0 time=7 usec 
#candidates           actions= 1 time=61 usec 
#remap                actions= 1 time=283 usec 
#costModel            actions= 1 time=86 usec 
#coercions            actions= 0 time=5 usec 
#evaluate             actions= 3 time=115 usec 
#emptybind            actions= 0 time=7 usec 
#pushselect           actions= 0 time=7 usec 
#aliases              actions= 9 time=94 usec 
#mergetable           actions= 0 time=101 usec 
#deadcode             actions=12 time=86 usec 
#aliases              actions= 0 time=12 usec 
#constants            actions= 9 time=97 usec 
#commonTerms          actions= 0 time=15 usec 
#projectionpath       actions= 4 time=84 usec 
#reorder              actions= 1 time=115 usec 
#deadcode             actions= 4 time=78 usec 
#reduce               actions=62 time=121 usec 
#matpack              actions= 0 time=8 usec 
#querylog             actions= 0 time=2 usec 
#multiplex            actions= 0 time=5 usec 
#generator            actions= 0 time=3 usec 
#profiler             actions= 1 time=72 usec 
#garbageCollector     actions= 1 time=81 usec 
#total                actions= 1 time=1655 usec 

# 22:53:26 >  
# 22:53:26 >  "Done."
# 22:53:26 >  

