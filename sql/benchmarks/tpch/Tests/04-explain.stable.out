stdout of test '04-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:25 >  
# 22:53:25 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:25 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:26 >  
# 22:53:26 >  "/usr/bin/python2" "04-explain.SQL.py" "04-explain"
# 22:53:26 >  

#set optimizer = 'sequential_pipe';
#explain select
#	o_orderpriority,
#	count(*) as order_count
#from
#	orders
#where
#	o_orderdate >= date '1993-07-01'
#	and o_orderdate < date '1993-07-01' + interval '3' month
#	and exists (
#		select
#			*
#		from
#			lineitem
#		where
#			l_orderkey = o_orderkey
#			and l_commitdate < l_receiptdate
#	)
#group by
#	o_orderpriority
#order by
#	o_orderpriority;
% .explain # table_name
% mal # name
% clob # type
% 422 # length
function user.s4_1():void;
    X_113:void := querylog.define("explain select\n o_orderpriority,\n count(*) as order_count\nfrom\n orders\nwhere\n o_orderdate >= date \\'1993-07-01\\'\n and o_orderdate < date \\'1993-07-01\\' + interval \\'3\\' month\n and exists (\n select\n *\n from\n lineitem\n where\n l_orderkey = o_orderkey\n and l_commitdate < l_receiptdate\n )\ngroup by\n o_orderpriority\norder by\n o_orderpriority;","sequential_pipe",66);
    X_88 := bat.new(nil:str);
    X_95 := bat.append(X_88,"sys.orders");
    X_104 := bat.append(X_95,"sys.L1");
    X_90 := bat.new(nil:str);
    X_97 := bat.append(X_90,"o_orderpriority");
    X_106 := bat.append(X_97,"order_count");
    X_91 := bat.new(nil:str);
    X_98 := bat.append(X_91,"char");
    X_108 := bat.append(X_98,"bigint");
    X_92 := bat.new(nil:int);
    X_100 := bat.append(X_92,15);
    X_110 := bat.append(X_100,64);
    X_94 := bat.new(nil:int);
    X_102 := bat.append(X_94,0);
    X_112 := bat.append(X_102,0);
    X_0 := sql.mvc();
    X_1:bat[:oid] := sql.tid(X_0,"sys","orders");
    X_4:bat[:date] := sql.bind(X_0,"sys","orders","o_orderdate",0);
    (X_7,r1_11) := sql.bind(X_0,"sys","orders","o_orderdate",2);
    X_10:bat[:date] := sql.bind(X_0,"sys","orders","o_orderdate",1);
    X_12 := sql.delta(X_4,X_7,r1_11,X_10);
    X_13 := algebra.projection(X_1,X_12);
    X_17:date := mtime.addmonths("1993-07-01",3);
    X_18 := algebra.subselect(X_13,"1993-07-01",X_17,true,false,false);
    X_22:bat[:int] := sql.bind(X_0,"sys","orders","o_orderkey",0);
    (X_24,r1_28) := sql.bind(X_0,"sys","orders","o_orderkey",2);
    X_26:bat[:int] := sql.bind(X_0,"sys","orders","o_orderkey",1);
    X_27 := sql.delta(X_22,X_24,r1_28,X_26);
    X_29:bat[:int] := algebra.projectionpath(X_18,X_1,X_27);
    X_30 := bat.mirror(X_29);
    X_31:bat[:oid] := sql.tid(X_0,"sys","lineitem");
    X_33:bat[:date] := sql.bind(X_0,"sys","lineitem","l_commitdate",0);
    (X_35,r1_39) := sql.bind(X_0,"sys","lineitem","l_commitdate",2);
    X_37:bat[:date] := sql.bind(X_0,"sys","lineitem","l_commitdate",1);
    X_38 := sql.delta(X_33,X_35,r1_39,X_37);
    X_39 := algebra.projection(X_31,X_38);
    X_40:bat[:date] := sql.bind(X_0,"sys","lineitem","l_receiptdate",0);
    (X_42,r1_46) := sql.bind(X_0,"sys","lineitem","l_receiptdate",2);
    X_44:bat[:date] := sql.bind(X_0,"sys","lineitem","l_receiptdate",1);
    X_45 := sql.delta(X_40,X_42,r1_46,X_44);
    X_46 := algebra.projection(X_31,X_45);
    X_47:bat[:bit] := batcalc.<(X_39,X_46);
    X_50 := algebra.subselect(X_47,true,true,true,true,false);
    X_51:bat[:int] := sql.bind(X_0,"sys","lineitem","l_orderkey",0);
    (X_53,r1_57) := sql.bind(X_0,"sys","lineitem","l_orderkey",2);
    X_55:bat[:int] := sql.bind(X_0,"sys","lineitem","l_orderkey",1);
    X_56 := sql.delta(X_51,X_53,r1_57,X_55);
    X_58:bat[:int] := algebra.projectionpath(X_50,X_31,X_56);
    (X_59,r1_63) := algebra.subjoin(X_29,X_58,nil:BAT,nil:BAT,false,nil:lng);
    X_65 := algebra.subinter(X_30,X_59,nil:BAT,nil:BAT,false,nil:lng);
    X_66:bat[:str] := sql.bind(X_0,"sys","orders","o_orderpriority",0);
    (X_68,r1_72) := sql.bind(X_0,"sys","orders","o_orderpriority",2);
    X_70:bat[:str] := sql.bind(X_0,"sys","orders","o_orderpriority",1);
    X_71 := sql.delta(X_66,X_68,r1_72,X_70);
    X_74:bat[:str] := algebra.projectionpath(X_65,X_18,X_1,X_71);
    (X_75,r1_79,r2_79) := group.subgroupdone(X_74);
    X_78 := algebra.projection(r1_79,X_74);
    X_85:bat[:lng] := aggr.subcount(X_75,X_75,r1_79,false);
    X_79 := bat.setKey(X_78,true);
    (X_81,r1_85,r2_85) := algebra.subsort(X_79,false,false);
    X_84 := algebra.projection(r1_85,X_79);
    X_86 := algebra.projection(r1_85,X_85);
    sql.resultSet(X_104,X_106,X_108,X_110,X_112,X_84,X_86);
end user.s4_1;
#inline               actions= 0 time=7 usec 
#candidates           actions= 1 time=61 usec 
#remap                actions= 1 time=283 usec 
#costModel            actions= 1 time=86 usec 
#coercions            actions= 0 time=5 usec 
#evaluate             actions= 3 time=115 usec 
#emptybind            actions= 0 time=7 usec 
#pushselect           actions= 0 time=7 usec 
#aliases              actions= 9 time=94 usec 
#mergetable           actions= 0 time=101 usec 
#deadcode             actions=12 time=86 usec 
#aliases              actions= 0 time=12 usec 
#constants            actions= 9 time=97 usec 
#commonTerms          actions= 0 time=15 usec 
#projectionpath       actions= 4 time=84 usec 
#reorder              actions= 1 time=115 usec 
#deadcode             actions= 4 time=78 usec 
#reduce               actions=62 time=121 usec 
#matpack              actions= 0 time=8 usec 
#querylog             actions= 0 time=2 usec 
#multiplex            actions= 0 time=5 usec 
#generator            actions= 0 time=3 usec 
#profiler             actions= 1 time=72 usec 
#garbageCollector     actions= 1 time=81 usec 
#total                actions= 1 time=1655 usec 

# 22:53:26 >  
# 22:53:26 >  "Done."
# 22:53:26 >  

