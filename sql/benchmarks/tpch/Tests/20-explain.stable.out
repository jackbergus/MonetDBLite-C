stdout of test '20-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:30 >  
# 22:53:30 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:30 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:30 >  
# 22:53:30 >  "/usr/bin/python2" "20-explain.SQL.py" "20-explain"
# 22:53:30 >  

#set optimizer = 'sequential_pipe';
#explain select
#	s_name,
#	s_address
#from
#	supplier,
#	nation
#where
#	s_suppkey in (
#		select
#			ps_suppkey
#		from
#			partsupp
#		where
#			ps_partkey in (
#				select
#					p_partkey
#				from
#					part
#				where
#					p_name like 'forest%'
#			)
#			and ps_availqty > (
#				select
#					0.5 * sum(l_quantity)
#				from
#					lineitem
#				where
#					l_partkey = ps_partkey
#					and l_suppkey = ps_suppkey
#					and l_shipdate >= date '1994-01-01'
#					and l_shipdate < date '1994-01-01' + interval '1' year
#			)
#	)
#	and s_nationkey = n_nationkey
% .explain # table_name
% mal # name
% clob # type
% 789 # length
function user.s2_1(A0:str,A1:bte,A2:date,A3:date,A4:int,A5:str):void;
    X_211:void := querylog.define("explain select\n\ts_name,\n\ts_address\nfrom\n\tsupplier,\n\tnation\nwhere\n\ts_suppkey in (\n\t\tselect\n\t\t\tps_suppkey\n\t\tfrom\n\t\t\tpartsupp\n\t\twhere\n\t\t\tps_partkey in (\n\t\t\t\tselect\n\t\t\t\t\tp_partkey\n\t\t\t\tfrom\n\t\t\t\t\tpart\n\t\t\t\twhere\n\t\t\t\t\tp_name like \\'forest%\\'\n\t\t\t)\n\t\t\tand ps_availqty > (\n\t\t\t\tselect\n\t\t\t\t\t0.5 * sum(l_quantity)\n\t\t\t\tfrom\n\t\t\t\t\tlineitem\n\t\t\t\twhere\n\t\t\t\t\tl_partkey = ps_partkey\n\t\t\t\t\tand l_suppkey = ps_suppkey\n\t\t\t\t\tand l_shipdate >= date \\'1994-01-01\\'\n\t\t\t\t\tand l_shipdate < date \\'1994-01-01\\' + interval \\'1\\' year\n\t\t\t)\n\t)\n\tand s_nationkey = n_nationkey\n\tand n_name = \\'CANADA\\'\norder by\n\ts_name;","sequential_pipe",142);
    X_188 := bat.new(nil:oid,nil:str);
    X_196 := bat.append(X_188,"sys.supplier");
    X_204 := bat.append(X_196,"sys.supplier");
    X_191 := bat.new(nil:oid,nil:str);
    X_198 := bat.append(X_191,"s_name");
    X_205 := bat.append(X_198,"s_address");
    X_192 := bat.new(nil:oid,nil:str);
    X_199 := bat.append(X_192,"char");
    X_206 := bat.append(X_199,"varchar");
    X_193 := bat.new(nil:oid,nil:int);
    X_201 := bat.append(X_193,25);
    X_208 := bat.append(X_201,40);
    X_195 := bat.new(nil:oid,nil:int);
    X_203 := bat.append(X_195,0);
    X_210 := bat.append(X_203,0);
    X_8 := sql.mvc();
    C_9:bat[:oid,:oid] := sql.tid(X_8,"sys","supplier");
    X_12:bat[:oid,:int]  := sql.bind(X_8,"sys","supplier","s_suppkey",0);
    (C_15,r1_15) := sql.bind(X_8,"sys","supplier","s_suppkey",2);
    X_18:bat[:oid,:int]  := sql.bind(X_8,"sys","supplier","s_suppkey",1);
    X_20 := sql.delta(X_12,C_15,r1_15,X_18);
    X_21 := algebra.leftfetchjoin(C_9,X_20);
    X_22 := bat.mirror(X_21);
    C_23:bat[:oid,:oid] := sql.tid(X_8,"sys","partsupp");
    X_25:bat[:oid,:int]  := sql.bind(X_8,"sys","partsupp","ps_partkey",0);
    (C_27,r1_27) := sql.bind(X_8,"sys","partsupp","ps_partkey",2);
    X_29:bat[:oid,:int]  := sql.bind(X_8,"sys","partsupp","ps_partkey",1);
    X_30 := sql.delta(X_25,C_27,r1_27,X_29);
    X_31 := algebra.leftfetchjoin(C_23,X_30);
    X_32 := bat.mirror(X_31);
    C_33:bat[:oid,:oid] := sql.tid(X_8,"sys","part");
    X_35:bat[:oid,:str]  := sql.bind(X_8,"sys","part","p_name",0);
    (C_37,r1_37) := sql.bind(X_8,"sys","part","p_name",2);
    X_39:bat[:oid,:str]  := sql.bind(X_8,"sys","part","p_name",1);
    X_40 := sql.delta(X_35,C_37,r1_37,X_39);
    X_41 := algebra.leftfetchjoin(C_33,X_40);
    C_43 := algebra.likesubselect(X_41,nil:BAT,A0,"",false);
    X_46:bat[:oid,:int] := sql.bind(X_8,"sys","part","p_partkey",0);
    (C_48,r1_50) := sql.bind(X_8,"sys","part","p_partkey",2);
    X_50:bat[:oid,:int] := sql.bind(X_8,"sys","part","p_partkey",1);
    X_51 := sql.delta(X_46,C_48,r1_50,X_50);
    X_52:bat[:oid,:int] := algebra.leftfetchjoinPath(C_43,C_33,X_51);
    (X_53,r1_56) := algebra.subjoin(X_31,X_52,nil:BAT,nil:BAT,false,nil:lng);
    C_56 := algebra.subinter(X_32,X_53,nil:BAT,nil:BAT,false,nil:lng);
    X_57:bat[:oid,:wrd] := sql.bind_idxbat(X_8,"sys","partsupp","partsupp_ps_partkey_ps_suppkey_pkey",0);
    (X_59,r1_62) := sql.bind_idxbat(X_8,"sys","partsupp","partsupp_ps_partkey_ps_suppkey_pkey",2);
    X_61:bat[:oid,:wrd] := sql.bind_idxbat(X_8,"sys","partsupp","partsupp_ps_partkey_ps_suppkey_pkey",1);
    X_62 := sql.delta(X_57,X_59,r1_62,X_61);
    X_63:bat[:oid,:wrd] := algebra.leftfetchjoinPath(C_56,C_23,X_62);
    C_64:bat[:oid,:oid] := sql.tid(X_8,"sys","lineitem");
    X_66:bat[:oid,:date] := sql.bind(X_8,"sys","lineitem","l_shipdate",0);
    (C_68,r1_72) := sql.bind(X_8,"sys","lineitem","l_shipdate",2);
    X_70:bat[:oid,:date] := sql.bind(X_8,"sys","lineitem","l_shipdate",1);
    X_71 := sql.delta(X_66,C_68,r1_72,X_70);
    X_72 := algebra.leftfetchjoin(C_64,X_71);
    X_73 := mtime.addmonths(A3,A4);
    C_74 := algebra.subselect(X_72,A2,X_73,true,false,false);
    X_75:bat[:oid,:int] := sql.bind(X_8,"sys","lineitem","l_partkey",0);
    (C_77,r1_87) := sql.bind(X_8,"sys","lineitem","l_partkey",2);
    X_79:bat[:oid,:int] := sql.bind(X_8,"sys","lineitem","l_partkey",1);
    X_80 := sql.delta(X_75,C_77,r1_87,X_79);
    X_81:bat[:oid,:int] := algebra.leftfetchjoinPath(C_74,C_64,X_80);
    X_82:bat[:oid,:wrd] := batmkey.hash(X_81);
    X_84:bat[:oid,:int] := sql.bind(X_8,"sys","lineitem","l_suppkey",0);
    (C_86,r1_100) := sql.bind(X_8,"sys","lineitem","l_suppkey",2);
    X_88:bat[:oid,:int] := sql.bind(X_8,"sys","lineitem","l_suppkey",1);
    X_89 := sql.delta(X_84,C_86,r1_100,X_88);
    X_90:bat[:oid,:int] := algebra.leftfetchjoinPath(C_74,C_64,X_89);
    X_91:bat[:oid,:wrd] := mkey.bulk_rotate_xor_hash(X_82,22,X_90);
    (X_92,r1_107) := algebra.subjoin(X_63,X_91,nil:BAT,nil:BAT,false,nil:lng);
    X_94 := algebra.leftfetchjoin(C_56,X_31);
    X_95 := algebra.leftfetchjoin(X_92,X_94);
    X_96 := algebra.leftfetchjoin(r1_107,X_81);
    X_97:bat[:oid,:bit] := batcalc.==(X_95,X_96);
    C_98 := algebra.subselect(X_97,true,true,true,false,false);
    X_99 := algebra.leftfetchjoin(C_98,X_92);
    X_100:bat[:oid,:int] := sql.bind(X_8,"sys","partsupp","ps_suppkey",0);
    (C_102,r1_126) := sql.bind(X_8,"sys","partsupp","ps_suppkey",2);
    X_104:bat[:oid,:int] := sql.bind(X_8,"sys","partsupp","ps_suppkey",1);
    X_105 := sql.delta(X_100,C_102,r1_126,X_104);
    X_106:bat[:oid,:int] := algebra.leftfetchjoinPath(C_56,C_23,X_105);
    X_107 := algebra.leftfetchjoin(X_99,X_106);
    X_108 := algebra.leftfetchjoin(C_98,r1_107);
    X_109 := algebra.leftfetchjoin(X_108,X_90);
    X_110:bat[:oid,:bit] := batcalc.==(X_107,X_109);
    C_111 := algebra.subselect(X_110,true,true,true,false,false);
    X_112 := algebra.leftfetchjoin(C_111,X_99);
    X_113:bat[:oid,:oid] := batcalc.identity(X_94);
    X_114 := algebra.leftfetchjoin(X_112,X_113);
    (X_115,r1_142,r2_142) := group.subgroupdone(X_114);
    X_118:bat[:oid,:int] := sql.bind(X_8,"sys","partsupp","ps_availqty",0);
    (C_120,r1_147) := sql.bind(X_8,"sys","partsupp","ps_availqty",2);
    X_122:bat[:oid,:int] := sql.bind(X_8,"sys","partsupp","ps_availqty",1);
    X_123 := sql.delta(X_118,C_120,r1_147,X_122);
    X_124:bat[:oid,:int] := algebra.leftfetchjoinPath(r1_142,X_112,C_56,C_23,X_123);
    X_128:bat[:oid,:lng] := sql.bind(X_8,"sys","lineitem","l_quantity",0);
    (C_130,r1_164) := sql.bind(X_8,"sys","lineitem","l_quantity",2);
    X_132:bat[:oid,:lng] := sql.bind(X_8,"sys","lineitem","l_quantity",1);
    X_133 := sql.delta(X_128,C_130,r1_164,X_132);
    X_134:bat[:oid,:lng] := algebra.leftfetchjoinPath(C_111,X_108,C_74,C_64,X_133);
    X_135:bat[:oid,:lng] := aggr.subsum(X_134,X_115,r1_142,true,true);
    X_125:bat[:oid,:lng] := batcalc.lng(X_124,19,3);
    X_136:bat[:oid,:lng] := batcalc.*(A1,X_135);
    X_137:bat[:oid,:bit] := batcalc.>(X_125,X_136);
    C_138 := algebra.subselect(X_137,true,true,true,true,false);
    X_139:bat[:oid,:int] := algebra.leftfetchjoinPath(C_138,r1_142,X_112,X_106);
    (X_140,r1_183) := algebra.subjoin(X_21,X_139,nil:BAT,nil:BAT,false,nil:lng);
    C_142 := algebra.subinter(X_22,X_140,nil:BAT,nil:BAT,false,nil:lng);
    X_143:bat[:oid,:int] := sql.bind(X_8,"sys","supplier","s_nationkey",0);
    (C_145,r1_191) := sql.bind(X_8,"sys","supplier","s_nationkey",2);
    X_147:bat[:oid,:int] := sql.bind(X_8,"sys","supplier","s_nationkey",1);
    X_148 := sql.delta(X_143,C_145,r1_191,X_147);
    X_149:bat[:oid,:int] := algebra.leftfetchjoinPath(C_142,C_9,X_148);
    C_150:bat[:oid,:oid] := sql.tid(X_8,"sys","nation");
    X_152:bat[:oid,:str] := sql.bind(X_8,"sys","nation","n_name",0);
    (C_154,r1_201) := sql.bind(X_8,"sys","nation","n_name",2);
    X_156:bat[:oid,:str] := sql.bind(X_8,"sys","nation","n_name",1);
    X_157 := sql.delta(X_152,C_154,r1_201,X_156);
    X_158 := algebra.leftfetchjoin(C_150,X_157);
    C_159 := algebra.subselect(X_158,A5,A5,true,false,false);
    X_160:bat[:oid,:int] := sql.bind(X_8,"sys","nation","n_nationkey",0);
    (C_162,r1_211) := sql.bind(X_8,"sys","nation","n_nationkey",2);
    X_164:bat[:oid,:int] := sql.bind(X_8,"sys","nation","n_nationkey",1);
    X_165 := sql.delta(X_160,C_162,r1_211,X_164);
    X_166:bat[:oid,:int] := algebra.leftfetchjoinPath(C_159,C_150,X_165);
    (X_167,r1_217) := algebra.subjoin(X_149,X_166,nil:BAT,nil:BAT,false,nil:lng);
    X_169:bat[:oid,:str] := sql.bind(X_8,"sys","supplier","s_name",0);
    (C_171,r1_225) := sql.bind(X_8,"sys","supplier","s_name",2);
    X_173:bat[:oid,:str] := sql.bind(X_8,"sys","supplier","s_name",1);
    X_174 := sql.delta(X_169,C_171,r1_225,X_173);
    X_175:bat[:oid,:str] := algebra.leftfetchjoinPath(X_167,C_142,C_9,X_174);
    (X_176,r1_232,r2_232) := algebra.subsort(X_175,false,false);
    X_179 := algebra.leftfetchjoin(r1_232,X_175);
    X_180:bat[:oid,:str] := sql.bind(X_8,"sys","supplier","s_address",0);
    (C_182,r1_238) := sql.bind(X_8,"sys","supplier","s_address",2);
    X_184:bat[:oid,:str] := sql.bind(X_8,"sys","supplier","s_address",1);
    X_185 := sql.delta(X_180,C_182,r1_238,X_184);
    X_186:bat[:oid,:str] := algebra.leftfetchjoinPath(r1_232,X_167,C_142,C_9,X_185);
    sql.resultSet(X_204,X_205,X_206,X_208,X_210,X_179,X_186);
end user.s2_1;

# 22:53:30 >  
# 22:53:30 >  "Done."
# 22:53:30 >  

