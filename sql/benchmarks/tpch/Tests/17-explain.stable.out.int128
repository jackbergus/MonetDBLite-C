stdout of test '17-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:29 >  
# 22:53:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:29 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:29 >  
# 22:53:29 >  "/usr/bin/python2" "17-explain.SQL.py" "17-explain"
# 22:53:29 >  

#set optimizer = 'sequential_pipe';
#explain select
#	sum(l_extendedprice) / 7.0 as avg_yearly
#from
#	lineitem,
#	part
#where
#	p_partkey = l_partkey
#	and p_brand = 'Brand#23'
#	and p_container = 'MED BOX'
#	and l_quantity < (
#		select
#			0.2 * avg(l_quantity)
#		from
#			lineitem
#		where
#			l_partkey = p_partkey
#	);
% .explain # table_name
% mal # name
% clob # type
% 345 # length
function user.s4_1():void;
    X_90:void := querylog.define("explain select\n sum(l_extendedprice) / 7.0 as avg_yearly\nfrom\n lineitem,\n part\nwhere\n p_partkey = l_partkey\n and p_brand = \\'Brand#23\\'\n and p_container = \\'MED BOX\\'\n and l_quantity < (\n select\n 0.2 * avg(l_quantity)\n from\n lineitem\n where\n l_partkey = p_partkey\n );","sequential_pipe",60);
    X_4 := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4,"sys","lineitem");
    X_8:bat[:int] := sql.bind(X_4,"sys","lineitem","l_partkey",0);
    (C_11,r1_12) := sql.bind(X_4,"sys","lineitem","l_partkey",2);
    X_14:bat[:int] := sql.bind(X_4,"sys","lineitem","l_partkey",1);
    X_16 := sql.projectdelta(C_5,X_8,C_11,r1_12,X_14);
    X_19:bat[:str] := sql.bind(X_4,"sys","part","p_container",0);
    X_24:bat[:str] := sql.bind(X_4,"sys","part","p_brand",0);
    C_17:bat[:oid] := sql.tid(X_4,"sys","part");
    C_107 := algebra.subselect(X_24,C_17,"Brand#23","Brand#23",true,false,false);
    (C_26,r1_31) := sql.bind(X_4,"sys","part","p_brand",2);
    C_108 := algebra.subselect(r1_31,nil:bat[:oid],"Brand#23","Brand#23",true,false,false);
    X_28:bat[:str] := sql.bind(X_4,"sys","part","p_brand",1);
    C_110 := algebra.subselect(X_28,C_17,"Brand#23","Brand#23",true,false,false);
    C_29 := sql.subdelta(C_107,C_17,C_26,C_108,C_110);
    C_111 := algebra.subselect(X_19,C_29,"MED BOX","MED BOX",true,false,false);
    (C_21,r1_23) := sql.bind(X_4,"sys","part","p_container",2);
    C_112 := algebra.subselect(r1_23,nil:bat[:oid],"MED BOX","MED BOX",true,false,false);
    X_23:bat[:str] := sql.bind(X_4,"sys","part","p_container",1);
    C_113 := algebra.subselect(X_23,C_29,"MED BOX","MED BOX",true,false,false);
    C_32 := sql.subdelta(C_111,C_29,C_21,C_112,C_113);
    X_33:bat[:int] := sql.bind(X_4,"sys","part","p_partkey",0);
    (C_35,r1_44) := sql.bind(X_4,"sys","part","p_partkey",2);
    X_37:bat[:int] := sql.bind(X_4,"sys","part","p_partkey",1);
    X_38 := sql.projectdelta(C_32,X_33,C_35,r1_44,X_37);
    (X_39,r1_58) := algebra.subjoin(X_38,X_16,nil:BAT,nil:BAT,false,nil:lng);
    X_43 := algebra.projection(X_39,X_38);
    (X_44,r1_64) := algebra.subjoin(X_16,X_43,nil:BAT,nil:BAT,false,nil:lng);
    X_46:bat[:int] := sql.bind(X_4,"sys","lineitem","l_orderkey",0);
    (C_48,r1_68) := sql.bind(X_4,"sys","lineitem","l_orderkey",2);
    X_50:bat[:int] := sql.bind(X_4,"sys","lineitem","l_orderkey",1);
    X_51 := sql.projectdelta(C_5,X_46,C_48,r1_68,X_50);
    X_52 := algebra.projection(r1_58,X_51);
    X_53:bat[:oid] := batcalc.identity(X_52);
    X_54 := algebra.projection(r1_64,X_53);
    (X_55,r1_78,r2_78) := group.subgroupdone(X_54);
    X_58:bat[:lng] := sql.bind(X_4,"sys","lineitem","l_quantity",0);
    (C_60,r1_83) := sql.bind(X_4,"sys","lineitem","l_quantity",2);
    X_62:bat[:lng] := sql.bind(X_4,"sys","lineitem","l_quantity",1);
    X_63 := sql.projectdelta(C_5,X_58,C_60,r1_83,X_62);
    X_64:bat[:lng] := algebra.projectionpath(r1_78,r1_64,r1_58,X_63);
    X_66 := algebra.projection(X_44,X_63);
    X_67:bat[:dbl] := batcalc.dbl(2,X_66);
    X_68:bat[:dbl] := aggr.subavg(X_67,X_55,r1_78,true,true);
    X_72:bat[:lng] := sql.bind(X_4,"sys","lineitem","l_extendedprice",0);
    (C_74,r1_115) := sql.bind(X_4,"sys","lineitem","l_extendedprice",2);
    X_76:bat[:lng] := sql.bind(X_4,"sys","lineitem","l_extendedprice",1);
    X_77 := sql.projectdelta(C_5,X_72,C_74,r1_115,X_76);
    X_65:bat[:dbl] := batcalc.dbl(2,X_64);
    X_69:bat[:dbl] := batcalc.*(0.2,X_68);
    X_70:bat[:bit] := batcalc.<(X_65,X_69);
    C_71 := algebra.subselect(X_70,true,true,true,true,false);
    X_78:bat[:lng] := algebra.projectionpath(C_71,r1_78,r1_64,r1_58,X_77);
    X_79:hge := aggr.sum(X_78);
    X_80 := calc.hge(2,X_79,39,5);
    X_83:hge := calc./(X_80,700:hge);
    sql.resultSet("sys.L3","avg_yearly","decimal",39,3,10,X_83);
end user.s4_1;
#inline               actions= 0 time=5 usec 
#candidates           actions= 1 time=63 usec 
#remap                actions= 5 time=108 usec 
#costModel            actions= 1 time=46 usec 
#coercions            actions= 0 time=4 usec 
#evaluate             actions= 5 time=73 usec 
#emptybind            actions= 0 time=5 usec 
#pushselect           actions= 4 time=54 usec 
#aliases              actions=17 time=47 usec 
#mergetable           actions= 0 time=53 usec 
#deadcode             actions=18 time=40 usec 
#aliases              actions= 0 time=8 usec 
#constants            actions=14 time=46 usec 
#commonTerms          actions= 5 time=39 usec 
#projectionpath       actions= 7 time=39 usec 
#reorder              actions= 1 time=57 usec 
#deadcode             actions=12 time=33 usec 
#reduce               actions=98 time=58 usec 
#matpack              actions= 0 time=5 usec 
#querylog             actions= 0 time=0 usec 
#multiplex            actions= 0 time=4 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=30 usec 
#garbageCollector     actions= 1 time=33 usec 
#total                actions= 1 time=924 usec 

# 22:53:29 >  
# 22:53:29 >  "Done."
# 22:53:29 >  

