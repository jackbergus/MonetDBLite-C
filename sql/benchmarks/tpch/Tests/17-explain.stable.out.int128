stdout of test '17-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:29 >  
# 22:53:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:29 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:29 >  
# 22:53:29 >  "/usr/bin/python2" "17-explain.SQL.py" "17-explain"
# 22:53:29 >  

#set optimizer = 'sequential_pipe';
#explain select
#	sum(l_extendedprice) / 7.0 as avg_yearly
#from
#	lineitem,
#	part
#where
#	p_partkey = l_partkey
#	and p_brand = 'Brand#23'
#	and p_container = 'MED BOX'
#	and l_quantity < (
#		select
#			0.2 * avg(l_quantity)
#		from
#			lineitem
#		where
#			l_partkey = p_partkey
#	);
% .explain # table_name
% mal # name
% clob # type
% 378 # length
function user.s2_1{autoCommit=true}(A0:bte,A1:str,A2:str,A3:dbl):void;
    X_101:void := querylog.define("explain select\n\tsum(l_extendedprice) / 7.0 as avg_yearly\nfrom\n\tlineitem,\n\tpart\nwhere\n\tp_partkey = l_partkey\n\tand p_brand = \\'Brand#23\\'\n\tand p_container = \\'MED BOX\\'\n\tand l_quantity < (\n\t\tselect\n\t\t\t0.2 * avg(l_quantity)\n\t\tfrom\n\t\t\tlineitem\n\t\twhere\n\t\t\tl_partkey = p_partkey\n\t);","sequential_pipe",61);
    X_6 := sql.mvc();
    X_7:bat[:oid,:oid]  := sql.tid(X_6,"sys","lineitem");
    X_10:bat[:oid,:int]  := sql.bind(X_6,"sys","lineitem","l_partkey",0);
    (X_13,r1_13) := sql.bind(X_6,"sys","lineitem","l_partkey",2);
    X_16:bat[:oid,:int]  := sql.bind(X_6,"sys","lineitem","l_partkey",1);
    X_18 := sql.projectdelta(X_7,X_10,X_13,r1_13,X_16);
    X_21:bat[:oid,:str] := sql.bind(X_6,"sys","part","p_container",0);
    X_26:bat[:oid,:str] := sql.bind(X_6,"sys","part","p_brand",0);
    X_19:bat[:oid,:oid] := sql.tid(X_6,"sys","part");
    X_130 := algebra.subselect(X_26,X_19,A1,A1,true,true,false);
    (X_28,r1_32) := sql.bind(X_6,"sys","part","p_brand",2);
    X_131 := algebra.subselect(r1_32,nil:bat[:oid,:oid],A1,A1,true,true,false);
    X_30:bat[:oid,:str] := sql.bind(X_6,"sys","part","p_brand",1);
    X_133 := algebra.subselect(X_30,X_19,A1,A1,true,true,false);
    X_31 := sql.subdelta(X_130,X_19,X_28,X_131,X_133);
    X_134 := algebra.subselect(X_21,X_31,A2,A2,true,true,false);
    (X_23,r1_24) := sql.bind(X_6,"sys","part","p_container",2);
    X_135 := algebra.subselect(r1_24,nil:bat[:oid,:oid],A2,A2,true,true,false);
    X_25:bat[:oid,:str] := sql.bind(X_6,"sys","part","p_container",1);
    X_137 := algebra.subselect(X_25,X_31,A2,A2,true,true,false);
    X_35 := sql.subdelta(X_134,X_31,X_23,X_135,X_137);
    X_36:bat[:oid,:int] := sql.bind(X_6,"sys","part","p_partkey",0);
    (X_38,r1_45) := sql.bind(X_6,"sys","part","p_partkey",2);
    X_40:bat[:oid,:int] := sql.bind(X_6,"sys","part","p_partkey",1);
    X_41 := sql.projectdelta(X_35,X_36,X_38,r1_45,X_40);
    (X_42,r1_59) := algebra.subjoin(X_41,X_18,nil:BAT,nil:BAT,false,nil:lng);
    X_47 := algebra.leftfetchjoin(X_42,X_41);
    (X_48,r1_65) := algebra.subjoin(X_18,X_47,nil:BAT,nil:BAT,false,nil:lng);
    X_50:bat[:oid,:int] := sql.bind(X_6,"sys","lineitem","l_orderkey",0);
    (X_52,r1_69) := sql.bind(X_6,"sys","lineitem","l_orderkey",2);
    X_54:bat[:oid,:int] := sql.bind(X_6,"sys","lineitem","l_orderkey",1);
    X_55 := sql.projectdelta(X_7,X_50,X_52,r1_69,X_54);
    X_56 := algebra.leftfetchjoin(r1_59,X_55);
    X_57:bat[:oid,:oid] := batcalc.identity(X_56);
    X_58 := algebra.leftfetchjoin(r1_65,X_57);
    (X_59,r1_79,r2_79) := group.subgroupdone(X_58);
    X_62:bat[:oid,:lng] := sql.bind(X_6,"sys","lineitem","l_quantity",0);
    (X_64,r1_84) := sql.bind(X_6,"sys","lineitem","l_quantity",2);
    X_66:bat[:oid,:lng] := sql.bind(X_6,"sys","lineitem","l_quantity",1);
    X_67 := sql.projectdelta(X_7,X_62,X_64,r1_84,X_66);
    X_68:bat[:oid,:lng] := algebra.leftfetchjoinPath(r1_79,r1_65,r1_59,X_67);
    X_71 := algebra.leftfetchjoin(X_48,X_67);
    X_72:bat[:oid,:dbl] := batcalc.dbl(2,X_71);
    X_73:bat[:oid,:dbl] := aggr.subavg(X_72,X_59,r1_79,true,true);
    X_80:bat[:oid,:lng] := sql.bind(X_6,"sys","lineitem","l_extendedprice",0);
    (X_82,r1_116) := sql.bind(X_6,"sys","lineitem","l_extendedprice",2);
    X_84:bat[:oid,:lng] := sql.bind(X_6,"sys","lineitem","l_extendedprice",1);
    X_85 := sql.projectdelta(X_7,X_80,X_82,r1_116,X_84);
    X_69:bat[:oid,:dbl] := batcalc.dbl(2,X_68);
    X_76:bat[:oid,:dbl] := batcalc.*(A3,X_73);
    X_77:bat[:oid,:bit] := batcalc.<(X_69,X_76);
    X_78 := algebra.subselect(X_77,true,true,true,true,false);
    X_86:bat[:oid,:lng] := algebra.leftfetchjoinPath(X_78,r1_79,r1_65,r1_59,X_85);
    X_87:hge := aggr.sum(X_86);
    X_88 := calc.hge(2,X_87,39,5);
    X_92 := calc.hge(1,A0,39,2);
    X_94 := calc./(X_88,X_92);
    sql.resultSet("sys.L3","avg_yearly","decimal",39,3,10,X_94);
end user.s2_1;

# 22:53:29 >  
# 22:53:29 >  "Done."
# 22:53:29 >  

