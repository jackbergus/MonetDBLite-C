stdout of test '22-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:31 >  
# 22:53:31 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:31 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:31 >  
# 22:53:31 >  "/usr/bin/python2" "22-explain.SQL.py" "22-explain"
# 22:53:31 >  

#set optimizer = 'sequential_pipe';
#explain select
#	cntrycode,
#	count(*) as numcust,
#	sum(c_acctbal) as totacctbal
#from
#	(
#		select
#			substring(c_phone from 1 for 2) as cntrycode,
#			c_acctbal
#		from
#			customer
#		where
#			substring(c_phone from 1 for 2) in
#				('13', '31', '23', '29', '30', '18', '17')
#			and c_acctbal > (
#				select
#					avg(c_acctbal)
#				from
#					customer
#				where
#					c_acctbal > 0.00
#					and substring(c_phone from 1 for 2) in
#						('13', '31', '23', '29', '30', '18', '17')
#			)
#			and not exists (
#				select
#					*
% .explain # table_name
% mal # name
% clob # type
% 710 # length
function user.s4_1():void;
    X_145:void := querylog.define("explain select\n cntrycode,\n count(*) as numcust,\n sum(c_acctbal) as totacctbal\nfrom\n (\n select\n substring(c_phone from 1 for 2) as cntrycode,\n c_acctbal\n from\n customer\n where\n substring(c_phone from 1 for 2) in\n (\\'13\\', \\'31\\', \\'23\\', \\'29\\', \\'30\\', \\'18\\', \\'17\\')\n and c_acctbal > (\n select\n avg(c_acctbal)\n from\n customer\n where\n c_acctbal > 0.00\n and substring(c_phone from 1 for 2) in\n (\\'13\\', \\'31\\', \\'23\\', \\'29\\', \\'30\\', \\'18\\', \\'17\\')\n )\n and not exists (\n select\n *\n from\n orders\n where\n o_custkey = c_custkey\n )\n ) as custsale\ngroup by\n cntrycode\norder by\n cntrycode;","sequential_pipe",100);
    X_111 := bat.new(nil:oid,nil:str);
    X_119 := bat.append(X_111,"sys.custsale");
    X_127 := bat.append(X_119,"sys.L2");
    X_136 := bat.append(X_127,"sys.L3");
    X_114 := bat.new(nil:oid,nil:str);
    X_121 := bat.append(X_114,"cntrycode");
    X_129 := bat.append(X_121,"numcust");
    X_138 := bat.append(X_129,"totacctbal");
    X_115 := bat.new(nil:oid,nil:str);
    X_123 := bat.append(X_115,"char");
    X_131 := bat.append(X_123,"wrd");
    X_140 := bat.append(X_131,"decimal");
    X_116 := bat.new(nil:oid,nil:int);
    X_125 := bat.append(X_116,15);
    X_133 := bat.append(X_125,64);
    X_142 := bat.append(X_133,39);
    X_118 := bat.new(nil:oid,nil:int);
    X_126 := bat.append(X_118,0);
    X_135 := bat.append(X_126,0);
    X_144 := bat.append(X_135,2);
    X_10 := sql.mvc();
    C_11:bat[:oid] := sql.tid(X_10,"sys","customer");
    X_14:bat[:str] := sql.bind(X_10,"sys","customer","c_phone",0);
    (C_17,r1_29) := sql.bind(X_10,"sys","customer","c_phone",2);
    X_19:bat[:str] := sql.bind(X_10,"sys","customer","c_phone",1);
    X_20 := sql.delta(X_14,C_17,r1_29,X_19);
    X_21 := algebra.projection(C_11,X_20);
    X_22:bat[:str] := batstr.substring(X_21,1,2);
    C_23 := algebra.subselect(X_22,"13","13",true,false,false);
    C_26 := algebra.subselect(X_22,"31","31",true,false,false);
    X_27 := bat.mergecand(C_23,C_26);
    C_28 := algebra.subselect(X_22,"23","23",true,false,false);
    X_29 := bat.mergecand(X_27,C_28);
    C_30 := algebra.subselect(X_22,"29","29",true,false,false);
    X_31 := bat.mergecand(X_29,C_30);
    C_32 := algebra.subselect(X_22,"30","30",true,false,false);
    X_33 := bat.mergecand(X_31,C_32);
    C_34 := algebra.subselect(X_22,"18","18",true,false,false);
    X_35 := bat.mergecand(X_33,C_34);
    C_36 := algebra.subselect(X_22,"17","17",true,false,false);
    X_37 := bat.mergecand(X_35,C_36);
    X_38:bat[:int] := sql.bind(X_10,"sys","customer","c_custkey",0);
    (C_40,r1_66) := sql.bind(X_10,"sys","customer","c_custkey",2);
    X_42:bat[:int] := sql.bind(X_10,"sys","customer","c_custkey",1);
    X_43 := sql.delta(X_38,C_40,r1_66,X_42);
    X_44:bat[:int] := algebra.projectionpath(X_37,C_11,X_43);
    X_45 := bat.mirror(X_44);
    X_46:bat[:lng] := sql.bind(X_10,"sys","customer","c_acctbal",0);
    (C_48,r1_75) := sql.bind(X_10,"sys","customer","c_acctbal",2);
    X_50:bat[:lng] := sql.bind(X_10,"sys","customer","c_acctbal",1);
    X_51 := sql.delta(X_46,C_48,r1_75,X_50);
    X_52 := algebra.projection(C_11,X_51);
    X_53 := algebra.projection(X_37,X_52);
    X_54:bat[:dbl] := batcalc.dbl(2,X_53);
    C_56 := algebra.thetasubselect(X_52,0:lng,">");
    C_58 := algebra.subselect(X_22,C_56,"13","13",true,false,false);
    C_59 := algebra.subselect(X_22,C_56,"31","31",true,false,false);
    X_60 := bat.mergecand(C_58,C_59);
    C_61 := algebra.subselect(X_22,C_56,"23","23",true,false,false);
    X_62 := bat.mergecand(X_60,C_61);
    C_63 := algebra.subselect(X_22,C_56,"29","29",true,false,false);
    X_64 := bat.mergecand(X_62,C_63);
    C_65 := algebra.subselect(X_22,C_56,"30","30",true,false,false);
    X_66 := bat.mergecand(X_64,C_65);
    C_67 := algebra.subselect(X_22,C_56,"18","18",true,false,false);
    X_68 := bat.mergecand(X_66,C_67);
    C_69 := algebra.subselect(X_22,C_56,"17","17",true,false,false);
    X_70 := bat.mergecand(X_68,C_69);
    X_71 := algebra.projection(X_70,X_52);
    X_72:bat[:dbl] := batcalc.dbl(2,X_71);
    X_73:dbl := aggr.avg(X_72);
    X_74 := sql.single(X_73);
    (X_75,r1_140) := algebra.subthetajoin(X_54,X_74,nil:BAT,nil:BAT,1,true,nil:lng);
    C_79 := algebra.subinter(X_45,X_75,nil:BAT,nil:BAT,false,nil:lng);
    X_80 := algebra.projection(C_79,X_44);
    X_81 := bat.mirror(X_80);
    C_82:bat[:oid] := sql.tid(X_10,"sys","orders");
    X_84:bat[:int] := sql.bind(X_10,"sys","orders","o_custkey",0);
    (C_86,r1_155) := sql.bind(X_10,"sys","orders","o_custkey",2);
    X_88:bat[:int] := sql.bind(X_10,"sys","orders","o_custkey",1);
    X_89 := sql.delta(X_84,C_86,r1_155,X_88);
    X_90 := algebra.projection(C_82,X_89);
    (X_91,r1_160) := algebra.subjoin(X_80,X_90,nil:BAT,nil:BAT,false,nil:lng);
    X_93 := algebra.subdiff(X_81,X_91,nil:BAT,nil:BAT,false,nil:lng);
    X_94:bat[:str] := algebra.projectionpath(X_93,C_79,X_37,X_21);
    X_95:bat[:str] := batstr.substring(X_94,1,2);
    (X_96,r1_171,r2_171) := group.subgroupdone(X_95);
    X_99 := algebra.projection(r1_171,X_95);
    X_105:bat[:wrd] := aggr.subcount(X_96,X_96,r1_171,false);
    X_107:bat[:lng] := algebra.projectionpath(X_93,C_79,X_53);
    X_108:bat[:hge] := aggr.subsum(X_107,X_96,r1_171,true,true);
    X_100 := bat.setKey(X_99,true);
    (X_101,r1_176,r2_176) := algebra.subsort(X_100,false,false);
    X_104 := algebra.projection(r1_176,X_100);
    X_106 := algebra.projection(r1_176,X_105);
    X_109 := algebra.projection(r1_176,X_108);
    sql.resultSet(X_136,X_138,X_140,X_142,X_144,X_104,X_106,X_109);
end user.s4_1;
#inline               actions= 0 time=7 usec 
#candidates           actions= 1 time=68 usec 
#remap                actions= 5 time=111 usec 
#costModel            actions= 1 time=56 usec 
#coercions            actions= 0 time=5 usec 
#evaluate             actions=22 time=116 usec 
#emptybind            actions= 0 time=6 usec 
#pushselect           actions= 0 time=5 usec 
#aliases              actions=28 time=66 usec 
#mergetable           actions= 0 time=75 usec 
#deadcode             actions=12 time=57 usec 
#aliases              actions= 0 time=15 usec 
#constants            actions=47 time=79 usec 
#commonTerms          actions= 6 time=59 usec 
#projectionpath       actions= 4 time=52 usec 
#reorder              actions= 1 time=89 usec 
#deadcode             actions=10 time=50 usec 
#reduce               actions=126 time=96 usec 
#matpack              actions= 0 time=7 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=4 usec 
#generator            actions= 0 time=3 usec 
#profiler             actions= 1 time=41 usec 
#garbageCollector     actions= 1 time=53 usec 
#total                actions= 1 time=1199 usec 

# 22:53:31 >  
# 22:53:31 >  "Done."
# 22:53:31 >  

