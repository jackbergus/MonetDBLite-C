stdout of test '22-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:31 >  
# 22:53:31 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:31 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:31 >  
# 22:53:31 >  "/usr/bin/python2" "22-explain.SQL.py" "22-explain"
# 22:53:31 >  

#set optimizer = 'sequential_pipe';
#explain select
#	cntrycode,
#	count(*) as numcust,
#	sum(c_acctbal) as totacctbal
#from
#	(
#		select
#			substring(c_phone from 1 for 2) as cntrycode,
#			c_acctbal
#		from
#			customer
#		where
#			substring(c_phone from 1 for 2) in
#				('13', '31', '23', '29', '30', '18', '17')
#			and c_acctbal > (
#				select
#					avg(c_acctbal)
#				from
#					customer
#				where
#					c_acctbal > 0.00
#					and substring(c_phone from 1 for 2) in
#						('13', '31', '23', '29', '30', '18', '17')
#			)
#			and not exists (
#				select
#					*
% .explain # table_name
% mal # name
% clob # type
% 889 # length
function user.s2_1{autoCommit=true}(A0:int,A1:int,A2:int,A3:int,A4:str,A5:str,A6:str,A7:str,A8:str,A9:str,A10:str,A11:bte,A12:int,A13:int,A14:str,A15:str,A16:str,A17:str,A18:str,A19:str,A20:str):void;
    X_176:void := querylog.define("explain select\n\tcntrycode,\n\tcount(*) as numcust,\n\tsum(c_acctbal) as totacctbal\nfrom\n\t(\n\t\tselect\n\t\t\tsubstring(c_phone from 1 for 2) as cntrycode,\n\t\t\tc_acctbal\n\t\tfrom\n\t\t\tcustomer\n\t\twhere\n\t\t\tsubstring(c_phone from 1 for 2) in\n\t\t\t\t(\\'13\\', \\'31\\', \\'23\\', \\'29\\', \\'30\\', \\'18\\', \\'17\\')\n\t\t\tand c_acctbal > (\n\t\t\t\tselect\n\t\t\t\t\tavg(c_acctbal)\n\t\t\t\tfrom\n\t\t\t\t\tcustomer\n\t\t\t\twhere\n\t\t\t\t\tc_acctbal > 0.00\n\t\t\t\t\tand substring(c_phone from 1 for 2) in\n\t\t\t\t\t\t(\\'13\\', \\'31\\', \\'23\\', \\'29\\', \\'30\\', \\'18\\', \\'17\\')\n\t\t\t)\n\t\t\tand not exists (\n\t\t\t\tselect\n\t\t\t\t\t*\n\t\t\t\tfrom\n\t\t\t\t\torders\n\t\t\t\twhere\n\t\t\t\t\to_custkey = c_custkey\n\t\t\t)\n\t) as custsale\ngroup by\n\tcntrycode\norder by\n\tcntrycode;","sequential_pipe",101);
    X_139 := bat.new(nil:oid,nil:str);
    X_147 := bat.append(X_139,"sys.custsale");
    X_157 := bat.append(X_147,"sys.L2");
    X_166 := bat.append(X_157,"sys.L3");
    X_142 := bat.new(nil:oid,nil:str);
    X_149 := bat.append(X_142,"cntrycode");
    X_159 := bat.append(X_149,"numcust");
    X_168 := bat.append(X_159,"totacctbal");
    X_143 := bat.new(nil:oid,nil:str);
    X_151 := bat.append(X_143,"char");
    X_161 := bat.append(X_151,"wrd");
    X_170 := bat.append(X_161,"decimal");
    X_144 := bat.new(nil:oid,nil:int);
    X_153 := bat.append(X_144,15);
    X_163 := bat.append(X_153,64);
    X_172 := bat.append(X_163,39);
    X_146 := bat.new(nil:oid,nil:int);
    X_155 := bat.append(X_146,0);
    X_165 := bat.append(X_155,0);
    X_174 := bat.append(X_165,2);
    X_23 := sql.mvc();
    X_24:bat[:oid,:oid]  := sql.tid(X_23,"sys","customer");
    X_27:bat[:oid,:str]  := sql.bind(X_23,"sys","customer","c_phone",0);
    (X_30,r1_30) := sql.bind(X_23,"sys","customer","c_phone",2);
    X_33:bat[:oid,:str]  := sql.bind(X_23,"sys","customer","c_phone",1);
    X_35 := sql.delta(X_27,X_30,r1_30,X_33);
    X_36 := algebra.leftfetchjoin(X_24,X_35);
    X_37:bat[:oid,:str]  := batstr.substring(X_36,A2,A3);
    X_38 := algebra.subselect(X_37,A4,A4,true,true,false);
    X_40 := algebra.subselect(X_37,A5,A5,true,true,false);
    X_41 := bat.mergecand(X_38,X_40);
    X_42 := algebra.subselect(X_37,A6,A6,true,true,false);
    X_43 := bat.mergecand(X_41,X_42);
    X_44 := algebra.subselect(X_37,A7,A7,true,true,false);
    X_45 := bat.mergecand(X_43,X_44);
    X_46 := algebra.subselect(X_37,A8,A8,true,true,false);
    X_49 := bat.mergecand(X_45,X_46);
    X_50 := algebra.subselect(X_37,A9,A9,true,true,false);
    X_51 := bat.mergecand(X_49,X_50);
    X_52 := algebra.subselect(X_37,A10,A10,true,true,false);
    X_53 := bat.mergecand(X_51,X_52);
    X_54:bat[:oid,:int] := sql.bind(X_23,"sys","customer","c_custkey",0);
    (X_56,r1_67) := sql.bind(X_23,"sys","customer","c_custkey",2);
    X_58:bat[:oid,:int] := sql.bind(X_23,"sys","customer","c_custkey",1);
    X_59 := sql.delta(X_54,X_56,r1_67,X_58);
    X_60:bat[:oid,:int] := algebra.leftfetchjoinPath(X_53,X_24,X_59);
    X_61 := bat.mirror(X_60);
    X_62:bat[:oid,:lng] := sql.bind(X_23,"sys","customer","c_acctbal",0);
    (X_64,r1_76) := sql.bind(X_23,"sys","customer","c_acctbal",2);
    X_66:bat[:oid,:lng] := sql.bind(X_23,"sys","customer","c_acctbal",1);
    X_67 := sql.delta(X_62,X_64,r1_76,X_66);
    X_68 := algebra.leftfetchjoin(X_24,X_67);
    X_69 := algebra.leftfetchjoin(X_53,X_68);
    X_70:bat[:oid,:dbl] := batcalc.dbl(2,X_69);
    X_72:bat[:oid,:str] := batstr.substring(X_36,A12,A13);
    X_73 := calc.lng(1,A11,15,2);
    X_76 := algebra.thetasubselect(X_68,X_73,">");
    X_78 := algebra.subselect(X_72,X_76,A14,A14,true,true,false);
    X_82 := algebra.subselect(X_72,X_76,A15,A15,true,true,false);
    X_83 := bat.mergecand(X_78,X_82);
    X_84 := algebra.subselect(X_72,X_76,A16,A16,true,true,false);
    X_85 := bat.mergecand(X_83,X_84);
    X_86 := algebra.subselect(X_72,X_76,A17,A17,true,true,false);
    X_87 := bat.mergecand(X_85,X_86);
    X_88 := algebra.subselect(X_72,X_76,A18,A18,true,true,false);
    X_89 := bat.mergecand(X_87,X_88);
    X_90 := algebra.subselect(X_72,X_76,A19,A19,true,true,false);
    X_91 := bat.mergecand(X_89,X_90);
    X_92 := algebra.subselect(X_72,X_76,A20,A20,true,true,false);
    X_93 := bat.mergecand(X_91,X_92);
    X_94 := algebra.leftfetchjoin(X_93,X_68);
    X_95:bat[:oid,:dbl] := batcalc.dbl(2,X_94);
    X_97:dbl := aggr.avg(X_95);
    X_98 := sql.single(X_97);
    (X_99,r1_141) := algebra.subthetajoin(X_70,X_98,nil:BAT,nil:BAT,1,true,nil:lng);
    X_105 := algebra.tinter(X_61,X_99);
    X_106 := algebra.leftfetchjoin(X_105,X_60);
    X_107 := bat.mirror(X_106);
    X_108:bat[:oid,:oid] := sql.tid(X_23,"sys","orders");
    X_110:bat[:oid,:int] := sql.bind(X_23,"sys","orders","o_custkey",0);
    (X_112,r1_154) := sql.bind(X_23,"sys","orders","o_custkey",2);
    X_114:bat[:oid,:int] := sql.bind(X_23,"sys","orders","o_custkey",1);
    X_115 := sql.delta(X_110,X_112,r1_154,X_114);
    X_116 := algebra.leftfetchjoin(X_108,X_115);
    (X_117,r1_159) := algebra.subjoin(X_106,X_116,nil:BAT,nil:BAT,false,nil:lng);
    X_120 := algebra.tdiff(X_107,X_117);
    X_121:bat[:oid,:str] := algebra.leftfetchjoinPath(X_120,X_105,X_53,X_36);
    X_122:bat[:oid,:str] := batstr.substring(X_121,A0,A1);
    (X_123,r1_171,r2_171) := group.subgroupdone(X_122);
    X_126 := algebra.leftfetchjoin(r1_171,X_122);
    X_131:bat[:oid,:wrd] := aggr.subcount(X_123,X_123,r1_171,false);
    X_133:bat[:oid,:lng] := algebra.leftfetchjoinPath(X_120,X_105,X_69);
    X_134:bat[:oid,:hge] := aggr.subsum(X_133,X_123,r1_171,true,true);
    (X_127,r1_175,r2_175) := algebra.subsort(X_126,false,false);
    X_130 := algebra.leftfetchjoin(r1_175,X_126);
    X_132 := algebra.leftfetchjoin(r1_175,X_131);
    X_137 := algebra.leftfetchjoin(r1_175,X_134);
    sql.resultSet(X_166,X_168,X_170,X_172,X_174,X_130,X_132,X_137);
end user.s2_1;

# 22:53:31 >  
# 22:53:31 >  "Done."
# 22:53:31 >  

