stdout of test '22-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:31 >  
# 22:53:31 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:31 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:31 >  
# 22:53:31 >  "/usr/bin/python2" "22-explain.SQL.py" "22-explain"
# 22:53:31 >  

#set optimizer = 'sequential_pipe';
#explain select
#	cntrycode,
#	count(*) as numcust,
#	sum(c_acctbal) as totacctbal
#from
#	(
#		select
#			substring(c_phone from 1 for 2) as cntrycode,
#			c_acctbal
#		from
#			customer
#		where
#			substring(c_phone from 1 for 2) in
#				('13', '31', '23', '29', '30', '18', '17')
#			and c_acctbal > (
#				select
#					avg(c_acctbal)
#				from
#					customer
#				where
#					c_acctbal > 0.00
#					and substring(c_phone from 1 for 2) in
#						('13', '31', '23', '29', '30', '18', '17')
#			)
#			and not exists (
#				select
#					*
% .explain # table_name
% mal # name
% clob # type
% 709 # length
function user.s4_1():void;
    X_129:void := querylog.define("explain select\n cntrycode,\n count(*) as numcust,\n sum(c_acctbal) as totacctbal\nfrom\n (\n select\n substring(c_phone from 1 for 2) as cntrycode,\n c_acctbal\n from\n customer\n where\n substring(c_phone from 1 for 2) in\n (\\'13\\', \\'31\\', \\'23\\', \\'29\\', \\'30\\', \\'18\\', \\'17\\')\n and c_acctbal > (\n select\n avg(c_acctbal)\n from\n customer\n where\n c_acctbal > 0.00\n and substring(c_phone from 1 for 2) in\n (\\'13\\', \\'31\\', \\'23\\', \\'29\\', \\'30\\', \\'18\\', \\'17\\')\n )\n and not exists (\n select\n *\n from\n orders\n where\n o_custkey = c_custkey\n )\n ) as custsale\ngroup by\n cntrycode\norder by\n cntrycode;","sequential_pipe",88);
    X_95 := bat.new(nil:oid,nil:str);
    X_103 := bat.append(X_95,"sys.custsale");
    X_111 := bat.append(X_103,"sys.L2");
    X_120 := bat.append(X_111,"sys.L3");
    X_98 := bat.new(nil:oid,nil:str);
    X_105 := bat.append(X_98,"cntrycode");
    X_113 := bat.append(X_105,"numcust");
    X_122 := bat.append(X_113,"totacctbal");
    X_99 := bat.new(nil:oid,nil:str);
    X_107 := bat.append(X_99,"char");
    X_115 := bat.append(X_107,"wrd");
    X_124 := bat.append(X_115,"decimal");
    X_100 := bat.new(nil:oid,nil:int);
    X_109 := bat.append(X_100,15);
    X_117 := bat.append(X_109,64);
    X_126 := bat.append(X_117,39);
    X_102 := bat.new(nil:oid,nil:int);
    X_110 := bat.append(X_102,0);
    X_119 := bat.append(X_110,0);
    X_128 := bat.append(X_119,2);
    X_10 := sql.mvc();
    C_11:bat[:oid] := sql.tid(X_10,"sys","customer");
    X_14:bat[:str] := sql.bind(X_10,"sys","customer","c_phone",0);
    X_17 := algebra.projection(C_11,X_14);
    X_18:bat[:str] := batstr.substring(X_17,1,2);
    C_19 := algebra.subselect(X_18,"13","13",true,false,false);
    C_22 := algebra.subselect(X_18,"31","31",true,false,false);
    X_23 := bat.mergecand(C_19,C_22);
    C_24 := algebra.subselect(X_18,"23","23",true,false,false);
    X_25 := bat.mergecand(X_23,C_24);
    C_26 := algebra.subselect(X_18,"29","29",true,false,false);
    X_27 := bat.mergecand(X_25,C_26);
    C_28 := algebra.subselect(X_18,"30","30",true,false,false);
    X_29 := bat.mergecand(X_27,C_28);
    C_30 := algebra.subselect(X_18,"18","18",true,false,false);
    X_31 := bat.mergecand(X_29,C_30);
    C_32 := algebra.subselect(X_18,"17","17",true,false,false);
    X_33 := bat.mergecand(X_31,C_32);
    X_34:bat[:int] := sql.bind(X_10,"sys","customer","c_custkey",0);
    X_36:bat[:int] := algebra.projectionpath(X_33,C_11,X_34);
    X_37 := bat.mirror(X_36);
    X_38:bat[:lng] := sql.bind(X_10,"sys","customer","c_acctbal",0);
    X_40 := algebra.projection(C_11,X_38);
    X_41 := algebra.projection(X_33,X_40);
    X_42:bat[:dbl] := batcalc.dbl(2,X_41);
    C_44 := algebra.thetasubselect(X_40,0:lng,">");
    C_46 := algebra.subselect(X_18,C_44,"13","13",true,false,false);
    C_47 := algebra.subselect(X_18,C_44,"31","31",true,false,false);
    X_48 := bat.mergecand(C_46,C_47);
    C_49 := algebra.subselect(X_18,C_44,"23","23",true,false,false);
    X_50 := bat.mergecand(X_48,C_49);
    C_51 := algebra.subselect(X_18,C_44,"29","29",true,false,false);
    X_52 := bat.mergecand(X_50,C_51);
    C_53 := algebra.subselect(X_18,C_44,"30","30",true,false,false);
    X_54 := bat.mergecand(X_52,C_53);
    C_55 := algebra.subselect(X_18,C_44,"18","18",true,false,false);
    X_56 := bat.mergecand(X_54,C_55);
    C_57 := algebra.subselect(X_18,C_44,"17","17",true,false,false);
    X_58 := bat.mergecand(X_56,C_57);
    X_59 := algebra.projection(X_58,X_40);
    X_60:bat[:dbl] := batcalc.dbl(2,X_59);
    X_61:dbl := aggr.avg(X_60);
    X_62 := sql.single(X_61);
    (X_63,r1_140) := algebra.subthetajoin(X_42,X_62,nil:BAT,nil:BAT,1,true,nil:lng);
    C_67 := algebra.subinter(X_37,X_63,nil:BAT,nil:BAT,false,nil:lng);
    X_68 := algebra.projection(C_67,X_36);
    X_69 := bat.mirror(X_68);
    C_70:bat[:oid] := sql.tid(X_10,"sys","orders");
    X_72:bat[:int] := sql.bind(X_10,"sys","orders","o_custkey",0);
    X_74 := algebra.projection(C_70,X_72);
    (X_75,r1_160) := algebra.subjoin(X_68,X_74,nil:BAT,nil:BAT,false,nil:lng);
    X_77 := algebra.subdiff(X_69,X_75,nil:BAT,nil:BAT,false,nil:lng);
    X_78:bat[:str] := algebra.projectionpath(X_77,C_67,X_33,X_17);
    X_79:bat[:str] := batstr.substring(X_78,1,2);
    (X_80,r1_171,r2_171) := group.subgroupdone(X_79);
    X_83 := algebra.projection(r1_171,X_79);
    X_89:bat[:wrd] := aggr.subcount(X_80,X_80,r1_171,false);
    X_91:bat[:lng] := algebra.projectionpath(X_77,C_67,X_41);
    X_92:bat[:hge] := aggr.subsum(X_91,X_80,r1_171,true,true);
    X_84 := bat.setKey(X_83,true);
    (X_85,r1_176,r2_176) := algebra.subsort(X_84,false,false);
    X_88 := algebra.projection(r1_176,X_84);
    X_90 := algebra.projection(r1_176,X_89);
    X_93 := algebra.projection(r1_176,X_92);
    sql.resultSet(X_120,X_122,X_124,X_126,X_128,X_88,X_90,X_93);
end user.s4_1;
#inline               actions= 0 time=7 usec 
#candidates           actions= 1 time=68 usec 
#remap                actions= 5 time=111 usec 
#costModel            actions= 1 time=56 usec 
#coercions            actions= 0 time=5 usec 
#evaluate             actions=22 time=116 usec 
#emptybind            actions= 0 time=6 usec 
#pushselect           actions= 0 time=5 usec 
#aliases              actions=28 time=66 usec 
#mergetable           actions= 0 time=75 usec 
#deadcode             actions=12 time=57 usec 
#aliases              actions= 0 time=15 usec 
#constants            actions=47 time=79 usec 
#commonTerms          actions= 6 time=59 usec 
#projectionpath       actions= 4 time=52 usec 
#reorder              actions= 1 time=89 usec 
#deadcode             actions=10 time=50 usec 
#reduce               actions=126 time=96 usec 
#matpack              actions= 0 time=7 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=4 usec 
#generator            actions= 0 time=3 usec 
#profiler             actions= 1 time=41 usec 
#garbageCollector     actions= 1 time=53 usec 
#total                actions= 1 time=1199 usec 

# 22:53:31 >  
# 22:53:31 >  "Done."
# 22:53:31 >  

