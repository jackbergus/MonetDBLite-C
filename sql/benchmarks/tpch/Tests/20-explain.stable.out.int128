stdout of test '20-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:30 >  
# 22:53:30 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:30 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:30 >  
# 22:53:30 >  "/usr/bin/python2" "20-explain.SQL.py" "20-explain"
# 22:53:30 >  

#set optimizer = 'sequential_pipe';
#explain select
#	s_name,
#	s_address
#from
#	supplier,
#	nation
#where
#	s_suppkey in (
#		select
#			ps_suppkey
#		from
#			partsupp
#		where
#			ps_partkey in (
#				select
#					p_partkey
#				from
#					part
#				where
#					p_name like 'forest%'
#			)
#			and ps_availqty > (
#				select
#					0.5 * sum(l_quantity)
#				from
#					lineitem
#				where
#					l_partkey = ps_partkey
#					and l_suppkey = ps_suppkey
#					and l_shipdate >= date '1994-01-01'
#					and l_shipdate < date '1994-01-01' + interval '1' year
#			)
#	)
#	and s_nationkey = n_nationkey
% .explain # table_name
% mal # name
% clob # type
% 789 # length
function user.s2_1{autoCommit=true}(A0:str,A1:bte,A2:date,A3:date,A4:int,A5:str):void;
    X_233:void := querylog.define("explain select\n\ts_name,\n\ts_address\nfrom\n\tsupplier,\n\tnation\nwhere\n\ts_suppkey in (\n\t\tselect\n\t\t\tps_suppkey\n\t\tfrom\n\t\t\tpartsupp\n\t\twhere\n\t\t\tps_partkey in (\n\t\t\t\tselect\n\t\t\t\t\tp_partkey\n\t\t\t\tfrom\n\t\t\t\t\tpart\n\t\t\t\twhere\n\t\t\t\t\tp_name like \\'forest%\\'\n\t\t\t)\n\t\t\tand ps_availqty > (\n\t\t\t\tselect\n\t\t\t\t\t0.5 * sum(l_quantity)\n\t\t\t\tfrom\n\t\t\t\t\tlineitem\n\t\t\t\twhere\n\t\t\t\t\tl_partkey = ps_partkey\n\t\t\t\t\tand l_suppkey = ps_suppkey\n\t\t\t\t\tand l_shipdate >= date \\'1994-01-01\\'\n\t\t\t\t\tand l_shipdate < date \\'1994-01-01\\' + interval \\'1\\' year\n\t\t\t)\n\t)\n\tand s_nationkey = n_nationkey\n\tand n_name = \\'CANADA\\'\norder by\n\ts_name;","sequential_pipe",142);
    X_208 := bat.new(nil:oid,nil:str);
    X_216 := bat.append(X_208,"sys.supplier");
    X_226 := bat.append(X_216,"sys.supplier");
    X_211 := bat.new(nil:oid,nil:str);
    X_218 := bat.append(X_211,"s_name");
    X_227 := bat.append(X_218,"s_address");
    X_212 := bat.new(nil:oid,nil:str);
    X_220 := bat.append(X_212,"char");
    X_228 := bat.append(X_220,"varchar");
    X_213 := bat.new(nil:oid,nil:int);
    X_222 := bat.append(X_213,25);
    X_230 := bat.append(X_222,40);
    X_215 := bat.new(nil:oid,nil:int);
    X_224 := bat.append(X_215,0);
    X_232 := bat.append(X_224,0);
    X_8 := sql.mvc();
    X_9:bat[:oid,:oid]  := sql.tid(X_8,"sys","supplier");
    X_12:bat[:oid,:int]  := sql.bind(X_8,"sys","supplier","s_suppkey",0);
    (X_15,r1_15) := sql.bind(X_8,"sys","supplier","s_suppkey",2);
    X_18:bat[:oid,:int]  := sql.bind(X_8,"sys","supplier","s_suppkey",1);
    X_20 := sql.delta(X_12,X_15,r1_15,X_18);
    X_21 := algebra.leftfetchjoin(X_9,X_20);
    X_22 := bat.mirror(X_21);
    X_23:bat[:oid,:oid]  := sql.tid(X_8,"sys","partsupp");
    X_25:bat[:oid,:int]  := sql.bind(X_8,"sys","partsupp","ps_partkey",0);
    (X_27,r1_27) := sql.bind(X_8,"sys","partsupp","ps_partkey",2);
    X_29:bat[:oid,:int]  := sql.bind(X_8,"sys","partsupp","ps_partkey",1);
    X_30 := sql.delta(X_25,X_27,r1_27,X_29);
    X_31 := algebra.leftfetchjoin(X_23,X_30);
    X_32 := bat.mirror(X_31);
    X_33:bat[:oid,:oid]  := sql.tid(X_8,"sys","part");
    X_35:bat[:oid,:str]  := sql.bind(X_8,"sys","part","p_name",0);
    (X_37,r1_37) := sql.bind(X_8,"sys","part","p_name",2);
    X_39:bat[:oid,:str]  := sql.bind(X_8,"sys","part","p_name",1);
    X_40 := sql.delta(X_35,X_37,r1_37,X_39);
    X_41 := algebra.leftfetchjoin(X_33,X_40);
    X_43 := algebra.likesubselect(X_41,nil:BAT,A0,"",false);
    X_46:bat[:oid,:int]  := sql.bind(X_8,"sys","part","p_partkey",0);
    (X_48,r1_50) := sql.bind(X_8,"sys","part","p_partkey",2);
    X_50:bat[:oid,:int] := sql.bind(X_8,"sys","part","p_partkey",1);
    X_51 := sql.delta(X_46,X_48,r1_50,X_50);
    X_52:bat[:oid,:int] := algebra.leftfetchjoinPath(X_43,X_33,X_51);
    (X_53,r1_56) := algebra.subjoin(X_31,X_52,nil:BAT,nil:BAT,false,nil:lng);
    X_56 := algebra.tinter(X_32,X_53);
    X_57:bat[:oid,:wrd] := sql.bind_idxbat(X_8,"sys","partsupp","partsupp_ps_partkey_ps_suppkey_pkey",0);
    (X_59,r1_62) := sql.bind_idxbat(X_8,"sys","partsupp","partsupp_ps_partkey_ps_suppkey_pkey",2);
    X_61:bat[:oid,:wrd] := sql.bind_idxbat(X_8,"sys","partsupp","partsupp_ps_partkey_ps_suppkey_pkey",1);
    X_62 := sql.delta(X_57,X_59,r1_62,X_61);
    X_63:bat[:oid,:wrd] := algebra.leftfetchjoinPath(X_56,X_23,X_62);
    X_64:bat[:oid,:oid] := sql.tid(X_8,"sys","lineitem");
    X_66:bat[:oid,:date] := sql.bind(X_8,"sys","lineitem","l_shipdate",0);
    (X_68,r1_72) := sql.bind(X_8,"sys","lineitem","l_shipdate",2);
    X_70:bat[:oid,:date] := sql.bind(X_8,"sys","lineitem","l_shipdate",1);
    X_71 := sql.delta(X_66,X_68,r1_72,X_70);
    X_72 := algebra.leftfetchjoin(X_64,X_71);
    X_73 := mtime.addmonths(A3,A4);
    X_74 := algebra.subselect(X_72,A2,X_73,true,false,false);
    X_78:bat[:oid,:int] := sql.bind(X_8,"sys","lineitem","l_partkey",0);
    (X_80,r1_87) := sql.bind(X_8,"sys","lineitem","l_partkey",2);
    X_82:bat[:oid,:int] := sql.bind(X_8,"sys","lineitem","l_partkey",1);
    X_83 := sql.delta(X_78,X_80,r1_87,X_82);
    X_84:bat[:oid,:int] := algebra.leftfetchjoinPath(X_74,X_64,X_83);
    X_85:bat[:oid,:wrd] := batmkey.hash(X_84);
    X_87:bat[:oid,:int] := sql.bind(X_8,"sys","lineitem","l_suppkey",0);
    (X_89,r1_100) := sql.bind(X_8,"sys","lineitem","l_suppkey",2);
    X_91:bat[:oid,:int] := sql.bind(X_8,"sys","lineitem","l_suppkey",1);
    X_92 := sql.delta(X_87,X_89,r1_100,X_91);
    X_93:bat[:oid,:int] := algebra.leftfetchjoinPath(X_74,X_64,X_92);
    X_94:bat[:oid,:wrd] := mkey.bulk_rotate_xor_hash(X_85,22,X_93);
    (X_95,r1_107) := algebra.subjoin(X_63,X_94,nil:BAT,nil:BAT,false,nil:lng);
    X_100 := algebra.leftfetchjoin(X_56,X_31);
    X_101 := algebra.leftfetchjoin(X_95,X_100);
    X_102 := algebra.leftfetchjoin(r1_107,X_84);
    X_103:bat[:oid,:bit] := batcalc.==(X_101,X_102);
    X_105 := algebra.subselect(X_103,true,true,true,false,false);
    X_108 := algebra.leftfetchjoin(X_105,X_95);
    X_109:bat[:oid,:int] := sql.bind(X_8,"sys","partsupp","ps_suppkey",0);
    (X_111,r1_126) := sql.bind(X_8,"sys","partsupp","ps_suppkey",2);
    X_113:bat[:oid,:int] := sql.bind(X_8,"sys","partsupp","ps_suppkey",1);
    X_114 := sql.delta(X_109,X_111,r1_126,X_113);
    X_115:bat[:oid,:int] := algebra.leftfetchjoinPath(X_56,X_23,X_114);
    X_116 := algebra.leftfetchjoin(X_108,X_115);
    X_117 := algebra.leftfetchjoin(X_105,r1_107);
    X_118 := algebra.leftfetchjoin(X_117,X_93);
    X_119:bat[:oid,:bit] := batcalc.==(X_116,X_118);
    X_120 := algebra.subselect(X_119,true,true,true,false,false);
    X_121 := algebra.leftfetchjoin(X_120,X_108);
    X_122:bat[:oid,:oid] := batcalc.identity(X_100);
    X_123 := algebra.leftfetchjoin(X_121,X_122);
    (X_124,r1_142,r2_142) := group.subgroupdone(X_123);
    X_127:bat[:oid,:int] := sql.bind(X_8,"sys","partsupp","ps_availqty",0);
    (X_129,r1_147) := sql.bind(X_8,"sys","partsupp","ps_availqty",2);
    X_131:bat[:oid,:int] := sql.bind(X_8,"sys","partsupp","ps_availqty",1);
    X_132 := sql.delta(X_127,X_129,r1_147,X_131);
    X_133:bat[:oid,:int] := algebra.leftfetchjoinPath(r1_142,X_121,X_56,X_23,X_132);
    X_137:bat[:oid,:lng] := sql.bind(X_8,"sys","lineitem","l_quantity",0);
    (X_139,r1_164) := sql.bind(X_8,"sys","lineitem","l_quantity",2);
    X_141:bat[:oid,:lng] := sql.bind(X_8,"sys","lineitem","l_quantity",1);
    X_142 := sql.delta(X_137,X_139,r1_164,X_141);
    X_143:bat[:oid,:lng] := algebra.leftfetchjoinPath(X_120,X_117,X_74,X_64,X_142);
    X_144:bat[:oid,:hge] := aggr.subsum(X_143,X_124,r1_142,true,true);
    X_134:bat[:oid,:hge] := batcalc.hge(X_133,39,3);
    X_147:bat[:oid,:hge] := batcalc.*(A1,X_144);
    X_148:bat[:oid,:bit] := batcalc.>(X_134,X_147);
    X_149 := algebra.subselect(X_148,true,true,true,true,false);
    X_151:bat[:oid,:int] := algebra.leftfetchjoinPath(X_149,r1_142,X_121,X_115);
    (X_152,r1_183) := algebra.subjoin(X_21,X_151,nil:BAT,nil:BAT,false,nil:lng);
    X_157 := algebra.tinter(X_22,X_152);
    X_158:bat[:oid,:int] := sql.bind(X_8,"sys","supplier","s_nationkey",0);
    (X_160,r1_191) := sql.bind(X_8,"sys","supplier","s_nationkey",2);
    X_162:bat[:oid,:int] := sql.bind(X_8,"sys","supplier","s_nationkey",1);
    X_163 := sql.delta(X_158,X_160,r1_191,X_162);
    X_164:bat[:oid,:int] := algebra.leftfetchjoinPath(X_157,X_9,X_163);
    X_165:bat[:oid,:oid] := sql.tid(X_8,"sys","nation");
    X_167:bat[:oid,:str] := sql.bind(X_8,"sys","nation","n_name",0);
    (X_169,r1_201) := sql.bind(X_8,"sys","nation","n_name",2);
    X_171:bat[:oid,:str] := sql.bind(X_8,"sys","nation","n_name",1);
    X_172 := sql.delta(X_167,X_169,r1_201,X_171);
    X_173 := algebra.leftfetchjoin(X_165,X_172);
    X_174 := algebra.subselect(X_173,A5,A5,true,false,false);
    X_176:bat[:oid,:int] := sql.bind(X_8,"sys","nation","n_nationkey",0);
    (X_178,r1_211) := sql.bind(X_8,"sys","nation","n_nationkey",2);
    X_180:bat[:oid,:int] := sql.bind(X_8,"sys","nation","n_nationkey",1);
    X_181 := sql.delta(X_176,X_178,r1_211,X_180);
    X_182:bat[:oid,:int] := algebra.leftfetchjoinPath(X_174,X_165,X_181);
    (X_183,r1_217) := algebra.subjoin(X_164,X_182,nil:BAT,nil:BAT,false,nil:lng);
    X_189:bat[:oid,:str] := sql.bind(X_8,"sys","supplier","s_name",0);
    (X_191,r1_225) := sql.bind(X_8,"sys","supplier","s_name",2);
    X_193:bat[:oid,:str] := sql.bind(X_8,"sys","supplier","s_name",1);
    X_194 := sql.delta(X_189,X_191,r1_225,X_193);
    X_195:bat[:oid,:str] := algebra.leftfetchjoinPath(X_183,X_157,X_9,X_194);
    (X_196,r1_232,r2_232) := algebra.subsort(X_195,false,false);
    X_199 := algebra.leftfetchjoin(r1_232,X_195);
    X_200:bat[:oid,:str] := sql.bind(X_8,"sys","supplier","s_address",0);
    (X_202,r1_238) := sql.bind(X_8,"sys","supplier","s_address",2);
    X_204:bat[:oid,:str] := sql.bind(X_8,"sys","supplier","s_address",1);
    X_205 := sql.delta(X_200,X_202,r1_238,X_204);
    X_206:bat[:oid,:str] := algebra.leftfetchjoinPath(r1_232,X_183,X_157,X_9,X_205);
    sql.resultSet(X_226,X_227,X_228,X_230,X_232,X_199,X_206);
end user.s2_1;

# 22:53:30 >  
# 22:53:30 >  "Done."
# 22:53:30 >  

