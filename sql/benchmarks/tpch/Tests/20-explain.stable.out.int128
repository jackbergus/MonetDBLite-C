stdout of test '20-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:30 >  
# 22:53:30 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:30 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:30 >  
# 22:53:30 >  "/usr/bin/python2" "20-explain.SQL.py" "20-explain"
# 22:53:30 >  

#set optimizer = 'sequential_pipe';
#explain select
#	s_name,
#	s_address
#from
#	supplier,
#	nation
#where
#	s_suppkey in (
#		select
#			ps_suppkey
#		from
#			partsupp
#		where
#			ps_partkey in (
#				select
#					p_partkey
#				from
#					part
#				where
#					p_name like 'forest%'
#			)
#			and ps_availqty > (
#				select
#					0.5 * sum(l_quantity)
#				from
#					lineitem
#				where
#					l_partkey = ps_partkey
#					and l_suppkey = ps_suppkey
#					and l_shipdate >= date '1994-01-01'
#					and l_shipdate < date '1994-01-01' + interval '1' year
#			)
#	)
#	and s_nationkey = n_nationkey
% .explain # table_name
% mal # name
% clob # type
% 786 # length
function user.s2_1{autoCommit=true}(A0:str,A1:bte,A2:date,A3:date,A4:int,A5:str):void;
    X_243:void  := querylog.define("explain select\n\ts_name,\n\ts_address\nfrom\n\tsupplier,\n\tnation\nwhere\n\ts_suppkey in (\n\t\tselect\n\t\t\tps_suppkey\n\t\tfrom\n\t\t\tpartsupp\n\t\twhere\n\t\t\tps_partkey in (\n\t\t\t\tselect\n\t\t\t\t\tp_partkey\n\t\t\t\tfrom\n\t\t\t\t\tpart\n\t\t\t\twhere\n\t\t\t\t\tp_name like \\'forest%\\'\n\t\t\t)\n\t\t\tand ps_availqty > (\n\t\t\t\tselect\n\t\t\t\t\t0.5 * sum(l_quantity)\n\t\t\t\tfrom\n\t\t\t\t\tlineitem\n\t\t\t\twhere\n\t\t\t\t\tl_partkey = ps_partkey\n\t\t\t\t\tand l_suppkey = ps_suppkey\n\t\t\t\t\tand l_shipdate >= date \\'1994-01-01\\'\n\t\t\t\t\tand l_shipdate < date \\'1994-01-01\\' + interval \\'1\\' year\n\t\t\t)\n\t)\n\tand s_nationkey = n_nationkey\n\tand n_name = \\'CANADA\\'\norder by\n\ts_name;","sequential_pipe");
    X_8 := sql.mvc();
    X_9:bat[:oid,:oid]  := sql.tid(X_8,"sys","supplier");
    X_12:bat[:oid,:int]  := sql.bind(X_8,"sys","supplier","s_suppkey",0);
    (X_15,r1_15) := sql.bind(X_8,"sys","supplier","s_suppkey",2);
    X_18:bat[:oid,:int]  := sql.bind(X_8,"sys","supplier","s_suppkey",1);
    X_20 := sql.delta(X_12,X_15,r1_15,X_18);
    X_21 := algebra.leftfetchjoin(X_9,X_20);
    X_22 := bat.mirror(X_21);
    X_23:bat[:oid,:oid]  := sql.tid(X_8,"sys","partsupp");
    X_25:bat[:oid,:int]  := sql.bind(X_8,"sys","partsupp","ps_partkey",0);
    (X_27,r1_27) := sql.bind(X_8,"sys","partsupp","ps_partkey",2);
    X_29:bat[:oid,:int]  := sql.bind(X_8,"sys","partsupp","ps_partkey",1);
    X_30 := sql.delta(X_25,X_27,r1_27,X_29);
    X_31 := algebra.leftfetchjoin(X_23,X_30);
    X_32 := bat.mirror(X_31);
    X_33:bat[:oid,:oid]  := sql.tid(X_8,"sys","part");
    X_35:bat[:oid,:str]  := sql.bind(X_8,"sys","part","p_name",0);
    (X_37,r1_37) := sql.bind(X_8,"sys","part","p_name",2);
    X_39:bat[:oid,:str]  := sql.bind(X_8,"sys","part","p_name",1);
    X_40 := sql.delta(X_35,X_37,r1_37,X_39);
    X_41 := algebra.leftfetchjoin(X_33,X_40);
    X_43 := algebra.likesubselect(X_41,nil:BAT,A0,"",false);
    X_46:bat[:oid,:int]  := sql.bind(X_8,"sys","part","p_partkey",0);
    (X_50,r1_52) := sql.bind(X_8,"sys","part","p_partkey",2);
    X_53:bat[:oid,:int]  := sql.bind(X_8,"sys","part","p_partkey",1);
    X_55 := sql.delta(X_46,X_50,r1_52,X_53);
    X_56:bat[:oid,:int]  := algebra.leftfetchjoinPath(X_43,X_33,X_55);
    (X_57,r1_60) := algebra.subjoin(X_31,X_56,nil:BAT,nil:BAT,false,nil:lng);
    X_60 := algebra.tinter(X_32,X_57);
    X_283 := algebra.leftfetchjoin(X_60,X_23);
    X_61:bat[:oid,:wrd]  := sql.bind_idxbat(X_8,"sys","partsupp","partsupp_ps_partkey_ps_suppkey_pkey",0);
    (X_64,r1_67) := sql.bind_idxbat(X_8,"sys","partsupp","partsupp_ps_partkey_ps_suppkey_pkey",2);
    X_66:bat[:oid,:wrd]  := sql.bind_idxbat(X_8,"sys","partsupp","partsupp_ps_partkey_ps_suppkey_pkey",1);
    X_67 := sql.delta(X_61,X_64,r1_67,X_66);
    X_68:bat[:oid,:wrd]  := algebra.leftfetchjoin(X_283,X_67);
    X_69:bat[:oid,:oid]  := sql.tid(X_8,"sys","lineitem");
    X_71:bat[:oid,:date]  := sql.bind(X_8,"sys","lineitem","l_shipdate",0);
    (X_73,r1_77) := sql.bind(X_8,"sys","lineitem","l_shipdate",2);
    X_75:bat[:oid,:date]  := sql.bind(X_8,"sys","lineitem","l_shipdate",1);
    X_76 := sql.delta(X_71,X_73,r1_77,X_75);
    X_77 := algebra.leftfetchjoin(X_69,X_76);
    X_78 := mtime.addmonths(A3,A4);
    X_79 := algebra.subselect(X_77,A2,X_78,true,false,false);
    X_284 := algebra.leftfetchjoin(X_79,X_69);
    X_82:bat[:oid,:int]  := sql.bind(X_8,"sys","lineitem","l_partkey",0);
    (X_86,r1_93) := sql.bind(X_8,"sys","lineitem","l_partkey",2);
    X_89:bat[:oid,:int]  := sql.bind(X_8,"sys","lineitem","l_partkey",1);
    X_91 := sql.delta(X_82,X_86,r1_93,X_89);
    X_92:bat[:oid,:int]  := algebra.leftfetchjoin(X_284,X_91);
    X_93:bat[:oid,:wrd]  := batmkey.hash(X_92);
    X_95:bat[:oid,:int]  := sql.bind(X_8,"sys","lineitem","l_suppkey",0);
    (X_98,r1_109) := sql.bind(X_8,"sys","lineitem","l_suppkey",2);
    X_100:bat[:oid,:int]  := sql.bind(X_8,"sys","lineitem","l_suppkey",1);
    X_101 := sql.delta(X_95,X_98,r1_109,X_100);
    X_102:bat[:oid,:int]  := algebra.leftfetchjoin(X_284,X_101);
    X_103:bat[:oid,:wrd]  := mkey.bulk_rotate_xor_hash(X_93,22,X_102);
    (X_104,r1_116) := algebra.subjoin(X_68,X_103,nil:BAT,nil:BAT,false,nil:lng);
    X_108 := algebra.leftfetchjoin(X_60,X_31);
    X_109 := algebra.leftfetchjoin(X_104,X_108);
    X_110 := algebra.leftfetchjoin(r1_116,X_92);
    X_111:bat[:oid,:bit]  := batcalc.==(X_109,X_110);
    X_113 := algebra.subselect(X_111,true,true,true,true,false);
    X_115 := algebra.leftfetchjoin(X_113,X_104);
    X_116:bat[:oid,:int]  := sql.bind(X_8,"sys","partsupp","ps_suppkey",0);
    (X_121,r1_136) := sql.bind(X_8,"sys","partsupp","ps_suppkey",2);
    X_124:bat[:oid,:int]  := sql.bind(X_8,"sys","partsupp","ps_suppkey",1);
    X_126 := sql.delta(X_116,X_121,r1_136,X_124);
    X_127:bat[:oid,:int]  := algebra.leftfetchjoin(X_283,X_126);
    X_128 := algebra.leftfetchjoin(X_115,X_127);
    X_129 := algebra.leftfetchjoin(X_113,r1_116);
    X_130 := algebra.leftfetchjoin(X_129,X_102);
    X_131:bat[:oid,:bit]  := batcalc.==(X_128,X_130);
    X_132 := algebra.subselect(X_131,true,true,true,true,false);
    X_133 := algebra.leftfetchjoin(X_132,X_115);
    X_134:bat[:oid,:oid]  := batcalc.identity(X_108);
    X_135 := algebra.leftfetchjoin(X_133,X_134);
    (X_136,r1_154,r2_154) := group.subgroupdone(X_135);
    X_285 := algebra.leftfetchjoin(r1_154,X_133);
    X_153:bat[:oid,:int]  := sql.bind(X_8,"sys","lineitem","l_quantity",0);
    (X_158,r1_183) := sql.bind(X_8,"sys","lineitem","l_quantity",2);
    X_160:bat[:oid,:int]  := sql.bind(X_8,"sys","lineitem","l_quantity",1);
    X_161 := sql.delta(X_153,X_158,r1_183,X_160);
    X_162:bat[:oid,:int]  := algebra.leftfetchjoinPath(X_132,X_129,X_284,X_161);
    X_163:bat[:oid,:hge]  := aggr.subsum(X_162,X_136,r1_154,true,true);
    X_139:bat[:oid,:int]  := sql.bind(X_8,"sys","partsupp","ps_availqty",0);
    (X_141,r1_159) := sql.bind(X_8,"sys","partsupp","ps_availqty",2);
    X_143:bat[:oid,:int]  := sql.bind(X_8,"sys","partsupp","ps_availqty",1);
    X_144 := sql.delta(X_139,X_141,r1_159,X_143);
    X_145:bat[:oid,:int]  := algebra.leftfetchjoinPath(X_285,X_60,X_23,X_144);
    X_146:bat[:oid,:hge]  := batcalc.hge(X_145,22,2);
    X_149 := calc.lng(1,A1,11,1);
    X_152 := calc.hge(1,X_149,22,1);
    X_165:bat[:oid,:lng]  := batcalc.lng(X_163,11,1);
    X_166:bat[:oid,:hge]  := batcalc.*(X_152,X_165);
    X_167:bat[:oid,:bit]  := batcalc.>(X_146,X_166);
    X_168 := algebra.subselect(X_167,true,true,true,true,false);
    X_170:bat[:oid,:int]  := algebra.leftfetchjoinPath(X_168,X_285,X_127);
    (X_171,r1_203) := algebra.subjoin(X_21,X_170,nil:BAT,nil:BAT,false,nil:lng);
    X_175 := algebra.tinter(X_22,X_171);
    X_286 := algebra.leftfetchjoin(X_175,X_9);
    X_176:bat[:oid,:int]  := sql.bind(X_8,"sys","supplier","s_nationkey",0);
    (X_179,r1_211) := sql.bind(X_8,"sys","supplier","s_nationkey",2);
    X_183:bat[:oid,:int]  := sql.bind(X_8,"sys","supplier","s_nationkey",1);
    X_185 := sql.delta(X_176,X_179,r1_211,X_183);
    X_186:bat[:oid,:int]  := algebra.leftfetchjoin(X_286,X_185);
    X_187:bat[:oid,:oid]  := sql.tid(X_8,"sys","nation");
    X_189:bat[:oid,:str]  := sql.bind(X_8,"sys","nation","n_name",0);
    (X_192,r1_225) := sql.bind(X_8,"sys","nation","n_name",2);
    X_194:bat[:oid,:str]  := sql.bind(X_8,"sys","nation","n_name",1);
    X_195 := sql.delta(X_189,X_192,r1_225,X_194);
    X_196 := algebra.leftfetchjoin(X_187,X_195);
    X_197 := algebra.subselect(X_196,A5,A5,true,true,false);
    X_200:bat[:oid,:int]  := sql.bind(X_8,"sys","nation","n_nationkey",0);
    (X_202,r1_236) := sql.bind(X_8,"sys","nation","n_nationkey",2);
    X_204:bat[:oid,:int]  := sql.bind(X_8,"sys","nation","n_nationkey",1);
    X_205 := sql.delta(X_200,X_202,r1_236,X_204);
    X_206:bat[:oid,:int]  := algebra.leftfetchjoinPath(X_197,X_187,X_205);
    (X_207,r1_242) := algebra.subjoin(X_186,X_206,nil:BAT,nil:BAT,false,nil:lng);
    X_287 := algebra.leftfetchjoin(X_207,X_175);
    X_211:bat[:oid,:str]  := sql.bind(X_8,"sys","supplier","s_name",0);
    (X_215,r1_250) := sql.bind(X_8,"sys","supplier","s_name",2);
    X_218:bat[:oid,:str]  := sql.bind(X_8,"sys","supplier","s_name",1);
    X_220 := sql.delta(X_211,X_215,r1_250,X_218);
    X_221:bat[:oid,:str]  := algebra.leftfetchjoinPath(X_287,X_9,X_220);
    (X_222,r1_259,r2_259) := algebra.subsort(X_221,false,false);
    X_225 := algebra.leftfetchjoin(r1_259,X_221);
    X_226:bat[:oid,:str]  := sql.bind(X_8,"sys","supplier","s_address",0);
    (X_229,r1_266) := sql.bind(X_8,"sys","supplier","s_address",2);
    X_231:bat[:oid,:str]  := sql.bind(X_8,"sys","supplier","s_address",1);
    X_232 := sql.delta(X_226,X_229,r1_266,X_231);
    X_233:bat[:oid,:str]  := algebra.leftfetchjoinPath(r1_259,X_287,X_9,X_232);
    X_234 := sql.resultSet(2,1,X_225);
    sql.rsColumn(X_234,"sys.supplier","s_name","varchar",25,0,X_225);
    sql.rsColumn(X_234,"sys.supplier","s_address","varchar",40,0,X_233);
    X_241 := io.stdout();
    sql.exportResult(X_241,X_234);
end s2_1;
# querylog.define("explain select\n\ts_name,\n\ts_address\nfrom\n\tsupplier,\n\tnation\nwhere\n\ts_suppkey in (\n\t\tselect\n\t\t\tps_suppkey\n\t\tfrom\n\t\t\tpartsupp\n\t\twhere\n\t\t\tps_partkey in (\n\t\t\t\tselect\n\t\t\t\t\tp_partkey\n\t\t\t\tfrom\n\t\t\t\t\tpart\n\t\t\t\twhere\n\t\t\t\t\tp_name like \\'forest%\\'\n\t\t\t)\n\t\t\tand ps_availqty > (\n\t\t\t\tselect\n\t\t\t\t\t0.5 * sum(l_quantity)\n\t\t\t\tfrom\n\t\t\t\t\tlineitem\n\t\t\t\twhere\n\t\t\t\t\tl_partkey = ps_partkey\n\t\t\t\t\tand l_suppkey = ps_suppkey\n\t\t\t\t\tand l_shipdate >= date \\'1994-01-01\\'\n\t\t\t\t\tand l_shipdate < date \\'1994-01-01\\' + interval \\'1\\' year\n\t\t\t)\n\t)\n\tand s_nationkey = n_nationkey\n\tand n_name = \\'CANADA\\'\norder by\n\ts_name;","sequential_pipe")

# 22:53:30 >  
# 22:53:30 >  "Done."
# 22:53:30 >  

