stdout of test '20-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:30 >  
# 22:53:30 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:30 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:30 >  
# 22:53:30 >  "/usr/bin/python2" "20-explain.SQL.py" "20-explain"
# 22:53:30 >  

#set optimizer = 'sequential_pipe';
#explain select
#	s_name,
#	s_address
#from
#	supplier,
#	nation
#where
#	s_suppkey in (
#		select
#			ps_suppkey
#		from
#			partsupp
#		where
#			ps_partkey in (
#				select
#					p_partkey
#				from
#					part
#				where
#					p_name like 'forest%'
#			)
#			and ps_availqty > (
#				select
#					0.5 * sum(l_quantity)
#				from
#					lineitem
#				where
#					l_partkey = ps_partkey
#					and l_suppkey = ps_suppkey
#					and l_shipdate >= date '1994-01-01'
#					and l_shipdate < date '1994-01-01' + interval '1' year
#			)
#	)
#	and s_nationkey = n_nationkey
% .explain # table_name
% mal # name
% clob # type
% 618 # length
function user.s4_1():void;
    X_209:void := querylog.define("explain select\n s_name,\n s_address\nfrom\n supplier,\n nation\nwhere\n s_suppkey in (\n select\n ps_suppkey\n from\n partsupp\n where\n ps_partkey in (\n select\n p_partkey\n from\n part\n where\n p_name like \\'forest%\\'\n )\n and ps_availqty > (\n select\n 0.5 * sum(l_quantity)\n from\n lineitem\n where\n l_partkey = ps_partkey\n and l_suppkey = ps_suppkey\n and l_shipdate >= date \\'1994-01-01\\'\n and l_shipdate < date \\'1994-01-01\\' + interval \\'1\\' year\n )\n )\n and s_nationkey = n_nationkey\n and n_name = \\'CANADA\\'\norder by\n s_name;","sequential_pipe",142);
    X_187 := bat.new(nil:str);
    X_194 := bat.append(X_187,"sys.supplier");
    X_202 := bat.append(X_194,"sys.supplier");
    X_189 := bat.new(nil:str);
    X_196 := bat.append(X_189,"s_name");
    X_203 := bat.append(X_196,"s_address");
    X_190 := bat.new(nil:str);
    X_197 := bat.append(X_190,"char");
    X_204 := bat.append(X_197,"varchar");
    X_191 := bat.new(nil:int);
    X_199 := bat.append(X_191,25);
    X_206 := bat.append(X_199,40);
    X_193 := bat.new(nil:int);
    X_201 := bat.append(X_193,0);
    X_208 := bat.append(X_201,0);
    X_6 := sql.mvc();
    C_7:bat[:oid] := sql.tid(X_6,"sys","supplier");
    X_10:bat[:int] := sql.bind(X_6,"sys","supplier","s_suppkey",0);
    (C_13,r1_14) := sql.bind(X_6,"sys","supplier","s_suppkey",2);
    X_16:bat[:int] := sql.bind(X_6,"sys","supplier","s_suppkey",1);
    X_18 := sql.delta(X_10,C_13,r1_14,X_16);
    X_19 := algebra.projection(C_7,X_18);
    X_20 := bat.mirror(X_19);
    C_21:bat[:oid] := sql.tid(X_6,"sys","partsupp");
    X_23:bat[:int] := sql.bind(X_6,"sys","partsupp","ps_partkey",0);
    (C_25,r1_26) := sql.bind(X_6,"sys","partsupp","ps_partkey",2);
    X_27:bat[:int] := sql.bind(X_6,"sys","partsupp","ps_partkey",1);
    X_28 := sql.delta(X_23,C_25,r1_26,X_27);
    X_29 := algebra.projection(C_21,X_28);
    X_30 := bat.mirror(X_29);
    C_31:bat[:oid] := sql.tid(X_6,"sys","part");
    X_33:bat[:str] := sql.bind(X_6,"sys","part","p_name",0);
    (C_35,r1_36) := sql.bind(X_6,"sys","part","p_name",2);
    X_37:bat[:str] := sql.bind(X_6,"sys","part","p_name",1);
    X_38 := sql.delta(X_33,C_35,r1_36,X_37);
    X_39 := algebra.projection(C_31,X_38);
    C_41 := algebra.likesubselect(X_39,nil:BAT,"forest%","",false);
    X_44:bat[:int] := sql.bind(X_6,"sys","part","p_partkey",0);
    (C_46,r1_49) := sql.bind(X_6,"sys","part","p_partkey",2);
    X_48:bat[:int] := sql.bind(X_6,"sys","part","p_partkey",1);
    X_49 := sql.delta(X_44,C_46,r1_49,X_48);
    X_50:bat[:int] := algebra.projectionpath(C_41,C_31,X_49);
    (X_51,r1_55) := algebra.subjoin(X_29,X_50,nil:BAT,nil:BAT,false,nil:lng);
    C_54 := algebra.subinter(X_30,X_51,nil:BAT,nil:BAT,false,nil:lng);
    X_55:bat[:lng] := sql.bind_idxbat(X_6,"sys","partsupp","partsupp_ps_partkey_ps_suppkey_pkey",0);
    (X_57,r1_61) := sql.bind_idxbat(X_6,"sys","partsupp","partsupp_ps_partkey_ps_suppkey_pkey",2);
    X_59:bat[:lng] := sql.bind_idxbat(X_6,"sys","partsupp","partsupp_ps_partkey_ps_suppkey_pkey",1);
    X_60 := sql.delta(X_55,X_57,r1_61,X_59);
    X_61:bat[:lng] := algebra.projectionpath(C_54,C_21,X_60);
    C_62:bat[:oid] := sql.tid(X_6,"sys","lineitem");
    X_64:bat[:date] := sql.bind(X_6,"sys","lineitem","l_shipdate",0);
    (C_66,r1_71) := sql.bind(X_6,"sys","lineitem","l_shipdate",2);
    X_68:bat[:date] := sql.bind(X_6,"sys","lineitem","l_shipdate",1);
    X_69 := sql.delta(X_64,C_66,r1_71,X_68);
    X_70 := algebra.projection(C_62,X_69);
    X_71:date := mtime.addmonths("1994-01-01",12);
    C_72 := algebra.subselect(X_70,"1994-01-01",X_71,true,false,false);
    X_74:bat[:int] := sql.bind(X_6,"sys","lineitem","l_partkey",0);
    (C_76,r1_86) := sql.bind(X_6,"sys","lineitem","l_partkey",2);
    X_78:bat[:int] := sql.bind(X_6,"sys","lineitem","l_partkey",1);
    X_79 := sql.delta(X_74,C_76,r1_86,X_78);
    X_80:bat[:int] := algebra.projectionpath(C_72,C_62,X_79);
    X_81:bat[:lng] := batmkey.hash(X_80);
    X_83:bat[:int] := sql.bind(X_6,"sys","lineitem","l_suppkey",0);
    (C_85,r1_99) := sql.bind(X_6,"sys","lineitem","l_suppkey",2);
    X_87:bat[:int] := sql.bind(X_6,"sys","lineitem","l_suppkey",1);
    X_88 := sql.delta(X_83,C_85,r1_99,X_87);
    X_89:bat[:int] := algebra.projectionpath(C_72,C_62,X_88);
    X_90:bat[:lng] := mkey.bulk_rotate_xor_hash(X_81,22,X_89);
    (X_91,r1_106) := algebra.subjoin(X_61,X_90,nil:BAT,nil:BAT,false,nil:lng);
    X_93 := algebra.projection(C_54,X_29);
    X_94 := algebra.projection(X_91,X_93);
    X_95 := algebra.projection(r1_106,X_80);
    X_96:bat[:bit] := batcalc.==(X_94,X_95);
    C_97 := algebra.subselect(X_96,true,true,true,false,false);
    X_98 := algebra.projection(C_97,X_91);
    X_99:bat[:int] := sql.bind(X_6,"sys","partsupp","ps_suppkey",0);
    (C_101,r1_125) := sql.bind(X_6,"sys","partsupp","ps_suppkey",2);
    X_103:bat[:int] := sql.bind(X_6,"sys","partsupp","ps_suppkey",1);
    X_104 := sql.delta(X_99,C_101,r1_125,X_103);
    X_105:bat[:int] := algebra.projectionpath(C_54,C_21,X_104);
    X_106 := algebra.projection(X_98,X_105);
    X_107 := algebra.projection(C_97,r1_106);
    X_108 := algebra.projection(X_107,X_89);
    X_109:bat[:bit] := batcalc.==(X_106,X_108);
    C_110 := algebra.subselect(X_109,true,true,true,false,false);
    X_111 := algebra.projection(C_110,X_98);
    X_112:bat[:oid] := batcalc.identity(X_93);
    X_113 := algebra.projection(X_111,X_112);
    (X_114,r1_141,r2_141) := group.subgroupdone(X_113);
    X_117:bat[:int] := sql.bind(X_6,"sys","partsupp","ps_availqty",0);
    (C_119,r1_146) := sql.bind(X_6,"sys","partsupp","ps_availqty",2);
    X_121:bat[:int] := sql.bind(X_6,"sys","partsupp","ps_availqty",1);
    X_122 := sql.delta(X_117,C_119,r1_146,X_121);
    X_123:bat[:int] := algebra.projectionpath(r1_141,X_111,C_54,C_21,X_122);
    X_127:bat[:lng] := sql.bind(X_6,"sys","lineitem","l_quantity",0);
    (C_129,r1_163) := sql.bind(X_6,"sys","lineitem","l_quantity",2);
    X_131:bat[:lng] := sql.bind(X_6,"sys","lineitem","l_quantity",1);
    X_132 := sql.delta(X_127,C_129,r1_163,X_131);
    X_133:bat[:lng] := algebra.projectionpath(C_110,X_107,C_72,C_62,X_132);
    X_134:bat[:hge] := aggr.subsum(X_133,X_114,r1_141,true,true);
    X_124:bat[:hge] := batcalc.hge(X_123,39,3);
    X_135:bat[:hge] := batcalc.*(5,X_134);
    X_136:bat[:bit] := batcalc.>(X_124,X_135);
    C_137 := algebra.subselect(X_136,true,true,true,true,false);
    X_138:bat[:int] := algebra.projectionpath(C_137,r1_141,X_111,X_105);
    (X_139,r1_182) := algebra.subjoin(X_19,X_138,nil:BAT,nil:BAT,false,nil:lng);
    C_141 := algebra.subinter(X_20,X_139,nil:BAT,nil:BAT,false,nil:lng);
    X_142:bat[:int] := sql.bind(X_6,"sys","supplier","s_nationkey",0);
    (C_144,r1_190) := sql.bind(X_6,"sys","supplier","s_nationkey",2);
    X_146:bat[:int] := sql.bind(X_6,"sys","supplier","s_nationkey",1);
    X_147 := sql.delta(X_142,C_144,r1_190,X_146);
    X_148:bat[:int] := algebra.projectionpath(C_141,C_7,X_147);
    C_149:bat[:oid] := sql.tid(X_6,"sys","nation");
    X_151:bat[:str] := sql.bind(X_6,"sys","nation","n_name",0);
    (C_153,r1_200) := sql.bind(X_6,"sys","nation","n_name",2);
    X_155:bat[:str] := sql.bind(X_6,"sys","nation","n_name",1);
    X_156 := sql.delta(X_151,C_153,r1_200,X_155);
    X_157 := algebra.projection(C_149,X_156);
    C_158 := algebra.subselect(X_157,"CANADA","CANADA",true,false,false);
    X_159:bat[:int] := sql.bind(X_6,"sys","nation","n_nationkey",0);
    (C_161,r1_210) := sql.bind(X_6,"sys","nation","n_nationkey",2);
    X_163:bat[:int] := sql.bind(X_6,"sys","nation","n_nationkey",1);
    X_164 := sql.delta(X_159,C_161,r1_210,X_163);
    X_165:bat[:int] := algebra.projectionpath(C_158,C_149,X_164);
    (X_166,r1_216) := algebra.subjoin(X_148,X_165,nil:BAT,nil:BAT,false,nil:lng);
    X_168:bat[:str] := sql.bind(X_6,"sys","supplier","s_name",0);
    (C_170,r1_224) := sql.bind(X_6,"sys","supplier","s_name",2);
    X_172:bat[:str] := sql.bind(X_6,"sys","supplier","s_name",1);
    X_173 := sql.delta(X_168,C_170,r1_224,X_172);
    X_174:bat[:str] := algebra.projectionpath(X_166,C_141,C_7,X_173);
    (X_175,r1_231,r2_231) := algebra.subsort(X_174,false,false);
    X_178 := algebra.projection(r1_231,X_174);
    X_179:bat[:str] := sql.bind(X_6,"sys","supplier","s_address",0);
    (C_181,r1_237) := sql.bind(X_6,"sys","supplier","s_address",2);
    X_183:bat[:str] := sql.bind(X_6,"sys","supplier","s_address",1);
    X_184 := sql.delta(X_179,C_181,r1_237,X_183);
    X_185:bat[:str] := algebra.projectionpath(r1_231,X_166,C_141,C_7,X_184);
    sql.resultSet(X_202,X_203,X_204,X_206,X_208,X_178,X_185);
end user.s4_1;
#inline               actions= 0 time=9 usec 
#candidates           actions= 1 time=115 usec 
#remap                actions= 7 time=674 usec 
#costModel            actions= 1 time=190 usec 
#coercions            actions= 4 time=203 usec 
#evaluate             actions= 6 time=238 usec 
#emptybind            actions= 0 time=10 usec 
#pushselect           actions= 0 time=5 usec 
#aliases              actions=21 time=197 usec 
#mergetable           actions= 0 time=205 usec 
#deadcode             actions=30 time=178 usec 
#aliases              actions= 0 time=23 usec 
#constants            actions=29 time=212 usec 
#commonTerms          actions= 0 time=31 usec 
#projectionpath       actions=19 time=216 usec 
#reorder              actions= 1 time=237 usec 
#deadcode             actions=20 time=168 usec 
#reduce               actions=145 time=238 usec 
#matpack              actions= 0 time=10 usec 
#querylog             actions= 0 time=2 usec 
#multiplex            actions= 0 time=6 usec 
#generator            actions= 0 time=4 usec 
#profiler             actions= 1 time=166 usec 
#garbageCollector     actions= 1 time=168 usec 
#total                actions= 1 time=3627 usec 

# 22:53:30 >  
# 22:53:30 >  "Done."
# 22:53:30 >  

