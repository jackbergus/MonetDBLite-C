stdout of test '13-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:28 >  
# 22:53:28 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:28 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:28 >  
# 22:53:28 >  "/usr/bin/python2" "13-explain.SQL.py" "13-explain"
# 22:53:28 >  

#set optimizer = 'sequential_pipe';
#explain select
#	c_count,
#	count(*) as custdist
#from
#	(
#		select
#			c_custkey,
#			count(o_orderkey)
#		from
#			customer left outer join orders on
#				c_custkey = o_custkey
#				and o_comment not like '%special%requests%'
#		group by
#			c_custkey
#	) as c_orders (c_custkey, c_count)
#group by
#	c_count
#order by
#	custdist desc,
#	c_count desc;
% .explain # table_name
% mal # name
% clob # type
% 400 # length
function user.s2_1(A0:str):void;
    X_101:void := querylog.define("explain select\n c_count,\n count(*) as custdist\nfrom\n (\n select\n c_custkey,\n count(o_orderkey)\n from\n customer left outer join orders on\n c_custkey = o_custkey\n and o_comment not like \\'%special%requests%\\'\n group by\n c_custkey\n ) as c_orders (c_custkey, c_count)\ngroup by\n c_count\norder by\n custdist desc,\n c_count desc;","sequential_pipe",65);
    X_79 := bat.new(nil:oid,nil:str);
    X_85 := bat.append(X_79,".c_orders");
    X_94 := bat.append(X_85,".L2");
    X_81 := bat.new(nil:oid,nil:str);
    X_87 := bat.append(X_81,"c_count");
    X_96 := bat.append(X_87,"custdist");
    X_82 := bat.new(nil:oid,nil:str);
    X_89 := bat.append(X_82,"wrd");
    X_98 := bat.append(X_89,"wrd");
    X_83 := bat.new(nil:oid,nil:int);
    X_91 := bat.append(X_83,32);
    X_99 := bat.append(X_91,32);
    X_84 := bat.new(nil:oid,nil:int);
    X_93 := bat.append(X_84,0);
    X_100 := bat.append(X_93,0);
    X_3:bat[:int] := bat.new(nil:oid,nil:int);
    X_2 := sql.mvc();
    C_6:bat[:oid] := sql.tid(X_2,"sys","customer");
    C_9:bat[:oid] := sql.tid(X_2,"sys","orders");
    X_11:bat[:oid] := sql.bind_idxbat(X_2,"sys","orders","orders_o_custkey_fkey",0);
    (X_14,r1_14) := sql.bind_idxbat(X_2,"sys","orders","orders_o_custkey_fkey",2);
    X_17:bat[:oid] := sql.bind_idxbat(X_2,"sys","orders","orders_o_custkey_fkey",1);
    X_19 := sql.delta(X_11,X_14,r1_14,X_17);
    X_20 := algebra.projection(C_9,X_19);
    (X_21,r1_21) := algebra.subjoin(C_6,X_20,nil:BAT,nil:BAT,false,nil:lng);
    X_26:bat[:str] := sql.bind(X_2,"sys","orders","o_comment",0);
    X_28:bat[:str] := algebra.projectionpath(r1_21,C_9,X_26);
    C_30 := algebra.likesubselect(X_28,nil:BAT,"%special%requests%","",true);
    X_32:bat[:int] := sql.bind(X_2,"sys","orders","o_orderkey",0);
    X_34:bat[:int] := algebra.projectionpath(C_30,r1_21,C_9,X_32);
    X_35 := bat.append(X_3,X_34,true);
    X_36:bat[:int] := sql.bind(X_2,"sys","customer","c_custkey",0);
    X_38 := algebra.projection(C_6,X_36);
    X_39 := bat.mirror(X_38);
    X_40 := algebra.projection(C_30,X_21);
    X_41 := algebra.subdiff(X_39,X_40,nil:BAT,nil:BAT,false,nil:lng);
    X_42 := algebra.project(X_41,nil:int);
    X_43 := bat.append(X_35,X_42,true);
    X_44:bat[:int] := bat.new(nil:oid,nil:int);
    X_45 := algebra.projection(X_40,X_38);
    X_46 := bat.append(X_44,X_45,true);
    X_47 := algebra.projection(X_41,X_38);
    X_48 := bat.append(X_46,X_47,true);
    (X_49,r1_75,r2_75) := group.subgroupdone(X_48);
    X_52:bat[:wrd] := aggr.subcount(X_43,X_49,r1_75,true);
    (X_53,r1_79,r2_79) := group.subgroupdone(X_52);
    X_56 := algebra.projection(r1_79,X_52);
    X_58:bat[:wrd] := aggr.subcount(X_53,X_53,r1_79,false);
    X_57 := bat.setKey(X_56,true);
    (X_59,r1_85,r2_85) := algebra.subsort(X_58,true,false);
    (X_62,r1_88,r2_88) := algebra.subsort(X_57,r1_85,r2_85,true,false);
    X_65 := algebra.projection(r1_88,X_57);
    X_66 := algebra.projection(r1_88,X_58);
    sql.resultSet(X_83,X_85,X_87,X_88,X_89,X_65,X_66);
end user.s2_1;

# 22:53:28 >  
# 22:53:28 >  "Done."
# 22:53:28 >  

