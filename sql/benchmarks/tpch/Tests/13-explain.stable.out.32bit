stdout of test '13-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:28 >  
# 22:53:28 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:28 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:28 >  
# 22:53:28 >  "/usr/bin/python2" "13-explain.SQL.py" "13-explain"
# 22:53:28 >  

#set optimizer = 'sequential_pipe';
#explain select
#	c_count,
#	count(*) as custdist
#from
#	(
#		select
#			c_custkey,
#			count(o_orderkey)
#		from
#			customer left outer join orders on
#				c_custkey = o_custkey
#				and o_comment not like '%special%requests%'
#		group by
#			c_custkey
#	) as c_orders (c_custkey, c_count)
#group by
#	c_count
#order by
#	custdist desc,
#	c_count desc;
% .explain # table_name
% mal # name
% clob # type
% 450 # length
function user.s2_1{autoCommit=true}(A0:str):void;
    X_103:void  := querylog.define("explain select\n\tc_count,\n\tcount(*) as custdist\nfrom\n\t(\n\t\tselect\n\t\t\tc_custkey,\n\t\t\tcount(o_orderkey)\n\t\tfrom\n\t\t\tcustomer left outer join orders on\n\t\t\t\tc_custkey = o_custkey\n\t\t\t\tand o_comment not like \\'%special%requests%\\'\n\t\tgroup by\n\t\t\tc_custkey\n\t) as c_orders (c_custkey, c_count)\ngroup by\n\tc_count\norder by\n\tcustdist desc,\n\tc_count desc;","sequential_pipe",55);
    X_4:bat[:oid,:int]  := bat.new(nil:oid,nil:int);
    X_3 := sql.mvc();
    X_7:bat[:oid,:oid]  := sql.tid(X_3,"sys","customer");
    X_10:bat[:oid,:oid]  := sql.tid(X_3,"sys","orders");
    X_12:bat[:oid,:oid]  := sql.bind_idxbat(X_3,"sys","orders","orders_o_custkey_fkey",0);
    (X_15,r1_15) := sql.bind_idxbat(X_3,"sys","orders","orders_o_custkey_fkey",2);
    X_18:bat[:oid,:oid]  := sql.bind_idxbat(X_3,"sys","orders","orders_o_custkey_fkey",1);
    X_20 := sql.delta(X_12,X_15,r1_15,X_18);
    X_21 := algebra.leftfetchjoin(X_10,X_20);
    (X_22,r1_22) := algebra.subjoin(X_7,X_21,nil:BAT,nil:BAT,false,nil:lng);
    X_122 := algebra.leftfetchjoin(r1_22,X_10);
    X_27:bat[:oid,:str]  := sql.bind(X_3,"sys","orders","o_comment",0);
    (X_29,r1_29) := sql.bind(X_3,"sys","orders","o_comment",2);
    X_31:bat[:oid,:str]  := sql.bind(X_3,"sys","orders","o_comment",1);
    X_32 := sql.delta(X_27,X_29,r1_29,X_31);
    X_33:bat[:oid,:str]  := algebra.leftfetchjoin(X_122,X_32);
    X_35 := algebra.likesubselect(X_33,nil:BAT,A0,"",true);
    X_37:bat[:oid,:int]  := sql.bind(X_3,"sys","orders","o_orderkey",0);
    (X_40,r1_44) := sql.bind(X_3,"sys","orders","o_orderkey",2);
    X_43:bat[:oid,:int]  := sql.bind(X_3,"sys","orders","o_orderkey",1);
    X_44 := sql.delta(X_37,X_40,r1_44,X_43);
    X_45:bat[:oid,:int]  := algebra.leftfetchjoinPath(X_35,X_122,X_44);
    X_46 := bat.append(X_4,X_45,true);
    X_47:bat[:oid,:int]  := sql.bind(X_3,"sys","customer","c_custkey",0);
    (X_51,r1_56) := sql.bind(X_3,"sys","customer","c_custkey",2);
    X_54:bat[:oid,:int]  := sql.bind(X_3,"sys","customer","c_custkey",1);
    X_56 := sql.delta(X_47,X_51,r1_56,X_54);
    X_57 := algebra.leftfetchjoin(X_7,X_56);
    X_58 := bat.mirror(X_57);
    X_59 := algebra.leftfetchjoin(X_35,X_22);
    X_60 := algebra.tdiff(X_58,X_59);
    X_62 := algebra.project(X_60,nil:int);
    X_63 := bat.append(X_46,X_62,true);
    X_64:bat[:oid,:int]  := bat.new(nil:oid,nil:int);
    X_66 := algebra.leftfetchjoin(X_59,X_57);
    X_67 := bat.append(X_64,X_66,true);
    X_69 := algebra.leftfetchjoin(X_60,X_57);
    X_70 := bat.append(X_67,X_69,true);
    (X_71,r1_77,r2_77) := group.subgroupdone(X_70);
    X_74:bat[:oid,:wrd]  := aggr.subcount(X_63,X_71,r1_77,true);
    (X_75,r1_81,r2_81) := group.subgroupdone(X_74);
    X_78 := algebra.leftfetchjoin(r1_81,X_74);
    X_79:bat[:oid,:wrd]  := aggr.subcount(X_75,X_75,r1_81,false);
    (X_81,r1_87,r2_87) := algebra.subsort(X_79,true,false);
    (X_84,r1_90,r2_90) := algebra.subsort(X_78,r1_87,r2_87,true,false);
    X_87 := algebra.leftfetchjoin(r1_90,X_78);
    X_88 := algebra.leftfetchjoin(r1_90,X_79);
    X_89 := sql.resultSet(2,1,X_87);
    sql.rsColumn(X_89,".c_orders","c_count","wrd",32,0,X_87);
    sql.rsColumn(X_89,".L2","custdist","wrd",32,0,X_88);
    X_101 := io.stdout();
    sql.exportResult(X_101,X_89);
end user.s2_1;

# 22:53:28 >  
# 22:53:28 >  "Done."
# 22:53:28 >  

