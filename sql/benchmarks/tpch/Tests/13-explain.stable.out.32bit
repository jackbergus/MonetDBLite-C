stdout of test '13-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:28 >  
# 22:53:28 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:28 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:28 >  
# 22:53:28 >  "/usr/bin/python2" "13-explain.SQL.py" "13-explain"
# 22:53:28 >  

#set optimizer = 'sequential_pipe';
#explain select
#	c_count,
#	count(*) as custdist
#from
#	(
#		select
#			c_custkey,
#			count(o_orderkey)
#		from
#			customer left outer join orders on
#				c_custkey = o_custkey
#				and o_comment not like '%special%requests%'
#		group by
#			c_custkey
#	) as c_orders (c_custkey, c_count)
#group by
#	c_count
#order by
#	custdist desc,
#	c_count desc;
% .explain # table_name
% mal # name
% clob # type
% 450 # length
function user.s2_1{autoCommit=true}(A0:str):void;
    X_114:void := querylog.define("explain select\n\tc_count,\n\tcount(*) as custdist\nfrom\n\t(\n\t\tselect\n\t\t\tc_custkey,\n\t\t\tcount(o_orderkey)\n\t\tfrom\n\t\t\tcustomer left outer join orders on\n\t\t\t\tc_custkey = o_custkey\n\t\t\t\tand o_comment not like \\'%special%requests%\\'\n\t\tgroup by\n\t\t\tc_custkey\n\t) as c_orders (c_custkey, c_count)\ngroup by\n\tc_count\norder by\n\tcustdist desc,\n\tc_count desc;","sequential_pipe",65);
    X_90 := bat.new(nil:oid,nil:str);
    X_97 := bat.append(X_90,".c_orders");
    X_107 := bat.append(X_97,".L2");
    X_92 := bat.new(nil:oid,nil:str);
    X_99 := bat.append(X_92,"c_count");
    X_109 := bat.append(X_99,"custdist");
    X_93 := bat.new(nil:oid,nil:str);
    X_101 := bat.append(X_93,"wrd");
    X_111 := bat.append(X_101,"wrd");
    X_94 := bat.new(nil:oid,nil:int);
    X_103 := bat.append(X_94,32);
    X_112 := bat.append(X_103,32);
    X_96 := bat.new(nil:oid,nil:int);
    X_105 := bat.append(X_96,0);
    X_113 := bat.append(X_105,0);
    X_4:bat[:oid,:int]  := bat.new(nil:oid,nil:int);
    X_3 := sql.mvc();
    X_7:bat[:oid,:oid]  := sql.tid(X_3,"sys","customer");
    X_10:bat[:oid,:oid]  := sql.tid(X_3,"sys","orders");
    X_12:bat[:oid,:oid]  := sql.bind_idxbat(X_3,"sys","orders","orders_o_custkey_fkey",0);
    (X_15,r1_15) := sql.bind_idxbat(X_3,"sys","orders","orders_o_custkey_fkey",2);
    X_18:bat[:oid,:oid]  := sql.bind_idxbat(X_3,"sys","orders","orders_o_custkey_fkey",1);
    X_20 := sql.delta(X_12,X_15,r1_15,X_18);
    X_21 := algebra.leftfetchjoin(X_10,X_20);
    (X_22,r1_22) := algebra.subjoin(X_7,X_21,nil:BAT,nil:BAT,false,nil:lng);
    X_28:bat[:oid,:str] := sql.bind(X_3,"sys","orders","o_comment",0);
    (X_30,r1_30) := sql.bind(X_3,"sys","orders","o_comment",2);
    X_32:bat[:oid,:str] := sql.bind(X_3,"sys","orders","o_comment",1);
    X_33 := sql.delta(X_28,X_30,r1_30,X_32);
    X_34:bat[:oid,:str] := algebra.leftfetchjoinPath(r1_22,X_10,X_33);
    X_36 := algebra.likesubselect(X_34,nil:BAT,A0,"",true);
    X_38:bat[:oid,:int] := sql.bind(X_3,"sys","orders","o_orderkey",0);
    (X_40,r1_44) := sql.bind(X_3,"sys","orders","o_orderkey",2);
    X_42:bat[:oid,:int] := sql.bind(X_3,"sys","orders","o_orderkey",1);
    X_43 := sql.delta(X_38,X_40,r1_44,X_42);
    X_44:bat[:oid,:int] := algebra.leftfetchjoinPath(X_36,r1_22,X_10,X_43);
    X_45 := bat.append(X_4,X_44,true);
    X_46:bat[:oid,:int] := sql.bind(X_3,"sys","customer","c_custkey",0);
    (X_48,r1_53) := sql.bind(X_3,"sys","customer","c_custkey",2);
    X_50:bat[:oid,:int] := sql.bind(X_3,"sys","customer","c_custkey",1);
    X_51 := sql.delta(X_46,X_48,r1_53,X_50);
    X_52 := algebra.leftfetchjoin(X_7,X_51);
    X_53 := bat.mirror(X_52);
    X_54 := algebra.leftfetchjoin(X_36,X_22);
    X_55 := algebra.tdiff(X_53,X_54);
    X_57 := algebra.project(X_55,nil:int);
    X_58 := bat.append(X_45,X_57,true);
    X_59:bat[:oid,:int] := bat.new(nil:oid,nil:int);
    X_61 := algebra.leftfetchjoin(X_54,X_52);
    X_62 := bat.append(X_59,X_61,true);
    X_63 := algebra.leftfetchjoin(X_55,X_52);
    X_64 := bat.append(X_62,X_63,true);
    (X_65,r1_71,r2_71) := group.subgroupdone(X_64);
    X_68:bat[:oid,:wrd] := aggr.subcount(X_58,X_65,r1_71,true);
    (X_70,r1_76,r2_76) := group.subgroupdone(X_68);
    X_73 := algebra.leftfetchjoin(r1_76,X_68);
    X_74:bat[:oid,:wrd] := aggr.subcount(X_70,X_70,r1_76,false);
    (X_76,r1_82,r2_82) := algebra.subsort(X_74,true,false);
    (X_79,r1_85,r2_85) := algebra.subsort(X_73,r1_82,r2_82,true,false);
    X_82 := algebra.leftfetchjoin(r1_85,X_73);
    X_83 := algebra.leftfetchjoin(r1_85,X_74);
    sql.resultSet(X_102,X_104,X_106,X_107,X_108,X_82,X_83);
end user.s2_1;

# 22:53:28 >  
# 22:53:28 >  "Done."
# 22:53:28 >  

