stdout of test '04-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:25 >  
# 22:53:25 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:25 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:26 >  
# 22:53:26 >  "/usr/bin/python2" "04-explain.SQL.py" "04-explain"
# 22:53:26 >  

#set optimizer = 'sequential_pipe';
#explain select
#	o_orderpriority,
#	count(*) as order_count
#from
#	orders
#where
#	o_orderdate >= date '1993-07-01'
#	and o_orderdate < date '1993-07-01' + interval '3' month
#	and exists (
#		select
#			*
#		from
#			lineitem
#		where
#			l_orderkey = o_orderkey
#			and l_commitdate < l_receiptdate
#	)
#group by
#	o_orderpriority
#order by
#	o_orderpriority;
% .explain # table_name
% mal # name
% clob # type
% 460 # length
function user.s2_1(A0:date,A1:date,A2:int):void;
    X_103:void := querylog.define("explain select\n\to_orderpriority,\n\tcount(*) as order_count\nfrom\n\torders\nwhere\n\to_orderdate >= date \\'1993-07-01\\'\n\tand o_orderdate < date \\'1993-07-01\\' + interval \\'3\\' month\n\tand exists (\n\t\tselect\n\t\t\t*\n\t\tfrom\n\t\t\tlineitem\n\t\twhere\n\t\t\tl_orderkey = o_orderkey\n\t\t\tand l_commitdate < l_receiptdate\n\t)\ngroup by\n\to_orderpriority\norder by\n\to_orderpriority;","sequential_pipe",65);
    X_78 := bat.new(nil:oid,nil:str);
    X_86 := bat.append(X_78,"sys.orders");
    X_94 := bat.append(X_86,"sys.L1");
    X_81 := bat.new(nil:oid,nil:str);
    X_88 := bat.append(X_81,"o_orderpriority");
    X_96 := bat.append(X_88,"order_count");
    X_82 := bat.new(nil:oid,nil:str);
    X_89 := bat.append(X_82,"char");
    X_98 := bat.append(X_89,"wrd");
    X_83 := bat.new(nil:oid,nil:int);
    X_91 := bat.append(X_83,15);
    X_100 := bat.append(X_91,32);
    X_85 := bat.new(nil:oid,nil:int);
    X_93 := bat.append(X_85,0);
    X_102 := bat.append(X_93,0);
    X_5 := sql.mvc();
    C_6:bat[:oid,:oid] := sql.tid(X_5,"sys","orders");
    X_9:bat[:oid,:date]  := sql.bind(X_5,"sys","orders","o_orderdate",0);
    (C_12,r1_12) := sql.bind(X_5,"sys","orders","o_orderdate",2);
    X_15:bat[:oid,:date]  := sql.bind(X_5,"sys","orders","o_orderdate",1);
    X_17 := sql.delta(X_9,C_12,r1_12,X_15);
    X_18 := algebra.leftfetchjoin(C_6,X_17);
    X_19:date := mtime.addmonths(A1,A2);
    C_20 := algebra.subselect(X_18,A0,X_19,true,false,false);
    X_22:bat[:oid,:int]  := sql.bind(X_5,"sys","orders","o_orderkey",0);
    (C_24,r1_28) := sql.bind(X_5,"sys","orders","o_orderkey",2);
    X_26:bat[:oid,:int]  := sql.bind(X_5,"sys","orders","o_orderkey",1);
    X_27 := sql.delta(X_22,C_24,r1_28,X_26);
    X_28:bat[:oid,:int] := algebra.leftfetchjoinPath(C_20,C_6,X_27);
    X_29 := bat.mirror(X_28);
    C_30:bat[:oid,:oid] := sql.tid(X_5,"sys","lineitem");
    X_32:bat[:oid,:date]  := sql.bind(X_5,"sys","lineitem","l_commitdate",0);
    (C_34,r1_39) := sql.bind(X_5,"sys","lineitem","l_commitdate",2);
    X_36:bat[:oid,:date] := sql.bind(X_5,"sys","lineitem","l_commitdate",1);
    X_37 := sql.delta(X_32,C_34,r1_39,X_36);
    X_38 := algebra.leftfetchjoin(C_30,X_37);
    X_39:bat[:oid,:date] := sql.bind(X_5,"sys","lineitem","l_receiptdate",0);
    (C_41,r1_46) := sql.bind(X_5,"sys","lineitem","l_receiptdate",2);
    X_43:bat[:oid,:date] := sql.bind(X_5,"sys","lineitem","l_receiptdate",1);
    X_44 := sql.delta(X_39,C_41,r1_46,X_43);
    X_45 := algebra.leftfetchjoin(C_30,X_44);
    X_46:bat[:oid,:bit] := batcalc.<(X_38,X_45);
    C_47 := algebra.subselect(X_46,true,true,true,true,false);
    X_48:bat[:oid,:int] := sql.bind(X_5,"sys","lineitem","l_orderkey",0);
    (C_50,r1_59) := sql.bind(X_5,"sys","lineitem","l_orderkey",2);
    X_52:bat[:oid,:int] := sql.bind(X_5,"sys","lineitem","l_orderkey",1);
    X_53 := sql.delta(X_48,C_50,r1_59,X_52);
    X_54:bat[:oid,:int] := algebra.leftfetchjoinPath(C_47,C_30,X_53);
    (X_55,r1_65) := algebra.subjoin(X_28,X_54,nil:BAT,nil:BAT,false,nil:lng);
    C_59 := algebra.subinter(X_29,X_55,nil:BAT,nil:BAT,false,nil:lng);
    X_60:bat[:oid,:str] := sql.bind(X_5,"sys","orders","o_orderpriority",0);
    (C_62,r1_74) := sql.bind(X_5,"sys","orders","o_orderpriority",2);
    X_64:bat[:oid,:str] := sql.bind(X_5,"sys","orders","o_orderpriority",1);
    X_65 := sql.delta(X_60,C_62,r1_74,X_64);
    X_66:bat[:oid,:str] := algebra.leftfetchjoinPath(C_59,C_20,C_6,X_65);
    (X_67,r1_81,r2_81) := group.subgroupdone(X_66);
    X_70 := algebra.leftfetchjoin(r1_81,X_66);
    X_75:bat[:oid,:wrd] := aggr.subcount(X_67,X_67,r1_81,false);
    (X_71,r1_85,r2_85) := algebra.subsort(X_70,false,false);
    X_74 := algebra.leftfetchjoin(r1_85,X_70);
    X_76 := algebra.leftfetchjoin(r1_85,X_75);
    sql.resultSet(X_94,X_96,X_98,X_100,X_102,X_74,X_76);
end user.s2_1;

# 22:53:26 >  
# 22:53:26 >  "Done."
# 22:53:26 >  

