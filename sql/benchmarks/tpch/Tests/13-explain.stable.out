stdout of test '13-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:28 >  
# 22:53:28 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:28 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:28 >  
# 22:53:28 >  "/usr/bin/python2" "13-explain.SQL.py" "13-explain"
# 22:53:28 >  

#set optimizer = 'sequential_pipe';
#explain select
#	c_count,
#	count(*) as custdist
#from
#	(
#		select
#			c_custkey,
#			count(o_orderkey)
#		from
#			customer left outer join orders on
#				c_custkey = o_custkey
#				and o_comment not like '%special%requests%'
#		group by
#			c_custkey
#	) as c_orders (c_custkey, c_count)
#group by
#	c_count
#order by
#	custdist desc,
#	c_count desc;
% .explain # table_name
% mal # name
% clob # type
% 400 # length
function user.s4_1():void;
    X_133:void := querylog.define("explain select\n c_count,\n count(*) as custdist\nfrom\n (\n select\n c_custkey,\n count(o_orderkey)\n from\n customer left outer join orders on\n c_custkey = o_custkey\n and o_comment not like \\'%special%requests%\\'\n group by\n c_custkey\n ) as c_orders (c_custkey, c_count)\ngroup by\n c_count\norder by\n custdist desc,\n c_count desc;","sequential_pipe",73);
    X_109 := bat.new(nil:str);
    X_116 := bat.append(X_109,".c_orders");
    X_126 := bat.append(X_116,".L10");
    X_111 := bat.new(nil:str);
    X_118 := bat.append(X_111,"c_count");
    X_128 := bat.append(X_118,"custdist");
    X_112 := bat.new(nil:str);
    X_120 := bat.append(X_112,"bigint");
    X_130 := bat.append(X_120,"bigint");
    X_113 := bat.new(nil:int);
    X_122 := bat.append(X_113,64);
    X_131 := bat.append(X_122,64);
    X_115 := bat.new(nil:int);
    X_124 := bat.append(X_115,0);
    X_132 := bat.append(X_124,0);
    X_70:bat[:int] := bat.new(nil:int);
    X_0 := sql.mvc();
    C_1:bat[:oid] := sql.tid(X_0,"sys","customer");
    C_14:bat[:oid] := sql.tid(X_0,"sys","orders");
    X_30:bat[:oid] := sql.bind_idxbat(X_0,"sys","orders","orders_o_custkey_fkey",0);
    (X_33,X_34:bat[:oid]) := sql.bind_idxbat(X_0,"sys","orders","orders_o_custkey_fkey",2);
    X_32:bat[:oid] := sql.bind_idxbat(X_0,"sys","orders","orders_o_custkey_fkey",1);
    X_35 := sql.delta(X_30,X_33,X_34,X_32);
    X_36 := algebra.projection(C_14,X_35);
    (X_37,X_38) := algebra.subjoin(C_1,X_36,nil:BAT,nil:BAT,false,nil:lng);
    X_23:bat[:str] := sql.bind(X_0,"sys","orders","o_comment",0);
    X_29 := algebra.projection(C_14,X_23);
    X_46 := algebra.projection(X_38,X_29);
    C_51 := algebra.likesubselect(X_46,nil:BAT,"%special%requests%","",true);
    X_54 := algebra.projection(C_51,X_38);
    X_16:bat[:int] := sql.bind(X_0,"sys","orders","o_orderkey",0);
    X_69:bat[:int] := algebra.projectionpath(X_54,C_14,X_16);
    X_71 := bat.append(X_70,X_69,true);
    X_4:bat[:int] := sql.bind(X_0,"sys","customer","c_custkey",0);
    X_13 := algebra.projection(C_1,X_4);
    X_55 := bat.mirror(X_13);
    X_53 := algebra.projection(C_51,X_37);
    X_56 := algebra.subdiff(X_55,X_53,nil:BAT,nil:BAT,false,nil:lng);
    X_73 := algebra.project(X_56,nil:int);
    X_74 := bat.append(X_71,X_73,true);
    X_58:bat[:int] := bat.new(nil:int);
    X_57 := algebra.projection(X_53,X_13);
    X_60 := bat.append(X_58,X_57,true);
    X_61 := algebra.projection(X_56,X_13);
    X_62 := bat.append(X_60,X_61,true);
    (X_89,X_90,X_91) := group.subgroupdone(X_62);
    X_93:bat[:lng] := aggr.subcount(X_74,X_89,X_90,true);
    (X_94,X_95,X_96) := group.subgroupdone(X_93);
    X_97 := algebra.projection(X_95,X_93);
    X_98:bat[:lng] := aggr.subcount(X_94,X_94,X_95,false);
    (X_100,X_101,X_102) := algebra.subsort(X_98,true,false);
    (X_103,X_104,X_105) := algebra.subsort(X_97,X_101,X_102,true,false);
    X_106 := algebra.projection(X_104,X_97);
    X_107 := algebra.projection(X_104,X_98);
    X_83:bat[:oid] := bat.new(nil:oid);
    X_82 := algebra.projection(X_54,X_36);
    X_84 := bat.append(X_83,X_82,true);
    X_87 := algebra.project(X_56,nil:oid);
    bat.append(X_84,X_87,true);
    X_76:bat[:str] := bat.new(nil:str);
    X_75 := algebra.projection(X_54,X_29);
    X_78 := bat.append(X_76,X_75,true);
    X_80 := algebra.project(X_56,nil:str);
    bat.append(X_78,X_80,true);
    X_64:bat[:oid] := bat.new(nil:oid);
    X_63 := algebra.projection(X_53,C_1);
    X_66 := bat.append(X_64,X_63,true);
    X_67 := algebra.projection(X_56,C_1);
    bat.append(X_66,X_67,true);
    sql.resultSet(X_126,X_128,X_130,X_131,X_132,X_106,X_107);
end user.s4_1;
#inline               actions= 0 time=4 usec 
#candidates           actions= 1 time=57 usec 
#remap                actions= 0 time=6 usec 
#costModel            actions= 1 time=48 usec 
#coercions            actions= 2 time=47 usec 
#evaluate             actions= 1 time=67 usec 
#emptybind            actions= 0 time=6 usec 
#pushselect           actions= 0 time=6 usec 
#aliases              actions= 4 time=50 usec 
#mergetable           actions= 0 time=60 usec 
#deadcode             actions= 6 time=47 usec 
#aliases              actions= 0 time=12 usec 
#constants            actions=11 time=50 usec 
#commonTerms          actions= 0 time=14 usec 
#projectionpath       actions= 2 time=45 usec 
#reorder              actions= 1 time=77 usec 
#deadcode             actions= 3 time=43 usec 
#reduce               actions=47 time=74 usec 
#matpack              actions= 0 time=6 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=5 usec 
#generator            actions= 0 time=3 usec 
#profiler             actions= 1 time=44 usec 
#garbageCollector     actions= 1 time=47 usec 
#total                actions= 1 time=909 usec 

# 22:53:28 >  
# 22:53:28 >  "Done."
# 22:53:28 >  

