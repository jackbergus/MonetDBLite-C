stdout of test '13-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:28 >  
# 22:53:28 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:28 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2014 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:28 >  
# 22:53:28 >  "/usr/bin/python2" "13-explain.SQL.py" "13-explain"
# 22:53:28 >  

#set optimizer = 'sequential_pipe';
#explain select
#	c_count,
#	count(*) as custdist
#from
#	(
#		select
#			c_custkey,
#			count(o_orderkey)
#		from
#			customer left outer join orders on
#				c_custkey = o_custkey
#				and o_comment not like '%special%requests%'
#		group by
#			c_custkey
#	) as c_orders (c_custkey, c_count)
#group by
#	c_count
#order by
#	custdist desc,
#	c_count desc;
% .explain # table_name
% mal # name
% clob # type
% 430 # length
function user.s2_1{autoCommit=true}(A0:str):void;
    X_4:bat[:oid,:int]  := bat.new(nil:oid,nil:int);
    X_3 := sql.mvc();
    X_7:bat[:oid,:oid]  := sql.tid(X_3,"sys","customer");
    X_10:bat[:oid,:oid]  := sql.tid(X_3,"sys","orders");
    X_12 := sql.bind_idxbat(X_3,"sys","orders","orders_o_custkey_fkey",0);
    (X_15,r1_15) := sql.bind_idxbat(X_3,"sys","orders","orders_o_custkey_fkey",2);
    X_18 := sql.bind_idxbat(X_3,"sys","orders","orders_o_custkey_fkey",1);
    X_20 := sql.delta(X_12,X_15,r1_15,X_18);
    X_21 := algebra.leftfetchjoin(X_10,X_20);
    (X_22,r1_22) := algebra.subjoin(X_7,X_21,nil:BAT,nil:BAT,true,nil:lng);
    X_121 := algebra.leftfetchjoin(r1_22,X_10);
    X_26 := sql.bind(X_3,"sys","orders","o_comment",0);
    (X_28,r1_28) := sql.bind(X_3,"sys","orders","o_comment",2);
    X_30 := sql.bind(X_3,"sys","orders","o_comment",1);
    X_31 := sql.delta(X_26,X_28,r1_28,X_30);
    X_32:bat[:oid,:str]  := algebra.leftfetchjoin(X_121,X_31);
    X_34 := algebra.likesubselect(X_32,nil:BAT,A0,"",true);
    X_36 := sql.bind(X_3,"sys","orders","o_orderkey",0);
    (X_39,r1_43) := sql.bind(X_3,"sys","orders","o_orderkey",2);
    X_42 := sql.bind(X_3,"sys","orders","o_orderkey",1);
    X_43 := sql.delta(X_36,X_39,r1_43,X_42);
    X_44:bat[:oid,:int]  := algebra.leftfetchjoinPath(X_34,X_121,X_43);
    X_45 := bat.append(X_4,X_44,true);
    X_46 := sql.bind(X_3,"sys","customer","c_custkey",0);
    (X_50,r1_55) := sql.bind(X_3,"sys","customer","c_custkey",2);
    X_53 := sql.bind(X_3,"sys","customer","c_custkey",1);
    X_55 := sql.delta(X_46,X_50,r1_55,X_53);
    X_56 := algebra.leftfetchjoin(X_7,X_55);
    X_57 := bat.mirror(X_56);
    X_58 := algebra.leftfetchjoin(X_34,X_22);
    X_59 := algebra.tdiff(X_57,X_58);
    X_61 := algebra.project(X_59,nil:int);
    X_62 := bat.append(X_45,X_61,true);
    X_63:bat[:oid,:int]  := bat.new(nil:oid,nil:int);
    X_65 := algebra.leftfetchjoin(X_58,X_56);
    X_66 := bat.append(X_63,X_65,true);
    X_68 := algebra.leftfetchjoin(X_59,X_56);
    X_69 := bat.append(X_66,X_68,true);
    (X_70,r1_76,r2_76) := group.subgroupdone(X_69);
    X_73:bat[:oid,:wrd]  := aggr.subcount(X_62,X_70,r1_76,true);
    (X_74,r1_80,r2_80) := group.subgroupdone(X_73);
    X_77 := algebra.leftfetchjoin(r1_80,X_73);
    X_78:bat[:oid,:wrd]  := aggr.subcount(X_74,X_74,r1_80,false);
    (X_80,r1_86,r2_86) := algebra.subsort(X_78,true,false);
    (X_83,r1_89,r2_89) := algebra.subsort(X_77,r1_86,r2_86,true,false);
    X_86 := algebra.leftfetchjoin(r1_89,X_77);
    X_87 := algebra.leftfetchjoin(r1_89,X_78);
    X_88 := sql.resultSet(2,1,X_86);
    sql.rsColumn(X_88,".c_orders","c_count","wrd",64,0,X_86);
    sql.rsColumn(X_88,".L2","custdist","wrd",64,0,X_87);
    X_100 := io.stdout();
    sql.exportResult(X_100,X_88);
end s2_1;
# querylog.define("explain select\n\tc_count,\n\tcount(*) as custdist\nfrom\n\t(\n\t\tselect\n\t\t\tc_custkey,\n\t\t\tcount(o_orderkey)\n\t\tfrom\n\t\t\tcustomer left outer join orders on\n\t\t\t\tc_custkey = o_custkey\n\t\t\t\tand o_comment not like \\'%special%requests%\\'\n\t\tgroup by\n\t\t\tc_custkey\n\t) as c_orders (c_custkey, c_count)\ngroup by\n\tc_count\norder by\n\tcustdist desc,\n\tc_count desc;","sequential_pipe")

# 22:53:28 >  
# 22:53:28 >  "Done."
# 22:53:28 >  

