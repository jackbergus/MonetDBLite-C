stdout of test '13-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:28 >  
# 22:53:28 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:28 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:28 >  
# 22:53:28 >  "/usr/bin/python2" "13-explain.SQL.py" "13-explain"
# 22:53:28 >  

#set optimizer = 'sequential_pipe';
#explain select
#	c_count,
#	count(*) as custdist
#from
#	(
#		select
#			c_custkey,
#			count(o_orderkey)
#		from
#			customer left outer join orders on
#				c_custkey = o_custkey
#				and o_comment not like '%special%requests%'
#		group by
#			c_custkey
#	) as c_orders (c_custkey, c_count)
#group by
#	c_count
#order by
#	custdist desc,
#	c_count desc;
% .explain # table_name
% mal # name
% clob # type
% 400 # length
function user.s4_1():void;
    X_101:void := querylog.define("explain select\n c_count,\n count(*) as custdist\nfrom\n (\n select\n c_custkey,\n count(o_orderkey)\n from\n customer left outer join orders on\n c_custkey = o_custkey\n and o_comment not like \\'%special%requests%\\'\n group by\n c_custkey\n ) as c_orders (c_custkey, c_count)\ngroup by\n c_count\norder by\n custdist desc,\n c_count desc;","sequential_pipe",66);
    X_79 := bat.new(nil:str);
    X_85 := bat.append(X_79,".c_orders");
    X_94 := bat.append(X_85,".L2");
    X_81 := bat.new(nil:str);
    X_87 := bat.append(X_81,"c_count");
    X_96 := bat.append(X_87,"custdist");
    X_82 := bat.new(nil:str);
    X_89 := bat.append(X_82,"bigint");
    X_98 := bat.append(X_89,"bigint");
    X_83 := bat.new(nil:int);
    X_91 := bat.append(X_83,64);
    X_99 := bat.append(X_91,64);
    X_84 := bat.new(nil:int);
    X_93 := bat.append(X_84,0);
    X_100 := bat.append(X_93,0);
    X_3:bat[:int] := bat.new(nil:int);
    X_2 := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_2,"sys","customer");
    C_8:bat[:oid] := sql.tid(X_2,"sys","orders");
    X_10:bat[:oid] := sql.bind_idxbat(X_2,"sys","orders","orders_o_custkey_fkey",0);
    (X_13,r1_13) := sql.bind_idxbat(X_2,"sys","orders","orders_o_custkey_fkey",2);
    X_16:bat[:oid] := sql.bind_idxbat(X_2,"sys","orders","orders_o_custkey_fkey",1);
    X_18 := sql.delta(X_10,X_13,r1_13,X_16);
    X_19 := algebra.projection(C_8,X_18);
    (X_20,r1_20) := algebra.subjoin(C_5,X_19,nil:BAT,nil:BAT,false,nil:lng);
    X_25:bat[:str] := sql.bind(X_2,"sys","orders","o_comment",0);
    (C_27,r1_28) := sql.bind(X_2,"sys","orders","o_comment",2);
    X_29:bat[:str] := sql.bind(X_2,"sys","orders","o_comment",1);
    X_30 := sql.delta(X_25,C_27,r1_28,X_29);
    X_31:bat[:str] := algebra.projectionpath(r1_20,C_8,X_30);
    C_33 := algebra.likesubselect(X_31,nil:BAT,"%special%requests%","",true);
    X_35:bat[:int] := sql.bind(X_2,"sys","orders","o_orderkey",0);
    (C_37,r1_42) := sql.bind(X_2,"sys","orders","o_orderkey",2);
    X_39:bat[:int] := sql.bind(X_2,"sys","orders","o_orderkey",1);
    X_40 := sql.delta(X_35,C_37,r1_42,X_39);
    X_41:bat[:int] := algebra.projectionpath(C_33,r1_20,C_8,X_40);
    X_42 := bat.append(X_3,X_41,true);
    X_43:bat[:int] := sql.bind(X_2,"sys","customer","c_custkey",0);
    (C_45,r1_51) := sql.bind(X_2,"sys","customer","c_custkey",2);
    X_47:bat[:int] := sql.bind(X_2,"sys","customer","c_custkey",1);
    X_48 := sql.delta(X_43,C_45,r1_51,X_47);
    X_49 := algebra.projection(C_5,X_48);
    X_50 := bat.mirror(X_49);
    X_51 := algebra.projection(C_33,X_20);
    X_52 := algebra.subdiff(X_50,X_51,nil:BAT,nil:BAT,false,nil:lng);
    X_53 := algebra.project(X_52,nil:int);
    X_54 := bat.append(X_42,X_53,true);
    X_55:bat[:int] := bat.new(nil:int);
    X_56 := algebra.projection(X_51,X_49);
    X_57 := bat.append(X_55,X_56,true);
    X_58 := algebra.projection(X_52,X_49);
    X_59 := bat.append(X_57,X_58,true);
    (X_60,r1_73,r2_73) := group.subgroupdone(X_59);
    X_63:bat[:lng] := aggr.subcount(X_54,X_60,r1_73,true);
    (X_64,r1_77,r2_77) := group.subgroupdone(X_63);
    X_67 := algebra.projection(r1_77,X_63);
    X_69:bat[:lng] := aggr.subcount(X_64,X_64,r1_77,false);
    X_68 := bat.setKey(X_67,true);
    (X_70,r1_83,r2_83) := algebra.subsort(X_69,true,false);
    (X_73,r1_86,r2_86) := algebra.subsort(X_68,r1_83,r2_83,true,false);
    X_76 := algebra.projection(r1_86,X_68);
    X_77 := algebra.projection(r1_86,X_69);
    sql.resultSet(X_94,X_96,X_98,X_99,X_100,X_76,X_77);
end user.s4_1;
#inline               actions= 0 time=4 usec 
#candidates           actions= 1 time=57 usec 
#remap                actions= 0 time=6 usec 
#costModel            actions= 1 time=48 usec 
#coercions            actions= 2 time=47 usec 
#evaluate             actions= 1 time=67 usec 
#emptybind            actions= 0 time=6 usec 
#pushselect           actions= 0 time=6 usec 
#aliases              actions= 4 time=50 usec 
#mergetable           actions= 0 time=60 usec 
#deadcode             actions= 6 time=47 usec 
#aliases              actions= 0 time=12 usec 
#constants            actions=11 time=50 usec 
#commonTerms          actions= 0 time=14 usec 
#projectionpath       actions= 2 time=45 usec 
#reorder              actions= 1 time=77 usec 
#deadcode             actions= 3 time=43 usec 
#reduce               actions=47 time=74 usec 
#matpack              actions= 0 time=6 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=5 usec 
#generator            actions= 0 time=3 usec 
#profiler             actions= 1 time=44 usec 
#garbageCollector     actions= 1 time=47 usec 
#total                actions= 1 time=909 usec 

# 22:53:28 >  
# 22:53:28 >  "Done."
# 22:53:28 >  

