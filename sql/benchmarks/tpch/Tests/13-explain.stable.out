stdout of test '13-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:28 >  
# 22:53:28 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:28 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:28 >  
# 22:53:28 >  "/usr/bin/python2" "13-explain.SQL.py" "13-explain"
# 22:53:28 >  

#set optimizer = 'sequential_pipe';
#explain select
#	c_count,
#	count(*) as custdist
#from
#	(
#		select
#			c_custkey,
#			count(o_orderkey)
#		from
#			customer left outer join orders on
#				c_custkey = o_custkey
#				and o_comment not like '%special%requests%'
#		group by
#			c_custkey
#	) as c_orders (c_custkey, c_count)
#group by
#	c_count
#order by
#	custdist desc,
#	c_count desc;
% .explain # table_name
% mal # name
% clob # type
% 400 # length
function user.s4_1():void;
    X_114:void := querylog.define("explain select\n c_count,\n count(*) as custdist\nfrom\n (\n select\n c_custkey,\n count(o_orderkey)\n from\n customer left outer join orders on\n c_custkey = o_custkey\n and o_comment not like \\'%special%requests%\\'\n group by\n c_custkey\n ) as c_orders (c_custkey, c_count)\ngroup by\n c_count\norder by\n custdist desc,\n c_count desc;","sequential_pipe",57);
    X_90 := bat.new(nil:str);
    X_97 := bat.append(X_90,".c_orders");
    X_107 := bat.append(X_97,".L10");
    X_92 := bat.new(nil:str);
    X_99 := bat.append(X_92,"c_count");
    X_109 := bat.append(X_99,"custdist");
    X_93 := bat.new(nil:str);
    X_101 := bat.append(X_93,"bigint");
    X_111 := bat.append(X_101,"bigint");
    X_94 := bat.new(nil:int);
    X_103 := bat.append(X_94,64);
    X_112 := bat.append(X_103,64);
    X_96 := bat.new(nil:int);
    X_105 := bat.append(X_96,0);
    X_113 := bat.append(X_105,0);
    X_1:bat[:int] := bat.new(nil:int);
    X_0 := sql.mvc();
    C_3:bat[:oid] := sql.tid(X_0,"sys","customer");
    C_6:bat[:oid] := sql.tid(X_0,"sys","orders");
    X_8:bat[:oid] := sql.bind_idxbat(X_0,"sys","orders","orders_o_custkey_fkey",0);
    (X_11,r1_13) := sql.bind_idxbat(X_0,"sys","orders","orders_o_custkey_fkey",2);
    X_14:bat[:oid] := sql.bind_idxbat(X_0,"sys","orders","orders_o_custkey_fkey",1);
    X_16 := sql.delta(X_8,X_11,r1_13,X_14);
    X_17 := algebra.projection(C_6,X_16);
    (X_18,r1_20) := algebra.subjoin(C_3,X_17,nil:BAT,nil:BAT,false,nil:lng);
    X_24:bat[:str] := sql.bind(X_0,"sys","orders","o_comment",0);
    X_31:bat[:str] := algebra.projectionpath(r1_20,C_6,X_24);
    C_35 := algebra.likesubselect(X_31,nil:BAT,"%special%requests%","",true);
    X_38:bat[:int] := sql.bind(X_0,"sys","orders","o_orderkey",0);
    X_45:bat[:int] := algebra.projectionpath(C_35,r1_20,C_6,X_38);
    X_46 := bat.append(X_1,X_45,true);
    X_47:bat[:int] := sql.bind(X_0,"sys","customer","c_custkey",0);
    X_53 := algebra.projection(C_3,X_47);
    X_54 := bat.mirror(X_53);
    X_55 := algebra.projection(C_35,X_18);
    X_56 := algebra.subdiff(X_54,X_55,nil:BAT,nil:BAT,false,nil:lng);
    X_63 := algebra.project(X_56,nil:int);
    X_64 := bat.append(X_46,X_63,true);
    X_65:bat[:int] := bat.new(nil:int);
    X_66 := algebra.projection(X_55,X_53);
    X_67 := bat.append(X_65,X_66,true);
    X_68 := algebra.projection(X_56,X_53);
    X_69 := bat.append(X_67,X_68,true);
    (X_71,r1_73,r2_73) := group.subgroupdone(X_69);
    X_74:bat[:lng] := aggr.subcount(X_64,X_71,r1_73,true);
    (X_75,r1_77,r2_77) := group.subgroupdone(X_74);
    X_78 := algebra.projection(r1_77,X_74);
    X_80:bat[:lng] := aggr.subcount(X_75,X_75,r1_77,false);
    X_79 := bat.setKey(X_78,true);
    (X_81,r1_83,r2_83) := algebra.subsort(X_80,true,false);
    (X_84,r1_86,r2_86) := algebra.subsort(X_79,r1_83,r2_83,true,false);
    X_87 := algebra.projection(r1_86,X_79);
    X_88 := algebra.projection(r1_86,X_80);
    sql.resultSet(X_107,X_109,X_111,X_112,X_113,X_87,X_88);
end user.s4_1;
#inline               actions= 0 time=4 usec 
#candidates           actions= 1 time=57 usec 
#remap                actions= 0 time=6 usec 
#costModel            actions= 1 time=48 usec 
#coercions            actions= 2 time=47 usec 
#evaluate             actions= 1 time=67 usec 
#emptybind            actions= 0 time=6 usec 
#pushselect           actions= 0 time=6 usec 
#aliases              actions= 4 time=50 usec 
#mergetable           actions= 0 time=60 usec 
#deadcode             actions= 6 time=47 usec 
#aliases              actions= 0 time=12 usec 
#constants            actions=11 time=50 usec 
#commonTerms          actions= 0 time=14 usec 
#projectionpath       actions= 2 time=45 usec 
#reorder              actions= 1 time=77 usec 
#deadcode             actions= 3 time=43 usec 
#reduce               actions=47 time=74 usec 
#matpack              actions= 0 time=6 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=5 usec 
#generator            actions= 0 time=3 usec 
#profiler             actions= 1 time=44 usec 
#garbageCollector     actions= 1 time=47 usec 
#total                actions= 1 time=909 usec 

# 22:53:28 >  
# 22:53:28 >  "Done."
# 22:53:28 >  

