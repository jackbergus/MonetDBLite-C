stdout of test '01-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:25 >  
# 22:53:25 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:25 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:25 >  
# 22:53:25 >  "/usr/bin/python2" "01-explain.SQL.py" "01-explain"
# 22:53:25 >  

#set optimizer = 'sequential_pipe';
#explain select
#	l_returnflag,
#	l_linestatus,
#	sum(l_quantity) as sum_qty,
#	sum(l_extendedprice) as sum_base_price,
#	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
#	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
#	avg(l_quantity) as avg_qty,
#	avg(l_extendedprice) as avg_price,
#	avg(l_discount) as avg_disc,
#	count(*) as count_order
#from
#	lineitem
#where
#	l_shipdate <= date '1998-12-01' - interval '90' day (3)
#group by
#	l_returnflag,
#	l_linestatus
#order by
#	l_returnflag,
#	l_linestatus;
% .explain # table_name
% mal # name
% clob # type
% 109 # length
function user.main():void;
    X_844 := bat.new(nil:str);
    X_851 := bat.append(X_844,"sys.lineitem");
    X_861 := bat.append(X_851,"sys.lineitem");
    X_867 := bat.append(X_861,"sys.L1");
    X_877 := bat.append(X_867,"sys.L2");
    X_884 := bat.append(X_877,"sys.L3");
    X_892 := bat.append(X_884,"sys.L4");
    X_900 := bat.append(X_892,"sys.L5");
    X_910 := bat.append(X_900,"sys.L6");
    X_917 := bat.append(X_910,"sys.L7");
    X_924 := bat.append(X_917,"sys.L10");
    X_846 := bat.new(nil:str);
    X_853 := bat.append(X_846,"l_returnflag");
    X_862 := bat.append(X_853,"l_linestatus");
    X_869 := bat.append(X_862,"sum_qty");
    X_879 := bat.append(X_869,"sum_base_price");
    X_886 := bat.append(X_879,"sum_disc_price");
    X_894 := bat.append(X_886,"sum_charge");
    X_902 := bat.append(X_894,"avg_qty");
    X_912 := bat.append(X_902,"avg_price");
    X_919 := bat.append(X_912,"avg_disc");
    X_926 := bat.append(X_919,"count_order");
    X_847 := bat.new(nil:str);
    X_855 := bat.append(X_847,"char");
    X_864 := bat.append(X_855,"char");
    X_871 := bat.append(X_864,"decimal");
    X_881 := bat.append(X_871,"decimal");
    X_888 := bat.append(X_881,"decimal");
    X_896 := bat.append(X_888,"decimal");
    X_904 := bat.append(X_896,"double");
    X_914 := bat.append(X_904,"double");
    X_921 := bat.append(X_914,"double");
    X_928 := bat.append(X_921,"bigint");
    X_848 := bat.new(nil:int);
    X_857 := bat.append(X_848,1);
    X_865 := bat.append(X_857,1);
    X_873 := bat.append(X_865,39);
    X_882 := bat.append(X_873,39);
    X_889 := bat.append(X_882,39);
    X_897 := bat.append(X_889,39);
    X_906 := bat.append(X_897,53);
    X_915 := bat.append(X_906,53);
    X_922 := bat.append(X_915,53);
    X_930 := bat.append(X_922,64);
    X_850 := bat.new(nil:int);
    X_859 := bat.append(X_850,0);
    X_866 := bat.append(X_859,0);
    X_875 := bat.append(X_866,2);
    X_883 := bat.append(X_875,2);
    X_890 := bat.append(X_883,4);
    X_898 := bat.append(X_890,6);
    X_908 := bat.append(X_898,0);
    X_916 := bat.append(X_908,0);
    X_923 := bat.append(X_916,0);
    X_932 := bat.append(X_923,0);
    X_710 := sql.mvc();
    X_714:bat[:date] := sql.bind(X_710,"sys","lineitem","l_shipdate",0);
    C_711:bat[:oid] := sql.tid(X_710,"sys","lineitem");
    X_726:date := mtime.date_sub_msec_interval("1998-12-01",7776000000);
    C_727 := algebra.thetasubselect(X_714,C_711,X_726,"<=");
    X_729:bat[:str] := sql.bind(X_710,"sys","lineitem","l_linestatus",0);
    X_736 := algebra.projection(C_727,X_729);
    X_737:bat[:str] := sql.bind(X_710,"sys","lineitem","l_returnflag",0);
    X_744 := algebra.projection(C_727,X_737);
    (X_745,r1_44,r2_44) := group.subgroup(X_744);
    (X_748,r1_47,r2_47) := group.subgroupdone(X_736,X_745);
    X_751 := algebra.projection(r1_47,X_736);
    X_752 := algebra.projection(r1_47,X_744);
    X_763:bat[:lng] := sql.bind(X_710,"sys","lineitem","l_quantity",0);
    X_770 := algebra.projection(C_727,X_763);
    X_771:bat[:hge] := aggr.subsum(X_770,X_748,r1_47,true,true);
    X_775:bat[:lng] := sql.bind(X_710,"sys","lineitem","l_extendedprice",0);
    X_782 := algebra.projection(C_727,X_775);
    X_783:bat[:hge] := aggr.subsum(X_782,X_748,r1_47,true,true);
    X_793:bat[:lng] := sql.bind(X_710,"sys","lineitem","l_discount",0);
    X_800 := algebra.projection(C_727,X_793);
    X_801:bat[:lng] := batcalc.-(100:lng,X_800);
    X_803:bat[:hge] := batcalc.*(X_782,X_801);
    X_805:bat[:hge] := aggr.subsum(X_803,X_748,r1_47,true,true);
    X_813:bat[:lng] := sql.bind(X_710,"sys","lineitem","l_tax",0);
    X_820 := algebra.projection(C_727,X_813);
    X_824:bat[:lng] := batcalc.+(X_820,100:lng);
    X_827:bat[:hge] := batcalc.*(X_803,X_824);
    X_828:bat[:hge] := aggr.subsum(X_827,X_748,r1_47,true,true);
    X_830:bat[:dbl] := batcalc.dbl(2,X_770);
    X_832:bat[:dbl] := aggr.subavg(X_830,X_748,r1_47,true,true);
    X_834:bat[:dbl] := batcalc.dbl(2,X_782);
    X_835:bat[:dbl] := aggr.subavg(X_834,X_748,r1_47,true,true);
    X_837:bat[:dbl] := batcalc.dbl(2,X_800);
    X_838:bat[:dbl] := aggr.subavg(X_837,X_748,r1_47,true,true);
    X_840:bat[:lng] := aggr.subcount(X_748,X_748,r1_47,false);
    (X_753,r1_52,r2_52) := algebra.subsort(X_752,false,false);
    (X_758,r1_57,r2_57) := algebra.subsort(X_751,r1_52,r2_52,false,false);
    X_761 := algebra.projection(r1_57,X_752);
    X_762 := algebra.projection(r1_57,X_751);
    X_774 := algebra.projection(r1_57,X_771);
    X_784 := algebra.projection(r1_57,X_783);
    X_808 := algebra.projection(r1_57,X_805);
    X_829 := algebra.projection(r1_57,X_828);
    X_833 := algebra.projection(r1_57,X_832);
    X_836 := algebra.projection(r1_57,X_835);
    X_839 := algebra.projection(r1_57,X_838);
    X_842 := algebra.projection(r1_57,X_840);
    sql.resultSet(X_924,X_926,X_928,X_930,X_932,X_761,X_762,X_774,X_784,X_808,X_829,X_833,X_836,X_839,X_842);
end user.main;
#inline               actions= 0 time=5 usec 
#remap                actions=10 time=172 usec 
#costmodel            actions= 1 time=5 usec 
#coercion             actions= 0 time=54 usec 
#evaluate             actions=13 time=44 usec 
#emptybind            actions=21 time=46 usec 
#aliases              actions=27 time=22 usec 
#deadcode             actions=22 time=16 usec 
#aliases              actions= 0 time=12 usec 
#constants            actions=23 time=45 usec 
#commonTerms          actions= 2 time=27 usec 
#projectionpath       actions= 0 time=11 usec 
#reorder              actions= 1 time=57 usec 
#deadcode             actions= 2 time=12 usec 
#reduce               actions=117 time=25 usec 
#multiplex            actions= 0 time=4 usec 
#profiler             actions= 1 time=5 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=40 usec 
#total                actions= 1 time=805 usec 

# 22:53:25 >  
# 22:53:25 >  "Done."
# 22:53:25 >  

