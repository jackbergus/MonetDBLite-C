stdout of test '01-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:25 >  
# 22:53:25 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:25 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:25 >  
# 22:53:25 >  "/usr/bin/python2" "01-explain.SQL.py" "01-explain"
# 22:53:25 >  

#set optimizer = 'sequential_pipe';
#explain select
#	l_returnflag,
#	l_linestatus,
#	sum(l_quantity) as sum_qty,
#	sum(l_extendedprice) as sum_base_price,
#	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
#	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
#	avg(l_quantity) as avg_qty,
#	avg(l_extendedprice) as avg_price,
#	avg(l_discount) as avg_disc,
#	count(*) as count_order
#from
#	lineitem
#where
#	l_shipdate <= date '1998-12-01' - interval '90' day (3)
#group by
#	l_returnflag,
#	l_linestatus
#order by
#	l_returnflag,
#	l_linestatus;
% .explain # table_name
% mal # name
% clob # type
% 109 # length
function user.main():void;
    X_140 := bat.new(nil:str);
    X_147 := bat.append(X_140,"sys.lineitem");
    X_157 := bat.append(X_147,"sys.lineitem");
    X_163 := bat.append(X_157,"sys.L5");
    X_173 := bat.append(X_163,"sys.L10");
    X_180 := bat.append(X_173,"sys.L13");
    X_188 := bat.append(X_180,"sys.L16");
    X_196 := bat.append(X_188,"sys.L21");
    X_206 := bat.append(X_196,"sys.L24");
    X_213 := bat.append(X_206,"sys.L27");
    X_220 := bat.append(X_213,"sys.L32");
    X_142 := bat.new(nil:str);
    X_149 := bat.append(X_142,"l_returnflag");
    X_158 := bat.append(X_149,"l_linestatus");
    X_165 := bat.append(X_158,"sum_qty");
    X_175 := bat.append(X_165,"sum_base_price");
    X_182 := bat.append(X_175,"sum_disc_price");
    X_190 := bat.append(X_182,"sum_charge");
    X_198 := bat.append(X_190,"avg_qty");
    X_208 := bat.append(X_198,"avg_price");
    X_215 := bat.append(X_208,"avg_disc");
    X_222 := bat.append(X_215,"count_order");
    X_143 := bat.new(nil:str);
    X_151 := bat.append(X_143,"char");
    X_160 := bat.append(X_151,"char");
    X_167 := bat.append(X_160,"decimal");
    X_177 := bat.append(X_167,"decimal");
    X_184 := bat.append(X_177,"decimal");
    X_192 := bat.append(X_184,"decimal");
    X_200 := bat.append(X_192,"double");
    X_210 := bat.append(X_200,"double");
    X_217 := bat.append(X_210,"double");
    X_224 := bat.append(X_217,"bigint");
    X_144 := bat.new(nil:int);
    X_153 := bat.append(X_144,1);
    X_161 := bat.append(X_153,1);
    X_169 := bat.append(X_161,39);
    X_178 := bat.append(X_169,39);
    X_185 := bat.append(X_178,39);
    X_193 := bat.append(X_185,39);
    X_202 := bat.append(X_193,53);
    X_211 := bat.append(X_202,53);
    X_218 := bat.append(X_211,53);
    X_226 := bat.append(X_218,64);
    X_146 := bat.new(nil:int);
    X_155 := bat.append(X_146,0);
    X_162 := bat.append(X_155,0);
    X_171 := bat.append(X_162,2);
    X_179 := bat.append(X_171,2);
    X_186 := bat.append(X_179,4);
    X_194 := bat.append(X_186,6);
    X_204 := bat.append(X_194,0);
    X_212 := bat.append(X_204,0);
    X_219 := bat.append(X_212,0);
    X_228 := bat.append(X_219,0);
    X_11 := sql.mvc();
    X_60:bat[:date] := sql.bind(X_11,"sys","lineitem","l_shipdate",0);
    C_12:bat[:oid] := sql.tid(X_11,"sys","lineitem");
    X_69:date := mtime.date_sub_msec_interval("1998-12-01",7776000000);
    C_70 := algebra.thetasubselect(X_60,C_12,X_69,"<=");
    X_53:bat[:str] := sql.bind(X_11,"sys","lineitem","l_linestatus",0);
    X_77 := algebra.projection(C_70,X_53);
    X_46:bat[:str] := sql.bind(X_11,"sys","lineitem","l_returnflag",0);
    X_76 := algebra.projection(C_70,X_46);
    (X_104,X_105,X_106) := group.subgroup(X_76);
    (X_107,X_108,X_109) := group.subgroupdone(X_77,X_104);
    X_110 := algebra.projection(X_108,X_76);
    X_111 := algebra.projection(X_108,X_77);
    X_15:bat[:lng] := sql.bind(X_11,"sys","lineitem","l_quantity",0);
    X_72 := algebra.projection(C_70,X_15);
    X_112:bat[:hge] := aggr.subsum(X_72,X_107,X_108,true,true);
    X_25:bat[:lng] := sql.bind(X_11,"sys","lineitem","l_extendedprice",0);
    X_73 := algebra.projection(C_70,X_25);
    X_115:bat[:hge] := aggr.subsum(X_73,X_107,X_108,true,true);
    X_32:bat[:lng] := sql.bind(X_11,"sys","lineitem","l_discount",0);
    X_74 := algebra.projection(C_70,X_32);
    X_87:bat[:lng] := batcalc.-(100:lng,X_74);
    X_89:bat[:hge] := batcalc.*(X_73,X_87);
    X_116:bat[:hge] := aggr.subsum(X_89,X_107,X_108,true,true);
    X_39:bat[:lng] := sql.bind(X_11,"sys","lineitem","l_tax",0);
    X_75 := algebra.projection(C_70,X_39);
    X_97:bat[:lng] := batcalc.+(X_75,100:lng);
    X_99:bat[:hge] := batcalc.*(X_89,X_97);
    X_117:bat[:hge] := aggr.subsum(X_99,X_107,X_108,true,true);
    X_100:bat[:dbl] := batcalc.dbl(2,X_72);
    X_118:bat[:dbl] := aggr.subavg(X_100,X_107,X_108,true,true);
    X_102:bat[:dbl] := batcalc.dbl(2,X_73);
    X_119:bat[:dbl] := aggr.subavg(X_102,X_107,X_108,true,true);
    X_103:bat[:dbl] := batcalc.dbl(2,X_74);
    X_120:bat[:dbl] := aggr.subavg(X_103,X_107,X_108,true,true);
    X_121:bat[:lng] := aggr.subcount(X_107,X_107,X_108,false);
    (X_123,X_124,X_125) := algebra.subsort(X_110,false,false);
    (X_126,X_127,X_128) := algebra.subsort(X_111,X_124,X_125,false,false);
    X_129 := algebra.projection(X_127,X_110);
    X_130 := algebra.projection(X_127,X_111);
    X_131 := algebra.projection(X_127,X_112);
    X_132 := algebra.projection(X_127,X_115);
    X_133 := algebra.projection(X_127,X_116);
    X_134 := algebra.projection(X_127,X_117);
    X_135 := algebra.projection(X_127,X_118);
    X_136 := algebra.projection(X_127,X_119);
    X_137 := algebra.projection(X_127,X_120);
    X_138 := algebra.projection(X_127,X_121);
    sql.resultSet(X_220,X_222,X_224,X_226,X_228,X_129,X_130,X_131,X_132,X_133,X_134,X_135,X_136,X_137,X_138);
end user.main;
#inline               actions= 0 time=5 usec 
#remap                actions=10 time=172 usec 
#costmodel            actions= 1 time=5 usec 
#coercion             actions= 0 time=54 usec 
#evaluate             actions=13 time=44 usec 
#emptybind            actions=21 time=46 usec 
#aliases              actions=27 time=22 usec 
#deadcode             actions=22 time=16 usec 
#aliases              actions= 0 time=12 usec 
#constants            actions=23 time=45 usec 
#commonTerms          actions= 2 time=27 usec 
#projectionpath       actions= 0 time=11 usec 
#reorder              actions= 1 time=57 usec 
#deadcode             actions= 2 time=12 usec 
#reduce               actions=117 time=25 usec 
#multiplex            actions= 0 time=4 usec 
#profiler             actions= 1 time=5 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=40 usec 
#total                actions= 1 time=805 usec 

# 22:53:25 >  
# 22:53:25 >  "Done."
# 22:53:25 >  

