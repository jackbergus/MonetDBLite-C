stdout of test '01-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:25 >  
# 22:53:25 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:25 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:25 >  
# 22:53:25 >  "/usr/bin/python2" "01-explain.SQL.py" "01-explain"
# 22:53:25 >  

#set optimizer = 'sequential_pipe';
#explain select
#	l_returnflag,
#	l_linestatus,
#	sum(l_quantity) as sum_qty,
#	sum(l_extendedprice) as sum_base_price,
#	sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
#	sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
#	avg(l_quantity) as avg_qty,
#	avg(l_extendedprice) as avg_price,
#	avg(l_discount) as avg_disc,
#	count(*) as count_order
#from
#	lineitem
#where
#	l_shipdate <= date '1998-12-01' - interval '90' day (3)
#group by
#	l_returnflag,
#	l_linestatus
#order by
#	l_returnflag,
#	l_linestatus;
% .explain # table_name
% mal # name
% clob # type
% 109 # length
function user.main():void;
    X_690 := bat.new(nil:str);
    X_697 := bat.append(X_690,"sys.lineitem");
    X_707 := bat.append(X_697,"sys.lineitem");
    X_713 := bat.append(X_707,"sys.L1");
    X_723 := bat.append(X_713,"sys.L2");
    X_730 := bat.append(X_723,"sys.L3");
    X_738 := bat.append(X_730,"sys.L4");
    X_746 := bat.append(X_738,"sys.L5");
    X_756 := bat.append(X_746,"sys.L6");
    X_763 := bat.append(X_756,"sys.L7");
    X_770 := bat.append(X_763,"sys.L10");
    X_692 := bat.new(nil:str);
    X_699 := bat.append(X_692,"l_returnflag");
    X_708 := bat.append(X_699,"l_linestatus");
    X_715 := bat.append(X_708,"sum_qty");
    X_725 := bat.append(X_715,"sum_base_price");
    X_732 := bat.append(X_725,"sum_disc_price");
    X_740 := bat.append(X_732,"sum_charge");
    X_748 := bat.append(X_740,"avg_qty");
    X_758 := bat.append(X_748,"avg_price");
    X_765 := bat.append(X_758,"avg_disc");
    X_772 := bat.append(X_765,"count_order");
    X_693 := bat.new(nil:str);
    X_701 := bat.append(X_693,"char");
    X_710 := bat.append(X_701,"char");
    X_717 := bat.append(X_710,"decimal");
    X_727 := bat.append(X_717,"decimal");
    X_734 := bat.append(X_727,"decimal");
    X_742 := bat.append(X_734,"decimal");
    X_750 := bat.append(X_742,"double");
    X_760 := bat.append(X_750,"double");
    X_767 := bat.append(X_760,"double");
    X_774 := bat.append(X_767,"bigint");
    X_694 := bat.new(nil:int);
    X_703 := bat.append(X_694,1);
    X_711 := bat.append(X_703,1);
    X_719 := bat.append(X_711,39);
    X_728 := bat.append(X_719,39);
    X_735 := bat.append(X_728,39);
    X_743 := bat.append(X_735,39);
    X_752 := bat.append(X_743,53);
    X_761 := bat.append(X_752,53);
    X_768 := bat.append(X_761,53);
    X_776 := bat.append(X_768,64);
    X_696 := bat.new(nil:int);
    X_705 := bat.append(X_696,0);
    X_712 := bat.append(X_705,0);
    X_721 := bat.append(X_712,2);
    X_729 := bat.append(X_721,2);
    X_736 := bat.append(X_729,4);
    X_744 := bat.append(X_736,6);
    X_754 := bat.append(X_744,0);
    X_762 := bat.append(X_754,0);
    X_769 := bat.append(X_762,0);
    X_778 := bat.append(X_769,0);
    X_556 := sql.mvc();
    X_560:bat[:date] := sql.bind(X_556,"sys","lineitem","l_shipdate",0);
    C_557:bat[:oid] := sql.tid(X_556,"sys","lineitem");
    X_572:date := mtime.date_sub_msec_interval("1998-12-01",7776000000);
    C_573 := algebra.thetasubselect(X_560,C_557,X_572,"<=");
    X_575:bat[:str] := sql.bind(X_556,"sys","lineitem","l_linestatus",0);
    X_582 := algebra.projection(C_573,X_575);
    X_583:bat[:str] := sql.bind(X_556,"sys","lineitem","l_returnflag",0);
    X_590 := algebra.projection(C_573,X_583);
    (X_591,r1_44,r2_44) := group.subgroup(X_590);
    (X_594,r1_47,r2_47) := group.subgroupdone(X_582,X_591);
    X_597 := algebra.projection(r1_47,X_582);
    X_598 := algebra.projection(r1_47,X_590);
    X_609:bat[:lng] := sql.bind(X_556,"sys","lineitem","l_quantity",0);
    X_616 := algebra.projection(C_573,X_609);
    X_617:bat[:hge] := aggr.subsum(X_616,X_594,r1_47,true,true);
    X_621:bat[:lng] := sql.bind(X_556,"sys","lineitem","l_extendedprice",0);
    X_628 := algebra.projection(C_573,X_621);
    X_629:bat[:hge] := aggr.subsum(X_628,X_594,r1_47,true,true);
    X_639:bat[:lng] := sql.bind(X_556,"sys","lineitem","l_discount",0);
    X_646 := algebra.projection(C_573,X_639);
    X_647:bat[:lng] := batcalc.-(100:lng,X_646);
    X_649:bat[:hge] := batcalc.*(X_628,X_647);
    X_651:bat[:hge] := aggr.subsum(X_649,X_594,r1_47,true,true);
    X_659:bat[:lng] := sql.bind(X_556,"sys","lineitem","l_tax",0);
    X_666 := algebra.projection(C_573,X_659);
    X_670:bat[:lng] := batcalc.+(X_666,100:lng);
    X_673:bat[:hge] := batcalc.*(X_649,X_670);
    X_674:bat[:hge] := aggr.subsum(X_673,X_594,r1_47,true,true);
    X_676:bat[:dbl] := batcalc.dbl(2,X_616);
    X_678:bat[:dbl] := aggr.subavg(X_676,X_594,r1_47,true,true);
    X_680:bat[:dbl] := batcalc.dbl(2,X_628);
    X_681:bat[:dbl] := aggr.subavg(X_680,X_594,r1_47,true,true);
    X_683:bat[:dbl] := batcalc.dbl(2,X_646);
    X_684:bat[:dbl] := aggr.subavg(X_683,X_594,r1_47,true,true);
    X_686:bat[:lng] := aggr.subcount(X_594,X_594,r1_47,false);
    (X_599,r1_52,r2_52) := algebra.subsort(X_598,false,false);
    (X_604,r1_57,r2_57) := algebra.subsort(X_597,r1_52,r2_52,false,false);
    X_607 := algebra.projection(r1_57,X_598);
    X_608 := algebra.projection(r1_57,X_597);
    X_620 := algebra.projection(r1_57,X_617);
    X_630 := algebra.projection(r1_57,X_629);
    X_654 := algebra.projection(r1_57,X_651);
    X_675 := algebra.projection(r1_57,X_674);
    X_679 := algebra.projection(r1_57,X_678);
    X_682 := algebra.projection(r1_57,X_681);
    X_685 := algebra.projection(r1_57,X_684);
    X_688 := algebra.projection(r1_57,X_686);
    sql.resultSet(X_770,X_772,X_774,X_776,X_778,X_607,X_608,X_620,X_630,X_654,X_675,X_679,X_682,X_685,X_688);
end user.main;
#inline               actions= 0 time=5 usec 
#remap                actions=10 time=172 usec 
#costmodel            actions= 1 time=5 usec 
#coercion             actions= 0 time=54 usec 
#evaluate             actions=13 time=44 usec 
#emptybind            actions=21 time=46 usec 
#aliases              actions=27 time=22 usec 
#deadcode             actions=22 time=16 usec 
#aliases              actions= 0 time=12 usec 
#constants            actions=23 time=45 usec 
#commonTerms          actions= 2 time=27 usec 
#projectionpath       actions= 0 time=11 usec 
#reorder              actions= 1 time=57 usec 
#deadcode             actions= 2 time=12 usec 
#reduce               actions=117 time=25 usec 
#multiplex            actions= 0 time=4 usec 
#profiler             actions= 1 time=5 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=40 usec 
#total                actions= 1 time=805 usec 

# 22:53:25 >  
# 22:53:25 >  "Done."
# 22:53:25 >  

