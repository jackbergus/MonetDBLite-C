stdout of test '16-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:29 >  
# 22:53:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:29 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:29 >  
# 22:53:29 >  "/usr/bin/python2" "16-explain.SQL.py" "16-explain"
# 22:53:29 >  

#set optimizer = 'sequential_pipe';
#explain select
#	p_brand,
#	p_type,
#	p_size,
#	count(distinct ps_suppkey) as supplier_cnt
#from
#	partsupp,
#	part
#where
#	p_partkey = ps_partkey
#	and p_brand <> 'Brand#45'
#	and p_type not like 'MEDIUM POLISHED%'
#	and p_size in (49, 14, 23, 45, 19, 3, 36, 9)
#	and ps_suppkey not in (
#		select
#			s_suppkey
#		from
#			supplier
#		where
#			s_comment like '%Customer%Complaints%'
#	)
#group by
#	p_brand,
#	p_type,
#	p_size
#order by
#	supplier_cnt desc,
#	p_brand,
#	p_type,
#	p_size;
% .explain # table_name
% mal # name
% clob # type
% 555 # length
function user.s4_1():void;
    X_208:void := querylog.define("explain select\n p_brand,\n p_type,\n p_size,\n count(distinct ps_suppkey) as supplier_cnt\nfrom\n partsupp,\n part\nwhere\n p_partkey = ps_partkey\n and p_brand <> \\'Brand#45\\'\n and p_type not like \\'MEDIUM POLISHED%\\'\n and p_size in (49, 14, 23, 45, 19, 3, 36, 9)\n and ps_suppkey not in (\n select\n s_suppkey\n from\n supplier\n where\n s_comment like \\'%Customer%Complaints%\\'\n )\ngroup by\n p_brand,\n p_type,\n p_size\norder by\n supplier_cnt desc,\n p_brand,\n p_type,\n p_size;","sequential_pipe",100);
    X_166 := bat.new(nil:str);
    X_173 := bat.append(X_166,"sys.part");
    X_183 := bat.append(X_173,"sys.part");
    X_191 := bat.append(X_183,"sys.part");
    X_199 := bat.append(X_191,"sys.L4");
    X_168 := bat.new(nil:str);
    X_175 := bat.append(X_168,"p_brand");
    X_184 := bat.append(X_175,"p_type");
    X_192 := bat.append(X_184,"p_size");
    X_201 := bat.append(X_192,"supplier_cnt");
    X_169 := bat.new(nil:str);
    X_177 := bat.append(X_169,"char");
    X_186 := bat.append(X_177,"varchar");
    X_194 := bat.append(X_186,"int");
    X_203 := bat.append(X_194,"bigint");
    X_170 := bat.new(nil:int);
    X_179 := bat.append(X_170,10);
    X_188 := bat.append(X_179,25);
    X_196 := bat.append(X_188,32);
    X_205 := bat.append(X_196,64);
    X_172 := bat.new(nil:int);
    X_181 := bat.append(X_172,0);
    X_190 := bat.append(X_181,0);
    X_198 := bat.append(X_190,0);
    X_207 := bat.append(X_198,0);
    X_0 := sql.mvc();
    C_1:bat[:oid] := sql.tid(X_0,"sys","partsupp");
    X_4:bat[:int] := sql.bind(X_0,"sys","partsupp","ps_suppkey",0);
    X_13 := algebra.projection(C_1,X_4);
    X_14 := bat.mirror(X_13);
    C_15:bat[:oid] := sql.tid(X_0,"sys","supplier");
    X_17:bat[:str] := sql.bind(X_0,"sys","supplier","s_comment",0);
    X_23 := algebra.projection(C_15,X_17);
    C_27 := algebra.likesubselect(X_23,nil:BAT,"%Customer%Complaints%","",false);
    X_30:bat[:int] := sql.bind(X_0,"sys","supplier","s_suppkey",0);
    X_37:bat[:int] := algebra.projectionpath(C_27,C_15,X_30);
    (X_38,r1_50) := algebra.subjoin(X_13,X_37,nil:BAT,nil:BAT,false,nil:lng);
    X_41 := algebra.subdiff(X_14,X_38,nil:BAT,nil:BAT,false,nil:lng);
    X_42:bat[:oid] := sql.bind_idxbat(X_0,"sys","partsupp","partsupp_ps_partkey_fkey",0);
    (X_44,r1_56) := sql.bind_idxbat(X_0,"sys","partsupp","partsupp_ps_partkey_fkey",2);
    X_46:bat[:oid] := sql.bind_idxbat(X_0,"sys","partsupp","partsupp_ps_partkey_fkey",1);
    X_47 := sql.delta(X_42,X_44,r1_56,X_46);
    X_49:bat[:oid] := algebra.projectionpath(X_41,C_1,X_47);
    C_50:bat[:oid] := sql.tid(X_0,"sys","part");
    X_52:bat[:int] := sql.bind(X_0,"sys","part","p_size",0);
    X_58 := algebra.projection(C_50,X_52);
    X_60:bat[:str] := sql.bind(X_0,"sys","part","p_brand",0);
    X_66 := algebra.projection(C_50,X_60);
    X_68:bat[:str] := sql.bind(X_0,"sys","part","p_type",0);
    X_74 := algebra.projection(C_50,X_68);
    C_78 := algebra.likesubselect(X_74,nil:BAT,"MEDIUM POLISHED%","",true);
    C_81 := algebra.subselect(X_66,C_78,"Brand#45","Brand#45",true,true,true);
    C_82 := algebra.subselect(X_58,C_81,49,49,true,false,false);
    C_86 := algebra.subselect(X_58,C_81,14,14,true,false,false);
    X_87 := bat.mergecand(C_82,C_86);
    C_89 := algebra.subselect(X_58,C_81,23,23,true,false,false);
    X_90 := bat.mergecand(X_87,C_89);
    C_92 := algebra.subselect(X_58,C_81,45,45,true,false,false);
    X_93 := bat.mergecand(X_90,C_92);
    C_95 := algebra.subselect(X_58,C_81,19,19,true,false,false);
    X_96 := bat.mergecand(X_93,C_95);
    C_98 := algebra.subselect(X_58,C_81,3,3,true,false,false);
    X_99 := bat.mergecand(X_96,C_98);
    C_101 := algebra.subselect(X_58,C_81,36,36,true,false,false);
    X_102 := bat.mergecand(X_99,C_101);
    C_104 := algebra.subselect(X_58,C_81,9,9,true,false,false);
    X_105 := bat.mergecand(X_102,C_104);
    X_106 := algebra.projection(X_105,C_50);
    (X_107,r1_119) := algebra.subjoin(X_49,X_106,nil:BAT,nil:BAT,false,nil:lng);
    X_111:bat[:str] := algebra.projectionpath(r1_119,X_105,X_74);
    X_113:bat[:int] := algebra.projectionpath(r1_119,X_105,X_58);
    X_115:bat[:int] := algebra.projectionpath(X_107,X_41,X_13);
    X_117:bat[:str] := algebra.projectionpath(r1_119,X_105,X_66);
    (X_118,r1_130,r2_130) := group.subgroup(X_117);
    (X_121,r1_133,r2_133) := group.subgroup(X_115,X_118);
    (X_124,r1_136,r2_136) := group.subgroup(X_113,X_121);
    (X_127,r1_139,r2_139) := group.subgroupdone(X_111,X_124);
    X_130 := algebra.projection(r1_139,X_111);
    X_131 := algebra.projection(r1_139,X_113);
    X_132 := algebra.projection(r1_139,X_117);
    X_145 := algebra.projection(r1_139,X_115);
    (X_133,r1_145,r2_145) := group.subgroup(X_132);
    (X_136,r1_148,r2_148) := group.subgroup(X_131,X_133);
    (X_139,r1_151,r2_151) := group.subgroupdone(X_130,X_136);
    X_142 := algebra.projection(r1_151,X_131);
    X_143 := algebra.projection(r1_151,X_130);
    X_144 := algebra.projection(r1_151,X_132);
    X_146:bat[:lng] := aggr.subcount(X_145,X_139,r1_151,true);
    (X_148,r1_160,r2_160) := algebra.subsort(X_146,true,false);
    (X_152,r1_164,r2_164) := algebra.subsort(X_144,r1_160,r2_160,false,false);
    (X_155,r1_167,r2_167) := algebra.subsort(X_143,r1_164,r2_164,false,false);
    (X_158,r1_170,r2_170) := algebra.subsort(X_142,r1_167,r2_167,false,false);
    X_161 := algebra.projection(r1_170,X_144);
    X_162 := algebra.projection(r1_170,X_143);
    X_163 := algebra.projection(r1_170,X_142);
    X_164 := algebra.projection(r1_170,X_146);
    sql.resultSet(X_199,X_201,X_203,X_205,X_207,X_161,X_162,X_163,X_164);
end user.s4_1;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=4 usec 
#costmodel            actions= 1 time=3 usec 
#coercion             actions= 2 time=18 usec 
#evaluate             actions=11 time=52 usec 
#emptybind            actions=18 time=42 usec 
#aliases              actions=17 time=19 usec 
#mergetable           actions= 0 time=79 usec 
#deadcode             actions=18 time=16 usec 
#aliases              actions= 0 time=12 usec 
#constants            actions=25 time=31 usec 
#commonTerms          actions= 0 time=14 usec 
#projectionpath       actions= 6 time=25 usec 
#reorder              actions= 1 time=61 usec 
#deadcode             actions= 6 time=13 usec 
#reduce               actions=92 time=23 usec 
#matpack              actions= 0 time=3 usec 
#multiplex            actions= 0 time=3 usec 
#profiler             actions= 1 time=6 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=35 usec 
#total                actions= 1 time=647 usec 

# 22:53:29 >  
# 22:53:29 >  "Done."
# 22:53:29 >  

