stdout of test '16-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:29 >  
# 22:53:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:29 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:29 >  
# 22:53:29 >  "/usr/bin/python2" "16-explain.SQL.py" "16-explain"
# 22:53:29 >  

#set optimizer = 'sequential_pipe';
#explain select
#	p_brand,
#	p_type,
#	p_size,
#	count(distinct ps_suppkey) as supplier_cnt
#from
#	partsupp,
#	part
#where
#	p_partkey = ps_partkey
#	and p_brand <> 'Brand#45'
#	and p_type not like 'MEDIUM POLISHED%'
#	and p_size in (49, 14, 23, 45, 19, 3, 36, 9)
#	and ps_suppkey not in (
#		select
#			s_suppkey
#		from
#			supplier
#		where
#			s_comment like '%Customer%Complaints%'
#	)
#group by
#	p_brand,
#	p_type,
#	p_size
#order by
#	supplier_cnt desc,
#	p_brand,
#	p_type,
#	p_size;
% .explain # table_name
% mal # name
% clob # type
% 595 # length
function user.s2_1{autoCommit=true}(A0:str,A1:str,A2:int,A3:int,A4:int,A5:int,A6:int,A7:int,A8:int,A9:int,A10:str):void;
    X_186:void  := querylog.define("explain select\n\tp_brand,\n\tp_type,\n\tp_size,\n\tcount(distinct ps_suppkey) as supplier_cnt\nfrom\n\tpartsupp,\n\tpart\nwhere\n\tp_partkey = ps_partkey\n\tand p_brand <> \\'Brand#45\\'\n\tand p_type not like \\'MEDIUM POLISHED%\\'\n\tand p_size in (49, 14, 23, 45, 19, 3, 36, 9)\n\tand ps_suppkey not in (\n\t\tselect\n\t\t\ts_suppkey\n\t\tfrom\n\t\t\tsupplier\n\t\twhere\n\t\t\ts_comment like \\'%Customer%Complaints%\\'\n\t)\ngroup by\n\tp_brand,\n\tp_type,\n\tp_size\norder by\n\tsupplier_cnt desc,\n\tp_brand,\n\tp_type,\n\tp_size;","sequential_pipe");
    X_13 := sql.mvc();
    X_14:bat[:oid,:oid]  := sql.tid(X_13,"sys","partsupp");
    X_17:bat[:oid,:int]  := sql.bind(X_13,"sys","partsupp","ps_suppkey",0);
    (X_20,r1_20) := sql.bind(X_13,"sys","partsupp","ps_suppkey",2);
    X_23:bat[:oid,:int]  := sql.bind(X_13,"sys","partsupp","ps_suppkey",1);
    X_25 := sql.delta(X_17,X_20,r1_20,X_23);
    X_26 := algebra.leftfetchjoin(X_14,X_25);
    X_27 := bat.mirror(X_26);
    X_28:bat[:oid,:oid]  := sql.tid(X_13,"sys","supplier");
    X_30:bat[:oid,:str]  := sql.bind(X_13,"sys","supplier","s_comment",0);
    (X_32,r1_32) := sql.bind(X_13,"sys","supplier","s_comment",2);
    X_34:bat[:oid,:str]  := sql.bind(X_13,"sys","supplier","s_comment",1);
    X_35 := sql.delta(X_30,X_32,r1_32,X_34);
    X_36 := algebra.leftfetchjoin(X_28,X_35);
    X_38 := algebra.likesubselect(X_36,nil:BAT,A10,"",false);
    X_41:bat[:oid,:int]  := sql.bind(X_13,"sys","supplier","s_suppkey",0);
    (X_43,r1_45) := sql.bind(X_13,"sys","supplier","s_suppkey",2);
    X_45:bat[:oid,:int]  := sql.bind(X_13,"sys","supplier","s_suppkey",1);
    X_47 := sql.delta(X_41,X_43,r1_45,X_45);
    X_48:bat[:oid,:int]  := algebra.leftfetchjoinPath(X_38,X_28,X_47);
    (X_49,r1_52) := algebra.subjoin(X_26,X_48,nil:BAT,nil:BAT,false,nil:lng);
    X_52 := algebra.tdiff(X_27,X_49);
    X_53:bat[:oid,:oid]  := sql.bind_idxbat(X_13,"sys","partsupp","partsupp_ps_partkey_fkey",0);
    (X_57,r1_60) := sql.bind_idxbat(X_13,"sys","partsupp","partsupp_ps_partkey_fkey",2);
    X_60:bat[:oid,:oid]  := sql.bind_idxbat(X_13,"sys","partsupp","partsupp_ps_partkey_fkey",1);
    X_62 := sql.delta(X_53,X_57,r1_60,X_60);
    X_63:bat[:oid,:oid]  := algebra.leftfetchjoinPath(X_52,X_14,X_62);
    X_64:bat[:oid,:oid]  := sql.tid(X_13,"sys","part");
    X_66:bat[:oid,:int]  := sql.bind(X_13,"sys","part","p_size",0);
    (X_68,r1_72) := sql.bind(X_13,"sys","part","p_size",2);
    X_70:bat[:oid,:int]  := sql.bind(X_13,"sys","part","p_size",1);
    X_71 := sql.delta(X_66,X_68,r1_72,X_70);
    X_72 := algebra.leftfetchjoin(X_64,X_71);
    X_73:bat[:oid,:str]  := sql.bind(X_13,"sys","part","p_type",0);
    (X_75,r1_80) := sql.bind(X_13,"sys","part","p_type",2);
    X_78:bat[:oid,:str]  := sql.bind(X_13,"sys","part","p_type",1);
    X_79 := sql.delta(X_73,X_75,r1_80,X_78);
    X_80 := algebra.leftfetchjoin(X_64,X_79);
    X_82:bat[:oid,:str]  := sql.bind(X_13,"sys","part","p_brand",0);
    (X_84,r1_91) := sql.bind(X_13,"sys","part","p_brand",2);
    X_86:bat[:oid,:str]  := sql.bind(X_13,"sys","part","p_brand",1);
    X_87 := sql.delta(X_82,X_84,r1_91,X_86);
    X_88 := algebra.leftfetchjoin(X_64,X_87);
    X_89 := algebra.subselect(X_88,A0,A0,true,true,true);
    X_91 := algebra.likesubselect(X_80,X_89,A1,"",true);
    X_92 := algebra.subselect(X_72,X_91,A2,A2,true,true,false);
    X_94 := algebra.subselect(X_72,X_91,A3,A3,true,true,false);
    X_95 := bat.mergecand(X_92,X_94);
    X_96 := algebra.subselect(X_72,X_91,A4,A4,true,true,false);
    X_97 := bat.mergecand(X_95,X_96);
    X_98 := algebra.subselect(X_72,X_91,A5,A5,true,true,false);
    X_99 := bat.mergecand(X_97,X_98);
    X_100 := algebra.subselect(X_72,X_91,A6,A6,true,true,false);
    X_101 := bat.mergecand(X_99,X_100);
    X_102 := algebra.subselect(X_72,X_91,A7,A7,true,true,false);
    X_103 := bat.mergecand(X_101,X_102);
    X_104 := algebra.subselect(X_72,X_91,A8,A8,true,true,false);
    X_105 := bat.mergecand(X_103,X_104);
    X_106 := algebra.subselect(X_72,X_91,A9,A9,true,true,false);
    X_107 := bat.mergecand(X_105,X_106);
    X_108 := algebra.leftfetchjoin(X_107,X_64);
    (X_109,r1_124) := algebra.subjoin(X_63,X_108,nil:BAT,nil:BAT,false,nil:lng);
    X_211 := algebra.leftfetchjoin(r1_124,X_107);
    X_113:bat[:oid,:str]  := algebra.leftfetchjoin(X_211,X_80);
    X_114:bat[:oid,:str]  := algebra.leftfetchjoin(X_211,X_88);
    X_115:bat[:oid,:int]  := algebra.leftfetchjoin(X_211,X_72);
    X_116:bat[:oid,:int]  := algebra.leftfetchjoinPath(X_109,X_52,X_26);
    (X_117,r1_136,r2_136) := group.subgroup(X_116);
    (X_120,r1_139,r2_139) := group.subgroup(X_115,X_117);
    (X_123,r1_142,r2_142) := group.subgroup(X_114,X_120);
    (X_126,r1_145,r2_145) := group.subgroupdone(X_113,X_123);
    X_129 := algebra.leftfetchjoin(r1_145,X_113);
    X_130 := algebra.leftfetchjoin(r1_145,X_114);
    X_131 := algebra.leftfetchjoin(r1_145,X_115);
    X_144 := algebra.leftfetchjoin(r1_145,X_116);
    (X_132,r1_151,r2_151) := group.subgroup(X_131);
    (X_135,r1_154,r2_154) := group.subgroup(X_130,X_132);
    (X_138,r1_157,r2_157) := group.subgroupdone(X_129,X_135);
    X_141 := algebra.leftfetchjoin(r1_157,X_131);
    X_142 := algebra.leftfetchjoin(r1_157,X_129);
    X_143 := algebra.leftfetchjoin(r1_157,X_130);
    X_145:bat[:oid,:wrd]  := aggr.subcount(X_144,X_138,r1_157,true);
    (X_147,r1_166,r2_166) := algebra.subsort(X_145,true,false);
    (X_151,r1_170,r2_170) := algebra.subsort(X_143,r1_166,r2_166,false,false);
    (X_154,r1_173,r2_173) := algebra.subsort(X_142,r1_170,r2_170,false,false);
    (X_157,r1_176,r2_176) := algebra.subsort(X_141,r1_173,r2_173,false,false);
    X_160 := algebra.leftfetchjoin(r1_176,X_143);
    X_163 := algebra.leftfetchjoin(r1_176,X_145);
    X_162 := algebra.leftfetchjoin(r1_176,X_141);
    X_161 := algebra.leftfetchjoin(r1_176,X_142);
    X_164 := sql.resultSet(4,1,X_160);
    sql.rsColumn(X_164,"sys.part","p_brand","varchar",10,0,X_160);
    sql.rsColumn(X_164,"sys.part","p_type","varchar",25,0,X_161);
    sql.rsColumn(X_164,"sys.part","p_size","int",32,0,X_162);
    sql.rsColumn(X_164,"sys.L4","supplier_cnt","wrd",32,0,X_163);
    X_184 := io.stdout();
    sql.exportResult(X_184,X_164);
end user.s2_1;

# 22:53:29 >  
# 22:53:29 >  "Done."
# 22:53:29 >  

