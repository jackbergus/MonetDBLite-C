stdout of test '15-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:29 >  
# 22:53:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:29 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:29 >  
# 22:53:29 >  "/usr/bin/python2" "15-explain.SQL.py" "15-explain"
# 22:53:29 >  

#set optimizer = 'sequential_pipe';
#create view revenue0 (supplier_no, total_revenue) as
#	select
#		l_suppkey,
#		sum(l_extendedprice * (1 - l_discount))
#	from
#		lineitem
#	where
#		l_shipdate >= date '1996-01-01'
#		and l_shipdate < date '1996-01-01' + interval '3' month
#	group by
#		l_suppkey;
#explain select
#	s_suppkey,
#	s_name,
#	s_address,
#	s_phone,
#	total_revenue
#from
#	supplier,
#	revenue0
#where
#	s_suppkey = supplier_no
#	and total_revenue = (
#		select
#			max(total_revenue)
#		from
#			revenue0
#	)
#order by
#	s_suppkey;
% .explain # table_name
% mal # name
% clob # type
% 297 # length
function user.s6_1():void;
    X_235:void := querylog.define("explain select\n s_suppkey,\n s_name,\n s_address,\n s_phone,\n total_revenue\nfrom\n supplier,\n revenue0\nwhere\n s_suppkey = supplier_no\n and total_revenue = (\n select\n max(total_revenue)\n from\n revenue0\n )\norder by\n s_suppkey;","sequential_pipe",75);
    X_185 := bat.new(nil:str);
    X_192 := bat.append(X_185,"sys.supplier");
    X_202 := bat.append(X_192,"sys.supplier");
    X_210 := bat.append(X_202,"sys.supplier");
    X_218 := bat.append(X_210,"sys.supplier");
    X_225 := bat.append(X_218,"sys.revenue0");
    X_187 := bat.new(nil:str);
    X_194 := bat.append(X_187,"s_suppkey");
    X_203 := bat.append(X_194,"s_name");
    X_211 := bat.append(X_203,"s_address");
    X_219 := bat.append(X_211,"s_phone");
    X_227 := bat.append(X_219,"total_revenue");
    X_188 := bat.new(nil:str);
    X_196 := bat.append(X_188,"int");
    X_205 := bat.append(X_196,"char");
    X_213 := bat.append(X_205,"varchar");
    X_221 := bat.append(X_213,"char");
    X_229 := bat.append(X_221,"decimal");
    X_189 := bat.new(nil:int);
    X_198 := bat.append(X_189,32);
    X_207 := bat.append(X_198,25);
    X_215 := bat.append(X_207,40);
    X_222 := bat.append(X_215,15);
    X_231 := bat.append(X_222,19);
    X_191 := bat.new(nil:int);
    X_200 := bat.append(X_191,0);
    X_209 := bat.append(X_200,0);
    X_217 := bat.append(X_209,0);
    X_224 := bat.append(X_217,0);
    X_233 := bat.append(X_224,4);
    X_0 := sql.mvc();
    C_1:bat[:oid] := sql.tid(X_0,"sys","supplier");
    X_4:bat[:int] := sql.bind(X_0,"sys","supplier","s_suppkey",0);
    X_13 := algebra.projection(C_1,X_4);
    C_35:bat[:oid] := sql.tid(X_0,"sys","lineitem");
    X_58:bat[:date] := sql.bind(X_0,"sys","lineitem","l_shipdate",0);
    X_64 := algebra.projection(C_35,X_58);
    X_70:date := mtime.addmonths("1996-01-01",3);
    C_71 := algebra.subselect(X_64,"1996-01-01",X_70,true,false,false);
    X_37:bat[:int] := sql.bind(X_0,"sys","lineitem","l_suppkey",0);
    X_43 := algebra.projection(C_35,X_37);
    X_75 := algebra.projection(C_71,X_43);
    (X_79,X_80,X_81) := group.subgroupdone(X_75);
    X_82 := algebra.projection(X_80,X_75);
    X_44:bat[:lng] := sql.bind(X_0,"sys","lineitem","l_extendedprice",0);
    X_50 := algebra.projection(C_35,X_44);
    X_76 := algebra.projection(C_71,X_50);
    X_51:bat[:lng] := sql.bind(X_0,"sys","lineitem","l_discount",0);
    X_57 := algebra.projection(C_35,X_51);
    X_77 := algebra.projection(C_71,X_57);
    X_88:bat[:lng] := batcalc.-(100:lng,X_77);
    X_91:bat[:lng] := batcalc.*(X_76,X_88);
    X_93:bat[:lng] := aggr.subsum(X_91,X_79,X_80,true,true);
    (X_94,X_95) := algebra.subjoin(X_13,X_82,nil:BAT,nil:BAT,false,nil:lng);
    X_99 := algebra.projection(X_94,X_13);
    X_167 := bat.mirror(X_99);
    X_104 := algebra.projection(X_95,X_93);
    X_160 := aggr.max(X_93);
    X_161 := sql.single(X_160);
    (X_162,X_163) := algebra.subjoin(X_104,X_161,nil:BAT,nil:BAT,false,nil:lng);
    C_168 := algebra.subinter(X_167,X_162,nil:BAT,nil:BAT,false,nil:lng);
    X_169 := algebra.projection(C_168,X_99);
    (X_174,X_175,X_176) := algebra.subsort(X_169,false,false);
    X_179 := algebra.projection(X_175,X_169);
    X_14:bat[:str] := sql.bind(X_0,"sys","supplier","s_name",0);
    X_180:bat[:str] := algebra.projectionpath(X_175,C_168,X_94,C_1,X_14);
    X_21:bat[:str] := sql.bind(X_0,"sys","supplier","s_address",0);
    X_181:bat[:str] := algebra.projectionpath(X_175,C_168,X_94,C_1,X_21);
    X_28:bat[:str] := sql.bind(X_0,"sys","supplier","s_phone",0);
    X_182:bat[:str] := algebra.projectionpath(X_175,C_168,X_94,C_1,X_28);
    X_183:bat[:lng] := algebra.projectionpath(X_175,C_168,X_104);
    sql.resultSet(X_225,X_227,X_229,X_231,X_233,X_179,X_180,X_181,X_182,X_183);
end user.s6_1;
#inline               actions= 0 time=9 usec 
#remap                actions= 4 time=87 usec 
#costmodel            actions= 1 time=8 usec 
#coercion             actions= 8 time=45 usec 
#evaluate             actions= 2 time=51 usec 
#emptybind            actions=36 time=95 usec 
#aliases              actions=14 time=31 usec 
#mergetable           actions= 0 time=142 usec 
#deadcode             actions=36 time=25 usec 
#aliases              actions= 0 time=19 usec 
#constants            actions=35 time=40 usec 
#commonTerms          actions=18 time=55 usec 
#projectionpath       actions=10 time=38 usec 
#reorder              actions= 1 time=84 usec 
#deadcode             actions=28 time=18 usec 
#reduce               actions=160 time=40 usec 
#matpack              actions= 0 time=5 usec 
#multiplex            actions= 0 time=4 usec 
#profiler             actions= 1 time=8 usec 
#candidates           actions= 1 time=3 usec 
#garbagecollector     actions= 1 time=40 usec 
#total                actions= 1 time=1167 usec 
#drop view revenue0;

# 22:53:29 >  
# 22:53:29 >  "Done."
# 22:53:29 >  

