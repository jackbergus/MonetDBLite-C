stdout of test '15-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:29 >  
# 22:53:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:29 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:29 >  
# 22:53:29 >  "/usr/bin/python2" "15-explain.SQL.py" "15-explain"
# 22:53:29 >  

#set optimizer = 'sequential_pipe';
#create view revenue0 (supplier_no, total_revenue) as
#	select
#		l_suppkey,
#		sum(l_extendedprice * (1 - l_discount))
#	from
#		lineitem
#	where
#		l_shipdate >= date '1996-01-01'
#		and l_shipdate < date '1996-01-01' + interval '3' month
#	group by
#		l_suppkey;
#explain select
#	s_suppkey,
#	s_name,
#	s_address,
#	s_phone,
#	total_revenue
#from
#	supplier,
#	revenue0
#where
#	s_suppkey = supplier_no
#	and total_revenue = (
#		select
#			max(total_revenue)
#		from
#			revenue0
#	)
#order by
#	s_suppkey;
% .explain # table_name
% mal # name
% clob # type
% 297 # length
function user.s6_1():void;
    X_234:void := querylog.define("explain select\n s_suppkey,\n s_name,\n s_address,\n s_phone,\n total_revenue\nfrom\n supplier,\n revenue0\nwhere\n s_suppkey = supplier_no\n and total_revenue = (\n select\n max(total_revenue)\n from\n revenue0\n )\norder by\n s_suppkey;","sequential_pipe",76);
    X_184 := bat.new(nil:str);
    X_191 := bat.append(X_184,"sys.supplier");
    X_201 := bat.append(X_191,"sys.supplier");
    X_209 := bat.append(X_201,"sys.supplier");
    X_217 := bat.append(X_209,"sys.supplier");
    X_224 := bat.append(X_217,"sys.revenue0");
    X_186 := bat.new(nil:str);
    X_193 := bat.append(X_186,"s_suppkey");
    X_202 := bat.append(X_193,"s_name");
    X_210 := bat.append(X_202,"s_address");
    X_218 := bat.append(X_210,"s_phone");
    X_226 := bat.append(X_218,"total_revenue");
    X_187 := bat.new(nil:str);
    X_195 := bat.append(X_187,"int");
    X_204 := bat.append(X_195,"char");
    X_212 := bat.append(X_204,"varchar");
    X_220 := bat.append(X_212,"char");
    X_228 := bat.append(X_220,"decimal");
    X_188 := bat.new(nil:int);
    X_197 := bat.append(X_188,32);
    X_206 := bat.append(X_197,25);
    X_214 := bat.append(X_206,40);
    X_221 := bat.append(X_214,15);
    X_230 := bat.append(X_221,19);
    X_190 := bat.new(nil:int);
    X_199 := bat.append(X_190,0);
    X_208 := bat.append(X_199,0);
    X_216 := bat.append(X_208,0);
    X_223 := bat.append(X_216,0);
    X_232 := bat.append(X_223,4);
    X_0 := sql.mvc();
    C_1:bat[:oid] := sql.tid(X_0,"sys","supplier");
    X_4:bat[:int] := sql.bind(X_0,"sys","supplier","s_suppkey",0);
    X_13 := algebra.projection(C_1,X_4);
    C_14:bat[:oid] := sql.tid(X_0,"sys","lineitem");
    X_16:bat[:date] := sql.bind(X_0,"sys","lineitem","l_shipdate",0);
    X_22 := algebra.projection(C_14,X_16);
    X_28:date := mtime.addmonths("1996-01-01",3);
    C_29 := algebra.subselect(X_22,"1996-01-01",X_28,true,false,false);
    X_33:bat[:int] := sql.bind(X_0,"sys","lineitem","l_suppkey",0);
    X_39 := algebra.projection(C_14,X_33);
    X_40 := algebra.projection(C_29,X_39);
    (X_41,r1_42,r2_42) := group.subgroupdone(X_40);
    X_44 := algebra.projection(r1_42,X_40);
    X_53:bat[:lng] := sql.bind(X_0,"sys","lineitem","l_extendedprice",0);
    X_59 := algebra.projection(C_14,X_53);
    X_60 := algebra.projection(C_29,X_59);
    X_66:bat[:lng] := sql.bind(X_0,"sys","lineitem","l_discount",0);
    X_72 := algebra.projection(C_14,X_66);
    X_73 := algebra.projection(C_29,X_72);
    X_74:bat[:lng] := batcalc.-(100:lng,X_73);
    X_77:bat[:lng] := batcalc.*(X_60,X_74);
    X_79:bat[:lng] := aggr.subsum(X_77,X_41,r1_42,true,true);
    X_45 := bat.setKey(X_44,true);
    (X_46,r1_47) := algebra.subjoin(X_13,X_45,nil:BAT,nil:BAT,false,nil:lng);
    X_51 := algebra.projection(X_46,X_13);
    X_52 := bat.mirror(X_51);
    X_82 := algebra.projection(r1_47,X_79);
    X_137 := aggr.max(X_79);
    X_138 := sql.single(X_137);
    (X_139,r1_140) := algebra.subjoin(X_82,X_138,nil:BAT,nil:BAT,false,nil:lng);
    C_145 := algebra.subinter(X_52,X_139,nil:BAT,nil:BAT,false,nil:lng);
    X_146 := algebra.projection(C_145,X_51);
    (X_147,r1_148,r2_148) := algebra.subsort(X_146,false,false);
    X_150 := algebra.projection(r1_148,X_146);
    X_151:bat[:str] := sql.bind(X_0,"sys","supplier","s_name",0);
    X_160:bat[:str] := algebra.projectionpath(r1_148,C_145,X_46,C_1,X_151);
    X_161:bat[:str] := sql.bind(X_0,"sys","supplier","s_address",0);
    X_170:bat[:str] := algebra.projectionpath(r1_148,C_145,X_46,C_1,X_161);
    X_171:bat[:str] := sql.bind(X_0,"sys","supplier","s_phone",0);
    X_180:bat[:str] := algebra.projectionpath(r1_148,C_145,X_46,C_1,X_171);
    X_182:bat[:lng] := algebra.projectionpath(r1_148,C_145,X_82);
    sql.resultSet(X_224,X_226,X_228,X_230,X_232,X_150,X_160,X_170,X_180,X_182);
end user.s6_1;
#inline               actions= 0 time=9 usec 
#remap                actions= 4 time=87 usec 
#costmodel            actions= 1 time=8 usec 
#coercion             actions= 8 time=45 usec 
#evaluate             actions= 2 time=51 usec 
#emptybind            actions=36 time=95 usec 
#aliases              actions=14 time=31 usec 
#mergetable           actions= 0 time=142 usec 
#deadcode             actions=36 time=25 usec 
#aliases              actions= 0 time=19 usec 
#constants            actions=35 time=40 usec 
#commonTerms          actions=18 time=55 usec 
#projectionpath       actions=10 time=38 usec 
#reorder              actions= 1 time=84 usec 
#deadcode             actions=28 time=18 usec 
#reduce               actions=160 time=40 usec 
#matpack              actions= 0 time=5 usec 
#multiplex            actions= 0 time=4 usec 
#profiler             actions= 1 time=8 usec 
#candidates           actions= 1 time=3 usec 
#garbagecollector     actions= 1 time=40 usec 
#total                actions= 1 time=1167 usec 
#drop view revenue0;

# 22:53:29 >  
# 22:53:29 >  "Done."
# 22:53:29 >  

