stdout of test '15-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:29 >  
# 22:53:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:29 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:29 >  
# 22:53:29 >  "/usr/bin/python2" "15-explain.SQL.py" "15-explain"
# 22:53:29 >  

#set optimizer = 'sequential_pipe';
#create view revenue0 (supplier_no, total_revenue) as
#	select
#		l_suppkey,
#		sum(l_extendedprice * (1 - l_discount))
#	from
#		lineitem
#	where
#		l_shipdate >= date '1996-01-01'
#		and l_shipdate < date '1996-01-01' + interval '3' month
#	group by
#		l_suppkey;
#explain select
#	s_suppkey,
#	s_name,
#	s_address,
#	s_phone,
#	total_revenue
#from
#	supplier,
#	revenue0
#where
#	s_suppkey = supplier_no
#	and total_revenue = (
#		select
#			max(total_revenue)
#		from
#			revenue0
#	)
#order by
#	s_suppkey;
% .explain # table_name
% mal # name
% clob # type
% 325 # length
function user.s3_1{autoCommit=true}():void;
    X_173:void := querylog.define("explain select\n\ts_suppkey,\n\ts_name,\n\ts_address,\n\ts_phone,\n\ttotal_revenue\nfrom\n\tsupplier,\n\trevenue0\nwhere\n\ts_suppkey = supplier_no\n\tand total_revenue = (\n\t\tselect\n\t\t\tmax(total_revenue)\n\t\tfrom\n\t\t\trevenue0\n\t)\norder by\n\ts_suppkey;","sequential_pipe",100);
    X_122 := bat.new(nil:oid,nil:str);
    X_130 := bat.append(X_122,"sys.supplier");
    X_140 := bat.append(X_130,"sys.supplier");
    X_148 := bat.append(X_140,"sys.supplier");
    X_156 := bat.append(X_148,"sys.supplier");
    X_163 := bat.append(X_156,"sys.revenue0");
    X_125 := bat.new(nil:oid,nil:str);
    X_132 := bat.append(X_125,"s_suppkey");
    X_141 := bat.append(X_132,"s_name");
    X_149 := bat.append(X_141,"s_address");
    X_157 := bat.append(X_149,"s_phone");
    X_165 := bat.append(X_157,"total_revenue");
    X_126 := bat.new(nil:oid,nil:str);
    X_134 := bat.append(X_126,"int");
    X_143 := bat.append(X_134,"char");
    X_151 := bat.append(X_143,"varchar");
    X_159 := bat.append(X_151,"char");
    X_167 := bat.append(X_159,"decimal");
    X_127 := bat.new(nil:oid,nil:int);
    X_136 := bat.append(X_127,32);
    X_145 := bat.append(X_136,25);
    X_153 := bat.append(X_145,40);
    X_160 := bat.append(X_153,15);
    X_169 := bat.append(X_160,19);
    X_129 := bat.new(nil:oid,nil:int);
    X_138 := bat.append(X_129,0);
    X_147 := bat.append(X_138,0);
    X_155 := bat.append(X_147,0);
    X_162 := bat.append(X_155,0);
    X_171 := bat.append(X_162,4);
    X_2 := sql.mvc();
    X_3:bat[:oid,:oid]  := sql.tid(X_2,"sys","supplier");
    X_6:bat[:oid,:int]  := sql.bind(X_2,"sys","supplier","s_suppkey",0);
    (X_9,r1_9) := sql.bind(X_2,"sys","supplier","s_suppkey",2);
    X_12:bat[:oid,:int]  := sql.bind(X_2,"sys","supplier","s_suppkey",1);
    X_14 := sql.delta(X_6,X_9,r1_9,X_12);
    X_15 := algebra.leftfetchjoin(X_3,X_14);
    X_16:bat[:oid,:oid]  := sql.tid(X_2,"sys","lineitem");
    X_18:bat[:oid,:date]  := sql.bind(X_2,"sys","lineitem","l_shipdate",0);
    (X_20,r1_20) := sql.bind(X_2,"sys","lineitem","l_shipdate",2);
    X_22:bat[:oid,:date]  := sql.bind(X_2,"sys","lineitem","l_shipdate",1);
    X_23 := sql.delta(X_18,X_20,r1_20,X_22);
    X_24 := algebra.leftfetchjoin(X_16,X_23);
    X_27:date := mtime.addmonths("1996-01-01",3);
    X_28 := algebra.subselect(X_24,"1996-01-01",X_27,true,false,false);
    X_30:bat[:oid,:int]  := sql.bind(X_2,"sys","lineitem","l_suppkey",0);
    (X_32,r1_35) := sql.bind(X_2,"sys","lineitem","l_suppkey",2);
    X_35:bat[:oid,:int]  := sql.bind(X_2,"sys","lineitem","l_suppkey",1);
    X_36 := sql.delta(X_30,X_32,r1_35,X_35);
    X_37 := algebra.leftfetchjoin(X_16,X_36);
    X_38 := algebra.leftfetchjoin(X_28,X_37);
    (X_39,r1_42,r2_42) := group.subgroupdone(X_38);
    X_42 := algebra.leftfetchjoin(r1_42,X_38);
    X_51:bat[:oid,:lng] := sql.bind(X_2,"sys","lineitem","l_extendedprice",0);
    (X_55,r1_58) := sql.bind(X_2,"sys","lineitem","l_extendedprice",2);
    X_58:bat[:oid,:lng] := sql.bind(X_2,"sys","lineitem","l_extendedprice",1);
    X_60 := sql.delta(X_51,X_55,r1_58,X_58);
    X_61 := algebra.leftfetchjoin(X_16,X_60);
    X_62 := algebra.leftfetchjoin(X_28,X_61);
    X_63:bat[:oid,:lng] := sql.bind(X_2,"sys","lineitem","l_discount",0);
    (X_66,r1_73) := sql.bind(X_2,"sys","lineitem","l_discount",2);
    X_68:bat[:oid,:lng] := sql.bind(X_2,"sys","lineitem","l_discount",1);
    X_69 := sql.delta(X_63,X_66,r1_73,X_68);
    X_70 := algebra.leftfetchjoin(X_16,X_69);
    X_71 := algebra.leftfetchjoin(X_28,X_70);
    X_72:bat[:oid,:lng] := batcalc.-(100:lng,X_71);
    X_73:bat[:oid,:lng] := batcalc.*(X_62,X_72);
    X_74:bat[:oid,:lng] := aggr.subsum(X_73,X_39,r1_42,true,true);
    X_43 := bat.setKey(X_42,true);
    (X_45,r1_48) := algebra.subjoin(X_15,X_43,nil:BAT,nil:BAT,false,nil:lng);
    X_49 := algebra.leftfetchjoin(X_45,X_15);
    X_50 := bat.mirror(X_49);
    X_76 := algebra.leftfetchjoin(r1_48,X_74);
    X_81 := aggr.max(X_74);
    X_82 := sql.single(X_81);
    (X_83,r1_153) := algebra.subjoin(X_76,X_82,nil:BAT,nil:BAT,false,nil:lng);
    X_88 := algebra.tinter(X_50,X_83);
    X_89 := algebra.leftfetchjoin(X_88,X_49);
    (X_90,r1_160,r2_160) := algebra.subsort(X_89,false,false);
    X_93 := algebra.leftfetchjoin(r1_160,X_89);
    X_94:bat[:oid,:str] := sql.bind(X_2,"sys","supplier","s_name",0);
    (X_97,r1_167) := sql.bind(X_2,"sys","supplier","s_name",2);
    X_99:bat[:oid,:str] := sql.bind(X_2,"sys","supplier","s_name",1);
    X_100 := sql.delta(X_94,X_97,r1_167,X_99);
    X_101:bat[:oid,:str] := algebra.leftfetchjoinPath(r1_160,X_88,X_45,X_3,X_100);
    X_102:bat[:oid,:str] := sql.bind(X_2,"sys","supplier","s_address",0);
    (X_106,r1_179) := sql.bind(X_2,"sys","supplier","s_address",2);
    X_109:bat[:oid,:str] := sql.bind(X_2,"sys","supplier","s_address",1);
    X_111 := sql.delta(X_102,X_106,r1_179,X_109);
    X_112:bat[:oid,:str] := algebra.leftfetchjoinPath(r1_160,X_88,X_45,X_3,X_111);
    X_113:bat[:oid,:str] := sql.bind(X_2,"sys","supplier","s_phone",0);
    (X_115,r1_191) := sql.bind(X_2,"sys","supplier","s_phone",2);
    X_117:bat[:oid,:str] := sql.bind(X_2,"sys","supplier","s_phone",1);
    X_118 := sql.delta(X_113,X_115,r1_191,X_117);
    X_119:bat[:oid,:str] := algebra.leftfetchjoinPath(r1_160,X_88,X_45,X_3,X_118);
    X_120:bat[:oid,:lng] := algebra.leftfetchjoinPath(r1_160,X_88,X_76);
    sql.resultSet(X_163,X_165,X_167,X_169,X_171,X_93,X_101,X_112,X_119,X_120);
end user.s3_1;
#drop view revenue0;

# 22:53:29 >  
# 22:53:29 >  "Done."
# 22:53:29 >  

