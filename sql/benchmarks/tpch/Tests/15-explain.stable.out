stdout of test '15-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:29 >  
# 22:53:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:29 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:29 >  
# 22:53:29 >  "/usr/bin/python2" "15-explain.SQL.py" "15-explain"
# 22:53:29 >  

#set optimizer = 'sequential_pipe';
#create view revenue0 (supplier_no, total_revenue) as
#	select
#		l_suppkey,
#		sum(l_extendedprice * (1 - l_discount))
#	from
#		lineitem
#	where
#		l_shipdate >= date '1996-01-01'
#		and l_shipdate < date '1996-01-01' + interval '3' month
#	group by
#		l_suppkey;
#explain select
#	s_suppkey,
#	s_name,
#	s_address,
#	s_phone,
#	total_revenue
#from
#	supplier,
#	revenue0
#where
#	s_suppkey = supplier_no
#	and total_revenue = (
#		select
#			max(total_revenue)
#		from
#			revenue0
#	)
#order by
#	s_suppkey;
% .explain # table_name
% mal # name
% clob # type
% 324 # length
function user.s3_1{autoCommit=true}():void;
    X_147:void := querylog.define("explain select\n\ts_suppkey,\n\ts_name,\n\ts_address,\n\ts_phone,\n\ttotal_revenue\nfrom\n\tsupplier,\n\trevenue0\nwhere\n\ts_suppkey = supplier_no\n\tand total_revenue = (\n\t\tselect\n\t\t\tmax(total_revenue)\n\t\tfrom\n\t\t\trevenue0\n\t)\norder by\n\ts_suppkey;","sequential_pipe",99);
    X_102 := bat.new(nil:oid,nil:str);
    X_110 := bat.append(X_102,"sys.supplier");
    X_118 := bat.append(X_110,"sys.supplier");
    X_125 := bat.append(X_118,"sys.supplier");
    X_132 := bat.append(X_125,"sys.supplier");
    X_137 := bat.append(X_132,"sys.revenue0");
    X_105 := bat.new(nil:oid,nil:str);
    X_112 := bat.append(X_105,"s_suppkey");
    X_119 := bat.append(X_112,"s_name");
    X_126 := bat.append(X_119,"s_address");
    X_133 := bat.append(X_126,"s_phone");
    X_139 := bat.append(X_133,"total_revenue");
    X_106 := bat.new(nil:oid,nil:str);
    X_113 := bat.append(X_106,"int");
    X_120 := bat.append(X_113,"char");
    X_127 := bat.append(X_120,"varchar");
    X_134 := bat.append(X_127,"char");
    X_141 := bat.append(X_134,"decimal");
    X_107 := bat.new(nil:oid,nil:int);
    X_115 := bat.append(X_107,32);
    X_122 := bat.append(X_115,25);
    X_129 := bat.append(X_122,40);
    X_135 := bat.append(X_129,15);
    X_143 := bat.append(X_135,19);
    X_109 := bat.new(nil:oid,nil:int);
    X_117 := bat.append(X_109,0);
    X_124 := bat.append(X_117,0);
    X_131 := bat.append(X_124,0);
    X_136 := bat.append(X_131,0);
    X_145 := bat.append(X_136,4);
    X_2 := sql.mvc();
    C_3:bat[:oid,:oid] := sql.tid(X_2,"sys","supplier");
    X_6:bat[:oid,:int]  := sql.bind(X_2,"sys","supplier","s_suppkey",0);
    (C_9,r1_9) := sql.bind(X_2,"sys","supplier","s_suppkey",2);
    X_12:bat[:oid,:int]  := sql.bind(X_2,"sys","supplier","s_suppkey",1);
    X_14 := sql.delta(X_6,C_9,r1_9,X_12);
    X_15 := algebra.leftfetchjoin(C_3,X_14);
    C_16:bat[:oid,:oid] := sql.tid(X_2,"sys","lineitem");
    X_18:bat[:oid,:date]  := sql.bind(X_2,"sys","lineitem","l_shipdate",0);
    (C_20,r1_20) := sql.bind(X_2,"sys","lineitem","l_shipdate",2);
    X_22:bat[:oid,:date]  := sql.bind(X_2,"sys","lineitem","l_shipdate",1);
    X_23 := sql.delta(X_18,C_20,r1_20,X_22);
    X_24 := algebra.leftfetchjoin(C_16,X_23);
    X_27 := mtime.addmonths("1996-01-01",3);
    C_28 := algebra.subselect(X_24,"1996-01-01",X_27,true,false,false);
    X_30:bat[:oid,:int]  := sql.bind(X_2,"sys","lineitem","l_suppkey",0);
    (C_32,r1_36) := sql.bind(X_2,"sys","lineitem","l_suppkey",2);
    X_34:bat[:oid,:int] := sql.bind(X_2,"sys","lineitem","l_suppkey",1);
    X_35 := sql.delta(X_30,C_32,r1_36,X_34);
    X_36 := algebra.leftfetchjoin(C_16,X_35);
    X_37 := algebra.leftfetchjoin(C_28,X_36);
    (X_38,r1_42,r2_42) := group.subgroupdone(X_37);
    X_41 := algebra.leftfetchjoin(r1_42,X_37);
    X_48:bat[:oid,:lng] := sql.bind(X_2,"sys","lineitem","l_extendedprice",0);
    (C_50,r1_55) := sql.bind(X_2,"sys","lineitem","l_extendedprice",2);
    X_52:bat[:oid,:lng] := sql.bind(X_2,"sys","lineitem","l_extendedprice",1);
    X_53 := sql.delta(X_48,C_50,r1_55,X_52);
    X_54 := algebra.leftfetchjoin(C_16,X_53);
    X_55 := algebra.leftfetchjoin(C_28,X_54);
    X_57:bat[:oid,:lng] := sql.bind(X_2,"sys","lineitem","l_discount",0);
    (C_59,r1_68) := sql.bind(X_2,"sys","lineitem","l_discount",2);
    X_61:bat[:oid,:lng] := sql.bind(X_2,"sys","lineitem","l_discount",1);
    X_62 := sql.delta(X_57,C_59,r1_68,X_61);
    X_63 := algebra.leftfetchjoin(C_16,X_62);
    X_64 := algebra.leftfetchjoin(C_28,X_63);
    X_65:bat[:oid,:lng] := batcalc.-(100:lng,X_64);
    X_66:bat[:oid,:lng] := batcalc.*(X_55,X_65);
    X_67:bat[:oid,:lng] := aggr.subsum(X_66,X_38,r1_42,true,true);
    (X_42,r1_46) := algebra.subjoin(X_15,X_41,nil:BAT,nil:BAT,false,nil:lng);
    X_46 := algebra.leftfetchjoin(X_42,X_15);
    X_47 := bat.mirror(X_46);
    X_68 := algebra.leftfetchjoin(r1_46,X_67);
    X_69 := aggr.max(X_67);
    X_70 := sql.single(X_69);
    (X_71,r1_139) := algebra.subjoin(X_68,X_70,nil:BAT,nil:BAT,false,nil:lng);
    C_73 := algebra.subinter(X_47,X_71,nil:BAT,nil:BAT,false,nil:lng);
    X_74 := algebra.leftfetchjoin(C_73,X_46);
    (X_75,r1_147,r2_147) := algebra.subsort(X_74,false,false);
    X_78 := algebra.leftfetchjoin(r1_147,X_74);
    X_79:bat[:oid,:str] := sql.bind(X_2,"sys","supplier","s_name",0);
    (C_81,r1_153) := sql.bind(X_2,"sys","supplier","s_name",2);
    X_83:bat[:oid,:str] := sql.bind(X_2,"sys","supplier","s_name",1);
    X_84 := sql.delta(X_79,C_81,r1_153,X_83);
    X_85:bat[:oid,:str] := algebra.leftfetchjoinPath(r1_147,C_73,X_42,C_3,X_84);
    X_86:bat[:oid,:str] := sql.bind(X_2,"sys","supplier","s_address",0);
    (C_88,r1_163) := sql.bind(X_2,"sys","supplier","s_address",2);
    X_90:bat[:oid,:str] := sql.bind(X_2,"sys","supplier","s_address",1);
    X_91 := sql.delta(X_86,C_88,r1_163,X_90);
    X_92:bat[:oid,:str] := algebra.leftfetchjoinPath(r1_147,C_73,X_42,C_3,X_91);
    X_93:bat[:oid,:str] := sql.bind(X_2,"sys","supplier","s_phone",0);
    (C_95,r1_173) := sql.bind(X_2,"sys","supplier","s_phone",2);
    X_97:bat[:oid,:str] := sql.bind(X_2,"sys","supplier","s_phone",1);
    X_98 := sql.delta(X_93,C_95,r1_173,X_97);
    X_99:bat[:oid,:str] := algebra.leftfetchjoinPath(r1_147,C_73,X_42,C_3,X_98);
    X_100:bat[:oid,:lng] := algebra.leftfetchjoinPath(r1_147,C_73,X_68);
    sql.resultSet(X_137,X_139,X_141,X_143,X_145,X_78,X_85,X_92,X_99,X_100);
end user.s3_1;
#drop view revenue0;

# 22:53:29 >  
# 22:53:29 >  "Done."
# 22:53:29 >  

