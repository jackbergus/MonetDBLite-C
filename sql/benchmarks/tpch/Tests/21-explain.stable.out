stdout of test '21-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:30 >  
# 22:53:30 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:30 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:31 >  
# 22:53:31 >  "/usr/bin/python2" "21-explain.SQL.py" "21-explain"
# 22:53:31 >  

#set optimizer = 'sequential_pipe';
#explain select
#	s_name,
#	count(*) as numwait
#from
#	supplier,
#	lineitem l1,
#	orders,
#	nation
#where
#	s_suppkey = l1.l_suppkey
#	and o_orderkey = l1.l_orderkey
#	and o_orderstatus = 'F'
#	and l1.l_receiptdate > l1.l_commitdate
#	and exists (
#		select
#			*
#		from
#			lineitem l2
#		where
#			l2.l_orderkey = l1.l_orderkey
#			and l2.l_suppkey <> l1.l_suppkey
#	)
#	and not exists (
#		select
#			*
#		from
#			lineitem l3
#		where
#			l3.l_orderkey = l1.l_orderkey
#			and l3.l_suppkey <> l1.l_suppkey
#			and l3.l_receiptdate > l3.l_commitdate
% .explain # table_name
% mal # name
% clob # type
% 811 # length
function user.s2_1{autoCommit=true}(A0:str,A1:str):void;
    X_216:void := querylog.define("explain select\n\ts_name,\n\tcount(*) as numwait\nfrom\n\tsupplier,\n\tlineitem l1,\n\torders,\n\tnation\nwhere\n\ts_suppkey = l1.l_suppkey\n\tand o_orderkey = l1.l_orderkey\n\tand o_orderstatus = \\'F\\'\n\tand l1.l_receiptdate > l1.l_commitdate\n\tand exists (\n\t\tselect\n\t\t\t*\n\t\tfrom\n\t\t\tlineitem l2\n\t\twhere\n\t\t\tl2.l_orderkey = l1.l_orderkey\n\t\t\tand l2.l_suppkey <> l1.l_suppkey\n\t)\n\tand not exists (\n\t\tselect\n\t\t\t*\n\t\tfrom\n\t\t\tlineitem l3\n\t\twhere\n\t\t\tl3.l_orderkey = l1.l_orderkey\n\t\t\tand l3.l_suppkey <> l1.l_suppkey\n\t\t\tand l3.l_receiptdate > l3.l_commitdate\n\t)\n\tand s_nationkey = n_nationkey\n\tand n_name = \\'SAUDI ARABIA\\'\ngroup by\n\ts_name\norder by\n\tnumwait desc,\n\ts_name\nlimit 100;","sequential_pipe",135);
    X_189 := bat.new(nil:oid,nil:str);
    X_197 := bat.append(X_189,"sys.supplier");
    X_207 := bat.append(X_197,"sys.L1");
    X_192 := bat.new(nil:oid,nil:str);
    X_199 := bat.append(X_192,"s_name");
    X_209 := bat.append(X_199,"numwait");
    X_193 := bat.new(nil:oid,nil:str);
    X_201 := bat.append(X_193,"char");
    X_211 := bat.append(X_201,"wrd");
    X_194 := bat.new(nil:oid,nil:int);
    X_203 := bat.append(X_194,25);
    X_213 := bat.append(X_203,64);
    X_196 := bat.new(nil:oid,nil:int);
    X_205 := bat.append(X_196,0);
    X_215 := bat.append(X_205,0);
    X_4 := sql.mvc();
    X_5:bat[:oid,:oid]  := sql.tid(X_4,"sys","lineitem");
    X_8:bat[:oid,:date]  := sql.bind(X_4,"sys","lineitem","l_receiptdate",0);
    (X_11,r1_11) := sql.bind(X_4,"sys","lineitem","l_receiptdate",2);
    X_14:bat[:oid,:date]  := sql.bind(X_4,"sys","lineitem","l_receiptdate",1);
    X_16 := sql.delta(X_8,X_11,r1_11,X_14);
    X_17 := algebra.leftfetchjoin(X_5,X_16);
    X_18:bat[:oid,:date]  := sql.bind(X_4,"sys","lineitem","l_commitdate",0);
    (X_20,r1_20) := sql.bind(X_4,"sys","lineitem","l_commitdate",2);
    X_22:bat[:oid,:date]  := sql.bind(X_4,"sys","lineitem","l_commitdate",1);
    X_23 := sql.delta(X_18,X_20,r1_20,X_22);
    X_24 := algebra.leftfetchjoin(X_5,X_23);
    X_25:bat[:oid,:bit]  := batcalc.>(X_17,X_24);
    X_26 := algebra.subselect(X_25,true,true,true,true,false);
    X_28:bat[:oid,:oid]  := sql.bind_idxbat(X_4,"sys","lineitem","lineitem_l_orderkey_fkey",0);
    (X_30,r1_32) := sql.bind_idxbat(X_4,"sys","lineitem","lineitem_l_orderkey_fkey",2);
    X_32:bat[:oid,:oid]  := sql.bind_idxbat(X_4,"sys","lineitem","lineitem_l_orderkey_fkey",1);
    X_33 := sql.delta(X_28,X_30,r1_32,X_32);
    X_34:bat[:oid,:oid] := algebra.leftfetchjoinPath(X_26,X_5,X_33);
    X_35:bat[:oid,:oid]  := sql.tid(X_4,"sys","orders");
    X_37:bat[:oid,:str] := sql.bind(X_4,"sys","orders","o_orderstatus",0);
    (X_39,r1_42) := sql.bind(X_4,"sys","orders","o_orderstatus",2);
    X_41:bat[:oid,:str] := sql.bind(X_4,"sys","orders","o_orderstatus",1);
    X_42 := sql.delta(X_37,X_39,r1_42,X_41);
    X_43 := algebra.leftfetchjoin(X_35,X_42);
    X_44 := algebra.subselect(X_43,A0,A0,true,true,false);
    X_47 := algebra.leftfetchjoin(X_44,X_35);
    (X_48,r1_52) := algebra.subjoin(X_34,X_47,nil:BAT,nil:BAT,false,nil:lng);
    X_53:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_suppkey",0);
    (X_55,r1_59) := sql.bind(X_4,"sys","lineitem","l_suppkey",2);
    X_57:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_suppkey",1);
    X_58 := sql.delta(X_53,X_55,r1_59,X_57);
    X_59:bat[:oid,:int] := algebra.leftfetchjoinPath(X_48,X_26,X_5,X_58);
    X_60:bat[:oid,:oid] := sql.tid(X_4,"sys","supplier");
    X_62:bat[:oid,:int] := sql.bind(X_4,"sys","supplier","s_suppkey",0);
    (X_64,r1_70) := sql.bind(X_4,"sys","supplier","s_suppkey",2);
    X_66:bat[:oid,:int] := sql.bind(X_4,"sys","supplier","s_suppkey",1);
    X_67 := sql.delta(X_62,X_64,r1_70,X_66);
    X_68 := algebra.leftfetchjoin(X_60,X_67);
    (X_69,r1_75) := algebra.subjoin(X_59,X_68,nil:BAT,nil:BAT,false,nil:lng);
    X_72:bat[:oid,:oid] := sql.bind_idxbat(X_4,"sys","supplier","supplier_s_nationkey_fkey",0);
    (X_74,r1_80) := sql.bind_idxbat(X_4,"sys","supplier","supplier_s_nationkey_fkey",2);
    X_76:bat[:oid,:oid] := sql.bind_idxbat(X_4,"sys","supplier","supplier_s_nationkey_fkey",1);
    X_77 := sql.delta(X_72,X_74,r1_80,X_76);
    X_78:bat[:oid,:oid] := algebra.leftfetchjoinPath(r1_75,X_60,X_77);
    X_79:bat[:oid,:oid] := sql.tid(X_4,"sys","nation");
    X_81:bat[:oid,:str] := sql.bind(X_4,"sys","nation","n_name",0);
    (X_83,r1_90) := sql.bind(X_4,"sys","nation","n_name",2);
    X_85:bat[:oid,:str] := sql.bind(X_4,"sys","nation","n_name",1);
    X_86 := sql.delta(X_81,X_83,r1_90,X_85);
    X_87 := algebra.leftfetchjoin(X_79,X_86);
    X_88 := algebra.subselect(X_87,A1,A1,true,true,false);
    X_91 := algebra.leftfetchjoin(X_88,X_79);
    (X_92,r1_100) := algebra.subjoin(X_78,X_91,nil:BAT,nil:BAT,false,nil:lng);
    X_97:bat[:oid,:int] := algebra.leftfetchjoinPath(X_92,r1_75,X_68);
    X_98 := bat.mirror(X_97);
    X_99:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_orderkey",0);
    (X_101,r1_110) := sql.bind(X_4,"sys","lineitem","l_orderkey",2);
    X_103:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_orderkey",1);
    X_104 := sql.delta(X_99,X_101,r1_110,X_103);
    X_105:bat[:oid,:int] := algebra.leftfetchjoinPath(X_92,X_69,X_48,X_26,X_5,X_104);
    X_106:bat[:oid,:oid] := sql.tid(X_4,"sys","lineitem");
    X_108 := algebra.leftfetchjoin(X_106,X_104);
    (X_109,r1_127) := algebra.subjoin(X_105,X_108,nil:BAT,nil:BAT,false,nil:lng);
    X_112:bat[:oid,:int] := algebra.leftfetchjoinPath(r1_127,X_106,X_58);
    X_113:bat[:oid,:int] := algebra.leftfetchjoinPath(X_92,X_69,X_59);
    X_114 := algebra.leftfetchjoin(X_109,X_113);
    X_115:bat[:oid,:bit] := batcalc.!=(X_112,X_114);
    X_116 := algebra.subselect(X_115,true,true,true,true,false);
    X_119 := algebra.leftfetchjoin(X_116,X_109);
    X_120 := algebra.tinter(X_98,X_119);
    X_121 := algebra.leftfetchjoin(X_120,X_97);
    X_122 := bat.mirror(X_121);
    X_123 := algebra.leftfetchjoin(X_120,X_105);
    X_124:bat[:oid,:date] := sql.bind(X_4,"sys","lineitem","l_receiptdate",0);
    (X_125,r1_153) := sql.bind(X_4,"sys","lineitem","l_receiptdate",2);
    X_127:bat[:oid,:date] := sql.bind(X_4,"sys","lineitem","l_receiptdate",1);
    X_128 := sql.delta(X_124,X_125,r1_153,X_127);
    X_129 := algebra.leftfetchjoin(X_106,X_128);
    X_130:bat[:oid,:date] := sql.bind(X_4,"sys","lineitem","l_commitdate",0);
    (X_131,r1_159) := sql.bind(X_4,"sys","lineitem","l_commitdate",2);
    X_133:bat[:oid,:date] := sql.bind(X_4,"sys","lineitem","l_commitdate",1);
    X_134 := sql.delta(X_130,X_131,r1_159,X_133);
    X_135 := algebra.leftfetchjoin(X_106,X_134);
    X_136:bat[:oid,:bit] := batcalc.>(X_129,X_135);
    X_137 := algebra.subselect(X_136,true,true,true,true,false);
    X_139 := algebra.leftfetchjoin(X_137,X_108);
    (X_140,r1_175) := algebra.subjoin(X_123,X_139,nil:BAT,nil:BAT,false,nil:lng);
    X_145:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_suppkey",0);
    (X_146,r1_181) := sql.bind(X_4,"sys","lineitem","l_suppkey",2);
    X_148:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_suppkey",1);
    X_149 := sql.delta(X_145,X_146,r1_181,X_148);
    X_150:bat[:oid,:int] := algebra.leftfetchjoinPath(r1_175,X_137,X_106,X_149);
    X_151:bat[:oid,:int] := algebra.leftfetchjoinPath(X_140,X_120,X_113);
    X_152:bat[:oid,:bit] := batcalc.!=(X_150,X_151);
    X_153 := algebra.subselect(X_152,true,true,true,true,false);
    X_156 := algebra.leftfetchjoin(X_153,X_140);
    X_157 := algebra.tdiff(X_122,X_156);
    X_158:bat[:oid,:str] := sql.bind(X_4,"sys","supplier","s_name",0);
    (X_160,r1_200) := sql.bind(X_4,"sys","supplier","s_name",2);
    X_162:bat[:oid,:str] := sql.bind(X_4,"sys","supplier","s_name",1);
    X_163 := sql.delta(X_158,X_160,r1_200,X_162);
    X_164:bat[:oid,:str] := algebra.leftfetchjoinPath(X_157,X_120,X_92,r1_75,X_60,X_163);
    (X_165,r1_209,r2_209) := group.subgroupdone(X_164);
    X_168 := algebra.leftfetchjoin(r1_209,X_164);
    X_169:bat[:oid,:wrd] := aggr.subcount(X_165,X_165,r1_209,false);
    (X_172,r1_220) := algebra.firstn(X_169,100:wrd,false,false);
    X_174 := algebra.firstn(X_168,X_172,r1_220,100:wrd,true,false);
    X_175 := algebra.leftfetchjoin(X_174,X_168);
    X_176 := algebra.leftfetchjoin(X_174,X_169);
    (X_177,r1_227,r2_227) := algebra.subsort(X_176,true,false);
    (X_181,r1_231,r2_231) := algebra.subsort(X_175,r1_227,r2_227,false,false);
    X_184 := algebra.leftfetchjoin(r1_231,X_175);
    X_185 := algebra.subslice(X_184,0,99:wrd);
    X_186 := algebra.leftfetchjoin(X_185,X_184);
    X_187:bat[:oid,:wrd] := algebra.leftfetchjoinPath(X_185,r1_231,X_176);
    sql.resultSet(X_207,X_209,X_211,X_213,X_215,X_186,X_187);
end user.s2_1;

# 22:53:31 >  
# 22:53:31 >  "Done."
# 22:53:31 >  

