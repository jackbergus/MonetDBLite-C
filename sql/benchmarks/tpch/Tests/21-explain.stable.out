stdout of test '21-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:30 >  
# 22:53:30 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:30 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:31 >  
# 22:53:31 >  "/usr/bin/python2" "21-explain.SQL.py" "21-explain"
# 22:53:31 >  

#set optimizer = 'sequential_pipe';
#explain select
#	s_name,
#	count(*) as numwait
#from
#	supplier,
#	lineitem l1,
#	orders,
#	nation
#where
#	s_suppkey = l1.l_suppkey
#	and o_orderkey = l1.l_orderkey
#	and o_orderstatus = 'F'
#	and l1.l_receiptdate > l1.l_commitdate
#	and exists (
#		select
#			*
#		from
#			lineitem l2
#		where
#			l2.l_orderkey = l1.l_orderkey
#			and l2.l_suppkey <> l1.l_suppkey
#	)
#	and not exists (
#		select
#			*
#		from
#			lineitem l3
#		where
#			l3.l_orderkey = l1.l_orderkey
#			and l3.l_suppkey <> l1.l_suppkey
#			and l3.l_receiptdate > l3.l_commitdate
% .explain # table_name
% mal # name
% clob # type
% 728 # length
function user.s2_1():void;
    X_145:void := querylog.define("explain select\n s_name,\n count(*) as numwait\nfrom\n supplier,\n lineitem l1,\n orders,\n nation\nwhere\n s_suppkey = l1.l_suppkey\n and o_orderkey = l1.l_orderkey\n and o_orderstatus = \\'F\\'\n and l1.l_receiptdate > l1.l_commitdate\n and exists (\n select\n *\n from\n lineitem l2\n where\n l2.l_orderkey = l1.l_orderkey\n and l2.l_suppkey <> l1.l_suppkey\n )\n and not exists (\n select\n *\n from\n lineitem l3\n where\n l3.l_orderkey = l1.l_orderkey\n and l3.l_suppkey <> l1.l_suppkey\n and l3.l_receiptdate > l3.l_commitdate\n )\n and s_nationkey = n_nationkey\n and n_name = \\'SAUDI ARABIA\\'\ngroup by\n s_name\norder by\n numwait desc,\n s_name\nlimit 100;","sequential_pipe",97);
    X_120 := bat.new(nil:oid,nil:str);
    X_128 := bat.append(X_120,"sys.supplier");
    X_136 := bat.append(X_128,"sys.L1");
    X_123 := bat.new(nil:oid,nil:str);
    X_130 := bat.append(X_123,"s_name");
    X_138 := bat.append(X_130,"numwait");
    X_124 := bat.new(nil:oid,nil:str);
    X_131 := bat.append(X_124,"char");
    X_140 := bat.append(X_131,"wrd");
    X_125 := bat.new(nil:oid,nil:int);
    X_133 := bat.append(X_125,25);
    X_142 := bat.append(X_133,64);
    X_127 := bat.new(nil:oid,nil:int);
    X_135 := bat.append(X_127,0);
    X_144 := bat.append(X_135,0);
    X_3 := sql.mvc();
    C_4:bat[:oid] := sql.tid(X_3,"sys","lineitem");
    X_7:bat[:date] := sql.bind(X_3,"sys","lineitem","l_receiptdate",0);
    X_12 := algebra.projection(C_4,X_7);
    X_13:bat[:date] := sql.bind(X_3,"sys","lineitem","l_commitdate",0);
    X_15 := algebra.projection(C_4,X_13);
    X_16:bat[:bit] := batcalc.>(X_12,X_15);
    C_17 := algebra.subselect(X_16,true,true,true,true,false);
    X_20:bat[:oid] := sql.bind_idxbat(X_3,"sys","lineitem","lineitem_l_orderkey_fkey",0);
    (X_22,r1_33) := sql.bind_idxbat(X_3,"sys","lineitem","lineitem_l_orderkey_fkey",2);
    X_24:bat[:oid] := sql.bind_idxbat(X_3,"sys","lineitem","lineitem_l_orderkey_fkey",1);
    X_25 := sql.delta(X_20,X_22,r1_33,X_24);
    X_26:bat[:oid] := algebra.projectionpath(C_17,C_4,X_25);
    C_27:bat[:oid] := sql.tid(X_3,"sys","orders");
    X_29:bat[:str] := sql.bind(X_3,"sys","orders","o_orderstatus",0);
    X_31 := algebra.projection(C_27,X_29);
    C_32 := algebra.subselect(X_31,"F","F",true,false,false);
    X_33 := algebra.projection(C_32,C_27);
    (X_34,r1_51) := algebra.subjoin(X_26,X_33,nil:BAT,nil:BAT,false,nil:lng);
    X_38:bat[:int] := sql.bind(X_3,"sys","lineitem","l_suppkey",0);
    X_40 := algebra.projection(C_4,X_38);
    X_41 := algebra.projection(C_17,X_40);
    X_42 := algebra.projection(X_34,X_41);
    C_43:bat[:oid] := sql.tid(X_3,"sys","supplier");
    X_45:bat[:int] := sql.bind(X_3,"sys","supplier","s_suppkey",0);
    X_47 := algebra.projection(C_43,X_45);
    (X_48,r1_74) := algebra.subjoin(X_42,X_47,nil:BAT,nil:BAT,false,nil:lng);
    X_50:bat[:oid] := sql.bind_idxbat(X_3,"sys","supplier","supplier_s_nationkey_fkey",0);
    (X_52,r1_79) := sql.bind_idxbat(X_3,"sys","supplier","supplier_s_nationkey_fkey",2);
    X_54:bat[:oid] := sql.bind_idxbat(X_3,"sys","supplier","supplier_s_nationkey_fkey",1);
    X_55 := sql.delta(X_50,X_52,r1_79,X_54);
    X_56:bat[:oid] := algebra.projectionpath(r1_74,C_43,X_55);
    C_57:bat[:oid] := sql.tid(X_3,"sys","nation");
    X_59:bat[:str] := sql.bind(X_3,"sys","nation","n_name",0);
    X_61 := algebra.projection(C_57,X_59);
    C_62 := algebra.subselect(X_61,"SAUDI ARABIA","SAUDI ARABIA",true,false,false);
    X_63 := algebra.projection(C_62,C_57);
    (X_64,r1_98) := algebra.subjoin(X_56,X_63,nil:BAT,nil:BAT,false,nil:lng);
    X_66:bat[:int] := algebra.projectionpath(X_64,r1_74,X_47);
    X_67 := bat.mirror(X_66);
    X_68:bat[:int] := sql.bind(X_3,"sys","lineitem","l_orderkey",0);
    X_70 := algebra.projection(C_4,X_68);
    X_71 := algebra.projection(C_17,X_70);
    X_72:bat[:int] := algebra.projectionpath(X_64,X_48,X_34,X_71);
    (X_73,r1_125) := algebra.subjoin(X_72,X_70,nil:BAT,nil:BAT,false,nil:lng);
    X_75 := algebra.projection(r1_125,X_40);
    X_76:bat[:int] := algebra.projectionpath(X_64,X_48,X_42);
    X_77 := algebra.projection(X_73,X_76);
    X_78:bat[:bit] := batcalc.!=(X_75,X_77);
    C_79 := algebra.subselect(X_78,true,true,true,true,false);
    X_80 := algebra.projection(C_79,X_73);
    C_81 := algebra.subinter(X_67,X_80,nil:BAT,nil:BAT,false,nil:lng);
    X_82 := algebra.projection(C_81,X_66);
    X_83 := bat.mirror(X_82);
    X_84 := algebra.projection(C_81,X_72);
    (X_85,r1_177) := algebra.subjoin(X_84,X_71,nil:BAT,nil:BAT,false,nil:lng);
    X_87 := algebra.projection(r1_177,X_41);
    X_88:bat[:int] := algebra.projectionpath(X_85,C_81,X_76);
    X_89:bat[:bit] := batcalc.!=(X_87,X_88);
    C_90 := algebra.subselect(X_89,true,true,true,true,false);
    X_91 := algebra.projection(C_90,X_85);
    X_92 := algebra.subdiff(X_83,X_91,nil:BAT,nil:BAT,false,nil:lng);
    X_93:bat[:str] := sql.bind(X_3,"sys","supplier","s_name",0);
    X_95:bat[:str] := algebra.projectionpath(X_92,C_81,X_64,r1_74,C_43,X_93);
    (X_96,r1_211,r2_211) := group.subgroupdone(X_95);
    X_99 := algebra.projection(r1_211,X_95);
    X_101:bat[:wrd] := aggr.subcount(X_96,X_96,r1_211,false);
    X_100 := bat.setKey(X_99,true);
    (C_104,r1_223) := algebra.firstn(X_101,100,false,false);
    C_106 := algebra.firstn(X_100,C_104,r1_223,100,true,false);
    X_107 := algebra.projection(C_106,X_100);
    X_108 := algebra.projection(C_106,X_101);
    (X_109,r1_231,r2_231) := algebra.subsort(X_108,true,false);
    (X_112,r1_234,r2_234) := algebra.subsort(X_107,r1_231,r2_231,false,false);
    X_115 := algebra.projection(r1_234,X_107);
    X_116 := algebra.subslice(X_115,0,99:wrd);
    X_117 := algebra.projection(X_116,X_115);
    X_118:bat[:wrd] := algebra.projectionpath(X_116,r1_234,X_108);
    sql.resultSet(X_136,X_138,X_140,X_142,X_144,X_117,X_118);
end user.s2_1;

# 22:53:31 >  
# 22:53:31 >  "Done."
# 22:53:31 >  

