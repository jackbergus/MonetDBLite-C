stdout of test '21-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:30 >  
# 22:53:30 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:30 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:31 >  
# 22:53:31 >  "/usr/bin/python2" "21-explain.SQL.py" "21-explain"
# 22:53:31 >  

#set optimizer = 'sequential_pipe';
#explain select
#	s_name,
#	count(*) as numwait
#from
#	supplier,
#	lineitem l1,
#	orders,
#	nation
#where
#	s_suppkey = l1.l_suppkey
#	and o_orderkey = l1.l_orderkey
#	and o_orderstatus = 'F'
#	and l1.l_receiptdate > l1.l_commitdate
#	and exists (
#		select
#			*
#		from
#			lineitem l2
#		where
#			l2.l_orderkey = l1.l_orderkey
#			and l2.l_suppkey <> l1.l_suppkey
#	)
#	and not exists (
#		select
#			*
#		from
#			lineitem l3
#		where
#			l3.l_orderkey = l1.l_orderkey
#			and l3.l_suppkey <> l1.l_suppkey
#			and l3.l_receiptdate > l3.l_commitdate
% .explain # table_name
% mal # name
% clob # type
% 811 # length
function user.s2_1{autoCommit=true}(A0:str,A1:str):void;
    X_214:void := querylog.define("explain select\n\ts_name,\n\tcount(*) as numwait\nfrom\n\tsupplier,\n\tlineitem l1,\n\torders,\n\tnation\nwhere\n\ts_suppkey = l1.l_suppkey\n\tand o_orderkey = l1.l_orderkey\n\tand o_orderstatus = \\'F\\'\n\tand l1.l_receiptdate > l1.l_commitdate\n\tand exists (\n\t\tselect\n\t\t\t*\n\t\tfrom\n\t\t\tlineitem l2\n\t\twhere\n\t\t\tl2.l_orderkey = l1.l_orderkey\n\t\t\tand l2.l_suppkey <> l1.l_suppkey\n\t)\n\tand not exists (\n\t\tselect\n\t\t\t*\n\t\tfrom\n\t\t\tlineitem l3\n\t\twhere\n\t\t\tl3.l_orderkey = l1.l_orderkey\n\t\t\tand l3.l_suppkey <> l1.l_suppkey\n\t\t\tand l3.l_receiptdate > l3.l_commitdate\n\t)\n\tand s_nationkey = n_nationkey\n\tand n_name = \\'SAUDI ARABIA\\'\ngroup by\n\ts_name\norder by\n\tnumwait desc,\n\ts_name\nlimit 100;","sequential_pipe",135);
    X_187 := bat.new(nil:oid,nil:str);
    X_195 := bat.append(X_187,"sys.supplier");
    X_205 := bat.append(X_195,"sys.L1");
    X_190 := bat.new(nil:oid,nil:str);
    X_197 := bat.append(X_190,"s_name");
    X_207 := bat.append(X_197,"numwait");
    X_191 := bat.new(nil:oid,nil:str);
    X_199 := bat.append(X_191,"char");
    X_209 := bat.append(X_199,"wrd");
    X_192 := bat.new(nil:oid,nil:int);
    X_201 := bat.append(X_192,25);
    X_211 := bat.append(X_201,64);
    X_194 := bat.new(nil:oid,nil:int);
    X_203 := bat.append(X_194,0);
    X_213 := bat.append(X_203,0);
    X_4 := sql.mvc();
    X_5:bat[:oid,:oid]  := sql.tid(X_4,"sys","lineitem");
    X_8:bat[:oid,:date]  := sql.bind(X_4,"sys","lineitem","l_receiptdate",0);
    (X_11,r1_11) := sql.bind(X_4,"sys","lineitem","l_receiptdate",2);
    X_14:bat[:oid,:date]  := sql.bind(X_4,"sys","lineitem","l_receiptdate",1);
    X_16 := sql.delta(X_8,X_11,r1_11,X_14);
    X_17 := algebra.leftfetchjoin(X_5,X_16);
    X_18:bat[:oid,:date]  := sql.bind(X_4,"sys","lineitem","l_commitdate",0);
    (X_20,r1_20) := sql.bind(X_4,"sys","lineitem","l_commitdate",2);
    X_22:bat[:oid,:date]  := sql.bind(X_4,"sys","lineitem","l_commitdate",1);
    X_23 := sql.delta(X_18,X_20,r1_20,X_22);
    X_24 := algebra.leftfetchjoin(X_5,X_23);
    X_25:bat[:oid,:bit]  := batcalc.>(X_17,X_24);
    X_26 := algebra.subselect(X_25,true,true,true,true,false);
    X_28:bat[:oid,:oid]  := sql.bind_idxbat(X_4,"sys","lineitem","lineitem_l_orderkey_fkey",0);
    (X_30,r1_32) := sql.bind_idxbat(X_4,"sys","lineitem","lineitem_l_orderkey_fkey",2);
    X_32:bat[:oid,:oid]  := sql.bind_idxbat(X_4,"sys","lineitem","lineitem_l_orderkey_fkey",1);
    X_33 := sql.delta(X_28,X_30,r1_32,X_32);
    X_34:bat[:oid,:oid] := algebra.leftfetchjoinPath(X_26,X_5,X_33);
    X_35:bat[:oid,:oid]  := sql.tid(X_4,"sys","orders");
    X_37:bat[:oid,:str] := sql.bind(X_4,"sys","orders","o_orderstatus",0);
    (X_39,r1_42) := sql.bind(X_4,"sys","orders","o_orderstatus",2);
    X_41:bat[:oid,:str] := sql.bind(X_4,"sys","orders","o_orderstatus",1);
    X_42 := sql.delta(X_37,X_39,r1_42,X_41);
    X_43 := algebra.leftfetchjoin(X_35,X_42);
    X_44 := algebra.subselect(X_43,A0,A0,true,false,false);
    X_46 := algebra.leftfetchjoin(X_44,X_35);
    (X_47,r1_51) := algebra.subjoin(X_34,X_46,nil:BAT,nil:BAT,false,nil:lng);
    X_52:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_suppkey",0);
    (X_54,r1_58) := sql.bind(X_4,"sys","lineitem","l_suppkey",2);
    X_56:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_suppkey",1);
    X_57 := sql.delta(X_52,X_54,r1_58,X_56);
    X_58:bat[:oid,:int] := algebra.leftfetchjoinPath(X_47,X_26,X_5,X_57);
    X_59:bat[:oid,:oid] := sql.tid(X_4,"sys","supplier");
    X_61:bat[:oid,:int] := sql.bind(X_4,"sys","supplier","s_suppkey",0);
    (X_63,r1_69) := sql.bind(X_4,"sys","supplier","s_suppkey",2);
    X_65:bat[:oid,:int] := sql.bind(X_4,"sys","supplier","s_suppkey",1);
    X_66 := sql.delta(X_61,X_63,r1_69,X_65);
    X_67 := algebra.leftfetchjoin(X_59,X_66);
    (X_68,r1_74) := algebra.subjoin(X_58,X_67,nil:BAT,nil:BAT,false,nil:lng);
    X_71:bat[:oid,:oid] := sql.bind_idxbat(X_4,"sys","supplier","supplier_s_nationkey_fkey",0);
    (X_73,r1_79) := sql.bind_idxbat(X_4,"sys","supplier","supplier_s_nationkey_fkey",2);
    X_75:bat[:oid,:oid] := sql.bind_idxbat(X_4,"sys","supplier","supplier_s_nationkey_fkey",1);
    X_76 := sql.delta(X_71,X_73,r1_79,X_75);
    X_77:bat[:oid,:oid] := algebra.leftfetchjoinPath(r1_74,X_59,X_76);
    X_78:bat[:oid,:oid] := sql.tid(X_4,"sys","nation");
    X_80:bat[:oid,:str] := sql.bind(X_4,"sys","nation","n_name",0);
    (X_82,r1_89) := sql.bind(X_4,"sys","nation","n_name",2);
    X_84:bat[:oid,:str] := sql.bind(X_4,"sys","nation","n_name",1);
    X_85 := sql.delta(X_80,X_82,r1_89,X_84);
    X_86 := algebra.leftfetchjoin(X_78,X_85);
    X_87 := algebra.subselect(X_86,A1,A1,true,false,false);
    X_89 := algebra.leftfetchjoin(X_87,X_78);
    (X_90,r1_98) := algebra.subjoin(X_77,X_89,nil:BAT,nil:BAT,false,nil:lng);
    X_95:bat[:oid,:int] := algebra.leftfetchjoinPath(X_90,r1_74,X_67);
    X_96 := bat.mirror(X_95);
    X_97:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_orderkey",0);
    (X_99,r1_108) := sql.bind(X_4,"sys","lineitem","l_orderkey",2);
    X_101:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_orderkey",1);
    X_102 := sql.delta(X_97,X_99,r1_108,X_101);
    X_103:bat[:oid,:int] := algebra.leftfetchjoinPath(X_90,X_68,X_47,X_26,X_5,X_102);
    X_104:bat[:oid,:oid] := sql.tid(X_4,"sys","lineitem");
    X_106 := algebra.leftfetchjoin(X_104,X_102);
    (X_107,r1_125) := algebra.subjoin(X_103,X_106,nil:BAT,nil:BAT,false,nil:lng);
    X_110:bat[:oid,:int] := algebra.leftfetchjoinPath(r1_125,X_104,X_57);
    X_111:bat[:oid,:int] := algebra.leftfetchjoinPath(X_90,X_68,X_58);
    X_112 := algebra.leftfetchjoin(X_107,X_111);
    X_113:bat[:oid,:bit] := batcalc.!=(X_110,X_112);
    X_114 := algebra.subselect(X_113,true,true,true,true,false);
    X_117 := algebra.leftfetchjoin(X_114,X_107);
    X_118 := algebra.tinter(X_96,X_117);
    X_119 := algebra.leftfetchjoin(X_118,X_95);
    X_120 := bat.mirror(X_119);
    X_121 := algebra.leftfetchjoin(X_118,X_103);
    X_122:bat[:oid,:date] := sql.bind(X_4,"sys","lineitem","l_receiptdate",0);
    (X_123,r1_151) := sql.bind(X_4,"sys","lineitem","l_receiptdate",2);
    X_125:bat[:oid,:date] := sql.bind(X_4,"sys","lineitem","l_receiptdate",1);
    X_126 := sql.delta(X_122,X_123,r1_151,X_125);
    X_127 := algebra.leftfetchjoin(X_104,X_126);
    X_128:bat[:oid,:date] := sql.bind(X_4,"sys","lineitem","l_commitdate",0);
    (X_129,r1_157) := sql.bind(X_4,"sys","lineitem","l_commitdate",2);
    X_131:bat[:oid,:date] := sql.bind(X_4,"sys","lineitem","l_commitdate",1);
    X_132 := sql.delta(X_128,X_129,r1_157,X_131);
    X_133 := algebra.leftfetchjoin(X_104,X_132);
    X_134:bat[:oid,:bit] := batcalc.>(X_127,X_133);
    X_135 := algebra.subselect(X_134,true,true,true,true,false);
    X_137 := algebra.leftfetchjoin(X_135,X_106);
    (X_138,r1_173) := algebra.subjoin(X_121,X_137,nil:BAT,nil:BAT,false,nil:lng);
    X_143:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_suppkey",0);
    (X_144,r1_179) := sql.bind(X_4,"sys","lineitem","l_suppkey",2);
    X_146:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_suppkey",1);
    X_147 := sql.delta(X_143,X_144,r1_179,X_146);
    X_148:bat[:oid,:int] := algebra.leftfetchjoinPath(r1_173,X_135,X_104,X_147);
    X_149:bat[:oid,:int] := algebra.leftfetchjoinPath(X_138,X_118,X_111);
    X_150:bat[:oid,:bit] := batcalc.!=(X_148,X_149);
    X_151 := algebra.subselect(X_150,true,true,true,true,false);
    X_154 := algebra.leftfetchjoin(X_151,X_138);
    X_155 := algebra.tdiff(X_120,X_154);
    X_156:bat[:oid,:str] := sql.bind(X_4,"sys","supplier","s_name",0);
    (X_158,r1_198) := sql.bind(X_4,"sys","supplier","s_name",2);
    X_160:bat[:oid,:str] := sql.bind(X_4,"sys","supplier","s_name",1);
    X_161 := sql.delta(X_156,X_158,r1_198,X_160);
    X_162:bat[:oid,:str] := algebra.leftfetchjoinPath(X_155,X_118,X_90,r1_74,X_59,X_161);
    (X_163,r1_207,r2_207) := group.subgroupdone(X_162);
    X_166 := algebra.leftfetchjoin(r1_207,X_162);
    X_167:bat[:oid,:wrd] := aggr.subcount(X_163,X_163,r1_207,false);
    (X_170,r1_218) := algebra.firstn(X_167,100:wrd,false,false);
    X_172 := algebra.firstn(X_166,X_170,r1_218,100:wrd,true,false);
    X_173 := algebra.leftfetchjoin(X_172,X_166);
    X_174 := algebra.leftfetchjoin(X_172,X_167);
    (X_175,r1_225,r2_225) := algebra.subsort(X_174,true,false);
    (X_179,r1_229,r2_229) := algebra.subsort(X_173,r1_225,r2_225,false,false);
    X_182 := algebra.leftfetchjoin(r1_229,X_173);
    X_183 := algebra.subslice(X_182,0,99:wrd);
    X_184 := algebra.leftfetchjoin(X_183,X_182);
    X_185:bat[:oid,:wrd] := algebra.leftfetchjoinPath(X_183,r1_229,X_174);
    sql.resultSet(X_205,X_207,X_209,X_211,X_213,X_184,X_185);
end user.s2_1;

# 22:53:31 >  
# 22:53:31 >  "Done."
# 22:53:31 >  

