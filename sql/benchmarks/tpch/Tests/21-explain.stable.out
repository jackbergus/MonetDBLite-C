stdout of test '21-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:30 >  
# 22:53:30 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:30 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:31 >  
# 22:53:31 >  "/usr/bin/python2" "21-explain.SQL.py" "21-explain"
# 22:53:31 >  

#set optimizer = 'sequential_pipe';
#explain select
#	s_name,
#	count(*) as numwait
#from
#	supplier,
#	lineitem l1,
#	orders,
#	nation
#where
#	s_suppkey = l1.l_suppkey
#	and o_orderkey = l1.l_orderkey
#	and o_orderstatus = 'F'
#	and l1.l_receiptdate > l1.l_commitdate
#	and exists (
#		select
#			*
#		from
#			lineitem l2
#		where
#			l2.l_orderkey = l1.l_orderkey
#			and l2.l_suppkey <> l1.l_suppkey
#	)
#	and not exists (
#		select
#			*
#		from
#			lineitem l3
#		where
#			l3.l_orderkey = l1.l_orderkey
#			and l3.l_suppkey <> l1.l_suppkey
#			and l3.l_receiptdate > l3.l_commitdate
% .explain # table_name
% mal # name
% clob # type
% 811 # length
function user.s2_1{autoCommit=true}(A0:str,A1:str):void;
    X_225:void := querylog.define("explain select\n\ts_name,\n\tcount(*) as numwait\nfrom\n\tsupplier,\n\tlineitem l1,\n\torders,\n\tnation\nwhere\n\ts_suppkey = l1.l_suppkey\n\tand o_orderkey = l1.l_orderkey\n\tand o_orderstatus = \\'F\\'\n\tand l1.l_receiptdate > l1.l_commitdate\n\tand exists (\n\t\tselect\n\t\t\t*\n\t\tfrom\n\t\t\tlineitem l2\n\t\twhere\n\t\t\tl2.l_orderkey = l1.l_orderkey\n\t\t\tand l2.l_suppkey <> l1.l_suppkey\n\t)\n\tand not exists (\n\t\tselect\n\t\t\t*\n\t\tfrom\n\t\t\tlineitem l3\n\t\twhere\n\t\t\tl3.l_orderkey = l1.l_orderkey\n\t\t\tand l3.l_suppkey <> l1.l_suppkey\n\t\t\tand l3.l_receiptdate > l3.l_commitdate\n\t)\n\tand s_nationkey = n_nationkey\n\tand n_name = \\'SAUDI ARABIA\\'\ngroup by\n\ts_name\norder by\n\tnumwait desc,\n\ts_name\nlimit 100;","sequential_pipe",135);
    X_198 := bat.new(nil:oid,nil:str);
    X_206 := bat.append(X_198,"sys.supplier");
    X_216 := bat.append(X_206,"sys.L1");
    X_201 := bat.new(nil:oid,nil:str);
    X_208 := bat.append(X_201,"s_name");
    X_218 := bat.append(X_208,"numwait");
    X_202 := bat.new(nil:oid,nil:str);
    X_210 := bat.append(X_202,"char");
    X_220 := bat.append(X_210,"wrd");
    X_203 := bat.new(nil:oid,nil:int);
    X_212 := bat.append(X_203,25);
    X_222 := bat.append(X_212,64);
    X_205 := bat.new(nil:oid,nil:int);
    X_214 := bat.append(X_205,0);
    X_224 := bat.append(X_214,0);
    X_4 := sql.mvc();
    X_5:bat[:oid,:oid]  := sql.tid(X_4,"sys","lineitem");
    X_8:bat[:oid,:date]  := sql.bind(X_4,"sys","lineitem","l_receiptdate",0);
    (X_11,r1_11) := sql.bind(X_4,"sys","lineitem","l_receiptdate",2);
    X_14:bat[:oid,:date]  := sql.bind(X_4,"sys","lineitem","l_receiptdate",1);
    X_16 := sql.delta(X_8,X_11,r1_11,X_14);
    X_17 := algebra.leftfetchjoin(X_5,X_16);
    X_18:bat[:oid,:date]  := sql.bind(X_4,"sys","lineitem","l_commitdate",0);
    (X_20,r1_20) := sql.bind(X_4,"sys","lineitem","l_commitdate",2);
    X_22:bat[:oid,:date]  := sql.bind(X_4,"sys","lineitem","l_commitdate",1);
    X_23 := sql.delta(X_18,X_20,r1_20,X_22);
    X_24 := algebra.leftfetchjoin(X_5,X_23);
    X_25:bat[:oid,:bit]  := batcalc.>(X_17,X_24);
    X_26 := algebra.subselect(X_25,true,true,true,true,false);
    X_28:bat[:oid,:oid]  := sql.bind_idxbat(X_4,"sys","lineitem","lineitem_l_orderkey_fkey",0);
    (X_30,r1_32) := sql.bind_idxbat(X_4,"sys","lineitem","lineitem_l_orderkey_fkey",2);
    X_32:bat[:oid,:oid]  := sql.bind_idxbat(X_4,"sys","lineitem","lineitem_l_orderkey_fkey",1);
    X_33 := sql.delta(X_28,X_30,r1_32,X_32);
    X_34:bat[:oid,:oid] := algebra.leftfetchjoinPath(X_26,X_5,X_33);
    X_35:bat[:oid,:oid]  := sql.tid(X_4,"sys","orders");
    X_38:bat[:oid,:str]  := sql.bind(X_4,"sys","orders","o_orderstatus",0);
    (X_41,r1_44) := sql.bind(X_4,"sys","orders","o_orderstatus",2);
    X_44:bat[:oid,:str]  := sql.bind(X_4,"sys","orders","o_orderstatus",1);
    X_46 := sql.delta(X_38,X_41,r1_44,X_44);
    X_47 := algebra.leftfetchjoin(X_35,X_46);
    X_48 := algebra.subselect(X_47,A0,A0,true,true,false);
    X_50 := algebra.leftfetchjoin(X_48,X_35);
    (X_51,r1_55) := algebra.subjoin(X_34,X_50,nil:BAT,nil:BAT,false,nil:lng);
    X_55:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_suppkey",0);
    (X_58,r1_62) := sql.bind(X_4,"sys","lineitem","l_suppkey",2);
    X_60:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_suppkey",1);
    X_61 := sql.delta(X_55,X_58,r1_62,X_60);
    X_62:bat[:oid,:int] := algebra.leftfetchjoinPath(X_51,X_26,X_5,X_61);
    X_63:bat[:oid,:oid]  := sql.tid(X_4,"sys","supplier");
    X_65:bat[:oid,:int] := sql.bind(X_4,"sys","supplier","s_suppkey",0);
    (X_68,r1_74) := sql.bind(X_4,"sys","supplier","s_suppkey",2);
    X_70:bat[:oid,:int] := sql.bind(X_4,"sys","supplier","s_suppkey",1);
    X_71 := sql.delta(X_65,X_68,r1_74,X_70);
    X_72 := algebra.leftfetchjoin(X_63,X_71);
    (X_73,r1_79) := algebra.subjoin(X_62,X_72,nil:BAT,nil:BAT,false,nil:lng);
    X_76:bat[:oid,:oid] := sql.bind_idxbat(X_4,"sys","supplier","supplier_s_nationkey_fkey",0);
    (X_78,r1_84) := sql.bind_idxbat(X_4,"sys","supplier","supplier_s_nationkey_fkey",2);
    X_80:bat[:oid,:oid] := sql.bind_idxbat(X_4,"sys","supplier","supplier_s_nationkey_fkey",1);
    X_81 := sql.delta(X_76,X_78,r1_84,X_80);
    X_82:bat[:oid,:oid] := algebra.leftfetchjoinPath(r1_79,X_63,X_81);
    X_83:bat[:oid,:oid] := sql.tid(X_4,"sys","nation");
    X_85:bat[:oid,:str] := sql.bind(X_4,"sys","nation","n_name",0);
    (X_87,r1_94) := sql.bind(X_4,"sys","nation","n_name",2);
    X_89:bat[:oid,:str] := sql.bind(X_4,"sys","nation","n_name",1);
    X_90 := sql.delta(X_85,X_87,r1_94,X_89);
    X_91 := algebra.leftfetchjoin(X_83,X_90);
    X_92 := algebra.subselect(X_91,A1,A1,true,true,false);
    X_94 := algebra.leftfetchjoin(X_92,X_83);
    (X_95,r1_103) := algebra.subjoin(X_82,X_94,nil:BAT,nil:BAT,false,nil:lng);
    X_99:bat[:oid,:int] := algebra.leftfetchjoinPath(X_95,r1_79,X_72);
    X_100 := bat.mirror(X_99);
    X_101:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_orderkey",0);
    (X_105,r1_114) := sql.bind(X_4,"sys","lineitem","l_orderkey",2);
    X_108:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_orderkey",1);
    X_110 := sql.delta(X_101,X_105,r1_114,X_108);
    X_111:bat[:oid,:int] := algebra.leftfetchjoinPath(X_95,X_73,X_51,X_26,X_5,X_110);
    X_112:bat[:oid,:oid] := sql.tid(X_4,"sys","lineitem");
    X_114 := algebra.leftfetchjoin(X_112,X_110);
    (X_115,r1_133) := algebra.subjoin(X_111,X_114,nil:BAT,nil:BAT,false,nil:lng);
    X_118:bat[:oid,:int] := algebra.leftfetchjoinPath(r1_133,X_112,X_61);
    X_119:bat[:oid,:int] := algebra.leftfetchjoinPath(X_95,X_73,X_62);
    X_120 := algebra.leftfetchjoin(X_115,X_119);
    X_121:bat[:oid,:bit] := batcalc.!=(X_118,X_120);
    X_122 := algebra.subselect(X_121,true,true,true,true,false);
    X_124 := algebra.leftfetchjoin(X_122,X_115);
    X_125 := algebra.tinter(X_100,X_124);
    X_126 := algebra.leftfetchjoin(X_125,X_99);
    X_127 := bat.mirror(X_126);
    X_128 := algebra.leftfetchjoin(X_125,X_111);
    X_130:bat[:oid,:date] := sql.bind(X_4,"sys","lineitem","l_receiptdate",0);
    (X_132,r1_160) := sql.bind(X_4,"sys","lineitem","l_receiptdate",2);
    X_134:bat[:oid,:date] := sql.bind(X_4,"sys","lineitem","l_receiptdate",1);
    X_135 := sql.delta(X_130,X_132,r1_160,X_134);
    X_136 := algebra.leftfetchjoin(X_112,X_135);
    X_137:bat[:oid,:date] := sql.bind(X_4,"sys","lineitem","l_commitdate",0);
    (X_139,r1_167) := sql.bind(X_4,"sys","lineitem","l_commitdate",2);
    X_141:bat[:oid,:date] := sql.bind(X_4,"sys","lineitem","l_commitdate",1);
    X_142 := sql.delta(X_137,X_139,r1_167,X_141);
    X_143 := algebra.leftfetchjoin(X_112,X_142);
    X_144:bat[:oid,:bit] := batcalc.>(X_136,X_143);
    X_145 := algebra.subselect(X_144,true,true,true,true,false);
    X_147 := algebra.leftfetchjoin(X_145,X_114);
    (X_148,r1_183) := algebra.subjoin(X_128,X_147,nil:BAT,nil:BAT,false,nil:lng);
    X_152:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_suppkey",0);
    (X_154,r1_189) := sql.bind(X_4,"sys","lineitem","l_suppkey",2);
    X_157:bat[:oid,:int] := sql.bind(X_4,"sys","lineitem","l_suppkey",1);
    X_158 := sql.delta(X_152,X_154,r1_189,X_157);
    X_159:bat[:oid,:int] := algebra.leftfetchjoinPath(r1_183,X_145,X_112,X_158);
    X_160:bat[:oid,:int] := algebra.leftfetchjoinPath(X_148,X_125,X_119);
    X_161:bat[:oid,:bit] := batcalc.!=(X_159,X_160);
    X_162 := algebra.subselect(X_161,true,true,true,true,false);
    X_164 := algebra.leftfetchjoin(X_162,X_148);
    X_165 := algebra.tdiff(X_127,X_164);
    X_166:bat[:oid,:str] := sql.bind(X_4,"sys","supplier","s_name",0);
    (X_169,r1_209) := sql.bind(X_4,"sys","supplier","s_name",2);
    X_171:bat[:oid,:str] := sql.bind(X_4,"sys","supplier","s_name",1);
    X_172 := sql.delta(X_166,X_169,r1_209,X_171);
    X_173:bat[:oid,:str] := algebra.leftfetchjoinPath(X_165,X_125,X_95,r1_79,X_63,X_172);
    (X_174,r1_218,r2_218) := group.subgroupdone(X_173);
    X_177 := algebra.leftfetchjoin(r1_218,X_173);
    X_178:bat[:oid,:wrd] := aggr.subcount(X_174,X_174,r1_218,false);
    (X_181,r1_229) := algebra.firstn(X_178,100:wrd,false,false);
    X_183 := algebra.firstn(X_177,X_181,r1_229,100:wrd,true,false);
    X_184 := algebra.leftfetchjoin(X_183,X_177);
    X_185 := algebra.leftfetchjoin(X_183,X_178);
    (X_186,r1_236,r2_236) := algebra.subsort(X_185,true,false);
    (X_190,r1_240,r2_240) := algebra.subsort(X_184,r1_236,r2_236,false,false);
    X_193 := algebra.leftfetchjoin(r1_240,X_184);
    X_194 := algebra.subslice(X_193,0,99:wrd);
    X_195 := algebra.leftfetchjoin(X_194,X_193);
    X_196:bat[:oid,:wrd] := algebra.leftfetchjoinPath(X_194,r1_240,X_185);
    sql.resultSet(X_216,X_218,X_220,X_222,X_224,X_195,X_196);
end user.s2_1;

# 22:53:31 >  
# 22:53:31 >  "Done."
# 22:53:31 >  

