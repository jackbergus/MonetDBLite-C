stdout of test '14-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:28 >  
# 22:53:28 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:28 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:28 >  
# 22:53:28 >  "/usr/bin/python2" "14-explain.SQL.py" "14-explain"
# 22:53:28 >  

#set optimizer = 'sequential_pipe';
#explain select
#	100.00 * sum(case
#		when p_type like 'PROMO%'
#			then l_extendedprice * (1 - l_discount)
#		else 0
#	end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue
#from
#	lineitem,
#	part
#where
#	l_partkey = p_partkey
#	and l_shipdate >= date '1995-09-01'
#	and l_shipdate < date '1995-09-01' + interval '1' month;
% .explain # table_name
% mal # name
% clob # type
% 84 # length
function user.main():void;
    X_1119 := sql.mvc();
    X_1123:bat[:date] := sql.bind(X_1119,"sys","lineitem","l_shipdate",0);
    C_1120:bat[:oid] := sql.tid(X_1119,"sys","lineitem");
    X_1135:date := mtime.addmonths("1995-09-01",1);
    C_1136 := algebra.subselect(X_1123,C_1120,"1995-09-01",X_1135,true,false,false);
    X_1140:bat[:int] := sql.bind(X_1119,"sys","lineitem","l_partkey",0);
    X_1147 := algebra.projection(C_1136,X_1140);
    C_1148:bat[:oid] := sql.tid(X_1119,"sys","part");
    X_1150:bat[:int] := sql.bind(X_1119,"sys","part","p_partkey",0);
    X_1156 := algebra.projection(C_1148,X_1150);
    (X_1157,r1_53) := algebra.subjoin(X_1147,X_1156,nil:BAT,nil:BAT,false,nil:lng);
    X_1162:bat[:str] := sql.bind(X_1119,"sys","part","p_type",0);
    X_1169:bat[:str] := algebra.projectionpath(r1_53,C_1148,X_1162);
    X_1171:bat[:bit] := batalgebra.like(X_1169,"PROMO%");
    X_1174:bat[:bit] := batcalc.isnil(X_1171);
    X_1179:bat[:bit] := batcalc.ifthenelse(X_1174,false,X_1171);
    X_1181:bat[:lng] := sql.bind(X_1119,"sys","lineitem","l_extendedprice",0);
    X_1189:bat[:lng] := algebra.projectionpath(X_1157,C_1136,X_1181);
    X_1194:bat[:lng] := sql.bind(X_1119,"sys","lineitem","l_discount",0);
    X_1202:bat[:lng] := algebra.projectionpath(X_1157,C_1136,X_1194);
    X_1203:bat[:lng] := batcalc.-(100:lng,X_1202);
    X_1205:bat[:lng] := batcalc.*(X_1189,X_1203);
    X_1211:bat[:lng] := batcalc.ifthenelse(X_1179,X_1205,0:lng);
    X_1214:lng := aggr.sum(X_1211);
    X_1216:lng := calc.*(X_1214,1000);
    X_1217 := calc.lng(5,X_1216,19,9);
    X_1224:lng := aggr.sum(X_1205);
    X_1225:lng := calc./(X_1217,X_1224);
    sql.resultSet("sys.L3","promo_revenue","decimal",19,5,10,X_1225);
end user.main;
#inline               actions= 0 time=9 usec 
#remap                actions= 8 time=141 usec 
#costmodel            actions= 1 time=5 usec 
#coercion             actions= 1 time=17 usec 
#evaluate             actions=19 time=100 usec 
#emptybind            actions=18 time=62 usec 
#aliases              actions=29 time=22 usec 
#mergetable           actions= 0 time=102 usec 
#deadcode             actions=18 time=15 usec 
#aliases              actions= 0 time=11 usec 
#constants            actions=18 time=31 usec 
#commonTerms          actions= 2 time=22 usec 
#projectionpath       actions= 3 time=21 usec 
#reorder              actions= 1 time=45 usec 
#deadcode             actions= 5 time=10 usec 
#reduce               actions=114 time=39 usec 
#matpack              actions= 0 time=7 usec 
#multiplex            actions= 0 time=3 usec 
#profiler             actions= 1 time=7 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=23 usec 
#total                actions= 1 time=1018 usec 

# 22:53:29 >  
# 22:53:29 >  "Done."
# 22:53:29 >  

