stdout of test '07-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:26 >  
# 22:53:26 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:26 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:26 >  
# 22:53:26 >  "/usr/bin/python2" "07-explain.SQL.py" "07-explain"
# 22:53:26 >  

#set optimizer = 'sequential_pipe';
#explain select
#	supp_nation,
#	cust_nation,
#	l_year,
#	sum(volume) as revenue
#from
#	(
#		select
#			n1.n_name as supp_nation,
#			n2.n_name as cust_nation,
#			extract(year from l_shipdate) as l_year,
#			l_extendedprice * (1 - l_discount) as volume
#		from
#			supplier,
#			lineitem,
#			orders,
#			customer,
#			nation n1,
#			nation n2
#		where
#			s_suppkey = l_suppkey
#			and o_orderkey = l_orderkey
#			and c_custkey = o_custkey
#			and s_nationkey = n1.n_nationkey
#			and c_nationkey = n2.n_nationkey
#			and (
#				(n1.n_name = 'FRANCE' and n2.n_name = 'GERMANY')
% .explain # table_name
% mal # name
% clob # type
% 863 # length
function user.s4_1():void;
    X_310:void := querylog.define("explain select\n supp_nation,\n cust_nation,\n l_year,\n sum(volume) as revenue\nfrom\n (\n select\n n1.n_name as supp_nation,\n n2.n_name as cust_nation,\n extract(year from l_shipdate) as l_year,\n l_extendedprice * (1 - l_discount) as volume\n from\n supplier,\n lineitem,\n orders,\n customer,\n nation n1,\n nation n2\n where\n s_suppkey = l_suppkey\n and o_orderkey = l_orderkey\n and c_custkey = o_custkey\n and s_nationkey = n1.n_nationkey\n and c_nationkey = n2.n_nationkey\n and (\n (n1.n_name = \\'FRANCE\\' and n2.n_name = \\'GERMANY\\')\n or (n1.n_name = \\'GERMANY\\' and n2.n_name = \\'FRANCE\\')\n )\n and l_shipdate between date \\'1995-01-01\\' and date \\'1996-12-31\\'\n ) as shipping\ngroup by\n supp_nation,\n cust_nation,\n l_year\norder by\n supp_nation,\n cust_nation,\n l_year;","sequential_pipe",106);
    X_269 := bat.new(nil:str);
    X_276 := bat.append(X_269,"sys.shipping");
    X_286 := bat.append(X_276,"sys.shipping");
    X_292 := bat.append(X_286,"sys.shipping");
    X_300 := bat.append(X_292,"sys.L16");
    X_271 := bat.new(nil:str);
    X_278 := bat.append(X_271,"supp_nation");
    X_287 := bat.append(X_278,"cust_nation");
    X_293 := bat.append(X_287,"l_year");
    X_302 := bat.append(X_293,"revenue");
    X_272 := bat.new(nil:str);
    X_280 := bat.append(X_272,"char");
    X_289 := bat.append(X_280,"char");
    X_295 := bat.append(X_289,"int");
    X_304 := bat.append(X_295,"decimal");
    X_273 := bat.new(nil:int);
    X_282 := bat.append(X_273,25);
    X_290 := bat.append(X_282,25);
    X_297 := bat.append(X_290,32);
    X_306 := bat.append(X_297,39);
    X_275 := bat.new(nil:int);
    X_284 := bat.append(X_275,0);
    X_291 := bat.append(X_284,0);
    X_299 := bat.append(X_291,0);
    X_308 := bat.append(X_299,4);
    X_0 := sql.mvc();
    C_1:bat[:oid] := sql.tid(X_0,"sys","supplier");
    X_4:bat[:int] := sql.bind(X_0,"sys","supplier","s_suppkey",0);
    X_13 := algebra.projection(C_1,X_4);
    C_21:bat[:oid] := sql.tid(X_0,"sys","lineitem");
    X_44:bat[:date] := sql.bind(X_0,"sys","lineitem","l_shipdate",0);
    X_50 := algebra.projection(C_21,X_44);
    C_60 := algebra.subselect(X_50,"1995-01-01","1996-12-31",true,true,false);
    X_23:bat[:int] := sql.bind(X_0,"sys","lineitem","l_suppkey",0);
    X_64:bat[:int] := algebra.projectionpath(C_60,C_21,X_23);
    (X_69,X_70) := algebra.subjoin(X_13,X_64,nil:BAT,nil:BAT,false,nil:lng);
    X_51:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineitem","lineitem_l_orderkey_fkey",0);
    (X_54,X_55:bat[:oid]) := sql.bind_idxbat(X_0,"sys","lineitem","lineitem_l_orderkey_fkey",2);
    X_53:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineitem","lineitem_l_orderkey_fkey",1);
    X_56 := sql.delta(X_51,X_54,X_55,X_53);
    X_80:bat[:oid] := algebra.projectionpath(X_70,C_60,C_21,X_56);
    C_81:bat[:oid] := sql.tid(X_0,"sys","orders");
    (X_90,X_91) := algebra.subjoin(X_80,C_81,nil:BAT,nil:BAT,false,nil:lng);
    X_14:bat[:oid] := sql.bind_idxbat(X_0,"sys","supplier","supplier_s_nationkey_fkey",0);
    (X_17,X_18:bat[:oid]) := sql.bind_idxbat(X_0,"sys","supplier","supplier_s_nationkey_fkey",2);
    X_16:bat[:oid] := sql.bind_idxbat(X_0,"sys","supplier","supplier_s_nationkey_fkey",1);
    X_19 := sql.delta(X_14,X_17,X_18,X_16);
    X_93:bat[:oid] := algebra.projectionpath(X_90,X_69,C_1,X_19);
    C_101:bat[:oid] := sql.tid(X_0,"sys","nation");
    X_103:bat[:str] := sql.bind(X_0,"sys","nation","n_name",0);
    X_109 := algebra.projection(C_101,X_103);
    C_111 := algebra.subselect(X_109,"FRANCE","FRANCE",true,false,false);
    C_116 := algebra.subselect(X_109,"GERMANY","GERMANY",true,false,false);
    X_117 := bat.mergecand(C_111,C_116);
    X_119 := algebra.projection(X_117,C_101);
    (X_120,X_121) := algebra.subjoin(X_93,X_119,nil:BAT,nil:BAT,false,nil:lng);
    X_83:bat[:oid] := sql.bind_idxbat(X_0,"sys","orders","orders_o_custkey_fkey",0);
    (X_86,X_87:bat[:oid]) := sql.bind_idxbat(X_0,"sys","orders","orders_o_custkey_fkey",2);
    X_85:bat[:oid] := sql.bind_idxbat(X_0,"sys","orders","orders_o_custkey_fkey",1);
    X_88 := sql.delta(X_83,X_86,X_87,X_85);
    X_133:bat[:oid] := algebra.projectionpath(X_120,X_91,C_81,X_88);
    C_136:bat[:oid] := sql.tid(X_0,"sys","customer");
    (X_145,X_146) := algebra.subjoin(X_133,C_136,nil:BAT,nil:BAT,false,nil:lng);
    X_138:bat[:oid] := sql.bind_idxbat(X_0,"sys","customer","customer_c_nationkey_fkey",0);
    (X_141,X_142:bat[:oid]) := sql.bind_idxbat(X_0,"sys","customer","customer_c_nationkey_fkey",2);
    X_140:bat[:oid] := sql.bind_idxbat(X_0,"sys","customer","customer_c_nationkey_fkey",1);
    X_143 := sql.delta(X_138,X_141,X_142,X_140);
    X_160:bat[:oid] := algebra.projectionpath(X_146,C_136,X_143);
    X_174 := bat.mergecand(C_116,C_111);
    X_176 := algebra.projection(X_174,C_101);
    (X_177,X_178) := algebra.subjoin(X_160,X_176,nil:BAT,nil:BAT,false,nil:lng);
    X_196:bat[:str] := algebra.projectionpath(X_178,X_174,X_109);
    X_192:bat[:str] := algebra.projectionpath(X_177,X_145,X_121,X_117,X_109);
    C_199 := algebra.subselect(X_192,"FRANCE","FRANCE",true,false,false);
    C_201 := algebra.subselect(X_196,C_199,"GERMANY","GERMANY",true,false,false);
    C_203 := algebra.subselect(X_192,"GERMANY","GERMANY",true,false,false);
    C_206 := algebra.subselect(X_196,C_203,"FRANCE","FRANCE",true,false,false);
    X_207 := bat.mergecand(C_201,C_206);
    X_213:bat[:date] := algebra.projectionpath(X_207,X_177,X_145,X_120,X_90,X_70,C_60,X_50);
    X_223:bat[:int] := batmtime.year(X_213);
    X_221 := algebra.projection(X_207,X_196);
    X_217 := algebra.projection(X_207,X_192);
    (X_238,X_239,X_240) := group.subgroup(X_217);
    (X_241,X_242,X_243) := group.subgroup(X_221,X_238);
    (X_244,X_245,X_246) := group.subgroupdone(X_223,X_241);
    X_247 := algebra.projection(X_245,X_217);
    X_248 := algebra.projection(X_245,X_221);
    X_249 := algebra.projection(X_245,X_223);
    X_30:bat[:lng] := sql.bind(X_0,"sys","lineitem","l_extendedprice",0);
    X_211:bat[:lng] := algebra.projectionpath(X_207,X_177,X_145,X_120,X_90,X_70,C_60,C_21,X_30);
    X_37:bat[:lng] := sql.bind(X_0,"sys","lineitem","l_discount",0);
    X_212:bat[:lng] := algebra.projectionpath(X_207,X_177,X_145,X_120,X_90,X_70,C_60,C_21,X_37);
    X_234:bat[:lng] := batcalc.-(100:lng,X_212);
    X_236:bat[:hge] := batcalc.*(X_211,X_234);
    X_250:bat[:hge] := aggr.subsum(X_236,X_244,X_245,true,true);
    (X_253,X_254,X_255) := algebra.subsort(X_247,false,false);
    (X_258,X_259,X_260) := algebra.subsort(X_248,X_254,X_255,false,false);
    (X_261,X_262,X_263) := algebra.subsort(X_249,X_259,X_260,false,false);
    X_264 := algebra.projection(X_262,X_247);
    X_265 := algebra.projection(X_262,X_248);
    X_266 := algebra.projection(X_262,X_249);
    X_267 := algebra.projection(X_262,X_250);
    sql.resultSet(X_300,X_302,X_304,X_306,X_308,X_264,X_265,X_266,X_267);
end user.s4_1;
#inline               actions= 0 time=6 usec 
#candidates           actions= 1 time=73 usec 
#remap                actions= 4 time=313 usec 
#costModel            actions= 1 time=91 usec 
#coercions            actions= 0 time=55 usec 
#evaluate             actions=12 time=140 usec 
#emptybind            actions= 0 time=6 usec 
#pushselect           actions= 0 time=5 usec 
#aliases              actions=19 time=125 usec 
#mergetable           actions= 0 time=114 usec 
#deadcode             actions=15 time=99 usec 
#aliases              actions= 0 time=17 usec 
#constants            actions=29 time=116 usec 
#commonTerms          actions= 5 time=101 usec 
#projectionpath       actions=32 time=114 usec 
#reorder              actions= 1 time=185 usec 
#deadcode             actions=37 time=103 usec 
#reduce               actions=134 time=152 usec 
#matpack              actions= 0 time=7 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=4 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=90 usec 
#garbageCollector     actions= 1 time=102 usec 
#total                actions= 1 time=2106 usec 

# 22:53:27 >  
# 22:53:27 >  "Done."
# 22:53:27 >  

