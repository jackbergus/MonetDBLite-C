stdout of test '07-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:26 >  
# 22:53:26 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:26 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:26 >  
# 22:53:26 >  "/usr/bin/python2" "07-explain.SQL.py" "07-explain"
# 22:53:26 >  

#set optimizer = 'sequential_pipe';
#explain select
#	supp_nation,
#	cust_nation,
#	l_year,
#	sum(volume) as revenue
#from
#	(
#		select
#			n1.n_name as supp_nation,
#			n2.n_name as cust_nation,
#			extract(year from l_shipdate) as l_year,
#			l_extendedprice * (1 - l_discount) as volume
#		from
#			supplier,
#			lineitem,
#			orders,
#			customer,
#			nation n1,
#			nation n2
#		where
#			s_suppkey = l_suppkey
#			and o_orderkey = l_orderkey
#			and c_custkey = o_custkey
#			and s_nationkey = n1.n_nationkey
#			and c_nationkey = n2.n_nationkey
#			and (
#				(n1.n_name = 'FRANCE' and n2.n_name = 'GERMANY')
% .explain # table_name
% mal # name
% clob # type
% 863 # length
function user.s4_1():void;
    X_266:void := querylog.define("explain select\n supp_nation,\n cust_nation,\n l_year,\n sum(volume) as revenue\nfrom\n (\n select\n n1.n_name as supp_nation,\n n2.n_name as cust_nation,\n extract(year from l_shipdate) as l_year,\n l_extendedprice * (1 - l_discount) as volume\n from\n supplier,\n lineitem,\n orders,\n customer,\n nation n1,\n nation n2\n where\n s_suppkey = l_suppkey\n and o_orderkey = l_orderkey\n and c_custkey = o_custkey\n and s_nationkey = n1.n_nationkey\n and c_nationkey = n2.n_nationkey\n and (\n (n1.n_name = \\'FRANCE\\' and n2.n_name = \\'GERMANY\\')\n or (n1.n_name = \\'GERMANY\\' and n2.n_name = \\'FRANCE\\')\n )\n and l_shipdate between date \\'1995-01-01\\' and date \\'1996-12-31\\'\n ) as shipping\ngroup by\n supp_nation,\n cust_nation,\n l_year\norder by\n supp_nation,\n cust_nation,\n l_year;","sequential_pipe",106);
    X_225 := bat.new(nil:str);
    X_232 := bat.append(X_225,"sys.shipping");
    X_242 := bat.append(X_232,"sys.shipping");
    X_248 := bat.append(X_242,"sys.shipping");
    X_256 := bat.append(X_248,"sys.L16");
    X_227 := bat.new(nil:str);
    X_234 := bat.append(X_227,"supp_nation");
    X_243 := bat.append(X_234,"cust_nation");
    X_249 := bat.append(X_243,"l_year");
    X_258 := bat.append(X_249,"revenue");
    X_228 := bat.new(nil:str);
    X_236 := bat.append(X_228,"char");
    X_245 := bat.append(X_236,"char");
    X_251 := bat.append(X_245,"int");
    X_260 := bat.append(X_251,"decimal");
    X_229 := bat.new(nil:int);
    X_238 := bat.append(X_229,25);
    X_246 := bat.append(X_238,25);
    X_253 := bat.append(X_246,32);
    X_262 := bat.append(X_253,19);
    X_231 := bat.new(nil:int);
    X_240 := bat.append(X_231,0);
    X_247 := bat.append(X_240,0);
    X_255 := bat.append(X_247,0);
    X_264 := bat.append(X_255,4);
    X_0 := sql.mvc();
    C_1:bat[:oid] := sql.tid(X_0,"sys","supplier");
    X_4:bat[:int] := sql.bind(X_0,"sys","supplier","s_suppkey",0);
    X_13 := algebra.projection(C_1,X_4);
    C_14:bat[:oid] := sql.tid(X_0,"sys","lineitem");
    X_16:bat[:date] := sql.bind(X_0,"sys","lineitem","l_shipdate",0);
    X_22 := algebra.projection(C_14,X_16);
    C_25 := algebra.subselect(X_22,"1995-01-01","1996-12-31",true,true,false);
    X_29:bat[:int] := sql.bind(X_0,"sys","lineitem","l_suppkey",0);
    X_36:bat[:int] := algebra.projectionpath(C_25,C_14,X_29);
    (X_37,r1_45) := algebra.subjoin(X_13,X_36,nil:BAT,nil:BAT,false,nil:lng);
    X_42:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineitem","lineitem_l_orderkey_fkey",0);
    (X_44,r1_52) := sql.bind_idxbat(X_0,"sys","lineitem","lineitem_l_orderkey_fkey",2);
    X_46:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineitem","lineitem_l_orderkey_fkey",1);
    X_47 := sql.delta(X_42,X_44,r1_52,X_46);
    X_50:bat[:oid] := algebra.projectionpath(r1_45,C_25,C_14,X_47);
    C_51:bat[:oid] := sql.tid(X_0,"sys","orders");
    (X_53,r1_61) := algebra.subjoin(X_50,C_51,nil:BAT,nil:BAT,false,nil:lng);
    X_55:bat[:oid] := sql.bind_idxbat(X_0,"sys","supplier","supplier_s_nationkey_fkey",0);
    (X_57,r1_65) := sql.bind_idxbat(X_0,"sys","supplier","supplier_s_nationkey_fkey",2);
    X_59:bat[:oid] := sql.bind_idxbat(X_0,"sys","supplier","supplier_s_nationkey_fkey",1);
    X_60 := sql.delta(X_55,X_57,r1_65,X_59);
    X_63:bat[:oid] := algebra.projectionpath(X_53,X_37,C_1,X_60);
    C_64:bat[:oid] := sql.tid(X_0,"sys","nation");
    X_66:bat[:str] := sql.bind(X_0,"sys","nation","n_name",0);
    X_72 := algebra.projection(C_64,X_66);
    C_74 := algebra.subselect(X_72,"FRANCE","FRANCE",true,false,false);
    C_79 := algebra.subselect(X_72,"GERMANY","GERMANY",true,false,false);
    X_80 := bat.mergecand(C_74,C_79);
    X_81 := algebra.projection(X_80,C_64);
    (X_82,r1_90) := algebra.subjoin(X_63,X_81,nil:BAT,nil:BAT,false,nil:lng);
    X_87:bat[:oid] := sql.bind_idxbat(X_0,"sys","orders","orders_o_custkey_fkey",0);
    (X_89,r1_97) := sql.bind_idxbat(X_0,"sys","orders","orders_o_custkey_fkey",2);
    X_91:bat[:oid] := sql.bind_idxbat(X_0,"sys","orders","orders_o_custkey_fkey",1);
    X_92 := sql.delta(X_87,X_89,r1_97,X_91);
    X_95:bat[:oid] := algebra.projectionpath(X_82,r1_61,C_51,X_92);
    C_96:bat[:oid] := sql.tid(X_0,"sys","customer");
    (X_98,r1_106) := algebra.subjoin(X_95,C_96,nil:BAT,nil:BAT,false,nil:lng);
    X_100:bat[:oid] := sql.bind_idxbat(X_0,"sys","customer","customer_c_nationkey_fkey",0);
    (X_102,r1_110) := sql.bind_idxbat(X_0,"sys","customer","customer_c_nationkey_fkey",2);
    X_104:bat[:oid] := sql.bind_idxbat(X_0,"sys","customer","customer_c_nationkey_fkey",1);
    X_105 := sql.delta(X_100,X_102,r1_110,X_104);
    X_107:bat[:oid] := algebra.projectionpath(r1_106,C_96,X_105);
    X_123 := bat.mergecand(C_79,C_74);
    X_124 := algebra.projection(X_123,C_64);
    (X_125,r1_133) := algebra.subjoin(X_107,X_124,nil:BAT,nil:BAT,false,nil:lng);
    X_131:bat[:str] := algebra.projectionpath(r1_133,X_123,X_72);
    X_136:bat[:str] := algebra.projectionpath(X_125,X_98,r1_90,X_80,X_72);
    C_138 := algebra.subselect(X_136,"FRANCE","FRANCE",true,false,false);
    C_139 := algebra.subselect(X_131,C_138,"GERMANY","GERMANY",true,false,false);
    C_142 := algebra.subselect(X_136,"GERMANY","GERMANY",true,false,false);
    C_143 := algebra.subselect(X_131,C_142,"FRANCE","FRANCE",true,false,false);
    X_144 := bat.mergecand(C_139,C_143);
    X_151:bat[:date] := algebra.projectionpath(X_144,X_125,X_98,X_82,X_53,r1_45,C_25,X_22);
    X_152:bat[:int] := batmtime.year(X_151);
    X_155 := algebra.projection(X_144,X_131);
    X_156 := algebra.projection(X_144,X_136);
    (X_157,r1_165,r2_165) := group.subgroup(X_156);
    (X_160,r1_168,r2_168) := group.subgroup(X_155,X_157);
    (X_163,r1_171,r2_171) := group.subgroupdone(X_152,X_160);
    X_166 := algebra.projection(r1_171,X_152);
    X_167 := algebra.projection(r1_171,X_155);
    X_168 := algebra.projection(r1_171,X_156);
    X_183:bat[:lng] := sql.bind(X_0,"sys","lineitem","l_extendedprice",0);
    X_196:bat[:lng] := algebra.projectionpath(X_144,X_125,X_98,X_82,X_53,r1_45,C_25,C_14,X_183);
    X_201:bat[:lng] := sql.bind(X_0,"sys","lineitem","l_discount",0);
    X_214:bat[:lng] := algebra.projectionpath(X_144,X_125,X_98,X_82,X_53,r1_45,C_25,C_14,X_201);
    X_215:bat[:lng] := batcalc.-(100:lng,X_214);
    X_218:bat[:lng] := batcalc.*(X_196,X_215);
    X_220:bat[:lng] := aggr.subsum(X_218,X_163,r1_171,true,true);
    (X_169,r1_177,r2_177) := algebra.subsort(X_168,false,false);
    (X_174,r1_182,r2_182) := algebra.subsort(X_167,r1_177,r2_177,false,false);
    (X_177,r1_185,r2_185) := algebra.subsort(X_166,r1_182,r2_182,false,false);
    X_180 := algebra.projection(r1_185,X_168);
    X_181 := algebra.projection(r1_185,X_167);
    X_182 := algebra.projection(r1_185,X_166);
    X_223 := algebra.projection(r1_185,X_220);
    sql.resultSet(X_256,X_258,X_260,X_262,X_264,X_180,X_181,X_182,X_223);
end user.s4_1;
#inline               actions= 0 time=9 usec 
#remap                actions= 3 time=64 usec 
#costmodel            actions= 1 time=7 usec 
#coercion             actions= 0 time=5 usec 
#evaluate             actions=12 time=60 usec 
#emptybind            actions=21 time=54 usec 
#aliases              actions=19 time=29 usec 
#mergetable           actions= 0 time=132 usec 
#deadcode             actions=21 time=20 usec 
#aliases              actions= 0 time=18 usec 
#constants            actions=35 time=43 usec 
#commonTerms          actions= 5 time=36 usec 
#projectionpath       actions=32 time=53 usec 
#reorder              actions= 1 time=82 usec 
#deadcode             actions=37 time=19 usec 
#reduce               actions=145 time=31 usec 
#matpack              actions= 0 time=5 usec 
#multiplex            actions= 0 time=4 usec 
#profiler             actions= 1 time=6 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=42 usec 
#total                actions= 1 time=958 usec 

# 22:53:27 >  
# 22:53:27 >  "Done."
# 22:53:27 >  

