stdout of test '11-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:27 >  
# 22:53:27 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:27 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:28 >  
# 22:53:28 >  "/usr/bin/python2" "11-explain.SQL.py" "11-explain"
# 22:53:28 >  

#set optimizer = 'sequential_pipe';
#explain select
#	ps_partkey,
#	sum(ps_supplycost * ps_availqty) as value
#from
#	partsupp,
#	supplier,
#	nation
#where
#	ps_suppkey = s_suppkey
#	and s_nationkey = n_nationkey
#	and n_name = 'GERMANY'
#group by
#	ps_partkey 
#having
#	sum(ps_supplycost * ps_availqty) >
#	(
#		select
#			sum(ps_supplycost * ps_availqty) * 0.0100000000
#			-- The above constant needs to be adjusted according
#			-- to the scale factor (SF): constant = 0.0001 / SF.
#		from
#			partsupp,
#			supplier,
#			nation
#		where
#			ps_suppkey = s_suppkey
#			and s_nationkey = n_nationkey
% .explain # table_name
% mal # name
% clob # type
% 812 # length
function user.s2_1{autoCommit=true}(A0:str,A1:sht,A2:str):void;
    X_132:void := querylog.define("explain select\n\tps_partkey,\n\tsum(ps_supplycost * ps_availqty) as value\nfrom\n\tpartsupp,\n\tsupplier,\n\tnation\nwhere\n\tps_suppkey = s_suppkey\n\tand s_nationkey = n_nationkey\n\tand n_name = \\'GERMANY\\'\ngroup by\n\tps_partkey having\n\t\tsum(ps_supplycost * ps_availqty) > (\n\t\t\tselect\n\t\t\t\tsum(ps_supplycost * ps_availqty) * 0.0100000000\n\t\t\t--\t                                   ^^^^^^^^^^^^\n\t\t\t-- The above constant needs to be adjusted according\n\t\t\t-- to the scale factor (SF): constant = 0.0001 / SF.\n\t\t\tfrom\n\t\t\t\tpartsupp,\n\t\t\t\tsupplier,\n\t\t\t\tnation\n\t\t\twhere\n\t\t\t\tps_suppkey = s_suppkey\n\t\t\t\tand s_nationkey = n_nationkey\n\t\t\t\tand n_name = \\'GERMANY\\'\n\t\t)\norder by\n\tvalue desc;","sequential_pipe",72);
    X_5 := sql.mvc();
    X_6:bat[:oid,:oid]  := sql.tid(X_5,"sys","supplier");
    X_9:bat[:oid,:oid]  := sql.bind_idxbat(X_5,"sys","supplier","supplier_s_nationkey_fkey",0);
    (X_12,r1_12) := sql.bind_idxbat(X_5,"sys","supplier","supplier_s_nationkey_fkey",2);
    X_15:bat[:oid,:oid]  := sql.bind_idxbat(X_5,"sys","supplier","supplier_s_nationkey_fkey",1);
    X_17 := sql.delta(X_9,X_12,r1_12,X_15);
    X_18 := algebra.leftfetchjoin(X_6,X_17);
    X_19:bat[:oid,:oid]  := sql.tid(X_5,"sys","nation");
    X_21:bat[:oid,:str]  := sql.bind(X_5,"sys","nation","n_name",0);
    (X_23,r1_23) := sql.bind(X_5,"sys","nation","n_name",2);
    X_25:bat[:oid,:str]  := sql.bind(X_5,"sys","nation","n_name",1);
    X_26 := sql.delta(X_21,X_23,r1_23,X_25);
    X_27 := algebra.leftfetchjoin(X_19,X_26);
    X_28 := algebra.subselect(X_27,A0,A0,true,true,false);
    X_30 := algebra.leftfetchjoin(X_28,X_19);
    (X_31,r1_32) := algebra.subjoin(X_18,X_30,nil:BAT,nil:BAT,false,nil:lng);
    X_35 := algebra.leftfetchjoin(X_31,X_6);
    X_36:bat[:oid,:oid]  := sql.tid(X_5,"sys","partsupp");
    X_38:bat[:oid,:oid]  := sql.bind_idxbat(X_5,"sys","partsupp","partsupp_ps_suppkey_fkey",0);
    (X_41,r1_42) := sql.bind_idxbat(X_5,"sys","partsupp","partsupp_ps_suppkey_fkey",2);
    X_43:bat[:oid,:oid]  := sql.bind_idxbat(X_5,"sys","partsupp","partsupp_ps_suppkey_fkey",1);
    X_44 := sql.delta(X_38,X_41,r1_42,X_43);
    X_45 := algebra.leftfetchjoin(X_36,X_44);
    (X_46,r1_47) := algebra.subjoin(X_35,X_45,nil:BAT,nil:BAT,false,nil:lng);
    X_48:bat[:oid,:int]  := sql.bind(X_5,"sys","partsupp","ps_partkey",0);
    (X_51,r1_52) := sql.bind(X_5,"sys","partsupp","ps_partkey",2);
    X_54:bat[:oid,:int]  := sql.bind(X_5,"sys","partsupp","ps_partkey",1);
    X_56 := sql.delta(X_48,X_51,r1_52,X_54);
    X_57:bat[:oid,:int]  := algebra.leftfetchjoinPath(r1_47,X_36,X_56);
    (X_58,r1_60,r2_60) := group.subgroupdone(X_57);
    X_61 := algebra.leftfetchjoin(r1_60,X_57);
    X_63:bat[:oid,:lng]  := sql.bind(X_5,"sys","partsupp","ps_supplycost",0);
    (X_65,r1_67) := sql.bind(X_5,"sys","partsupp","ps_supplycost",2);
    X_67:bat[:oid,:lng]  := sql.bind(X_5,"sys","partsupp","ps_supplycost",1);
    X_68 := sql.delta(X_63,X_65,r1_67,X_67);
    X_69 := algebra.leftfetchjoin(X_36,X_68);
    X_70 := algebra.leftfetchjoin(r1_47,X_69);
    X_71:bat[:oid,:int]  := sql.bind(X_5,"sys","partsupp","ps_availqty",0);
    (X_75,r1_77) := sql.bind(X_5,"sys","partsupp","ps_availqty",2);
    X_77:bat[:oid,:int]  := sql.bind(X_5,"sys","partsupp","ps_availqty",1);
    X_78 := sql.delta(X_71,X_75,r1_77,X_77);
    X_79 := algebra.leftfetchjoin(X_36,X_78);
    X_80 := algebra.leftfetchjoin(r1_47,X_79);
    X_81:bat[:oid,:lng]  := batcalc.*(X_70,X_80);
    X_82:bat[:oid,:lng]  := aggr.subsum(X_81,X_58,r1_60,true,true);
    X_62 := bat.mirror(X_61);
    X_84 := algebra.subselect(X_27,A2,A2,true,true,false);
    X_86 := algebra.leftfetchjoin(X_84,X_19);
    (X_87,r1_114) := algebra.subjoin(X_18,X_86,nil:BAT,nil:BAT,false,nil:lng);
    X_91 := algebra.leftfetchjoin(X_87,X_6);
    (X_92,r1_128) := algebra.subjoin(X_91,X_45,nil:BAT,nil:BAT,false,nil:lng);
    X_95 := algebra.leftfetchjoin(r1_128,X_69);
    X_96 := algebra.leftfetchjoin(r1_128,X_79);
    X_97:bat[:oid,:lng]  := batcalc.*(X_95,X_96);
    X_98:lng  := aggr.sum(X_97);
    X_99 := calc.*(X_98,A1);
    X_100 := sql.single(X_99);
    X_102:bat[:oid,:lng] := batsql.dec_round(X_100,100);
    (X_103,r1_162) := algebra.subthetajoin(X_82,X_102,nil:BAT,nil:BAT,1,true,nil:lng);
    X_108 := algebra.tinter(X_62,X_103);
    X_109 := algebra.leftfetchjoin(X_108,X_82);
    (X_110,r1_169,r2_169) := algebra.subsort(X_109,true,false);
    X_114:bat[:oid,:int]  := algebra.leftfetchjoinPath(r1_169,X_108,X_61);
    X_115 := algebra.leftfetchjoin(r1_169,X_109);
    X_116 := sql.resultSet(2,1,X_114);
    sql.rsColumn(X_116,"sys.partsupp","ps_partkey","int",32,0,X_114);
    sql.rsColumn(X_116,"sys.L1","value","decimal",19,2,X_115);
    X_130 := io.stdout();
    sql.exportResult(X_130,X_116);
end user.s2_1;

# 22:53:28 >  
# 22:53:28 >  "Done."
# 22:53:28 >  

