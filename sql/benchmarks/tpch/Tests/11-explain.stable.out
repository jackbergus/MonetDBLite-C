stdout of test '11-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:27 >  
# 22:53:27 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:27 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2014 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:28 >  
# 22:53:28 >  "/usr/bin/python2" "11-explain.SQL.py" "11-explain"
# 22:53:28 >  

#set optimizer = 'sequential_pipe';
#explain select
#	ps_partkey,
#	sum(ps_supplycost * ps_availqty) as value
#from
#	partsupp,
#	supplier,
#	nation
#where
#	ps_suppkey = s_suppkey
#	and s_nationkey = n_nationkey
#	and n_name = 'GERMANY'
#group by
#	ps_partkey 
#having
#	sum(ps_supplycost * ps_availqty) >
#	(
#		select
#			sum(ps_supplycost * ps_availqty) * 0.0100000000
#			-- The above constant needs to be adjusted according
#			-- to the scale factor (SF): constant = 0.0001 / SF.
#		from
#			partsupp,
#			supplier,
#			nation
#		where
#			ps_suppkey = s_suppkey
#			and s_nationkey = n_nationkey
% .explain # table_name
% mal # name
% clob # type
% 714 # length
function user.s2_1{autoCommit=true}(A0:str,A1:lng,A2:str):void;
    X_5 := sql.mvc();
    X_6:bat[:oid,:oid]  := sql.tid(X_5,"sys","supplier");
    X_9 := sql.bind_idxbat(X_5,"sys","supplier","supplier_s_nationkey_fkey",0);
    (X_12,r1_12) := sql.bind_idxbat(X_5,"sys","supplier","supplier_s_nationkey_fkey",2);
    X_15 := sql.bind_idxbat(X_5,"sys","supplier","supplier_s_nationkey_fkey",1);
    X_17 := sql.delta(X_9,X_12,r1_12,X_15);
    X_18 := algebra.leftfetchjoin(X_6,X_17);
    X_19:bat[:oid,:oid]  := sql.tid(X_5,"sys","nation");
    X_21:bat[:oid,:str]  := sql.bind(X_5,"sys","nation","n_name",0);
    (X_23,r1_23) := sql.bind(X_5,"sys","nation","n_name",2);
    X_25:bat[:oid,:str]  := sql.bind(X_5,"sys","nation","n_name",1);
    X_26 := sql.delta(X_21,X_23,r1_23,X_25);
    X_27 := algebra.leftfetchjoin(X_19,X_26);
    X_28 := algebra.subselect(X_27,A0,A0,true,true,false);
    X_30 := algebra.leftfetchjoin(X_28,X_19);
    (X_31,r1_32) := algebra.join(X_18,X_30);
    X_33 := algebra.leftfetchjoin(X_31,X_6);
    X_34:bat[:oid,:oid]  := sql.tid(X_5,"sys","partsupp");
    X_36 := sql.bind_idxbat(X_5,"sys","partsupp","partsupp_ps_suppkey_fkey",0);
    (X_38,r1_39) := sql.bind_idxbat(X_5,"sys","partsupp","partsupp_ps_suppkey_fkey",2);
    X_41 := sql.bind_idxbat(X_5,"sys","partsupp","partsupp_ps_suppkey_fkey",1);
    X_42 := sql.delta(X_36,X_38,r1_39,X_41);
    X_43 := algebra.leftfetchjoin(X_34,X_42);
    (X_44,r1_45) := algebra.join(X_33,X_43);
    X_46:bat[:oid,:int]  := sql.bind(X_5,"sys","partsupp","ps_partkey",0);
    (X_49,r1_50) := sql.bind(X_5,"sys","partsupp","ps_partkey",2);
    X_52:bat[:oid,:int]  := sql.bind(X_5,"sys","partsupp","ps_partkey",1);
    X_54 := sql.delta(X_46,X_49,r1_50,X_52);
    X_55:bat[:oid,:int]  := algebra.leftfetchjoinPath(r1_45,X_34,X_54);
    (X_56,r1_58,r2_58) := group.subgroupdone(X_55);
    X_59 := algebra.leftfetchjoin(r1_58,X_55);
    X_61:bat[:oid,:lng]  := sql.bind(X_5,"sys","partsupp","ps_supplycost",0);
    (X_63,r1_65) := sql.bind(X_5,"sys","partsupp","ps_supplycost",2);
    X_65:bat[:oid,:lng]  := sql.bind(X_5,"sys","partsupp","ps_supplycost",1);
    X_66 := sql.delta(X_61,X_63,r1_65,X_65);
    X_67 := algebra.leftfetchjoin(X_34,X_66);
    X_68 := algebra.leftfetchjoin(r1_45,X_67);
    X_69:bat[:oid,:int]  := sql.bind(X_5,"sys","partsupp","ps_availqty",0);
    (X_72,r1_74) := sql.bind(X_5,"sys","partsupp","ps_availqty",2);
    X_75:bat[:oid,:int]  := sql.bind(X_5,"sys","partsupp","ps_availqty",1);
    X_76 := sql.delta(X_69,X_72,r1_74,X_75);
    X_77 := algebra.leftfetchjoin(X_34,X_76);
    X_78 := algebra.leftfetchjoin(r1_45,X_77);
    X_79:bat[:oid,:lng]  := batcalc.*(X_68,X_78);
    X_80:bat[:oid,:lng]  := aggr.subsum(X_79,X_56,r1_58,true,true);
    X_60 := bat.mirror(X_59);
    X_82 := algebra.subselect(X_27,A2,A2,true,true,false);
    X_84 := algebra.leftfetchjoin(X_82,X_19);
    (X_85,r1_111) := algebra.join(X_18,X_84);
    X_87 := algebra.leftfetchjoin(X_85,X_6);
    (X_88,r1_124) := algebra.join(X_87,X_43);
    X_91 := algebra.leftfetchjoin(r1_124,X_67);
    X_92 := algebra.leftfetchjoin(r1_124,X_77);
    X_93:bat[:oid,:lng]  := batcalc.*(X_91,X_92);
    X_94:lng  := aggr.sum(X_93);
    X_95 := calc.*(X_94,A1);
    X_96 := sql.single(X_95);
    X_98:bat[:oid,:lng]  := batsql.dec_round(X_96,100:lng);
    (X_99,r1_157) := algebra.thetajoin(X_80,X_98,1);
    X_101 := algebra.tinter(X_60,X_99);
    X_102 := algebra.leftfetchjoin(X_101,X_80);
    (X_103,r1_161,r2_161) := algebra.subsort(X_102,true,false);
    X_108:bat[:oid,:int]  := algebra.leftfetchjoinPath(r1_161,X_101,X_59);
    X_109 := algebra.leftfetchjoin(r1_161,X_102);
    X_110 := sql.resultSet(2,1,X_108);
    sql.rsColumn(X_110,"sys.partsupp","ps_partkey","int",32,0,X_108);
    sql.rsColumn(X_110,"sys.L1","value","decimal",19,2,X_109);
    X_124 := io.stdout();
    sql.exportResult(X_124,X_110);
end s2_1;
# querylog.define("explain select\n\tps_partkey,\n\tsum(ps_supplycost * ps_availqty) as value\nfrom\n\tpartsupp,\n\tsupplier,\n\tnation\nwhere\n\tps_suppkey = s_suppkey\n\tand s_nationkey = n_nationkey\n\tand n_name = \\'GERMANY\\'\ngroup by\n\tps_partkey \nhaving\n\tsum(ps_supplycost * ps_availqty) >\n\t(\n\t\tselect\n\t\t\tsum(ps_supplycost * ps_availqty) * 0.0100000000\n\t\t\t-- The above constant needs to be adjusted according\n\t\t\t-- to the scale factor (SF): constant = 0.0001 / SF.\n\t\tfrom\n\t\t\tpartsupp,\n\t\t\tsupplier,\n\t\t\tnation\n\t\twhere\n\t\t\tps_suppkey = s_suppkey\n\t\t\tand s_nationkey = n_nationkey\n\t\t\tand n_name = \\'GERMANY\\'\n\t)\norder by\n\tvalue desc;","sequential_pipe")

# 22:53:28 >  
# 22:53:28 >  "Done."
# 22:53:28 >  

