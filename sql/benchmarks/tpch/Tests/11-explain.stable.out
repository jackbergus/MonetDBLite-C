stdout of test '11-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:27 >  
# 22:53:27 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:27 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:28 >  
# 22:53:28 >  "/usr/bin/python2" "11-explain.SQL.py" "11-explain"
# 22:53:28 >  

#set optimizer = 'sequential_pipe';
#explain select
#	ps_partkey,
#	sum(ps_supplycost * ps_availqty) as value
#from
#	partsupp,
#	supplier,
#	nation
#where
#	ps_suppkey = s_suppkey
#	and s_nationkey = n_nationkey
#	and n_name = 'GERMANY'
#group by
#	ps_partkey 
#having
#	sum(ps_supplycost * ps_availqty) >
#	(
#		select
#			sum(ps_supplycost * ps_availqty) * 0.0100000000
#			-- The above constant needs to be adjusted according
#			-- to the scale factor (SF): constant = 0.0001 / SF.
#		from
#			partsupp,
#			supplier,
#			nation
#		where
#			ps_suppkey = s_suppkey
#			and s_nationkey = n_nationkey
% .explain # table_name
% mal # name
% clob # type
% 812 # length
function user.s2_1(A0:str,A1:sht,A2:str):void;
    X_127:void := querylog.define("explain select\n\tps_partkey,\n\tsum(ps_supplycost * ps_availqty) as value\nfrom\n\tpartsupp,\n\tsupplier,\n\tnation\nwhere\n\tps_suppkey = s_suppkey\n\tand s_nationkey = n_nationkey\n\tand n_name = \\'GERMANY\\'\ngroup by\n\tps_partkey having\n\t\tsum(ps_supplycost * ps_availqty) > (\n\t\t\tselect\n\t\t\t\tsum(ps_supplycost * ps_availqty) * 0.0100000000\n\t\t\t--\t                                   ^^^^^^^^^^^^\n\t\t\t-- The above constant needs to be adjusted according\n\t\t\t-- to the scale factor (SF): constant = 0.0001 / SF.\n\t\t\tfrom\n\t\t\t\tpartsupp,\n\t\t\t\tsupplier,\n\t\t\t\tnation\n\t\t\twhere\n\t\t\t\tps_suppkey = s_suppkey\n\t\t\t\tand s_nationkey = n_nationkey\n\t\t\t\tand n_name = \\'GERMANY\\'\n\t\t)\norder by\n\tvalue desc;","sequential_pipe",83);
    X_5 := sql.mvc();
    C_6:bat[:oid,:oid] := sql.tid(X_5,"sys","supplier");
    X_9:bat[:oid,:oid]  := sql.bind_idxbat(X_5,"sys","supplier","supplier_s_nationkey_fkey",0);
    (X_12,r1_12) := sql.bind_idxbat(X_5,"sys","supplier","supplier_s_nationkey_fkey",2);
    X_15:bat[:oid,:oid]  := sql.bind_idxbat(X_5,"sys","supplier","supplier_s_nationkey_fkey",1);
    X_17 := sql.delta(X_9,X_12,r1_12,X_15);
    X_18 := algebra.leftfetchjoin(C_6,X_17);
    C_19:bat[:oid,:oid] := sql.tid(X_5,"sys","nation");
    X_21:bat[:oid,:str]  := sql.bind(X_5,"sys","nation","n_name",0);
    (C_23,r1_23) := sql.bind(X_5,"sys","nation","n_name",2);
    X_25:bat[:oid,:str]  := sql.bind(X_5,"sys","nation","n_name",1);
    X_26 := sql.delta(X_21,C_23,r1_23,X_25);
    X_27 := algebra.leftfetchjoin(C_19,X_26);
    C_77 := algebra.subselect(X_27,A2,A2,true,false,false);
    X_78 := algebra.leftfetchjoin(C_77,C_19);
    (X_79,r1_106) := algebra.subjoin(X_18,X_78,nil:BAT,nil:BAT,false,nil:lng);
    X_81 := algebra.leftfetchjoin(X_79,C_6);
    C_36:bat[:oid,:oid] := sql.tid(X_5,"sys","partsupp");
    X_38:bat[:oid,:oid]  := sql.bind_idxbat(X_5,"sys","partsupp","partsupp_ps_suppkey_fkey",0);
    (X_40,r1_43) := sql.bind_idxbat(X_5,"sys","partsupp","partsupp_ps_suppkey_fkey",2);
    X_42:bat[:oid,:oid] := sql.bind_idxbat(X_5,"sys","partsupp","partsupp_ps_suppkey_fkey",1);
    X_43 := sql.delta(X_38,X_40,r1_43,X_42);
    X_44 := algebra.leftfetchjoin(C_36,X_43);
    (X_82,r1_120) := algebra.subjoin(X_81,X_44,nil:BAT,nil:BAT,false,nil:lng);
    X_59:bat[:oid,:lng] := sql.bind(X_5,"sys","partsupp","ps_supplycost",0);
    (C_61,r1_65) := sql.bind(X_5,"sys","partsupp","ps_supplycost",2);
    X_63:bat[:oid,:lng] := sql.bind(X_5,"sys","partsupp","ps_supplycost",1);
    X_64 := sql.delta(X_59,C_61,r1_65,X_63);
    X_65 := algebra.leftfetchjoin(C_36,X_64);
    X_84 := algebra.leftfetchjoin(r1_120,X_65);
    X_67:bat[:oid,:int] := sql.bind(X_5,"sys","partsupp","ps_availqty",0);
    (C_69,r1_73) := sql.bind(X_5,"sys","partsupp","ps_availqty",2);
    X_71:bat[:oid,:int] := sql.bind(X_5,"sys","partsupp","ps_availqty",1);
    X_72 := sql.delta(X_67,C_69,r1_73,X_71);
    X_73 := algebra.leftfetchjoin(C_36,X_72);
    X_85 := algebra.leftfetchjoin(r1_120,X_73);
    X_86:bat[:oid,:lng] := batcalc.*(X_84,X_85);
    X_87:lng := aggr.sum(X_86);
    X_88 := calc.*(X_87,A1);
    C_28 := algebra.subselect(X_27,A0,A0,true,false,false);
    X_30 := algebra.leftfetchjoin(C_28,C_19);
    (X_31,r1_33) := algebra.subjoin(X_18,X_30,nil:BAT,nil:BAT,false,nil:lng);
    X_35 := algebra.leftfetchjoin(X_31,C_6);
    (X_45,r1_48) := algebra.subjoin(X_35,X_44,nil:BAT,nil:BAT,false,nil:lng);
    X_66 := algebra.leftfetchjoin(r1_48,X_65);
    X_74 := algebra.leftfetchjoin(r1_48,X_73);
    X_75:bat[:oid,:lng] := batcalc.*(X_66,X_74);
    X_47:bat[:oid,:int] := sql.bind(X_5,"sys","partsupp","ps_partkey",0);
    (C_49,r1_52) := sql.bind(X_5,"sys","partsupp","ps_partkey",2);
    X_51:bat[:oid,:int] := sql.bind(X_5,"sys","partsupp","ps_partkey",1);
    X_52 := sql.delta(X_47,C_49,r1_52,X_51);
    X_53:bat[:oid,:int] := algebra.leftfetchjoinPath(r1_48,C_36,X_52);
    (X_54,r1_58,r2_58) := group.subgroupdone(X_53);
    X_57 := algebra.leftfetchjoin(r1_58,X_53);
    X_76:bat[:oid,:lng] := aggr.subsum(X_75,X_54,r1_58,true,true);
    X_58 := bat.mirror(X_57);
    X_90 := sql.dec_round(X_88,100);
    X_102 := bat.new(nil:oid,nil:str);
    X_110 := bat.append(X_102,"sys.partsupp");
    X_118 := bat.append(X_110,"sys.L1");
    X_105 := bat.new(nil:oid,nil:str);
    X_112 := bat.append(X_105,"ps_partkey");
    X_120 := bat.append(X_112,"value");
    X_106 := bat.new(nil:oid,nil:str);
    X_113 := bat.append(X_106,"int");
    X_122 := bat.append(X_113,"decimal");
    X_107 := bat.new(nil:oid,nil:int);
    X_115 := bat.append(X_107,32);
    X_124 := bat.append(X_115,19);
    X_109 := bat.new(nil:oid,nil:int);
    X_117 := bat.append(X_109,0);
    X_126 := bat.append(X_117,2);
    X_91 := sql.single(X_90);
    (X_92,r1_146) := algebra.subthetajoin(X_76,X_91,nil:BAT,nil:BAT,1,true,nil:lng);
    C_94 := algebra.subinter(X_58,X_92,nil:BAT,nil:BAT,false,nil:lng);
    X_95 := algebra.leftfetchjoin(C_94,X_76);
    (X_96,r1_156,r2_156) := algebra.subsort(X_95,true,false);
    X_99:bat[:oid,:int] := algebra.leftfetchjoinPath(r1_156,C_94,X_57);
    X_100 := algebra.leftfetchjoin(r1_156,X_95);
    sql.resultSet(X_118,X_120,X_122,X_124,X_126,X_99,X_100);
end user.s2_1;

# 22:53:28 >  
# 22:53:28 >  "Done."
# 22:53:28 >  

