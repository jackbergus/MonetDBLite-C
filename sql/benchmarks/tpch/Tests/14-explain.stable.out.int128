stdout of test '14-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:28 >  
# 22:53:28 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:28 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:28 >  
# 22:53:28 >  "/usr/bin/python2" "14-explain.SQL.py" "14-explain"
# 22:53:28 >  

#set optimizer = 'sequential_pipe';
#explain select
#	100.00 * sum(case
#		when p_type like 'PROMO%'
#			then l_extendedprice * (1 - l_discount)
#		else 0
#	end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue
#from
#	lineitem,
#	part
#where
#	l_partkey = p_partkey
#	and l_shipdate >= date '1995-09-01'
#	and l_shipdate < date '1995-09-01' + interval '1' month;
% .explain # table_name
% mal # name
% clob # type
% 406 # length
function user.s4_1():void;
    X_78:void := querylog.define("explain select\n 100.00 * sum(case\n when p_type like \\'PROMO%\\'\n then l_extendedprice * (1 - l_discount)\n else 0\n end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue\nfrom\n lineitem,\n part\nwhere\n l_partkey = p_partkey\n and l_shipdate >= date \\'1995-09-01\\'\n and l_shipdate < date \\'1995-09-01\\' + interval \\'1\\' month;","sequential_pipe",50);
    X_5 := sql.mvc();
    X_9:bat[:date] := sql.bind(X_5,"sys","lineitem","l_shipdate",0);
    C_6:bat[:oid] := sql.tid(X_5,"sys","lineitem");
    X_16:date := mtime.addmonths("1995-09-01",1);
    C_96 := algebra.subselect(X_9,C_6,"1995-09-01",X_16,true,false,false);
    (C_12,r1_17) := sql.bind(X_5,"sys","lineitem","l_shipdate",2);
    C_97 := algebra.subselect(r1_17,nil:bat[:oid],"1995-09-01",X_16,true,false,false);
    X_15:bat[:date] := sql.bind(X_5,"sys","lineitem","l_shipdate",1);
    C_99 := algebra.subselect(X_15,C_6,"1995-09-01",X_16,true,false,false);
    C_17 := sql.subdelta(C_96,C_6,C_12,C_97,C_99);
    X_20:bat[:int] := sql.bind(X_5,"sys","lineitem","l_partkey",0);
    (C_22,r1_34) := sql.bind(X_5,"sys","lineitem","l_partkey",2);
    X_24:bat[:int] := sql.bind(X_5,"sys","lineitem","l_partkey",1);
    X_25 := sql.projectdelta(C_17,X_20,C_22,r1_34,X_24);
    C_26:bat[:oid] := sql.tid(X_5,"sys","part");
    X_28:bat[:int] := sql.bind(X_5,"sys","part","p_partkey",0);
    (C_30,r1_44) := sql.bind(X_5,"sys","part","p_partkey",2);
    X_32:bat[:int] := sql.bind(X_5,"sys","part","p_partkey",1);
    X_33 := sql.projectdelta(C_26,X_28,C_30,r1_44,X_32);
    (X_34,r1_49) := algebra.subjoin(X_25,X_33,nil:BAT,nil:BAT,false,nil:lng);
    X_38:bat[:str] := sql.bind(X_5,"sys","part","p_type",0);
    (C_40,r1_56) := sql.bind(X_5,"sys","part","p_type",2);
    X_42:bat[:str] := sql.bind(X_5,"sys","part","p_type",1);
    X_43 := sql.projectdelta(C_26,X_38,C_40,r1_56,X_42);
    X_44 := algebra.projection(r1_49,X_43);
    X_45:bat[:bit] := batalgebra.like(X_44,"PROMO%");
    X_46:bat[:bit] := batcalc.isnil(X_45);
    X_47:bat[:bit] := batcalc.ifthenelse(X_46,false,X_45);
    X_48:bat[:lng] := sql.bind(X_5,"sys","lineitem","l_extendedprice",0);
    (C_50,r1_77) := sql.bind(X_5,"sys","lineitem","l_extendedprice",2);
    X_52:bat[:lng] := sql.bind(X_5,"sys","lineitem","l_extendedprice",1);
    X_53 := sql.projectdelta(C_17,X_48,C_50,r1_77,X_52);
    X_54 := algebra.projection(X_34,X_53);
    X_55:bat[:lng] := sql.bind(X_5,"sys","lineitem","l_discount",0);
    (C_57,r1_93) := sql.bind(X_5,"sys","lineitem","l_discount",2);
    X_59:bat[:lng] := sql.bind(X_5,"sys","lineitem","l_discount",1);
    X_60 := sql.projectdelta(C_17,X_55,C_57,r1_93,X_59);
    X_61 := algebra.projection(X_34,X_60);
    X_62:bat[:lng] := batcalc.-(100:lng,X_61);
    X_63:bat[:hge] := batcalc.*(X_54,X_62);
    X_64:bat[:hge] := batcalc.ifthenelse(X_47,X_63,0:hge);
    X_65:hge := aggr.sum(X_64);
    X_66:hge := calc.*(1000,X_65);
    X_67 := calc.hge(5,X_66,39,9);
    X_71:hge := aggr.sum(X_63);
    X_72:hge := calc./(X_67,X_71);
    sql.resultSet(".L2","promo_revenue","decimal",39,5,10,X_72);
end user.s4_1;
#inline               actions= 0 time=6 usec 
#candidates           actions= 1 time=62 usec 
#remap                actions=11 time=423 usec 
#costModel            actions= 1 time=117 usec 
#coercions            actions= 1 time=208 usec 
#evaluate             actions=12 time=163 usec 
#emptybind            actions= 0 time=6 usec 
#pushselect           actions= 5 time=134 usec 
#aliases              actions=22 time=128 usec 
#mergetable           actions= 0 time=131 usec 
#deadcode             actions=14 time=118 usec 
#aliases              actions= 0 time=8 usec 
#constants            actions=18 time=130 usec 
#commonTerms          actions= 3 time=86 usec 
#projectionpath       actions= 3 time=79 usec 
#reorder              actions= 1 time=98 usec 
#deadcode             actions= 6 time=76 usec 
#reduce               actions=103 time=105 usec 
#matpack              actions= 0 time=6 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=3 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=73 usec 
#garbageCollector     actions= 1 time=76 usec 
#total                actions= 1 time=2323 usec 

# 22:53:29 >  
# 22:53:29 >  "Done."
# 22:53:29 >  

