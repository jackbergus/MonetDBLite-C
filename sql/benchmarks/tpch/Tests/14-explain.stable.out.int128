stdout of test '14-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:28 >  
# 22:53:28 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:28 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:28 >  
# 22:53:28 >  "/usr/bin/python2" "14-explain.SQL.py" "14-explain"
# 22:53:28 >  

#set optimizer = 'sequential_pipe';
#explain select
#	100.00 * sum(case
#		when p_type like 'PROMO%'
#			then l_extendedprice * (1 - l_discount)
#		else 0
#	end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue
#from
#	lineitem,
#	part
#where
#	l_partkey = p_partkey
#	and l_shipdate >= date '1995-09-01'
#	and l_shipdate < date '1995-09-01' + interval '1' month;
% .explain # table_name
% mal # name
% clob # type
% 405 # length
function user.s2_1{autoCommit=true}(A0:sht,A1:str,A2:bte,A3:bte,A4:bte,A5:date,A6:date,A7:int):void;
    X_10 := sql.mvc();
    X_14:bat[:oid,:date]  := sql.bind(X_10,"sys","lineitem","l_shipdate",0);
    X_11:bat[:oid,:oid]  := sql.tid(X_10,"sys","lineitem");
    X_22 := mtime.addmonths(A6,A7);
    X_116 := algebra.subselect(X_14,X_11,A5,X_22,true,false,false);
    (X_17,r1_18) := sql.bind(X_10,"sys","lineitem","l_shipdate",2);
    X_117 := algebra.subselect(r1_18,nil:bat[:oid,:oid],A5,X_22,true,false,false);
    X_20:bat[:oid,:date]  := sql.bind(X_10,"sys","lineitem","l_shipdate",1);
    X_119 := algebra.subselect(X_20,X_11,A5,X_22,true,false,false);
    X_23 := sql.subdelta(X_116,X_11,X_17,X_117,X_119);
    X_25:bat[:oid,:oid]  := sql.bind_idxbat(X_10,"sys","lineitem","lineitem_l_partkey_fkey",0);
    (X_27,r1_33) := sql.bind_idxbat(X_10,"sys","lineitem","lineitem_l_partkey_fkey",2);
    X_29:bat[:oid,:oid]  := sql.bind_idxbat(X_10,"sys","lineitem","lineitem_l_partkey_fkey",1);
    X_30 := sql.projectdelta(X_23,X_25,X_27,r1_33,X_29);
    X_31:bat[:oid,:oid]  := sql.tid(X_10,"sys","part");
    (X_33,r1_41) := algebra.subjoin(X_30,X_31,nil:BAT,nil:BAT,true,nil:lng);
    X_38:bat[:oid,:str]  := sql.bind(X_10,"sys","part","p_type",0);
    (X_41,r1_49) := sql.bind(X_10,"sys","part","p_type",2);
    X_43:bat[:oid,:str]  := sql.bind(X_10,"sys","part","p_type",1);
    X_44 := sql.projectdelta(X_31,X_38,X_41,r1_49,X_43);
    X_45 := algebra.leftfetchjoin(r1_41,X_44);
    X_46:bat[:oid,:bit]  := batalgebra.like(X_45,A1);
    X_47:bat[:oid,:bit]  := batcalc.isnil(X_46);
    X_49:bat[:oid,:bit]  := batcalc.ifthenelse(X_47,false,X_46);
    X_50:bat[:oid,:lng]  := sql.bind(X_10,"sys","lineitem","l_extendedprice",0);
    (X_54,r1_72) := sql.bind(X_10,"sys","lineitem","l_extendedprice",2);
    X_57:bat[:oid,:lng]  := sql.bind(X_10,"sys","lineitem","l_extendedprice",1);
    X_59 := sql.projectdelta(X_23,X_50,X_54,r1_72,X_57);
    X_60 := algebra.leftfetchjoin(X_33,X_59);
    X_61:bat[:oid,:hge]  := batcalc.hge(2,X_60,33,2);
    X_63 := calc.lng(A2,15,2);
    X_65:bat[:oid,:lng]  := sql.bind(X_10,"sys","lineitem","l_discount",0);
    (X_68,r1_90) := sql.bind(X_10,"sys","lineitem","l_discount",2);
    X_70:bat[:oid,:lng]  := sql.bind(X_10,"sys","lineitem","l_discount",1);
    X_71 := sql.projectdelta(X_23,X_65,X_68,r1_90,X_70);
    X_72 := algebra.leftfetchjoin(X_33,X_71);
    X_73:bat[:oid,:lng]  := batcalc.-(X_63,X_72);
    X_74:bat[:oid,:hge]  := batcalc.*(X_61,X_73);
    X_75 := calc.hge(A3,33,4);
    X_77:bat[:oid,:hge]  := batcalc.ifthenelse(X_49,X_74,X_75);
    X_78:hge  := aggr.sum(X_77);
    X_79 := calc.hge(4,X_78,37,8);
    X_83 := calc.lng(A4,15,2);
    X_84:bat[:oid,:lng]  := batcalc.-(X_83,X_72);
    X_85:bat[:oid,:hge]  := batcalc.*(X_61,X_84);
    X_86:hge  := aggr.sum(X_85);
    X_87 := calc./(X_79,X_86);
    X_88 := calc.*(A0,X_87);
    sql.exportValue(1,".L2","promo_revenue","decimal",39,2,8,X_88,"");
end s2_1;
# querylog.define("explain select\n\t100.00 * sum(case\n\t\twhen p_type like \\'PROMO%\\'\n\t\t\tthen l_extendedprice * (1 - l_discount)\n\t\telse 0\n\tend) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue\nfrom\n\tlineitem,\n\tpart\nwhere\n\tl_partkey = p_partkey\n\tand l_shipdate >= date \\'1995-09-01\\'\n\tand l_shipdate < date \\'1995-09-01\\' + interval \\'1\\' month;","sequential_pipe")

# 22:53:29 >  
# 22:53:29 >  "Done."
# 22:53:29 >  

