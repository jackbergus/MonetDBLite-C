stdout of test '11-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:27 >  
# 22:53:27 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:27 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:28 >  
# 22:53:28 >  "/usr/bin/python2" "11-explain.SQL.py" "11-explain"
# 22:53:28 >  

#set optimizer = 'sequential_pipe';
#explain select
#	ps_partkey,
#	sum(ps_supplycost * ps_availqty) as value
#from
#	partsupp,
#	supplier,
#	nation
#where
#	ps_suppkey = s_suppkey
#	and s_nationkey = n_nationkey
#	and n_name = 'GERMANY'
#group by
#	ps_partkey 
#having
#	sum(ps_supplycost * ps_availqty) >
#	(
#		select
#			sum(ps_supplycost * ps_availqty) * 0.0100000000
#			-- The above constant needs to be adjusted according
#			-- to the scale factor (SF): constant = 0.0001 / SF.
#		from
#			partsupp,
#			supplier,
#			nation
#		where
#			ps_suppkey = s_suppkey
#			and s_nationkey = n_nationkey
% .explain # table_name
% mal # name
% clob # type
% 812 # length
function user.s2_1{autoCommit=true}(A0:str,A1:sht,A2:str):void;
    X_150:void := querylog.define("explain select\n\tps_partkey,\n\tsum(ps_supplycost * ps_availqty) as value\nfrom\n\tpartsupp,\n\tsupplier,\n\tnation\nwhere\n\tps_suppkey = s_suppkey\n\tand s_nationkey = n_nationkey\n\tand n_name = \\'GERMANY\\'\ngroup by\n\tps_partkey having\n\t\tsum(ps_supplycost * ps_availqty) > (\n\t\t\tselect\n\t\t\t\tsum(ps_supplycost * ps_availqty) * 0.0100000000\n\t\t\t--\t                                   ^^^^^^^^^^^^\n\t\t\t-- The above constant needs to be adjusted according\n\t\t\t-- to the scale factor (SF): constant = 0.0001 / SF.\n\t\t\tfrom\n\t\t\t\tpartsupp,\n\t\t\t\tsupplier,\n\t\t\t\tnation\n\t\t\twhere\n\t\t\t\tps_suppkey = s_suppkey\n\t\t\t\tand s_nationkey = n_nationkey\n\t\t\t\tand n_name = \\'GERMANY\\'\n\t\t)\norder by\n\tvalue desc;","sequential_pipe",87);
    X_5 := sql.mvc();
    X_78:bat[:oid,:oid] := sql.tid(X_5,"sys","supplier");
    X_9:bat[:oid,:oid]  := sql.bind_idxbat(X_5,"sys","supplier","supplier_s_nationkey_fkey",0);
    (X_12,r1_12) := sql.bind_idxbat(X_5,"sys","supplier","supplier_s_nationkey_fkey",2);
    X_15:bat[:oid,:oid]  := sql.bind_idxbat(X_5,"sys","supplier","supplier_s_nationkey_fkey",1);
    X_17 := sql.delta(X_9,X_12,r1_12,X_15);
    X_80 := algebra.leftfetchjoin(X_78,X_17);
    X_81:bat[:oid,:oid] := sql.tid(X_5,"sys","nation");
    X_21:bat[:oid,:str]  := sql.bind(X_5,"sys","nation","n_name",0);
    (X_23,r1_23) := sql.bind(X_5,"sys","nation","n_name",2);
    X_25:bat[:oid,:str]  := sql.bind(X_5,"sys","nation","n_name",1);
    X_26 := sql.delta(X_21,X_23,r1_23,X_25);
    X_83 := algebra.leftfetchjoin(X_81,X_26);
    X_84 := algebra.subselect(X_83,A2,A2,true,true,false);
    X_86 := algebra.leftfetchjoin(X_84,X_81);
    (X_87,r1_108) := algebra.subjoin(X_80,X_86,nil:BAT,nil:BAT,false,nil:lng);
    X_92 := algebra.leftfetchjoin(X_87,X_78);
    X_93:bat[:oid,:oid] := sql.tid(X_5,"sys","partsupp");
    X_39:bat[:oid,:oid] := sql.bind_idxbat(X_5,"sys","partsupp","partsupp_ps_suppkey_fkey",0);
    (X_41,r1_42) := sql.bind_idxbat(X_5,"sys","partsupp","partsupp_ps_suppkey_fkey",2);
    X_43:bat[:oid,:oid]  := sql.bind_idxbat(X_5,"sys","partsupp","partsupp_ps_suppkey_fkey",1);
    X_44 := sql.delta(X_39,X_41,r1_42,X_43);
    X_95 := algebra.leftfetchjoin(X_93,X_44);
    (X_96,r1_122) := algebra.subjoin(X_92,X_95,nil:BAT,nil:BAT,false,nil:lng);
    X_60:bat[:oid,:lng] := sql.bind(X_5,"sys","partsupp","ps_supplycost",0);
    (X_62,r1_64) := sql.bind(X_5,"sys","partsupp","ps_supplycost",2);
    X_64:bat[:oid,:lng] := sql.bind(X_5,"sys","partsupp","ps_supplycost",1);
    X_65 := sql.delta(X_60,X_62,r1_64,X_64);
    X_98:bat[:oid,:lng] := algebra.leftfetchjoinPath(r1_122,X_93,X_65);
    X_67:bat[:oid,:int] := sql.bind(X_5,"sys","partsupp","ps_availqty",0);
    (X_69,r1_77) := sql.bind(X_5,"sys","partsupp","ps_availqty",2);
    X_71:bat[:oid,:int] := sql.bind(X_5,"sys","partsupp","ps_availqty",1);
    X_72 := sql.delta(X_67,X_69,r1_77,X_71);
    X_99:bat[:oid,:int] := algebra.leftfetchjoinPath(r1_122,X_93,X_72);
    X_100:bat[:oid,:hge] := batcalc.*(X_98,X_99);
    X_101:hge := aggr.sum(X_100);
    X_102 := calc.*(X_101,A1);
    X_6:bat[:oid,:oid] := sql.tid(X_5,"sys","supplier");
    X_18 := algebra.leftfetchjoin(X_6,X_17);
    X_19:bat[:oid,:oid] := sql.tid(X_5,"sys","nation");
    X_27 := algebra.leftfetchjoin(X_19,X_26);
    X_28 := algebra.subselect(X_27,A0,A0,true,true,false);
    X_30 := algebra.leftfetchjoin(X_28,X_19);
    (X_31,r1_32) := algebra.subjoin(X_18,X_30,nil:BAT,nil:BAT,false,nil:lng);
    X_36 := algebra.leftfetchjoin(X_31,X_6);
    X_37:bat[:oid,:oid] := sql.tid(X_5,"sys","partsupp");
    X_45 := algebra.leftfetchjoin(X_37,X_44);
    (X_46,r1_47) := algebra.subjoin(X_36,X_45,nil:BAT,nil:BAT,false,nil:lng);
    X_66:bat[:oid,:lng] := algebra.leftfetchjoinPath(r1_47,X_37,X_65);
    X_73:bat[:oid,:int] := algebra.leftfetchjoinPath(r1_47,X_37,X_72);
    X_74:bat[:oid,:hge] := batcalc.*(X_66,X_73);
    X_48:bat[:oid,:int] := sql.bind(X_5,"sys","partsupp","ps_partkey",0);
    (X_50,r1_51) := sql.bind(X_5,"sys","partsupp","ps_partkey",2);
    X_52:bat[:oid,:int] := sql.bind(X_5,"sys","partsupp","ps_partkey",1);
    X_53 := sql.delta(X_48,X_50,r1_51,X_52);
    X_54:bat[:oid,:int] := algebra.leftfetchjoinPath(r1_47,X_37,X_53);
    (X_55,r1_57,r2_57) := group.subgroupdone(X_54);
    X_58 := algebra.leftfetchjoin(r1_57,X_54);
    X_75:bat[:oid,:hge] := aggr.subsum(X_74,X_55,r1_57,true,true);
    X_59 := bat.mirror(X_58);
    X_104 := sql.dec_round(X_102,100);
    X_122 := bat.new(nil:oid,nil:str);
    X_130 := bat.append(X_122,"sys.partsupp");
    X_140 := bat.append(X_130,"sys.L1");
    X_125 := bat.new(nil:oid,nil:str);
    X_132 := bat.append(X_125,"ps_partkey");
    X_142 := bat.append(X_132,"value");
    X_126 := bat.new(nil:oid,nil:str);
    X_134 := bat.append(X_126,"int");
    X_144 := bat.append(X_134,"decimal");
    X_127 := bat.new(nil:oid,nil:int);
    X_136 := bat.append(X_127,32);
    X_146 := bat.append(X_136,39);
    X_129 := bat.new(nil:oid,nil:int);
    X_138 := bat.append(X_129,0);
    X_148 := bat.append(X_138,2);
    X_105 := sql.single(X_104);
    (X_106,r1_152) := algebra.subthetajoin(X_75,X_105,nil:BAT,nil:BAT,1,true,nil:lng);
    X_113 := algebra.tinter(X_59,X_106);
    X_114 := algebra.leftfetchjoin(X_113,X_75);
    (X_115,r1_161,r2_161) := algebra.subsort(X_114,true,false);
    X_119:bat[:oid,:int] := algebra.leftfetchjoinPath(r1_161,X_113,X_58);
    X_120 := algebra.leftfetchjoin(r1_161,X_114);
    sql.resultSet(X_140,X_142,X_144,X_146,X_148,X_119,X_120);
end user.s2_1;

# 22:53:28 >  
# 22:53:28 >  "Done."
# 22:53:28 >  

