stdout of test '11-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:27 >  
# 22:53:27 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:27 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:28 >  
# 22:53:28 >  "/usr/bin/python2" "11-explain.SQL.py" "11-explain"
# 22:53:28 >  

#set optimizer = 'sequential_pipe';
#explain select
#	ps_partkey,
#	sum(ps_supplycost * ps_availqty) as value
#from
#	partsupp,
#	supplier,
#	nation
#where
#	ps_suppkey = s_suppkey
#	and s_nationkey = n_nationkey
#	and n_name = 'GERMANY'
#group by
#	ps_partkey 
#having
#	sum(ps_supplycost * ps_availqty) >
#	(
#		select
#			sum(ps_supplycost * ps_availqty) * 0.0100000000
#			-- The above constant needs to be adjusted according
#			-- to the scale factor (SF): constant = 0.0001 / SF.
#		from
#			partsupp,
#			supplier,
#			nation
#		where
#			ps_suppkey = s_suppkey
#			and s_nationkey = n_nationkey
% .explain # table_name
% mal # name
% clob # type
% 562 # length
function user.s2_1():void;
    X_117:void := querylog.define("explain select\n ps_partkey,\n sum(ps_supplycost * ps_availqty) as value\nfrom\n partsupp,\n supplier,\n nation\nwhere\n ps_suppkey = s_suppkey\n and s_nationkey = n_nationkey\n and n_name = \\'GERMANY\\'\ngroup by\n ps_partkey having\n sum(ps_supplycost * ps_availqty) > (\n select\n sum(ps_supplycost * ps_availqty) * 0.0100000000\n \n \n \n from\n partsupp,\n supplier,\n nation\n where\n ps_suppkey = s_suppkey\n and s_nationkey = n_nationkey\n and n_name = \\'GERMANY\\'\n )\norder by\n value desc;","sequential_pipe",76);
    X_3 := sql.mvc();
    C_4:bat[:oid] := sql.tid(X_3,"sys","supplier");
    X_7:bat[:oid] := sql.bind_idxbat(X_3,"sys","supplier","supplier_s_nationkey_fkey",0);
    (X_10,r1_11) := sql.bind_idxbat(X_3,"sys","supplier","supplier_s_nationkey_fkey",2);
    X_13:bat[:oid] := sql.bind_idxbat(X_3,"sys","supplier","supplier_s_nationkey_fkey",1);
    X_15 := sql.delta(X_7,X_10,r1_11,X_13);
    X_16 := algebra.projection(C_4,X_15);
    C_17:bat[:oid] := sql.tid(X_3,"sys","nation");
    X_19:bat[:str] := sql.bind(X_3,"sys","nation","n_name",0);
    (C_21,r1_22) := sql.bind(X_3,"sys","nation","n_name",2);
    X_23:bat[:str] := sql.bind(X_3,"sys","nation","n_name",1);
    X_24 := sql.delta(X_19,C_21,r1_22,X_23);
    X_25 := algebra.projection(C_17,X_24);
    C_26 := algebra.subselect(X_25,"GERMANY","GERMANY",true,false,false);
    X_29 := algebra.projection(C_26,C_17);
    (X_30,r1_33) := algebra.subjoin(X_16,X_29,nil:BAT,nil:BAT,false,nil:lng);
    X_34 := algebra.projection(X_30,C_4);
    C_35:bat[:oid] := sql.tid(X_3,"sys","partsupp");
    X_37:bat[:oid] := sql.bind_idxbat(X_3,"sys","partsupp","partsupp_ps_suppkey_fkey",0);
    (X_39,r1_43) := sql.bind_idxbat(X_3,"sys","partsupp","partsupp_ps_suppkey_fkey",2);
    X_41:bat[:oid] := sql.bind_idxbat(X_3,"sys","partsupp","partsupp_ps_suppkey_fkey",1);
    X_42 := sql.delta(X_37,X_39,r1_43,X_41);
    X_43 := algebra.projection(C_35,X_42);
    (X_44,r1_48) := algebra.subjoin(X_34,X_43,nil:BAT,nil:BAT,false,nil:lng);
    X_59:bat[:lng] := sql.bind(X_3,"sys","partsupp","ps_supplycost",0);
    (C_61,r1_67) := sql.bind(X_3,"sys","partsupp","ps_supplycost",2);
    X_63:bat[:lng] := sql.bind(X_3,"sys","partsupp","ps_supplycost",1);
    X_64 := sql.delta(X_59,C_61,r1_67,X_63);
    X_65 := algebra.projection(C_35,X_64);
    X_66 := algebra.projection(r1_48,X_65);
    X_68:bat[:int] := sql.bind(X_3,"sys","partsupp","ps_availqty",0);
    (C_70,r1_80) := sql.bind(X_3,"sys","partsupp","ps_availqty",2);
    X_72:bat[:int] := sql.bind(X_3,"sys","partsupp","ps_availqty",1);
    X_73 := sql.delta(X_68,C_70,r1_80,X_72);
    X_74 := algebra.projection(C_35,X_73);
    X_75 := algebra.projection(r1_48,X_74);
    X_76:bat[:hge] := batcalc.*(X_66,X_75);
    X_78:hge := aggr.sum(X_76);
    X_79:hge := calc.*(X_78,1);
    X_46:bat[:int] := sql.bind(X_3,"sys","partsupp","ps_partkey",0);
    (C_48,r1_52) := sql.bind(X_3,"sys","partsupp","ps_partkey",2);
    X_50:bat[:int] := sql.bind(X_3,"sys","partsupp","ps_partkey",1);
    X_51 := sql.delta(X_46,C_48,r1_52,X_50);
    X_52:bat[:int] := algebra.projectionpath(r1_48,C_35,X_51);
    (X_53,r1_58,r2_58) := group.subgroupdone(X_52);
    X_56 := algebra.projection(r1_58,X_52);
    X_77:bat[:hge] := aggr.subsum(X_76,X_53,r1_58,true,true);
    X_57 := bat.setKey(X_56,true);
    X_58 := bat.mirror(X_57);
    X_81:hge := sql.dec_round(X_79,100);
    X_93 := bat.new(nil:oid,nil:str);
    X_101 := bat.append(X_93,"sys.partsupp");
    X_109 := bat.append(X_101,"sys.L1");
    X_96 := bat.new(nil:oid,nil:str);
    X_103 := bat.append(X_96,"ps_partkey");
    X_111 := bat.append(X_103,"value");
    X_97 := bat.new(nil:oid,nil:str);
    X_104 := bat.append(X_97,"int");
    X_113 := bat.append(X_104,"decimal");
    X_98 := bat.new(nil:oid,nil:int);
    X_106 := bat.append(X_98,32);
    X_115 := bat.append(X_106,39);
    X_100 := bat.new(nil:oid,nil:int);
    X_108 := bat.append(X_100,0);
    X_116 := bat.append(X_108,2);
    X_82 := sql.single(X_81);
    (X_83,r1_155) := algebra.subthetajoin(X_77,X_82,nil:BAT,nil:BAT,1,true,nil:lng);
    C_85 := algebra.subinter(X_58,X_83,nil:BAT,nil:BAT,false,nil:lng);
    X_86 := algebra.projection(C_85,X_77);
    (X_87,r1_165,r2_165) := algebra.subsort(X_86,true,false);
    X_90:bat[:int] := algebra.projectionpath(r1_165,C_85,X_57);
    X_91 := algebra.projection(r1_165,X_86);
    sql.resultSet(X_109,X_111,X_113,X_115,X_116,X_90,X_91);
end user.s2_1;

# 22:53:28 >  
# 22:53:28 >  "Done."
# 22:53:28 >  

