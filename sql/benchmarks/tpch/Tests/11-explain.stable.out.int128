stdout of test '11-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:27 >  
# 22:53:27 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:27 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:28 >  
# 22:53:28 >  "/usr/bin/python2" "11-explain.SQL.py" "11-explain"
# 22:53:28 >  

#set optimizer = 'sequential_pipe';
#explain select
#	ps_partkey,
#	sum(ps_supplycost * ps_availqty) as value
#from
#	partsupp,
#	supplier,
#	nation
#where
#	ps_suppkey = s_suppkey
#	and s_nationkey = n_nationkey
#	and n_name = 'GERMANY'
#group by
#	ps_partkey 
#having
#	sum(ps_supplycost * ps_availqty) >
#	(
#		select
#			sum(ps_supplycost * ps_availqty) * 0.0100000000
#			-- The above constant needs to be adjusted according
#			-- to the scale factor (SF): constant = 0.0001 / SF.
#		from
#			partsupp,
#			supplier,
#			nation
#		where
#			ps_suppkey = s_suppkey
#			and s_nationkey = n_nationkey
% .explain # table_name
% mal # name
% clob # type
% 562 # length
function user.s4_1():void;
    X_195:void := querylog.define("explain select\n ps_partkey,\n sum(ps_supplycost * ps_availqty) as value\nfrom\n partsupp,\n supplier,\n nation\nwhere\n ps_suppkey = s_suppkey\n and s_nationkey = n_nationkey\n and n_name = \\'GERMANY\\'\ngroup by\n ps_partkey having\n sum(ps_supplycost * ps_availqty) > (\n select\n sum(ps_supplycost * ps_availqty) * 0.0100000000\n \n \n \n from\n partsupp,\n supplier,\n nation\n where\n ps_suppkey = s_suppkey\n and s_nationkey = n_nationkey\n and n_name = \\'GERMANY\\'\n )\norder by\n value desc;","sequential_pipe",64);
    X_0 := sql.mvc();
    C_1:bat[:oid] := sql.tid(X_0,"sys","supplier");
    X_4:bat[:oid] := sql.bind_idxbat(X_0,"sys","supplier","supplier_s_nationkey_fkey",0);
    (X_7,r1_11) := sql.bind_idxbat(X_0,"sys","supplier","supplier_s_nationkey_fkey",2);
    X_10:bat[:oid] := sql.bind_idxbat(X_0,"sys","supplier","supplier_s_nationkey_fkey",1);
    X_12 := sql.delta(X_4,X_7,r1_11,X_10);
    X_13 := algebra.projection(C_1,X_12);
    C_14:bat[:oid] := sql.tid(X_0,"sys","nation");
    X_16:bat[:str] := sql.bind(X_0,"sys","nation","n_name",0);
    X_22 := algebra.projection(C_14,X_16);
    C_24 := algebra.subselect(X_22,"GERMANY","GERMANY",true,false,false);
    X_28 := algebra.projection(C_24,C_14);
    (X_29,r1_33) := algebra.subjoin(X_13,X_28,nil:BAT,nil:BAT,false,nil:lng);
    X_34 := algebra.projection(X_29,C_1);
    C_35:bat[:oid] := sql.tid(X_0,"sys","partsupp");
    X_37:bat[:oid] := sql.bind_idxbat(X_0,"sys","partsupp","partsupp_ps_suppkey_fkey",0);
    (X_39,r1_43) := sql.bind_idxbat(X_0,"sys","partsupp","partsupp_ps_suppkey_fkey",2);
    X_41:bat[:oid] := sql.bind_idxbat(X_0,"sys","partsupp","partsupp_ps_suppkey_fkey",1);
    X_42 := sql.delta(X_37,X_39,r1_43,X_41);
    X_43 := algebra.projection(C_35,X_42);
    (X_44,r1_48) := algebra.subjoin(X_34,X_43,nil:BAT,nil:BAT,false,nil:lng);
    X_61:bat[:lng] := sql.bind(X_0,"sys","partsupp","ps_supplycost",0);
    X_67 := algebra.projection(C_35,X_61);
    X_68 := algebra.projection(r1_48,X_67);
    X_74:bat[:int] := sql.bind(X_0,"sys","partsupp","ps_availqty",0);
    X_80 := algebra.projection(C_35,X_74);
    X_81 := algebra.projection(r1_48,X_80);
    X_82:bat[:hge] := batcalc.*(X_68,X_81);
    X_144:hge := aggr.sum(X_82);
    X_146:hge := calc.*(X_144,1);
    X_46:bat[:int] := sql.bind(X_0,"sys","partsupp","ps_partkey",0);
    X_53:bat[:int] := algebra.projectionpath(r1_48,C_35,X_46);
    (X_54,r1_58,r2_58) := group.subgroupdone(X_53);
    X_57 := algebra.projection(r1_58,X_53);
    X_84:bat[:hge] := aggr.subsum(X_82,X_54,r1_58,true,true);
    X_58 := bat.setKey(X_57,true);
    X_60 := bat.mirror(X_58);
    X_149:hge := sql.dec_round(X_146,100);
    X_168 := bat.new(nil:str);
    X_175 := bat.append(X_168,"sys.partsupp");
    X_185 := bat.append(X_175,"sys.L2");
    X_170 := bat.new(nil:str);
    X_177 := bat.append(X_170,"ps_partkey");
    X_187 := bat.append(X_177,"value");
    X_171 := bat.new(nil:str);
    X_179 := bat.append(X_171,"int");
    X_189 := bat.append(X_179,"decimal");
    X_172 := bat.new(nil:int);
    X_181 := bat.append(X_172,32);
    X_191 := bat.append(X_181,39);
    X_174 := bat.new(nil:int);
    X_183 := bat.append(X_174,0);
    X_193 := bat.append(X_183,2);
    X_150 := sql.single(X_149);
    (X_151,r1_155) := algebra.subthetajoin(X_84,X_150,nil:BAT,nil:BAT,1,true,nil:lng);
    C_158 := algebra.subinter(X_60,X_151,nil:BAT,nil:BAT,false,nil:lng);
    X_160 := algebra.projection(C_158,X_84);
    (X_161,r1_165,r2_165) := algebra.subsort(X_160,true,false);
    X_165:bat[:int] := algebra.projectionpath(r1_165,C_158,X_58);
    X_166 := algebra.projection(r1_165,X_160);
    sql.resultSet(X_185,X_187,X_189,X_191,X_193,X_165,X_166);
end user.s4_1;
#inline               actions= 0 time=9 usec 
#candidates           actions= 1 time=109 usec 
#remap                actions= 4 time=520 usec 
#costModel            actions= 1 time=188 usec 
#coercions            actions= 1 time=300 usec 
#evaluate             actions= 3 time=233 usec 
#emptybind            actions= 0 time=9 usec 
#pushselect           actions= 0 time=12 usec 
#aliases              actions=10 time=204 usec 
#mergetable           actions= 0 time=233 usec 
#deadcode             actions=16 time=192 usec 
#aliases              actions= 0 time=23 usec 
#constants            actions=32 time=203 usec 
#commonTerms          actions=27 time=144 usec 
#projectionpath       actions= 2 time=130 usec 
#reorder              actions= 1 time=191 usec 
#deadcode             actions=29 time=127 usec 
#reduce               actions=120 time=182 usec 
#matpack              actions= 0 time=10 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=7 usec 
#generator            actions= 0 time=3 usec 
#profiler             actions= 1 time=112 usec 
#garbageCollector     actions= 1 time=126 usec 
#total                actions= 1 time=3401 usec 

# 22:53:28 >  
# 22:53:28 >  "Done."
# 22:53:28 >  

