stdout of test '11-explain` in directory 'sql/benchmarks/tpch` itself:


# 22:53:27 >  
# 22:53:27 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34581" "--set" "mapi_usock=/var/tmp/mtest-9096/.s.monetdb.34581" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_tpch" "--set" "mal_listing=0"
# 22:53:27 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_tpch', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34581/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-9096/.s.monetdb.34581
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 22:53:28 >  
# 22:53:28 >  "/usr/bin/python2" "11-explain.SQL.py" "11-explain"
# 22:53:28 >  

#set optimizer = 'sequential_pipe';
#explain select
#	ps_partkey,
#	sum(ps_supplycost * ps_availqty) as value
#from
#	partsupp,
#	supplier,
#	nation
#where
#	ps_suppkey = s_suppkey
#	and s_nationkey = n_nationkey
#	and n_name = 'GERMANY'
#group by
#	ps_partkey 
#having
#	sum(ps_supplycost * ps_availqty) >
#	(
#		select
#			sum(ps_supplycost * ps_availqty) * 0.0100000000
#			-- The above constant needs to be adjusted according
#			-- to the scale factor (SF): constant = 0.0001 / SF.
#		from
#			partsupp,
#			supplier,
#			nation
#		where
#			ps_suppkey = s_suppkey
#			and s_nationkey = n_nationkey
% .explain # table_name
% mal # name
% clob # type
% 562 # length
function user.s4_1():void;
    X_220:void := querylog.define("explain select\n ps_partkey,\n sum(ps_supplycost * ps_availqty) as value\nfrom\n partsupp,\n supplier,\n nation\nwhere\n ps_suppkey = s_suppkey\n and s_nationkey = n_nationkey\n and n_name = \\'GERMANY\\'\ngroup by\n ps_partkey having\n sum(ps_supplycost * ps_availqty) > (\n select\n sum(ps_supplycost * ps_availqty) * 0.0100000000\n \n \n \n from\n partsupp,\n supplier,\n nation\n where\n ps_suppkey = s_suppkey\n and s_nationkey = n_nationkey\n and n_name = \\'GERMANY\\'\n )\norder by\n value desc;","sequential_pipe",63);
    X_0 := sql.mvc();
    C_1:bat[:oid] := sql.tid(X_0,"sys","supplier");
    X_4:bat[:oid] := sql.bind_idxbat(X_0,"sys","supplier","supplier_s_nationkey_fkey",0);
    (X_9,X_10:bat[:oid]) := sql.bind_idxbat(X_0,"sys","supplier","supplier_s_nationkey_fkey",2);
    X_7:bat[:oid] := sql.bind_idxbat(X_0,"sys","supplier","supplier_s_nationkey_fkey",1);
    X_12 := sql.delta(X_4,X_9,X_10,X_7);
    X_13 := algebra.projection(C_1,X_12);
    C_14:bat[:oid] := sql.tid(X_0,"sys","nation");
    X_16:bat[:str] := sql.bind(X_0,"sys","nation","n_name",0);
    X_22 := algebra.projection(C_14,X_16);
    C_24 := algebra.subselect(X_22,"GERMANY","GERMANY",true,false,false);
    X_29 := algebra.projection(C_24,C_14);
    (X_30,X_31) := algebra.subjoin(X_13,X_29,nil:BAT,nil:BAT,false,nil:lng);
    X_35 := algebra.projection(X_30,C_1);
    C_39:bat[:oid] := sql.tid(X_0,"sys","partsupp");
    X_62:bat[:oid] := sql.bind_idxbat(X_0,"sys","partsupp","partsupp_ps_suppkey_fkey",0);
    (X_65,X_66:bat[:oid]) := sql.bind_idxbat(X_0,"sys","partsupp","partsupp_ps_suppkey_fkey",2);
    X_64:bat[:oid] := sql.bind_idxbat(X_0,"sys","partsupp","partsupp_ps_suppkey_fkey",1);
    X_67 := sql.delta(X_62,X_65,X_66,X_64);
    X_68 := algebra.projection(C_39,X_67);
    (X_69,X_70) := algebra.subjoin(X_35,X_68,nil:BAT,nil:BAT,false,nil:lng);
    X_55:bat[:lng] := sql.bind(X_0,"sys","partsupp","ps_supplycost",0);
    X_61 := algebra.projection(C_39,X_55);
    X_81 := algebra.projection(X_70,X_61);
    X_48:bat[:int] := sql.bind(X_0,"sys","partsupp","ps_availqty",0);
    X_54 := algebra.projection(C_39,X_48);
    X_80 := algebra.projection(X_70,X_54);
    X_88:bat[:hge] := batcalc.*(X_81,X_80);
    X_165:hge := aggr.sum(X_88);
    X_167:hge := calc.*(X_165,1);
    X_41:bat[:int] := sql.bind(X_0,"sys","partsupp","ps_partkey",0);
    X_79:bat[:int] := algebra.projectionpath(X_70,C_39,X_41);
    (X_90,X_91,X_92) := group.subgroupdone(X_79);
    X_93 := algebra.projection(X_91,X_79);
    X_94:bat[:hge] := aggr.subsum(X_88,X_90,X_91,true,true);
    X_170:hge := sql.dec_round(X_167,100);
    X_193 := bat.new(nil:str);
    X_200 := bat.append(X_193,"sys.partsupp");
    X_210 := bat.append(X_200,"sys.L4");
    X_195 := bat.new(nil:str);
    X_202 := bat.append(X_195,"ps_partkey");
    X_212 := bat.append(X_202,"value");
    X_196 := bat.new(nil:str);
    X_204 := bat.append(X_196,"int");
    X_214 := bat.append(X_204,"decimal");
    X_197 := bat.new(nil:int);
    X_206 := bat.append(X_197,32);
    X_216 := bat.append(X_206,39);
    X_199 := bat.new(nil:int);
    X_208 := bat.append(X_199,0);
    X_218 := bat.append(X_208,2);
    X_180 := bat.mirror(X_93);
    X_172 := sql.single(X_170);
    (X_173,X_174) := algebra.subthetajoin(X_94,X_172,nil:BAT,nil:BAT,1,true,nil:lng);
    C_181 := algebra.subinter(X_180,X_173,nil:BAT,nil:BAT,false,nil:lng);
    X_183 := algebra.projection(C_181,X_94);
    (X_186,X_187,X_188) := algebra.subsort(X_183,true,false);
    X_190:bat[:int] := algebra.projectionpath(X_187,C_181,X_93);
    X_191 := algebra.projection(X_187,X_183);
    sql.resultSet(X_210,X_212,X_214,X_216,X_218,X_190,X_191);
end user.s4_1;
#inline               actions= 0 time=9 usec 
#candidates           actions= 1 time=109 usec 
#remap                actions= 4 time=520 usec 
#costModel            actions= 1 time=188 usec 
#coercions            actions= 1 time=300 usec 
#evaluate             actions= 3 time=233 usec 
#emptybind            actions= 0 time=9 usec 
#pushselect           actions= 0 time=12 usec 
#aliases              actions=10 time=204 usec 
#mergetable           actions= 0 time=233 usec 
#deadcode             actions=16 time=192 usec 
#aliases              actions= 0 time=23 usec 
#constants            actions=32 time=203 usec 
#commonTerms          actions=27 time=144 usec 
#projectionpath       actions= 2 time=130 usec 
#reorder              actions= 1 time=191 usec 
#deadcode             actions=29 time=127 usec 
#reduce               actions=120 time=182 usec 
#matpack              actions= 0 time=10 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=7 usec 
#generator            actions= 0 time=3 usec 
#profiler             actions= 1 time=112 usec 
#garbageCollector     actions= 1 time=126 usec 
#total                actions= 1 time=3401 usec 

# 22:53:28 >  
# 22:53:28 >  "Done."
# 22:53:28 >  

