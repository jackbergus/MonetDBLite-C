stdout of test '10-explain` in directory 'sql/benchmarks/ssbm` itself:


# 23:10:47 >  
# 23:10:47 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35257" "--set" "mapi_usock=/var/tmp/mtest-17595/.s.monetdb.35257" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_ssbm" "--set" "mal_listing=0"
# 23:10:47 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_ssbm', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:35257/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17595/.s.monetdb.35257
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 23:10:47 >  
# 23:10:47 >  "/usr/bin/python2" "10-explain.SQL.py" "10-explain"
# 23:10:47 >  

#set optimizer = 'sequential_pipe';
#explain
#select c_city, s_city, d_year, sum(lo_revenue) as revenue
#	from customer, lineorder, supplier, dwdate
#	where lo_custkey = c_custkey
#		and lo_suppkey = s_suppkey
#		and lo_orderdate = d_datekey
#		and c_nation = 'UNITED KINGDOM'
#		and (c_city='UNITED KI1' or c_city='UNITED KI5')
#		and (s_city='UNITED KI1' or s_city='UNITED KI5')
#		and s_nation = 'UNITED KINGDOM'
#		and d_yearmonth = 'Dec1997'
#	group by c_city, s_city, d_year
#	order by d_year asc, revenue desc;
% .explain # table_name
% mal # name
% clob # type
% 560 # length
function user.s4_1():void;
    X_206:void := querylog.define("explain\nselect c_city, s_city, d_year, sum(lo_revenue) as revenue\n from customer, lineorder, supplier, dwdate\n where lo_custkey = c_custkey\n and lo_suppkey = s_suppkey\n and lo_orderdate = d_datekey\n and c_nation = \\'UNITED KINGDOM\\'\n and (c_city=\\'UNITED KI1\\' or c_city=\\'UNITED KI5\\')\n and (s_city=\\'UNITED KI1\\' or s_city=\\'UNITED KI5\\')\n and s_nation = \\'UNITED KINGDOM\\'\n and d_yearmonth = \\'Dec1997\\'\n group by c_city, s_city, d_year\n order by d_year asc, revenue desc;","sequential_pipe",82);
    X_165 := bat.new(nil:str);
    X_172 := bat.append(X_165,"sys.customer");
    X_181 := bat.append(X_172,"sys.supplier");
    X_188 := bat.append(X_181,"sys.dwdate");
    X_197 := bat.append(X_188,"sys.L2");
    X_167 := bat.new(nil:str);
    X_174 := bat.append(X_167,"c_city");
    X_183 := bat.append(X_174,"s_city");
    X_190 := bat.append(X_183,"d_year");
    X_199 := bat.append(X_190,"revenue");
    X_168 := bat.new(nil:str);
    X_176 := bat.append(X_168,"clob");
    X_185 := bat.append(X_176,"clob");
    X_192 := bat.append(X_185,"int");
    X_201 := bat.append(X_192,"hugeint");
    X_169 := bat.new(nil:int);
    X_178 := bat.append(X_169,0);
    X_186 := bat.append(X_178,0);
    X_194 := bat.append(X_186,32);
    X_203 := bat.append(X_194,128);
    X_171 := bat.new(nil:int);
    X_180 := bat.append(X_171,0);
    X_187 := bat.append(X_180,0);
    X_196 := bat.append(X_187,0);
    X_205 := bat.append(X_196,0);
    X_0 := sql.mvc();
    C_1:bat[:oid] := sql.tid(X_0,"sys","lineorder");
    X_4:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_custkey_fkey",0);
    (X_7,r1_15) := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_custkey_fkey",2);
    X_10:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_custkey_fkey",1);
    X_13 := sql.projectdelta(C_1,X_4,X_7,r1_15,X_10);
    X_16:bat[:str] := sql.bind(X_0,"sys","customer","c_city",0);
    X_24:bat[:str] := sql.bind(X_0,"sys","customer","c_nation",0);
    C_14:bat[:oid] := sql.tid(X_0,"sys","customer");
    C_32 := algebra.subselect(X_24,C_14,"UNITED KINGDOM","UNITED KINGDOM",true,false,false);
    C_36 := algebra.subselect(X_16,C_32,"UNITED KI1","UNITED KI1",true,false,false);
    C_38 := algebra.subselect(X_16,C_32,"UNITED KI5","UNITED KI5",true,false,false);
    X_39 := bat.mergecand(C_36,C_38);
    (X_41,r1_49) := algebra.subjoin(X_13,X_39,nil:BAT,nil:BAT,false,nil:lng);
    X_46:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_suppkey_fkey",0);
    (X_48,r1_56) := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_suppkey_fkey",2);
    X_50:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_suppkey_fkey",1);
    X_52 := sql.projectdelta(C_1,X_46,X_48,r1_56,X_50);
    X_53 := algebra.projection(X_41,X_52);
    X_56:bat[:str] := sql.bind(X_0,"sys","supplier","s_city",0);
    X_64:bat[:str] := sql.bind(X_0,"sys","supplier","s_nation",0);
    C_54:bat[:oid] := sql.tid(X_0,"sys","supplier");
    C_72 := algebra.subselect(X_64,C_54,"UNITED KINGDOM","UNITED KINGDOM",true,false,false);
    C_76 := algebra.subselect(X_56,C_72,"UNITED KI1","UNITED KI1",true,false,false);
    C_78 := algebra.subselect(X_56,C_72,"UNITED KI5","UNITED KI5",true,false,false);
    X_79 := bat.mergecand(C_76,C_78);
    (X_81,r1_89) := algebra.subjoin(X_53,X_79,nil:BAT,nil:BAT,false,nil:lng);
    X_86:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_orderdate_fkey",0);
    (X_88,r1_96) := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_orderdate_fkey",2);
    X_90:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_orderdate_fkey",1);
    X_92 := sql.projectdelta(C_1,X_86,X_88,r1_96,X_90);
    X_94:bat[:oid] := algebra.projectionpath(X_81,X_41,X_92);
    X_97:bat[:str] := sql.bind(X_0,"sys","dwdate","d_yearmonth",0);
    C_95:bat[:oid] := sql.tid(X_0,"sys","dwdate");
    C_105 := algebra.subselect(X_97,C_95,"Dec1997","Dec1997",true,false,false);
    (X_108,r1_116) := algebra.subjoin(X_94,C_105,nil:BAT,nil:BAT,false,nil:lng);
    X_111:bat[:int] := sql.bind(X_0,"sys","lineorder","lo_revenue",0);
    X_120:bat[:int] := algebra.projectionpath(X_108,X_81,X_41,C_1,X_111);
    X_123:bat[:str] := algebra.projectionpath(X_108,r1_89,X_79,X_56);
    X_127:bat[:str] := algebra.projectionpath(X_108,X_81,r1_49,X_39,X_16);
    X_128:bat[:int] := sql.bind(X_0,"sys","dwdate","d_year",0);
    X_136:bat[:int] := algebra.projectionpath(r1_116,C_105,X_128);
    (X_137,r1_145,r2_145) := group.subgroup(X_136);
    (X_140,r1_148,r2_148) := group.subgroup(X_127,X_137);
    (X_143,r1_151,r2_151) := group.subgroupdone(X_123,X_140);
    X_146:bat[:hge] := aggr.subsum(X_120,X_143,r1_151,true,true);
    X_149 := algebra.projection(r1_151,X_136);
    (X_150,r1_158,r2_158) := algebra.subsort(X_149,false,false);
    (X_155,r1_163,r2_163) := algebra.subsort(X_146,r1_158,r2_158,true,false);
    X_159:bat[:str] := algebra.projectionpath(r1_163,r1_151,X_127);
    X_161:bat[:str] := algebra.projectionpath(r1_163,r1_151,X_123);
    X_162 := algebra.projection(r1_163,X_149);
    X_163 := algebra.projection(r1_163,X_146);
    sql.resultSet(X_197,X_199,X_201,X_203,X_205,X_159,X_161,X_162,X_163);
end user.s4_1;
#inline               actions= 0 time=3 usec 
#candidates           actions= 1 time=57 usec 
#remap                actions= 0 time=4 usec 
#costModel            actions= 1 time=57 usec 
#coercions            actions= 0 time=4 usec 
#evaluate             actions= 7 time=83 usec 
#emptybind            actions= 0 time=6 usec 
#pushselect           actions=15 time=79 usec 
#aliases              actions=23 time=58 usec 
#mergetable           actions= 0 time=61 usec 
#deadcode             actions=17 time=48 usec 
#aliases              actions= 0 time=13 usec 
#constants            actions=26 time=64 usec 
#commonTerms          actions= 0 time=16 usec 
#projectionpath       actions=12 time=50 usec 
#reorder              actions= 1 time=79 usec 
#deadcode             actions=12 time=44 usec 
#reduce               actions=112 time=84 usec 
#matpack              actions= 0 time=5 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=3 usec 
#generator            actions= 0 time=1 usec 
#profiler             actions= 1 time=38 usec 
#garbageCollector     actions= 1 time=47 usec 
#total                actions= 1 time=976 usec 

# 23:10:47 >  
# 23:10:47 >  "Done."
# 23:10:47 >  

