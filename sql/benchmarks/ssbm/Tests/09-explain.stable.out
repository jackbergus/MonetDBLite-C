stdout of test '09-explain` in directory 'sql/benchmarks/ssbm` itself:


# 23:10:47 >  
# 23:10:47 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35257" "--set" "mapi_usock=/var/tmp/mtest-17595/.s.monetdb.35257" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_ssbm" "--set" "mal_listing=0"
# 23:10:47 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_ssbm', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:35257/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17595/.s.monetdb.35257
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 23:10:47 >  
# 23:10:47 >  "/usr/bin/python2" "09-explain.SQL.py" "09-explain"
# 23:10:47 >  

#set optimizer = 'sequential_pipe';
#explain
#select c_city, s_city, d_year, sum(lo_revenue) as revenue
#	from customer, lineorder, supplier, dwdate
#	where lo_custkey = c_custkey
#		and lo_suppkey = s_suppkey
#		and lo_orderdate = d_datekey
#		and c_nation = 'UNITED KINGDOM'
#		and (c_city='UNITED KI1' or c_city='UNITED KI5')
#		and (s_city='UNITED KI1' or s_city='UNITED KI5')
#		and s_nation = 'UNITED KINGDOM'
#		and d_year >= 1992 and d_year <= 1997
#	group by c_city, s_city, d_year
#	order by d_year asc, revenue desc;
% .explain # table_name
% mal # name
% clob # type
% 566 # length
function user.s4_1():void;
    X_219:void := querylog.define("explain\nselect c_city, s_city, d_year, sum(lo_revenue) as revenue\n from customer, lineorder, supplier, dwdate\n where lo_custkey = c_custkey\n and lo_suppkey = s_suppkey\n and lo_orderdate = d_datekey\n and c_nation = \\'UNITED KINGDOM\\'\n and (c_city=\\'UNITED KI1\\' or c_city=\\'UNITED KI5\\')\n and (s_city=\\'UNITED KI1\\' or s_city=\\'UNITED KI5\\')\n and s_nation = \\'UNITED KINGDOM\\'\n and d_year >= 1992 and d_year <= 1997\n group by c_city, s_city, d_year\n order by d_year asc, revenue desc;","sequential_pipe",81);
    X_178 := bat.new(nil:str);
    X_185 := bat.append(X_178,"sys.customer");
    X_194 := bat.append(X_185,"sys.supplier");
    X_201 := bat.append(X_194,"sys.dwdate");
    X_210 := bat.append(X_201,"sys.L6");
    X_180 := bat.new(nil:str);
    X_187 := bat.append(X_180,"c_city");
    X_196 := bat.append(X_187,"s_city");
    X_203 := bat.append(X_196,"d_year");
    X_212 := bat.append(X_203,"revenue");
    X_181 := bat.new(nil:str);
    X_189 := bat.append(X_181,"clob");
    X_198 := bat.append(X_189,"clob");
    X_205 := bat.append(X_198,"int");
    X_214 := bat.append(X_205,"bigint");
    X_182 := bat.new(nil:int);
    X_191 := bat.append(X_182,0);
    X_199 := bat.append(X_191,0);
    X_207 := bat.append(X_199,32);
    X_216 := bat.append(X_207,64);
    X_184 := bat.new(nil:int);
    X_193 := bat.append(X_184,0);
    X_200 := bat.append(X_193,0);
    X_209 := bat.append(X_200,0);
    X_218 := bat.append(X_209,0);
    X_0 := sql.mvc();
    C_1:bat[:oid] := sql.tid(X_0,"sys","lineorder");
    X_28:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_custkey_fkey",0);
    (X_31,X_32:bat[:oid]) := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_custkey_fkey",2);
    X_30:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_custkey_fkey",1);
    X_34 := sql.projectdelta(C_1,X_28,X_31,X_32,X_30);
    X_37:bat[:str] := sql.bind(X_0,"sys","customer","c_city",0);
    X_44:bat[:str] := sql.bind(X_0,"sys","customer","c_nation",0);
    C_35:bat[:oid] := sql.tid(X_0,"sys","customer");
    C_52 := algebra.subselect(X_44,C_35,"UNITED KINGDOM","UNITED KINGDOM",true,false,false);
    C_57 := algebra.subselect(X_37,C_52,"UNITED KI1","UNITED KI1",true,false,false);
    C_59 := algebra.subselect(X_37,C_52,"UNITED KI5","UNITED KI5",true,false,false);
    X_60 := bat.mergecand(C_57,C_59);
    (X_64,X_65) := algebra.subjoin(X_34,X_60,nil:BAT,nil:BAT,false,nil:lng);
    X_21:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_suppkey_fkey",0);
    (X_24,X_25:bat[:oid]) := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_suppkey_fkey",2);
    X_23:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_suppkey_fkey",1);
    X_27 := sql.projectdelta(C_1,X_21,X_24,X_25,X_23);
    X_71 := algebra.projection(X_64,X_27);
    X_78:bat[:str] := sql.bind(X_0,"sys","supplier","s_city",0);
    X_85:bat[:str] := sql.bind(X_0,"sys","supplier","s_nation",0);
    C_76:bat[:oid] := sql.tid(X_0,"sys","supplier");
    C_93 := algebra.subselect(X_85,C_76,"UNITED KINGDOM","UNITED KINGDOM",true,false,false);
    C_98 := algebra.subselect(X_78,C_93,"UNITED KI1","UNITED KI1",true,false,false);
    C_100 := algebra.subselect(X_78,C_93,"UNITED KI5","UNITED KI5",true,false,false);
    X_101 := bat.mergecand(C_98,C_100);
    (X_105,X_106) := algebra.subjoin(X_71,X_101,nil:BAT,nil:BAT,false,nil:lng);
    X_14:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_orderdate_fkey",0);
    (X_17,X_18:bat[:oid]) := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_orderdate_fkey",2);
    X_16:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_orderdate_fkey",1);
    X_20 := sql.projectdelta(C_1,X_14,X_17,X_18,X_16);
    X_111:bat[:oid] := algebra.projectionpath(X_105,X_64,X_20);
    X_122:bat[:int] := sql.bind(X_0,"sys","dwdate","d_year",0);
    C_120:bat[:oid] := sql.tid(X_0,"sys","dwdate");
    C_131 := algebra.subselect(X_122,C_120,1992,1997,true,true,false);
    (X_137,X_138) := algebra.subjoin(X_111,C_131,nil:BAT,nil:BAT,false,nil:lng);
    X_4:bat[:int] := sql.bind(X_0,"sys","lineorder","lo_revenue",0);
    X_139:bat[:int] := algebra.projectionpath(X_137,X_105,X_64,C_1,X_4);
    X_146:bat[:str] := algebra.projectionpath(X_137,X_106,X_101,X_78);
    X_143:bat[:str] := algebra.projectionpath(X_137,X_105,X_65,X_60,X_37);
    X_149:bat[:int] := algebra.projectionpath(X_138,C_131,X_122);
    (X_151,X_152,X_153) := group.subgroup(X_149);
    (X_154,X_155,X_156) := group.subgroup(X_143,X_151);
    (X_157,X_158,X_159) := group.subgroupdone(X_146,X_154);
    X_162 := algebra.projection(X_158,X_149);
    X_163:bat[:lng] := aggr.subsum(X_139,X_157,X_158,true,true);
    (X_164,X_165,X_166) := algebra.subsort(X_162,false,false);
    (X_169,X_170,X_171) := algebra.subsort(X_163,X_165,X_166,true,false);
    X_173:bat[:str] := algebra.projectionpath(X_170,X_158,X_143);
    X_174:bat[:str] := algebra.projectionpath(X_170,X_158,X_146);
    X_175 := algebra.projection(X_170,X_162);
    X_176 := algebra.projection(X_170,X_163);
    sql.resultSet(X_210,X_212,X_214,X_216,X_218,X_173,X_174,X_175,X_176);
end user.s4_1;
#inline               actions= 0 time=3 usec 
#remap                actions= 0 time=7 usec 
#costmodel            actions= 1 time=9 usec 
#coercion             actions= 0 time=7 usec 
#evaluate             actions= 8 time=58 usec 
#emptybind            actions=18 time=72 usec 
#pushselect           actions=14 time=86 usec 
#aliases              actions=22 time=29 usec 
#mergetable           actions= 0 time=83 usec 
#deadcode             actions=21 time=16 usec 
#aliases              actions= 0 time=14 usec 
#constants            actions=31 time=37 usec 
#commonTerms          actions= 0 time=15 usec 
#projectionpath       actions=12 time=27 usec 
#reorder              actions= 1 time=59 usec 
#deadcode             actions=12 time=13 usec 
#reduce               actions=118 time=27 usec 
#matpack              actions= 0 time=3 usec 
#multiplex            actions= 0 time=4 usec 
#profiler             actions= 1 time=6 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=35 usec 
#total                actions= 1 time=853 usec 

# 23:10:47 >  
# 23:10:47 >  "Done."
# 23:10:47 >  

