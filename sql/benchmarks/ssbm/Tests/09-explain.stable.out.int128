stdout of test '09-explain` in directory 'sql/benchmarks/ssbm` itself:


# 23:10:47 >  
# 23:10:47 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35257" "--set" "mapi_usock=/var/tmp/mtest-17595/.s.monetdb.35257" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_ssbm" "--set" "mal_listing=0"
# 23:10:47 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_ssbm', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:35257/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17595/.s.monetdb.35257
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 23:10:47 >  
# 23:10:47 >  "/usr/bin/python2" "09-explain.SQL.py" "09-explain"
# 23:10:47 >  

#set optimizer = 'sequential_pipe';
#explain
#select c_city, s_city, d_year, sum(lo_revenue) as revenue
#	from customer, lineorder, supplier, dwdate
#	where lo_custkey = c_custkey
#		and lo_suppkey = s_suppkey
#		and lo_orderdate = d_datekey
#		and c_nation = 'UNITED KINGDOM'
#		and (c_city='UNITED KI1' or c_city='UNITED KI5')
#		and (s_city='UNITED KI1' or s_city='UNITED KI5')
#		and s_nation = 'UNITED KINGDOM'
#		and d_year >= 1992 and d_year <= 1997
#	group by c_city, s_city, d_year
#	order by d_year asc, revenue desc;
% .explain # table_name
% mal # name
% clob # type
% 592 # length
function user.s2_1{autoCommit=true}(A0:str,A1:str,A2:str,A3:str,A4:str,A5:str,A6:int,A7:int):void;
    X_178:void := querylog.define("explain\nselect c_city, s_city, d_year, sum(lo_revenue) as revenue\n\tfrom customer, lineorder, supplier, dwdate\n\twhere lo_custkey = c_custkey\n\t\tand lo_suppkey = s_suppkey\n\t\tand lo_orderdate = d_datekey\n\t\tand c_nation = \\'UNITED KINGDOM\\'\n\t\tand (c_city=\\'UNITED KI1\\' or c_city=\\'UNITED KI5\\')\n\t\tand (s_city=\\'UNITED KI1\\' or s_city=\\'UNITED KI5\\')\n\t\tand s_nation = \\'UNITED KINGDOM\\'\n\t\tand d_year >= 1992 and d_year <= 1997\n\tgroup by c_city, s_city, d_year\n\torder by d_year asc, revenue desc;","sequential_pipe",118);
    X_136 := bat.new(nil:oid,nil:str);
    X_144 := bat.append(X_136,"sys.customer");
    X_153 := bat.append(X_144,"sys.supplier");
    X_160 := bat.append(X_153,"sys.dwdate");
    X_169 := bat.append(X_160,"sys.L1");
    X_139 := bat.new(nil:oid,nil:str);
    X_146 := bat.append(X_139,"c_city");
    X_155 := bat.append(X_146,"s_city");
    X_162 := bat.append(X_155,"d_year");
    X_171 := bat.append(X_162,"revenue");
    X_140 := bat.new(nil:oid,nil:str);
    X_148 := bat.append(X_140,"clob");
    X_157 := bat.append(X_148,"clob");
    X_164 := bat.append(X_157,"int");
    X_173 := bat.append(X_164,"hugeint");
    X_141 := bat.new(nil:oid,nil:int);
    X_150 := bat.append(X_141,0);
    X_158 := bat.append(X_150,0);
    X_166 := bat.append(X_158,32);
    X_175 := bat.append(X_166,128);
    X_143 := bat.new(nil:oid,nil:int);
    X_152 := bat.append(X_143,0);
    X_159 := bat.append(X_152,0);
    X_168 := bat.append(X_159,0);
    X_177 := bat.append(X_168,0);
    X_10 := sql.mvc();
    X_11:bat[:oid,:oid]  := sql.tid(X_10,"sys","lineorder");
    X_14:bat[:oid,:oid]  := sql.bind_idxbat(X_10,"sys","lineorder","lineorder_lo_custkey_fkey",0);
    (X_17,r1_17) := sql.bind_idxbat(X_10,"sys","lineorder","lineorder_lo_custkey_fkey",2);
    X_20:bat[:oid,:oid]  := sql.bind_idxbat(X_10,"sys","lineorder","lineorder_lo_custkey_fkey",1);
    X_22 := sql.projectdelta(X_11,X_14,X_17,r1_17,X_20);
    X_25:bat[:oid,:str]  := sql.bind(X_10,"sys","customer","c_city",0);
    X_30:bat[:oid,:str]  := sql.bind(X_10,"sys","customer","c_nation",0);
    X_23:bat[:oid,:oid]  := sql.tid(X_10,"sys","customer");
    X_208 := algebra.subselect(X_30,X_23,A0,A0,true,true,false);
    (X_32,r1_36) := sql.bind(X_10,"sys","customer","c_nation",2);
    X_209 := algebra.subselect(r1_36,nil:bat[:oid,:oid],A0,A0,true,true,false);
    X_34:bat[:oid,:str]  := sql.bind(X_10,"sys","customer","c_nation",1);
    X_211 := algebra.subselect(X_34,X_23,A0,A0,true,true,false);
    X_35 := sql.subdelta(X_208,X_23,X_32,X_209,X_211);
    X_212 := algebra.subselect(X_25,X_35,A1,A1,true,true,false);
    (X_27,r1_28) := sql.bind(X_10,"sys","customer","c_city",2);
    X_213 := algebra.subselect(r1_28,nil:bat[:oid,:oid],A1,A1,true,true,false);
    X_29:bat[:oid,:str]  := sql.bind(X_10,"sys","customer","c_city",1);
    X_215 := algebra.subselect(X_29,X_35,A1,A1,true,true,false);
    X_38 := sql.subdelta(X_212,X_35,X_27,X_213,X_215);
    X_216 := algebra.subselect(X_25,X_35,A2,A2,true,true,false);
    X_217 := algebra.subselect(r1_28,nil:bat[:oid,:oid],A2,A2,true,true,false);
    X_219 := algebra.subselect(X_29,X_35,A2,A2,true,true,false);
    X_39 := sql.subdelta(X_216,X_35,X_27,X_217,X_219);
    X_40 := bat.mergecand(X_38,X_39);
    (X_41,r1_50) := algebra.subjoin(X_22,X_40,nil:BAT,nil:BAT,false,nil:lng);
    X_45:bat[:oid,:oid] := sql.bind_idxbat(X_10,"sys","lineorder","lineorder_lo_suppkey_fkey",0);
    (X_50,r1_59) := sql.bind_idxbat(X_10,"sys","lineorder","lineorder_lo_suppkey_fkey",2);
    X_53:bat[:oid,:oid] := sql.bind_idxbat(X_10,"sys","lineorder","lineorder_lo_suppkey_fkey",1);
    X_55 := sql.projectdelta(X_11,X_45,X_50,r1_59,X_53);
    X_56 := algebra.leftfetchjoin(X_41,X_55);
    X_59:bat[:oid,:str] := sql.bind(X_10,"sys","supplier","s_city",0);
    X_64:bat[:oid,:str] := sql.bind(X_10,"sys","supplier","s_nation",0);
    X_57:bat[:oid,:oid] := sql.tid(X_10,"sys","supplier");
    X_220 := algebra.subselect(X_64,X_57,A5,A5,true,true,false);
    (X_66,r1_79) := sql.bind(X_10,"sys","supplier","s_nation",2);
    X_221 := algebra.subselect(r1_79,nil:bat[:oid,:oid],A5,A5,true,true,false);
    X_68:bat[:oid,:str] := sql.bind(X_10,"sys","supplier","s_nation",1);
    X_223 := algebra.subselect(X_68,X_57,A5,A5,true,true,false);
    X_69 := sql.subdelta(X_220,X_57,X_66,X_221,X_223);
    X_224 := algebra.subselect(X_59,X_69,A3,A3,true,true,false);
    (X_61,r1_71) := sql.bind(X_10,"sys","supplier","s_city",2);
    X_225 := algebra.subselect(r1_71,nil:bat[:oid,:oid],A3,A3,true,true,false);
    X_63:bat[:oid,:str] := sql.bind(X_10,"sys","supplier","s_city",1);
    X_227 := algebra.subselect(X_63,X_69,A3,A3,true,true,false);
    X_72 := sql.subdelta(X_224,X_69,X_61,X_225,X_227);
    X_228 := algebra.subselect(X_59,X_69,A4,A4,true,true,false);
    X_229 := algebra.subselect(r1_71,nil:bat[:oid,:oid],A4,A4,true,true,false);
    X_231 := algebra.subselect(X_63,X_69,A4,A4,true,true,false);
    X_73 := sql.subdelta(X_228,X_69,X_61,X_229,X_231);
    X_74 := bat.mergecand(X_72,X_73);
    (X_75,r1_93) := algebra.subjoin(X_56,X_74,nil:BAT,nil:BAT,false,nil:lng);
    X_79:bat[:oid,:oid] := sql.bind_idxbat(X_10,"sys","lineorder","lineorder_lo_orderdate_fkey",0);
    (X_82,r1_100) := sql.bind_idxbat(X_10,"sys","lineorder","lineorder_lo_orderdate_fkey",2);
    X_84:bat[:oid,:oid] := sql.bind_idxbat(X_10,"sys","lineorder","lineorder_lo_orderdate_fkey",1);
    X_85 := sql.projectdelta(X_11,X_79,X_82,r1_100,X_84);
    X_86:bat[:oid,:oid] := algebra.leftfetchjoinPath(X_75,X_41,X_85);
    X_89:bat[:oid,:int] := sql.bind(X_10,"sys","dwdate","d_year",0);
    X_87:bat[:oid,:oid] := sql.tid(X_10,"sys","dwdate");
    X_232 := algebra.subselect(X_89,X_87,A6,A7,true,true,false);
    (X_91,r1_111) := sql.bind(X_10,"sys","dwdate","d_year",2);
    X_233 := algebra.subselect(r1_111,nil:bat[:oid,:oid],A6,A7,true,true,false);
    X_93:bat[:oid,:int] := sql.bind(X_10,"sys","dwdate","d_year",1);
    X_235 := algebra.subselect(X_93,X_87,A6,A7,true,true,false);
    X_94 := sql.subdelta(X_232,X_87,X_91,X_233,X_235);
    (X_97,r1_122) := algebra.subjoin(X_86,X_94,nil:BAT,nil:BAT,false,nil:lng);
    X_99:bat[:oid,:int] := sql.bind(X_10,"sys","lineorder","lo_revenue",0);
    (X_101,r1_126) := sql.bind(X_10,"sys","lineorder","lo_revenue",2);
    X_103:bat[:oid,:int] := sql.bind(X_10,"sys","lineorder","lo_revenue",1);
    X_104 := sql.projectdelta(X_11,X_99,X_101,r1_126,X_103);
    X_105:bat[:oid,:int] := algebra.leftfetchjoinPath(X_97,X_75,X_41,X_104);
    X_106 := sql.projectdelta(X_74,X_59,X_61,r1_71,X_63);
    X_107:bat[:oid,:str] := algebra.leftfetchjoinPath(X_97,r1_93,X_106);
    X_108 := sql.projectdelta(X_40,X_25,X_27,r1_28,X_29);
    X_109:bat[:oid,:str] := algebra.leftfetchjoinPath(X_97,X_75,r1_50,X_108);
    X_110 := sql.projectdelta(X_94,X_89,X_91,r1_111,X_93);
    X_111 := algebra.leftfetchjoin(r1_122,X_110);
    (X_112,r1_143,r2_143) := group.subgroup(X_111);
    (X_115,r1_146,r2_146) := group.subgroup(X_109,X_112);
    (X_118,r1_149,r2_149) := group.subgroupdone(X_107,X_115);
    X_121:bat[:oid,:hge] := aggr.subsum(X_105,X_118,r1_149,true,true);
    X_123 := algebra.leftfetchjoin(r1_149,X_111);
    (X_124,r1_155,r2_155) := algebra.subsort(X_123,false,false);
    (X_128,r1_159,r2_159) := algebra.subsort(X_121,r1_155,r2_155,true,false);
    X_131:bat[:oid,:str] := algebra.leftfetchjoinPath(r1_159,r1_149,X_109);
    X_132:bat[:oid,:str] := algebra.leftfetchjoinPath(r1_159,r1_149,X_107);
    X_133 := algebra.leftfetchjoin(r1_159,X_123);
    X_134 := algebra.leftfetchjoin(r1_159,X_121);
    sql.resultSet(X_169,X_171,X_173,X_175,X_177,X_131,X_132,X_133,X_134);
end user.s2_1;

# 23:10:47 >  
# 23:10:47 >  "Done."
# 23:10:47 >  

