stdout of test '09-explain` in directory 'sql/benchmarks/ssbm` itself:


# 23:10:47 >  
# 23:10:47 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35257" "--set" "mapi_usock=/var/tmp/mtest-17595/.s.monetdb.35257" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_ssbm" "--set" "mal_listing=0"
# 23:10:47 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_ssbm', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:35257/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17595/.s.monetdb.35257
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 23:10:47 >  
# 23:10:47 >  "/usr/bin/python2" "09-explain.SQL.py" "09-explain"
# 23:10:47 >  

#set optimizer = 'sequential_pipe';
#explain
#select c_city, s_city, d_year, sum(lo_revenue) as revenue
#	from customer, lineorder, supplier, dwdate
#	where lo_custkey = c_custkey
#		and lo_suppkey = s_suppkey
#		and lo_orderdate = d_datekey
#		and c_nation = 'UNITED KINGDOM'
#		and (c_city='UNITED KI1' or c_city='UNITED KI5')
#		and (s_city='UNITED KI1' or s_city='UNITED KI5')
#		and s_nation = 'UNITED KINGDOM'
#		and d_year >= 1992 and d_year <= 1997
#	group by c_city, s_city, d_year
#	order by d_year asc, revenue desc;
% .explain # table_name
% mal # name
% clob # type
% 566 # length
function user.s2_1():void;
    X_134:void := querylog.define("explain\nselect c_city, s_city, d_year, sum(lo_revenue) as revenue\n from customer, lineorder, supplier, dwdate\n where lo_custkey = c_custkey\n and lo_suppkey = s_suppkey\n and lo_orderdate = d_datekey\n and c_nation = \\'UNITED KINGDOM\\'\n and (c_city=\\'UNITED KI1\\' or c_city=\\'UNITED KI5\\')\n and (s_city=\\'UNITED KI1\\' or s_city=\\'UNITED KI5\\')\n and s_nation = \\'UNITED KINGDOM\\'\n and d_year >= 1992 and d_year <= 1997\n group by c_city, s_city, d_year\n order by d_year asc, revenue desc;","sequential_pipe",81);
    X_96 := bat.new(nil:oid,nil:str);
    X_104 := bat.append(X_96,"sys.customer");
    X_111 := bat.append(X_104,"sys.supplier");
    X_117 := bat.append(X_111,"sys.dwdate");
    X_125 := bat.append(X_117,"sys.L1");
    X_99 := bat.new(nil:oid,nil:str);
    X_106 := bat.append(X_99,"c_city");
    X_113 := bat.append(X_106,"s_city");
    X_119 := bat.append(X_113,"d_year");
    X_127 := bat.append(X_119,"revenue");
    X_100 := bat.new(nil:oid,nil:str);
    X_107 := bat.append(X_100,"clob");
    X_114 := bat.append(X_107,"clob");
    X_120 := bat.append(X_114,"int");
    X_129 := bat.append(X_120,"hugeint");
    X_101 := bat.new(nil:oid,nil:int);
    X_109 := bat.append(X_101,0);
    X_115 := bat.append(X_109,0);
    X_122 := bat.append(X_115,32);
    X_131 := bat.append(X_122,128);
    X_103 := bat.new(nil:oid,nil:int);
    X_110 := bat.append(X_103,0);
    X_116 := bat.append(X_110,0);
    X_124 := bat.append(X_116,0);
    X_133 := bat.append(X_124,0);
    X_6 := sql.mvc();
    C_7:bat[:oid] := sql.tid(X_6,"sys","lineorder");
    X_10:bat[:oid] := sql.bind_idxbat(X_6,"sys","lineorder","lineorder_lo_custkey_fkey",0);
    (X_13,r1_16) := sql.bind_idxbat(X_6,"sys","lineorder","lineorder_lo_custkey_fkey",2);
    X_16:bat[:oid] := sql.bind_idxbat(X_6,"sys","lineorder","lineorder_lo_custkey_fkey",1);
    X_18 := sql.projectdelta(C_7,X_10,X_13,r1_16,X_16);
    X_21:bat[:str] := sql.bind(X_6,"sys","customer","c_city",0);
    X_23:bat[:str] := sql.bind(X_6,"sys","customer","c_nation",0);
    C_19:bat[:oid] := sql.tid(X_6,"sys","customer");
    C_25 := algebra.subselect(X_23,C_19,"UNITED KINGDOM","UNITED KINGDOM",true,false,false);
    C_28 := algebra.subselect(X_21,C_25,"UNITED KI1","UNITED KI1",true,false,false);
    C_29 := algebra.subselect(X_21,C_25,"UNITED KI5","UNITED KI5",true,false,false);
    X_30 := bat.mergecand(C_28,C_29);
    (X_31,r1_50) := algebra.subjoin(X_18,X_30,nil:BAT,nil:BAT,false,nil:lng);
    X_35:bat[:oid] := sql.bind_idxbat(X_6,"sys","lineorder","lineorder_lo_suppkey_fkey",0);
    (X_37,r1_57) := sql.bind_idxbat(X_6,"sys","lineorder","lineorder_lo_suppkey_fkey",2);
    X_39:bat[:oid] := sql.bind_idxbat(X_6,"sys","lineorder","lineorder_lo_suppkey_fkey",1);
    X_40 := sql.projectdelta(C_7,X_35,X_37,r1_57,X_39);
    X_41 := algebra.projection(X_31,X_40);
    X_44:bat[:str] := sql.bind(X_6,"sys","supplier","s_city",0);
    X_46:bat[:str] := sql.bind(X_6,"sys","supplier","s_nation",0);
    C_42:bat[:oid] := sql.tid(X_6,"sys","supplier");
    C_48 := algebra.subselect(X_46,C_42,"UNITED KINGDOM","UNITED KINGDOM",true,false,false);
    C_49 := algebra.subselect(X_44,C_48,"UNITED KI1","UNITED KI1",true,false,false);
    C_50 := algebra.subselect(X_44,C_48,"UNITED KI5","UNITED KI5",true,false,false);
    X_51 := bat.mergecand(C_49,C_50);
    (X_52,r1_90) := algebra.subjoin(X_41,X_51,nil:BAT,nil:BAT,false,nil:lng);
    X_54:bat[:oid] := sql.bind_idxbat(X_6,"sys","lineorder","lineorder_lo_orderdate_fkey",0);
    (X_56,r1_97) := sql.bind_idxbat(X_6,"sys","lineorder","lineorder_lo_orderdate_fkey",2);
    X_58:bat[:oid] := sql.bind_idxbat(X_6,"sys","lineorder","lineorder_lo_orderdate_fkey",1);
    X_59 := sql.projectdelta(C_7,X_54,X_56,r1_97,X_58);
    X_60:bat[:oid] := algebra.projectionpath(X_52,X_31,X_59);
    X_63:bat[:int] := sql.bind(X_6,"sys","dwdate","d_year",0);
    C_61:bat[:oid] := sql.tid(X_6,"sys","dwdate");
    C_65 := algebra.subselect(X_63,C_61,1992,1997,true,true,false);
    (X_66,r1_120) := algebra.subjoin(X_60,C_65,nil:BAT,nil:BAT,false,nil:lng);
    X_68:bat[:int] := sql.bind(X_6,"sys","lineorder","lo_revenue",0);
    X_70:bat[:int] := algebra.projectionpath(X_66,X_52,X_31,C_7,X_68);
    X_71:bat[:str] := algebra.projectionpath(X_66,r1_90,X_51,X_44);
    X_72:bat[:str] := algebra.projectionpath(X_66,X_52,r1_50,X_30,X_21);
    X_73:bat[:int] := algebra.projectionpath(r1_120,C_65,X_63);
    (X_74,r1_141,r2_141) := group.subgroup(X_73);
    (X_77,r1_144,r2_144) := group.subgroup(X_72,X_74);
    (X_80,r1_147,r2_147) := group.subgroupdone(X_71,X_77);
    X_83:bat[:hge] := aggr.subsum(X_70,X_80,r1_147,true,true);
    X_84 := algebra.projection(r1_147,X_73);
    (X_85,r1_154,r2_154) := algebra.subsort(X_84,false,false);
    (X_88,r1_159,r2_159) := algebra.subsort(X_83,r1_154,r2_154,true,false);
    X_91:bat[:str] := algebra.projectionpath(r1_159,r1_147,X_72);
    X_92:bat[:str] := algebra.projectionpath(r1_159,r1_147,X_71);
    X_93 := algebra.projection(r1_159,X_84);
    X_94 := algebra.projection(r1_159,X_83);
    sql.resultSet(X_125,X_127,X_129,X_131,X_133,X_91,X_92,X_93,X_94);
end user.s2_1;

# 23:10:47 >  
# 23:10:47 >  "Done."
# 23:10:47 >  

