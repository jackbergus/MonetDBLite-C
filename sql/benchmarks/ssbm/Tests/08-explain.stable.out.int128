stdout of test '08-explain` in directory 'sql/benchmarks/ssbm` itself:


# 23:10:47 >  
# 23:10:47 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35257" "--set" "mapi_usock=/var/tmp/mtest-17595/.s.monetdb.35257" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_ssbm" "--set" "mal_listing=0"
# 23:10:47 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_ssbm', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:35257/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17595/.s.monetdb.35257
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 23:10:47 >  
# 23:10:47 >  "/usr/bin/python2" "08-explain.SQL.py" "08-explain"
# 23:10:47 >  

#set optimizer = 'sequential_pipe';
#explain
#select c_city, s_city, d_year, sum(lo_revenue) as revenue
#	from customer, lineorder, supplier, dwdate
#	where lo_custkey = c_custkey
#		and lo_suppkey = s_suppkey
#		and lo_orderdate = d_datekey
#		and c_nation = 'UNITED STATES'
#		and s_nation = 'UNITED STATES'
#		and d_year >= 1992 and d_year <= 1997
#	group by c_city, s_city, d_year
#	order by d_year asc, revenue desc;
% .explain # table_name
% mal # name
% clob # type
% 446 # length
function user.s2_1():void;
    X_126:void := querylog.define("explain\nselect c_city, s_city, d_year, sum(lo_revenue) as revenue\n from customer, lineorder, supplier, dwdate\n where lo_custkey = c_custkey\n and lo_suppkey = s_suppkey\n and lo_orderdate = d_datekey\n and c_nation = \\'UNITED STATES\\'\n and s_nation = \\'UNITED STATES\\'\n and d_year >= 1992 and d_year <= 1997\n group by c_city, s_city, d_year\n order by d_year asc, revenue desc;","sequential_pipe",75);
    X_88 := bat.new(nil:oid,nil:str);
    X_96 := bat.append(X_88,"sys.customer");
    X_103 := bat.append(X_96,"sys.supplier");
    X_109 := bat.append(X_103,"sys.dwdate");
    X_117 := bat.append(X_109,"sys.L1");
    X_91 := bat.new(nil:oid,nil:str);
    X_98 := bat.append(X_91,"c_city");
    X_105 := bat.append(X_98,"s_city");
    X_111 := bat.append(X_105,"d_year");
    X_119 := bat.append(X_111,"revenue");
    X_92 := bat.new(nil:oid,nil:str);
    X_99 := bat.append(X_92,"clob");
    X_106 := bat.append(X_99,"clob");
    X_112 := bat.append(X_106,"int");
    X_121 := bat.append(X_112,"hugeint");
    X_93 := bat.new(nil:oid,nil:int);
    X_101 := bat.append(X_93,0);
    X_107 := bat.append(X_101,0);
    X_114 := bat.append(X_107,32);
    X_123 := bat.append(X_114,128);
    X_95 := bat.new(nil:oid,nil:int);
    X_102 := bat.append(X_95,0);
    X_108 := bat.append(X_102,0);
    X_116 := bat.append(X_108,0);
    X_125 := bat.append(X_116,0);
    X_4 := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4,"sys","lineorder");
    X_8:bat[:oid] := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_custkey_fkey",0);
    (X_11,r1_12) := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_custkey_fkey",2);
    X_14:bat[:oid] := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_custkey_fkey",1);
    X_16 := sql.projectdelta(C_5,X_8,X_11,r1_12,X_14);
    X_19:bat[:str] := sql.bind(X_4,"sys","customer","c_nation",0);
    C_17:bat[:oid] := sql.tid(X_4,"sys","customer");
    C_21 := algebra.subselect(X_19,C_17,"UNITED STATES","UNITED STATES",true,false,false);
    (X_24,r1_34) := algebra.subjoin(X_16,C_21,nil:BAT,nil:BAT,false,nil:lng);
    X_28:bat[:oid] := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_suppkey_fkey",0);
    (X_30,r1_41) := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_suppkey_fkey",2);
    X_32:bat[:oid] := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_suppkey_fkey",1);
    X_33 := sql.projectdelta(C_5,X_28,X_30,r1_41,X_32);
    X_34 := algebra.projection(X_24,X_33);
    X_37:bat[:str] := sql.bind(X_4,"sys","supplier","s_nation",0);
    C_35:bat[:oid] := sql.tid(X_4,"sys","supplier");
    C_39 := algebra.subselect(X_37,C_35,"UNITED STATES","UNITED STATES",true,false,false);
    (X_40,r1_59) := algebra.subjoin(X_34,C_39,nil:BAT,nil:BAT,false,nil:lng);
    X_42:bat[:oid] := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_orderdate_fkey",0);
    (X_44,r1_63) := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_orderdate_fkey",2);
    X_46:bat[:oid] := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_orderdate_fkey",1);
    X_47 := sql.projectdelta(C_5,X_42,X_44,r1_63,X_46);
    X_48:bat[:oid] := algebra.projectionpath(X_40,X_24,X_47);
    X_51:bat[:int] := sql.bind(X_4,"sys","dwdate","d_year",0);
    C_49:bat[:oid] := sql.tid(X_4,"sys","dwdate");
    C_53 := algebra.subselect(X_51,C_49,1992,1997,true,true,false);
    (X_54,r1_86) := algebra.subjoin(X_48,C_53,nil:BAT,nil:BAT,false,nil:lng);
    X_56:bat[:int] := sql.bind(X_4,"sys","lineorder","lo_revenue",0);
    X_58:bat[:int] := algebra.projectionpath(X_54,X_40,X_24,C_5,X_56);
    X_59:bat[:str] := sql.bind(X_4,"sys","supplier","s_city",0);
    X_61:bat[:str] := algebra.projectionpath(X_54,r1_59,C_39,X_59);
    X_62:bat[:str] := sql.bind(X_4,"sys","customer","c_city",0);
    X_64:bat[:str] := algebra.projectionpath(X_54,X_40,r1_34,C_21,X_62);
    X_65:bat[:int] := algebra.projectionpath(r1_86,C_53,X_51);
    (X_66,r1_124,r2_124) := group.subgroup(X_65);
    (X_69,r1_127,r2_127) := group.subgroup(X_64,X_66);
    (X_72,r1_130,r2_130) := group.subgroupdone(X_61,X_69);
    X_75:bat[:hge] := aggr.subsum(X_58,X_72,r1_130,true,true);
    X_76 := algebra.projection(r1_130,X_65);
    (X_77,r1_137,r2_137) := algebra.subsort(X_76,false,false);
    (X_80,r1_142,r2_142) := algebra.subsort(X_75,r1_137,r2_137,true,false);
    X_83:bat[:str] := algebra.projectionpath(r1_142,r1_130,X_64);
    X_84:bat[:str] := algebra.projectionpath(r1_142,r1_130,X_61);
    X_85 := algebra.projection(r1_142,X_76);
    X_86 := algebra.projection(r1_142,X_75);
    sql.resultSet(X_117,X_119,X_121,X_123,X_125,X_83,X_84,X_85,X_86);
end user.s2_1;

# 23:10:47 >  
# 23:10:47 >  "Done."
# 23:10:47 >  

