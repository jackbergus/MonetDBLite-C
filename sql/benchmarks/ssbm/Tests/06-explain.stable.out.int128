stdout of test '06-explain` in directory 'sql/benchmarks/ssbm` itself:


# 23:10:46 >  
# 23:10:46 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35257" "--set" "mapi_usock=/var/tmp/mtest-17595/.s.monetdb.35257" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_ssbm" "--set" "mal_listing=0"
# 23:10:46 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_ssbm', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:35257/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17595/.s.monetdb.35257
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 23:10:46 >  
# 23:10:46 >  "/usr/bin/python2" "06-explain.SQL.py" "06-explain"
# 23:10:46 >  

#set optimizer = 'sequential_pipe';
#explain
#select sum(lo_revenue), d_year, p_brand1
#	from lineorder, dwdate, part, supplier
#	where lo_orderdate = d_datekey
#		and lo_partkey = p_partkey
#		and lo_suppkey = s_suppkey
#		-- OK to add p_mfgr=’MFGR#2’
#		-- OK to add p_category=’MFGR#22’
#		and p_brand1 = 'MFGR#2221'
#		and s_region = 'EUROPE'
#	group by d_year, p_brand1
#	order by d_year, p_brand1;
% .explain # table_name
% mal # name
% clob # type
% 457 # length
function user.s2_1{autoCommit=true}(A0:str,A1:str):void;
    X_125:void := querylog.define("explain\nselect sum(lo_revenue), d_year, p_brand1\n\tfrom lineorder, dwdate, part, supplier\n\twhere lo_orderdate = d_datekey\n\t\tand lo_partkey = p_partkey\n\t\tand lo_suppkey = s_suppkey\n\t\t-- OK to add p_mfgr=’MFGR#2’\n\t\t-- OK to add p_category=’MFGR#22’\n\t\tand p_brand1 = \\'MFGR#2221\\'\n\t\tand s_region = \\'EUROPE\\'\n\tgroup by d_year, p_brand1\n\torder by d_year, p_brand1;","sequential_pipe",82);
    X_93 := bat.new(nil:oid,nil:str);
    X_101 := bat.append(X_93,"sys.L1");
    X_110 := bat.append(X_101,"sys.dwdate");
    X_118 := bat.append(X_110,"sys.part");
    X_96 := bat.new(nil:oid,nil:str);
    X_103 := bat.append(X_96,"L1");
    X_112 := bat.append(X_103,"d_year");
    X_120 := bat.append(X_112,"p_brand1");
    X_97 := bat.new(nil:oid,nil:str);
    X_105 := bat.append(X_97,"hugeint");
    X_113 := bat.append(X_105,"int");
    X_121 := bat.append(X_113,"clob");
    X_98 := bat.new(nil:oid,nil:int);
    X_107 := bat.append(X_98,128);
    X_115 := bat.append(X_107,32);
    X_123 := bat.append(X_115,0);
    X_100 := bat.new(nil:oid,nil:int);
    X_109 := bat.append(X_100,0);
    X_117 := bat.append(X_109,0);
    X_124 := bat.append(X_117,0);
    X_4 := sql.mvc();
    X_5:bat[:oid,:oid]  := sql.tid(X_4,"sys","lineorder");
    X_8:bat[:oid,:oid]  := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_partkey_fkey",0);
    (X_11,r1_11) := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_partkey_fkey",2);
    X_14:bat[:oid,:oid]  := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_partkey_fkey",1);
    X_16 := sql.projectdelta(X_5,X_8,X_11,r1_11,X_14);
    X_19:bat[:oid,:str]  := sql.bind(X_4,"sys","part","p_brand1",0);
    X_17:bat[:oid,:oid]  := sql.tid(X_4,"sys","part");
    X_161 := algebra.subselect(X_19,X_17,A0,A0,true,false,false);
    (X_21,r1_22) := sql.bind(X_4,"sys","part","p_brand1",2);
    X_162 := algebra.subselect(r1_22,nil:bat[:oid,:oid],A0,A0,true,false,false);
    X_23:bat[:oid,:str]  := sql.bind(X_4,"sys","part","p_brand1",1);
    X_164 := algebra.subselect(X_23,X_17,A0,A0,true,false,false);
    X_24 := sql.subdelta(X_161,X_17,X_21,X_162,X_164);
    (X_26,r1_32) := algebra.subjoin(X_16,X_24,nil:BAT,nil:BAT,false,nil:lng);
    X_30:bat[:oid,:oid] := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_suppkey_fkey",0);
    (X_32,r1_39) := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_suppkey_fkey",2);
    X_34:bat[:oid,:oid] := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_suppkey_fkey",1);
    X_35 := sql.projectdelta(X_5,X_30,X_32,r1_39,X_34);
    X_36 := algebra.leftfetchjoin(X_26,X_35);
    X_39:bat[:oid,:str] := sql.bind(X_4,"sys","supplier","s_region",0);
    X_37:bat[:oid,:oid] := sql.tid(X_4,"sys","supplier");
    X_165 := algebra.subselect(X_39,X_37,A1,A1,true,false,false);
    (X_41,r1_49) := sql.bind(X_4,"sys","supplier","s_region",2);
    X_166 := algebra.subselect(r1_49,nil:bat[:oid,:oid],A1,A1,true,false,false);
    X_43:bat[:oid,:str] := sql.bind(X_4,"sys","supplier","s_region",1);
    X_167 := algebra.subselect(X_43,X_37,A1,A1,true,false,false);
    X_44 := sql.subdelta(X_165,X_37,X_41,X_166,X_167);
    (X_45,r1_58) := algebra.subjoin(X_36,X_44,nil:BAT,nil:BAT,false,nil:lng);
    X_47:bat[:oid,:oid] := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_orderdate_fkey",0);
    (X_49,r1_62) := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_orderdate_fkey",2);
    X_51:bat[:oid,:oid] := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_orderdate_fkey",1);
    X_52 := sql.projectdelta(X_5,X_47,X_49,r1_62,X_51);
    X_53:bat[:oid,:oid] := algebra.leftfetchjoinPath(X_45,X_26,X_52);
    X_54:bat[:oid,:oid] := sql.tid(X_4,"sys","dwdate");
    (X_56,r1_71) := algebra.subjoin(X_53,X_54,nil:BAT,nil:BAT,false,nil:lng);
    X_58 := sql.projectdelta(X_24,X_19,X_21,r1_22,X_23);
    X_59:bat[:oid,:str] := algebra.leftfetchjoinPath(X_56,X_45,r1_32,X_58);
    X_60:bat[:oid,:int] := sql.bind(X_4,"sys","dwdate","d_year",0);
    (X_62,r1_83) := sql.bind(X_4,"sys","dwdate","d_year",2);
    X_64:bat[:oid,:int] := sql.bind(X_4,"sys","dwdate","d_year",1);
    X_65 := sql.projectdelta(X_54,X_60,X_62,r1_83,X_64);
    X_66 := algebra.leftfetchjoin(r1_71,X_65);
    (X_67,r1_89,r2_89) := group.subgroup(X_66);
    (X_70,r1_92,r2_92) := group.subgroupdone(X_59,X_67);
    X_73 := algebra.leftfetchjoin(r1_92,X_59);
    X_74 := algebra.leftfetchjoin(r1_92,X_66);
    X_81:bat[:oid,:int] := sql.bind(X_4,"sys","lineorder","lo_revenue",0);
    (X_83,r1_105) := sql.bind(X_4,"sys","lineorder","lo_revenue",2);
    X_85:bat[:oid,:int] := sql.bind(X_4,"sys","lineorder","lo_revenue",1);
    X_86 := sql.projectdelta(X_5,X_81,X_83,r1_105,X_85);
    X_87:bat[:oid,:int] := algebra.leftfetchjoinPath(X_56,X_45,X_26,X_86);
    X_88:bat[:oid,:hge] := aggr.subsum(X_87,X_70,r1_92,true,true);
    (X_75,r1_97,r2_97) := algebra.subsort(X_74,false,false);
    (X_78,r1_100,r2_100) := algebra.subsort(X_73,r1_97,r2_97,false,false);
    X_89 := algebra.leftfetchjoin(r1_100,X_88);
    X_90 := algebra.leftfetchjoin(r1_100,X_74);
    X_91 := algebra.leftfetchjoin(r1_100,X_73);
    sql.resultSet(X_118,X_120,X_121,X_123,X_124,X_89,X_90,X_91);
end user.s2_1;

# 23:10:46 >  
# 23:10:46 >  "Done."
# 23:10:46 >  

