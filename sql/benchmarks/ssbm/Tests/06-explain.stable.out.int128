stdout of test '06-explain` in directory 'sql/benchmarks/ssbm` itself:


# 23:10:46 >  
# 23:10:46 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35257" "--set" "mapi_usock=/var/tmp/mtest-17595/.s.monetdb.35257" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_ssbm" "--set" "mal_listing=0"
# 23:10:46 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_ssbm', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:35257/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17595/.s.monetdb.35257
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 23:10:46 >  
# 23:10:46 >  "/usr/bin/python2" "06-explain.SQL.py" "06-explain"
# 23:10:46 >  

#set optimizer = 'sequential_pipe';
#explain
#select sum(lo_revenue), d_year, p_brand1
#	from lineorder, dwdate, part, supplier
#	where lo_orderdate = d_datekey
#		and lo_partkey = p_partkey
#		and lo_suppkey = s_suppkey
#		-- OK to add p_mfgr=’MFGR#2’
#		-- OK to add p_category=’MFGR#22’
#		and p_brand1 = 'MFGR#2221'
#		and s_region = 'EUROPE'
#	group by d_year, p_brand1
#	order by d_year, p_brand1;
% .explain # table_name
% mal # name
% clob # type
% 457 # length
function user.s2_1{autoCommit=true}(A0:str,A1:str):void;
    X_145:void := querylog.define("explain\nselect sum(lo_revenue), d_year, p_brand1\n\tfrom lineorder, dwdate, part, supplier\n\twhere lo_orderdate = d_datekey\n\t\tand lo_partkey = p_partkey\n\t\tand lo_suppkey = s_suppkey\n\t\t-- OK to add p_mfgr=’MFGR#2’\n\t\t-- OK to add p_category=’MFGR#22’\n\t\tand p_brand1 = \\'MFGR#2221\\'\n\t\tand s_region = \\'EUROPE\\'\n\tgroup by d_year, p_brand1\n\torder by d_year, p_brand1;","sequential_pipe",82);
    X_110 := bat.new(nil:oid,nil:str);
    X_118 := bat.append(X_110,"sys.L1");
    X_128 := bat.append(X_118,"sys.dwdate");
    X_137 := bat.append(X_128,"sys.part");
    X_113 := bat.new(nil:oid,nil:str);
    X_120 := bat.append(X_113,"L1");
    X_130 := bat.append(X_120,"d_year");
    X_139 := bat.append(X_130,"p_brand1");
    X_114 := bat.new(nil:oid,nil:str);
    X_122 := bat.append(X_114,"hugeint");
    X_132 := bat.append(X_122,"int");
    X_141 := bat.append(X_132,"clob");
    X_115 := bat.new(nil:oid,nil:int);
    X_124 := bat.append(X_115,128);
    X_134 := bat.append(X_124,32);
    X_143 := bat.append(X_134,0);
    X_117 := bat.new(nil:oid,nil:int);
    X_126 := bat.append(X_117,0);
    X_136 := bat.append(X_126,0);
    X_144 := bat.append(X_136,0);
    X_4 := sql.mvc();
    X_5:bat[:oid,:oid]  := sql.tid(X_4,"sys","lineorder");
    X_8:bat[:oid,:oid]  := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_partkey_fkey",0);
    (X_11,r1_11) := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_partkey_fkey",2);
    X_14:bat[:oid,:oid]  := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_partkey_fkey",1);
    X_16 := sql.projectdelta(X_5,X_8,X_11,r1_11,X_14);
    X_19:bat[:oid,:str]  := sql.bind(X_4,"sys","part","p_brand1",0);
    X_17:bat[:oid,:oid]  := sql.tid(X_4,"sys","part");
    X_173 := algebra.subselect(X_19,X_17,A0,A0,true,true,false);
    (X_21,r1_22) := sql.bind(X_4,"sys","part","p_brand1",2);
    X_174 := algebra.subselect(r1_22,nil:bat[:oid,:oid],A0,A0,true,true,false);
    X_23:bat[:oid,:str]  := sql.bind(X_4,"sys","part","p_brand1",1);
    X_176 := algebra.subselect(X_23,X_17,A0,A0,true,true,false);
    X_24 := sql.subdelta(X_173,X_17,X_21,X_174,X_176);
    (X_26,r1_31) := algebra.subjoin(X_16,X_24,nil:BAT,nil:BAT,false,nil:lng);
    X_30:bat[:oid,:oid] := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_suppkey_fkey",0);
    (X_32,r1_37) := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_suppkey_fkey",2);
    X_36:bat[:oid,:oid] := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_suppkey_fkey",1);
    X_37 := sql.projectdelta(X_5,X_30,X_32,r1_37,X_36);
    X_38 := algebra.leftfetchjoin(X_26,X_37);
    X_41:bat[:oid,:str] := sql.bind(X_4,"sys","supplier","s_region",0);
    X_39:bat[:oid,:oid] := sql.tid(X_4,"sys","supplier");
    X_177 := algebra.subselect(X_41,X_39,A1,A1,true,true,false);
    (X_44,r1_50) := sql.bind(X_4,"sys","supplier","s_region",2);
    X_178 := algebra.subselect(r1_50,nil:bat[:oid,:oid],A1,A1,true,true,false);
    X_47:bat[:oid,:str] := sql.bind(X_4,"sys","supplier","s_region",1);
    X_180 := algebra.subselect(X_47,X_39,A1,A1,true,true,false);
    X_49 := sql.subdelta(X_177,X_39,X_44,X_178,X_180);
    (X_51,r1_61) := algebra.subjoin(X_38,X_49,nil:BAT,nil:BAT,false,nil:lng);
    X_54:bat[:oid,:oid] := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_orderdate_fkey",0);
    (X_56,r1_66) := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_orderdate_fkey",2);
    X_58:bat[:oid,:oid] := sql.bind_idxbat(X_4,"sys","lineorder","lineorder_lo_orderdate_fkey",1);
    X_59 := sql.projectdelta(X_5,X_54,X_56,r1_66,X_58);
    X_60:bat[:oid,:oid] := algebra.leftfetchjoinPath(X_51,X_26,X_59);
    X_61:bat[:oid,:oid] := sql.tid(X_4,"sys","dwdate");
    (X_64,r1_76) := algebra.subjoin(X_60,X_61,nil:BAT,nil:BAT,false,nil:lng);
    X_68 := sql.projectdelta(X_24,X_19,X_21,r1_22,X_23);
    X_69:bat[:oid,:str] := algebra.leftfetchjoinPath(X_64,X_51,r1_31,X_68);
    X_70:bat[:oid,:int] := sql.bind(X_4,"sys","dwdate","d_year",0);
    (X_73,r1_87) := sql.bind(X_4,"sys","dwdate","d_year",2);
    X_76:bat[:oid,:int] := sql.bind(X_4,"sys","dwdate","d_year",1);
    X_78 := sql.projectdelta(X_61,X_70,X_73,r1_87,X_76);
    X_79 := algebra.leftfetchjoin(r1_76,X_78);
    (X_80,r1_95,r2_95) := group.subgroup(X_79);
    (X_83,r1_98,r2_98) := group.subgroupdone(X_69,X_80);
    X_86 := algebra.leftfetchjoin(r1_98,X_69);
    X_87 := algebra.leftfetchjoin(r1_98,X_79);
    X_95:bat[:oid,:int] := sql.bind(X_4,"sys","lineorder","lo_revenue",0);
    (X_99,r1_114) := sql.bind(X_4,"sys","lineorder","lo_revenue",2);
    X_101:bat[:oid,:int] := sql.bind(X_4,"sys","lineorder","lo_revenue",1);
    X_102 := sql.projectdelta(X_5,X_95,X_99,r1_114,X_101);
    X_103:bat[:oid,:int] := algebra.leftfetchjoinPath(X_64,X_51,X_26,X_102);
    X_104:bat[:oid,:hge] := aggr.subsum(X_103,X_83,r1_98,true,true);
    (X_88,r1_103,r2_103) := algebra.subsort(X_87,false,false);
    (X_92,r1_107,r2_107) := algebra.subsort(X_86,r1_103,r2_103,false,false);
    X_106 := algebra.leftfetchjoin(r1_107,X_104);
    X_107 := algebra.leftfetchjoin(r1_107,X_87);
    X_108 := algebra.leftfetchjoin(r1_107,X_86);
    sql.resultSet(X_137,X_139,X_141,X_143,X_144,X_106,X_107,X_108);
end user.s2_1;

# 23:10:46 >  
# 23:10:46 >  "Done."
# 23:10:46 >  

