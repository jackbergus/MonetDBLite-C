stdout of test '05-explain` in directory 'sql/benchmarks/ssbm` itself:


# 23:10:46 >  
# 23:10:46 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35257" "--set" "mapi_usock=/var/tmp/mtest-17595/.s.monetdb.35257" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_ssbm" "--set" "mal_listing=0"
# 23:10:46 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_ssbm', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2014 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:35257/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17595/.s.monetdb.35257
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 23:10:46 >  
# 23:10:46 >  "/usr/bin/python2" "05-explain.SQL.py" "05-explain"
# 23:10:46 >  

#set optimizer = 'sequential_pipe';
#explain
#select sum(lo_revenue), d_year, p_brand1
#	from lineorder, dwdate, part, supplier
#	where lo_orderdate = d_datekey
#		and lo_partkey = p_partkey
#		and lo_suppkey = s_suppkey
#		-- OK to add p_mfgr=’MFGR#2’
#		-- OK to add p_category=’MFGR#22’
#		and p_brand1 between 'MFGR#2221' and 'MFGR#2228'
#		and s_region = 'ASIA'
#	group by d_year, p_brand1
#	order by d_year, p_brand1;
% .explain # table_name
% mal # name
% clob # type
% 461 # length
function user.s2_1{autoCommit=true}(A0:str,A1:str,A2:str):void;
    X_5 := sql.mvc();
    X_6:bat[:oid,:oid]  := sql.tid(X_5,"sys","lineorder");
    X_9 := sql.bind_idxbat(X_5,"sys","lineorder","lineorder_lo_partkey_fkey",0);
    (X_12,r1_12) := sql.bind_idxbat(X_5,"sys","lineorder","lineorder_lo_partkey_fkey",2);
    X_15 := sql.bind_idxbat(X_5,"sys","lineorder","lineorder_lo_partkey_fkey",1);
    X_17 := sql.projectdelta(X_6,X_9,X_12,r1_12,X_15);
    X_20 := sql.bind(X_5,"sys","part","p_brand1",0);
    X_18:bat[:oid,:oid]  := sql.tid(X_5,"sys","part");
    X_150 := algebra.subselect(X_20,X_18,A0,A1,true,true,false);
    (X_22,r1_23) := sql.bind(X_5,"sys","part","p_brand1",2);
    X_151 := algebra.subselect(r1_23,A0,A1,true,true,false);
    X_24 := sql.bind(X_5,"sys","part","p_brand1",1);
    X_152 := algebra.subselect(X_24,X_18,A0,A1,true,true,false);
    X_25 := sql.subdelta(X_150,X_18,X_22,X_151,X_152);
    X_27 := X_25;
    (X_28,r1_33) := algebra.join(X_17,X_27);
    X_30 := sql.bind_idxbat(X_5,"sys","lineorder","lineorder_lo_suppkey_fkey",0);
    (X_32,r1_37) := sql.bind_idxbat(X_5,"sys","lineorder","lineorder_lo_suppkey_fkey",2);
    X_34 := sql.bind_idxbat(X_5,"sys","lineorder","lineorder_lo_suppkey_fkey",1);
    X_37 := sql.projectdelta(X_6,X_30,X_32,r1_37,X_34);
    X_38 := algebra.leftfetchjoin(X_28,X_37);
    X_41 := sql.bind(X_5,"sys","supplier","s_region",0);
    X_39:bat[:oid,:oid]  := sql.tid(X_5,"sys","supplier");
    X_153 := algebra.subselect(X_41,X_39,A2,A2,true,true,false);
    (X_44,r1_50) := sql.bind(X_5,"sys","supplier","s_region",2);
    X_154 := algebra.subselect(r1_50,A2,A2,true,true,false);
    X_47 := sql.bind(X_5,"sys","supplier","s_region",1);
    X_155 := algebra.subselect(X_47,X_39,A2,A2,true,true,false);
    X_49 := sql.subdelta(X_153,X_39,X_44,X_154,X_155);
    X_51 := X_49;
    (X_52,r1_61) := algebra.join(X_38,X_51);
    X_156 := algebra.leftfetchjoin(X_52,X_28);
    X_54 := sql.bind_idxbat(X_5,"sys","lineorder","lineorder_lo_orderdate_fkey",0);
    (X_56,r1_65) := sql.bind_idxbat(X_5,"sys","lineorder","lineorder_lo_orderdate_fkey",2);
    X_58 := sql.bind_idxbat(X_5,"sys","lineorder","lineorder_lo_orderdate_fkey",1);
    X_59 := sql.projectdelta(X_6,X_54,X_56,r1_65,X_58);
    X_60:bat[:oid,:oid]  := algebra.leftfetchjoin(X_156,X_59);
    X_61:bat[:oid,:oid]  := sql.tid(X_5,"sys","dwdate");
    (X_64,r1_75) := algebra.join(X_60,X_61);
    X_68 := sql.bind(X_5,"sys","dwdate","d_year",0);
    (X_71,r1_84) := sql.bind(X_5,"sys","dwdate","d_year",2);
    X_74 := sql.bind(X_5,"sys","dwdate","d_year",1);
    X_76 := sql.projectdelta(X_61,X_68,X_71,r1_84,X_74);
    X_77 := algebra.leftfetchjoin(r1_75,X_76);
    X_157 := algebra.leftfetchjoin(X_64,X_52);
    X_66 := sql.projectdelta(X_25,X_20,X_22,r1_23,X_24);
    X_67:bat[:oid,:str]  := algebra.leftfetchjoinPath(X_157,r1_33,X_66);
    (X_78,r1_95,r2_95) := group.subgroup(X_77,X_67);
    X_81 := algebra.leftfetchjoin(r1_95,X_67);
    X_82 := algebra.leftfetchjoin(r1_95,X_77);
    X_90 := sql.bind(X_5,"sys","lineorder","lo_revenue",0);
    (X_94,r1_111) := sql.bind(X_5,"sys","lineorder","lo_revenue",2);
    X_96 := sql.bind(X_5,"sys","lineorder","lo_revenue",1);
    X_97 := sql.projectdelta(X_6,X_90,X_94,r1_111,X_96);
    X_98:bat[:oid,:int]  := algebra.leftfetchjoinPath(X_157,X_28,X_97);
    X_99:bat[:oid,:lng]  := aggr.subsum(X_98,X_78,r1_95,true,true);
    (X_83,r1_100,r2_100) := algebra.subsort(X_82,false,false);
    (X_87,r1_104,r2_104) := algebra.subsort(X_81,r1_100,r2_100,false,false);
    X_101 := algebra.leftfetchjoin(r1_104,X_99);
    X_103 := algebra.leftfetchjoin(r1_104,X_81);
    X_102 := algebra.leftfetchjoin(r1_104,X_82);
    X_104 := sql.resultSet(3,1,X_101);
    sql.rsColumn(X_104,"sys.L1","L1","bigint",32,0,X_101);
    sql.rsColumn(X_104,"sys.dwdate","d_year","int",32,0,X_102);
    sql.rsColumn(X_104,"sys.part","p_brand1","clob",0,0,X_103);
    X_121 := io.stdout();
    sql.exportResult(X_121,X_104);
end s2_1;
# querylog.define("explain\nselect sum(lo_revenue), d_year, p_brand1\n\tfrom lineorder, dwdate, part, supplier\n\twhere lo_orderdate = d_datekey\n\t\tand lo_partkey = p_partkey\n\t\tand lo_suppkey = s_suppkey\n\t\t-- OK to add p_mfgr=’MFGR#2’\n\t\t-- OK to add p_category=’MFGR#22’\n\t\tand p_brand1 between \\'MFGR#2221\\' and \\'MFGR#2228\\'\n\t\tand s_region = \\'ASIA\\'\n\tgroup by d_year, p_brand1\n\torder by d_year, p_brand1;","sequential_pipe")

# 23:10:46 >  
# 23:10:46 >  "Done."
# 23:10:46 >  

