stdout of test '05-explain` in directory 'sql/benchmarks/ssbm` itself:


# 23:10:46 >  
# 23:10:46 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35257" "--set" "mapi_usock=/var/tmp/mtest-17595/.s.monetdb.35257" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_sql_benchmarks_ssbm" "--set" "mal_listing=0"
# 23:10:46 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_sql_benchmarks_ssbm', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:35257/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17595/.s.monetdb.35257
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 23:10:46 >  
# 23:10:46 >  "/usr/bin/python2" "05-explain.SQL.py" "05-explain"
# 23:10:46 >  

#set optimizer = 'sequential_pipe';
#explain
#select sum(lo_revenue), d_year, p_brand1
#	from lineorder, dwdate, part, supplier
#	where lo_orderdate = d_datekey
#		and lo_partkey = p_partkey
#		and lo_suppkey = s_suppkey
#		-- OK to add p_mfgr=’MFGR#2’
#		-- OK to add p_category=’MFGR#22’
#		and p_brand1 between 'MFGR#2221' and 'MFGR#2228'
#		and s_region = 'ASIA'
#	group by d_year, p_brand1
#	order by d_year, p_brand1;
% .explain # table_name
% mal # name
% clob # type
% 390 # length
function user.s4_1():void;
    X_151:void := querylog.define("explain\nselect sum(lo_revenue), d_year, p_brand1\n from lineorder, dwdate, part, supplier\n where lo_orderdate = d_datekey\n and lo_partkey = p_partkey\n and lo_suppkey = s_suppkey\n \n \n and p_brand1 between \\'MFGR#2221\\' and \\'MFGR#2228\\'\n and s_region = \\'ASIA\\'\n group by d_year, p_brand1\n order by d_year, p_brand1;","sequential_pipe",65);
    X_117 := bat.new(nil:str);
    X_124 := bat.append(X_117,"sys.L3");
    X_134 := bat.append(X_124,"sys.dwdate");
    X_143 := bat.append(X_134,"sys.part");
    X_119 := bat.new(nil:str);
    X_126 := bat.append(X_119,"L2");
    X_136 := bat.append(X_126,"d_year");
    X_145 := bat.append(X_136,"p_brand1");
    X_120 := bat.new(nil:str);
    X_128 := bat.append(X_120,"bigint");
    X_138 := bat.append(X_128,"int");
    X_147 := bat.append(X_138,"clob");
    X_121 := bat.new(nil:int);
    X_130 := bat.append(X_121,64);
    X_140 := bat.append(X_130,32);
    X_149 := bat.append(X_140,0);
    X_123 := bat.new(nil:int);
    X_132 := bat.append(X_123,0);
    X_142 := bat.append(X_132,0);
    X_150 := bat.append(X_142,0);
    X_0 := sql.mvc();
    C_1:bat[:oid] := sql.tid(X_0,"sys","lineorder");
    X_4:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_partkey_fkey",0);
    (X_7,r1_11) := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_partkey_fkey",2);
    X_10:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_partkey_fkey",1);
    X_13 := sql.projectdelta(C_1,X_4,X_7,r1_11,X_10);
    X_16:bat[:str] := sql.bind(X_0,"sys","part","p_brand1",0);
    C_14:bat[:oid] := sql.tid(X_0,"sys","part");
    C_25 := algebra.subselect(X_16,C_14,"MFGR#2221","MFGR#2228",true,true,false);
    (X_30,r1_34) := algebra.subjoin(X_13,C_25,nil:BAT,nil:BAT,false,nil:lng);
    X_35:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_suppkey_fkey",0);
    (X_37,r1_41) := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_suppkey_fkey",2);
    X_39:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_suppkey_fkey",1);
    X_41 := sql.projectdelta(C_1,X_35,X_37,r1_41,X_39);
    X_42 := algebra.projection(X_30,X_41);
    X_45:bat[:str] := sql.bind(X_0,"sys","supplier","s_region",0);
    C_43:bat[:oid] := sql.tid(X_0,"sys","supplier");
    C_53 := algebra.subselect(X_45,C_43,"ASIA","ASIA",true,false,false);
    (X_55,r1_59) := algebra.subjoin(X_42,C_53,nil:BAT,nil:BAT,false,nil:lng);
    X_57:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_orderdate_fkey",0);
    (X_59,r1_63) := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_orderdate_fkey",2);
    X_61:bat[:oid] := sql.bind_idxbat(X_0,"sys","lineorder","lineorder_lo_orderdate_fkey",1);
    X_63 := sql.projectdelta(C_1,X_57,X_59,r1_63,X_61);
    X_65:bat[:oid] := algebra.projectionpath(X_55,X_30,X_63);
    C_66:bat[:oid] := sql.tid(X_0,"sys","dwdate");
    (X_68,r1_72) := algebra.subjoin(X_65,C_66,nil:BAT,nil:BAT,false,nil:lng);
    X_77:bat[:str] := algebra.projectionpath(X_68,X_55,r1_34,C_25,X_16);
    X_78:bat[:int] := sql.bind(X_0,"sys","dwdate","d_year",0);
    X_85:bat[:int] := algebra.projectionpath(r1_72,C_66,X_78);
    (X_86,r1_90,r2_90) := group.subgroup(X_85);
    (X_89,r1_93,r2_93) := group.subgroupdone(X_77,X_86);
    X_92 := algebra.projection(r1_93,X_77);
    X_93 := algebra.projection(r1_93,X_85);
    X_100:bat[:int] := sql.bind(X_0,"sys","lineorder","lo_revenue",0);
    X_109:bat[:int] := algebra.projectionpath(X_68,X_55,X_30,C_1,X_100);
    X_110:bat[:lng] := aggr.subsum(X_109,X_89,r1_93,true,true);
    (X_94,r1_98,r2_98) := algebra.subsort(X_93,false,false);
    (X_97,r1_101,r2_101) := algebra.subsort(X_92,r1_98,r2_98,false,false);
    X_113 := algebra.projection(r1_101,X_110);
    X_114 := algebra.projection(r1_101,X_93);
    X_115 := algebra.projection(r1_101,X_92);
    sql.resultSet(X_143,X_145,X_147,X_149,X_150,X_113,X_114,X_115);
end user.s4_1;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=4 usec 
#costmodel            actions= 1 time=6 usec 
#coercion             actions= 0 time=3 usec 
#evaluate             actions= 3 time=38 usec 
#emptybind            actions=12 time=36 usec 
#pushselect           actions= 9 time=40 usec 
#aliases              actions=11 time=16 usec 
#mergetable           actions= 0 time=65 usec 
#deadcode             actions=15 time=14 usec 
#aliases              actions= 0 time=10 usec 
#constants            actions=17 time=23 usec 
#commonTerms          actions= 0 time=9 usec 
#projectionpath       actions= 8 time=21 usec 
#reorder              actions= 1 time=44 usec 
#deadcode             actions= 8 time=10 usec 
#reduce               actions=77 time=20 usec 
#matpack              actions= 0 time=3 usec 
#multiplex            actions= 0 time=3 usec 
#profiler             actions= 1 time=5 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=28 usec 
#total                actions= 1 time=595 usec 

# 23:10:46 >  
# 23:10:46 >  "Done."
# 23:10:46 >  

