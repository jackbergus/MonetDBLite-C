stdout of test 'create_bam` in directory 'sql/test/UserDump` itself:


# 13:24:35 >  
# 13:24:35 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=32560" "--set" "mapi_usock=/var/tmp/mtest-17979/.s.monetdb.32560" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/robin/MonetDB/PREFIX/var/MonetDB/mTests_sql_test_UserDump" "--set" "mal_listing=0"
# 13:24:35 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_sql_test_UserDump', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 7.333 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2014 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://robin-xps13:32560/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17979/.s.monetdb.32560
# MonetDB/SQL module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 19_cluster.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 40_json.sql
# loading sql script: 41_jsonstore.sql
# loading sql script: 45_uuid.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 85_bam.sql
# loading sql script: 99_system.sql
#WARNING To speedup sql.password a bulk operator implementation is needed
#WARNING To speedup sql.password a bulk operator implementation is needed
#WARNING To speedup sql.password a bulk operator implementation is needed
#WARNING To speedup sql.password a bulk operator implementation is needed
#WARNING To speedup sql.get_value a bulk operator implementation is needed
#WARNING To speedup sql.get_value a bulk operator implementation is needed
#WARNING To speedup sql.get_value a bulk operator implementation is needed
#WARNING To speedup sql.get_value a bulk operator implementation is needed
#WARNING To speedup sql.get_value a bulk operator implementation is needed
#WARNING To speedup sql.get_value a bulk operator implementation is needed
#WARNING To speedup sql.get_value a bulk operator implementation is needed
#WARNING To speedup sql.get_value a bulk operator implementation is needed
#WARNING To speedup sql.get_value a bulk operator implementation is needed
#WARNING To speedup sql.get_value a bulk operator implementation is needed
#WARNING To speedup sql.get_value a bulk operator implementation is needed
#WARNING To speedup sql.get_value a bulk operator implementation is needed

# 13:24:35 >  
# 13:24:35 >  "/usr/bin/python2" "create_bam.SQL.py" "create_bam"
# 13:24:35 >  

#create user voc with password 'voc' name 'VOC Explorer' schema sys;
#create schema voc authorization voc;
#alter user voc set schema voc;
#create table foo (
#        id int,
#        v int,
#        primary key (id)
#);
#create view bar as select * from foo;
#create function b(i int) returns int begin return select v from bar where id = i; end;
#create table a (
#        id int
#);
#create trigger a after insert on foo insert into a values (1);
#create user test with password 'test' name 'Test User' schema sys;
#create schema test authorization test;
#alter user test set schema test;
#create table foo (
#        id int,
#        v int,
#        primary key (id)
#);
#create view bar as select * from foo;
#create function b(i int) returns int begin return select v from bar where id = i; end;
#create table a (
#        id int
#);
#create trigger a after insert on foo insert into a values (1);
#create trigger test.x after insert on foo insert into a values (1);
#create trigger "test"."z" after insert on "foo" insert into a values (1);
START TRANSACTION;
CREATE USER "test" WITH ENCRYPTED PASSWORD 'ee26b0dd4af7e749aa1a8ee3c10ae9923f618980772e473f8819a5d4940e0db27ac185f8a0e1d5f84f88bc887fd67b143732c304cc5fa9ad8e6f57f50028a8ff' NAME 'Test User' SCHEMA "sys";
CREATE USER "voc" WITH ENCRYPTED PASSWORD 'ea45cf4e124b215a28631ec7ff0bf06e82fc26b2be7a066c9594855690fb5d42438be58d6523132384a1738cb4e5139caa1f970ebdfb422d65834d9a4ef61c0e' NAME 'VOC Explorer' SCHEMA "sys";
CREATE SCHEMA "test" AUTHORIZATION "test";
CREATE SCHEMA "voc" AUTHORIZATION "voc";
ALTER USER "test" SET SCHEMA "test";
ALTER USER "voc" SET SCHEMA "voc";
SET SCHEMA "bam";
CREATE TABLE "bam"."files" (
	"file_id"        BIGINT        NOT NULL,
	"file_location"  CHARACTER LARGE OBJECT NOT NULL,
	"dbschema"       SMALLINT      NOT NULL,
	"format_version" VARCHAR(7),
	"sorting_order"  VARCHAR(10),
	"comments"       CHARACTER LARGE OBJECT,
	CONSTRAINT "files_pkey_file_id" PRIMARY KEY ("file_id")
);
CREATE TABLE "bam"."sq" (
	"sn"      CHARACTER LARGE OBJECT NOT NULL,
	"file_id" BIGINT        NOT NULL,
	"ln"      INTEGER,
	"as"      INTEGER,
	"m5"      CHARACTER LARGE OBJECT,
	"sp"      CHARACTER LARGE OBJECT,
	"ur"      CHARACTER LARGE OBJECT,
	CONSTRAINT "sq_pkey_sn_file_id" PRIMARY KEY ("sn", "file_id")
);
CREATE TABLE "bam"."rg" (
	"id"      CHARACTER LARGE OBJECT NOT NULL,
	"file_id" BIGINT        NOT NULL,
	"cn"      CHARACTER LARGE OBJECT,
	"ds"      CHARACTER LARGE OBJECT,
	"dt"      TIMESTAMP,
	"fo"      CHARACTER LARGE OBJECT,
	"ks"      CHARACTER LARGE OBJECT,
	"lb"      CHARACTER LARGE OBJECT,
	"pg"      CHARACTER LARGE OBJECT,
	"pi"      INTEGER,
	"pl"      CHARACTER LARGE OBJECT,
	"pu"      CHARACTER LARGE OBJECT,
	"sm"      CHARACTER LARGE OBJECT,
	CONSTRAINT "rg_pkey_id_file_id" PRIMARY KEY ("id", "file_id")
);
CREATE TABLE "bam"."pg" (
	"id"      CHARACTER LARGE OBJECT NOT NULL,
	"file_id" BIGINT        NOT NULL,
	"pn"      CHARACTER LARGE OBJECT,
	"cl"      CHARACTER LARGE OBJECT,
	"pp"      CHARACTER LARGE OBJECT,
	"vn"      CHARACTER LARGE OBJECT,
	CONSTRAINT "pg_pkey_id_file_id" PRIMARY KEY ("id", "file_id")
);
CREATE TABLE "bam"."export" (
	"qname" CHARACTER LARGE OBJECT NOT NULL,
	"flag"  SMALLINT      NOT NULL,
	"rname" CHARACTER LARGE OBJECT NOT NULL,
	"pos"   INTEGER       NOT NULL,
	"mapq"  SMALLINT      NOT NULL,
	"cigar" CHARACTER LARGE OBJECT NOT NULL,
	"rnext" CHARACTER LARGE OBJECT NOT NULL,
	"pnext" INTEGER       NOT NULL,
	"tlen"  INTEGER       NOT NULL,
	"seq"   CHARACTER LARGE OBJECT NOT NULL,
	"qual"  CHARACTER LARGE OBJECT NOT NULL
);
SET SCHEMA "voc";
CREATE TABLE "voc"."foo" (
	"id" INTEGER       NOT NULL,
	"v"  INTEGER,
	CONSTRAINT "foo_id_pkey" PRIMARY KEY ("id")
);
create view bar as select * from foo;
create function b(i int) returns int begin return select v from bar where id = i; end;
CREATE TABLE "voc"."a" (
	"id" INTEGER
);
create trigger a after insert on foo insert into a values (1);
SET SCHEMA "test";
CREATE TABLE "test"."foo" (
	"id" INTEGER       NOT NULL,
	"v"  INTEGER,
	CONSTRAINT "foo_id_pkey" PRIMARY KEY ("id")
);
create view bar as select * from foo;
create function b(i int) returns int begin return select v from bar where id = i; end;
CREATE TABLE "test"."a" (
	"id" INTEGER
);
create trigger a after insert on foo insert into a values (1);
create trigger test.x after insert on foo insert into a values (1);
create trigger "test"."z" after insert on "foo" insert into a values (1);
SET SCHEMA "sys";
ALTER TABLE "bam"."pg" ADD CONSTRAINT "pg_fkey_file_id" FOREIGN KEY ("file_id") REFERENCES "bam"."files" ("file_id");
ALTER TABLE "bam"."rg" ADD CONSTRAINT "rg_fkey_file_id" FOREIGN KEY ("file_id") REFERENCES "bam"."files" ("file_id");
ALTER TABLE "bam"."sq" ADD CONSTRAINT "sq_fkey_file_id" FOREIGN KEY ("file_id") REFERENCES "bam"."files" ("file_id");
COMMIT;
START TRANSACTION;
SET SCHEMA "voc";
CREATE TABLE "voc"."foo" (
	"id" INTEGER       NOT NULL,
	"v"  INTEGER,
	CONSTRAINT "foo_id_pkey" PRIMARY KEY ("id")
);
create view bar as select * from foo;
create function b(i int) returns int begin return select v from bar where id = i; end;
CREATE TABLE "voc"."a" (
	"id" INTEGER
);
create trigger a after insert on foo insert into a values (1);
ALTER TABLE "bam"."pg" ADD CONSTRAINT "pg_fkey_file_id" FOREIGN KEY ("file_id") REFERENCES "bam"."files" ("file_id");
ALTER TABLE "bam"."rg" ADD CONSTRAINT "rg_fkey_file_id" FOREIGN KEY ("file_id") REFERENCES "bam"."files" ("file_id");
ALTER TABLE "bam"."sq" ADD CONSTRAINT "sq_fkey_file_id" FOREIGN KEY ("file_id") REFERENCES "bam"."files" ("file_id");
COMMIT;
START TRANSACTION;
SET SCHEMA "test";
CREATE TABLE "test"."foo" (
	"id" INTEGER       NOT NULL,
	"v"  INTEGER,
	CONSTRAINT "foo_id_pkey" PRIMARY KEY ("id")
);
create view bar as select * from foo;
create function b(i int) returns int begin return select v from bar where id = i; end;
CREATE TABLE "test"."a" (
	"id" INTEGER
);
create trigger a after insert on foo insert into a values (1);
create trigger test.x after insert on foo insert into a values (1);
create trigger "test"."z" after insert on "foo" insert into a values (1);
ALTER TABLE "bam"."pg" ADD CONSTRAINT "pg_fkey_file_id" FOREIGN KEY ("file_id") REFERENCES "bam"."files" ("file_id");
ALTER TABLE "bam"."rg" ADD CONSTRAINT "rg_fkey_file_id" FOREIGN KEY ("file_id") REFERENCES "bam"."files" ("file_id");
ALTER TABLE "bam"."sq" ADD CONSTRAINT "sq_fkey_file_id" FOREIGN KEY ("file_id") REFERENCES "bam"."files" ("file_id");
COMMIT;

# 13:24:36 >  
# 13:24:36 >  "Done."
# 13:24:36 >  
