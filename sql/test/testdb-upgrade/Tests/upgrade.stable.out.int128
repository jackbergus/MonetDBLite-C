stdout of test 'upgrade` in directory 'sql/test/testdb-upgrade` itself:


# 21:49:40 >  
# 21:49:40 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=30515" "--set" "mapi_usock=/var/tmp/mtest-14642/.s.monetdb.30515" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/sjoerd/Monet-devel/var/MonetDB/mTests_sql_test_testdb-upgrade" "--set" "mal_listing=0"
# 21:49:40 >  

# MonetDB 5 server v11.16.0 (hg id: fd9db07674cf+)
# This is an unreleased version
# Serving database 'mTests_sql_test_testdb-upgrade', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information


Ready.
Running database upgrade commands:
set schema "sys";
create function fuse(one bigint, two bigint)
returns hugeint
external name udf.fuse;
create function sys.generate_series(first hugeint, last hugeint)
returns table (value hugeint)
external name generator.series;
create function sys.generate_series(first hugeint, last hugeint, stepsize hugeint)
returns table (value hugeint)
external name generator.series;
create aggregate stddev_samp(val HUGEINT) returns DOUBLE
    external name "aggr"."stdev";
create aggregate stddev_pop(val HUGEINT) returns DOUBLE
    external name "aggr"."stdevp";
create aggregate var_samp(val HUGEINT) returns DOUBLE
    external name "aggr"."variance";
create aggregate var_pop(val HUGEINT) returns DOUBLE
    external name "aggr"."variancep";
create aggregate median(val HUGEINT) returns HUGEINT
    external name "aggr"."median";
create aggregate quantile(val HUGEINT, q DOUBLE) returns HUGEINT
    external name "aggr"."quantile";
create aggregate corr(e1 HUGEINT, e2 HUGEINT) returns HUGEINT
    external name "aggr"."corr";
create function json.filter(js json, name hugeint)
returns json
external name json.filter;
drop view sys.tablestoragemodel;
create view sys.tablestoragemodel
as select "schema","table",max(count) as "count",
	sum(columnsize) as columnsize,
	sum(heapsize) as heapsize,
	sum(hashes) as hashes,
	sum(imprints) as imprints,
	sum(case when sorted = false then 8 * count else 0 end) as auxiliary
from sys.storagemodel() group by "schema","table";
insert into sys.systemfunctions (select id from sys.functions where name in ('fuse', 'generate_series', 'stddev_samp', 'stddev_pop', 'var_samp', 'var_pop', 'median', 'quantile', 'corr') and schema_id = (select id from sys.schemas where name = 'sys') and id not in (select function_id from sys.systemfunctions));
insert into sys.systemfunctions (select id from sys.functions where name = 'filter' and schema_id = (select id from sys.schemas where name = 'json') and id not in (select function_id from sys.systemfunctions));
update sys._tables set system = true where name = 'tablestoragemodel' and schema_id = (select id from sys.schemas where name = 'sys');
insert into sys.types values (13, 'hge', 'hugeint', 128, 1, 2, 7, 0);
insert into sys.types values (18, 'hge', 'decimal', 39, 1, 10, 10, 0);
set schema "testschema";


# 11:43:08 >  
# 11:43:08 >  "/usr/bin/python2" "upgrade.SQL.py" "upgrade"
# 11:43:08 >  

#select count(*) from testschema.smallstring;
% testschema.L1 # table_name
% L1 # name
% wrd # type
% 2 # length
[ 66	]

# 21:49:42 >  
# 21:49:42 >  "Done."
# 21:49:42 >  

