stdout of test 'upgrade` in directory 'sql/test/emptydb-upgrade-chain` itself:


# 16:53:35 >  
# 16:53:35 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=39660" "--set" "mapi_usock=/var/tmp/mtest-30908/.s.monetdb.39660" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/sjoerd/Monet-stable/var/MonetDB/mTests_sql_test_emptydb-upgrade-chain" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 16:53:35 >  

# MonetDB 5 server v11.21.16 (hg id: c20b591c1c70+)
# This is an unreleased version
# Serving database 'mTests_sql_test_emptydb-upgrade-chain', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.589 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://madrid.da.cwi.nl:39660/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-30908/.s.monetdb.39660
# MonetDB/GIS module loaded
Running database upgrade commands:
set schema "sys";
drop function sys.dependencies_functions_os_triggers();
CREATE FUNCTION dependencies_functions_on_triggers()
RETURNS TABLE (sch varchar(100), usr varchar(100), dep_type varchar(32))
RETURN TABLE (SELECT f.name, tri.name, 'DEP_TRIGGER' from functions as f, triggers as tri, dependencies as dep where dep.id = f.id AND dep.depend_id =tri.id AND dep.depend_type = 8);
insert into sys.systemfunctions (select id from sys.functions where name in ('dependencies_functions_on_triggers') and schema_id = (select id from sys.schemas where name = 'sys') and id not in (select function_id from sys.systemfunctions));
delete from systemfunctions where function_id not in (select id from functions);
set schema "sys";
commit;

Running database upgrade commands:
set schema "sys";
DROP VIEW sys.dependencies_vw;
DROP VIEW sys.ids;
CREATE VIEW sys.ids (id, name, schema_id, table_id, table_name, obj_type, sys_table) AS
SELECT id, name, cast(null as int) as schema_id, cast(null as int) as table_id, cast(null as varchar(124)) as table_name, 'author' AS obj_type, 'sys.auths' AS sys_table FROM sys.auths UNION ALL
SELECT id, name, cast(null as int) as schema_id, cast(null as int) as table_id, cast(null as varchar(124)) as table_name, 'schema', 'sys.schemas' FROM sys.schemas UNION ALL
SELECT id, name, schema_id, id as table_id, name as table_name, case when type = 1 then 'view' else 'table' end, 'sys._tables' FROM sys._tables UNION ALL
SELECT id, name, schema_id, id as table_id, name as table_name, case when type = 1 then 'view' else 'table' end, 'tmp._tables' FROM tmp._tables UNION ALL
SELECT c.id, c.name, t.schema_id, c.table_id, t.name as table_name, 'column', 'sys._columns' FROM sys._columns c JOIN sys._tables t ON c.table_id = t.id UNION ALL
SELECT c.id, c.name, t.schema_id, c.table_id, t.name as table_name, 'column', 'tmp._columns' FROM tmp._columns c JOIN tmp._tables t ON c.table_id = t.id UNION ALL
SELECT k.id, k.name, t.schema_id, k.table_id, t.name as table_name, 'key', 'sys.keys' FROM sys.keys k JOIN sys._tables t ON k.table_id = t.id UNION ALL
SELECT k.id, k.name, t.schema_id, k.table_id, t.name as table_name, 'key', 'tmp.keys' FROM tmp.keys k JOIN tmp._tables t ON k.table_id = t.id UNION ALL
SELECT i.id, i.name, t.schema_id, i.table_id, t.name as table_name, 'index', 'sys.idxs' FROM sys.idxs i JOIN sys._tables t ON i.table_id = t.id UNION ALL
SELECT i.id, i.name, t.schema_id, i.table_id, t.name as table_name, 'index', 'tmp.idxs' FROM tmp.idxs i JOIN tmp._tables t ON i.table_id = t.id UNION ALL
SELECT g.id, g.name, t.schema_id, g.table_id, t.name as table_name, 'trigger', 'sys.triggers' FROM sys.triggers g JOIN sys._tables t ON g.table_id = t.id UNION ALL
SELECT g.id, g.name, t.schema_id, g.table_id, t.name as table_name, 'trigger', 'tmp.triggers' FROM tmp.triggers g JOIN tmp._tables t ON g.table_id = t.id UNION ALL
SELECT id, name, schema_id, cast(null as int) as table_id, cast(null as varchar(124)) as table_name, case when type = 2 then 'procedure' else 'function' end, 'sys.functions' FROM sys.functions UNION ALL
SELECT a.id, a.name, f.schema_id, cast(null as int) as table_id, cast(null as varchar(124)) as table_name, case when f.type = 2 then 'procedure arg' else 'function arg' end, 'sys.args' FROM sys.args a JOIN sys.functions f ON a.func_id = f.id UNION ALL
SELECT id, name, schema_id, cast(null as int) as table_id, cast(null as varchar(124)) as table_name, 'sequence', 'sys.sequences' FROM sys.sequences UNION ALL
SELECT id, sqlname, schema_id, cast(null as int) as table_id, cast(null as varchar(124)) as table_name, 'type', 'sys.types' FROM sys.types WHERE id > 2000 /* exclude system types to prevent duplicates with auths.id */
 ORDER BY id;
GRANT SELECT ON sys.ids TO PUBLIC;
CREATE VIEW sys.dependencies_vw AS
SELECT d.id, i1.obj_type, i1.name,
       d.depend_id as used_by_id, i2.obj_type as used_by_obj_type, i2.name as used_by_name,
       d.depend_type, dt.dependency_type_name
  FROM sys.dependencies d
  JOIN sys.ids i1 ON d.id = i1.id
  JOIN sys.ids i2 ON d.depend_id = i2.id
  JOIN sys.dependency_types dt ON d.depend_type = dt.dependency_type_id
 ORDER BY id, depend_id;
GRANT SELECT ON sys.dependencies_vw TO PUBLIC;
update sys._tables set system = true where name in ('ids', 'dependencies_vw') and schema_id in (select id from sys.schemas where name = 'sys');
set schema "sys";
commit;

Running database upgrade commands:
set schema "sys";
drop function sys.chi2prob(double, double);
delete from systemfunctions where function_id not in (select id from functions);
set schema "sys";
commit;

Running database upgrade commands:
set schema sys;
create aggregate sys.group_concat(str string) returns string external name "aggr"."str_group_concat";
grant execute on aggregate sys.group_concat(string) to public;
create aggregate sys.group_concat(str string, sep string) returns string external name "aggr"."str_group_concat";
grant execute on aggregate sys.group_concat(string, string) to public;
insert into sys.systemfunctions (select id from sys.functions where name in ('group_concat') and schema_id = (select id from sys.schemas where name = 'sys') and id not in (select function_id from sys.systemfunctions));
set schema "sys";
commit;

Running database upgrade commands:
set schema sys;
create function sys.remote_table_credentials (tablename string) returns table ("uri" string, "username" string, "hash" string) external name sql.rt_credentials;
insert into sys.systemfunctions (select id from sys.functions where name='remote_table_credentials' and id not in (select function_id from sys.systemfunctions));
set schema "sys";
commit;

Running database upgrade commands:
set schema "sys";
DROP FUNCTION dependencies_schemas_on_users();
DROP FUNCTION dependencies_owners_on_schemas();
DROP FUNCTION dependencies_tables_on_views();
DROP FUNCTION dependencies_tables_on_indexes();
DROP FUNCTION dependencies_tables_on_triggers();
DROP FUNCTION dependencies_tables_on_foreignKeys();
DROP FUNCTION dependencies_tables_on_functions();
DROP FUNCTION dependencies_columns_on_views();
DROP FUNCTION dependencies_columns_on_keys();
DROP FUNCTION dependencies_columns_on_indexes();
DROP FUNCTION dependencies_columns_on_functions();
DROP FUNCTION dependencies_columns_on_triggers();
DROP FUNCTION dependencies_views_on_functions();
DROP FUNCTION dependencies_views_on_triggers();
DROP FUNCTION dependencies_functions_on_functions();
DROP FUNCTION dependencies_functions_on_triggers();
DROP FUNCTION dependencies_keys_on_foreignKeys();
delete from systemfunctions where function_id not in (select id from functions);
set schema "sys";
commit;

# MonetDB/SQL module loaded

Ready.

# 16:02:52 >  
# 16:02:52 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-5391" "--port=32916"
# 16:02:52 >  

#select 1;
% .L2 # table_name
% L2 # name
% tinyint # type
% 1 # length
[ 1	]

# 16:53:35 >  
# 16:53:35 >  "Done."
# 16:53:35 >  

