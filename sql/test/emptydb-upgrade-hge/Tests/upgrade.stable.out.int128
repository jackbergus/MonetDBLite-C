stdout of test 'upgrade` in directory 'sql/test/emptydb-upgrade-hge` itself:


# 16:53:43 >  
# 16:53:43 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=39660" "--set" "mapi_usock=/var/tmp/mtest-30908/.s.monetdb.39660" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/sjoerd/Monet-stable/var/MonetDB/mTests_sql_test_emptydb-upgrade-hge" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 16:53:43 >  

# MonetDB 5 server v11.21.16 (hg id: c20b591c1c70+)
# This is an unreleased version
# Serving database 'mTests_sql_test_emptydb-upgrade-hge', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.589 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://madrid.da.cwi.nl:39660/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-30908/.s.monetdb.39660
# MonetDB/GIS module loaded
# Start processing logs sql/sql_logs version 52200
# Start reading the write-ahead log 'sql_logs/sql/log.3'
# Finished reading the write-ahead log 'sql_logs/sql/log.3'
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.
Running database upgrade commands:
set schema "sys";
delete from sys._columns where table_id = (select id from sys._tables where name = 'connections' and schema_id = (select id from sys.schemas where name = 'sys'));
delete from sys._tables where name = 'connections' and schema_id = (select id from sys.schemas where name = 'sys');
create function profiler.getlimit() returns integer external name profiler.getlimit;
create procedure profiler.setlimit(lim integer) external name profiler.setlimit;
drop procedure profiler.setpoolsize;
drop procedure profiler.setstream;
insert into sys.systemfunctions (select id from sys.functions where name in ('getlimit', 'setlimit') and schema_id = (select id from sys.schemas where name = 'profiler') and id not in (select function_id from sys.systemfunctions));
CREATE TABLE sys.function_types (
function_type_id   SMALLINT NOT NULL PRIMARY KEY,
function_type_name VARCHAR(30) NOT NULL UNIQUE);
INSERT INTO sys.function_types (function_type_id, function_type_name) VALUES
(1, 'Scalar function'), (2, 'Procedure'), (3, 'Aggregate function'), (4, 'Filter function'), (5, 'Function returning a table'),
(6, 'Analytic function'), (7, 'Loader function');
CREATE TABLE sys.function_languages (
language_id   SMALLINT NOT NULL PRIMARY KEY,
language_name VARCHAR(20) NOT NULL UNIQUE);
INSERT INTO sys.function_languages (language_id, language_name) VALUES
(0, 'Internal C'), (1, 'MAL'), (2, 'SQL'), (3, 'R'), (4, 'C'), (5, 'Java'), (6, 'Python'), (7, 'Python Mapped');
CREATE TABLE sys.key_types (
key_type_id   SMALLINT NOT NULL PRIMARY KEY,
key_type_name VARCHAR(15) NOT NULL UNIQUE);
INSERT INTO sys.key_types (key_type_id, key_type_name) VALUES
(0, 'Primary Key'), (1, 'Unique Key'), (2, 'Foreign Key');
CREATE TABLE sys.index_types (
index_type_id   SMALLINT NOT NULL PRIMARY KEY,
index_type_name VARCHAR(25) NOT NULL UNIQUE);
INSERT INTO sys.index_types (index_type_id, index_type_name) VALUES
(0, 'Hash'), (1, 'Join'), (2, 'Order preserving hash'), (3, 'No-index'), (4, 'Imprint'), (5, 'Ordered');
CREATE TABLE sys.privilege_codes (
privilege_code_id   INT NOT NULL PRIMARY KEY,
privilege_code_name VARCHAR(30) NOT NULL UNIQUE);
INSERT INTO sys.privilege_codes (privilege_code_id, privilege_code_name) VALUES
(1, 'SELECT'), (2, 'UPDATE'), (4, 'INSERT'), (8, 'DELETE'), (16, 'EXECUTE'), (32, 'GRANT'),
(3, 'SELECT,UPDATE'), (5, 'SELECT,INSERT'), (6, 'INSERT,UPDATE'), (7, 'SELECT,INSERT,UPDATE'),
(9, 'SELECT,DELETE'), (10, 'UPDATE,DELETE'), (11, 'SELECT,UPDATE,DELETE'), (12, 'INSERT,DELETE'),
(13, 'SELECT,INSERT,DELETE'), (14, 'INSERT,UPDATE,DELETE'), (15, 'SELECT,INSERT,UPDATE,DELETE');
update sys._tables set system = true where name in ('function_languages', 'function_types', 'index_types', 'key_types', 'privilege_codes') and schema_id = (select id from sys.schemas where name = 'sys');
drop procedure SHPload(integer);
create procedure SHPload(fid integer) external name shp.import;
insert into sys.systemfunctions (select id from sys.functions where name = 'shpload' and schema_id = (select id from sys.schemas where name = 'sys') and id not in (select function_id from sys.systemfunctions));
set schema "sys";

# 15:26:18 >  
# 15:26:18 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-21187" "--port=38946"
# 15:26:18 >  

#select 1;
% .L2 # table_name
% L2 # name
% tinyint # type
% 1 # length
[ 1	]

# 16:53:43 >  
# 16:53:43 >  "Done."
# 16:53:43 >  

