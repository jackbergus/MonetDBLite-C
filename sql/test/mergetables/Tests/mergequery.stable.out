stdout of test 'mergequery` in directory 'sql/test/mergetables` itself:


# 16:20:23 >  
# 16:20:23 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=30678" "--set" "mapi_usock=/var/tmp/mtest-11019/.s.monetdb.30678" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/export/scratch1/mk/current//Linux/var/MonetDB/mTests_sql_test_mergetables" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 16:20:23 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_mergetables', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.590 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:30678/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-11019/.s.monetdb.30678
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.

# 16:20:23 >  
# 16:20:23 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-11019" "--port=30678"
# 16:20:23 >  

#CREATE TABLE part1 ( x double, y double, z double);
#COPY 4 RECORDS INTO part1 FROM stdin USING DELIMITERS ' ','\n';
#0.0 0.0 0.0
#1.0 0.0 0.0 
#0.0 1.0 0.0 
#1.0 1.0 0.0 
[ 4	]
#CREATE TABLE part2 ( x double, y double, z double);
#COPY 4 RECORDS INTO part2 FROM stdin USING DELIMITERS ' ','\n';
#2.0 0.0 0.0
#3.0 0.0 0.0 
#2.0 1.0 0.0 
#3.0 1.0 0.0 
[ 4	]
#CREATE MERGE TABLE complete ( x double, y double, z double);
#ALTER TABLE complete ADD TABLE part1;
#ALTER TABLE complete ADD TABLE part2;
#SELECT * FROM COMPLETE;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 0,	0,	0	]
[ 1,	0,	0	]
[ 0,	1,	0	]
[ 1,	1,	0	]
[ 2,	0,	0	]
[ 3,	0,	0	]
[ 2,	1,	0	]
[ 3,	1,	0	]
#SELECT * FROM complete where x>=0.0 AND x <=1.0;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 0,	0,	0	]
[ 1,	0,	0	]
[ 0,	1,	0	]
[ 1,	1,	0	]
#SELECT * FROM complete where x>=2.0 AND x <=3.0;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 2,	0,	0	]
[ 3,	0,	0	]
[ 2,	1,	0	]
[ 3,	1,	0	]
#SELECT * FROM complete where x>=1.0 AND x <=2.0;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 1,	0,	0	]
[ 1,	1,	0	]
[ 2,	0,	0	]
[ 2,	1,	0	]
#CREATE TABLE answ( LIKE complete);
#EXPLAIN INSERT INTO answ
#SELECT * FROM complete where x>=1.0 AND x <=2.0;
% .explain # table_name
% mal # name
% clob # type
% 129 # length
function user.s13_1(A0:dbl,A1:dbl):void;
    X_65:void := querylog.define("explain insert into answ\nselect * from complete where x>=1.0 and x <=2.0;","default_pipe",69);
barrier X_111 := language.dataflow();
    X_3 := sql.mvc();
    X_4:bat[:dbl] := bat.new(nil:dbl);
    X_9:bat[:dbl] := sql.bind(X_3,"sys","part1","x",0);
    C_6:bat[:oid] := sql.tid(X_3,"sys","part1");
    C_81 := algebra.subselect(X_9,C_6,A0,A1,true,true,false);
    (C_12,r1_12) := sql.bind(X_3,"sys","part1","x",2);
    C_82 := algebra.subselect(r1_12,nil:bat[:oid],A0,A1,true,true,false);
    X_15:bat[:dbl] := sql.bind(X_3,"sys","part1","x",1);
    C_84 := algebra.subselect(X_15,C_6,A0,A1,true,true,false);
    C_17 := sql.subdelta(C_81,C_6,C_12,C_82,C_84);
    X_20 := sql.projectdelta(C_17,X_9,C_12,r1_12,X_15);
    X_21 := bat.append(X_4,X_20,true);
    X_24:bat[:dbl] := sql.bind(X_3,"sys","part2","x",0);
    C_22:bat[:oid] := sql.tid(X_3,"sys","part2");
    C_85 := algebra.subselect(X_24,C_22,A0,A1,true,true,false);
    (C_25,r1_30) := sql.bind(X_3,"sys","part2","x",2);
    C_86 := algebra.subselect(r1_30,nil:bat[:oid],A0,A1,true,true,false);
    X_27:bat[:dbl] := sql.bind(X_3,"sys","part2","x",1);
    C_87 := algebra.subselect(X_27,C_22,A0,A1,true,true,false);
    C_28 := sql.subdelta(C_85,C_22,C_25,C_86,C_87);
    X_29 := sql.projectdelta(C_28,X_24,C_25,r1_30,X_27);
    X_30 := bat.append(X_21,X_29,true);
    language.pass(C_6);
    language.pass(X_9);
    language.pass(C_12);
    language.pass(r1_12);
    language.pass(X_15);
    language.pass(nil:bat[:oid]);
    language.pass(C_22);
    language.pass(X_24);
    language.pass(C_25);
    language.pass(r1_30);
    language.pass(X_27);
exit X_111;
    X_31 := sql.append(X_3,"sys","answ","x",X_30);
barrier X_114 := language.dataflow();
    X_33:bat[:dbl] := bat.new(nil:dbl);
    X_34:bat[:dbl] := sql.bind(X_31,"sys","part1","y",0);
    (C_36,r1_48) := sql.bind(X_31,"sys","part1","y",2);
    X_38:bat[:dbl] := sql.bind(X_31,"sys","part1","y",1);
    X_39 := sql.projectdelta(C_17,X_34,C_36,r1_48,X_38);
    X_40 := bat.append(X_33,X_39,true);
    X_41:bat[:dbl] := sql.bind(X_31,"sys","part2","y",0);
    (C_42,r1_56) := sql.bind(X_31,"sys","part2","y",2);
    X_44:bat[:dbl] := sql.bind(X_31,"sys","part2","y",1);
    X_45 := sql.projectdelta(C_28,X_41,C_42,r1_56,X_44);
    X_46 := bat.append(X_40,X_45,true);
exit X_114;
    X_47 := sql.append(X_31,"sys","answ","y",X_46);
barrier X_117 := language.dataflow();
    X_48:bat[:dbl] := bat.new(nil:dbl);
    X_49:bat[:dbl] := sql.bind(X_47,"sys","part1","z",0);
    (C_51,r1_69) := sql.bind(X_47,"sys","part1","z",2);
    X_53:bat[:dbl] := sql.bind(X_47,"sys","part1","z",1);
    X_54 := sql.projectdelta(C_17,X_49,C_51,r1_69,X_53);
    X_55 := bat.append(X_48,X_54,true);
    X_56:bat[:dbl] := sql.bind(X_47,"sys","part2","z",0);
    (C_57,r1_77) := sql.bind(X_47,"sys","part2","z",2);
    X_59:bat[:dbl] := sql.bind(X_47,"sys","part2","z",1);
    X_60 := sql.projectdelta(C_28,X_56,C_57,r1_77,X_59);
    X_61 := bat.append(X_55,X_60,true);
exit X_117;
    X_62 := sql.append(X_47,"sys","answ","z",X_61);
    X_63 := aggr.count(X_61);
    sql.affectedRows(X_62,X_63);
end user.s13_1;
#INSERT INTO answ
#SELECT * FROM complete where x>=1.0 AND x <=2.0;
[ 4	]
#EXPLAIN INSERT INTO answ
#SELECT * FROM complete
#WHERE x BETWEEN 0 AND 2 AND Y BETWEEN 0 AND 2;
% .explain # table_name
% mal # name
% clob # type
% 151 # length
function user.s14_1(A0:dbl,A1:dbl,A2:dbl,A3:dbl):void;
    X_69:void := querylog.define("explain insert into answ\nselect * from complete\nwhere x between 0 and 2 and y between 0 and 2;","default_pipe",79);
barrier X_123 := language.dataflow();
    X_5 := sql.mvc();
    X_6:bat[:dbl] := bat.new(nil:dbl);
    X_11:bat[:dbl] := sql.bind(X_5,"sys","part1","x",0);
    X_19:bat[:dbl] := sql.bind(X_5,"sys","part1","y",0);
    C_8:bat[:oid] := sql.tid(X_5,"sys","part1");
    C_85 := algebra.subselect(X_19,C_8,A2,A3,true,true,false);
    (C_21,r1_25) := sql.bind(X_5,"sys","part1","y",2);
    C_86 := algebra.subselect(r1_25,nil:bat[:oid],A2,A3,true,true,false);
    X_23:bat[:dbl] := sql.bind(X_5,"sys","part1","y",1);
    C_88 := algebra.subselect(X_23,C_8,A2,A3,true,true,false);
    C_24 := sql.subdelta(C_85,C_8,C_21,C_86,C_88);
    C_89 := algebra.subselect(X_11,C_24,A0,A1,true,true,false);
    (C_14,r1_14) := sql.bind(X_5,"sys","part1","x",2);
    C_90 := algebra.subselect(r1_14,nil:bat[:oid],A0,A1,true,true,false);
    X_17:bat[:dbl] := sql.bind(X_5,"sys","part1","x",1);
    C_91 := algebra.subselect(X_17,C_24,A0,A1,true,true,false);
    C_27 := sql.subdelta(C_89,C_24,C_14,C_90,C_91);
    X_28 := sql.projectdelta(C_27,X_11,C_14,r1_14,X_17);
    X_29 := bat.append(X_6,X_28,true);
    X_32:bat[:dbl] := sql.bind(X_5,"sys","part2","x",0);
    X_36:bat[:dbl] := sql.bind(X_5,"sys","part2","y",0);
    C_30:bat[:oid] := sql.tid(X_5,"sys","part2");
    C_92 := algebra.subselect(X_36,C_30,A2,A3,true,true,false);
    (C_37,r1_50) := sql.bind(X_5,"sys","part2","y",2);
    C_93 := algebra.subselect(r1_50,nil:bat[:oid],A2,A3,true,true,false);
    X_39:bat[:dbl] := sql.bind(X_5,"sys","part2","y",1);
    C_94 := algebra.subselect(X_39,C_30,A2,A3,true,true,false);
    C_40 := sql.subdelta(C_92,C_30,C_37,C_93,C_94);
    C_95 := algebra.subselect(X_32,C_40,A0,A1,true,true,false);
    (C_33,r1_42) := sql.bind(X_5,"sys","part2","x",2);
    C_96 := algebra.subselect(r1_42,nil:bat[:oid],A0,A1,true,true,false);
    X_35:bat[:dbl] := sql.bind(X_5,"sys","part2","x",1);
    C_97 := algebra.subselect(X_35,C_40,A0,A1,true,true,false);
    C_41 := sql.subdelta(C_95,C_40,C_33,C_96,C_97);
    X_42 := sql.projectdelta(C_41,X_32,C_33,r1_42,X_35);
    X_43 := bat.append(X_29,X_42,true);
    language.pass(C_8);
    language.pass(C_24);
    language.pass(X_11);
    language.pass(C_14);
    language.pass(r1_14);
    language.pass(X_17);
    language.pass(C_30);
    language.pass(nil:bat[:oid]);
    language.pass(C_40);
    language.pass(X_32);
    language.pass(C_33);
    language.pass(r1_42);
    language.pass(X_35);
exit X_123;
    X_44 := sql.append(X_5,"sys","answ","x",X_43);
barrier X_126 := language.dataflow();
    X_46:bat[:dbl] := bat.new(nil:dbl);
    X_47 := sql.projectdelta(C_27,X_19,C_21,r1_25,X_23);
    X_48 := bat.append(X_46,X_47,true);
    X_49 := sql.projectdelta(C_41,X_36,C_37,r1_50,X_39);
    X_50 := bat.append(X_48,X_49,true);
exit X_126;
    X_51 := sql.append(X_44,"sys","answ","y",X_50);
barrier X_129 := language.dataflow();
    X_52:bat[:dbl] := bat.new(nil:dbl);
    X_53:bat[:dbl] := sql.bind(X_51,"sys","part1","z",0);
    (C_55,r1_78) := sql.bind(X_51,"sys","part1","z",2);
    X_57:bat[:dbl] := sql.bind(X_51,"sys","part1","z",1);
    X_58 := sql.projectdelta(C_27,X_53,C_55,r1_78,X_57);
    X_59 := bat.append(X_52,X_58,true);
    X_60:bat[:dbl] := sql.bind(X_51,"sys","part2","z",0);
    (C_61,r1_86) := sql.bind(X_51,"sys","part2","z",2);
    X_63:bat[:dbl] := sql.bind(X_51,"sys","part2","z",1);
    X_64 := sql.projectdelta(C_41,X_60,C_61,r1_86,X_63);
    X_65 := bat.append(X_59,X_64,true);
exit X_129;
    X_66 := sql.append(X_51,"sys","answ","z",X_65);
    X_67 := aggr.count(X_65);
    sql.affectedRows(X_66,X_67);
end user.s14_1;
#INSERT INTO answ
#SELECT * FROM complete
#WHERE x BETWEEN 0 AND 2 AND Y BETWEEN 0 AND 2;
[ 6	]
#DROP TABLE complete;
#DROP TABLE part1;
#DROP TABLE part2;

# 16:20:24 >  
# 16:20:24 >  "Done."
# 16:20:24 >  

