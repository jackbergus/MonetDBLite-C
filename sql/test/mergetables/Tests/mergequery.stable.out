stdout of test 'mergequery` in directory 'sql/test/mergetables` itself:


# 16:20:23 >  
# 16:20:23 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=30678" "--set" "mapi_usock=/var/tmp/mtest-11019/.s.monetdb.30678" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/export/scratch1/mk/current//Linux/var/MonetDB/mTests_sql_test_mergetables" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 16:20:23 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_mergetables', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.590 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:30678/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-11019/.s.monetdb.30678
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.

# 16:20:23 >  
# 16:20:23 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-11019" "--port=30678"
# 16:20:23 >  

#CREATE TABLE part1 ( x double, y double, z double);
#COPY 4 RECORDS INTO part1 FROM stdin USING DELIMITERS ' ','\n';
#0.0 0.0 0.0
#1.0 0.0 0.0 
#0.0 1.0 0.0 
#1.0 1.0 0.0 
[ 4	]
#CREATE TABLE part2 ( x double, y double, z double);
#COPY 4 RECORDS INTO part2 FROM stdin USING DELIMITERS ' ','\n';
#2.0 0.0 0.0
#3.0 0.0 0.0 
#2.0 1.0 0.0 
#3.0 1.0 0.0 
[ 4	]
#CREATE MERGE TABLE complete ( x double, y double, z double);
#ALTER TABLE complete ADD TABLE part1;
#ALTER TABLE complete ADD TABLE part2;
#SELECT * FROM COMPLETE;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 0,	0,	0	]
[ 1,	0,	0	]
[ 0,	1,	0	]
[ 1,	1,	0	]
[ 2,	0,	0	]
[ 3,	0,	0	]
[ 2,	1,	0	]
[ 3,	1,	0	]
#SELECT * FROM complete where x>=0.0 AND x <=1.0;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 0,	0,	0	]
[ 1,	0,	0	]
[ 0,	1,	0	]
[ 1,	1,	0	]
#SELECT * FROM complete where x>=2.0 AND x <=3.0;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 2,	0,	0	]
[ 3,	0,	0	]
[ 2,	1,	0	]
[ 3,	1,	0	]
#SELECT * FROM complete where x>=1.0 AND x <=2.0;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 1,	0,	0	]
[ 1,	1,	0	]
[ 2,	0,	0	]
[ 2,	1,	0	]
#CREATE TABLE answ( LIKE complete);
#EXPLAIN INSERT INTO answ
#SELECT * FROM complete where x>=1.0 AND x <=2.0;
% .explain # table_name
% mal # name
% clob # type
% 134 # length
function user.s26_1():void;
    X_3:void := querylog.define("explain insert into answ\nselect * from complete where x>=1.0 and x <=2.0;", "default_pipe", 64:int);
barrier X_157 := language.dataflow();
    X_71:bat[:dbl] := bat.new(nil:dbl);
    X_6 := sql.mvc();
    X_10:bat[:dbl] := sql.bind(X_6, "sys", "part1", "x", 0:int);
    C_7:bat[:oid] := sql.tid(X_6, "sys", "part1");
    C_36 := algebra.select(X_10, C_7, 1:dbl, 2:dbl, true, true, false);
    X_40 := algebra.projection(C_36, X_10);
    X_46:bat[:dbl] := sql.bind(X_6, "sys", "part2", "x", 0:int);
    C_44:bat[:oid] := sql.tid(X_6, "sys", "part2");
    C_66 := algebra.select(X_46, C_44, 1:dbl, 2:dbl, true, true, false);
    X_58:bat[:dbl] := sql.bind(X_6, "sys", "part2", "z", 0:int);
    X_69 := algebra.projection(C_66, X_58);
    X_52:bat[:dbl] := sql.bind(X_6, "sys", "part2", "y", 0:int);
    X_68 := algebra.projection(C_66, X_52);
    X_67 := algebra.projection(C_66, X_46);
    X_27:bat[:dbl] := sql.bind(X_6, "sys", "part1", "z", 0:int);
    X_42 := algebra.projection(C_36, X_27);
    X_20:bat[:dbl] := sql.bind(X_6, "sys", "part1", "y", 0:int);
    X_41 := algebra.projection(C_36, X_20);
    language.pass(X_10);
    language.pass(C_66);
    language.pass(X_46);
    language.pass(C_36);
exit X_157;
    X_73 := bat.append(X_71, X_40, true);
    X_75 := bat.append(X_73, X_67, true);
    X_76:bat[:dbl] := bat.new(nil:dbl);
    X_77 := bat.append(X_76, X_41, true);
    X_78 := bat.append(X_77, X_68, true);
    X_79:bat[:dbl] := bat.new(nil:dbl);
    X_80 := bat.append(X_79, X_42, true);
    X_81 := bat.append(X_80, X_69, true);
    X_83 := sql.append(X_6, "sys", "answ", "x", X_75);
    X_87 := sql.append(X_83, "sys", "answ", "y", X_78);
    X_90 := sql.append(X_87, "sys", "answ", "z", X_81);
    X_92 := aggr.count(X_81);
    sql.affectedRows(X_90, X_92);
end user.s26_1;
#inline               actions= 0 time=2 usec 
#candidates           actions= 1 time=31 usec 
#remap                actions= 0 time=4 usec 
#costModel            actions= 1 time=28 usec 
#coercions            actions= 0 time=3 usec 
#evaluate             actions= 4 time=45 usec 
#emptybind            actions= 0 time=4 usec 
#pushselect           actions= 8 time=41 usec 
#aliases              actions=16 time=30 usec 
#mitosis              actions= 0 time=5 usec 
#mergetable           actions= 0 time=34 usec 
#deadcode             actions=12 time=24 usec 
#aliases              actions= 0 time=6 usec 
#constants            actions= 9 time=22 usec 
#commonTerms          actions= 0 time=7 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 0 time=6 usec 
#reorder              actions= 1 time=37 usec 
#reduce               actions=74 time=39 usec 
#matpack              actions= 0 time=5 usec 
#dataflow             actions=31 time=36 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=3 usec 
#generator            actions= 0 time=1 usec 
#profiler             actions= 1 time=20 usec 
#garbageCollector     actions= 1 time=27 usec 
#total                actions= 1 time=526 usec 
#INSERT INTO answ
#SELECT * FROM complete where x>=1.0 AND x <=2.0;
[ 4	]
#EXPLAIN INSERT INTO answ
#SELECT * FROM complete
#WHERE x BETWEEN 0 AND 2 AND Y BETWEEN 0 AND 2;
% .explain # table_name
% mal # name
% clob # type
% 156 # length
function user.s28_1():void;
    X_5:void := querylog.define("explain insert into answ\nselect * from complete\nwhere x between 0 and 2 and y between 0 and 2;", "default_pipe", 70:int);
barrier X_169 := language.dataflow();
    X_82:bat[:dbl] := bat.new(nil:dbl);
    X_8 := sql.mvc();
    X_12:bat[:dbl] := sql.bind(X_8, "sys", "part1", "x", 0:int);
    X_22:bat[:dbl] := sql.bind(X_8, "sys", "part1", "y", 0:int);
    C_9:bat[:oid] := sql.tid(X_8, "sys", "part1");
    C_38 := algebra.select(X_22, C_9, 0:dbl, 2:dbl, true, true, false);
    C_44 := algebra.select(X_12, C_38, 0:dbl, 2:dbl, true, true, false);
    X_45 := algebra.projection(C_44, X_12);
    X_51:bat[:dbl] := sql.bind(X_8, "sys", "part2", "x", 0:int);
    X_57:bat[:dbl] := sql.bind(X_8, "sys", "part2", "y", 0:int);
    C_49:bat[:oid] := sql.tid(X_8, "sys", "part2");
    C_71 := algebra.select(X_57, C_49, 0:dbl, 2:dbl, true, true, false);
    C_74 := algebra.select(X_51, C_71, 0:dbl, 2:dbl, true, true, false);
    X_63:bat[:dbl] := sql.bind(X_8, "sys", "part2", "z", 0:int);
    X_80 := algebra.projection(C_74, X_63);
    X_79 := algebra.projection(C_74, X_57);
    X_78 := algebra.projection(C_74, X_51);
    X_29:bat[:dbl] := sql.bind(X_8, "sys", "part1", "z", 0:int);
    X_47 := algebra.projection(C_44, X_29);
    X_46 := algebra.projection(C_44, X_22);
    language.pass(X_12);
    language.pass(X_57);
    language.pass(C_74);
    language.pass(X_51);
    language.pass(C_44);
    language.pass(X_22);
exit X_169;
    X_84 := bat.append(X_82, X_45, true);
    X_85 := bat.append(X_84, X_78, true);
    X_86:bat[:dbl] := bat.new(nil:dbl);
    X_87 := bat.append(X_86, X_46, true);
    X_88 := bat.append(X_87, X_79, true);
    X_89:bat[:dbl] := bat.new(nil:dbl);
    X_90 := bat.append(X_89, X_47, true);
    X_91 := bat.append(X_90, X_80, true);
    X_93 := sql.append(X_8, "sys", "answ", "x", X_85);
    X_97 := sql.append(X_93, "sys", "answ", "y", X_88);
    X_100 := sql.append(X_97, "sys", "answ", "z", X_91);
    X_102 := aggr.count(X_91);
    sql.affectedRows(X_100, X_102);
end user.s28_1;
#inline               actions= 0 time=3 usec 
#candidates           actions= 1 time=32 usec 
#remap                actions= 0 time=4 usec 
#costModel            actions= 1 time=29 usec 
#coercions            actions= 0 time=2 usec 
#evaluate             actions= 8 time=50 usec 
#emptybind            actions= 0 time=4 usec 
#pushselect           actions= 8 time=37 usec 
#aliases              actions=20 time=36 usec 
#mitosis              actions= 0 time=4 usec 
#mergetable           actions= 0 time=52 usec 
#deadcode             actions=12 time=25 usec 
#aliases              actions= 0 time=7 usec 
#constants            actions=12 time=23 usec 
#commonTerms          actions= 0 time=8 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 0 time=7 usec 
#reorder              actions= 1 time=38 usec 
#reduce               actions=81 time=44 usec 
#matpack              actions= 0 time=5 usec 
#dataflow             actions=31 time=38 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=3 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=21 usec 
#garbageCollector     actions= 1 time=29 usec 
#total                actions= 1 time=573 usec 
#INSERT INTO answ
#SELECT * FROM complete
#WHERE x BETWEEN 0 AND 2 AND Y BETWEEN 0 AND 2;
[ 6	]
#DROP TABLE complete;
#DROP TABLE part1;
#DROP TABLE part2;

# 16:20:24 >  
# 16:20:24 >  "Done."
# 16:20:24 >  

