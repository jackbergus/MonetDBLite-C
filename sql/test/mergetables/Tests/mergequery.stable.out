stdout of test 'mergequery` in directory 'sql/test/mergetables` itself:


# 16:20:23 >  
# 16:20:23 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=30678" "--set" "mapi_usock=/var/tmp/mtest-11019/.s.monetdb.30678" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/export/scratch1/mk/current//Linux/var/MonetDB/mTests_sql_test_mergetables" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 16:20:23 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_mergetables', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.590 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:30678/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-11019/.s.monetdb.30678
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.

# 16:20:23 >  
# 16:20:23 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-11019" "--port=30678"
# 16:20:23 >  

#CREATE TABLE part1 ( x double, y double, z double);
#COPY 4 RECORDS INTO part1 FROM stdin USING DELIMITERS ' ','\n';
#0.0 0.0 0.0
#1.0 0.0 0.0 
#0.0 1.0 0.0 
#1.0 1.0 0.0 
[ 4	]
#CREATE TABLE part2 ( x double, y double, z double);
#COPY 4 RECORDS INTO part2 FROM stdin USING DELIMITERS ' ','\n';
#2.0 0.0 0.0
#3.0 0.0 0.0 
#2.0 1.0 0.0 
#3.0 1.0 0.0 
[ 4	]
#CREATE MERGE TABLE complete ( x double, y double, z double);
#ALTER TABLE complete ADD TABLE part1;
#ALTER TABLE complete ADD TABLE part2;
#SELECT * FROM COMPLETE;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 0,	0,	0	]
[ 1,	0,	0	]
[ 0,	1,	0	]
[ 1,	1,	0	]
[ 2,	0,	0	]
[ 3,	0,	0	]
[ 2,	1,	0	]
[ 3,	1,	0	]
#SELECT * FROM complete where x>=0.0 AND x <=1.0;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 0,	0,	0	]
[ 1,	0,	0	]
[ 0,	1,	0	]
[ 1,	1,	0	]
#SELECT * FROM complete where x>=2.0 AND x <=3.0;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 2,	0,	0	]
[ 3,	0,	0	]
[ 2,	1,	0	]
[ 3,	1,	0	]
#SELECT * FROM complete where x>=1.0 AND x <=2.0;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 1,	0,	0	]
[ 1,	1,	0	]
[ 2,	0,	0	]
[ 2,	1,	0	]
#CREATE TABLE answ( LIKE complete);
#EXPLAIN INSERT INTO answ
#SELECT * FROM complete where x>=1.0 AND x <=2.0;
% .explain # table_name
% mal # name
% clob # type
% 129 # length
function user.s26_1():void;
    X_66:void := querylog.define("explain insert into answ\nselect * from complete where x>=1.0 and x <=2.0;","default_pipe",69);
barrier X_113 := language.dataflow();
    X_3 := sql.mvc();
    X_4:bat[:dbl] := bat.new(nil:oid,nil:dbl);
    X_10:bat[:dbl] := sql.bind(X_3,"sys","part1","x",0);
    C_7:bat[:oid] := sql.tid(X_3,"sys","part1");
    C_83 := algebra.subselect(X_10,C_7,1,2,true,true,false);
    (C_13,r1_13) := sql.bind(X_3,"sys","part1","x",2);
    C_84 := algebra.subselect(r1_13,nil:bat[:oid],1,2,true,true,false);
    X_16:bat[:dbl] := sql.bind(X_3,"sys","part1","x",1);
    C_86 := algebra.subselect(X_16,C_7,1,2,true,true,false);
    C_18 := sql.subdelta(C_83,C_7,C_13,C_84,C_86);
    X_21 := sql.projectdelta(C_18,X_10,C_13,r1_13,X_16);
    X_22 := bat.append(X_4,X_21,true);
    X_25:bat[:dbl] := sql.bind(X_3,"sys","part2","x",0);
    C_23:bat[:oid] := sql.tid(X_3,"sys","part2");
    C_87 := algebra.subselect(X_25,C_23,1,2,true,true,false);
    (C_26,r1_31) := sql.bind(X_3,"sys","part2","x",2);
    C_88 := algebra.subselect(r1_31,nil:bat[:oid],1,2,true,true,false);
    X_28:bat[:dbl] := sql.bind(X_3,"sys","part2","x",1);
    C_89 := algebra.subselect(X_28,C_23,1,2,true,true,false);
    C_29 := sql.subdelta(C_87,C_23,C_26,C_88,C_89);
    X_30 := sql.projectdelta(C_29,X_25,C_26,r1_31,X_28);
    X_31 := bat.append(X_22,X_30,true);
    language.pass(C_7);
    language.pass(X_10);
    language.pass(C_13);
    language.pass(r1_13);
    language.pass(X_16);
    language.pass(nil:bat[:oid]);
    language.pass(C_23);
    language.pass(X_25);
    language.pass(C_26);
    language.pass(r1_31);
    language.pass(X_28);
exit X_113;
    X_32 := sql.append(X_3,"sys","answ","x",X_31);
barrier X_116 := language.dataflow();
    X_34:bat[:dbl] := bat.new(nil:oid,nil:dbl);
    X_35:bat[:dbl] := sql.bind(X_32,"sys","part1","y",0);
    (C_37,r1_50) := sql.bind(X_32,"sys","part1","y",2);
    X_39:bat[:dbl] := sql.bind(X_32,"sys","part1","y",1);
    X_40 := sql.projectdelta(C_18,X_35,C_37,r1_50,X_39);
    X_41 := bat.append(X_34,X_40,true);
    X_42:bat[:dbl] := sql.bind(X_32,"sys","part2","y",0);
    (C_43,r1_59) := sql.bind(X_32,"sys","part2","y",2);
    X_45:bat[:dbl] := sql.bind(X_32,"sys","part2","y",1);
    X_46 := sql.projectdelta(C_29,X_42,C_43,r1_59,X_45);
    X_47 := bat.append(X_41,X_46,true);
exit X_116;
    X_48 := sql.append(X_32,"sys","answ","y",X_47);
barrier X_119 := language.dataflow();
    X_49:bat[:dbl] := bat.new(nil:oid,nil:dbl);
    X_50:bat[:dbl] := sql.bind(X_48,"sys","part1","z",0);
    (C_52,r1_71) := sql.bind(X_48,"sys","part1","z",2);
    X_54:bat[:dbl] := sql.bind(X_48,"sys","part1","z",1);
    X_55 := sql.projectdelta(C_18,X_50,C_52,r1_71,X_54);
    X_56 := bat.append(X_49,X_55,true);
    X_57:bat[:dbl] := sql.bind(X_48,"sys","part2","z",0);
    (C_58,r1_79) := sql.bind(X_48,"sys","part2","z",2);
    X_60:bat[:dbl] := sql.bind(X_48,"sys","part2","z",1);
    X_61 := sql.projectdelta(C_29,X_57,C_58,r1_79,X_60);
    X_62 := bat.append(X_56,X_61,true);
exit X_119;
    X_63 := sql.append(X_48,"sys","answ","z",X_62);
    X_64 := aggr.count(X_62);
    sql.affectedRows(X_63,X_64);
end user.s26_1;
#inline               actions= 0 time=2 usec 
#candidates           actions= 1 time=31 usec 
#remap                actions= 0 time=4 usec 
#costModel            actions= 1 time=28 usec 
#coercions            actions= 0 time=3 usec 
#evaluate             actions= 4 time=45 usec 
#emptybind            actions= 0 time=4 usec 
#pushselect           actions= 8 time=41 usec 
#aliases              actions=16 time=30 usec 
#mitosis              actions= 0 time=5 usec 
#mergetable           actions= 0 time=34 usec 
#deadcode             actions=12 time=24 usec 
#aliases              actions= 0 time=6 usec 
#constants            actions= 9 time=22 usec 
#commonTerms          actions= 0 time=7 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 0 time=6 usec 
#reorder              actions= 1 time=37 usec 
#reduce               actions=74 time=39 usec 
#matpack              actions= 0 time=5 usec 
#dataflow             actions=31 time=36 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=3 usec 
#generator            actions= 0 time=1 usec 
#profiler             actions= 1 time=20 usec 
#garbageCollector     actions= 1 time=27 usec 
#total                actions= 1 time=526 usec 
#INSERT INTO answ
#SELECT * FROM complete where x>=1.0 AND x <=2.0;
[ 4	]
#EXPLAIN INSERT INTO answ
#SELECT * FROM complete
#WHERE x BETWEEN 0 AND 2 AND Y BETWEEN 0 AND 2;
% .explain # table_name
% mal # name
% clob # type
% 151 # length
function user.s28_1():void;
    X_68:void := querylog.define("explain insert into answ\nselect * from complete\nwhere x between 0 and 2 and y between 0 and 2;","default_pipe",79);
barrier X_123 := language.dataflow();
    X_3 := sql.mvc();
    X_4:bat[:dbl] := bat.new(nil:oid,nil:dbl);
    X_10:bat[:dbl] := sql.bind(X_3,"sys","part1","x",0);
    X_18:bat[:dbl] := sql.bind(X_3,"sys","part1","y",0);
    C_7:bat[:oid] := sql.tid(X_3,"sys","part1");
    C_85 := algebra.subselect(X_18,C_7,0,2,true,true,false);
    (C_20,r1_26) := sql.bind(X_3,"sys","part1","y",2);
    C_86 := algebra.subselect(r1_26,nil:bat[:oid],0,2,true,true,false);
    X_22:bat[:dbl] := sql.bind(X_3,"sys","part1","y",1);
    C_88 := algebra.subselect(X_22,C_7,0,2,true,true,false);
    C_23 := sql.subdelta(C_85,C_7,C_20,C_86,C_88);
    C_89 := algebra.subselect(X_10,C_23,0,2,true,true,false);
    (C_13,r1_15) := sql.bind(X_3,"sys","part1","x",2);
    C_90 := algebra.subselect(r1_15,nil:bat[:oid],0,2,true,true,false);
    X_16:bat[:dbl] := sql.bind(X_3,"sys","part1","x",1);
    C_91 := algebra.subselect(X_16,C_23,0,2,true,true,false);
    C_26 := sql.subdelta(C_89,C_23,C_13,C_90,C_91);
    X_27 := sql.projectdelta(C_26,X_10,C_13,r1_15,X_16);
    X_28 := bat.append(X_4,X_27,true);
    X_31:bat[:dbl] := sql.bind(X_3,"sys","part2","x",0);
    X_35:bat[:dbl] := sql.bind(X_3,"sys","part2","y",0);
    C_29:bat[:oid] := sql.tid(X_3,"sys","part2");
    C_92 := algebra.subselect(X_35,C_29,0,2,true,true,false);
    (C_36,r1_51) := sql.bind(X_3,"sys","part2","y",2);
    C_93 := algebra.subselect(r1_51,nil:bat[:oid],0,2,true,true,false);
    X_38:bat[:dbl] := sql.bind(X_3,"sys","part2","y",1);
    C_94 := algebra.subselect(X_38,C_29,0,2,true,true,false);
    C_39 := sql.subdelta(C_92,C_29,C_36,C_93,C_94);
    C_95 := algebra.subselect(X_31,C_39,0,2,true,true,false);
    (C_32,r1_43) := sql.bind(X_3,"sys","part2","x",2);
    C_96 := algebra.subselect(r1_43,nil:bat[:oid],0,2,true,true,false);
    X_34:bat[:dbl] := sql.bind(X_3,"sys","part2","x",1);
    C_97 := algebra.subselect(X_34,C_39,0,2,true,true,false);
    C_40 := sql.subdelta(C_95,C_39,C_32,C_96,C_97);
    X_41 := sql.projectdelta(C_40,X_31,C_32,r1_43,X_34);
    X_42 := bat.append(X_28,X_41,true);
    language.pass(C_7);
    language.pass(C_23);
    language.pass(X_10);
    language.pass(C_13);
    language.pass(r1_15);
    language.pass(X_16);
    language.pass(C_29);
    language.pass(nil:bat[:oid]);
    language.pass(C_39);
    language.pass(X_31);
    language.pass(C_32);
    language.pass(r1_43);
    language.pass(X_34);
exit X_123;
    X_43 := sql.append(X_3,"sys","answ","x",X_42);
barrier X_126 := language.dataflow();
    X_45:bat[:dbl] := bat.new(nil:oid,nil:dbl);
    X_46 := sql.projectdelta(C_26,X_18,C_20,r1_26,X_22);
    X_47 := bat.append(X_45,X_46,true);
    X_48 := sql.projectdelta(C_40,X_35,C_36,r1_51,X_38);
    X_49 := bat.append(X_47,X_48,true);
exit X_126;
    X_50 := sql.append(X_43,"sys","answ","y",X_49);
barrier X_129 := language.dataflow();
    X_51:bat[:dbl] := bat.new(nil:oid,nil:dbl);
    X_52:bat[:dbl] := sql.bind(X_50,"sys","part1","z",0);
    (C_54,r1_80) := sql.bind(X_50,"sys","part1","z",2);
    X_56:bat[:dbl] := sql.bind(X_50,"sys","part1","z",1);
    X_57 := sql.projectdelta(C_26,X_52,C_54,r1_80,X_56);
    X_58 := bat.append(X_51,X_57,true);
    X_59:bat[:dbl] := sql.bind(X_50,"sys","part2","z",0);
    (C_60,r1_88) := sql.bind(X_50,"sys","part2","z",2);
    X_62:bat[:dbl] := sql.bind(X_50,"sys","part2","z",1);
    X_63 := sql.projectdelta(C_40,X_59,C_60,r1_88,X_62);
    X_64 := bat.append(X_58,X_63,true);
exit X_129;
    X_65 := sql.append(X_50,"sys","answ","z",X_64);
    X_66 := aggr.count(X_64);
    sql.affectedRows(X_65,X_66);
end user.s28_1;
#inline               actions= 0 time=3 usec 
#candidates           actions= 1 time=32 usec 
#remap                actions= 0 time=4 usec 
#costModel            actions= 1 time=29 usec 
#coercions            actions= 0 time=2 usec 
#evaluate             actions= 8 time=50 usec 
#emptybind            actions= 0 time=4 usec 
#pushselect           actions= 8 time=37 usec 
#aliases              actions=20 time=36 usec 
#mitosis              actions= 0 time=4 usec 
#mergetable           actions= 0 time=52 usec 
#deadcode             actions=12 time=25 usec 
#aliases              actions= 0 time=7 usec 
#constants            actions=12 time=23 usec 
#commonTerms          actions= 0 time=8 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 0 time=7 usec 
#reorder              actions= 1 time=38 usec 
#reduce               actions=81 time=44 usec 
#matpack              actions= 0 time=5 usec 
#dataflow             actions=31 time=38 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=3 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=21 usec 
#garbageCollector     actions= 1 time=29 usec 
#total                actions= 1 time=573 usec 
#INSERT INTO answ
#SELECT * FROM complete
#WHERE x BETWEEN 0 AND 2 AND Y BETWEEN 0 AND 2;
[ 6	]
#DROP TABLE complete;
#DROP TABLE part1;
#DROP TABLE part2;

# 16:20:24 >  
# 16:20:24 >  "Done."
# 16:20:24 >  

