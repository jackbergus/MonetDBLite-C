stdout of test 'mergequery` in directory 'sql/test/mergetables` itself:


# 16:20:23 >  
# 16:20:23 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=30678" "--set" "mapi_usock=/var/tmp/mtest-11019/.s.monetdb.30678" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/export/scratch1/mk/current//Linux/var/MonetDB/mTests_sql_test_mergetables" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 16:20:23 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_mergetables', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.590 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:30678/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-11019/.s.monetdb.30678
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.

# 16:20:23 >  
# 16:20:23 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-11019" "--port=30678"
# 16:20:23 >  

#CREATE TABLE part1 ( x double, y double, z double);
#COPY 4 RECORDS INTO part1 FROM stdin USING DELIMITERS ' ','\n';
#0.0 0.0 0.0
#1.0 0.0 0.0 
#0.0 1.0 0.0 
#1.0 1.0 0.0 
[ 4	]
#CREATE TABLE part2 ( x double, y double, z double);
#COPY 4 RECORDS INTO part2 FROM stdin USING DELIMITERS ' ','\n';
#2.0 0.0 0.0
#3.0 0.0 0.0 
#2.0 1.0 0.0 
#3.0 1.0 0.0 
[ 4	]
#CREATE MERGE TABLE complete ( x double, y double, z double);
#ALTER TABLE complete ADD TABLE part1;
#ALTER TABLE complete ADD TABLE part2;
#SELECT * FROM COMPLETE;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 0,	0,	0	]
[ 1,	0,	0	]
[ 0,	1,	0	]
[ 1,	1,	0	]
[ 2,	0,	0	]
[ 3,	0,	0	]
[ 2,	1,	0	]
[ 3,	1,	0	]
#SELECT * FROM complete where x>=0.0 AND x <=1.0;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 0,	0,	0	]
[ 1,	0,	0	]
[ 0,	1,	0	]
[ 1,	1,	0	]
#SELECT * FROM complete where x>=2.0 AND x <=3.0;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 2,	0,	0	]
[ 3,	0,	0	]
[ 2,	1,	0	]
[ 3,	1,	0	]
#SELECT * FROM complete where x>=1.0 AND x <=2.0;
% .complete,	.complete,	.complete # table_name
% x,	y,	z # name
% double,	double,	double # type
% 24,	24,	24 # length
[ 1,	0,	0	]
[ 1,	1,	0	]
[ 2,	0,	0	]
[ 2,	1,	0	]
#CREATE TABLE answ( LIKE complete);
#EXPLAIN INSERT INTO answ
#SELECT * FROM complete where x>=1.0 AND x <=2.0;
% .explain # table_name
% mal # name
% clob # type
% 132 # length
function user.s26_1():void;
    X_0:void := querylog.define("explain insert into answ\nselect * from complete where x>=1.0 and x <=2.0;","default_pipe",18:int);
barrier X_127 := language.dataflow();
    X_3 := sql.mvc();
    X_4:bat[:dbl] := bat.new(nil:dbl);
    X_9:bat[:dbl] := sql.bind(X_3,"sys","part1","x",0:int);
    C_6:bat[:oid] := sql.tid(X_3,"sys","part1");
    C_21 := algebra.subselect(X_9,C_6,1:dbl,2:dbl,true,true,false);
    X_25 := algebra.projection(C_21,X_9);
    X_26 := bat.append(X_4,X_25,true);
    X_29:bat[:dbl] := sql.bind(X_3,"sys","part2","x",0:int);
    C_27:bat[:oid] := sql.tid(X_3,"sys","part2");
    C_37 := algebra.subselect(X_29,C_27,1:dbl,2:dbl,true,true,false);
    X_38 := algebra.projection(C_37,X_29);
    X_39 := bat.append(X_26,X_38,true);
    language.pass(X_9);
    language.pass(X_29);
exit X_127;
    X_41 := sql.append(X_3,"sys","answ","x",X_39);
barrier X_130 := language.dataflow();
    X_44:bat[:dbl] := bat.new(nil:dbl);
    X_46:bat[:dbl] := sql.bind(X_41,"sys","part1","y",0:int);
    X_53 := algebra.projection(C_21,X_46);
    X_54 := bat.append(X_44,X_53,true);
    X_55:bat[:dbl] := sql.bind(X_41,"sys","part2","y",0:int);
    X_61 := algebra.projection(C_37,X_55);
    X_62 := bat.append(X_54,X_61,true);
exit X_130;
    X_65 := sql.append(X_41,"sys","answ","y",X_62);
barrier X_133 := language.dataflow();
    X_66:bat[:dbl] := bat.new(nil:dbl);
    X_67:bat[:dbl] := sql.bind(X_65,"sys","part1","z",0:int);
    X_74 := algebra.projection(C_21,X_67);
    X_75 := bat.append(X_66,X_74,true);
    X_76:bat[:dbl] := sql.bind(X_65,"sys","part2","z",0:int);
    X_82 := algebra.projection(C_37,X_76);
    X_83 := bat.append(X_75,X_82,true);
exit X_133;
    X_85 := sql.append(X_65,"sys","answ","z",X_83);
    X_87 := aggr.count(X_83);
    sql.affectedRows(X_85,X_87);
end user.s26_1;
#inline               actions= 0 time=2 usec 
#candidates           actions= 1 time=31 usec 
#remap                actions= 0 time=4 usec 
#costModel            actions= 1 time=28 usec 
#coercions            actions= 0 time=3 usec 
#evaluate             actions= 4 time=45 usec 
#emptybind            actions= 0 time=4 usec 
#pushselect           actions= 8 time=41 usec 
#aliases              actions=16 time=30 usec 
#mitosis              actions= 0 time=5 usec 
#mergetable           actions= 0 time=34 usec 
#deadcode             actions=12 time=24 usec 
#aliases              actions= 0 time=6 usec 
#constants            actions= 9 time=22 usec 
#commonTerms          actions= 0 time=7 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 0 time=6 usec 
#reorder              actions= 1 time=37 usec 
#reduce               actions=74 time=39 usec 
#matpack              actions= 0 time=5 usec 
#dataflow             actions=31 time=36 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=3 usec 
#generator            actions= 0 time=1 usec 
#profiler             actions= 1 time=20 usec 
#garbageCollector     actions= 1 time=27 usec 
#total                actions= 1 time=526 usec 
#INSERT INTO answ
#SELECT * FROM complete where x>=1.0 AND x <=2.0;
[ 4	]
#EXPLAIN INSERT INTO answ
#SELECT * FROM complete
#WHERE x BETWEEN 0 AND 2 AND Y BETWEEN 0 AND 2;
% .explain # table_name
% mal # name
% clob # type
% 154 # length
function user.s28_1():void;
    X_0:void := querylog.define("explain insert into answ\nselect * from complete\nwhere x between 0 and 2 and y between 0 and 2;","default_pipe",22:int);
barrier X_133 := language.dataflow();
    X_3 := sql.mvc();
    X_4:bat[:dbl] := bat.new(nil:dbl);
    X_9:bat[:dbl] := sql.bind(X_3,"sys","part1","x",0:int);
    X_21:bat[:dbl] := sql.bind(X_3,"sys","part1","y",0:int);
    C_6:bat[:oid] := sql.tid(X_3,"sys","part1");
    C_30 := algebra.subselect(X_21,C_6,0:dbl,2:dbl,true,true,false);
    C_34 := algebra.subselect(X_9,C_30,0:dbl,2:dbl,true,true,false);
    X_35 := algebra.projection(C_34,X_9);
    X_36 := bat.append(X_4,X_35,true);
    X_39:bat[:dbl] := sql.bind(X_3,"sys","part2","x",0:int);
    X_47:bat[:dbl] := sql.bind(X_3,"sys","part2","y",0:int);
    C_37:bat[:oid] := sql.tid(X_3,"sys","part2");
    C_55 := algebra.subselect(X_47,C_37,0:dbl,2:dbl,true,true,false);
    C_56 := algebra.subselect(X_39,C_55,0:dbl,2:dbl,true,true,false);
    X_57 := algebra.projection(C_56,X_39);
    X_58 := bat.append(X_36,X_57,true);
    language.pass(X_9);
    language.pass(X_39);
exit X_133;
    X_60 := sql.append(X_3,"sys","answ","x",X_58);
barrier X_136 := language.dataflow();
    X_63:bat[:dbl] := bat.new(nil:dbl);
    X_65 := algebra.projection(C_34,X_21);
    X_66 := bat.append(X_63,X_65,true);
    X_68 := algebra.projection(C_56,X_47);
    X_69 := bat.append(X_66,X_68,true);
exit X_136;
    X_71 := sql.append(X_60,"sys","answ","y",X_69);
barrier X_139 := language.dataflow();
    X_73:bat[:dbl] := bat.new(nil:dbl);
    X_74:bat[:dbl] := sql.bind(X_71,"sys","part1","z",0:int);
    X_81 := algebra.projection(C_34,X_74);
    X_82 := bat.append(X_73,X_81,true);
    X_83:bat[:dbl] := sql.bind(X_71,"sys","part2","z",0:int);
    X_89 := algebra.projection(C_56,X_83);
    X_90 := bat.append(X_82,X_89,true);
exit X_139;
    X_92 := sql.append(X_71,"sys","answ","z",X_90);
    X_93 := aggr.count(X_90);
    sql.affectedRows(X_92,X_93);
end user.s28_1;
#inline               actions= 0 time=3 usec 
#candidates           actions= 1 time=32 usec 
#remap                actions= 0 time=4 usec 
#costModel            actions= 1 time=29 usec 
#coercions            actions= 0 time=2 usec 
#evaluate             actions= 8 time=50 usec 
#emptybind            actions= 0 time=4 usec 
#pushselect           actions= 8 time=37 usec 
#aliases              actions=20 time=36 usec 
#mitosis              actions= 0 time=4 usec 
#mergetable           actions= 0 time=52 usec 
#deadcode             actions=12 time=25 usec 
#aliases              actions= 0 time=7 usec 
#constants            actions=12 time=23 usec 
#commonTerms          actions= 0 time=8 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 0 time=7 usec 
#reorder              actions= 1 time=38 usec 
#reduce               actions=81 time=44 usec 
#matpack              actions= 0 time=5 usec 
#dataflow             actions=31 time=38 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=3 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=21 usec 
#garbageCollector     actions= 1 time=29 usec 
#total                actions= 1 time=573 usec 
#INSERT INTO answ
#SELECT * FROM complete
#WHERE x BETWEEN 0 AND 2 AND Y BETWEEN 0 AND 2;
[ 6	]
#DROP TABLE complete;
#DROP TABLE part1;
#DROP TABLE part2;

# 16:20:24 >  
# 16:20:24 >  "Done."
# 16:20:24 >  

