stdout of test 'useless_casts.Bug-3756` in directory 'sql/test/BugTracker-2015` itself:


# 21:57:13 >  
# 21:57:13 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=33119" "--set" "mapi_usock=/var/tmp/mtest-22263/.s.monetdb.33119" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/rc-monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_BugTracker-2015" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 21:57:13 >  

# MonetDB 5 server v11.21.0
# This is an unreleased version
# Serving database 'mTests_sql_test_BugTracker-2015', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.333 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.nes.nl:33119/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-22263/.s.monetdb.33119
# MonetDB/GIS module loaded
# Start processing logs sql/sql_logs version 52200
# Start reading the write-ahead log 'sql_logs/sql/log.34'
# Finished reading the write-ahead log 'sql_logs/sql/log.34'
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.

# 21:57:14 >  
# 21:57:14 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-22263" "--port=33119"
# 21:57:14 >  

#create table test(value int);
#insert into test values (1), (2), (3);
[ 3	]
#select * from test where value = 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
#explain select * from test where value = 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 98 # length
function user.s3_1{autoCommit=true}(A0:int):void;
    X_35:void := querylog.define("explain select * from test where value = 1;","default_pipe",24);
    X_19 := bat.new(nil:oid,nil:str);
    X_27 := bat.append(X_19,"sys.test");
    X_22 := bat.new(nil:oid,nil:str);
    X_29 := bat.append(X_22,"value");
    X_23 := bat.new(nil:oid,nil:str);
    X_30 := bat.append(X_23,"int");
    X_24 := bat.new(nil:oid,nil:int);
    X_32 := bat.append(X_24,32);
    X_26 := bat.new(nil:oid,nil:int);
    X_34 := bat.append(X_26,0);
    X_3 := sql.mvc();
    X_7:bat[:oid,:int] := sql.bind(X_3,"sys","test","value",0);
    C_4:bat[:oid,:oid] := sql.tid(X_3,"sys","test");
    C_45 := algebra.subselect(X_7,C_4,A0,A0,true,false,false);
    (C_10,r1_10) := sql.bind(X_3,"sys","test","value",2);
    C_46 := algebra.subselect(r1_10,nil:bat[:oid,:oid],A0,A0,true,false,false);
    X_13:bat[:oid,:int] := sql.bind(X_3,"sys","test","value",1);
    C_48 := algebra.subselect(X_13,C_4,A0,A0,true,false,false);
    C_15 := sql.subdelta(C_45,C_4,C_10,C_46,C_48);
    X_17 := sql.projectdelta(C_15,X_7,C_10,r1_10,X_13);
    sql.resultSet(X_27,X_29,X_30,X_32,X_34,X_17);
end user.s3_1;
# optimizer.mitosis()
# optimizer.dataflow()
#select * from test where value > 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
#explain select * from test where value > 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 98 # length
function user.s4_1{autoCommit=true}(A0:int):void;
    X_30:void := querylog.define("explain select * from test where value > 1;","default_pipe",57);
barrier X_86 := language.dataflow();
    X_14 := bat.new(nil:oid,nil:str);
    X_22 := bat.append(X_14,"sys.test");
    X_17 := bat.new(nil:oid,nil:str);
    X_24 := bat.append(X_17,"value");
    X_18 := bat.new(nil:oid,nil:str);
    X_25 := bat.append(X_18,"int");
    X_19 := bat.new(nil:oid,nil:int);
    X_27 := bat.append(X_19,32);
    X_21 := bat.new(nil:oid,nil:int);
    X_29 := bat.append(X_21,0);
    X_3 := sql.mvc();
    X_47:bat[:oid,:int] := sql.bind(X_3,"sys","test","value",0,0,3);
    X_42:bat[:oid,:oid] := sql.tid(X_3,"sys","test",0,3);
    X_56 := algebra.thetasubselect(X_47,X_42,A0,">");
    (X_50:bat[:oid,:oid],X_51:bat[:oid,:int]) := sql.bind(X_3,"sys","test","value",2,0,3);
    X_59 := algebra.thetasubselect(X_51,nil:bat[:oid,:oid],A0,">");
    X_62 := sql.subdelta(X_56,X_42,X_50,X_59);
    X_65 := sql.projectdelta(X_62,X_47,X_50,X_51);
    X_48:bat[:oid,:int] := sql.bind(X_3,"sys","test","value",0,1,3);
    X_44:bat[:oid,:oid] := sql.tid(X_3,"sys","test",1,3);
    X_57 := algebra.thetasubselect(X_48,X_44,A0,">");
    (X_52:bat[:oid,:oid],X_53:bat[:oid,:int]) := sql.bind(X_3,"sys","test","value",2,1,3);
    X_60 := algebra.thetasubselect(X_53,nil:bat[:oid,:oid],A0,">");
    X_63 := sql.subdelta(X_57,X_44,X_52,X_60);
    X_66 := sql.projectdelta(X_63,X_48,X_52,X_53);
    X_49:bat[:oid,:int] := sql.bind(X_3,"sys","test","value",0,2,3);
    X_46:bat[:oid,:oid] := sql.tid(X_3,"sys","test",2,3);
    X_58 := algebra.thetasubselect(X_49,X_46,A0,">");
    (X_54:bat[:oid,:oid],X_55:bat[:oid,:int]) := sql.bind(X_3,"sys","test","value",2,2,3);
    X_61 := algebra.thetasubselect(X_55,nil:bat[:oid,:oid],A0,">");
    X_9:bat[:oid,:int] := sql.bind(X_3,"sys","test","value",1);
    C_40 := algebra.thetasubselect(X_9,X_46,A0,">");
    X_64 := sql.subdelta(X_58,X_46,X_54,X_61,C_40);
    X_67 := sql.projectdelta(X_64,X_49,X_54,X_55,X_9);
    X_69 := mat.packIncrement(X_65,3);
    X_70 := mat.packIncrement(X_69,X_66);
    X_12 := mat.packIncrement(X_70,X_67);
    language.pass(X_42);
    language.pass(X_47);
    language.pass(X_50);
    language.pass(X_51);
    language.pass(X_44);
    language.pass(X_48);
    language.pass(X_52);
    language.pass(X_53);
    language.pass(nil:bat[:oid,:oid]);
    language.pass(X_46);
    language.pass(X_49);
    language.pass(X_54);
    language.pass(X_55);
    language.pass(X_9);
exit X_86;
    sql.resultSet(X_22,X_24,X_25,X_27,X_29,X_12);
end user.s4_1;
#select * from test where value >= 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
#explain select * from test where value >= 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 99 # length
function user.s5_1{autoCommit=true}(A0:int):void;
    X_30:void := querylog.define("explain select * from test where value >= 1;","default_pipe",57);
barrier X_86 := language.dataflow();
    X_14 := bat.new(nil:oid,nil:str);
    X_22 := bat.append(X_14,"sys.test");
    X_17 := bat.new(nil:oid,nil:str);
    X_24 := bat.append(X_17,"value");
    X_18 := bat.new(nil:oid,nil:str);
    X_25 := bat.append(X_18,"int");
    X_19 := bat.new(nil:oid,nil:int);
    X_27 := bat.append(X_19,32);
    X_21 := bat.new(nil:oid,nil:int);
    X_29 := bat.append(X_21,0);
    X_3 := sql.mvc();
    X_47:bat[:oid,:int] := sql.bind(X_3,"sys","test","value",0,0,3);
    X_42:bat[:oid,:oid] := sql.tid(X_3,"sys","test",0,3);
    X_56 := algebra.thetasubselect(X_47,X_42,A0,">=");
    (X_50:bat[:oid,:oid],X_51:bat[:oid,:int]) := sql.bind(X_3,"sys","test","value",2,0,3);
    X_59 := algebra.thetasubselect(X_51,nil:bat[:oid,:oid],A0,">=");
    X_62 := sql.subdelta(X_56,X_42,X_50,X_59);
    X_65 := sql.projectdelta(X_62,X_47,X_50,X_51);
    X_48:bat[:oid,:int] := sql.bind(X_3,"sys","test","value",0,1,3);
    X_44:bat[:oid,:oid] := sql.tid(X_3,"sys","test",1,3);
    X_57 := algebra.thetasubselect(X_48,X_44,A0,">=");
    (X_52:bat[:oid,:oid],X_53:bat[:oid,:int]) := sql.bind(X_3,"sys","test","value",2,1,3);
    X_60 := algebra.thetasubselect(X_53,nil:bat[:oid,:oid],A0,">=");
    X_63 := sql.subdelta(X_57,X_44,X_52,X_60);
    X_66 := sql.projectdelta(X_63,X_48,X_52,X_53);
    X_49:bat[:oid,:int] := sql.bind(X_3,"sys","test","value",0,2,3);
    X_46:bat[:oid,:oid] := sql.tid(X_3,"sys","test",2,3);
    X_58 := algebra.thetasubselect(X_49,X_46,A0,">=");
    (X_54:bat[:oid,:oid],X_55:bat[:oid,:int]) := sql.bind(X_3,"sys","test","value",2,2,3);
    X_61 := algebra.thetasubselect(X_55,nil:bat[:oid,:oid],A0,">=");
    X_9:bat[:oid,:int] := sql.bind(X_3,"sys","test","value",1);
    C_40 := algebra.thetasubselect(X_9,X_46,A0,">=");
    X_64 := sql.subdelta(X_58,X_46,X_54,X_61,C_40);
    X_67 := sql.projectdelta(X_64,X_49,X_54,X_55,X_9);
    X_69 := mat.packIncrement(X_65,3);
    X_70 := mat.packIncrement(X_69,X_66);
    X_12 := mat.packIncrement(X_70,X_67);
    language.pass(X_42);
    language.pass(X_47);
    language.pass(X_50);
    language.pass(X_51);
    language.pass(X_44);
    language.pass(X_48);
    language.pass(X_52);
    language.pass(X_53);
    language.pass(nil:bat[:oid,:oid]);
    language.pass(X_46);
    language.pass(X_49);
    language.pass(X_54);
    language.pass(X_55);
    language.pass(X_9);
exit X_86;
    sql.resultSet(X_22,X_24,X_25,X_27,X_29,X_12);
end user.s5_1;
#select * from test where value < 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
#explain select * from test where value < 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 98 # length
function user.s6_1{autoCommit=true}(A0:int):void;
    X_30:void := querylog.define("explain select * from test where value < 1;","default_pipe",57);
barrier X_86 := language.dataflow();
    X_14 := bat.new(nil:oid,nil:str);
    X_22 := bat.append(X_14,"sys.test");
    X_17 := bat.new(nil:oid,nil:str);
    X_24 := bat.append(X_17,"value");
    X_18 := bat.new(nil:oid,nil:str);
    X_25 := bat.append(X_18,"int");
    X_19 := bat.new(nil:oid,nil:int);
    X_27 := bat.append(X_19,32);
    X_21 := bat.new(nil:oid,nil:int);
    X_29 := bat.append(X_21,0);
    X_3 := sql.mvc();
    X_47:bat[:oid,:int] := sql.bind(X_3,"sys","test","value",0,0,3);
    X_42:bat[:oid,:oid] := sql.tid(X_3,"sys","test",0,3);
    X_56 := algebra.thetasubselect(X_47,X_42,A0,"<");
    (X_50:bat[:oid,:oid],X_51:bat[:oid,:int]) := sql.bind(X_3,"sys","test","value",2,0,3);
    X_59 := algebra.thetasubselect(X_51,nil:bat[:oid,:oid],A0,"<");
    X_62 := sql.subdelta(X_56,X_42,X_50,X_59);
    X_65 := sql.projectdelta(X_62,X_47,X_50,X_51);
    X_48:bat[:oid,:int] := sql.bind(X_3,"sys","test","value",0,1,3);
    X_44:bat[:oid,:oid] := sql.tid(X_3,"sys","test",1,3);
    X_57 := algebra.thetasubselect(X_48,X_44,A0,"<");
    (X_52:bat[:oid,:oid],X_53:bat[:oid,:int]) := sql.bind(X_3,"sys","test","value",2,1,3);
    X_60 := algebra.thetasubselect(X_53,nil:bat[:oid,:oid],A0,"<");
    X_63 := sql.subdelta(X_57,X_44,X_52,X_60);
    X_66 := sql.projectdelta(X_63,X_48,X_52,X_53);
    X_49:bat[:oid,:int] := sql.bind(X_3,"sys","test","value",0,2,3);
    X_46:bat[:oid,:oid] := sql.tid(X_3,"sys","test",2,3);
    X_58 := algebra.thetasubselect(X_49,X_46,A0,"<");
    (X_54:bat[:oid,:oid],X_55:bat[:oid,:int]) := sql.bind(X_3,"sys","test","value",2,2,3);
    X_61 := algebra.thetasubselect(X_55,nil:bat[:oid,:oid],A0,"<");
    X_9:bat[:oid,:int] := sql.bind(X_3,"sys","test","value",1);
    C_40 := algebra.thetasubselect(X_9,X_46,A0,"<");
    X_64 := sql.subdelta(X_58,X_46,X_54,X_61,C_40);
    X_67 := sql.projectdelta(X_64,X_49,X_54,X_55,X_9);
    X_69 := mat.packIncrement(X_65,3);
    X_70 := mat.packIncrement(X_69,X_66);
    X_12 := mat.packIncrement(X_70,X_67);
    language.pass(X_42);
    language.pass(X_47);
    language.pass(X_50);
    language.pass(X_51);
    language.pass(X_44);
    language.pass(X_48);
    language.pass(X_52);
    language.pass(X_53);
    language.pass(nil:bat[:oid,:oid]);
    language.pass(X_46);
    language.pass(X_49);
    language.pass(X_54);
    language.pass(X_55);
    language.pass(X_9);
exit X_86;
    sql.resultSet(X_22,X_24,X_25,X_27,X_29,X_12);
end user.s6_1;
#select * from test where value <= 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
#explain select * from test where value <= 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 99 # length
function user.s7_1{autoCommit=true}(A0:int):void;
    X_30:void := querylog.define("explain select * from test where value <= 1;","default_pipe",57);
barrier X_86 := language.dataflow();
    X_14 := bat.new(nil:oid,nil:str);
    X_22 := bat.append(X_14,"sys.test");
    X_17 := bat.new(nil:oid,nil:str);
    X_24 := bat.append(X_17,"value");
    X_18 := bat.new(nil:oid,nil:str);
    X_25 := bat.append(X_18,"int");
    X_19 := bat.new(nil:oid,nil:int);
    X_27 := bat.append(X_19,32);
    X_21 := bat.new(nil:oid,nil:int);
    X_29 := bat.append(X_21,0);
    X_3 := sql.mvc();
    X_47:bat[:oid,:int] := sql.bind(X_3,"sys","test","value",0,0,3);
    X_42:bat[:oid,:oid] := sql.tid(X_3,"sys","test",0,3);
    X_56 := algebra.thetasubselect(X_47,X_42,A0,"<=");
    (X_50:bat[:oid,:oid],X_51:bat[:oid,:int]) := sql.bind(X_3,"sys","test","value",2,0,3);
    X_59 := algebra.thetasubselect(X_51,nil:bat[:oid,:oid],A0,"<=");
    X_62 := sql.subdelta(X_56,X_42,X_50,X_59);
    X_65 := sql.projectdelta(X_62,X_47,X_50,X_51);
    X_48:bat[:oid,:int] := sql.bind(X_3,"sys","test","value",0,1,3);
    X_44:bat[:oid,:oid] := sql.tid(X_3,"sys","test",1,3);
    X_57 := algebra.thetasubselect(X_48,X_44,A0,"<=");
    (X_52:bat[:oid,:oid],X_53:bat[:oid,:int]) := sql.bind(X_3,"sys","test","value",2,1,3);
    X_60 := algebra.thetasubselect(X_53,nil:bat[:oid,:oid],A0,"<=");
    X_63 := sql.subdelta(X_57,X_44,X_52,X_60);
    X_66 := sql.projectdelta(X_63,X_48,X_52,X_53);
    X_49:bat[:oid,:int] := sql.bind(X_3,"sys","test","value",0,2,3);
    X_46:bat[:oid,:oid] := sql.tid(X_3,"sys","test",2,3);
    X_58 := algebra.thetasubselect(X_49,X_46,A0,"<=");
    (X_54:bat[:oid,:oid],X_55:bat[:oid,:int]) := sql.bind(X_3,"sys","test","value",2,2,3);
    X_61 := algebra.thetasubselect(X_55,nil:bat[:oid,:oid],A0,"<=");
    X_9:bat[:oid,:int] := sql.bind(X_3,"sys","test","value",1);
    C_40 := algebra.thetasubselect(X_9,X_46,A0,"<=");
    X_64 := sql.subdelta(X_58,X_46,X_54,X_61,C_40);
    X_67 := sql.projectdelta(X_64,X_49,X_54,X_55,X_9);
    X_69 := mat.packIncrement(X_65,3);
    X_70 := mat.packIncrement(X_69,X_66);
    X_12 := mat.packIncrement(X_70,X_67);
    language.pass(X_42);
    language.pass(X_47);
    language.pass(X_50);
    language.pass(X_51);
    language.pass(X_44);
    language.pass(X_48);
    language.pass(X_52);
    language.pass(X_53);
    language.pass(nil:bat[:oid,:oid]);
    language.pass(X_46);
    language.pass(X_49);
    language.pass(X_54);
    language.pass(X_55);
    language.pass(X_9);
exit X_86;
    sql.resultSet(X_22,X_24,X_25,X_27,X_29,X_12);
end user.s7_1;
#select * from test where value <> 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
#explain select * from test where value <> 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 99 # length
function user.s8_1{autoCommit=true}(A0:int):void;
    X_29:void := querylog.define("explain select * from test where value <> 1;","default_pipe",57);
barrier X_85 := language.dataflow();
    X_13 := bat.new(nil:oid,nil:str);
    X_21 := bat.append(X_13,"sys.test");
    X_16 := bat.new(nil:oid,nil:str);
    X_23 := bat.append(X_16,"value");
    X_17 := bat.new(nil:oid,nil:str);
    X_24 := bat.append(X_17,"int");
    X_18 := bat.new(nil:oid,nil:int);
    X_26 := bat.append(X_18,32);
    X_20 := bat.new(nil:oid,nil:int);
    X_28 := bat.append(X_20,0);
    X_3 := sql.mvc();
    X_46:bat[:oid,:int] := sql.bind(X_3,"sys","test","value",0,0,3);
    X_41:bat[:oid,:oid] := sql.tid(X_3,"sys","test",0,3);
    X_55 := algebra.subselect(X_46,X_41,A0,A0,true,true,true);
    (X_49:bat[:oid,:oid],X_50:bat[:oid,:int]) := sql.bind(X_3,"sys","test","value",2,0,3);
    X_58 := algebra.subselect(X_50,nil:bat[:oid,:oid],A0,A0,true,true,true);
    X_61 := sql.subdelta(X_55,X_41,X_49,X_58);
    X_64 := sql.projectdelta(X_61,X_46,X_49,X_50);
    X_47:bat[:oid,:int] := sql.bind(X_3,"sys","test","value",0,1,3);
    X_43:bat[:oid,:oid] := sql.tid(X_3,"sys","test",1,3);
    X_56 := algebra.subselect(X_47,X_43,A0,A0,true,true,true);
    (X_51:bat[:oid,:oid],X_52:bat[:oid,:int]) := sql.bind(X_3,"sys","test","value",2,1,3);
    X_59 := algebra.subselect(X_52,nil:bat[:oid,:oid],A0,A0,true,true,true);
    X_62 := sql.subdelta(X_56,X_43,X_51,X_59);
    X_65 := sql.projectdelta(X_62,X_47,X_51,X_52);
    X_48:bat[:oid,:int] := sql.bind(X_3,"sys","test","value",0,2,3);
    X_45:bat[:oid,:oid] := sql.tid(X_3,"sys","test",2,3);
    X_57 := algebra.subselect(X_48,X_45,A0,A0,true,true,true);
    (X_53:bat[:oid,:oid],X_54:bat[:oid,:int]) := sql.bind(X_3,"sys","test","value",2,2,3);
    X_60 := algebra.subselect(X_54,nil:bat[:oid,:oid],A0,A0,true,true,true);
    X_9:bat[:oid,:int] := sql.bind(X_3,"sys","test","value",1);
    C_39 := algebra.subselect(X_9,X_45,A0,A0,true,true,true);
    X_63 := sql.subdelta(X_57,X_45,X_53,X_60,C_39);
    X_66 := sql.projectdelta(X_63,X_48,X_53,X_54,X_9);
    X_68 := mat.packIncrement(X_64,3);
    X_69 := mat.packIncrement(X_68,X_65);
    X_11 := mat.packIncrement(X_69,X_66);
    language.pass(X_41);
    language.pass(X_46);
    language.pass(X_49);
    language.pass(X_50);
    language.pass(X_43);
    language.pass(X_47);
    language.pass(X_51);
    language.pass(X_52);
    language.pass(nil:bat[:oid,:oid]);
    language.pass(X_45);
    language.pass(X_48);
    language.pass(X_53);
    language.pass(X_54);
    language.pass(X_9);
exit X_85;
    sql.resultSet(X_21,X_23,X_24,X_26,X_28,X_11);
end user.s8_1;
#drop table test;

# 21:57:14 >  
# 21:57:14 >  "Done."
# 21:57:14 >  

