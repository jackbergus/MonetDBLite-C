stdout of test 'useless_casts.Bug-3756` in directory 'sql/test/BugTracker-2015` itself:


# 21:57:13 >  
# 21:57:13 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=33119" "--set" "mapi_usock=/var/tmp/mtest-22263/.s.monetdb.33119" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/rc-monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_BugTracker-2015" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 21:57:13 >  

# MonetDB 5 server v11.21.0
# This is an unreleased version
# Serving database 'mTests_sql_test_BugTracker-2015', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.333 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.nes.nl:33119/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-22263/.s.monetdb.33119
# MonetDB/GIS module loaded
# Start processing logs sql/sql_logs version 52200
# Start reading the write-ahead log 'sql_logs/sql/log.34'
# Finished reading the write-ahead log 'sql_logs/sql/log.34'
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.

# 21:57:14 >  
# 21:57:14 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-22263" "--port=33119"
# 21:57:14 >  

#create table test(value int);
#insert into test values (1), (2), (3);
[ 3	]
#select * from test where value = 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
#explain select * from test where value = 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 98 # length
function user.s6_1():void;
    X_34:void := querylog.define("explain select * from test where value = 1;","default_pipe",24);
    X_18 := bat.new(nil:oid,nil:str);
    X_26 := bat.append(X_18,"sys.test");
    X_21 := bat.new(nil:oid,nil:str);
    X_28 := bat.append(X_21,"value");
    X_22 := bat.new(nil:oid,nil:str);
    X_29 := bat.append(X_22,"int");
    X_23 := bat.new(nil:oid,nil:int);
    X_31 := bat.append(X_23,32);
    X_25 := bat.new(nil:oid,nil:int);
    X_33 := bat.append(X_25,0);
    X_2 := sql.mvc();
    X_6:bat[:int] := sql.bind(X_2,"sys","test","value",0);
    C_3:bat[:oid] := sql.tid(X_2,"sys","test");
    C_52 := algebra.subselect(X_6,C_3,1,1,true,false,false);
    (C_9,r1_9) := sql.bind(X_2,"sys","test","value",2);
    C_53 := algebra.subselect(r1_9,nil:bat[:oid],1,1,true,false,false);
    X_12:bat[:int] := sql.bind(X_2,"sys","test","value",1);
    C_55 := algebra.subselect(X_12,C_3,1,1,true,false,false);
    C_13 := sql.subdelta(C_52,C_3,C_9,C_53,C_55);
    X_16 := sql.projectdelta(C_13,X_6,C_9,r1_9,X_12);
    sql.resultSet(X_26,X_28,X_29,X_31,X_33,X_16);
end user.s6_1;
# optimizer.mitosis()
# optimizer.dataflow()
#select * from test where value > 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
#explain select * from test where value > 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 98 # length
function user.s8_1():void;
    X_28:void := querylog.define("explain select * from test where value > 1;","default_pipe",57);
barrier X_103 := language.dataflow();
    X_12 := bat.new(nil:oid,nil:str);
    X_20 := bat.append(X_12,"sys.test");
    X_15 := bat.new(nil:oid,nil:str);
    X_22 := bat.append(X_15,"value");
    X_16 := bat.new(nil:oid,nil:str);
    X_23 := bat.append(X_16,"int");
    X_17 := bat.new(nil:oid,nil:int);
    X_25 := bat.append(X_17,32);
    X_19 := bat.new(nil:oid,nil:int);
    X_27 := bat.append(X_19,0);
    X_2 := sql.mvc();
    X_53:bat[:int] := sql.bind(X_2,"sys","test","value",0,0,3);
    C_50:bat[:oid] := sql.tid(X_2,"sys","test",0,3);
    C_63 := algebra.thetasubselect(X_53,C_50,1,">");
    (C_56:bat[:oid],X_57:bat[:int]) := sql.bind(X_2,"sys","test","value",2,0,3);
    C_66 := algebra.thetasubselect(X_57,nil:bat[:oid],1,">");
    C_69 := sql.subdelta(C_63,C_50,C_56,C_66);
    X_72 := sql.projectdelta(C_69,X_53,C_56,X_57);
    X_54:bat[:int] := sql.bind(X_2,"sys","test","value",0,1,3);
    C_51:bat[:oid] := sql.tid(X_2,"sys","test",1,3);
    C_64 := algebra.thetasubselect(X_54,C_51,1,">");
    (C_58:bat[:oid],X_59:bat[:int]) := sql.bind(X_2,"sys","test","value",2,1,3);
    C_67 := algebra.thetasubselect(X_59,nil:bat[:oid],1,">");
    C_70 := sql.subdelta(C_64,C_51,C_58,C_67);
    X_73 := sql.projectdelta(C_70,X_54,C_58,X_59);
    X_55:bat[:int] := sql.bind(X_2,"sys","test","value",0,2,3);
    C_52:bat[:oid] := sql.tid(X_2,"sys","test",2,3);
    C_65 := algebra.thetasubselect(X_55,C_52,1,">");
    (C_60:bat[:oid],X_61:bat[:int]) := sql.bind(X_2,"sys","test","value",2,2,3);
    C_68 := algebra.thetasubselect(X_61,nil:bat[:oid],1,">");
    X_8:bat[:int] := sql.bind(X_2,"sys","test","value",1);
    C_46 := algebra.thetasubselect(X_8,C_52,1,">");
    C_71 := sql.subdelta(C_65,C_52,C_60,C_68,C_46);
    X_74 := sql.projectdelta(C_71,X_55,C_60,X_61,X_8);
    X_84 := mat.packIncrement(X_72,3);
    X_86 := mat.packIncrement(X_84,X_73);
    X_10 := mat.packIncrement(X_86,X_74);
    language.pass(C_50);
    language.pass(X_53);
    language.pass(C_56);
    language.pass(X_57);
    language.pass(C_51);
    language.pass(X_54);
    language.pass(C_58);
    language.pass(X_59);
    language.pass(nil:bat[:oid]);
    language.pass(C_52);
    language.pass(X_55);
    language.pass(C_60);
    language.pass(X_61);
    language.pass(X_8);
exit X_103;
    sql.resultSet(X_20,X_22,X_23,X_25,X_27,X_10);
end user.s8_1;
#inline               actions= 0 time=2 usec 
#candidates           actions= 1 time=20 usec 
#remap                actions= 0 time=5 usec 
#costModel            actions= 1 time=18 usec 
#coercions            actions= 0 time=3 usec 
#evaluate             actions= 1 time=34 usec 
#emptybind            actions= 0 time=5 usec 
#pushselect           actions= 2 time=24 usec 
#aliases              actions= 3 time=21 usec 
#mitosis              actions= 1 time=40 usec 
#mergetable           actions= 2 time=81 usec 
#deadcode             actions= 7 time=27 usec 
#aliases              actions= 0 time=8 usec 
#constants            actions= 4 time=32 usec 
#commonTerms          actions= 0 time=8 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 0 time=16 usec 
#reorder              actions= 1 time=42 usec 
#reduce               actions=39 time=46 usec 
#matpack              actions= 1 time=23 usec 
#dataflow             actions=28 time=39 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=4 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=22 usec 
#garbageCollector     actions= 1 time=29 usec 
#total                actions= 1 time=646 usec 
#select * from test where value >= 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
#explain select * from test where value >= 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 99 # length
function user.s10_1():void;
    X_28:void := querylog.define("explain select * from test where value >= 1;","default_pipe",57);
barrier X_103 := language.dataflow();
    X_12 := bat.new(nil:oid,nil:str);
    X_20 := bat.append(X_12,"sys.test");
    X_15 := bat.new(nil:oid,nil:str);
    X_22 := bat.append(X_15,"value");
    X_16 := bat.new(nil:oid,nil:str);
    X_23 := bat.append(X_16,"int");
    X_17 := bat.new(nil:oid,nil:int);
    X_25 := bat.append(X_17,32);
    X_19 := bat.new(nil:oid,nil:int);
    X_27 := bat.append(X_19,0);
    X_2 := sql.mvc();
    X_53:bat[:int] := sql.bind(X_2,"sys","test","value",0,0,3);
    C_50:bat[:oid] := sql.tid(X_2,"sys","test",0,3);
    C_63 := algebra.thetasubselect(X_53,C_50,1,">=");
    (C_56:bat[:oid],X_57:bat[:int]) := sql.bind(X_2,"sys","test","value",2,0,3);
    C_66 := algebra.thetasubselect(X_57,nil:bat[:oid],1,">=");
    C_69 := sql.subdelta(C_63,C_50,C_56,C_66);
    X_72 := sql.projectdelta(C_69,X_53,C_56,X_57);
    X_54:bat[:int] := sql.bind(X_2,"sys","test","value",0,1,3);
    C_51:bat[:oid] := sql.tid(X_2,"sys","test",1,3);
    C_64 := algebra.thetasubselect(X_54,C_51,1,">=");
    (C_58:bat[:oid],X_59:bat[:int]) := sql.bind(X_2,"sys","test","value",2,1,3);
    C_67 := algebra.thetasubselect(X_59,nil:bat[:oid],1,">=");
    C_70 := sql.subdelta(C_64,C_51,C_58,C_67);
    X_73 := sql.projectdelta(C_70,X_54,C_58,X_59);
    X_55:bat[:int] := sql.bind(X_2,"sys","test","value",0,2,3);
    C_52:bat[:oid] := sql.tid(X_2,"sys","test",2,3);
    C_65 := algebra.thetasubselect(X_55,C_52,1,">=");
    (C_60:bat[:oid],X_61:bat[:int]) := sql.bind(X_2,"sys","test","value",2,2,3);
    C_68 := algebra.thetasubselect(X_61,nil:bat[:oid],1,">=");
    X_8:bat[:int] := sql.bind(X_2,"sys","test","value",1);
    C_46 := algebra.thetasubselect(X_8,C_52,1,">=");
    C_71 := sql.subdelta(C_65,C_52,C_60,C_68,C_46);
    X_74 := sql.projectdelta(C_71,X_55,C_60,X_61,X_8);
    X_84 := mat.packIncrement(X_72,3);
    X_86 := mat.packIncrement(X_84,X_73);
    X_10 := mat.packIncrement(X_86,X_74);
    language.pass(C_50);
    language.pass(X_53);
    language.pass(C_56);
    language.pass(X_57);
    language.pass(C_51);
    language.pass(X_54);
    language.pass(C_58);
    language.pass(X_59);
    language.pass(nil:bat[:oid]);
    language.pass(C_52);
    language.pass(X_55);
    language.pass(C_60);
    language.pass(X_61);
    language.pass(X_8);
exit X_103;
    sql.resultSet(X_20,X_22,X_23,X_25,X_27,X_10);
end user.s10_1;
#inline               actions= 0 time=2 usec 
#candidates           actions= 1 time=20 usec 
#remap                actions= 0 time=4 usec 
#costModel            actions= 1 time=18 usec 
#coercions            actions= 0 time=2 usec 
#evaluate             actions= 1 time=31 usec 
#emptybind            actions= 0 time=5 usec 
#pushselect           actions= 2 time=23 usec 
#aliases              actions= 3 time=21 usec 
#mitosis              actions= 1 time=41 usec 
#mergetable           actions= 2 time=63 usec 
#deadcode             actions= 7 time=26 usec 
#aliases              actions= 0 time=8 usec 
#constants            actions= 4 time=23 usec 
#commonTerms          actions= 0 time=8 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 0 time=8 usec 
#reorder              actions= 1 time=63 usec 
#reduce               actions=39 time=45 usec 
#matpack              actions= 1 time=23 usec 
#dataflow             actions=28 time=41 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=5 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=21 usec 
#garbageCollector     actions= 1 time=28 usec 
#total                actions= 1 time=620 usec 
#select * from test where value < 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
#explain select * from test where value < 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 98 # length
function user.s12_1():void;
    X_28:void := querylog.define("explain select * from test where value < 1;","default_pipe",57);
barrier X_103 := language.dataflow();
    X_12 := bat.new(nil:oid,nil:str);
    X_20 := bat.append(X_12,"sys.test");
    X_15 := bat.new(nil:oid,nil:str);
    X_22 := bat.append(X_15,"value");
    X_16 := bat.new(nil:oid,nil:str);
    X_23 := bat.append(X_16,"int");
    X_17 := bat.new(nil:oid,nil:int);
    X_25 := bat.append(X_17,32);
    X_19 := bat.new(nil:oid,nil:int);
    X_27 := bat.append(X_19,0);
    X_2 := sql.mvc();
    X_53:bat[:int] := sql.bind(X_2,"sys","test","value",0,0,3);
    C_50:bat[:oid] := sql.tid(X_2,"sys","test",0,3);
    C_63 := algebra.thetasubselect(X_53,C_50,1,"<");
    (C_56:bat[:oid],X_57:bat[:int]) := sql.bind(X_2,"sys","test","value",2,0,3);
    C_66 := algebra.thetasubselect(X_57,nil:bat[:oid],1,"<");
    C_69 := sql.subdelta(C_63,C_50,C_56,C_66);
    X_72 := sql.projectdelta(C_69,X_53,C_56,X_57);
    X_54:bat[:int] := sql.bind(X_2,"sys","test","value",0,1,3);
    C_51:bat[:oid] := sql.tid(X_2,"sys","test",1,3);
    C_64 := algebra.thetasubselect(X_54,C_51,1,"<");
    (C_58:bat[:oid],X_59:bat[:int]) := sql.bind(X_2,"sys","test","value",2,1,3);
    C_67 := algebra.thetasubselect(X_59,nil:bat[:oid],1,"<");
    C_70 := sql.subdelta(C_64,C_51,C_58,C_67);
    X_73 := sql.projectdelta(C_70,X_54,C_58,X_59);
    X_55:bat[:int] := sql.bind(X_2,"sys","test","value",0,2,3);
    C_52:bat[:oid] := sql.tid(X_2,"sys","test",2,3);
    C_65 := algebra.thetasubselect(X_55,C_52,1,"<");
    (C_60:bat[:oid],X_61:bat[:int]) := sql.bind(X_2,"sys","test","value",2,2,3);
    C_68 := algebra.thetasubselect(X_61,nil:bat[:oid],1,"<");
    X_8:bat[:int] := sql.bind(X_2,"sys","test","value",1);
    C_46 := algebra.thetasubselect(X_8,C_52,1,"<");
    C_71 := sql.subdelta(C_65,C_52,C_60,C_68,C_46);
    X_74 := sql.projectdelta(C_71,X_55,C_60,X_61,X_8);
    X_84 := mat.packIncrement(X_72,3);
    X_86 := mat.packIncrement(X_84,X_73);
    X_10 := mat.packIncrement(X_86,X_74);
    language.pass(C_50);
    language.pass(X_53);
    language.pass(C_56);
    language.pass(X_57);
    language.pass(C_51);
    language.pass(X_54);
    language.pass(C_58);
    language.pass(X_59);
    language.pass(nil:bat[:oid]);
    language.pass(C_52);
    language.pass(X_55);
    language.pass(C_60);
    language.pass(X_61);
    language.pass(X_8);
exit X_103;
    sql.resultSet(X_20,X_22,X_23,X_25,X_27,X_10);
end user.s12_1;
#inline               actions= 0 time=3 usec 
#candidates           actions= 1 time=20 usec 
#remap                actions= 0 time=4 usec 
#costModel            actions= 1 time=19 usec 
#coercions            actions= 0 time=2 usec 
#evaluate             actions= 1 time=33 usec 
#emptybind            actions= 0 time=4 usec 
#pushselect           actions= 2 time=24 usec 
#aliases              actions= 3 time=20 usec 
#mitosis              actions= 1 time=41 usec 
#mergetable           actions= 2 time=64 usec 
#deadcode             actions= 7 time=27 usec 
#aliases              actions= 0 time=8 usec 
#constants            actions= 4 time=24 usec 
#commonTerms          actions= 0 time=8 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 0 time=8 usec 
#reorder              actions= 1 time=42 usec 
#reduce               actions=39 time=46 usec 
#matpack              actions= 1 time=23 usec 
#dataflow             actions=28 time=39 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=4 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=21 usec 
#garbageCollector     actions= 1 time=29 usec 
#total                actions= 1 time=600 usec 
#select * from test where value <= 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
#explain select * from test where value <= 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 99 # length
function user.s14_1():void;
    X_28:void := querylog.define("explain select * from test where value <= 1;","default_pipe",57);
barrier X_103 := language.dataflow();
    X_12 := bat.new(nil:oid,nil:str);
    X_20 := bat.append(X_12,"sys.test");
    X_15 := bat.new(nil:oid,nil:str);
    X_22 := bat.append(X_15,"value");
    X_16 := bat.new(nil:oid,nil:str);
    X_23 := bat.append(X_16,"int");
    X_17 := bat.new(nil:oid,nil:int);
    X_25 := bat.append(X_17,32);
    X_19 := bat.new(nil:oid,nil:int);
    X_27 := bat.append(X_19,0);
    X_2 := sql.mvc();
    X_53:bat[:int] := sql.bind(X_2,"sys","test","value",0,0,3);
    C_50:bat[:oid] := sql.tid(X_2,"sys","test",0,3);
    C_63 := algebra.thetasubselect(X_53,C_50,1,"<=");
    (C_56:bat[:oid],X_57:bat[:int]) := sql.bind(X_2,"sys","test","value",2,0,3);
    C_66 := algebra.thetasubselect(X_57,nil:bat[:oid],1,"<=");
    C_69 := sql.subdelta(C_63,C_50,C_56,C_66);
    X_72 := sql.projectdelta(C_69,X_53,C_56,X_57);
    X_54:bat[:int] := sql.bind(X_2,"sys","test","value",0,1,3);
    C_51:bat[:oid] := sql.tid(X_2,"sys","test",1,3);
    C_64 := algebra.thetasubselect(X_54,C_51,1,"<=");
    (C_58:bat[:oid],X_59:bat[:int]) := sql.bind(X_2,"sys","test","value",2,1,3);
    C_67 := algebra.thetasubselect(X_59,nil:bat[:oid],1,"<=");
    C_70 := sql.subdelta(C_64,C_51,C_58,C_67);
    X_73 := sql.projectdelta(C_70,X_54,C_58,X_59);
    X_55:bat[:int] := sql.bind(X_2,"sys","test","value",0,2,3);
    C_52:bat[:oid] := sql.tid(X_2,"sys","test",2,3);
    C_65 := algebra.thetasubselect(X_55,C_52,1,"<=");
    (C_60:bat[:oid],X_61:bat[:int]) := sql.bind(X_2,"sys","test","value",2,2,3);
    C_68 := algebra.thetasubselect(X_61,nil:bat[:oid],1,"<=");
    X_8:bat[:int] := sql.bind(X_2,"sys","test","value",1);
    C_46 := algebra.thetasubselect(X_8,C_52,1,"<=");
    C_71 := sql.subdelta(C_65,C_52,C_60,C_68,C_46);
    X_74 := sql.projectdelta(C_71,X_55,C_60,X_61,X_8);
    X_84 := mat.packIncrement(X_72,3);
    X_86 := mat.packIncrement(X_84,X_73);
    X_10 := mat.packIncrement(X_86,X_74);
    language.pass(C_50);
    language.pass(X_53);
    language.pass(C_56);
    language.pass(X_57);
    language.pass(C_51);
    language.pass(X_54);
    language.pass(C_58);
    language.pass(X_59);
    language.pass(nil:bat[:oid]);
    language.pass(C_52);
    language.pass(X_55);
    language.pass(C_60);
    language.pass(X_61);
    language.pass(X_8);
exit X_103;
    sql.resultSet(X_20,X_22,X_23,X_25,X_27,X_10);
end user.s14_1;
#inline               actions= 0 time=3 usec 
#candidates           actions= 1 time=18 usec 
#remap                actions= 0 time=4 usec 
#costModel            actions= 1 time=17 usec 
#coercions            actions= 0 time=2 usec 
#evaluate             actions= 1 time=31 usec 
#emptybind            actions= 0 time=4 usec 
#pushselect           actions= 2 time=39 usec 
#aliases              actions= 3 time=20 usec 
#mitosis              actions= 1 time=38 usec 
#mergetable           actions= 2 time=71 usec 
#deadcode             actions= 7 time=25 usec 
#aliases              actions= 0 time=8 usec 
#constants            actions= 4 time=22 usec 
#commonTerms          actions= 0 time=8 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 0 time=7 usec 
#reorder              actions= 1 time=40 usec 
#reduce               actions=39 time=44 usec 
#matpack              actions= 1 time=22 usec 
#dataflow             actions=28 time=38 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=4 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=20 usec 
#garbageCollector     actions= 1 time=28 usec 
#total                actions= 1 time=600 usec 
#select * from test where value <> 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
#explain select * from test where value <> 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 99 # length
function user.s16_1():void;
    X_28:void := querylog.define("explain select * from test where value <> 1;","default_pipe",57);
barrier X_103 := language.dataflow();
    X_12 := bat.new(nil:oid,nil:str);
    X_20 := bat.append(X_12,"sys.test");
    X_15 := bat.new(nil:oid,nil:str);
    X_22 := bat.append(X_15,"value");
    X_16 := bat.new(nil:oid,nil:str);
    X_23 := bat.append(X_16,"int");
    X_17 := bat.new(nil:oid,nil:int);
    X_25 := bat.append(X_17,32);
    X_19 := bat.new(nil:oid,nil:int);
    X_27 := bat.append(X_19,0);
    X_2 := sql.mvc();
    X_53:bat[:int] := sql.bind(X_2,"sys","test","value",0,0,3);
    C_50:bat[:oid] := sql.tid(X_2,"sys","test",0,3);
    C_63 := algebra.subselect(X_53,C_50,1,1,true,true,true);
    (C_56:bat[:oid],X_57:bat[:int]) := sql.bind(X_2,"sys","test","value",2,0,3);
    C_66 := algebra.subselect(X_57,nil:bat[:oid],1,1,true,true,true);
    C_69 := sql.subdelta(C_63,C_50,C_56,C_66);
    X_72 := sql.projectdelta(C_69,X_53,C_56,X_57);
    X_54:bat[:int] := sql.bind(X_2,"sys","test","value",0,1,3);
    C_51:bat[:oid] := sql.tid(X_2,"sys","test",1,3);
    C_64 := algebra.subselect(X_54,C_51,1,1,true,true,true);
    (C_58:bat[:oid],X_59:bat[:int]) := sql.bind(X_2,"sys","test","value",2,1,3);
    C_67 := algebra.subselect(X_59,nil:bat[:oid],1,1,true,true,true);
    C_70 := sql.subdelta(C_64,C_51,C_58,C_67);
    X_73 := sql.projectdelta(C_70,X_54,C_58,X_59);
    X_55:bat[:int] := sql.bind(X_2,"sys","test","value",0,2,3);
    C_52:bat[:oid] := sql.tid(X_2,"sys","test",2,3);
    C_65 := algebra.subselect(X_55,C_52,1,1,true,true,true);
    (C_60:bat[:oid],X_61:bat[:int]) := sql.bind(X_2,"sys","test","value",2,2,3);
    C_68 := algebra.subselect(X_61,nil:bat[:oid],1,1,true,true,true);
    X_8:bat[:int] := sql.bind(X_2,"sys","test","value",1);
    C_46 := algebra.subselect(X_8,C_52,1,1,true,true,true);
    C_71 := sql.subdelta(C_65,C_52,C_60,C_68,C_46);
    X_74 := sql.projectdelta(C_71,X_55,C_60,X_61,X_8);
    X_84 := mat.packIncrement(X_72,3);
    X_86 := mat.packIncrement(X_84,X_73);
    X_10 := mat.packIncrement(X_86,X_74);
    language.pass(C_50);
    language.pass(X_53);
    language.pass(C_56);
    language.pass(X_57);
    language.pass(C_51);
    language.pass(X_54);
    language.pass(C_58);
    language.pass(X_59);
    language.pass(nil:bat[:oid]);
    language.pass(C_52);
    language.pass(X_55);
    language.pass(C_60);
    language.pass(X_61);
    language.pass(X_8);
exit X_103;
    sql.resultSet(X_20,X_22,X_23,X_25,X_27,X_10);
end user.s16_1;
#inline               actions= 0 time=2 usec 
#candidates           actions= 1 time=20 usec 
#remap                actions= 0 time=4 usec 
#costModel            actions= 1 time=18 usec 
#coercions            actions= 0 time=2 usec 
#evaluate             actions= 1 time=31 usec 
#emptybind            actions= 0 time=5 usec 
#pushselect           actions= 2 time=25 usec 
#aliases              actions= 3 time=20 usec 
#mitosis              actions= 1 time=39 usec 
#mergetable           actions= 2 time=63 usec 
#deadcode             actions= 7 time=26 usec 
#aliases              actions= 0 time=7 usec 
#constants            actions= 5 time=23 usec 
#commonTerms          actions= 0 time=8 usec 
#projectionpath       actions= 0 time=6 usec 
#deadcode             actions= 0 time=8 usec 
#reorder              actions= 1 time=41 usec 
#reduce               actions=40 time=46 usec 
#matpack              actions= 1 time=23 usec 
#dataflow             actions=28 time=40 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=4 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=21 usec 
#garbageCollector     actions= 1 time=29 usec 
#total                actions= 1 time=585 usec 
#drop table test;

# 21:57:14 >  
# 21:57:14 >  "Done."
# 21:57:14 >  

