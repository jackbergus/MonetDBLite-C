stdout of test 'useless_casts.Bug-3756` in directory 'sql/test/BugTracker-2015` itself:


# 21:57:13 >  
# 21:57:13 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=33119" "--set" "mapi_usock=/var/tmp/mtest-22263/.s.monetdb.33119" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/rc-monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_BugTracker-2015" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 21:57:13 >  

# MonetDB 5 server v11.21.0
# This is an unreleased version
# Serving database 'mTests_sql_test_BugTracker-2015', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.333 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.nes.nl:33119/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-22263/.s.monetdb.33119
# MonetDB/GIS module loaded
# Start processing logs sql/sql_logs version 52200
# Start reading the write-ahead log 'sql_logs/sql/log.34'
# Finished reading the write-ahead log 'sql_logs/sql/log.34'
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.

# 21:57:14 >  
# 21:57:14 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-22263" "--port=33119"
# 21:57:14 >  

#create table test(value int);
#insert into test values (1), (2), (3);
[ 3	]
#select * from test where value = 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
#explain select * from test where value = 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 98 # length
function user.s3_1(A0:int):void;
    X_36:void := querylog.define("explain select * from test where value = 1;","default_pipe",24);
    X_21 := bat.new(nil:str);
    X_28 := bat.append(X_21,"sys.test");
    X_23 := bat.new(nil:str);
    X_30 := bat.append(X_23,"value");
    X_24 := bat.new(nil:str);
    X_31 := bat.append(X_24,"int");
    X_25 := bat.new(nil:int);
    X_33 := bat.append(X_25,32);
    X_27 := bat.new(nil:int);
    X_35 := bat.append(X_27,0);
    X_0 := sql.mvc();
    X_4:bat[:int] := sql.bind(X_0,"sys","test","value",0);
    X_1:bat[:oid] := sql.tid(X_0,"sys","test");
    X_45 := algebra.subselect(X_4,X_1,A0,A0,true,false,false);
    (X_7,r1_9) := sql.bind(X_0,"sys","test","value",2);
    X_46 := algebra.subselect(r1_9,nil:bat[:oid],A0,A0,true,false,false);
    X_10:bat[:int] := sql.bind(X_0,"sys","test","value",1);
    X_48 := algebra.subselect(X_10,X_1,A0,A0,true,false,false);
    X_15 := sql.subdelta(X_45,X_1,X_7,X_46,X_48);
    X_19 := sql.projectdelta(X_15,X_4,X_7,r1_9,X_10);
    sql.resultSet(X_28,X_30,X_31,X_33,X_35,X_19);
end user.s3_1;
# optimizer.mitosis()
# optimizer.dataflow()
#select * from test where value > 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
#explain select * from test where value > 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 98 # length
function user.s4_1(A0:int):void;
    X_34:void := querylog.define("explain select * from test where value > 1;","default_pipe",57);
barrier X_109 := language.dataflow();
    X_19 := bat.new(nil:str);
    X_26 := bat.append(X_19,"sys.test");
    X_21 := bat.new(nil:str);
    X_28 := bat.append(X_21,"value");
    X_22 := bat.new(nil:str);
    X_29 := bat.append(X_22,"int");
    X_23 := bat.new(nil:int);
    X_31 := bat.append(X_23,32);
    X_25 := bat.new(nil:int);
    X_33 := bat.append(X_25,0);
    X_0 := sql.mvc();
    X_56:bat[:int] := sql.bind(X_0,"sys","test","value",0,0,3);
    X_51:bat[:oid] := sql.tid(X_0,"sys","test",0,3);
    X_69 := algebra.thetasubselect(X_56,X_51,A0,">");
    (X_59:bat[:oid],X_60:bat[:int]) := sql.bind(X_0,"sys","test","value",2,0,3);
    X_72 := algebra.thetasubselect(X_60,nil:bat[:oid],A0,">");
    X_75 := sql.subdelta(X_69,X_51,X_59,X_72);
    X_78 := sql.projectdelta(X_75,X_56,X_59,X_60);
    X_57:bat[:int] := sql.bind(X_0,"sys","test","value",0,1,3);
    X_53:bat[:oid] := sql.tid(X_0,"sys","test",1,3);
    X_70 := algebra.thetasubselect(X_57,X_53,A0,">");
    (X_61:bat[:oid],X_62:bat[:int]) := sql.bind(X_0,"sys","test","value",2,1,3);
    X_73 := algebra.thetasubselect(X_62,nil:bat[:oid],A0,">");
    X_76 := sql.subdelta(X_70,X_53,X_61,X_73);
    X_79 := sql.projectdelta(X_76,X_57,X_61,X_62);
    X_58:bat[:int] := sql.bind(X_0,"sys","test","value",0,2,3);
    X_55:bat[:oid] := sql.tid(X_0,"sys","test",2,3);
    X_71 := algebra.thetasubselect(X_58,X_55,A0,">");
    (X_63:bat[:oid],X_64:bat[:int]) := sql.bind(X_0,"sys","test","value",2,2,3);
    X_74 := algebra.thetasubselect(X_64,nil:bat[:oid],A0,">");
    X_10:bat[:int] := sql.bind(X_0,"sys","test","value",1);
    X_46 := algebra.thetasubselect(X_10,X_55,A0,">");
    X_77 := sql.subdelta(X_71,X_55,X_63,X_74,X_46);
    X_80 := sql.projectdelta(X_77,X_58,X_63,X_64,X_10);
    X_90 := mat.packIncrement(X_78,3);
    X_92 := mat.packIncrement(X_90,X_79);
    X_17 := mat.packIncrement(X_92,X_80);
    language.pass(X_51);
    language.pass(X_56);
    language.pass(X_59);
    language.pass(X_60);
    language.pass(X_53);
    language.pass(X_57);
    language.pass(X_61);
    language.pass(X_62);
    language.pass(nil:bat[:oid]);
    language.pass(X_55);
    language.pass(X_58);
    language.pass(X_63);
    language.pass(X_64);
    language.pass(X_10);
exit X_109;
    sql.resultSet(X_26,X_28,X_29,X_31,X_33,X_17);
end user.s4_1;
#select * from test where value >= 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
#explain select * from test where value >= 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 99 # length
function user.s5_1(A0:int):void;
    X_34:void := querylog.define("explain select * from test where value >= 1;","default_pipe",57);
barrier X_109 := language.dataflow();
    X_19 := bat.new(nil:str);
    X_26 := bat.append(X_19,"sys.test");
    X_21 := bat.new(nil:str);
    X_28 := bat.append(X_21,"value");
    X_22 := bat.new(nil:str);
    X_29 := bat.append(X_22,"int");
    X_23 := bat.new(nil:int);
    X_31 := bat.append(X_23,32);
    X_25 := bat.new(nil:int);
    X_33 := bat.append(X_25,0);
    X_0 := sql.mvc();
    X_56:bat[:int] := sql.bind(X_0,"sys","test","value",0,0,3);
    X_51:bat[:oid] := sql.tid(X_0,"sys","test",0,3);
    X_69 := algebra.thetasubselect(X_56,X_51,A0,">=");
    (X_59:bat[:oid],X_60:bat[:int]) := sql.bind(X_0,"sys","test","value",2,0,3);
    X_72 := algebra.thetasubselect(X_60,nil:bat[:oid],A0,">=");
    X_75 := sql.subdelta(X_69,X_51,X_59,X_72);
    X_78 := sql.projectdelta(X_75,X_56,X_59,X_60);
    X_57:bat[:int] := sql.bind(X_0,"sys","test","value",0,1,3);
    X_53:bat[:oid] := sql.tid(X_0,"sys","test",1,3);
    X_70 := algebra.thetasubselect(X_57,X_53,A0,">=");
    (X_61:bat[:oid],X_62:bat[:int]) := sql.bind(X_0,"sys","test","value",2,1,3);
    X_73 := algebra.thetasubselect(X_62,nil:bat[:oid],A0,">=");
    X_76 := sql.subdelta(X_70,X_53,X_61,X_73);
    X_79 := sql.projectdelta(X_76,X_57,X_61,X_62);
    X_58:bat[:int] := sql.bind(X_0,"sys","test","value",0,2,3);
    X_55:bat[:oid] := sql.tid(X_0,"sys","test",2,3);
    X_71 := algebra.thetasubselect(X_58,X_55,A0,">=");
    (X_63:bat[:oid],X_64:bat[:int]) := sql.bind(X_0,"sys","test","value",2,2,3);
    X_74 := algebra.thetasubselect(X_64,nil:bat[:oid],A0,">=");
    X_10:bat[:int] := sql.bind(X_0,"sys","test","value",1);
    X_46 := algebra.thetasubselect(X_10,X_55,A0,">=");
    X_77 := sql.subdelta(X_71,X_55,X_63,X_74,X_46);
    X_80 := sql.projectdelta(X_77,X_58,X_63,X_64,X_10);
    X_90 := mat.packIncrement(X_78,3);
    X_92 := mat.packIncrement(X_90,X_79);
    X_17 := mat.packIncrement(X_92,X_80);
    language.pass(X_51);
    language.pass(X_56);
    language.pass(X_59);
    language.pass(X_60);
    language.pass(X_53);
    language.pass(X_57);
    language.pass(X_61);
    language.pass(X_62);
    language.pass(nil:bat[:oid]);
    language.pass(X_55);
    language.pass(X_58);
    language.pass(X_63);
    language.pass(X_64);
    language.pass(X_10);
exit X_109;
    sql.resultSet(X_26,X_28,X_29,X_31,X_33,X_17);
end user.s5_1;
#select * from test where value < 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
#explain select * from test where value < 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 98 # length
function user.s6_1(A0:int):void;
    X_34:void := querylog.define("explain select * from test where value < 1;","default_pipe",57);
barrier X_109 := language.dataflow();
    X_19 := bat.new(nil:str);
    X_26 := bat.append(X_19,"sys.test");
    X_21 := bat.new(nil:str);
    X_28 := bat.append(X_21,"value");
    X_22 := bat.new(nil:str);
    X_29 := bat.append(X_22,"int");
    X_23 := bat.new(nil:int);
    X_31 := bat.append(X_23,32);
    X_25 := bat.new(nil:int);
    X_33 := bat.append(X_25,0);
    X_0 := sql.mvc();
    X_56:bat[:int] := sql.bind(X_0,"sys","test","value",0,0,3);
    X_51:bat[:oid] := sql.tid(X_0,"sys","test",0,3);
    X_69 := algebra.thetasubselect(X_56,X_51,A0,"<");
    (X_59:bat[:oid],X_60:bat[:int]) := sql.bind(X_0,"sys","test","value",2,0,3);
    X_72 := algebra.thetasubselect(X_60,nil:bat[:oid],A0,"<");
    X_75 := sql.subdelta(X_69,X_51,X_59,X_72);
    X_78 := sql.projectdelta(X_75,X_56,X_59,X_60);
    X_57:bat[:int] := sql.bind(X_0,"sys","test","value",0,1,3);
    X_53:bat[:oid] := sql.tid(X_0,"sys","test",1,3);
    X_70 := algebra.thetasubselect(X_57,X_53,A0,"<");
    (X_61:bat[:oid],X_62:bat[:int]) := sql.bind(X_0,"sys","test","value",2,1,3);
    X_73 := algebra.thetasubselect(X_62,nil:bat[:oid],A0,"<");
    X_76 := sql.subdelta(X_70,X_53,X_61,X_73);
    X_79 := sql.projectdelta(X_76,X_57,X_61,X_62);
    X_58:bat[:int] := sql.bind(X_0,"sys","test","value",0,2,3);
    X_55:bat[:oid] := sql.tid(X_0,"sys","test",2,3);
    X_71 := algebra.thetasubselect(X_58,X_55,A0,"<");
    (X_63:bat[:oid],X_64:bat[:int]) := sql.bind(X_0,"sys","test","value",2,2,3);
    X_74 := algebra.thetasubselect(X_64,nil:bat[:oid],A0,"<");
    X_10:bat[:int] := sql.bind(X_0,"sys","test","value",1);
    X_46 := algebra.thetasubselect(X_10,X_55,A0,"<");
    X_77 := sql.subdelta(X_71,X_55,X_63,X_74,X_46);
    X_80 := sql.projectdelta(X_77,X_58,X_63,X_64,X_10);
    X_90 := mat.packIncrement(X_78,3);
    X_92 := mat.packIncrement(X_90,X_79);
    X_17 := mat.packIncrement(X_92,X_80);
    language.pass(X_51);
    language.pass(X_56);
    language.pass(X_59);
    language.pass(X_60);
    language.pass(X_53);
    language.pass(X_57);
    language.pass(X_61);
    language.pass(X_62);
    language.pass(nil:bat[:oid]);
    language.pass(X_55);
    language.pass(X_58);
    language.pass(X_63);
    language.pass(X_64);
    language.pass(X_10);
exit X_109;
    sql.resultSet(X_26,X_28,X_29,X_31,X_33,X_17);
end user.s6_1;
#select * from test where value <= 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
#explain select * from test where value <= 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 99 # length
function user.s7_1(A0:int):void;
    X_34:void := querylog.define("explain select * from test where value <= 1;","default_pipe",57);
barrier X_109 := language.dataflow();
    X_19 := bat.new(nil:str);
    X_26 := bat.append(X_19,"sys.test");
    X_21 := bat.new(nil:str);
    X_28 := bat.append(X_21,"value");
    X_22 := bat.new(nil:str);
    X_29 := bat.append(X_22,"int");
    X_23 := bat.new(nil:int);
    X_31 := bat.append(X_23,32);
    X_25 := bat.new(nil:int);
    X_33 := bat.append(X_25,0);
    X_0 := sql.mvc();
    X_56:bat[:int] := sql.bind(X_0,"sys","test","value",0,0,3);
    X_51:bat[:oid] := sql.tid(X_0,"sys","test",0,3);
    X_69 := algebra.thetasubselect(X_56,X_51,A0,"<=");
    (X_59:bat[:oid],X_60:bat[:int]) := sql.bind(X_0,"sys","test","value",2,0,3);
    X_72 := algebra.thetasubselect(X_60,nil:bat[:oid],A0,"<=");
    X_75 := sql.subdelta(X_69,X_51,X_59,X_72);
    X_78 := sql.projectdelta(X_75,X_56,X_59,X_60);
    X_57:bat[:int] := sql.bind(X_0,"sys","test","value",0,1,3);
    X_53:bat[:oid] := sql.tid(X_0,"sys","test",1,3);
    X_70 := algebra.thetasubselect(X_57,X_53,A0,"<=");
    (X_61:bat[:oid],X_62:bat[:int]) := sql.bind(X_0,"sys","test","value",2,1,3);
    X_73 := algebra.thetasubselect(X_62,nil:bat[:oid],A0,"<=");
    X_76 := sql.subdelta(X_70,X_53,X_61,X_73);
    X_79 := sql.projectdelta(X_76,X_57,X_61,X_62);
    X_58:bat[:int] := sql.bind(X_0,"sys","test","value",0,2,3);
    X_55:bat[:oid] := sql.tid(X_0,"sys","test",2,3);
    X_71 := algebra.thetasubselect(X_58,X_55,A0,"<=");
    (X_63:bat[:oid],X_64:bat[:int]) := sql.bind(X_0,"sys","test","value",2,2,3);
    X_74 := algebra.thetasubselect(X_64,nil:bat[:oid],A0,"<=");
    X_10:bat[:int] := sql.bind(X_0,"sys","test","value",1);
    X_46 := algebra.thetasubselect(X_10,X_55,A0,"<=");
    X_77 := sql.subdelta(X_71,X_55,X_63,X_74,X_46);
    X_80 := sql.projectdelta(X_77,X_58,X_63,X_64,X_10);
    X_90 := mat.packIncrement(X_78,3);
    X_92 := mat.packIncrement(X_90,X_79);
    X_17 := mat.packIncrement(X_92,X_80);
    language.pass(X_51);
    language.pass(X_56);
    language.pass(X_59);
    language.pass(X_60);
    language.pass(X_53);
    language.pass(X_57);
    language.pass(X_61);
    language.pass(X_62);
    language.pass(nil:bat[:oid]);
    language.pass(X_55);
    language.pass(X_58);
    language.pass(X_63);
    language.pass(X_64);
    language.pass(X_10);
exit X_109;
    sql.resultSet(X_26,X_28,X_29,X_31,X_33,X_17);
end user.s7_1;
#select * from test where value <> 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
#explain select * from test where value <> 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 99 # length
function user.s8_1(A0:int):void;
    X_35:void := querylog.define("explain select * from test where value <> 1;","default_pipe",57);
barrier X_110 := language.dataflow();
    X_20 := bat.new(nil:str);
    X_27 := bat.append(X_20,"sys.test");
    X_22 := bat.new(nil:str);
    X_29 := bat.append(X_22,"value");
    X_23 := bat.new(nil:str);
    X_30 := bat.append(X_23,"int");
    X_24 := bat.new(nil:int);
    X_32 := bat.append(X_24,32);
    X_26 := bat.new(nil:int);
    X_34 := bat.append(X_26,0);
    X_0 := sql.mvc();
    X_57:bat[:int] := sql.bind(X_0,"sys","test","value",0,0,3);
    X_52:bat[:oid] := sql.tid(X_0,"sys","test",0,3);
    X_70 := algebra.subselect(X_57,X_52,A0,A0,true,true,true);
    (X_60:bat[:oid],X_61:bat[:int]) := sql.bind(X_0,"sys","test","value",2,0,3);
    X_73 := algebra.subselect(X_61,nil:bat[:oid],A0,A0,true,true,true);
    X_76 := sql.subdelta(X_70,X_52,X_60,X_73);
    X_79 := sql.projectdelta(X_76,X_57,X_60,X_61);
    X_58:bat[:int] := sql.bind(X_0,"sys","test","value",0,1,3);
    X_54:bat[:oid] := sql.tid(X_0,"sys","test",1,3);
    X_71 := algebra.subselect(X_58,X_54,A0,A0,true,true,true);
    (X_62:bat[:oid],X_63:bat[:int]) := sql.bind(X_0,"sys","test","value",2,1,3);
    X_74 := algebra.subselect(X_63,nil:bat[:oid],A0,A0,true,true,true);
    X_77 := sql.subdelta(X_71,X_54,X_62,X_74);
    X_80 := sql.projectdelta(X_77,X_58,X_62,X_63);
    X_59:bat[:int] := sql.bind(X_0,"sys","test","value",0,2,3);
    X_56:bat[:oid] := sql.tid(X_0,"sys","test",2,3);
    X_72 := algebra.subselect(X_59,X_56,A0,A0,true,true,true);
    (X_64:bat[:oid],X_65:bat[:int]) := sql.bind(X_0,"sys","test","value",2,2,3);
    X_75 := algebra.subselect(X_65,nil:bat[:oid],A0,A0,true,true,true);
    X_10:bat[:int] := sql.bind(X_0,"sys","test","value",1);
    X_47 := algebra.subselect(X_10,X_56,A0,A0,true,true,true);
    X_78 := sql.subdelta(X_72,X_56,X_64,X_75,X_47);
    X_81 := sql.projectdelta(X_78,X_59,X_64,X_65,X_10);
    X_91 := mat.packIncrement(X_79,3);
    X_93 := mat.packIncrement(X_91,X_80);
    X_18 := mat.packIncrement(X_93,X_81);
    language.pass(X_52);
    language.pass(X_57);
    language.pass(X_60);
    language.pass(X_61);
    language.pass(X_54);
    language.pass(X_58);
    language.pass(X_62);
    language.pass(X_63);
    language.pass(nil:bat[:oid]);
    language.pass(X_56);
    language.pass(X_59);
    language.pass(X_64);
    language.pass(X_65);
    language.pass(X_10);
exit X_110;
    sql.resultSet(X_27,X_29,X_30,X_32,X_34,X_18);
end user.s8_1;
#drop table test;

# 21:57:14 >  
# 21:57:14 >  "Done."
# 21:57:14 >  

