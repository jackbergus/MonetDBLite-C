stdout of test 'useless_casts.Bug-3756` in directory 'sql/test/BugTracker-2015` itself:


# 21:57:13 >  
# 21:57:13 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=33119" "--set" "mapi_usock=/var/tmp/mtest-22263/.s.monetdb.33119" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/rc-monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_BugTracker-2015" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 21:57:13 >  

# MonetDB 5 server v11.21.0
# This is an unreleased version
# Serving database 'mTests_sql_test_BugTracker-2015', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.333 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.nes.nl:33119/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-22263/.s.monetdb.33119
# MonetDB/GIS module loaded
# Start processing logs sql/sql_logs version 52200
# Start reading the write-ahead log 'sql_logs/sql/log.34'
# Finished reading the write-ahead log 'sql_logs/sql/log.34'
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.

# 21:57:14 >  
# 21:57:14 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-22263" "--port=33119"
# 21:57:14 >  

#create table test(value int);
#insert into test values (1), (2), (3);
[ 3	]
#select * from test where value = 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
#explain select * from test where value = 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 104 # length
function user.s8_1():void;
    X_0:void := querylog.define("explain select * from test where value = 1;","sequential_pipe",12:int);
    X_22 := bat.new(nil:str);
    X_28 := bat.new(nil:int);
    X_26 := bat.new(nil:int);
    X_25 := bat.new(nil:str);
    X_24 := bat.new(nil:str);
    X_3 := sql.mvc();
    X_7:bat[:int] := sql.bind(X_3,"sys","test","value",0:int);
    C_4:bat[:oid] := sql.tid(X_3,"sys","test");
    C_18 := algebra.thetasubselect(X_7,C_4,1:int,"==");
    X_20 := algebra.projection(C_18,X_7);
    X_29 := bat.append(X_22,"sys.test");
    X_31 := bat.append(X_24,"value");
    X_32 := bat.append(X_25,"int");
    X_34 := bat.append(X_26,32:int);
    X_36 := bat.append(X_28,0:int);
    sql.resultSet(X_29,X_31,X_32,X_34,X_36,X_20);
end user.s8_1;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=2 usec 
#costmodel            actions= 1 time=2 usec 
#coercion             actions= 0 time=2 usec 
#evaluate             actions= 1 time=14 usec 
#emptybind            actions= 3 time=16 usec 
#pushselect           actions= 2 time=10 usec 
#aliases              actions= 3 time=9 usec 
#mergetable           actions= 0 time=32 usec 
#deadcode             actions= 3 time=8 usec 
#aliases              actions= 0 time=5 usec 
#constants            actions= 4 time=8 usec 
#commonTerms          actions= 0 time=4 usec 
#projectionpath       actions= 0 time=5 usec 
#reorder              actions= 1 time=25 usec 
#deadcode             actions= 0 time=6 usec 
#reduce               actions=31 time=11 usec 
#matpack              actions= 0 time=2 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=3 usec 
#candidates           actions= 1 time=1 usec 
#garbagecollector     actions= 1 time=16 usec 
#total                actions= 1 time=301 usec 
#select * from test where value > 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
#explain select * from test where value > 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 104 # length
function user.s10_1():void;
    X_0:void := querylog.define("explain select * from test where value > 1;","sequential_pipe",12:int);
    X_22 := bat.new(nil:str);
    X_28 := bat.new(nil:int);
    X_26 := bat.new(nil:int);
    X_25 := bat.new(nil:str);
    X_24 := bat.new(nil:str);
    X_3 := sql.mvc();
    X_7:bat[:int] := sql.bind(X_3,"sys","test","value",0:int);
    C_4:bat[:oid] := sql.tid(X_3,"sys","test");
    C_18 := algebra.thetasubselect(X_7,C_4,1:int,">");
    X_20 := algebra.projection(C_18,X_7);
    X_29 := bat.append(X_22,"sys.test");
    X_31 := bat.append(X_24,"value");
    X_32 := bat.append(X_25,"int");
    X_34 := bat.append(X_26,32:int);
    X_36 := bat.append(X_28,0:int);
    sql.resultSet(X_29,X_31,X_32,X_34,X_36,X_20);
end user.s10_1;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=3 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=1 usec 
#evaluate             actions= 1 time=11 usec 
#emptybind            actions= 3 time=13 usec 
#pushselect           actions= 2 time=8 usec 
#aliases              actions= 3 time=6 usec 
#mergetable           actions= 0 time=27 usec 
#deadcode             actions= 3 time=6 usec 
#aliases              actions= 0 time=4 usec 
#constants            actions= 3 time=6 usec 
#commonTerms          actions= 0 time=4 usec 
#projectionpath       actions= 0 time=3 usec 
#reorder              actions= 1 time=22 usec 
#deadcode             actions= 0 time=5 usec 
#reduce               actions=30 time=9 usec 
#matpack              actions= 0 time=2 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=2 usec 
#candidates           actions= 1 time=1 usec 
#garbagecollector     actions= 1 time=13 usec 
#total                actions= 1 time=244 usec 
#select * from test where value >= 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
#explain select * from test where value >= 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 105 # length
function user.s12_1():void;
    X_0:void := querylog.define("explain select * from test where value >= 1;","sequential_pipe",12:int);
    X_22 := bat.new(nil:str);
    X_28 := bat.new(nil:int);
    X_26 := bat.new(nil:int);
    X_25 := bat.new(nil:str);
    X_24 := bat.new(nil:str);
    X_3 := sql.mvc();
    X_7:bat[:int] := sql.bind(X_3,"sys","test","value",0:int);
    C_4:bat[:oid] := sql.tid(X_3,"sys","test");
    C_18 := algebra.thetasubselect(X_7,C_4,1:int,">=");
    X_20 := algebra.projection(C_18,X_7);
    X_29 := bat.append(X_22,"sys.test");
    X_31 := bat.append(X_24,"value");
    X_32 := bat.append(X_25,"int");
    X_34 := bat.append(X_26,32:int);
    X_36 := bat.append(X_28,0:int);
    sql.resultSet(X_29,X_31,X_32,X_34,X_36,X_20);
end user.s12_1;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=3 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=2 usec 
#evaluate             actions= 1 time=11 usec 
#emptybind            actions= 3 time=13 usec 
#pushselect           actions= 2 time=8 usec 
#aliases              actions= 3 time=6 usec 
#mergetable           actions= 0 time=27 usec 
#deadcode             actions= 3 time=7 usec 
#aliases              actions= 0 time=4 usec 
#constants            actions= 3 time=6 usec 
#commonTerms          actions= 0 time=4 usec 
#projectionpath       actions= 0 time=4 usec 
#reorder              actions= 1 time=21 usec 
#deadcode             actions= 0 time=5 usec 
#reduce               actions=30 time=9 usec 
#matpack              actions= 0 time=2 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=2 usec 
#candidates           actions= 1 time=0 usec 
#garbagecollector     actions= 1 time=11 usec 
#total                actions= 1 time=232 usec 
#select * from test where value < 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
#explain select * from test where value < 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 104 # length
function user.s14_1():void;
    X_0:void := querylog.define("explain select * from test where value < 1;","sequential_pipe",12:int);
    X_22 := bat.new(nil:str);
    X_28 := bat.new(nil:int);
    X_26 := bat.new(nil:int);
    X_25 := bat.new(nil:str);
    X_24 := bat.new(nil:str);
    X_3 := sql.mvc();
    X_7:bat[:int] := sql.bind(X_3,"sys","test","value",0:int);
    C_4:bat[:oid] := sql.tid(X_3,"sys","test");
    C_18 := algebra.thetasubselect(X_7,C_4,1:int,"<");
    X_20 := algebra.projection(C_18,X_7);
    X_29 := bat.append(X_22,"sys.test");
    X_31 := bat.append(X_24,"value");
    X_32 := bat.append(X_25,"int");
    X_34 := bat.append(X_26,32:int);
    X_36 := bat.append(X_28,0:int);
    sql.resultSet(X_29,X_31,X_32,X_34,X_36,X_20);
end user.s14_1;
#inline               actions= 0 time=0 usec 
#remap                actions= 0 time=3 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=1 usec 
#evaluate             actions= 1 time=11 usec 
#emptybind            actions= 3 time=12 usec 
#pushselect           actions= 2 time=8 usec 
#aliases              actions= 3 time=6 usec 
#mergetable           actions= 0 time=26 usec 
#deadcode             actions= 3 time=7 usec 
#aliases              actions= 0 time=4 usec 
#constants            actions= 3 time=7 usec 
#commonTerms          actions= 0 time=4 usec 
#projectionpath       actions= 0 time=3 usec 
#reorder              actions= 1 time=20 usec 
#deadcode             actions= 0 time=5 usec 
#reduce               actions=30 time=8 usec 
#matpack              actions= 0 time=2 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=2 usec 
#candidates           actions= 1 time=0 usec 
#garbagecollector     actions= 1 time=12 usec 
#total                actions= 1 time=229 usec 
#select * from test where value <= 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
#explain select * from test where value <= 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 105 # length
function user.s16_1():void;
    X_0:void := querylog.define("explain select * from test where value <= 1;","sequential_pipe",12:int);
    X_22 := bat.new(nil:str);
    X_28 := bat.new(nil:int);
    X_26 := bat.new(nil:int);
    X_25 := bat.new(nil:str);
    X_24 := bat.new(nil:str);
    X_3 := sql.mvc();
    X_7:bat[:int] := sql.bind(X_3,"sys","test","value",0:int);
    C_4:bat[:oid] := sql.tid(X_3,"sys","test");
    C_18 := algebra.thetasubselect(X_7,C_4,1:int,"<=");
    X_20 := algebra.projection(C_18,X_7);
    X_29 := bat.append(X_22,"sys.test");
    X_31 := bat.append(X_24,"value");
    X_32 := bat.append(X_25,"int");
    X_34 := bat.append(X_26,32:int);
    X_36 := bat.append(X_28,0:int);
    sql.resultSet(X_29,X_31,X_32,X_34,X_36,X_20);
end user.s16_1;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=2 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=1 usec 
#evaluate             actions= 1 time=10 usec 
#emptybind            actions= 3 time=11 usec 
#pushselect           actions= 2 time=8 usec 
#aliases              actions= 3 time=5 usec 
#mergetable           actions= 0 time=23 usec 
#deadcode             actions= 3 time=6 usec 
#aliases              actions= 0 time=4 usec 
#constants            actions= 3 time=6 usec 
#commonTerms          actions= 0 time=3 usec 
#projectionpath       actions= 0 time=3 usec 
#reorder              actions= 1 time=18 usec 
#deadcode             actions= 0 time=4 usec 
#reduce               actions=30 time=7 usec 
#matpack              actions= 0 time=1 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=1 usec 
#candidates           actions= 1 time=1 usec 
#garbagecollector     actions= 1 time=11 usec 
#total                actions= 1 time=207 usec 
#select * from test where value <> 12345678900; # value > INT_MAX
% sys.test # table_name
% value # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
#explain select * from test where value <> 1; # value < INT_MAX
% .explain # table_name
% mal # name
% clob # type
% 105 # length
function user.s18_1():void;
    X_0:void := querylog.define("explain select * from test where value <> 1;","sequential_pipe",12:int);
    X_22 := bat.new(nil:str);
    X_28 := bat.new(nil:int);
    X_26 := bat.new(nil:int);
    X_25 := bat.new(nil:str);
    X_24 := bat.new(nil:str);
    X_3 := sql.mvc();
    X_7:bat[:int] := sql.bind(X_3,"sys","test","value",0:int);
    C_4:bat[:oid] := sql.tid(X_3,"sys","test");
    C_18 := algebra.thetasubselect(X_7,C_4,1:int,"!=");
    X_20 := algebra.projection(C_18,X_7);
    X_29 := bat.append(X_22,"sys.test");
    X_31 := bat.append(X_24,"value");
    X_32 := bat.append(X_25,"int");
    X_34 := bat.append(X_26,32:int);
    X_36 := bat.append(X_28,0:int);
    sql.resultSet(X_29,X_31,X_32,X_34,X_36,X_20);
end user.s18_1;
#inline               actions= 0 time=1 usec 
#remap                actions= 0 time=2 usec 
#costmodel            actions= 1 time=1 usec 
#coercion             actions= 0 time=1 usec 
#evaluate             actions= 1 time=10 usec 
#emptybind            actions= 3 time=12 usec 
#pushselect           actions= 2 time=8 usec 
#aliases              actions= 3 time=5 usec 
#mergetable           actions= 0 time=24 usec 
#deadcode             actions= 3 time=7 usec 
#aliases              actions= 0 time=3 usec 
#constants            actions= 4 time=6 usec 
#commonTerms          actions= 0 time=3 usec 
#projectionpath       actions= 0 time=3 usec 
#reorder              actions= 1 time=18 usec 
#deadcode             actions= 0 time=4 usec 
#reduce               actions=31 time=8 usec 
#matpack              actions= 0 time=2 usec 
#multiplex            actions= 0 time=2 usec 
#profiler             actions= 1 time=2 usec 
#candidates           actions= 1 time=1 usec 
#garbagecollector     actions= 1 time=11 usec 
#total                actions= 1 time=209 usec 
#drop table test;

# 21:57:14 >  
# 21:57:14 >  "Done."
# 21:57:14 >  

