stdout of test 'numeric` in directory 'sql/test/pg_regress` itself:


# 17:11:18 >  
# 17:11:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38959" "--set" "mapi_usock=/var/tmp/mtest-1142/.s.monetdb.38959" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress" "--set" "mal_listing=0"
# 17:11:18 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_sql_test_pg_regress', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.356 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2014 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://uwakai.da.cwi.nl:38959/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-1142/.s.monetdb.38959
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded

Ready.

# 18:21:37 >  
# 18:21:37 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-28920" "--port=37899"
# 18:21:37 >  

#CREATE TABLE num_data (id integer, val numeric(18,10));
#CREATE TABLE num_exp_add (id1 integer, id2 integer, expected numeric(18,10));
#CREATE TABLE num_exp_sub (id1 integer, id2 integer, expected numeric(18,10));
#CREATE TABLE num_exp_div (id1 integer, id2 integer, expected numeric(18,10));
#CREATE TABLE num_exp_mul (id1 integer, id2 integer, expected numeric(18,10));
#CREATE TABLE num_exp_sqrt (id integer, expected numeric(18,10));
#CREATE TABLE num_exp_ln (id integer, expected numeric(18,10));
#CREATE TABLE num_exp_log10 (id integer, expected numeric(18,10));
#CREATE TABLE num_exp_power_10_ln (id integer, expected numeric(18,10));
#CREATE TABLE num_result (id1 integer, id2 integer, result numeric(18,10));
#START TRANSACTION;
#START TRANSACTION;
#START TRANSACTION;
#START TRANSACTION;
#START TRANSACTION;
#START TRANSACTION;
#CREATE UNIQUE INDEX num_exp_add_idx ON num_exp_add (id1, id2);
#CREATE UNIQUE INDEX num_exp_sub_idx ON num_exp_sub (id1, id2);
#CREATE UNIQUE INDEX num_exp_div_idx ON num_exp_div (id1, id2);
#CREATE UNIQUE INDEX num_exp_mul_idx ON num_exp_mul (id1, id2);
#CREATE UNIQUE INDEX num_exp_sqrt_idx ON num_exp_sqrt (id);
#CREATE UNIQUE INDEX num_exp_ln_idx ON num_exp_ln (id);
#CREATE UNIQUE INDEX num_exp_log10_idx ON num_exp_log10 (id);
#CREATE UNIQUE INDEX num_exp_power_10_ln_idx ON num_exp_power_10_ln (id);
#DELETE FROM num_result;
[ 0	]
#INSERT INTO num_result SELECT t1.id, t2.id, t1.val + t2.val
#    FROM num_data t1, num_data t2;
[ 0	]
#SELECT t1.id1, t1.id2, t1.result, t2.expected
#    FROM num_result t1, num_exp_add t2
#    WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2
#    AND t1.result <> t2.expected;
% sys.t1,	sys.t1,	sys.t1,	sys.t2 # table_name
% id1,	id2,	result,	expected # name
% int,	int,	decimal,	decimal # type
% 1,	1,	20,	20 # length
#DELETE FROM num_result;
[ 0	]
#INSERT INTO num_result SELECT t1.id, t2.id, round(t1.val + t2.val, 10)
#    FROM num_data t1, num_data t2;
[ 0	]
#SELECT t1.id1, t1.id2, t1.result, round(t2.expected, 10) as expected
#    FROM num_result t1, num_exp_add t2
#    WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2
#    AND t1.result <> round(t2.expected, 10);
% sys.t1,	sys.t1,	sys.t1,	sys.L # table_name
% id1,	id2,	result,	expected # name
% int,	int,	decimal,	decimal # type
% 1,	1,	20,	10 # length
#DELETE FROM num_result;
[ 0	]
#INSERT INTO num_result SELECT t1.id, t2.id, t1.val - t2.val
#    FROM num_data t1, num_data t2;
[ 0	]
#SELECT t1.id1, t1.id2, t1.result, t2.expected
#    FROM num_result t1, num_exp_sub t2
#    WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2
#    AND t1.result <> t2.expected;
% sys.t1,	sys.t1,	sys.t1,	sys.t2 # table_name
% id1,	id2,	result,	expected # name
% int,	int,	decimal,	decimal # type
% 1,	1,	20,	20 # length
#DELETE FROM num_result;
[ 0	]
#INSERT INTO num_result SELECT t1.id, t2.id, round(t1.val - t2.val, 40)
#    FROM num_data t1, num_data t2;
[ 0	]
#SELECT t1.id1, t1.id2, t1.result, round(t2.expected, 40)
#    FROM num_result t1, num_exp_sub t2
#    WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2
#    AND t1.result <> round(t2.expected, 40);
% sys.t1,	sys.t1,	sys.t1,	sys.L # table_name
% id1,	id2,	result,	round_expected # name
% int,	int,	decimal,	decimal # type
% 1,	1,	20,	10 # length
#DELETE FROM num_result;
[ 0	]
#INSERT INTO num_result SELECT t1.id, t2.id, t1.val * t2.val
#    FROM num_data t1, num_data t2;
[ 0	]
#SELECT t1.id1, t1.id2, t1.result, t2.expected
#    FROM num_result t1, num_exp_mul t2
#    WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2
#    AND t1.result <> t2.expected;
% sys.t1,	sys.t1,	sys.t1,	sys.t2 # table_name
% id1,	id2,	result,	expected # name
% int,	int,	decimal,	decimal # type
% 1,	1,	20,	20 # length
#DELETE FROM num_result;
[ 0	]
#INSERT INTO num_result SELECT t1.id, t2.id, round(t1.val * t2.val, 30)
#    FROM num_data t1, num_data t2;
[ 0	]
#SELECT t1.id1, t1.id2, t1.result, round(t2.expected, 30) as expected
#    FROM num_result t1, num_exp_mul t2
#    WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2
#    AND t1.result <> round(t2.expected, 30);
% sys.t1,	sys.t1,	sys.t1,	sys.L # table_name
% id1,	id2,	result,	expected # name
% int,	int,	decimal,	decimal # type
% 1,	1,	20,	10 # length
#DELETE FROM num_result;
[ 0	]
#INSERT INTO num_result SELECT t1.id, t2.id, t1.val / t2.val
#    FROM num_data t1, num_data t2
#    WHERE t2.val <> '0.0';
[ 0	]
#SELECT t1.id1, t1.id2, t1.result, t2.expected
#    FROM num_result t1, num_exp_div t2
#    WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2
#    AND t1.result <> t2.expected;
% sys.t1,	sys.t1,	sys.t1,	sys.t2 # table_name
% id1,	id2,	result,	expected # name
% int,	int,	decimal,	decimal # type
% 1,	1,	20,	20 # length
#DELETE FROM num_result;
[ 0	]
#INSERT INTO num_result SELECT t1.id, t2.id, round(t1.val / t2.val, 80)
#    FROM num_data t1, num_data t2
#    WHERE t2.val <> '0.0';
[ 0	]
#SELECT t1.id1, t1.id2, t1.result, round(t2.expected, 80) as expected
#    FROM num_result t1, num_exp_div t2
#    WHERE t1.id1 = t2.id1 AND t1.id2 = t2.id2
#    AND t1.result <> round(t2.expected, 80);
% sys.t1,	sys.t1,	sys.t1,	sys.L # table_name
% id1,	id2,	result,	expected # name
% int,	int,	decimal,	decimal # type
% 1,	1,	20,	10 # length
#DELETE FROM num_result;
[ 0	]
#INSERT INTO num_result SELECT id, 0, SQRT(ABS(val))
#    FROM num_data;
[ 0	]
#SELECT t1.id1, t1.result, t2.expected
#    FROM num_result t1, num_exp_sqrt t2
#    WHERE t1.id1 = t2.id
#    AND t1.result <> t2.expected;
% sys.t1,	sys.t1,	sys.t2 # table_name
% id1,	result,	expected # name
% int,	decimal,	decimal # type
% 1,	20,	20 # length
#DELETE FROM num_result;
[ 0	]
#INSERT INTO num_result SELECT id, 0, LOG(ABS(val))
#    FROM num_data
#    WHERE val <> '0.0';
[ 0	]
#SELECT t1.id1, t1.result, t2.expected
#    FROM num_result t1, num_exp_ln t2
#    WHERE t1.id1 = t2.id
#    AND t1.result <> t2.expected;
% sys.t1,	sys.t1,	sys.t2 # table_name
% id1,	result,	expected # name
% int,	decimal,	decimal # type
% 1,	20,	20 # length
#DELETE FROM num_result;
[ 0	]
#INSERT INTO num_result SELECT id, 0, LOG10(ABS(val))
#    FROM num_data
#    WHERE val <> '0.0';
[ 0	]
#SELECT t1.id1, t1.result, t2.expected
#    FROM num_result t1, num_exp_log10 t2
#    WHERE t1.id1 = t2.id
#    AND t1.result <> t2.expected;
% sys.t1,	sys.t1,	sys.t2 # table_name
% id1,	result,	expected # name
% int,	decimal,	decimal # type
% 1,	20,	20 # length
#DELETE FROM num_result;
[ 0	]
#INSERT INTO num_result SELECT id, 0, POWER(cast('10.0' as numeric(3,0)), LOG(ABS(round(val,20))))
#    FROM num_data
#    WHERE val <> '0.0';
[ 0	]
#SELECT t1.id1, t1.result, t2.expected
#    FROM num_result t1, num_exp_power_10_ln t2
#    WHERE t1.id1 = t2.id
#    AND t1.result <> t2.expected;
% sys.t1,	sys.t1,	sys.t2 # table_name
% id1,	result,	expected # name
% int,	decimal,	decimal # type
% 1,	20,	20 # length
#SELECT AVG(val) FROM num_data;
% sys.L1 # table_name
% L1 # name
% double # type
% 24 # length
[ NULL	]
#CREATE TABLE fract_only (id int, val numeric(4,4));
#INSERT INTO fract_only VALUES (1, '0.0');
[ 1	]
#INSERT INTO fract_only VALUES (2, '0.1');
[ 1	]
#INSERT INTO fract_only VALUES (5, '0.99994');
[ 1	]
#INSERT INTO fract_only VALUES (6, '0.99995');  -- should fail
[ 1	]
#INSERT INTO fract_only VALUES (7, '0.00001');
[ 1	]
#INSERT INTO fract_only VALUES (8, '0.00017');
[ 1	]
#SELECT * FROM fract_only;
% sys.fract_only,	sys.fract_only # table_name
% id,	val # name
% int,	decimal # type
% 1,	6 # length
[ 1,	0.0000	]
[ 2,	0.1000	]
[ 5,	0.9999	]
[ 6,	1.0000	]
[ 7,	0.0000	]
[ 8,	0.0002	]
#DROP TABLE fract_only;
#CREATE TABLE ceil_floor_round (a numeric);
#INSERT INTO ceil_floor_round VALUES ('-5.5');
[ 1	]
#INSERT INTO ceil_floor_round VALUES ('-5.499999');
[ 1	]
#INSERT INTO ceil_floor_round VALUES ('9.5');
[ 1	]
#INSERT INTO ceil_floor_round VALUES ('9.4999999');
[ 1	]
#INSERT INTO ceil_floor_round VALUES ('0.0');
[ 1	]
#INSERT INTO ceil_floor_round VALUES ('0.0000001');
[ 1	]
#INSERT INTO ceil_floor_round VALUES ('-0.000001');
[ 1	]
#DROP TABLE ceil_floor_round;
#CREATE TABLE width_bucket_test (operand numeric);
#DROP TABLE width_bucket_test;
#CREATE TABLE num_input_test (n1 numeric);
#INSERT INTO num_input_test(n1) VALUES ('5. 0   ');
[ 1	]
#SELECT * FROM num_input_test;
% sys.num_input_test # table_name
% n1 # name
% decimal # type
% 2 # length
[ 3	]

# 18:11:09 >  
# 18:11:09 >  "Done."
# 18:11:09 >  

