stdout of test 'string` in directory 'sql/test/pg_regress` itself:


# 17:11:18 >  
# 17:11:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38959" "--set" "mapi_usock=/var/tmp/mtest-1142/.s.monetdb.38959" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress" "--set" "mal_listing=0"
# 17:11:18 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_sql_test_pg_regress', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.356 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2014 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://uwakai.da.cwi.nl:38959/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-1142/.s.monetdb.38959
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded

Ready.

# 17:11:19 >  
# 17:11:19 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-1142" "--port=38959"
# 17:11:19 >  

= ! Correct / expected output still needs to be provided / verified / approved ! =

#--
#-- string
#--
#--
#-- string logic
#--	     o
#-- 3	  o--|X
#--	  |  o|
#-- 2	+-+-+ |
#--	| | | |
#-- 1	| o-+-o
#--	|   |
#-- 0	+---+
#--
#--	0 1 2 3
#--
#-- boxes are specified by two points, given by four floats x1,y1,x2,y2
#CREATE TABLE BOX_TBL (f1 string);
#INSERT INTO BOX_TBL (f1) VALUES ('(2.0,2.0,0.0,0.0)');
[ 1 ]
#INSERT INTO BOX_TBL (f1) VALUES ('(1.0,1.0,3.0,3.0)');
[ 1 ]
#-- degenerate cases where the string is a line or a string 
#-- note that lines and points boxes all have zero area 
#INSERT INTO BOX_TBL (f1) VALUES ('(2.5, 2.5, 2.5,3.5)');
[ 1 ]
#INSERT INTO BOX_TBL (f1) VALUES ('(3.0, 3.0,3.0,3.0)');
[ 1 ]
#-- badly formatted string inputs 
#
#
#SELECT '' AS four, BOX_TBL.*;
% sys.L0,	sys.L0 # table_name
% four,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	"(2,2),(0,0)" ]
[ "",	"(3,3),(1,1)" ]
[ "",	"(2.5,3.5),(2.5,2.5)" ]
[ "",	"(3,3),(3,3)" ]

#SELECT '' AS four, b.*, area(b.f1) as barea
#   FROM BOX_TBL b;
% sys.L0,	sys.L0,	sys.L0 # table_name
% four,	f1,	barea # name
% ?,	?,	? # type
% ?,	?,	? # length
[ "",	"(2,2),(0,0)",	4 ]
[ "",	"(3,3),(1,1)",	4 ]
[ "",	"(2.5,3.5),(2.5,2.5)",	0 ]
[ "",	"(3,3),(3,3)",	0 ]

#-- overlap 
#SELECT '' AS three, b.f1
#   FROM BOX_TBL b  
#   WHERE b.f1 && string '(2.5,2.5,1.0,1.0)';
% sys.L0,	sys.L0 # table_name
% three,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	"(2,2),(0,0)" ]
[ "",	"(3,3),(1,1)" ]
[ "",	"(2.5,3.5),(2.5,2.5)" ]

#-- left-or-overlap (x only) 
#SELECT '' AS two, b1.*
#   FROM BOX_TBL b1
#   WHERE b1.f1 &< string '(2.0,2.0,2.5,2.5)';
% sys.L0,	sys.L0 # table_name
% two,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	"(2,2),(0,0)" ]
[ "",	"(2.5,3.5),(2.5,2.5)" ]

#-- right-or-overlap (x only) 
#SELECT '' AS two, b1.*
#   FROM BOX_TBL b1
#   WHERE b1.f1 &> string '(2.0,2.0,2.5,2.5)';
% sys.L0,	sys.L0 # table_name
% two,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	"(2.5,3.5),(2.5,2.5)" ]
[ "",	"(3,3),(3,3)" ]

#-- left of 
#SELECT '' AS two, b.f1
#   FROM BOX_TBL b
#   WHERE b.f1 << string '(3.0,3.0,5.0,5.0)';
% sys.L0,	sys.L0 # table_name
% two,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	"(2,2),(0,0)" ]
[ "",	"(2.5,3.5),(2.5,2.5)" ]

#-- area <= 
#SELECT '' AS four, b.f1
#   FROM BOX_TBL b
#   WHERE b.f1 <= string '(3.0,3.0,5.0,5.0)';
% sys.L0,	sys.L0 # table_name
% four,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	"(2,2),(0,0)" ]
[ "",	"(3,3),(1,1)" ]
[ "",	"(2.5,3.5),(2.5,2.5)" ]
[ "",	"(3,3),(3,3)" ]

#-- area < 
#SELECT '' AS two, b.f1
#   FROM BOX_TBL b
#   WHERE b.f1 < string '(3.0,3.0,5.0,5.0)';
% sys.L0,	sys.L0 # table_name
% two,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	"(2.5,3.5),(2.5,2.5)" ]
[ "",	"(3,3),(3,3)" ]

#-- area = 
#SELECT '' AS two, b.f1
#   FROM BOX_TBL b
#   WHERE b.f1 = string '(3.0,3.0,5.0,5.0)';
% sys.L0,	sys.L0 # table_name
% two,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	"(2,2),(0,0)" ]
[ "",	"(3,3),(1,1)" ]

#-- area > 
#SELECT '' AS two, b.f1
#   FROM BOX_TBL b				-- zero area 
#   WHERE b.f1 > string '(3.5,3.0,4.5,3.0)';	
% sys.L0,	sys.L0 # table_name
% two,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	"(2,2),(0,0)" ]
[ "",	"(3,3),(1,1)" ]

#-- area >= 
#SELECT '' AS four, b.f1
#   FROM BOX_TBL b				-- zero area 
#   WHERE b.f1 >= string '(3.5,3.0,4.5,3.0)';
% sys.L0,	sys.L0 # table_name
% four,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	"(2,2),(0,0)" ]
[ "",	"(3,3),(1,1)" ]
[ "",	"(2.5,3.5),(2.5,2.5)" ]
[ "",	"(3,3),(3,3)" ]

#-- right of 
#SELECT '' AS two, b.f1
#   FROM BOX_TBL b
#   WHERE string '(3.0,3.0,5.0,5.0)' >> b.f1;
% sys.L0,	sys.L0 # table_name
% two,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	"(2,2),(0,0)" ]
[ "",	"(2.5,3.5),(2.5,2.5)" ]

#-- contained in 
#SELECT '' AS three, b.f1
#   FROM BOX_TBL b
#   WHERE b.f1 @ string '(0,0,3,3)';
% sys.L0,	sys.L0 # table_name
% three,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	"(2,2),(0,0)" ]
[ "",	"(3,3),(1,1)" ]
[ "",	"(3,3),(3,3)" ]

#-- contains 
#SELECT '' AS three, b.f1
#   FROM BOX_TBL b
#   WHERE string '(0,0,3,3)' ~ b.f1;
% sys.L0,	sys.L0 # table_name
% three,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	"(2,2),(0,0)" ]
[ "",	"(3,3),(1,1)" ]
[ "",	"(3,3),(3,3)" ]

#-- string equality 
#SELECT '' AS one, b.f1
#   FROM BOX_TBL b
#   WHERE string '(1,1,3,3)' ~= b.f1;
% sys.L0,	sys.L0 # table_name
% one,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	"(3,3),(1,1)" ]

#-- center of string, left unary operator 
#SELECT '' AS four, @@(b1.f1) AS p
#   FROM BOX_TBL b1;
% sys.L0,	sys.L0 # table_name
% four,	p # name
% ?,	? # type
% ?,	? # length
[ "",	"(1,1)" ]
[ "",	"(2,2)" ]
[ "",	"(2.5,3)" ]
[ "",	"(3,3)" ]

#-- wholly-contained 
#SELECT '' AS one, b1.*, b2.*
#   FROM BOX_TBL b1, BOX_TBL b2 
#   WHERE b1.f1 ~ b2.f1 and not b1.f1 ~= b2.f1;
% sys.L0,	sys.L0,	sys.L0 # table_name
% one,	f1,	f1 # name
% ?,	?,	? # type
% ?,	?,	? # length
[ "",	"(3,3),(1,1)",	"(3,3),(3,3)" ]

#SELECT '' AS four, height(f1), width(f1) FROM BOX_TBL;
% sys.L0,	sys.L0,	sys.L0 # table_name
% four,	height,	width # name
% ?,	?,	? # type
% ?,	?,	? # length
[ "",	2,	2 ]
[ "",	2,	2 ]
[ "",	1,	0 ]
[ "",	0,	0 ]


= ! Correct / expected output still needs to be provided / verified / approved ! =

# 17:11:19 >  
# 17:11:19 >  "Done."
# 17:11:19 >  

