stdout of test 'arrays` in directory 'sql/test/pg_regress` itself:


# 17:11:18 >  
# 17:11:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38959" "--set" "mapi_usock=/var/tmp/mtest-1142/.s.monetdb.38959" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress" "--set" "mal_listing=0"
# 17:11:18 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_sql_test_pg_regress', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.356 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2014 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://uwakai.da.cwi.nl:38959/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-1142/.s.monetdb.38959
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded

Ready.

# 17:11:19 >  
# 17:11:19 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-1142" "--port=38959"
# 17:11:19 >  

= ! Correct / expected output still needs to be provided / verified / approved ! =

#--
#-- ARRAYS
#--
#CREATE TABLE arrtest (
#	a 			smallint[],
#	b 			integer[][][],
#	c 			name[],
#	d			text[][], 
#	e 			double[],
#	f			char(5)[],
#	g			varchar(5)[]
#);
#--
#-- only the 'e' array is 0-based, the others are 1-based.
#--
#INSERT INTO arrtest (a[1:5], b[1:1][1:2][1:2], c, d, f, g)
#   VALUES ('{1,2,3,4,5}', '{{{0,0},{1,2}}}', '{}', '{}', '{}', '{}');
[ 1 ]
#UPDATE arrtest SET e[0] = '1.1';
#UPDATE arrtest SET e[1] = '2.2';
#
#INSERT INTO arrtest (a, b[1:2][1:2], c, d, e, f, g)
#   VALUES ('{11,12,23}', '{{3,4},{4,5}}', '{"foobar"}', 
#           '{{"elt1", "elt2"}}', '{"3.4", "6.7"}',
#           '{"abc","abcde"}', '{"abc","abcde"}');
[ 1 ]
#INSERT INTO arrtest (a, b[1:2], c, d[1:2])
#   VALUES ('{}', '{3,4}', '{foo,bar}', '{bar,foo}');
[ 1 ]
#SELECT * FROM arrtest;
% sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% a,	b,	c,	d,	e,	f,	g # name
% ?,	?,	?,	?,	?,	?,	? # type
% ?,	?,	?,	?,	?,	?,	? # length
[ "{1,2,3,4,5}",	"{{{0,0},{1,2}}}",	"{}",	"{}",	"[0:1]={1.1,2.2}",	"{}",	"{}" ]
[ "{11,12,23}",	"{{3,4},{4,5}}",	"{foobar}",	"{{elt1,elt2}}",	"{3.4,6.7}",	"{"abc  ",abcde}",	"{abc,abcde}" ]
[ "{}",	"{3,4}",	"{foo,bar}",	"{bar,foo}",	"",	"",	"" ]

#SELECT arrtest.a[1],
#          arrtest.b[1][1][1],
#          arrtest.c[1],
#          arrtest.d[1][1], 
#          arrtest.e[0]
#   FROM arrtest;
% sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% a,	b,	c,	d,	e # name
% ?,	?,	?,	?,	? # type
% ?,	?,	?,	?,	? # length
[ 1,	0,	"",	"",	1.1 ]
[ 11,	"",	"foobar",	"elt1",	"" ]
[ "",	"",	"foo",	"",	"" ]

#SELECT a[1], b[1][1][1], c[1], d[1][1], e[0]
#   FROM arrtest;
% sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% a,	b,	c,	d,	e # name
% ?,	?,	?,	?,	? # type
% ?,	?,	?,	?,	? # length
[ 1,	0,	"",	"",	1.1 ]
[ 11,	"",	"foobar",	"elt1",	"" ]
[ "",	"",	"foo",	"",	"" ]

#SELECT a[1:3],
#          b[1:1][1:2][1:2],
#          c[1:2], 
#          d[1:1][1:2]
#   FROM arrtest;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% a,	b,	c,	d # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ "{1,2,3}",	"{{{0,0},{1,2}}}",	"",	"" ]
[ "{11,12,23}",	"",	"{foobar}",	"{{elt1,elt2}}" ]
[ "",	"",	"{foo,bar}",	"" ]

#SELECT array_dims(a) AS a,array_dims(b) AS b,array_dims(c) AS c
#   FROM arrtest;
% sys.L0,	sys.L0,	sys.L0 # table_name
% a,	b,	c # name
% ?,	?,	? # type
% ?,	?,	? # length
[ "[1:5]",	"[1:1][1:2][1:2]",	"" ]
[ "[1:3]",	"[1:2][1:2]",	"[1:1]" ]
[ "",	"[1:2]",	"[1:2]" ]

#-- returns nothing 
#SELECT *
#   FROM arrtest
#   WHERE a[1] < 5 and 
#         c = '{"foobar"}'::_name;
% sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% a,	b,	c,	d,	e,	f,	g # name
% ?,	?,	?,	?,	?,	?,	? # type
% ?,	?,	?,	?,	?,	?,	? # length

#UPDATE arrtest
#  SET a[1:2] = '{16,25}'
#  WHERE NOT a = '{}'::_int2;
#UPDATE arrtest
#  SET b[1:1][1:1][1:2] = '{113, 117}',
#      b[1:1][1:2][2:2] = '{142, 147}'
#  WHERE array_dims(b) = '[1:1][1:2][1:2]';
#UPDATE arrtest
#  SET c[2:2] = '{"new_word"}'
#  WHERE array_dims(c) is not null;
#SELECT a,b,c FROM arrtest;
% sys.L0,	sys.L0,	sys.L0 # table_name
% a,	b,	c # name
% ?,	?,	? # type
% ?,	?,	? # length
[ "{16,25,3,4,5}",	"{{{113,142},{1,147}}}",	"{}" ]
[ "{}",	"{3,4}",	"{foo,new_word}" ]
[ "{16,25,23}",	"{{3,4},{4,5}}",	"{foobar,new_word}" ]

#SELECT a[1:3],
#          b[1:1][1:2][1:2],
#          c[1:2], 
#          d[1:1][2:2]
#   FROM arrtest;
% sys.L0,	sys.L0,	sys.L0,	sys.L0 # table_name
% a,	b,	c,	d # name
% ?,	?,	?,	? # type
% ?,	?,	?,	? # length
[ "{16,25,3}",	"{{{113,142},{1,147}}}",	"",	"" ]
[ "",	"",	"{foo,new_word}",	"" ]
[ "{16,25,23}",	"",	"{foobar,new_word}",	"{{elt2}}" ]

#--
#-- array expressions and operators
#--
#-- table creation and INSERTs
#CREATE TEMP TABLE arrtest2 (i integer ARRAY[4], f double[], n numeric[], t text[], d timestamp[]);
#INSERT INTO arrtest2 VALUES(
#  ARRAY[[[113,142],[1,147]]],
#  ARRAY[1.1,1.2,1.3]::double[],
#  ARRAY[1.1,1.2,1.3],
#  ARRAY[[['aaa','aab'],['aba','abb'],['aca','acb']],[['baa','bab'],['bba','bbb'],['bca','bcb']]],
#  ARRAY['19620326','19931223','19970117']::timestamp[]
#);
[ 1 ]
#-- some more test data
#CREATE TEMP TABLE arrtest_f (f0 int, f1 text, f2 double);
#insert into arrtest_f values(1,'cat1',1.21);
[ 1 ]
#insert into arrtest_f values(2,'cat1',1.24);
[ 1 ]
#insert into arrtest_f values(3,'cat1',1.18);
[ 1 ]
#insert into arrtest_f values(4,'cat1',1.26);
[ 1 ]
#insert into arrtest_f values(5,'cat1',1.15);
[ 1 ]
#insert into arrtest_f values(6,'cat2',1.15);
[ 1 ]
#insert into arrtest_f values(7,'cat2',1.26);
[ 1 ]
#insert into arrtest_f values(8,'cat2',1.32);
[ 1 ]
#insert into arrtest_f values(9,'cat2',1.30);
[ 1 ]
#CREATE TEMP TABLE arrtest_i (f0 int, f1 text, f2 int);
#insert into arrtest_i values(1,'cat1',21);
[ 1 ]
#insert into arrtest_i values(2,'cat1',24);
[ 1 ]
#insert into arrtest_i values(3,'cat1',18);
[ 1 ]
#insert into arrtest_i values(4,'cat1',26);
[ 1 ]
#insert into arrtest_i values(5,'cat1',15);
[ 1 ]
#insert into arrtest_i values(6,'cat2',15);
[ 1 ]
#insert into arrtest_i values(7,'cat2',26);
[ 1 ]
#insert into arrtest_i values(8,'cat2',32);
[ 1 ]
#insert into arrtest_i values(9,'cat2',30);
[ 1 ]
#-- expressions
#SELECT t.f[1][3][1] AS "131", t.f[2][2][1] AS "221" FROM (
#  SELECT ARRAY[[[111,112],[121,122],[131,132]],[[211,212],[221,122],[231,232]]] AS f
#) AS t;
% sys.L0,	sys.L0 # table_name
% 131,	221 # name
% ?,	? # type
% ?,	? # length
[ 131,	221 ]

#SELECT ARRAY[[[[[['hello'],['world']]]]]];
% sys.L0 # table_name
% array # name
% ? # type
% ? # length
[ "{{{{{{hello},{world}}}}}}" ]

#SELECT ARRAY[ARRAY['hello'],ARRAY['world']];
% sys.L0 # table_name
% array # name
% ? # type
% ? # length
[ "{{hello},{world}}" ]

#SELECT ARRAY(select f2 from arrtest_f order by f2) AS "ARRAY";
% sys.L0 # table_name
% ARRAY # name
% ? # type
% ? # length
[ "{1.15,1.15,1.18,1.21,1.24,1.26,1.26,1.3,1.32}" ]

#-- functions
#SELECT array_append(array[42], 6) AS "{42,6}";
% sys.L0 # table_name
% {42,6} # name
% ? # type
% ? # length
[ "{42,6}" ]

#SELECT array_prepend(6, array[42]) AS "{6,42}";
% sys.L0 # table_name
% {6,42} # name
% ? # type
% ? # length
[ "[0:1]={6,42}" ]

#SELECT array_cat(ARRAY[1,2], ARRAY[3,4]) AS "{1,2,3,4}";
% sys.L0 # table_name
% {1,2,3,4} # name
% ? # type
% ? # length
[ "{1,2,3,4}" ]

#SELECT array_cat(ARRAY[1,2], ARRAY[[3,4],[5,6]]) AS "{{1,2},{3,4},{5,6}}";
% sys.L0 # table_name
% {{1,2},{3,4},{5,6}} # name
% ? # type
% ? # length
[ "[0:2][1:2]={{1,2},{3,4},{5,6}}" ]

#SELECT array_cat(ARRAY[[3,4],[5,6]], ARRAY[1,2]) AS "{{3,4},{5,6},{1,2}}";
% sys.L0 # table_name
% {{3,4},{5,6},{1,2}} # name
% ? # type
% ? # length
[ "{{3,4},{5,6},{1,2}}" ]

#-- operators
#SELECT a FROM arrtest WHERE b = ARRAY[[[113,142],[1,147]]];
% sys.L0 # table_name
% a # name
% ? # type
% ? # length
[ "{16,25,3,4,5}" ]

#SELECT NOT ARRAY[1.1,1.2,1.3] = ARRAY[1.1,1.2,1.3] AS "FALSE";
% sys.L0 # table_name
% FALSE # name
% ? # type
% ? # length
[ "f" ]

#SELECT ARRAY[1,2] || 3 AS "{1,2,3}";
% sys.L0 # table_name
% {1,2,3} # name
% ? # type
% ? # length
[ "{1,2,3}" ]

#SELECT 0 || ARRAY[1,2] AS "{0,1,2}";
% sys.L0 # table_name
% {0,1,2} # name
% ? # type
% ? # length
[ "[0:2]={0,1,2}" ]

#SELECT ARRAY[1,2] || ARRAY[3,4] AS "{1,2,3,4}";
% sys.L0 # table_name
% {1,2,3,4} # name
% ? # type
% ? # length
[ "{1,2,3,4}" ]

#SELECT ARRAY[[['hello','world']]] || ARRAY[[['happy','birthday']]] AS "ARRAY";
% sys.L0 # table_name
% ARRAY # name
% ? # type
% ? # length
[ "{{{hello,world}},{{happy,birthday}}}" ]

#SELECT ARRAY[[1,2],[3,4]] || ARRAY[5,6] AS "{{1,2},{3,4},{5,6}}";
% sys.L0 # table_name
% {{1,2},{3,4},{5,6}} # name
% ? # type
% ? # length
[ "{{1,2},{3,4},{5,6}}" ]

#SELECT ARRAY[0,0] || ARRAY[1,1] || ARRAY[2,2] AS "{0,0,1,1,2,2}";
% sys.L0 # table_name
% {0,0,1,1,2,2} # name
% ? # type
% ? # length
[ "{0,0,1,1,2,2}" ]

#SELECT 0 || ARRAY[1,2] || 3 AS "{0,1,2,3}";
% sys.L0 # table_name
% {0,1,2,3} # name
% ? # type
% ? # length
[ "[0:3]={0,1,2,3}" ]

#-- array casts
#SELECT ARRAY[1,2,3]::text[]::int[]::double[] AS "{1,2,3}";
% sys.L0 # table_name
% {1,2,3} # name
% ? # type
% ? # length
[ "{1,2,3}" ]

#SELECT ARRAY[1,2,3]::text[]::int[]::double[] is of (double[]) as "TRUE";
% sys.L0 # table_name
% TRUE # name
% ? # type
% ? # length
[ "t" ]

#SELECT ARRAY[['a','bc'],['def','hijk']]::text[]::varchar[] AS "{{a,bc},{def,hijk}}";
% sys.L0 # table_name
% {{a,bc},{def,hijk}} # name
% ? # type
% ? # length
[ "{{a,bc},{def,hijk}}" ]

#SELECT ARRAY[['a','bc'],['def','hijk']]::text[]::varchar[] is of (varchar[]) as "TRUE";
% sys.L0 # table_name
% TRUE # name
% ? # type
% ? # length
[ "t" ]

#SELECT CAST(ARRAY[[[[[['a','bb','ccc']]]]]] as text[]) as "{{{{{{a,bb,ccc}}}}}}";
% sys.L0 # table_name
% {{{{{{a,bb,ccc}}}}}} # name
% ? # type
% ? # length
[ "{{{{{{a,bb,ccc}}}}}}" ]

#-- scalar op any/all (array)
#select 33 = any ('{1,2,3}');
% sys.L0 # table_name
% ?column? # name
% ? # type
% ? # length
[ "f" ]

#select 33 = any ('{1,2,33}');
% sys.L0 # table_name
% ?column? # name
% ? # type
% ? # length
[ "t" ]

#select 33 = all ('{1,2,33}');
% sys.L0 # table_name
% ?column? # name
% ? # type
% ? # length
[ "f" ]

#select 33 >= all ('{1,2,33}');
% sys.L0 # table_name
% ?column? # name
% ? # type
% ? # length
[ "t" ]

#-- boundary cases
#select null::int >= all ('{1,2,33}');
% sys.L0 # table_name
% ?column? # name
% ? # type
% ? # length
[ "" ]

#select null::int >= all ('{}');
% sys.L0 # table_name
% ?column? # name
% ? # type
% ? # length
[ "t" ]

#select null::int >= any ('{}');
% sys.L0 # table_name
% ?column? # name
% ? # type
% ? # length
[ "f" ]

#-- cross-datatype
#select 33.4 = any (array[1,2,3]);
% sys.L0 # table_name
% ?column? # name
% ? # type
% ? # length
[ "f" ]

#select 33.4 > all (array[1,2,3]);
% sys.L0 # table_name
% ?column? # name
% ? # type
% ? # length
[ "t" ]

#-- errors
#
#
#-- test indexes on arrays
#create temp table arr_tbl (f1 int[] unique);
NOTICE:  CREATE TABLE / UNIQUE will create implicit index "arr_tbl_f1_key" for table "arr_tbl"
#insert into arr_tbl values ('{1,2,3}');
[ 1 ]
#insert into arr_tbl values ('{1,2}');
[ 1 ]
#-- failure expected:
#
#insert into arr_tbl values ('{2,3,4}');
[ 1 ]
#insert into arr_tbl values ('{1,5,3}');
[ 1 ]
#insert into arr_tbl values ('{1,2,10}');
[ 1 ]
set enable_seqscan to off;
#select * from arr_tbl where f1 > '{1,2,3}' and f1 <= '{1,5,3}';
% sys.L0 # table_name
% f1 # name
% ? # type
% ? # length
[ "{1,2,10}" ]
[ "{1,5,3}" ]

#-- note: if above select doesn't produce the expected tuple order,
#-- then you didn't get an indexscan plan, and something is busted.
#-- test [not] (like|ilike) (any|all) (...)
#select 'foo' like any (array['%a', '%o']); -- t
% sys.L0 # table_name
% ?column? # name
% ? # type
% ? # length
[ "t" ]

#select 'foo' like any (array['%a', '%b']); -- f
% sys.L0 # table_name
% ?column? # name
% ? # type
% ? # length
[ "f" ]

#select 'foo' like all (array['f%', '%o']); -- t
% sys.L0 # table_name
% ?column? # name
% ? # type
% ? # length
[ "t" ]

#select 'foo' like all (array['f%', '%b']); -- f
% sys.L0 # table_name
% ?column? # name
% ? # type
% ? # length
[ "f" ]

#select 'foo' not like any (array['%a', '%b']); -- t
% sys.L0 # table_name
% ?column? # name
% ? # type
% ? # length
[ "t" ]

#select 'foo' not like all (array['%a', '%o']); -- f
% sys.L0 # table_name
% ?column? # name
% ? # type
% ? # length
[ "f" ]

#select 'foo' ilike any (array['%A', '%O']); -- t
% sys.L0 # table_name
% ?column? # name
% ? # type
% ? # length
[ "t" ]

#select 'foo' ilike all (array['F%', '%O']); -- t
% sys.L0 # table_name
% ?column? # name
% ? # type
% ? # length
[ "t" ]

#--
#-- General array parser tests
#--
#-- none of the following should be accepted
#
#
#
#
#
#
#-- none of the above should be accepted
#-- all of the following should be accepted
#select '{}'::text[];
% sys.L0 # table_name
% text # name
% ? # type
% ? # length
[ "{}" ]

#select '{{{1,2,3,4},{2,3,4,5}},{{3,4,5,6},{4,5,6,7}}}'::text[];
% sys.L0 # table_name
% text # name
% ? # type
% ? # length
[ "{{{1,2,3,4},{2,3,4,5}},{{3,4,5,6},{4,5,6,7}}}" ]

#select '{0 second  ,0 second}'::interval[];
% sys.L0 # table_name
% interval # name
% ? # type
% ? # length
[ "{"@ 0","@ 0"}" ]

#select '{ { "," } , { 3 } }'::text[];
% sys.L0 # table_name
% text # name
% ? # type
% ? # length
[ "{{","},{3}}" ]

#select '  {   {  "  0 second  "   ,  0 second  }   }'::text[];
% sys.L0 # table_name
% text # name
% ? # type
% ? # length
[ "{{"  0 second  ","0 second"}}" ]

#select '{
#           0 second,
#           @ 1 hour @ 42 minutes @ 20 seconds
#         }'::interval[];
% sys.L0 # table_name
% interval # name
% ? # type
% ? # length
[ "{"@ 0","@ 1 hour 42 mins 20 secs"}" ]

#-- all of the above should be accepted

= ! Correct / expected output still needs to be provided / verified / approved ! =

# 17:11:19 >  
# 17:11:19 >  "Done."
# 17:11:19 >  

