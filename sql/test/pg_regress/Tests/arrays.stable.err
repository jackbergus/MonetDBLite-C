stderr of test 'arrays` in directory 'sql/test/pg_regress` itself:


# 17:11:18 >  
# 17:11:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38959" "--set" "mapi_usock=/var/tmp/mtest-1142/.s.monetdb.38959" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress" "--set" "mal_listing=0"
# 17:11:18 >  

# builtin opt 	gdk_dbpath = /ufs/dinther/INSTALL/var/monetdb5/dbfarm/demo
# builtin opt 	gdk_debug = 0
# builtin opt 	gdk_vmtrim = no
# builtin opt 	monet_prompt = >
# builtin opt 	monet_daemon = no
# builtin opt 	mapi_port = 50000
# builtin opt 	mapi_open = false
# builtin opt 	mapi_autosense = false
# builtin opt 	sql_optimizer = default_pipe
# builtin opt 	sql_debug = 0
# cmdline opt 	gdk_nr_threads = 0
# cmdline opt 	mapi_open = true
# cmdline opt 	mapi_port = 38959
# cmdline opt 	mapi_usock = /var/tmp/mtest-1142/.s.monetdb.38959
# cmdline opt 	monet_prompt = 
# cmdline opt 	mal_listing = 2
# cmdline opt 	gdk_dbpath = /ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress
# cmdline opt 	mal_listing = 0
# cmdline opt 	gdk_debug = 536870922

# 17:11:19 >  
# 17:11:19 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-1142" "--port=38959"
# 17:11:19 >  

#--
#-- ARRAYS
#--
#--
#-- only the 'e' array is 0-based, the others are 1-based.
#--
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = INSERT INTO arrtest (f)
   VALUES ('{"too long"}');
ERROR = value too long for type character(5)
#-- returns nothing 
#--
#-- array expressions and operators
#--
#-- table creation and INSERTs
#-- some more test data
#-- expressions
#-- functions
#-- operators
#-- array casts
#-- scalar op any/all (array)
#-- boundary cases
#-- cross-datatype
#-- errors
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = select 33 * any ('{1,2,3}');
ERROR = op ANY/ALL (array) requires operator to yield boolean
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = select 33 * any (44);
ERROR = op ANY/ALL (array) requires array on right side
#-- test indexes on arrays
#-- failure expected:
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = insert into arr_tbl values ('{1,2,3}');
ERROR = duplicate key violates unique constraint "arr_tbl_f1_key"
#-- note: if above select doesn't produce the expected tuple order,
#-- then you didn't get an indexscan plan, and something is busted.
#-- test [not] (like|ilike) (any|all) (...)
#--
#-- General array parser tests
#--
#-- none of the following should be accepted
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = select '{{1,{2}},{2,3}}'::text[];
ERROR = malformed array literal: "{{1,{2}},{2,3}}"
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = select '{{},{}}'::text[];
ERROR = malformed array literal: "{{},{}}"
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = select '{{1,2},\\{2,3}}'::text[];
ERROR = malformed array literal: "{{1,2},\{2,3}}"
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = select '{{"1 2" x},{3}}'::text[];
ERROR = malformed array literal: "{{"1 2" x},{3}}"
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = select '{}}'::text[];
ERROR = malformed array literal: "{}}"
MAPI = (monetdb) /var/tmp/mtest-12345/.s.monetdb.54321
QUERY = select '{ }}'::text[];
ERROR = malformed array literal: "{ }}"
#-- none of the above should be accepted
#-- all of the following should be accepted
#-- all of the above should be accepted

# 17:11:19 >  
# 17:11:19 >  "Done."
# 17:11:19 >  

