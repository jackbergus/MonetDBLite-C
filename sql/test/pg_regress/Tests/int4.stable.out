stdout of test 'integer` in directory 'sql/test/pg_regress` itself:


# 17:11:18 >  
# 17:11:18 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38959" "--set" "mapi_usock=/var/tmp/mtest-1142/.s.monetdb.38959" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress" "--set" "mal_listing=0"
# 17:11:18 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_sql_test_pg_regress', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.356 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2014 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://uwakai.da.cwi.nl:38959/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-1142/.s.monetdb.38959
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded

Ready.

# 17:11:19 >  
# 17:11:19 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-1142" "--port=38959"
# 17:11:19 >  

= ! Correct / expected output still needs to be provided / verified / approved ! =

#--
#-- integer
#-- WARNING: integer operators never check for over/underflow!
#-- Some of these answers are consequently numerically incorrect.
#--
#CREATE TABLE INT4_TBL(f1 integer);
#INSERT INTO INT4_TBL(f1) VALUES ('   0  ');
[ 1 ]
#INSERT INTO INT4_TBL(f1) VALUES ('123456     ');
[ 1 ]
#INSERT INTO INT4_TBL(f1) VALUES ('    -123456');
[ 1 ]
#
#-- largest and smallest values
#INSERT INTO INT4_TBL(f1) VALUES ('2147483647');
[ 1 ]
#INSERT INTO INT4_TBL(f1) VALUES ('-2147483647');
[ 1 ]
#-- bad input values -- should give errors
#
#
#
#
#
#
#
#SELECT '' AS five, INT4_TBL.*;
% sys.L0,	sys.L0 # table_name
% five,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	0 ]
[ "",	123456 ]
[ "",	-123456 ]
[ "",	2147483647 ]
[ "",	-2147483647 ]

#SELECT '' AS four, i.* FROM INT4_TBL i WHERE i.f1 <> smallint '0';
% sys.L0,	sys.L0 # table_name
% four,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	123456 ]
[ "",	-123456 ]
[ "",	2147483647 ]
[ "",	-2147483647 ]

#SELECT '' AS four, i.* FROM INT4_TBL i WHERE i.f1 <> integer '0';
% sys.L0,	sys.L0 # table_name
% four,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	123456 ]
[ "",	-123456 ]
[ "",	2147483647 ]
[ "",	-2147483647 ]

#SELECT '' AS one, i.* FROM INT4_TBL i WHERE i.f1 = smallint '0';
% sys.L0,	sys.L0 # table_name
% one,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	0 ]

#SELECT '' AS one, i.* FROM INT4_TBL i WHERE i.f1 = integer '0';
% sys.L0,	sys.L0 # table_name
% one,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	0 ]

#SELECT '' AS two, i.* FROM INT4_TBL i WHERE i.f1 < smallint '0';
% sys.L0,	sys.L0 # table_name
% two,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	-123456 ]
[ "",	-2147483647 ]

#SELECT '' AS two, i.* FROM INT4_TBL i WHERE i.f1 < integer '0';
% sys.L0,	sys.L0 # table_name
% two,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	-123456 ]
[ "",	-2147483647 ]

#SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 <= smallint '0';
% sys.L0,	sys.L0 # table_name
% three,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	0 ]
[ "",	-123456 ]
[ "",	-2147483647 ]

#SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 <= integer '0';
% sys.L0,	sys.L0 # table_name
% three,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	0 ]
[ "",	-123456 ]
[ "",	-2147483647 ]

#SELECT '' AS two, i.* FROM INT4_TBL i WHERE i.f1 > smallint '0';
% sys.L0,	sys.L0 # table_name
% two,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	123456 ]
[ "",	2147483647 ]

#SELECT '' AS two, i.* FROM INT4_TBL i WHERE i.f1 > integer '0';
% sys.L0,	sys.L0 # table_name
% two,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	123456 ]
[ "",	2147483647 ]

#SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 >= smallint '0';
% sys.L0,	sys.L0 # table_name
% three,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	0 ]
[ "",	123456 ]
[ "",	2147483647 ]

#SELECT '' AS three, i.* FROM INT4_TBL i WHERE i.f1 >= integer '0';
% sys.L0,	sys.L0 # table_name
% three,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	0 ]
[ "",	123456 ]
[ "",	2147483647 ]

#-- positive odds
#SELECT '' AS one, i.* FROM INT4_TBL i WHERE (i.f1 % smallint '2') = smallint '1';
% sys.L0,	sys.L0 # table_name
% one,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	2147483647 ]

#-- any evens
#SELECT '' AS three, i.* FROM INT4_TBL i WHERE (i.f1 % integer '2') = smallint '0';
% sys.L0,	sys.L0 # table_name
% three,	f1 # name
% ?,	? # type
% ?,	? # length
[ "",	0 ]
[ "",	123456 ]
[ "",	-123456 ]

#
#SELECT '' AS five, i.f1, i.f1 * smallint '2' AS x FROM INT4_TBL i
#WHERE abs(f1) < 1073741824;
% sys.L0,	sys.L0,	sys.L0 # table_name
% five,	f1,	x # name
% ?,	?,	? # type
% ?,	?,	? # length
[ "",	0,	0 ]
[ "",	123456,	246912 ]
[ "",	-123456,	-246912 ]

#
#SELECT '' AS five, i.f1, i.f1 * integer '2' AS x FROM INT4_TBL i
#WHERE abs(f1) < 1073741824;
% sys.L0,	sys.L0,	sys.L0 # table_name
% five,	f1,	x # name
% ?,	?,	? # type
% ?,	?,	? # length
[ "",	0,	0 ]
[ "",	123456,	246912 ]
[ "",	-123456,	-246912 ]

#
#SELECT '' AS five, i.f1, i.f1 + smallint '2' AS x FROM INT4_TBL i
#WHERE f1 < 2147483646;
% sys.L0,	sys.L0,	sys.L0 # table_name
% five,	f1,	x # name
% ?,	?,	? # type
% ?,	?,	? # length
[ "",	0,	2 ]
[ "",	123456,	123458 ]
[ "",	-123456,	-123454 ]
[ "",	-2147483647,	-2147483645 ]

#
#SELECT '' AS five, i.f1, i.f1 + integer '2' AS x FROM INT4_TBL i
#WHERE f1 < 2147483646;
% sys.L0,	sys.L0,	sys.L0 # table_name
% five,	f1,	x # name
% ?,	?,	? # type
% ?,	?,	? # length
[ "",	0,	2 ]
[ "",	123456,	123458 ]
[ "",	-123456,	-123454 ]
[ "",	-2147483647,	-2147483645 ]

#
#SELECT '' AS five, i.f1, i.f1 - smallint '2' AS x FROM INT4_TBL i
#WHERE f1 > -2147483647;
% sys.L0,	sys.L0,	sys.L0 # table_name
% five,	f1,	x # name
% ?,	?,	? # type
% ?,	?,	? # length
[ "",	0,	-2 ]
[ "",	123456,	123454 ]
[ "",	-123456,	-123458 ]
[ "",	2147483647,	2147483645 ]

#
#SELECT '' AS five, i.f1, i.f1 - integer '2' AS x FROM INT4_TBL i
#WHERE f1 > -2147483647;
% sys.L0,	sys.L0,	sys.L0 # table_name
% five,	f1,	x # name
% ?,	?,	? # type
% ?,	?,	? # length
[ "",	0,	-2 ]
[ "",	123456,	123454 ]
[ "",	-123456,	-123458 ]
[ "",	2147483647,	2147483645 ]

#SELECT '' AS five, i.f1, i.f1 / smallint '2' AS x FROM INT4_TBL i;
% sys.L0,	sys.L0,	sys.L0 # table_name
% five,	f1,	x # name
% ?,	?,	? # type
% ?,	?,	? # length
[ "",	0,	0 ]
[ "",	123456,	61728 ]
[ "",	-123456,	-61728 ]
[ "",	2147483647,	1073741823 ]
[ "",	-2147483647,	-1073741823 ]

#SELECT '' AS five, i.f1, i.f1 / integer '2' AS x FROM INT4_TBL i;
% sys.L0,	sys.L0,	sys.L0 # table_name
% five,	f1,	x # name
% ?,	?,	? # type
% ?,	?,	? # length
[ "",	0,	0 ]
[ "",	123456,	61728 ]
[ "",	-123456,	-61728 ]
[ "",	2147483647,	1073741823 ]
[ "",	-2147483647,	-1073741823 ]

#--
#-- more complex expressions
#--
#-- variations on unary minus parsing
#SELECT -2+3 AS one;
% sys.L0 # table_name
% one # name
% ? # type
% ? # length
[ 1 ]

#SELECT 4-2 AS two;
% sys.L0 # table_name
% two # name
% ? # type
% ? # length
[ 2 ]

#SELECT 2- -1 AS three;
% sys.L0 # table_name
% three # name
% ? # type
% ? # length
[ 3 ]

#SELECT 2 - -2 AS four;
% sys.L0 # table_name
% four # name
% ? # type
% ? # length
[ 4 ]

#SELECT smallint '2' * smallint '2' = smallint '16' / smallint '4' AS true;
% sys.L0 # table_name
% true # name
% ? # type
% ? # length
[ "t" ]

#SELECT integer '2' * smallint '2' = smallint '16' / integer '4' AS true;
% sys.L0 # table_name
% true # name
% ? # type
% ? # length
[ "t" ]

#SELECT smallint '2' * integer '2' = integer '16' / smallint '4' AS true;
% sys.L0 # table_name
% true # name
% ? # type
% ? # length
[ "t" ]

#SELECT integer '1000' < integer '999' AS false;
% sys.L0 # table_name
% false # name
% ? # type
% ? # length
[ "f" ]

#SELECT 4! AS twenty_four;
% sys.L0 # table_name
% twenty_four # name
% ? # type
% ? # length
[ 24 ]

#SELECT !!3 AS six;
% sys.L0 # table_name
% six # name
% ? # type
% ? # length
[ 6 ]

#SELECT 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 AS ten;
% sys.L0 # table_name
% ten # name
% ? # type
% ? # length
[ 10 ]

#SELECT 2 + 2 / 2 AS three;
% sys.L0 # table_name
% three # name
% ? # type
% ? # length
[ 3 ]

#SELECT (2 + 2) / 2 AS two;
% sys.L0 # table_name
% two # name
% ? # type
% ? # length
[ 2 ]


= ! Correct / expected output still needs to be provided / verified / approved ! =

# 17:11:19 >  
# 17:11:19 >  "Done."
# 17:11:19 >  

