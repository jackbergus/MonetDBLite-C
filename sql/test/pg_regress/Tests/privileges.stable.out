stdout of test 'privileges` in directory 'sql/test/pg_regress` itself:


# 17:11:04 >  
# 17:11:04 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38959" "--set" "mapi_usock=/var/tmp/mtest-1142/.s.monetdb.38959" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/dinther/INSTALL/var/MonetDB/mTests_sql_test_pg_regress" "--set" "mal_listing=0"
# 17:11:04 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_sql_test_pg_regress', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.356 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2014 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://uwakai.da.cwi.nl:38959/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-1142/.s.monetdb.38959
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded

Ready.

# 17:11:04 >  
# 17:11:04 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-1142" "--port=38959"
# 17:11:04 >  

#SET SESSION AUTHORIZATION regressuser1;
#SELECT session_user, current_user;
% .L1,	.L1 # table_name
% L1,	single_value # name
% varchar,	varchar # type
% 12,	12 # length
[ "regressuser1",	"regressuser1"	]
#CREATE TABLE atest1 ( a int, b text );
#SELECT * FROM atest1;
% sys.atest1,	sys.atest1 # table_name
% a,	b # name
% int,	clob # type
% 1,	0 # length
#INSERT INTO atest1 VALUES (1, 'one');
[ 1	]
#DELETE FROM atest1;
[ 1	]
#UPDATE atest1 SET a = 1 WHERE b = 'blech';
[ 0	]
#REVOKE ALL ON atest1 FROM PUBLIC;
#SELECT * FROM atest1;
% sys.atest1,	sys.atest1 # table_name
% a,	b # name
% int,	clob # type
% 1,	0 # length
#SELECT * FROM atest1;
% sys.atest1,	sys.atest1 # table_name
% a,	b # name
% int,	clob # type
% 1,	0 # length
#CREATE TABLE atest2 (col1 varchar(10), col2 boolean);
#SET SESSION AUTHORIZATION regressuser2;
#SELECT session_user, current_user;
% .L1,	.L1 # table_name
% L1,	single_value # name
% varchar,	varchar # type
% 12,	12 # length
[ "regressuser2",	"regressuser2"	]
#SELECT * FROM atest1; -- ok
% sys.atest1,	sys.atest1 # table_name
% a,	b # name
% int,	clob # type
% 1,	0 # length
#SELECT * FROM atest2; -- ok
% sys.atest2,	sys.atest2 # table_name
% col1,	col2 # name
% varchar,	boolean # type
% 0,	5 # length
#INSERT INTO atest1 VALUES (2, 'two'); -- ok
[ 1	]
#INSERT INTO atest2 VALUES ('foo', true); -- fail
[ 1	]
#INSERT INTO atest1 SELECT 1, b FROM atest1; -- ok
[ 1	]
#UPDATE atest1 SET a = 1 WHERE a = 2; -- ok
[ 1	]
#UPDATE atest2 SET col2 = NOT col2; -- fail
[ 1	]
#DELETE FROM atest2; -- fail
[ 1	]
#GRANT ALL ON atest1 TO PUBLIC; -- fail
#SELECT * FROM atest1 WHERE ( b IN ( SELECT col1 FROM atest2 ) );
% sys.atest1,	sys.atest1 # table_name
% a,	b # name
% int,	clob # type
% 1,	0 # length
#SELECT * FROM atest2 WHERE ( col1 IN ( SELECT b FROM atest1 ) );
% sys.atest2,	sys.atest2 # table_name
% col1,	col2 # name
% varchar,	boolean # type
% 0,	5 # length
#SET SESSION AUTHORIZATION regressuser3;
#SELECT session_user, current_user;
% .L1,	.L1 # table_name
% L1,	single_value # name
% varchar,	varchar # type
% 12,	12 # length
[ "regressuser3",	"regressuser3"	]
#SELECT * FROM atest1; -- ok
% sys.atest1,	sys.atest1 # table_name
% a,	b # name
% int,	clob # type
% 1,	3 # length
[ 1,	"two"	]
[ 1,	"two"	]
#SELECT * FROM atest2; -- fail
% sys.atest2,	sys.atest2 # table_name
% col1,	col2 # name
% varchar,	boolean # type
% 0,	5 # length
#INSERT INTO atest1 VALUES (2, 'two'); -- fail
[ 1	]
#INSERT INTO atest2 VALUES ('foo', true); -- fail
[ 1	]
#INSERT INTO atest1 SELECT 1, b FROM atest1; -- fail
[ 3	]
#UPDATE atest1 SET a = 1 WHERE a = 2; -- fail
[ 1	]
#UPDATE atest2 SET col2 = NULL; -- ok
[ 1	]
#UPDATE atest2 SET col2 = NOT col2; -- fails; requires SELECT on atest2
[ 1	]
#DELETE FROM atest2; -- fail
[ 1	]
#SELECT * FROM atest1 WHERE ( b IN ( SELECT col1 FROM atest2 ) );
% sys.atest1,	sys.atest1 # table_name
% a,	b # name
% int,	clob # type
% 1,	0 # length
#SELECT * FROM atest2 WHERE ( col1 IN ( SELECT b FROM atest1 ) );
% sys.atest2,	sys.atest2 # table_name
% col1,	col2 # name
% varchar,	boolean # type
% 0,	5 # length
#SET SESSION AUTHORIZATION regressuser4;
#SET SESSION AUTHORIZATION regressuser3;
#CREATE TABLE atest3 (one int, two int, three int);
#SET SESSION AUTHORIZATION regressuser1;
#SELECT * FROM atest3; -- fail
% sys.atest3,	sys.atest3,	sys.atest3 # table_name
% one,	two,	three # name
% int,	int,	int # type
% 1,	1,	1 # length
#DELETE FROM atest3; -- ok
[ 0	]
#SET SESSION AUTHORIZATION regressuser3;
#CREATE VIEW atestv1 AS SELECT * FROM atest1; -- ok
#CREATE VIEW atestv2 AS SELECT * FROM atest2;
#CREATE VIEW atestv3 AS SELECT * FROM atest3; -- ok
#SELECT * FROM atestv1; -- ok
% sys.atestv1,	sys.atestv1 # table_name
% a,	b # name
% int,	clob # type
% 1,	3 # length
[ 1,	"two"	]
[ 1,	"two"	]
[ 1,	"two"	]
[ 1,	"two"	]
[ 1,	"two"	]
[ 1,	"two"	]
#SELECT * FROM atestv2; -- fail
% sys.atestv2,	sys.atestv2 # table_name
% col1,	col2 # name
% varchar,	boolean # type
% 0,	5 # length
#SET SESSION AUTHORIZATION regressuser4;
#SELECT * FROM atestv1; -- ok
% sys.atestv1,	sys.atestv1 # table_name
% a,	b # name
% int,	clob # type
% 1,	3 # length
[ 1,	"two"	]
[ 1,	"two"	]
[ 1,	"two"	]
[ 1,	"two"	]
[ 1,	"two"	]
[ 1,	"two"	]
#SELECT * FROM atestv2; -- fail
% sys.atestv2,	sys.atestv2 # table_name
% col1,	col2 # name
% varchar,	boolean # type
% 0,	5 # length
#SELECT * FROM atestv3; -- ok
% sys.atestv3,	sys.atestv3,	sys.atestv3 # table_name
% one,	two,	three # name
% int,	int,	int # type
% 1,	1,	1 # length
#CREATE VIEW atestv4 AS SELECT * FROM atestv3; -- nested view
#SELECT * FROM atestv4; -- ok
% sys.atestv4,	sys.atestv4,	sys.atestv4 # table_name
% one,	two,	three # name
% int,	int,	int # type
% 1,	1,	1 # length
#SET SESSION AUTHORIZATION regressuser2;
#SELECT * FROM atestv3; -- fail
% sys.atestv3,	sys.atestv3,	sys.atestv3 # table_name
% one,	two,	three # name
% int,	int,	int # type
% 1,	1,	1 # length
#SELECT * FROM atestv4; -- ok (even though regressuser2 cannot access underlying atestv3)
% sys.atestv4,	sys.atestv4,	sys.atestv4 # table_name
% one,	two,	three # name
% int,	int,	int # type
% 1,	1,	1 # length
#SELECT * FROM atest2; -- ok
% sys.atest2,	sys.atest2 # table_name
% col1,	col2 # name
% varchar,	boolean # type
% 0,	5 # length
#SELECT * FROM atestv2; -- fail (even though regressuser2 can access underlying atest2)
% sys.atestv2,	sys.atestv2 # table_name
% col1,	col2 # name
% varchar,	boolean # type
% 0,	5 # length
\?      - show this message
\<file  - read input from file
\>file  - save response in file, or stdout if no file is given
\|cmd   - pipe result to process, or stop when no command is given
\h      - show the readline history
\D table- dumps the table, or the complete database if none given.
\d[Stvsfn]+ [obj] - list database objects, or describe if obj given
\A      - enable auto commit
\a      - disable auto commit
\e      - echo the query in sql formatting mode
\f      - format using a built-in renderer {csv,tab,raw,sql,xml}
\w#     - set maximal page width (-1=unlimited, 0=terminal width, >0=limit to num)
\r#     - set maximum rows per page (-1=raw)
\L file - save client/server interaction
\X      - trace mclient code
\q      - terminate session
#SET SESSION AUTHORIZATION regressuser1;
#SET SESSION AUTHORIZATION regressuser2;
#SET SESSION AUTHORIZATION regressuser3;
#SELECT col1 FROM atest2 WHERE col2 = true; -- fail
% sys.atest2 # table_name
% col1 # name
% varchar # type
% 0 # length
#SET SESSION AUTHORIZATION regressuser4;
\?      - show this message
\<file  - read input from file
\>file  - save response in file, or stdout if no file is given
\|cmd   - pipe result to process, or stop when no command is given
\h      - show the readline history
\D table- dumps the table, or the complete database if none given.
\d[Stvsfn]+ [obj] - list database objects, or describe if obj given
\A      - enable auto commit
\a      - disable auto commit
\e      - echo the query in sql formatting mode
\f      - format using a built-in renderer {csv,tab,raw,sql,xml}
\w#     - set maximal page width (-1=unlimited, 0=terminal width, >0=limit to num)
\r#     - set maximum rows per page (-1=raw)
\L file - save client/server interaction
\X      - trace mclient code
\q      - terminate session
\?      - show this message
\<file  - read input from file
\>file  - save response in file, or stdout if no file is given
\|cmd   - pipe result to process, or stop when no command is given
\h      - show the readline history
\D table- dumps the table, or the complete database if none given.
\d[Stvsfn]+ [obj] - list database objects, or describe if obj given
\A      - enable auto commit
\a      - disable auto commit
\e      - echo the query in sql formatting mode
\f      - format using a built-in renderer {csv,tab,raw,sql,xml}
\w#     - set maximal page width (-1=unlimited, 0=terminal width, >0=limit to num)
\r#     - set maximum rows per page (-1=raw)
\L file - save client/server interaction
\X      - trace mclient code
\q      - terminate session
#SET SESSION AUTHORIZATION regressuser3;
#SET SESSION AUTHORIZATION regressuser1;
#CREATE TABLE atest4 (a int);
#SET SESSION AUTHORIZATION regressuser2;
#SET SESSION AUTHORIZATION regressuser1;
\?      - show this message
\<file  - read input from file
\>file  - save response in file, or stdout if no file is given
\|cmd   - pipe result to process, or stop when no command is given
\h      - show the readline history
\D table- dumps the table, or the complete database if none given.
\d[Stvsfn]+ [obj] - list database objects, or describe if obj given
\A      - enable auto commit
\a      - disable auto commit
\e      - echo the query in sql formatting mode
\f      - format using a built-in renderer {csv,tab,raw,sql,xml}
\w#     - set maximal page width (-1=unlimited, 0=terminal width, >0=limit to num)
\r#     - set maximum rows per page (-1=raw)
\L file - save client/server interaction
\X      - trace mclient code
\q      - terminate session
#DROP VIEW atestv1;
#DROP VIEW atestv2;
#DROP VIEW atestv3 CASCADE;
#DROP TABLE atest1;
#DROP TABLE atest2;
#DROP TABLE atest3;
#DROP TABLE atest4;

# 17:11:05 >  
# 17:11:05 >  "Done."
# 17:11:05 >  

