stdout of test 'between.Bug-3259` in directory 'sql/test/BugTracker-2013` itself:


# 20:18:30 >  
# 20:18:30 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=31042" "--set" "mapi_usock=/var/tmp/mtest-5226/.s.monetdb.31042" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/rc-clean/Linux-x86_64/var/MonetDB/mTests_sql_test_BugTracker-2013" "--set" "mal_listing=0"
# 20:18:30 >  

# MonetDB 5 server v11.15.4
# This is an unreleased version
# Serving database 'mTests_sql_test_BugTracker-2013', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 3.778 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2013 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://niels.nesco.mine.nu:31042/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-5226/.s.monetdb.31042
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 20:18:31 >  
# 20:18:31 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-5226" "--port=31042"
# 20:18:31 >  

#START TRANSACTION;
#CREATE TABLE treeitems (
#	    "tree"    CHARACTER LARGE OBJECT,
#	    "subject" INTEGER,
#	    "pre"     BIGINT,
#	    "post"    BIGINT,
#	    "size"    BIGINT,
#	    "level"   TINYINT,
#	    "prob"    DOUBLE        DEFAULT 1.0,
#	    CONSTRAINT "treeitems_tree_pre_unique" UNIQUE ("tree", "pre"),
#	    CONSTRAINT "treeitems_tree_post_unique" UNIQUE ("tree", "post")
#);
#explain
#SELECT t1.subject as id1, t2.subject as id2
#FROM  treeitems t1, treeitems t2
#WHERE t2.pre between t1.pre and t1.pre + t1.size;
% .explain # table_name
% mal # name
% clob # type
% 173 # length
function user.s2_1():void;
    X_1 := sql.mvc();
    X_2:bat[:oid,:oid]  := sql.tid(X_1,"sys","treeitems");
    X_5 := sql.bind(X_1,"sys","treeitems","subject",0);
    X_8 := algebra.leftfetchjoin(X_2,X_5);
    (X_9,r1_12) := algebra.crossproduct(X_8,X_8);
    X_11 := sql.bind(X_1,"sys","treeitems","pre",0);
    X_13 := algebra.leftfetchjoin(X_2,X_11);
    X_14 := batcalc.hge(X_13);
    X_15 := algebra.leftfetchjoin(r1_12,X_14);
    X_16 := algebra.leftfetchjoin(X_9,X_14);
    X_27:bat[:oid,:bit]  := batcalc.>=(X_15,X_16);
    X_17 := sql.bind(X_1,"sys","treeitems","size",0);
    X_19 := algebra.leftfetchjoin(X_2,X_17);
    X_20 := batcalc.hge(X_19);
    X_21:bat[:oid,:hge]  := batcalc.+(X_14,X_20);
    X_22 := algebra.leftfetchjoin(X_9,X_21);
    X_23:bat[:oid,:bit]  := batcalc.<=(X_15,X_22);
    X_24 := algebra.subselect(X_23,true,true,true,true,false);
    X_28 := algebra.subselect(X_27,X_24,true,true,true,true,false);
    X_29:bat[:oid,:int]  := algebra.leftfetchjoinPath(X_28,X_9,X_8);
    X_30:bat[:oid,:int]  := algebra.leftfetchjoinPath(X_28,r1_12,X_8);
    X_31 := sql.resultSet(2,1,X_29);
    sql.rsColumn(X_31,"sys.L","id1","int",32,0,X_29);
    sql.rsColumn(X_31,"sys.L","id2","int",32,0,X_30);
    X_42 := io.stdout();
    sql.exportResult(X_42,X_31);
end s2_1;
# querylog.define("explain\nselect t1.subject as id1, t2.subject as id2\nfrom  treeitems t1, treeitems t2\nwhere t2.pre between t1.pre and t1.pre + t1.size;","default_pipe")
#ROLLBACK;

# 20:18:31 >  
# 20:18:31 >  "Done."
# 20:18:31 >  

