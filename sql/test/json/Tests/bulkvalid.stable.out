stdout of test 'bulkvalid` in directory 'sql/test/json` itself:


# 09:43:38 >  
# 09:43:38 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=33894" "--set" "mapi_usock=/var/tmp/mtest-10562/.s.monetdb.33894" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/export/scratch1/mk/current//Linux/var/MonetDB/mTests_sql_test_json" "--set" "mal_listing=0"
# 09:43:38 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_sql_test_json', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2014 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:33894/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-10562/.s.monetdb.33894
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_compress.sql
# loading sql script: 18_dictionary.sql
# loading sql script: 19_cluster.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql

# 09:43:38 >  
# 09:43:38 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-10562" "--port=33894"
# 09:43:38 >  

#create table nosql(j json);
#insert into  nosql values
#	('{}'),
#	('{"f1":1}'),
#	('{"f1":1,"f2":2}'),
#	('{"f1":1,"f2":2,"f1":3}'),
#	('{"f1":{"f12":3},"f2":[2,3,4]}'),
#	('[1,"f2", 2]');
[ 6	]
#select * from nosql;
% sys.nosql # table_name
% j # name
% json # type
% 29 # length
[ "{}"	]
[ "{\"f1\":1}"	]
[ "{\"f1\":1,\"f2\":2}"	]
[ "{\"f1\":1,\"f2\":2,\"f1\":3}"	]
[ "{\"f1\":{\"f12\":3},\"f2\":[2,3,4]}"	]
[ "[1,\"f2\", 2]"	]
#explain select json.isvalid(j) from nosql;
% .explain # table_name
% mal # name
% clob # type
% 90 # length
function user.s4_1{autoCommit=true}():void;
barrier X_93 := language.dataflow();
    X_2 := sql.mvc();
    X_34:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",0,6);
    X_45:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,0,6);
    (X_51:bat[:oid,:oid] ,X_52:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,0,6);
    X_63 := sql.delta(X_45,X_51,X_52);
    X_70 := algebra.leftfetchjoin(X_34,X_63);
    X_81 := mal.manifold("json","isvalid",X_70);
    X_36:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",1,6);
    X_46:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,1,6);
    (X_53:bat[:oid,:oid] ,X_54:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,1,6);
    X_64 := sql.delta(X_46,X_53,X_54);
    X_72 := algebra.leftfetchjoin(X_36,X_64);
    X_82 := mal.manifold("json","isvalid",X_72);
    X_38:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",2,6);
    X_47:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,2,6);
    (X_55:bat[:oid,:oid] ,X_56:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,2,6);
    X_65 := sql.delta(X_47,X_55,X_56);
    X_74 := algebra.leftfetchjoin(X_38,X_65);
    X_83 := mal.manifold("json","isvalid",X_74);
    X_40:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",3,6);
    X_48:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,3,6);
    (X_57:bat[:oid,:oid] ,X_58:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,3,6);
    X_66 := sql.delta(X_48,X_57,X_58);
    X_76 := algebra.leftfetchjoin(X_40,X_66);
    X_84 := mal.manifold("json","isvalid",X_76);
    X_42:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",4,6);
    X_49:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,4,6);
    (X_59:bat[:oid,:oid] ,X_60:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,4,6);
    X_67 := sql.delta(X_49,X_59,X_60);
    X_78 := algebra.leftfetchjoin(X_42,X_67);
    X_85 := mal.manifold("json","isvalid",X_78);
    X_44:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",5,6);
    X_50:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,5,6);
    (X_61:bat[:oid,:oid] ,X_62:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,5,6);
    X_8 := sql.bind(X_2,"sys","nosql","j",1);
    X_68 := sql.delta(X_50,X_61,X_62,X_8);
    X_80 := algebra.leftfetchjoin(X_44,X_68);
    X_86 := mal.manifold("json","isvalid",X_80);
    X_87 := mat.packIncrement(X_81,6);
    X_88 := mat.packIncrement(X_87,X_82);
    X_89 := mat.packIncrement(X_88,X_83);
    X_90 := mat.packIncrement(X_89,X_84);
    X_91 := mat.packIncrement(X_90,X_85);
    X_10:bat[:oid,:bit]  := mat.packIncrement(X_91,X_86);
exit X_93;
    X_13 := sql.resultSet(1,1,X_10);
    sql.rsColumn(X_13,"sys.L","isvalid_j","boolean",1,0,X_10);
    X_18 := io.stdout();
    sql.exportResult(X_18,X_13);
end s4_1;
# querylog.define("explain select json.isvalid(j) from nosql;","default_pipe")
#select json.isvalid(j) from nosql;
% sys.L # table_name
% isvalid_j # name
% boolean # type
% 5 # length
[ true	]
[ true	]
[ true	]
[ true	]
[ true	]
[ true	]
#explain select json.isvalidobject(j) from nosql;
% .explain # table_name
% mal # name
% clob # type
% 90 # length
function user.s5_1{autoCommit=true}():void;
barrier X_93 := language.dataflow();
    X_2 := sql.mvc();
    X_34:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",0,6);
    X_45:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,0,6);
    (X_51:bat[:oid,:oid] ,X_52:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,0,6);
    X_63 := sql.delta(X_45,X_51,X_52);
    X_70 := algebra.leftfetchjoin(X_34,X_63);
    X_81 := mal.manifold("json","isobject",X_70);
    X_36:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",1,6);
    X_46:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,1,6);
    (X_53:bat[:oid,:oid] ,X_54:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,1,6);
    X_64 := sql.delta(X_46,X_53,X_54);
    X_72 := algebra.leftfetchjoin(X_36,X_64);
    X_82 := mal.manifold("json","isobject",X_72);
    X_38:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",2,6);
    X_47:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,2,6);
    (X_55:bat[:oid,:oid] ,X_56:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,2,6);
    X_65 := sql.delta(X_47,X_55,X_56);
    X_74 := algebra.leftfetchjoin(X_38,X_65);
    X_83 := mal.manifold("json","isobject",X_74);
    X_40:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",3,6);
    X_48:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,3,6);
    (X_57:bat[:oid,:oid] ,X_58:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,3,6);
    X_66 := sql.delta(X_48,X_57,X_58);
    X_76 := algebra.leftfetchjoin(X_40,X_66);
    X_84 := mal.manifold("json","isobject",X_76);
    X_42:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",4,6);
    X_49:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,4,6);
    (X_59:bat[:oid,:oid] ,X_60:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,4,6);
    X_67 := sql.delta(X_49,X_59,X_60);
    X_78 := algebra.leftfetchjoin(X_42,X_67);
    X_85 := mal.manifold("json","isobject",X_78);
    X_44:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",5,6);
    X_50:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,5,6);
    (X_61:bat[:oid,:oid] ,X_62:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,5,6);
    X_8 := sql.bind(X_2,"sys","nosql","j",1);
    X_68 := sql.delta(X_50,X_61,X_62,X_8);
    X_80 := algebra.leftfetchjoin(X_44,X_68);
    X_86 := mal.manifold("json","isobject",X_80);
    X_87 := mat.packIncrement(X_81,6);
    X_88 := mat.packIncrement(X_87,X_82);
    X_89 := mat.packIncrement(X_88,X_83);
    X_90 := mat.packIncrement(X_89,X_84);
    X_91 := mat.packIncrement(X_90,X_85);
    X_10:bat[:oid,:bit]  := mat.packIncrement(X_91,X_86);
exit X_93;
    X_13 := sql.resultSet(1,1,X_10);
    sql.rsColumn(X_13,"sys.L","isobject_j","boolean",1,0,X_10);
    X_18 := io.stdout();
    sql.exportResult(X_18,X_13);
end s5_1;
# querylog.define("explain select json.isvalidobject(j) from nosql;","default_pipe")
#select json.isvalidobject(j) from nosql;
% sys.L # table_name
% isobject_j # name
% boolean # type
% 5 # length
[ true	]
[ true	]
[ true	]
[ true	]
[ true	]
[ false	]
#explain select json.isvalidarray(j) from nosql;
% .explain # table_name
% mal # name
% clob # type
% 90 # length
function user.s6_1{autoCommit=true}():void;
barrier X_93 := language.dataflow();
    X_2 := sql.mvc();
    X_34:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",0,6);
    X_45:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,0,6);
    (X_51:bat[:oid,:oid] ,X_52:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,0,6);
    X_63 := sql.delta(X_45,X_51,X_52);
    X_70 := algebra.leftfetchjoin(X_34,X_63);
    X_81 := mal.manifold("json","isarray",X_70);
    X_36:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",1,6);
    X_46:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,1,6);
    (X_53:bat[:oid,:oid] ,X_54:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,1,6);
    X_64 := sql.delta(X_46,X_53,X_54);
    X_72 := algebra.leftfetchjoin(X_36,X_64);
    X_82 := mal.manifold("json","isarray",X_72);
    X_38:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",2,6);
    X_47:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,2,6);
    (X_55:bat[:oid,:oid] ,X_56:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,2,6);
    X_65 := sql.delta(X_47,X_55,X_56);
    X_74 := algebra.leftfetchjoin(X_38,X_65);
    X_83 := mal.manifold("json","isarray",X_74);
    X_40:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",3,6);
    X_48:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,3,6);
    (X_57:bat[:oid,:oid] ,X_58:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,3,6);
    X_66 := sql.delta(X_48,X_57,X_58);
    X_76 := algebra.leftfetchjoin(X_40,X_66);
    X_84 := mal.manifold("json","isarray",X_76);
    X_42:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",4,6);
    X_49:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,4,6);
    (X_59:bat[:oid,:oid] ,X_60:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,4,6);
    X_67 := sql.delta(X_49,X_59,X_60);
    X_78 := algebra.leftfetchjoin(X_42,X_67);
    X_85 := mal.manifold("json","isarray",X_78);
    X_44:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",5,6);
    X_50:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,5,6);
    (X_61:bat[:oid,:oid] ,X_62:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,5,6);
    X_8 := sql.bind(X_2,"sys","nosql","j",1);
    X_68 := sql.delta(X_50,X_61,X_62,X_8);
    X_80 := algebra.leftfetchjoin(X_44,X_68);
    X_86 := mal.manifold("json","isarray",X_80);
    X_87 := mat.packIncrement(X_81,6);
    X_88 := mat.packIncrement(X_87,X_82);
    X_89 := mat.packIncrement(X_88,X_83);
    X_90 := mat.packIncrement(X_89,X_84);
    X_91 := mat.packIncrement(X_90,X_85);
    X_10:bat[:oid,:bit]  := mat.packIncrement(X_91,X_86);
exit X_93;
    X_13 := sql.resultSet(1,1,X_10);
    sql.rsColumn(X_13,"sys.L","isarray_j","boolean",1,0,X_10);
    X_18 := io.stdout();
    sql.exportResult(X_18,X_13);
end s6_1;
# querylog.define("explain select json.isvalidarray(j) from nosql;","default_pipe")
#select json.isvalidarray(j) from nosql;
% sys.L # table_name
% isarray_j # name
% boolean # type
% 5 # length
[ false	]
[ false	]
[ false	]
[ false	]
[ false	]
[ true	]
#create table tmpsql(j string);
#insert into  tmpsql values
#	('{}'),
#	('{"f1":1}'),
#	('{"f1":1,"f2":2}'),
#	('{"f1":1,"f2":2,"f1":3}'),
#	('{"f1":{"f12":3},"f2":[2,3,4]}'),
#	('[1,"f2", 2]');
[ 6	]
#select * from tmpsql;
% sys.tmpsql # table_name
% j # name
% clob # type
% 29 # length
[ "{}"	]
[ "{\"f1\":1}"	]
[ "{\"f1\":1,\"f2\":2}"	]
[ "{\"f1\":1,\"f2\":2,\"f1\":3}"	]
[ "{\"f1\":{\"f12\":3},\"f2\":[2,3,4]}"	]
[ "[1,\"f2\", 2]"	]
#explain select json.isvalid(j) from nosql;
% .explain # table_name
% mal # name
% clob # type
% 90 # length
function user.s10_1{autoCommit=true}():void;
barrier X_93 := language.dataflow();
    X_2 := sql.mvc();
    X_34:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",0,6);
    X_45:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,0,6);
    (X_51:bat[:oid,:oid] ,X_52:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,0,6);
    X_63 := sql.delta(X_45,X_51,X_52);
    X_70 := algebra.leftfetchjoin(X_34,X_63);
    X_81 := mal.manifold("json","isvalid",X_70);
    X_36:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",1,6);
    X_46:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,1,6);
    (X_53:bat[:oid,:oid] ,X_54:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,1,6);
    X_64 := sql.delta(X_46,X_53,X_54);
    X_72 := algebra.leftfetchjoin(X_36,X_64);
    X_82 := mal.manifold("json","isvalid",X_72);
    X_38:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",2,6);
    X_47:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,2,6);
    (X_55:bat[:oid,:oid] ,X_56:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,2,6);
    X_65 := sql.delta(X_47,X_55,X_56);
    X_74 := algebra.leftfetchjoin(X_38,X_65);
    X_83 := mal.manifold("json","isvalid",X_74);
    X_40:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",3,6);
    X_48:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,3,6);
    (X_57:bat[:oid,:oid] ,X_58:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,3,6);
    X_66 := sql.delta(X_48,X_57,X_58);
    X_76 := algebra.leftfetchjoin(X_40,X_66);
    X_84 := mal.manifold("json","isvalid",X_76);
    X_42:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",4,6);
    X_49:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,4,6);
    (X_59:bat[:oid,:oid] ,X_60:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,4,6);
    X_67 := sql.delta(X_49,X_59,X_60);
    X_78 := algebra.leftfetchjoin(X_42,X_67);
    X_85 := mal.manifold("json","isvalid",X_78);
    X_44:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",5,6);
    X_50:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,5,6);
    (X_61:bat[:oid,:oid] ,X_62:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,5,6);
    X_8 := sql.bind(X_2,"sys","nosql","j",1);
    X_68 := sql.delta(X_50,X_61,X_62,X_8);
    X_80 := algebra.leftfetchjoin(X_44,X_68);
    X_86 := mal.manifold("json","isvalid",X_80);
    X_87 := mat.packIncrement(X_81,6);
    X_88 := mat.packIncrement(X_87,X_82);
    X_89 := mat.packIncrement(X_88,X_83);
    X_90 := mat.packIncrement(X_89,X_84);
    X_91 := mat.packIncrement(X_90,X_85);
    X_10:bat[:oid,:bit]  := mat.packIncrement(X_91,X_86);
exit X_93;
    X_13 := sql.resultSet(1,1,X_10);
    sql.rsColumn(X_13,"sys.L","isvalid_j","boolean",1,0,X_10);
    X_18 := io.stdout();
    sql.exportResult(X_18,X_13);
end s10_1;
# querylog.define("explain select json.isvalid(j) from nosql;","default_pipe")
#select json.isvalid(j) from nosql;
% sys.L # table_name
% isvalid_j # name
% boolean # type
% 5 # length
[ true	]
[ true	]
[ true	]
[ true	]
[ true	]
[ true	]
#explain select json.isvalidobject(j) from nosql;
% .explain # table_name
% mal # name
% clob # type
% 90 # length
function user.s11_1{autoCommit=true}():void;
barrier X_93 := language.dataflow();
    X_2 := sql.mvc();
    X_34:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",0,6);
    X_45:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,0,6);
    (X_51:bat[:oid,:oid] ,X_52:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,0,6);
    X_63 := sql.delta(X_45,X_51,X_52);
    X_70 := algebra.leftfetchjoin(X_34,X_63);
    X_81 := mal.manifold("json","isobject",X_70);
    X_36:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",1,6);
    X_46:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,1,6);
    (X_53:bat[:oid,:oid] ,X_54:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,1,6);
    X_64 := sql.delta(X_46,X_53,X_54);
    X_72 := algebra.leftfetchjoin(X_36,X_64);
    X_82 := mal.manifold("json","isobject",X_72);
    X_38:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",2,6);
    X_47:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,2,6);
    (X_55:bat[:oid,:oid] ,X_56:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,2,6);
    X_65 := sql.delta(X_47,X_55,X_56);
    X_74 := algebra.leftfetchjoin(X_38,X_65);
    X_83 := mal.manifold("json","isobject",X_74);
    X_40:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",3,6);
    X_48:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,3,6);
    (X_57:bat[:oid,:oid] ,X_58:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,3,6);
    X_66 := sql.delta(X_48,X_57,X_58);
    X_76 := algebra.leftfetchjoin(X_40,X_66);
    X_84 := mal.manifold("json","isobject",X_76);
    X_42:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",4,6);
    X_49:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,4,6);
    (X_59:bat[:oid,:oid] ,X_60:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,4,6);
    X_67 := sql.delta(X_49,X_59,X_60);
    X_78 := algebra.leftfetchjoin(X_42,X_67);
    X_85 := mal.manifold("json","isobject",X_78);
    X_44:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",5,6);
    X_50:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,5,6);
    (X_61:bat[:oid,:oid] ,X_62:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,5,6);
    X_8 := sql.bind(X_2,"sys","nosql","j",1);
    X_68 := sql.delta(X_50,X_61,X_62,X_8);
    X_80 := algebra.leftfetchjoin(X_44,X_68);
    X_86 := mal.manifold("json","isobject",X_80);
    X_87 := mat.packIncrement(X_81,6);
    X_88 := mat.packIncrement(X_87,X_82);
    X_89 := mat.packIncrement(X_88,X_83);
    X_90 := mat.packIncrement(X_89,X_84);
    X_91 := mat.packIncrement(X_90,X_85);
    X_10:bat[:oid,:bit]  := mat.packIncrement(X_91,X_86);
exit X_93;
    X_13 := sql.resultSet(1,1,X_10);
    sql.rsColumn(X_13,"sys.L","isobject_j","boolean",1,0,X_10);
    X_18 := io.stdout();
    sql.exportResult(X_18,X_13);
end s11_1;
# querylog.define("explain select json.isvalidobject(j) from nosql;","default_pipe")
#select json.isvalidobject(j) from nosql;
% sys.L # table_name
% isobject_j # name
% boolean # type
% 5 # length
[ true	]
[ true	]
[ true	]
[ true	]
[ true	]
[ false	]
#explain select json.isvalidarray(j) from nosql;
% .explain # table_name
% mal # name
% clob # type
% 90 # length
function user.s12_1{autoCommit=true}():void;
barrier X_93 := language.dataflow();
    X_2 := sql.mvc();
    X_34:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",0,6);
    X_45:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,0,6);
    (X_51:bat[:oid,:oid] ,X_52:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,0,6);
    X_63 := sql.delta(X_45,X_51,X_52);
    X_70 := algebra.leftfetchjoin(X_34,X_63);
    X_81 := mal.manifold("json","isarray",X_70);
    X_36:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",1,6);
    X_46:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,1,6);
    (X_53:bat[:oid,:oid] ,X_54:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,1,6);
    X_64 := sql.delta(X_46,X_53,X_54);
    X_72 := algebra.leftfetchjoin(X_36,X_64);
    X_82 := mal.manifold("json","isarray",X_72);
    X_38:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",2,6);
    X_47:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,2,6);
    (X_55:bat[:oid,:oid] ,X_56:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,2,6);
    X_65 := sql.delta(X_47,X_55,X_56);
    X_74 := algebra.leftfetchjoin(X_38,X_65);
    X_83 := mal.manifold("json","isarray",X_74);
    X_40:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",3,6);
    X_48:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,3,6);
    (X_57:bat[:oid,:oid] ,X_58:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,3,6);
    X_66 := sql.delta(X_48,X_57,X_58);
    X_76 := algebra.leftfetchjoin(X_40,X_66);
    X_84 := mal.manifold("json","isarray",X_76);
    X_42:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",4,6);
    X_49:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,4,6);
    (X_59:bat[:oid,:oid] ,X_60:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,4,6);
    X_67 := sql.delta(X_49,X_59,X_60);
    X_78 := algebra.leftfetchjoin(X_42,X_67);
    X_85 := mal.manifold("json","isarray",X_78);
    X_44:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",5,6);
    X_50:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,5,6);
    (X_61:bat[:oid,:oid] ,X_62:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,5,6);
    X_8 := sql.bind(X_2,"sys","nosql","j",1);
    X_68 := sql.delta(X_50,X_61,X_62,X_8);
    X_80 := algebra.leftfetchjoin(X_44,X_68);
    X_86 := mal.manifold("json","isarray",X_80);
    X_87 := mat.packIncrement(X_81,6);
    X_88 := mat.packIncrement(X_87,X_82);
    X_89 := mat.packIncrement(X_88,X_83);
    X_90 := mat.packIncrement(X_89,X_84);
    X_91 := mat.packIncrement(X_90,X_85);
    X_10:bat[:oid,:bit]  := mat.packIncrement(X_91,X_86);
exit X_93;
    X_13 := sql.resultSet(1,1,X_10);
    sql.rsColumn(X_13,"sys.L","isarray_j","boolean",1,0,X_10);
    X_18 := io.stdout();
    sql.exportResult(X_18,X_13);
end s12_1;
# querylog.define("explain select json.isvalidarray(j) from nosql;","default_pipe")
#select json.isvalidarray(j) from nosql;
% sys.L # table_name
% isarray_j # name
% boolean # type
% 5 # length
[ false	]
[ false	]
[ false	]
[ false	]
[ false	]
[ true	]
#drop table tmpsql;
#drop table nosql;

# 09:43:38 >  
# 09:43:38 >  "Done."
# 09:43:38 >  

