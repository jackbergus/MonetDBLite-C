stdout of test 'coercions` in directory 'sql/test/json` itself:


# 10:13:31 >  
# 10:13:31 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=31474" "--set" "mapi_usock=/var/tmp/mtest-11121/.s.monetdb.31474" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/export/scratch1/mk/current//Linux/var/MonetDB/mTests_sql_test_json" "--set" "mal_listing=0"
# 10:13:31 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_sql_test_json', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2014 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:31474/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-11121/.s.monetdb.31474
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_compress.sql
# loading sql script: 18_dictionary.sql
# loading sql script: 19_cluster.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql

# 10:13:31 >  
# 10:13:31 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-11121" "--port=31474"
# 10:13:31 >  

#create table nosql(j json);
#insert into  nosql values
#	('{}'),
#	('{"f1":1}'),
#	('{"f1":1,"f2":2}'),
#	('{"f1":1,"f2":2,"f1":3}'),
#	('{"f1":{"f12":3},"f2":[2,3,4]}'),
#	('[1,"f2", 2]');
[ 6	]
#select * from nosql;
% sys.nosql # table_name
% j # name
% json # type
% 29 # length
[ "{}"	]
[ "{\"f1\":1}"	]
[ "{\"f1\":1,\"f2\":2}"	]
[ "{\"f1\":1,\"f2\":2,\"f1\":3}"	]
[ "{\"f1\":{\"f12\":3},\"f2\":[2,3,4]}"	]
[ "[1,\"f2\", 2]"	]
#explain select cast (j as string) from nosql;
% .explain # table_name
% mal # name
% clob # type
% 90 # length
function user.s4_1{autoCommit=true}():void;
barrier X_91 := language.dataflow();
    X_2 := sql.mvc();
    X_32:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",0,6);
    X_43:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,0,6);
    (X_49:bat[:oid,:oid] ,X_50:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,0,6);
    X_61 := sql.delta(X_43,X_49,X_50);
    X_68 := algebra.leftfetchjoin(X_32,X_61);
    X_79 := batcalc.str(13,0,0,0,X_68,0);
    X_34:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",1,6);
    X_44:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,1,6);
    (X_51:bat[:oid,:oid] ,X_52:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,1,6);
    X_62 := sql.delta(X_44,X_51,X_52);
    X_70 := algebra.leftfetchjoin(X_34,X_62);
    X_80 := batcalc.str(13,0,0,0,X_70,0);
    X_36:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",2,6);
    X_45:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,2,6);
    (X_53:bat[:oid,:oid] ,X_54:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,2,6);
    X_63 := sql.delta(X_45,X_53,X_54);
    X_72 := algebra.leftfetchjoin(X_36,X_63);
    X_81 := batcalc.str(13,0,0,0,X_72,0);
    X_38:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",3,6);
    X_46:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,3,6);
    (X_55:bat[:oid,:oid] ,X_56:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,3,6);
    X_64 := sql.delta(X_46,X_55,X_56);
    X_74 := algebra.leftfetchjoin(X_38,X_64);
    X_82 := batcalc.str(13,0,0,0,X_74,0);
    X_40:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",4,6);
    X_47:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,4,6);
    (X_57:bat[:oid,:oid] ,X_58:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,4,6);
    X_65 := sql.delta(X_47,X_57,X_58);
    X_76 := algebra.leftfetchjoin(X_40,X_65);
    X_83 := batcalc.str(13,0,0,0,X_76,0);
    X_42:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",5,6);
    X_48:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,5,6);
    (X_59:bat[:oid,:oid] ,X_60:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,5,6);
    X_8 := sql.bind(X_2,"sys","nosql","j",1);
    X_66 := sql.delta(X_48,X_59,X_60,X_8);
    X_78 := algebra.leftfetchjoin(X_42,X_66);
    X_84 := batcalc.str(13,0,0,0,X_78,0);
    X_85 := mat.packIncrement(X_79,6);
    X_86 := mat.packIncrement(X_85,X_80);
    X_87 := mat.packIncrement(X_86,X_81);
    X_88 := mat.packIncrement(X_87,X_82);
    X_89 := mat.packIncrement(X_88,X_83);
    X_10:bat[:oid,:str]  := mat.packIncrement(X_89,X_84);
exit X_91;
    X_12 := sql.resultSet(1,1,X_10);
    sql.rsColumn(X_12,"sys.nosql","j","clob",0,0,X_10);
    X_16 := io.stdout();
    sql.exportResult(X_16,X_12);
end s4_1;
# querylog.define("explain select cast (j as string) from nosql;","default_pipe")
#select cast (j as string) from nosql;
% sys.nosql # table_name
% j # name
% clob # type
% 37 # length
[ "\"{}\""	]
[ "\"{\\\"f1\\\":1}\""	]
[ "\"{\\\"f1\\\":1,\\\"f2\\\":2}\""	]
[ "\"{\\\"f1\\\":1,\\\"f2\\\":2,\\\"f1\\\":3}\""	]
[ "\"{\\\"f1\\\":{\\\"f12\\\":3},\\\"f2\\\":[2,3,4]}\""	]
[ "\"[1,\\\"f2\\\", 2]\""	]
#create table tmpsql(j string);
#insert into  tmpsql values
#	('{}'),
#	('{"f1":1}'),
#	('{"f1":1,"f2":2}'),
#	('{"f1":1,"f2":2,"f1":3}'),
#	('{"f1":{"f12":3},"f2":[2,3,4]}'),
#	('[1,"f2", 2]');
[ 6	]
#select * from tmpsql;
% sys.tmpsql # table_name
% j # name
% clob # type
% 29 # length
[ "{}"	]
[ "{\"f1\":1}"	]
[ "{\"f1\":1,\"f2\":2}"	]
[ "{\"f1\":1,\"f2\":2,\"f1\":3}"	]
[ "{\"f1\":{\"f12\":3},\"f2\":[2,3,4]}"	]
[ "[1,\"f2\", 2]"	]
#explain select cast (j as json) from nosql;
% .explain # table_name
% mal # name
% clob # type
% 90 # length
function user.s8_1{autoCommit=true}():void;
barrier X_84 := language.dataflow();
    X_2 := sql.mvc();
    X_31:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",0,6);
    X_42:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,0,6);
    (X_48:bat[:oid,:oid] ,X_49:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,0,6);
    X_60 := sql.delta(X_42,X_48,X_49);
    X_67 := algebra.leftfetchjoin(X_31,X_60);
    X_33:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",1,6);
    X_43:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,1,6);
    (X_50:bat[:oid,:oid] ,X_51:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,1,6);
    X_61 := sql.delta(X_43,X_50,X_51);
    X_69 := algebra.leftfetchjoin(X_33,X_61);
    X_35:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",2,6);
    X_44:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,2,6);
    (X_52:bat[:oid,:oid] ,X_53:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,2,6);
    X_62 := sql.delta(X_44,X_52,X_53);
    X_71 := algebra.leftfetchjoin(X_35,X_62);
    X_37:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",3,6);
    X_45:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,3,6);
    (X_54:bat[:oid,:oid] ,X_55:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,3,6);
    X_63 := sql.delta(X_45,X_54,X_55);
    X_73 := algebra.leftfetchjoin(X_37,X_63);
    X_39:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",4,6);
    X_46:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,4,6);
    (X_56:bat[:oid,:oid] ,X_57:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,4,6);
    X_64 := sql.delta(X_46,X_56,X_57);
    X_75 := algebra.leftfetchjoin(X_39,X_64);
    X_41:bat[:oid,:oid]  := sql.tid(X_2,"sys","nosql",5,6);
    X_47:bat[:oid,:json]  := sql.bind(X_2,"sys","nosql","j",0,5,6);
    (X_58:bat[:oid,:oid] ,X_59:bat[:oid,:json] ) := sql.bind(X_2,"sys","nosql","j",2,5,6);
    X_8 := sql.bind(X_2,"sys","nosql","j",1);
    X_65 := sql.delta(X_47,X_58,X_59,X_8);
    X_77 := algebra.leftfetchjoin(X_41,X_65);
    X_78 := mat.packIncrement(X_67,6);
    X_79 := mat.packIncrement(X_78,X_69);
    X_80 := mat.packIncrement(X_79,X_71);
    X_81 := mat.packIncrement(X_80,X_73);
    X_82 := mat.packIncrement(X_81,X_75);
    X_10 := mat.packIncrement(X_82,X_77);
exit X_84;
    X_11 := sql.resultSet(1,1,X_10);
    sql.rsColumn(X_11,"sys.nosql","j","json",0,0,X_10);
    X_15 := io.stdout();
    sql.exportResult(X_15,X_11);
end s8_1;
# querylog.define("explain select cast (j as json) from nosql;","default_pipe")
#select cast (j as json) from nosql;
% sys.nosql # table_name
% j # name
% json # type
% 29 # length
[ "{}"	]
[ "{\"f1\":1}"	]
[ "{\"f1\":1,\"f2\":2}"	]
[ "{\"f1\":1,\"f2\":2,\"f1\":3}"	]
[ "{\"f1\":{\"f12\":3},\"f2\":[2,3,4]}"	]
[ "[1,\"f2\", 2]"	]
#drop table tmpsql;
#drop table nosql;

# 10:13:31 >  
# 10:13:31 >  "Done."
# 10:13:31 >  

