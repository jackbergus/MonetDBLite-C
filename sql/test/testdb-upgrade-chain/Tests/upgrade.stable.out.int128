stdout of test 'upgrade` in directory 'sql/test/testdb-upgrade-chain` itself:


# 15:17:06 >  
# 15:17:06 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "gdk_dbfarm=/ufs/sjoerd/Monet-stable/var/MonetDB" "--set" "mapi_open=true" "--set" "mapi_port=36250" "--set" "monet_prompt=" "--trace" "--forcemito" "--set" "mal_listing=2" "--dbname=mTests_test_testdb-upgrade-chain" "--set" "mal_listing=0"
# 15:17:06 >  

# MonetDB 5 server v11.11.8 (hg id: 34fcf4e7226d+)
# This is an unreleased version
# Serving database 'mTests_test_testdb-upgrade-chain', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.629 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://madrid.ins.cwi.nl:36250/
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.
Running database upgrade commands:
set schema "sys";
create function fuse(one bigint, two bigint)
returns hugeint
external name udf.fuse;
create function sys.generate_series(first hugeint, last hugeint)
returns table (value hugeint)
external name generator.series;
create function sys.generate_series(first hugeint, last hugeint, stepsize hugeint)
returns table (value hugeint)
external name generator.series;
create aggregate stddev_samp(val HUGEINT) returns DOUBLE
    external name "aggr"."stdev";
create aggregate stddev_pop(val HUGEINT) returns DOUBLE
    external name "aggr"."stdevp";
create aggregate var_samp(val HUGEINT) returns DOUBLE
    external name "aggr"."variance";
create aggregate var_pop(val HUGEINT) returns DOUBLE
    external name "aggr"."variancep";
create aggregate median(val HUGEINT) returns HUGEINT
    external name "aggr"."median";
create aggregate quantile(val HUGEINT, q DOUBLE) returns HUGEINT
    external name "aggr"."quantile";
create aggregate corr(e1 HUGEINT, e2 HUGEINT) returns HUGEINT
    external name "aggr"."corr";
create function json.filter(js json, name hugeint)
returns json
external name json.filter;
drop view sys.tablestoragemodel;
create view sys.tablestoragemodel
as select "schema","table",max(count) as "count",
	sum(columnsize) as columnsize,
	sum(heapsize) as heapsize,
	sum(hashes) as hashes,
	sum(imprints) as imprints,
	sum(case when sorted = false then 8 * count else 0 end) as auxiliary
from sys.storagemodel() group by "schema","table";
insert into sys.systemfunctions (select id from sys.functions where name in ('fuse', 'generate_series', 'stddev_samp', 'stddev_pop', 'var_samp', 'var_pop', 'median', 'quantile', 'corr') and schema_id = (select id from sys.schemas where name = 'sys') and id not in (select function_id from sys.systemfunctions));
insert into sys.systemfunctions (select id from sys.functions where name = 'filter' and schema_id = (select id from sys.schemas where name = 'json') and id not in (select function_id from sys.systemfunctions));
update sys._tables set system = true where name = 'tablestoragemodel' and schema_id = (select id from sys.schemas where name = 'sys');
insert into sys.types values (13, 'hge', 'hugeint', 128, 1, 2, 7, 0);
insert into sys.types values (18, 'hge', 'decimal', 38, 1, 10, 10, 0);
set schema "testschema";

Running database upgrade commands:
set schema "sys";
delete from sys._columns where table_id = (select id from sys._tables where name = 'connections' and schema_id = (select id from sys.schemas where name = 'sys'));
delete from sys._tables where name = 'connections' and schema_id = (select id from sys.schemas where name = 'sys');
create function profiler.getlimit() returns integer external name profiler.getlimit;
create procedure profiler.setlimit(lim integer) external name profiler.setlimit;
drop procedure profiler.setpoolsize;
drop procedure profiler.setstream;
insert into sys.systemfunctions (select id from sys.functions where name in ('getlimit', 'setlimit') and schema_id = (select id from sys.schemas where name = 'profiler') and id not in (select function_id from sys.systemfunctions));
CREATE TABLE sys.function_types (
function_type_id   SMALLINT NOT NULL PRIMARY KEY,
function_type_name VARCHAR(30) NOT NULL UNIQUE);
INSERT INTO sys.function_types (function_type_id, function_type_name) VALUES
(1, 'Scalar function'), (2, 'Procedure'), (3, 'Aggregate function'), (4, 'Filter function'), (5, 'Function returning a table'),
(6, 'Analytic function'), (7, 'Loader function');
CREATE TABLE sys.function_languages (
language_id   SMALLINT NOT NULL PRIMARY KEY,
language_name VARCHAR(20) NOT NULL UNIQUE);
INSERT INTO sys.function_languages (language_id, language_name) VALUES
(0, 'Internal C'), (1, 'MAL'), (2, 'SQL'), (3, 'R'), (4, 'C'), (5, 'Java'), (6, 'Python'), (7, 'Python Mapped');
CREATE TABLE sys.key_types (
key_type_id   SMALLINT NOT NULL PRIMARY KEY,
key_type_name VARCHAR(15) NOT NULL UNIQUE);
INSERT INTO sys.key_types (key_type_id, key_type_name) VALUES
(0, 'Primary Key'), (1, 'Unique Key'), (2, 'Foreign Key');
CREATE TABLE sys.index_types (
index_type_id   SMALLINT NOT NULL PRIMARY KEY,
index_type_name VARCHAR(25) NOT NULL UNIQUE);
INSERT INTO sys.index_types (index_type_id, index_type_name) VALUES
(0, 'Hash'), (1, 'Join'), (2, 'Order preserving hash'), (3, 'No-index'), (4, 'Imprint'), (5, 'Ordered');
CREATE TABLE sys.privilege_codes (
privilege_code_id   INT NOT NULL PRIMARY KEY,
privilege_code_name VARCHAR(30) NOT NULL UNIQUE);
INSERT INTO sys.privilege_codes (privilege_code_id, privilege_code_name) VALUES
(1, 'SELECT'), (2, 'UPDATE'), (4, 'INSERT'), (8, 'DELETE'), (16, 'EXECUTE'), (32, 'GRANT'),
(3, 'SELECT,UPDATE'), (5, 'SELECT,INSERT'), (6, 'INSERT,UPDATE'), (7, 'SELECT,INSERT,UPDATE'),
(9, 'SELECT,DELETE'), (10, 'UPDATE,DELETE'), (11, 'SELECT,UPDATE,DELETE'), (12, 'INSERT,DELETE'),
(13, 'SELECT,INSERT,DELETE'), (14, 'INSERT,UPDATE,DELETE'), (15, 'SELECT,INSERT,UPDATE,DELETE');
update sys._tables set system = true where name in ('function_languages', 'function_types', 'index_types', 'key_types', 'privilege_codes') and schema_id = (select id from sys.schemas where name = 'sys');
set schema "testschema";


# 12:48:11 >  
# 12:48:11 >  "/usr/bin/python2" "upgrade.SQL.py" "upgrade"
# 12:48:11 >  

#select count(*) from testschema.smallstring;
% testschema.L4 # table_name
% L3 # name
% bigint # type
% 2 # length
[ 66	]

# 15:17:06 >  
# 15:17:06 >  "Done."
# 15:17:06 >  

