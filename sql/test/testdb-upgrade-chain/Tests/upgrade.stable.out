stdout of test 'upgrade` in directory 'sql/test/testdb-upgrade-chain` itself:


# 15:17:06 >  
# 15:17:06 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "gdk_dbfarm=/ufs/sjoerd/Monet-stable/var/MonetDB" "--set" "mapi_open=true" "--set" "mapi_port=36250" "--set" "monet_prompt=" "--trace" "--forcemito" "--set" "mal_listing=2" "--dbname=mTests_test_testdb-upgrade-chain" "--set" "mal_listing=0"
# 15:17:06 >  

# MonetDB 5 server v11.11.8 (hg id: 34fcf4e7226d+)
# This is an unreleased version
# Serving database 'mTests_test_testdb-upgrade-chain', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.629 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2013 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://madrid.ins.cwi.nl:36250/
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.
Running database upgrade commands:
create aggregate sys.stddev_samp(val WRD) returns DOUBLE external name "aggr"."stdev";
create aggregate sys.stddev_pop(val WRD) returns DOUBLE external name "aggr"."stdevp";
create aggregate sys.var_samp(val WRD) returns DOUBLE external name "aggr"."variance";
create aggregate sys.var_pop(val WRD) returns DOUBLE external name "aggr"."variancep";
create aggregate sys.median(val WRD) returns WRD external name "aggr"."median";
create aggregate sys.corr(e1 WRD, e2 WRD) returns WRD external name "aggr"."corr";
insert into sys.systemfunctions (select f.id from sys.functions f, sys.schemas s where f.name in ('stddev_samp', 'stddev_pop', 'var_samp', 'var_pop', 'median', 'corr') and f.type = 3 and f.schema_id = s.id and s.name = 'sys');

Running database upgrade commands:
set schema "sys";
create view sys.tracelog as select * from sys.tracelog();
drop function sys.clients;
create view sys.optimizers as select * from sys.optimizers();
create view sys.environment as select * from sys.environment();
create view sys.storage as select * from sys.storage();
create view sys.storagemodel as select * from sys.storagemodel();
drop procedure sys.resetHistory;
drop procedure sys.keepCall;
drop procedure sys.keepQuery;
drop view sys.queryLog;
drop table sys.callHistory;
drop table sys.queryHistory;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Copyright August 2008-2013 MonetDB B.V.
-- All Rights Reserved.

-- QUERY HISTORY
-- The query history mechanism of MonetDB/SQL relies on a few hooks.
-- The most important one is a global system variable which controls
--  monitoring of all sessions. 

create function sys.querylog_catalog()
returns table(
	id oid,
	owner string,
	defined timestamp,
	query string,
	pipe string,
	mal int,			-- size of MAL plan
	optimize bigint 	-- time in usec
)
external name sql.querylog_catalog;

-- Each query call is stored in the table calls
-- At regular intervals the query history table should be cleaned.
-- This can be done manually on the SQL console, or be integrated
-- in the keepQuery and keepCall upon need.
-- The parameters are geared at understanding the resource claims
-- They reflect the effect of the total workload mix during execution.
-- The 'cpu' gives the average cpu load percentage over all cores on the 
-- server during execution phase. 
-- increasing cpu load indicates better use of multi-cores.
-- The 'io' indicate IOs during complete query run.
-- The 'space' is the total amount of intermediates created in MB.
-- Reducing the space component improves performance/
-- All timing in usec and all storage in bytes.

create function sys.querylog_calls()
returns table(
	id oid,				 -- references query plan
	"start" timestamp,	-- time the statement was started
	"stop" timestamp,	-- time the statement was completely finished
	arguments string,	-- actual call structure
	tuples wrd,			-- number of tuples in the result set
	run bigint,		-- time spent (in usec)  until the result export
	ship bigint,		-- time spent (in usec)  to ship the result set
	cpu int,  		-- average cpu load percentage during execution
	io int,			-- percentage time waiting for IO to finish 
	space bigint		-- total storage size of intermediates created (in MB)
)
external name sql.querylog_calls;

-- create table views for convenience
create view sys.querylog_catalog as select * from sys.querylog_catalog();
create view sys.querylog_calls as select * from sys.querylog_calls();
create view sys.querylog_history as
select qd.*, ql."start",ql."stop", ql.arguments, ql.tuples, ql.run, ql.ship, ql.cpu, ql.space, ql.io 
from sys.querylog_catalog() qd, sys.querylog_calls() ql
where qd.id = ql.id and qd.owner = user;

update sys._tables
    set system = true
    where name in ('querylog_history', 'querylog_calls', 'querylog_catalog')
        and schema_id = (select id from sys.schemas where name = 'sys');

-- reset history for a particular user
create procedure sys.querylog_empty()
external name sql.querylog_empty;

-- manipulate the query logger
create procedure sys.querylog_enable()
external name sql.querylog_enable;
create procedure sys.querylog_enable(threshold smallint)
external name sql.querylog_enable_threshold;
create procedure sys.querylog_disable()
external name sql.querylog_disable;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Copyright August 2008-2013 MonetDB B.V.
-- All Rights Reserved.

-- System monitoring

-- show status of all active SQL queries.
create function sys.queue()
returns table(
	qtag bigint,
	"user" string,
	started timestamp,
	estimate timestamp,
	progress int,
	status string,
	tag oid,
	query string
)
external name sql.sysmon_queue;

create view sys.queue as select * from sys.queue();
update sys._tables
    set system = true
    where name = 'queue'
        and schema_id = (select id from sys.schemas where name = 'sys');

-- operations to manipulate the state of havoc queries
create procedure sys.pause(tag int)
external name sql.sysmon_pause;
create procedure sys.resume(tag int)
external name sql.sysmon_resume;
create procedure sys.stop(tag int)
external name sql.sysmon_stop;

create procedure sys.pause(tag bigint)
external name sql.sysmon_pause;
create procedure sys.resume(tag bigint)
external name sql.sysmon_resume;
create procedure sys.stop(tag bigint)
external name sql.sysmon_stop;

--create function sysmon.connections()
--returns table(
--)
--external name sql.sql_sysmon_connections;

-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Copyright August 2008-2013 MonetDB B.V.
-- All Rights Reserved.

-- (co) Martin Kersten
-- The JSON type comes with a few operators.

create type json external name json;

-- access the top level key by name, return its value
create function sys.json_filter(js json, name string)
returns json external name json.filter;

create function sys.json_filter_all(js json, name string)
returns json external name json.filterall;

-- a simple path extractor
create function sys.json_path(js json, e string)
returns json external name json.path;

-- test string for JSON compliancy
create function sys.json_isvalid(js string)
returns bool external name json.isvalid;

create function sys.json_isvalidobject(js string)
returns bool external name json.isvalidobject;

create function sys.json_isvalidarray(js string)
returns bool external name json.isvalidarray;

-- return the number of primary components
create function sys.json_length(js json)
returns integer external name json.length;

-- The remainder awaits the implementation of
-- proper functions with table type arguments.

-- unnesting the JSON structure

-- create function sys.json_unnest(js json)
-- returns table( id integer, k string, v string) external name json.unnest;

-- create function sys.json_unnest(js json)
-- returns table( k string, v string) external name json.unnest;

-- create function sys.json_unnest(js json)
-- returns table( v string) external name json.unnest;

-- create function sys.json_nest table( id integer, k string, v string)
-- returns json external name json.nest;

-- create function sys.json_names(js json)
-- returns table ( nme string) external name json.names;

-- create function sys.json_values(js json)
-- returns table ( val string) external name json."values";

-- rendering functions
-- create function sys.json_object(*)
-- returns json external name json.objectrender;
-- create function sys.json_array(*)
-- returns json external name json.arrayrender;
insert into sys.systemfunctions (select f.id from sys.functions f, sys.schemas s where f.name in ('querylog_catalog', 'querylog_calls', 'queue', 'json_filter', 'json_filter_all', 'json_path', 'json_isvalid', 'json_isvalidobject', 'json_isvalidarray', 'json_length') and f.type = 1 and f.schema_id = s.id and s.name = 'sys');
insert into sys.systemfunctions (select f.id from sys.functions f, sys.schemas s where f.name in ('querylog_empty', 'querylog_enable', 'querylog_disable', 'pause', 'resume', 'sysmon_resume', 'stop') and f.type = 2 and f.schema_id = s.id and s.name = 'sys');
update sys._tables set system = true where name in ('tracelog', 'optimizers', 'environment', 'storage', 'storagemodel') and schema_id = (select id from sys.schemas where name = 'sys');
set schema "testschema";


# 12:50:17 >  
# 12:50:17 >  "/usr/bin/python2" "upgrade.SQL.py" "upgrade"
# 12:50:17 >  

#select count(*) from testschema.smallstring;
% testschema.L1 # table_name
% L1 # name
% wrd # type
% 2 # length
[ 66	]

# 15:17:06 >  
# 15:17:06 >  "Done."
# 15:17:06 >  

