stdout of test 'LIMIT_OFFSET_big-endian.Bug-2622` in directory 'test/BugTracker-2010` itself:


# 21:05:24 >  
# 21:05:24 >   mserver5 "--config=/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/lib64/MonetDB5:/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/lib64/MonetDB5/lib:/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/lib64/MonetDB5/bin" --set "gdk_dbfarm=/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/var/MonetDB5/dbfarm"  --set mapi_open=true --set xrpc_open=true --set mapi_port=38140 --set xrpc_port=48203 --set monet_prompt= --set mal_listing=2 --trace  "--dbname=mTests_src_test_BugTracker-2010" --set mal_listing=0 ; echo ; echo Over..
# 21:05:24 >  

# MonetDB server v5.20.3, based on kernel v1.38.3
# Serving database 'mTests_src_test_BugTracker-2010', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 7.751 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2013 MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://rig.ins.cwi.nl:38140/
# MonetDB/SQL module v2.38.3 loaded
# MonetDB/GIS module v0.18.3 loaded

Ready.


# 21:05:24 >  
# 21:05:24 >  mclient -lsql -ftest -i -e --host=rig --port=38140 
# 21:05:24 >  

[ 1	]
[ 1	]
[ 1	]
[ 1	]

#PLAN select * from oblo;
% .plan # table_name
% rel # name
% clob # type
% 56 # length
project (
| table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ] COUNT 
) [ oblo.a ]
#PLAN select * from oblo OFFSET 2;
% .plan # table_name
% rel # name
% clob # type
% 58 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ] COUNT 
| ) [ oblo.a ]
) [ wrd "2" ]
#PLAN select * from oblo LIMIT 2;
% .plan # table_name
% rel # name
% clob # type
% 58 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ] COUNT 
| ) [ oblo.a ]
) [ wrd "2" ]
#PLAN select * from oblo LIMIT 1 OFFSET 2;
% .plan # table_name
% rel # name
% clob # type
% 58 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ] COUNT 
| ) [ oblo.a ]
) [ wrd "1", wrd "2" ]
#PLAN select * from oblo LIMIT 2 OFFSET 1;
% .plan # table_name
% rel # name
% clob # type
% 58 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ] COUNT 
| ) [ oblo.a ]
) [ wrd "2", wrd "1" ]
#PLAN select * from oblo ORDER BY a;
% .plan # table_name
% rel # name
% clob # type
% 56 # length
project (
| table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ] COUNT 
) [ oblo.a ] [ oblo.a ASC ]
#PLAN select * from oblo ORDER BY a OFFSET 2;
% .plan # table_name
% rel # name
% clob # type
% 58 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ] COUNT 
| ) [ oblo.a ] [ oblo.a ASC ]
) [ wrd "2" ]
#PLAN select * from oblo ORDER BY a LIMIT 2;
% .plan # table_name
% rel # name
% clob # type
% 58 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ] COUNT 
| ) [ oblo.a ] [ oblo.a ASC ]
) [ wrd "2" ]
#PLAN select * from oblo ORDER BY a LIMIT 2 OFFSET 1;
% .plan # table_name
% rel # name
% clob # type
% 58 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ] COUNT 
| ) [ oblo.a ] [ oblo.a ASC ]
) [ wrd "2", wrd "1" ]
#PLAN select * from oblo ORDER BY a LIMIT 1 OFFSET 2;
% .plan # table_name
% rel # name
% clob # type
% 58 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ] COUNT 
| ) [ oblo.a ] [ oblo.a ASC ]
) [ wrd "1", wrd "2" ]
#EXPLAIN select * from oblo;
% .explain # table_name
% mal # name
% clob # type
% 62 # length
function user.s1_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_3:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",0);
    X_8:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",2);
    X_10 := algebra.kdifference(X_3,X_8);
    X_11 := algebra.kunion(X_10,X_8);
    X_12:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",1);
    X_14 := algebra.kunion(X_11,X_12);
    X_15:bat[:oid,:oid]  := sql.bind_dbat(X_2,"sys","oblo",1);
    X_16 := bat.reverse(X_15);
    X_17 := algebra.kdifference(X_14,X_16);
    X_22 := sql.resultSet(1,1,X_17);
    sql.rsColumn(X_22,"sys.oblo","a","int",32,0,X_17);
    X_27 := io.stdout();
    sql.exportResult(X_27,X_22);
end s1_1;
#EXPLAIN select * from oblo OFFSET 2;
% .explain # table_name
% mal # name
% clob # type
% 62 # length
function user.s2_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_3:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",0);
    X_8:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",2);
    X_10 := algebra.kdifference(X_3,X_8);
    X_11 := algebra.kunion(X_10,X_8);
    X_12:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",1);
    X_14 := algebra.kunion(X_11,X_12);
    X_15:bat[:oid,:oid]  := sql.bind_dbat(X_2,"sys","oblo",1);
    X_16 := bat.reverse(X_15);
    X_17 := algebra.kdifference(X_14,X_16);
    X_24 := calc.wrd(2:wrd);
    X_26 := calc.wrd(nil:wrd);
    X_28 := calc.+(X_24,X_26);
    X_29 := calc.-(X_28,1);
    X_30 := algebra.slice(X_17,X_24,X_29);
    X_31 := bat.mirror(X_30);
    X_32 := algebra.leftjoin(X_31,X_17);
    X_35 := sql.resultSet(1,1,X_32);
    sql.rsColumn(X_35,"sys.oblo","a","int",32,0,X_32);
    X_41 := io.stdout();
    sql.exportResult(X_41,X_35);
end s2_1;
#EXPLAIN select * from oblo LIMIT 2;
% .explain # table_name
% mal # name
% clob # type
% 62 # length
function user.s3_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_3:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",0);
    X_8:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",2);
    X_10 := algebra.kdifference(X_3,X_8);
    X_11 := algebra.kunion(X_10,X_8);
    X_12:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",1);
    X_14 := algebra.kunion(X_11,X_12);
    X_15:bat[:oid,:oid]  := sql.bind_dbat(X_2,"sys","oblo",1);
    X_16 := bat.reverse(X_15);
    X_17 := algebra.kdifference(X_14,X_16);
    X_24 := calc.wrd(0:wrd);
    X_26 := calc.wrd(2:wrd);
    X_28 := calc.+(X_24,X_26);
    X_29 := calc.-(X_28,1);
    X_30 := algebra.slice(X_17,X_24,X_29);
    X_31 := bat.mirror(X_30);
    X_32 := algebra.leftjoin(X_31,X_17);
    X_35 := sql.resultSet(1,1,X_32);
    sql.rsColumn(X_35,"sys.oblo","a","int",32,0,X_32);
    X_41 := io.stdout();
    sql.exportResult(X_41,X_35);
end s3_1;
#EXPLAIN select * from oblo LIMIT 1 OFFSET 2;
% .explain # table_name
% mal # name
% clob # type
% 62 # length
function user.s4_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_3:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",0);
    X_8:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",2);
    X_10 := algebra.kdifference(X_3,X_8);
    X_11 := algebra.kunion(X_10,X_8);
    X_12:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",1);
    X_14 := algebra.kunion(X_11,X_12);
    X_15:bat[:oid,:oid]  := sql.bind_dbat(X_2,"sys","oblo",1);
    X_16 := bat.reverse(X_15);
    X_17 := algebra.kdifference(X_14,X_16);
    X_24 := calc.wrd(2:wrd);
    X_26 := calc.wrd(1:wrd);
    X_28 := calc.+(X_24,X_26);
    X_29 := calc.-(X_28,1);
    X_30 := algebra.slice(X_17,X_24,X_29);
    X_31 := bat.mirror(X_30);
    X_32 := algebra.leftjoin(X_31,X_17);
    X_35 := sql.resultSet(1,1,X_32);
    sql.rsColumn(X_35,"sys.oblo","a","int",32,0,X_32);
    X_41 := io.stdout();
    sql.exportResult(X_41,X_35);
end s4_1;
#EXPLAIN select * from oblo LIMIT 2 OFFSET 1;
% .explain # table_name
% mal # name
% clob # type
% 62 # length
function user.s5_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_3:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",0);
    X_8:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",2);
    X_10 := algebra.kdifference(X_3,X_8);
    X_11 := algebra.kunion(X_10,X_8);
    X_12:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",1);
    X_14 := algebra.kunion(X_11,X_12);
    X_15:bat[:oid,:oid]  := sql.bind_dbat(X_2,"sys","oblo",1);
    X_16 := bat.reverse(X_15);
    X_17 := algebra.kdifference(X_14,X_16);
    X_24 := calc.wrd(1:wrd);
    X_26 := calc.wrd(2:wrd);
    X_28 := calc.+(X_24,X_26);
    X_29 := calc.-(X_28,1);
    X_30 := algebra.slice(X_17,X_24,X_29);
    X_31 := bat.mirror(X_30);
    X_32 := algebra.leftjoin(X_31,X_17);
    X_35 := sql.resultSet(1,1,X_32);
    sql.rsColumn(X_35,"sys.oblo","a","int",32,0,X_32);
    X_41 := io.stdout();
    sql.exportResult(X_41,X_35);
end s5_1;
#EXPLAIN select * from oblo ORDER BY a;
% .explain # table_name
% mal # name
% clob # type
% 62 # length
function user.s6_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_3:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",0);
    X_8:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",2);
    X_10 := algebra.kdifference(X_3,X_8);
    X_11 := algebra.kunion(X_10,X_8);
    X_12:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",1);
    X_14 := algebra.kunion(X_11,X_12);
    X_15:bat[:oid,:oid]  := sql.bind_dbat(X_2,"sys","oblo",1);
    X_16 := bat.reverse(X_15);
    X_17 := algebra.kdifference(X_14,X_16);
    X_22 := algebra.sortTail(X_17);
    X_23 := calc.oid(0@0);
    X_25 := algebra.markT(X_22,X_23);
    X_26 := bat.reverse(X_25);
    X_27 := algebra.leftjoin(X_26,X_17);
    X_30 := sql.resultSet(1,1,X_27);
    sql.rsColumn(X_30,"sys.oblo","a","int",32,0,X_27);
    X_35 := io.stdout();
    sql.exportResult(X_35,X_30);
end s6_1;
#EXPLAIN select * from oblo ORDER BY a OFFSET 2;
% .explain # table_name
% mal # name
% clob # type
% 62 # length
function user.s7_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_3:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",0);
    X_8:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",2);
    X_10 := algebra.kdifference(X_3,X_8);
    X_11 := algebra.kunion(X_10,X_8);
    X_12:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",1);
    X_14 := algebra.kunion(X_11,X_12);
    X_15:bat[:oid,:oid]  := sql.bind_dbat(X_2,"sys","oblo",1);
    X_16 := bat.reverse(X_15);
    X_17 := algebra.kdifference(X_14,X_16);
    X_22 := algebra.sortTail(X_17);
    X_23 := calc.oid(0@0);
    X_25 := algebra.markT(X_22,X_23);
    X_26 := bat.reverse(X_25);
    X_27 := algebra.leftjoin(X_26,X_17);
    X_32 := calc.wrd(2:wrd);
    X_34 := calc.wrd(nil:wrd);
    X_36 := calc.+(X_32,X_34);
    X_37 := calc.-(X_36,1);
    X_38 := algebra.slice(X_27,X_32,X_37);
    X_39 := bat.mirror(X_38);
    X_40 := algebra.leftjoin(X_39,X_27);
    X_45 := sql.resultSet(1,1,X_40);
    sql.rsColumn(X_45,"sys.oblo","a","int",32,0,X_40);
    X_52 := io.stdout();
    sql.exportResult(X_52,X_45);
end s7_1;
#EXPLAIN select * from oblo ORDER BY a LIMIT 2;
% .explain # table_name
% mal # name
% clob # type
% 62 # length
function user.s8_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_3:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",0);
    X_8:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",2);
    X_10 := algebra.kdifference(X_3,X_8);
    X_11 := algebra.kunion(X_10,X_8);
    X_12:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",1);
    X_14 := algebra.kunion(X_11,X_12);
    X_15:bat[:oid,:oid]  := sql.bind_dbat(X_2,"sys","oblo",1);
    X_16 := bat.reverse(X_15);
    X_17 := algebra.kdifference(X_14,X_16);
    X_22 := calc.wrd(0:wrd);
    X_24 := calc.wrd(2:wrd);
    X_26 := calc.+(X_22,X_24);
    X_27 := pqueue.topn_max(X_17,X_26);
    X_28 := bat.mirror(X_27);
    X_29 := algebra.leftjoin(X_28,X_17);
    X_32 := calc.wrd(0:wrd);
    X_33 := calc.wrd(2:wrd);
    X_34 := calc.+(X_32,X_33);
    X_35 := calc.-(X_34,1);
    X_36 := algebra.slice(X_29,X_32,X_35);
    X_37 := bat.mirror(X_36);
    X_38 := algebra.leftjoin(X_37,X_29);
    X_43 := sql.resultSet(1,1,X_38);
    sql.rsColumn(X_43,"sys.oblo","a","int",32,0,X_38);
    X_49 := io.stdout();
    sql.exportResult(X_49,X_43);
end s8_1;
#EXPLAIN select * from oblo ORDER BY a LIMIT 2 OFFSET 1;
% .explain # table_name
% mal # name
% clob # type
% 62 # length
function user.s9_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_3:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",0);
    X_8:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",2);
    X_10 := algebra.kdifference(X_3,X_8);
    X_11 := algebra.kunion(X_10,X_8);
    X_12:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",1);
    X_14 := algebra.kunion(X_11,X_12);
    X_15:bat[:oid,:oid]  := sql.bind_dbat(X_2,"sys","oblo",1);
    X_16 := bat.reverse(X_15);
    X_17 := algebra.kdifference(X_14,X_16);
    X_22 := calc.wrd(0:wrd);
    X_24 := calc.wrd(2:wrd);
    X_26 := calc.wrd(1:wrd);
    X_28 := calc.+(X_24,X_26);
    X_29 := calc.+(X_22,X_28);
    X_30 := pqueue.topn_max(X_17,X_29);
    X_31 := bat.mirror(X_30);
    X_32 := algebra.leftjoin(X_31,X_17);
    X_35 := calc.wrd(1:wrd);
    X_36 := calc.wrd(2:wrd);
    X_37 := calc.+(X_35,X_36);
    X_38 := calc.-(X_37,1);
    X_39 := algebra.slice(X_32,X_35,X_38);
    X_40 := bat.mirror(X_39);
    X_41 := algebra.leftjoin(X_40,X_32);
    X_46 := sql.resultSet(1,1,X_41);
    sql.rsColumn(X_46,"sys.oblo","a","int",32,0,X_41);
    X_53 := io.stdout();
    sql.exportResult(X_53,X_46);
end s9_1;
#EXPLAIN select * from oblo ORDER BY a LIMIT 1 OFFSET 2;
% .explain # table_name
% mal # name
% clob # type
% 62 # length
function user.s10_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_3:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",0);
    X_8:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",2);
    X_10 := algebra.kdifference(X_3,X_8);
    X_11 := algebra.kunion(X_10,X_8);
    X_12:bat[:oid,:int]  := sql.bind(X_2,"sys","oblo","a",1);
    X_14 := algebra.kunion(X_11,X_12);
    X_15:bat[:oid,:oid]  := sql.bind_dbat(X_2,"sys","oblo",1);
    X_16 := bat.reverse(X_15);
    X_17 := algebra.kdifference(X_14,X_16);
    X_22 := calc.wrd(0:wrd);
    X_24 := calc.wrd(1:wrd);
    X_26 := calc.wrd(2:wrd);
    X_28 := calc.+(X_24,X_26);
    X_29 := calc.+(X_22,X_28);
    X_30 := pqueue.topn_max(X_17,X_29);
    X_31 := bat.mirror(X_30);
    X_32 := algebra.leftjoin(X_31,X_17);
    X_35 := calc.wrd(2:wrd);
    X_36 := calc.wrd(1:wrd);
    X_37 := calc.+(X_35,X_36);
    X_38 := calc.-(X_37,1);
    X_39 := algebra.slice(X_32,X_35,X_38);
    X_40 := bat.mirror(X_39);
    X_41 := algebra.leftjoin(X_40,X_32);
    X_46 := sql.resultSet(1,1,X_41);
    sql.rsColumn(X_46,"sys.oblo","a","int",32,0,X_41);
    X_53 := io.stdout();
    sql.exportResult(X_53,X_46);
end s10_1;
#select * from oblo;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 4	]
[ 3	]
[ 2	]
[ 1	]
#select * from oblo OFFSET 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 2	]
[ 1	]
#select * from oblo LIMIT 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 4	]
[ 3	]
#select * from oblo LIMIT 1 OFFSET 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 2	]
#select * from oblo LIMIT 2 OFFSET 1;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 3	]
[ 2	]
#select * from oblo ORDER BY a;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
[ 4	]
#select * from oblo ORDER BY a OFFSET 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 3	]
[ 4	]
#select * from oblo ORDER BY a LIMIT 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 1	]
[ 2	]
#select * from oblo ORDER BY a LIMIT 2 OFFSET 1;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 2	]
[ 3	]
#select * from oblo ORDER BY a LIMIT 1 OFFSET 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 3	]

# 21:05:24 >  
# 21:05:24 >  Done.
# 21:05:24 >  

