stdout of test 'LIMIT_OFFSET_big-endian.Bug-2622` in directory 'sql/test/BugTracker-2010` itself:


# 21:05:24 >  
# 21:05:24 >   mserver5 "--config=/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/lib64/MonetDB5:/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/lib64/MonetDB5/lib:/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/lib64/MonetDB5/bin" --set "gdk_dbfarm=/ufs/manegold/_/scratch0/Monet/HG/Jun2010/prefix.--enable-strict_--disable-debug_--enable-optimize_--enable-assert/var/MonetDB5/dbfarm"  --set mapi_open=true --set xrpc_open=true --set mapi_port=38140 --set xrpc_port=48203 --set monet_prompt= --set mal_listing=2 --trace  "--dbname=mTests_src_test_BugTracker-2010" --set mal_listing=0 ; echo ; echo Over..
# 21:05:24 >  

# MonetDB server v5.20.3, based on kernel v1.38.3
# Serving database 'mTests_src_test_BugTracker-2010', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 7.751 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2013 MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://rig.ins.cwi.nl:38140/
# MonetDB/SQL module v2.38.3 loaded
# MonetDB/GIS module v0.18.3 loaded

Ready.


# 21:05:24 >  
# 21:05:24 >  mclient -lsql -ftest -i -e --host=rig --port=38140 
# 21:05:24 >  

[ 1	]
[ 1	]
[ 1	]
[ 1	]

#PLAN select * from oblo;
% .plan # table_name
% rel # name
% clob # type
% 56 # length
project (
| table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ] COUNT 
) [ oblo.a ]
#PLAN select * from oblo OFFSET 2;
% .plan # table_name
% rel # name
% clob # type
% 58 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ] COUNT 
| ) [ oblo.a ]
) [ wrd "2" ]
#PLAN select * from oblo LIMIT 2;
% .plan # table_name
% rel # name
% clob # type
% 58 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ] COUNT 
| ) [ oblo.a ]
) [ wrd "2" ]
#PLAN select * from oblo LIMIT 1 OFFSET 2;
% .plan # table_name
% rel # name
% clob # type
% 58 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ] COUNT 
| ) [ oblo.a ]
) [ wrd "1", wrd "2" ]
#PLAN select * from oblo LIMIT 2 OFFSET 1;
% .plan # table_name
% rel # name
% clob # type
% 58 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ] COUNT 
| ) [ oblo.a ]
) [ wrd "2", wrd "1" ]
#PLAN select * from oblo ORDER BY a;
% .plan # table_name
% rel # name
% clob # type
% 56 # length
project (
| table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ] COUNT 
) [ oblo.a ] [ oblo.a ASC ]
#PLAN select * from oblo ORDER BY a OFFSET 2;
% .plan # table_name
% rel # name
% clob # type
% 58 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ] COUNT 
| ) [ oblo.a ] [ oblo.a ASC ]
) [ wrd "2" ]
#PLAN select * from oblo ORDER BY a LIMIT 2;
% .plan # table_name
% rel # name
% clob # type
% 58 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ] COUNT 
| ) [ oblo.a ] [ oblo.a ASC ]
) [ wrd "2" ]
#PLAN select * from oblo ORDER BY a LIMIT 2 OFFSET 1;
% .plan # table_name
% rel # name
% clob # type
% 58 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ] COUNT 
| ) [ oblo.a ] [ oblo.a ASC ]
) [ wrd "2", wrd "1" ]
#PLAN select * from oblo ORDER BY a LIMIT 1 OFFSET 2;
% .plan # table_name
% rel # name
% clob # type
% 58 # length
top N (
| project (
| | table(sys.oblo) [ oblo.a, oblo.%TID% NOT NULL ] COUNT 
| ) [ oblo.a ] [ oblo.a ASC ]
) [ wrd "1", wrd "2" ]
#EXPLAIN select * from oblo;
% .explain # table_name
% mal # name
% clob # type
% 54 # length
function user.s1_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_3:bat[:oid,:oid]  := sql.tid(X_2,"sys","oblo");
    X_6 := sql.bind(X_2,"sys","oblo","a",0);
    (X_9,r1_9) := sql.bind(X_2,"sys","oblo","a",2);
    X_12 := sql.bind(X_2,"sys","oblo","a",1);
    X_14 := sql.delta(X_6,X_9,r1_9,X_12);
    X_15 := algebra.leftfetchjoin(X_3,X_14);
    X_16 := sql.resultSet(1,1,X_15);
    sql.rsColumn(X_16,"sys.oblo","a","int",32,0,X_15);
    X_21 := io.stdout();
    sql.exportResult(X_21,X_16);
end s1_1;
#EXPLAIN select * from oblo OFFSET 2;
% .explain # table_name
% mal # name
% clob # type
% 54 # length
function user.s2_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_3:bat[:oid,:oid]  := sql.tid(X_2,"sys","oblo");
    X_6 := sql.bind(X_2,"sys","oblo","a",0);
    (X_9,r1_9) := sql.bind(X_2,"sys","oblo","a",2);
    X_12 := sql.bind(X_2,"sys","oblo","a",1);
    X_14 := sql.delta(X_6,X_9,r1_9,X_12);
    X_15 := algebra.leftfetchjoin(X_3,X_14);
    X_16 := calc.wrd(2:wrd);
    X_18 := calc.wrd(nil:wrd);
    X_20 := calc.+(X_16,X_18);
    X_21 := calc.-(X_20,1);
    X_22 := algebra.subslice(X_15,X_16,X_21);
    X_23 := algebra.leftfetchjoin(X_22,X_15);
    X_24 := sql.resultSet(1,1,X_23);
    sql.rsColumn(X_24,"sys.oblo","a","int",32,0,X_23);
    X_29 := io.stdout();
    sql.exportResult(X_29,X_24);
end s2_1;
#EXPLAIN select * from oblo LIMIT 2;
% .explain # table_name
% mal # name
% clob # type
% 54 # length
function user.s3_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_3:bat[:oid,:oid]  := sql.tid(X_2,"sys","oblo");
    X_6 := sql.bind(X_2,"sys","oblo","a",0);
    (X_9,r1_9) := sql.bind(X_2,"sys","oblo","a",2);
    X_12 := sql.bind(X_2,"sys","oblo","a",1);
    X_14 := sql.delta(X_6,X_9,r1_9,X_12);
    X_15 := algebra.leftfetchjoin(X_3,X_14);
    X_16 := calc.wrd(0:wrd);
    X_18 := calc.wrd(2:wrd);
    X_20 := calc.+(X_16,X_18);
    X_21 := calc.-(X_20,1);
    X_22 := algebra.subslice(X_15,X_16,X_21);
    X_23 := algebra.leftfetchjoin(X_22,X_15);
    X_24 := sql.resultSet(1,1,X_23);
    sql.rsColumn(X_24,"sys.oblo","a","int",32,0,X_23);
    X_29 := io.stdout();
    sql.exportResult(X_29,X_24);
end s3_1;
#EXPLAIN select * from oblo LIMIT 1 OFFSET 2;
% .explain # table_name
% mal # name
% clob # type
% 54 # length
function user.s4_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_3:bat[:oid,:oid]  := sql.tid(X_2,"sys","oblo");
    X_6 := sql.bind(X_2,"sys","oblo","a",0);
    (X_9,r1_9) := sql.bind(X_2,"sys","oblo","a",2);
    X_12 := sql.bind(X_2,"sys","oblo","a",1);
    X_14 := sql.delta(X_6,X_9,r1_9,X_12);
    X_15 := algebra.leftfetchjoin(X_3,X_14);
    X_16 := calc.wrd(2:wrd);
    X_18 := calc.wrd(1:wrd);
    X_20 := calc.+(X_16,X_18);
    X_21 := calc.-(X_20,1);
    X_22 := algebra.subslice(X_15,X_16,X_21);
    X_23 := algebra.leftfetchjoin(X_22,X_15);
    X_24 := sql.resultSet(1,1,X_23);
    sql.rsColumn(X_24,"sys.oblo","a","int",32,0,X_23);
    X_29 := io.stdout();
    sql.exportResult(X_29,X_24);
end s4_1;
#EXPLAIN select * from oblo LIMIT 2 OFFSET 1;
% .explain # table_name
% mal # name
% clob # type
% 54 # length
function user.s5_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_3:bat[:oid,:oid]  := sql.tid(X_2,"sys","oblo");
    X_6 := sql.bind(X_2,"sys","oblo","a",0);
    (X_9,r1_9) := sql.bind(X_2,"sys","oblo","a",2);
    X_12 := sql.bind(X_2,"sys","oblo","a",1);
    X_14 := sql.delta(X_6,X_9,r1_9,X_12);
    X_15 := algebra.leftfetchjoin(X_3,X_14);
    X_16 := calc.wrd(1:wrd);
    X_18 := calc.wrd(2:wrd);
    X_20 := calc.+(X_16,X_18);
    X_21 := calc.-(X_20,1);
    X_22 := algebra.subslice(X_15,X_16,X_21);
    X_23 := algebra.leftfetchjoin(X_22,X_15);
    X_24 := sql.resultSet(1,1,X_23);
    sql.rsColumn(X_24,"sys.oblo","a","int",32,0,X_23);
    X_29 := io.stdout();
    sql.exportResult(X_29,X_24);
end s5_1;
#EXPLAIN select * from oblo ORDER BY a;
% .explain # table_name
% mal # name
% clob # type
% 60 # length
function user.s6_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_3:bat[:oid,:oid]  := sql.tid(X_2,"sys","oblo");
    X_6 := sql.bind(X_2,"sys","oblo","a",0);
    (X_9,r1_9) := sql.bind(X_2,"sys","oblo","a",2);
    X_12 := sql.bind(X_2,"sys","oblo","a",1);
    X_14 := sql.delta(X_6,X_9,r1_9,X_12);
    X_15 := algebra.leftfetchjoin(X_3,X_14);
    (X_16,r1_16,r2_16) := algebra.subsort(X_15,false,false);
    X_20 := algebra.leftfetchjoin(r1_16,X_15);
    X_21 := sql.resultSet(1,1,X_20);
    sql.rsColumn(X_21,"sys.oblo","a","int",32,0,X_20);
    X_26 := io.stdout();
    sql.exportResult(X_26,X_21);
end s6_1;
#EXPLAIN select * from oblo ORDER BY a OFFSET 2;
% .explain # table_name
% mal # name
% clob # type
% 60 # length
function user.s7_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_3:bat[:oid,:oid]  := sql.tid(X_2,"sys","oblo");
    X_6 := sql.bind(X_2,"sys","oblo","a",0);
    (X_9,r1_9) := sql.bind(X_2,"sys","oblo","a",2);
    X_12 := sql.bind(X_2,"sys","oblo","a",1);
    X_14 := sql.delta(X_6,X_9,r1_9,X_12);
    X_15 := algebra.leftfetchjoin(X_3,X_14);
    (X_16,r1_16,r2_16) := algebra.subsort(X_15,false,false);
    X_20 := algebra.leftfetchjoin(r1_16,X_15);
    X_21 := calc.wrd(2:wrd);
    X_23 := calc.wrd(nil:wrd);
    X_25 := calc.+(X_21,X_23);
    X_26 := calc.-(X_25,1);
    X_27 := algebra.subslice(X_20,X_21,X_26);
    X_28 := algebra.leftfetchjoin(X_27,X_20);
    X_29 := sql.resultSet(1,1,X_28);
    sql.rsColumn(X_29,"sys.oblo","a","int",32,0,X_28);
    X_34 := io.stdout();
    sql.exportResult(X_34,X_29);
end s7_1;
#EXPLAIN select * from oblo ORDER BY a LIMIT 2;
% .explain # table_name
% mal # name
% clob # type
% 54 # length
function user.s8_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_3:bat[:oid,:oid]  := sql.tid(X_2,"sys","oblo");
    X_6 := sql.bind(X_2,"sys","oblo","a",0);
    (X_9,r1_9) := sql.bind(X_2,"sys","oblo","a",2);
    X_12 := sql.bind(X_2,"sys","oblo","a",1);
    X_14 := sql.delta(X_6,X_9,r1_9,X_12);
    X_15 := algebra.leftfetchjoin(X_3,X_14);
    X_16 := calc.wrd(0:wrd);
    X_18 := calc.wrd(2:wrd);
    X_20 := calc.+(X_16,X_18);
    X_21 := pqueue.topn_max(X_15,X_20);
    X_22 := calc.wrd(0:wrd);
    X_23 := calc.+(X_22,X_18);
    X_24 := calc.-(X_23,1);
    X_25 := algebra.subslice(X_21,X_22,X_24);
    X_26 := algebra.leftfetchjoin(X_25,X_15);
    X_27 := calc.wrd(0:wrd);
    X_28 := calc.wrd(2:wrd);
    X_29 := calc.+(X_27,X_28);
    X_30 := calc.-(X_29,1);
    X_31 := algebra.subslice(X_26,X_27,X_30);
    X_32 := algebra.leftfetchjoin(X_31,X_26);
    X_33 := sql.resultSet(1,1,X_32);
    sql.rsColumn(X_33,"sys.oblo","a","int",32,0,X_32);
    X_38 := io.stdout();
    sql.exportResult(X_38,X_33);
end s8_1;
#EXPLAIN select * from oblo ORDER BY a LIMIT 2 OFFSET 1;
% .explain # table_name
% mal # name
% clob # type
% 54 # length
function user.s9_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_3:bat[:oid,:oid]  := sql.tid(X_2,"sys","oblo");
    X_6 := sql.bind(X_2,"sys","oblo","a",0);
    (X_9,r1_9) := sql.bind(X_2,"sys","oblo","a",2);
    X_12 := sql.bind(X_2,"sys","oblo","a",1);
    X_14 := sql.delta(X_6,X_9,r1_9,X_12);
    X_15 := algebra.leftfetchjoin(X_3,X_14);
    X_16 := calc.wrd(0:wrd);
    X_18 := calc.wrd(2:wrd);
    X_20 := calc.wrd(1:wrd);
    X_22 := calc.+(X_18,X_20);
    X_23 := calc.+(X_16,X_22);
    X_24 := pqueue.topn_max(X_15,X_23);
    X_25 := calc.wrd(0:wrd);
    X_26 := calc.+(X_25,X_22);
    X_27 := calc.-(X_26,1);
    X_28 := algebra.subslice(X_24,X_25,X_27);
    X_29 := algebra.leftfetchjoin(X_28,X_15);
    X_30 := calc.wrd(1:wrd);
    X_31 := calc.wrd(2:wrd);
    X_32 := calc.+(X_30,X_31);
    X_33 := calc.-(X_32,1);
    X_34 := algebra.subslice(X_29,X_30,X_33);
    X_35 := algebra.leftfetchjoin(X_34,X_29);
    X_36 := sql.resultSet(1,1,X_35);
    sql.rsColumn(X_36,"sys.oblo","a","int",32,0,X_35);
    X_42 := io.stdout();
    sql.exportResult(X_42,X_36);
end s9_1;
#EXPLAIN select * from oblo ORDER BY a LIMIT 1 OFFSET 2;
% .explain # table_name
% mal # name
% clob # type
% 54 # length
function user.s10_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_3:bat[:oid,:oid]  := sql.tid(X_2,"sys","oblo");
    X_6 := sql.bind(X_2,"sys","oblo","a",0);
    (X_9,r1_9) := sql.bind(X_2,"sys","oblo","a",2);
    X_12 := sql.bind(X_2,"sys","oblo","a",1);
    X_14 := sql.delta(X_6,X_9,r1_9,X_12);
    X_15 := algebra.leftfetchjoin(X_3,X_14);
    X_16 := calc.wrd(0:wrd);
    X_18 := calc.wrd(1:wrd);
    X_20 := calc.wrd(2:wrd);
    X_22 := calc.+(X_18,X_20);
    X_23 := calc.+(X_16,X_22);
    X_24 := pqueue.topn_max(X_15,X_23);
    X_25 := calc.wrd(0:wrd);
    X_26 := calc.+(X_25,X_22);
    X_27 := calc.-(X_26,1);
    X_28 := algebra.subslice(X_24,X_25,X_27);
    X_29 := algebra.leftfetchjoin(X_28,X_15);
    X_30 := calc.wrd(2:wrd);
    X_31 := calc.wrd(1:wrd);
    X_32 := calc.+(X_30,X_31);
    X_33 := calc.-(X_32,1);
    X_34 := algebra.subslice(X_29,X_30,X_33);
    X_35 := algebra.leftfetchjoin(X_34,X_29);
    X_36 := sql.resultSet(1,1,X_35);
    sql.rsColumn(X_36,"sys.oblo","a","int",32,0,X_35);
    X_42 := io.stdout();
    sql.exportResult(X_42,X_36);
end s10_1;
#select * from oblo;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 4	]
[ 3	]
[ 2	]
[ 1	]
#select * from oblo OFFSET 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 2	]
[ 1	]
#select * from oblo LIMIT 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 4	]
[ 3	]
#select * from oblo LIMIT 1 OFFSET 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 2	]
#select * from oblo LIMIT 2 OFFSET 1;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 3	]
[ 2	]
#select * from oblo ORDER BY a;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
[ 4	]
#select * from oblo ORDER BY a OFFSET 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 3	]
[ 4	]
#select * from oblo ORDER BY a LIMIT 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 1	]
[ 2	]
#select * from oblo ORDER BY a LIMIT 2 OFFSET 1;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 2	]
[ 3	]
#select * from oblo ORDER BY a LIMIT 1 OFFSET 2;
% sys.oblo # table_name
% a # name
% int # type
% 1 # length
[ 3	]

# 21:05:24 >  
# 21:05:24 >  Done.
# 21:05:24 >  

