stdout of test 'limit_in_prepare.Bug-2552` in directory 'sql/test/BugTracker-2010` itself:


# 08:45:11 >  
# 08:45:11 >   mserver5 "--config=/ufs/niels/scratch/rc/Linux-x86_64/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/niels/scratch/rc/Linux-x86_64/lib/MonetDB5:/ufs/niels/scratch/rc/Linux-x86_64/lib/MonetDB5/lib:/ufs/niels/scratch/rc/Linux-x86_64/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/niels/scratch/rc/Linux-x86_64/var/MonetDB5/dbfarm"  --set mapi_open=true --set xrpc_open=true --set mapi_port=35663 --set xrpc_port=48610 --set monet_prompt= --set mal_listing=2 --trace  "--dbname=mTests_src_test_BugTracker-2010" --set mal_listing=0 ; echo ; echo Over..
# 08:45:11 >  

# MonetDB server v5.20.0, based on kernel v1.38.0
# Serving database 'mTests_src_test_BugTracker-2010', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 7.754 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2013 MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://alf.ins.cwi.nl:35663/
# MonetDB/SQL module v2.38.0 loaded

Ready.


# 08:45:11 >  
# 08:45:11 >  mclient -lsql -ftest -i -e --host=alf --port=35663 
# 08:45:11 >  

[ 3	]
#prepare select * from rr limit ?;
#prepare select * from rr limit ?;
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	str,	str,	str # type
% 3,	3,	1,	0,	2,	2 # length
[ "int",	32,	0,	"",	"rr",	"id"	]
[ "wrd",	32,	0,	NULL,	NULL,	NULL	]
#exec 3 (1);
% sys.rr # table_name
% id # name
% int # type
% 1 # length
[ 1	]
#drop table rr;
#prepare select name, schema_id, query, type, system, commit_action, readonly, temporary from tables limit 42;
#prepare select name, schema_id, query, type, system, commit_action, readonly, temporary from tables limit 42;
% .prepare,	.prepare,	.prepare,	.prepare,	.prepare,	.prepare # table_name
% type,	digits,	scale,	schema,	table,	column # name
% varchar,	int,	int,	str,	str,	str # type
% 8,	4,	1,	0,	6,	13 # length
[ "varchar",	1024,	0,	"",	"tables",	"name"	]
[ "int",	32,	0,	"",	"tables",	"schema_id"	]
[ "varchar",	2048,	0,	"",	"tables",	"query"	]
[ "smallint",	16,	0,	"",	"tables",	"type"	]
[ "boolean",	1,	0,	"",	"tables",	"system"	]
[ "smallint",	16,	0,	"",	"tables",	"commit_action"	]
[ "boolean",	1,	0,	"",	"tables",	"readonly"	]
[ "tinyint",	8,	0,	"",	"tables",	"temporary"	]
#exec  2 ();
% .tables,	.tables,	.tables,	.tables,	.tables,	.tables,	.tables,	.tables # table_name
% name,	schema_id,	query,	type,	system,	commit_action,	readonly,	temporary # name
% varchar,	int,	varchar,	smallint,	boolean,	smallint,	boolean,	tinyint # type
% 17,	4,	496,	1,	5,	1,	5,	1 # length
[ "schemas",	2000,	NULL,	0,	true,	0,	false,	0	]
[ "types",	2000,	NULL,	0,	true,	0,	false,	0	]
[ "functions",	2000,	NULL,	0,	true,	0,	false,	0	]
[ "args",	2000,	NULL,	0,	true,	0,	false,	0	]
[ "sequences",	2000,	NULL,	0,	true,	0,	false,	0	]
[ "dependencies",	2000,	NULL,	0,	true,	0,	false,	0	]
[ "connections",	2000,	NULL,	0,	true,	0,	false,	0	]
[ "_tables",	2000,	NULL,	0,	true,	0,	false,	0	]
[ "_columns",	2000,	NULL,	0,	true,	0,	false,	0	]
[ "keys",	2000,	NULL,	0,	true,	0,	false,	0	]
[ "idxs",	2000,	NULL,	0,	true,	0,	false,	0	]
[ "triggers",	2000,	NULL,	0,	true,	0,	false,	0	]
[ "objects",	2000,	NULL,	0,	true,	0,	false,	0	]
[ "_tables",	2102,	NULL,	0,	true,	2,	false,	0	]
[ "_columns",	2102,	NULL,	0,	true,	2,	false,	0	]
[ "keys",	2102,	NULL,	0,	true,	2,	false,	0	]
[ "idxs",	2102,	NULL,	0,	true,	2,	false,	0	]
[ "triggers",	2102,	NULL,	0,	true,	2,	false,	0	]
[ "objects",	2102,	NULL,	0,	true,	2,	false,	0	]
[ "tables",	2000,	"SELECT * FROM (SELECT p.*, 0 AS \"temporary\" FROM \"sys\".\"_tables\" AS p UNION ALL SELECT t.*, 1 AS \"temporary\" FROM \"tmp\".\"_tables\" AS t) AS tables where tables.type <> 2;",	1,	true,	0,	false,	0	]
[ "columns",	2000,	"SELECT * FROM (SELECT p.* FROM \"sys\".\"_columns\" AS p UNION ALL SELECT t.* FROM \"tmp\".\"_columns\" AS t) AS columns;",	1,	true,	0,	false,	0	]
[ "db_user_info",	2000,	NULL,	0,	true,	0,	false,	0	]
[ "users",	2000,	"SELECT u.\"name\" AS \"name\", ui.\"fullname\", ui.\"default_schema\" FROM db_users() AS u LEFT JOIN \"sys\".\"db_user_info\" AS ui ON u.\"name\" = ui.\"name\" ;",	1,	true,	0,	false,	0	]
[ "user_role",	2000,	NULL,	0,	true,	0,	false,	0	]
[ "auths",	2000,	NULL,	0,	true,	0,	false,	0	]
[ "privileges",	2000,	NULL,	0,	true,	0,	false,	0	]
[ "queryhistory",	2000,	NULL,	0,	true,	0,	false,	0	]
[ "callhistory",	2000,	NULL,	0,	true,	0,	false,	0	]
[ "querylog",	2000,	"create view querylog as\nselect qd.*, ql.ctime, ql.arguments, ql.exec, ql.result, ql.foot, ql.memory, ql.tuples, ql.inblock, ql.oublock from queryhistory qd, callhistory ql\nwhere qd.id = ql.id;",	1,	true,	0,	false,	0	]
[ "storagemodelinput",	2000,	NULL,	0,	true,	0,	false,	0	]
[ "tablestoragemodel",	2000,	"-- A summary of the table storage requirement is is available as a table view.\n-- The auxillary column denotes the maximum space if all non-sorted columns\n-- would be augmented with a hash (rare situation)\ncreate view sys.tablestoragemodel\nas select \"schema\",\"table\",max(count) as \"count\",\n\tsum(columnsize) as columnsize,\n\tsum(heapsize) as heapsize,\n\tsum(indices) as indices,\n\tsum(case when sorted = false then 8 * count else 0 end) as auxillary\nfrom sys.storagemodel() group by \"schema\",\"table\";",	1,	true,	0,	false,	0	]
[ "systemfunctions",	2000,	NULL,	0,	true,	0,	false,	0	]

# 11:49:44 >  
# 11:49:44 >  "Done."
# 11:49:44 >  

