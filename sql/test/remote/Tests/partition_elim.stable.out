stdout of test 'partition_elim` in directory 'sql/test/remote` itself:


# 18:37:29 >  
# 18:37:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35081" "--set" "mapi_usock=/var/tmp/mtest-17557/.s.monetdb.35081" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_remote" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 18:37:29 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_remote', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.333 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.nes.nl:35081/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17557/.s.monetdb.35081
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 40_json_hge.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_gsl.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 85_bam.sql
# loading sql script: 90_generator.sql
# loading sql script: 90_generator_hge.sql
# loading sql script: 99_system.sql

# 18:37:29 >  
# 18:37:29 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-17557" "--port=35081"
# 18:37:29 >  

#create merge table test (x double, y double);
#create table test1 (x double, y double);
#create table test2 (x double, y double);
#create table test3 (x double, y double);
#create table test4 (x double, y double);
#insert into test1 values (1.0, 1.0);
[ 1	]
#insert into test1 values (2.0, 2.0);
[ 1	]
#insert into test2 values (3.0, -1.0);
[ 1	]
#insert into test2 values (4.0, -2.0);
[ 1	]
#insert into test3 values (3.0, 1.0);
[ 1	]
#insert into test3 values (6.0, 2.0);
[ 1	]
#insert into test4 values (7.0, 1.0);
[ 1	]
#insert into test4 values (10.0, 2.0);
[ 1	]
#alter table test1 set read only;
#alter table test2 set read only;
#alter table test3 set read only;
#alter table test4 set read only;
#alter table test add table test1;
#alter table test add table test2;
#alter table test add table test3;
#alter table test add table test4;
#select x from test1 where x between 0 and -1;
% sys.test1 # table_name
% x # name
% double # type
% 24 # length
#select x from test2 where x between 0 and -1;
% sys.test2 # table_name
% x # name
% double # type
% 24 # length
#select x from test3 where x between 0 and -1;
% sys.test3 # table_name
% x # name
% double # type
% 24 # length
#select x from test4 where x between 0 and -1;
% sys.test4 # table_name
% x # name
% double # type
% 24 # length
#select y from test1 where y between 0 and -1;
% sys.test1 # table_name
% y # name
% double # type
% 24 # length
#select y from test2 where y between 0 and -1;
% sys.test2 # table_name
% y # name
% double # type
% 24 # length
#select y from test3 where y between 0 and -1;
% sys.test3 # table_name
% y # name
% double # type
% 24 # length
#select y from test4 where y between 0 and -1;
% sys.test4 # table_name
% y # name
% double # type
% 24 # length
#explain select x,y from test where x between 4.0 and 6.0;
% .explain # table_name
% mal # name
% clob # type
% 69 # length
function user.SQLanalyze{autoCommit=true}():void;
barrier X_99 := language.dataflow();
    X_3:bat[:oid,:dbl] := bat.new(nil:oid,nil:dbl);
    X_2 := sql.mvc();
    X_52:bat[:oid,:dbl] := sql.bind(X_2,"sys","test2","x",0,0,2);
    X_62 := X_52;
    X_49:bat[:oid,:oid] := sql.tid(X_2,"sys","test2",0,2);
    X_64 := algebra.subselect(X_62,X_49,4:dbl,6:dbl,true,true,false);
    X_66 := algebra.leftfetchjoin(X_64,X_62);
    X_53:bat[:oid,:dbl] := sql.bind(X_2,"sys","test2","x",0,1,2);
    X_63 := X_53;
    X_51:bat[:oid,:oid] := sql.tid(X_2,"sys","test2",1,2);
    X_65 := algebra.subselect(X_63,X_51,4:dbl,6:dbl,true,true,false);
    X_67 := algebra.leftfetchjoin(X_65,X_63);
    X_83 := mat.packIncrement(X_66,2);
    X_11 := mat.packIncrement(X_83,X_67);
    X_12 := bat.append(X_3,X_11,true);
    X_56:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","x",0,0,2);
    X_68 := X_56;
    X_54:bat[:oid,:oid] := sql.tid(X_2,"sys","test3",0,2);
    X_70 := algebra.subselect(X_68,X_54,4:dbl,6:dbl,true,true,false);
    X_72 := algebra.leftfetchjoin(X_70,X_68);
    X_57:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","x",0,1,2);
    X_69 := X_57;
    X_55:bat[:oid,:oid] := sql.tid(X_2,"sys","test3",1,2);
    X_71 := algebra.subselect(X_69,X_55,4:dbl,6:dbl,true,true,false);
    X_73 := algebra.leftfetchjoin(X_71,X_69);
    X_85 := mat.packIncrement(X_72,2);
    X_14 := mat.packIncrement(X_85,X_73);
    X_15 := bat.append(X_12,X_14,true);
    X_16:bat[:oid,:dbl] := bat.new(nil:oid,nil:dbl);
    X_58:bat[:oid,:dbl] := sql.bind(X_2,"sys","test2","y",0,0,2);
    X_74 := X_58;
    X_76 := algebra.leftfetchjoin(X_64,X_74);
    X_59:bat[:oid,:dbl] := sql.bind(X_2,"sys","test2","y",0,1,2);
    X_75 := X_59;
    X_77 := algebra.leftfetchjoin(X_65,X_75);
    X_87 := mat.packIncrement(X_76,2);
    X_18 := mat.packIncrement(X_87,X_77);
    X_19 := bat.append(X_16,X_18,true);
    X_60:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","y",0,0,2);
    X_78 := X_60;
    X_80 := algebra.leftfetchjoin(X_70,X_78);
    X_61:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","y",0,1,2);
    X_79 := X_61;
    X_81 := algebra.leftfetchjoin(X_71,X_79);
    X_89 := mat.packIncrement(X_80,2);
    X_21 := mat.packIncrement(X_89,X_81);
    X_22 := bat.append(X_19,X_21,true);
    language.pass(X_62);
    language.pass(X_63);
    language.pass(X_68);
    language.pass(X_69);
    language.pass(X_64);
    language.pass(X_65);
    language.pass(X_70);
    language.pass(X_71);
exit X_99;
    X_23 := sql.resultSet(2,1,X_15);
    sql.rsColumn(X_23,".test","x","double",53,0,X_15);
    sql.rsColumn(X_23,".test","y","double",53,0,X_22);
    X_33 := io.stdout();
    sql.exportResult(X_33,X_23);
end user.SQLanalyze;
#explain select x,y from test where x between (7-3) and (7-1);
% .explain # table_name
% mal # name
% clob # type
% 69 # length
function user.SQLanalyze{transparent, autoCommit=true}():void;
barrier X_103 := language.dataflow();
    X_3:bat[:oid,:dbl] := bat.new(nil:oid,nil:dbl);
    X_2 := sql.mvc();
    X_56:bat[:oid,:dbl] := sql.bind(X_2,"sys","test2","x",0,0,2);
    X_66 := X_56;
    X_53:bat[:oid,:oid] := sql.tid(X_2,"sys","test2",0,2);
    X_68 := algebra.subselect(X_66,X_53,4:dbl,6:dbl,true,true,false);
    X_70 := algebra.leftfetchjoin(X_68,X_66);
    X_57:bat[:oid,:dbl] := sql.bind(X_2,"sys","test2","x",0,1,2);
    X_67 := X_57;
    X_55:bat[:oid,:oid] := sql.tid(X_2,"sys","test2",1,2);
    X_69 := algebra.subselect(X_67,X_55,4:dbl,6:dbl,true,true,false);
    X_71 := algebra.leftfetchjoin(X_69,X_67);
    X_87 := mat.packIncrement(X_70,2);
    X_11 := mat.packIncrement(X_87,X_71);
    X_12 := bat.append(X_3,X_11,true);
    X_60:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","x",0,0,2);
    X_72 := X_60;
    X_58:bat[:oid,:oid] := sql.tid(X_2,"sys","test3",0,2);
    X_74 := algebra.subselect(X_72,X_58,4:dbl,6:dbl,true,true,false);
    X_76 := algebra.leftfetchjoin(X_74,X_72);
    X_61:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","x",0,1,2);
    X_73 := X_61;
    X_59:bat[:oid,:oid] := sql.tid(X_2,"sys","test3",1,2);
    X_75 := algebra.subselect(X_73,X_59,4:dbl,6:dbl,true,true,false);
    X_77 := algebra.leftfetchjoin(X_75,X_73);
    X_89 := mat.packIncrement(X_76,2);
    X_15 := mat.packIncrement(X_89,X_77);
    X_16 := bat.append(X_12,X_15,true);
    X_17:bat[:oid,:dbl] := bat.new(nil:oid,nil:dbl);
    X_62:bat[:oid,:dbl] := sql.bind(X_2,"sys","test2","y",0,0,2);
    X_78 := X_62;
    X_80 := algebra.leftfetchjoin(X_68,X_78);
    X_63:bat[:oid,:dbl] := sql.bind(X_2,"sys","test2","y",0,1,2);
    X_79 := X_63;
    X_81 := algebra.leftfetchjoin(X_69,X_79);
    X_91 := mat.packIncrement(X_80,2);
    X_24 := mat.packIncrement(X_91,X_81);
    X_25 := bat.append(X_17,X_24,true);
    X_64:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","y",0,0,2);
    X_82 := X_64;
    X_84 := algebra.leftfetchjoin(X_74,X_82);
    X_65:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","y",0,1,2);
    X_83 := X_65;
    X_85 := algebra.leftfetchjoin(X_75,X_83);
    X_93 := mat.packIncrement(X_84,2);
    X_26 := mat.packIncrement(X_93,X_85);
    X_27 := bat.append(X_25,X_26,true);
    language.pass(X_66);
    language.pass(X_67);
    language.pass(X_72);
    language.pass(X_73);
    language.pass(X_68);
    language.pass(X_69);
    language.pass(X_74);
    language.pass(X_75);
exit X_103;
    X_28 := sql.resultSet(2,1,X_16);
    sql.rsColumn(X_28,".test","x","double",53,0,X_16);
    sql.rsColumn(X_28,".test","y","double",53,0,X_27);
    X_37 := io.stdout();
    sql.exportResult(X_37,X_28);
end user.SQLanalyze;
#explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;
% .explain # table_name
% mal # name
% clob # type
% 75 # length
function user.SQLanalyze{transparent, transparent, autoCommit=true}():void;
barrier X_66 := language.dataflow();
    X_2 := sql.mvc();
    X_40:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","y",0,0,2);
    X_44 := X_40;
    X_42:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","x",0,0,2);
    X_46 := X_42;
    X_37:bat[:oid,:oid] := sql.tid(X_2,"sys","test3",0,2);
    X_48 := algebra.subselect(X_46,X_37,4:dbl,6:dbl,true,true,false);
    X_50 := algebra.subselect(X_44,X_48,0:dbl,2:dbl,true,true,false);
    X_52 := algebra.leftfetchjoin(X_50,X_46);
    X_41:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","y",0,1,2);
    X_45 := X_41;
    X_43:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","x",0,1,2);
    X_47 := X_43;
    X_39:bat[:oid,:oid] := sql.tid(X_2,"sys","test3",1,2);
    X_49 := algebra.subselect(X_47,X_39,4:dbl,6:dbl,true,true,false);
    X_51 := algebra.subselect(X_45,X_49,0:dbl,2:dbl,true,true,false);
    X_53 := algebra.leftfetchjoin(X_51,X_47);
    X_56 := mat.packIncrement(X_52,2);
    X_9 := mat.packIncrement(X_56,X_53);
    X_55 := algebra.leftfetchjoin(X_51,X_45);
    X_54 := algebra.leftfetchjoin(X_50,X_44);
    language.pass(X_46);
    language.pass(X_47);
    language.pass(X_51);
    language.pass(X_45);
    language.pass(X_50);
    language.pass(X_44);
exit X_66;
    X_11 := sql.resultSet(2,1,X_9);
    sql.rsColumn(X_11,"sys.test","x","double",53,0,X_9);
    X_58 := mat.packIncrement(X_54,2);
    X_10 := mat.packIncrement(X_58,X_55);
    sql.rsColumn(X_11,"sys.test","y","double",53,0,X_10);
    X_19 := io.stdout();
    sql.exportResult(X_19,X_11);
end user.SQLanalyze;
#explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 88 # length
function user.SQLanalyze{transparent, transparent, transparent, autoCommit=true}():void;
barrier X_66 := language.dataflow();
    X_2 := sql.mvc();
    X_40:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","y",0,0,2);
    X_44 := X_40;
    X_42:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","x",0,0,2);
    X_46 := X_42;
    X_37:bat[:oid,:oid] := sql.tid(X_2,"sys","test3",0,2);
    X_48 := algebra.subselect(X_46,X_37,4:dbl,6:dbl,true,true,false);
    X_50 := algebra.subselect(X_44,X_48,0:dbl,2:dbl,true,true,false);
    X_52 := algebra.leftfetchjoin(X_50,X_46);
    X_41:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","y",0,1,2);
    X_45 := X_41;
    X_43:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","x",0,1,2);
    X_47 := X_43;
    X_39:bat[:oid,:oid] := sql.tid(X_2,"sys","test3",1,2);
    X_49 := algebra.subselect(X_47,X_39,4:dbl,6:dbl,true,true,false);
    X_51 := algebra.subselect(X_45,X_49,0:dbl,2:dbl,true,true,false);
    X_53 := algebra.leftfetchjoin(X_51,X_47);
    X_56 := mat.packIncrement(X_52,2);
    X_10 := mat.packIncrement(X_56,X_53);
    X_55 := algebra.leftfetchjoin(X_51,X_45);
    X_54 := algebra.leftfetchjoin(X_50,X_44);
    language.pass(X_46);
    language.pass(X_47);
    language.pass(X_51);
    language.pass(X_45);
    language.pass(X_50);
    language.pass(X_44);
exit X_66;
    X_12 := sql.resultSet(2,1,X_10);
    sql.rsColumn(X_12,"sys.test","x","double",53,0,X_10);
    X_58 := mat.packIncrement(X_54,2);
    X_11 := mat.packIncrement(X_58,X_55);
    sql.rsColumn(X_12,"sys.test","y","double",53,0,X_11);
    X_19 := io.stdout();
    sql.exportResult(X_19,X_12);
end user.SQLanalyze;
#explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 101 # length
function user.SQLanalyze{transparent, transparent, transparent, transparent, autoCommit=true}():void;
barrier X_68 := language.dataflow();
    X_2 := sql.mvc();
    X_42:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","y",0,0,2);
    X_46 := X_42;
    X_44:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","x",0,0,2);
    X_48 := X_44;
    X_39:bat[:oid,:oid] := sql.tid(X_2,"sys","test3",0,2);
    X_50 := algebra.subselect(X_48,X_39,4:dbl,6:dbl,true,true,false);
    X_52 := algebra.subselect(X_46,X_50,0:dbl,2:dbl,true,true,false);
    X_54 := algebra.leftfetchjoin(X_52,X_48);
    X_43:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","y",0,1,2);
    X_47 := X_43;
    X_45:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","x",0,1,2);
    X_49 := X_45;
    X_41:bat[:oid,:oid] := sql.tid(X_2,"sys","test3",1,2);
    X_51 := algebra.subselect(X_49,X_41,4:dbl,6:dbl,true,true,false);
    X_53 := algebra.subselect(X_47,X_51,0:dbl,2:dbl,true,true,false);
    X_55 := algebra.leftfetchjoin(X_53,X_49);
    X_58 := mat.packIncrement(X_54,2);
    X_10 := mat.packIncrement(X_58,X_55);
    X_57 := algebra.leftfetchjoin(X_53,X_47);
    X_56 := algebra.leftfetchjoin(X_52,X_46);
    language.pass(X_48);
    language.pass(X_49);
    language.pass(X_53);
    language.pass(X_47);
    language.pass(X_52);
    language.pass(X_46);
exit X_68;
    X_12 := sql.resultSet(2,1,X_10);
    sql.rsColumn(X_12,"sys.test","x","double",53,0,X_10);
    X_60 := mat.packIncrement(X_56,2);
    X_11 := mat.packIncrement(X_60,X_57);
    sql.rsColumn(X_12,"sys.test","y","double",53,0,X_11);
    X_21 := io.stdout();
    sql.exportResult(X_21,X_12);
end user.SQLanalyze;
#drop table test;
#drop table test1;
#drop table test2;
#drop table test3;
#drop table test4;

# 18:37:29 >  
# 18:37:29 >  "Done."
# 18:37:29 >  

