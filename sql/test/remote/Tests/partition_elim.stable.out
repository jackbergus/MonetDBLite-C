stdout of test 'partition_elim` in directory 'sql/test/remote` itself:


# 18:37:29 >  
# 18:37:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35081" "--set" "mapi_usock=/var/tmp/mtest-17557/.s.monetdb.35081" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_remote" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 18:37:29 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_remote', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.333 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.nes.nl:35081/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17557/.s.monetdb.35081
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 40_json_hge.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_gsl.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 85_bam.sql
# loading sql script: 90_generator.sql
# loading sql script: 90_generator_hge.sql
# loading sql script: 99_system.sql

# 18:37:29 >  
# 18:37:29 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-17557" "--port=35081"
# 18:37:29 >  

#create merge table test (x double, y double);
#create table test1 (x double, y double);
#create table test2 (x double, y double);
#create table test3 (x double, y double);
#create table test4 (x double, y double);
#insert into test1 values (1.0, 1.0);
[ 1	]
#insert into test1 values (2.0, 2.0);
[ 1	]
#insert into test2 values (3.0, -1.0);
[ 1	]
#insert into test2 values (4.0, -2.0);
[ 1	]
#insert into test3 values (3.0, 1.0);
[ 1	]
#insert into test3 values (6.0, 2.0);
[ 1	]
#insert into test4 values (7.0, 1.0);
[ 1	]
#insert into test4 values (10.0, 2.0);
[ 1	]
#alter table test1 set read only;
#alter table test2 set read only;
#alter table test3 set read only;
#alter table test4 set read only;
#alter table test add table test1;
#alter table test add table test2;
#alter table test add table test3;
#alter table test add table test4;
#select x from test1 where x between 0 and -1;
% sys.test1 # table_name
% x # name
% double # type
% 24 # length
#select x from test2 where x between 0 and -1;
% sys.test2 # table_name
% x # name
% double # type
% 24 # length
#select x from test3 where x between 0 and -1;
% sys.test3 # table_name
% x # name
% double # type
% 24 # length
#select x from test4 where x between 0 and -1;
% sys.test4 # table_name
% x # name
% double # type
% 24 # length
#select y from test1 where y between 0 and -1;
% sys.test1 # table_name
% y # name
% double # type
% 24 # length
#select y from test2 where y between 0 and -1;
% sys.test2 # table_name
% y # name
% double # type
% 24 # length
#select y from test3 where y between 0 and -1;
% sys.test3 # table_name
% y # name
% double # type
% 24 # length
#select y from test4 where y between 0 and -1;
% sys.test4 # table_name
% y # name
% double # type
% 24 # length
#explain select x,y from test where x between 4.0 and 6.0;
% .explain # table_name
% mal # name
% clob # type
% 68 # length
function user.SQLanalyze():void;
barrier X_1233 := language.dataflow();
    X_1162 := bat.new(nil:str);
    X_1169 := bat.append(X_1162,".test");
    X_1179 := bat.append(X_1169,".test");
    X_1164 := bat.new(nil:str);
    X_1171 := bat.append(X_1164,"x");
    X_1180 := bat.append(X_1171,"y");
    X_1165 := bat.new(nil:str);
    X_1173 := bat.append(X_1165,"double");
    X_1181 := bat.append(X_1173,"double");
    X_1166 := bat.new(nil:int);
    X_1175 := bat.append(X_1166,53);
    X_1182 := bat.append(X_1175,53);
    X_1168 := bat.new(nil:int);
    X_1177 := bat.append(X_1168,0);
    X_1183 := bat.append(X_1177,0);
    X_1125:bat[:dbl] := bat.new(nil:dbl);
    X_1124 := sql.mvc();
    X_1202:bat[:dbl] := sql.bind(X_1124,"sys","test2","x",0,0,2);
    C_1199:bat[:oid] := sql.tid(X_1124,"sys","test2",0,2);
    C_1207 := algebra.subselect(X_1202,C_1199,4,6,true,true,false);
    X_1209 := algebra.projection(C_1207,X_1202);
    X_1203:bat[:dbl] := sql.bind(X_1124,"sys","test2","x",0,1,2);
    C_1201:bat[:oid] := sql.tid(X_1124,"sys","test2",1,2);
    C_1208 := algebra.subselect(X_1203,C_1201,4,6,true,true,false);
    X_1210 := algebra.projection(C_1208,X_1203);
    X_1222 := mat.packIncrement(X_1209,2);
    X_1140 := mat.packIncrement(X_1222,X_1210);
    X_1141 := bat.append(X_1125,X_1140,true);
    X_1144:bat[:dbl] := sql.bind(X_1124,"sys","test3","x",0);
    C_1142:bat[:oid] := sql.tid(X_1124,"sys","test3");
    C_1148 := algebra.subselect(X_1144,C_1142,4,6,true,true,false);
    X_1149 := algebra.projection(C_1148,X_1144);
    X_1150 := bat.append(X_1141,X_1149,true);
    X_1151:bat[:dbl] := bat.new(nil:dbl);
    X_1204:bat[:dbl] := sql.bind(X_1124,"sys","test2","y",0,0,2);
    X_1211 := algebra.projection(C_1207,X_1204);
    X_1205:bat[:dbl] := sql.bind(X_1124,"sys","test2","y",0,1,2);
    X_1212 := algebra.projection(C_1208,X_1205);
    X_1224 := mat.packIncrement(X_1211,2);
    X_1155 := mat.packIncrement(X_1224,X_1212);
    X_1156 := bat.append(X_1151,X_1155,true);
    X_1157:bat[:dbl] := sql.bind(X_1124,"sys","test3","y",0);
    X_1159 := algebra.projection(C_1148,X_1157);
    X_1160 := bat.append(X_1156,X_1159,true);
    language.pass(X_1202);
    language.pass(X_1203);
    language.pass(X_1144);
    language.pass(C_1207);
    language.pass(C_1208);
    language.pass(C_1148);
exit X_1233;
    sql.resultSet(X_1179,X_1180,X_1181,X_1182,X_1183,X_1150,X_1160);
end user.SQLanalyze;
#explain select x,y from test where x between (7-3) and (7-1);
% .explain # table_name
% mal # name
% clob # type
% 75 # length
function user.SQLanalyze():void;
barrier X_1376 := language.dataflow();
    X_1300 := bat.new(nil:str);
    X_1307 := bat.append(X_1300,".test");
    X_1317 := bat.append(X_1307,".test");
    X_1302 := bat.new(nil:str);
    X_1309 := bat.append(X_1302,"x");
    X_1318 := bat.append(X_1309,"y");
    X_1303 := bat.new(nil:str);
    X_1311 := bat.append(X_1303,"double");
    X_1319 := bat.append(X_1311,"double");
    X_1304 := bat.new(nil:int);
    X_1313 := bat.append(X_1304,53);
    X_1320 := bat.append(X_1313,53);
    X_1306 := bat.new(nil:int);
    X_1315 := bat.append(X_1306,0);
    X_1321 := bat.append(X_1315,0);
    X_1250:bat[:dbl] := bat.new(nil:dbl);
    X_1249 := sql.mvc();
    X_1345:bat[:dbl] := sql.bind(X_1249,"sys","test2","x",0,0,2);
    C_1342:bat[:oid] := sql.tid(X_1249,"sys","test2",0,2);
    C_1350 := algebra.subselect(X_1345,C_1342,4:dbl,6:dbl,true,true,false);
    X_1352 := algebra.projection(C_1350,X_1345);
    X_1346:bat[:dbl] := sql.bind(X_1249,"sys","test2","x",0,1,2);
    C_1344:bat[:oid] := sql.tid(X_1249,"sys","test2",1,2);
    C_1351 := algebra.subselect(X_1346,C_1344,4:dbl,6:dbl,true,true,false);
    X_1353 := algebra.projection(C_1351,X_1346);
    X_1365 := mat.packIncrement(X_1352,2);
    X_1271 := mat.packIncrement(X_1365,X_1353);
    X_1272 := bat.append(X_1250,X_1271,true);
    X_1275:bat[:dbl] := sql.bind(X_1249,"sys","test3","x",0);
    C_1273:bat[:oid] := sql.tid(X_1249,"sys","test3");
    C_1285 := algebra.subselect(X_1275,C_1273,4:dbl,6:dbl,true,true,false);
    X_1286 := algebra.projection(C_1285,X_1275);
    X_1287 := bat.append(X_1272,X_1286,true);
    X_1288:bat[:dbl] := bat.new(nil:dbl);
    X_1347:bat[:dbl] := sql.bind(X_1249,"sys","test2","y",0,0,2);
    X_1354 := algebra.projection(C_1350,X_1347);
    X_1348:bat[:dbl] := sql.bind(X_1249,"sys","test2","y",0,1,2);
    X_1355 := algebra.projection(C_1351,X_1348);
    X_1367 := mat.packIncrement(X_1354,2);
    X_1293 := mat.packIncrement(X_1367,X_1355);
    X_1294 := bat.append(X_1288,X_1293,true);
    X_1295:bat[:dbl] := sql.bind(X_1249,"sys","test3","y",0);
    X_1297 := algebra.projection(C_1285,X_1295);
    X_1298 := bat.append(X_1294,X_1297,true);
    language.pass(X_1345);
    language.pass(X_1346);
    language.pass(X_1275);
    language.pass(C_1350);
    language.pass(C_1351);
    language.pass(C_1285);
exit X_1376;
    sql.resultSet(X_1317,X_1318,X_1319,X_1320,X_1321,X_1287,X_1298);
end user.SQLanalyze;
#explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;
% .explain # table_name
% mal # name
% clob # type
% 68 # length
function user.SQLanalyze():void;
barrier X_1489 := language.dataflow();
    X_1416 := bat.new(nil:str);
    X_1423 := bat.append(X_1416,"sys.test");
    X_1431 := bat.append(X_1423,"sys.test");
    X_1418 := bat.new(nil:str);
    X_1425 := bat.append(X_1418,"x");
    X_1432 := bat.append(X_1425,"y");
    X_1419 := bat.new(nil:str);
    X_1426 := bat.append(X_1419,"double");
    X_1434 := bat.append(X_1426,"double");
    X_1420 := bat.new(nil:int);
    X_1428 := bat.append(X_1420,53);
    X_1435 := bat.append(X_1428,53);
    X_1422 := bat.new(nil:int);
    X_1430 := bat.append(X_1422,0);
    X_1436 := bat.append(X_1430,0);
    X_1393 := sql.mvc();
    X_1456:bat[:dbl] := sql.bind(X_1393,"sys","test3","y",0,0,2);
    X_1458:bat[:dbl] := sql.bind(X_1393,"sys","test3","x",0,0,2);
    C_1453:bat[:oid] := sql.tid(X_1393,"sys","test3",0,2);
    C_1461 := algebra.subselect(X_1458,C_1453,4,6,true,true,false);
    C_1463 := algebra.subselect(X_1456,C_1461,0,2,true,true,false);
    X_1465 := algebra.projection(C_1463,X_1458);
    X_1457:bat[:dbl] := sql.bind(X_1393,"sys","test3","y",0,1,2);
    X_1459:bat[:dbl] := sql.bind(X_1393,"sys","test3","x",0,1,2);
    C_1455:bat[:oid] := sql.tid(X_1393,"sys","test3",1,2);
    C_1462 := algebra.subselect(X_1459,C_1455,4,6,true,true,false);
    C_1464 := algebra.subselect(X_1457,C_1462,0,2,true,true,false);
    X_1466 := algebra.projection(C_1464,X_1459);
    X_1478 := mat.packIncrement(X_1465,2);
    X_1413 := mat.packIncrement(X_1478,X_1466);
    X_1467 := algebra.projection(C_1463,X_1456);
    X_1468 := algebra.projection(C_1464,X_1457);
    X_1480 := mat.packIncrement(X_1467,2);
    X_1414 := mat.packIncrement(X_1480,X_1468);
    language.pass(X_1458);
    language.pass(X_1459);
    language.pass(C_1463);
    language.pass(X_1456);
    language.pass(C_1464);
    language.pass(X_1457);
exit X_1489;
    sql.resultSet(X_1431,X_1432,X_1434,X_1435,X_1436,X_1413,X_1414);
end user.SQLanalyze;
#explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 75 # length
function user.SQLanalyze():void;
barrier X_1616 := language.dataflow();
    X_1539 := bat.new(nil:str);
    X_1546 := bat.append(X_1539,"sys.test");
    X_1555 := bat.append(X_1546,"sys.test");
    X_1541 := bat.new(nil:str);
    X_1548 := bat.append(X_1541,"x");
    X_1556 := bat.append(X_1548,"y");
    X_1542 := bat.new(nil:str);
    X_1549 := bat.append(X_1542,"double");
    X_1558 := bat.append(X_1549,"double");
    X_1543 := bat.new(nil:int);
    X_1551 := bat.append(X_1543,53);
    X_1559 := bat.append(X_1551,53);
    X_1545 := bat.new(nil:int);
    X_1553 := bat.append(X_1545,0);
    X_1560 := bat.append(X_1553,0);
    X_1509 := sql.mvc();
    X_1583:bat[:dbl] := sql.bind(X_1509,"sys","test3","y",0,0,2);
    X_1585:bat[:dbl] := sql.bind(X_1509,"sys","test3","x",0,0,2);
    C_1580:bat[:oid] := sql.tid(X_1509,"sys","test3",0,2);
    C_1588 := algebra.subselect(X_1585,C_1580,4,6,true,true,false);
    C_1590 := algebra.subselect(X_1583,C_1588,0:dbl,2:dbl,true,true,false);
    X_1592 := algebra.projection(C_1590,X_1585);
    X_1584:bat[:dbl] := sql.bind(X_1509,"sys","test3","y",0,1,2);
    X_1586:bat[:dbl] := sql.bind(X_1509,"sys","test3","x",0,1,2);
    C_1582:bat[:oid] := sql.tid(X_1509,"sys","test3",1,2);
    C_1589 := algebra.subselect(X_1586,C_1582,4,6,true,true,false);
    C_1591 := algebra.subselect(X_1584,C_1589,0:dbl,2:dbl,true,true,false);
    X_1593 := algebra.projection(C_1591,X_1586);
    X_1605 := mat.packIncrement(X_1592,2);
    X_1536 := mat.packIncrement(X_1605,X_1593);
    X_1594 := algebra.projection(C_1590,X_1583);
    X_1595 := algebra.projection(C_1591,X_1584);
    X_1607 := mat.packIncrement(X_1594,2);
    X_1537 := mat.packIncrement(X_1607,X_1595);
    language.pass(X_1585);
    language.pass(X_1586);
    language.pass(C_1590);
    language.pass(X_1583);
    language.pass(C_1591);
    language.pass(X_1584);
exit X_1616;
    sql.resultSet(X_1555,X_1556,X_1558,X_1559,X_1560,X_1536,X_1537);
end user.SQLanalyze;
#explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 75 # length
function user.SQLanalyze():void;
barrier X_1757 := language.dataflow();
    X_1675 := bat.new(nil:str);
    X_1682 := bat.append(X_1675,"sys.test");
    X_1691 := bat.append(X_1682,"sys.test");
    X_1677 := bat.new(nil:str);
    X_1684 := bat.append(X_1677,"x");
    X_1692 := bat.append(X_1684,"y");
    X_1678 := bat.new(nil:str);
    X_1685 := bat.append(X_1678,"double");
    X_1694 := bat.append(X_1685,"double");
    X_1679 := bat.new(nil:int);
    X_1687 := bat.append(X_1679,53);
    X_1695 := bat.append(X_1687,53);
    X_1681 := bat.new(nil:int);
    X_1689 := bat.append(X_1681,0);
    X_1696 := bat.append(X_1689,0);
    X_1639 := sql.mvc();
    X_1724:bat[:dbl] := sql.bind(X_1639,"sys","test3","y",0,0,2);
    X_1726:bat[:dbl] := sql.bind(X_1639,"sys","test3","x",0,0,2);
    C_1721:bat[:oid] := sql.tid(X_1639,"sys","test3",0,2);
    C_1729 := algebra.subselect(X_1726,C_1721,4:dbl,6:dbl,true,true,false);
    C_1731 := algebra.subselect(X_1724,C_1729,0:dbl,2:dbl,true,true,false);
    X_1733 := algebra.projection(C_1731,X_1726);
    X_1725:bat[:dbl] := sql.bind(X_1639,"sys","test3","y",0,1,2);
    X_1727:bat[:dbl] := sql.bind(X_1639,"sys","test3","x",0,1,2);
    C_1723:bat[:oid] := sql.tid(X_1639,"sys","test3",1,2);
    C_1730 := algebra.subselect(X_1727,C_1723,4:dbl,6:dbl,true,true,false);
    C_1732 := algebra.subselect(X_1725,C_1730,0:dbl,2:dbl,true,true,false);
    X_1734 := algebra.projection(C_1732,X_1727);
    X_1746 := mat.packIncrement(X_1733,2);
    X_1672 := mat.packIncrement(X_1746,X_1734);
    X_1735 := algebra.projection(C_1731,X_1724);
    X_1736 := algebra.projection(C_1732,X_1725);
    X_1748 := mat.packIncrement(X_1735,2);
    X_1673 := mat.packIncrement(X_1748,X_1736);
    language.pass(X_1726);
    language.pass(X_1727);
    language.pass(C_1731);
    language.pass(X_1724);
    language.pass(C_1732);
    language.pass(X_1725);
exit X_1757;
    sql.resultSet(X_1691,X_1692,X_1694,X_1695,X_1696,X_1672,X_1673);
end user.SQLanalyze;
#drop table test;
#drop table test1;
#drop table test2;
#drop table test3;
#drop table test4;

# 18:37:29 >  
# 18:37:29 >  "Done."
# 18:37:29 >  

