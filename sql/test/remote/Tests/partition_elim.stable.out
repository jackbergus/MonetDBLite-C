stdout of test 'partition_elim` in directory 'sql/test/remote` itself:


# 18:37:29 >  
# 18:37:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35081" "--set" "mapi_usock=/var/tmp/mtest-17557/.s.monetdb.35081" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_remote" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 18:37:29 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_remote', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.333 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.nes.nl:35081/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17557/.s.monetdb.35081
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 40_json_hge.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_gsl.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 85_bam.sql
# loading sql script: 90_generator.sql
# loading sql script: 90_generator_hge.sql
# loading sql script: 99_system.sql

# 18:37:29 >  
# 18:37:29 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-17557" "--port=35081"
# 18:37:29 >  

#create merge table test (x double, y double);
#create table test1 (x double, y double);
#create table test2 (x double, y double);
#create table test3 (x double, y double);
#create table test4 (x double, y double);
#insert into test1 values (1.0, 1.0);
[ 1	]
#insert into test1 values (2.0, 2.0);
[ 1	]
#insert into test2 values (3.0, -1.0);
[ 1	]
#insert into test2 values (4.0, -2.0);
[ 1	]
#insert into test3 values (3.0, 1.0);
[ 1	]
#insert into test3 values (6.0, 2.0);
[ 1	]
#insert into test4 values (7.0, 1.0);
[ 1	]
#insert into test4 values (10.0, 2.0);
[ 1	]
#alter table test1 set read only;
#alter table test2 set read only;
#alter table test3 set read only;
#alter table test4 set read only;
#alter table test add table test1;
#alter table test add table test2;
#alter table test add table test3;
#alter table test add table test4;
#select x from test1 where x between 0 and -1;
% sys.test1 # table_name
% x # name
% double # type
% 24 # length
#select x from test2 where x between 0 and -1;
% sys.test2 # table_name
% x # name
% double # type
% 24 # length
#select x from test3 where x between 0 and -1;
% sys.test3 # table_name
% x # name
% double # type
% 24 # length
#select x from test4 where x between 0 and -1;
% sys.test4 # table_name
% x # name
% double # type
% 24 # length
#select y from test1 where y between 0 and -1;
% sys.test1 # table_name
% y # name
% double # type
% 24 # length
#select y from test2 where y between 0 and -1;
% sys.test2 # table_name
% y # name
% double # type
% 24 # length
#select y from test3 where y between 0 and -1;
% sys.test3 # table_name
% y # name
% double # type
% 24 # length
#select y from test4 where y between 0 and -1;
% sys.test4 # table_name
% y # name
% double # type
% 24 # length
#explain select x,y from test where x between 4.0 and 6.0;
% .explain # table_name
% mal # name
% clob # type
% 118 # length
function user.main():void;
    X_1127:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0;","default_pipe",18:int);
barrier X_1237 := language.dataflow();
    X_1131:bat[:dbl] := bat.new(nil:dbl);
    X_1130 := sql.mvc();
    X_1210:bat[:dbl] := sql.bind(X_1130,"sys","test2","x",0:int,0:int,2:int);
    C_1207:bat[:oid] := sql.tid(X_1130,"sys","test2",0:int,2:int);
    C_1215 := algebra.subselect(X_1210,C_1207,4:dbl,6:dbl,true,true,false);
    X_1217 := algebra.projection(C_1215,X_1210);
    X_1211:bat[:dbl] := sql.bind(X_1130,"sys","test2","x",0:int,1:int,2:int);
    C_1209:bat[:oid] := sql.tid(X_1130,"sys","test2",1:int,2:int);
    C_1216 := algebra.subselect(X_1211,C_1209,4:dbl,6:dbl,true,true,false);
    X_1218 := algebra.projection(C_1216,X_1211);
    X_1230 := mat.packIncrement(X_1217,2:int);
    X_1146 := mat.packIncrement(X_1230,X_1218);
    language.pass(X_1210);
    language.pass(X_1211);
exit X_1237;
    X_1147 := bat.append(X_1131,X_1146,true);
barrier X_1241 := language.dataflow();
    X_1150:bat[:dbl] := sql.bind(X_1130,"sys","test3","x",0:int);
    C_1148:bat[:oid] := sql.tid(X_1130,"sys","test3");
    C_1154 := algebra.subselect(X_1150,C_1148,4:dbl,6:dbl,true,true,false);
    X_1155 := algebra.projection(C_1154,X_1150);
    language.pass(X_1150);
exit X_1241;
    X_1156 := bat.append(X_1147,X_1155,true);
barrier X_1244 := language.dataflow();
    X_1157:bat[:dbl] := bat.new(nil:dbl);
    X_1212:bat[:dbl] := sql.bind(X_1130,"sys","test2","y",0:int,0:int,2:int);
    X_1219 := algebra.projection(C_1215,X_1212);
    X_1213:bat[:dbl] := sql.bind(X_1130,"sys","test2","y",0:int,1:int,2:int);
    X_1220 := algebra.projection(C_1216,X_1213);
    X_1232 := mat.packIncrement(X_1219,2:int);
    X_1161 := mat.packIncrement(X_1232,X_1220);
exit X_1244;
    X_1162 := bat.append(X_1157,X_1161,true);
    X_1163:bat[:dbl] := sql.bind(X_1130,"sys","test3","y",0:int);
    X_1165 := algebra.projection(C_1154,X_1163);
    X_1166 := bat.append(X_1162,X_1165,true);
barrier X_1247 := language.dataflow();
    X_1168 := bat.new(nil:str);
    X_1174 := bat.new(nil:int);
    X_1172 := bat.new(nil:int);
    X_1171 := bat.new(nil:str);
    X_1170 := bat.new(nil:str);
exit X_1247;
    X_1175 := bat.append(X_1168,".test");
    X_1177 := bat.append(X_1170,"x");
    X_1179 := bat.append(X_1171,"double");
    X_1181 := bat.append(X_1172,53:int);
    X_1183 := bat.append(X_1174,0:int);
    X_1185 := bat.append(X_1175,".test");
    X_1186 := bat.append(X_1177,"y");
    X_1187 := bat.append(X_1179,"double");
    X_1188 := bat.append(X_1181,53:int);
    X_1189 := bat.append(X_1183,0:int);
    sql.resultSet(X_1185,X_1186,X_1187,X_1188,X_1189,X_1156,X_1166);
end user.main;
#inline               actions= 0 time=3 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=4 usec 
#coercion             actions= 0 time=5 usec 
#evaluate             actions= 6 time=48 usec 
#emptybind            actions= 0 time=24 usec 
#aliases              actions=10 time=24 usec 
#mitosis              actions= 1 time=72 usec 
#mergetable           actions= 3 time=157 usec 
#deadcode             actions= 4 time=21 usec 
#aliases              actions= 0 time=16 usec 
#constants            actions= 7 time=17 usec 
#commonTerms          actions= 0 time=18 usec 
#projectionpath       actions= 0 time=12 usec 
#deadcode             actions= 0 time=16 usec 
#reorder              actions= 1 time=79 usec 
#reduce               actions=43 time=23 usec 
#matpack              actions= 2 time=17 usec 
#dataflow             actions=27 time=63 usec 
#multiplex            actions= 0 time=5 usec 
#profiler             actions= 1 time=9 usec 
#candidates           actions= 1 time=4 usec 
#garbagecollector     actions= 1 time=44 usec 
#total                actions= 1 time=984 usec 
#explain select x,y from test where x between (7-3) and (7-1);
% .explain # table_name
% mal # name
% clob # type
% 122 # length
function user.main():void;
    X_1264:void := querylog.define("explain select x,y from test where x between (7-3) and (7-1);","default_pipe",18:int);
barrier X_1392 := language.dataflow();
    X_1268:bat[:dbl] := bat.new(nil:dbl);
    X_1267 := sql.mvc();
    X_1365:bat[:dbl] := sql.bind(X_1267,"sys","test2","x",0:int,0:int,2:int);
    C_1362:bat[:oid] := sql.tid(X_1267,"sys","test2",0:int,2:int);
    C_1370 := algebra.subselect(X_1365,C_1362,4:dbl,6:dbl,true,true,false);
    X_1372 := algebra.projection(C_1370,X_1365);
    X_1366:bat[:dbl] := sql.bind(X_1267,"sys","test2","x",0:int,1:int,2:int);
    C_1364:bat[:oid] := sql.tid(X_1267,"sys","test2",1:int,2:int);
    C_1371 := algebra.subselect(X_1366,C_1364,4:dbl,6:dbl,true,true,false);
    X_1373 := algebra.projection(C_1371,X_1366);
    X_1385 := mat.packIncrement(X_1372,2:int);
    X_1289 := mat.packIncrement(X_1385,X_1373);
    language.pass(X_1365);
    language.pass(X_1366);
exit X_1392;
    X_1290 := bat.append(X_1268,X_1289,true);
barrier X_1396 := language.dataflow();
    X_1293:bat[:dbl] := sql.bind(X_1267,"sys","test3","x",0:int);
    C_1291:bat[:oid] := sql.tid(X_1267,"sys","test3");
    C_1303 := algebra.subselect(X_1293,C_1291,4:dbl,6:dbl,true,true,false);
    X_1304 := algebra.projection(C_1303,X_1293);
    language.pass(X_1293);
exit X_1396;
    X_1305 := bat.append(X_1290,X_1304,true);
barrier X_1399 := language.dataflow();
    X_1306:bat[:dbl] := bat.new(nil:dbl);
    X_1367:bat[:dbl] := sql.bind(X_1267,"sys","test2","y",0:int,0:int,2:int);
    X_1374 := algebra.projection(C_1370,X_1367);
    X_1368:bat[:dbl] := sql.bind(X_1267,"sys","test2","y",0:int,1:int,2:int);
    X_1375 := algebra.projection(C_1371,X_1368);
    X_1387 := mat.packIncrement(X_1374,2:int);
    X_1311 := mat.packIncrement(X_1387,X_1375);
exit X_1399;
    X_1312 := bat.append(X_1306,X_1311,true);
    X_1313:bat[:dbl] := sql.bind(X_1267,"sys","test3","y",0:int);
    X_1315 := algebra.projection(C_1303,X_1313);
    X_1316 := bat.append(X_1312,X_1315,true);
barrier X_1402 := language.dataflow();
    X_1318 := bat.new(nil:str);
    X_1324 := bat.new(nil:int);
    X_1322 := bat.new(nil:int);
    X_1321 := bat.new(nil:str);
    X_1320 := bat.new(nil:str);
exit X_1402;
    X_1325 := bat.append(X_1318,".test");
    X_1327 := bat.append(X_1320,"x");
    X_1329 := bat.append(X_1321,"double");
    X_1331 := bat.append(X_1322,53:int);
    X_1333 := bat.append(X_1324,0:int);
    X_1335 := bat.append(X_1325,".test");
    X_1336 := bat.append(X_1327,"y");
    X_1337 := bat.append(X_1329,"double");
    X_1338 := bat.append(X_1331,53:int);
    X_1339 := bat.append(X_1333,0:int);
    sql.resultSet(X_1335,X_1336,X_1337,X_1338,X_1339,X_1305,X_1316);
end user.main;
#inline               actions= 0 time=3 usec 
#remap                actions= 0 time=9 usec 
#costmodel            actions= 1 time=3 usec 
#coercion             actions= 0 time=4 usec 
#evaluate             actions=20 time=82 usec 
#emptybind            actions= 0 time=19 usec 
#aliases              actions=24 time=19 usec 
#mitosis              actions= 1 time=47 usec 
#mergetable           actions= 3 time=92 usec 
#deadcode             actions= 4 time=15 usec 
#aliases              actions= 0 time=12 usec 
#constants            actions= 9 time=14 usec 
#commonTerms          actions= 0 time=13 usec 
#projectionpath       actions= 0 time=9 usec 
#deadcode             actions= 0 time=13 usec 
#reorder              actions= 1 time=54 usec 
#reduce               actions=64 time=25 usec 
#matpack              actions= 2 time=14 usec 
#dataflow             actions=27 time=46 usec 
#multiplex            actions= 0 time=5 usec 
#profiler             actions= 1 time=7 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=37 usec 
#total                actions= 1 time=766 usec 
#explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;
% .explain # table_name
% mal # name
% clob # type
% 144 # length
function user.main():void;
    X_1420:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;","default_pipe",30:int);
barrier X_1521 := language.dataflow();
    X_1446 := bat.new(nil:str);
    X_1452 := bat.new(nil:int);
    X_1450 := bat.new(nil:int);
    X_1449 := bat.new(nil:str);
    X_1448 := bat.new(nil:str);
    X_1423 := sql.mvc();
    X_1489:bat[:dbl] := sql.bind(X_1423,"sys","test3","y",0:int,1:int,2:int);
    X_1491:bat[:dbl] := sql.bind(X_1423,"sys","test3","x",0:int,1:int,2:int);
    C_1487:bat[:oid] := sql.tid(X_1423,"sys","test3",1:int,2:int);
    C_1494 := algebra.subselect(X_1491,C_1487,4:dbl,6:dbl,true,true,false);
    C_1496 := algebra.subselect(X_1489,C_1494,0:dbl,2:dbl,true,true,false);
    X_1500 := algebra.projection(C_1496,X_1489);
    X_1488:bat[:dbl] := sql.bind(X_1423,"sys","test3","y",0:int,0:int,2:int);
    X_1490:bat[:dbl] := sql.bind(X_1423,"sys","test3","x",0:int,0:int,2:int);
    C_1485:bat[:oid] := sql.tid(X_1423,"sys","test3",0:int,2:int);
    C_1493 := algebra.subselect(X_1490,C_1485,4:dbl,6:dbl,true,true,false);
    C_1495 := algebra.subselect(X_1488,C_1493,0:dbl,2:dbl,true,true,false);
    X_1499 := algebra.projection(C_1495,X_1488);
    X_1498 := algebra.projection(C_1496,X_1491);
    X_1497 := algebra.projection(C_1495,X_1490);
    language.pass(X_1489);
    language.pass(X_1488);
    language.pass(C_1496);
    language.pass(X_1491);
    language.pass(C_1495);
    language.pass(X_1490);
exit X_1521;
    X_1453 := bat.append(X_1446,"sys.test");
    X_1455 := bat.append(X_1448,"x");
    X_1456 := bat.append(X_1449,"double");
    X_1458 := bat.append(X_1450,53:int);
    X_1460 := bat.append(X_1452,0:int);
    X_1461 := bat.append(X_1453,"sys.test");
    X_1462 := bat.append(X_1455,"y");
    X_1464 := bat.append(X_1456,"double");
    X_1465 := bat.append(X_1458,53:int);
    X_1466 := bat.append(X_1460,0:int);
barrier X_1524 := language.dataflow();
    X_1510 := mat.packIncrement(X_1497,2:int);
    X_1443 := mat.packIncrement(X_1510,X_1498);
    X_1512 := mat.packIncrement(X_1499,2:int);
    X_1444 := mat.packIncrement(X_1512,X_1500);
exit X_1524;
    sql.resultSet(X_1461,X_1462,X_1464,X_1465,X_1466,X_1443,X_1444);
end user.main;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=3 usec 
#coercion             actions= 0 time=3 usec 
#evaluate             actions= 8 time=33 usec 
#emptybind            actions= 0 time=14 usec 
#aliases              actions=10 time=29 usec 
#mitosis              actions= 1 time=41 usec 
#mergetable           actions= 4 time=85 usec 
#deadcode             actions= 5 time=14 usec 
#aliases              actions= 0 time=10 usec 
#constants            actions= 9 time=12 usec 
#commonTerms          actions= 0 time=12 usec 
#projectionpath       actions= 0 time=8 usec 
#deadcode             actions= 0 time=10 usec 
#reorder              actions= 1 time=45 usec 
#reduce               actions=44 time=20 usec 
#matpack              actions= 2 time=13 usec 
#dataflow             actions=27 time=41 usec 
#multiplex            actions= 0 time=4 usec 
#profiler             actions= 1 time=6 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=32 usec 
#total                actions= 1 time=615 usec 
#explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 156 # length
function user.main():void;
    X_1545:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);","default_pipe",30:int);
barrier X_1657 := language.dataflow();
    X_1578 := bat.new(nil:str);
    X_1584 := bat.new(nil:int);
    X_1582 := bat.new(nil:int);
    X_1581 := bat.new(nil:str);
    X_1580 := bat.new(nil:str);
    X_1548 := sql.mvc();
    X_1625:bat[:dbl] := sql.bind(X_1548,"sys","test3","y",0:int,1:int,2:int);
    X_1627:bat[:dbl] := sql.bind(X_1548,"sys","test3","x",0:int,1:int,2:int);
    C_1623:bat[:oid] := sql.tid(X_1548,"sys","test3",1:int,2:int);
    C_1630 := algebra.subselect(X_1627,C_1623,4:dbl,6:dbl,true,true,false);
    C_1632 := algebra.subselect(X_1625,C_1630,0:dbl,2:dbl,true,true,false);
    X_1636 := algebra.projection(C_1632,X_1625);
    X_1624:bat[:dbl] := sql.bind(X_1548,"sys","test3","y",0:int,0:int,2:int);
    X_1626:bat[:dbl] := sql.bind(X_1548,"sys","test3","x",0:int,0:int,2:int);
    C_1621:bat[:oid] := sql.tid(X_1548,"sys","test3",0:int,2:int);
    C_1629 := algebra.subselect(X_1626,C_1621,4:dbl,6:dbl,true,true,false);
    C_1631 := algebra.subselect(X_1624,C_1629,0:dbl,2:dbl,true,true,false);
    X_1635 := algebra.projection(C_1631,X_1624);
    X_1634 := algebra.projection(C_1632,X_1627);
    X_1633 := algebra.projection(C_1631,X_1626);
    language.pass(X_1625);
    language.pass(X_1624);
    language.pass(C_1632);
    language.pass(X_1627);
    language.pass(C_1631);
    language.pass(X_1626);
exit X_1657;
    X_1585 := bat.append(X_1578,"sys.test");
    X_1587 := bat.append(X_1580,"x");
    X_1588 := bat.append(X_1581,"double");
    X_1590 := bat.append(X_1582,53:int);
    X_1592 := bat.append(X_1584,0:int);
    X_1594 := bat.append(X_1585,"sys.test");
    X_1595 := bat.append(X_1587,"y");
    X_1597 := bat.append(X_1588,"double");
    X_1598 := bat.append(X_1590,53:int);
    X_1599 := bat.append(X_1592,0:int);
barrier X_1660 := language.dataflow();
    X_1646 := mat.packIncrement(X_1633,2:int);
    X_1575 := mat.packIncrement(X_1646,X_1634);
    X_1648 := mat.packIncrement(X_1635,2:int);
    X_1576 := mat.packIncrement(X_1648,X_1636);
exit X_1660;
    sql.resultSet(X_1594,X_1595,X_1597,X_1598,X_1599,X_1575,X_1576);
end user.main;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=2 usec 
#coercion             actions= 0 time=3 usec 
#evaluate             actions=16 time=60 usec 
#emptybind            actions= 0 time=16 usec 
#aliases              actions=18 time=15 usec 
#mitosis              actions= 1 time=40 usec 
#mergetable           actions= 4 time=81 usec 
#deadcode             actions= 5 time=13 usec 
#aliases              actions= 0 time=10 usec 
#constants            actions=11 time=14 usec 
#commonTerms          actions= 0 time=11 usec 
#projectionpath       actions= 0 time=7 usec 
#deadcode             actions= 0 time=10 usec 
#reorder              actions= 1 time=45 usec 
#reduce               actions=58 time=22 usec 
#matpack              actions= 2 time=13 usec 
#dataflow             actions=27 time=40 usec 
#multiplex            actions= 0 time=4 usec 
#profiler             actions= 1 time=5 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=33 usec 
#total                actions= 1 time=638 usec 
#explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 160 # length
function user.main():void;
    X_1684:void := querylog.define("explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);","default_pipe",30:int);
barrier X_1807 := language.dataflow();
    X_1723 := bat.new(nil:str);
    X_1729 := bat.new(nil:int);
    X_1727 := bat.new(nil:int);
    X_1726 := bat.new(nil:str);
    X_1725 := bat.new(nil:str);
    X_1687 := sql.mvc();
    X_1775:bat[:dbl] := sql.bind(X_1687,"sys","test3","y",0:int,1:int,2:int);
    X_1777:bat[:dbl] := sql.bind(X_1687,"sys","test3","x",0:int,1:int,2:int);
    C_1773:bat[:oid] := sql.tid(X_1687,"sys","test3",1:int,2:int);
    C_1780 := algebra.subselect(X_1777,C_1773,4:dbl,6:dbl,true,true,false);
    C_1782 := algebra.subselect(X_1775,C_1780,0:dbl,2:dbl,true,true,false);
    X_1786 := algebra.projection(C_1782,X_1775);
    X_1774:bat[:dbl] := sql.bind(X_1687,"sys","test3","y",0:int,0:int,2:int);
    X_1776:bat[:dbl] := sql.bind(X_1687,"sys","test3","x",0:int,0:int,2:int);
    C_1771:bat[:oid] := sql.tid(X_1687,"sys","test3",0:int,2:int);
    C_1779 := algebra.subselect(X_1776,C_1771,4:dbl,6:dbl,true,true,false);
    C_1781 := algebra.subselect(X_1774,C_1779,0:dbl,2:dbl,true,true,false);
    X_1785 := algebra.projection(C_1781,X_1774);
    X_1784 := algebra.projection(C_1782,X_1777);
    X_1783 := algebra.projection(C_1781,X_1776);
    language.pass(X_1775);
    language.pass(X_1774);
    language.pass(C_1782);
    language.pass(X_1777);
    language.pass(C_1781);
    language.pass(X_1776);
exit X_1807;
    X_1730 := bat.append(X_1723,"sys.test");
    X_1732 := bat.append(X_1725,"x");
    X_1733 := bat.append(X_1726,"double");
    X_1735 := bat.append(X_1727,53:int);
    X_1737 := bat.append(X_1729,0:int);
    X_1739 := bat.append(X_1730,"sys.test");
    X_1740 := bat.append(X_1732,"y");
    X_1742 := bat.append(X_1733,"double");
    X_1743 := bat.append(X_1735,53:int);
    X_1744 := bat.append(X_1737,0:int);
barrier X_1810 := language.dataflow();
    X_1796 := mat.packIncrement(X_1783,2:int);
    X_1720 := mat.packIncrement(X_1796,X_1784);
    X_1798 := mat.packIncrement(X_1785,2:int);
    X_1721 := mat.packIncrement(X_1798,X_1786);
exit X_1810;
    sql.resultSet(X_1739,X_1740,X_1742,X_1743,X_1744,X_1720,X_1721);
end user.main;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=3 usec 
#coercion             actions= 0 time=3 usec 
#evaluate             actions=24 time=70 usec 
#emptybind            actions= 0 time=17 usec 
#aliases              actions=26 time=17 usec 
#mitosis              actions= 1 time=42 usec 
#mergetable           actions= 4 time=82 usec 
#deadcode             actions= 5 time=14 usec 
#aliases              actions= 0 time=11 usec 
#constants            actions=12 time=32 usec 
#commonTerms          actions= 0 time=12 usec 
#projectionpath       actions= 0 time=7 usec 
#deadcode             actions= 0 time=11 usec 
#reorder              actions= 1 time=46 usec 
#reduce               actions=72 time=26 usec 
#matpack              actions= 2 time=14 usec 
#dataflow             actions=27 time=41 usec 
#multiplex            actions= 0 time=5 usec 
#profiler             actions= 1 time=5 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=33 usec 
#total                actions= 1 time=695 usec 
#drop table test;
#drop table test1;
#drop table test2;
#drop table test3;
#drop table test4;

# 18:37:29 >  
# 18:37:29 >  "Done."
# 18:37:29 >  

