stdout of test 'partition_elim` in directory 'sql/test/remote` itself:


# 18:37:29 >  
# 18:37:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35081" "--set" "mapi_usock=/var/tmp/mtest-17557/.s.monetdb.35081" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_remote" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 18:37:29 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_remote', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.333 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.nes.nl:35081/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17557/.s.monetdb.35081
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 40_json_hge.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_gsl.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 85_bam.sql
# loading sql script: 90_generator.sql
# loading sql script: 90_generator_hge.sql
# loading sql script: 99_system.sql

# 18:37:29 >  
# 18:37:29 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-17557" "--port=35081"
# 18:37:29 >  

#create merge table test (x double, y double);
#create table test1 (x double, y double);
#create table test2 (x double, y double);
#create table test3 (x double, y double);
#create table test4 (x double, y double);
#insert into test1 values (1.0, 1.0);
[ 1	]
#insert into test1 values (2.0, 2.0);
[ 1	]
#insert into test2 values (3.0, -1.0);
[ 1	]
#insert into test2 values (4.0, -2.0);
[ 1	]
#insert into test3 values (3.0, 1.0);
[ 1	]
#insert into test3 values (6.0, 2.0);
[ 1	]
#insert into test4 values (7.0, 1.0);
[ 1	]
#insert into test4 values (10.0, 2.0);
[ 1	]
#alter table test1 set read only;
#alter table test2 set read only;
#alter table test3 set read only;
#alter table test4 set read only;
#alter table test add table test1;
#alter table test add table test2;
#alter table test add table test3;
#alter table test add table test4;
#select x from test1 where x between 0 and -1;
% sys.test1 # table_name
% x # name
% double # type
% 24 # length
#select x from test2 where x between 0 and -1;
% sys.test2 # table_name
% x # name
% double # type
% 24 # length
#select x from test3 where x between 0 and -1;
% sys.test3 # table_name
% x # name
% double # type
% 24 # length
#select x from test4 where x between 0 and -1;
% sys.test4 # table_name
% x # name
% double # type
% 24 # length
#select y from test1 where y between 0 and -1;
% sys.test1 # table_name
% y # name
% double # type
% 24 # length
#select y from test2 where y between 0 and -1;
% sys.test2 # table_name
% y # name
% double # type
% 24 # length
#select y from test3 where y between 0 and -1;
% sys.test3 # table_name
% y # name
% double # type
% 24 # length
#select y from test4 where y between 0 and -1;
% sys.test4 # table_name
% y # name
% double # type
% 24 # length
#explain select x,y from test where x between 4.0 and 6.0;
% .explain # table_name
% mal # name
% clob # type
% 118 # length
function user.main():void;
    X_1207:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0;","default_pipe",49:int);
barrier X_1326 := language.dataflow();
    X_1250 := bat.new(nil:str);
    X_1257 := bat.append(X_1250,".test");
    X_1267 := bat.append(X_1257,".test");
    X_1252 := bat.new(nil:str);
    X_1259 := bat.append(X_1252,"x");
    X_1268 := bat.append(X_1259,"y");
    X_1253 := bat.new(nil:str);
    X_1261 := bat.append(X_1253,"double");
    X_1270 := bat.append(X_1261,"double");
    X_1254 := bat.new(nil:int);
    X_1263 := bat.append(X_1254,53:int);
    X_1271 := bat.append(X_1263,53:int);
    X_1256 := bat.new(nil:int);
    X_1265 := bat.append(X_1256,0:int);
    X_1272 := bat.append(X_1265,0:int);
    X_1242:bat[:dbl] := bat.new(nil:dbl);
    X_1210 := sql.mvc();
    X_1296:bat[:dbl] := sql.bind(X_1210,"sys","test2","x",0:int,0:int,2:int);
    C_1293:bat[:oid] := sql.tid(X_1210,"sys","test2",0:int,2:int);
    C_1301 := algebra.select(X_1296,C_1293,4:dbl,6:dbl,true,true,false);
    X_1303 := algebra.projection(C_1301,X_1296);
    X_1297:bat[:dbl] := sql.bind(X_1210,"sys","test2","x",0:int,1:int,2:int);
    C_1295:bat[:oid] := sql.tid(X_1210,"sys","test2",1:int,2:int);
    C_1302 := algebra.select(X_1297,C_1295,4:dbl,6:dbl,true,true,false);
    X_1304 := algebra.projection(C_1302,X_1297);
    X_1315 := mat.packIncrement(X_1303,2:int);
    X_1227 := mat.packIncrement(X_1315,X_1304);
    X_1244 := bat.append(X_1242,X_1227,true);
    X_1232:bat[:dbl] := sql.bind(X_1210,"sys","test3","x",0:int);
    C_1230:bat[:oid] := sql.tid(X_1210,"sys","test3");
    C_1238 := algebra.select(X_1232,C_1230,4:dbl,6:dbl,true,true,false);
    X_1239 := algebra.projection(C_1238,X_1232);
    X_1245 := bat.append(X_1244,X_1239,true);
    X_1246:bat[:dbl] := bat.new(nil:dbl);
    X_1298:bat[:dbl] := sql.bind(X_1210,"sys","test2","y",0:int,0:int,2:int);
    X_1305 := algebra.projection(C_1301,X_1298);
    X_1299:bat[:dbl] := sql.bind(X_1210,"sys","test2","y",0:int,1:int,2:int);
    X_1306 := algebra.projection(C_1302,X_1299);
    X_1317 := mat.packIncrement(X_1305,2:int);
    X_1228 := mat.packIncrement(X_1317,X_1306);
    X_1247 := bat.append(X_1246,X_1228,true);
    X_1234:bat[:dbl] := sql.bind(X_1210,"sys","test3","y",0:int);
    X_1240 := algebra.projection(C_1238,X_1234);
    X_1248 := bat.append(X_1247,X_1240,true);
    language.pass(X_1296);
    language.pass(X_1297);
    language.pass(X_1232);
    language.pass(C_1301);
    language.pass(C_1302);
    language.pass(C_1238);
exit X_1326;
    sql.resultSet(X_1267,X_1268,X_1270,X_1271,X_1272,X_1245,X_1248);
end user.main;
#inline               actions= 0 time=3 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=4 usec 
#coercion             actions= 0 time=5 usec 
#evaluate             actions= 6 time=48 usec 
#emptybind            actions= 0 time=24 usec 
#aliases              actions=10 time=24 usec 
#mitosis              actions= 1 time=72 usec 
#mergetable           actions= 3 time=157 usec 
#deadcode             actions= 4 time=21 usec 
#aliases              actions= 0 time=16 usec 
#constants            actions= 7 time=17 usec 
#commonTerms          actions= 0 time=18 usec 
#projectionpath       actions= 0 time=12 usec 
#deadcode             actions= 0 time=16 usec 
#reorder              actions= 1 time=79 usec 
#reduce               actions=43 time=23 usec 
#matpack              actions= 2 time=17 usec 
#dataflow             actions=27 time=63 usec 
#multiplex            actions= 0 time=5 usec 
#profiler             actions= 1 time=9 usec 
#candidates           actions= 1 time=4 usec 
#garbagecollector     actions= 1 time=44 usec 
#total                actions= 1 time=984 usec 
#explain select x,y from test where x between (7-3) and (7-1);
% .explain # table_name
% mal # name
% clob # type
% 122 # length
function user.main():void;
    X_1342:void := querylog.define("explain select x,y from test where x between (7-3) and (7-1);","default_pipe",63:int);
barrier X_1478 := language.dataflow();
    X_1397 := bat.new(nil:str);
    X_1404 := bat.append(X_1397,".test");
    X_1414 := bat.append(X_1404,".test");
    X_1399 := bat.new(nil:str);
    X_1406 := bat.append(X_1399,"x");
    X_1415 := bat.append(X_1406,"y");
    X_1400 := bat.new(nil:str);
    X_1408 := bat.append(X_1400,"double");
    X_1417 := bat.append(X_1408,"double");
    X_1401 := bat.new(nil:int);
    X_1410 := bat.append(X_1401,53:int);
    X_1418 := bat.append(X_1410,53:int);
    X_1403 := bat.new(nil:int);
    X_1412 := bat.append(X_1403,0:int);
    X_1419 := bat.append(X_1412,0:int);
    X_1389:bat[:dbl] := bat.new(nil:dbl);
    X_1345 := sql.mvc();
    X_1448:bat[:dbl] := sql.bind(X_1345,"sys","test2","x",0:int,0:int,2:int);
    C_1445:bat[:oid] := sql.tid(X_1345,"sys","test2",0:int,2:int);
    C_1453 := algebra.select(X_1448,C_1445,4:dbl,6:dbl,true,true,false);
    X_1455 := algebra.projection(C_1453,X_1448);
    X_1449:bat[:dbl] := sql.bind(X_1345,"sys","test2","x",0:int,1:int,2:int);
    C_1447:bat[:oid] := sql.tid(X_1345,"sys","test2",1:int,2:int);
    C_1454 := algebra.select(X_1449,C_1447,4:dbl,6:dbl,true,true,false);
    X_1456 := algebra.projection(C_1454,X_1449);
    X_1467 := mat.packIncrement(X_1455,2:int);
    X_1368 := mat.packIncrement(X_1467,X_1456);
    X_1391 := bat.append(X_1389,X_1368,true);
    X_1373:bat[:dbl] := sql.bind(X_1345,"sys","test3","x",0:int);
    C_1371:bat[:oid] := sql.tid(X_1345,"sys","test3");
    C_1385 := algebra.select(X_1373,C_1371,4:dbl,6:dbl,true,true,false);
    X_1386 := algebra.projection(C_1385,X_1373);
    X_1392 := bat.append(X_1391,X_1386,true);
    X_1393:bat[:dbl] := bat.new(nil:dbl);
    X_1450:bat[:dbl] := sql.bind(X_1345,"sys","test2","y",0:int,0:int,2:int);
    X_1457 := algebra.projection(C_1453,X_1450);
    X_1451:bat[:dbl] := sql.bind(X_1345,"sys","test2","y",0:int,1:int,2:int);
    X_1458 := algebra.projection(C_1454,X_1451);
    X_1469 := mat.packIncrement(X_1457,2:int);
    X_1369 := mat.packIncrement(X_1469,X_1458);
    X_1394 := bat.append(X_1393,X_1369,true);
    X_1375:bat[:dbl] := sql.bind(X_1345,"sys","test3","y",0:int);
    X_1387 := algebra.projection(C_1385,X_1375);
    X_1395 := bat.append(X_1394,X_1387,true);
    language.pass(X_1448);
    language.pass(X_1449);
    language.pass(X_1373);
    language.pass(C_1453);
    language.pass(C_1454);
    language.pass(C_1385);
exit X_1478;
    sql.resultSet(X_1414,X_1415,X_1417,X_1418,X_1419,X_1392,X_1395);
end user.main;
#inline               actions= 0 time=3 usec 
#remap                actions= 0 time=9 usec 
#costmodel            actions= 1 time=3 usec 
#coercion             actions= 0 time=4 usec 
#evaluate             actions=20 time=82 usec 
#emptybind            actions= 0 time=19 usec 
#aliases              actions=24 time=19 usec 
#mitosis              actions= 1 time=47 usec 
#mergetable           actions= 3 time=92 usec 
#deadcode             actions= 4 time=15 usec 
#aliases              actions= 0 time=12 usec 
#constants            actions= 9 time=14 usec 
#commonTerms          actions= 0 time=13 usec 
#projectionpath       actions= 0 time=9 usec 
#deadcode             actions= 0 time=13 usec 
#reorder              actions= 1 time=54 usec 
#reduce               actions=64 time=25 usec 
#matpack              actions= 2 time=14 usec 
#dataflow             actions=27 time=46 usec 
#multiplex            actions= 0 time=5 usec 
#profiler             actions= 1 time=7 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=37 usec 
#total                actions= 1 time=766 usec 
#explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;
% .explain # table_name
% mal # name
% clob # type
% 144 # length
function user.main():void;
    X_1495:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;","default_pipe",37:int);
barrier X_1598 := language.dataflow();
    X_1522 := bat.new(nil:str);
    X_1529 := bat.append(X_1522,"sys.test");
    X_1538 := bat.append(X_1529,"sys.test");
    X_1524 := bat.new(nil:str);
    X_1531 := bat.append(X_1524,"x");
    X_1539 := bat.append(X_1531,"y");
    X_1525 := bat.new(nil:str);
    X_1532 := bat.append(X_1525,"double");
    X_1541 := bat.append(X_1532,"double");
    X_1526 := bat.new(nil:int);
    X_1534 := bat.append(X_1526,53:int);
    X_1542 := bat.append(X_1534,53:int);
    X_1528 := bat.new(nil:int);
    X_1536 := bat.append(X_1528,0:int);
    X_1543 := bat.append(X_1536,0:int);
    X_1498 := sql.mvc();
    X_1568:bat[:dbl] := sql.bind(X_1498,"sys","test3","y",0:int,0:int,2:int);
    X_1566:bat[:dbl] := sql.bind(X_1498,"sys","test3","x",0:int,0:int,2:int);
    C_1563:bat[:oid] := sql.tid(X_1498,"sys","test3",0:int,2:int);
    C_1571 := algebra.select(X_1566,C_1563,4:dbl,6:dbl,true,true,false);
    C_1573 := algebra.select(X_1568,C_1571,0:dbl,2:dbl,true,true,false);
    X_1575 := algebra.projection(C_1573,X_1566);
    X_1569:bat[:dbl] := sql.bind(X_1498,"sys","test3","y",0:int,1:int,2:int);
    X_1567:bat[:dbl] := sql.bind(X_1498,"sys","test3","x",0:int,1:int,2:int);
    C_1565:bat[:oid] := sql.tid(X_1498,"sys","test3",1:int,2:int);
    C_1572 := algebra.select(X_1567,C_1565,4:dbl,6:dbl,true,true,false);
    C_1574 := algebra.select(X_1569,C_1572,0:dbl,2:dbl,true,true,false);
    X_1576 := algebra.projection(C_1574,X_1567);
    X_1587 := mat.packIncrement(X_1575,2:int);
    X_1518 := mat.packIncrement(X_1587,X_1576);
    X_1577 := algebra.projection(C_1573,X_1568);
    X_1578 := algebra.projection(C_1574,X_1569);
    X_1589 := mat.packIncrement(X_1577,2:int);
    X_1519 := mat.packIncrement(X_1589,X_1578);
    language.pass(X_1566);
    language.pass(X_1567);
    language.pass(C_1573);
    language.pass(X_1568);
    language.pass(C_1574);
    language.pass(X_1569);
exit X_1598;
    sql.resultSet(X_1538,X_1539,X_1541,X_1542,X_1543,X_1518,X_1519);
end user.main;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=3 usec 
#coercion             actions= 0 time=3 usec 
#evaluate             actions= 8 time=33 usec 
#emptybind            actions= 0 time=14 usec 
#aliases              actions=10 time=29 usec 
#mitosis              actions= 1 time=41 usec 
#mergetable           actions= 4 time=85 usec 
#deadcode             actions= 5 time=14 usec 
#aliases              actions= 0 time=10 usec 
#constants            actions= 9 time=12 usec 
#commonTerms          actions= 0 time=12 usec 
#projectionpath       actions= 0 time=8 usec 
#deadcode             actions= 0 time=10 usec 
#reorder              actions= 1 time=45 usec 
#reduce               actions=44 time=20 usec 
#matpack              actions= 2 time=13 usec 
#dataflow             actions=27 time=41 usec 
#multiplex            actions= 0 time=4 usec 
#profiler             actions= 1 time=6 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=32 usec 
#total                actions= 1 time=615 usec 
#explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 156 # length
function user.main():void;
    X_1618:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);","default_pipe",45:int);
barrier X_1733 := language.dataflow();
    X_1652 := bat.new(nil:str);
    X_1659 := bat.append(X_1652,"sys.test");
    X_1669 := bat.append(X_1659,"sys.test");
    X_1654 := bat.new(nil:str);
    X_1661 := bat.append(X_1654,"x");
    X_1670 := bat.append(X_1661,"y");
    X_1655 := bat.new(nil:str);
    X_1663 := bat.append(X_1655,"double");
    X_1672 := bat.append(X_1663,"double");
    X_1656 := bat.new(nil:int);
    X_1665 := bat.append(X_1656,53:int);
    X_1673 := bat.append(X_1665,53:int);
    X_1658 := bat.new(nil:int);
    X_1667 := bat.append(X_1658,0:int);
    X_1674 := bat.append(X_1667,0:int);
    X_1621 := sql.mvc();
    X_1703:bat[:dbl] := sql.bind(X_1621,"sys","test3","y",0:int,0:int,2:int);
    X_1701:bat[:dbl] := sql.bind(X_1621,"sys","test3","x",0:int,0:int,2:int);
    C_1698:bat[:oid] := sql.tid(X_1621,"sys","test3",0:int,2:int);
    C_1706 := algebra.select(X_1701,C_1698,4:dbl,6:dbl,true,true,false);
    C_1708 := algebra.select(X_1703,C_1706,0:dbl,2:dbl,true,true,false);
    X_1710 := algebra.projection(C_1708,X_1701);
    X_1704:bat[:dbl] := sql.bind(X_1621,"sys","test3","y",0:int,1:int,2:int);
    X_1702:bat[:dbl] := sql.bind(X_1621,"sys","test3","x",0:int,1:int,2:int);
    C_1700:bat[:oid] := sql.tid(X_1621,"sys","test3",1:int,2:int);
    C_1707 := algebra.select(X_1702,C_1700,4:dbl,6:dbl,true,true,false);
    C_1709 := algebra.select(X_1704,C_1707,0:dbl,2:dbl,true,true,false);
    X_1711 := algebra.projection(C_1709,X_1702);
    X_1722 := mat.packIncrement(X_1710,2:int);
    X_1648 := mat.packIncrement(X_1722,X_1711);
    X_1712 := algebra.projection(C_1708,X_1703);
    X_1713 := algebra.projection(C_1709,X_1704);
    X_1724 := mat.packIncrement(X_1712,2:int);
    X_1649 := mat.packIncrement(X_1724,X_1713);
    language.pass(X_1701);
    language.pass(X_1702);
    language.pass(C_1708);
    language.pass(X_1703);
    language.pass(C_1709);
    language.pass(X_1704);
exit X_1733;
    sql.resultSet(X_1669,X_1670,X_1672,X_1673,X_1674,X_1648,X_1649);
end user.main;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=2 usec 
#coercion             actions= 0 time=3 usec 
#evaluate             actions=16 time=60 usec 
#emptybind            actions= 0 time=16 usec 
#aliases              actions=18 time=15 usec 
#mitosis              actions= 1 time=40 usec 
#mergetable           actions= 4 time=81 usec 
#deadcode             actions= 5 time=13 usec 
#aliases              actions= 0 time=10 usec 
#constants            actions=11 time=14 usec 
#commonTerms          actions= 0 time=11 usec 
#projectionpath       actions= 0 time=7 usec 
#deadcode             actions= 0 time=10 usec 
#reorder              actions= 1 time=45 usec 
#reduce               actions=58 time=22 usec 
#matpack              actions= 2 time=13 usec 
#dataflow             actions=27 time=40 usec 
#multiplex            actions= 0 time=4 usec 
#profiler             actions= 1 time=5 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=33 usec 
#total                actions= 1 time=638 usec 
#explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 160 # length
function user.main():void;
    X_1756:void := querylog.define("explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);","default_pipe",53:int);
barrier X_1881 := language.dataflow();
    X_1796 := bat.new(nil:str);
    X_1803 := bat.append(X_1796,"sys.test");
    X_1813 := bat.append(X_1803,"sys.test");
    X_1798 := bat.new(nil:str);
    X_1805 := bat.append(X_1798,"x");
    X_1814 := bat.append(X_1805,"y");
    X_1799 := bat.new(nil:str);
    X_1807 := bat.append(X_1799,"double");
    X_1816 := bat.append(X_1807,"double");
    X_1800 := bat.new(nil:int);
    X_1809 := bat.append(X_1800,53:int);
    X_1817 := bat.append(X_1809,53:int);
    X_1802 := bat.new(nil:int);
    X_1811 := bat.append(X_1802,0:int);
    X_1818 := bat.append(X_1811,0:int);
    X_1759 := sql.mvc();
    X_1851:bat[:dbl] := sql.bind(X_1759,"sys","test3","y",0:int,0:int,2:int);
    X_1849:bat[:dbl] := sql.bind(X_1759,"sys","test3","x",0:int,0:int,2:int);
    C_1846:bat[:oid] := sql.tid(X_1759,"sys","test3",0:int,2:int);
    C_1854 := algebra.select(X_1849,C_1846,4:dbl,6:dbl,true,true,false);
    C_1856 := algebra.select(X_1851,C_1854,0:dbl,2:dbl,true,true,false);
    X_1858 := algebra.projection(C_1856,X_1849);
    X_1852:bat[:dbl] := sql.bind(X_1759,"sys","test3","y",0:int,1:int,2:int);
    X_1850:bat[:dbl] := sql.bind(X_1759,"sys","test3","x",0:int,1:int,2:int);
    C_1848:bat[:oid] := sql.tid(X_1759,"sys","test3",1:int,2:int);
    C_1855 := algebra.select(X_1850,C_1848,4:dbl,6:dbl,true,true,false);
    C_1857 := algebra.select(X_1852,C_1855,0:dbl,2:dbl,true,true,false);
    X_1859 := algebra.projection(C_1857,X_1850);
    X_1870 := mat.packIncrement(X_1858,2:int);
    X_1792 := mat.packIncrement(X_1870,X_1859);
    X_1860 := algebra.projection(C_1856,X_1851);
    X_1861 := algebra.projection(C_1857,X_1852);
    X_1872 := mat.packIncrement(X_1860,2:int);
    X_1793 := mat.packIncrement(X_1872,X_1861);
    language.pass(X_1849);
    language.pass(X_1850);
    language.pass(C_1856);
    language.pass(X_1851);
    language.pass(C_1857);
    language.pass(X_1852);
exit X_1881;
    sql.resultSet(X_1813,X_1814,X_1816,X_1817,X_1818,X_1792,X_1793);
end user.main;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=3 usec 
#coercion             actions= 0 time=3 usec 
#evaluate             actions=24 time=70 usec 
#emptybind            actions= 0 time=17 usec 
#aliases              actions=26 time=17 usec 
#mitosis              actions= 1 time=42 usec 
#mergetable           actions= 4 time=82 usec 
#deadcode             actions= 5 time=14 usec 
#aliases              actions= 0 time=11 usec 
#constants            actions=12 time=32 usec 
#commonTerms          actions= 0 time=12 usec 
#projectionpath       actions= 0 time=7 usec 
#deadcode             actions= 0 time=11 usec 
#reorder              actions= 1 time=46 usec 
#reduce               actions=72 time=26 usec 
#matpack              actions= 2 time=14 usec 
#dataflow             actions=27 time=41 usec 
#multiplex            actions= 0 time=5 usec 
#profiler             actions= 1 time=5 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=33 usec 
#total                actions= 1 time=695 usec 
#drop table test;
#drop table test1;
#drop table test2;
#drop table test3;
#drop table test4;

# 18:37:29 >  
# 18:37:29 >  "Done."
# 18:37:29 >  

