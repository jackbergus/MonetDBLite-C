stdout of test 'partition_elim` in directory 'sql/test/remote` itself:


# 18:37:29 >  
# 18:37:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35081" "--set" "mapi_usock=/var/tmp/mtest-17557/.s.monetdb.35081" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_remote" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 18:37:29 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_remote', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.333 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.nes.nl:35081/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17557/.s.monetdb.35081
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 40_json_hge.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_gsl.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 85_bam.sql
# loading sql script: 90_generator.sql
# loading sql script: 90_generator_hge.sql
# loading sql script: 99_system.sql

# 18:37:29 >  
# 18:37:29 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-17557" "--port=35081"
# 18:37:29 >  

#create merge table test (x double, y double);
#create table test1 (x double, y double);
#create table test2 (x double, y double);
#create table test3 (x double, y double);
#create table test4 (x double, y double);
#insert into test1 values (1.0, 1.0);
[ 1	]
#insert into test1 values (2.0, 2.0);
[ 1	]
#insert into test2 values (3.0, -1.0);
[ 1	]
#insert into test2 values (4.0, -2.0);
[ 1	]
#insert into test3 values (3.0, 1.0);
[ 1	]
#insert into test3 values (6.0, 2.0);
[ 1	]
#insert into test4 values (7.0, 1.0);
[ 1	]
#insert into test4 values (10.0, 2.0);
[ 1	]
#alter table test1 set read only;
#alter table test2 set read only;
#alter table test3 set read only;
#alter table test4 set read only;
#alter table test add table test1;
#alter table test add table test2;
#alter table test add table test3;
#alter table test add table test4;
#select x from test1 where x between 0 and -1;
% sys.test1 # table_name
% x # name
% double # type
% 24 # length
#select x from test2 where x between 0 and -1;
% sys.test2 # table_name
% x # name
% double # type
% 24 # length
#select x from test3 where x between 0 and -1;
% sys.test3 # table_name
% x # name
% double # type
% 24 # length
#select x from test4 where x between 0 and -1;
% sys.test4 # table_name
% x # name
% double # type
% 24 # length
#select y from test1 where y between 0 and -1;
% sys.test1 # table_name
% y # name
% double # type
% 24 # length
#select y from test2 where y between 0 and -1;
% sys.test2 # table_name
% y # name
% double # type
% 24 # length
#select y from test3 where y between 0 and -1;
% sys.test3 # table_name
% y # name
% double # type
% 24 # length
#select y from test4 where y between 0 and -1;
% sys.test4 # table_name
% y # name
% double # type
% 24 # length
#explain select x,y from test where x between 4.0 and 6.0;
% .explain # table_name
% mal # name
% clob # type
% 69 # length
function user.SQLanalyze{autoCommit=true}():void;
barrier X_103 := language.dataflow();
    X_24 := bat.new(nil:oid,nil:str);
    X_32 := bat.append(X_24,".test");
    X_42 := bat.append(X_32,".test");
    X_27 := bat.new(nil:oid,nil:str);
    X_34 := bat.append(X_27,"x");
    X_43 := bat.append(X_34,"y");
    X_28 := bat.new(nil:oid,nil:str);
    X_36 := bat.append(X_28,"double");
    X_44 := bat.append(X_36,"double");
    X_29 := bat.new(nil:oid,nil:int);
    X_38 := bat.append(X_29,53);
    X_45 := bat.append(X_38,53);
    X_31 := bat.new(nil:oid,nil:int);
    X_40 := bat.append(X_31,0);
    X_46 := bat.append(X_40,0);
    X_3:bat[:oid,:dbl] := bat.new(nil:oid,nil:dbl);
    X_2 := sql.mvc();
    X_64:bat[:oid,:dbl] := sql.bind(X_2,"sys","test2","x",0,0,2);
    X_61:bat[:oid,:oid] := sql.tid(X_2,"sys","test2",0,2);
    X_74 := algebra.subselect(X_64,X_61,4:dbl,6:dbl,true,true,false);
    X_76 := algebra.leftfetchjoin(X_74,X_64);
    X_65:bat[:oid,:dbl] := sql.bind(X_2,"sys","test2","x",0,1,2);
    X_63:bat[:oid,:oid] := sql.tid(X_2,"sys","test2",1,2);
    X_75 := algebra.subselect(X_65,X_63,4:dbl,6:dbl,true,true,false);
    X_77 := algebra.leftfetchjoin(X_75,X_65);
    X_86 := mat.packIncrement(X_76,2);
    X_11 := mat.packIncrement(X_86,X_77);
    X_12 := bat.append(X_3,X_11,true);
    X_68:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","x",0,0,2);
    X_66:bat[:oid,:oid] := sql.tid(X_2,"sys","test3",0,2);
    X_78 := algebra.subselect(X_68,X_66,4:dbl,6:dbl,true,true,false);
    X_80 := algebra.leftfetchjoin(X_78,X_68);
    X_69:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","x",0,1,2);
    X_67:bat[:oid,:oid] := sql.tid(X_2,"sys","test3",1,2);
    X_79 := algebra.subselect(X_69,X_67,4:dbl,6:dbl,true,true,false);
    X_81 := algebra.leftfetchjoin(X_79,X_69);
    X_88 := mat.packIncrement(X_80,2);
    X_14 := mat.packIncrement(X_88,X_81);
    X_15 := bat.append(X_12,X_14,true);
    X_16:bat[:oid,:dbl] := bat.new(nil:oid,nil:dbl);
    X_70:bat[:oid,:dbl] := sql.bind(X_2,"sys","test2","y",0,0,2);
    X_82 := algebra.leftfetchjoin(X_74,X_70);
    X_71:bat[:oid,:dbl] := sql.bind(X_2,"sys","test2","y",0,1,2);
    X_83 := algebra.leftfetchjoin(X_75,X_71);
    X_90 := mat.packIncrement(X_82,2);
    X_18 := mat.packIncrement(X_90,X_83);
    X_19 := bat.append(X_16,X_18,true);
    X_72:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","y",0,0,2);
    X_84 := algebra.leftfetchjoin(X_78,X_72);
    X_73:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","y",0,1,2);
    X_85 := algebra.leftfetchjoin(X_79,X_73);
    X_92 := mat.packIncrement(X_84,2);
    X_21 := mat.packIncrement(X_92,X_85);
    X_22 := bat.append(X_19,X_21,true);
    language.pass(X_64);
    language.pass(X_65);
    language.pass(X_68);
    language.pass(X_69);
    language.pass(X_74);
    language.pass(X_75);
    language.pass(X_78);
    language.pass(X_79);
exit X_103;
    sql.resultSet(X_42,X_43,X_44,X_45,X_46,X_15,X_22);
end user.SQLanalyze;
#explain select x,y from test where x between (7-3) and (7-1);
% .explain # table_name
% mal # name
% clob # type
% 69 # length
function user.SQLanalyze{transparent, autoCommit=true}():void;
barrier X_106 := language.dataflow();
    X_29 := bat.new(nil:oid,nil:str);
    X_36 := bat.append(X_29,".test");
    X_45 := bat.append(X_36,".test");
    X_31 := bat.new(nil:oid,nil:str);
    X_38 := bat.append(X_31,"x");
    X_46 := bat.append(X_38,"y");
    X_32 := bat.new(nil:oid,nil:str);
    X_40 := bat.append(X_32,"double");
    X_47 := bat.append(X_40,"double");
    X_33 := bat.new(nil:oid,nil:int);
    X_42 := bat.append(X_33,53);
    X_48 := bat.append(X_42,53);
    X_35 := bat.new(nil:oid,nil:int);
    X_44 := bat.append(X_35,0);
    X_49 := bat.append(X_44,0);
    X_3:bat[:oid,:dbl] := bat.new(nil:oid,nil:dbl);
    X_2 := sql.mvc();
    X_67:bat[:oid,:dbl] := sql.bind(X_2,"sys","test2","x",0,0,2);
    X_64:bat[:oid,:oid] := sql.tid(X_2,"sys","test2",0,2);
    X_77 := algebra.subselect(X_67,X_64,4:dbl,6:dbl,true,true,false);
    X_79 := algebra.leftfetchjoin(X_77,X_67);
    X_68:bat[:oid,:dbl] := sql.bind(X_2,"sys","test2","x",0,1,2);
    X_66:bat[:oid,:oid] := sql.tid(X_2,"sys","test2",1,2);
    X_78 := algebra.subselect(X_68,X_66,4:dbl,6:dbl,true,true,false);
    X_80 := algebra.leftfetchjoin(X_78,X_68);
    X_89 := mat.packIncrement(X_79,2);
    X_11 := mat.packIncrement(X_89,X_80);
    X_12 := bat.append(X_3,X_11,true);
    X_71:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","x",0,0,2);
    X_69:bat[:oid,:oid] := sql.tid(X_2,"sys","test3",0,2);
    X_81 := algebra.subselect(X_71,X_69,4:dbl,6:dbl,true,true,false);
    X_83 := algebra.leftfetchjoin(X_81,X_71);
    X_72:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","x",0,1,2);
    X_70:bat[:oid,:oid] := sql.tid(X_2,"sys","test3",1,2);
    X_82 := algebra.subselect(X_72,X_70,4:dbl,6:dbl,true,true,false);
    X_84 := algebra.leftfetchjoin(X_82,X_72);
    X_91 := mat.packIncrement(X_83,2);
    X_15 := mat.packIncrement(X_91,X_84);
    X_16 := bat.append(X_12,X_15,true);
    X_17:bat[:oid,:dbl] := bat.new(nil:oid,nil:dbl);
    X_73:bat[:oid,:dbl] := sql.bind(X_2,"sys","test2","y",0,0,2);
    X_85 := algebra.leftfetchjoin(X_77,X_73);
    X_74:bat[:oid,:dbl] := sql.bind(X_2,"sys","test2","y",0,1,2);
    X_86 := algebra.leftfetchjoin(X_78,X_74);
    X_93 := mat.packIncrement(X_85,2);
    X_24 := mat.packIncrement(X_93,X_86);
    X_25 := bat.append(X_17,X_24,true);
    X_75:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","y",0,0,2);
    X_87 := algebra.leftfetchjoin(X_81,X_75);
    X_76:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","y",0,1,2);
    X_88 := algebra.leftfetchjoin(X_82,X_76);
    X_95 := mat.packIncrement(X_87,2);
    X_26 := mat.packIncrement(X_95,X_88);
    X_27 := bat.append(X_25,X_26,true);
    language.pass(X_67);
    language.pass(X_68);
    language.pass(X_71);
    language.pass(X_72);
    language.pass(X_77);
    language.pass(X_78);
    language.pass(X_81);
    language.pass(X_82);
exit X_106;
    sql.resultSet(X_45,X_46,X_47,X_48,X_49,X_16,X_27);
end user.SQLanalyze;
#explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;
% .explain # table_name
% mal # name
% clob # type
% 75 # length
function user.SQLanalyze{transparent, transparent, autoCommit=true}():void;
barrier X_76 := language.dataflow();
    X_12 := bat.new(nil:oid,nil:str);
    X_20 := bat.append(X_12,"sys.test");
    X_28 := bat.append(X_20,"sys.test");
    X_15 := bat.new(nil:oid,nil:str);
    X_22 := bat.append(X_15,"x");
    X_29 := bat.append(X_22,"y");
    X_16 := bat.new(nil:oid,nil:str);
    X_23 := bat.append(X_16,"double");
    X_31 := bat.append(X_23,"double");
    X_17 := bat.new(nil:oid,nil:int);
    X_25 := bat.append(X_17,53);
    X_32 := bat.append(X_25,53);
    X_19 := bat.new(nil:oid,nil:int);
    X_27 := bat.append(X_19,0);
    X_33 := bat.append(X_27,0);
    X_2 := sql.mvc();
    X_54:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","y",0,0,2);
    X_56:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","x",0,0,2);
    X_50:bat[:oid,:oid] := sql.tid(X_2,"sys","test3",0,2);
    X_58 := algebra.subselect(X_56,X_50,4:dbl,6:dbl,true,true,false);
    X_60 := algebra.subselect(X_54,X_58,0:dbl,2:dbl,true,true,false);
    X_62 := algebra.leftfetchjoin(X_60,X_56);
    X_55:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","y",0,1,2);
    X_57:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","x",0,1,2);
    X_52:bat[:oid,:oid] := sql.tid(X_2,"sys","test3",1,2);
    X_59 := algebra.subselect(X_57,X_52,4:dbl,6:dbl,true,true,false);
    X_61 := algebra.subselect(X_55,X_59,0:dbl,2:dbl,true,true,false);
    X_63 := algebra.leftfetchjoin(X_61,X_57);
    X_66 := mat.packIncrement(X_62,2);
    X_9 := mat.packIncrement(X_66,X_63);
    X_64 := algebra.leftfetchjoin(X_60,X_54);
    X_65 := algebra.leftfetchjoin(X_61,X_55);
    X_68 := mat.packIncrement(X_64,2);
    X_10 := mat.packIncrement(X_68,X_65);
    language.pass(X_56);
    language.pass(X_57);
    language.pass(X_60);
    language.pass(X_54);
    language.pass(X_61);
    language.pass(X_55);
exit X_76;
    sql.resultSet(X_28,X_29,X_31,X_32,X_33,X_9,X_10);
end user.SQLanalyze;
#explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 88 # length
function user.SQLanalyze{transparent, transparent, transparent, autoCommit=true}():void;
barrier X_76 := language.dataflow();
    X_12 := bat.new(nil:oid,nil:str);
    X_20 := bat.append(X_12,"sys.test");
    X_29 := bat.append(X_20,"sys.test");
    X_15 := bat.new(nil:oid,nil:str);
    X_22 := bat.append(X_15,"x");
    X_30 := bat.append(X_22,"y");
    X_16 := bat.new(nil:oid,nil:str);
    X_23 := bat.append(X_16,"double");
    X_32 := bat.append(X_23,"double");
    X_17 := bat.new(nil:oid,nil:int);
    X_25 := bat.append(X_17,53);
    X_33 := bat.append(X_25,53);
    X_19 := bat.new(nil:oid,nil:int);
    X_27 := bat.append(X_19,0);
    X_34 := bat.append(X_27,0);
    X_2 := sql.mvc();
    X_54:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","y",0,0,2);
    X_56:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","x",0,0,2);
    X_51:bat[:oid,:oid] := sql.tid(X_2,"sys","test3",0,2);
    X_58 := algebra.subselect(X_56,X_51,4:dbl,6:dbl,true,true,false);
    X_60 := algebra.subselect(X_54,X_58,0:dbl,2:dbl,true,true,false);
    X_62 := algebra.leftfetchjoin(X_60,X_56);
    X_55:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","y",0,1,2);
    X_57:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","x",0,1,2);
    X_53:bat[:oid,:oid] := sql.tid(X_2,"sys","test3",1,2);
    X_59 := algebra.subselect(X_57,X_53,4:dbl,6:dbl,true,true,false);
    X_61 := algebra.subselect(X_55,X_59,0:dbl,2:dbl,true,true,false);
    X_63 := algebra.leftfetchjoin(X_61,X_57);
    X_66 := mat.packIncrement(X_62,2);
    X_9 := mat.packIncrement(X_66,X_63);
    X_64 := algebra.leftfetchjoin(X_60,X_54);
    X_65 := algebra.leftfetchjoin(X_61,X_55);
    X_68 := mat.packIncrement(X_64,2);
    X_10 := mat.packIncrement(X_68,X_65);
    language.pass(X_56);
    language.pass(X_57);
    language.pass(X_60);
    language.pass(X_54);
    language.pass(X_61);
    language.pass(X_55);
exit X_76;
    sql.resultSet(X_29,X_30,X_32,X_33,X_34,X_9,X_10);
end user.SQLanalyze;
#explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 101 # length
function user.SQLanalyze{transparent, transparent, transparent, transparent, autoCommit=true}():void;
barrier X_76 := language.dataflow();
    X_12 := bat.new(nil:oid,nil:str);
    X_20 := bat.append(X_12,"sys.test");
    X_29 := bat.append(X_20,"sys.test");
    X_15 := bat.new(nil:oid,nil:str);
    X_22 := bat.append(X_15,"x");
    X_30 := bat.append(X_22,"y");
    X_16 := bat.new(nil:oid,nil:str);
    X_23 := bat.append(X_16,"double");
    X_32 := bat.append(X_23,"double");
    X_17 := bat.new(nil:oid,nil:int);
    X_25 := bat.append(X_17,53);
    X_33 := bat.append(X_25,53);
    X_19 := bat.new(nil:oid,nil:int);
    X_27 := bat.append(X_19,0);
    X_34 := bat.append(X_27,0);
    X_2 := sql.mvc();
    X_54:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","y",0,0,2);
    X_56:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","x",0,0,2);
    X_51:bat[:oid,:oid] := sql.tid(X_2,"sys","test3",0,2);
    X_58 := algebra.subselect(X_56,X_51,4:dbl,6:dbl,true,true,false);
    X_60 := algebra.subselect(X_54,X_58,0:dbl,2:dbl,true,true,false);
    X_62 := algebra.leftfetchjoin(X_60,X_56);
    X_55:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","y",0,1,2);
    X_57:bat[:oid,:dbl] := sql.bind(X_2,"sys","test3","x",0,1,2);
    X_53:bat[:oid,:oid] := sql.tid(X_2,"sys","test3",1,2);
    X_59 := algebra.subselect(X_57,X_53,4:dbl,6:dbl,true,true,false);
    X_61 := algebra.subselect(X_55,X_59,0:dbl,2:dbl,true,true,false);
    X_63 := algebra.leftfetchjoin(X_61,X_57);
    X_66 := mat.packIncrement(X_62,2);
    X_9 := mat.packIncrement(X_66,X_63);
    X_64 := algebra.leftfetchjoin(X_60,X_54);
    X_65 := algebra.leftfetchjoin(X_61,X_55);
    X_68 := mat.packIncrement(X_64,2);
    X_10 := mat.packIncrement(X_68,X_65);
    language.pass(X_56);
    language.pass(X_57);
    language.pass(X_60);
    language.pass(X_54);
    language.pass(X_61);
    language.pass(X_55);
exit X_76;
    sql.resultSet(X_29,X_30,X_32,X_33,X_34,X_9,X_10);
end user.SQLanalyze;
#drop table test;
#drop table test1;
#drop table test2;
#drop table test3;
#drop table test4;

# 18:37:29 >  
# 18:37:29 >  "Done."
# 18:37:29 >  

