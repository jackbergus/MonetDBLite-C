stdout of test 'partition_elim` in directory 'sql/test/remote` itself:


# 18:37:29 >  
# 18:37:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35081" "--set" "mapi_usock=/var/tmp/mtest-17557/.s.monetdb.35081" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_remote" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 18:37:29 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_remote', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.333 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.nes.nl:35081/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17557/.s.monetdb.35081
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 40_json_hge.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_gsl.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 85_bam.sql
# loading sql script: 90_generator.sql
# loading sql script: 90_generator_hge.sql
# loading sql script: 99_system.sql

# 18:37:29 >  
# 18:37:29 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-17557" "--port=35081"
# 18:37:29 >  

#create merge table test (x double, y double);
#create table test1 (x double, y double);
#create table test2 (x double, y double);
#create table test3 (x double, y double);
#create table test4 (x double, y double);
#insert into test1 values (1.0, 1.0);
[ 1	]
#insert into test1 values (2.0, 2.0);
[ 1	]
#insert into test2 values (3.0, -1.0);
[ 1	]
#insert into test2 values (4.0, -2.0);
[ 1	]
#insert into test3 values (3.0, 1.0);
[ 1	]
#insert into test3 values (6.0, 2.0);
[ 1	]
#insert into test4 values (7.0, 1.0);
[ 1	]
#insert into test4 values (10.0, 2.0);
[ 1	]
#alter table test1 set read only;
#alter table test2 set read only;
#alter table test3 set read only;
#alter table test4 set read only;
#alter table test add table test1;
#alter table test add table test2;
#alter table test add table test3;
#alter table test add table test4;
#select x from test1 where x between 0 and -1;
% sys.test1 # table_name
% x # name
% double # type
% 24 # length
#select x from test2 where x between 0 and -1;
% sys.test2 # table_name
% x # name
% double # type
% 24 # length
#select x from test3 where x between 0 and -1;
% sys.test3 # table_name
% x # name
% double # type
% 24 # length
#select x from test4 where x between 0 and -1;
% sys.test4 # table_name
% x # name
% double # type
% 24 # length
#select y from test1 where y between 0 and -1;
% sys.test1 # table_name
% y # name
% double # type
% 24 # length
#select y from test2 where y between 0 and -1;
% sys.test2 # table_name
% y # name
% double # type
% 24 # length
#select y from test3 where y between 0 and -1;
% sys.test3 # table_name
% y # name
% double # type
% 24 # length
#select y from test4 where y between 0 and -1;
% sys.test4 # table_name
% y # name
% double # type
% 24 # length
#explain select x,y from test where x between 4.0 and 6.0;
% .explain # table_name
% mal # name
% clob # type
% 61 # length
function user.SQLanalyze():void;
barrier X_97 := language.dataflow();
    X_28 := bat.new(nil:str);
    X_35 := bat.append(X_28,".test");
    X_43 := bat.append(X_35,".test");
    X_30 := bat.new(nil:str);
    X_37 := bat.append(X_30,"x");
    X_44 := bat.append(X_37,"y");
    X_31 := bat.new(nil:str);
    X_38 := bat.append(X_31,"double");
    X_45 := bat.append(X_38,"double");
    X_32 := bat.new(nil:int);
    X_40 := bat.append(X_32,53);
    X_46 := bat.append(X_40,53);
    X_34 := bat.new(nil:int);
    X_42 := bat.append(X_34,0);
    X_47 := bat.append(X_42,0);
    X_4:bat[:dbl] := bat.new(nil:dbl);
    X_3 := sql.mvc();
    X_66:bat[:dbl] := sql.bind(X_3,"sys","test2","x",0,0,2);
    C_63:bat[:oid] := sql.tid(X_3,"sys","test2",0,2);
    C_71 := algebra.subselect(X_66,C_63,4,6,true,true,false);
    X_73 := algebra.projection(C_71,X_66);
    X_67:bat[:dbl] := sql.bind(X_3,"sys","test2","x",0,1,2);
    C_65:bat[:oid] := sql.tid(X_3,"sys","test2",1,2);
    C_72 := algebra.subselect(X_67,C_65,4,6,true,true,false);
    X_74 := algebra.projection(C_72,X_67);
    X_86 := mat.packIncrement(X_73,2);
    X_12 := mat.packIncrement(X_86,X_74);
    X_13 := bat.append(X_4,X_12,true);
    X_16:bat[:dbl] := sql.bind(X_3,"sys","test3","x",0);
    C_14:bat[:oid] := sql.tid(X_3,"sys","test3");
    C_17 := algebra.subselect(X_16,C_14,4,6,true,true,false);
    X_18 := algebra.projection(C_17,X_16);
    X_19 := bat.append(X_13,X_18,true);
    X_20:bat[:dbl] := bat.new(nil:dbl);
    X_68:bat[:dbl] := sql.bind(X_3,"sys","test2","y",0,0,2);
    X_75 := algebra.projection(C_71,X_68);
    X_69:bat[:dbl] := sql.bind(X_3,"sys","test2","y",0,1,2);
    X_76 := algebra.projection(C_72,X_69);
    X_88 := mat.packIncrement(X_75,2);
    X_22 := mat.packIncrement(X_88,X_76);
    X_23 := bat.append(X_20,X_22,true);
    X_24:bat[:dbl] := sql.bind(X_3,"sys","test3","y",0);
    X_25 := algebra.projection(C_17,X_24);
    X_26 := bat.append(X_23,X_25,true);
    language.pass(X_66);
    language.pass(X_67);
    language.pass(X_16);
    language.pass(C_71);
    language.pass(C_72);
    language.pass(C_17);
exit X_97;
    sql.resultSet(X_43,X_44,X_45,X_46,X_47,X_19,X_26);
end user.SQLanalyze;
#explain select x,y from test where x between (7-3) and (7-1);
% .explain # table_name
% mal # name
% clob # type
% 69 # length
function user.SQLanalyze():void;
barrier X_97 := language.dataflow();
    X_26 := bat.new(nil:str);
    X_33 := bat.append(X_26,".test");
    X_41 := bat.append(X_33,".test");
    X_28 := bat.new(nil:str);
    X_35 := bat.append(X_28,"x");
    X_42 := bat.append(X_35,"y");
    X_29 := bat.new(nil:str);
    X_36 := bat.append(X_29,"double");
    X_43 := bat.append(X_36,"double");
    X_30 := bat.new(nil:int);
    X_38 := bat.append(X_30,53);
    X_44 := bat.append(X_38,53);
    X_32 := bat.new(nil:int);
    X_40 := bat.append(X_32,0);
    X_45 := bat.append(X_40,0);
    X_2:bat[:dbl] := bat.new(nil:dbl);
    X_1 := sql.mvc();
    X_66:bat[:dbl] := sql.bind(X_1,"sys","test2","x",0,0,2);
    C_63:bat[:oid] := sql.tid(X_1,"sys","test2",0,2);
    C_71 := algebra.subselect(X_66,C_63,4:dbl,6:dbl,true,true,false);
    X_73 := algebra.projection(C_71,X_66);
    X_67:bat[:dbl] := sql.bind(X_1,"sys","test2","x",0,1,2);
    C_65:bat[:oid] := sql.tid(X_1,"sys","test2",1,2);
    C_72 := algebra.subselect(X_67,C_65,4:dbl,6:dbl,true,true,false);
    X_74 := algebra.projection(C_72,X_67);
    X_86 := mat.packIncrement(X_73,2);
    X_10 := mat.packIncrement(X_86,X_74);
    X_11 := bat.append(X_2,X_10,true);
    X_14:bat[:dbl] := sql.bind(X_1,"sys","test3","x",0);
    C_12:bat[:oid] := sql.tid(X_1,"sys","test3");
    C_15 := algebra.subselect(X_14,C_12,4:dbl,6:dbl,true,true,false);
    X_16 := algebra.projection(C_15,X_14);
    X_17 := bat.append(X_11,X_16,true);
    X_18:bat[:dbl] := bat.new(nil:dbl);
    X_68:bat[:dbl] := sql.bind(X_1,"sys","test2","y",0,0,2);
    X_75 := algebra.projection(C_71,X_68);
    X_69:bat[:dbl] := sql.bind(X_1,"sys","test2","y",0,1,2);
    X_76 := algebra.projection(C_72,X_69);
    X_88 := mat.packIncrement(X_75,2);
    X_20 := mat.packIncrement(X_88,X_76);
    X_21 := bat.append(X_18,X_20,true);
    X_22:bat[:dbl] := sql.bind(X_1,"sys","test3","y",0);
    X_23 := algebra.projection(C_15,X_22);
    X_24 := bat.append(X_21,X_23,true);
    language.pass(X_66);
    language.pass(X_67);
    language.pass(X_14);
    language.pass(C_71);
    language.pass(C_72);
    language.pass(C_15);
exit X_97;
    sql.resultSet(X_41,X_42,X_43,X_44,X_45,X_17,X_24);
end user.SQLanalyze;
#explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;
% .explain # table_name
% mal # name
% clob # type
% 61 # length
function user.SQLanalyze():void;
barrier X_87 := language.dataflow();
    X_16 := bat.new(nil:str);
    X_23 := bat.append(X_16,"sys.test");
    X_31 := bat.append(X_23,"sys.test");
    X_18 := bat.new(nil:str);
    X_25 := bat.append(X_18,"x");
    X_32 := bat.append(X_25,"y");
    X_19 := bat.new(nil:str);
    X_26 := bat.append(X_19,"double");
    X_33 := bat.append(X_26,"double");
    X_20 := bat.new(nil:int);
    X_28 := bat.append(X_20,53);
    X_34 := bat.append(X_28,53);
    X_22 := bat.new(nil:int);
    X_30 := bat.append(X_22,0);
    X_35 := bat.append(X_30,0);
    X_5 := sql.mvc();
    X_54:bat[:dbl] := sql.bind(X_5,"sys","test3","y",0,0,2);
    X_56:bat[:dbl] := sql.bind(X_5,"sys","test3","x",0,0,2);
    C_51:bat[:oid] := sql.tid(X_5,"sys","test3",0,2);
    C_59 := algebra.subselect(X_56,C_51,4,6,true,true,false);
    C_61 := algebra.subselect(X_54,C_59,0,2,true,true,false);
    X_63 := algebra.projection(C_61,X_56);
    X_55:bat[:dbl] := sql.bind(X_5,"sys","test3","y",0,1,2);
    X_57:bat[:dbl] := sql.bind(X_5,"sys","test3","x",0,1,2);
    C_53:bat[:oid] := sql.tid(X_5,"sys","test3",1,2);
    C_60 := algebra.subselect(X_57,C_53,4,6,true,true,false);
    C_62 := algebra.subselect(X_55,C_60,0,2,true,true,false);
    X_64 := algebra.projection(C_62,X_57);
    X_76 := mat.packIncrement(X_63,2);
    X_13 := mat.packIncrement(X_76,X_64);
    X_65 := algebra.projection(C_61,X_54);
    X_66 := algebra.projection(C_62,X_55);
    X_78 := mat.packIncrement(X_65,2);
    X_14 := mat.packIncrement(X_78,X_66);
    language.pass(X_56);
    language.pass(X_57);
    language.pass(C_61);
    language.pass(X_54);
    language.pass(C_62);
    language.pass(X_55);
exit X_87;
    sql.resultSet(X_31,X_32,X_33,X_34,X_35,X_13,X_14);
end user.SQLanalyze;
#explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 69 # length
function user.SQLanalyze():void;
barrier X_87 := language.dataflow();
    X_15 := bat.new(nil:str);
    X_22 := bat.append(X_15,"sys.test");
    X_30 := bat.append(X_22,"sys.test");
    X_17 := bat.new(nil:str);
    X_24 := bat.append(X_17,"x");
    X_31 := bat.append(X_24,"y");
    X_18 := bat.new(nil:str);
    X_25 := bat.append(X_18,"double");
    X_32 := bat.append(X_25,"double");
    X_19 := bat.new(nil:int);
    X_27 := bat.append(X_19,53);
    X_33 := bat.append(X_27,53);
    X_21 := bat.new(nil:int);
    X_29 := bat.append(X_21,0);
    X_34 := bat.append(X_29,0);
    X_3 := sql.mvc();
    X_54:bat[:dbl] := sql.bind(X_3,"sys","test3","y",0,0,2);
    X_56:bat[:dbl] := sql.bind(X_3,"sys","test3","x",0,0,2);
    C_52:bat[:oid] := sql.tid(X_3,"sys","test3",0,2);
    C_59 := algebra.subselect(X_56,C_52,4,6,true,true,false);
    C_61 := algebra.subselect(X_54,C_59,0:dbl,2:dbl,true,true,false);
    X_63 := algebra.projection(C_61,X_56);
    X_55:bat[:dbl] := sql.bind(X_3,"sys","test3","y",0,1,2);
    X_57:bat[:dbl] := sql.bind(X_3,"sys","test3","x",0,1,2);
    C_53:bat[:oid] := sql.tid(X_3,"sys","test3",1,2);
    C_60 := algebra.subselect(X_57,C_53,4,6,true,true,false);
    C_62 := algebra.subselect(X_55,C_60,0:dbl,2:dbl,true,true,false);
    X_64 := algebra.projection(C_62,X_57);
    X_76 := mat.packIncrement(X_63,2);
    X_12 := mat.packIncrement(X_76,X_64);
    X_65 := algebra.projection(C_61,X_54);
    X_66 := algebra.projection(C_62,X_55);
    X_78 := mat.packIncrement(X_65,2);
    X_13 := mat.packIncrement(X_78,X_66);
    language.pass(X_56);
    language.pass(X_57);
    language.pass(C_61);
    language.pass(X_54);
    language.pass(C_62);
    language.pass(X_55);
exit X_87;
    sql.resultSet(X_30,X_31,X_32,X_33,X_34,X_12,X_13);
end user.SQLanalyze;
#explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 69 # length
function user.SQLanalyze():void;
barrier X_87 := language.dataflow();
    X_13 := bat.new(nil:str);
    X_20 := bat.append(X_13,"sys.test");
    X_28 := bat.append(X_20,"sys.test");
    X_15 := bat.new(nil:str);
    X_22 := bat.append(X_15,"x");
    X_29 := bat.append(X_22,"y");
    X_16 := bat.new(nil:str);
    X_23 := bat.append(X_16,"double");
    X_30 := bat.append(X_23,"double");
    X_17 := bat.new(nil:int);
    X_25 := bat.append(X_17,53);
    X_31 := bat.append(X_25,53);
    X_19 := bat.new(nil:int);
    X_27 := bat.append(X_19,0);
    X_32 := bat.append(X_27,0);
    X_1 := sql.mvc();
    X_54:bat[:dbl] := sql.bind(X_1,"sys","test3","y",0,0,2);
    X_56:bat[:dbl] := sql.bind(X_1,"sys","test3","x",0,0,2);
    C_52:bat[:oid] := sql.tid(X_1,"sys","test3",0,2);
    C_59 := algebra.subselect(X_56,C_52,4:dbl,6:dbl,true,true,false);
    C_61 := algebra.subselect(X_54,C_59,0:dbl,2:dbl,true,true,false);
    X_63 := algebra.projection(C_61,X_56);
    X_55:bat[:dbl] := sql.bind(X_1,"sys","test3","y",0,1,2);
    X_57:bat[:dbl] := sql.bind(X_1,"sys","test3","x",0,1,2);
    C_53:bat[:oid] := sql.tid(X_1,"sys","test3",1,2);
    C_60 := algebra.subselect(X_57,C_53,4:dbl,6:dbl,true,true,false);
    C_62 := algebra.subselect(X_55,C_60,0:dbl,2:dbl,true,true,false);
    X_64 := algebra.projection(C_62,X_57);
    X_76 := mat.packIncrement(X_63,2);
    X_10 := mat.packIncrement(X_76,X_64);
    X_65 := algebra.projection(C_61,X_54);
    X_66 := algebra.projection(C_62,X_55);
    X_78 := mat.packIncrement(X_65,2);
    X_11 := mat.packIncrement(X_78,X_66);
    language.pass(X_56);
    language.pass(X_57);
    language.pass(C_61);
    language.pass(X_54);
    language.pass(C_62);
    language.pass(X_55);
exit X_87;
    sql.resultSet(X_28,X_29,X_30,X_31,X_32,X_10,X_11);
end user.SQLanalyze;
#drop table test;
#drop table test1;
#drop table test2;
#drop table test3;
#drop table test4;

# 18:37:29 >  
# 18:37:29 >  "Done."
# 18:37:29 >  

