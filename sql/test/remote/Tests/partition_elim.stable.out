stdout of test 'partition_elim` in directory 'sql/test/remote` itself:


# 18:37:29 >  
# 18:37:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35081" "--set" "mapi_usock=/var/tmp/mtest-17557/.s.monetdb.35081" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_remote" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 18:37:29 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_remote', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.333 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.nes.nl:35081/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17557/.s.monetdb.35081
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 40_json_hge.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_gsl.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 85_bam.sql
# loading sql script: 90_generator.sql
# loading sql script: 90_generator_hge.sql
# loading sql script: 99_system.sql

# 18:37:29 >  
# 18:37:29 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-17557" "--port=35081"
# 18:37:29 >  

#create merge table test (x double, y double);
#create table test1 (x double, y double);
#create table test2 (x double, y double);
#create table test3 (x double, y double);
#create table test4 (x double, y double);
#insert into test1 values (1.0, 1.0);
[ 1	]
#insert into test1 values (2.0, 2.0);
[ 1	]
#insert into test2 values (3.0, -1.0);
[ 1	]
#insert into test2 values (4.0, -2.0);
[ 1	]
#insert into test3 values (3.0, 1.0);
[ 1	]
#insert into test3 values (6.0, 2.0);
[ 1	]
#insert into test4 values (7.0, 1.0);
[ 1	]
#insert into test4 values (10.0, 2.0);
[ 1	]
#alter table test1 set read only;
#alter table test2 set read only;
#alter table test3 set read only;
#alter table test4 set read only;
#alter table test add table test1;
#alter table test add table test2;
#alter table test add table test3;
#alter table test add table test4;
#select x from test1 where x between 0 and -1;
% sys.test1 # table_name
% x # name
% double # type
% 24 # length
#select x from test2 where x between 0 and -1;
% sys.test2 # table_name
% x # name
% double # type
% 24 # length
#select x from test3 where x between 0 and -1;
% sys.test3 # table_name
% x # name
% double # type
% 24 # length
#select x from test4 where x between 0 and -1;
% sys.test4 # table_name
% x # name
% double # type
% 24 # length
#select y from test1 where y between 0 and -1;
% sys.test1 # table_name
% y # name
% double # type
% 24 # length
#select y from test2 where y between 0 and -1;
% sys.test2 # table_name
% y # name
% double # type
% 24 # length
#select y from test3 where y between 0 and -1;
% sys.test3 # table_name
% y # name
% double # type
% 24 # length
#select y from test4 where y between 0 and -1;
% sys.test4 # table_name
% y # name
% double # type
% 24 # length
#explain select x,y from test where x between 4.0 and 6.0;
% .explain # table_name
% mal # name
% clob # type
% 68 # length
function user.SQLanalyze():void;
barrier X_1253 := language.dataflow();
    X_1181 := bat.new(nil:str);
    X_1188 := bat.append(X_1181,".test");
    X_1198 := bat.append(X_1188,".test");
    X_1183 := bat.new(nil:str);
    X_1190 := bat.append(X_1183,"x");
    X_1199 := bat.append(X_1190,"y");
    X_1184 := bat.new(nil:str);
    X_1192 := bat.append(X_1184,"double");
    X_1200 := bat.append(X_1192,"double");
    X_1185 := bat.new(nil:int);
    X_1194 := bat.append(X_1185,53);
    X_1201 := bat.append(X_1194,53);
    X_1187 := bat.new(nil:int);
    X_1196 := bat.append(X_1187,0);
    X_1202 := bat.append(X_1196,0);
    X_1144:bat[:dbl] := bat.new(nil:dbl);
    X_1143 := sql.mvc();
    X_1222:bat[:dbl] := sql.bind(X_1143,"sys","test2","x",0,0,2);
    C_1219:bat[:oid] := sql.tid(X_1143,"sys","test2",0,2);
    C_1227 := algebra.subselect(X_1222,C_1219,4,6,true,true,false);
    X_1229 := algebra.projection(C_1227,X_1222);
    X_1223:bat[:dbl] := sql.bind(X_1143,"sys","test2","x",0,1,2);
    C_1221:bat[:oid] := sql.tid(X_1143,"sys","test2",1,2);
    C_1228 := algebra.subselect(X_1223,C_1221,4,6,true,true,false);
    X_1230 := algebra.projection(C_1228,X_1223);
    X_1242 := mat.packIncrement(X_1229,2);
    X_1159 := mat.packIncrement(X_1242,X_1230);
    X_1160 := bat.append(X_1144,X_1159,true);
    X_1163:bat[:dbl] := sql.bind(X_1143,"sys","test3","x",0);
    C_1161:bat[:oid] := sql.tid(X_1143,"sys","test3");
    C_1167 := algebra.subselect(X_1163,C_1161,4,6,true,true,false);
    X_1168 := algebra.projection(C_1167,X_1163);
    X_1169 := bat.append(X_1160,X_1168,true);
    X_1170:bat[:dbl] := bat.new(nil:dbl);
    X_1224:bat[:dbl] := sql.bind(X_1143,"sys","test2","y",0,0,2);
    X_1231 := algebra.projection(C_1227,X_1224);
    X_1225:bat[:dbl] := sql.bind(X_1143,"sys","test2","y",0,1,2);
    X_1232 := algebra.projection(C_1228,X_1225);
    X_1244 := mat.packIncrement(X_1231,2);
    X_1174 := mat.packIncrement(X_1244,X_1232);
    X_1175 := bat.append(X_1170,X_1174,true);
    X_1176:bat[:dbl] := sql.bind(X_1143,"sys","test3","y",0);
    X_1178 := algebra.projection(C_1167,X_1176);
    X_1179 := bat.append(X_1175,X_1178,true);
    language.pass(X_1222);
    language.pass(X_1223);
    language.pass(X_1163);
    language.pass(C_1227);
    language.pass(C_1228);
    language.pass(C_1167);
exit X_1253;
    sql.resultSet(X_1198,X_1199,X_1200,X_1201,X_1202,X_1169,X_1179);
end user.SQLanalyze;
#explain select x,y from test where x between (7-3) and (7-1);
% .explain # table_name
% mal # name
% clob # type
% 75 # length
function user.SQLanalyze():void;
barrier X_1397 := language.dataflow();
    X_1320 := bat.new(nil:str);
    X_1327 := bat.append(X_1320,".test");
    X_1337 := bat.append(X_1327,".test");
    X_1322 := bat.new(nil:str);
    X_1329 := bat.append(X_1322,"x");
    X_1338 := bat.append(X_1329,"y");
    X_1323 := bat.new(nil:str);
    X_1331 := bat.append(X_1323,"double");
    X_1339 := bat.append(X_1331,"double");
    X_1324 := bat.new(nil:int);
    X_1333 := bat.append(X_1324,53);
    X_1340 := bat.append(X_1333,53);
    X_1326 := bat.new(nil:int);
    X_1335 := bat.append(X_1326,0);
    X_1341 := bat.append(X_1335,0);
    X_1270:bat[:dbl] := bat.new(nil:dbl);
    X_1269 := sql.mvc();
    X_1366:bat[:dbl] := sql.bind(X_1269,"sys","test2","x",0,0,2);
    C_1363:bat[:oid] := sql.tid(X_1269,"sys","test2",0,2);
    C_1371 := algebra.subselect(X_1366,C_1363,4:dbl,6:dbl,true,true,false);
    X_1373 := algebra.projection(C_1371,X_1366);
    X_1367:bat[:dbl] := sql.bind(X_1269,"sys","test2","x",0,1,2);
    C_1365:bat[:oid] := sql.tid(X_1269,"sys","test2",1,2);
    C_1372 := algebra.subselect(X_1367,C_1365,4:dbl,6:dbl,true,true,false);
    X_1374 := algebra.projection(C_1372,X_1367);
    X_1386 := mat.packIncrement(X_1373,2);
    X_1291 := mat.packIncrement(X_1386,X_1374);
    X_1292 := bat.append(X_1270,X_1291,true);
    X_1295:bat[:dbl] := sql.bind(X_1269,"sys","test3","x",0);
    C_1293:bat[:oid] := sql.tid(X_1269,"sys","test3");
    C_1305 := algebra.subselect(X_1295,C_1293,4:dbl,6:dbl,true,true,false);
    X_1306 := algebra.projection(C_1305,X_1295);
    X_1307 := bat.append(X_1292,X_1306,true);
    X_1308:bat[:dbl] := bat.new(nil:dbl);
    X_1368:bat[:dbl] := sql.bind(X_1269,"sys","test2","y",0,0,2);
    X_1375 := algebra.projection(C_1371,X_1368);
    X_1369:bat[:dbl] := sql.bind(X_1269,"sys","test2","y",0,1,2);
    X_1376 := algebra.projection(C_1372,X_1369);
    X_1388 := mat.packIncrement(X_1375,2);
    X_1313 := mat.packIncrement(X_1388,X_1376);
    X_1314 := bat.append(X_1308,X_1313,true);
    X_1315:bat[:dbl] := sql.bind(X_1269,"sys","test3","y",0);
    X_1317 := algebra.projection(C_1305,X_1315);
    X_1318 := bat.append(X_1314,X_1317,true);
    language.pass(X_1366);
    language.pass(X_1367);
    language.pass(X_1295);
    language.pass(C_1371);
    language.pass(C_1372);
    language.pass(C_1305);
exit X_1397;
    sql.resultSet(X_1337,X_1338,X_1339,X_1340,X_1341,X_1307,X_1318);
end user.SQLanalyze;
#explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;
% .explain # table_name
% mal # name
% clob # type
% 68 # length
function user.SQLanalyze():void;
barrier X_1511 := language.dataflow();
    X_1437 := bat.new(nil:str);
    X_1444 := bat.append(X_1437,"sys.test");
    X_1452 := bat.append(X_1444,"sys.test");
    X_1439 := bat.new(nil:str);
    X_1446 := bat.append(X_1439,"x");
    X_1453 := bat.append(X_1446,"y");
    X_1440 := bat.new(nil:str);
    X_1447 := bat.append(X_1440,"double");
    X_1455 := bat.append(X_1447,"double");
    X_1441 := bat.new(nil:int);
    X_1449 := bat.append(X_1441,53);
    X_1456 := bat.append(X_1449,53);
    X_1443 := bat.new(nil:int);
    X_1451 := bat.append(X_1443,0);
    X_1457 := bat.append(X_1451,0);
    X_1414 := sql.mvc();
    X_1478:bat[:dbl] := sql.bind(X_1414,"sys","test3","y",0,0,2);
    X_1480:bat[:dbl] := sql.bind(X_1414,"sys","test3","x",0,0,2);
    C_1475:bat[:oid] := sql.tid(X_1414,"sys","test3",0,2);
    C_1483 := algebra.subselect(X_1480,C_1475,4,6,true,true,false);
    C_1485 := algebra.subselect(X_1478,C_1483,0,2,true,true,false);
    X_1487 := algebra.projection(C_1485,X_1480);
    X_1479:bat[:dbl] := sql.bind(X_1414,"sys","test3","y",0,1,2);
    X_1481:bat[:dbl] := sql.bind(X_1414,"sys","test3","x",0,1,2);
    C_1477:bat[:oid] := sql.tid(X_1414,"sys","test3",1,2);
    C_1484 := algebra.subselect(X_1481,C_1477,4,6,true,true,false);
    C_1486 := algebra.subselect(X_1479,C_1484,0,2,true,true,false);
    X_1488 := algebra.projection(C_1486,X_1481);
    X_1500 := mat.packIncrement(X_1487,2);
    X_1434 := mat.packIncrement(X_1500,X_1488);
    X_1489 := algebra.projection(C_1485,X_1478);
    X_1490 := algebra.projection(C_1486,X_1479);
    X_1502 := mat.packIncrement(X_1489,2);
    X_1435 := mat.packIncrement(X_1502,X_1490);
    language.pass(X_1480);
    language.pass(X_1481);
    language.pass(C_1485);
    language.pass(X_1478);
    language.pass(C_1486);
    language.pass(X_1479);
exit X_1511;
    sql.resultSet(X_1452,X_1453,X_1455,X_1456,X_1457,X_1434,X_1435);
end user.SQLanalyze;
#explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 75 # length
function user.SQLanalyze():void;
barrier X_1639 := language.dataflow();
    X_1561 := bat.new(nil:str);
    X_1568 := bat.append(X_1561,"sys.test");
    X_1577 := bat.append(X_1568,"sys.test");
    X_1563 := bat.new(nil:str);
    X_1570 := bat.append(X_1563,"x");
    X_1578 := bat.append(X_1570,"y");
    X_1564 := bat.new(nil:str);
    X_1571 := bat.append(X_1564,"double");
    X_1580 := bat.append(X_1571,"double");
    X_1565 := bat.new(nil:int);
    X_1573 := bat.append(X_1565,53);
    X_1581 := bat.append(X_1573,53);
    X_1567 := bat.new(nil:int);
    X_1575 := bat.append(X_1567,0);
    X_1582 := bat.append(X_1575,0);
    X_1531 := sql.mvc();
    X_1606:bat[:dbl] := sql.bind(X_1531,"sys","test3","y",0,0,2);
    X_1608:bat[:dbl] := sql.bind(X_1531,"sys","test3","x",0,0,2);
    C_1603:bat[:oid] := sql.tid(X_1531,"sys","test3",0,2);
    C_1611 := algebra.subselect(X_1608,C_1603,4,6,true,true,false);
    C_1613 := algebra.subselect(X_1606,C_1611,0:dbl,2:dbl,true,true,false);
    X_1615 := algebra.projection(C_1613,X_1608);
    X_1607:bat[:dbl] := sql.bind(X_1531,"sys","test3","y",0,1,2);
    X_1609:bat[:dbl] := sql.bind(X_1531,"sys","test3","x",0,1,2);
    C_1605:bat[:oid] := sql.tid(X_1531,"sys","test3",1,2);
    C_1612 := algebra.subselect(X_1609,C_1605,4,6,true,true,false);
    C_1614 := algebra.subselect(X_1607,C_1612,0:dbl,2:dbl,true,true,false);
    X_1616 := algebra.projection(C_1614,X_1609);
    X_1628 := mat.packIncrement(X_1615,2);
    X_1558 := mat.packIncrement(X_1628,X_1616);
    X_1617 := algebra.projection(C_1613,X_1606);
    X_1618 := algebra.projection(C_1614,X_1607);
    X_1630 := mat.packIncrement(X_1617,2);
    X_1559 := mat.packIncrement(X_1630,X_1618);
    language.pass(X_1608);
    language.pass(X_1609);
    language.pass(C_1613);
    language.pass(X_1606);
    language.pass(C_1614);
    language.pass(X_1607);
exit X_1639;
    sql.resultSet(X_1577,X_1578,X_1580,X_1581,X_1582,X_1558,X_1559);
end user.SQLanalyze;
#explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 75 # length
function user.SQLanalyze():void;
barrier X_1781 := language.dataflow();
    X_1698 := bat.new(nil:str);
    X_1705 := bat.append(X_1698,"sys.test");
    X_1714 := bat.append(X_1705,"sys.test");
    X_1700 := bat.new(nil:str);
    X_1707 := bat.append(X_1700,"x");
    X_1715 := bat.append(X_1707,"y");
    X_1701 := bat.new(nil:str);
    X_1708 := bat.append(X_1701,"double");
    X_1717 := bat.append(X_1708,"double");
    X_1702 := bat.new(nil:int);
    X_1710 := bat.append(X_1702,53);
    X_1718 := bat.append(X_1710,53);
    X_1704 := bat.new(nil:int);
    X_1712 := bat.append(X_1704,0);
    X_1719 := bat.append(X_1712,0);
    X_1662 := sql.mvc();
    X_1748:bat[:dbl] := sql.bind(X_1662,"sys","test3","y",0,0,2);
    X_1750:bat[:dbl] := sql.bind(X_1662,"sys","test3","x",0,0,2);
    C_1745:bat[:oid] := sql.tid(X_1662,"sys","test3",0,2);
    C_1753 := algebra.subselect(X_1750,C_1745,4:dbl,6:dbl,true,true,false);
    C_1755 := algebra.subselect(X_1748,C_1753,0:dbl,2:dbl,true,true,false);
    X_1757 := algebra.projection(C_1755,X_1750);
    X_1749:bat[:dbl] := sql.bind(X_1662,"sys","test3","y",0,1,2);
    X_1751:bat[:dbl] := sql.bind(X_1662,"sys","test3","x",0,1,2);
    C_1747:bat[:oid] := sql.tid(X_1662,"sys","test3",1,2);
    C_1754 := algebra.subselect(X_1751,C_1747,4:dbl,6:dbl,true,true,false);
    C_1756 := algebra.subselect(X_1749,C_1754,0:dbl,2:dbl,true,true,false);
    X_1758 := algebra.projection(C_1756,X_1751);
    X_1770 := mat.packIncrement(X_1757,2);
    X_1695 := mat.packIncrement(X_1770,X_1758);
    X_1759 := algebra.projection(C_1755,X_1748);
    X_1760 := algebra.projection(C_1756,X_1749);
    X_1772 := mat.packIncrement(X_1759,2);
    X_1696 := mat.packIncrement(X_1772,X_1760);
    language.pass(X_1750);
    language.pass(X_1751);
    language.pass(C_1755);
    language.pass(X_1748);
    language.pass(C_1756);
    language.pass(X_1749);
exit X_1781;
    sql.resultSet(X_1714,X_1715,X_1717,X_1718,X_1719,X_1695,X_1696);
end user.SQLanalyze;
#drop table test;
#drop table test1;
#drop table test2;
#drop table test3;
#drop table test4;

# 18:37:29 >  
# 18:37:29 >  "Done."
# 18:37:29 >  

