stdout of test 'partition_elim` in directory 'sql/test/remote` itself:


# 18:37:29 >  
# 18:37:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35081" "--set" "mapi_usock=/var/tmp/mtest-17557/.s.monetdb.35081" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_remote" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 18:37:29 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_remote', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.333 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.nes.nl:35081/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17557/.s.monetdb.35081
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 40_json_hge.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_gsl.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 85_bam.sql
# loading sql script: 90_generator.sql
# loading sql script: 90_generator_hge.sql
# loading sql script: 99_system.sql

# 18:37:29 >  
# 18:37:29 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-17557" "--port=35081"
# 18:37:29 >  

#create merge table test (x double, y double);
#create table test1 (x double, y double);
#create table test2 (x double, y double);
#create table test3 (x double, y double);
#create table test4 (x double, y double);
#insert into test1 values (1.0, 1.0);
[ 1	]
#insert into test1 values (2.0, 2.0);
[ 1	]
#insert into test2 values (3.0, -1.0);
[ 1	]
#insert into test2 values (4.0, -2.0);
[ 1	]
#insert into test3 values (3.0, 1.0);
[ 1	]
#insert into test3 values (6.0, 2.0);
[ 1	]
#insert into test4 values (7.0, 1.0);
[ 1	]
#insert into test4 values (10.0, 2.0);
[ 1	]
#alter table test1 set read only;
#alter table test2 set read only;
#alter table test3 set read only;
#alter table test4 set read only;
#alter table test add table test1;
#alter table test add table test2;
#alter table test add table test3;
#alter table test add table test4;
#select x from test1 where x between 0 and -1;
% sys.test1 # table_name
% x # name
% double # type
% 24 # length
#select x from test2 where x between 0 and -1;
% sys.test2 # table_name
% x # name
% double # type
% 24 # length
#select x from test3 where x between 0 and -1;
% sys.test3 # table_name
% x # name
% double # type
% 24 # length
#select x from test4 where x between 0 and -1;
% sys.test4 # table_name
% x # name
% double # type
% 24 # length
#select y from test1 where y between 0 and -1;
% sys.test1 # table_name
% y # name
% double # type
% 24 # length
#select y from test2 where y between 0 and -1;
% sys.test2 # table_name
% y # name
% double # type
% 24 # length
#select y from test3 where y between 0 and -1;
% sys.test3 # table_name
% y # name
% double # type
% 24 # length
#select y from test4 where y between 0 and -1;
% sys.test4 # table_name
% y # name
% double # type
% 24 # length
#explain select x,y from test where x between 4.0 and 6.0;
% .explain # table_name
% mal # name
% clob # type
% 118 # length
function user.main():void;
    X_1143:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0;","default_pipe",54:int);
barrier X_1257 := language.dataflow();
    X_1184 := bat.new(nil:str);
    X_1191 := bat.append(X_1184,".test");
    X_1201 := bat.append(X_1191,".test");
    X_1186 := bat.new(nil:str);
    X_1193 := bat.append(X_1186,"x");
    X_1202 := bat.append(X_1193,"y");
    X_1187 := bat.new(nil:str);
    X_1195 := bat.append(X_1187,"double");
    X_1203 := bat.append(X_1195,"double");
    X_1188 := bat.new(nil:int);
    X_1197 := bat.append(X_1188,53:int);
    X_1204 := bat.append(X_1197,53:int);
    X_1190 := bat.new(nil:int);
    X_1199 := bat.append(X_1190,0:int);
    X_1205 := bat.append(X_1199,0:int);
    X_1147:bat[:dbl] := bat.new(nil:dbl);
    X_1146 := sql.mvc();
    X_1226:bat[:dbl] := sql.bind(X_1146,"sys","test2","x",0:int,0:int,2:int);
    C_1223:bat[:oid] := sql.tid(X_1146,"sys","test2",0:int,2:int);
    C_1231 := algebra.subselect(X_1226,C_1223,4:dbl,6:dbl,true,true,false);
    X_1233 := algebra.projection(C_1231,X_1226);
    X_1227:bat[:dbl] := sql.bind(X_1146,"sys","test2","x",0:int,1:int,2:int);
    C_1225:bat[:oid] := sql.tid(X_1146,"sys","test2",1:int,2:int);
    C_1232 := algebra.subselect(X_1227,C_1225,4:dbl,6:dbl,true,true,false);
    X_1234 := algebra.projection(C_1232,X_1227);
    X_1246 := mat.packIncrement(X_1233,2:int);
    X_1162 := mat.packIncrement(X_1246,X_1234);
    X_1163 := bat.append(X_1147,X_1162,true);
    X_1166:bat[:dbl] := sql.bind(X_1146,"sys","test3","x",0:int);
    C_1164:bat[:oid] := sql.tid(X_1146,"sys","test3");
    C_1170 := algebra.subselect(X_1166,C_1164,4:dbl,6:dbl,true,true,false);
    X_1171 := algebra.projection(C_1170,X_1166);
    X_1172 := bat.append(X_1163,X_1171,true);
    X_1173:bat[:dbl] := bat.new(nil:dbl);
    X_1228:bat[:dbl] := sql.bind(X_1146,"sys","test2","y",0:int,0:int,2:int);
    X_1235 := algebra.projection(C_1231,X_1228);
    X_1229:bat[:dbl] := sql.bind(X_1146,"sys","test2","y",0:int,1:int,2:int);
    X_1236 := algebra.projection(C_1232,X_1229);
    X_1248 := mat.packIncrement(X_1235,2:int);
    X_1177 := mat.packIncrement(X_1248,X_1236);
    X_1178 := bat.append(X_1173,X_1177,true);
    X_1179:bat[:dbl] := sql.bind(X_1146,"sys","test3","y",0:int);
    X_1181 := algebra.projection(C_1170,X_1179);
    X_1182 := bat.append(X_1178,X_1181,true);
    language.pass(X_1226);
    language.pass(X_1227);
    language.pass(X_1166);
    language.pass(C_1231);
    language.pass(C_1232);
    language.pass(C_1170);
exit X_1257;
    sql.resultSet(X_1201,X_1202,X_1203,X_1204,X_1205,X_1172,X_1182);
end user.main;
#inline               actions= 0 time=3 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=4 usec 
#coercion             actions= 0 time=5 usec 
#evaluate             actions= 6 time=48 usec 
#emptybind            actions= 0 time=24 usec 
#aliases              actions=10 time=24 usec 
#mitosis              actions= 1 time=72 usec 
#mergetable           actions= 3 time=157 usec 
#deadcode             actions= 4 time=21 usec 
#aliases              actions= 0 time=16 usec 
#constants            actions= 7 time=17 usec 
#commonTerms          actions= 0 time=18 usec 
#projectionpath       actions= 0 time=12 usec 
#deadcode             actions= 0 time=16 usec 
#reorder              actions= 1 time=79 usec 
#reduce               actions=43 time=23 usec 
#matpack              actions= 2 time=17 usec 
#dataflow             actions=27 time=63 usec 
#multiplex            actions= 0 time=5 usec 
#profiler             actions= 1 time=9 usec 
#candidates           actions= 1 time=4 usec 
#garbagecollector     actions= 1 time=44 usec 
#total                actions= 1 time=984 usec 
#explain select x,y from test where x between (7-3) and (7-1);
% .explain # table_name
% mal # name
% clob # type
% 122 # length
function user.main():void;
    X_1274:void := querylog.define("explain select x,y from test where x between (7-3) and (7-1);","default_pipe",54:int);
barrier X_1406 := language.dataflow();
    X_1328 := bat.new(nil:str);
    X_1335 := bat.append(X_1328,".test");
    X_1345 := bat.append(X_1335,".test");
    X_1330 := bat.new(nil:str);
    X_1337 := bat.append(X_1330,"x");
    X_1346 := bat.append(X_1337,"y");
    X_1331 := bat.new(nil:str);
    X_1339 := bat.append(X_1331,"double");
    X_1347 := bat.append(X_1339,"double");
    X_1332 := bat.new(nil:int);
    X_1341 := bat.append(X_1332,53:int);
    X_1348 := bat.append(X_1341,53:int);
    X_1334 := bat.new(nil:int);
    X_1343 := bat.append(X_1334,0:int);
    X_1349 := bat.append(X_1343,0:int);
    X_1278:bat[:dbl] := bat.new(nil:dbl);
    X_1277 := sql.mvc();
    X_1375:bat[:dbl] := sql.bind(X_1277,"sys","test2","x",0:int,0:int,2:int);
    C_1372:bat[:oid] := sql.tid(X_1277,"sys","test2",0:int,2:int);
    C_1380 := algebra.subselect(X_1375,C_1372,4:dbl,6:dbl,true,true,false);
    X_1382 := algebra.projection(C_1380,X_1375);
    X_1376:bat[:dbl] := sql.bind(X_1277,"sys","test2","x",0:int,1:int,2:int);
    C_1374:bat[:oid] := sql.tid(X_1277,"sys","test2",1:int,2:int);
    C_1381 := algebra.subselect(X_1376,C_1374,4:dbl,6:dbl,true,true,false);
    X_1383 := algebra.projection(C_1381,X_1376);
    X_1395 := mat.packIncrement(X_1382,2:int);
    X_1299 := mat.packIncrement(X_1395,X_1383);
    X_1300 := bat.append(X_1278,X_1299,true);
    X_1303:bat[:dbl] := sql.bind(X_1277,"sys","test3","x",0:int);
    C_1301:bat[:oid] := sql.tid(X_1277,"sys","test3");
    C_1313 := algebra.subselect(X_1303,C_1301,4:dbl,6:dbl,true,true,false);
    X_1314 := algebra.projection(C_1313,X_1303);
    X_1315 := bat.append(X_1300,X_1314,true);
    X_1316:bat[:dbl] := bat.new(nil:dbl);
    X_1377:bat[:dbl] := sql.bind(X_1277,"sys","test2","y",0:int,0:int,2:int);
    X_1384 := algebra.projection(C_1380,X_1377);
    X_1378:bat[:dbl] := sql.bind(X_1277,"sys","test2","y",0:int,1:int,2:int);
    X_1385 := algebra.projection(C_1381,X_1378);
    X_1397 := mat.packIncrement(X_1384,2:int);
    X_1321 := mat.packIncrement(X_1397,X_1385);
    X_1322 := bat.append(X_1316,X_1321,true);
    X_1323:bat[:dbl] := sql.bind(X_1277,"sys","test3","y",0:int);
    X_1325 := algebra.projection(C_1313,X_1323);
    X_1326 := bat.append(X_1322,X_1325,true);
    language.pass(X_1375);
    language.pass(X_1376);
    language.pass(X_1303);
    language.pass(C_1380);
    language.pass(C_1381);
    language.pass(C_1313);
exit X_1406;
    sql.resultSet(X_1345,X_1346,X_1347,X_1348,X_1349,X_1315,X_1326);
end user.main;
#inline               actions= 0 time=3 usec 
#remap                actions= 0 time=9 usec 
#costmodel            actions= 1 time=3 usec 
#coercion             actions= 0 time=4 usec 
#evaluate             actions=20 time=82 usec 
#emptybind            actions= 0 time=19 usec 
#aliases              actions=24 time=19 usec 
#mitosis              actions= 1 time=47 usec 
#mergetable           actions= 3 time=92 usec 
#deadcode             actions= 4 time=15 usec 
#aliases              actions= 0 time=12 usec 
#constants            actions= 9 time=14 usec 
#commonTerms          actions= 0 time=13 usec 
#projectionpath       actions= 0 time=9 usec 
#deadcode             actions= 0 time=13 usec 
#reorder              actions= 1 time=54 usec 
#reduce               actions=64 time=25 usec 
#matpack              actions= 2 time=14 usec 
#dataflow             actions=27 time=46 usec 
#multiplex            actions= 0 time=5 usec 
#profiler             actions= 1 time=7 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=37 usec 
#total                actions= 1 time=766 usec 
#explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;
% .explain # table_name
% mal # name
% clob # type
% 144 # length
function user.main():void;
    X_1424:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;","default_pipe",44:int);
barrier X_1525 := language.dataflow();
    X_1450 := bat.new(nil:str);
    X_1457 := bat.append(X_1450,"sys.test");
    X_1465 := bat.append(X_1457,"sys.test");
    X_1452 := bat.new(nil:str);
    X_1459 := bat.append(X_1452,"x");
    X_1466 := bat.append(X_1459,"y");
    X_1453 := bat.new(nil:str);
    X_1460 := bat.append(X_1453,"double");
    X_1468 := bat.append(X_1460,"double");
    X_1454 := bat.new(nil:int);
    X_1462 := bat.append(X_1454,53:int);
    X_1469 := bat.append(X_1462,53:int);
    X_1456 := bat.new(nil:int);
    X_1464 := bat.append(X_1456,0:int);
    X_1470 := bat.append(X_1464,0:int);
    X_1427 := sql.mvc();
    X_1492:bat[:dbl] := sql.bind(X_1427,"sys","test3","y",0:int,0:int,2:int);
    X_1494:bat[:dbl] := sql.bind(X_1427,"sys","test3","x",0:int,0:int,2:int);
    C_1489:bat[:oid] := sql.tid(X_1427,"sys","test3",0:int,2:int);
    C_1497 := algebra.subselect(X_1494,C_1489,4:dbl,6:dbl,true,true,false);
    C_1499 := algebra.subselect(X_1492,C_1497,0:dbl,2:dbl,true,true,false);
    X_1501 := algebra.projection(C_1499,X_1494);
    X_1493:bat[:dbl] := sql.bind(X_1427,"sys","test3","y",0:int,1:int,2:int);
    X_1495:bat[:dbl] := sql.bind(X_1427,"sys","test3","x",0:int,1:int,2:int);
    C_1491:bat[:oid] := sql.tid(X_1427,"sys","test3",1:int,2:int);
    C_1498 := algebra.subselect(X_1495,C_1491,4:dbl,6:dbl,true,true,false);
    C_1500 := algebra.subselect(X_1493,C_1498,0:dbl,2:dbl,true,true,false);
    X_1502 := algebra.projection(C_1500,X_1495);
    X_1514 := mat.packIncrement(X_1501,2:int);
    X_1447 := mat.packIncrement(X_1514,X_1502);
    X_1503 := algebra.projection(C_1499,X_1492);
    X_1504 := algebra.projection(C_1500,X_1493);
    X_1516 := mat.packIncrement(X_1503,2:int);
    X_1448 := mat.packIncrement(X_1516,X_1504);
    language.pass(X_1494);
    language.pass(X_1495);
    language.pass(C_1499);
    language.pass(X_1492);
    language.pass(C_1500);
    language.pass(X_1493);
exit X_1525;
    sql.resultSet(X_1465,X_1466,X_1468,X_1469,X_1470,X_1447,X_1448);
end user.main;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=3 usec 
#coercion             actions= 0 time=3 usec 
#evaluate             actions= 8 time=33 usec 
#emptybind            actions= 0 time=14 usec 
#aliases              actions=10 time=29 usec 
#mitosis              actions= 1 time=41 usec 
#mergetable           actions= 4 time=85 usec 
#deadcode             actions= 5 time=14 usec 
#aliases              actions= 0 time=10 usec 
#constants            actions= 9 time=12 usec 
#commonTerms          actions= 0 time=12 usec 
#projectionpath       actions= 0 time=8 usec 
#deadcode             actions= 0 time=10 usec 
#reorder              actions= 1 time=45 usec 
#reduce               actions=44 time=20 usec 
#matpack              actions= 2 time=13 usec 
#dataflow             actions=27 time=41 usec 
#multiplex            actions= 0 time=4 usec 
#profiler             actions= 1 time=6 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=32 usec 
#total                actions= 1 time=615 usec 
#explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 156 # length
function user.main():void;
    X_1546:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);","default_pipe",44:int);
barrier X_1658 := language.dataflow();
    X_1579 := bat.new(nil:str);
    X_1586 := bat.append(X_1579,"sys.test");
    X_1595 := bat.append(X_1586,"sys.test");
    X_1581 := bat.new(nil:str);
    X_1588 := bat.append(X_1581,"x");
    X_1596 := bat.append(X_1588,"y");
    X_1582 := bat.new(nil:str);
    X_1589 := bat.append(X_1582,"double");
    X_1598 := bat.append(X_1589,"double");
    X_1583 := bat.new(nil:int);
    X_1591 := bat.append(X_1583,53:int);
    X_1599 := bat.append(X_1591,53:int);
    X_1585 := bat.new(nil:int);
    X_1593 := bat.append(X_1585,0:int);
    X_1600 := bat.append(X_1593,0:int);
    X_1549 := sql.mvc();
    X_1625:bat[:dbl] := sql.bind(X_1549,"sys","test3","y",0:int,0:int,2:int);
    X_1627:bat[:dbl] := sql.bind(X_1549,"sys","test3","x",0:int,0:int,2:int);
    C_1622:bat[:oid] := sql.tid(X_1549,"sys","test3",0:int,2:int);
    C_1630 := algebra.subselect(X_1627,C_1622,4:dbl,6:dbl,true,true,false);
    C_1632 := algebra.subselect(X_1625,C_1630,0:dbl,2:dbl,true,true,false);
    X_1634 := algebra.projection(C_1632,X_1627);
    X_1626:bat[:dbl] := sql.bind(X_1549,"sys","test3","y",0:int,1:int,2:int);
    X_1628:bat[:dbl] := sql.bind(X_1549,"sys","test3","x",0:int,1:int,2:int);
    C_1624:bat[:oid] := sql.tid(X_1549,"sys","test3",1:int,2:int);
    C_1631 := algebra.subselect(X_1628,C_1624,4:dbl,6:dbl,true,true,false);
    C_1633 := algebra.subselect(X_1626,C_1631,0:dbl,2:dbl,true,true,false);
    X_1635 := algebra.projection(C_1633,X_1628);
    X_1647 := mat.packIncrement(X_1634,2:int);
    X_1576 := mat.packIncrement(X_1647,X_1635);
    X_1636 := algebra.projection(C_1632,X_1625);
    X_1637 := algebra.projection(C_1633,X_1626);
    X_1649 := mat.packIncrement(X_1636,2:int);
    X_1577 := mat.packIncrement(X_1649,X_1637);
    language.pass(X_1627);
    language.pass(X_1628);
    language.pass(C_1632);
    language.pass(X_1625);
    language.pass(C_1633);
    language.pass(X_1626);
exit X_1658;
    sql.resultSet(X_1595,X_1596,X_1598,X_1599,X_1600,X_1576,X_1577);
end user.main;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=2 usec 
#coercion             actions= 0 time=3 usec 
#evaluate             actions=16 time=60 usec 
#emptybind            actions= 0 time=16 usec 
#aliases              actions=18 time=15 usec 
#mitosis              actions= 1 time=40 usec 
#mergetable           actions= 4 time=81 usec 
#deadcode             actions= 5 time=13 usec 
#aliases              actions= 0 time=10 usec 
#constants            actions=11 time=14 usec 
#commonTerms          actions= 0 time=11 usec 
#projectionpath       actions= 0 time=7 usec 
#deadcode             actions= 0 time=10 usec 
#reorder              actions= 1 time=45 usec 
#reduce               actions=58 time=22 usec 
#matpack              actions= 2 time=13 usec 
#dataflow             actions=27 time=40 usec 
#multiplex            actions= 0 time=4 usec 
#profiler             actions= 1 time=5 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=33 usec 
#total                actions= 1 time=638 usec 
#explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 160 # length
function user.main():void;
    X_1682:void := querylog.define("explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);","default_pipe",44:int);
barrier X_1805 := language.dataflow();
    X_1721 := bat.new(nil:str);
    X_1728 := bat.append(X_1721,"sys.test");
    X_1737 := bat.append(X_1728,"sys.test");
    X_1723 := bat.new(nil:str);
    X_1730 := bat.append(X_1723,"x");
    X_1738 := bat.append(X_1730,"y");
    X_1724 := bat.new(nil:str);
    X_1731 := bat.append(X_1724,"double");
    X_1740 := bat.append(X_1731,"double");
    X_1725 := bat.new(nil:int);
    X_1733 := bat.append(X_1725,53:int);
    X_1741 := bat.append(X_1733,53:int);
    X_1727 := bat.new(nil:int);
    X_1735 := bat.append(X_1727,0:int);
    X_1742 := bat.append(X_1735,0:int);
    X_1685 := sql.mvc();
    X_1772:bat[:dbl] := sql.bind(X_1685,"sys","test3","y",0:int,0:int,2:int);
    X_1774:bat[:dbl] := sql.bind(X_1685,"sys","test3","x",0:int,0:int,2:int);
    C_1769:bat[:oid] := sql.tid(X_1685,"sys","test3",0:int,2:int);
    C_1777 := algebra.subselect(X_1774,C_1769,4:dbl,6:dbl,true,true,false);
    C_1779 := algebra.subselect(X_1772,C_1777,0:dbl,2:dbl,true,true,false);
    X_1781 := algebra.projection(C_1779,X_1774);
    X_1773:bat[:dbl] := sql.bind(X_1685,"sys","test3","y",0:int,1:int,2:int);
    X_1775:bat[:dbl] := sql.bind(X_1685,"sys","test3","x",0:int,1:int,2:int);
    C_1771:bat[:oid] := sql.tid(X_1685,"sys","test3",1:int,2:int);
    C_1778 := algebra.subselect(X_1775,C_1771,4:dbl,6:dbl,true,true,false);
    C_1780 := algebra.subselect(X_1773,C_1778,0:dbl,2:dbl,true,true,false);
    X_1782 := algebra.projection(C_1780,X_1775);
    X_1794 := mat.packIncrement(X_1781,2:int);
    X_1718 := mat.packIncrement(X_1794,X_1782);
    X_1783 := algebra.projection(C_1779,X_1772);
    X_1784 := algebra.projection(C_1780,X_1773);
    X_1796 := mat.packIncrement(X_1783,2:int);
    X_1719 := mat.packIncrement(X_1796,X_1784);
    language.pass(X_1774);
    language.pass(X_1775);
    language.pass(C_1779);
    language.pass(X_1772);
    language.pass(C_1780);
    language.pass(X_1773);
exit X_1805;
    sql.resultSet(X_1737,X_1738,X_1740,X_1741,X_1742,X_1718,X_1719);
end user.main;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=3 usec 
#coercion             actions= 0 time=3 usec 
#evaluate             actions=24 time=70 usec 
#emptybind            actions= 0 time=17 usec 
#aliases              actions=26 time=17 usec 
#mitosis              actions= 1 time=42 usec 
#mergetable           actions= 4 time=82 usec 
#deadcode             actions= 5 time=14 usec 
#aliases              actions= 0 time=11 usec 
#constants            actions=12 time=32 usec 
#commonTerms          actions= 0 time=12 usec 
#projectionpath       actions= 0 time=7 usec 
#deadcode             actions= 0 time=11 usec 
#reorder              actions= 1 time=46 usec 
#reduce               actions=72 time=26 usec 
#matpack              actions= 2 time=14 usec 
#dataflow             actions=27 time=41 usec 
#multiplex            actions= 0 time=5 usec 
#profiler             actions= 1 time=5 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=33 usec 
#total                actions= 1 time=695 usec 
#drop table test;
#drop table test1;
#drop table test2;
#drop table test3;
#drop table test4;

# 18:37:29 >  
# 18:37:29 >  "Done."
# 18:37:29 >  

