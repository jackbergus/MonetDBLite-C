stdout of test 'partition_elim` in directory 'sql/test/remote` itself:


# 18:37:29 >  
# 18:37:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35081" "--set" "mapi_usock=/var/tmp/mtest-17557/.s.monetdb.35081" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_remote" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 18:37:29 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_remote', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.333 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.nes.nl:35081/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17557/.s.monetdb.35081
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 40_json_hge.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_gsl.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 85_bam.sql
# loading sql script: 90_generator.sql
# loading sql script: 90_generator_hge.sql
# loading sql script: 99_system.sql

# 18:37:29 >  
# 18:37:29 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-17557" "--port=35081"
# 18:37:29 >  

#create merge table test (x double, y double);
#create table test1 (x double, y double);
#create table test2 (x double, y double);
#create table test3 (x double, y double);
#create table test4 (x double, y double);
#insert into test1 values (1.0, 1.0);
[ 1	]
#insert into test1 values (2.0, 2.0);
[ 1	]
#insert into test2 values (3.0, -1.0);
[ 1	]
#insert into test2 values (4.0, -2.0);
[ 1	]
#insert into test3 values (3.0, 1.0);
[ 1	]
#insert into test3 values (6.0, 2.0);
[ 1	]
#insert into test4 values (7.0, 1.0);
[ 1	]
#insert into test4 values (10.0, 2.0);
[ 1	]
#alter table test1 set read only;
#alter table test2 set read only;
#alter table test3 set read only;
#alter table test4 set read only;
#alter table test add table test1;
#alter table test add table test2;
#alter table test add table test3;
#alter table test add table test4;
#select x from test1 where x between 0 and -1;
% sys.test1 # table_name
% x # name
% double # type
% 24 # length
#select x from test2 where x between 0 and -1;
% sys.test2 # table_name
% x # name
% double # type
% 24 # length
#select x from test3 where x between 0 and -1;
% sys.test3 # table_name
% x # name
% double # type
% 24 # length
#select x from test4 where x between 0 and -1;
% sys.test4 # table_name
% x # name
% double # type
% 24 # length
#select y from test1 where y between 0 and -1;
% sys.test1 # table_name
% y # name
% double # type
% 24 # length
#select y from test2 where y between 0 and -1;
% sys.test2 # table_name
% y # name
% double # type
% 24 # length
#select y from test3 where y between 0 and -1;
% sys.test3 # table_name
% y # name
% double # type
% 24 # length
#select y from test4 where y between 0 and -1;
% sys.test4 # table_name
% y # name
% double # type
% 24 # length
#explain select x,y from test where x between 4.0 and 6.0;
% .explain # table_name
% mal # name
% clob # type
% 118 # length
function user.main():void;
    X_1143:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0;","default_pipe",18:int);
barrier X_1253 := language.dataflow();
    X_1147:bat[:dbl] := bat.new(nil:dbl);
    X_1146 := sql.mvc();
    X_1226:bat[:dbl] := sql.bind(X_1146,"sys","test2","x",0:int,0:int,2:int);
    C_1223:bat[:oid] := sql.tid(X_1146,"sys","test2",0:int,2:int);
    C_1231 := algebra.subselect(X_1226,C_1223,4:dbl,6:dbl,true,true,false);
    X_1233 := algebra.projection(C_1231,X_1226);
    X_1227:bat[:dbl] := sql.bind(X_1146,"sys","test2","x",0:int,1:int,2:int);
    C_1225:bat[:oid] := sql.tid(X_1146,"sys","test2",1:int,2:int);
    C_1232 := algebra.subselect(X_1227,C_1225,4:dbl,6:dbl,true,true,false);
    X_1234 := algebra.projection(C_1232,X_1227);
    X_1246 := mat.packIncrement(X_1233,2:int);
    X_1162 := mat.packIncrement(X_1246,X_1234);
    language.pass(X_1226);
    language.pass(X_1227);
exit X_1253;
    X_1163 := bat.append(X_1147,X_1162,true);
barrier X_1257 := language.dataflow();
    X_1166:bat[:dbl] := sql.bind(X_1146,"sys","test3","x",0:int);
    C_1164:bat[:oid] := sql.tid(X_1146,"sys","test3");
    C_1170 := algebra.subselect(X_1166,C_1164,4:dbl,6:dbl,true,true,false);
    X_1171 := algebra.projection(C_1170,X_1166);
    language.pass(X_1166);
exit X_1257;
    X_1172 := bat.append(X_1163,X_1171,true);
barrier X_1260 := language.dataflow();
    X_1173:bat[:dbl] := bat.new(nil:dbl);
    X_1228:bat[:dbl] := sql.bind(X_1146,"sys","test2","y",0:int,0:int,2:int);
    X_1235 := algebra.projection(C_1231,X_1228);
    X_1229:bat[:dbl] := sql.bind(X_1146,"sys","test2","y",0:int,1:int,2:int);
    X_1236 := algebra.projection(C_1232,X_1229);
    X_1248 := mat.packIncrement(X_1235,2:int);
    X_1177 := mat.packIncrement(X_1248,X_1236);
exit X_1260;
    X_1178 := bat.append(X_1173,X_1177,true);
    X_1179:bat[:dbl] := sql.bind(X_1146,"sys","test3","y",0:int);
    X_1181 := algebra.projection(C_1170,X_1179);
    X_1182 := bat.append(X_1178,X_1181,true);
barrier X_1263 := language.dataflow();
    X_1184 := bat.new(nil:str);
    X_1190 := bat.new(nil:int);
    X_1188 := bat.new(nil:int);
    X_1187 := bat.new(nil:str);
    X_1186 := bat.new(nil:str);
exit X_1263;
    X_1191 := bat.append(X_1184,".test");
    X_1193 := bat.append(X_1186,"x");
    X_1195 := bat.append(X_1187,"double");
    X_1197 := bat.append(X_1188,53:int);
    X_1199 := bat.append(X_1190,0:int);
    X_1201 := bat.append(X_1191,".test");
    X_1202 := bat.append(X_1193,"y");
    X_1203 := bat.append(X_1195,"double");
    X_1204 := bat.append(X_1197,53:int);
    X_1205 := bat.append(X_1199,0:int);
    sql.resultSet(X_1201,X_1202,X_1203,X_1204,X_1205,X_1172,X_1182);
end user.main;
#inline               actions= 0 time=3 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=4 usec 
#coercion             actions= 0 time=5 usec 
#evaluate             actions= 6 time=48 usec 
#emptybind            actions= 0 time=24 usec 
#aliases              actions=10 time=24 usec 
#mitosis              actions= 1 time=72 usec 
#mergetable           actions= 3 time=157 usec 
#deadcode             actions= 4 time=21 usec 
#aliases              actions= 0 time=16 usec 
#constants            actions= 7 time=17 usec 
#commonTerms          actions= 0 time=18 usec 
#projectionpath       actions= 0 time=12 usec 
#deadcode             actions= 0 time=16 usec 
#reorder              actions= 1 time=79 usec 
#reduce               actions=43 time=23 usec 
#matpack              actions= 2 time=17 usec 
#dataflow             actions=27 time=63 usec 
#multiplex            actions= 0 time=5 usec 
#profiler             actions= 1 time=9 usec 
#candidates           actions= 1 time=4 usec 
#garbagecollector     actions= 1 time=44 usec 
#total                actions= 1 time=984 usec 
#explain select x,y from test where x between (7-3) and (7-1);
% .explain # table_name
% mal # name
% clob # type
% 122 # length
function user.main():void;
    X_1280:void := querylog.define("explain select x,y from test where x between (7-3) and (7-1);","default_pipe",18:int);
barrier X_1408 := language.dataflow();
    X_1284:bat[:dbl] := bat.new(nil:dbl);
    X_1283 := sql.mvc();
    X_1381:bat[:dbl] := sql.bind(X_1283,"sys","test2","x",0:int,0:int,2:int);
    C_1378:bat[:oid] := sql.tid(X_1283,"sys","test2",0:int,2:int);
    C_1386 := algebra.subselect(X_1381,C_1378,4:dbl,6:dbl,true,true,false);
    X_1388 := algebra.projection(C_1386,X_1381);
    X_1382:bat[:dbl] := sql.bind(X_1283,"sys","test2","x",0:int,1:int,2:int);
    C_1380:bat[:oid] := sql.tid(X_1283,"sys","test2",1:int,2:int);
    C_1387 := algebra.subselect(X_1382,C_1380,4:dbl,6:dbl,true,true,false);
    X_1389 := algebra.projection(C_1387,X_1382);
    X_1401 := mat.packIncrement(X_1388,2:int);
    X_1305 := mat.packIncrement(X_1401,X_1389);
    language.pass(X_1381);
    language.pass(X_1382);
exit X_1408;
    X_1306 := bat.append(X_1284,X_1305,true);
barrier X_1412 := language.dataflow();
    X_1309:bat[:dbl] := sql.bind(X_1283,"sys","test3","x",0:int);
    C_1307:bat[:oid] := sql.tid(X_1283,"sys","test3");
    C_1319 := algebra.subselect(X_1309,C_1307,4:dbl,6:dbl,true,true,false);
    X_1320 := algebra.projection(C_1319,X_1309);
    language.pass(X_1309);
exit X_1412;
    X_1321 := bat.append(X_1306,X_1320,true);
barrier X_1415 := language.dataflow();
    X_1322:bat[:dbl] := bat.new(nil:dbl);
    X_1383:bat[:dbl] := sql.bind(X_1283,"sys","test2","y",0:int,0:int,2:int);
    X_1390 := algebra.projection(C_1386,X_1383);
    X_1384:bat[:dbl] := sql.bind(X_1283,"sys","test2","y",0:int,1:int,2:int);
    X_1391 := algebra.projection(C_1387,X_1384);
    X_1403 := mat.packIncrement(X_1390,2:int);
    X_1327 := mat.packIncrement(X_1403,X_1391);
exit X_1415;
    X_1328 := bat.append(X_1322,X_1327,true);
    X_1329:bat[:dbl] := sql.bind(X_1283,"sys","test3","y",0:int);
    X_1331 := algebra.projection(C_1319,X_1329);
    X_1332 := bat.append(X_1328,X_1331,true);
barrier X_1418 := language.dataflow();
    X_1334 := bat.new(nil:str);
    X_1340 := bat.new(nil:int);
    X_1338 := bat.new(nil:int);
    X_1337 := bat.new(nil:str);
    X_1336 := bat.new(nil:str);
exit X_1418;
    X_1341 := bat.append(X_1334,".test");
    X_1343 := bat.append(X_1336,"x");
    X_1345 := bat.append(X_1337,"double");
    X_1347 := bat.append(X_1338,53:int);
    X_1349 := bat.append(X_1340,0:int);
    X_1351 := bat.append(X_1341,".test");
    X_1352 := bat.append(X_1343,"y");
    X_1353 := bat.append(X_1345,"double");
    X_1354 := bat.append(X_1347,53:int);
    X_1355 := bat.append(X_1349,0:int);
    sql.resultSet(X_1351,X_1352,X_1353,X_1354,X_1355,X_1321,X_1332);
end user.main;
#inline               actions= 0 time=3 usec 
#remap                actions= 0 time=9 usec 
#costmodel            actions= 1 time=3 usec 
#coercion             actions= 0 time=4 usec 
#evaluate             actions=20 time=82 usec 
#emptybind            actions= 0 time=19 usec 
#aliases              actions=24 time=19 usec 
#mitosis              actions= 1 time=47 usec 
#mergetable           actions= 3 time=92 usec 
#deadcode             actions= 4 time=15 usec 
#aliases              actions= 0 time=12 usec 
#constants            actions= 9 time=14 usec 
#commonTerms          actions= 0 time=13 usec 
#projectionpath       actions= 0 time=9 usec 
#deadcode             actions= 0 time=13 usec 
#reorder              actions= 1 time=54 usec 
#reduce               actions=64 time=25 usec 
#matpack              actions= 2 time=14 usec 
#dataflow             actions=27 time=46 usec 
#multiplex            actions= 0 time=5 usec 
#profiler             actions= 1 time=7 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=37 usec 
#total                actions= 1 time=766 usec 
#explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;
% .explain # table_name
% mal # name
% clob # type
% 144 # length
function user.main():void;
    X_1436:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;","default_pipe",30:int);
barrier X_1537 := language.dataflow();
    X_1462 := bat.new(nil:str);
    X_1468 := bat.new(nil:int);
    X_1466 := bat.new(nil:int);
    X_1465 := bat.new(nil:str);
    X_1464 := bat.new(nil:str);
    X_1439 := sql.mvc();
    X_1505:bat[:dbl] := sql.bind(X_1439,"sys","test3","y",0:int,1:int,2:int);
    X_1507:bat[:dbl] := sql.bind(X_1439,"sys","test3","x",0:int,1:int,2:int);
    C_1503:bat[:oid] := sql.tid(X_1439,"sys","test3",1:int,2:int);
    C_1510 := algebra.subselect(X_1507,C_1503,4:dbl,6:dbl,true,true,false);
    C_1512 := algebra.subselect(X_1505,C_1510,0:dbl,2:dbl,true,true,false);
    X_1516 := algebra.projection(C_1512,X_1505);
    X_1504:bat[:dbl] := sql.bind(X_1439,"sys","test3","y",0:int,0:int,2:int);
    X_1506:bat[:dbl] := sql.bind(X_1439,"sys","test3","x",0:int,0:int,2:int);
    C_1501:bat[:oid] := sql.tid(X_1439,"sys","test3",0:int,2:int);
    C_1509 := algebra.subselect(X_1506,C_1501,4:dbl,6:dbl,true,true,false);
    C_1511 := algebra.subselect(X_1504,C_1509,0:dbl,2:dbl,true,true,false);
    X_1515 := algebra.projection(C_1511,X_1504);
    X_1514 := algebra.projection(C_1512,X_1507);
    X_1513 := algebra.projection(C_1511,X_1506);
    language.pass(X_1505);
    language.pass(X_1504);
    language.pass(C_1512);
    language.pass(X_1507);
    language.pass(C_1511);
    language.pass(X_1506);
exit X_1537;
    X_1469 := bat.append(X_1462,"sys.test");
    X_1471 := bat.append(X_1464,"x");
    X_1472 := bat.append(X_1465,"double");
    X_1474 := bat.append(X_1466,53:int);
    X_1476 := bat.append(X_1468,0:int);
    X_1477 := bat.append(X_1469,"sys.test");
    X_1478 := bat.append(X_1471,"y");
    X_1480 := bat.append(X_1472,"double");
    X_1481 := bat.append(X_1474,53:int);
    X_1482 := bat.append(X_1476,0:int);
barrier X_1540 := language.dataflow();
    X_1526 := mat.packIncrement(X_1513,2:int);
    X_1459 := mat.packIncrement(X_1526,X_1514);
    X_1528 := mat.packIncrement(X_1515,2:int);
    X_1460 := mat.packIncrement(X_1528,X_1516);
exit X_1540;
    sql.resultSet(X_1477,X_1478,X_1480,X_1481,X_1482,X_1459,X_1460);
end user.main;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=3 usec 
#coercion             actions= 0 time=3 usec 
#evaluate             actions= 8 time=33 usec 
#emptybind            actions= 0 time=14 usec 
#aliases              actions=10 time=29 usec 
#mitosis              actions= 1 time=41 usec 
#mergetable           actions= 4 time=85 usec 
#deadcode             actions= 5 time=14 usec 
#aliases              actions= 0 time=10 usec 
#constants            actions= 9 time=12 usec 
#commonTerms          actions= 0 time=12 usec 
#projectionpath       actions= 0 time=8 usec 
#deadcode             actions= 0 time=10 usec 
#reorder              actions= 1 time=45 usec 
#reduce               actions=44 time=20 usec 
#matpack              actions= 2 time=13 usec 
#dataflow             actions=27 time=41 usec 
#multiplex            actions= 0 time=4 usec 
#profiler             actions= 1 time=6 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=32 usec 
#total                actions= 1 time=615 usec 
#explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 156 # length
function user.main():void;
    X_1561:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);","default_pipe",30:int);
barrier X_1673 := language.dataflow();
    X_1594 := bat.new(nil:str);
    X_1600 := bat.new(nil:int);
    X_1598 := bat.new(nil:int);
    X_1597 := bat.new(nil:str);
    X_1596 := bat.new(nil:str);
    X_1564 := sql.mvc();
    X_1641:bat[:dbl] := sql.bind(X_1564,"sys","test3","y",0:int,1:int,2:int);
    X_1643:bat[:dbl] := sql.bind(X_1564,"sys","test3","x",0:int,1:int,2:int);
    C_1639:bat[:oid] := sql.tid(X_1564,"sys","test3",1:int,2:int);
    C_1646 := algebra.subselect(X_1643,C_1639,4:dbl,6:dbl,true,true,false);
    C_1648 := algebra.subselect(X_1641,C_1646,0:dbl,2:dbl,true,true,false);
    X_1652 := algebra.projection(C_1648,X_1641);
    X_1640:bat[:dbl] := sql.bind(X_1564,"sys","test3","y",0:int,0:int,2:int);
    X_1642:bat[:dbl] := sql.bind(X_1564,"sys","test3","x",0:int,0:int,2:int);
    C_1637:bat[:oid] := sql.tid(X_1564,"sys","test3",0:int,2:int);
    C_1645 := algebra.subselect(X_1642,C_1637,4:dbl,6:dbl,true,true,false);
    C_1647 := algebra.subselect(X_1640,C_1645,0:dbl,2:dbl,true,true,false);
    X_1651 := algebra.projection(C_1647,X_1640);
    X_1650 := algebra.projection(C_1648,X_1643);
    X_1649 := algebra.projection(C_1647,X_1642);
    language.pass(X_1641);
    language.pass(X_1640);
    language.pass(C_1648);
    language.pass(X_1643);
    language.pass(C_1647);
    language.pass(X_1642);
exit X_1673;
    X_1601 := bat.append(X_1594,"sys.test");
    X_1603 := bat.append(X_1596,"x");
    X_1604 := bat.append(X_1597,"double");
    X_1606 := bat.append(X_1598,53:int);
    X_1608 := bat.append(X_1600,0:int);
    X_1610 := bat.append(X_1601,"sys.test");
    X_1611 := bat.append(X_1603,"y");
    X_1613 := bat.append(X_1604,"double");
    X_1614 := bat.append(X_1606,53:int);
    X_1615 := bat.append(X_1608,0:int);
barrier X_1676 := language.dataflow();
    X_1662 := mat.packIncrement(X_1649,2:int);
    X_1591 := mat.packIncrement(X_1662,X_1650);
    X_1664 := mat.packIncrement(X_1651,2:int);
    X_1592 := mat.packIncrement(X_1664,X_1652);
exit X_1676;
    sql.resultSet(X_1610,X_1611,X_1613,X_1614,X_1615,X_1591,X_1592);
end user.main;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=2 usec 
#coercion             actions= 0 time=3 usec 
#evaluate             actions=16 time=60 usec 
#emptybind            actions= 0 time=16 usec 
#aliases              actions=18 time=15 usec 
#mitosis              actions= 1 time=40 usec 
#mergetable           actions= 4 time=81 usec 
#deadcode             actions= 5 time=13 usec 
#aliases              actions= 0 time=10 usec 
#constants            actions=11 time=14 usec 
#commonTerms          actions= 0 time=11 usec 
#projectionpath       actions= 0 time=7 usec 
#deadcode             actions= 0 time=10 usec 
#reorder              actions= 1 time=45 usec 
#reduce               actions=58 time=22 usec 
#matpack              actions= 2 time=13 usec 
#dataflow             actions=27 time=40 usec 
#multiplex            actions= 0 time=4 usec 
#profiler             actions= 1 time=5 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=33 usec 
#total                actions= 1 time=638 usec 
#explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 160 # length
function user.main():void;
    X_1700:void := querylog.define("explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);","default_pipe",30:int);
barrier X_1823 := language.dataflow();
    X_1739 := bat.new(nil:str);
    X_1745 := bat.new(nil:int);
    X_1743 := bat.new(nil:int);
    X_1742 := bat.new(nil:str);
    X_1741 := bat.new(nil:str);
    X_1703 := sql.mvc();
    X_1791:bat[:dbl] := sql.bind(X_1703,"sys","test3","y",0:int,1:int,2:int);
    X_1793:bat[:dbl] := sql.bind(X_1703,"sys","test3","x",0:int,1:int,2:int);
    C_1789:bat[:oid] := sql.tid(X_1703,"sys","test3",1:int,2:int);
    C_1796 := algebra.subselect(X_1793,C_1789,4:dbl,6:dbl,true,true,false);
    C_1798 := algebra.subselect(X_1791,C_1796,0:dbl,2:dbl,true,true,false);
    X_1802 := algebra.projection(C_1798,X_1791);
    X_1790:bat[:dbl] := sql.bind(X_1703,"sys","test3","y",0:int,0:int,2:int);
    X_1792:bat[:dbl] := sql.bind(X_1703,"sys","test3","x",0:int,0:int,2:int);
    C_1787:bat[:oid] := sql.tid(X_1703,"sys","test3",0:int,2:int);
    C_1795 := algebra.subselect(X_1792,C_1787,4:dbl,6:dbl,true,true,false);
    C_1797 := algebra.subselect(X_1790,C_1795,0:dbl,2:dbl,true,true,false);
    X_1801 := algebra.projection(C_1797,X_1790);
    X_1800 := algebra.projection(C_1798,X_1793);
    X_1799 := algebra.projection(C_1797,X_1792);
    language.pass(X_1791);
    language.pass(X_1790);
    language.pass(C_1798);
    language.pass(X_1793);
    language.pass(C_1797);
    language.pass(X_1792);
exit X_1823;
    X_1746 := bat.append(X_1739,"sys.test");
    X_1748 := bat.append(X_1741,"x");
    X_1749 := bat.append(X_1742,"double");
    X_1751 := bat.append(X_1743,53:int);
    X_1753 := bat.append(X_1745,0:int);
    X_1755 := bat.append(X_1746,"sys.test");
    X_1756 := bat.append(X_1748,"y");
    X_1758 := bat.append(X_1749,"double");
    X_1759 := bat.append(X_1751,53:int);
    X_1760 := bat.append(X_1753,0:int);
barrier X_1826 := language.dataflow();
    X_1812 := mat.packIncrement(X_1799,2:int);
    X_1736 := mat.packIncrement(X_1812,X_1800);
    X_1814 := mat.packIncrement(X_1801,2:int);
    X_1737 := mat.packIncrement(X_1814,X_1802);
exit X_1826;
    sql.resultSet(X_1755,X_1756,X_1758,X_1759,X_1760,X_1736,X_1737);
end user.main;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=3 usec 
#coercion             actions= 0 time=3 usec 
#evaluate             actions=24 time=70 usec 
#emptybind            actions= 0 time=17 usec 
#aliases              actions=26 time=17 usec 
#mitosis              actions= 1 time=42 usec 
#mergetable           actions= 4 time=82 usec 
#deadcode             actions= 5 time=14 usec 
#aliases              actions= 0 time=11 usec 
#constants            actions=12 time=32 usec 
#commonTerms          actions= 0 time=12 usec 
#projectionpath       actions= 0 time=7 usec 
#deadcode             actions= 0 time=11 usec 
#reorder              actions= 1 time=46 usec 
#reduce               actions=72 time=26 usec 
#matpack              actions= 2 time=14 usec 
#dataflow             actions=27 time=41 usec 
#multiplex            actions= 0 time=5 usec 
#profiler             actions= 1 time=5 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=33 usec 
#total                actions= 1 time=695 usec 
#drop table test;
#drop table test1;
#drop table test2;
#drop table test3;
#drop table test4;

# 18:37:29 >  
# 18:37:29 >  "Done."
# 18:37:29 >  

