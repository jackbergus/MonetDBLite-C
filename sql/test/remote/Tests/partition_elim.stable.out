stdout of test 'partition_elim` in directory 'sql/test/remote` itself:


# 18:37:29 >  
# 18:37:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35081" "--set" "mapi_usock=/var/tmp/mtest-17557/.s.monetdb.35081" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_remote" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 18:37:29 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_remote', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.333 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.nes.nl:35081/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17557/.s.monetdb.35081
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 40_json_hge.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_gsl.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 85_bam.sql
# loading sql script: 90_generator.sql
# loading sql script: 90_generator_hge.sql
# loading sql script: 99_system.sql

# 18:37:29 >  
# 18:37:29 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-17557" "--port=35081"
# 18:37:29 >  

#create merge table test (x double, y double);
#create table test1 (x double, y double);
#create table test2 (x double, y double);
#create table test3 (x double, y double);
#create table test4 (x double, y double);
#insert into test1 values (1.0, 1.0);
[ 1	]
#insert into test1 values (2.0, 2.0);
[ 1	]
#insert into test2 values (3.0, -1.0);
[ 1	]
#insert into test2 values (4.0, -2.0);
[ 1	]
#insert into test3 values (3.0, 1.0);
[ 1	]
#insert into test3 values (6.0, 2.0);
[ 1	]
#insert into test4 values (7.0, 1.0);
[ 1	]
#insert into test4 values (10.0, 2.0);
[ 1	]
#alter table test1 set read only;
#alter table test2 set read only;
#alter table test3 set read only;
#alter table test4 set read only;
#alter table test add table test1;
#alter table test add table test2;
#alter table test add table test3;
#alter table test add table test4;
#select x from test1 where x between 0 and -1;
% sys.test1 # table_name
% x # name
% double # type
% 24 # length
#select x from test2 where x between 0 and -1;
% sys.test2 # table_name
% x # name
% double # type
% 24 # length
#select x from test3 where x between 0 and -1;
% sys.test3 # table_name
% x # name
% double # type
% 24 # length
#select x from test4 where x between 0 and -1;
% sys.test4 # table_name
% x # name
% double # type
% 24 # length
#select y from test1 where y between 0 and -1;
% sys.test1 # table_name
% y # name
% double # type
% 24 # length
#select y from test2 where y between 0 and -1;
% sys.test2 # table_name
% y # name
% double # type
% 24 # length
#select y from test3 where y between 0 and -1;
% sys.test3 # table_name
% y # name
% double # type
% 24 # length
#select y from test4 where y between 0 and -1;
% sys.test4 # table_name
% y # name
% double # type
% 24 # length
#explain select x,y from test where x between 4.0 and 6.0;
% .explain # table_name
% mal # name
% clob # type
% 68 # length
function user.SQLanalyze():void;
barrier X_1213 := language.dataflow();
    X_1141 := bat.new(nil:str);
    X_1148 := bat.append(X_1141,".test");
    X_1158 := bat.append(X_1148,".test");
    X_1143 := bat.new(nil:str);
    X_1150 := bat.append(X_1143,"x");
    X_1159 := bat.append(X_1150,"y");
    X_1144 := bat.new(nil:str);
    X_1152 := bat.append(X_1144,"double");
    X_1160 := bat.append(X_1152,"double");
    X_1145 := bat.new(nil:int);
    X_1154 := bat.append(X_1145,53);
    X_1161 := bat.append(X_1154,53);
    X_1147 := bat.new(nil:int);
    X_1156 := bat.append(X_1147,0);
    X_1162 := bat.append(X_1156,0);
    X_1104:bat[:dbl] := bat.new(nil:dbl);
    X_1103 := sql.mvc();
    X_1182:bat[:dbl] := sql.bind(X_1103,"sys","test2","x",0,0,2);
    C_1179:bat[:oid] := sql.tid(X_1103,"sys","test2",0,2);
    C_1187 := algebra.subselect(X_1182,C_1179,4,6,true,true,false);
    X_1189 := algebra.projection(C_1187,X_1182);
    X_1183:bat[:dbl] := sql.bind(X_1103,"sys","test2","x",0,1,2);
    C_1181:bat[:oid] := sql.tid(X_1103,"sys","test2",1,2);
    C_1188 := algebra.subselect(X_1183,C_1181,4,6,true,true,false);
    X_1190 := algebra.projection(C_1188,X_1183);
    X_1202 := mat.packIncrement(X_1189,2);
    X_1119 := mat.packIncrement(X_1202,X_1190);
    X_1120 := bat.append(X_1104,X_1119,true);
    X_1123:bat[:dbl] := sql.bind(X_1103,"sys","test3","x",0);
    C_1121:bat[:oid] := sql.tid(X_1103,"sys","test3");
    C_1127 := algebra.subselect(X_1123,C_1121,4,6,true,true,false);
    X_1128 := algebra.projection(C_1127,X_1123);
    X_1129 := bat.append(X_1120,X_1128,true);
    X_1130:bat[:dbl] := bat.new(nil:dbl);
    X_1184:bat[:dbl] := sql.bind(X_1103,"sys","test2","y",0,0,2);
    X_1191 := algebra.projection(C_1187,X_1184);
    X_1185:bat[:dbl] := sql.bind(X_1103,"sys","test2","y",0,1,2);
    X_1192 := algebra.projection(C_1188,X_1185);
    X_1204 := mat.packIncrement(X_1191,2);
    X_1134 := mat.packIncrement(X_1204,X_1192);
    X_1135 := bat.append(X_1130,X_1134,true);
    X_1136:bat[:dbl] := sql.bind(X_1103,"sys","test3","y",0);
    X_1138 := algebra.projection(C_1127,X_1136);
    X_1139 := bat.append(X_1135,X_1138,true);
    language.pass(X_1182);
    language.pass(X_1183);
    language.pass(X_1123);
    language.pass(C_1187);
    language.pass(C_1188);
    language.pass(C_1127);
exit X_1213;
    sql.resultSet(X_1158,X_1159,X_1160,X_1161,X_1162,X_1129,X_1139);
end user.SQLanalyze;
#explain select x,y from test where x between (7-3) and (7-1);
% .explain # table_name
% mal # name
% clob # type
% 75 # length
function user.SQLanalyze():void;
barrier X_1357 := language.dataflow();
    X_1280 := bat.new(nil:str);
    X_1287 := bat.append(X_1280,".test");
    X_1297 := bat.append(X_1287,".test");
    X_1282 := bat.new(nil:str);
    X_1289 := bat.append(X_1282,"x");
    X_1298 := bat.append(X_1289,"y");
    X_1283 := bat.new(nil:str);
    X_1291 := bat.append(X_1283,"double");
    X_1299 := bat.append(X_1291,"double");
    X_1284 := bat.new(nil:int);
    X_1293 := bat.append(X_1284,53);
    X_1300 := bat.append(X_1293,53);
    X_1286 := bat.new(nil:int);
    X_1295 := bat.append(X_1286,0);
    X_1301 := bat.append(X_1295,0);
    X_1230:bat[:dbl] := bat.new(nil:dbl);
    X_1229 := sql.mvc();
    X_1326:bat[:dbl] := sql.bind(X_1229,"sys","test2","x",0,0,2);
    C_1323:bat[:oid] := sql.tid(X_1229,"sys","test2",0,2);
    C_1331 := algebra.subselect(X_1326,C_1323,4:dbl,6:dbl,true,true,false);
    X_1333 := algebra.projection(C_1331,X_1326);
    X_1327:bat[:dbl] := sql.bind(X_1229,"sys","test2","x",0,1,2);
    C_1325:bat[:oid] := sql.tid(X_1229,"sys","test2",1,2);
    C_1332 := algebra.subselect(X_1327,C_1325,4:dbl,6:dbl,true,true,false);
    X_1334 := algebra.projection(C_1332,X_1327);
    X_1346 := mat.packIncrement(X_1333,2);
    X_1251 := mat.packIncrement(X_1346,X_1334);
    X_1252 := bat.append(X_1230,X_1251,true);
    X_1255:bat[:dbl] := sql.bind(X_1229,"sys","test3","x",0);
    C_1253:bat[:oid] := sql.tid(X_1229,"sys","test3");
    C_1265 := algebra.subselect(X_1255,C_1253,4:dbl,6:dbl,true,true,false);
    X_1266 := algebra.projection(C_1265,X_1255);
    X_1267 := bat.append(X_1252,X_1266,true);
    X_1268:bat[:dbl] := bat.new(nil:dbl);
    X_1328:bat[:dbl] := sql.bind(X_1229,"sys","test2","y",0,0,2);
    X_1335 := algebra.projection(C_1331,X_1328);
    X_1329:bat[:dbl] := sql.bind(X_1229,"sys","test2","y",0,1,2);
    X_1336 := algebra.projection(C_1332,X_1329);
    X_1348 := mat.packIncrement(X_1335,2);
    X_1273 := mat.packIncrement(X_1348,X_1336);
    X_1274 := bat.append(X_1268,X_1273,true);
    X_1275:bat[:dbl] := sql.bind(X_1229,"sys","test3","y",0);
    X_1277 := algebra.projection(C_1265,X_1275);
    X_1278 := bat.append(X_1274,X_1277,true);
    language.pass(X_1326);
    language.pass(X_1327);
    language.pass(X_1255);
    language.pass(C_1331);
    language.pass(C_1332);
    language.pass(C_1265);
exit X_1357;
    sql.resultSet(X_1297,X_1298,X_1299,X_1300,X_1301,X_1267,X_1278);
end user.SQLanalyze;
#explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;
% .explain # table_name
% mal # name
% clob # type
% 68 # length
function user.SQLanalyze():void;
barrier X_1471 := language.dataflow();
    X_1397 := bat.new(nil:str);
    X_1404 := bat.append(X_1397,"sys.test");
    X_1412 := bat.append(X_1404,"sys.test");
    X_1399 := bat.new(nil:str);
    X_1406 := bat.append(X_1399,"x");
    X_1413 := bat.append(X_1406,"y");
    X_1400 := bat.new(nil:str);
    X_1407 := bat.append(X_1400,"double");
    X_1415 := bat.append(X_1407,"double");
    X_1401 := bat.new(nil:int);
    X_1409 := bat.append(X_1401,53);
    X_1416 := bat.append(X_1409,53);
    X_1403 := bat.new(nil:int);
    X_1411 := bat.append(X_1403,0);
    X_1417 := bat.append(X_1411,0);
    X_1374 := sql.mvc();
    X_1438:bat[:dbl] := sql.bind(X_1374,"sys","test3","y",0,0,2);
    X_1440:bat[:dbl] := sql.bind(X_1374,"sys","test3","x",0,0,2);
    C_1435:bat[:oid] := sql.tid(X_1374,"sys","test3",0,2);
    C_1443 := algebra.subselect(X_1440,C_1435,4,6,true,true,false);
    C_1445 := algebra.subselect(X_1438,C_1443,0,2,true,true,false);
    X_1447 := algebra.projection(C_1445,X_1440);
    X_1439:bat[:dbl] := sql.bind(X_1374,"sys","test3","y",0,1,2);
    X_1441:bat[:dbl] := sql.bind(X_1374,"sys","test3","x",0,1,2);
    C_1437:bat[:oid] := sql.tid(X_1374,"sys","test3",1,2);
    C_1444 := algebra.subselect(X_1441,C_1437,4,6,true,true,false);
    C_1446 := algebra.subselect(X_1439,C_1444,0,2,true,true,false);
    X_1448 := algebra.projection(C_1446,X_1441);
    X_1460 := mat.packIncrement(X_1447,2);
    X_1394 := mat.packIncrement(X_1460,X_1448);
    X_1449 := algebra.projection(C_1445,X_1438);
    X_1450 := algebra.projection(C_1446,X_1439);
    X_1462 := mat.packIncrement(X_1449,2);
    X_1395 := mat.packIncrement(X_1462,X_1450);
    language.pass(X_1440);
    language.pass(X_1441);
    language.pass(C_1445);
    language.pass(X_1438);
    language.pass(C_1446);
    language.pass(X_1439);
exit X_1471;
    sql.resultSet(X_1412,X_1413,X_1415,X_1416,X_1417,X_1394,X_1395);
end user.SQLanalyze;
#explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 75 # length
function user.SQLanalyze():void;
barrier X_1599 := language.dataflow();
    X_1521 := bat.new(nil:str);
    X_1528 := bat.append(X_1521,"sys.test");
    X_1537 := bat.append(X_1528,"sys.test");
    X_1523 := bat.new(nil:str);
    X_1530 := bat.append(X_1523,"x");
    X_1538 := bat.append(X_1530,"y");
    X_1524 := bat.new(nil:str);
    X_1531 := bat.append(X_1524,"double");
    X_1540 := bat.append(X_1531,"double");
    X_1525 := bat.new(nil:int);
    X_1533 := bat.append(X_1525,53);
    X_1541 := bat.append(X_1533,53);
    X_1527 := bat.new(nil:int);
    X_1535 := bat.append(X_1527,0);
    X_1542 := bat.append(X_1535,0);
    X_1491 := sql.mvc();
    X_1566:bat[:dbl] := sql.bind(X_1491,"sys","test3","y",0,0,2);
    X_1568:bat[:dbl] := sql.bind(X_1491,"sys","test3","x",0,0,2);
    C_1563:bat[:oid] := sql.tid(X_1491,"sys","test3",0,2);
    C_1571 := algebra.subselect(X_1568,C_1563,4,6,true,true,false);
    C_1573 := algebra.subselect(X_1566,C_1571,0:dbl,2:dbl,true,true,false);
    X_1575 := algebra.projection(C_1573,X_1568);
    X_1567:bat[:dbl] := sql.bind(X_1491,"sys","test3","y",0,1,2);
    X_1569:bat[:dbl] := sql.bind(X_1491,"sys","test3","x",0,1,2);
    C_1565:bat[:oid] := sql.tid(X_1491,"sys","test3",1,2);
    C_1572 := algebra.subselect(X_1569,C_1565,4,6,true,true,false);
    C_1574 := algebra.subselect(X_1567,C_1572,0:dbl,2:dbl,true,true,false);
    X_1576 := algebra.projection(C_1574,X_1569);
    X_1588 := mat.packIncrement(X_1575,2);
    X_1518 := mat.packIncrement(X_1588,X_1576);
    X_1577 := algebra.projection(C_1573,X_1566);
    X_1578 := algebra.projection(C_1574,X_1567);
    X_1590 := mat.packIncrement(X_1577,2);
    X_1519 := mat.packIncrement(X_1590,X_1578);
    language.pass(X_1568);
    language.pass(X_1569);
    language.pass(C_1573);
    language.pass(X_1566);
    language.pass(C_1574);
    language.pass(X_1567);
exit X_1599;
    sql.resultSet(X_1537,X_1538,X_1540,X_1541,X_1542,X_1518,X_1519);
end user.SQLanalyze;
#explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 75 # length
function user.SQLanalyze():void;
barrier X_1741 := language.dataflow();
    X_1658 := bat.new(nil:str);
    X_1665 := bat.append(X_1658,"sys.test");
    X_1674 := bat.append(X_1665,"sys.test");
    X_1660 := bat.new(nil:str);
    X_1667 := bat.append(X_1660,"x");
    X_1675 := bat.append(X_1667,"y");
    X_1661 := bat.new(nil:str);
    X_1668 := bat.append(X_1661,"double");
    X_1677 := bat.append(X_1668,"double");
    X_1662 := bat.new(nil:int);
    X_1670 := bat.append(X_1662,53);
    X_1678 := bat.append(X_1670,53);
    X_1664 := bat.new(nil:int);
    X_1672 := bat.append(X_1664,0);
    X_1679 := bat.append(X_1672,0);
    X_1622 := sql.mvc();
    X_1708:bat[:dbl] := sql.bind(X_1622,"sys","test3","y",0,0,2);
    X_1710:bat[:dbl] := sql.bind(X_1622,"sys","test3","x",0,0,2);
    C_1705:bat[:oid] := sql.tid(X_1622,"sys","test3",0,2);
    C_1713 := algebra.subselect(X_1710,C_1705,4:dbl,6:dbl,true,true,false);
    C_1715 := algebra.subselect(X_1708,C_1713,0:dbl,2:dbl,true,true,false);
    X_1717 := algebra.projection(C_1715,X_1710);
    X_1709:bat[:dbl] := sql.bind(X_1622,"sys","test3","y",0,1,2);
    X_1711:bat[:dbl] := sql.bind(X_1622,"sys","test3","x",0,1,2);
    C_1707:bat[:oid] := sql.tid(X_1622,"sys","test3",1,2);
    C_1714 := algebra.subselect(X_1711,C_1707,4:dbl,6:dbl,true,true,false);
    C_1716 := algebra.subselect(X_1709,C_1714,0:dbl,2:dbl,true,true,false);
    X_1718 := algebra.projection(C_1716,X_1711);
    X_1730 := mat.packIncrement(X_1717,2);
    X_1655 := mat.packIncrement(X_1730,X_1718);
    X_1719 := algebra.projection(C_1715,X_1708);
    X_1720 := algebra.projection(C_1716,X_1709);
    X_1732 := mat.packIncrement(X_1719,2);
    X_1656 := mat.packIncrement(X_1732,X_1720);
    language.pass(X_1710);
    language.pass(X_1711);
    language.pass(C_1715);
    language.pass(X_1708);
    language.pass(C_1716);
    language.pass(X_1709);
exit X_1741;
    sql.resultSet(X_1674,X_1675,X_1677,X_1678,X_1679,X_1655,X_1656);
end user.SQLanalyze;
#drop table test;
#drop table test1;
#drop table test2;
#drop table test3;
#drop table test4;

# 18:37:29 >  
# 18:37:29 >  "Done."
# 18:37:29 >  

