stdout of test 'partition_elim` in directory 'sql/test/remote` itself:


# 18:37:29 >  
# 18:37:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35081" "--set" "mapi_usock=/var/tmp/mtest-17557/.s.monetdb.35081" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_remote" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 18:37:29 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_remote', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.333 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.nes.nl:35081/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17557/.s.monetdb.35081
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 40_json_hge.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_gsl.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 85_bam.sql
# loading sql script: 90_generator.sql
# loading sql script: 90_generator_hge.sql
# loading sql script: 99_system.sql

# 18:37:29 >  
# 18:37:29 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-17557" "--port=35081"
# 18:37:29 >  

#create merge table test (x double, y double);
#create table test1 (x double, y double);
#create table test2 (x double, y double);
#create table test3 (x double, y double);
#create table test4 (x double, y double);
#insert into test1 values (1.0, 1.0);
[ 1	]
#insert into test1 values (2.0, 2.0);
[ 1	]
#insert into test2 values (3.0, -1.0);
[ 1	]
#insert into test2 values (4.0, -2.0);
[ 1	]
#insert into test3 values (3.0, 1.0);
[ 1	]
#insert into test3 values (6.0, 2.0);
[ 1	]
#insert into test4 values (7.0, 1.0);
[ 1	]
#insert into test4 values (10.0, 2.0);
[ 1	]
#alter table test1 set read only;
#alter table test2 set read only;
#alter table test3 set read only;
#alter table test4 set read only;
#alter table test add table test1;
#alter table test add table test2;
#alter table test add table test3;
#alter table test add table test4;
#select x from test1 where x between 0 and -1;
% sys.test1 # table_name
% x # name
% double # type
% 24 # length
#select x from test2 where x between 0 and -1;
% sys.test2 # table_name
% x # name
% double # type
% 24 # length
#select x from test3 where x between 0 and -1;
% sys.test3 # table_name
% x # name
% double # type
% 24 # length
#select x from test4 where x between 0 and -1;
% sys.test4 # table_name
% x # name
% double # type
% 24 # length
#select y from test1 where y between 0 and -1;
% sys.test1 # table_name
% y # name
% double # type
% 24 # length
#select y from test2 where y between 0 and -1;
% sys.test2 # table_name
% y # name
% double # type
% 24 # length
#select y from test3 where y between 0 and -1;
% sys.test3 # table_name
% y # name
% double # type
% 24 # length
#select y from test4 where y between 0 and -1;
% sys.test4 # table_name
% y # name
% double # type
% 24 # length
#explain select x,y from test where x between 4.0 and 6.0;
% .explain # table_name
% mal # name
% clob # type
% 114 # length
function user.main():void;
    X_1143:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0;","default_pipe",54);
barrier X_1256 := language.dataflow();
    X_1184 := bat.new(nil:str);
    X_1191 := bat.append(X_1184,".test");
    X_1201 := bat.append(X_1191,".test");
    X_1186 := bat.new(nil:str);
    X_1193 := bat.append(X_1186,"x");
    X_1202 := bat.append(X_1193,"y");
    X_1187 := bat.new(nil:str);
    X_1195 := bat.append(X_1187,"double");
    X_1203 := bat.append(X_1195,"double");
    X_1188 := bat.new(nil:int);
    X_1197 := bat.append(X_1188,53);
    X_1204 := bat.append(X_1197,53);
    X_1190 := bat.new(nil:int);
    X_1199 := bat.append(X_1190,0);
    X_1205 := bat.append(X_1199,0);
    X_1147:bat[:dbl] := bat.new(nil:dbl);
    X_1146 := sql.mvc();
    X_1225:bat[:dbl] := sql.bind(X_1146,"sys","test2","x",0,0,2);
    C_1222:bat[:oid] := sql.tid(X_1146,"sys","test2",0,2);
    C_1230 := algebra.subselect(X_1225,C_1222,4,6,true,true,false);
    X_1232 := algebra.projection(C_1230,X_1225);
    X_1226:bat[:dbl] := sql.bind(X_1146,"sys","test2","x",0,1,2);
    C_1224:bat[:oid] := sql.tid(X_1146,"sys","test2",1,2);
    C_1231 := algebra.subselect(X_1226,C_1224,4,6,true,true,false);
    X_1233 := algebra.projection(C_1231,X_1226);
    X_1245 := mat.packIncrement(X_1232,2);
    X_1162 := mat.packIncrement(X_1245,X_1233);
    X_1163 := bat.append(X_1147,X_1162,true);
    X_1166:bat[:dbl] := sql.bind(X_1146,"sys","test3","x",0);
    C_1164:bat[:oid] := sql.tid(X_1146,"sys","test3");
    C_1170 := algebra.subselect(X_1166,C_1164,4,6,true,true,false);
    X_1171 := algebra.projection(C_1170,X_1166);
    X_1172 := bat.append(X_1163,X_1171,true);
    X_1173:bat[:dbl] := bat.new(nil:dbl);
    X_1227:bat[:dbl] := sql.bind(X_1146,"sys","test2","y",0,0,2);
    X_1234 := algebra.projection(C_1230,X_1227);
    X_1228:bat[:dbl] := sql.bind(X_1146,"sys","test2","y",0,1,2);
    X_1235 := algebra.projection(C_1231,X_1228);
    X_1247 := mat.packIncrement(X_1234,2);
    X_1177 := mat.packIncrement(X_1247,X_1235);
    X_1178 := bat.append(X_1173,X_1177,true);
    X_1179:bat[:dbl] := sql.bind(X_1146,"sys","test3","y",0);
    X_1181 := algebra.projection(C_1170,X_1179);
    X_1182 := bat.append(X_1178,X_1181,true);
    language.pass(X_1225);
    language.pass(X_1226);
    language.pass(X_1166);
    language.pass(C_1230);
    language.pass(C_1231);
    language.pass(C_1170);
exit X_1256;
    sql.resultSet(X_1201,X_1202,X_1203,X_1204,X_1205,X_1172,X_1182);
end user.main;
#inline               actions= 0 time=3 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=4 usec 
#coercion             actions= 0 time=5 usec 
#evaluate             actions= 6 time=48 usec 
#emptybind            actions= 0 time=24 usec 
#aliases              actions=10 time=24 usec 
#mitosis              actions= 1 time=72 usec 
#mergetable           actions= 3 time=157 usec 
#deadcode             actions= 4 time=21 usec 
#aliases              actions= 0 time=16 usec 
#constants            actions= 7 time=17 usec 
#commonTerms          actions= 0 time=18 usec 
#projectionpath       actions= 0 time=12 usec 
#deadcode             actions= 0 time=16 usec 
#reorder              actions= 1 time=79 usec 
#reduce               actions=43 time=23 usec 
#matpack              actions= 2 time=17 usec 
#dataflow             actions=27 time=63 usec 
#multiplex            actions= 0 time=5 usec 
#profiler             actions= 1 time=9 usec 
#candidates           actions= 1 time=4 usec 
#garbagecollector     actions= 1 time=44 usec 
#total                actions= 1 time=984 usec 
#explain select x,y from test where x between (7-3) and (7-1);
% .explain # table_name
% mal # name
% clob # type
% 118 # length
function user.main():void;
    X_1273:void := querylog.define("explain select x,y from test where x between (7-3) and (7-1);","default_pipe",54);
barrier X_1404 := language.dataflow();
    X_1327 := bat.new(nil:str);
    X_1334 := bat.append(X_1327,".test");
    X_1344 := bat.append(X_1334,".test");
    X_1329 := bat.new(nil:str);
    X_1336 := bat.append(X_1329,"x");
    X_1345 := bat.append(X_1336,"y");
    X_1330 := bat.new(nil:str);
    X_1338 := bat.append(X_1330,"double");
    X_1346 := bat.append(X_1338,"double");
    X_1331 := bat.new(nil:int);
    X_1340 := bat.append(X_1331,53);
    X_1347 := bat.append(X_1340,53);
    X_1333 := bat.new(nil:int);
    X_1342 := bat.append(X_1333,0);
    X_1348 := bat.append(X_1342,0);
    X_1277:bat[:dbl] := bat.new(nil:dbl);
    X_1276 := sql.mvc();
    X_1373:bat[:dbl] := sql.bind(X_1276,"sys","test2","x",0,0,2);
    C_1370:bat[:oid] := sql.tid(X_1276,"sys","test2",0,2);
    C_1378 := algebra.subselect(X_1373,C_1370,4:dbl,6:dbl,true,true,false);
    X_1380 := algebra.projection(C_1378,X_1373);
    X_1374:bat[:dbl] := sql.bind(X_1276,"sys","test2","x",0,1,2);
    C_1372:bat[:oid] := sql.tid(X_1276,"sys","test2",1,2);
    C_1379 := algebra.subselect(X_1374,C_1372,4:dbl,6:dbl,true,true,false);
    X_1381 := algebra.projection(C_1379,X_1374);
    X_1393 := mat.packIncrement(X_1380,2);
    X_1298 := mat.packIncrement(X_1393,X_1381);
    X_1299 := bat.append(X_1277,X_1298,true);
    X_1302:bat[:dbl] := sql.bind(X_1276,"sys","test3","x",0);
    C_1300:bat[:oid] := sql.tid(X_1276,"sys","test3");
    C_1312 := algebra.subselect(X_1302,C_1300,4:dbl,6:dbl,true,true,false);
    X_1313 := algebra.projection(C_1312,X_1302);
    X_1314 := bat.append(X_1299,X_1313,true);
    X_1315:bat[:dbl] := bat.new(nil:dbl);
    X_1375:bat[:dbl] := sql.bind(X_1276,"sys","test2","y",0,0,2);
    X_1382 := algebra.projection(C_1378,X_1375);
    X_1376:bat[:dbl] := sql.bind(X_1276,"sys","test2","y",0,1,2);
    X_1383 := algebra.projection(C_1379,X_1376);
    X_1395 := mat.packIncrement(X_1382,2);
    X_1320 := mat.packIncrement(X_1395,X_1383);
    X_1321 := bat.append(X_1315,X_1320,true);
    X_1322:bat[:dbl] := sql.bind(X_1276,"sys","test3","y",0);
    X_1324 := algebra.projection(C_1312,X_1322);
    X_1325 := bat.append(X_1321,X_1324,true);
    language.pass(X_1373);
    language.pass(X_1374);
    language.pass(X_1302);
    language.pass(C_1378);
    language.pass(C_1379);
    language.pass(C_1312);
exit X_1404;
    sql.resultSet(X_1344,X_1345,X_1346,X_1347,X_1348,X_1314,X_1325);
end user.main;
#inline               actions= 0 time=3 usec 
#remap                actions= 0 time=9 usec 
#costmodel            actions= 1 time=3 usec 
#coercion             actions= 0 time=4 usec 
#evaluate             actions=20 time=82 usec 
#emptybind            actions= 0 time=19 usec 
#aliases              actions=24 time=19 usec 
#mitosis              actions= 1 time=47 usec 
#mergetable           actions= 3 time=92 usec 
#deadcode             actions= 4 time=15 usec 
#aliases              actions= 0 time=12 usec 
#constants            actions= 9 time=14 usec 
#commonTerms          actions= 0 time=13 usec 
#projectionpath       actions= 0 time=9 usec 
#deadcode             actions= 0 time=13 usec 
#reorder              actions= 1 time=54 usec 
#reduce               actions=64 time=25 usec 
#matpack              actions= 2 time=14 usec 
#dataflow             actions=27 time=46 usec 
#multiplex            actions= 0 time=5 usec 
#profiler             actions= 1 time=7 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=37 usec 
#total                actions= 1 time=766 usec 
#explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;
% .explain # table_name
% mal # name
% clob # type
% 140 # length
function user.main():void;
    X_1422:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;","default_pipe",44);
barrier X_1522 := language.dataflow();
    X_1448 := bat.new(nil:str);
    X_1455 := bat.append(X_1448,"sys.test");
    X_1463 := bat.append(X_1455,"sys.test");
    X_1450 := bat.new(nil:str);
    X_1457 := bat.append(X_1450,"x");
    X_1464 := bat.append(X_1457,"y");
    X_1451 := bat.new(nil:str);
    X_1458 := bat.append(X_1451,"double");
    X_1466 := bat.append(X_1458,"double");
    X_1452 := bat.new(nil:int);
    X_1460 := bat.append(X_1452,53);
    X_1467 := bat.append(X_1460,53);
    X_1454 := bat.new(nil:int);
    X_1462 := bat.append(X_1454,0);
    X_1468 := bat.append(X_1462,0);
    X_1425 := sql.mvc();
    X_1489:bat[:dbl] := sql.bind(X_1425,"sys","test3","y",0,0,2);
    X_1491:bat[:dbl] := sql.bind(X_1425,"sys","test3","x",0,0,2);
    C_1486:bat[:oid] := sql.tid(X_1425,"sys","test3",0,2);
    C_1494 := algebra.subselect(X_1491,C_1486,4,6,true,true,false);
    C_1496 := algebra.subselect(X_1489,C_1494,0,2,true,true,false);
    X_1498 := algebra.projection(C_1496,X_1491);
    X_1490:bat[:dbl] := sql.bind(X_1425,"sys","test3","y",0,1,2);
    X_1492:bat[:dbl] := sql.bind(X_1425,"sys","test3","x",0,1,2);
    C_1488:bat[:oid] := sql.tid(X_1425,"sys","test3",1,2);
    C_1495 := algebra.subselect(X_1492,C_1488,4,6,true,true,false);
    C_1497 := algebra.subselect(X_1490,C_1495,0,2,true,true,false);
    X_1499 := algebra.projection(C_1497,X_1492);
    X_1511 := mat.packIncrement(X_1498,2);
    X_1445 := mat.packIncrement(X_1511,X_1499);
    X_1500 := algebra.projection(C_1496,X_1489);
    X_1501 := algebra.projection(C_1497,X_1490);
    X_1513 := mat.packIncrement(X_1500,2);
    X_1446 := mat.packIncrement(X_1513,X_1501);
    language.pass(X_1491);
    language.pass(X_1492);
    language.pass(C_1496);
    language.pass(X_1489);
    language.pass(C_1497);
    language.pass(X_1490);
exit X_1522;
    sql.resultSet(X_1463,X_1464,X_1466,X_1467,X_1468,X_1445,X_1446);
end user.main;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=3 usec 
#coercion             actions= 0 time=3 usec 
#evaluate             actions= 8 time=33 usec 
#emptybind            actions= 0 time=14 usec 
#aliases              actions=10 time=29 usec 
#mitosis              actions= 1 time=41 usec 
#mergetable           actions= 4 time=85 usec 
#deadcode             actions= 5 time=14 usec 
#aliases              actions= 0 time=10 usec 
#constants            actions= 9 time=12 usec 
#commonTerms          actions= 0 time=12 usec 
#projectionpath       actions= 0 time=8 usec 
#deadcode             actions= 0 time=10 usec 
#reorder              actions= 1 time=45 usec 
#reduce               actions=44 time=20 usec 
#matpack              actions= 2 time=13 usec 
#dataflow             actions=27 time=41 usec 
#multiplex            actions= 0 time=4 usec 
#profiler             actions= 1 time=6 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=32 usec 
#total                actions= 1 time=615 usec 
#explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 152 # length
function user.main():void;
    X_1543:void := querylog.define("explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);","default_pipe",44);
barrier X_1654 := language.dataflow();
    X_1576 := bat.new(nil:str);
    X_1583 := bat.append(X_1576,"sys.test");
    X_1592 := bat.append(X_1583,"sys.test");
    X_1578 := bat.new(nil:str);
    X_1585 := bat.append(X_1578,"x");
    X_1593 := bat.append(X_1585,"y");
    X_1579 := bat.new(nil:str);
    X_1586 := bat.append(X_1579,"double");
    X_1595 := bat.append(X_1586,"double");
    X_1580 := bat.new(nil:int);
    X_1588 := bat.append(X_1580,53);
    X_1596 := bat.append(X_1588,53);
    X_1582 := bat.new(nil:int);
    X_1590 := bat.append(X_1582,0);
    X_1597 := bat.append(X_1590,0);
    X_1546 := sql.mvc();
    X_1621:bat[:dbl] := sql.bind(X_1546,"sys","test3","y",0,0,2);
    X_1623:bat[:dbl] := sql.bind(X_1546,"sys","test3","x",0,0,2);
    C_1618:bat[:oid] := sql.tid(X_1546,"sys","test3",0,2);
    C_1626 := algebra.subselect(X_1623,C_1618,4,6,true,true,false);
    C_1628 := algebra.subselect(X_1621,C_1626,0:dbl,2:dbl,true,true,false);
    X_1630 := algebra.projection(C_1628,X_1623);
    X_1622:bat[:dbl] := sql.bind(X_1546,"sys","test3","y",0,1,2);
    X_1624:bat[:dbl] := sql.bind(X_1546,"sys","test3","x",0,1,2);
    C_1620:bat[:oid] := sql.tid(X_1546,"sys","test3",1,2);
    C_1627 := algebra.subselect(X_1624,C_1620,4,6,true,true,false);
    C_1629 := algebra.subselect(X_1622,C_1627,0:dbl,2:dbl,true,true,false);
    X_1631 := algebra.projection(C_1629,X_1624);
    X_1643 := mat.packIncrement(X_1630,2);
    X_1573 := mat.packIncrement(X_1643,X_1631);
    X_1632 := algebra.projection(C_1628,X_1621);
    X_1633 := algebra.projection(C_1629,X_1622);
    X_1645 := mat.packIncrement(X_1632,2);
    X_1574 := mat.packIncrement(X_1645,X_1633);
    language.pass(X_1623);
    language.pass(X_1624);
    language.pass(C_1628);
    language.pass(X_1621);
    language.pass(C_1629);
    language.pass(X_1622);
exit X_1654;
    sql.resultSet(X_1592,X_1593,X_1595,X_1596,X_1597,X_1573,X_1574);
end user.main;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=2 usec 
#coercion             actions= 0 time=3 usec 
#evaluate             actions=16 time=60 usec 
#emptybind            actions= 0 time=16 usec 
#aliases              actions=18 time=15 usec 
#mitosis              actions= 1 time=40 usec 
#mergetable           actions= 4 time=81 usec 
#deadcode             actions= 5 time=13 usec 
#aliases              actions= 0 time=10 usec 
#constants            actions=11 time=14 usec 
#commonTerms          actions= 0 time=11 usec 
#projectionpath       actions= 0 time=7 usec 
#deadcode             actions= 0 time=10 usec 
#reorder              actions= 1 time=45 usec 
#reduce               actions=58 time=22 usec 
#matpack              actions= 2 time=13 usec 
#dataflow             actions=27 time=40 usec 
#multiplex            actions= 0 time=4 usec 
#profiler             actions= 1 time=5 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=33 usec 
#total                actions= 1 time=638 usec 
#explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 156 # length
function user.main():void;
    X_1678:void := querylog.define("explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);","default_pipe",44);
barrier X_1800 := language.dataflow();
    X_1717 := bat.new(nil:str);
    X_1724 := bat.append(X_1717,"sys.test");
    X_1733 := bat.append(X_1724,"sys.test");
    X_1719 := bat.new(nil:str);
    X_1726 := bat.append(X_1719,"x");
    X_1734 := bat.append(X_1726,"y");
    X_1720 := bat.new(nil:str);
    X_1727 := bat.append(X_1720,"double");
    X_1736 := bat.append(X_1727,"double");
    X_1721 := bat.new(nil:int);
    X_1729 := bat.append(X_1721,53);
    X_1737 := bat.append(X_1729,53);
    X_1723 := bat.new(nil:int);
    X_1731 := bat.append(X_1723,0);
    X_1738 := bat.append(X_1731,0);
    X_1681 := sql.mvc();
    X_1767:bat[:dbl] := sql.bind(X_1681,"sys","test3","y",0,0,2);
    X_1769:bat[:dbl] := sql.bind(X_1681,"sys","test3","x",0,0,2);
    C_1764:bat[:oid] := sql.tid(X_1681,"sys","test3",0,2);
    C_1772 := algebra.subselect(X_1769,C_1764,4:dbl,6:dbl,true,true,false);
    C_1774 := algebra.subselect(X_1767,C_1772,0:dbl,2:dbl,true,true,false);
    X_1776 := algebra.projection(C_1774,X_1769);
    X_1768:bat[:dbl] := sql.bind(X_1681,"sys","test3","y",0,1,2);
    X_1770:bat[:dbl] := sql.bind(X_1681,"sys","test3","x",0,1,2);
    C_1766:bat[:oid] := sql.tid(X_1681,"sys","test3",1,2);
    C_1773 := algebra.subselect(X_1770,C_1766,4:dbl,6:dbl,true,true,false);
    C_1775 := algebra.subselect(X_1768,C_1773,0:dbl,2:dbl,true,true,false);
    X_1777 := algebra.projection(C_1775,X_1770);
    X_1789 := mat.packIncrement(X_1776,2);
    X_1714 := mat.packIncrement(X_1789,X_1777);
    X_1778 := algebra.projection(C_1774,X_1767);
    X_1779 := algebra.projection(C_1775,X_1768);
    X_1791 := mat.packIncrement(X_1778,2);
    X_1715 := mat.packIncrement(X_1791,X_1779);
    language.pass(X_1769);
    language.pass(X_1770);
    language.pass(C_1774);
    language.pass(X_1767);
    language.pass(C_1775);
    language.pass(X_1768);
exit X_1800;
    sql.resultSet(X_1733,X_1734,X_1736,X_1737,X_1738,X_1714,X_1715);
end user.main;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=3 usec 
#coercion             actions= 0 time=3 usec 
#evaluate             actions=24 time=70 usec 
#emptybind            actions= 0 time=17 usec 
#aliases              actions=26 time=17 usec 
#mitosis              actions= 1 time=42 usec 
#mergetable           actions= 4 time=82 usec 
#deadcode             actions= 5 time=14 usec 
#aliases              actions= 0 time=11 usec 
#constants            actions=12 time=32 usec 
#commonTerms          actions= 0 time=12 usec 
#projectionpath       actions= 0 time=7 usec 
#deadcode             actions= 0 time=11 usec 
#reorder              actions= 1 time=46 usec 
#reduce               actions=72 time=26 usec 
#matpack              actions= 2 time=14 usec 
#dataflow             actions=27 time=41 usec 
#multiplex            actions= 0 time=5 usec 
#profiler             actions= 1 time=5 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=33 usec 
#total                actions= 1 time=695 usec 
#drop table test;
#drop table test1;
#drop table test2;
#drop table test3;
#drop table test4;

# 18:37:29 >  
# 18:37:29 >  "Done."
# 18:37:29 >  

