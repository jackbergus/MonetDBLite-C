stdout of test 'partition_elim` in directory 'sql/test/remote` itself:


# 18:37:29 >  
# 18:37:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35081" "--set" "mapi_usock=/var/tmp/mtest-17557/.s.monetdb.35081" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_remote" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 18:37:29 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_remote', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.333 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.nes.nl:35081/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17557/.s.monetdb.35081
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 40_json_hge.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_gsl.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 85_bam.sql
# loading sql script: 90_generator.sql
# loading sql script: 90_generator_hge.sql
# loading sql script: 99_system.sql

# 18:37:29 >  
# 18:37:29 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-17557" "--port=35081"
# 18:37:29 >  

#create merge table test (x double, y double);
#create table test1 (x double, y double);
#create table test2 (x double, y double);
#create table test3 (x double, y double);
#create table test4 (x double, y double);
#insert into test1 values (1.0, 1.0);
[ 1	]
#insert into test1 values (2.0, 2.0);
[ 1	]
#insert into test2 values (3.0, -1.0);
[ 1	]
#insert into test2 values (4.0, -2.0);
[ 1	]
#insert into test3 values (3.0, 1.0);
[ 1	]
#insert into test3 values (6.0, 2.0);
[ 1	]
#insert into test4 values (7.0, 1.0);
[ 1	]
#insert into test4 values (10.0, 2.0);
[ 1	]
#alter table test1 set read only;
#alter table test2 set read only;
#alter table test3 set read only;
#alter table test4 set read only;
#alter table test add table test1;
#alter table test add table test2;
#alter table test add table test3;
#alter table test add table test4;
#select x from test1 where x between 0 and -1;
% sys.test1 # table_name
% x # name
% double # type
% 24 # length
#select x from test2 where x between 0 and -1;
% sys.test2 # table_name
% x # name
% double # type
% 24 # length
#select x from test3 where x between 0 and -1;
% sys.test3 # table_name
% x # name
% double # type
% 24 # length
#select x from test4 where x between 0 and -1;
% sys.test4 # table_name
% x # name
% double # type
% 24 # length
#select y from test1 where y between 0 and -1;
% sys.test1 # table_name
% y # name
% double # type
% 24 # length
#select y from test2 where y between 0 and -1;
% sys.test2 # table_name
% y # name
% double # type
% 24 # length
#select y from test3 where y between 0 and -1;
% sys.test3 # table_name
% y # name
% double # type
% 24 # length
#select y from test4 where y between 0 and -1;
% sys.test4 # table_name
% y # name
% double # type
% 24 # length
#explain select x,y from test where x between 4.0 and 6.0;
% .explain # table_name
% mal # name
% clob # type
% 68 # length
function user.main():void;
barrier X_1266 := language.dataflow();
    X_1191 := bat.new(nil:str);
    X_1198 := bat.append(X_1191,".test");
    X_1208 := bat.append(X_1198,".test");
    X_1193 := bat.new(nil:str);
    X_1200 := bat.append(X_1193,"x");
    X_1209 := bat.append(X_1200,"y");
    X_1194 := bat.new(nil:str);
    X_1202 := bat.append(X_1194,"double");
    X_1211 := bat.append(X_1202,"double");
    X_1195 := bat.new(nil:int);
    X_1204 := bat.append(X_1195,53);
    X_1212 := bat.append(X_1204,53);
    X_1197 := bat.new(nil:int);
    X_1206 := bat.append(X_1197,0);
    X_1213 := bat.append(X_1206,0);
    X_1183:bat[:dbl] := bat.new(nil:dbl);
    X_1151 := sql.mvc();
    X_1235:bat[:dbl] := sql.bind(X_1151,"sys","test2","x",0,0,2);
    C_1232:bat[:oid] := sql.tid(X_1151,"sys","test2",0,2);
    C_1240 := algebra.subselect(X_1235,C_1232,4,6,true,true,false);
    X_1242 := algebra.projection(C_1240,X_1235);
    X_1236:bat[:dbl] := sql.bind(X_1151,"sys","test2","x",0,1,2);
    C_1234:bat[:oid] := sql.tid(X_1151,"sys","test2",1,2);
    C_1241 := algebra.subselect(X_1236,C_1234,4,6,true,true,false);
    X_1243 := algebra.projection(C_1241,X_1236);
    X_1255 := mat.packIncrement(X_1242,2);
    X_1168 := mat.packIncrement(X_1255,X_1243);
    X_1185 := bat.append(X_1183,X_1168,true);
    X_1173:bat[:dbl] := sql.bind(X_1151,"sys","test3","x",0);
    C_1171:bat[:oid] := sql.tid(X_1151,"sys","test3");
    C_1179 := algebra.subselect(X_1173,C_1171,4,6,true,true,false);
    X_1180 := algebra.projection(C_1179,X_1173);
    X_1186 := bat.append(X_1185,X_1180,true);
    X_1187:bat[:dbl] := bat.new(nil:dbl);
    X_1237:bat[:dbl] := sql.bind(X_1151,"sys","test2","y",0,0,2);
    X_1244 := algebra.projection(C_1240,X_1237);
    X_1238:bat[:dbl] := sql.bind(X_1151,"sys","test2","y",0,1,2);
    X_1245 := algebra.projection(C_1241,X_1238);
    X_1257 := mat.packIncrement(X_1244,2);
    X_1169 := mat.packIncrement(X_1257,X_1245);
    X_1188 := bat.append(X_1187,X_1169,true);
    X_1175:bat[:dbl] := sql.bind(X_1151,"sys","test3","y",0);
    X_1181 := algebra.projection(C_1179,X_1175);
    X_1189 := bat.append(X_1188,X_1181,true);
    language.pass(X_1235);
    language.pass(X_1236);
    language.pass(X_1173);
    language.pass(C_1240);
    language.pass(C_1241);
    language.pass(C_1179);
exit X_1266;
    sql.resultSet(X_1208,X_1209,X_1211,X_1212,X_1213,X_1186,X_1189);
end user.main;
#inline               actions= 0 time=3 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=4 usec 
#coercion             actions= 0 time=5 usec 
#evaluate             actions= 6 time=48 usec 
#emptybind            actions= 0 time=24 usec 
#aliases              actions=10 time=24 usec 
#mitosis              actions= 1 time=72 usec 
#mergetable           actions= 3 time=157 usec 
#deadcode             actions= 4 time=21 usec 
#aliases              actions= 0 time=16 usec 
#constants            actions= 7 time=17 usec 
#commonTerms          actions= 0 time=18 usec 
#projectionpath       actions= 0 time=12 usec 
#deadcode             actions= 0 time=16 usec 
#reorder              actions= 1 time=79 usec 
#reduce               actions=43 time=23 usec 
#matpack              actions= 2 time=17 usec 
#dataflow             actions=27 time=63 usec 
#multiplex            actions= 0 time=5 usec 
#profiler             actions= 1 time=9 usec 
#candidates           actions= 1 time=4 usec 
#garbagecollector     actions= 1 time=44 usec 
#total                actions= 1 time=984 usec 
#explain select x,y from test where x between (7-3) and (7-1);
% .explain # table_name
% mal # name
% clob # type
% 75 # length
function user.main():void;
barrier X_1414 := language.dataflow();
    X_1334 := bat.new(nil:str);
    X_1341 := bat.append(X_1334,".test");
    X_1351 := bat.append(X_1341,".test");
    X_1336 := bat.new(nil:str);
    X_1343 := bat.append(X_1336,"x");
    X_1352 := bat.append(X_1343,"y");
    X_1337 := bat.new(nil:str);
    X_1345 := bat.append(X_1337,"double");
    X_1354 := bat.append(X_1345,"double");
    X_1338 := bat.new(nil:int);
    X_1347 := bat.append(X_1338,53);
    X_1355 := bat.append(X_1347,53);
    X_1340 := bat.new(nil:int);
    X_1349 := bat.append(X_1340,0);
    X_1356 := bat.append(X_1349,0);
    X_1326:bat[:dbl] := bat.new(nil:dbl);
    X_1282 := sql.mvc();
    X_1383:bat[:dbl] := sql.bind(X_1282,"sys","test2","x",0,0,2);
    C_1380:bat[:oid] := sql.tid(X_1282,"sys","test2",0,2);
    C_1388 := algebra.subselect(X_1383,C_1380,4:dbl,6:dbl,true,true,false);
    X_1390 := algebra.projection(C_1388,X_1383);
    X_1384:bat[:dbl] := sql.bind(X_1282,"sys","test2","x",0,1,2);
    C_1382:bat[:oid] := sql.tid(X_1282,"sys","test2",1,2);
    C_1389 := algebra.subselect(X_1384,C_1382,4:dbl,6:dbl,true,true,false);
    X_1391 := algebra.projection(C_1389,X_1384);
    X_1403 := mat.packIncrement(X_1390,2);
    X_1305 := mat.packIncrement(X_1403,X_1391);
    X_1328 := bat.append(X_1326,X_1305,true);
    X_1310:bat[:dbl] := sql.bind(X_1282,"sys","test3","x",0);
    C_1308:bat[:oid] := sql.tid(X_1282,"sys","test3");
    C_1322 := algebra.subselect(X_1310,C_1308,4:dbl,6:dbl,true,true,false);
    X_1323 := algebra.projection(C_1322,X_1310);
    X_1329 := bat.append(X_1328,X_1323,true);
    X_1330:bat[:dbl] := bat.new(nil:dbl);
    X_1385:bat[:dbl] := sql.bind(X_1282,"sys","test2","y",0,0,2);
    X_1392 := algebra.projection(C_1388,X_1385);
    X_1386:bat[:dbl] := sql.bind(X_1282,"sys","test2","y",0,1,2);
    X_1393 := algebra.projection(C_1389,X_1386);
    X_1405 := mat.packIncrement(X_1392,2);
    X_1306 := mat.packIncrement(X_1405,X_1393);
    X_1331 := bat.append(X_1330,X_1306,true);
    X_1312:bat[:dbl] := sql.bind(X_1282,"sys","test3","y",0);
    X_1324 := algebra.projection(C_1322,X_1312);
    X_1332 := bat.append(X_1331,X_1324,true);
    language.pass(X_1383);
    language.pass(X_1384);
    language.pass(X_1310);
    language.pass(C_1388);
    language.pass(C_1389);
    language.pass(C_1322);
exit X_1414;
    sql.resultSet(X_1351,X_1352,X_1354,X_1355,X_1356,X_1329,X_1332);
end user.main;
#inline               actions= 0 time=3 usec 
#remap                actions= 0 time=9 usec 
#costmodel            actions= 1 time=3 usec 
#coercion             actions= 0 time=4 usec 
#evaluate             actions=20 time=82 usec 
#emptybind            actions= 0 time=19 usec 
#aliases              actions=24 time=19 usec 
#mitosis              actions= 1 time=47 usec 
#mergetable           actions= 3 time=92 usec 
#deadcode             actions= 4 time=15 usec 
#aliases              actions= 0 time=12 usec 
#constants            actions= 9 time=14 usec 
#commonTerms          actions= 0 time=13 usec 
#projectionpath       actions= 0 time=9 usec 
#deadcode             actions= 0 time=13 usec 
#reorder              actions= 1 time=54 usec 
#reduce               actions=64 time=25 usec 
#matpack              actions= 2 time=14 usec 
#dataflow             actions=27 time=46 usec 
#multiplex            actions= 0 time=5 usec 
#profiler             actions= 1 time=7 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=37 usec 
#total                actions= 1 time=766 usec 
#explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;
% .explain # table_name
% mal # name
% clob # type
% 68 # length
function user.main():void;
barrier X_1530 := language.dataflow();
    X_1455 := bat.new(nil:str);
    X_1462 := bat.append(X_1455,"sys.test");
    X_1471 := bat.append(X_1462,"sys.test");
    X_1457 := bat.new(nil:str);
    X_1464 := bat.append(X_1457,"x");
    X_1472 := bat.append(X_1464,"y");
    X_1458 := bat.new(nil:str);
    X_1465 := bat.append(X_1458,"double");
    X_1474 := bat.append(X_1465,"double");
    X_1459 := bat.new(nil:int);
    X_1467 := bat.append(X_1459,53);
    X_1475 := bat.append(X_1467,53);
    X_1461 := bat.new(nil:int);
    X_1469 := bat.append(X_1461,0);
    X_1476 := bat.append(X_1469,0);
    X_1431 := sql.mvc();
    X_1499:bat[:dbl] := sql.bind(X_1431,"sys","test3","y",0,0,2);
    X_1497:bat[:dbl] := sql.bind(X_1431,"sys","test3","x",0,0,2);
    C_1494:bat[:oid] := sql.tid(X_1431,"sys","test3",0,2);
    C_1502 := algebra.subselect(X_1497,C_1494,4,6,true,true,false);
    C_1504 := algebra.subselect(X_1499,C_1502,0,2,true,true,false);
    X_1506 := algebra.projection(C_1504,X_1497);
    X_1500:bat[:dbl] := sql.bind(X_1431,"sys","test3","y",0,1,2);
    X_1498:bat[:dbl] := sql.bind(X_1431,"sys","test3","x",0,1,2);
    C_1496:bat[:oid] := sql.tid(X_1431,"sys","test3",1,2);
    C_1503 := algebra.subselect(X_1498,C_1496,4,6,true,true,false);
    C_1505 := algebra.subselect(X_1500,C_1503,0,2,true,true,false);
    X_1507 := algebra.projection(C_1505,X_1498);
    X_1519 := mat.packIncrement(X_1506,2);
    X_1451 := mat.packIncrement(X_1519,X_1507);
    X_1508 := algebra.projection(C_1504,X_1499);
    X_1509 := algebra.projection(C_1505,X_1500);
    X_1521 := mat.packIncrement(X_1508,2);
    X_1452 := mat.packIncrement(X_1521,X_1509);
    language.pass(X_1497);
    language.pass(X_1498);
    language.pass(C_1504);
    language.pass(X_1499);
    language.pass(C_1505);
    language.pass(X_1500);
exit X_1530;
    sql.resultSet(X_1471,X_1472,X_1474,X_1475,X_1476,X_1451,X_1452);
end user.main;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=3 usec 
#coercion             actions= 0 time=3 usec 
#evaluate             actions= 8 time=33 usec 
#emptybind            actions= 0 time=14 usec 
#aliases              actions=10 time=29 usec 
#mitosis              actions= 1 time=41 usec 
#mergetable           actions= 4 time=85 usec 
#deadcode             actions= 5 time=14 usec 
#aliases              actions= 0 time=10 usec 
#constants            actions= 9 time=12 usec 
#commonTerms          actions= 0 time=12 usec 
#projectionpath       actions= 0 time=8 usec 
#deadcode             actions= 0 time=10 usec 
#reorder              actions= 1 time=45 usec 
#reduce               actions=44 time=20 usec 
#matpack              actions= 2 time=13 usec 
#dataflow             actions=27 time=41 usec 
#multiplex            actions= 0 time=4 usec 
#profiler             actions= 1 time=6 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=32 usec 
#total                actions= 1 time=615 usec 
#explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 75 # length
function user.main():void;
barrier X_1661 := language.dataflow();
    X_1581 := bat.new(nil:str);
    X_1588 := bat.append(X_1581,"sys.test");
    X_1598 := bat.append(X_1588,"sys.test");
    X_1583 := bat.new(nil:str);
    X_1590 := bat.append(X_1583,"x");
    X_1599 := bat.append(X_1590,"y");
    X_1584 := bat.new(nil:str);
    X_1592 := bat.append(X_1584,"double");
    X_1601 := bat.append(X_1592,"double");
    X_1585 := bat.new(nil:int);
    X_1594 := bat.append(X_1585,53);
    X_1602 := bat.append(X_1594,53);
    X_1587 := bat.new(nil:int);
    X_1596 := bat.append(X_1587,0);
    X_1603 := bat.append(X_1596,0);
    X_1550 := sql.mvc();
    X_1630:bat[:dbl] := sql.bind(X_1550,"sys","test3","y",0,0,2);
    X_1628:bat[:dbl] := sql.bind(X_1550,"sys","test3","x",0,0,2);
    C_1625:bat[:oid] := sql.tid(X_1550,"sys","test3",0,2);
    C_1633 := algebra.subselect(X_1628,C_1625,4,6,true,true,false);
    C_1635 := algebra.subselect(X_1630,C_1633,0:dbl,2:dbl,true,true,false);
    X_1637 := algebra.projection(C_1635,X_1628);
    X_1631:bat[:dbl] := sql.bind(X_1550,"sys","test3","y",0,1,2);
    X_1629:bat[:dbl] := sql.bind(X_1550,"sys","test3","x",0,1,2);
    C_1627:bat[:oid] := sql.tid(X_1550,"sys","test3",1,2);
    C_1634 := algebra.subselect(X_1629,C_1627,4,6,true,true,false);
    C_1636 := algebra.subselect(X_1631,C_1634,0:dbl,2:dbl,true,true,false);
    X_1638 := algebra.projection(C_1636,X_1629);
    X_1650 := mat.packIncrement(X_1637,2);
    X_1577 := mat.packIncrement(X_1650,X_1638);
    X_1639 := algebra.projection(C_1635,X_1630);
    X_1640 := algebra.projection(C_1636,X_1631);
    X_1652 := mat.packIncrement(X_1639,2);
    X_1578 := mat.packIncrement(X_1652,X_1640);
    language.pass(X_1628);
    language.pass(X_1629);
    language.pass(C_1635);
    language.pass(X_1630);
    language.pass(C_1636);
    language.pass(X_1631);
exit X_1661;
    sql.resultSet(X_1598,X_1599,X_1601,X_1602,X_1603,X_1577,X_1578);
end user.main;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=2 usec 
#coercion             actions= 0 time=3 usec 
#evaluate             actions=16 time=60 usec 
#emptybind            actions= 0 time=16 usec 
#aliases              actions=18 time=15 usec 
#mitosis              actions= 1 time=40 usec 
#mergetable           actions= 4 time=81 usec 
#deadcode             actions= 5 time=13 usec 
#aliases              actions= 0 time=10 usec 
#constants            actions=11 time=14 usec 
#commonTerms          actions= 0 time=11 usec 
#projectionpath       actions= 0 time=7 usec 
#deadcode             actions= 0 time=10 usec 
#reorder              actions= 1 time=45 usec 
#reduce               actions=58 time=22 usec 
#matpack              actions= 2 time=13 usec 
#dataflow             actions=27 time=40 usec 
#multiplex            actions= 0 time=4 usec 
#profiler             actions= 1 time=5 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=33 usec 
#total                actions= 1 time=638 usec 
#explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 75 # length
function user.main():void;
barrier X_1806 := language.dataflow();
    X_1721 := bat.new(nil:str);
    X_1728 := bat.append(X_1721,"sys.test");
    X_1738 := bat.append(X_1728,"sys.test");
    X_1723 := bat.new(nil:str);
    X_1730 := bat.append(X_1723,"x");
    X_1739 := bat.append(X_1730,"y");
    X_1724 := bat.new(nil:str);
    X_1732 := bat.append(X_1724,"double");
    X_1741 := bat.append(X_1732,"double");
    X_1725 := bat.new(nil:int);
    X_1734 := bat.append(X_1725,53);
    X_1742 := bat.append(X_1734,53);
    X_1727 := bat.new(nil:int);
    X_1736 := bat.append(X_1727,0);
    X_1743 := bat.append(X_1736,0);
    X_1684 := sql.mvc();
    X_1775:bat[:dbl] := sql.bind(X_1684,"sys","test3","y",0,0,2);
    X_1773:bat[:dbl] := sql.bind(X_1684,"sys","test3","x",0,0,2);
    C_1770:bat[:oid] := sql.tid(X_1684,"sys","test3",0,2);
    C_1778 := algebra.subselect(X_1773,C_1770,4:dbl,6:dbl,true,true,false);
    C_1780 := algebra.subselect(X_1775,C_1778,0:dbl,2:dbl,true,true,false);
    X_1782 := algebra.projection(C_1780,X_1773);
    X_1776:bat[:dbl] := sql.bind(X_1684,"sys","test3","y",0,1,2);
    X_1774:bat[:dbl] := sql.bind(X_1684,"sys","test3","x",0,1,2);
    C_1772:bat[:oid] := sql.tid(X_1684,"sys","test3",1,2);
    C_1779 := algebra.subselect(X_1774,C_1772,4:dbl,6:dbl,true,true,false);
    C_1781 := algebra.subselect(X_1776,C_1779,0:dbl,2:dbl,true,true,false);
    X_1783 := algebra.projection(C_1781,X_1774);
    X_1795 := mat.packIncrement(X_1782,2);
    X_1717 := mat.packIncrement(X_1795,X_1783);
    X_1784 := algebra.projection(C_1780,X_1775);
    X_1785 := algebra.projection(C_1781,X_1776);
    X_1797 := mat.packIncrement(X_1784,2);
    X_1718 := mat.packIncrement(X_1797,X_1785);
    language.pass(X_1773);
    language.pass(X_1774);
    language.pass(C_1780);
    language.pass(X_1775);
    language.pass(C_1781);
    language.pass(X_1776);
exit X_1806;
    sql.resultSet(X_1738,X_1739,X_1741,X_1742,X_1743,X_1717,X_1718);
end user.main;
#inline               actions= 0 time=2 usec 
#remap                actions= 0 time=8 usec 
#costmodel            actions= 1 time=3 usec 
#coercion             actions= 0 time=3 usec 
#evaluate             actions=24 time=70 usec 
#emptybind            actions= 0 time=17 usec 
#aliases              actions=26 time=17 usec 
#mitosis              actions= 1 time=42 usec 
#mergetable           actions= 4 time=82 usec 
#deadcode             actions= 5 time=14 usec 
#aliases              actions= 0 time=11 usec 
#constants            actions=12 time=32 usec 
#commonTerms          actions= 0 time=12 usec 
#projectionpath       actions= 0 time=7 usec 
#deadcode             actions= 0 time=11 usec 
#reorder              actions= 1 time=46 usec 
#reduce               actions=72 time=26 usec 
#matpack              actions= 2 time=14 usec 
#dataflow             actions=27 time=41 usec 
#multiplex            actions= 0 time=5 usec 
#profiler             actions= 1 time=5 usec 
#candidates           actions= 1 time=2 usec 
#garbagecollector     actions= 1 time=33 usec 
#total                actions= 1 time=695 usec 
#drop table test;
#drop table test1;
#drop table test2;
#drop table test3;
#drop table test4;

# 18:37:29 >  
# 18:37:29 >  "Done."
# 18:37:29 >  

