stdout of test 'partition_elim` in directory 'sql/test/remote` itself:


# 18:37:29 >  
# 18:37:29 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=35081" "--set" "mapi_usock=/var/tmp/mtest-17557/.s.monetdb.35081" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/niels/scratch/monetdb/Linux-x86_64/var/MonetDB/mTests_sql_test_remote" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 18:37:29 >  

# MonetDB 5 server v11.20.0
# This is an unreleased version
# Serving database 'mTests_sql_test_remote', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.333 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://localhost.nes.nl:35081/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-17557/.s.monetdb.35081
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 40_json_hge.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_gsl.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 85_bam.sql
# loading sql script: 90_generator.sql
# loading sql script: 90_generator_hge.sql
# loading sql script: 99_system.sql

# 18:37:29 >  
# 18:37:29 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-17557" "--port=35081"
# 18:37:29 >  

#create merge table test (x double, y double);
#create table test1 (x double, y double);
#create table test2 (x double, y double);
#create table test3 (x double, y double);
#create table test4 (x double, y double);
#insert into test1 values (1.0, 1.0);
[ 1	]
#insert into test1 values (2.0, 2.0);
[ 1	]
#insert into test2 values (3.0, -1.0);
[ 1	]
#insert into test2 values (4.0, -2.0);
[ 1	]
#insert into test3 values (3.0, 1.0);
[ 1	]
#insert into test3 values (6.0, 2.0);
[ 1	]
#insert into test4 values (7.0, 1.0);
[ 1	]
#insert into test4 values (10.0, 2.0);
[ 1	]
#alter table test1 set read only;
#alter table test2 set read only;
#alter table test3 set read only;
#alter table test4 set read only;
#alter table test add table test1;
#alter table test add table test2;
#alter table test add table test3;
#alter table test add table test4;
#select x from test1 where x between 0 and -1;
% sys.test1 # table_name
% x # name
% double # type
% 24 # length
#select x from test2 where x between 0 and -1;
% sys.test2 # table_name
% x # name
% double # type
% 24 # length
#select x from test3 where x between 0 and -1;
% sys.test3 # table_name
% x # name
% double # type
% 24 # length
#select x from test4 where x between 0 and -1;
% sys.test4 # table_name
% x # name
% double # type
% 24 # length
#select y from test1 where y between 0 and -1;
% sys.test1 # table_name
% y # name
% double # type
% 24 # length
#select y from test2 where y between 0 and -1;
% sys.test2 # table_name
% y # name
% double # type
% 24 # length
#select y from test3 where y between 0 and -1;
% sys.test3 # table_name
% y # name
% double # type
% 24 # length
#select y from test4 where y between 0 and -1;
% sys.test4 # table_name
% y # name
% double # type
% 24 # length
#explain select x,y from test where x between 4.0 and 6.0;
% .explain # table_name
% mal # name
% clob # type
% 68 # length
function user.SQLanalyze():void;
barrier X_1193 := language.dataflow();
    X_1122 := bat.new(nil:str);
    X_1129 := bat.append(X_1122,".test");
    X_1139 := bat.append(X_1129,".test");
    X_1124 := bat.new(nil:str);
    X_1131 := bat.append(X_1124,"x");
    X_1140 := bat.append(X_1131,"y");
    X_1125 := bat.new(nil:str);
    X_1133 := bat.append(X_1125,"double");
    X_1141 := bat.append(X_1133,"double");
    X_1126 := bat.new(nil:int);
    X_1135 := bat.append(X_1126,53);
    X_1142 := bat.append(X_1135,53);
    X_1128 := bat.new(nil:int);
    X_1137 := bat.append(X_1128,0);
    X_1143 := bat.append(X_1137,0);
    X_1085:bat[:dbl] := bat.new(nil:dbl);
    X_1084 := sql.mvc();
    X_1162:bat[:dbl] := sql.bind(X_1084,"sys","test2","x",0,0,2);
    X_1159:bat[:oid] := sql.tid(X_1084,"sys","test2",0,2);
    X_1167 := algebra.subselect(X_1162,X_1159,4,6,true,true,false);
    X_1169 := algebra.projection(X_1167,X_1162);
    X_1163:bat[:dbl] := sql.bind(X_1084,"sys","test2","x",0,1,2);
    X_1161:bat[:oid] := sql.tid(X_1084,"sys","test2",1,2);
    X_1168 := algebra.subselect(X_1163,X_1161,4,6,true,true,false);
    X_1170 := algebra.projection(X_1168,X_1163);
    X_1182 := mat.packIncrement(X_1169,2);
    X_1100 := mat.packIncrement(X_1182,X_1170);
    X_1101 := bat.append(X_1085,X_1100,true);
    X_1104:bat[:dbl] := sql.bind(X_1084,"sys","test3","x",0);
    X_1102:bat[:oid] := sql.tid(X_1084,"sys","test3");
    X_1108 := algebra.subselect(X_1104,X_1102,4,6,true,true,false);
    X_1109 := algebra.projection(X_1108,X_1104);
    X_1110 := bat.append(X_1101,X_1109,true);
    X_1111:bat[:dbl] := bat.new(nil:dbl);
    X_1164:bat[:dbl] := sql.bind(X_1084,"sys","test2","y",0,0,2);
    X_1171 := algebra.projection(X_1167,X_1164);
    X_1165:bat[:dbl] := sql.bind(X_1084,"sys","test2","y",0,1,2);
    X_1172 := algebra.projection(X_1168,X_1165);
    X_1184 := mat.packIncrement(X_1171,2);
    X_1115 := mat.packIncrement(X_1184,X_1172);
    X_1116 := bat.append(X_1111,X_1115,true);
    X_1117:bat[:dbl] := sql.bind(X_1084,"sys","test3","y",0);
    X_1119 := algebra.projection(X_1108,X_1117);
    X_1120 := bat.append(X_1116,X_1119,true);
    language.pass(X_1162);
    language.pass(X_1163);
    language.pass(X_1104);
    language.pass(X_1167);
    language.pass(X_1168);
    language.pass(X_1108);
exit X_1193;
    sql.resultSet(X_1139,X_1140,X_1141,X_1142,X_1143,X_1110,X_1120);
end user.SQLanalyze;
#explain select x,y from test where x between (7-3) and (7-1);
% .explain # table_name
% mal # name
% clob # type
% 75 # length
function user.SQLanalyze():void;
barrier X_1336 := language.dataflow();
    X_1260 := bat.new(nil:str);
    X_1267 := bat.append(X_1260,".test");
    X_1277 := bat.append(X_1267,".test");
    X_1262 := bat.new(nil:str);
    X_1269 := bat.append(X_1262,"x");
    X_1278 := bat.append(X_1269,"y");
    X_1263 := bat.new(nil:str);
    X_1271 := bat.append(X_1263,"double");
    X_1279 := bat.append(X_1271,"double");
    X_1264 := bat.new(nil:int);
    X_1273 := bat.append(X_1264,53);
    X_1280 := bat.append(X_1273,53);
    X_1266 := bat.new(nil:int);
    X_1275 := bat.append(X_1266,0);
    X_1281 := bat.append(X_1275,0);
    X_1210:bat[:dbl] := bat.new(nil:dbl);
    X_1209 := sql.mvc();
    X_1305:bat[:dbl] := sql.bind(X_1209,"sys","test2","x",0,0,2);
    X_1302:bat[:oid] := sql.tid(X_1209,"sys","test2",0,2);
    X_1310 := algebra.subselect(X_1305,X_1302,4:dbl,6:dbl,true,true,false);
    X_1312 := algebra.projection(X_1310,X_1305);
    X_1306:bat[:dbl] := sql.bind(X_1209,"sys","test2","x",0,1,2);
    X_1304:bat[:oid] := sql.tid(X_1209,"sys","test2",1,2);
    X_1311 := algebra.subselect(X_1306,X_1304,4:dbl,6:dbl,true,true,false);
    X_1313 := algebra.projection(X_1311,X_1306);
    X_1325 := mat.packIncrement(X_1312,2);
    X_1231 := mat.packIncrement(X_1325,X_1313);
    X_1232 := bat.append(X_1210,X_1231,true);
    X_1235:bat[:dbl] := sql.bind(X_1209,"sys","test3","x",0);
    X_1233:bat[:oid] := sql.tid(X_1209,"sys","test3");
    X_1245 := algebra.subselect(X_1235,X_1233,4:dbl,6:dbl,true,true,false);
    X_1246 := algebra.projection(X_1245,X_1235);
    X_1247 := bat.append(X_1232,X_1246,true);
    X_1248:bat[:dbl] := bat.new(nil:dbl);
    X_1307:bat[:dbl] := sql.bind(X_1209,"sys","test2","y",0,0,2);
    X_1314 := algebra.projection(X_1310,X_1307);
    X_1308:bat[:dbl] := sql.bind(X_1209,"sys","test2","y",0,1,2);
    X_1315 := algebra.projection(X_1311,X_1308);
    X_1327 := mat.packIncrement(X_1314,2);
    X_1253 := mat.packIncrement(X_1327,X_1315);
    X_1254 := bat.append(X_1248,X_1253,true);
    X_1255:bat[:dbl] := sql.bind(X_1209,"sys","test3","y",0);
    X_1257 := algebra.projection(X_1245,X_1255);
    X_1258 := bat.append(X_1254,X_1257,true);
    language.pass(X_1305);
    language.pass(X_1306);
    language.pass(X_1235);
    language.pass(X_1310);
    language.pass(X_1311);
    language.pass(X_1245);
exit X_1336;
    sql.resultSet(X_1277,X_1278,X_1279,X_1280,X_1281,X_1247,X_1258);
end user.SQLanalyze;
#explain select x,y from test where x between 4.0 and 6.0 and y between 0.0 and 2.0;
% .explain # table_name
% mal # name
% clob # type
% 68 # length
function user.SQLanalyze():void;
barrier X_1449 := language.dataflow();
    X_1376 := bat.new(nil:str);
    X_1383 := bat.append(X_1376,"sys.test");
    X_1391 := bat.append(X_1383,"sys.test");
    X_1378 := bat.new(nil:str);
    X_1385 := bat.append(X_1378,"x");
    X_1392 := bat.append(X_1385,"y");
    X_1379 := bat.new(nil:str);
    X_1386 := bat.append(X_1379,"double");
    X_1394 := bat.append(X_1386,"double");
    X_1380 := bat.new(nil:int);
    X_1388 := bat.append(X_1380,53);
    X_1395 := bat.append(X_1388,53);
    X_1382 := bat.new(nil:int);
    X_1390 := bat.append(X_1382,0);
    X_1396 := bat.append(X_1390,0);
    X_1353 := sql.mvc();
    X_1416:bat[:dbl] := sql.bind(X_1353,"sys","test3","y",0,0,2);
    X_1418:bat[:dbl] := sql.bind(X_1353,"sys","test3","x",0,0,2);
    X_1413:bat[:oid] := sql.tid(X_1353,"sys","test3",0,2);
    X_1421 := algebra.subselect(X_1418,X_1413,4,6,true,true,false);
    X_1423 := algebra.subselect(X_1416,X_1421,0,2,true,true,false);
    X_1425 := algebra.projection(X_1423,X_1418);
    X_1417:bat[:dbl] := sql.bind(X_1353,"sys","test3","y",0,1,2);
    X_1419:bat[:dbl] := sql.bind(X_1353,"sys","test3","x",0,1,2);
    X_1415:bat[:oid] := sql.tid(X_1353,"sys","test3",1,2);
    X_1422 := algebra.subselect(X_1419,X_1415,4,6,true,true,false);
    X_1424 := algebra.subselect(X_1417,X_1422,0,2,true,true,false);
    X_1426 := algebra.projection(X_1424,X_1419);
    X_1438 := mat.packIncrement(X_1425,2);
    X_1373 := mat.packIncrement(X_1438,X_1426);
    X_1427 := algebra.projection(X_1423,X_1416);
    X_1428 := algebra.projection(X_1424,X_1417);
    X_1440 := mat.packIncrement(X_1427,2);
    X_1374 := mat.packIncrement(X_1440,X_1428);
    language.pass(X_1418);
    language.pass(X_1419);
    language.pass(X_1423);
    language.pass(X_1416);
    language.pass(X_1424);
    language.pass(X_1417);
exit X_1449;
    sql.resultSet(X_1391,X_1392,X_1394,X_1395,X_1396,X_1373,X_1374);
end user.SQLanalyze;
#explain select x,y from test where x between 4.0 and 6.0 and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 75 # length
function user.SQLanalyze():void;
barrier X_1576 := language.dataflow();
    X_1499 := bat.new(nil:str);
    X_1506 := bat.append(X_1499,"sys.test");
    X_1515 := bat.append(X_1506,"sys.test");
    X_1501 := bat.new(nil:str);
    X_1508 := bat.append(X_1501,"x");
    X_1516 := bat.append(X_1508,"y");
    X_1502 := bat.new(nil:str);
    X_1509 := bat.append(X_1502,"double");
    X_1518 := bat.append(X_1509,"double");
    X_1503 := bat.new(nil:int);
    X_1511 := bat.append(X_1503,53);
    X_1519 := bat.append(X_1511,53);
    X_1505 := bat.new(nil:int);
    X_1513 := bat.append(X_1505,0);
    X_1520 := bat.append(X_1513,0);
    X_1469 := sql.mvc();
    X_1543:bat[:dbl] := sql.bind(X_1469,"sys","test3","y",0,0,2);
    X_1545:bat[:dbl] := sql.bind(X_1469,"sys","test3","x",0,0,2);
    X_1540:bat[:oid] := sql.tid(X_1469,"sys","test3",0,2);
    X_1548 := algebra.subselect(X_1545,X_1540,4,6,true,true,false);
    X_1550 := algebra.subselect(X_1543,X_1548,0:dbl,2:dbl,true,true,false);
    X_1552 := algebra.projection(X_1550,X_1545);
    X_1544:bat[:dbl] := sql.bind(X_1469,"sys","test3","y",0,1,2);
    X_1546:bat[:dbl] := sql.bind(X_1469,"sys","test3","x",0,1,2);
    X_1542:bat[:oid] := sql.tid(X_1469,"sys","test3",1,2);
    X_1549 := algebra.subselect(X_1546,X_1542,4,6,true,true,false);
    X_1551 := algebra.subselect(X_1544,X_1549,0:dbl,2:dbl,true,true,false);
    X_1553 := algebra.projection(X_1551,X_1546);
    X_1565 := mat.packIncrement(X_1552,2);
    X_1496 := mat.packIncrement(X_1565,X_1553);
    X_1554 := algebra.projection(X_1550,X_1543);
    X_1555 := algebra.projection(X_1551,X_1544);
    X_1567 := mat.packIncrement(X_1554,2);
    X_1497 := mat.packIncrement(X_1567,X_1555);
    language.pass(X_1545);
    language.pass(X_1546);
    language.pass(X_1550);
    language.pass(X_1543);
    language.pass(X_1551);
    language.pass(X_1544);
exit X_1576;
    sql.resultSet(X_1515,X_1516,X_1518,X_1519,X_1520,X_1496,X_1497);
end user.SQLanalyze;
#explain select x,y from test where x between (7-3) and (7-1) and y between (1.0-1.0) and (4.0-2.0);
% .explain # table_name
% mal # name
% clob # type
% 75 # length
function user.SQLanalyze():void;
barrier X_1717 := language.dataflow();
    X_1635 := bat.new(nil:str);
    X_1642 := bat.append(X_1635,"sys.test");
    X_1651 := bat.append(X_1642,"sys.test");
    X_1637 := bat.new(nil:str);
    X_1644 := bat.append(X_1637,"x");
    X_1652 := bat.append(X_1644,"y");
    X_1638 := bat.new(nil:str);
    X_1645 := bat.append(X_1638,"double");
    X_1654 := bat.append(X_1645,"double");
    X_1639 := bat.new(nil:int);
    X_1647 := bat.append(X_1639,53);
    X_1655 := bat.append(X_1647,53);
    X_1641 := bat.new(nil:int);
    X_1649 := bat.append(X_1641,0);
    X_1656 := bat.append(X_1649,0);
    X_1599 := sql.mvc();
    X_1684:bat[:dbl] := sql.bind(X_1599,"sys","test3","y",0,0,2);
    X_1686:bat[:dbl] := sql.bind(X_1599,"sys","test3","x",0,0,2);
    X_1681:bat[:oid] := sql.tid(X_1599,"sys","test3",0,2);
    X_1689 := algebra.subselect(X_1686,X_1681,4:dbl,6:dbl,true,true,false);
    X_1691 := algebra.subselect(X_1684,X_1689,0:dbl,2:dbl,true,true,false);
    X_1693 := algebra.projection(X_1691,X_1686);
    X_1685:bat[:dbl] := sql.bind(X_1599,"sys","test3","y",0,1,2);
    X_1687:bat[:dbl] := sql.bind(X_1599,"sys","test3","x",0,1,2);
    X_1683:bat[:oid] := sql.tid(X_1599,"sys","test3",1,2);
    X_1690 := algebra.subselect(X_1687,X_1683,4:dbl,6:dbl,true,true,false);
    X_1692 := algebra.subselect(X_1685,X_1690,0:dbl,2:dbl,true,true,false);
    X_1694 := algebra.projection(X_1692,X_1687);
    X_1706 := mat.packIncrement(X_1693,2);
    X_1632 := mat.packIncrement(X_1706,X_1694);
    X_1695 := algebra.projection(X_1691,X_1684);
    X_1696 := algebra.projection(X_1692,X_1685);
    X_1708 := mat.packIncrement(X_1695,2);
    X_1633 := mat.packIncrement(X_1708,X_1696);
    language.pass(X_1686);
    language.pass(X_1687);
    language.pass(X_1691);
    language.pass(X_1684);
    language.pass(X_1692);
    language.pass(X_1685);
exit X_1717;
    sql.resultSet(X_1651,X_1652,X_1654,X_1655,X_1656,X_1632,X_1633);
end user.SQLanalyze;
#drop table test;
#drop table test1;
#drop table test2;
#drop table test3;
#drop table test4;

# 18:37:29 >  
# 18:37:29 >  "Done."
# 18:37:29 >  

