stdout of test 'upgrade` in directory 'sql/test/testdb-upgrade-chain-hge` itself:


# 15:45:52 >  
# 15:45:52 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=37689" "--set" "mapi_usock=/var/tmp/mtest-31771/.s.monetdb.37689" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/sjoerd/Monet-candidate/var/MonetDB/mTests_sql_test_testdb-upgrade-chain-hge" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 15:45:52 >  

# MonetDB 5 server v11.21.6 (hg id: adf405e7edb0+)
# This is an unreleased version
# Serving database 'mTests_sql_test_testdb-upgrade-chain-hge', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.590 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://madrid.ins.cwi.nl:37689/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-31771/.s.monetdb.37689
# MonetDB/GIS module loaded
# Start processing logs sql/sql_logs version 52200
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.

Running database upgrade commands:
set schema "sys";
delete from sys._columns where table_id = (select id from sys._tables where name = 'connections' and schema_id = (select id from sys.schemas where name = 'sys'));
delete from sys._tables where name = 'connections' and schema_id = (select id from sys.schemas where name = 'sys');
update sys.functions set side_effect = false where name in ('like', 'ilike') and schema_id = (select id from sys.schemas where name = 'sys');
drop function sys.malfunctions;
create function sys.malfunctions() returns table("module" string, "function" string, "signature" string, "address" string, "comment" string) external name "manual"."functions";
drop function sys.optimizer_stats();
create function sys.optimizer_stats() returns table (optname string, count int, timing bigint) external name inspect.optimizer_stats;
insert into sys.systemfunctions (select id from sys.functions where name in ('malfunctions', 'optimizer_stats') and schema_id = (select id from sys.schemas where name = 'sys') and id not in (select function_id from sys.systemfunctions));
create function profiler.getlimit() returns integer external name profiler.getlimit;
create procedure profiler.setlimit(lim integer) external name profiler.setlimit;
drop procedure profiler.setpoolsize;
drop procedure profiler.setstream;
insert into sys.systemfunctions (select id from sys.functions where name in ('getlimit', 'setlimit') and schema_id = (select id from sys.schemas where name = 'profiler') and id not in (select function_id from sys.systemfunctions));
ALTER TABLE sys.keywords SET READ ONLY;
ALTER TABLE sys.table_types SET READ ONLY;
ALTER TABLE sys.dependency_types SET READ ONLY;
CREATE TABLE sys.function_types (
function_type_id   SMALLINT NOT NULL PRIMARY KEY,
function_type_name VARCHAR(30) NOT NULL UNIQUE);
INSERT INTO sys.function_types (function_type_id, function_type_name) VALUES
(1, 'Scalar function'), (2, 'Procedure'), (3, 'Aggregate function'), (4, 'Filter function'), (5, 'Function returning a table'),
(6, 'Analytic function'), (7, 'Loader function');
ALTER TABLE sys.function_types SET READ ONLY;
CREATE TABLE sys.function_languages (
language_id   SMALLINT NOT NULL PRIMARY KEY,
language_name VARCHAR(20) NOT NULL UNIQUE);
INSERT INTO sys.function_languages (language_id, language_name) VALUES
(0, 'Internal C'), (1, 'MAL'), (2, 'SQL'), (3, 'R'), (4, 'C'), (5, 'Java'), (6, 'Python'), (7, 'Python Mapped');
ALTER TABLE sys.function_languages SET READ ONLY;
CREATE TABLE sys.key_types (
key_type_id   SMALLINT NOT NULL PRIMARY KEY,
key_type_name VARCHAR(15) NOT NULL UNIQUE);
INSERT INTO sys.key_types (key_type_id, key_type_name) VALUES
(0, 'Primary Key'), (1, 'Unique Key'), (2, 'Foreign Key');
ALTER TABLE sys.key_types SET READ ONLY;
CREATE TABLE sys.index_types (
index_type_id   SMALLINT NOT NULL PRIMARY KEY,
index_type_name VARCHAR(25) NOT NULL UNIQUE);
INSERT INTO sys.index_types (index_type_id, index_type_name) VALUES
(0, 'Hash'), (1, 'Join'), (2, 'Order preserving hash'), (3, 'No-index'), (4, 'Imprint'), (5, 'Ordered');
ALTER TABLE sys.index_types SET READ ONLY;
CREATE TABLE sys.privilege_codes (
privilege_code_id   INT NOT NULL PRIMARY KEY,
privilege_code_name VARCHAR(30) NOT NULL UNIQUE);
INSERT INTO sys.privilege_codes (privilege_code_id, privilege_code_name) VALUES
(1, 'SELECT'), (2, 'UPDATE'), (4, 'INSERT'), (8, 'DELETE'), (16, 'EXECUTE'), (32, 'GRANT'),
(3, 'SELECT,UPDATE'), (5, 'SELECT,INSERT'), (6, 'INSERT,UPDATE'), (7, 'SELECT,INSERT,UPDATE'),
(9, 'SELECT,DELETE'), (10, 'UPDATE,DELETE'), (11, 'SELECT,UPDATE,DELETE'), (12, 'INSERT,DELETE'),
(13, 'SELECT,INSERT,DELETE'), (14, 'INSERT,UPDATE,DELETE'), (15, 'SELECT,INSERT,UPDATE,DELETE');
ALTER TABLE sys.privilege_codes SET READ ONLY;
update sys._tables set system = true where name in ('function_languages', 'function_types', 'index_types', 'key_types', 'privilege_codes') and schema_id = (select id from sys.schemas where name = 'sys');
delete from sys.systemfunctions where function_id not in (select id from sys.functions);
set schema "testschema";

# 15:26:22 >  
# 15:26:22 >  "/usr/bin/python2" "upgrade.SQL.py" "upgrade"
# 15:26:22 >  

#select count(*) from testschema.smallstring;
% testschema.L4 # table_name
% L3 # name
% bigint # type
% 2 # length
[ 66	]

# 15:45:53 >  
# 15:45:53 >  "Done."
# 15:45:53 >  

