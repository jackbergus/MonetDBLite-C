stdout of test 'count_from_commented_function_signatures.Bug-6542` in directory 'sql/test/BugTracker-2018` itself:


# 18:36:35 >  
# 18:36:35 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=31049" "--set" "mapi_usock=/var/tmp/mtest-14549/.s.monetdb.31049" "--set" "monet_prompt=" "--forcemito" "--dbpath=/export/scratch1/dinther/INSTALL/var/MonetDB/mTests_sql_test_BugTracker-2018" "--set" "embedded_r=yes" "--set" "embedded_py=true"
# 18:36:35 >  

# MonetDB 5 server v11.29.0
# This is an unreleased version
# Serving database 'mTests_sql_test_BugTracker-2018', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 128bit integers
# Found 31.307 GiB available main-memory.
# Copyright (c) 1993 - July 2008 CWI.
# Copyright (c) August 2008 - 2018 MonetDB B.V., all rights reserved
# Visit https://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://catskill.da.cwi.nl:31049/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-14549/.s.monetdb.31049
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/Python2 module loaded
# MonetDB/R   module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 18_index.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 21_dependency_views.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 27_rejects.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 40_json_hge.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_profiler.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 60_wlcr.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_lidar.sql
# loading sql script: 75_shp.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 85_bam.sql
# loading sql script: 90_generator.sql
# loading sql script: 90_generator_hge.sql
# loading sql script: 97_comments.sql
# loading sql script: 99_system.sql

# 18:36:35 >  
# 18:36:35 >  "mclient" "-lsql" "-ftest" "-tnone" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-14549" "--port=31049"
# 18:36:35 >  

#select * from sys.commented_function_signatures;
% .commented_function_signatures,	.commented_function_signatures,	.commented_function_signatures,	.commented_function_signatures,	.commented_function_signatures,	.commented_function_signatures,	.commented_function_signatures,	.commented_function_signatures,	.commented_function_signatures,	.commented_function_signatures,	.commented_function_signatures # table_name
% fid,	schema,	fname,	category,	system,	name,	remark,	type,	type_digits,	type_scale,	line # name
% int,	varchar,	varchar,	varchar,	boolean,	varchar,	varchar,	varchar,	int,	int,	int # type
% 1,	0,	0,	0,	5,	0,	0,	0,	1,	1,	1 # length
#plan select count (*) from sys.commented_function_signatures;
% .plan # table_name
% rel # name
% clob # type
% 150 # length
project (
| group by (
| | project (
| | | project (
| | | | project (
| | | | | project (
| | | | | | project (
| | | | | | | project (
| | | | | | | | project (
| | | | | | | | | project (
| | | | | | | | | | project (
| | | | | | | | | | | left outer join (
| | | | | | | | | | | | left outer join (
| | | | | | | | | | | | | join (
| | | | | | | | | | | | | | join (
| | | | | | | | | | | | | | | table(sys.functions) [ "functions"."id" as "f"."id", "functions"."schema_id" as "f"."schema_id" ] COUNT ,
| | | | | | | | | | | | | | | table(sys.comments) [ "comments"."id" NOT NULL HASHCOL  as "c"."id" ] COUNT 
| | | | | | | | | | | | | | ) [ "f"."id" = "c"."id" NOT NULL HASHCOL  ],
| | | | | | | | | | | | | | table(sys.schemas) [ "schemas"."id" as "s"."id" ] COUNT 
| | | | | | | | | | | | | ) [ "f"."schema_id" = "s"."id" ],
| | | | | | | | | | | | | table(sys.systemfunctions) [ "systemfunctions"."function_id" NOT NULL as "sf"."function_id" ] COUNT 
| | | | | | | | | | | | ) [ "f"."id" = "sf"."function_id" NOT NULL ],
| | | | | | | | | | | | select (
| | | | | | | | | | | | | table(sys.args) [ "args"."func_id" as "p"."func_id", "args"."inout" as "p"."inout", "args"."number" as "p"."number" ] COUNT 
| | | | | | | | | | | | ) [ "p"."inout" = tinyint "1" ]
| | | | | | | | | | | ) [ "f"."id" = "p"."func_id" ]
| | | | | | | | | | ) [ "f"."id", "p"."number" ] [ "f"."id", "p"."number" ASC ]
| | | | | | | | | ) [ "f"."id", "p"."number" ]
| | | | | | | | ) [ "f"."id", "p"."number" ] [ "f"."id", "p"."number" ]
| | | | | | | ) [ "f"."id", "p"."number" ]
| | | | | | ) [ "f"."id", "p"."number" ] [ "f"."id" ASC, "p"."number" ASC ]
| | | | | ) [ "f"."id", "p"."number", sys.row_number("f"."id", boolean "false", sys.diff(sys.diff("f"."id" ASC), "p"."number" ASC)) as "L37"."L37" ]
| | | | ) [ "f"."id", "L37"."L37" ]
| | | ) [ "f"."id" as "L2"."fid", "L37"."L37" as "L40"."line" ] [ "L40"."line" ASC ]
| | ) [ "L2"."fid" as "commented_function_signatures"."fid" ]
| ) [  ] [ sys.count() NOT NULL as "L46"."L46" ]
) [ "L46" NOT NULL as "L47"."L46" ]
#explain select count (*) from sys.commented_function_signatures;
% .explain # table_name
% mal # name
% clob # type
% 145 # length
function user.s4_1():void;
    X_1:void := querylog.define("explain select count (*) from sys.commented_function_signatures;":str, "default_pipe":str, 159:int);
barrier X_399:bit := language.dataflow();
    X_74:bat[:int] := bat.new(nil:int);
    X_4:int := sql.mvc();
    C_5:bat[:oid] := sql.tid(X_4:int, "sys":str, "functions":str);
    X_8:bat[:int] := sql.bind(X_4:int, "sys":str, "functions":str, "id":str, 0:int);
    (X_13:bat[:oid], X_14:bat[:int]) := sql.bind(X_4:int, "sys":str, "functions":str, "id":str, 2:int);
    X_11:bat[:int] := sql.bind(X_4:int, "sys":str, "functions":str, "id":str, 1:int);
    X_16:bat[:int] := sql.delta(X_8:bat[:int], X_13:bat[:oid], X_14:bat[:int], X_11:bat[:int]);
    X_17:bat[:int] := algebra.projection(C_5:bat[:oid], X_16:bat[:int]);
    C_25:bat[:oid] := sql.tid(X_4:int, "sys":str, "comments":str);
    X_27:bat[:int] := sql.bind(X_4:int, "sys":str, "comments":str, "id":str, 0:int);
    (X_29:bat[:oid], X_30:bat[:int]) := sql.bind(X_4:int, "sys":str, "comments":str, "id":str, 2:int);
    X_28:bat[:int] := sql.bind(X_4:int, "sys":str, "comments":str, "id":str, 1:int);
    X_31:bat[:int] := sql.delta(X_27:bat[:int], X_29:bat[:oid], X_30:bat[:int], X_28:bat[:int]);
    X_32:bat[:int] := algebra.projection(C_25:bat[:oid], X_31:bat[:int]);
    (X_33:bat[:oid], X_34:bat[:oid]) := algebra.join(X_17:bat[:int], X_32:bat[:int], nil:BAT, nil:BAT, false:bit, nil:lng);
    X_18:bat[:int] := sql.bind(X_4:int, "sys":str, "functions":str, "schema_id":str, 0:int);
    (X_21:bat[:oid], X_22:bat[:int]) := sql.bind(X_4:int, "sys":str, "functions":str, "schema_id":str, 2:int);
    X_20:bat[:int] := sql.bind(X_4:int, "sys":str, "functions":str, "schema_id":str, 1:int);
    X_23:bat[:int] := sql.delta(X_18:bat[:int], X_21:bat[:oid], X_22:bat[:int], X_20:bat[:int]);
    X_40:bat[:int] := algebra.projectionpath(X_33:bat[:oid], C_5:bat[:oid], X_23:bat[:int]);
    C_42:bat[:oid] := sql.tid(X_4:int, "sys":str, "schemas":str);
    X_44:bat[:int] := sql.bind(X_4:int, "sys":str, "schemas":str, "id":str, 0:int);
    (X_46:bat[:oid], X_47:bat[:int]) := sql.bind(X_4:int, "sys":str, "schemas":str, "id":str, 2:int);
    X_45:bat[:int] := sql.bind(X_4:int, "sys":str, "schemas":str, "id":str, 1:int);
    X_48:bat[:int] := sql.delta(X_44:bat[:int], X_46:bat[:oid], X_47:bat[:int], X_45:bat[:int]);
    X_49:bat[:int] := algebra.projection(C_42:bat[:oid], X_48:bat[:int]);
    (X_50:bat[:oid], X_51:bat[:oid]) := algebra.join(X_40:bat[:int], X_49:bat[:int], nil:BAT, nil:BAT, false:bit, nil:lng);
    X_52:bat[:int] := algebra.projectionpath(X_50:bat[:oid], X_33:bat[:oid], X_17:bat[:int]);
    C_56:bat[:oid] := sql.tid(X_4:int, "sys":str, "systemfunctions":str);
    X_58:bat[:int] := sql.bind(X_4:int, "sys":str, "systemfunctions":str, "function_id":str, 0:int);
    (X_61:bat[:oid], X_62:bat[:int]) := sql.bind(X_4:int, "sys":str, "systemfunctions":str, "function_id":str, 2:int);
    X_60:bat[:int] := sql.bind(X_4:int, "sys":str, "systemfunctions":str, "function_id":str, 1:int);
    X_63:bat[:int] := sql.delta(X_58:bat[:int], X_61:bat[:oid], X_62:bat[:int], X_60:bat[:int]);
    X_64:bat[:int] := algebra.projection(C_56:bat[:oid], X_63:bat[:int]);
    (X_65:bat[:oid], X_66:bat[:oid]) := algebra.join(X_52:bat[:int], X_64:bat[:int], nil:BAT, nil:BAT, false:bit, nil:lng);
    X_73:bat[:int] := algebra.projection(X_65:bat[:oid], X_52:bat[:int]);
    X_67:bat[:oid] := bat.mirror(X_52:bat[:int]);
    X_68:bat[:oid] := algebra.difference(X_67:bat[:oid], X_65:bat[:oid], nil:BAT, nil:BAT, false:bit, nil:lng);
    X_76:bat[:int] := bat.append(X_74:bat[:int], X_73:bat[:int], true:bit);
    X_78:bat[:int] := algebra.projection(X_68:bat[:oid], X_52:bat[:int]);
    X_79:bat[:int] := bat.append(X_76:bat[:int], X_78:bat[:int], true:bit);
    X_140:bat[:int] := bat.new(nil:int);
    C_272:bat[:oid] := sql.tid(X_4:int, "sys":str, "args":str, 0:int, 4:int);
    X_291:bat[:bte] := sql.bind(X_4:int, "sys":str, "args":str, "inout":str, 0:int, 0:int, 4:int);
    (X_295:bat[:oid], X_296:bat[:bte]) := sql.bind(X_4:int, "sys":str, "args":str, "inout":str, 2:int, 0:int, 4:int);
    X_329:bat[:bte] := sql.delta(X_291:bat[:bte], X_295:bat[:oid], X_296:bat[:bte]);
    X_333:bat[:bte] := algebra.projection(C_272:bat[:oid], X_329:bat[:bte]);
    C_345:bat[:oid] := algebra.thetaselect(X_333:bat[:bte], 1:bte, "==":str);
    X_279:bat[:int] := sql.bind(X_4:int, "sys":str, "args":str, "func_id":str, 0:int, 0:int, 4:int);
    (X_283:bat[:oid], X_284:bat[:int]) := sql.bind(X_4:int, "sys":str, "args":str, "func_id":str, 2:int, 0:int, 4:int);
    X_321:bat[:int] := sql.delta(X_279:bat[:int], X_283:bat[:oid], X_284:bat[:int]);
    X_349:bat[:int] := algebra.projectionpath(C_345:bat[:oid], C_272:bat[:oid], X_321:bat[:int]);
    (X_361:bat[:oid], X_362:bat[:oid]) := algebra.join(X_79:bat[:int], X_349:bat[:int], nil:BAT, nil:BAT, false:bit, nil:lng);
    C_274:bat[:oid] := sql.tid(X_4:int, "sys":str, "args":str, 1:int, 4:int);
    X_292:bat[:bte] := sql.bind(X_4:int, "sys":str, "args":str, "inout":str, 0:int, 1:int, 4:int);
    (X_297:bat[:oid], X_298:bat[:bte]) := sql.bind(X_4:int, "sys":str, "args":str, "inout":str, 2:int, 1:int, 4:int);
    X_330:bat[:bte] := sql.delta(X_292:bat[:bte], X_297:bat[:oid], X_298:bat[:bte]);
    X_334:bat[:bte] := algebra.projection(C_274:bat[:oid], X_330:bat[:bte]);
    C_346:bat[:oid] := algebra.thetaselect(X_334:bat[:bte], 1:bte, "==":str);
    X_280:bat[:int] := sql.bind(X_4:int, "sys":str, "args":str, "func_id":str, 0:int, 1:int, 4:int);
    (X_285:bat[:oid], X_286:bat[:int]) := sql.bind(X_4:int, "sys":str, "args":str, "func_id":str, 2:int, 1:int, 4:int);
    X_322:bat[:int] := sql.delta(X_280:bat[:int], X_285:bat[:oid], X_286:bat[:int]);
    X_350:bat[:int] := algebra.projectionpath(C_346:bat[:oid], C_274:bat[:oid], X_322:bat[:int]);
    (X_363:bat[:oid], X_364:bat[:oid]) := algebra.join(X_79:bat[:int], X_350:bat[:int], nil:BAT, nil:BAT, false:bit, nil:lng);
    C_276:bat[:oid] := sql.tid(X_4:int, "sys":str, "args":str, 2:int, 4:int);
    X_293:bat[:bte] := sql.bind(X_4:int, "sys":str, "args":str, "inout":str, 0:int, 2:int, 4:int);
    (X_299:bat[:oid], X_300:bat[:bte]) := sql.bind(X_4:int, "sys":str, "args":str, "inout":str, 2:int, 2:int, 4:int);
    X_331:bat[:bte] := sql.delta(X_293:bat[:bte], X_299:bat[:oid], X_300:bat[:bte]);
    X_335:bat[:bte] := algebra.projection(C_276:bat[:oid], X_331:bat[:bte]);
    C_347:bat[:oid] := algebra.thetaselect(X_335:bat[:bte], 1:bte, "==":str);
    X_281:bat[:int] := sql.bind(X_4:int, "sys":str, "args":str, "func_id":str, 0:int, 2:int, 4:int);
    (X_287:bat[:oid], X_288:bat[:int]) := sql.bind(X_4:int, "sys":str, "args":str, "func_id":str, 2:int, 2:int, 4:int);
    X_323:bat[:int] := sql.delta(X_281:bat[:int], X_287:bat[:oid], X_288:bat[:int]);
    X_351:bat[:int] := algebra.projectionpath(C_347:bat[:oid], C_276:bat[:oid], X_323:bat[:int]);
    (X_365:bat[:oid], X_366:bat[:oid]) := algebra.join(X_79:bat[:int], X_351:bat[:int], nil:BAT, nil:BAT, false:bit, nil:lng);
    C_278:bat[:oid] := sql.tid(X_4:int, "sys":str, "args":str, 3:int, 4:int);
    X_294:bat[:bte] := sql.bind(X_4:int, "sys":str, "args":str, "inout":str, 0:int, 3:int, 4:int);
    (X_301:bat[:oid], X_302:bat[:bte]) := sql.bind(X_4:int, "sys":str, "args":str, "inout":str, 2:int, 3:int, 4:int);
    X_112:bat[:bte] := sql.bind(X_4:int, "sys":str, "args":str, "inout":str, 1:int);
    X_332:bat[:bte] := sql.delta(X_294:bat[:bte], X_301:bat[:oid], X_302:bat[:bte], X_112:bat[:bte]);
    X_336:bat[:bte] := algebra.projection(C_278:bat[:oid], X_332:bat[:bte]);
    C_348:bat[:oid] := algebra.thetaselect(X_336:bat[:bte], 1:bte, "==":str);
    X_282:bat[:int] := sql.bind(X_4:int, "sys":str, "args":str, "func_id":str, 0:int, 3:int, 4:int);
    (X_289:bat[:oid], X_290:bat[:int]) := sql.bind(X_4:int, "sys":str, "args":str, "func_id":str, 2:int, 3:int, 4:int);
    X_105:bat[:int] := sql.bind(X_4:int, "sys":str, "args":str, "func_id":str, 1:int);
    X_324:bat[:int] := sql.delta(X_282:bat[:int], X_289:bat[:oid], X_290:bat[:int], X_105:bat[:int]);
    X_352:bat[:int] := algebra.projectionpath(C_348:bat[:oid], C_278:bat[:oid], X_324:bat[:int]);
    (X_367:bat[:oid], X_368:bat[:oid]) := algebra.join(X_79:bat[:int], X_352:bat[:int], nil:BAT, nil:BAT, false:bit, nil:lng);
    X_389:bat[:oid] := mat.packIncrement(X_361:bat[:oid], 4:int);
    X_391:bat[:oid] := mat.packIncrement(X_389:bat[:oid], X_363:bat[:oid]);
    X_392:bat[:oid] := mat.packIncrement(X_391:bat[:oid], X_365:bat[:oid]);
    X_131:bat[:oid] := mat.packIncrement(X_392:bat[:oid], X_367:bat[:oid]);
    X_139:bat[:int] := algebra.projection(X_131:bat[:oid], X_79:bat[:int]);
    X_137:bat[:oid] := bat.mirror(X_79:bat[:int]);
    X_138:bat[:oid] := algebra.difference(X_137:bat[:oid], X_131:bat[:oid], nil:BAT, nil:BAT, false:bit, nil:lng);
    X_311:bat[:int] := sql.bind(X_4:int, "sys":str, "args":str, "number":str, 0:int, 3:int, 4:int);
    (X_318:bat[:oid], X_319:bat[:int]) := sql.bind(X_4:int, "sys":str, "args":str, "number":str, 2:int, 3:int, 4:int);
    X_119:bat[:int] := sql.bind(X_4:int, "sys":str, "args":str, "number":str, 1:int);
    X_340:bat[:int] := sql.delta(X_311:bat[:int], X_318:bat[:oid], X_319:bat[:int], X_119:bat[:int]);
    X_309:bat[:int] := sql.bind(X_4:int, "sys":str, "args":str, "number":str, 0:int, 2:int, 4:int);
    (X_316:bat[:oid], X_317:bat[:int]) := sql.bind(X_4:int, "sys":str, "args":str, "number":str, 2:int, 2:int, 4:int);
    X_339:bat[:int] := sql.delta(X_309:bat[:int], X_316:bat[:oid], X_317:bat[:int]);
    X_307:bat[:int] := sql.bind(X_4:int, "sys":str, "args":str, "number":str, 0:int, 1:int, 4:int);
    (X_314:bat[:oid], X_315:bat[:int]) := sql.bind(X_4:int, "sys":str, "args":str, "number":str, 2:int, 1:int, 4:int);
    X_338:bat[:int] := sql.delta(X_307:bat[:int], X_314:bat[:oid], X_315:bat[:int]);
    X_305:bat[:int] := sql.bind(X_4:int, "sys":str, "args":str, "number":str, 0:int, 0:int, 4:int);
    (X_312:bat[:oid], X_313:bat[:int]) := sql.bind(X_4:int, "sys":str, "args":str, "number":str, 2:int, 0:int, 4:int);
    X_337:bat[:int] := sql.delta(X_305:bat[:int], X_312:bat[:oid], X_313:bat[:int]);
    X_142:bat[:int] := bat.append(X_140:bat[:int], X_139:bat[:int], true:bit);
    X_144:bat[:int] := algebra.projection(X_138:bat[:oid], X_79:bat[:int]);
    X_145:bat[:int] := bat.append(X_142:bat[:int], X_144:bat[:int], true:bit);
    X_181:bat[:int] := bat.new(nil:int);
    X_377:bat[:int] := algebra.projectionpath(X_362:bat[:oid], C_345:bat[:oid], C_272:bat[:oid], X_337:bat[:int]);
    X_378:bat[:int] := algebra.projectionpath(X_364:bat[:oid], C_346:bat[:oid], C_274:bat[:oid], X_338:bat[:int]);
    X_379:bat[:int] := algebra.projectionpath(X_366:bat[:oid], C_347:bat[:oid], C_276:bat[:oid], X_339:bat[:int]);
    X_380:bat[:int] := algebra.projectionpath(X_368:bat[:oid], C_348:bat[:oid], C_278:bat[:oid], X_340:bat[:int]);
    X_394:bat[:int] := mat.packIncrement(X_377:bat[:int], 4:int);
    X_395:bat[:int] := mat.packIncrement(X_394:bat[:int], X_378:bat[:int]);
    X_396:bat[:int] := mat.packIncrement(X_395:bat[:int], X_379:bat[:int]);
    X_180:bat[:int] := mat.packIncrement(X_396:bat[:int], X_380:bat[:int]);
    X_183:bat[:int] := bat.append(X_181:bat[:int], X_180:bat[:int], true:bit);
    X_185:bat[:int] := algebra.project(X_138:bat[:oid], nil:int);
    X_186:bat[:int] := bat.append(X_183:bat[:int], X_185:bat[:int], true:bit);
    (X_187:bat[:int], X_188:bat[:oid], X_189:bat[:oid]) := algebra.sort(X_145:bat[:int], true:bit, false:bit);
    (X_191:bat[:int], X_192:bat[:oid], X_193:bat[:oid]) := algebra.sort(X_186:bat[:int], X_188:bat[:oid], X_189:bat[:oid], false:bit, false:bit);
    X_195:bat[:int] := algebra.projection(X_192:bat[:oid], X_186:bat[:int]);
    X_194:bat[:int] := algebra.projection(X_192:bat[:oid], X_145:bat[:int]);
    (X_196:bat[:int], X_197:bat[:oid], X_198:bat[:oid]) := algebra.sort(X_194:bat[:int], true:bit, false:bit);
    (X_199:bat[:int], X_200:bat[:oid], X_201:bat[:oid]) := algebra.sort(X_195:bat[:int], X_197:bat[:oid], X_198:bat[:oid], true:bit, false:bit);
    X_203:bat[:int] := algebra.projection(X_200:bat[:oid], X_195:bat[:int]);
    X_202:bat[:int] := algebra.projection(X_200:bat[:oid], X_194:bat[:int]);
    (X_204:bat[:int], X_205:bat[:oid], X_206:bat[:oid]) := algebra.sort(X_202:bat[:int], false:bit, false:bit);
    (X_207:bat[:int], X_208:bat[:oid], X_209:bat[:oid]) := algebra.sort(X_203:bat[:int], X_205:bat[:oid], X_206:bat[:oid], false:bit, false:bit);
    X_210:bat[:int] := algebra.projection(X_208:bat[:oid], X_202:bat[:int]);
    X_213:bat[:bit] := batsql.diff(X_210:bat[:int]);
    X_211:bat[:int] := algebra.projection(X_208:bat[:oid], X_203:bat[:int]);
    X_216:bat[:bit] := batsql.diff(X_213:bat[:bit], X_211:bat[:int]);
    X_217:bat[:int] := batsql.row_number(X_210:bat[:int], false:bit, X_216:bat[:bit]);
    (X_219:bat[:int], X_220:bat[:oid], X_221:bat[:oid]) := algebra.sort(X_217:bat[:int], false:bit, false:bit);
    X_222:bat[:int] := algebra.projection(X_220:bat[:oid], X_210:bat[:int]);
    X_224:lng := aggr.count(X_222:bat[:int]);
    language.pass(C_5:bat[:oid]);
    language.pass(X_33:bat[:oid]);
    language.pass(X_17:bat[:int]);
    language.pass(X_65:bat[:oid]);
    language.pass(X_52:bat[:int]);
    language.pass(X_131:bat[:oid]);
    language.pass(X_79:bat[:int]);
    language.pass(C_345:bat[:oid]);
    language.pass(C_272:bat[:oid]);
    language.pass(C_346:bat[:oid]);
    language.pass(C_274:bat[:oid]);
    language.pass(C_347:bat[:oid]);
    language.pass(C_276:bat[:oid]);
    language.pass(C_348:bat[:oid]);
    language.pass(C_278:bat[:oid]);
    language.pass(X_138:bat[:oid]);
    language.pass(X_186:bat[:int]);
    language.pass(X_192:bat[:oid]);
    language.pass(X_145:bat[:int]);
    language.pass(X_195:bat[:int]);
    language.pass(X_200:bat[:oid]);
    language.pass(X_194:bat[:int]);
    language.pass(X_202:bat[:int]);
    language.pass(X_208:bat[:oid]);
    language.pass(X_203:bat[:int]);
    language.pass(X_210:bat[:int]);
exit X_399:bit;
    sql.resultSet(".L47":str, "L46":str, "bigint":str, 64:int, 0:int, 7:int, X_224:lng);
end user.s4_1;
#inline               actions= 0 time=5 usec 
#remap                actions= 3 time=36 usec 
#costmodel            actions= 1 time=7 usec 
#coercion             actions= 6 time=40 usec 
#evaluate             actions= 0 time=31 usec 
#emptybind            actions= 0 time=2 usec 
#pushselect           actions= 0 time=7 usec 
#aliases              actions= 0 time=1 usec 
#mitosis              actions=1 time=135 usec 
#mergetable           actions=14 time=526 usec 
#deadcode             actions=74 time=101 usec 
#aliases              actions= 0 time=1 usec 
#constants            actions=23 time=39 usec 
#commonTerms          actions= 0 time=57 usec 
#projectionpath       actions=14 time=90 usec 
#deadcode             actions=14 time=64 usec 
#reorder              actions= 1 time=176 usec 
#matpack              actions= 2 time=36 usec 
#dataflow             actions= 1 time=156 usec 
#multiplex            actions= 0 time=7 usec 
#profiler             actions=1 time=8 usec 
#candidates           actions=1 time=5 usec 
#deadcode             actions= 0 time=66 usec 
#wlc                  actions= 0 time=1 usec 
#garbagecollector     actions= 1 time=384 usec 
#total                actions=28 time=2300 usec 
#select count (*) from sys.commented_function_signatures;
% .L47 # table_name
% L46 # name
% bigint # type
% 1 # length
[ 0	]

# 18:36:36 >  
# 18:36:36 >  "Done."
# 18:36:36 >  

