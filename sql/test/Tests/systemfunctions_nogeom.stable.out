stdout of test 'systemfunctions_nogeom` in directory 'sql/test` itself:


# 16:39:08 >  
# 16:39:08 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "gdk_dbfarm=/ufs/sjoerd/Monet-candidate/var/MonetDB" "--set" "mapi_open=true" "--set" "mapi_port=37784" "--set" "monet_prompt=" "--trace" "--forcemito" "--set" "mal_listing=2" "--dbname=mTests_." "--set" "mal_listing=0"
# 16:39:08 >  

# MonetDB 5 server v11.9.2 (hg id: 98699895d8d4+)
# This is an unreleased version
# Serving database 'mTests_.', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.629 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2013 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://madrid.ins.cwi.nl:37784/
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_history.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_compress.sql
# loading sql script: 18_dictionary.sql
# loading sql script: 19_cluster.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 39_analytics.sql
# loading sql script: 80_udf.sql
# loading sql script: 99_system.sql

# 16:39:08 >  
# 16:39:08 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=madrid" "--port=37784"
# 16:39:08 >  

#select s.name as "schema", f.name as "function", a.number as "argno", a.type as "argtype", case a.number when 0 then f.func else '' end as "definition" from sys.functions f, sys.schemas s, sys.args a where s.id = f.schema_id and f.id = a.func_id and f.id in (select * from sys.systemfunctions) order by s.name, f.name, f.id, a.number;
% sys.L3,	sys.L3,	sys.L3,	sys.L3,	sys.L3 # table_name
% schema,	function,	argno,	argtype,	definition # name
% varchar,	varchar,	int,	varchar,	varchar # type
% 3,	35,	1,	9,	1582 # length
[ "sys",	"abbrev",	0,	"clob",	"create function \"abbrev\" (p inet) returns clob\n\texternal name inet.\"abbrev\";"	]
[ "sys",	"abbrev",	1,	"inet",	""	]
[ "sys",	"alpha",	0,	"double",	"create function alpha(pdec double, pradius double)\nreturns double external name sql.alpha;"	]
[ "sys",	"alpha",	1,	"double",	""	]
[ "sys",	"alpha",	2,	"double",	""	]
[ "sys",	"bbp",	0,	"table",	"-- The BAT buffer pool overview\ncreate function bbp () \n\treturns table (id int, name string, htype string, \n\t\tttype string, count bigint, refcnt int, lrefcnt int, \n\t\tlocation string, heat int, dirty string, \n\t\tstatus string, kind string) \n\texternal name sql.bbp;"	]
[ "sys",	"broadcast",	0,	"inet",	"create function \"broadcast\" (p inet) returns inet \n\texternal name inet.\"broadcast\";"	]
[ "sys",	"broadcast",	1,	"inet",	""	]
[ "sys",	"clients",	0,	"table",	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Copyright August 2008-2013 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate function clients () \n\treturns table (\"user\" string, login string, lastcommand string,\n\t\t actions int, seconds bigint) \n\texternal name sql.clients;"	]
[ "sys",	"cluster1",	0,	"clob",	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Copyright August 2008-2013 MonetDB B.V.\n-- All Rights Reserved.\n\n-- Clustering a relational table should be done with care.\n-- For, the oid's are used in join-indices.\n\n-- Clustering of tables may improve IO performance\n-- The foreign key constraints should be dropped before\n-- and re-established after the cluster operation.\n\ncreate procedure cluster1(sys string, tab string)\n\texternal name sql.cluster1;"	]
[ "sys",	"cluster1",	1,	"clob",	""	]
[ "sys",	"cluster2",	0,	"clob",	"create procedure cluster2(sys string, tab string)\n\texternal name sql.cluster2;"	]
[ "sys",	"cluster2",	1,	"clob",	""	]
[ "sys",	"columnsize",	0,	"bigint",	"-- The predicted storage footprint of the complete database\n-- determines the amount of diskspace needed for persistent storage\n-- and the upperbound when all possible index structures are created.\n-- The storage requirement for foreign key joins is split amongst the participants.\n\ncreate function sys.columnsize(nme string, i bigint, d bigint)\nreturns bigint\nbegin\n\tcase\n\twhen nme = 'boolean' then return i;\n\twhen nme = 'char' then return 2*i;\n\twhen nme = 'smallint' then return 2 * i;\n\twhen nme = 'int'\t then return 4 * i;\n\twhen nme = 'bigint'\t then return 8 * i;\n\twhen nme = 'timestamp' then return 8 * i;\n\twhen  nme = 'varchar' then\n\t\tcase\n\t\twhen cast(d as bigint) << 8 then return i;\n\t\twhen cast(d as bigint) << 16 then return 2 * i;\n\t\twhen cast(d as bigint) << 32 then return 4 * i;\n\t\telse return 8 * i;\n\t\tend case;\n\telse return 8 * i;\n\tend case;\nend;"	]
[ "sys",	"columnsize",	1,	"clob",	""	]
[ "sys",	"columnsize",	2,	"bigint",	""	]
[ "sys",	"columnsize",	3,	"bigint",	""	]
[ "sys",	"corr",	0,	"tinyint",	"create aggregate corr(e1 tinyint, e2 tinyint) returns tinyint\n\texternal name \"aggr\".\"corr\";"	]
[ "sys",	"corr",	1,	"tinyint",	""	]
[ "sys",	"corr",	2,	"tinyint",	""	]
[ "sys",	"corr",	0,	"smallint",	"create aggregate corr(e1 smallint, e2 smallint) returns smallint\n\texternal name \"aggr\".\"corr\";"	]
[ "sys",	"corr",	1,	"smallint",	""	]
[ "sys",	"corr",	2,	"smallint",	""	]
[ "sys",	"corr",	0,	"int",	"create aggregate corr(e1 integer, e2 integer) returns integer\n\texternal name \"aggr\".\"corr\";"	]
[ "sys",	"corr",	1,	"int",	""	]
[ "sys",	"corr",	2,	"int",	""	]
[ "sys",	"corr",	0,	"wrd",	"create aggregate corr(e1 wrd, e2 wrd) returns wrd\n\texternal name \"aggr\".\"corr\";"	]
[ "sys",	"corr",	1,	"wrd",	""	]
[ "sys",	"corr",	2,	"wrd",	""	]
[ "sys",	"corr",	0,	"bigint",	"create aggregate corr(e1 bigint, e2 bigint) returns bigint\n\texternal name \"aggr\".\"corr\";"	]
[ "sys",	"corr",	1,	"bigint",	""	]
[ "sys",	"corr",	2,	"bigint",	""	]
[ "sys",	"corr",	0,	"real",	"create aggregate corr(e1 real, e2 real) returns real\n\texternal name \"aggr\".\"corr\";"	]
[ "sys",	"corr",	1,	"real",	""	]
[ "sys",	"corr",	2,	"real",	""	]
[ "sys",	"corr",	0,	"double",	"create aggregate corr(e1 double, e2 double) returns double\n\texternal name \"aggr\".\"corr\";"	]
[ "sys",	"corr",	1,	"double",	""	]
[ "sys",	"corr",	2,	"double",	""	]
[ "sys",	"date_to_str",	0,	"clob",	"create function date_to_str(d date, format string) returns string\n\texternal name mtime.\"date_to_str\";"	]
[ "sys",	"date_to_str",	1,	"date",	""	]
[ "sys",	"date_to_str",	2,	"clob",	""	]
[ "sys",	"db_users",	0,	"table",	"CREATE FUNCTION db_users () RETURNS TABLE( name varchar(2048)) EXTERNAL NAME sql.db_users;"	]
[ "sys",	"degrees",	0,	"double",	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Copyright August 2008-2013 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate function degrees(r double) \nreturns double\n\treturn r*180/pi();"	]
[ "sys",	"degrees",	1,	"double",	""	]
[ "sys",	"dependencies_columns_on_functions",	0,	"table",	"--Column c has a dependency on function f\ncreate function dependencies_columns_on_functions()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select c.name, f.name, 'DEP_FUNC' from functions as f, columns as c, dependencies as dep where c.id = dep.id and f.id = dep.depend_id and dep.depend_type = 7);"	]
[ "sys",	"dependencies_columns_on_indexes",	0,	"table",	"--Column c has a dependency on index i \ncreate function dependencies_columns_on_indexes()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select c.name, i.name, 'DEP_INDEX' from columns as c, objects as kc, idxs as i where kc.\"name\" = c.name and kc.id = i.id and c.table_id = i.table_id and i.name not in (select name from keys));"	]
[ "sys",	"dependencies_columns_on_keys",	0,	"table",	"--Column c has a dependency on key k\ncreate function dependencies_columns_on_keys()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select c.name, k.name, 'DEP_KEY' from columns as c, objects as kc, keys as k where kc.\"name\" = c.name and kc.id = k.id and k.table_id = c.table_id and k.rkey = -1);"	]
[ "sys",	"dependencies_columns_on_triggers",	0,	"table",	"--Column c has a dependency on trigger tri\ncreate function dependencies_columns_on_triggers()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select c.name, tri.name, 'DEP_TRIGGER' from columns as c, triggers as tri, dependencies as dep where dep.id = c.id and dep.depend_id =tri.id and dep.depend_type = 8);"	]
[ "sys",	"dependencies_columns_on_views",	0,	"table",	"--Column c has a dependency on view v\ncreate function dependencies_columns_on_views()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select c.name, v.name, 'DEP_VIEW' from columns as c, tables as v, dependencies as dep where c.id = dep.id and v.id = dep.depend_id and dep.depend_type = 5 and v.type = 1);"	]
[ "sys",	"dependencies_functions_on_functions",	0,	"table",	"--Function f1 has a dependency on function f2\ncreate function dependencies_functions_on_functions()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select f1.name, f2.name, 'DEP_FUNC' from functions as f1, functions as f2, dependencies as dep where f1.id = dep.id and f2.id = dep.depend_id and dep.depend_type = 7);"	]
[ "sys",	"dependencies_functions_os_triggers",	0,	"table",	"--Function f1 has a dependency on trigger tri\ncreate function dependencies_functions_os_triggers()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select f.name, tri.name, 'DEP_TRIGGER' from functions as f, triggers as tri, dependencies as dep where dep.id = f.id and dep.depend_id =tri.id and dep.depend_type = 8);"	]
[ "sys",	"dependencies_keys_on_foreignkeys",	0,	"table",	"--Key k has a dependency on foreign key fk\ncreate function dependencies_keys_on_foreignkeys()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select k.name, fk.name, 'DEP_FKEY' from keys as k, keys as fk where fk.rkey = k.id);"	]
[ "sys",	"dependencies_owners_on_schemas",	0,	"table",	"--User (owner) has a dependency in schema s\ncreate function dependencies_owners_on_schemas()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select a.name, s.name, 'DEP_SCHEMA' from schemas as s, auths a where s.owner = a.id);"	]
[ "sys",	"dependencies_schemas_on_users",	0,	"table",	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Copyright August 2008-2013 MonetDB B.V.\n-- All Rights Reserved.\n\n--Schema s has a dependency on user u\ncreate function dependencies_schemas_on_users()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select s.name, u.name, 'DEP_USER' from schemas as s, users u where u.default_schema = s.id);"	]
[ "sys",	"dependencies_tables_on_foreignkeys",	0,	"table",	"--Table t has a dependency on foreign key k\ncreate function dependencies_tables_on_foreignkeys()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select t.name, fk.name, 'DEP_FKEY' from tables as t, keys as k, keys as fk where fk.rkey = k.id and k.table_id = t.id);"	]
[ "sys",	"dependencies_tables_on_functions",	0,	"table",	"--Table t has a dependency on function f\ncreate function dependencies_tables_on_functions()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select t.name, f.name, 'DEP_FUNC' from functions as f, tables as t, dependencies as dep where t.id = dep.id and f.id = dep.depend_id and dep.depend_type = 7 and t.type = 0);"	]
[ "sys",	"dependencies_tables_on_indexes",	0,	"table",	"--Table t has a dependency on index  i\ncreate function dependencies_tables_on_indexes()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select t.name, i.name, 'DEP_INDEX' from tables as t, idxs as i where i.table_id = t.id and i.name not in (select name from keys) and t.type = 0);"	]
[ "sys",	"dependencies_tables_on_triggers",	0,	"table",	"--Table t has a dependency on trigger tri\n\ncreate function dependencies_tables_on_triggers()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table ((select t.name, tri.name, 'DEP_TRIGGER' from tables as t, triggers as tri where tri.table_id = t.id) union (select t.name, tri.name, 'DEP_TRIGGER' from triggers tri, tables t, dependencies dep where dep.id = t.id and dep.depend_id =tri.id and dep.depend_type = 8));"	]
[ "sys",	"dependencies_tables_on_views",	0,	"table",	"--Table t has a dependency on view v\ncreate function dependencies_tables_on_views()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select t.name, v.name, 'DEP_VIEW' from tables as t, tables as v, dependencies as dep where t.id = dep.id and v.id = dep.depend_id and dep.depend_type = 5 and v.type = 1);"	]
[ "sys",	"dependencies_views_on_functions",	0,	"table",	"--View v has a dependency on function f\ncreate function dependencies_views_on_functions()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select v.name, f.name, 'DEP_FUNC' from functions as f, tables as v, dependencies as dep where v.id = dep.id and f.id = dep.depend_id and dep.depend_type = 7 and v.type = 1);"	]
[ "sys",	"dependencies_views_on_triggers",	0,	"table",	"--View v has a dependency on trigger tri\ncreate function dependencies_views_on_triggers()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select v.name, tri.name, 'DEP_TRIGGER' from tables as v, triggers as tri, dependencies as dep where dep.id = v.id and dep.depend_id =tri.id and dep.depend_type = 8 and v.type = 1);"	]
[ "sys",	"dropdictionary",	0,	"clob",	"create procedure dropdictionary (s string, t string)\n    external name sql.dropdictionary;"	]
[ "sys",	"dropdictionary",	1,	"clob",	""	]
[ "sys",	"env",	0,	"table",	"CREATE FUNCTION env () RETURNS TABLE( name varchar(1024), value varchar(2048)) EXTERNAL NAME sql.sql_environment;"	]
[ "sys",	"environment",	0,	"table",	"-- The environment table\ncreate function environment()\n\treturns table (\"name\" string, value string)\n\texternal name sql.sql_environment;"	]
[ "sys",	"evalalgebra",	0,	"clob",	"create procedure evalalgebra( ra_stmt string, opt bool)\n\texternal name sql.\"evalAlgebra\";"	]
[ "sys",	"evalalgebra",	1,	"boolean",	""	]
[ "sys",	"fuse",	0,	"smallint",	"-- fuse two (1-byte) tinyint values into one (2-byte) smallint value\ncreate function fuse(one tinyint, two tinyint)\nreturns smallint external name udf.fuse;"	]
[ "sys",	"fuse",	1,	"tinyint",	""	]
[ "sys",	"fuse",	2,	"tinyint",	""	]
[ "sys",	"fuse",	0,	"int",	"-- fuse two (2-byte) smallint values into one (4-byte) integer value\ncreate function fuse(one smallint, two smallint)\nreturns integer external name udf.fuse;"	]
[ "sys",	"fuse",	1,	"smallint",	""	]
[ "sys",	"fuse",	2,	"smallint",	""	]
[ "sys",	"fuse",	0,	"bigint",	"-- fuse two (4-byte) integer values into one (8-byte) bigint value\ncreate function fuse(one integer, two integer)\nreturns bigint external name udf.fuse;"	]
[ "sys",	"fuse",	1,	"int",	""	]
[ "sys",	"fuse",	2,	"int",	""	]
[ "sys",	"getanchor",	0,	"clob",	"create function getanchor( theurl url ) returns string \n\texternal name url.\"getAnchor\";"	]
[ "sys",	"getanchor",	1,	"url",	""	]
[ "sys",	"getbasename",	0,	"clob",	"create function getbasename(theurl url) returns string       \n\texternal name url.\"getBasename\";"	]
[ "sys",	"getbasename",	1,	"url",	""	]
[ "sys",	"getcontent",	0,	"clob",	"create function getcontent(theurl url)   returns string       \n\texternal name url.\"getContent\";"	]
[ "sys",	"getcontent",	1,	"url",	""	]
[ "sys",	"getcontext",	0,	"clob",	"create function getcontext(theurl url)   returns string       \n\texternal name url.\"getContext\";"	]
[ "sys",	"getcontext",	1,	"url",	""	]
[ "sys",	"getdomain",	0,	"clob",	"create function getdomain(theurl url) returns string       \n\texternal name url.\"getDomain\";"	]
[ "sys",	"getdomain",	1,	"url",	""	]
[ "sys",	"getextension",	0,	"clob",	"create function getextension(theurl url) returns string       \n\texternal name url.\"getExtension\";"	]
[ "sys",	"getextension",	1,	"url",	""	]
[ "sys",	"getfile",	0,	"clob",	"create function getfile(theurl url) returns string       \n\texternal name url.\"getFile\";"	]
[ "sys",	"getfile",	1,	"url",	""	]
[ "sys",	"gethost",	0,	"clob",	"create function gethost(theurl url)   returns string       \n\texternal name url.\"getHost\";"	]
[ "sys",	"gethost",	1,	"url",	""	]
[ "sys",	"getport",	0,	"clob",	"create function getport(theurl url) returns string       \n\texternal name url.\"getPort\";"	]
[ "sys",	"getport",	1,	"url",	""	]
[ "sys",	"getprotocol",	0,	"clob",	"create function getprotocol(theurl url) returns string       \n\texternal name url.\"getProtocol\";"	]
[ "sys",	"getprotocol",	1,	"url",	""	]
[ "sys",	"getquery",	0,	"clob",	"create function getquery(theurl url) returns string       \n\texternal name url.\"getQuery\";"	]
[ "sys",	"getquery",	1,	"url",	""	]
[ "sys",	"getroboturl",	0,	"clob",	"create function getroboturl(theurl url) returns string       \n\texternal name url.\"getRobotURL\";"	]
[ "sys",	"getroboturl",	1,	"url",	""	]
[ "sys",	"getuser",	0,	"clob",	"create function getuser(theurl url) returns string       \n\texternal name url.\"getUser\";"	]
[ "sys",	"getuser",	1,	"url",	""	]
[ "sys",	"gzcompress",	0,	"clob",	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Copyright August 2008-2013 MonetDB B.V.\n-- All Rights Reserved.\n\n-- Perform LZ-compression over a specific table;\ncreate procedure gzcompress (s string, t string)\n    external name sql.gzcompress;"	]
[ "sys",	"gzcompress",	1,	"clob",	""	]
[ "sys",	"gzdecompress",	0,	"clob",	"create procedure gzdecompress (s string, t string)\n    external name sql.gzdecompress;"	]
[ "sys",	"gzdecompress",	1,	"clob",	""	]
[ "sys",	"gzexpand",	0,	"clob",	"-- Remove the compressed images\ncreate procedure gzexpand (s string, t string)\n    external name sql.gzexpand;"	]
[ "sys",	"gzexpand",	1,	"clob",	""	]
[ "sys",	"gztruncate",	0,	"clob",	"-- Truncate the storage for columns with a compressed image\ncreate procedure gztruncate (s string, t string)\n    external name sql.gztruncate;"	]
[ "sys",	"gztruncate",	1,	"clob",	""	]
[ "sys",	"heapsize",	0,	"bigint",	"create function sys.heapsize(tpe string, i bigint, w int)\nreturns bigint\nbegin\n\tif  tpe <> 'varchar' and tpe <> 'clob'\n\tthen\n\t\treturn 0;\n\tend if;\n\treturn 10240 + i * w;\nend;"	]
[ "sys",	"heapsize",	1,	"clob",	""	]
[ "sys",	"heapsize",	2,	"bigint",	""	]
[ "sys",	"heapsize",	3,	"int",	""	]
[ "sys",	"host",	0,	"clob",	"create function \"host\" (p inet) returns clob\n\texternal name inet.\"host\";"	]
[ "sys",	"host",	1,	"inet",	""	]
[ "sys",	"hostmask",	0,	"inet",	"create function \"hostmask\" (p inet) returns inet\n\texternal name inet.\"hostmask\";"	]
[ "sys",	"hostmask",	1,	"inet",	""	]
[ "sys",	"ilike",	0,	"clob",	"create filter function \"ilike\"(val string, pat string, esc string) external name algebra.ilikesubselect;"	]
[ "sys",	"ilike",	1,	"clob",	""	]
[ "sys",	"ilike",	2,	"clob",	""	]
[ "sys",	"indexsize",	0,	"bigint",	"create function sys.indexsize(b boolean, i bigint)\nreturns bigint\nbegin\n\t-- assume non-compound keys\n\tif  b = true\n\tthen\n\t\treturn 8 * i;\n\tend if;\n\treturn 0;\nend;"	]
[ "sys",	"indexsize",	1,	"boolean",	""	]
[ "sys",	"indexsize",	2,	"bigint",	""	]
[ "sys",	"isaurl",	0,	"boolean",	"create function isaurl(theurl url) returns bool\n\texternal name url.\"isaURL\";"	]
[ "sys",	"isaurl",	1,	"url",	""	]
[ "sys",	"keepcall",	0,	"wrd",	"-- the signature is used in the kernel, don't change it\ncreate procedure keepcall(\n\tid wrd, \t\t\t-- references query plan\n\tctime timestamp,\t-- time the first statement was executed\n\targuments string,\n\txtime bigint,\t\t-- time from the first statement until result export\n\trtime bigint,\t\t-- time to ship the result to the client\n\tfoot bigint, \t\t-- footprint for all bats in the plan\n\tmemory bigint,\t\t-- storage size of intermediates created\n\ttuples wrd,\t\t\t-- number of tuples in the result set\n\tinblock bigint,\t\t-- number of physical blocks read\n\toublock bigint\t\t-- number of physical blocks written\n)\nbegin\n\tinsert into callhistory\n\tvalues( id, ctime, arguments, xtime, rtime, \n\t\tfoot, memory, tuples, inblock, oublock );\nend;"	]
[ "sys",	"keepcall",	1,	"timestamp",	""	]
[ "sys",	"keepcall",	2,	"clob",	""	]
[ "sys",	"keepcall",	3,	"bigint",	""	]
[ "sys",	"keepcall",	4,	"bigint",	""	]
[ "sys",	"keepcall",	5,	"bigint",	""	]
[ "sys",	"keepcall",	6,	"bigint",	""	]
[ "sys",	"keepcall",	7,	"wrd",	""	]
[ "sys",	"keepcall",	8,	"bigint",	""	]
[ "sys",	"keepcall",	9,	"bigint",	""	]
[ "sys",	"keepquery",	0,	"wrd",	"-- the signature is used in the kernel, don't change it\ncreate procedure keepquery(\n\ti wrd,\n\tquery string,\n\tparse bigint,\n\toptimize bigint) \nbegin\n\tinsert into queryhistory\n\tvalues(i, now(), user, query, parse, optimize);\nend;"	]
[ "sys",	"keepquery",	1,	"clob",	""	]
[ "sys",	"keepquery",	2,	"bigint",	""	]
[ "sys",	"keepquery",	3,	"bigint",	""	]
[ "sys",	"like",	0,	"clob",	"create filter function \"like\"(val string, pat string, esc string) external name algebra.likesubselect;"	]
[ "sys",	"like",	1,	"clob",	""	]
[ "sys",	"like",	2,	"clob",	""	]
[ "sys",	"masklen",	0,	"int",	"create function \"masklen\" (p inet) returns int\n\texternal name inet.\"masklen\";"	]
[ "sys",	"masklen",	1,	"inet",	""	]
[ "sys",	"median",	0,	"tinyint",	"create aggregate median(val tinyint) returns tinyint\n\texternal name \"aggr\".\"median\";"	]
[ "sys",	"median",	1,	"tinyint",	""	]
[ "sys",	"median",	0,	"smallint",	"create aggregate median(val smallint) returns smallint\n\texternal name \"aggr\".\"median\";"	]
[ "sys",	"median",	1,	"smallint",	""	]
[ "sys",	"median",	0,	"int",	"create aggregate median(val integer) returns integer\n\texternal name \"aggr\".\"median\";"	]
[ "sys",	"median",	1,	"int",	""	]
[ "sys",	"median",	0,	"wrd",	"create aggregate median(val wrd) returns wrd\n\texternal name \"aggr\".\"median\";"	]
[ "sys",	"median",	1,	"wrd",	""	]
[ "sys",	"median",	0,	"bigint",	"create aggregate median(val bigint) returns bigint\n\texternal name \"aggr\".\"median\";"	]
[ "sys",	"median",	1,	"bigint",	""	]
[ "sys",	"median",	0,	"real",	"create aggregate median(val real) returns real\n\texternal name \"aggr\".\"median\";"	]
[ "sys",	"median",	1,	"real",	""	]
[ "sys",	"median",	0,	"double",	"create aggregate median(val double) returns double\n\texternal name \"aggr\".\"median\";"	]
[ "sys",	"median",	1,	"double",	""	]
[ "sys",	"median",	0,	"date",	"create aggregate median(val date) returns date\n\texternal name \"aggr\".\"median\";"	]
[ "sys",	"median",	1,	"date",	""	]
[ "sys",	"median",	0,	"time",	"create aggregate median(val time) returns time\n\texternal name \"aggr\".\"median\";"	]
[ "sys",	"median",	1,	"time",	""	]
[ "sys",	"median",	0,	"timestamp",	"create aggregate median(val timestamp) returns timestamp\n\texternal name \"aggr\".\"median\";"	]
[ "sys",	"median",	1,	"timestamp",	""	]
[ "sys",	"ms_round",	0,	"double",	"create function ms_round(num double, prc int, truncat int)\nreturns double\nbegin\n\tif (truncat = 0)\n\t\tthen return round(num, prc);\n\t\telse return ms_trunc(num, prc);\n\tend if;\nend;"	]
[ "sys",	"ms_round",	1,	"double",	""	]
[ "sys",	"ms_round",	2,	"int",	""	]
[ "sys",	"ms_round",	3,	"int",	""	]
[ "sys",	"ms_str",	0,	"clob",	"create function ms_str(num float, prc int, truncat int)\nreturns string\nbegin\n        return cast(num as string);\nend;"	]
[ "sys",	"ms_str",	1,	"double",	""	]
[ "sys",	"ms_str",	2,	"int",	""	]
[ "sys",	"ms_str",	3,	"int",	""	]
[ "sys",	"ms_stuff",	0,	"varchar",	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Copyright August 2008-2013 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate function ms_stuff( s1 varchar(32), st int, len int, s3 varchar(32))\nreturns varchar(32)\nbegin\n\tdeclare res varchar(32), aux varchar(32);\n\tdeclare ofset int;\n\n    if ( st < 0 or st > length(s1))\n        then return '';\n    end if;\n\n    set ofset = 1;\n    set res = substring(s1,ofset,st-1);\n    set res = res || s3;\n    set ofset = st + len;\n    set aux = substring(s1,ofset,length(s1)-ofset+1);\n\tset res = res || aux;\n\treturn res;\nend;"	]
[ "sys",	"ms_stuff",	1,	"varchar",	""	]
[ "sys",	"ms_stuff",	2,	"int",	""	]
[ "sys",	"ms_stuff",	3,	"int",	""	]
[ "sys",	"ms_stuff",	4,	"varchar",	""	]
[ "sys",	"ms_trunc",	0,	"double",	"create function ms_trunc(num double, prc int)\nreturns double\nexternal name sql.ms_trunc;"	]
[ "sys",	"ms_trunc",	1,	"double",	""	]
[ "sys",	"ms_trunc",	2,	"int",	""	]
[ "sys",	"netmask",	0,	"inet",	"create function \"netmask\" (p inet) returns inet\n\texternal name inet.\"netmask\";"	]
[ "sys",	"netmask",	1,	"inet",	""	]
[ "sys",	"network",	0,	"inet",	"create function \"network\" (p inet) returns inet\n\texternal name inet.\"network\";"	]
[ "sys",	"network",	1,	"inet",	""	]
[ "sys",	"newdictionary",	0,	"clob",	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Copyright August 2008-2013 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate procedure newdictionary (s string, t string)\n    external name sql.newdictionary;"	]
[ "sys",	"newdictionary",	1,	"clob",	""	]
[ "sys",	"newurl",	0,	"url",	"create function newurl(protocol string, hostname string, \"port\" int, file string) \n\treturns url       \n\texternal name url.\"new\";"	]
[ "sys",	"newurl",	1,	"clob",	""	]
[ "sys",	"newurl",	2,	"clob",	""	]
[ "sys",	"newurl",	3,	"int",	""	]
[ "sys",	"newurl",	4,	"clob",	""	]
[ "sys",	"newurl",	0,	"url",	"create function newurl(protocol string, hostname string, file string) \n\treturns url \n\texternal name url.\"new\";"	]
[ "sys",	"newurl",	1,	"clob",	""	]
[ "sys",	"newurl",	2,	"clob",	""	]
[ "sys",	"newurl",	3,	"clob",	""	]
[ "sys",	"optimizer_stats",	0,	"table",	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Copyright August 2008-2013 MonetDB B.V.\n-- All Rights Reserved.\n\n-- show the optimizer statistics maintained by the SQL frontend\ncreate function optimizer_stats () \n\treturns table (rewrite string, count int) \n\texternal name sql.dump_opt_stats;"	]
[ "sys",	"optimizers",	0,	"table",	"-- MONETDB KERNEL SECTION\n-- optimizer pipe catalog\ncreate function optimizers () \n\treturns table (name string, def string, status string)\n\texternal name sql.optimizers;"	]
[ "sys",	"password_hash",	0,	"clob",	"create function password_hash (username string) \n\treturns string \n\texternal name sql.password;"	]
[ "sys",	"password_hash",	1,	"clob",	""	]
[ "sys",	"querycache",	0,	"table",	"-- SQL QUERY CACHE\n-- The SQL query cache returns a table with the query plans kept\n\ncreate function querycache() \n\treturns table (query string, count int) \n\texternal name sql.dump_cache;"	]
[ "sys",	"querylog",	0,	"clob",	"-- Trace the SQL input\ncreate procedure querylog(filename string) \n\texternal name sql.logfile;"	]
[ "sys",	"radians",	0,	"double",	"create function radians(d double) \nreturns double\n\treturn d*pi()/180;"	]
[ "sys",	"radians",	1,	"double",	""	]
[ "sys",	"reuse",	0,	"clob",	"create procedure reuse(sys string, tab string)\n\texternal name sql.reuse;"	]
[ "sys",	"reuse",	1,	"clob",	""	]
[ "sys",	"reverse",	0,	"clob",	"/*\nThe contents of this file are subject to the MonetDB Public License\nVersion 1.1 (the \"License\"); you may not use this file except in\ncompliance with the License. You may obtain a copy of the License at\nhttp://www.monetdb.org/Legal/MonetDBLicense\n\nSoftware distributed under the License is distributed on an \"AS IS\"\nbasis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\nLicense for the specific language governing rights and limitations\nunder the License.\n\nThe Original Code is the MonetDB Database System.\n\nThe Initial Developer of the Original Code is CWI.\nPortions created by CWI are Copyright (C) 1997-July 2008 CWI.\nCopyright August 2008-2013 MonetDB B.V.\nAll Rights Reserved.\n*/\n\n\n-- add function signatures to SQL catalog\n\n\n-- Reverse a string\ncreate function reverse(src string)\nreturns string external name udf.reverse;"	]
[ "sys",	"reverse",	1,	"clob",	""	]
[ "sys",	"setmasklen",	0,	"inet",	"create function \"setmasklen\" (p inet, mask int) returns inet\n\texternal name inet.\"setmasklen\";"	]
[ "sys",	"setmasklen",	1,	"inet",	""	]
[ "sys",	"setmasklen",	2,	"int",	""	]
[ "sys",	"shrink",	0,	"clob",	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Copyright August 2008-2013 MonetDB B.V.\n-- All Rights Reserved.\n\n-- Vacuum a relational table should be done with care.\n-- For, the oid's are used in join-indices.\n\n-- Vacuum of tables may improve IO performance and disk footprint.\n-- The foreign key constraints should be dropped before\n-- and re-established after the cluster operation.\n\ncreate procedure shrink(sys string, tab string)\n\texternal name sql.shrink;"	]
[ "sys",	"shrink",	1,	"clob",	""	]
[ "sys",	"stddev_pop",	0,	"double",	"create aggregate stddev_pop(val tinyint) returns double\n\texternal name \"aggr\".\"stdevp\";"	]
[ "sys",	"stddev_pop",	1,	"tinyint",	""	]
[ "sys",	"stddev_pop",	0,	"double",	"create aggregate stddev_pop(val smallint) returns double\n\texternal name \"aggr\".\"stdevp\";"	]
[ "sys",	"stddev_pop",	1,	"smallint",	""	]
[ "sys",	"stddev_pop",	0,	"double",	"create aggregate stddev_pop(val integer) returns double\n\texternal name \"aggr\".\"stdevp\";"	]
[ "sys",	"stddev_pop",	1,	"int",	""	]
[ "sys",	"stddev_pop",	0,	"double",	"create aggregate stddev_pop(val wrd) returns double\n\texternal name \"aggr\".\"stdevp\";"	]
[ "sys",	"stddev_pop",	1,	"wrd",	""	]
[ "sys",	"stddev_pop",	0,	"double",	"create aggregate stddev_pop(val bigint) returns double\n\texternal name \"aggr\".\"stdevp\";"	]
[ "sys",	"stddev_pop",	1,	"bigint",	""	]
[ "sys",	"stddev_pop",	0,	"double",	"create aggregate stddev_pop(val real) returns double\n\texternal name \"aggr\".\"stdevp\";"	]
[ "sys",	"stddev_pop",	1,	"real",	""	]
[ "sys",	"stddev_pop",	0,	"double",	"create aggregate stddev_pop(val double) returns double\n\texternal name \"aggr\".\"stdevp\";"	]
[ "sys",	"stddev_pop",	1,	"double",	""	]
[ "sys",	"stddev_pop",	0,	"double",	"create aggregate stddev_pop(val date) returns double\n\texternal name \"aggr\".\"stdevp\";"	]
[ "sys",	"stddev_pop",	1,	"date",	""	]
[ "sys",	"stddev_pop",	0,	"double",	"create aggregate stddev_pop(val time) returns double\n\texternal name \"aggr\".\"stdevp\";"	]
[ "sys",	"stddev_pop",	1,	"time",	""	]
[ "sys",	"stddev_pop",	0,	"double",	"create aggregate stddev_pop(val timestamp) returns double\n\texternal name \"aggr\".\"stdevp\";"	]
[ "sys",	"stddev_pop",	1,	"timestamp",	""	]
[ "sys",	"stddev_samp",	0,	"double",	"create aggregate stddev_samp(val tinyint) returns double\n\texternal name \"aggr\".\"stdev\";"	]
[ "sys",	"stddev_samp",	1,	"tinyint",	""	]
[ "sys",	"stddev_samp",	0,	"double",	"create aggregate stddev_samp(val smallint) returns double\n\texternal name \"aggr\".\"stdev\";"	]
[ "sys",	"stddev_samp",	1,	"smallint",	""	]
[ "sys",	"stddev_samp",	0,	"double",	"create aggregate stddev_samp(val integer) returns double\n\texternal name \"aggr\".\"stdev\";"	]
[ "sys",	"stddev_samp",	1,	"int",	""	]
[ "sys",	"stddev_samp",	0,	"double",	"create aggregate stddev_samp(val wrd) returns double\n\texternal name \"aggr\".\"stdev\";"	]
[ "sys",	"stddev_samp",	1,	"wrd",	""	]
[ "sys",	"stddev_samp",	0,	"double",	"create aggregate stddev_samp(val bigint) returns double\n\texternal name \"aggr\".\"stdev\";"	]
[ "sys",	"stddev_samp",	1,	"bigint",	""	]
[ "sys",	"stddev_samp",	0,	"double",	"create aggregate stddev_samp(val real) returns double\n\texternal name \"aggr\".\"stdev\";"	]
[ "sys",	"stddev_samp",	1,	"real",	""	]
[ "sys",	"stddev_samp",	0,	"double",	"create aggregate stddev_samp(val double) returns double\n\texternal name \"aggr\".\"stdev\";"	]
[ "sys",	"stddev_samp",	1,	"double",	""	]
[ "sys",	"stddev_samp",	0,	"double",	"create aggregate stddev_samp(val date) returns double\n\texternal name \"aggr\".\"stdev\";"	]
[ "sys",	"stddev_samp",	1,	"date",	""	]
[ "sys",	"stddev_samp",	0,	"double",	"create aggregate stddev_samp(val time) returns double\n\texternal name \"aggr\".\"stdev\";"	]
[ "sys",	"stddev_samp",	1,	"time",	""	]
[ "sys",	"stddev_samp",	0,	"double",	"create aggregate stddev_samp(val timestamp) returns double\n\texternal name \"aggr\".\"stdev\";"	]
[ "sys",	"stddev_samp",	1,	"timestamp",	""	]
[ "sys",	"storage",	0,	"table",	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Copyright August 2008-2013 MonetDB B.V.\n-- All Rights Reserved.\n\n\n-- Author M.Kersten\n-- This script gives the database administrator insight in the actual\n-- footprint of the persistent tables and the maximum playground used\n-- when indices are introduced upon them.\n-- By chancing the storagemodelinput table directly, the footprint for\n-- yet to be loaded databases can be assessed.\n\n-- The actual storage footprint of an existing database can be\n-- obtained by the table procuding function storage()\n-- It represents the actual state of affairs, i.e. storage on disk\n-- of columns and foreign key indices, and possible temporary hash indices.\n-- For strings we take a sample to determine their average length.\n\ncreate function sys.storage()\nreturns table (\"schema\" string, \"table\" string, \"column\" string, \"type\" string, location string, \"count\" bigint, typewidth int, columnsize bigint, heapsize bigint, indices bigint, sorted boolean)\nexternal name sql.storage;"	]
[ "sys",	"storagemodel",	0,	"table",	"create function sys.storagemodel()\nreturns table (\n\t\"schema\" string,\n\t\"table\" string,\n\t\"column\" string,\n\t\"type\" string,\n\t\"count\"\tbigint,\n\tcolumnsize bigint,\n\theapsize bigint,\n\tindices bigint,\n\tsorted boolean)\nbegin\n\treturn select i.\"schema\", i.\"table\", i.\"column\", i.\"type\", i.\"count\",\n\tcolumnsize(i.\"type\", i.count, i.\"distinct\"),\n\theapsize(i.\"type\", i.\"distinct\", i.\"atomwidth\"),\n\tindexsize(i.\"reference\", i.\"count\"),\n\ti.sorted\n\tfrom sys.storagemodelinput i;\nend;"	]
[ "sys",	"str_to_date",	0,	"date",	"\n-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Copyright August 2008-2013 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate function str_to_date(s string, format string) returns date\n\texternal name mtime.\"str_to_date\";"	]
[ "sys",	"str_to_date",	1,	"clob",	""	]
[ "sys",	"str_to_date",	2,	"clob",	""	]
[ "sys",	"text",	0,	"clob",	"create function \"text\" (p inet) returns clob\n\texternal name inet.\"text\";"	]
[ "sys",	"text",	1,	"inet",	""	]
[ "sys",	"tracelog",	0,	"table",	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Copyright August 2008-2013 MonetDB B.V.\n-- All Rights Reserved.\n\n-- make the offline tracing table available for inspection\ncreate function tracelog() \n\treturns table (\n\t\tevent integer,\t\t-- event counter\n\t\tclk varchar(20), \t-- wallclock, no mtime in kernel\n\t\tpc varchar(50), \t-- module.function[nr]\n\t\tthread int, \t\t-- thread identifier\n\t\t\"user\" int, \t\t-- user identifier\n\t\tticks bigint, \t\t-- time in microseconds\n\t\treads bigint, \t\t-- number of blocks read\n\t\twrites bigint, \t-- number of blocks written\n\t\trbytes bigint,\t\t-- amount of bytes touched\n\t\twbytes bigint,\t\t-- amount of bytes written\n\t\ttype string,\t\t-- return types\n\t\tstmt string\t\t\t-- actual statement executed\n\t)\n\texternal name sql.dump_trace;"	]
[ "sys",	"vacuum",	0,	"clob",	"create procedure vacuum(sys string, tab string)\n\texternal name sql.vacuum;"	]
[ "sys",	"vacuum",	1,	"clob",	""	]
[ "sys",	"var",	0,	"table",	"CREATE FUNCTION var() RETURNS TABLE( name varchar(1024)) EXTERNAL NAME sql.sql_variables;"	]
[ "sys",	"var_pop",	0,	"double",	"create aggregate var_pop(val tinyint) returns double\n\texternal name \"aggr\".\"variancep\";"	]
[ "sys",	"var_pop",	1,	"tinyint",	""	]
[ "sys",	"var_pop",	0,	"double",	"create aggregate var_pop(val smallint) returns double\n\texternal name \"aggr\".\"variancep\";"	]
[ "sys",	"var_pop",	1,	"smallint",	""	]
[ "sys",	"var_pop",	0,	"double",	"create aggregate var_pop(val integer) returns double\n\texternal name \"aggr\".\"variancep\";"	]
[ "sys",	"var_pop",	1,	"int",	""	]
[ "sys",	"var_pop",	0,	"double",	"create aggregate var_pop(val wrd) returns double\n\texternal name \"aggr\".\"variancep\";"	]
[ "sys",	"var_pop",	1,	"wrd",	""	]
[ "sys",	"var_pop",	0,	"double",	"create aggregate var_pop(val bigint) returns double\n\texternal name \"aggr\".\"variancep\";"	]
[ "sys",	"var_pop",	1,	"bigint",	""	]
[ "sys",	"var_pop",	0,	"double",	"create aggregate var_pop(val real) returns double\n\texternal name \"aggr\".\"variancep\";"	]
[ "sys",	"var_pop",	1,	"real",	""	]
[ "sys",	"var_pop",	0,	"double",	"create aggregate var_pop(val double) returns double\n\texternal name \"aggr\".\"variancep\";"	]
[ "sys",	"var_pop",	1,	"double",	""	]
[ "sys",	"var_pop",	0,	"double",	"create aggregate var_pop(val date) returns double\n\texternal name \"aggr\".\"variancep\";"	]
[ "sys",	"var_pop",	1,	"date",	""	]
[ "sys",	"var_pop",	0,	"double",	"create aggregate var_pop(val time) returns double\n\texternal name \"aggr\".\"variancep\";"	]
[ "sys",	"var_pop",	1,	"time",	""	]
[ "sys",	"var_pop",	0,	"double",	"create aggregate var_pop(val timestamp) returns double\n\texternal name \"aggr\".\"variancep\";"	]
[ "sys",	"var_pop",	1,	"timestamp",	""	]
[ "sys",	"var_samp",	0,	"double",	"create aggregate var_samp(val tinyint) returns double\n\texternal name \"aggr\".\"variance\";"	]
[ "sys",	"var_samp",	1,	"tinyint",	""	]
[ "sys",	"var_samp",	0,	"double",	"create aggregate var_samp(val smallint) returns double\n\texternal name \"aggr\".\"variance\";"	]
[ "sys",	"var_samp",	1,	"smallint",	""	]
[ "sys",	"var_samp",	0,	"double",	"create aggregate var_samp(val integer) returns double\n\texternal name \"aggr\".\"variance\";"	]
[ "sys",	"var_samp",	1,	"int",	""	]
[ "sys",	"var_samp",	0,	"double",	"create aggregate var_samp(val wrd) returns double\n\texternal name \"aggr\".\"variance\";"	]
[ "sys",	"var_samp",	1,	"wrd",	""	]
[ "sys",	"var_samp",	0,	"double",	"create aggregate var_samp(val bigint) returns double\n\texternal name \"aggr\".\"variance\";"	]
[ "sys",	"var_samp",	1,	"bigint",	""	]
[ "sys",	"var_samp",	0,	"double",	"create aggregate var_samp(val real) returns double\n\texternal name \"aggr\".\"variance\";"	]
[ "sys",	"var_samp",	1,	"real",	""	]
[ "sys",	"var_samp",	0,	"double",	"create aggregate var_samp(val double) returns double\n\texternal name \"aggr\".\"variance\";"	]
[ "sys",	"var_samp",	1,	"double",	""	]
[ "sys",	"var_samp",	0,	"double",	"create aggregate var_samp(val date) returns double\n\texternal name \"aggr\".\"variance\";"	]
[ "sys",	"var_samp",	1,	"date",	""	]
[ "sys",	"var_samp",	0,	"double",	"create aggregate var_samp(val time) returns double\n\texternal name \"aggr\".\"variance\";"	]
[ "sys",	"var_samp",	1,	"time",	""	]
[ "sys",	"var_samp",	0,	"double",	"create aggregate var_samp(val timestamp) returns double\n\texternal name \"aggr\".\"variance\";"	]
[ "sys",	"var_samp",	1,	"timestamp",	""	]
[ "sys",	"zorder_decode_x",	0,	"int",	"create function zorder_decode_x(z oid) returns integer\n    external name zorder.decode_x;"	]
[ "sys",	"zorder_decode_x",	1,	"oid",	""	]
[ "sys",	"zorder_decode_y",	0,	"int",	"create function zorder_decode_y(z oid) returns integer\n    external name zorder.decode_y;"	]
[ "sys",	"zorder_decode_y",	1,	"oid",	""	]
[ "sys",	"zorder_encode",	0,	"oid",	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Copyright August 2008-2013 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate function zorder_encode(x integer, y integer) returns oid\n    external name zorder.encode;"	]
[ "sys",	"zorder_encode",	1,	"int",	""	]
[ "sys",	"zorder_encode",	2,	"int",	""	]

# 16:39:08 >  
# 16:39:08 >  "Done."
# 16:39:08 >  

