stdout of test 'sql_int128` in directory 'sql/test/mapi` itself:


# 07:30:43 >  
# 07:30:43 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34256" "--set" "mapi_usock=/var/tmp/mtest-20272/.s.monetdb.34256" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/int128/prefix/_/var/MonetDB/mTests_sql_test_mapi" "--set" "mal_listing=0"
# 07:30:43 >  

# MonetDB 5 server v11.17.17 "Jan2014-SP2"
# Serving database 'mTests_sql_test_mapi', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2014 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:34256/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-20272/.s.monetdb.34256
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_compress.sql
# loading sql script: 18_dictionary.sql
# loading sql script: 19_cluster.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_geom.sql
# loading sql script: 46_gsl.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 99_system.sql

# 07:30:43 >  
# 07:30:43 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-20272" "--port=34256"
# 07:30:43 >  

#START TRANSACTION;
#DECLARE a HUGEINT, b HUGEINT, c HUGEINT, d HUGEINT, e HUGEINT;
#explain SET a = 1234567890987654321;
% .explain # table_name
% mal # name
% clob # type
% 72 # length
function user.s2_1{autoCommit=true}(A0:hge):void;
    X_3 := sql.mvc();
    sql.setVariable(X_3,"a",A0);
    sql.exportOperation("");
end s2_1;
# querylog.define("explain set a = cast(1234567890987654321 as hugeint);","default_pipe")
#explain SET b = 10000000000;
% .explain # table_name
% mal # name
% clob # type
% 64 # length
function user.s3_1{autoCommit=true}(A0:hge):void;
    X_3 := sql.mvc();
    sql.setVariable(X_3,"b",A0);
    sql.exportOperation("");
end s3_1;
# querylog.define("explain set b = cast(10000000000 as hugeint);","default_pipe")
#explain SET c = a * b;
% .explain # table_name
% mal # name
% clob # type
% 58 # length
function user.s4_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_5:hge  := sql.getVariable(X_2,"a");
    X_8:hge  := sql.getVariable(X_2,"b");
    X_9 := calc.*(X_6,X_8);
    sql.setVariable(X_2,"c",X_9);
    sql.exportOperation("");
end s4_1;
# querylog.define("explain set c = cast(a * b as hugeint);","default_pipe")
#explain SET d = c * b;
% .explain # table_name
% mal # name
% clob # type
% 58 # length
function user.s5_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_5:hge  := sql.getVariable(X_2,"c");
    X_8:hge  := sql.getVariable(X_2,"b");
    X_9 := calc.*(X_6,X_8);
    sql.setVariable(X_2,"d",X_9);
    sql.exportOperation("");
end s5_1;
# querylog.define("explain set d = c * b;","default_pipe")
#explain SET e = d + a;
% .explain # table_name
% mal # name
% clob # type
% 58 # length
function user.s6_1{autoCommit=true}():void;
    X_2 := sql.mvc();
    X_5:hge  := sql.getVariable(X_2,"d");
    X_7:hge  := sql.getVariable(X_2,"a");
    X_8 := calc.+(X_5,X_7);
    sql.setVariable(X_2,"e",X_8);
    sql.exportOperation("");
end s6_1;
# querylog.define("explain set e = d + a;","default_pipe")
#SET a = 1234567890987654321;
#SET b = 10000000000;
#SET c = a * b;
#SET d = c * b;
#SET e = d + a;
#SELECT a, b, c, d, e;
% .L1,	.L2,	.L3,	.L4,	.L4 # table_name
% L1,	L2,	L3,	L4,	single_value # name
% hugeint,	hugeint,	hugeint,	hugeint,	hugeint # type
% 19,	11,	29,	40,	40 # length
[ 1234567890987654321,	10000000000,	12345678909876543210000000000,	123456789098765432100000000000000000000,	123456789098765432101234567890987654321	]
#SELECT 123456789098765432101234567890987654321;
% .L # table_name
% single_value # name
% hugeint # type
% 39 # length
[ 123456789098765432101234567890987654321	]
#CREATE TABLE sql_int128 (i HUGEINT);
#explain INSERT INTO sql_int128 VALUES (123456789098765432101234567890987654321);
% .explain # table_name
% mal # name
% clob # type
% 116 # length
function user.s15_1(A0:hge):void;
    X_2 := sql.mvc();
    X_3 := sql.append(X_2,"sys","sql_int128","i",A0);
    sql.affectedRows(X_3,1:wrd,"");
end s15_1;
# querylog.define("explain insert into sql_int128 values (123456789098765432101234567890987654321);","default_pipe")
#INSERT INTO sql_int128 VALUES (123456789098765432101234567890987654321);
[ 1	]
#SELECT * FROM sql_int128;
% sys.sql_int128 # table_name
% i # name
% hugeint # type
% 39 # length
[ 123456789098765432101234567890987654321	]

# 07:30:43 >  
# 07:30:43 >  "Done."
# 07:30:43 >  

