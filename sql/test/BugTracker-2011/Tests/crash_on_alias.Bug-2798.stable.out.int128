stdout of test 'crash_on_alias.Bug-2798` in directory 'sql/test/BugTracker-2011` itself:


# 14:09:56 >  
# 14:09:56 >   mserver5  --debug=10 --set gdk_nr_threads=0  --set "gdk_dbfarm=/net/volund.ins.cwi.nl/export/scratch0/fabian/vtmp/mtest-Apr2011-volund.ins.cwi.nl/sql/dbfarm" --set mapi_open=true --set mapi_port=31436 --set monet_prompt= --trace --forcemito --set mal_listing=2  "--dbname=mTests_test_BugTracker-2011" --set mal_listing=0 ; echo ; echo Over..
# 14:09:56 >  

# MonetDB 5 server v11.3.1 "Apr2011-f9a21e4aaff7"
# Serving database 'mTests_test_BugTracker-2011', using 4 threads
# Compiled for x86_64-pc-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 7.749 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://volund.ins.cwi.nl:31436/
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded

Ready.


# 14:09:56 >  
# 14:09:56 >  mclient -lsql -ftest -i -e --host=volund --port=31436 
# 14:09:56 >  

#START TRANSACTION;
#CREATE TABLE dbg (a INT, b INT);
#INSERT INTO dbg (a,b) VALUES (10,10);
[ 1	]
#plan SELECT a as d, SUM(b), (2 * (SUM(b) / (SELECT 2))) as f FROM dbg GROUP BY d;
% .plan # table_name
% rel # name
% clob # type
% 100 # length
project (
| group by (
| | table(sys.dbg) [ dbg.a, dbg.b ] COUNT 
| ) [ dbg.a as d ] [ dbg.d, sys.sum no nil (dbg.b) as L3.L3, L3.L3 as L6.L6 ]
) [ dbg.d, L3 as L4.L3, sys.sql_mul(sys.sql_div(L6, tinyint "2" as L10.L10), tinyint "2") as L11.f ]
#set optimizer = 'sequential_pipe';
#explain SELECT a as d, SUM(b), (2 * (SUM(b) / (SELECT 2))) as f FROM dbg GROUP BY d;
% .explain # table_name
% mal # name
% clob # type
% 141 # length
function user.s8_1():void;
    X_0:void := querylog.define("explain select a as d, sum(b), (2 * (sum(b) / (select 2))) as f from dbg group by d;","sequential_pipe",34);
    X_29 := bat.new(nil:str);
    X_36 := bat.append(X_29,"sys.dbg");
    X_46 := bat.append(X_36,"sys.L4");
    X_55 := bat.append(X_46,"sys.L11");
    X_31 := bat.new(nil:str);
    X_38 := bat.append(X_31,"d");
    X_48 := bat.append(X_38,"L3");
    X_57 := bat.append(X_48,"f");
    X_32 := bat.new(nil:str);
    X_40 := bat.append(X_32,"int");
    X_50 := bat.append(X_40,"hugeint");
    X_59 := bat.append(X_50,"hugeint");
    X_33 := bat.new(nil:int);
    X_42 := bat.append(X_33,32);
    X_52 := bat.append(X_42,128);
    X_60 := bat.append(X_52,128);
    X_35 := bat.new(nil:int);
    X_44 := bat.append(X_35,0);
    X_54 := bat.append(X_44,0);
    X_61 := bat.append(X_54,0);
    X_3 := sql.mvc();
    C_4:bat[:oid] := sql.tid(X_3,"sys","dbg");
    X_7:bat[:int] := sql.bind(X_3,"sys","dbg","a",0);
    X_10 := algebra.projection(C_4,X_7);
    (X_11,r1_14,r2_14) := group.subgroupdone(X_10);
    X_14 := algebra.projection(r1_14,X_10);
    X_17:bat[:int] := sql.bind(X_3,"sys","dbg","b",0);
    X_19 := algebra.projection(C_4,X_17);
    X_20:bat[:hge] := aggr.subsum(X_19,X_11,r1_14,true,true);
    X_15 := bat.setKey(X_14,true);
    X_22:bat[:hge] := batcalc./(X_20,2);
    X_26:bat[:hge] := batcalc.*(X_22,2);
    sql.resultSet(X_55,X_57,X_59,X_60,X_61,X_15,X_20,X_26);
end user.s8_1;
#inline               actions= 0 time=3 usec 
#candidates           actions= 1 time=22 usec 
#remap                actions= 2 time=339 usec 
#costModel            actions= 1 time=66 usec 
#coercions            actions= 0 time=3 usec 
#evaluate             actions= 2 time=79 usec 
#emptybind            actions= 0 time=3 usec 
#pushselect           actions= 0 time=5 usec 
#aliases              actions= 2 time=74 usec 
#mergetable           actions= 0 time=75 usec 
#deadcode             actions= 0 time=7 usec 
#aliases              actions= 0 time=6 usec 
#constants            actions= 4 time=81 usec 
#commonTerms          actions= 0 time=7 usec 
#projectionpath       actions= 0 time=5 usec 
#reorder              actions= 1 time=86 usec 
#deadcode             actions= 0 time=7 usec 
#reduce               actions=27 time=91 usec 
#matpack              actions= 0 time=4 usec 
#querylog             actions= 0 time=0 usec 
#multiplex            actions= 0 time=3 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=66 usec 
#garbageCollector     actions= 1 time=71 usec 
#total                actions= 1 time=1169 usec 
#set optimizer = 'default_pipe';
#SELECT a as d, SUM(b), (2 * (SUM(b) / (SELECT 2))) as f FROM dbg GROUP BY d;
% sys.dbg,	sys.L4,	sys.L11 # table_name
% d,	L3,	f # name
% int,	hugeint,	hugeint # type
% 2,	2,	2 # length
[ 10,	10,	10	]
#ROLLBACK;
#START TRANSACTION;
#CREATE TABLE dbg (a INT, b INT);
#INSERT INTO dbg (a,b) VALUES (10,10);
[ 1	]
#plan SELECT a as d, SUM(b) as e, (2 * (SUM(b) / (SELECT 2))) as f FROM dbg GROUP BY d;
% .plan # table_name
% rel # name
% clob # type
% 99 # length
project (
| group by (
| | table(sys.dbg) [ dbg.a, dbg.b ] COUNT 
| ) [ dbg.a as d ] [ dbg.d, sys.sum no nil (dbg.b) as L3.L3, L3.L3 as L6.L6 ]
) [ dbg.d, L3 as L4.e, sys.sql_mul(sys.sql_div(L6, tinyint "2" as L10.L10), tinyint "2") as L11.f ]
#set optimizer = 'sequential_pipe';
#explain SELECT a as d, SUM(b) as e, (2 * (SUM(b) / (SELECT 2))) as f FROM dbg GROUP BY d;
% .explain # table_name
% mal # name
% clob # type
% 146 # length
function user.s20_1():void;
    X_0:void := querylog.define("explain select a as d, sum(b) as e, (2 * (sum(b) / (select 2))) as f from dbg group by d;","sequential_pipe",34);
    X_29 := bat.new(nil:str);
    X_36 := bat.append(X_29,"sys.dbg");
    X_46 := bat.append(X_36,"sys.L4");
    X_55 := bat.append(X_46,"sys.L11");
    X_31 := bat.new(nil:str);
    X_38 := bat.append(X_31,"d");
    X_48 := bat.append(X_38,"e");
    X_57 := bat.append(X_48,"f");
    X_32 := bat.new(nil:str);
    X_40 := bat.append(X_32,"int");
    X_50 := bat.append(X_40,"hugeint");
    X_59 := bat.append(X_50,"hugeint");
    X_33 := bat.new(nil:int);
    X_42 := bat.append(X_33,32);
    X_52 := bat.append(X_42,128);
    X_60 := bat.append(X_52,128);
    X_35 := bat.new(nil:int);
    X_44 := bat.append(X_35,0);
    X_54 := bat.append(X_44,0);
    X_61 := bat.append(X_54,0);
    X_3 := sql.mvc();
    C_4:bat[:oid] := sql.tid(X_3,"sys","dbg");
    X_7:bat[:int] := sql.bind(X_3,"sys","dbg","a",0);
    X_10 := algebra.projection(C_4,X_7);
    (X_11,r1_14,r2_14) := group.subgroupdone(X_10);
    X_14 := algebra.projection(r1_14,X_10);
    X_17:bat[:int] := sql.bind(X_3,"sys","dbg","b",0);
    X_19 := algebra.projection(C_4,X_17);
    X_20:bat[:hge] := aggr.subsum(X_19,X_11,r1_14,true,true);
    X_15 := bat.setKey(X_14,true);
    X_22:bat[:hge] := batcalc./(X_20,2);
    X_26:bat[:hge] := batcalc.*(X_22,2);
    sql.resultSet(X_55,X_57,X_59,X_60,X_61,X_15,X_20,X_26);
end user.s20_1;
#inline               actions= 0 time=2 usec 
#candidates           actions= 1 time=20 usec 
#remap                actions= 2 time=173 usec 
#costModel            actions= 1 time=64 usec 
#coercions            actions= 0 time=2 usec 
#evaluate             actions= 2 time=78 usec 
#emptybind            actions= 0 time=3 usec 
#pushselect           actions= 0 time=5 usec 
#aliases              actions= 2 time=67 usec 
#mergetable           actions= 0 time=73 usec 
#deadcode             actions= 0 time=7 usec 
#aliases              actions= 0 time=6 usec 
#constants            actions= 4 time=69 usec 
#commonTerms          actions= 0 time=6 usec 
#projectionpath       actions= 0 time=5 usec 
#reorder              actions= 1 time=82 usec 
#deadcode             actions= 0 time=6 usec 
#reduce               actions=27 time=86 usec 
#matpack              actions= 0 time=4 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=3 usec 
#generator            actions= 0 time=1 usec 
#profiler             actions= 1 time=62 usec 
#garbageCollector     actions= 1 time=66 usec 
#total                actions= 1 time=960 usec 
#set optimizer = 'default_pipe';
#SELECT a as d, SUM(b) as e, (2 * (SUM(b) / (SELECT 2))) as f FROM dbg GROUP
#BY d;
% sys.dbg,	sys.L4,	sys.L11 # table_name
% d,	e,	f # name
% int,	hugeint,	hugeint # type
% 2,	2,	2 # length
[ 10,	10,	10	]

# 14:09:56 >  
# 14:09:56 >  Done.
# 14:09:56 >  

