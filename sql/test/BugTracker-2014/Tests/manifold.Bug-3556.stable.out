stdout of test 'manifold.Bug-3556` in directory 'sql/test/BugTracker-2014` itself:


# 14:13:38 >  
# 14:13:38 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=38920" "--set" "mapi_usock=/var/tmp/mtest-29507/.s.monetdb.38920" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/export/scratch1/mk/Oct2014//Linux/var/MonetDB/mTests_sql_test_BugTracker-2014" "--set" "mal_listing=0" "--set" "embedded_r=yes"
# 14:13:38 >  

# MonetDB 5 server v11.19.0
# This is an unreleased version
# Serving database 'mTests_sql_test_BugTracker-2014', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.590 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:38920/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-29507/.s.monetdb.38920
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 19_cluster.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_gsl.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 90_generator.sql
# loading sql script: 99_system.sql

# 14:13:38 >  
# 14:13:38 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-29507" "--port=38920"
# 14:13:38 >  

#explain select replace(a1,a2,a3), id
#from (
#  select name as a1, 'a' as a2, 'A' as a3, id as id 
#  from sys.functions
#) as x;
% .explain # table_name
% mal # name
% clob # type
% 197 # length
function user.s4_1():void;
    X_55:void := querylog.define("explain select replace(a1,a2,a3), id\nfrom (\n select name as a1, \\'a\\' as a2, \\'A\\' as a3, id as id \n from sys.functions\n) as x;","sequential_pipe",33:int);
    X_30 := bat.new(nil:str);
    X_37 := bat.append(X_30,"sys.L12");
    X_46 := bat.append(X_37,"sys.x");
    X_32 := bat.new(nil:str);
    X_39 := bat.append(X_32,"L12");
    X_48 := bat.append(X_39,"id");
    X_33 := bat.new(nil:str);
    X_41 := bat.append(X_33,"varchar");
    X_50 := bat.append(X_41,"int");
    X_34 := bat.new(nil:int);
    X_43 := bat.append(X_34,0:int);
    X_52 := bat.append(X_43,32:int);
    X_36 := bat.new(nil:int);
    X_45 := bat.append(X_36,0:int);
    X_54 := bat.append(X_45,0:int);
    X_3 := sql.mvc();
    C_4:bat[:oid] := sql.tid(X_3,"sys","functions");
    X_17:bat[:str] := sql.bind(X_3,"sys","functions","name",0:int);
    (C_20:bat[:oid],X_21:bat[:str]) := sql.bind(X_3,"sys","functions","name",2:int);
    X_19:bat[:str] := sql.bind(X_3,"sys","functions","name",1:int);
    X_22 := sql.delta(X_17,C_20,X_21,X_19);
    X_23 := algebra.projection(C_4,X_22);
    X_26:bat[:str] := mal.manifold("str","replace",X_23,"a","A");
    X_7:bat[:int] := sql.bind(X_3,"sys","functions","id",0:int);
    (C_12:bat[:oid],X_13:bat[:int]) := sql.bind(X_3,"sys","functions","id",2:int);
    X_10:bat[:int] := sql.bind(X_3,"sys","functions","id",1:int);
    X_15 := sql.delta(X_7,C_12,X_13,X_10);
    X_16 := algebra.projection(C_4,X_15);
# querylog.define("explain select replace(a1,a2,a3), id\nfrom (\n select name as a1, \\'a\\' as a2, \\'A\\' as a3, id as id \n from sys.functions\n) as x;","sequential_pipe")
    sql.resultSet(X_46,X_48,X_50,X_52,X_54,X_26,X_16);
end user.s4_1;
#inline               actions= 0 time=3 usec 
#candidates           actions= 1 time=21 usec 
#remap                actions= 0 time=7 usec 
#costModel            actions= 1 time=19 usec 
#coercions            actions= 0 time=3 usec 
#evaluate             actions= 2 time=35 usec 
#emptybind            actions= 0 time=4 usec 
#pushselect           actions= 0 time=5 usec 
#aliases              actions= 4 time=28 usec 
#mergetable           actions= 0 time=27 usec 
#deadcode             actions= 4 time=19 usec 
#aliases              actions= 0 time=5 usec 
#constants            actions= 3 time=22 usec 
#commonTerms          actions= 0 time=19 usec 
#projectionpath       actions= 0 time=5 usec 
#reorder              actions= 1 time=33 usec 
#deadcode             actions= 0 time=6 usec 
#reduce               actions=33 time=35 usec 
#matpack              actions= 0 time=4 usec 
#querylog             actions= 0 time=0 usec 
#multiplex            actions= 1 time=20 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=13 usec 
#garbageCollector     actions= 1 time=18 usec 
#total                actions= 1 time=415 usec 
#explain select replace(a1,a2,a3), id
#from (
#  select name as a1, 'a' as a2, 'A' as a3, id + 1 as id 
#  from sys.functions
#) as x;
% .explain # table_name
% mal # name
% clob # type
% 201 # length
function user.s6_1():void;
    X_62:void := querylog.define("explain select replace(a1,a2,a3), id\nfrom (\n select name as a1, \\'a\\' as a2, \\'A\\' as a3, id + 1 as id \n from sys.functions\n) as x;","sequential_pipe",37:int);
    X_37 := bat.new(nil:str);
    X_44 := bat.append(X_37,"sys.L12");
    X_53 := bat.append(X_44,"sys.x");
    X_39 := bat.new(nil:str);
    X_46 := bat.append(X_39,"L12");
    X_55 := bat.append(X_46,"id");
    X_40 := bat.new(nil:str);
    X_48 := bat.append(X_40,"varchar");
    X_57 := bat.append(X_48,"bigint");
    X_41 := bat.new(nil:int);
    X_50 := bat.append(X_41,0:int);
    X_59 := bat.append(X_50,64:int);
    X_43 := bat.new(nil:int);
    X_52 := bat.append(X_43,0:int);
    X_61 := bat.append(X_52,0:int);
    X_3 := sql.mvc();
    C_4:bat[:oid] := sql.tid(X_3,"sys","functions");
    X_17:bat[:str] := sql.bind(X_3,"sys","functions","name",0:int);
    (C_20:bat[:oid],X_21:bat[:str]) := sql.bind(X_3,"sys","functions","name",2:int);
    X_19:bat[:str] := sql.bind(X_3,"sys","functions","name",1:int);
    X_22 := sql.delta(X_17,C_20,X_21,X_19);
    X_23 := algebra.projection(C_4,X_22);
    X_7:bat[:int] := sql.bind(X_3,"sys","functions","id",0:int);
    (C_12:bat[:oid],X_13:bat[:int]) := sql.bind(X_3,"sys","functions","id",2:int);
    X_10:bat[:int] := sql.bind(X_3,"sys","functions","id",1:int);
    X_15 := sql.delta(X_7,C_12,X_13,X_10);
    X_16 := algebra.projection(C_4,X_15);
    X_25 := algebra.project(X_16,"a");
    X_27 := algebra.project(X_16,"A");
    X_33:bat[:str] := mal.manifold("str","replace",X_23,X_25,X_27);
    X_28 := batcalc.lng(X_16);
    X_30:bat[:lng] := batcalc.+(X_28,1:lng);
# querylog.define("explain select replace(a1,a2,a3), id\nfrom (\n select name as a1, \\'a\\' as a2, \\'A\\' as a3, id + 1 as id \n from sys.functions\n) as x;","sequential_pipe")
    sql.resultSet(X_53,X_55,X_57,X_59,X_61,X_33,X_30);
end user.s6_1;
#inline               actions= 0 time=3 usec 
#candidates           actions= 1 time=23 usec 
#remap                actions= 1 time=78 usec 
#costModel            actions= 1 time=26 usec 
#coercions            actions= 0 time=2 usec 
#evaluate             actions= 3 time=46 usec 
#emptybind            actions= 0 time=4 usec 
#pushselect           actions= 0 time=4 usec 
#aliases              actions= 5 time=30 usec 
#mergetable           actions= 0 time=35 usec 
#deadcode             actions= 4 time=27 usec 
#aliases              actions= 0 time=6 usec 
#constants            actions= 5 time=31 usec 
#commonTerms          actions= 0 time=12 usec 
#projectionpath       actions= 0 time=5 usec 
#reorder              actions= 1 time=42 usec 
#deadcode             actions= 0 time=6 usec 
#reduce               actions=38 time=44 usec 
#matpack              actions= 0 time=4 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 1 time=28 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=21 usec 
#garbageCollector     actions= 1 time=27 usec 
#total                actions= 1 time=572 usec 
#explain select replace(a1,a2,a3), id
#from (
#  select name as a1, 'a' as a2, 'A' as a3, abs(id) as id 
#  from sys.functions
#) as x;
% .explain # table_name
% mal # name
% clob # type
% 202 # length
function user.s8_1():void;
    X_60:void := querylog.define("explain select replace(a1,a2,a3), id\nfrom (\n select name as a1, \\'a\\' as a2, \\'A\\' as a3, abs(id) as id \n from sys.functions\n) as x;","sequential_pipe",36:int);
    X_35 := bat.new(nil:str);
    X_42 := bat.append(X_35,"sys.L12");
    X_51 := bat.append(X_42,"sys.x");
    X_37 := bat.new(nil:str);
    X_44 := bat.append(X_37,"L12");
    X_53 := bat.append(X_44,"id");
    X_38 := bat.new(nil:str);
    X_46 := bat.append(X_38,"varchar");
    X_55 := bat.append(X_46,"int");
    X_39 := bat.new(nil:int);
    X_48 := bat.append(X_39,0:int);
    X_57 := bat.append(X_48,32:int);
    X_41 := bat.new(nil:int);
    X_50 := bat.append(X_41,0:int);
    X_59 := bat.append(X_50,0:int);
    X_3 := sql.mvc();
    C_4:bat[:oid] := sql.tid(X_3,"sys","functions");
    X_17:bat[:str] := sql.bind(X_3,"sys","functions","name",0:int);
    (C_20:bat[:oid],X_21:bat[:str]) := sql.bind(X_3,"sys","functions","name",2:int);
    X_19:bat[:str] := sql.bind(X_3,"sys","functions","name",1:int);
    X_22 := sql.delta(X_17,C_20,X_21,X_19);
    X_23 := algebra.projection(C_4,X_22);
    X_7:bat[:int] := sql.bind(X_3,"sys","functions","id",0:int);
    (C_12:bat[:oid],X_13:bat[:int]) := sql.bind(X_3,"sys","functions","id",2:int);
    X_10:bat[:int] := sql.bind(X_3,"sys","functions","id",1:int);
    X_15 := sql.delta(X_7,C_12,X_13,X_10);
    X_16 := algebra.projection(C_4,X_15);
    X_25 := algebra.project(X_16,"a");
    X_27 := algebra.project(X_16,"A");
    X_31:bat[:str] := mal.manifold("str","replace",X_23,X_25,X_27);
    X_28:bat[:int] := batcalc.abs(X_16);
# querylog.define("explain select replace(a1,a2,a3), id\nfrom (\n select name as a1, \\'a\\' as a2, \\'A\\' as a3, abs(id) as id \n from sys.functions\n) as x;","sequential_pipe")
    sql.resultSet(X_51,X_53,X_55,X_57,X_59,X_31,X_28);
end user.s8_1;
#inline               actions= 0 time=3 usec 
#candidates           actions= 1 time=20 usec 
#remap                actions= 1 time=40 usec 
#costModel            actions= 1 time=18 usec 
#coercions            actions= 0 time=3 usec 
#evaluate             actions= 2 time=36 usec 
#emptybind            actions= 0 time=5 usec 
#pushselect           actions= 0 time=5 usec 
#aliases              actions= 4 time=22 usec 
#mergetable           actions= 0 time=27 usec 
#deadcode             actions= 4 time=20 usec 
#aliases              actions= 0 time=5 usec 
#constants            actions= 4 time=24 usec 
#commonTerms          actions= 0 time=12 usec 
#projectionpath       actions= 0 time=5 usec 
#reorder              actions= 1 time=33 usec 
#deadcode             actions= 0 time=6 usec 
#reduce               actions=36 time=35 usec 
#matpack              actions= 0 time=4 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 1 time=21 usec 
#generator            actions= 0 time=2 usec 
#profiler             actions= 1 time=14 usec 
#garbageCollector     actions= 1 time=21 usec 
#total                actions= 1 time=443 usec 

# 14:13:39 >  
# 14:13:39 >  "Done."
# 14:13:39 >  

