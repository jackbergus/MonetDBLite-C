stdout of test 'explain_gives_crash.SF-2741829` in directory 'test/BugTracker-2009` itself:


# 22:45:54 >  
# 22:45:54 >   mserver5 "--config=/ufs/niels/scratch/rc/Linux-x86_64/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/niels/scratch/rc/Linux-x86_64/lib/MonetDB5:/ufs/niels/scratch/rc/Linux-x86_64/lib/MonetDB5/lib:/ufs/niels/scratch/rc/Linux-x86_64/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/niels/scratch/rc/Linux-x86_64/var/MonetDB5/dbfarm"    --set mapi_open=true --set xrpc_open=true --set mapi_port=35519 --set xrpc_port=48894 --set monet_prompt= --trace  "--dbname=mTests_src_test_BugTracker-2009" --set mal_listing=0 "--dbinit= include sql;" ; echo ; echo Over..
# 22:45:54 >  

# MonetDB server v5.12.0, based on kernel v1.30.0
# Serving database 'mTests_src_test_BugTracker-2009', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2009 MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://alf.ins.cwi.nl:35519/
# MonetDB/SQL module v2.30.0 loaded

Ready.
#function user.main():void;
#    clients.quit();
#end main;


# 21:13:40 >  
# 21:13:40 >  mclient -lsql -i --host=alf --port=39638 
# 21:13:40 >  

#~BeginVariableOutput~#
function user.main{autoCommit=nil}():void;
    mdb.listMapi();
    X_2 := sql.mvc();
"    X_3 := calc.str(""sys"");"
    X_5 := calc.ptr(nil);
    X_7 := calc.int(0);
"    sql.catalog(29,X_3,X_5,X_7);"
"    X_11:bat[:oid,:int]  := sql.bind(X_2,""sys"",""blabla"",""id"",0);"
"    X_14:bat[:oid,:oid]  := sql.bind_dbat(X_2,""sys"",""blabla"",1);"
    X_16 := bat.reverse(X_14);
"    X_17 := algebra.kdifference(X_11,X_16);"
    X_18 := calc.oid(0@0);
"    X_20 := algebra.markT(X_17,X_18);"
    X_21 := bat.reverse(X_20);
"    X_22:bat[:oid,:int]  := sql.bind(X_2,""sys"",""blabla"",""id"",0);"
"    X_23 := algebra.leftjoin(X_21,X_22);"
    X_24 := calc.int(nil:int);
"    X_26 := algebra.subselect(X_23,X_24,X_24,true,true,true);"
"    X_28 := algebra.leftjoin(X_26,X_23);"
"    (X_29,r1_29,r2_29) := group.subgroupdone(X_28);"
    X_32 := aggr.count(r2_29);
    X_33:wrd  := aggr.sum(r2_29);
    X_34 := calc.isnil(X_33);
    X_35 := calc.wrd(0:wrd);
"    X_37 := calc.ifthenelse(X_34,X_35,X_33);"
"    X_38 := calc.!=(X_32,X_37);"
"    X_39 := calc.str(""UPDATE: UNIQUE constraint 'blabla.dada' violated"");"
"    sql.assert(X_38,X_39);"
"    sql.exportOperation("""");"
end main;
function user.main{autoCommit=nil}():void;
    mdb.listMapi();
    X_2 := sql.mvc();
"    X_3 := calc.str(""sys"");"
    X_5 := calc.ptr(nil);
    X_7 := calc.int(0);
"    sql.catalog(29,X_3,X_5,X_7);"
"    X_11:bat[:oid,:int]  := sql.bind(X_2,""sys"",""blabla"",""id"",0);"
"    X_14:bat[:oid,:oid]  := sql.bind_dbat(X_2,""sys"",""blabla"",1);"
    X_16 := bat.reverse(X_14);
"    X_17 := algebra.kdifference(X_11,X_16);"
    X_18 := calc.oid(0@0);
"    X_20 := algebra.markT(X_17,X_18);"
    X_21 := bat.reverse(X_20);
"    X_22:bat[:oid,:int]  := sql.bind(X_2,""sys"",""blabla"",""id"",0);"
"    X_23 := algebra.leftjoin(X_21,X_22);"
    X_24 := calc.int(nil:int);
"    X_26 := algebra.subselect(X_23,X_24,X_24,true,true,true);"
"    X_28 := algebra.leftjoin(X_26,X_23);"
"    (X_29,r1_29,r2_29) := group.subgroupdone(X_28);"
    X_32 := aggr.count(r2_29);
    X_33:wrd  := aggr.sum(r2_29);
    X_34 := calc.isnil(X_33);
    X_35 := calc.wrd(0:wrd);
"    X_37 := calc.ifthenelse(X_34,X_35,X_33);"
"    X_38 := calc.!=(X_32,X_37);"
"    X_39 := calc.str(""UPDATE: UNIQUE constraint 'blabla.dada' violated"");"
"    sql.assert(X_38,X_39);"
"    sql.exportOperation("""");"
end main;
#~EndVariableOutput~#
#~BeginVariableOutput~#
function user.main{autoCommit=nil}():void;
    mdb.listMapi();
    X_2 := sql.mvc();
"    X_3 := calc.str(""sys"");"
    X_5 := calc.ptr(nil);
    X_7 := calc.int(0);
"    sql.catalog(29,X_3,X_5,X_7);"
"    X_11:bat[:oid,:int]  := sql.bind(X_2,""sys"",""blabla"",""id"",0);"
"    X_14:bat[:oid,:oid]  := sql.bind_dbat(X_2,""sys"",""blabla"",1);"
    X_16 := bat.reverse(X_14);
"    X_17 := algebra.kdifference(X_11,X_16);"
    X_18 := calc.oid(0@0);
"    X_20 := algebra.markT(X_17,X_18);"
    X_21 := bat.reverse(X_20);
"    X_22:bat[:oid,:int]  := sql.bind(X_2,""sys"",""blabla"",""id"",0);"
"    X_23 := algebra.leftjoin(X_21,X_22);"
    X_24 := calc.int(nil:int);
"    X_26 := algebra.subselect(X_23,X_24,X_24,true,true,true);"
"    X_28 := algebra.leftjoin(X_26,X_23);"
"    (X_29,r1_29,r2_29) := group.subgroupdone(X_28);"
    X_32 := aggr.count(r2_29);
    X_33:wrd  := aggr.sum(r2_29);
    X_34 := calc.isnil(X_33);
    X_35 := calc.wrd(0:wrd);
"    X_37 := calc.ifthenelse(X_34,X_35,X_33);"
"    X_38 := calc.!=(X_32,X_37);"
"    X_39 := calc.str(""UPDATE: UNIQUE constraint 'blabla.dada' violated"");"
"    sql.assert(X_38,X_39);"
"    sql.exportOperation("""");"
end main;
#~EndVariableOutput~#

# 11:37:28 >  
# 11:37:28 >  Done.
# 11:37:28 >  

