stdout of test 'explain_gives_crash.SF-2741829` in directory 'sql/test/BugTracker-2009` itself:


# 22:45:54 >  
# 22:45:54 >   mserver5 "--config=/ufs/niels/scratch/rc/Linux-x86_64/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/niels/scratch/rc/Linux-x86_64/lib/MonetDB5:/ufs/niels/scratch/rc/Linux-x86_64/lib/MonetDB5/lib:/ufs/niels/scratch/rc/Linux-x86_64/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/niels/scratch/rc/Linux-x86_64/var/MonetDB5/dbfarm"    --set mapi_open=true --set xrpc_open=true --set mapi_port=35519 --set xrpc_port=48894 --set monet_prompt= --trace  "--dbname=mTests_src_test_BugTracker-2009" --set mal_listing=0 "--dbinit= include sql;" ; echo ; echo Over..
# 22:45:54 >  

# MonetDB server v5.12.0, based on kernel v1.30.0
# Serving database 'mTests_src_test_BugTracker-2009', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2009 MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://alf.ins.cwi.nl:35519/
# MonetDB/SQL module v2.30.0 loaded

Ready.
#function user.main():void;
#    clients.quit();
#end main;


# 21:13:40 >  
# 21:13:40 >  mclient -lsql -i --host=alf --port=39638 
# 21:13:40 >  

#~BeginVariableOutput~#
function user.s4_1():void;
"    X_32:void := querylog.define(""explain alter table blabla add constraint dada unique (id);"",""sequential_pipe"",22);"
    X_1 := sql.mvc();
"    sql.catalog(29,""sys"",nil,0);"
"    X_9:bat[:int] := sql.bind(X_1,""sys"",""blabla"",""id"",0);"
"    C_7:bat[:oid] := sql.tid(X_1,""sys"",""blabla"");"
"    C_48 := algebra.subselect(X_9,C_7,nil:int,nil:int,true,true,true);"
"    (C_11,r1_14) := sql.bind(X_1,""sys"",""blabla"",""id"",2);"
"    C_49 := algebra.subselect(r1_14,nil:bat[:oid],nil:int,nil:int,true,true,true);"
"    X_14:bat[:int] := sql.bind(X_1,""sys"",""blabla"",""id"",1);"
"    C_51 := algebra.subselect(X_14,C_7,nil:int,nil:int,true,true,true);"
"    C_17 := sql.subdelta(C_48,C_7,C_11,C_49,C_51);"
"    X_19 := sql.projectdelta(C_17,X_9,C_11,r1_14,X_14);"
"    (X_20,r1_27,r2_27) := group.subgroupdone(X_19);"
    X_23 := aggr.count(r2_27);
    X_24:wrd := aggr.sum(r2_27);
    X_25:bit := calc.isnil(X_24);
"    X_27:wrd := calc.ifthenelse(X_25,0,X_24);"
"    X_28:bit := calc.!=(X_23,X_27);"
"    sql.assert(X_28,""UPDATE: UNIQUE constraint 'blabla.dada' violated"");"
    sql.exportOperation();
end user.s4_1;
#inline               actions= 0 time=4 usec 
#candidates           actions= 1 time=44 usec 
#remap                actions= 0 time=6 usec 
#costModel            actions= 1 time=38 usec 
#coercions            actions= 7 time=35 usec 
#evaluate             actions= 0 time=6 usec 
#aliases              actions= 0 time=10 usec 
#pushselect           actions= 3 time=60 usec 
#mergetable           actions= 0 time=47 usec 
#deadcode             actions= 2 time=35 usec 
#aliases              actions= 0 time=10 usec 
#constants            actions= 1 time=45 usec 
#commonTerms          actions= 0 time=9 usec 
#projectionpath       actions= 0 time=6 usec 
#reorder              actions= 1 time=55 usec 
#deadcode             actions= 0 time=9 usec 
#reduce               actions=28 time=63 usec 
#matpack              actions= 0 time=7 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=14 usec 
#generator            actions= 0 time=4 usec 
#profiler             actions= 1 time=30 usec 
#garbageCollector     actions= 1 time=42 usec 
#total                actions= 1 time=685 usec 
function user.s5_1():void;
"    X_32:void := querylog.define(""explain alter table blabla add constraint dada unique (id);"",""sequential_pipe"",22);"
    X_1 := sql.mvc();
"    sql.catalog(29,""sys"",nil,0);"
"    X_9:bat[:int] := sql.bind(X_1,""sys"",""blabla"",""id"",0);"
"    C_7:bat[:oid] := sql.tid(X_1,""sys"",""blabla"");"
"    C_48 := algebra.subselect(X_9,C_7,nil:int,nil:int,true,true,true);"
"    (C_11,r1_14) := sql.bind(X_1,""sys"",""blabla"",""id"",2);"
"    C_49 := algebra.subselect(r1_14,nil:bat[:oid],nil:int,nil:int,true,true,true);"
"    X_14:bat[:int] := sql.bind(X_1,""sys"",""blabla"",""id"",1);"
"    C_51 := algebra.subselect(X_14,C_7,nil:int,nil:int,true,true,true);"
"    C_17 := sql.subdelta(C_48,C_7,C_11,C_49,C_51);"
"    X_19 := sql.projectdelta(C_17,X_9,C_11,r1_14,X_14);"
"    (X_20,r1_27,r2_27) := group.subgroupdone(X_19);"
    X_23 := aggr.count(r2_27);
    X_24:wrd := aggr.sum(r2_27);
    X_25:bit := calc.isnil(X_24);
"    X_27:wrd := calc.ifthenelse(X_25,0,X_24);"
"    X_28:bit := calc.!=(X_23,X_27);"
"    sql.assert(X_28,""UPDATE: UNIQUE constraint 'blabla.dada' violated"");"
    sql.exportOperation();
end user.s5_1;
#~EndVariableOutput~#
#~BeginVariableOutput~#
function user.s9_1():void;
"    X_32:void := querylog.define(""explain alter table blabla add constraint dada unique (id);"",""sequential_pipe"",22);"
    X_1 := sql.mvc();
"    sql.catalog(29,""sys"",nil,0);"
"    X_9:bat[:int] := sql.bind(X_1,""sys"",""blabla"",""id"",0);"
"    C_7:bat[:oid] := sql.tid(X_1,""sys"",""blabla"");"
"    C_48 := algebra.subselect(X_9,C_7,nil:int,nil:int,true,true,true);"
"    (C_11,r1_14) := sql.bind(X_1,""sys"",""blabla"",""id"",2);"
"    C_49 := algebra.subselect(r1_14,nil:bat[:oid],nil:int,nil:int,true,true,true);"
"    X_14:bat[:int] := sql.bind(X_1,""sys"",""blabla"",""id"",1);"
"    C_51 := algebra.subselect(X_14,C_7,nil:int,nil:int,true,true,true);"
"    C_17 := sql.subdelta(C_48,C_7,C_11,C_49,C_51);"
"    X_19 := sql.projectdelta(C_17,X_9,C_11,r1_14,X_14);"
"    (X_20,r1_27,r2_27) := group.subgroupdone(X_19);"
    X_23 := aggr.count(r2_27);
    X_24:wrd := aggr.sum(r2_27);
    X_25:bit := calc.isnil(X_24);
"    X_27:wrd := calc.ifthenelse(X_25,0,X_24);"
"    X_28:bit := calc.!=(X_23,X_27);"
"    sql.assert(X_28,""UPDATE: UNIQUE constraint 'blabla.dada' violated"");"
    sql.exportOperation();
end user.s9_1;
#~EndVariableOutput~#

# 11:37:28 >  
# 11:37:28 >  Done.
# 11:37:28 >  

