stdout of test 'explain_gives_crash.SF-2741829` in directory 'sql/test/BugTracker-2009` itself:


# 22:45:54 >  
# 22:45:54 >   mserver5 "--config=/ufs/niels/scratch/rc/Linux-x86_64/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/niels/scratch/rc/Linux-x86_64/lib/MonetDB5:/ufs/niels/scratch/rc/Linux-x86_64/lib/MonetDB5/lib:/ufs/niels/scratch/rc/Linux-x86_64/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/niels/scratch/rc/Linux-x86_64/var/MonetDB5/dbfarm"    --set mapi_open=true --set xrpc_open=true --set mapi_port=35519 --set xrpc_port=48894 --set monet_prompt= --trace  "--dbname=mTests_src_test_BugTracker-2009" --set mal_listing=0 "--dbinit= include sql;" ; echo ; echo Over..
# 22:45:54 >  

# MonetDB server v5.12.0, based on kernel v1.30.0
# Serving database 'mTests_src_test_BugTracker-2009', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2009 MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://alf.ins.cwi.nl:35519/
# MonetDB/SQL module v2.30.0 loaded

Ready.
#function user.main():void;
#    clients.quit();
#end main;


# 21:13:40 >  
# 21:13:40 >  mclient -lsql -i --host=alf --port=39638 
# 21:13:40 >  

#~BeginVariableOutput~#
function user.s4_1():void;
"    X_27:void := querylog.define(""explain alter table blabla add constraint dada unique (id);"",""sequential_pipe"",17);"
    X_1 := sql.mvc();
"    sql.catalog(29,""sys"",nil,0);"
"    X_9:bat[:int] := sql.bind(X_1,""sys"",""blabla"",""id"",0);"
"    C_7:bat[:oid] := sql.tid(X_1,""sys"",""blabla"");"
"    C_12 := algebra.subselect(X_9,C_7,nil:int,nil:int,true,true,true);"
"    X_14 := algebra.projection(C_12,X_9);"
"    (X_15,r1_27,r2_27) := group.subgroupdone(X_14);"
    X_18 := aggr.count(r2_27);
    X_19:wrd := aggr.sum(r2_27);
    X_20:bit := calc.isnil(X_19);
"    X_22:wrd := calc.ifthenelse(X_20,0,X_19);"
"    X_23:bit := calc.!=(X_18,X_22);"
"    sql.assert(X_23,""UPDATE: UNIQUE constraint 'blabla.dada' violated"");"
    sql.exportOperation();
end user.s4_1;
function user.s5_1():void;
"    X_27:void := querylog.define(""explain alter table blabla add constraint dada unique (id);"",""sequential_pipe"",17);"
    X_1 := sql.mvc();
"    sql.catalog(29,""sys"",nil,0);"
"    X_9:bat[:int] := sql.bind(X_1,""sys"",""blabla"",""id"",0);"
"    C_7:bat[:oid] := sql.tid(X_1,""sys"",""blabla"");"
"    C_12 := algebra.subselect(X_9,C_7,nil:int,nil:int,true,true,true);"
"    X_14 := algebra.projection(C_12,X_9);"
"    (X_15,r1_27,r2_27) := group.subgroupdone(X_14);"
    X_18 := aggr.count(r2_27);
    X_19:wrd := aggr.sum(r2_27);
    X_20:bit := calc.isnil(X_19);
"    X_22:wrd := calc.ifthenelse(X_20,0,X_19);"
"    X_23:bit := calc.!=(X_18,X_22);"
"    sql.assert(X_23,""UPDATE: UNIQUE constraint 'blabla.dada' violated"");"
    sql.exportOperation();
end user.s5_1;
#~EndVariableOutput~#
#~BeginVariableOutput~#
function user.s9_1():void;
"    X_27:void := querylog.define(""explain alter table blabla add constraint dada unique (id);"",""sequential_pipe"",17);"
    X_1 := sql.mvc();
"    sql.catalog(29,""sys"",nil,0);"
"    X_9:bat[:int] := sql.bind(X_1,""sys"",""blabla"",""id"",0);"
"    C_7:bat[:oid] := sql.tid(X_1,""sys"",""blabla"");"
"    C_12 := algebra.subselect(X_9,C_7,nil:int,nil:int,true,true,true);"
"    X_14 := algebra.projection(C_12,X_9);"
"    (X_15,r1_27,r2_27) := group.subgroupdone(X_14);"
    X_18 := aggr.count(r2_27);
    X_19:wrd := aggr.sum(r2_27);
    X_20:bit := calc.isnil(X_19);
"    X_22:wrd := calc.ifthenelse(X_20,0,X_19);"
"    X_23:bit := calc.!=(X_18,X_22);"
"    sql.assert(X_23,""UPDATE: UNIQUE constraint 'blabla.dada' violated"");"
    sql.exportOperation();
end user.s9_1;
#~EndVariableOutput~#

# 11:37:28 >  
# 11:37:28 >  Done.
# 11:37:28 >  

