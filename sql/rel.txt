
BASETABLE
	(card MULTI)
	-> exps		is list of column expressions (also used for aliases)
	-> l		(sql_table)

TABLE 	(card MULTI)
	-> exps		is list of column expressions (also used for aliases)
	-> l 		optional input relation
	-> r		table function expression

/* Wrapping relational operator, is a big complex top level only 
   operator, which only does DDL kind of statements
 */
DDL 	(card 0!, top of the tree always)
	-> flags	/* OUTPUT, TRANSACTION-types, CREATE/DROP/ALTER* */ 
	-> exps		For 'OUTPUT' is list of output options
			For 'transactions' simple flags
			for CREATE etc full sql string.
	-> l		only used for 'OUTPUT' relation to output
	-> r		(only for DDL_LIST)

SELECT 	(card MULTI or same ...?) 
	-> exps		selection expressions (ie all e_cmp)
	-> l		is relation

LEFT|RIGHT|FULL
JOIN 	(card MULTI)
	-> exps		join expressions (ie all e_cmp)
	-> l		is left relation
	-> r		is rigth relation

SEMI/ANTI 
	(card MULTI)
	-> exps		join expressions (ie all e_cmp)
	-> l		is left relation
	-> r		is rigth relation

UNION|EXCEPT|INTERSECT 
	(card ATOM, AGGR or MULTI (same card as lower relation))
	-> exps 	is list of projection expressions
	-> l		is left relation
	-> r		is rigth relation

PROJECT  (card ATOM, AGGR or MULTI (same card as lower relation))
	-> exps 	is list of projection expressions
	-> l		is relation
	-> r		optional, is list of order by expressions 

GROUPBY  (card ATOM (no group by exps), AGGR)
	-> exps		is list of (groupby and) aggregate expressions
	-> l		is relation
	-> r 		is list of group by expressions

TOPN	(card ATOM, AGGR, or MULTI (same card as lower relation))
	-> exps 	(list) int limit, [ int offset ]
	-> l		is relation
	-> flag 	(bounds for limit can be including (1) or excluding (0) (ie later just returns the topN, including will return atleast N)

INSERT|DELETE|UPDATE 	(card MULTI)
	-> l 		is relation to modify
	-> r		to be inserted/deleted/updated relation
	-> flag		( if set don't insert (is done allready))
only (UPDATE)
	-> exps		list of columns to update (ugh) !

Expressions

e_atom 	(card ATOM)
	-> l	literal (-> l = atom)
	or
	-> r	parameter ( ->r = varname, ->type = subtype, ->flag = level)
	or
	-> f	list of atom expressions
	or
	-> 	numbered variable ( ->flag = nr, ->type = subtype)

e_convert
	-> l	sub expression
	-> r	list of from and to subtypes

e_cmp
	-> l	left sub expression
	-> r	right sub expression (f second arg for range expressions)
	-> flag compare type		
		(       cmp_gt = 0,
        		cmp_gte = 1,
        		cmp_lte = 2,
        		cmp_lt = 3,
        		cmp_equal = 4,
        		cmp_notequal = 5,
        		cmp_notlike = 6,
        		cmp_like = 7,
        		cmp_all = 8,		cross product
        		cmp_or = 9,		or handling 
			cmp_in = 10,		in list handling		
			cmp_notin = 11		not in list handling

						cmp_in/cmp_notin
						->r is a list of values
		)

e_func
e_aggr
	-> l 	list of sub expressions (args for the func and aggr)
	-> r	rank operators the list order by expressions (group by in l)
	-> f	func / aggr
for aggr
	-> flag DISTINCT and NO_NIL could be set

e_column
	-> name alias for the expression (ie used by higher expressions)
		l,r names of refered expression
	-> l 	optional relation name 
	-> r	expression name
	-> type 

	
