stdout of test 'SQL-dump_gsl` in directory 'clients` itself:


# 15:01:36 >  
# 15:01:36 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34237" "--set" "mapi_usock=/var/tmp/mtest-13451/.s.monetdb.34237" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/sjoerd/Monet-candidate/var/MonetDB/mTests_clients" "--set" "mal_listing=0"
# 15:01:36 >  

# MonetDB 5 server v11.17.0 (hg id: 51cced809df4)
# This is an unreleased version
# Serving database 'mTests_clients', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2014 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://madrid.ins.cwi.nl:34237/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-13451/.s.monetdb.34237
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_compress.sql
# loading sql script: 18_dictionary.sql
# loading sql script: 19_cluster.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 46_gsl.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 99_system.sql
#Bulk operator required for str.stringleft
#Bulk operator required for str.stringleft

# 15:01:36 >  
# 15:01:36 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-13451" "--port=34237"
# 15:01:36 >  

SCHEMA  tmp
SCHEMA         tmp
SYSTEM SCHEMA  sys
SYSTEM TABLE  sys._columns
SYSTEM TABLE  sys._tables
SYSTEM TABLE  sys.args
SYSTEM TABLE  sys.auths
SYSTEM TABLE  sys.connections
SYSTEM TABLE  sys.db_user_info
SYSTEM TABLE  sys.dependencies
SYSTEM TABLE  sys.functions
SYSTEM TABLE  sys.idxs
SYSTEM TABLE  sys.keys
SYSTEM TABLE  sys.objects
SYSTEM TABLE  sys.privileges
SYSTEM TABLE  sys.schemas
SYSTEM TABLE  sys.sequences
SYSTEM TABLE  sys.statistics
SYSTEM TABLE  sys.storagemodelinput
SYSTEM TABLE  sys.systemfunctions
SYSTEM TABLE  sys.triggers
SYSTEM TABLE  sys.types
SYSTEM TABLE  sys.user_role
SYSTEM VIEW  sys.columns
SYSTEM VIEW  sys.environment
SYSTEM VIEW  sys.optimizers
SYSTEM VIEW  sys.querylog_calls
SYSTEM VIEW  sys.querylog_catalog
SYSTEM VIEW  sys.querylog_history
SYSTEM VIEW  sys.queue
SYSTEM VIEW  sys.sessions
SYSTEM VIEW  sys.storage
SYSTEM VIEW  sys.storagemodel
SYSTEM VIEW  sys.tables
SYSTEM VIEW  sys.tablestoragemodel
SYSTEM VIEW  sys.tracelog
SYSTEM VIEW  sys.users
SYSTEM FUNCTION  sys.Intersect
SYSTEM FUNCTION  sys.Union
SYSTEM FUNCTION  sys.abbrev
SYSTEM FUNCTION  sys.alpha
SYSTEM FUNCTION  sys.analyze
SYSTEM FUNCTION  sys.area
SYSTEM FUNCTION  sys.astext
SYSTEM FUNCTION  sys.bbp
SYSTEM FUNCTION  sys.boundary
SYSTEM FUNCTION  sys.broadcast
SYSTEM FUNCTION  sys.buffer
SYSTEM FUNCTION  sys.chi2prob
SYSTEM FUNCTION  sys.cluster1
SYSTEM FUNCTION  sys.cluster2
SYSTEM FUNCTION  sys.columnsize
SYSTEM FUNCTION  sys.contains
SYSTEM FUNCTION  sys.convexhull
SYSTEM FUNCTION  sys.corr
SYSTEM FUNCTION  sys.crosses
SYSTEM FUNCTION  sys.date_to_str
SYSTEM FUNCTION  sys.db_users
SYSTEM FUNCTION  sys.degrees
SYSTEM FUNCTION  sys.dependencies_columns_on_functions
SYSTEM FUNCTION  sys.dependencies_columns_on_indexes
SYSTEM FUNCTION  sys.dependencies_columns_on_keys
SYSTEM FUNCTION  sys.dependencies_columns_on_triggers
SYSTEM FUNCTION  sys.dependencies_columns_on_views
SYSTEM FUNCTION  sys.dependencies_functions_on_functions
SYSTEM FUNCTION  sys.dependencies_functions_os_triggers
SYSTEM FUNCTION  sys.dependencies_keys_on_foreignkeys
SYSTEM FUNCTION  sys.dependencies_owners_on_schemas
SYSTEM FUNCTION  sys.dependencies_schemas_on_users
SYSTEM FUNCTION  sys.dependencies_tables_on_foreignkeys
SYSTEM FUNCTION  sys.dependencies_tables_on_functions
SYSTEM FUNCTION  sys.dependencies_tables_on_indexes
SYSTEM FUNCTION  sys.dependencies_tables_on_triggers
SYSTEM FUNCTION  sys.dependencies_tables_on_views
SYSTEM FUNCTION  sys.dependencies_views_on_functions
SYSTEM FUNCTION  sys.dependencies_views_on_triggers
SYSTEM FUNCTION  sys.difference
SYSTEM FUNCTION  sys.dimension
SYSTEM FUNCTION  sys.disjoint
SYSTEM FUNCTION  sys.distance
SYSTEM FUNCTION  sys.dropdictionary
SYSTEM FUNCTION  sys.env
SYSTEM FUNCTION  sys.envelope
SYSTEM FUNCTION  sys.environment
SYSTEM FUNCTION  sys.equals
SYSTEM FUNCTION  sys.evalalgebra
SYSTEM FUNCTION  sys.fuse
SYSTEM FUNCTION  sys.geomcollectionfromtext
SYSTEM FUNCTION  sys.geometrytypeid
SYSTEM FUNCTION  sys.geomfromtext
SYSTEM FUNCTION  sys.getanchor
SYSTEM FUNCTION  sys.getbasename
SYSTEM FUNCTION  sys.getcontent
SYSTEM FUNCTION  sys.getcontext
SYSTEM FUNCTION  sys.getdomain
SYSTEM FUNCTION  sys.getextension
SYSTEM FUNCTION  sys.getfile
SYSTEM FUNCTION  sys.gethost
SYSTEM FUNCTION  sys.getport
SYSTEM FUNCTION  sys.getprotocol
SYSTEM FUNCTION  sys.getquery
SYSTEM FUNCTION  sys.getroboturl
SYSTEM FUNCTION  sys.getuser
SYSTEM FUNCTION  sys.gzcompress
SYSTEM FUNCTION  sys.gzdecompress
SYSTEM FUNCTION  sys.gzexpand
SYSTEM FUNCTION  sys.gztruncate
SYSTEM FUNCTION  sys.heapsize
SYSTEM FUNCTION  sys.host
SYSTEM FUNCTION  sys.hostmask
SYSTEM FUNCTION  sys.ilike
SYSTEM FUNCTION  sys.indexsize
SYSTEM FUNCTION  sys.initializedictionary
SYSTEM FUNCTION  sys.intersection
SYSTEM FUNCTION  sys.isaurl
SYSTEM FUNCTION  sys.isempty
SYSTEM FUNCTION  sys.issimple
SYSTEM FUNCTION  sys.json_filter
SYSTEM FUNCTION  sys.json_filter_all
SYSTEM FUNCTION  sys.json_isvalid
SYSTEM FUNCTION  sys.json_isvalidarray
SYSTEM FUNCTION  sys.json_isvalidobject
SYSTEM FUNCTION  sys.json_length
SYSTEM FUNCTION  sys.json_path
SYSTEM FUNCTION  sys.json_text
SYSTEM FUNCTION  sys.length
SYSTEM FUNCTION  sys.like
SYSTEM FUNCTION  sys.linefromtext
SYSTEM FUNCTION  sys.masklen
SYSTEM FUNCTION  sys.mbr
SYSTEM FUNCTION  sys.mbroverlaps
SYSTEM FUNCTION  sys.median
SYSTEM FUNCTION  sys.mlinefromtext
SYSTEM FUNCTION  sys.mpointfromtext
SYSTEM FUNCTION  sys.mpolyfromtext
SYSTEM FUNCTION  sys.ms_round
SYSTEM FUNCTION  sys.ms_str
SYSTEM FUNCTION  sys.ms_stuff
SYSTEM FUNCTION  sys.ms_trunc
SYSTEM FUNCTION  sys.netmask
SYSTEM FUNCTION  sys.network
SYSTEM FUNCTION  sys.newdictionary
SYSTEM FUNCTION  sys.newurl
SYSTEM FUNCTION  sys.optimizer_stats
SYSTEM FUNCTION  sys.optimizers
SYSTEM FUNCTION  sys.overlaps
SYSTEM FUNCTION  sys.password_hash
SYSTEM FUNCTION  sys.pause
SYSTEM FUNCTION  sys.point
SYSTEM FUNCTION  sys.pointfromtext
SYSTEM FUNCTION  sys.polyfromtext
SYSTEM FUNCTION  sys.polygonfromtext
SYSTEM FUNCTION  sys.quantile
SYSTEM FUNCTION  sys.querycache
SYSTEM FUNCTION  sys.querylog
SYSTEM FUNCTION  sys.querylog_calls
SYSTEM FUNCTION  sys.querylog_catalog
SYSTEM FUNCTION  sys.querylog_disable
SYSTEM FUNCTION  sys.querylog_empty
SYSTEM FUNCTION  sys.querylog_enable
SYSTEM FUNCTION  sys.queue
SYSTEM FUNCTION  sys.radians
SYSTEM FUNCTION  sys.relate
SYSTEM FUNCTION  sys.resume
SYSTEM FUNCTION  sys.reuse
SYSTEM FUNCTION  sys.reverse
SYSTEM FUNCTION  sys.sessions
SYSTEM FUNCTION  sys.setmasklen
SYSTEM FUNCTION  sys.setsession
SYSTEM FUNCTION  sys.settimeout
SYSTEM FUNCTION  sys.shrink
SYSTEM FUNCTION  sys.shutdown
SYSTEM FUNCTION  sys.srid
SYSTEM FUNCTION  sys.stddev_pop
SYSTEM FUNCTION  sys.stddev_samp
SYSTEM FUNCTION  sys.stop
SYSTEM FUNCTION  sys.storage
SYSTEM FUNCTION  sys.storagemodel
SYSTEM FUNCTION  sys.storagemodelinit
SYSTEM FUNCTION  sys.str_to_date
SYSTEM FUNCTION  sys.symdifference
SYSTEM FUNCTION  sys.text
SYSTEM FUNCTION  sys.times
SYSTEM FUNCTION  sys.touches
SYSTEM FUNCTION  sys.tracelog
SYSTEM FUNCTION  sys.vacuum
SYSTEM FUNCTION  sys.var
SYSTEM FUNCTION  sys.var_pop
SYSTEM FUNCTION  sys.var_samp
SYSTEM FUNCTION  sys.within
SYSTEM FUNCTION  sys.x
SYSTEM FUNCTION  sys.y
SYSTEM FUNCTION  sys.zorder_decode_x
SYSTEM FUNCTION  sys.zorder_decode_y
SYSTEM FUNCTION  sys.zorder_encode
CREATE SCHEMA "tmp";
CREATE SCHEMA "sys";
CREATE TABLE "sys"."_columns" (
	"id"          INTEGER,
	"name"        VARCHAR(1024),
	"type"        VARCHAR(1024),
	"type_digits" INTEGER,
	"type_scale"  INTEGER,
	"table_id"    INTEGER,
	"default"     VARCHAR(2048),
	"null"        BOOLEAN,
	"number"      INTEGER,
	"storage"     VARCHAR(2048)
);
CREATE TABLE "sys"."_tables" (
	"id"            INTEGER,
	"name"          VARCHAR(1024),
	"schema_id"     INTEGER,
	"query"         VARCHAR(2048),
	"type"          SMALLINT,
	"system"        BOOLEAN,
	"commit_action" SMALLINT,
	"readonly"      BOOLEAN
);
CREATE TABLE "sys"."args" (
	"id"          INTEGER,
	"func_id"     INTEGER,
	"name"        VARCHAR(256),
	"type"        VARCHAR(1024),
	"type_digits" INTEGER,
	"type_scale"  INTEGER,
	"number"      INTEGER
);
CREATE TABLE "sys"."auths" (
	"id"      INTEGER,
	"name"    VARCHAR(1024),
	"grantor" INTEGER
);
CREATE TABLE "sys"."connections" (
	"id"       INTEGER,
	"server"   CHAR(1024),
	"port"     INTEGER,
	"db"       CHAR(64),
	"db_alias" CHAR(1024),
	"user"     CHAR(1024),
	"password" CHAR(1024),
	"language" CHAR(1024)
);
CREATE TABLE "sys"."db_user_info" (
	"name"           VARCHAR(1024),
	"fullname"       VARCHAR(2048),
	"default_schema" INTEGER
);
CREATE TABLE "sys"."dependencies" (
	"id"          INTEGER,
	"depend_id"   INTEGER,
	"depend_type" SMALLINT
);
CREATE TABLE "sys"."functions" (
	"id"          INTEGER,
	"name"        VARCHAR(256),
	"func"        VARCHAR(8196),
	"mod"         VARCHAR(8196),
	"sql"         BOOLEAN,
	"type"        INTEGER,
	"side_effect" BOOLEAN,
	"schema_id"   INTEGER
);
CREATE TABLE "sys"."idxs" (
	"id"       INTEGER,
	"table_id" INTEGER,
	"type"     INTEGER,
	"name"     VARCHAR(1024)
);
CREATE TABLE "sys"."keys" (
	"id"       INTEGER,
	"table_id" INTEGER,
	"type"     INTEGER,
	"name"     VARCHAR(1024),
	"rkey"     INTEGER,
	"action"   INTEGER
);
CREATE TABLE "sys"."objects" (
	"id"   INTEGER,
	"name" VARCHAR(1024),
	"nr"   INTEGER
);
CREATE TABLE "sys"."privileges" (
	"obj_id"     INTEGER,
	"auth_id"    INTEGER,
	"privileges" INTEGER,
	"grantor"    INTEGER,
	"grantable"  INTEGER
);
CREATE TABLE "sys"."schemas" (
	"id"            INTEGER,
	"name"          VARCHAR(1024),
	"authorization" INTEGER,
	"owner"         INTEGER
);
CREATE TABLE "sys"."sequences" (
	"id"        INTEGER,
	"schema_id" INTEGER,
	"name"      VARCHAR(256),
	"start"     BIGINT,
	"minvalue"  BIGINT,
	"maxvalue"  BIGINT,
	"increment" BIGINT,
	"cacheinc"  BIGINT,
	"cycle"     BOOLEAN
);
CREATE TABLE "sys"."statistics" (
	"schema" CHARACTER LARGE OBJECT,
	"table"  CHARACTER LARGE OBJECT,
	"column" CHARACTER LARGE OBJECT,
	"type"   CHARACTER LARGE OBJECT,
	"width"  INTEGER,
	"stamp"  TIMESTAMP,
	"sample" BIGINT,
	"count"  BIGINT,
	"unique" BIGINT,
	"nils"   BIGINT,
	"minval" CHARACTER LARGE OBJECT,
	"maxval" CHARACTER LARGE OBJECT,
	"sorted" BOOLEAN
);
CREATE TABLE "sys"."storagemodelinput" (
	"schema"    CHARACTER LARGE OBJECT,
	"table"     CHARACTER LARGE OBJECT,
	"column"    CHARACTER LARGE OBJECT,
	"type"      CHARACTER LARGE OBJECT,
	"typewidth" INTEGER,
	"count"     BIGINT,
	"distinct"  BIGINT,
	"atomwidth" INTEGER,
	"reference" BOOLEAN,
	"sorted"    BOOLEAN
);
CREATE TABLE "sys"."systemfunctions" (
	"function_id" INTEGER
);
CREATE TABLE "sys"."triggers" (
	"id"          INTEGER,
	"name"        VARCHAR(1024),
	"table_id"    INTEGER,
	"time"        SMALLINT,
	"orientation" SMALLINT,
	"event"       SMALLINT,
	"old_name"    VARCHAR(1024),
	"new_name"    VARCHAR(1024),
	"condition"   VARCHAR(2048),
	"statement"   VARCHAR(2048)
);
CREATE TABLE "sys"."types" (
	"id"         INTEGER,
	"systemname" VARCHAR(256),
	"sqlname"    VARCHAR(1024),
	"digits"     INTEGER,
	"scale"      INTEGER,
	"radix"      INTEGER,
	"eclass"     INTEGER,
	"schema_id"  INTEGER
);
CREATE TABLE "sys"."user_role" (
	"login_id" INTEGER,
	"role_id"  INTEGER
);
SELECT * FROM (SELECT p.* FROM "sys"."_columns" AS p UNION ALL SELECT t.* FROM "tmp"."_columns" AS t) AS columns;
create view sys.environment as select * from sys.environment();
create view sys.optimizers as select * from sys.optimizers();
create view sys.querylog_calls as select * from sys.querylog_calls();
-- create table views for convenience
create view sys.querylog_catalog as select * from sys.querylog_catalog();
create view sys.querylog_history as
select qd.*, ql."start",ql."stop", ql.arguments, ql.tuples, ql.run, ql.ship, ql.cpu, ql.space, ql.io 
from sys.querylog_catalog() qd, sys.querylog_calls() ql
where qd.id = ql.id and qd.owner = user;
create view sys.queue as select * from sys.queue();
create view sys.sessions as select * from sys.sessions();
create view sys.storage as select * from sys.storage();
create view sys.storagemodel as select * from sys.storagemodel();
SELECT * FROM (SELECT p.*, 0 AS "temporary" FROM "sys"."_tables" AS p UNION ALL SELECT t.*, 1 AS "temporary" FROM "tmp"."_tables" AS t) AS tables where tables.type <> 2;
-- A summary of the table storage requirement is is available as a table view.
-- The auxillary column denotes the maximum space if all non-sorted columns
-- would be augmented with a hash (rare situation)
create view sys.tablestoragemodel
as select "schema","table",max(count) as "count",
	sum(columnsize) as columnsize,
	sum(heapsize) as heapsize,
	sum(indices) as indices,
	sum(case when sorted = false then 8 * count else 0 end) as auxillary
from sys.storagemodel() group by "schema","table";
create view sys.tracelog as select * from sys.tracelog();
SELECT u."name" AS "name", ui."fullname", ui."default_schema" FROM db_users() AS u LEFT JOIN "sys"."db_user_info" AS ui ON u."name" = ui."name" ;
create function "abbrev" (p inet) returns clob
	external name inet."abbrev";
create function alpha(pdec double, pradius double)
returns double external name sql.alpha;
create procedure analyze()
external name sql.analyze;
create procedure analyze(tbl string)
external name sql.analyze;
create procedure analyze(sch string, tbl string)
external name sql.analyze;
create procedure analyze(sch string, tbl string, col string)
external name sql.analyze;
-- control the sample size
create procedure analyze("sample" bigint)
external name sql.analyze;
create procedure analyze(tbl string, "sample" bigint)
external name sql.analyze;
create procedure analyze(sch string, tbl string, "sample" bigint)
external name sql.analyze;
create procedure analyze(sch string, tbl string, col string, "sample" bigint)
external name sql.analyze;
-- ogc Spatial Analysis methods

create function area(g geometry) returns float external name geom."Area";
create function astext(g geometry) returns string external name geom."AsText";
-- The BAT buffer pool overview
create function sys.bbp () 
	returns table (id int, name string, htype string, 
		ttype string, count bigint, refcnt int, lrefcnt int, 
		location string, heat int, dirty string, 
		status string, kind string) 
	external name sql.bbp;
create function boundary(g geometry) returns geometry external name geom."Boundary";
create function "broadcast" (p inet) returns inet 
	external name inet."broadcast";
create function buffer(a geometry, distance float) returns geometry external name geom."Buffer";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- Clustering a relational table should be done with care.
-- For, the oid's are used in join-indices.

-- Clustering of tables may improve IO performance
-- The foreign key constraints should be dropped before
-- and re-established after the cluster operation.

create procedure cluster1(sys string, tab string)
	external name sql.cluster1;
create procedure cluster2(sys string, tab string)
	external name sql.cluster2;
-- The predicted storage footprint of the complete database
-- determines the amount of diskspace needed for persistent storage
-- and the upperbound when all possible index structures are created.
-- The storage requirement for foreign key joins is split amongst the participants.

create function sys.columnsize(nme string, i bigint, d bigint)
returns bigint
begin
	case
	when nme = 'boolean' then return i;
	when nme = 'char' then return 2*i;
	when nme = 'smallint' then return 2 * i;
	when nme = 'int'	 then return 4 * i;
	when nme = 'bigint'	 then return 8 * i;
	when nme = 'timestamp' then return 8 * i;
	when  nme = 'varchar' then
		case
		when cast(d as bigint) << 8 then return i;
		when cast(d as bigint) << 16 then return 2 * i;
		when cast(d as bigint) << 32 then return 4 * i;
		else return 8 * i;
		end case;
	else return 8 * i;
	end case;
end;
create function contains(a geometry, b geometry) returns boolean external name geom."Contains";
create function convexhull(a geometry) returns geometry external name geom."ConvexHull";
create aggregate corr(e1 tinyint, e2 tinyint) returns tinyint
	external name "aggr"."corr";
create aggregate corr(e1 smallint, e2 smallint) returns smallint
	external name "aggr"."corr";
create aggregate corr(e1 integer, e2 integer) returns integer
	external name "aggr"."corr";
create aggregate corr(e1 wrd, e2 wrd) returns wrd
	external name "aggr"."corr";
create aggregate corr(e1 bigint, e2 bigint) returns bigint
	external name "aggr"."corr";
create aggregate corr(e1 real, e2 real) returns real
	external name "aggr"."corr";
create aggregate corr(e1 double, e2 double) returns double
	external name "aggr"."corr";
create function crosses(a geometry, b geometry) returns boolean external name geom."Crosses";
create function date_to_str(d date, format string) returns string
	external name mtime."date_to_str";
CREATE FUNCTION db_users () RETURNS TABLE( name varchar(2048)) EXTERNAL NAME sql.db_users;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create function degrees(r double) 
returns double
	return r*180/pi();
--Column c has a dependency on function f
create function dependencies_columns_on_functions()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select c.name, f.name, 'DEP_FUNC' from functions as f, columns as c, dependencies as dep where c.id = dep.id and f.id = dep.depend_id and dep.depend_type = 7);
--Column c has a dependency on index i 
create function dependencies_columns_on_indexes()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select c.name, i.name, 'DEP_INDEX' from columns as c, objects as kc, idxs as i where kc."name" = c.name and kc.id = i.id and c.table_id = i.table_id and i.name not in (select name from keys));
--Column c has a dependency on key k
create function dependencies_columns_on_keys()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select c.name, k.name, 'DEP_KEY' from columns as c, objects as kc, keys as k where kc."name" = c.name and kc.id = k.id and k.table_id = c.table_id and k.rkey = -1);
--Column c has a dependency on trigger tri
create function dependencies_columns_on_triggers()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select c.name, tri.name, 'DEP_TRIGGER' from columns as c, triggers as tri, dependencies as dep where dep.id = c.id and dep.depend_id =tri.id and dep.depend_type = 8);
--Column c has a dependency on view v
create function dependencies_columns_on_views()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select c.name, v.name, 'DEP_VIEW' from columns as c, tables as v, dependencies as dep where c.id = dep.id and v.id = dep.depend_id and dep.depend_type = 5 and v.type = 1);
--Function f1 has a dependency on function f2
create function dependencies_functions_on_functions()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select f1.name, f2.name, 'DEP_FUNC' from functions as f1, functions as f2, dependencies as dep where f1.id = dep.id and f2.id = dep.depend_id and dep.depend_type = 7);
--Function f1 has a dependency on trigger tri
create function dependencies_functions_os_triggers()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select f.name, tri.name, 'DEP_TRIGGER' from functions as f, triggers as tri, dependencies as dep where dep.id = f.id and dep.depend_id =tri.id and dep.depend_type = 8);
--Key k has a dependency on foreign key fk
create function dependencies_keys_on_foreignkeys()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select k.name, fk.name, 'DEP_FKEY' from keys as k, keys as fk where fk.rkey = k.id);
--User (owner) has a dependency in schema s
create function dependencies_owners_on_schemas()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select a.name, s.name, 'DEP_SCHEMA' from schemas as s, auths a where s.owner = a.id);
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

--Schema s has a dependency on user u
create function dependencies_schemas_on_users()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select s.name, u.name, 'DEP_USER' from schemas as s, users u where u.default_schema = s.id);
--Table t has a dependency on foreign key k
create function dependencies_tables_on_foreignkeys()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select t.name, fk.name, 'DEP_FKEY' from tables as t, keys as k, keys as fk where fk.rkey = k.id and k.table_id = t.id);
--Table t has a dependency on function f
create function dependencies_tables_on_functions()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select t.name, f.name, 'DEP_FUNC' from functions as f, tables as t, dependencies as dep where t.id = dep.id and f.id = dep.depend_id and dep.depend_type = 7 and t.type = 0);
--Table t has a dependency on index  i
create function dependencies_tables_on_indexes()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select t.name, i.name, 'DEP_INDEX' from tables as t, idxs as i where i.table_id = t.id and i.name not in (select name from keys) and t.type = 0);
--Table t has a dependency on trigger tri

create function dependencies_tables_on_triggers()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table ((select t.name, tri.name, 'DEP_TRIGGER' from tables as t, triggers as tri where tri.table_id = t.id) union (select t.name, tri.name, 'DEP_TRIGGER' from triggers tri, tables t, dependencies dep where dep.id = t.id and dep.depend_id =tri.id and dep.depend_type = 8));
--Table t has a dependency on view v
create function dependencies_tables_on_views()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select t.name, v.name, 'DEP_VIEW' from tables as t, tables as v, dependencies as dep where t.id = dep.id and v.id = dep.depend_id and dep.depend_type = 5 and v.type = 1);
--View v has a dependency on function f
create function dependencies_views_on_functions()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select v.name, f.name, 'DEP_FUNC' from functions as f, tables as v, dependencies as dep where v.id = dep.id and f.id = dep.depend_id and dep.depend_type = 7 and v.type = 1);
--View v has a dependency on trigger tri
create function dependencies_views_on_triggers()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select v.name, tri.name, 'DEP_TRIGGER' from tables as v, triggers as tri, dependencies as dep where dep.id = v.id and dep.depend_id =tri.id and dep.depend_type = 8 and v.type = 1);
create function difference(a geometry, b geometry) returns geometry external name geom."Difference";
-- CREATE FUNCTION Point(g Geometry) RETURNS Point external name geom.point;
-- CREATE FUNCTION Curve(g Geometry) RETURNS Curve external name geom.curve;
-- CREATE FUNCTION LineString(g Geometry) RETURNS LineString external name geom.linestring;
-- CREATE FUNCTION Surface(g Geometry) RETURNS Surface external name geom.surface;
-- CREATE FUNCTION Polygon(g Geometry) RETURNS Polygon external name geom.polygon;

-- ogc basic methods
create function dimension(g geometry) returns integer external name geom."Dimension";
create function disjoint(a geometry, b geometry) returns boolean external name geom."Disjoint";
create function distance(a geometry, b geometry) returns float external name geom."Distance";
create procedure dropdictionary (s string, t string)
    external name sql.dropdictionary;
CREATE FUNCTION env () RETURNS TABLE( name varchar(1024), value varchar(2048)) EXTERNAL NAME sql.sql_environment;
create function envelope(g geometry) returns geometry external name geom."Envelope";
-- The environment table
create function sys.environment()
	returns table ("name" string, value string)
	external name sql.sql_environment;
-- ogc spatial relation methods
create function equals(a geometry, b geometry) returns boolean external name geom."Equals";
create procedure sys.evalalgebra( ra_stmt string, opt bool)
	external name sql."evalAlgebra";
-- fuse two (1-byte) tinyint values into one (2-byte) smallint value
create function fuse(one tinyint, two tinyint)
returns smallint external name udf.fuse;
-- fuse two (2-byte) smallint values into one (4-byte) integer value
create function fuse(one smallint, two smallint)
returns integer external name udf.fuse;
-- fuse two (4-byte) integer values into one (8-byte) bigint value
create function fuse(one integer, two integer)
returns bigint external name udf.fuse;
create function geomcollectionfromtext(wkt string, srid smallint) returns multipolygon external name geom."GeomCollectionFromText";
create function geometrytypeid(g geometry) returns integer external name geom."GeometryTypeId";
-- The srid in the *FromText Functions is currently not used
create function geomfromtext(wkt string, srid smallint) returns geometry external name geom."GeomFromText";
create function getanchor( theurl url ) returns string 
	external name url."getAnchor";
create function getbasename(theurl url) returns string       
	external name url."getBasename";
create function getcontent(theurl url)   returns string       
	external name url."getContent";
create function getcontext(theurl url)   returns string       
	external name url."getContext";
create function getdomain(theurl url) returns string       
	external name url."getDomain";
create function getextension(theurl url) returns string       
	external name url."getExtension";
create function getfile(theurl url) returns string       
	external name url."getFile";
create function gethost(theurl url)   returns string       
	external name url."getHost";
create function getport(theurl url) returns string       
	external name url."getPort";
create function getprotocol(theurl url) returns string       
	external name url."getProtocol";
create function getquery(theurl url) returns string       
	external name url."getQuery";
create function getroboturl(theurl url) returns string       
	external name url."getRobotURL";
create function getuser(theurl url) returns string       
	external name url."getUser";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- Perform LZ-compression over a specific table;
create procedure gzcompress (s string, t string)
    external name sql.gzcompress;
create procedure gzdecompress (s string, t string)
    external name sql.gzdecompress;
-- Remove the compressed images
create procedure gzexpand (s string, t string)
    external name sql.gzexpand;
-- Truncate the storage for columns with a compressed image
create procedure gztruncate (s string, t string)
    external name sql.gztruncate;
create function sys.heapsize(tpe string, i bigint, w int)
returns bigint
begin
	if  tpe <> 'varchar' and tpe <> 'clob'
	then
		return 0;
	end if;
	return 10240 + i * w;
end;
create function "host" (p inet) returns clob
	external name inet."host";
create function "hostmask" (p inet) returns inet
	external name inet."hostmask";
create filter function "ilike"(val string, pat string, esc string) external name algebra.ilikesubselect;
create function sys.indexsize(b boolean, i bigint)
returns bigint
begin
	-- assume non-compound keys
	if  b = true
	then
		return 8 * i;
	end if;
	return 0;
end;
create procedure initializedictionary ()
    external name dictionary.initialize;
create function intersection(a geometry, b geometry) returns geometry external name geom."Intersection";
create function isaurl(theurl url) returns bool
	external name url."isaURL";
create function isempty(g geometry) returns boolean external name geom."IsEmpty";
create function issimple(g geometry) returns boolean external name geom."IsSimple";
-- access the top level key by name, return its value
create function sys.json_filter(js json, name string)
returns json external name json.filter;
create function sys.json_filter_all(js json, name string)
returns json external name json.filterall;
-- test string for JSON compliancy
create function sys.json_isvalid(js string)
returns bool external name json.isvalid;
create function sys.json_isvalidarray(js string)
returns bool external name json.isvalidarray;
create function sys.json_isvalidobject(js string)
returns bool external name json.isvalidobject;
-- return the number of primary components
create function sys.json_length(js json)
returns integer external name json.length;
-- a simple path extractor
create function sys.json_path(js json, e string)
returns json external name json.path;
-- a simple path extractor as plain text
create function sys.json_text(js json, e string)
returns string external name json.text;
create function length(g geometry) returns float external name geom."Length";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create filter function "like"(val string, pat string, esc string) external name algebra.likesubselect;
create function linefromtext(wkt string, srid smallint) returns linestring external name geom."LineFromText";
create function "masklen" (p inet) returns int
	external name inet."masklen";
-- currently we only use mbr instead of
-- Envelope():Geometry
-- as that returns Geometry objects, and we prefer the explicit mbr's
-- minimum bounding rectangle (mbr)
create function mbr (g geometry) returns mbr external name geom.mbr;
create function mbroverlaps(a mbr, b mbr) returns boolean external name geom."mbroverlaps";
create aggregate median(val tinyint) returns tinyint
	external name "aggr"."median";
create aggregate median(val smallint) returns smallint
	external name "aggr"."median";
create aggregate median(val integer) returns integer
	external name "aggr"."median";
create aggregate median(val wrd) returns wrd
	external name "aggr"."median";
create aggregate median(val bigint) returns bigint
	external name "aggr"."median";
create aggregate median(val decimal) returns decimal
 	external name "aggr"."median";
create aggregate median(val real) returns real
	external name "aggr"."median";
create aggregate median(val double) returns double
	external name "aggr"."median";
create aggregate median(val date) returns date
	external name "aggr"."median";
create aggregate median(val time) returns time
	external name "aggr"."median";
create aggregate median(val timestamp) returns timestamp
	external name "aggr"."median";
create function mlinefromtext(wkt string, srid smallint) returns multilinestring external name geom."MultiLineFromText";
create function mpointfromtext(wkt string, srid smallint) returns multipoint external name geom."MultiPointFromText";
create function mpolyfromtext(wkt string, srid smallint) returns multipolygon external name geom."MultiPolyFromText";
create function ms_round(num double, prc int, truncat int)
returns double
begin
	if (truncat = 0)
		then return round(num, prc);
		else return ms_trunc(num, prc);
	end if;
end;
create function ms_str(num float, prc int, truncat int)
returns string
begin
        return cast(num as string);
end;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create function ms_stuff( s1 varchar(32), st int, len int, s3 varchar(32))
returns varchar(32)
begin
	declare res varchar(32), aux varchar(32);
	declare ofset int;

    if ( st < 0 or st > length(s1))
        then return '';
    end if;

    set ofset = 1;
    set res = substring(s1,ofset,st-1);
    set res = res || s3;
    set ofset = st + len;
    set aux = substring(s1,ofset,length(s1)-ofset+1);
	set res = res || aux;
	return res;
end;
create function ms_trunc(num double, prc int)
returns double
external name sql.ms_trunc;
create function "netmask" (p inet) returns inet
	external name inet."netmask";
create function "network" (p inet) returns inet
	external name inet."network";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create procedure newdictionary (s string, t string)
    external name sql.newdictionary;
create function newurl(protocol string, hostname string, "port" int, file string) 
	returns url       
	external name url."new";
create function newurl(protocol string, hostname string, file string) 
	returns url 
	external name url."new";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- show the optimizer statistics maintained by the SQL frontend
create function sys.optimizer_stats () 
	returns table (rewrite string, count int) 
	external name sql.dump_opt_stats;
-- MONETDB KERNEL SECTION
-- optimizer pipe catalog
create function sys.optimizers () 
	returns table (name string, def string, status string)
	external name sql.optimizers;
create function overlaps(a geometry, b geometry) returns boolean external name geom."Overlaps";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create function sys.password_hash (username string) 
	returns string 
	external name sql.password;
-- operations to manipulate the state of havoc queries
create procedure sys.pause(tag int)
external name sql.sysmon_pause;
create procedure sys.pause(tag bigint)
external name sql.sysmon_pause;
create function point(x double,y double) returns point external name geom.point;
create function pointfromtext(wkt string, srid smallint) returns point external name geom."PointFromText";
create function polyfromtext(wkt string, srid smallint) returns polygon external name geom."PolyFromText";
-- alias
create function polygonfromtext(wkt string, srid smallint) returns polygon external name geom."PolyFromText";
create aggregate quantile(val tinyint, q double) returns tinyint
 	external name "aggr"."quantile";
create aggregate quantile(val smallint, q double) returns smallint
 	external name "aggr"."quantile";
create aggregate quantile(val integer, q double) returns integer
 	external name "aggr"."quantile";
create aggregate quantile(val wrd, q double) returns wrd
	external name "aggr"."quantile";
create aggregate quantile(val bigint, q double) returns bigint
	external name "aggr"."quantile";
create aggregate quantile(val decimal, q double) returns decimal
 	external name "aggr"."quantile";
create aggregate quantile(val real, q double) returns real
	external name "aggr"."quantile";
create aggregate quantile(val double, q double) returns double
	external name "aggr"."quantile";
create aggregate quantile(val date, q double) returns date
	external name "aggr"."quantile";
create aggregate quantile(val time, q double) returns time
	external name "aggr"."quantile";
create aggregate quantile(val timestamp, q double) returns timestamp
	external name "aggr"."quantile";
-- SQL QUERY CACHE
-- The SQL query cache returns a table with the query plans kept

create function sys.querycache() 
	returns table (query string, count int) 
	external name sql.dump_cache;
-- Trace the SQL input
create procedure sys.querylog(filename string) 
	external name sql.logfile;
-- Each query call is stored in the table calls
-- At regular intervals the query history table should be cleaned.
-- This can be done manually on the SQL console, or be integrated
-- in the keepQuery and keepCall upon need.
-- The parameters are geared at understanding the resource claims
-- They reflect the effect of the total workload mix during execution.
-- The 'cpu' gives the average cpu load percentage over all cores on the 
-- server during execution phase. 
-- increasing cpu load indicates better use of multi-cores.
-- The 'io' indicate IOs during complete query run.
-- The 'space' is the total amount of intermediates created in MB.
-- Reducing the space component improves performance/
-- All timing in usec and all storage in bytes.

create function sys.querylog_calls()
returns table(
	id oid,				 -- references query plan
	"start" timestamp,	-- time the statement was started
	"stop" timestamp,	-- time the statement was completely finished
	arguments string,	-- actual call structure
	tuples wrd,			-- number of tuples in the result set
	run bigint,		-- time spent (in usec)  until the result export
	ship bigint,		-- time spent (in usec)  to ship the result set
	cpu int,  		-- average cpu load percentage during execution
	io int,			-- percentage time waiting for IO to finish 
	space bigint		-- total storage size of intermediates created (in MB)
)
external name sql.querylog_calls;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- QUERY HISTORY
-- The query history mechanism of MonetDB/SQL relies on a few hooks.
-- The most important one is a global system variable which controls
--  monitoring of all sessions. 

create function sys.querylog_catalog()
returns table(
	id oid,
	owner string,
	defined timestamp,
	query string,
	pipe string,
	mal int,			-- size of MAL plan
	optimize bigint 	-- time in usec
)
external name sql.querylog_catalog;
create procedure sys.querylog_disable()
external name sql.querylog_disable;
-- reset history for a particular user
create procedure sys.querylog_empty()
external name sql.querylog_empty;
-- manipulate the query logger
create procedure sys.querylog_enable()
external name sql.querylog_enable;
create procedure sys.querylog_enable(threshold smallint)
external name sql.querylog_enable_threshold;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- System monitoring

-- show status of all active SQL queries.
create function sys.queue()
returns table(
	qtag bigint,
	"user" string,
	started timestamp,
	estimate timestamp,
	progress int,
	status string,
	tag oid,
	query string
)
external name sql.sysmon_queue;
create function radians(d double) 
returns double
	return d*pi()/180;
create function relate(a geometry, b geometry, pattern string) returns boolean external name geom."Relate";
create procedure sys.resume(tag int)
external name sql.sysmon_resume;
create procedure sys.resume(tag bigint)
external name sql.sysmon_resume;
create procedure reuse(sys string, tab string)
	external name sql.reuse;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- add function signatures to SQL catalog


-- Reverse a string
create function reverse(src string)
returns string external name udf.reverse;
create function sys.sessions()
returns table("user" string, "login" timestamp, "sessiontimeout" bigint, "lastcommand" timestamp, "querytimeout" bigint, "active" bool)
external name sql.sessions;
create function "setmasklen" (p inet, mask int) returns inet
	external name inet."setmasklen";
create procedure sys.setsession("timeout" bigint)
	external name sql.setsession;
-- control the query and session time out 
create procedure sys.settimeout("query" bigint)
	external name sql.settimeout;
create procedure sys.settimeout("query" bigint, "session" bigint)
	external name sql.settimeout;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- Vacuum a relational table should be done with care.
-- For, the oid's are used in join-indices.

-- Vacuum of tables may improve IO performance and disk footprint.
-- The foreign key constraints should be dropped before
-- and re-established after the cluster operation.

create procedure shrink(sys string, tab string)
	external name sql.shrink;
create procedure sys.shutdown(delay tinyint) 
external name sql.shutdown;
create procedure sys.shutdown(delay tinyint, force bool) 
external name sql.shutdown;
create function srid(g geometry) returns integer external name geom."SRID";
create aggregate stddev_pop(val tinyint) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val smallint) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val integer) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val wrd) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val bigint) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val real) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val double) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val date) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val time) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val timestamp) returns double
	external name "aggr"."stdevp";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create aggregate stddev_samp(val tinyint) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val smallint) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val integer) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val wrd) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val bigint) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val real) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val double) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val date) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val time) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val timestamp) returns double
	external name "aggr"."stdev";
create procedure sys.stop(tag int)
external name sql.sysmon_stop;
create procedure sys.stop(tag bigint)
external name sql.sysmon_stop;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.


-- Author M.Kersten
-- This script gives the database administrator insight in the actual
-- footprint of the persistent tables and the maximum playground used
-- when indices are introduced upon them.
-- By chancing the storagemodelinput table directly, the footprint for
-- yet to be loaded databases can be assessed.

-- The actual storage footprint of an existing database can be
-- obtained by the table procuding function storage()
-- It represents the actual state of affairs, i.e. storage on disk
-- of columns and foreign key indices, and possible temporary hash indices.
-- For strings we take a sample to determine their average length.

create function sys.storage()
returns table ("schema" string, "table" string, "column" string, "type" string, location string, "count" bigint, typewidth int, columnsize bigint, heapsize bigint, indices bigint, sorted boolean)
external name sql.storage;
create function sys.storagemodel()
returns table (
	"schema" string,
	"table" string,
	"column" string,
	"type" string,
	"count"	bigint,
	columnsize bigint,
	heapsize bigint,
	indices bigint,
	sorted boolean)
begin
	return select i."schema", i."table", i."column", i."type", i."count",
	columnsize(i."type", i.count, i."distinct"),
	heapsize(i."type", i."distinct", i."atomwidth"),
	indexsize(i."reference", i."count"),
	i.sorted
	from sys.storagemodelinput i;
end;
-- this table can be adjusted to reflect the anticipated final database size

-- The model input can be derived from the current database using
create procedure sys.storagemodelinit()
begin
	delete from sys.storagemodelinput;

	insert into sys.storagemodelinput
	select x."schema", x."table", x."column", x."type", x.typewidth, x.count, 0, x.typewidth, false, x.sorted from sys.storage() x;

	update sys.storagemodelinput
	set reference = true
	where concat(concat("schema","table"), "column") in (
		select concat( concat("fkschema"."name", "fktable"."name"), "fkkeycol"."name" )
		from	"sys"."keys" as    "fkkey",
				"sys"."objects" as "fkkeycol",
				"sys"."tables" as  "fktable",
				"sys"."schemas" as "fkschema"
		where   "fktable"."id" = "fkkey"."table_id"
			and "fkkey"."id" = "fkkeycol"."id"
			and "fkschema"."id" = "fktable"."schema_id"
			and "fkkey"."rkey" > -1);

	update sys.storagemodelinput
	set "distinct" = "count" -- assume all distinct
	where "type" = 'varchar' or "type"='clob';
end;

-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create function str_to_date(s string, format string) returns date
	external name mtime."str_to_date";
create function symdifference(a geometry, b geometry) returns geometry external name geom."SymDifference";
create function "text" (p inet) returns clob
	external name inet."text";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- Provide a simple equivalent for the UNIX times command
-- times 0 ms user 0 ms system 0 ms 0 reads 0 writes

create procedure times()
external name sql.times;
create function touches(a geometry, b geometry) returns boolean external name geom."Touches";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- make the offline tracing table available for inspection
create function sys.tracelog() 
	returns table (
		event integer,		-- event counter
		clk varchar(20), 	-- wallclock, no mtime in kernel
		pc varchar(50), 	-- module.function[nr]
		thread int, 		-- thread identifier
		"user" int, 		-- user identifier
		ticks bigint, 		-- time in microseconds
		reads bigint, 		-- number of blocks read
		writes bigint, 	-- number of blocks written
		rbytes bigint,		-- amount of bytes touched
		wbytes bigint,		-- amount of bytes written
		type string,		-- return types
		stmt string			-- actual statement executed
	)
	external name sql.dump_trace;
create procedure vacuum(sys string, tab string)
	external name sql.vacuum;
CREATE FUNCTION var() RETURNS TABLE( name varchar(1024)) EXTERNAL NAME sql.sql_variables;
create aggregate var_pop(val tinyint) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val smallint) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val integer) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val wrd) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val bigint) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val real) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val double) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val date) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val time) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val timestamp) returns double
	external name "aggr"."variancep";
create aggregate var_samp(val tinyint) returns double
	external name "aggr"."variance";
create aggregate var_samp(val smallint) returns double
	external name "aggr"."variance";
create aggregate var_samp(val integer) returns double
	external name "aggr"."variance";
create aggregate var_samp(val wrd) returns double
	external name "aggr"."variance";
create aggregate var_samp(val bigint) returns double
	external name "aggr"."variance";
create aggregate var_samp(val real) returns double
	external name "aggr"."variance";
create aggregate var_samp(val double) returns double
	external name "aggr"."variance";
create aggregate var_samp(val date) returns double
	external name "aggr"."variance";
create aggregate var_samp(val time) returns double
	external name "aggr"."variance";
create aggregate var_samp(val timestamp) returns double
	external name "aggr"."variance";
create function within(a geometry, b geometry) returns boolean external name geom."Within";
create function x(g geometry) returns double external name geom."X";
create function y(g geometry) returns double external name geom."Y";
create function zorder_decode_x(z oid) returns integer
    external name zorder.decode_x;
create function zorder_decode_y(z oid) returns integer
    external name zorder.decode_y;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create function zorder_encode(x integer, y integer) returns oid
    external name zorder.encode;
START TRANSACTION;
CREATE TABLE "sys"."_columns" (
	"id"          INTEGER,
	"name"        VARCHAR(1024),
	"type"        VARCHAR(1024),
	"type_digits" INTEGER,
	"type_scale"  INTEGER,
	"table_id"    INTEGER,
	"default"     VARCHAR(2048),
	"null"        BOOLEAN,
	"number"      INTEGER,
	"storage"     VARCHAR(2048)
);
COPY 418 RECORDS INTO "sys"."_columns" FROM stdin USING DELIMITERS '\t','\n','"';
2002	"id"	"int"	32	0	2001	NULL	true	0	NULL
2003	"name"	"varchar"	1024	0	2001	NULL	true	1	NULL
2004	"authorization"	"int"	32	0	2001	NULL	true	2	NULL
2005	"owner"	"int"	32	0	2001	NULL	true	3	NULL
2007	"id"	"int"	32	0	2006	NULL	true	0	NULL
2008	"systemname"	"varchar"	256	0	2006	NULL	true	1	NULL
2009	"sqlname"	"varchar"	1024	0	2006	NULL	true	2	NULL
2010	"digits"	"int"	32	0	2006	NULL	true	3	NULL
2011	"scale"	"int"	32	0	2006	NULL	true	4	NULL
2012	"radix"	"int"	32	0	2006	NULL	true	5	NULL
2013	"eclass"	"int"	32	0	2006	NULL	true	6	NULL
2014	"schema_id"	"int"	32	0	2006	NULL	true	7	NULL
2016	"id"	"int"	32	0	2015	NULL	true	0	NULL
2017	"name"	"varchar"	256	0	2015	NULL	true	1	NULL
2018	"func"	"varchar"	8196	0	2015	NULL	true	2	NULL
2019	"mod"	"varchar"	8196	0	2015	NULL	true	3	NULL
2020	"sql"	"boolean"	1	0	2015	NULL	true	4	NULL
2021	"type"	"int"	32	0	2015	NULL	true	5	NULL
2022	"side_effect"	"boolean"	1	0	2015	NULL	true	6	NULL
2023	"schema_id"	"int"	32	0	2015	NULL	true	7	NULL
2025	"id"	"int"	32	0	2024	NULL	true	0	NULL
2026	"func_id"	"int"	32	0	2024	NULL	true	1	NULL
2027	"name"	"varchar"	256	0	2024	NULL	true	2	NULL
2028	"type"	"varchar"	1024	0	2024	NULL	true	3	NULL
2029	"type_digits"	"int"	32	0	2024	NULL	true	4	NULL
2030	"type_scale"	"int"	32	0	2024	NULL	true	5	NULL
2031	"number"	"int"	32	0	2024	NULL	true	6	NULL
2033	"id"	"int"	32	0	2032	NULL	true	0	NULL
2034	"schema_id"	"int"	32	0	2032	NULL	true	1	NULL
2035	"name"	"varchar"	256	0	2032	NULL	true	2	NULL
2036	"start"	"bigint"	64	0	2032	NULL	true	3	NULL
2037	"minvalue"	"bigint"	64	0	2032	NULL	true	4	NULL
2038	"maxvalue"	"bigint"	64	0	2032	NULL	true	5	NULL
2039	"increment"	"bigint"	64	0	2032	NULL	true	6	NULL
2040	"cacheinc"	"bigint"	64	0	2032	NULL	true	7	NULL
2041	"cycle"	"boolean"	1	0	2032	NULL	true	8	NULL
2043	"id"	"int"	32	0	2042	NULL	true	0	NULL
2044	"depend_id"	"int"	32	0	2042	NULL	true	1	NULL
2045	"depend_type"	"smallint"	16	0	2042	NULL	true	2	NULL
2047	"id"	"int"	32	0	2046	NULL	true	0	NULL
2048	"server"	"char"	1024	0	2046	NULL	true	1	NULL
2049	"port"	"int"	32	0	2046	NULL	true	2	NULL
2050	"db"	"char"	64	0	2046	NULL	true	3	NULL
2051	"db_alias"	"char"	1024	0	2046	NULL	true	4	NULL
2052	"user"	"char"	1024	0	2046	NULL	true	5	NULL
2053	"password"	"char"	1024	0	2046	NULL	true	6	NULL
2054	"language"	"char"	1024	0	2046	NULL	true	7	NULL
2056	"id"	"int"	32	0	2055	NULL	true	0	NULL
2057	"name"	"varchar"	1024	0	2055	NULL	true	1	NULL
2058	"schema_id"	"int"	32	0	2055	NULL	true	2	NULL
2059	"query"	"varchar"	2048	0	2055	NULL	true	3	NULL
2060	"type"	"smallint"	16	0	2055	NULL	true	4	NULL
2061	"system"	"boolean"	1	0	2055	NULL	true	5	NULL
2062	"commit_action"	"smallint"	16	0	2055	NULL	true	6	NULL
2063	"readonly"	"boolean"	1	0	2055	NULL	true	7	NULL
2065	"id"	"int"	32	0	2064	NULL	true	0	NULL
2066	"name"	"varchar"	1024	0	2064	NULL	true	1	NULL
2067	"type"	"varchar"	1024	0	2064	NULL	true	2	NULL
2068	"type_digits"	"int"	32	0	2064	NULL	true	3	NULL
2069	"type_scale"	"int"	32	0	2064	NULL	true	4	NULL
2070	"table_id"	"int"	32	0	2064	NULL	true	5	NULL
2071	"default"	"varchar"	2048	0	2064	NULL	true	6	NULL
2072	"null"	"boolean"	1	0	2064	NULL	true	7	NULL
2073	"number"	"int"	32	0	2064	NULL	true	8	NULL
2074	"storage"	"varchar"	2048	0	2064	NULL	true	9	NULL
2076	"id"	"int"	32	0	2075	NULL	true	0	NULL
2077	"table_id"	"int"	32	0	2075	NULL	true	1	NULL
2078	"type"	"int"	32	0	2075	NULL	true	2	NULL
2079	"name"	"varchar"	1024	0	2075	NULL	true	3	NULL
2080	"rkey"	"int"	32	0	2075	NULL	true	4	NULL
2081	"action"	"int"	32	0	2075	NULL	true	5	NULL
2083	"id"	"int"	32	0	2082	NULL	true	0	NULL
2084	"table_id"	"int"	32	0	2082	NULL	true	1	NULL
2085	"type"	"int"	32	0	2082	NULL	true	2	NULL
2086	"name"	"varchar"	1024	0	2082	NULL	true	3	NULL
2088	"id"	"int"	32	0	2087	NULL	true	0	NULL
2089	"name"	"varchar"	1024	0	2087	NULL	true	1	NULL
2090	"table_id"	"int"	32	0	2087	NULL	true	2	NULL
2091	"time"	"smallint"	16	0	2087	NULL	true	3	NULL
2092	"orientation"	"smallint"	16	0	2087	NULL	true	4	NULL
2093	"event"	"smallint"	16	0	2087	NULL	true	5	NULL
2094	"old_name"	"varchar"	1024	0	2087	NULL	true	6	NULL
2095	"new_name"	"varchar"	1024	0	2087	NULL	true	7	NULL
2096	"condition"	"varchar"	2048	0	2087	NULL	true	8	NULL
2097	"statement"	"varchar"	2048	0	2087	NULL	true	9	NULL
2099	"id"	"int"	32	0	2098	NULL	true	0	NULL
2100	"name"	"varchar"	1024	0	2098	NULL	true	1	NULL
2101	"nr"	"int"	32	0	2098	NULL	true	2	NULL
2104	"id"	"int"	32	0	2103	NULL	true	0	NULL
2105	"name"	"varchar"	1024	0	2103	NULL	true	1	NULL
2106	"schema_id"	"int"	32	0	2103	NULL	true	2	NULL
2107	"query"	"varchar"	2048	0	2103	NULL	true	3	NULL
2108	"type"	"smallint"	16	0	2103	NULL	true	4	NULL
2109	"system"	"boolean"	1	0	2103	NULL	true	5	NULL
2110	"commit_action"	"smallint"	16	0	2103	NULL	true	6	NULL
2111	"readonly"	"boolean"	1	0	2103	NULL	true	7	NULL
2113	"id"	"int"	32	0	2112	NULL	true	0	NULL
2114	"name"	"varchar"	1024	0	2112	NULL	true	1	NULL
2115	"type"	"varchar"	1024	0	2112	NULL	true	2	NULL
2116	"type_digits"	"int"	32	0	2112	NULL	true	3	NULL
2117	"type_scale"	"int"	32	0	2112	NULL	true	4	NULL
2118	"table_id"	"int"	32	0	2112	NULL	true	5	NULL
2119	"default"	"varchar"	2048	0	2112	NULL	true	6	NULL
2120	"null"	"boolean"	1	0	2112	NULL	true	7	NULL
2121	"number"	"int"	32	0	2112	NULL	true	8	NULL
2122	"storage"	"varchar"	2048	0	2112	NULL	true	9	NULL
2124	"id"	"int"	32	0	2123	NULL	true	0	NULL
2125	"table_id"	"int"	32	0	2123	NULL	true	1	NULL
2126	"type"	"int"	32	0	2123	NULL	true	2	NULL
2127	"name"	"varchar"	1024	0	2123	NULL	true	3	NULL
2128	"rkey"	"int"	32	0	2123	NULL	true	4	NULL
2129	"action"	"int"	32	0	2123	NULL	true	5	NULL
2131	"id"	"int"	32	0	2130	NULL	true	0	NULL
2132	"table_id"	"int"	32	0	2130	NULL	true	1	NULL
2133	"type"	"int"	32	0	2130	NULL	true	2	NULL
2134	"name"	"varchar"	1024	0	2130	NULL	true	3	NULL
2136	"id"	"int"	32	0	2135	NULL	true	0	NULL
2137	"name"	"varchar"	1024	0	2135	NULL	true	1	NULL
2138	"table_id"	"int"	32	0	2135	NULL	true	2	NULL
2139	"time"	"smallint"	16	0	2135	NULL	true	3	NULL
2140	"orientation"	"smallint"	16	0	2135	NULL	true	4	NULL
2141	"event"	"smallint"	16	0	2135	NULL	true	5	NULL
2142	"old_name"	"varchar"	1024	0	2135	NULL	true	6	NULL
2143	"new_name"	"varchar"	1024	0	2135	NULL	true	7	NULL
2144	"condition"	"varchar"	2048	0	2135	NULL	true	8	NULL
2145	"statement"	"varchar"	2048	0	2135	NULL	true	9	NULL
2147	"id"	"int"	32	0	2146	NULL	true	0	NULL
2148	"name"	"varchar"	1024	0	2146	NULL	true	1	NULL
2149	"nr"	"int"	32	0	2146	NULL	true	2	NULL
5078	"id"	"int"	32	0	5077	NULL	true	0	NULL
5079	"name"	"varchar"	1024	0	5077	NULL	true	1	NULL
5080	"schema_id"	"int"	32	0	5077	NULL	true	2	NULL
5081	"query"	"varchar"	2048	0	5077	NULL	true	3	NULL
5082	"type"	"smallint"	16	0	5077	NULL	true	4	NULL
5083	"system"	"boolean"	1	0	5077	NULL	true	5	NULL
5084	"commit_action"	"smallint"	16	0	5077	NULL	true	6	NULL
5085	"readonly"	"boolean"	1	0	5077	NULL	true	7	NULL
5086	"temporary"	"smallint"	16	0	5077	NULL	true	8	NULL
5088	"id"	"int"	32	0	5087	NULL	true	0	NULL
5089	"name"	"varchar"	1024	0	5087	NULL	true	1	NULL
5090	"type"	"varchar"	1024	0	5087	NULL	true	2	NULL
5091	"type_digits"	"int"	32	0	5087	NULL	true	3	NULL
5092	"type_scale"	"int"	32	0	5087	NULL	true	4	NULL
5093	"table_id"	"int"	32	0	5087	NULL	true	5	NULL
5094	"default"	"varchar"	2048	0	5087	NULL	true	6	NULL
5095	"null"	"boolean"	1	0	5087	NULL	true	7	NULL
5096	"number"	"int"	32	0	5087	NULL	true	8	NULL
5097	"storage_type"	"int"	32	0	5087	NULL	true	9	NULL
5099	"name"	"varchar"	1024	0	5098	NULL	true	0	NULL
5100	"value"	"varchar"	2048	0	5098	NULL	true	1	NULL
5104	"name"	"varchar"	1024	0	5103	NULL	true	0	NULL
5108	"name"	"varchar"	1024	0	5107	NULL	true	0	NULL
5109	"fullname"	"varchar"	2048	0	5107	NULL	true	1	NULL
5110	"default_schema"	"int"	9	0	5107	NULL	true	2	NULL
5112	"name"	"varchar"	2048	0	5111	NULL	true	0	NULL
5116	"name"	"varchar"	1024	0	5115	NULL	true	0	NULL
5117	"fullname"	"varchar"	2024	0	5115	NULL	true	1	NULL
5118	"default_schema"	"int"	9	0	5115	NULL	true	2	NULL
5120	"login_id"	"int"	32	0	5119	NULL	true	0	NULL
5121	"role_id"	"int"	32	0	5119	NULL	true	1	NULL
5123	"id"	"int"	32	0	5122	NULL	true	0	NULL
5124	"name"	"varchar"	1024	0	5122	NULL	true	1	NULL
5125	"grantor"	"int"	32	0	5122	NULL	true	2	NULL
5127	"obj_id"	"int"	32	0	5126	NULL	true	0	NULL
5128	"auth_id"	"int"	32	0	5126	NULL	true	1	NULL
5129	"privileges"	"int"	32	0	5126	NULL	true	2	NULL
5130	"grantor"	"int"	32	0	5126	NULL	true	3	NULL
5131	"grantable"	"int"	32	0	5126	NULL	true	4	NULL
5271	"id"	"oid"	63	0	5270	NULL	true	0	NULL
5272	"owner"	"clob"	0	0	5270	NULL	true	1	NULL
5273	"defined"	"timestamp"	7	0	5270	NULL	true	2	NULL
5274	"query"	"clob"	0	0	5270	NULL	true	3	NULL
5275	"pipe"	"clob"	0	0	5270	NULL	true	4	NULL
5276	"mal"	"int"	32	0	5270	NULL	true	5	NULL
5277	"optimize"	"bigint"	64	0	5270	NULL	true	6	NULL
5282	"id"	"oid"	63	0	5281	NULL	true	0	NULL
5283	"start"	"timestamp"	7	0	5281	NULL	true	1	NULL
5284	"stop"	"timestamp"	7	0	5281	NULL	true	2	NULL
5285	"arguments"	"clob"	0	0	5281	NULL	true	3	NULL
5286	"tuples"	"wrd"	64	0	5281	NULL	true	4	NULL
5287	"run"	"bigint"	64	0	5281	NULL	true	5	NULL
5288	"ship"	"bigint"	64	0	5281	NULL	true	6	NULL
5289	"cpu"	"int"	32	0	5281	NULL	true	7	NULL
5290	"io"	"int"	32	0	5281	NULL	true	8	NULL
5291	"space"	"bigint"	64	0	5281	NULL	true	9	NULL
5296	"id"	"oid"	63	0	5303	NULL	true	0	NULL
5297	"owner"	"clob"	0	0	5303	NULL	true	1	NULL
5298	"defined"	"timestamp"	7	0	5303	NULL	true	2	NULL
5299	"query"	"clob"	0	0	5303	NULL	true	3	NULL
5300	"pipe"	"clob"	0	0	5303	NULL	true	4	NULL
5301	"mal"	"int"	32	0	5303	NULL	true	5	NULL
5302	"optimize"	"bigint"	64	0	5303	NULL	true	6	NULL
5305	"id"	"oid"	63	0	5315	NULL	true	0	NULL
5306	"start"	"timestamp"	7	0	5315	NULL	true	1	NULL
5307	"stop"	"timestamp"	7	0	5315	NULL	true	2	NULL
5308	"arguments"	"clob"	0	0	5315	NULL	true	3	NULL
5309	"tuples"	"wrd"	64	0	5315	NULL	true	4	NULL
5310	"run"	"bigint"	64	0	5315	NULL	true	5	NULL
5311	"ship"	"bigint"	64	0	5315	NULL	true	6	NULL
5312	"cpu"	"int"	32	0	5315	NULL	true	7	NULL
5313	"io"	"int"	32	0	5315	NULL	true	8	NULL
5314	"space"	"bigint"	64	0	5315	NULL	true	9	NULL
5317	"id"	"oid"	63	0	5333	NULL	true	0	NULL
5318	"owner"	"clob"	0	0	5333	NULL	true	1	NULL
5319	"defined"	"timestamp"	7	0	5333	NULL	true	2	NULL
5320	"query"	"clob"	0	0	5333	NULL	true	3	NULL
5321	"pipe"	"clob"	0	0	5333	NULL	true	4	NULL
5322	"mal"	"int"	32	0	5333	NULL	true	5	NULL
5323	"optimize"	"bigint"	64	0	5333	NULL	true	6	NULL
5324	"start"	"timestamp"	7	0	5333	NULL	true	7	NULL
5325	"stop"	"timestamp"	7	0	5333	NULL	true	8	NULL
5326	"arguments"	"clob"	0	0	5333	NULL	true	9	NULL
5327	"tuples"	"wrd"	64	0	5333	NULL	true	10	NULL
5328	"run"	"bigint"	64	0	5333	NULL	true	11	NULL
5329	"ship"	"bigint"	64	0	5333	NULL	true	12	NULL
5330	"cpu"	"int"	32	0	5333	NULL	true	13	NULL
5331	"space"	"bigint"	64	0	5333	NULL	true	14	NULL
5332	"io"	"int"	32	0	5333	NULL	true	15	NULL
5344	"event"	"int"	32	0	5343	NULL	true	0	NULL
5345	"clk"	"varchar"	20	0	5343	NULL	true	1	NULL
5346	"pc"	"varchar"	50	0	5343	NULL	true	2	NULL
5347	"thread"	"int"	32	0	5343	NULL	true	3	NULL
5348	"user"	"int"	32	0	5343	NULL	true	4	NULL
5349	"ticks"	"bigint"	64	0	5343	NULL	true	5	NULL
5350	"reads"	"bigint"	64	0	5343	NULL	true	6	NULL
5351	"writes"	"bigint"	64	0	5343	NULL	true	7	NULL
5352	"rbytes"	"bigint"	64	0	5343	NULL	true	8	NULL
5353	"wbytes"	"bigint"	64	0	5343	NULL	true	9	NULL
5354	"type"	"clob"	0	0	5343	NULL	true	10	NULL
5355	"stmt"	"clob"	0	0	5343	NULL	true	11	NULL
5360	"event"	"int"	32	0	5372	NULL	true	0	NULL
5361	"clk"	"varchar"	20	0	5372	NULL	true	1	NULL
5362	"pc"	"varchar"	50	0	5372	NULL	true	2	NULL
5363	"thread"	"int"	32	0	5372	NULL	true	3	NULL
5364	"user"	"int"	32	0	5372	NULL	true	4	NULL
5365	"ticks"	"bigint"	64	0	5372	NULL	true	5	NULL
5366	"reads"	"bigint"	64	0	5372	NULL	true	6	NULL
5367	"writes"	"bigint"	64	0	5372	NULL	true	7	NULL
5368	"rbytes"	"bigint"	64	0	5372	NULL	true	8	NULL
5369	"wbytes"	"bigint"	64	0	5372	NULL	true	9	NULL
5370	"type"	"clob"	0	0	5372	NULL	true	10	NULL
5371	"stmt"	"clob"	0	0	5372	NULL	true	11	NULL
5420	"sch"	"varchar"	100	0	5419	NULL	true	0	NULL
5421	"usr"	"varchar"	100	0	5419	NULL	true	1	NULL
5422	"dep_type"	"varchar"	32	0	5419	NULL	true	2	NULL
5427	"sch"	"varchar"	100	0	5426	NULL	true	0	NULL
5428	"usr"	"varchar"	100	0	5426	NULL	true	1	NULL
5429	"dep_type"	"varchar"	32	0	5426	NULL	true	2	NULL
5434	"sch"	"varchar"	100	0	5433	NULL	true	0	NULL
5435	"usr"	"varchar"	100	0	5433	NULL	true	1	NULL
5436	"dep_type"	"varchar"	32	0	5433	NULL	true	2	NULL
5441	"sch"	"varchar"	100	0	5440	NULL	true	0	NULL
5442	"usr"	"varchar"	100	0	5440	NULL	true	1	NULL
5443	"dep_type"	"varchar"	32	0	5440	NULL	true	2	NULL
5448	"sch"	"varchar"	100	0	5447	NULL	true	0	NULL
5449	"usr"	"varchar"	100	0	5447	NULL	true	1	NULL
5450	"dep_type"	"varchar"	32	0	5447	NULL	true	2	NULL
5455	"sch"	"varchar"	100	0	5454	NULL	true	0	NULL
5456	"usr"	"varchar"	100	0	5454	NULL	true	1	NULL
5457	"dep_type"	"varchar"	32	0	5454	NULL	true	2	NULL
5462	"sch"	"varchar"	100	0	5461	NULL	true	0	NULL
5463	"usr"	"varchar"	100	0	5461	NULL	true	1	NULL
5464	"dep_type"	"varchar"	32	0	5461	NULL	true	2	NULL
5469	"sch"	"varchar"	100	0	5468	NULL	true	0	NULL
5470	"usr"	"varchar"	100	0	5468	NULL	true	1	NULL
5471	"dep_type"	"varchar"	32	0	5468	NULL	true	2	NULL
5476	"sch"	"varchar"	100	0	5475	NULL	true	0	NULL
5477	"usr"	"varchar"	100	0	5475	NULL	true	1	NULL
5478	"dep_type"	"varchar"	32	0	5475	NULL	true	2	NULL
5483	"sch"	"varchar"	100	0	5482	NULL	true	0	NULL
5484	"usr"	"varchar"	100	0	5482	NULL	true	1	NULL
5485	"dep_type"	"varchar"	32	0	5482	NULL	true	2	NULL
5490	"sch"	"varchar"	100	0	5489	NULL	true	0	NULL
5491	"usr"	"varchar"	100	0	5489	NULL	true	1	NULL
5492	"dep_type"	"varchar"	32	0	5489	NULL	true	2	NULL
5497	"sch"	"varchar"	100	0	5496	NULL	true	0	NULL
5498	"usr"	"varchar"	100	0	5496	NULL	true	1	NULL
5499	"dep_type"	"varchar"	32	0	5496	NULL	true	2	NULL
5504	"sch"	"varchar"	100	0	5503	NULL	true	0	NULL
5505	"usr"	"varchar"	100	0	5503	NULL	true	1	NULL
5506	"dep_type"	"varchar"	32	0	5503	NULL	true	2	NULL
5511	"sch"	"varchar"	100	0	5510	NULL	true	0	NULL
5512	"usr"	"varchar"	100	0	5510	NULL	true	1	NULL
5513	"dep_type"	"varchar"	32	0	5510	NULL	true	2	NULL
5518	"sch"	"varchar"	100	0	5517	NULL	true	0	NULL
5519	"usr"	"varchar"	100	0	5517	NULL	true	1	NULL
5520	"dep_type"	"varchar"	32	0	5517	NULL	true	2	NULL
5525	"sch"	"varchar"	100	0	5524	NULL	true	0	NULL
5526	"usr"	"varchar"	100	0	5524	NULL	true	1	NULL
5527	"dep_type"	"varchar"	32	0	5524	NULL	true	2	NULL
5532	"sch"	"varchar"	100	0	5531	NULL	true	0	NULL
5533	"usr"	"varchar"	100	0	5531	NULL	true	1	NULL
5534	"dep_type"	"varchar"	32	0	5531	NULL	true	2	NULL
5543	"user"	"clob"	0	0	5542	NULL	true	0	NULL
5544	"login"	"timestamp"	7	0	5542	NULL	true	1	NULL
5545	"sessiontimeout"	"bigint"	64	0	5542	NULL	true	2	NULL
5546	"lastcommand"	"timestamp"	7	0	5542	NULL	true	3	NULL
5547	"querytimeout"	"bigint"	64	0	5542	NULL	true	4	NULL
5548	"active"	"boolean"	1	0	5542	NULL	true	5	NULL
5553	"user"	"clob"	0	0	5559	NULL	true	0	NULL
5554	"login"	"timestamp"	7	0	5559	NULL	true	1	NULL
5555	"sessiontimeout"	"bigint"	64	0	5559	NULL	true	2	NULL
5556	"lastcommand"	"timestamp"	7	0	5559	NULL	true	3	NULL
5557	"querytimeout"	"bigint"	64	0	5559	NULL	true	4	NULL
5558	"active"	"boolean"	1	0	5559	NULL	true	5	NULL
5620	"rewrite"	"clob"	0	0	5619	NULL	true	0	NULL
5621	"count"	"int"	32	0	5619	NULL	true	1	NULL
5626	"query"	"clob"	0	0	5625	NULL	true	0	NULL
5627	"count"	"int"	32	0	5625	NULL	true	1	NULL
5635	"name"	"clob"	0	0	5634	NULL	true	0	NULL
5636	"def"	"clob"	0	0	5634	NULL	true	1	NULL
5637	"status"	"clob"	0	0	5634	NULL	true	2	NULL
5642	"name"	"clob"	0	0	5645	NULL	true	0	NULL
5643	"def"	"clob"	0	0	5645	NULL	true	1	NULL
5644	"status"	"clob"	0	0	5645	NULL	true	2	NULL
5647	"name"	"clob"	0	0	5646	NULL	true	0	NULL
5648	"value"	"clob"	0	0	5646	NULL	true	1	NULL
5653	"name"	"clob"	0	0	5655	NULL	true	0	NULL
5654	"value"	"clob"	0	0	5655	NULL	true	1	NULL
5657	"id"	"int"	32	0	5656	NULL	true	0	NULL
5658	"name"	"clob"	0	0	5656	NULL	true	1	NULL
5659	"htype"	"clob"	0	0	5656	NULL	true	2	NULL
5660	"ttype"	"clob"	0	0	5656	NULL	true	3	NULL
5661	"count"	"bigint"	64	0	5656	NULL	true	4	NULL
5662	"refcnt"	"int"	32	0	5656	NULL	true	5	NULL
5663	"lrefcnt"	"int"	32	0	5656	NULL	true	6	NULL
5664	"location"	"clob"	0	0	5656	NULL	true	7	NULL
5665	"heat"	"int"	32	0	5656	NULL	true	8	NULL
5666	"dirty"	"clob"	0	0	5656	NULL	true	9	NULL
5667	"status"	"clob"	0	0	5656	NULL	true	10	NULL
5668	"kind"	"clob"	0	0	5656	NULL	true	11	NULL
5677	"qtag"	"bigint"	64	0	5676	NULL	true	0	NULL
5678	"user"	"clob"	0	0	5676	NULL	true	1	NULL
5679	"started"	"timestamp"	7	0	5676	NULL	true	2	NULL
5680	"estimate"	"timestamp"	7	0	5676	NULL	true	3	NULL
5681	"progress"	"int"	32	0	5676	NULL	true	4	NULL
5682	"status"	"clob"	0	0	5676	NULL	true	5	NULL
5683	"tag"	"oid"	63	0	5676	NULL	true	6	NULL
5684	"query"	"clob"	0	0	5676	NULL	true	7	NULL
5689	"qtag"	"bigint"	64	0	5697	NULL	true	0	NULL
5690	"user"	"clob"	0	0	5697	NULL	true	1	NULL
5691	"started"	"timestamp"	7	0	5697	NULL	true	2	NULL
5692	"estimate"	"timestamp"	7	0	5697	NULL	true	3	NULL
5693	"progress"	"int"	32	0	5697	NULL	true	4	NULL
5694	"status"	"clob"	0	0	5697	NULL	true	5	NULL
5695	"tag"	"oid"	63	0	5697	NULL	true	6	NULL
5696	"query"	"clob"	0	0	5697	NULL	true	7	NULL
6253	"schema"	"clob"	0	0	6252	NULL	true	0	NULL
6254	"table"	"clob"	0	0	6252	NULL	true	1	NULL
6255	"column"	"clob"	0	0	6252	NULL	true	2	NULL
6256	"type"	"clob"	0	0	6252	NULL	true	3	NULL
6257	"location"	"clob"	0	0	6252	NULL	true	4	NULL
6258	"count"	"bigint"	64	0	6252	NULL	true	5	NULL
6259	"typewidth"	"int"	32	0	6252	NULL	true	6	NULL
6260	"columnsize"	"bigint"	64	0	6252	NULL	true	7	NULL
6261	"heapsize"	"bigint"	64	0	6252	NULL	true	8	NULL
6262	"indices"	"bigint"	64	0	6252	NULL	true	9	NULL
6263	"sorted"	"boolean"	1	0	6252	NULL	true	10	NULL
6268	"schema"	"clob"	0	0	6279	NULL	true	0	NULL
6269	"table"	"clob"	0	0	6279	NULL	true	1	NULL
6270	"column"	"clob"	0	0	6279	NULL	true	2	NULL
6271	"type"	"clob"	0	0	6279	NULL	true	3	NULL
6272	"location"	"clob"	0	0	6279	NULL	true	4	NULL
6273	"count"	"bigint"	64	0	6279	NULL	true	5	NULL
6274	"typewidth"	"int"	32	0	6279	NULL	true	6	NULL
6275	"columnsize"	"bigint"	64	0	6279	NULL	true	7	NULL
6276	"heapsize"	"bigint"	64	0	6279	NULL	true	8	NULL
6277	"indices"	"bigint"	64	0	6279	NULL	true	9	NULL
6278	"sorted"	"boolean"	1	0	6279	NULL	true	10	NULL
6281	"schema"	"clob"	0	0	6291	NULL	true	0	NULL
6282	"table"	"clob"	0	0	6291	NULL	true	1	NULL
6283	"column"	"clob"	0	0	6291	NULL	true	2	NULL
6284	"type"	"clob"	0	0	6291	NULL	true	3	NULL
6285	"typewidth"	"int"	32	0	6291	NULL	true	4	NULL
6286	"count"	"bigint"	64	0	6291	NULL	true	5	NULL
6287	"distinct"	"bigint"	64	0	6291	NULL	true	6	NULL
6288	"atomwidth"	"int"	32	0	6291	NULL	true	7	NULL
6289	"reference"	"boolean"	1	0	6291	NULL	true	8	NULL
6290	"sorted"	"boolean"	1	0	6291	NULL	true	9	NULL
6312	"schema"	"clob"	0	0	6311	NULL	true	0	NULL
6313	"table"	"clob"	0	0	6311	NULL	true	1	NULL
6314	"column"	"clob"	0	0	6311	NULL	true	2	NULL
6315	"type"	"clob"	0	0	6311	NULL	true	3	NULL
6316	"count"	"bigint"	64	0	6311	NULL	true	4	NULL
6317	"columnsize"	"bigint"	64	0	6311	NULL	true	5	NULL
6318	"heapsize"	"bigint"	64	0	6311	NULL	true	6	NULL
6319	"indices"	"bigint"	64	0	6311	NULL	true	7	NULL
6320	"sorted"	"boolean"	1	0	6311	NULL	true	8	NULL
6325	"schema"	"clob"	0	0	6334	NULL	true	0	NULL
6326	"table"	"clob"	0	0	6334	NULL	true	1	NULL
6327	"column"	"clob"	0	0	6334	NULL	true	2	NULL
6328	"type"	"clob"	0	0	6334	NULL	true	3	NULL
6329	"count"	"bigint"	64	0	6334	NULL	true	4	NULL
6330	"columnsize"	"bigint"	64	0	6334	NULL	true	5	NULL
6331	"heapsize"	"bigint"	64	0	6334	NULL	true	6	NULL
6332	"indices"	"bigint"	64	0	6334	NULL	true	7	NULL
6333	"sorted"	"boolean"	1	0	6334	NULL	true	8	NULL
6336	"schema"	"clob"	0	0	6343	NULL	true	0	NULL
6337	"table"	"clob"	0	0	6343	NULL	true	1	NULL
6338	"count"	"bigint"	64	0	6343	NULL	true	2	NULL
6339	"columnsize"	"bigint"	64	0	6343	NULL	true	3	NULL
6340	"heapsize"	"bigint"	64	0	6343	NULL	true	4	NULL
6341	"indices"	"bigint"	64	0	6343	NULL	true	5	NULL
6342	"auxillary"	"bigint"	53	0	6343	NULL	true	6	NULL
6345	"schema"	"clob"	0	0	6358	NULL	true	0	NULL
6346	"table"	"clob"	0	0	6358	NULL	true	1	NULL
6347	"column"	"clob"	0	0	6358	NULL	true	2	NULL
6348	"type"	"clob"	0	0	6358	NULL	true	3	NULL
6349	"width"	"int"	32	0	6358	NULL	true	4	NULL
6350	"stamp"	"timestamp"	7	0	6358	NULL	true	5	NULL
6351	"sample"	"bigint"	64	0	6358	NULL	true	6	NULL
6352	"count"	"bigint"	64	0	6358	NULL	true	7	NULL
6353	"unique"	"bigint"	64	0	6358	NULL	true	8	NULL
6354	"nils"	"bigint"	64	0	6358	NULL	true	9	NULL
6355	"minval"	"clob"	0	0	6358	NULL	true	10	NULL
6356	"maxval"	"clob"	0	0	6358	NULL	true	11	NULL
6357	"sorted"	"boolean"	1	0	6358	NULL	true	12	NULL
6411	"function_id"	"int"	32	0	6412	NULL	true	0	NULL
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."_tables" (
	"id"            INTEGER,
	"name"          VARCHAR(1024),
	"schema_id"     INTEGER,
	"query"         VARCHAR(2048),
	"type"          SMALLINT,
	"system"        BOOLEAN,
	"commit_action" SMALLINT,
	"readonly"      BOOLEAN
);
COPY 72 RECORDS INTO "sys"."_tables" FROM stdin USING DELIMITERS '\t','\n','"';
2001	"schemas"	2000	NULL	0	true	0	false
2006	"types"	2000	NULL	0	true	0	false
2015	"functions"	2000	NULL	0	true	0	false
2024	"args"	2000	NULL	0	true	0	false
2032	"sequences"	2000	NULL	0	true	0	false
2042	"dependencies"	2000	NULL	0	true	0	false
2046	"connections"	2000	NULL	0	true	0	false
2055	"_tables"	2000	NULL	0	true	0	false
2064	"_columns"	2000	NULL	0	true	0	false
2075	"keys"	2000	NULL	0	true	0	false
2082	"idxs"	2000	NULL	0	true	0	false
2087	"triggers"	2000	NULL	0	true	0	false
2098	"objects"	2000	NULL	0	true	0	false
2103	"_tables"	2102	NULL	0	true	2	false
2112	"_columns"	2102	NULL	0	true	2	false
2123	"keys"	2102	NULL	0	true	2	false
2130	"idxs"	2102	NULL	0	true	2	false
2135	"triggers"	2102	NULL	0	true	2	false
2146	"objects"	2102	NULL	0	true	2	false
5077	"tables"	2000	"SELECT * FROM (SELECT p.*, 0 AS \"temporary\" FROM \"sys\".\"_tables\" AS p UNION ALL SELECT t.*, 1 AS \"temporary\" FROM \"tmp\".\"_tables\" AS t) AS tables where tables.type <> 2;"	1	true	0	false
5087	"columns"	2000	"SELECT * FROM (SELECT p.* FROM \"sys\".\"_columns\" AS p UNION ALL SELECT t.* FROM \"tmp\".\"_columns\" AS t) AS columns;"	1	true	0	false
5098	"#env"	2000	NULL	2	true	0	false
5103	"#var"	2000	NULL	2	true	0	false
5107	"db_user_info"	2000	NULL	0	true	0	false
5111	"#db_users"	2000	NULL	2	true	0	false
5115	"users"	2000	"SELECT u.\"name\" AS \"name\", ui.\"fullname\", ui.\"default_schema\" FROM db_users() AS u LEFT JOIN \"sys\".\"db_user_info\" AS ui ON u.\"name\" = ui.\"name\" ;"	1	true	0	false
5119	"user_role"	2000	NULL	0	true	0	false
5122	"auths"	2000	NULL	0	true	0	false
5126	"privileges"	2000	NULL	0	true	0	false
5270	"#querylog_catalog"	2000	NULL	2	true	0	false
5281	"#querylog_calls"	2000	NULL	2	true	0	false
5303	"querylog_catalog"	2000	"-- create table views for convenience\ncreate view sys.querylog_catalog as select * from sys.querylog_catalog();"	1	true	0	false
5315	"querylog_calls"	2000	"create view sys.querylog_calls as select * from sys.querylog_calls();"	1	true	0	false
5333	"querylog_history"	2000	"create view sys.querylog_history as\nselect qd.*, ql.\"start\",ql.\"stop\", ql.arguments, ql.tuples, ql.run, ql.ship, ql.cpu, ql.space, ql.io \nfrom sys.querylog_catalog() qd, sys.querylog_calls() ql\nwhere qd.id = ql.id and qd.owner = user;"	1	true	0	false
5343	"#tracelog"	2000	NULL	2	true	0	false
5372	"tracelog"	2000	"create view sys.tracelog as select * from sys.tracelog();"	1	true	0	false
5419	"#dependencies_schemas_on_users"	2000	NULL	2	true	0	false
5426	"#dependencies_owners_on_schemas"	2000	NULL	2	true	0	false
5433	"#dependencies_tables_on_views"	2000	NULL	2	true	0	false
5440	"#dependencies_tables_on_indexes"	2000	NULL	2	true	0	false
5447	"#dependencies_tables_on_triggers"	2000	NULL	2	true	0	false
5454	"#dependencies_tables_on_foreignkeys"	2000	NULL	2	true	0	false
5461	"#dependencies_tables_on_functions"	2000	NULL	2	true	0	false
5468	"#dependencies_columns_on_views"	2000	NULL	2	true	0	false
5475	"#dependencies_columns_on_keys"	2000	NULL	2	true	0	false
5482	"#dependencies_columns_on_indexes"	2000	NULL	2	true	0	false
5489	"#dependencies_columns_on_functions"	2000	NULL	2	true	0	false
5496	"#dependencies_columns_on_triggers"	2000	NULL	2	true	0	false
5503	"#dependencies_views_on_functions"	2000	NULL	2	true	0	false
5510	"#dependencies_views_on_triggers"	2000	NULL	2	true	0	false
5517	"#dependencies_functions_on_functions"	2000	NULL	2	true	0	false
5524	"#dependencies_functions_os_triggers"	2000	NULL	2	true	0	false
5531	"#dependencies_keys_on_foreignkeys"	2000	NULL	2	true	0	false
5542	"#sessions"	2000	NULL	2	true	0	false
5559	"sessions"	2000	"create view sys.sessions as select * from sys.sessions();"	1	true	0	false
5619	"#optimizer_stats"	2000	NULL	2	true	0	false
5625	"#querycache"	2000	NULL	2	true	0	false
5634	"#optimizers"	2000	NULL	2	true	0	false
5645	"optimizers"	2000	"create view sys.optimizers as select * from sys.optimizers();"	1	true	0	false
5646	"#environment"	2000	NULL	2	true	0	false
5655	"environment"	2000	"create view sys.environment as select * from sys.environment();"	1	true	0	false
5656	"#bbp"	2000	NULL	2	true	0	false
5676	"#queue"	2000	NULL	2	true	0	false
5697	"queue"	2000	"create view sys.queue as select * from sys.queue();"	1	true	0	false
6252	"#storage"	2000	NULL	2	true	0	false
6279	"storage"	2000	"create view sys.storage as select * from sys.storage();"	1	true	0	false
6291	"storagemodelinput"	2000	NULL	0	true	0	false
6311	"#storagemodel"	2000	NULL	2	true	0	false
6334	"storagemodel"	2000	"create view sys.storagemodel as select * from sys.storagemodel();"	1	true	0	false
6343	"tablestoragemodel"	2000	"-- A summary of the table storage requirement is is available as a table view.\n-- The auxillary column denotes the maximum space if all non-sorted columns\n-- would be augmented with a hash (rare situation)\ncreate view sys.tablestoragemodel\nas select \"schema\",\"table\",max(count) as \"count\",\n\tsum(columnsize) as columnsize,\n\tsum(heapsize) as heapsize,\n\tsum(indices) as indices,\n\tsum(case when sorted = false then 8 * count else 0 end) as auxillary\nfrom sys.storagemodel() group by \"schema\",\"table\";"	1	true	0	false
6358	"statistics"	2000	NULL	0	true	0	false
6412	"systemfunctions"	2000	NULL	0	true	0	false
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."args" (
	"id"          INTEGER,
	"func_id"     INTEGER,
	"name"        VARCHAR(256),
	"type"        VARCHAR(1024),
	"type_digits" INTEGER,
	"type_scale"  INTEGER,
	"number"      INTEGER
);
COPY 3421 RECORDS INTO "sys"."args" FROM stdin USING DELIMITERS '\t','\n','"';
2151	28	"result"	"oid"	63	0	0
2152	28	"arg_1"	"wrd"	64	0	1
2153	29	"result"	"oid"	63	0	0
2154	29	"arg_1"	"oid"	63	0	1
2155	30	"result"	"wrd"	64	0	0
2156	30	"arg_1"	"any"	0	0	1
2157	31	"result"	"wrd"	64	0	0
2158	31	"arg_1"	"wrd"	64	0	1
2159	31	"arg_2"	"int"	32	0	2
2160	31	"arg_3"	"any"	0	0	3
2161	32	"result"	"boolean"	1	0	0
2162	32	"arg_1"	"any"	0	0	1
2163	32	"arg_2"	"any"	0	0	2
2164	33	"result"	"boolean"	1	0	0
2165	33	"arg_1"	"any"	0	0	1
2166	33	"arg_2"	"any"	0	0	2
2167	34	"result"	"boolean"	1	0	0
2168	34	"arg_1"	"any"	0	0	1
2169	35	"result"	"boolean"	1	0	0
2170	35	"arg_1"	"any"	0	0	1
2171	35	"arg_2"	"any"	0	0	2
2172	36	"result"	"boolean"	1	0	0
2173	36	"arg_1"	"any"	0	0	1
2174	36	"arg_2"	"any"	0	0	2
2175	37	"result"	"boolean"	1	0	0
2176	37	"arg_1"	"any"	0	0	1
2177	37	"arg_2"	"any"	0	0	2
2178	38	"result"	"boolean"	1	0	0
2179	38	"arg_1"	"any"	0	0	1
2180	38	"arg_2"	"any"	0	0	2
2181	42	"result"	"boolean"	1	0	0
2182	42	"arg_1"	"any"	0	0	1
2183	42	"arg_2"	"any"	0	0	2
2184	43	"result"	"oid"	63	0	0
2185	43	"arg_1"	"any"	0	0	1
2186	44	"result"	"int"	32	0	0
2187	44	"arg_1"	"any"	0	0	1
2188	45	"result"	"oid"	63	0	0
2189	45	"arg_1"	"any"	0	0	1
2190	45	"arg_2"	"varchar"	0	0	2
2191	45	"arg_3"	"varchar"	0	0	3
2192	48	"result"	"any"	0	0	0
2193	48	"arg_1"	"any"	0	0	1
2194	48	"arg_2"	"any"	0	0	2
2195	49	"result"	"any"	0	0	0
2196	49	"arg_1"	"any"	0	0	1
2197	49	"arg_2"	"any"	0	0	2
2198	50	"result"	"any"	0	0	0
2199	50	"arg_1"	"boolean"	1	0	1
2200	50	"arg_2"	"any"	0	0	2
2201	50	"arg_3"	"any"	0	0	3
2202	68	"result"	"tinyint"	8	0	0
2203	68	"arg_1"	"tinyint"	8	0	1
2204	68	"arg_2"	"tinyint"	8	0	2
2205	69	"result"	"smallint"	16	0	0
2206	69	"arg_1"	"smallint"	16	0	1
2207	69	"arg_2"	"smallint"	16	0	2
2208	70	"result"	"int"	32	0	0
2209	70	"arg_1"	"int"	32	0	1
2210	70	"arg_2"	"int"	32	0	2
2211	71	"result"	"bigint"	64	0	0
2212	71	"arg_1"	"bigint"	64	0	1
2213	71	"arg_2"	"bigint"	64	0	2
2214	72	"result"	"oid"	63	0	0
2215	72	"arg_1"	"oid"	63	0	1
2216	72	"arg_2"	"oid"	63	0	2
2217	73	"result"	"wrd"	64	0	0
2218	73	"arg_1"	"wrd"	64	0	1
2219	73	"arg_2"	"wrd"	64	0	2
2220	74	"result"	"decimal"	2	0	0
2221	74	"arg_1"	"decimal"	2	0	1
2222	74	"arg_2"	"decimal"	2	0	2
2223	75	"result"	"decimal"	4	0	0
2224	75	"arg_1"	"decimal"	4	0	1
2225	75	"arg_2"	"decimal"	4	0	2
2226	76	"result"	"decimal"	9	0	0
2227	76	"arg_1"	"decimal"	9	0	1
2228	76	"arg_2"	"decimal"	9	0	2
2229	77	"result"	"decimal"	19	0	0
2230	77	"arg_1"	"decimal"	19	0	1
2231	77	"arg_2"	"decimal"	19	0	2
2232	78	"result"	"real"	24	0	0
2233	78	"arg_1"	"real"	24	0	1
2234	78	"arg_2"	"real"	24	0	2
2235	79	"result"	"double"	53	0	0
2236	79	"arg_1"	"double"	53	0	1
2237	79	"arg_2"	"double"	53	0	2
2238	87	"result"	"int"	32	0	0
2239	87	"arg_1"	"any"	0	0	1
2240	88	"result"	"int"	32	0	0
2241	88	"arg_1"	"any"	0	0	1
2242	89	"result"	"int"	32	0	0
2243	89	"arg_1"	"any"	0	0	1
2244	90	"result"	"any"	0	0	0
2245	90	"arg_1"	"any"	0	0	1
2246	91	"result"	"int"	32	0	0
2247	91	"arg_1"	"any"	0	0	1
2248	92	"result"	"int"	32	0	0
2249	92	"arg_1"	"any"	0	0	1
2250	92	"arg_2"	"oid"	63	0	2
2251	92	"arg_3"	"any"	0	0	3
2252	93	"result"	"int"	32	0	0
2253	93	"arg_1"	"any"	0	0	1
2254	93	"arg_2"	"oid"	63	0	2
2255	93	"arg_3"	"any"	0	0	3
2256	94	"result"	"int"	32	0	0
2257	94	"arg_1"	"any"	0	0	1
2258	94	"arg_2"	"oid"	63	0	2
2259	94	"arg_3"	"any"	0	0	3
2260	95	"result"	"any"	0	0	0
2261	95	"arg_1"	"any"	0	0	1
2262	95	"arg_2"	"oid"	63	0	2
2263	95	"arg_3"	"any"	0	0	3
2264	96	"result"	"int"	32	0	0
2265	96	"arg_1"	"any"	0	0	1
2266	96	"arg_2"	"oid"	63	0	2
2267	96	"arg_3"	"any"	0	0	3
2268	97	"result"	"int"	32	0	0
2269	97	"arg_1"	"any"	0	0	1
2270	97	"arg_2"	"oid"	63	0	2
2271	97	"arg_3"	"oid"	63	0	3
2272	97	"arg_4"	"oid"	63	0	4
2273	98	"result"	"int"	32	0	0
2274	98	"arg_1"	"any"	0	0	1
2275	98	"arg_2"	"oid"	63	0	2
2276	98	"arg_3"	"oid"	63	0	3
2277	98	"arg_4"	"oid"	63	0	4
2278	99	"result"	"int"	32	0	0
2279	99	"arg_1"	"any"	0	0	1
2280	99	"arg_2"	"oid"	63	0	2
2281	99	"arg_3"	"oid"	63	0	3
2282	99	"arg_4"	"oid"	63	0	4
2283	100	"result"	"any"	0	0	0
2284	100	"arg_1"	"any"	0	0	1
2285	100	"arg_2"	"oid"	63	0	2
2286	100	"arg_3"	"oid"	63	0	3
2287	100	"arg_4"	"oid"	63	0	4
2288	101	"result"	"int"	32	0	0
2289	101	"arg_1"	"any"	0	0	1
2290	101	"arg_2"	"oid"	63	0	2
2291	101	"arg_3"	"oid"	63	0	3
2292	101	"arg_4"	"oid"	63	0	4
2293	102	"result"	"any"	0	0	0
2294	102	"arg_1"	"any"	0	0	1
2295	103	"result"	"any"	0	0	0
2296	103	"arg_1"	"any"	0	0	1
2297	104	"result"	"any"	0	0	0
2298	104	"arg_1"	"any"	0	0	1
2299	104	"arg_2"	"int"	32	0	2
2300	105	"result"	"any"	0	0	0
2301	105	"arg_1"	"any"	0	0	1
2302	105	"arg_2"	"int"	32	0	2
2303	106	"result"	"any"	0	0	0
2304	106	"arg_1"	"any"	0	0	1
2305	106	"arg_2"	"oid"	63	0	2
2306	106	"arg_3"	"oid"	63	0	3
2307	107	"result"	"any"	0	0	0
2308	107	"arg_1"	"any"	0	0	1
2309	107	"arg_2"	"oid"	63	0	2
2310	107	"arg_3"	"oid"	63	0	3
2311	108	"result"	"any"	0	0	0
2312	108	"arg_1"	"any"	0	0	1
2313	108	"arg_2"	"int"	32	0	2
2314	108	"arg_3"	"oid"	63	0	3
2315	108	"arg_4"	"oid"	63	0	4
2316	109	"result"	"any"	0	0	0
2317	109	"arg_1"	"any"	0	0	1
2318	109	"arg_2"	"int"	32	0	2
2319	109	"arg_3"	"oid"	63	0	3
2320	109	"arg_4"	"oid"	63	0	4
2321	110	"result"	"boolean"	1	0	0
2322	110	"arg_1"	"boolean"	1	0	1
2323	110	"arg_2"	"boolean"	1	0	2
2324	111	"result"	"boolean"	1	0	0
2325	111	"arg_1"	"boolean"	1	0	1
2326	111	"arg_2"	"boolean"	1	0	2
2327	112	"result"	"boolean"	1	0	0
2328	112	"arg_1"	"boolean"	1	0	1
2329	112	"arg_2"	"boolean"	1	0	2
2330	113	"result"	"boolean"	1	0	0
2331	113	"arg_1"	"boolean"	1	0	1
2332	114	"result"	"tinyint"	8	0	0
2333	114	"arg_1"	"tinyint"	8	0	1
2334	114	"arg_2"	"tinyint"	8	0	2
2335	115	"result"	"tinyint"	8	0	0
2336	115	"arg_1"	"tinyint"	8	0	1
2337	115	"arg_2"	"tinyint"	8	0	2
2338	116	"result"	"tinyint"	8	0	0
2339	116	"arg_1"	"tinyint"	8	0	1
2340	116	"arg_2"	"tinyint"	8	0	2
2341	117	"result"	"tinyint"	8	0	0
2342	117	"arg_1"	"tinyint"	8	0	1
2343	117	"arg_2"	"tinyint"	8	0	2
2344	118	"result"	"tinyint"	8	0	0
2345	118	"arg_1"	"tinyint"	8	0	1
2346	118	"arg_2"	"tinyint"	8	0	2
2347	119	"result"	"tinyint"	8	0	0
2348	119	"arg_1"	"tinyint"	8	0	1
2349	119	"arg_2"	"tinyint"	8	0	2
2350	120	"result"	"tinyint"	8	0	0
2351	120	"arg_1"	"tinyint"	8	0	1
2352	120	"arg_2"	"tinyint"	8	0	2
2353	121	"result"	"tinyint"	8	0	0
2354	121	"arg_1"	"tinyint"	8	0	1
2355	122	"result"	"tinyint"	8	0	0
2356	122	"arg_1"	"tinyint"	8	0	1
2357	122	"arg_2"	"int"	32	0	2
2358	123	"result"	"tinyint"	8	0	0
2359	123	"arg_1"	"tinyint"	8	0	1
2360	123	"arg_2"	"int"	32	0	2
2361	124	"result"	"tinyint"	8	0	0
2362	124	"arg_1"	"tinyint"	8	0	1
2363	125	"result"	"tinyint"	8	0	0
2364	125	"arg_1"	"tinyint"	8	0	1
2365	126	"result"	"tinyint"	8	0	0
2366	126	"arg_1"	"tinyint"	8	0	1
2367	127	"result"	"tinyint"	8	0	0
2368	127	"arg_1"	"tinyint"	8	0	1
2369	127	"arg_2"	"tinyint"	8	0	2
2370	128	"result"	"tinyint"	8	0	0
2371	128	"arg_1"	"tinyint"	8	0	1
2372	128	"arg_2"	"tinyint"	8	0	2
2373	129	"result"	"month_interval"	32	0	0
2374	129	"arg_1"	"month_interval"	32	0	1
2375	129	"arg_2"	"tinyint"	8	0	2
2376	130	"result"	"month_interval"	32	0	0
2377	130	"arg_1"	"month_interval"	32	0	1
2378	130	"arg_2"	"tinyint"	8	0	2
2379	131	"result"	"month_interval"	32	0	0
2380	131	"arg_1"	"month_interval"	32	0	1
2381	131	"arg_2"	"tinyint"	8	0	2
2382	132	"result"	"month_interval"	32	0	0
2383	132	"arg_1"	"month_interval"	32	0	1
2384	132	"arg_2"	"tinyint"	8	0	2
2385	133	"result"	"sec_interval"	19	0	0
2386	133	"arg_1"	"sec_interval"	19	0	1
2387	133	"arg_2"	"tinyint"	8	0	2
2388	134	"result"	"sec_interval"	19	0	0
2389	134	"arg_1"	"sec_interval"	19	0	1
2390	134	"arg_2"	"tinyint"	8	0	2
2391	135	"result"	"sec_interval"	19	0	0
2392	135	"arg_1"	"sec_interval"	19	0	1
2393	135	"arg_2"	"tinyint"	8	0	2
2394	136	"result"	"sec_interval"	19	0	0
2395	136	"arg_1"	"sec_interval"	19	0	1
2396	136	"arg_2"	"tinyint"	8	0	2
2397	137	"result"	"smallint"	16	0	0
2398	137	"arg_1"	"smallint"	16	0	1
2399	137	"arg_2"	"smallint"	16	0	2
2400	138	"result"	"smallint"	16	0	0
2401	138	"arg_1"	"smallint"	16	0	1
2402	138	"arg_2"	"smallint"	16	0	2
2403	139	"result"	"smallint"	16	0	0
2404	139	"arg_1"	"smallint"	16	0	1
2405	139	"arg_2"	"smallint"	16	0	2
2406	140	"result"	"smallint"	16	0	0
2407	140	"arg_1"	"smallint"	16	0	1
2408	140	"arg_2"	"smallint"	16	0	2
2409	141	"result"	"smallint"	16	0	0
2410	141	"arg_1"	"smallint"	16	0	1
2411	141	"arg_2"	"smallint"	16	0	2
2412	142	"result"	"smallint"	16	0	0
2413	142	"arg_1"	"smallint"	16	0	1
2414	142	"arg_2"	"smallint"	16	0	2
2415	143	"result"	"smallint"	16	0	0
2416	143	"arg_1"	"smallint"	16	0	1
2417	143	"arg_2"	"smallint"	16	0	2
2418	144	"result"	"smallint"	16	0	0
2419	144	"arg_1"	"smallint"	16	0	1
2420	145	"result"	"smallint"	16	0	0
2421	145	"arg_1"	"smallint"	16	0	1
2422	145	"arg_2"	"int"	32	0	2
2423	146	"result"	"smallint"	16	0	0
2424	146	"arg_1"	"smallint"	16	0	1
2425	146	"arg_2"	"int"	32	0	2
2426	147	"result"	"smallint"	16	0	0
2427	147	"arg_1"	"smallint"	16	0	1
2428	148	"result"	"smallint"	16	0	0
2429	148	"arg_1"	"smallint"	16	0	1
2430	149	"result"	"tinyint"	8	0	0
2431	149	"arg_1"	"smallint"	16	0	1
2432	150	"result"	"smallint"	16	0	0
2433	150	"arg_1"	"smallint"	16	0	1
2434	150	"arg_2"	"smallint"	16	0	2
2435	151	"result"	"smallint"	16	0	0
2436	151	"arg_1"	"smallint"	16	0	1
2437	151	"arg_2"	"smallint"	16	0	2
2438	152	"result"	"month_interval"	32	0	0
2439	152	"arg_1"	"month_interval"	32	0	1
2440	152	"arg_2"	"smallint"	16	0	2
2441	153	"result"	"month_interval"	32	0	0
2442	153	"arg_1"	"month_interval"	32	0	1
2443	153	"arg_2"	"smallint"	16	0	2
2444	154	"result"	"month_interval"	32	0	0
2445	154	"arg_1"	"month_interval"	32	0	1
2446	154	"arg_2"	"smallint"	16	0	2
2447	155	"result"	"month_interval"	32	0	0
2448	155	"arg_1"	"month_interval"	32	0	1
2449	155	"arg_2"	"smallint"	16	0	2
2450	156	"result"	"sec_interval"	19	0	0
2451	156	"arg_1"	"sec_interval"	19	0	1
2452	156	"arg_2"	"smallint"	16	0	2
2453	157	"result"	"sec_interval"	19	0	0
2454	157	"arg_1"	"sec_interval"	19	0	1
2455	157	"arg_2"	"smallint"	16	0	2
2456	158	"result"	"sec_interval"	19	0	0
2457	158	"arg_1"	"sec_interval"	19	0	1
2458	158	"arg_2"	"smallint"	16	0	2
2459	159	"result"	"sec_interval"	19	0	0
2460	159	"arg_1"	"sec_interval"	19	0	1
2461	159	"arg_2"	"smallint"	16	0	2
2462	160	"result"	"int"	32	0	0
2463	160	"arg_1"	"int"	32	0	1
2464	160	"arg_2"	"int"	32	0	2
2465	161	"result"	"int"	32	0	0
2466	161	"arg_1"	"int"	32	0	1
2467	161	"arg_2"	"int"	32	0	2
2468	162	"result"	"int"	32	0	0
2469	162	"arg_1"	"int"	32	0	1
2470	162	"arg_2"	"int"	32	0	2
2471	163	"result"	"int"	32	0	0
2472	163	"arg_1"	"int"	32	0	1
2473	163	"arg_2"	"int"	32	0	2
2474	164	"result"	"int"	32	0	0
2475	164	"arg_1"	"int"	32	0	1
2476	164	"arg_2"	"int"	32	0	2
2477	165	"result"	"int"	32	0	0
2478	165	"arg_1"	"int"	32	0	1
2479	165	"arg_2"	"int"	32	0	2
2480	166	"result"	"int"	32	0	0
2481	166	"arg_1"	"int"	32	0	1
2482	166	"arg_2"	"int"	32	0	2
2483	167	"result"	"int"	32	0	0
2484	167	"arg_1"	"int"	32	0	1
2485	168	"result"	"int"	32	0	0
2486	168	"arg_1"	"int"	32	0	1
2487	168	"arg_2"	"int"	32	0	2
2488	169	"result"	"int"	32	0	0
2489	169	"arg_1"	"int"	32	0	1
2490	169	"arg_2"	"int"	32	0	2
2491	170	"result"	"int"	32	0	0
2492	170	"arg_1"	"int"	32	0	1
2493	171	"result"	"int"	32	0	0
2494	171	"arg_1"	"int"	32	0	1
2495	172	"result"	"tinyint"	8	0	0
2496	172	"arg_1"	"int"	32	0	1
2497	173	"result"	"int"	32	0	0
2498	173	"arg_1"	"int"	32	0	1
2499	173	"arg_2"	"int"	32	0	2
2500	174	"result"	"int"	32	0	0
2501	174	"arg_1"	"int"	32	0	1
2502	174	"arg_2"	"int"	32	0	2
2503	175	"result"	"month_interval"	32	0	0
2504	175	"arg_1"	"month_interval"	32	0	1
2505	175	"arg_2"	"int"	32	0	2
2506	176	"result"	"month_interval"	32	0	0
2507	176	"arg_1"	"month_interval"	32	0	1
2508	176	"arg_2"	"int"	32	0	2
2509	177	"result"	"month_interval"	32	0	0
2510	177	"arg_1"	"month_interval"	32	0	1
2511	177	"arg_2"	"int"	32	0	2
2512	178	"result"	"month_interval"	32	0	0
2513	178	"arg_1"	"month_interval"	32	0	1
2514	178	"arg_2"	"int"	32	0	2
2515	179	"result"	"sec_interval"	19	0	0
2516	179	"arg_1"	"sec_interval"	19	0	1
2517	179	"arg_2"	"int"	32	0	2
2518	180	"result"	"sec_interval"	19	0	0
2519	180	"arg_1"	"sec_interval"	19	0	1
2520	180	"arg_2"	"int"	32	0	2
2521	181	"result"	"sec_interval"	19	0	0
2522	181	"arg_1"	"sec_interval"	19	0	1
2523	181	"arg_2"	"int"	32	0	2
2524	182	"result"	"sec_interval"	19	0	0
2525	182	"arg_1"	"sec_interval"	19	0	1
2526	182	"arg_2"	"int"	32	0	2
2527	183	"result"	"bigint"	64	0	0
2528	183	"arg_1"	"bigint"	64	0	1
2529	183	"arg_2"	"bigint"	64	0	2
2530	184	"result"	"bigint"	64	0	0
2531	184	"arg_1"	"bigint"	64	0	1
2532	184	"arg_2"	"bigint"	64	0	2
2533	185	"result"	"bigint"	64	0	0
2534	185	"arg_1"	"bigint"	64	0	1
2535	185	"arg_2"	"bigint"	64	0	2
2536	186	"result"	"bigint"	64	0	0
2537	186	"arg_1"	"bigint"	64	0	1
2538	186	"arg_2"	"bigint"	64	0	2
2539	187	"result"	"bigint"	64	0	0
2540	187	"arg_1"	"bigint"	64	0	1
2541	187	"arg_2"	"bigint"	64	0	2
2542	188	"result"	"bigint"	64	0	0
2543	188	"arg_1"	"bigint"	64	0	1
2544	188	"arg_2"	"bigint"	64	0	2
2545	189	"result"	"bigint"	64	0	0
2546	189	"arg_1"	"bigint"	64	0	1
2547	189	"arg_2"	"bigint"	64	0	2
2548	190	"result"	"bigint"	64	0	0
2549	190	"arg_1"	"bigint"	64	0	1
2550	191	"result"	"bigint"	64	0	0
2551	191	"arg_1"	"bigint"	64	0	1
2552	191	"arg_2"	"int"	32	0	2
2553	192	"result"	"bigint"	64	0	0
2554	192	"arg_1"	"bigint"	64	0	1
2555	192	"arg_2"	"int"	32	0	2
2556	193	"result"	"bigint"	64	0	0
2557	193	"arg_1"	"bigint"	64	0	1
2558	194	"result"	"bigint"	64	0	0
2559	194	"arg_1"	"bigint"	64	0	1
2560	195	"result"	"tinyint"	8	0	0
2561	195	"arg_1"	"bigint"	64	0	1
2562	196	"result"	"bigint"	64	0	0
2563	196	"arg_1"	"bigint"	64	0	1
2564	196	"arg_2"	"bigint"	64	0	2
2565	197	"result"	"bigint"	64	0	0
2566	197	"arg_1"	"bigint"	64	0	1
2567	197	"arg_2"	"bigint"	64	0	2
2568	198	"result"	"month_interval"	32	0	0
2569	198	"arg_1"	"month_interval"	32	0	1
2570	198	"arg_2"	"bigint"	64	0	2
2571	199	"result"	"month_interval"	32	0	0
2572	199	"arg_1"	"month_interval"	32	0	1
2573	199	"arg_2"	"bigint"	64	0	2
2574	200	"result"	"month_interval"	32	0	0
2575	200	"arg_1"	"month_interval"	32	0	1
2576	200	"arg_2"	"bigint"	64	0	2
2577	201	"result"	"month_interval"	32	0	0
2578	201	"arg_1"	"month_interval"	32	0	1
2579	201	"arg_2"	"bigint"	64	0	2
2580	202	"result"	"sec_interval"	19	0	0
2581	202	"arg_1"	"sec_interval"	19	0	1
2582	202	"arg_2"	"bigint"	64	0	2
2583	203	"result"	"sec_interval"	19	0	0
2584	203	"arg_1"	"sec_interval"	19	0	1
2585	203	"arg_2"	"bigint"	64	0	2
2586	204	"result"	"sec_interval"	19	0	0
2587	204	"arg_1"	"sec_interval"	19	0	1
2588	204	"arg_2"	"bigint"	64	0	2
2589	205	"result"	"sec_interval"	19	0	0
2590	205	"arg_1"	"sec_interval"	19	0	1
2591	205	"arg_2"	"bigint"	64	0	2
2592	206	"result"	"oid"	63	0	0
2593	206	"arg_1"	"oid"	63	0	1
2594	206	"arg_2"	"oid"	63	0	2
2595	207	"result"	"oid"	63	0	0
2596	207	"arg_1"	"oid"	63	0	1
2597	207	"arg_2"	"oid"	63	0	2
2598	208	"result"	"oid"	63	0	0
2599	208	"arg_1"	"oid"	63	0	1
2600	208	"arg_2"	"oid"	63	0	2
2601	209	"result"	"oid"	63	0	0
2602	209	"arg_1"	"oid"	63	0	1
2603	209	"arg_2"	"oid"	63	0	2
2604	210	"result"	"oid"	63	0	0
2605	210	"arg_1"	"oid"	63	0	1
2606	210	"arg_2"	"oid"	63	0	2
2607	211	"result"	"oid"	63	0	0
2608	211	"arg_1"	"oid"	63	0	1
2609	211	"arg_2"	"oid"	63	0	2
2610	212	"result"	"oid"	63	0	0
2611	212	"arg_1"	"oid"	63	0	1
2612	212	"arg_2"	"oid"	63	0	2
2613	213	"result"	"oid"	63	0	0
2614	213	"arg_1"	"oid"	63	0	1
2615	214	"result"	"oid"	63	0	0
2616	214	"arg_1"	"oid"	63	0	1
2617	214	"arg_2"	"int"	32	0	2
2618	215	"result"	"oid"	63	0	0
2619	215	"arg_1"	"oid"	63	0	1
2620	215	"arg_2"	"int"	32	0	2
2621	216	"result"	"oid"	63	0	0
2622	216	"arg_1"	"oid"	63	0	1
2623	217	"result"	"oid"	63	0	0
2624	217	"arg_1"	"oid"	63	0	1
2625	218	"result"	"tinyint"	8	0	0
2626	218	"arg_1"	"oid"	63	0	1
2627	219	"result"	"oid"	63	0	0
2628	219	"arg_1"	"oid"	63	0	1
2629	219	"arg_2"	"oid"	63	0	2
2630	220	"result"	"oid"	63	0	0
2631	220	"arg_1"	"oid"	63	0	1
2632	220	"arg_2"	"oid"	63	0	2
2633	221	"result"	"month_interval"	32	0	0
2634	221	"arg_1"	"month_interval"	32	0	1
2635	221	"arg_2"	"oid"	63	0	2
2636	222	"result"	"month_interval"	32	0	0
2637	222	"arg_1"	"month_interval"	32	0	1
2638	222	"arg_2"	"oid"	63	0	2
2639	223	"result"	"month_interval"	32	0	0
2640	223	"arg_1"	"month_interval"	32	0	1
2641	223	"arg_2"	"oid"	63	0	2
2642	224	"result"	"month_interval"	32	0	0
2643	224	"arg_1"	"month_interval"	32	0	1
2644	224	"arg_2"	"oid"	63	0	2
2645	225	"result"	"sec_interval"	19	0	0
2646	225	"arg_1"	"sec_interval"	19	0	1
2647	225	"arg_2"	"oid"	63	0	2
2648	226	"result"	"sec_interval"	19	0	0
2649	226	"arg_1"	"sec_interval"	19	0	1
2650	226	"arg_2"	"oid"	63	0	2
2651	227	"result"	"sec_interval"	19	0	0
2652	227	"arg_1"	"sec_interval"	19	0	1
2653	227	"arg_2"	"oid"	63	0	2
2654	228	"result"	"sec_interval"	19	0	0
2655	228	"arg_1"	"sec_interval"	19	0	1
2656	228	"arg_2"	"oid"	63	0	2
2657	229	"result"	"wrd"	64	0	0
2658	229	"arg_1"	"wrd"	64	0	1
2659	229	"arg_2"	"wrd"	64	0	2
2660	230	"result"	"wrd"	64	0	0
2661	230	"arg_1"	"wrd"	64	0	1
2662	230	"arg_2"	"wrd"	64	0	2
2663	231	"result"	"wrd"	64	0	0
2664	231	"arg_1"	"wrd"	64	0	1
2665	231	"arg_2"	"wrd"	64	0	2
2666	232	"result"	"wrd"	64	0	0
2667	232	"arg_1"	"wrd"	64	0	1
2668	232	"arg_2"	"wrd"	64	0	2
2669	233	"result"	"wrd"	64	0	0
2670	233	"arg_1"	"wrd"	64	0	1
2671	233	"arg_2"	"wrd"	64	0	2
2672	234	"result"	"wrd"	64	0	0
2673	234	"arg_1"	"wrd"	64	0	1
2674	234	"arg_2"	"wrd"	64	0	2
2675	235	"result"	"wrd"	64	0	0
2676	235	"arg_1"	"wrd"	64	0	1
2677	235	"arg_2"	"wrd"	64	0	2
2678	236	"result"	"wrd"	64	0	0
2679	236	"arg_1"	"wrd"	64	0	1
2680	237	"result"	"wrd"	64	0	0
2681	237	"arg_1"	"wrd"	64	0	1
2682	237	"arg_2"	"int"	32	0	2
2683	238	"result"	"wrd"	64	0	0
2684	238	"arg_1"	"wrd"	64	0	1
2685	238	"arg_2"	"int"	32	0	2
2686	239	"result"	"wrd"	64	0	0
2687	239	"arg_1"	"wrd"	64	0	1
2688	240	"result"	"wrd"	64	0	0
2689	240	"arg_1"	"wrd"	64	0	1
2690	241	"result"	"tinyint"	8	0	0
2691	241	"arg_1"	"wrd"	64	0	1
2692	242	"result"	"wrd"	64	0	0
2693	242	"arg_1"	"wrd"	64	0	1
2694	242	"arg_2"	"wrd"	64	0	2
2695	243	"result"	"wrd"	64	0	0
2696	243	"arg_1"	"wrd"	64	0	1
2697	243	"arg_2"	"wrd"	64	0	2
2698	244	"result"	"month_interval"	32	0	0
2699	244	"arg_1"	"month_interval"	32	0	1
2700	244	"arg_2"	"wrd"	64	0	2
2701	245	"result"	"month_interval"	32	0	0
2702	245	"arg_1"	"month_interval"	32	0	1
2703	245	"arg_2"	"wrd"	64	0	2
2704	246	"result"	"month_interval"	32	0	0
2705	246	"arg_1"	"month_interval"	32	0	1
2706	246	"arg_2"	"wrd"	64	0	2
2707	247	"result"	"month_interval"	32	0	0
2708	247	"arg_1"	"month_interval"	32	0	1
2709	247	"arg_2"	"wrd"	64	0	2
2710	248	"result"	"sec_interval"	19	0	0
2711	248	"arg_1"	"sec_interval"	19	0	1
2712	248	"arg_2"	"wrd"	64	0	2
2713	249	"result"	"sec_interval"	19	0	0
2714	249	"arg_1"	"sec_interval"	19	0	1
2715	249	"arg_2"	"wrd"	64	0	2
2716	250	"result"	"sec_interval"	19	0	0
2717	250	"arg_1"	"sec_interval"	19	0	1
2718	250	"arg_2"	"wrd"	64	0	2
2719	251	"result"	"sec_interval"	19	0	0
2720	251	"arg_1"	"sec_interval"	19	0	1
2721	251	"arg_2"	"wrd"	64	0	2
2722	252	"result"	"decimal"	2	0	0
2723	252	"arg_1"	"decimal"	2	0	1
2724	252	"arg_2"	"decimal"	2	0	2
2725	253	"result"	"decimal"	2	0	0
2726	253	"arg_1"	"decimal"	2	0	1
2727	253	"arg_2"	"decimal"	2	0	2
2728	254	"result"	"decimal"	2	0	0
2729	254	"arg_1"	"decimal"	2	0	1
2730	254	"arg_2"	"decimal"	2	0	2
2731	255	"result"	"decimal"	2	0	0
2732	255	"arg_1"	"decimal"	2	0	1
2733	255	"arg_2"	"decimal"	2	0	2
2734	256	"result"	"decimal"	2	0	0
2735	256	"arg_1"	"decimal"	2	0	1
2736	256	"arg_2"	"decimal"	2	0	2
2737	257	"result"	"decimal"	2	0	0
2738	257	"arg_1"	"decimal"	2	0	1
2739	257	"arg_2"	"decimal"	2	0	2
2740	258	"result"	"decimal"	2	0	0
2741	258	"arg_1"	"decimal"	2	0	1
2742	258	"arg_2"	"decimal"	2	0	2
2743	259	"result"	"decimal"	2	0	0
2744	259	"arg_1"	"decimal"	2	0	1
2745	260	"result"	"decimal"	2	0	0
2746	260	"arg_1"	"decimal"	2	0	1
2747	260	"arg_2"	"int"	32	0	2
2748	261	"result"	"decimal"	2	0	0
2749	261	"arg_1"	"decimal"	2	0	1
2750	261	"arg_2"	"int"	32	0	2
2751	262	"result"	"decimal"	2	0	0
2752	262	"arg_1"	"decimal"	2	0	1
2753	263	"result"	"decimal"	2	0	0
2754	263	"arg_1"	"decimal"	2	0	1
2755	264	"result"	"tinyint"	8	0	0
2756	264	"arg_1"	"decimal"	2	0	1
2757	265	"result"	"decimal"	2	0	0
2758	265	"arg_1"	"decimal"	2	0	1
2759	265	"arg_2"	"tinyint"	8	0	2
2760	266	"result"	"decimal"	2	0	0
2761	266	"arg_1"	"decimal"	2	0	1
2762	266	"arg_2"	"tinyint"	8	0	2
2763	267	"result"	"month_interval"	32	0	0
2764	267	"arg_1"	"month_interval"	32	0	1
2765	267	"arg_2"	"decimal"	2	0	2
2766	268	"result"	"month_interval"	32	0	0
2767	268	"arg_1"	"month_interval"	32	0	1
2768	268	"arg_2"	"decimal"	2	0	2
2769	269	"result"	"month_interval"	32	0	0
2770	269	"arg_1"	"month_interval"	32	0	1
2771	269	"arg_2"	"decimal"	2	0	2
2772	270	"result"	"month_interval"	32	0	0
2773	270	"arg_1"	"month_interval"	32	0	1
2774	270	"arg_2"	"decimal"	2	0	2
2775	271	"result"	"sec_interval"	19	0	0
2776	271	"arg_1"	"sec_interval"	19	0	1
2777	271	"arg_2"	"decimal"	2	0	2
2778	272	"result"	"sec_interval"	19	0	0
2779	272	"arg_1"	"sec_interval"	19	0	1
2780	272	"arg_2"	"decimal"	2	0	2
2781	273	"result"	"sec_interval"	19	0	0
2782	273	"arg_1"	"sec_interval"	19	0	1
2783	273	"arg_2"	"decimal"	2	0	2
2784	274	"result"	"sec_interval"	19	0	0
2785	274	"arg_1"	"sec_interval"	19	0	1
2786	274	"arg_2"	"decimal"	2	0	2
2787	275	"result"	"decimal"	4	0	0
2788	275	"arg_1"	"decimal"	4	0	1
2789	275	"arg_2"	"decimal"	4	0	2
2790	276	"result"	"decimal"	4	0	0
2791	276	"arg_1"	"decimal"	4	0	1
2792	276	"arg_2"	"decimal"	4	0	2
2793	277	"result"	"decimal"	4	0	0
2794	277	"arg_1"	"decimal"	4	0	1
2795	277	"arg_2"	"decimal"	4	0	2
2796	278	"result"	"decimal"	4	0	0
2797	278	"arg_1"	"decimal"	4	0	1
2798	278	"arg_2"	"decimal"	4	0	2
2799	279	"result"	"decimal"	4	0	0
2800	279	"arg_1"	"decimal"	4	0	1
2801	279	"arg_2"	"decimal"	4	0	2
2802	280	"result"	"decimal"	4	0	0
2803	280	"arg_1"	"decimal"	4	0	1
2804	280	"arg_2"	"decimal"	4	0	2
2805	281	"result"	"decimal"	4	0	0
2806	281	"arg_1"	"decimal"	4	0	1
2807	281	"arg_2"	"decimal"	4	0	2
2808	282	"result"	"decimal"	4	0	0
2809	282	"arg_1"	"decimal"	4	0	1
2810	283	"result"	"decimal"	4	0	0
2811	283	"arg_1"	"decimal"	4	0	1
2812	283	"arg_2"	"int"	32	0	2
2813	284	"result"	"decimal"	4	0	0
2814	284	"arg_1"	"decimal"	4	0	1
2815	284	"arg_2"	"int"	32	0	2
2816	285	"result"	"decimal"	4	0	0
2817	285	"arg_1"	"decimal"	4	0	1
2818	286	"result"	"decimal"	4	0	0
2819	286	"arg_1"	"decimal"	4	0	1
2820	287	"result"	"tinyint"	8	0	0
2821	287	"arg_1"	"decimal"	4	0	1
2822	288	"result"	"decimal"	4	0	0
2823	288	"arg_1"	"decimal"	4	0	1
2824	288	"arg_2"	"smallint"	16	0	2
2825	289	"result"	"decimal"	4	0	0
2826	289	"arg_1"	"decimal"	4	0	1
2827	289	"arg_2"	"smallint"	16	0	2
2828	290	"result"	"month_interval"	32	0	0
2829	290	"arg_1"	"month_interval"	32	0	1
2830	290	"arg_2"	"decimal"	4	0	2
2831	291	"result"	"month_interval"	32	0	0
2832	291	"arg_1"	"month_interval"	32	0	1
2833	291	"arg_2"	"decimal"	4	0	2
2834	292	"result"	"month_interval"	32	0	0
2835	292	"arg_1"	"month_interval"	32	0	1
2836	292	"arg_2"	"decimal"	4	0	2
2837	293	"result"	"month_interval"	32	0	0
2838	293	"arg_1"	"month_interval"	32	0	1
2839	293	"arg_2"	"decimal"	4	0	2
2840	294	"result"	"sec_interval"	19	0	0
2841	294	"arg_1"	"sec_interval"	19	0	1
2842	294	"arg_2"	"decimal"	4	0	2
2843	295	"result"	"sec_interval"	19	0	0
2844	295	"arg_1"	"sec_interval"	19	0	1
2845	295	"arg_2"	"decimal"	4	0	2
2846	296	"result"	"sec_interval"	19	0	0
2847	296	"arg_1"	"sec_interval"	19	0	1
2848	296	"arg_2"	"decimal"	4	0	2
2849	297	"result"	"sec_interval"	19	0	0
2850	297	"arg_1"	"sec_interval"	19	0	1
2851	297	"arg_2"	"decimal"	4	0	2
2852	298	"result"	"decimal"	9	0	0
2853	298	"arg_1"	"decimal"	9	0	1
2854	298	"arg_2"	"decimal"	9	0	2
2855	299	"result"	"decimal"	9	0	0
2856	299	"arg_1"	"decimal"	9	0	1
2857	299	"arg_2"	"decimal"	9	0	2
2858	300	"result"	"decimal"	9	0	0
2859	300	"arg_1"	"decimal"	9	0	1
2860	300	"arg_2"	"decimal"	9	0	2
2861	301	"result"	"decimal"	9	0	0
2862	301	"arg_1"	"decimal"	9	0	1
2863	301	"arg_2"	"decimal"	9	0	2
2864	302	"result"	"decimal"	9	0	0
2865	302	"arg_1"	"decimal"	9	0	1
2866	302	"arg_2"	"decimal"	9	0	2
2867	303	"result"	"decimal"	9	0	0
2868	303	"arg_1"	"decimal"	9	0	1
2869	303	"arg_2"	"decimal"	9	0	2
2870	304	"result"	"decimal"	9	0	0
2871	304	"arg_1"	"decimal"	9	0	1
2872	304	"arg_2"	"decimal"	9	0	2
2873	305	"result"	"decimal"	9	0	0
2874	305	"arg_1"	"decimal"	9	0	1
2875	306	"result"	"decimal"	9	0	0
2876	306	"arg_1"	"decimal"	9	0	1
2877	306	"arg_2"	"int"	32	0	2
2878	307	"result"	"decimal"	9	0	0
2879	307	"arg_1"	"decimal"	9	0	1
2880	307	"arg_2"	"int"	32	0	2
2881	308	"result"	"decimal"	9	0	0
2882	308	"arg_1"	"decimal"	9	0	1
2883	309	"result"	"decimal"	9	0	0
2884	309	"arg_1"	"decimal"	9	0	1
2885	310	"result"	"tinyint"	8	0	0
2886	310	"arg_1"	"decimal"	9	0	1
2887	311	"result"	"decimal"	9	0	0
2888	311	"arg_1"	"decimal"	9	0	1
2889	311	"arg_2"	"int"	32	0	2
2890	312	"result"	"decimal"	9	0	0
2891	312	"arg_1"	"decimal"	9	0	1
2892	312	"arg_2"	"int"	32	0	2
2893	313	"result"	"month_interval"	32	0	0
2894	313	"arg_1"	"month_interval"	32	0	1
2895	313	"arg_2"	"decimal"	9	0	2
2896	314	"result"	"month_interval"	32	0	0
2897	314	"arg_1"	"month_interval"	32	0	1
2898	314	"arg_2"	"decimal"	9	0	2
2899	315	"result"	"month_interval"	32	0	0
2900	315	"arg_1"	"month_interval"	32	0	1
2901	315	"arg_2"	"decimal"	9	0	2
2902	316	"result"	"month_interval"	32	0	0
2903	316	"arg_1"	"month_interval"	32	0	1
2904	316	"arg_2"	"decimal"	9	0	2
2905	317	"result"	"sec_interval"	19	0	0
2906	317	"arg_1"	"sec_interval"	19	0	1
2907	317	"arg_2"	"decimal"	9	0	2
2908	318	"result"	"sec_interval"	19	0	0
2909	318	"arg_1"	"sec_interval"	19	0	1
2910	318	"arg_2"	"decimal"	9	0	2
2911	319	"result"	"sec_interval"	19	0	0
2912	319	"arg_1"	"sec_interval"	19	0	1
2913	319	"arg_2"	"decimal"	9	0	2
2914	320	"result"	"sec_interval"	19	0	0
2915	320	"arg_1"	"sec_interval"	19	0	1
2916	320	"arg_2"	"decimal"	9	0	2
2917	321	"result"	"decimal"	19	0	0
2918	321	"arg_1"	"decimal"	19	0	1
2919	321	"arg_2"	"decimal"	19	0	2
2920	322	"result"	"decimal"	19	0	0
2921	322	"arg_1"	"decimal"	19	0	1
2922	322	"arg_2"	"decimal"	19	0	2
2923	323	"result"	"decimal"	19	0	0
2924	323	"arg_1"	"decimal"	19	0	1
2925	323	"arg_2"	"decimal"	19	0	2
2926	324	"result"	"decimal"	19	0	0
2927	324	"arg_1"	"decimal"	19	0	1
2928	324	"arg_2"	"decimal"	19	0	2
2929	325	"result"	"decimal"	19	0	0
2930	325	"arg_1"	"decimal"	19	0	1
2931	325	"arg_2"	"decimal"	19	0	2
2932	326	"result"	"decimal"	19	0	0
2933	326	"arg_1"	"decimal"	19	0	1
2934	326	"arg_2"	"decimal"	19	0	2
2935	327	"result"	"decimal"	19	0	0
2936	327	"arg_1"	"decimal"	19	0	1
2937	327	"arg_2"	"decimal"	19	0	2
2938	328	"result"	"decimal"	19	0	0
2939	328	"arg_1"	"decimal"	19	0	1
2940	329	"result"	"decimal"	19	0	0
2941	329	"arg_1"	"decimal"	19	0	1
2942	329	"arg_2"	"int"	32	0	2
2943	330	"result"	"decimal"	19	0	0
2944	330	"arg_1"	"decimal"	19	0	1
2945	330	"arg_2"	"int"	32	0	2
2946	331	"result"	"decimal"	19	0	0
2947	331	"arg_1"	"decimal"	19	0	1
2948	332	"result"	"decimal"	19	0	0
2949	332	"arg_1"	"decimal"	19	0	1
2950	333	"result"	"tinyint"	8	0	0
2951	333	"arg_1"	"decimal"	19	0	1
2952	334	"result"	"decimal"	19	0	0
2953	334	"arg_1"	"decimal"	19	0	1
2954	334	"arg_2"	"bigint"	64	0	2
2955	335	"result"	"decimal"	19	0	0
2956	335	"arg_1"	"decimal"	19	0	1
2957	335	"arg_2"	"bigint"	64	0	2
2958	336	"result"	"month_interval"	32	0	0
2959	336	"arg_1"	"month_interval"	32	0	1
2960	336	"arg_2"	"decimal"	19	0	2
2961	337	"result"	"month_interval"	32	0	0
2962	337	"arg_1"	"month_interval"	32	0	1
2963	337	"arg_2"	"decimal"	19	0	2
2964	338	"result"	"month_interval"	32	0	0
2965	338	"arg_1"	"month_interval"	32	0	1
2966	338	"arg_2"	"decimal"	19	0	2
2967	339	"result"	"month_interval"	32	0	0
2968	339	"arg_1"	"month_interval"	32	0	1
2969	339	"arg_2"	"decimal"	19	0	2
2970	340	"result"	"sec_interval"	19	0	0
2971	340	"arg_1"	"sec_interval"	19	0	1
2972	340	"arg_2"	"decimal"	19	0	2
2973	341	"result"	"sec_interval"	19	0	0
2974	341	"arg_1"	"sec_interval"	19	0	1
2975	341	"arg_2"	"decimal"	19	0	2
2976	342	"result"	"sec_interval"	19	0	0
2977	342	"arg_1"	"sec_interval"	19	0	1
2978	342	"arg_2"	"decimal"	19	0	2
2979	343	"result"	"sec_interval"	19	0	0
2980	343	"arg_1"	"sec_interval"	19	0	1
2981	343	"arg_2"	"decimal"	19	0	2
2982	344	"result"	"real"	24	0	0
2983	344	"arg_1"	"real"	24	0	1
2984	344	"arg_2"	"real"	24	0	2
2985	345	"result"	"real"	24	0	0
2986	345	"arg_1"	"real"	24	0	1
2987	345	"arg_2"	"real"	24	0	2
2988	346	"result"	"real"	24	0	0
2989	346	"arg_1"	"real"	24	0	1
2990	346	"arg_2"	"real"	24	0	2
2991	347	"result"	"real"	24	0	0
2992	347	"arg_1"	"real"	24	0	1
2993	347	"arg_2"	"real"	24	0	2
2994	348	"result"	"real"	24	0	0
2995	348	"arg_1"	"real"	24	0	1
2996	349	"result"	"real"	24	0	0
2997	349	"arg_1"	"real"	24	0	1
2998	350	"result"	"tinyint"	8	0	0
2999	350	"arg_1"	"real"	24	0	1
3000	351	"result"	"real"	24	0	0
3001	351	"arg_1"	"real"	24	0	1
3002	351	"arg_2"	"real"	24	0	2
3003	352	"result"	"real"	24	0	0
3004	352	"arg_1"	"real"	24	0	1
3005	352	"arg_2"	"real"	24	0	2
3006	353	"result"	"month_interval"	32	0	0
3007	353	"arg_1"	"month_interval"	32	0	1
3008	353	"arg_2"	"real"	24	0	2
3009	354	"result"	"month_interval"	32	0	0
3010	354	"arg_1"	"month_interval"	32	0	1
3011	354	"arg_2"	"real"	24	0	2
3012	355	"result"	"month_interval"	32	0	0
3013	355	"arg_1"	"month_interval"	32	0	1
3014	355	"arg_2"	"real"	24	0	2
3015	356	"result"	"month_interval"	32	0	0
3016	356	"arg_1"	"month_interval"	32	0	1
3017	356	"arg_2"	"real"	24	0	2
3018	357	"result"	"sec_interval"	19	0	0
3019	357	"arg_1"	"sec_interval"	19	0	1
3020	357	"arg_2"	"real"	24	0	2
3021	358	"result"	"sec_interval"	19	0	0
3022	358	"arg_1"	"sec_interval"	19	0	1
3023	358	"arg_2"	"real"	24	0	2
3024	359	"result"	"sec_interval"	19	0	0
3025	359	"arg_1"	"sec_interval"	19	0	1
3026	359	"arg_2"	"real"	24	0	2
3027	360	"result"	"sec_interval"	19	0	0
3028	360	"arg_1"	"sec_interval"	19	0	1
3029	360	"arg_2"	"real"	24	0	2
3030	361	"result"	"double"	53	0	0
3031	361	"arg_1"	"double"	53	0	1
3032	361	"arg_2"	"double"	53	0	2
3033	362	"result"	"double"	53	0	0
3034	362	"arg_1"	"double"	53	0	1
3035	362	"arg_2"	"double"	53	0	2
3036	363	"result"	"double"	53	0	0
3037	363	"arg_1"	"double"	53	0	1
3038	363	"arg_2"	"double"	53	0	2
3039	364	"result"	"double"	53	0	0
3040	364	"arg_1"	"double"	53	0	1
3041	364	"arg_2"	"double"	53	0	2
3042	365	"result"	"double"	53	0	0
3043	365	"arg_1"	"double"	53	0	1
3044	366	"result"	"double"	53	0	0
3045	366	"arg_1"	"double"	53	0	1
3046	367	"result"	"tinyint"	8	0	0
3047	367	"arg_1"	"double"	53	0	1
3048	368	"result"	"double"	53	0	0
3049	368	"arg_1"	"double"	53	0	1
3050	368	"arg_2"	"double"	53	0	2
3051	369	"result"	"double"	53	0	0
3052	369	"arg_1"	"double"	53	0	1
3053	369	"arg_2"	"double"	53	0	2
3054	370	"result"	"month_interval"	32	0	0
3055	370	"arg_1"	"month_interval"	32	0	1
3056	370	"arg_2"	"double"	53	0	2
3057	371	"result"	"month_interval"	32	0	0
3058	371	"arg_1"	"month_interval"	32	0	1
3059	371	"arg_2"	"double"	53	0	2
3060	372	"result"	"month_interval"	32	0	0
3061	372	"arg_1"	"month_interval"	32	0	1
3062	372	"arg_2"	"double"	53	0	2
3063	373	"result"	"month_interval"	32	0	0
3064	373	"arg_1"	"month_interval"	32	0	1
3065	373	"arg_2"	"double"	53	0	2
3066	374	"result"	"sec_interval"	19	0	0
3067	374	"arg_1"	"sec_interval"	19	0	1
3068	374	"arg_2"	"double"	53	0	2
3069	375	"result"	"sec_interval"	19	0	0
3070	375	"arg_1"	"sec_interval"	19	0	1
3071	375	"arg_2"	"double"	53	0	2
3072	376	"result"	"sec_interval"	19	0	0
3073	376	"arg_1"	"sec_interval"	19	0	1
3074	376	"arg_2"	"double"	53	0	2
3075	377	"result"	"sec_interval"	19	0	0
3076	377	"arg_1"	"sec_interval"	19	0	1
3077	377	"arg_2"	"double"	53	0	2
3078	378	"result"	"month_interval"	32	0	0
3079	378	"arg_1"	"month_interval"	32	0	1
3080	378	"arg_2"	"month_interval"	32	0	2
3081	379	"result"	"month_interval"	32	0	0
3082	379	"arg_1"	"month_interval"	32	0	1
3083	379	"arg_2"	"month_interval"	32	0	2
3084	380	"result"	"month_interval"	32	0	0
3085	380	"arg_1"	"month_interval"	32	0	1
3086	380	"arg_2"	"month_interval"	32	0	2
3087	381	"result"	"month_interval"	32	0	0
3088	381	"arg_1"	"month_interval"	32	0	1
3089	381	"arg_2"	"month_interval"	32	0	2
3090	382	"result"	"month_interval"	32	0	0
3091	382	"arg_1"	"month_interval"	32	0	1
3092	383	"result"	"month_interval"	32	0	0
3093	383	"arg_1"	"month_interval"	32	0	1
3094	384	"result"	"tinyint"	8	0	0
3095	384	"arg_1"	"month_interval"	32	0	1
3096	385	"result"	"month_interval"	32	0	0
3097	385	"arg_1"	"month_interval"	32	0	1
3098	385	"arg_2"	"int"	32	0	2
3099	386	"result"	"month_interval"	32	0	0
3100	386	"arg_1"	"month_interval"	32	0	1
3101	386	"arg_2"	"int"	32	0	2
3102	387	"result"	"sec_interval"	19	0	0
3103	387	"arg_1"	"sec_interval"	19	0	1
3104	387	"arg_2"	"sec_interval"	19	0	2
3105	388	"result"	"sec_interval"	19	0	0
3106	388	"arg_1"	"sec_interval"	19	0	1
3107	388	"arg_2"	"sec_interval"	19	0	2
3108	389	"result"	"sec_interval"	19	0	0
3109	389	"arg_1"	"sec_interval"	19	0	1
3110	389	"arg_2"	"sec_interval"	19	0	2
3111	390	"result"	"sec_interval"	19	0	0
3112	390	"arg_1"	"sec_interval"	19	0	1
3113	390	"arg_2"	"sec_interval"	19	0	2
3114	391	"result"	"sec_interval"	19	0	0
3115	391	"arg_1"	"sec_interval"	19	0	1
3116	392	"result"	"sec_interval"	19	0	0
3117	392	"arg_1"	"sec_interval"	19	0	1
3118	393	"result"	"tinyint"	8	0	0
3119	393	"arg_1"	"sec_interval"	19	0	1
3120	394	"result"	"sec_interval"	19	0	0
3121	394	"arg_1"	"sec_interval"	19	0	1
3122	394	"arg_2"	"bigint"	64	0	2
3123	395	"result"	"sec_interval"	19	0	0
3124	395	"arg_1"	"sec_interval"	19	0	1
3125	395	"arg_2"	"bigint"	64	0	2
3126	396	"result"	"decimal"	4	0	0
3127	396	"arg_1"	"decimal"	4	0	1
3128	396	"arg_2"	"tinyint"	8	0	2
3129	397	"result"	"decimal"	4	0	0
3130	397	"arg_1"	"tinyint"	8	0	1
3131	397	"arg_2"	"decimal"	4	0	2
3132	398	"result"	"decimal"	4	0	0
3133	398	"arg_1"	"decimal"	4	0	1
3134	398	"arg_2"	"decimal"	2	0	2
3135	399	"result"	"decimal"	4	0	0
3136	399	"arg_1"	"decimal"	2	0	1
3137	399	"arg_2"	"decimal"	4	0	2
3138	400	"result"	"decimal"	9	0	0
3139	400	"arg_1"	"decimal"	9	0	1
3140	400	"arg_2"	"tinyint"	8	0	2
3141	401	"result"	"decimal"	9	0	0
3142	401	"arg_1"	"tinyint"	8	0	1
3143	401	"arg_2"	"decimal"	9	0	2
3144	402	"result"	"decimal"	9	0	0
3145	402	"arg_1"	"decimal"	9	0	1
3146	402	"arg_2"	"smallint"	16	0	2
3147	403	"result"	"decimal"	9	0	0
3148	403	"arg_1"	"smallint"	16	0	1
3149	403	"arg_2"	"decimal"	9	0	2
3150	404	"result"	"decimal"	9	0	0
3151	404	"arg_1"	"decimal"	9	0	1
3152	404	"arg_2"	"decimal"	2	0	2
3153	405	"result"	"decimal"	9	0	0
3154	405	"arg_1"	"decimal"	2	0	1
3155	405	"arg_2"	"decimal"	9	0	2
3156	406	"result"	"decimal"	9	0	0
3157	406	"arg_1"	"decimal"	9	0	1
3158	406	"arg_2"	"decimal"	4	0	2
3159	407	"result"	"decimal"	9	0	0
3160	407	"arg_1"	"decimal"	4	0	1
3161	407	"arg_2"	"decimal"	9	0	2
3162	408	"result"	"decimal"	19	0	0
3163	408	"arg_1"	"decimal"	19	0	1
3164	408	"arg_2"	"tinyint"	8	0	2
3165	409	"result"	"decimal"	19	0	0
3166	409	"arg_1"	"tinyint"	8	0	1
3167	409	"arg_2"	"decimal"	19	0	2
3168	410	"result"	"decimal"	19	0	0
3169	410	"arg_1"	"decimal"	19	0	1
3170	410	"arg_2"	"smallint"	16	0	2
3171	411	"result"	"decimal"	19	0	0
3172	411	"arg_1"	"smallint"	16	0	1
3173	411	"arg_2"	"decimal"	19	0	2
3174	412	"result"	"decimal"	19	0	0
3175	412	"arg_1"	"decimal"	19	0	1
3176	412	"arg_2"	"int"	32	0	2
3177	413	"result"	"decimal"	19	0	0
3178	413	"arg_1"	"int"	32	0	1
3179	413	"arg_2"	"decimal"	19	0	2
3180	414	"result"	"decimal"	19	0	0
3181	414	"arg_1"	"decimal"	19	0	1
3182	414	"arg_2"	"wrd"	64	0	2
3183	415	"result"	"decimal"	19	0	0
3184	415	"arg_1"	"wrd"	64	0	1
3185	415	"arg_2"	"decimal"	19	0	2
3186	416	"result"	"decimal"	19	0	0
3187	416	"arg_1"	"decimal"	19	0	1
3188	416	"arg_2"	"decimal"	2	0	2
3189	417	"result"	"decimal"	19	0	0
3190	417	"arg_1"	"decimal"	2	0	1
3191	417	"arg_2"	"decimal"	19	0	2
3192	418	"result"	"decimal"	19	0	0
3193	418	"arg_1"	"decimal"	19	0	1
3194	418	"arg_2"	"decimal"	4	0	2
3195	419	"result"	"decimal"	19	0	0
3196	419	"arg_1"	"decimal"	4	0	1
3197	419	"arg_2"	"decimal"	19	0	2
3198	420	"result"	"decimal"	19	0	0
3199	420	"arg_1"	"decimal"	19	0	1
3200	420	"arg_2"	"decimal"	9	0	2
3201	421	"result"	"decimal"	19	0	0
3202	421	"arg_1"	"decimal"	9	0	1
3203	421	"arg_2"	"decimal"	19	0	2
3204	422	"result"	"decimal"	2	0	0
3205	422	"arg_1"	"decimal"	2	0	1
3206	422	"arg_2"	"tinyint"	8	0	2
3207	423	"result"	"decimal"	4	0	0
3208	423	"arg_1"	"decimal"	4	0	1
3209	423	"arg_2"	"tinyint"	8	0	2
3210	424	"result"	"decimal"	9	0	0
3211	424	"arg_1"	"decimal"	9	0	1
3212	424	"arg_2"	"tinyint"	8	0	2
3213	425	"result"	"decimal"	19	0	0
3214	425	"arg_1"	"decimal"	19	0	1
3215	425	"arg_2"	"tinyint"	8	0	2
3216	426	"result"	"real"	24	0	0
3217	426	"arg_1"	"real"	24	0	1
3218	426	"arg_2"	"tinyint"	8	0	2
3219	427	"result"	"double"	53	0	0
3220	427	"arg_1"	"double"	53	0	1
3221	427	"arg_2"	"tinyint"	8	0	2
3222	428	"result"	"tinyint"	8	0	0
3223	428	"arg_1"	"tinyint"	8	0	1
3224	428	"arg_2"	"tinyint"	8	0	2
3225	429	"result"	"tinyint"	8	0	0
3226	429	"arg_1"	"smallint"	16	0	1
3227	429	"arg_2"	"tinyint"	8	0	2
3228	430	"result"	"tinyint"	8	0	0
3229	430	"arg_1"	"int"	32	0	1
3230	430	"arg_2"	"tinyint"	8	0	2
3231	431	"result"	"tinyint"	8	0	0
3232	431	"arg_1"	"bigint"	64	0	1
3233	431	"arg_2"	"tinyint"	8	0	2
3234	432	"result"	"tinyint"	8	0	0
3235	432	"arg_1"	"oid"	63	0	1
3236	432	"arg_2"	"tinyint"	8	0	2
3237	433	"result"	"tinyint"	8	0	0
3238	433	"arg_1"	"wrd"	64	0	1
3239	433	"arg_2"	"tinyint"	8	0	2
3240	434	"result"	"tinyint"	8	0	0
3241	434	"arg_1"	"decimal"	2	0	1
3242	434	"arg_2"	"tinyint"	8	0	2
3243	435	"result"	"tinyint"	8	0	0
3244	435	"arg_1"	"decimal"	4	0	1
3245	435	"arg_2"	"tinyint"	8	0	2
3246	436	"result"	"tinyint"	8	0	0
3247	436	"arg_1"	"decimal"	9	0	1
3248	436	"arg_2"	"tinyint"	8	0	2
3249	437	"result"	"tinyint"	8	0	0
3250	437	"arg_1"	"decimal"	19	0	1
3251	437	"arg_2"	"tinyint"	8	0	2
3252	438	"result"	"tinyint"	8	0	0
3253	438	"arg_1"	"real"	24	0	1
3254	438	"arg_2"	"tinyint"	8	0	2
3255	439	"result"	"tinyint"	8	0	0
3256	439	"arg_1"	"double"	53	0	1
3257	439	"arg_2"	"tinyint"	8	0	2
3258	440	"result"	"tinyint"	8	0	0
3259	440	"arg_1"	"month_interval"	32	0	1
3260	440	"arg_2"	"tinyint"	8	0	2
3261	441	"result"	"tinyint"	8	0	0
3262	441	"arg_1"	"sec_interval"	19	0	1
3263	441	"arg_2"	"tinyint"	8	0	2
3264	442	"result"	"tinyint"	8	0	0
3265	442	"arg_1"	"time"	7	0	1
3266	442	"arg_2"	"tinyint"	8	0	2
3267	443	"result"	"tinyint"	8	0	0
3268	443	"arg_1"	"timetz"	7	0	1
3269	443	"arg_2"	"tinyint"	8	0	2
3270	444	"result"	"tinyint"	8	0	0
3271	444	"arg_1"	"date"	0	0	1
3272	444	"arg_2"	"tinyint"	8	0	2
3273	445	"result"	"tinyint"	8	0	0
3274	445	"arg_1"	"timestamp"	7	0	1
3275	445	"arg_2"	"tinyint"	8	0	2
3276	446	"result"	"tinyint"	8	0	0
3277	446	"arg_1"	"timestamptz"	7	0	1
3278	446	"arg_2"	"tinyint"	8	0	2
3279	447	"result"	"tinyint"	8	0	0
3280	447	"arg_1"	"blob"	0	0	1
3281	447	"arg_2"	"tinyint"	8	0	2
3282	448	"result"	"smallint"	16	0	0
3283	448	"arg_1"	"tinyint"	8	0	1
3284	448	"arg_2"	"smallint"	16	0	2
3285	449	"result"	"smallint"	16	0	0
3286	449	"arg_1"	"smallint"	16	0	1
3287	449	"arg_2"	"smallint"	16	0	2
3288	450	"result"	"smallint"	16	0	0
3289	450	"arg_1"	"int"	32	0	1
3290	450	"arg_2"	"smallint"	16	0	2
3291	451	"result"	"smallint"	16	0	0
3292	451	"arg_1"	"bigint"	64	0	1
3293	451	"arg_2"	"smallint"	16	0	2
3294	452	"result"	"smallint"	16	0	0
3295	452	"arg_1"	"oid"	63	0	1
3296	452	"arg_2"	"smallint"	16	0	2
3297	453	"result"	"smallint"	16	0	0
3298	453	"arg_1"	"wrd"	64	0	1
3299	453	"arg_2"	"smallint"	16	0	2
3300	454	"result"	"smallint"	16	0	0
3301	454	"arg_1"	"decimal"	2	0	1
3302	454	"arg_2"	"smallint"	16	0	2
3303	455	"result"	"smallint"	16	0	0
3304	455	"arg_1"	"decimal"	4	0	1
3305	455	"arg_2"	"smallint"	16	0	2
3306	456	"result"	"smallint"	16	0	0
3307	456	"arg_1"	"decimal"	9	0	1
3308	456	"arg_2"	"smallint"	16	0	2
3309	457	"result"	"smallint"	16	0	0
3310	457	"arg_1"	"decimal"	19	0	1
3311	457	"arg_2"	"smallint"	16	0	2
3312	458	"result"	"smallint"	16	0	0
3313	458	"arg_1"	"real"	24	0	1
3314	458	"arg_2"	"smallint"	16	0	2
3315	459	"result"	"smallint"	16	0	0
3316	459	"arg_1"	"double"	53	0	1
3317	459	"arg_2"	"smallint"	16	0	2
3318	460	"result"	"smallint"	16	0	0
3319	460	"arg_1"	"month_interval"	32	0	1
3320	460	"arg_2"	"smallint"	16	0	2
3321	461	"result"	"smallint"	16	0	0
3322	461	"arg_1"	"sec_interval"	19	0	1
3323	461	"arg_2"	"smallint"	16	0	2
3324	462	"result"	"smallint"	16	0	0
3325	462	"arg_1"	"time"	7	0	1
3326	462	"arg_2"	"smallint"	16	0	2
3327	463	"result"	"smallint"	16	0	0
3328	463	"arg_1"	"timetz"	7	0	1
3329	463	"arg_2"	"smallint"	16	0	2
3330	464	"result"	"smallint"	16	0	0
3331	464	"arg_1"	"date"	0	0	1
3332	464	"arg_2"	"smallint"	16	0	2
3333	465	"result"	"smallint"	16	0	0
3334	465	"arg_1"	"timestamp"	7	0	1
3335	465	"arg_2"	"smallint"	16	0	2
3336	466	"result"	"smallint"	16	0	0
3337	466	"arg_1"	"timestamptz"	7	0	1
3338	466	"arg_2"	"smallint"	16	0	2
3339	467	"result"	"smallint"	16	0	0
3340	467	"arg_1"	"blob"	0	0	1
3341	467	"arg_2"	"smallint"	16	0	2
3342	468	"result"	"int"	32	0	0
3343	468	"arg_1"	"tinyint"	8	0	1
3344	468	"arg_2"	"int"	32	0	2
3345	469	"result"	"int"	32	0	0
3346	469	"arg_1"	"smallint"	16	0	1
3347	469	"arg_2"	"int"	32	0	2
3348	470	"result"	"int"	32	0	0
3349	470	"arg_1"	"int"	32	0	1
3350	470	"arg_2"	"int"	32	0	2
3351	471	"result"	"int"	32	0	0
3352	471	"arg_1"	"bigint"	64	0	1
3353	471	"arg_2"	"int"	32	0	2
3354	472	"result"	"int"	32	0	0
3355	472	"arg_1"	"oid"	63	0	1
3356	472	"arg_2"	"int"	32	0	2
3357	473	"result"	"int"	32	0	0
3358	473	"arg_1"	"wrd"	64	0	1
3359	473	"arg_2"	"int"	32	0	2
3360	474	"result"	"int"	32	0	0
3361	474	"arg_1"	"decimal"	2	0	1
3362	474	"arg_2"	"int"	32	0	2
3363	475	"result"	"int"	32	0	0
3364	475	"arg_1"	"decimal"	4	0	1
3365	475	"arg_2"	"int"	32	0	2
3366	476	"result"	"int"	32	0	0
3367	476	"arg_1"	"decimal"	9	0	1
3368	476	"arg_2"	"int"	32	0	2
3369	477	"result"	"int"	32	0	0
3370	477	"arg_1"	"decimal"	19	0	1
3371	477	"arg_2"	"int"	32	0	2
3372	478	"result"	"int"	32	0	0
3373	478	"arg_1"	"real"	24	0	1
3374	478	"arg_2"	"int"	32	0	2
3375	479	"result"	"int"	32	0	0
3376	479	"arg_1"	"double"	53	0	1
3377	479	"arg_2"	"int"	32	0	2
3378	480	"result"	"int"	32	0	0
3379	480	"arg_1"	"month_interval"	32	0	1
3380	480	"arg_2"	"int"	32	0	2
3381	481	"result"	"int"	32	0	0
3382	481	"arg_1"	"sec_interval"	19	0	1
3383	481	"arg_2"	"int"	32	0	2
3384	482	"result"	"int"	32	0	0
3385	482	"arg_1"	"time"	7	0	1
3386	482	"arg_2"	"int"	32	0	2
3387	483	"result"	"int"	32	0	0
3388	483	"arg_1"	"timetz"	7	0	1
3389	483	"arg_2"	"int"	32	0	2
3390	484	"result"	"int"	32	0	0
3391	484	"arg_1"	"date"	0	0	1
3392	484	"arg_2"	"int"	32	0	2
3393	485	"result"	"int"	32	0	0
3394	485	"arg_1"	"timestamp"	7	0	1
3395	485	"arg_2"	"int"	32	0	2
3396	486	"result"	"int"	32	0	0
3397	486	"arg_1"	"timestamptz"	7	0	1
3398	486	"arg_2"	"int"	32	0	2
3399	487	"result"	"int"	32	0	0
3400	487	"arg_1"	"blob"	0	0	1
3401	487	"arg_2"	"int"	32	0	2
3402	488	"result"	"bigint"	64	0	0
3403	488	"arg_1"	"tinyint"	8	0	1
3404	488	"arg_2"	"bigint"	64	0	2
3405	489	"result"	"bigint"	64	0	0
3406	489	"arg_1"	"smallint"	16	0	1
3407	489	"arg_2"	"bigint"	64	0	2
3408	490	"result"	"bigint"	64	0	0
3409	490	"arg_1"	"int"	32	0	1
3410	490	"arg_2"	"bigint"	64	0	2
3411	491	"result"	"bigint"	64	0	0
3412	491	"arg_1"	"bigint"	64	0	1
3413	491	"arg_2"	"bigint"	64	0	2
3414	492	"result"	"bigint"	64	0	0
3415	492	"arg_1"	"oid"	63	0	1
3416	492	"arg_2"	"bigint"	64	0	2
3417	493	"result"	"bigint"	64	0	0
3418	493	"arg_1"	"wrd"	64	0	1
3419	493	"arg_2"	"bigint"	64	0	2
3420	494	"result"	"bigint"	64	0	0
3421	494	"arg_1"	"decimal"	2	0	1
3422	494	"arg_2"	"bigint"	64	0	2
3423	495	"result"	"bigint"	64	0	0
3424	495	"arg_1"	"decimal"	4	0	1
3425	495	"arg_2"	"bigint"	64	0	2
3426	496	"result"	"bigint"	64	0	0
3427	496	"arg_1"	"decimal"	9	0	1
3428	496	"arg_2"	"bigint"	64	0	2
3429	497	"result"	"bigint"	64	0	0
3430	497	"arg_1"	"decimal"	19	0	1
3431	497	"arg_2"	"bigint"	64	0	2
3432	498	"result"	"bigint"	64	0	0
3433	498	"arg_1"	"real"	24	0	1
3434	498	"arg_2"	"bigint"	64	0	2
3435	499	"result"	"bigint"	64	0	0
3436	499	"arg_1"	"double"	53	0	1
3437	499	"arg_2"	"bigint"	64	0	2
3438	500	"result"	"bigint"	64	0	0
3439	500	"arg_1"	"month_interval"	32	0	1
3440	500	"arg_2"	"bigint"	64	0	2
3441	501	"result"	"bigint"	64	0	0
3442	501	"arg_1"	"sec_interval"	19	0	1
3443	501	"arg_2"	"bigint"	64	0	2
3444	502	"result"	"bigint"	64	0	0
3445	502	"arg_1"	"time"	7	0	1
3446	502	"arg_2"	"bigint"	64	0	2
3447	503	"result"	"bigint"	64	0	0
3448	503	"arg_1"	"timetz"	7	0	1
3449	503	"arg_2"	"bigint"	64	0	2
3450	504	"result"	"bigint"	64	0	0
3451	504	"arg_1"	"date"	0	0	1
3452	504	"arg_2"	"bigint"	64	0	2
3453	505	"result"	"bigint"	64	0	0
3454	505	"arg_1"	"timestamp"	7	0	1
3455	505	"arg_2"	"bigint"	64	0	2
3456	506	"result"	"bigint"	64	0	0
3457	506	"arg_1"	"timestamptz"	7	0	1
3458	506	"arg_2"	"bigint"	64	0	2
3459	507	"result"	"bigint"	64	0	0
3460	507	"arg_1"	"blob"	0	0	1
3461	507	"arg_2"	"bigint"	64	0	2
3462	508	"result"	"oid"	63	0	0
3463	508	"arg_1"	"tinyint"	8	0	1
3464	508	"arg_2"	"oid"	63	0	2
3465	509	"result"	"oid"	63	0	0
3466	509	"arg_1"	"smallint"	16	0	1
3467	509	"arg_2"	"oid"	63	0	2
3468	510	"result"	"oid"	63	0	0
3469	510	"arg_1"	"int"	32	0	1
3470	510	"arg_2"	"oid"	63	0	2
3471	511	"result"	"oid"	63	0	0
3472	511	"arg_1"	"bigint"	64	0	1
3473	511	"arg_2"	"oid"	63	0	2
3474	512	"result"	"oid"	63	0	0
3475	512	"arg_1"	"oid"	63	0	1
3476	512	"arg_2"	"oid"	63	0	2
3477	513	"result"	"oid"	63	0	0
3478	513	"arg_1"	"wrd"	64	0	1
3479	513	"arg_2"	"oid"	63	0	2
3480	514	"result"	"oid"	63	0	0
3481	514	"arg_1"	"decimal"	2	0	1
3482	514	"arg_2"	"oid"	63	0	2
3483	515	"result"	"oid"	63	0	0
3484	515	"arg_1"	"decimal"	4	0	1
3485	515	"arg_2"	"oid"	63	0	2
3486	516	"result"	"oid"	63	0	0
3487	516	"arg_1"	"decimal"	9	0	1
3488	516	"arg_2"	"oid"	63	0	2
3489	517	"result"	"oid"	63	0	0
3490	517	"arg_1"	"decimal"	19	0	1
3491	517	"arg_2"	"oid"	63	0	2
3492	518	"result"	"oid"	63	0	0
3493	518	"arg_1"	"real"	24	0	1
3494	518	"arg_2"	"oid"	63	0	2
3495	519	"result"	"oid"	63	0	0
3496	519	"arg_1"	"double"	53	0	1
3497	519	"arg_2"	"oid"	63	0	2
3498	520	"result"	"oid"	63	0	0
3499	520	"arg_1"	"month_interval"	32	0	1
3500	520	"arg_2"	"oid"	63	0	2
3501	521	"result"	"oid"	63	0	0
3502	521	"arg_1"	"sec_interval"	19	0	1
3503	521	"arg_2"	"oid"	63	0	2
3504	522	"result"	"oid"	63	0	0
3505	522	"arg_1"	"time"	7	0	1
3506	522	"arg_2"	"oid"	63	0	2
3507	523	"result"	"oid"	63	0	0
3508	523	"arg_1"	"timetz"	7	0	1
3509	523	"arg_2"	"oid"	63	0	2
3510	524	"result"	"oid"	63	0	0
3511	524	"arg_1"	"date"	0	0	1
3512	524	"arg_2"	"oid"	63	0	2
3513	525	"result"	"oid"	63	0	0
3514	525	"arg_1"	"timestamp"	7	0	1
3515	525	"arg_2"	"oid"	63	0	2
3516	526	"result"	"oid"	63	0	0
3517	526	"arg_1"	"timestamptz"	7	0	1
3518	526	"arg_2"	"oid"	63	0	2
3519	527	"result"	"oid"	63	0	0
3520	527	"arg_1"	"blob"	0	0	1
3521	527	"arg_2"	"oid"	63	0	2
3522	528	"result"	"wrd"	64	0	0
3523	528	"arg_1"	"tinyint"	8	0	1
3524	528	"arg_2"	"wrd"	64	0	2
3525	529	"result"	"wrd"	64	0	0
3526	529	"arg_1"	"smallint"	16	0	1
3527	529	"arg_2"	"wrd"	64	0	2
3528	530	"result"	"wrd"	64	0	0
3529	530	"arg_1"	"int"	32	0	1
3530	530	"arg_2"	"wrd"	64	0	2
3531	531	"result"	"wrd"	64	0	0
3532	531	"arg_1"	"bigint"	64	0	1
3533	531	"arg_2"	"wrd"	64	0	2
3534	532	"result"	"wrd"	64	0	0
3535	532	"arg_1"	"oid"	63	0	1
3536	532	"arg_2"	"wrd"	64	0	2
3537	533	"result"	"wrd"	64	0	0
3538	533	"arg_1"	"wrd"	64	0	1
3539	533	"arg_2"	"wrd"	64	0	2
3540	534	"result"	"wrd"	64	0	0
3541	534	"arg_1"	"decimal"	2	0	1
3542	534	"arg_2"	"wrd"	64	0	2
3543	535	"result"	"wrd"	64	0	0
3544	535	"arg_1"	"decimal"	4	0	1
3545	535	"arg_2"	"wrd"	64	0	2
3546	536	"result"	"wrd"	64	0	0
3547	536	"arg_1"	"decimal"	9	0	1
3548	536	"arg_2"	"wrd"	64	0	2
3549	537	"result"	"wrd"	64	0	0
3550	537	"arg_1"	"decimal"	19	0	1
3551	537	"arg_2"	"wrd"	64	0	2
3552	538	"result"	"wrd"	64	0	0
3553	538	"arg_1"	"real"	24	0	1
3554	538	"arg_2"	"wrd"	64	0	2
3555	539	"result"	"wrd"	64	0	0
3556	539	"arg_1"	"double"	53	0	1
3557	539	"arg_2"	"wrd"	64	0	2
3558	540	"result"	"wrd"	64	0	0
3559	540	"arg_1"	"month_interval"	32	0	1
3560	540	"arg_2"	"wrd"	64	0	2
3561	541	"result"	"wrd"	64	0	0
3562	541	"arg_1"	"sec_interval"	19	0	1
3563	541	"arg_2"	"wrd"	64	0	2
3564	542	"result"	"wrd"	64	0	0
3565	542	"arg_1"	"time"	7	0	1
3566	542	"arg_2"	"wrd"	64	0	2
3567	543	"result"	"wrd"	64	0	0
3568	543	"arg_1"	"timetz"	7	0	1
3569	543	"arg_2"	"wrd"	64	0	2
3570	544	"result"	"wrd"	64	0	0
3571	544	"arg_1"	"date"	0	0	1
3572	544	"arg_2"	"wrd"	64	0	2
3573	545	"result"	"wrd"	64	0	0
3574	545	"arg_1"	"timestamp"	7	0	1
3575	545	"arg_2"	"wrd"	64	0	2
3576	546	"result"	"wrd"	64	0	0
3577	546	"arg_1"	"timestamptz"	7	0	1
3578	546	"arg_2"	"wrd"	64	0	2
3579	547	"result"	"wrd"	64	0	0
3580	547	"arg_1"	"blob"	0	0	1
3581	547	"arg_2"	"wrd"	64	0	2
3582	548	"result"	"decimal"	2	0	0
3583	548	"arg_1"	"tinyint"	8	0	1
3584	548	"arg_2"	"decimal"	2	0	2
3585	549	"result"	"decimal"	2	0	0
3586	549	"arg_1"	"smallint"	16	0	1
3587	549	"arg_2"	"decimal"	2	0	2
3588	550	"result"	"decimal"	2	0	0
3589	550	"arg_1"	"int"	32	0	1
3590	550	"arg_2"	"decimal"	2	0	2
3591	551	"result"	"decimal"	2	0	0
3592	551	"arg_1"	"bigint"	64	0	1
3593	551	"arg_2"	"decimal"	2	0	2
3594	552	"result"	"decimal"	2	0	0
3595	552	"arg_1"	"oid"	63	0	1
3596	552	"arg_2"	"decimal"	2	0	2
3597	553	"result"	"decimal"	2	0	0
3598	553	"arg_1"	"wrd"	64	0	1
3599	553	"arg_2"	"decimal"	2	0	2
3600	554	"result"	"decimal"	2	0	0
3601	554	"arg_1"	"decimal"	2	0	1
3602	554	"arg_2"	"decimal"	2	0	2
3603	555	"result"	"decimal"	2	0	0
3604	555	"arg_1"	"decimal"	4	0	1
3605	555	"arg_2"	"decimal"	2	0	2
3606	556	"result"	"decimal"	2	0	0
3607	556	"arg_1"	"decimal"	9	0	1
3608	556	"arg_2"	"decimal"	2	0	2
3609	557	"result"	"decimal"	2	0	0
3610	557	"arg_1"	"decimal"	19	0	1
3611	557	"arg_2"	"decimal"	2	0	2
3612	558	"result"	"decimal"	2	0	0
3613	558	"arg_1"	"real"	24	0	1
3614	558	"arg_2"	"decimal"	2	0	2
3615	559	"result"	"decimal"	2	0	0
3616	559	"arg_1"	"double"	53	0	1
3617	559	"arg_2"	"decimal"	2	0	2
3618	560	"result"	"decimal"	2	0	0
3619	560	"arg_1"	"month_interval"	32	0	1
3620	560	"arg_2"	"decimal"	2	0	2
3621	561	"result"	"decimal"	2	0	0
3622	561	"arg_1"	"sec_interval"	19	0	1
3623	561	"arg_2"	"decimal"	2	0	2
3624	562	"result"	"decimal"	2	0	0
3625	562	"arg_1"	"time"	7	0	1
3626	562	"arg_2"	"decimal"	2	0	2
3627	563	"result"	"decimal"	2	0	0
3628	563	"arg_1"	"timetz"	7	0	1
3629	563	"arg_2"	"decimal"	2	0	2
3630	564	"result"	"decimal"	2	0	0
3631	564	"arg_1"	"date"	0	0	1
3632	564	"arg_2"	"decimal"	2	0	2
3633	565	"result"	"decimal"	2	0	0
3634	565	"arg_1"	"timestamp"	7	0	1
3635	565	"arg_2"	"decimal"	2	0	2
3636	566	"result"	"decimal"	2	0	0
3637	566	"arg_1"	"timestamptz"	7	0	1
3638	566	"arg_2"	"decimal"	2	0	2
3639	567	"result"	"decimal"	2	0	0
3640	567	"arg_1"	"blob"	0	0	1
3641	567	"arg_2"	"decimal"	2	0	2
3642	568	"result"	"decimal"	4	0	0
3643	568	"arg_1"	"tinyint"	8	0	1
3644	568	"arg_2"	"decimal"	4	0	2
3645	569	"result"	"decimal"	4	0	0
3646	569	"arg_1"	"smallint"	16	0	1
3647	569	"arg_2"	"decimal"	4	0	2
3648	570	"result"	"decimal"	4	0	0
3649	570	"arg_1"	"int"	32	0	1
3650	570	"arg_2"	"decimal"	4	0	2
3651	571	"result"	"decimal"	4	0	0
3652	571	"arg_1"	"bigint"	64	0	1
3653	571	"arg_2"	"decimal"	4	0	2
3654	572	"result"	"decimal"	4	0	0
3655	572	"arg_1"	"oid"	63	0	1
3656	572	"arg_2"	"decimal"	4	0	2
3657	573	"result"	"decimal"	4	0	0
3658	573	"arg_1"	"wrd"	64	0	1
3659	573	"arg_2"	"decimal"	4	0	2
3660	574	"result"	"decimal"	4	0	0
3661	574	"arg_1"	"decimal"	2	0	1
3662	574	"arg_2"	"decimal"	4	0	2
3663	575	"result"	"decimal"	4	0	0
3664	575	"arg_1"	"decimal"	4	0	1
3665	575	"arg_2"	"decimal"	4	0	2
3666	576	"result"	"decimal"	4	0	0
3667	576	"arg_1"	"decimal"	9	0	1
3668	576	"arg_2"	"decimal"	4	0	2
3669	577	"result"	"decimal"	4	0	0
3670	577	"arg_1"	"decimal"	19	0	1
3671	577	"arg_2"	"decimal"	4	0	2
3672	578	"result"	"decimal"	4	0	0
3673	578	"arg_1"	"real"	24	0	1
3674	578	"arg_2"	"decimal"	4	0	2
3675	579	"result"	"decimal"	4	0	0
3676	579	"arg_1"	"double"	53	0	1
3677	579	"arg_2"	"decimal"	4	0	2
3678	580	"result"	"decimal"	4	0	0
3679	580	"arg_1"	"month_interval"	32	0	1
3680	580	"arg_2"	"decimal"	4	0	2
3681	581	"result"	"decimal"	4	0	0
3682	581	"arg_1"	"sec_interval"	19	0	1
3683	581	"arg_2"	"decimal"	4	0	2
3684	582	"result"	"decimal"	4	0	0
3685	582	"arg_1"	"time"	7	0	1
3686	582	"arg_2"	"decimal"	4	0	2
3687	583	"result"	"decimal"	4	0	0
3688	583	"arg_1"	"timetz"	7	0	1
3689	583	"arg_2"	"decimal"	4	0	2
3690	584	"result"	"decimal"	4	0	0
3691	584	"arg_1"	"date"	0	0	1
3692	584	"arg_2"	"decimal"	4	0	2
3693	585	"result"	"decimal"	4	0	0
3694	585	"arg_1"	"timestamp"	7	0	1
3695	585	"arg_2"	"decimal"	4	0	2
3696	586	"result"	"decimal"	4	0	0
3697	586	"arg_1"	"timestamptz"	7	0	1
3698	586	"arg_2"	"decimal"	4	0	2
3699	587	"result"	"decimal"	4	0	0
3700	587	"arg_1"	"blob"	0	0	1
3701	587	"arg_2"	"decimal"	4	0	2
3702	588	"result"	"decimal"	9	0	0
3703	588	"arg_1"	"tinyint"	8	0	1
3704	588	"arg_2"	"decimal"	9	0	2
3705	589	"result"	"decimal"	9	0	0
3706	589	"arg_1"	"smallint"	16	0	1
3707	589	"arg_2"	"decimal"	9	0	2
3708	590	"result"	"decimal"	9	0	0
3709	590	"arg_1"	"int"	32	0	1
3710	590	"arg_2"	"decimal"	9	0	2
3711	591	"result"	"decimal"	9	0	0
3712	591	"arg_1"	"bigint"	64	0	1
3713	591	"arg_2"	"decimal"	9	0	2
3714	592	"result"	"decimal"	9	0	0
3715	592	"arg_1"	"oid"	63	0	1
3716	592	"arg_2"	"decimal"	9	0	2
3717	593	"result"	"decimal"	9	0	0
3718	593	"arg_1"	"wrd"	64	0	1
3719	593	"arg_2"	"decimal"	9	0	2
3720	594	"result"	"decimal"	9	0	0
3721	594	"arg_1"	"decimal"	2	0	1
3722	594	"arg_2"	"decimal"	9	0	2
3723	595	"result"	"decimal"	9	0	0
3724	595	"arg_1"	"decimal"	4	0	1
3725	595	"arg_2"	"decimal"	9	0	2
3726	596	"result"	"decimal"	9	0	0
3727	596	"arg_1"	"decimal"	9	0	1
3728	596	"arg_2"	"decimal"	9	0	2
3729	597	"result"	"decimal"	9	0	0
3730	597	"arg_1"	"decimal"	19	0	1
3731	597	"arg_2"	"decimal"	9	0	2
3732	598	"result"	"decimal"	9	0	0
3733	598	"arg_1"	"real"	24	0	1
3734	598	"arg_2"	"decimal"	9	0	2
3735	599	"result"	"decimal"	9	0	0
3736	599	"arg_1"	"double"	53	0	1
3737	599	"arg_2"	"decimal"	9	0	2
3738	600	"result"	"decimal"	9	0	0
3739	600	"arg_1"	"month_interval"	32	0	1
3740	600	"arg_2"	"decimal"	9	0	2
3741	601	"result"	"decimal"	9	0	0
3742	601	"arg_1"	"sec_interval"	19	0	1
3743	601	"arg_2"	"decimal"	9	0	2
3744	602	"result"	"decimal"	9	0	0
3745	602	"arg_1"	"time"	7	0	1
3746	602	"arg_2"	"decimal"	9	0	2
3747	603	"result"	"decimal"	9	0	0
3748	603	"arg_1"	"timetz"	7	0	1
3749	603	"arg_2"	"decimal"	9	0	2
3750	604	"result"	"decimal"	9	0	0
3751	604	"arg_1"	"date"	0	0	1
3752	604	"arg_2"	"decimal"	9	0	2
3753	605	"result"	"decimal"	9	0	0
3754	605	"arg_1"	"timestamp"	7	0	1
3755	605	"arg_2"	"decimal"	9	0	2
3756	606	"result"	"decimal"	9	0	0
3757	606	"arg_1"	"timestamptz"	7	0	1
3758	606	"arg_2"	"decimal"	9	0	2
3759	607	"result"	"decimal"	9	0	0
3760	607	"arg_1"	"blob"	0	0	1
3761	607	"arg_2"	"decimal"	9	0	2
3762	608	"result"	"decimal"	19	0	0
3763	608	"arg_1"	"tinyint"	8	0	1
3764	608	"arg_2"	"decimal"	19	0	2
3765	609	"result"	"decimal"	19	0	0
3766	609	"arg_1"	"smallint"	16	0	1
3767	609	"arg_2"	"decimal"	19	0	2
3768	610	"result"	"decimal"	19	0	0
3769	610	"arg_1"	"int"	32	0	1
3770	610	"arg_2"	"decimal"	19	0	2
3771	611	"result"	"decimal"	19	0	0
3772	611	"arg_1"	"bigint"	64	0	1
3773	611	"arg_2"	"decimal"	19	0	2
3774	612	"result"	"decimal"	19	0	0
3775	612	"arg_1"	"oid"	63	0	1
3776	612	"arg_2"	"decimal"	19	0	2
3777	613	"result"	"decimal"	19	0	0
3778	613	"arg_1"	"wrd"	64	0	1
3779	613	"arg_2"	"decimal"	19	0	2
3780	614	"result"	"decimal"	19	0	0
3781	614	"arg_1"	"decimal"	2	0	1
3782	614	"arg_2"	"decimal"	19	0	2
3783	615	"result"	"decimal"	19	0	0
3784	615	"arg_1"	"decimal"	4	0	1
3785	615	"arg_2"	"decimal"	19	0	2
3786	616	"result"	"decimal"	19	0	0
3787	616	"arg_1"	"decimal"	9	0	1
3788	616	"arg_2"	"decimal"	19	0	2
3789	617	"result"	"decimal"	19	0	0
3790	617	"arg_1"	"decimal"	19	0	1
3791	617	"arg_2"	"decimal"	19	0	2
3792	618	"result"	"decimal"	19	0	0
3793	618	"arg_1"	"real"	24	0	1
3794	618	"arg_2"	"decimal"	19	0	2
3795	619	"result"	"decimal"	19	0	0
3796	619	"arg_1"	"double"	53	0	1
3797	619	"arg_2"	"decimal"	19	0	2
3798	620	"result"	"decimal"	19	0	0
3799	620	"arg_1"	"month_interval"	32	0	1
3800	620	"arg_2"	"decimal"	19	0	2
3801	621	"result"	"decimal"	19	0	0
3802	621	"arg_1"	"sec_interval"	19	0	1
3803	621	"arg_2"	"decimal"	19	0	2
3804	622	"result"	"decimal"	19	0	0
3805	622	"arg_1"	"time"	7	0	1
3806	622	"arg_2"	"decimal"	19	0	2
3807	623	"result"	"decimal"	19	0	0
3808	623	"arg_1"	"timetz"	7	0	1
3809	623	"arg_2"	"decimal"	19	0	2
3810	624	"result"	"decimal"	19	0	0
3811	624	"arg_1"	"date"	0	0	1
3812	624	"arg_2"	"decimal"	19	0	2
3813	625	"result"	"decimal"	19	0	0
3814	625	"arg_1"	"timestamp"	7	0	1
3815	625	"arg_2"	"decimal"	19	0	2
3816	626	"result"	"decimal"	19	0	0
3817	626	"arg_1"	"timestamptz"	7	0	1
3818	626	"arg_2"	"decimal"	19	0	2
3819	627	"result"	"decimal"	19	0	0
3820	627	"arg_1"	"blob"	0	0	1
3821	627	"arg_2"	"decimal"	19	0	2
3822	628	"result"	"real"	24	0	0
3823	628	"arg_1"	"tinyint"	8	0	1
3824	628	"arg_2"	"real"	24	0	2
3825	629	"result"	"real"	24	0	0
3826	629	"arg_1"	"smallint"	16	0	1
3827	629	"arg_2"	"real"	24	0	2
3828	630	"result"	"real"	24	0	0
3829	630	"arg_1"	"int"	32	0	1
3830	630	"arg_2"	"real"	24	0	2
3831	631	"result"	"real"	24	0	0
3832	631	"arg_1"	"bigint"	64	0	1
3833	631	"arg_2"	"real"	24	0	2
3834	632	"result"	"real"	24	0	0
3835	632	"arg_1"	"oid"	63	0	1
3836	632	"arg_2"	"real"	24	0	2
3837	633	"result"	"real"	24	0	0
3838	633	"arg_1"	"wrd"	64	0	1
3839	633	"arg_2"	"real"	24	0	2
3840	634	"result"	"real"	24	0	0
3841	634	"arg_1"	"decimal"	2	0	1
3842	634	"arg_2"	"real"	24	0	2
3843	635	"result"	"real"	24	0	0
3844	635	"arg_1"	"decimal"	4	0	1
3845	635	"arg_2"	"real"	24	0	2
3846	636	"result"	"real"	24	0	0
3847	636	"arg_1"	"decimal"	9	0	1
3848	636	"arg_2"	"real"	24	0	2
3849	637	"result"	"real"	24	0	0
3850	637	"arg_1"	"decimal"	19	0	1
3851	637	"arg_2"	"real"	24	0	2
3852	638	"result"	"real"	24	0	0
3853	638	"arg_1"	"real"	24	0	1
3854	638	"arg_2"	"real"	24	0	2
3855	639	"result"	"real"	24	0	0
3856	639	"arg_1"	"double"	53	0	1
3857	639	"arg_2"	"real"	24	0	2
3858	640	"result"	"real"	24	0	0
3859	640	"arg_1"	"month_interval"	32	0	1
3860	640	"arg_2"	"real"	24	0	2
3861	641	"result"	"real"	24	0	0
3862	641	"arg_1"	"sec_interval"	19	0	1
3863	641	"arg_2"	"real"	24	0	2
3864	642	"result"	"real"	24	0	0
3865	642	"arg_1"	"time"	7	0	1
3866	642	"arg_2"	"real"	24	0	2
3867	643	"result"	"real"	24	0	0
3868	643	"arg_1"	"timetz"	7	0	1
3869	643	"arg_2"	"real"	24	0	2
3870	644	"result"	"real"	24	0	0
3871	644	"arg_1"	"date"	0	0	1
3872	644	"arg_2"	"real"	24	0	2
3873	645	"result"	"real"	24	0	0
3874	645	"arg_1"	"timestamp"	7	0	1
3875	645	"arg_2"	"real"	24	0	2
3876	646	"result"	"real"	24	0	0
3877	646	"arg_1"	"timestamptz"	7	0	1
3878	646	"arg_2"	"real"	24	0	2
3879	647	"result"	"real"	24	0	0
3880	647	"arg_1"	"blob"	0	0	1
3881	647	"arg_2"	"real"	24	0	2
3882	648	"result"	"double"	53	0	0
3883	648	"arg_1"	"tinyint"	8	0	1
3884	648	"arg_2"	"double"	53	0	2
3885	649	"result"	"double"	53	0	0
3886	649	"arg_1"	"smallint"	16	0	1
3887	649	"arg_2"	"double"	53	0	2
3888	650	"result"	"double"	53	0	0
3889	650	"arg_1"	"int"	32	0	1
3890	650	"arg_2"	"double"	53	0	2
3891	651	"result"	"double"	53	0	0
3892	651	"arg_1"	"bigint"	64	0	1
3893	651	"arg_2"	"double"	53	0	2
3894	652	"result"	"double"	53	0	0
3895	652	"arg_1"	"oid"	63	0	1
3896	652	"arg_2"	"double"	53	0	2
3897	653	"result"	"double"	53	0	0
3898	653	"arg_1"	"wrd"	64	0	1
3899	653	"arg_2"	"double"	53	0	2
3900	654	"result"	"double"	53	0	0
3901	654	"arg_1"	"decimal"	2	0	1
3902	654	"arg_2"	"double"	53	0	2
3903	655	"result"	"double"	53	0	0
3904	655	"arg_1"	"decimal"	4	0	1
3905	655	"arg_2"	"double"	53	0	2
3906	656	"result"	"double"	53	0	0
3907	656	"arg_1"	"decimal"	9	0	1
3908	656	"arg_2"	"double"	53	0	2
3909	657	"result"	"double"	53	0	0
3910	657	"arg_1"	"decimal"	19	0	1
3911	657	"arg_2"	"double"	53	0	2
3912	658	"result"	"double"	53	0	0
3913	658	"arg_1"	"real"	24	0	1
3914	658	"arg_2"	"double"	53	0	2
3915	659	"result"	"double"	53	0	0
3916	659	"arg_1"	"double"	53	0	1
3917	659	"arg_2"	"double"	53	0	2
3918	660	"result"	"double"	53	0	0
3919	660	"arg_1"	"month_interval"	32	0	1
3920	660	"arg_2"	"double"	53	0	2
3921	661	"result"	"double"	53	0	0
3922	661	"arg_1"	"sec_interval"	19	0	1
3923	661	"arg_2"	"double"	53	0	2
3924	662	"result"	"double"	53	0	0
3925	662	"arg_1"	"time"	7	0	1
3926	662	"arg_2"	"double"	53	0	2
3927	663	"result"	"double"	53	0	0
3928	663	"arg_1"	"timetz"	7	0	1
3929	663	"arg_2"	"double"	53	0	2
3930	664	"result"	"double"	53	0	0
3931	664	"arg_1"	"date"	0	0	1
3932	664	"arg_2"	"double"	53	0	2
3933	665	"result"	"double"	53	0	0
3934	665	"arg_1"	"timestamp"	7	0	1
3935	665	"arg_2"	"double"	53	0	2
3936	666	"result"	"double"	53	0	0
3937	666	"arg_1"	"timestamptz"	7	0	1
3938	666	"arg_2"	"double"	53	0	2
3939	667	"result"	"double"	53	0	0
3940	667	"arg_1"	"blob"	0	0	1
3941	667	"arg_2"	"double"	53	0	2
3942	668	"result"	"month_interval"	32	0	0
3943	668	"arg_1"	"tinyint"	8	0	1
3944	668	"arg_2"	"month_interval"	32	0	2
3945	669	"result"	"month_interval"	32	0	0
3946	669	"arg_1"	"smallint"	16	0	1
3947	669	"arg_2"	"month_interval"	32	0	2
3948	670	"result"	"month_interval"	32	0	0
3949	670	"arg_1"	"int"	32	0	1
3950	670	"arg_2"	"month_interval"	32	0	2
3951	671	"result"	"month_interval"	32	0	0
3952	671	"arg_1"	"bigint"	64	0	1
3953	671	"arg_2"	"month_interval"	32	0	2
3954	672	"result"	"month_interval"	32	0	0
3955	672	"arg_1"	"oid"	63	0	1
3956	672	"arg_2"	"month_interval"	32	0	2
3957	673	"result"	"month_interval"	32	0	0
3958	673	"arg_1"	"wrd"	64	0	1
3959	673	"arg_2"	"month_interval"	32	0	2
3960	674	"result"	"month_interval"	32	0	0
3961	674	"arg_1"	"decimal"	2	0	1
3962	674	"arg_2"	"month_interval"	32	0	2
3963	675	"result"	"month_interval"	32	0	0
3964	675	"arg_1"	"decimal"	4	0	1
3965	675	"arg_2"	"month_interval"	32	0	2
3966	676	"result"	"month_interval"	32	0	0
3967	676	"arg_1"	"decimal"	9	0	1
3968	676	"arg_2"	"month_interval"	32	0	2
3969	677	"result"	"month_interval"	32	0	0
3970	677	"arg_1"	"decimal"	19	0	1
3971	677	"arg_2"	"month_interval"	32	0	2
3972	678	"result"	"month_interval"	32	0	0
3973	678	"arg_1"	"real"	24	0	1
3974	678	"arg_2"	"month_interval"	32	0	2
3975	679	"result"	"month_interval"	32	0	0
3976	679	"arg_1"	"double"	53	0	1
3977	679	"arg_2"	"month_interval"	32	0	2
3978	680	"result"	"month_interval"	32	0	0
3979	680	"arg_1"	"month_interval"	32	0	1
3980	680	"arg_2"	"month_interval"	32	0	2
3981	681	"result"	"month_interval"	32	0	0
3982	681	"arg_1"	"sec_interval"	19	0	1
3983	681	"arg_2"	"month_interval"	32	0	2
3984	682	"result"	"month_interval"	32	0	0
3985	682	"arg_1"	"time"	7	0	1
3986	682	"arg_2"	"month_interval"	32	0	2
3987	683	"result"	"month_interval"	32	0	0
3988	683	"arg_1"	"timetz"	7	0	1
3989	683	"arg_2"	"month_interval"	32	0	2
3990	684	"result"	"month_interval"	32	0	0
3991	684	"arg_1"	"date"	0	0	1
3992	684	"arg_2"	"month_interval"	32	0	2
3993	685	"result"	"month_interval"	32	0	0
3994	685	"arg_1"	"timestamp"	7	0	1
3995	685	"arg_2"	"month_interval"	32	0	2
3996	686	"result"	"month_interval"	32	0	0
3997	686	"arg_1"	"timestamptz"	7	0	1
3998	686	"arg_2"	"month_interval"	32	0	2
3999	687	"result"	"month_interval"	32	0	0
4000	687	"arg_1"	"blob"	0	0	1
4001	687	"arg_2"	"month_interval"	32	0	2
4002	688	"result"	"sec_interval"	19	0	0
4003	688	"arg_1"	"tinyint"	8	0	1
4004	688	"arg_2"	"sec_interval"	19	0	2
4005	689	"result"	"sec_interval"	19	0	0
4006	689	"arg_1"	"smallint"	16	0	1
4007	689	"arg_2"	"sec_interval"	19	0	2
4008	690	"result"	"sec_interval"	19	0	0
4009	690	"arg_1"	"int"	32	0	1
4010	690	"arg_2"	"sec_interval"	19	0	2
4011	691	"result"	"sec_interval"	19	0	0
4012	691	"arg_1"	"bigint"	64	0	1
4013	691	"arg_2"	"sec_interval"	19	0	2
4014	692	"result"	"sec_interval"	19	0	0
4015	692	"arg_1"	"oid"	63	0	1
4016	692	"arg_2"	"sec_interval"	19	0	2
4017	693	"result"	"sec_interval"	19	0	0
4018	693	"arg_1"	"wrd"	64	0	1
4019	693	"arg_2"	"sec_interval"	19	0	2
4020	694	"result"	"sec_interval"	19	0	0
4021	694	"arg_1"	"decimal"	2	0	1
4022	694	"arg_2"	"sec_interval"	19	0	2
4023	695	"result"	"sec_interval"	19	0	0
4024	695	"arg_1"	"decimal"	4	0	1
4025	695	"arg_2"	"sec_interval"	19	0	2
4026	696	"result"	"sec_interval"	19	0	0
4027	696	"arg_1"	"decimal"	9	0	1
4028	696	"arg_2"	"sec_interval"	19	0	2
4029	697	"result"	"sec_interval"	19	0	0
4030	697	"arg_1"	"decimal"	19	0	1
4031	697	"arg_2"	"sec_interval"	19	0	2
4032	698	"result"	"sec_interval"	19	0	0
4033	698	"arg_1"	"real"	24	0	1
4034	698	"arg_2"	"sec_interval"	19	0	2
4035	699	"result"	"sec_interval"	19	0	0
4036	699	"arg_1"	"double"	53	0	1
4037	699	"arg_2"	"sec_interval"	19	0	2
4038	700	"result"	"sec_interval"	19	0	0
4039	700	"arg_1"	"month_interval"	32	0	1
4040	700	"arg_2"	"sec_interval"	19	0	2
4041	701	"result"	"sec_interval"	19	0	0
4042	701	"arg_1"	"sec_interval"	19	0	1
4043	701	"arg_2"	"sec_interval"	19	0	2
4044	702	"result"	"sec_interval"	19	0	0
4045	702	"arg_1"	"time"	7	0	1
4046	702	"arg_2"	"sec_interval"	19	0	2
4047	703	"result"	"sec_interval"	19	0	0
4048	703	"arg_1"	"timetz"	7	0	1
4049	703	"arg_2"	"sec_interval"	19	0	2
4050	704	"result"	"sec_interval"	19	0	0
4051	704	"arg_1"	"date"	0	0	1
4052	704	"arg_2"	"sec_interval"	19	0	2
4053	705	"result"	"sec_interval"	19	0	0
4054	705	"arg_1"	"timestamp"	7	0	1
4055	705	"arg_2"	"sec_interval"	19	0	2
4056	706	"result"	"sec_interval"	19	0	0
4057	706	"arg_1"	"timestamptz"	7	0	1
4058	706	"arg_2"	"sec_interval"	19	0	2
4059	707	"result"	"sec_interval"	19	0	0
4060	707	"arg_1"	"blob"	0	0	1
4061	707	"arg_2"	"sec_interval"	19	0	2
4062	708	"result"	"time"	7	0	0
4063	708	"arg_1"	"tinyint"	8	0	1
4064	708	"arg_2"	"time"	7	0	2
4065	709	"result"	"time"	7	0	0
4066	709	"arg_1"	"smallint"	16	0	1
4067	709	"arg_2"	"time"	7	0	2
4068	710	"result"	"time"	7	0	0
4069	710	"arg_1"	"int"	32	0	1
4070	710	"arg_2"	"time"	7	0	2
4071	711	"result"	"time"	7	0	0
4072	711	"arg_1"	"bigint"	64	0	1
4073	711	"arg_2"	"time"	7	0	2
4074	712	"result"	"time"	7	0	0
4075	712	"arg_1"	"oid"	63	0	1
4076	712	"arg_2"	"time"	7	0	2
4077	713	"result"	"time"	7	0	0
4078	713	"arg_1"	"wrd"	64	0	1
4079	713	"arg_2"	"time"	7	0	2
4080	714	"result"	"time"	7	0	0
4081	714	"arg_1"	"decimal"	2	0	1
4082	714	"arg_2"	"time"	7	0	2
4083	715	"result"	"time"	7	0	0
4084	715	"arg_1"	"decimal"	4	0	1
4085	715	"arg_2"	"time"	7	0	2
4086	716	"result"	"time"	7	0	0
4087	716	"arg_1"	"decimal"	9	0	1
4088	716	"arg_2"	"time"	7	0	2
4089	717	"result"	"time"	7	0	0
4090	717	"arg_1"	"decimal"	19	0	1
4091	717	"arg_2"	"time"	7	0	2
4092	718	"result"	"time"	7	0	0
4093	718	"arg_1"	"real"	24	0	1
4094	718	"arg_2"	"time"	7	0	2
4095	719	"result"	"time"	7	0	0
4096	719	"arg_1"	"double"	53	0	1
4097	719	"arg_2"	"time"	7	0	2
4098	720	"result"	"time"	7	0	0
4099	720	"arg_1"	"month_interval"	32	0	1
4100	720	"arg_2"	"time"	7	0	2
4101	721	"result"	"time"	7	0	0
4102	721	"arg_1"	"sec_interval"	19	0	1
4103	721	"arg_2"	"time"	7	0	2
4104	722	"result"	"time"	7	0	0
4105	722	"arg_1"	"time"	7	0	1
4106	722	"arg_2"	"time"	7	0	2
4107	723	"result"	"time"	7	0	0
4108	723	"arg_1"	"timetz"	7	0	1
4109	723	"arg_2"	"time"	7	0	2
4110	724	"result"	"time"	7	0	0
4111	724	"arg_1"	"date"	0	0	1
4112	724	"arg_2"	"time"	7	0	2
4113	725	"result"	"time"	7	0	0
4114	725	"arg_1"	"timestamp"	7	0	1
4115	725	"arg_2"	"time"	7	0	2
4116	726	"result"	"time"	7	0	0
4117	726	"arg_1"	"timestamptz"	7	0	1
4118	726	"arg_2"	"time"	7	0	2
4119	727	"result"	"time"	7	0	0
4120	727	"arg_1"	"blob"	0	0	1
4121	727	"arg_2"	"time"	7	0	2
4122	728	"result"	"timetz"	7	0	0
4123	728	"arg_1"	"tinyint"	8	0	1
4124	728	"arg_2"	"timetz"	7	0	2
4125	729	"result"	"timetz"	7	0	0
4126	729	"arg_1"	"smallint"	16	0	1
4127	729	"arg_2"	"timetz"	7	0	2
4128	730	"result"	"timetz"	7	0	0
4129	730	"arg_1"	"int"	32	0	1
4130	730	"arg_2"	"timetz"	7	0	2
4131	731	"result"	"timetz"	7	0	0
4132	731	"arg_1"	"bigint"	64	0	1
4133	731	"arg_2"	"timetz"	7	0	2
4134	732	"result"	"timetz"	7	0	0
4135	732	"arg_1"	"oid"	63	0	1
4136	732	"arg_2"	"timetz"	7	0	2
4137	733	"result"	"timetz"	7	0	0
4138	733	"arg_1"	"wrd"	64	0	1
4139	733	"arg_2"	"timetz"	7	0	2
4140	734	"result"	"timetz"	7	0	0
4141	734	"arg_1"	"decimal"	2	0	1
4142	734	"arg_2"	"timetz"	7	0	2
4143	735	"result"	"timetz"	7	0	0
4144	735	"arg_1"	"decimal"	4	0	1
4145	735	"arg_2"	"timetz"	7	0	2
4146	736	"result"	"timetz"	7	0	0
4147	736	"arg_1"	"decimal"	9	0	1
4148	736	"arg_2"	"timetz"	7	0	2
4149	737	"result"	"timetz"	7	0	0
4150	737	"arg_1"	"decimal"	19	0	1
4151	737	"arg_2"	"timetz"	7	0	2
4152	738	"result"	"timetz"	7	0	0
4153	738	"arg_1"	"real"	24	0	1
4154	738	"arg_2"	"timetz"	7	0	2
4155	739	"result"	"timetz"	7	0	0
4156	739	"arg_1"	"double"	53	0	1
4157	739	"arg_2"	"timetz"	7	0	2
4158	740	"result"	"timetz"	7	0	0
4159	740	"arg_1"	"month_interval"	32	0	1
4160	740	"arg_2"	"timetz"	7	0	2
4161	741	"result"	"timetz"	7	0	0
4162	741	"arg_1"	"sec_interval"	19	0	1
4163	741	"arg_2"	"timetz"	7	0	2
4164	742	"result"	"timetz"	7	0	0
4165	742	"arg_1"	"time"	7	0	1
4166	742	"arg_2"	"timetz"	7	0	2
4167	743	"result"	"timetz"	7	0	0
4168	743	"arg_1"	"timetz"	7	0	1
4169	743	"arg_2"	"timetz"	7	0	2
4170	744	"result"	"timetz"	7	0	0
4171	744	"arg_1"	"date"	0	0	1
4172	744	"arg_2"	"timetz"	7	0	2
4173	745	"result"	"timetz"	7	0	0
4174	745	"arg_1"	"timestamp"	7	0	1
4175	745	"arg_2"	"timetz"	7	0	2
4176	746	"result"	"timetz"	7	0	0
4177	746	"arg_1"	"timestamptz"	7	0	1
4178	746	"arg_2"	"timetz"	7	0	2
4179	747	"result"	"timetz"	7	0	0
4180	747	"arg_1"	"blob"	0	0	1
4181	747	"arg_2"	"timetz"	7	0	2
4182	748	"result"	"date"	0	0	0
4183	748	"arg_1"	"tinyint"	8	0	1
4184	748	"arg_2"	"date"	0	0	2
4185	749	"result"	"date"	0	0	0
4186	749	"arg_1"	"smallint"	16	0	1
4187	749	"arg_2"	"date"	0	0	2
4188	750	"result"	"date"	0	0	0
4189	750	"arg_1"	"int"	32	0	1
4190	750	"arg_2"	"date"	0	0	2
4191	751	"result"	"date"	0	0	0
4192	751	"arg_1"	"bigint"	64	0	1
4193	751	"arg_2"	"date"	0	0	2
4194	752	"result"	"date"	0	0	0
4195	752	"arg_1"	"oid"	63	0	1
4196	752	"arg_2"	"date"	0	0	2
4197	753	"result"	"date"	0	0	0
4198	753	"arg_1"	"wrd"	64	0	1
4199	753	"arg_2"	"date"	0	0	2
4200	754	"result"	"date"	0	0	0
4201	754	"arg_1"	"decimal"	2	0	1
4202	754	"arg_2"	"date"	0	0	2
4203	755	"result"	"date"	0	0	0
4204	755	"arg_1"	"decimal"	4	0	1
4205	755	"arg_2"	"date"	0	0	2
4206	756	"result"	"date"	0	0	0
4207	756	"arg_1"	"decimal"	9	0	1
4208	756	"arg_2"	"date"	0	0	2
4209	757	"result"	"date"	0	0	0
4210	757	"arg_1"	"decimal"	19	0	1
4211	757	"arg_2"	"date"	0	0	2
4212	758	"result"	"date"	0	0	0
4213	758	"arg_1"	"real"	24	0	1
4214	758	"arg_2"	"date"	0	0	2
4215	759	"result"	"date"	0	0	0
4216	759	"arg_1"	"double"	53	0	1
4217	759	"arg_2"	"date"	0	0	2
4218	760	"result"	"date"	0	0	0
4219	760	"arg_1"	"month_interval"	32	0	1
4220	760	"arg_2"	"date"	0	0	2
4221	761	"result"	"date"	0	0	0
4222	761	"arg_1"	"sec_interval"	19	0	1
4223	761	"arg_2"	"date"	0	0	2
4224	762	"result"	"date"	0	0	0
4225	762	"arg_1"	"time"	7	0	1
4226	762	"arg_2"	"date"	0	0	2
4227	763	"result"	"date"	0	0	0
4228	763	"arg_1"	"timetz"	7	0	1
4229	763	"arg_2"	"date"	0	0	2
4230	764	"result"	"date"	0	0	0
4231	764	"arg_1"	"date"	0	0	1
4232	764	"arg_2"	"date"	0	0	2
4233	765	"result"	"date"	0	0	0
4234	765	"arg_1"	"timestamp"	7	0	1
4235	765	"arg_2"	"date"	0	0	2
4236	766	"result"	"date"	0	0	0
4237	766	"arg_1"	"timestamptz"	7	0	1
4238	766	"arg_2"	"date"	0	0	2
4239	767	"result"	"date"	0	0	0
4240	767	"arg_1"	"blob"	0	0	1
4241	767	"arg_2"	"date"	0	0	2
4242	768	"result"	"timestamp"	7	0	0
4243	768	"arg_1"	"tinyint"	8	0	1
4244	768	"arg_2"	"timestamp"	7	0	2
4245	769	"result"	"timestamp"	7	0	0
4246	769	"arg_1"	"smallint"	16	0	1
4247	769	"arg_2"	"timestamp"	7	0	2
4248	770	"result"	"timestamp"	7	0	0
4249	770	"arg_1"	"int"	32	0	1
4250	770	"arg_2"	"timestamp"	7	0	2
4251	771	"result"	"timestamp"	7	0	0
4252	771	"arg_1"	"bigint"	64	0	1
4253	771	"arg_2"	"timestamp"	7	0	2
4254	772	"result"	"timestamp"	7	0	0
4255	772	"arg_1"	"oid"	63	0	1
4256	772	"arg_2"	"timestamp"	7	0	2
4257	773	"result"	"timestamp"	7	0	0
4258	773	"arg_1"	"wrd"	64	0	1
4259	773	"arg_2"	"timestamp"	7	0	2
4260	774	"result"	"timestamp"	7	0	0
4261	774	"arg_1"	"decimal"	2	0	1
4262	774	"arg_2"	"timestamp"	7	0	2
4263	775	"result"	"timestamp"	7	0	0
4264	775	"arg_1"	"decimal"	4	0	1
4265	775	"arg_2"	"timestamp"	7	0	2
4266	776	"result"	"timestamp"	7	0	0
4267	776	"arg_1"	"decimal"	9	0	1
4268	776	"arg_2"	"timestamp"	7	0	2
4269	777	"result"	"timestamp"	7	0	0
4270	777	"arg_1"	"decimal"	19	0	1
4271	777	"arg_2"	"timestamp"	7	0	2
4272	778	"result"	"timestamp"	7	0	0
4273	778	"arg_1"	"real"	24	0	1
4274	778	"arg_2"	"timestamp"	7	0	2
4275	779	"result"	"timestamp"	7	0	0
4276	779	"arg_1"	"double"	53	0	1
4277	779	"arg_2"	"timestamp"	7	0	2
4278	780	"result"	"timestamp"	7	0	0
4279	780	"arg_1"	"month_interval"	32	0	1
4280	780	"arg_2"	"timestamp"	7	0	2
4281	781	"result"	"timestamp"	7	0	0
4282	781	"arg_1"	"sec_interval"	19	0	1
4283	781	"arg_2"	"timestamp"	7	0	2
4284	782	"result"	"timestamp"	7	0	0
4285	782	"arg_1"	"time"	7	0	1
4286	782	"arg_2"	"timestamp"	7	0	2
4287	783	"result"	"timestamp"	7	0	0
4288	783	"arg_1"	"timetz"	7	0	1
4289	783	"arg_2"	"timestamp"	7	0	2
4290	784	"result"	"timestamp"	7	0	0
4291	784	"arg_1"	"date"	0	0	1
4292	784	"arg_2"	"timestamp"	7	0	2
4293	785	"result"	"timestamp"	7	0	0
4294	785	"arg_1"	"timestamp"	7	0	1
4295	785	"arg_2"	"timestamp"	7	0	2
4296	786	"result"	"timestamp"	7	0	0
4297	786	"arg_1"	"timestamptz"	7	0	1
4298	786	"arg_2"	"timestamp"	7	0	2
4299	787	"result"	"timestamp"	7	0	0
4300	787	"arg_1"	"blob"	0	0	1
4301	787	"arg_2"	"timestamp"	7	0	2
4302	788	"result"	"timestamptz"	7	0	0
4303	788	"arg_1"	"tinyint"	8	0	1
4304	788	"arg_2"	"timestamptz"	7	0	2
4305	789	"result"	"timestamptz"	7	0	0
4306	789	"arg_1"	"smallint"	16	0	1
4307	789	"arg_2"	"timestamptz"	7	0	2
4308	790	"result"	"timestamptz"	7	0	0
4309	790	"arg_1"	"int"	32	0	1
4310	790	"arg_2"	"timestamptz"	7	0	2
4311	791	"result"	"timestamptz"	7	0	0
4312	791	"arg_1"	"bigint"	64	0	1
4313	791	"arg_2"	"timestamptz"	7	0	2
4314	792	"result"	"timestamptz"	7	0	0
4315	792	"arg_1"	"oid"	63	0	1
4316	792	"arg_2"	"timestamptz"	7	0	2
4317	793	"result"	"timestamptz"	7	0	0
4318	793	"arg_1"	"wrd"	64	0	1
4319	793	"arg_2"	"timestamptz"	7	0	2
4320	794	"result"	"timestamptz"	7	0	0
4321	794	"arg_1"	"decimal"	2	0	1
4322	794	"arg_2"	"timestamptz"	7	0	2
4323	795	"result"	"timestamptz"	7	0	0
4324	795	"arg_1"	"decimal"	4	0	1
4325	795	"arg_2"	"timestamptz"	7	0	2
4326	796	"result"	"timestamptz"	7	0	0
4327	796	"arg_1"	"decimal"	9	0	1
4328	796	"arg_2"	"timestamptz"	7	0	2
4329	797	"result"	"timestamptz"	7	0	0
4330	797	"arg_1"	"decimal"	19	0	1
4331	797	"arg_2"	"timestamptz"	7	0	2
4332	798	"result"	"timestamptz"	7	0	0
4333	798	"arg_1"	"real"	24	0	1
4334	798	"arg_2"	"timestamptz"	7	0	2
4335	799	"result"	"timestamptz"	7	0	0
4336	799	"arg_1"	"double"	53	0	1
4337	799	"arg_2"	"timestamptz"	7	0	2
4338	800	"result"	"timestamptz"	7	0	0
4339	800	"arg_1"	"month_interval"	32	0	1
4340	800	"arg_2"	"timestamptz"	7	0	2
4341	801	"result"	"timestamptz"	7	0	0
4342	801	"arg_1"	"sec_interval"	19	0	1
4343	801	"arg_2"	"timestamptz"	7	0	2
4344	802	"result"	"timestamptz"	7	0	0
4345	802	"arg_1"	"time"	7	0	1
4346	802	"arg_2"	"timestamptz"	7	0	2
4347	803	"result"	"timestamptz"	7	0	0
4348	803	"arg_1"	"timetz"	7	0	1
4349	803	"arg_2"	"timestamptz"	7	0	2
4350	804	"result"	"timestamptz"	7	0	0
4351	804	"arg_1"	"date"	0	0	1
4352	804	"arg_2"	"timestamptz"	7	0	2
4353	805	"result"	"timestamptz"	7	0	0
4354	805	"arg_1"	"timestamp"	7	0	1
4355	805	"arg_2"	"timestamptz"	7	0	2
4356	806	"result"	"timestamptz"	7	0	0
4357	806	"arg_1"	"timestamptz"	7	0	1
4358	806	"arg_2"	"timestamptz"	7	0	2
4359	807	"result"	"timestamptz"	7	0	0
4360	807	"arg_1"	"blob"	0	0	1
4361	807	"arg_2"	"timestamptz"	7	0	2
4362	808	"result"	"blob"	0	0	0
4363	808	"arg_1"	"tinyint"	8	0	1
4364	808	"arg_2"	"blob"	0	0	2
4365	809	"result"	"blob"	0	0	0
4366	809	"arg_1"	"smallint"	16	0	1
4367	809	"arg_2"	"blob"	0	0	2
4368	810	"result"	"blob"	0	0	0
4369	810	"arg_1"	"int"	32	0	1
4370	810	"arg_2"	"blob"	0	0	2
4371	811	"result"	"blob"	0	0	0
4372	811	"arg_1"	"bigint"	64	0	1
4373	811	"arg_2"	"blob"	0	0	2
4374	812	"result"	"blob"	0	0	0
4375	812	"arg_1"	"oid"	63	0	1
4376	812	"arg_2"	"blob"	0	0	2
4377	813	"result"	"blob"	0	0	0
4378	813	"arg_1"	"wrd"	64	0	1
4379	813	"arg_2"	"blob"	0	0	2
4380	814	"result"	"blob"	0	0	0
4381	814	"arg_1"	"decimal"	2	0	1
4382	814	"arg_2"	"blob"	0	0	2
4383	815	"result"	"blob"	0	0	0
4384	815	"arg_1"	"decimal"	4	0	1
4385	815	"arg_2"	"blob"	0	0	2
4386	816	"result"	"blob"	0	0	0
4387	816	"arg_1"	"decimal"	9	0	1
4388	816	"arg_2"	"blob"	0	0	2
4389	817	"result"	"blob"	0	0	0
4390	817	"arg_1"	"decimal"	19	0	1
4391	817	"arg_2"	"blob"	0	0	2
4392	818	"result"	"blob"	0	0	0
4393	818	"arg_1"	"real"	24	0	1
4394	818	"arg_2"	"blob"	0	0	2
4395	819	"result"	"blob"	0	0	0
4396	819	"arg_1"	"double"	53	0	1
4397	819	"arg_2"	"blob"	0	0	2
4398	820	"result"	"blob"	0	0	0
4399	820	"arg_1"	"month_interval"	32	0	1
4400	820	"arg_2"	"blob"	0	0	2
4401	821	"result"	"blob"	0	0	0
4402	821	"arg_1"	"sec_interval"	19	0	1
4403	821	"arg_2"	"blob"	0	0	2
4404	822	"result"	"blob"	0	0	0
4405	822	"arg_1"	"time"	7	0	1
4406	822	"arg_2"	"blob"	0	0	2
4407	823	"result"	"blob"	0	0	0
4408	823	"arg_1"	"timetz"	7	0	1
4409	823	"arg_2"	"blob"	0	0	2
4410	824	"result"	"blob"	0	0	0
4411	824	"arg_1"	"date"	0	0	1
4412	824	"arg_2"	"blob"	0	0	2
4413	825	"result"	"blob"	0	0	0
4414	825	"arg_1"	"timestamp"	7	0	1
4415	825	"arg_2"	"blob"	0	0	2
4416	826	"result"	"blob"	0	0	0
4417	826	"arg_1"	"timestamptz"	7	0	1
4418	826	"arg_2"	"blob"	0	0	2
4419	827	"result"	"blob"	0	0	0
4420	827	"arg_1"	"blob"	0	0	1
4421	827	"arg_2"	"blob"	0	0	2
4422	828	"result"	"double"	53	0	0
4423	828	"arg_1"	"double"	53	0	1
4424	828	"arg_2"	"double"	53	0	2
4425	829	"result"	"double"	53	0	0
4426	829	"arg_1"	"double"	53	0	1
4427	830	"result"	"double"	53	0	0
4428	830	"arg_1"	"double"	53	0	1
4429	831	"result"	"double"	53	0	0
4430	831	"arg_1"	"double"	53	0	1
4431	832	"result"	"double"	53	0	0
4432	832	"arg_1"	"double"	53	0	1
4433	833	"result"	"double"	53	0	0
4434	833	"arg_1"	"double"	53	0	1
4435	834	"result"	"double"	53	0	0
4436	834	"arg_1"	"double"	53	0	1
4437	835	"result"	"double"	53	0	0
4438	835	"arg_1"	"double"	53	0	1
4439	836	"result"	"double"	53	0	0
4440	836	"arg_1"	"double"	53	0	1
4441	837	"result"	"double"	53	0	0
4442	837	"arg_1"	"double"	53	0	1
4443	838	"result"	"double"	53	0	0
4444	838	"arg_1"	"double"	53	0	1
4445	838	"arg_2"	"double"	53	0	2
4446	839	"result"	"double"	53	0	0
4447	839	"arg_1"	"double"	53	0	1
4448	840	"result"	"double"	53	0	0
4449	840	"arg_1"	"double"	53	0	1
4450	841	"result"	"double"	53	0	0
4451	841	"arg_1"	"double"	53	0	1
4452	842	"result"	"double"	53	0	0
4453	842	"arg_1"	"double"	53	0	1
4454	843	"result"	"double"	53	0	0
4455	843	"arg_1"	"double"	53	0	1
4456	844	"result"	"double"	53	0	0
4457	844	"arg_1"	"double"	53	0	1
4458	845	"result"	"double"	53	0	0
4459	845	"arg_1"	"double"	53	0	1
4460	846	"result"	"double"	53	0	0
4461	846	"arg_1"	"double"	53	0	1
4462	847	"result"	"real"	24	0	0
4463	847	"arg_1"	"real"	24	0	1
4464	847	"arg_2"	"real"	24	0	2
4465	848	"result"	"real"	24	0	0
4466	848	"arg_1"	"real"	24	0	1
4467	849	"result"	"real"	24	0	0
4468	849	"arg_1"	"real"	24	0	1
4469	850	"result"	"real"	24	0	0
4470	850	"arg_1"	"real"	24	0	1
4471	851	"result"	"real"	24	0	0
4472	851	"arg_1"	"real"	24	0	1
4473	852	"result"	"real"	24	0	0
4474	852	"arg_1"	"real"	24	0	1
4475	853	"result"	"real"	24	0	0
4476	853	"arg_1"	"real"	24	0	1
4477	854	"result"	"real"	24	0	0
4478	854	"arg_1"	"real"	24	0	1
4479	855	"result"	"real"	24	0	0
4480	855	"arg_1"	"real"	24	0	1
4481	856	"result"	"real"	24	0	0
4482	856	"arg_1"	"real"	24	0	1
4483	857	"result"	"real"	24	0	0
4484	857	"arg_1"	"real"	24	0	1
4485	857	"arg_2"	"real"	24	0	2
4486	858	"result"	"real"	24	0	0
4487	858	"arg_1"	"real"	24	0	1
4488	859	"result"	"real"	24	0	0
4489	859	"arg_1"	"real"	24	0	1
4490	860	"result"	"real"	24	0	0
4491	860	"arg_1"	"real"	24	0	1
4492	861	"result"	"real"	24	0	0
4493	861	"arg_1"	"real"	24	0	1
4494	862	"result"	"real"	24	0	0
4495	862	"arg_1"	"real"	24	0	1
4496	863	"result"	"real"	24	0	0
4497	863	"arg_1"	"real"	24	0	1
4498	864	"result"	"real"	24	0	0
4499	864	"arg_1"	"real"	24	0	1
4500	865	"result"	"real"	24	0	0
4501	865	"arg_1"	"real"	24	0	1
4502	866	"result"	"double"	53	0	0
4503	867	"result"	"int"	32	0	0
4504	868	"result"	"int"	32	0	0
4505	868	"arg_1"	"int"	32	0	1
4506	869	"result"	"date"	0	0	0
4507	870	"result"	"date"	0	0	0
4508	871	"result"	"timetz"	7	0	0
4509	872	"result"	"timetz"	7	0	0
4510	873	"result"	"timestamptz"	7	0	0
4511	874	"result"	"time"	7	0	0
4512	875	"result"	"timestamp"	7	0	0
4513	876	"result"	"date"	0	0	0
4514	876	"arg_1"	"date"	0	0	1
4515	876	"arg_2"	"sec_interval"	19	0	2
4516	877	"result"	"date"	0	0	0
4517	877	"arg_1"	"date"	0	0	1
4518	877	"arg_2"	"month_interval"	32	0	2
4519	878	"result"	"timestamp"	7	0	0
4520	878	"arg_1"	"timestamp"	7	0	1
4521	878	"arg_2"	"sec_interval"	19	0	2
4522	879	"result"	"timestamp"	7	0	0
4523	879	"arg_1"	"timestamp"	7	0	1
4524	879	"arg_2"	"month_interval"	32	0	2
4525	880	"result"	"timestamptz"	7	0	0
4526	880	"arg_1"	"timestamptz"	7	0	1
4527	880	"arg_2"	"sec_interval"	19	0	2
4528	881	"result"	"timestamptz"	7	0	0
4529	881	"arg_1"	"timestamptz"	7	0	1
4530	881	"arg_2"	"month_interval"	32	0	2
4531	882	"result"	"time"	7	0	0
4532	882	"arg_1"	"time"	7	0	1
4533	882	"arg_2"	"sec_interval"	19	0	2
4534	883	"result"	"int"	32	0	0
4535	883	"arg_1"	"date"	0	0	1
4536	883	"arg_2"	"date"	0	0	2
4537	884	"result"	"bigint"	64	0	0
4538	884	"arg_1"	"timestamp"	7	0	1
4539	884	"arg_2"	"timestamp"	7	0	2
4540	885	"result"	"bigint"	64	0	0
4541	885	"arg_1"	"timestamptz"	7	0	1
4542	885	"arg_2"	"timestamptz"	7	0	2
4543	886	"result"	"date"	0	0	0
4544	886	"arg_1"	"date"	0	0	1
4545	886	"arg_2"	"sec_interval"	19	0	2
4546	887	"result"	"date"	0	0	0
4547	887	"arg_1"	"date"	0	0	1
4548	887	"arg_2"	"month_interval"	32	0	2
4549	888	"result"	"timestamp"	7	0	0
4550	888	"arg_1"	"timestamp"	7	0	1
4551	888	"arg_2"	"sec_interval"	19	0	2
4552	889	"result"	"timestamp"	7	0	0
4553	889	"arg_1"	"timestamp"	7	0	1
4554	889	"arg_2"	"month_interval"	32	0	2
4555	890	"result"	"timestamptz"	7	0	0
4556	890	"arg_1"	"timestamptz"	7	0	1
4557	890	"arg_2"	"sec_interval"	19	0	2
4558	891	"result"	"timestamptz"	7	0	0
4559	891	"arg_1"	"timestamptz"	7	0	1
4560	891	"arg_2"	"month_interval"	32	0	2
4561	892	"result"	"time"	7	0	0
4562	892	"arg_1"	"time"	7	0	1
4563	892	"arg_2"	"sec_interval"	19	0	2
4564	893	"result"	"sec_interval"	19	0	0
4565	894	"result"	"int"	32	0	0
4566	894	"arg_1"	"date"	0	0	1
4567	895	"result"	"int"	32	0	0
4568	895	"arg_1"	"date"	0	0	1
4569	896	"result"	"int"	32	0	0
4570	896	"arg_1"	"date"	0	0	1
4571	897	"result"	"int"	32	0	0
4572	897	"arg_1"	"time"	7	0	1
4573	898	"result"	"int"	32	0	0
4574	898	"arg_1"	"time"	7	0	1
4575	899	"result"	"decimal"	9	3	0
4576	899	"arg_1"	"time"	7	0	1
4577	900	"result"	"int"	32	0	0
4578	900	"arg_1"	"timestamp"	7	0	1
4579	901	"result"	"int"	32	0	0
4580	901	"arg_1"	"timestamp"	7	0	1
4581	902	"result"	"int"	32	0	0
4582	902	"arg_1"	"timestamp"	7	0	1
4583	903	"result"	"int"	32	0	0
4584	903	"arg_1"	"timestamp"	7	0	1
4585	904	"result"	"int"	32	0	0
4586	904	"arg_1"	"timestamp"	7	0	1
4587	905	"result"	"decimal"	9	3	0
4588	905	"arg_1"	"timestamp"	7	0	1
4589	906	"result"	"int"	32	0	0
4590	906	"arg_1"	"timestamptz"	7	0	1
4591	907	"result"	"int"	32	0	0
4592	907	"arg_1"	"timestamptz"	7	0	1
4593	908	"result"	"int"	32	0	0
4594	908	"arg_1"	"timestamptz"	7	0	1
4595	909	"result"	"int"	32	0	0
4596	909	"arg_1"	"timestamptz"	7	0	1
4597	910	"result"	"int"	32	0	0
4598	910	"arg_1"	"timestamptz"	7	0	1
4599	911	"result"	"decimal"	9	3	0
4600	911	"arg_1"	"timestamptz"	7	0	1
4601	912	"result"	"int"	32	0	0
4602	912	"arg_1"	"month_interval"	32	0	1
4603	913	"result"	"int"	32	0	0
4604	913	"arg_1"	"month_interval"	32	0	1
4605	914	"result"	"bigint"	64	0	0
4606	914	"arg_1"	"sec_interval"	19	0	1
4607	915	"result"	"int"	32	0	0
4608	915	"arg_1"	"sec_interval"	19	0	1
4609	916	"result"	"int"	32	0	0
4610	916	"arg_1"	"sec_interval"	19	0	1
4611	917	"result"	"int"	32	0	0
4612	917	"arg_1"	"sec_interval"	19	0	1
4613	918	"result"	"int"	32	0	0
4614	918	"arg_1"	"date"	0	0	1
4615	919	"result"	"int"	32	0	0
4616	919	"arg_1"	"date"	0	0	1
4617	920	"result"	"int"	32	0	0
4618	920	"arg_1"	"date"	0	0	1
4619	921	"result"	"int"	32	0	0
4620	921	"arg_1"	"date"	0	0	1
4621	922	"result"	"int"	32	0	0
4622	922	"arg_1"	"date"	0	0	1
4623	923	"result"	"bigint"	64	0	0
4624	923	"arg_1"	"varchar"	0	0	1
4625	923	"arg_2"	"varchar"	0	0	2
4626	924	"result"	"bigint"	64	0	0
4627	924	"arg_1"	"varchar"	0	0	1
4628	924	"arg_2"	"varchar"	0	0	2
4629	925	"result"	"bigint"	64	0	0
4630	925	"arg_1"	"varchar"	0	0	1
4631	925	"arg_2"	"varchar"	0	0	2
4632	925	"arg_3"	"bigint"	64	0	3
4633	926	"result"	"int"	32	0	0
4634	926	"arg_1"	"char"	0	0	1
4635	926	"arg_2"	"char"	0	0	2
4636	927	"result"	"int"	32	0	0
4637	927	"arg_1"	"char"	0	0	1
4638	927	"arg_2"	"char"	0	0	2
4639	927	"arg_3"	"int"	32	0	3
4640	928	"result"	"char"	0	0	0
4641	928	"arg_1"	"char"	0	0	1
4642	928	"arg_2"	"int"	32	0	2
4643	929	"result"	"char"	0	0	0
4644	929	"arg_1"	"char"	0	0	1
4645	929	"arg_2"	"int"	32	0	2
4646	929	"arg_3"	"int"	32	0	3
4647	930	"result"	"boolean"	1	0	0
4648	930	"arg_1"	"char"	0	0	1
4649	930	"arg_2"	"char"	0	0	2
4650	931	"result"	"boolean"	1	0	0
4651	931	"arg_1"	"char"	0	0	1
4652	931	"arg_2"	"char"	0	0	2
4653	931	"arg_3"	"char"	0	0	3
4654	932	"result"	"boolean"	1	0	0
4655	932	"arg_1"	"char"	0	0	1
4656	932	"arg_2"	"char"	0	0	2
4657	933	"result"	"boolean"	1	0	0
4658	933	"arg_1"	"char"	0	0	1
4659	933	"arg_2"	"char"	0	0	2
4660	933	"arg_3"	"char"	0	0	3
4661	934	"result"	"boolean"	1	0	0
4662	934	"arg_1"	"char"	0	0	1
4663	934	"arg_2"	"char"	0	0	2
4664	935	"result"	"boolean"	1	0	0
4665	935	"arg_1"	"char"	0	0	1
4666	935	"arg_2"	"char"	0	0	2
4667	935	"arg_3"	"char"	0	0	3
4668	936	"result"	"boolean"	1	0	0
4669	936	"arg_1"	"char"	0	0	1
4670	936	"arg_2"	"char"	0	0	2
4671	937	"result"	"boolean"	1	0	0
4672	937	"arg_1"	"char"	0	0	1
4673	937	"arg_2"	"char"	0	0	2
4674	937	"arg_3"	"char"	0	0	3
4675	938	"result"	"int"	32	0	0
4676	938	"arg_1"	"char"	0	0	1
4677	938	"arg_2"	"char"	0	0	2
4678	939	"result"	"char"	0	0	0
4679	939	"arg_1"	"char"	0	0	1
4680	939	"arg_2"	"int"	32	0	2
4681	940	"result"	"char"	0	0	0
4682	940	"arg_1"	"char"	0	0	1
4683	940	"arg_2"	"char"	0	0	2
4684	941	"result"	"int"	32	0	0
4685	941	"arg_1"	"char"	0	0	1
4686	942	"result"	"char"	0	0	0
4687	942	"arg_1"	"int"	32	0	1
4688	943	"result"	"int"	32	0	0
4689	943	"arg_1"	"char"	0	0	1
4690	944	"result"	"char"	0	0	0
4691	944	"arg_1"	"char"	0	0	1
4692	944	"arg_2"	"int"	32	0	2
4693	945	"result"	"char"	0	0	0
4694	945	"arg_1"	"char"	0	0	1
4695	945	"arg_2"	"int"	32	0	2
4696	946	"result"	"char"	0	0	0
4697	946	"arg_1"	"char"	0	0	1
4698	947	"result"	"char"	0	0	0
4699	947	"arg_1"	"char"	0	0	1
4700	948	"result"	"char"	0	0	0
4701	948	"arg_1"	"char"	0	0	1
4702	949	"result"	"char"	0	0	0
4703	949	"arg_1"	"char"	0	0	1
4704	950	"result"	"char"	0	0	0
4705	950	"arg_1"	"char"	0	0	1
4706	951	"result"	"char"	0	0	0
4707	951	"arg_1"	"char"	0	0	1
4708	952	"result"	"char"	0	0	0
4709	952	"arg_1"	"char"	0	0	1
4710	953	"result"	"char"	0	0	0
4711	953	"arg_1"	"char"	0	0	1
4712	953	"arg_2"	"int"	32	0	2
4713	953	"arg_3"	"int"	32	0	3
4714	953	"arg_4"	"char"	0	0	4
4715	954	"result"	"char"	0	0	0
4716	954	"arg_1"	"char"	0	0	1
4717	954	"arg_2"	"char"	0	0	2
4718	954	"arg_3"	"char"	0	0	3
4719	955	"result"	"char"	0	0	0
4720	955	"arg_1"	"char"	0	0	1
4721	955	"arg_2"	"int"	32	0	2
4722	956	"result"	"char"	0	0	0
4723	956	"arg_1"	"int"	32	0	1
4724	957	"result"	"int"	32	0	0
4725	957	"arg_1"	"char"	0	0	1
4726	958	"result"	"int"	32	0	0
4727	958	"arg_1"	"char"	0	0	1
4728	959	"result"	"int"	32	0	0
4729	959	"arg_1"	"char"	0	0	1
4730	960	"result"	"char"	0	0	0
4731	960	"arg_1"	"char"	0	0	1
4732	961	"result"	"int"	32	0	0
4733	961	"arg_1"	"char"	0	0	1
4734	961	"arg_2"	"char"	0	0	2
4735	962	"result"	"int"	32	0	0
4736	962	"arg_1"	"char"	0	0	1
4737	962	"arg_2"	"char"	0	0	2
4738	963	"result"	"int"	32	0	0
4739	963	"arg_1"	"char"	0	0	1
4740	963	"arg_2"	"char"	0	0	2
4741	964	"result"	"double"	53	0	0
4742	964	"arg_1"	"char"	0	0	1
4743	964	"arg_2"	"char"	0	0	2
4744	965	"result"	"char"	0	0	0
4745	965	"arg_1"	"char"	0	0	1
4746	966	"result"	"int"	32	0	0
4747	966	"arg_1"	"char"	0	0	1
4748	966	"arg_2"	"char"	0	0	2
4749	967	"result"	"int"	32	0	0
4750	967	"arg_1"	"char"	0	0	1
4751	967	"arg_2"	"char"	0	0	2
4752	967	"arg_3"	"int"	32	0	3
4753	967	"arg_4"	"int"	32	0	4
4754	967	"arg_5"	"int"	32	0	5
4755	968	"result"	"int"	32	0	0
4756	968	"arg_1"	"varchar"	0	0	1
4757	968	"arg_2"	"varchar"	0	0	2
4758	969	"result"	"int"	32	0	0
4759	969	"arg_1"	"varchar"	0	0	1
4760	969	"arg_2"	"varchar"	0	0	2
4761	969	"arg_3"	"int"	32	0	3
4762	970	"result"	"varchar"	0	0	0
4763	970	"arg_1"	"varchar"	0	0	1
4764	970	"arg_2"	"int"	32	0	2
4765	971	"result"	"varchar"	0	0	0
4766	971	"arg_1"	"varchar"	0	0	1
4767	971	"arg_2"	"int"	32	0	2
4768	971	"arg_3"	"int"	32	0	3
4769	972	"result"	"boolean"	1	0	0
4770	972	"arg_1"	"varchar"	0	0	1
4771	972	"arg_2"	"varchar"	0	0	2
4772	973	"result"	"boolean"	1	0	0
4773	973	"arg_1"	"varchar"	0	0	1
4774	973	"arg_2"	"varchar"	0	0	2
4775	973	"arg_3"	"varchar"	0	0	3
4776	974	"result"	"boolean"	1	0	0
4777	974	"arg_1"	"varchar"	0	0	1
4778	974	"arg_2"	"varchar"	0	0	2
4779	975	"result"	"boolean"	1	0	0
4780	975	"arg_1"	"varchar"	0	0	1
4781	975	"arg_2"	"varchar"	0	0	2
4782	975	"arg_3"	"varchar"	0	0	3
4783	976	"result"	"boolean"	1	0	0
4784	976	"arg_1"	"varchar"	0	0	1
4785	976	"arg_2"	"varchar"	0	0	2
4786	977	"result"	"boolean"	1	0	0
4787	977	"arg_1"	"varchar"	0	0	1
4788	977	"arg_2"	"varchar"	0	0	2
4789	977	"arg_3"	"varchar"	0	0	3
4790	978	"result"	"boolean"	1	0	0
4791	978	"arg_1"	"varchar"	0	0	1
4792	978	"arg_2"	"varchar"	0	0	2
4793	979	"result"	"boolean"	1	0	0
4794	979	"arg_1"	"varchar"	0	0	1
4795	979	"arg_2"	"varchar"	0	0	2
4796	979	"arg_3"	"varchar"	0	0	3
4797	980	"result"	"int"	32	0	0
4798	980	"arg_1"	"varchar"	0	0	1
4799	980	"arg_2"	"varchar"	0	0	2
4800	981	"result"	"varchar"	0	0	0
4801	981	"arg_1"	"varchar"	0	0	1
4802	981	"arg_2"	"int"	32	0	2
4803	982	"result"	"varchar"	0	0	0
4804	982	"arg_1"	"varchar"	0	0	1
4805	982	"arg_2"	"varchar"	0	0	2
4806	983	"result"	"int"	32	0	0
4807	983	"arg_1"	"varchar"	0	0	1
4808	984	"result"	"varchar"	0	0	0
4809	984	"arg_1"	"int"	32	0	1
4810	985	"result"	"int"	32	0	0
4811	985	"arg_1"	"varchar"	0	0	1
4812	986	"result"	"varchar"	0	0	0
4813	986	"arg_1"	"varchar"	0	0	1
4814	986	"arg_2"	"int"	32	0	2
4815	987	"result"	"varchar"	0	0	0
4816	987	"arg_1"	"varchar"	0	0	1
4817	987	"arg_2"	"int"	32	0	2
4818	988	"result"	"varchar"	0	0	0
4819	988	"arg_1"	"varchar"	0	0	1
4820	989	"result"	"varchar"	0	0	0
4821	989	"arg_1"	"varchar"	0	0	1
4822	990	"result"	"varchar"	0	0	0
4823	990	"arg_1"	"varchar"	0	0	1
4824	991	"result"	"varchar"	0	0	0
4825	991	"arg_1"	"varchar"	0	0	1
4826	992	"result"	"varchar"	0	0	0
4827	992	"arg_1"	"varchar"	0	0	1
4828	993	"result"	"varchar"	0	0	0
4829	993	"arg_1"	"varchar"	0	0	1
4830	994	"result"	"varchar"	0	0	0
4831	994	"arg_1"	"varchar"	0	0	1
4832	995	"result"	"varchar"	0	0	0
4833	995	"arg_1"	"varchar"	0	0	1
4834	995	"arg_2"	"int"	32	0	2
4835	995	"arg_3"	"int"	32	0	3
4836	995	"arg_4"	"varchar"	0	0	4
4837	996	"result"	"varchar"	0	0	0
4838	996	"arg_1"	"varchar"	0	0	1
4839	996	"arg_2"	"varchar"	0	0	2
4840	996	"arg_3"	"varchar"	0	0	3
4841	997	"result"	"varchar"	0	0	0
4842	997	"arg_1"	"varchar"	0	0	1
4843	997	"arg_2"	"int"	32	0	2
4844	998	"result"	"varchar"	0	0	0
4845	998	"arg_1"	"int"	32	0	1
4846	999	"result"	"int"	32	0	0
4847	999	"arg_1"	"varchar"	0	0	1
4848	1000	"result"	"int"	32	0	0
4849	1000	"arg_1"	"varchar"	0	0	1
4850	1001	"result"	"int"	32	0	0
4851	1001	"arg_1"	"varchar"	0	0	1
4852	1002	"result"	"varchar"	0	0	0
4853	1002	"arg_1"	"varchar"	0	0	1
4854	1003	"result"	"int"	32	0	0
4855	1003	"arg_1"	"varchar"	0	0	1
4856	1003	"arg_2"	"varchar"	0	0	2
4857	1004	"result"	"int"	32	0	0
4858	1004	"arg_1"	"varchar"	0	0	1
4859	1004	"arg_2"	"varchar"	0	0	2
4860	1005	"result"	"int"	32	0	0
4861	1005	"arg_1"	"varchar"	0	0	1
4862	1005	"arg_2"	"varchar"	0	0	2
4863	1006	"result"	"double"	53	0	0
4864	1006	"arg_1"	"varchar"	0	0	1
4865	1006	"arg_2"	"varchar"	0	0	2
4866	1007	"result"	"varchar"	0	0	0
4867	1007	"arg_1"	"varchar"	0	0	1
4868	1008	"result"	"int"	32	0	0
4869	1008	"arg_1"	"varchar"	0	0	1
4870	1008	"arg_2"	"varchar"	0	0	2
4871	1009	"result"	"int"	32	0	0
4872	1009	"arg_1"	"varchar"	0	0	1
4873	1009	"arg_2"	"varchar"	0	0	2
4874	1009	"arg_3"	"int"	32	0	3
4875	1009	"arg_4"	"int"	32	0	4
4876	1009	"arg_5"	"int"	32	0	5
4877	1010	"result"	"int"	32	0	0
4878	1010	"arg_1"	"clob"	0	0	1
4879	1010	"arg_2"	"clob"	0	0	2
4880	1011	"result"	"int"	32	0	0
4881	1011	"arg_1"	"clob"	0	0	1
4882	1011	"arg_2"	"clob"	0	0	2
4883	1011	"arg_3"	"int"	32	0	3
4884	1012	"result"	"clob"	0	0	0
4885	1012	"arg_1"	"clob"	0	0	1
4886	1012	"arg_2"	"int"	32	0	2
4887	1013	"result"	"clob"	0	0	0
4888	1013	"arg_1"	"clob"	0	0	1
4889	1013	"arg_2"	"int"	32	0	2
4890	1013	"arg_3"	"int"	32	0	3
4891	1014	"result"	"boolean"	1	0	0
4892	1014	"arg_1"	"clob"	0	0	1
4893	1014	"arg_2"	"clob"	0	0	2
4894	1015	"result"	"boolean"	1	0	0
4895	1015	"arg_1"	"clob"	0	0	1
4896	1015	"arg_2"	"clob"	0	0	2
4897	1015	"arg_3"	"clob"	0	0	3
4898	1016	"result"	"boolean"	1	0	0
4899	1016	"arg_1"	"clob"	0	0	1
4900	1016	"arg_2"	"clob"	0	0	2
4901	1017	"result"	"boolean"	1	0	0
4902	1017	"arg_1"	"clob"	0	0	1
4903	1017	"arg_2"	"clob"	0	0	2
4904	1017	"arg_3"	"clob"	0	0	3
4905	1018	"result"	"boolean"	1	0	0
4906	1018	"arg_1"	"clob"	0	0	1
4907	1018	"arg_2"	"clob"	0	0	2
4908	1019	"result"	"boolean"	1	0	0
4909	1019	"arg_1"	"clob"	0	0	1
4910	1019	"arg_2"	"clob"	0	0	2
4911	1019	"arg_3"	"clob"	0	0	3
4912	1020	"result"	"boolean"	1	0	0
4913	1020	"arg_1"	"clob"	0	0	1
4914	1020	"arg_2"	"clob"	0	0	2
4915	1021	"result"	"boolean"	1	0	0
4916	1021	"arg_1"	"clob"	0	0	1
4917	1021	"arg_2"	"clob"	0	0	2
4918	1021	"arg_3"	"clob"	0	0	3
4919	1022	"result"	"int"	32	0	0
4920	1022	"arg_1"	"clob"	0	0	1
4921	1022	"arg_2"	"clob"	0	0	2
4922	1023	"result"	"clob"	0	0	0
4923	1023	"arg_1"	"clob"	0	0	1
4924	1023	"arg_2"	"int"	32	0	2
4925	1024	"result"	"clob"	0	0	0
4926	1024	"arg_1"	"clob"	0	0	1
4927	1024	"arg_2"	"clob"	0	0	2
4928	1025	"result"	"int"	32	0	0
4929	1025	"arg_1"	"clob"	0	0	1
4930	1026	"result"	"clob"	0	0	0
4931	1026	"arg_1"	"int"	32	0	1
4932	1027	"result"	"int"	32	0	0
4933	1027	"arg_1"	"clob"	0	0	1
4934	1028	"result"	"clob"	0	0	0
4935	1028	"arg_1"	"clob"	0	0	1
4936	1028	"arg_2"	"int"	32	0	2
4937	1029	"result"	"clob"	0	0	0
4938	1029	"arg_1"	"clob"	0	0	1
4939	1029	"arg_2"	"int"	32	0	2
4940	1030	"result"	"clob"	0	0	0
4941	1030	"arg_1"	"clob"	0	0	1
4942	1031	"result"	"clob"	0	0	0
4943	1031	"arg_1"	"clob"	0	0	1
4944	1032	"result"	"clob"	0	0	0
4945	1032	"arg_1"	"clob"	0	0	1
4946	1033	"result"	"clob"	0	0	0
4947	1033	"arg_1"	"clob"	0	0	1
4948	1034	"result"	"clob"	0	0	0
4949	1034	"arg_1"	"clob"	0	0	1
4950	1035	"result"	"clob"	0	0	0
4951	1035	"arg_1"	"clob"	0	0	1
4952	1036	"result"	"clob"	0	0	0
4953	1036	"arg_1"	"clob"	0	0	1
4954	1037	"result"	"clob"	0	0	0
4955	1037	"arg_1"	"clob"	0	0	1
4956	1037	"arg_2"	"int"	32	0	2
4957	1037	"arg_3"	"int"	32	0	3
4958	1037	"arg_4"	"clob"	0	0	4
4959	1038	"result"	"clob"	0	0	0
4960	1038	"arg_1"	"clob"	0	0	1
4961	1038	"arg_2"	"clob"	0	0	2
4962	1038	"arg_3"	"clob"	0	0	3
4963	1039	"result"	"clob"	0	0	0
4964	1039	"arg_1"	"clob"	0	0	1
4965	1039	"arg_2"	"int"	32	0	2
4966	1040	"result"	"clob"	0	0	0
4967	1040	"arg_1"	"int"	32	0	1
4968	1041	"result"	"int"	32	0	0
4969	1041	"arg_1"	"clob"	0	0	1
4970	1042	"result"	"int"	32	0	0
4971	1042	"arg_1"	"clob"	0	0	1
4972	1043	"result"	"int"	32	0	0
4973	1043	"arg_1"	"clob"	0	0	1
4974	1044	"result"	"clob"	0	0	0
4975	1044	"arg_1"	"clob"	0	0	1
4976	1045	"result"	"int"	32	0	0
4977	1045	"arg_1"	"clob"	0	0	1
4978	1045	"arg_2"	"clob"	0	0	2
4979	1046	"result"	"int"	32	0	0
4980	1046	"arg_1"	"clob"	0	0	1
4981	1046	"arg_2"	"clob"	0	0	2
4982	1047	"result"	"int"	32	0	0
4983	1047	"arg_1"	"clob"	0	0	1
4984	1047	"arg_2"	"clob"	0	0	2
4985	1048	"result"	"double"	53	0	0
4986	1048	"arg_1"	"clob"	0	0	1
4987	1048	"arg_2"	"clob"	0	0	2
4988	1049	"result"	"clob"	0	0	0
4989	1049	"arg_1"	"clob"	0	0	1
4990	1050	"result"	"int"	32	0	0
4991	1050	"arg_1"	"clob"	0	0	1
4992	1050	"arg_2"	"clob"	0	0	2
4993	1051	"result"	"int"	32	0	0
4994	1051	"arg_1"	"clob"	0	0	1
4995	1051	"arg_2"	"clob"	0	0	2
4996	1051	"arg_3"	"int"	32	0	3
4997	1051	"arg_4"	"int"	32	0	4
4998	1051	"arg_5"	"int"	32	0	5
4999	1052	"result"	"table"	0	0	0
5000	1052	"arg_1"	"varchar"	0	0	1
5001	1052	"arg_2"	"varchar"	0	0	2
5002	1052	"arg_3"	"varchar"	0	0	3
5003	1052	"arg_4"	"varchar"	0	0	4
5004	1052	"arg_5"	"varchar"	0	0	5
5005	1052	"arg_6"	"varchar"	0	0	6
5006	1052	"arg_7"	"bigint"	64	0	7
5007	1052	"arg_8"	"bigint"	64	0	8
5008	1053	"result"	"table"	0	0	0
5009	1053	"arg_1"	"varchar"	0	0	1
5010	1053	"arg_2"	"varchar"	0	0	2
5011	1053	"arg_3"	"varchar"	0	0	3
5012	1053	"arg_4"	"varchar"	0	0	4
5013	1053	"arg_5"	"varchar"	0	0	5
5014	1053	"arg_6"	"bigint"	64	0	6
5015	1053	"arg_7"	"bigint"	64	0	7
5016	1054	"result"	"table"	0	0	0
5017	1054	"arg_1"	"varchar"	0	0	1
5018	1054	"arg_2"	"varchar"	0	0	2
5019	27	"result"	"boolean"	1	0	0
5020	27	"arg"	"oid"	63	0	1
5021	39	"result"	"any"	0	0	0
5022	39	"arg"	"any"	0	0	1
5023	40	"result"	"boolean"	1	0	0
5024	40	"arg"	"any"	0	0	1
5025	41	"result"	"boolean"	1	0	0
5026	41	"arg"	"any"	0	0	1
5027	46	"result"	"any"	0	0	0
5028	46	"arg"	"any"	0	0	1
5029	47	"result"	"any"	0	0	0
5030	47	"arg"	"any"	0	0	1
5031	51	"result"	"bigint"	64	0	0
5032	51	"arg"	"tinyint"	8	0	1
5033	52	"result"	"bigint"	64	0	0
5034	52	"arg"	"smallint"	16	0	1
5035	53	"result"	"bigint"	64	0	0
5036	53	"arg"	"int"	32	0	1
5037	54	"result"	"bigint"	64	0	0
5038	54	"arg"	"bigint"	64	0	1
5039	55	"result"	"wrd"	64	0	0
5040	55	"arg"	"wrd"	64	0	1
5041	56	"result"	"decimal"	19	0	0
5042	56	"arg"	"decimal"	2	0	1
5043	57	"result"	"decimal"	19	0	0
5044	57	"arg"	"decimal"	4	0	1
5045	58	"result"	"decimal"	19	0	0
5046	58	"arg"	"decimal"	9	0	1
5047	59	"result"	"decimal"	19	0	0
5048	59	"arg"	"decimal"	19	0	1
5049	60	"result"	"bigint"	64	0	0
5050	60	"arg"	"tinyint"	8	0	1
5051	61	"result"	"bigint"	64	0	0
5052	61	"arg"	"smallint"	16	0	1
5053	62	"result"	"bigint"	64	0	0
5054	62	"arg"	"int"	32	0	1
5055	63	"result"	"bigint"	64	0	0
5056	63	"arg"	"bigint"	64	0	1
5057	64	"result"	"decimal"	19	0	0
5058	64	"arg"	"decimal"	2	0	1
5059	65	"result"	"decimal"	19	0	0
5060	65	"arg"	"decimal"	4	0	1
5061	66	"result"	"decimal"	19	0	0
5062	66	"arg"	"decimal"	9	0	1
5063	67	"result"	"decimal"	19	0	0
5064	67	"arg"	"decimal"	19	0	1
5065	80	"result"	"real"	24	0	0
5066	80	"arg"	"real"	24	0	1
5067	81	"result"	"real"	24	0	0
5068	81	"arg"	"real"	24	0	1
5069	82	"result"	"double"	53	0	0
5070	82	"arg"	"double"	53	0	1
5071	83	"result"	"double"	53	0	0
5072	83	"arg"	"double"	53	0	1
5073	84	"result"	"double"	53	0	0
5074	84	"arg"	"double"	53	0	1
5075	85	"result"	"wrd"	64	0	0
5076	86	"result"	"wrd"	64	0	0
5102	5101	"result"	"table"	5098	0	0
5106	5105	"result"	"table"	5103	0	0
5114	5113	"result"	"table"	5111	0	0
5134	5133	"val"	"clob"	0	0	0
5135	5133	"pat"	"clob"	0	0	1
5136	5133	"esc"	"clob"	0	0	2
5139	5138	"val"	"clob"	0	0	0
5140	5138	"pat"	"clob"	0	0	1
5141	5138	"esc"	"clob"	0	0	2
5144	5143	"result"	"double"	53	0	0
5145	5143	"r"	"double"	53	0	1
5148	5147	"result"	"double"	53	0	0
5149	5147	"d"	"double"	53	0	1
5155	5154	"result"	"clob"	0	0	0
5156	5154	"theurl"	"url"	0	0	1
5159	5158	"result"	"clob"	0	0	0
5160	5158	"theurl"	"url"	0	0	1
5163	5162	"result"	"clob"	0	0	0
5164	5162	"theurl"	"url"	0	0	1
5167	5166	"result"	"clob"	0	0	0
5168	5166	"theurl"	"url"	0	0	1
5171	5170	"result"	"clob"	0	0	0
5172	5170	"theurl"	"url"	0	0	1
5175	5174	"result"	"clob"	0	0	0
5176	5174	"theurl"	"url"	0	0	1
5179	5178	"result"	"clob"	0	0	0
5180	5178	"theurl"	"url"	0	0	1
5183	5182	"result"	"clob"	0	0	0
5184	5182	"theurl"	"url"	0	0	1
5187	5186	"result"	"clob"	0	0	0
5188	5186	"theurl"	"url"	0	0	1
5191	5190	"result"	"clob"	0	0	0
5192	5190	"theurl"	"url"	0	0	1
5195	5194	"result"	"clob"	0	0	0
5196	5194	"theurl"	"url"	0	0	1
5199	5198	"result"	"clob"	0	0	0
5200	5198	"theurl"	"url"	0	0	1
5203	5202	"result"	"clob"	0	0	0
5204	5202	"theurl"	"url"	0	0	1
5207	5206	"result"	"boolean"	1	0	0
5208	5206	"theurl"	"url"	0	0	1
5211	5210	"result"	"url"	0	0	0
5212	5210	"protocol"	"clob"	0	0	1
5213	5210	"hostname"	"clob"	0	0	2
5214	5210	"port"	"int"	32	0	3
5215	5210	"file"	"clob"	0	0	4
5218	5217	"result"	"url"	0	0	0
5219	5217	"protocol"	"clob"	0	0	1
5220	5217	"hostname"	"clob"	0	0	2
5221	5217	"file"	"clob"	0	0	3
5224	5223	"result"	"date"	0	0	0
5225	5223	"s"	"clob"	0	0	1
5226	5223	"format"	"clob"	0	0	2
5229	5228	"result"	"clob"	0	0	0
5230	5228	"d"	"date"	0	0	1
5231	5228	"format"	"clob"	0	0	2
5235	5234	"result"	"inet"	0	0	0
5236	5234	"p"	"inet"	0	0	1
5239	5238	"result"	"clob"	0	0	0
5240	5238	"p"	"inet"	0	0	1
5243	5242	"result"	"int"	32	0	0
5244	5242	"p"	"inet"	0	0	1
5247	5246	"result"	"inet"	0	0	0
5248	5246	"p"	"inet"	0	0	1
5249	5246	"mask"	"int"	32	0	2
5252	5251	"result"	"inet"	0	0	0
5253	5251	"p"	"inet"	0	0	1
5256	5255	"result"	"inet"	0	0	0
5257	5255	"p"	"inet"	0	0	1
5260	5259	"result"	"inet"	0	0	0
5261	5259	"p"	"inet"	0	0	1
5264	5263	"result"	"clob"	0	0	0
5265	5263	"p"	"inet"	0	0	1
5268	5267	"result"	"clob"	0	0	0
5269	5267	"p"	"inet"	0	0	1
5280	5279	"result"	"table"	5270	0	0
5294	5293	"result"	"table"	5281	0	0
5340	5339	"threshold"	"smallint"	16	0	0
5358	5357	"result"	"table"	5343	0	0
5375	5374	"s"	"clob"	0	0	0
5376	5374	"t"	"clob"	0	0	1
5379	5378	"s"	"clob"	0	0	0
5380	5378	"t"	"clob"	0	0	1
5383	5382	"s"	"clob"	0	0	0
5384	5382	"t"	"clob"	0	0	1
5387	5386	"s"	"clob"	0	0	0
5388	5386	"t"	"clob"	0	0	1
5391	5390	"s"	"clob"	0	0	0
5392	5390	"t"	"clob"	0	0	1
5395	5394	"s"	"clob"	0	0	0
5396	5394	"t"	"clob"	0	0	1
5401	5400	"sys"	"clob"	0	0	0
5402	5400	"tab"	"clob"	0	0	1
5405	5404	"sys"	"clob"	0	0	0
5406	5404	"tab"	"clob"	0	0	1
5409	5408	"sys"	"clob"	0	0	0
5410	5408	"tab"	"clob"	0	0	1
5413	5412	"sys"	"clob"	0	0	0
5414	5412	"tab"	"clob"	0	0	1
5417	5416	"sys"	"clob"	0	0	0
5418	5416	"tab"	"clob"	0	0	1
5425	5424	"result"	"table"	5419	0	0
5432	5431	"result"	"table"	5426	0	0
5439	5438	"result"	"table"	5433	0	0
5446	5445	"result"	"table"	5440	0	0
5453	5452	"result"	"table"	5447	0	0
5460	5459	"result"	"table"	5454	0	0
5467	5466	"result"	"table"	5461	0	0
5474	5473	"result"	"table"	5468	0	0
5481	5480	"result"	"table"	5475	0	0
5488	5487	"result"	"table"	5482	0	0
5495	5494	"result"	"table"	5489	0	0
5502	5501	"result"	"table"	5496	0	0
5509	5508	"result"	"table"	5503	0	0
5516	5515	"result"	"table"	5510	0	0
5523	5522	"result"	"table"	5517	0	0
5530	5529	"result"	"table"	5524	0	0
5537	5536	"result"	"table"	5531	0	0
5540	5539	"result"	"clob"	0	0	0
5541	5539	"username"	"clob"	0	0	1
5551	5550	"result"	"table"	5542	0	0
5562	5561	"delay"	"tinyint"	8	0	0
5565	5564	"delay"	"tinyint"	8	0	0
5566	5564	"force"	"boolean"	1	0	1
5569	5568	"query"	"bigint"	64	0	0
5572	5571	"query"	"bigint"	64	0	0
5573	5571	"session"	"bigint"	64	0	1
5576	5575	"timeout"	"bigint"	64	0	0
5579	5578	"result"	"varchar"	32	0	0
5580	5578	"s1"	"varchar"	32	0	1
5581	5578	"st"	"int"	32	0	2
5582	5578	"len"	"int"	32	0	3
5583	5578	"s3"	"varchar"	32	0	4
5586	5585	"result"	"double"	53	0	0
5587	5585	"num"	"double"	53	0	1
5588	5585	"prc"	"int"	32	0	2
5591	5590	"result"	"double"	53	0	0
5592	5590	"num"	"double"	53	0	1
5593	5590	"prc"	"int"	32	0	2
5594	5590	"truncat"	"int"	32	0	3
5597	5596	"result"	"clob"	0	0	0
5598	5596	"num"	"double"	53	0	1
5599	5596	"prc"	"int"	32	0	2
5600	5596	"truncat"	"int"	32	0	3
5603	5602	"result"	"double"	53	0	0
5604	5602	"pdec"	"double"	53	0	1
5605	5602	"pradius"	"double"	53	0	2
5608	5607	"result"	"oid"	63	0	0
5609	5607	"x"	"int"	32	0	1
5610	5607	"y"	"int"	32	0	2
5613	5612	"result"	"int"	32	0	0
5614	5612	"z"	"oid"	63	0	1
5617	5616	"result"	"int"	32	0	0
5618	5616	"z"	"oid"	63	0	1
5624	5623	"result"	"table"	5619	0	0
5630	5629	"result"	"table"	5625	0	0
5633	5632	"filename"	"clob"	0	0	0
5640	5639	"result"	"table"	5634	0	0
5651	5650	"result"	"table"	5646	0	0
5671	5670	"result"	"table"	5656	0	0
5674	5673	"ra_stmt"	"clob"	0	0	0
5675	5673	"opt"	"boolean"	1	0	1
5687	5686	"result"	"table"	5676	0	0
5700	5699	"tag"	"int"	32	0	0
5703	5702	"tag"	"int"	32	0	0
5706	5705	"tag"	"int"	32	0	0
5709	5708	"tag"	"bigint"	64	0	0
5712	5711	"tag"	"bigint"	64	0	0
5715	5714	"tag"	"bigint"	64	0	0
5718	5717	"result"	"double"	53	0	0
5719	5717	"val"	"tinyint"	8	0	1
5722	5721	"result"	"double"	53	0	0
5723	5721	"val"	"smallint"	16	0	1
5726	5725	"result"	"double"	53	0	0
5727	5725	"val"	"int"	32	0	1
5730	5729	"result"	"double"	53	0	0
5731	5729	"val"	"wrd"	64	0	1
5734	5733	"result"	"double"	53	0	0
5735	5733	"val"	"bigint"	64	0	1
5738	5737	"result"	"double"	53	0	0
5739	5737	"val"	"real"	24	0	1
5742	5741	"result"	"double"	53	0	0
5743	5741	"val"	"double"	53	0	1
5746	5745	"result"	"double"	53	0	0
5747	5745	"val"	"date"	0	0	1
5750	5749	"result"	"double"	53	0	0
5751	5749	"val"	"time"	1	0	1
5754	5753	"result"	"double"	53	0	0
5755	5753	"val"	"timestamp"	7	0	1
5758	5757	"result"	"double"	53	0	0
5759	5757	"val"	"tinyint"	8	0	1
5762	5761	"result"	"double"	53	0	0
5763	5761	"val"	"smallint"	16	0	1
5766	5765	"result"	"double"	53	0	0
5767	5765	"val"	"int"	32	0	1
5770	5769	"result"	"double"	53	0	0
5771	5769	"val"	"wrd"	64	0	1
5774	5773	"result"	"double"	53	0	0
5775	5773	"val"	"bigint"	64	0	1
5778	5777	"result"	"double"	53	0	0
5779	5777	"val"	"real"	24	0	1
5782	5781	"result"	"double"	53	0	0
5783	5781	"val"	"double"	53	0	1
5786	5785	"result"	"double"	53	0	0
5787	5785	"val"	"date"	0	0	1
5790	5789	"result"	"double"	53	0	0
5791	5789	"val"	"time"	1	0	1
5794	5793	"result"	"double"	53	0	0
5795	5793	"val"	"timestamp"	7	0	1
5798	5797	"result"	"double"	53	0	0
5799	5797	"val"	"tinyint"	8	0	1
5802	5801	"result"	"double"	53	0	0
5803	5801	"val"	"smallint"	16	0	1
5806	5805	"result"	"double"	53	0	0
5807	5805	"val"	"int"	32	0	1
5810	5809	"result"	"double"	53	0	0
5811	5809	"val"	"wrd"	64	0	1
5814	5813	"result"	"double"	53	0	0
5815	5813	"val"	"bigint"	64	0	1
5818	5817	"result"	"double"	53	0	0
5819	5817	"val"	"real"	24	0	1
5822	5821	"result"	"double"	53	0	0
5823	5821	"val"	"double"	53	0	1
5826	5825	"result"	"double"	53	0	0
5827	5825	"val"	"date"	0	0	1
5830	5829	"result"	"double"	53	0	0
5831	5829	"val"	"time"	1	0	1
5834	5833	"result"	"double"	53	0	0
5835	5833	"val"	"timestamp"	7	0	1
5838	5837	"result"	"double"	53	0	0
5839	5837	"val"	"tinyint"	8	0	1
5842	5841	"result"	"double"	53	0	0
5843	5841	"val"	"smallint"	16	0	1
5846	5845	"result"	"double"	53	0	0
5847	5845	"val"	"int"	32	0	1
5850	5849	"result"	"double"	53	0	0
5851	5849	"val"	"wrd"	64	0	1
5854	5853	"result"	"double"	53	0	0
5855	5853	"val"	"bigint"	64	0	1
5858	5857	"result"	"double"	53	0	0
5859	5857	"val"	"real"	24	0	1
5862	5861	"result"	"double"	53	0	0
5863	5861	"val"	"double"	53	0	1
5866	5865	"result"	"double"	53	0	0
5867	5865	"val"	"date"	0	0	1
5870	5869	"result"	"double"	53	0	0
5871	5869	"val"	"time"	1	0	1
5874	5873	"result"	"double"	53	0	0
5875	5873	"val"	"timestamp"	7	0	1
5878	5877	"result"	"tinyint"	8	0	0
5879	5877	"val"	"tinyint"	8	0	1
5882	5881	"result"	"smallint"	16	0	0
5883	5881	"val"	"smallint"	16	0	1
5886	5885	"result"	"int"	32	0	0
5887	5885	"val"	"int"	32	0	1
5890	5889	"result"	"wrd"	64	0	0
5891	5889	"val"	"wrd"	64	0	1
5894	5893	"result"	"bigint"	64	0	0
5895	5893	"val"	"bigint"	64	0	1
5898	5897	"result"	"decimal"	1	0	0
5899	5897	"val"	"decimal"	1	0	1
5902	5901	"result"	"real"	24	0	0
5903	5901	"val"	"real"	24	0	1
5906	5905	"result"	"double"	53	0	0
5907	5905	"val"	"double"	53	0	1
5910	5909	"result"	"date"	0	0	0
5911	5909	"val"	"date"	0	0	1
5914	5913	"result"	"time"	1	0	0
5915	5913	"val"	"time"	1	0	1
5918	5917	"result"	"timestamp"	7	0	0
5919	5917	"val"	"timestamp"	7	0	1
5922	5921	"result"	"tinyint"	8	0	0
5923	5921	"val"	"tinyint"	8	0	1
5924	5921	"q"	"double"	53	0	2
5927	5926	"result"	"smallint"	16	0	0
5928	5926	"val"	"smallint"	16	0	1
5929	5926	"q"	"double"	53	0	2
5932	5931	"result"	"int"	32	0	0
5933	5931	"val"	"int"	32	0	1
5934	5931	"q"	"double"	53	0	2
5937	5936	"result"	"wrd"	64	0	0
5938	5936	"val"	"wrd"	64	0	1
5939	5936	"q"	"double"	53	0	2
5942	5941	"result"	"bigint"	64	0	0
5943	5941	"val"	"bigint"	64	0	1
5944	5941	"q"	"double"	53	0	2
5947	5946	"result"	"decimal"	1	0	0
5948	5946	"val"	"decimal"	1	0	1
5949	5946	"q"	"double"	53	0	2
5952	5951	"result"	"real"	24	0	0
5953	5951	"val"	"real"	24	0	1
5954	5951	"q"	"double"	53	0	2
5957	5956	"result"	"double"	53	0	0
5958	5956	"val"	"double"	53	0	1
5959	5956	"q"	"double"	53	0	2
5962	5961	"result"	"date"	0	0	0
5963	5961	"val"	"date"	0	0	1
5964	5961	"q"	"double"	53	0	2
5967	5966	"result"	"time"	1	0	0
5968	5966	"val"	"time"	1	0	1
5969	5966	"q"	"double"	53	0	2
5972	5971	"result"	"timestamp"	7	0	0
5973	5971	"val"	"timestamp"	7	0	1
5974	5971	"q"	"double"	53	0	2
5977	5976	"result"	"tinyint"	8	0	0
5978	5976	"e1"	"tinyint"	8	0	1
5979	5976	"e2"	"tinyint"	8	0	2
5982	5981	"result"	"smallint"	16	0	0
5983	5981	"e1"	"smallint"	16	0	1
5984	5981	"e2"	"smallint"	16	0	2
5987	5986	"result"	"int"	32	0	0
5988	5986	"e1"	"int"	32	0	1
5989	5986	"e2"	"int"	32	0	2
5992	5991	"result"	"wrd"	64	0	0
5993	5991	"e1"	"wrd"	64	0	1
5994	5991	"e2"	"wrd"	64	0	2
5997	5996	"result"	"bigint"	64	0	0
5998	5996	"e1"	"bigint"	64	0	1
5999	5996	"e2"	"bigint"	64	0	2
6002	6001	"result"	"real"	24	0	0
6003	6001	"e1"	"real"	24	0	1
6004	6001	"e2"	"real"	24	0	2
6007	6006	"result"	"double"	53	0	0
6008	6006	"e1"	"double"	53	0	1
6009	6006	"e2"	"double"	53	0	2
6025	6024	"result"	"mbr"	0	0	0
6026	6024	"g"	"geometry"	0	0	1
6029	6028	"result"	"boolean"	1	0	0
6030	6028	"a"	"mbr"	0	0	1
6031	6028	"b"	"mbr"	0	0	2
6034	6033	"result"	"geometry"	0	0	0
6035	6033	"wkt"	"clob"	0	0	1
6036	6033	"srid"	"smallint"	16	0	2
6039	6038	"result"	"point"	0	0	0
6040	6038	"wkt"	"clob"	0	0	1
6041	6038	"srid"	"smallint"	16	0	2
6044	6043	"result"	"linestring"	0	0	0
6045	6043	"wkt"	"clob"	0	0	1
6046	6043	"srid"	"smallint"	16	0	2
6049	6048	"result"	"polygon"	0	0	0
6050	6048	"wkt"	"clob"	0	0	1
6051	6048	"srid"	"smallint"	16	0	2
6054	6053	"result"	"multipoint"	0	0	0
6055	6053	"wkt"	"clob"	0	0	1
6056	6053	"srid"	"smallint"	16	0	2
6059	6058	"result"	"multilinestring"	0	0	0
6060	6058	"wkt"	"clob"	0	0	1
6061	6058	"srid"	"smallint"	16	0	2
6064	6063	"result"	"multipolygon"	0	0	0
6065	6063	"wkt"	"clob"	0	0	1
6066	6063	"srid"	"smallint"	16	0	2
6069	6068	"result"	"multipolygon"	0	0	0
6070	6068	"wkt"	"clob"	0	0	1
6071	6068	"srid"	"smallint"	16	0	2
6074	6073	"result"	"polygon"	0	0	0
6075	6073	"wkt"	"clob"	0	0	1
6076	6073	"srid"	"smallint"	16	0	2
6079	6078	"result"	"clob"	0	0	0
6080	6078	"g"	"geometry"	0	0	1
6083	6082	"result"	"double"	53	0	0
6084	6082	"g"	"geometry"	0	0	1
6087	6086	"result"	"double"	53	0	0
6088	6086	"g"	"geometry"	0	0	1
6091	6090	"result"	"point"	0	0	0
6092	6090	"x"	"double"	53	0	1
6093	6090	"y"	"double"	53	0	2
6096	6095	"result"	"int"	32	0	0
6097	6095	"g"	"geometry"	0	0	1
6100	6099	"result"	"int"	32	0	0
6101	6099	"g"	"geometry"	0	0	1
6104	6103	"result"	"int"	32	0	0
6105	6103	"g"	"geometry"	0	0	1
6108	6107	"result"	"geometry"	0	0	0
6109	6107	"g"	"geometry"	0	0	1
6112	6111	"result"	"boolean"	1	0	0
6113	6111	"g"	"geometry"	0	0	1
6116	6115	"result"	"boolean"	1	0	0
6117	6115	"g"	"geometry"	0	0	1
6120	6119	"result"	"geometry"	0	0	0
6121	6119	"g"	"geometry"	0	0	1
6124	6123	"result"	"boolean"	1	0	0
6125	6123	"a"	"geometry"	0	0	1
6126	6123	"b"	"geometry"	0	0	2
6129	6128	"result"	"boolean"	1	0	0
6130	6128	"a"	"geometry"	0	0	1
6131	6128	"b"	"geometry"	0	0	2
6134	6133	"result"	"boolean"	1	0	0
6135	6133	"a"	"geometry"	0	0	1
6136	6133	"b"	"geometry"	0	0	2
6139	6138	"result"	"boolean"	1	0	0
6140	6138	"a"	"geometry"	0	0	1
6141	6138	"b"	"geometry"	0	0	2
6144	6143	"result"	"boolean"	1	0	0
6145	6143	"a"	"geometry"	0	0	1
6146	6143	"b"	"geometry"	0	0	2
6149	6148	"result"	"boolean"	1	0	0
6150	6148	"a"	"geometry"	0	0	1
6151	6148	"b"	"geometry"	0	0	2
6154	6153	"result"	"boolean"	1	0	0
6155	6153	"a"	"geometry"	0	0	1
6156	6153	"b"	"geometry"	0	0	2
6159	6158	"result"	"boolean"	1	0	0
6160	6158	"a"	"geometry"	0	0	1
6161	6158	"b"	"geometry"	0	0	2
6164	6163	"result"	"boolean"	1	0	0
6165	6163	"a"	"geometry"	0	0	1
6166	6163	"b"	"geometry"	0	0	2
6167	6163	"pattern"	"clob"	0	0	3
6170	6169	"result"	"double"	53	0	0
6171	6169	"g"	"geometry"	0	0	1
6174	6173	"result"	"double"	53	0	0
6175	6173	"g"	"geometry"	0	0	1
6178	6177	"result"	"double"	53	0	0
6179	6177	"a"	"geometry"	0	0	1
6180	6177	"b"	"geometry"	0	0	2
6183	6182	"result"	"geometry"	0	0	0
6184	6182	"a"	"geometry"	0	0	1
6185	6182	"distance"	"double"	53	0	2
6188	6187	"result"	"geometry"	0	0	0
6189	6187	"a"	"geometry"	0	0	1
6192	6191	"result"	"geometry"	0	0	0
6193	6191	"a"	"geometry"	0	0	1
6194	6191	"b"	"geometry"	0	0	2
6197	6196	"result"	"geometry"	0	0	0
6198	6196	"a"	"geometry"	0	0	1
6199	6196	"b"	"geometry"	0	0	2
6202	6201	"result"	"geometry"	0	0	0
6203	6201	"a"	"geometry"	0	0	1
6204	6201	"b"	"geometry"	0	0	2
6207	6206	"result"	"geometry"	0	0	0
6208	6206	"a"	"geometry"	0	0	1
6209	6206	"b"	"geometry"	0	0	2
6213	6212	"result"	"json"	0	0	0
6214	6212	"js"	"json"	0	0	1
6215	6212	"name"	"clob"	0	0	2
6218	6217	"result"	"json"	0	0	0
6219	6217	"js"	"json"	0	0	1
6220	6217	"name"	"clob"	0	0	2
6223	6222	"result"	"json"	0	0	0
6224	6222	"js"	"json"	0	0	1
6225	6222	"e"	"clob"	0	0	2
6228	6227	"result"	"clob"	0	0	0
6229	6227	"js"	"json"	0	0	1
6230	6227	"e"	"clob"	0	0	2
6233	6232	"result"	"boolean"	1	0	0
6234	6232	"js"	"clob"	0	0	1
6237	6236	"result"	"boolean"	1	0	0
6238	6236	"js"	"clob"	0	0	1
6241	6240	"result"	"boolean"	1	0	0
6242	6240	"js"	"clob"	0	0	1
6245	6244	"result"	"int"	32	0	0
6246	6244	"js"	"json"	0	0	1
6249	6248	"result"	"double"	53	0	0
6250	6248	"chi2"	"double"	53	0	1
6251	6248	"datapoints"	"double"	53	0	2
6266	6265	"result"	"table"	6252	0	0
6296	6295	"result"	"bigint"	64	0	0
6297	6295	"nme"	"clob"	0	0	1
6298	6295	"i"	"bigint"	64	0	2
6299	6295	"d"	"bigint"	64	0	3
6302	6301	"result"	"bigint"	64	0	0
6303	6301	"tpe"	"clob"	0	0	1
6304	6301	"i"	"bigint"	64	0	2
6305	6301	"w"	"int"	32	0	3
6308	6307	"result"	"bigint"	64	0	0
6309	6307	"b"	"boolean"	1	0	1
6310	6307	"i"	"bigint"	64	0	2
6323	6322	"result"	"table"	6311	0	0
6363	6362	"tbl"	"clob"	0	0	0
6366	6365	"sch"	"clob"	0	0	0
6367	6365	"tbl"	"clob"	0	0	1
6370	6369	"sch"	"clob"	0	0	0
6371	6369	"tbl"	"clob"	0	0	1
6372	6369	"col"	"clob"	0	0	2
6375	6374	"sample"	"bigint"	64	0	0
6378	6377	"tbl"	"clob"	0	0	0
6379	6377	"sample"	"bigint"	64	0	1
6382	6381	"sch"	"clob"	0	0	0
6383	6381	"tbl"	"clob"	0	0	1
6384	6381	"sample"	"bigint"	64	0	2
6387	6386	"sch"	"clob"	0	0	0
6388	6386	"tbl"	"clob"	0	0	1
6389	6386	"col"	"clob"	0	0	2
6390	6386	"sample"	"bigint"	64	0	3
6393	6392	"result"	"clob"	0	0	0
6394	6392	"src"	"clob"	0	0	1
6397	6396	"result"	"smallint"	16	0	0
6398	6396	"one"	"tinyint"	8	0	1
6399	6396	"two"	"tinyint"	8	0	2
6402	6401	"result"	"int"	32	0	0
6403	6401	"one"	"smallint"	16	0	1
6404	6401	"two"	"smallint"	16	0	2
6407	6406	"result"	"bigint"	64	0	0
6408	6406	"one"	"int"	32	0	1
6409	6406	"two"	"int"	32	0	2
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."auths" (
	"id"      INTEGER,
	"name"    VARCHAR(1024),
	"grantor" INTEGER
);
COPY 3 RECORDS INTO "sys"."auths" FROM stdin USING DELIMITERS '\t','\n','"';
1	"public"	0
2	"sysadmin"	0
3	"monetdb"	0
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."connections" (
	"id"       INTEGER,
	"server"   CHAR(1024),
	"port"     INTEGER,
	"db"       CHAR(64),
	"db_alias" CHAR(1024),
	"user"     CHAR(1024),
	"password" CHAR(1024),
	"language" CHAR(1024)
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."db_user_info" (
	"name"           VARCHAR(1024),
	"fullname"       VARCHAR(2048),
	"default_schema" INTEGER
);
COPY 1 RECORDS INTO "sys"."db_user_info" FROM stdin USING DELIMITERS '\t','\n','"';
"monetdb"	"MonetDB Admin"	2000
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."dependencies" (
	"id"          INTEGER,
	"depend_id"   INTEGER,
	"depend_type" SMALLINT
);
COPY 200 RECORDS INTO "sys"."dependencies" FROM stdin USING DELIMITERS '\t','\n','"';
363	5143	7
364	5143	7
866	5143	7
363	5147	7
364	5147	7
866	5147	7
5279	5303	5
5293	5315	5
5279	5333	5
5293	5333	5
5357	5372	5
2003	5424	7
2001	5424	7
2002	5424	7
5115	5424	7
5124	5431	7
5122	5431	7
5123	5431	7
2005	5431	7
2001	5431	7
2003	5431	7
5077	5438	7
2043	5438	7
2042	5438	7
2045	5438	7
2044	5438	7
5077	5445	7
2084	5445	7
2082	5445	7
2086	5445	7
2079	5445	7
2075	5445	7
34	5445	7
5077	5452	7
2043	5452	7
2042	5452	7
2045	5452	7
2088	5452	7
2087	5452	7
2044	5452	7
2089	5452	7
2090	5452	7
5077	5459	7
2077	5459	7
2075	5459	7
2080	5459	7
2076	5459	7
2079	5459	7
5077	5466	7
2043	5466	7
2042	5466	7
2045	5466	7
2016	5466	7
2015	5466	7
2044	5466	7
2017	5466	7
5087	5473	7
2043	5473	7
2042	5473	7
2045	5473	7
2044	5473	7
5077	5473	7
5087	5480	7
2077	5480	7
2075	5480	7
2080	5480	7
2099	5480	7
2098	5480	7
2100	5480	7
2076	5480	7
2079	5480	7
124	5480	7
31	5480	7
30	5480	7
32	5480	7
5087	5487	7
2084	5487	7
2082	5487	7
2086	5487	7
2099	5487	7
2098	5487	7
2100	5487	7
2083	5487	7
2079	5487	7
2075	5487	7
34	5487	7
31	5487	7
30	5487	7
32	5487	7
5087	5494	7
2043	5494	7
2042	5494	7
2045	5494	7
2044	5494	7
2016	5494	7
2015	5494	7
2017	5494	7
5087	5501	7
2043	5501	7
2042	5501	7
2045	5501	7
2088	5501	7
2087	5501	7
2044	5501	7
2089	5501	7
5077	5508	7
2043	5508	7
2042	5508	7
2045	5508	7
2016	5508	7
2015	5508	7
2044	5508	7
2017	5508	7
5077	5515	7
2043	5515	7
2042	5515	7
2045	5515	7
2088	5515	7
2087	5515	7
2044	5515	7
2089	5515	7
2017	5522	7
2015	5522	7
2016	5522	7
2043	5522	7
2042	5522	7
2045	5522	7
2044	5522	7
2017	5529	7
2015	5529	7
2016	5529	7
2043	5529	7
2042	5529	7
2045	5529	7
2088	5529	7
2087	5529	7
2044	5529	7
2089	5529	7
2079	5536	7
2075	5536	7
2076	5536	7
2080	5536	7
5550	5559	5
111	5578	7
37	5578	7
35	5578	7
985	5578	7
971	5578	7
183	5578	7
982	5578	7
184	5578	7
32	5590	7
427	5590	7
113	5590	7
5585	5590	7
5639	5645	5
5650	5655	5
5686	5697	5
6265	6279	5
6281	6293	13
6291	6293	13
6282	6293	13
6283	6293	13
6284	6293	13
6285	6293	13
6286	6293	13
6287	6293	13
6288	6293	13
6289	6293	13
6290	6293	13
32	6295	7
185	6295	7
191	6295	7
110	6301	7
33	6301	7
184	6301	7
185	6301	7
32	6307	7
185	6307	7
6281	6322	7
6291	6322	7
6282	6322	7
6283	6322	7
6284	6322	7
6286	6322	7
6287	6322	7
6288	6322	7
6289	6322	7
6290	6322	7
6295	6322	7
6301	6322	7
6307	6322	7
6322	6334	5
6322	6343	5
47	6343	5
54	6343	5
50	6343	5
34	6343	5
32	6343	5
185	6343	5
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."functions" (
	"id"          INTEGER,
	"name"        VARCHAR(256),
	"func"        VARCHAR(8196),
	"mod"         VARCHAR(8196),
	"sql"         BOOLEAN,
	"type"        INTEGER,
	"side_effect" BOOLEAN,
	"schema_id"   INTEGER
);
COPY 1264 RECORDS INTO "sys"."functions" FROM stdin USING DELIMITERS '\t','\n','"';
28	"not_uniques"	"not_uniques"	"sql"	false	1	false	0
29	"not_uniques"	"not_uniques"	"sql"	false	1	false	0
30	"hash"	"hash"	"calc"	false	1	false	0
31	"rotate_xor_hash"	"rotate_xor_hash"	"calc"	false	1	false	0
32	"="	"="	"calc"	false	1	false	0
33	"<>"	"!="	"calc"	false	1	false	0
34	"isnull"	"isnil"	"calc"	false	1	false	0
35	">"	">"	"calc"	false	1	false	0
36	">="	">="	"calc"	false	1	false	0
37	"<"	"<"	"calc"	false	1	false	0
38	"<="	"<="	"calc"	false	1	false	0
42	"in"	"in"	"calc"	false	1	false	0
43	"identity"	"identity"	"calc"	false	1	false	0
44	"rowid"	"identity"	"calc"	false	1	false	0
45	"rowid"	"rowid"	"calc"	false	1	false	0
48	"sql_min"	"min"	"calc"	false	1	false	0
49	"sql_max"	"max"	"calc"	false	1	false	0
50	"ifthenelse"	"ifthenelse"	"calc"	false	1	false	0
68	"mod"	"%"	"calc"	false	1	false	0
69	"mod"	"%"	"calc"	false	1	false	0
70	"mod"	"%"	"calc"	false	1	false	0
71	"mod"	"%"	"calc"	false	1	false	0
72	"mod"	"%"	"calc"	false	1	false	0
73	"mod"	"%"	"calc"	false	1	false	0
74	"mod"	"%"	"calc"	false	1	false	0
75	"mod"	"%"	"calc"	false	1	false	0
76	"mod"	"%"	"calc"	false	1	false	0
77	"mod"	"%"	"calc"	false	1	false	0
78	"mod"	"%"	"calc"	false	1	false	0
79	"mod"	"%"	"calc"	false	1	false	0
87	"rank"	"rank_grp"	"calc"	false	1	false	0
88	"dense_rank"	"dense_rank_grp"	"calc"	false	1	false	0
89	"percent_rank"	"precent_rank_grp"	"calc"	false	1	false	0
90	"cume_dist"	"cume_dist_grp"	"calc"	false	1	false	0
91	"row_number"	"mark_grp"	"calc"	false	1	false	0
92	"rank"	"rank_grp"	"calc"	false	1	false	0
93	"dense_rank"	"dense_rank_grp"	"calc"	false	1	false	0
94	"percent_rank"	"precent_rank_grp"	"calc"	false	1	false	0
95	"cume_dist"	"cume_dist_grp"	"calc"	false	1	false	0
96	"row_number"	"mark_grp"	"calc"	false	1	false	0
97	"rank"	"rank_grp"	"calc"	false	1	false	0
98	"dense_rank"	"dense_rank_grp"	"calc"	false	1	false	0
99	"percent_rank"	"precent_rank_grp"	"calc"	false	1	false	0
100	"cume_dist"	"cume_dist_grp"	"calc"	false	1	false	0
101	"row_number"	"mark_grp"	"calc"	false	1	false	0
102	"lag"	"lag_grp"	"calc"	false	1	false	0
103	"lead"	"lead_grp"	"calc"	false	1	false	0
104	"lag"	"lag_grp"	"calc"	false	1	false	0
105	"lead"	"lead_grp"	"calc"	false	1	false	0
106	"lag"	"lag_grp"	"calc"	false	1	false	0
107	"lead"	"lead_grp"	"calc"	false	1	false	0
108	"lag"	"lag_grp"	"calc"	false	1	false	0
109	"lead"	"lead_grp"	"calc"	false	1	false	0
110	"and"	"and"	"calc"	false	1	false	0
111	"or"	"or"	"calc"	false	1	false	0
112	"xor"	"xor"	"calc"	false	1	false	0
113	"not"	"not"	"calc"	false	1	false	0
114	"sql_sub"	"-"	"calc"	false	1	false	0
115	"sql_add"	"+"	"calc"	false	1	false	0
116	"sql_mul"	"*"	"calc"	false	1	false	0
117	"sql_div"	"/"	"calc"	false	1	false	0
118	"bit_and"	"and"	"calc"	false	1	false	0
119	"bit_or"	"or"	"calc"	false	1	false	0
120	"bit_xor"	"xor"	"calc"	false	1	false	0
121	"bit_not"	"not"	"calc"	false	1	false	0
122	"left_shift"	"<<"	"calc"	false	1	false	0
123	"right_shift"	">>"	"calc"	false	1	false	0
124	"sql_neg"	"-"	"calc"	false	1	false	0
125	"abs"	"abs"	"calc"	false	1	false	0
126	"sign"	"sign"	"calc"	false	1	false	0
127	"scale_up"	"*"	"calc"	false	1	false	0
128	"scale_down"	"dec_round"	"sql"	false	1	false	0
129	"sql_sub"	"-"	"calc"	false	1	false	0
130	"sql_add"	"+"	"calc"	false	1	false	0
131	"sql_mul"	"*"	"calc"	false	1	false	0
132	"sql_div"	"/"	"calc"	false	1	false	0
133	"sql_sub"	"-"	"calc"	false	1	false	0
134	"sql_add"	"+"	"calc"	false	1	false	0
135	"sql_mul"	"*"	"calc"	false	1	false	0
136	"sql_div"	"/"	"calc"	false	1	false	0
137	"sql_sub"	"-"	"calc"	false	1	false	0
138	"sql_add"	"+"	"calc"	false	1	false	0
139	"sql_mul"	"*"	"calc"	false	1	false	0
140	"sql_div"	"/"	"calc"	false	1	false	0
141	"bit_and"	"and"	"calc"	false	1	false	0
142	"bit_or"	"or"	"calc"	false	1	false	0
143	"bit_xor"	"xor"	"calc"	false	1	false	0
144	"bit_not"	"not"	"calc"	false	1	false	0
145	"left_shift"	"<<"	"calc"	false	1	false	0
146	"right_shift"	">>"	"calc"	false	1	false	0
147	"sql_neg"	"-"	"calc"	false	1	false	0
148	"abs"	"abs"	"calc"	false	1	false	0
149	"sign"	"sign"	"calc"	false	1	false	0
150	"scale_up"	"*"	"calc"	false	1	false	0
151	"scale_down"	"dec_round"	"sql"	false	1	false	0
152	"sql_sub"	"-"	"calc"	false	1	false	0
153	"sql_add"	"+"	"calc"	false	1	false	0
154	"sql_mul"	"*"	"calc"	false	1	false	0
155	"sql_div"	"/"	"calc"	false	1	false	0
156	"sql_sub"	"-"	"calc"	false	1	false	0
157	"sql_add"	"+"	"calc"	false	1	false	0
158	"sql_mul"	"*"	"calc"	false	1	false	0
159	"sql_div"	"/"	"calc"	false	1	false	0
160	"sql_sub"	"-"	"calc"	false	1	false	0
161	"sql_add"	"+"	"calc"	false	1	false	0
162	"sql_mul"	"*"	"calc"	false	1	false	0
163	"sql_div"	"/"	"calc"	false	1	false	0
164	"bit_and"	"and"	"calc"	false	1	false	0
165	"bit_or"	"or"	"calc"	false	1	false	0
166	"bit_xor"	"xor"	"calc"	false	1	false	0
167	"bit_not"	"not"	"calc"	false	1	false	0
168	"left_shift"	"<<"	"calc"	false	1	false	0
169	"right_shift"	">>"	"calc"	false	1	false	0
170	"sql_neg"	"-"	"calc"	false	1	false	0
171	"abs"	"abs"	"calc"	false	1	false	0
172	"sign"	"sign"	"calc"	false	1	false	0
173	"scale_up"	"*"	"calc"	false	1	false	0
174	"scale_down"	"dec_round"	"sql"	false	1	false	0
175	"sql_sub"	"-"	"calc"	false	1	false	0
176	"sql_add"	"+"	"calc"	false	1	false	0
177	"sql_mul"	"*"	"calc"	false	1	false	0
178	"sql_div"	"/"	"calc"	false	1	false	0
179	"sql_sub"	"-"	"calc"	false	1	false	0
180	"sql_add"	"+"	"calc"	false	1	false	0
181	"sql_mul"	"*"	"calc"	false	1	false	0
182	"sql_div"	"/"	"calc"	false	1	false	0
183	"sql_sub"	"-"	"calc"	false	1	false	0
184	"sql_add"	"+"	"calc"	false	1	false	0
185	"sql_mul"	"*"	"calc"	false	1	false	0
186	"sql_div"	"/"	"calc"	false	1	false	0
187	"bit_and"	"and"	"calc"	false	1	false	0
188	"bit_or"	"or"	"calc"	false	1	false	0
189	"bit_xor"	"xor"	"calc"	false	1	false	0
190	"bit_not"	"not"	"calc"	false	1	false	0
191	"left_shift"	"<<"	"calc"	false	1	false	0
192	"right_shift"	">>"	"calc"	false	1	false	0
193	"sql_neg"	"-"	"calc"	false	1	false	0
194	"abs"	"abs"	"calc"	false	1	false	0
195	"sign"	"sign"	"calc"	false	1	false	0
196	"scale_up"	"*"	"calc"	false	1	false	0
197	"scale_down"	"dec_round"	"sql"	false	1	false	0
198	"sql_sub"	"-"	"calc"	false	1	false	0
199	"sql_add"	"+"	"calc"	false	1	false	0
200	"sql_mul"	"*"	"calc"	false	1	false	0
201	"sql_div"	"/"	"calc"	false	1	false	0
202	"sql_sub"	"-"	"calc"	false	1	false	0
203	"sql_add"	"+"	"calc"	false	1	false	0
204	"sql_mul"	"*"	"calc"	false	1	false	0
205	"sql_div"	"/"	"calc"	false	1	false	0
206	"sql_sub"	"-"	"calc"	false	1	false	0
207	"sql_add"	"+"	"calc"	false	1	false	0
208	"sql_mul"	"*"	"calc"	false	1	false	0
209	"sql_div"	"/"	"calc"	false	1	false	0
210	"bit_and"	"and"	"calc"	false	1	false	0
211	"bit_or"	"or"	"calc"	false	1	false	0
212	"bit_xor"	"xor"	"calc"	false	1	false	0
213	"bit_not"	"not"	"calc"	false	1	false	0
214	"left_shift"	"<<"	"calc"	false	1	false	0
215	"right_shift"	">>"	"calc"	false	1	false	0
216	"sql_neg"	"-"	"calc"	false	1	false	0
217	"abs"	"abs"	"calc"	false	1	false	0
218	"sign"	"sign"	"calc"	false	1	false	0
219	"scale_up"	"*"	"calc"	false	1	false	0
220	"scale_down"	"dec_round"	"sql"	false	1	false	0
221	"sql_sub"	"-"	"calc"	false	1	false	0
222	"sql_add"	"+"	"calc"	false	1	false	0
223	"sql_mul"	"*"	"calc"	false	1	false	0
224	"sql_div"	"/"	"calc"	false	1	false	0
225	"sql_sub"	"-"	"calc"	false	1	false	0
226	"sql_add"	"+"	"calc"	false	1	false	0
227	"sql_mul"	"*"	"calc"	false	1	false	0
228	"sql_div"	"/"	"calc"	false	1	false	0
229	"sql_sub"	"-"	"calc"	false	1	false	0
230	"sql_add"	"+"	"calc"	false	1	false	0
231	"sql_mul"	"*"	"calc"	false	1	false	0
232	"sql_div"	"/"	"calc"	false	1	false	0
233	"bit_and"	"and"	"calc"	false	1	false	0
234	"bit_or"	"or"	"calc"	false	1	false	0
235	"bit_xor"	"xor"	"calc"	false	1	false	0
236	"bit_not"	"not"	"calc"	false	1	false	0
237	"left_shift"	"<<"	"calc"	false	1	false	0
238	"right_shift"	">>"	"calc"	false	1	false	0
239	"sql_neg"	"-"	"calc"	false	1	false	0
240	"abs"	"abs"	"calc"	false	1	false	0
241	"sign"	"sign"	"calc"	false	1	false	0
242	"scale_up"	"*"	"calc"	false	1	false	0
243	"scale_down"	"dec_round"	"sql"	false	1	false	0
244	"sql_sub"	"-"	"calc"	false	1	false	0
245	"sql_add"	"+"	"calc"	false	1	false	0
246	"sql_mul"	"*"	"calc"	false	1	false	0
247	"sql_div"	"/"	"calc"	false	1	false	0
248	"sql_sub"	"-"	"calc"	false	1	false	0
249	"sql_add"	"+"	"calc"	false	1	false	0
250	"sql_mul"	"*"	"calc"	false	1	false	0
251	"sql_div"	"/"	"calc"	false	1	false	0
252	"sql_sub"	"-"	"calc"	false	1	false	0
253	"sql_add"	"+"	"calc"	false	1	false	0
254	"sql_mul"	"*"	"calc"	false	1	false	0
255	"sql_div"	"/"	"calc"	false	1	false	0
256	"bit_and"	"and"	"calc"	false	1	false	0
257	"bit_or"	"or"	"calc"	false	1	false	0
258	"bit_xor"	"xor"	"calc"	false	1	false	0
259	"bit_not"	"not"	"calc"	false	1	false	0
260	"left_shift"	"<<"	"calc"	false	1	false	0
261	"right_shift"	">>"	"calc"	false	1	false	0
262	"sql_neg"	"-"	"calc"	false	1	false	0
263	"abs"	"abs"	"calc"	false	1	false	0
264	"sign"	"sign"	"calc"	false	1	false	0
265	"scale_up"	"*"	"calc"	false	1	false	0
266	"scale_down"	"dec_round"	"sql"	false	1	false	0
267	"sql_sub"	"-"	"calc"	false	1	false	0
268	"sql_add"	"+"	"calc"	false	1	false	0
269	"sql_mul"	"*"	"calc"	false	1	false	0
270	"sql_div"	"/"	"calc"	false	1	false	0
271	"sql_sub"	"-"	"calc"	false	1	false	0
272	"sql_add"	"+"	"calc"	false	1	false	0
273	"sql_mul"	"*"	"calc"	false	1	false	0
274	"sql_div"	"/"	"calc"	false	1	false	0
275	"sql_sub"	"-"	"calc"	false	1	false	0
276	"sql_add"	"+"	"calc"	false	1	false	0
277	"sql_mul"	"*"	"calc"	false	1	false	0
278	"sql_div"	"/"	"calc"	false	1	false	0
279	"bit_and"	"and"	"calc"	false	1	false	0
280	"bit_or"	"or"	"calc"	false	1	false	0
281	"bit_xor"	"xor"	"calc"	false	1	false	0
282	"bit_not"	"not"	"calc"	false	1	false	0
283	"left_shift"	"<<"	"calc"	false	1	false	0
284	"right_shift"	">>"	"calc"	false	1	false	0
285	"sql_neg"	"-"	"calc"	false	1	false	0
286	"abs"	"abs"	"calc"	false	1	false	0
287	"sign"	"sign"	"calc"	false	1	false	0
288	"scale_up"	"*"	"calc"	false	1	false	0
289	"scale_down"	"dec_round"	"sql"	false	1	false	0
290	"sql_sub"	"-"	"calc"	false	1	false	0
291	"sql_add"	"+"	"calc"	false	1	false	0
292	"sql_mul"	"*"	"calc"	false	1	false	0
293	"sql_div"	"/"	"calc"	false	1	false	0
294	"sql_sub"	"-"	"calc"	false	1	false	0
295	"sql_add"	"+"	"calc"	false	1	false	0
296	"sql_mul"	"*"	"calc"	false	1	false	0
297	"sql_div"	"/"	"calc"	false	1	false	0
298	"sql_sub"	"-"	"calc"	false	1	false	0
299	"sql_add"	"+"	"calc"	false	1	false	0
300	"sql_mul"	"*"	"calc"	false	1	false	0
301	"sql_div"	"/"	"calc"	false	1	false	0
302	"bit_and"	"and"	"calc"	false	1	false	0
303	"bit_or"	"or"	"calc"	false	1	false	0
304	"bit_xor"	"xor"	"calc"	false	1	false	0
305	"bit_not"	"not"	"calc"	false	1	false	0
306	"left_shift"	"<<"	"calc"	false	1	false	0
307	"right_shift"	">>"	"calc"	false	1	false	0
308	"sql_neg"	"-"	"calc"	false	1	false	0
309	"abs"	"abs"	"calc"	false	1	false	0
310	"sign"	"sign"	"calc"	false	1	false	0
311	"scale_up"	"*"	"calc"	false	1	false	0
312	"scale_down"	"dec_round"	"sql"	false	1	false	0
313	"sql_sub"	"-"	"calc"	false	1	false	0
314	"sql_add"	"+"	"calc"	false	1	false	0
315	"sql_mul"	"*"	"calc"	false	1	false	0
316	"sql_div"	"/"	"calc"	false	1	false	0
317	"sql_sub"	"-"	"calc"	false	1	false	0
318	"sql_add"	"+"	"calc"	false	1	false	0
319	"sql_mul"	"*"	"calc"	false	1	false	0
320	"sql_div"	"/"	"calc"	false	1	false	0
321	"sql_sub"	"-"	"calc"	false	1	false	0
322	"sql_add"	"+"	"calc"	false	1	false	0
323	"sql_mul"	"*"	"calc"	false	1	false	0
324	"sql_div"	"/"	"calc"	false	1	false	0
325	"bit_and"	"and"	"calc"	false	1	false	0
326	"bit_or"	"or"	"calc"	false	1	false	0
327	"bit_xor"	"xor"	"calc"	false	1	false	0
328	"bit_not"	"not"	"calc"	false	1	false	0
329	"left_shift"	"<<"	"calc"	false	1	false	0
330	"right_shift"	">>"	"calc"	false	1	false	0
331	"sql_neg"	"-"	"calc"	false	1	false	0
332	"abs"	"abs"	"calc"	false	1	false	0
333	"sign"	"sign"	"calc"	false	1	false	0
334	"scale_up"	"*"	"calc"	false	1	false	0
335	"scale_down"	"dec_round"	"sql"	false	1	false	0
336	"sql_sub"	"-"	"calc"	false	1	false	0
337	"sql_add"	"+"	"calc"	false	1	false	0
338	"sql_mul"	"*"	"calc"	false	1	false	0
339	"sql_div"	"/"	"calc"	false	1	false	0
340	"sql_sub"	"-"	"calc"	false	1	false	0
341	"sql_add"	"+"	"calc"	false	1	false	0
342	"sql_mul"	"*"	"calc"	false	1	false	0
343	"sql_div"	"/"	"calc"	false	1	false	0
344	"sql_sub"	"-"	"calc"	false	1	false	0
345	"sql_add"	"+"	"calc"	false	1	false	0
346	"sql_mul"	"*"	"calc"	false	1	false	0
347	"sql_div"	"/"	"calc"	false	1	false	0
348	"sql_neg"	"-"	"calc"	false	1	false	0
349	"abs"	"abs"	"calc"	false	1	false	0
350	"sign"	"sign"	"calc"	false	1	false	0
351	"scale_up"	"*"	"calc"	false	1	false	0
352	"scale_down"	"dec_round"	"sql"	false	1	false	0
353	"sql_sub"	"-"	"calc"	false	1	false	0
354	"sql_add"	"+"	"calc"	false	1	false	0
355	"sql_mul"	"*"	"calc"	false	1	false	0
356	"sql_div"	"/"	"calc"	false	1	false	0
357	"sql_sub"	"-"	"calc"	false	1	false	0
358	"sql_add"	"+"	"calc"	false	1	false	0
359	"sql_mul"	"*"	"calc"	false	1	false	0
360	"sql_div"	"/"	"calc"	false	1	false	0
361	"sql_sub"	"-"	"calc"	false	1	false	0
362	"sql_add"	"+"	"calc"	false	1	false	0
363	"sql_mul"	"*"	"calc"	false	1	false	0
364	"sql_div"	"/"	"calc"	false	1	false	0
365	"sql_neg"	"-"	"calc"	false	1	false	0
366	"abs"	"abs"	"calc"	false	1	false	0
367	"sign"	"sign"	"calc"	false	1	false	0
368	"scale_up"	"*"	"calc"	false	1	false	0
369	"scale_down"	"dec_round"	"sql"	false	1	false	0
370	"sql_sub"	"-"	"calc"	false	1	false	0
371	"sql_add"	"+"	"calc"	false	1	false	0
372	"sql_mul"	"*"	"calc"	false	1	false	0
373	"sql_div"	"/"	"calc"	false	1	false	0
374	"sql_sub"	"-"	"calc"	false	1	false	0
375	"sql_add"	"+"	"calc"	false	1	false	0
376	"sql_mul"	"*"	"calc"	false	1	false	0
377	"sql_div"	"/"	"calc"	false	1	false	0
378	"sql_sub"	"-"	"calc"	false	1	false	0
379	"sql_add"	"+"	"calc"	false	1	false	0
380	"sql_mul"	"*"	"calc"	false	1	false	0
381	"sql_div"	"/"	"calc"	false	1	false	0
382	"sql_neg"	"-"	"calc"	false	1	false	0
383	"abs"	"abs"	"calc"	false	1	false	0
384	"sign"	"sign"	"calc"	false	1	false	0
385	"scale_up"	"*"	"calc"	false	1	false	0
386	"scale_down"	"dec_round"	"sql"	false	1	false	0
387	"sql_sub"	"-"	"calc"	false	1	false	0
388	"sql_add"	"+"	"calc"	false	1	false	0
389	"sql_mul"	"*"	"calc"	false	1	false	0
390	"sql_div"	"/"	"calc"	false	1	false	0
391	"sql_neg"	"-"	"calc"	false	1	false	0
392	"abs"	"abs"	"calc"	false	1	false	0
393	"sign"	"sign"	"calc"	false	1	false	0
394	"scale_up"	"*"	"calc"	false	1	false	0
395	"scale_down"	"dec_round"	"sql"	false	1	false	0
396	"sql_mul"	"*"	"calc"	false	1	false	0
397	"sql_mul"	"*"	"calc"	false	1	false	0
398	"sql_mul"	"*"	"calc"	false	1	false	0
399	"sql_mul"	"*"	"calc"	false	1	false	0
400	"sql_mul"	"*"	"calc"	false	1	false	0
401	"sql_mul"	"*"	"calc"	false	1	false	0
402	"sql_mul"	"*"	"calc"	false	1	false	0
403	"sql_mul"	"*"	"calc"	false	1	false	0
404	"sql_mul"	"*"	"calc"	false	1	false	0
405	"sql_mul"	"*"	"calc"	false	1	false	0
406	"sql_mul"	"*"	"calc"	false	1	false	0
407	"sql_mul"	"*"	"calc"	false	1	false	0
408	"sql_mul"	"*"	"calc"	false	1	false	0
409	"sql_mul"	"*"	"calc"	false	1	false	0
410	"sql_mul"	"*"	"calc"	false	1	false	0
411	"sql_mul"	"*"	"calc"	false	1	false	0
412	"sql_mul"	"*"	"calc"	false	1	false	0
413	"sql_mul"	"*"	"calc"	false	1	false	0
414	"sql_mul"	"*"	"calc"	false	1	false	0
415	"sql_mul"	"*"	"calc"	false	1	false	0
416	"sql_mul"	"*"	"calc"	false	1	false	0
417	"sql_mul"	"*"	"calc"	false	1	false	0
418	"sql_mul"	"*"	"calc"	false	1	false	0
419	"sql_mul"	"*"	"calc"	false	1	false	0
420	"sql_mul"	"*"	"calc"	false	1	false	0
421	"sql_mul"	"*"	"calc"	false	1	false	0
422	"round"	"round"	"sql"	false	1	false	0
423	"round"	"round"	"sql"	false	1	false	0
424	"round"	"round"	"sql"	false	1	false	0
425	"round"	"round"	"sql"	false	1	false	0
426	"round"	"round"	"sql"	false	1	false	0
427	"round"	"round"	"sql"	false	1	false	0
428	"scale_up"	"*"	"calc"	false	1	false	0
429	"scale_up"	"*"	"calc"	false	1	false	0
430	"scale_up"	"*"	"calc"	false	1	false	0
431	"scale_up"	"*"	"calc"	false	1	false	0
432	"scale_up"	"*"	"calc"	false	1	false	0
433	"scale_up"	"*"	"calc"	false	1	false	0
434	"scale_up"	"*"	"calc"	false	1	false	0
435	"scale_up"	"*"	"calc"	false	1	false	0
436	"scale_up"	"*"	"calc"	false	1	false	0
437	"scale_up"	"*"	"calc"	false	1	false	0
438	"scale_up"	"*"	"calc"	false	1	false	0
439	"scale_up"	"*"	"calc"	false	1	false	0
440	"scale_up"	"*"	"calc"	false	1	false	0
441	"scale_up"	"*"	"calc"	false	1	false	0
442	"scale_up"	"*"	"calc"	false	1	false	0
443	"scale_up"	"*"	"calc"	false	1	false	0
444	"scale_up"	"*"	"calc"	false	1	false	0
445	"scale_up"	"*"	"calc"	false	1	false	0
446	"scale_up"	"*"	"calc"	false	1	false	0
447	"scale_up"	"*"	"calc"	false	1	false	0
448	"scale_up"	"*"	"calc"	false	1	false	0
449	"scale_up"	"*"	"calc"	false	1	false	0
450	"scale_up"	"*"	"calc"	false	1	false	0
451	"scale_up"	"*"	"calc"	false	1	false	0
452	"scale_up"	"*"	"calc"	false	1	false	0
453	"scale_up"	"*"	"calc"	false	1	false	0
454	"scale_up"	"*"	"calc"	false	1	false	0
455	"scale_up"	"*"	"calc"	false	1	false	0
456	"scale_up"	"*"	"calc"	false	1	false	0
457	"scale_up"	"*"	"calc"	false	1	false	0
458	"scale_up"	"*"	"calc"	false	1	false	0
459	"scale_up"	"*"	"calc"	false	1	false	0
460	"scale_up"	"*"	"calc"	false	1	false	0
461	"scale_up"	"*"	"calc"	false	1	false	0
462	"scale_up"	"*"	"calc"	false	1	false	0
463	"scale_up"	"*"	"calc"	false	1	false	0
464	"scale_up"	"*"	"calc"	false	1	false	0
465	"scale_up"	"*"	"calc"	false	1	false	0
466	"scale_up"	"*"	"calc"	false	1	false	0
467	"scale_up"	"*"	"calc"	false	1	false	0
468	"scale_up"	"*"	"calc"	false	1	false	0
469	"scale_up"	"*"	"calc"	false	1	false	0
470	"scale_up"	"*"	"calc"	false	1	false	0
471	"scale_up"	"*"	"calc"	false	1	false	0
472	"scale_up"	"*"	"calc"	false	1	false	0
473	"scale_up"	"*"	"calc"	false	1	false	0
474	"scale_up"	"*"	"calc"	false	1	false	0
475	"scale_up"	"*"	"calc"	false	1	false	0
476	"scale_up"	"*"	"calc"	false	1	false	0
477	"scale_up"	"*"	"calc"	false	1	false	0
478	"scale_up"	"*"	"calc"	false	1	false	0
479	"scale_up"	"*"	"calc"	false	1	false	0
480	"scale_up"	"*"	"calc"	false	1	false	0
481	"scale_up"	"*"	"calc"	false	1	false	0
482	"scale_up"	"*"	"calc"	false	1	false	0
483	"scale_up"	"*"	"calc"	false	1	false	0
484	"scale_up"	"*"	"calc"	false	1	false	0
485	"scale_up"	"*"	"calc"	false	1	false	0
486	"scale_up"	"*"	"calc"	false	1	false	0
487	"scale_up"	"*"	"calc"	false	1	false	0
488	"scale_up"	"*"	"calc"	false	1	false	0
489	"scale_up"	"*"	"calc"	false	1	false	0
490	"scale_up"	"*"	"calc"	false	1	false	0
491	"scale_up"	"*"	"calc"	false	1	false	0
492	"scale_up"	"*"	"calc"	false	1	false	0
493	"scale_up"	"*"	"calc"	false	1	false	0
494	"scale_up"	"*"	"calc"	false	1	false	0
495	"scale_up"	"*"	"calc"	false	1	false	0
496	"scale_up"	"*"	"calc"	false	1	false	0
497	"scale_up"	"*"	"calc"	false	1	false	0
498	"scale_up"	"*"	"calc"	false	1	false	0
499	"scale_up"	"*"	"calc"	false	1	false	0
500	"scale_up"	"*"	"calc"	false	1	false	0
501	"scale_up"	"*"	"calc"	false	1	false	0
502	"scale_up"	"*"	"calc"	false	1	false	0
503	"scale_up"	"*"	"calc"	false	1	false	0
504	"scale_up"	"*"	"calc"	false	1	false	0
505	"scale_up"	"*"	"calc"	false	1	false	0
506	"scale_up"	"*"	"calc"	false	1	false	0
507	"scale_up"	"*"	"calc"	false	1	false	0
508	"scale_up"	"*"	"calc"	false	1	false	0
509	"scale_up"	"*"	"calc"	false	1	false	0
510	"scale_up"	"*"	"calc"	false	1	false	0
511	"scale_up"	"*"	"calc"	false	1	false	0
512	"scale_up"	"*"	"calc"	false	1	false	0
513	"scale_up"	"*"	"calc"	false	1	false	0
514	"scale_up"	"*"	"calc"	false	1	false	0
515	"scale_up"	"*"	"calc"	false	1	false	0
516	"scale_up"	"*"	"calc"	false	1	false	0
517	"scale_up"	"*"	"calc"	false	1	false	0
518	"scale_up"	"*"	"calc"	false	1	false	0
519	"scale_up"	"*"	"calc"	false	1	false	0
520	"scale_up"	"*"	"calc"	false	1	false	0
521	"scale_up"	"*"	"calc"	false	1	false	0
522	"scale_up"	"*"	"calc"	false	1	false	0
523	"scale_up"	"*"	"calc"	false	1	false	0
524	"scale_up"	"*"	"calc"	false	1	false	0
525	"scale_up"	"*"	"calc"	false	1	false	0
526	"scale_up"	"*"	"calc"	false	1	false	0
527	"scale_up"	"*"	"calc"	false	1	false	0
528	"scale_up"	"*"	"calc"	false	1	false	0
529	"scale_up"	"*"	"calc"	false	1	false	0
530	"scale_up"	"*"	"calc"	false	1	false	0
531	"scale_up"	"*"	"calc"	false	1	false	0
532	"scale_up"	"*"	"calc"	false	1	false	0
533	"scale_up"	"*"	"calc"	false	1	false	0
534	"scale_up"	"*"	"calc"	false	1	false	0
535	"scale_up"	"*"	"calc"	false	1	false	0
536	"scale_up"	"*"	"calc"	false	1	false	0
537	"scale_up"	"*"	"calc"	false	1	false	0
538	"scale_up"	"*"	"calc"	false	1	false	0
539	"scale_up"	"*"	"calc"	false	1	false	0
540	"scale_up"	"*"	"calc"	false	1	false	0
541	"scale_up"	"*"	"calc"	false	1	false	0
542	"scale_up"	"*"	"calc"	false	1	false	0
543	"scale_up"	"*"	"calc"	false	1	false	0
544	"scale_up"	"*"	"calc"	false	1	false	0
545	"scale_up"	"*"	"calc"	false	1	false	0
546	"scale_up"	"*"	"calc"	false	1	false	0
547	"scale_up"	"*"	"calc"	false	1	false	0
548	"scale_up"	"*"	"calc"	false	1	false	0
549	"scale_up"	"*"	"calc"	false	1	false	0
550	"scale_up"	"*"	"calc"	false	1	false	0
551	"scale_up"	"*"	"calc"	false	1	false	0
552	"scale_up"	"*"	"calc"	false	1	false	0
553	"scale_up"	"*"	"calc"	false	1	false	0
554	"scale_up"	"*"	"calc"	false	1	false	0
555	"scale_up"	"*"	"calc"	false	1	false	0
556	"scale_up"	"*"	"calc"	false	1	false	0
557	"scale_up"	"*"	"calc"	false	1	false	0
558	"scale_up"	"*"	"calc"	false	1	false	0
559	"scale_up"	"*"	"calc"	false	1	false	0
560	"scale_up"	"*"	"calc"	false	1	false	0
561	"scale_up"	"*"	"calc"	false	1	false	0
562	"scale_up"	"*"	"calc"	false	1	false	0
563	"scale_up"	"*"	"calc"	false	1	false	0
564	"scale_up"	"*"	"calc"	false	1	false	0
565	"scale_up"	"*"	"calc"	false	1	false	0
566	"scale_up"	"*"	"calc"	false	1	false	0
567	"scale_up"	"*"	"calc"	false	1	false	0
568	"scale_up"	"*"	"calc"	false	1	false	0
569	"scale_up"	"*"	"calc"	false	1	false	0
570	"scale_up"	"*"	"calc"	false	1	false	0
571	"scale_up"	"*"	"calc"	false	1	false	0
572	"scale_up"	"*"	"calc"	false	1	false	0
573	"scale_up"	"*"	"calc"	false	1	false	0
574	"scale_up"	"*"	"calc"	false	1	false	0
575	"scale_up"	"*"	"calc"	false	1	false	0
576	"scale_up"	"*"	"calc"	false	1	false	0
577	"scale_up"	"*"	"calc"	false	1	false	0
578	"scale_up"	"*"	"calc"	false	1	false	0
579	"scale_up"	"*"	"calc"	false	1	false	0
580	"scale_up"	"*"	"calc"	false	1	false	0
581	"scale_up"	"*"	"calc"	false	1	false	0
582	"scale_up"	"*"	"calc"	false	1	false	0
583	"scale_up"	"*"	"calc"	false	1	false	0
584	"scale_up"	"*"	"calc"	false	1	false	0
585	"scale_up"	"*"	"calc"	false	1	false	0
586	"scale_up"	"*"	"calc"	false	1	false	0
587	"scale_up"	"*"	"calc"	false	1	false	0
588	"scale_up"	"*"	"calc"	false	1	false	0
589	"scale_up"	"*"	"calc"	false	1	false	0
590	"scale_up"	"*"	"calc"	false	1	false	0
591	"scale_up"	"*"	"calc"	false	1	false	0
592	"scale_up"	"*"	"calc"	false	1	false	0
593	"scale_up"	"*"	"calc"	false	1	false	0
594	"scale_up"	"*"	"calc"	false	1	false	0
595	"scale_up"	"*"	"calc"	false	1	false	0
596	"scale_up"	"*"	"calc"	false	1	false	0
597	"scale_up"	"*"	"calc"	false	1	false	0
598	"scale_up"	"*"	"calc"	false	1	false	0
599	"scale_up"	"*"	"calc"	false	1	false	0
600	"scale_up"	"*"	"calc"	false	1	false	0
601	"scale_up"	"*"	"calc"	false	1	false	0
602	"scale_up"	"*"	"calc"	false	1	false	0
603	"scale_up"	"*"	"calc"	false	1	false	0
604	"scale_up"	"*"	"calc"	false	1	false	0
605	"scale_up"	"*"	"calc"	false	1	false	0
606	"scale_up"	"*"	"calc"	false	1	false	0
607	"scale_up"	"*"	"calc"	false	1	false	0
608	"scale_up"	"*"	"calc"	false	1	false	0
609	"scale_up"	"*"	"calc"	false	1	false	0
610	"scale_up"	"*"	"calc"	false	1	false	0
611	"scale_up"	"*"	"calc"	false	1	false	0
612	"scale_up"	"*"	"calc"	false	1	false	0
613	"scale_up"	"*"	"calc"	false	1	false	0
614	"scale_up"	"*"	"calc"	false	1	false	0
615	"scale_up"	"*"	"calc"	false	1	false	0
616	"scale_up"	"*"	"calc"	false	1	false	0
617	"scale_up"	"*"	"calc"	false	1	false	0
618	"scale_up"	"*"	"calc"	false	1	false	0
619	"scale_up"	"*"	"calc"	false	1	false	0
620	"scale_up"	"*"	"calc"	false	1	false	0
621	"scale_up"	"*"	"calc"	false	1	false	0
622	"scale_up"	"*"	"calc"	false	1	false	0
623	"scale_up"	"*"	"calc"	false	1	false	0
624	"scale_up"	"*"	"calc"	false	1	false	0
625	"scale_up"	"*"	"calc"	false	1	false	0
626	"scale_up"	"*"	"calc"	false	1	false	0
627	"scale_up"	"*"	"calc"	false	1	false	0
628	"scale_up"	"*"	"calc"	false	1	false	0
629	"scale_up"	"*"	"calc"	false	1	false	0
630	"scale_up"	"*"	"calc"	false	1	false	0
631	"scale_up"	"*"	"calc"	false	1	false	0
632	"scale_up"	"*"	"calc"	false	1	false	0
633	"scale_up"	"*"	"calc"	false	1	false	0
634	"scale_up"	"*"	"calc"	false	1	false	0
635	"scale_up"	"*"	"calc"	false	1	false	0
636	"scale_up"	"*"	"calc"	false	1	false	0
637	"scale_up"	"*"	"calc"	false	1	false	0
638	"scale_up"	"*"	"calc"	false	1	false	0
639	"scale_up"	"*"	"calc"	false	1	false	0
640	"scale_up"	"*"	"calc"	false	1	false	0
641	"scale_up"	"*"	"calc"	false	1	false	0
642	"scale_up"	"*"	"calc"	false	1	false	0
643	"scale_up"	"*"	"calc"	false	1	false	0
644	"scale_up"	"*"	"calc"	false	1	false	0
645	"scale_up"	"*"	"calc"	false	1	false	0
646	"scale_up"	"*"	"calc"	false	1	false	0
647	"scale_up"	"*"	"calc"	false	1	false	0
648	"scale_up"	"*"	"calc"	false	1	false	0
649	"scale_up"	"*"	"calc"	false	1	false	0
650	"scale_up"	"*"	"calc"	false	1	false	0
651	"scale_up"	"*"	"calc"	false	1	false	0
652	"scale_up"	"*"	"calc"	false	1	false	0
653	"scale_up"	"*"	"calc"	false	1	false	0
654	"scale_up"	"*"	"calc"	false	1	false	0
655	"scale_up"	"*"	"calc"	false	1	false	0
656	"scale_up"	"*"	"calc"	false	1	false	0
657	"scale_up"	"*"	"calc"	false	1	false	0
658	"scale_up"	"*"	"calc"	false	1	false	0
659	"scale_up"	"*"	"calc"	false	1	false	0
660	"scale_up"	"*"	"calc"	false	1	false	0
661	"scale_up"	"*"	"calc"	false	1	false	0
662	"scale_up"	"*"	"calc"	false	1	false	0
663	"scale_up"	"*"	"calc"	false	1	false	0
664	"scale_up"	"*"	"calc"	false	1	false	0
665	"scale_up"	"*"	"calc"	false	1	false	0
666	"scale_up"	"*"	"calc"	false	1	false	0
667	"scale_up"	"*"	"calc"	false	1	false	0
668	"scale_up"	"*"	"calc"	false	1	false	0
669	"scale_up"	"*"	"calc"	false	1	false	0
670	"scale_up"	"*"	"calc"	false	1	false	0
671	"scale_up"	"*"	"calc"	false	1	false	0
672	"scale_up"	"*"	"calc"	false	1	false	0
673	"scale_up"	"*"	"calc"	false	1	false	0
674	"scale_up"	"*"	"calc"	false	1	false	0
675	"scale_up"	"*"	"calc"	false	1	false	0
676	"scale_up"	"*"	"calc"	false	1	false	0
677	"scale_up"	"*"	"calc"	false	1	false	0
678	"scale_up"	"*"	"calc"	false	1	false	0
679	"scale_up"	"*"	"calc"	false	1	false	0
680	"scale_up"	"*"	"calc"	false	1	false	0
681	"scale_up"	"*"	"calc"	false	1	false	0
682	"scale_up"	"*"	"calc"	false	1	false	0
683	"scale_up"	"*"	"calc"	false	1	false	0
684	"scale_up"	"*"	"calc"	false	1	false	0
685	"scale_up"	"*"	"calc"	false	1	false	0
686	"scale_up"	"*"	"calc"	false	1	false	0
687	"scale_up"	"*"	"calc"	false	1	false	0
688	"scale_up"	"*"	"calc"	false	1	false	0
689	"scale_up"	"*"	"calc"	false	1	false	0
690	"scale_up"	"*"	"calc"	false	1	false	0
691	"scale_up"	"*"	"calc"	false	1	false	0
692	"scale_up"	"*"	"calc"	false	1	false	0
693	"scale_up"	"*"	"calc"	false	1	false	0
694	"scale_up"	"*"	"calc"	false	1	false	0
695	"scale_up"	"*"	"calc"	false	1	false	0
696	"scale_up"	"*"	"calc"	false	1	false	0
697	"scale_up"	"*"	"calc"	false	1	false	0
698	"scale_up"	"*"	"calc"	false	1	false	0
699	"scale_up"	"*"	"calc"	false	1	false	0
700	"scale_up"	"*"	"calc"	false	1	false	0
701	"scale_up"	"*"	"calc"	false	1	false	0
702	"scale_up"	"*"	"calc"	false	1	false	0
703	"scale_up"	"*"	"calc"	false	1	false	0
704	"scale_up"	"*"	"calc"	false	1	false	0
705	"scale_up"	"*"	"calc"	false	1	false	0
706	"scale_up"	"*"	"calc"	false	1	false	0
707	"scale_up"	"*"	"calc"	false	1	false	0
708	"scale_up"	"*"	"calc"	false	1	false	0
709	"scale_up"	"*"	"calc"	false	1	false	0
710	"scale_up"	"*"	"calc"	false	1	false	0
711	"scale_up"	"*"	"calc"	false	1	false	0
712	"scale_up"	"*"	"calc"	false	1	false	0
713	"scale_up"	"*"	"calc"	false	1	false	0
714	"scale_up"	"*"	"calc"	false	1	false	0
715	"scale_up"	"*"	"calc"	false	1	false	0
716	"scale_up"	"*"	"calc"	false	1	false	0
717	"scale_up"	"*"	"calc"	false	1	false	0
718	"scale_up"	"*"	"calc"	false	1	false	0
719	"scale_up"	"*"	"calc"	false	1	false	0
720	"scale_up"	"*"	"calc"	false	1	false	0
721	"scale_up"	"*"	"calc"	false	1	false	0
722	"scale_up"	"*"	"calc"	false	1	false	0
723	"scale_up"	"*"	"calc"	false	1	false	0
724	"scale_up"	"*"	"calc"	false	1	false	0
725	"scale_up"	"*"	"calc"	false	1	false	0
726	"scale_up"	"*"	"calc"	false	1	false	0
727	"scale_up"	"*"	"calc"	false	1	false	0
728	"scale_up"	"*"	"calc"	false	1	false	0
729	"scale_up"	"*"	"calc"	false	1	false	0
730	"scale_up"	"*"	"calc"	false	1	false	0
731	"scale_up"	"*"	"calc"	false	1	false	0
732	"scale_up"	"*"	"calc"	false	1	false	0
733	"scale_up"	"*"	"calc"	false	1	false	0
734	"scale_up"	"*"	"calc"	false	1	false	0
735	"scale_up"	"*"	"calc"	false	1	false	0
736	"scale_up"	"*"	"calc"	false	1	false	0
737	"scale_up"	"*"	"calc"	false	1	false	0
738	"scale_up"	"*"	"calc"	false	1	false	0
739	"scale_up"	"*"	"calc"	false	1	false	0
740	"scale_up"	"*"	"calc"	false	1	false	0
741	"scale_up"	"*"	"calc"	false	1	false	0
742	"scale_up"	"*"	"calc"	false	1	false	0
743	"scale_up"	"*"	"calc"	false	1	false	0
744	"scale_up"	"*"	"calc"	false	1	false	0
745	"scale_up"	"*"	"calc"	false	1	false	0
746	"scale_up"	"*"	"calc"	false	1	false	0
747	"scale_up"	"*"	"calc"	false	1	false	0
748	"scale_up"	"*"	"calc"	false	1	false	0
749	"scale_up"	"*"	"calc"	false	1	false	0
750	"scale_up"	"*"	"calc"	false	1	false	0
751	"scale_up"	"*"	"calc"	false	1	false	0
752	"scale_up"	"*"	"calc"	false	1	false	0
753	"scale_up"	"*"	"calc"	false	1	false	0
754	"scale_up"	"*"	"calc"	false	1	false	0
755	"scale_up"	"*"	"calc"	false	1	false	0
756	"scale_up"	"*"	"calc"	false	1	false	0
757	"scale_up"	"*"	"calc"	false	1	false	0
758	"scale_up"	"*"	"calc"	false	1	false	0
759	"scale_up"	"*"	"calc"	false	1	false	0
760	"scale_up"	"*"	"calc"	false	1	false	0
761	"scale_up"	"*"	"calc"	false	1	false	0
762	"scale_up"	"*"	"calc"	false	1	false	0
763	"scale_up"	"*"	"calc"	false	1	false	0
764	"scale_up"	"*"	"calc"	false	1	false	0
765	"scale_up"	"*"	"calc"	false	1	false	0
766	"scale_up"	"*"	"calc"	false	1	false	0
767	"scale_up"	"*"	"calc"	false	1	false	0
768	"scale_up"	"*"	"calc"	false	1	false	0
769	"scale_up"	"*"	"calc"	false	1	false	0
770	"scale_up"	"*"	"calc"	false	1	false	0
771	"scale_up"	"*"	"calc"	false	1	false	0
772	"scale_up"	"*"	"calc"	false	1	false	0
773	"scale_up"	"*"	"calc"	false	1	false	0
774	"scale_up"	"*"	"calc"	false	1	false	0
775	"scale_up"	"*"	"calc"	false	1	false	0
776	"scale_up"	"*"	"calc"	false	1	false	0
777	"scale_up"	"*"	"calc"	false	1	false	0
778	"scale_up"	"*"	"calc"	false	1	false	0
779	"scale_up"	"*"	"calc"	false	1	false	0
780	"scale_up"	"*"	"calc"	false	1	false	0
781	"scale_up"	"*"	"calc"	false	1	false	0
782	"scale_up"	"*"	"calc"	false	1	false	0
783	"scale_up"	"*"	"calc"	false	1	false	0
784	"scale_up"	"*"	"calc"	false	1	false	0
785	"scale_up"	"*"	"calc"	false	1	false	0
786	"scale_up"	"*"	"calc"	false	1	false	0
787	"scale_up"	"*"	"calc"	false	1	false	0
788	"scale_up"	"*"	"calc"	false	1	false	0
789	"scale_up"	"*"	"calc"	false	1	false	0
790	"scale_up"	"*"	"calc"	false	1	false	0
791	"scale_up"	"*"	"calc"	false	1	false	0
792	"scale_up"	"*"	"calc"	false	1	false	0
793	"scale_up"	"*"	"calc"	false	1	false	0
794	"scale_up"	"*"	"calc"	false	1	false	0
795	"scale_up"	"*"	"calc"	false	1	false	0
796	"scale_up"	"*"	"calc"	false	1	false	0
797	"scale_up"	"*"	"calc"	false	1	false	0
798	"scale_up"	"*"	"calc"	false	1	false	0
799	"scale_up"	"*"	"calc"	false	1	false	0
800	"scale_up"	"*"	"calc"	false	1	false	0
801	"scale_up"	"*"	"calc"	false	1	false	0
802	"scale_up"	"*"	"calc"	false	1	false	0
803	"scale_up"	"*"	"calc"	false	1	false	0
804	"scale_up"	"*"	"calc"	false	1	false	0
805	"scale_up"	"*"	"calc"	false	1	false	0
806	"scale_up"	"*"	"calc"	false	1	false	0
807	"scale_up"	"*"	"calc"	false	1	false	0
808	"scale_up"	"*"	"calc"	false	1	false	0
809	"scale_up"	"*"	"calc"	false	1	false	0
810	"scale_up"	"*"	"calc"	false	1	false	0
811	"scale_up"	"*"	"calc"	false	1	false	0
812	"scale_up"	"*"	"calc"	false	1	false	0
813	"scale_up"	"*"	"calc"	false	1	false	0
814	"scale_up"	"*"	"calc"	false	1	false	0
815	"scale_up"	"*"	"calc"	false	1	false	0
816	"scale_up"	"*"	"calc"	false	1	false	0
817	"scale_up"	"*"	"calc"	false	1	false	0
818	"scale_up"	"*"	"calc"	false	1	false	0
819	"scale_up"	"*"	"calc"	false	1	false	0
820	"scale_up"	"*"	"calc"	false	1	false	0
821	"scale_up"	"*"	"calc"	false	1	false	0
822	"scale_up"	"*"	"calc"	false	1	false	0
823	"scale_up"	"*"	"calc"	false	1	false	0
824	"scale_up"	"*"	"calc"	false	1	false	0
825	"scale_up"	"*"	"calc"	false	1	false	0
826	"scale_up"	"*"	"calc"	false	1	false	0
827	"scale_up"	"*"	"calc"	false	1	false	0
828	"power"	"pow"	"mmath"	false	1	false	0
829	"floor"	"floor"	"mmath"	false	1	false	0
830	"ceil"	"ceil"	"mmath"	false	1	false	0
831	"ceiling"	"ceil"	"mmath"	false	1	false	0
832	"sin"	"sin"	"mmath"	false	1	false	0
833	"cos"	"cos"	"mmath"	false	1	false	0
834	"tan"	"tan"	"mmath"	false	1	false	0
835	"asin"	"asin"	"mmath"	false	1	false	0
836	"acos"	"acos"	"mmath"	false	1	false	0
837	"atan"	"atan"	"mmath"	false	1	false	0
838	"atan"	"atan2"	"mmath"	false	1	false	0
839	"sinh"	"sinh"	"mmath"	false	1	false	0
840	"cot"	"cot"	"mmath"	false	1	false	0
841	"cosh"	"cosh"	"mmath"	false	1	false	0
842	"tanh"	"tanh"	"mmath"	false	1	false	0
843	"sqrt"	"sqrt"	"mmath"	false	1	false	0
844	"exp"	"exp"	"mmath"	false	1	false	0
845	"log"	"log"	"mmath"	false	1	false	0
846	"log10"	"log10"	"mmath"	false	1	false	0
847	"power"	"pow"	"mmath"	false	1	false	0
848	"floor"	"floor"	"mmath"	false	1	false	0
849	"ceil"	"ceil"	"mmath"	false	1	false	0
850	"ceiling"	"ceil"	"mmath"	false	1	false	0
851	"sin"	"sin"	"mmath"	false	1	false	0
852	"cos"	"cos"	"mmath"	false	1	false	0
853	"tan"	"tan"	"mmath"	false	1	false	0
854	"asin"	"asin"	"mmath"	false	1	false	0
855	"acos"	"acos"	"mmath"	false	1	false	0
856	"atan"	"atan"	"mmath"	false	1	false	0
857	"atan"	"atan2"	"mmath"	false	1	false	0
858	"sinh"	"sinh"	"mmath"	false	1	false	0
859	"cot"	"cot"	"mmath"	false	1	false	0
860	"cosh"	"cosh"	"mmath"	false	1	false	0
861	"tanh"	"tanh"	"mmath"	false	1	false	0
862	"sqrt"	"sqrt"	"mmath"	false	1	false	0
863	"exp"	"exp"	"mmath"	false	1	false	0
864	"log"	"log"	"mmath"	false	1	false	0
865	"log10"	"log10"	"mmath"	false	1	false	0
866	"pi"	"pi"	"mmath"	false	1	false	0
867	"rand"	"rand"	"mmath"	false	1	true	0
868	"rand"	"sqlrand"	"mmath"	false	1	true	0
869	"curdate"	"current_date"	"mtime"	false	1	false	0
870	"current_date"	"current_date"	"mtime"	false	1	false	0
871	"curtime"	"current_time"	"mtime"	false	1	false	0
872	"current_time"	"current_time"	"mtime"	false	1	false	0
873	"current_timestamp"	"current_timestamp"	"mtime"	false	1	false	0
874	"localtime"	"current_time"	"sql"	false	1	false	0
875	"localtimestamp"	"current_timestamp"	"sql"	false	1	false	0
876	"sql_sub"	"date_sub_msec_interval"	"mtime"	false	1	false	0
877	"sql_sub"	"date_sub_month_interval"	"mtime"	false	1	false	0
878	"sql_sub"	"timestamp_sub_msec_interval"	"mtime"	false	1	false	0
879	"sql_sub"	"timestamp_sub_month_interval"	"mtime"	false	1	false	0
880	"sql_sub"	"timestamp_sub_msec_interval"	"mtime"	false	1	false	0
881	"sql_sub"	"timestamp_sub_month_interval"	"mtime"	false	1	false	0
882	"sql_sub"	"time_sub_msec_interval"	"mtime"	false	1	false	0
883	"sql_sub"	"diff"	"mtime"	false	1	false	0
884	"sql_sub"	"diff"	"mtime"	false	1	false	0
885	"sql_sub"	"diff"	"mtime"	false	1	false	0
886	"sql_add"	"date_add_msec_interval"	"mtime"	false	1	false	0
887	"sql_add"	"addmonths"	"mtime"	false	1	false	0
888	"sql_add"	"timestamp_add_msec_interval"	"mtime"	false	1	false	0
889	"sql_add"	"timestamp_add_month_interval"	"mtime"	false	1	false	0
890	"sql_add"	"timestamp_add_msec_interval"	"mtime"	false	1	false	0
891	"sql_add"	"timestamp_add_month_interval"	"mtime"	false	1	false	0
892	"sql_add"	"time_add_msec_interval"	"mtime"	false	1	false	0
893	"local_timezone"	"local_timezone"	"mtime"	false	1	false	0
894	"year"	"year"	"mtime"	false	1	false	0
895	"month"	"month"	"mtime"	false	1	false	0
896	"day"	"day"	"mtime"	false	1	false	0
897	"hour"	"hours"	"mtime"	false	1	false	0
898	"minute"	"minutes"	"mtime"	false	1	false	0
899	"second"	"sql_seconds"	"mtime"	false	1	false	0
900	"year"	"year"	"mtime"	false	1	false	0
901	"month"	"month"	"mtime"	false	1	false	0
902	"day"	"day"	"mtime"	false	1	false	0
903	"hour"	"hours"	"mtime"	false	1	false	0
904	"minute"	"minutes"	"mtime"	false	1	false	0
905	"second"	"sql_seconds"	"mtime"	false	1	false	0
906	"year"	"year"	"mtime"	false	1	false	0
907	"month"	"month"	"mtime"	false	1	false	0
908	"day"	"day"	"mtime"	false	1	false	0
909	"hour"	"hours"	"mtime"	false	1	false	0
910	"minute"	"minutes"	"mtime"	false	1	false	0
911	"second"	"sql_seconds"	"mtime"	false	1	false	0
912	"year"	"year"	"mtime"	false	1	false	0
913	"month"	"month"	"mtime"	false	1	false	0
914	"day"	"day"	"mtime"	false	1	false	0
915	"hour"	"hours"	"mtime"	false	1	false	0
916	"minute"	"minutes"	"mtime"	false	1	false	0
917	"second"	"seconds"	"mtime"	false	1	false	0
918	"dayofyear"	"dayofyear"	"mtime"	false	1	false	0
919	"weekofyear"	"weekofyear"	"mtime"	false	1	false	0
920	"dayofweek"	"dayofweek"	"mtime"	false	1	false	0
921	"dayofmonth"	"day"	"mtime"	false	1	false	0
922	"week"	"weekofyear"	"mtime"	false	1	false	0
923	"next_value_for"	"next_value"	"sql"	false	1	true	0
924	"get_value_for"	"get_value"	"sql"	false	1	false	0
925	"restart"	"restart"	"sql"	false	1	false	0
926	"locate"	"locate"	"str"	false	1	false	0
927	"locate"	"locate"	"str"	false	1	false	0
928	"substring"	"substring"	"str"	false	1	false	0
929	"substring"	"substring"	"str"	false	1	false	0
930	"like"	"like"	"str"	false	1	false	0
931	"like"	"like"	"str"	false	1	false	0
932	"ilike"	"ilike"	"str"	false	1	false	0
933	"ilike"	"ilike"	"str"	false	1	false	0
934	"not_like"	"not_like"	"str"	false	1	false	0
935	"not_like"	"not_like"	"str"	false	1	false	0
936	"not_ilike"	"not_ilike"	"str"	false	1	false	0
937	"not_ilike"	"not_ilike"	"str"	false	1	false	0
938	"patindex"	"patindex"	"pcre"	false	1	false	0
939	"truncate"	"stringleft"	"str"	false	1	false	0
940	"concat"	"+"	"calc"	false	1	false	0
941	"ascii"	"ascii"	"str"	false	1	false	0
942	"code"	"unicode"	"str"	false	1	false	0
943	"length"	"stringlength"	"str"	false	1	false	0
944	"right"	"stringright"	"str"	false	1	false	0
945	"left"	"stringleft"	"str"	false	1	false	0
946	"upper"	"toUpper"	"str"	false	1	false	0
947	"ucase"	"toUpper"	"str"	false	1	false	0
948	"lower"	"toLower"	"str"	false	1	false	0
949	"lcase"	"toLower"	"str"	false	1	false	0
950	"trim"	"trim"	"str"	false	1	false	0
951	"ltrim"	"ltrim"	"str"	false	1	false	0
952	"rtrim"	"rtrim"	"str"	false	1	false	0
953	"insert"	"insert"	"str"	false	1	false	0
954	"replace"	"replace"	"str"	false	1	false	0
955	"repeat"	"repeat"	"str"	false	1	false	0
956	"space"	"space"	"str"	false	1	false	0
957	"char_length"	"length"	"str"	false	1	false	0
958	"character_length"	"length"	"str"	false	1	false	0
959	"octet_length"	"nbytes"	"str"	false	1	false	0
960	"soundex"	"soundex"	"txtsim"	false	1	false	0
961	"difference"	"stringdiff"	"txtsim"	false	1	false	0
962	"editdistance"	"editdistance"	"txtsim"	false	1	false	0
963	"editdistance2"	"editdistance2"	"txtsim"	false	1	false	0
964	"similarity"	"similarity"	"txtsim"	false	1	false	0
965	"qgramnormalize"	"qgramnormalize"	"txtsim"	false	1	false	0
966	"levenshtein"	"levenshtein"	"txtsim"	false	1	false	0
967	"levenshtein"	"levenshtein"	"txtsim"	false	1	false	0
968	"locate"	"locate"	"str"	false	1	false	0
969	"locate"	"locate"	"str"	false	1	false	0
970	"substring"	"substring"	"str"	false	1	false	0
971	"substring"	"substring"	"str"	false	1	false	0
972	"like"	"like"	"str"	false	1	false	0
973	"like"	"like"	"str"	false	1	false	0
974	"ilike"	"ilike"	"str"	false	1	false	0
975	"ilike"	"ilike"	"str"	false	1	false	0
976	"not_like"	"not_like"	"str"	false	1	false	0
977	"not_like"	"not_like"	"str"	false	1	false	0
978	"not_ilike"	"not_ilike"	"str"	false	1	false	0
979	"not_ilike"	"not_ilike"	"str"	false	1	false	0
980	"patindex"	"patindex"	"pcre"	false	1	false	0
981	"truncate"	"stringleft"	"str"	false	1	false	0
982	"concat"	"+"	"calc"	false	1	false	0
983	"ascii"	"ascii"	"str"	false	1	false	0
984	"code"	"unicode"	"str"	false	1	false	0
985	"length"	"stringlength"	"str"	false	1	false	0
986	"right"	"stringright"	"str"	false	1	false	0
987	"left"	"stringleft"	"str"	false	1	false	0
988	"upper"	"toUpper"	"str"	false	1	false	0
989	"ucase"	"toUpper"	"str"	false	1	false	0
990	"lower"	"toLower"	"str"	false	1	false	0
991	"lcase"	"toLower"	"str"	false	1	false	0
992	"trim"	"trim"	"str"	false	1	false	0
993	"ltrim"	"ltrim"	"str"	false	1	false	0
994	"rtrim"	"rtrim"	"str"	false	1	false	0
995	"insert"	"insert"	"str"	false	1	false	0
996	"replace"	"replace"	"str"	false	1	false	0
997	"repeat"	"repeat"	"str"	false	1	false	0
998	"space"	"space"	"str"	false	1	false	0
999	"char_length"	"length"	"str"	false	1	false	0
1000	"character_length"	"length"	"str"	false	1	false	0
1001	"octet_length"	"nbytes"	"str"	false	1	false	0
1002	"soundex"	"soundex"	"txtsim"	false	1	false	0
1003	"difference"	"stringdiff"	"txtsim"	false	1	false	0
1004	"editdistance"	"editdistance"	"txtsim"	false	1	false	0
1005	"editdistance2"	"editdistance2"	"txtsim"	false	1	false	0
1006	"similarity"	"similarity"	"txtsim"	false	1	false	0
1007	"qgramnormalize"	"qgramnormalize"	"txtsim"	false	1	false	0
1008	"levenshtein"	"levenshtein"	"txtsim"	false	1	false	0
1009	"levenshtein"	"levenshtein"	"txtsim"	false	1	false	0
1010	"locate"	"locate"	"str"	false	1	false	0
1011	"locate"	"locate"	"str"	false	1	false	0
1012	"substring"	"substring"	"str"	false	1	false	0
1013	"substring"	"substring"	"str"	false	1	false	0
1014	"like"	"like"	"str"	false	1	false	0
1015	"like"	"like"	"str"	false	1	false	0
1016	"ilike"	"ilike"	"str"	false	1	false	0
1017	"ilike"	"ilike"	"str"	false	1	false	0
1018	"not_like"	"not_like"	"str"	false	1	false	0
1019	"not_like"	"not_like"	"str"	false	1	false	0
1020	"not_ilike"	"not_ilike"	"str"	false	1	false	0
1021	"not_ilike"	"not_ilike"	"str"	false	1	false	0
1022	"patindex"	"patindex"	"pcre"	false	1	false	0
1023	"truncate"	"stringleft"	"str"	false	1	false	0
1024	"concat"	"+"	"calc"	false	1	false	0
1025	"ascii"	"ascii"	"str"	false	1	false	0
1026	"code"	"unicode"	"str"	false	1	false	0
1027	"length"	"stringlength"	"str"	false	1	false	0
1028	"right"	"stringright"	"str"	false	1	false	0
1029	"left"	"stringleft"	"str"	false	1	false	0
1030	"upper"	"toUpper"	"str"	false	1	false	0
1031	"ucase"	"toUpper"	"str"	false	1	false	0
1032	"lower"	"toLower"	"str"	false	1	false	0
1033	"lcase"	"toLower"	"str"	false	1	false	0
1034	"trim"	"trim"	"str"	false	1	false	0
1035	"ltrim"	"ltrim"	"str"	false	1	false	0
1036	"rtrim"	"rtrim"	"str"	false	1	false	0
1037	"insert"	"insert"	"str"	false	1	false	0
1038	"replace"	"replace"	"str"	false	1	false	0
1039	"repeat"	"repeat"	"str"	false	1	false	0
1040	"space"	"space"	"str"	false	1	false	0
1041	"char_length"	"length"	"str"	false	1	false	0
1042	"character_length"	"length"	"str"	false	1	false	0
1043	"octet_length"	"nbytes"	"str"	false	1	false	0
1044	"soundex"	"soundex"	"txtsim"	false	1	false	0
1045	"difference"	"stringdiff"	"txtsim"	false	1	false	0
1046	"editdistance"	"editdistance"	"txtsim"	false	1	false	0
1047	"editdistance2"	"editdistance2"	"txtsim"	false	1	false	0
1048	"similarity"	"similarity"	"txtsim"	false	1	false	0
1049	"qgramnormalize"	"qgramnormalize"	"txtsim"	false	1	false	0
1050	"levenshtein"	"levenshtein"	"txtsim"	false	1	false	0
1051	"levenshtein"	"levenshtein"	"txtsim"	false	1	false	0
1052	"copyfrom"	"copy_from"	"sql"	false	1	false	0
1053	"copyfrom"	"copyfrom"	"sql"	false	1	false	0
1054	"copyfrom"	"importTable"	"sql"	false	1	false	0
27	"not_unique"	"not_unique"	"sql"	false	3	false	0
39	"zero_or_one"	"zero_or_one"	"sql"	false	3	false	0
40	"exist"	"exist"	"aggr"	false	3	false	0
41	"not_exist"	"not_exist"	"aggr"	false	3	false	0
46	"min"	"min"	"aggr"	false	3	false	0
47	"max"	"max"	"aggr"	false	3	false	0
51	"sum"	"sum"	"aggr"	false	3	false	0
52	"sum"	"sum"	"aggr"	false	3	false	0
53	"sum"	"sum"	"aggr"	false	3	false	0
54	"sum"	"sum"	"aggr"	false	3	false	0
55	"sum"	"sum"	"aggr"	false	3	false	0
56	"sum"	"sum"	"aggr"	false	3	false	0
57	"sum"	"sum"	"aggr"	false	3	false	0
58	"sum"	"sum"	"aggr"	false	3	false	0
59	"sum"	"sum"	"aggr"	false	3	false	0
60	"prod"	"prod"	"aggr"	false	3	false	0
61	"prod"	"prod"	"aggr"	false	3	false	0
62	"prod"	"prod"	"aggr"	false	3	false	0
63	"prod"	"prod"	"aggr"	false	3	false	0
64	"prod"	"prod"	"aggr"	false	3	false	0
65	"prod"	"prod"	"aggr"	false	3	false	0
66	"prod"	"prod"	"aggr"	false	3	false	0
67	"prod"	"prod"	"aggr"	false	3	false	0
80	"sum"	"sum"	"aggr"	false	3	false	0
81	"prod"	"prod"	"aggr"	false	3	false	0
82	"sum"	"sum"	"aggr"	false	3	false	0
83	"prod"	"prod"	"aggr"	false	3	false	0
84	"avg"	"avg"	"aggr"	false	3	false	0
85	"count_no_nil"	"count_no_nil"	"aggr"	false	3	false	0
86	"count"	"count"	"aggr"	false	3	false	0
5101	"env"	"CREATE FUNCTION env () RETURNS TABLE( name varchar(1024), value varchar(2048)) EXTERNAL NAME sql.sql_environment;"	"sql"	true	1	false	2000
5105	"var"	"CREATE FUNCTION var() RETURNS TABLE( name varchar(1024)) EXTERNAL NAME sql.sql_variables;"	"sql"	true	1	false	2000
5113	"db_users"	"CREATE FUNCTION db_users () RETURNS TABLE( name varchar(2048)) EXTERNAL NAME sql.db_users;"	"sql"	true	1	false	2000
5133	"like"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate filter function \"like\"(val string, pat string, esc string) external name algebra.likesubselect;"	"algebra"	true	4	false	2000
5138	"ilike"	"create filter function \"ilike\"(val string, pat string, esc string) external name algebra.ilikesubselect;"	"algebra"	true	4	false	2000
5143	"degrees"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate function degrees(r double) \nreturns double\n\treturn r*180/pi();"	"user"	true	1	false	2000
5147	"radians"	"create function radians(d double) \nreturns double\n\treturn d*pi()/180;"	"user"	true	1	false	2000
5151	"times"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- Provide a simple equivalent for the UNIX times command\n-- times 0 ms user 0 ms system 0 ms 0 reads 0 writes\n\ncreate procedure times()\nexternal name sql.times;"	"sql"	true	2	false	2000
5154	"getanchor"	"create function getanchor( theurl url ) returns string \n\texternal name url.\"getAnchor\";"	"url"	true	1	false	2000
5158	"getbasename"	"create function getbasename(theurl url) returns string       \n\texternal name url.\"getBasename\";"	"url"	true	1	false	2000
5162	"getcontent"	"create function getcontent(theurl url)   returns string       \n\texternal name url.\"getContent\";"	"url"	true	1	false	2000
5166	"getcontext"	"create function getcontext(theurl url)   returns string       \n\texternal name url.\"getContext\";"	"url"	true	1	false	2000
5170	"getdomain"	"create function getdomain(theurl url) returns string       \n\texternal name url.\"getDomain\";"	"url"	true	1	false	2000
5174	"getextension"	"create function getextension(theurl url) returns string       \n\texternal name url.\"getExtension\";"	"url"	true	1	false	2000
5178	"getfile"	"create function getfile(theurl url) returns string       \n\texternal name url.\"getFile\";"	"url"	true	1	false	2000
5182	"gethost"	"create function gethost(theurl url)   returns string       \n\texternal name url.\"getHost\";"	"url"	true	1	false	2000
5186	"getport"	"create function getport(theurl url) returns string       \n\texternal name url.\"getPort\";"	"url"	true	1	false	2000
5190	"getprotocol"	"create function getprotocol(theurl url) returns string       \n\texternal name url.\"getProtocol\";"	"url"	true	1	false	2000
5194	"getquery"	"create function getquery(theurl url) returns string       \n\texternal name url.\"getQuery\";"	"url"	true	1	false	2000
5198	"getuser"	"create function getuser(theurl url) returns string       \n\texternal name url.\"getUser\";"	"url"	true	1	false	2000
5202	"getroboturl"	"create function getroboturl(theurl url) returns string       \n\texternal name url.\"getRobotURL\";"	"url"	true	1	false	2000
5206	"isaurl"	"create function isaurl(theurl url) returns bool\n\texternal name url.\"isaURL\";"	"url"	true	1	false	2000
5210	"newurl"	"create function newurl(protocol string, hostname string, \"port\" int, file string) \n\treturns url       \n\texternal name url.\"new\";"	"url"	true	1	false	2000
5217	"newurl"	"create function newurl(protocol string, hostname string, file string) \n\treturns url \n\texternal name url.\"new\";"	"url"	true	1	false	2000
5223	"str_to_date"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate function str_to_date(s string, format string) returns date\n\texternal name mtime.\"str_to_date\";"	"mtime"	true	1	false	2000
5228	"date_to_str"	"create function date_to_str(d date, format string) returns string\n\texternal name mtime.\"date_to_str\";"	"mtime"	true	1	false	2000
5234	"broadcast"	"create function \"broadcast\" (p inet) returns inet \n\texternal name inet.\"broadcast\";"	"inet"	true	1	false	2000
5238	"host"	"create function \"host\" (p inet) returns clob\n\texternal name inet.\"host\";"	"inet"	true	1	false	2000
5242	"masklen"	"create function \"masklen\" (p inet) returns int\n\texternal name inet.\"masklen\";"	"inet"	true	1	false	2000
5246	"setmasklen"	"create function \"setmasklen\" (p inet, mask int) returns inet\n\texternal name inet.\"setmasklen\";"	"inet"	true	1	false	2000
5251	"netmask"	"create function \"netmask\" (p inet) returns inet\n\texternal name inet.\"netmask\";"	"inet"	true	1	false	2000
5255	"hostmask"	"create function \"hostmask\" (p inet) returns inet\n\texternal name inet.\"hostmask\";"	"inet"	true	1	false	2000
5259	"network"	"create function \"network\" (p inet) returns inet\n\texternal name inet.\"network\";"	"inet"	true	1	false	2000
5263	"text"	"create function \"text\" (p inet) returns clob\n\texternal name inet.\"text\";"	"inet"	true	1	false	2000
5267	"abbrev"	"create function \"abbrev\" (p inet) returns clob\n\texternal name inet.\"abbrev\";"	"inet"	true	1	false	2000
5279	"querylog_catalog"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- QUERY HISTORY\n-- The query history mechanism of MonetDB/SQL relies on a few hooks.\n-- The most important one is a global system variable which controls\n--  monitoring of all sessions. \n\ncreate function sys.querylog_catalog()\nreturns table(\n\tid oid,\n\towner string,\n\tdefined timestamp,\n\tquery string,\n\tpipe string,\n\tmal int,\t\t\t-- size of MAL plan\n\toptimize bigint \t-- time in usec\n)\nexternal name sql.querylog_catalog;"	"sql"	true	1	false	2000
5293	"querylog_calls"	"-- Each query call is stored in the table calls\n-- At regular intervals the query history table should be cleaned.\n-- This can be done manually on the SQL console, or be integrated\n-- in the keepQuery and keepCall upon need.\n-- The parameters are geared at understanding the resource claims\n-- They reflect the effect of the total workload mix during execution.\n-- The 'cpu' gives the average cpu load percentage over all cores on the \n-- server during execution phase. \n-- increasing cpu load indicates better use of multi-cores.\n-- The 'io' indicate IOs during complete query run.\n-- The 'space' is the total amount of intermediates created in MB.\n-- Reducing the space component improves performance/\n-- All timing in usec and all storage in bytes.\n\ncreate function sys.querylog_calls()\nreturns table(\n\tid oid,\t\t\t\t -- references query plan\n\t\"start\" timestamp,\t-- time the statement was started\n\t\"stop\" timestamp,\t-- time the statement was completely finished\n\targuments string,\t-- actual call structure\n\ttuples wrd,\t\t\t-- number of tuples in the result set\n\trun bigint,\t\t-- time spent (in usec)  until the result export\n\tship bigint,\t\t-- time spent (in usec)  to ship the result set\n\tcpu int,  \t\t-- average cpu load percentage during execution\n\tio int,\t\t\t-- percentage time waiting for IO to finish \n\tspace bigint\t\t-- total storage size of intermediates created (in MB)\n)\nexternal name sql.querylog_calls;"	"sql"	true	1	false	2000
5335	"querylog_empty"	"-- reset history for a particular user\ncreate procedure sys.querylog_empty()\nexternal name sql.querylog_empty;"	"sql"	true	2	false	2000
5337	"querylog_enable"	"-- manipulate the query logger\ncreate procedure sys.querylog_enable()\nexternal name sql.querylog_enable;"	"sql"	true	2	false	2000
5339	"querylog_enable"	"create procedure sys.querylog_enable(threshold smallint)\nexternal name sql.querylog_enable_threshold;"	"sql"	true	2	false	2000
5342	"querylog_disable"	"create procedure sys.querylog_disable()\nexternal name sql.querylog_disable;"	"sql"	true	2	false	2000
5357	"tracelog"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- make the offline tracing table available for inspection\ncreate function sys.tracelog() \n\treturns table (\n\t\tevent integer,\t\t-- event counter\n\t\tclk varchar(20), \t-- wallclock, no mtime in kernel\n\t\tpc varchar(50), \t-- module.function[nr]\n\t\tthread int, \t\t-- thread identifier\n\t\t\"user\" int, \t\t-- user identifier\n\t\tticks bigint, \t\t-- time in microseconds\n\t\treads bigint, \t\t-- number of blocks read\n\t\twrites bigint, \t-- number of blocks written\n\t\trbytes bigint,\t\t-- amount of bytes touched\n\t\twbytes bigint,\t\t-- amount of bytes written\n\t\ttype string,\t\t-- return types\n\t\tstmt string\t\t\t-- actual statement executed\n\t)\n\texternal name sql.dump_trace;"	"sql"	true	1	false	2000
5374	"gzcompress"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- Perform LZ-compression over a specific table;\ncreate procedure gzcompress (s string, t string)\n    external name sql.gzcompress;"	"sql"	true	2	false	2000
5378	"gzdecompress"	"create procedure gzdecompress (s string, t string)\n    external name sql.gzdecompress;"	"sql"	true	2	false	2000
5382	"gztruncate"	"-- Truncate the storage for columns with a compressed image\ncreate procedure gztruncate (s string, t string)\n    external name sql.gztruncate;"	"sql"	true	2	false	2000
5386	"gzexpand"	"-- Remove the compressed images\ncreate procedure gzexpand (s string, t string)\n    external name sql.gzexpand;"	"sql"	true	2	false	2000
5390	"newdictionary"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate procedure newdictionary (s string, t string)\n    external name sql.newdictionary;"	"sql"	true	2	false	2000
5394	"dropdictionary"	"create procedure dropdictionary (s string, t string)\n    external name sql.dropdictionary;"	"sql"	true	2	false	2000
5398	"initializedictionary"	"create procedure initializedictionary ()\n    external name dictionary.initialize;"	"dictionary"	true	2	false	2000
5400	"cluster1"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- Clustering a relational table should be done with care.\n-- For, the oid's are used in join-indices.\n\n-- Clustering of tables may improve IO performance\n-- The foreign key constraints should be dropped before\n-- and re-established after the cluster operation.\n\ncreate procedure cluster1(sys string, tab string)\n\texternal name sql.cluster1;"	"sql"	true	2	false	2000
5404	"cluster2"	"create procedure cluster2(sys string, tab string)\n\texternal name sql.cluster2;"	"sql"	true	2	false	2000
5408	"shrink"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- Vacuum a relational table should be done with care.\n-- For, the oid's are used in join-indices.\n\n-- Vacuum of tables may improve IO performance and disk footprint.\n-- The foreign key constraints should be dropped before\n-- and re-established after the cluster operation.\n\ncreate procedure shrink(sys string, tab string)\n\texternal name sql.shrink;"	"sql"	true	2	false	2000
5412	"reuse"	"create procedure reuse(sys string, tab string)\n\texternal name sql.reuse;"	"sql"	true	2	false	2000
5416	"vacuum"	"create procedure vacuum(sys string, tab string)\n\texternal name sql.vacuum;"	"sql"	true	2	false	2000
5424	"dependencies_schemas_on_users"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n--Schema s has a dependency on user u\ncreate function dependencies_schemas_on_users()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select s.name, u.name, 'DEP_USER' from schemas as s, users u where u.default_schema = s.id);"	"user"	true	1	false	2000
5431	"dependencies_owners_on_schemas"	"--User (owner) has a dependency in schema s\ncreate function dependencies_owners_on_schemas()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select a.name, s.name, 'DEP_SCHEMA' from schemas as s, auths a where s.owner = a.id);"	"user"	true	1	false	2000
5438	"dependencies_tables_on_views"	"--Table t has a dependency on view v\ncreate function dependencies_tables_on_views()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select t.name, v.name, 'DEP_VIEW' from tables as t, tables as v, dependencies as dep where t.id = dep.id and v.id = dep.depend_id and dep.depend_type = 5 and v.type = 1);"	"user"	true	1	false	2000
5445	"dependencies_tables_on_indexes"	"--Table t has a dependency on index  i\ncreate function dependencies_tables_on_indexes()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select t.name, i.name, 'DEP_INDEX' from tables as t, idxs as i where i.table_id = t.id and i.name not in (select name from keys) and t.type = 0);"	"user"	true	1	false	2000
5452	"dependencies_tables_on_triggers"	"--Table t has a dependency on trigger tri\n\ncreate function dependencies_tables_on_triggers()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table ((select t.name, tri.name, 'DEP_TRIGGER' from tables as t, triggers as tri where tri.table_id = t.id) union (select t.name, tri.name, 'DEP_TRIGGER' from triggers tri, tables t, dependencies dep where dep.id = t.id and dep.depend_id =tri.id and dep.depend_type = 8));"	"user"	true	1	false	2000
5459	"dependencies_tables_on_foreignkeys"	"--Table t has a dependency on foreign key k\ncreate function dependencies_tables_on_foreignkeys()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select t.name, fk.name, 'DEP_FKEY' from tables as t, keys as k, keys as fk where fk.rkey = k.id and k.table_id = t.id);"	"user"	true	1	false	2000
5466	"dependencies_tables_on_functions"	"--Table t has a dependency on function f\ncreate function dependencies_tables_on_functions()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select t.name, f.name, 'DEP_FUNC' from functions as f, tables as t, dependencies as dep where t.id = dep.id and f.id = dep.depend_id and dep.depend_type = 7 and t.type = 0);"	"user"	true	1	false	2000
5473	"dependencies_columns_on_views"	"--Column c has a dependency on view v\ncreate function dependencies_columns_on_views()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select c.name, v.name, 'DEP_VIEW' from columns as c, tables as v, dependencies as dep where c.id = dep.id and v.id = dep.depend_id and dep.depend_type = 5 and v.type = 1);"	"user"	true	1	false	2000
5480	"dependencies_columns_on_keys"	"--Column c has a dependency on key k\ncreate function dependencies_columns_on_keys()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select c.name, k.name, 'DEP_KEY' from columns as c, objects as kc, keys as k where kc.\"name\" = c.name and kc.id = k.id and k.table_id = c.table_id and k.rkey = -1);"	"user"	true	1	false	2000
5487	"dependencies_columns_on_indexes"	"--Column c has a dependency on index i \ncreate function dependencies_columns_on_indexes()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select c.name, i.name, 'DEP_INDEX' from columns as c, objects as kc, idxs as i where kc.\"name\" = c.name and kc.id = i.id and c.table_id = i.table_id and i.name not in (select name from keys));"	"user"	true	1	false	2000
5494	"dependencies_columns_on_functions"	"--Column c has a dependency on function f\ncreate function dependencies_columns_on_functions()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select c.name, f.name, 'DEP_FUNC' from functions as f, columns as c, dependencies as dep where c.id = dep.id and f.id = dep.depend_id and dep.depend_type = 7);"	"user"	true	1	false	2000
5501	"dependencies_columns_on_triggers"	"--Column c has a dependency on trigger tri\ncreate function dependencies_columns_on_triggers()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select c.name, tri.name, 'DEP_TRIGGER' from columns as c, triggers as tri, dependencies as dep where dep.id = c.id and dep.depend_id =tri.id and dep.depend_type = 8);"	"user"	true	1	false	2000
5508	"dependencies_views_on_functions"	"--View v has a dependency on function f\ncreate function dependencies_views_on_functions()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select v.name, f.name, 'DEP_FUNC' from functions as f, tables as v, dependencies as dep where v.id = dep.id and f.id = dep.depend_id and dep.depend_type = 7 and v.type = 1);"	"user"	true	1	false	2000
5515	"dependencies_views_on_triggers"	"--View v has a dependency on trigger tri\ncreate function dependencies_views_on_triggers()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select v.name, tri.name, 'DEP_TRIGGER' from tables as v, triggers as tri, dependencies as dep where dep.id = v.id and dep.depend_id =tri.id and dep.depend_type = 8 and v.type = 1);"	"user"	true	1	false	2000
5522	"dependencies_functions_on_functions"	"--Function f1 has a dependency on function f2\ncreate function dependencies_functions_on_functions()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select f1.name, f2.name, 'DEP_FUNC' from functions as f1, functions as f2, dependencies as dep where f1.id = dep.id and f2.id = dep.depend_id and dep.depend_type = 7);"	"user"	true	1	false	2000
5529	"dependencies_functions_os_triggers"	"--Function f1 has a dependency on trigger tri\ncreate function dependencies_functions_os_triggers()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select f.name, tri.name, 'DEP_TRIGGER' from functions as f, triggers as tri, dependencies as dep where dep.id = f.id and dep.depend_id =tri.id and dep.depend_type = 8);"	"user"	true	1	false	2000
5536	"dependencies_keys_on_foreignkeys"	"--Key k has a dependency on foreign key fk\ncreate function dependencies_keys_on_foreignkeys()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select k.name, fk.name, 'DEP_FKEY' from keys as k, keys as fk where fk.rkey = k.id);"	"user"	true	1	false	2000
5539	"password_hash"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate function sys.password_hash (username string) \n\treturns string \n\texternal name sql.password;"	"sql"	true	1	false	2000
5550	"sessions"	"create function sys.sessions()\nreturns table(\"user\" string, \"login\" timestamp, \"sessiontimeout\" bigint, \"lastcommand\" timestamp, \"querytimeout\" bigint, \"active\" bool)\nexternal name sql.sessions;"	"sql"	true	1	false	2000
5561	"shutdown"	"create procedure sys.shutdown(delay tinyint) \nexternal name sql.shutdown;"	"sql"	true	2	false	2000
5564	"shutdown"	"create procedure sys.shutdown(delay tinyint, force bool) \nexternal name sql.shutdown;"	"sql"	true	2	false	2000
5568	"settimeout"	"-- control the query and session time out \ncreate procedure sys.settimeout(\"query\" bigint)\n\texternal name sql.settimeout;"	"sql"	true	2	false	2000
5571	"settimeout"	"create procedure sys.settimeout(\"query\" bigint, \"session\" bigint)\n\texternal name sql.settimeout;"	"sql"	true	2	false	2000
5575	"setsession"	"create procedure sys.setsession(\"timeout\" bigint)\n\texternal name sql.setsession;"	"sql"	true	2	false	2000
5578	"ms_stuff"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate function ms_stuff( s1 varchar(32), st int, len int, s3 varchar(32))\nreturns varchar(32)\nbegin\n\tdeclare res varchar(32), aux varchar(32);\n\tdeclare ofset int;\n\n    if ( st < 0 or st > length(s1))\n        then return '';\n    end if;\n\n    set ofset = 1;\n    set res = substring(s1,ofset,st-1);\n    set res = res || s3;\n    set ofset = st + len;\n    set aux = substring(s1,ofset,length(s1)-ofset+1);\n\tset res = res || aux;\n\treturn res;\nend;"	"user"	true	1	false	2000
5585	"ms_trunc"	"create function ms_trunc(num double, prc int)\nreturns double\nexternal name sql.ms_trunc;"	"sql"	true	1	false	2000
5590	"ms_round"	"create function ms_round(num double, prc int, truncat int)\nreturns double\nbegin\n\tif (truncat = 0)\n\t\tthen return round(num, prc);\n\t\telse return ms_trunc(num, prc);\n\tend if;\nend;"	"user"	true	1	false	2000
5596	"ms_str"	"create function ms_str(num float, prc int, truncat int)\nreturns string\nbegin\n        return cast(num as string);\nend;"	"user"	true	1	false	2000
5602	"alpha"	"create function alpha(pdec double, pradius double)\nreturns double external name sql.alpha;"	"sql"	true	1	false	2000
5607	"zorder_encode"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate function zorder_encode(x integer, y integer) returns oid\n    external name zorder.encode;"	"zorder"	true	1	false	2000
5612	"zorder_decode_x"	"create function zorder_decode_x(z oid) returns integer\n    external name zorder.decode_x;"	"zorder"	true	1	false	2000
5616	"zorder_decode_y"	"create function zorder_decode_y(z oid) returns integer\n    external name zorder.decode_y;"	"zorder"	true	1	false	2000
5623	"optimizer_stats"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- show the optimizer statistics maintained by the SQL frontend\ncreate function sys.optimizer_stats () \n\treturns table (rewrite string, count int) \n\texternal name sql.dump_opt_stats;"	"sql"	true	1	false	2000
5629	"querycache"	"-- SQL QUERY CACHE\n-- The SQL query cache returns a table with the query plans kept\n\ncreate function sys.querycache() \n\treturns table (query string, count int) \n\texternal name sql.dump_cache;"	"sql"	true	1	false	2000
5632	"querylog"	"-- Trace the SQL input\ncreate procedure sys.querylog(filename string) \n\texternal name sql.logfile;"	"sql"	true	2	false	2000
5639	"optimizers"	"-- MONETDB KERNEL SECTION\n-- optimizer pipe catalog\ncreate function sys.optimizers () \n\treturns table (name string, def string, status string)\n\texternal name sql.optimizers;"	"sql"	true	1	false	2000
5650	"environment"	"-- The environment table\ncreate function sys.environment()\n\treturns table (\"name\" string, value string)\n\texternal name sql.sql_environment;"	"sql"	true	1	false	2000
5670	"bbp"	"-- The BAT buffer pool overview\ncreate function sys.bbp () \n\treturns table (id int, name string, htype string, \n\t\tttype string, count bigint, refcnt int, lrefcnt int, \n\t\tlocation string, heat int, dirty string, \n\t\tstatus string, kind string) \n\texternal name sql.bbp;"	"sql"	true	1	false	2000
5673	"evalalgebra"	"create procedure sys.evalalgebra( ra_stmt string, opt bool)\n\texternal name sql.\"evalAlgebra\";"	"sql"	true	2	false	2000
5686	"queue"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- System monitoring\n\n-- show status of all active SQL queries.\ncreate function sys.queue()\nreturns table(\n\tqtag bigint,\n\t\"user\" string,\n\tstarted timestamp,\n\testimate timestamp,\n\tprogress int,\n\tstatus string,\n\ttag oid,\n\tquery string\n)\nexternal name sql.sysmon_queue;"	"sql"	true	1	false	2000
5699	"pause"	"-- operations to manipulate the state of havoc queries\ncreate procedure sys.pause(tag int)\nexternal name sql.sysmon_pause;"	"sql"	true	2	false	2000
5702	"resume"	"create procedure sys.resume(tag int)\nexternal name sql.sysmon_resume;"	"sql"	true	2	false	2000
5705	"stop"	"create procedure sys.stop(tag int)\nexternal name sql.sysmon_stop;"	"sql"	true	2	false	2000
5708	"pause"	"create procedure sys.pause(tag bigint)\nexternal name sql.sysmon_pause;"	"sql"	true	2	false	2000
5711	"resume"	"create procedure sys.resume(tag bigint)\nexternal name sql.sysmon_resume;"	"sql"	true	2	false	2000
5714	"stop"	"create procedure sys.stop(tag bigint)\nexternal name sql.sysmon_stop;"	"sql"	true	2	false	2000
5717	"stddev_samp"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate aggregate stddev_samp(val tinyint) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
5721	"stddev_samp"	"create aggregate stddev_samp(val smallint) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
5725	"stddev_samp"	"create aggregate stddev_samp(val integer) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
5729	"stddev_samp"	"create aggregate stddev_samp(val wrd) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
5733	"stddev_samp"	"create aggregate stddev_samp(val bigint) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
5737	"stddev_samp"	"create aggregate stddev_samp(val real) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
5741	"stddev_samp"	"create aggregate stddev_samp(val double) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
5745	"stddev_samp"	"create aggregate stddev_samp(val date) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
5749	"stddev_samp"	"create aggregate stddev_samp(val time) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
5753	"stddev_samp"	"create aggregate stddev_samp(val timestamp) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
5757	"stddev_pop"	"create aggregate stddev_pop(val tinyint) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
5761	"stddev_pop"	"create aggregate stddev_pop(val smallint) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
5765	"stddev_pop"	"create aggregate stddev_pop(val integer) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
5769	"stddev_pop"	"create aggregate stddev_pop(val wrd) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
5773	"stddev_pop"	"create aggregate stddev_pop(val bigint) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
5777	"stddev_pop"	"create aggregate stddev_pop(val real) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
5781	"stddev_pop"	"create aggregate stddev_pop(val double) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
5785	"stddev_pop"	"create aggregate stddev_pop(val date) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
5789	"stddev_pop"	"create aggregate stddev_pop(val time) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
5793	"stddev_pop"	"create aggregate stddev_pop(val timestamp) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
5797	"var_samp"	"create aggregate var_samp(val tinyint) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
5801	"var_samp"	"create aggregate var_samp(val smallint) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
5805	"var_samp"	"create aggregate var_samp(val integer) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
5809	"var_samp"	"create aggregate var_samp(val wrd) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
5813	"var_samp"	"create aggregate var_samp(val bigint) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
5817	"var_samp"	"create aggregate var_samp(val real) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
5821	"var_samp"	"create aggregate var_samp(val double) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
5825	"var_samp"	"create aggregate var_samp(val date) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
5829	"var_samp"	"create aggregate var_samp(val time) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
5833	"var_samp"	"create aggregate var_samp(val timestamp) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
5837	"var_pop"	"create aggregate var_pop(val tinyint) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
5841	"var_pop"	"create aggregate var_pop(val smallint) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
5845	"var_pop"	"create aggregate var_pop(val integer) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
5849	"var_pop"	"create aggregate var_pop(val wrd) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
5853	"var_pop"	"create aggregate var_pop(val bigint) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
5857	"var_pop"	"create aggregate var_pop(val real) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
5861	"var_pop"	"create aggregate var_pop(val double) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
5865	"var_pop"	"create aggregate var_pop(val date) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
5869	"var_pop"	"create aggregate var_pop(val time) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
5873	"var_pop"	"create aggregate var_pop(val timestamp) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
5877	"median"	"create aggregate median(val tinyint) returns tinyint\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
5881	"median"	"create aggregate median(val smallint) returns smallint\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
5885	"median"	"create aggregate median(val integer) returns integer\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
5889	"median"	"create aggregate median(val wrd) returns wrd\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
5893	"median"	"create aggregate median(val bigint) returns bigint\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
5897	"median"	"create aggregate median(val decimal) returns decimal\n \texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
5901	"median"	"create aggregate median(val real) returns real\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
5905	"median"	"create aggregate median(val double) returns double\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
5909	"median"	"create aggregate median(val date) returns date\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
5913	"median"	"create aggregate median(val time) returns time\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
5917	"median"	"create aggregate median(val timestamp) returns timestamp\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
5921	"quantile"	"create aggregate quantile(val tinyint, q double) returns tinyint\n \texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
5926	"quantile"	"create aggregate quantile(val smallint, q double) returns smallint\n \texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
5931	"quantile"	"create aggregate quantile(val integer, q double) returns integer\n \texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
5936	"quantile"	"create aggregate quantile(val wrd, q double) returns wrd\n\texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
5941	"quantile"	"create aggregate quantile(val bigint, q double) returns bigint\n\texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
5946	"quantile"	"create aggregate quantile(val decimal, q double) returns decimal\n \texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
5951	"quantile"	"create aggregate quantile(val real, q double) returns real\n\texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
5956	"quantile"	"create aggregate quantile(val double, q double) returns double\n\texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
5961	"quantile"	"create aggregate quantile(val date, q double) returns date\n\texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
5966	"quantile"	"create aggregate quantile(val time, q double) returns time\n\texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
5971	"quantile"	"create aggregate quantile(val timestamp, q double) returns timestamp\n\texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
5976	"corr"	"create aggregate corr(e1 tinyint, e2 tinyint) returns tinyint\n\texternal name \"aggr\".\"corr\";"	"aggr"	true	3	false	2000
5981	"corr"	"create aggregate corr(e1 smallint, e2 smallint) returns smallint\n\texternal name \"aggr\".\"corr\";"	"aggr"	true	3	false	2000
5986	"corr"	"create aggregate corr(e1 integer, e2 integer) returns integer\n\texternal name \"aggr\".\"corr\";"	"aggr"	true	3	false	2000
5991	"corr"	"create aggregate corr(e1 wrd, e2 wrd) returns wrd\n\texternal name \"aggr\".\"corr\";"	"aggr"	true	3	false	2000
5996	"corr"	"create aggregate corr(e1 bigint, e2 bigint) returns bigint\n\texternal name \"aggr\".\"corr\";"	"aggr"	true	3	false	2000
6001	"corr"	"create aggregate corr(e1 real, e2 real) returns real\n\texternal name \"aggr\".\"corr\";"	"aggr"	true	3	false	2000
6006	"corr"	"create aggregate corr(e1 double, e2 double) returns double\n\texternal name \"aggr\".\"corr\";"	"aggr"	true	3	false	2000
6024	"mbr"	"-- currently we only use mbr instead of\n-- Envelope():Geometry\n-- as that returns Geometry objects, and we prefer the explicit mbr's\n-- minimum bounding rectangle (mbr)\ncreate function mbr (g geometry) returns mbr external name geom.mbr;"	"geom"	true	1	false	2000
6028	"mbroverlaps"	"create function mbroverlaps(a mbr, b mbr) returns boolean external name geom.\"mbroverlaps\";"	"geom"	true	1	false	2000
6033	"geomfromtext"	"-- The srid in the *FromText Functions is currently not used\ncreate function geomfromtext(wkt string, srid smallint) returns geometry external name geom.\"GeomFromText\";"	"geom"	true	1	false	2000
6038	"pointfromtext"	"create function pointfromtext(wkt string, srid smallint) returns point external name geom.\"PointFromText\";"	"geom"	true	1	false	2000
6043	"linefromtext"	"create function linefromtext(wkt string, srid smallint) returns linestring external name geom.\"LineFromText\";"	"geom"	true	1	false	2000
6048	"polyfromtext"	"create function polyfromtext(wkt string, srid smallint) returns polygon external name geom.\"PolyFromText\";"	"geom"	true	1	false	2000
6053	"mpointfromtext"	"create function mpointfromtext(wkt string, srid smallint) returns multipoint external name geom.\"MultiPointFromText\";"	"geom"	true	1	false	2000
6058	"mlinefromtext"	"create function mlinefromtext(wkt string, srid smallint) returns multilinestring external name geom.\"MultiLineFromText\";"	"geom"	true	1	false	2000
6063	"mpolyfromtext"	"create function mpolyfromtext(wkt string, srid smallint) returns multipolygon external name geom.\"MultiPolyFromText\";"	"geom"	true	1	false	2000
6068	"geomcollectionfromtext"	"create function geomcollectionfromtext(wkt string, srid smallint) returns multipolygon external name geom.\"GeomCollectionFromText\";"	"geom"	true	1	false	2000
6073	"polygonfromtext"	"-- alias\ncreate function polygonfromtext(wkt string, srid smallint) returns polygon external name geom.\"PolyFromText\";"	"geom"	true	1	false	2000
6078	"astext"	"create function astext(g geometry) returns string external name geom.\"AsText\";"	"geom"	true	1	false	2000
6082	"x"	"create function x(g geometry) returns double external name geom.\"X\";"	"geom"	true	1	false	2000
6086	"y"	"create function y(g geometry) returns double external name geom.\"Y\";"	"geom"	true	1	false	2000
6090	"point"	"create function point(x double,y double) returns point external name geom.point;"	"geom"	true	1	false	2000
6095	"dimension"	"-- CREATE FUNCTION Point(g Geometry) RETURNS Point external name geom.point;\n-- CREATE FUNCTION Curve(g Geometry) RETURNS Curve external name geom.curve;\n-- CREATE FUNCTION LineString(g Geometry) RETURNS LineString external name geom.linestring;\n-- CREATE FUNCTION Surface(g Geometry) RETURNS Surface external name geom.surface;\n-- CREATE FUNCTION Polygon(g Geometry) RETURNS Polygon external name geom.polygon;\n\n-- ogc basic methods\ncreate function dimension(g geometry) returns integer external name geom.\"Dimension\";"	"geom"	true	1	false	2000
6099	"geometrytypeid"	"create function geometrytypeid(g geometry) returns integer external name geom.\"GeometryTypeId\";"	"geom"	true	1	false	2000
6103	"srid"	"create function srid(g geometry) returns integer external name geom.\"SRID\";"	"geom"	true	1	false	2000
6107	"envelope"	"create function envelope(g geometry) returns geometry external name geom.\"Envelope\";"	"geom"	true	1	false	2000
6111	"isempty"	"create function isempty(g geometry) returns boolean external name geom.\"IsEmpty\";"	"geom"	true	1	false	2000
6115	"issimple"	"create function issimple(g geometry) returns boolean external name geom.\"IsSimple\";"	"geom"	true	1	false	2000
6119	"boundary"	"create function boundary(g geometry) returns geometry external name geom.\"Boundary\";"	"geom"	true	1	false	2000
6123	"equals"	"-- ogc spatial relation methods\ncreate function equals(a geometry, b geometry) returns boolean external name geom.\"Equals\";"	"geom"	true	1	false	2000
6128	"disjoint"	"create function disjoint(a geometry, b geometry) returns boolean external name geom.\"Disjoint\";"	"geom"	true	1	false	2000
6133	"Intersect"	"create function \"Intersect\"(a geometry, b geometry) returns boolean external name geom.\"Intersect\";"	"geom"	true	1	false	2000
6138	"touches"	"create function touches(a geometry, b geometry) returns boolean external name geom.\"Touches\";"	"geom"	true	1	false	2000
6143	"crosses"	"create function crosses(a geometry, b geometry) returns boolean external name geom.\"Crosses\";"	"geom"	true	1	false	2000
6148	"within"	"create function within(a geometry, b geometry) returns boolean external name geom.\"Within\";"	"geom"	true	1	false	2000
6153	"contains"	"create function contains(a geometry, b geometry) returns boolean external name geom.\"Contains\";"	"geom"	true	1	false	2000
6158	"overlaps"	"create function overlaps(a geometry, b geometry) returns boolean external name geom.\"Overlaps\";"	"geom"	true	1	false	2000
6163	"relate"	"create function relate(a geometry, b geometry, pattern string) returns boolean external name geom.\"Relate\";"	"geom"	true	1	false	2000
6169	"area"	"-- ogc Spatial Analysis methods\n\ncreate function area(g geometry) returns float external name geom.\"Area\";"	"geom"	true	1	false	2000
6173	"length"	"create function length(g geometry) returns float external name geom.\"Length\";"	"geom"	true	1	false	2000
6177	"distance"	"create function distance(a geometry, b geometry) returns float external name geom.\"Distance\";"	"geom"	true	1	false	2000
6182	"buffer"	"create function buffer(a geometry, distance float) returns geometry external name geom.\"Buffer\";"	"geom"	true	1	false	2000
6187	"convexhull"	"create function convexhull(a geometry) returns geometry external name geom.\"ConvexHull\";"	"geom"	true	1	false	2000
6191	"intersection"	"create function intersection(a geometry, b geometry) returns geometry external name geom.\"Intersection\";"	"geom"	true	1	false	2000
6196	"Union"	"create function \"Union\"(a geometry, b geometry) returns geometry external name geom.\"Union\";"	"geom"	true	1	false	2000
6201	"difference"	"create function difference(a geometry, b geometry) returns geometry external name geom.\"Difference\";"	"geom"	true	1	false	2000
6206	"symdifference"	"create function symdifference(a geometry, b geometry) returns geometry external name geom.\"SymDifference\";"	"geom"	true	1	false	2000
6212	"json_filter"	"-- access the top level key by name, return its value\ncreate function sys.json_filter(js json, name string)\nreturns json external name json.filter;"	"json"	true	1	false	2000
6217	"json_filter_all"	"create function sys.json_filter_all(js json, name string)\nreturns json external name json.filterall;"	"json"	true	1	false	2000
6222	"json_path"	"-- a simple path extractor\ncreate function sys.json_path(js json, e string)\nreturns json external name json.path;"	"json"	true	1	false	2000
6227	"json_text"	"-- a simple path extractor as plain text\ncreate function sys.json_text(js json, e string)\nreturns string external name json.text;"	"json"	true	1	false	2000
6232	"json_isvalid"	"-- test string for JSON compliancy\ncreate function sys.json_isvalid(js string)\nreturns bool external name json.isvalid;"	"json"	true	1	false	2000
6236	"json_isvalidobject"	"create function sys.json_isvalidobject(js string)\nreturns bool external name json.isvalidobject;"	"json"	true	1	false	2000
6240	"json_isvalidarray"	"create function sys.json_isvalidarray(js string)\nreturns bool external name json.isvalidarray;"	"json"	true	1	false	2000
6244	"json_length"	"-- return the number of primary components\ncreate function sys.json_length(js json)\nreturns integer external name json.length;"	"json"	true	1	false	2000
6248	"chi2prob"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- (co) Arjen de Rijke, Bart Scheers\n-- Use statistical functions from gsl library\n\n-- Calculate Chi squared probability\ncreate function sys.chi2prob(chi2 double, datapoints double)\nreturns double external name gsl.\"chi2prob\";"	"gsl"	true	1	false	2000
6265	"storage"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- Author M.Kersten\n-- This script gives the database administrator insight in the actual\n-- footprint of the persistent tables and the maximum playground used\n-- when indices are introduced upon them.\n-- By chancing the storagemodelinput table directly, the footprint for\n-- yet to be loaded databases can be assessed.\n\n-- The actual storage footprint of an existing database can be\n-- obtained by the table procuding function storage()\n-- It represents the actual state of affairs, i.e. storage on disk\n-- of columns and foreign key indices, and possible temporary hash indices.\n-- For strings we take a sample to determine their average length.\n\ncreate function sys.storage()\nreturns table (\"schema\" string, \"table\" string, \"column\" string, \"type\" string, location string, \"count\" bigint, typewidth int, columnsize bigint, heapsize bigint, indices bigint, sorted boolean)\nexternal name sql.storage;"	"sql"	true	1	false	2000
6293	"storagemodelinit"	"-- this table can be adjusted to reflect the anticipated final database size\n\n-- The model input can be derived from the current database using\ncreate procedure sys.storagemodelinit()\nbegin\n\tdelete from sys.storagemodelinput;\n\n\tinsert into sys.storagemodelinput\n\tselect x.\"schema\", x.\"table\", x.\"column\", x.\"type\", x.typewidth, x.count, 0, x.typewidth, false, x.sorted from sys.storage() x;\n\n\tupdate sys.storagemodelinput\n\tset reference = true\n\twhere concat(concat(\"schema\",\"table\"), \"column\") in (\n\t\tselect concat( concat(\"fkschema\".\"name\", \"fktable\".\"name\"), \"fkkeycol\".\"name\" )\n\t\tfrom\t\"sys\".\"keys\" as    \"fkkey\",\n\t\t\t\t\"sys\".\"objects\" as \"fkkeycol\",\n\t\t\t\t\"sys\".\"tables\" as  \"fktable\",\n\t\t\t\t\"sys\".\"schemas\" as \"fkschema\"\n\t\twhere   \"fktable\".\"id\" = \"fkkey\".\"table_id\"\n\t\t\tand \"fkkey\".\"id\" = \"fkkeycol\".\"id\"\n\t\t\tand \"fkschema\".\"id\" = \"fktable\".\"schema_id\"\n\t\t\tand \"fkkey\".\"rkey\" > -1);\n\n\tupdate sys.storagemodelinput\n\tset \"distinct\" = \"count\" -- assume all distinct\n\twhere \"type\" = 'varchar' or \"type\"='clob';\nend;"	"user"	true	2	false	2000
6295	"columnsize"	"-- The predicted storage footprint of the complete database\n-- determines the amount of diskspace needed for persistent storage\n-- and the upperbound when all possible index structures are created.\n-- The storage requirement for foreign key joins is split amongst the participants.\n\ncreate function sys.columnsize(nme string, i bigint, d bigint)\nreturns bigint\nbegin\n\tcase\n\twhen nme = 'boolean' then return i;\n\twhen nme = 'char' then return 2*i;\n\twhen nme = 'smallint' then return 2 * i;\n\twhen nme = 'int'\t then return 4 * i;\n\twhen nme = 'bigint'\t then return 8 * i;\n\twhen nme = 'timestamp' then return 8 * i;\n\twhen  nme = 'varchar' then\n\t\tcase\n\t\twhen cast(d as bigint) << 8 then return i;\n\t\twhen cast(d as bigint) << 16 then return 2 * i;\n\t\twhen cast(d as bigint) << 32 then return 4 * i;\n\t\telse return 8 * i;\n\t\tend case;\n\telse return 8 * i;\n\tend case;\nend;"	"user"	true	1	false	2000
6301	"heapsize"	"create function sys.heapsize(tpe string, i bigint, w int)\nreturns bigint\nbegin\n\tif  tpe <> 'varchar' and tpe <> 'clob'\n\tthen\n\t\treturn 0;\n\tend if;\n\treturn 10240 + i * w;\nend;"	"user"	true	1	false	2000
6307	"indexsize"	"create function sys.indexsize(b boolean, i bigint)\nreturns bigint\nbegin\n\t-- assume non-compound keys\n\tif  b = true\n\tthen\n\t\treturn 8 * i;\n\tend if;\n\treturn 0;\nend;"	"user"	true	1	false	2000
6322	"storagemodel"	"create function sys.storagemodel()\nreturns table (\n\t\"schema\" string,\n\t\"table\" string,\n\t\"column\" string,\n\t\"type\" string,\n\t\"count\"\tbigint,\n\tcolumnsize bigint,\n\theapsize bigint,\n\tindices bigint,\n\tsorted boolean)\nbegin\n\treturn select i.\"schema\", i.\"table\", i.\"column\", i.\"type\", i.\"count\",\n\tcolumnsize(i.\"type\", i.count, i.\"distinct\"),\n\theapsize(i.\"type\", i.\"distinct\", i.\"atomwidth\"),\n\tindexsize(i.\"reference\", i.\"count\"),\n\ti.sorted\n\tfrom sys.storagemodelinput i;\nend;"	"user"	true	1	false	2000
6360	"analyze"	"create procedure analyze()\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6362	"analyze"	"create procedure analyze(tbl string)\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6365	"analyze"	"create procedure analyze(sch string, tbl string)\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6369	"analyze"	"create procedure analyze(sch string, tbl string, col string)\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6374	"analyze"	"-- control the sample size\ncreate procedure analyze(\"sample\" bigint)\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6377	"analyze"	"create procedure analyze(tbl string, \"sample\" bigint)\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6381	"analyze"	"create procedure analyze(sch string, tbl string, \"sample\" bigint)\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6386	"analyze"	"create procedure analyze(sch string, tbl string, col string, \"sample\" bigint)\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6392	"reverse"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- add function signatures to SQL catalog\n\n\n-- Reverse a string\ncreate function reverse(src string)\nreturns string external name udf.reverse;"	"udf"	true	1	false	2000
6396	"fuse"	"-- fuse two (1-byte) tinyint values into one (2-byte) smallint value\ncreate function fuse(one tinyint, two tinyint)\nreturns smallint external name udf.fuse;"	"udf"	true	1	false	2000
6401	"fuse"	"-- fuse two (2-byte) smallint values into one (4-byte) integer value\ncreate function fuse(one smallint, two smallint)\nreturns integer external name udf.fuse;"	"udf"	true	1	false	2000
6406	"fuse"	"-- fuse two (4-byte) integer values into one (8-byte) bigint value\ncreate function fuse(one integer, two integer)\nreturns bigint external name udf.fuse;"	"udf"	true	1	false	2000
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."idxs" (
	"id"       INTEGER,
	"table_id" INTEGER,
	"type"     INTEGER,
	"name"     VARCHAR(1024)
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."keys" (
	"id"       INTEGER,
	"table_id" INTEGER,
	"type"     INTEGER,
	"name"     VARCHAR(1024),
	"rkey"     INTEGER,
	"action"   INTEGER
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."objects" (
	"id"   INTEGER,
	"name" VARCHAR(1024),
	"nr"   INTEGER
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."privileges" (
	"obj_id"     INTEGER,
	"auth_id"    INTEGER,
	"privileges" INTEGER,
	"grantor"    INTEGER,
	"grantable"  INTEGER
);
COPY 19 RECORDS INTO "sys"."privileges" FROM stdin USING DELIMITERS '\t','\n','"';
2001	1	1	0	0
2006	1	1	0	0
2015	1	1	0	0
2024	1	1	0	0
2032	1	1	0	0
2042	1	1	0	0
2046	1	1	0	0
2055	1	1	0	0
2064	1	1	0	0
2075	1	1	0	0
2082	1	1	0	0
2087	1	1	0	0
2098	1	1	0	0
5077	1	1	0	0
5087	1	1	0	0
5119	1	1	0	0
5122	1	1	0	0
5126	1	1	0	0
6412	1	1	3	0
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."schemas" (
	"id"            INTEGER,
	"name"          VARCHAR(1024),
	"authorization" INTEGER,
	"owner"         INTEGER
);
COPY 2 RECORDS INTO "sys"."schemas" FROM stdin USING DELIMITERS '\t','\n','"';
2000	"sys"	2	3
2102	"tmp"	2	3
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."sequences" (
	"id"        INTEGER,
	"schema_id" INTEGER,
	"name"      VARCHAR(256),
	"start"     BIGINT,
	"minvalue"  BIGINT,
	"maxvalue"  BIGINT,
	"increment" BIGINT,
	"cacheinc"  BIGINT,
	"cycle"     BOOLEAN
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."statistics" (
	"schema" CHARACTER LARGE OBJECT,
	"table"  CHARACTER LARGE OBJECT,
	"column" CHARACTER LARGE OBJECT,
	"type"   CHARACTER LARGE OBJECT,
	"width"  INTEGER,
	"stamp"  TIMESTAMP,
	"sample" BIGINT,
	"count"  BIGINT,
	"unique" BIGINT,
	"nils"   BIGINT,
	"minval" CHARACTER LARGE OBJECT,
	"maxval" CHARACTER LARGE OBJECT,
	"sorted" BOOLEAN
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."storagemodelinput" (
	"schema"    CHARACTER LARGE OBJECT,
	"table"     CHARACTER LARGE OBJECT,
	"column"    CHARACTER LARGE OBJECT,
	"type"      CHARACTER LARGE OBJECT,
	"typewidth" INTEGER,
	"count"     BIGINT,
	"distinct"  BIGINT,
	"atomwidth" INTEGER,
	"reference" BOOLEAN,
	"sorted"    BOOLEAN
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."systemfunctions" (
	"function_id" INTEGER
);
COPY 1264 RECORDS INTO "sys"."systemfunctions" FROM stdin USING DELIMITERS '\t','\n','"';
28
29
30
31
32
33
34
35
36
37
38
42
43
44
45
48
49
50
68
69
70
71
72
73
74
75
76
77
78
79
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678
679
680
681
682
683
684
685
686
687
688
689
690
691
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
820
821
822
823
824
825
826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878
879
880
881
882
883
884
885
886
887
888
889
890
891
892
893
894
895
896
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
939
940
941
942
943
944
945
946
947
948
949
950
951
952
953
954
955
956
957
958
959
960
961
962
963
964
965
966
967
968
969
970
971
972
973
974
975
976
977
978
979
980
981
982
983
984
985
986
987
988
989
990
991
992
993
994
995
996
997
998
999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
1036
1037
1038
1039
1040
1041
1042
1043
1044
1045
1046
1047
1048
1049
1050
1051
1052
1053
1054
27
39
40
41
46
47
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
80
81
82
83
84
85
86
5101
5105
5113
5133
5138
5143
5147
5151
5154
5158
5162
5166
5170
5174
5178
5182
5186
5190
5194
5198
5202
5206
5210
5217
5223
5228
5234
5238
5242
5246
5251
5255
5259
5263
5267
5279
5293
5335
5337
5339
5342
5357
5374
5378
5382
5386
5390
5394
5398
5400
5404
5408
5412
5416
5424
5431
5438
5445
5452
5459
5466
5473
5480
5487
5494
5501
5508
5515
5522
5529
5536
5539
5550
5561
5564
5568
5571
5575
5578
5585
5590
5596
5602
5607
5612
5616
5623
5629
5632
5639
5650
5670
5673
5686
5699
5702
5705
5708
5711
5714
5717
5721
5725
5729
5733
5737
5741
5745
5749
5753
5757
5761
5765
5769
5773
5777
5781
5785
5789
5793
5797
5801
5805
5809
5813
5817
5821
5825
5829
5833
5837
5841
5845
5849
5853
5857
5861
5865
5869
5873
5877
5881
5885
5889
5893
5897
5901
5905
5909
5913
5917
5921
5926
5931
5936
5941
5946
5951
5956
5961
5966
5971
5976
5981
5986
5991
5996
6001
6006
6024
6028
6033
6038
6043
6048
6053
6058
6063
6068
6073
6078
6082
6086
6090
6095
6099
6103
6107
6111
6115
6119
6123
6128
6133
6138
6143
6148
6153
6158
6163
6169
6173
6177
6182
6187
6191
6196
6201
6206
6212
6217
6222
6227
6232
6236
6240
6244
6248
6265
6293
6295
6301
6307
6322
6360
6362
6365
6369
6374
6377
6381
6386
6392
6396
6401
6406
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."triggers" (
	"id"          INTEGER,
	"name"        VARCHAR(1024),
	"table_id"    INTEGER,
	"time"        SMALLINT,
	"orientation" SMALLINT,
	"event"       SMALLINT,
	"old_name"    VARCHAR(1024),
	"new_name"    VARCHAR(1024),
	"condition"   VARCHAR(2048),
	"statement"   VARCHAR(2048)
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."types" (
	"id"         INTEGER,
	"systemname" VARCHAR(256),
	"sqlname"    VARCHAR(1024),
	"digits"     INTEGER,
	"scale"      INTEGER,
	"radix"      INTEGER,
	"eclass"     INTEGER,
	"schema_id"  INTEGER
);
COPY 43 RECORDS INTO "sys"."types" FROM stdin USING DELIMITERS '\t','\n','"';
0	"void"	"any"	0	0	0	0	0
1	"bat"	"table"	0	0	0	1	0
2	"ptr"	"ptr"	0	0	0	1	0
3	"bit"	"boolean"	1	0	2	2	0
4	"str"	"char"	0	0	0	3	0
5	"str"	"varchar"	0	0	0	4	0
6	"str"	"clob"	0	0	0	4	0
7	"bte"	"tinyint"	8	1	2	6	0
8	"sht"	"smallint"	16	1	2	6	0
9	"int"	"int"	32	1	2	6	0
10	"lng"	"bigint"	64	1	2	6	0
11	"oid"	"oid"	63	0	2	6	0
12	"wrd"	"wrd"	64	1	2	6	0
13	"bte"	"decimal"	2	1	10	8	0
14	"sht"	"decimal"	4	1	10	8	0
15	"int"	"decimal"	9	1	10	8	0
16	"lng"	"decimal"	19	1	10	8	0
17	"flt"	"real"	24	2	2	9	0
18	"dbl"	"double"	53	2	2	9	0
19	"int"	"month_interval"	32	0	2	7	0
20	"lng"	"sec_interval"	19	1	10	7	0
21	"daytime"	"time"	7	0	0	10	0
22	"daytime"	"timetz"	7	1	0	10	0
23	"date"	"date"	0	0	0	11	0
24	"timestamp"	"timestamp"	7	0	0	12	0
25	"timestamp"	"timestamptz"	7	1	0	12	0
26	"sqlblob"	"blob"	0	0	0	5	0
5152	"url"	"url"	0	0	0	13	2000
5232	"inet"	"inet"	0	0	0	13	2000
6010	"wkb"	"point"	0	0	0	13	2000
6011	"wkb"	"curve"	0	0	0	13	2000
6012	"wkb"	"linestring"	0	0	0	13	2000
6013	"wkb"	"surface"	0	0	0	13	2000
6014	"wkb"	"polygon"	0	0	0	13	2000
6015	"wkb"	"multipoint"	0	0	0	13	2000
6016	"wkb"	"multicurve"	0	0	0	13	2000
6017	"wkb"	"multilinestring"	0	0	0	13	2000
6018	"wkb"	"multisurface"	0	0	0	13	2000
6019	"wkb"	"multipolygon"	0	0	0	13	2000
6020	"wkb"	"geometry"	0	0	0	13	2000
6021	"wkb"	"geomcollection"	0	0	0	13	2000
6022	"mbr"	"mbr"	0	0	0	13	2000
6210	"json"	"json"	0	0	0	13	2000
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."user_role" (
	"login_id" INTEGER,
	"role_id"  INTEGER
);
COMMIT;

# 13:32:07 >  
# 13:32:07 >  "Done."
# 13:32:07 >  

