stdout of test 'MAL-signatures_geom` in directory 'clients` itself:


# 14:24:10 >  
# 14:24:10 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=31236" "--set" "mapi_usock=/var/tmp/mtest-21213/.s.monetdb.31236" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/sjoerd/Monet-candidate/var/MonetDB/mTests_clients" "--set" "mal_listing=2"
# 14:24:10 >  

# MonetDB 5 server v11.17.0
# This is an unreleased version
# Serving database 'mTests_clients', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2014 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://madrid.ins.cwi.nl:31236/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-21213/.s.monetdb.31236
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.

# 14:24:10 >  
# 14:24:10 >  "mclient" "-lmal" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-21213" "--port=31236"
# 14:24:10 >  

#?*)
command aggr.avg(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1]) (X_4:bat[:oid,:dbl],X_5:bat[:oid,:wrd]) 
address AGGRavg23_dbl;
comment Grouped tail average on hge, also returns count

command aggr.avg(b:bat[:oid,:hge],e:bat[:oid,:any_1]) (X_3:bat[:oid,:dbl],X_4:bat[:oid,:wrd]) 
address AGGRavg22_dbl;
comment Grouped tail average on hge, also returns count

command aggr.avg(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRavg13_dbl;
comment Grouped tail average on hge

command aggr.avg(b:bat[:oid,:hge],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRavg12_dbl;
comment Grouped tail average on hge

command aggr.avg(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]) (X_4:bat[:oid,:dbl],X_5:bat[:oid,:wrd]) 
address AGGRavg23_dbl;
comment Grouped tail average on dbl, also returns count

command aggr.avg(b:bat[:oid,:dbl],e:bat[:oid,:any_1]) (X_3:bat[:oid,:dbl],X_4:bat[:oid,:wrd]) 
address AGGRavg22_dbl;
comment Grouped tail average on dbl, also returns count

command aggr.avg(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRavg13_dbl;
comment Grouped tail average on dbl

command aggr.avg(b:bat[:oid,:dbl],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRavg12_dbl;
comment Grouped tail average on dbl

command aggr.avg(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]) (X_4:bat[:oid,:dbl],X_5:bat[:oid,:wrd]) 
address AGGRavg23_dbl;
comment Grouped tail average on flt, also returns count

command aggr.avg(b:bat[:oid,:flt],e:bat[:oid,:any_1]) (X_3:bat[:oid,:dbl],X_4:bat[:oid,:wrd]) 
address AGGRavg22_dbl;
comment Grouped tail average on flt, also returns count

command aggr.avg(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRavg13_dbl;
comment Grouped tail average on flt

command aggr.avg(b:bat[:oid,:flt],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRavg12_dbl;
comment Grouped tail average on flt

command aggr.avg(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]) (X_4:bat[:oid,:dbl],X_5:bat[:oid,:wrd]) 
address AGGRavg23_dbl;
comment Grouped tail average on lng, also returns count

command aggr.avg(b:bat[:oid,:lng],e:bat[:oid,:any_1]) (X_3:bat[:oid,:dbl],X_4:bat[:oid,:wrd]) 
address AGGRavg22_dbl;
comment Grouped tail average on lng, also returns count

command aggr.avg(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRavg13_dbl;
comment Grouped tail average on lng

command aggr.avg(b:bat[:oid,:lng],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRavg12_dbl;
comment Grouped tail average on lng

command aggr.avg(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]) (X_4:bat[:oid,:dbl],X_5:bat[:oid,:wrd]) 
address AGGRavg23_dbl;
comment Grouped tail average on wrd, also returns count

command aggr.avg(b:bat[:oid,:wrd],e:bat[:oid,:any_1]) (X_3:bat[:oid,:dbl],X_4:bat[:oid,:wrd]) 
address AGGRavg22_dbl;
comment Grouped tail average on wrd, also returns count

command aggr.avg(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRavg13_dbl;
comment Grouped tail average on wrd

command aggr.avg(b:bat[:oid,:wrd],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRavg12_dbl;
comment Grouped tail average on wrd

command aggr.avg(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]) (X_4:bat[:oid,:dbl],X_5:bat[:oid,:wrd]) 
address AGGRavg23_dbl;
comment Grouped tail average on int, also returns count

command aggr.avg(b:bat[:oid,:int],e:bat[:oid,:any_1]) (X_3:bat[:oid,:dbl],X_4:bat[:oid,:wrd]) 
address AGGRavg22_dbl;
comment Grouped tail average on int, also returns count

command aggr.avg(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRavg13_dbl;
comment Grouped tail average on int

command aggr.avg(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRavg12_dbl;
comment Grouped tail average on int

command aggr.avg(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]) (X_4:bat[:oid,:dbl],X_5:bat[:oid,:wrd]) 
address AGGRavg23_dbl;
comment Grouped tail average on sht, also returns count

command aggr.avg(b:bat[:oid,:sht],e:bat[:oid,:any_1]) (X_3:bat[:oid,:dbl],X_4:bat[:oid,:wrd]) 
address AGGRavg22_dbl;
comment Grouped tail average on sht, also returns count

command aggr.avg(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRavg13_dbl;
comment Grouped tail average on sht

command aggr.avg(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRavg12_dbl;
comment Grouped tail average on sht

command aggr.avg(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]) (X_4:bat[:oid,:dbl],X_5:bat[:oid,:wrd]) 
address AGGRavg23_dbl;
comment Grouped tail average on bte, also returns count

command aggr.avg(b:bat[:oid,:bte],e:bat[:oid,:any_1]) (X_3:bat[:oid,:dbl],X_4:bat[:oid,:wrd]) 
address AGGRavg22_dbl;
comment Grouped tail average on bte, also returns count

command aggr.avg(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRavg13_dbl;
comment Grouped tail average on bte

command aggr.avg(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRavg12_dbl;
comment Grouped tail average on bte

command aggr.avg(b:bat[:oid,:any_2]):dbl 
address ALGavg;
comment Gives the avg of all tail values

function aggr.corr(e1:bat[:oid,:hge],e2:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:hge];
function aggr.covar(e1:bat[:oid,:hge],e2:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:hge];
function aggr.corr(e1:bat[:oid,:hge],e2:bat[:oid,:hge]):hge;
function aggr.covar(e1:bat[:oid,:hge],e2:bat[:oid,:hge]):hge;
function aggr.corr(e1:bat[:oid,:dbl],e2:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:dbl];
function aggr.covar(e1:bat[:oid,:dbl],e2:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:dbl];
function aggr.corr(e1:bat[:oid,:dbl],e2:bat[:oid,:dbl]):dbl;
function aggr.covar(e1:bat[:oid,:dbl],e2:bat[:oid,:dbl]):dbl;
function aggr.corr(e1:bat[:oid,:flt],e2:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:flt];
function aggr.covar(e1:bat[:oid,:flt],e2:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:flt];
function aggr.corr(e1:bat[:oid,:flt],e2:bat[:oid,:flt]):flt;
function aggr.covar(e1:bat[:oid,:flt],e2:bat[:oid,:flt]):flt;
function aggr.corr(e1:bat[:oid,:lng],e2:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:lng];
function aggr.covar(e1:bat[:oid,:lng],e2:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:lng];
function aggr.corr(e1:bat[:oid,:lng],e2:bat[:oid,:lng]):lng;
function aggr.covar(e1:bat[:oid,:lng],e2:bat[:oid,:lng]):lng;
function aggr.corr(e1:bat[:oid,:wrd],e2:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:wrd];
function aggr.covar(e1:bat[:oid,:wrd],e2:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:wrd];
function aggr.corr(e1:bat[:oid,:wrd],e2:bat[:oid,:wrd]):wrd;
function aggr.covar(e1:bat[:oid,:wrd],e2:bat[:oid,:wrd]):wrd;
function aggr.corr(e1:bat[:oid,:int],e2:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:int];
function aggr.covar(e1:bat[:oid,:int],e2:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:int];
function aggr.corr(e1:bat[:oid,:int],e2:bat[:oid,:int]):int;
function aggr.covar(e1:bat[:oid,:int],e2:bat[:oid,:int]):int;
function aggr.corr(e1:bat[:oid,:sht],e2:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:sht];
function aggr.covar(e1:bat[:oid,:sht],e2:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:sht];
function aggr.corr(e1:bat[:oid,:sht],e2:bat[:oid,:sht]):sht;
function aggr.covar(e1:bat[:oid,:sht],e2:bat[:oid,:sht]):sht;
function aggr.corr(e1:bat[:oid,:bte],e2:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:bte];
function aggr.covar(e1:bat[:oid,:bte],e2:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:bte];
function aggr.corr(e1:bat[:oid,:bte],e2:bat[:oid,:bte]):bte;
function aggr.covar(e1:bat[:oid,:bte],e2:bat[:oid,:bte]):bte;
command aggr.count_no_nil(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:wrd] 
address AGGRcount3nonils;
command aggr.count(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:wrd] 
address AGGRcount3nils;
comment Grouped count

command aggr.count_no_nil(b:bat[:oid,:any_1],e:bat[:oid,:any_1]):bat[:oid,:wrd] 
address AGGRcount2nonils;
command aggr.count(b:bat[:void,:any_1],e:bat[:void,:any_2]):bat[:void,:wrd] 
address AGGRcount2nils;
command aggr.count(b:bat[:void,:any_1],e:bat[:oid,:any_2]):bat[:void,:wrd] 
address AGGRcount2nils;
comment Grouped count

command aggr.count(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2],ignorenils:bit):bat[:void,:wrd] 
address AGGRcount3;
command aggr.count(b:bat[:oid,:any_1],e:bat[:oid,:any_2],ignorenils:bit):bat[:oid,:wrd] 
address AGGRcount2;
comment Grouped count

command aggr.cardinality(b:bat[:oid,:any_2]):lng 
address ALGcard;
comment Return the cardinality of the BAT tail values.

command aggr.count_no_nil(b:bat[:any_1,:any_2]):wrd 
address ALGcount_no_nil;
comment Return the number of elements currently 	in a BAT ignoring BUNs with nil-tail

command aggr.count(b:bat[:any_1,:any],ignore_nils:bit):wrd 
address ALGcount_nil;
comment Return the number of elements currently in a BAT ignores 		BUNs with nil-tail iff ignore_nils==TRUE.

command aggr.count(b:bat[:any_1,:any]):wrd 
address ALGcount_bat;
comment Return the current size (in number of elements) in a BAT.

command aggr.exist(b:bat[:oid,:any_2],h:any_1):bit 
address ALGexist;

command aggr.jsonaggr(val:bat[:oid,:dbl]):str 
address JSONgroupStr;
comment Aggregate the double values to array.

command aggr.jsonaggr(val:bat[:oid,:str]):str 
address JSONgroupStr;
comment Aggregate the string values to array.

function aggr.median(b:bat[:oid,:any_1]):any_1;
command aggr.median(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:any_1] 
address AGGRmedian3;
comment Grouped median aggregate

command aggr.max(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:any_1] 
address AGGRmax3;
command aggr.min(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:any_1] 
address AGGRmin3;
command aggr.max(b:bat[:oid,:any_1],e:bat[:oid,:any_2]):bat[:oid,:any_1] 
address AGGRmax2;
command aggr.min(b:bat[:oid,:any_1],e:bat[:oid,:any_2]):bat[:oid,:any_1] 
address AGGRmin2;
command aggr.max(b:bat[:any_1,:any_2]):any_2 
address ALGmaxany;
comment Return the highest tail value or nil.

command aggr.min(b:bat[:any_1,:any_2]):any_2 
address ALGminany;
comment Return the lowest tail value or nil.

pattern aggr.prod(b:bat[:oid,:dbl],s:bat[:oid,:oid],nil_if_empty:bit):dbl 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:dbl],s:bat[:oid,:oid]):dbl 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:dbl],nil_if_empty:bit):dbl 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:dbl]):dbl 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:flt],s:bat[:oid,:oid],nil_if_empty:bit):dbl 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:flt],s:bat[:oid,:oid]):dbl 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:flt],nil_if_empty:bit):dbl 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:flt]):dbl 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:flt],s:bat[:oid,:oid],nil_if_empty:bit):flt 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:flt],s:bat[:oid,:oid]):flt 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:flt],nil_if_empty:bit):flt 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:flt]):flt 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:lng],s:bat[:oid,:oid],nil_if_empty:bit):dbl 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:lng],s:bat[:oid,:oid]):dbl 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:lng],nil_if_empty:bit):dbl 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:lng]):dbl 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:lng],s:bat[:oid,:oid],nil_if_empty:bit):lng 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:lng],s:bat[:oid,:oid]):lng 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:lng],nil_if_empty:bit):lng 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:lng]):lng 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:wrd],s:bat[:oid,:oid],nil_if_empty:bit):dbl 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:wrd],s:bat[:oid,:oid]):dbl 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:wrd],nil_if_empty:bit):dbl 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:wrd]):dbl 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:wrd],s:bat[:oid,:oid],nil_if_empty:bit):lng 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:wrd],s:bat[:oid,:oid]):lng 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:wrd],nil_if_empty:bit):lng 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:wrd]):lng 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:wrd],s:bat[:oid,:oid],nil_if_empty:bit):wrd 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:wrd],s:bat[:oid,:oid]):wrd 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:wrd],nil_if_empty:bit):wrd 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:wrd]):wrd 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:int],s:bat[:oid,:oid],nil_if_empty:bit):dbl 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:int],s:bat[:oid,:oid]):dbl 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:int],nil_if_empty:bit):dbl 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:int]):dbl 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:int],s:bat[:oid,:oid],nil_if_empty:bit):lng 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:int],s:bat[:oid,:oid]):lng 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:int],nil_if_empty:bit):lng 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:int]):lng 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:int],s:bat[:oid,:oid],nil_if_empty:bit):wrd 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:int],s:bat[:oid,:oid]):wrd 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:int],nil_if_empty:bit):wrd 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:int]):wrd 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:int],s:bat[:oid,:oid],nil_if_empty:bit):int 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:int],s:bat[:oid,:oid]):int 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:int],nil_if_empty:bit):int 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:int]):int 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:sht],s:bat[:oid,:oid],nil_if_empty:bit):dbl 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:sht],s:bat[:oid,:oid]):dbl 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:sht],nil_if_empty:bit):dbl 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:sht]):dbl 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:sht],s:bat[:oid,:oid],nil_if_empty:bit):lng 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:sht],s:bat[:oid,:oid]):lng 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:sht],nil_if_empty:bit):lng 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:sht]):lng 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:sht],s:bat[:oid,:oid],nil_if_empty:bit):wrd 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:sht],s:bat[:oid,:oid]):wrd 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:sht],nil_if_empty:bit):wrd 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:sht]):wrd 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:sht],s:bat[:oid,:oid],nil_if_empty:bit):int 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:sht],s:bat[:oid,:oid]):int 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:sht],nil_if_empty:bit):int 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:sht]):int 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:sht],s:bat[:oid,:oid],nil_if_empty:bit):sht 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:sht],s:bat[:oid,:oid]):sht 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:sht],nil_if_empty:bit):sht 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:sht]):sht 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit):dbl 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:bte],s:bat[:oid,:oid]):dbl 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:bte],nil_if_empty:bit):dbl 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:bte]):dbl 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit):lng 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:bte],s:bat[:oid,:oid]):lng 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:bte],nil_if_empty:bit):lng 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:bte]):lng 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit):wrd 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:bte],s:bat[:oid,:oid]):wrd 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:bte],nil_if_empty:bit):wrd 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:bte]):wrd 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit):int 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:bte],s:bat[:oid,:oid]):int 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:bte],nil_if_empty:bit):int 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:bte]):int 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit):sht 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:bte],s:bat[:oid,:oid]):sht 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:bte],nil_if_empty:bit):sht 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:bte]):sht 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit):bte 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:bte],s:bat[:oid,:oid]):bte 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:bte],nil_if_empty:bit):bte 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:bte]):bte 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:hge],s:bat[:oid,:oid],nil_if_empty:bit):dbl 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:hge],s:bat[:oid,:oid]):dbl 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:hge],nil_if_empty:bit):dbl 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:hge]):dbl 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:hge],s:bat[:oid,:oid],nil_if_empty:bit):hge 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:hge],s:bat[:oid,:oid]):hge 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:hge],nil_if_empty:bit):hge 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:hge]):hge 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:lng],s:bat[:oid,:oid],nil_if_empty:bit):hge 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:lng],s:bat[:oid,:oid]):hge 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:lng],nil_if_empty:bit):hge 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:lng]):hge 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:wrd],s:bat[:oid,:oid],nil_if_empty:bit):hge 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:wrd],s:bat[:oid,:oid]):hge 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:wrd],nil_if_empty:bit):hge 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:wrd]):hge 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:int],s:bat[:oid,:oid],nil_if_empty:bit):hge 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:int],s:bat[:oid,:oid]):hge 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:int],nil_if_empty:bit):hge 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:int]):hge 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:sht],s:bat[:oid,:oid],nil_if_empty:bit):hge 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:sht],s:bat[:oid,:oid]):hge 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:sht],nil_if_empty:bit):hge 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:sht]):hge 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit):hge 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:bte],s:bat[:oid,:oid]):hge 
address CMDBATprod;
comment Calculate aggregate product of B with candidate list.

pattern aggr.prod(b:bat[:oid,:bte],nil_if_empty:bit):hge 
address CMDBATprod;
comment Calculate aggregate product of B.

pattern aggr.prod(b:bat[:oid,:bte]):hge 
address CMDBATprod;
comment Calculate aggregate product of B.

command aggr.prod(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRprod3_hge;
comment Grouped tail product on hge

command aggr.prod(b:bat[:oid,:hge],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRprod2_hge;
comment Product over grouped tail product on hge

command aggr.prod(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRprod3_hge;
comment Grouped tail product on lng

command aggr.prod(b:bat[:oid,:lng],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRprod2_hge;
comment Product over grouped tail product on lng

command aggr.prod(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRprod3_hge;
comment Grouped tail product on wrd

command aggr.prod(b:bat[:oid,:wrd],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRprod2_hge;
comment Product over grouped tail product on wrd

command aggr.prod(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRprod3_hge;
comment Grouped tail product on int

command aggr.prod(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRprod2_hge;
comment Product over grouped tail product on int

command aggr.prod(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRprod3_hge;
comment Grouped tail product on sht

command aggr.prod(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRprod2_hge;
comment Product over grouped tail product on sht

command aggr.prod(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRprod3_hge;
comment Grouped tail product on bte

command aggr.prod(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRprod2_hge;
comment Product over grouped tail product on bte

command aggr.prod(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRprod3_dbl;
comment Grouped tail product on dbl

command aggr.prod(b:bat[:oid,:dbl],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRprod2_dbl;
comment Product over grouped tail product on dbl

command aggr.prod(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRprod3_dbl;
comment Grouped tail product on flt

command aggr.prod(b:bat[:oid,:flt],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRprod2_dbl;
comment Product over grouped tail product on flt

command aggr.prod(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:flt] 
address AGGRprod3_flt;
comment Grouped tail product on flt

command aggr.prod(b:bat[:oid,:flt],e:bat[:oid,:any_1]):bat[:oid,:flt] 
address AGGRprod2_flt;
comment Product over grouped tail product on flt

command aggr.prod(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] 
address AGGRprod3_lng;
comment Grouped tail product on lng

command aggr.prod(b:bat[:oid,:lng],e:bat[:oid,:any_1]):bat[:oid,:lng] 
address AGGRprod2_lng;
comment Product over grouped tail product on lng

command aggr.prod(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] 
address AGGRprod3_lng;
comment Grouped tail product on wrd

command aggr.prod(b:bat[:oid,:wrd],e:bat[:oid,:any_1]):bat[:oid,:lng] 
address AGGRprod2_lng;
comment Product over grouped tail product on wrd

command aggr.prod(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] 
address AGGRprod3_wrd;
comment Grouped tail product on wrd

command aggr.prod(b:bat[:oid,:wrd],e:bat[:oid,:any_1]):bat[:oid,:wrd] 
address AGGRprod2_wrd;
comment Product over grouped tail product on wrd

command aggr.prod(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] 
address AGGRprod3_lng;
comment Grouped tail product on int

command aggr.prod(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:lng] 
address AGGRprod2_lng;
comment Product over grouped tail product on int

command aggr.prod(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] 
address AGGRprod3_wrd;
comment Grouped tail product on int

command aggr.prod(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:wrd] 
address AGGRprod2_wrd;
comment Product over grouped tail product on int

command aggr.prod(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] 
address AGGRprod3_int;
comment Grouped tail product on int

command aggr.prod(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:int] 
address AGGRprod2_int;
comment Product over grouped tail product on int

command aggr.prod(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] 
address AGGRprod3_lng;
comment Grouped tail product on sht

command aggr.prod(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:lng] 
address AGGRprod2_lng;
comment Product over grouped tail product on sht

command aggr.prod(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] 
address AGGRprod3_wrd;
comment Grouped tail product on sht

command aggr.prod(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:wrd] 
address AGGRprod2_wrd;
comment Product over grouped tail product on sht

command aggr.prod(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] 
address AGGRprod3_int;
comment Grouped tail product on sht

command aggr.prod(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:int] 
address AGGRprod2_int;
comment Product over grouped tail product on sht

command aggr.prod(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:sht] 
address AGGRprod3_sht;
comment Grouped tail product on sht

command aggr.prod(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:sht] 
address AGGRprod2_sht;
comment Product over grouped tail product on sht

command aggr.prod(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] 
address AGGRprod3_lng;
comment Grouped tail product on bte

command aggr.prod(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:lng] 
address AGGRprod2_lng;
comment Product over grouped tail product on bte

command aggr.prod(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] 
address AGGRprod3_wrd;
comment Grouped tail product on bte

command aggr.prod(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:wrd] 
address AGGRprod2_wrd;
comment Product over grouped tail product on bte

command aggr.prod(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] 
address AGGRprod3_int;
comment Grouped tail product on bte

command aggr.prod(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:int] 
address AGGRprod2_int;
comment Product over grouped tail product on bte

command aggr.prod(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:sht] 
address AGGRprod3_sht;
comment Grouped tail product on bte

command aggr.prod(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:sht] 
address AGGRprod2_sht;
comment Product over grouped tail product on bte

command aggr.prod(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:bte] 
address AGGRprod3_bte;
comment Grouped tail product on bte

command aggr.prod(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:bte] 
address AGGRprod2_bte;
comment Product over grouped tail product on bte

function aggr.quantile(b:bat[:oid,:any_1],q:bat[:oid,:dbl]):any_1;
command aggr.quantile(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2],q:bat[:oid,:dbl]):bat[:oid,:any_1] 
address AGGRquantile3;
comment Grouped quantile aggregate

pattern aggr.sum(b:bat[:oid,:dbl],s:bat[:oid,:oid],nil_if_empty:bit):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:dbl],s:bat[:oid,:oid]):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:dbl],nil_if_empty:bit):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:dbl]):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:flt],s:bat[:oid,:oid],nil_if_empty:bit):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:flt],s:bat[:oid,:oid]):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:flt],nil_if_empty:bit):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:flt]):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:flt],s:bat[:oid,:oid],nil_if_empty:bit):flt 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:flt],s:bat[:oid,:oid]):flt 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:flt],nil_if_empty:bit):flt 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:flt]):flt 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:lng],s:bat[:oid,:oid],nil_if_empty:bit):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:lng],s:bat[:oid,:oid]):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:lng],nil_if_empty:bit):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:lng]):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:lng],s:bat[:oid,:oid],nil_if_empty:bit):lng 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:lng],s:bat[:oid,:oid]):lng 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:lng],nil_if_empty:bit):lng 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:lng]):lng 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:wrd],s:bat[:oid,:oid],nil_if_empty:bit):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:wrd],s:bat[:oid,:oid]):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:wrd],nil_if_empty:bit):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:wrd]):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:wrd],s:bat[:oid,:oid],nil_if_empty:bit):lng 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:wrd],s:bat[:oid,:oid]):lng 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:wrd],nil_if_empty:bit):lng 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:wrd]):lng 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:wrd],s:bat[:oid,:oid],nil_if_empty:bit):wrd 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:wrd],s:bat[:oid,:oid]):wrd 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:wrd],nil_if_empty:bit):wrd 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:wrd]):wrd 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:int],s:bat[:oid,:oid],nil_if_empty:bit):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:int],s:bat[:oid,:oid]):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:int],nil_if_empty:bit):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:int]):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:int],s:bat[:oid,:oid],nil_if_empty:bit):lng 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:int],s:bat[:oid,:oid]):lng 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:int],nil_if_empty:bit):lng 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:int]):lng 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:int],s:bat[:oid,:oid],nil_if_empty:bit):wrd 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:int],s:bat[:oid,:oid]):wrd 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:int],nil_if_empty:bit):wrd 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:int]):wrd 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:int],s:bat[:oid,:oid],nil_if_empty:bit):int 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:int],s:bat[:oid,:oid]):int 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:int],nil_if_empty:bit):int 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:int]):int 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:sht],s:bat[:oid,:oid],nil_if_empty:bit):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:sht],s:bat[:oid,:oid]):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:sht],nil_if_empty:bit):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:sht]):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:sht],s:bat[:oid,:oid],nil_if_empty:bit):lng 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:sht],s:bat[:oid,:oid]):lng 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:sht],nil_if_empty:bit):lng 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:sht]):lng 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:sht],s:bat[:oid,:oid],nil_if_empty:bit):wrd 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:sht],s:bat[:oid,:oid]):wrd 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:sht],nil_if_empty:bit):wrd 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:sht]):wrd 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:sht],s:bat[:oid,:oid],nil_if_empty:bit):int 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:sht],s:bat[:oid,:oid]):int 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:sht],nil_if_empty:bit):int 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:sht]):int 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:sht],s:bat[:oid,:oid],nil_if_empty:bit):sht 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:sht],s:bat[:oid,:oid]):sht 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:sht],nil_if_empty:bit):sht 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:sht]):sht 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:bte],s:bat[:oid,:oid]):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:bte],nil_if_empty:bit):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:bte]):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit):lng 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:bte],s:bat[:oid,:oid]):lng 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:bte],nil_if_empty:bit):lng 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:bte]):lng 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit):wrd 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:bte],s:bat[:oid,:oid]):wrd 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:bte],nil_if_empty:bit):wrd 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:bte]):wrd 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit):int 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:bte],s:bat[:oid,:oid]):int 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:bte],nil_if_empty:bit):int 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:bte]):int 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit):sht 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:bte],s:bat[:oid,:oid]):sht 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:bte],nil_if_empty:bit):sht 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:bte]):sht 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit):bte 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:bte],s:bat[:oid,:oid]):bte 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:bte],nil_if_empty:bit):bte 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:bte]):bte 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:hge],s:bat[:oid,:oid],nil_if_empty:bit):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:hge],s:bat[:oid,:oid]):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:hge],nil_if_empty:bit):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:hge]):dbl 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:hge],s:bat[:oid,:oid],nil_if_empty:bit):hge 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:hge],s:bat[:oid,:oid]):hge 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:hge],nil_if_empty:bit):hge 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:hge]):hge 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:lng],s:bat[:oid,:oid],nil_if_empty:bit):hge 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:lng],s:bat[:oid,:oid]):hge 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:lng],nil_if_empty:bit):hge 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:lng]):hge 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:wrd],s:bat[:oid,:oid],nil_if_empty:bit):hge 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:wrd],s:bat[:oid,:oid]):hge 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:wrd],nil_if_empty:bit):hge 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:wrd]):hge 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:int],s:bat[:oid,:oid],nil_if_empty:bit):hge 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:int],s:bat[:oid,:oid]):hge 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:int],nil_if_empty:bit):hge 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:int]):hge 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:sht],s:bat[:oid,:oid],nil_if_empty:bit):hge 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:sht],s:bat[:oid,:oid]):hge 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:sht],nil_if_empty:bit):hge 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:sht]):hge 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:bte],s:bat[:oid,:oid],nil_if_empty:bit):hge 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:bte],s:bat[:oid,:oid]):hge 
address CMDBATsum;
comment Calculate aggregate sum of B with candidate list.

pattern aggr.sum(b:bat[:oid,:bte],nil_if_empty:bit):hge 
address CMDBATsum;
comment Calculate aggregate sum of B.

pattern aggr.sum(b:bat[:oid,:bte]):hge 
address CMDBATsum;
comment Calculate aggregate sum of B.

command aggr.subvariancep(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancepcand_dbl;
comment Grouped variance (population/biased) aggregate with candidates list

command aggr.subvariancep(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancep_dbl;
comment Grouped variance (population/biased) aggregate

command aggr.subvariance(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancecand_dbl;
comment Grouped variance (sample/non-biased) aggregate with candidates list

command aggr.subvariance(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariance_dbl;
comment Grouped variance (sample/non-biased) aggregate

command aggr.substdevp(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevpcand_dbl;
comment Grouped standard deviation (population/biased) aggregate with candidates list

command aggr.substdevp(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevp_dbl;
comment Grouped standard deviation (population/biased) aggregate

command aggr.stdevp(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdevp3_dbl;
comment Grouped tail standard deviation (population/biased) on hge

command aggr.stdevp(b:bat[:oid,:hge],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdevp2_dbl;
comment Grouped tail standard deviation (population/biased) on hge

command aggr.substdev(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevcand_dbl;
comment Grouped standard deviation (sample/non-biased) aggregate with candidates list

command aggr.substdev(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdev_dbl;
comment Grouped standard deviation (sample/non-biased) aggregate

command aggr.stdev(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdev3_dbl;
comment Grouped tail standard deviation (sample/non-biased) on hge

command aggr.stdev(b:bat[:oid,:hge],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdev2_dbl;
comment Grouped tail standard deviation (sample/non-biased) on hge

command aggr.subavg(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit) (X_7:bat[:oid,:dbl],X_8:bat[:oid,:wrd]) 
address AGGRsubavg2cand_dbl;
comment Grouped average aggregate with candidates list, also returns count

command aggr.subavg(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit) (X_6:bat[:oid,:dbl],X_7:bat[:oid,:wrd]) 
address AGGRsubavg2_dbl;
comment Grouped average aggregate, also returns count

command aggr.subavg(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubavg1cand_dbl;
comment Grouped average aggregate with candidates list

command aggr.subavg(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubavg1_dbl;
comment Grouped average aggregate

command aggr.subprod(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubprodcand_hge;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubprod_hge;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubsumcand_hge;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubsum_hge;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRsum3_hge;
comment Grouped tail sum on hge

command aggr.sum(b:bat[:oid,:hge],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRsum2_hge;
comment Sum over grouped tail sum on hge

command aggr.subprod(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubprodcand_hge;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubprod_hge;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubsumcand_hge;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubsum_hge;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRsum3_hge;
comment Grouped tail sum on lng

command aggr.sum(b:bat[:oid,:lng],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRsum2_hge;
comment Sum over grouped tail sum on lng

command aggr.subprod(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubprodcand_hge;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubprod_hge;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubsumcand_hge;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubsum_hge;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRsum3_hge;
comment Grouped tail sum on wrd

command aggr.sum(b:bat[:oid,:wrd],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRsum2_hge;
comment Sum over grouped tail sum on wrd

command aggr.subprod(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubprodcand_hge;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubprod_hge;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubsumcand_hge;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubsum_hge;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRsum3_hge;
comment Grouped tail sum on int

command aggr.sum(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRsum2_hge;
comment Sum over grouped tail sum on int

command aggr.subprod(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubprodcand_hge;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubprod_hge;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubsumcand_hge;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubsum_hge;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRsum3_hge;
comment Grouped tail sum on sht

command aggr.sum(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRsum2_hge;
comment Sum over grouped tail sum on sht

command aggr.subprod(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubprodcand_hge;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubprod_hge;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubsumcand_hge;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:hge] 
address AGGRsubsum_hge;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRsum3_hge;
comment Grouped tail sum on bte

command aggr.sum(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:hge] 
address AGGRsum2_hge;
comment Sum over grouped tail sum on bte

command aggr.subjsonaggr(val:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit):bat[:oid,:str] 
address JSONsubjsoncand;
comment Grouped aggregation of values with candidates list.

command aggr.subjsonaggr(val:bat[:oid,:str],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit):bat[:oid,:str] 
address JSONsubjsoncand;
comment Grouped aggregation of values with candidates list.

command aggr.subjsonaggr(val:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit):bat[:oid,:str] 
address JSONsubjson;
comment Grouped aggregation of values.

command aggr.subjsonaggr(val:bat[:oid,:str],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit):bat[:oid,:str] 
address JSONsubjson;
comment Grouped aggregation of values.

command aggr.subquantile(b:bat[:oid,:any_1],q:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_2],s:bat[:oid,:oid],skip_nils:bit):bat[:oid,:any_1] 
address AGGRsubquantilecand;
comment Grouped median quantile with candidate list

command aggr.subquantile(b:bat[:oid,:any_1],q:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_2],skip_nils:bit):bat[:oid,:any_1] 
address AGGRsubquantile;
comment Grouped quantile aggregate

command aggr.subquantile(b:bat[:oid,:any_1],q:bat[:oid,:dbl],skip_nils:bit):bat[:oid,:any_1] 
address AGGRquantile;
comment Quantile aggregate

command aggr.submedian(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2],s:bat[:oid,:oid],skip_nils:bit):bat[:oid,:any_1] 
address AGGRsubmediancand;
comment Grouped median aggregate with candidate list

command aggr.submedian(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2],skip_nils:bit):bat[:oid,:any_1] 
address AGGRsubmedian;
comment Grouped median aggregate

command aggr.submedian(b:bat[:oid,:any_1],skip_nils:bit):bat[:oid,:any_1] 
address AGGRmedian;
comment Median aggregate

command aggr.subcount(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2],s:bat[:oid,:oid],skip_nils:bit):bat[:oid,:wrd] 
address AGGRsubcountcand;
comment Grouped count aggregate with candidates list

command aggr.subcount(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2],skip_nils:bit):bat[:oid,:wrd] 
address AGGRsubcount;
comment Grouped count aggregate

command aggr.size(b:bat[:void,:bit],e:bat[:void,:any_1]):bat[:void,:wrd] 
address AGGRsize2nils;
comment Grouped count of true values

command aggr.submax(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2],s:bat[:oid,:oid],skip_nils:bit):bat[:oid,:any_1] 
address AGGRsubmaxcand_val;
comment Grouped maximum aggregate with candidates list

command aggr.submax(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2],skip_nils:bit):bat[:oid,:any_1] 
address AGGRsubmax_val;
comment Grouped maximum aggregate

command aggr.submin(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2],s:bat[:oid,:oid],skip_nils:bit):bat[:oid,:any_1] 
address AGGRsubmincand_val;
comment Grouped minimum aggregate with candidates list

command aggr.submin(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2],skip_nils:bit):bat[:oid,:any_1] 
address AGGRsubmin_val;
comment Grouped minimum aggregate

command aggr.submax(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2],s:bat[:oid,:oid],skip_nils:bit):bat[:oid,:oid] 
address AGGRsubmaxcand;
comment Grouped maximum aggregate with candidates list

command aggr.submax(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2],skip_nils:bit):bat[:oid,:oid] 
address AGGRsubmax;
comment Grouped maximum aggregate

command aggr.submin(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2],s:bat[:oid,:oid],skip_nils:bit):bat[:oid,:oid] 
address AGGRsubmincand;
comment Grouped minimum aggregate with candidates list

command aggr.submin(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2],skip_nils:bit):bat[:oid,:oid] 
address AGGRsubmin;
comment Grouped minimum aggregate

command aggr.subvariancep(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancepcand_dbl;
comment Grouped variance (population/biased) aggregate with candidates list

command aggr.subvariancep(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancep_dbl;
comment Grouped variance (population/biased) aggregate

command aggr.subvariance(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancecand_dbl;
comment Grouped variance (sample/non-biased) aggregate with candidates list

command aggr.subvariance(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariance_dbl;
comment Grouped variance (sample/non-biased) aggregate

command aggr.substdevp(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevpcand_dbl;
comment Grouped standard deviation (population/biased) aggregate with candidates list

command aggr.substdevp(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevp_dbl;
comment Grouped standard deviation (population/biased) aggregate

command aggr.stdevp(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdevp3_dbl;
comment Grouped tail standard deviation (population/biased) on dbl

command aggr.stdevp(b:bat[:oid,:dbl],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdevp2_dbl;
comment Grouped tail standard deviation (population/biased) on dbl

command aggr.substdev(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevcand_dbl;
comment Grouped standard deviation (sample/non-biased) aggregate with candidates list

command aggr.substdev(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdev_dbl;
comment Grouped standard deviation (sample/non-biased) aggregate

command aggr.stdev(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdev3_dbl;
comment Grouped tail standard deviation (sample/non-biased) on dbl

command aggr.stdev(b:bat[:oid,:dbl],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdev2_dbl;
comment Grouped tail standard deviation (sample/non-biased) on dbl

command aggr.subavg(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit) (X_7:bat[:oid,:dbl],X_8:bat[:oid,:wrd]) 
address AGGRsubavg2cand_dbl;
comment Grouped average aggregate with candidates list, also returns count

command aggr.subavg(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit) (X_6:bat[:oid,:dbl],X_7:bat[:oid,:wrd]) 
address AGGRsubavg2_dbl;
comment Grouped average aggregate, also returns count

command aggr.subavg(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubavg1cand_dbl;
comment Grouped average aggregate with candidates list

command aggr.subavg(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubavg1_dbl;
comment Grouped average aggregate

command aggr.subvariancep(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancepcand_dbl;
comment Grouped variance (population/biased) aggregate with candidates list

command aggr.subvariancep(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancep_dbl;
comment Grouped variance (population/biased) aggregate

command aggr.subvariance(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancecand_dbl;
comment Grouped variance (sample/non-biased) aggregate with candidates list

command aggr.subvariance(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariance_dbl;
comment Grouped variance (sample/non-biased) aggregate

command aggr.substdevp(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevpcand_dbl;
comment Grouped standard deviation (population/biased) aggregate with candidates list

command aggr.substdevp(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevp_dbl;
comment Grouped standard deviation (population/biased) aggregate

command aggr.stdevp(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdevp3_dbl;
comment Grouped tail standard deviation (population/biased) on flt

command aggr.stdevp(b:bat[:oid,:flt],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdevp2_dbl;
comment Grouped tail standard deviation (population/biased) on flt

command aggr.substdev(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevcand_dbl;
comment Grouped standard deviation (sample/non-biased) aggregate with candidates list

command aggr.substdev(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdev_dbl;
comment Grouped standard deviation (sample/non-biased) aggregate

command aggr.stdev(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdev3_dbl;
comment Grouped tail standard deviation (sample/non-biased) on flt

command aggr.stdev(b:bat[:oid,:flt],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdev2_dbl;
comment Grouped tail standard deviation (sample/non-biased) on flt

command aggr.subavg(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit) (X_7:bat[:oid,:dbl],X_8:bat[:oid,:wrd]) 
address AGGRsubavg2cand_dbl;
comment Grouped average aggregate with candidates list, also returns count

command aggr.subavg(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit) (X_6:bat[:oid,:dbl],X_7:bat[:oid,:wrd]) 
address AGGRsubavg2_dbl;
comment Grouped average aggregate, also returns count

command aggr.subavg(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubavg1cand_dbl;
comment Grouped average aggregate with candidates list

command aggr.subavg(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubavg1_dbl;
comment Grouped average aggregate

command aggr.subvariancep(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancepcand_dbl;
comment Grouped variance (population/biased) aggregate with candidates list

command aggr.subvariancep(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancep_dbl;
comment Grouped variance (population/biased) aggregate

command aggr.subvariance(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancecand_dbl;
comment Grouped variance (sample/non-biased) aggregate with candidates list

command aggr.subvariance(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariance_dbl;
comment Grouped variance (sample/non-biased) aggregate

command aggr.substdevp(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevpcand_dbl;
comment Grouped standard deviation (population/biased) aggregate with candidates list

command aggr.substdevp(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevp_dbl;
comment Grouped standard deviation (population/biased) aggregate

command aggr.stdevp(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdevp3_dbl;
comment Grouped tail standard deviation (population/biased) on lng

command aggr.stdevp(b:bat[:oid,:lng],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdevp2_dbl;
comment Grouped tail standard deviation (population/biased) on lng

command aggr.substdev(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevcand_dbl;
comment Grouped standard deviation (sample/non-biased) aggregate with candidates list

command aggr.substdev(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdev_dbl;
comment Grouped standard deviation (sample/non-biased) aggregate

command aggr.stdev(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdev3_dbl;
comment Grouped tail standard deviation (sample/non-biased) on lng

command aggr.stdev(b:bat[:oid,:lng],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdev2_dbl;
comment Grouped tail standard deviation (sample/non-biased) on lng

command aggr.subavg(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit) (X_7:bat[:oid,:dbl],X_8:bat[:oid,:wrd]) 
address AGGRsubavg2cand_dbl;
comment Grouped average aggregate with candidates list, also returns count

command aggr.subavg(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit) (X_6:bat[:oid,:dbl],X_7:bat[:oid,:wrd]) 
address AGGRsubavg2_dbl;
comment Grouped average aggregate, also returns count

command aggr.subavg(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubavg1cand_dbl;
comment Grouped average aggregate with candidates list

command aggr.subavg(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubavg1_dbl;
comment Grouped average aggregate

command aggr.subvariancep(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancepcand_dbl;
comment Grouped variance (population/biased) aggregate with candidates list

command aggr.subvariancep(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancep_dbl;
comment Grouped variance (population/biased) aggregate

command aggr.subvariance(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancecand_dbl;
comment Grouped variance (sample/non-biased) aggregate with candidates list

command aggr.subvariance(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariance_dbl;
comment Grouped variance (sample/non-biased) aggregate

command aggr.substdevp(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevpcand_dbl;
comment Grouped standard deviation (population/biased) aggregate with candidates list

command aggr.substdevp(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevp_dbl;
comment Grouped standard deviation (population/biased) aggregate

command aggr.stdevp(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdevp3_dbl;
comment Grouped tail standard deviation (population/biased) on wrd

command aggr.stdevp(b:bat[:oid,:wrd],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdevp2_dbl;
comment Grouped tail standard deviation (population/biased) on wrd

command aggr.substdev(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevcand_dbl;
comment Grouped standard deviation (sample/non-biased) aggregate with candidates list

command aggr.substdev(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdev_dbl;
comment Grouped standard deviation (sample/non-biased) aggregate

command aggr.stdev(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdev3_dbl;
comment Grouped tail standard deviation (sample/non-biased) on wrd

command aggr.stdev(b:bat[:oid,:wrd],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdev2_dbl;
comment Grouped tail standard deviation (sample/non-biased) on wrd

command aggr.subavg(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit) (X_7:bat[:oid,:dbl],X_8:bat[:oid,:wrd]) 
address AGGRsubavg2cand_dbl;
comment Grouped average aggregate with candidates list, also returns count

command aggr.subavg(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit) (X_6:bat[:oid,:dbl],X_7:bat[:oid,:wrd]) 
address AGGRsubavg2_dbl;
comment Grouped average aggregate, also returns count

command aggr.subavg(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubavg1cand_dbl;
comment Grouped average aggregate with candidates list

command aggr.subavg(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubavg1_dbl;
comment Grouped average aggregate

command aggr.subvariancep(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancepcand_dbl;
comment Grouped variance (population/biased) aggregate with candidates list

command aggr.subvariancep(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancep_dbl;
comment Grouped variance (population/biased) aggregate

command aggr.subvariance(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancecand_dbl;
comment Grouped variance (sample/non-biased) aggregate with candidates list

command aggr.subvariance(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariance_dbl;
comment Grouped variance (sample/non-biased) aggregate

command aggr.substdevp(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevpcand_dbl;
comment Grouped standard deviation (population/biased) aggregate with candidates list

command aggr.substdevp(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevp_dbl;
comment Grouped standard deviation (population/biased) aggregate

command aggr.stdevp(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdevp3_dbl;
comment Grouped tail standard deviation (population/biased) on int

command aggr.stdevp(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdevp2_dbl;
comment Grouped tail standard deviation (population/biased) on int

command aggr.substdev(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevcand_dbl;
comment Grouped standard deviation (sample/non-biased) aggregate with candidates list

command aggr.substdev(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdev_dbl;
comment Grouped standard deviation (sample/non-biased) aggregate

command aggr.stdev(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdev3_dbl;
comment Grouped tail standard deviation (sample/non-biased) on int

command aggr.stdev(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdev2_dbl;
comment Grouped tail standard deviation (sample/non-biased) on int

command aggr.subavg(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit) (X_7:bat[:oid,:dbl],X_8:bat[:oid,:wrd]) 
address AGGRsubavg2cand_dbl;
comment Grouped average aggregate with candidates list, also returns count

command aggr.subavg(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit) (X_6:bat[:oid,:dbl],X_7:bat[:oid,:wrd]) 
address AGGRsubavg2_dbl;
comment Grouped average aggregate, also returns count

command aggr.subavg(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubavg1cand_dbl;
comment Grouped average aggregate with candidates list

command aggr.subavg(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubavg1_dbl;
comment Grouped average aggregate

command aggr.subvariancep(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancepcand_dbl;
comment Grouped variance (population/biased) aggregate with candidates list

command aggr.subvariancep(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancep_dbl;
comment Grouped variance (population/biased) aggregate

command aggr.subvariance(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancecand_dbl;
comment Grouped variance (sample/non-biased) aggregate with candidates list

command aggr.subvariance(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariance_dbl;
comment Grouped variance (sample/non-biased) aggregate

command aggr.substdevp(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevpcand_dbl;
comment Grouped standard deviation (population/biased) aggregate with candidates list

command aggr.substdevp(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevp_dbl;
comment Grouped standard deviation (population/biased) aggregate

command aggr.stdevp(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdevp3_dbl;
comment Grouped tail standard deviation (population/biased) on sht

command aggr.stdevp(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdevp2_dbl;
comment Grouped tail standard deviation (population/biased) on sht

command aggr.substdev(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevcand_dbl;
comment Grouped standard deviation (sample/non-biased) aggregate with candidates list

command aggr.substdev(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdev_dbl;
comment Grouped standard deviation (sample/non-biased) aggregate

command aggr.stdev(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdev3_dbl;
comment Grouped tail standard deviation (sample/non-biased) on sht

command aggr.stdev(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdev2_dbl;
comment Grouped tail standard deviation (sample/non-biased) on sht

command aggr.subavg(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit) (X_7:bat[:oid,:dbl],X_8:bat[:oid,:wrd]) 
address AGGRsubavg2cand_dbl;
comment Grouped average aggregate with candidates list, also returns count

command aggr.subavg(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit) (X_6:bat[:oid,:dbl],X_7:bat[:oid,:wrd]) 
address AGGRsubavg2_dbl;
comment Grouped average aggregate, also returns count

command aggr.subavg(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubavg1cand_dbl;
comment Grouped average aggregate with candidates list

command aggr.subavg(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubavg1_dbl;
comment Grouped average aggregate

command aggr.subvariancep(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancepcand_dbl;
comment Grouped variance (population/biased) aggregate with candidates list

command aggr.subvariancep(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancep_dbl;
comment Grouped variance (population/biased) aggregate

command aggr.subvariance(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariancecand_dbl;
comment Grouped variance (sample/non-biased) aggregate with candidates list

command aggr.subvariance(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubvariance_dbl;
comment Grouped variance (sample/non-biased) aggregate

command aggr.substdevp(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevpcand_dbl;
comment Grouped standard deviation (population/biased) aggregate with candidates list

command aggr.substdevp(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevp_dbl;
comment Grouped standard deviation (population/biased) aggregate

command aggr.stdevp(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdevp3_dbl;
comment Grouped tail standard deviation (population/biased) on bte

command aggr.stdevp(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdevp2_dbl;
comment Grouped tail standard deviation (population/biased) on bte

command aggr.substdev(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdevcand_dbl;
comment Grouped standard deviation (sample/non-biased) aggregate with candidates list

command aggr.substdev(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubstdev_dbl;
comment Grouped standard deviation (sample/non-biased) aggregate

command aggr.stdev(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdev3_dbl;
comment Grouped tail standard deviation (sample/non-biased) on bte

command aggr.stdev(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRstdev2_dbl;
comment Grouped tail standard deviation (sample/non-biased) on bte

command aggr.subavg(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit) (X_7:bat[:oid,:dbl],X_8:bat[:oid,:wrd]) 
address AGGRsubavg2cand_dbl;
comment Grouped average aggregate with candidates list, also returns count

command aggr.subavg(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit) (X_6:bat[:oid,:dbl],X_7:bat[:oid,:wrd]) 
address AGGRsubavg2_dbl;
comment Grouped average aggregate, also returns count

command aggr.subavg(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubavg1cand_dbl;
comment Grouped average aggregate with candidates list

command aggr.subavg(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubavg1_dbl;
comment Grouped average aggregate

command aggr.subprod(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubprodcand_dbl;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubprod_dbl;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubsumcand_dbl;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubsum_dbl;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRsum3_dbl;
comment Grouped tail sum on dbl

command aggr.sum(b:bat[:oid,:dbl],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRsum2_dbl;
comment Sum over grouped tail sum on dbl

command aggr.subprod(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubprodcand_dbl;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubprod_dbl;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubsumcand_dbl;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:dbl] 
address AGGRsubsum_dbl;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRsum3_dbl;
comment Grouped tail sum on flt

command aggr.sum(b:bat[:oid,:flt],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRsum2_dbl;
comment Sum over grouped tail sum on flt

command aggr.subprod(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:flt] 
address AGGRsubprodcand_flt;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:flt] 
address AGGRsubprod_flt;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:flt] 
address AGGRsubsumcand_flt;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:flt] 
address AGGRsubsum_flt;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:flt] 
address AGGRsum3_flt;
comment Grouped tail sum on flt

command aggr.sum(b:bat[:oid,:flt],e:bat[:oid,:any_1]):bat[:oid,:flt] 
address AGGRsum2_flt;
comment Sum over grouped tail sum on flt

command aggr.subprod(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:lng] 
address AGGRsubprodcand_lng;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:lng] 
address AGGRsubprod_lng;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:lng] 
address AGGRsubsumcand_lng;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:lng] 
address AGGRsubsum_lng;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] 
address AGGRsum3_lng;
comment Grouped tail sum on lng

command aggr.sum(b:bat[:oid,:lng],e:bat[:oid,:any_1]):bat[:oid,:lng] 
address AGGRsum2_lng;
comment Sum over grouped tail sum on lng

command aggr.sum(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRsum3_dbl;
comment Grouped tail sum on lng

command aggr.sum(b:bat[:oid,:lng],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRsum2_dbl;
comment Sum over grouped tail sum on lng

command aggr.subprod(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:lng] 
address AGGRsubprodcand_lng;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:lng] 
address AGGRsubprod_lng;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:lng] 
address AGGRsubsumcand_lng;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:lng] 
address AGGRsubsum_lng;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] 
address AGGRsum3_lng;
comment Grouped tail sum on wrd

command aggr.sum(b:bat[:oid,:wrd],e:bat[:oid,:any_1]):bat[:oid,:lng] 
address AGGRsum2_lng;
comment Sum over grouped tail sum on wrd

command aggr.subprod(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:wrd] 
address AGGRsubprodcand_wrd;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:wrd] 
address AGGRsubprod_wrd;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:wrd] 
address AGGRsubsumcand_wrd;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:wrd] 
address AGGRsubsum_wrd;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] 
address AGGRsum3_wrd;
comment Grouped tail sum on wrd

command aggr.sum(b:bat[:oid,:wrd],e:bat[:oid,:any_1]):bat[:oid,:wrd] 
address AGGRsum2_wrd;
comment Sum over grouped tail sum on wrd

command aggr.sum(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRsum3_dbl;
comment Grouped tail sum on wrd

command aggr.sum(b:bat[:oid,:wrd],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRsum2_dbl;
comment Sum over grouped tail sum on wrd

command aggr.subprod(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:lng] 
address AGGRsubprodcand_lng;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:lng] 
address AGGRsubprod_lng;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:lng] 
address AGGRsubsumcand_lng;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:lng] 
address AGGRsubsum_lng;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] 
address AGGRsum3_lng;
comment Grouped tail sum on int

command aggr.sum(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:lng] 
address AGGRsum2_lng;
comment Sum over grouped tail sum on int

command aggr.subprod(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:wrd] 
address AGGRsubprodcand_wrd;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:wrd] 
address AGGRsubprod_wrd;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:wrd] 
address AGGRsubsumcand_wrd;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:wrd] 
address AGGRsubsum_wrd;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] 
address AGGRsum3_wrd;
comment Grouped tail sum on int

command aggr.sum(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:wrd] 
address AGGRsum2_wrd;
comment Sum over grouped tail sum on int

command aggr.subprod(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:int] 
address AGGRsubprodcand_int;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:int] 
address AGGRsubprod_int;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:int] 
address AGGRsubsumcand_int;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:int] 
address AGGRsubsum_int;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] 
address AGGRsum3_int;
comment Grouped tail sum on int

command aggr.sum(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:int] 
address AGGRsum2_int;
comment Sum over grouped tail sum on int

command aggr.sum(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRsum3_dbl;
comment Grouped tail sum on int

command aggr.sum(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRsum2_dbl;
comment Sum over grouped tail sum on int

command aggr.subprod(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:lng] 
address AGGRsubprodcand_lng;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:lng] 
address AGGRsubprod_lng;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:lng] 
address AGGRsubsumcand_lng;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:lng] 
address AGGRsubsum_lng;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] 
address AGGRsum3_lng;
comment Grouped tail sum on sht

command aggr.sum(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:lng] 
address AGGRsum2_lng;
comment Sum over grouped tail sum on sht

command aggr.subprod(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:wrd] 
address AGGRsubprodcand_wrd;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:wrd] 
address AGGRsubprod_wrd;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:wrd] 
address AGGRsubsumcand_wrd;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:wrd] 
address AGGRsubsum_wrd;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] 
address AGGRsum3_wrd;
comment Grouped tail sum on sht

command aggr.sum(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:wrd] 
address AGGRsum2_wrd;
comment Sum over grouped tail sum on sht

command aggr.subprod(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:int] 
address AGGRsubprodcand_int;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:int] 
address AGGRsubprod_int;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:int] 
address AGGRsubsumcand_int;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:int] 
address AGGRsubsum_int;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] 
address AGGRsum3_int;
comment Grouped tail sum on sht

command aggr.sum(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:int] 
address AGGRsum2_int;
comment Sum over grouped tail sum on sht

command aggr.subprod(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:sht] 
address AGGRsubprodcand_sht;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:sht] 
address AGGRsubprod_sht;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:sht] 
address AGGRsubsumcand_sht;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:sht] 
address AGGRsubsum_sht;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:sht] 
address AGGRsum3_sht;
comment Grouped tail sum on sht

command aggr.sum(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:sht] 
address AGGRsum2_sht;
comment Sum over grouped tail sum on sht

command aggr.sum(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRsum3_dbl;
comment Grouped tail sum on sht

command aggr.sum(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRsum2_dbl;
comment Sum over grouped tail sum on sht

command aggr.subprod(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:lng] 
address AGGRsubprodcand_lng;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:lng] 
address AGGRsubprod_lng;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:lng] 
address AGGRsubsumcand_lng;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:lng] 
address AGGRsubsum_lng;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] 
address AGGRsum3_lng;
comment Grouped tail sum on bte

command aggr.sum(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:lng] 
address AGGRsum2_lng;
comment Sum over grouped tail sum on bte

command aggr.subprod(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:wrd] 
address AGGRsubprodcand_wrd;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:wrd] 
address AGGRsubprod_wrd;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:wrd] 
address AGGRsubsumcand_wrd;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:wrd] 
address AGGRsubsum_wrd;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] 
address AGGRsum3_wrd;
comment Grouped tail sum on bte

command aggr.sum(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:wrd] 
address AGGRsum2_wrd;
comment Sum over grouped tail sum on bte

command aggr.subprod(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:int] 
address AGGRsubprodcand_int;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:int] 
address AGGRsubprod_int;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:int] 
address AGGRsubsumcand_int;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:int] 
address AGGRsubsum_int;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] 
address AGGRsum3_int;
comment Grouped tail sum on bte

command aggr.sum(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:int] 
address AGGRsum2_int;
comment Sum over grouped tail sum on bte

command aggr.subprod(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:sht] 
address AGGRsubprodcand_sht;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:sht] 
address AGGRsubprod_sht;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:sht] 
address AGGRsubsumcand_sht;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:sht] 
address AGGRsubsum_sht;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:sht] 
address AGGRsum3_sht;
comment Grouped tail sum on bte

command aggr.sum(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:sht] 
address AGGRsum2_sht;
comment Sum over grouped tail sum on bte

command aggr.subprod(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:bte] 
address AGGRsubprodcand_bte;
comment Grouped product aggregate with candidates list

command aggr.subprod(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:bte] 
address AGGRsubprod_bte;
comment Grouped product aggregate

command aggr.subsum(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit,abort_on_error:bit):bat[:oid,:bte] 
address AGGRsubsumcand_bte;
comment Grouped sum aggregate with candidates list

command aggr.subsum(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit,abort_on_error:bit):bat[:oid,:bte] 
address AGGRsubsum_bte;
comment Grouped sum aggregate

command aggr.sum(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:bte] 
address AGGRsum3_bte;
comment Grouped tail sum on bte

command aggr.sum(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:bte] 
address AGGRsum2_bte;
comment Sum over grouped tail sum on bte

command aggr.sum(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRsum3_dbl;
comment Grouped tail sum on bte

command aggr.sum(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRsum2_dbl;
comment Sum over grouped tail sum on bte

command aggr.stdevp(b:bat[:oid,:any_2]):dbl 
address ALGstdevp;
comment Gives the standard deviation of all tail values

command aggr.stdev(b:bat[:oid,:any_2]):dbl 
address ALGstdev;
comment Gives the standard deviation of all tail values

command aggr.variancep(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariancep3_dbl;
comment Grouped tail variance (population/biased) on hge

command aggr.variancep(b:bat[:oid,:hge],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariancep2_dbl;
comment Grouped tail variance (population/biased) on hge

command aggr.variance(b:bat[:oid,:hge],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariance3_dbl;
comment Grouped tail variance (sample/non-biased) on hge

command aggr.variance(b:bat[:oid,:hge],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariance2_dbl;
comment Grouped tail variance (sample/non-biased) on hge

command aggr.variancep(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariancep3_dbl;
comment Grouped tail variance (population/biased) on dbl

command aggr.variancep(b:bat[:oid,:dbl],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariancep2_dbl;
comment Grouped tail variance (population/biased) on dbl

command aggr.variance(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariance3_dbl;
comment Grouped tail variance (sample/non-biased) on dbl

command aggr.variance(b:bat[:oid,:dbl],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariance2_dbl;
comment Grouped tail variance (sample/non-biased) on dbl

command aggr.variancep(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariancep3_dbl;
comment Grouped tail variance (population/biased) on flt

command aggr.variancep(b:bat[:oid,:flt],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariancep2_dbl;
comment Grouped tail variance (population/biased) on flt

command aggr.variance(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariance3_dbl;
comment Grouped tail variance (sample/non-biased) on flt

command aggr.variance(b:bat[:oid,:flt],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariance2_dbl;
comment Grouped tail variance (sample/non-biased) on flt

command aggr.variancep(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariancep3_dbl;
comment Grouped tail variance (population/biased) on lng

command aggr.variancep(b:bat[:oid,:lng],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariancep2_dbl;
comment Grouped tail variance (population/biased) on lng

command aggr.variance(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariance3_dbl;
comment Grouped tail variance (sample/non-biased) on lng

command aggr.variance(b:bat[:oid,:lng],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariance2_dbl;
comment Grouped tail variance (sample/non-biased) on lng

command aggr.variancep(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariancep3_dbl;
comment Grouped tail variance (population/biased) on wrd

command aggr.variancep(b:bat[:oid,:wrd],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariancep2_dbl;
comment Grouped tail variance (population/biased) on wrd

command aggr.variance(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariance3_dbl;
comment Grouped tail variance (sample/non-biased) on wrd

command aggr.variance(b:bat[:oid,:wrd],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariance2_dbl;
comment Grouped tail variance (sample/non-biased) on wrd

command aggr.variancep(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariancep3_dbl;
comment Grouped tail variance (population/biased) on int

command aggr.variancep(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariancep2_dbl;
comment Grouped tail variance (population/biased) on int

command aggr.variance(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariance3_dbl;
comment Grouped tail variance (sample/non-biased) on int

command aggr.variance(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariance2_dbl;
comment Grouped tail variance (sample/non-biased) on int

command aggr.variancep(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariancep3_dbl;
comment Grouped tail variance (population/biased) on sht

command aggr.variancep(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariancep2_dbl;
comment Grouped tail variance (population/biased) on sht

command aggr.variance(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariance3_dbl;
comment Grouped tail variance (sample/non-biased) on sht

command aggr.variance(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariance2_dbl;
comment Grouped tail variance (sample/non-biased) on sht

command aggr.variancep(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariancep3_dbl;
comment Grouped tail variance (population/biased) on bte

command aggr.variancep(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariancep2_dbl;
comment Grouped tail variance (population/biased) on bte

command aggr.variance(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariance3_dbl;
comment Grouped tail variance (sample/non-biased) on bte

command aggr.variance(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:dbl] 
address AGGRvariance2_dbl;
comment Grouped tail variance (sample/non-biased) on bte

command aggr.variancep(b:bat[:oid,:any_2]):dbl 
address ALGvariancep;
comment Gives the variance of all tail values

command aggr.variance(b:bat[:oid,:any_2]):dbl 
address ALGvariance;
comment Gives the variance of all tail values

command algebra.antijoin(left:bat[:any_1,:any_2],right:bat[:any_2,:any_4]):bat[:any_1,:any_4] 
address ALGantijoin;
comment Returns the antijoin

command algebra.antijoin(left:bat[:oid,:any_1],right:bat[:oid,:any_1]) (l:bat[:oid,:oid],r:bat[:oid,:oid]) 
address ALGantijoin2;
comment Returns 2 columns with all BUNs, consisting of the head-oids 	  from 'left' and 'right' for which there are BUNs in 'left' 	  and 'right' with equal tails

command algebra.bandjoin(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3],minus:any_2,plus:any_2,li:bit,hi:bit):bat[:any_1,:any_3] 
address ALGbandjoin;
comment This is a join() for which the predicate is that two BUNs match 		if the left-tail value is within the range [right-head - minus, 		right-head + plus], depending on (l_in/h_in), the bounds 		are included. Works only for the builtin numerical types, 		and their derivates.

command algebra.bandjoin(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3],minus:any_2,plus:any_2):bat[:any_1,:any_3] 
address ALGbandjoin_default;
comment This is a join() for which the predicate is that two BUNs match 		if the left-tail value is within the range [right-head - minus, 		right-head + plus]. Works only for the builtin numerical types, 		and their derivates.

command algebra.bandjoin(outer:bat[:oid,:any_2],inner:bat[:oid,:any_2],minus:any_2,plus:any_2,li:bit,hi:bit) (l:bat[:oid,:oid],r:bat[:oid,:oid]) 
address ALGbandjoin2;
comment This is a join() for which the predicate is that two BUNs match 		if the left-tail value is within the range [right-head - minus, 		right-head + plus], depending on (l_in/h_in), the bounds 		are included. Works only for the builtin numerical types, 		and their derivates.

command algebra.crossproduct(left:bat[:any_1,:any_2],right:bat[:any_3,:any_4]):bat[:any_1,:any_4] 
address ALGcross;
comment Returns the cross product

command algebra.crossproduct(left:bat[:oid,:any_1],right:bat[:oid,:any_2]) (l:bat[:oid,:oid],r:bat[:oid,:oid]) 
address ALGcrossproduct2;
comment Returns 2 columns with all BUNs, consisting of the head-oids 	  from 'left' and 'right' for which there are BUNs in 'left' 	  and 'right' with equal tails

command algebra.copy(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address ALGcopy;
comment Returns physical copy of a BAT.

command algebra.exist(b:bat[:oid,:any_1],val:any_1):bit 
address ALGexist;
comment Returns whether 'val' occurs in b.

pattern algebra.firstn(b:bat[:oid,:any],s:bat[:oid,:oid],g:bat[:oid,:oid],n:wrd,asc:bit) (X_6:bat[:oid,:oid],X_7:bat[:oid,:oid]) 
address ALGfirstn;
comment Calculate first N values of B with candidate list S

pattern algebra.firstn(b:bat[:oid,:any],s:bat[:oid,:oid],n:wrd,asc:bit) (X_5:bat[:oid,:oid],X_6:bat[:oid,:oid]) 
address ALGfirstn;
comment Calculate first N values of B with candidate list S

pattern algebra.firstn(b:bat[:oid,:any],n:wrd,asc:bit) (X_4:bat[:oid,:oid],X_5:bat[:oid,:oid]) 
address ALGfirstn;
comment Calculate first N values of B

pattern algebra.firstn(b:bat[:oid,:any],s:bat[:oid,:oid],g:bat[:oid,:oid],n:wrd,asc:bit):bat[:oid,:oid] 
address ALGfirstn;
comment Calculate first N values of B with candidate list S

pattern algebra.firstn(b:bat[:oid,:any],s:bat[:oid,:oid],n:wrd,asc:bit):bat[:oid,:oid] 
address ALGfirstn;
comment Calculate first N values of B with candidate list S

pattern algebra.firstn(b:bat[:oid,:any],n:wrd,asc:bit):bat[:oid,:oid] 
address ALGfirstn;
comment Calculate first N values of B

command algebra.fetch(b:bat[:any_2,:any_1],x:int):any_1 
address ALGfetchint;
comment Returns the tail value of the BUN at x-th position 	with 0 <= x < b.count

command algebra.fetch(b:bat[:any_2,:any_1],x:lng):any_1 
address ALGfetch;
command algebra.fetch(b:bat[:any_2,:any_1],x:oid):any_1 
address ALGfetchoid;
command algebra.find(b:bat[:any_1,:any_2],h:any_1):any_2 
address ALGfind;
comment Returns the tail value 't' for which some [h,t] BUN 	exists in b.  If no such BUN exists, an error occurs.

command algebra.groupby(gids:bat[:oid,:oid],cnts:bat[:oid,:wrd]):bat[:oid,:oid] 
address ALGgroupby;
comment Produces a new BAT with groups identified by the head column. The result contains tail times the head value, ie the tail contains the result group sizes.

command algebra.ilikesubselect(s:bat[:oid,:str],pat:bat[:oid,:str],esc:str) (l:bat[:oid,:oid],r:bat[:oid,:oid]) 
address PCREilike_join_pcre;
function algebra.ilikesubselect(b:bat[:oid,:str],cand:bat[:oid,:oid],pat:str,esc:str,anti:bit):bat[:oid,:oid];
function algebra.ilikesubselect(b:bat[:oid,:str],pat:str,esc:str,anti:bit):bat[:oid,:oid];
command algebra.indexjoin(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] 
address ALGindexjoin;
comment Hook directly into the index implementation of the join.

pattern algebra.joinPath(l:bat[:any,:any]...):bat[:oid,:any] 
address ALGjoinPath;
comment Routine to handle join paths.  The type analysis is rather tricky.

command algebra.join(l:bat[:any_1,:any_2],rl:bat[:any_3,:any_2],rh:bat[:any_3,:any_2],li:bit,hi:bit):bat[:any_1,:any_3] 
address ALGrangejoin;
command algebra.join(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],estimate:lng):bat[:any_1,:any_3] 
address ALGjoinestimate;
command algebra.join(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] 
address ALGjoin;
command algebra.join(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] 
address ALGjoin;
comment Returns all BUNs, consisting of a head-value from 'left' and 		a tail-value from 'right' for which there are BUNs in 'left' 		and 'right' with equal tail- resp. head-value (i.e. the join	columns are projected out).

command algebra.join(left:bat[:oid,:any_2],rl:bat[:oid,:any_2],rh:bat[:oid,:any_2],li:bit,hi:bit) (l:bat[:oid,:oid],r:bat[:oid,:oid]) 
address ALGrangejoin2;
command algebra.join(left:bat[:oid,:any_1],right:bat[:oid,:any_1]) (l:bat[:oid,:oid],r:bat[:oid,:oid]) 
address ALGjoin2;
comment Returns 2 columns with all BUNs, consisting of the head-oids 	  from 'left' and 'right' for which there are BUNs in 'left' 	  and 'right' with equal tails

command algebra.kunion(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address ALGkunion;
comment Returns the union of two BATs; looking at head-columns only.		Results in all BUNs of 'left' that are  not in 'right', plus	all BUNs of 'right'.  *no* double-elimination is done.

command algebra.kdifference(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] 
address ALGkdiff;
comment Returns the difference taken over only the *head* columns of two BATs. 		Results in all BUNs of 'left' that are *not* in 'right'. 		It does *not* do double-elimination over the 'left' BUNs. 		If you want this, use:	 'kdifference(left.kunique,right.kunique)' 	or: 'kdifference(left,right).kunique'.

command algebra.kintersect(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] 
address ALGsemijoin;
comment Returns the intersection taken over only the *head* columns of two BATs. 	Results in all BUNs of 'left' that are also in 'right'. 		Does *not* do double- elimination over the 'left' BUNs.		If you want this, use: 'kintersect(kunique(left),kunique(right))' 	or: 'kunique(kintersect(left,right))'.

command algebra.kunique(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address ALGkunique;
comment Select unique tuples from the input BAT.  Double elimination is 		done only looking at the head column. The result is a BAT with		property hkeyed() == true.

pattern algebra.leftfetchjoinPath(l:bat[:any,:any]...):bat[:any,:any] 
address ALGjoinPath;
comment Routine to handle join paths.  The type analysis is rather tricky.

pattern algebra.leftjoinPath(l:bat[:any,:any]...):bat[:oid,:any] 
address ALGjoinPath;
comment Routine to handle join paths.  The type analysis is rather tricky.

command algebra.likesubselect(s:bat[:oid,:str],pat:bat[:oid,:str],esc:str) (l:bat[:oid,:oid],r:bat[:oid,:oid]) 
address PCRElike_join_pcre;
function algebra.likesubselect(b:bat[:oid,:str],cand:bat[:oid,:oid],pat:str,esc:str,anti:bit):bat[:oid,:oid];
command algebra.likesubselect(b:bat[:oid,:str],pat:str,esc:str,anti:bit):bat[:oid,:oid] 
address PCRElikesubselect3;
comment Select all head values of the first input BAT for which the	tail value is "like" the given (SQL-style) pattern and for	which the head value occurs in the tail of the second input	BAT.	Input is a dense-headed BAT, output is a dense-headed BAT with in	the tail the head value of the input BAT for which the	relationship holds.  The output BAT is sorted on the tail value.

command algebra.likesubselect(b:bat[:oid,:str],s:bat[:oid,:oid],pat:str,esc:str,caseignore:bit,anti:bit):bat[:oid,:oid] 
address PCRElikesubselect2;
comment Select all head values of the first input BAT for which the	tail value is "like" the given (SQL-style) pattern and for	which the head value occurs in the tail of the second input	BAT.	Input is a dense-headed BAT, output is a dense-headed BAT with in	the tail the head value of the input BAT for which the	relationship holds.  The output BAT is sorted on the tail value.

command algebra.likesubselect(b:bat[:oid,:str],pat:str,esc:str,caseignore:bit,anti:bit):bat[:oid,:oid] 
address PCRElikesubselect1;
comment Select all head values for which the tail value is "like"	the given (SQL-style) pattern.	Input is a dense-headed BAT, output is a dense-headed BAT with in	the tail the head value of the input BAT for which the	relationship holds.  The output BAT is sorted on the tail value.

command algebra.leftfetchjoin(left:bat[:oid,:oid],right:bat[:oid,:any_3]):bat[:oid,:any_3] 
address ALGleftfetchjoin;
comment Hook directly into the left fetch join implementation.

command algebra.leftjoin(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],estimate:lng):bat[:any_1,:any_3] 
address ALGleftjoinestimate;
command algebra.leftjoin(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] 
address ALGleftjoin;
command algebra.like(b:bat[:oid,:str],substr:str):bat[:oid,:str] 
address ALGlike;
comment Selects all elements that have 'substr' as in the tail.

command algebra.materialize(b:bat[:oid,:any_1]):bat[:oid,:any_1] 
address ALGmaterialize;
comment Materialize the void column

command algebra.mark_grp(b:bat[:any_1,:oid],g:bat[:oid,:any_2],s:oid):bat[:any_1,:oid] 
address ALGmark_grp_2;
comment "grouped mark": Produces a new BAT with per group a locally unique dense ascending sequense of OIDs in the tail. The tail of the first BAT (b) identifies the group that each BUN of b belongs to. The second BAT (g) represents the group extent, i.e., the head is the unique list of group IDs from b's tail. The third argument (s) gives the base value for the new OID sequence of each group.

command algebra.mark_grp(b:bat[:any_1,:oid],g:bat[:oid,:oid]):bat[:any_1,:oid] 
address ALGmark_grp_1;
comment "grouped mark": Produces a new BAT with per group a locally unique dense ascending sequence of OIDs in the tail. The tail of the first BAT (b) identifies the group that each BUN of b belongs to. The second BAT (g) represents the group extent, i.e., the head is the unique list of group IDs from b's tail. The tail of g gives for each group the base value for the new OID sequence.

command algebra.markH(b:bat[:any_1,:any_2],nr_parts:int,part_nr:int):bat[:oid,:any_2] 
address ALGhmarkp;
comment Produces a BAT with fresh unique dense sequense of OIDs in 	the head that starts at base (i.e. [base,..base+b.count()-1] ).	The base is uniquely defined by the part_nr (ie we set the highest	bits based on the part_nr/nr_parts) 

command algebra.markH(b:bat[:any_1,:any_2],base:oid):bat[:oid,:any_2] 
address ALGmarkHead;
comment Produces a new BAT with fresh unique dense sequense of OIDs in 		the head that starts at base (i.e. [base,..base+b.count()-1] ).

command algebra.markH(b:bat[:any_1,:any_2]):bat[:oid,:any_2] 
address ALGmarkHead_default;
comment Produces a BAT with fresh OIDs in the head starting at 0@0.

command algebra.markT(b:bat[:any_1,:any_2],nr_parts:int,part_nr:int):bat[:any_1,:oid] 
address ALGtmarkp;
comment Produces a BAT with fresh unique dense sequense of OIDs in 	the tail that starts at base (i.e. [base,..base+b.count()-1] ).	The base is uniquely defined by the part_nr (ie we set the highest	bits based on the part_nr/nr_parts) 

command algebra.markT(b:bat[:any_1,:any_2]):bat[:any_1,:oid] 
address ALGtmark_default;
comment Produces a BAT with fresh unique OIDs in the tail starting at 0@0.

command algebra.markT(b:bat[:any_1,:any_2],base:oid):bat[:any_1,:oid] 
address ALGtmark;
comment Produces a BAT with fresh unique dense sequense of OIDs in 		the tail that starts at base (i.e. [base,..base+b.count()-1] ).

command algebra.outerjoin(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3],estimate:lng):bat[:any_1,:any_3] 
address ALGouterjoinestimate;
command algebra.outerjoin(outer:bat[:any_1,:oid],inner:bat[:oid,:any_3]):bat[:any_1,:any_3] 
address ALGouterjoin;
comment Returns all the result of a join, plus the BUNS formed NIL in 		the tail and the head-values of 'outer' whose tail-value does 		not match an head-value in 'inner'.

command algebra.outerjoin(outer:bat[:any_1,:oid],inner:bat[:oid,:any_3]):bat[:any_1,:any_3] 
address ALGouterjoin;
comment Returns all the result of a join, plus the BUNS formed NIL in 		the tail and the head-values of 'outer' whose tail-value does 		not match an head-value in 'inner'.

command algebra.outerjoin(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3]):bat[:any_1,:any_3] 
address ALGouterjoin;
comment Returns all the result of a join, plus the BUNS formed NIL in 		the tail and the head-values of 'outer' whose tail-value does 		not match an head-value in 'inner'.

command algebra.prejoin(a:bat[:oid,:oid],b:bat[:oid,:any_1]) (c:bat[:oid,:oid],d:bat[:oid,:any_1]) 
address ALGprejoin;
comment Recluster the table to reduce random access behavior.

pattern algebra.project(b:bat[:any_2,:any_1],v:any_3):bat[:any_2,:any_3] 
address ALGprojecttail;
comment Fill the tail with a constant, e.g. [0~b]

pattern algebra.project(v:any_3,b:bat[:any_2,:any_1]):bat[:any_3,:any_1] 
address ALGprojecthead;
comment Fill the head with a constant, e.g. [0~b]

command algebra.project(b:bat[:any_1,:any_2]):bat[:any_1,:void] 
address ALGprojectNIL;
comment Extract the head of a BAT.

command algebra.reuse(b:bat[:oid,:any_2]):bat[:oid,:any_2] 
address ALGreuse;
comment Reuse a temporary BAT if you can. Otherwise,	allocate enough storage to accept result of an 	operation (not involving the heap)

command algebra.revert(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address ALGrevert;
comment Returns a BAT copy with buns in reverse order

pattern algebra.semijoinPath(l:bat[:any,:any]...):bat[:any,:any] 
address ALGjoinPath;
comment Routine to handle join paths.  The type analysis is rather tricky.

command algebra.subthetajoin(l:bat[:oid,:any_1],r:bat[:oid,:any_1],sl:bat[:oid,:oid],sr:bat[:oid,:oid],op:int,nil_matches:bit,estimate:lng) (X_8:bat[:oid,:oid],X_9:bat[:oid,:oid]) 
address ALGsubthetajoin;
comment Theta join with candidate lists

command algebra.subouterjoin(l:bat[:oid,:any_1],r:bat[:oid,:any_1],sl:bat[:oid,:oid],sr:bat[:oid,:oid],nil_matches:bit,estimate:lng) (X_7:bat[:oid,:oid],X_8:bat[:oid,:oid]) 
address ALGsubouterjoin;
comment Left outer join with candidate lists

command algebra.subleftjoin(l:bat[:oid,:any_1],r:bat[:oid,:any_1],sl:bat[:oid,:oid],sr:bat[:oid,:oid],nil_matches:bit,estimate:lng) (X_7:bat[:oid,:oid],X_8:bat[:oid,:oid]) 
address ALGsubleftjoin;
comment Left join with candidate lists

command algebra.subjoin(l:bat[:oid,:any_1],r:bat[:oid,:any_1],sl:bat[:oid,:oid],sr:bat[:oid,:oid],nil_matches:bit,estimate:lng) (X_7:bat[:oid,:oid],X_8:bat[:oid,:oid]) 
address ALGsubjoin;
comment Join

command algebra.semijoin(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] 
address ALGsemijoin;
comment Returns the intersection taken over only the *head* columns of 		two BATs.  Results in all BUNs of 'left' that are also in 'right'. 		Does *not* do double-elimination over the 'left' BUNs. 		If you want this, use: 'kintersect(kunique(left),kunique(right))' 	or: 'kunique(kintersect(left,right))'.

command algebra.subunique(b:bat[:oid,:any_1]):bat[:oid,:oid] 
address ALGsubunique1;
comment Select all unique values from the tail of the input.	Input is a dense-headed BAT, output is a dense-headed BAT with	in the tail the head value of the input BAT that was selected.	The output BAT is sorted on the tail value.

command algebra.subunique(b:bat[:oid,:any_1],s:bat[:oid,:oid]):bat[:oid,:oid] 
address ALGsubunique2;
comment Select all unique values from the tail of the first input.	Input is a dense-headed BAT, the second input is a	dense-headed BAT with sorted tail, output is a dense-headed	BAT with in the tail the head value of the input BAT that was	selected.  The output BAT is sorted on the tail value.  The	second input BAT is a list of candidates.

command algebra.subsort(b:bat[:oid,:any_1],o:bat[:oid,:oid],g:bat[:oid,:oid],reverse:bit,stable:bit) (X_6:bat[:oid,:any_1],X_7:bat[:oid,:oid],X_8:bat[:oid,:oid]) 
address ALGsubsort33;
comment Returns a copy of the BAT sorted on tail values, a BAT that specifies         how the input was reordered, and a BAT with group information.         The input and output are (must be) dense headed.         The order is descending if the reverse bit is set.		 This is a stable sort if the stable bit is set.

command algebra.subsort(b:bat[:oid,:any_1],o:bat[:oid,:oid],g:bat[:oid,:oid],reverse:bit,stable:bit) (X_6:bat[:oid,:any_1],X_7:bat[:oid,:oid]) 
address ALGsubsort32;
comment Returns a copy of the BAT sorted on tail values and a BAT that         specifies how the input was reordered.         The input and output are (must be) dense headed.         The order is descending if the reverse bit is set.		 This is a stable sort if the stable bit is set.

command algebra.subsort(b:bat[:oid,:any_1],o:bat[:oid,:oid],g:bat[:oid,:oid],reverse:bit,stable:bit):bat[:oid,:any_1] 
address ALGsubsort31;
comment Returns a copy of the BAT sorted on tail values.         The input and output are (must be) dense headed.         The order is descending if the reverse bit is set.		 This is a stable sort if the stable bit is set.

command algebra.subsort(b:bat[:oid,:any_1],o:bat[:oid,:oid],reverse:bit,stable:bit) (X_5:bat[:oid,:any_1],X_6:bat[:oid,:oid],X_7:bat[:oid,:oid]) 
address ALGsubsort23;
comment Returns a copy of the BAT sorted on tail values, a BAT that specifies         how the input was reordered, and a BAT with group information.         The input and output are (must be) dense headed.         The order is descending if the reverse bit is set.		 This is a stable sort if the stable bit is set.

command algebra.subsort(b:bat[:oid,:any_1],o:bat[:oid,:oid],reverse:bit,stable:bit) (X_5:bat[:oid,:any_1],X_6:bat[:oid,:oid]) 
address ALGsubsort22;
comment Returns a copy of the BAT sorted on tail values and a BAT that         specifies how the input was reordered.         The input and output are (must be) dense headed.         The order is descending if the reverse bit is set.		 This is a stable sort if the stable bit is set.

command algebra.subsort(b:bat[:oid,:any_1],o:bat[:oid,:oid],reverse:bit,stable:bit):bat[:oid,:any_1] 
address ALGsubsort21;
comment Returns a copy of the BAT sorted on tail values.         The input and output are (must be) dense headed.         The order is descending if the reverse bit is set.		 This is a stable sort if the stable bit is set.

command algebra.subsort(b:bat[:oid,:any_1],reverse:bit,stable:bit) (X_4:bat[:oid,:any_1],X_5:bat[:oid,:oid],X_6:bat[:oid,:oid]) 
address ALGsubsort13;
comment Returns a copy of the BAT sorted on tail values, a BAT that specifies         how the input was reordered, and a BAT with group information.         The input and output are (must be) dense headed.         The order is descending if the reverse bit is set.		 This is a stable sort if the stable bit is set.

command algebra.subsort(b:bat[:oid,:any_1],reverse:bit,stable:bit) (X_4:bat[:oid,:any_1],X_5:bat[:oid,:oid]) 
address ALGsubsort12;
comment Returns a copy of the BAT sorted on tail values and a BAT that         specifies how the input was reordered.         The input and output are (must be) dense headed.         The order is descending if the reverse bit is set.		 This is a stable sort if the stable bit is set.

command algebra.subsort(b:bat[:oid,:any_1],reverse:bit,stable:bit):bat[:oid,:any_1] 
address ALGsubsort11;
comment Returns a copy of the BAT sorted on tail values.         The input and output are (must be) dense headed.         The order is descending if the reverse bit is set.		 This is a stable sort if the stable bit is set.

command algebra.ssort_rev(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address ALGssort_rev;
comment Returns copy of a BAT with the BUNs sorted on descending head values.         This is a stable sort.

command algebra.ssort(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address ALGssort;
comment Returns copy of a BAT with the BUNs sorted on ascending head values.         This is a stable sort.

command algebra.sortTH(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address ALGthsort;
comment Returns a lexicographically sorted copy on tail,head.

command algebra.sortHT(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address ALGhtsort;
comment Returns a lexicographically sorted copy on head,tail.

command algebra.sortReverseTail(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address ALGtsort_rev;
comment Returns a BAT copy reversely sorted on the tail column.

command algebra.sortTail(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address ALGtsort;
comment Returns a BAT copy sorted on the tail column.

command algebra.sortReverse(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address ALGhsort_rev;
comment Returns a BAT copy reversely sorted on the head column.

command algebra.sort(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address ALGhsort;
comment Returns a BAT copy sorted on the head column.

command algebra.sample(b:bat[:oid,:any_1],num:int):bat[:oid,:oid] 
address ALGsample;
comment Returns the oids of a random selection of size 'num' from the input BAT.

command algebra.subslice(b:bat[:oid,:any_1],x:wrd,y:wrd):bat[:oid,:oid] 
address ALGsubslice_wrd;
comment Return the oids of the slice with the BUNs at position x till y.

command algebra.slice(b:bat[:any_1,:any_2],x:wrd,y:wrd):bat[:any_1,:any_2] 
address ALGslice_wrd;
comment Return the slice with the BUNs at position x till y.

command algebra.slice(b:bat[:any_1,:any_2],x:int,y:int):bat[:any_1,:any_2] 
address ALGslice_int;
comment Return the slice with the BUNs at position x till y.

command algebra.slice(b:bat[:any_1,:any_2],x:lng,y:lng):bat[:any_1,:any_2] 
address ALGslice;
comment Return the slice with the BUNs at position x till y.

command algebra.slice(b:bat[:any_1,:any_2],x:oid,y:oid):bat[:any_1,:any_2] 
address ALGslice_oid;
comment Return the slice based on head oid x till y (exclusive).

command algebra.selectNotNil(b:bat[:oid,:any_2]):bat[:oid,:any_2] 
address ALGselectNotNil;
comment Select all not-nil values

command algebra.select(b:bat[:oid,:any_2],value:any_2):bat[:oid,:any_2] 
address ALGselect1;
comment Select all BUNs of a BAT with a certain 	tail value. Selection on NIL is also 	possible (it should be properly casted, 	e.g.:int(nil)).

command algebra.select(b:bat[:oid,:any_2],low:any_2,high:any_2,li:bit,hi:bit):bat[:oid,:any_2] 
address ALGselectInclusive;
comment Select all BUNs that have tail values: {v| low <{=} v <{=} high}.	Boundary inclusion is indicated separately.	NIL boundary values have a special meaning.	+ low  == nil means: no lower bound	+ high == nil means: no upper bound.

command algebra.select(b:bat[:oid,:any_2],low:any_2,high:any_2):bat[:oid,:any_2] 
address ALGselect;
comment Select all BUNs that have tail values: {v| low <= v <= high}.	NIL boundary values have a special meaning.		+ low  == nil means: no lower bound		+ high == nil means: no upper bound.		NOTE 1: you should cast the nil to the appropriate type, 				e.g. int(nil) in order to circumvent type clashes.		NOTE 2: as the 'nil' element has no clear place in the 				ordered domain of values, tuples with 'nil' values 				are NEVER returned by the range select.

command algebra.subselect(b:bat[:oid,:any_1],s:bat[:oid,:oid],low:any_1,high:any_1,li:bit,hi:bit,anti:bit):bat[:oid,:oid] 
address ALGsubselect2;
comment Select all head values of the first input BAT for which the tail value	is in range and for which the head value occurs in the tail of the	second input BAT.	The first input is a dense-headed BAT, the second input is a	dense-headed BAT with sorted tail, output is a dense-headed BAT	with in the tail the head value of the input BAT for which the	tail value is between the values low and high (inclusive if li	respectively hi is set).  The output BAT is sorted on the tail	value.  If low or high is nil, the boundary is not considered	(effectively - and + infinity).  If anti is set, the result is the	complement.  Nil values in the tail are never matched, unless	low=nil, high=nil, li=1, hi=1, anti=0.  All non-nil values are	returned if low=nil, high=nil, and li, hi are not both 1, or anti=1.	Note that the output is suitable as second input for this	function.

command algebra.subselect(b:bat[:oid,:any_1],low:any_1,high:any_1,li:bit,hi:bit,anti:bit):bat[:oid,:oid] 
address ALGsubselect1;
comment Select all head values for which the tail value is in range.	Input is a dense-headed BAT, output is a dense-headed BAT with in	the tail the head value of the input BAT for which the tail value	is between the values low and high (inclusive if li respectively	hi is set).  The output BAT is sorted on the tail value.  If low	or high is nil, the boundary is not considered (effectively - and	+ infinity).  If anti is set, the result is the complement.  Nil	values in the tail are never matched, unless low=nil, high=nil,	li=1, hi=1, anti=0.  All non-nil values are returned if low=nil,	high=nil, and li, hi are not both 1, or anti=1.	Note that the output is suitable as second input for the other	version of this function.

command algebra.thetajoin(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],opname:int,estimate:lng):bat[:any_1,:any_3] 
address ALGthetajoinEstimate;
command algebra.thetajoin(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],opname:int):bat[:any_1,:any_3] 
address ALGthetajoin;
comment Theta join on for 'mode' in { LE, LT, EQ, GT, GE }.  JOIN_EQ is 		just the same as join(). All other options do merge algorithms. 		Either using the fact that they are ordered() already (left on tail, 	right on head), or by using/creating binary search trees on the 		join columns. 

command algebra.thetajoin(left:bat[:oid,:any_1],right:bat[:oid,:any_1],opname:int) (l:bat[:oid,:oid],r:bat[:oid,:oid]) 
address ALGthetajoin2;
comment Returns 2 columns with all BUNs, consisting of the head-oids 	  from 'left' and 'right' for which there are BUNs in 'left' 	  and 'right' with equal tails

command algebra.tunion(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address ALGtunion;
command algebra.tdiff(left:bat[:oid,:oid],right:bat[:oid,:oid]):bat[:oid,:oid] 
address ALGtdiff;
command algebra.tdifference(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] 
address ALGtdifference;
command algebra.tinter(left:bat[:oid,:oid],right:bat[:oid,:oid]):bat[:oid,:oid] 
address ALGtinter;
command algebra.tintersect(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] 
address ALGtintersect;
command algebra.tunique(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address ALGtunique;
comment Select unique tuples from the input BAT. Double elimination is 		done over the BUNs tail. The result is a BAT with property		tkeyd()== true

command algebra.thetasubselect(b:bat[:oid,:any_1],s:bat[:oid,:oid],val:any_1,op:str):bat[:oid,:oid] 
address ALGthetasubselect2;
comment Select all head values of the first input BAT for which the tail value	obeys the relation value OP VAL and for which the head value occurs in	the tail of the second input BAT.	Input is a dense-headed BAT, output is a dense-headed BAT with in	the tail the head value of the input BAT for which the	relationship holds.  The output BAT is sorted on the tail value.

command algebra.thetasubselect(b:bat[:oid,:any_1],val:any_1,op:str):bat[:oid,:oid] 
address ALGthetasubselect1;
comment Select all head values for which the tail value obeys the relation	value OP VAL.	Input is a dense-headed BAT, output is a dense-headed BAT with in	the tail the head value of the input BAT for which the	relationship holds.  The output BAT is sorted on the tail value.

command algebra.uselect(b:bat[:any_1,:any_2],value:any_2):bat[:any_1,:void] 
address ALGuselect1;
comment Value select, but returning only the 	head values. SEE ALSO:select(bat,val)

command algebra.uselect(b:bat[:any_1,:any_2],low:any_2,high:any_2):bat[:any_1,:void] 
address ALGuselect;
command algebra.uselect(b:bat[:any_1,:any_2],low:any_2,high:any_2,li:bit,hi:bit):bat[:any_1,:void] 
address ALGuselectInclusive;
comment See select() but limited to head values

command alarm.alarm(secs:int,action:str):void 
address ALARMsetalarm;
comment execute action in X secs

command alarm.ctime{unsafe}():str 
address ALARMctime;
comment current time as a string

command alarm.epilogue():void 
address ALARMepilogue;
comment Finalize alarm module

command alarm.epoch{unsafe}():int 
address ALARMepoch;
comment current time as unix epoch

command alarm.prelude():void 
address ALARMprelude;
comment Initialize alarm module

command alarm.sleep(secs:int):void 
address ALARMsleep;
comment sleep X secs

command alarm.time{unsafe}():int 
address ALARMtime;
comment time in millisecs

command alarm.timers{unsafe}():bat[:str,:str] 
address ALARMtimers;
comment give a list of all active timers

command alarm.usec{unsafe}():lng 
address ALARMusec;
comment return cpu microseconds info

command batudf.fuse(one:bat[:oid,:lng],two:bat[:oid,:lng]):bat[:oid,:hge] 
address UDFBATfuse;
comment fuse two (8-byte) lng values into one (16-byte) hge value

command batudf.fuse(one:bat[:oid,:int],two:bat[:oid,:int]):bat[:oid,:lng] 
address UDFBATfuse;
comment fuse two (4-byte) int values into one (8-byte) lng value

command batudf.fuse(one:bat[:oid,:sht],two:bat[:oid,:sht]):bat[:oid,:int] 
address UDFBATfuse;
comment fuse two (2-byte) sht values into one (4-byte) int value

command batudf.fuse(one:bat[:oid,:bte],two:bat[:oid,:bte]):bat[:oid,:sht] 
address UDFBATfuse;
comment fuse two (1-byte) bte values into one (2-byte) sht value

command batudf.reverse(b:bat[:oid,:str]):bat[:oid,:str] 
address UDFBATreverse;
comment Reverse a BAT of strings

command batsql.alpha(dec:dbl,theta:bat[:oid,:dbl]):bat[:oid,:dbl] 
address SQLcst_alpha_bat;
comment BAT implementation of astronomy alpha function

command batsql.alpha(dec:bat[:oid,:dbl],theta:dbl):bat[:oid,:dbl] 
address SQLbat_alpha_cst;
comment BAT implementation of astronomy alpha function

command batsql.dec_round(v:bat[:oid,:hge],r:hge):bat[:oid,:hge] 
address hge_bat_dec_round_wrap;
comment round off the value v to nearests multiple of r

command batsql.dec_round(v:bat[:oid,:dbl],r:dbl):bat[:oid,:dbl] 
address dbl_bat_dec_round_wrap;
comment round off the value v to nearests multiple of r

command batsql.dec_round(v:bat[:oid,:flt],r:flt):bat[:oid,:flt] 
address flt_bat_dec_round_wrap;
comment round off the value v to nearests multiple of r

command batsql.dec_round(v:bat[:oid,:lng],r:lng):bat[:oid,:lng] 
address lng_bat_dec_round_wrap;
comment round off the value v to nearests multiple of r

command batsql.dec_round(v:bat[:oid,:int],r:int):bat[:oid,:int] 
address int_bat_dec_round_wrap;
comment round off the value v to nearests multiple of r

command batsql.dec_round(v:bat[:oid,:sht],r:sht):bat[:oid,:sht] 
address sht_bat_dec_round_wrap;
comment round off the value v to nearests multiple of r

command batsql.dec_round(v:bat[:oid,:bte],r:bte):bat[:oid,:bte] 
address bte_bat_dec_round_wrap;
comment round off the value v to nearests multiple of r

pattern batsql.next_value(sname:bat[:oid,:str],sequence:str):bat[:oid,:lng] 
address mvc_bat_next_value;
comment return the next value of the sequence

command batsql.round(v:bat[:oid,:hge],d:int,s:int,r:bte):bat[:oid,:hge] 
address hge_bat_round_wrap;
comment round off the decimal v(d,s) to r digits behind the dot (if r < 0, before the dot)

command batsql.round(v:bat[:oid,:dbl],r:bte):bat[:oid,:dbl] 
address dbl_bat_round_wrap;
comment round off the floating point v to r digits behind the dot (if r < 0, before the dot)

command batsql.round(v:bat[:oid,:flt],r:bte):bat[:oid,:flt] 
address flt_bat_round_wrap;
comment round off the floating point v to r digits behind the dot (if r < 0, before the dot)

command batsql.round(v:bat[:oid,:lng],d:int,s:int,r:bte):bat[:oid,:lng] 
address lng_bat_round_wrap;
comment round off the decimal v(d,s) to r digits behind the dot (if r < 0, before the dot)

command batsql.round(v:bat[:oid,:int],d:int,s:int,r:bte):bat[:oid,:int] 
address int_bat_round_wrap;
comment round off the decimal v(d,s) to r digits behind the dot (if r < 0, before the dot)

command batsql.round(v:bat[:oid,:sht],d:int,s:int,r:bte):bat[:oid,:sht] 
address sht_bat_round_wrap;
comment round off the decimal v(d,s) to r digits behind the dot (if r < 0, before the dot)

command batsql.round(v:bat[:oid,:bte],d:int,s:int,r:bte):bat[:oid,:bte] 
address bte_bat_round_wrap;
comment round off the decimal v(d,s) to r digits behind the dot (if r < 0, before the dot)

command batgeom.point(x:bat[:oid,:dbl],y:bat[:oid,:dbl]):bat[:oid,:wkb] 
address wkbcreatepoint_bat;
comment Construct a point-BAT from two geometry-BATs

command batcolor.blue(c:bat[:oid,:color]):bat[:oid,:int] 
address CLRbatBlue;
comment Extracts blue component from a color atom

command batcolor.cb(c:bat[:oid,:color]):bat[:oid,:int] 
address CLRbatCb;
comment Extracts Cb(blue color) component from a color atom

command batcolor.cr(c:bat[:oid,:color]):bat[:oid,:int] 
address CLRbatCr;
comment Extracts Cr(red color) component from a color atom

command batcolor.color(s:bat[:oid,:str]):bat[:oid,:color] 
address CLRbatColor;
comment Converts string to color

command batcolor.green(c:bat[:oid,:color]):bat[:oid,:int] 
address CLRbatGreen;
comment Extracts green component from a color atom

command batcolor.hue(c:bat[:oid,:color]):bat[:oid,:flt] 
address CLRbatHue;
comment Extracts hue component from a color atom

command batcolor.hsv(h:bat[:oid,:flt],s:bat[:oid,:flt],v:bat[:oid,:flt]):bat[:oid,:color] 
address CLRbatHsv;
comment Converts an HSV triplets to a color atom

command batcolor.hue(c:bat[:oid,:color]):bat[:oid,:int] 
address CLRbatHueInt;
comment Extracts hue component from a color atom

command batcolor.luminance(c:bat[:oid,:color]):bat[:oid,:int] 
address CLRbatLuminance;
comment Extracts Y(luminance) component from a color atom

command batcolor.red(c:bat[:oid,:color]):bat[:oid,:int] 
address CLRbatRed;
comment Extracts red component from a color atom

command batcolor.rgb(r:bat[:oid,:int],g:bat[:oid,:int],b:bat[:oid,:int]):bat[:oid,:color] 
address CLRbatRgb;
comment Converts an RGB triplets to a color atom

command batcolor.saturation(c:bat[:oid,:color]):bat[:oid,:flt] 
address CLRbatSaturation;
comment Extracts saturation component from a color atom

command batcolor.saturation(c:bat[:oid,:color]):bat[:oid,:int] 
address CLRbatSaturationInt;
comment Extracts saturation component from a color atom

command batcolor.str(b:bat[:oid,:color]):bat[:oid,:str] 
address CLRbatStr;
comment Identity mapping for string bats

command batcolor.value(c:bat[:oid,:color]):bat[:oid,:flt] 
address CLRbatValue;
comment Extracts value component from a color atom

command batcolor.value(c:bat[:oid,:color]):bat[:oid,:int] 
address CLRbatValueInt;
comment Extracts value component from a color atom

command batstr.endsWith(s:bat[:oid,:str],suffix:str):bat[:oid,:bit] 
address STRbatSuffixcst;
comment Suffix check.

command batstr.endsWith(s:bat[:oid,:str],suffix:bat[:oid,:str]):bat[:oid,:bit] 
address STRbatSuffix;
comment Suffix check.

command batstr.ilike(s:bat[:oid,:str],pat:str):bat[:oid,:bit] 
address BATPCREilike2;
command batstr.ilike(s:bat[:oid,:str],pat:str,esc:str):bat[:oid,:bit] 
address BATPCREilike;
command batstr.like(s:bat[:oid,:str],pat:str):bat[:oid,:bit] 
address BATPCRElike2;
command batstr.like(s:bat[:oid,:str],pat:str,esc:str):bat[:oid,:bit] 
address BATPCRElike;
command batstr.lpad(s:bat[:oid,:str],n:bat[:oid,:int],s2:bat[:oid,:str]):bat[:oid,:str] 
address STRbatLpad2_bat_bat;
comment Prepend the second strings to the first strings to reach the given lengths. Truncate the first strings on the right if their lengths is larger than the given lengths.

command batstr.lpad(s:bat[:oid,:str],n:int,s2:bat[:oid,:str]):bat[:oid,:str] 
address STRbatLpad2_const_bat;
comment Prepend the second strings to the first strings to reach the given length. Truncate the first strings on the right if their lengths is larger than the given length.

command batstr.lpad(s:bat[:oid,:str],n:bat[:oid,:int],s2:str):bat[:oid,:str] 
address STRbatLpad2_bat_const;
comment Prepend the second string to the first strings to reach the given lengths. Truncate the first strings on the right if their lengths is larger than the given lengths.

command batstr.lpad(s:bat[:oid,:str],n:int,s2:str):bat[:oid,:str] 
address STRbatLpad2_const_const;
comment Prepend the second string to the first strings to reach the given length. Truncate the first strings on the right if their lengths is larger than the given length.

command batstr.lpad(s:bat[:oid,:str],n:bat[:oid,:int]):bat[:oid,:str] 
address STRbatLpad_bat;
comment Prepend whitespaces to the strings to reach the given lengths. Truncate the strings on the right if their lengths is larger than the given lengths.

command batstr.lpad(s:bat[:oid,:str],n:int):bat[:oid,:str] 
address STRbatLpad_const;
comment Prepend whitespaces to the strings to reach the given length. Truncate the strings on the right if their lengths is larger than the given length.

command batstr.ltrim(s:bat[:oid,:str],s2:bat[:oid,:str]):bat[:oid,:str] 
address STRbatLtrim2_bat;
comment Strip characters in the second strings from start of the first strings.

command batstr.ltrim(s:bat[:oid,:str],s2:str):bat[:oid,:str] 
address STRbatLtrim2_const;
comment Strip characters in the second string from start of the first strings.

command batstr.ltrim(s:bat[:oid,:str]):bat[:oid,:str] 
address STRbatLtrim;
comment Strip whitespaces from start of a string.

command batstr.length(s:bat[:oid,:str]):bat[:oid,:int] 
address STRbatLength;
comment Return the length of a string.

command batstr.not_ilike(s:bat[:oid,:str],pat:str):bat[:oid,:bit] 
address BATPCREnotilike2;
command batstr.not_ilike(s:bat[:oid,:str],pat:str,esc:str):bat[:oid,:bit] 
address BATPCREnotilike;
command batstr.not_like(s:bat[:oid,:str],pat:str):bat[:oid,:bit] 
address BATPCREnotlike2;
command batstr.not_like(s:bat[:oid,:str],pat:str,esc:str):bat[:oid,:bit] 
address BATPCREnotlike;
command batstr.nbytes(s:bat[:oid,:str]):bat[:oid,:int] 
address STRbatBytes;
comment Return the string length in bytes.

command batstr.r_search(s:bat[:oid,:str],c:str):bat[:oid,:int] 
address STRbatRstrSearchcst;
comment Reverse search for a substring. Returns position, -1 if not found.

command batstr.r_search(s:bat[:oid,:str],c:bat[:oid,:str]):bat[:oid,:int] 
address STRbatRstrSearch;
comment Reverse search for a substring. Returns position, -1 if not found.

command batstr.rpad(s:bat[:oid,:str],n:bat[:oid,:int],s2:bat[:oid,:str]):bat[:oid,:str] 
address STRbatRpad2_bat_bat;
comment Append the second strings to the first strings to reach the given lengths. Truncate the first strings on the right if their lengths is larger than the given lengths.

command batstr.rpad(s:bat[:oid,:str],n:int,s2:bat[:oid,:str]):bat[:oid,:str] 
address STRbatRpad2_const_bat;
comment Append the second strings to the first strings to reach the given length. Truncate the first strings on the right if their lengths is larger than the given length.

command batstr.rpad(s:bat[:oid,:str],n:bat[:oid,:int],s2:str):bat[:oid,:str] 
address STRbatRpad2_bat_const;
comment Append the second string to the first strings to reach the given lengths. Truncate the first strings on the right if their lengths is larger than the given lengths.

command batstr.rpad(s:bat[:oid,:str],n:int,s2:str):bat[:oid,:str] 
address STRbatRpad2_const_const;
comment Append the second string to the first strings to reach the given length. Truncate the first strings on the right if their lengths is larger than the given length.

command batstr.rpad(s:bat[:oid,:str],n:bat[:oid,:int]):bat[:oid,:str] 
address STRbatRpad_bat;
comment Append whitespaces to the strings to reach the given lengths. Truncate the strings on the right if their lengths is larger than the given lengths.

command batstr.rpad(s:bat[:oid,:str],n:int):bat[:oid,:str] 
address STRbatRpad_const;
comment Append whitespaces to the strings to reach the given length. Truncate the strings on the right if their lengths is larger than the given length.

command batstr.rtrim(s:bat[:oid,:str],s2:bat[:oid,:str]):bat[:oid,:str] 
address STRbatRtrim2_bat;
comment Strip characters in the second strings from end of the first strings.

command batstr.rtrim(s:bat[:oid,:str],s2:str):bat[:oid,:str] 
address STRbatRtrim2_const;
comment Strip characters in the second string from end of the first strings.

command batstr.rtrim(s:bat[:oid,:str]):bat[:oid,:str] 
address STRbatRtrim;
comment Strip whitespaces from end of a string.

command batstr.substitute(s:bat[:oid,:str],src:str,dst:str,rep:bit):bat[:oid,:str] 
address STRbatSubstitutecst;
comment Substitute first occurrence of 'src' by	'dst'.  Iff repeated = true this is	repeated while 'src' can be found in the	result string. In order to prevent	recursion and result strings of unlimited	size, repeating is only done iff src is	not a substring of dst.

command batstr.substring(s:bat[:oid,:str],start:int,index:int):bat[:oid,:str] 
address STRbatsubstringcst;
comment Substring extraction using [start,start+length]

command batstr.substring(s:bat[:oid,:str],start:bat[:oid,:int],index:bat[:oid,:int]):bat[:oid,:str] 
address STRbatsubstring;
comment Substring extraction using [start,start+length]

command batstr.string(b:bat[:oid,:str],offset:int):bat[:oid,:str] 
address STRbatTailcst;
comment Return the tail s[offset..n] of a string s[0..n].

command batstr.string(b:bat[:oid,:str],offset:bat[:oid,:int]):bat[:oid,:str] 
address STRbatTail;
comment Return the tail s[offset..n] of a string s[0..n].

command batstr.search(s:bat[:oid,:str],c:str):bat[:oid,:int] 
address STRbatstrSearchcst;
comment Search for a substring. Returns position, -1 if not found.

command batstr.search(s:bat[:oid,:str],c:bat[:oid,:str]):bat[:oid,:int] 
address STRbatstrSearch;
comment Search for a substring. Returns position, -1 if not found.

command batstr.startsWith(s:bat[:oid,:str],prefix:str):bat[:oid,:bit] 
address STRbatPrefixcst;
comment Prefix check.

command batstr.startsWith(s:bat[:oid,:str],prefix:bat[:oid,:str]):bat[:oid,:bit] 
address STRbatPrefix;
comment Prefix check.

command batstr.stringlength(s:bat[:oid,:str]):bat[:oid,:int] 
address STRbatstringLength;
comment Return the length of a right trimed string.

command batstr.trim(s:bat[:oid,:str],s2:bat[:oid,:str]):bat[:oid,:str] 
address STRbatStrip2_bat;
comment Strip characters in the second strings around the first strings.

command batstr.trim(s:bat[:oid,:str],s2:str):bat[:oid,:str] 
address STRbatStrip2_const;
comment Strip characters in the second string around the first strings.

command batstr.trim(s:bat[:oid,:str]):bat[:oid,:str] 
address STRbatStrip;
comment Strip whitespaces around a string.

command batstr.toUpper(s:bat[:oid,:str]):bat[:oid,:str] 
address STRbatUpper;
comment Convert a string to upper case.

command batstr.toLower(s:bat[:oid,:str]):bat[:oid,:str] 
address STRbatLower;
comment Convert a string to lower case.

command batstr.unicodeAt(s:bat[:oid,:str],index:int):bat[:oid,:int] 
address STRbatWChrAtcst;
comment get a unicode character (as an int) from a string position.

command batstr.unicodeAt(s:bat[:oid,:str],index:bat[:oid,:int]):bat[:oid,:int] 
address STRbatWChrAt;
comment get a unicode character (as an int) from a string position.

command batmmath.atan2(x:bat[:oid,:flt],y:flt):bat[:oid,:flt] 
address CMDscience_bat_cst_atan2_flt;
command batmmath.atan2(x:bat[:oid,:dbl],y:dbl):bat[:oid,:dbl] 
address CMDscience_bat_cst_atan2_dbl;
command batmmath.atan(x:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDscience_bat_flt_atan;
command batmmath.atan(x:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDscience_bat_dbl_atan;
command batmmath.acos(x:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDscience_bat_flt_acos;
command batmmath.acos(x:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDscience_bat_dbl_acos;
command batmmath.asin(x:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDscience_bat_flt_asin;
command batmmath.asin(x:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDscience_bat_dbl_asin;
command batmmath.ceil(x:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDscience_bat_flt_ceil;
command batmmath.ceil(x:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDscience_bat_dbl_ceil;
command batmmath.cosh(x:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDscience_bat_flt_cosh;
command batmmath.cosh(x:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDscience_bat_dbl_cosh;
command batmmath.cos(x:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDscience_bat_flt_cos;
command batmmath.cos(x:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDscience_bat_dbl_cos;
command batmmath.degrees(x:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDscience_bat_flt_degrees;
command batmmath.degrees(x:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDscience_bat_dbl_degrees;
command batmmath.exp(x:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDscience_bat_flt_exp;
command batmmath.exp(x:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDscience_bat_dbl_exp;
command batmmath.fmod(x:bat[:oid,:flt],y:flt):bat[:oid,:flt] 
address CMDbatMODsignal;
command batmmath.fmod(x:bat[:oid,:dbl],y:dbl):bat[:oid,:dbl] 
address CMDbatMODsignal;
command batmmath.floor(x:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDscience_bat_flt_floor;
command batmmath.floor(x:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDscience_bat_dbl_floor;
command batmmath.fabs(x:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDscience_bat_flt_fabs;
command batmmath.fabs(x:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDscience_bat_dbl_fabs;
command batmmath.log10(x:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDscience_bat_flt_log10;
command batmmath.log10(x:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDscience_bat_dbl_log10;
command batmmath.log(x:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDscience_bat_flt_log;
command batmmath.log(x:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDscience_bat_dbl_log;
command batmmath.pow(x:bat[:oid,:flt],y:flt):bat[:oid,:flt] 
address CMDscience_bat_cst_pow_flt;
command batmmath.pow(x:bat[:oid,:dbl],y:dbl):bat[:oid,:dbl] 
address CMDscience_bat_cst_pow_dbl;
command batmmath.radians(x:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDscience_bat_flt_radians;
command batmmath.radians(x:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDscience_bat_dbl_radians;
command batmmath.sqrt(x:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDscience_bat_flt_sqrt;
command batmmath.sqrt(x:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDscience_bat_dbl_sqrt;
command batmmath.sinh(x:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDscience_bat_flt_sinh;
command batmmath.sinh(x:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDscience_bat_dbl_sinh;
command batmmath.sin(x:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDscience_bat_flt_sin;
command batmmath.sin(x:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDscience_bat_dbl_sin;
command batmmath.tanh(x:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDscience_bat_flt_tanh;
command batmmath.tanh(x:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDscience_bat_dbl_tanh;
command batmmath.tan(x:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDscience_bat_flt_tan;
command batmmath.tan(x:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDscience_bat_dbl_tan;
command batxml.attribute(name:str,val:bat[:oid,:str]):bat[:oid,:xml] 
address BATXMLattribute;
comment Construct an attribute value pair.

command batxml.concat(left:bat[:oid,:xml],right:bat[:oid,:xml]):bat[:oid,:xml] 
address BATXMLconcat;
comment Concatenate the XML values.

command batxml.comment(val:bat[:oid,:str]):bat[:oid,:xml] 
address BATXMLcomment;
comment Create an XML comment element.

command batxml.content(src:bat[:oid,:str]):bat[:oid,:xml] 
address BATXMLcontent;
comment Parse the string as XML element content.

command batxml.document(src:bat[:oid,:str]):bat[:oid,:xml] 
address BATXMLdocument;
comment Parse the string as an XML document.

command batxml.element(name:str,ns:xml,attr:xml,s:bat[:oid,:xml]):bat[:oid,:xml] 
address BATXMLelement;
comment The basic building block for XML elements are namespaces, attributes and a sequence of XML elements. The name space and the attributes may be left unspecified(=nil).

command batxml.element(name:str,s:bat[:oid,:xml]):bat[:oid,:xml] 
address BATXMLelementSmall;
comment The basic building block for XML elements are namespaces, attributes and a sequence of XML elements. The name space and the attributes may be left unspecified.

pattern batxml.forest(val:bat[:oid,:xml]...):bat[:oid,:xml] 
address BATXMLforest;
comment Construct an element list.

command batxml.isdocument(val:bat[:oid,:str]):bat[:oid,:bit] 
address BATXMLisdocument;
comment Validate the string as a XML document.

command batxml.options(tag:str,option:str,left:bat[:oid,:xml]):bat[:oid,:xml] 
address BATXMLoptions;
comment Create the components including NULL conversions.

command batxml.pi(target:str,val:bat[:oid,:xml]):bat[:oid,:xml] 
address BATXMLpi;
comment Construct a processing instruction.

command batxml.parse(doccont:str,val:bat[:oid,:str],option:str):bat[:oid,:xml] 
address BATXMLparse;
comment Parse the XML document or element string values.

command batxml.root(val:bat[:oid,:xml],version:str,standalone:str):bat[:oid,:xml] 
address BATXMLroot;
comment Contruct the root nodes.

command batxml.serialize(val:bat[:oid,:xml]):bat[:oid,:str] 
address BATXMLxml2str;
comment Serialize the XML object to a string.

command batxml.str(src:bat[:oid,:xml]):bat[:oid,:str] 
address BATXMLxml2str;
comment Cast the xml to a string.

command batxml.text(val:bat[:oid,:xml]):bat[:oid,:str] 
address BATXMLxmltext;
comment Serialize the XML object to a string.

command batxml.xquery(val:bat[:oid,:str],expr:str):bat[:oid,:xml] 
address BATXMLxquery;
comment Execute the XQuery against the elements.

command batxml.xml(src:bat[:oid,:str]):bat[:oid,:xml] 
address BATXMLstr2xml;
comment Cast the string to an xml compliant string.

pattern batcalc.!=(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:dbl,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:dbl],v:dbl):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:dbl,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:dbl],v:flt):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:dbl,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:dbl],v:lng):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:dbl,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:dbl],v:wrd):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:dbl,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:dbl],v:int):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:dbl],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:dbl,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:dbl],v:sht):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:dbl,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:dbl],v:bte):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:flt,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:flt],v:dbl):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:flt,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:flt],v:flt):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:flt],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:flt,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:flt],v:lng):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:flt],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:flt,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:flt],v:wrd):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:flt,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:flt],v:int):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:flt],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:flt,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:flt],v:sht):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:flt],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:flt,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:flt],v:bte):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:flt],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:lng,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:lng],v:dbl):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:lng,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:lng],v:flt):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:lng],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:lng,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:lng],v:lng):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:lng,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:lng],v:wrd):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:lng,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:lng],v:int):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:lng,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:lng],v:sht):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:lng,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:lng],v:bte):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:wrd,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:wrd],v:dbl):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:wrd,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:wrd],v:flt):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:wrd,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:wrd],v:lng):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:wrd],v:wrd):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:wrd,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:wrd],v:int):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:wrd],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:wrd,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:wrd],v:sht):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:wrd,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:wrd],v:bte):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:int,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:int],v:dbl):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:int],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:int,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:int],v:flt):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:int],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:int,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:int],v:lng):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:int,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:int],v:wrd):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:int],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:int,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:int],v:int):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:int,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:int],v:sht):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:int,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:int],v:bte):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:sht,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:sht],v:dbl):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:sht,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:sht],v:flt):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:sht],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:sht,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:sht],v:lng):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:sht,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:sht],v:wrd):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:sht,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:sht],v:int):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:sht,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:sht],v:sht):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:sht,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:sht],v:bte):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:bte,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:bte],v:dbl):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:bte,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:bte],v:flt):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:bte],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:bte,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:bte],v:lng):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:bte,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:bte],v:wrd):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:bte,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:bte],v:int):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:bte,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:bte],v:sht):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:bte,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:bte],v:bte):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:oid,b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:oid,b:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:oid],v:oid,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:oid],v:oid):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:oid],b2:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:oid],b2:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:str,b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:str,b:bat[:oid,:str]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:str],v:str,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:str],v:str):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:str],b2:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:str],b2:bat[:oid,:str]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:bit,b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:bit,b:bat[:oid,:bit]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:bit],v:bit,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:bit],v:bit):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:bit],b2:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:bit],b2:bat[:oid,:bit]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:dbl,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:dbl,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:dbl],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:dbl],v:hge):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:dbl],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:dbl],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:flt,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:flt,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:flt],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:flt],v:hge):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:flt],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:flt],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:hge,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:hge,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:hge],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:hge],v:dbl):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:hge],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:hge],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:hge,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:hge,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:hge],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:hge],v:flt):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:hge],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:hge],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:hge,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:hge],v:hge):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:hge,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:hge,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:hge],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:hge],v:lng):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:hge],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:hge],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:hge,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:hge,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:hge],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:hge],v:wrd):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:hge],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:hge],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:hge,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:hge,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:hge],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:hge],v:int):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:hge],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:hge],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:hge,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:hge,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:hge],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:hge],v:sht):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:hge],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:hge],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:hge,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:hge,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:hge],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:hge],v:bte):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:hge],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:hge],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:lng,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:lng,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:lng],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:lng],v:hge):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:lng],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:lng],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:wrd,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:wrd,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:wrd],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:wrd],v:hge):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:wrd],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:wrd],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:int,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:int,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:int],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:int],v:hge):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:int],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:int],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:sht,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:sht,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:sht],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:sht],v:hge):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:sht],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:sht],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:bte,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:bte,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:bte],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:bte],v:hge):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:bte],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:bte],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:timestamp,b:bat[:oid,:timestamp],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:timestamp,b:bat[:oid,:timestamp]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:timestamp],v:timestamp,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:timestamp],v:timestamp):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:timestamp],b2:bat[:oid,:timestamp],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:timestamp],b2:bat[:oid,:timestamp]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:daytime,b:bat[:oid,:daytime],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:daytime,b:bat[:oid,:daytime]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:daytime],v:daytime,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:daytime],v:daytime):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:daytime],b2:bat[:oid,:daytime],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:daytime],b2:bat[:oid,:daytime]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.!=(v:date,b:bat[:oid,:date],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B with candidates list

pattern batcalc.!=(v:date,b:bat[:oid,:date]):bat[:oid,:bit] 
address CMDbatNE;
comment Return V != B

pattern batcalc.!=(b:bat[:oid,:date],v:date,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V with candidates list

pattern batcalc.!=(b:bat[:oid,:date],v:date):bat[:oid,:bit] 
address CMDbatNE;
comment Return B != V

pattern batcalc.!=(b1:bat[:oid,:date],b2:bat[:oid,:date],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2 with candidates list

pattern batcalc.!=(b1:bat[:oid,:date],b2:bat[:oid,:date]):bat[:oid,:bit] 
address CMDbatNE;
comment Return B1 != B2

pattern batcalc.%(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:dbl],v:dbl):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:dbl,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:dbl],v:flt):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:dbl,b:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:dbl],v:lng):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:dbl,b:bat[:oid,:wrd]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:dbl],v:wrd):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:dbl,b:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:dbl],v:int):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:dbl],b2:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:dbl,b:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:dbl],v:sht):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:dbl,b:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:dbl],v:bte):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:flt,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:flt],v:dbl):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:flt,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:flt],v:flt):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:flt],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:flt,b:bat[:oid,:lng]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:flt],v:lng):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:flt],b2:bat[:oid,:lng]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:flt,b:bat[:oid,:wrd]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:flt],v:wrd):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:flt,b:bat[:oid,:int]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:flt],v:int):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:flt],b2:bat[:oid,:int]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:flt,b:bat[:oid,:sht]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:flt],v:sht):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:flt],b2:bat[:oid,:sht]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:flt,b:bat[:oid,:bte]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:flt],v:bte):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:flt],b2:bat[:oid,:bte]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:lng,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:lng],v:dbl):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:lng,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:lng],v:flt):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:lng],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:lng,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:lng],v:lng):bat[:oid,:lng] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:lng,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:lng],v:wrd):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:lng,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:lng],v:int):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:lng,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:lng],v:sht):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:lng,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:lng],v:bte):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:wrd,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:wrd],v:dbl):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:wrd,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:wrd],v:flt):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:wrd,b:bat[:oid,:lng]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:wrd],v:lng):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:wrd],v:wrd):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:wrd,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:wrd],v:int):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:wrd],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:wrd,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:wrd],v:sht):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:wrd,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:wrd],v:bte):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:int,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:int],v:dbl):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:int],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:int,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:int],v:flt):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:int],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:int,b:bat[:oid,:lng]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:int],v:lng):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:int,b:bat[:oid,:wrd]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:int],v:wrd):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:int],b2:bat[:oid,:wrd]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:int,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:int],v:int):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:int,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:int],v:sht):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:int,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:int],v:bte):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:sht,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:sht],v:dbl):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:sht,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:sht],v:flt):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:sht],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:sht,b:bat[:oid,:lng]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:sht],v:lng):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:sht,b:bat[:oid,:wrd]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:sht],v:wrd):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:sht,b:bat[:oid,:int]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:sht],v:int):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:sht,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:sht],v:sht):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:sht,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:sht],v:bte):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:bte,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:bte],v:dbl):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:bte,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:bte],v:flt):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:bte],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:bte,b:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:bte],v:lng):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:bte,b:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:bte],v:wrd):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:bte,b:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:bte],v:int):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:bte,b:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:bte],v:sht):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:bte,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:bte],v:bte):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:dbl,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:dbl,b:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:dbl],v:hge,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:dbl],v:hge):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:dbl],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:dbl],b2:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:flt,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:flt,b:bat[:oid,:hge]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:flt],v:hge,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:flt],v:hge):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:flt],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:flt],b2:bat[:oid,:hge]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:hge,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:hge,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:hge],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:hge],v:dbl):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:hge],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:hge],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:hge,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:hge,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:hge],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:hge],v:flt):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:hge],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:hge],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:hge,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:hge],v:hge):bat[:oid,:hge] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:hge,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:hge,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:hge],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:hge],v:lng):bat[:oid,:lng] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:hge],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:hge],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:hge,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:hge,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:hge],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:hge],v:wrd):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:hge],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:hge],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:hge,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:hge,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:hge],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:hge],v:int):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:hge],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:hge],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:hge,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:hge,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:hge],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:hge],v:sht):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:hge],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:hge],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:hge,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:hge,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:hge],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:hge],v:bte):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:hge],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:hge],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:lng,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:lng,b:bat[:oid,:hge]):bat[:oid,:lng] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:lng],v:hge,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:lng],v:hge):bat[:oid,:lng] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:lng],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:lng],b2:bat[:oid,:hge]):bat[:oid,:lng] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:wrd,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:wrd,b:bat[:oid,:hge]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:wrd],v:hge,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:wrd],v:hge):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:wrd],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:wrd],b2:bat[:oid,:hge]):bat[:oid,:wrd] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:int,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:int,b:bat[:oid,:hge]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:int],v:hge,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:int],v:hge):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:int],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:int],b2:bat[:oid,:hge]):bat[:oid,:int] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:sht,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:sht,b:bat[:oid,:hge]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:sht],v:hge,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:sht],v:hge):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:sht],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:sht],b2:bat[:oid,:hge]):bat[:oid,:sht] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.%(v:bte,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return V % B with candidates list, signal error on divide by zero

pattern batcalc.%(v:bte,b:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return V % B, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:bte],v:hge,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B % V with candidates list, signal error on divide by zero

pattern batcalc.%(b:bat[:oid,:bte],v:hge):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B % V, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:bte],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B1 % B2 with candidates list, signal error on divide by zero

pattern batcalc.%(b1:bat[:oid,:bte],b2:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatMODsignal;
comment Return B1 % B2, signal error on divide by zero

pattern batcalc.*(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:dbl],v:dbl):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:dbl,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:dbl],v:flt):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:dbl,b:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:dbl],v:lng):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:dbl,b:bat[:oid,:wrd]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:dbl],v:wrd):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:dbl,b:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:dbl],v:int):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:dbl],b2:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:dbl,b:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:dbl],v:sht):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:dbl,b:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:dbl],v:bte):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:flt,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:flt],v:dbl):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:flt,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:flt],v:flt):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:flt,b:bat[:oid,:lng]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:flt],v:lng):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:lng]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:flt,b:bat[:oid,:wrd]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:flt],v:wrd):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:flt,b:bat[:oid,:int]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:flt],v:int):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:int]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:flt,b:bat[:oid,:sht]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:flt],v:sht):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:sht]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:flt,b:bat[:oid,:bte]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:flt],v:bte):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:bte]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:lng,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:lng],v:dbl):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:lng,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:lng],v:flt):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:lng,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:lng],v:lng):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:lng,b:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:lng],v:wrd):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:lng,b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:lng],v:int):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:lng,b:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:lng],v:sht):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:lng,b:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:lng],v:bte):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:wrd,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:wrd],v:dbl):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:wrd,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:wrd],v:flt):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:wrd,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:wrd],v:lng):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:wrd],v:wrd):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:wrd],v:int):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:wrd],b2:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:wrd,b:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:wrd],v:sht):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:wrd,b:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:wrd],v:bte):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:int,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:int],v:dbl):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:int,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:int],v:flt):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:int,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:int],v:lng):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:int,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:int],v:wrd):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:int,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:int],v:int):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:int,b:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:int],v:sht):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:int,b:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:int],v:bte):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:sht,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:sht],v:dbl):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:sht,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:sht],v:flt):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:sht,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:sht],v:lng):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:sht,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:sht],v:wrd):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:sht,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:sht],v:int):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:sht,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:sht],v:sht):bat[:oid,:sht] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:sht,b:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:sht],v:bte):bat[:oid,:sht] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:bte,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:bte],v:dbl):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:bte,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:bte],v:flt):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:bte,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:bte],v:lng):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:bte,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:bte],v:wrd):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:bte,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:bte],v:int):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:bte,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:bte],v:sht):bat[:oid,:sht] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:bte,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:bte],v:bte):bat[:oid,:bte] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:flt,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:flt],v:flt):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:flt,b:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:flt],v:lng):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:flt,b:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:flt],v:int):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:flt,b:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:flt],v:sht):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:flt,b:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:flt],v:bte):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:lng,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:lng],v:flt):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:int,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:int],v:flt):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:int,b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:int],v:int):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:int,b:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:int],v:sht):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:int,b:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:int],v:bte):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:sht,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:sht],v:flt):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:sht,b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:sht],v:int):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:sht,b:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:sht],v:sht):bat[:oid,:int] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:sht,b:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:sht],v:bte):bat[:oid,:int] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:bte,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:bte],v:flt):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:bte,b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:bte],v:int):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:bte,b:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:bte],v:sht):bat[:oid,:int] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:bte,b:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:bte],v:bte):bat[:oid,:sht] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:dbl,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:dbl,b:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:dbl],v:hge,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:dbl],v:hge):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:dbl],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:dbl],b2:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:flt,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:flt,b:bat[:oid,:hge]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:flt],v:hge,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:flt],v:hge):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:hge]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:hge,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:hge,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:hge],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:hge],v:dbl):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:hge],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:hge],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:hge,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:hge,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:hge],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:hge],v:flt):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:hge],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:hge],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:hge,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:hge],v:hge):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:hge,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:hge,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:hge],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:hge],v:lng):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:hge],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:hge],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:hge,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:hge,b:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:hge],v:wrd,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:hge],v:wrd):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:hge],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:hge],b2:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:hge,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:hge,b:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:hge],v:int,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:hge],v:int):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:hge],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:hge],b2:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:hge,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:hge,b:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:hge],v:sht,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:hge],v:sht):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:hge],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:hge],b2:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:hge,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:hge,b:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:hge],v:bte,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:hge],v:bte):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:hge],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:hge],b2:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:lng,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:lng,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:lng],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:lng],v:hge):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:wrd,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:wrd,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:wrd],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:wrd],v:hge):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:wrd],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:wrd],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:int,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:int,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:int],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:int],v:hge):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:sht,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:sht,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:sht],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:sht],v:hge):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:bte,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return V * B with candidates list, signal error on overflow

pattern batcalc.*(v:bte,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return V * B, signal error on overflow

pattern batcalc.*(b:bat[:oid,:bte],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B * V with candidates list, signal error on overflow

pattern batcalc.*(b:bat[:oid,:bte],v:hge):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B * V, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B1 * B2 with candidates list, signal error on overflow

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMULsignal;
comment Return B1 * B2, signal error on overflow

pattern batcalc.*(v:flt,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:flt,b:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:flt],v:hge,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:flt],v:hge):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:flt],b2:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:hge,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:hge,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:hge],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:hge],v:flt):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:hge],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:hge],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:lng,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:lng],v:lng):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:lng,b:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:lng],v:int):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:lng,b:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:lng],v:sht):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:lng,b:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:lng],v:bte):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:int,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:int],v:lng):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:sht,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:sht],v:lng):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.*(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return V * B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(v:bte,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return V * B, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B * V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b:bat[:oid,:bte],v:lng):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B * V, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B1 * B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.*(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatMULenlarge;
comment Return B1 * B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:str,b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDbatADD;
comment Return concatenation of V and B with candidates list

pattern batcalc.+(v:str,b:bat[:oid,:str]):bat[:oid,:str] 
address CMDbatADD;
comment Return concatenation of V and B

pattern batcalc.+(b:bat[:oid,:str],v:str,s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDbatADD;
comment Return concatenation of B and V with candidates list

pattern batcalc.+(b:bat[:oid,:str],v:str):bat[:oid,:str] 
address CMDbatADD;
comment Return concatenation of B and V

pattern batcalc.+(b1:bat[:oid,:str],b2:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDbatADD;
comment Return concatenation of B1 and B2 with candidates list

pattern batcalc.+(b1:bat[:oid,:str],b2:bat[:oid,:str]):bat[:oid,:str] 
address CMDbatADD;
comment Return concatenation of B1 and B2

pattern batcalc.+(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:dbl],v:dbl):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:dbl,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:dbl],v:flt):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:dbl,b:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:dbl],v:lng):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:dbl,b:bat[:oid,:wrd]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:dbl],v:wrd):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:dbl,b:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:dbl],v:int):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:dbl],b2:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:dbl,b:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:dbl],v:sht):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:dbl,b:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:dbl],v:bte):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:flt,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:flt],v:dbl):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:flt,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:flt],v:flt):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:flt,b:bat[:oid,:lng]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:flt],v:lng):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:lng]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:flt,b:bat[:oid,:wrd]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:flt],v:wrd):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:flt,b:bat[:oid,:int]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:flt],v:int):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:int]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:flt,b:bat[:oid,:sht]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:flt],v:sht):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:sht]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:flt,b:bat[:oid,:bte]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:flt],v:bte):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:bte]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:lng,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:lng],v:dbl):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:lng,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:lng],v:flt):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:lng,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:lng],v:lng):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:lng,b:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:lng],v:wrd):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:lng,b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:lng],v:int):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:lng,b:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:lng],v:sht):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:lng,b:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:lng],v:bte):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:wrd,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:wrd],v:dbl):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:wrd,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:wrd],v:flt):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:wrd,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:wrd],v:lng):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:wrd],v:wrd):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:wrd],v:int):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:wrd],b2:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:wrd,b:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:wrd],v:sht):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:wrd,b:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:wrd],v:bte):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:int,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:int],v:dbl):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:int,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:int],v:flt):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:int,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:int],v:lng):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:int,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:int],v:wrd):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:int,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:int],v:int):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:int,b:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:int],v:sht):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:int,b:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:int],v:bte):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:sht,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:sht],v:dbl):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:sht,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:sht],v:flt):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:sht,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:sht],v:lng):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:sht,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:sht],v:wrd):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:sht,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:sht],v:int):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:sht,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:sht],v:sht):bat[:oid,:sht] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:sht,b:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:sht],v:bte):bat[:oid,:sht] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:bte,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:bte],v:dbl):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:bte,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:bte],v:flt):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:bte,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:bte],v:lng):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:bte,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:bte],v:wrd):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:bte,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:bte],v:int):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:bte,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:bte],v:sht):bat[:oid,:sht] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:bte,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:bte],v:bte):bat[:oid,:bte] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:flt,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:flt],v:flt):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:flt,b:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:flt],v:lng):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:flt,b:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:flt],v:int):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:flt,b:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:flt],v:sht):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:flt,b:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:flt],v:bte):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:lng,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:lng],v:flt):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:int,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:int],v:flt):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:int,b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:int],v:int):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:int,b:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:int],v:sht):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:int,b:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:int],v:bte):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:sht,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:sht],v:flt):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:sht,b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:sht],v:int):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:sht,b:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:sht],v:sht):bat[:oid,:int] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:sht,b:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:sht],v:bte):bat[:oid,:int] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:bte,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:bte],v:flt):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:bte,b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:bte],v:int):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:bte,b:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:bte],v:sht):bat[:oid,:int] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:bte,b:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:bte],v:bte):bat[:oid,:sht] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.++(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatINCR;
comment Unary increment over the tail of the bat with candidates list

pattern batcalc.++(b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatINCR;
comment Unary increment over the tail of the bat

pattern batcalc.++(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatINCR;
comment Unary increment over the tail of the bat with candidates list

pattern batcalc.++(b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatINCR;
comment Unary increment over the tail of the bat

pattern batcalc.++(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatINCR;
comment Unary increment over the tail of the bat with candidates list

pattern batcalc.++(b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatINCR;
comment Unary increment over the tail of the bat

pattern batcalc.++(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatINCR;
comment Unary increment over the tail of the bat with candidates list

pattern batcalc.++(b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatINCR;
comment Unary increment over the tail of the bat

pattern batcalc.++(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatINCR;
comment Unary increment over the tail of the bat with candidates list

pattern batcalc.++(b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatINCR;
comment Unary increment over the tail of the bat

pattern batcalc.++(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatINCR;
comment Unary increment over the tail of the bat with candidates list

pattern batcalc.++(b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatINCR;
comment Unary increment over the tail of the bat

pattern batcalc.++(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatINCR;
comment Unary increment over the tail of the bat with candidates list

pattern batcalc.++(b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatINCR;
comment Unary increment over the tail of the bat

pattern batcalc.+(v:dbl,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:dbl,b:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:dbl],v:hge,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:dbl],v:hge):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:dbl],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:dbl],b2:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:flt,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:flt,b:bat[:oid,:hge]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:flt],v:hge,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:flt],v:hge):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:hge]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:hge,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:hge,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:hge],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:hge],v:dbl):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:hge],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:hge],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:hge,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:hge,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:hge],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:hge],v:flt):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:hge],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:hge],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:hge,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:hge],v:hge):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:hge,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:hge,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:hge],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:hge],v:lng):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:hge],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:hge],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:hge,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:hge,b:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:hge],v:wrd,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:hge],v:wrd):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:hge],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:hge],b2:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:hge,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:hge,b:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:hge],v:int,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:hge],v:int):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:hge],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:hge],b2:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:hge,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:hge,b:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:hge],v:sht,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:hge],v:sht):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:hge],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:hge],b2:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:hge,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:hge,b:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:hge],v:bte,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:hge],v:bte):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:hge],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:hge],b2:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:lng,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:lng,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:lng],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:lng],v:hge):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:wrd,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:wrd,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:wrd],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:wrd],v:hge):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:wrd],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:wrd],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:int,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:int,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:int],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:int],v:hge):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:sht,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:sht,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:sht],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:sht],v:hge):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:bte,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return V + B with candidates list, signal error on overflow

pattern batcalc.+(v:bte,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return V + B, signal error on overflow

pattern batcalc.+(b:bat[:oid,:bte],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B + V with candidates list, signal error on overflow

pattern batcalc.+(b:bat[:oid,:bte],v:hge):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B + V, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B1 + B2 with candidates list, signal error on overflow

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADDsignal;
comment Return B1 + B2, signal error on overflow

pattern batcalc.+(v:flt,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:flt,b:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:flt],v:hge,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:flt],v:hge):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:flt],b2:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:hge,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:hge,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:hge],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:hge],v:flt):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:hge],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:hge],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:lng,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:lng],v:lng):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:lng,b:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:lng],v:int):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:lng,b:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:lng],v:sht):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:lng,b:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:lng],v:bte):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:int,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:int],v:lng):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:sht,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:sht],v:lng):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.+(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return V + B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(v:bte,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return V + B, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B + V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b:bat[:oid,:bte],v:lng):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B + V, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B1 + B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.+(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatADDenlarge;
comment Return B1 + B2, guarantee no overflow by returning larger type

pattern batcalc.++(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatINCR;
comment Unary increment over the tail of the bat with candidates list

pattern batcalc.++(b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatINCR;
comment Unary increment over the tail of the bat

pattern batcalc.-(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:dbl],v:dbl):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:dbl,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:dbl],v:flt):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:dbl,b:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:dbl],v:lng):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:dbl,b:bat[:oid,:wrd]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:dbl],v:wrd):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:dbl,b:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:dbl],v:int):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:dbl],b2:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:dbl,b:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:dbl],v:sht):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:dbl,b:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:dbl],v:bte):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:flt,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:flt],v:dbl):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:flt,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:flt],v:flt):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:flt,b:bat[:oid,:lng]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:flt],v:lng):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:lng]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:flt,b:bat[:oid,:wrd]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:flt],v:wrd):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:flt,b:bat[:oid,:int]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:flt],v:int):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:int]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:flt,b:bat[:oid,:sht]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:flt],v:sht):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:sht]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:flt,b:bat[:oid,:bte]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:flt],v:bte):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:bte]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:lng,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:lng],v:dbl):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:lng,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:lng],v:flt):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:lng,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:lng],v:lng):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:lng,b:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:lng],v:wrd):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:lng,b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:lng],v:int):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:lng,b:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:lng],v:sht):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:lng,b:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:lng],v:bte):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:wrd,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:wrd],v:dbl):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:wrd,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:wrd],v:flt):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:wrd,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:wrd],v:lng):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:wrd],v:wrd):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:wrd],v:int):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:wrd],b2:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:wrd,b:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:wrd],v:sht):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:wrd,b:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:wrd],v:bte):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:int,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:int],v:dbl):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:int,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:int],v:flt):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:int,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:int],v:lng):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:int,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:int],v:wrd):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:int,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:int],v:int):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:int,b:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:int],v:sht):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:int,b:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:int],v:bte):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:sht,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:sht],v:dbl):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:sht,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:sht],v:flt):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:sht,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:sht],v:lng):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:sht,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:sht],v:wrd):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:sht,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:sht],v:int):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:sht,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:sht],v:sht):bat[:oid,:sht] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:sht,b:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:sht],v:bte):bat[:oid,:sht] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:bte,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:bte],v:dbl):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:bte,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:bte],v:flt):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:bte,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:bte],v:lng):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:bte,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:bte],v:wrd):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:bte,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:bte],v:int):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:bte,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:bte],v:sht):bat[:oid,:sht] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:bte,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:bte],v:bte):bat[:oid,:bte] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:flt,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:flt],v:flt):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:flt,b:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:flt],v:lng):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:flt,b:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:flt],v:int):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:flt,b:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:flt],v:sht):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:flt,b:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:flt],v:bte):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:lng,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:lng],v:flt):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:int,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:int],v:flt):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:int,b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:int],v:int):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:int,b:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:int],v:sht):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:int,b:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:int],v:bte):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:sht,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:sht],v:flt):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:sht,b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:sht],v:int):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:sht,b:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:sht],v:sht):bat[:oid,:int] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:sht,b:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:sht],v:bte):bat[:oid,:int] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:bte,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:bte],v:flt):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:bte,b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:bte],v:int):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:bte,b:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:bte],v:sht):bat[:oid,:int] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:bte,b:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:bte],v:bte):bat[:oid,:sht] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.--(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDECR;
comment Unary decrement over the tail of the bat with candidates list

pattern batcalc.--(b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDECR;
comment Unary decrement over the tail of the bat

pattern batcalc.--(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDECR;
comment Unary decrement over the tail of the bat with candidates list

pattern batcalc.--(b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDECR;
comment Unary decrement over the tail of the bat

pattern batcalc.--(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDECR;
comment Unary decrement over the tail of the bat with candidates list

pattern batcalc.--(b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatDECR;
comment Unary decrement over the tail of the bat

pattern batcalc.--(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDECR;
comment Unary decrement over the tail of the bat with candidates list

pattern batcalc.--(b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatDECR;
comment Unary decrement over the tail of the bat

pattern batcalc.--(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDECR;
comment Unary decrement over the tail of the bat with candidates list

pattern batcalc.--(b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatDECR;
comment Unary decrement over the tail of the bat

pattern batcalc.--(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDECR;
comment Unary decrement over the tail of the bat with candidates list

pattern batcalc.--(b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatDECR;
comment Unary decrement over the tail of the bat

pattern batcalc.--(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDECR;
comment Unary decrement over the tail of the bat with candidates list

pattern batcalc.--(b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatDECR;
comment Unary decrement over the tail of the bat

pattern batcalc.-(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatNEG;
comment Unary neg over the tail of the bat with candidates list

pattern batcalc.-(b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatNEG;
comment Unary neg over the tail of the bat

pattern batcalc.-(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatNEG;
comment Unary neg over the tail of the bat with candidates list

pattern batcalc.-(b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatNEG;
comment Unary neg over the tail of the bat

pattern batcalc.-(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatNEG;
comment Unary neg over the tail of the bat with candidates list

pattern batcalc.-(b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatNEG;
comment Unary neg over the tail of the bat

pattern batcalc.-(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatNEG;
comment Unary neg over the tail of the bat with candidates list

pattern batcalc.-(b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatNEG;
comment Unary neg over the tail of the bat

pattern batcalc.-(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatNEG;
comment Unary neg over the tail of the bat with candidates list

pattern batcalc.-(b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatNEG;
comment Unary neg over the tail of the bat

pattern batcalc.-(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatNEG;
comment Unary neg over the tail of the bat with candidates list

pattern batcalc.-(b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatNEG;
comment Unary neg over the tail of the bat

pattern batcalc.-(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatNEG;
comment Unary neg over the tail of the bat with candidates list

pattern batcalc.-(b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatNEG;
comment Unary neg over the tail of the bat

pattern batcalc.-(v:dbl,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:dbl,b:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:dbl],v:hge,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:dbl],v:hge):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:dbl],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:dbl],b2:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:flt,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:flt,b:bat[:oid,:hge]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:flt],v:hge,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:flt],v:hge):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:hge]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:hge,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:hge,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:hge],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:hge],v:dbl):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:hge],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:hge],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:hge,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:hge,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:hge],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:hge],v:flt):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:hge],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:hge],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:hge,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:hge],v:hge):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:hge,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:hge,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:hge],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:hge],v:lng):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:hge],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:hge],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:hge,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:hge,b:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:hge],v:wrd,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:hge],v:wrd):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:hge],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:hge],b2:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:hge,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:hge,b:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:hge],v:int,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:hge],v:int):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:hge],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:hge],b2:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:hge,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:hge,b:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:hge],v:sht,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:hge],v:sht):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:hge],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:hge],b2:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:hge,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:hge,b:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:hge],v:bte,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:hge],v:bte):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:hge],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:hge],b2:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:lng,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:lng,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:lng],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:lng],v:hge):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:wrd,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:wrd,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:wrd],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:wrd],v:hge):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:wrd],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:wrd],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:int,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:int,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:int],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:int],v:hge):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:sht,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:sht,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:sht],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:sht],v:hge):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:bte,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return V - B with candidates list, signal error on overflow

pattern batcalc.-(v:bte,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return V - B, signal error on overflow

pattern batcalc.-(b:bat[:oid,:bte],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B - V with candidates list, signal error on overflow

pattern batcalc.-(b:bat[:oid,:bte],v:hge):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B - V, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B1 - B2 with candidates list, signal error on overflow

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUBsignal;
comment Return B1 - B2, signal error on overflow

pattern batcalc.-(v:flt,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:flt,b:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:flt],v:hge,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:flt],v:hge):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:flt],b2:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:hge,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:hge,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:hge],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:hge],v:flt):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:hge],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:hge],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:lng,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:lng],v:lng):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:lng,b:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:lng],v:int):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:lng,b:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:lng],v:sht):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:lng,b:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:lng],v:bte):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:int,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:int],v:lng):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:sht,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:sht],v:lng):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.-(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return V - B with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(v:bte,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return V - B, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B - V with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b:bat[:oid,:bte],v:lng):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B - V, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B1 - B2 with candidates list, guarantee no overflow by returning larger type

pattern batcalc.-(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatSUBenlarge;
comment Return B1 - B2, guarantee no overflow by returning larger type

pattern batcalc.--(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDECR;
comment Unary decrement over the tail of the bat with candidates list

pattern batcalc.--(b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatDECR;
comment Unary decrement over the tail of the bat

pattern batcalc.-(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatNEG;
comment Unary neg over the tail of the bat with candidates list

pattern batcalc.-(b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatNEG;
comment Unary neg over the tail of the bat

pattern batcalc./(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:dbl],v:dbl):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:dbl,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:dbl],v:flt):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:dbl,b:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:dbl],v:lng):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:dbl,b:bat[:oid,:wrd]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:dbl],v:wrd):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:dbl,b:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:dbl],v:int):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:dbl],b2:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:dbl,b:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:dbl],v:sht):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:dbl,b:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:dbl],v:bte):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:flt,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:flt],v:dbl):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:flt,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:flt],v:flt):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:flt],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:flt,b:bat[:oid,:lng]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:flt],v:lng):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:flt],b2:bat[:oid,:lng]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:flt,b:bat[:oid,:wrd]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:flt],v:wrd):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:flt,b:bat[:oid,:int]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:flt],v:int):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:flt],b2:bat[:oid,:int]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:flt,b:bat[:oid,:sht]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:flt],v:sht):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:flt],b2:bat[:oid,:sht]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:flt,b:bat[:oid,:bte]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:flt],v:bte):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:flt],b2:bat[:oid,:bte]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:lng,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:lng],v:dbl):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:lng,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:lng],v:flt):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:lng],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:lng,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:lng],v:lng):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:lng,b:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:lng],v:wrd):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:lng,b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:lng],v:int):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:lng,b:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:lng],v:sht):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:lng,b:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:lng],v:bte):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:wrd,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:wrd],v:dbl):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:wrd,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:wrd],v:flt):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:wrd,b:bat[:oid,:lng]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:wrd],v:lng):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:wrd],v:wrd):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:wrd],v:int):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:wrd],b2:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:wrd,b:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:wrd],v:sht):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:wrd,b:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:wrd],v:bte):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:int,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:int],v:dbl):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:int],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:int,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:int],v:flt):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:int],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:int,b:bat[:oid,:lng]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:int],v:lng):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:int,b:bat[:oid,:wrd]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:int],v:wrd):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:int],b2:bat[:oid,:wrd]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:int,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:int],v:int):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:int,b:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:int],v:sht):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:int,b:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:int],v:bte):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:sht,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:sht],v:dbl):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:sht,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:sht],v:flt):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:sht],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:sht,b:bat[:oid,:lng]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:sht],v:lng):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:sht,b:bat[:oid,:wrd]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:sht],v:wrd):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:sht,b:bat[:oid,:int]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:sht],v:int):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:sht,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:sht],v:sht):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:sht,b:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:sht],v:bte):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:bte,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:bte],v:dbl):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:bte,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:bte],v:flt):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:bte],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:bte,b:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:bte],v:lng):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:bte,b:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:bte],v:wrd):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:bte,b:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:bte],v:int):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:bte,b:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:bte],v:sht):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:bte,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:bte],v:bte):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:dbl,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:dbl,b:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:dbl],v:hge,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:dbl],v:hge):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:dbl],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:dbl],b2:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:flt,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:flt,b:bat[:oid,:hge]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:flt],v:hge,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:flt],v:hge):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:flt],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:flt],b2:bat[:oid,:hge]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:hge,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:hge,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:hge],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:hge],v:dbl):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:hge],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:hge],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:hge,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:hge,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:hge],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:hge],v:flt):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:hge],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:hge],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:hge,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:hge],v:hge):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:hge,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:hge,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:hge],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:hge],v:lng):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:hge],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:hge],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:hge,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:hge,b:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:hge],v:wrd,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:hge],v:wrd):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:hge],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:hge],b2:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:hge,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:hge,b:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:hge],v:int,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:hge],v:int):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:hge],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:hge],b2:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:hge,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:hge,b:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:hge],v:sht,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:hge],v:sht):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:hge],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:hge],b2:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:hge,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:hge,b:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:hge],v:bte,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:hge],v:bte):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:hge],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:hge],b2:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:lng,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:lng,b:bat[:oid,:hge]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:lng],v:hge,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:lng],v:hge):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:lng],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:lng],b2:bat[:oid,:hge]):bat[:oid,:lng] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:wrd,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:wrd,b:bat[:oid,:hge]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:wrd],v:hge,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:wrd],v:hge):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:wrd],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:wrd],b2:bat[:oid,:hge]):bat[:oid,:wrd] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:int,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:int,b:bat[:oid,:hge]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:int],v:hge,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:int],v:hge):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:int],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:int],b2:bat[:oid,:hge]):bat[:oid,:int] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:sht,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:sht,b:bat[:oid,:hge]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:sht],v:hge,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:sht],v:hge):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:sht],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:sht],b2:bat[:oid,:hge]):bat[:oid,:sht] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc./(v:bte,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return V / B with candidates list, signal error on overflow

pattern batcalc./(v:bte,b:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return V / B, signal error on overflow

pattern batcalc./(b:bat[:oid,:bte],v:hge,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B / V with candidates list, signal error on overflow

pattern batcalc./(b:bat[:oid,:bte],v:hge):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B / V, signal error on overflow

pattern batcalc./(b1:bat[:oid,:bte],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B1 / B2 with candidates list, signal error on overflow

pattern batcalc./(b1:bat[:oid,:bte],b2:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatDIVsignal;
comment Return B1 / B2, signal error on overflow

pattern batcalc.<=(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:dbl,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:dbl],v:dbl):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:dbl,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:dbl],v:flt):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:dbl,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:dbl],v:lng):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:dbl,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:dbl],v:wrd):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:dbl,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:dbl],v:int):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:dbl],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:dbl,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:dbl],v:sht):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:dbl,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:dbl],v:bte):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:flt,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:flt],v:dbl):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:flt,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:flt],v:flt):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:flt],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:flt,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:flt],v:lng):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:flt],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:flt,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:flt],v:wrd):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:flt,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:flt],v:int):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:flt],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:flt,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:flt],v:sht):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:flt],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:flt,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:flt],v:bte):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:flt],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:lng,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:lng],v:dbl):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:lng,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:lng],v:flt):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:lng],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:lng,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:lng],v:lng):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:lng,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:lng],v:wrd):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:lng,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:lng],v:int):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:lng,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:lng],v:sht):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:lng,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:lng],v:bte):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:wrd,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:wrd],v:dbl):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:wrd,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:wrd],v:flt):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:wrd,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:wrd],v:lng):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:wrd],v:wrd):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:wrd,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:wrd],v:int):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:wrd],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:wrd,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:wrd],v:sht):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:wrd,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:wrd],v:bte):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:int,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:int],v:dbl):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:int],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:int,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:int],v:flt):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:int],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:int,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:int],v:lng):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:int,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:int],v:wrd):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:int],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:int,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:int],v:int):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:int,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:int],v:sht):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:int,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:int],v:bte):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:sht,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:sht],v:dbl):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:sht,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:sht],v:flt):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:sht],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:sht,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:sht],v:lng):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:sht,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:sht],v:wrd):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:sht,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:sht],v:int):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:sht,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:sht],v:sht):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:sht,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:sht],v:bte):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:bte,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:bte],v:dbl):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:bte,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:bte],v:flt):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:bte],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:bte,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:bte],v:lng):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:bte,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:bte],v:wrd):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:bte,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:bte],v:int):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:bte,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:bte],v:sht):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:bte,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:bte],v:bte):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:oid,b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:oid,b:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:oid],v:oid,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:oid],v:oid):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:oid],b2:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:oid],b2:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:str,b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:str,b:bat[:oid,:str]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:str],v:str,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:str],v:str):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:str],b2:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:str],b2:bat[:oid,:str]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:bit,b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:bit,b:bat[:oid,:bit]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:bit],v:bit,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:bit],v:bit):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:bit],b2:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:bit],b2:bat[:oid,:bit]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:dbl,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:dbl],v:dbl):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:dbl,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:dbl],v:flt):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:dbl,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:dbl],v:lng):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:dbl,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:dbl],v:wrd):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:dbl,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:dbl],v:int):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:dbl],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:dbl,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:dbl],v:sht):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:dbl,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:dbl],v:bte):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:flt,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:flt],v:dbl):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:flt,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:flt],v:flt):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:flt],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:flt,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:flt],v:lng):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:flt],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:flt,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:flt],v:wrd):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:flt,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:flt],v:int):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:flt],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:flt,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:flt],v:sht):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:flt],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:flt,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:flt],v:bte):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:flt],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:lng,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:lng],v:dbl):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:lng,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:lng],v:flt):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:lng],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:lng,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:lng],v:lng):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:lng,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:lng],v:wrd):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:lng,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:lng],v:int):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:lng,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:lng],v:sht):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:lng,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:lng],v:bte):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:wrd,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:wrd],v:dbl):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:wrd,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:wrd],v:flt):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:wrd,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:wrd],v:lng):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:wrd],v:wrd):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:wrd,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:wrd],v:int):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:wrd],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:wrd,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:wrd],v:sht):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:wrd,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:wrd],v:bte):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:int,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:int],v:dbl):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:int],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:int,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:int],v:flt):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:int],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:int,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:int],v:lng):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:int,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:int],v:wrd):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:int],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:int,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:int],v:int):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:int,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:int],v:sht):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:int,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:int],v:bte):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:sht,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:sht],v:dbl):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:sht,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:sht],v:flt):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:sht],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:sht,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:sht],v:lng):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:sht,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:sht],v:wrd):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:sht,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:sht],v:int):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:sht,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:sht],v:sht):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:sht,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:sht],v:bte):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:bte,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:bte],v:dbl):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:bte,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:bte],v:flt):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:bte],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:bte,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:bte],v:lng):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:bte,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:bte],v:wrd):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:bte,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:bte],v:int):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:bte,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:bte],v:sht):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:bte,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:bte],v:bte):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:oid,b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:oid,b:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:oid],v:oid,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:oid],v:oid):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:oid],b2:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:oid],b2:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:str,b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:str,b:bat[:oid,:str]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:str],v:str,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:str],v:str):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:str],b2:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:str],b2:bat[:oid,:str]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:bit,b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:bit,b:bat[:oid,:bit]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:bit],v:bit,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:bit],v:bit):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:bit],b2:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:bit],b2:bat[:oid,:bit]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<<(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:lng,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:lng],v:lng):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:lng,b:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:lng],v:wrd):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:lng,b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:lng],v:int):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:lng,b:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:lng],v:sht):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:lng,b:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:lng],v:bte):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:wrd,b:bat[:oid,:lng]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:wrd],v:lng):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:wrd],v:wrd):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:wrd],v:int):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:wrd],b2:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:wrd,b:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:wrd],v:sht):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:wrd,b:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:wrd],v:bte):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:int,b:bat[:oid,:lng]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:int],v:lng):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:int,b:bat[:oid,:wrd]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:int],v:wrd):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:int],b2:bat[:oid,:wrd]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:int,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:int],v:int):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:int,b:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:int],v:sht):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:int,b:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:int],v:bte):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:sht,b:bat[:oid,:lng]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:sht],v:lng):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:sht,b:bat[:oid,:wrd]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:sht],v:wrd):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:sht,b:bat[:oid,:int]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:sht],v:int):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:sht,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:sht],v:sht):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:sht,b:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:sht],v:bte):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:bte,b:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:bte],v:lng):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:bte,b:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:bte],v:wrd):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:bte,b:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:bte],v:int):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:bte,b:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:bte],v:sht):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:bte,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:bte],v:bte):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<=(v:dbl,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:dbl,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:dbl],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:dbl],v:hge):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:dbl],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:dbl],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:flt,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:flt,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:flt],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:flt],v:hge):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:flt],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:flt],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:hge,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:hge,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:hge],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:hge],v:dbl):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:hge],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:hge],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:hge,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:hge,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:hge],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:hge],v:flt):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:hge],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:hge],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:hge,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:hge],v:hge):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:hge,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:hge,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:hge],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:hge],v:lng):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:hge],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:hge],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:hge,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:hge,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:hge],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:hge],v:wrd):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:hge],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:hge],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:hge,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:hge,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:hge],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:hge],v:int):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:hge],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:hge],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:hge,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:hge,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:hge],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:hge],v:sht):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:hge],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:hge],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:hge,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:hge,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:hge],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:hge],v:bte):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:hge],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:hge],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:lng,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:lng,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:lng],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:lng],v:hge):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:lng],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:lng],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:wrd,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:wrd,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:wrd],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:wrd],v:hge):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:wrd],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:wrd],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:int,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:int,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:int],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:int],v:hge):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:int],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:int],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:sht,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:sht,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:sht],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:sht],v:hge):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:sht],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:sht],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:bte,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:bte,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:bte],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:bte],v:hge):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:bte],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:bte],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<(v:dbl,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:dbl,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:dbl],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:dbl],v:hge):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:dbl],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:dbl],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:flt,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:flt,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:flt],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:flt],v:hge):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:flt],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:flt],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:hge,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:hge,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:hge],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:hge],v:dbl):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:hge],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:hge],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:hge,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:hge,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:hge],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:hge],v:flt):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:hge],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:hge],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:hge,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:hge],v:hge):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:hge,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:hge,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:hge],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:hge],v:lng):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:hge],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:hge],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:hge,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:hge,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:hge],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:hge],v:wrd):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:hge],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:hge],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:hge,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:hge,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:hge],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:hge],v:int):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:hge],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:hge],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:hge,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:hge,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:hge],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:hge],v:sht):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:hge],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:hge],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:hge,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:hge,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:hge],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:hge],v:bte):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:hge],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:hge],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:lng,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:lng,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:lng],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:lng],v:hge):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:lng],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:lng],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:wrd,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:wrd,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:wrd],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:wrd],v:hge):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:wrd],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:wrd],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:int,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:int,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:int],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:int],v:hge):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:int],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:int],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:sht,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:sht,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:sht],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:sht],v:hge):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:sht],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:sht],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:bte,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:bte,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:bte],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:bte],v:hge):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:bte],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:bte],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<<(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:hge,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:hge],v:hge):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:hge,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:hge,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:hge],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:hge],v:lng):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:hge],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:hge],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:hge,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:hge,b:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:hge],v:wrd,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:hge],v:wrd):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:hge],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:hge],b2:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:hge,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:hge,b:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:hge],v:int,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:hge],v:int):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:hge],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:hge],b2:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:hge,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:hge,b:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:hge],v:sht,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:hge],v:sht):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:hge],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:hge],b2:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:hge,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:hge,b:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:hge],v:bte,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:hge],v:bte):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:hge],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:hge],b2:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:lng,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:lng,b:bat[:oid,:hge]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:lng],v:hge,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:lng],v:hge):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:lng],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:lng],b2:bat[:oid,:hge]):bat[:oid,:lng] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:wrd,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:wrd,b:bat[:oid,:hge]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:wrd],v:hge,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:wrd],v:hge):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:wrd],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:wrd],b2:bat[:oid,:hge]):bat[:oid,:wrd] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:int,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:int,b:bat[:oid,:hge]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:int],v:hge,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:int],v:hge):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:int],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:int],b2:bat[:oid,:hge]):bat[:oid,:int] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:sht,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:sht,b:bat[:oid,:hge]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:sht],v:hge,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:sht],v:hge):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:sht],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:sht],b2:bat[:oid,:hge]):bat[:oid,:sht] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<<(v:bte,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return V << B with candidates list, raise error on out of range second operand

pattern batcalc.<<(v:bte,b:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return V << B, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:bte],v:hge,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B << V with candidates list, raise error on out of range second operand

pattern batcalc.<<(b:bat[:oid,:bte],v:hge):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B << V, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:bte],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B1 << B2 with candidates list, raise error on out of range second operand

pattern batcalc.<<(b1:bat[:oid,:bte],b2:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatLSHsignal;
comment Return B1 << B2, raise error on out of range second operand

pattern batcalc.<=(v:timestamp,b:bat[:oid,:timestamp],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:timestamp,b:bat[:oid,:timestamp]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:timestamp],v:timestamp,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:timestamp],v:timestamp):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:timestamp],b2:bat[:oid,:timestamp],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:timestamp],b2:bat[:oid,:timestamp]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:daytime,b:bat[:oid,:daytime],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:daytime,b:bat[:oid,:daytime]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:daytime],v:daytime,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:daytime],v:daytime):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:daytime],b2:bat[:oid,:daytime],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:daytime],b2:bat[:oid,:daytime]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<=(v:date,b:bat[:oid,:date],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B with candidates list

pattern batcalc.<=(v:date,b:bat[:oid,:date]):bat[:oid,:bit] 
address CMDbatLE;
comment Return V <= B

pattern batcalc.<=(b:bat[:oid,:date],v:date,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V with candidates list

pattern batcalc.<=(b:bat[:oid,:date],v:date):bat[:oid,:bit] 
address CMDbatLE;
comment Return B <= V

pattern batcalc.<=(b1:bat[:oid,:date],b2:bat[:oid,:date],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2 with candidates list

pattern batcalc.<=(b1:bat[:oid,:date],b2:bat[:oid,:date]):bat[:oid,:bit] 
address CMDbatLE;
comment Return B1 <= B2

pattern batcalc.<(v:timestamp,b:bat[:oid,:timestamp],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:timestamp,b:bat[:oid,:timestamp]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:timestamp],v:timestamp,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:timestamp],v:timestamp):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:timestamp],b2:bat[:oid,:timestamp],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:timestamp],b2:bat[:oid,:timestamp]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:daytime,b:bat[:oid,:daytime],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:daytime,b:bat[:oid,:daytime]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:daytime],v:daytime,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:daytime],v:daytime):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:daytime],b2:bat[:oid,:daytime],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:daytime],b2:bat[:oid,:daytime]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.<(v:date,b:bat[:oid,:date],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B with candidates list

pattern batcalc.<(v:date,b:bat[:oid,:date]):bat[:oid,:bit] 
address CMDbatLT;
comment Return V < B

pattern batcalc.<(b:bat[:oid,:date],v:date,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V with candidates list

pattern batcalc.<(b:bat[:oid,:date],v:date):bat[:oid,:bit] 
address CMDbatLT;
comment Return B < V

pattern batcalc.<(b1:bat[:oid,:date],b2:bat[:oid,:date],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2 with candidates list

pattern batcalc.<(b1:bat[:oid,:date],b2:bat[:oid,:date]):bat[:oid,:bit] 
address CMDbatLT;
comment Return B1 < B2

pattern batcalc.==(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:dbl,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:dbl],v:dbl):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:dbl,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:dbl],v:flt):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:dbl,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:dbl],v:lng):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:dbl,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:dbl],v:wrd):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:dbl,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:dbl],v:int):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:dbl],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:dbl,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:dbl],v:sht):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:dbl,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:dbl],v:bte):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:flt,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:flt],v:dbl):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:flt,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:flt],v:flt):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:flt],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:flt,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:flt],v:lng):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:flt],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:flt,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:flt],v:wrd):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:flt,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:flt],v:int):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:flt],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:flt,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:flt],v:sht):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:flt],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:flt,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:flt],v:bte):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:flt],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:lng,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:lng],v:dbl):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:lng,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:lng],v:flt):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:lng],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:lng,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:lng],v:lng):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:lng,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:lng],v:wrd):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:lng,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:lng],v:int):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:lng,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:lng],v:sht):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:lng,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:lng],v:bte):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:wrd,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:wrd],v:dbl):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:wrd,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:wrd],v:flt):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:wrd,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:wrd],v:lng):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:wrd],v:wrd):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:wrd,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:wrd],v:int):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:wrd],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:wrd,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:wrd],v:sht):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:wrd,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:wrd],v:bte):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:int,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:int],v:dbl):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:int],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:int,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:int],v:flt):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:int],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:int,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:int],v:lng):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:int,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:int],v:wrd):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:int],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:int,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:int],v:int):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:int,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:int],v:sht):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:int,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:int],v:bte):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:sht,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:sht],v:dbl):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:sht,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:sht],v:flt):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:sht],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:sht,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:sht],v:lng):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:sht,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:sht],v:wrd):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:sht,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:sht],v:int):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:sht,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:sht],v:sht):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:sht,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:sht],v:bte):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:bte,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:bte],v:dbl):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:bte,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:bte],v:flt):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:bte],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:bte,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:bte],v:lng):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:bte,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:bte],v:wrd):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:bte,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:bte],v:int):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:bte,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:bte],v:sht):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:bte,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:bte],v:bte):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:oid,b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:oid,b:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:oid],v:oid,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:oid],v:oid):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:oid],b2:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:oid],b2:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:str,b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:str,b:bat[:oid,:str]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:str],v:str,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:str],v:str):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:str],b2:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:str],b2:bat[:oid,:str]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:bit,b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:bit,b:bat[:oid,:bit]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:bit],v:bit,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:bit],v:bit):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:bit],b2:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:bit],b2:bat[:oid,:bit]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:dbl,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:dbl,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:dbl],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:dbl],v:hge):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:dbl],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:dbl],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:flt,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:flt,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:flt],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:flt],v:hge):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:flt],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:flt],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:hge,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:hge,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:hge],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:hge],v:dbl):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:hge],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:hge],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:hge,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:hge,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:hge],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:hge],v:flt):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:hge],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:hge],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:hge,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:hge],v:hge):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:hge,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:hge,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:hge],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:hge],v:lng):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:hge],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:hge],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:hge,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:hge,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:hge],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:hge],v:wrd):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:hge],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:hge],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:hge,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:hge,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:hge],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:hge],v:int):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:hge],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:hge],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:hge,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:hge,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:hge],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:hge],v:sht):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:hge],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:hge],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:hge,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:hge,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:hge],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:hge],v:bte):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:hge],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:hge],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:lng,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:lng,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:lng],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:lng],v:hge):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:lng],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:lng],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:wrd,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:wrd,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:wrd],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:wrd],v:hge):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:wrd],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:wrd],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:int,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:int,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:int],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:int],v:hge):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:int],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:int],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:sht,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:sht,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:sht],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:sht],v:hge):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:sht],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:sht],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:bte,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:bte,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:bte],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:bte],v:hge):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:bte],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:bte],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:timestamp,b:bat[:oid,:timestamp],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:timestamp,b:bat[:oid,:timestamp]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:timestamp],v:timestamp,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:timestamp],v:timestamp):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:timestamp],b2:bat[:oid,:timestamp],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:timestamp],b2:bat[:oid,:timestamp]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:daytime,b:bat[:oid,:daytime],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:daytime,b:bat[:oid,:daytime]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:daytime],v:daytime,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:daytime],v:daytime):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:daytime],b2:bat[:oid,:daytime],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:daytime],b2:bat[:oid,:daytime]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.==(v:date,b:bat[:oid,:date],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B with candidates list

pattern batcalc.==(v:date,b:bat[:oid,:date]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return V == B

pattern batcalc.==(b:bat[:oid,:date],v:date,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V with candidates list

pattern batcalc.==(b:bat[:oid,:date],v:date):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B == V

pattern batcalc.==(b1:bat[:oid,:date],b2:bat[:oid,:date],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2 with candidates list

pattern batcalc.==(b1:bat[:oid,:date],b2:bat[:oid,:date]):bat[:oid,:bit] 
address CMDbatEQ;
comment Return B1 == B2

pattern batcalc.>=(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:dbl,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:dbl],v:dbl):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:dbl,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:dbl],v:flt):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:dbl,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:dbl],v:lng):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:dbl,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:dbl],v:wrd):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:dbl,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:dbl],v:int):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:dbl],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:dbl,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:dbl],v:sht):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:dbl,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:dbl],v:bte):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:flt,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:flt],v:dbl):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:flt,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:flt],v:flt):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:flt],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:flt,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:flt],v:lng):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:flt],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:flt,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:flt],v:wrd):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:flt,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:flt],v:int):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:flt],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:flt,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:flt],v:sht):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:flt],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:flt,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:flt],v:bte):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:flt],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:lng,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:lng],v:dbl):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:lng,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:lng],v:flt):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:lng],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:lng,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:lng],v:lng):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:lng,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:lng],v:wrd):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:lng,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:lng],v:int):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:lng,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:lng],v:sht):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:lng,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:lng],v:bte):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:wrd,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:wrd],v:dbl):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:wrd,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:wrd],v:flt):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:wrd,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:wrd],v:lng):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:wrd],v:wrd):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:wrd,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:wrd],v:int):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:wrd],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:wrd,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:wrd],v:sht):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:wrd,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:wrd],v:bte):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:int,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:int],v:dbl):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:int],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:int,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:int],v:flt):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:int],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:int,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:int],v:lng):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:int,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:int],v:wrd):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:int],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:int,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:int],v:int):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:int,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:int],v:sht):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:int,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:int],v:bte):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:sht,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:sht],v:dbl):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:sht,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:sht],v:flt):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:sht],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:sht,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:sht],v:lng):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:sht,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:sht],v:wrd):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:sht,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:sht],v:int):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:sht,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:sht],v:sht):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:sht,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:sht],v:bte):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:bte,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:bte],v:dbl):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:bte,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:bte],v:flt):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:bte],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:bte,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:bte],v:lng):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:bte,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:bte],v:wrd):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:bte,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:bte],v:int):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:bte,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:bte],v:sht):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:bte,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:bte],v:bte):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:oid,b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:oid,b:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:oid],v:oid,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:oid],v:oid):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:oid],b2:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:oid],b2:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:str,b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:str,b:bat[:oid,:str]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:str],v:str,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:str],v:str):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:str],b2:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:str],b2:bat[:oid,:str]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:bit,b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:bit,b:bat[:oid,:bit]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:bit],v:bit,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:bit],v:bit):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:bit],b2:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:bit],b2:bat[:oid,:bit]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:dbl,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:dbl],v:dbl):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:dbl,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:dbl],v:flt):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:dbl,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:dbl],v:lng):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:dbl,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:dbl],v:wrd):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:dbl,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:dbl],v:int):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:dbl],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:dbl,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:dbl],v:sht):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:dbl,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:dbl],v:bte):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:flt,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:flt],v:dbl):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:flt,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:flt],v:flt):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:flt],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:flt,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:flt],v:lng):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:flt],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:flt,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:flt],v:wrd):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:flt,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:flt],v:int):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:flt],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:flt,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:flt],v:sht):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:flt],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:flt,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:flt],v:bte):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:flt],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:lng,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:lng],v:dbl):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:lng,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:lng],v:flt):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:lng],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:lng,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:lng],v:lng):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:lng,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:lng],v:wrd):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:lng,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:lng],v:int):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:lng,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:lng],v:sht):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:lng,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:lng],v:bte):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:wrd,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:wrd],v:dbl):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:wrd,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:wrd],v:flt):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:wrd,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:wrd],v:lng):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:wrd],v:wrd):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:wrd,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:wrd],v:int):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:wrd],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:wrd,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:wrd],v:sht):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:wrd,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:wrd],v:bte):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:int,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:int],v:dbl):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:int],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:int,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:int],v:flt):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:int],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:int,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:int],v:lng):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:int,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:int],v:wrd):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:int],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:int,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:int],v:int):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:int,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:int],v:sht):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:int,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:int],v:bte):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:sht,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:sht],v:dbl):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:sht,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:sht],v:flt):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:sht],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:sht,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:sht],v:lng):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:sht,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:sht],v:wrd):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:sht,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:sht],v:int):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:sht,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:sht],v:sht):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:sht,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:sht],v:bte):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:bte,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:bte],v:dbl):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:bte,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:bte],v:flt):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:bte],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:bte,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:bte],v:lng):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:bte,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:bte],v:wrd):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:bte,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:bte],v:int):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:bte,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:bte],v:sht):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:bte,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:bte],v:bte):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:oid,b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:oid,b:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:oid],v:oid,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:oid],v:oid):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:oid],b2:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:oid],b2:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:str,b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:str,b:bat[:oid,:str]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:str],v:str,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:str],v:str):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:str],b2:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:str],b2:bat[:oid,:str]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:bit,b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:bit,b:bat[:oid,:bit]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:bit],v:bit,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:bit],v:bit):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:bit],b2:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:bit],b2:bat[:oid,:bit]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>>(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:lng,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:lng],v:lng):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:lng,b:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:lng],v:wrd):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:lng,b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:lng],v:int):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:lng,b:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:lng],v:sht):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:lng,b:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:lng],v:bte):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:wrd,b:bat[:oid,:lng]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:wrd],v:lng):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:wrd],v:wrd):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:wrd],v:int):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:wrd],b2:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:wrd,b:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:wrd],v:sht):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:wrd,b:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:wrd],v:bte):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:int,b:bat[:oid,:lng]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:int],v:lng):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:int,b:bat[:oid,:wrd]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:int],v:wrd):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:int],b2:bat[:oid,:wrd]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:int,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:int],v:int):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:int,b:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:int],v:sht):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:int,b:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:int],v:bte):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:sht,b:bat[:oid,:lng]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:sht],v:lng):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:sht,b:bat[:oid,:wrd]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:sht],v:wrd):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:sht,b:bat[:oid,:int]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:sht],v:int):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:sht,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:sht],v:sht):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:sht,b:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:sht],v:bte):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:bte,b:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:bte],v:lng):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:bte,b:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:bte],v:wrd):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:bte,b:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:bte],v:int):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:bte,b:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:bte],v:sht):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:bte,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:bte],v:bte):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>=(v:dbl,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:dbl,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:dbl],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:dbl],v:hge):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:dbl],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:dbl],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:flt,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:flt,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:flt],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:flt],v:hge):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:flt],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:flt],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:hge,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:hge,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:hge],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:hge],v:dbl):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:hge],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:hge],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:hge,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:hge,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:hge],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:hge],v:flt):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:hge],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:hge],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:hge,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:hge],v:hge):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:hge,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:hge,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:hge],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:hge],v:lng):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:hge],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:hge],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:hge,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:hge,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:hge],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:hge],v:wrd):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:hge],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:hge],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:hge,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:hge,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:hge],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:hge],v:int):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:hge],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:hge],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:hge,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:hge,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:hge],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:hge],v:sht):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:hge],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:hge],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:hge,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:hge,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:hge],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:hge],v:bte):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:hge],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:hge],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:lng,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:lng,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:lng],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:lng],v:hge):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:lng],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:lng],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:wrd,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:wrd,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:wrd],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:wrd],v:hge):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:wrd],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:wrd],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:int,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:int,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:int],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:int],v:hge):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:int],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:int],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:sht,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:sht,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:sht],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:sht],v:hge):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:sht],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:sht],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:bte,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:bte,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:bte],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:bte],v:hge):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:bte],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:bte],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>(v:dbl,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:dbl,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:dbl],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:dbl],v:hge):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:dbl],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:dbl],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:flt,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:flt,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:flt],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:flt],v:hge):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:flt],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:flt],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:hge,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:hge,b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:hge],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:hge],v:dbl):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:hge],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:hge],b2:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:hge,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:hge,b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:hge],v:flt,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:hge],v:flt):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:hge],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:hge],b2:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:hge,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:hge],v:hge):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:hge,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:hge,b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:hge],v:lng,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:hge],v:lng):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:hge],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:hge],b2:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:hge,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:hge,b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:hge],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:hge],v:wrd):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:hge],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:hge],b2:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:hge,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:hge,b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:hge],v:int,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:hge],v:int):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:hge],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:hge],b2:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:hge,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:hge,b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:hge],v:sht,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:hge],v:sht):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:hge],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:hge],b2:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:hge,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:hge,b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:hge],v:bte,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:hge],v:bte):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:hge],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:hge],b2:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:lng,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:lng,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:lng],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:lng],v:hge):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:lng],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:lng],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:wrd,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:wrd,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:wrd],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:wrd],v:hge):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:wrd],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:wrd],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:int,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:int,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:int],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:int],v:hge):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:int],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:int],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:sht,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:sht,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:sht],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:sht],v:hge):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:sht],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:sht],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:bte,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:bte,b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:bte],v:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:bte],v:hge):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:bte],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:bte],b2:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>>(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:hge,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:hge],v:hge):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:hge,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:hge,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:hge],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:hge],v:lng):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:hge],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:hge],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:hge,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:hge,b:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:hge],v:wrd,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:hge],v:wrd):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:hge],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:hge],b2:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:hge,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:hge,b:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:hge],v:int,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:hge],v:int):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:hge],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:hge],b2:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:hge,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:hge,b:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:hge],v:sht,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:hge],v:sht):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:hge],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:hge],b2:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:hge,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:hge,b:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:hge],v:bte,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:hge],v:bte):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:hge],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:hge],b2:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:lng,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:lng,b:bat[:oid,:hge]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:lng],v:hge,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:lng],v:hge):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:lng],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:lng],b2:bat[:oid,:hge]):bat[:oid,:lng] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:wrd,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:wrd,b:bat[:oid,:hge]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:wrd],v:hge,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:wrd],v:hge):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:wrd],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:wrd],b2:bat[:oid,:hge]):bat[:oid,:wrd] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:int,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:int,b:bat[:oid,:hge]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:int],v:hge,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:int],v:hge):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:int],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:int],b2:bat[:oid,:hge]):bat[:oid,:int] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:sht,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:sht,b:bat[:oid,:hge]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:sht],v:hge,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:sht],v:hge):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:sht],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:sht],b2:bat[:oid,:hge]):bat[:oid,:sht] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>>(v:bte,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return V >> B with candidates list, raise error on out of range second operand

pattern batcalc.>>(v:bte,b:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return V >> B, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:bte],v:hge,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B >> V with candidates list, raise error on out of range second operand

pattern batcalc.>>(b:bat[:oid,:bte],v:hge):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B >> V, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:bte],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B1 >> B2 with candidates list, raise error on out of range second operand

pattern batcalc.>>(b1:bat[:oid,:bte],b2:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatRSHsignal;
comment Return B1 >> B2, raise error on out of range second operand

pattern batcalc.>=(v:timestamp,b:bat[:oid,:timestamp],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:timestamp,b:bat[:oid,:timestamp]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:timestamp],v:timestamp,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:timestamp],v:timestamp):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:timestamp],b2:bat[:oid,:timestamp],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:timestamp],b2:bat[:oid,:timestamp]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:daytime,b:bat[:oid,:daytime],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:daytime,b:bat[:oid,:daytime]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:daytime],v:daytime,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:daytime],v:daytime):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:daytime],b2:bat[:oid,:daytime],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:daytime],b2:bat[:oid,:daytime]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>=(v:date,b:bat[:oid,:date],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B with candidates list

pattern batcalc.>=(v:date,b:bat[:oid,:date]):bat[:oid,:bit] 
address CMDbatGE;
comment Return V >= B

pattern batcalc.>=(b:bat[:oid,:date],v:date,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V with candidates list

pattern batcalc.>=(b:bat[:oid,:date],v:date):bat[:oid,:bit] 
address CMDbatGE;
comment Return B >= V

pattern batcalc.>=(b1:bat[:oid,:date],b2:bat[:oid,:date],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2 with candidates list

pattern batcalc.>=(b1:bat[:oid,:date],b2:bat[:oid,:date]):bat[:oid,:bit] 
address CMDbatGE;
comment Return B1 >= B2

pattern batcalc.>(v:timestamp,b:bat[:oid,:timestamp],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:timestamp,b:bat[:oid,:timestamp]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:timestamp],v:timestamp,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:timestamp],v:timestamp):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:timestamp],b2:bat[:oid,:timestamp],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:timestamp],b2:bat[:oid,:timestamp]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:daytime,b:bat[:oid,:daytime],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:daytime,b:bat[:oid,:daytime]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:daytime],v:daytime,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:daytime],v:daytime):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:daytime],b2:bat[:oid,:daytime],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:daytime],b2:bat[:oid,:daytime]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.>(v:date,b:bat[:oid,:date],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B with candidates list

pattern batcalc.>(v:date,b:bat[:oid,:date]):bat[:oid,:bit] 
address CMDbatGT;
comment Return V > B

pattern batcalc.>(b:bat[:oid,:date],v:date,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V with candidates list

pattern batcalc.>(b:bat[:oid,:date],v:date):bat[:oid,:bit] 
address CMDbatGT;
comment Return B > V

pattern batcalc.>(b1:bat[:oid,:date],b2:bat[:oid,:date],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2 with candidates list

pattern batcalc.>(b1:bat[:oid,:date],b2:bat[:oid,:date]):bat[:oid,:bit] 
address CMDbatGT;
comment Return B1 > B2

pattern batcalc.avg(b:bat[:oid,:dbl],s:bat[:oid,:oid]) (X_3:dbl,X_4:lng) 
address CMDcalcavg;
comment average and number of non-nil values of B with candidates list

pattern batcalc.avg(b:bat[:oid,:dbl]) (X_2:dbl,X_3:lng) 
address CMDcalcavg;
comment average and number of non-nil values of B

pattern batcalc.avg(b:bat[:oid,:dbl],s:bat[:oid,:oid]):dbl 
address CMDcalcavg;
comment average of non-nil values of B

pattern batcalc.avg(b:bat[:oid,:dbl]):dbl 
address CMDcalcavg;
comment average of non-nil values of B with candidates list

pattern batcalc.avg(b:bat[:oid,:flt],s:bat[:oid,:oid]) (X_3:dbl,X_4:lng) 
address CMDcalcavg;
comment average and number of non-nil values of B with candidates list

pattern batcalc.avg(b:bat[:oid,:flt]) (X_2:dbl,X_3:lng) 
address CMDcalcavg;
comment average and number of non-nil values of B

pattern batcalc.avg(b:bat[:oid,:flt],s:bat[:oid,:oid]):dbl 
address CMDcalcavg;
comment average of non-nil values of B

pattern batcalc.avg(b:bat[:oid,:flt]):dbl 
address CMDcalcavg;
comment average of non-nil values of B with candidates list

pattern batcalc.avg(b:bat[:oid,:lng],s:bat[:oid,:oid]) (X_3:dbl,X_4:lng) 
address CMDcalcavg;
comment average and number of non-nil values of B with candidates list

pattern batcalc.avg(b:bat[:oid,:lng]) (X_2:dbl,X_3:lng) 
address CMDcalcavg;
comment average and number of non-nil values of B

pattern batcalc.avg(b:bat[:oid,:lng],s:bat[:oid,:oid]):dbl 
address CMDcalcavg;
comment average of non-nil values of B

pattern batcalc.avg(b:bat[:oid,:lng]):dbl 
address CMDcalcavg;
comment average of non-nil values of B with candidates list

pattern batcalc.avg(b:bat[:oid,:wrd],s:bat[:oid,:oid]) (X_3:dbl,X_4:lng) 
address CMDcalcavg;
comment average and number of non-nil values of B with candidates list

pattern batcalc.avg(b:bat[:oid,:wrd]) (X_2:dbl,X_3:lng) 
address CMDcalcavg;
comment average and number of non-nil values of B

pattern batcalc.avg(b:bat[:oid,:wrd],s:bat[:oid,:oid]):dbl 
address CMDcalcavg;
comment average of non-nil values of B

pattern batcalc.avg(b:bat[:oid,:wrd]):dbl 
address CMDcalcavg;
comment average of non-nil values of B with candidates list

pattern batcalc.avg(b:bat[:oid,:int],s:bat[:oid,:oid]) (X_3:dbl,X_4:lng) 
address CMDcalcavg;
comment average and number of non-nil values of B with candidates list

pattern batcalc.avg(b:bat[:oid,:int]) (X_2:dbl,X_3:lng) 
address CMDcalcavg;
comment average and number of non-nil values of B

pattern batcalc.avg(b:bat[:oid,:int],s:bat[:oid,:oid]):dbl 
address CMDcalcavg;
comment average of non-nil values of B

pattern batcalc.avg(b:bat[:oid,:int]):dbl 
address CMDcalcavg;
comment average of non-nil values of B with candidates list

pattern batcalc.avg(b:bat[:oid,:sht],s:bat[:oid,:oid]) (X_3:dbl,X_4:lng) 
address CMDcalcavg;
comment average and number of non-nil values of B with candidates list

pattern batcalc.avg(b:bat[:oid,:sht]) (X_2:dbl,X_3:lng) 
address CMDcalcavg;
comment average and number of non-nil values of B

pattern batcalc.avg(b:bat[:oid,:sht],s:bat[:oid,:oid]):dbl 
address CMDcalcavg;
comment average of non-nil values of B

pattern batcalc.avg(b:bat[:oid,:sht]):dbl 
address CMDcalcavg;
comment average of non-nil values of B with candidates list

pattern batcalc.avg(b:bat[:oid,:bte],s:bat[:oid,:oid]) (X_3:dbl,X_4:lng) 
address CMDcalcavg;
comment average and number of non-nil values of B with candidates list

pattern batcalc.avg(b:bat[:oid,:bte]) (X_2:dbl,X_3:lng) 
address CMDcalcavg;
comment average and number of non-nil values of B

pattern batcalc.avg(b:bat[:oid,:bte],s:bat[:oid,:oid]):dbl 
address CMDcalcavg;
comment average of non-nil values of B

pattern batcalc.avg(b:bat[:oid,:bte]):dbl 
address CMDcalcavg;
comment average of non-nil values of B with candidates list

pattern batcalc.and(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatAND;
comment Return V AND B with candidates list

pattern batcalc.and(v:lng,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatAND;
comment Return V AND B

pattern batcalc.and(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatAND;
comment Return B AND V with candidates list

pattern batcalc.and(b:bat[:oid,:lng],v:lng):bat[:oid,:lng] 
address CMDbatAND;
comment Return B AND V

pattern batcalc.and(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatAND;
comment Return B1 AND B2 with candidates list

pattern batcalc.and(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatAND;
comment Return B1 AND B2

pattern batcalc.and(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatAND;
comment Return V AND B with candidates list

pattern batcalc.and(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatAND;
comment Return V AND B

pattern batcalc.and(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatAND;
comment Return B AND V with candidates list

pattern batcalc.and(b:bat[:oid,:wrd],v:wrd):bat[:oid,:wrd] 
address CMDbatAND;
comment Return B AND V

pattern batcalc.and(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatAND;
comment Return B1 AND B2 with candidates list

pattern batcalc.and(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatAND;
comment Return B1 AND B2

pattern batcalc.and(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatAND;
comment Return V AND B with candidates list

pattern batcalc.and(v:int,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatAND;
comment Return V AND B

pattern batcalc.and(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatAND;
comment Return B AND V with candidates list

pattern batcalc.and(b:bat[:oid,:int],v:int):bat[:oid,:int] 
address CMDbatAND;
comment Return B AND V

pattern batcalc.and(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatAND;
comment Return B1 AND B2 with candidates list

pattern batcalc.and(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatAND;
comment Return B1 AND B2

pattern batcalc.and(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatAND;
comment Return V AND B with candidates list

pattern batcalc.and(v:sht,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatAND;
comment Return V AND B

pattern batcalc.and(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatAND;
comment Return B AND V with candidates list

pattern batcalc.and(b:bat[:oid,:sht],v:sht):bat[:oid,:sht] 
address CMDbatAND;
comment Return B AND V

pattern batcalc.and(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatAND;
comment Return B1 AND B2 with candidates list

pattern batcalc.and(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatAND;
comment Return B1 AND B2

pattern batcalc.and(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatAND;
comment Return V AND B with candidates list

pattern batcalc.and(v:bte,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatAND;
comment Return V AND B

pattern batcalc.and(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatAND;
comment Return B AND V with candidates list

pattern batcalc.and(b:bat[:oid,:bte],v:bte):bat[:oid,:bte] 
address CMDbatAND;
comment Return B AND V

pattern batcalc.and(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatAND;
comment Return B1 AND B2 with candidates list

pattern batcalc.and(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatAND;
comment Return B1 AND B2

pattern batcalc.and(v:bit,b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatAND;
comment Return V AND B with candidates list

pattern batcalc.and(v:bit,b:bat[:oid,:bit]):bat[:oid,:bit] 
address CMDbatAND;
comment Return V AND B

pattern batcalc.and(b:bat[:oid,:bit],v:bit,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatAND;
comment Return B AND V with candidates list

pattern batcalc.and(b:bat[:oid,:bit],v:bit):bat[:oid,:bit] 
address CMDbatAND;
comment Return B AND V

pattern batcalc.and(b1:bat[:oid,:bit],b2:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatAND;
comment Return B1 AND B2 with candidates list

pattern batcalc.and(b1:bat[:oid,:bit],b2:bat[:oid,:bit]):bat[:oid,:bit] 
address CMDbatAND;
comment Return B1 AND B2

pattern batcalc.add_noerror(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:dbl],v:dbl):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:dbl,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:dbl],v:flt):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:dbl,b:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:dbl],v:lng):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:dbl,b:bat[:oid,:wrd]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:dbl],v:wrd):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:dbl,b:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:dbl],v:int):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:dbl,b:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:dbl],v:sht):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:dbl,b:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:dbl],v:bte):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:flt,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:flt],v:dbl):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:flt,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:flt],v:flt):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:flt,b:bat[:oid,:lng]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:flt],v:lng):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:lng]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:flt,b:bat[:oid,:wrd]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:flt],v:wrd):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:flt,b:bat[:oid,:int]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:flt],v:int):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:int]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:flt,b:bat[:oid,:sht]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:flt],v:sht):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:sht]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:flt,b:bat[:oid,:bte]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:flt],v:bte):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:bte]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:lng,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:lng],v:dbl):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:lng,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:lng],v:flt):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:lng,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:lng],v:lng):bat[:oid,:lng] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:lng,b:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:lng],v:wrd):bat[:oid,:lng] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:lng,b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:lng],v:int):bat[:oid,:lng] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:lng,b:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:lng],v:sht):bat[:oid,:lng] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:lng,b:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:lng],v:bte):bat[:oid,:lng] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:wrd,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:wrd],v:dbl):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:wrd,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:wrd],v:flt):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:wrd,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:wrd],v:lng):bat[:oid,:lng] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:wrd],v:wrd):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:wrd],v:int):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:wrd,b:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:wrd],v:sht):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:wrd,b:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:wrd],v:bte):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:int,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:int],v:dbl):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:int,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:int],v:flt):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:int,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:int],v:lng):bat[:oid,:lng] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:int,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:int],v:wrd):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:int,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:int],v:int):bat[:oid,:int] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:int,b:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:int],v:sht):bat[:oid,:int] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:int,b:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:int],v:bte):bat[:oid,:int] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:sht,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:sht],v:dbl):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:sht,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:sht],v:flt):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:sht,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:sht],v:lng):bat[:oid,:lng] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:sht,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:sht],v:wrd):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:sht,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:sht],v:int):bat[:oid,:int] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:sht,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:sht],v:sht):bat[:oid,:sht] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:sht,b:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:sht],v:bte):bat[:oid,:sht] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:bte,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:bte],v:dbl):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:bte,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:bte],v:flt):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:bte,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:bte],v:lng):bat[:oid,:lng] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:bte,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:bte],v:wrd):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:bte,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:bte],v:int):bat[:oid,:int] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:bte,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:bte],v:sht):bat[:oid,:sht] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:bte,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:bte],v:bte):bat[:oid,:bte] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.abs(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatABS;
comment Unary abs over the tail of the bat with candidates list

pattern batcalc.abs(b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatABS;
comment Unary abs over the tail of the bat

pattern batcalc.abs(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatABS;
comment Unary abs over the tail of the bat with candidates list

pattern batcalc.abs(b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatABS;
comment Unary abs over the tail of the bat

pattern batcalc.abs(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatABS;
comment Unary abs over the tail of the bat with candidates list

pattern batcalc.abs(b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatABS;
comment Unary abs over the tail of the bat

pattern batcalc.abs(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatABS;
comment Unary abs over the tail of the bat with candidates list

pattern batcalc.abs(b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatABS;
comment Unary abs over the tail of the bat

pattern batcalc.abs(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatABS;
comment Unary abs over the tail of the bat with candidates list

pattern batcalc.abs(b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatABS;
comment Unary abs over the tail of the bat

pattern batcalc.abs(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatABS;
comment Unary abs over the tail of the bat with candidates list

pattern batcalc.abs(b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatABS;
comment Unary abs over the tail of the bat

pattern batcalc.abs(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatABS;
comment Unary abs over the tail of the bat with candidates list

pattern batcalc.abs(b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatABS;
comment Unary abs over the tail of the bat

pattern batcalc.avg(b:bat[:oid,:hge],s:bat[:oid,:oid]) (X_3:dbl,X_4:lng) 
address CMDcalcavg;
comment average and number of non-nil values of B with candidates list

pattern batcalc.avg(b:bat[:oid,:hge]) (X_2:dbl,X_3:lng) 
address CMDcalcavg;
comment average and number of non-nil values of B

pattern batcalc.avg(b:bat[:oid,:hge],s:bat[:oid,:oid]):dbl 
address CMDcalcavg;
comment average of non-nil values of B

pattern batcalc.avg(b:bat[:oid,:hge]):dbl 
address CMDcalcavg;
comment average of non-nil values of B with candidates list

pattern batcalc.and(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatAND;
comment Return V AND B with candidates list

pattern batcalc.and(v:hge,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatAND;
comment Return V AND B

pattern batcalc.and(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatAND;
comment Return B AND V with candidates list

pattern batcalc.and(b:bat[:oid,:hge],v:hge):bat[:oid,:hge] 
address CMDbatAND;
comment Return B AND V

pattern batcalc.and(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatAND;
comment Return B1 AND B2 with candidates list

pattern batcalc.and(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatAND;
comment Return B1 AND B2

pattern batcalc.add_noerror(v:dbl,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:dbl,b:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:dbl],v:hge,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:dbl],v:hge):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:flt,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:flt,b:bat[:oid,:hge]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:flt],v:hge,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:flt],v:hge):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:hge]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:hge,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:hge,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:hge],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:hge],v:dbl):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:hge,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:hge,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:hge],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:hge],v:flt):bat[:oid,:flt] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:hge,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:hge],v:hge):bat[:oid,:hge] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:hge,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:hge,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:hge],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:hge],v:lng):bat[:oid,:hge] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:hge,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:hge,b:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:hge],v:wrd,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:hge],v:wrd):bat[:oid,:hge] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:hge,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:hge,b:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:hge],v:int,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:hge],v:int):bat[:oid,:hge] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:hge,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:hge,b:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:hge],v:sht,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:hge],v:sht):bat[:oid,:hge] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:hge,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:hge,b:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:hge],v:bte,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:hge],v:bte):bat[:oid,:hge] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:lng,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:lng,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:lng],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:lng],v:hge):bat[:oid,:hge] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:wrd,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:wrd,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:wrd],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:wrd],v:hge):bat[:oid,:hge] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:int,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:int,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:int],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:int],v:hge):bat[:oid,:hge] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:int],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:sht,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:sht,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:sht],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:sht],v:hge):bat[:oid,:hge] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.add_noerror(v:bte,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return V + B with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(v:bte,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADD;
comment Return V + B, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:bte],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B + V with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b:bat[:oid,:bte],v:hge):bat[:oid,:hge] 
address CMDbatADD;
comment Return B + V, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B1 + B2 with candidates list, overflow causes NIL value

pattern batcalc.add_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatADD;
comment Return B1 + B2, overflow causes NIL value

pattern batcalc.abs(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatABS;
comment Unary abs over the tail of the bat with candidates list

pattern batcalc.abs(b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatABS;
comment Unary abs over the tail of the bat

command batcalc.bte(s1:int,v:bat[:oid,:hge],d2:int,s2:int):bat[:oid,:bte] 
address bathge_dec2dec_bte;
comment cast decimal(hge) to decimal(bte) and check for overflow

command batcalc.bte(s1:int,v:bat[:oid,:hge]):bat[:oid,:bte] 
address bathge_dec2_bte;
comment cast decimal(hge) to bte and check for overflow

command batcalc.bte(v:bat[:oid,:hge],digits:int,scale:int):bat[:oid,:bte] 
address bathge_num2dec_bte;
comment cast number to decimal(bte) and check for overflow

command batcalc.bte(s1:int,v:bat[:oid,:lng],d2:int,s2:int):bat[:oid,:bte] 
address batlng_dec2dec_bte;
comment cast decimal(lng) to decimal(bte) and check for overflow

command batcalc.bte(s1:int,v:bat[:oid,:lng]):bat[:oid,:bte] 
address batlng_dec2_bte;
comment cast decimal(lng) to bte and check for overflow

command batcalc.bte(v:bat[:oid,:lng],digits:int,scale:int):bat[:oid,:bte] 
address batlng_num2dec_bte;
comment cast number to decimal(bte) and check for overflow

command batcalc.bte(s1:int,v:bat[:oid,:wrd],d2:int,s2:int):bat[:oid,:bte] 
address batwrd_dec2dec_bte;
comment cast decimal(wrd) to decimal(bte) and check for overflow

command batcalc.bte(s1:int,v:bat[:oid,:wrd]):bat[:oid,:bte] 
address batwrd_dec2_bte;
comment cast decimal(wrd) to bte and check for overflow

command batcalc.bte(v:bat[:oid,:wrd],digits:int,scale:int):bat[:oid,:bte] 
address batwrd_num2dec_bte;
comment cast number to decimal(bte) and check for overflow

command batcalc.bte(s1:int,v:bat[:oid,:int],d2:int,s2:int):bat[:oid,:bte] 
address batint_dec2dec_bte;
comment cast decimal(int) to decimal(bte) and check for overflow

command batcalc.bte(s1:int,v:bat[:oid,:int]):bat[:oid,:bte] 
address batint_dec2_bte;
comment cast decimal(int) to bte and check for overflow

command batcalc.bte(v:bat[:oid,:int],digits:int,scale:int):bat[:oid,:bte] 
address batint_num2dec_bte;
comment cast number to decimal(bte) and check for overflow

command batcalc.bte(s1:int,v:bat[:oid,:sht],d2:int,s2:int):bat[:oid,:bte] 
address batsht_dec2dec_bte;
comment cast decimal(sht) to decimal(bte) and check for overflow

command batcalc.bte(s1:int,v:bat[:oid,:sht]):bat[:oid,:bte] 
address batsht_dec2_bte;
comment cast decimal(sht) to bte and check for overflow

command batcalc.bte(v:bat[:oid,:sht],digits:int,scale:int):bat[:oid,:bte] 
address batsht_num2dec_bte;
comment cast number to decimal(bte) and check for overflow

command batcalc.bte(s1:int,v:bat[:oid,:bte],d2:int,s2:int):bat[:oid,:bte] 
address batbte_dec2dec_bte;
comment cast decimal(bte) to decimal(bte) and check for overflow

command batcalc.bte(s1:int,v:bat[:oid,:bte]):bat[:oid,:bte] 
address batbte_dec2_bte;
comment cast decimal(bte) to bte and check for overflow

command batcalc.bte(v:bat[:oid,:bte],digits:int,scale:int):bat[:oid,:bte] 
address batbte_num2dec_bte;
comment cast number to decimal(bte) and check for overflow

command batcalc.bte(v:bat[:oid,:dbl],digits:int,scale:int):bat[:oid,:bte] 
address batdbl_num2dec_bte;
comment cast number to decimal(bte) and check for overflow

command batcalc.bte(v:bat[:oid,:flt],digits:int,scale:int):bat[:oid,:bte] 
address batflt_num2dec_bte;
comment cast number to decimal(bte) and check for overflow

command batcalc.bte(v:bat[:oid,:str],digits:int,scale:int):bat[:oid,:bte] 
address batstr_2dec_bte;
comment cast to dec(bte) and check for overflow

command batcalc.bte(v:bat[:oid,:str],digits:int):bat[:oid,:bte] 
address batstr_2num_bte;
comment cast to bte and check for overflow

command batcalc.bte(v:bat[:oid,:void],digits:int,scale:int):bat[:oid,:bte] 
address batnil_2dec_bte;
comment cast to dec(bte) and check for overflow

command batcalc.bte(v:bat[:oid,:void],digits:int):bat[:oid,:bte] 
address batnil_2num_bte;
comment cast to bte and check for overflow

pattern batcalc.bte_noerror(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from str to bte with candidates list

pattern batcalc.bte_noerror(b:bat[:oid,:str]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from str to bte

pattern batcalc.bte(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from str to bte with candidates list, signal error on overflow

pattern batcalc.bte(b:bat[:oid,:str]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from str to bte, signal error on overflow

pattern batcalc.bte_noerror(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from oid to bte with candidates list

pattern batcalc.bte_noerror(b:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from oid to bte

pattern batcalc.bte(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from oid to bte with candidates list, signal error on overflow

pattern batcalc.bte(b:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from oid to bte, signal error on overflow

pattern batcalc.bte_noerror(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from dbl to bte with candidates list

pattern batcalc.bte_noerror(b:bat[:oid,:dbl]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from dbl to bte

pattern batcalc.bte(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from dbl to bte with candidates list, signal error on overflow

pattern batcalc.bte(b:bat[:oid,:dbl]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from dbl to bte, signal error on overflow

pattern batcalc.bte_noerror(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from flt to bte with candidates list

pattern batcalc.bte_noerror(b:bat[:oid,:flt]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from flt to bte

pattern batcalc.bte(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from flt to bte with candidates list, signal error on overflow

pattern batcalc.bte(b:bat[:oid,:flt]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from flt to bte, signal error on overflow

pattern batcalc.bte_noerror(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from lng to bte with candidates list

pattern batcalc.bte_noerror(b:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from lng to bte

pattern batcalc.bte(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from lng to bte with candidates list, signal error on overflow

pattern batcalc.bte(b:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from lng to bte, signal error on overflow

pattern batcalc.bte_noerror(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from wrd to bte with candidates list

pattern batcalc.bte_noerror(b:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from wrd to bte

pattern batcalc.bte(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from wrd to bte with candidates list, signal error on overflow

pattern batcalc.bte(b:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from wrd to bte, signal error on overflow

pattern batcalc.bte_noerror(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from int to bte with candidates list

pattern batcalc.bte_noerror(b:bat[:oid,:int]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from int to bte

pattern batcalc.bte(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from int to bte with candidates list, signal error on overflow

pattern batcalc.bte(b:bat[:oid,:int]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from int to bte, signal error on overflow

pattern batcalc.bte_noerror(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from sht to bte with candidates list

pattern batcalc.bte_noerror(b:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from sht to bte

pattern batcalc.bte(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from sht to bte with candidates list, signal error on overflow

pattern batcalc.bte(b:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from sht to bte, signal error on overflow

pattern batcalc.bte_noerror(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from bte to bte with candidates list

pattern batcalc.bte_noerror(b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from bte to bte

pattern batcalc.bte(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from bte to bte with candidates list, signal error on overflow

pattern batcalc.bte(b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from bte to bte, signal error on overflow

pattern batcalc.bte_noerror(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from bit to bte with candidates list

pattern batcalc.bte_noerror(b:bat[:oid,:bit]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from bit to bte

pattern batcalc.bte(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from bit to bte with candidates list, signal error on overflow

pattern batcalc.bte(b:bat[:oid,:bit]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from bit to bte, signal error on overflow

pattern batcalc.bte_noerror(b:bat[:oid,:void],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from void to bte with candidates list

pattern batcalc.bte_noerror(b:bat[:oid,:void]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from void to bte

pattern batcalc.bte(b:bat[:oid,:void],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from void to bte with candidates list, signal error on overflow

pattern batcalc.bte(b:bat[:oid,:void]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from void to bte, signal error on overflow

pattern batcalc.bit_noerror(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from str to bit with candidates list

pattern batcalc.bit_noerror(b:bat[:oid,:str]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from str to bit

pattern batcalc.bit(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from str to bit with candidates list, signal error on overflow

pattern batcalc.bit(b:bat[:oid,:str]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from str to bit, signal error on overflow

pattern batcalc.bit_noerror(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from oid to bit with candidates list

pattern batcalc.bit_noerror(b:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from oid to bit

pattern batcalc.bit(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from oid to bit with candidates list, signal error on overflow

pattern batcalc.bit(b:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from oid to bit, signal error on overflow

pattern batcalc.bit_noerror(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from dbl to bit with candidates list

pattern batcalc.bit_noerror(b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from dbl to bit

pattern batcalc.bit(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from dbl to bit with candidates list, signal error on overflow

pattern batcalc.bit(b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from dbl to bit, signal error on overflow

pattern batcalc.bit_noerror(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from flt to bit with candidates list

pattern batcalc.bit_noerror(b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from flt to bit

pattern batcalc.bit(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from flt to bit with candidates list, signal error on overflow

pattern batcalc.bit(b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from flt to bit, signal error on overflow

pattern batcalc.bit_noerror(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from lng to bit with candidates list

pattern batcalc.bit_noerror(b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from lng to bit

pattern batcalc.bit(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from lng to bit with candidates list, signal error on overflow

pattern batcalc.bit(b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from lng to bit, signal error on overflow

pattern batcalc.bit_noerror(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from wrd to bit with candidates list

pattern batcalc.bit_noerror(b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from wrd to bit

pattern batcalc.bit(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from wrd to bit with candidates list, signal error on overflow

pattern batcalc.bit(b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from wrd to bit, signal error on overflow

pattern batcalc.bit_noerror(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from int to bit with candidates list

pattern batcalc.bit_noerror(b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from int to bit

pattern batcalc.bit(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from int to bit with candidates list, signal error on overflow

pattern batcalc.bit(b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from int to bit, signal error on overflow

pattern batcalc.bit_noerror(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from sht to bit with candidates list

pattern batcalc.bit_noerror(b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from sht to bit

pattern batcalc.bit(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from sht to bit with candidates list, signal error on overflow

pattern batcalc.bit(b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from sht to bit, signal error on overflow

pattern batcalc.bit_noerror(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from bte to bit with candidates list

pattern batcalc.bit_noerror(b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from bte to bit

pattern batcalc.bit(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from bte to bit with candidates list, signal error on overflow

pattern batcalc.bit(b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from bte to bit, signal error on overflow

pattern batcalc.bit_noerror(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from bit to bit with candidates list

pattern batcalc.bit_noerror(b:bat[:oid,:bit]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from bit to bit

pattern batcalc.bit(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from bit to bit with candidates list, signal error on overflow

pattern batcalc.bit(b:bat[:oid,:bit]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from bit to bit, signal error on overflow

pattern batcalc.bit_noerror(b:bat[:oid,:void],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from void to bit with candidates list

pattern batcalc.bit_noerror(b:bat[:oid,:void]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from void to bit

pattern batcalc.bit(b:bat[:oid,:void],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from void to bit with candidates list, signal error on overflow

pattern batcalc.bit(b:bat[:oid,:void]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from void to bit, signal error on overflow

pattern batcalc.between_symmetric(b:bat[:oid,:any_1],v1:any_1,v2:any_1,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatBETWEENsymmetric;
comment B between V1 and V2 (or vice versa) inclusive with candidates list

pattern batcalc.between_symmetric(b:bat[:oid,:any_1],v1:any_1,v2:any_1):bat[:oid,:bit] 
address CMDbatBETWEENsymmetric;
comment B between V1 and V2 (or vice versa) inclusive

pattern batcalc.between_symmetric(b:bat[:oid,:any_1],v1:any_1,v2:bat[:oid,:any_1],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatBETWEENsymmetric;
comment B between V1 and V2 (or vice versa) inclusive with candidates list

pattern batcalc.between_symmetric(b:bat[:oid,:any_1],v1:any_1,v2:bat[:oid,:any_1]):bat[:oid,:bit] 
address CMDbatBETWEENsymmetric;
comment B between V1 and V2 (or vice versa) inclusive

pattern batcalc.between_symmetric(b:bat[:oid,:any_1],v1:bat[:oid,:any_1],v2:any_1,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatBETWEENsymmetric;
comment B between V1 and V2 (or vice versa) inclusive with candidates list

pattern batcalc.between_symmetric(b:bat[:oid,:any_1],v1:bat[:oid,:any_1],v2:any_1):bat[:oid,:bit] 
address CMDbatBETWEENsymmetric;
comment B between V1 and V2 (or vice versa) inclusive

pattern batcalc.between_symmetric(b:bat[:oid,:any_1],v1:bat[:oid,:any_1],v2:bat[:oid,:any_1],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatBETWEENsymmetric;
comment B between V1 and V2 (or vice versa) inclusive with candidates list

pattern batcalc.between_symmetric(b:bat[:oid,:any_1],v1:bat[:oid,:any_1],v2:bat[:oid,:any_1]):bat[:oid,:bit] 
address CMDbatBETWEENsymmetric;
comment B between V1 and V2 (or vice versa) inclusive

pattern batcalc.between(b:bat[:oid,:any_1],lo:any_1,hi:any_1,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatBETWEEN;
comment B between LO and HI inclusive with candidates list

pattern batcalc.between(b:bat[:oid,:any_1],lo:any_1,hi:any_1):bat[:oid,:bit] 
address CMDbatBETWEEN;
comment B between LO and HI inclusive

pattern batcalc.between(b:bat[:oid,:any_1],lo:any_1,hi:bat[:oid,:any_1],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatBETWEEN;
comment B between LO and HI inclusive with candidates list

pattern batcalc.between(b:bat[:oid,:any_1],lo:any_1,hi:bat[:oid,:any_1]):bat[:oid,:bit] 
address CMDbatBETWEEN;
comment B between LO and HI inclusive

pattern batcalc.between(b:bat[:oid,:any_1],lo:bat[:oid,:any_1],hi:any_1,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatBETWEEN;
comment B between LO and HI inclusive with candidates list

pattern batcalc.between(b:bat[:oid,:any_1],lo:bat[:oid,:any_1],hi:any_1):bat[:oid,:bit] 
address CMDbatBETWEEN;
comment B between LO and HI inclusive

pattern batcalc.between(b:bat[:oid,:any_1],lo:bat[:oid,:any_1],hi:bat[:oid,:any_1],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatBETWEEN;
comment B between LO and HI inclusive with candidates list

pattern batcalc.between(b:bat[:oid,:any_1],lo:bat[:oid,:any_1],hi:bat[:oid,:any_1]):bat[:oid,:bit] 
address CMDbatBETWEEN;
comment B between LO and HI inclusive

pattern batcalc.bte_noerror(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from hge to bte with candidates list

pattern batcalc.bte_noerror(b:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDconvert_bte;
comment cast from hge to bte

pattern batcalc.bte(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from hge to bte with candidates list, signal error on overflow

pattern batcalc.bte(b:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDconvertsignal_bte;
comment cast from hge to bte, signal error on overflow

pattern batcalc.bit_noerror(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from hge to bit with candidates list

pattern batcalc.bit_noerror(b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDconvert_bit;
comment cast from hge to bit

pattern batcalc.bit(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from hge to bit with candidates list, signal error on overflow

pattern batcalc.bit(b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDconvertsignal_bit;
comment cast from hge to bit, signal error on overflow

pattern batcalc.between(b:bat[:oid,:hge],lo:hge,hi:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatBETWEEN;
comment B between LO and HI inclusive with candidates list, nil border is (minus) infinity

pattern batcalc.between(b:bat[:oid,:hge],lo:hge,hi:hge):bat[:oid,:bit] 
address CMDbatBETWEEN;
comment B between LO and HI inclusive, nil border is (minus) infinity

pattern batcalc.between(b:bat[:oid,:hge],lo:hge,hi:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatBETWEEN;
comment B between LO and HI inclusive with candidates list, nil border is (minus) infinity

pattern batcalc.between(b:bat[:oid,:hge],lo:hge,hi:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatBETWEEN;
comment B between LO and HI inclusive, nil border is (minus) infinity

pattern batcalc.between(b:bat[:oid,:hge],lo:bat[:oid,:hge],hi:hge,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatBETWEEN;
comment B between LO and HI inclusive with candidates list, nil border is (minus) infinity

pattern batcalc.between(b:bat[:oid,:hge],lo:bat[:oid,:hge],hi:hge):bat[:oid,:bit] 
address CMDbatBETWEEN;
comment B between LO and HI inclusive, nil border is (minus) infinity

pattern batcalc.between(b:bat[:oid,:hge],lo:bat[:oid,:hge],hi:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatBETWEEN;
comment B between LO and HI inclusive with candidates list, nil border is (minus) infinity

pattern batcalc.between(b:bat[:oid,:hge],lo:bat[:oid,:hge],hi:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatBETWEEN;
comment B between LO and HI inclusive, nil border is (minus) infinity

pattern batcalc.cmp(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:dbl,b:bat[:oid,:dbl]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:dbl],v:dbl):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:dbl,b:bat[:oid,:flt]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:dbl],v:flt):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:dbl,b:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:dbl],v:lng):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:dbl,b:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:dbl],v:wrd):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:dbl,b:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:dbl],v:int):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:dbl,b:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:dbl],v:sht):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:dbl,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:dbl],v:bte):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:flt,b:bat[:oid,:dbl]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:flt],v:dbl):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:flt,b:bat[:oid,:flt]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:flt],v:flt):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:flt],b2:bat[:oid,:flt]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:flt,b:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:flt],v:lng):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:flt],b2:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:flt,b:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:flt],v:wrd):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:flt,b:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:flt],v:int):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:flt],b2:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:flt,b:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:flt],v:sht):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:flt],b2:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:flt,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:flt],v:bte):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:flt],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:lng,b:bat[:oid,:dbl]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:lng],v:dbl):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:lng,b:bat[:oid,:flt]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:lng],v:flt):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:lng],b2:bat[:oid,:flt]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:lng,b:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:lng],v:lng):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:lng,b:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:lng],v:wrd):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:lng,b:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:lng],v:int):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:lng,b:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:lng],v:sht):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:lng,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:lng],v:bte):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:wrd,b:bat[:oid,:dbl]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:wrd],v:dbl):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:wrd,b:bat[:oid,:flt]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:wrd],v:flt):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:wrd,b:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:wrd],v:lng):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:wrd],v:wrd):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:wrd,b:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:wrd],v:int):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:wrd,b:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:wrd],v:sht):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:wrd,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:wrd],v:bte):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:int,b:bat[:oid,:dbl]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:int],v:dbl):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:int],b2:bat[:oid,:dbl]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:int,b:bat[:oid,:flt]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:int],v:flt):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:int],b2:bat[:oid,:flt]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:int,b:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:int],v:lng):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:int,b:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:int],v:wrd):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:int],b2:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:int,b:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:int],v:int):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:int,b:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:int],v:sht):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:int,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:int],v:bte):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:sht,b:bat[:oid,:dbl]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:sht],v:dbl):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:sht,b:bat[:oid,:flt]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:sht],v:flt):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:sht],b2:bat[:oid,:flt]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:sht,b:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:sht],v:lng):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:sht,b:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:sht],v:wrd):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:sht,b:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:sht],v:int):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:sht,b:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:sht],v:sht):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:sht,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:sht],v:bte):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:bte,b:bat[:oid,:dbl]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:bte],v:dbl):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:bte,b:bat[:oid,:flt]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:bte],v:flt):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:bte],b2:bat[:oid,:flt]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:bte,b:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:bte],v:lng):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:bte,b:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:bte],v:wrd):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:bte,b:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:bte],v:int):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:bte,b:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:bte],v:sht):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:bte,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:bte],v:bte):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:oid,b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:oid],v:oid,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:oid,b:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:oid],v:oid):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:oid],b2:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:oid],b2:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:str,b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:str],v:str,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:str,b:bat[:oid,:str]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:str],v:str):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:str],b2:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:str],b2:bat[:oid,:str]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:bit,b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:bit],v:bit,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:bit,b:bat[:oid,:bit]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:bit],v:bit):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:bit],b2:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:bit],b2:bat[:oid,:bit]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:dbl,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:dbl],v:hge,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:dbl,b:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:dbl],v:hge):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:dbl],b2:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:flt,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:flt],v:hge,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:flt,b:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:flt],v:hge):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:flt],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:flt],b2:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:hge,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:hge],v:dbl,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:hge,b:bat[:oid,:dbl]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:hge],v:dbl):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:hge],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:hge],b2:bat[:oid,:dbl]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:hge,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:hge],v:flt,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:hge,b:bat[:oid,:flt]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:hge],v:flt):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:hge],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:hge],b2:bat[:oid,:flt]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:hge,b:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:hge],v:hge):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:hge,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:hge],v:lng,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:hge,b:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:hge],v:lng):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:hge],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:hge],b2:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:hge,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:hge],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:hge,b:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:hge],v:wrd):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:hge],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:hge],b2:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:hge,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:hge],v:int,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:hge,b:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:hge],v:int):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:hge],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:hge],b2:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:hge,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:hge],v:sht,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:hge,b:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:hge],v:sht):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:hge],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:hge],b2:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:hge,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:hge],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:hge,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:hge],v:bte):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:hge],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:hge],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:lng,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:lng],v:hge,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:lng,b:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:lng],v:hge):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:lng],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:lng],b2:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:wrd,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:wrd],v:hge,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:wrd,b:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:wrd],v:hge):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:wrd],b2:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:int,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:int],v:hge,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:int,b:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:int],v:hge):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:int],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:int],b2:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:sht,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:sht],v:hge,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:sht,b:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:sht],v:hge):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:sht],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:sht],b2:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

pattern batcalc.cmp(v:bte,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B with candidates list

pattern batcalc.cmp(b:bat[:oid,:bte],v:hge,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V with candidates list

pattern batcalc.cmp(v:bte,b:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if V </==/> B

pattern batcalc.cmp(b:bat[:oid,:bte],v:hge):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B </==/> V

pattern batcalc.cmp(b1:bat[:oid,:bte],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2 with candidates list

pattern batcalc.cmp(b1:bat[:oid,:bte],b2:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatCMP;
comment Return -1/0/1 if B1 </==/> B2

command batcalc.dbl(s1:int,v:bat[:oid,:hge],d2:int,s2:int):bat[:oid,:dbl] 
address bathge_dec2dec_dbl;
comment cast decimal(hge) to decimal(dbl) and check for overflow

command batcalc.dbl(s1:int,v:bat[:oid,:hge]):bat[:oid,:dbl] 
address bathge_dec2_dbl;
comment cast decimal(hge) to dbl and check for overflow

command batcalc.dbl(v:bat[:oid,:hge],digits:int,scale:int):bat[:oid,:dbl] 
address bathge_num2dec_dbl;
comment cast number to decimal(dbl) and check for overflow

function batcalc.dense_rank_grp{inline}(b:bat[:oid,:any_1]):bat[:oid,:int];
function batcalc.dense_rank_grp{inline}(b:bat[:oid,:any_1],ord:bat[:oid,:oid],orig:bat[:oid,:any_2]):bat[:oid,:int];
function batcalc.dense_rank_grp{inline}(b:bat[:oid,:any_1],ord:bat[:oid,:oid],grp:bat[:oid,:oid],ext:bat[:oid,:oid]):bat[:oid,:int];
command batcalc.dbl(s1:int,v:bat[:oid,:lng],d2:int,s2:int):bat[:oid,:dbl] 
address batlng_dec2dec_dbl;
comment cast decimal(lng) to decimal(dbl) and check for overflow

command batcalc.dbl(s1:int,v:bat[:oid,:lng]):bat[:oid,:dbl] 
address batlng_dec2_dbl;
comment cast decimal(lng) to dbl and check for overflow

command batcalc.dbl(v:bat[:oid,:lng],digits:int,scale:int):bat[:oid,:dbl] 
address batlng_num2dec_dbl;
comment cast number to decimal(dbl) and check for overflow

command batcalc.dbl(s1:int,v:bat[:oid,:wrd],d2:int,s2:int):bat[:oid,:dbl] 
address batwrd_dec2dec_dbl;
comment cast decimal(wrd) to decimal(dbl) and check for overflow

command batcalc.dbl(s1:int,v:bat[:oid,:wrd]):bat[:oid,:dbl] 
address batwrd_dec2_dbl;
comment cast decimal(wrd) to dbl and check for overflow

command batcalc.dbl(v:bat[:oid,:wrd],digits:int,scale:int):bat[:oid,:dbl] 
address batwrd_num2dec_dbl;
comment cast number to decimal(dbl) and check for overflow

command batcalc.dbl(s1:int,v:bat[:oid,:int],d2:int,s2:int):bat[:oid,:dbl] 
address batint_dec2dec_dbl;
comment cast decimal(int) to decimal(dbl) and check for overflow

command batcalc.dbl(s1:int,v:bat[:oid,:int]):bat[:oid,:dbl] 
address batint_dec2_dbl;
comment cast decimal(int) to dbl and check for overflow

command batcalc.dbl(v:bat[:oid,:int],digits:int,scale:int):bat[:oid,:dbl] 
address batint_num2dec_dbl;
comment cast number to decimal(dbl) and check for overflow

command batcalc.dbl(s1:int,v:bat[:oid,:sht],d2:int,s2:int):bat[:oid,:dbl] 
address batsht_dec2dec_dbl;
comment cast decimal(sht) to decimal(dbl) and check for overflow

command batcalc.dbl(s1:int,v:bat[:oid,:sht]):bat[:oid,:dbl] 
address batsht_dec2_dbl;
comment cast decimal(sht) to dbl and check for overflow

command batcalc.dbl(v:bat[:oid,:sht],digits:int,scale:int):bat[:oid,:dbl] 
address batsht_num2dec_dbl;
comment cast number to decimal(dbl) and check for overflow

command batcalc.dbl(s1:int,v:bat[:oid,:bte],d2:int,s2:int):bat[:oid,:dbl] 
address batbte_dec2dec_dbl;
comment cast decimal(bte) to decimal(dbl) and check for overflow

command batcalc.dbl(s1:int,v:bat[:oid,:bte]):bat[:oid,:dbl] 
address batbte_dec2_dbl;
comment cast decimal(bte) to dbl and check for overflow

command batcalc.dbl(v:bat[:oid,:bte],digits:int,scale:int):bat[:oid,:dbl] 
address batbte_num2dec_dbl;
comment cast number to decimal(dbl) and check for overflow

command batcalc.date(v:bat[:oid,:str]):bat[:oid,:date] 
address batstr_2_date;
comment cast to date

command batcalc.date(v:bat[:oid,:void]):bat[:oid,:date] 
address batnil_2_date;
comment cast to date

command batcalc.daytime(v:bat[:oid,:daytime],digits:int):bat[:oid,:daytime] 
address batdaytime_2time_daytime;
comment cast daytime to daytime and check for overflow

command batcalc.daytime(v:bat[:oid,:str],digits:int):bat[:oid,:daytime] 
address batstr_2time_daytime;
comment cast to daytime and check for overflow

command batcalc.daytime(v:bat[:oid,:str]):bat[:oid,:daytime] 
address batstr_2_daytime;
comment Cast to daytime

command batcalc.daytime(v:bat[:oid,:void],digits:int):bat[:oid,:daytime] 
address batnil_2time_daytime;
comment cast to daytime and check for overflow

command batcalc.daytime(v:bat[:oid,:void]):bat[:oid,:daytime] 
address batnil_2_daytime;
comment Cast to daytime

pattern batcalc.dbl_noerror(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from str to dbl with candidates list

pattern batcalc.dbl_noerror(b:bat[:oid,:str]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from str to dbl

pattern batcalc.dbl(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from str to dbl with candidates list, signal error on overflow

pattern batcalc.dbl(b:bat[:oid,:str]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from str to dbl, signal error on overflow

pattern batcalc.dbl_noerror(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from oid to dbl with candidates list

pattern batcalc.dbl_noerror(b:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from oid to dbl

pattern batcalc.dbl(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from oid to dbl with candidates list, signal error on overflow

pattern batcalc.dbl(b:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from oid to dbl, signal error on overflow

pattern batcalc.dbl_noerror(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from dbl to dbl with candidates list

pattern batcalc.dbl_noerror(b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from dbl to dbl

pattern batcalc.dbl(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from dbl to dbl with candidates list, signal error on overflow

pattern batcalc.dbl(b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from dbl to dbl, signal error on overflow

pattern batcalc.dbl_noerror(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from flt to dbl with candidates list

pattern batcalc.dbl_noerror(b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from flt to dbl

pattern batcalc.dbl(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from flt to dbl with candidates list, signal error on overflow

pattern batcalc.dbl(b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from flt to dbl, signal error on overflow

pattern batcalc.dbl_noerror(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from lng to dbl with candidates list

pattern batcalc.dbl_noerror(b:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from lng to dbl

pattern batcalc.dbl(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from lng to dbl with candidates list, signal error on overflow

pattern batcalc.dbl(b:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from lng to dbl, signal error on overflow

pattern batcalc.dbl_noerror(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from wrd to dbl with candidates list

pattern batcalc.dbl_noerror(b:bat[:oid,:wrd]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from wrd to dbl

pattern batcalc.dbl(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from wrd to dbl with candidates list, signal error on overflow

pattern batcalc.dbl(b:bat[:oid,:wrd]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from wrd to dbl, signal error on overflow

pattern batcalc.dbl_noerror(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from int to dbl with candidates list

pattern batcalc.dbl_noerror(b:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from int to dbl

pattern batcalc.dbl(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from int to dbl with candidates list, signal error on overflow

pattern batcalc.dbl(b:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from int to dbl, signal error on overflow

pattern batcalc.dbl_noerror(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from sht to dbl with candidates list

pattern batcalc.dbl_noerror(b:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from sht to dbl

pattern batcalc.dbl(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from sht to dbl with candidates list, signal error on overflow

pattern batcalc.dbl(b:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from sht to dbl, signal error on overflow

pattern batcalc.dbl_noerror(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from bte to dbl with candidates list

pattern batcalc.dbl_noerror(b:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from bte to dbl

pattern batcalc.dbl(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from bte to dbl with candidates list, signal error on overflow

pattern batcalc.dbl(b:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from bte to dbl, signal error on overflow

pattern batcalc.dbl_noerror(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from bit to dbl with candidates list

pattern batcalc.dbl_noerror(b:bat[:oid,:bit]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from bit to dbl

pattern batcalc.dbl(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from bit to dbl with candidates list, signal error on overflow

pattern batcalc.dbl(b:bat[:oid,:bit]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from bit to dbl, signal error on overflow

pattern batcalc.dbl_noerror(b:bat[:oid,:void],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from void to dbl with candidates list

pattern batcalc.dbl_noerror(b:bat[:oid,:void]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from void to dbl

pattern batcalc.dbl(b:bat[:oid,:void],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from void to dbl with candidates list, signal error on overflow

pattern batcalc.dbl(b:bat[:oid,:void]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from void to dbl, signal error on overflow

pattern batcalc.div_noerror(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:dbl],v:dbl):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:dbl,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:dbl],v:flt):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:dbl,b:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:dbl],v:lng):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:dbl,b:bat[:oid,:wrd]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:dbl],v:wrd):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:dbl,b:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:dbl],v:int):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:dbl,b:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:dbl],v:sht):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:dbl,b:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:dbl],v:bte):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:flt,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:flt],v:dbl):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:flt,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:flt],v:flt):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:flt,b:bat[:oid,:lng]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:flt],v:lng):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:lng]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:flt,b:bat[:oid,:wrd]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:flt],v:wrd):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:flt,b:bat[:oid,:int]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:flt],v:int):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:int]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:flt,b:bat[:oid,:sht]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:flt],v:sht):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:sht]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:flt,b:bat[:oid,:bte]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:flt],v:bte):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:bte]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:lng,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:lng],v:dbl):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:lng,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:lng],v:flt):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:lng,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:lng],v:lng):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:lng,b:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:lng],v:wrd):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:lng,b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:lng],v:int):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:lng,b:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:lng],v:sht):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:lng,b:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:lng],v:bte):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:wrd,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:wrd],v:dbl):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:wrd,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:wrd],v:flt):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:wrd,b:bat[:oid,:lng]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:wrd],v:lng):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:wrd],v:wrd):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:wrd],v:int):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:wrd,b:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:wrd],v:sht):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:wrd,b:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:wrd],v:bte):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:int,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:int],v:dbl):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:int,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:int],v:flt):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:int,b:bat[:oid,:lng]):bat[:oid,:int] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:int],v:lng):bat[:oid,:int] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:int] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:int,b:bat[:oid,:wrd]):bat[:oid,:int] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:int],v:wrd):bat[:oid,:int] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd]):bat[:oid,:int] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:int,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:int],v:int):bat[:oid,:int] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:int,b:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:int],v:sht):bat[:oid,:int] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:int,b:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:int],v:bte):bat[:oid,:int] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:sht,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:sht],v:dbl):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:sht,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:sht],v:flt):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:sht,b:bat[:oid,:lng]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:sht],v:lng):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:sht,b:bat[:oid,:wrd]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:sht],v:wrd):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:sht,b:bat[:oid,:int]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:sht],v:int):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:sht,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:sht],v:sht):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:sht,b:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:sht],v:bte):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:bte,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:bte],v:dbl):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:bte,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:bte],v:flt):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:bte,b:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:bte],v:lng):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:bte,b:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:bte],v:wrd):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:bte,b:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:bte],v:int):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:bte,b:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:bte],v:sht):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:bte,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:bte],v:bte):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.dbl_noerror(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from hge to dbl with candidates list

pattern batcalc.dbl_noerror(b:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDconvert_dbl;
comment cast from hge to dbl

pattern batcalc.dbl(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from hge to dbl with candidates list, signal error on overflow

pattern batcalc.dbl(b:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDconvertsignal_dbl;
comment cast from hge to dbl, signal error on overflow

pattern batcalc.div_noerror(v:dbl,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:dbl,b:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:dbl],v:hge,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:dbl],v:hge):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:flt,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:flt,b:bat[:oid,:hge]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:flt],v:hge,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:flt],v:hge):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:hge]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:hge,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:hge,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:hge],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:hge],v:dbl):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:hge,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:hge,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:hge],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:hge],v:flt):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:hge,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:hge],v:hge):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:hge,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:hge,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:hge],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:hge],v:lng):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:hge,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:hge,b:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:hge],v:wrd,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:hge],v:wrd):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:hge,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:hge,b:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:hge],v:int,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:hge],v:int):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:hge,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:hge,b:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:hge],v:sht,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:hge],v:sht):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:hge,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:hge,b:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:hge],v:bte,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:hge],v:bte):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:lng,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:lng,b:bat[:oid,:hge]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:lng],v:hge,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:lng],v:hge):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:hge]):bat[:oid,:lng] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:wrd,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:wrd,b:bat[:oid,:hge]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:wrd],v:hge,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:wrd],v:hge):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:hge]):bat[:oid,:wrd] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:int,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:int,b:bat[:oid,:hge]):bat[:oid,:int] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:int],v:hge,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:int],v:hge):bat[:oid,:int] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:int],b2:bat[:oid,:hge]):bat[:oid,:int] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:sht,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:sht,b:bat[:oid,:hge]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:sht],v:hge,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:sht],v:hge):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:hge]):bat[:oid,:sht] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

pattern batcalc.div_noerror(v:bte,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return V / B with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(v:bte,b:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return V / B, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:bte],v:hge,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B / V with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b:bat[:oid,:bte],v:hge):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B / V, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B1 / B2 with candidates list, overflow causes NIL value

pattern batcalc.div_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatDIV;
comment Return B1 / B2, overflow causes NIL value

command batcalc.daytime(t:bat[:oid,:timestamp]):bat[:oid,:daytime] 
address MTIMEtimestamp_extract_daytime_default_bulk;
command batcalc.daytime(s:bat[:oid,:lng]):bat[:oid,:daytime] 
address MTIMEsecs2daytime_bulk;
command batcalc.date(t:bat[:oid,:timestamp]):bat[:oid,:date] 
address MTIMEtimestamp_extract_date_default_bulk;
command batcalc.flt(s1:int,v:bat[:oid,:hge],d2:int,s2:int):bat[:oid,:flt] 
address bathge_dec2dec_flt;
comment cast decimal(hge) to decimal(flt) and check for overflow

command batcalc.flt(s1:int,v:bat[:oid,:hge]):bat[:oid,:flt] 
address bathge_dec2_flt;
comment cast decimal(hge) to flt and check for overflow

command batcalc.flt(v:bat[:oid,:hge],digits:int,scale:int):bat[:oid,:flt] 
address bathge_num2dec_flt;
comment cast number to decimal(flt) and check for overflow

command batcalc.flt(s1:int,v:bat[:oid,:lng],d2:int,s2:int):bat[:oid,:flt] 
address batlng_dec2dec_flt;
comment cast decimal(lng) to decimal(flt) and check for overflow

command batcalc.flt(s1:int,v:bat[:oid,:lng]):bat[:oid,:flt] 
address batlng_dec2_flt;
comment cast decimal(lng) to flt and check for overflow

command batcalc.flt(v:bat[:oid,:lng],digits:int,scale:int):bat[:oid,:flt] 
address batlng_num2dec_flt;
comment cast number to decimal(flt) and check for overflow

command batcalc.flt(s1:int,v:bat[:oid,:wrd],d2:int,s2:int):bat[:oid,:flt] 
address batwrd_dec2dec_flt;
comment cast decimal(wrd) to decimal(flt) and check for overflow

command batcalc.flt(s1:int,v:bat[:oid,:wrd]):bat[:oid,:flt] 
address batwrd_dec2_flt;
comment cast decimal(wrd) to flt and check for overflow

command batcalc.flt(v:bat[:oid,:wrd],digits:int,scale:int):bat[:oid,:flt] 
address batwrd_num2dec_flt;
comment cast number to decimal(flt) and check for overflow

command batcalc.flt(s1:int,v:bat[:oid,:int],d2:int,s2:int):bat[:oid,:flt] 
address batint_dec2dec_flt;
comment cast decimal(int) to decimal(flt) and check for overflow

command batcalc.flt(s1:int,v:bat[:oid,:int]):bat[:oid,:flt] 
address batint_dec2_flt;
comment cast decimal(int) to flt and check for overflow

command batcalc.flt(v:bat[:oid,:int],digits:int,scale:int):bat[:oid,:flt] 
address batint_num2dec_flt;
comment cast number to decimal(flt) and check for overflow

command batcalc.flt(s1:int,v:bat[:oid,:sht],d2:int,s2:int):bat[:oid,:flt] 
address batsht_dec2dec_flt;
comment cast decimal(sht) to decimal(flt) and check for overflow

command batcalc.flt(s1:int,v:bat[:oid,:sht]):bat[:oid,:flt] 
address batsht_dec2_flt;
comment cast decimal(sht) to flt and check for overflow

command batcalc.flt(v:bat[:oid,:sht],digits:int,scale:int):bat[:oid,:flt] 
address batsht_num2dec_flt;
comment cast number to decimal(flt) and check for overflow

command batcalc.flt(s1:int,v:bat[:oid,:bte],d2:int,s2:int):bat[:oid,:flt] 
address batbte_dec2dec_flt;
comment cast decimal(bte) to decimal(flt) and check for overflow

command batcalc.flt(s1:int,v:bat[:oid,:bte]):bat[:oid,:flt] 
address batbte_dec2_flt;
comment cast decimal(bte) to flt and check for overflow

command batcalc.flt(v:bat[:oid,:bte],digits:int,scale:int):bat[:oid,:flt] 
address batbte_num2dec_flt;
comment cast number to decimal(flt) and check for overflow

pattern batcalc.flt_noerror(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from str to flt with candidates list

pattern batcalc.flt_noerror(b:bat[:oid,:str]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from str to flt

pattern batcalc.flt(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from str to flt with candidates list, signal error on overflow

pattern batcalc.flt(b:bat[:oid,:str]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from str to flt, signal error on overflow

pattern batcalc.flt_noerror(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from oid to flt with candidates list

pattern batcalc.flt_noerror(b:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from oid to flt

pattern batcalc.flt(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from oid to flt with candidates list, signal error on overflow

pattern batcalc.flt(b:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from oid to flt, signal error on overflow

pattern batcalc.flt_noerror(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from dbl to flt with candidates list

pattern batcalc.flt_noerror(b:bat[:oid,:dbl]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from dbl to flt

pattern batcalc.flt(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from dbl to flt with candidates list, signal error on overflow

pattern batcalc.flt(b:bat[:oid,:dbl]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from dbl to flt, signal error on overflow

pattern batcalc.flt_noerror(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from flt to flt with candidates list

pattern batcalc.flt_noerror(b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from flt to flt

pattern batcalc.flt(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from flt to flt with candidates list, signal error on overflow

pattern batcalc.flt(b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from flt to flt, signal error on overflow

pattern batcalc.flt_noerror(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from lng to flt with candidates list

pattern batcalc.flt_noerror(b:bat[:oid,:lng]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from lng to flt

pattern batcalc.flt(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from lng to flt with candidates list, signal error on overflow

pattern batcalc.flt(b:bat[:oid,:lng]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from lng to flt, signal error on overflow

pattern batcalc.flt_noerror(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from wrd to flt with candidates list

pattern batcalc.flt_noerror(b:bat[:oid,:wrd]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from wrd to flt

pattern batcalc.flt(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from wrd to flt with candidates list, signal error on overflow

pattern batcalc.flt(b:bat[:oid,:wrd]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from wrd to flt, signal error on overflow

pattern batcalc.flt_noerror(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from int to flt with candidates list

pattern batcalc.flt_noerror(b:bat[:oid,:int]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from int to flt

pattern batcalc.flt(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from int to flt with candidates list, signal error on overflow

pattern batcalc.flt(b:bat[:oid,:int]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from int to flt, signal error on overflow

pattern batcalc.flt_noerror(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from sht to flt with candidates list

pattern batcalc.flt_noerror(b:bat[:oid,:sht]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from sht to flt

pattern batcalc.flt(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from sht to flt with candidates list, signal error on overflow

pattern batcalc.flt(b:bat[:oid,:sht]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from sht to flt, signal error on overflow

pattern batcalc.flt_noerror(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from bte to flt with candidates list

pattern batcalc.flt_noerror(b:bat[:oid,:bte]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from bte to flt

pattern batcalc.flt(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from bte to flt with candidates list, signal error on overflow

pattern batcalc.flt(b:bat[:oid,:bte]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from bte to flt, signal error on overflow

pattern batcalc.flt_noerror(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from bit to flt with candidates list

pattern batcalc.flt_noerror(b:bat[:oid,:bit]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from bit to flt

pattern batcalc.flt(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from bit to flt with candidates list, signal error on overflow

pattern batcalc.flt(b:bat[:oid,:bit]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from bit to flt, signal error on overflow

pattern batcalc.flt_noerror(b:bat[:oid,:void],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from void to flt with candidates list

pattern batcalc.flt_noerror(b:bat[:oid,:void]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from void to flt

pattern batcalc.flt(b:bat[:oid,:void],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from void to flt with candidates list, signal error on overflow

pattern batcalc.flt(b:bat[:oid,:void]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from void to flt, signal error on overflow

pattern batcalc.flt_noerror(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from hge to flt with candidates list

pattern batcalc.flt_noerror(b:bat[:oid,:hge]):bat[:oid,:flt] 
address CMDconvert_flt;
comment cast from hge to flt

pattern batcalc.flt(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from hge to flt with candidates list, signal error on overflow

pattern batcalc.flt(b:bat[:oid,:hge]):bat[:oid,:flt] 
address CMDconvertsignal_flt;
comment cast from hge to flt, signal error on overflow

command batcalc.hge(s1:int,v:bat[:oid,:hge],d2:int,s2:int):bat[:oid,:hge] 
address bathge_dec2dec_hge;
comment cast decimal(hge) to decimal(hge) and check for overflow

command batcalc.hge(s1:int,v:bat[:oid,:hge]):bat[:oid,:hge] 
address bathge_dec2_hge;
comment cast decimal(hge) to hge and check for overflow

command batcalc.hge(v:bat[:oid,:hge],digits:int,scale:int):bat[:oid,:hge] 
address bathge_num2dec_hge;
comment cast number to decimal(hge) and check for overflow

command batcalc.hge(s1:int,v:bat[:oid,:lng],d2:int,s2:int):bat[:oid,:hge] 
address batlng_dec2dec_hge;
comment cast decimal(lng) to decimal(hge) and check for overflow

command batcalc.hge(s1:int,v:bat[:oid,:lng]):bat[:oid,:hge] 
address batlng_dec2_hge;
comment cast decimal(lng) to hge and check for overflow

command batcalc.hge(v:bat[:oid,:lng],digits:int,scale:int):bat[:oid,:hge] 
address batlng_num2dec_hge;
comment cast number to decimal(hge) and check for overflow

command batcalc.hge(s1:int,v:bat[:oid,:wrd],d2:int,s2:int):bat[:oid,:hge] 
address batwrd_dec2dec_hge;
comment cast decimal(wrd) to decimal(hge) and check for overflow

command batcalc.hge(s1:int,v:bat[:oid,:wrd]):bat[:oid,:hge] 
address batwrd_dec2_hge;
comment cast decimal(wrd) to hge and check for overflow

command batcalc.hge(v:bat[:oid,:wrd],digits:int,scale:int):bat[:oid,:hge] 
address batwrd_num2dec_hge;
comment cast number to decimal(hge) and check for overflow

command batcalc.hge(s1:int,v:bat[:oid,:int],d2:int,s2:int):bat[:oid,:hge] 
address batint_dec2dec_hge;
comment cast decimal(int) to decimal(hge) and check for overflow

command batcalc.hge(s1:int,v:bat[:oid,:int]):bat[:oid,:hge] 
address batint_dec2_hge;
comment cast decimal(int) to hge and check for overflow

command batcalc.hge(v:bat[:oid,:int],digits:int,scale:int):bat[:oid,:hge] 
address batint_num2dec_hge;
comment cast number to decimal(hge) and check for overflow

command batcalc.hge(s1:int,v:bat[:oid,:sht],d2:int,s2:int):bat[:oid,:hge] 
address batsht_dec2dec_hge;
comment cast decimal(sht) to decimal(hge) and check for overflow

command batcalc.hge(s1:int,v:bat[:oid,:sht]):bat[:oid,:hge] 
address batsht_dec2_hge;
comment cast decimal(sht) to hge and check for overflow

command batcalc.hge(v:bat[:oid,:sht],digits:int,scale:int):bat[:oid,:hge] 
address batsht_num2dec_hge;
comment cast number to decimal(hge) and check for overflow

command batcalc.hge(s1:int,v:bat[:oid,:bte],d2:int,s2:int):bat[:oid,:hge] 
address batbte_dec2dec_hge;
comment cast decimal(bte) to decimal(hge) and check for overflow

command batcalc.hge(s1:int,v:bat[:oid,:bte]):bat[:oid,:hge] 
address batbte_dec2_hge;
comment cast decimal(bte) to hge and check for overflow

command batcalc.hge(v:bat[:oid,:bte],digits:int,scale:int):bat[:oid,:hge] 
address batbte_num2dec_hge;
comment cast number to decimal(hge) and check for overflow

command batcalc.hge(v:bat[:oid,:dbl],digits:int,scale:int):bat[:oid,:hge] 
address batdbl_num2dec_hge;
comment cast number to decimal(hge) and check for overflow

command batcalc.hge(v:bat[:oid,:flt],digits:int,scale:int):bat[:oid,:hge] 
address batflt_num2dec_hge;
comment cast number to decimal(hge) and check for overflow

command batcalc.hge(v:bat[:oid,:str],digits:int,scale:int):bat[:oid,:hge] 
address batstr_2dec_hge;
comment cast to dec(hge) and check for overflow

command batcalc.hge(v:bat[:oid,:str],digits:int):bat[:oid,:hge] 
address batstr_2num_hge;
comment cast to hge and check for overflow

command batcalc.hge(v:bat[:oid,:void],digits:int,scale:int):bat[:oid,:hge] 
address batnil_2dec_hge;
comment cast to dec(hge) and check for overflow

command batcalc.hge(v:bat[:oid,:void],digits:int):bat[:oid,:hge] 
address batnil_2num_hge;
comment cast to hge and check for overflow

command batcalc.hash(b:bat[:oid,:hge]):bat[:oid,:wrd] 
address MKEYbathash;
command batcalc.hash(b:bat[:oid,:any_1]):bat[:oid,:wrd] 
address MKEYbathash;
command batcalc.hash(b:bat[:oid,:dbl]):bat[:oid,:wrd] 
address MKEYbathash;
command batcalc.hash(b:bat[:oid,:flt]):bat[:oid,:wrd] 
address MKEYbathash;
command batcalc.hash(b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address MKEYbathash;
command batcalc.hash(b:bat[:oid,:oid]):bat[:oid,:wrd] 
address MKEYbathash;
command batcalc.hash(b:bat[:oid,:lng]):bat[:oid,:wrd] 
address MKEYbathash;
command batcalc.hash(b:bat[:oid,:int]):bat[:oid,:wrd] 
address MKEYbathash;
command batcalc.hash(b:bat[:oid,:sht]):bat[:oid,:wrd] 
address MKEYbathash;
command batcalc.hash(b:bat[:oid,:bte]):bat[:oid,:wrd] 
address MKEYbathash;
pattern batcalc.hge_noerror(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from str to hge with candidates list

pattern batcalc.hge_noerror(b:bat[:oid,:str]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from str to hge

pattern batcalc.hge(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from str to hge with candidates list, signal error on overflow

pattern batcalc.hge(b:bat[:oid,:str]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from str to hge, signal error on overflow

pattern batcalc.hge_noerror(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from oid to hge with candidates list

pattern batcalc.hge_noerror(b:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from oid to hge

pattern batcalc.hge(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from oid to hge with candidates list, signal error on overflow

pattern batcalc.hge(b:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from oid to hge, signal error on overflow

pattern batcalc.hge_noerror(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from dbl to hge with candidates list

pattern batcalc.hge_noerror(b:bat[:oid,:dbl]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from dbl to hge

pattern batcalc.hge(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from dbl to hge with candidates list, signal error on overflow

pattern batcalc.hge(b:bat[:oid,:dbl]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from dbl to hge, signal error on overflow

pattern batcalc.hge_noerror(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from flt to hge with candidates list

pattern batcalc.hge_noerror(b:bat[:oid,:flt]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from flt to hge

pattern batcalc.hge(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from flt to hge with candidates list, signal error on overflow

pattern batcalc.hge(b:bat[:oid,:flt]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from flt to hge, signal error on overflow

pattern batcalc.hge_noerror(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from hge to hge with candidates list

pattern batcalc.hge_noerror(b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from hge to hge

pattern batcalc.hge(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from hge to hge with candidates list, signal error on overflow

pattern batcalc.hge(b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from hge to hge, signal error on overflow

pattern batcalc.hge_noerror(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from lng to hge with candidates list

pattern batcalc.hge_noerror(b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from lng to hge

pattern batcalc.hge(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from lng to hge with candidates list, signal error on overflow

pattern batcalc.hge(b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from lng to hge, signal error on overflow

pattern batcalc.hge_noerror(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from wrd to hge with candidates list

pattern batcalc.hge_noerror(b:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from wrd to hge

pattern batcalc.hge(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from wrd to hge with candidates list, signal error on overflow

pattern batcalc.hge(b:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from wrd to hge, signal error on overflow

pattern batcalc.hge_noerror(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from int to hge with candidates list

pattern batcalc.hge_noerror(b:bat[:oid,:int]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from int to hge

pattern batcalc.hge(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from int to hge with candidates list, signal error on overflow

pattern batcalc.hge(b:bat[:oid,:int]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from int to hge, signal error on overflow

pattern batcalc.hge_noerror(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from sht to hge with candidates list

pattern batcalc.hge_noerror(b:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from sht to hge

pattern batcalc.hge(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from sht to hge with candidates list, signal error on overflow

pattern batcalc.hge(b:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from sht to hge, signal error on overflow

pattern batcalc.hge_noerror(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from bte to hge with candidates list

pattern batcalc.hge_noerror(b:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from bte to hge

pattern batcalc.hge(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from bte to hge with candidates list, signal error on overflow

pattern batcalc.hge(b:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from bte to hge, signal error on overflow

pattern batcalc.hge_noerror(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from bit to hge with candidates list

pattern batcalc.hge_noerror(b:bat[:oid,:bit]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from bit to hge

pattern batcalc.hge(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from bit to hge with candidates list, signal error on overflow

pattern batcalc.hge(b:bat[:oid,:bit]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from bit to hge, signal error on overflow

pattern batcalc.hge_noerror(b:bat[:oid,:void],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from void to hge with candidates list

pattern batcalc.hge_noerror(b:bat[:oid,:void]):bat[:oid,:hge] 
address CMDconvert_hge;
comment cast from void to hge

pattern batcalc.hge(b:bat[:oid,:void],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from void to hge with candidates list, signal error on overflow

pattern batcalc.hge(b:bat[:oid,:void]):bat[:oid,:hge] 
address CMDconvertsignal_hge;
comment cast from void to hge, signal error on overflow

command batcalc.int(s1:int,v:bat[:oid,:hge],d2:int,s2:int):bat[:oid,:int] 
address bathge_dec2dec_int;
comment cast decimal(hge) to decimal(int) and check for overflow

command batcalc.int(s1:int,v:bat[:oid,:hge]):bat[:oid,:int] 
address bathge_dec2_int;
comment cast decimal(hge) to int and check for overflow

command batcalc.int(v:bat[:oid,:hge],digits:int,scale:int):bat[:oid,:int] 
address bathge_num2dec_int;
comment cast number to decimal(int) and check for overflow

command batcalc.int(s1:int,v:bat[:oid,:lng],d2:int,s2:int):bat[:oid,:int] 
address batlng_dec2dec_int;
comment cast decimal(lng) to decimal(int) and check for overflow

command batcalc.int(s1:int,v:bat[:oid,:lng]):bat[:oid,:int] 
address batlng_dec2_int;
comment cast decimal(lng) to int and check for overflow

command batcalc.int(v:bat[:oid,:lng],digits:int,scale:int):bat[:oid,:int] 
address batlng_num2dec_int;
comment cast number to decimal(int) and check for overflow

command batcalc.int(s1:int,v:bat[:oid,:wrd],d2:int,s2:int):bat[:oid,:int] 
address batwrd_dec2dec_int;
comment cast decimal(wrd) to decimal(int) and check for overflow

command batcalc.int(s1:int,v:bat[:oid,:wrd]):bat[:oid,:int] 
address batwrd_dec2_int;
comment cast decimal(wrd) to int and check for overflow

command batcalc.int(v:bat[:oid,:wrd],digits:int,scale:int):bat[:oid,:int] 
address batwrd_num2dec_int;
comment cast number to decimal(int) and check for overflow

command batcalc.int(s1:int,v:bat[:oid,:int],d2:int,s2:int):bat[:oid,:int] 
address batint_dec2dec_int;
comment cast decimal(int) to decimal(int) and check for overflow

command batcalc.int(s1:int,v:bat[:oid,:int]):bat[:oid,:int] 
address batint_dec2_int;
comment cast decimal(int) to int and check for overflow

command batcalc.int(v:bat[:oid,:int],digits:int,scale:int):bat[:oid,:int] 
address batint_num2dec_int;
comment cast number to decimal(int) and check for overflow

command batcalc.int(s1:int,v:bat[:oid,:sht],d2:int,s2:int):bat[:oid,:int] 
address batsht_dec2dec_int;
comment cast decimal(sht) to decimal(int) and check for overflow

command batcalc.int(s1:int,v:bat[:oid,:sht]):bat[:oid,:int] 
address batsht_dec2_int;
comment cast decimal(sht) to int and check for overflow

command batcalc.int(v:bat[:oid,:sht],digits:int,scale:int):bat[:oid,:int] 
address batsht_num2dec_int;
comment cast number to decimal(int) and check for overflow

command batcalc.int(s1:int,v:bat[:oid,:bte],d2:int,s2:int):bat[:oid,:int] 
address batbte_dec2dec_int;
comment cast decimal(bte) to decimal(int) and check for overflow

command batcalc.int(s1:int,v:bat[:oid,:bte]):bat[:oid,:int] 
address batbte_dec2_int;
comment cast decimal(bte) to int and check for overflow

command batcalc.int(v:bat[:oid,:bte],digits:int,scale:int):bat[:oid,:int] 
address batbte_num2dec_int;
comment cast number to decimal(int) and check for overflow

command batcalc.int(v:bat[:oid,:dbl],digits:int,scale:int):bat[:oid,:int] 
address batdbl_num2dec_int;
comment cast number to decimal(int) and check for overflow

command batcalc.int(v:bat[:oid,:flt],digits:int,scale:int):bat[:oid,:int] 
address batflt_num2dec_int;
comment cast number to decimal(int) and check for overflow

command batcalc.index(v:bat[:oid,:str],u:bit):bat[:oid,:int] 
address BATSTRindex_int;
comment Return the offsets as an index bat

command batcalc.index(v:bat[:oid,:str],u:bit):bat[:oid,:sht] 
address BATSTRindex_sht;
comment Return the offsets as an index bat

command batcalc.index(v:bat[:oid,:str],u:bit):bat[:oid,:bte] 
address BATSTRindex_bte;
comment Return the offsets as an index bat

command batcalc.int(v:bat[:oid,:str],digits:int,scale:int):bat[:oid,:int] 
address batstr_2dec_int;
comment cast to dec(int) and check for overflow

command batcalc.int(v:bat[:oid,:str],digits:int):bat[:oid,:int] 
address batstr_2num_int;
comment cast to int and check for overflow

command batcalc.int(v:bat[:oid,:void],digits:int,scale:int):bat[:oid,:int] 
address batnil_2dec_int;
comment cast to dec(int) and check for overflow

command batcalc.int(v:bat[:oid,:void],digits:int):bat[:oid,:int] 
address batnil_2num_int;
comment cast to int and check for overflow

pattern batcalc.identity(b:bat[:oid,:any_2],s:oid) (resb:bat[:oid,:oid],ns:oid) 
address PBATSQLidentity;
comment Returns the unique row identitfiers.

command batcalc.identity(b:bat[:oid,:any_2]):bat[:oid,:oid] 
address BATSQLidentity;
comment Returns the unique row identitfiers.

pattern batcalc.ifthenelse(b:bat[:oid,:bit],b1:bat[:oid,:any_1],b2:bat[:oid,:any_1]):bat[:oid,:any_1] 
address CMDifthen;
comment If-then-else operation to assemble a conditional result

pattern batcalc.ifthen(b:bat[:oid,:bit],b1:bat[:oid,:any_1]):bat[:oid,:any_1] 
address CMDifthen;
comment If-then operation to assemble a conditional result

pattern batcalc.ifthenelse(b:bat[:oid,:bit],v1:any_1,b2:bat[:oid,:any_1]):bat[:oid,:any_1] 
address CMDifthen;
comment If-then-else operation to assemble a conditional result

pattern batcalc.ifthenelse(b:bat[:oid,:bit],b1:bat[:oid,:any_1],v2:any_1):bat[:oid,:any_1] 
address CMDifthen;
comment If-then-else operation to assemble a conditional result

pattern batcalc.ifthenelse(b:bat[:oid,:bit],v1:any_1,v2:any_1):bat[:oid,:any_1] 
address CMDifthen;
comment If-then-else operation to assemble a conditional result

pattern batcalc.ifthen(b:bat[:oid,:bit],v1:any_1):bat[:oid,:any_1] 
address CMDifthen;
comment If-then operation to assemble a conditional result

pattern batcalc.int_noerror(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from str to int with candidates list

pattern batcalc.int_noerror(b:bat[:oid,:str]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from str to int

pattern batcalc.int(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from str to int with candidates list, signal error on overflow

pattern batcalc.int(b:bat[:oid,:str]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from str to int, signal error on overflow

pattern batcalc.int_noerror(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from oid to int with candidates list

pattern batcalc.int_noerror(b:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from oid to int

pattern batcalc.int(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from oid to int with candidates list, signal error on overflow

pattern batcalc.int(b:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from oid to int, signal error on overflow

pattern batcalc.int_noerror(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from dbl to int with candidates list

pattern batcalc.int_noerror(b:bat[:oid,:dbl]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from dbl to int

pattern batcalc.int(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from dbl to int with candidates list, signal error on overflow

pattern batcalc.int(b:bat[:oid,:dbl]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from dbl to int, signal error on overflow

pattern batcalc.int_noerror(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from flt to int with candidates list

pattern batcalc.int_noerror(b:bat[:oid,:flt]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from flt to int

pattern batcalc.int(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from flt to int with candidates list, signal error on overflow

pattern batcalc.int(b:bat[:oid,:flt]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from flt to int, signal error on overflow

pattern batcalc.int_noerror(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from lng to int with candidates list

pattern batcalc.int_noerror(b:bat[:oid,:lng]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from lng to int

pattern batcalc.int(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from lng to int with candidates list, signal error on overflow

pattern batcalc.int(b:bat[:oid,:lng]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from lng to int, signal error on overflow

pattern batcalc.int_noerror(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from wrd to int with candidates list

pattern batcalc.int_noerror(b:bat[:oid,:wrd]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from wrd to int

pattern batcalc.int(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from wrd to int with candidates list, signal error on overflow

pattern batcalc.int(b:bat[:oid,:wrd]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from wrd to int, signal error on overflow

pattern batcalc.int_noerror(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from int to int with candidates list

pattern batcalc.int_noerror(b:bat[:oid,:int]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from int to int

pattern batcalc.int(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from int to int with candidates list, signal error on overflow

pattern batcalc.int(b:bat[:oid,:int]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from int to int, signal error on overflow

pattern batcalc.int_noerror(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from sht to int with candidates list

pattern batcalc.int_noerror(b:bat[:oid,:sht]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from sht to int

pattern batcalc.int(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from sht to int with candidates list, signal error on overflow

pattern batcalc.int(b:bat[:oid,:sht]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from sht to int, signal error on overflow

pattern batcalc.int_noerror(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from bte to int with candidates list

pattern batcalc.int_noerror(b:bat[:oid,:bte]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from bte to int

pattern batcalc.int(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from bte to int with candidates list, signal error on overflow

pattern batcalc.int(b:bat[:oid,:bte]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from bte to int, signal error on overflow

pattern batcalc.int_noerror(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from bit to int with candidates list

pattern batcalc.int_noerror(b:bat[:oid,:bit]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from bit to int

pattern batcalc.int(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from bit to int with candidates list, signal error on overflow

pattern batcalc.int(b:bat[:oid,:bit]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from bit to int, signal error on overflow

pattern batcalc.int_noerror(b:bat[:oid,:void],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from void to int with candidates list

pattern batcalc.int_noerror(b:bat[:oid,:void]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from void to int

pattern batcalc.int(b:bat[:oid,:void],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from void to int with candidates list, signal error on overflow

pattern batcalc.int(b:bat[:oid,:void]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from void to int, signal error on overflow

pattern batcalc.isnil(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat with candidates list

pattern batcalc.isnil(b:bat[:oid,:str]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat

pattern batcalc.isnil(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat with candidates list

pattern batcalc.isnil(b:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat

pattern batcalc.isnil(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat with candidates list

pattern batcalc.isnil(b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat

pattern batcalc.isnil(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat with candidates list

pattern batcalc.isnil(b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat

pattern batcalc.isnil(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat with candidates list

pattern batcalc.isnil(b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat

pattern batcalc.isnil(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat with candidates list

pattern batcalc.isnil(b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat

pattern batcalc.isnil(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat with candidates list

pattern batcalc.isnil(b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat

pattern batcalc.isnil(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat with candidates list

pattern batcalc.isnil(b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat

pattern batcalc.isnil(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat with candidates list

pattern batcalc.isnil(b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat

pattern batcalc.isnil(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat with candidates list

pattern batcalc.isnil(b:bat[:oid,:bit]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat

pattern batcalc.iszero(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISZERO;
comment Unary check for zero over the tail of the bat with candidates list

pattern batcalc.iszero(b:bat[:oid,:dbl]):bat[:oid,:bit] 
address CMDbatISZERO;
comment Unary check for zero over the tail of the bat

pattern batcalc.iszero(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISZERO;
comment Unary check for zero over the tail of the bat with candidates list

pattern batcalc.iszero(b:bat[:oid,:flt]):bat[:oid,:bit] 
address CMDbatISZERO;
comment Unary check for zero over the tail of the bat

pattern batcalc.iszero(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISZERO;
comment Unary check for zero over the tail of the bat with candidates list

pattern batcalc.iszero(b:bat[:oid,:lng]):bat[:oid,:bit] 
address CMDbatISZERO;
comment Unary check for zero over the tail of the bat

pattern batcalc.iszero(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISZERO;
comment Unary check for zero over the tail of the bat with candidates list

pattern batcalc.iszero(b:bat[:oid,:wrd]):bat[:oid,:bit] 
address CMDbatISZERO;
comment Unary check for zero over the tail of the bat

pattern batcalc.iszero(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISZERO;
comment Unary check for zero over the tail of the bat with candidates list

pattern batcalc.iszero(b:bat[:oid,:int]):bat[:oid,:bit] 
address CMDbatISZERO;
comment Unary check for zero over the tail of the bat

pattern batcalc.iszero(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISZERO;
comment Unary check for zero over the tail of the bat with candidates list

pattern batcalc.iszero(b:bat[:oid,:sht]):bat[:oid,:bit] 
address CMDbatISZERO;
comment Unary check for zero over the tail of the bat

pattern batcalc.iszero(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISZERO;
comment Unary check for zero over the tail of the bat with candidates list

pattern batcalc.iszero(b:bat[:oid,:bte]):bat[:oid,:bit] 
address CMDbatISZERO;
comment Unary check for zero over the tail of the bat

pattern batcalc.int_noerror(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from hge to int with candidates list

pattern batcalc.int_noerror(b:bat[:oid,:hge]):bat[:oid,:int] 
address CMDconvert_int;
comment cast from hge to int

pattern batcalc.int(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from hge to int with candidates list, signal error on overflow

pattern batcalc.int(b:bat[:oid,:hge]):bat[:oid,:int] 
address CMDconvertsignal_int;
comment cast from hge to int, signal error on overflow

pattern batcalc.isnil(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat with candidates list

pattern batcalc.isnil(b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat

pattern batcalc.iszero(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISZERO;
comment Unary check for zero over the tail of the bat with candidates list

pattern batcalc.iszero(b:bat[:oid,:hge]):bat[:oid,:bit] 
address CMDbatISZERO;
comment Unary check for zero over the tail of the bat

pattern batcalc.isnil(b:bat[:oid,:timestamp],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat with candidates list

pattern batcalc.isnil(b:bat[:oid,:timestamp]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat

pattern batcalc.isnil(b:bat[:oid,:daytime],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat with candidates list

pattern batcalc.isnil(b:bat[:oid,:daytime]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat

pattern batcalc.isnil(b:bat[:oid,:date],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat with candidates list

pattern batcalc.isnil(b:bat[:oid,:date]):bat[:oid,:bit] 
address CMDbatISNIL;
comment Unary check for nil over the tail of the bat

command batcalc.lng(s1:int,v:bat[:oid,:hge],d2:int,s2:int):bat[:oid,:lng] 
address bathge_dec2dec_lng;
comment cast decimal(hge) to decimal(lng) and check for overflow

command batcalc.lng(s1:int,v:bat[:oid,:hge]):bat[:oid,:lng] 
address bathge_dec2_lng;
comment cast decimal(hge) to lng and check for overflow

command batcalc.lng(v:bat[:oid,:hge],digits:int,scale:int):bat[:oid,:lng] 
address bathge_num2dec_lng;
comment cast number to decimal(lng) and check for overflow

command batcalc.lng(s1:int,v:bat[:oid,:lng],d2:int,s2:int):bat[:oid,:lng] 
address batlng_dec2dec_lng;
comment cast decimal(lng) to decimal(lng) and check for overflow

command batcalc.lng(s1:int,v:bat[:oid,:lng]):bat[:oid,:lng] 
address batlng_dec2_lng;
comment cast decimal(lng) to lng and check for overflow

command batcalc.lng(v:bat[:oid,:lng],digits:int,scale:int):bat[:oid,:lng] 
address batlng_num2dec_lng;
comment cast number to decimal(lng) and check for overflow

command batcalc.lng(s1:int,v:bat[:oid,:wrd],d2:int,s2:int):bat[:oid,:lng] 
address batwrd_dec2dec_lng;
comment cast decimal(wrd) to decimal(lng) and check for overflow

command batcalc.lng(s1:int,v:bat[:oid,:wrd]):bat[:oid,:lng] 
address batwrd_dec2_lng;
comment cast decimal(wrd) to lng and check for overflow

command batcalc.lng(v:bat[:oid,:wrd],digits:int,scale:int):bat[:oid,:lng] 
address batwrd_num2dec_lng;
comment cast number to decimal(lng) and check for overflow

command batcalc.lng(s1:int,v:bat[:oid,:int],d2:int,s2:int):bat[:oid,:lng] 
address batint_dec2dec_lng;
comment cast decimal(int) to decimal(lng) and check for overflow

command batcalc.lng(s1:int,v:bat[:oid,:int]):bat[:oid,:lng] 
address batint_dec2_lng;
comment cast decimal(int) to lng and check for overflow

command batcalc.lng(v:bat[:oid,:int],digits:int,scale:int):bat[:oid,:lng] 
address batint_num2dec_lng;
comment cast number to decimal(lng) and check for overflow

command batcalc.lng(s1:int,v:bat[:oid,:sht],d2:int,s2:int):bat[:oid,:lng] 
address batsht_dec2dec_lng;
comment cast decimal(sht) to decimal(lng) and check for overflow

command batcalc.lng(s1:int,v:bat[:oid,:sht]):bat[:oid,:lng] 
address batsht_dec2_lng;
comment cast decimal(sht) to lng and check for overflow

command batcalc.lng(v:bat[:oid,:sht],digits:int,scale:int):bat[:oid,:lng] 
address batsht_num2dec_lng;
comment cast number to decimal(lng) and check for overflow

command batcalc.lng(s1:int,v:bat[:oid,:bte],d2:int,s2:int):bat[:oid,:lng] 
address batbte_dec2dec_lng;
comment cast decimal(bte) to decimal(lng) and check for overflow

command batcalc.lng(s1:int,v:bat[:oid,:bte]):bat[:oid,:lng] 
address batbte_dec2_lng;
comment cast decimal(bte) to lng and check for overflow

command batcalc.lng(v:bat[:oid,:bte],digits:int,scale:int):bat[:oid,:lng] 
address batbte_num2dec_lng;
comment cast number to decimal(lng) and check for overflow

command batcalc.lng(v:bat[:oid,:dbl],digits:int,scale:int):bat[:oid,:lng] 
address batdbl_num2dec_lng;
comment cast number to decimal(lng) and check for overflow

command batcalc.lng(v:bat[:oid,:flt],digits:int,scale:int):bat[:oid,:lng] 
address batflt_num2dec_lng;
comment cast number to decimal(lng) and check for overflow

command batcalc.lng(v:bat[:oid,:str],digits:int,scale:int):bat[:oid,:lng] 
address batstr_2dec_lng;
comment cast to dec(lng) and check for overflow

command batcalc.lng(v:bat[:oid,:str],digits:int):bat[:oid,:lng] 
address batstr_2num_lng;
comment cast to lng and check for overflow

command batcalc.lng(v:bat[:oid,:void],digits:int,scale:int):bat[:oid,:lng] 
address batnil_2dec_lng;
comment cast to dec(lng) and check for overflow

command batcalc.lng(v:bat[:oid,:void],digits:int):bat[:oid,:lng] 
address batnil_2num_lng;
comment cast to lng and check for overflow

pattern batcalc.lng_noerror(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from str to lng with candidates list

pattern batcalc.lng_noerror(b:bat[:oid,:str]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from str to lng

pattern batcalc.lng(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from str to lng with candidates list, signal error on overflow

pattern batcalc.lng(b:bat[:oid,:str]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from str to lng, signal error on overflow

pattern batcalc.lng_noerror(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from oid to lng with candidates list

pattern batcalc.lng_noerror(b:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from oid to lng

pattern batcalc.lng(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from oid to lng with candidates list, signal error on overflow

pattern batcalc.lng(b:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from oid to lng, signal error on overflow

pattern batcalc.lng_noerror(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from dbl to lng with candidates list

pattern batcalc.lng_noerror(b:bat[:oid,:dbl]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from dbl to lng

pattern batcalc.lng(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from dbl to lng with candidates list, signal error on overflow

pattern batcalc.lng(b:bat[:oid,:dbl]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from dbl to lng, signal error on overflow

pattern batcalc.lng_noerror(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from flt to lng with candidates list

pattern batcalc.lng_noerror(b:bat[:oid,:flt]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from flt to lng

pattern batcalc.lng(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from flt to lng with candidates list, signal error on overflow

pattern batcalc.lng(b:bat[:oid,:flt]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from flt to lng, signal error on overflow

pattern batcalc.lng_noerror(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from lng to lng with candidates list

pattern batcalc.lng_noerror(b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from lng to lng

pattern batcalc.lng(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from lng to lng with candidates list, signal error on overflow

pattern batcalc.lng(b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from lng to lng, signal error on overflow

pattern batcalc.lng_noerror(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from wrd to lng with candidates list

pattern batcalc.lng_noerror(b:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from wrd to lng

pattern batcalc.lng(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from wrd to lng with candidates list, signal error on overflow

pattern batcalc.lng(b:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from wrd to lng, signal error on overflow

pattern batcalc.lng_noerror(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from int to lng with candidates list

pattern batcalc.lng_noerror(b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from int to lng

pattern batcalc.lng(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from int to lng with candidates list, signal error on overflow

pattern batcalc.lng(b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from int to lng, signal error on overflow

pattern batcalc.lng_noerror(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from sht to lng with candidates list

pattern batcalc.lng_noerror(b:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from sht to lng

pattern batcalc.lng(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from sht to lng with candidates list, signal error on overflow

pattern batcalc.lng(b:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from sht to lng, signal error on overflow

pattern batcalc.lng_noerror(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from bte to lng with candidates list

pattern batcalc.lng_noerror(b:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from bte to lng

pattern batcalc.lng(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from bte to lng with candidates list, signal error on overflow

pattern batcalc.lng(b:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from bte to lng, signal error on overflow

pattern batcalc.lng_noerror(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from bit to lng with candidates list

pattern batcalc.lng_noerror(b:bat[:oid,:bit]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from bit to lng

pattern batcalc.lng(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from bit to lng with candidates list, signal error on overflow

pattern batcalc.lng(b:bat[:oid,:bit]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from bit to lng, signal error on overflow

pattern batcalc.lng_noerror(b:bat[:oid,:void],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from void to lng with candidates list

pattern batcalc.lng_noerror(b:bat[:oid,:void]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from void to lng

pattern batcalc.lng(b:bat[:oid,:void],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from void to lng with candidates list, signal error on overflow

pattern batcalc.lng(b:bat[:oid,:void]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from void to lng, signal error on overflow

pattern batcalc.lsh_noerror(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:lng,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:lng],v:lng):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:lng,b:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:lng],v:wrd):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:lng,b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:lng],v:int):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:lng,b:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:lng],v:sht):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:lng,b:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:lng],v:bte):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:wrd,b:bat[:oid,:lng]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:wrd],v:lng):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:wrd],v:wrd):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:wrd],v:int):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:wrd,b:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:wrd],v:sht):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:wrd,b:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:wrd],v:bte):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:int,b:bat[:oid,:lng]):bat[:oid,:int] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:int],v:lng):bat[:oid,:int] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:int] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:int,b:bat[:oid,:wrd]):bat[:oid,:int] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:int],v:wrd):bat[:oid,:int] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd]):bat[:oid,:int] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:int,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:int],v:int):bat[:oid,:int] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:int,b:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:int],v:sht):bat[:oid,:int] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:int,b:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:int],v:bte):bat[:oid,:int] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:sht,b:bat[:oid,:lng]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:sht],v:lng):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:sht,b:bat[:oid,:wrd]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:sht],v:wrd):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:sht,b:bat[:oid,:int]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:sht],v:int):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:sht,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:sht],v:sht):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:sht,b:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:sht],v:bte):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:bte,b:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:bte],v:lng):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:bte,b:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:bte],v:wrd):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:bte,b:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:bte],v:int):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:bte,b:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:bte],v:sht):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:bte,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:bte],v:bte):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lng_noerror(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from hge to lng with candidates list

pattern batcalc.lng_noerror(b:bat[:oid,:hge]):bat[:oid,:lng] 
address CMDconvert_lng;
comment cast from hge to lng

pattern batcalc.lng(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from hge to lng with candidates list, signal error on overflow

pattern batcalc.lng(b:bat[:oid,:hge]):bat[:oid,:lng] 
address CMDconvertsignal_lng;
comment cast from hge to lng, signal error on overflow

pattern batcalc.lsh_noerror(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:hge,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:hge],v:hge):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:hge,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:hge,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:hge],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:hge],v:lng):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:hge,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:hge,b:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:hge],v:wrd,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:hge],v:wrd):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:hge,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:hge,b:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:hge],v:int,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:hge],v:int):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:hge,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:hge,b:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:hge],v:sht,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:hge],v:sht):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:hge,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:hge,b:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:hge],v:bte,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:hge],v:bte):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:lng,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:lng,b:bat[:oid,:hge]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:lng],v:hge,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:lng],v:hge):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:hge]):bat[:oid,:lng] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:wrd,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:wrd,b:bat[:oid,:hge]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:wrd],v:hge,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:wrd],v:hge):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:hge]):bat[:oid,:wrd] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:int,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:int,b:bat[:oid,:hge]):bat[:oid,:int] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:int],v:hge,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:int],v:hge):bat[:oid,:int] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:hge]):bat[:oid,:int] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:sht,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:sht,b:bat[:oid,:hge]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:sht],v:hge,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:sht],v:hge):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:hge]):bat[:oid,:sht] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:bte,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return V << B with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(v:bte,b:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return V << B, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:bte],v:hge,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B << V with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b:bat[:oid,:bte],v:hge):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B << V, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B1 << B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.lsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatLSH;
comment Return B1 << B2, out of range second operand causes NIL value

function batcalc.mark_grp{inline}(b:bat[:oid,:any_1]):bat[:oid,:int];
function batcalc.mark_grp{inline}(b:bat[:oid,:any_1],ord:bat[:oid,:oid],orig:bat[:oid,:any_2]):bat[:oid,:int];
function batcalc.mark_grp{inline}(b:bat[:oid,:any_1],ord:bat[:oid,:oid],grp:bat[:oid,:oid],ext:bat[:oid,:oid]):bat[:oid,:int];
pattern batcalc.mod_noerror(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:dbl],v:dbl):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:dbl,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:dbl],v:flt):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:dbl,b:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:dbl],v:lng):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:dbl,b:bat[:oid,:wrd]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:dbl],v:wrd):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:dbl,b:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:dbl],v:int):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:dbl,b:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:dbl],v:sht):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:dbl,b:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:dbl],v:bte):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:flt,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:flt],v:dbl):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:flt,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:flt],v:flt):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:flt,b:bat[:oid,:lng]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:flt],v:lng):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:lng]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:flt,b:bat[:oid,:wrd]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:flt],v:wrd):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:flt,b:bat[:oid,:int]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:flt],v:int):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:int]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:flt,b:bat[:oid,:sht]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:flt],v:sht):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:sht]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:flt,b:bat[:oid,:bte]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:flt],v:bte):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:bte]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:lng,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:lng],v:dbl):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:lng,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:lng],v:flt):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:lng,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:lng],v:lng):bat[:oid,:lng] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:lng,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:lng],v:wrd):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:lng,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:lng],v:int):bat[:oid,:int] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:lng,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:lng],v:sht):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:lng,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:lng],v:bte):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:wrd,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:wrd],v:dbl):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:wrd,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:wrd],v:flt):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:wrd,b:bat[:oid,:lng]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:wrd],v:lng):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:wrd],v:wrd):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:wrd,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:wrd],v:int):bat[:oid,:int] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:wrd,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:wrd],v:sht):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:wrd,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:wrd],v:bte):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:int,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:int],v:dbl):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:int,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:int],v:flt):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:int,b:bat[:oid,:lng]):bat[:oid,:int] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:int],v:lng):bat[:oid,:int] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:int] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:int,b:bat[:oid,:wrd]):bat[:oid,:int] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:int],v:wrd):bat[:oid,:int] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd]):bat[:oid,:int] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:int,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:int],v:int):bat[:oid,:int] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:int,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:int],v:sht):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:int,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:int],v:bte):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:sht,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:sht],v:dbl):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:sht,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:sht],v:flt):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:sht,b:bat[:oid,:lng]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:sht],v:lng):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:sht,b:bat[:oid,:wrd]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:sht],v:wrd):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:sht,b:bat[:oid,:int]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:sht],v:int):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:sht,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:sht],v:sht):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:sht,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:sht],v:bte):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:bte,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:bte],v:dbl):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:bte,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:bte],v:flt):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:bte,b:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:bte],v:lng):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:bte,b:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:bte],v:wrd):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:bte,b:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:bte],v:int):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:bte,b:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:bte],v:sht):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:bte,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:bte],v:bte):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mul_noerror(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:dbl],v:dbl):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:dbl,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:dbl],v:flt):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:dbl,b:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:dbl],v:lng):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:dbl,b:bat[:oid,:wrd]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:dbl],v:wrd):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:dbl,b:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:dbl],v:int):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:dbl,b:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:dbl],v:sht):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:dbl,b:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:dbl],v:bte):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:flt,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:flt],v:dbl):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:flt,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:flt],v:flt):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:flt,b:bat[:oid,:lng]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:flt],v:lng):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:lng]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:flt,b:bat[:oid,:wrd]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:flt],v:wrd):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:flt,b:bat[:oid,:int]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:flt],v:int):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:int]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:flt,b:bat[:oid,:sht]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:flt],v:sht):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:sht]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:flt,b:bat[:oid,:bte]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:flt],v:bte):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:bte]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:lng,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:lng],v:dbl):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:lng,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:lng],v:flt):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:lng,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:lng],v:lng):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:lng,b:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:lng],v:wrd):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:lng,b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:lng],v:int):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:lng,b:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:lng],v:sht):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:lng,b:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:lng],v:bte):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:wrd,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:wrd],v:dbl):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:wrd,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:wrd],v:flt):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:wrd,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:wrd],v:lng):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:wrd],v:wrd):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:wrd],v:int):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:wrd,b:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:wrd],v:sht):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:wrd,b:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:wrd],v:bte):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:int,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:int],v:dbl):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:int,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:int],v:flt):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:int,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:int],v:lng):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:int,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:int],v:wrd):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:int,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:int],v:int):bat[:oid,:int] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:int,b:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:int],v:sht):bat[:oid,:int] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:int,b:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:int],v:bte):bat[:oid,:int] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:sht,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:sht],v:dbl):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:sht,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:sht],v:flt):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:sht,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:sht],v:lng):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:sht,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:sht],v:wrd):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:sht,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:sht],v:int):bat[:oid,:int] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:sht,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:sht],v:sht):bat[:oid,:sht] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:sht,b:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:sht],v:bte):bat[:oid,:sht] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:bte,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:bte],v:dbl):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:bte,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:bte],v:flt):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:bte,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:bte],v:lng):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:bte,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:bte],v:wrd):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:bte,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:bte],v:int):bat[:oid,:int] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:bte,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:bte],v:sht):bat[:oid,:sht] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:bte,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:bte],v:bte):bat[:oid,:bte] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mod_noerror(v:dbl,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:dbl,b:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:dbl],v:hge,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:dbl],v:hge):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:flt,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:flt,b:bat[:oid,:hge]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:flt],v:hge,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:flt],v:hge):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:hge]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:hge,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:hge,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:hge],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:hge],v:dbl):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:hge,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:hge,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:hge],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:hge],v:flt):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:hge,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:hge],v:hge):bat[:oid,:hge] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:hge,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:hge,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:hge],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:hge],v:lng):bat[:oid,:lng] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:hge,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:hge,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:hge],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:hge],v:wrd):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:hge,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:hge,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:hge],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:hge],v:int):bat[:oid,:int] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:hge,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:hge,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:hge],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:hge],v:sht):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:hge,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:hge,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:hge],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:hge],v:bte):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:lng,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:lng,b:bat[:oid,:hge]):bat[:oid,:lng] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:lng],v:hge,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:lng],v:hge):bat[:oid,:lng] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:hge]):bat[:oid,:lng] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:wrd,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:wrd,b:bat[:oid,:hge]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:wrd],v:hge,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:wrd],v:hge):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:hge]):bat[:oid,:wrd] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:int,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:int,b:bat[:oid,:hge]):bat[:oid,:int] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:int],v:hge,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:int],v:hge):bat[:oid,:int] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:int],b2:bat[:oid,:hge]):bat[:oid,:int] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:sht,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:sht,b:bat[:oid,:hge]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:sht],v:hge,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:sht],v:hge):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:hge]):bat[:oid,:sht] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:bte,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return V % B with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(v:bte,b:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return V % B, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:bte],v:hge,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B % V with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b:bat[:oid,:bte],v:hge):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B % V, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B1 % B2 with candidates list, divide by zero causes NIL value

pattern batcalc.mod_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatMOD;
comment Return B1 % B2, divide by zero causes NIL value

pattern batcalc.mul_noerror(v:dbl,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:dbl,b:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:dbl],v:hge,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:dbl],v:hge):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:flt,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:flt,b:bat[:oid,:hge]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:flt],v:hge,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:flt],v:hge):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:hge]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:hge,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:hge,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:hge],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:hge],v:dbl):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:hge,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:hge,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:hge],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:hge],v:flt):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:hge,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:hge],v:hge):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:hge,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:hge,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:hge],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:hge],v:lng):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:hge,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:hge,b:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:hge],v:wrd,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:hge],v:wrd):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:hge,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:hge,b:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:hge],v:int,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:hge],v:int):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:hge,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:hge,b:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:hge],v:sht,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:hge],v:sht):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:hge,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:hge,b:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:hge],v:bte,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:hge],v:bte):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:lng,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:lng,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:lng],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:lng],v:hge):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:wrd,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:wrd,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:wrd],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:wrd],v:hge):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:int,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:int,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:int],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:int],v:hge):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:int],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:sht,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:sht,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:sht],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:sht],v:hge):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.mul_noerror(v:bte,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return V * B with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(v:bte,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return V * B, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:bte],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B * V with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b:bat[:oid,:bte],v:hge):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B * V, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B1 * B2 with candidates list, overflow causes NIL value

pattern batcalc.mul_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatMUL;
comment Return B1 * B2, overflow causes NIL value

pattern batcalc.not(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatNOT;
comment Unary bitwise not over the tail of the bat with candidates list

pattern batcalc.not(b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatNOT;
comment Unary bitwise not over the tail of the bat

pattern batcalc.not(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatNOT;
comment Unary bitwise not over the tail of the bat with candidates list

pattern batcalc.not(b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatNOT;
comment Unary bitwise not over the tail of the bat

pattern batcalc.not(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatNOT;
comment Unary bitwise not over the tail of the bat with candidates list

pattern batcalc.not(b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatNOT;
comment Unary bitwise not over the tail of the bat

pattern batcalc.not(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatNOT;
comment Unary bitwise not over the tail of the bat with candidates list

pattern batcalc.not(b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatNOT;
comment Unary bitwise not over the tail of the bat

pattern batcalc.not(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatNOT;
comment Unary bitwise not over the tail of the bat with candidates list

pattern batcalc.not(b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatNOT;
comment Unary bitwise not over the tail of the bat

pattern batcalc.not(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatNOT;
comment Return the Boolean inverse with candidates list

pattern batcalc.not(b:bat[:oid,:bit]):bat[:oid,:bit] 
address CMDbatNOT;
comment Return the Boolean inverse

pattern batcalc.not(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatNOT;
comment Unary bitwise not over the tail of the bat with candidates list

pattern batcalc.not(b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatNOT;
comment Unary bitwise not over the tail of the bat

pattern batcalc.oid_noerror(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from str to oid with candidates list

pattern batcalc.oid_noerror(b:bat[:oid,:str]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from str to oid

pattern batcalc.oid(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from str to oid with candidates list, signal error on overflow

pattern batcalc.oid(b:bat[:oid,:str]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from str to oid, signal error on overflow

pattern batcalc.oid_noerror(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from oid to oid with candidates list

pattern batcalc.oid_noerror(b:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from oid to oid

pattern batcalc.oid(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from oid to oid with candidates list, signal error on overflow

pattern batcalc.oid(b:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from oid to oid, signal error on overflow

pattern batcalc.oid_noerror(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from dbl to oid with candidates list

pattern batcalc.oid_noerror(b:bat[:oid,:dbl]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from dbl to oid

pattern batcalc.oid(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from dbl to oid with candidates list, signal error on overflow

pattern batcalc.oid(b:bat[:oid,:dbl]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from dbl to oid, signal error on overflow

pattern batcalc.oid_noerror(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from flt to oid with candidates list

pattern batcalc.oid_noerror(b:bat[:oid,:flt]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from flt to oid

pattern batcalc.oid(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from flt to oid with candidates list, signal error on overflow

pattern batcalc.oid(b:bat[:oid,:flt]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from flt to oid, signal error on overflow

pattern batcalc.oid_noerror(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from lng to oid with candidates list

pattern batcalc.oid_noerror(b:bat[:oid,:lng]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from lng to oid

pattern batcalc.oid(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from lng to oid with candidates list, signal error on overflow

pattern batcalc.oid(b:bat[:oid,:lng]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from lng to oid, signal error on overflow

pattern batcalc.oid_noerror(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from wrd to oid with candidates list

pattern batcalc.oid_noerror(b:bat[:oid,:wrd]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from wrd to oid

pattern batcalc.oid(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from wrd to oid with candidates list, signal error on overflow

pattern batcalc.oid(b:bat[:oid,:wrd]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from wrd to oid, signal error on overflow

pattern batcalc.oid_noerror(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from int to oid with candidates list

pattern batcalc.oid_noerror(b:bat[:oid,:int]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from int to oid

pattern batcalc.oid(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from int to oid with candidates list, signal error on overflow

pattern batcalc.oid(b:bat[:oid,:int]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from int to oid, signal error on overflow

pattern batcalc.oid_noerror(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from sht to oid with candidates list

pattern batcalc.oid_noerror(b:bat[:oid,:sht]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from sht to oid

pattern batcalc.oid(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from sht to oid with candidates list, signal error on overflow

pattern batcalc.oid(b:bat[:oid,:sht]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from sht to oid, signal error on overflow

pattern batcalc.oid_noerror(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from bte to oid with candidates list

pattern batcalc.oid_noerror(b:bat[:oid,:bte]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from bte to oid

pattern batcalc.oid(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from bte to oid with candidates list, signal error on overflow

pattern batcalc.oid(b:bat[:oid,:bte]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from bte to oid, signal error on overflow

pattern batcalc.oid_noerror(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from bit to oid with candidates list

pattern batcalc.oid_noerror(b:bat[:oid,:bit]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from bit to oid

pattern batcalc.oid(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from bit to oid with candidates list, signal error on overflow

pattern batcalc.oid(b:bat[:oid,:bit]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from bit to oid, signal error on overflow

pattern batcalc.oid_noerror(b:bat[:oid,:void],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from void to oid with candidates list

pattern batcalc.oid_noerror(b:bat[:oid,:void]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from void to oid

pattern batcalc.oid(b:bat[:oid,:void],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from void to oid with candidates list, signal error on overflow

pattern batcalc.oid(b:bat[:oid,:void]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from void to oid, signal error on overflow

pattern batcalc.or(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatOR;
comment Return V OR B with candidates list

pattern batcalc.or(v:lng,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatOR;
comment Return V OR B

pattern batcalc.or(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatOR;
comment Return B OR V with candidates list

pattern batcalc.or(b:bat[:oid,:lng],v:lng):bat[:oid,:lng] 
address CMDbatOR;
comment Return B OR V

pattern batcalc.or(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatOR;
comment Return B1 OR B2 with candidates list

pattern batcalc.or(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatOR;
comment Return B1 OR B2

pattern batcalc.or(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatOR;
comment Return V OR B with candidates list

pattern batcalc.or(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatOR;
comment Return V OR B

pattern batcalc.or(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatOR;
comment Return B OR V with candidates list

pattern batcalc.or(b:bat[:oid,:wrd],v:wrd):bat[:oid,:wrd] 
address CMDbatOR;
comment Return B OR V

pattern batcalc.or(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatOR;
comment Return B1 OR B2 with candidates list

pattern batcalc.or(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatOR;
comment Return B1 OR B2

pattern batcalc.or(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatOR;
comment Return V OR B with candidates list

pattern batcalc.or(v:int,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatOR;
comment Return V OR B

pattern batcalc.or(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatOR;
comment Return B OR V with candidates list

pattern batcalc.or(b:bat[:oid,:int],v:int):bat[:oid,:int] 
address CMDbatOR;
comment Return B OR V

pattern batcalc.or(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatOR;
comment Return B1 OR B2 with candidates list

pattern batcalc.or(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatOR;
comment Return B1 OR B2

pattern batcalc.or(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatOR;
comment Return V OR B with candidates list

pattern batcalc.or(v:sht,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatOR;
comment Return V OR B

pattern batcalc.or(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatOR;
comment Return B OR V with candidates list

pattern batcalc.or(b:bat[:oid,:sht],v:sht):bat[:oid,:sht] 
address CMDbatOR;
comment Return B OR V

pattern batcalc.or(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatOR;
comment Return B1 OR B2 with candidates list

pattern batcalc.or(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatOR;
comment Return B1 OR B2

pattern batcalc.or(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatOR;
comment Return V OR B with candidates list

pattern batcalc.or(v:bte,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatOR;
comment Return V OR B

pattern batcalc.or(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatOR;
comment Return B OR V with candidates list

pattern batcalc.or(b:bat[:oid,:bte],v:bte):bat[:oid,:bte] 
address CMDbatOR;
comment Return B OR V

pattern batcalc.or(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatOR;
comment Return B1 OR B2 with candidates list

pattern batcalc.or(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatOR;
comment Return B1 OR B2

pattern batcalc.or(v:bit,b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatOR;
comment Return V OR B with candidates list

pattern batcalc.or(v:bit,b:bat[:oid,:bit]):bat[:oid,:bit] 
address CMDbatOR;
comment Return V OR B

pattern batcalc.or(b:bat[:oid,:bit],v:bit,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatOR;
comment Return B OR V with candidates list

pattern batcalc.or(b:bat[:oid,:bit],v:bit):bat[:oid,:bit] 
address CMDbatOR;
comment Return B OR V

pattern batcalc.or(b1:bat[:oid,:bit],b2:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatOR;
comment Return B1 OR B2 with candidates list

pattern batcalc.or(b1:bat[:oid,:bit],b2:bat[:oid,:bit]):bat[:oid,:bit] 
address CMDbatOR;
comment Return B1 OR B2

pattern batcalc.oid_noerror(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from hge to oid with candidates list

pattern batcalc.oid_noerror(b:bat[:oid,:hge]):bat[:oid,:oid] 
address CMDconvert_oid;
comment cast from hge to oid

pattern batcalc.oid(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from hge to oid with candidates list, signal error on overflow

pattern batcalc.oid(b:bat[:oid,:hge]):bat[:oid,:oid] 
address CMDconvertsignal_oid;
comment cast from hge to oid, signal error on overflow

pattern batcalc.or(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatOR;
comment Return V OR B with candidates list

pattern batcalc.or(v:hge,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatOR;
comment Return V OR B

pattern batcalc.or(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatOR;
comment Return B OR V with candidates list

pattern batcalc.or(b:bat[:oid,:hge],v:hge):bat[:oid,:hge] 
address CMDbatOR;
comment Return B OR V

pattern batcalc.or(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatOR;
comment Return B1 OR B2 with candidates list

pattern batcalc.or(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatOR;
comment Return B1 OR B2

function batcalc.rank_grp{inline}(b:bat[:oid,:any_1]):bat[:oid,:int];
function batcalc.rank_grp{inline}(b:bat[:oid,:any_1],ord:bat[:oid,:oid],orig:bat[:oid,:any_2]):bat[:oid,:int];
function batcalc.rank_grp{inline}(b:bat[:oid,:any_1],ord:bat[:oid,:oid],grp:bat[:oid,:oid],ext:bat[:oid,:oid]):bat[:oid,:int];
command batcalc.rotate_xor_hash(h:bat[:oid,:wrd],nbits:int,b:bat[:oid,:any_1]):bat[:oid,:int] 
address MKEYbulk_rotate_xor_hash;
pattern batcalc.rsh_noerror(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:lng,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:lng],v:lng):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:lng,b:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:lng],v:wrd):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:lng,b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:lng],v:int):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:lng,b:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:lng],v:sht):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:lng,b:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:lng],v:bte):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:wrd,b:bat[:oid,:lng]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:wrd],v:lng):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:wrd],v:wrd):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:wrd],v:int):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:wrd,b:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:wrd],v:sht):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:wrd,b:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:wrd],v:bte):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:int,b:bat[:oid,:lng]):bat[:oid,:int] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:int],v:lng):bat[:oid,:int] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:int] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:int,b:bat[:oid,:wrd]):bat[:oid,:int] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:int],v:wrd):bat[:oid,:int] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd]):bat[:oid,:int] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:int,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:int],v:int):bat[:oid,:int] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:int,b:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:int],v:sht):bat[:oid,:int] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:int,b:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:int],v:bte):bat[:oid,:int] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:sht,b:bat[:oid,:lng]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:sht],v:lng):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:sht,b:bat[:oid,:wrd]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:sht],v:wrd):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:sht,b:bat[:oid,:int]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:sht],v:int):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:sht,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:sht],v:sht):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:sht,b:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:sht],v:bte):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:bte,b:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:bte],v:lng):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:bte,b:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:bte],v:wrd):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:bte,b:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:bte],v:int):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:bte,b:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:bte],v:sht):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:bte,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:bte],v:bte):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:hge,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:hge],v:hge):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:hge,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:hge,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:hge],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:hge],v:lng):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:hge,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:hge,b:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:hge],v:wrd,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:hge],v:wrd):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:hge,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:hge,b:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:hge],v:int,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:hge],v:int):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:hge,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:hge,b:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:hge],v:sht,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:hge],v:sht):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:hge,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:hge,b:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:hge],v:bte,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:hge],v:bte):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:lng,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:lng,b:bat[:oid,:hge]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:lng],v:hge,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:lng],v:hge):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:hge]):bat[:oid,:lng] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:wrd,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:wrd,b:bat[:oid,:hge]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:wrd],v:hge,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:wrd],v:hge):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:hge]):bat[:oid,:wrd] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:int,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:int,b:bat[:oid,:hge]):bat[:oid,:int] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:int],v:hge,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:int],v:hge):bat[:oid,:int] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:int],b2:bat[:oid,:hge]):bat[:oid,:int] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:sht,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:sht,b:bat[:oid,:hge]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:sht],v:hge,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:sht],v:hge):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:hge]):bat[:oid,:sht] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:bte,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return V >> B with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(v:bte,b:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return V >> B, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:bte],v:hge,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B >> V with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b:bat[:oid,:bte],v:hge):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B >> V, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B1 >> B2 with candidates list, out of range second operand causes NIL value

pattern batcalc.rsh_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatRSH;
comment Return B1 >> B2, out of range second operand causes NIL value

command batcalc.sht(s1:int,v:bat[:oid,:hge],d2:int,s2:int):bat[:oid,:sht] 
address bathge_dec2dec_sht;
comment cast decimal(hge) to decimal(sht) and check for overflow

command batcalc.sht(s1:int,v:bat[:oid,:hge]):bat[:oid,:sht] 
address bathge_dec2_sht;
comment cast decimal(hge) to sht and check for overflow

command batcalc.sht(v:bat[:oid,:hge],digits:int,scale:int):bat[:oid,:sht] 
address bathge_num2dec_sht;
comment cast number to decimal(sht) and check for overflow

command batcalc.sht(s1:int,v:bat[:oid,:lng],d2:int,s2:int):bat[:oid,:sht] 
address batlng_dec2dec_sht;
comment cast decimal(lng) to decimal(sht) and check for overflow

command batcalc.sht(s1:int,v:bat[:oid,:lng]):bat[:oid,:sht] 
address batlng_dec2_sht;
comment cast decimal(lng) to sht and check for overflow

command batcalc.sht(v:bat[:oid,:lng],digits:int,scale:int):bat[:oid,:sht] 
address batlng_num2dec_sht;
comment cast number to decimal(sht) and check for overflow

command batcalc.sht(s1:int,v:bat[:oid,:wrd],d2:int,s2:int):bat[:oid,:sht] 
address batwrd_dec2dec_sht;
comment cast decimal(wrd) to decimal(sht) and check for overflow

command batcalc.sht(s1:int,v:bat[:oid,:wrd]):bat[:oid,:sht] 
address batwrd_dec2_sht;
comment cast decimal(wrd) to sht and check for overflow

command batcalc.sht(v:bat[:oid,:wrd],digits:int,scale:int):bat[:oid,:sht] 
address batwrd_num2dec_sht;
comment cast number to decimal(sht) and check for overflow

command batcalc.sht(s1:int,v:bat[:oid,:int],d2:int,s2:int):bat[:oid,:sht] 
address batint_dec2dec_sht;
comment cast decimal(int) to decimal(sht) and check for overflow

command batcalc.sht(s1:int,v:bat[:oid,:int]):bat[:oid,:sht] 
address batint_dec2_sht;
comment cast decimal(int) to sht and check for overflow

command batcalc.sht(v:bat[:oid,:int],digits:int,scale:int):bat[:oid,:sht] 
address batint_num2dec_sht;
comment cast number to decimal(sht) and check for overflow

command batcalc.sht(s1:int,v:bat[:oid,:sht],d2:int,s2:int):bat[:oid,:sht] 
address batsht_dec2dec_sht;
comment cast decimal(sht) to decimal(sht) and check for overflow

command batcalc.sht(s1:int,v:bat[:oid,:sht]):bat[:oid,:sht] 
address batsht_dec2_sht;
comment cast decimal(sht) to sht and check for overflow

command batcalc.sht(v:bat[:oid,:sht],digits:int,scale:int):bat[:oid,:sht] 
address batsht_num2dec_sht;
comment cast number to decimal(sht) and check for overflow

command batcalc.sht(s1:int,v:bat[:oid,:bte],d2:int,s2:int):bat[:oid,:sht] 
address batbte_dec2dec_sht;
comment cast decimal(bte) to decimal(sht) and check for overflow

command batcalc.sht(s1:int,v:bat[:oid,:bte]):bat[:oid,:sht] 
address batbte_dec2_sht;
comment cast decimal(bte) to sht and check for overflow

command batcalc.sht(v:bat[:oid,:bte],digits:int,scale:int):bat[:oid,:sht] 
address batbte_num2dec_sht;
comment cast number to decimal(sht) and check for overflow

command batcalc.sht(v:bat[:oid,:dbl],digits:int,scale:int):bat[:oid,:sht] 
address batdbl_num2dec_sht;
comment cast number to decimal(sht) and check for overflow

command batcalc.sht(v:bat[:oid,:flt],digits:int,scale:int):bat[:oid,:sht] 
address batflt_num2dec_sht;
comment cast number to decimal(sht) and check for overflow

command batcalc.strings(v:bat[:oid,:str]):bat[:oid,:str] 
address BATSTRstrings;
comment Return the strings

pattern batcalc.str(eclass:int,d1:int,s1:int,has_tz:int,v:bat[:oid,:any_1],digits:int):bat[:oid,:str] 
address SQLbatstr_cast;
comment cast to string and check for overflow

command batcalc.sqlblob(v:bat[:oid,:str]):bat[:oid,:sqlblob] 
address batstr_2_sqlblob;
comment cast to sqlblob

command batcalc.sht(v:bat[:oid,:str],digits:int,scale:int):bat[:oid,:sht] 
address batstr_2dec_sht;
comment cast to dec(sht) and check for overflow

command batcalc.sht(v:bat[:oid,:str],digits:int):bat[:oid,:sht] 
address batstr_2num_sht;
comment cast to sht and check for overflow

command batcalc.sht(v:bat[:oid,:void],digits:int,scale:int):bat[:oid,:sht] 
address batnil_2dec_sht;
comment cast to dec(sht) and check for overflow

command batcalc.sht(v:bat[:oid,:void],digits:int):bat[:oid,:sht] 
address batnil_2num_sht;
comment cast to sht and check for overflow

pattern batcalc.str_noerror(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from str to str with candidates list

pattern batcalc.str_noerror(b:bat[:oid,:str]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from str to str

pattern batcalc.str(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from str to str with candidates list, signal error on overflow

pattern batcalc.str(b:bat[:oid,:str]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from str to str, signal error on overflow

pattern batcalc.str_noerror(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from oid to str with candidates list

pattern batcalc.str_noerror(b:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from oid to str

pattern batcalc.str(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from oid to str with candidates list, signal error on overflow

pattern batcalc.str(b:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from oid to str, signal error on overflow

pattern batcalc.str_noerror(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from dbl to str with candidates list

pattern batcalc.str_noerror(b:bat[:oid,:dbl]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from dbl to str

pattern batcalc.str(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from dbl to str with candidates list, signal error on overflow

pattern batcalc.str(b:bat[:oid,:dbl]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from dbl to str, signal error on overflow

pattern batcalc.str_noerror(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from flt to str with candidates list

pattern batcalc.str_noerror(b:bat[:oid,:flt]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from flt to str

pattern batcalc.str(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from flt to str with candidates list, signal error on overflow

pattern batcalc.str(b:bat[:oid,:flt]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from flt to str, signal error on overflow

pattern batcalc.str_noerror(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from lng to str with candidates list

pattern batcalc.str_noerror(b:bat[:oid,:lng]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from lng to str

pattern batcalc.str(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from lng to str with candidates list, signal error on overflow

pattern batcalc.str(b:bat[:oid,:lng]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from lng to str, signal error on overflow

pattern batcalc.str_noerror(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from wrd to str with candidates list

pattern batcalc.str_noerror(b:bat[:oid,:wrd]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from wrd to str

pattern batcalc.str(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from wrd to str with candidates list, signal error on overflow

pattern batcalc.str(b:bat[:oid,:wrd]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from wrd to str, signal error on overflow

pattern batcalc.str_noerror(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from int to str with candidates list

pattern batcalc.str_noerror(b:bat[:oid,:int]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from int to str

pattern batcalc.str(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from int to str with candidates list, signal error on overflow

pattern batcalc.str(b:bat[:oid,:int]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from int to str, signal error on overflow

pattern batcalc.str_noerror(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from sht to str with candidates list

pattern batcalc.str_noerror(b:bat[:oid,:sht]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from sht to str

pattern batcalc.str(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from sht to str with candidates list, signal error on overflow

pattern batcalc.str(b:bat[:oid,:sht]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from sht to str, signal error on overflow

pattern batcalc.str_noerror(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from bte to str with candidates list

pattern batcalc.str_noerror(b:bat[:oid,:bte]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from bte to str

pattern batcalc.str(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from bte to str with candidates list, signal error on overflow

pattern batcalc.str(b:bat[:oid,:bte]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from bte to str, signal error on overflow

pattern batcalc.str_noerror(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from bit to str with candidates list

pattern batcalc.str_noerror(b:bat[:oid,:bit]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from bit to str

pattern batcalc.str(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from bit to str with candidates list, signal error on overflow

pattern batcalc.str(b:bat[:oid,:bit]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from bit to str, signal error on overflow

pattern batcalc.str_noerror(b:bat[:oid,:void],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from void to str with candidates list

pattern batcalc.str_noerror(b:bat[:oid,:void]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from void to str

pattern batcalc.str(b:bat[:oid,:void],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from void to str with candidates list, signal error on overflow

pattern batcalc.str(b:bat[:oid,:void]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from void to str, signal error on overflow

pattern batcalc.sht_noerror(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from str to sht with candidates list

pattern batcalc.sht_noerror(b:bat[:oid,:str]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from str to sht

pattern batcalc.sht(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from str to sht with candidates list, signal error on overflow

pattern batcalc.sht(b:bat[:oid,:str]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from str to sht, signal error on overflow

pattern batcalc.sht_noerror(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from oid to sht with candidates list

pattern batcalc.sht_noerror(b:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from oid to sht

pattern batcalc.sht(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from oid to sht with candidates list, signal error on overflow

pattern batcalc.sht(b:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from oid to sht, signal error on overflow

pattern batcalc.sht_noerror(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from dbl to sht with candidates list

pattern batcalc.sht_noerror(b:bat[:oid,:dbl]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from dbl to sht

pattern batcalc.sht(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from dbl to sht with candidates list, signal error on overflow

pattern batcalc.sht(b:bat[:oid,:dbl]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from dbl to sht, signal error on overflow

pattern batcalc.sht_noerror(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from flt to sht with candidates list

pattern batcalc.sht_noerror(b:bat[:oid,:flt]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from flt to sht

pattern batcalc.sht(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from flt to sht with candidates list, signal error on overflow

pattern batcalc.sht(b:bat[:oid,:flt]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from flt to sht, signal error on overflow

pattern batcalc.sht_noerror(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from lng to sht with candidates list

pattern batcalc.sht_noerror(b:bat[:oid,:lng]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from lng to sht

pattern batcalc.sht(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from lng to sht with candidates list, signal error on overflow

pattern batcalc.sht(b:bat[:oid,:lng]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from lng to sht, signal error on overflow

pattern batcalc.sht_noerror(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from wrd to sht with candidates list

pattern batcalc.sht_noerror(b:bat[:oid,:wrd]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from wrd to sht

pattern batcalc.sht(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from wrd to sht with candidates list, signal error on overflow

pattern batcalc.sht(b:bat[:oid,:wrd]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from wrd to sht, signal error on overflow

pattern batcalc.sht_noerror(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from int to sht with candidates list

pattern batcalc.sht_noerror(b:bat[:oid,:int]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from int to sht

pattern batcalc.sht(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from int to sht with candidates list, signal error on overflow

pattern batcalc.sht(b:bat[:oid,:int]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from int to sht, signal error on overflow

pattern batcalc.sht_noerror(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from sht to sht with candidates list

pattern batcalc.sht_noerror(b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from sht to sht

pattern batcalc.sht(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from sht to sht with candidates list, signal error on overflow

pattern batcalc.sht(b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from sht to sht, signal error on overflow

pattern batcalc.sht_noerror(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from bte to sht with candidates list

pattern batcalc.sht_noerror(b:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from bte to sht

pattern batcalc.sht(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from bte to sht with candidates list, signal error on overflow

pattern batcalc.sht(b:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from bte to sht, signal error on overflow

pattern batcalc.sht_noerror(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from bit to sht with candidates list

pattern batcalc.sht_noerror(b:bat[:oid,:bit]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from bit to sht

pattern batcalc.sht(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from bit to sht with candidates list, signal error on overflow

pattern batcalc.sht(b:bat[:oid,:bit]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from bit to sht, signal error on overflow

pattern batcalc.sht_noerror(b:bat[:oid,:void],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from void to sht with candidates list

pattern batcalc.sht_noerror(b:bat[:oid,:void]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from void to sht

pattern batcalc.sht(b:bat[:oid,:void],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from void to sht with candidates list, signal error on overflow

pattern batcalc.sht(b:bat[:oid,:void]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from void to sht, signal error on overflow

pattern batcalc.sub_noerror(v:dbl,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:dbl],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:dbl],v:dbl):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:dbl,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:dbl,b:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:dbl],v:flt,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:dbl],v:flt):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:flt]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:dbl,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:dbl,b:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:dbl],v:lng,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:dbl],v:lng):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:lng]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:dbl,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:dbl,b:bat[:oid,:wrd]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:dbl],v:wrd,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:dbl],v:wrd):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:wrd]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:dbl,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:dbl,b:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:dbl],v:int,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:dbl],v:int):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:int]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:dbl,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:dbl,b:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:dbl],v:sht,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:dbl],v:sht):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:sht]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:dbl,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:dbl,b:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:dbl],v:bte,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:dbl],v:bte):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:bte]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:flt,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:flt,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:flt],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:flt],v:dbl):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:flt,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:flt,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:flt],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:flt],v:flt):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:flt,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:flt,b:bat[:oid,:lng]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:flt],v:lng,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:flt],v:lng):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:lng]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:flt,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:flt,b:bat[:oid,:wrd]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:flt],v:wrd,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:flt],v:wrd):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:wrd]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:flt,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:flt,b:bat[:oid,:int]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:flt],v:int,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:flt],v:int):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:int]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:flt,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:flt,b:bat[:oid,:sht]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:flt],v:sht,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:flt],v:sht):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:sht]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:flt,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:flt,b:bat[:oid,:bte]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:flt],v:bte,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:flt],v:bte):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:bte]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:lng,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:lng,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:lng],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:lng],v:dbl):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:lng,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:lng,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:lng],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:lng],v:flt):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:lng,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:lng],v:lng):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:lng,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:lng,b:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:lng],v:wrd,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:lng],v:wrd):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:wrd]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:lng,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:lng,b:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:lng],v:int,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:lng],v:int):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:int]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:lng,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:lng,b:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:lng],v:sht,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:lng],v:sht):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:sht]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:lng,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:lng,b:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:lng],v:bte,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:lng],v:bte):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:bte]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:wrd,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:wrd,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:wrd],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:wrd],v:dbl):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:wrd,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:wrd,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:wrd],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:wrd],v:flt):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:wrd,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:wrd,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:wrd],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:wrd],v:lng):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:wrd],v:wrd):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:wrd,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:wrd],v:int,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:wrd],v:int):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:wrd,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:wrd,b:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:wrd],v:sht,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:wrd],v:sht):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:wrd,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:wrd,b:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:wrd],v:bte,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:wrd],v:bte):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:int,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:int,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:int],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:int],v:dbl):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:int,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:int,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:int],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:int],v:flt):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:int,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:int,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:int],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:int],v:lng):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:int,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:int,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:int],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:int],v:wrd):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:int,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:int],v:int):bat[:oid,:int] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:int,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:int,b:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:int],v:sht,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:int],v:sht):bat[:oid,:int] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:sht]):bat[:oid,:int] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:int,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:int,b:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:int],v:bte,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:int],v:bte):bat[:oid,:int] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:bte]):bat[:oid,:int] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:sht,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:sht,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:sht],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:sht],v:dbl):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:sht,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:sht,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:sht],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:sht],v:flt):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:sht,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:sht,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:sht],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:sht],v:lng):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:sht,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:sht,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:sht],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:sht],v:wrd):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:sht,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:sht,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:sht],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:sht],v:int):bat[:oid,:int] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:sht,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:sht],v:sht):bat[:oid,:sht] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:sht,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:sht,b:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:sht],v:bte,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:sht],v:bte):bat[:oid,:sht] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:bte]):bat[:oid,:sht] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:bte,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:bte,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:bte],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:bte],v:dbl):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:bte,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:bte,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:bte],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:bte],v:flt):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:bte,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:bte,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:bte],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:bte],v:lng):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:bte,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:bte,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:bte],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:bte],v:wrd):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:bte,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:bte,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:bte],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:bte],v:int):bat[:oid,:int] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:bte,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:bte,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:bte],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:bte],v:sht):bat[:oid,:sht] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:bte,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:bte],v:bte):bat[:oid,:bte] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sign(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatSIGN;
comment Unary sign (-1,0,1) over the tail of the bat with candidates list

pattern batcalc.sign(b:bat[:oid,:dbl]):bat[:oid,:bte] 
address CMDbatSIGN;
comment Unary sign (-1,0,1) over the tail of the bat

pattern batcalc.sign(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatSIGN;
comment Unary sign (-1,0,1) over the tail of the bat with candidates list

pattern batcalc.sign(b:bat[:oid,:flt]):bat[:oid,:bte] 
address CMDbatSIGN;
comment Unary sign (-1,0,1) over the tail of the bat

pattern batcalc.sign(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatSIGN;
comment Unary sign (-1,0,1) over the tail of the bat with candidates list

pattern batcalc.sign(b:bat[:oid,:lng]):bat[:oid,:bte] 
address CMDbatSIGN;
comment Unary sign (-1,0,1) over the tail of the bat

pattern batcalc.sign(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatSIGN;
comment Unary sign (-1,0,1) over the tail of the bat with candidates list

pattern batcalc.sign(b:bat[:oid,:wrd]):bat[:oid,:bte] 
address CMDbatSIGN;
comment Unary sign (-1,0,1) over the tail of the bat

pattern batcalc.sign(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatSIGN;
comment Unary sign (-1,0,1) over the tail of the bat with candidates list

pattern batcalc.sign(b:bat[:oid,:int]):bat[:oid,:bte] 
address CMDbatSIGN;
comment Unary sign (-1,0,1) over the tail of the bat

pattern batcalc.sign(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatSIGN;
comment Unary sign (-1,0,1) over the tail of the bat with candidates list

pattern batcalc.sign(b:bat[:oid,:sht]):bat[:oid,:bte] 
address CMDbatSIGN;
comment Unary sign (-1,0,1) over the tail of the bat

pattern batcalc.sign(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatSIGN;
comment Unary sign (-1,0,1) over the tail of the bat with candidates list

pattern batcalc.sign(b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatSIGN;
comment Unary sign (-1,0,1) over the tail of the bat

pattern batcalc.str_noerror(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from hge to str with candidates list

pattern batcalc.str_noerror(b:bat[:oid,:hge]):bat[:oid,:str] 
address CMDconvert_str;
comment cast from hge to str

pattern batcalc.str(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from hge to str with candidates list, signal error on overflow

pattern batcalc.str(b:bat[:oid,:hge]):bat[:oid,:str] 
address CMDconvertsignal_str;
comment cast from hge to str, signal error on overflow

pattern batcalc.sht_noerror(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from hge to sht with candidates list

pattern batcalc.sht_noerror(b:bat[:oid,:hge]):bat[:oid,:sht] 
address CMDconvert_sht;
comment cast from hge to sht

pattern batcalc.sht(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from hge to sht with candidates list, signal error on overflow

pattern batcalc.sht(b:bat[:oid,:hge]):bat[:oid,:sht] 
address CMDconvertsignal_sht;
comment cast from hge to sht, signal error on overflow

pattern batcalc.sub_noerror(v:dbl,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:dbl,b:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:dbl],v:hge,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:dbl],v:hge):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:dbl],b2:bat[:oid,:hge]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:flt,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:flt,b:bat[:oid,:hge]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:flt],v:hge,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:flt],v:hge):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:flt],b2:bat[:oid,:hge]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:hge,b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:hge,b:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:hge],v:dbl,s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:hge],v:dbl):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:dbl]):bat[:oid,:dbl] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:hge,b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:hge,b:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:hge],v:flt,s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:hge],v:flt):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:flt]):bat[:oid,:flt] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:hge,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:hge],v:hge):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:hge,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:hge,b:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:hge],v:lng,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:hge],v:lng):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:lng]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:hge,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:hge,b:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:hge],v:wrd,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:hge],v:wrd):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:wrd]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:hge,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:hge,b:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:hge],v:int,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:hge],v:int):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:int]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:hge,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:hge,b:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:hge],v:sht,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:hge],v:sht):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:sht]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:hge,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:hge,b:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:hge],v:bte,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:hge],v:bte):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:hge],b2:bat[:oid,:bte]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:lng,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:lng,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:lng],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:lng],v:hge):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:lng],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:wrd,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:wrd,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:wrd],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:wrd],v:hge):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:wrd],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:int,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:int,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:int],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:int],v:hge):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:int],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:sht,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:sht,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:sht],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:sht],v:hge):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:sht],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sub_noerror(v:bte,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return V - B with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(v:bte,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return V - B, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:bte],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B - V with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b:bat[:oid,:bte],v:hge):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B - V, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B1 - B2 with candidates list, overflow causes NIL value

pattern batcalc.sub_noerror(b1:bat[:oid,:bte],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatSUB;
comment Return B1 - B2, overflow causes NIL value

pattern batcalc.sign(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatSIGN;
comment Unary sign (-1,0,1) over the tail of the bat with candidates list

pattern batcalc.sign(b:bat[:oid,:hge]):bat[:oid,:bte] 
address CMDbatSIGN;
comment Unary sign (-1,0,1) over the tail of the bat

command batcalc.timestamp(v:bat[:oid,:timestamp],digits:int):bat[:oid,:timestamp] 
address battimestamp_2time_timestamp;
comment cast timestamp to timestamp and check for overflow

command batcalc.timestamp(v:bat[:oid,:str],digits:int):bat[:oid,:timestamp] 
address batstr_2time_timestamp;
comment cast to timestamp and check for overflow

command batcalc.timestamp(v:bat[:oid,:str]):bat[:oid,:timestamp] 
address batstr_2_timestamp;
comment Cast to timestamp

command batcalc.timestamp(v:bat[:oid,:void],digits:int):bat[:oid,:timestamp] 
address batnil_2time_timestamp;
comment cast to timestamp and check for overflow

command batcalc.timestamp(v:bat[:oid,:void]):bat[:oid,:timestamp] 
address batnil_2_timestamp;
comment Cast to timestamp

command batcalc.timestamp(msecs:bat[:oid,:lng]):bat[:oid,:timestamp] 
address MTIMEtimestamp_lng_bulk;
command batcalc.timestamp(secs:bat[:oid,:int]):bat[:oid,:timestamp] 
address MTIMEtimestamp_bulk;
command batcalc.timestamp(d:bat[:oid,:date]):bat[:oid,:timestamp] 
address MTIMEtimestamp_create_from_date_bulk;
command batcalc.wrd(s1:int,v:bat[:oid,:hge],d2:int,s2:int):bat[:oid,:wrd] 
address bathge_dec2dec_wrd;
comment cast decimal(hge) to decimal(wrd) and check for overflow

command batcalc.wrd(s1:int,v:bat[:oid,:hge]):bat[:oid,:wrd] 
address bathge_dec2_wrd;
comment cast decimal(hge) to wrd and check for overflow

command batcalc.wrd(v:bat[:oid,:hge],digits:int,scale:int):bat[:oid,:wrd] 
address bathge_num2dec_wrd;
comment cast number to decimal(wrd) and check for overflow

command batcalc.wrd(s1:int,v:bat[:oid,:lng],d2:int,s2:int):bat[:oid,:wrd] 
address batlng_dec2dec_wrd;
comment cast decimal(lng) to decimal(wrd) and check for overflow

command batcalc.wrd(s1:int,v:bat[:oid,:lng]):bat[:oid,:wrd] 
address batlng_dec2_wrd;
comment cast decimal(lng) to wrd and check for overflow

command batcalc.wrd(v:bat[:oid,:lng],digits:int,scale:int):bat[:oid,:wrd] 
address batlng_num2dec_wrd;
comment cast number to decimal(wrd) and check for overflow

command batcalc.wrd(s1:int,v:bat[:oid,:wrd],d2:int,s2:int):bat[:oid,:wrd] 
address batwrd_dec2dec_wrd;
comment cast decimal(wrd) to decimal(wrd) and check for overflow

command batcalc.wrd(s1:int,v:bat[:oid,:wrd]):bat[:oid,:wrd] 
address batwrd_dec2_wrd;
comment cast decimal(wrd) to wrd and check for overflow

command batcalc.wrd(v:bat[:oid,:wrd],digits:int,scale:int):bat[:oid,:wrd] 
address batwrd_num2dec_wrd;
comment cast number to decimal(wrd) and check for overflow

command batcalc.wrd(s1:int,v:bat[:oid,:int],d2:int,s2:int):bat[:oid,:wrd] 
address batint_dec2dec_wrd;
comment cast decimal(int) to decimal(wrd) and check for overflow

command batcalc.wrd(s1:int,v:bat[:oid,:int]):bat[:oid,:wrd] 
address batint_dec2_wrd;
comment cast decimal(int) to wrd and check for overflow

command batcalc.wrd(v:bat[:oid,:int],digits:int,scale:int):bat[:oid,:wrd] 
address batint_num2dec_wrd;
comment cast number to decimal(wrd) and check for overflow

command batcalc.wrd(s1:int,v:bat[:oid,:sht],d2:int,s2:int):bat[:oid,:wrd] 
address batsht_dec2dec_wrd;
comment cast decimal(sht) to decimal(wrd) and check for overflow

command batcalc.wrd(s1:int,v:bat[:oid,:sht]):bat[:oid,:wrd] 
address batsht_dec2_wrd;
comment cast decimal(sht) to wrd and check for overflow

command batcalc.wrd(v:bat[:oid,:sht],digits:int,scale:int):bat[:oid,:wrd] 
address batsht_num2dec_wrd;
comment cast number to decimal(wrd) and check for overflow

command batcalc.wrd(s1:int,v:bat[:oid,:bte],d2:int,s2:int):bat[:oid,:wrd] 
address batbte_dec2dec_wrd;
comment cast decimal(bte) to decimal(wrd) and check for overflow

command batcalc.wrd(s1:int,v:bat[:oid,:bte]):bat[:oid,:wrd] 
address batbte_dec2_wrd;
comment cast decimal(bte) to wrd and check for overflow

command batcalc.wrd(v:bat[:oid,:bte],digits:int,scale:int):bat[:oid,:wrd] 
address batbte_num2dec_wrd;
comment cast number to decimal(wrd) and check for overflow

command batcalc.wrd(v:bat[:oid,:dbl],digits:int,scale:int):bat[:oid,:wrd] 
address batdbl_num2dec_wrd;
comment cast number to decimal(wrd) and check for overflow

command batcalc.wrd(v:bat[:oid,:flt],digits:int,scale:int):bat[:oid,:wrd] 
address batflt_num2dec_wrd;
comment cast number to decimal(wrd) and check for overflow

pattern batcalc.wrd_noerror(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from str to wrd with candidates list

pattern batcalc.wrd_noerror(b:bat[:oid,:str]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from str to wrd

pattern batcalc.wrd(b:bat[:oid,:str],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from str to wrd with candidates list, signal error on overflow

pattern batcalc.wrd(b:bat[:oid,:str]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from str to wrd, signal error on overflow

pattern batcalc.wrd_noerror(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from oid to wrd with candidates list

pattern batcalc.wrd_noerror(b:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from oid to wrd

pattern batcalc.wrd(b:bat[:oid,:oid],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from oid to wrd with candidates list, signal error on overflow

pattern batcalc.wrd(b:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from oid to wrd, signal error on overflow

pattern batcalc.wrd_noerror(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from dbl to wrd with candidates list

pattern batcalc.wrd_noerror(b:bat[:oid,:dbl]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from dbl to wrd

pattern batcalc.wrd(b:bat[:oid,:dbl],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from dbl to wrd with candidates list, signal error on overflow

pattern batcalc.wrd(b:bat[:oid,:dbl]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from dbl to wrd, signal error on overflow

pattern batcalc.wrd_noerror(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from flt to wrd with candidates list

pattern batcalc.wrd_noerror(b:bat[:oid,:flt]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from flt to wrd

pattern batcalc.wrd(b:bat[:oid,:flt],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from flt to wrd with candidates list, signal error on overflow

pattern batcalc.wrd(b:bat[:oid,:flt]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from flt to wrd, signal error on overflow

pattern batcalc.wrd_noerror(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from lng to wrd with candidates list

pattern batcalc.wrd_noerror(b:bat[:oid,:lng]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from lng to wrd

pattern batcalc.wrd(b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from lng to wrd with candidates list, signal error on overflow

pattern batcalc.wrd(b:bat[:oid,:lng]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from lng to wrd, signal error on overflow

pattern batcalc.wrd_noerror(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from wrd to wrd with candidates list

pattern batcalc.wrd_noerror(b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from wrd to wrd

pattern batcalc.wrd(b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from wrd to wrd with candidates list, signal error on overflow

pattern batcalc.wrd(b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from wrd to wrd, signal error on overflow

pattern batcalc.wrd_noerror(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from int to wrd with candidates list

pattern batcalc.wrd_noerror(b:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from int to wrd

pattern batcalc.wrd(b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from int to wrd with candidates list, signal error on overflow

pattern batcalc.wrd(b:bat[:oid,:int]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from int to wrd, signal error on overflow

pattern batcalc.wrd_noerror(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from sht to wrd with candidates list

pattern batcalc.wrd_noerror(b:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from sht to wrd

pattern batcalc.wrd(b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from sht to wrd with candidates list, signal error on overflow

pattern batcalc.wrd(b:bat[:oid,:sht]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from sht to wrd, signal error on overflow

pattern batcalc.wrd_noerror(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from bte to wrd with candidates list

pattern batcalc.wrd_noerror(b:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from bte to wrd

pattern batcalc.wrd(b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from bte to wrd with candidates list, signal error on overflow

pattern batcalc.wrd(b:bat[:oid,:bte]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from bte to wrd, signal error on overflow

pattern batcalc.wrd_noerror(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from bit to wrd with candidates list

pattern batcalc.wrd_noerror(b:bat[:oid,:bit]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from bit to wrd

pattern batcalc.wrd(b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from bit to wrd with candidates list, signal error on overflow

pattern batcalc.wrd(b:bat[:oid,:bit]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from bit to wrd, signal error on overflow

pattern batcalc.wrd_noerror(b:bat[:oid,:void],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from void to wrd with candidates list

pattern batcalc.wrd_noerror(b:bat[:oid,:void]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from void to wrd

pattern batcalc.wrd(b:bat[:oid,:void],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from void to wrd with candidates list, signal error on overflow

pattern batcalc.wrd(b:bat[:oid,:void]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from void to wrd, signal error on overflow

pattern batcalc.wrd_noerror(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from hge to wrd with candidates list

pattern batcalc.wrd_noerror(b:bat[:oid,:hge]):bat[:oid,:wrd] 
address CMDconvert_wrd;
comment cast from hge to wrd

pattern batcalc.wrd(b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from hge to wrd with candidates list, signal error on overflow

pattern batcalc.wrd(b:bat[:oid,:hge]):bat[:oid,:wrd] 
address CMDconvertsignal_wrd;
comment cast from hge to wrd, signal error on overflow

pattern batcalc.xor(v:lng,b:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatXOR;
comment Return V XOR B with candidates list

pattern batcalc.xor(v:lng,b:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatXOR;
comment Return V XOR B

pattern batcalc.xor(b:bat[:oid,:lng],v:lng,s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatXOR;
comment Return B XOR V with candidates list

pattern batcalc.xor(b:bat[:oid,:lng],v:lng):bat[:oid,:lng] 
address CMDbatXOR;
comment Return B XOR V

pattern batcalc.xor(b1:bat[:oid,:lng],b2:bat[:oid,:lng],s:bat[:oid,:oid]):bat[:oid,:lng] 
address CMDbatXOR;
comment Return B1 XOR B2 with candidates list

pattern batcalc.xor(b1:bat[:oid,:lng],b2:bat[:oid,:lng]):bat[:oid,:lng] 
address CMDbatXOR;
comment Return B1 XOR B2

pattern batcalc.xor(v:wrd,b:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatXOR;
comment Return V XOR B with candidates list

pattern batcalc.xor(v:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatXOR;
comment Return V XOR B

pattern batcalc.xor(b:bat[:oid,:wrd],v:wrd,s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatXOR;
comment Return B XOR V with candidates list

pattern batcalc.xor(b:bat[:oid,:wrd],v:wrd):bat[:oid,:wrd] 
address CMDbatXOR;
comment Return B XOR V

pattern batcalc.xor(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd],s:bat[:oid,:oid]):bat[:oid,:wrd] 
address CMDbatXOR;
comment Return B1 XOR B2 with candidates list

pattern batcalc.xor(b1:bat[:oid,:wrd],b2:bat[:oid,:wrd]):bat[:oid,:wrd] 
address CMDbatXOR;
comment Return B1 XOR B2

pattern batcalc.xor(v:int,b:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatXOR;
comment Return V XOR B with candidates list

pattern batcalc.xor(v:int,b:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatXOR;
comment Return V XOR B

pattern batcalc.xor(b:bat[:oid,:int],v:int,s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatXOR;
comment Return B XOR V with candidates list

pattern batcalc.xor(b:bat[:oid,:int],v:int):bat[:oid,:int] 
address CMDbatXOR;
comment Return B XOR V

pattern batcalc.xor(b1:bat[:oid,:int],b2:bat[:oid,:int],s:bat[:oid,:oid]):bat[:oid,:int] 
address CMDbatXOR;
comment Return B1 XOR B2 with candidates list

pattern batcalc.xor(b1:bat[:oid,:int],b2:bat[:oid,:int]):bat[:oid,:int] 
address CMDbatXOR;
comment Return B1 XOR B2

pattern batcalc.xor(v:sht,b:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatXOR;
comment Return V XOR B with candidates list

pattern batcalc.xor(v:sht,b:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatXOR;
comment Return V XOR B

pattern batcalc.xor(b:bat[:oid,:sht],v:sht,s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatXOR;
comment Return B XOR V with candidates list

pattern batcalc.xor(b:bat[:oid,:sht],v:sht):bat[:oid,:sht] 
address CMDbatXOR;
comment Return B XOR V

pattern batcalc.xor(b1:bat[:oid,:sht],b2:bat[:oid,:sht],s:bat[:oid,:oid]):bat[:oid,:sht] 
address CMDbatXOR;
comment Return B1 XOR B2 with candidates list

pattern batcalc.xor(b1:bat[:oid,:sht],b2:bat[:oid,:sht]):bat[:oid,:sht] 
address CMDbatXOR;
comment Return B1 XOR B2

pattern batcalc.xor(v:bte,b:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatXOR;
comment Return V XOR B with candidates list

pattern batcalc.xor(v:bte,b:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatXOR;
comment Return V XOR B

pattern batcalc.xor(b:bat[:oid,:bte],v:bte,s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatXOR;
comment Return B XOR V with candidates list

pattern batcalc.xor(b:bat[:oid,:bte],v:bte):bat[:oid,:bte] 
address CMDbatXOR;
comment Return B XOR V

pattern batcalc.xor(b1:bat[:oid,:bte],b2:bat[:oid,:bte],s:bat[:oid,:oid]):bat[:oid,:bte] 
address CMDbatXOR;
comment Return B1 XOR B2 with candidates list

pattern batcalc.xor(b1:bat[:oid,:bte],b2:bat[:oid,:bte]):bat[:oid,:bte] 
address CMDbatXOR;
comment Return B1 XOR B2

pattern batcalc.xor(v:bit,b:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatXOR;
comment Return V XOR B with candidates list

pattern batcalc.xor(v:bit,b:bat[:oid,:bit]):bat[:oid,:bit] 
address CMDbatXOR;
comment Return V XOR B

pattern batcalc.xor(b:bat[:oid,:bit],v:bit,s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatXOR;
comment Return B XOR V with candidates list

pattern batcalc.xor(b:bat[:oid,:bit],v:bit):bat[:oid,:bit] 
address CMDbatXOR;
comment Return B XOR V

pattern batcalc.xor(b1:bat[:oid,:bit],b2:bat[:oid,:bit],s:bat[:oid,:oid]):bat[:oid,:bit] 
address CMDbatXOR;
comment Return B1 XOR B2 with candidates list

pattern batcalc.xor(b1:bat[:oid,:bit],b2:bat[:oid,:bit]):bat[:oid,:bit] 
address CMDbatXOR;
comment Return B1 XOR B2

pattern batcalc.xor(v:hge,b:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatXOR;
comment Return V XOR B with candidates list

pattern batcalc.xor(v:hge,b:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatXOR;
comment Return V XOR B

pattern batcalc.xor(b:bat[:oid,:hge],v:hge,s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatXOR;
comment Return B XOR V with candidates list

pattern batcalc.xor(b:bat[:oid,:hge],v:hge):bat[:oid,:hge] 
address CMDbatXOR;
comment Return B XOR V

pattern batcalc.xor(b1:bat[:oid,:hge],b2:bat[:oid,:hge],s:bat[:oid,:oid]):bat[:oid,:hge] 
address CMDbatXOR;
comment Return B1 XOR B2 with candidates list

pattern batcalc.xor(b1:bat[:oid,:hge],b2:bat[:oid,:hge]):bat[:oid,:hge] 
address CMDbatXOR;
comment Return B1 XOR B2

command batcalc.xml(src:bat[:oid,:str]):bat[:oid,:xml] 
address BATXMLstr2xml;
command batmtime.diff(b1:bat[:oid,:timestamp],b2:bat[:oid,:timestamp]):bat[:oid,:lng] 
address MTIMEtimestamp_diff_bulk;
comment Difference of two sets of timestamp.

command batmtime.diff(b1:bat[:oid,:date],b2:bat[:oid,:date]):bat[:oid,:int] 
address MTIMEdate_diff_bulk;
comment Difference of two sets of date.

command batmtime.day(d:bat[:oid,:date]):bat[:oid,:int] 
address MTIMEdate_extract_day_bulk;
command batmtime.hours(d:bat[:oid,:daytime]):bat[:oid,:int] 
address MTIMEdaytime_extract_hours_bulk;
command batmtime.milliseconds(d:bat[:oid,:daytime]):bat[:oid,:int] 
address MTIMEdaytime_extract_milliseconds_bulk;
command batmtime.minutes(d:bat[:oid,:daytime]):bat[:oid,:int] 
address MTIMEdaytime_extract_minutes_bulk;
command batmtime.month(d:bat[:oid,:date]):bat[:oid,:int] 
address MTIMEdate_extract_month_bulk;
command batmtime.sql_seconds(d:bat[:oid,:daytime]):bat[:oid,:int] 
address MTIMEdaytime_extract_sql_seconds_bulk;
command batmtime.seconds(d:bat[:oid,:daytime]):bat[:oid,:int] 
address MTIMEdaytime_extract_seconds_bulk;
command batmtime.year(d:bat[:oid,:date]):bat[:oid,:int] 
address MTIMEdate_extract_year_bulk;
command bat.append(i:bat[:any_1,:any_2],u:any_2,force:bit):bat[:any_1,:any_2] 
address BKCappend_val_force_wrap;
comment append the value u to i

command bat.append(i:bat[:any_1,:void],u:any_1):bat[:any_1,:void] 
address BKCappend_reverse_val_wrap;
comment append the value u to i

command bat.append(i:bat[:void,:any_1],u:any_1):bat[:void,:any_1] 
address BKCappend_val_wrap;
comment append the value u to i

command bat.append(i:bat[:oid,:any_1],u:any_1):bat[:oid,:any_1] 
address BKCappend_val_wrap;
comment append the value u to i

command bat.append(i:bat[:any_1,:any_2],u:bat[:any_1,:any_2],force:bit):bat[:any_1,:any_2] 
address BKCappend_force_wrap;
comment append the content of u to i

command bat.append(i:bat[:any_1,:any_2],u:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address BKCappend_wrap;
comment append the content of u to i

command bat.attach(tt:int,heapfile:str):bat[:void,:any_1] 
address BKCattach;
comment Returns a new BAT with dense head and tail of the given type and uses        the given file to initialize the tail. The file will be owned by the        server.

command bat.delete(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address BKCdelete_bat_bun;
comment Delete from the first BAT all BUNs with a corresponding BUN         in the second.

command bat.deleteHead(b:bat[:any_1,:any_2],src:bat[:any_1,:any]):void 
address BKCdelete_bat;
comment Delete from the first BAT all BUNs with a corresponding head          in the second.

command bat.delete(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address BKCdelete_all;
comment Delete all BUNs in a BAT.

command bat.delete(b:bat[:any_1,:any_2],h:any_1):bat[:any_1,:any_2] 
address BKCdelete;
comment Delete all BUNs with a certain head value.

command bat.delete(b:bat[:any_1,:any_2],h:any_1,t:any_2):bat[:any_1,:any_2] 
address BKCdelete_bun;
comment Delete one specific BUN.

command bat.densebat(size:wrd):bat[:void,:void] 
address BKCdensebat;
comment Creates a new [void,void] BAT of size 'size'.

command bat.getHeat(b:bat[:oid,:any_2]):lng 
address BKCheat;
comment Return the current BBP heat (LRU stamp)

command bat.getName(b:bat[:oid,:any_2]):str 
address BKCgetBBPname;
comment Gives back the logical name of a BAT.

command bat.getDelta(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address BKCgetDelta;
comment Obtain the list of BUNs deleted

command bat.getAlpha(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address BKCgetAlpha;
comment Obtain the list of BUNs added

command bat.getSpaceUsed(b:bat[:any_1,:any_2]):lng 
address BKCgetSpaceUsed;
comment Determine the total space (in bytes) occupied by a BAT.

command bat.getStorageSize(b:bat[:any_1,:any_2]):lng 
address BKCgetStorageSize;
comment Determine the total space (in bytes) reserved for a BAT.

command bat.getSequenceBase(b:bat[:oid,:any_1]):oid 
address BKCgetSequenceBase;
comment Get the sequence base for the void column of a BAT.

command bat.getAccess(b:bat[:any_1,:any_2]):str 
address BKCgetAccess;
comment return the access mode attached to this BAT as a character.

command bat.getRole(bid:bat[:oid,:any_2]):str 
address BKCgetRole;
comment Returns the rolename of the head column of a BAT.

command bat.getColumnType(b:bat[:oid,:any_2]):str 
address BKCgetColumnType;
comment Returns the type of the tail column of a BAT, as an integer type number.

command bat.getHeadType(b:bat[:any_1,:any_2]):str 
address BKCgetHeadType;
comment Returns the type of the head column of a BAT, as an integer type number.

command bat.getCapacity(b:bat[:oid,:any_2]):lng 
address BKCgetCapacity;
comment Returns the current allocation size (in max number of elements) of a BAT.

command bat.getDiskSize(b:bat[:oid,:any_2]):lng 
address BKCbatdisksize;
comment Approximate size of the (persistent) BAT heaps as stored on disk in pages of 512 bytes. Indices are not included, as they only live temporarilyin virtual memory.

command bat.getMemorySize(b:bat[:oid,:any_2]):lng 
address BKCbatvmsize;
comment Calculate the size of the BAT heaps and indices in bytesrounded to the memory page size (see bbp.getPageSize()).

command bat.getSize(b:bat[:oid,:any_2]):lng 
address BKCbatsize;
comment Calculate the size of the BAT descriptor, heaps and indices in bytes.

command bat.hasReadMode(b:bat[:any_1,:any_2]):bit 
address BKChasReadMode;
comment return true if to this BAT is read only.

command bat.hasWriteMode(b:bat[:any_1,:any_2]):bit 
address BKChasWriteMode;
comment return true if to this BAT is read and write.

command bat.hasAppendMode(b:bat[:any_1,:any_2]):bit 
address BKChasAppendMode;
comment return true if to this BAT is append only.

command bat.imprintsize(b:bat[:oid,:hge]):lng 
address CMDBATimprintsize;
command bat.imprints(b:bat[:oid,:hge]):void 
address CMDBATimprints;
command bat.imprintsize(b:bat[:oid,:dbl]):lng 
address CMDBATimprintsize;
comment Return the size of the imprints

command bat.imprintsize(b:bat[:oid,:flt]):lng 
address CMDBATimprintsize;
command bat.imprintsize(b:bat[:oid,:lng]):lng 
address CMDBATimprintsize;
command bat.imprintsize(b:bat[:oid,:int]):lng 
address CMDBATimprintsize;
command bat.imprintsize(b:bat[:oid,:sht]):lng 
address CMDBATimprintsize;
command bat.imprintsize(b:bat[:oid,:bte]):lng 
address CMDBATimprintsize;
command bat.imprints(b:bat[:oid,:dbl]):void 
address CMDBATimprints;
comment Check/create an imprint index on the BAT

command bat.imprints(b:bat[:oid,:flt]):void 
address CMDBATimprints;
command bat.imprints(b:bat[:oid,:lng]):void 
address CMDBATimprints;
command bat.imprints(b:bat[:oid,:int]):void 
address CMDBATimprints;
command bat.imprints(b:bat[:oid,:sht]):void 
address CMDBATimprints;
command bat.imprints(b:bat[:oid,:bte]):void 
address CMDBATimprints;
command bat.intersectcand(a:bat[:oid,:oid],b:bat[:oid,:oid]):bat[:oid,:oid] 
address BKCintersectcand;
comment Intersect two candidate lists into one

command bat.isSynced(b1:bat[:oid,:any_2],b2:bat[:oid,:any_4]):bit 
address BKCisSynced;
comment Tests whether two BATs are synced or not. 

command bat.isCached(b:bat[:oid,:any_2]):bit 
address BKCisCached;
comment Bat is stored in main memory.

command bat.isPersistent(b:bat[:oid,:any_2]):bit 
address BKCisPersistent;
command bat.isTransient(b:bat[:oid,:any_2]):bit 
address BKCisTransient;
command bat.inplace(o:bat[:any_1,:any_2],d:bat[:any_1,:any_2],force:bit):bat[:any_1,:any_2] 
address BKCbat_inplace_force;
comment inplace replace values on the given locations

command bat.inplace(o:bat[:any_1,:any_2],id:any_1,t:any_2,force:bit):bat[:any_1,:any_2] 
address BKCbun_inplace_force;
comment inplace replace values on the given locations

command bat.inplace(o:bat[:any_1,:any_2],d:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address BKCbat_inplace;
comment inplace replace values on the given locations

command bat.inplace(o:bat[:any_1,:any_2],id:any_1,t:any_2):bat[:any_1,:any_2] 
address BKCbun_inplace;
comment inplace replace values on the given locations

command bat.insert(b:bat[:any_1,:any_2],h:any_1,t:any_2,force:bit):bat[:any_1,:any_2] 
address BKCinsert_bun_force;
comment Insert one BUN[h,t] in a BAT.

command bat.insert(b:bat[:any_1,:any_2],h:any_1,t:any_2):bat[:any_1,:any_2] 
address BKCinsert_bun;
comment Insert one BUN[h,t] in a BAT.

command bat.insert(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2],force:bit):bat[:any_1,:any_2] 
address BKCinsert_bat_force;
comment Insert all BUNs of the second BAT into the first.

command bat.insert(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address BKCinsert_bat;
comment Insert all BUNs of the second BAT into the first.

command bat.isSortedReverse(b:bat[:any_1,:any_2]):bit 
address BKCisSortedReverse;
comment Returns whether a BAT is ordered on head or not.

command bat.isSorted(b:bat[:any_1,:any_2]):bit 
address BKCisSorted;
comment Returns whether a BAT is ordered on head or not.

command bat.isaKey(b:bat[:any_1,:any_2]):bit 
address BKCgetKey;
comment return whether the head column of a BAT is unique (key).

command bat.info(b:bat[:oid,:any_2]) (X_2:bat[:oid,:str],X_3:bat[:oid,:str]) 
address BKCinfo;
comment Produce a BAT containing info about a BAT in [attribute,value] format.         It contains all properties of the BAT record. See the BAT documentation         in GDK for more information.

command bat.load(name:str):bat[:oid,:any_2] 
address BKCload;
comment Load a particular BAT from disk

command bat.mergecand(a:bat[:oid,:oid],b:bat[:oid,:oid]):bat[:oid,:oid] 
address BKCmergecand;
comment Merge two candidate lists into one

command bat.mirror(b:bat[:any_1,:any_2]):bat[:any_1,:any_1] 
address BKCmirror;
comment Returns the head-mirror image of a BAT (two head columns).

command bat.new(nme:str):bat[:oid,:any_1] 
address CMDBATderivedByName;
comment Localize a bat by name and produce a clone.

pattern bat.new(b:bat[:oid,:any_1],size:lng):bat[:oid,:any_1] 
address CMDBATnewDerived;
pattern bat.new(b:bat[:oid,:any_1]):bat[:oid,:any_1] 
address CMDBATnewDerived;
pattern bat.new_persistent(ht:oid,tt:any_1,size:lng):bat[:oid,:any_1] 
address CMDBATnew_persistent;
comment Creates a new BAT in the persistent farm and allocate space.

pattern bat.new_persistent(ht:oid,tt:any_1,size:int):bat[:oid,:any_1] 
address CMDBATnew_persistent;
comment Creates a new BAT in the persistent farm with sufficient space.

pattern bat.new_persistent(ht:oid,tt:any_1):bat[:oid,:any_1] 
address CMDBATnew_persistent;
comment Creates a new empty transient BAT in the persistent farm, with head- and tail-types as indicated.

pattern bat.new(ht:oid,tt:any_1,size:lng):bat[:oid,:any_1] 
address CMDBATnew;
comment Creates a new BAT and allocate space.

pattern bat.new(ht:oid,tt:any_1,size:int):bat[:oid,:any_1] 
address CMDBATnew;
comment Creates a new BAT with sufficient space.

pattern bat.new(ht:oid,tt:any_1):bat[:oid,:any_1] 
address CMDBATnew;
comment Creates a new empty transient BAT, with head- and tail-types as indicated.

command bat.orderReverse(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address BKCorder_rev;
comment Reverse sorts the BAT itself on the head, in place. 

command bat.order(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address BKCorder;
comment Sorts the BAT itself on the head, in place. 

pattern bat.partition(b:bat[:oid,:any_1],pieces:int,n:int):bat[:oid,:any_1] 
address CMDBATpartition2;
comment Create the n-th slice over the BAT broken into severral pieces.

pattern bat.partition(b:bat[:oid,:any_1]):bat[:oid,:any_1]... 
address CMDBATpartition;
comment Create a serie of slices over the BAT argument. The BUNs are distributed evenly.

command bat.reuseMap(b:bat[:oid,:any_1],del:bat[:oid,:oid]):bat[:oid,:oid] 
address BKCreuseBATmap;
comment Derive the oid mapping for reuse BAT based on list of to-be-deleted

command bat.reuse(b:bat[:oid,:any_1],del:bat[:oid,:oid]):bat[:oid,:any_1] 
address BKCreuseBAT;
comment Shuffle the values around to restore a dense representation of buns.

command bat.replace(b:bat[:any_1,:any_2],h:any_1,t:any_2,force:bit):bat[:any_1,:any_2] 
address BKCreplace_bun_force;
comment Replace the tail value of one BUN that has some head value.

command bat.replace(b:bat[:any_1,:any_2],h:any_1,t:any_2):bat[:any_1,:any_2] 
address BKCreplace_bun;
comment Replace the tail value of one BUN that has some head value.

command bat.replace(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2],force:bit):bat[:any_1,:any_2] 
address BKCreplace_bat_force;
comment Perform replace for all BUNs of the second BAT into the first.

command bat.replace(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address BKCreplace_bat;
comment Perform replace for all BUNs of the second BAT into the first.

command bat.revert(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address BKCrevert;
comment Puts all BUNs in a BAT in reverse order.  (Belongs to the         BAT sequence module)

command bat.reverse(b:bat[:any_1,:any_2]):bat[:any_2,:any_1] 
address BKCreverse;
comment Returns the reverse view of a BAT (head is tail and tail is head).        BEWARE  no copying is involved; input and output refer to the         same object!

command bat.shrinkMap(b:bat[:oid,:any_1],del:bat[:oid,:oid]):bat[:oid,:oid] 
address BKCshrinkBATmap;
comment Derive the oid mapping for shrink BAT based on list of to-be-deleted

command bat.shrink(b:bat[:oid,:any_1],del:bat[:oid,:oid]):bat[:oid,:any_1] 
address BKCshrinkBAT;
comment Shrink the BAT based on a list of entries identified as to-be-deleted

command bat.setHash(b:bat[:oid,:any_2],prop:bit):bit 
address BKCsetHash;
comment Create a hash structure on the column

command bat.setMemoryMap(b:bat[:oid,:any_2],mode:int):bit 
address BKCmmap2;
comment Alias for mmap(b, mode, mode, mode, mode)

command bat.setMemoryMap(b:bat[:oid,:any_2],head_mode:int,tail_mode:int,hheap_mode:int,theap_mode:int):bit 
address BKCmmap;
comment For each individual heap, you can change the allocation mode         to either STORE_MEM or STORE_MMAP. Passing an int(nil) means:        no change.  Changing a dirty STORE_MEM heap into STORE_MMAP, 	will cause a BAT save (this has to happen before the heap can         be mapped into virtual memory). These modes are persistent. 

command bat.setHot(b:bat[:oid,:any_2]):void 
address BKChotBAT;
comment Makes a BAT very hot for the BBP. The chance of being chosen for         swapout is small, afterwards.

command bat.setCold(b:bat[:oid,:any_1]):void 
address BKCcoldBAT;
comment Makes a BAT very cold for the BBP. The chance of being choses         for swapout is big, afterwards.

command bat.save(nme:str):bit 
address BKCsave;
comment Save a BAT to storage, if it was loaded and dirty.          Returns whether IO was necessary.  Please realize that 	calling this function violates the atomic commit protocol!!

command bat.save(nme:bat[:oid,:any_2]):void 
address BKCsave2;
command bat.setPersistent(b:bat[:oid,:any_2]):void 
address BKCsetPersistent;
comment Make the BAT persistent.

command bat.setPersistent(b:bat[:oid,:any_2],f:bit):void 
address BKCpersists;
comment Backward compatibility

command bat.setTransient(b:bat[:oid,:any_2]):void 
address BKCsetTransient;
comment Make the BAT transient.  Returns 	boolean which indicates if theBAT administration has indeed changed.

command bat.setColumn(b:bat[:oid,:any_2],h:str,t:str):void 
address BKCsetColumns;
comment Give both columns of a BAT a new name.

command bat.setColumn(b:bat[:oid,:any_2],t:str):void 
address BKCsetColumn;
comment Give a logical name to the tail column of a BAT.

command bat.setRole(b:bat[:oid,:any_2],h:str,t:str):void 
address BKCsetRole;
comment Give a logical name to the columns of a BAT.

command bat.setName(b:bat[:oid,:any_2],s:str):void 
address BKCsetName;
comment Give a logical name to a BAT. 

command bat.setWriteMode(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address BKCsetWriteMode;
comment Change access privilige of BAT to read and write

command bat.setReadMode(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address BKCsetReadMode;
comment Change access privilige of BAT to read only

command bat.setAppendMode(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] 
address BKCsetAppendMode;
comment Change access privilige of BAT to append only

command bat.setAccess(b:bat[:any_1,:any_2],mode:str):bat[:any_1,:any_2] 
address BKCsetAccess;
comment Try to change the update access priviliges 	to this BAT. Mode:	 r[ead-only]      - allow only read access.	 a[append-only]   - allow reads and update.	 w[riteable]      - allow all operations.	BATs are updatable by default. On making a BAT read-only,         all subsequent updates fail with an error message.Returns         the BAT itself.

command bat.setKey(b:bat[:any_1,:any_2],mode:bit):bat[:any_1,:any_2] 
address BKCsetkey;
comment Sets the 'key' property of the head column to 'mode'. In 'key' mode,         the kernel will silently block insertions that cause a duplicate         entries in the head column. KNOWN BUG:when 'key' is set to TRUE, this 	function does not automatically eliminate duplicates.         Use b := b.kunique;

command bat.unload(name:str):bit 
address BKCunload;
comment Swapout a BAT to disk. Transient BATs can also be swapped out.             Returns whether the unload indeed happened. 

pattern bbp.bind(name:str):bat[:oid,:any_2] 
address CMDbbpbind;
comment Locate the BAT using its logical name

command bbp.getPageSize():int 
address CMDgetPageSize;
comment Obtain the memory page size

command bbp.getDiskSpace():lng 
address CMDbbpDiskSpace;
comment Estimate the amount of disk space occupied by dbpath

command bbp.getLRefCount(b:bat[:oid,:any_1]):int 
address CMDgetBATlrefcnt;
comment Utility for debugging MAL interpreter

command bbp.getRefCount(b:bat[:oid,:any_1]):int 
address CMDgetBATrefcnt;
comment Utility for debugging MAL interpreter

command bbp.getKind():bat[:oid,:str] 
address CMDbbpKind;
comment Create a BAT with the persistency status

command bbp.getStatus():bat[:oid,:str] 
address CMDbbpStatus;
comment Create a BAT with the disk/load status

command bbp.getDirty():bat[:oid,:str] 
address CMDbbpDirty;
comment Create a BAT with the dirty/ diffs/clean status

command bbp.getHeat():bat[:oid,:int] 
address CMDbbpHeat;
comment Create a BAT with the heat values

command bbp.getLocation():bat[:oid,:str] 
address CMDbbpLocation;
comment Create a BAT with their disk locations

command bbp.getLRefCount():bat[:oid,:int] 
address CMDbbpLRefCount;
comment Create a BAT with the logical reference counts

command bbp.getRefCount():bat[:oid,:int] 
address CMDbbpRefCount;
comment Create a BAT with the (hard) reference counts

command bbp.getCount():bat[:oid,:lng] 
address CMDbbpCount;
comment Create a BAT with the cardinalities of all known BATs

command bbp.getName(b:bat[:oid,:any_1]):str 
address CMDbbpName;
comment Map a BAT into its internal name

command bbp.get() (id:bat[:oid,:int],ns:bat[:oid,:str],ht:bat[:oid,:str],tt:bat[:oid,:str],cnt:bat[:oid,:lng],refcnt:bat[:oid,:int],lrefcnt:bat[:oid,:int],location:bat[:oid,:str],heat:bat[:oid,:int],dirty:bat[:oid,:str],status:bat[:oid,:str],kind:bat[:oid,:str]) 
address CMDbbp;
comment bpp

command bbp.getNames():bat[:oid,:str] 
address CMDbbpNames;
comment Map BAT into its bbp name

command bbp.getIndex(b:bat[:oid,:any_2]):int 
address CMDbbpgetIndex;
comment Retrieve the index in the BBP

command blob.blob(s:str):blob 
address BLOBblob_fromstr;
command blob.blob(s:blob):blob 
address BLOBblob_blob;
comment Noop routine.

command blob.#del():void 
address BLOBdel;
command blob.#fromstr():void 
address BLOBfromstr;
command blob.#heap():void 
address BLOBheap;
command blob.#hash():void 
address BLOBhash;
command blob.#length():void 
address BLOBlength;
command blob.nitems(b:blob):int 
address BLOBnitems;
comment  get the number of bytes in this blob.

command blob.#null():void 
address BLOBnull;
command blob.#nequal():void 
address BLOBnequal;
command blob.prelude():void 
address BLOBprelude;
command blob.#put():void 
address BLOBput;
command blob.#read():void 
address BLOBread;
command blob.toblob(v:str):blob 
address BLOBtoblob;
comment store a string as a blob.

command blob.tostring(v:blob,index:int):str 
address BLOBfromidx;
comment get the bytes from blob as a string,	 starting at byte 'index' till the first	0 byte or the end of the blob.

command blob.tostring(v:blob):str 
address BLOBfromblob;
comment get the bytes from blob as a string, till	the first 0 byte or the end of the blob

command blob.#tostr():void 
address BLOBtostr;
command blob.#write():void 
address BLOBwrite;
command bstream.create{unsafe}(s:streams,bufsize:int):bstream 
address bstream_create_wrapwrap;
comment create a buffered stream

command bstream.destroy{unsafe}(s:bstream):void 
address bstream_destroy_wrapwrap;
comment destroy bstream

command bstream.read{unsafe}(s:bstream,size:int):int 
address bstream_read_wrapwrap;
comment read at least size bytes into the buffer of s

pattern calc.!=(v1:dbl,v2:dbl):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:dbl,v2:flt):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:dbl,v2:lng):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:dbl,v2:wrd):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:dbl,v2:int):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:dbl,v2:sht):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:dbl,v2:bte):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:flt,v2:dbl):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:flt,v2:flt):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:flt,v2:lng):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:flt,v2:wrd):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:flt,v2:int):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:flt,v2:sht):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:flt,v2:bte):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:lng,v2:dbl):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:lng,v2:flt):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:lng,v2:lng):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:lng,v2:wrd):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:lng,v2:int):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:lng,v2:sht):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:lng,v2:bte):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:wrd,v2:dbl):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:wrd,v2:flt):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:wrd,v2:lng):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:wrd,v2:wrd):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:wrd,v2:int):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:wrd,v2:sht):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:wrd,v2:bte):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:int,v2:dbl):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:int,v2:flt):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:int,v2:lng):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:int,v2:wrd):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:int,v2:int):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:int,v2:sht):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:int,v2:bte):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:sht,v2:dbl):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:sht,v2:flt):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:sht,v2:lng):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:sht,v2:wrd):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:sht,v2:int):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:sht,v2:sht):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:sht,v2:bte):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:bte,v2:dbl):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:bte,v2:flt):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:bte,v2:lng):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:bte,v2:wrd):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:bte,v2:int):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:bte,v2:sht):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:bte,v2:bte):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:oid,v2:oid):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:str,v2:str):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:bit,v2:bit):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:dbl,v2:hge):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:flt,v2:hge):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:hge,v2:dbl):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:hge,v2:flt):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:hge,v2:hge):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:hge,v2:lng):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:hge,v2:wrd):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:hge,v2:int):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:hge,v2:sht):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:hge,v2:bte):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:lng,v2:hge):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:wrd,v2:hge):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:int,v2:hge):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:sht,v2:hge):bit 
address CMDvarNE;
comment Return V1 != V2

pattern calc.!=(v1:bte,v2:hge):bit 
address CMDvarNE;
comment Return V1 != V2

command calc.!=(v:inet,w:inet):bit 
address INET_comp_NEQ;
comment Inequality of two inets

pattern calc.!=(v:timestamp,w:timestamp):bit 
address CMDvarNE;
comment Equality of two timestamps

pattern calc.!=(v:daytime,w:daytime):bit 
address CMDvarNE;
comment Equality of two daytimes

pattern calc.!=(v:date,w:date):bit 
address CMDvarNE;
comment Equality of two dates

pattern calc.%(v1:dbl,v2:dbl):dbl 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:dbl,v2:flt):dbl 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:dbl,v2:lng):dbl 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:dbl,v2:wrd):dbl 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:dbl,v2:int):dbl 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:dbl,v2:sht):dbl 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:dbl,v2:bte):dbl 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:flt,v2:dbl):dbl 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:flt,v2:flt):flt 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:flt,v2:lng):flt 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:flt,v2:wrd):flt 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:flt,v2:int):flt 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:flt,v2:sht):flt 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:flt,v2:bte):flt 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:lng,v2:dbl):dbl 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:lng,v2:flt):flt 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:lng,v2:lng):lng 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:lng,v2:wrd):wrd 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:lng,v2:int):int 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:lng,v2:sht):sht 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:lng,v2:bte):bte 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:wrd,v2:dbl):dbl 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:wrd,v2:flt):flt 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:wrd,v2:lng):wrd 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:wrd,v2:wrd):wrd 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:wrd,v2:int):int 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:wrd,v2:sht):sht 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:wrd,v2:bte):bte 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:int,v2:dbl):dbl 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:int,v2:flt):flt 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:int,v2:lng):int 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:int,v2:wrd):int 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:int,v2:int):int 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:int,v2:sht):sht 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:int,v2:bte):bte 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:sht,v2:dbl):dbl 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:sht,v2:flt):flt 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:sht,v2:lng):sht 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:sht,v2:wrd):sht 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:sht,v2:int):sht 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:sht,v2:sht):sht 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:sht,v2:bte):bte 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:bte,v2:dbl):dbl 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:bte,v2:flt):flt 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:bte,v2:lng):bte 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:bte,v2:wrd):bte 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:bte,v2:int):bte 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:bte,v2:sht):bte 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:bte,v2:bte):bte 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:dbl,v2:hge):dbl 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:flt,v2:hge):flt 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:hge,v2:dbl):dbl 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:hge,v2:flt):flt 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:hge,v2:hge):hge 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:hge,v2:lng):lng 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:hge,v2:wrd):wrd 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:hge,v2:int):int 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:hge,v2:sht):sht 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:hge,v2:bte):bte 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:lng,v2:hge):lng 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:wrd,v2:hge):wrd 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:int,v2:hge):int 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:sht,v2:hge):sht 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.%(v1:bte,v2:hge):bte 
address CMDvarMODsignal;
comment Return V1 % V2, signal error on divide by zero

pattern calc.*(v1:dbl,v2:dbl):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:dbl,v2:flt):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:dbl,v2:lng):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:dbl,v2:wrd):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:dbl,v2:int):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:dbl,v2:sht):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:dbl,v2:bte):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:flt,v2:dbl):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:flt,v2:flt):flt 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:flt,v2:lng):flt 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:flt,v2:wrd):flt 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:flt,v2:int):flt 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:flt,v2:sht):flt 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:flt,v2:bte):flt 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:lng,v2:dbl):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:lng,v2:flt):flt 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:lng,v2:lng):lng 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:lng,v2:wrd):lng 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:lng,v2:int):lng 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:lng,v2:sht):lng 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:lng,v2:bte):lng 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:wrd,v2:dbl):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:wrd,v2:flt):flt 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:wrd,v2:lng):lng 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:wrd,v2:wrd):wrd 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:wrd,v2:int):wrd 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:wrd,v2:sht):wrd 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:wrd,v2:bte):wrd 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:int,v2:dbl):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:int,v2:flt):flt 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:int,v2:lng):lng 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:int,v2:wrd):wrd 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:int,v2:int):int 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:int,v2:sht):int 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:int,v2:bte):int 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:sht,v2:dbl):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:sht,v2:flt):flt 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:sht,v2:lng):lng 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:sht,v2:wrd):wrd 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:sht,v2:int):int 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:sht,v2:sht):sht 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:sht,v2:bte):sht 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:bte,v2:dbl):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:bte,v2:flt):flt 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:bte,v2:lng):lng 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:bte,v2:wrd):wrd 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:bte,v2:int):int 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:bte,v2:sht):sht 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:bte,v2:bte):bte 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:flt,v2:flt):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:flt,v2:lng):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:flt,v2:wrd):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:flt,v2:int):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:flt,v2:sht):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:flt,v2:bte):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:lng,v2:flt):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:wrd,v2:flt):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:int,v2:flt):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:int,v2:int):lng 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:int,v2:sht):lng 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:int,v2:bte):lng 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:sht,v2:flt):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:sht,v2:int):lng 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:sht,v2:sht):int 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:sht,v2:bte):int 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:bte,v2:flt):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:bte,v2:int):lng 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:bte,v2:sht):int 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:bte,v2:bte):sht 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:dbl,v2:hge):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:flt,v2:hge):flt 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:hge,v2:dbl):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:hge,v2:flt):flt 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:hge,v2:hge):hge 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:hge,v2:lng):hge 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:hge,v2:wrd):hge 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:hge,v2:int):hge 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:hge,v2:sht):hge 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:hge,v2:bte):hge 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:lng,v2:hge):hge 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:wrd,v2:hge):hge 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:int,v2:hge):hge 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:sht,v2:hge):hge 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:bte,v2:hge):hge 
address CMDvarMULsignal;
comment Return V1 * V2, signal error on overflow

pattern calc.*(v1:flt,v2:hge):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:hge,v2:flt):dbl 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:lng,v2:lng):hge 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:lng,v2:wrd):hge 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:lng,v2:int):hge 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:lng,v2:sht):hge 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:lng,v2:bte):hge 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:wrd,v2:lng):hge 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:wrd,v2:wrd):hge 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:wrd,v2:int):hge 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:wrd,v2:sht):hge 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:wrd,v2:bte):hge 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:int,v2:lng):hge 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:int,v2:wrd):hge 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:sht,v2:lng):hge 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:sht,v2:wrd):hge 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:bte,v2:lng):hge 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

pattern calc.*(v1:bte,v2:wrd):hge 
address CMDvarMULsignal;
comment Return V1 * V2, guarantee no overflow by returning larger type

command calc.+(v1:str,i:int):str 
address CMDvarADDstrint;
comment Concatenate LEFT and string representation of RIGHT

command calc.+(v1:str,v2:str):str 
address CMDvarADDstr;
comment Concatenate LEFT and RIGHT

pattern calc.+(v1:dbl,v2:dbl):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:dbl,v2:flt):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:dbl,v2:lng):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:dbl,v2:wrd):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:dbl,v2:int):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:dbl,v2:sht):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:dbl,v2:bte):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:flt,v2:dbl):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:flt,v2:flt):flt 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:flt,v2:lng):flt 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:flt,v2:wrd):flt 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:flt,v2:int):flt 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:flt,v2:sht):flt 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:flt,v2:bte):flt 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:lng,v2:dbl):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:lng,v2:flt):flt 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:lng,v2:lng):lng 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:lng,v2:wrd):lng 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:lng,v2:int):lng 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:lng,v2:sht):lng 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:lng,v2:bte):lng 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:wrd,v2:dbl):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:wrd,v2:flt):flt 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:wrd,v2:lng):lng 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:wrd,v2:wrd):wrd 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:wrd,v2:int):wrd 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:wrd,v2:sht):wrd 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:wrd,v2:bte):wrd 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:int,v2:dbl):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:int,v2:flt):flt 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:int,v2:lng):lng 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:int,v2:wrd):wrd 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:int,v2:int):int 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:int,v2:sht):int 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:int,v2:bte):int 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:sht,v2:dbl):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:sht,v2:flt):flt 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:sht,v2:lng):lng 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:sht,v2:wrd):wrd 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:sht,v2:int):int 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:sht,v2:sht):sht 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:sht,v2:bte):sht 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:bte,v2:dbl):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:bte,v2:flt):flt 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:bte,v2:lng):lng 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:bte,v2:wrd):wrd 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:bte,v2:int):int 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:bte,v2:sht):sht 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:bte,v2:bte):bte 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:flt,v2:flt):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:flt,v2:lng):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:flt,v2:wrd):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:flt,v2:int):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:flt,v2:sht):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:flt,v2:bte):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:lng,v2:flt):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:wrd,v2:flt):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:int,v2:flt):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:int,v2:int):lng 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:int,v2:sht):lng 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:int,v2:bte):lng 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:sht,v2:flt):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:sht,v2:int):lng 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:sht,v2:sht):int 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:sht,v2:bte):int 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:bte,v2:flt):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:bte,v2:int):lng 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:bte,v2:sht):int 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:bte,v2:bte):sht 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.++(v:dbl):dbl 
address CMDvarINCRsignal;
comment Unary V + 1

pattern calc.++(v:flt):flt 
address CMDvarINCRsignal;
comment Unary V + 1

pattern calc.++(v:lng):lng 
address CMDvarINCRsignal;
comment Unary V + 1

pattern calc.++(v:wrd):wrd 
address CMDvarINCRsignal;
comment Unary V + 1

pattern calc.++(v:int):int 
address CMDvarINCRsignal;
comment Unary V + 1

pattern calc.++(v:sht):sht 
address CMDvarINCRsignal;
comment Unary V + 1

pattern calc.++(v:bte):bte 
address CMDvarINCRsignal;
comment Unary V + 1

pattern calc.+(v1:dbl,v2:hge):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:flt,v2:hge):flt 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:hge,v2:dbl):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:hge,v2:flt):flt 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:hge,v2:hge):hge 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:hge,v2:lng):hge 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:hge,v2:wrd):hge 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:hge,v2:int):hge 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:hge,v2:sht):hge 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:hge,v2:bte):hge 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:lng,v2:hge):hge 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:wrd,v2:hge):hge 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:int,v2:hge):hge 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:sht,v2:hge):hge 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:bte,v2:hge):hge 
address CMDvarADDsignal;
comment Return V1 + V2, signal error on overflow

pattern calc.+(v1:flt,v2:hge):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:hge,v2:flt):dbl 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:lng,v2:lng):hge 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:lng,v2:wrd):hge 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:lng,v2:int):hge 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:lng,v2:sht):hge 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:lng,v2:bte):hge 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:wrd,v2:lng):hge 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:wrd,v2:wrd):hge 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:wrd,v2:int):hge 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:wrd,v2:sht):hge 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:wrd,v2:bte):hge 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:int,v2:lng):hge 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:int,v2:wrd):hge 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:sht,v2:lng):hge 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:sht,v2:wrd):hge 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:bte,v2:lng):hge 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.+(v1:bte,v2:wrd):hge 
address CMDvarADDsignal;
comment Return V1 + V2, guarantee no overflow by returning larger type

pattern calc.++(v:hge):hge 
address CMDvarINCR;
comment Unary V + 1

pattern calc.-(v1:dbl,v2:dbl):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:dbl,v2:flt):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:dbl,v2:lng):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:dbl,v2:wrd):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:dbl,v2:int):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:dbl,v2:sht):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:dbl,v2:bte):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:flt,v2:dbl):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:flt,v2:flt):flt 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:flt,v2:lng):flt 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:flt,v2:wrd):flt 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:flt,v2:int):flt 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:flt,v2:sht):flt 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:flt,v2:bte):flt 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:lng,v2:dbl):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:lng,v2:flt):flt 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:lng,v2:lng):lng 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:lng,v2:wrd):lng 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:lng,v2:int):lng 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:lng,v2:sht):lng 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:lng,v2:bte):lng 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:wrd,v2:dbl):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:wrd,v2:flt):flt 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:wrd,v2:lng):lng 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:wrd,v2:wrd):wrd 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:wrd,v2:int):wrd 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:wrd,v2:sht):wrd 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:wrd,v2:bte):wrd 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:int,v2:dbl):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:int,v2:flt):flt 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:int,v2:lng):lng 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:int,v2:wrd):wrd 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:int,v2:int):int 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:int,v2:sht):int 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:int,v2:bte):int 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:sht,v2:dbl):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:sht,v2:flt):flt 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:sht,v2:lng):lng 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:sht,v2:wrd):wrd 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:sht,v2:int):int 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:sht,v2:sht):sht 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:sht,v2:bte):sht 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:bte,v2:dbl):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:bte,v2:flt):flt 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:bte,v2:lng):lng 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:bte,v2:wrd):wrd 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:bte,v2:int):int 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:bte,v2:sht):sht 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:bte,v2:bte):bte 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:flt,v2:flt):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:flt,v2:lng):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:flt,v2:wrd):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:flt,v2:int):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:flt,v2:sht):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:flt,v2:bte):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:lng,v2:flt):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:wrd,v2:flt):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:int,v2:flt):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:int,v2:int):lng 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:int,v2:sht):lng 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:int,v2:bte):lng 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:sht,v2:flt):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:sht,v2:int):lng 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:sht,v2:sht):int 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:sht,v2:bte):int 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:bte,v2:flt):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:bte,v2:int):lng 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:bte,v2:sht):int 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:bte,v2:bte):sht 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.--(v:dbl):dbl 
address CMDvarDECRsignal;
comment Unary V - 1

pattern calc.--(v:flt):flt 
address CMDvarDECRsignal;
comment Unary V - 1

pattern calc.--(v:lng):lng 
address CMDvarDECRsignal;
comment Unary V - 1

pattern calc.--(v:wrd):wrd 
address CMDvarDECRsignal;
comment Unary V - 1

pattern calc.--(v:int):int 
address CMDvarDECRsignal;
comment Unary V - 1

pattern calc.--(v:sht):sht 
address CMDvarDECRsignal;
comment Unary V - 1

pattern calc.--(v:bte):bte 
address CMDvarDECRsignal;
comment Unary V - 1

pattern calc.-(v:dbl):dbl 
address CMDvarNEG;
comment Unary negation of V

pattern calc.-(v:flt):flt 
address CMDvarNEG;
comment Unary negation of V

pattern calc.-(v:lng):lng 
address CMDvarNEG;
comment Unary negation of V

pattern calc.-(v:wrd):wrd 
address CMDvarNEG;
comment Unary negation of V

pattern calc.-(v:int):int 
address CMDvarNEG;
comment Unary negation of V

pattern calc.-(v:sht):sht 
address CMDvarNEG;
comment Unary negation of V

pattern calc.-(v:bte):bte 
address CMDvarNEG;
comment Unary negation of V

pattern calc.-(v1:dbl,v2:hge):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:flt,v2:hge):flt 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:hge,v2:dbl):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:hge,v2:flt):flt 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:hge,v2:hge):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:hge,v2:lng):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:hge,v2:wrd):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:hge,v2:int):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:hge,v2:sht):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:hge,v2:bte):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:lng,v2:hge):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:wrd,v2:hge):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:int,v2:hge):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:sht,v2:hge):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:bte,v2:hge):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, signal error on overflow

pattern calc.-(v1:flt,v2:hge):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:hge,v2:flt):dbl 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:lng,v2:lng):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:lng,v2:wrd):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:lng,v2:int):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:lng,v2:sht):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:lng,v2:bte):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:wrd,v2:lng):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:wrd,v2:wrd):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:wrd,v2:int):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:wrd,v2:sht):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:wrd,v2:bte):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:int,v2:lng):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:int,v2:wrd):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:sht,v2:lng):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:sht,v2:wrd):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:bte,v2:lng):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.-(v1:bte,v2:wrd):hge 
address CMDvarSUBsignal;
comment Return V1 - V2, guarantee no overflow by returning larger type

pattern calc.--(v:hge):hge 
address CMDvarDECR;
comment Unary V - 1

pattern calc.-(v:hge):hge 
address CMDvarNEG;
comment Unary negation of V

pattern calc./(v1:dbl,v2:dbl):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:dbl,v2:flt):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:dbl,v2:lng):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:dbl,v2:wrd):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:dbl,v2:int):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:dbl,v2:sht):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:dbl,v2:bte):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:flt,v2:dbl):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:flt,v2:flt):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:flt,v2:flt):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:flt,v2:lng):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:flt,v2:lng):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:flt,v2:wrd):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:flt,v2:wrd):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:flt,v2:int):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:flt,v2:int):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:flt,v2:sht):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:flt,v2:sht):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:flt,v2:bte):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:flt,v2:bte):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:lng,v2:dbl):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:lng,v2:flt):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:lng,v2:flt):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:lng,v2:lng):lng 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:lng,v2:lng):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:lng,v2:lng):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:lng,v2:wrd):lng 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:lng,v2:wrd):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:lng,v2:wrd):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:lng,v2:int):lng 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:lng,v2:int):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:lng,v2:int):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:lng,v2:sht):lng 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:lng,v2:sht):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:lng,v2:sht):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:lng,v2:bte):lng 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:lng,v2:bte):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:lng,v2:bte):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:wrd,v2:dbl):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:wrd,v2:flt):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:wrd,v2:flt):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:wrd,v2:lng):wrd 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:wrd,v2:lng):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:wrd,v2:lng):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:wrd,v2:wrd):wrd 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:wrd,v2:wrd):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:wrd,v2:wrd):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:wrd,v2:int):wrd 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:wrd,v2:int):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:wrd,v2:int):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:wrd,v2:sht):wrd 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:wrd,v2:sht):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:wrd,v2:sht):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:wrd,v2:bte):wrd 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:wrd,v2:bte):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:wrd,v2:bte):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:int,v2:dbl):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:int,v2:flt):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:int,v2:flt):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:int,v2:lng):int 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:int,v2:lng):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:int,v2:lng):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:int,v2:wrd):int 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:int,v2:wrd):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:int,v2:wrd):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:int,v2:int):int 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:int,v2:int):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:int,v2:int):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:int,v2:sht):int 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:int,v2:sht):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:int,v2:sht):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:int,v2:bte):int 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:int,v2:bte):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:int,v2:bte):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:sht,v2:dbl):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:sht,v2:flt):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:sht,v2:flt):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:sht,v2:lng):sht 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:sht,v2:lng):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:sht,v2:lng):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:sht,v2:wrd):sht 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:sht,v2:wrd):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:sht,v2:wrd):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:sht,v2:int):sht 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:sht,v2:int):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:sht,v2:int):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:sht,v2:sht):sht 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:sht,v2:sht):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:sht,v2:sht):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:sht,v2:bte):sht 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:sht,v2:bte):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:sht,v2:bte):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:bte,v2:dbl):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:bte,v2:flt):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:bte,v2:flt):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:bte,v2:lng):bte 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:bte,v2:lng):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:bte,v2:lng):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:bte,v2:wrd):bte 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:bte,v2:wrd):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:bte,v2:wrd):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:bte,v2:int):bte 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:bte,v2:int):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:bte,v2:int):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:bte,v2:sht):bte 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:bte,v2:sht):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:bte,v2:sht):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:bte,v2:bte):bte 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:bte,v2:bte):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:bte,v2:bte):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:dbl,v2:hge):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:flt,v2:hge):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:flt,v2:hge):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:hge,v2:dbl):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:hge,v2:flt):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:hge,v2:flt):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:hge,v2:hge):hge 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:hge,v2:hge):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:hge,v2:hge):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:hge,v2:lng):hge 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:hge,v2:lng):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:hge,v2:lng):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:hge,v2:wrd):hge 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:hge,v2:wrd):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:hge,v2:wrd):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:hge,v2:int):hge 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:hge,v2:int):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:hge,v2:int):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:hge,v2:sht):hge 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:hge,v2:sht):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:hge,v2:sht):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:hge,v2:bte):hge 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:hge,v2:bte):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:hge,v2:bte):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:lng,v2:hge):lng 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:lng,v2:hge):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:lng,v2:hge):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:wrd,v2:hge):wrd 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:wrd,v2:hge):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:wrd,v2:hge):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:int,v2:hge):int 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:int,v2:hge):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:int,v2:hge):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:sht,v2:hge):sht 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:sht,v2:hge):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:sht,v2:hge):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:bte,v2:hge):bte 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:bte,v2:hge):dbl 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc./(v1:bte,v2:hge):flt 
address CMDvarDIVsignal;
comment Return V1 / V2, signal error on overflow

pattern calc.<=(v1:dbl,v2:dbl):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:dbl,v2:flt):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:dbl,v2:lng):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:dbl,v2:wrd):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:dbl,v2:int):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:dbl,v2:sht):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:dbl,v2:bte):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:flt,v2:dbl):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:flt,v2:flt):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:flt,v2:lng):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:flt,v2:wrd):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:flt,v2:int):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:flt,v2:sht):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:flt,v2:bte):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:lng,v2:dbl):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:lng,v2:flt):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:lng,v2:lng):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:lng,v2:wrd):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:lng,v2:int):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:lng,v2:sht):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:lng,v2:bte):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:wrd,v2:dbl):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:wrd,v2:flt):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:wrd,v2:lng):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:wrd,v2:wrd):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:wrd,v2:int):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:wrd,v2:sht):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:wrd,v2:bte):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:int,v2:dbl):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:int,v2:flt):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:int,v2:lng):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:int,v2:wrd):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:int,v2:int):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:int,v2:sht):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:int,v2:bte):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:sht,v2:dbl):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:sht,v2:flt):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:sht,v2:lng):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:sht,v2:wrd):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:sht,v2:int):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:sht,v2:sht):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:sht,v2:bte):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:bte,v2:dbl):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:bte,v2:flt):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:bte,v2:lng):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:bte,v2:wrd):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:bte,v2:int):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:bte,v2:sht):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:bte,v2:bte):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:oid,v2:oid):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:str,v2:str):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:bit,v2:bit):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<(v1:dbl,v2:dbl):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:dbl,v2:flt):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:dbl,v2:lng):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:dbl,v2:wrd):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:dbl,v2:int):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:dbl,v2:sht):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:dbl,v2:bte):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:flt,v2:dbl):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:flt,v2:flt):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:flt,v2:lng):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:flt,v2:wrd):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:flt,v2:int):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:flt,v2:sht):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:flt,v2:bte):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:lng,v2:dbl):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:lng,v2:flt):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:lng,v2:lng):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:lng,v2:wrd):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:lng,v2:int):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:lng,v2:sht):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:lng,v2:bte):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:wrd,v2:dbl):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:wrd,v2:flt):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:wrd,v2:lng):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:wrd,v2:wrd):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:wrd,v2:int):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:wrd,v2:sht):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:wrd,v2:bte):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:int,v2:dbl):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:int,v2:flt):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:int,v2:lng):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:int,v2:wrd):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:int,v2:int):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:int,v2:sht):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:int,v2:bte):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:sht,v2:dbl):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:sht,v2:flt):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:sht,v2:lng):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:sht,v2:wrd):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:sht,v2:int):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:sht,v2:sht):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:sht,v2:bte):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:bte,v2:dbl):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:bte,v2:flt):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:bte,v2:lng):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:bte,v2:wrd):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:bte,v2:int):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:bte,v2:sht):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:bte,v2:bte):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:oid,v2:oid):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:str,v2:str):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:bit,v2:bit):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<<(v1:lng,v2:lng):lng 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:lng,v2:wrd):lng 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:lng,v2:int):lng 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:lng,v2:sht):lng 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:lng,v2:bte):lng 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:wrd,v2:lng):wrd 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:wrd,v2:wrd):wrd 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:wrd,v2:int):wrd 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:wrd,v2:sht):wrd 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:wrd,v2:bte):wrd 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:int,v2:lng):int 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:int,v2:wrd):int 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:int,v2:int):int 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:int,v2:sht):int 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:int,v2:bte):int 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:sht,v2:lng):sht 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:sht,v2:wrd):sht 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:sht,v2:int):sht 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:sht,v2:sht):sht 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:sht,v2:bte):sht 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:bte,v2:lng):bte 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:bte,v2:wrd):bte 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:bte,v2:int):bte 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:bte,v2:sht):bte 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:bte,v2:bte):bte 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<=(v1:dbl,v2:hge):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:flt,v2:hge):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:hge,v2:dbl):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:hge,v2:flt):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:hge,v2:hge):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:hge,v2:lng):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:hge,v2:wrd):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:hge,v2:int):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:hge,v2:sht):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:hge,v2:bte):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:lng,v2:hge):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:wrd,v2:hge):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:int,v2:hge):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:sht,v2:hge):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<=(v1:bte,v2:hge):bit 
address CMDvarLE;
comment Return V1 <= V2

pattern calc.<(v1:dbl,v2:hge):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:flt,v2:hge):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:hge,v2:dbl):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:hge,v2:flt):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:hge,v2:hge):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:hge,v2:lng):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:hge,v2:wrd):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:hge,v2:int):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:hge,v2:sht):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:hge,v2:bte):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:lng,v2:hge):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:wrd,v2:hge):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:int,v2:hge):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:sht,v2:hge):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<(v1:bte,v2:hge):bit 
address CMDvarLT;
comment Return V1 < V2

pattern calc.<<(v1:hge,v2:hge):hge 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:hge,v2:lng):hge 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:hge,v2:wrd):hge 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:hge,v2:int):hge 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:hge,v2:sht):hge 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:hge,v2:bte):hge 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:lng,v2:hge):lng 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:wrd,v2:hge):wrd 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:int,v2:hge):int 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:sht,v2:hge):sht 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

pattern calc.<<(v1:bte,v2:hge):bte 
address CMDvarLSHsignal;
comment Return V1 << V2, raise error on out of range second operand

command calc.<=(v:inet,w:inet):bit 
address INET_comp_LE;
comment Whether v is less than or equal to w

command calc.<(v:inet,w:inet):bit 
address INET_comp_LT;
comment Whether v is less than w

pattern calc.<=(v:timestamp,w:timestamp):bit 
address CMDvarLE;
comment Equality of two timestamps

pattern calc.<(v:timestamp,w:timestamp):bit 
address CMDvarLT;
comment Equality of two timestamps

pattern calc.<=(v:daytime,w:daytime):bit 
address CMDvarLE;
comment Equality of two daytimes

pattern calc.<(v:daytime,w:daytime):bit 
address CMDvarLT;
comment Equality of two daytimes

pattern calc.<=(v:date,w:date):bit 
address CMDvarLE;
comment Equality of two dates

pattern calc.<(v:date,w:date):bit 
address CMDvarLT;
comment Equality of two dates

pattern calc.==(v1:dbl,v2:dbl):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:dbl,v2:flt):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:dbl,v2:lng):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:dbl,v2:wrd):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:dbl,v2:int):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:dbl,v2:sht):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:dbl,v2:bte):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:flt,v2:dbl):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:flt,v2:flt):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:flt,v2:lng):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:flt,v2:wrd):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:flt,v2:int):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:flt,v2:sht):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:flt,v2:bte):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:lng,v2:dbl):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:lng,v2:flt):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:lng,v2:lng):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:lng,v2:wrd):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:lng,v2:int):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:lng,v2:sht):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:lng,v2:bte):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:wrd,v2:dbl):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:wrd,v2:flt):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:wrd,v2:lng):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:wrd,v2:wrd):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:wrd,v2:int):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:wrd,v2:sht):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:wrd,v2:bte):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:int,v2:dbl):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:int,v2:flt):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:int,v2:lng):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:int,v2:wrd):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:int,v2:int):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:int,v2:sht):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:int,v2:bte):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:sht,v2:dbl):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:sht,v2:flt):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:sht,v2:lng):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:sht,v2:wrd):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:sht,v2:int):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:sht,v2:sht):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:sht,v2:bte):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:bte,v2:dbl):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:bte,v2:flt):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:bte,v2:lng):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:bte,v2:wrd):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:bte,v2:int):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:bte,v2:sht):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:bte,v2:bte):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:oid,v2:oid):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:str,v2:str):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:bit,v2:bit):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:dbl,v2:hge):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:flt,v2:hge):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:hge,v2:dbl):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:hge,v2:flt):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:hge,v2:hge):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:hge,v2:lng):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:hge,v2:wrd):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:hge,v2:int):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:hge,v2:sht):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:hge,v2:bte):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:lng,v2:hge):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:wrd,v2:hge):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:int,v2:hge):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:sht,v2:hge):bit 
address CMDvarEQ;
comment Return V1 == V2

pattern calc.==(v1:bte,v2:hge):bit 
address CMDvarEQ;
comment Return V1 == V2

command calc.=(v:inet,w:inet):bit 
address INET_comp_EQ;
comment Equality of two inets

pattern calc.==(v:timestamp,w:timestamp):bit 
address CMDvarEQ;
comment Equality of two timestamps

pattern calc.==(v:daytime,w:daytime):bit 
address CMDvarEQ;
comment Equality of two daytimes

pattern calc.==(v:date,w:date):bit 
address CMDvarEQ;
comment Equality of two dates

command calc.==(l:uuid,r:uuid):bit 
address UUIDequal;
comment Compare two UUID values for equality

pattern calc.>=(v1:dbl,v2:dbl):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:dbl,v2:flt):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:dbl,v2:lng):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:dbl,v2:wrd):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:dbl,v2:int):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:dbl,v2:sht):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:dbl,v2:bte):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:flt,v2:dbl):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:flt,v2:flt):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:flt,v2:lng):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:flt,v2:wrd):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:flt,v2:int):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:flt,v2:sht):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:flt,v2:bte):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:lng,v2:dbl):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:lng,v2:flt):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:lng,v2:lng):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:lng,v2:wrd):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:lng,v2:int):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:lng,v2:sht):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:lng,v2:bte):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:wrd,v2:dbl):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:wrd,v2:flt):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:wrd,v2:lng):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:wrd,v2:wrd):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:wrd,v2:int):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:wrd,v2:sht):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:wrd,v2:bte):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:int,v2:dbl):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:int,v2:flt):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:int,v2:lng):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:int,v2:wrd):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:int,v2:int):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:int,v2:sht):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:int,v2:bte):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:sht,v2:dbl):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:sht,v2:flt):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:sht,v2:lng):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:sht,v2:wrd):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:sht,v2:int):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:sht,v2:sht):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:sht,v2:bte):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:bte,v2:dbl):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:bte,v2:flt):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:bte,v2:lng):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:bte,v2:wrd):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:bte,v2:int):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:bte,v2:sht):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:bte,v2:bte):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:oid,v2:oid):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:str,v2:str):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:bit,v2:bit):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>(v1:dbl,v2:dbl):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:dbl,v2:flt):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:dbl,v2:lng):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:dbl,v2:wrd):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:dbl,v2:int):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:dbl,v2:sht):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:dbl,v2:bte):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:flt,v2:dbl):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:flt,v2:flt):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:flt,v2:lng):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:flt,v2:wrd):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:flt,v2:int):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:flt,v2:sht):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:flt,v2:bte):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:lng,v2:dbl):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:lng,v2:flt):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:lng,v2:lng):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:lng,v2:wrd):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:lng,v2:int):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:lng,v2:sht):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:lng,v2:bte):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:wrd,v2:dbl):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:wrd,v2:flt):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:wrd,v2:lng):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:wrd,v2:wrd):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:wrd,v2:int):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:wrd,v2:sht):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:wrd,v2:bte):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:int,v2:dbl):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:int,v2:flt):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:int,v2:lng):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:int,v2:wrd):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:int,v2:int):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:int,v2:sht):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:int,v2:bte):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:sht,v2:dbl):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:sht,v2:flt):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:sht,v2:lng):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:sht,v2:wrd):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:sht,v2:int):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:sht,v2:sht):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:sht,v2:bte):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:bte,v2:dbl):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:bte,v2:flt):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:bte,v2:lng):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:bte,v2:wrd):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:bte,v2:int):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:bte,v2:sht):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:bte,v2:bte):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:oid,v2:oid):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:str,v2:str):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:bit,v2:bit):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>>(v1:lng,v2:lng):lng 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:lng,v2:wrd):lng 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:lng,v2:int):lng 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:lng,v2:sht):lng 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:lng,v2:bte):lng 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:wrd,v2:lng):wrd 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:wrd,v2:wrd):wrd 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:wrd,v2:int):wrd 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:wrd,v2:sht):wrd 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:wrd,v2:bte):wrd 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:int,v2:lng):int 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:int,v2:wrd):int 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:int,v2:int):int 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:int,v2:sht):int 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:int,v2:bte):int 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:sht,v2:lng):sht 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:sht,v2:wrd):sht 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:sht,v2:int):sht 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:sht,v2:sht):sht 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:sht,v2:bte):sht 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:bte,v2:lng):bte 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:bte,v2:wrd):bte 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:bte,v2:int):bte 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:bte,v2:sht):bte 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:bte,v2:bte):bte 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>=(v1:dbl,v2:hge):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:flt,v2:hge):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:hge,v2:dbl):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:hge,v2:flt):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:hge,v2:hge):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:hge,v2:lng):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:hge,v2:wrd):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:hge,v2:int):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:hge,v2:sht):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:hge,v2:bte):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:lng,v2:hge):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:wrd,v2:hge):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:int,v2:hge):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:sht,v2:hge):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>=(v1:bte,v2:hge):bit 
address CMDvarGE;
comment Return V1 >= V2

pattern calc.>(v1:dbl,v2:hge):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:flt,v2:hge):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:hge,v2:dbl):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:hge,v2:flt):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:hge,v2:hge):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:hge,v2:lng):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:hge,v2:wrd):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:hge,v2:int):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:hge,v2:sht):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:hge,v2:bte):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:lng,v2:hge):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:wrd,v2:hge):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:int,v2:hge):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:sht,v2:hge):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>(v1:bte,v2:hge):bit 
address CMDvarGT;
comment Return V1 > V2

pattern calc.>>(v1:hge,v2:hge):hge 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:hge,v2:lng):hge 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:hge,v2:wrd):hge 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:hge,v2:int):hge 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:hge,v2:sht):hge 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:hge,v2:bte):hge 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:lng,v2:hge):lng 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:wrd,v2:hge):wrd 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:int,v2:hge):int 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:sht,v2:hge):sht 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

pattern calc.>>(v1:bte,v2:hge):bte 
address CMDvarRSHsignal;
comment Return V1 >> V2, raise error on out of range second operand

command calc.>=(v:inet,w:inet):bit 
address INET_comp_GE;
comment Whether v is equal to or greater than w

command calc.>(v:inet,w:inet):bit 
address INET_comp_GT;
comment Whether v is greater than w

pattern calc.>=(v:timestamp,w:timestamp):bit 
address CMDvarGE;
comment Equality of two timestamps

pattern calc.>(v:timestamp,w:timestamp):bit 
address CMDvarGT;
comment Equality of two timestamps

pattern calc.>=(v:daytime,w:daytime):bit 
address CMDvarGE;
comment Equality of two daytimes

pattern calc.>(v:daytime,w:daytime):bit 
address CMDvarGT;
comment Equality of two daytimes

pattern calc.>=(v:date,w:date):bit 
address CMDvarGE;
comment Equality of two dates

pattern calc.>(v:date,w:date):bit 
address CMDvarGT;
comment Equality of two dates

pattern calc.and(v1:lng,v2:lng):lng 
address CMDvarAND;
comment Return V1 AND V2

pattern calc.and(v1:wrd,v2:wrd):wrd 
address CMDvarAND;
comment Return V1 AND V2

pattern calc.and(v1:int,v2:int):int 
address CMDvarAND;
comment Return V1 AND V2

pattern calc.and(v1:sht,v2:sht):sht 
address CMDvarAND;
comment Return V1 AND V2

pattern calc.and(v1:bte,v2:bte):bte 
address CMDvarAND;
comment Return V1 AND V2

pattern calc.and(v1:bit,v2:bit):bit 
address CMDvarAND;
comment Return V1 AND V2

pattern calc.add_noerror(v1:dbl,v2:dbl):dbl 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:dbl,v2:flt):dbl 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:dbl,v2:lng):dbl 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:dbl,v2:wrd):dbl 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:dbl,v2:int):dbl 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:dbl,v2:sht):dbl 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:dbl,v2:bte):dbl 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:flt,v2:dbl):dbl 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:flt,v2:flt):flt 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:flt,v2:lng):flt 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:flt,v2:wrd):flt 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:flt,v2:int):flt 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:flt,v2:sht):flt 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:flt,v2:bte):flt 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:lng,v2:dbl):dbl 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:lng,v2:flt):flt 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:lng,v2:lng):lng 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:lng,v2:wrd):lng 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:lng,v2:int):lng 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:lng,v2:sht):lng 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:lng,v2:bte):lng 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:wrd,v2:dbl):dbl 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:wrd,v2:flt):flt 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:wrd,v2:lng):lng 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:wrd,v2:wrd):wrd 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:wrd,v2:int):wrd 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:wrd,v2:sht):wrd 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:wrd,v2:bte):wrd 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:int,v2:dbl):dbl 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:int,v2:flt):flt 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:int,v2:lng):lng 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:int,v2:wrd):wrd 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:int,v2:int):int 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:int,v2:sht):int 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:int,v2:bte):int 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:sht,v2:dbl):dbl 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:sht,v2:flt):flt 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:sht,v2:lng):lng 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:sht,v2:wrd):wrd 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:sht,v2:int):int 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:sht,v2:sht):sht 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:sht,v2:bte):sht 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:bte,v2:dbl):dbl 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:bte,v2:flt):flt 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:bte,v2:lng):lng 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:bte,v2:wrd):wrd 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:bte,v2:int):int 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:bte,v2:sht):sht 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:bte,v2:bte):bte 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.abs(v:dbl):dbl 
address CMDvarABS;
comment Unary absolute value of V

pattern calc.abs(v:flt):flt 
address CMDvarABS;
comment Unary absolute value of V

pattern calc.abs(v:lng):lng 
address CMDvarABS;
comment Unary absolute value of V

pattern calc.abs(v:wrd):wrd 
address CMDvarABS;
comment Unary absolute value of V

pattern calc.abs(v:int):int 
address CMDvarABS;
comment Unary absolute value of V

pattern calc.abs(v:sht):sht 
address CMDvarABS;
comment Unary absolute value of V

pattern calc.abs(v:bte):bte 
address CMDvarABS;
comment Unary absolute value of V

pattern calc.and(v1:hge,v2:hge):hge 
address CMDvarAND;
comment Return V1 AND V2

pattern calc.add_noerror(v1:dbl,v2:hge):dbl 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:flt,v2:hge):flt 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:hge,v2:dbl):dbl 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:hge,v2:flt):flt 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:hge,v2:hge):hge 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:hge,v2:lng):hge 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:hge,v2:wrd):hge 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:hge,v2:int):hge 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:hge,v2:sht):hge 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:hge,v2:bte):hge 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:lng,v2:hge):hge 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:wrd,v2:hge):hge 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:int,v2:hge):hge 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:sht,v2:hge):hge 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.add_noerror(v1:bte,v2:hge):hge 
address CMDvarADD;
comment Return V1 + V2, overflow causes NIL value

pattern calc.abs(v:hge):hge 
address CMDvarABS;
comment Unary absolute value of V

command calc.bte(s1:int,v:hge,d2:int,s2:int):bte 
address hge_dec2dec_bte;
comment cast decimal(hge) to decimal(bte) and check for overflow

command calc.bte(s1:int,v:hge):bte 
address hge_dec2_bte;
comment cast decimal(hge) to bte and check for overflow

command calc.bte(v:hge,digits:int,scale:int):bte 
address hge_num2dec_bte;
comment cast number to decimal(bte) and check for overflow

command calc.bte(s1:int,v:lng,d2:int,s2:int):bte 
address lng_dec2dec_bte;
comment cast decimal(lng) to decimal(bte) and check for overflow

command calc.bte(s1:int,v:lng):bte 
address lng_dec2_bte;
comment cast decimal(lng) to bte and check for overflow

command calc.bte(v:lng,digits:int,scale:int):bte 
address lng_num2dec_bte;
comment cast number to decimal(bte) and check for overflow

command calc.bte(s1:int,v:wrd,d2:int,s2:int):bte 
address wrd_dec2dec_bte;
comment cast decimal(wrd) to decimal(bte) and check for overflow

command calc.bte(s1:int,v:wrd):bte 
address wrd_dec2_bte;
comment cast decimal(wrd) to bte and check for overflow

command calc.bte(v:wrd,digits:int,scale:int):bte 
address wrd_num2dec_bte;
comment cast number to decimal(bte) and check for overflow

command calc.bte(s1:int,v:int,d2:int,s2:int):bte 
address int_dec2dec_bte;
comment cast decimal(int) to decimal(bte) and check for overflow

command calc.bte(s1:int,v:int):bte 
address int_dec2_bte;
comment cast decimal(int) to bte and check for overflow

command calc.bte(v:int,digits:int,scale:int):bte 
address int_num2dec_bte;
comment cast number to decimal(bte) and check for overflow

command calc.bte(s1:int,v:sht,d2:int,s2:int):bte 
address sht_dec2dec_bte;
comment cast decimal(sht) to decimal(bte) and check for overflow

command calc.bte(s1:int,v:sht):bte 
address sht_dec2_bte;
comment cast decimal(sht) to bte and check for overflow

command calc.bte(v:sht,digits:int,scale:int):bte 
address sht_num2dec_bte;
comment cast number to decimal(bte) and check for overflow

command calc.bte(s1:int,v:bte,d2:int,s2:int):bte 
address bte_dec2dec_bte;
comment cast decimal(bte) to decimal(bte) and check for overflow

command calc.bte(s1:int,v:bte):bte 
address bte_dec2_bte;
comment cast decimal(bte) to bte and check for overflow

command calc.bte(v:bte,digits:int,scale:int):bte 
address bte_num2dec_bte;
comment cast number to decimal(bte) and check for overflow

command calc.bte(v:dbl,digits:int,scale:int):bte 
address dbl_num2dec_bte;
comment cast number to decimal(bte) and check for overflow

command calc.bte(v:flt,digits:int,scale:int):bte 
address flt_num2dec_bte;
comment cast number to decimal(bte) and check for overflow

command calc.bte(v:str,digits:int,scale:int):bte 
address str_2dec_bte;
comment cast to dec(bte) and check for overflow

command calc.bte(v:str,digits:int):bte 
address str_2num_bte;
comment cast to bte and check for overflow

command calc.bte(v:void,digits:int,scale:int):bte 
address nil_2dec_bte;
comment cast to dec(bte) and check for overflow

command calc.bte(v:void,digits:int):bte 
address nil_2num_bte;
comment cast to bte and check for overflow

pattern calc.bte(v:str):bte 
address CMDvarCONVERT;
comment Cast VALUE to bte

pattern calc.bte(v:oid):bte 
address CMDvarCONVERT;
comment Cast VALUE to bte

pattern calc.bte(v:dbl):bte 
address CMDvarCONVERT;
comment Cast VALUE to bte

pattern calc.bte(v:flt):bte 
address CMDvarCONVERT;
comment Cast VALUE to bte

pattern calc.bte(v:lng):bte 
address CMDvarCONVERT;
comment Cast VALUE to bte

pattern calc.bte(v:wrd):bte 
address CMDvarCONVERT;
comment Cast VALUE to bte

pattern calc.bte(v:int):bte 
address CMDvarCONVERT;
comment Cast VALUE to bte

pattern calc.bte(v:sht):bte 
address CMDvarCONVERT;
comment Cast VALUE to bte

pattern calc.bte(v:bte):bte 
address CMDvarCONVERT;
comment Cast VALUE to bte

pattern calc.bte(v:bit):bte 
address CMDvarCONVERT;
comment Cast VALUE to bte

pattern calc.bte(v:void):bte 
address CMDvarCONVERT;
comment Cast VALUE to bte

pattern calc.bit(v:str):bit 
address CMDvarCONVERT;
comment Cast VALUE to bit

pattern calc.bit(v:oid):bit 
address CMDvarCONVERT;
comment Cast VALUE to bit

pattern calc.bit(v:dbl):bit 
address CMDvarCONVERT;
comment Cast VALUE to bit

pattern calc.bit(v:flt):bit 
address CMDvarCONVERT;
comment Cast VALUE to bit

pattern calc.bit(v:lng):bit 
address CMDvarCONVERT;
comment Cast VALUE to bit

pattern calc.bit(v:wrd):bit 
address CMDvarCONVERT;
comment Cast VALUE to bit

pattern calc.bit(v:int):bit 
address CMDvarCONVERT;
comment Cast VALUE to bit

pattern calc.bit(v:sht):bit 
address CMDvarCONVERT;
comment Cast VALUE to bit

pattern calc.bit(v:bte):bit 
address CMDvarCONVERT;
comment Cast VALUE to bit

pattern calc.bit(v:bit):bit 
address CMDvarCONVERT;
comment Cast VALUE to bit

pattern calc.bit(v:void):bit 
address CMDvarCONVERT;
comment Cast VALUE to bit

pattern calc.between_symmetric(b:any_1,v1:any_1,v2:any_1):bit 
address CMDvarBETWEENsymmetric;
comment B between V1 and V2 (or vice versa) inclusive

pattern calc.between(b:any_1,lo:any_1,hi:any_1):bit 
address CMDvarBETWEEN;
comment B between LO and HI inclusive

pattern calc.bte(v:hge):bte 
address CMDvarCONVERT;
comment Cast VALUE to bte

pattern calc.bit(v:hge):bit 
address CMDvarCONVERT;
comment Cast VALUE to bit

command calc.blob(s:str):blob 
address BLOBblob_fromstr;
command calc.blob(b:blob):blob 
address BLOBblob_blob;
function calc.curve{unsafe}(wkt:str):wkb;
pattern calc.cmp(v1:dbl,v2:dbl):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:dbl,v2:flt):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:dbl,v2:lng):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:dbl,v2:wrd):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:dbl,v2:int):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:dbl,v2:sht):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:dbl,v2:bte):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:flt,v2:dbl):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:flt,v2:flt):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:flt,v2:lng):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:flt,v2:wrd):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:flt,v2:int):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:flt,v2:sht):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:flt,v2:bte):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:lng,v2:dbl):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:lng,v2:flt):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:lng,v2:lng):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:lng,v2:wrd):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:lng,v2:int):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:lng,v2:sht):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:lng,v2:bte):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:wrd,v2:dbl):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:wrd,v2:flt):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:wrd,v2:lng):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:wrd,v2:wrd):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:wrd,v2:int):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:wrd,v2:sht):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:wrd,v2:bte):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:int,v2:dbl):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:int,v2:flt):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:int,v2:lng):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:int,v2:wrd):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:int,v2:int):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:int,v2:sht):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:int,v2:bte):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:sht,v2:dbl):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:sht,v2:flt):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:sht,v2:lng):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:sht,v2:wrd):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:sht,v2:int):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:sht,v2:sht):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:sht,v2:bte):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:bte,v2:dbl):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:bte,v2:flt):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:bte,v2:lng):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:bte,v2:wrd):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:bte,v2:int):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:bte,v2:sht):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:bte,v2:bte):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:oid,v2:oid):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:str,v2:str):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:bit,v2:bit):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:dbl,v2:hge):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:flt,v2:hge):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:hge,v2:dbl):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:hge,v2:flt):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:hge,v2:hge):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:hge,v2:lng):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:hge,v2:wrd):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:hge,v2:int):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:hge,v2:sht):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:hge,v2:bte):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:lng,v2:hge):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:wrd,v2:hge):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:int,v2:hge):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:sht,v2:hge):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

pattern calc.cmp(v1:bte,v2:hge):bte 
address CMDvarCMP;
comment Return -1/0/1 if V1 </==/> V2

command calc.dbl(s1:int,v:hge,d2:int,s2:int):dbl 
address hge_dec2dec_dbl;
comment cast decimal(hge) to decimal(dbl) and check for overflow

command calc.dbl(s1:int,v:hge):dbl 
address hge_dec2_dbl;
comment cast decimal(hge) to dbl and check for overflow

command calc.dbl(v:hge,digits:int,scale:int):dbl 
address hge_num2dec_dbl;
comment cast number to decimal(dbl) and check for overflow

command calc.dbl(s1:int,v:lng,d2:int,s2:int):dbl 
address lng_dec2dec_dbl;
comment cast decimal(lng) to decimal(dbl) and check for overflow

command calc.dbl(s1:int,v:lng):dbl 
address lng_dec2_dbl;
comment cast decimal(lng) to dbl and check for overflow

command calc.dbl(v:lng,digits:int,scale:int):dbl 
address lng_num2dec_dbl;
comment cast number to decimal(dbl) and check for overflow

command calc.dbl(s1:int,v:wrd,d2:int,s2:int):dbl 
address wrd_dec2dec_dbl;
comment cast decimal(wrd) to decimal(dbl) and check for overflow

command calc.dbl(s1:int,v:wrd):dbl 
address wrd_dec2_dbl;
comment cast decimal(wrd) to dbl and check for overflow

command calc.dbl(v:wrd,digits:int,scale:int):dbl 
address wrd_num2dec_dbl;
comment cast number to decimal(dbl) and check for overflow

command calc.dbl(s1:int,v:int,d2:int,s2:int):dbl 
address int_dec2dec_dbl;
comment cast decimal(int) to decimal(dbl) and check for overflow

command calc.dbl(s1:int,v:int):dbl 
address int_dec2_dbl;
comment cast decimal(int) to dbl and check for overflow

command calc.dbl(v:int,digits:int,scale:int):dbl 
address int_num2dec_dbl;
comment cast number to decimal(dbl) and check for overflow

command calc.dbl(s1:int,v:sht,d2:int,s2:int):dbl 
address sht_dec2dec_dbl;
comment cast decimal(sht) to decimal(dbl) and check for overflow

command calc.dbl(s1:int,v:sht):dbl 
address sht_dec2_dbl;
comment cast decimal(sht) to dbl and check for overflow

command calc.dbl(v:sht,digits:int,scale:int):dbl 
address sht_num2dec_dbl;
comment cast number to decimal(dbl) and check for overflow

command calc.dbl(s1:int,v:bte,d2:int,s2:int):dbl 
address bte_dec2dec_dbl;
comment cast decimal(bte) to decimal(dbl) and check for overflow

command calc.dbl(s1:int,v:bte):dbl 
address bte_dec2_dbl;
comment cast decimal(bte) to dbl and check for overflow

command calc.dbl(v:bte,digits:int,scale:int):dbl 
address bte_num2dec_dbl;
comment cast number to decimal(dbl) and check for overflow

command calc.daytime(v:timestamp,d:int):daytime 
address timestamp_2_daytime;
comment cast timestamp to a daytime and check for overflow

command calc.daytime(v:lng,d:int):daytime 
address second_interval_2_daytime;
comment cast second_interval to a daytime and check for overflow

command calc.date(v:str):date 
address str_2_date;
comment cast to date

command calc.date(v:void):date 
address nil_2_date;
comment cast to date

command calc.daytime(v:daytime,digits:int):daytime 
address daytime_2time_daytime;
comment cast daytime to daytime and check for overflow

command calc.daytime(v:str,digits:int):daytime 
address str_2time_daytime;
comment cast to daytime and check for overflow

command calc.daytime(v:str):daytime 
address str_2_daytime;
comment Cast to daytime

command calc.daytime(v:void,digits:int):daytime 
address nil_2time_daytime;
comment cast to daytime and check for overflow

command calc.daytime(v:void):daytime 
address nil_2_daytime;
comment Cast to daytime

pattern calc.dbl(v:str):dbl 
address CMDvarCONVERT;
comment Cast VALUE to dbl

pattern calc.dbl(v:oid):dbl 
address CMDvarCONVERT;
comment Cast VALUE to dbl

pattern calc.dbl(v:dbl):dbl 
address CMDvarCONVERT;
comment Cast VALUE to dbl

pattern calc.dbl(v:flt):dbl 
address CMDvarCONVERT;
comment Cast VALUE to dbl

pattern calc.dbl(v:lng):dbl 
address CMDvarCONVERT;
comment Cast VALUE to dbl

pattern calc.dbl(v:wrd):dbl 
address CMDvarCONVERT;
comment Cast VALUE to dbl

pattern calc.dbl(v:int):dbl 
address CMDvarCONVERT;
comment Cast VALUE to dbl

pattern calc.dbl(v:sht):dbl 
address CMDvarCONVERT;
comment Cast VALUE to dbl

pattern calc.dbl(v:bte):dbl 
address CMDvarCONVERT;
comment Cast VALUE to dbl

pattern calc.dbl(v:bit):dbl 
address CMDvarCONVERT;
comment Cast VALUE to dbl

pattern calc.dbl(v:void):dbl 
address CMDvarCONVERT;
comment Cast VALUE to dbl

pattern calc.div_noerror(v1:dbl,v2:dbl):dbl 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:dbl,v2:flt):dbl 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:dbl,v2:lng):dbl 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:dbl,v2:wrd):dbl 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:dbl,v2:int):dbl 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:dbl,v2:sht):dbl 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:dbl,v2:bte):dbl 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:flt,v2:dbl):dbl 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:flt,v2:flt):flt 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:flt,v2:lng):flt 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:flt,v2:wrd):flt 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:flt,v2:int):flt 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:flt,v2:sht):flt 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:flt,v2:bte):flt 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:lng,v2:dbl):dbl 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:lng,v2:flt):flt 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:lng,v2:lng):lng 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:lng,v2:wrd):lng 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:lng,v2:int):lng 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:lng,v2:sht):lng 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:lng,v2:bte):lng 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:wrd,v2:dbl):dbl 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:wrd,v2:flt):flt 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:wrd,v2:lng):wrd 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:wrd,v2:wrd):wrd 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:wrd,v2:int):wrd 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:wrd,v2:sht):wrd 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:wrd,v2:bte):wrd 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:int,v2:dbl):dbl 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:int,v2:flt):flt 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:int,v2:lng):int 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:int,v2:wrd):int 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:int,v2:int):int 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:int,v2:sht):int 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:int,v2:bte):int 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:sht,v2:dbl):dbl 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:sht,v2:flt):flt 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:sht,v2:lng):sht 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:sht,v2:wrd):sht 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:sht,v2:int):sht 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:sht,v2:sht):sht 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:sht,v2:bte):sht 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:bte,v2:dbl):dbl 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:bte,v2:flt):flt 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:bte,v2:lng):bte 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:bte,v2:wrd):bte 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:bte,v2:int):bte 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:bte,v2:sht):bte 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:bte,v2:bte):bte 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.dbl(v:hge):dbl 
address CMDvarCONVERT;
comment Cast VALUE to dbl

pattern calc.div_noerror(v1:dbl,v2:hge):dbl 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:flt,v2:hge):flt 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:hge,v2:dbl):dbl 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:hge,v2:flt):flt 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:hge,v2:hge):hge 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:hge,v2:lng):hge 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:hge,v2:wrd):hge 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:hge,v2:int):hge 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:hge,v2:sht):hge 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:hge,v2:bte):hge 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:lng,v2:hge):lng 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:wrd,v2:hge):wrd 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:int,v2:hge):int 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:sht,v2:hge):sht 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

pattern calc.div_noerror(v1:bte,v2:hge):bte 
address CMDvarDIV;
comment Return V1 / V2, overflow causes NIL value

command calc.daytime(t:timestamp):daytime 
address MTIMEtimestamp_extract_daytime_default;
command calc.daytime(s:lng):daytime 
address MTIMEsecs2daytime;
command calc.daytime(d:daytime):daytime 
address MTIMEdaytime2daytime;
command calc.daytime(s:str):daytime 
address MTIMEdaytime_fromstr;
command calc.date(t:timestamp):date 
address MTIMEtimestamp_extract_date_default;
command calc.date(d:date):date 
address MTIMEdate_date;
command calc.date(s:str):date 
address MTIMEdate_fromstr;
command calc.flt(s1:int,v:hge,d2:int,s2:int):flt 
address hge_dec2dec_flt;
comment cast decimal(hge) to decimal(flt) and check for overflow

command calc.flt(s1:int,v:hge):flt 
address hge_dec2_flt;
comment cast decimal(hge) to flt and check for overflow

command calc.flt(v:hge,digits:int,scale:int):flt 
address hge_num2dec_flt;
comment cast number to decimal(flt) and check for overflow

command calc.flt(s1:int,v:lng,d2:int,s2:int):flt 
address lng_dec2dec_flt;
comment cast decimal(lng) to decimal(flt) and check for overflow

command calc.flt(s1:int,v:lng):flt 
address lng_dec2_flt;
comment cast decimal(lng) to flt and check for overflow

command calc.flt(v:lng,digits:int,scale:int):flt 
address lng_num2dec_flt;
comment cast number to decimal(flt) and check for overflow

command calc.flt(s1:int,v:wrd,d2:int,s2:int):flt 
address wrd_dec2dec_flt;
comment cast decimal(wrd) to decimal(flt) and check for overflow

command calc.flt(s1:int,v:wrd):flt 
address wrd_dec2_flt;
comment cast decimal(wrd) to flt and check for overflow

command calc.flt(v:wrd,digits:int,scale:int):flt 
address wrd_num2dec_flt;
comment cast number to decimal(flt) and check for overflow

command calc.flt(s1:int,v:int,d2:int,s2:int):flt 
address int_dec2dec_flt;
comment cast decimal(int) to decimal(flt) and check for overflow

command calc.flt(s1:int,v:int):flt 
address int_dec2_flt;
comment cast decimal(int) to flt and check for overflow

command calc.flt(v:int,digits:int,scale:int):flt 
address int_num2dec_flt;
comment cast number to decimal(flt) and check for overflow

command calc.flt(s1:int,v:sht,d2:int,s2:int):flt 
address sht_dec2dec_flt;
comment cast decimal(sht) to decimal(flt) and check for overflow

command calc.flt(s1:int,v:sht):flt 
address sht_dec2_flt;
comment cast decimal(sht) to flt and check for overflow

command calc.flt(v:sht,digits:int,scale:int):flt 
address sht_num2dec_flt;
comment cast number to decimal(flt) and check for overflow

command calc.flt(s1:int,v:bte,d2:int,s2:int):flt 
address bte_dec2dec_flt;
comment cast decimal(bte) to decimal(flt) and check for overflow

command calc.flt(s1:int,v:bte):flt 
address bte_dec2_flt;
comment cast decimal(bte) to flt and check for overflow

command calc.flt(v:bte,digits:int,scale:int):flt 
address bte_num2dec_flt;
comment cast number to decimal(flt) and check for overflow

pattern calc.flt(v:str):flt 
address CMDvarCONVERT;
comment Cast VALUE to flt

pattern calc.flt(v:oid):flt 
address CMDvarCONVERT;
comment Cast VALUE to flt

pattern calc.flt(v:dbl):flt 
address CMDvarCONVERT;
comment Cast VALUE to flt

pattern calc.flt(v:flt):flt 
address CMDvarCONVERT;
comment Cast VALUE to flt

pattern calc.flt(v:lng):flt 
address CMDvarCONVERT;
comment Cast VALUE to flt

pattern calc.flt(v:wrd):flt 
address CMDvarCONVERT;
comment Cast VALUE to flt

pattern calc.flt(v:int):flt 
address CMDvarCONVERT;
comment Cast VALUE to flt

pattern calc.flt(v:sht):flt 
address CMDvarCONVERT;
comment Cast VALUE to flt

pattern calc.flt(v:bte):flt 
address CMDvarCONVERT;
comment Cast VALUE to flt

pattern calc.flt(v:bit):flt 
address CMDvarCONVERT;
comment Cast VALUE to flt

pattern calc.flt(v:void):flt 
address CMDvarCONVERT;
comment Cast VALUE to flt

pattern calc.flt(v:hge):flt 
address CMDvarCONVERT;
comment Cast VALUE to flt

function calc.geomcollection{unsafe}(wkt:str):wkb;
function calc.geometry{unsafe}(wkt:str):wkb;
command calc.hge(s1:int,v:hge,d2:int,s2:int):hge 
address hge_dec2dec_hge;
comment cast decimal(hge) to decimal(hge) and check for overflow

command calc.hge(s1:int,v:hge):hge 
address hge_dec2_hge;
comment cast decimal(hge) to hge and check for overflow

command calc.hge(v:hge,digits:int,scale:int):hge 
address hge_num2dec_hge;
comment cast number to decimal(hge) and check for overflow

command calc.hge(s1:int,v:lng,d2:int,s2:int):hge 
address lng_dec2dec_hge;
comment cast decimal(lng) to decimal(hge) and check for overflow

command calc.hge(s1:int,v:lng):hge 
address lng_dec2_hge;
comment cast decimal(lng) to hge and check for overflow

command calc.hge(v:lng,digits:int,scale:int):hge 
address lng_num2dec_hge;
comment cast number to decimal(hge) and check for overflow

command calc.hge(s1:int,v:wrd,d2:int,s2:int):hge 
address wrd_dec2dec_hge;
comment cast decimal(wrd) to decimal(hge) and check for overflow

command calc.hge(s1:int,v:wrd):hge 
address wrd_dec2_hge;
comment cast decimal(wrd) to hge and check for overflow

command calc.hge(v:wrd,digits:int,scale:int):hge 
address wrd_num2dec_hge;
comment cast number to decimal(hge) and check for overflow

command calc.hge(s1:int,v:int,d2:int,s2:int):hge 
address int_dec2dec_hge;
comment cast decimal(int) to decimal(hge) and check for overflow

command calc.hge(s1:int,v:int):hge 
address int_dec2_hge;
comment cast decimal(int) to hge and check for overflow

command calc.hge(v:int,digits:int,scale:int):hge 
address int_num2dec_hge;
comment cast number to decimal(hge) and check for overflow

command calc.hge(s1:int,v:sht,d2:int,s2:int):hge 
address sht_dec2dec_hge;
comment cast decimal(sht) to decimal(hge) and check for overflow

command calc.hge(s1:int,v:sht):hge 
address sht_dec2_hge;
comment cast decimal(sht) to hge and check for overflow

command calc.hge(v:sht,digits:int,scale:int):hge 
address sht_num2dec_hge;
comment cast number to decimal(hge) and check for overflow

command calc.hge(s1:int,v:bte,d2:int,s2:int):hge 
address bte_dec2dec_hge;
comment cast decimal(bte) to decimal(hge) and check for overflow

command calc.hge(s1:int,v:bte):hge 
address bte_dec2_hge;
comment cast decimal(bte) to hge and check for overflow

command calc.hge(v:bte,digits:int,scale:int):hge 
address bte_num2dec_hge;
comment cast number to decimal(hge) and check for overflow

command calc.hge(v:dbl,digits:int,scale:int):hge 
address dbl_num2dec_hge;
comment cast number to decimal(hge) and check for overflow

command calc.hge(v:flt,digits:int,scale:int):hge 
address flt_num2dec_hge;
comment cast number to decimal(hge) and check for overflow

command calc.hge(v:str,digits:int,scale:int):hge 
address str_2dec_hge;
comment cast to dec(hge) and check for overflow

command calc.hge(v:str,digits:int):hge 
address str_2num_hge;
comment cast to hge and check for overflow

command calc.hge(v:void,digits:int,scale:int):hge 
address nil_2dec_hge;
comment cast to dec(hge) and check for overflow

command calc.hge(v:void,digits:int):hge 
address nil_2num_hge;
comment cast to hge and check for overflow

pattern calc.hash(v:hge):wrd 
address MKEYhash;
pattern calc.hash(v:any):wrd 
address MKEYhash;
pattern calc.hash(v:dbl):wrd 
address MKEYhash;
pattern calc.hash(v:flt):wrd 
address MKEYhash;
pattern calc.hash(v:wrd):wrd 
address MKEYhash;
pattern calc.hash(v:oid):wrd 
address MKEYhash;
pattern calc.hash(v:lng):wrd 
address MKEYhash;
pattern calc.hash(v:int):wrd 
address MKEYhash;
pattern calc.hash(v:sht):wrd 
address MKEYhash;
pattern calc.hash(v:bte):wrd 
address MKEYhash;
pattern calc.hge(v:str):hge 
address CMDvarCONVERT;
comment Cast VALUE to hge

pattern calc.hge(v:oid):hge 
address CMDvarCONVERT;
comment Cast VALUE to hge

pattern calc.hge(v:dbl):hge 
address CMDvarCONVERT;
comment Cast VALUE to hge

pattern calc.hge(v:flt):hge 
address CMDvarCONVERT;
comment Cast VALUE to hge

pattern calc.hge(v:hge):hge 
address CMDvarCONVERT;
comment Cast VALUE to hge

pattern calc.hge(v:lng):hge 
address CMDvarCONVERT;
comment Cast VALUE to hge

pattern calc.hge(v:wrd):hge 
address CMDvarCONVERT;
comment Cast VALUE to hge

pattern calc.hge(v:int):hge 
address CMDvarCONVERT;
comment Cast VALUE to hge

pattern calc.hge(v:sht):hge 
address CMDvarCONVERT;
comment Cast VALUE to hge

pattern calc.hge(v:bte):hge 
address CMDvarCONVERT;
comment Cast VALUE to hge

pattern calc.hge(v:bit):hge 
address CMDvarCONVERT;
comment Cast VALUE to hge

pattern calc.hge(v:void):hge 
address CMDvarCONVERT;
comment Cast VALUE to hge

command calc.int(s1:int,v:hge,d2:int,s2:int):int 
address hge_dec2dec_int;
comment cast decimal(hge) to decimal(int) and check for overflow

command calc.int(s1:int,v:hge):int 
address hge_dec2_int;
comment cast decimal(hge) to int and check for overflow

command calc.int(v:hge,digits:int,scale:int):int 
address hge_num2dec_int;
comment cast number to decimal(int) and check for overflow

command calc.int(s1:int,v:lng,d2:int,s2:int):int 
address lng_dec2dec_int;
comment cast decimal(lng) to decimal(int) and check for overflow

command calc.int(s1:int,v:lng):int 
address lng_dec2_int;
comment cast decimal(lng) to int and check for overflow

command calc.int(v:lng,digits:int,scale:int):int 
address lng_num2dec_int;
comment cast number to decimal(int) and check for overflow

command calc.int(s1:int,v:wrd,d2:int,s2:int):int 
address wrd_dec2dec_int;
comment cast decimal(wrd) to decimal(int) and check for overflow

command calc.int(s1:int,v:wrd):int 
address wrd_dec2_int;
comment cast decimal(wrd) to int and check for overflow

command calc.int(v:wrd,digits:int,scale:int):int 
address wrd_num2dec_int;
comment cast number to decimal(int) and check for overflow

command calc.int(s1:int,v:int,d2:int,s2:int):int 
address int_dec2dec_int;
comment cast decimal(int) to decimal(int) and check for overflow

command calc.int(s1:int,v:int):int 
address int_dec2_int;
comment cast decimal(int) to int and check for overflow

command calc.int(v:int,digits:int,scale:int):int 
address int_num2dec_int;
comment cast number to decimal(int) and check for overflow

command calc.int(s1:int,v:sht,d2:int,s2:int):int 
address sht_dec2dec_int;
comment cast decimal(sht) to decimal(int) and check for overflow

command calc.int(s1:int,v:sht):int 
address sht_dec2_int;
comment cast decimal(sht) to int and check for overflow

command calc.int(v:sht,digits:int,scale:int):int 
address sht_num2dec_int;
comment cast number to decimal(int) and check for overflow

command calc.int(s1:int,v:bte,d2:int,s2:int):int 
address bte_dec2dec_int;
comment cast decimal(bte) to decimal(int) and check for overflow

command calc.int(s1:int,v:bte):int 
address bte_dec2_int;
comment cast decimal(bte) to int and check for overflow

command calc.int(v:bte,digits:int,scale:int):int 
address bte_num2dec_int;
comment cast number to decimal(int) and check for overflow

command calc.int(v:dbl,digits:int,scale:int):int 
address dbl_num2dec_int;
comment cast number to decimal(int) and check for overflow

command calc.int(v:flt,digits:int,scale:int):int 
address flt_num2dec_int;
comment cast number to decimal(int) and check for overflow

command calc.index(v:str,u:bit):int 
address STRindex_int;
comment Return the offsets as an index bat

command calc.index(v:str,u:bit):sht 
address STRindex_sht;
comment Return the offsets as an index bat

command calc.index(v:str,u:bit):bte 
address STRindex_bte;
comment Return the offsets as an index bat

command calc.int(v:str,digits:int,scale:int):int 
address str_2dec_int;
comment cast to dec(int) and check for overflow

command calc.int(v:str,digits:int):int 
address str_2num_int;
comment cast to int and check for overflow

command calc.int(v:void,digits:int,scale:int):int 
address nil_2dec_int;
comment cast to dec(int) and check for overflow

command calc.int(v:void,digits:int):int 
address nil_2num_int;
comment cast to int and check for overflow

command calc.identity(X_1:any_2):oid 
address SQLidentity;
comment Returns a unique row identitfier.

command calc.isnil(v:wkb):bit 
address wkbIsnil;
comment Nil test for wkb value

pattern calc.ifthenelse(b:bit,t:any_1,f:any_1):any_1 
address CALCswitchbit;
comment If VALUE is true return MIDDLE else RIGHT

pattern calc.int(v:str):int 
address CMDvarCONVERT;
comment Cast VALUE to int

pattern calc.int(v:oid):int 
address CMDvarCONVERT;
comment Cast VALUE to int

pattern calc.int(v:dbl):int 
address CMDvarCONVERT;
comment Cast VALUE to int

pattern calc.int(v:flt):int 
address CMDvarCONVERT;
comment Cast VALUE to int

pattern calc.int(v:lng):int 
address CMDvarCONVERT;
comment Cast VALUE to int

pattern calc.int(v:wrd):int 
address CMDvarCONVERT;
comment Cast VALUE to int

pattern calc.int(v:int):int 
address CMDvarCONVERT;
comment Cast VALUE to int

pattern calc.int(v:sht):int 
address CMDvarCONVERT;
comment Cast VALUE to int

pattern calc.int(v:bte):int 
address CMDvarCONVERT;
comment Cast VALUE to int

pattern calc.int(v:bit):int 
address CMDvarCONVERT;
comment Cast VALUE to int

pattern calc.int(v:void):int 
address CMDvarCONVERT;
comment Cast VALUE to int

pattern calc.isnotnil(v:BAT):bit 
address CMDvarISNOTNIL;
comment Unary check for notnil of V

pattern calc.isnotnil(v:str):bit 
address CMDvarISNOTNIL;
comment Unary check for notnil of V

pattern calc.isnotnil(v:oid):bit 
address CMDvarISNOTNIL;
comment Unary check for notnil of V

pattern calc.isnotnil(v:dbl):bit 
address CMDvarISNOTNIL;
comment Unary check for notnil of V

pattern calc.isnotnil(v:flt):bit 
address CMDvarISNOTNIL;
comment Unary check for notnil of V

pattern calc.isnotnil(v:lng):bit 
address CMDvarISNOTNIL;
comment Unary check for notnil of V

pattern calc.isnotnil(v:wrd):bit 
address CMDvarISNOTNIL;
comment Unary check for notnil of V

pattern calc.isnotnil(v:int):bit 
address CMDvarISNOTNIL;
comment Unary check for notnil of V

pattern calc.isnotnil(v:sht):bit 
address CMDvarISNOTNIL;
comment Unary check for notnil of V

pattern calc.isnotnil(v:bte):bit 
address CMDvarISNOTNIL;
comment Unary check for notnil of V

pattern calc.isnotnil(v:bit):bit 
address CMDvarISNOTNIL;
comment Unary check for notnil of V

pattern calc.isnotnil(v:void):bit 
address CMDvarISNOTNIL;
comment Unary check for notnil of V

pattern calc.isnil(v:BAT):bit 
address CMDvarISNIL;
comment Unary check for nil of V

pattern calc.isnil(v:str):bit 
address CMDvarISNIL;
comment Unary check for nil of V

pattern calc.isnil(v:oid):bit 
address CMDvarISNIL;
comment Unary check for nil of V

pattern calc.isnil(v:dbl):bit 
address CMDvarISNIL;
comment Unary check for nil of V

pattern calc.isnil(v:flt):bit 
address CMDvarISNIL;
comment Unary check for nil of V

pattern calc.isnil(v:lng):bit 
address CMDvarISNIL;
comment Unary check for nil of V

pattern calc.isnil(v:wrd):bit 
address CMDvarISNIL;
comment Unary check for nil of V

pattern calc.isnil(v:int):bit 
address CMDvarISNIL;
comment Unary check for nil of V

pattern calc.isnil(v:sht):bit 
address CMDvarISNIL;
comment Unary check for nil of V

pattern calc.isnil(v:bte):bit 
address CMDvarISNIL;
comment Unary check for nil of V

pattern calc.isnil(v:bit):bit 
address CMDvarISNIL;
comment Unary check for nil of V

pattern calc.isnil(v:void):bit 
address CMDvarISNIL;
comment Unary check for nil of V

pattern calc.iszero(v:dbl):bit 
address CMDvarISZERO;
comment Unary check for zero of V

pattern calc.iszero(v:flt):bit 
address CMDvarISZERO;
comment Unary check for zero of V

pattern calc.iszero(v:lng):bit 
address CMDvarISZERO;
comment Unary check for zero of V

pattern calc.iszero(v:wrd):bit 
address CMDvarISZERO;
comment Unary check for zero of V

pattern calc.iszero(v:int):bit 
address CMDvarISZERO;
comment Unary check for zero of V

pattern calc.iszero(v:sht):bit 
address CMDvarISZERO;
comment Unary check for zero of V

pattern calc.iszero(v:bte):bit 
address CMDvarISZERO;
comment Unary check for zero of V

pattern calc.int(v:hge):int 
address CMDvarCONVERT;
comment Cast VALUE to int

pattern calc.isnotnil(v:hge):bit 
address CMDvarISNOTNIL;
comment Unary check for notnil of V

pattern calc.isnil(v:hge):bit 
address CMDvarISNIL;
comment Unary check for nil of V

pattern calc.iszero(v:hge):bit 
address CMDvarISZERO;
comment Unary check for zero of V

command calc.isnil(v:inet):bit 
address INET_isnil;
comment Nil test for inet value

command calc.inet(s:str):inet 
address INET_fromstr;
comment Convert a string to an inet

command calc.inet(s:inet):inet 
address INET_inet;
comment Convert a inet to an inet

pattern calc.isnil(v:timestamp):bit 
address CMDvarISNIL;
comment Nil test for timestamp value

pattern calc.isnil(v:daytime):bit 
address CMDvarISNIL;
comment Nil test for daytime value

pattern calc.isnil(v:date):bit 
address CMDvarISNIL;
comment Nil test for date value

pattern calc.isnil(v:json):bit 
address CMDvarISNIL;
comment Nil test for json value

command calc.isnil(v:sqlblob):bit 
address BLOB_isnil;
comment Nil test for blob value

command calc.isnil(v:blob):bit 
address BLOB_isnil;
comment Nil test for blob value

command calc.json(j:json):json 
address JSONstr2json;
comment Convert JSON to JSON. Dealing with escape characters

command calc.json(j:str):json 
address JSONstr2json;
comment Convert string to its JSON. Dealing with escape characters

command calc.lng(s1:int,v:hge,d2:int,s2:int):lng 
address hge_dec2dec_lng;
comment cast decimal(hge) to decimal(lng) and check for overflow

command calc.lng(s1:int,v:hge):lng 
address hge_dec2_lng;
comment cast decimal(hge) to lng and check for overflow

command calc.lng(v:hge,digits:int,scale:int):lng 
address hge_num2dec_lng;
comment cast number to decimal(lng) and check for overflow

command calc.lng(s1:int,v:lng,d2:int,s2:int):lng 
address lng_dec2dec_lng;
comment cast decimal(lng) to decimal(lng) and check for overflow

command calc.lng(s1:int,v:lng):lng 
address lng_dec2_lng;
comment cast decimal(lng) to lng and check for overflow

command calc.lng(v:lng,digits:int,scale:int):lng 
address lng_num2dec_lng;
comment cast number to decimal(lng) and check for overflow

command calc.lng(s1:int,v:wrd,d2:int,s2:int):lng 
address wrd_dec2dec_lng;
comment cast decimal(wrd) to decimal(lng) and check for overflow

command calc.lng(s1:int,v:wrd):lng 
address wrd_dec2_lng;
comment cast decimal(wrd) to lng and check for overflow

command calc.lng(v:wrd,digits:int,scale:int):lng 
address wrd_num2dec_lng;
comment cast number to decimal(lng) and check for overflow

command calc.lng(s1:int,v:int,d2:int,s2:int):lng 
address int_dec2dec_lng;
comment cast decimal(int) to decimal(lng) and check for overflow

command calc.lng(s1:int,v:int):lng 
address int_dec2_lng;
comment cast decimal(int) to lng and check for overflow

command calc.lng(v:int,digits:int,scale:int):lng 
address int_num2dec_lng;
comment cast number to decimal(lng) and check for overflow

command calc.lng(s1:int,v:sht,d2:int,s2:int):lng 
address sht_dec2dec_lng;
comment cast decimal(sht) to decimal(lng) and check for overflow

command calc.lng(s1:int,v:sht):lng 
address sht_dec2_lng;
comment cast decimal(sht) to lng and check for overflow

command calc.lng(v:sht,digits:int,scale:int):lng 
address sht_num2dec_lng;
comment cast number to decimal(lng) and check for overflow

command calc.lng(s1:int,v:bte,d2:int,s2:int):lng 
address bte_dec2dec_lng;
comment cast decimal(bte) to decimal(lng) and check for overflow

command calc.lng(s1:int,v:bte):lng 
address bte_dec2_lng;
comment cast decimal(bte) to lng and check for overflow

command calc.lng(v:bte,digits:int,scale:int):lng 
address bte_num2dec_lng;
comment cast number to decimal(lng) and check for overflow

command calc.lng(v:dbl,digits:int,scale:int):lng 
address dbl_num2dec_lng;
comment cast number to decimal(lng) and check for overflow

command calc.lng(v:flt,digits:int,scale:int):lng 
address flt_num2dec_lng;
comment cast number to decimal(lng) and check for overflow

command calc.lng(v:str,digits:int,scale:int):lng 
address str_2dec_lng;
comment cast to dec(lng) and check for overflow

command calc.lng(v:str,digits:int):lng 
address str_2num_lng;
comment cast to lng and check for overflow

command calc.lng(v:void,digits:int,scale:int):lng 
address nil_2dec_lng;
comment cast to dec(lng) and check for overflow

command calc.lng(v:void,digits:int):lng 
address nil_2num_lng;
comment cast to lng and check for overflow

function calc.linestring{unsafe}(wkt:str):wkb;
command calc.length(s:str):int 
address CMDstrlength;
comment Length of STRING

pattern calc.lng(v:str):lng 
address CMDvarCONVERT;
comment Cast VALUE to lng

pattern calc.lng(v:oid):lng 
address CMDvarCONVERT;
comment Cast VALUE to lng

pattern calc.lng(v:dbl):lng 
address CMDvarCONVERT;
comment Cast VALUE to lng

pattern calc.lng(v:flt):lng 
address CMDvarCONVERT;
comment Cast VALUE to lng

pattern calc.lng(v:lng):lng 
address CMDvarCONVERT;
comment Cast VALUE to lng

pattern calc.lng(v:wrd):lng 
address CMDvarCONVERT;
comment Cast VALUE to lng

pattern calc.lng(v:int):lng 
address CMDvarCONVERT;
comment Cast VALUE to lng

pattern calc.lng(v:sht):lng 
address CMDvarCONVERT;
comment Cast VALUE to lng

pattern calc.lng(v:bte):lng 
address CMDvarCONVERT;
comment Cast VALUE to lng

pattern calc.lng(v:bit):lng 
address CMDvarCONVERT;
comment Cast VALUE to lng

pattern calc.lng(v:void):lng 
address CMDvarCONVERT;
comment Cast VALUE to lng

pattern calc.lsh_noerror(v1:lng,v2:lng):lng 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:lng,v2:wrd):lng 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:lng,v2:int):lng 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:lng,v2:sht):lng 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:lng,v2:bte):lng 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:wrd,v2:lng):wrd 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:wrd,v2:wrd):wrd 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:wrd,v2:int):wrd 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:wrd,v2:sht):wrd 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:wrd,v2:bte):wrd 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:int,v2:lng):int 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:int,v2:wrd):int 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:int,v2:int):int 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:int,v2:sht):int 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:int,v2:bte):int 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:sht,v2:lng):sht 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:sht,v2:wrd):sht 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:sht,v2:int):sht 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:sht,v2:sht):sht 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:sht,v2:bte):sht 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:bte,v2:lng):bte 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:bte,v2:wrd):bte 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:bte,v2:int):bte 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:bte,v2:sht):bte 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:bte,v2:bte):bte 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lng(v:hge):lng 
address CMDvarCONVERT;
comment Cast VALUE to lng

pattern calc.lsh_noerror(v1:hge,v2:hge):hge 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:hge,v2:lng):hge 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:hge,v2:wrd):hge 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:hge,v2:int):hge 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:hge,v2:sht):hge 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:hge,v2:bte):hge 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:lng,v2:hge):lng 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:wrd,v2:hge):wrd 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:int,v2:hge):int 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:sht,v2:hge):sht 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.lsh_noerror(v1:bte,v2:hge):bte 
address CMDvarLSH;
comment Return V1 << V2, out of range second operand causes NIL value

pattern calc.month_interval(v:hge,ek:int,sk:int):int 
address month_interval;
comment cast hge to a month_interval and check for overflow

pattern calc.month_interval(v:lng,ek:int,sk:int):int 
address month_interval;
comment cast lng to a month_interval and check for overflow

pattern calc.month_interval(v:wrd,ek:int,sk:int):int 
address month_interval;
comment cast wrd to a month_interval and check for overflow

pattern calc.month_interval(v:int,ek:int,sk:int):int 
address month_interval;
comment cast int to a month_interval and check for overflow

pattern calc.month_interval(v:sht,ek:int,sk:int):int 
address month_interval;
comment cast sht to a month_interval and check for overflow

pattern calc.month_interval(v:bte,ek:int,sk:int):int 
address month_interval;
comment cast bte to a month_interval and check for overflow

command calc.month_interval(v:str,ek:int,sk:int):int 
address month_interval_str;
comment cast str to a month_interval and check for overflow

function calc.multipolygon{unsafe}(wkt:str):wkb;
function calc.multisurface{unsafe}(wkt:str):wkb;
function calc.multilinestring{unsafe}(wkt:str):wkb;
function calc.multicurve{unsafe}(wkt:str):wkb;
function calc.multipoint{unsafe}(wkt:str):wkb;
command calc.mbr(v:mbr):mbr 
address mbrFromMBR;
command calc.mbr{unsafe}(v:str):mbr 
address mbrFromString;
pattern calc.max_no_nil(v1:oid,v2:oid):oid 
address CALCmax_no_nil;
comment Return max of V1 and V2, ignoring nil values

pattern calc.max_no_nil(v1:dbl,v2:dbl):dbl 
address CALCmax_no_nil;
comment Return max of V1 and V2, ignoring nil values

pattern calc.max_no_nil(v1:flt,v2:flt):flt 
address CALCmax_no_nil;
comment Return max of V1 and V2, ignoring nil values

pattern calc.max_no_nil(v1:lng,v2:lng):lng 
address CALCmax_no_nil;
comment Return max of V1 and V2, ignoring nil values

pattern calc.max_no_nil(v1:wrd,v2:wrd):wrd 
address CALCmax_no_nil;
comment Return max of V1 and V2, ignoring nil values

pattern calc.max_no_nil(v1:int,v2:int):int 
address CALCmax_no_nil;
comment Return max of V1 and V2, ignoring nil values

pattern calc.max_no_nil(v1:sht,v2:sht):sht 
address CALCmax_no_nil;
comment Return max of V1 and V2, ignoring nil values

pattern calc.max_no_nil(v1:bte,v2:bte):bte 
address CALCmax_no_nil;
comment Return max of V1 and V2, ignoring nil values

pattern calc.max_no_nil(v1:bit,v2:bit):bit 
address CALCmax_no_nil;
comment Return max of V1 and V2, ignoring nil values

pattern calc.max(v1:oid,v2:oid):oid 
address CALCmax;
comment Return max of V1 and V2

pattern calc.max(v1:dbl,v2:dbl):dbl 
address CALCmax;
comment Return max of V1 and V2

pattern calc.max(v1:flt,v2:flt):flt 
address CALCmax;
comment Return max of V1 and V2

pattern calc.max(v1:lng,v2:lng):lng 
address CALCmax;
comment Return max of V1 and V2

pattern calc.max(v1:wrd,v2:wrd):wrd 
address CALCmax;
comment Return max of V1 and V2

pattern calc.max(v1:int,v2:int):int 
address CALCmax;
comment Return max of V1 and V2

pattern calc.max(v1:sht,v2:sht):sht 
address CALCmax;
comment Return max of V1 and V2

pattern calc.max(v1:bte,v2:bte):bte 
address CALCmax;
comment Return max of V1 and V2

pattern calc.max(v1:bit,v2:bit):bit 
address CALCmax;
comment Return max of V1 and V2

pattern calc.min_no_nil(v1:oid,v2:oid):oid 
address CALCmin_no_nil;
comment Return min of V1 and V2, ignoring nil values

pattern calc.min_no_nil(v1:dbl,v2:dbl):dbl 
address CALCmin_no_nil;
comment Return min of V1 and V2, ignoring nil values

pattern calc.min_no_nil(v1:flt,v2:flt):flt 
address CALCmin_no_nil;
comment Return min of V1 and V2, ignoring nil values

pattern calc.min_no_nil(v1:lng,v2:lng):lng 
address CALCmin_no_nil;
comment Return min of V1 and V2, ignoring nil values

pattern calc.min_no_nil(v1:wrd,v2:wrd):wrd 
address CALCmin_no_nil;
comment Return min of V1 and V2, ignoring nil values

pattern calc.min_no_nil(v1:int,v2:int):int 
address CALCmin_no_nil;
comment Return min of V1 and V2, ignoring nil values

pattern calc.min_no_nil(v1:sht,v2:sht):sht 
address CALCmin_no_nil;
comment Return min of V1 and V2, ignoring nil values

pattern calc.min_no_nil(v1:bte,v2:bte):bte 
address CALCmin_no_nil;
comment Return min of V1 and V2, ignoring nil values

pattern calc.min_no_nil(v1:bit,v2:bit):bit 
address CALCmin_no_nil;
comment Return min of V1 and V2, ignoring nil values

pattern calc.min(v1:oid,v2:oid):oid 
address CALCmin;
comment Return min of V1 and V2

pattern calc.min(v1:dbl,v2:dbl):dbl 
address CALCmin;
comment Return min of V1 and V2

pattern calc.min(v1:flt,v2:flt):flt 
address CALCmin;
comment Return min of V1 and V2

pattern calc.min(v1:lng,v2:lng):lng 
address CALCmin;
comment Return min of V1 and V2

pattern calc.min(v1:wrd,v2:wrd):wrd 
address CALCmin;
comment Return min of V1 and V2

pattern calc.min(v1:int,v2:int):int 
address CALCmin;
comment Return min of V1 and V2

pattern calc.min(v1:sht,v2:sht):sht 
address CALCmin;
comment Return min of V1 and V2

pattern calc.min(v1:bte,v2:bte):bte 
address CALCmin;
comment Return min of V1 and V2

pattern calc.min(v1:bit,v2:bit):bit 
address CALCmin;
comment Return min of V1 and V2

pattern calc.mod_noerror(v1:dbl,v2:dbl):dbl 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:dbl,v2:flt):dbl 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:dbl,v2:lng):dbl 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:dbl,v2:wrd):dbl 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:dbl,v2:int):dbl 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:dbl,v2:sht):dbl 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:dbl,v2:bte):dbl 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:flt,v2:dbl):dbl 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:flt,v2:flt):flt 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:flt,v2:lng):flt 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:flt,v2:wrd):flt 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:flt,v2:int):flt 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:flt,v2:sht):flt 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:flt,v2:bte):flt 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:lng,v2:dbl):dbl 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:lng,v2:flt):flt 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:lng,v2:lng):lng 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:lng,v2:wrd):wrd 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:lng,v2:int):int 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:lng,v2:sht):sht 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:lng,v2:bte):bte 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:wrd,v2:dbl):dbl 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:wrd,v2:flt):flt 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:wrd,v2:lng):wrd 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:wrd,v2:wrd):wrd 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:wrd,v2:int):int 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:wrd,v2:sht):sht 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:wrd,v2:bte):bte 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:int,v2:dbl):dbl 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:int,v2:flt):flt 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:int,v2:lng):int 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:int,v2:wrd):int 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:int,v2:int):int 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:int,v2:sht):sht 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:int,v2:bte):bte 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:sht,v2:dbl):dbl 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:sht,v2:flt):flt 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:sht,v2:lng):sht 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:sht,v2:wrd):sht 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:sht,v2:int):sht 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:sht,v2:sht):sht 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:sht,v2:bte):bte 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:bte,v2:dbl):dbl 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:bte,v2:flt):flt 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:bte,v2:lng):bte 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:bte,v2:wrd):bte 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:bte,v2:int):bte 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:bte,v2:sht):bte 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:bte,v2:bte):bte 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mul_noerror(v1:dbl,v2:dbl):dbl 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:dbl,v2:flt):dbl 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:dbl,v2:lng):dbl 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:dbl,v2:wrd):dbl 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:dbl,v2:int):dbl 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:dbl,v2:sht):dbl 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:dbl,v2:bte):dbl 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:flt,v2:dbl):dbl 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:flt,v2:flt):flt 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:flt,v2:lng):flt 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:flt,v2:wrd):flt 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:flt,v2:int):flt 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:flt,v2:sht):flt 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:flt,v2:bte):flt 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:lng,v2:dbl):dbl 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:lng,v2:flt):flt 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:lng,v2:lng):lng 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:lng,v2:wrd):lng 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:lng,v2:int):lng 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:lng,v2:sht):lng 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:lng,v2:bte):lng 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:wrd,v2:dbl):dbl 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:wrd,v2:flt):flt 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:wrd,v2:lng):lng 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:wrd,v2:wrd):wrd 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:wrd,v2:int):wrd 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:wrd,v2:sht):wrd 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:wrd,v2:bte):wrd 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:int,v2:dbl):dbl 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:int,v2:flt):flt 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:int,v2:lng):lng 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:int,v2:wrd):wrd 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:int,v2:int):int 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:int,v2:sht):int 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:int,v2:bte):int 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:sht,v2:dbl):dbl 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:sht,v2:flt):flt 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:sht,v2:lng):lng 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:sht,v2:wrd):wrd 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:sht,v2:int):int 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:sht,v2:sht):sht 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:sht,v2:bte):sht 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:bte,v2:dbl):dbl 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:bte,v2:flt):flt 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:bte,v2:lng):lng 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:bte,v2:wrd):wrd 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:bte,v2:int):int 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:bte,v2:sht):sht 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:bte,v2:bte):bte 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.max_no_nil(v1:hge,v2:hge):hge 
address CALCmax_no_nil;
comment Return max of V1 and V2, ignoring nil values

pattern calc.max(v1:hge,v2:hge):hge 
address CALCmax;
comment Return max of V1 and V2

pattern calc.min_no_nil(v1:hge,v2:hge):hge 
address CALCmin_no_nil;
comment Return min of V1 and V2, ignoring nil values

pattern calc.min(v1:hge,v2:hge):hge 
address CALCmin;
comment Return min of V1 and V2

pattern calc.mod_noerror(v1:dbl,v2:hge):dbl 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:flt,v2:hge):flt 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:hge,v2:dbl):dbl 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:hge,v2:flt):flt 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:hge,v2:hge):hge 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:hge,v2:lng):lng 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:hge,v2:wrd):wrd 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:hge,v2:int):int 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:hge,v2:sht):sht 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:hge,v2:bte):bte 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:lng,v2:hge):lng 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:wrd,v2:hge):wrd 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:int,v2:hge):int 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:sht,v2:hge):sht 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mod_noerror(v1:bte,v2:hge):bte 
address CMDvarMOD;
comment Return V1 % V2, divide by zero causes NIL value

pattern calc.mul_noerror(v1:dbl,v2:hge):dbl 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:flt,v2:hge):flt 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:hge,v2:dbl):dbl 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:hge,v2:flt):flt 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:hge,v2:hge):hge 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:hge,v2:lng):hge 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:hge,v2:wrd):hge 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:hge,v2:int):hge 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:hge,v2:sht):hge 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:hge,v2:bte):hge 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:lng,v2:hge):hge 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:wrd,v2:hge):hge 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:int,v2:hge):hge 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:sht,v2:hge):hge 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.mul_noerror(v1:bte,v2:hge):hge 
address CMDvarMUL;
comment Return V1 * V2, overflow causes NIL value

pattern calc.max_no_nil(v:timestamp,w:timestamp):timestamp 
address CALCmax_no_nil;
comment Maximum test for timestamp value

pattern calc.min_no_nil(v:timestamp,w:timestamp):timestamp 
address CALCmin_no_nil;
comment Minimum test for timestamp value

pattern calc.max(v:timestamp,w:timestamp):timestamp 
address CALCmax;
comment Maximum test for timestamp value

pattern calc.min(v:timestamp,w:timestamp):timestamp 
address CALCmin;
comment Minimum test for timestamp value

pattern calc.max_no_nil(v:daytime,w:daytime):daytime 
address CALCmax_no_nil;
comment Maximum test for daytime value

pattern calc.min_no_nil(v:daytime,w:daytime):daytime 
address CALCmin_no_nil;
comment Minimum test for daytime value

pattern calc.max(v:daytime,w:daytime):daytime 
address CALCmax;
comment Maximum test for daytime value

pattern calc.min(v:daytime,w:daytime):daytime 
address CALCmin;
comment Minimum test for daytime value

pattern calc.max_no_nil(v:date,w:date):date 
address CALCmax_no_nil;
comment Maximum test for date value

pattern calc.min_no_nil(v:date,w:date):date 
address CALCmin_no_nil;
comment Minimum test for date value

pattern calc.max(v:date,w:date):date 
address CALCmax;
comment Maximum test for date value

pattern calc.min(v:date,w:date):date 
address CALCmin;
comment Minimum test for date value

command calc.min_no_nil(s:str,t:str):str 
address STRmin_no_nil;
comment Select the minimum string in lexicographic order, ignoring nils

command calc.min(s:str,t:str):str 
address STRmin;
comment Select the minimum string in lexicographic order

command calc.max_no_nil(s:str,t:str):str 
address STRmax_no_nil;
comment Select the maximum string in lexicographic order, ignoring nils

command calc.max(s:str,t:str):str 
address STRmax;
comment Select the maximum string in lexicographic order

pattern calc.not(v:lng):lng 
address CMDvarNOT;
comment Unary bitwise not of V

pattern calc.not(v:wrd):wrd 
address CMDvarNOT;
comment Unary bitwise not of V

pattern calc.not(v:int):int 
address CMDvarNOT;
comment Unary bitwise not of V

pattern calc.not(v:sht):sht 
address CMDvarNOT;
comment Unary bitwise not of V

pattern calc.not(v:bte):bte 
address CMDvarNOT;
comment Unary bitwise not of V

pattern calc.not(v:bit):bit 
address CMDvarNOT;
comment Return the Boolean inverse

pattern calc.not(v:hge):hge 
address CMDvarNOT;
comment Unary bitwise not of V

pattern calc.oid(v:str):oid 
address CMDvarCONVERT;
comment Cast VALUE to oid

pattern calc.oid(v:oid):oid 
address CMDvarCONVERT;
comment Cast VALUE to oid

pattern calc.oid(v:dbl):oid 
address CMDvarCONVERT;
comment Cast VALUE to oid

pattern calc.oid(v:flt):oid 
address CMDvarCONVERT;
comment Cast VALUE to oid

pattern calc.oid(v:lng):oid 
address CMDvarCONVERT;
comment Cast VALUE to oid

pattern calc.oid(v:wrd):oid 
address CMDvarCONVERT;
comment Cast VALUE to oid

pattern calc.oid(v:int):oid 
address CMDvarCONVERT;
comment Cast VALUE to oid

pattern calc.oid(v:sht):oid 
address CMDvarCONVERT;
comment Cast VALUE to oid

pattern calc.oid(v:bte):oid 
address CMDvarCONVERT;
comment Cast VALUE to oid

pattern calc.oid(v:bit):oid 
address CMDvarCONVERT;
comment Cast VALUE to oid

pattern calc.oid(v:void):oid 
address CMDvarCONVERT;
comment Cast VALUE to oid

pattern calc.or(v1:lng,v2:lng):lng 
address CMDvarOR;
comment Return V1 OR V2

pattern calc.or(v1:wrd,v2:wrd):wrd 
address CMDvarOR;
comment Return V1 OR V2

pattern calc.or(v1:int,v2:int):int 
address CMDvarOR;
comment Return V1 OR V2

pattern calc.or(v1:sht,v2:sht):sht 
address CMDvarOR;
comment Return V1 OR V2

pattern calc.or(v1:bte,v2:bte):bte 
address CMDvarOR;
comment Return V1 OR V2

pattern calc.or(v1:bit,v2:bit):bit 
address CMDvarOR;
comment Return V1 OR V2

pattern calc.oid(v:hge):oid 
address CMDvarCONVERT;
comment Cast VALUE to oid

pattern calc.or(v1:hge,v2:hge):hge 
address CMDvarOR;
comment Return V1 OR V2

function calc.polygon{unsafe}(wkt:str):wkb;
function calc.point{unsafe}(wkt:str):wkb;
command calc.ptr(v:ptr):ptr 
address CMDvarCONVERTptr;
comment Cast VALUE to ptr

command calc.rowid(v:any_1,schema:str,table:str):oid 
address sql_rowid;
comment return the next rowid

pattern calc.rotate_xor_hash(h:wrd,nbits:int,v:any_1):wrd 
address MKEYrotate_xor_hash;
pattern calc.rsh_noerror(v1:lng,v2:lng):lng 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:lng,v2:wrd):lng 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:lng,v2:int):lng 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:lng,v2:sht):lng 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:lng,v2:bte):lng 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:wrd,v2:lng):wrd 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:wrd,v2:wrd):wrd 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:wrd,v2:int):wrd 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:wrd,v2:sht):wrd 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:wrd,v2:bte):wrd 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:int,v2:lng):int 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:int,v2:wrd):int 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:int,v2:int):int 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:int,v2:sht):int 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:int,v2:bte):int 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:sht,v2:lng):sht 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:sht,v2:wrd):sht 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:sht,v2:int):sht 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:sht,v2:sht):sht 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:sht,v2:bte):sht 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:bte,v2:lng):bte 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:bte,v2:wrd):bte 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:bte,v2:int):bte 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:bte,v2:sht):bte 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:bte,v2:bte):bte 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:hge,v2:hge):hge 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:hge,v2:lng):hge 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:hge,v2:wrd):hge 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:hge,v2:int):hge 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:hge,v2:sht):hge 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:hge,v2:bte):hge 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:lng,v2:hge):lng 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:wrd,v2:hge):wrd 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:int,v2:hge):int 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:sht,v2:hge):sht 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

pattern calc.rsh_noerror(v1:bte,v2:hge):bte 
address CMDvarRSH;
comment Return V1 >> V2, out of range second operand causes NIL value

command calc.sht(s1:int,v:hge,d2:int,s2:int):sht 
address hge_dec2dec_sht;
comment cast decimal(hge) to decimal(sht) and check for overflow

command calc.sht(s1:int,v:hge):sht 
address hge_dec2_sht;
comment cast decimal(hge) to sht and check for overflow

command calc.sht(v:hge,digits:int,scale:int):sht 
address hge_num2dec_sht;
comment cast number to decimal(sht) and check for overflow

pattern calc.second_interval(v:hge,ek:int,sk:int):lng 
address second_interval;
comment cast hge to a second_interval and check for overflow

command calc.second_interval(sc:int,v:hge,ek:int,sk:int):lng 
address hge_dec2second_interval;
comment cast hge decimal to a second_interval

command calc.sht(s1:int,v:lng,d2:int,s2:int):sht 
address lng_dec2dec_sht;
comment cast decimal(lng) to decimal(sht) and check for overflow

command calc.sht(s1:int,v:lng):sht 
address lng_dec2_sht;
comment cast decimal(lng) to sht and check for overflow

command calc.sht(v:lng,digits:int,scale:int):sht 
address lng_num2dec_sht;
comment cast number to decimal(sht) and check for overflow

command calc.sht(s1:int,v:wrd,d2:int,s2:int):sht 
address wrd_dec2dec_sht;
comment cast decimal(wrd) to decimal(sht) and check for overflow

command calc.sht(s1:int,v:wrd):sht 
address wrd_dec2_sht;
comment cast decimal(wrd) to sht and check for overflow

command calc.sht(v:wrd,digits:int,scale:int):sht 
address wrd_num2dec_sht;
comment cast number to decimal(sht) and check for overflow

command calc.sht(s1:int,v:int,d2:int,s2:int):sht 
address int_dec2dec_sht;
comment cast decimal(int) to decimal(sht) and check for overflow

command calc.sht(s1:int,v:int):sht 
address int_dec2_sht;
comment cast decimal(int) to sht and check for overflow

command calc.sht(v:int,digits:int,scale:int):sht 
address int_num2dec_sht;
comment cast number to decimal(sht) and check for overflow

command calc.sht(s1:int,v:sht,d2:int,s2:int):sht 
address sht_dec2dec_sht;
comment cast decimal(sht) to decimal(sht) and check for overflow

command calc.sht(s1:int,v:sht):sht 
address sht_dec2_sht;
comment cast decimal(sht) to sht and check for overflow

command calc.sht(v:sht,digits:int,scale:int):sht 
address sht_num2dec_sht;
comment cast number to decimal(sht) and check for overflow

command calc.sht(s1:int,v:bte,d2:int,s2:int):sht 
address bte_dec2dec_sht;
comment cast decimal(bte) to decimal(sht) and check for overflow

command calc.sht(s1:int,v:bte):sht 
address bte_dec2_sht;
comment cast decimal(bte) to sht and check for overflow

command calc.sht(v:bte,digits:int,scale:int):sht 
address bte_num2dec_sht;
comment cast number to decimal(sht) and check for overflow

command calc.sht(v:dbl,digits:int,scale:int):sht 
address dbl_num2dec_sht;
comment cast number to decimal(sht) and check for overflow

command calc.sht(v:flt,digits:int,scale:int):sht 
address flt_num2dec_sht;
comment cast number to decimal(sht) and check for overflow

command calc.strings(v:str):str 
address STRstrings;
comment Return the strings

command calc.second_interval(v:daytime,ek:int,sk:int):lng 
address second_interval_daytime;
comment cast daytime to a second_interval and check for overflow

pattern calc.second_interval(v:lng,ek:int,sk:int):lng 
address second_interval;
comment cast lng to a second_interval and check for overflow

pattern calc.second_interval(v:wrd,ek:int,sk:int):lng 
address second_interval;
comment cast wrd to a second_interval and check for overflow

pattern calc.second_interval(v:int,ek:int,sk:int):lng 
address second_interval;
comment cast int to a second_interval and check for overflow

pattern calc.second_interval(v:sht,ek:int,sk:int):lng 
address second_interval;
comment cast sht to a second_interval and check for overflow

pattern calc.second_interval(v:bte,ek:int,sk:int):lng 
address second_interval;
comment cast bte to a second_interval and check for overflow

command calc.second_interval(v:str,ek:int,sk:int):lng 
address second_interval_str;
comment cast str to a second_interval and check for overflow

command calc.substring(s:str,offset:int,count:int):str 
address STRsubstring;
command calc.substring(s:str,offset:int):str 
address STRsubstringTail;
pattern calc.str(eclass:int,d1:int,s1:int,has_tz:int,v:any_1,digits:int):str 
address SQLstr_cast;
comment cast to string and check for overflow

command calc.str(v:sqlblob):str 
address SQLsqlblob_2_str;
comment cast sqlblob to str

command calc.sqlblob(v:str):sqlblob 
address str_2_sqlblob;
comment cast to sqlblob

command calc.str(v:date):str 
address SQLdate_2_str;
comment cast date to str

command calc.sht(v:str,digits:int,scale:int):sht 
address str_2dec_sht;
comment cast to dec(sht) and check for overflow

command calc.sht(v:str,digits:int):sht 
address str_2num_sht;
comment cast to sht and check for overflow

command calc.sht(v:void,digits:int,scale:int):sht 
address nil_2dec_sht;
comment cast to dec(sht) and check for overflow

command calc.sht(v:void,digits:int):sht 
address nil_2num_sht;
comment cast to sht and check for overflow

command calc.second_interval(sc:int,v:lng,ek:int,sk:int):lng 
address lng_dec2second_interval;
comment cast lng decimal to a second_interval

command calc.second_interval(sc:int,v:int,ek:int,sk:int):lng 
address int_dec2second_interval;
comment cast int decimal to a second_interval

command calc.second_interval(sc:int,v:sht,ek:int,sk:int):lng 
address sht_dec2second_interval;
comment cast sht decimal to a second_interval

command calc.second_interval(sc:int,v:bte,ek:int,sk:int):lng 
address bte_dec2second_interval;
comment cast bte decimal to a second_interval

function calc.surface{unsafe}(wkt:str):wkb;
pattern calc.setoid(v:lng):void 
address CMDsetoid;
pattern calc.setoid(v:oid):void 
address CMDsetoid;
pattern calc.setoid(v:int):void 
address CMDsetoid;
pattern calc.str(v:str):str 
address CMDvarCONVERT;
comment Cast VALUE to str

pattern calc.str(v:oid):str 
address CMDvarCONVERT;
comment Cast VALUE to str

pattern calc.str(v:dbl):str 
address CMDvarCONVERT;
comment Cast VALUE to str

pattern calc.str(v:flt):str 
address CMDvarCONVERT;
comment Cast VALUE to str

pattern calc.str(v:lng):str 
address CMDvarCONVERT;
comment Cast VALUE to str

pattern calc.str(v:wrd):str 
address CMDvarCONVERT;
comment Cast VALUE to str

pattern calc.str(v:int):str 
address CMDvarCONVERT;
comment Cast VALUE to str

pattern calc.str(v:sht):str 
address CMDvarCONVERT;
comment Cast VALUE to str

pattern calc.str(v:bte):str 
address CMDvarCONVERT;
comment Cast VALUE to str

pattern calc.str(v:bit):str 
address CMDvarCONVERT;
comment Cast VALUE to str

pattern calc.str(v:void):str 
address CMDvarCONVERT;
comment Cast VALUE to str

pattern calc.sht(v:str):sht 
address CMDvarCONVERT;
comment Cast VALUE to sht

pattern calc.sht(v:oid):sht 
address CMDvarCONVERT;
comment Cast VALUE to sht

pattern calc.sht(v:dbl):sht 
address CMDvarCONVERT;
comment Cast VALUE to sht

pattern calc.sht(v:flt):sht 
address CMDvarCONVERT;
comment Cast VALUE to sht

pattern calc.sht(v:lng):sht 
address CMDvarCONVERT;
comment Cast VALUE to sht

pattern calc.sht(v:wrd):sht 
address CMDvarCONVERT;
comment Cast VALUE to sht

pattern calc.sht(v:int):sht 
address CMDvarCONVERT;
comment Cast VALUE to sht

pattern calc.sht(v:sht):sht 
address CMDvarCONVERT;
comment Cast VALUE to sht

pattern calc.sht(v:bte):sht 
address CMDvarCONVERT;
comment Cast VALUE to sht

pattern calc.sht(v:bit):sht 
address CMDvarCONVERT;
comment Cast VALUE to sht

pattern calc.sht(v:void):sht 
address CMDvarCONVERT;
comment Cast VALUE to sht

pattern calc.sub_noerror(v1:dbl,v2:dbl):dbl 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:dbl,v2:flt):dbl 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:dbl,v2:lng):dbl 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:dbl,v2:wrd):dbl 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:dbl,v2:int):dbl 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:dbl,v2:sht):dbl 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:dbl,v2:bte):dbl 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:flt,v2:dbl):dbl 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:flt,v2:flt):flt 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:flt,v2:lng):flt 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:flt,v2:wrd):flt 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:flt,v2:int):flt 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:flt,v2:sht):flt 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:flt,v2:bte):flt 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:lng,v2:dbl):dbl 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:lng,v2:flt):flt 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:lng,v2:lng):lng 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:lng,v2:wrd):lng 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:lng,v2:int):lng 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:lng,v2:sht):lng 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:lng,v2:bte):lng 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:wrd,v2:dbl):dbl 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:wrd,v2:flt):flt 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:wrd,v2:lng):lng 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:wrd,v2:wrd):wrd 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:wrd,v2:int):wrd 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:wrd,v2:sht):wrd 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:wrd,v2:bte):wrd 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:int,v2:dbl):dbl 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:int,v2:flt):flt 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:int,v2:lng):lng 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:int,v2:wrd):wrd 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:int,v2:int):int 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:int,v2:sht):int 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:int,v2:bte):int 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:sht,v2:dbl):dbl 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:sht,v2:flt):flt 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:sht,v2:lng):lng 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:sht,v2:wrd):wrd 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:sht,v2:int):int 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:sht,v2:sht):sht 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:sht,v2:bte):sht 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:bte,v2:dbl):dbl 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:bte,v2:flt):flt 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:bte,v2:lng):lng 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:bte,v2:wrd):wrd 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:bte,v2:int):int 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:bte,v2:sht):sht 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:bte,v2:bte):bte 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sign(v:dbl):bte 
address CMDvarSIGN;
comment Unary sign (-1,0,1) of V

pattern calc.sign(v:flt):bte 
address CMDvarSIGN;
comment Unary sign (-1,0,1) of V

pattern calc.sign(v:lng):bte 
address CMDvarSIGN;
comment Unary sign (-1,0,1) of V

pattern calc.sign(v:wrd):bte 
address CMDvarSIGN;
comment Unary sign (-1,0,1) of V

pattern calc.sign(v:int):bte 
address CMDvarSIGN;
comment Unary sign (-1,0,1) of V

pattern calc.sign(v:sht):bte 
address CMDvarSIGN;
comment Unary sign (-1,0,1) of V

pattern calc.sign(v:bte):bte 
address CMDvarSIGN;
comment Unary sign (-1,0,1) of V

pattern calc.str(v:hge):str 
address CMDvarCONVERT;
comment Cast VALUE to str

pattern calc.sht(v:hge):sht 
address CMDvarCONVERT;
comment Cast VALUE to sht

pattern calc.sub_noerror(v1:dbl,v2:hge):dbl 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:flt,v2:hge):flt 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:hge,v2:dbl):dbl 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:hge,v2:flt):flt 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:hge,v2:hge):hge 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:hge,v2:lng):hge 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:hge,v2:wrd):hge 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:hge,v2:int):hge 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:hge,v2:sht):hge 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:hge,v2:bte):hge 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:lng,v2:hge):hge 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:wrd,v2:hge):hge 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:int,v2:hge):hge 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:sht,v2:hge):hge 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sub_noerror(v1:bte,v2:hge):hge 
address CMDvarSUB;
comment Return V1 - V2, overflow causes NIL value

pattern calc.sign(v:hge):bte 
address CMDvarSIGN;
comment Unary sign (-1,0,1) of V

command calc.str(s:uuid):str 
address UUIDuuid2str;
comment Coerce a uuid to a string type

command calc.sqlblob(s:str):sqlblob 
address BLOBsqlblob_fromstr;
command calc.sqlblob(b:sqlblob):sqlblob 
address BLOBblob_blob;
command calc.timestamp(v:date,d:int):timestamp 
address date_2_timestamp;
comment cast date to a timestamp and check for overflow

command calc.timestamp(v:timestamp,digits:int):timestamp 
address timestamp_2time_timestamp;
comment cast timestamp to timestamp and check for overflow

command calc.timestamp(v:str,digits:int):timestamp 
address str_2time_timestamp;
comment cast to timestamp and check for overflow

command calc.timestamp(v:str):timestamp 
address str_2_timestamp;
comment Cast to timestamp

command calc.timestamp(v:void,digits:int):timestamp 
address nil_2time_timestamp;
comment cast to timestamp and check for overflow

command calc.timestamp(v:void):timestamp 
address nil_2_timestamp;
comment Cast to timestamp

command calc.timestamp(msecs:lng):timestamp 
address MTIMEtimestamp_lng;
command calc.timestamp(secs:int):timestamp 
address MTIMEtimestamp;
command calc.timestamp(d:date):timestamp 
address MTIMEtimestamp_create_from_date;
command calc.timestamp(t:timestamp):timestamp 
address MTIMEtimestamp2timestamp;
command calc.timestamp(s:str):timestamp 
address MTIMEtimestamp_fromstr;
command calc.uuid(s:str):uuid 
address UUIDstr2uuid;
comment Coerce a string to a uuid, validating its format

command calc.url(s:url):url 
address URLnoop;
comment Create an URL from a string literal

command calc.url(s:str):url 
address URLnoop;
comment Create an URL from a string literal

pattern calc.void(v:str):void 
address CMDvarCONVERT;
comment Cast VALUE to void

pattern calc.void(v:oid):void 
address CMDvarCONVERT;
comment Cast VALUE to void

pattern calc.void(v:dbl):void 
address CMDvarCONVERT;
comment Cast VALUE to void

pattern calc.void(v:flt):void 
address CMDvarCONVERT;
comment Cast VALUE to void

pattern calc.void(v:lng):void 
address CMDvarCONVERT;
comment Cast VALUE to void

pattern calc.void(v:wrd):void 
address CMDvarCONVERT;
comment Cast VALUE to void

pattern calc.void(v:int):void 
address CMDvarCONVERT;
comment Cast VALUE to void

pattern calc.void(v:sht):void 
address CMDvarCONVERT;
comment Cast VALUE to void

pattern calc.void(v:bte):void 
address CMDvarCONVERT;
comment Cast VALUE to void

pattern calc.void(v:bit):void 
address CMDvarCONVERT;
comment Cast VALUE to void

pattern calc.void(v:void):void 
address CMDvarCONVERT;
comment Cast VALUE to void

pattern calc.void(v:hge):void 
address CMDvarCONVERT;
comment Cast VALUE to void

command calc.wrd(s1:int,v:hge,d2:int,s2:int):wrd 
address hge_dec2dec_wrd;
comment cast decimal(hge) to decimal(wrd) and check for overflow

command calc.wrd(s1:int,v:hge):wrd 
address hge_dec2_wrd;
comment cast decimal(hge) to wrd and check for overflow

command calc.wrd(v:hge,digits:int,scale:int):wrd 
address hge_num2dec_wrd;
comment cast number to decimal(wrd) and check for overflow

command calc.wrd(s1:int,v:lng,d2:int,s2:int):wrd 
address lng_dec2dec_wrd;
comment cast decimal(lng) to decimal(wrd) and check for overflow

command calc.wrd(s1:int,v:lng):wrd 
address lng_dec2_wrd;
comment cast decimal(lng) to wrd and check for overflow

command calc.wrd(v:lng,digits:int,scale:int):wrd 
address lng_num2dec_wrd;
comment cast number to decimal(wrd) and check for overflow

command calc.wrd(s1:int,v:wrd,d2:int,s2:int):wrd 
address wrd_dec2dec_wrd;
comment cast decimal(wrd) to decimal(wrd) and check for overflow

command calc.wrd(s1:int,v:wrd):wrd 
address wrd_dec2_wrd;
comment cast decimal(wrd) to wrd and check for overflow

command calc.wrd(v:wrd,digits:int,scale:int):wrd 
address wrd_num2dec_wrd;
comment cast number to decimal(wrd) and check for overflow

command calc.wrd(s1:int,v:int,d2:int,s2:int):wrd 
address int_dec2dec_wrd;
comment cast decimal(int) to decimal(wrd) and check for overflow

command calc.wrd(s1:int,v:int):wrd 
address int_dec2_wrd;
comment cast decimal(int) to wrd and check for overflow

command calc.wrd(v:int,digits:int,scale:int):wrd 
address int_num2dec_wrd;
comment cast number to decimal(wrd) and check for overflow

command calc.wrd(s1:int,v:sht,d2:int,s2:int):wrd 
address sht_dec2dec_wrd;
comment cast decimal(sht) to decimal(wrd) and check for overflow

command calc.wrd(s1:int,v:sht):wrd 
address sht_dec2_wrd;
comment cast decimal(sht) to wrd and check for overflow

command calc.wrd(v:sht,digits:int,scale:int):wrd 
address sht_num2dec_wrd;
comment cast number to decimal(wrd) and check for overflow

command calc.wrd(s1:int,v:bte,d2:int,s2:int):wrd 
address bte_dec2dec_wrd;
comment cast decimal(bte) to decimal(wrd) and check for overflow

command calc.wrd(s1:int,v:bte):wrd 
address bte_dec2_wrd;
comment cast decimal(bte) to wrd and check for overflow

command calc.wrd(v:bte,digits:int,scale:int):wrd 
address bte_num2dec_wrd;
comment cast number to decimal(wrd) and check for overflow

command calc.wrd(v:dbl,digits:int,scale:int):wrd 
address dbl_num2dec_wrd;
comment cast number to decimal(wrd) and check for overflow

command calc.wrd(v:flt,digits:int,scale:int):wrd 
address flt_num2dec_wrd;
comment cast number to decimal(wrd) and check for overflow

command calc.wkb(v:wkb):wkb 
address wkbFromWKB;
command calc.wkb{unsafe}(v:str):wkb 
address wkbFromString;
pattern calc.wrd(v:str):wrd 
address CMDvarCONVERT;
comment Cast VALUE to wrd

pattern calc.wrd(v:oid):wrd 
address CMDvarCONVERT;
comment Cast VALUE to wrd

pattern calc.wrd(v:dbl):wrd 
address CMDvarCONVERT;
comment Cast VALUE to wrd

pattern calc.wrd(v:flt):wrd 
address CMDvarCONVERT;
comment Cast VALUE to wrd

pattern calc.wrd(v:lng):wrd 
address CMDvarCONVERT;
comment Cast VALUE to wrd

pattern calc.wrd(v:wrd):wrd 
address CMDvarCONVERT;
comment Cast VALUE to wrd

pattern calc.wrd(v:int):wrd 
address CMDvarCONVERT;
comment Cast VALUE to wrd

pattern calc.wrd(v:sht):wrd 
address CMDvarCONVERT;
comment Cast VALUE to wrd

pattern calc.wrd(v:bte):wrd 
address CMDvarCONVERT;
comment Cast VALUE to wrd

pattern calc.wrd(v:bit):wrd 
address CMDvarCONVERT;
comment Cast VALUE to wrd

pattern calc.wrd(v:void):wrd 
address CMDvarCONVERT;
comment Cast VALUE to wrd

pattern calc.wrd(v:hge):wrd 
address CMDvarCONVERT;
comment Cast VALUE to wrd

pattern calc.xor(v1:lng,v2:lng):lng 
address CMDvarXOR;
comment Return V1 XOR V2

pattern calc.xor(v1:wrd,v2:wrd):wrd 
address CMDvarXOR;
comment Return V1 XOR V2

pattern calc.xor(v1:int,v2:int):int 
address CMDvarXOR;
comment Return V1 XOR V2

pattern calc.xor(v1:sht,v2:sht):sht 
address CMDvarXOR;
comment Return V1 XOR V2

pattern calc.xor(v1:bte,v2:bte):bte 
address CMDvarXOR;
comment Return V1 XOR V2

pattern calc.xor(v1:bit,v2:bit):bit 
address CMDvarXOR;
comment Return V1 XOR V2

pattern calc.xor(v1:hge,v2:hge):hge 
address CMDvarXOR;
comment Return V1 XOR V2

command calc.xml(src:xml):xml 
address XMLxml2xml;
command calc.xml(src:str):xml 
address XMLstr2xml;
pattern centipede.vector(b:bat[:oid,:any_1]) (X_2:oid,X_3:oid...) 
address OPTvectorOid;
comment Derive a series of slices values based on sampling

pattern cluster.column(m:bat[:oid,:oid],b:bat[:oid,:any_1]):bat[:oid,:any_1] 
address CLUSTER_column;
comment Reorder tail of the BAT using the cluster map

command cluster.key(b:bat[:oid,:any_1]):bat[:oid,:oid] 
address CLUSTER_key;
comment Create the hash key list

command cluster.map(psum:bat[:oid,:wrd],cluster:bat[:oid,:bte],b:bat[:oid,:any_1]):bat[:oid,:any_1] 
address CLS_map2;
comment Reorder tail of bat b, using a cluster prefix sum and map. In case themap is sorted with a non dense head we assume no remapping is needed

command cluster.map(cluster:bat[:oid,:wrd],b:bat[:oid,:any_1]):bat[:oid,:any_1] 
address CLS_map;
comment Reorder tail of bat b, using a cluster map

command cluster.map(b:bat[:oid,:oid]):bat[:oid,:oid] 
address CLUSTER_map;
comment Recluster a hash key table and produce a re-allocation map

command cluster.new(b:bat[:oid,:hge],bits:int,offset:int,order:bit) (psum:bat[:oid,:wrd],map:bat[:oid,:bte]) 
address CLS_create2_hge;
command cluster.new(b:bat[:oid,:hge],bits:int,offset:int) (psum:bat[:oid,:wrd],map:bat[:oid,:wrd]) 
address CLS_create_hge;
command cluster.new(b:bat[:oid,:dbl],bits:int,offset:int,order:bit) (psum:bat[:oid,:wrd],map:bat[:oid,:bte]) 
address CLS_create2_dbl;
command cluster.new(b:bat[:oid,:dbl],bits:int,offset:int) (psum:bat[:oid,:wrd],map:bat[:oid,:wrd]) 
address CLS_create_dbl;
command cluster.new(b:bat[:oid,:flt],bits:int,offset:int,order:bit) (psum:bat[:oid,:wrd],map:bat[:oid,:bte]) 
address CLS_create2_flt;
command cluster.new(b:bat[:oid,:flt],bits:int,offset:int) (psum:bat[:oid,:wrd],map:bat[:oid,:wrd]) 
address CLS_create_flt;
command cluster.new(b:bat[:oid,:lng],bits:int,offset:int,order:bit) (psum:bat[:oid,:wrd],map:bat[:oid,:bte]) 
address CLS_create2_lng;
command cluster.new(b:bat[:oid,:lng],bits:int,offset:int) (psum:bat[:oid,:wrd],map:bat[:oid,:wrd]) 
address CLS_create_lng;
command cluster.new(b:bat[:oid,:wrd],bits:int,offset:int,order:bit) (psum:bat[:oid,:wrd],map:bat[:oid,:bte]) 
address CLS_create2_wrd;
command cluster.new(b:bat[:oid,:wrd],bits:int,offset:int) (psum:bat[:oid,:wrd],map:bat[:oid,:wrd]) 
address CLS_create_wrd;
command cluster.new(b:bat[:oid,:int],bits:int,offset:int,order:bit) (psum:bat[:oid,:wrd],map:bat[:oid,:bte]) 
address CLS_create2_int;
command cluster.new(b:bat[:oid,:int],bits:int,offset:int) (psum:bat[:oid,:wrd],map:bat[:oid,:wrd]) 
address CLS_create_int;
command cluster.new(b:bat[:oid,:sht],bits:int,offset:int,order:bit) (psum:bat[:oid,:wrd],map:bat[:oid,:bte]) 
address CLS_create2_sht;
command cluster.new(b:bat[:oid,:sht],bits:int,offset:int) (psum:bat[:oid,:wrd],map:bat[:oid,:wrd]) 
address CLS_create_sht;
command cluster.new(b:bat[:oid,:bte],bits:int,offset:int,order:bit) (psum:bat[:oid,:wrd],map:bat[:oid,:bte]) 
address CLS_create2_bte;
comment Compute the cluster map for bat b. A cluster map is a list of partition ids. The p(refix) sum is a by product which returns the prefix sum of the per partition frequency. Prefix sum and map can be use to 'cluster' related columns based on b. Incase the offset is non negative it is used to shift the key values. Offset together with the mask bits should make sure that the result of the partitioning can be used in a order by sequence. If this holds and the input is sorted we return a 'compressed' representation of the map, ie [:oid,:bte], the repeated values are not inserted. The order flag indicates that the clustering is used for ordering, ie partition keys aren't fixed so we can internaly optimize partition sizes.

command cluster.new(b:bat[:oid,:bte],bits:int,offset:int) (psum:bat[:oid,:wrd],map:bat[:oid,:wrd]) 
address CLS_create_bte;
comment Compute the cluster map for bat b of hash key values. A cluster map is a list of unique (new) BUN positions. The p(refix) sum is a by product which returns the prefix sum of the per masked key frequency.

pattern cluster.split(clustered:bat[:oid,:any_1],psum:bat[:oid,:wrd]):bat[:oid,:any_1]... 
address CLS_split;
comment split the clustered bat into parts

pattern cluster.table(b:bat[:oid,:any]...):bat[:oid,:oid] 
address CLUSTER_table;
comment Cluster the BATs using the first one as reference.Return the oid map used

pattern clients.addUser(nme:str,pw:str):oid 
address CLTaddUser;
comment Allow user with password access to the given scenarios

command clients.backendsum(pw:str):str 
address CLTbackendsum;
comment Return hex string representation of the currently used hash of the given string

pattern clients.checkPermission(usr:str,pw:str):void 
address CLTcheckPermission;
comment Check permission for a user, requires hashed password (backendsum)

pattern clients.changePassword(old:str,new:str):void 
address CLTchangePassword;
comment Change the password for the current user

pattern clients.changeUsername(old:str,new:str):void 
address CLTchangeUsername;
comment Change the username of the user into the new string

pattern clients.getUsers():bat[:oid,:str] 
address CLTgetUsers;
comment return a BAT with user id and name available in the system

pattern clients.getPasswordHash(user:str):str 
address CLTgetPasswordHash;
comment Return the password hash of the given user

pattern clients.getUsername():str 
address CLTgetUsername;
comment Return the username of the currently logged in user

pattern clients.getTimeout() (q:lng,s:lng) 
address CLTgetTimeout;
comment A query is aborted after q milliseconds (q=0 means run undisturbed).The session timeout aborts the connection after spending toomany seconds on query processing.

command clients.getUsers():bat[:oid,:str] 
address CLTusers;
comment Pseudo bat of users id and name.

command clients.getTime():bat[:oid,:lng] 
address CLTTime;
comment Pseudo bat of client's total time usage(in usec).

command clients.getActions():bat[:oid,:int] 
address CLTActions;
comment Pseudo bat of client's command counts.

command clients.getLastCommand():bat[:oid,:str] 
address CLTLastCommand;
comment Pseudo bat of client's last command time.

command clients.getLogins() (user:bat[:oid,:oid],start:bat[:oid,:str]) 
address CLTLogin;
comment Pseudo bat of client id and login time.

pattern clients.getScenario():str 
address CLTgetScenario;
comment Retrieve current scenario name.

pattern clients.getInfo() (X_1:bat[:oid,:str],X_2:bat[:oid,:str]) 
address CLTInfo;
comment Pseudo bat with client attributes.

pattern clients.getId():int 
address CLTgetClientId;
comment Return a number that uniquely represents the current client.

command clients.md5sum(pw:str):str 
address CLTmd5sum;
comment Return hex string representation of the MD5 hash of the given string

pattern clients.quit(idx:int):void 
address CLTquit;
comment Terminate the session for a single client using a soft error.It is the privilige of the console user.

pattern clients.quit():void 
address CLTquit;
comment Terminate the client session.

pattern clients.removeUser(nme:str):void 
address CLTremoveUser;
comment Remove the given user from the system

command clients.ripemd160sum(pw:str):str 
address CLTripemd160sum;
comment Return hex string representation of the RIPEMD160 hash of the given string

pattern clients.setPassword(user:str,pass:str):void 
address CLTsetPassword;
comment Set the password for the given user

command clients.sha2sum(pw:str,bits:int):str 
address CLTsha2sum;
comment Return hex string representation of the SHA-2 hash with bits of the given string

command clients.sha1sum(pw:str):str 
address CLTsha1sum;
comment Return hex string representation of the SHA-1 hash of the given string

pattern clients.shutdown(delay:int,forced:bit):str 
address CLTshutdown;
comment Close all other client connections. Return if it succeeds.If forced is set then always stop the system the hard way

pattern clients.shutdown(delay:int):str 
address CLTshutdown;
pattern clients.setTimeout(q:lng,s:lng):void 
address CLTsetTimeout;
comment Abort a query after q seconds (q=0 means run undisturbed).The session timeout aborts the connection after spending toomany seconds on query processing.

pattern clients.settimeout(n:lng):void 
address CLTsetTimeout;
comment Abort a query after  n seconds.

pattern clients.setsession(n:lng):void 
address CLTsetSessionTimeout;
comment Abort a session after  n seconds.

pattern clients.suspend(id:int):void 
address CLTsuspend;
comment Put a client process to sleep for some time.It will simple sleep for a second at a time, untilthe awake bit has been set in its descriptor

pattern clients.stop(id:int):void 
address CLTstop;
comment Stop the query execution at the next eligble statement.

pattern clients.setScenario(msg:str):str 
address CLTsetScenario;
comment Switch to other scenario handler, return previous one.

pattern clients.setHistory(s:str):void 
address CLTsetHistory;
comment Designate console history file for readline.

pattern clients.setListing(flag:int):int 
address CLTsetListing;
comment Turn on/off echo of MAL instructions:	2 - show mal instruction,	4 - show details of type resolutoin, 	8 - show binding information.

command clients.wakeup(id:int):void 
address CLTwakeup;
comment Wakeup a client process

command color.blue(c:color):int 
address CLRblue;
comment Extracts blue component from a color atom

command color.cb(c:color):int 
address CLRcb;
comment Extracts Cb(blue color) component from a color atom

command color.cr(c:color):int 
address CLRcr;
comment Extracts Cr(red color) component from a color atom

command color.color(s:str):color 
address CLRcolor;
comment Converts string to color

command color.#fromstr():color 
address color_fromstr;
command color.green(c:color):int 
address CLRgreen;
comment Extracts green component from a color atom

command color.hue(c:color):flt 
address CLRhue;
comment Extracts hue component from a color atom

command color.hsv(h:flt,s:flt,v:flt):color 
address CLRhsv;
comment Converts an HSV triplets to a color atom

command color.hue(c:color):int 
address CLRhueInt;
comment Extracts hue component from a color atom

command color.luminance(c:color):int 
address CLRluminance;
comment Extracts Y(luminance) component from a color atom

command color.red(c:color):int 
address CLRred;
comment Extracts red component from a color atom

command color.rgb(r:int,g:int,b:int):color 
address CLRrgb;
comment Converts an RGB triplets to a color atom

command color.saturation(c:color):flt 
address CLRsaturation;
comment Extracts saturation component from a color atom

command color.saturation(c:color):int 
address CLRsaturationInt;
comment Extracts saturation component from a color atom

command color.str(s:color):str 
address CLRstr;
comment Converts color to string 

command color.#tostr():str 
address color_tostr;
command color.value(c:color):flt 
address CLRvalue;
comment Extracts value component from a color atom

command color.value(c:color):int 
address CLRvalueInt;
comment Extracts value component from a color atom

command color.ycc(y:int,cr:int,cb:int):color 
address CLRycc;
comment Converts an YCC triplets to a color atom

pattern daytime.!=(v:daytime,w:daytime):bit 
address CMDvarNE;
comment Equality of two daytimes

pattern daytime.<=(v:daytime,w:daytime):bit 
address CMDvarLE;
comment Equality of two daytimes

pattern daytime.<(v:daytime,w:daytime):bit 
address CMDvarLT;
comment Equality of two daytimes

pattern daytime.==(v:daytime,w:daytime):bit 
address CMDvarEQ;
comment Equality of two daytimes

pattern daytime.>=(v:daytime,w:daytime):bit 
address CMDvarGE;
comment Equality of two daytimes

pattern daytime.>(v:daytime,w:daytime):bit 
address CMDvarGT;
comment Equality of two daytimes

command daytime.#fromstr():daytime 
address daytime_tz_fromstr;
pattern daytime.isnil(v:daytime):bit 
address CMDvarISNIL;
comment Nil test for daytime value

command daytime.#tostr():str 
address daytime_tostr;
pattern date.!=(v:date,w:date):bit 
address CMDvarNE;
comment Equality of two dates

pattern date.<=(v:date,w:date):bit 
address CMDvarLE;
comment Equality of two dates

pattern date.<(v:date,w:date):bit 
address CMDvarLT;
comment Equality of two dates

pattern date.==(v:date,w:date):bit 
address CMDvarEQ;
comment Equality of two dates

pattern date.>=(v:date,w:date):bit 
address CMDvarGE;
comment Equality of two dates

pattern date.>(v:date,w:date):bit 
address CMDvarGT;
comment Equality of two dates

command date.date(s:date):date 
address MTIMEdate_date;
comment Noop routine.

command date.#fromstr():date 
address date_fromstr;
pattern date.isnil(v:date):bit 
address CMDvarISNIL;
comment Nil test for date value

command date.#tostr():str 
address date_tostr;
command factories.getDeparture():bat[:oid,:timestamp] 
address FCTgetDeparture;
comment Retrieve the time stamp the last answer was returned.

command factories.getArrival():bat[:oid,:timestamp] 
address FCTgetArrival;
comment Retrieve the time stamp the last call was made.

command factories.getOwners():bat[:oid,:str] 
address FCTgetOwners;
comment Retrieve the factory owners table.

command factories.getCaller():int 
address FCTgetCaller;
comment Retrieve the unique identity of the factory caller.

command factories.getPlants() (mod:bat[:oid,:str],fcn:bat[:oid,:str]) 
address FCTgetPlants;
comment Retrieve the names for all active factories.

pattern factories.shutdown(m:str,f:str):void 
address FCTshutdown;
comment Close a factory.

pattern generator.join(b:bat[:oid,:dbl],gen:bat[:oid,:dbl]) (l:bat[:oid,:oid],r:bat[:oid,:oid]) 
address VLTgenerator_join;
comment Overloaded join operation

pattern generator.join(b:bat[:oid,:flt],gen:bat[:oid,:flt]) (l:bat[:oid,:oid],r:bat[:oid,:oid]) 
address VLTgenerator_join;
pattern generator.join(b:bat[:oid,:lng],gen:bat[:oid,:lng]) (l:bat[:oid,:oid],r:bat[:oid,:oid]) 
address VLTgenerator_join;
pattern generator.join(b:bat[:oid,:int],gen:bat[:oid,:int]) (l:bat[:oid,:oid],r:bat[:oid,:oid]) 
address VLTgenerator_join;
pattern generator.join(b:bat[:oid,:sht],gen:bat[:oid,:sht]) (l:bat[:oid,:oid],r:bat[:oid,:oid]) 
address VLTgenerator_join;
pattern generator.join(b:bat[:oid,:bte],gen:bat[:oid,:bte]) (l:bat[:oid,:oid],r:bat[:oid,:oid]) 
address VLTgenerator_join;
pattern generator.leftfetchjoin(b:bat[:oid,:oid],cand:bat[:oid,:timestamp]):bat[:oid,:timestamp] 
address VLTgenerator_leftfetchjoin;
comment Overloaded leftfetchjoin operation

pattern generator.leftfetchjoin(b:bat[:oid,:oid],cand:bat[:oid,:dbl]):bat[:oid,:dbl] 
address VLTgenerator_leftfetchjoin;
pattern generator.leftfetchjoin(b:bat[:oid,:oid],cand:bat[:oid,:flt]):bat[:oid,:flt] 
address VLTgenerator_leftfetchjoin;
pattern generator.leftfetchjoin(b:bat[:oid,:oid],cand:bat[:oid,:lng]):bat[:oid,:lng] 
address VLTgenerator_leftfetchjoin;
pattern generator.leftfetchjoin(b:bat[:oid,:oid],cand:bat[:oid,:int]):bat[:oid,:int] 
address VLTgenerator_leftfetchjoin;
pattern generator.leftfetchjoin(b:bat[:oid,:oid],cand:bat[:oid,:sht]):bat[:oid,:sht] 
address VLTgenerator_leftfetchjoin;
pattern generator.leftfetchjoin(b:bat[:oid,:oid],cand:bat[:oid,:bte]):bat[:oid,:bte] 
address VLTgenerator_leftfetchjoin;
pattern generator.parameters(first:dbl,last:dbl):bat[:oid,:dbl] 
address VLTgenerator_noop;
pattern generator.parameters(first:flt,last:flt):bat[:oid,:flt] 
address VLTgenerator_noop;
pattern generator.parameters(first:lng,last:lng):bat[:oid,:lng] 
address VLTgenerator_noop;
pattern generator.parameters(first:int,last:int):bat[:oid,:int] 
address VLTgenerator_noop;
pattern generator.parameters(first:sht,last:sht):bat[:oid,:sht] 
address VLTgenerator_noop;
pattern generator.parameters(first:bte,last:bte):bat[:oid,:bte] 
address VLTgenerator_noop;
pattern generator.parameters(first:timestamp,last:timestamp,step:lng):bat[:oid,:timestamp] 
address VLTgenerator_noop;
comment Retain the table definition, but don't materialize

pattern generator.parameters(first:dbl,last:dbl,step:dbl):bat[:oid,:dbl] 
address VLTgenerator_noop;
pattern generator.parameters(first:flt,last:flt,step:flt):bat[:oid,:flt] 
address VLTgenerator_noop;
pattern generator.parameters(first:lng,last:lng,step:lng):bat[:oid,:lng] 
address VLTgenerator_noop;
pattern generator.parameters(first:int,last:int,step:int):bat[:oid,:int] 
address VLTgenerator_noop;
pattern generator.parameters(first:sht,last:sht,step:sht):bat[:oid,:sht] 
address VLTgenerator_noop;
pattern generator.parameters(first:bte,last:bte,step:bte):bat[:oid,:bte] 
address VLTgenerator_noop;
pattern generator.subselect(b:bat[:oid,:timestamp],cand:bat[:oid,:oid],low:timestamp,high:timestamp,li:bit,hi:bit,anti:bit):bat[:oid,:oid] 
address VLTgenerator_subselect;
comment Overloaded selection routine

pattern generator.subselect(b:bat[:oid,:dbl],cand:bat[:oid,:oid],low:dbl,high:dbl,li:bit,hi:bit,anti:bit):bat[:oid,:oid] 
address VLTgenerator_subselect;
pattern generator.subselect(b:bat[:oid,:flt],cand:bat[:oid,:oid],low:flt,high:flt,li:bit,hi:bit,anti:bit):bat[:oid,:oid] 
address VLTgenerator_subselect;
pattern generator.subselect(b:bat[:oid,:lng],cand:bat[:oid,:oid],low:lng,high:lng,li:bit,hi:bit,anti:bit):bat[:oid,:oid] 
address VLTgenerator_subselect;
pattern generator.subselect(b:bat[:oid,:int],cand:bat[:oid,:oid],low:int,high:int,li:bit,hi:bit,anti:bit):bat[:oid,:oid] 
address VLTgenerator_subselect;
pattern generator.subselect(b:bat[:oid,:sht],cand:bat[:oid,:oid],low:sht,high:sht,li:bit,hi:bit,anti:bit):bat[:oid,:oid] 
address VLTgenerator_subselect;
pattern generator.subselect(b:bat[:oid,:bte],cand:bat[:oid,:oid],low:bte,high:bte,li:bit,hi:bit,anti:bit):bat[:oid,:oid] 
address VLTgenerator_subselect;
pattern generator.subselect(b:bat[:oid,:timestamp],low:timestamp,high:timestamp,li:bit,hi:bit,anti:bit):bat[:oid,:oid] 
address VLTgenerator_subselect;
comment Overloaded selection routine

pattern generator.subselect(b:bat[:oid,:dbl],low:dbl,high:dbl,li:bit,hi:bit,anti:bit):bat[:oid,:oid] 
address VLTgenerator_subselect;
pattern generator.subselect(b:bat[:oid,:flt],low:flt,high:flt,li:bit,hi:bit,anti:bit):bat[:oid,:oid] 
address VLTgenerator_subselect;
pattern generator.subselect(b:bat[:oid,:lng],low:lng,high:lng,li:bit,hi:bit,anti:bit):bat[:oid,:oid] 
address VLTgenerator_subselect;
pattern generator.subselect(b:bat[:oid,:int],low:int,high:int,li:bit,hi:bit,anti:bit):bat[:oid,:oid] 
address VLTgenerator_subselect;
pattern generator.subselect(b:bat[:oid,:sht],low:sht,high:sht,li:bit,hi:bit,anti:bit):bat[:oid,:oid] 
address VLTgenerator_subselect;
pattern generator.subselect(b:bat[:oid,:bte],low:bte,high:bte,li:bit,hi:bit,anti:bit):bat[:oid,:oid] 
address VLTgenerator_subselect;
pattern generator.series(first:timestamp,last:timestamp,step:lng):bat[:oid,:timestamp] 
address VLTgenerator_table;
pattern generator.series(first:dbl,last:dbl,step:dbl):bat[:oid,:dbl] 
address VLTgenerator_table;
comment Create and materialize a generator table

pattern generator.series(first:flt,last:flt,step:flt):bat[:oid,:flt] 
address VLTgenerator_table;
pattern generator.series(first:lng,last:lng,step:lng):bat[:oid,:lng] 
address VLTgenerator_table;
pattern generator.series(first:int,last:int,step:int):bat[:oid,:int] 
address VLTgenerator_table;
pattern generator.series(first:sht,last:sht,step:sht):bat[:oid,:sht] 
address VLTgenerator_table;
pattern generator.series(first:bte,last:bte,step:bte):bat[:oid,:bte] 
address VLTgenerator_table;
pattern generator.series(first:dbl,last:dbl):bat[:oid,:dbl] 
address VLTgenerator_table;
pattern generator.series(first:flt,last:flt):bat[:oid,:flt] 
address VLTgenerator_table;
pattern generator.series(first:lng,last:lng):bat[:oid,:lng] 
address VLTgenerator_table;
pattern generator.series(first:int,last:int):bat[:oid,:int] 
address VLTgenerator_table;
pattern generator.series(first:sht,last:sht):bat[:oid,:sht] 
address VLTgenerator_table;
pattern generator.series(first:bte,last:bte):bat[:oid,:bte] 
address VLTgenerator_table;
pattern generator.thetasubselect(b:bat[:oid,:timestamp],cnd:bat[:oid,:oid],low:timestamp,oper:str):bat[:oid,:oid] 
address VLTgenerator_thetasubselect;
comment Overloaded selection routine

pattern generator.thetasubselect(b:bat[:oid,:dbl],cnd:bat[:oid,:oid],low:dbl,oper:str):bat[:oid,:oid] 
address VLTgenerator_thetasubselect;
pattern generator.thetasubselect(b:bat[:oid,:flt],cnd:bat[:oid,:oid],low:flt,oper:str):bat[:oid,:oid] 
address VLTgenerator_thetasubselect;
pattern generator.thetasubselect(b:bat[:oid,:lng],cnd:bat[:oid,:oid],low:lng,oper:str):bat[:oid,:oid] 
address VLTgenerator_thetasubselect;
pattern generator.thetasubselect(b:bat[:oid,:int],cnd:bat[:oid,:oid],low:int,oper:str):bat[:oid,:oid] 
address VLTgenerator_thetasubselect;
pattern generator.thetasubselect(b:bat[:oid,:sht],cnd:bat[:oid,:oid],low:sht,oper:str):bat[:oid,:oid] 
address VLTgenerator_thetasubselect;
pattern generator.thetasubselect(b:bat[:oid,:bte],cnd:bat[:oid,:oid],low:bte,oper:str):bat[:oid,:oid] 
address VLTgenerator_thetasubselect;
pattern generator.thetasubselect(b:bat[:oid,:timestamp],low:timestamp,oper:str):bat[:oid,:oid] 
address VLTgenerator_thetasubselect;
comment Overloaded selection routine

pattern generator.thetasubselect(b:bat[:oid,:dbl],low:dbl,oper:str):bat[:oid,:oid] 
address VLTgenerator_thetasubselect;
pattern generator.thetasubselect(b:bat[:oid,:flt],low:flt,oper:str):bat[:oid,:oid] 
address VLTgenerator_thetasubselect;
pattern generator.thetasubselect(b:bat[:oid,:lng],low:lng,oper:str):bat[:oid,:oid] 
address VLTgenerator_thetasubselect;
pattern generator.thetasubselect(b:bat[:oid,:int],low:int,oper:str):bat[:oid,:oid] 
address VLTgenerator_thetasubselect;
pattern generator.thetasubselect(b:bat[:oid,:sht],low:sht,oper:str):bat[:oid,:oid] 
address VLTgenerator_thetasubselect;
pattern generator.thetasubselect(b:bat[:oid,:bte],low:bte,oper:str):bat[:oid,:oid] 
address VLTgenerator_thetasubselect;
command geom.Area(g:wkb):dbl 
address wkbArea;
comment Returns the area of the geometry.

command geom.AsText(w:wkb):str 
address wkbAsText;
command geom.Buffer(a:wkb,distance:dbl):wkb 
address wkbBuffer;
comment Returns a geometry that represents all points whose distance from this geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry.

command geom.Boundary(w:wkb):wkb 
address wkbBoundary;
comment Returns the closure of the combinatorial boundary of this Geometry.

command geom.ConvexHull(a:wkb):wkb 
address wkbConvexHull;
comment Returns a geometry that represents the convex hull of this geometry.

command geom.Contains(a:wkb,b:wkb):bit 
address wkbContains;
comment Returns true if the Geometry a 'spatially contains' Geometry b

command geom.Crosses(a:wkb,b:wkb):bit 
address wkbCrosses;
comment Returns true if the Geometry a 'spatially crosses' Geometry b

function geom.CurveFromText{unsafe}(wkt:str,srid:sht):wkb;
command geom.Difference(a:wkb,b:wkb):wkb 
address wkbDifference;
comment Returns a geometry that represents the point set difference of Geometry a with b.

command geom.Distance(a:wkb,b:wkb):dbl 
address wkbDistance;
comment Returns the shortest distance between any two points in the two geometries as calculated in the spatial reference system of this Geometries.

command geom.Disjoint(a:wkb,b:wkb):bit 
address wkbDisjoint;
comment Returns true if these Geometries are 'spatially disjoint'

command geom.Dimension(w:wkb):int 
address wkbDimension;
comment The inherent dimension of this geometry object, which must be less than or equal to the coordinate dimension. This specification is restricted to geometries in two-dimensional coordinate space.

command geom.Equals(a:wkb,b:wkb):bit 
address wkbEquals;
comment Returns true if these Geometries are 'spatially equal'

command geom.Envelope(w:wkb):wkb 
address wkbEnvelope;
comment The minimum bounding box for this Geometry, returned as a Geometry. The polygon is defined by the corner points of the bounding box ((MINX,MINY),(MAXX,MINY),(MAXX,MAXY),(MINX,MAXY)).

command geom.GeometryTypeId(w:wkb):int 
address wkbGeometryTypeId;
comment Returns the name of the instantiable subtype of Geometry of which this Geometry instance is a member. The name of the instantiable subtype of Geometry is returned as string.

function geom.GeomCollectionFromText{unsafe}(wkt:str,srid:sht):wkb;
function geom.GeomFromText{unsafe}(wkt:str,srid:sht):wkb;
command geom.Intersection(a:wkb,b:wkb):wkb 
address wkbIntersection;
comment Returns a geometry that represents the point set intersection of Geometry a with b.

command geom.Intersect(a:wkb,b:wkb):bit 
address wkbIntersect;
comment Returns true if these Geometries 'spatially intersect'

command geom.IsSimple(w:wkb):bit 
address wkbIsSimple;
comment Returns true if this Geometry has no anomalous geometric points, such as self intersection or self tangency. The description of each instantiable geometric class will include the specific conditions that cause an instance of that class to be classified as not simple.

command geom.IsEmpty(w:wkb):bit 
address wkbIsEmpty;
comment Returns true if this Geometry is the empty geometry. If true, then this Geometry represents the empty point set, for the coordinate space.

command geom.Length(g:wkb):dbl 
address wkbLength;
comment Returns the length of the geometry.

function geom.LineFromText{unsafe}(wkt:str,srid:sht):wkb;
function geom.MultiPolyFromText{unsafe}(wkt:str,srid:sht):wkb;
function geom.MultiSurfaceFromText{unsafe}(wkt:str,srid:sht):wkb;
function geom.MultiLineFromText{unsafe}(wkt:str,srid:sht):wkb;
function geom.MultiCurveFromText{unsafe}(wkt:str,srid:sht):wkb;
function geom.MultiPointFromText{unsafe}(wkt:str,srid:sht):wkb;
command geom.Overlaps(a:wkb,b:wkb):bit 
address wkbOverlaps;
comment Returns true if the Geometry a 'spatially overlaps' Geometry b

function geom.PolyFromText{unsafe}(wkt:str,srid:sht):wkb;
function geom.PointFromText{unsafe}(wkt:str,srid:sht):wkb;
command geom.Relate(a:wkb,b:wkb,intersectionPatternMatrix:str):bit 
address wkbRelate;
comment Returns true if the Geometry a 'spatially related' to Geometry b, by testing for intersection between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionPatternMatrix.

command geom.SymDifference(a:wkb,b:wkb):wkb 
address wkbSymDifference;
comment Returns a geometry that represents the point set semmetric difference of Geometry a with b.

command geom.SRID(w:wkb):int 
address wkbSRID;
comment Returns the Spatial Reference System ID for this Geometry.

function geom.SurfaceFromText{unsafe}(wkt:str,srid:sht):wkb;
command geom.Touches(a:wkb,b:wkb):bit 
address wkbTouches;
comment Returns true if these Geometries 'spatially touch' each other

command geom.Union(a:wkb,b:wkb):wkb 
address wkbUnion;
comment Returns a geometry that represents the point set union of Geometry a with b.

command geom.Within(a:wkb,b:wkb):bit 
address wkbWithin;
comment Returns true if the Geometry a 'spatially within' Geometry b

command geom.X(g:wkb):dbl 
address wkbgetcoordX;
comment Returns the x-coordinate of a point geometry.

command geom.Y(g:wkb):dbl 
address wkbgetcoordY;
comment Returns the y-coordinate of a point geometry.

command geom.epilogue():void 
address geom_epilogue;
command geom.mbr(X_1:wkb):mbr 
address wkbMBR;
comment Creates the mbr for the given wkb.

command geom.mbr(X_1:flt,X_2:flt,X_3:flt,X_4:flt):mbr 
address ordinatesMBR;
comment Creates the mbr for the given (xmin,ymin) and (xmax,ymax).

command geom.mbroverlaps(a:mbr,b:mbr):bit 
address mbroverlaps;
comment Returns true if the two mbrs overlap

command geom.prelude():void 
address geom_prelude;
command geom.point(x:dbl,y:dbl):wkb 
address wkbcreatepoint;
comment Construct a point from two geometries

pattern group.multicolumn(b:bat[:oid,:any]...) (ref:bat[:oid,:oid],grp:bat[:oid,:oid],hist:bat[:oid,:any]) 
address GROUPmulticolumngroup;
comment Derivation of a group index over multiple columns.

command group.subgroupdone(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:oid],h:bat[:oid,:wrd]) (groups:bat[:oid,:oid],extents:bat[:oid,:oid],histo:bat[:oid,:wrd]) 
address GRPsubgroup4;
command group.subgroupdone(b:bat[:oid,:any_1],g:bat[:oid,:oid]) (groups:bat[:oid,:oid],extents:bat[:oid,:oid],histo:bat[:oid,:wrd]) 
address GRPsubgroup2;
command group.subgroupdone(b:bat[:oid,:any_1]) (groups:bat[:oid,:oid],extents:bat[:oid,:oid],histo:bat[:oid,:wrd]) 
address GRPsubgroup1;
command group.subgroup(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:oid],h:bat[:oid,:wrd]) (groups:bat[:oid,:oid],extents:bat[:oid,:oid],histo:bat[:oid,:wrd]) 
address GRPsubgroup4;
command group.subgroup(b:bat[:oid,:any_1],g:bat[:oid,:oid]) (groups:bat[:oid,:oid],extents:bat[:oid,:oid],histo:bat[:oid,:wrd]) 
address GRPsubgroup2;
command group.subgroup(b:bat[:oid,:any_1]) (groups:bat[:oid,:oid],extents:bat[:oid,:oid],histo:bat[:oid,:wrd]) 
address GRPsubgroup1;
command identifier.#fromstr():void 
address IDfromString;
comment Convert a string to an identifier without any check

command identifier.identifier(s:str):identifier 
address IDentifier;
comment Cast a string to an identifer 

command identifier.prelude():void 
address IDprelude;
comment Initialize the module

command identifier.#tostr():void 
address IDtoString;
comment Convert identifier to string equivalent

pattern inspect.equalType(l:any,r:any):bit 
address INSPECTequalType;
comment Return true if both operands are of the same type

command inspect.getStatistics(nme:str):bat[:oid,:any_2] 
address QOTgetStatistics;
comment Get optimizer property statistics such as #calls, #total actions, #total time

command inspect.getEnvironment(k:str):str 
address INSPECTgetEnvironmentKey;
comment Get the value of an environemnt variable

command inspect.getEnvironment() (k:bat[:oid,:str],v:bat[:oid,:str]) 
address INSPECTgetEnvironment;
comment Collect the environment variables.

command inspect.getAtomSizes():bat[:oid,:int] 
address INSPECTatom_sizes;
comment Collect a BAT with the atom sizes.

command inspect.getAtomSuper():bat[:oid,:str] 
address INSPECTatom_sup_names;
comment Collect a BAT with the atom names.

command inspect.getAtomNames():bat[:oid,:str] 
address INSPECTatom_names;
comment Collect a BAT with the atom names.

pattern inspect.getType(v:any_1):str 
address INSPECTtypeName;
comment Return the concrete type of a variable (expression).

pattern inspect.getSize(mod:str,fcn:str):lng 
address INSPECTgetFunctionSize;
comment Return the storage size for a function (in bytes).

pattern inspect.getSize():lng 
address INSPECTgetSize;
comment Return the storage size for the current function (in bytes).

pattern inspect.getAddresses():bat[:oid,:str] 
address INSPECTgetAllAddresses;
comment Obtain the function address.

pattern inspect.getSignatures():bat[:oid,:str] 
address INSPECTgetAllSignatures;
comment Obtain the function signatures.

pattern inspect.getFunction():bat[:oid,:str] 
address INSPECTgetAllFunctions;
comment Obtain the function name.

pattern inspect.getModule():bat[:oid,:str] 
address INSPECTgetAllModules;
comment Obtain the function name.

pattern inspect.getKind():bat[:oid,:str] 
address INSPECTgetkind;
comment Obtain the instruction kind.

pattern inspect.getSource(mod:str,fcn:str):str 
address INSPECTgetSource;
comment Return the original input for a function.

pattern inspect.getComment(mod:str,fcn:str):bat[:oid,:str] 
address INSPECTgetComment;
comment Returns the function help information.

pattern inspect.getAddress(mod:str,fcn:str):bat[:oid,:str] 
address INSPECTgetAddress;
comment Returns the function signature(s).

pattern inspect.getSignature(mod:str,fcn:str):bat[:oid,:str] 
address INSPECTgetSignature;
comment Returns the function signature(s).

pattern inspect.getDefinition(mod:str,fcn:str):bat[:oid,:str] 
address INSPECTgetDefinition;
comment Returns a string representation of a specific function.

command inet.!=(v:inet,w:inet):bit 
address INET_comp_NEQ;
comment Inequality of two inets

command inet.<<=(v:inet,w:inet):bit 
address INET_comp_CWE;
comment Whether v is contained within or is equal to w

command inet.<<(v:inet,w:inet):bit 
address INET_comp_CW;
comment Whether v is contained within w

command inet.<=(v:inet,w:inet):bit 
address INET_comp_LE;
comment Whether v is less than or equal to w

command inet.<(v:inet,w:inet):bit 
address INET_comp_LT;
comment Whether v is less than w

command inet.=(v:inet,w:inet):bit 
address INET_comp_EQ;
comment Equality of two inets

command inet.>>=(v:inet,w:inet):bit 
address INET_comp_CSE;
comment Whether v contains or is equal to w

command inet.>>(v:inet,w:inet):bit 
address INET_comp_CS;
comment Whether v contains w

command inet.>=(v:inet,w:inet):bit 
address INET_comp_GE;
comment Whether v is equal to or greater than w

command inet.>(v:inet,w:inet):bit 
address INET_comp_GT;
comment Whether v is greater than w

command inet.abbrev(X_1:inet):str 
address INETabbrev;
comment Abbreviated display format as text

command inet.broadcast(X_1:inet):inet 
address INETbroadcast;
comment Returns the broadcast address for network

command inet.#fromstr():void 
address INETfromString;
comment Convert a string to an inet

command inet.hostmask(X_1:inet):inet 
address INEThostmask;
comment Construct host mask for network

command inet.host(X_1:inet):str 
address INEThost;
comment Extract IP address as text

command inet.isnil(v:inet):bit 
address INET_isnil;
comment Nil test for inet value

command inet.masklen(X_1:inet):int 
address INETmasklen;
comment Extract netmask length

command inet.network(X_1:inet):inet 
address INETnetwork;
comment Extract network part of address

command inet.netmask(X_1:inet):inet 
address INETnetmask;
comment Construct netmask for network

command inet.new(s:str):inet 
address INETnew;
comment Create an inet from a string literal

command inet.setmasklen(X_1:inet,X_2:int):inet 
address INETsetmasklen;
comment Set netmask length for inet value

command inet.text(X_1:inet):str 
address INETtext;
comment Extract IP address and netmask length as text

command inet.#tostr():void 
address INETtoString;
comment Convert inet to string equivalent

command io.data(fname:str):str 
address IOdatafile;
comment Signals receipt of tuples in a file fname.It returns the name of the file, if it still exists.

command io.export(b:bat[:oid,:any_2],filepath:str):bit 
address IOexport;
comment Export a BAT as ASCII to a file. If the 'filepath' is not absolute, it is put into the $DBPATH directory. Success of failure is indicated.

pattern io.ftable(fp:streams,order:int,b1:bat[:oid,:any],b:bat[:oid,:any]...):void 
address IOfotable;
comment Print an n-ary table to a file.

pattern io.ftable(filep:streams,b1:bat[:oid,:any],b:bat[:oid,:any]...):void 
address IOftable;
comment Print an n-ary table to a file.

command io.import(b:bat[:oid,:any_2],filepath:str):bat[:oid,:any_2] 
address IOimport;
comment Import a BAT from an ASCII dump. The new tuples are *inserted* into the parameter BAT. You have to create it! Its signature must match the dump, else parsing errors will occur and FALSE is returned.

pattern io.printf(filep:streams,fmt:str):void 
address IOprintfStream;
comment Select default format 

pattern io.printf(filep:streams,fmt:str,val:any...):void 
address IOprintfStream;
comment Select default format 

pattern io.printf(fmt:str):void 
address IOprintf;
comment Select default format 

pattern io.printf(fmt:str,val:any...):void 
address IOprintf;
comment Select default format 

pattern io.prompt(val:any_1):void 
address IOprompt_val;
comment Print a MAL value without brackets.

pattern io.print(val:bat[:oid,:any_2]):void 
address IOprint_val;
comment Print a MAL value column .

pattern io.print(val:any_1):void 
address IOprint_val;
comment Print a MAL value tuple .

pattern io.print(order:int,b:bat[:oid,:any],b2:bat[:oid,:any]...):void 
address IOotable;
comment The same as normal table print, but 	enforces to use the order of BAT 	number [1..argc] to do the printing.

pattern io.print(b1:bat[:oid,:any]...):void 
address IOtable;
comment BATs are printed with '#' for legend 	lines, and the BUNs on seperate lines 	between brackets, containing each to 	comma separated values (head and tail). 	If multiple BATs are passed for printing, 	print() performs an implicit natural 	join, producing a multi attribute table.

pattern io.print(val:any_1,lst:any...):void 
address IOprint_val;
comment Print a MAL value tuple .

pattern io.stdout():streams 
address io_stdout;
comment return the output stream for the database client

pattern io.stderr():streams 
address io_stderr;
comment return the error stream for the database console

pattern io.stdin():bstream 
address io_stdin;
comment return the input stream to the database client

pattern io.table(order:int,b1:bat[:oid,:any],b2:bat[:oid,:any]...):void 
address IOtotable;
comment Print an n-ary table.

pattern io.table(b1:bat[:oid,:any],b2:bat[:oid,:any]...):void 
address IOttable;
comment Print an n-ary table. Like print, but does not print oid column

pattern io.table(b1:bat[:oid,:any]):void 
address IOttable;
comment Print an n-ary table. Like print, but does not print oid column

command iterator.filter(name:json,idx:hge,other:str):json 
address JSONfilterArrayDefault;
command iterator.filter(name:json,idx:hge):json 
address JSONfilterArray;
command iterator.next(step:hge,last:hge):hge 
address ITRnext_hge;
command iterator.next(step:dbl,last:dbl):dbl 
address ITRnext_dbl;
comment Advances the iterator with a fixed value

command iterator.next(step:flt,last:flt):flt 
address ITRnext_flt;
command iterator.next(step:lng,last:lng):lng 
address ITRnext_lng;
command iterator.next(step:int,last:int):int 
address ITRnext_int;
command iterator.next(step:sht,last:sht):sht 
address ITRnext_sht;
command iterator.next(step:oid,last:oid):oid 
address ITRnext_oid;
pattern iterator.next(b:bat[:oid,:any_2]) (h:oid,t:any_2) 
address ITRbunNext;
comment Produce the next bun for processing.

pattern iterator.new(b:bat[:oid,:any_2]) (h:oid,t:any_2) 
address ITRbunIterator;
comment Process the buns one by one extracted from a void table.

command iterator.next(b:bat[:oid,:any_2],size:lng) (X_3:lng,X_4:bat[:oid,:any_2]) 
address ITRnextChunk;
comment Produce the next chunk for processing.

command iterator.new(b:bat[:oid,:any_2],size:lng) (X_3:lng,X_4:bat[:oid,:any_2]) 
address ITRnewChunk;
comment Create an iterator with fixed granule size.	  The result is a view.

command json.dump(j:json):void 
address JSONdump;
pattern json.fold(k:bat[:oid,:any]):json 
address JSONfold;
comment Combine the value list into a single json array object.

pattern json.fold(k:bat[:oid,:str],v:bat[:oid,:any]):json 
address JSONfold;
comment Combine the key-value pairs into a single json object list.

pattern json.fold(o:bat[:oid,:oid],k:bat[:oid,:str],v:bat[:oid,:any]):json 
address JSONfold;
comment Combine the key-value pairs into a single json object list.

command json.filter(name:json,idx:lng,other:str):json 
address JSONfilterArrayDefault_lng;
comment Extract a single array element

command json.filter(name:json,idx:lng):json 
address JSONfilterArray_lng;
command json.filter(name:json,idx:int,other:str):json 
address JSONfilterArrayDefault_int;
command json.filter(name:json,idx:int):json 
address JSONfilterArray_int;
command json.filter(name:json,idx:sht,other:str):json 
address JSONfilterArrayDefault_sht;
command json.filter(name:json,idx:sht):json 
address JSONfilterArray_sht;
command json.filter(name:json,idx:bte,other:str):json 
address JSONfilterArrayDefault_bte;
command json.filter(name:json,idx:bte):json 
address JSONfilterArray_bte;
command json.filter(name:json,pathexpr:str):json 
address JSONfilter;
comment Filter all members of an object by a path expression, returning an array.Non-matching elements are skipped.

command json.#fromstr():json 
address JSONfromString;
comment Validate a string to be JSON compliant. A NOOP if valid json, NULL otherwise.

command json.isarray(val:str):bit 
address JSONisarray;
comment Validate the string as a valid JSON array

command json.isobject(val:str):bit 
address JSONisobject;
comment Validate the string as a valid JSON object

command json.isvalid(val:str):bit 
address JSONisvalid;
comment Validate the string as a valid JSON document

command json.isarray(val:json):bit 
address JSONisarray;
comment Validate the string as a valid JSON array

command json.isobject(val:json):bit 
address JSONisobject;
comment Validate the string as a valid JSON object

command json.isvalid(val:json):bit 
address JSONisvalid;
comment Validate the string as a valid JSON document

command json.integer(j:json):lng 
address JSONjson2integer;
comment Convert sinple JSON values to an integer, return nil upon error.

command json.keys(val:json):bat[:oid,:str] 
address JSONkeyTable;
comment Expands the outermost JSON object names.

command json.keyarray(val:json):json 
address JSONkeyArray;
comment Expands the outermost JSON object keys into a JSON value array.

command json.length(val:json):int 
address JSONlength;
comment Returns the number of elements in the outermost JSON object.

command json.number(j:json):dbl 
address JSONjson2number;
comment Convert sinple JSON values to a double, return nil upon error.

command json.new(j:str):json 
address JSONstr2json;
comment Convert string to its JSON. Dealing with escape characters

command json.output(b:bat[:oid,:any_1]):str 
address JSONtextString;
comment Pack the values into a single json structure

command json.prelude():void 
address JSONprelude;
command json.resultSet(u:bat[:oid,:uuid],rev:bat[:oid,:lng],js:bat[:oid,:json]):json 
address JSONresultSet;
comment Converts the json store into a single json string:

pattern json.renderarray(val:any...):json 
address JSONrenderarray;
pattern json.renderobject(val:any...):json 
address JSONrenderobject;
command json.suboutput(b:bat[:oid,:any_1],gid:bat[:oid,:oid],ext:bat[:oid,:wrd],flg:bit):bat[:oid,:str] 
address JSONtextGrouped;
comment Pack the values into a json structure

command json.str(j:json):str 
address JSONjson2str;
comment Convert JSON to its string equivalent. Dealing with escape characters

command json.text(j:json,s:str):str 
address JSONjson2textSeparator;
comment Convert JSON values to their plain string equivalent, injecting a separator.

command json.text(j:json):str 
address JSONjson2text;
comment Convert JSON values to their plain string equivalent.

command json.#tostr():str 
address JSONtoString;
comment Convert JSON to its string equivalent. Dealing with escape characters

pattern json.unfold(val:json) (o:bat[:oid,:oid],k:bat[:oid,:str],v:bat[:oid,:json]) 
address JSONunfold;
comment Expands the outermost JSON object into key-value pairs.

pattern json.unfold(val:json) (k:bat[:oid,:str],v:bat[:oid,:json]) 
address JSONunfold;
comment Expands the outermost JSON object into key-value pairs.

command json.values(val:json):bat[:oid,:json] 
address JSONvalueTable;
comment Expands the outermost JSON values.

command json.valuearray(val:json):json 
address JSONvalueArray;
comment Expands the outermost JSON object values into a JSON value array.

command language.assert(v:hge,term:str):void 
address MALassertHge;
pattern language.assert(v:any_1,pname:str,oper:str,val:any_2):void 
address MALassertTriple;
comment Assertion test.

command language.assert(v:oid,term:str):void 
address MALassertOid;
command language.assert(v:str,term:str):void 
address MALassertStr;
command language.assert(v:lng,term:str):void 
address MALassertLng;
command language.assert(v:int,term:str):void 
address MALassertInt;
command language.assert(v:sht,term:str):void 
address MALassertSht;
command language.assert(v:bit,term:str):void 
address MALassertBit;
pattern language.call(s:bat[:oid,:str]):void 
address CMDcallBAT;
comment Evaluate a program stored in a BAT.

pattern language.call(m:str,f:str):void 
address CMDcallFunction;
pattern language.call(s:str):void 
address CMDcallString;
comment Evaluate a MAL string program.

pattern language.dataflow():bit 
address MALstartDataflow;
comment The current guarded block is executed using dataflow control. 

pattern language.pass(v:any_1):void 
address MALpass;
comment Cheap instruction to disgard storage while retaining the dataflow dependency

pattern language.register(m:str,f:str,code:str,help:str):void 
address CMDregisterFunction;
comment Compile the code string to MAL and register it as a function.

command language.raise(msg:str):str 
address CMDraise;
comment Raise an exception labeled 	with a specific message.

pattern language.sink(v:any...):void 
address MALgarbagesink;
comment Variables to be considered together when triggering garbage collection.Used in the dataflow blocks to avoid early release of values.

pattern language.source(f:str):void 
address CMDevalFile;
comment Merge the instructions stored in the file with the current program.

command lsst.angsep(ra1:dbl,dec1:dbl,ra2:dbl,dec2:dbl):dbl 
address qserv_angSep;
comment Returns the angular separation in degrees between two sphericalcoordinate pairs (ra1,dec1) and (ra2,dec2)

pattern lsst.ptinsphpoly(ra:dbl,dec:dbl,list:dbl...):int 
address qserv_ptInSphPoly;
comment Returns 1 if the given spherical longitude/latitude polyline contains the given position

command lsst.ptinsphellipse(ra:dbl,dec:dbl,ra_cen:dbl,dec_cen:dbl,smaa:dbl,smia:dbl,ang:dbl):int 
address qserv_ptInSphEllipse;
comment Returns 1 if the given spherical longitude/latitude ellipse contains the given position

command lsst.ptinsphcircle(ra:dbl,dec:dbl,ra_cen:dbl,dec_cen:dbl,radius:dbl):int 
address qserv_ptInSphCircle;
comment Returns 1 if the given spherical longitude/latitude circle contains the given position

command lsst.ptinsphbox(ra:dbl,dec:dbl,ra_min:dbl,dec_min:dbl,ra_max:dbl,dec_max:dbl):int 
address qserv_ptInSphBox;
comment Returns 1 if the given spherical longitude/latitude box contains the given position

command lsst.xmatch(l:bat[:oid,:lng],r:bat[:oid,:lng],depth:int) (lr:bat[:oid,:oid],rr:bat[:oid,:oid]) 
address LSSTxmatch;
comment Return the HtmID pairs that lie within the same triangle at level depth

command mapreduce.getCloud(nme:str):bat[:oid,:str] 
address MRgetCloud;
comment Localize the elements of a named cloud

pattern mapi.bind(key:int,remoteName:str):bat[:oid,:any_2] 
address SERVERbindBAT;
comment Bind a remote variable to a local one.

pattern mapi.bind(key:int,rschema:str,rtable:str,i:int):bat[:oid,:any_2] 
address SERVERbindBAT;
comment Bind a remote variable to a local one.

pattern mapi.bind(key:int,rschema:str,rtable:str,rcolumn:str,i:int):bat[:oid,:any_2] 
address SERVERbindBAT;
comment Bind a remote variable to a local one.

pattern mapi.connect(host:str,port:int,usr:str,passwd:str,lang:str):int 
address SERVERconnect;
comment Establish connection with a remote mserver.

command mapi.destroy(mid:int):void 
address SERVERdestroy;
comment Destroy the handle for an Mserver.

command mapi.disconnect(mid:int):void 
address SERVERdisconnect;
comment Terminate the session.

command mapi.disconnect():int 
address SERVERdisconnectALL;
comment Close connections with all remote Mserver.

command mapi.disconnect(dbalias:str):int 
address SERVERdisconnectWithAlias;
comment Close connection with a remote Mserver.

command mapi.explain(mid:int):str 
address SERVERexplain;
comment Turn the error seen into a string.

command mapi.error(mid:int):int 
address SERVERerror;
comment Check for an error in the communication.

command mapi.fetch_field(hdl:int,fnr:int):hge 
address SERVERfetch_field_hge;
comment Retrieve a single hge field.

command mapi.fetch_reset(hdl:int):int 
address SERVERfetch_reset;
comment Reset the cache read line.

command mapi.fetch_line(hdl:int):str 
address SERVERfetch_line;
comment Retrieve a complete line.

command mapi.fetch_field_array(hdl:int):bat[:int,:str] 
address SERVERfetch_field_bat;
comment Retrieve all fields for a row.

command mapi.fetch_field(hdl:int,fnr:int):bte 
address SERVERfetch_field_bte;
comment Retrieve a single bte field.

command mapi.fetch_field(hdl:int,fnr:int):oid 
address SERVERfetch_field_oid;
comment Retrieve a single void field.

command mapi.fetch_field(hdl:int,fnr:int):void 
address SERVERfetch_field_void;
comment Retrieve a single void field.

command mapi.fetch_field(hdl:int,fnr:int):sht 
address SERVERfetch_field_sht;
comment Retrieve a single sht field.

command mapi.fetch_field(hdl:int,fnr:int):lng 
address SERVERfetch_field_lng;
comment Retrieve a single lng field.

command mapi.fetch_field(hdl:int,fnr:int):int 
address SERVERfetch_field_int;
comment Retrieve a single int field.

command mapi.fetch_field(hdl:int,fnr:int):str 
address SERVERfetch_field_str;
comment Retrieve a single field.

command mapi.fetch_all_rows(hdl:int):lng 
address SERVERfetch_all_rows;
comment Retrieve all rows into the cache.

command mapi.fetch_row(hdl:int):int 
address SERVERfetch_row;
comment Retrieve the next row for analysis.

command mapi.finish(hdl:int):int 
address SERVERfinish;
comment Remove all remaining answers.

command mapi.getError(mid:int):str 
address SERVERgetError;
comment Get error message.

command mapi.get_row_count(hdl:int):lng 
address SERVERget_row_count;
comment Return number of rows.

command mapi.get_field_count(hdl:int):int 
address SERVERget_field_count;
comment Return number of fields.

command mapi.lookup(dbalias:str):int 
address SERVERlookup;
comment Retrieve the connection identifier.

command mapi.listen(unixsocket:str):int 
address SERVERlisten_usock;
comment Start a Mapi listener on the unix socket file given.

command mapi.listen(port:int):int 
address SERVERlisten_port;
comment Start a Mapi listener on the port given.

command mapi.listen():int 
address SERVERlisten_default;
comment Start a Mapi server with the default settings.

command mapi.malclient(in:streams,out:streams):void 
address SERVERclient;
comment Start a Mapi client for a particular stream pair.

command mapi.next_result(hdl:int):int 
address SERVERnext_result;
comment Go to next result set.

pattern mapi.put(nme:str,val:any_1):str 
address SERVERputLocal;
comment Prepare sending a value to a remote site.

pattern mapi.put(mid:int,nme:str,val:any_1):void 
address SERVERput;
comment Send a value to a remote site.

command mapi.prepare(mid:int,qry:str):int 
address SERVERprepare;
comment Prepare a query for execution.

command mapi.ping(mid:int):int 
address SERVERping;
comment Test availability of an Mserver.

pattern mapi.query_array(mid:int,qry:str,arg:str...):int 
address SERVERquery_array;
comment Send the query for execution replacing '?' by arguments.

command mapi.query_handle(mid:int,qry:str):int 
address SERVERquery_handle;
comment Send the query for execution.

command mapi.query(mid:int,qry:str):int 
address SERVERquery;
comment Send the query for execution

command mapi.rpc(key:int,qry:str):void 
address SERVERquery;
comment Send a simple query for execution.

pattern mapi.rpc(key:int,qry:str):bat[:oid,:any_2] 
address SERVERmapi_rpc_bat;
pattern mapi.rpc(key:int,qry:str...):any 
address SERVERmapi_rpc_single_row;
comment Send a simple query for execution and fetch result.

command mapi.rows_affected(hdl:int):lng 
address SERVERrows_affected;
comment Return number of affected rows.

command mapi.reconnect(mid:int):void 
address SERVERreconnect;
comment Re-establish a connection.

pattern mapi.reconnect(host:str,port:int,db_alias:str,usr:str,passwd:str,lang:str):int 
address SERVERreconnectAlias;
comment Re-establish connection with a remote mserver.

pattern mapi.reconnect(host:str,port:int,usr:str,passwd:str,lang:str):int 
address SERVERreconnectWithoutAlias;
comment Re-establish connection with a remote mserver.

command mapi.resume():void 
address SERVERresume;
comment Resume connection listeners.

command mapi.setAlias(dbalias:str):void 
address SERVERsetAlias;
comment Give the channel a logical name.

command mapi.suspend():void 
address SERVERsuspend;
comment Suspend accepting connections.

command mapi.stop():void 
address SERVERstop;
comment Terminate connection listeners.

command mapi.trace(mid:int,flag:int):void 
address SERVERtrace;
comment Toggle the Mapi library debug tracer.

pattern manual.completion(pat:str):void 
address MANUALcompletion;
comment Produces the wordcompletion table.

pattern manual.help(text:str):void 
address MANUALhelp;
comment Produces a list of all <module>.<function> that match	the text pattern. The wildcard '*' can be used for <module>and <function>. Using the '(' asks for signature information andusing ')' asks for the complete help record.

pattern manual.summary():void 
address MANUALcreateSummary;
comment Produces a manual summary with help lines grouped by module.

pattern manual.search(text:str):void 
address MANUALsearch;
comment Search the manual for command descriptions that match theregular expression 'text'

pattern mat.hasMoreElements(grp:bat[:oid,:any_2]...):bat[:oid,:any_2] 
address MAThasMoreElements;
comment Find the next element in the merge table

command mat.info(g:str,e:str):bat[:oid,:any_2] 
address MATinfo;
comment retrieve the definition from the partition catalogue

pattern mat.mergepack(b:bat[:oid,:oid]...):bat[:oid,:oid] 
address MATmergepack;
comment Merge multiple candidate lists 

pattern mat.newIterator(grp:bat[:oid,:any_2]...):bat[:oid,:any_2] 
address MATnewIterator;
comment Create an iterator over a MAT

pattern mat.new(b:bat[:oid,:any_2]...):bat[:oid,:any_2] 
address MATpack;
comment Define a Merge Association Table (MAT). Faal back to the pack operationwhen this is called 

pattern mat.print(b:bat[:oid,:any_2]...):void 
address MATprint;
pattern mat.project(map:bat[:oid,:bte],b:bat[:oid,:any_2]...):bat[:oid,:any_2] 
address MATproject;
comment project using the map bat (contains which bat to use in scan order)

pattern mat.packIncrement(b:bat[:oid,:any_2],c:bat[:oid,:any_2]):bat[:oid,:any_2] 
address MATpackIncrement;
comment Prepare incremental mat pack

pattern mat.packIncrement(b:bat[:oid,:any_2],pieces:int):bat[:oid,:any_2] 
address MATpackIncrement;
comment Prepare incremental mat pack

pattern mat.pack2(b:bat[:oid,:any_2]...):bat[:oid,:any_2] 
address MATpack2;
comment Materialize the MAT into a BAT (by an append all)

pattern mat.pack(b:bat[:oid,:any_2]...):bat[:oid,:any_2] 
address MATpack;
comment Materialize the MAT into a BAT

pattern mat.pack(X_1:any_2...):bat[:oid,:any_2] 
address MATpackValues;
comment Materialize the MAT (of values) into a BAT

pattern mat.sortReverseTail(b:bat[:oid,:any_2]...) (sorted:bat[:oid,:any_2],map:bat[:oid,:bte]) 
address MATsortReverseTail;
comment Returns a BAT copy sorted on the head column.

pattern mat.sortTail(b:bat[:oid,:any_2]...) (sorted:bat[:oid,:any_2],map:bat[:oid,:bte]) 
address MATsortTail;
comment Returns a BAT copy sorted on the head column.

pattern mat.slice(first:lng,last:lng,b:bat[:oid,:any_2]...):bat[:oid,:any_2] 
address MATpackSlice;
comment Materialize a sliced MAT into a BAT

pattern mat.slice(first:int,last:int,b:bat[:oid,:any_2]...):bat[:oid,:any_2] 
address MATpackSlice;
comment Materialize a sliced MAT into a BAT

pattern mat.slice(first:wrd,last:wrd,b:bat[:oid,:any_2]...):bat[:oid,:any_2] 
address MATpackSlice;
comment Materialize a sliced MAT into a BAT

pattern mal.manifold(mod:str,fcn:str,a:any...):bat[:oid,:any] 
address MANIFOLDevaluate;
pattern mal.multiplex(mod:str,fcn:str,a:any...):any... 
address MANIFOLDremapMultiplex;
command mbr.#cmp():int 
address mbrCOMP;
command mbr.#fromstr():mbr 
address mbrFROMSTR;
command mbr.#hash():int 
address mbrHASH;
command mbr.mbr(v:str):mbr 
address mbrFromString;
command mbr.#null():int 
address mbrNULL;
command mbr.#read():void 
address mbrREAD;
command mbr.#tostr():str 
address mbrTOSTR;
command mbr.#write():void 
address mbrWRITE;
command mcurl.deleterequest(s:str):str 
address CURLdeleteRequest;
comment Perform a http delete request

command mcurl.getrequest(s:str):str 
address CURLgetRequest;
comment Perform a http get request

command mcurl.postrequest(s:str):str 
address CURLpostRequest;
comment Perform a http post request

command mcurl.putrequest(s:str):str 
address CURLputRequest;
comment Perform a http put request

pattern mdb.List(M:str,F:str):void 
address MDBlist3Detail;
comment Dump the routine M.F on standard out.

pattern mdb.List():void 
address MDBlistDetail;
comment Dump the current routine on standard out.

pattern mdb.dump():void 
address MDBdump;
comment Dump instruction, stacktrace, and stack

pattern mdb.dot(M:str,F:str,s:str):void 
address MDBshowFlowGraph;
comment Dump the data flow of the function 	M.F in a format recognizable by the 	command 'dot' on the file s

pattern mdb.dot(s:str):void 
address MDBshowFlowGraph;
comment Dump the data flow of the current routine in a format recognizable by the command 'dot' to the file s

pattern mdb.getDefinition():bat[:oid,:str] 
address MDBgetDefinition;
comment Returns a string representation of the current function 	with typing information attached

pattern mdb.getStackTrace() (X_1:bat[:oid,:str],X_2:bat[:oid,:str]) 
address MDBStkTrace;
pattern mdb.getStackFrame() (X_1:bat[:oid,:str],X_2:bat[:oid,:str]) 
address MDBgetStackFrame;
comment Collect variable binding of current (n-th) stack frame.

pattern mdb.getStackFrame(i:int) (X_2:bat[:oid,:str],X_3:bat[:oid,:str]) 
address MDBgetStackFrameN;
pattern mdb.getStackDepth():int 
address MDBStkDepth;
comment Return the depth of the calling stack.

pattern mdb.grab():void 
address mdbGrab;
comment Call debugger for a suspended process.

command mdb.getContext(s:str):str 
address MDBgetExceptionContext;
comment Extract the context string from the exception message

command mdb.getReason(s:str):str 
address MDBgetExceptionReason;
comment Extract the reason from the exception message

command mdb.getException(s:str):str 
address MDBgetExceptionVariable;
comment Extract the variable name from the exception message

command mdb.getDebug():int 
address MDBgetDebug;
comment Get the kernel debugging bit-set.See the MonetDB configuration file for details

pattern mdb.inspect(mod:str,fcn:str):void 
address MDBinspect;
comment Run the debugger on a specific function

pattern mdb.lifespan(M:str,F:str):void 
address MDBlifespan;
comment Dump the current routine lifespan information on standard out.

pattern mdb.list(M:str,F:str):void 
address MDBlist3;
comment Dump the routine M.F on standard out.

pattern mdb.listMapi():void 
address MDBlistMapi;
comment Dump the current routine on standard out with Mapi prefix.

pattern mdb.list():void 
address MDBlist;
comment Dump the current routine on standard out.

command mdb.modules():bat[:oid,:str] 
address CMDmodules;
comment List available modules

command mdb.setDebug(flg:int):int 
address MDBsetDebug;
comment Set the kernel debugging bit-set and return its previous value.

command mdb.setDebug(flg:str):int 
address MDBsetDebugStr;
comment Set the kernel debugging bit-set and return its previous value.The recognized options are: threads, memory, properties,io, transactions, modules, algorithms, estimates.

pattern mdb.setCatch(b:bit):void 
address MDBsetCatch;
comment Turn on/off catching exceptions

pattern mdb.setTrace(b:str):void 
address MDBsetVarTrace;
comment Turn on/off tracing of a variable 

pattern mdb.setTrace(b:bit):void 
address MDBsetTrace;
comment Turn on/off tracing of current routine

pattern mdb.setTrap(idx:int):void 
address mdbTrapClient;
comment Call debugger for a specific process.

pattern mdb.setTrap(mod:str,fcn:str,b:bit):void 
address MDBtrapFunction;
comment Suspend upon a call to the MAL function.

pattern mdb.stop():void 
address MDBstop;
comment Stop the interactive debugger

pattern mdb.start(mod:str,fcn:str):void 
address MDBstartFactory;
comment Start interactive debugger on a running factory

pattern mdb.start(clientid:int):void 
address MDBstart;
comment Start interactive debugger on a client

pattern mdb.start():void 
address MDBstart;
comment Start interactive debugger

command mdb.traceOptimizer(flg:str):void 
address OPTsetDebugStr;
comment Otherwise it is considered a request to trace the optimizers,which requires a comma separated list or pipeline name.

pattern mdb.trap():void 
address mdbTrap;
comment A suspended process for debugging.

pattern mdb.var(M:str,F:str):void 
address MDBvar3;
comment Dump the symboltable of routine M.F on standard out.

pattern mdb.var():void 
address MDBvar;
comment Dump the symboltable of current routine on standard out.

command mkey.bulk_rotate_xor_hash(h:bat[:oid,:wrd],nbits:int,b:bat[:oid,:any_1]):bat[:oid,:wrd] 
address MKEYbulk_rotate_xor_hash;
comment pre:  h and b should be synced on head         post: [:xor=]([:rotate=](h, nbits), [hash](b))

pattern mkey.bulk_rotate_xor_hash(h:bat[:oid,:wrd],nbits:int,v:any):bat[:oid,:wrd] 
address MKEYbulkconst_rotate_xor_hash;
comment pre:  h and b should be synced on head         post: [:xor=]([:rotate=](h, nbits), [hash](b))

command mkey.bulk_rotate_xor_hash(h:wrd,nbits:int,b:bat[:oid,:any_1]):bat[:oid,:wrd] 
address MKEYconstbulk_rotate_xor_hash;
comment pre:  h and b should be synced on head         post: [:xor=]([:rotate=](h, nbits), [hash](b))

pattern mkey.bulk_rotate_xor_hash(h:wrd,nbits:int,v:any):wrd 
address MKEYrotate_xor_hash;
comment post: [:xor=]([:rotate=](h, nbits), [hash](b))

command mkey.hash(v:hge):wrd 
address MKEYhash_hge;
command mkey.hash(b:bat[:oid,:any_1]):bat[:oid,:wrd] 
address MKEYbathash;
comment calculate a hash value

command mkey.hash(v:str):wrd 
address MKEYhash_str;
command mkey.hash(v:lng):wrd 
address MKEYhash_lng;
command mkey.hash(v:dbl):wrd 
address MKEYhash_dbl;
command mkey.hash(v:wrd):wrd 
address MKEYhash_wrd;
command mkey.hash(v:flt):wrd 
address MKEYhash_flt;
command mkey.hash(v:int):wrd 
address MKEYhash_int;
command mkey.hash(v:sht):wrd 
address MKEYhash_sht;
command mkey.hash(v:bte):wrd 
address MKEYhash_bte;
command mkey.hash(v:bit):wrd 
address MKEYhash_bte;
pattern mkey.hash(v:any):wrd 
address MKEYhash;
comment compute a hash int number from any value

command mkey.rotate(v:wrd,nbits:int):wrd 
address MKEYrotate;
comment left-rotate an int by nbits

command mmath.atan2(x:dbl,y:dbl):dbl 
address MATHbinary_ATAN2dbl;
comment The atan2(x,y) function calculates the arc tangent of the two         variables x and y.  It is similar to calculating the arc	tangent of y / x, except that the signs of both arguments are         used to determine the quadrant of the result.  The value is 	returned in radians and is mathematically defined to be between         -PI/2 and PI/2 (inclusive).

command mmath.atan2(x:flt,y:flt):flt 
address MATHbinary_ATAN2flt;
command mmath.atan(x:dbl):dbl 
address MATHunary_ATANdbl;
comment The atan(x) function calculates the arc tangent of x, that is the value 	whose tangent is x. The value is returned in radians and is mathematically 	defined to be between -PI/2 and PI/2 (inclusive).

command mmath.atan(x:flt):flt 
address MATHunary_ATANflt;
command mmath.asin(x:dbl):dbl 
address MATHunary_ASINdbl;
comment The asin(x) function calculates the arc sine of x, that is the value 	whose sine is x. The value is returned in radians and is mathematically 	defined to be between -PI/20 and -PI/2 (inclusive).

command mmath.asin(x:flt):flt 
address MATHunary_ASINflt;
command mmath.acos(x:dbl):dbl 
address MATHunary_ACOSdbl;
comment The acos(x) function calculates the arc cosine of x, that is the 	value whose cosine is x. The value is returned in radians and is 	mathematically defined to be between 0 and PI (inclusive).

command mmath.acos(x:flt):flt 
address MATHunary_ACOSflt;
command mmath.ceil(y:dbl):dbl 
address MATHunary_CEILdbl;
comment The ceil(x) function rounds x upwards to the nearest integer.

command mmath.ceil(y:flt):flt 
address MATHunary_CEILflt;
command mmath.cosh(x:dbl):dbl 
address MATHunary_COSHdbl;
comment The cosh() function  returns the hyperbolic cosine of x, which is 	defined mathematically as (exp(x) + exp(-x)) / 2.

command mmath.cosh(x:flt):flt 
address MATHunary_COSHflt;
command mmath.cot(x:dbl):dbl 
address MATHunary_COTdbl;
comment The cot(x) function returns the Cotangent of x,        where x is given in radians

command mmath.cot(x:flt):flt 
address MATHunary_COTflt;
command mmath.cos(x:dbl):dbl 
address MATHunary_COSdbl;
comment The cos(x) function returns the cosine of x, where x is given in         radians. The return value is between -1 and 1.

command mmath.cos(x:flt):flt 
address MATHunary_COSflt;
command mmath.degrees(x:dbl):dbl 
address MATHunary_DEGREESdbl;
comment The degrees() function converts radians into degrees

command mmath.degrees(x:flt):flt 
address MATHunary_DEGREESflt;
command mmath.exp(x:dbl):dbl 
address MATHunary_EXPdbl;
comment The exp(x) function returns the value of e (the base of         natural logarithms) raised to the power of x.

command mmath.exp(x:flt):flt 
address MATHunary_EXPflt;
command mmath.finite(d:dbl):bit 
address MATHunary_FINITE;
comment The finite(x) function returns true if x is neither infinite         nor a 'not-a-number' (NaN) value, and false otherwise.

pattern mmath.fmod(y:dbl,x:dbl):dbl 
address CMDvarMODsignal;
comment The fmod(x,y) function computes the remainder of dividing x by y.	The return value is x - n * y, where n is the quotient of x / y,	rounded towards zero to an integer.

pattern mmath.fmod(y:flt,x:flt):flt 
address CMDvarMODsignal;
command mmath.floor(y:dbl):dbl 
address MATHunary_FLOORdbl;
comment The floor(x) function rounds x downwards to the nearest integer.

command mmath.floor(y:flt):flt 
address MATHunary_FLOORflt;
command mmath.fabs(y:dbl):dbl 
address MATHunary_FABSdbl;
comment The fabs(x) function  returns  the  absolute value of the         floating-point number x.

command mmath.isinf(d:dbl):int 
address MATHunary_ISINF;
comment The isinf(x) function returns -1 if x represents negative         infinity, 1 if x represents positive infinity, and 0 otherwise.

command mmath.isnan(d:dbl):bit 
address MATHunary_ISNAN;
comment The isnan(x) function returns true if x is 'not-a-number'         (NaN), and false otherwise.

command mmath.log10(x:dbl):dbl 
address MATHunary_LOG10dbl;
comment The log10(x) function returns the base-10 logarithm of x.

command mmath.log10(x:flt):flt 
address MATHunary_LOG10flt;
command mmath.log(x:dbl):dbl 
address MATHunary_LOGdbl;
comment The log(x) function returns the natural logarithm of x.

command mmath.log(x:flt):flt 
address MATHunary_LOGflt;
command mmath.pi():dbl 
address MATHpi;
comment return an important mathematical value

command mmath.pow(x:dbl,y:dbl):dbl 
address MATHbinary_POWdbl;
comment The pow(x,y) function  returns the value of x raised to the power of y.

command mmath.pow(x:flt,y:flt):flt 
address MATHbinary_POWflt;
command mmath.rand{unsafe}(v:int):int 
address MATHrandint;
comment return a random number

command mmath.rand{unsafe}():int 
address MATHrandint;
comment return a random number

command mmath.round(x:dbl,y:int):dbl 
address MATHbinary_ROUNDdbl;
comment The round(n, m) returns n rounded to m places to the right         of the decimal point; if m is omitted, to 0 places. m can be 	negative to round off digits left of the decimal point.         m must be an integer.

command mmath.round(x:flt,y:int):flt 
address MATHbinary_ROUNDflt;
command mmath.radians(x:dbl):dbl 
address MATHunary_RADIANSdbl;
comment The radians() function converts degrees into radians

command mmath.radians(x:flt):flt 
address MATHunary_RADIANSflt;
command mmath.sqlrand(seed:int):int 
address MATHsqlrandint;
comment initialize the rand() function with a seed and call rand()

command mmath.srand(seed:int):void 
address MATHsrandint;
comment initialize the rand() function with a seed

command mmath.sqrt(y:dbl):dbl 
address MATHunary_SQRTdbl;
comment The sqrt(x) function returns the non-negative square root of x.

command mmath.sqrt(y:flt):flt 
address MATHunary_SQRTflt;
command mmath.sinh(x:dbl):dbl 
address MATHunary_SINHdbl;
comment The sinh() function  returns  the  hyperbolic sine of x, which         is defined mathematically as (exp(x) - exp(-x)) / 2.

command mmath.sinh(x:flt):flt 
address MATHunary_SINHflt;
command mmath.sin(x:dbl):dbl 
address MATHunary_SINdbl;
comment The sin(x) function returns the cosine of x, where x is given in         radians. The return value is between -1 and 1.

command mmath.sin(x:flt):flt 
address MATHunary_SINflt;
command mmath.tanh(x:dbl):dbl 
address MATHunary_TANHdbl;
comment The tanh() function returns the hyperbolic tangent of x, which is 	defined mathematically as sinh(x) / cosh(x).

command mmath.tanh(x:flt):flt 
address MATHunary_TANHflt;
command mmath.tan(x:dbl):dbl 
address MATHunary_TANdbl;
comment The tan(x) function returns the tangent of x,        where x is given in radians

command mmath.tan(x:flt):flt 
address MATHunary_TANflt;
command mtime.add(v:timestamp,msecs:lng):timestamp 
address MTIMEtimestamp_add;
comment returns the timestamp that comes 'msecs'	(possibly negative) after 'value'.

command mtime.adddays(value:date,days:int):date 
address MTIMEdate_adddays;
comment returns the date after a number	of days (possibly negative).

command mtime.addmonths(value:date,months:int):date 
address MTIMEdate_addmonths;
comment returns the date after a number of	months (possibly negative).

command mtime.addyears(value:date,years:int):date 
address MTIMEdate_addyears;
comment returns the date after a number	of years (possibly negative).

command mtime.current_time():daytime 
address MTIMEcurrent_time;
command mtime.current_date():date 
address MTIMEcurrent_date;
command mtime.current_timestamp():timestamp 
address MTIMEcurrent_timestamp;
command mtime.compute(r:zrule,year:int):date 
address MTIMEcompute_rule_foryear;
comment compute the date from a rule in a given year

command mtime.day(msecs:lng):lng 
address MTIMEsql_day;
command mtime.day(t:timestamp):int 
address MTIMEtimestamp_day;
command mtime.daytime(h:int,m:int,s:int):daytime 
address MTIMEdaytime3;
comment default time with zeroed components

command mtime.daytime(h:int,m:int):daytime 
address MTIMEdaytime2;
comment default time with zeroed components

command mtime.daytime(h:int):daytime 
address MTIMEdaytime1;
comment default time with zeroed components

command mtime.date_to_str(d:date,format:str):str 
address MTIMEstrftime;
comment create a string from the date, using the specified format (see man strftime)

command mtime.dayname(day:int):str 
address MTIMEday_to_str;
comment Returns day name from a number	between [1-7], str(nil) otherwise.

command mtime.daynum(day:str):int 
address MTIMEday_from_str;
comment Returns number of day [1-7] from a	string or nil if does not match any.

command mtime.dst(t:timestamp,v:timezone):bit 
address MTIMEtimestamp_inside_dst;
comment return whether DST holds in the	timezone at a certain point of time.

command mtime.diff(val1:timestamp,val2:timestamp):lng 
address MTIMEtimestamp_diff;
comment returns the number of milliseconds	between 'val1' and 'val2'.

command mtime.dayofweek(d:date):int 
address MTIMEdate_extract_dayofweek;
comment Returns the current day of the week	where 1=monday, .., 7=sunday

command mtime.dayofyear(d:date):int 
address MTIMEdate_extract_dayofyear;
comment Returns N where d is the Nth day	of the year (january 1 returns 1)

command mtime.diff(val1:date,val2:date):int 
address MTIMEdate_diff;
comment returns the number of days	between 'val1' and 'val2'.

command mtime.day(t:zrule):int 
address MTIMErule_extract_day;
comment extract day from rule.

command mtime.date(t:timestamp,v:timezone):date 
address MTIMEtimestamp_extract_date;
comment extracts date from timestamp in a	specific timezone.

command mtime.date(t:timestamp):date 
address MTIMEtimestamp_extract_date_default;
comment extracts date from timestamp	in the local timezone.

command mtime.daytime(t:timestamp,v:timezone):daytime 
address MTIMEtimestamp_extract_daytime;
comment extracts daytime from timestamp	in a specific timezone.

command mtime.daytime(t:timestamp):daytime 
address MTIMEtimestamp_extract_daytime_default;
comment extracts daytime from timestamp	in the local timezone.

command mtime.day(d:date):int 
address MTIMEdate_extract_day;
comment extracts day from date 

command mtime.daytime(h:int,m:int,s:int,mi:int):daytime 
address MTIMEdaytime_create;
comment creates a time from (hours,minutes,	seconds,milliseconds) parameters.

command mtime.daytime(X_1:lng):daytime 
address MTIMEsecs2daytime;
command mtime.daytime(X_1:daytime):daytime 
address MTIMEdaytime2daytime;
command mtime.daytime(s:str):daytime 
address MTIMEdaytime_fromstr;
comment convert the string to a daytime value.

command mtime.date(yr:int,mo:int,day:int):date 
address MTIMEdate_create;
comment creates a date from (year,month,day).

command mtime.date(s:str):date 
address MTIMEdate_fromstr;
comment convert the string to a type date value

command mtime.date(X_1:void):date 
address MTIMEnil2date;
comment generate the nil date

command mtime.date(X_1:date):date 
address MTIMEdate2date;
comment generate the nil date

command mtime.date_add_month_interval(t:date,s:int):date 
address MTIMEdate_addmonths;
comment Add months to a date

command mtime.date_add_msec_interval(t:date,ms:lng):date 
address MTIMEdate_add_msec_interval_lng_wrap;
command mtime.date_add_sec_interval(t:date,s:int):date 
address MTIMEdate_add_sec_interval_wrap;
comment Add seconds to a date

command mtime.date_sub_msec_interval(t:date,ms:lng):date 
address MTIMEdate_sub_msec_interval_lng_wrap;
command mtime.date_sub_sec_interval(t:date,s:int):date 
address MTIMEdate_sub_sec_interval_wrap;
comment Subtract seconds from a date

command mtime.epilogue():void 
address MTIMEepilogue;
command mtime.end_dst(t:timezone):zrule 
address MTIMEtzone_extract_end;
comment extract rule that determines	end of DST from timezone.

command mtime.hours(msecs:lng):int 
address MTIMEsql_hours;
command mtime.hours(t:timestamp):int 
address MTIMEtimestamp_hours;
command mtime.hours(h:daytime):int 
address MTIMEdaytime_extract_hours;
comment extracts hour from daytime

command mtime.local_timezone():lng 
address MTIMElocal_timezone;
comment get the local timezone in seconds

command mtime.msec{unsafe}():lng 
address MTIMEmsec;
comment get time of day in msec since 1-1-1970.

command mtime.minutes(msecs:lng):int 
address MTIMEsql_minutes;
command mtime.month(months:int):int 
address MTIMEsql_month;
command mtime.milliseconds(t:timestamp):int 
address MTIMEtimestamp_milliseconds;
command mtime.minutes(t:timestamp):int 
address MTIMEtimestamp_minutes;
command mtime.month(t:timestamp):int 
address MTIMEtimestamp_month;
command mtime.msecs(d:int,h:int,m:int,s:int,ms:int):lng 
address MTIMEmsecs;
comment convert date components to milliseconds

command mtime.monthname(month:int):str 
address MTIMEmonth_to_str;
comment Returns month name from a number	between [1-12], str(nil) otherwise.

command mtime.monthnum(month:str):int 
address MTIMEmonth_from_str;
comment Returns month number [1-12] from a string	 or nil if does not match any.

command mtime.minutes(t:zrule):int 
address MTIMErule_extract_minutes;
comment extract minutes from rule.

command mtime.month(t:zrule):int 
address MTIMErule_extract_month;
comment extract month from rule.

command mtime.minutes(t:timezone):int 
address MTIMEtzone_extract_minutes;
comment extract number of minutes that	time zone is offset wrt GMT.

command mtime.milliseconds(d:daytime):int 
address MTIMEdaytime_extract_milliseconds;
comment extracts milliseconds from daytime

command mtime.minutes(d:daytime):int 
address MTIMEdaytime_extract_minutes;
comment extracts minutes from daytime

command mtime.month(d:date):int 
address MTIMEdate_extract_month;
comment extracts month from date

command mtime.prelude():void 
address MTIMEprelude;
command mtime.rule(mo:int,d:int,wkday:int,mi:int):zrule 
address MTIMErule_create;
comment create a DST start/end date rule.

command mtime.rule(s:str):zrule 
address MTIMErule_fromstr;
comment create a rule from a  string.

command mtime.seconds(msecs:lng):int 
address MTIMEsql_seconds;
command mtime.sql_seconds(t:timestamp):int 
address MTIMEtimestamp_sql_seconds;
command mtime.seconds(t:timestamp):int 
address MTIMEtimestamp_seconds;
command mtime.str_to_date(s:str,format:str):date 
address MTIMEstrptime;
comment create a date from the string, using the specified format (see man strptime)

command mtime.start_dst(t:timezone):zrule 
address MTIMEtzone_extract_start;
comment extract rule that determines	start of DST from timezone.

command mtime.setTimezone(name:str):timezone 
address MTIMEtimezone;
comment Test and set the timezone.

command mtime.sql_seconds(d:daytime):int 
address MTIMEdaytime_extract_sql_seconds;
comment extracts seconds (with fractional milliseconds) from daytime

command mtime.seconds(d:daytime):int 
address MTIMEdaytime_extract_seconds;
comment extracts seconds from daytime

command mtime.time_synonyms(allow:bit):void 
address MTIMEsynonyms;
comment Allow synonyms for the parse format of	date/timestamp.

command mtime.timezone(mi:int,s:zrule,erule:zrule):timezone 
address MTIMEtzone_create_dst;
comment create a timezone as an hour difference	from GMT and a DST.

command mtime.timezone(s:lng):timezone 
address MTIMEtzone_create;
comment Convert the int to a timezone.

command mtime.timezone(s:int):timezone 
address MTIMEtzone_create;
comment Convert the int to a timezone.

command mtime.timezone(s:str):timezone 
address MTIMEtzone_fromstr;
comment Convert the string to a timezone.

command mtime.timestamp(d:date):timestamp 
address MTIMEtimestamp_create_from_date;
comment creates a timestamp from (d,00:00:00) parameters (in the local timezone).

command mtime.timestamp(d:date,dt:daytime):timestamp 
address MTIMEtimestamp_create_default;
comment creates a timestamp from (d,dt) parameters (in the local timezone).

command mtime.timestamp(d:date,dt:daytime,t:timezone):timestamp 
address MTIMEtimestamp_create;
comment creates a timestamp from (date, daytime,timezone) parameters.

command mtime.timezone_local():timezone 
address MTIMEtzone_get_local;
comment get the local timezone; which is used for printing timestamps

command mtime.timezone_local(t:timezone):void 
address MTIMEtzone_set_local;
comment set the local timezone; which is used for printing timestamps

command mtime.time_add_msec_interval(t:daytime,ms:lng):daytime 
address MTIMEtime_add_msec_interval_wrap;
comment Add seconds to a time

command mtime.time_sub_msec_interval(t:daytime,ms:lng):daytime 
address MTIMEtime_sub_msec_interval_wrap;
comment Subtract seconds from a time

command mtime.timestamp(t:timestamp):timestamp 
address MTIMEtimestamp2timestamp;
command mtime.timestamp_add_month_interval(t:timestamp,s:int):timestamp 
address MTIMEtimestamp_add_month_interval_wrap;
comment Add months to a timestamp

command mtime.timestamp_sub_month_interval(t:timestamp,s:int):timestamp 
address MTIMEtimestamp_sub_month_interval_wrap;
comment Subtract months from a timestamp

command mtime.timestamp_add_msec_interval(t:timestamp,ms:lng):timestamp 
address MTIMEtimestamp_add;
command mtime.timestamp_sub_msec_interval(t:timestamp,ms:lng):timestamp 
address MTIMEtimestamp_sub_msec_interval_lng_wrap;
command mtime.weekofyear(d:date):int 
address MTIMEdate_extract_weekofyear;
comment Returns the week number in the year.

command mtime.weekday(t:zrule):int 
address MTIMErule_extract_weekday;
comment extract weekday from rule.

command mtime.year(months:int):int 
address MTIMEsql_year;
command mtime.year(t:timestamp):int 
address MTIMEtimestamp_year;
command mtime.year(d:date):int 
address MTIMEdate_extract_year;
comment extracts year from date (nonzero	value between -5867411 and +5867411).

function octopus.bind_idxbat(conn:str,sch:str,tab:str,index:str,access:int,part_nr:int,nr_parts:int,version:int):bat[:oid,:oid];
function octopus.bind(conn:str,sch:str,tab:str,col:str,kind:int,part_nr:int,nr_parts:int,version:int):bat[:oid,:any_1];
function octopus.bind(mvc:int,sch:str,tab:str,col:str,kind:int,part_nr:int,nr_parts:int,version:int):bat[:oid,:any_1];
function octopus.bind_idxbat(conn:str,sch:str,tab:str,index:str,access:int,version:int):bat[:oid,:oid];
function octopus.bind_idxbat(mvc:int,sch:str,tab:str,index:str,access:int,version:int):bat[:oid,:oid];
function octopus.bind(conn:str,sch:str,tab:str,col:str,kind:int,version:int):bat[:oid,:any_1];
function octopus.bind(mvc:int,sch:str,tab:str,col:str,kind:int,version:int):bat[:oid,:any_1];
command octopus.connect(dbname:str):str 
address OCTOPUSconnect;
comment Returns the connection to the server dbname.

function octopus.getBid(dbname:str,fn:str,bidtype:sht):lng;
function octopus.getVariable(conn:str,name:str):any_1;
command octopus.getVersion():int 
address OCTOPUSgetVersion;
comment Returns database version.

pattern octopus.legAdvice(mod:str,fcn:str):int 
address OPTlegAdvice;
comment Derive the number of legs to be used for query function

pattern octopus.register(dbname:str,fname:str...):void 
address OCTOPUSregister;
comment Register mal function fname at server dbname.

pattern optimizer.aliases(mod:str,fcn:str):str 
address OPTwrapper;
comment Alias removal optimizer

pattern optimizer.aliases():str 
address OPTwrapper;
pattern optimizer.accumulators(mod:str,fcn:str):str 
address OPTwrapper;
comment Replace calculations with accumulator model

pattern optimizer.accumulators():str 
address OPTwrapper;
pattern optimizer.clrDebug():void 
address QOTclrdebugOptimizers;
pattern optimizer.crackers(mod:str,fcn:str):str 
address OPTwrapper;
comment Replace algebra select with crackers select

pattern optimizer.crackers():str 
address OPTwrapper;
pattern optimizer.costModel(mod:str,fcn:str):str 
address OPTwrapper;
comment Estimate the cost of a relational expression

pattern optimizer.costModel():str 
address OPTwrapper;
pattern optimizer.constants(mod:str,fcn:str):str 
address OPTwrapper;
comment Duplicate constant removal optimizer

pattern optimizer.constants():str 
address OPTwrapper;
pattern optimizer.commonTerms(mod:any_1,fcn:any_2):str 
address OPTwrapper;
comment Common sub-expression optimizer

pattern optimizer.commonTerms():str 
address OPTwrapper;
pattern optimizer.coercions(mod:str,fcn:str):str 
address OPTwrapper;
comment Handle simple type coercions

pattern optimizer.coercions():str 
address OPTwrapper;
pattern optimizer.cluster(mod:str,fcn:str):str 
address OPTwrapper;
comment Modify the plan to exploit parallel processing on multiple cores

pattern optimizer.cluster():str 
address OPTwrapper;
pattern optimizer.centipede(mod:str,fcn:str):str 
address OPTwrapper;
comment Modify the plan to exploit parallel processing on multiple cores

pattern optimizer.centipede():str 
address OPTwrapper;
pattern optimizer.dumpQEP(mod:str,fcn:str):str 
address OPTwrapper;
comment Produce an indented tree visualisation

pattern optimizer.dumpQEP():void 
address OPTwrapper;
pattern optimizer.derivePath(mod:str,fcn:str):str 
address OPTwrapper;
comment Join path constructor

pattern optimizer.derivePath():str 
address OPTwrapper;
pattern optimizer.deadcode(mod:str,fcn:str):str 
address OPTwrapper;
comment Dead code optimizer

pattern optimizer.deadcode():str 
address OPTwrapper;
pattern optimizer.dataflow(mod:str,fcn:str):str 
address OPTwrapper;
comment Dataflow bracket code injection

pattern optimizer.dataflow():str 
address OPTwrapper;
pattern optimizer.datacell(mod:str,fcn:str):str 
address OPTwrapper;
comment Datacell expression optimizer

pattern optimizer.datacell():str 
address OPTwrapper;
pattern optimizer.evaluate(mod:str,fcn:str):str 
address OPTwrapper;
comment Evaluate constant expressions once.

pattern optimizer.evaluate():str 
address OPTwrapper;
pattern optimizer.emptySet(mod:str,fcn:str):str 
address OPTwrapper;
comment Symbolic evaluation of empty BAT expressions

pattern optimizer.emptySet():str 
address OPTwrapper;
pattern optimizer.factorize(mod:str,fcn:str):str 
address OPTwrapper;
comment Turn function into a factory

pattern optimizer.factorize():str 
address OPTwrapper;
pattern optimizer.generator(mod:str,fcn:str):str 
address OPTwrapper;
comment Sequence generator optimizer

pattern optimizer.generator():str 
address OPTwrapper;
pattern optimizer.groups(mod:str,fcn:str):str 
address OPTwrapper;
comment Join path constructor

pattern optimizer.groups():str 
address OPTwrapper;
pattern optimizer.garbageCollector(mod:str,fcn:str):str 
address OPTwrapper;
comment Garbage collector optimizer

pattern optimizer.garbageCollector():str 
address OPTwrapper;
pattern optimizer.inline(mod:str,fcn:str):str 
address OPTwrapper;
comment Expand inline functions

pattern optimizer.inline():str 
address OPTwrapper;
pattern optimizer.json(mod:str,fcn:str):str 
address OPTwrapper;
comment Unroll the mat.pack operation

pattern optimizer.json():str 
address OPTwrapper;
pattern optimizer.joinselect(mod:str,fcn:str):str 
address OPTwrapper;
comment Replace select with join select

pattern optimizer.joinselect():str 
address OPTwrapper;
pattern optimizer.joinPath(mod:str,fcn:str):str 
address OPTwrapper;
comment Join path constructor

pattern optimizer.joinPath():str 
address OPTwrapper;
pattern optimizer.matpack(mod:str,fcn:str):str 
address OPTwrapper;
comment Unroll the mat.pack operation

pattern optimizer.matpack():str 
address OPTwrapper;
pattern optimizer.multiplex(mod:str,fcn:str):void 
address OPTwrapper;
comment Compiler for multiplexed instructions.

pattern optimizer.multiplex():void 
address OPTwrapper;
comment Compiler for multiplexed instructions.

pattern optimizer.mitosis(mod:str,fcn:str):str 
address OPTwrapper;
comment Modify the plan to exploit parallel processing on multiple cores

pattern optimizer.mitosis():str 
address OPTwrapper;
pattern optimizer.mergetable(mod:str,fcn:str):str 
address OPTwrapper;
comment Resolve the multi-table definitions

pattern optimizer.mergetable():str 
address OPTwrapper;
pattern optimizer.mapreduce(mod:str,fcn:str):str 
address OPTwrapper;
comment Modify the plan to exploit parallel processing on multiple systems using map-reduce

pattern optimizer.mapreduce():str 
address OPTwrapper;
pattern optimizer.macro(mod:str,fcn:str,targetmod:str,targetfcn:str):void 
address OPTmacro;
comment Inline a target function used in a specific function.

pattern optimizer.macro(targetmod:str,targetfcn:str):void 
address OPTmacro;
comment Inline the code of the target function.

pattern optimizer.origin(mod:str,fcn:str):str 
address OPTwrapper;
comment OID origin tracker

pattern optimizer.origin():str 
address OPTwrapper;
pattern optimizer.octopus(mod:str,fcn:str):str 
address OPTwrapper;
comment Map-execute-reduce parallelism optimizer

pattern optimizer.octopus():str 
address OPTwrapper;
pattern optimizer.orcam(mod:str,fcn:str,targetmod:str,targetfcn:str):void 
address OPTorcam;
comment Inverse macro, find pattern and replace with a function call.

pattern optimizer.orcam(targetmod:str,targetfcn:str):void 
address OPTorcam;
comment Inverse macro processor for current function

pattern optimizer.optimize(mod:str,fcn:str):void 
address QOToptimize;
comment Optimize a specific operation

pattern optimizer.pushselect(mod:str,fcn:str):str 
address OPTwrapper;
comment Push selects down projections

pattern optimizer.pushselect():str 
address OPTwrapper;
pattern optimizer.pushranges(mod:str,fcn:str):str 
address OPTwrapper;
comment Push constant range selections through the program

pattern optimizer.pushranges():str 
address OPTwrapper;
pattern optimizer.prejoin(mod:str,fcn:str):str 
address OPTwrapper;
comment Dead code optimizer

pattern optimizer.prejoin():str 
address OPTwrapper;
pattern optimizer.partitions(mod:str,fcn:str):str 
address OPTwrapper;
comment Experiment with partitioned databases

pattern optimizer.partitions():str 
address OPTwrapper;
pattern optimizer.prelude():void 
address optimizer_prelude;
comment Initialize the optimizer

pattern optimizer.querylog(mod:str,fcn:str):str 
address OPTwrapper;
comment Collect SQL query statistics

pattern optimizer.querylog():str 
address OPTwrapper;
pattern optimizer.reorder(mod:str,fcn:str):str 
address OPTwrapper;
comment Reorder by dataflow dependencies

pattern optimizer.reorder():str 
address OPTwrapper;
pattern optimizer.remoteQueries(mod:str,fcn:str):str 
address OPTwrapper;
comment Resolve the multi-table definitions

pattern optimizer.remoteQueries():str 
address OPTwrapper;
pattern optimizer.remap(mod:str,fcn:str):str 
address OPTwrapper;
comment Remapping function calls to a their multiplex variant

pattern optimizer.remap():str 
address OPTwrapper;
pattern optimizer.reduce(mod:str,fcn:str):str 
address OPTwrapper;
comment Reduce the stack space claims

pattern optimizer.reduce():str 
address OPTwrapper;
pattern optimizer.recycler(mod:str,fcn:str):str 
address OPTwrapper;
comment Recycler marking and code injection

pattern optimizer.recycler():str 
address OPTwrapper;
pattern optimizer.sql_append(mod:str,fcn:str):str 
address OPTsql_append;
comment Avoid extra BAT copy with sql.append() whenever possible.

pattern optimizer.sql_append():str 
address OPTsql_append;
comment Avoid extra BAT copy with sql.append() whenever possible.

pattern optimizer.strengthReduction(mod:str,fcn:str):str 
address OPTwrapper;
comment Move constant expressions out of the loop

pattern optimizer.strengthReduction():str 
address OPTwrapper;
pattern optimizer.selcrack(mod:str,fcn:str):str 
address OPTwrapper;
comment Selection cracking

pattern optimizer.selcrack():str 
address OPTwrapper;
pattern optimizer.showPlan():void 
address QOTshowPlan;
comment Illustrate the plan derived so far

pattern optimizer.showPlan(M:str,F:str,s:str):void 
address QOTshowPlan;
pattern optimizer.showFlowGraph(M:str,F:str,s:str):void 
address QOTshowFlowGraph;
comment Dump the data flow of the function 	M.F in a format recognizable by the 	command 'dot' on the file s

pattern optimizer.setDebug():void 
address QOTdebugOptimizers;
pattern optimizer.trace(mod:str,fcn:str):str 
address OPTwrapper;
comment Collect trace of a specific operation

pattern optimizer.trace():str 
address OPTwrapper;
command pcre.imatch(s:str,pat:str):bit 
address PCREimatch;
comment Caseless Perl Compatible Regular Expression pattern matching against a string

command pcre.index(pat:pcre,s:str):int 
address PCREindex;
comment match a pattern, return matched position (or 0 when not found)

command pcre.match(s:str,pat:str):bit 
address PCREmatch;
comment Perl Compatible Regular Expression pattern matching against a string

pattern pcre.prelude():void 
address pcre_init;
comment Initialize pcre

command pcre.pcre_quote(s:str):str 
address PCREquote;
comment Return a PCRE pattern string that matches the argument exactly.

command pcre.patindex(pat:str,s:str):int 
address PCREpatindex;
comment Location of the first POSIX pattern matching against a string

command pcre.replace(orig:bat[:oid,:str],pat:str,repl:str,flag:str):bat[:oid,:str] 
address PCREreplace_bat_wrap;
command pcre.replace(origin:str,pat:str,repl:str,flags:str):str 
address PCREreplace_wrap;
comment Replace _all_ matches of "pattern" in "origin_str" with "replacement".	 Parameter "flags" accept these flags: 'i', 'm', 's', and 'x'.	   'e': if present, an empty string is considered to be a valid match	   'i': if present, the match operates in case-insensitive mode.		Otherwise, in case-sensitive mode.	   'm': if present, the match operates in multi-line mode.	   's': if present, the match operates in "dot-all"	   The specifications of the flags can be found in "man pcreapi"	   The flag letters may be repeated.	   No other letters than 'e', 'i', 'm', 's' and 'x' are allowed in "flags".	   Returns the replaced string, or if no matches found, the original string.

command pcre.sql2pcre(pat:str,esc:str):str 
address PCREsql2pcre;
comment Convert a SQL like pattern with the given escape character into a PCRE pattern.

command pcre.select(pat:str,strs:bat[:oid,:str]):bat[:oid,:str] 
address PCREselectDef;
comment Select tuples based on the pattern

pattern profiler.activate(name:str...):void 
address CMDactivateProfiler;
comment A list of counters to be activated.

command profiler.cpuload(user:lng,nice:lng,sys:lng,idle:lng,iowait:lng) (cycles:int,io:int) 
address CMDcpuloadPercentage;
comment Calculate the average cpu load percentage and io waiting times

command profiler.cpustats() (user:lng,nice:lng,sys:lng,idle:lng,iowait:lng) 
address CMDcpustats;
comment Extract cpu statistics from the kernel

command profiler.cleanup():void 
address CMDcleanup;
comment Remove the temporary tables for profiling

pattern profiler.clrFilter(v:any):void 
address CMDsetFilterVariable;
comment Stop tracing the variable

pattern profiler.clrFilter(mod:str,fcn:str):void 
address CMDclrFilterProfiler;
comment Clear the performance trace bit	of the selected functions.

command profiler.closeStream():void 
address CMDcloseProfilerStream;
comment Stop sending the event records

command profiler.dumpTrace():void 
address CMDdumpTrace;
comment List the events collected

pattern profiler.deactivate(name:str...):void 
address CMDdeactivateProfiler;
comment A list of counters to be deactivated.

pattern profiler.getFootprint():lng 
address CMDgetFootprint;
comment Get the amount of memory claimed and reset the flag

command profiler.getSystemTime():lng 
address CMDgetSystemTime;
comment Obtain the user timing information.

command profiler.getUserTime():lng 
address CMDgetUserTime;
comment Obtain the user timing information.

command profiler.getDiskWrites():lng 
address CMDgetDiskWrites;
comment Obtain the number of physical reads

command profiler.getDiskReads():lng 
address CMDgetDiskReads;
comment Obtain the number of physical reads

pattern profiler.getEvent() (X_1:lng,X_2:lng,X_3:lng) 
address CMDgetEvent;
comment Retrieve the performance indicators of the previous instruction

command profiler.getTrace(e:str):bat[:oid,:any_1] 
address CMDgetTrace;
comment Get the trace details of a specific event

command profiler.noop():void 
address CMDnoopProfiler;
comment Fetch any pending performance events

pattern profiler.openStream(host:str,port:int):void 
address CMDsetProfilerStream;
comment Send the log events to a stream 

pattern profiler.openStream(fnme:str):void 
address CMDsetProfilerFile;
comment Send the log events to a file, stdout or console

pattern profiler.openStream():void 
address CMDopenProfilerStream;
comment Send the events to output stream

command profiler.reset():void 
address CMDclearTrace;
comment Clear the profiler traces

pattern profiler.stop():void 
address CMDstopProfiler;
comment Stop performance tracing

pattern profiler.start():void 
address CMDstartProfiler;
comment Start performance tracing

pattern profiler.setEndPoint(mod:str,fcn:str):void 
address CMDendPointProfiler;
comment End performance tracing after mod.fcn

pattern profiler.setStartPoint(mod:str,fcn:str):void 
address CMDstartPointProfiler;
comment Start performance tracing at mod.fcn

pattern profiler.setFilter(v:any):void 
address CMDsetFilterVariable;
comment Generate an event record for	every instruction where v is used.

pattern profiler.setFilter(mod:str,fcn:str):void 
address CMDsetFilterProfiler;
comment Generate an event record for all	function calls that satisfy the regular	expression mod.fcn. A wildcard (*) can	be used as name to identify all

pattern profiler.setNone():void 
address CMDsetNoneProfiler;
comment Short cut for clrFilter(*,*).

pattern profiler.setAll():void 
address CMDsetAllProfiler;
comment Short cut for setFilter(*,*).

command profiler.tomograph():void 
address CMDtomograph;
comment No-op operation, merely a signal to the tomograph package

pattern querylog.call(tick1:timestamp,tick2:timestamp,arg:str,tuples:wrd,xtime:lng,rtime:lng,cpu:int,iowait:int,space:lng):void 
address QLOGcall;
comment Add a new query call to the query log

pattern querylog.define(q:str,pipe:str,usr:str,tick:timestamp):oid 
address QLOGdefine;
comment Add a new query call to the query log

command querylog.disable():void 
address QLOGdisable;
comment Turn off the query logger

command querylog.empty():void 
address QLOGempty;
comment Clear the query log tables

command querylog.enable():void 
address QLOGenable;
comment Turn on the query logger

command querylog.enable(threshold:int):void 
address QLOGenableThreshold;
comment Turn on the query logger

command querylog.isset():int 
address QLOGissetFcn;
comment Return status of query logger

function remote.bind_idxbat{inline}(dbconn:str,sch:str,tab:str,index:str,access:int,version:int):bat[:oid,:oid];
function remote.bind{inline}(dbconn:str,sch:str,tab:str,col:str,kind:int,version:int):bat[:oid,:any_1];
pattern remote.bintype():void 
address RMTbintype;
comment print the binary type of this mserver5

pattern remote.batbincopy():bat[:oid,:any] 
address RMTbincopyfrom;
comment store the binary BAT data in the BBP and return as BAT

pattern remote.batbincopy(b:BAT):void 
address RMTbincopyto;
comment dump BAT b in binary form to the stream

pattern remote.batload(tt:any_1,size:int):bat[:oid,:any_1] 
address RMTbatload;
comment create a BAT of the given type and size, and load values from the input stream

command remote.connect(uri:str,user:str,passwd:str,scen:str):str 
address RMTconnectScen;
comment returns a newly created connection for uri, using user name, password and scenario

command remote.connect(uri:str,user:str,passwd:str):str 
address RMTconnect;
comment returns a newly created connection for uri, using user name and password

command remote.disconnect(conn:str):void 
address RMTdisconnect;
comment disconnects the connection pointed to by handle (received from a call to connect()

pattern remote.exec(conn:str,mod:str,func:str,X_4:str...):str... 
address RMTexec;
comment remotely executes <mod>.<func> using the argument list of remote objects and returns the handle to its result

pattern remote.exec(conn:str,mod:str,func:str,X_4:str...):str 
address RMTexec;
comment remotely executes <mod>.<func> using the argument list of remote objects and returns the handle to its result

pattern remote.exec(conn:str,mod:str,func:str):str... 
address RMTexec;
comment remotely executes <mod>.<func> and returns the handle to its result

pattern remote.exec(conn:str,mod:str,func:str):str 
address RMTexec;
comment remotely executes <mod>.<func> and returns the handle to its result

command remote.epilogue():void 
address RMTepilogue;
comment release the resources held by the remote module

pattern remote.get(conn:str,ident:str):any 
address RMTget;
comment retrieves a copy of remote object ident

command remote.isalive(conn:str):int 
address RMTisalive;
comment check if conn is still valid and connected

pattern remote.put(conn:str,object:any):str 
address RMTput;
comment copies object to the remote site and returns its identifier

command remote.prelude():void 
address RMTprelude;
comment initialise the remote module

pattern remote.register(conn:str,mod:str,fcn:str):void 
address RMTregister;
comment register <mod>.<fcn> at the remote site

command remote.resolve(pattern:str):bat[:oid,:str] 
address RMTresolve;
comment resolve a pattern against Merovingian and return the URIs

pattern recycle.append(delta:int,sname:str,tbl:str,col:str,val:any):void 
address RECYCLEappendSQL;
comment Correct recycle pool for SQL append statement

pattern recycle.drop():void 
address RECYCLEdropWrap;
comment Remove the recycle cache

pattern recycle.delete(delta:int,sname:str,tbl:str,col:str):void 
address RECYCLEdeleteSQL;
comment Correct recycle pool for SQL delete statement

pattern recycle.dump():void 
address RECYCLEdumpWrap;
comment Dump summary of recycle table

pattern recycle.reset(bid:bat[:oid,:any]):void 
address RECYCLEresetBATwrap;
comment Reset a recycled bat variable

pattern recycle.setCache(clines:int):void 
address RECYCLEsetCache;
comment Set recycler cache line parameter

command sample.subuniform(b:bat[:oid,:any],s:wrd):bat[:oid,:oid] 
address SAMPLEuniform;
comment Returns the oids of a uniform sample of size s

command sample.uniform(b:bat[:oid,:any],p:dbl):bat[:oid,:oid] 
address SAMPLEuniform_dbl;
comment Returns the oids of a uniform sample of size = (p x count(b)), where 0 <= p <= 1.0

command sample.uniform(b:bat[:oid,:any],s:wrd):bat[:oid,:oid] 
address SAMPLEuniform;
comment Returns the oids of a uniform sample of size s

command sabaoth.epilogue():void 
address SABepilogue;
comment Release the resources held by the sabaoth module

command sabaoth.getLocalConnectionPort():int 
address SABgetLocalConnectionPort;
comment Returns the port this server can be connected to, or 0 if none

command sabaoth.getLocalConnectionHost():str 
address SABgetLocalConnectionHost;
comment Returns the hostname this server can be connected to, or nil if none

command sabaoth.getLocalConnectionURI():str 
address SABgetLocalConnectionURI;
comment Returns the URI this server can be connected to, or nil if none

command sabaoth.marchConnection(host:str,port:int):void 
address SABmarchConnection;
comment Publishes the given host/port as available for connecting to this server

command sabaoth.marchScenario(lang:str):void 
address SABmarchScenario;
comment Publishes the given language as available for this server

command sabaoth.prelude():void 
address SABprelude;
comment Initialise the sabaoth module

command sabaoth.retreatScenario(lang:str):void 
address SABretreatScenario;
comment Unpublishes the given language as available for this server

pattern scheduler.bidding():bit 
address OCTOPUSbidding;
comment Collect bids from workers.

pattern scheduler.costPrediction(a:any):lng 
address RUNcostPrediction;
comment A sample cost prediction function

pattern scheduler.choice(arg:any...):void 
address RUNchoice;
comment Select the next step in a query memo plan

pattern scheduler.choice():void 
address RUNchoice;
comment Select the next step in a query memo plan

pattern scheduler.isolation():void 
address RUNisolation;
comment Run a private copy of the MAL program

pattern scheduler.makeSchedule(X_1:int,X_2:lng...):str... 
address OCTOPUSmakeSchedule;
comment Make schedule based on bids.

pattern scheduler.octopus(t:int):bit 
address OCTOPUSrun;
comment Run the program block in parallel, but don't wait longer than t seconds. Also fix a consistent database version.

pattern scheduler.peers(N:int):void 
address SRVsetServers;
comment Simulate N peers

pattern scheduler.pattern(pat:str):void 
address SRVsetServers;
comment Activate the peers matching the pattern and return number found.

pattern scheduler.pick(arg:any_1...):any_1 
address RUNpickResult;
comment Pick up the first result

pattern scheduler.register():bit 
address OCTOPUSdiscoverRegister;
comment Discover workers and register tentacles.

pattern scheduler.srvpool():int 
address SRVPOOLscheduler;
comment Run a program block in parallel.

pattern scheduler.volumeCost(a:any):lng 
address RUNvolumeCost;
comment A sample cost function based on materialized results

command sql.alpha(dec:dbl,theta:dbl):dbl 
address SQLcst_alpha_cst;
comment Implementation of astronomy alpha function: expands the radius theta depending on the declination

pattern sql.analyze(sch:str,tbl:str,col:str,sample:lng):void 
address sql_analyze;
comment Update the database statistics table

pattern sql.analyze(sch:str,tbl:str,sample:lng):void 
address sql_analyze;
pattern sql.analyze(sch:str,sample:lng):void 
address sql_analyze;
pattern sql.analyze(sample:lng):void 
address sql_analyze;
pattern sql.analyze(sch:str,tbl:str,col:str):void 
address sql_analyze;
comment Update the database statistics table

pattern sql.analyze(sch:str,tbl:str):void 
address sql_analyze;
pattern sql.analyze(sch:str):void 
address sql_analyze;
pattern sql.analyze():void 
address sql_analyze;
pattern sql.argRecord(a:any...):str 
address SQLargRecord;
comment Glue together the calling sequence

pattern sql.argRecord():str 
address SQLargRecord;
comment Glue together the calling sequence

pattern sql.affectedRows{unsafe}(mvc:int,nr:wrd,w:str):int 
address mvc_affected_rows_wrap;
comment export the number of affected rows by the current query

pattern sql.append(mvc:int,sname:str,tname:str,cname:str,ins:any):int 
address mvc_append_wrap;
comment Append b to the column tname.cname (possibly optimized to replace the insert bat of tname.cname (returns sequence number for order dependence)

pattern sql.assert(b:lng,msg:str):void 
address SQLassertLng;
comment Generate an exception when b!=0

pattern sql.assert(b:wrd,msg:str):void 
address SQLassertWrd;
comment Generate an exception when b!=0

pattern sql.assert(b:int,msg:str):void 
address SQLassertInt;
comment Generate an exception when b!=0

pattern sql.assert(b:bit,msg:str):void 
address SQLassert;
comment Generate an exception when b==true

pattern sql.abort():void 
address SQLabort;
comment Trigger the abort operation for a MAL block

pattern sql.bind(mvc:int,schema:str,table:str,column:str,access:int,part_nr:int,nr_parts:int) (uid:bat[:oid,:oid],uval:bat[:oid,:any_1]) 
address mvc_bind_wrap;
comment Bind the 'schema.table.column' BAT with access kind:	0 - base table	1 - inserts	2 - updates

pattern sql.bind(mvc:int,schema:str,table:str,column:str,access:int,part_nr:int,nr_parts:int):bat[:oid,:any_1] 
address mvc_bind_wrap;
comment Bind the 'schema.table.column' BAT partition with access kind:	0 - base table	1 - inserts	2 - updates

pattern sql.bind(mvc:int,schema:str,table:str,column:str,access:int) (uid:bat[:oid,:oid],uval:bat[:oid,:any_1]) 
address mvc_bind_wrap;
comment Bind the 'schema.table.column' BAT with access kind:	0 - base table	1 - inserts	2 - updates

pattern sql.bind(mvc:int,schema:str,table:str,column:str,access:int):bat[:oid,:any_1] 
address mvc_bind_wrap;
comment Bind the 'schema.table.column' BAT with access kind:	0 - base table	1 - inserts	2 - updates

pattern sql.bind_idxbat(mvc:int,schema:str,table:str,index:str,access:int,part_nr:int,nr_parts:int) (uid:bat[:oid,:oid],uval:bat[:oid,:any_1]) 
address mvc_bind_idxbat_wrap;
comment Bind the 'schema.table.index' BAT with access kind:	0 - base table	1 - inserts	2 - updates

pattern sql.bind_idxbat(mvc:int,schema:str,table:str,index:str,access:int,part_nr:int,nr_parts:int):bat[:oid,:any_1] 
address mvc_bind_idxbat_wrap;
comment Bind the 'schema.table.index' BAT with access kind:	0 - base table	1 - inserts	2 - updates

pattern sql.bind_idxbat(mvc:int,schema:str,table:str,index:str,access:int) (uid:bat[:oid,:oid],uval:bat[:oid,:any_1]) 
address mvc_bind_idxbat_wrap;
comment Bind the 'schema.table.index' BAT with access kind:	0 - base table	1 - inserts	2 - updates

pattern sql.bind_idxbat(mvc:int,schema:str,table:str,index:str,access:int):bat[:oid,:any_1] 
address mvc_bind_idxbat_wrap;
comment Bind the 'schema.table.index' BAT with access kind:	0 - base table	1 - inserts	2 - updates

pattern sql.cluster2(sch:str,tbl:str):void 
address SQLcluster2;
comment Cluster the columns of a table on the (first) primary key

pattern sql.cluster1(sch:str,tbl:str):void 
address SQLcluster1;
comment Cluster the columns of a table on the (first) primary key

pattern sql.current_timestamp():timestamp 
address SQLcurrent_timestamp;
comment Get the clients current timestamp

pattern sql.current_time():daytime 
address SQLcurrent_daytime;
comment Get the clients current daytime

pattern sql.copyfrom(sname:str,tname:str,sep:str,rsep:str,ssep:str,ns:str,nr:lng,offset:lng,locked:int):bat[:oid,:any]... 
address mvc_import_table_stdin;
comment Import a table from bstream s with the 	given tuple and seperators (sep/rsep)

pattern sql.copy_from(sname:str,tname:str,sep:str,rsep:str,ssep:str,ns:str,fname:str,nr:lng,offset:lng,locked:int):bat[:oid,:any]... 
address mvc_import_table_wrap;
comment Import a table from bstream s with the 	given tuple and seperators (sep/rsep)

pattern sql.clear_table{unsafe}(sname:str,tname:str):wrd 
address mvc_clear_table_wrap;
comment Clear table

pattern sql.catalog(type:int,iname:str,itype:int,sname:str,tname:str...):void 
address SQLcatalog;
comment a create index catalog statement

pattern sql.catalog(type:int,sname:str,tname:str,grantee:str,privs:int,cname:str,grant:int,grantor:int):void 
address SQLcatalog;
comment a grant/revoke privileges statement

pattern sql.catalog(type:int,user:str,passwd:str,enc:int,schema:str,fullname:str):void 
address SQLcatalog;
comment a user catalog statement

pattern sql.catalog(type:int,grantee:str,role:str):void 
address SQLcatalog;
comment a grant/revoke role statement

pattern sql.catalog(type:int,sname:str,t:ptr,restart:lng):void 
address SQLcatalog;
comment a catalog statement

pattern sql.catalog(type:int,sname:str,t:ptr,temp:int):void 
address SQLcatalog;
comment a catalog statement

pattern sql.catalog(type:int,sname:str,t:ptr):void 
address SQLcatalog;
comment a catalog statement

pattern sql.catalog(type:int,sname:str,name:str,tname:str,time:int,o:int,event:int,oname:str,nname:str,condition:str,query:str):void 
address SQLcatalog;
comment a catalog statement

pattern sql.catalog(type:int,sname:str,name:str,funcid:int,ft:int,action:int):void 
address SQLcatalog;
comment a catalog statement

pattern sql.catalog(type:int,sname:str,name:str,action:int):void 
address SQLcatalog;
comment a catalog statement

pattern sql.commit():void 
address SQLcommit;
comment Trigger the commit operation for a MAL block

command sql.dec_round(v:hge,r:hge):hge 
address hge_dec_round_wrap;
comment round off the value v to nearests multiple of r

command sql.dense_rank(b:bat[:oid,:any_1]):bat[:oid,:int] 
address sql_dense_rank;
comment return the densely ranked bat

command sql.dense_rank_grp(b:bat[:oid,:any_1],gp:bat[:oid,:oid],gpe:bat[:oid,:oid]):bat[:oid,:int] 
address sql_dense_rank_grp;
comment return the densely ranked groups

pattern sql.drop_hash(sch:str,tbl:str):void 
address SQLdrop_hash;
comment Drop hash indices for the given table

command sql.dec_round(v:dbl,r:dbl):dbl 
address dbl_dec_round_wrap;
comment round off the value v to nearests multiple of r

command sql.dec_round(v:flt,r:flt):flt 
address flt_dec_round_wrap;
comment round off the value v to nearests multiple of r

command sql.dec_round(v:lng,r:lng):lng 
address lng_dec_round_wrap;
comment round off the value v to nearests multiple of r

command sql.dec_round(v:int,r:int):int 
address int_dec_round_wrap;
comment round off the value v to nearests multiple of r

command sql.dec_round(v:sht,r:sht):sht 
address sht_dec_round_wrap;
comment round off the value v to nearests multiple of r

command sql.dec_round(v:bte,r:bte):bte 
address bte_dec_round_wrap;
comment round off the value v to nearests multiple of r

pattern sql.dump_trace() (event:bat[:oid,:int],clk:bat[:oid,:str],pc:bat[:oid,:str],thread:bat[:oid,:int],user:bat[:oid,:int],ticks:bat[:oid,:lng],reads:bat[:oid,:lng],writes:bat[:oid,:lng],rbytes:bat[:oid,:lng],wbytes:bat[:oid,:lng],type:bat[:oid,:str],stmt:bat[:oid,:str]) 
address dump_trace;
comment dump the trace statistics

pattern sql.dump_opt_stats() (rewrite:bat[:oid,:str],count:bat[:oid,:int]) 
address dump_opt_stats;
comment dump the optimizer rewrite statistics

pattern sql.dump_cache() (query:bat[:oid,:str],count:bat[:oid,:int]) 
address dump_cache;
comment dump the content of the query cache

pattern sql.db_users():bat[:oid,:str] 
address db_users_wrap;
comment return table of users with sql scenario

pattern sql.dropDeclaredTables{unsafe}(nr:int):void 
address mvc_drop_declared_tables_wrap;
comment drop top n declared tables

pattern sql.dropDeclaredTable{unsafe}(name:str):void 
address mvc_drop_declared_table_wrap;
comment drop a declared table

pattern sql.dtColumn{unsafe}(rs:int,tname:str,name:str,typename:str,digits:int,scale:int):void 
address mvc_declared_table_column_wrap;
pattern sql.declaredTable{unsafe}(name:str):int 
address mvc_declared_table_wrap;
comment Prepare a declared table

pattern sql.delete{unsafe}(mvc:int,sname:str,tname:str,b:any):int 
address mvc_delete_wrap;
comment delete from table

command sql.delta(col:bat[:oid,:any_3],uid:bat[:oid,:oid],uval:bat[:oid,:any_3]):bat[:oid,:any_3] 
address DELTAbat2;
comment Return column bat with delta's applied.

command sql.delta(col:bat[:oid,:any_3],uid:bat[:oid,:oid],uval:bat[:oid,:any_3],ins:bat[:oid,:any_3]):bat[:oid,:any_3] 
address DELTAbat;
comment Return column bat with delta's applied.

command sql.epilogue():void 
address SQLepilogue;
pattern sql.exportValue{unsafe}(qtype:int,tname:str,name:str,typename:str,digits:int,scale:int,eclass:int,val:any_1,w:str):void 
address mvc_export_value_wrap;
comment export a single value onto the stream s

pattern sql.exportOperation{unsafe}(w:str):void 
address mvc_export_operation_wrap;
comment Export result of schema/transaction queries

pattern sql.exportChunk{unsafe}(s:streams,res_id:int,offset:int,nr:int):void 
address mvc_export_chunk_wrap;
comment Export a chunk of the result set (in order) to stream s

pattern sql.exportChunk{unsafe}(s:streams,res_id:int):void 
address mvc_export_chunk_wrap;
comment Export a chunk of the result set (in order) to stream s

pattern sql.exportResult{unsafe}(s:streams,res_id:int):void 
address mvc_export_result_wrap;
comment Export a result (in order) to stream s

pattern sql.exportHead{unsafe}(s:streams,res_id:int):void 
address mvc_export_head_wrap;
comment Export a result (in order) to stream s

pattern sql.evalAlgebra(cmd:str,optimize:bit):void 
address RAstatement;
comment Compile and execute a single 'relational algebra' statement

pattern sql.eval(cmd:str,output:bit):void 
address SQLstatement;
comment Compile and execute a single sql statement (and optionaly send output on the output stream)

pattern sql.eval(cmd:str):void 
address SQLstatement;
comment Compile and execute a single sql statement

command sql.getVersion(clientid:int):lng 
address mvc_getVersion;
comment Return the database version identifier for a client

pattern sql.get_value(sname:str,sequence:str):lng 
address mvc_get_value;
comment return the current value of the sequence

pattern sql.getVariable(mvc:int,varname:str):any_1 
address getVariable;
comment Get the value of a session variable

pattern sql.importTable(sname:str,tname:str,fname:str...):bat[:oid,:any]... 
address mvc_bin_import_table_wrap;
comment Import a table from the files (fname)

pattern sql.include(fname:str):void 
address SQLinclude;
comment Compile and execute a sql statements on the file

pattern sql.init():void 
address SQLinitEnvironment;
comment Initialize the environment for MAL

pattern sql.logfile{unsafe}(filename:str):void 
address mvc_logfile;
comment Enable/disable saving the sql statement traces

command sql.ms_trunc(v:dbl,r:int):dbl 
address dbl_trunc_wrap;
comment truncate the floating point v to r digits behind the dot (if r < 0, before the dot)

command sql.ms_trunc(v:flt,r:int):flt 
address flt_trunc_wrap;
comment truncate the floating point v to r digits behind the dot (if r < 0, before the dot)

pattern sql.mvc():int 
address SQLmvc;
comment Get the multiversion catalog context. Needed for correct statement dependencies(ie sql.update, should be after sql.bind in concurrent execution)

command sql.not_uniques(b:bat[:oid,:wrd]):bat[:oid,:oid] 
address not_unique_oids;
command sql.not_uniques(b:bat[:oid,:oid]):bat[:oid,:oid] 
address not_unique_oids;
comment return not unique oids

command sql.not_unique(b:bat[:oid,:oid]):bit 
address not_unique;
comment check if the tail sorted bat b doesn't have unique tail values

pattern sql.next_value(sname:str,sequence:str):lng 
address mvc_next_value;
comment return the next value of the sequence

pattern sql.optimizer_updates():void 
address SQLoptimizersUpdate;
command sql.optimizers() (X_1:bat[:oid,:str],X_2:bat[:oid,:str],X_3:bat[:oid,:str]) 
address getPipeCatalog;
command sql.prelude():void 
address SQLprelude;
pattern sql.password(user:str):str 
address db_password_wrap;
comment Return password hash of user

command sql.projectdelta(subselect:bat[:oid,:oid],col:bat[:oid,:any_3],uid:bat[:oid,:oid],uval:bat[:oid,:any_3]):bat[:oid,:any_3] 
address DELTAproject2;
comment Return column bat with delta's applied.

command sql.projectdelta(subselect:bat[:oid,:oid],col:bat[:oid,:any_3],uid:bat[:oid,:oid],uval:bat[:oid,:any_3],ins:bat[:oid,:any_3]):bat[:oid,:any_3] 
address DELTAproject;
comment Return column bat with delta's applied.

command sql.querylog_disable():void 
address QLOGdisable;
command sql.querylog_enable(thres:int):void 
address QLOGenableThreshold;
command sql.querylog_enable():void 
address QLOGenable;
pattern sql.querylog_empty():void 
address sql_querylog_empty;
pattern sql.querylog_calls() (id:bat[:oid,:oid],start:bat[:oid,:timestamp],stop:bat[:oid,:timestamp],arguments:bat[:oid,:str],tuples:bat[:oid,:wrd],exec:bat[:oid,:lng],result:bat[:oid,:lng],cpuload:bat[:oid,:int],iowait:bat[:oid,:int],space:bat[:oid,:lng]) 
address sql_querylog_calls;
comment Obtain the query log calls

pattern sql.querylog_catalog() (id:bat[:oid,:oid],user:bat[:oid,:str],defined:bat[:oid,:timestamp],query:bat[:oid,:str],pipe:bat[:oid,:str],mal:bat[:oid,:int],optimize:bat[:oid,:lng]) 
address sql_querylog_catalog;
comment Obtain the query log catalog

command sql.round(v:hge,d:int,s:int,r:bte):hge 
address hge_round_wrap;
comment round off the decimal v(d,s) to r digits behind the dot (if r < 0, before the dot)

pattern sql.rdfshred(location:str,gname:str,schema:str):void 
address SQLrdfShred;
comment Procedure that wraps around the shredder of the rdf module in MAL. Shredding an RDF data file from location results in 7 new tables (6 permutations of SPO and a mapping) in the RDF schema and an entry to table rdf.graph We can then query with SQL queries the RDF triple storeby quering tables gid_spo, gid_pso etc., where gid is looked up in rdf.graph

command sql.rank(b:bat[:oid,:any_1]):bat[:oid,:int] 
address sql_rank;
comment return the rank bat

command sql.rank_grp(b:bat[:oid,:any_1],gp:bat[:oid,:oid],gpe:bat[:oid,:oid]):bat[:oid,:int] 
address sql_rank_grp;
comment return the ranked groups

pattern sql.reuse(sch:str,tbl:str):void 
address SQLreuse;
comment Consolidate the deletion table over all columns reusing deleted slots

command sql.round(v:dbl,r:bte):dbl 
address dbl_round_wrap;
comment round off the floating point v to r digits behind the dot (if r < 0, before the dot)

command sql.round(v:flt,r:bte):flt 
address flt_round_wrap;
comment round off the floating point v to r digits behind the dot (if r < 0, before the dot)

command sql.round(v:lng,d:int,s:int,r:bte):lng 
address lng_round_wrap;
comment round off the decimal v(d,s) to r digits behind the dot (if r < 0, before the dot)

command sql.round(v:int,d:int,s:int,r:bte):int 
address int_round_wrap;
comment round off the decimal v(d,s) to r digits behind the dot (if r < 0, before the dot)

command sql.round(v:sht,d:int,s:int,r:bte):sht 
address sht_round_wrap;
comment round off the decimal v(d,s) to r digits behind the dot (if r < 0, before the dot)

command sql.round(v:bte,d:int,s:int,r:bte):bte 
address bte_round_wrap;
comment round off the decimal v(d,s) to r digits behind the dot (if r < 0, before the dot)

pattern sql.rsColumn{unsafe}(rs:int,tname:str,name:str,typename:str,digits:int,scale:int,col:bat[:oid,:any_1]):void 
address mvc_result_column_wrap;
comment Add the column to the table query result

pattern sql.rsColumn{unsafe}(rs:int,tname:str,name:str,typename:str,digits:int,scale:int,val:any_1):void 
address mvc_result_value_wrap;
comment Add the value to the row query result

pattern sql.resultSet{unsafe}(nr_cols:int,qtype:int,order:bat[:oid,:any_1]):int 
address mvc_result_table_wrap;
comment Prepare a table result set

pattern sql.resultSet{unsafe}(nr_cols:int,qtype:int,order:any_1):int 
address mvc_result_row_wrap;
comment Prepare a row result set

pattern sql.resultSet{unsafe}(nr_cols:int,sep:str,rsep:str,ssep:str,ns:str,order:bat[:oid,:any_1]):int 
address mvc_result_file_wrap;
comment Prepare a file result set

pattern sql.resultSet{unsafe}(nr_cols:int,sep:str,rsep:str,ssep:str,ns:str,order:any_1):int 
address mvc_result_file_wrap;
comment Prepare a file result set

pattern sql.restart{unsafe}(sname:str,sequence:str,start:lng):lng 
address mvc_restart_seq;
comment restart the sequence with value start

function sql.sortReverseTail(b:bat[:oid,:any_1]):bat[:oid,:oid];
function sql.sortTail(b:bat[:oid,:any_1]):bat[:oid,:oid];
function sql.sql_environment() (name:bat[:oid,:str],value:bat[:oid,:str]);
function sql.subzero_or_one{inline}(b:bat[:oid,:any_1],gp:bat[:oid,:oid],gpe:bat[:oid,:oid],no_nil:bit):bat[:oid,:any_1];
pattern sql.shrink(sch:str,tbl:str):void 
address SQLshrink;
comment Consolidate the deletion table over all columns using shrinking

pattern sql.sysmon_stop(tag:lng):void 
address SYSMONstop;
pattern sql.sysmon_stop(tag:int):void 
address SYSMONstop;
pattern sql.sysmon_stop(tag:sht):void 
address SYSMONstop;
pattern sql.sysmon_resume(tag:lng):void 
address SYSMONresume;
pattern sql.sysmon_resume(tag:int):void 
address SYSMONresume;
pattern sql.sysmon_resume(tag:sht):void 
address SYSMONresume;
pattern sql.sysmon_pause(tag:lng):void 
address SYSMONpause;
pattern sql.sysmon_pause(tag:int):void 
address SYSMONpause;
pattern sql.sysmon_pause(tag:sht):void 
address SYSMONpause;
pattern sql.sysmon_queue() (qtag:bat[:oid,:lng],user:bat[:oid,:str],started:bat[:oid,:timestamp],estimate:bat[:oid,:timestamp],progress:bat[:oid,:int],status:bat[:oid,:str],tag:bat[:oid,:oid],query:bat[:oid,:str]) 
address SYSMONqueue;
pattern sql.storage() (schema:bat[:oid,:str],table:bat[:oid,:str],column:bat[:oid,:str],type:bat[:oid,:str],location:bat[:oid,:str],count:bat[:oid,:lng],atomwidth:bat[:oid,:int],columnsize:bat[:oid,:lng],heap:bat[:oid,:lng],hashes:bat[:oid,:lng],imprints:bat[:oid,:lng],sorted:bat[:oid,:bit]) 
address sql_storage;
comment return a table with storage information 

pattern sql.settimeout(s:lng,t:lng):void 
address CLTsetTimeout;
comment Abort query after s and session after t seconds

pattern sql.settimeout(s:lng):void 
address CLTsetTimeout;
comment Abort query after s seconds

pattern sql.sessions() (user:bat[:oid,:str],start:bat[:oid,:timestamp],stimeout:bat[:oid,:lng],lastcmd:bat[:oid,:timestamp],qtimeout:bat[:oid,:lng],idle:bat[:oid,:bit]) 
address sql_sessions_wrap;
comment SQL export table of active sessions, their timeouts and idle status

pattern sql.sql_variables():bat[:oid,:str] 
address sql_variables;
comment return the table with session variables

function sql.single(x:any_2):bat[:oid,:any_2];
command sql.subdelta(col:bat[:oid,:oid],cand:bat[:oid,:oid],uid:bat[:oid,:oid],uval:bat[:oid,:oid]):bat[:oid,:oid] 
address DELTAsub2;
comment Return a single bat of subselected delta.

command sql.subdelta(col:bat[:oid,:oid],cand:bat[:oid,:oid],uid:bat[:oid,:oid],uval:bat[:oid,:oid],ins:bat[:oid,:oid]):bat[:oid,:oid] 
address DELTAsub;
comment Return a single bat of subselected delta.

pattern sql.setVariable(mvc:int,varname:str,value:any_1):int 
address setVariable;
comment Set the value of a session variable

pattern sql.shutdown(delay:int):str 
address SQLshutdown_wrap;
pattern sql.shutdown(delay:sht):str 
address SQLshutdown_wrap;
pattern sql.shutdown(delay:bte):str 
address SQLshutdown_wrap;
pattern sql.shutdown(delay:int,force:bit):str 
address SQLshutdown_wrap;
pattern sql.shutdown(delay:sht,force:bit):str 
address SQLshutdown_wrap;
pattern sql.shutdown(delay:bte,force:bit):str 
address SQLshutdown_wrap;
pattern sql.start2():void 
address SQLsession2;
comment Switch to processing precompiled sql statements

pattern sql.start():void 
address SQLsession;
comment Switch to processing SQL statements

pattern sql.tid(mvc:int,sname:str,tname:str,part_nr:int,nr_parts:int):bat[:oid,:any_3] 
address SQLtid;
comment Return the tables tid column.

pattern sql.tid(mvc:int,sname:str,tname:str):bat[:oid,:any_3] 
address SQLtid;
comment Return the tables tid column.

pattern sql.transaction{unsafe}():void 
address SQLtransaction2;
comment Start an autocommit transaction

pattern sql.trans(type:int,chain:int,name:str):void 
address SQLtransaction;
comment A transaction statement (type can be commit,release,rollback or start)

pattern sql.update(mvc:int,sname:str,tname:str,cname:str,rids:any,upd:any):int 
address mvc_update_wrap;
comment Update the values of the column tname.cname

pattern sql.vacuum(sch:str,tbl:str):void 
address SQLvacuum;
comment Choose an approach to consolidate the deletions

command sql.zero_or_one(col:bat[:oid,:any_1]):any_1 
address zero_or_one;
comment if col contains exactly one value return this. Incase of more raise an exception else return nil

command sqlblob.#fromstr():void 
address SQLBLOBfromstr;
command sqlblob.sqlblob(s:str):sqlblob 
address BLOBsqlblob_fromstr;
command sqlblob.sqlblob(s:sqlblob):sqlblob 
address BLOBblob_blob;
comment Noop routine.

command sqlblob.#tostr():void 
address SQLBLOBtostr;
command srvpool.connect(dbname:str):str 
address SRVPOOLconnect;
comment Returns the connection to the server dbname.

pattern srvpool.exec(fname:str,arg:any...):any... 
address SRVPOOLexec;
comment Remote execution of the function on dbname if channel is free.

command srvpool.local(b:bit):void 
address SRVPOOLlocal;
comment Change location from remote to local execution

pattern srvpool.query(plan:str):str... 
address SRVPOOLquery;
comment Allocate a list of servers for query execution

pattern srvpool.reset(dbname:str):str 
address SRVPOOLreset;
comment Clear the server cache

command str.+(l:str,r:str):str 
address STRConcat;
comment Concatenate two strings.

command str.STRepilogue():void 
address strEpilogue;
command str.STRprelude():void 
address strPrelude;
command str.ascii(s:str):int 
address STRascii;
comment Return unicode of head of string

command str.codeset():str 
address STRcodeset;
comment Return the locale's codeset

command str.endsWith(s:str,suffix:str):bit 
address STRSuffix;
comment Suffix check.

command str.ilike(s:str,pat:str):bit 
address PCREilike2;
command str.ilike(s:str,pat:str,esc:str):bit 
address PCREilike3;
command str.insert(s:str,start:int,l:int,s2:str):str 
address STRinsert;
comment Insert a string into another

command str.iconv(org:str,fromCs:str,toCs:str):str 
address STRIconv;
comment String codeset conversion

command str.like(s:str,pat:str):bit 
address PCRElike2;
command str.like(s:str,pat:str,esc:str):bit 
address PCRElike3;
command str.locate(s1:str,s2:str,start:int):int 
address STRlocate2;
comment Locate the start position of a string

command str.locate(s1:str,s2:str):int 
address STRlocate;
comment Locate the start position of a string

command str.like(s:str,pat:str,esc:str):bit 
address STRlikewrap;
comment SQL pattern match function

command str.like(s:str,pat:str):bit 
address STRlikewrap2;
comment SQL pattern match function

command str.lpad(s:str,len:int,s2:str):str 
address STRLpad2;
comment Fill up the first string to the given length prepending characters of the second string.

command str.lpad(s:str,len:int):str 
address STRLpad;
comment Fill up a string to the given length prepending the whitespace character.

command str.ltrim(s:str,s2:str):str 
address STRLtrim2;
comment Remove the longest string containing only characters from the second string from the start of the first string.

command str.ltrim(s:str):str 
address STRLtrim;
comment Strip whitespaces from start of a string.

command str.length(s:str):int 
address STRLength;
comment Return the length of a string.

command str.not_ilike(s:str,pat:str):bit 
address PCREnotilike2;
command str.not_ilike(s:str,pat:str,esc:str):bit 
address PCREnotilike3;
command str.not_like(s:str,pat:str):bit 
address PCREnotlike2;
command str.not_like(s:str,pat:str,esc:str):bit 
address PCREnotlike3;
command str.nbytes(s:str):int 
address STRBytes;
comment Return the string length in bytes.

command str.prefix(s:str,l:int):str 
address STRprefix;
comment Extract the prefix of a given length

command str.replace(origin:str,pat:str,repl:str,flags:str):str 
address PCREreplace_wrap;
command str.repeat(s2:str,c:int):str 
address STRrepeat;
command str.replace(s:str,pat:str,s2:str):str 
address STRreplace;
comment Insert a string into another

command str.rpad(s:str,len:int,s2:str):str 
address STRRpad2;
comment Fill up the first string to the given length appending characters of the second string.

command str.rpad(s:str,len:int):str 
address STRRpad;
comment Fill up a string to the given length appending the whitespace character.

command str.rtrim(s:str,s2:str):str 
address STRRtrim2;
comment Remove the longest string containing only characters from the second string from the end of the first string.

command str.rtrim(s:str):str 
address STRRtrim;
comment Strip whitespaces from end of a string.

command str.r_search(s:str,c:str):int 
address STRReverseStrSearch;
comment Reverse search for a substring. Returns	 position, -1 if not found.

command str.space(l:int):str 
address STRspace;
command str.stringright(s:str,l:int):str 
address STRsuffix;
command str.stringleft(s:str,l:int):str 
address STRprefix;
command str.suffix(s:str,l:int):str 
address STRsuffix;
comment Extract the suffix of a given length

command str.substring(s:str,start:int,len:int):str 
address STRsubstring;
comment Extract a substring from str starting at start, for length len

command str.substring(s:str,start:int):str 
address STRsubstringTail;
comment Extract the tail of a string

command str.substitute(s:str,src:str,dst:str,rep:bit):str 
address STRSubstitute;
comment Substitute first occurrence of 'src' by	'dst'.  Iff repeated = true this is	repeated while 'src' can be found in the	result string. In order to prevent	recursion and result strings of unlimited	size, repeating is only done iff src is	not a substring of dst.

command str.search(s:str,c:str):int 
address STRstrSearch;
comment Search for a substring. Returns	 position, -1 if not found.

command str.startsWith(s:str,prefix:str):bit 
address STRPrefix;
comment Prefix check.

command str.stringlength(s:str):int 
address STRstringLength;
comment Return the length of a right trimed string (SQL semantics).

command str.string(s:str,offset:int,count:int):str 
address STRSubString;
comment Return substring s[offset..offset+count] of a string s[0..n]

command str.string(s:str,offset:int):str 
address STRTail;
comment Return the tail s[offset..n]	 of a string s[0..n].

command str.str(s:str):str 
address STRtostr;
comment Noop routine.

command str.trim(s:str,s2:str):str 
address STRStrip2;
comment Remove the longest string containing only characters from the second string around the first string.

command str.trim(s:str):str 
address STRStrip;
comment Strip whitespaces around a string.

command str.toUpper(s:str):str 
address STRUpper;
comment Convert a string to upper case.

command str.toLower(s:str):str 
address STRLower;
comment Convert a string to lower case.

command str.unicode(wchar:int):str 
address STRFromWChr;
comment convert a unicode to a character.

command str.unicodeAt(s:str,index:int):int 
address STRWChrAt;
comment get a unicode character	(as an int) from a string position.

command status.batStatistics() (X_1:bat[:oid,:str],X_2:bat[:oid,:str]) 
address SYSgdkEnv;
comment Show distribution of bats by kind

command status.cpuStatistics() (X_1:bat[:oid,:str],X_2:bat[:oid,:int]) 
address SYScpuStatistics;
comment Global cpu usage information

command status.getThreads() (X_1:bat[:oid,:int],X_2:bat[:oid,:str]) 
address SYSgdkThread;
comment Produce overview of active threads

command status.ioStatistics() (X_1:bat[:oid,:str],X_2:bat[:oid,:int]) 
address SYSioStatistics;
comment Global IO activity information

command status.mem_maxsize(v:lng):void 
address SYSsetmem_maxsize;
comment Set the maximum usable amount of physical swapspace in KB

command status.mem_maxsize():lng 
address SYSgetmem_maxsize;
comment The maximum usable amount of physical swapspace in KB (target only)

command status.mem_cursize():lng 
address SYSgetmem_cursize;
comment The amount of physical swapspace in KB that is currently in use

command status.memUsage(minsize:lng) (X_2:bat[:oid,:str],X_3:bat[:oid,:lng]) 
address SYSmem_usage;
comment Get a split-up of how much memory blocks are in use

command status.memStatistics() (X_1:bat[:oid,:str],X_2:bat[:oid,:wrd]) 
address SYSmemStatistics;
comment Global memory usage information

command status.vm_maxsize(v:lng):void 
address SYSsetvm_maxsize;
comment Set the maximum usable amount of physical swapspace in KB

command status.vm_maxsize():lng 
address SYSgetvm_maxsize;
comment The maximum usable amount of logical VM space in KB (target only)

command status.vm_cursize():lng 
address SYSgetvm_cursize;
comment The amount of logical VM space in KB that is currently in use

command status.vmStatistics(minsize:lng) (X_2:bat[:oid,:str],X_3:bat[:oid,:lng]) 
address SYSvm_usage;
comment Get a split-up of how much virtual memory blocks are in use

command streams.blocked{unsafe}(s:streams):streams 
address open_block_streamwrap;
comment open a block based stream

command streams.close{unsafe}(s:streams):void 
address mnstr_close_streamwrap;
comment close and destroy the stream s

command streams.flush{unsafe}(s:streams):void 
address mnstr_flush_streamwrap;
comment flush the stream

command streams.openWrite{unsafe}(s:streams):streams 
address mnstr_stream_wstreamwrap;
comment convert an ascii stream to binary

command streams.openRead{unsafe}(s:streams):streams 
address mnstr_stream_rstreamwrap;
comment convert an ascii stream to binary

command streams.openWrite{unsafe}(filename:str):streams 
address mnstr_open_wastreamwrap;
comment open ascii file stream for writing

command streams.openRead{unsafe}(filename:str):streams 
address mnstr_open_rastreamwrap;
comment open ascii file stream for reading

command streams.openWriteBytes{unsafe}(filename:str):streams 
address mnstr_open_wstreamwrap;
comment open a file stream for writing

command streams.openReadBytes{unsafe}(filename:str):streams 
address mnstr_open_rstreamwrap;
comment open a file stream for reading

command streams.readInt{unsafe}(s:streams):int 
address mnstr_readIntwrap;
comment read integer data from the stream

command streams.readStr{unsafe}(s:streams):str 
address mnstr_read_stringwrap;
comment read string data from the stream

command streams.socketWrite{unsafe}(skt:int,name:str):streams 
address mnstr_socket_wastreamwrap;
comment open ascii socket stream for writing

command streams.socketRead{unsafe}(skt:int,name:str):streams 
address mnstr_socket_rastreamwrap;
comment open ascii socket stream for reading

command streams.socketWriteBytes{unsafe}(skt:int,name:str):streams 
address mnstr_socket_wstreamwrap;
comment open a socket stream for writing

command streams.socketReadBytes{unsafe}(skt:int,name:str):streams 
address mnstr_socket_rstreamwrap;
comment open a socket stream for reading

command streams.writeInt{unsafe}(s:streams,data:int):void 
address mnstr_writeIntwrap;
comment write data on the stream

command streams.writeStr{unsafe}(s:streams,data:str):void 
address mnstr_write_stringwrap;
comment write data on the stream

command sysmon.pause(id:lng):void 
address SYSMONpause;
comment Temporary suspend a single query

command sysmon.pause(id:int):void 
address SYSMONpause;
command sysmon.pause(id:sht):void 
address SYSMONpause;
pattern sysmon.queue() (tag:bat[:oid,:lng],user:bat[:oid,:str],started:bat[:oid,:timestamp],estimate:bat[:oid,:timestamp],progress:bat[:oid,:int],status:bat[:oid,:str],qrytag:bat[:oid,:oid],query:bat[:oid,:str]) 
address SYSMONqueue;
command sysmon.resume(id:lng):void 
address SYSMONresume;
comment Resume processing 

command sysmon.resume(id:int):void 
address SYSMONresume;
command sysmon.resume(id:sht):void 
address SYSMONresume;
command sysmon.stop(id:lng):void 
address SYSMONstop;
comment Stop a single query a.s.a.p.

command sysmon.stop(id:int):void 
address SYSMONstop;
command sysmon.stop(id:sht):void 
address SYSMONstop;
command timezone.#fromstr():timezone 
address tzone_fromstr;
command timezone.str():str 
address MTIMEtzone_tostr;
command timezone.timestamp(secs:int):timestamp 
address MTIMEtimestamp;
comment Utility function to create a timestamp from a number of seconds since the Unix epoch

command timezone.timestamp(s:str):timestamp 
address MTIMEtimestamp_fromstr;
command timezone.#tostr():str 
address tzone_tostr;
pattern timestamp.!=(v:timestamp,w:timestamp):bit 
address CMDvarNE;
comment Equality of two timestamps

pattern timestamp.<=(v:timestamp,w:timestamp):bit 
address CMDvarLE;
comment Equality of two timestamps

pattern timestamp.<(v:timestamp,w:timestamp):bit 
address CMDvarLT;
comment Equality of two timestamps

pattern timestamp.==(v:timestamp,w:timestamp):bit 
address CMDvarEQ;
comment Equality of two timestamps

pattern timestamp.>=(v:timestamp,w:timestamp):bit 
address CMDvarGE;
comment Equality of two timestamps

pattern timestamp.>(v:timestamp,w:timestamp):bit 
address CMDvarGT;
comment Equality of two timestamps

command timestamp.epoch(t:int):timestamp 
address MTIMEtimestamp;
comment convert seconds since epoch into a timestamp

command timestamp.epoch(t:timestamp):int 
address MTIMEepoch2int;
comment unix-time (epoch) support: seconds since epoch

command timestamp.epoch{unsafe}():timestamp 
address MTIMEcurrent_timestamp;
comment unix-time (epoch) support: seconds since the Unix epoch

command timestamp.#fromstr():timestamp 
address timestamp_fromstr;
pattern timestamp.isnil(v:timestamp):bit 
address CMDvarISNIL;
comment Nil test for timestamp value

command timestamp.#tostr():str 
address timestamp_tostr;
command timestamp.unix_epoch{unsafe}():timestamp 
address MTIMEunix_epoch;
comment The Unix epoch time (00:00:00 UTC on January 1, 1970)

command tokenizer.append(u:str):oid 
address TKNZRappend;
comment tokenize a new string and append it to the tokenizer (duplicate elimination is performed)

command tokenizer.close():void 
address TKNZRclose;
comment close the current tokenizer store

command tokenizer.depositFile(fnme:str):void 
address TKNZRdepositFile;
comment batch insertion from a file of strings to tokenize, each string is separated by a new line

command tokenizer.getCardinality():bat[:oid,:wrd] 
address TKNZRgetCardinality;
comment debugging function that returns the unique tokens at each level

command tokenizer.getCount():bat[:oid,:wrd] 
address TKNZRgetCount;
comment debugging function that returns the size of the bats at each level

command tokenizer.getIndex():bat[:oid,:oid] 
address TKNZRgetIndex;
comment administrative function that returns the INDEX bat

command tokenizer.getLevel(i:int):bat[:oid,:str] 
address TKNZRgetLevel;
comment administrative function that returns the bat on level i

pattern tokenizer.locate(s:str):oid 
address TKNZRlocate;
comment if the given string is in the store returns its oid, otherwise oid_nil

command tokenizer.open(name:str):void 
address TKNZRopen;
comment open the named tokenizer store, a new one is created if the specified name does not exist

pattern tokenizer.take(i:oid):str 
address TKNZRtakeOid;
comment reconstruct and returns the i-th string

command transaction.alpha(b:bat[:oid,:any_1]):bat[:oid,:any_1] 
address TRNtrans_alpha;
comment List insertions since last commit.

pattern transaction.abort(c:any...):void 
address TRNtrans_abort;
comment Abort changes in certain BATs.

command transaction.abort():bit 
address TRNglobal_abort;
comment Global abort on all BATs

pattern transaction.clean(c:any...):void 
address TRNtrans_clean;
comment Declare a BAT clean without flushing to disk.

pattern transaction.commit(c:any...):void 
address TRNtrans_commit;
comment Commit changes in certain BATs.

command transaction.commit():bit 
address TRNglobal_commit;
comment Global commit on all BATs

command transaction.delta(b:bat[:oid,:any_1]):bat[:oid,:any_1] 
address TRNtrans_delta;
comment List deletions since last commit.

command transaction.prev(b:bat[:oid,:any_1]):bat[:oid,:any_1] 
address TRNtrans_prev;
comment The previous state of this BAT

command transaction.subcommit(b:bat[:oid,:str]):bit 
address TRNsubcommit;
comment commit only a set of BATnames, passed in the tail(to which you must have exclusive access!)

command transaction.sync():bit 
address TRNglobal_sync;
comment Save all persistent BATs

pattern trader.makeBids(bidtype:sht,fnname1:str...):lng... 
address TRADERmakeBids;
comment Make execution bids for functions octopus.<fnname1>, ...

pattern trader.makeBid(fnname:str,bidtype:sht):lng 
address TRADERmakeBid;
comment Make a bid for execution of function octopus.<fnname>

command txtsim.editdistance2(s:str,t:str):int 
address levenshteinbasic2_impl;
comment Calculates Levenshtein distance (edit distance) between two strings. Cost of transposition is 1 instead of 2

command txtsim.editdistance(s:str,t:str):int 
address levenshteinbasic_impl;
comment Alias for Levenshtein(str,str)

command txtsim.levenshtein(s:str,t:str):int 
address levenshteinbasic_impl;
comment Calculates Levenshtein distance (edit distance) between two strings

command txtsim.levenshtein(s:str,t:str,insdel_cost:int,replace_cost:int,transpose_cost:int):int 
address levenshtein_impl;
comment Calculates Levenshtein distance (edit distance) between two strings, variable operation costs (ins/del, replacement, transposition)

command txtsim.qgramselfjoin(qgram:bat[:oid,:oid],id:bat[:oid,:oid],pos:bat[:oid,:int],len:bat[:oid,:int],c:flt,k:int) (X_7:bat[:oid,:int],X_8:bat[:oid,:int]) 
address CMDqgramselfjoin;
comment QGram self-join on ordered(!) qgram tables and sub-ordered q-gram positions

command txtsim.qgramnormalize(input:str):str 
address CMDqgramnormalize;
comment 'Normalizes' strings (eg. toUpper and replaces non-alphanumerics with one space

command txtsim.str2qgrams(s:str):bat[:oid,:str] 
address CMDstr2qgrams;
comment Break the string into 4-grams

command txtsim.stringdiff(s1:str,s2:str):int 
address stringdiff_impl;
comment calculate the soundexed editdistance

command txtsim.soundex(name:str):str 
address soundex_impl;
comment Soundex function for phonetic matching

command txtsim.similarity(string1:str,string2:str):dbl 
address fstrcmp0_impl;
comment Normalized edit distance between two strings

command txtsim.similarity(string1:str,string2:str,minimum:dbl):dbl 
address fstrcmp_impl;
comment Normalized edit distance between two strings

command udf.fuse(one:lng,two:lng):hge 
address UDFfuse_lng_hge;
comment fuse two (8-byte) lng values into one (16-byte) hge value

command udf.fuse(one:int,two:int):lng 
address UDFfuse_int_lng;
comment fuse two (4-byte) int values into one (8-byte) lng value

command udf.fuse(one:sht,two:sht):int 
address UDFfuse_sht_int;
comment fuse two (2-byte) sht values into one (4-byte) int value

command udf.fuse(one:bte,two:bte):sht 
address UDFfuse_bte_sht;
comment fuse two (1-byte) bte values into one (2-byte) sht value

command udf.reverse(ra1:str):str 
address UDFreverse;
comment Reverse a string

command url.#fromstr():url 
address URLfromString;
comment Convert a string to an url. 

command url.getRobotURL(u:url):str 
address URLgetRobotURL;
comment Extract the location of the robot control file

command url.getUser(u:url):str 
address URLgetUser;
comment Extract the user identity from the URL

command url.getQuery(u:url):str 
address URLgetQuery;
comment Extract the query string from the URL

command url.getProtocol(u:url):str 
address URLgetProtocol;
comment Extract the protocol from the URL

command url.getPort(u:url):str 
address URLgetPort;
comment Extract the port id from the URL

command url.getHost(u:url):str 
address URLgetHost;
comment Extract the server name from the URL

command url.getFile(u:url):str 
address URLgetFile;
comment Extract the last file name of the URL

command url.getExtension(u:url):str 
address URLgetExtension;
comment Extract the file extension of the URL

command url.getDomain(u:url):str 
address URLgetDomain;
comment Extract Internet domain from the URL

command url.getContext(u:url):str 
address URLgetContext;
comment Get the path context of a URL

command url.getContent(u:url):str 
address URLgetContent;
comment Get the URL resource in a local file

command url.getBasename(u:url):str 
address URLgetBasename;
comment Extract the URL base file name

command url.getAnchor(u:url):str 
address URLgetAnchor;
comment Extract the URL anchor (reference)

command url.isaURL(u:url):bit 
address URLisaURL;
comment Check conformity of the URL syntax

command url.new(prot:str,host:str,fnme:str):url 
address URLnew3;
comment Construct URL from protocol, host,and file

command url.new(p:str,h:str,prt:int,f:str):url 
address URLnew4;
comment Construct URL from protocol, host, port, and file

command url.#tostr():str 
address URLtoString;
comment Convert url to string equivalent

command url.url(s:url):url 
address URLnoop;
comment Create an URL from a string literal

command url.url(s:str):url 
address URLnew;
comment Create an URL from a string literal

command uuid.#cmp():int 
address UUIDcompare;
command uuid.#fromstr():uuid 
address UUIDfromString;
command uuid.#hash():int 
address UUIDhash;
command uuid.isaUUID(u:str):bit 
address UUIDisaUUID;
comment Test a string for a UUID format

command uuid.new():uuid 
address UUIDgenerateUuid;
comment Generate a new uuid

command uuid.#null():uuid 
address UUIDnull;
command uuid.prelude():void 
address UUIDprelude;
command uuid.#read():uuid 
address UUIDread;
command uuid.str(u:uuid):str 
address UUIDuuid2str;
comment Coerce a uuid to its string type

command uuid.#tostr():str 
address UUIDtoString;
command uuid.uuid(s:str):uuid 
address UUIDstr2uuid;
comment Coerce a string to a uuid, validating its format

command uuid.#write():int 
address UUIDwrite;
command wkb.FromText{unsafe}(w:str,type:int):wkb 
address wkbFromText;
command wkb.#cmp():int 
address wkbCOMP;
command wkb.#del():int 
address wkbDEL;
command wkb.#fromstr():wkb 
address wkbFROMSTR;
command wkb.#heap():int 
address wkbHEAP;
command wkb.#hash():int 
address wkbHASH;
command wkb.#length():int 
address wkbLENGTH;
command wkb.#null():int 
address wkbNULL;
command wkb.#put():int 
address wkbPUT;
command wkb.#read():void 
address wkbREAD;
command wkb.#tostr():str 
address wkbTOSTR;
command wkb.wkb{unsafe}(v:str):wkb 
address wkbFromString;
command wkb.#write():void 
address wkbWRITE;
command xml.aggr(val:bat[:oid,:xml]):xml 
address BATXMLgroup;
comment Aggregate the XML values.

command xml.agg(val:bat[:oid,:xml]):xml 
address BATXMLgroup;
comment Aggregate the XML values over groups specified.

command xml.agg(val:bat[:oid,:xml],grp:bat[:oid,:oid]):bat[:oid,:xml] 
address BATXMLagg;
comment Aggregate the XML values over groups specified.

command xml.agg(val:bat[:oid,:xml],grp:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:xml] 
address BATXMLagg3;
comment Aggregate the XML values over groups specified.

command xml.attribute(name:str,val:str):xml 
address XMLattribute;
comment Construct an attribute value pair

command xml.concat(val1:xml,val2:xml):xml 
address XMLconcat;
comment Concatenate the xml values

command xml.content(val:str):xml 
address XMLcontent;
comment Check the value for compliance as content, i.e.  it may contain multiple roots and character data.

command xml.comment(val:str):xml 
address XMLcomment;
comment Construct an comment struction 

command xml.document(val:str):xml 
address XMLdocument;
comment Check the value for compliance as XML document

command xml.element(name:str,s:xml):xml 
address XMLelementSmall;
comment The basic building block for XML elements are namespaces, attributes and a sequence of xml elements. The name space and the attributes may be left unspecified(=nil:bat).

command xml.element(name:str,ns:xml,attr:xml,s:xml):xml 
address XMLelement;
comment The basic building block for XML elements are namespaces, attributes and a sequence of xml elements. The name space and the attributes may be left unspecified(=nil:bat).

pattern xml.forest(val:xml...):xml 
address XMLforest;
comment Construct an element list

command xml.#fromstr():xml 
address XMLfromString;
comment Convert a string to an xml.

command xml.isdocument(val:str):bit 
address XMLisdocument;
comment Validate the string as a document

command xml.prelude():void 
address XMLprelude;
command xml.pi(target:str,val:str):xml 
address XMLpi;
comment Construct a processing instruction

command xml.parse(doccont:str,val:str,option:str):xml 
address XMLparse;
comment Parse the XML document or element string values 

command xml.root(val:xml,version:str,standalone:str):xml 
address XMLroot;
comment Construct the root nodes

command xml.subaggr(val:bat[:oid,:xml],g:bat[:oid,:oid],e:bat[:oid,:any_1],s:bat[:oid,:oid],skip_nils:bit):bat[:oid,:xml] 
address AGGRsubxmlcand;
comment Grouped aggregation of XML values with candidates list.

command xml.subaggr(val:bat[:oid,:xml],g:bat[:oid,:oid],e:bat[:oid,:any_1],skip_nils:bit):bat[:oid,:xml] 
address AGGRsubxml;
comment Grouped aggregation of XML values.

command xml.str(src:xml):str 
address XMLxml2str;
comment Cast the string to an xml compliant string

command xml.text(src:xml):str 
address XMLxmltext;
comment Extract text from an xml atom

command xml.#tostr():str 
address XMLtoString;
comment Convert xml to string equivalent

command xml.xml(src:str):xml 
address XMLstr2xml;
comment Cast the string to an xml compliant string

command zorder.decode_y(z:bat[:oid,:oid]):bat[:oid,:int] 
address ZORDbatdecode_int_oid_y;
comment Derive the z-order y-coordinate

command zorder.decode_y(z:oid):int 
address ZORDdecode_int_oid_y;
comment Derive the z-order y-coordinate

command zorder.decode_x(z:bat[:oid,:oid]):bat[:oid,:int] 
address ZORDbatdecode_int_oid_x;
comment Derive the z-order x-coordinate

command zorder.decode_x(z:oid):int 
address ZORDdecode_int_oid_x;
comment Derive the z-order x-coordinate

command zorder.decode(z:bat[:oid,:oid]) (X_2:bat[:oid,:int],X_3:bat[:oid,:int]) 
address ZORDbatdecode_int_oid;
comment Derive the z-order pair

command zorder.decode(z:oid) (x:int,y:int) 
address ZORDdecode_int_oid;
comment Derive the z-order pair

command zorder.encode(x:bat[:oid,:int],y:bat[:oid,:int]):bat[:oid,:oid] 
address ZORDbatencode_int_oid;
comment Derive the z-order index from a value pair

command zorder.encode(x:int,y:int):oid 
address ZORDencode_int_oid;
comment Derive the z-order index from a value pair

command zorder.slice(xb:int,yb:int,xt:int,yt:int):bat[:oid,:oid] 
address ZORDslice_int;
comment Extract the Z-order indices between two points

command zrule.define(m:int,d:str,w:int,min:int):zrule 
address MTIMEruleDef2;
comment Introduce a synomym timezone rule.

command zrule.define(m:int,d:str,w:int,h:int,min:int):zrule 
address MTIMEruleDef1;
comment Introduce a synomym timezone rule.

command zrule.define(m:int,d:int,w:int,h:int,min:int):zrule 
address MTIMEruleDef0;
comment Introduce a synomym timezone rule.

command zrule.#fromstr():zrule 
address rule_fromstr;
command zrule.#tostr():str 
address rule_tostr;

# 14:24:13 >  
# 14:24:13 >  "Done."
# 14:24:13 >  

