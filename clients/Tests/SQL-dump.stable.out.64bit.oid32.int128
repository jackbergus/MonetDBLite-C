stdout of test 'SQL-dump` in directory 'clients` itself:


# 15:01:36 >  
# 15:01:36 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34237" "--set" "mapi_usock=/var/tmp/mtest-13451/.s.monetdb.34237" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/sjoerd/Monet-candidate/var/MonetDB/mTests_clients" "--set" "mal_listing=0"
# 15:01:36 >  

# MonetDB 5 server v11.17.0 (hg id: 51cced809df4)
# This is an unreleased version
# Serving database 'mTests_clients', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2014 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://madrid.ins.cwi.nl:34237/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-13451/.s.monetdb.34237
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_compress.sql
# loading sql script: 18_dictionary.sql
# loading sql script: 19_cluster.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 39_analytics.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 46_gsl.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 99_system.sql

# 15:01:36 >  
# 15:01:36 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-13451" "--port=34237"
# 15:01:36 >  

SCHEMA  tmp
SCHEMA         tmp
SYSTEM SCHEMA  sys
SYSTEM TABLE  sys._columns
SYSTEM TABLE  sys._tables
SYSTEM TABLE  sys.args
SYSTEM TABLE  sys.auths
SYSTEM TABLE  sys.connections
SYSTEM TABLE  sys.db_user_info
SYSTEM TABLE  sys.dependencies
SYSTEM TABLE  sys.functions
SYSTEM TABLE  sys.idxs
SYSTEM TABLE  sys.keys
SYSTEM TABLE  sys.objects
SYSTEM TABLE  sys.privileges
SYSTEM TABLE  sys.schemas
SYSTEM TABLE  sys.sequences
SYSTEM TABLE  sys.statistics
SYSTEM TABLE  sys.storagemodelinput
SYSTEM TABLE  sys.systemfunctions
SYSTEM TABLE  sys.triggers
SYSTEM TABLE  sys.types
SYSTEM TABLE  sys.user_role
SYSTEM VIEW  sys.columns
SYSTEM VIEW  sys.environment
SYSTEM VIEW  sys.optimizers
SYSTEM VIEW  sys.querylog_calls
SYSTEM VIEW  sys.querylog_catalog
SYSTEM VIEW  sys.querylog_history
SYSTEM VIEW  sys.queue
SYSTEM VIEW  sys.sessions
SYSTEM VIEW  sys.storage
SYSTEM VIEW  sys.storagemodel
SYSTEM VIEW  sys.tables
SYSTEM VIEW  sys.tablestoragemodel
SYSTEM VIEW  sys.tracelog
SYSTEM VIEW  sys.users
SYSTEM FUNCTION  sys.Intersect
SYSTEM FUNCTION  sys.Union
SYSTEM FUNCTION  sys.abbrev
SYSTEM FUNCTION  sys.alpha
SYSTEM FUNCTION  sys.analyze
SYSTEM FUNCTION  sys.area
SYSTEM FUNCTION  sys.astext
SYSTEM FUNCTION  sys.bbp
SYSTEM FUNCTION  sys.boundary
SYSTEM FUNCTION  sys.broadcast
SYSTEM FUNCTION  sys.buffer
SYSTEM FUNCTION  sys.cluster1
SYSTEM FUNCTION  sys.cluster2
SYSTEM FUNCTION  sys.columnsize
SYSTEM FUNCTION  sys.contains
SYSTEM FUNCTION  sys.convexhull
SYSTEM FUNCTION  sys.corr
SYSTEM FUNCTION  sys.crosses
SYSTEM FUNCTION  sys.date_to_str
SYSTEM FUNCTION  sys.db_users
SYSTEM FUNCTION  sys.degrees
SYSTEM FUNCTION  sys.dependencies_columns_on_functions
SYSTEM FUNCTION  sys.dependencies_columns_on_indexes
SYSTEM FUNCTION  sys.dependencies_columns_on_keys
SYSTEM FUNCTION  sys.dependencies_columns_on_triggers
SYSTEM FUNCTION  sys.dependencies_columns_on_views
SYSTEM FUNCTION  sys.dependencies_functions_on_functions
SYSTEM FUNCTION  sys.dependencies_functions_os_triggers
SYSTEM FUNCTION  sys.dependencies_keys_on_foreignkeys
SYSTEM FUNCTION  sys.dependencies_owners_on_schemas
SYSTEM FUNCTION  sys.dependencies_schemas_on_users
SYSTEM FUNCTION  sys.dependencies_tables_on_foreignkeys
SYSTEM FUNCTION  sys.dependencies_tables_on_functions
SYSTEM FUNCTION  sys.dependencies_tables_on_indexes
SYSTEM FUNCTION  sys.dependencies_tables_on_triggers
SYSTEM FUNCTION  sys.dependencies_tables_on_views
SYSTEM FUNCTION  sys.dependencies_views_on_functions
SYSTEM FUNCTION  sys.dependencies_views_on_triggers
SYSTEM FUNCTION  sys.difference
SYSTEM FUNCTION  sys.dimension
SYSTEM FUNCTION  sys.disjoint
SYSTEM FUNCTION  sys.distance
SYSTEM FUNCTION  sys.dropdictionary
SYSTEM FUNCTION  sys.env
SYSTEM FUNCTION  sys.envelope
SYSTEM FUNCTION  sys.environment
SYSTEM FUNCTION  sys.equals
SYSTEM FUNCTION  sys.evalalgebra
SYSTEM FUNCTION  sys.fuse
SYSTEM FUNCTION  sys.geomcollectionfromtext
SYSTEM FUNCTION  sys.geometrytypeid
SYSTEM FUNCTION  sys.geomfromtext
SYSTEM FUNCTION  sys.getanchor
SYSTEM FUNCTION  sys.getbasename
SYSTEM FUNCTION  sys.getcontent
SYSTEM FUNCTION  sys.getcontext
SYSTEM FUNCTION  sys.getdomain
SYSTEM FUNCTION  sys.getextension
SYSTEM FUNCTION  sys.getfile
SYSTEM FUNCTION  sys.gethost
SYSTEM FUNCTION  sys.getport
SYSTEM FUNCTION  sys.getprotocol
SYSTEM FUNCTION  sys.getquery
SYSTEM FUNCTION  sys.getroboturl
SYSTEM FUNCTION  sys.getuser
SYSTEM FUNCTION  sys.gzcompress
SYSTEM FUNCTION  sys.gzdecompress
SYSTEM FUNCTION  sys.gzexpand
SYSTEM FUNCTION  sys.gztruncate
SYSTEM FUNCTION  sys.heapsize
SYSTEM FUNCTION  sys.host
SYSTEM FUNCTION  sys.hostmask
SYSTEM FUNCTION  sys.ilike
SYSTEM FUNCTION  sys.indexsize
SYSTEM FUNCTION  sys.initializedictionary
SYSTEM FUNCTION  sys.intersection
SYSTEM FUNCTION  sys.isaurl
SYSTEM FUNCTION  sys.isempty
SYSTEM FUNCTION  sys.issimple
SYSTEM FUNCTION  sys.length
SYSTEM FUNCTION  sys.like
SYSTEM FUNCTION  sys.linefromtext
SYSTEM FUNCTION  sys.masklen
SYSTEM FUNCTION  sys.mbr
SYSTEM FUNCTION  sys.mbroverlaps
SYSTEM FUNCTION  sys.median
SYSTEM FUNCTION  sys.mlinefromtext
SYSTEM FUNCTION  sys.mpointfromtext
SYSTEM FUNCTION  sys.mpolyfromtext
SYSTEM FUNCTION  sys.ms_round
SYSTEM FUNCTION  sys.ms_str
SYSTEM FUNCTION  sys.ms_stuff
SYSTEM FUNCTION  sys.ms_trunc
SYSTEM FUNCTION  sys.netmask
SYSTEM FUNCTION  sys.network
SYSTEM FUNCTION  sys.newdictionary
SYSTEM FUNCTION  sys.newurl
SYSTEM FUNCTION  sys.optimizer_stats
SYSTEM FUNCTION  sys.optimizers
SYSTEM FUNCTION  sys.overlaps
SYSTEM FUNCTION  sys.password_hash
SYSTEM FUNCTION  sys.pause
SYSTEM FUNCTION  sys.point
SYSTEM FUNCTION  sys.pointfromtext
SYSTEM FUNCTION  sys.polyfromtext
SYSTEM FUNCTION  sys.polygonfromtext
SYSTEM FUNCTION  sys.quantile
SYSTEM FUNCTION  sys.querycache
SYSTEM FUNCTION  sys.querylog
SYSTEM FUNCTION  sys.querylog_calls
SYSTEM FUNCTION  sys.querylog_catalog
SYSTEM FUNCTION  sys.querylog_disable
SYSTEM FUNCTION  sys.querylog_empty
SYSTEM FUNCTION  sys.querylog_enable
SYSTEM FUNCTION  sys.queue
SYSTEM FUNCTION  sys.radians
SYSTEM FUNCTION  sys.relate
SYSTEM FUNCTION  sys.resume
SYSTEM FUNCTION  sys.reuse
SYSTEM FUNCTION  sys.reverse
SYSTEM FUNCTION  sys.sessions
SYSTEM FUNCTION  sys.setmasklen
SYSTEM FUNCTION  sys.setsession
SYSTEM FUNCTION  sys.settimeout
SYSTEM FUNCTION  sys.shrink
SYSTEM FUNCTION  sys.shutdown
SYSTEM FUNCTION  sys.srid
SYSTEM FUNCTION  sys.stddev_pop
SYSTEM FUNCTION  sys.stddev_samp
SYSTEM FUNCTION  sys.stop
SYSTEM FUNCTION  sys.storage
SYSTEM FUNCTION  sys.storagemodel
SYSTEM FUNCTION  sys.storagemodelinit
SYSTEM FUNCTION  sys.str_to_date
SYSTEM FUNCTION  sys.symdifference
SYSTEM FUNCTION  sys.text
SYSTEM FUNCTION  sys.times
SYSTEM FUNCTION  sys.touches
SYSTEM FUNCTION  sys.tracelog
SYSTEM FUNCTION  sys.vacuum
SYSTEM FUNCTION  sys.var
SYSTEM FUNCTION  sys.var_pop
SYSTEM FUNCTION  sys.var_samp
SYSTEM FUNCTION  sys.within
SYSTEM FUNCTION  sys.x
SYSTEM FUNCTION  sys.y
SYSTEM FUNCTION  sys.zorder_decode_x
SYSTEM FUNCTION  sys.zorder_decode_y
SYSTEM FUNCTION  sys.zorder_encode
CREATE SCHEMA "tmp";
CREATE SCHEMA "sys";
CREATE TABLE "sys"."_columns" (
	"id"          INTEGER,
	"name"        VARCHAR(1024),
	"type"        VARCHAR(1024),
	"type_digits" INTEGER,
	"type_scale"  INTEGER,
	"table_id"    INTEGER,
	"default"     VARCHAR(2048),
	"null"        BOOLEAN,
	"number"      INTEGER,
	"storage"     VARCHAR(2048)
);
CREATE TABLE "sys"."_tables" (
	"id"            INTEGER,
	"name"          VARCHAR(1024),
	"schema_id"     INTEGER,
	"query"         VARCHAR(2048),
	"type"          SMALLINT,
	"system"        BOOLEAN,
	"commit_action" SMALLINT,
	"readonly"      BOOLEAN
);
CREATE TABLE "sys"."args" (
	"id"          INTEGER,
	"func_id"     INTEGER,
	"name"        VARCHAR(256),
	"type"        VARCHAR(1024),
	"type_digits" INTEGER,
	"type_scale"  INTEGER,
	"number"      INTEGER
);
CREATE TABLE "sys"."auths" (
	"id"      INTEGER,
	"name"    VARCHAR(1024),
	"grantor" INTEGER
);
CREATE TABLE "sys"."connections" (
	"id"       INTEGER,
	"server"   CHAR(1024),
	"port"     INTEGER,
	"db"       CHAR(64),
	"db_alias" CHAR(1024),
	"user"     CHAR(1024),
	"password" CHAR(1024),
	"language" CHAR(1024)
);
CREATE TABLE "sys"."db_user_info" (
	"name"           VARCHAR(1024),
	"fullname"       VARCHAR(2048),
	"default_schema" INTEGER
);
CREATE TABLE "sys"."dependencies" (
	"id"          INTEGER,
	"depend_id"   INTEGER,
	"depend_type" SMALLINT
);
CREATE TABLE "sys"."functions" (
	"id"          INTEGER,
	"name"        VARCHAR(256),
	"func"        VARCHAR(8196),
	"mod"         VARCHAR(8196),
	"sql"         BOOLEAN,
	"type"        INTEGER,
	"side_effect" BOOLEAN,
	"schema_id"   INTEGER
);
CREATE TABLE "sys"."idxs" (
	"id"       INTEGER,
	"table_id" INTEGER,
	"type"     INTEGER,
	"name"     VARCHAR(1024)
);
CREATE TABLE "sys"."keys" (
	"id"       INTEGER,
	"table_id" INTEGER,
	"type"     INTEGER,
	"name"     VARCHAR(1024),
	"rkey"     INTEGER,
	"action"   INTEGER
);
CREATE TABLE "sys"."objects" (
	"id"   INTEGER,
	"name" VARCHAR(1024),
	"nr"   INTEGER
);
CREATE TABLE "sys"."privileges" (
	"obj_id"     INTEGER,
	"auth_id"    INTEGER,
	"privileges" INTEGER,
	"grantor"    INTEGER,
	"grantable"  INTEGER
);
CREATE TABLE "sys"."schemas" (
	"id"            INTEGER,
	"name"          VARCHAR(1024),
	"authorization" INTEGER,
	"owner"         INTEGER
);
CREATE TABLE "sys"."sequences" (
	"id"        INTEGER,
	"schema_id" INTEGER,
	"name"      VARCHAR(256),
	"start"     BIGINT,
	"minvalue"  BIGINT,
	"maxvalue"  BIGINT,
	"increment" BIGINT,
	"cacheinc"  BIGINT,
	"cycle"     BOOLEAN
);
CREATE TABLE "sys"."statistics" (
	"schema" CHARACTER LARGE OBJECT,
	"table"  CHARACTER LARGE OBJECT,
	"column" CHARACTER LARGE OBJECT,
	"type"   CHARACTER LARGE OBJECT,
	"width"  INTEGER,
	"stamp"  TIMESTAMP,
	"sample" BIGINT,
	"count"  BIGINT,
	"unique" BIGINT,
	"nils"   BIGINT,
	"minval" CHARACTER LARGE OBJECT,
	"maxval" CHARACTER LARGE OBJECT,
	"sorted" BOOLEAN
);
CREATE TABLE "sys"."storagemodelinput" (
	"schema"    CHARACTER LARGE OBJECT,
	"table"     CHARACTER LARGE OBJECT,
	"column"    CHARACTER LARGE OBJECT,
	"type"      CHARACTER LARGE OBJECT,
	"typewidth" INTEGER,
	"count"     BIGINT,
	"distinct"  BIGINT,
	"atomwidth" INTEGER,
	"reference" BOOLEAN,
	"sorted"    BOOLEAN
);
CREATE TABLE "sys"."systemfunctions" (
	"function_id" INTEGER
);
CREATE TABLE "sys"."triggers" (
	"id"          INTEGER,
	"name"        VARCHAR(1024),
	"table_id"    INTEGER,
	"time"        SMALLINT,
	"orientation" SMALLINT,
	"event"       SMALLINT,
	"old_name"    VARCHAR(1024),
	"new_name"    VARCHAR(1024),
	"condition"   VARCHAR(2048),
	"statement"   VARCHAR(2048)
);
CREATE TABLE "sys"."types" (
	"id"         INTEGER,
	"systemname" VARCHAR(256),
	"sqlname"    VARCHAR(1024),
	"digits"     INTEGER,
	"scale"      INTEGER,
	"radix"      INTEGER,
	"eclass"     INTEGER,
	"schema_id"  INTEGER
);
CREATE TABLE "sys"."user_role" (
	"login_id" INTEGER,
	"role_id"  INTEGER
);
SELECT * FROM (SELECT p.* FROM "sys"."_columns" AS p UNION ALL SELECT t.* FROM "tmp"."_columns" AS t) AS columns;
create view sys.environment as select * from sys.environment();
create view sys.optimizers as select * from sys.optimizers();
create view sys.querylog_calls as select * from sys.querylog_calls();
-- create table views for convenience
create view sys.querylog_catalog as select * from sys.querylog_catalog();
create view sys.querylog_history as
select qd.*, ql."start",ql."stop", ql.arguments, ql.tuples, ql.run, ql.ship, ql.cpu, ql.space, ql.io 
from sys.querylog_catalog() qd, sys.querylog_calls() ql
where qd.id = ql.id and qd.owner = user;
create view sys.queue as select * from sys.queue();
create view sys.sessions as select * from sys.sessions();
create view sys.storage as select * from sys.storage();
create view sys.storagemodel as select * from sys.storagemodel();
SELECT * FROM (SELECT p.*, 0 AS "temporary" FROM "sys"."_tables" AS p UNION ALL SELECT t.*, 1 AS "temporary" FROM "tmp"."_tables" AS t) AS tables where tables.type <> 2;
-- A summary of the table storage requirement is is available as a table view.
-- The auxillary column denotes the maximum space if all non-sorted columns
-- would be augmented with a hash (rare situation)
create view sys.tablestoragemodel
as select "schema","table",max(count) as "count",
	sum(columnsize) as columnsize,
	sum(heapsize) as heapsize,
	sum(indices) as indices,
	sum(case when sorted = false then 8 * count else 0 end) as auxillary
from sys.storagemodel() group by "schema","table";
create view sys.tracelog as select * from sys.tracelog();
SELECT u."name" AS "name", ui."fullname", ui."default_schema" FROM db_users() AS u LEFT JOIN "sys"."db_user_info" AS ui ON u."name" = ui."name" ;
create function "abbrev" (p inet) returns clob
	external name inet."abbrev";
create function alpha(pdec double, pradius double)
returns double external name sql.alpha;
create procedure analyze()
external name sql.analyze;
create procedure analyze(tbl string)
external name sql.analyze;
create procedure analyze(sch string, tbl string)
external name sql.analyze;
create procedure analyze(sch string, tbl string, col string)
external name sql.analyze;
-- control the sample size
create procedure analyze("sample" bigint)
external name sql.analyze;
create procedure analyze(tbl string, "sample" bigint)
external name sql.analyze;
create procedure analyze(sch string, tbl string, "sample" bigint)
external name sql.analyze;
create procedure analyze(sch string, tbl string, col string, "sample" bigint)
external name sql.analyze;
-- ogc Spatial Analysis methods

create function area(g geometry) returns float external name geom."Area";
create function astext(g geometry) returns string external name geom."AsText";
-- The BAT buffer pool overview
create function sys.bbp () 
	returns table (id int, name string, htype string, 
		ttype string, count bigint, refcnt int, lrefcnt int, 
		location string, heat int, dirty string, 
		status string, kind string) 
	external name sql.bbp;
create function boundary(g geometry) returns geometry external name geom."Boundary";
create function "broadcast" (p inet) returns inet 
	external name inet."broadcast";
create function buffer(a geometry, distance float) returns geometry external name geom."Buffer";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- Clustering a relational table should be done with care.
-- For, the oid's are used in join-indices.

-- Clustering of tables may improve IO performance
-- The foreign key constraints should be dropped before
-- and re-established after the cluster operation.

create procedure cluster1(sys string, tab string)
	external name sql.cluster1;
create procedure cluster2(sys string, tab string)
	external name sql.cluster2;
-- The predicted storage footprint of the complete database
-- determines the amount of diskspace needed for persistent storage
-- and the upperbound when all possible index structures are created.
-- The storage requirement for foreign key joins is split amongst the participants.

create function sys.columnsize(nme string, i bigint, d bigint)
returns bigint
begin
	case
	when nme = 'boolean' then return i;
	when nme = 'char' then return 2*i;
	when nme = 'smallint' then return 2 * i;
	when nme = 'int'	 then return 4 * i;
	when nme = 'bigint'	 then return 8 * i;
	when nme = 'hugeint'	 then return 16 * i;
	when nme = 'timestamp' then return 8 * i;
	when  nme = 'varchar' then
		case
		when cast(d as bigint) << 8 then return i;
		when cast(d as bigint) << 16 then return 2 * i;
		when cast(d as bigint) << 32 then return 4 * i;
		else return 8 * i;
		end case;
	else return 8 * i;
	end case;
end;
create function contains(a geometry, b geometry) returns boolean external name geom."Contains";
create function convexhull(a geometry) returns geometry external name geom."ConvexHull";
create aggregate corr(e1 tinyint, e2 tinyint) returns tinyint
	external name "aggr"."corr";
create aggregate corr(e1 smallint, e2 smallint) returns smallint
	external name "aggr"."corr";
create aggregate corr(e1 integer, e2 integer) returns integer
	external name "aggr"."corr";
create aggregate corr(e1 wrd, e2 wrd) returns wrd
	external name "aggr"."corr";
create aggregate corr(e1 bigint, e2 bigint) returns bigint
	external name "aggr"."corr";
create aggregate corr(e1 real, e2 real) returns real
	external name "aggr"."corr";
create aggregate corr(e1 double, e2 double) returns double
	external name "aggr"."corr";
create aggregate corr(e1 hugeint, e2 hugeint) returns hugeint
	external name "aggr"."corr";
create function crosses(a geometry, b geometry) returns boolean external name geom."Crosses";
create function date_to_str(d date, format string) returns string
	external name mtime."date_to_str";
CREATE FUNCTION db_users () RETURNS TABLE( name varchar(2048)) EXTERNAL NAME sql.db_users;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create function degrees(r double) 
returns double
	return r*180/pi();
--Column c has a dependency on function f
create function dependencies_columns_on_functions()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select c.name, f.name, 'DEP_FUNC' from functions as f, columns as c, dependencies as dep where c.id = dep.id and f.id = dep.depend_id and dep.depend_type = 7);
--Column c has a dependency on index i 
create function dependencies_columns_on_indexes()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select c.name, i.name, 'DEP_INDEX' from columns as c, objects as kc, idxs as i where kc."name" = c.name and kc.id = i.id and c.table_id = i.table_id and i.name not in (select name from keys));
--Column c has a dependency on key k
create function dependencies_columns_on_keys()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select c.name, k.name, 'DEP_KEY' from columns as c, objects as kc, keys as k where kc."name" = c.name and kc.id = k.id and k.table_id = c.table_id and k.rkey = -1);
--Column c has a dependency on trigger tri
create function dependencies_columns_on_triggers()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select c.name, tri.name, 'DEP_TRIGGER' from columns as c, triggers as tri, dependencies as dep where dep.id = c.id and dep.depend_id =tri.id and dep.depend_type = 8);
--Column c has a dependency on view v
create function dependencies_columns_on_views()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select c.name, v.name, 'DEP_VIEW' from columns as c, tables as v, dependencies as dep where c.id = dep.id and v.id = dep.depend_id and dep.depend_type = 5 and v.type = 1);
--Function f1 has a dependency on function f2
create function dependencies_functions_on_functions()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select f1.name, f2.name, 'DEP_FUNC' from functions as f1, functions as f2, dependencies as dep where f1.id = dep.id and f2.id = dep.depend_id and dep.depend_type = 7);
--Function f1 has a dependency on trigger tri
create function dependencies_functions_os_triggers()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select f.name, tri.name, 'DEP_TRIGGER' from functions as f, triggers as tri, dependencies as dep where dep.id = f.id and dep.depend_id =tri.id and dep.depend_type = 8);
--Key k has a dependency on foreign key fk
create function dependencies_keys_on_foreignkeys()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select k.name, fk.name, 'DEP_FKEY' from keys as k, keys as fk where fk.rkey = k.id);
--User (owner) has a dependency in schema s
create function dependencies_owners_on_schemas()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select a.name, s.name, 'DEP_SCHEMA' from schemas as s, auths a where s.owner = a.id);
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

--Schema s has a dependency on user u
create function dependencies_schemas_on_users()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select s.name, u.name, 'DEP_USER' from schemas as s, users u where u.default_schema = s.id);
--Table t has a dependency on foreign key k
create function dependencies_tables_on_foreignkeys()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select t.name, fk.name, 'DEP_FKEY' from tables as t, keys as k, keys as fk where fk.rkey = k.id and k.table_id = t.id);
--Table t has a dependency on function f
create function dependencies_tables_on_functions()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select t.name, f.name, 'DEP_FUNC' from functions as f, tables as t, dependencies as dep where t.id = dep.id and f.id = dep.depend_id and dep.depend_type = 7 and t.type = 0);
--Table t has a dependency on index  i
create function dependencies_tables_on_indexes()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select t.name, i.name, 'DEP_INDEX' from tables as t, idxs as i where i.table_id = t.id and i.name not in (select name from keys) and t.type = 0);
--Table t has a dependency on trigger tri

create function dependencies_tables_on_triggers()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table ((select t.name, tri.name, 'DEP_TRIGGER' from tables as t, triggers as tri where tri.table_id = t.id) union (select t.name, tri.name, 'DEP_TRIGGER' from triggers tri, tables t, dependencies dep where dep.id = t.id and dep.depend_id =tri.id and dep.depend_type = 8));
--Table t has a dependency on view v
create function dependencies_tables_on_views()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select t.name, v.name, 'DEP_VIEW' from tables as t, tables as v, dependencies as dep where t.id = dep.id and v.id = dep.depend_id and dep.depend_type = 5 and v.type = 1);
--View v has a dependency on function f
create function dependencies_views_on_functions()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select v.name, f.name, 'DEP_FUNC' from functions as f, tables as v, dependencies as dep where v.id = dep.id and f.id = dep.depend_id and dep.depend_type = 7 and v.type = 1);
--View v has a dependency on trigger tri
create function dependencies_views_on_triggers()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select v.name, tri.name, 'DEP_TRIGGER' from tables as v, triggers as tri, dependencies as dep where dep.id = v.id and dep.depend_id =tri.id and dep.depend_type = 8 and v.type = 1);
create function difference(a geometry, b geometry) returns geometry external name geom."Difference";
-- CREATE FUNCTION Point(g Geometry) RETURNS Point external name geom.point;
-- CREATE FUNCTION Curve(g Geometry) RETURNS Curve external name geom.curve;
-- CREATE FUNCTION LineString(g Geometry) RETURNS LineString external name geom.linestring;
-- CREATE FUNCTION Surface(g Geometry) RETURNS Surface external name geom.surface;
-- CREATE FUNCTION Polygon(g Geometry) RETURNS Polygon external name geom.polygon;

-- ogc basic methods
create function dimension(g geometry) returns integer external name geom."Dimension";
create function disjoint(a geometry, b geometry) returns boolean external name geom."Disjoint";
create function distance(a geometry, b geometry) returns float external name geom."Distance";
create procedure dropdictionary (s string, t string)
    external name sql.dropdictionary;
CREATE FUNCTION env () RETURNS TABLE( name varchar(1024), value varchar(2048)) EXTERNAL NAME sql.sql_environment;
create function envelope(g geometry) returns geometry external name geom."Envelope";
-- The environment table
create function sys.environment()
	returns table ("name" string, value string)
	external name sql.sql_environment;
-- ogc spatial relation methods
create function equals(a geometry, b geometry) returns boolean external name geom."Equals";
create procedure sys.evalalgebra( ra_stmt string, opt bool)
	external name sql."evalAlgebra";
-- fuse two (1-byte) tinyint values into one (2-byte) smallint value
create function fuse(one tinyint, two tinyint)
returns smallint external name udf.fuse;
-- fuse two (2-byte) smallint values into one (4-byte) integer value
create function fuse(one smallint, two smallint)
returns integer external name udf.fuse;
-- fuse two (4-byte) integer values into one (8-byte) bigint value
create function fuse(one integer, two integer)
returns bigint external name udf.fuse;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- add function signatures to SQL catalog


-- fuse two (8-byte) integer values into one (16-byte) bigint value
create function fuse(one bigint, two bigint)
returns hugeint external name udf.fuse;
create function geomcollectionfromtext(wkt string, srid smallint) returns multipolygon external name geom."GeomCollectionFromText";
create function geometrytypeid(g geometry) returns integer external name geom."GeometryTypeId";
-- The srid in the *FromText Functions is currently not used
create function geomfromtext(wkt string, srid smallint) returns geometry external name geom."GeomFromText";
create function getanchor( theurl url ) returns string 
	external name url."getAnchor";
create function getbasename(theurl url) returns string       
	external name url."getBasename";
create function getcontent(theurl url)   returns string       
	external name url."getContent";
create function getcontext(theurl url)   returns string       
	external name url."getContext";
create function getdomain(theurl url) returns string       
	external name url."getDomain";
create function getextension(theurl url) returns string       
	external name url."getExtension";
create function getfile(theurl url) returns string       
	external name url."getFile";
create function gethost(theurl url)   returns string       
	external name url."getHost";
create function getport(theurl url) returns string       
	external name url."getPort";
create function getprotocol(theurl url) returns string       
	external name url."getProtocol";
create function getquery(theurl url) returns string       
	external name url."getQuery";
create function getroboturl(theurl url) returns string       
	external name url."getRobotURL";
create function getuser(theurl url) returns string       
	external name url."getUser";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- Perform LZ-compression over a specific table;
create procedure gzcompress (s string, t string)
    external name sql.gzcompress;
create procedure gzdecompress (s string, t string)
    external name sql.gzdecompress;
-- Remove the compressed images
create procedure gzexpand (s string, t string)
    external name sql.gzexpand;
-- Truncate the storage for columns with a compressed image
create procedure gztruncate (s string, t string)
    external name sql.gztruncate;
create function sys.heapsize(tpe string, i bigint, w int)
returns bigint
begin
	if  tpe <> 'varchar' and tpe <> 'clob'
	then
		return 0;
	end if;
	return 10240 + i * w;
end;
create function "host" (p inet) returns clob
	external name inet."host";
create function "hostmask" (p inet) returns inet
	external name inet."hostmask";
create filter function "ilike"(val string, pat string, esc string) external name algebra.ilikesubselect;
create function sys.indexsize(b boolean, i bigint)
returns bigint
begin
	-- assume non-compound keys
	if  b = true
	then
		return 8 * i;
	end if;
	return 0;
end;
create procedure initializedictionary ()
    external name dictionary.initialize;
create function intersection(a geometry, b geometry) returns geometry external name geom."Intersection";
create function isaurl(theurl url) returns bool
	external name url."isaURL";
create function isempty(g geometry) returns boolean external name geom."IsEmpty";
create function issimple(g geometry) returns boolean external name geom."IsSimple";
create function length(g geometry) returns float external name geom."Length";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create filter function "like"(val string, pat string, esc string) external name algebra.likesubselect;
create function linefromtext(wkt string, srid smallint) returns linestring external name geom."LineFromText";
create function "masklen" (p inet) returns int
	external name inet."masklen";
-- currently we only use mbr instead of
-- Envelope():Geometry
-- as that returns Geometry objects, and we prefer the explicit mbr's
-- minimum bounding rectangle (mbr)
create function mbr (g geometry) returns mbr external name geom.mbr;
create function mbroverlaps(a mbr, b mbr) returns boolean external name geom."mbroverlaps";
create aggregate median(val tinyint) returns tinyint
	external name "aggr"."median";
create aggregate median(val smallint) returns smallint
	external name "aggr"."median";
create aggregate median(val integer) returns integer
	external name "aggr"."median";
create aggregate median(val wrd) returns wrd
	external name "aggr"."median";
create aggregate median(val bigint) returns bigint
	external name "aggr"."median";
create aggregate median(val decimal) returns decimal
 	external name "aggr"."median";
create aggregate median(val real) returns real
	external name "aggr"."median";
create aggregate median(val double) returns double
	external name "aggr"."median";
create aggregate median(val date) returns date
	external name "aggr"."median";
create aggregate median(val time) returns time
	external name "aggr"."median";
create aggregate median(val timestamp) returns timestamp
	external name "aggr"."median";
create aggregate median(val hugeint) returns hugeint
	external name "aggr"."median";
create function mlinefromtext(wkt string, srid smallint) returns multilinestring external name geom."MultiLineFromText";
create function mpointfromtext(wkt string, srid smallint) returns multipoint external name geom."MultiPointFromText";
create function mpolyfromtext(wkt string, srid smallint) returns multipolygon external name geom."MultiPolyFromText";
create function ms_round(num double, prc int, truncat int)
returns double
begin
	if (truncat = 0)
		then return round(num, prc);
		else return ms_trunc(num, prc);
	end if;
end;
create function ms_str(num float, prc int, truncat int)
returns string
begin
        return cast(num as string);
end;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create function ms_stuff( s1 varchar(32), st int, len int, s3 varchar(32))
returns varchar(32)
begin
	declare res varchar(32), aux varchar(32);
	declare ofset int;

    if ( st < 0 or st > length(s1))
        then return '';
    end if;

    set ofset = 1;
    set res = substring(s1,ofset,st-1);
    set res = res || s3;
    set ofset = st + len;
    set aux = substring(s1,ofset,length(s1)-ofset+1);
	set res = res || aux;
	return res;
end;
create function ms_trunc(num double, prc int)
returns double
external name sql.ms_trunc;
create function "netmask" (p inet) returns inet
	external name inet."netmask";
create function "network" (p inet) returns inet
	external name inet."network";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create procedure newdictionary (s string, t string)
    external name sql.newdictionary;
create function newurl(protocol string, hostname string, "port" int, file string) 
	returns url       
	external name url."new";
create function newurl(protocol string, hostname string, file string) 
	returns url 
	external name url."new";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- show the optimizer statistics maintained by the SQL frontend
create function sys.optimizer_stats () 
	returns table (rewrite string, count int) 
	external name sql.dump_opt_stats;
-- MONETDB KERNEL SECTION
-- optimizer pipe catalog
create function sys.optimizers () 
	returns table (name string, def string, status string)
	external name sql.optimizers;
create function overlaps(a geometry, b geometry) returns boolean external name geom."Overlaps";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create function sys.password_hash (username string) 
	returns string 
	external name sql.password;
-- operations to manipulate the state of havoc queries
create procedure sys.pause(tag int)
external name sql.sysmon_pause;
create procedure sys.pause(tag bigint)
external name sql.sysmon_pause;
create function point(x double,y double) returns point external name geom.point;
create function pointfromtext(wkt string, srid smallint) returns point external name geom."PointFromText";
create function polyfromtext(wkt string, srid smallint) returns polygon external name geom."PolyFromText";
-- alias
create function polygonfromtext(wkt string, srid smallint) returns polygon external name geom."PolyFromText";
create aggregate quantile(val tinyint, q double) returns tinyint
 	external name "aggr"."quantile";
create aggregate quantile(val smallint, q double) returns smallint
 	external name "aggr"."quantile";
create aggregate quantile(val integer, q double) returns integer
 	external name "aggr"."quantile";
create aggregate quantile(val wrd, q double) returns wrd
	external name "aggr"."quantile";
create aggregate quantile(val bigint, q double) returns bigint
	external name "aggr"."quantile";
create aggregate quantile(val decimal, q double) returns decimal
 	external name "aggr"."quantile";
create aggregate quantile(val real, q double) returns real
	external name "aggr"."quantile";
create aggregate quantile(val double, q double) returns double
	external name "aggr"."quantile";
create aggregate quantile(val date, q double) returns date
	external name "aggr"."quantile";
create aggregate quantile(val time, q double) returns time
	external name "aggr"."quantile";
create aggregate quantile(val timestamp, q double) returns timestamp
	external name "aggr"."quantile";
create aggregate quantile(val hugeint, q double) returns hugeint
	external name "aggr"."quantile";
-- SQL QUERY CACHE
-- The SQL query cache returns a table with the query plans kept

create function sys.querycache() 
	returns table (query string, count int) 
	external name sql.dump_cache;
-- Trace the SQL input
create procedure sys.querylog(filename string) 
	external name sql.logfile;
-- Each query call is stored in the table calls
-- At regular intervals the query history table should be cleaned.
-- This can be done manually on the SQL console, or be integrated
-- in the keepQuery and keepCall upon need.
-- The parameters are geared at understanding the resource claims
-- They reflect the effect of the total workload mix during execution.
-- The 'cpu' gives the average cpu load percentage over all cores on the 
-- server during execution phase. 
-- increasing cpu load indicates better use of multi-cores.
-- The 'io' indicate IOs during complete query run.
-- The 'space' is the total amount of intermediates created in MB.
-- Reducing the space component improves performance/
-- All timing in usec and all storage in bytes.

create function sys.querylog_calls()
returns table(
	id oid,				 -- references query plan
	"start" timestamp,	-- time the statement was started
	"stop" timestamp,	-- time the statement was completely finished
	arguments string,	-- actual call structure
	tuples wrd,			-- number of tuples in the result set
	run bigint,		-- time spent (in usec)  until the result export
	ship bigint,		-- time spent (in usec)  to ship the result set
	cpu int,  		-- average cpu load percentage during execution
	io int,			-- percentage time waiting for IO to finish 
	space bigint		-- total storage size of intermediates created (in MB)
)
external name sql.querylog_calls;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- QUERY HISTORY
-- The query history mechanism of MonetDB/SQL relies on a few hooks.
-- The most important one is a global system variable which controls
--  monitoring of all sessions. 

create function sys.querylog_catalog()
returns table(
	id oid,
	owner string,
	defined timestamp,
	query string,
	pipe string,
	mal int,			-- size of MAL plan
	optimize bigint 	-- time in usec
)
external name sql.querylog_catalog;
create procedure sys.querylog_disable()
external name sql.querylog_disable;
-- reset history for a particular user
create procedure sys.querylog_empty()
external name sql.querylog_empty;
-- manipulate the query logger
create procedure sys.querylog_enable()
external name sql.querylog_enable;
create procedure sys.querylog_enable(threshold smallint)
external name sql.querylog_enable_threshold;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- System monitoring

-- show status of all active SQL queries.
create function sys.queue()
returns table(
	qtag bigint,
	"user" string,
	started timestamp,
	estimate timestamp,
	progress int,
	status string,
	tag oid,
	query string
)
external name sql.sysmon_queue;
create function radians(d double) 
returns double
	return d*pi()/180;
create function relate(a geometry, b geometry, pattern string) returns boolean external name geom."Relate";
create procedure sys.resume(tag int)
external name sql.sysmon_resume;
create procedure sys.resume(tag bigint)
external name sql.sysmon_resume;
create procedure reuse(sys string, tab string)
	external name sql.reuse;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- add function signatures to SQL catalog


-- Reverse a string
create function reverse(src string)
returns string external name udf.reverse;
create function sys.sessions()
returns table("user" string, "login" timestamp, "sessiontimeout" bigint, "lastcommand" timestamp, "querytimeout" bigint, "active" bool)
external name sql.sessions;
create function "setmasklen" (p inet, mask int) returns inet
	external name inet."setmasklen";
create procedure sys.setsession("timeout" bigint)
	external name sql.setsession;
-- control the query and session time out 
create procedure sys.settimeout("query" bigint)
	external name sql.settimeout;
create procedure sys.settimeout("query" bigint, "session" bigint)
	external name sql.settimeout;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- Vacuum a relational table should be done with care.
-- For, the oid's are used in join-indices.

-- Vacuum of tables may improve IO performance and disk footprint.
-- The foreign key constraints should be dropped before
-- and re-established after the cluster operation.

create procedure shrink(sys string, tab string)
	external name sql.shrink;
create procedure sys.shutdown(delay tinyint) 
external name sql.shutdown;
create procedure sys.shutdown(delay tinyint, force bool) 
external name sql.shutdown;
create function srid(g geometry) returns integer external name geom."SRID";
create aggregate stddev_pop(val tinyint) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val smallint) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val integer) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val wrd) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val bigint) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val real) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val double) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val date) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val time) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val timestamp) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val hugeint) returns double
	external name "aggr"."stdevp";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create aggregate stddev_samp(val tinyint) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val smallint) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val integer) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val wrd) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val bigint) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val real) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val double) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val date) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val time) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val timestamp) returns double
	external name "aggr"."stdev";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create aggregate stddev_samp(val hugeint) returns double
	external name "aggr"."stdev";
create procedure sys.stop(tag int)
external name sql.sysmon_stop;
create procedure sys.stop(tag bigint)
external name sql.sysmon_stop;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.


-- Author M.Kersten
-- This script gives the database administrator insight in the actual
-- footprint of the persistent tables and the maximum playground used
-- when indices are introduced upon them.
-- By chancing the storagemodelinput table directly, the footprint for
-- yet to be loaded databases can be assessed.

-- The actual storage footprint of an existing database can be
-- obtained by the table procuding function storage()
-- It represents the actual state of affairs, i.e. storage on disk
-- of columns and foreign key indices, and possible temporary hash indices.
-- For strings we take a sample to determine their average length.

create function sys.storage()
returns table ("schema" string, "table" string, "column" string, "type" string, location string, "count" bigint, typewidth int, columnsize bigint, heapsize bigint, indices bigint, sorted boolean)
external name sql.storage;
create function sys.storagemodel()
returns table (
	"schema" string,
	"table" string,
	"column" string,
	"type" string,
	"count"	bigint,
	columnsize bigint,
	heapsize bigint,
	indices bigint,
	sorted boolean)
begin
	return select i."schema", i."table", i."column", i."type", i."count",
	columnsize(i."type", i.count, i."distinct"),
	heapsize(i."type", i."distinct", i."atomwidth"),
	indexsize(i."reference", i."count"),
	i.sorted
	from sys.storagemodelinput i;
end;
-- this table can be adjusted to reflect the anticipated final database size

-- The model input can be derived from the current database using
create procedure sys.storagemodelinit()
begin
	delete from sys.storagemodelinput;

	insert into sys.storagemodelinput
	select x."schema", x."table", x."column", x."type", x.typewidth, x.count, 0, x.typewidth, false, x.sorted from sys.storage() x;

	update sys.storagemodelinput
	set reference = true
	where concat(concat("schema","table"), "column") in (
		select concat( concat("fkschema"."name", "fktable"."name"), "fkkeycol"."name" )
		from	"sys"."keys" as    "fkkey",
				"sys"."objects" as "fkkeycol",
				"sys"."tables" as  "fktable",
				"sys"."schemas" as "fkschema"
		where   "fktable"."id" = "fkkey"."table_id"
			and "fkkey"."id" = "fkkeycol"."id"
			and "fkschema"."id" = "fktable"."schema_id"
			and "fkkey"."rkey" > -1);

	update sys.storagemodelinput
	set "distinct" = "count" -- assume all distinct
	where "type" = 'varchar' or "type"='clob';
end;

-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create function str_to_date(s string, format string) returns date
	external name mtime."str_to_date";
create function symdifference(a geometry, b geometry) returns geometry external name geom."SymDifference";
create function "text" (p inet) returns clob
	external name inet."text";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- Provide a simple equivalent for the UNIX times command
-- times 0 ms user 0 ms system 0 ms 0 reads 0 writes

create procedure times()
external name sql.times;
create function touches(a geometry, b geometry) returns boolean external name geom."Touches";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- make the offline tracing table available for inspection
create function sys.tracelog() 
	returns table (
		event integer,		-- event counter
		clk varchar(20), 	-- wallclock, no mtime in kernel
		pc varchar(50), 	-- module.function[nr]
		thread int, 		-- thread identifier
		"user" int, 		-- user identifier
		ticks bigint, 		-- time in microseconds
		reads bigint, 		-- number of blocks read
		writes bigint, 	-- number of blocks written
		rbytes bigint,		-- amount of bytes touched
		wbytes bigint,		-- amount of bytes written
		type string,		-- return types
		stmt string			-- actual statement executed
	)
	external name sql.dump_trace;
create procedure vacuum(sys string, tab string)
	external name sql.vacuum;
CREATE FUNCTION var() RETURNS TABLE( name varchar(1024)) EXTERNAL NAME sql.sql_variables;
create aggregate var_pop(val tinyint) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val smallint) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val integer) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val wrd) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val bigint) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val real) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val double) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val date) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val time) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val timestamp) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val hugeint) returns double
	external name "aggr"."variancep";
create aggregate var_samp(val tinyint) returns double
	external name "aggr"."variance";
create aggregate var_samp(val smallint) returns double
	external name "aggr"."variance";
create aggregate var_samp(val integer) returns double
	external name "aggr"."variance";
create aggregate var_samp(val wrd) returns double
	external name "aggr"."variance";
create aggregate var_samp(val bigint) returns double
	external name "aggr"."variance";
create aggregate var_samp(val real) returns double
	external name "aggr"."variance";
create aggregate var_samp(val double) returns double
	external name "aggr"."variance";
create aggregate var_samp(val date) returns double
	external name "aggr"."variance";
create aggregate var_samp(val time) returns double
	external name "aggr"."variance";
create aggregate var_samp(val timestamp) returns double
	external name "aggr"."variance";
create aggregate var_samp(val hugeint) returns double
	external name "aggr"."variance";
create function within(a geometry, b geometry) returns boolean external name geom."Within";
create function x(g geometry) returns double external name geom."X";
create function y(g geometry) returns double external name geom."Y";
create function zorder_decode_x(z oid) returns integer
    external name zorder.decode_x;
create function zorder_decode_y(z oid) returns integer
    external name zorder.decode_y;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create function zorder_encode(x integer, y integer) returns oid
    external name zorder.encode;
START TRANSACTION;
CREATE TABLE "sys"."_columns" (
	"id"          INTEGER,
	"name"        VARCHAR(1024),
	"type"        VARCHAR(1024),
	"type_digits" INTEGER,
	"type_scale"  INTEGER,
	"table_id"    INTEGER,
	"default"     VARCHAR(2048),
	"null"        BOOLEAN,
	"number"      INTEGER,
	"storage"     VARCHAR(2048)
);
COPY 418 RECORDS INTO "sys"."_columns" FROM stdin USING DELIMITERS '\t','\n','"';
2002	"id"	"int"	32	0	2001	NULL	true	0	NULL
2003	"name"	"varchar"	1024	0	2001	NULL	true	1	NULL
2004	"authorization"	"int"	32	0	2001	NULL	true	2	NULL
2005	"owner"	"int"	32	0	2001	NULL	true	3	NULL
2007	"id"	"int"	32	0	2006	NULL	true	0	NULL
2008	"systemname"	"varchar"	256	0	2006	NULL	true	1	NULL
2009	"sqlname"	"varchar"	1024	0	2006	NULL	true	2	NULL
2010	"digits"	"int"	32	0	2006	NULL	true	3	NULL
2011	"scale"	"int"	32	0	2006	NULL	true	4	NULL
2012	"radix"	"int"	32	0	2006	NULL	true	5	NULL
2013	"eclass"	"int"	32	0	2006	NULL	true	6	NULL
2014	"schema_id"	"int"	32	0	2006	NULL	true	7	NULL
2016	"id"	"int"	32	0	2015	NULL	true	0	NULL
2017	"name"	"varchar"	256	0	2015	NULL	true	1	NULL
2018	"func"	"varchar"	8196	0	2015	NULL	true	2	NULL
2019	"mod"	"varchar"	8196	0	2015	NULL	true	3	NULL
2020	"sql"	"boolean"	1	0	2015	NULL	true	4	NULL
2021	"type"	"int"	32	0	2015	NULL	true	5	NULL
2022	"side_effect"	"boolean"	1	0	2015	NULL	true	6	NULL
2023	"schema_id"	"int"	32	0	2015	NULL	true	7	NULL
2025	"id"	"int"	32	0	2024	NULL	true	0	NULL
2026	"func_id"	"int"	32	0	2024	NULL	true	1	NULL
2027	"name"	"varchar"	256	0	2024	NULL	true	2	NULL
2028	"type"	"varchar"	1024	0	2024	NULL	true	3	NULL
2029	"type_digits"	"int"	32	0	2024	NULL	true	4	NULL
2030	"type_scale"	"int"	32	0	2024	NULL	true	5	NULL
2031	"number"	"int"	32	0	2024	NULL	true	6	NULL
2033	"id"	"int"	32	0	2032	NULL	true	0	NULL
2034	"schema_id"	"int"	32	0	2032	NULL	true	1	NULL
2035	"name"	"varchar"	256	0	2032	NULL	true	2	NULL
2036	"start"	"bigint"	64	0	2032	NULL	true	3	NULL
2037	"minvalue"	"bigint"	64	0	2032	NULL	true	4	NULL
2038	"maxvalue"	"bigint"	64	0	2032	NULL	true	5	NULL
2039	"increment"	"bigint"	64	0	2032	NULL	true	6	NULL
2040	"cacheinc"	"bigint"	64	0	2032	NULL	true	7	NULL
2041	"cycle"	"boolean"	1	0	2032	NULL	true	8	NULL
2043	"id"	"int"	32	0	2042	NULL	true	0	NULL
2044	"depend_id"	"int"	32	0	2042	NULL	true	1	NULL
2045	"depend_type"	"smallint"	16	0	2042	NULL	true	2	NULL
2047	"id"	"int"	32	0	2046	NULL	true	0	NULL
2048	"server"	"char"	1024	0	2046	NULL	true	1	NULL
2049	"port"	"int"	32	0	2046	NULL	true	2	NULL
2050	"db"	"char"	64	0	2046	NULL	true	3	NULL
2051	"db_alias"	"char"	1024	0	2046	NULL	true	4	NULL
2052	"user"	"char"	1024	0	2046	NULL	true	5	NULL
2053	"password"	"char"	1024	0	2046	NULL	true	6	NULL
2054	"language"	"char"	1024	0	2046	NULL	true	7	NULL
2056	"id"	"int"	32	0	2055	NULL	true	0	NULL
2057	"name"	"varchar"	1024	0	2055	NULL	true	1	NULL
2058	"schema_id"	"int"	32	0	2055	NULL	true	2	NULL
2059	"query"	"varchar"	2048	0	2055	NULL	true	3	NULL
2060	"type"	"smallint"	16	0	2055	NULL	true	4	NULL
2061	"system"	"boolean"	1	0	2055	NULL	true	5	NULL
2062	"commit_action"	"smallint"	16	0	2055	NULL	true	6	NULL
2063	"readonly"	"boolean"	1	0	2055	NULL	true	7	NULL
2065	"id"	"int"	32	0	2064	NULL	true	0	NULL
2066	"name"	"varchar"	1024	0	2064	NULL	true	1	NULL
2067	"type"	"varchar"	1024	0	2064	NULL	true	2	NULL
2068	"type_digits"	"int"	32	0	2064	NULL	true	3	NULL
2069	"type_scale"	"int"	32	0	2064	NULL	true	4	NULL
2070	"table_id"	"int"	32	0	2064	NULL	true	5	NULL
2071	"default"	"varchar"	2048	0	2064	NULL	true	6	NULL
2072	"null"	"boolean"	1	0	2064	NULL	true	7	NULL
2073	"number"	"int"	32	0	2064	NULL	true	8	NULL
2074	"storage"	"varchar"	2048	0	2064	NULL	true	9	NULL
2076	"id"	"int"	32	0	2075	NULL	true	0	NULL
2077	"table_id"	"int"	32	0	2075	NULL	true	1	NULL
2078	"type"	"int"	32	0	2075	NULL	true	2	NULL
2079	"name"	"varchar"	1024	0	2075	NULL	true	3	NULL
2080	"rkey"	"int"	32	0	2075	NULL	true	4	NULL
2081	"action"	"int"	32	0	2075	NULL	true	5	NULL
2083	"id"	"int"	32	0	2082	NULL	true	0	NULL
2084	"table_id"	"int"	32	0	2082	NULL	true	1	NULL
2085	"type"	"int"	32	0	2082	NULL	true	2	NULL
2086	"name"	"varchar"	1024	0	2082	NULL	true	3	NULL
2088	"id"	"int"	32	0	2087	NULL	true	0	NULL
2089	"name"	"varchar"	1024	0	2087	NULL	true	1	NULL
2090	"table_id"	"int"	32	0	2087	NULL	true	2	NULL
2091	"time"	"smallint"	16	0	2087	NULL	true	3	NULL
2092	"orientation"	"smallint"	16	0	2087	NULL	true	4	NULL
2093	"event"	"smallint"	16	0	2087	NULL	true	5	NULL
2094	"old_name"	"varchar"	1024	0	2087	NULL	true	6	NULL
2095	"new_name"	"varchar"	1024	0	2087	NULL	true	7	NULL
2096	"condition"	"varchar"	2048	0	2087	NULL	true	8	NULL
2097	"statement"	"varchar"	2048	0	2087	NULL	true	9	NULL
2099	"id"	"int"	32	0	2098	NULL	true	0	NULL
2100	"name"	"varchar"	1024	0	2098	NULL	true	1	NULL
2101	"nr"	"int"	32	0	2098	NULL	true	2	NULL
2104	"id"	"int"	32	0	2103	NULL	true	0	NULL
2105	"name"	"varchar"	1024	0	2103	NULL	true	1	NULL
2106	"schema_id"	"int"	32	0	2103	NULL	true	2	NULL
2107	"query"	"varchar"	2048	0	2103	NULL	true	3	NULL
2108	"type"	"smallint"	16	0	2103	NULL	true	4	NULL
2109	"system"	"boolean"	1	0	2103	NULL	true	5	NULL
2110	"commit_action"	"smallint"	16	0	2103	NULL	true	6	NULL
2111	"readonly"	"boolean"	1	0	2103	NULL	true	7	NULL
2113	"id"	"int"	32	0	2112	NULL	true	0	NULL
2114	"name"	"varchar"	1024	0	2112	NULL	true	1	NULL
2115	"type"	"varchar"	1024	0	2112	NULL	true	2	NULL
2116	"type_digits"	"int"	32	0	2112	NULL	true	3	NULL
2117	"type_scale"	"int"	32	0	2112	NULL	true	4	NULL
2118	"table_id"	"int"	32	0	2112	NULL	true	5	NULL
2119	"default"	"varchar"	2048	0	2112	NULL	true	6	NULL
2120	"null"	"boolean"	1	0	2112	NULL	true	7	NULL
2121	"number"	"int"	32	0	2112	NULL	true	8	NULL
2122	"storage"	"varchar"	2048	0	2112	NULL	true	9	NULL
2124	"id"	"int"	32	0	2123	NULL	true	0	NULL
2125	"table_id"	"int"	32	0	2123	NULL	true	1	NULL
2126	"type"	"int"	32	0	2123	NULL	true	2	NULL
2127	"name"	"varchar"	1024	0	2123	NULL	true	3	NULL
2128	"rkey"	"int"	32	0	2123	NULL	true	4	NULL
2129	"action"	"int"	32	0	2123	NULL	true	5	NULL
2131	"id"	"int"	32	0	2130	NULL	true	0	NULL
2132	"table_id"	"int"	32	0	2130	NULL	true	1	NULL
2133	"type"	"int"	32	0	2130	NULL	true	2	NULL
2134	"name"	"varchar"	1024	0	2130	NULL	true	3	NULL
2136	"id"	"int"	32	0	2135	NULL	true	0	NULL
2137	"name"	"varchar"	1024	0	2135	NULL	true	1	NULL
2138	"table_id"	"int"	32	0	2135	NULL	true	2	NULL
2139	"time"	"smallint"	16	0	2135	NULL	true	3	NULL
2140	"orientation"	"smallint"	16	0	2135	NULL	true	4	NULL
2141	"event"	"smallint"	16	0	2135	NULL	true	5	NULL
2142	"old_name"	"varchar"	1024	0	2135	NULL	true	6	NULL
2143	"new_name"	"varchar"	1024	0	2135	NULL	true	7	NULL
2144	"condition"	"varchar"	2048	0	2135	NULL	true	8	NULL
2145	"statement"	"varchar"	2048	0	2135	NULL	true	9	NULL
2147	"id"	"int"	32	0	2146	NULL	true	0	NULL
2148	"name"	"varchar"	1024	0	2146	NULL	true	1	NULL
2149	"nr"	"int"	32	0	2146	NULL	true	2	NULL
5531	"id"	"int"	32	0	5530	NULL	true	0	NULL
5532	"name"	"varchar"	1024	0	5530	NULL	true	1	NULL
5533	"schema_id"	"int"	32	0	5530	NULL	true	2	NULL
5534	"query"	"varchar"	2048	0	5530	NULL	true	3	NULL
5535	"type"	"smallint"	16	0	5530	NULL	true	4	NULL
5536	"system"	"boolean"	1	0	5530	NULL	true	5	NULL
5537	"commit_action"	"smallint"	16	0	5530	NULL	true	6	NULL
5538	"readonly"	"boolean"	1	0	5530	NULL	true	7	NULL
5539	"temporary"	"smallint"	16	0	5530	NULL	true	8	NULL
5541	"id"	"int"	32	0	5540	NULL	true	0	NULL
5542	"name"	"varchar"	1024	0	5540	NULL	true	1	NULL
5543	"type"	"varchar"	1024	0	5540	NULL	true	2	NULL
5544	"type_digits"	"int"	32	0	5540	NULL	true	3	NULL
5545	"type_scale"	"int"	32	0	5540	NULL	true	4	NULL
5546	"table_id"	"int"	32	0	5540	NULL	true	5	NULL
5547	"default"	"varchar"	2048	0	5540	NULL	true	6	NULL
5548	"null"	"boolean"	1	0	5540	NULL	true	7	NULL
5549	"number"	"int"	32	0	5540	NULL	true	8	NULL
5550	"storage_type"	"int"	32	0	5540	NULL	true	9	NULL
5552	"name"	"varchar"	1024	0	5551	NULL	true	0	NULL
5553	"value"	"varchar"	2048	0	5551	NULL	true	1	NULL
5557	"name"	"varchar"	1024	0	5556	NULL	true	0	NULL
5561	"name"	"varchar"	1024	0	5560	NULL	true	0	NULL
5562	"fullname"	"varchar"	2048	0	5560	NULL	true	1	NULL
5563	"default_schema"	"int"	9	0	5560	NULL	true	2	NULL
5565	"name"	"varchar"	2048	0	5564	NULL	true	0	NULL
5569	"name"	"varchar"	1024	0	5568	NULL	true	0	NULL
5570	"fullname"	"varchar"	2024	0	5568	NULL	true	1	NULL
5571	"default_schema"	"int"	9	0	5568	NULL	true	2	NULL
5573	"login_id"	"int"	32	0	5572	NULL	true	0	NULL
5574	"role_id"	"int"	32	0	5572	NULL	true	1	NULL
5576	"id"	"int"	32	0	5575	NULL	true	0	NULL
5577	"name"	"varchar"	1024	0	5575	NULL	true	1	NULL
5578	"grantor"	"int"	32	0	5575	NULL	true	2	NULL
5580	"obj_id"	"int"	32	0	5579	NULL	true	0	NULL
5581	"auth_id"	"int"	32	0	5579	NULL	true	1	NULL
5582	"privileges"	"int"	32	0	5579	NULL	true	2	NULL
5583	"grantor"	"int"	32	0	5579	NULL	true	3	NULL
5584	"grantable"	"int"	32	0	5579	NULL	true	4	NULL
5724	"id"	"oid"	31	0	5723	NULL	true	0	NULL
5725	"owner"	"clob"	0	0	5723	NULL	true	1	NULL
5726	"defined"	"timestamp"	7	0	5723	NULL	true	2	NULL
5727	"query"	"clob"	0	0	5723	NULL	true	3	NULL
5728	"pipe"	"clob"	0	0	5723	NULL	true	4	NULL
5729	"mal"	"int"	32	0	5723	NULL	true	5	NULL
5730	"optimize"	"bigint"	64	0	5723	NULL	true	6	NULL
5735	"id"	"oid"	31	0	5734	NULL	true	0	NULL
5736	"start"	"timestamp"	7	0	5734	NULL	true	1	NULL
5737	"stop"	"timestamp"	7	0	5734	NULL	true	2	NULL
5738	"arguments"	"clob"	0	0	5734	NULL	true	3	NULL
5739	"tuples"	"wrd"	64	0	5734	NULL	true	4	NULL
5740	"run"	"bigint"	64	0	5734	NULL	true	5	NULL
5741	"ship"	"bigint"	64	0	5734	NULL	true	6	NULL
5742	"cpu"	"int"	32	0	5734	NULL	true	7	NULL
5743	"io"	"int"	32	0	5734	NULL	true	8	NULL
5744	"space"	"bigint"	64	0	5734	NULL	true	9	NULL
5749	"id"	"oid"	31	0	5756	NULL	true	0	NULL
5750	"owner"	"clob"	0	0	5756	NULL	true	1	NULL
5751	"defined"	"timestamp"	7	0	5756	NULL	true	2	NULL
5752	"query"	"clob"	0	0	5756	NULL	true	3	NULL
5753	"pipe"	"clob"	0	0	5756	NULL	true	4	NULL
5754	"mal"	"int"	32	0	5756	NULL	true	5	NULL
5755	"optimize"	"bigint"	64	0	5756	NULL	true	6	NULL
5758	"id"	"oid"	31	0	5768	NULL	true	0	NULL
5759	"start"	"timestamp"	7	0	5768	NULL	true	1	NULL
5760	"stop"	"timestamp"	7	0	5768	NULL	true	2	NULL
5761	"arguments"	"clob"	0	0	5768	NULL	true	3	NULL
5762	"tuples"	"wrd"	64	0	5768	NULL	true	4	NULL
5763	"run"	"bigint"	64	0	5768	NULL	true	5	NULL
5764	"ship"	"bigint"	64	0	5768	NULL	true	6	NULL
5765	"cpu"	"int"	32	0	5768	NULL	true	7	NULL
5766	"io"	"int"	32	0	5768	NULL	true	8	NULL
5767	"space"	"bigint"	64	0	5768	NULL	true	9	NULL
5770	"id"	"oid"	31	0	5786	NULL	true	0	NULL
5771	"owner"	"clob"	0	0	5786	NULL	true	1	NULL
5772	"defined"	"timestamp"	7	0	5786	NULL	true	2	NULL
5773	"query"	"clob"	0	0	5786	NULL	true	3	NULL
5774	"pipe"	"clob"	0	0	5786	NULL	true	4	NULL
5775	"mal"	"int"	32	0	5786	NULL	true	5	NULL
5776	"optimize"	"bigint"	64	0	5786	NULL	true	6	NULL
5777	"start"	"timestamp"	7	0	5786	NULL	true	7	NULL
5778	"stop"	"timestamp"	7	0	5786	NULL	true	8	NULL
5779	"arguments"	"clob"	0	0	5786	NULL	true	9	NULL
5780	"tuples"	"wrd"	64	0	5786	NULL	true	10	NULL
5781	"run"	"bigint"	64	0	5786	NULL	true	11	NULL
5782	"ship"	"bigint"	64	0	5786	NULL	true	12	NULL
5783	"cpu"	"int"	32	0	5786	NULL	true	13	NULL
5784	"space"	"bigint"	64	0	5786	NULL	true	14	NULL
5785	"io"	"int"	32	0	5786	NULL	true	15	NULL
5797	"event"	"int"	32	0	5796	NULL	true	0	NULL
5798	"clk"	"varchar"	20	0	5796	NULL	true	1	NULL
5799	"pc"	"varchar"	50	0	5796	NULL	true	2	NULL
5800	"thread"	"int"	32	0	5796	NULL	true	3	NULL
5801	"user"	"int"	32	0	5796	NULL	true	4	NULL
5802	"ticks"	"bigint"	64	0	5796	NULL	true	5	NULL
5803	"reads"	"bigint"	64	0	5796	NULL	true	6	NULL
5804	"writes"	"bigint"	64	0	5796	NULL	true	7	NULL
5805	"rbytes"	"bigint"	64	0	5796	NULL	true	8	NULL
5806	"wbytes"	"bigint"	64	0	5796	NULL	true	9	NULL
5807	"type"	"clob"	0	0	5796	NULL	true	10	NULL
5808	"stmt"	"clob"	0	0	5796	NULL	true	11	NULL
5813	"event"	"int"	32	0	5825	NULL	true	0	NULL
5814	"clk"	"varchar"	20	0	5825	NULL	true	1	NULL
5815	"pc"	"varchar"	50	0	5825	NULL	true	2	NULL
5816	"thread"	"int"	32	0	5825	NULL	true	3	NULL
5817	"user"	"int"	32	0	5825	NULL	true	4	NULL
5818	"ticks"	"bigint"	64	0	5825	NULL	true	5	NULL
5819	"reads"	"bigint"	64	0	5825	NULL	true	6	NULL
5820	"writes"	"bigint"	64	0	5825	NULL	true	7	NULL
5821	"rbytes"	"bigint"	64	0	5825	NULL	true	8	NULL
5822	"wbytes"	"bigint"	64	0	5825	NULL	true	9	NULL
5823	"type"	"clob"	0	0	5825	NULL	true	10	NULL
5824	"stmt"	"clob"	0	0	5825	NULL	true	11	NULL
5873	"sch"	"varchar"	100	0	5872	NULL	true	0	NULL
5874	"usr"	"varchar"	100	0	5872	NULL	true	1	NULL
5875	"dep_type"	"varchar"	32	0	5872	NULL	true	2	NULL
5880	"sch"	"varchar"	100	0	5879	NULL	true	0	NULL
5881	"usr"	"varchar"	100	0	5879	NULL	true	1	NULL
5882	"dep_type"	"varchar"	32	0	5879	NULL	true	2	NULL
5887	"sch"	"varchar"	100	0	5886	NULL	true	0	NULL
5888	"usr"	"varchar"	100	0	5886	NULL	true	1	NULL
5889	"dep_type"	"varchar"	32	0	5886	NULL	true	2	NULL
5894	"sch"	"varchar"	100	0	5893	NULL	true	0	NULL
5895	"usr"	"varchar"	100	0	5893	NULL	true	1	NULL
5896	"dep_type"	"varchar"	32	0	5893	NULL	true	2	NULL
5901	"sch"	"varchar"	100	0	5900	NULL	true	0	NULL
5902	"usr"	"varchar"	100	0	5900	NULL	true	1	NULL
5903	"dep_type"	"varchar"	32	0	5900	NULL	true	2	NULL
5908	"sch"	"varchar"	100	0	5907	NULL	true	0	NULL
5909	"usr"	"varchar"	100	0	5907	NULL	true	1	NULL
5910	"dep_type"	"varchar"	32	0	5907	NULL	true	2	NULL
5915	"sch"	"varchar"	100	0	5914	NULL	true	0	NULL
5916	"usr"	"varchar"	100	0	5914	NULL	true	1	NULL
5917	"dep_type"	"varchar"	32	0	5914	NULL	true	2	NULL
5922	"sch"	"varchar"	100	0	5921	NULL	true	0	NULL
5923	"usr"	"varchar"	100	0	5921	NULL	true	1	NULL
5924	"dep_type"	"varchar"	32	0	5921	NULL	true	2	NULL
5929	"sch"	"varchar"	100	0	5928	NULL	true	0	NULL
5930	"usr"	"varchar"	100	0	5928	NULL	true	1	NULL
5931	"dep_type"	"varchar"	32	0	5928	NULL	true	2	NULL
5936	"sch"	"varchar"	100	0	5935	NULL	true	0	NULL
5937	"usr"	"varchar"	100	0	5935	NULL	true	1	NULL
5938	"dep_type"	"varchar"	32	0	5935	NULL	true	2	NULL
5943	"sch"	"varchar"	100	0	5942	NULL	true	0	NULL
5944	"usr"	"varchar"	100	0	5942	NULL	true	1	NULL
5945	"dep_type"	"varchar"	32	0	5942	NULL	true	2	NULL
5950	"sch"	"varchar"	100	0	5949	NULL	true	0	NULL
5951	"usr"	"varchar"	100	0	5949	NULL	true	1	NULL
5952	"dep_type"	"varchar"	32	0	5949	NULL	true	2	NULL
5957	"sch"	"varchar"	100	0	5956	NULL	true	0	NULL
5958	"usr"	"varchar"	100	0	5956	NULL	true	1	NULL
5959	"dep_type"	"varchar"	32	0	5956	NULL	true	2	NULL
5964	"sch"	"varchar"	100	0	5963	NULL	true	0	NULL
5965	"usr"	"varchar"	100	0	5963	NULL	true	1	NULL
5966	"dep_type"	"varchar"	32	0	5963	NULL	true	2	NULL
5971	"sch"	"varchar"	100	0	5970	NULL	true	0	NULL
5972	"usr"	"varchar"	100	0	5970	NULL	true	1	NULL
5973	"dep_type"	"varchar"	32	0	5970	NULL	true	2	NULL
5978	"sch"	"varchar"	100	0	5977	NULL	true	0	NULL
5979	"usr"	"varchar"	100	0	5977	NULL	true	1	NULL
5980	"dep_type"	"varchar"	32	0	5977	NULL	true	2	NULL
5985	"sch"	"varchar"	100	0	5984	NULL	true	0	NULL
5986	"usr"	"varchar"	100	0	5984	NULL	true	1	NULL
5987	"dep_type"	"varchar"	32	0	5984	NULL	true	2	NULL
5996	"user"	"clob"	0	0	5995	NULL	true	0	NULL
5997	"login"	"timestamp"	7	0	5995	NULL	true	1	NULL
5998	"sessiontimeout"	"bigint"	64	0	5995	NULL	true	2	NULL
5999	"lastcommand"	"timestamp"	7	0	5995	NULL	true	3	NULL
6000	"querytimeout"	"bigint"	64	0	5995	NULL	true	4	NULL
6001	"active"	"boolean"	1	0	5995	NULL	true	5	NULL
6006	"user"	"clob"	0	0	6012	NULL	true	0	NULL
6007	"login"	"timestamp"	7	0	6012	NULL	true	1	NULL
6008	"sessiontimeout"	"bigint"	64	0	6012	NULL	true	2	NULL
6009	"lastcommand"	"timestamp"	7	0	6012	NULL	true	3	NULL
6010	"querytimeout"	"bigint"	64	0	6012	NULL	true	4	NULL
6011	"active"	"boolean"	1	0	6012	NULL	true	5	NULL
6073	"rewrite"	"clob"	0	0	6072	NULL	true	0	NULL
6074	"count"	"int"	32	0	6072	NULL	true	1	NULL
6079	"query"	"clob"	0	0	6078	NULL	true	0	NULL
6080	"count"	"int"	32	0	6078	NULL	true	1	NULL
6088	"name"	"clob"	0	0	6087	NULL	true	0	NULL
6089	"def"	"clob"	0	0	6087	NULL	true	1	NULL
6090	"status"	"clob"	0	0	6087	NULL	true	2	NULL
6095	"name"	"clob"	0	0	6098	NULL	true	0	NULL
6096	"def"	"clob"	0	0	6098	NULL	true	1	NULL
6097	"status"	"clob"	0	0	6098	NULL	true	2	NULL
6100	"name"	"clob"	0	0	6099	NULL	true	0	NULL
6101	"value"	"clob"	0	0	6099	NULL	true	1	NULL
6106	"name"	"clob"	0	0	6108	NULL	true	0	NULL
6107	"value"	"clob"	0	0	6108	NULL	true	1	NULL
6110	"id"	"int"	32	0	6109	NULL	true	0	NULL
6111	"name"	"clob"	0	0	6109	NULL	true	1	NULL
6112	"htype"	"clob"	0	0	6109	NULL	true	2	NULL
6113	"ttype"	"clob"	0	0	6109	NULL	true	3	NULL
6114	"count"	"bigint"	64	0	6109	NULL	true	4	NULL
6115	"refcnt"	"int"	32	0	6109	NULL	true	5	NULL
6116	"lrefcnt"	"int"	32	0	6109	NULL	true	6	NULL
6117	"location"	"clob"	0	0	6109	NULL	true	7	NULL
6118	"heat"	"int"	32	0	6109	NULL	true	8	NULL
6119	"dirty"	"clob"	0	0	6109	NULL	true	9	NULL
6120	"status"	"clob"	0	0	6109	NULL	true	10	NULL
6121	"kind"	"clob"	0	0	6109	NULL	true	11	NULL
6130	"qtag"	"bigint"	64	0	6129	NULL	true	0	NULL
6131	"user"	"clob"	0	0	6129	NULL	true	1	NULL
6132	"started"	"timestamp"	7	0	6129	NULL	true	2	NULL
6133	"estimate"	"timestamp"	7	0	6129	NULL	true	3	NULL
6134	"progress"	"int"	32	0	6129	NULL	true	4	NULL
6135	"status"	"clob"	0	0	6129	NULL	true	5	NULL
6136	"tag"	"oid"	31	0	6129	NULL	true	6	NULL
6137	"query"	"clob"	0	0	6129	NULL	true	7	NULL
6142	"qtag"	"bigint"	64	0	6150	NULL	true	0	NULL
6143	"user"	"clob"	0	0	6150	NULL	true	1	NULL
6144	"started"	"timestamp"	7	0	6150	NULL	true	2	NULL
6145	"estimate"	"timestamp"	7	0	6150	NULL	true	3	NULL
6146	"progress"	"int"	32	0	6150	NULL	true	4	NULL
6147	"status"	"clob"	0	0	6150	NULL	true	5	NULL
6148	"tag"	"oid"	31	0	6150	NULL	true	6	NULL
6149	"query"	"clob"	0	0	6150	NULL	true	7	NULL
6694	"schema"	"clob"	0	0	6693	NULL	true	0	NULL
6695	"table"	"clob"	0	0	6693	NULL	true	1	NULL
6696	"column"	"clob"	0	0	6693	NULL	true	2	NULL
6697	"type"	"clob"	0	0	6693	NULL	true	3	NULL
6698	"location"	"clob"	0	0	6693	NULL	true	4	NULL
6699	"count"	"bigint"	64	0	6693	NULL	true	5	NULL
6700	"typewidth"	"int"	32	0	6693	NULL	true	6	NULL
6701	"columnsize"	"bigint"	64	0	6693	NULL	true	7	NULL
6702	"heapsize"	"bigint"	64	0	6693	NULL	true	8	NULL
6703	"indices"	"bigint"	64	0	6693	NULL	true	9	NULL
6704	"sorted"	"boolean"	1	0	6693	NULL	true	10	NULL
6709	"schema"	"clob"	0	0	6720	NULL	true	0	NULL
6710	"table"	"clob"	0	0	6720	NULL	true	1	NULL
6711	"column"	"clob"	0	0	6720	NULL	true	2	NULL
6712	"type"	"clob"	0	0	6720	NULL	true	3	NULL
6713	"location"	"clob"	0	0	6720	NULL	true	4	NULL
6714	"count"	"bigint"	64	0	6720	NULL	true	5	NULL
6715	"typewidth"	"int"	32	0	6720	NULL	true	6	NULL
6716	"columnsize"	"bigint"	64	0	6720	NULL	true	7	NULL
6717	"heapsize"	"bigint"	64	0	6720	NULL	true	8	NULL
6718	"indices"	"bigint"	64	0	6720	NULL	true	9	NULL
6719	"sorted"	"boolean"	1	0	6720	NULL	true	10	NULL
6722	"schema"	"clob"	0	0	6732	NULL	true	0	NULL
6723	"table"	"clob"	0	0	6732	NULL	true	1	NULL
6724	"column"	"clob"	0	0	6732	NULL	true	2	NULL
6725	"type"	"clob"	0	0	6732	NULL	true	3	NULL
6726	"typewidth"	"int"	32	0	6732	NULL	true	4	NULL
6727	"count"	"bigint"	64	0	6732	NULL	true	5	NULL
6728	"distinct"	"bigint"	64	0	6732	NULL	true	6	NULL
6729	"atomwidth"	"int"	32	0	6732	NULL	true	7	NULL
6730	"reference"	"boolean"	1	0	6732	NULL	true	8	NULL
6731	"sorted"	"boolean"	1	0	6732	NULL	true	9	NULL
6753	"schema"	"clob"	0	0	6752	NULL	true	0	NULL
6754	"table"	"clob"	0	0	6752	NULL	true	1	NULL
6755	"column"	"clob"	0	0	6752	NULL	true	2	NULL
6756	"type"	"clob"	0	0	6752	NULL	true	3	NULL
6757	"count"	"bigint"	64	0	6752	NULL	true	4	NULL
6758	"columnsize"	"bigint"	64	0	6752	NULL	true	5	NULL
6759	"heapsize"	"bigint"	64	0	6752	NULL	true	6	NULL
6760	"indices"	"bigint"	64	0	6752	NULL	true	7	NULL
6761	"sorted"	"boolean"	1	0	6752	NULL	true	8	NULL
6766	"schema"	"clob"	0	0	6775	NULL	true	0	NULL
6767	"table"	"clob"	0	0	6775	NULL	true	1	NULL
6768	"column"	"clob"	0	0	6775	NULL	true	2	NULL
6769	"type"	"clob"	0	0	6775	NULL	true	3	NULL
6770	"count"	"bigint"	64	0	6775	NULL	true	4	NULL
6771	"columnsize"	"bigint"	64	0	6775	NULL	true	5	NULL
6772	"heapsize"	"bigint"	64	0	6775	NULL	true	6	NULL
6773	"indices"	"bigint"	64	0	6775	NULL	true	7	NULL
6774	"sorted"	"boolean"	1	0	6775	NULL	true	8	NULL
6777	"schema"	"clob"	0	0	6784	NULL	true	0	NULL
6778	"table"	"clob"	0	0	6784	NULL	true	1	NULL
6779	"count"	"bigint"	64	0	6784	NULL	true	2	NULL
6780	"columnsize"	"hugeint"	64	0	6784	NULL	true	3	NULL
6781	"heapsize"	"hugeint"	64	0	6784	NULL	true	4	NULL
6782	"indices"	"hugeint"	64	0	6784	NULL	true	5	NULL
6783	"auxillary"	"hugeint"	128	0	6784	NULL	true	6	NULL
6786	"schema"	"clob"	0	0	6799	NULL	true	0	NULL
6787	"table"	"clob"	0	0	6799	NULL	true	1	NULL
6788	"column"	"clob"	0	0	6799	NULL	true	2	NULL
6789	"type"	"clob"	0	0	6799	NULL	true	3	NULL
6790	"width"	"int"	32	0	6799	NULL	true	4	NULL
6791	"stamp"	"timestamp"	7	0	6799	NULL	true	5	NULL
6792	"sample"	"bigint"	64	0	6799	NULL	true	6	NULL
6793	"count"	"bigint"	64	0	6799	NULL	true	7	NULL
6794	"unique"	"bigint"	64	0	6799	NULL	true	8	NULL
6795	"nils"	"bigint"	64	0	6799	NULL	true	9	NULL
6796	"minval"	"clob"	0	0	6799	NULL	true	10	NULL
6797	"maxval"	"clob"	0	0	6799	NULL	true	11	NULL
6798	"sorted"	"boolean"	1	0	6799	NULL	true	12	NULL
6857	"function_id"	"int"	32	0	6858	NULL	true	0	NULL
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."_tables" (
	"id"            INTEGER,
	"name"          VARCHAR(1024),
	"schema_id"     INTEGER,
	"query"         VARCHAR(2048),
	"type"          SMALLINT,
	"system"        BOOLEAN,
	"commit_action" SMALLINT,
	"readonly"      BOOLEAN
);
COPY 72 RECORDS INTO "sys"."_tables" FROM stdin USING DELIMITERS '\t','\n','"';
2001	"schemas"	2000	NULL	0	true	0	false
2006	"types"	2000	NULL	0	true	0	false
2015	"functions"	2000	NULL	0	true	0	false
2024	"args"	2000	NULL	0	true	0	false
2032	"sequences"	2000	NULL	0	true	0	false
2042	"dependencies"	2000	NULL	0	true	0	false
2046	"connections"	2000	NULL	0	true	0	false
2055	"_tables"	2000	NULL	0	true	0	false
2064	"_columns"	2000	NULL	0	true	0	false
2075	"keys"	2000	NULL	0	true	0	false
2082	"idxs"	2000	NULL	0	true	0	false
2087	"triggers"	2000	NULL	0	true	0	false
2098	"objects"	2000	NULL	0	true	0	false
2103	"_tables"	2102	NULL	0	true	2	false
2112	"_columns"	2102	NULL	0	true	2	false
2123	"keys"	2102	NULL	0	true	2	false
2130	"idxs"	2102	NULL	0	true	2	false
2135	"triggers"	2102	NULL	0	true	2	false
2146	"objects"	2102	NULL	0	true	2	false
5530	"tables"	2000	"SELECT * FROM (SELECT p.*, 0 AS \"temporary\" FROM \"sys\".\"_tables\" AS p UNION ALL SELECT t.*, 1 AS \"temporary\" FROM \"tmp\".\"_tables\" AS t) AS tables where tables.type <> 2;"	1	true	0	false
5540	"columns"	2000	"SELECT * FROM (SELECT p.* FROM \"sys\".\"_columns\" AS p UNION ALL SELECT t.* FROM \"tmp\".\"_columns\" AS t) AS columns;"	1	true	0	false
5551	"#env"	2000	NULL	2	true	0	false
5556	"#var"	2000	NULL	2	true	0	false
5560	"db_user_info"	2000	NULL	0	true	0	false
5564	"#db_users"	2000	NULL	2	true	0	false
5568	"users"	2000	"SELECT u.\"name\" AS \"name\", ui.\"fullname\", ui.\"default_schema\" FROM db_users() AS u LEFT JOIN \"sys\".\"db_user_info\" AS ui ON u.\"name\" = ui.\"name\" ;"	1	true	0	false
5572	"user_role"	2000	NULL	0	true	0	false
5575	"auths"	2000	NULL	0	true	0	false
5579	"privileges"	2000	NULL	0	true	0	false
5723	"#querylog_catalog"	2000	NULL	2	true	0	false
5734	"#querylog_calls"	2000	NULL	2	true	0	false
5756	"querylog_catalog"	2000	"-- create table views for convenience\ncreate view sys.querylog_catalog as select * from sys.querylog_catalog();"	1	true	0	false
5768	"querylog_calls"	2000	"create view sys.querylog_calls as select * from sys.querylog_calls();"	1	true	0	false
5786	"querylog_history"	2000	"create view sys.querylog_history as\nselect qd.*, ql.\"start\",ql.\"stop\", ql.arguments, ql.tuples, ql.run, ql.ship, ql.cpu, ql.space, ql.io \nfrom sys.querylog_catalog() qd, sys.querylog_calls() ql\nwhere qd.id = ql.id and qd.owner = user;"	1	true	0	false
5796	"#tracelog"	2000	NULL	2	true	0	false
5825	"tracelog"	2000	"create view sys.tracelog as select * from sys.tracelog();"	1	true	0	false
5872	"#dependencies_schemas_on_users"	2000	NULL	2	true	0	false
5879	"#dependencies_owners_on_schemas"	2000	NULL	2	true	0	false
5886	"#dependencies_tables_on_views"	2000	NULL	2	true	0	false
5893	"#dependencies_tables_on_indexes"	2000	NULL	2	true	0	false
5900	"#dependencies_tables_on_triggers"	2000	NULL	2	true	0	false
5907	"#dependencies_tables_on_foreignkeys"	2000	NULL	2	true	0	false
5914	"#dependencies_tables_on_functions"	2000	NULL	2	true	0	false
5921	"#dependencies_columns_on_views"	2000	NULL	2	true	0	false
5928	"#dependencies_columns_on_keys"	2000	NULL	2	true	0	false
5935	"#dependencies_columns_on_indexes"	2000	NULL	2	true	0	false
5942	"#dependencies_columns_on_functions"	2000	NULL	2	true	0	false
5949	"#dependencies_columns_on_triggers"	2000	NULL	2	true	0	false
5956	"#dependencies_views_on_functions"	2000	NULL	2	true	0	false
5963	"#dependencies_views_on_triggers"	2000	NULL	2	true	0	false
5970	"#dependencies_functions_on_functions"	2000	NULL	2	true	0	false
5977	"#dependencies_functions_os_triggers"	2000	NULL	2	true	0	false
5984	"#dependencies_keys_on_foreignkeys"	2000	NULL	2	true	0	false
5995	"#sessions"	2000	NULL	2	true	0	false
6012	"sessions"	2000	"create view sys.sessions as select * from sys.sessions();"	1	true	0	false
6072	"#optimizer_stats"	2000	NULL	2	true	0	false
6078	"#querycache"	2000	NULL	2	true	0	false
6087	"#optimizers"	2000	NULL	2	true	0	false
6098	"optimizers"	2000	"create view sys.optimizers as select * from sys.optimizers();"	1	true	0	false
6099	"#environment"	2000	NULL	2	true	0	false
6108	"environment"	2000	"create view sys.environment as select * from sys.environment();"	1	true	0	false
6109	"#bbp"	2000	NULL	2	true	0	false
6129	"#queue"	2000	NULL	2	true	0	false
6150	"queue"	2000	"create view sys.queue as select * from sys.queue();"	1	true	0	false
6693	"#storage"	2000	NULL	2	true	0	false
6720	"storage"	2000	"create view sys.storage as select * from sys.storage();"	1	true	0	false
6732	"storagemodelinput"	2000	NULL	0	true	0	false
6752	"#storagemodel"	2000	NULL	2	true	0	false
6775	"storagemodel"	2000	"create view sys.storagemodel as select * from sys.storagemodel();"	1	true	0	false
6784	"tablestoragemodel"	2000	"-- A summary of the table storage requirement is is available as a table view.\n-- The auxillary column denotes the maximum space if all non-sorted columns\n-- would be augmented with a hash (rare situation)\ncreate view sys.tablestoragemodel\nas select \"schema\",\"table\",max(count) as \"count\",\n\tsum(columnsize) as columnsize,\n\tsum(heapsize) as heapsize,\n\tsum(indices) as indices,\n\tsum(case when sorted = false then 8 * count else 0 end) as auxillary\nfrom sys.storagemodel() group by \"schema\",\"table\";"	1	true	0	false
6799	"statistics"	2000	NULL	0	true	0	false
6858	"systemfunctions"	2000	NULL	0	true	0	false
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."args" (
	"id"          INTEGER,
	"func_id"     INTEGER,
	"name"        VARCHAR(256),
	"type"        VARCHAR(1024),
	"type_digits" INTEGER,
	"type_scale"  INTEGER,
	"number"      INTEGER
);
COPY 3870 RECORDS INTO "sys"."args" FROM stdin USING DELIMITERS '\t','\n','"';
2151	30	"result"	"oid"	31	0	0
2152	30	"arg_1"	"wrd"	64	0	1
2153	31	"result"	"oid"	31	0	0
2154	31	"arg_1"	"oid"	31	0	1
2155	32	"result"	"wrd"	64	0	0
2156	32	"arg_1"	"any"	0	0	1
2157	33	"result"	"wrd"	64	0	0
2158	33	"arg_1"	"wrd"	64	0	1
2159	33	"arg_2"	"int"	32	0	2
2160	33	"arg_3"	"any"	0	0	3
2161	34	"result"	"boolean"	1	0	0
2162	34	"arg_1"	"any"	0	0	1
2163	34	"arg_2"	"any"	0	0	2
2164	35	"result"	"boolean"	1	0	0
2165	35	"arg_1"	"any"	0	0	1
2166	35	"arg_2"	"any"	0	0	2
2167	36	"result"	"boolean"	1	0	0
2168	36	"arg_1"	"any"	0	0	1
2169	37	"result"	"boolean"	1	0	0
2170	37	"arg_1"	"any"	0	0	1
2171	37	"arg_2"	"any"	0	0	2
2172	38	"result"	"boolean"	1	0	0
2173	38	"arg_1"	"any"	0	0	1
2174	38	"arg_2"	"any"	0	0	2
2175	39	"result"	"boolean"	1	0	0
2176	39	"arg_1"	"any"	0	0	1
2177	39	"arg_2"	"any"	0	0	2
2178	40	"result"	"boolean"	1	0	0
2179	40	"arg_1"	"any"	0	0	1
2180	40	"arg_2"	"any"	0	0	2
2181	44	"result"	"boolean"	1	0	0
2182	44	"arg_1"	"any"	0	0	1
2183	44	"arg_2"	"any"	0	0	2
2184	45	"result"	"oid"	31	0	0
2185	45	"arg_1"	"any"	0	0	1
2186	46	"result"	"int"	32	0	0
2187	46	"arg_1"	"any"	0	0	1
2188	47	"result"	"oid"	31	0	0
2189	47	"arg_1"	"any"	0	0	1
2190	47	"arg_2"	"varchar"	0	0	2
2191	47	"arg_3"	"varchar"	0	0	3
2192	50	"result"	"any"	0	0	0
2193	50	"arg_1"	"any"	0	0	1
2194	50	"arg_2"	"any"	0	0	2
2195	51	"result"	"any"	0	0	0
2196	51	"arg_1"	"any"	0	0	1
2197	51	"arg_2"	"any"	0	0	2
2198	52	"result"	"any"	0	0	0
2199	52	"arg_1"	"boolean"	1	0	1
2200	52	"arg_2"	"any"	0	0	2
2201	52	"arg_3"	"any"	0	0	3
2202	74	"result"	"tinyint"	8	0	0
2203	74	"arg_1"	"tinyint"	8	0	1
2204	74	"arg_2"	"tinyint"	8	0	2
2205	75	"result"	"smallint"	16	0	0
2206	75	"arg_1"	"smallint"	16	0	1
2207	75	"arg_2"	"smallint"	16	0	2
2208	76	"result"	"int"	32	0	0
2209	76	"arg_1"	"int"	32	0	1
2210	76	"arg_2"	"int"	32	0	2
2211	77	"result"	"oid"	31	0	0
2212	77	"arg_1"	"oid"	31	0	1
2213	77	"arg_2"	"oid"	31	0	2
2214	78	"result"	"bigint"	64	0	0
2215	78	"arg_1"	"bigint"	64	0	1
2216	78	"arg_2"	"bigint"	64	0	2
2217	79	"result"	"wrd"	64	0	0
2218	79	"arg_1"	"wrd"	64	0	1
2219	79	"arg_2"	"wrd"	64	0	2
2220	80	"result"	"hugeint"	128	0	0
2221	80	"arg_1"	"hugeint"	128	0	1
2222	80	"arg_2"	"hugeint"	128	0	2
2223	81	"result"	"decimal"	2	0	0
2224	81	"arg_1"	"decimal"	2	0	1
2225	81	"arg_2"	"decimal"	2	0	2
2226	82	"result"	"decimal"	4	0	0
2227	82	"arg_1"	"decimal"	4	0	1
2228	82	"arg_2"	"decimal"	4	0	2
2229	83	"result"	"decimal"	9	0	0
2230	83	"arg_1"	"decimal"	9	0	1
2231	83	"arg_2"	"decimal"	9	0	2
2232	84	"result"	"decimal"	18	0	0
2233	84	"arg_1"	"decimal"	18	0	1
2234	84	"arg_2"	"decimal"	18	0	2
2235	85	"result"	"decimal"	39	0	0
2236	85	"arg_1"	"decimal"	39	0	1
2237	85	"arg_2"	"decimal"	39	0	2
2238	86	"result"	"real"	24	0	0
2239	86	"arg_1"	"real"	24	0	1
2240	86	"arg_2"	"real"	24	0	2
2241	87	"result"	"double"	53	0	0
2242	87	"arg_1"	"double"	53	0	1
2243	87	"arg_2"	"double"	53	0	2
2244	95	"result"	"int"	32	0	0
2245	95	"arg_1"	"any"	0	0	1
2246	96	"result"	"int"	32	0	0
2247	96	"arg_1"	"any"	0	0	1
2248	97	"result"	"int"	32	0	0
2249	97	"arg_1"	"any"	0	0	1
2250	98	"result"	"any"	0	0	0
2251	98	"arg_1"	"any"	0	0	1
2252	99	"result"	"int"	32	0	0
2253	99	"arg_1"	"any"	0	0	1
2254	100	"result"	"int"	32	0	0
2255	100	"arg_1"	"any"	0	0	1
2256	100	"arg_2"	"oid"	31	0	2
2257	100	"arg_3"	"any"	0	0	3
2258	101	"result"	"int"	32	0	0
2259	101	"arg_1"	"any"	0	0	1
2260	101	"arg_2"	"oid"	31	0	2
2261	101	"arg_3"	"any"	0	0	3
2262	102	"result"	"int"	32	0	0
2263	102	"arg_1"	"any"	0	0	1
2264	102	"arg_2"	"oid"	31	0	2
2265	102	"arg_3"	"any"	0	0	3
2266	103	"result"	"any"	0	0	0
2267	103	"arg_1"	"any"	0	0	1
2268	103	"arg_2"	"oid"	31	0	2
2269	103	"arg_3"	"any"	0	0	3
2270	104	"result"	"int"	32	0	0
2271	104	"arg_1"	"any"	0	0	1
2272	104	"arg_2"	"oid"	31	0	2
2273	104	"arg_3"	"any"	0	0	3
2274	105	"result"	"int"	32	0	0
2275	105	"arg_1"	"any"	0	0	1
2276	105	"arg_2"	"oid"	31	0	2
2277	105	"arg_3"	"oid"	31	0	3
2278	105	"arg_4"	"oid"	31	0	4
2279	106	"result"	"int"	32	0	0
2280	106	"arg_1"	"any"	0	0	1
2281	106	"arg_2"	"oid"	31	0	2
2282	106	"arg_3"	"oid"	31	0	3
2283	106	"arg_4"	"oid"	31	0	4
2284	107	"result"	"int"	32	0	0
2285	107	"arg_1"	"any"	0	0	1
2286	107	"arg_2"	"oid"	31	0	2
2287	107	"arg_3"	"oid"	31	0	3
2288	107	"arg_4"	"oid"	31	0	4
2289	108	"result"	"any"	0	0	0
2290	108	"arg_1"	"any"	0	0	1
2291	108	"arg_2"	"oid"	31	0	2
2292	108	"arg_3"	"oid"	31	0	3
2293	108	"arg_4"	"oid"	31	0	4
2294	109	"result"	"int"	32	0	0
2295	109	"arg_1"	"any"	0	0	1
2296	109	"arg_2"	"oid"	31	0	2
2297	109	"arg_3"	"oid"	31	0	3
2298	109	"arg_4"	"oid"	31	0	4
2299	110	"result"	"any"	0	0	0
2300	110	"arg_1"	"any"	0	0	1
2301	111	"result"	"any"	0	0	0
2302	111	"arg_1"	"any"	0	0	1
2303	112	"result"	"any"	0	0	0
2304	112	"arg_1"	"any"	0	0	1
2305	112	"arg_2"	"int"	32	0	2
2306	113	"result"	"any"	0	0	0
2307	113	"arg_1"	"any"	0	0	1
2308	113	"arg_2"	"int"	32	0	2
2309	114	"result"	"any"	0	0	0
2310	114	"arg_1"	"any"	0	0	1
2311	114	"arg_2"	"oid"	31	0	2
2312	114	"arg_3"	"oid"	31	0	3
2313	115	"result"	"any"	0	0	0
2314	115	"arg_1"	"any"	0	0	1
2315	115	"arg_2"	"oid"	31	0	2
2316	115	"arg_3"	"oid"	31	0	3
2317	116	"result"	"any"	0	0	0
2318	116	"arg_1"	"any"	0	0	1
2319	116	"arg_2"	"int"	32	0	2
2320	116	"arg_3"	"oid"	31	0	3
2321	116	"arg_4"	"oid"	31	0	4
2322	117	"result"	"any"	0	0	0
2323	117	"arg_1"	"any"	0	0	1
2324	117	"arg_2"	"int"	32	0	2
2325	117	"arg_3"	"oid"	31	0	3
2326	117	"arg_4"	"oid"	31	0	4
2327	118	"result"	"boolean"	1	0	0
2328	118	"arg_1"	"boolean"	1	0	1
2329	118	"arg_2"	"boolean"	1	0	2
2330	119	"result"	"boolean"	1	0	0
2331	119	"arg_1"	"boolean"	1	0	1
2332	119	"arg_2"	"boolean"	1	0	2
2333	120	"result"	"boolean"	1	0	0
2334	120	"arg_1"	"boolean"	1	0	1
2335	120	"arg_2"	"boolean"	1	0	2
2336	121	"result"	"boolean"	1	0	0
2337	121	"arg_1"	"boolean"	1	0	1
2338	122	"result"	"tinyint"	8	0	0
2339	122	"arg_1"	"tinyint"	8	0	1
2340	122	"arg_2"	"tinyint"	8	0	2
2341	123	"result"	"tinyint"	8	0	0
2342	123	"arg_1"	"tinyint"	8	0	1
2343	123	"arg_2"	"tinyint"	8	0	2
2344	124	"result"	"tinyint"	8	0	0
2345	124	"arg_1"	"tinyint"	8	0	1
2346	124	"arg_2"	"tinyint"	8	0	2
2347	125	"result"	"tinyint"	8	0	0
2348	125	"arg_1"	"tinyint"	8	0	1
2349	125	"arg_2"	"tinyint"	8	0	2
2350	126	"result"	"tinyint"	8	0	0
2351	126	"arg_1"	"tinyint"	8	0	1
2352	126	"arg_2"	"tinyint"	8	0	2
2353	127	"result"	"tinyint"	8	0	0
2354	127	"arg_1"	"tinyint"	8	0	1
2355	127	"arg_2"	"tinyint"	8	0	2
2356	128	"result"	"tinyint"	8	0	0
2357	128	"arg_1"	"tinyint"	8	0	1
2358	128	"arg_2"	"tinyint"	8	0	2
2359	129	"result"	"tinyint"	8	0	0
2360	129	"arg_1"	"tinyint"	8	0	1
2361	130	"result"	"tinyint"	8	0	0
2362	130	"arg_1"	"tinyint"	8	0	1
2363	130	"arg_2"	"int"	32	0	2
2364	131	"result"	"tinyint"	8	0	0
2365	131	"arg_1"	"tinyint"	8	0	1
2366	131	"arg_2"	"int"	32	0	2
2367	132	"result"	"tinyint"	8	0	0
2368	132	"arg_1"	"tinyint"	8	0	1
2369	133	"result"	"tinyint"	8	0	0
2370	133	"arg_1"	"tinyint"	8	0	1
2371	134	"result"	"tinyint"	8	0	0
2372	134	"arg_1"	"tinyint"	8	0	1
2373	135	"result"	"tinyint"	8	0	0
2374	135	"arg_1"	"tinyint"	8	0	1
2375	135	"arg_2"	"tinyint"	8	0	2
2376	136	"result"	"tinyint"	8	0	0
2377	136	"arg_1"	"tinyint"	8	0	1
2378	136	"arg_2"	"tinyint"	8	0	2
2379	137	"result"	"month_interval"	32	0	0
2380	137	"arg_1"	"month_interval"	32	0	1
2381	137	"arg_2"	"tinyint"	8	0	2
2382	138	"result"	"month_interval"	32	0	0
2383	138	"arg_1"	"month_interval"	32	0	1
2384	138	"arg_2"	"tinyint"	8	0	2
2385	139	"result"	"month_interval"	32	0	0
2386	139	"arg_1"	"month_interval"	32	0	1
2387	139	"arg_2"	"tinyint"	8	0	2
2388	140	"result"	"month_interval"	32	0	0
2389	140	"arg_1"	"month_interval"	32	0	1
2390	140	"arg_2"	"tinyint"	8	0	2
2391	141	"result"	"sec_interval"	19	0	0
2392	141	"arg_1"	"sec_interval"	19	0	1
2393	141	"arg_2"	"tinyint"	8	0	2
2394	142	"result"	"sec_interval"	19	0	0
2395	142	"arg_1"	"sec_interval"	19	0	1
2396	142	"arg_2"	"tinyint"	8	0	2
2397	143	"result"	"sec_interval"	19	0	0
2398	143	"arg_1"	"sec_interval"	19	0	1
2399	143	"arg_2"	"tinyint"	8	0	2
2400	144	"result"	"sec_interval"	19	0	0
2401	144	"arg_1"	"sec_interval"	19	0	1
2402	144	"arg_2"	"tinyint"	8	0	2
2403	145	"result"	"smallint"	16	0	0
2404	145	"arg_1"	"smallint"	16	0	1
2405	145	"arg_2"	"smallint"	16	0	2
2406	146	"result"	"smallint"	16	0	0
2407	146	"arg_1"	"smallint"	16	0	1
2408	146	"arg_2"	"smallint"	16	0	2
2409	147	"result"	"smallint"	16	0	0
2410	147	"arg_1"	"smallint"	16	0	1
2411	147	"arg_2"	"smallint"	16	0	2
2412	148	"result"	"smallint"	16	0	0
2413	148	"arg_1"	"smallint"	16	0	1
2414	148	"arg_2"	"smallint"	16	0	2
2415	149	"result"	"smallint"	16	0	0
2416	149	"arg_1"	"smallint"	16	0	1
2417	149	"arg_2"	"smallint"	16	0	2
2418	150	"result"	"smallint"	16	0	0
2419	150	"arg_1"	"smallint"	16	0	1
2420	150	"arg_2"	"smallint"	16	0	2
2421	151	"result"	"smallint"	16	0	0
2422	151	"arg_1"	"smallint"	16	0	1
2423	151	"arg_2"	"smallint"	16	0	2
2424	152	"result"	"smallint"	16	0	0
2425	152	"arg_1"	"smallint"	16	0	1
2426	153	"result"	"smallint"	16	0	0
2427	153	"arg_1"	"smallint"	16	0	1
2428	153	"arg_2"	"int"	32	0	2
2429	154	"result"	"smallint"	16	0	0
2430	154	"arg_1"	"smallint"	16	0	1
2431	154	"arg_2"	"int"	32	0	2
2432	155	"result"	"smallint"	16	0	0
2433	155	"arg_1"	"smallint"	16	0	1
2434	156	"result"	"smallint"	16	0	0
2435	156	"arg_1"	"smallint"	16	0	1
2436	157	"result"	"tinyint"	8	0	0
2437	157	"arg_1"	"smallint"	16	0	1
2438	158	"result"	"smallint"	16	0	0
2439	158	"arg_1"	"smallint"	16	0	1
2440	158	"arg_2"	"smallint"	16	0	2
2441	159	"result"	"smallint"	16	0	0
2442	159	"arg_1"	"smallint"	16	0	1
2443	159	"arg_2"	"smallint"	16	0	2
2444	160	"result"	"month_interval"	32	0	0
2445	160	"arg_1"	"month_interval"	32	0	1
2446	160	"arg_2"	"smallint"	16	0	2
2447	161	"result"	"month_interval"	32	0	0
2448	161	"arg_1"	"month_interval"	32	0	1
2449	161	"arg_2"	"smallint"	16	0	2
2450	162	"result"	"month_interval"	32	0	0
2451	162	"arg_1"	"month_interval"	32	0	1
2452	162	"arg_2"	"smallint"	16	0	2
2453	163	"result"	"month_interval"	32	0	0
2454	163	"arg_1"	"month_interval"	32	0	1
2455	163	"arg_2"	"smallint"	16	0	2
2456	164	"result"	"sec_interval"	19	0	0
2457	164	"arg_1"	"sec_interval"	19	0	1
2458	164	"arg_2"	"smallint"	16	0	2
2459	165	"result"	"sec_interval"	19	0	0
2460	165	"arg_1"	"sec_interval"	19	0	1
2461	165	"arg_2"	"smallint"	16	0	2
2462	166	"result"	"sec_interval"	19	0	0
2463	166	"arg_1"	"sec_interval"	19	0	1
2464	166	"arg_2"	"smallint"	16	0	2
2465	167	"result"	"sec_interval"	19	0	0
2466	167	"arg_1"	"sec_interval"	19	0	1
2467	167	"arg_2"	"smallint"	16	0	2
2468	168	"result"	"int"	32	0	0
2469	168	"arg_1"	"int"	32	0	1
2470	168	"arg_2"	"int"	32	0	2
2471	169	"result"	"int"	32	0	0
2472	169	"arg_1"	"int"	32	0	1
2473	169	"arg_2"	"int"	32	0	2
2474	170	"result"	"int"	32	0	0
2475	170	"arg_1"	"int"	32	0	1
2476	170	"arg_2"	"int"	32	0	2
2477	171	"result"	"int"	32	0	0
2478	171	"arg_1"	"int"	32	0	1
2479	171	"arg_2"	"int"	32	0	2
2480	172	"result"	"int"	32	0	0
2481	172	"arg_1"	"int"	32	0	1
2482	172	"arg_2"	"int"	32	0	2
2483	173	"result"	"int"	32	0	0
2484	173	"arg_1"	"int"	32	0	1
2485	173	"arg_2"	"int"	32	0	2
2486	174	"result"	"int"	32	0	0
2487	174	"arg_1"	"int"	32	0	1
2488	174	"arg_2"	"int"	32	0	2
2489	175	"result"	"int"	32	0	0
2490	175	"arg_1"	"int"	32	0	1
2491	176	"result"	"int"	32	0	0
2492	176	"arg_1"	"int"	32	0	1
2493	176	"arg_2"	"int"	32	0	2
2494	177	"result"	"int"	32	0	0
2495	177	"arg_1"	"int"	32	0	1
2496	177	"arg_2"	"int"	32	0	2
2497	178	"result"	"int"	32	0	0
2498	178	"arg_1"	"int"	32	0	1
2499	179	"result"	"int"	32	0	0
2500	179	"arg_1"	"int"	32	0	1
2501	180	"result"	"tinyint"	8	0	0
2502	180	"arg_1"	"int"	32	0	1
2503	181	"result"	"int"	32	0	0
2504	181	"arg_1"	"int"	32	0	1
2505	181	"arg_2"	"int"	32	0	2
2506	182	"result"	"int"	32	0	0
2507	182	"arg_1"	"int"	32	0	1
2508	182	"arg_2"	"int"	32	0	2
2509	183	"result"	"month_interval"	32	0	0
2510	183	"arg_1"	"month_interval"	32	0	1
2511	183	"arg_2"	"int"	32	0	2
2512	184	"result"	"month_interval"	32	0	0
2513	184	"arg_1"	"month_interval"	32	0	1
2514	184	"arg_2"	"int"	32	0	2
2515	185	"result"	"month_interval"	32	0	0
2516	185	"arg_1"	"month_interval"	32	0	1
2517	185	"arg_2"	"int"	32	0	2
2518	186	"result"	"month_interval"	32	0	0
2519	186	"arg_1"	"month_interval"	32	0	1
2520	186	"arg_2"	"int"	32	0	2
2521	187	"result"	"sec_interval"	19	0	0
2522	187	"arg_1"	"sec_interval"	19	0	1
2523	187	"arg_2"	"int"	32	0	2
2524	188	"result"	"sec_interval"	19	0	0
2525	188	"arg_1"	"sec_interval"	19	0	1
2526	188	"arg_2"	"int"	32	0	2
2527	189	"result"	"sec_interval"	19	0	0
2528	189	"arg_1"	"sec_interval"	19	0	1
2529	189	"arg_2"	"int"	32	0	2
2530	190	"result"	"sec_interval"	19	0	0
2531	190	"arg_1"	"sec_interval"	19	0	1
2532	190	"arg_2"	"int"	32	0	2
2533	191	"result"	"oid"	31	0	0
2534	191	"arg_1"	"oid"	31	0	1
2535	191	"arg_2"	"oid"	31	0	2
2536	192	"result"	"oid"	31	0	0
2537	192	"arg_1"	"oid"	31	0	1
2538	192	"arg_2"	"oid"	31	0	2
2539	193	"result"	"oid"	31	0	0
2540	193	"arg_1"	"oid"	31	0	1
2541	193	"arg_2"	"oid"	31	0	2
2542	194	"result"	"oid"	31	0	0
2543	194	"arg_1"	"oid"	31	0	1
2544	194	"arg_2"	"oid"	31	0	2
2545	195	"result"	"oid"	31	0	0
2546	195	"arg_1"	"oid"	31	0	1
2547	195	"arg_2"	"oid"	31	0	2
2548	196	"result"	"oid"	31	0	0
2549	196	"arg_1"	"oid"	31	0	1
2550	196	"arg_2"	"oid"	31	0	2
2551	197	"result"	"oid"	31	0	0
2552	197	"arg_1"	"oid"	31	0	1
2553	197	"arg_2"	"oid"	31	0	2
2554	198	"result"	"oid"	31	0	0
2555	198	"arg_1"	"oid"	31	0	1
2556	199	"result"	"oid"	31	0	0
2557	199	"arg_1"	"oid"	31	0	1
2558	199	"arg_2"	"int"	32	0	2
2559	200	"result"	"oid"	31	0	0
2560	200	"arg_1"	"oid"	31	0	1
2561	200	"arg_2"	"int"	32	0	2
2562	201	"result"	"oid"	31	0	0
2563	201	"arg_1"	"oid"	31	0	1
2564	202	"result"	"oid"	31	0	0
2565	202	"arg_1"	"oid"	31	0	1
2566	203	"result"	"tinyint"	8	0	0
2567	203	"arg_1"	"oid"	31	0	1
2568	204	"result"	"oid"	31	0	0
2569	204	"arg_1"	"oid"	31	0	1
2570	204	"arg_2"	"oid"	31	0	2
2571	205	"result"	"oid"	31	0	0
2572	205	"arg_1"	"oid"	31	0	1
2573	205	"arg_2"	"oid"	31	0	2
2574	206	"result"	"month_interval"	32	0	0
2575	206	"arg_1"	"month_interval"	32	0	1
2576	206	"arg_2"	"oid"	31	0	2
2577	207	"result"	"month_interval"	32	0	0
2578	207	"arg_1"	"month_interval"	32	0	1
2579	207	"arg_2"	"oid"	31	0	2
2580	208	"result"	"month_interval"	32	0	0
2581	208	"arg_1"	"month_interval"	32	0	1
2582	208	"arg_2"	"oid"	31	0	2
2583	209	"result"	"month_interval"	32	0	0
2584	209	"arg_1"	"month_interval"	32	0	1
2585	209	"arg_2"	"oid"	31	0	2
2586	210	"result"	"sec_interval"	19	0	0
2587	210	"arg_1"	"sec_interval"	19	0	1
2588	210	"arg_2"	"oid"	31	0	2
2589	211	"result"	"sec_interval"	19	0	0
2590	211	"arg_1"	"sec_interval"	19	0	1
2591	211	"arg_2"	"oid"	31	0	2
2592	212	"result"	"sec_interval"	19	0	0
2593	212	"arg_1"	"sec_interval"	19	0	1
2594	212	"arg_2"	"oid"	31	0	2
2595	213	"result"	"sec_interval"	19	0	0
2596	213	"arg_1"	"sec_interval"	19	0	1
2597	213	"arg_2"	"oid"	31	0	2
2598	214	"result"	"bigint"	64	0	0
2599	214	"arg_1"	"bigint"	64	0	1
2600	214	"arg_2"	"bigint"	64	0	2
2601	215	"result"	"bigint"	64	0	0
2602	215	"arg_1"	"bigint"	64	0	1
2603	215	"arg_2"	"bigint"	64	0	2
2604	216	"result"	"bigint"	64	0	0
2605	216	"arg_1"	"bigint"	64	0	1
2606	216	"arg_2"	"bigint"	64	0	2
2607	217	"result"	"bigint"	64	0	0
2608	217	"arg_1"	"bigint"	64	0	1
2609	217	"arg_2"	"bigint"	64	0	2
2610	218	"result"	"bigint"	64	0	0
2611	218	"arg_1"	"bigint"	64	0	1
2612	218	"arg_2"	"bigint"	64	0	2
2613	219	"result"	"bigint"	64	0	0
2614	219	"arg_1"	"bigint"	64	0	1
2615	219	"arg_2"	"bigint"	64	0	2
2616	220	"result"	"bigint"	64	0	0
2617	220	"arg_1"	"bigint"	64	0	1
2618	220	"arg_2"	"bigint"	64	0	2
2619	221	"result"	"bigint"	64	0	0
2620	221	"arg_1"	"bigint"	64	0	1
2621	222	"result"	"bigint"	64	0	0
2622	222	"arg_1"	"bigint"	64	0	1
2623	222	"arg_2"	"int"	32	0	2
2624	223	"result"	"bigint"	64	0	0
2625	223	"arg_1"	"bigint"	64	0	1
2626	223	"arg_2"	"int"	32	0	2
2627	224	"result"	"bigint"	64	0	0
2628	224	"arg_1"	"bigint"	64	0	1
2629	225	"result"	"bigint"	64	0	0
2630	225	"arg_1"	"bigint"	64	0	1
2631	226	"result"	"tinyint"	8	0	0
2632	226	"arg_1"	"bigint"	64	0	1
2633	227	"result"	"bigint"	64	0	0
2634	227	"arg_1"	"bigint"	64	0	1
2635	227	"arg_2"	"bigint"	64	0	2
2636	228	"result"	"bigint"	64	0	0
2637	228	"arg_1"	"bigint"	64	0	1
2638	228	"arg_2"	"bigint"	64	0	2
2639	229	"result"	"month_interval"	32	0	0
2640	229	"arg_1"	"month_interval"	32	0	1
2641	229	"arg_2"	"bigint"	64	0	2
2642	230	"result"	"month_interval"	32	0	0
2643	230	"arg_1"	"month_interval"	32	0	1
2644	230	"arg_2"	"bigint"	64	0	2
2645	231	"result"	"month_interval"	32	0	0
2646	231	"arg_1"	"month_interval"	32	0	1
2647	231	"arg_2"	"bigint"	64	0	2
2648	232	"result"	"month_interval"	32	0	0
2649	232	"arg_1"	"month_interval"	32	0	1
2650	232	"arg_2"	"bigint"	64	0	2
2651	233	"result"	"sec_interval"	19	0	0
2652	233	"arg_1"	"sec_interval"	19	0	1
2653	233	"arg_2"	"bigint"	64	0	2
2654	234	"result"	"sec_interval"	19	0	0
2655	234	"arg_1"	"sec_interval"	19	0	1
2656	234	"arg_2"	"bigint"	64	0	2
2657	235	"result"	"sec_interval"	19	0	0
2658	235	"arg_1"	"sec_interval"	19	0	1
2659	235	"arg_2"	"bigint"	64	0	2
2660	236	"result"	"sec_interval"	19	0	0
2661	236	"arg_1"	"sec_interval"	19	0	1
2662	236	"arg_2"	"bigint"	64	0	2
2663	237	"result"	"wrd"	64	0	0
2664	237	"arg_1"	"wrd"	64	0	1
2665	237	"arg_2"	"wrd"	64	0	2
2666	238	"result"	"wrd"	64	0	0
2667	238	"arg_1"	"wrd"	64	0	1
2668	238	"arg_2"	"wrd"	64	0	2
2669	239	"result"	"wrd"	64	0	0
2670	239	"arg_1"	"wrd"	64	0	1
2671	239	"arg_2"	"wrd"	64	0	2
2672	240	"result"	"wrd"	64	0	0
2673	240	"arg_1"	"wrd"	64	0	1
2674	240	"arg_2"	"wrd"	64	0	2
2675	241	"result"	"wrd"	64	0	0
2676	241	"arg_1"	"wrd"	64	0	1
2677	241	"arg_2"	"wrd"	64	0	2
2678	242	"result"	"wrd"	64	0	0
2679	242	"arg_1"	"wrd"	64	0	1
2680	242	"arg_2"	"wrd"	64	0	2
2681	243	"result"	"wrd"	64	0	0
2682	243	"arg_1"	"wrd"	64	0	1
2683	243	"arg_2"	"wrd"	64	0	2
2684	244	"result"	"wrd"	64	0	0
2685	244	"arg_1"	"wrd"	64	0	1
2686	245	"result"	"wrd"	64	0	0
2687	245	"arg_1"	"wrd"	64	0	1
2688	245	"arg_2"	"int"	32	0	2
2689	246	"result"	"wrd"	64	0	0
2690	246	"arg_1"	"wrd"	64	0	1
2691	246	"arg_2"	"int"	32	0	2
2692	247	"result"	"wrd"	64	0	0
2693	247	"arg_1"	"wrd"	64	0	1
2694	248	"result"	"wrd"	64	0	0
2695	248	"arg_1"	"wrd"	64	0	1
2696	249	"result"	"tinyint"	8	0	0
2697	249	"arg_1"	"wrd"	64	0	1
2698	250	"result"	"wrd"	64	0	0
2699	250	"arg_1"	"wrd"	64	0	1
2700	250	"arg_2"	"wrd"	64	0	2
2701	251	"result"	"wrd"	64	0	0
2702	251	"arg_1"	"wrd"	64	0	1
2703	251	"arg_2"	"wrd"	64	0	2
2704	252	"result"	"month_interval"	32	0	0
2705	252	"arg_1"	"month_interval"	32	0	1
2706	252	"arg_2"	"wrd"	64	0	2
2707	253	"result"	"month_interval"	32	0	0
2708	253	"arg_1"	"month_interval"	32	0	1
2709	253	"arg_2"	"wrd"	64	0	2
2710	254	"result"	"month_interval"	32	0	0
2711	254	"arg_1"	"month_interval"	32	0	1
2712	254	"arg_2"	"wrd"	64	0	2
2713	255	"result"	"month_interval"	32	0	0
2714	255	"arg_1"	"month_interval"	32	0	1
2715	255	"arg_2"	"wrd"	64	0	2
2716	256	"result"	"sec_interval"	19	0	0
2717	256	"arg_1"	"sec_interval"	19	0	1
2718	256	"arg_2"	"wrd"	64	0	2
2719	257	"result"	"sec_interval"	19	0	0
2720	257	"arg_1"	"sec_interval"	19	0	1
2721	257	"arg_2"	"wrd"	64	0	2
2722	258	"result"	"sec_interval"	19	0	0
2723	258	"arg_1"	"sec_interval"	19	0	1
2724	258	"arg_2"	"wrd"	64	0	2
2725	259	"result"	"sec_interval"	19	0	0
2726	259	"arg_1"	"sec_interval"	19	0	1
2727	259	"arg_2"	"wrd"	64	0	2
2728	260	"result"	"hugeint"	128	0	0
2729	260	"arg_1"	"hugeint"	128	0	1
2730	260	"arg_2"	"hugeint"	128	0	2
2731	261	"result"	"hugeint"	128	0	0
2732	261	"arg_1"	"hugeint"	128	0	1
2733	261	"arg_2"	"hugeint"	128	0	2
2734	262	"result"	"hugeint"	128	0	0
2735	262	"arg_1"	"hugeint"	128	0	1
2736	262	"arg_2"	"hugeint"	128	0	2
2737	263	"result"	"hugeint"	128	0	0
2738	263	"arg_1"	"hugeint"	128	0	1
2739	263	"arg_2"	"hugeint"	128	0	2
2740	264	"result"	"hugeint"	128	0	0
2741	264	"arg_1"	"hugeint"	128	0	1
2742	264	"arg_2"	"hugeint"	128	0	2
2743	265	"result"	"hugeint"	128	0	0
2744	265	"arg_1"	"hugeint"	128	0	1
2745	265	"arg_2"	"hugeint"	128	0	2
2746	266	"result"	"hugeint"	128	0	0
2747	266	"arg_1"	"hugeint"	128	0	1
2748	266	"arg_2"	"hugeint"	128	0	2
2749	267	"result"	"hugeint"	128	0	0
2750	267	"arg_1"	"hugeint"	128	0	1
2751	268	"result"	"hugeint"	128	0	0
2752	268	"arg_1"	"hugeint"	128	0	1
2753	268	"arg_2"	"int"	32	0	2
2754	269	"result"	"hugeint"	128	0	0
2755	269	"arg_1"	"hugeint"	128	0	1
2756	269	"arg_2"	"int"	32	0	2
2757	270	"result"	"hugeint"	128	0	0
2758	270	"arg_1"	"hugeint"	128	0	1
2759	271	"result"	"hugeint"	128	0	0
2760	271	"arg_1"	"hugeint"	128	0	1
2761	272	"result"	"tinyint"	8	0	0
2762	272	"arg_1"	"hugeint"	128	0	1
2763	273	"result"	"hugeint"	128	0	0
2764	273	"arg_1"	"hugeint"	128	0	1
2765	273	"arg_2"	"hugeint"	128	0	2
2766	274	"result"	"hugeint"	128	0	0
2767	274	"arg_1"	"hugeint"	128	0	1
2768	274	"arg_2"	"hugeint"	128	0	2
2769	275	"result"	"month_interval"	32	0	0
2770	275	"arg_1"	"month_interval"	32	0	1
2771	275	"arg_2"	"hugeint"	128	0	2
2772	276	"result"	"month_interval"	32	0	0
2773	276	"arg_1"	"month_interval"	32	0	1
2774	276	"arg_2"	"hugeint"	128	0	2
2775	277	"result"	"month_interval"	32	0	0
2776	277	"arg_1"	"month_interval"	32	0	1
2777	277	"arg_2"	"hugeint"	128	0	2
2778	278	"result"	"month_interval"	32	0	0
2779	278	"arg_1"	"month_interval"	32	0	1
2780	278	"arg_2"	"hugeint"	128	0	2
2781	279	"result"	"sec_interval"	19	0	0
2782	279	"arg_1"	"sec_interval"	19	0	1
2783	279	"arg_2"	"hugeint"	128	0	2
2784	280	"result"	"sec_interval"	19	0	0
2785	280	"arg_1"	"sec_interval"	19	0	1
2786	280	"arg_2"	"hugeint"	128	0	2
2787	281	"result"	"sec_interval"	19	0	0
2788	281	"arg_1"	"sec_interval"	19	0	1
2789	281	"arg_2"	"hugeint"	128	0	2
2790	282	"result"	"sec_interval"	19	0	0
2791	282	"arg_1"	"sec_interval"	19	0	1
2792	282	"arg_2"	"hugeint"	128	0	2
2793	283	"result"	"decimal"	2	0	0
2794	283	"arg_1"	"decimal"	2	0	1
2795	283	"arg_2"	"decimal"	2	0	2
2796	284	"result"	"decimal"	2	0	0
2797	284	"arg_1"	"decimal"	2	0	1
2798	284	"arg_2"	"decimal"	2	0	2
2799	285	"result"	"decimal"	2	0	0
2800	285	"arg_1"	"decimal"	2	0	1
2801	285	"arg_2"	"decimal"	2	0	2
2802	286	"result"	"decimal"	2	0	0
2803	286	"arg_1"	"decimal"	2	0	1
2804	286	"arg_2"	"decimal"	2	0	2
2805	287	"result"	"decimal"	2	0	0
2806	287	"arg_1"	"decimal"	2	0	1
2807	287	"arg_2"	"decimal"	2	0	2
2808	288	"result"	"decimal"	2	0	0
2809	288	"arg_1"	"decimal"	2	0	1
2810	288	"arg_2"	"decimal"	2	0	2
2811	289	"result"	"decimal"	2	0	0
2812	289	"arg_1"	"decimal"	2	0	1
2813	289	"arg_2"	"decimal"	2	0	2
2814	290	"result"	"decimal"	2	0	0
2815	290	"arg_1"	"decimal"	2	0	1
2816	291	"result"	"decimal"	2	0	0
2817	291	"arg_1"	"decimal"	2	0	1
2818	291	"arg_2"	"int"	32	0	2
2819	292	"result"	"decimal"	2	0	0
2820	292	"arg_1"	"decimal"	2	0	1
2821	292	"arg_2"	"int"	32	0	2
2822	293	"result"	"decimal"	2	0	0
2823	293	"arg_1"	"decimal"	2	0	1
2824	294	"result"	"decimal"	2	0	0
2825	294	"arg_1"	"decimal"	2	0	1
2826	295	"result"	"tinyint"	8	0	0
2827	295	"arg_1"	"decimal"	2	0	1
2828	296	"result"	"decimal"	2	0	0
2829	296	"arg_1"	"decimal"	2	0	1
2830	296	"arg_2"	"tinyint"	8	0	2
2831	297	"result"	"decimal"	2	0	0
2832	297	"arg_1"	"decimal"	2	0	1
2833	297	"arg_2"	"tinyint"	8	0	2
2834	298	"result"	"month_interval"	32	0	0
2835	298	"arg_1"	"month_interval"	32	0	1
2836	298	"arg_2"	"decimal"	2	0	2
2837	299	"result"	"month_interval"	32	0	0
2838	299	"arg_1"	"month_interval"	32	0	1
2839	299	"arg_2"	"decimal"	2	0	2
2840	300	"result"	"month_interval"	32	0	0
2841	300	"arg_1"	"month_interval"	32	0	1
2842	300	"arg_2"	"decimal"	2	0	2
2843	301	"result"	"month_interval"	32	0	0
2844	301	"arg_1"	"month_interval"	32	0	1
2845	301	"arg_2"	"decimal"	2	0	2
2846	302	"result"	"sec_interval"	19	0	0
2847	302	"arg_1"	"sec_interval"	19	0	1
2848	302	"arg_2"	"decimal"	2	0	2
2849	303	"result"	"sec_interval"	19	0	0
2850	303	"arg_1"	"sec_interval"	19	0	1
2851	303	"arg_2"	"decimal"	2	0	2
2852	304	"result"	"sec_interval"	19	0	0
2853	304	"arg_1"	"sec_interval"	19	0	1
2854	304	"arg_2"	"decimal"	2	0	2
2855	305	"result"	"sec_interval"	19	0	0
2856	305	"arg_1"	"sec_interval"	19	0	1
2857	305	"arg_2"	"decimal"	2	0	2
2858	306	"result"	"decimal"	4	0	0
2859	306	"arg_1"	"decimal"	4	0	1
2860	306	"arg_2"	"decimal"	4	0	2
2861	307	"result"	"decimal"	4	0	0
2862	307	"arg_1"	"decimal"	4	0	1
2863	307	"arg_2"	"decimal"	4	0	2
2864	308	"result"	"decimal"	4	0	0
2865	308	"arg_1"	"decimal"	4	0	1
2866	308	"arg_2"	"decimal"	4	0	2
2867	309	"result"	"decimal"	4	0	0
2868	309	"arg_1"	"decimal"	4	0	1
2869	309	"arg_2"	"decimal"	4	0	2
2870	310	"result"	"decimal"	4	0	0
2871	310	"arg_1"	"decimal"	4	0	1
2872	310	"arg_2"	"decimal"	4	0	2
2873	311	"result"	"decimal"	4	0	0
2874	311	"arg_1"	"decimal"	4	0	1
2875	311	"arg_2"	"decimal"	4	0	2
2876	312	"result"	"decimal"	4	0	0
2877	312	"arg_1"	"decimal"	4	0	1
2878	312	"arg_2"	"decimal"	4	0	2
2879	313	"result"	"decimal"	4	0	0
2880	313	"arg_1"	"decimal"	4	0	1
2881	314	"result"	"decimal"	4	0	0
2882	314	"arg_1"	"decimal"	4	0	1
2883	314	"arg_2"	"int"	32	0	2
2884	315	"result"	"decimal"	4	0	0
2885	315	"arg_1"	"decimal"	4	0	1
2886	315	"arg_2"	"int"	32	0	2
2887	316	"result"	"decimal"	4	0	0
2888	316	"arg_1"	"decimal"	4	0	1
2889	317	"result"	"decimal"	4	0	0
2890	317	"arg_1"	"decimal"	4	0	1
2891	318	"result"	"tinyint"	8	0	0
2892	318	"arg_1"	"decimal"	4	0	1
2893	319	"result"	"decimal"	4	0	0
2894	319	"arg_1"	"decimal"	4	0	1
2895	319	"arg_2"	"smallint"	16	0	2
2896	320	"result"	"decimal"	4	0	0
2897	320	"arg_1"	"decimal"	4	0	1
2898	320	"arg_2"	"smallint"	16	0	2
2899	321	"result"	"month_interval"	32	0	0
2900	321	"arg_1"	"month_interval"	32	0	1
2901	321	"arg_2"	"decimal"	4	0	2
2902	322	"result"	"month_interval"	32	0	0
2903	322	"arg_1"	"month_interval"	32	0	1
2904	322	"arg_2"	"decimal"	4	0	2
2905	323	"result"	"month_interval"	32	0	0
2906	323	"arg_1"	"month_interval"	32	0	1
2907	323	"arg_2"	"decimal"	4	0	2
2908	324	"result"	"month_interval"	32	0	0
2909	324	"arg_1"	"month_interval"	32	0	1
2910	324	"arg_2"	"decimal"	4	0	2
2911	325	"result"	"sec_interval"	19	0	0
2912	325	"arg_1"	"sec_interval"	19	0	1
2913	325	"arg_2"	"decimal"	4	0	2
2914	326	"result"	"sec_interval"	19	0	0
2915	326	"arg_1"	"sec_interval"	19	0	1
2916	326	"arg_2"	"decimal"	4	0	2
2917	327	"result"	"sec_interval"	19	0	0
2918	327	"arg_1"	"sec_interval"	19	0	1
2919	327	"arg_2"	"decimal"	4	0	2
2920	328	"result"	"sec_interval"	19	0	0
2921	328	"arg_1"	"sec_interval"	19	0	1
2922	328	"arg_2"	"decimal"	4	0	2
2923	329	"result"	"decimal"	9	0	0
2924	329	"arg_1"	"decimal"	9	0	1
2925	329	"arg_2"	"decimal"	9	0	2
2926	330	"result"	"decimal"	9	0	0
2927	330	"arg_1"	"decimal"	9	0	1
2928	330	"arg_2"	"decimal"	9	0	2
2929	331	"result"	"decimal"	9	0	0
2930	331	"arg_1"	"decimal"	9	0	1
2931	331	"arg_2"	"decimal"	9	0	2
2932	332	"result"	"decimal"	9	0	0
2933	332	"arg_1"	"decimal"	9	0	1
2934	332	"arg_2"	"decimal"	9	0	2
2935	333	"result"	"decimal"	9	0	0
2936	333	"arg_1"	"decimal"	9	0	1
2937	333	"arg_2"	"decimal"	9	0	2
2938	334	"result"	"decimal"	9	0	0
2939	334	"arg_1"	"decimal"	9	0	1
2940	334	"arg_2"	"decimal"	9	0	2
2941	335	"result"	"decimal"	9	0	0
2942	335	"arg_1"	"decimal"	9	0	1
2943	335	"arg_2"	"decimal"	9	0	2
2944	336	"result"	"decimal"	9	0	0
2945	336	"arg_1"	"decimal"	9	0	1
2946	337	"result"	"decimal"	9	0	0
2947	337	"arg_1"	"decimal"	9	0	1
2948	337	"arg_2"	"int"	32	0	2
2949	338	"result"	"decimal"	9	0	0
2950	338	"arg_1"	"decimal"	9	0	1
2951	338	"arg_2"	"int"	32	0	2
2952	339	"result"	"decimal"	9	0	0
2953	339	"arg_1"	"decimal"	9	0	1
2954	340	"result"	"decimal"	9	0	0
2955	340	"arg_1"	"decimal"	9	0	1
2956	341	"result"	"tinyint"	8	0	0
2957	341	"arg_1"	"decimal"	9	0	1
2958	342	"result"	"decimal"	9	0	0
2959	342	"arg_1"	"decimal"	9	0	1
2960	342	"arg_2"	"int"	32	0	2
2961	343	"result"	"decimal"	9	0	0
2962	343	"arg_1"	"decimal"	9	0	1
2963	343	"arg_2"	"int"	32	0	2
2964	344	"result"	"month_interval"	32	0	0
2965	344	"arg_1"	"month_interval"	32	0	1
2966	344	"arg_2"	"decimal"	9	0	2
2967	345	"result"	"month_interval"	32	0	0
2968	345	"arg_1"	"month_interval"	32	0	1
2969	345	"arg_2"	"decimal"	9	0	2
2970	346	"result"	"month_interval"	32	0	0
2971	346	"arg_1"	"month_interval"	32	0	1
2972	346	"arg_2"	"decimal"	9	0	2
2973	347	"result"	"month_interval"	32	0	0
2974	347	"arg_1"	"month_interval"	32	0	1
2975	347	"arg_2"	"decimal"	9	0	2
2976	348	"result"	"sec_interval"	19	0	0
2977	348	"arg_1"	"sec_interval"	19	0	1
2978	348	"arg_2"	"decimal"	9	0	2
2979	349	"result"	"sec_interval"	19	0	0
2980	349	"arg_1"	"sec_interval"	19	0	1
2981	349	"arg_2"	"decimal"	9	0	2
2982	350	"result"	"sec_interval"	19	0	0
2983	350	"arg_1"	"sec_interval"	19	0	1
2984	350	"arg_2"	"decimal"	9	0	2
2985	351	"result"	"sec_interval"	19	0	0
2986	351	"arg_1"	"sec_interval"	19	0	1
2987	351	"arg_2"	"decimal"	9	0	2
2988	352	"result"	"decimal"	18	0	0
2989	352	"arg_1"	"decimal"	18	0	1
2990	352	"arg_2"	"decimal"	18	0	2
2991	353	"result"	"decimal"	18	0	0
2992	353	"arg_1"	"decimal"	18	0	1
2993	353	"arg_2"	"decimal"	18	0	2
2994	354	"result"	"decimal"	18	0	0
2995	354	"arg_1"	"decimal"	18	0	1
2996	354	"arg_2"	"decimal"	18	0	2
2997	355	"result"	"decimal"	18	0	0
2998	355	"arg_1"	"decimal"	18	0	1
2999	355	"arg_2"	"decimal"	18	0	2
3000	356	"result"	"decimal"	18	0	0
3001	356	"arg_1"	"decimal"	18	0	1
3002	356	"arg_2"	"decimal"	18	0	2
3003	357	"result"	"decimal"	18	0	0
3004	357	"arg_1"	"decimal"	18	0	1
3005	357	"arg_2"	"decimal"	18	0	2
3006	358	"result"	"decimal"	18	0	0
3007	358	"arg_1"	"decimal"	18	0	1
3008	358	"arg_2"	"decimal"	18	0	2
3009	359	"result"	"decimal"	18	0	0
3010	359	"arg_1"	"decimal"	18	0	1
3011	360	"result"	"decimal"	18	0	0
3012	360	"arg_1"	"decimal"	18	0	1
3013	360	"arg_2"	"int"	32	0	2
3014	361	"result"	"decimal"	18	0	0
3015	361	"arg_1"	"decimal"	18	0	1
3016	361	"arg_2"	"int"	32	0	2
3017	362	"result"	"decimal"	18	0	0
3018	362	"arg_1"	"decimal"	18	0	1
3019	363	"result"	"decimal"	18	0	0
3020	363	"arg_1"	"decimal"	18	0	1
3021	364	"result"	"tinyint"	8	0	0
3022	364	"arg_1"	"decimal"	18	0	1
3023	365	"result"	"decimal"	18	0	0
3024	365	"arg_1"	"decimal"	18	0	1
3025	365	"arg_2"	"bigint"	64	0	2
3026	366	"result"	"decimal"	18	0	0
3027	366	"arg_1"	"decimal"	18	0	1
3028	366	"arg_2"	"bigint"	64	0	2
3029	367	"result"	"month_interval"	32	0	0
3030	367	"arg_1"	"month_interval"	32	0	1
3031	367	"arg_2"	"decimal"	18	0	2
3032	368	"result"	"month_interval"	32	0	0
3033	368	"arg_1"	"month_interval"	32	0	1
3034	368	"arg_2"	"decimal"	18	0	2
3035	369	"result"	"month_interval"	32	0	0
3036	369	"arg_1"	"month_interval"	32	0	1
3037	369	"arg_2"	"decimal"	18	0	2
3038	370	"result"	"month_interval"	32	0	0
3039	370	"arg_1"	"month_interval"	32	0	1
3040	370	"arg_2"	"decimal"	18	0	2
3041	371	"result"	"sec_interval"	19	0	0
3042	371	"arg_1"	"sec_interval"	19	0	1
3043	371	"arg_2"	"decimal"	18	0	2
3044	372	"result"	"sec_interval"	19	0	0
3045	372	"arg_1"	"sec_interval"	19	0	1
3046	372	"arg_2"	"decimal"	18	0	2
3047	373	"result"	"sec_interval"	19	0	0
3048	373	"arg_1"	"sec_interval"	19	0	1
3049	373	"arg_2"	"decimal"	18	0	2
3050	374	"result"	"sec_interval"	19	0	0
3051	374	"arg_1"	"sec_interval"	19	0	1
3052	374	"arg_2"	"decimal"	18	0	2
3053	375	"result"	"decimal"	39	0	0
3054	375	"arg_1"	"decimal"	39	0	1
3055	375	"arg_2"	"decimal"	39	0	2
3056	376	"result"	"decimal"	39	0	0
3057	376	"arg_1"	"decimal"	39	0	1
3058	376	"arg_2"	"decimal"	39	0	2
3059	377	"result"	"decimal"	39	0	0
3060	377	"arg_1"	"decimal"	39	0	1
3061	377	"arg_2"	"decimal"	39	0	2
3062	378	"result"	"decimal"	39	0	0
3063	378	"arg_1"	"decimal"	39	0	1
3064	378	"arg_2"	"decimal"	39	0	2
3065	379	"result"	"decimal"	39	0	0
3066	379	"arg_1"	"decimal"	39	0	1
3067	379	"arg_2"	"decimal"	39	0	2
3068	380	"result"	"decimal"	39	0	0
3069	380	"arg_1"	"decimal"	39	0	1
3070	380	"arg_2"	"decimal"	39	0	2
3071	381	"result"	"decimal"	39	0	0
3072	381	"arg_1"	"decimal"	39	0	1
3073	381	"arg_2"	"decimal"	39	0	2
3074	382	"result"	"decimal"	39	0	0
3075	382	"arg_1"	"decimal"	39	0	1
3076	383	"result"	"decimal"	39	0	0
3077	383	"arg_1"	"decimal"	39	0	1
3078	383	"arg_2"	"int"	32	0	2
3079	384	"result"	"decimal"	39	0	0
3080	384	"arg_1"	"decimal"	39	0	1
3081	384	"arg_2"	"int"	32	0	2
3082	385	"result"	"decimal"	39	0	0
3083	385	"arg_1"	"decimal"	39	0	1
3084	386	"result"	"decimal"	39	0	0
3085	386	"arg_1"	"decimal"	39	0	1
3086	387	"result"	"tinyint"	8	0	0
3087	387	"arg_1"	"decimal"	39	0	1
3088	388	"result"	"decimal"	39	0	0
3089	388	"arg_1"	"decimal"	39	0	1
3090	388	"arg_2"	"hugeint"	128	0	2
3091	389	"result"	"decimal"	39	0	0
3092	389	"arg_1"	"decimal"	39	0	1
3093	389	"arg_2"	"hugeint"	128	0	2
3094	390	"result"	"month_interval"	32	0	0
3095	390	"arg_1"	"month_interval"	32	0	1
3096	390	"arg_2"	"decimal"	39	0	2
3097	391	"result"	"month_interval"	32	0	0
3098	391	"arg_1"	"month_interval"	32	0	1
3099	391	"arg_2"	"decimal"	39	0	2
3100	392	"result"	"month_interval"	32	0	0
3101	392	"arg_1"	"month_interval"	32	0	1
3102	392	"arg_2"	"decimal"	39	0	2
3103	393	"result"	"month_interval"	32	0	0
3104	393	"arg_1"	"month_interval"	32	0	1
3105	393	"arg_2"	"decimal"	39	0	2
3106	394	"result"	"sec_interval"	19	0	0
3107	394	"arg_1"	"sec_interval"	19	0	1
3108	394	"arg_2"	"decimal"	39	0	2
3109	395	"result"	"sec_interval"	19	0	0
3110	395	"arg_1"	"sec_interval"	19	0	1
3111	395	"arg_2"	"decimal"	39	0	2
3112	396	"result"	"sec_interval"	19	0	0
3113	396	"arg_1"	"sec_interval"	19	0	1
3114	396	"arg_2"	"decimal"	39	0	2
3115	397	"result"	"sec_interval"	19	0	0
3116	397	"arg_1"	"sec_interval"	19	0	1
3117	397	"arg_2"	"decimal"	39	0	2
3118	398	"result"	"real"	24	0	0
3119	398	"arg_1"	"real"	24	0	1
3120	398	"arg_2"	"real"	24	0	2
3121	399	"result"	"real"	24	0	0
3122	399	"arg_1"	"real"	24	0	1
3123	399	"arg_2"	"real"	24	0	2
3124	400	"result"	"real"	24	0	0
3125	400	"arg_1"	"real"	24	0	1
3126	400	"arg_2"	"real"	24	0	2
3127	401	"result"	"real"	24	0	0
3128	401	"arg_1"	"real"	24	0	1
3129	401	"arg_2"	"real"	24	0	2
3130	402	"result"	"real"	24	0	0
3131	402	"arg_1"	"real"	24	0	1
3132	403	"result"	"real"	24	0	0
3133	403	"arg_1"	"real"	24	0	1
3134	404	"result"	"tinyint"	8	0	0
3135	404	"arg_1"	"real"	24	0	1
3136	405	"result"	"real"	24	0	0
3137	405	"arg_1"	"real"	24	0	1
3138	405	"arg_2"	"real"	24	0	2
3139	406	"result"	"real"	24	0	0
3140	406	"arg_1"	"real"	24	0	1
3141	406	"arg_2"	"real"	24	0	2
3142	407	"result"	"month_interval"	32	0	0
3143	407	"arg_1"	"month_interval"	32	0	1
3144	407	"arg_2"	"real"	24	0	2
3145	408	"result"	"month_interval"	32	0	0
3146	408	"arg_1"	"month_interval"	32	0	1
3147	408	"arg_2"	"real"	24	0	2
3148	409	"result"	"month_interval"	32	0	0
3149	409	"arg_1"	"month_interval"	32	0	1
3150	409	"arg_2"	"real"	24	0	2
3151	410	"result"	"month_interval"	32	0	0
3152	410	"arg_1"	"month_interval"	32	0	1
3153	410	"arg_2"	"real"	24	0	2
3154	411	"result"	"sec_interval"	19	0	0
3155	411	"arg_1"	"sec_interval"	19	0	1
3156	411	"arg_2"	"real"	24	0	2
3157	412	"result"	"sec_interval"	19	0	0
3158	412	"arg_1"	"sec_interval"	19	0	1
3159	412	"arg_2"	"real"	24	0	2
3160	413	"result"	"sec_interval"	19	0	0
3161	413	"arg_1"	"sec_interval"	19	0	1
3162	413	"arg_2"	"real"	24	0	2
3163	414	"result"	"sec_interval"	19	0	0
3164	414	"arg_1"	"sec_interval"	19	0	1
3165	414	"arg_2"	"real"	24	0	2
3166	415	"result"	"double"	53	0	0
3167	415	"arg_1"	"double"	53	0	1
3168	415	"arg_2"	"double"	53	0	2
3169	416	"result"	"double"	53	0	0
3170	416	"arg_1"	"double"	53	0	1
3171	416	"arg_2"	"double"	53	0	2
3172	417	"result"	"double"	53	0	0
3173	417	"arg_1"	"double"	53	0	1
3174	417	"arg_2"	"double"	53	0	2
3175	418	"result"	"double"	53	0	0
3176	418	"arg_1"	"double"	53	0	1
3177	418	"arg_2"	"double"	53	0	2
3178	419	"result"	"double"	53	0	0
3179	419	"arg_1"	"double"	53	0	1
3180	420	"result"	"double"	53	0	0
3181	420	"arg_1"	"double"	53	0	1
3182	421	"result"	"tinyint"	8	0	0
3183	421	"arg_1"	"double"	53	0	1
3184	422	"result"	"double"	53	0	0
3185	422	"arg_1"	"double"	53	0	1
3186	422	"arg_2"	"double"	53	0	2
3187	423	"result"	"double"	53	0	0
3188	423	"arg_1"	"double"	53	0	1
3189	423	"arg_2"	"double"	53	0	2
3190	424	"result"	"month_interval"	32	0	0
3191	424	"arg_1"	"month_interval"	32	0	1
3192	424	"arg_2"	"double"	53	0	2
3193	425	"result"	"month_interval"	32	0	0
3194	425	"arg_1"	"month_interval"	32	0	1
3195	425	"arg_2"	"double"	53	0	2
3196	426	"result"	"month_interval"	32	0	0
3197	426	"arg_1"	"month_interval"	32	0	1
3198	426	"arg_2"	"double"	53	0	2
3199	427	"result"	"month_interval"	32	0	0
3200	427	"arg_1"	"month_interval"	32	0	1
3201	427	"arg_2"	"double"	53	0	2
3202	428	"result"	"sec_interval"	19	0	0
3203	428	"arg_1"	"sec_interval"	19	0	1
3204	428	"arg_2"	"double"	53	0	2
3205	429	"result"	"sec_interval"	19	0	0
3206	429	"arg_1"	"sec_interval"	19	0	1
3207	429	"arg_2"	"double"	53	0	2
3208	430	"result"	"sec_interval"	19	0	0
3209	430	"arg_1"	"sec_interval"	19	0	1
3210	430	"arg_2"	"double"	53	0	2
3211	431	"result"	"sec_interval"	19	0	0
3212	431	"arg_1"	"sec_interval"	19	0	1
3213	431	"arg_2"	"double"	53	0	2
3214	432	"result"	"month_interval"	32	0	0
3215	432	"arg_1"	"month_interval"	32	0	1
3216	432	"arg_2"	"month_interval"	32	0	2
3217	433	"result"	"month_interval"	32	0	0
3218	433	"arg_1"	"month_interval"	32	0	1
3219	433	"arg_2"	"month_interval"	32	0	2
3220	434	"result"	"month_interval"	32	0	0
3221	434	"arg_1"	"month_interval"	32	0	1
3222	434	"arg_2"	"month_interval"	32	0	2
3223	435	"result"	"month_interval"	32	0	0
3224	435	"arg_1"	"month_interval"	32	0	1
3225	435	"arg_2"	"month_interval"	32	0	2
3226	436	"result"	"month_interval"	32	0	0
3227	436	"arg_1"	"month_interval"	32	0	1
3228	437	"result"	"month_interval"	32	0	0
3229	437	"arg_1"	"month_interval"	32	0	1
3230	438	"result"	"tinyint"	8	0	0
3231	438	"arg_1"	"month_interval"	32	0	1
3232	439	"result"	"month_interval"	32	0	0
3233	439	"arg_1"	"month_interval"	32	0	1
3234	439	"arg_2"	"int"	32	0	2
3235	440	"result"	"month_interval"	32	0	0
3236	440	"arg_1"	"month_interval"	32	0	1
3237	440	"arg_2"	"int"	32	0	2
3238	441	"result"	"sec_interval"	19	0	0
3239	441	"arg_1"	"sec_interval"	19	0	1
3240	441	"arg_2"	"sec_interval"	19	0	2
3241	442	"result"	"sec_interval"	19	0	0
3242	442	"arg_1"	"sec_interval"	19	0	1
3243	442	"arg_2"	"sec_interval"	19	0	2
3244	443	"result"	"sec_interval"	19	0	0
3245	443	"arg_1"	"sec_interval"	19	0	1
3246	443	"arg_2"	"sec_interval"	19	0	2
3247	444	"result"	"sec_interval"	19	0	0
3248	444	"arg_1"	"sec_interval"	19	0	1
3249	444	"arg_2"	"sec_interval"	19	0	2
3250	445	"result"	"sec_interval"	19	0	0
3251	445	"arg_1"	"sec_interval"	19	0	1
3252	446	"result"	"sec_interval"	19	0	0
3253	446	"arg_1"	"sec_interval"	19	0	1
3254	447	"result"	"tinyint"	8	0	0
3255	447	"arg_1"	"sec_interval"	19	0	1
3256	448	"result"	"sec_interval"	19	0	0
3257	448	"arg_1"	"sec_interval"	19	0	1
3258	448	"arg_2"	"bigint"	64	0	2
3259	449	"result"	"sec_interval"	19	0	0
3260	449	"arg_1"	"sec_interval"	19	0	1
3261	449	"arg_2"	"bigint"	64	0	2
3262	450	"result"	"decimal"	4	0	0
3263	450	"arg_1"	"decimal"	4	0	1
3264	450	"arg_2"	"tinyint"	8	0	2
3265	451	"result"	"decimal"	4	0	0
3266	451	"arg_1"	"tinyint"	8	0	1
3267	451	"arg_2"	"decimal"	4	0	2
3268	452	"result"	"decimal"	4	0	0
3269	452	"arg_1"	"decimal"	4	0	1
3270	452	"arg_2"	"decimal"	2	0	2
3271	453	"result"	"decimal"	4	0	0
3272	453	"arg_1"	"decimal"	2	0	1
3273	453	"arg_2"	"decimal"	4	0	2
3274	454	"result"	"decimal"	9	0	0
3275	454	"arg_1"	"decimal"	9	0	1
3276	454	"arg_2"	"tinyint"	8	0	2
3277	455	"result"	"decimal"	9	0	0
3278	455	"arg_1"	"tinyint"	8	0	1
3279	455	"arg_2"	"decimal"	9	0	2
3280	456	"result"	"decimal"	9	0	0
3281	456	"arg_1"	"decimal"	9	0	1
3282	456	"arg_2"	"smallint"	16	0	2
3283	457	"result"	"decimal"	9	0	0
3284	457	"arg_1"	"smallint"	16	0	1
3285	457	"arg_2"	"decimal"	9	0	2
3286	458	"result"	"decimal"	9	0	0
3287	458	"arg_1"	"decimal"	9	0	1
3288	458	"arg_2"	"decimal"	2	0	2
3289	459	"result"	"decimal"	9	0	0
3290	459	"arg_1"	"decimal"	2	0	1
3291	459	"arg_2"	"decimal"	9	0	2
3292	460	"result"	"decimal"	9	0	0
3293	460	"arg_1"	"decimal"	9	0	1
3294	460	"arg_2"	"decimal"	4	0	2
3295	461	"result"	"decimal"	9	0	0
3296	461	"arg_1"	"decimal"	4	0	1
3297	461	"arg_2"	"decimal"	9	0	2
3298	462	"result"	"decimal"	18	0	0
3299	462	"arg_1"	"decimal"	18	0	1
3300	462	"arg_2"	"tinyint"	8	0	2
3301	463	"result"	"decimal"	18	0	0
3302	463	"arg_1"	"tinyint"	8	0	1
3303	463	"arg_2"	"decimal"	18	0	2
3304	464	"result"	"decimal"	18	0	0
3305	464	"arg_1"	"decimal"	18	0	1
3306	464	"arg_2"	"smallint"	16	0	2
3307	465	"result"	"decimal"	18	0	0
3308	465	"arg_1"	"smallint"	16	0	1
3309	465	"arg_2"	"decimal"	18	0	2
3310	466	"result"	"decimal"	18	0	0
3311	466	"arg_1"	"decimal"	18	0	1
3312	466	"arg_2"	"int"	32	0	2
3313	467	"result"	"decimal"	18	0	0
3314	467	"arg_1"	"int"	32	0	1
3315	467	"arg_2"	"decimal"	18	0	2
3316	468	"result"	"decimal"	18	0	0
3317	468	"arg_1"	"decimal"	18	0	1
3318	468	"arg_2"	"wrd"	64	0	2
3319	469	"result"	"decimal"	18	0	0
3320	469	"arg_1"	"wrd"	64	0	1
3321	469	"arg_2"	"decimal"	18	0	2
3322	470	"result"	"decimal"	18	0	0
3323	470	"arg_1"	"decimal"	18	0	1
3324	470	"arg_2"	"decimal"	2	0	2
3325	471	"result"	"decimal"	18	0	0
3326	471	"arg_1"	"decimal"	2	0	1
3327	471	"arg_2"	"decimal"	18	0	2
3328	472	"result"	"decimal"	18	0	0
3329	472	"arg_1"	"decimal"	18	0	1
3330	472	"arg_2"	"decimal"	4	0	2
3331	473	"result"	"decimal"	18	0	0
3332	473	"arg_1"	"decimal"	4	0	1
3333	473	"arg_2"	"decimal"	18	0	2
3334	474	"result"	"decimal"	18	0	0
3335	474	"arg_1"	"decimal"	18	0	1
3336	474	"arg_2"	"decimal"	9	0	2
3337	475	"result"	"decimal"	18	0	0
3338	475	"arg_1"	"decimal"	9	0	1
3339	475	"arg_2"	"decimal"	18	0	2
3340	476	"result"	"decimal"	39	0	0
3341	476	"arg_1"	"decimal"	39	0	1
3342	476	"arg_2"	"tinyint"	8	0	2
3343	477	"result"	"decimal"	39	0	0
3344	477	"arg_1"	"tinyint"	8	0	1
3345	477	"arg_2"	"decimal"	39	0	2
3346	478	"result"	"decimal"	39	0	0
3347	478	"arg_1"	"decimal"	39	0	1
3348	478	"arg_2"	"smallint"	16	0	2
3349	479	"result"	"decimal"	39	0	0
3350	479	"arg_1"	"smallint"	16	0	1
3351	479	"arg_2"	"decimal"	39	0	2
3352	480	"result"	"decimal"	39	0	0
3353	480	"arg_1"	"decimal"	39	0	1
3354	480	"arg_2"	"int"	32	0	2
3355	481	"result"	"decimal"	39	0	0
3356	481	"arg_1"	"int"	32	0	1
3357	481	"arg_2"	"decimal"	39	0	2
3358	482	"result"	"decimal"	39	0	0
3359	482	"arg_1"	"decimal"	39	0	1
3360	482	"arg_2"	"bigint"	64	0	2
3361	483	"result"	"decimal"	39	0	0
3362	483	"arg_1"	"bigint"	64	0	1
3363	483	"arg_2"	"decimal"	39	0	2
3364	484	"result"	"decimal"	39	0	0
3365	484	"arg_1"	"decimal"	39	0	1
3366	484	"arg_2"	"wrd"	64	0	2
3367	485	"result"	"decimal"	39	0	0
3368	485	"arg_1"	"wrd"	64	0	1
3369	485	"arg_2"	"decimal"	39	0	2
3370	486	"result"	"decimal"	39	0	0
3371	486	"arg_1"	"decimal"	39	0	1
3372	486	"arg_2"	"decimal"	2	0	2
3373	487	"result"	"decimal"	39	0	0
3374	487	"arg_1"	"decimal"	2	0	1
3375	487	"arg_2"	"decimal"	39	0	2
3376	488	"result"	"decimal"	39	0	0
3377	488	"arg_1"	"decimal"	39	0	1
3378	488	"arg_2"	"decimal"	4	0	2
3379	489	"result"	"decimal"	39	0	0
3380	489	"arg_1"	"decimal"	4	0	1
3381	489	"arg_2"	"decimal"	39	0	2
3382	490	"result"	"decimal"	39	0	0
3383	490	"arg_1"	"decimal"	39	0	1
3384	490	"arg_2"	"decimal"	9	0	2
3385	491	"result"	"decimal"	39	0	0
3386	491	"arg_1"	"decimal"	9	0	1
3387	491	"arg_2"	"decimal"	39	0	2
3388	492	"result"	"decimal"	39	0	0
3389	492	"arg_1"	"decimal"	39	0	1
3390	492	"arg_2"	"decimal"	18	0	2
3391	493	"result"	"decimal"	39	0	0
3392	493	"arg_1"	"decimal"	18	0	1
3393	493	"arg_2"	"decimal"	39	0	2
3394	494	"result"	"decimal"	2	0	0
3395	494	"arg_1"	"decimal"	2	0	1
3396	494	"arg_2"	"tinyint"	8	0	2
3397	495	"result"	"decimal"	4	0	0
3398	495	"arg_1"	"decimal"	4	0	1
3399	495	"arg_2"	"tinyint"	8	0	2
3400	496	"result"	"decimal"	9	0	0
3401	496	"arg_1"	"decimal"	9	0	1
3402	496	"arg_2"	"tinyint"	8	0	2
3403	497	"result"	"decimal"	18	0	0
3404	497	"arg_1"	"decimal"	18	0	1
3405	497	"arg_2"	"tinyint"	8	0	2
3406	498	"result"	"decimal"	39	0	0
3407	498	"arg_1"	"decimal"	39	0	1
3408	498	"arg_2"	"tinyint"	8	0	2
3409	499	"result"	"real"	24	0	0
3410	499	"arg_1"	"real"	24	0	1
3411	499	"arg_2"	"tinyint"	8	0	2
3412	500	"result"	"double"	53	0	0
3413	500	"arg_1"	"double"	53	0	1
3414	500	"arg_2"	"tinyint"	8	0	2
3415	501	"result"	"tinyint"	8	0	0
3416	501	"arg_1"	"tinyint"	8	0	1
3417	501	"arg_2"	"tinyint"	8	0	2
3418	502	"result"	"tinyint"	8	0	0
3419	502	"arg_1"	"smallint"	16	0	1
3420	502	"arg_2"	"tinyint"	8	0	2
3421	503	"result"	"tinyint"	8	0	0
3422	503	"arg_1"	"int"	32	0	1
3423	503	"arg_2"	"tinyint"	8	0	2
3424	504	"result"	"tinyint"	8	0	0
3425	504	"arg_1"	"oid"	31	0	1
3426	504	"arg_2"	"tinyint"	8	0	2
3427	505	"result"	"tinyint"	8	0	0
3428	505	"arg_1"	"bigint"	64	0	1
3429	505	"arg_2"	"tinyint"	8	0	2
3430	506	"result"	"tinyint"	8	0	0
3431	506	"arg_1"	"wrd"	64	0	1
3432	506	"arg_2"	"tinyint"	8	0	2
3433	507	"result"	"tinyint"	8	0	0
3434	507	"arg_1"	"hugeint"	128	0	1
3435	507	"arg_2"	"tinyint"	8	0	2
3436	508	"result"	"tinyint"	8	0	0
3437	508	"arg_1"	"decimal"	2	0	1
3438	508	"arg_2"	"tinyint"	8	0	2
3439	509	"result"	"tinyint"	8	0	0
3440	509	"arg_1"	"decimal"	4	0	1
3441	509	"arg_2"	"tinyint"	8	0	2
3442	510	"result"	"tinyint"	8	0	0
3443	510	"arg_1"	"decimal"	9	0	1
3444	510	"arg_2"	"tinyint"	8	0	2
3445	511	"result"	"tinyint"	8	0	0
3446	511	"arg_1"	"decimal"	18	0	1
3447	511	"arg_2"	"tinyint"	8	0	2
3448	512	"result"	"tinyint"	8	0	0
3449	512	"arg_1"	"decimal"	39	0	1
3450	512	"arg_2"	"tinyint"	8	0	2
3451	513	"result"	"tinyint"	8	0	0
3452	513	"arg_1"	"real"	24	0	1
3453	513	"arg_2"	"tinyint"	8	0	2
3454	514	"result"	"tinyint"	8	0	0
3455	514	"arg_1"	"double"	53	0	1
3456	514	"arg_2"	"tinyint"	8	0	2
3457	515	"result"	"tinyint"	8	0	0
3458	515	"arg_1"	"month_interval"	32	0	1
3459	515	"arg_2"	"tinyint"	8	0	2
3460	516	"result"	"tinyint"	8	0	0
3461	516	"arg_1"	"sec_interval"	19	0	1
3462	516	"arg_2"	"tinyint"	8	0	2
3463	517	"result"	"tinyint"	8	0	0
3464	517	"arg_1"	"time"	7	0	1
3465	517	"arg_2"	"tinyint"	8	0	2
3466	518	"result"	"tinyint"	8	0	0
3467	518	"arg_1"	"timetz"	7	0	1
3468	518	"arg_2"	"tinyint"	8	0	2
3469	519	"result"	"tinyint"	8	0	0
3470	519	"arg_1"	"date"	0	0	1
3471	519	"arg_2"	"tinyint"	8	0	2
3472	520	"result"	"tinyint"	8	0	0
3473	520	"arg_1"	"timestamp"	7	0	1
3474	520	"arg_2"	"tinyint"	8	0	2
3475	521	"result"	"tinyint"	8	0	0
3476	521	"arg_1"	"timestamptz"	7	0	1
3477	521	"arg_2"	"tinyint"	8	0	2
3478	522	"result"	"tinyint"	8	0	0
3479	522	"arg_1"	"blob"	0	0	1
3480	522	"arg_2"	"tinyint"	8	0	2
3481	523	"result"	"smallint"	16	0	0
3482	523	"arg_1"	"tinyint"	8	0	1
3483	523	"arg_2"	"smallint"	16	0	2
3484	524	"result"	"smallint"	16	0	0
3485	524	"arg_1"	"smallint"	16	0	1
3486	524	"arg_2"	"smallint"	16	0	2
3487	525	"result"	"smallint"	16	0	0
3488	525	"arg_1"	"int"	32	0	1
3489	525	"arg_2"	"smallint"	16	0	2
3490	526	"result"	"smallint"	16	0	0
3491	526	"arg_1"	"oid"	31	0	1
3492	526	"arg_2"	"smallint"	16	0	2
3493	527	"result"	"smallint"	16	0	0
3494	527	"arg_1"	"bigint"	64	0	1
3495	527	"arg_2"	"smallint"	16	0	2
3496	528	"result"	"smallint"	16	0	0
3497	528	"arg_1"	"wrd"	64	0	1
3498	528	"arg_2"	"smallint"	16	0	2
3499	529	"result"	"smallint"	16	0	0
3500	529	"arg_1"	"hugeint"	128	0	1
3501	529	"arg_2"	"smallint"	16	0	2
3502	530	"result"	"smallint"	16	0	0
3503	530	"arg_1"	"decimal"	2	0	1
3504	530	"arg_2"	"smallint"	16	0	2
3505	531	"result"	"smallint"	16	0	0
3506	531	"arg_1"	"decimal"	4	0	1
3507	531	"arg_2"	"smallint"	16	0	2
3508	532	"result"	"smallint"	16	0	0
3509	532	"arg_1"	"decimal"	9	0	1
3510	532	"arg_2"	"smallint"	16	0	2
3511	533	"result"	"smallint"	16	0	0
3512	533	"arg_1"	"decimal"	18	0	1
3513	533	"arg_2"	"smallint"	16	0	2
3514	534	"result"	"smallint"	16	0	0
3515	534	"arg_1"	"decimal"	39	0	1
3516	534	"arg_2"	"smallint"	16	0	2
3517	535	"result"	"smallint"	16	0	0
3518	535	"arg_1"	"real"	24	0	1
3519	535	"arg_2"	"smallint"	16	0	2
3520	536	"result"	"smallint"	16	0	0
3521	536	"arg_1"	"double"	53	0	1
3522	536	"arg_2"	"smallint"	16	0	2
3523	537	"result"	"smallint"	16	0	0
3524	537	"arg_1"	"month_interval"	32	0	1
3525	537	"arg_2"	"smallint"	16	0	2
3526	538	"result"	"smallint"	16	0	0
3527	538	"arg_1"	"sec_interval"	19	0	1
3528	538	"arg_2"	"smallint"	16	0	2
3529	539	"result"	"smallint"	16	0	0
3530	539	"arg_1"	"time"	7	0	1
3531	539	"arg_2"	"smallint"	16	0	2
3532	540	"result"	"smallint"	16	0	0
3533	540	"arg_1"	"timetz"	7	0	1
3534	540	"arg_2"	"smallint"	16	0	2
3535	541	"result"	"smallint"	16	0	0
3536	541	"arg_1"	"date"	0	0	1
3537	541	"arg_2"	"smallint"	16	0	2
3538	542	"result"	"smallint"	16	0	0
3539	542	"arg_1"	"timestamp"	7	0	1
3540	542	"arg_2"	"smallint"	16	0	2
3541	543	"result"	"smallint"	16	0	0
3542	543	"arg_1"	"timestamptz"	7	0	1
3543	543	"arg_2"	"smallint"	16	0	2
3544	544	"result"	"smallint"	16	0	0
3545	544	"arg_1"	"blob"	0	0	1
3546	544	"arg_2"	"smallint"	16	0	2
3547	545	"result"	"int"	32	0	0
3548	545	"arg_1"	"tinyint"	8	0	1
3549	545	"arg_2"	"int"	32	0	2
3550	546	"result"	"int"	32	0	0
3551	546	"arg_1"	"smallint"	16	0	1
3552	546	"arg_2"	"int"	32	0	2
3553	547	"result"	"int"	32	0	0
3554	547	"arg_1"	"int"	32	0	1
3555	547	"arg_2"	"int"	32	0	2
3556	548	"result"	"int"	32	0	0
3557	548	"arg_1"	"oid"	31	0	1
3558	548	"arg_2"	"int"	32	0	2
3559	549	"result"	"int"	32	0	0
3560	549	"arg_1"	"bigint"	64	0	1
3561	549	"arg_2"	"int"	32	0	2
3562	550	"result"	"int"	32	0	0
3563	550	"arg_1"	"wrd"	64	0	1
3564	550	"arg_2"	"int"	32	0	2
3565	551	"result"	"int"	32	0	0
3566	551	"arg_1"	"hugeint"	128	0	1
3567	551	"arg_2"	"int"	32	0	2
3568	552	"result"	"int"	32	0	0
3569	552	"arg_1"	"decimal"	2	0	1
3570	552	"arg_2"	"int"	32	0	2
3571	553	"result"	"int"	32	0	0
3572	553	"arg_1"	"decimal"	4	0	1
3573	553	"arg_2"	"int"	32	0	2
3574	554	"result"	"int"	32	0	0
3575	554	"arg_1"	"decimal"	9	0	1
3576	554	"arg_2"	"int"	32	0	2
3577	555	"result"	"int"	32	0	0
3578	555	"arg_1"	"decimal"	18	0	1
3579	555	"arg_2"	"int"	32	0	2
3580	556	"result"	"int"	32	0	0
3581	556	"arg_1"	"decimal"	39	0	1
3582	556	"arg_2"	"int"	32	0	2
3583	557	"result"	"int"	32	0	0
3584	557	"arg_1"	"real"	24	0	1
3585	557	"arg_2"	"int"	32	0	2
3586	558	"result"	"int"	32	0	0
3587	558	"arg_1"	"double"	53	0	1
3588	558	"arg_2"	"int"	32	0	2
3589	559	"result"	"int"	32	0	0
3590	559	"arg_1"	"month_interval"	32	0	1
3591	559	"arg_2"	"int"	32	0	2
3592	560	"result"	"int"	32	0	0
3593	560	"arg_1"	"sec_interval"	19	0	1
3594	560	"arg_2"	"int"	32	0	2
3595	561	"result"	"int"	32	0	0
3596	561	"arg_1"	"time"	7	0	1
3597	561	"arg_2"	"int"	32	0	2
3598	562	"result"	"int"	32	0	0
3599	562	"arg_1"	"timetz"	7	0	1
3600	562	"arg_2"	"int"	32	0	2
3601	563	"result"	"int"	32	0	0
3602	563	"arg_1"	"date"	0	0	1
3603	563	"arg_2"	"int"	32	0	2
3604	564	"result"	"int"	32	0	0
3605	564	"arg_1"	"timestamp"	7	0	1
3606	564	"arg_2"	"int"	32	0	2
3607	565	"result"	"int"	32	0	0
3608	565	"arg_1"	"timestamptz"	7	0	1
3609	565	"arg_2"	"int"	32	0	2
3610	566	"result"	"int"	32	0	0
3611	566	"arg_1"	"blob"	0	0	1
3612	566	"arg_2"	"int"	32	0	2
3613	567	"result"	"oid"	31	0	0
3614	567	"arg_1"	"tinyint"	8	0	1
3615	567	"arg_2"	"oid"	31	0	2
3616	568	"result"	"oid"	31	0	0
3617	568	"arg_1"	"smallint"	16	0	1
3618	568	"arg_2"	"oid"	31	0	2
3619	569	"result"	"oid"	31	0	0
3620	569	"arg_1"	"int"	32	0	1
3621	569	"arg_2"	"oid"	31	0	2
3622	570	"result"	"oid"	31	0	0
3623	570	"arg_1"	"oid"	31	0	1
3624	570	"arg_2"	"oid"	31	0	2
3625	571	"result"	"oid"	31	0	0
3626	571	"arg_1"	"bigint"	64	0	1
3627	571	"arg_2"	"oid"	31	0	2
3628	572	"result"	"oid"	31	0	0
3629	572	"arg_1"	"wrd"	64	0	1
3630	572	"arg_2"	"oid"	31	0	2
3631	573	"result"	"oid"	31	0	0
3632	573	"arg_1"	"hugeint"	128	0	1
3633	573	"arg_2"	"oid"	31	0	2
3634	574	"result"	"oid"	31	0	0
3635	574	"arg_1"	"decimal"	2	0	1
3636	574	"arg_2"	"oid"	31	0	2
3637	575	"result"	"oid"	31	0	0
3638	575	"arg_1"	"decimal"	4	0	1
3639	575	"arg_2"	"oid"	31	0	2
3640	576	"result"	"oid"	31	0	0
3641	576	"arg_1"	"decimal"	9	0	1
3642	576	"arg_2"	"oid"	31	0	2
3643	577	"result"	"oid"	31	0	0
3644	577	"arg_1"	"decimal"	18	0	1
3645	577	"arg_2"	"oid"	31	0	2
3646	578	"result"	"oid"	31	0	0
3647	578	"arg_1"	"decimal"	39	0	1
3648	578	"arg_2"	"oid"	31	0	2
3649	579	"result"	"oid"	31	0	0
3650	579	"arg_1"	"real"	24	0	1
3651	579	"arg_2"	"oid"	31	0	2
3652	580	"result"	"oid"	31	0	0
3653	580	"arg_1"	"double"	53	0	1
3654	580	"arg_2"	"oid"	31	0	2
3655	581	"result"	"oid"	31	0	0
3656	581	"arg_1"	"month_interval"	32	0	1
3657	581	"arg_2"	"oid"	31	0	2
3658	582	"result"	"oid"	31	0	0
3659	582	"arg_1"	"sec_interval"	19	0	1
3660	582	"arg_2"	"oid"	31	0	2
3661	583	"result"	"oid"	31	0	0
3662	583	"arg_1"	"time"	7	0	1
3663	583	"arg_2"	"oid"	31	0	2
3664	584	"result"	"oid"	31	0	0
3665	584	"arg_1"	"timetz"	7	0	1
3666	584	"arg_2"	"oid"	31	0	2
3667	585	"result"	"oid"	31	0	0
3668	585	"arg_1"	"date"	0	0	1
3669	585	"arg_2"	"oid"	31	0	2
3670	586	"result"	"oid"	31	0	0
3671	586	"arg_1"	"timestamp"	7	0	1
3672	586	"arg_2"	"oid"	31	0	2
3673	587	"result"	"oid"	31	0	0
3674	587	"arg_1"	"timestamptz"	7	0	1
3675	587	"arg_2"	"oid"	31	0	2
3676	588	"result"	"oid"	31	0	0
3677	588	"arg_1"	"blob"	0	0	1
3678	588	"arg_2"	"oid"	31	0	2
3679	589	"result"	"bigint"	64	0	0
3680	589	"arg_1"	"tinyint"	8	0	1
3681	589	"arg_2"	"bigint"	64	0	2
3682	590	"result"	"bigint"	64	0	0
3683	590	"arg_1"	"smallint"	16	0	1
3684	590	"arg_2"	"bigint"	64	0	2
3685	591	"result"	"bigint"	64	0	0
3686	591	"arg_1"	"int"	32	0	1
3687	591	"arg_2"	"bigint"	64	0	2
3688	592	"result"	"bigint"	64	0	0
3689	592	"arg_1"	"oid"	31	0	1
3690	592	"arg_2"	"bigint"	64	0	2
3691	593	"result"	"bigint"	64	0	0
3692	593	"arg_1"	"bigint"	64	0	1
3693	593	"arg_2"	"bigint"	64	0	2
3694	594	"result"	"bigint"	64	0	0
3695	594	"arg_1"	"wrd"	64	0	1
3696	594	"arg_2"	"bigint"	64	0	2
3697	595	"result"	"bigint"	64	0	0
3698	595	"arg_1"	"hugeint"	128	0	1
3699	595	"arg_2"	"bigint"	64	0	2
3700	596	"result"	"bigint"	64	0	0
3701	596	"arg_1"	"decimal"	2	0	1
3702	596	"arg_2"	"bigint"	64	0	2
3703	597	"result"	"bigint"	64	0	0
3704	597	"arg_1"	"decimal"	4	0	1
3705	597	"arg_2"	"bigint"	64	0	2
3706	598	"result"	"bigint"	64	0	0
3707	598	"arg_1"	"decimal"	9	0	1
3708	598	"arg_2"	"bigint"	64	0	2
3709	599	"result"	"bigint"	64	0	0
3710	599	"arg_1"	"decimal"	18	0	1
3711	599	"arg_2"	"bigint"	64	0	2
3712	600	"result"	"bigint"	64	0	0
3713	600	"arg_1"	"decimal"	39	0	1
3714	600	"arg_2"	"bigint"	64	0	2
3715	601	"result"	"bigint"	64	0	0
3716	601	"arg_1"	"real"	24	0	1
3717	601	"arg_2"	"bigint"	64	0	2
3718	602	"result"	"bigint"	64	0	0
3719	602	"arg_1"	"double"	53	0	1
3720	602	"arg_2"	"bigint"	64	0	2
3721	603	"result"	"bigint"	64	0	0
3722	603	"arg_1"	"month_interval"	32	0	1
3723	603	"arg_2"	"bigint"	64	0	2
3724	604	"result"	"bigint"	64	0	0
3725	604	"arg_1"	"sec_interval"	19	0	1
3726	604	"arg_2"	"bigint"	64	0	2
3727	605	"result"	"bigint"	64	0	0
3728	605	"arg_1"	"time"	7	0	1
3729	605	"arg_2"	"bigint"	64	0	2
3730	606	"result"	"bigint"	64	0	0
3731	606	"arg_1"	"timetz"	7	0	1
3732	606	"arg_2"	"bigint"	64	0	2
3733	607	"result"	"bigint"	64	0	0
3734	607	"arg_1"	"date"	0	0	1
3735	607	"arg_2"	"bigint"	64	0	2
3736	608	"result"	"bigint"	64	0	0
3737	608	"arg_1"	"timestamp"	7	0	1
3738	608	"arg_2"	"bigint"	64	0	2
3739	609	"result"	"bigint"	64	0	0
3740	609	"arg_1"	"timestamptz"	7	0	1
3741	609	"arg_2"	"bigint"	64	0	2
3742	610	"result"	"bigint"	64	0	0
3743	610	"arg_1"	"blob"	0	0	1
3744	610	"arg_2"	"bigint"	64	0	2
3745	611	"result"	"wrd"	64	0	0
3746	611	"arg_1"	"tinyint"	8	0	1
3747	611	"arg_2"	"wrd"	64	0	2
3748	612	"result"	"wrd"	64	0	0
3749	612	"arg_1"	"smallint"	16	0	1
3750	612	"arg_2"	"wrd"	64	0	2
3751	613	"result"	"wrd"	64	0	0
3752	613	"arg_1"	"int"	32	0	1
3753	613	"arg_2"	"wrd"	64	0	2
3754	614	"result"	"wrd"	64	0	0
3755	614	"arg_1"	"oid"	31	0	1
3756	614	"arg_2"	"wrd"	64	0	2
3757	615	"result"	"wrd"	64	0	0
3758	615	"arg_1"	"bigint"	64	0	1
3759	615	"arg_2"	"wrd"	64	0	2
3760	616	"result"	"wrd"	64	0	0
3761	616	"arg_1"	"wrd"	64	0	1
3762	616	"arg_2"	"wrd"	64	0	2
3763	617	"result"	"wrd"	64	0	0
3764	617	"arg_1"	"hugeint"	128	0	1
3765	617	"arg_2"	"wrd"	64	0	2
3766	618	"result"	"wrd"	64	0	0
3767	618	"arg_1"	"decimal"	2	0	1
3768	618	"arg_2"	"wrd"	64	0	2
3769	619	"result"	"wrd"	64	0	0
3770	619	"arg_1"	"decimal"	4	0	1
3771	619	"arg_2"	"wrd"	64	0	2
3772	620	"result"	"wrd"	64	0	0
3773	620	"arg_1"	"decimal"	9	0	1
3774	620	"arg_2"	"wrd"	64	0	2
3775	621	"result"	"wrd"	64	0	0
3776	621	"arg_1"	"decimal"	18	0	1
3777	621	"arg_2"	"wrd"	64	0	2
3778	622	"result"	"wrd"	64	0	0
3779	622	"arg_1"	"decimal"	39	0	1
3780	622	"arg_2"	"wrd"	64	0	2
3781	623	"result"	"wrd"	64	0	0
3782	623	"arg_1"	"real"	24	0	1
3783	623	"arg_2"	"wrd"	64	0	2
3784	624	"result"	"wrd"	64	0	0
3785	624	"arg_1"	"double"	53	0	1
3786	624	"arg_2"	"wrd"	64	0	2
3787	625	"result"	"wrd"	64	0	0
3788	625	"arg_1"	"month_interval"	32	0	1
3789	625	"arg_2"	"wrd"	64	0	2
3790	626	"result"	"wrd"	64	0	0
3791	626	"arg_1"	"sec_interval"	19	0	1
3792	626	"arg_2"	"wrd"	64	0	2
3793	627	"result"	"wrd"	64	0	0
3794	627	"arg_1"	"time"	7	0	1
3795	627	"arg_2"	"wrd"	64	0	2
3796	628	"result"	"wrd"	64	0	0
3797	628	"arg_1"	"timetz"	7	0	1
3798	628	"arg_2"	"wrd"	64	0	2
3799	629	"result"	"wrd"	64	0	0
3800	629	"arg_1"	"date"	0	0	1
3801	629	"arg_2"	"wrd"	64	0	2
3802	630	"result"	"wrd"	64	0	0
3803	630	"arg_1"	"timestamp"	7	0	1
3804	630	"arg_2"	"wrd"	64	0	2
3805	631	"result"	"wrd"	64	0	0
3806	631	"arg_1"	"timestamptz"	7	0	1
3807	631	"arg_2"	"wrd"	64	0	2
3808	632	"result"	"wrd"	64	0	0
3809	632	"arg_1"	"blob"	0	0	1
3810	632	"arg_2"	"wrd"	64	0	2
3811	633	"result"	"hugeint"	128	0	0
3812	633	"arg_1"	"tinyint"	8	0	1
3813	633	"arg_2"	"hugeint"	128	0	2
3814	634	"result"	"hugeint"	128	0	0
3815	634	"arg_1"	"smallint"	16	0	1
3816	634	"arg_2"	"hugeint"	128	0	2
3817	635	"result"	"hugeint"	128	0	0
3818	635	"arg_1"	"int"	32	0	1
3819	635	"arg_2"	"hugeint"	128	0	2
3820	636	"result"	"hugeint"	128	0	0
3821	636	"arg_1"	"oid"	31	0	1
3822	636	"arg_2"	"hugeint"	128	0	2
3823	637	"result"	"hugeint"	128	0	0
3824	637	"arg_1"	"bigint"	64	0	1
3825	637	"arg_2"	"hugeint"	128	0	2
3826	638	"result"	"hugeint"	128	0	0
3827	638	"arg_1"	"wrd"	64	0	1
3828	638	"arg_2"	"hugeint"	128	0	2
3829	639	"result"	"hugeint"	128	0	0
3830	639	"arg_1"	"hugeint"	128	0	1
3831	639	"arg_2"	"hugeint"	128	0	2
3832	640	"result"	"hugeint"	128	0	0
3833	640	"arg_1"	"decimal"	2	0	1
3834	640	"arg_2"	"hugeint"	128	0	2
3835	641	"result"	"hugeint"	128	0	0
3836	641	"arg_1"	"decimal"	4	0	1
3837	641	"arg_2"	"hugeint"	128	0	2
3838	642	"result"	"hugeint"	128	0	0
3839	642	"arg_1"	"decimal"	9	0	1
3840	642	"arg_2"	"hugeint"	128	0	2
3841	643	"result"	"hugeint"	128	0	0
3842	643	"arg_1"	"decimal"	18	0	1
3843	643	"arg_2"	"hugeint"	128	0	2
3844	644	"result"	"hugeint"	128	0	0
3845	644	"arg_1"	"decimal"	39	0	1
3846	644	"arg_2"	"hugeint"	128	0	2
3847	645	"result"	"hugeint"	128	0	0
3848	645	"arg_1"	"real"	24	0	1
3849	645	"arg_2"	"hugeint"	128	0	2
3850	646	"result"	"hugeint"	128	0	0
3851	646	"arg_1"	"double"	53	0	1
3852	646	"arg_2"	"hugeint"	128	0	2
3853	647	"result"	"hugeint"	128	0	0
3854	647	"arg_1"	"month_interval"	32	0	1
3855	647	"arg_2"	"hugeint"	128	0	2
3856	648	"result"	"hugeint"	128	0	0
3857	648	"arg_1"	"sec_interval"	19	0	1
3858	648	"arg_2"	"hugeint"	128	0	2
3859	649	"result"	"hugeint"	128	0	0
3860	649	"arg_1"	"time"	7	0	1
3861	649	"arg_2"	"hugeint"	128	0	2
3862	650	"result"	"hugeint"	128	0	0
3863	650	"arg_1"	"timetz"	7	0	1
3864	650	"arg_2"	"hugeint"	128	0	2
3865	651	"result"	"hugeint"	128	0	0
3866	651	"arg_1"	"date"	0	0	1
3867	651	"arg_2"	"hugeint"	128	0	2
3868	652	"result"	"hugeint"	128	0	0
3869	652	"arg_1"	"timestamp"	7	0	1
3870	652	"arg_2"	"hugeint"	128	0	2
3871	653	"result"	"hugeint"	128	0	0
3872	653	"arg_1"	"timestamptz"	7	0	1
3873	653	"arg_2"	"hugeint"	128	0	2
3874	654	"result"	"hugeint"	128	0	0
3875	654	"arg_1"	"blob"	0	0	1
3876	654	"arg_2"	"hugeint"	128	0	2
3877	655	"result"	"decimal"	2	0	0
3878	655	"arg_1"	"tinyint"	8	0	1
3879	655	"arg_2"	"decimal"	2	0	2
3880	656	"result"	"decimal"	2	0	0
3881	656	"arg_1"	"smallint"	16	0	1
3882	656	"arg_2"	"decimal"	2	0	2
3883	657	"result"	"decimal"	2	0	0
3884	657	"arg_1"	"int"	32	0	1
3885	657	"arg_2"	"decimal"	2	0	2
3886	658	"result"	"decimal"	2	0	0
3887	658	"arg_1"	"oid"	31	0	1
3888	658	"arg_2"	"decimal"	2	0	2
3889	659	"result"	"decimal"	2	0	0
3890	659	"arg_1"	"bigint"	64	0	1
3891	659	"arg_2"	"decimal"	2	0	2
3892	660	"result"	"decimal"	2	0	0
3893	660	"arg_1"	"wrd"	64	0	1
3894	660	"arg_2"	"decimal"	2	0	2
3895	661	"result"	"decimal"	2	0	0
3896	661	"arg_1"	"hugeint"	128	0	1
3897	661	"arg_2"	"decimal"	2	0	2
3898	662	"result"	"decimal"	2	0	0
3899	662	"arg_1"	"decimal"	2	0	1
3900	662	"arg_2"	"decimal"	2	0	2
3901	663	"result"	"decimal"	2	0	0
3902	663	"arg_1"	"decimal"	4	0	1
3903	663	"arg_2"	"decimal"	2	0	2
3904	664	"result"	"decimal"	2	0	0
3905	664	"arg_1"	"decimal"	9	0	1
3906	664	"arg_2"	"decimal"	2	0	2
3907	665	"result"	"decimal"	2	0	0
3908	665	"arg_1"	"decimal"	18	0	1
3909	665	"arg_2"	"decimal"	2	0	2
3910	666	"result"	"decimal"	2	0	0
3911	666	"arg_1"	"decimal"	39	0	1
3912	666	"arg_2"	"decimal"	2	0	2
3913	667	"result"	"decimal"	2	0	0
3914	667	"arg_1"	"real"	24	0	1
3915	667	"arg_2"	"decimal"	2	0	2
3916	668	"result"	"decimal"	2	0	0
3917	668	"arg_1"	"double"	53	0	1
3918	668	"arg_2"	"decimal"	2	0	2
3919	669	"result"	"decimal"	2	0	0
3920	669	"arg_1"	"month_interval"	32	0	1
3921	669	"arg_2"	"decimal"	2	0	2
3922	670	"result"	"decimal"	2	0	0
3923	670	"arg_1"	"sec_interval"	19	0	1
3924	670	"arg_2"	"decimal"	2	0	2
3925	671	"result"	"decimal"	2	0	0
3926	671	"arg_1"	"time"	7	0	1
3927	671	"arg_2"	"decimal"	2	0	2
3928	672	"result"	"decimal"	2	0	0
3929	672	"arg_1"	"timetz"	7	0	1
3930	672	"arg_2"	"decimal"	2	0	2
3931	673	"result"	"decimal"	2	0	0
3932	673	"arg_1"	"date"	0	0	1
3933	673	"arg_2"	"decimal"	2	0	2
3934	674	"result"	"decimal"	2	0	0
3935	674	"arg_1"	"timestamp"	7	0	1
3936	674	"arg_2"	"decimal"	2	0	2
3937	675	"result"	"decimal"	2	0	0
3938	675	"arg_1"	"timestamptz"	7	0	1
3939	675	"arg_2"	"decimal"	2	0	2
3940	676	"result"	"decimal"	2	0	0
3941	676	"arg_1"	"blob"	0	0	1
3942	676	"arg_2"	"decimal"	2	0	2
3943	677	"result"	"decimal"	4	0	0
3944	677	"arg_1"	"tinyint"	8	0	1
3945	677	"arg_2"	"decimal"	4	0	2
3946	678	"result"	"decimal"	4	0	0
3947	678	"arg_1"	"smallint"	16	0	1
3948	678	"arg_2"	"decimal"	4	0	2
3949	679	"result"	"decimal"	4	0	0
3950	679	"arg_1"	"int"	32	0	1
3951	679	"arg_2"	"decimal"	4	0	2
3952	680	"result"	"decimal"	4	0	0
3953	680	"arg_1"	"oid"	31	0	1
3954	680	"arg_2"	"decimal"	4	0	2
3955	681	"result"	"decimal"	4	0	0
3956	681	"arg_1"	"bigint"	64	0	1
3957	681	"arg_2"	"decimal"	4	0	2
3958	682	"result"	"decimal"	4	0	0
3959	682	"arg_1"	"wrd"	64	0	1
3960	682	"arg_2"	"decimal"	4	0	2
3961	683	"result"	"decimal"	4	0	0
3962	683	"arg_1"	"hugeint"	128	0	1
3963	683	"arg_2"	"decimal"	4	0	2
3964	684	"result"	"decimal"	4	0	0
3965	684	"arg_1"	"decimal"	2	0	1
3966	684	"arg_2"	"decimal"	4	0	2
3967	685	"result"	"decimal"	4	0	0
3968	685	"arg_1"	"decimal"	4	0	1
3969	685	"arg_2"	"decimal"	4	0	2
3970	686	"result"	"decimal"	4	0	0
3971	686	"arg_1"	"decimal"	9	0	1
3972	686	"arg_2"	"decimal"	4	0	2
3973	687	"result"	"decimal"	4	0	0
3974	687	"arg_1"	"decimal"	18	0	1
3975	687	"arg_2"	"decimal"	4	0	2
3976	688	"result"	"decimal"	4	0	0
3977	688	"arg_1"	"decimal"	39	0	1
3978	688	"arg_2"	"decimal"	4	0	2
3979	689	"result"	"decimal"	4	0	0
3980	689	"arg_1"	"real"	24	0	1
3981	689	"arg_2"	"decimal"	4	0	2
3982	690	"result"	"decimal"	4	0	0
3983	690	"arg_1"	"double"	53	0	1
3984	690	"arg_2"	"decimal"	4	0	2
3985	691	"result"	"decimal"	4	0	0
3986	691	"arg_1"	"month_interval"	32	0	1
3987	691	"arg_2"	"decimal"	4	0	2
3988	692	"result"	"decimal"	4	0	0
3989	692	"arg_1"	"sec_interval"	19	0	1
3990	692	"arg_2"	"decimal"	4	0	2
3991	693	"result"	"decimal"	4	0	0
3992	693	"arg_1"	"time"	7	0	1
3993	693	"arg_2"	"decimal"	4	0	2
3994	694	"result"	"decimal"	4	0	0
3995	694	"arg_1"	"timetz"	7	0	1
3996	694	"arg_2"	"decimal"	4	0	2
3997	695	"result"	"decimal"	4	0	0
3998	695	"arg_1"	"date"	0	0	1
3999	695	"arg_2"	"decimal"	4	0	2
4000	696	"result"	"decimal"	4	0	0
4001	696	"arg_1"	"timestamp"	7	0	1
4002	696	"arg_2"	"decimal"	4	0	2
4003	697	"result"	"decimal"	4	0	0
4004	697	"arg_1"	"timestamptz"	7	0	1
4005	697	"arg_2"	"decimal"	4	0	2
4006	698	"result"	"decimal"	4	0	0
4007	698	"arg_1"	"blob"	0	0	1
4008	698	"arg_2"	"decimal"	4	0	2
4009	699	"result"	"decimal"	9	0	0
4010	699	"arg_1"	"tinyint"	8	0	1
4011	699	"arg_2"	"decimal"	9	0	2
4012	700	"result"	"decimal"	9	0	0
4013	700	"arg_1"	"smallint"	16	0	1
4014	700	"arg_2"	"decimal"	9	0	2
4015	701	"result"	"decimal"	9	0	0
4016	701	"arg_1"	"int"	32	0	1
4017	701	"arg_2"	"decimal"	9	0	2
4018	702	"result"	"decimal"	9	0	0
4019	702	"arg_1"	"oid"	31	0	1
4020	702	"arg_2"	"decimal"	9	0	2
4021	703	"result"	"decimal"	9	0	0
4022	703	"arg_1"	"bigint"	64	0	1
4023	703	"arg_2"	"decimal"	9	0	2
4024	704	"result"	"decimal"	9	0	0
4025	704	"arg_1"	"wrd"	64	0	1
4026	704	"arg_2"	"decimal"	9	0	2
4027	705	"result"	"decimal"	9	0	0
4028	705	"arg_1"	"hugeint"	128	0	1
4029	705	"arg_2"	"decimal"	9	0	2
4030	706	"result"	"decimal"	9	0	0
4031	706	"arg_1"	"decimal"	2	0	1
4032	706	"arg_2"	"decimal"	9	0	2
4033	707	"result"	"decimal"	9	0	0
4034	707	"arg_1"	"decimal"	4	0	1
4035	707	"arg_2"	"decimal"	9	0	2
4036	708	"result"	"decimal"	9	0	0
4037	708	"arg_1"	"decimal"	9	0	1
4038	708	"arg_2"	"decimal"	9	0	2
4039	709	"result"	"decimal"	9	0	0
4040	709	"arg_1"	"decimal"	18	0	1
4041	709	"arg_2"	"decimal"	9	0	2
4042	710	"result"	"decimal"	9	0	0
4043	710	"arg_1"	"decimal"	39	0	1
4044	710	"arg_2"	"decimal"	9	0	2
4045	711	"result"	"decimal"	9	0	0
4046	711	"arg_1"	"real"	24	0	1
4047	711	"arg_2"	"decimal"	9	0	2
4048	712	"result"	"decimal"	9	0	0
4049	712	"arg_1"	"double"	53	0	1
4050	712	"arg_2"	"decimal"	9	0	2
4051	713	"result"	"decimal"	9	0	0
4052	713	"arg_1"	"month_interval"	32	0	1
4053	713	"arg_2"	"decimal"	9	0	2
4054	714	"result"	"decimal"	9	0	0
4055	714	"arg_1"	"sec_interval"	19	0	1
4056	714	"arg_2"	"decimal"	9	0	2
4057	715	"result"	"decimal"	9	0	0
4058	715	"arg_1"	"time"	7	0	1
4059	715	"arg_2"	"decimal"	9	0	2
4060	716	"result"	"decimal"	9	0	0
4061	716	"arg_1"	"timetz"	7	0	1
4062	716	"arg_2"	"decimal"	9	0	2
4063	717	"result"	"decimal"	9	0	0
4064	717	"arg_1"	"date"	0	0	1
4065	717	"arg_2"	"decimal"	9	0	2
4066	718	"result"	"decimal"	9	0	0
4067	718	"arg_1"	"timestamp"	7	0	1
4068	718	"arg_2"	"decimal"	9	0	2
4069	719	"result"	"decimal"	9	0	0
4070	719	"arg_1"	"timestamptz"	7	0	1
4071	719	"arg_2"	"decimal"	9	0	2
4072	720	"result"	"decimal"	9	0	0
4073	720	"arg_1"	"blob"	0	0	1
4074	720	"arg_2"	"decimal"	9	0	2
4075	721	"result"	"decimal"	18	0	0
4076	721	"arg_1"	"tinyint"	8	0	1
4077	721	"arg_2"	"decimal"	18	0	2
4078	722	"result"	"decimal"	18	0	0
4079	722	"arg_1"	"smallint"	16	0	1
4080	722	"arg_2"	"decimal"	18	0	2
4081	723	"result"	"decimal"	18	0	0
4082	723	"arg_1"	"int"	32	0	1
4083	723	"arg_2"	"decimal"	18	0	2
4084	724	"result"	"decimal"	18	0	0
4085	724	"arg_1"	"oid"	31	0	1
4086	724	"arg_2"	"decimal"	18	0	2
4087	725	"result"	"decimal"	18	0	0
4088	725	"arg_1"	"bigint"	64	0	1
4089	725	"arg_2"	"decimal"	18	0	2
4090	726	"result"	"decimal"	18	0	0
4091	726	"arg_1"	"wrd"	64	0	1
4092	726	"arg_2"	"decimal"	18	0	2
4093	727	"result"	"decimal"	18	0	0
4094	727	"arg_1"	"hugeint"	128	0	1
4095	727	"arg_2"	"decimal"	18	0	2
4096	728	"result"	"decimal"	18	0	0
4097	728	"arg_1"	"decimal"	2	0	1
4098	728	"arg_2"	"decimal"	18	0	2
4099	729	"result"	"decimal"	18	0	0
4100	729	"arg_1"	"decimal"	4	0	1
4101	729	"arg_2"	"decimal"	18	0	2
4102	730	"result"	"decimal"	18	0	0
4103	730	"arg_1"	"decimal"	9	0	1
4104	730	"arg_2"	"decimal"	18	0	2
4105	731	"result"	"decimal"	18	0	0
4106	731	"arg_1"	"decimal"	18	0	1
4107	731	"arg_2"	"decimal"	18	0	2
4108	732	"result"	"decimal"	18	0	0
4109	732	"arg_1"	"decimal"	39	0	1
4110	732	"arg_2"	"decimal"	18	0	2
4111	733	"result"	"decimal"	18	0	0
4112	733	"arg_1"	"real"	24	0	1
4113	733	"arg_2"	"decimal"	18	0	2
4114	734	"result"	"decimal"	18	0	0
4115	734	"arg_1"	"double"	53	0	1
4116	734	"arg_2"	"decimal"	18	0	2
4117	735	"result"	"decimal"	18	0	0
4118	735	"arg_1"	"month_interval"	32	0	1
4119	735	"arg_2"	"decimal"	18	0	2
4120	736	"result"	"decimal"	18	0	0
4121	736	"arg_1"	"sec_interval"	19	0	1
4122	736	"arg_2"	"decimal"	18	0	2
4123	737	"result"	"decimal"	18	0	0
4124	737	"arg_1"	"time"	7	0	1
4125	737	"arg_2"	"decimal"	18	0	2
4126	738	"result"	"decimal"	18	0	0
4127	738	"arg_1"	"timetz"	7	0	1
4128	738	"arg_2"	"decimal"	18	0	2
4129	739	"result"	"decimal"	18	0	0
4130	739	"arg_1"	"date"	0	0	1
4131	739	"arg_2"	"decimal"	18	0	2
4132	740	"result"	"decimal"	18	0	0
4133	740	"arg_1"	"timestamp"	7	0	1
4134	740	"arg_2"	"decimal"	18	0	2
4135	741	"result"	"decimal"	18	0	0
4136	741	"arg_1"	"timestamptz"	7	0	1
4137	741	"arg_2"	"decimal"	18	0	2
4138	742	"result"	"decimal"	18	0	0
4139	742	"arg_1"	"blob"	0	0	1
4140	742	"arg_2"	"decimal"	18	0	2
4141	743	"result"	"decimal"	39	0	0
4142	743	"arg_1"	"tinyint"	8	0	1
4143	743	"arg_2"	"decimal"	39	0	2
4144	744	"result"	"decimal"	39	0	0
4145	744	"arg_1"	"smallint"	16	0	1
4146	744	"arg_2"	"decimal"	39	0	2
4147	745	"result"	"decimal"	39	0	0
4148	745	"arg_1"	"int"	32	0	1
4149	745	"arg_2"	"decimal"	39	0	2
4150	746	"result"	"decimal"	39	0	0
4151	746	"arg_1"	"oid"	31	0	1
4152	746	"arg_2"	"decimal"	39	0	2
4153	747	"result"	"decimal"	39	0	0
4154	747	"arg_1"	"bigint"	64	0	1
4155	747	"arg_2"	"decimal"	39	0	2
4156	748	"result"	"decimal"	39	0	0
4157	748	"arg_1"	"wrd"	64	0	1
4158	748	"arg_2"	"decimal"	39	0	2
4159	749	"result"	"decimal"	39	0	0
4160	749	"arg_1"	"hugeint"	128	0	1
4161	749	"arg_2"	"decimal"	39	0	2
4162	750	"result"	"decimal"	39	0	0
4163	750	"arg_1"	"decimal"	2	0	1
4164	750	"arg_2"	"decimal"	39	0	2
4165	751	"result"	"decimal"	39	0	0
4166	751	"arg_1"	"decimal"	4	0	1
4167	751	"arg_2"	"decimal"	39	0	2
4168	752	"result"	"decimal"	39	0	0
4169	752	"arg_1"	"decimal"	9	0	1
4170	752	"arg_2"	"decimal"	39	0	2
4171	753	"result"	"decimal"	39	0	0
4172	753	"arg_1"	"decimal"	18	0	1
4173	753	"arg_2"	"decimal"	39	0	2
4174	754	"result"	"decimal"	39	0	0
4175	754	"arg_1"	"decimal"	39	0	1
4176	754	"arg_2"	"decimal"	39	0	2
4177	755	"result"	"decimal"	39	0	0
4178	755	"arg_1"	"real"	24	0	1
4179	755	"arg_2"	"decimal"	39	0	2
4180	756	"result"	"decimal"	39	0	0
4181	756	"arg_1"	"double"	53	0	1
4182	756	"arg_2"	"decimal"	39	0	2
4183	757	"result"	"decimal"	39	0	0
4184	757	"arg_1"	"month_interval"	32	0	1
4185	757	"arg_2"	"decimal"	39	0	2
4186	758	"result"	"decimal"	39	0	0
4187	758	"arg_1"	"sec_interval"	19	0	1
4188	758	"arg_2"	"decimal"	39	0	2
4189	759	"result"	"decimal"	39	0	0
4190	759	"arg_1"	"time"	7	0	1
4191	759	"arg_2"	"decimal"	39	0	2
4192	760	"result"	"decimal"	39	0	0
4193	760	"arg_1"	"timetz"	7	0	1
4194	760	"arg_2"	"decimal"	39	0	2
4195	761	"result"	"decimal"	39	0	0
4196	761	"arg_1"	"date"	0	0	1
4197	761	"arg_2"	"decimal"	39	0	2
4198	762	"result"	"decimal"	39	0	0
4199	762	"arg_1"	"timestamp"	7	0	1
4200	762	"arg_2"	"decimal"	39	0	2
4201	763	"result"	"decimal"	39	0	0
4202	763	"arg_1"	"timestamptz"	7	0	1
4203	763	"arg_2"	"decimal"	39	0	2
4204	764	"result"	"decimal"	39	0	0
4205	764	"arg_1"	"blob"	0	0	1
4206	764	"arg_2"	"decimal"	39	0	2
4207	765	"result"	"real"	24	0	0
4208	765	"arg_1"	"tinyint"	8	0	1
4209	765	"arg_2"	"real"	24	0	2
4210	766	"result"	"real"	24	0	0
4211	766	"arg_1"	"smallint"	16	0	1
4212	766	"arg_2"	"real"	24	0	2
4213	767	"result"	"real"	24	0	0
4214	767	"arg_1"	"int"	32	0	1
4215	767	"arg_2"	"real"	24	0	2
4216	768	"result"	"real"	24	0	0
4217	768	"arg_1"	"oid"	31	0	1
4218	768	"arg_2"	"real"	24	0	2
4219	769	"result"	"real"	24	0	0
4220	769	"arg_1"	"bigint"	64	0	1
4221	769	"arg_2"	"real"	24	0	2
4222	770	"result"	"real"	24	0	0
4223	770	"arg_1"	"wrd"	64	0	1
4224	770	"arg_2"	"real"	24	0	2
4225	771	"result"	"real"	24	0	0
4226	771	"arg_1"	"hugeint"	128	0	1
4227	771	"arg_2"	"real"	24	0	2
4228	772	"result"	"real"	24	0	0
4229	772	"arg_1"	"decimal"	2	0	1
4230	772	"arg_2"	"real"	24	0	2
4231	773	"result"	"real"	24	0	0
4232	773	"arg_1"	"decimal"	4	0	1
4233	773	"arg_2"	"real"	24	0	2
4234	774	"result"	"real"	24	0	0
4235	774	"arg_1"	"decimal"	9	0	1
4236	774	"arg_2"	"real"	24	0	2
4237	775	"result"	"real"	24	0	0
4238	775	"arg_1"	"decimal"	18	0	1
4239	775	"arg_2"	"real"	24	0	2
4240	776	"result"	"real"	24	0	0
4241	776	"arg_1"	"decimal"	39	0	1
4242	776	"arg_2"	"real"	24	0	2
4243	777	"result"	"real"	24	0	0
4244	777	"arg_1"	"real"	24	0	1
4245	777	"arg_2"	"real"	24	0	2
4246	778	"result"	"real"	24	0	0
4247	778	"arg_1"	"double"	53	0	1
4248	778	"arg_2"	"real"	24	0	2
4249	779	"result"	"real"	24	0	0
4250	779	"arg_1"	"month_interval"	32	0	1
4251	779	"arg_2"	"real"	24	0	2
4252	780	"result"	"real"	24	0	0
4253	780	"arg_1"	"sec_interval"	19	0	1
4254	780	"arg_2"	"real"	24	0	2
4255	781	"result"	"real"	24	0	0
4256	781	"arg_1"	"time"	7	0	1
4257	781	"arg_2"	"real"	24	0	2
4258	782	"result"	"real"	24	0	0
4259	782	"arg_1"	"timetz"	7	0	1
4260	782	"arg_2"	"real"	24	0	2
4261	783	"result"	"real"	24	0	0
4262	783	"arg_1"	"date"	0	0	1
4263	783	"arg_2"	"real"	24	0	2
4264	784	"result"	"real"	24	0	0
4265	784	"arg_1"	"timestamp"	7	0	1
4266	784	"arg_2"	"real"	24	0	2
4267	785	"result"	"real"	24	0	0
4268	785	"arg_1"	"timestamptz"	7	0	1
4269	785	"arg_2"	"real"	24	0	2
4270	786	"result"	"real"	24	0	0
4271	786	"arg_1"	"blob"	0	0	1
4272	786	"arg_2"	"real"	24	0	2
4273	787	"result"	"double"	53	0	0
4274	787	"arg_1"	"tinyint"	8	0	1
4275	787	"arg_2"	"double"	53	0	2
4276	788	"result"	"double"	53	0	0
4277	788	"arg_1"	"smallint"	16	0	1
4278	788	"arg_2"	"double"	53	0	2
4279	789	"result"	"double"	53	0	0
4280	789	"arg_1"	"int"	32	0	1
4281	789	"arg_2"	"double"	53	0	2
4282	790	"result"	"double"	53	0	0
4283	790	"arg_1"	"oid"	31	0	1
4284	790	"arg_2"	"double"	53	0	2
4285	791	"result"	"double"	53	0	0
4286	791	"arg_1"	"bigint"	64	0	1
4287	791	"arg_2"	"double"	53	0	2
4288	792	"result"	"double"	53	0	0
4289	792	"arg_1"	"wrd"	64	0	1
4290	792	"arg_2"	"double"	53	0	2
4291	793	"result"	"double"	53	0	0
4292	793	"arg_1"	"hugeint"	128	0	1
4293	793	"arg_2"	"double"	53	0	2
4294	794	"result"	"double"	53	0	0
4295	794	"arg_1"	"decimal"	2	0	1
4296	794	"arg_2"	"double"	53	0	2
4297	795	"result"	"double"	53	0	0
4298	795	"arg_1"	"decimal"	4	0	1
4299	795	"arg_2"	"double"	53	0	2
4300	796	"result"	"double"	53	0	0
4301	796	"arg_1"	"decimal"	9	0	1
4302	796	"arg_2"	"double"	53	0	2
4303	797	"result"	"double"	53	0	0
4304	797	"arg_1"	"decimal"	18	0	1
4305	797	"arg_2"	"double"	53	0	2
4306	798	"result"	"double"	53	0	0
4307	798	"arg_1"	"decimal"	39	0	1
4308	798	"arg_2"	"double"	53	0	2
4309	799	"result"	"double"	53	0	0
4310	799	"arg_1"	"real"	24	0	1
4311	799	"arg_2"	"double"	53	0	2
4312	800	"result"	"double"	53	0	0
4313	800	"arg_1"	"double"	53	0	1
4314	800	"arg_2"	"double"	53	0	2
4315	801	"result"	"double"	53	0	0
4316	801	"arg_1"	"month_interval"	32	0	1
4317	801	"arg_2"	"double"	53	0	2
4318	802	"result"	"double"	53	0	0
4319	802	"arg_1"	"sec_interval"	19	0	1
4320	802	"arg_2"	"double"	53	0	2
4321	803	"result"	"double"	53	0	0
4322	803	"arg_1"	"time"	7	0	1
4323	803	"arg_2"	"double"	53	0	2
4324	804	"result"	"double"	53	0	0
4325	804	"arg_1"	"timetz"	7	0	1
4326	804	"arg_2"	"double"	53	0	2
4327	805	"result"	"double"	53	0	0
4328	805	"arg_1"	"date"	0	0	1
4329	805	"arg_2"	"double"	53	0	2
4330	806	"result"	"double"	53	0	0
4331	806	"arg_1"	"timestamp"	7	0	1
4332	806	"arg_2"	"double"	53	0	2
4333	807	"result"	"double"	53	0	0
4334	807	"arg_1"	"timestamptz"	7	0	1
4335	807	"arg_2"	"double"	53	0	2
4336	808	"result"	"double"	53	0	0
4337	808	"arg_1"	"blob"	0	0	1
4338	808	"arg_2"	"double"	53	0	2
4339	809	"result"	"month_interval"	32	0	0
4340	809	"arg_1"	"tinyint"	8	0	1
4341	809	"arg_2"	"month_interval"	32	0	2
4342	810	"result"	"month_interval"	32	0	0
4343	810	"arg_1"	"smallint"	16	0	1
4344	810	"arg_2"	"month_interval"	32	0	2
4345	811	"result"	"month_interval"	32	0	0
4346	811	"arg_1"	"int"	32	0	1
4347	811	"arg_2"	"month_interval"	32	0	2
4348	812	"result"	"month_interval"	32	0	0
4349	812	"arg_1"	"oid"	31	0	1
4350	812	"arg_2"	"month_interval"	32	0	2
4351	813	"result"	"month_interval"	32	0	0
4352	813	"arg_1"	"bigint"	64	0	1
4353	813	"arg_2"	"month_interval"	32	0	2
4354	814	"result"	"month_interval"	32	0	0
4355	814	"arg_1"	"wrd"	64	0	1
4356	814	"arg_2"	"month_interval"	32	0	2
4357	815	"result"	"month_interval"	32	0	0
4358	815	"arg_1"	"hugeint"	128	0	1
4359	815	"arg_2"	"month_interval"	32	0	2
4360	816	"result"	"month_interval"	32	0	0
4361	816	"arg_1"	"decimal"	2	0	1
4362	816	"arg_2"	"month_interval"	32	0	2
4363	817	"result"	"month_interval"	32	0	0
4364	817	"arg_1"	"decimal"	4	0	1
4365	817	"arg_2"	"month_interval"	32	0	2
4366	818	"result"	"month_interval"	32	0	0
4367	818	"arg_1"	"decimal"	9	0	1
4368	818	"arg_2"	"month_interval"	32	0	2
4369	819	"result"	"month_interval"	32	0	0
4370	819	"arg_1"	"decimal"	18	0	1
4371	819	"arg_2"	"month_interval"	32	0	2
4372	820	"result"	"month_interval"	32	0	0
4373	820	"arg_1"	"decimal"	39	0	1
4374	820	"arg_2"	"month_interval"	32	0	2
4375	821	"result"	"month_interval"	32	0	0
4376	821	"arg_1"	"real"	24	0	1
4377	821	"arg_2"	"month_interval"	32	0	2
4378	822	"result"	"month_interval"	32	0	0
4379	822	"arg_1"	"double"	53	0	1
4380	822	"arg_2"	"month_interval"	32	0	2
4381	823	"result"	"month_interval"	32	0	0
4382	823	"arg_1"	"month_interval"	32	0	1
4383	823	"arg_2"	"month_interval"	32	0	2
4384	824	"result"	"month_interval"	32	0	0
4385	824	"arg_1"	"sec_interval"	19	0	1
4386	824	"arg_2"	"month_interval"	32	0	2
4387	825	"result"	"month_interval"	32	0	0
4388	825	"arg_1"	"time"	7	0	1
4389	825	"arg_2"	"month_interval"	32	0	2
4390	826	"result"	"month_interval"	32	0	0
4391	826	"arg_1"	"timetz"	7	0	1
4392	826	"arg_2"	"month_interval"	32	0	2
4393	827	"result"	"month_interval"	32	0	0
4394	827	"arg_1"	"date"	0	0	1
4395	827	"arg_2"	"month_interval"	32	0	2
4396	828	"result"	"month_interval"	32	0	0
4397	828	"arg_1"	"timestamp"	7	0	1
4398	828	"arg_2"	"month_interval"	32	0	2
4399	829	"result"	"month_interval"	32	0	0
4400	829	"arg_1"	"timestamptz"	7	0	1
4401	829	"arg_2"	"month_interval"	32	0	2
4402	830	"result"	"month_interval"	32	0	0
4403	830	"arg_1"	"blob"	0	0	1
4404	830	"arg_2"	"month_interval"	32	0	2
4405	831	"result"	"sec_interval"	19	0	0
4406	831	"arg_1"	"tinyint"	8	0	1
4407	831	"arg_2"	"sec_interval"	19	0	2
4408	832	"result"	"sec_interval"	19	0	0
4409	832	"arg_1"	"smallint"	16	0	1
4410	832	"arg_2"	"sec_interval"	19	0	2
4411	833	"result"	"sec_interval"	19	0	0
4412	833	"arg_1"	"int"	32	0	1
4413	833	"arg_2"	"sec_interval"	19	0	2
4414	834	"result"	"sec_interval"	19	0	0
4415	834	"arg_1"	"oid"	31	0	1
4416	834	"arg_2"	"sec_interval"	19	0	2
4417	835	"result"	"sec_interval"	19	0	0
4418	835	"arg_1"	"bigint"	64	0	1
4419	835	"arg_2"	"sec_interval"	19	0	2
4420	836	"result"	"sec_interval"	19	0	0
4421	836	"arg_1"	"wrd"	64	0	1
4422	836	"arg_2"	"sec_interval"	19	0	2
4423	837	"result"	"sec_interval"	19	0	0
4424	837	"arg_1"	"hugeint"	128	0	1
4425	837	"arg_2"	"sec_interval"	19	0	2
4426	838	"result"	"sec_interval"	19	0	0
4427	838	"arg_1"	"decimal"	2	0	1
4428	838	"arg_2"	"sec_interval"	19	0	2
4429	839	"result"	"sec_interval"	19	0	0
4430	839	"arg_1"	"decimal"	4	0	1
4431	839	"arg_2"	"sec_interval"	19	0	2
4432	840	"result"	"sec_interval"	19	0	0
4433	840	"arg_1"	"decimal"	9	0	1
4434	840	"arg_2"	"sec_interval"	19	0	2
4435	841	"result"	"sec_interval"	19	0	0
4436	841	"arg_1"	"decimal"	18	0	1
4437	841	"arg_2"	"sec_interval"	19	0	2
4438	842	"result"	"sec_interval"	19	0	0
4439	842	"arg_1"	"decimal"	39	0	1
4440	842	"arg_2"	"sec_interval"	19	0	2
4441	843	"result"	"sec_interval"	19	0	0
4442	843	"arg_1"	"real"	24	0	1
4443	843	"arg_2"	"sec_interval"	19	0	2
4444	844	"result"	"sec_interval"	19	0	0
4445	844	"arg_1"	"double"	53	0	1
4446	844	"arg_2"	"sec_interval"	19	0	2
4447	845	"result"	"sec_interval"	19	0	0
4448	845	"arg_1"	"month_interval"	32	0	1
4449	845	"arg_2"	"sec_interval"	19	0	2
4450	846	"result"	"sec_interval"	19	0	0
4451	846	"arg_1"	"sec_interval"	19	0	1
4452	846	"arg_2"	"sec_interval"	19	0	2
4453	847	"result"	"sec_interval"	19	0	0
4454	847	"arg_1"	"time"	7	0	1
4455	847	"arg_2"	"sec_interval"	19	0	2
4456	848	"result"	"sec_interval"	19	0	0
4457	848	"arg_1"	"timetz"	7	0	1
4458	848	"arg_2"	"sec_interval"	19	0	2
4459	849	"result"	"sec_interval"	19	0	0
4460	849	"arg_1"	"date"	0	0	1
4461	849	"arg_2"	"sec_interval"	19	0	2
4462	850	"result"	"sec_interval"	19	0	0
4463	850	"arg_1"	"timestamp"	7	0	1
4464	850	"arg_2"	"sec_interval"	19	0	2
4465	851	"result"	"sec_interval"	19	0	0
4466	851	"arg_1"	"timestamptz"	7	0	1
4467	851	"arg_2"	"sec_interval"	19	0	2
4468	852	"result"	"sec_interval"	19	0	0
4469	852	"arg_1"	"blob"	0	0	1
4470	852	"arg_2"	"sec_interval"	19	0	2
4471	853	"result"	"time"	7	0	0
4472	853	"arg_1"	"tinyint"	8	0	1
4473	853	"arg_2"	"time"	7	0	2
4474	854	"result"	"time"	7	0	0
4475	854	"arg_1"	"smallint"	16	0	1
4476	854	"arg_2"	"time"	7	0	2
4477	855	"result"	"time"	7	0	0
4478	855	"arg_1"	"int"	32	0	1
4479	855	"arg_2"	"time"	7	0	2
4480	856	"result"	"time"	7	0	0
4481	856	"arg_1"	"oid"	31	0	1
4482	856	"arg_2"	"time"	7	0	2
4483	857	"result"	"time"	7	0	0
4484	857	"arg_1"	"bigint"	64	0	1
4485	857	"arg_2"	"time"	7	0	2
4486	858	"result"	"time"	7	0	0
4487	858	"arg_1"	"wrd"	64	0	1
4488	858	"arg_2"	"time"	7	0	2
4489	859	"result"	"time"	7	0	0
4490	859	"arg_1"	"hugeint"	128	0	1
4491	859	"arg_2"	"time"	7	0	2
4492	860	"result"	"time"	7	0	0
4493	860	"arg_1"	"decimal"	2	0	1
4494	860	"arg_2"	"time"	7	0	2
4495	861	"result"	"time"	7	0	0
4496	861	"arg_1"	"decimal"	4	0	1
4497	861	"arg_2"	"time"	7	0	2
4498	862	"result"	"time"	7	0	0
4499	862	"arg_1"	"decimal"	9	0	1
4500	862	"arg_2"	"time"	7	0	2
4501	863	"result"	"time"	7	0	0
4502	863	"arg_1"	"decimal"	18	0	1
4503	863	"arg_2"	"time"	7	0	2
4504	864	"result"	"time"	7	0	0
4505	864	"arg_1"	"decimal"	39	0	1
4506	864	"arg_2"	"time"	7	0	2
4507	865	"result"	"time"	7	0	0
4508	865	"arg_1"	"real"	24	0	1
4509	865	"arg_2"	"time"	7	0	2
4510	866	"result"	"time"	7	0	0
4511	866	"arg_1"	"double"	53	0	1
4512	866	"arg_2"	"time"	7	0	2
4513	867	"result"	"time"	7	0	0
4514	867	"arg_1"	"month_interval"	32	0	1
4515	867	"arg_2"	"time"	7	0	2
4516	868	"result"	"time"	7	0	0
4517	868	"arg_1"	"sec_interval"	19	0	1
4518	868	"arg_2"	"time"	7	0	2
4519	869	"result"	"time"	7	0	0
4520	869	"arg_1"	"time"	7	0	1
4521	869	"arg_2"	"time"	7	0	2
4522	870	"result"	"time"	7	0	0
4523	870	"arg_1"	"timetz"	7	0	1
4524	870	"arg_2"	"time"	7	0	2
4525	871	"result"	"time"	7	0	0
4526	871	"arg_1"	"date"	0	0	1
4527	871	"arg_2"	"time"	7	0	2
4528	872	"result"	"time"	7	0	0
4529	872	"arg_1"	"timestamp"	7	0	1
4530	872	"arg_2"	"time"	7	0	2
4531	873	"result"	"time"	7	0	0
4532	873	"arg_1"	"timestamptz"	7	0	1
4533	873	"arg_2"	"time"	7	0	2
4534	874	"result"	"time"	7	0	0
4535	874	"arg_1"	"blob"	0	0	1
4536	874	"arg_2"	"time"	7	0	2
4537	875	"result"	"timetz"	7	0	0
4538	875	"arg_1"	"tinyint"	8	0	1
4539	875	"arg_2"	"timetz"	7	0	2
4540	876	"result"	"timetz"	7	0	0
4541	876	"arg_1"	"smallint"	16	0	1
4542	876	"arg_2"	"timetz"	7	0	2
4543	877	"result"	"timetz"	7	0	0
4544	877	"arg_1"	"int"	32	0	1
4545	877	"arg_2"	"timetz"	7	0	2
4546	878	"result"	"timetz"	7	0	0
4547	878	"arg_1"	"oid"	31	0	1
4548	878	"arg_2"	"timetz"	7	0	2
4549	879	"result"	"timetz"	7	0	0
4550	879	"arg_1"	"bigint"	64	0	1
4551	879	"arg_2"	"timetz"	7	0	2
4552	880	"result"	"timetz"	7	0	0
4553	880	"arg_1"	"wrd"	64	0	1
4554	880	"arg_2"	"timetz"	7	0	2
4555	881	"result"	"timetz"	7	0	0
4556	881	"arg_1"	"hugeint"	128	0	1
4557	881	"arg_2"	"timetz"	7	0	2
4558	882	"result"	"timetz"	7	0	0
4559	882	"arg_1"	"decimal"	2	0	1
4560	882	"arg_2"	"timetz"	7	0	2
4561	883	"result"	"timetz"	7	0	0
4562	883	"arg_1"	"decimal"	4	0	1
4563	883	"arg_2"	"timetz"	7	0	2
4564	884	"result"	"timetz"	7	0	0
4565	884	"arg_1"	"decimal"	9	0	1
4566	884	"arg_2"	"timetz"	7	0	2
4567	885	"result"	"timetz"	7	0	0
4568	885	"arg_1"	"decimal"	18	0	1
4569	885	"arg_2"	"timetz"	7	0	2
4570	886	"result"	"timetz"	7	0	0
4571	886	"arg_1"	"decimal"	39	0	1
4572	886	"arg_2"	"timetz"	7	0	2
4573	887	"result"	"timetz"	7	0	0
4574	887	"arg_1"	"real"	24	0	1
4575	887	"arg_2"	"timetz"	7	0	2
4576	888	"result"	"timetz"	7	0	0
4577	888	"arg_1"	"double"	53	0	1
4578	888	"arg_2"	"timetz"	7	0	2
4579	889	"result"	"timetz"	7	0	0
4580	889	"arg_1"	"month_interval"	32	0	1
4581	889	"arg_2"	"timetz"	7	0	2
4582	890	"result"	"timetz"	7	0	0
4583	890	"arg_1"	"sec_interval"	19	0	1
4584	890	"arg_2"	"timetz"	7	0	2
4585	891	"result"	"timetz"	7	0	0
4586	891	"arg_1"	"time"	7	0	1
4587	891	"arg_2"	"timetz"	7	0	2
4588	892	"result"	"timetz"	7	0	0
4589	892	"arg_1"	"timetz"	7	0	1
4590	892	"arg_2"	"timetz"	7	0	2
4591	893	"result"	"timetz"	7	0	0
4592	893	"arg_1"	"date"	0	0	1
4593	893	"arg_2"	"timetz"	7	0	2
4594	894	"result"	"timetz"	7	0	0
4595	894	"arg_1"	"timestamp"	7	0	1
4596	894	"arg_2"	"timetz"	7	0	2
4597	895	"result"	"timetz"	7	0	0
4598	895	"arg_1"	"timestamptz"	7	0	1
4599	895	"arg_2"	"timetz"	7	0	2
4600	896	"result"	"timetz"	7	0	0
4601	896	"arg_1"	"blob"	0	0	1
4602	896	"arg_2"	"timetz"	7	0	2
4603	897	"result"	"date"	0	0	0
4604	897	"arg_1"	"tinyint"	8	0	1
4605	897	"arg_2"	"date"	0	0	2
4606	898	"result"	"date"	0	0	0
4607	898	"arg_1"	"smallint"	16	0	1
4608	898	"arg_2"	"date"	0	0	2
4609	899	"result"	"date"	0	0	0
4610	899	"arg_1"	"int"	32	0	1
4611	899	"arg_2"	"date"	0	0	2
4612	900	"result"	"date"	0	0	0
4613	900	"arg_1"	"oid"	31	0	1
4614	900	"arg_2"	"date"	0	0	2
4615	901	"result"	"date"	0	0	0
4616	901	"arg_1"	"bigint"	64	0	1
4617	901	"arg_2"	"date"	0	0	2
4618	902	"result"	"date"	0	0	0
4619	902	"arg_1"	"wrd"	64	0	1
4620	902	"arg_2"	"date"	0	0	2
4621	903	"result"	"date"	0	0	0
4622	903	"arg_1"	"hugeint"	128	0	1
4623	903	"arg_2"	"date"	0	0	2
4624	904	"result"	"date"	0	0	0
4625	904	"arg_1"	"decimal"	2	0	1
4626	904	"arg_2"	"date"	0	0	2
4627	905	"result"	"date"	0	0	0
4628	905	"arg_1"	"decimal"	4	0	1
4629	905	"arg_2"	"date"	0	0	2
4630	906	"result"	"date"	0	0	0
4631	906	"arg_1"	"decimal"	9	0	1
4632	906	"arg_2"	"date"	0	0	2
4633	907	"result"	"date"	0	0	0
4634	907	"arg_1"	"decimal"	18	0	1
4635	907	"arg_2"	"date"	0	0	2
4636	908	"result"	"date"	0	0	0
4637	908	"arg_1"	"decimal"	39	0	1
4638	908	"arg_2"	"date"	0	0	2
4639	909	"result"	"date"	0	0	0
4640	909	"arg_1"	"real"	24	0	1
4641	909	"arg_2"	"date"	0	0	2
4642	910	"result"	"date"	0	0	0
4643	910	"arg_1"	"double"	53	0	1
4644	910	"arg_2"	"date"	0	0	2
4645	911	"result"	"date"	0	0	0
4646	911	"arg_1"	"month_interval"	32	0	1
4647	911	"arg_2"	"date"	0	0	2
4648	912	"result"	"date"	0	0	0
4649	912	"arg_1"	"sec_interval"	19	0	1
4650	912	"arg_2"	"date"	0	0	2
4651	913	"result"	"date"	0	0	0
4652	913	"arg_1"	"time"	7	0	1
4653	913	"arg_2"	"date"	0	0	2
4654	914	"result"	"date"	0	0	0
4655	914	"arg_1"	"timetz"	7	0	1
4656	914	"arg_2"	"date"	0	0	2
4657	915	"result"	"date"	0	0	0
4658	915	"arg_1"	"date"	0	0	1
4659	915	"arg_2"	"date"	0	0	2
4660	916	"result"	"date"	0	0	0
4661	916	"arg_1"	"timestamp"	7	0	1
4662	916	"arg_2"	"date"	0	0	2
4663	917	"result"	"date"	0	0	0
4664	917	"arg_1"	"timestamptz"	7	0	1
4665	917	"arg_2"	"date"	0	0	2
4666	918	"result"	"date"	0	0	0
4667	918	"arg_1"	"blob"	0	0	1
4668	918	"arg_2"	"date"	0	0	2
4669	919	"result"	"timestamp"	7	0	0
4670	919	"arg_1"	"tinyint"	8	0	1
4671	919	"arg_2"	"timestamp"	7	0	2
4672	920	"result"	"timestamp"	7	0	0
4673	920	"arg_1"	"smallint"	16	0	1
4674	920	"arg_2"	"timestamp"	7	0	2
4675	921	"result"	"timestamp"	7	0	0
4676	921	"arg_1"	"int"	32	0	1
4677	921	"arg_2"	"timestamp"	7	0	2
4678	922	"result"	"timestamp"	7	0	0
4679	922	"arg_1"	"oid"	31	0	1
4680	922	"arg_2"	"timestamp"	7	0	2
4681	923	"result"	"timestamp"	7	0	0
4682	923	"arg_1"	"bigint"	64	0	1
4683	923	"arg_2"	"timestamp"	7	0	2
4684	924	"result"	"timestamp"	7	0	0
4685	924	"arg_1"	"wrd"	64	0	1
4686	924	"arg_2"	"timestamp"	7	0	2
4687	925	"result"	"timestamp"	7	0	0
4688	925	"arg_1"	"hugeint"	128	0	1
4689	925	"arg_2"	"timestamp"	7	0	2
4690	926	"result"	"timestamp"	7	0	0
4691	926	"arg_1"	"decimal"	2	0	1
4692	926	"arg_2"	"timestamp"	7	0	2
4693	927	"result"	"timestamp"	7	0	0
4694	927	"arg_1"	"decimal"	4	0	1
4695	927	"arg_2"	"timestamp"	7	0	2
4696	928	"result"	"timestamp"	7	0	0
4697	928	"arg_1"	"decimal"	9	0	1
4698	928	"arg_2"	"timestamp"	7	0	2
4699	929	"result"	"timestamp"	7	0	0
4700	929	"arg_1"	"decimal"	18	0	1
4701	929	"arg_2"	"timestamp"	7	0	2
4702	930	"result"	"timestamp"	7	0	0
4703	930	"arg_1"	"decimal"	39	0	1
4704	930	"arg_2"	"timestamp"	7	0	2
4705	931	"result"	"timestamp"	7	0	0
4706	931	"arg_1"	"real"	24	0	1
4707	931	"arg_2"	"timestamp"	7	0	2
4708	932	"result"	"timestamp"	7	0	0
4709	932	"arg_1"	"double"	53	0	1
4710	932	"arg_2"	"timestamp"	7	0	2
4711	933	"result"	"timestamp"	7	0	0
4712	933	"arg_1"	"month_interval"	32	0	1
4713	933	"arg_2"	"timestamp"	7	0	2
4714	934	"result"	"timestamp"	7	0	0
4715	934	"arg_1"	"sec_interval"	19	0	1
4716	934	"arg_2"	"timestamp"	7	0	2
4717	935	"result"	"timestamp"	7	0	0
4718	935	"arg_1"	"time"	7	0	1
4719	935	"arg_2"	"timestamp"	7	0	2
4720	936	"result"	"timestamp"	7	0	0
4721	936	"arg_1"	"timetz"	7	0	1
4722	936	"arg_2"	"timestamp"	7	0	2
4723	937	"result"	"timestamp"	7	0	0
4724	937	"arg_1"	"date"	0	0	1
4725	937	"arg_2"	"timestamp"	7	0	2
4726	938	"result"	"timestamp"	7	0	0
4727	938	"arg_1"	"timestamp"	7	0	1
4728	938	"arg_2"	"timestamp"	7	0	2
4729	939	"result"	"timestamp"	7	0	0
4730	939	"arg_1"	"timestamptz"	7	0	1
4731	939	"arg_2"	"timestamp"	7	0	2
4732	940	"result"	"timestamp"	7	0	0
4733	940	"arg_1"	"blob"	0	0	1
4734	940	"arg_2"	"timestamp"	7	0	2
4735	941	"result"	"timestamptz"	7	0	0
4736	941	"arg_1"	"tinyint"	8	0	1
4737	941	"arg_2"	"timestamptz"	7	0	2
4738	942	"result"	"timestamptz"	7	0	0
4739	942	"arg_1"	"smallint"	16	0	1
4740	942	"arg_2"	"timestamptz"	7	0	2
4741	943	"result"	"timestamptz"	7	0	0
4742	943	"arg_1"	"int"	32	0	1
4743	943	"arg_2"	"timestamptz"	7	0	2
4744	944	"result"	"timestamptz"	7	0	0
4745	944	"arg_1"	"oid"	31	0	1
4746	944	"arg_2"	"timestamptz"	7	0	2
4747	945	"result"	"timestamptz"	7	0	0
4748	945	"arg_1"	"bigint"	64	0	1
4749	945	"arg_2"	"timestamptz"	7	0	2
4750	946	"result"	"timestamptz"	7	0	0
4751	946	"arg_1"	"wrd"	64	0	1
4752	946	"arg_2"	"timestamptz"	7	0	2
4753	947	"result"	"timestamptz"	7	0	0
4754	947	"arg_1"	"hugeint"	128	0	1
4755	947	"arg_2"	"timestamptz"	7	0	2
4756	948	"result"	"timestamptz"	7	0	0
4757	948	"arg_1"	"decimal"	2	0	1
4758	948	"arg_2"	"timestamptz"	7	0	2
4759	949	"result"	"timestamptz"	7	0	0
4760	949	"arg_1"	"decimal"	4	0	1
4761	949	"arg_2"	"timestamptz"	7	0	2
4762	950	"result"	"timestamptz"	7	0	0
4763	950	"arg_1"	"decimal"	9	0	1
4764	950	"arg_2"	"timestamptz"	7	0	2
4765	951	"result"	"timestamptz"	7	0	0
4766	951	"arg_1"	"decimal"	18	0	1
4767	951	"arg_2"	"timestamptz"	7	0	2
4768	952	"result"	"timestamptz"	7	0	0
4769	952	"arg_1"	"decimal"	39	0	1
4770	952	"arg_2"	"timestamptz"	7	0	2
4771	953	"result"	"timestamptz"	7	0	0
4772	953	"arg_1"	"real"	24	0	1
4773	953	"arg_2"	"timestamptz"	7	0	2
4774	954	"result"	"timestamptz"	7	0	0
4775	954	"arg_1"	"double"	53	0	1
4776	954	"arg_2"	"timestamptz"	7	0	2
4777	955	"result"	"timestamptz"	7	0	0
4778	955	"arg_1"	"month_interval"	32	0	1
4779	955	"arg_2"	"timestamptz"	7	0	2
4780	956	"result"	"timestamptz"	7	0	0
4781	956	"arg_1"	"sec_interval"	19	0	1
4782	956	"arg_2"	"timestamptz"	7	0	2
4783	957	"result"	"timestamptz"	7	0	0
4784	957	"arg_1"	"time"	7	0	1
4785	957	"arg_2"	"timestamptz"	7	0	2
4786	958	"result"	"timestamptz"	7	0	0
4787	958	"arg_1"	"timetz"	7	0	1
4788	958	"arg_2"	"timestamptz"	7	0	2
4789	959	"result"	"timestamptz"	7	0	0
4790	959	"arg_1"	"date"	0	0	1
4791	959	"arg_2"	"timestamptz"	7	0	2
4792	960	"result"	"timestamptz"	7	0	0
4793	960	"arg_1"	"timestamp"	7	0	1
4794	960	"arg_2"	"timestamptz"	7	0	2
4795	961	"result"	"timestamptz"	7	0	0
4796	961	"arg_1"	"timestamptz"	7	0	1
4797	961	"arg_2"	"timestamptz"	7	0	2
4798	962	"result"	"timestamptz"	7	0	0
4799	962	"arg_1"	"blob"	0	0	1
4800	962	"arg_2"	"timestamptz"	7	0	2
4801	963	"result"	"blob"	0	0	0
4802	963	"arg_1"	"tinyint"	8	0	1
4803	963	"arg_2"	"blob"	0	0	2
4804	964	"result"	"blob"	0	0	0
4805	964	"arg_1"	"smallint"	16	0	1
4806	964	"arg_2"	"blob"	0	0	2
4807	965	"result"	"blob"	0	0	0
4808	965	"arg_1"	"int"	32	0	1
4809	965	"arg_2"	"blob"	0	0	2
4810	966	"result"	"blob"	0	0	0
4811	966	"arg_1"	"oid"	31	0	1
4812	966	"arg_2"	"blob"	0	0	2
4813	967	"result"	"blob"	0	0	0
4814	967	"arg_1"	"bigint"	64	0	1
4815	967	"arg_2"	"blob"	0	0	2
4816	968	"result"	"blob"	0	0	0
4817	968	"arg_1"	"wrd"	64	0	1
4818	968	"arg_2"	"blob"	0	0	2
4819	969	"result"	"blob"	0	0	0
4820	969	"arg_1"	"hugeint"	128	0	1
4821	969	"arg_2"	"blob"	0	0	2
4822	970	"result"	"blob"	0	0	0
4823	970	"arg_1"	"decimal"	2	0	1
4824	970	"arg_2"	"blob"	0	0	2
4825	971	"result"	"blob"	0	0	0
4826	971	"arg_1"	"decimal"	4	0	1
4827	971	"arg_2"	"blob"	0	0	2
4828	972	"result"	"blob"	0	0	0
4829	972	"arg_1"	"decimal"	9	0	1
4830	972	"arg_2"	"blob"	0	0	2
4831	973	"result"	"blob"	0	0	0
4832	973	"arg_1"	"decimal"	18	0	1
4833	973	"arg_2"	"blob"	0	0	2
4834	974	"result"	"blob"	0	0	0
4835	974	"arg_1"	"decimal"	39	0	1
4836	974	"arg_2"	"blob"	0	0	2
4837	975	"result"	"blob"	0	0	0
4838	975	"arg_1"	"real"	24	0	1
4839	975	"arg_2"	"blob"	0	0	2
4840	976	"result"	"blob"	0	0	0
4841	976	"arg_1"	"double"	53	0	1
4842	976	"arg_2"	"blob"	0	0	2
4843	977	"result"	"blob"	0	0	0
4844	977	"arg_1"	"month_interval"	32	0	1
4845	977	"arg_2"	"blob"	0	0	2
4846	978	"result"	"blob"	0	0	0
4847	978	"arg_1"	"sec_interval"	19	0	1
4848	978	"arg_2"	"blob"	0	0	2
4849	979	"result"	"blob"	0	0	0
4850	979	"arg_1"	"time"	7	0	1
4851	979	"arg_2"	"blob"	0	0	2
4852	980	"result"	"blob"	0	0	0
4853	980	"arg_1"	"timetz"	7	0	1
4854	980	"arg_2"	"blob"	0	0	2
4855	981	"result"	"blob"	0	0	0
4856	981	"arg_1"	"date"	0	0	1
4857	981	"arg_2"	"blob"	0	0	2
4858	982	"result"	"blob"	0	0	0
4859	982	"arg_1"	"timestamp"	7	0	1
4860	982	"arg_2"	"blob"	0	0	2
4861	983	"result"	"blob"	0	0	0
4862	983	"arg_1"	"timestamptz"	7	0	1
4863	983	"arg_2"	"blob"	0	0	2
4864	984	"result"	"blob"	0	0	0
4865	984	"arg_1"	"blob"	0	0	1
4866	984	"arg_2"	"blob"	0	0	2
4867	985	"result"	"double"	53	0	0
4868	985	"arg_1"	"double"	53	0	1
4869	985	"arg_2"	"double"	53	0	2
4870	986	"result"	"double"	53	0	0
4871	986	"arg_1"	"double"	53	0	1
4872	987	"result"	"double"	53	0	0
4873	987	"arg_1"	"double"	53	0	1
4874	988	"result"	"double"	53	0	0
4875	988	"arg_1"	"double"	53	0	1
4876	989	"result"	"double"	53	0	0
4877	989	"arg_1"	"double"	53	0	1
4878	990	"result"	"double"	53	0	0
4879	990	"arg_1"	"double"	53	0	1
4880	991	"result"	"double"	53	0	0
4881	991	"arg_1"	"double"	53	0	1
4882	992	"result"	"double"	53	0	0
4883	992	"arg_1"	"double"	53	0	1
4884	993	"result"	"double"	53	0	0
4885	993	"arg_1"	"double"	53	0	1
4886	994	"result"	"double"	53	0	0
4887	994	"arg_1"	"double"	53	0	1
4888	995	"result"	"double"	53	0	0
4889	995	"arg_1"	"double"	53	0	1
4890	995	"arg_2"	"double"	53	0	2
4891	996	"result"	"double"	53	0	0
4892	996	"arg_1"	"double"	53	0	1
4893	997	"result"	"double"	53	0	0
4894	997	"arg_1"	"double"	53	0	1
4895	998	"result"	"double"	53	0	0
4896	998	"arg_1"	"double"	53	0	1
4897	999	"result"	"double"	53	0	0
4898	999	"arg_1"	"double"	53	0	1
4899	1000	"result"	"double"	53	0	0
4900	1000	"arg_1"	"double"	53	0	1
4901	1001	"result"	"double"	53	0	0
4902	1001	"arg_1"	"double"	53	0	1
4903	1002	"result"	"double"	53	0	0
4904	1002	"arg_1"	"double"	53	0	1
4905	1003	"result"	"double"	53	0	0
4906	1003	"arg_1"	"double"	53	0	1
4907	1004	"result"	"real"	24	0	0
4908	1004	"arg_1"	"real"	24	0	1
4909	1004	"arg_2"	"real"	24	0	2
4910	1005	"result"	"real"	24	0	0
4911	1005	"arg_1"	"real"	24	0	1
4912	1006	"result"	"real"	24	0	0
4913	1006	"arg_1"	"real"	24	0	1
4914	1007	"result"	"real"	24	0	0
4915	1007	"arg_1"	"real"	24	0	1
4916	1008	"result"	"real"	24	0	0
4917	1008	"arg_1"	"real"	24	0	1
4918	1009	"result"	"real"	24	0	0
4919	1009	"arg_1"	"real"	24	0	1
4920	1010	"result"	"real"	24	0	0
4921	1010	"arg_1"	"real"	24	0	1
4922	1011	"result"	"real"	24	0	0
4923	1011	"arg_1"	"real"	24	0	1
4924	1012	"result"	"real"	24	0	0
4925	1012	"arg_1"	"real"	24	0	1
4926	1013	"result"	"real"	24	0	0
4927	1013	"arg_1"	"real"	24	0	1
4928	1014	"result"	"real"	24	0	0
4929	1014	"arg_1"	"real"	24	0	1
4930	1014	"arg_2"	"real"	24	0	2
4931	1015	"result"	"real"	24	0	0
4932	1015	"arg_1"	"real"	24	0	1
4933	1016	"result"	"real"	24	0	0
4934	1016	"arg_1"	"real"	24	0	1
4935	1017	"result"	"real"	24	0	0
4936	1017	"arg_1"	"real"	24	0	1
4937	1018	"result"	"real"	24	0	0
4938	1018	"arg_1"	"real"	24	0	1
4939	1019	"result"	"real"	24	0	0
4940	1019	"arg_1"	"real"	24	0	1
4941	1020	"result"	"real"	24	0	0
4942	1020	"arg_1"	"real"	24	0	1
4943	1021	"result"	"real"	24	0	0
4944	1021	"arg_1"	"real"	24	0	1
4945	1022	"result"	"real"	24	0	0
4946	1022	"arg_1"	"real"	24	0	1
4947	1023	"result"	"double"	53	0	0
4948	1024	"result"	"int"	32	0	0
4949	1025	"result"	"int"	32	0	0
4950	1025	"arg_1"	"int"	32	0	1
4951	1026	"result"	"date"	0	0	0
4952	1027	"result"	"date"	0	0	0
4953	1028	"result"	"timetz"	7	0	0
4954	1029	"result"	"timetz"	7	0	0
4955	1030	"result"	"timestamptz"	7	0	0
4956	1031	"result"	"time"	7	0	0
4957	1032	"result"	"timestamp"	7	0	0
4958	1033	"result"	"date"	0	0	0
4959	1033	"arg_1"	"date"	0	0	1
4960	1033	"arg_2"	"sec_interval"	19	0	2
4961	1034	"result"	"date"	0	0	0
4962	1034	"arg_1"	"date"	0	0	1
4963	1034	"arg_2"	"month_interval"	32	0	2
4964	1035	"result"	"timestamp"	7	0	0
4965	1035	"arg_1"	"timestamp"	7	0	1
4966	1035	"arg_2"	"sec_interval"	19	0	2
4967	1036	"result"	"timestamp"	7	0	0
4968	1036	"arg_1"	"timestamp"	7	0	1
4969	1036	"arg_2"	"month_interval"	32	0	2
4970	1037	"result"	"timestamptz"	7	0	0
4971	1037	"arg_1"	"timestamptz"	7	0	1
4972	1037	"arg_2"	"sec_interval"	19	0	2
4973	1038	"result"	"timestamptz"	7	0	0
4974	1038	"arg_1"	"timestamptz"	7	0	1
4975	1038	"arg_2"	"month_interval"	32	0	2
4976	1039	"result"	"time"	7	0	0
4977	1039	"arg_1"	"time"	7	0	1
4978	1039	"arg_2"	"sec_interval"	19	0	2
4979	1040	"result"	"int"	32	0	0
4980	1040	"arg_1"	"date"	0	0	1
4981	1040	"arg_2"	"date"	0	0	2
4982	1041	"result"	"bigint"	64	0	0
4983	1041	"arg_1"	"timestamp"	7	0	1
4984	1041	"arg_2"	"timestamp"	7	0	2
4985	1042	"result"	"bigint"	64	0	0
4986	1042	"arg_1"	"timestamptz"	7	0	1
4987	1042	"arg_2"	"timestamptz"	7	0	2
4988	1043	"result"	"date"	0	0	0
4989	1043	"arg_1"	"date"	0	0	1
4990	1043	"arg_2"	"sec_interval"	19	0	2
4991	1044	"result"	"date"	0	0	0
4992	1044	"arg_1"	"date"	0	0	1
4993	1044	"arg_2"	"month_interval"	32	0	2
4994	1045	"result"	"timestamp"	7	0	0
4995	1045	"arg_1"	"timestamp"	7	0	1
4996	1045	"arg_2"	"sec_interval"	19	0	2
4997	1046	"result"	"timestamp"	7	0	0
4998	1046	"arg_1"	"timestamp"	7	0	1
4999	1046	"arg_2"	"month_interval"	32	0	2
5000	1047	"result"	"timestamptz"	7	0	0
5001	1047	"arg_1"	"timestamptz"	7	0	1
5002	1047	"arg_2"	"sec_interval"	19	0	2
5003	1048	"result"	"timestamptz"	7	0	0
5004	1048	"arg_1"	"timestamptz"	7	0	1
5005	1048	"arg_2"	"month_interval"	32	0	2
5006	1049	"result"	"time"	7	0	0
5007	1049	"arg_1"	"time"	7	0	1
5008	1049	"arg_2"	"sec_interval"	19	0	2
5009	1050	"result"	"sec_interval"	19	0	0
5010	1051	"result"	"int"	32	0	0
5011	1051	"arg_1"	"date"	0	0	1
5012	1052	"result"	"int"	32	0	0
5013	1052	"arg_1"	"date"	0	0	1
5014	1053	"result"	"int"	32	0	0
5015	1053	"arg_1"	"date"	0	0	1
5016	1054	"result"	"int"	32	0	0
5017	1054	"arg_1"	"time"	7	0	1
5018	1055	"result"	"int"	32	0	0
5019	1055	"arg_1"	"time"	7	0	1
5020	1056	"result"	"decimal"	9	3	0
5021	1056	"arg_1"	"time"	7	0	1
5022	1057	"result"	"int"	32	0	0
5023	1057	"arg_1"	"timestamp"	7	0	1
5024	1058	"result"	"int"	32	0	0
5025	1058	"arg_1"	"timestamp"	7	0	1
5026	1059	"result"	"int"	32	0	0
5027	1059	"arg_1"	"timestamp"	7	0	1
5028	1060	"result"	"int"	32	0	0
5029	1060	"arg_1"	"timestamp"	7	0	1
5030	1061	"result"	"int"	32	0	0
5031	1061	"arg_1"	"timestamp"	7	0	1
5032	1062	"result"	"decimal"	9	3	0
5033	1062	"arg_1"	"timestamp"	7	0	1
5034	1063	"result"	"int"	32	0	0
5035	1063	"arg_1"	"timestamptz"	7	0	1
5036	1064	"result"	"int"	32	0	0
5037	1064	"arg_1"	"timestamptz"	7	0	1
5038	1065	"result"	"int"	32	0	0
5039	1065	"arg_1"	"timestamptz"	7	0	1
5040	1066	"result"	"int"	32	0	0
5041	1066	"arg_1"	"timestamptz"	7	0	1
5042	1067	"result"	"int"	32	0	0
5043	1067	"arg_1"	"timestamptz"	7	0	1
5044	1068	"result"	"decimal"	9	3	0
5045	1068	"arg_1"	"timestamptz"	7	0	1
5046	1069	"result"	"int"	32	0	0
5047	1069	"arg_1"	"month_interval"	32	0	1
5048	1070	"result"	"int"	32	0	0
5049	1070	"arg_1"	"month_interval"	32	0	1
5050	1071	"result"	"bigint"	64	0	0
5051	1071	"arg_1"	"sec_interval"	19	0	1
5052	1072	"result"	"int"	32	0	0
5053	1072	"arg_1"	"sec_interval"	19	0	1
5054	1073	"result"	"int"	32	0	0
5055	1073	"arg_1"	"sec_interval"	19	0	1
5056	1074	"result"	"int"	32	0	0
5057	1074	"arg_1"	"sec_interval"	19	0	1
5058	1075	"result"	"int"	32	0	0
5059	1075	"arg_1"	"date"	0	0	1
5060	1076	"result"	"int"	32	0	0
5061	1076	"arg_1"	"date"	0	0	1
5062	1077	"result"	"int"	32	0	0
5063	1077	"arg_1"	"date"	0	0	1
5064	1078	"result"	"int"	32	0	0
5065	1078	"arg_1"	"date"	0	0	1
5066	1079	"result"	"int"	32	0	0
5067	1079	"arg_1"	"date"	0	0	1
5068	1080	"result"	"bigint"	64	0	0
5069	1080	"arg_1"	"varchar"	0	0	1
5070	1080	"arg_2"	"varchar"	0	0	2
5071	1081	"result"	"bigint"	64	0	0
5072	1081	"arg_1"	"varchar"	0	0	1
5073	1081	"arg_2"	"varchar"	0	0	2
5074	1082	"result"	"bigint"	64	0	0
5075	1082	"arg_1"	"varchar"	0	0	1
5076	1082	"arg_2"	"varchar"	0	0	2
5077	1082	"arg_3"	"bigint"	64	0	3
5078	1083	"result"	"int"	32	0	0
5079	1083	"arg_1"	"char"	0	0	1
5080	1083	"arg_2"	"char"	0	0	2
5081	1084	"result"	"int"	32	0	0
5082	1084	"arg_1"	"char"	0	0	1
5083	1084	"arg_2"	"char"	0	0	2
5084	1084	"arg_3"	"int"	32	0	3
5085	1085	"result"	"char"	0	0	0
5086	1085	"arg_1"	"char"	0	0	1
5087	1085	"arg_2"	"int"	32	0	2
5088	1086	"result"	"char"	0	0	0
5089	1086	"arg_1"	"char"	0	0	1
5090	1086	"arg_2"	"int"	32	0	2
5091	1086	"arg_3"	"int"	32	0	3
5092	1087	"result"	"boolean"	1	0	0
5093	1087	"arg_1"	"char"	0	0	1
5094	1087	"arg_2"	"char"	0	0	2
5095	1088	"result"	"boolean"	1	0	0
5096	1088	"arg_1"	"char"	0	0	1
5097	1088	"arg_2"	"char"	0	0	2
5098	1088	"arg_3"	"char"	0	0	3
5099	1089	"result"	"boolean"	1	0	0
5100	1089	"arg_1"	"char"	0	0	1
5101	1089	"arg_2"	"char"	0	0	2
5102	1090	"result"	"boolean"	1	0	0
5103	1090	"arg_1"	"char"	0	0	1
5104	1090	"arg_2"	"char"	0	0	2
5105	1090	"arg_3"	"char"	0	0	3
5106	1091	"result"	"boolean"	1	0	0
5107	1091	"arg_1"	"char"	0	0	1
5108	1091	"arg_2"	"char"	0	0	2
5109	1092	"result"	"boolean"	1	0	0
5110	1092	"arg_1"	"char"	0	0	1
5111	1092	"arg_2"	"char"	0	0	2
5112	1092	"arg_3"	"char"	0	0	3
5113	1093	"result"	"boolean"	1	0	0
5114	1093	"arg_1"	"char"	0	0	1
5115	1093	"arg_2"	"char"	0	0	2
5116	1094	"result"	"boolean"	1	0	0
5117	1094	"arg_1"	"char"	0	0	1
5118	1094	"arg_2"	"char"	0	0	2
5119	1094	"arg_3"	"char"	0	0	3
5120	1095	"result"	"int"	32	0	0
5121	1095	"arg_1"	"char"	0	0	1
5122	1095	"arg_2"	"char"	0	0	2
5123	1096	"result"	"char"	0	0	0
5124	1096	"arg_1"	"char"	0	0	1
5125	1096	"arg_2"	"int"	32	0	2
5126	1097	"result"	"char"	0	0	0
5127	1097	"arg_1"	"char"	0	0	1
5128	1097	"arg_2"	"char"	0	0	2
5129	1098	"result"	"int"	32	0	0
5130	1098	"arg_1"	"char"	0	0	1
5131	1099	"result"	"char"	0	0	0
5132	1099	"arg_1"	"int"	32	0	1
5133	1100	"result"	"int"	32	0	0
5134	1100	"arg_1"	"char"	0	0	1
5135	1101	"result"	"char"	0	0	0
5136	1101	"arg_1"	"char"	0	0	1
5137	1101	"arg_2"	"int"	32	0	2
5138	1102	"result"	"char"	0	0	0
5139	1102	"arg_1"	"char"	0	0	1
5140	1102	"arg_2"	"int"	32	0	2
5141	1103	"result"	"char"	0	0	0
5142	1103	"arg_1"	"char"	0	0	1
5143	1104	"result"	"char"	0	0	0
5144	1104	"arg_1"	"char"	0	0	1
5145	1105	"result"	"char"	0	0	0
5146	1105	"arg_1"	"char"	0	0	1
5147	1106	"result"	"char"	0	0	0
5148	1106	"arg_1"	"char"	0	0	1
5149	1107	"result"	"char"	0	0	0
5150	1107	"arg_1"	"char"	0	0	1
5151	1108	"result"	"char"	0	0	0
5152	1108	"arg_1"	"char"	0	0	1
5153	1109	"result"	"char"	0	0	0
5154	1109	"arg_1"	"char"	0	0	1
5155	1110	"result"	"char"	0	0	0
5156	1110	"arg_1"	"char"	0	0	1
5157	1110	"arg_2"	"int"	32	0	2
5158	1110	"arg_3"	"int"	32	0	3
5159	1110	"arg_4"	"char"	0	0	4
5160	1111	"result"	"char"	0	0	0
5161	1111	"arg_1"	"char"	0	0	1
5162	1111	"arg_2"	"char"	0	0	2
5163	1111	"arg_3"	"char"	0	0	3
5164	1112	"result"	"char"	0	0	0
5165	1112	"arg_1"	"char"	0	0	1
5166	1112	"arg_2"	"int"	32	0	2
5167	1113	"result"	"char"	0	0	0
5168	1113	"arg_1"	"int"	32	0	1
5169	1114	"result"	"int"	32	0	0
5170	1114	"arg_1"	"char"	0	0	1
5171	1115	"result"	"int"	32	0	0
5172	1115	"arg_1"	"char"	0	0	1
5173	1116	"result"	"int"	32	0	0
5174	1116	"arg_1"	"char"	0	0	1
5175	1117	"result"	"char"	0	0	0
5176	1117	"arg_1"	"char"	0	0	1
5177	1118	"result"	"int"	32	0	0
5178	1118	"arg_1"	"char"	0	0	1
5179	1118	"arg_2"	"char"	0	0	2
5180	1119	"result"	"int"	32	0	0
5181	1119	"arg_1"	"char"	0	0	1
5182	1119	"arg_2"	"char"	0	0	2
5183	1120	"result"	"int"	32	0	0
5184	1120	"arg_1"	"char"	0	0	1
5185	1120	"arg_2"	"char"	0	0	2
5186	1121	"result"	"double"	53	0	0
5187	1121	"arg_1"	"char"	0	0	1
5188	1121	"arg_2"	"char"	0	0	2
5189	1122	"result"	"char"	0	0	0
5190	1122	"arg_1"	"char"	0	0	1
5191	1123	"result"	"int"	32	0	0
5192	1123	"arg_1"	"char"	0	0	1
5193	1123	"arg_2"	"char"	0	0	2
5194	1124	"result"	"int"	32	0	0
5195	1124	"arg_1"	"char"	0	0	1
5196	1124	"arg_2"	"char"	0	0	2
5197	1124	"arg_3"	"int"	32	0	3
5198	1124	"arg_4"	"int"	32	0	4
5199	1124	"arg_5"	"int"	32	0	5
5200	1125	"result"	"int"	32	0	0
5201	1125	"arg_1"	"varchar"	0	0	1
5202	1125	"arg_2"	"varchar"	0	0	2
5203	1126	"result"	"int"	32	0	0
5204	1126	"arg_1"	"varchar"	0	0	1
5205	1126	"arg_2"	"varchar"	0	0	2
5206	1126	"arg_3"	"int"	32	0	3
5207	1127	"result"	"varchar"	0	0	0
5208	1127	"arg_1"	"varchar"	0	0	1
5209	1127	"arg_2"	"int"	32	0	2
5210	1128	"result"	"varchar"	0	0	0
5211	1128	"arg_1"	"varchar"	0	0	1
5212	1128	"arg_2"	"int"	32	0	2
5213	1128	"arg_3"	"int"	32	0	3
5214	1129	"result"	"boolean"	1	0	0
5215	1129	"arg_1"	"varchar"	0	0	1
5216	1129	"arg_2"	"varchar"	0	0	2
5217	1130	"result"	"boolean"	1	0	0
5218	1130	"arg_1"	"varchar"	0	0	1
5219	1130	"arg_2"	"varchar"	0	0	2
5220	1130	"arg_3"	"varchar"	0	0	3
5221	1131	"result"	"boolean"	1	0	0
5222	1131	"arg_1"	"varchar"	0	0	1
5223	1131	"arg_2"	"varchar"	0	0	2
5224	1132	"result"	"boolean"	1	0	0
5225	1132	"arg_1"	"varchar"	0	0	1
5226	1132	"arg_2"	"varchar"	0	0	2
5227	1132	"arg_3"	"varchar"	0	0	3
5228	1133	"result"	"boolean"	1	0	0
5229	1133	"arg_1"	"varchar"	0	0	1
5230	1133	"arg_2"	"varchar"	0	0	2
5231	1134	"result"	"boolean"	1	0	0
5232	1134	"arg_1"	"varchar"	0	0	1
5233	1134	"arg_2"	"varchar"	0	0	2
5234	1134	"arg_3"	"varchar"	0	0	3
5235	1135	"result"	"boolean"	1	0	0
5236	1135	"arg_1"	"varchar"	0	0	1
5237	1135	"arg_2"	"varchar"	0	0	2
5238	1136	"result"	"boolean"	1	0	0
5239	1136	"arg_1"	"varchar"	0	0	1
5240	1136	"arg_2"	"varchar"	0	0	2
5241	1136	"arg_3"	"varchar"	0	0	3
5242	1137	"result"	"int"	32	0	0
5243	1137	"arg_1"	"varchar"	0	0	1
5244	1137	"arg_2"	"varchar"	0	0	2
5245	1138	"result"	"varchar"	0	0	0
5246	1138	"arg_1"	"varchar"	0	0	1
5247	1138	"arg_2"	"int"	32	0	2
5248	1139	"result"	"varchar"	0	0	0
5249	1139	"arg_1"	"varchar"	0	0	1
5250	1139	"arg_2"	"varchar"	0	0	2
5251	1140	"result"	"int"	32	0	0
5252	1140	"arg_1"	"varchar"	0	0	1
5253	1141	"result"	"varchar"	0	0	0
5254	1141	"arg_1"	"int"	32	0	1
5255	1142	"result"	"int"	32	0	0
5256	1142	"arg_1"	"varchar"	0	0	1
5257	1143	"result"	"varchar"	0	0	0
5258	1143	"arg_1"	"varchar"	0	0	1
5259	1143	"arg_2"	"int"	32	0	2
5260	1144	"result"	"varchar"	0	0	0
5261	1144	"arg_1"	"varchar"	0	0	1
5262	1144	"arg_2"	"int"	32	0	2
5263	1145	"result"	"varchar"	0	0	0
5264	1145	"arg_1"	"varchar"	0	0	1
5265	1146	"result"	"varchar"	0	0	0
5266	1146	"arg_1"	"varchar"	0	0	1
5267	1147	"result"	"varchar"	0	0	0
5268	1147	"arg_1"	"varchar"	0	0	1
5269	1148	"result"	"varchar"	0	0	0
5270	1148	"arg_1"	"varchar"	0	0	1
5271	1149	"result"	"varchar"	0	0	0
5272	1149	"arg_1"	"varchar"	0	0	1
5273	1150	"result"	"varchar"	0	0	0
5274	1150	"arg_1"	"varchar"	0	0	1
5275	1151	"result"	"varchar"	0	0	0
5276	1151	"arg_1"	"varchar"	0	0	1
5277	1152	"result"	"varchar"	0	0	0
5278	1152	"arg_1"	"varchar"	0	0	1
5279	1152	"arg_2"	"int"	32	0	2
5280	1152	"arg_3"	"int"	32	0	3
5281	1152	"arg_4"	"varchar"	0	0	4
5282	1153	"result"	"varchar"	0	0	0
5283	1153	"arg_1"	"varchar"	0	0	1
5284	1153	"arg_2"	"varchar"	0	0	2
5285	1153	"arg_3"	"varchar"	0	0	3
5286	1154	"result"	"varchar"	0	0	0
5287	1154	"arg_1"	"varchar"	0	0	1
5288	1154	"arg_2"	"int"	32	0	2
5289	1155	"result"	"varchar"	0	0	0
5290	1155	"arg_1"	"int"	32	0	1
5291	1156	"result"	"int"	32	0	0
5292	1156	"arg_1"	"varchar"	0	0	1
5293	1157	"result"	"int"	32	0	0
5294	1157	"arg_1"	"varchar"	0	0	1
5295	1158	"result"	"int"	32	0	0
5296	1158	"arg_1"	"varchar"	0	0	1
5297	1159	"result"	"varchar"	0	0	0
5298	1159	"arg_1"	"varchar"	0	0	1
5299	1160	"result"	"int"	32	0	0
5300	1160	"arg_1"	"varchar"	0	0	1
5301	1160	"arg_2"	"varchar"	0	0	2
5302	1161	"result"	"int"	32	0	0
5303	1161	"arg_1"	"varchar"	0	0	1
5304	1161	"arg_2"	"varchar"	0	0	2
5305	1162	"result"	"int"	32	0	0
5306	1162	"arg_1"	"varchar"	0	0	1
5307	1162	"arg_2"	"varchar"	0	0	2
5308	1163	"result"	"double"	53	0	0
5309	1163	"arg_1"	"varchar"	0	0	1
5310	1163	"arg_2"	"varchar"	0	0	2
5311	1164	"result"	"varchar"	0	0	0
5312	1164	"arg_1"	"varchar"	0	0	1
5313	1165	"result"	"int"	32	0	0
5314	1165	"arg_1"	"varchar"	0	0	1
5315	1165	"arg_2"	"varchar"	0	0	2
5316	1166	"result"	"int"	32	0	0
5317	1166	"arg_1"	"varchar"	0	0	1
5318	1166	"arg_2"	"varchar"	0	0	2
5319	1166	"arg_3"	"int"	32	0	3
5320	1166	"arg_4"	"int"	32	0	4
5321	1166	"arg_5"	"int"	32	0	5
5322	1167	"result"	"int"	32	0	0
5323	1167	"arg_1"	"clob"	0	0	1
5324	1167	"arg_2"	"clob"	0	0	2
5325	1168	"result"	"int"	32	0	0
5326	1168	"arg_1"	"clob"	0	0	1
5327	1168	"arg_2"	"clob"	0	0	2
5328	1168	"arg_3"	"int"	32	0	3
5329	1169	"result"	"clob"	0	0	0
5330	1169	"arg_1"	"clob"	0	0	1
5331	1169	"arg_2"	"int"	32	0	2
5332	1170	"result"	"clob"	0	0	0
5333	1170	"arg_1"	"clob"	0	0	1
5334	1170	"arg_2"	"int"	32	0	2
5335	1170	"arg_3"	"int"	32	0	3
5336	1171	"result"	"boolean"	1	0	0
5337	1171	"arg_1"	"clob"	0	0	1
5338	1171	"arg_2"	"clob"	0	0	2
5339	1172	"result"	"boolean"	1	0	0
5340	1172	"arg_1"	"clob"	0	0	1
5341	1172	"arg_2"	"clob"	0	0	2
5342	1172	"arg_3"	"clob"	0	0	3
5343	1173	"result"	"boolean"	1	0	0
5344	1173	"arg_1"	"clob"	0	0	1
5345	1173	"arg_2"	"clob"	0	0	2
5346	1174	"result"	"boolean"	1	0	0
5347	1174	"arg_1"	"clob"	0	0	1
5348	1174	"arg_2"	"clob"	0	0	2
5349	1174	"arg_3"	"clob"	0	0	3
5350	1175	"result"	"boolean"	1	0	0
5351	1175	"arg_1"	"clob"	0	0	1
5352	1175	"arg_2"	"clob"	0	0	2
5353	1176	"result"	"boolean"	1	0	0
5354	1176	"arg_1"	"clob"	0	0	1
5355	1176	"arg_2"	"clob"	0	0	2
5356	1176	"arg_3"	"clob"	0	0	3
5357	1177	"result"	"boolean"	1	0	0
5358	1177	"arg_1"	"clob"	0	0	1
5359	1177	"arg_2"	"clob"	0	0	2
5360	1178	"result"	"boolean"	1	0	0
5361	1178	"arg_1"	"clob"	0	0	1
5362	1178	"arg_2"	"clob"	0	0	2
5363	1178	"arg_3"	"clob"	0	0	3
5364	1179	"result"	"int"	32	0	0
5365	1179	"arg_1"	"clob"	0	0	1
5366	1179	"arg_2"	"clob"	0	0	2
5367	1180	"result"	"clob"	0	0	0
5368	1180	"arg_1"	"clob"	0	0	1
5369	1180	"arg_2"	"int"	32	0	2
5370	1181	"result"	"clob"	0	0	0
5371	1181	"arg_1"	"clob"	0	0	1
5372	1181	"arg_2"	"clob"	0	0	2
5373	1182	"result"	"int"	32	0	0
5374	1182	"arg_1"	"clob"	0	0	1
5375	1183	"result"	"clob"	0	0	0
5376	1183	"arg_1"	"int"	32	0	1
5377	1184	"result"	"int"	32	0	0
5378	1184	"arg_1"	"clob"	0	0	1
5379	1185	"result"	"clob"	0	0	0
5380	1185	"arg_1"	"clob"	0	0	1
5381	1185	"arg_2"	"int"	32	0	2
5382	1186	"result"	"clob"	0	0	0
5383	1186	"arg_1"	"clob"	0	0	1
5384	1186	"arg_2"	"int"	32	0	2
5385	1187	"result"	"clob"	0	0	0
5386	1187	"arg_1"	"clob"	0	0	1
5387	1188	"result"	"clob"	0	0	0
5388	1188	"arg_1"	"clob"	0	0	1
5389	1189	"result"	"clob"	0	0	0
5390	1189	"arg_1"	"clob"	0	0	1
5391	1190	"result"	"clob"	0	0	0
5392	1190	"arg_1"	"clob"	0	0	1
5393	1191	"result"	"clob"	0	0	0
5394	1191	"arg_1"	"clob"	0	0	1
5395	1192	"result"	"clob"	0	0	0
5396	1192	"arg_1"	"clob"	0	0	1
5397	1193	"result"	"clob"	0	0	0
5398	1193	"arg_1"	"clob"	0	0	1
5399	1194	"result"	"clob"	0	0	0
5400	1194	"arg_1"	"clob"	0	0	1
5401	1194	"arg_2"	"int"	32	0	2
5402	1194	"arg_3"	"int"	32	0	3
5403	1194	"arg_4"	"clob"	0	0	4
5404	1195	"result"	"clob"	0	0	0
5405	1195	"arg_1"	"clob"	0	0	1
5406	1195	"arg_2"	"clob"	0	0	2
5407	1195	"arg_3"	"clob"	0	0	3
5408	1196	"result"	"clob"	0	0	0
5409	1196	"arg_1"	"clob"	0	0	1
5410	1196	"arg_2"	"int"	32	0	2
5411	1197	"result"	"clob"	0	0	0
5412	1197	"arg_1"	"int"	32	0	1
5413	1198	"result"	"int"	32	0	0
5414	1198	"arg_1"	"clob"	0	0	1
5415	1199	"result"	"int"	32	0	0
5416	1199	"arg_1"	"clob"	0	0	1
5417	1200	"result"	"int"	32	0	0
5418	1200	"arg_1"	"clob"	0	0	1
5419	1201	"result"	"clob"	0	0	0
5420	1201	"arg_1"	"clob"	0	0	1
5421	1202	"result"	"int"	32	0	0
5422	1202	"arg_1"	"clob"	0	0	1
5423	1202	"arg_2"	"clob"	0	0	2
5424	1203	"result"	"int"	32	0	0
5425	1203	"arg_1"	"clob"	0	0	1
5426	1203	"arg_2"	"clob"	0	0	2
5427	1204	"result"	"int"	32	0	0
5428	1204	"arg_1"	"clob"	0	0	1
5429	1204	"arg_2"	"clob"	0	0	2
5430	1205	"result"	"double"	53	0	0
5431	1205	"arg_1"	"clob"	0	0	1
5432	1205	"arg_2"	"clob"	0	0	2
5433	1206	"result"	"clob"	0	0	0
5434	1206	"arg_1"	"clob"	0	0	1
5435	1207	"result"	"int"	32	0	0
5436	1207	"arg_1"	"clob"	0	0	1
5437	1207	"arg_2"	"clob"	0	0	2
5438	1208	"result"	"int"	32	0	0
5439	1208	"arg_1"	"clob"	0	0	1
5440	1208	"arg_2"	"clob"	0	0	2
5441	1208	"arg_3"	"int"	32	0	3
5442	1208	"arg_4"	"int"	32	0	4
5443	1208	"arg_5"	"int"	32	0	5
5444	1209	"result"	"table"	0	0	0
5445	1209	"arg_1"	"varchar"	0	0	1
5446	1209	"arg_2"	"varchar"	0	0	2
5447	1209	"arg_3"	"varchar"	0	0	3
5448	1209	"arg_4"	"varchar"	0	0	4
5449	1209	"arg_5"	"varchar"	0	0	5
5450	1209	"arg_6"	"varchar"	0	0	6
5451	1209	"arg_7"	"bigint"	64	0	7
5452	1209	"arg_8"	"bigint"	64	0	8
5453	1210	"result"	"table"	0	0	0
5454	1210	"arg_1"	"varchar"	0	0	1
5455	1210	"arg_2"	"varchar"	0	0	2
5456	1210	"arg_3"	"varchar"	0	0	3
5457	1210	"arg_4"	"varchar"	0	0	4
5458	1210	"arg_5"	"varchar"	0	0	5
5459	1210	"arg_6"	"bigint"	64	0	6
5460	1210	"arg_7"	"bigint"	64	0	7
5461	1211	"result"	"table"	0	0	0
5462	1211	"arg_1"	"varchar"	0	0	1
5463	1211	"arg_2"	"varchar"	0	0	2
5464	29	"result"	"boolean"	1	0	0
5465	29	"arg"	"oid"	31	0	1
5466	41	"result"	"any"	0	0	0
5467	41	"arg"	"any"	0	0	1
5468	42	"result"	"boolean"	1	0	0
5469	42	"arg"	"any"	0	0	1
5470	43	"result"	"boolean"	1	0	0
5471	43	"arg"	"any"	0	0	1
5472	48	"result"	"any"	0	0	0
5473	48	"arg"	"any"	0	0	1
5474	49	"result"	"any"	0	0	0
5475	49	"arg"	"any"	0	0	1
5476	53	"result"	"hugeint"	128	0	0
5477	53	"arg"	"tinyint"	8	0	1
5478	54	"result"	"hugeint"	128	0	0
5479	54	"arg"	"smallint"	16	0	1
5480	55	"result"	"hugeint"	128	0	0
5481	55	"arg"	"int"	32	0	1
5482	56	"result"	"hugeint"	128	0	0
5483	56	"arg"	"bigint"	64	0	1
5484	57	"result"	"hugeint"	128	0	0
5485	57	"arg"	"hugeint"	128	0	1
5486	58	"result"	"wrd"	64	0	0
5487	58	"arg"	"wrd"	64	0	1
5488	59	"result"	"decimal"	39	0	0
5489	59	"arg"	"decimal"	2	0	1
5490	60	"result"	"decimal"	39	0	0
5491	60	"arg"	"decimal"	4	0	1
5492	61	"result"	"decimal"	39	0	0
5493	61	"arg"	"decimal"	9	0	1
5494	62	"result"	"decimal"	39	0	0
5495	62	"arg"	"decimal"	18	0	1
5496	63	"result"	"decimal"	39	0	0
5497	63	"arg"	"decimal"	39	0	1
5498	64	"result"	"hugeint"	128	0	0
5499	64	"arg"	"tinyint"	8	0	1
5500	65	"result"	"hugeint"	128	0	0
5501	65	"arg"	"smallint"	16	0	1
5502	66	"result"	"hugeint"	128	0	0
5503	66	"arg"	"int"	32	0	1
5504	67	"result"	"hugeint"	128	0	0
5505	67	"arg"	"bigint"	64	0	1
5506	68	"result"	"hugeint"	128	0	0
5507	68	"arg"	"hugeint"	128	0	1
5508	69	"result"	"decimal"	39	0	0
5509	69	"arg"	"decimal"	2	0	1
5510	70	"result"	"decimal"	39	0	0
5511	70	"arg"	"decimal"	4	0	1
5512	71	"result"	"decimal"	39	0	0
5513	71	"arg"	"decimal"	9	0	1
5514	72	"result"	"decimal"	39	0	0
5515	72	"arg"	"decimal"	18	0	1
5516	73	"result"	"decimal"	39	0	0
5517	73	"arg"	"decimal"	39	0	1
5518	88	"result"	"real"	24	0	0
5519	88	"arg"	"real"	24	0	1
5520	89	"result"	"real"	24	0	0
5521	89	"arg"	"real"	24	0	1
5522	90	"result"	"double"	53	0	0
5523	90	"arg"	"double"	53	0	1
5524	91	"result"	"double"	53	0	0
5525	91	"arg"	"double"	53	0	1
5526	92	"result"	"double"	53	0	0
5527	92	"arg"	"double"	53	0	1
5528	93	"result"	"wrd"	64	0	0
5529	94	"result"	"wrd"	64	0	0
5555	5554	"result"	"table"	5551	0	0
5559	5558	"result"	"table"	5556	0	0
5567	5566	"result"	"table"	5564	0	0
5587	5586	"val"	"clob"	0	0	0
5588	5586	"pat"	"clob"	0	0	1
5589	5586	"esc"	"clob"	0	0	2
5592	5591	"val"	"clob"	0	0	0
5593	5591	"pat"	"clob"	0	0	1
5594	5591	"esc"	"clob"	0	0	2
5597	5596	"result"	"double"	53	0	0
5598	5596	"r"	"double"	53	0	1
5601	5600	"result"	"double"	53	0	0
5602	5600	"d"	"double"	53	0	1
5608	5607	"result"	"clob"	0	0	0
5609	5607	"theurl"	"url"	0	0	1
5612	5611	"result"	"clob"	0	0	0
5613	5611	"theurl"	"url"	0	0	1
5616	5615	"result"	"clob"	0	0	0
5617	5615	"theurl"	"url"	0	0	1
5620	5619	"result"	"clob"	0	0	0
5621	5619	"theurl"	"url"	0	0	1
5624	5623	"result"	"clob"	0	0	0
5625	5623	"theurl"	"url"	0	0	1
5628	5627	"result"	"clob"	0	0	0
5629	5627	"theurl"	"url"	0	0	1
5632	5631	"result"	"clob"	0	0	0
5633	5631	"theurl"	"url"	0	0	1
5636	5635	"result"	"clob"	0	0	0
5637	5635	"theurl"	"url"	0	0	1
5640	5639	"result"	"clob"	0	0	0
5641	5639	"theurl"	"url"	0	0	1
5644	5643	"result"	"clob"	0	0	0
5645	5643	"theurl"	"url"	0	0	1
5648	5647	"result"	"clob"	0	0	0
5649	5647	"theurl"	"url"	0	0	1
5652	5651	"result"	"clob"	0	0	0
5653	5651	"theurl"	"url"	0	0	1
5656	5655	"result"	"clob"	0	0	0
5657	5655	"theurl"	"url"	0	0	1
5660	5659	"result"	"boolean"	1	0	0
5661	5659	"theurl"	"url"	0	0	1
5664	5663	"result"	"url"	0	0	0
5665	5663	"protocol"	"clob"	0	0	1
5666	5663	"hostname"	"clob"	0	0	2
5667	5663	"port"	"int"	32	0	3
5668	5663	"file"	"clob"	0	0	4
5671	5670	"result"	"url"	0	0	0
5672	5670	"protocol"	"clob"	0	0	1
5673	5670	"hostname"	"clob"	0	0	2
5674	5670	"file"	"clob"	0	0	3
5677	5676	"result"	"date"	0	0	0
5678	5676	"s"	"clob"	0	0	1
5679	5676	"format"	"clob"	0	0	2
5682	5681	"result"	"clob"	0	0	0
5683	5681	"d"	"date"	0	0	1
5684	5681	"format"	"clob"	0	0	2
5688	5687	"result"	"inet"	0	0	0
5689	5687	"p"	"inet"	0	0	1
5692	5691	"result"	"clob"	0	0	0
5693	5691	"p"	"inet"	0	0	1
5696	5695	"result"	"int"	32	0	0
5697	5695	"p"	"inet"	0	0	1
5700	5699	"result"	"inet"	0	0	0
5701	5699	"p"	"inet"	0	0	1
5702	5699	"mask"	"int"	32	0	2
5705	5704	"result"	"inet"	0	0	0
5706	5704	"p"	"inet"	0	0	1
5709	5708	"result"	"inet"	0	0	0
5710	5708	"p"	"inet"	0	0	1
5713	5712	"result"	"inet"	0	0	0
5714	5712	"p"	"inet"	0	0	1
5717	5716	"result"	"clob"	0	0	0
5718	5716	"p"	"inet"	0	0	1
5721	5720	"result"	"clob"	0	0	0
5722	5720	"p"	"inet"	0	0	1
5733	5732	"result"	"table"	5723	0	0
5747	5746	"result"	"table"	5734	0	0
5793	5792	"threshold"	"smallint"	16	0	0
5811	5810	"result"	"table"	5796	0	0
5828	5827	"s"	"clob"	0	0	0
5829	5827	"t"	"clob"	0	0	1
5832	5831	"s"	"clob"	0	0	0
5833	5831	"t"	"clob"	0	0	1
5836	5835	"s"	"clob"	0	0	0
5837	5835	"t"	"clob"	0	0	1
5840	5839	"s"	"clob"	0	0	0
5841	5839	"t"	"clob"	0	0	1
5844	5843	"s"	"clob"	0	0	0
5845	5843	"t"	"clob"	0	0	1
5848	5847	"s"	"clob"	0	0	0
5849	5847	"t"	"clob"	0	0	1
5854	5853	"sys"	"clob"	0	0	0
5855	5853	"tab"	"clob"	0	0	1
5858	5857	"sys"	"clob"	0	0	0
5859	5857	"tab"	"clob"	0	0	1
5862	5861	"sys"	"clob"	0	0	0
5863	5861	"tab"	"clob"	0	0	1
5866	5865	"sys"	"clob"	0	0	0
5867	5865	"tab"	"clob"	0	0	1
5870	5869	"sys"	"clob"	0	0	0
5871	5869	"tab"	"clob"	0	0	1
5878	5877	"result"	"table"	5872	0	0
5885	5884	"result"	"table"	5879	0	0
5892	5891	"result"	"table"	5886	0	0
5899	5898	"result"	"table"	5893	0	0
5906	5905	"result"	"table"	5900	0	0
5913	5912	"result"	"table"	5907	0	0
5920	5919	"result"	"table"	5914	0	0
5927	5926	"result"	"table"	5921	0	0
5934	5933	"result"	"table"	5928	0	0
5941	5940	"result"	"table"	5935	0	0
5948	5947	"result"	"table"	5942	0	0
5955	5954	"result"	"table"	5949	0	0
5962	5961	"result"	"table"	5956	0	0
5969	5968	"result"	"table"	5963	0	0
5976	5975	"result"	"table"	5970	0	0
5983	5982	"result"	"table"	5977	0	0
5990	5989	"result"	"table"	5984	0	0
5993	5992	"result"	"clob"	0	0	0
5994	5992	"username"	"clob"	0	0	1
6004	6003	"result"	"table"	5995	0	0
6015	6014	"delay"	"tinyint"	8	0	0
6018	6017	"delay"	"tinyint"	8	0	0
6019	6017	"force"	"boolean"	1	0	1
6022	6021	"query"	"bigint"	64	0	0
6025	6024	"query"	"bigint"	64	0	0
6026	6024	"session"	"bigint"	64	0	1
6029	6028	"timeout"	"bigint"	64	0	0
6032	6031	"result"	"varchar"	32	0	0
6033	6031	"s1"	"varchar"	32	0	1
6034	6031	"st"	"int"	32	0	2
6035	6031	"len"	"int"	32	0	3
6036	6031	"s3"	"varchar"	32	0	4
6039	6038	"result"	"double"	53	0	0
6040	6038	"num"	"double"	53	0	1
6041	6038	"prc"	"int"	32	0	2
6044	6043	"result"	"double"	53	0	0
6045	6043	"num"	"double"	53	0	1
6046	6043	"prc"	"int"	32	0	2
6047	6043	"truncat"	"int"	32	0	3
6050	6049	"result"	"clob"	0	0	0
6051	6049	"num"	"double"	53	0	1
6052	6049	"prc"	"int"	32	0	2
6053	6049	"truncat"	"int"	32	0	3
6056	6055	"result"	"double"	53	0	0
6057	6055	"pdec"	"double"	53	0	1
6058	6055	"pradius"	"double"	53	0	2
6061	6060	"result"	"oid"	31	0	0
6062	6060	"x"	"int"	32	0	1
6063	6060	"y"	"int"	32	0	2
6066	6065	"result"	"int"	32	0	0
6067	6065	"z"	"oid"	31	0	1
6070	6069	"result"	"int"	32	0	0
6071	6069	"z"	"oid"	31	0	1
6077	6076	"result"	"table"	6072	0	0
6083	6082	"result"	"table"	6078	0	0
6086	6085	"filename"	"clob"	0	0	0
6093	6092	"result"	"table"	6087	0	0
6104	6103	"result"	"table"	6099	0	0
6124	6123	"result"	"table"	6109	0	0
6127	6126	"ra_stmt"	"clob"	0	0	0
6128	6126	"opt"	"boolean"	1	0	1
6140	6139	"result"	"table"	6129	0	0
6153	6152	"tag"	"int"	32	0	0
6156	6155	"tag"	"int"	32	0	0
6159	6158	"tag"	"int"	32	0	0
6162	6161	"tag"	"bigint"	64	0	0
6165	6164	"tag"	"bigint"	64	0	0
6168	6167	"tag"	"bigint"	64	0	0
6171	6170	"result"	"double"	53	0	0
6172	6170	"val"	"tinyint"	8	0	1
6175	6174	"result"	"double"	53	0	0
6176	6174	"val"	"smallint"	16	0	1
6179	6178	"result"	"double"	53	0	0
6180	6178	"val"	"int"	32	0	1
6183	6182	"result"	"double"	53	0	0
6184	6182	"val"	"wrd"	64	0	1
6187	6186	"result"	"double"	53	0	0
6188	6186	"val"	"bigint"	64	0	1
6191	6190	"result"	"double"	53	0	0
6192	6190	"val"	"real"	24	0	1
6195	6194	"result"	"double"	53	0	0
6196	6194	"val"	"double"	53	0	1
6199	6198	"result"	"double"	53	0	0
6200	6198	"val"	"date"	0	0	1
6203	6202	"result"	"double"	53	0	0
6204	6202	"val"	"time"	1	0	1
6207	6206	"result"	"double"	53	0	0
6208	6206	"val"	"timestamp"	7	0	1
6211	6210	"result"	"double"	53	0	0
6212	6210	"val"	"tinyint"	8	0	1
6215	6214	"result"	"double"	53	0	0
6216	6214	"val"	"smallint"	16	0	1
6219	6218	"result"	"double"	53	0	0
6220	6218	"val"	"int"	32	0	1
6223	6222	"result"	"double"	53	0	0
6224	6222	"val"	"wrd"	64	0	1
6227	6226	"result"	"double"	53	0	0
6228	6226	"val"	"bigint"	64	0	1
6231	6230	"result"	"double"	53	0	0
6232	6230	"val"	"real"	24	0	1
6235	6234	"result"	"double"	53	0	0
6236	6234	"val"	"double"	53	0	1
6239	6238	"result"	"double"	53	0	0
6240	6238	"val"	"date"	0	0	1
6243	6242	"result"	"double"	53	0	0
6244	6242	"val"	"time"	1	0	1
6247	6246	"result"	"double"	53	0	0
6248	6246	"val"	"timestamp"	7	0	1
6251	6250	"result"	"double"	53	0	0
6252	6250	"val"	"tinyint"	8	0	1
6255	6254	"result"	"double"	53	0	0
6256	6254	"val"	"smallint"	16	0	1
6259	6258	"result"	"double"	53	0	0
6260	6258	"val"	"int"	32	0	1
6263	6262	"result"	"double"	53	0	0
6264	6262	"val"	"wrd"	64	0	1
6267	6266	"result"	"double"	53	0	0
6268	6266	"val"	"bigint"	64	0	1
6271	6270	"result"	"double"	53	0	0
6272	6270	"val"	"real"	24	0	1
6275	6274	"result"	"double"	53	0	0
6276	6274	"val"	"double"	53	0	1
6279	6278	"result"	"double"	53	0	0
6280	6278	"val"	"date"	0	0	1
6283	6282	"result"	"double"	53	0	0
6284	6282	"val"	"time"	1	0	1
6287	6286	"result"	"double"	53	0	0
6288	6286	"val"	"timestamp"	7	0	1
6291	6290	"result"	"double"	53	0	0
6292	6290	"val"	"tinyint"	8	0	1
6295	6294	"result"	"double"	53	0	0
6296	6294	"val"	"smallint"	16	0	1
6299	6298	"result"	"double"	53	0	0
6300	6298	"val"	"int"	32	0	1
6303	6302	"result"	"double"	53	0	0
6304	6302	"val"	"wrd"	64	0	1
6307	6306	"result"	"double"	53	0	0
6308	6306	"val"	"bigint"	64	0	1
6311	6310	"result"	"double"	53	0	0
6312	6310	"val"	"real"	24	0	1
6315	6314	"result"	"double"	53	0	0
6316	6314	"val"	"double"	53	0	1
6319	6318	"result"	"double"	53	0	0
6320	6318	"val"	"date"	0	0	1
6323	6322	"result"	"double"	53	0	0
6324	6322	"val"	"time"	1	0	1
6327	6326	"result"	"double"	53	0	0
6328	6326	"val"	"timestamp"	7	0	1
6331	6330	"result"	"tinyint"	8	0	0
6332	6330	"val"	"tinyint"	8	0	1
6335	6334	"result"	"smallint"	16	0	0
6336	6334	"val"	"smallint"	16	0	1
6339	6338	"result"	"int"	32	0	0
6340	6338	"val"	"int"	32	0	1
6343	6342	"result"	"wrd"	64	0	0
6344	6342	"val"	"wrd"	64	0	1
6347	6346	"result"	"bigint"	64	0	0
6348	6346	"val"	"bigint"	64	0	1
6351	6350	"result"	"decimal"	1	0	0
6352	6350	"val"	"decimal"	1	0	1
6355	6354	"result"	"real"	24	0	0
6356	6354	"val"	"real"	24	0	1
6359	6358	"result"	"double"	53	0	0
6360	6358	"val"	"double"	53	0	1
6363	6362	"result"	"date"	0	0	0
6364	6362	"val"	"date"	0	0	1
6367	6366	"result"	"time"	1	0	0
6368	6366	"val"	"time"	1	0	1
6371	6370	"result"	"timestamp"	7	0	0
6372	6370	"val"	"timestamp"	7	0	1
6375	6374	"result"	"tinyint"	8	0	0
6376	6374	"val"	"tinyint"	8	0	1
6377	6374	"q"	"double"	53	0	2
6380	6379	"result"	"smallint"	16	0	0
6381	6379	"val"	"smallint"	16	0	1
6382	6379	"q"	"double"	53	0	2
6385	6384	"result"	"int"	32	0	0
6386	6384	"val"	"int"	32	0	1
6387	6384	"q"	"double"	53	0	2
6390	6389	"result"	"wrd"	64	0	0
6391	6389	"val"	"wrd"	64	0	1
6392	6389	"q"	"double"	53	0	2
6395	6394	"result"	"bigint"	64	0	0
6396	6394	"val"	"bigint"	64	0	1
6397	6394	"q"	"double"	53	0	2
6400	6399	"result"	"decimal"	1	0	0
6401	6399	"val"	"decimal"	1	0	1
6402	6399	"q"	"double"	53	0	2
6405	6404	"result"	"real"	24	0	0
6406	6404	"val"	"real"	24	0	1
6407	6404	"q"	"double"	53	0	2
6410	6409	"result"	"double"	53	0	0
6411	6409	"val"	"double"	53	0	1
6412	6409	"q"	"double"	53	0	2
6415	6414	"result"	"date"	0	0	0
6416	6414	"val"	"date"	0	0	1
6417	6414	"q"	"double"	53	0	2
6420	6419	"result"	"time"	1	0	0
6421	6419	"val"	"time"	1	0	1
6422	6419	"q"	"double"	53	0	2
6425	6424	"result"	"timestamp"	7	0	0
6426	6424	"val"	"timestamp"	7	0	1
6427	6424	"q"	"double"	53	0	2
6430	6429	"result"	"tinyint"	8	0	0
6431	6429	"e1"	"tinyint"	8	0	1
6432	6429	"e2"	"tinyint"	8	0	2
6435	6434	"result"	"smallint"	16	0	0
6436	6434	"e1"	"smallint"	16	0	1
6437	6434	"e2"	"smallint"	16	0	2
6440	6439	"result"	"int"	32	0	0
6441	6439	"e1"	"int"	32	0	1
6442	6439	"e2"	"int"	32	0	2
6445	6444	"result"	"wrd"	64	0	0
6446	6444	"e1"	"wrd"	64	0	1
6447	6444	"e2"	"wrd"	64	0	2
6450	6449	"result"	"bigint"	64	0	0
6451	6449	"e1"	"bigint"	64	0	1
6452	6449	"e2"	"bigint"	64	0	2
6455	6454	"result"	"real"	24	0	0
6456	6454	"e1"	"real"	24	0	1
6457	6454	"e2"	"real"	24	0	2
6460	6459	"result"	"double"	53	0	0
6461	6459	"e1"	"double"	53	0	1
6462	6459	"e2"	"double"	53	0	2
6465	6464	"result"	"double"	53	0	0
6466	6464	"val"	"hugeint"	128	0	1
6469	6468	"result"	"double"	53	0	0
6470	6468	"val"	"hugeint"	128	0	1
6473	6472	"result"	"double"	53	0	0
6474	6472	"val"	"hugeint"	128	0	1
6477	6476	"result"	"double"	53	0	0
6478	6476	"val"	"hugeint"	128	0	1
6481	6480	"result"	"hugeint"	128	0	0
6482	6480	"val"	"hugeint"	128	0	1
6485	6484	"result"	"hugeint"	128	0	0
6486	6484	"val"	"hugeint"	128	0	1
6487	6484	"q"	"double"	53	0	2
6490	6489	"result"	"hugeint"	128	0	0
6491	6489	"e1"	"hugeint"	128	0	1
6492	6489	"e2"	"hugeint"	128	0	2
6508	6507	"result"	"mbr"	0	0	0
6509	6507	"g"	"geometry"	0	0	1
6512	6511	"result"	"boolean"	1	0	0
6513	6511	"a"	"mbr"	0	0	1
6514	6511	"b"	"mbr"	0	0	2
6517	6516	"result"	"geometry"	0	0	0
6518	6516	"wkt"	"clob"	0	0	1
6519	6516	"srid"	"smallint"	16	0	2
6522	6521	"result"	"point"	0	0	0
6523	6521	"wkt"	"clob"	0	0	1
6524	6521	"srid"	"smallint"	16	0	2
6527	6526	"result"	"linestring"	0	0	0
6528	6526	"wkt"	"clob"	0	0	1
6529	6526	"srid"	"smallint"	16	0	2
6532	6531	"result"	"polygon"	0	0	0
6533	6531	"wkt"	"clob"	0	0	1
6534	6531	"srid"	"smallint"	16	0	2
6537	6536	"result"	"multipoint"	0	0	0
6538	6536	"wkt"	"clob"	0	0	1
6539	6536	"srid"	"smallint"	16	0	2
6542	6541	"result"	"multilinestring"	0	0	0
6543	6541	"wkt"	"clob"	0	0	1
6544	6541	"srid"	"smallint"	16	0	2
6547	6546	"result"	"multipolygon"	0	0	0
6548	6546	"wkt"	"clob"	0	0	1
6549	6546	"srid"	"smallint"	16	0	2
6552	6551	"result"	"multipolygon"	0	0	0
6553	6551	"wkt"	"clob"	0	0	1
6554	6551	"srid"	"smallint"	16	0	2
6557	6556	"result"	"polygon"	0	0	0
6558	6556	"wkt"	"clob"	0	0	1
6559	6556	"srid"	"smallint"	16	0	2
6562	6561	"result"	"clob"	0	0	0
6563	6561	"g"	"geometry"	0	0	1
6566	6565	"result"	"double"	53	0	0
6567	6565	"g"	"geometry"	0	0	1
6570	6569	"result"	"double"	53	0	0
6571	6569	"g"	"geometry"	0	0	1
6574	6573	"result"	"point"	0	0	0
6575	6573	"x"	"double"	53	0	1
6576	6573	"y"	"double"	53	0	2
6579	6578	"result"	"int"	32	0	0
6580	6578	"g"	"geometry"	0	0	1
6583	6582	"result"	"int"	32	0	0
6584	6582	"g"	"geometry"	0	0	1
6587	6586	"result"	"int"	32	0	0
6588	6586	"g"	"geometry"	0	0	1
6591	6590	"result"	"geometry"	0	0	0
6592	6590	"g"	"geometry"	0	0	1
6595	6594	"result"	"boolean"	1	0	0
6596	6594	"g"	"geometry"	0	0	1
6599	6598	"result"	"boolean"	1	0	0
6600	6598	"g"	"geometry"	0	0	1
6603	6602	"result"	"geometry"	0	0	0
6604	6602	"g"	"geometry"	0	0	1
6607	6606	"result"	"boolean"	1	0	0
6608	6606	"a"	"geometry"	0	0	1
6609	6606	"b"	"geometry"	0	0	2
6612	6611	"result"	"boolean"	1	0	0
6613	6611	"a"	"geometry"	0	0	1
6614	6611	"b"	"geometry"	0	0	2
6617	6616	"result"	"boolean"	1	0	0
6618	6616	"a"	"geometry"	0	0	1
6619	6616	"b"	"geometry"	0	0	2
6622	6621	"result"	"boolean"	1	0	0
6623	6621	"a"	"geometry"	0	0	1
6624	6621	"b"	"geometry"	0	0	2
6627	6626	"result"	"boolean"	1	0	0
6628	6626	"a"	"geometry"	0	0	1
6629	6626	"b"	"geometry"	0	0	2
6632	6631	"result"	"boolean"	1	0	0
6633	6631	"a"	"geometry"	0	0	1
6634	6631	"b"	"geometry"	0	0	2
6637	6636	"result"	"boolean"	1	0	0
6638	6636	"a"	"geometry"	0	0	1
6639	6636	"b"	"geometry"	0	0	2
6642	6641	"result"	"boolean"	1	0	0
6643	6641	"a"	"geometry"	0	0	1
6644	6641	"b"	"geometry"	0	0	2
6647	6646	"result"	"boolean"	1	0	0
6648	6646	"a"	"geometry"	0	0	1
6649	6646	"b"	"geometry"	0	0	2
6650	6646	"pattern"	"clob"	0	0	3
6653	6652	"result"	"double"	53	0	0
6654	6652	"g"	"geometry"	0	0	1
6657	6656	"result"	"double"	53	0	0
6658	6656	"g"	"geometry"	0	0	1
6661	6660	"result"	"double"	53	0	0
6662	6660	"a"	"geometry"	0	0	1
6663	6660	"b"	"geometry"	0	0	2
6666	6665	"result"	"geometry"	0	0	0
6667	6665	"a"	"geometry"	0	0	1
6668	6665	"distance"	"double"	53	0	2
6671	6670	"result"	"geometry"	0	0	0
6672	6670	"a"	"geometry"	0	0	1
6675	6674	"result"	"geometry"	0	0	0
6676	6674	"a"	"geometry"	0	0	1
6677	6674	"b"	"geometry"	0	0	2
6680	6679	"result"	"geometry"	0	0	0
6681	6679	"a"	"geometry"	0	0	1
6682	6679	"b"	"geometry"	0	0	2
6685	6684	"result"	"geometry"	0	0	0
6686	6684	"a"	"geometry"	0	0	1
6687	6684	"b"	"geometry"	0	0	2
6690	6689	"result"	"geometry"	0	0	0
6691	6689	"a"	"geometry"	0	0	1
6692	6689	"b"	"geometry"	0	0	2
6707	6706	"result"	"table"	6693	0	0
6737	6736	"result"	"bigint"	64	0	0
6738	6736	"nme"	"clob"	0	0	1
6739	6736	"i"	"bigint"	64	0	2
6740	6736	"d"	"bigint"	64	0	3
6743	6742	"result"	"bigint"	64	0	0
6744	6742	"tpe"	"clob"	0	0	1
6745	6742	"i"	"bigint"	64	0	2
6746	6742	"w"	"int"	32	0	3
6749	6748	"result"	"bigint"	64	0	0
6750	6748	"b"	"boolean"	1	0	1
6751	6748	"i"	"bigint"	64	0	2
6764	6763	"result"	"table"	6752	0	0
6804	6803	"tbl"	"clob"	0	0	0
6807	6806	"sch"	"clob"	0	0	0
6808	6806	"tbl"	"clob"	0	0	1
6811	6810	"sch"	"clob"	0	0	0
6812	6810	"tbl"	"clob"	0	0	1
6813	6810	"col"	"clob"	0	0	2
6816	6815	"sample"	"bigint"	64	0	0
6819	6818	"tbl"	"clob"	0	0	0
6820	6818	"sample"	"bigint"	64	0	1
6823	6822	"sch"	"clob"	0	0	0
6824	6822	"tbl"	"clob"	0	0	1
6825	6822	"sample"	"bigint"	64	0	2
6828	6827	"sch"	"clob"	0	0	0
6829	6827	"tbl"	"clob"	0	0	1
6830	6827	"col"	"clob"	0	0	2
6831	6827	"sample"	"bigint"	64	0	3
6834	6833	"result"	"clob"	0	0	0
6835	6833	"src"	"clob"	0	0	1
6838	6837	"result"	"smallint"	16	0	0
6839	6837	"one"	"tinyint"	8	0	1
6840	6837	"two"	"tinyint"	8	0	2
6843	6842	"result"	"int"	32	0	0
6844	6842	"one"	"smallint"	16	0	1
6845	6842	"two"	"smallint"	16	0	2
6848	6847	"result"	"bigint"	64	0	0
6849	6847	"one"	"int"	32	0	1
6850	6847	"two"	"int"	32	0	2
6853	6852	"result"	"hugeint"	128	0	0
6854	6852	"one"	"bigint"	64	0	1
6855	6852	"two"	"bigint"	64	0	2
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."auths" (
	"id"      INTEGER,
	"name"    VARCHAR(1024),
	"grantor" INTEGER
);
COPY 3 RECORDS INTO "sys"."auths" FROM stdin USING DELIMITERS '\t','\n','"';
1	"public"	0
2	"sysadmin"	0
3	"monetdb"	0
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."connections" (
	"id"       INTEGER,
	"server"   CHAR(1024),
	"port"     INTEGER,
	"db"       CHAR(64),
	"db_alias" CHAR(1024),
	"user"     CHAR(1024),
	"password" CHAR(1024),
	"language" CHAR(1024)
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."db_user_info" (
	"name"           VARCHAR(1024),
	"fullname"       VARCHAR(2048),
	"default_schema" INTEGER
);
COPY 1 RECORDS INTO "sys"."db_user_info" FROM stdin USING DELIMITERS '\t','\n','"';
"monetdb"	"MonetDB Admin"	2000
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."dependencies" (
	"id"          INTEGER,
	"depend_id"   INTEGER,
	"depend_type" SMALLINT
);
COPY 202 RECORDS INTO "sys"."dependencies" FROM stdin USING DELIMITERS '\t','\n','"';
417	5596	7
418	5596	7
1023	5596	7
417	5600	7
418	5600	7
1023	5600	7
5732	5756	5
5746	5768	5
5732	5786	5
5746	5786	5
5810	5825	5
2003	5877	7
2001	5877	7
2002	5877	7
5568	5877	7
5577	5884	7
5575	5884	7
5576	5884	7
2005	5884	7
2001	5884	7
2003	5884	7
5530	5891	7
2043	5891	7
2042	5891	7
2045	5891	7
2044	5891	7
5530	5898	7
2084	5898	7
2082	5898	7
2086	5898	7
2079	5898	7
2075	5898	7
36	5898	7
5530	5905	7
2043	5905	7
2042	5905	7
2045	5905	7
2088	5905	7
2087	5905	7
2044	5905	7
2089	5905	7
2090	5905	7
5530	5912	7
2077	5912	7
2075	5912	7
2080	5912	7
2076	5912	7
2079	5912	7
5530	5919	7
2043	5919	7
2042	5919	7
2045	5919	7
2016	5919	7
2015	5919	7
2044	5919	7
2017	5919	7
5540	5926	7
2043	5926	7
2042	5926	7
2045	5926	7
2044	5926	7
5530	5926	7
5540	5933	7
2077	5933	7
2075	5933	7
2080	5933	7
2099	5933	7
2098	5933	7
2100	5933	7
2076	5933	7
2079	5933	7
132	5933	7
33	5933	7
32	5933	7
34	5933	7
5540	5940	7
2084	5940	7
2082	5940	7
2086	5940	7
2099	5940	7
2098	5940	7
2100	5940	7
2083	5940	7
2079	5940	7
2075	5940	7
36	5940	7
33	5940	7
32	5940	7
34	5940	7
5540	5947	7
2043	5947	7
2042	5947	7
2045	5947	7
2044	5947	7
2016	5947	7
2015	5947	7
2017	5947	7
5540	5954	7
2043	5954	7
2042	5954	7
2045	5954	7
2088	5954	7
2087	5954	7
2044	5954	7
2089	5954	7
5530	5961	7
2043	5961	7
2042	5961	7
2045	5961	7
2016	5961	7
2015	5961	7
2044	5961	7
2017	5961	7
5530	5968	7
2043	5968	7
2042	5968	7
2045	5968	7
2088	5968	7
2087	5968	7
2044	5968	7
2089	5968	7
2017	5975	7
2015	5975	7
2016	5975	7
2043	5975	7
2042	5975	7
2045	5975	7
2044	5975	7
2017	5982	7
2015	5982	7
2016	5982	7
2043	5982	7
2042	5982	7
2045	5982	7
2088	5982	7
2087	5982	7
2044	5982	7
2089	5982	7
2079	5989	7
2075	5989	7
2076	5989	7
2080	5989	7
6003	6012	5
119	6031	7
39	6031	7
37	6031	7
1142	6031	7
1128	6031	7
214	6031	7
1139	6031	7
215	6031	7
261	6031	7
34	6043	7
500	6043	7
121	6043	7
6038	6043	7
6092	6098	5
6103	6108	5
6139	6150	5
6706	6720	5
6722	6734	13
6732	6734	13
6723	6734	13
6724	6734	13
6725	6734	13
6726	6734	13
6727	6734	13
6728	6734	13
6729	6734	13
6730	6734	13
6731	6734	13
34	6736	7
216	6736	7
222	6736	7
118	6742	7
35	6742	7
261	6742	7
216	6742	7
34	6748	7
216	6748	7
6722	6763	7
6732	6763	7
6723	6763	7
6724	6763	7
6725	6763	7
6727	6763	7
6728	6763	7
6729	6763	7
6730	6763	7
6731	6763	7
6736	6763	7
6742	6763	7
6748	6763	7
6763	6775	5
6763	6784	5
49	6784	5
56	6784	5
57	6784	5
52	6784	5
36	6784	5
34	6784	5
216	6784	5
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."functions" (
	"id"          INTEGER,
	"name"        VARCHAR(256),
	"func"        VARCHAR(8196),
	"mod"         VARCHAR(8196),
	"sql"         BOOLEAN,
	"type"        INTEGER,
	"side_effect" BOOLEAN,
	"schema_id"   INTEGER
);
COPY 1418 RECORDS INTO "sys"."functions" FROM stdin USING DELIMITERS '\t','\n','"';
30	"not_uniques"	"not_uniques"	"sql"	false	1	false	0
31	"not_uniques"	"not_uniques"	"sql"	false	1	false	0
32	"hash"	"hash"	"calc"	false	1	false	0
33	"rotate_xor_hash"	"rotate_xor_hash"	"calc"	false	1	false	0
34	"="	"="	"calc"	false	1	false	0
35	"<>"	"!="	"calc"	false	1	false	0
36	"isnull"	"isnil"	"calc"	false	1	false	0
37	">"	">"	"calc"	false	1	false	0
38	">="	">="	"calc"	false	1	false	0
39	"<"	"<"	"calc"	false	1	false	0
40	"<="	"<="	"calc"	false	1	false	0
44	"in"	"in"	"calc"	false	1	false	0
45	"identity"	"identity"	"calc"	false	1	false	0
46	"rowid"	"identity"	"calc"	false	1	false	0
47	"rowid"	"rowid"	"calc"	false	1	false	0
50	"sql_min"	"min"	"calc"	false	1	false	0
51	"sql_max"	"max"	"calc"	false	1	false	0
52	"ifthenelse"	"ifthenelse"	"calc"	false	1	false	0
74	"mod"	"%"	"calc"	false	1	false	0
75	"mod"	"%"	"calc"	false	1	false	0
76	"mod"	"%"	"calc"	false	1	false	0
77	"mod"	"%"	"calc"	false	1	false	0
78	"mod"	"%"	"calc"	false	1	false	0
79	"mod"	"%"	"calc"	false	1	false	0
80	"mod"	"%"	"calc"	false	1	false	0
81	"mod"	"%"	"calc"	false	1	false	0
82	"mod"	"%"	"calc"	false	1	false	0
83	"mod"	"%"	"calc"	false	1	false	0
84	"mod"	"%"	"calc"	false	1	false	0
85	"mod"	"%"	"calc"	false	1	false	0
86	"mod"	"%"	"calc"	false	1	false	0
87	"mod"	"%"	"calc"	false	1	false	0
95	"rank"	"rank_grp"	"calc"	false	1	false	0
96	"dense_rank"	"dense_rank_grp"	"calc"	false	1	false	0
97	"percent_rank"	"precent_rank_grp"	"calc"	false	1	false	0
98	"cume_dist"	"cume_dist_grp"	"calc"	false	1	false	0
99	"row_number"	"mark_grp"	"calc"	false	1	false	0
100	"rank"	"rank_grp"	"calc"	false	1	false	0
101	"dense_rank"	"dense_rank_grp"	"calc"	false	1	false	0
102	"percent_rank"	"precent_rank_grp"	"calc"	false	1	false	0
103	"cume_dist"	"cume_dist_grp"	"calc"	false	1	false	0
104	"row_number"	"mark_grp"	"calc"	false	1	false	0
105	"rank"	"rank_grp"	"calc"	false	1	false	0
106	"dense_rank"	"dense_rank_grp"	"calc"	false	1	false	0
107	"percent_rank"	"precent_rank_grp"	"calc"	false	1	false	0
108	"cume_dist"	"cume_dist_grp"	"calc"	false	1	false	0
109	"row_number"	"mark_grp"	"calc"	false	1	false	0
110	"lag"	"lag_grp"	"calc"	false	1	false	0
111	"lead"	"lead_grp"	"calc"	false	1	false	0
112	"lag"	"lag_grp"	"calc"	false	1	false	0
113	"lead"	"lead_grp"	"calc"	false	1	false	0
114	"lag"	"lag_grp"	"calc"	false	1	false	0
115	"lead"	"lead_grp"	"calc"	false	1	false	0
116	"lag"	"lag_grp"	"calc"	false	1	false	0
117	"lead"	"lead_grp"	"calc"	false	1	false	0
118	"and"	"and"	"calc"	false	1	false	0
119	"or"	"or"	"calc"	false	1	false	0
120	"xor"	"xor"	"calc"	false	1	false	0
121	"not"	"not"	"calc"	false	1	false	0
122	"sql_sub"	"-"	"calc"	false	1	false	0
123	"sql_add"	"+"	"calc"	false	1	false	0
124	"sql_mul"	"*"	"calc"	false	1	false	0
125	"sql_div"	"/"	"calc"	false	1	false	0
126	"bit_and"	"and"	"calc"	false	1	false	0
127	"bit_or"	"or"	"calc"	false	1	false	0
128	"bit_xor"	"xor"	"calc"	false	1	false	0
129	"bit_not"	"not"	"calc"	false	1	false	0
130	"left_shift"	"<<"	"calc"	false	1	false	0
131	"right_shift"	">>"	"calc"	false	1	false	0
132	"sql_neg"	"-"	"calc"	false	1	false	0
133	"abs"	"abs"	"calc"	false	1	false	0
134	"sign"	"sign"	"calc"	false	1	false	0
135	"scale_up"	"*"	"calc"	false	1	false	0
136	"scale_down"	"dec_round"	"sql"	false	1	false	0
137	"sql_sub"	"-"	"calc"	false	1	false	0
138	"sql_add"	"+"	"calc"	false	1	false	0
139	"sql_mul"	"*"	"calc"	false	1	false	0
140	"sql_div"	"/"	"calc"	false	1	false	0
141	"sql_sub"	"-"	"calc"	false	1	false	0
142	"sql_add"	"+"	"calc"	false	1	false	0
143	"sql_mul"	"*"	"calc"	false	1	false	0
144	"sql_div"	"/"	"calc"	false	1	false	0
145	"sql_sub"	"-"	"calc"	false	1	false	0
146	"sql_add"	"+"	"calc"	false	1	false	0
147	"sql_mul"	"*"	"calc"	false	1	false	0
148	"sql_div"	"/"	"calc"	false	1	false	0
149	"bit_and"	"and"	"calc"	false	1	false	0
150	"bit_or"	"or"	"calc"	false	1	false	0
151	"bit_xor"	"xor"	"calc"	false	1	false	0
152	"bit_not"	"not"	"calc"	false	1	false	0
153	"left_shift"	"<<"	"calc"	false	1	false	0
154	"right_shift"	">>"	"calc"	false	1	false	0
155	"sql_neg"	"-"	"calc"	false	1	false	0
156	"abs"	"abs"	"calc"	false	1	false	0
157	"sign"	"sign"	"calc"	false	1	false	0
158	"scale_up"	"*"	"calc"	false	1	false	0
159	"scale_down"	"dec_round"	"sql"	false	1	false	0
160	"sql_sub"	"-"	"calc"	false	1	false	0
161	"sql_add"	"+"	"calc"	false	1	false	0
162	"sql_mul"	"*"	"calc"	false	1	false	0
163	"sql_div"	"/"	"calc"	false	1	false	0
164	"sql_sub"	"-"	"calc"	false	1	false	0
165	"sql_add"	"+"	"calc"	false	1	false	0
166	"sql_mul"	"*"	"calc"	false	1	false	0
167	"sql_div"	"/"	"calc"	false	1	false	0
168	"sql_sub"	"-"	"calc"	false	1	false	0
169	"sql_add"	"+"	"calc"	false	1	false	0
170	"sql_mul"	"*"	"calc"	false	1	false	0
171	"sql_div"	"/"	"calc"	false	1	false	0
172	"bit_and"	"and"	"calc"	false	1	false	0
173	"bit_or"	"or"	"calc"	false	1	false	0
174	"bit_xor"	"xor"	"calc"	false	1	false	0
175	"bit_not"	"not"	"calc"	false	1	false	0
176	"left_shift"	"<<"	"calc"	false	1	false	0
177	"right_shift"	">>"	"calc"	false	1	false	0
178	"sql_neg"	"-"	"calc"	false	1	false	0
179	"abs"	"abs"	"calc"	false	1	false	0
180	"sign"	"sign"	"calc"	false	1	false	0
181	"scale_up"	"*"	"calc"	false	1	false	0
182	"scale_down"	"dec_round"	"sql"	false	1	false	0
183	"sql_sub"	"-"	"calc"	false	1	false	0
184	"sql_add"	"+"	"calc"	false	1	false	0
185	"sql_mul"	"*"	"calc"	false	1	false	0
186	"sql_div"	"/"	"calc"	false	1	false	0
187	"sql_sub"	"-"	"calc"	false	1	false	0
188	"sql_add"	"+"	"calc"	false	1	false	0
189	"sql_mul"	"*"	"calc"	false	1	false	0
190	"sql_div"	"/"	"calc"	false	1	false	0
191	"sql_sub"	"-"	"calc"	false	1	false	0
192	"sql_add"	"+"	"calc"	false	1	false	0
193	"sql_mul"	"*"	"calc"	false	1	false	0
194	"sql_div"	"/"	"calc"	false	1	false	0
195	"bit_and"	"and"	"calc"	false	1	false	0
196	"bit_or"	"or"	"calc"	false	1	false	0
197	"bit_xor"	"xor"	"calc"	false	1	false	0
198	"bit_not"	"not"	"calc"	false	1	false	0
199	"left_shift"	"<<"	"calc"	false	1	false	0
200	"right_shift"	">>"	"calc"	false	1	false	0
201	"sql_neg"	"-"	"calc"	false	1	false	0
202	"abs"	"abs"	"calc"	false	1	false	0
203	"sign"	"sign"	"calc"	false	1	false	0
204	"scale_up"	"*"	"calc"	false	1	false	0
205	"scale_down"	"dec_round"	"sql"	false	1	false	0
206	"sql_sub"	"-"	"calc"	false	1	false	0
207	"sql_add"	"+"	"calc"	false	1	false	0
208	"sql_mul"	"*"	"calc"	false	1	false	0
209	"sql_div"	"/"	"calc"	false	1	false	0
210	"sql_sub"	"-"	"calc"	false	1	false	0
211	"sql_add"	"+"	"calc"	false	1	false	0
212	"sql_mul"	"*"	"calc"	false	1	false	0
213	"sql_div"	"/"	"calc"	false	1	false	0
214	"sql_sub"	"-"	"calc"	false	1	false	0
215	"sql_add"	"+"	"calc"	false	1	false	0
216	"sql_mul"	"*"	"calc"	false	1	false	0
217	"sql_div"	"/"	"calc"	false	1	false	0
218	"bit_and"	"and"	"calc"	false	1	false	0
219	"bit_or"	"or"	"calc"	false	1	false	0
220	"bit_xor"	"xor"	"calc"	false	1	false	0
221	"bit_not"	"not"	"calc"	false	1	false	0
222	"left_shift"	"<<"	"calc"	false	1	false	0
223	"right_shift"	">>"	"calc"	false	1	false	0
224	"sql_neg"	"-"	"calc"	false	1	false	0
225	"abs"	"abs"	"calc"	false	1	false	0
226	"sign"	"sign"	"calc"	false	1	false	0
227	"scale_up"	"*"	"calc"	false	1	false	0
228	"scale_down"	"dec_round"	"sql"	false	1	false	0
229	"sql_sub"	"-"	"calc"	false	1	false	0
230	"sql_add"	"+"	"calc"	false	1	false	0
231	"sql_mul"	"*"	"calc"	false	1	false	0
232	"sql_div"	"/"	"calc"	false	1	false	0
233	"sql_sub"	"-"	"calc"	false	1	false	0
234	"sql_add"	"+"	"calc"	false	1	false	0
235	"sql_mul"	"*"	"calc"	false	1	false	0
236	"sql_div"	"/"	"calc"	false	1	false	0
237	"sql_sub"	"-"	"calc"	false	1	false	0
238	"sql_add"	"+"	"calc"	false	1	false	0
239	"sql_mul"	"*"	"calc"	false	1	false	0
240	"sql_div"	"/"	"calc"	false	1	false	0
241	"bit_and"	"and"	"calc"	false	1	false	0
242	"bit_or"	"or"	"calc"	false	1	false	0
243	"bit_xor"	"xor"	"calc"	false	1	false	0
244	"bit_not"	"not"	"calc"	false	1	false	0
245	"left_shift"	"<<"	"calc"	false	1	false	0
246	"right_shift"	">>"	"calc"	false	1	false	0
247	"sql_neg"	"-"	"calc"	false	1	false	0
248	"abs"	"abs"	"calc"	false	1	false	0
249	"sign"	"sign"	"calc"	false	1	false	0
250	"scale_up"	"*"	"calc"	false	1	false	0
251	"scale_down"	"dec_round"	"sql"	false	1	false	0
252	"sql_sub"	"-"	"calc"	false	1	false	0
253	"sql_add"	"+"	"calc"	false	1	false	0
254	"sql_mul"	"*"	"calc"	false	1	false	0
255	"sql_div"	"/"	"calc"	false	1	false	0
256	"sql_sub"	"-"	"calc"	false	1	false	0
257	"sql_add"	"+"	"calc"	false	1	false	0
258	"sql_mul"	"*"	"calc"	false	1	false	0
259	"sql_div"	"/"	"calc"	false	1	false	0
260	"sql_sub"	"-"	"calc"	false	1	false	0
261	"sql_add"	"+"	"calc"	false	1	false	0
262	"sql_mul"	"*"	"calc"	false	1	false	0
263	"sql_div"	"/"	"calc"	false	1	false	0
264	"bit_and"	"and"	"calc"	false	1	false	0
265	"bit_or"	"or"	"calc"	false	1	false	0
266	"bit_xor"	"xor"	"calc"	false	1	false	0
267	"bit_not"	"not"	"calc"	false	1	false	0
268	"left_shift"	"<<"	"calc"	false	1	false	0
269	"right_shift"	">>"	"calc"	false	1	false	0
270	"sql_neg"	"-"	"calc"	false	1	false	0
271	"abs"	"abs"	"calc"	false	1	false	0
272	"sign"	"sign"	"calc"	false	1	false	0
273	"scale_up"	"*"	"calc"	false	1	false	0
274	"scale_down"	"dec_round"	"sql"	false	1	false	0
275	"sql_sub"	"-"	"calc"	false	1	false	0
276	"sql_add"	"+"	"calc"	false	1	false	0
277	"sql_mul"	"*"	"calc"	false	1	false	0
278	"sql_div"	"/"	"calc"	false	1	false	0
279	"sql_sub"	"-"	"calc"	false	1	false	0
280	"sql_add"	"+"	"calc"	false	1	false	0
281	"sql_mul"	"*"	"calc"	false	1	false	0
282	"sql_div"	"/"	"calc"	false	1	false	0
283	"sql_sub"	"-"	"calc"	false	1	false	0
284	"sql_add"	"+"	"calc"	false	1	false	0
285	"sql_mul"	"*"	"calc"	false	1	false	0
286	"sql_div"	"/"	"calc"	false	1	false	0
287	"bit_and"	"and"	"calc"	false	1	false	0
288	"bit_or"	"or"	"calc"	false	1	false	0
289	"bit_xor"	"xor"	"calc"	false	1	false	0
290	"bit_not"	"not"	"calc"	false	1	false	0
291	"left_shift"	"<<"	"calc"	false	1	false	0
292	"right_shift"	">>"	"calc"	false	1	false	0
293	"sql_neg"	"-"	"calc"	false	1	false	0
294	"abs"	"abs"	"calc"	false	1	false	0
295	"sign"	"sign"	"calc"	false	1	false	0
296	"scale_up"	"*"	"calc"	false	1	false	0
297	"scale_down"	"dec_round"	"sql"	false	1	false	0
298	"sql_sub"	"-"	"calc"	false	1	false	0
299	"sql_add"	"+"	"calc"	false	1	false	0
300	"sql_mul"	"*"	"calc"	false	1	false	0
301	"sql_div"	"/"	"calc"	false	1	false	0
302	"sql_sub"	"-"	"calc"	false	1	false	0
303	"sql_add"	"+"	"calc"	false	1	false	0
304	"sql_mul"	"*"	"calc"	false	1	false	0
305	"sql_div"	"/"	"calc"	false	1	false	0
306	"sql_sub"	"-"	"calc"	false	1	false	0
307	"sql_add"	"+"	"calc"	false	1	false	0
308	"sql_mul"	"*"	"calc"	false	1	false	0
309	"sql_div"	"/"	"calc"	false	1	false	0
310	"bit_and"	"and"	"calc"	false	1	false	0
311	"bit_or"	"or"	"calc"	false	1	false	0
312	"bit_xor"	"xor"	"calc"	false	1	false	0
313	"bit_not"	"not"	"calc"	false	1	false	0
314	"left_shift"	"<<"	"calc"	false	1	false	0
315	"right_shift"	">>"	"calc"	false	1	false	0
316	"sql_neg"	"-"	"calc"	false	1	false	0
317	"abs"	"abs"	"calc"	false	1	false	0
318	"sign"	"sign"	"calc"	false	1	false	0
319	"scale_up"	"*"	"calc"	false	1	false	0
320	"scale_down"	"dec_round"	"sql"	false	1	false	0
321	"sql_sub"	"-"	"calc"	false	1	false	0
322	"sql_add"	"+"	"calc"	false	1	false	0
323	"sql_mul"	"*"	"calc"	false	1	false	0
324	"sql_div"	"/"	"calc"	false	1	false	0
325	"sql_sub"	"-"	"calc"	false	1	false	0
326	"sql_add"	"+"	"calc"	false	1	false	0
327	"sql_mul"	"*"	"calc"	false	1	false	0
328	"sql_div"	"/"	"calc"	false	1	false	0
329	"sql_sub"	"-"	"calc"	false	1	false	0
330	"sql_add"	"+"	"calc"	false	1	false	0
331	"sql_mul"	"*"	"calc"	false	1	false	0
332	"sql_div"	"/"	"calc"	false	1	false	0
333	"bit_and"	"and"	"calc"	false	1	false	0
334	"bit_or"	"or"	"calc"	false	1	false	0
335	"bit_xor"	"xor"	"calc"	false	1	false	0
336	"bit_not"	"not"	"calc"	false	1	false	0
337	"left_shift"	"<<"	"calc"	false	1	false	0
338	"right_shift"	">>"	"calc"	false	1	false	0
339	"sql_neg"	"-"	"calc"	false	1	false	0
340	"abs"	"abs"	"calc"	false	1	false	0
341	"sign"	"sign"	"calc"	false	1	false	0
342	"scale_up"	"*"	"calc"	false	1	false	0
343	"scale_down"	"dec_round"	"sql"	false	1	false	0
344	"sql_sub"	"-"	"calc"	false	1	false	0
345	"sql_add"	"+"	"calc"	false	1	false	0
346	"sql_mul"	"*"	"calc"	false	1	false	0
347	"sql_div"	"/"	"calc"	false	1	false	0
348	"sql_sub"	"-"	"calc"	false	1	false	0
349	"sql_add"	"+"	"calc"	false	1	false	0
350	"sql_mul"	"*"	"calc"	false	1	false	0
351	"sql_div"	"/"	"calc"	false	1	false	0
352	"sql_sub"	"-"	"calc"	false	1	false	0
353	"sql_add"	"+"	"calc"	false	1	false	0
354	"sql_mul"	"*"	"calc"	false	1	false	0
355	"sql_div"	"/"	"calc"	false	1	false	0
356	"bit_and"	"and"	"calc"	false	1	false	0
357	"bit_or"	"or"	"calc"	false	1	false	0
358	"bit_xor"	"xor"	"calc"	false	1	false	0
359	"bit_not"	"not"	"calc"	false	1	false	0
360	"left_shift"	"<<"	"calc"	false	1	false	0
361	"right_shift"	">>"	"calc"	false	1	false	0
362	"sql_neg"	"-"	"calc"	false	1	false	0
363	"abs"	"abs"	"calc"	false	1	false	0
364	"sign"	"sign"	"calc"	false	1	false	0
365	"scale_up"	"*"	"calc"	false	1	false	0
366	"scale_down"	"dec_round"	"sql"	false	1	false	0
367	"sql_sub"	"-"	"calc"	false	1	false	0
368	"sql_add"	"+"	"calc"	false	1	false	0
369	"sql_mul"	"*"	"calc"	false	1	false	0
370	"sql_div"	"/"	"calc"	false	1	false	0
371	"sql_sub"	"-"	"calc"	false	1	false	0
372	"sql_add"	"+"	"calc"	false	1	false	0
373	"sql_mul"	"*"	"calc"	false	1	false	0
374	"sql_div"	"/"	"calc"	false	1	false	0
375	"sql_sub"	"-"	"calc"	false	1	false	0
376	"sql_add"	"+"	"calc"	false	1	false	0
377	"sql_mul"	"*"	"calc"	false	1	false	0
378	"sql_div"	"/"	"calc"	false	1	false	0
379	"bit_and"	"and"	"calc"	false	1	false	0
380	"bit_or"	"or"	"calc"	false	1	false	0
381	"bit_xor"	"xor"	"calc"	false	1	false	0
382	"bit_not"	"not"	"calc"	false	1	false	0
383	"left_shift"	"<<"	"calc"	false	1	false	0
384	"right_shift"	">>"	"calc"	false	1	false	0
385	"sql_neg"	"-"	"calc"	false	1	false	0
386	"abs"	"abs"	"calc"	false	1	false	0
387	"sign"	"sign"	"calc"	false	1	false	0
388	"scale_up"	"*"	"calc"	false	1	false	0
389	"scale_down"	"dec_round"	"sql"	false	1	false	0
390	"sql_sub"	"-"	"calc"	false	1	false	0
391	"sql_add"	"+"	"calc"	false	1	false	0
392	"sql_mul"	"*"	"calc"	false	1	false	0
393	"sql_div"	"/"	"calc"	false	1	false	0
394	"sql_sub"	"-"	"calc"	false	1	false	0
395	"sql_add"	"+"	"calc"	false	1	false	0
396	"sql_mul"	"*"	"calc"	false	1	false	0
397	"sql_div"	"/"	"calc"	false	1	false	0
398	"sql_sub"	"-"	"calc"	false	1	false	0
399	"sql_add"	"+"	"calc"	false	1	false	0
400	"sql_mul"	"*"	"calc"	false	1	false	0
401	"sql_div"	"/"	"calc"	false	1	false	0
402	"sql_neg"	"-"	"calc"	false	1	false	0
403	"abs"	"abs"	"calc"	false	1	false	0
404	"sign"	"sign"	"calc"	false	1	false	0
405	"scale_up"	"*"	"calc"	false	1	false	0
406	"scale_down"	"dec_round"	"sql"	false	1	false	0
407	"sql_sub"	"-"	"calc"	false	1	false	0
408	"sql_add"	"+"	"calc"	false	1	false	0
409	"sql_mul"	"*"	"calc"	false	1	false	0
410	"sql_div"	"/"	"calc"	false	1	false	0
411	"sql_sub"	"-"	"calc"	false	1	false	0
412	"sql_add"	"+"	"calc"	false	1	false	0
413	"sql_mul"	"*"	"calc"	false	1	false	0
414	"sql_div"	"/"	"calc"	false	1	false	0
415	"sql_sub"	"-"	"calc"	false	1	false	0
416	"sql_add"	"+"	"calc"	false	1	false	0
417	"sql_mul"	"*"	"calc"	false	1	false	0
418	"sql_div"	"/"	"calc"	false	1	false	0
419	"sql_neg"	"-"	"calc"	false	1	false	0
420	"abs"	"abs"	"calc"	false	1	false	0
421	"sign"	"sign"	"calc"	false	1	false	0
422	"scale_up"	"*"	"calc"	false	1	false	0
423	"scale_down"	"dec_round"	"sql"	false	1	false	0
424	"sql_sub"	"-"	"calc"	false	1	false	0
425	"sql_add"	"+"	"calc"	false	1	false	0
426	"sql_mul"	"*"	"calc"	false	1	false	0
427	"sql_div"	"/"	"calc"	false	1	false	0
428	"sql_sub"	"-"	"calc"	false	1	false	0
429	"sql_add"	"+"	"calc"	false	1	false	0
430	"sql_mul"	"*"	"calc"	false	1	false	0
431	"sql_div"	"/"	"calc"	false	1	false	0
432	"sql_sub"	"-"	"calc"	false	1	false	0
433	"sql_add"	"+"	"calc"	false	1	false	0
434	"sql_mul"	"*"	"calc"	false	1	false	0
435	"sql_div"	"/"	"calc"	false	1	false	0
436	"sql_neg"	"-"	"calc"	false	1	false	0
437	"abs"	"abs"	"calc"	false	1	false	0
438	"sign"	"sign"	"calc"	false	1	false	0
439	"scale_up"	"*"	"calc"	false	1	false	0
440	"scale_down"	"dec_round"	"sql"	false	1	false	0
441	"sql_sub"	"-"	"calc"	false	1	false	0
442	"sql_add"	"+"	"calc"	false	1	false	0
443	"sql_mul"	"*"	"calc"	false	1	false	0
444	"sql_div"	"/"	"calc"	false	1	false	0
445	"sql_neg"	"-"	"calc"	false	1	false	0
446	"abs"	"abs"	"calc"	false	1	false	0
447	"sign"	"sign"	"calc"	false	1	false	0
448	"scale_up"	"*"	"calc"	false	1	false	0
449	"scale_down"	"dec_round"	"sql"	false	1	false	0
450	"sql_mul"	"*"	"calc"	false	1	false	0
451	"sql_mul"	"*"	"calc"	false	1	false	0
452	"sql_mul"	"*"	"calc"	false	1	false	0
453	"sql_mul"	"*"	"calc"	false	1	false	0
454	"sql_mul"	"*"	"calc"	false	1	false	0
455	"sql_mul"	"*"	"calc"	false	1	false	0
456	"sql_mul"	"*"	"calc"	false	1	false	0
457	"sql_mul"	"*"	"calc"	false	1	false	0
458	"sql_mul"	"*"	"calc"	false	1	false	0
459	"sql_mul"	"*"	"calc"	false	1	false	0
460	"sql_mul"	"*"	"calc"	false	1	false	0
461	"sql_mul"	"*"	"calc"	false	1	false	0
462	"sql_mul"	"*"	"calc"	false	1	false	0
463	"sql_mul"	"*"	"calc"	false	1	false	0
464	"sql_mul"	"*"	"calc"	false	1	false	0
465	"sql_mul"	"*"	"calc"	false	1	false	0
466	"sql_mul"	"*"	"calc"	false	1	false	0
467	"sql_mul"	"*"	"calc"	false	1	false	0
468	"sql_mul"	"*"	"calc"	false	1	false	0
469	"sql_mul"	"*"	"calc"	false	1	false	0
470	"sql_mul"	"*"	"calc"	false	1	false	0
471	"sql_mul"	"*"	"calc"	false	1	false	0
472	"sql_mul"	"*"	"calc"	false	1	false	0
473	"sql_mul"	"*"	"calc"	false	1	false	0
474	"sql_mul"	"*"	"calc"	false	1	false	0
475	"sql_mul"	"*"	"calc"	false	1	false	0
476	"sql_mul"	"*"	"calc"	false	1	false	0
477	"sql_mul"	"*"	"calc"	false	1	false	0
478	"sql_mul"	"*"	"calc"	false	1	false	0
479	"sql_mul"	"*"	"calc"	false	1	false	0
480	"sql_mul"	"*"	"calc"	false	1	false	0
481	"sql_mul"	"*"	"calc"	false	1	false	0
482	"sql_mul"	"*"	"calc"	false	1	false	0
483	"sql_mul"	"*"	"calc"	false	1	false	0
484	"sql_mul"	"*"	"calc"	false	1	false	0
485	"sql_mul"	"*"	"calc"	false	1	false	0
486	"sql_mul"	"*"	"calc"	false	1	false	0
487	"sql_mul"	"*"	"calc"	false	1	false	0
488	"sql_mul"	"*"	"calc"	false	1	false	0
489	"sql_mul"	"*"	"calc"	false	1	false	0
490	"sql_mul"	"*"	"calc"	false	1	false	0
491	"sql_mul"	"*"	"calc"	false	1	false	0
492	"sql_mul"	"*"	"calc"	false	1	false	0
493	"sql_mul"	"*"	"calc"	false	1	false	0
494	"round"	"round"	"sql"	false	1	false	0
495	"round"	"round"	"sql"	false	1	false	0
496	"round"	"round"	"sql"	false	1	false	0
497	"round"	"round"	"sql"	false	1	false	0
498	"round"	"round"	"sql"	false	1	false	0
499	"round"	"round"	"sql"	false	1	false	0
500	"round"	"round"	"sql"	false	1	false	0
501	"scale_up"	"*"	"calc"	false	1	false	0
502	"scale_up"	"*"	"calc"	false	1	false	0
503	"scale_up"	"*"	"calc"	false	1	false	0
504	"scale_up"	"*"	"calc"	false	1	false	0
505	"scale_up"	"*"	"calc"	false	1	false	0
506	"scale_up"	"*"	"calc"	false	1	false	0
507	"scale_up"	"*"	"calc"	false	1	false	0
508	"scale_up"	"*"	"calc"	false	1	false	0
509	"scale_up"	"*"	"calc"	false	1	false	0
510	"scale_up"	"*"	"calc"	false	1	false	0
511	"scale_up"	"*"	"calc"	false	1	false	0
512	"scale_up"	"*"	"calc"	false	1	false	0
513	"scale_up"	"*"	"calc"	false	1	false	0
514	"scale_up"	"*"	"calc"	false	1	false	0
515	"scale_up"	"*"	"calc"	false	1	false	0
516	"scale_up"	"*"	"calc"	false	1	false	0
517	"scale_up"	"*"	"calc"	false	1	false	0
518	"scale_up"	"*"	"calc"	false	1	false	0
519	"scale_up"	"*"	"calc"	false	1	false	0
520	"scale_up"	"*"	"calc"	false	1	false	0
521	"scale_up"	"*"	"calc"	false	1	false	0
522	"scale_up"	"*"	"calc"	false	1	false	0
523	"scale_up"	"*"	"calc"	false	1	false	0
524	"scale_up"	"*"	"calc"	false	1	false	0
525	"scale_up"	"*"	"calc"	false	1	false	0
526	"scale_up"	"*"	"calc"	false	1	false	0
527	"scale_up"	"*"	"calc"	false	1	false	0
528	"scale_up"	"*"	"calc"	false	1	false	0
529	"scale_up"	"*"	"calc"	false	1	false	0
530	"scale_up"	"*"	"calc"	false	1	false	0
531	"scale_up"	"*"	"calc"	false	1	false	0
532	"scale_up"	"*"	"calc"	false	1	false	0
533	"scale_up"	"*"	"calc"	false	1	false	0
534	"scale_up"	"*"	"calc"	false	1	false	0
535	"scale_up"	"*"	"calc"	false	1	false	0
536	"scale_up"	"*"	"calc"	false	1	false	0
537	"scale_up"	"*"	"calc"	false	1	false	0
538	"scale_up"	"*"	"calc"	false	1	false	0
539	"scale_up"	"*"	"calc"	false	1	false	0
540	"scale_up"	"*"	"calc"	false	1	false	0
541	"scale_up"	"*"	"calc"	false	1	false	0
542	"scale_up"	"*"	"calc"	false	1	false	0
543	"scale_up"	"*"	"calc"	false	1	false	0
544	"scale_up"	"*"	"calc"	false	1	false	0
545	"scale_up"	"*"	"calc"	false	1	false	0
546	"scale_up"	"*"	"calc"	false	1	false	0
547	"scale_up"	"*"	"calc"	false	1	false	0
548	"scale_up"	"*"	"calc"	false	1	false	0
549	"scale_up"	"*"	"calc"	false	1	false	0
550	"scale_up"	"*"	"calc"	false	1	false	0
551	"scale_up"	"*"	"calc"	false	1	false	0
552	"scale_up"	"*"	"calc"	false	1	false	0
553	"scale_up"	"*"	"calc"	false	1	false	0
554	"scale_up"	"*"	"calc"	false	1	false	0
555	"scale_up"	"*"	"calc"	false	1	false	0
556	"scale_up"	"*"	"calc"	false	1	false	0
557	"scale_up"	"*"	"calc"	false	1	false	0
558	"scale_up"	"*"	"calc"	false	1	false	0
559	"scale_up"	"*"	"calc"	false	1	false	0
560	"scale_up"	"*"	"calc"	false	1	false	0
561	"scale_up"	"*"	"calc"	false	1	false	0
562	"scale_up"	"*"	"calc"	false	1	false	0
563	"scale_up"	"*"	"calc"	false	1	false	0
564	"scale_up"	"*"	"calc"	false	1	false	0
565	"scale_up"	"*"	"calc"	false	1	false	0
566	"scale_up"	"*"	"calc"	false	1	false	0
567	"scale_up"	"*"	"calc"	false	1	false	0
568	"scale_up"	"*"	"calc"	false	1	false	0
569	"scale_up"	"*"	"calc"	false	1	false	0
570	"scale_up"	"*"	"calc"	false	1	false	0
571	"scale_up"	"*"	"calc"	false	1	false	0
572	"scale_up"	"*"	"calc"	false	1	false	0
573	"scale_up"	"*"	"calc"	false	1	false	0
574	"scale_up"	"*"	"calc"	false	1	false	0
575	"scale_up"	"*"	"calc"	false	1	false	0
576	"scale_up"	"*"	"calc"	false	1	false	0
577	"scale_up"	"*"	"calc"	false	1	false	0
578	"scale_up"	"*"	"calc"	false	1	false	0
579	"scale_up"	"*"	"calc"	false	1	false	0
580	"scale_up"	"*"	"calc"	false	1	false	0
581	"scale_up"	"*"	"calc"	false	1	false	0
582	"scale_up"	"*"	"calc"	false	1	false	0
583	"scale_up"	"*"	"calc"	false	1	false	0
584	"scale_up"	"*"	"calc"	false	1	false	0
585	"scale_up"	"*"	"calc"	false	1	false	0
586	"scale_up"	"*"	"calc"	false	1	false	0
587	"scale_up"	"*"	"calc"	false	1	false	0
588	"scale_up"	"*"	"calc"	false	1	false	0
589	"scale_up"	"*"	"calc"	false	1	false	0
590	"scale_up"	"*"	"calc"	false	1	false	0
591	"scale_up"	"*"	"calc"	false	1	false	0
592	"scale_up"	"*"	"calc"	false	1	false	0
593	"scale_up"	"*"	"calc"	false	1	false	0
594	"scale_up"	"*"	"calc"	false	1	false	0
595	"scale_up"	"*"	"calc"	false	1	false	0
596	"scale_up"	"*"	"calc"	false	1	false	0
597	"scale_up"	"*"	"calc"	false	1	false	0
598	"scale_up"	"*"	"calc"	false	1	false	0
599	"scale_up"	"*"	"calc"	false	1	false	0
600	"scale_up"	"*"	"calc"	false	1	false	0
601	"scale_up"	"*"	"calc"	false	1	false	0
602	"scale_up"	"*"	"calc"	false	1	false	0
603	"scale_up"	"*"	"calc"	false	1	false	0
604	"scale_up"	"*"	"calc"	false	1	false	0
605	"scale_up"	"*"	"calc"	false	1	false	0
606	"scale_up"	"*"	"calc"	false	1	false	0
607	"scale_up"	"*"	"calc"	false	1	false	0
608	"scale_up"	"*"	"calc"	false	1	false	0
609	"scale_up"	"*"	"calc"	false	1	false	0
610	"scale_up"	"*"	"calc"	false	1	false	0
611	"scale_up"	"*"	"calc"	false	1	false	0
612	"scale_up"	"*"	"calc"	false	1	false	0
613	"scale_up"	"*"	"calc"	false	1	false	0
614	"scale_up"	"*"	"calc"	false	1	false	0
615	"scale_up"	"*"	"calc"	false	1	false	0
616	"scale_up"	"*"	"calc"	false	1	false	0
617	"scale_up"	"*"	"calc"	false	1	false	0
618	"scale_up"	"*"	"calc"	false	1	false	0
619	"scale_up"	"*"	"calc"	false	1	false	0
620	"scale_up"	"*"	"calc"	false	1	false	0
621	"scale_up"	"*"	"calc"	false	1	false	0
622	"scale_up"	"*"	"calc"	false	1	false	0
623	"scale_up"	"*"	"calc"	false	1	false	0
624	"scale_up"	"*"	"calc"	false	1	false	0
625	"scale_up"	"*"	"calc"	false	1	false	0
626	"scale_up"	"*"	"calc"	false	1	false	0
627	"scale_up"	"*"	"calc"	false	1	false	0
628	"scale_up"	"*"	"calc"	false	1	false	0
629	"scale_up"	"*"	"calc"	false	1	false	0
630	"scale_up"	"*"	"calc"	false	1	false	0
631	"scale_up"	"*"	"calc"	false	1	false	0
632	"scale_up"	"*"	"calc"	false	1	false	0
633	"scale_up"	"*"	"calc"	false	1	false	0
634	"scale_up"	"*"	"calc"	false	1	false	0
635	"scale_up"	"*"	"calc"	false	1	false	0
636	"scale_up"	"*"	"calc"	false	1	false	0
637	"scale_up"	"*"	"calc"	false	1	false	0
638	"scale_up"	"*"	"calc"	false	1	false	0
639	"scale_up"	"*"	"calc"	false	1	false	0
640	"scale_up"	"*"	"calc"	false	1	false	0
641	"scale_up"	"*"	"calc"	false	1	false	0
642	"scale_up"	"*"	"calc"	false	1	false	0
643	"scale_up"	"*"	"calc"	false	1	false	0
644	"scale_up"	"*"	"calc"	false	1	false	0
645	"scale_up"	"*"	"calc"	false	1	false	0
646	"scale_up"	"*"	"calc"	false	1	false	0
647	"scale_up"	"*"	"calc"	false	1	false	0
648	"scale_up"	"*"	"calc"	false	1	false	0
649	"scale_up"	"*"	"calc"	false	1	false	0
650	"scale_up"	"*"	"calc"	false	1	false	0
651	"scale_up"	"*"	"calc"	false	1	false	0
652	"scale_up"	"*"	"calc"	false	1	false	0
653	"scale_up"	"*"	"calc"	false	1	false	0
654	"scale_up"	"*"	"calc"	false	1	false	0
655	"scale_up"	"*"	"calc"	false	1	false	0
656	"scale_up"	"*"	"calc"	false	1	false	0
657	"scale_up"	"*"	"calc"	false	1	false	0
658	"scale_up"	"*"	"calc"	false	1	false	0
659	"scale_up"	"*"	"calc"	false	1	false	0
660	"scale_up"	"*"	"calc"	false	1	false	0
661	"scale_up"	"*"	"calc"	false	1	false	0
662	"scale_up"	"*"	"calc"	false	1	false	0
663	"scale_up"	"*"	"calc"	false	1	false	0
664	"scale_up"	"*"	"calc"	false	1	false	0
665	"scale_up"	"*"	"calc"	false	1	false	0
666	"scale_up"	"*"	"calc"	false	1	false	0
667	"scale_up"	"*"	"calc"	false	1	false	0
668	"scale_up"	"*"	"calc"	false	1	false	0
669	"scale_up"	"*"	"calc"	false	1	false	0
670	"scale_up"	"*"	"calc"	false	1	false	0
671	"scale_up"	"*"	"calc"	false	1	false	0
672	"scale_up"	"*"	"calc"	false	1	false	0
673	"scale_up"	"*"	"calc"	false	1	false	0
674	"scale_up"	"*"	"calc"	false	1	false	0
675	"scale_up"	"*"	"calc"	false	1	false	0
676	"scale_up"	"*"	"calc"	false	1	false	0
677	"scale_up"	"*"	"calc"	false	1	false	0
678	"scale_up"	"*"	"calc"	false	1	false	0
679	"scale_up"	"*"	"calc"	false	1	false	0
680	"scale_up"	"*"	"calc"	false	1	false	0
681	"scale_up"	"*"	"calc"	false	1	false	0
682	"scale_up"	"*"	"calc"	false	1	false	0
683	"scale_up"	"*"	"calc"	false	1	false	0
684	"scale_up"	"*"	"calc"	false	1	false	0
685	"scale_up"	"*"	"calc"	false	1	false	0
686	"scale_up"	"*"	"calc"	false	1	false	0
687	"scale_up"	"*"	"calc"	false	1	false	0
688	"scale_up"	"*"	"calc"	false	1	false	0
689	"scale_up"	"*"	"calc"	false	1	false	0
690	"scale_up"	"*"	"calc"	false	1	false	0
691	"scale_up"	"*"	"calc"	false	1	false	0
692	"scale_up"	"*"	"calc"	false	1	false	0
693	"scale_up"	"*"	"calc"	false	1	false	0
694	"scale_up"	"*"	"calc"	false	1	false	0
695	"scale_up"	"*"	"calc"	false	1	false	0
696	"scale_up"	"*"	"calc"	false	1	false	0
697	"scale_up"	"*"	"calc"	false	1	false	0
698	"scale_up"	"*"	"calc"	false	1	false	0
699	"scale_up"	"*"	"calc"	false	1	false	0
700	"scale_up"	"*"	"calc"	false	1	false	0
701	"scale_up"	"*"	"calc"	false	1	false	0
702	"scale_up"	"*"	"calc"	false	1	false	0
703	"scale_up"	"*"	"calc"	false	1	false	0
704	"scale_up"	"*"	"calc"	false	1	false	0
705	"scale_up"	"*"	"calc"	false	1	false	0
706	"scale_up"	"*"	"calc"	false	1	false	0
707	"scale_up"	"*"	"calc"	false	1	false	0
708	"scale_up"	"*"	"calc"	false	1	false	0
709	"scale_up"	"*"	"calc"	false	1	false	0
710	"scale_up"	"*"	"calc"	false	1	false	0
711	"scale_up"	"*"	"calc"	false	1	false	0
712	"scale_up"	"*"	"calc"	false	1	false	0
713	"scale_up"	"*"	"calc"	false	1	false	0
714	"scale_up"	"*"	"calc"	false	1	false	0
715	"scale_up"	"*"	"calc"	false	1	false	0
716	"scale_up"	"*"	"calc"	false	1	false	0
717	"scale_up"	"*"	"calc"	false	1	false	0
718	"scale_up"	"*"	"calc"	false	1	false	0
719	"scale_up"	"*"	"calc"	false	1	false	0
720	"scale_up"	"*"	"calc"	false	1	false	0
721	"scale_up"	"*"	"calc"	false	1	false	0
722	"scale_up"	"*"	"calc"	false	1	false	0
723	"scale_up"	"*"	"calc"	false	1	false	0
724	"scale_up"	"*"	"calc"	false	1	false	0
725	"scale_up"	"*"	"calc"	false	1	false	0
726	"scale_up"	"*"	"calc"	false	1	false	0
727	"scale_up"	"*"	"calc"	false	1	false	0
728	"scale_up"	"*"	"calc"	false	1	false	0
729	"scale_up"	"*"	"calc"	false	1	false	0
730	"scale_up"	"*"	"calc"	false	1	false	0
731	"scale_up"	"*"	"calc"	false	1	false	0
732	"scale_up"	"*"	"calc"	false	1	false	0
733	"scale_up"	"*"	"calc"	false	1	false	0
734	"scale_up"	"*"	"calc"	false	1	false	0
735	"scale_up"	"*"	"calc"	false	1	false	0
736	"scale_up"	"*"	"calc"	false	1	false	0
737	"scale_up"	"*"	"calc"	false	1	false	0
738	"scale_up"	"*"	"calc"	false	1	false	0
739	"scale_up"	"*"	"calc"	false	1	false	0
740	"scale_up"	"*"	"calc"	false	1	false	0
741	"scale_up"	"*"	"calc"	false	1	false	0
742	"scale_up"	"*"	"calc"	false	1	false	0
743	"scale_up"	"*"	"calc"	false	1	false	0
744	"scale_up"	"*"	"calc"	false	1	false	0
745	"scale_up"	"*"	"calc"	false	1	false	0
746	"scale_up"	"*"	"calc"	false	1	false	0
747	"scale_up"	"*"	"calc"	false	1	false	0
748	"scale_up"	"*"	"calc"	false	1	false	0
749	"scale_up"	"*"	"calc"	false	1	false	0
750	"scale_up"	"*"	"calc"	false	1	false	0
751	"scale_up"	"*"	"calc"	false	1	false	0
752	"scale_up"	"*"	"calc"	false	1	false	0
753	"scale_up"	"*"	"calc"	false	1	false	0
754	"scale_up"	"*"	"calc"	false	1	false	0
755	"scale_up"	"*"	"calc"	false	1	false	0
756	"scale_up"	"*"	"calc"	false	1	false	0
757	"scale_up"	"*"	"calc"	false	1	false	0
758	"scale_up"	"*"	"calc"	false	1	false	0
759	"scale_up"	"*"	"calc"	false	1	false	0
760	"scale_up"	"*"	"calc"	false	1	false	0
761	"scale_up"	"*"	"calc"	false	1	false	0
762	"scale_up"	"*"	"calc"	false	1	false	0
763	"scale_up"	"*"	"calc"	false	1	false	0
764	"scale_up"	"*"	"calc"	false	1	false	0
765	"scale_up"	"*"	"calc"	false	1	false	0
766	"scale_up"	"*"	"calc"	false	1	false	0
767	"scale_up"	"*"	"calc"	false	1	false	0
768	"scale_up"	"*"	"calc"	false	1	false	0
769	"scale_up"	"*"	"calc"	false	1	false	0
770	"scale_up"	"*"	"calc"	false	1	false	0
771	"scale_up"	"*"	"calc"	false	1	false	0
772	"scale_up"	"*"	"calc"	false	1	false	0
773	"scale_up"	"*"	"calc"	false	1	false	0
774	"scale_up"	"*"	"calc"	false	1	false	0
775	"scale_up"	"*"	"calc"	false	1	false	0
776	"scale_up"	"*"	"calc"	false	1	false	0
777	"scale_up"	"*"	"calc"	false	1	false	0
778	"scale_up"	"*"	"calc"	false	1	false	0
779	"scale_up"	"*"	"calc"	false	1	false	0
780	"scale_up"	"*"	"calc"	false	1	false	0
781	"scale_up"	"*"	"calc"	false	1	false	0
782	"scale_up"	"*"	"calc"	false	1	false	0
783	"scale_up"	"*"	"calc"	false	1	false	0
784	"scale_up"	"*"	"calc"	false	1	false	0
785	"scale_up"	"*"	"calc"	false	1	false	0
786	"scale_up"	"*"	"calc"	false	1	false	0
787	"scale_up"	"*"	"calc"	false	1	false	0
788	"scale_up"	"*"	"calc"	false	1	false	0
789	"scale_up"	"*"	"calc"	false	1	false	0
790	"scale_up"	"*"	"calc"	false	1	false	0
791	"scale_up"	"*"	"calc"	false	1	false	0
792	"scale_up"	"*"	"calc"	false	1	false	0
793	"scale_up"	"*"	"calc"	false	1	false	0
794	"scale_up"	"*"	"calc"	false	1	false	0
795	"scale_up"	"*"	"calc"	false	1	false	0
796	"scale_up"	"*"	"calc"	false	1	false	0
797	"scale_up"	"*"	"calc"	false	1	false	0
798	"scale_up"	"*"	"calc"	false	1	false	0
799	"scale_up"	"*"	"calc"	false	1	false	0
800	"scale_up"	"*"	"calc"	false	1	false	0
801	"scale_up"	"*"	"calc"	false	1	false	0
802	"scale_up"	"*"	"calc"	false	1	false	0
803	"scale_up"	"*"	"calc"	false	1	false	0
804	"scale_up"	"*"	"calc"	false	1	false	0
805	"scale_up"	"*"	"calc"	false	1	false	0
806	"scale_up"	"*"	"calc"	false	1	false	0
807	"scale_up"	"*"	"calc"	false	1	false	0
808	"scale_up"	"*"	"calc"	false	1	false	0
809	"scale_up"	"*"	"calc"	false	1	false	0
810	"scale_up"	"*"	"calc"	false	1	false	0
811	"scale_up"	"*"	"calc"	false	1	false	0
812	"scale_up"	"*"	"calc"	false	1	false	0
813	"scale_up"	"*"	"calc"	false	1	false	0
814	"scale_up"	"*"	"calc"	false	1	false	0
815	"scale_up"	"*"	"calc"	false	1	false	0
816	"scale_up"	"*"	"calc"	false	1	false	0
817	"scale_up"	"*"	"calc"	false	1	false	0
818	"scale_up"	"*"	"calc"	false	1	false	0
819	"scale_up"	"*"	"calc"	false	1	false	0
820	"scale_up"	"*"	"calc"	false	1	false	0
821	"scale_up"	"*"	"calc"	false	1	false	0
822	"scale_up"	"*"	"calc"	false	1	false	0
823	"scale_up"	"*"	"calc"	false	1	false	0
824	"scale_up"	"*"	"calc"	false	1	false	0
825	"scale_up"	"*"	"calc"	false	1	false	0
826	"scale_up"	"*"	"calc"	false	1	false	0
827	"scale_up"	"*"	"calc"	false	1	false	0
828	"scale_up"	"*"	"calc"	false	1	false	0
829	"scale_up"	"*"	"calc"	false	1	false	0
830	"scale_up"	"*"	"calc"	false	1	false	0
831	"scale_up"	"*"	"calc"	false	1	false	0
832	"scale_up"	"*"	"calc"	false	1	false	0
833	"scale_up"	"*"	"calc"	false	1	false	0
834	"scale_up"	"*"	"calc"	false	1	false	0
835	"scale_up"	"*"	"calc"	false	1	false	0
836	"scale_up"	"*"	"calc"	false	1	false	0
837	"scale_up"	"*"	"calc"	false	1	false	0
838	"scale_up"	"*"	"calc"	false	1	false	0
839	"scale_up"	"*"	"calc"	false	1	false	0
840	"scale_up"	"*"	"calc"	false	1	false	0
841	"scale_up"	"*"	"calc"	false	1	false	0
842	"scale_up"	"*"	"calc"	false	1	false	0
843	"scale_up"	"*"	"calc"	false	1	false	0
844	"scale_up"	"*"	"calc"	false	1	false	0
845	"scale_up"	"*"	"calc"	false	1	false	0
846	"scale_up"	"*"	"calc"	false	1	false	0
847	"scale_up"	"*"	"calc"	false	1	false	0
848	"scale_up"	"*"	"calc"	false	1	false	0
849	"scale_up"	"*"	"calc"	false	1	false	0
850	"scale_up"	"*"	"calc"	false	1	false	0
851	"scale_up"	"*"	"calc"	false	1	false	0
852	"scale_up"	"*"	"calc"	false	1	false	0
853	"scale_up"	"*"	"calc"	false	1	false	0
854	"scale_up"	"*"	"calc"	false	1	false	0
855	"scale_up"	"*"	"calc"	false	1	false	0
856	"scale_up"	"*"	"calc"	false	1	false	0
857	"scale_up"	"*"	"calc"	false	1	false	0
858	"scale_up"	"*"	"calc"	false	1	false	0
859	"scale_up"	"*"	"calc"	false	1	false	0
860	"scale_up"	"*"	"calc"	false	1	false	0
861	"scale_up"	"*"	"calc"	false	1	false	0
862	"scale_up"	"*"	"calc"	false	1	false	0
863	"scale_up"	"*"	"calc"	false	1	false	0
864	"scale_up"	"*"	"calc"	false	1	false	0
865	"scale_up"	"*"	"calc"	false	1	false	0
866	"scale_up"	"*"	"calc"	false	1	false	0
867	"scale_up"	"*"	"calc"	false	1	false	0
868	"scale_up"	"*"	"calc"	false	1	false	0
869	"scale_up"	"*"	"calc"	false	1	false	0
870	"scale_up"	"*"	"calc"	false	1	false	0
871	"scale_up"	"*"	"calc"	false	1	false	0
872	"scale_up"	"*"	"calc"	false	1	false	0
873	"scale_up"	"*"	"calc"	false	1	false	0
874	"scale_up"	"*"	"calc"	false	1	false	0
875	"scale_up"	"*"	"calc"	false	1	false	0
876	"scale_up"	"*"	"calc"	false	1	false	0
877	"scale_up"	"*"	"calc"	false	1	false	0
878	"scale_up"	"*"	"calc"	false	1	false	0
879	"scale_up"	"*"	"calc"	false	1	false	0
880	"scale_up"	"*"	"calc"	false	1	false	0
881	"scale_up"	"*"	"calc"	false	1	false	0
882	"scale_up"	"*"	"calc"	false	1	false	0
883	"scale_up"	"*"	"calc"	false	1	false	0
884	"scale_up"	"*"	"calc"	false	1	false	0
885	"scale_up"	"*"	"calc"	false	1	false	0
886	"scale_up"	"*"	"calc"	false	1	false	0
887	"scale_up"	"*"	"calc"	false	1	false	0
888	"scale_up"	"*"	"calc"	false	1	false	0
889	"scale_up"	"*"	"calc"	false	1	false	0
890	"scale_up"	"*"	"calc"	false	1	false	0
891	"scale_up"	"*"	"calc"	false	1	false	0
892	"scale_up"	"*"	"calc"	false	1	false	0
893	"scale_up"	"*"	"calc"	false	1	false	0
894	"scale_up"	"*"	"calc"	false	1	false	0
895	"scale_up"	"*"	"calc"	false	1	false	0
896	"scale_up"	"*"	"calc"	false	1	false	0
897	"scale_up"	"*"	"calc"	false	1	false	0
898	"scale_up"	"*"	"calc"	false	1	false	0
899	"scale_up"	"*"	"calc"	false	1	false	0
900	"scale_up"	"*"	"calc"	false	1	false	0
901	"scale_up"	"*"	"calc"	false	1	false	0
902	"scale_up"	"*"	"calc"	false	1	false	0
903	"scale_up"	"*"	"calc"	false	1	false	0
904	"scale_up"	"*"	"calc"	false	1	false	0
905	"scale_up"	"*"	"calc"	false	1	false	0
906	"scale_up"	"*"	"calc"	false	1	false	0
907	"scale_up"	"*"	"calc"	false	1	false	0
908	"scale_up"	"*"	"calc"	false	1	false	0
909	"scale_up"	"*"	"calc"	false	1	false	0
910	"scale_up"	"*"	"calc"	false	1	false	0
911	"scale_up"	"*"	"calc"	false	1	false	0
912	"scale_up"	"*"	"calc"	false	1	false	0
913	"scale_up"	"*"	"calc"	false	1	false	0
914	"scale_up"	"*"	"calc"	false	1	false	0
915	"scale_up"	"*"	"calc"	false	1	false	0
916	"scale_up"	"*"	"calc"	false	1	false	0
917	"scale_up"	"*"	"calc"	false	1	false	0
918	"scale_up"	"*"	"calc"	false	1	false	0
919	"scale_up"	"*"	"calc"	false	1	false	0
920	"scale_up"	"*"	"calc"	false	1	false	0
921	"scale_up"	"*"	"calc"	false	1	false	0
922	"scale_up"	"*"	"calc"	false	1	false	0
923	"scale_up"	"*"	"calc"	false	1	false	0
924	"scale_up"	"*"	"calc"	false	1	false	0
925	"scale_up"	"*"	"calc"	false	1	false	0
926	"scale_up"	"*"	"calc"	false	1	false	0
927	"scale_up"	"*"	"calc"	false	1	false	0
928	"scale_up"	"*"	"calc"	false	1	false	0
929	"scale_up"	"*"	"calc"	false	1	false	0
930	"scale_up"	"*"	"calc"	false	1	false	0
931	"scale_up"	"*"	"calc"	false	1	false	0
932	"scale_up"	"*"	"calc"	false	1	false	0
933	"scale_up"	"*"	"calc"	false	1	false	0
934	"scale_up"	"*"	"calc"	false	1	false	0
935	"scale_up"	"*"	"calc"	false	1	false	0
936	"scale_up"	"*"	"calc"	false	1	false	0
937	"scale_up"	"*"	"calc"	false	1	false	0
938	"scale_up"	"*"	"calc"	false	1	false	0
939	"scale_up"	"*"	"calc"	false	1	false	0
940	"scale_up"	"*"	"calc"	false	1	false	0
941	"scale_up"	"*"	"calc"	false	1	false	0
942	"scale_up"	"*"	"calc"	false	1	false	0
943	"scale_up"	"*"	"calc"	false	1	false	0
944	"scale_up"	"*"	"calc"	false	1	false	0
945	"scale_up"	"*"	"calc"	false	1	false	0
946	"scale_up"	"*"	"calc"	false	1	false	0
947	"scale_up"	"*"	"calc"	false	1	false	0
948	"scale_up"	"*"	"calc"	false	1	false	0
949	"scale_up"	"*"	"calc"	false	1	false	0
950	"scale_up"	"*"	"calc"	false	1	false	0
951	"scale_up"	"*"	"calc"	false	1	false	0
952	"scale_up"	"*"	"calc"	false	1	false	0
953	"scale_up"	"*"	"calc"	false	1	false	0
954	"scale_up"	"*"	"calc"	false	1	false	0
955	"scale_up"	"*"	"calc"	false	1	false	0
956	"scale_up"	"*"	"calc"	false	1	false	0
957	"scale_up"	"*"	"calc"	false	1	false	0
958	"scale_up"	"*"	"calc"	false	1	false	0
959	"scale_up"	"*"	"calc"	false	1	false	0
960	"scale_up"	"*"	"calc"	false	1	false	0
961	"scale_up"	"*"	"calc"	false	1	false	0
962	"scale_up"	"*"	"calc"	false	1	false	0
963	"scale_up"	"*"	"calc"	false	1	false	0
964	"scale_up"	"*"	"calc"	false	1	false	0
965	"scale_up"	"*"	"calc"	false	1	false	0
966	"scale_up"	"*"	"calc"	false	1	false	0
967	"scale_up"	"*"	"calc"	false	1	false	0
968	"scale_up"	"*"	"calc"	false	1	false	0
969	"scale_up"	"*"	"calc"	false	1	false	0
970	"scale_up"	"*"	"calc"	false	1	false	0
971	"scale_up"	"*"	"calc"	false	1	false	0
972	"scale_up"	"*"	"calc"	false	1	false	0
973	"scale_up"	"*"	"calc"	false	1	false	0
974	"scale_up"	"*"	"calc"	false	1	false	0
975	"scale_up"	"*"	"calc"	false	1	false	0
976	"scale_up"	"*"	"calc"	false	1	false	0
977	"scale_up"	"*"	"calc"	false	1	false	0
978	"scale_up"	"*"	"calc"	false	1	false	0
979	"scale_up"	"*"	"calc"	false	1	false	0
980	"scale_up"	"*"	"calc"	false	1	false	0
981	"scale_up"	"*"	"calc"	false	1	false	0
982	"scale_up"	"*"	"calc"	false	1	false	0
983	"scale_up"	"*"	"calc"	false	1	false	0
984	"scale_up"	"*"	"calc"	false	1	false	0
985	"power"	"pow"	"mmath"	false	1	false	0
986	"floor"	"floor"	"mmath"	false	1	false	0
987	"ceil"	"ceil"	"mmath"	false	1	false	0
988	"ceiling"	"ceil"	"mmath"	false	1	false	0
989	"sin"	"sin"	"mmath"	false	1	false	0
990	"cos"	"cos"	"mmath"	false	1	false	0
991	"tan"	"tan"	"mmath"	false	1	false	0
992	"asin"	"asin"	"mmath"	false	1	false	0
993	"acos"	"acos"	"mmath"	false	1	false	0
994	"atan"	"atan"	"mmath"	false	1	false	0
995	"atan"	"atan2"	"mmath"	false	1	false	0
996	"sinh"	"sinh"	"mmath"	false	1	false	0
997	"cot"	"cot"	"mmath"	false	1	false	0
998	"cosh"	"cosh"	"mmath"	false	1	false	0
999	"tanh"	"tanh"	"mmath"	false	1	false	0
1000	"sqrt"	"sqrt"	"mmath"	false	1	false	0
1001	"exp"	"exp"	"mmath"	false	1	false	0
1002	"log"	"log"	"mmath"	false	1	false	0
1003	"log10"	"log10"	"mmath"	false	1	false	0
1004	"power"	"pow"	"mmath"	false	1	false	0
1005	"floor"	"floor"	"mmath"	false	1	false	0
1006	"ceil"	"ceil"	"mmath"	false	1	false	0
1007	"ceiling"	"ceil"	"mmath"	false	1	false	0
1008	"sin"	"sin"	"mmath"	false	1	false	0
1009	"cos"	"cos"	"mmath"	false	1	false	0
1010	"tan"	"tan"	"mmath"	false	1	false	0
1011	"asin"	"asin"	"mmath"	false	1	false	0
1012	"acos"	"acos"	"mmath"	false	1	false	0
1013	"atan"	"atan"	"mmath"	false	1	false	0
1014	"atan"	"atan2"	"mmath"	false	1	false	0
1015	"sinh"	"sinh"	"mmath"	false	1	false	0
1016	"cot"	"cot"	"mmath"	false	1	false	0
1017	"cosh"	"cosh"	"mmath"	false	1	false	0
1018	"tanh"	"tanh"	"mmath"	false	1	false	0
1019	"sqrt"	"sqrt"	"mmath"	false	1	false	0
1020	"exp"	"exp"	"mmath"	false	1	false	0
1021	"log"	"log"	"mmath"	false	1	false	0
1022	"log10"	"log10"	"mmath"	false	1	false	0
1023	"pi"	"pi"	"mmath"	false	1	false	0
1024	"rand"	"rand"	"mmath"	false	1	true	0
1025	"rand"	"sqlrand"	"mmath"	false	1	true	0
1026	"curdate"	"current_date"	"mtime"	false	1	false	0
1027	"current_date"	"current_date"	"mtime"	false	1	false	0
1028	"curtime"	"current_time"	"mtime"	false	1	false	0
1029	"current_time"	"current_time"	"mtime"	false	1	false	0
1030	"current_timestamp"	"current_timestamp"	"mtime"	false	1	false	0
1031	"localtime"	"current_time"	"sql"	false	1	false	0
1032	"localtimestamp"	"current_timestamp"	"sql"	false	1	false	0
1033	"sql_sub"	"date_sub_msec_interval"	"mtime"	false	1	false	0
1034	"sql_sub"	"date_sub_month_interval"	"mtime"	false	1	false	0
1035	"sql_sub"	"timestamp_sub_msec_interval"	"mtime"	false	1	false	0
1036	"sql_sub"	"timestamp_sub_month_interval"	"mtime"	false	1	false	0
1037	"sql_sub"	"timestamp_sub_msec_interval"	"mtime"	false	1	false	0
1038	"sql_sub"	"timestamp_sub_month_interval"	"mtime"	false	1	false	0
1039	"sql_sub"	"time_sub_msec_interval"	"mtime"	false	1	false	0
1040	"sql_sub"	"diff"	"mtime"	false	1	false	0
1041	"sql_sub"	"diff"	"mtime"	false	1	false	0
1042	"sql_sub"	"diff"	"mtime"	false	1	false	0
1043	"sql_add"	"date_add_msec_interval"	"mtime"	false	1	false	0
1044	"sql_add"	"addmonths"	"mtime"	false	1	false	0
1045	"sql_add"	"timestamp_add_msec_interval"	"mtime"	false	1	false	0
1046	"sql_add"	"timestamp_add_month_interval"	"mtime"	false	1	false	0
1047	"sql_add"	"timestamp_add_msec_interval"	"mtime"	false	1	false	0
1048	"sql_add"	"timestamp_add_month_interval"	"mtime"	false	1	false	0
1049	"sql_add"	"time_add_msec_interval"	"mtime"	false	1	false	0
1050	"local_timezone"	"local_timezone"	"mtime"	false	1	false	0
1051	"year"	"year"	"mtime"	false	1	false	0
1052	"month"	"month"	"mtime"	false	1	false	0
1053	"day"	"day"	"mtime"	false	1	false	0
1054	"hour"	"hours"	"mtime"	false	1	false	0
1055	"minute"	"minutes"	"mtime"	false	1	false	0
1056	"second"	"sql_seconds"	"mtime"	false	1	false	0
1057	"year"	"year"	"mtime"	false	1	false	0
1058	"month"	"month"	"mtime"	false	1	false	0
1059	"day"	"day"	"mtime"	false	1	false	0
1060	"hour"	"hours"	"mtime"	false	1	false	0
1061	"minute"	"minutes"	"mtime"	false	1	false	0
1062	"second"	"sql_seconds"	"mtime"	false	1	false	0
1063	"year"	"year"	"mtime"	false	1	false	0
1064	"month"	"month"	"mtime"	false	1	false	0
1065	"day"	"day"	"mtime"	false	1	false	0
1066	"hour"	"hours"	"mtime"	false	1	false	0
1067	"minute"	"minutes"	"mtime"	false	1	false	0
1068	"second"	"sql_seconds"	"mtime"	false	1	false	0
1069	"year"	"year"	"mtime"	false	1	false	0
1070	"month"	"month"	"mtime"	false	1	false	0
1071	"day"	"day"	"mtime"	false	1	false	0
1072	"hour"	"hours"	"mtime"	false	1	false	0
1073	"minute"	"minutes"	"mtime"	false	1	false	0
1074	"second"	"seconds"	"mtime"	false	1	false	0
1075	"dayofyear"	"dayofyear"	"mtime"	false	1	false	0
1076	"weekofyear"	"weekofyear"	"mtime"	false	1	false	0
1077	"dayofweek"	"dayofweek"	"mtime"	false	1	false	0
1078	"dayofmonth"	"day"	"mtime"	false	1	false	0
1079	"week"	"weekofyear"	"mtime"	false	1	false	0
1080	"next_value_for"	"next_value"	"sql"	false	1	true	0
1081	"get_value_for"	"get_value"	"sql"	false	1	false	0
1082	"restart"	"restart"	"sql"	false	1	false	0
1083	"locate"	"locate"	"str"	false	1	false	0
1084	"locate"	"locate"	"str"	false	1	false	0
1085	"substring"	"substring"	"str"	false	1	false	0
1086	"substring"	"substring"	"str"	false	1	false	0
1087	"like"	"like"	"str"	false	1	false	0
1088	"like"	"like"	"str"	false	1	false	0
1089	"ilike"	"ilike"	"str"	false	1	false	0
1090	"ilike"	"ilike"	"str"	false	1	false	0
1091	"not_like"	"not_like"	"str"	false	1	false	0
1092	"not_like"	"not_like"	"str"	false	1	false	0
1093	"not_ilike"	"not_ilike"	"str"	false	1	false	0
1094	"not_ilike"	"not_ilike"	"str"	false	1	false	0
1095	"patindex"	"patindex"	"pcre"	false	1	false	0
1096	"truncate"	"stringleft"	"str"	false	1	false	0
1097	"concat"	"+"	"calc"	false	1	false	0
1098	"ascii"	"ascii"	"str"	false	1	false	0
1099	"code"	"unicode"	"str"	false	1	false	0
1100	"length"	"stringlength"	"str"	false	1	false	0
1101	"right"	"stringright"	"str"	false	1	false	0
1102	"left"	"stringleft"	"str"	false	1	false	0
1103	"upper"	"toUpper"	"str"	false	1	false	0
1104	"ucase"	"toUpper"	"str"	false	1	false	0
1105	"lower"	"toLower"	"str"	false	1	false	0
1106	"lcase"	"toLower"	"str"	false	1	false	0
1107	"trim"	"trim"	"str"	false	1	false	0
1108	"ltrim"	"ltrim"	"str"	false	1	false	0
1109	"rtrim"	"rtrim"	"str"	false	1	false	0
1110	"insert"	"insert"	"str"	false	1	false	0
1111	"replace"	"replace"	"str"	false	1	false	0
1112	"repeat"	"repeat"	"str"	false	1	false	0
1113	"space"	"space"	"str"	false	1	false	0
1114	"char_length"	"length"	"str"	false	1	false	0
1115	"character_length"	"length"	"str"	false	1	false	0
1116	"octet_length"	"nbytes"	"str"	false	1	false	0
1117	"soundex"	"soundex"	"txtsim"	false	1	false	0
1118	"difference"	"stringdiff"	"txtsim"	false	1	false	0
1119	"editdistance"	"editdistance"	"txtsim"	false	1	false	0
1120	"editdistance2"	"editdistance2"	"txtsim"	false	1	false	0
1121	"similarity"	"similarity"	"txtsim"	false	1	false	0
1122	"qgramnormalize"	"qgramnormalize"	"txtsim"	false	1	false	0
1123	"levenshtein"	"levenshtein"	"txtsim"	false	1	false	0
1124	"levenshtein"	"levenshtein"	"txtsim"	false	1	false	0
1125	"locate"	"locate"	"str"	false	1	false	0
1126	"locate"	"locate"	"str"	false	1	false	0
1127	"substring"	"substring"	"str"	false	1	false	0
1128	"substring"	"substring"	"str"	false	1	false	0
1129	"like"	"like"	"str"	false	1	false	0
1130	"like"	"like"	"str"	false	1	false	0
1131	"ilike"	"ilike"	"str"	false	1	false	0
1132	"ilike"	"ilike"	"str"	false	1	false	0
1133	"not_like"	"not_like"	"str"	false	1	false	0
1134	"not_like"	"not_like"	"str"	false	1	false	0
1135	"not_ilike"	"not_ilike"	"str"	false	1	false	0
1136	"not_ilike"	"not_ilike"	"str"	false	1	false	0
1137	"patindex"	"patindex"	"pcre"	false	1	false	0
1138	"truncate"	"stringleft"	"str"	false	1	false	0
1139	"concat"	"+"	"calc"	false	1	false	0
1140	"ascii"	"ascii"	"str"	false	1	false	0
1141	"code"	"unicode"	"str"	false	1	false	0
1142	"length"	"stringlength"	"str"	false	1	false	0
1143	"right"	"stringright"	"str"	false	1	false	0
1144	"left"	"stringleft"	"str"	false	1	false	0
1145	"upper"	"toUpper"	"str"	false	1	false	0
1146	"ucase"	"toUpper"	"str"	false	1	false	0
1147	"lower"	"toLower"	"str"	false	1	false	0
1148	"lcase"	"toLower"	"str"	false	1	false	0
1149	"trim"	"trim"	"str"	false	1	false	0
1150	"ltrim"	"ltrim"	"str"	false	1	false	0
1151	"rtrim"	"rtrim"	"str"	false	1	false	0
1152	"insert"	"insert"	"str"	false	1	false	0
1153	"replace"	"replace"	"str"	false	1	false	0
1154	"repeat"	"repeat"	"str"	false	1	false	0
1155	"space"	"space"	"str"	false	1	false	0
1156	"char_length"	"length"	"str"	false	1	false	0
1157	"character_length"	"length"	"str"	false	1	false	0
1158	"octet_length"	"nbytes"	"str"	false	1	false	0
1159	"soundex"	"soundex"	"txtsim"	false	1	false	0
1160	"difference"	"stringdiff"	"txtsim"	false	1	false	0
1161	"editdistance"	"editdistance"	"txtsim"	false	1	false	0
1162	"editdistance2"	"editdistance2"	"txtsim"	false	1	false	0
1163	"similarity"	"similarity"	"txtsim"	false	1	false	0
1164	"qgramnormalize"	"qgramnormalize"	"txtsim"	false	1	false	0
1165	"levenshtein"	"levenshtein"	"txtsim"	false	1	false	0
1166	"levenshtein"	"levenshtein"	"txtsim"	false	1	false	0
1167	"locate"	"locate"	"str"	false	1	false	0
1168	"locate"	"locate"	"str"	false	1	false	0
1169	"substring"	"substring"	"str"	false	1	false	0
1170	"substring"	"substring"	"str"	false	1	false	0
1171	"like"	"like"	"str"	false	1	false	0
1172	"like"	"like"	"str"	false	1	false	0
1173	"ilike"	"ilike"	"str"	false	1	false	0
1174	"ilike"	"ilike"	"str"	false	1	false	0
1175	"not_like"	"not_like"	"str"	false	1	false	0
1176	"not_like"	"not_like"	"str"	false	1	false	0
1177	"not_ilike"	"not_ilike"	"str"	false	1	false	0
1178	"not_ilike"	"not_ilike"	"str"	false	1	false	0
1179	"patindex"	"patindex"	"pcre"	false	1	false	0
1180	"truncate"	"stringleft"	"str"	false	1	false	0
1181	"concat"	"+"	"calc"	false	1	false	0
1182	"ascii"	"ascii"	"str"	false	1	false	0
1183	"code"	"unicode"	"str"	false	1	false	0
1184	"length"	"stringlength"	"str"	false	1	false	0
1185	"right"	"stringright"	"str"	false	1	false	0
1186	"left"	"stringleft"	"str"	false	1	false	0
1187	"upper"	"toUpper"	"str"	false	1	false	0
1188	"ucase"	"toUpper"	"str"	false	1	false	0
1189	"lower"	"toLower"	"str"	false	1	false	0
1190	"lcase"	"toLower"	"str"	false	1	false	0
1191	"trim"	"trim"	"str"	false	1	false	0
1192	"ltrim"	"ltrim"	"str"	false	1	false	0
1193	"rtrim"	"rtrim"	"str"	false	1	false	0
1194	"insert"	"insert"	"str"	false	1	false	0
1195	"replace"	"replace"	"str"	false	1	false	0
1196	"repeat"	"repeat"	"str"	false	1	false	0
1197	"space"	"space"	"str"	false	1	false	0
1198	"char_length"	"length"	"str"	false	1	false	0
1199	"character_length"	"length"	"str"	false	1	false	0
1200	"octet_length"	"nbytes"	"str"	false	1	false	0
1201	"soundex"	"soundex"	"txtsim"	false	1	false	0
1202	"difference"	"stringdiff"	"txtsim"	false	1	false	0
1203	"editdistance"	"editdistance"	"txtsim"	false	1	false	0
1204	"editdistance2"	"editdistance2"	"txtsim"	false	1	false	0
1205	"similarity"	"similarity"	"txtsim"	false	1	false	0
1206	"qgramnormalize"	"qgramnormalize"	"txtsim"	false	1	false	0
1207	"levenshtein"	"levenshtein"	"txtsim"	false	1	false	0
1208	"levenshtein"	"levenshtein"	"txtsim"	false	1	false	0
1209	"copyfrom"	"copy_from"	"sql"	false	1	false	0
1210	"copyfrom"	"copyfrom"	"sql"	false	1	false	0
1211	"copyfrom"	"importTable"	"sql"	false	1	false	0
29	"not_unique"	"not_unique"	"sql"	false	3	false	0
41	"zero_or_one"	"zero_or_one"	"sql"	false	3	false	0
42	"exist"	"exist"	"aggr"	false	3	false	0
43	"not_exist"	"not_exist"	"aggr"	false	3	false	0
48	"min"	"min"	"aggr"	false	3	false	0
49	"max"	"max"	"aggr"	false	3	false	0
53	"sum"	"sum"	"aggr"	false	3	false	0
54	"sum"	"sum"	"aggr"	false	3	false	0
55	"sum"	"sum"	"aggr"	false	3	false	0
56	"sum"	"sum"	"aggr"	false	3	false	0
57	"sum"	"sum"	"aggr"	false	3	false	0
58	"sum"	"sum"	"aggr"	false	3	false	0
59	"sum"	"sum"	"aggr"	false	3	false	0
60	"sum"	"sum"	"aggr"	false	3	false	0
61	"sum"	"sum"	"aggr"	false	3	false	0
62	"sum"	"sum"	"aggr"	false	3	false	0
63	"sum"	"sum"	"aggr"	false	3	false	0
64	"prod"	"prod"	"aggr"	false	3	false	0
65	"prod"	"prod"	"aggr"	false	3	false	0
66	"prod"	"prod"	"aggr"	false	3	false	0
67	"prod"	"prod"	"aggr"	false	3	false	0
68	"prod"	"prod"	"aggr"	false	3	false	0
69	"prod"	"prod"	"aggr"	false	3	false	0
70	"prod"	"prod"	"aggr"	false	3	false	0
71	"prod"	"prod"	"aggr"	false	3	false	0
72	"prod"	"prod"	"aggr"	false	3	false	0
73	"prod"	"prod"	"aggr"	false	3	false	0
88	"sum"	"sum"	"aggr"	false	3	false	0
89	"prod"	"prod"	"aggr"	false	3	false	0
90	"sum"	"sum"	"aggr"	false	3	false	0
91	"prod"	"prod"	"aggr"	false	3	false	0
92	"avg"	"avg"	"aggr"	false	3	false	0
93	"count_no_nil"	"count_no_nil"	"aggr"	false	3	false	0
94	"count"	"count"	"aggr"	false	3	false	0
5554	"env"	"CREATE FUNCTION env () RETURNS TABLE( name varchar(1024), value varchar(2048)) EXTERNAL NAME sql.sql_environment;"	"sql"	true	1	false	2000
5558	"var"	"CREATE FUNCTION var() RETURNS TABLE( name varchar(1024)) EXTERNAL NAME sql.sql_variables;"	"sql"	true	1	false	2000
5566	"db_users"	"CREATE FUNCTION db_users () RETURNS TABLE( name varchar(2048)) EXTERNAL NAME sql.db_users;"	"sql"	true	1	false	2000
5586	"like"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate filter function \"like\"(val string, pat string, esc string) external name algebra.likesubselect;"	"algebra"	true	4	false	2000
5591	"ilike"	"create filter function \"ilike\"(val string, pat string, esc string) external name algebra.ilikesubselect;"	"algebra"	true	4	false	2000
5596	"degrees"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate function degrees(r double) \nreturns double\n\treturn r*180/pi();"	"user"	true	1	false	2000
5600	"radians"	"create function radians(d double) \nreturns double\n\treturn d*pi()/180;"	"user"	true	1	false	2000
5604	"times"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- Provide a simple equivalent for the UNIX times command\n-- times 0 ms user 0 ms system 0 ms 0 reads 0 writes\n\ncreate procedure times()\nexternal name sql.times;"	"sql"	true	2	false	2000
5607	"getanchor"	"create function getanchor( theurl url ) returns string \n\texternal name url.\"getAnchor\";"	"url"	true	1	false	2000
5611	"getbasename"	"create function getbasename(theurl url) returns string       \n\texternal name url.\"getBasename\";"	"url"	true	1	false	2000
5615	"getcontent"	"create function getcontent(theurl url)   returns string       \n\texternal name url.\"getContent\";"	"url"	true	1	false	2000
5619	"getcontext"	"create function getcontext(theurl url)   returns string       \n\texternal name url.\"getContext\";"	"url"	true	1	false	2000
5623	"getdomain"	"create function getdomain(theurl url) returns string       \n\texternal name url.\"getDomain\";"	"url"	true	1	false	2000
5627	"getextension"	"create function getextension(theurl url) returns string       \n\texternal name url.\"getExtension\";"	"url"	true	1	false	2000
5631	"getfile"	"create function getfile(theurl url) returns string       \n\texternal name url.\"getFile\";"	"url"	true	1	false	2000
5635	"gethost"	"create function gethost(theurl url)   returns string       \n\texternal name url.\"getHost\";"	"url"	true	1	false	2000
5639	"getport"	"create function getport(theurl url) returns string       \n\texternal name url.\"getPort\";"	"url"	true	1	false	2000
5643	"getprotocol"	"create function getprotocol(theurl url) returns string       \n\texternal name url.\"getProtocol\";"	"url"	true	1	false	2000
5647	"getquery"	"create function getquery(theurl url) returns string       \n\texternal name url.\"getQuery\";"	"url"	true	1	false	2000
5651	"getuser"	"create function getuser(theurl url) returns string       \n\texternal name url.\"getUser\";"	"url"	true	1	false	2000
5655	"getroboturl"	"create function getroboturl(theurl url) returns string       \n\texternal name url.\"getRobotURL\";"	"url"	true	1	false	2000
5659	"isaurl"	"create function isaurl(theurl url) returns bool\n\texternal name url.\"isaURL\";"	"url"	true	1	false	2000
5663	"newurl"	"create function newurl(protocol string, hostname string, \"port\" int, file string) \n\treturns url       \n\texternal name url.\"new\";"	"url"	true	1	false	2000
5670	"newurl"	"create function newurl(protocol string, hostname string, file string) \n\treturns url \n\texternal name url.\"new\";"	"url"	true	1	false	2000
5676	"str_to_date"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate function str_to_date(s string, format string) returns date\n\texternal name mtime.\"str_to_date\";"	"mtime"	true	1	false	2000
5681	"date_to_str"	"create function date_to_str(d date, format string) returns string\n\texternal name mtime.\"date_to_str\";"	"mtime"	true	1	false	2000
5687	"broadcast"	"create function \"broadcast\" (p inet) returns inet \n\texternal name inet.\"broadcast\";"	"inet"	true	1	false	2000
5691	"host"	"create function \"host\" (p inet) returns clob\n\texternal name inet.\"host\";"	"inet"	true	1	false	2000
5695	"masklen"	"create function \"masklen\" (p inet) returns int\n\texternal name inet.\"masklen\";"	"inet"	true	1	false	2000
5699	"setmasklen"	"create function \"setmasklen\" (p inet, mask int) returns inet\n\texternal name inet.\"setmasklen\";"	"inet"	true	1	false	2000
5704	"netmask"	"create function \"netmask\" (p inet) returns inet\n\texternal name inet.\"netmask\";"	"inet"	true	1	false	2000
5708	"hostmask"	"create function \"hostmask\" (p inet) returns inet\n\texternal name inet.\"hostmask\";"	"inet"	true	1	false	2000
5712	"network"	"create function \"network\" (p inet) returns inet\n\texternal name inet.\"network\";"	"inet"	true	1	false	2000
5716	"text"	"create function \"text\" (p inet) returns clob\n\texternal name inet.\"text\";"	"inet"	true	1	false	2000
5720	"abbrev"	"create function \"abbrev\" (p inet) returns clob\n\texternal name inet.\"abbrev\";"	"inet"	true	1	false	2000
5732	"querylog_catalog"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- QUERY HISTORY\n-- The query history mechanism of MonetDB/SQL relies on a few hooks.\n-- The most important one is a global system variable which controls\n--  monitoring of all sessions. \n\ncreate function sys.querylog_catalog()\nreturns table(\n\tid oid,\n\towner string,\n\tdefined timestamp,\n\tquery string,\n\tpipe string,\n\tmal int,\t\t\t-- size of MAL plan\n\toptimize bigint \t-- time in usec\n)\nexternal name sql.querylog_catalog;"	"sql"	true	1	false	2000
5746	"querylog_calls"	"-- Each query call is stored in the table calls\n-- At regular intervals the query history table should be cleaned.\n-- This can be done manually on the SQL console, or be integrated\n-- in the keepQuery and keepCall upon need.\n-- The parameters are geared at understanding the resource claims\n-- They reflect the effect of the total workload mix during execution.\n-- The 'cpu' gives the average cpu load percentage over all cores on the \n-- server during execution phase. \n-- increasing cpu load indicates better use of multi-cores.\n-- The 'io' indicate IOs during complete query run.\n-- The 'space' is the total amount of intermediates created in MB.\n-- Reducing the space component improves performance/\n-- All timing in usec and all storage in bytes.\n\ncreate function sys.querylog_calls()\nreturns table(\n\tid oid,\t\t\t\t -- references query plan\n\t\"start\" timestamp,\t-- time the statement was started\n\t\"stop\" timestamp,\t-- time the statement was completely finished\n\targuments string,\t-- actual call structure\n\ttuples wrd,\t\t\t-- number of tuples in the result set\n\trun bigint,\t\t-- time spent (in usec)  until the result export\n\tship bigint,\t\t-- time spent (in usec)  to ship the result set\n\tcpu int,  \t\t-- average cpu load percentage during execution\n\tio int,\t\t\t-- percentage time waiting for IO to finish \n\tspace bigint\t\t-- total storage size of intermediates created (in MB)\n)\nexternal name sql.querylog_calls;"	"sql"	true	1	false	2000
5788	"querylog_empty"	"-- reset history for a particular user\ncreate procedure sys.querylog_empty()\nexternal name sql.querylog_empty;"	"sql"	true	2	false	2000
5790	"querylog_enable"	"-- manipulate the query logger\ncreate procedure sys.querylog_enable()\nexternal name sql.querylog_enable;"	"sql"	true	2	false	2000
5792	"querylog_enable"	"create procedure sys.querylog_enable(threshold smallint)\nexternal name sql.querylog_enable_threshold;"	"sql"	true	2	false	2000
5795	"querylog_disable"	"create procedure sys.querylog_disable()\nexternal name sql.querylog_disable;"	"sql"	true	2	false	2000
5810	"tracelog"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- make the offline tracing table available for inspection\ncreate function sys.tracelog() \n\treturns table (\n\t\tevent integer,\t\t-- event counter\n\t\tclk varchar(20), \t-- wallclock, no mtime in kernel\n\t\tpc varchar(50), \t-- module.function[nr]\n\t\tthread int, \t\t-- thread identifier\n\t\t\"user\" int, \t\t-- user identifier\n\t\tticks bigint, \t\t-- time in microseconds\n\t\treads bigint, \t\t-- number of blocks read\n\t\twrites bigint, \t-- number of blocks written\n\t\trbytes bigint,\t\t-- amount of bytes touched\n\t\twbytes bigint,\t\t-- amount of bytes written\n\t\ttype string,\t\t-- return types\n\t\tstmt string\t\t\t-- actual statement executed\n\t)\n\texternal name sql.dump_trace;"	"sql"	true	1	false	2000
5827	"gzcompress"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- Perform LZ-compression over a specific table;\ncreate procedure gzcompress (s string, t string)\n    external name sql.gzcompress;"	"sql"	true	2	false	2000
5831	"gzdecompress"	"create procedure gzdecompress (s string, t string)\n    external name sql.gzdecompress;"	"sql"	true	2	false	2000
5835	"gztruncate"	"-- Truncate the storage for columns with a compressed image\ncreate procedure gztruncate (s string, t string)\n    external name sql.gztruncate;"	"sql"	true	2	false	2000
5839	"gzexpand"	"-- Remove the compressed images\ncreate procedure gzexpand (s string, t string)\n    external name sql.gzexpand;"	"sql"	true	2	false	2000
5843	"newdictionary"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate procedure newdictionary (s string, t string)\n    external name sql.newdictionary;"	"sql"	true	2	false	2000
5847	"dropdictionary"	"create procedure dropdictionary (s string, t string)\n    external name sql.dropdictionary;"	"sql"	true	2	false	2000
5851	"initializedictionary"	"create procedure initializedictionary ()\n    external name dictionary.initialize;"	"dictionary"	true	2	false	2000
5853	"cluster1"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- Clustering a relational table should be done with care.\n-- For, the oid's are used in join-indices.\n\n-- Clustering of tables may improve IO performance\n-- The foreign key constraints should be dropped before\n-- and re-established after the cluster operation.\n\ncreate procedure cluster1(sys string, tab string)\n\texternal name sql.cluster1;"	"sql"	true	2	false	2000
5857	"cluster2"	"create procedure cluster2(sys string, tab string)\n\texternal name sql.cluster2;"	"sql"	true	2	false	2000
5861	"shrink"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- Vacuum a relational table should be done with care.\n-- For, the oid's are used in join-indices.\n\n-- Vacuum of tables may improve IO performance and disk footprint.\n-- The foreign key constraints should be dropped before\n-- and re-established after the cluster operation.\n\ncreate procedure shrink(sys string, tab string)\n\texternal name sql.shrink;"	"sql"	true	2	false	2000
5865	"reuse"	"create procedure reuse(sys string, tab string)\n\texternal name sql.reuse;"	"sql"	true	2	false	2000
5869	"vacuum"	"create procedure vacuum(sys string, tab string)\n\texternal name sql.vacuum;"	"sql"	true	2	false	2000
5877	"dependencies_schemas_on_users"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n--Schema s has a dependency on user u\ncreate function dependencies_schemas_on_users()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select s.name, u.name, 'DEP_USER' from schemas as s, users u where u.default_schema = s.id);"	"user"	true	1	false	2000
5884	"dependencies_owners_on_schemas"	"--User (owner) has a dependency in schema s\ncreate function dependencies_owners_on_schemas()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select a.name, s.name, 'DEP_SCHEMA' from schemas as s, auths a where s.owner = a.id);"	"user"	true	1	false	2000
5891	"dependencies_tables_on_views"	"--Table t has a dependency on view v\ncreate function dependencies_tables_on_views()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select t.name, v.name, 'DEP_VIEW' from tables as t, tables as v, dependencies as dep where t.id = dep.id and v.id = dep.depend_id and dep.depend_type = 5 and v.type = 1);"	"user"	true	1	false	2000
5898	"dependencies_tables_on_indexes"	"--Table t has a dependency on index  i\ncreate function dependencies_tables_on_indexes()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select t.name, i.name, 'DEP_INDEX' from tables as t, idxs as i where i.table_id = t.id and i.name not in (select name from keys) and t.type = 0);"	"user"	true	1	false	2000
5905	"dependencies_tables_on_triggers"	"--Table t has a dependency on trigger tri\n\ncreate function dependencies_tables_on_triggers()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table ((select t.name, tri.name, 'DEP_TRIGGER' from tables as t, triggers as tri where tri.table_id = t.id) union (select t.name, tri.name, 'DEP_TRIGGER' from triggers tri, tables t, dependencies dep where dep.id = t.id and dep.depend_id =tri.id and dep.depend_type = 8));"	"user"	true	1	false	2000
5912	"dependencies_tables_on_foreignkeys"	"--Table t has a dependency on foreign key k\ncreate function dependencies_tables_on_foreignkeys()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select t.name, fk.name, 'DEP_FKEY' from tables as t, keys as k, keys as fk where fk.rkey = k.id and k.table_id = t.id);"	"user"	true	1	false	2000
5919	"dependencies_tables_on_functions"	"--Table t has a dependency on function f\ncreate function dependencies_tables_on_functions()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select t.name, f.name, 'DEP_FUNC' from functions as f, tables as t, dependencies as dep where t.id = dep.id and f.id = dep.depend_id and dep.depend_type = 7 and t.type = 0);"	"user"	true	1	false	2000
5926	"dependencies_columns_on_views"	"--Column c has a dependency on view v\ncreate function dependencies_columns_on_views()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select c.name, v.name, 'DEP_VIEW' from columns as c, tables as v, dependencies as dep where c.id = dep.id and v.id = dep.depend_id and dep.depend_type = 5 and v.type = 1);"	"user"	true	1	false	2000
5933	"dependencies_columns_on_keys"	"--Column c has a dependency on key k\ncreate function dependencies_columns_on_keys()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select c.name, k.name, 'DEP_KEY' from columns as c, objects as kc, keys as k where kc.\"name\" = c.name and kc.id = k.id and k.table_id = c.table_id and k.rkey = -1);"	"user"	true	1	false	2000
5940	"dependencies_columns_on_indexes"	"--Column c has a dependency on index i \ncreate function dependencies_columns_on_indexes()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select c.name, i.name, 'DEP_INDEX' from columns as c, objects as kc, idxs as i where kc.\"name\" = c.name and kc.id = i.id and c.table_id = i.table_id and i.name not in (select name from keys));"	"user"	true	1	false	2000
5947	"dependencies_columns_on_functions"	"--Column c has a dependency on function f\ncreate function dependencies_columns_on_functions()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select c.name, f.name, 'DEP_FUNC' from functions as f, columns as c, dependencies as dep where c.id = dep.id and f.id = dep.depend_id and dep.depend_type = 7);"	"user"	true	1	false	2000
5954	"dependencies_columns_on_triggers"	"--Column c has a dependency on trigger tri\ncreate function dependencies_columns_on_triggers()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select c.name, tri.name, 'DEP_TRIGGER' from columns as c, triggers as tri, dependencies as dep where dep.id = c.id and dep.depend_id =tri.id and dep.depend_type = 8);"	"user"	true	1	false	2000
5961	"dependencies_views_on_functions"	"--View v has a dependency on function f\ncreate function dependencies_views_on_functions()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select v.name, f.name, 'DEP_FUNC' from functions as f, tables as v, dependencies as dep where v.id = dep.id and f.id = dep.depend_id and dep.depend_type = 7 and v.type = 1);"	"user"	true	1	false	2000
5968	"dependencies_views_on_triggers"	"--View v has a dependency on trigger tri\ncreate function dependencies_views_on_triggers()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select v.name, tri.name, 'DEP_TRIGGER' from tables as v, triggers as tri, dependencies as dep where dep.id = v.id and dep.depend_id =tri.id and dep.depend_type = 8 and v.type = 1);"	"user"	true	1	false	2000
5975	"dependencies_functions_on_functions"	"--Function f1 has a dependency on function f2\ncreate function dependencies_functions_on_functions()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select f1.name, f2.name, 'DEP_FUNC' from functions as f1, functions as f2, dependencies as dep where f1.id = dep.id and f2.id = dep.depend_id and dep.depend_type = 7);"	"user"	true	1	false	2000
5982	"dependencies_functions_os_triggers"	"--Function f1 has a dependency on trigger tri\ncreate function dependencies_functions_os_triggers()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select f.name, tri.name, 'DEP_TRIGGER' from functions as f, triggers as tri, dependencies as dep where dep.id = f.id and dep.depend_id =tri.id and dep.depend_type = 8);"	"user"	true	1	false	2000
5989	"dependencies_keys_on_foreignkeys"	"--Key k has a dependency on foreign key fk\ncreate function dependencies_keys_on_foreignkeys()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select k.name, fk.name, 'DEP_FKEY' from keys as k, keys as fk where fk.rkey = k.id);"	"user"	true	1	false	2000
5992	"password_hash"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate function sys.password_hash (username string) \n\treturns string \n\texternal name sql.password;"	"sql"	true	1	false	2000
6003	"sessions"	"create function sys.sessions()\nreturns table(\"user\" string, \"login\" timestamp, \"sessiontimeout\" bigint, \"lastcommand\" timestamp, \"querytimeout\" bigint, \"active\" bool)\nexternal name sql.sessions;"	"sql"	true	1	false	2000
6014	"shutdown"	"create procedure sys.shutdown(delay tinyint) \nexternal name sql.shutdown;"	"sql"	true	2	false	2000
6017	"shutdown"	"create procedure sys.shutdown(delay tinyint, force bool) \nexternal name sql.shutdown;"	"sql"	true	2	false	2000
6021	"settimeout"	"-- control the query and session time out \ncreate procedure sys.settimeout(\"query\" bigint)\n\texternal name sql.settimeout;"	"sql"	true	2	false	2000
6024	"settimeout"	"create procedure sys.settimeout(\"query\" bigint, \"session\" bigint)\n\texternal name sql.settimeout;"	"sql"	true	2	false	2000
6028	"setsession"	"create procedure sys.setsession(\"timeout\" bigint)\n\texternal name sql.setsession;"	"sql"	true	2	false	2000
6031	"ms_stuff"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate function ms_stuff( s1 varchar(32), st int, len int, s3 varchar(32))\nreturns varchar(32)\nbegin\n\tdeclare res varchar(32), aux varchar(32);\n\tdeclare ofset int;\n\n    if ( st < 0 or st > length(s1))\n        then return '';\n    end if;\n\n    set ofset = 1;\n    set res = substring(s1,ofset,st-1);\n    set res = res || s3;\n    set ofset = st + len;\n    set aux = substring(s1,ofset,length(s1)-ofset+1);\n\tset res = res || aux;\n\treturn res;\nend;"	"user"	true	1	false	2000
6038	"ms_trunc"	"create function ms_trunc(num double, prc int)\nreturns double\nexternal name sql.ms_trunc;"	"sql"	true	1	false	2000
6043	"ms_round"	"create function ms_round(num double, prc int, truncat int)\nreturns double\nbegin\n\tif (truncat = 0)\n\t\tthen return round(num, prc);\n\t\telse return ms_trunc(num, prc);\n\tend if;\nend;"	"user"	true	1	false	2000
6049	"ms_str"	"create function ms_str(num float, prc int, truncat int)\nreturns string\nbegin\n        return cast(num as string);\nend;"	"user"	true	1	false	2000
6055	"alpha"	"create function alpha(pdec double, pradius double)\nreturns double external name sql.alpha;"	"sql"	true	1	false	2000
6060	"zorder_encode"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate function zorder_encode(x integer, y integer) returns oid\n    external name zorder.encode;"	"zorder"	true	1	false	2000
6065	"zorder_decode_x"	"create function zorder_decode_x(z oid) returns integer\n    external name zorder.decode_x;"	"zorder"	true	1	false	2000
6069	"zorder_decode_y"	"create function zorder_decode_y(z oid) returns integer\n    external name zorder.decode_y;"	"zorder"	true	1	false	2000
6076	"optimizer_stats"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- show the optimizer statistics maintained by the SQL frontend\ncreate function sys.optimizer_stats () \n\treturns table (rewrite string, count int) \n\texternal name sql.dump_opt_stats;"	"sql"	true	1	false	2000
6082	"querycache"	"-- SQL QUERY CACHE\n-- The SQL query cache returns a table with the query plans kept\n\ncreate function sys.querycache() \n\treturns table (query string, count int) \n\texternal name sql.dump_cache;"	"sql"	true	1	false	2000
6085	"querylog"	"-- Trace the SQL input\ncreate procedure sys.querylog(filename string) \n\texternal name sql.logfile;"	"sql"	true	2	false	2000
6092	"optimizers"	"-- MONETDB KERNEL SECTION\n-- optimizer pipe catalog\ncreate function sys.optimizers () \n\treturns table (name string, def string, status string)\n\texternal name sql.optimizers;"	"sql"	true	1	false	2000
6103	"environment"	"-- The environment table\ncreate function sys.environment()\n\treturns table (\"name\" string, value string)\n\texternal name sql.sql_environment;"	"sql"	true	1	false	2000
6123	"bbp"	"-- The BAT buffer pool overview\ncreate function sys.bbp () \n\treturns table (id int, name string, htype string, \n\t\tttype string, count bigint, refcnt int, lrefcnt int, \n\t\tlocation string, heat int, dirty string, \n\t\tstatus string, kind string) \n\texternal name sql.bbp;"	"sql"	true	1	false	2000
6126	"evalalgebra"	"create procedure sys.evalalgebra( ra_stmt string, opt bool)\n\texternal name sql.\"evalAlgebra\";"	"sql"	true	2	false	2000
6139	"queue"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- System monitoring\n\n-- show status of all active SQL queries.\ncreate function sys.queue()\nreturns table(\n\tqtag bigint,\n\t\"user\" string,\n\tstarted timestamp,\n\testimate timestamp,\n\tprogress int,\n\tstatus string,\n\ttag oid,\n\tquery string\n)\nexternal name sql.sysmon_queue;"	"sql"	true	1	false	2000
6152	"pause"	"-- operations to manipulate the state of havoc queries\ncreate procedure sys.pause(tag int)\nexternal name sql.sysmon_pause;"	"sql"	true	2	false	2000
6155	"resume"	"create procedure sys.resume(tag int)\nexternal name sql.sysmon_resume;"	"sql"	true	2	false	2000
6158	"stop"	"create procedure sys.stop(tag int)\nexternal name sql.sysmon_stop;"	"sql"	true	2	false	2000
6161	"pause"	"create procedure sys.pause(tag bigint)\nexternal name sql.sysmon_pause;"	"sql"	true	2	false	2000
6164	"resume"	"create procedure sys.resume(tag bigint)\nexternal name sql.sysmon_resume;"	"sql"	true	2	false	2000
6167	"stop"	"create procedure sys.stop(tag bigint)\nexternal name sql.sysmon_stop;"	"sql"	true	2	false	2000
6170	"stddev_samp"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate aggregate stddev_samp(val tinyint) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
6174	"stddev_samp"	"create aggregate stddev_samp(val smallint) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
6178	"stddev_samp"	"create aggregate stddev_samp(val integer) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
6182	"stddev_samp"	"create aggregate stddev_samp(val wrd) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
6186	"stddev_samp"	"create aggregate stddev_samp(val bigint) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
6190	"stddev_samp"	"create aggregate stddev_samp(val real) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
6194	"stddev_samp"	"create aggregate stddev_samp(val double) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
6198	"stddev_samp"	"create aggregate stddev_samp(val date) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
6202	"stddev_samp"	"create aggregate stddev_samp(val time) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
6206	"stddev_samp"	"create aggregate stddev_samp(val timestamp) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
6210	"stddev_pop"	"create aggregate stddev_pop(val tinyint) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
6214	"stddev_pop"	"create aggregate stddev_pop(val smallint) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
6218	"stddev_pop"	"create aggregate stddev_pop(val integer) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
6222	"stddev_pop"	"create aggregate stddev_pop(val wrd) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
6226	"stddev_pop"	"create aggregate stddev_pop(val bigint) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
6230	"stddev_pop"	"create aggregate stddev_pop(val real) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
6234	"stddev_pop"	"create aggregate stddev_pop(val double) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
6238	"stddev_pop"	"create aggregate stddev_pop(val date) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
6242	"stddev_pop"	"create aggregate stddev_pop(val time) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
6246	"stddev_pop"	"create aggregate stddev_pop(val timestamp) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
6250	"var_samp"	"create aggregate var_samp(val tinyint) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
6254	"var_samp"	"create aggregate var_samp(val smallint) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
6258	"var_samp"	"create aggregate var_samp(val integer) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
6262	"var_samp"	"create aggregate var_samp(val wrd) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
6266	"var_samp"	"create aggregate var_samp(val bigint) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
6270	"var_samp"	"create aggregate var_samp(val real) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
6274	"var_samp"	"create aggregate var_samp(val double) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
6278	"var_samp"	"create aggregate var_samp(val date) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
6282	"var_samp"	"create aggregate var_samp(val time) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
6286	"var_samp"	"create aggregate var_samp(val timestamp) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
6290	"var_pop"	"create aggregate var_pop(val tinyint) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
6294	"var_pop"	"create aggregate var_pop(val smallint) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
6298	"var_pop"	"create aggregate var_pop(val integer) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
6302	"var_pop"	"create aggregate var_pop(val wrd) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
6306	"var_pop"	"create aggregate var_pop(val bigint) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
6310	"var_pop"	"create aggregate var_pop(val real) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
6314	"var_pop"	"create aggregate var_pop(val double) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
6318	"var_pop"	"create aggregate var_pop(val date) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
6322	"var_pop"	"create aggregate var_pop(val time) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
6326	"var_pop"	"create aggregate var_pop(val timestamp) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
6330	"median"	"create aggregate median(val tinyint) returns tinyint\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
6334	"median"	"create aggregate median(val smallint) returns smallint\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
6338	"median"	"create aggregate median(val integer) returns integer\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
6342	"median"	"create aggregate median(val wrd) returns wrd\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
6346	"median"	"create aggregate median(val bigint) returns bigint\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
6350	"median"	"create aggregate median(val decimal) returns decimal\n \texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
6354	"median"	"create aggregate median(val real) returns real\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
6358	"median"	"create aggregate median(val double) returns double\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
6362	"median"	"create aggregate median(val date) returns date\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
6366	"median"	"create aggregate median(val time) returns time\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
6370	"median"	"create aggregate median(val timestamp) returns timestamp\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
6374	"quantile"	"create aggregate quantile(val tinyint, q double) returns tinyint\n \texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
6379	"quantile"	"create aggregate quantile(val smallint, q double) returns smallint\n \texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
6384	"quantile"	"create aggregate quantile(val integer, q double) returns integer\n \texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
6389	"quantile"	"create aggregate quantile(val wrd, q double) returns wrd\n\texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
6394	"quantile"	"create aggregate quantile(val bigint, q double) returns bigint\n\texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
6399	"quantile"	"create aggregate quantile(val decimal, q double) returns decimal\n \texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
6404	"quantile"	"create aggregate quantile(val real, q double) returns real\n\texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
6409	"quantile"	"create aggregate quantile(val double, q double) returns double\n\texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
6414	"quantile"	"create aggregate quantile(val date, q double) returns date\n\texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
6419	"quantile"	"create aggregate quantile(val time, q double) returns time\n\texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
6424	"quantile"	"create aggregate quantile(val timestamp, q double) returns timestamp\n\texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
6429	"corr"	"create aggregate corr(e1 tinyint, e2 tinyint) returns tinyint\n\texternal name \"aggr\".\"corr\";"	"aggr"	true	3	false	2000
6434	"corr"	"create aggregate corr(e1 smallint, e2 smallint) returns smallint\n\texternal name \"aggr\".\"corr\";"	"aggr"	true	3	false	2000
6439	"corr"	"create aggregate corr(e1 integer, e2 integer) returns integer\n\texternal name \"aggr\".\"corr\";"	"aggr"	true	3	false	2000
6444	"corr"	"create aggregate corr(e1 wrd, e2 wrd) returns wrd\n\texternal name \"aggr\".\"corr\";"	"aggr"	true	3	false	2000
6449	"corr"	"create aggregate corr(e1 bigint, e2 bigint) returns bigint\n\texternal name \"aggr\".\"corr\";"	"aggr"	true	3	false	2000
6454	"corr"	"create aggregate corr(e1 real, e2 real) returns real\n\texternal name \"aggr\".\"corr\";"	"aggr"	true	3	false	2000
6459	"corr"	"create aggregate corr(e1 double, e2 double) returns double\n\texternal name \"aggr\".\"corr\";"	"aggr"	true	3	false	2000
6464	"stddev_samp"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate aggregate stddev_samp(val hugeint) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
6468	"stddev_pop"	"create aggregate stddev_pop(val hugeint) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
6472	"var_samp"	"create aggregate var_samp(val hugeint) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
6476	"var_pop"	"create aggregate var_pop(val hugeint) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
6480	"median"	"create aggregate median(val hugeint) returns hugeint\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
6484	"quantile"	"create aggregate quantile(val hugeint, q double) returns hugeint\n\texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
6489	"corr"	"create aggregate corr(e1 hugeint, e2 hugeint) returns hugeint\n\texternal name \"aggr\".\"corr\";"	"aggr"	true	3	false	2000
6507	"mbr"	"-- currently we only use mbr instead of\n-- Envelope():Geometry\n-- as that returns Geometry objects, and we prefer the explicit mbr's\n-- minimum bounding rectangle (mbr)\ncreate function mbr (g geometry) returns mbr external name geom.mbr;"	"geom"	true	1	false	2000
6511	"mbroverlaps"	"create function mbroverlaps(a mbr, b mbr) returns boolean external name geom.\"mbroverlaps\";"	"geom"	true	1	false	2000
6516	"geomfromtext"	"-- The srid in the *FromText Functions is currently not used\ncreate function geomfromtext(wkt string, srid smallint) returns geometry external name geom.\"GeomFromText\";"	"geom"	true	1	false	2000
6521	"pointfromtext"	"create function pointfromtext(wkt string, srid smallint) returns point external name geom.\"PointFromText\";"	"geom"	true	1	false	2000
6526	"linefromtext"	"create function linefromtext(wkt string, srid smallint) returns linestring external name geom.\"LineFromText\";"	"geom"	true	1	false	2000
6531	"polyfromtext"	"create function polyfromtext(wkt string, srid smallint) returns polygon external name geom.\"PolyFromText\";"	"geom"	true	1	false	2000
6536	"mpointfromtext"	"create function mpointfromtext(wkt string, srid smallint) returns multipoint external name geom.\"MultiPointFromText\";"	"geom"	true	1	false	2000
6541	"mlinefromtext"	"create function mlinefromtext(wkt string, srid smallint) returns multilinestring external name geom.\"MultiLineFromText\";"	"geom"	true	1	false	2000
6546	"mpolyfromtext"	"create function mpolyfromtext(wkt string, srid smallint) returns multipolygon external name geom.\"MultiPolyFromText\";"	"geom"	true	1	false	2000
6551	"geomcollectionfromtext"	"create function geomcollectionfromtext(wkt string, srid smallint) returns multipolygon external name geom.\"GeomCollectionFromText\";"	"geom"	true	1	false	2000
6556	"polygonfromtext"	"-- alias\ncreate function polygonfromtext(wkt string, srid smallint) returns polygon external name geom.\"PolyFromText\";"	"geom"	true	1	false	2000
6561	"astext"	"create function astext(g geometry) returns string external name geom.\"AsText\";"	"geom"	true	1	false	2000
6565	"x"	"create function x(g geometry) returns double external name geom.\"X\";"	"geom"	true	1	false	2000
6569	"y"	"create function y(g geometry) returns double external name geom.\"Y\";"	"geom"	true	1	false	2000
6573	"point"	"create function point(x double,y double) returns point external name geom.point;"	"geom"	true	1	false	2000
6578	"dimension"	"-- CREATE FUNCTION Point(g Geometry) RETURNS Point external name geom.point;\n-- CREATE FUNCTION Curve(g Geometry) RETURNS Curve external name geom.curve;\n-- CREATE FUNCTION LineString(g Geometry) RETURNS LineString external name geom.linestring;\n-- CREATE FUNCTION Surface(g Geometry) RETURNS Surface external name geom.surface;\n-- CREATE FUNCTION Polygon(g Geometry) RETURNS Polygon external name geom.polygon;\n\n-- ogc basic methods\ncreate function dimension(g geometry) returns integer external name geom.\"Dimension\";"	"geom"	true	1	false	2000
6582	"geometrytypeid"	"create function geometrytypeid(g geometry) returns integer external name geom.\"GeometryTypeId\";"	"geom"	true	1	false	2000
6586	"srid"	"create function srid(g geometry) returns integer external name geom.\"SRID\";"	"geom"	true	1	false	2000
6590	"envelope"	"create function envelope(g geometry) returns geometry external name geom.\"Envelope\";"	"geom"	true	1	false	2000
6594	"isempty"	"create function isempty(g geometry) returns boolean external name geom.\"IsEmpty\";"	"geom"	true	1	false	2000
6598	"issimple"	"create function issimple(g geometry) returns boolean external name geom.\"IsSimple\";"	"geom"	true	1	false	2000
6602	"boundary"	"create function boundary(g geometry) returns geometry external name geom.\"Boundary\";"	"geom"	true	1	false	2000
6606	"equals"	"-- ogc spatial relation methods\ncreate function equals(a geometry, b geometry) returns boolean external name geom.\"Equals\";"	"geom"	true	1	false	2000
6611	"disjoint"	"create function disjoint(a geometry, b geometry) returns boolean external name geom.\"Disjoint\";"	"geom"	true	1	false	2000
6616	"Intersect"	"create function \"Intersect\"(a geometry, b geometry) returns boolean external name geom.\"Intersect\";"	"geom"	true	1	false	2000
6621	"touches"	"create function touches(a geometry, b geometry) returns boolean external name geom.\"Touches\";"	"geom"	true	1	false	2000
6626	"crosses"	"create function crosses(a geometry, b geometry) returns boolean external name geom.\"Crosses\";"	"geom"	true	1	false	2000
6631	"within"	"create function within(a geometry, b geometry) returns boolean external name geom.\"Within\";"	"geom"	true	1	false	2000
6636	"contains"	"create function contains(a geometry, b geometry) returns boolean external name geom.\"Contains\";"	"geom"	true	1	false	2000
6641	"overlaps"	"create function overlaps(a geometry, b geometry) returns boolean external name geom.\"Overlaps\";"	"geom"	true	1	false	2000
6646	"relate"	"create function relate(a geometry, b geometry, pattern string) returns boolean external name geom.\"Relate\";"	"geom"	true	1	false	2000
6652	"area"	"-- ogc Spatial Analysis methods\n\ncreate function area(g geometry) returns float external name geom.\"Area\";"	"geom"	true	1	false	2000
6656	"length"	"create function length(g geometry) returns float external name geom.\"Length\";"	"geom"	true	1	false	2000
6660	"distance"	"create function distance(a geometry, b geometry) returns float external name geom.\"Distance\";"	"geom"	true	1	false	2000
6665	"buffer"	"create function buffer(a geometry, distance float) returns geometry external name geom.\"Buffer\";"	"geom"	true	1	false	2000
6670	"convexhull"	"create function convexhull(a geometry) returns geometry external name geom.\"ConvexHull\";"	"geom"	true	1	false	2000
6674	"intersection"	"create function intersection(a geometry, b geometry) returns geometry external name geom.\"Intersection\";"	"geom"	true	1	false	2000
6679	"Union"	"create function \"Union\"(a geometry, b geometry) returns geometry external name geom.\"Union\";"	"geom"	true	1	false	2000
6684	"difference"	"create function difference(a geometry, b geometry) returns geometry external name geom.\"Difference\";"	"geom"	true	1	false	2000
6689	"symdifference"	"create function symdifference(a geometry, b geometry) returns geometry external name geom.\"SymDifference\";"	"geom"	true	1	false	2000
6706	"storage"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- Author M.Kersten\n-- This script gives the database administrator insight in the actual\n-- footprint of the persistent tables and the maximum playground used\n-- when indices are introduced upon them.\n-- By chancing the storagemodelinput table directly, the footprint for\n-- yet to be loaded databases can be assessed.\n\n-- The actual storage footprint of an existing database can be\n-- obtained by the table procuding function storage()\n-- It represents the actual state of affairs, i.e. storage on disk\n-- of columns and foreign key indices, and possible temporary hash indices.\n-- For strings we take a sample to determine their average length.\n\ncreate function sys.storage()\nreturns table (\"schema\" string, \"table\" string, \"column\" string, \"type\" string, location string, \"count\" bigint, typewidth int, columnsize bigint, heapsize bigint, indices bigint, sorted boolean)\nexternal name sql.storage;"	"sql"	true	1	false	2000
6734	"storagemodelinit"	"-- this table can be adjusted to reflect the anticipated final database size\n\n-- The model input can be derived from the current database using\ncreate procedure sys.storagemodelinit()\nbegin\n\tdelete from sys.storagemodelinput;\n\n\tinsert into sys.storagemodelinput\n\tselect x.\"schema\", x.\"table\", x.\"column\", x.\"type\", x.typewidth, x.count, 0, x.typewidth, false, x.sorted from sys.storage() x;\n\n\tupdate sys.storagemodelinput\n\tset reference = true\n\twhere concat(concat(\"schema\",\"table\"), \"column\") in (\n\t\tselect concat( concat(\"fkschema\".\"name\", \"fktable\".\"name\"), \"fkkeycol\".\"name\" )\n\t\tfrom\t\"sys\".\"keys\" as    \"fkkey\",\n\t\t\t\t\"sys\".\"objects\" as \"fkkeycol\",\n\t\t\t\t\"sys\".\"tables\" as  \"fktable\",\n\t\t\t\t\"sys\".\"schemas\" as \"fkschema\"\n\t\twhere   \"fktable\".\"id\" = \"fkkey\".\"table_id\"\n\t\t\tand \"fkkey\".\"id\" = \"fkkeycol\".\"id\"\n\t\t\tand \"fkschema\".\"id\" = \"fktable\".\"schema_id\"\n\t\t\tand \"fkkey\".\"rkey\" > -1);\n\n\tupdate sys.storagemodelinput\n\tset \"distinct\" = \"count\" -- assume all distinct\n\twhere \"type\" = 'varchar' or \"type\"='clob';\nend;"	"user"	true	2	false	2000
6736	"columnsize"	"-- The predicted storage footprint of the complete database\n-- determines the amount of diskspace needed for persistent storage\n-- and the upperbound when all possible index structures are created.\n-- The storage requirement for foreign key joins is split amongst the participants.\n\ncreate function sys.columnsize(nme string, i bigint, d bigint)\nreturns bigint\nbegin\n\tcase\n\twhen nme = 'boolean' then return i;\n\twhen nme = 'char' then return 2*i;\n\twhen nme = 'smallint' then return 2 * i;\n\twhen nme = 'int'\t then return 4 * i;\n\twhen nme = 'bigint'\t then return 8 * i;\n\twhen nme = 'hugeint'\t then return 16 * i;\n\twhen nme = 'timestamp' then return 8 * i;\n\twhen  nme = 'varchar' then\n\t\tcase\n\t\twhen cast(d as bigint) << 8 then return i;\n\t\twhen cast(d as bigint) << 16 then return 2 * i;\n\t\twhen cast(d as bigint) << 32 then return 4 * i;\n\t\telse return 8 * i;\n\t\tend case;\n\telse return 8 * i;\n\tend case;\nend;"	"user"	true	1	false	2000
6742	"heapsize"	"create function sys.heapsize(tpe string, i bigint, w int)\nreturns bigint\nbegin\n\tif  tpe <> 'varchar' and tpe <> 'clob'\n\tthen\n\t\treturn 0;\n\tend if;\n\treturn 10240 + i * w;\nend;"	"user"	true	1	false	2000
6748	"indexsize"	"create function sys.indexsize(b boolean, i bigint)\nreturns bigint\nbegin\n\t-- assume non-compound keys\n\tif  b = true\n\tthen\n\t\treturn 8 * i;\n\tend if;\n\treturn 0;\nend;"	"user"	true	1	false	2000
6763	"storagemodel"	"create function sys.storagemodel()\nreturns table (\n\t\"schema\" string,\n\t\"table\" string,\n\t\"column\" string,\n\t\"type\" string,\n\t\"count\"\tbigint,\n\tcolumnsize bigint,\n\theapsize bigint,\n\tindices bigint,\n\tsorted boolean)\nbegin\n\treturn select i.\"schema\", i.\"table\", i.\"column\", i.\"type\", i.\"count\",\n\tcolumnsize(i.\"type\", i.count, i.\"distinct\"),\n\theapsize(i.\"type\", i.\"distinct\", i.\"atomwidth\"),\n\tindexsize(i.\"reference\", i.\"count\"),\n\ti.sorted\n\tfrom sys.storagemodelinput i;\nend;"	"user"	true	1	false	2000
6801	"analyze"	"create procedure analyze()\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6803	"analyze"	"create procedure analyze(tbl string)\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6806	"analyze"	"create procedure analyze(sch string, tbl string)\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6810	"analyze"	"create procedure analyze(sch string, tbl string, col string)\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6815	"analyze"	"-- control the sample size\ncreate procedure analyze(\"sample\" bigint)\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6818	"analyze"	"create procedure analyze(tbl string, \"sample\" bigint)\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6822	"analyze"	"create procedure analyze(sch string, tbl string, \"sample\" bigint)\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6827	"analyze"	"create procedure analyze(sch string, tbl string, col string, \"sample\" bigint)\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6833	"reverse"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- add function signatures to SQL catalog\n\n\n-- Reverse a string\ncreate function reverse(src string)\nreturns string external name udf.reverse;"	"udf"	true	1	false	2000
6837	"fuse"	"-- fuse two (1-byte) tinyint values into one (2-byte) smallint value\ncreate function fuse(one tinyint, two tinyint)\nreturns smallint external name udf.fuse;"	"udf"	true	1	false	2000
6842	"fuse"	"-- fuse two (2-byte) smallint values into one (4-byte) integer value\ncreate function fuse(one smallint, two smallint)\nreturns integer external name udf.fuse;"	"udf"	true	1	false	2000
6847	"fuse"	"-- fuse two (4-byte) integer values into one (8-byte) bigint value\ncreate function fuse(one integer, two integer)\nreturns bigint external name udf.fuse;"	"udf"	true	1	false	2000
6852	"fuse"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- add function signatures to SQL catalog\n\n\n-- fuse two (8-byte) integer values into one (16-byte) bigint value\ncreate function fuse(one bigint, two bigint)\nreturns hugeint external name udf.fuse;"	"udf"	true	1	false	2000
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."idxs" (
	"id"       INTEGER,
	"table_id" INTEGER,
	"type"     INTEGER,
	"name"     VARCHAR(1024)
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."keys" (
	"id"       INTEGER,
	"table_id" INTEGER,
	"type"     INTEGER,
	"name"     VARCHAR(1024),
	"rkey"     INTEGER,
	"action"   INTEGER
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."objects" (
	"id"   INTEGER,
	"name" VARCHAR(1024),
	"nr"   INTEGER
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."privileges" (
	"obj_id"     INTEGER,
	"auth_id"    INTEGER,
	"privileges" INTEGER,
	"grantor"    INTEGER,
	"grantable"  INTEGER
);
COPY 19 RECORDS INTO "sys"."privileges" FROM stdin USING DELIMITERS '\t','\n','"';
2001	1	1	0	0
2006	1	1	0	0
2015	1	1	0	0
2024	1	1	0	0
2032	1	1	0	0
2042	1	1	0	0
2046	1	1	0	0
2055	1	1	0	0
2064	1	1	0	0
2075	1	1	0	0
2082	1	1	0	0
2087	1	1	0	0
2098	1	1	0	0
5530	1	1	0	0
5540	1	1	0	0
5572	1	1	0	0
5575	1	1	0	0
5579	1	1	0	0
6858	1	1	3	0
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."schemas" (
	"id"            INTEGER,
	"name"          VARCHAR(1024),
	"authorization" INTEGER,
	"owner"         INTEGER
);
COPY 2 RECORDS INTO "sys"."schemas" FROM stdin USING DELIMITERS '\t','\n','"';
2000	"sys"	2	3
2102	"tmp"	2	3
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."sequences" (
	"id"        INTEGER,
	"schema_id" INTEGER,
	"name"      VARCHAR(256),
	"start"     BIGINT,
	"minvalue"  BIGINT,
	"maxvalue"  BIGINT,
	"increment" BIGINT,
	"cacheinc"  BIGINT,
	"cycle"     BOOLEAN
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."statistics" (
	"schema" CHARACTER LARGE OBJECT,
	"table"  CHARACTER LARGE OBJECT,
	"column" CHARACTER LARGE OBJECT,
	"type"   CHARACTER LARGE OBJECT,
	"width"  INTEGER,
	"stamp"  TIMESTAMP,
	"sample" BIGINT,
	"count"  BIGINT,
	"unique" BIGINT,
	"nils"   BIGINT,
	"minval" CHARACTER LARGE OBJECT,
	"maxval" CHARACTER LARGE OBJECT,
	"sorted" BOOLEAN
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."storagemodelinput" (
	"schema"    CHARACTER LARGE OBJECT,
	"table"     CHARACTER LARGE OBJECT,
	"column"    CHARACTER LARGE OBJECT,
	"type"      CHARACTER LARGE OBJECT,
	"typewidth" INTEGER,
	"count"     BIGINT,
	"distinct"  BIGINT,
	"atomwidth" INTEGER,
	"reference" BOOLEAN,
	"sorted"    BOOLEAN
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."systemfunctions" (
	"function_id" INTEGER
);
COPY 1418 RECORDS INTO "sys"."systemfunctions" FROM stdin USING DELIMITERS '\t','\n','"';
30
31
32
33
34
35
36
37
38
39
40
44
45
46
47
50
51
52
74
75
76
77
78
79
80
81
82
83
84
85
86
87
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678
679
680
681
682
683
684
685
686
687
688
689
690
691
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
820
821
822
823
824
825
826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878
879
880
881
882
883
884
885
886
887
888
889
890
891
892
893
894
895
896
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
939
940
941
942
943
944
945
946
947
948
949
950
951
952
953
954
955
956
957
958
959
960
961
962
963
964
965
966
967
968
969
970
971
972
973
974
975
976
977
978
979
980
981
982
983
984
985
986
987
988
989
990
991
992
993
994
995
996
997
998
999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
1036
1037
1038
1039
1040
1041
1042
1043
1044
1045
1046
1047
1048
1049
1050
1051
1052
1053
1054
1055
1056
1057
1058
1059
1060
1061
1062
1063
1064
1065
1066
1067
1068
1069
1070
1071
1072
1073
1074
1075
1076
1077
1078
1079
1080
1081
1082
1083
1084
1085
1086
1087
1088
1089
1090
1091
1092
1093
1094
1095
1096
1097
1098
1099
1100
1101
1102
1103
1104
1105
1106
1107
1108
1109
1110
1111
1112
1113
1114
1115
1116
1117
1118
1119
1120
1121
1122
1123
1124
1125
1126
1127
1128
1129
1130
1131
1132
1133
1134
1135
1136
1137
1138
1139
1140
1141
1142
1143
1144
1145
1146
1147
1148
1149
1150
1151
1152
1153
1154
1155
1156
1157
1158
1159
1160
1161
1162
1163
1164
1165
1166
1167
1168
1169
1170
1171
1172
1173
1174
1175
1176
1177
1178
1179
1180
1181
1182
1183
1184
1185
1186
1187
1188
1189
1190
1191
1192
1193
1194
1195
1196
1197
1198
1199
1200
1201
1202
1203
1204
1205
1206
1207
1208
1209
1210
1211
29
41
42
43
48
49
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
88
89
90
91
92
93
94
5554
5558
5566
5586
5591
5596
5600
5604
5607
5611
5615
5619
5623
5627
5631
5635
5639
5643
5647
5651
5655
5659
5663
5670
5676
5681
5687
5691
5695
5699
5704
5708
5712
5716
5720
5732
5746
5788
5790
5792
5795
5810
5827
5831
5835
5839
5843
5847
5851
5853
5857
5861
5865
5869
5877
5884
5891
5898
5905
5912
5919
5926
5933
5940
5947
5954
5961
5968
5975
5982
5989
5992
6003
6014
6017
6021
6024
6028
6031
6038
6043
6049
6055
6060
6065
6069
6076
6082
6085
6092
6103
6123
6126
6139
6152
6155
6158
6161
6164
6167
6170
6174
6178
6182
6186
6190
6194
6198
6202
6206
6210
6214
6218
6222
6226
6230
6234
6238
6242
6246
6250
6254
6258
6262
6266
6270
6274
6278
6282
6286
6290
6294
6298
6302
6306
6310
6314
6318
6322
6326
6330
6334
6338
6342
6346
6350
6354
6358
6362
6366
6370
6374
6379
6384
6389
6394
6399
6404
6409
6414
6419
6424
6429
6434
6439
6444
6449
6454
6459
6464
6468
6472
6476
6480
6484
6489
6507
6511
6516
6521
6526
6531
6536
6541
6546
6551
6556
6561
6565
6569
6573
6578
6582
6586
6590
6594
6598
6602
6606
6611
6616
6621
6626
6631
6636
6641
6646
6652
6656
6660
6665
6670
6674
6679
6684
6689
6706
6734
6736
6742
6748
6763
6801
6803
6806
6810
6815
6818
6822
6827
6833
6837
6842
6847
6852
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."triggers" (
	"id"          INTEGER,
	"name"        VARCHAR(1024),
	"table_id"    INTEGER,
	"time"        SMALLINT,
	"orientation" SMALLINT,
	"event"       SMALLINT,
	"old_name"    VARCHAR(1024),
	"new_name"    VARCHAR(1024),
	"condition"   VARCHAR(2048),
	"statement"   VARCHAR(2048)
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."types" (
	"id"         INTEGER,
	"systemname" VARCHAR(256),
	"sqlname"    VARCHAR(1024),
	"digits"     INTEGER,
	"scale"      INTEGER,
	"radix"      INTEGER,
	"eclass"     INTEGER,
	"schema_id"  INTEGER
);
COPY 44 RECORDS INTO "sys"."types" FROM stdin USING DELIMITERS '\t','\n','"';
0	"void"	"any"	0	0	0	0	0
1	"bat"	"table"	0	0	0	1	0
2	"ptr"	"ptr"	0	0	0	1	0
3	"bit"	"boolean"	1	0	2	2	0
4	"str"	"char"	0	0	0	3	0
5	"str"	"varchar"	0	0	0	4	0
6	"str"	"clob"	0	0	0	4	0
7	"bte"	"tinyint"	8	1	2	6	0
8	"sht"	"smallint"	16	1	2	6	0
9	"int"	"int"	32	1	2	6	0
10	"oid"	"oid"	31	0	2	6	0
11	"lng"	"bigint"	64	1	2	6	0
12	"wrd"	"wrd"	64	1	2	6	0
13	"hge"	"hugeint"	128	1	2	6	0
14	"bte"	"decimal"	2	1	10	8	0
15	"sht"	"decimal"	4	1	10	8	0
16	"int"	"decimal"	9	1	10	8	0
17	"lng"	"decimal"	18	1	10	8	0
18	"hge"	"decimal"	39	1	10	8	0
19	"flt"	"real"	24	2	2	9	0
20	"dbl"	"double"	53	2	2	9	0
21	"int"	"month_interval"	32	0	2	7	0
22	"lng"	"sec_interval"	19	1	10	7	0
23	"daytime"	"time"	7	0	0	10	0
24	"daytime"	"timetz"	7	1	0	10	0
25	"date"	"date"	0	0	0	11	0
26	"timestamp"	"timestamp"	7	0	0	12	0
27	"timestamp"	"timestamptz"	7	1	0	12	0
28	"sqlblob"	"blob"	0	0	0	5	0
5605	"url"	"url"	0	0	0	13	2000
5685	"inet"	"inet"	0	0	0	13	2000
6493	"wkb"	"point"	0	0	0	13	2000
6494	"wkb"	"curve"	0	0	0	13	2000
6495	"wkb"	"linestring"	0	0	0	13	2000
6496	"wkb"	"surface"	0	0	0	13	2000
6497	"wkb"	"polygon"	0	0	0	13	2000
6498	"wkb"	"multipoint"	0	0	0	13	2000
6499	"wkb"	"multicurve"	0	0	0	13	2000
6500	"wkb"	"multilinestring"	0	0	0	13	2000
6501	"wkb"	"multisurface"	0	0	0	13	2000
6502	"wkb"	"multipolygon"	0	0	0	13	2000
6503	"wkb"	"geometry"	0	0	0	13	2000
6504	"wkb"	"geomcollection"	0	0	0	13	2000
6505	"mbr"	"mbr"	0	0	0	13	2000
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."user_role" (
	"login_id" INTEGER,
	"role_id"  INTEGER
);
COMMIT;

# 13:32:07 >  
# 13:32:07 >  "Done."
# 13:32:07 >  

