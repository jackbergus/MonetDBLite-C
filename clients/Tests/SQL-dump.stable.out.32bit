stdout of test 'SQL-dump` in directory 'clients` itself:


# 20:08:35 >  
# 20:08:35 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=33437" "--set" "mapi_usock=/var/tmp/mtest-1201/.s.monetdb.33437" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/ufs/manegold/_/Monet/HG/Feb2013/prefix/--disable-debug_--enable-assert_--enable-optimize/var/MonetDB/mTests_clients" "--set" "mal_listing=0"
# 20:08:35 >  

# MonetDB 5 server v11.15.12
# This is an unreleased version
# Serving database 'mTests_clients', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2014 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:33437/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-1201/.s.monetdb.33437
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_history.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_compress.sql
# loading sql script: 18_dictionary.sql
# loading sql script: 19_cluster.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 39_analytics.sql
# loading sql script: 40_geom.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_udf.sql
# loading sql script: 99_system.sql

# 20:08:35 >  
# 20:08:35 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-1201" "--port=33437"
# 20:08:35 >  

SCHEMA  json
SCHEMA  tmp
SCHEMA         tmp
SCHEMA         json
SYSTEM SCHEMA  sys
SYSTEM TABLE  sys._columns
SYSTEM TABLE  sys._tables
SYSTEM TABLE  sys.args
SYSTEM TABLE  sys.auths
SYSTEM TABLE  sys.connections
SYSTEM TABLE  sys.db_user_info
SYSTEM TABLE  sys.dependencies
SYSTEM TABLE  sys.functions
SYSTEM TABLE  sys.idxs
SYSTEM TABLE  sys.keys
SYSTEM TABLE  sys.objects
SYSTEM TABLE  sys.privileges
SYSTEM TABLE  sys.schemas
SYSTEM TABLE  sys.sequences
SYSTEM TABLE  sys.statistics
SYSTEM TABLE  sys.storagemodelinput
SYSTEM TABLE  sys.systemfunctions
SYSTEM TABLE  sys.triggers
SYSTEM TABLE  sys.types
SYSTEM TABLE  sys.user_role
SYSTEM VIEW  sys.columns
SYSTEM VIEW  sys.environment
SYSTEM VIEW  sys.optimizers
SYSTEM VIEW  sys.querylog_calls
SYSTEM VIEW  sys.querylog_catalog
SYSTEM VIEW  sys.querylog_history
SYSTEM VIEW  sys.queue
SYSTEM VIEW  sys.sessions
SYSTEM VIEW  sys.storage
SYSTEM VIEW  sys.storagemodel
SYSTEM VIEW  sys.tables
SYSTEM VIEW  sys.tablestoragemodel
SYSTEM VIEW  sys.tracelog
SYSTEM VIEW  sys.users
SYSTEM FUNCTION  sys.Intersect
SYSTEM FUNCTION  sys.Union
SYSTEM FUNCTION  sys.abbrev
SYSTEM FUNCTION  sys.alpha
SYSTEM FUNCTION  sys.analyze
SYSTEM FUNCTION  sys.area
SYSTEM FUNCTION  sys.astext
SYSTEM FUNCTION  sys.bbp
SYSTEM FUNCTION  sys.boundary
SYSTEM FUNCTION  sys.broadcast
SYSTEM FUNCTION  sys.buffer
SYSTEM FUNCTION  sys.cluster1
SYSTEM FUNCTION  sys.cluster2
SYSTEM FUNCTION  sys.columnsize
SYSTEM FUNCTION  sys.contains
SYSTEM FUNCTION  sys.convexhull
SYSTEM FUNCTION  sys.corr
SYSTEM FUNCTION  sys.crosses
SYSTEM FUNCTION  sys.date_to_str
SYSTEM FUNCTION  sys.db_users
SYSTEM FUNCTION  sys.degrees
SYSTEM FUNCTION  sys.dependencies_columns_on_functions
SYSTEM FUNCTION  sys.dependencies_columns_on_indexes
SYSTEM FUNCTION  sys.dependencies_columns_on_keys
SYSTEM FUNCTION  sys.dependencies_columns_on_triggers
SYSTEM FUNCTION  sys.dependencies_columns_on_views
SYSTEM FUNCTION  sys.dependencies_functions_on_functions
SYSTEM FUNCTION  sys.dependencies_functions_os_triggers
SYSTEM FUNCTION  sys.dependencies_keys_on_foreignkeys
SYSTEM FUNCTION  sys.dependencies_owners_on_schemas
SYSTEM FUNCTION  sys.dependencies_schemas_on_users
SYSTEM FUNCTION  sys.dependencies_tables_on_foreignkeys
SYSTEM FUNCTION  sys.dependencies_tables_on_functions
SYSTEM FUNCTION  sys.dependencies_tables_on_indexes
SYSTEM FUNCTION  sys.dependencies_tables_on_triggers
SYSTEM FUNCTION  sys.dependencies_tables_on_views
SYSTEM FUNCTION  sys.dependencies_views_on_functions
SYSTEM FUNCTION  sys.dependencies_views_on_triggers
SYSTEM FUNCTION  sys.difference
SYSTEM FUNCTION  sys.dimension
SYSTEM FUNCTION  sys.disjoint
SYSTEM FUNCTION  sys.distance
SYSTEM FUNCTION  sys.dropdictionary
SYSTEM FUNCTION  sys.env
SYSTEM FUNCTION  sys.envelope
SYSTEM FUNCTION  sys.environment
SYSTEM FUNCTION  sys.equals
SYSTEM FUNCTION  sys.evalalgebra
SYSTEM FUNCTION  sys.fuse
SYSTEM FUNCTION  sys.geomcollectionfromtext
SYSTEM FUNCTION  sys.geometrytypeid
SYSTEM FUNCTION  sys.geomfromtext
SYSTEM FUNCTION  sys.getanchor
SYSTEM FUNCTION  sys.getbasename
SYSTEM FUNCTION  sys.getcontent
SYSTEM FUNCTION  sys.getcontext
SYSTEM FUNCTION  sys.getdomain
SYSTEM FUNCTION  sys.getextension
SYSTEM FUNCTION  sys.getfile
SYSTEM FUNCTION  sys.gethost
SYSTEM FUNCTION  sys.getport
SYSTEM FUNCTION  sys.getprotocol
SYSTEM FUNCTION  sys.getquery
SYSTEM FUNCTION  sys.getroboturl
SYSTEM FUNCTION  sys.getuser
SYSTEM FUNCTION  sys.gzcompress
SYSTEM FUNCTION  sys.gzdecompress
SYSTEM FUNCTION  sys.gzexpand
SYSTEM FUNCTION  sys.gztruncate
SYSTEM FUNCTION  sys.heapsize
SYSTEM FUNCTION  sys.host
SYSTEM FUNCTION  sys.hostmask
SYSTEM FUNCTION  sys.ilike
SYSTEM FUNCTION  sys.indexsize
SYSTEM FUNCTION  sys.initializedictionary
SYSTEM FUNCTION  sys.intersection
SYSTEM FUNCTION  sys.isaurl
SYSTEM FUNCTION  sys.isauuid
SYSTEM FUNCTION  sys.isempty
SYSTEM FUNCTION  sys.issimple
SYSTEM FUNCTION  sys.length
SYSTEM FUNCTION  sys.like
SYSTEM FUNCTION  sys.linefromtext
SYSTEM FUNCTION  sys.masklen
SYSTEM FUNCTION  sys.mbr
SYSTEM FUNCTION  sys.mbroverlaps
SYSTEM FUNCTION  sys.md5
SYSTEM FUNCTION  sys.median
SYSTEM FUNCTION  sys.mlinefromtext
SYSTEM FUNCTION  sys.mpointfromtext
SYSTEM FUNCTION  sys.mpolyfromtext
SYSTEM FUNCTION  sys.ms_round
SYSTEM FUNCTION  sys.ms_str
SYSTEM FUNCTION  sys.ms_stuff
SYSTEM FUNCTION  sys.ms_trunc
SYSTEM FUNCTION  sys.netmask
SYSTEM FUNCTION  sys.network
SYSTEM FUNCTION  sys.newdictionary
SYSTEM FUNCTION  sys.newurl
SYSTEM FUNCTION  sys.optimizer_stats
SYSTEM FUNCTION  sys.optimizers
SYSTEM FUNCTION  sys.overlaps
SYSTEM FUNCTION  sys.password_hash
SYSTEM FUNCTION  sys.pause
SYSTEM FUNCTION  sys.point
SYSTEM FUNCTION  sys.pointfromtext
SYSTEM FUNCTION  sys.polyfromtext
SYSTEM FUNCTION  sys.polygonfromtext
SYSTEM FUNCTION  sys.quantile
SYSTEM FUNCTION  sys.querycache
SYSTEM FUNCTION  sys.querylog
SYSTEM FUNCTION  sys.querylog_calls
SYSTEM FUNCTION  sys.querylog_catalog
SYSTEM FUNCTION  sys.querylog_disable
SYSTEM FUNCTION  sys.querylog_empty
SYSTEM FUNCTION  sys.querylog_enable
SYSTEM FUNCTION  sys.queue
SYSTEM FUNCTION  sys.radians
SYSTEM FUNCTION  sys.relate
SYSTEM FUNCTION  sys.resume
SYSTEM FUNCTION  sys.reuse
SYSTEM FUNCTION  sys.reverse
SYSTEM FUNCTION  sys.sessions
SYSTEM FUNCTION  sys.setmasklen
SYSTEM FUNCTION  sys.setsession
SYSTEM FUNCTION  sys.settimeout
SYSTEM FUNCTION  sys.shrink
SYSTEM FUNCTION  sys.shutdown
SYSTEM FUNCTION  sys.srid
SYSTEM FUNCTION  sys.stddev_pop
SYSTEM FUNCTION  sys.stddev_samp
SYSTEM FUNCTION  sys.stop
SYSTEM FUNCTION  sys.storage
SYSTEM FUNCTION  sys.storagemodel
SYSTEM FUNCTION  sys.storagemodelinit
SYSTEM FUNCTION  sys.str_to_date
SYSTEM FUNCTION  sys.symdifference
SYSTEM FUNCTION  sys.text
SYSTEM FUNCTION  sys.times
SYSTEM FUNCTION  sys.touches
SYSTEM FUNCTION  sys.tracelog
SYSTEM FUNCTION  sys.uuid
SYSTEM FUNCTION  sys.vacuum
SYSTEM FUNCTION  sys.var
SYSTEM FUNCTION  sys.var_pop
SYSTEM FUNCTION  sys.var_samp
SYSTEM FUNCTION  sys.within
SYSTEM FUNCTION  sys.x
SYSTEM FUNCTION  sys.y
SYSTEM FUNCTION  sys.zorder_decode_x
SYSTEM FUNCTION  sys.zorder_decode_y
SYSTEM FUNCTION  sys.zorder_encode
CREATE SCHEMA "tmp";
CREATE SCHEMA "sys";
CREATE TABLE "sys"."_columns" (
	"id"          INTEGER,
	"name"        VARCHAR(1024),
	"type"        VARCHAR(1024),
	"type_digits" INTEGER,
	"type_scale"  INTEGER,
	"table_id"    INTEGER,
	"default"     VARCHAR(2048),
	"null"        BOOLEAN,
	"number"      INTEGER,
	"storage"     VARCHAR(2048)
);
CREATE TABLE "sys"."_tables" (
	"id"            INTEGER,
	"name"          VARCHAR(1024),
	"schema_id"     INTEGER,
	"query"         VARCHAR(2048),
	"type"          SMALLINT,
	"system"        BOOLEAN,
	"commit_action" SMALLINT,
	"readonly"      BOOLEAN
);
CREATE TABLE "sys"."args" (
	"id"          INTEGER,
	"func_id"     INTEGER,
	"name"        VARCHAR(256),
	"type"        VARCHAR(1024),
	"type_digits" INTEGER,
	"type_scale"  INTEGER,
	"number"      INTEGER
);
CREATE TABLE "sys"."auths" (
	"id"      INTEGER,
	"name"    VARCHAR(1024),
	"grantor" INTEGER
);
CREATE TABLE "sys"."connections" (
	"id"       INTEGER,
	"server"   CHAR(1024),
	"port"     INTEGER,
	"db"       CHAR(64),
	"db_alias" CHAR(1024),
	"user"     CHAR(1024),
	"password" CHAR(1024),
	"language" CHAR(1024)
);
CREATE TABLE "sys"."db_user_info" (
	"name"           VARCHAR(1024),
	"fullname"       VARCHAR(2048),
	"default_schema" INTEGER
);
CREATE TABLE "sys"."dependencies" (
	"id"          INTEGER,
	"depend_id"   INTEGER,
	"depend_type" SMALLINT
);
CREATE TABLE "sys"."functions" (
	"id"          INTEGER,
	"name"        VARCHAR(256),
	"func"        VARCHAR(8196),
	"mod"         VARCHAR(8196),
	"sql"         BOOLEAN,
	"type"        INTEGER,
	"side_effect" BOOLEAN,
	"schema_id"   INTEGER
);
CREATE TABLE "sys"."idxs" (
	"id"       INTEGER,
	"table_id" INTEGER,
	"type"     INTEGER,
	"name"     VARCHAR(1024)
);
CREATE TABLE "sys"."keys" (
	"id"       INTEGER,
	"table_id" INTEGER,
	"type"     INTEGER,
	"name"     VARCHAR(1024),
	"rkey"     INTEGER,
	"action"   INTEGER
);
CREATE TABLE "sys"."objects" (
	"id"   INTEGER,
	"name" VARCHAR(1024),
	"nr"   INTEGER
);
CREATE TABLE "sys"."privileges" (
	"obj_id"     INTEGER,
	"auth_id"    INTEGER,
	"privileges" INTEGER,
	"grantor"    INTEGER,
	"grantable"  INTEGER
);
CREATE TABLE "sys"."schemas" (
	"id"            INTEGER,
	"name"          VARCHAR(1024),
	"authorization" INTEGER,
	"owner"         INTEGER,
	"system"        BOOLEAN
);
CREATE TABLE "sys"."sequences" (
	"id"        INTEGER,
	"schema_id" INTEGER,
	"name"      VARCHAR(256),
	"start"     BIGINT,
	"minvalue"  BIGINT,
	"maxvalue"  BIGINT,
	"increment" BIGINT,
	"cacheinc"  BIGINT,
	"cycle"     BOOLEAN
);
CREATE TABLE "sys"."statistics" (
	"schema" CHARACTER LARGE OBJECT,
	"table"  CHARACTER LARGE OBJECT,
	"column" CHARACTER LARGE OBJECT,
	"type"   CHARACTER LARGE OBJECT,
	"width"  INTEGER,
	"stamp"  TIMESTAMP,
	"sample" BIGINT,
	"count"  BIGINT,
	"unique" BIGINT,
	"nils"   BIGINT,
	"minval" CHARACTER LARGE OBJECT,
	"maxval" CHARACTER LARGE OBJECT,
	"sorted" BOOLEAN
);
CREATE TABLE "sys"."storagemodelinput" (
	"schema"    CHARACTER LARGE OBJECT,
	"table"     CHARACTER LARGE OBJECT,
	"column"    CHARACTER LARGE OBJECT,
	"type"      CHARACTER LARGE OBJECT,
	"typewidth" INTEGER,
	"count"     BIGINT,
	"distinct"  BIGINT,
	"atomwidth" INTEGER,
	"reference" BOOLEAN,
	"sorted"    BOOLEAN
);
CREATE TABLE "sys"."systemfunctions" (
	"function_id" INTEGER
);
CREATE TABLE "sys"."triggers" (
	"id"          INTEGER,
	"name"        VARCHAR(1024),
	"table_id"    INTEGER,
	"time"        SMALLINT,
	"orientation" SMALLINT,
	"event"       SMALLINT,
	"old_name"    VARCHAR(1024),
	"new_name"    VARCHAR(1024),
	"condition"   VARCHAR(2048),
	"statement"   VARCHAR(2048)
);
CREATE TABLE "sys"."types" (
	"id"         INTEGER,
	"systemname" VARCHAR(256),
	"sqlname"    VARCHAR(1024),
	"digits"     INTEGER,
	"scale"      INTEGER,
	"radix"      INTEGER,
	"eclass"     INTEGER,
	"schema_id"  INTEGER
);
CREATE TABLE "sys"."user_role" (
	"login_id" INTEGER,
	"role_id"  INTEGER
);
SELECT * FROM (SELECT p.* FROM "sys"."_columns" AS p UNION ALL SELECT t.* FROM "tmp"."_columns" AS t) AS columns;
create view sys.environment as select * from sys.environment();
create view sys.optimizers as select * from sys.optimizers();
create view sys.querylog_calls as select * from sys.querylog_calls();
-- create table views for convenience
create view sys.querylog_catalog as select * from sys.querylog_catalog();
create view sys.querylog_history as
select qd.*, ql."start",ql."stop", ql.arguments, ql.tuples, ql.run, ql.ship, ql.cpu, ql.space, ql.io 
from sys.querylog_catalog() qd, sys.querylog_calls() ql
where qd.id = ql.id and qd.owner = user;
create view sys.queue as select * from sys.queue();
create view sys.sessions as select * from sys.sessions();
create view sys.storage as select * from sys.storage();
create view sys.storagemodel as select * from sys.storagemodel();
SELECT * FROM (SELECT p.*, 0 AS "temporary" FROM "sys"."_tables" AS p UNION ALL SELECT t.*, 1 AS "temporary" FROM "tmp"."_tables" AS t) AS tables where tables.type <> 2;
-- A summary of the table storage requirement is is available as a table view.
-- The auxillary column denotes the maximum space if all non-sorted columns
-- would be augmented with a hash (rare situation)
create view sys.tablestoragemodel
as select "schema","table",max(count) as "count",
	sum(columnsize) as columnsize,
	sum(heapsize) as heapsize,
	sum(indices) as indices,
	sum(case when sorted = false then 8 * count else 0 end) as auxillary
from sys.storagemodel() group by "schema","table";
create view sys.tracelog as select * from sys.tracelog();
SELECT u."name" AS "name", ui."fullname", ui."default_schema" FROM db_users() AS u LEFT JOIN "sys"."db_user_info" AS ui ON u."name" = ui."name" ;
create function "abbrev" (p inet) returns clob
	external name inet."abbrev";
create function alpha(pdec double, pradius double)
returns double external name sql.alpha;
create procedure analyze()
external name sql.analyze;
create procedure analyze(tbl string)
external name sql.analyze;
create procedure analyze(sch string, tbl string)
external name sql.analyze;
create procedure analyze(sch string, tbl string, col string)
external name sql.analyze;
-- control the sample size
create procedure analyze("sample" bigint)
external name sql.analyze;
create procedure analyze(tbl string, "sample" bigint)
external name sql.analyze;
create procedure analyze(sch string, tbl string, "sample" bigint)
external name sql.analyze;
create procedure analyze(sch string, tbl string, col string, "sample" bigint)
external name sql.analyze;
-- ogc Spatial Analysis methods

create function area(g geometry) returns float external name geom."Area";
create function astext(g geometry) returns string external name geom."AsText";
-- The BAT buffer pool overview
create function sys.bbp () 
	returns table (id int, name string, htype string, 
		ttype string, count bigint, refcnt int, lrefcnt int, 
		location string, heat int, dirty string, 
		status string, kind string) 
	external name sql.bbp;
create function boundary(g geometry) returns geometry external name geom."Boundary";
create function "broadcast" (p inet) returns inet 
	external name inet."broadcast";
create function buffer(a geometry, distance float) returns geometry external name geom."Buffer";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- Clustering a relational table should be done with care.
-- For, the oid's are used in join-indices.

-- Clustering of tables may improve IO performance
-- The foreign key constraints should be dropped before
-- and re-established after the cluster operation.

create procedure cluster1(sys string, tab string)
	external name sql.cluster1;
create procedure cluster2(sys string, tab string)
	external name sql.cluster2;
-- The predicted storage footprint of the complete database
-- determines the amount of diskspace needed for persistent storage
-- and the upperbound when all possible index structures are created.
-- The storage requirement for foreign key joins is split amongst the participants.

create function sys.columnsize(nme string, i bigint, d bigint)
returns bigint
begin
	case
	when nme = 'boolean' then return i;
	when nme = 'char' then return 2*i;
	when nme = 'smallint' then return 2 * i;
	when nme = 'int'	 then return 4 * i;
	when nme = 'bigint'	 then return 8 * i;
	when nme = 'timestamp' then return 8 * i;
	when  nme = 'varchar' then
		case
		when cast(d as bigint) << 8 then return i;
		when cast(d as bigint) << 16 then return 2 * i;
		when cast(d as bigint) << 32 then return 4 * i;
		else return 8 * i;
		end case;
	else return 8 * i;
	end case;
end;
create function contains(a geometry, b geometry) returns boolean external name geom."Contains";
create function convexhull(a geometry) returns geometry external name geom."ConvexHull";
create aggregate corr(e1 tinyint, e2 tinyint) returns tinyint
	external name "aggr"."corr";
create aggregate corr(e1 smallint, e2 smallint) returns smallint
	external name "aggr"."corr";
create aggregate corr(e1 integer, e2 integer) returns integer
	external name "aggr"."corr";
create aggregate corr(e1 wrd, e2 wrd) returns wrd
	external name "aggr"."corr";
create aggregate corr(e1 bigint, e2 bigint) returns bigint
	external name "aggr"."corr";
create aggregate corr(e1 real, e2 real) returns real
	external name "aggr"."corr";
create aggregate corr(e1 double, e2 double) returns double
	external name "aggr"."corr";
create function crosses(a geometry, b geometry) returns boolean external name geom."Crosses";
create function date_to_str(d date, format string) returns string
	external name mtime."date_to_str";
CREATE FUNCTION db_users () RETURNS TABLE( name varchar(2048)) EXTERNAL NAME sql.db_users;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create function degrees(r double) 
returns double
	return r*180/pi();
--Column c has a dependency on function f
create function dependencies_columns_on_functions()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select c.name, f.name, 'DEP_FUNC' from functions as f, columns as c, dependencies as dep where c.id = dep.id and f.id = dep.depend_id and dep.depend_type = 7);
--Column c has a dependency on index i 
create function dependencies_columns_on_indexes()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select c.name, i.name, 'DEP_INDEX' from columns as c, objects as kc, idxs as i where kc."name" = c.name and kc.id = i.id and c.table_id = i.table_id and i.name not in (select name from keys));
--Column c has a dependency on key k
create function dependencies_columns_on_keys()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select c.name, k.name, 'DEP_KEY' from columns as c, objects as kc, keys as k where kc."name" = c.name and kc.id = k.id and k.table_id = c.table_id and k.rkey = -1);
--Column c has a dependency on trigger tri
create function dependencies_columns_on_triggers()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select c.name, tri.name, 'DEP_TRIGGER' from columns as c, triggers as tri, dependencies as dep where dep.id = c.id and dep.depend_id =tri.id and dep.depend_type = 8);
--Column c has a dependency on view v
create function dependencies_columns_on_views()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select c.name, v.name, 'DEP_VIEW' from columns as c, tables as v, dependencies as dep where c.id = dep.id and v.id = dep.depend_id and dep.depend_type = 5 and v.type = 1);
--Function f1 has a dependency on function f2
create function dependencies_functions_on_functions()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select f1.name, f2.name, 'DEP_FUNC' from functions as f1, functions as f2, dependencies as dep where f1.id = dep.id and f2.id = dep.depend_id and dep.depend_type = 7);
--Function f1 has a dependency on trigger tri
create function dependencies_functions_os_triggers()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select f.name, tri.name, 'DEP_TRIGGER' from functions as f, triggers as tri, dependencies as dep where dep.id = f.id and dep.depend_id =tri.id and dep.depend_type = 8);
--Key k has a dependency on foreign key fk
create function dependencies_keys_on_foreignkeys()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select k.name, fk.name, 'DEP_FKEY' from keys as k, keys as fk where fk.rkey = k.id);
--User (owner) has a dependency in schema s
create function dependencies_owners_on_schemas()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select a.name, s.name, 'DEP_SCHEMA' from schemas as s, auths a where s.owner = a.id);
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

--Schema s has a dependency on user u
create function dependencies_schemas_on_users()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select s.name, u.name, 'DEP_USER' from schemas as s, users u where u.default_schema = s.id);
--Table t has a dependency on foreign key k
create function dependencies_tables_on_foreignkeys()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select t.name, fk.name, 'DEP_FKEY' from tables as t, keys as k, keys as fk where fk.rkey = k.id and k.table_id = t.id);
--Table t has a dependency on function f
create function dependencies_tables_on_functions()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select t.name, f.name, 'DEP_FUNC' from functions as f, tables as t, dependencies as dep where t.id = dep.id and f.id = dep.depend_id and dep.depend_type = 7 and t.type = 0);
--Table t has a dependency on index  i
create function dependencies_tables_on_indexes()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select t.name, i.name, 'DEP_INDEX' from tables as t, idxs as i where i.table_id = t.id and i.name not in (select name from keys) and t.type = 0);
--Table t has a dependency on trigger tri

create function dependencies_tables_on_triggers()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table ((select t.name, tri.name, 'DEP_TRIGGER' from tables as t, triggers as tri where tri.table_id = t.id) union (select t.name, tri.name, 'DEP_TRIGGER' from triggers tri, tables t, dependencies dep where dep.id = t.id and dep.depend_id =tri.id and dep.depend_type = 8));
--Table t has a dependency on view v
create function dependencies_tables_on_views()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select t.name, v.name, 'DEP_VIEW' from tables as t, tables as v, dependencies as dep where t.id = dep.id and v.id = dep.depend_id and dep.depend_type = 5 and v.type = 1);
--View v has a dependency on function f
create function dependencies_views_on_functions()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select v.name, f.name, 'DEP_FUNC' from functions as f, tables as v, dependencies as dep where v.id = dep.id and f.id = dep.depend_id and dep.depend_type = 7 and v.type = 1);
--View v has a dependency on trigger tri
create function dependencies_views_on_triggers()
returns table (sch varchar(100), usr varchar(100), dep_type varchar(32))
return table (select v.name, tri.name, 'DEP_TRIGGER' from tables as v, triggers as tri, dependencies as dep where dep.id = v.id and dep.depend_id =tri.id and dep.depend_type = 8 and v.type = 1);
create function difference(a geometry, b geometry) returns geometry external name geom."Difference";
-- CREATE FUNCTION Point(g Geometry) RETURNS Point external name geom.point;
-- CREATE FUNCTION Curve(g Geometry) RETURNS Curve external name geom.curve;
-- CREATE FUNCTION LineString(g Geometry) RETURNS LineString external name geom.linestring;
-- CREATE FUNCTION Surface(g Geometry) RETURNS Surface external name geom.surface;
-- CREATE FUNCTION Polygon(g Geometry) RETURNS Polygon external name geom.polygon;

-- ogc basic methods
create function dimension(g geometry) returns integer external name geom."Dimension";
create function disjoint(a geometry, b geometry) returns boolean external name geom."Disjoint";
create function distance(a geometry, b geometry) returns float external name geom."Distance";
create procedure dropdictionary (s string, t string)
    external name sql.dropdictionary;
CREATE FUNCTION env () RETURNS TABLE( name varchar(1024), value varchar(2048)) EXTERNAL NAME sql.sql_environment;
create function envelope(g geometry) returns geometry external name geom."Envelope";
-- The environment table
create function sys.environment()
	returns table ("name" string, value string)
	external name sql.sql_environment;
-- ogc spatial relation methods
create function equals(a geometry, b geometry) returns boolean external name geom."Equals";
create procedure sys.evalalgebra( ra_stmt string, opt bool)
	external name sql."evalAlgebra";
-- fuse two (1-byte) tinyint values into one (2-byte) smallint value
create function fuse(one tinyint, two tinyint)
returns smallint external name udf.fuse;
-- fuse two (2-byte) smallint values into one (4-byte) integer value
create function fuse(one smallint, two smallint)
returns integer external name udf.fuse;
-- fuse two (4-byte) integer values into one (8-byte) bigint value
create function fuse(one integer, two integer)
returns bigint external name udf.fuse;
create function geomcollectionfromtext(wkt string, srid smallint) returns multipolygon external name geom."GeomCollectionFromText";
create function geometrytypeid(g geometry) returns integer external name geom."GeometryTypeId";
-- The srid in the *FromText Functions is currently not used
create function geomfromtext(wkt string, srid smallint) returns geometry external name geom."GeomFromText";
create function getanchor( theurl url ) returns string 
	external name url."getAnchor";
create function getbasename(theurl url) returns string       
	external name url."getBasename";
create function getcontent(theurl url)   returns string       
	external name url."getContent";
create function getcontext(theurl url)   returns string       
	external name url."getContext";
create function getdomain(theurl url) returns string       
	external name url."getDomain";
create function getextension(theurl url) returns string       
	external name url."getExtension";
create function getfile(theurl url) returns string       
	external name url."getFile";
create function gethost(theurl url)   returns string       
	external name url."getHost";
create function getport(theurl url) returns string       
	external name url."getPort";
create function getprotocol(theurl url) returns string       
	external name url."getProtocol";
create function getquery(theurl url) returns string       
	external name url."getQuery";
create function getroboturl(theurl url) returns string       
	external name url."getRobotURL";
create function getuser(theurl url) returns string       
	external name url."getUser";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- Perform LZ-compression over a specific table;
create procedure gzcompress (s string, t string)
    external name sql.gzcompress;
create procedure gzdecompress (s string, t string)
    external name sql.gzdecompress;
-- Remove the compressed images
create procedure gzexpand (s string, t string)
    external name sql.gzexpand;
-- Truncate the storage for columns with a compressed image
create procedure gztruncate (s string, t string)
    external name sql.gztruncate;
create function sys.heapsize(tpe string, i bigint, w int)
returns bigint
begin
	if  tpe <> 'varchar' and tpe <> 'clob'
	then
		return 0;
	end if;
	return 10240 + i * w;
end;
create function "host" (p inet) returns clob
	external name inet."host";
create function "hostmask" (p inet) returns inet
	external name inet."hostmask";
create filter function "ilike"(val string, pat string, esc string) external name algebra.ilikesubselect;
create function sys.indexsize(b boolean, i bigint)
returns bigint
begin
	-- assume non-compound keys
	if  b = true
	then
		return 8 * i;
	end if;
	return 0;
end;
create procedure initializedictionary ()
    external name dictionary.initialize;
create function intersection(a geometry, b geometry) returns geometry external name geom."Intersection";
create function isaurl(theurl url) returns bool
	external name url."isaURL";
create function sys.isauuid(u uuid)
returns uuid external name uuid."isaUUID";
create function isempty(g geometry) returns boolean external name geom."IsEmpty";
create function issimple(g geometry) returns boolean external name geom."IsSimple";
create function length(g geometry) returns float external name geom."Length";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create filter function "like"(val string, pat string, esc string) external name algebra.likesubselect;
create function linefromtext(wkt string, srid smallint) returns linestring external name geom."LineFromText";
create function "masklen" (p inet) returns int
	external name inet."masklen";
-- currently we only use mbr instead of
-- Envelope():Geometry
-- as that returns Geometry objects, and we prefer the explicit mbr's
-- minimum bounding rectangle (mbr)
create function mbr (g geometry) returns mbr external name geom.mbr;
create function mbroverlaps(a mbr, b mbr) returns boolean external name geom."mbroverlaps";

-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- (co) Arjen de Rijke
-- Functions supporting jsonstore

create function sys.md5(v string)
returns string external name clients.md5sum;
create aggregate median(val tinyint) returns tinyint
	external name "aggr"."median";
create aggregate median(val smallint) returns smallint
	external name "aggr"."median";
create aggregate median(val integer) returns integer
	external name "aggr"."median";
create aggregate median(val wrd) returns wrd
	external name "aggr"."median";
create aggregate median(val bigint) returns bigint
	external name "aggr"."median";
create aggregate median(val decimal) returns decimal
 	external name "aggr"."median";
create aggregate median(val real) returns real
	external name "aggr"."median";
create aggregate median(val double) returns double
	external name "aggr"."median";
create aggregate median(val date) returns date
	external name "aggr"."median";
create aggregate median(val time) returns time
	external name "aggr"."median";
create aggregate median(val timestamp) returns timestamp
	external name "aggr"."median";
create function mlinefromtext(wkt string, srid smallint) returns multilinestring external name geom."MultiLineFromText";
create function mpointfromtext(wkt string, srid smallint) returns multipoint external name geom."MultiPointFromText";
create function mpolyfromtext(wkt string, srid smallint) returns multipolygon external name geom."MultiPolyFromText";
create function ms_round(num double, prc int, truncat int)
returns double
begin
	if (truncat = 0)
		then return round(num, prc);
		else return ms_trunc(num, prc);
	end if;
end;
create function ms_str(num float, prc int, truncat int)
returns string
begin
        return cast(num as string);
end;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create function ms_stuff( s1 varchar(32), st int, len int, s3 varchar(32))
returns varchar(32)
begin
	declare res varchar(32), aux varchar(32);
	declare ofset int;

    if ( st < 0 or st > length(s1))
        then return '';
    end if;

    set ofset = 1;
    set res = substring(s1,ofset,st-1);
    set res = res || s3;
    set ofset = st + len;
    set aux = substring(s1,ofset,length(s1)-ofset+1);
	set res = res || aux;
	return res;
end;
create function ms_trunc(num double, prc int)
returns double
external name sql.ms_trunc;
create function "netmask" (p inet) returns inet
	external name inet."netmask";
create function "network" (p inet) returns inet
	external name inet."network";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create procedure newdictionary (s string, t string)
    external name sql.newdictionary;
create function newurl(protocol string, hostname string, "port" int, file string) 
	returns url       
	external name url."new";
create function newurl(protocol string, hostname string, file string) 
	returns url 
	external name url."new";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- show the optimizer statistics maintained by the SQL frontend
create function sys.optimizer_stats () 
	returns table (rewrite string, count int) 
	external name sql.dump_opt_stats;
-- MONETDB KERNEL SECTION
-- optimizer pipe catalog
create function sys.optimizers () 
	returns table (name string, def string, status string)
	external name sql.optimizers;
create function overlaps(a geometry, b geometry) returns boolean external name geom."Overlaps";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create function sys.password_hash (username string) 
	returns string 
	external name sql.password;
-- operations to manipulate the state of havoc queries
create procedure sys.pause(tag int)
external name sql.sysmon_pause;
create procedure sys.pause(tag bigint)
external name sql.sysmon_pause;
create function point(x double,y double) returns point external name geom.point;
create function pointfromtext(wkt string, srid smallint) returns point external name geom."PointFromText";
create function polyfromtext(wkt string, srid smallint) returns polygon external name geom."PolyFromText";
-- alias
create function polygonfromtext(wkt string, srid smallint) returns polygon external name geom."PolyFromText";
create aggregate quantile(val tinyint, q double) returns tinyint
 	external name "aggr"."quantile";
create aggregate quantile(val smallint, q double) returns smallint
 	external name "aggr"."quantile";
create aggregate quantile(val integer, q double) returns integer
 	external name "aggr"."quantile";
create aggregate quantile(val wrd, q double) returns wrd
	external name "aggr"."quantile";
create aggregate quantile(val bigint, q double) returns bigint
	external name "aggr"."quantile";
create aggregate quantile(val decimal, q double) returns decimal
 	external name "aggr"."quantile";
create aggregate quantile(val real, q double) returns real
	external name "aggr"."quantile";
create aggregate quantile(val double, q double) returns double
	external name "aggr"."quantile";
create aggregate quantile(val date, q double) returns date
	external name "aggr"."quantile";
create aggregate quantile(val time, q double) returns time
	external name "aggr"."quantile";
create aggregate quantile(val timestamp, q double) returns timestamp
	external name "aggr"."quantile";
-- SQL QUERY CACHE
-- The SQL query cache returns a table with the query plans kept

create function sys.querycache() 
	returns table (query string, count int) 
	external name sql.dump_cache;
-- Trace the SQL input
create procedure sys.querylog(filename string) 
	external name sql.logfile;
-- Each query call is stored in the table calls
-- At regular intervals the query history table should be cleaned.
-- This can be done manually on the SQL console, or be integrated
-- in the keepQuery and keepCall upon need.
-- The parameters are geared at understanding the resource claims
-- They reflect the effect of the total workload mix during execution.
-- The 'cpu' gives the average cpu load percentage over all cores on the 
-- server during execution phase. 
-- increasing cpu load indicates better use of multi-cores.
-- The 'io' indicate IOs during complete query run.
-- The 'space' is the total amount of intermediates created in MB.
-- Reducing the space component improves performance/
-- All timing in usec and all storage in bytes.

create function sys.querylog_calls()
returns table(
	id oid,				 -- references query plan
	"start" timestamp,	-- time the statement was started
	"stop" timestamp,	-- time the statement was completely finished
	arguments string,	-- actual call structure
	tuples wrd,			-- number of tuples in the result set
	run bigint,		-- time spent (in usec)  until the result export
	ship bigint,		-- time spent (in usec)  to ship the result set
	cpu int,  		-- average cpu load percentage during execution
	io int,			-- percentage time waiting for IO to finish 
	space bigint		-- total storage size of intermediates created (in MB)
)
external name sql.querylog_calls;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- QUERY HISTORY
-- The query history mechanism of MonetDB/SQL relies on a few hooks.
-- The most important one is a global system variable which controls
--  monitoring of all sessions. 

create function sys.querylog_catalog()
returns table(
	id oid,
	owner string,
	defined timestamp,
	query string,
	pipe string,
	mal int,			-- size of MAL plan
	optimize bigint 	-- time in usec
)
external name sql.querylog_catalog;
create procedure sys.querylog_disable()
external name sql.querylog_disable;
-- reset history for a particular user
create procedure sys.querylog_empty()
external name sql.querylog_empty;
-- manipulate the query logger
create procedure sys.querylog_enable()
external name sql.querylog_enable;
create procedure sys.querylog_enable(threshold smallint)
external name sql.querylog_enable_threshold;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- System monitoring

-- show status of all active SQL queries.
create function sys.queue()
returns table(
	qtag bigint,
	"user" string,
	started timestamp,
	estimate timestamp,
	progress int,
	status string,
	tag oid,
	query string
)
external name sql.sysmon_queue;
create function radians(d double) 
returns double
	return d*pi()/180;
create function relate(a geometry, b geometry, pattern string) returns boolean external name geom."Relate";
create procedure sys.resume(tag int)
external name sql.sysmon_resume;
create procedure sys.resume(tag bigint)
external name sql.sysmon_resume;
create procedure reuse(sys string, tab string)
	external name sql.reuse;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- add function signatures to SQL catalog


-- Reverse a string
create function reverse(src string)
returns string external name udf.reverse;
create function sys.sessions()
returns table("user" string, "login" timestamp, "sessiontimeout" bigint, "lastcommand" timestamp, "querytimeout" bigint, "active" bool)
external name sql.sessions;
create function "setmasklen" (p inet, mask int) returns inet
	external name inet."setmasklen";
create procedure sys.setsession("timeout" bigint)
	external name sql.setsession;
-- control the query and session time out 
create procedure sys.settimeout("query" bigint)
	external name sql.settimeout;
create procedure sys.settimeout("query" bigint, "session" bigint)
	external name sql.settimeout;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- Vacuum a relational table should be done with care.
-- For, the oid's are used in join-indices.

-- Vacuum of tables may improve IO performance and disk footprint.
-- The foreign key constraints should be dropped before
-- and re-established after the cluster operation.

create procedure shrink(sys string, tab string)
	external name sql.shrink;
create procedure sys.shutdown(delay tinyint) 
external name sql.shutdown;
create procedure sys.shutdown(delay tinyint, force bool) 
external name sql.shutdown;
create function srid(g geometry) returns integer external name geom."SRID";
create aggregate stddev_pop(val tinyint) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val smallint) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val integer) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val wrd) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val bigint) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val real) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val double) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val date) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val time) returns double
	external name "aggr"."stdevp";
create aggregate stddev_pop(val timestamp) returns double
	external name "aggr"."stdevp";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create aggregate stddev_samp(val tinyint) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val smallint) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val integer) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val wrd) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val bigint) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val real) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val double) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val date) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val time) returns double
	external name "aggr"."stdev";
create aggregate stddev_samp(val timestamp) returns double
	external name "aggr"."stdev";
create procedure sys.stop(tag int)
external name sql.sysmon_stop;
create procedure sys.stop(tag bigint)
external name sql.sysmon_stop;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.


-- Author M.Kersten
-- This script gives the database administrator insight in the actual
-- footprint of the persistent tables and the maximum playground used
-- when indices are introduced upon them.
-- By chancing the storagemodelinput table directly, the footprint for
-- yet to be loaded databases can be assessed.

-- The actual storage footprint of an existing database can be
-- obtained by the table procuding function storage()
-- It represents the actual state of affairs, i.e. storage on disk
-- of columns and foreign key indices, and possible temporary hash indices.
-- For strings we take a sample to determine their average length.

create function sys.storage()
returns table ("schema" string, "table" string, "column" string, "type" string, location string, "count" bigint, typewidth int, columnsize bigint, heapsize bigint, indices bigint, sorted boolean)
external name sql.storage;
create function sys.storagemodel()
returns table (
	"schema" string,
	"table" string,
	"column" string,
	"type" string,
	"count"	bigint,
	columnsize bigint,
	heapsize bigint,
	indices bigint,
	sorted boolean)
begin
	return select i."schema", i."table", i."column", i."type", i."count",
	columnsize(i."type", i.count, i."distinct"),
	heapsize(i."type", i."distinct", i."atomwidth"),
	indexsize(i."reference", i."count"),
	i.sorted
	from sys.storagemodelinput i;
end;
-- this table can be adjusted to reflect the anticipated final database size

-- The model input can be derived from the current database using
create procedure sys.storagemodelinit()
begin
	delete from sys.storagemodelinput;

	insert into sys.storagemodelinput
	select x."schema", x."table", x."column", x."type", x.typewidth, x.count, 0, x.typewidth, false, x.sorted from sys.storage() x;

	update sys.storagemodelinput
	set reference = true
	where concat(concat("schema","table"), "column") in (
		select concat( concat("fkschema"."name", "fktable"."name"), "fkkeycol"."name" )
		from	"sys"."keys" as    "fkkey",
				"sys"."objects" as "fkkeycol",
				"sys"."tables" as  "fktable",
				"sys"."schemas" as "fkschema"
		where   "fktable"."id" = "fkkey"."table_id"
			and "fkkey"."id" = "fkkeycol"."id"
			and "fkschema"."id" = "fktable"."schema_id"
			and "fkkey"."rkey" > -1);

	update sys.storagemodelinput
	set "distinct" = "count" -- assume all distinct
	where "type" = 'varchar' or "type"='clob';
end;

-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create function str_to_date(s string, format string) returns date
	external name mtime."str_to_date";
create function symdifference(a geometry, b geometry) returns geometry external name geom."SymDifference";
create function "text" (p inet) returns clob
	external name inet."text";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- Provide a simple equivalent for the UNIX times command
-- times 0 ms user 0 ms system 0 ms 0 reads 0 writes

create procedure times()
external name sql.times;
create function touches(a geometry, b geometry) returns boolean external name geom."Touches";
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

-- make the offline tracing table available for inspection
create function sys.tracelog() 
	returns table (
		event integer,		-- event counter
		clk varchar(20), 	-- wallclock, no mtime in kernel
		pc varchar(50), 	-- module.function[nr]
		thread int, 		-- thread identifier
		"user" int, 		-- user identifier
		ticks bigint, 		-- time in microseconds
		reads bigint, 		-- number of blocks read
		writes bigint, 	-- number of blocks written
		rbytes bigint,		-- amount of bytes touched
		wbytes bigint,		-- amount of bytes written
		type string,		-- return types
		stmt string			-- actual statement executed
	)
	external name sql.dump_trace;
-- generate a new uuid
create function sys.uuid()
returns uuid external name uuid."new";
create procedure vacuum(sys string, tab string)
	external name sql.vacuum;
CREATE FUNCTION var() RETURNS TABLE( name varchar(1024)) EXTERNAL NAME sql.sql_variables;
create aggregate var_pop(val tinyint) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val smallint) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val integer) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val wrd) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val bigint) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val real) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val double) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val date) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val time) returns double
	external name "aggr"."variancep";
create aggregate var_pop(val timestamp) returns double
	external name "aggr"."variancep";
create aggregate var_samp(val tinyint) returns double
	external name "aggr"."variance";
create aggregate var_samp(val smallint) returns double
	external name "aggr"."variance";
create aggregate var_samp(val integer) returns double
	external name "aggr"."variance";
create aggregate var_samp(val wrd) returns double
	external name "aggr"."variance";
create aggregate var_samp(val bigint) returns double
	external name "aggr"."variance";
create aggregate var_samp(val real) returns double
	external name "aggr"."variance";
create aggregate var_samp(val double) returns double
	external name "aggr"."variance";
create aggregate var_samp(val date) returns double
	external name "aggr"."variance";
create aggregate var_samp(val time) returns double
	external name "aggr"."variance";
create aggregate var_samp(val timestamp) returns double
	external name "aggr"."variance";
create function within(a geometry, b geometry) returns boolean external name geom."Within";
create function x(g geometry) returns double external name geom."X";
create function y(g geometry) returns double external name geom."Y";
create function zorder_decode_x(z oid) returns integer
    external name zorder.decode_x;
create function zorder_decode_y(z oid) returns integer
    external name zorder.decode_y;
-- The contents of this file are subject to the MonetDB Public License
-- Version 1.1 (the "License"); you may not use this file except in
-- compliance with the License. You may obtain a copy of the License at
-- http://www.monetdb.org/Legal/MonetDBLicense
--
-- Software distributed under the License is distributed on an "AS IS"
-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
-- License for the specific language governing rights and limitations
-- under the License.
--
-- The Original Code is the MonetDB Database System.
--
-- The Initial Developer of the Original Code is CWI.
-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
-- Copyright August 2008-2014 MonetDB B.V.
-- All Rights Reserved.

create function zorder_encode(x integer, y integer) returns oid
    external name zorder.encode;
START TRANSACTION;
CREATE TABLE "sys"."_columns" (
	"id"          INTEGER,
	"name"        VARCHAR(1024),
	"type"        VARCHAR(1024),
	"type_digits" INTEGER,
	"type_scale"  INTEGER,
	"table_id"    INTEGER,
	"default"     VARCHAR(2048),
	"null"        BOOLEAN,
	"number"      INTEGER,
	"storage"     VARCHAR(2048)
);
COPY 419 RECORDS INTO "sys"."_columns" FROM stdin USING DELIMITERS '\t','\n','"';
2002	"id"	"int"	32	0	2001	NULL	true	0	NULL
2003	"name"	"varchar"	1024	0	2001	NULL	true	1	NULL
2004	"authorization"	"int"	32	0	2001	NULL	true	2	NULL
2005	"owner"	"int"	32	0	2001	NULL	true	3	NULL
2006	"system"	"boolean"	1	0	2001	NULL	true	4	NULL
2008	"id"	"int"	32	0	2007	NULL	true	0	NULL
2009	"systemname"	"varchar"	256	0	2007	NULL	true	1	NULL
2010	"sqlname"	"varchar"	1024	0	2007	NULL	true	2	NULL
2011	"digits"	"int"	32	0	2007	NULL	true	3	NULL
2012	"scale"	"int"	32	0	2007	NULL	true	4	NULL
2013	"radix"	"int"	32	0	2007	NULL	true	5	NULL
2014	"eclass"	"int"	32	0	2007	NULL	true	6	NULL
2015	"schema_id"	"int"	32	0	2007	NULL	true	7	NULL
2017	"id"	"int"	32	0	2016	NULL	true	0	NULL
2018	"name"	"varchar"	256	0	2016	NULL	true	1	NULL
2019	"func"	"varchar"	8196	0	2016	NULL	true	2	NULL
2020	"mod"	"varchar"	8196	0	2016	NULL	true	3	NULL
2021	"sql"	"boolean"	1	0	2016	NULL	true	4	NULL
2022	"type"	"int"	32	0	2016	NULL	true	5	NULL
2023	"side_effect"	"boolean"	1	0	2016	NULL	true	6	NULL
2024	"schema_id"	"int"	32	0	2016	NULL	true	7	NULL
2026	"id"	"int"	32	0	2025	NULL	true	0	NULL
2027	"func_id"	"int"	32	0	2025	NULL	true	1	NULL
2028	"name"	"varchar"	256	0	2025	NULL	true	2	NULL
2029	"type"	"varchar"	1024	0	2025	NULL	true	3	NULL
2030	"type_digits"	"int"	32	0	2025	NULL	true	4	NULL
2031	"type_scale"	"int"	32	0	2025	NULL	true	5	NULL
2032	"number"	"int"	32	0	2025	NULL	true	6	NULL
2034	"id"	"int"	32	0	2033	NULL	true	0	NULL
2035	"schema_id"	"int"	32	0	2033	NULL	true	1	NULL
2036	"name"	"varchar"	256	0	2033	NULL	true	2	NULL
2037	"start"	"bigint"	64	0	2033	NULL	true	3	NULL
2038	"minvalue"	"bigint"	64	0	2033	NULL	true	4	NULL
2039	"maxvalue"	"bigint"	64	0	2033	NULL	true	5	NULL
2040	"increment"	"bigint"	64	0	2033	NULL	true	6	NULL
2041	"cacheinc"	"bigint"	64	0	2033	NULL	true	7	NULL
2042	"cycle"	"boolean"	1	0	2033	NULL	true	8	NULL
2044	"id"	"int"	32	0	2043	NULL	true	0	NULL
2045	"depend_id"	"int"	32	0	2043	NULL	true	1	NULL
2046	"depend_type"	"smallint"	16	0	2043	NULL	true	2	NULL
2048	"id"	"int"	32	0	2047	NULL	true	0	NULL
2049	"server"	"char"	1024	0	2047	NULL	true	1	NULL
2050	"port"	"int"	32	0	2047	NULL	true	2	NULL
2051	"db"	"char"	64	0	2047	NULL	true	3	NULL
2052	"db_alias"	"char"	1024	0	2047	NULL	true	4	NULL
2053	"user"	"char"	1024	0	2047	NULL	true	5	NULL
2054	"password"	"char"	1024	0	2047	NULL	true	6	NULL
2055	"language"	"char"	1024	0	2047	NULL	true	7	NULL
2057	"id"	"int"	32	0	2056	NULL	true	0	NULL
2058	"name"	"varchar"	1024	0	2056	NULL	true	1	NULL
2059	"schema_id"	"int"	32	0	2056	NULL	true	2	NULL
2060	"query"	"varchar"	2048	0	2056	NULL	true	3	NULL
2061	"type"	"smallint"	16	0	2056	NULL	true	4	NULL
2062	"system"	"boolean"	1	0	2056	NULL	true	5	NULL
2063	"commit_action"	"smallint"	16	0	2056	NULL	true	6	NULL
2064	"readonly"	"boolean"	1	0	2056	NULL	true	7	NULL
2066	"id"	"int"	32	0	2065	NULL	true	0	NULL
2067	"name"	"varchar"	1024	0	2065	NULL	true	1	NULL
2068	"type"	"varchar"	1024	0	2065	NULL	true	2	NULL
2069	"type_digits"	"int"	32	0	2065	NULL	true	3	NULL
2070	"type_scale"	"int"	32	0	2065	NULL	true	4	NULL
2071	"table_id"	"int"	32	0	2065	NULL	true	5	NULL
2072	"default"	"varchar"	2048	0	2065	NULL	true	6	NULL
2073	"null"	"boolean"	1	0	2065	NULL	true	7	NULL
2074	"number"	"int"	32	0	2065	NULL	true	8	NULL
2075	"storage"	"varchar"	2048	0	2065	NULL	true	9	NULL
2077	"id"	"int"	32	0	2076	NULL	true	0	NULL
2078	"table_id"	"int"	32	0	2076	NULL	true	1	NULL
2079	"type"	"int"	32	0	2076	NULL	true	2	NULL
2080	"name"	"varchar"	1024	0	2076	NULL	true	3	NULL
2081	"rkey"	"int"	32	0	2076	NULL	true	4	NULL
2082	"action"	"int"	32	0	2076	NULL	true	5	NULL
2084	"id"	"int"	32	0	2083	NULL	true	0	NULL
2085	"table_id"	"int"	32	0	2083	NULL	true	1	NULL
2086	"type"	"int"	32	0	2083	NULL	true	2	NULL
2087	"name"	"varchar"	1024	0	2083	NULL	true	3	NULL
2089	"id"	"int"	32	0	2088	NULL	true	0	NULL
2090	"name"	"varchar"	1024	0	2088	NULL	true	1	NULL
2091	"table_id"	"int"	32	0	2088	NULL	true	2	NULL
2092	"time"	"smallint"	16	0	2088	NULL	true	3	NULL
2093	"orientation"	"smallint"	16	0	2088	NULL	true	4	NULL
2094	"event"	"smallint"	16	0	2088	NULL	true	5	NULL
2095	"old_name"	"varchar"	1024	0	2088	NULL	true	6	NULL
2096	"new_name"	"varchar"	1024	0	2088	NULL	true	7	NULL
2097	"condition"	"varchar"	2048	0	2088	NULL	true	8	NULL
2098	"statement"	"varchar"	2048	0	2088	NULL	true	9	NULL
2100	"id"	"int"	32	0	2099	NULL	true	0	NULL
2101	"name"	"varchar"	1024	0	2099	NULL	true	1	NULL
2102	"nr"	"int"	32	0	2099	NULL	true	2	NULL
2105	"id"	"int"	32	0	2104	NULL	true	0	NULL
2106	"name"	"varchar"	1024	0	2104	NULL	true	1	NULL
2107	"schema_id"	"int"	32	0	2104	NULL	true	2	NULL
2108	"query"	"varchar"	2048	0	2104	NULL	true	3	NULL
2109	"type"	"smallint"	16	0	2104	NULL	true	4	NULL
2110	"system"	"boolean"	1	0	2104	NULL	true	5	NULL
2111	"commit_action"	"smallint"	16	0	2104	NULL	true	6	NULL
2112	"readonly"	"boolean"	1	0	2104	NULL	true	7	NULL
2114	"id"	"int"	32	0	2113	NULL	true	0	NULL
2115	"name"	"varchar"	1024	0	2113	NULL	true	1	NULL
2116	"type"	"varchar"	1024	0	2113	NULL	true	2	NULL
2117	"type_digits"	"int"	32	0	2113	NULL	true	3	NULL
2118	"type_scale"	"int"	32	0	2113	NULL	true	4	NULL
2119	"table_id"	"int"	32	0	2113	NULL	true	5	NULL
2120	"default"	"varchar"	2048	0	2113	NULL	true	6	NULL
2121	"null"	"boolean"	1	0	2113	NULL	true	7	NULL
2122	"number"	"int"	32	0	2113	NULL	true	8	NULL
2123	"storage"	"varchar"	2048	0	2113	NULL	true	9	NULL
2125	"id"	"int"	32	0	2124	NULL	true	0	NULL
2126	"table_id"	"int"	32	0	2124	NULL	true	1	NULL
2127	"type"	"int"	32	0	2124	NULL	true	2	NULL
2128	"name"	"varchar"	1024	0	2124	NULL	true	3	NULL
2129	"rkey"	"int"	32	0	2124	NULL	true	4	NULL
2130	"action"	"int"	32	0	2124	NULL	true	5	NULL
2132	"id"	"int"	32	0	2131	NULL	true	0	NULL
2133	"table_id"	"int"	32	0	2131	NULL	true	1	NULL
2134	"type"	"int"	32	0	2131	NULL	true	2	NULL
2135	"name"	"varchar"	1024	0	2131	NULL	true	3	NULL
2137	"id"	"int"	32	0	2136	NULL	true	0	NULL
2138	"name"	"varchar"	1024	0	2136	NULL	true	1	NULL
2139	"table_id"	"int"	32	0	2136	NULL	true	2	NULL
2140	"time"	"smallint"	16	0	2136	NULL	true	3	NULL
2141	"orientation"	"smallint"	16	0	2136	NULL	true	4	NULL
2142	"event"	"smallint"	16	0	2136	NULL	true	5	NULL
2143	"old_name"	"varchar"	1024	0	2136	NULL	true	6	NULL
2144	"new_name"	"varchar"	1024	0	2136	NULL	true	7	NULL
2145	"condition"	"varchar"	2048	0	2136	NULL	true	8	NULL
2146	"statement"	"varchar"	2048	0	2136	NULL	true	9	NULL
2148	"id"	"int"	32	0	2147	NULL	true	0	NULL
2149	"name"	"varchar"	1024	0	2147	NULL	true	1	NULL
2150	"nr"	"int"	32	0	2147	NULL	true	2	NULL
5079	"id"	"int"	32	0	5078	NULL	true	0	NULL
5080	"name"	"varchar"	1024	0	5078	NULL	true	1	NULL
5081	"schema_id"	"int"	32	0	5078	NULL	true	2	NULL
5082	"query"	"varchar"	2048	0	5078	NULL	true	3	NULL
5083	"type"	"smallint"	16	0	5078	NULL	true	4	NULL
5084	"system"	"boolean"	1	0	5078	NULL	true	5	NULL
5085	"commit_action"	"smallint"	16	0	5078	NULL	true	6	NULL
5086	"readonly"	"boolean"	1	0	5078	NULL	true	7	NULL
5087	"temporary"	"smallint"	16	0	5078	NULL	true	8	NULL
5089	"id"	"int"	32	0	5088	NULL	true	0	NULL
5090	"name"	"varchar"	1024	0	5088	NULL	true	1	NULL
5091	"type"	"varchar"	1024	0	5088	NULL	true	2	NULL
5092	"type_digits"	"int"	32	0	5088	NULL	true	3	NULL
5093	"type_scale"	"int"	32	0	5088	NULL	true	4	NULL
5094	"table_id"	"int"	32	0	5088	NULL	true	5	NULL
5095	"default"	"varchar"	2048	0	5088	NULL	true	6	NULL
5096	"null"	"boolean"	1	0	5088	NULL	true	7	NULL
5097	"number"	"int"	32	0	5088	NULL	true	8	NULL
5098	"storage_type"	"int"	32	0	5088	NULL	true	9	NULL
5100	"name"	"varchar"	1024	0	5099	NULL	true	0	NULL
5101	"value"	"varchar"	2048	0	5099	NULL	true	1	NULL
5105	"name"	"varchar"	1024	0	5104	NULL	true	0	NULL
5109	"name"	"varchar"	1024	0	5108	NULL	true	0	NULL
5110	"fullname"	"varchar"	2048	0	5108	NULL	true	1	NULL
5111	"default_schema"	"int"	9	0	5108	NULL	true	2	NULL
5113	"name"	"varchar"	2048	0	5112	NULL	true	0	NULL
5117	"name"	"varchar"	1024	0	5116	NULL	true	0	NULL
5118	"fullname"	"varchar"	2024	0	5116	NULL	true	1	NULL
5119	"default_schema"	"int"	9	0	5116	NULL	true	2	NULL
5121	"login_id"	"int"	32	0	5120	NULL	true	0	NULL
5122	"role_id"	"int"	32	0	5120	NULL	true	1	NULL
5124	"id"	"int"	32	0	5123	NULL	true	0	NULL
5125	"name"	"varchar"	1024	0	5123	NULL	true	1	NULL
5126	"grantor"	"int"	32	0	5123	NULL	true	2	NULL
5128	"obj_id"	"int"	32	0	5127	NULL	true	0	NULL
5129	"auth_id"	"int"	32	0	5127	NULL	true	1	NULL
5130	"privileges"	"int"	32	0	5127	NULL	true	2	NULL
5131	"grantor"	"int"	32	0	5127	NULL	true	3	NULL
5132	"grantable"	"int"	32	0	5127	NULL	true	4	NULL
5272	"id"	"oid"	31	0	5271	NULL	true	0	NULL
5273	"owner"	"clob"	0	0	5271	NULL	true	1	NULL
5274	"defined"	"timestamp"	7	0	5271	NULL	true	2	NULL
5275	"query"	"clob"	0	0	5271	NULL	true	3	NULL
5276	"pipe"	"clob"	0	0	5271	NULL	true	4	NULL
5277	"mal"	"int"	32	0	5271	NULL	true	5	NULL
5278	"optimize"	"bigint"	64	0	5271	NULL	true	6	NULL
5283	"id"	"oid"	31	0	5282	NULL	true	0	NULL
5284	"start"	"timestamp"	7	0	5282	NULL	true	1	NULL
5285	"stop"	"timestamp"	7	0	5282	NULL	true	2	NULL
5286	"arguments"	"clob"	0	0	5282	NULL	true	3	NULL
5287	"tuples"	"wrd"	32	0	5282	NULL	true	4	NULL
5288	"run"	"bigint"	64	0	5282	NULL	true	5	NULL
5289	"ship"	"bigint"	64	0	5282	NULL	true	6	NULL
5290	"cpu"	"int"	32	0	5282	NULL	true	7	NULL
5291	"io"	"int"	32	0	5282	NULL	true	8	NULL
5292	"space"	"bigint"	64	0	5282	NULL	true	9	NULL
5297	"id"	"oid"	31	0	5304	NULL	true	0	NULL
5298	"owner"	"clob"	0	0	5304	NULL	true	1	NULL
5299	"defined"	"timestamp"	7	0	5304	NULL	true	2	NULL
5300	"query"	"clob"	0	0	5304	NULL	true	3	NULL
5301	"pipe"	"clob"	0	0	5304	NULL	true	4	NULL
5302	"mal"	"int"	32	0	5304	NULL	true	5	NULL
5303	"optimize"	"bigint"	64	0	5304	NULL	true	6	NULL
5306	"id"	"oid"	31	0	5316	NULL	true	0	NULL
5307	"start"	"timestamp"	7	0	5316	NULL	true	1	NULL
5308	"stop"	"timestamp"	7	0	5316	NULL	true	2	NULL
5309	"arguments"	"clob"	0	0	5316	NULL	true	3	NULL
5310	"tuples"	"wrd"	32	0	5316	NULL	true	4	NULL
5311	"run"	"bigint"	64	0	5316	NULL	true	5	NULL
5312	"ship"	"bigint"	64	0	5316	NULL	true	6	NULL
5313	"cpu"	"int"	32	0	5316	NULL	true	7	NULL
5314	"io"	"int"	32	0	5316	NULL	true	8	NULL
5315	"space"	"bigint"	64	0	5316	NULL	true	9	NULL
5318	"id"	"oid"	31	0	5334	NULL	true	0	NULL
5319	"owner"	"clob"	0	0	5334	NULL	true	1	NULL
5320	"defined"	"timestamp"	7	0	5334	NULL	true	2	NULL
5321	"query"	"clob"	0	0	5334	NULL	true	3	NULL
5322	"pipe"	"clob"	0	0	5334	NULL	true	4	NULL
5323	"mal"	"int"	32	0	5334	NULL	true	5	NULL
5324	"optimize"	"bigint"	64	0	5334	NULL	true	6	NULL
5325	"start"	"timestamp"	7	0	5334	NULL	true	7	NULL
5326	"stop"	"timestamp"	7	0	5334	NULL	true	8	NULL
5327	"arguments"	"clob"	0	0	5334	NULL	true	9	NULL
5328	"tuples"	"wrd"	32	0	5334	NULL	true	10	NULL
5329	"run"	"bigint"	64	0	5334	NULL	true	11	NULL
5330	"ship"	"bigint"	64	0	5334	NULL	true	12	NULL
5331	"cpu"	"int"	32	0	5334	NULL	true	13	NULL
5332	"space"	"bigint"	64	0	5334	NULL	true	14	NULL
5333	"io"	"int"	32	0	5334	NULL	true	15	NULL
5345	"event"	"int"	32	0	5344	NULL	true	0	NULL
5346	"clk"	"varchar"	20	0	5344	NULL	true	1	NULL
5347	"pc"	"varchar"	50	0	5344	NULL	true	2	NULL
5348	"thread"	"int"	32	0	5344	NULL	true	3	NULL
5349	"user"	"int"	32	0	5344	NULL	true	4	NULL
5350	"ticks"	"bigint"	64	0	5344	NULL	true	5	NULL
5351	"reads"	"bigint"	64	0	5344	NULL	true	6	NULL
5352	"writes"	"bigint"	64	0	5344	NULL	true	7	NULL
5353	"rbytes"	"bigint"	64	0	5344	NULL	true	8	NULL
5354	"wbytes"	"bigint"	64	0	5344	NULL	true	9	NULL
5355	"type"	"clob"	0	0	5344	NULL	true	10	NULL
5356	"stmt"	"clob"	0	0	5344	NULL	true	11	NULL
5361	"event"	"int"	32	0	5373	NULL	true	0	NULL
5362	"clk"	"varchar"	20	0	5373	NULL	true	1	NULL
5363	"pc"	"varchar"	50	0	5373	NULL	true	2	NULL
5364	"thread"	"int"	32	0	5373	NULL	true	3	NULL
5365	"user"	"int"	32	0	5373	NULL	true	4	NULL
5366	"ticks"	"bigint"	64	0	5373	NULL	true	5	NULL
5367	"reads"	"bigint"	64	0	5373	NULL	true	6	NULL
5368	"writes"	"bigint"	64	0	5373	NULL	true	7	NULL
5369	"rbytes"	"bigint"	64	0	5373	NULL	true	8	NULL
5370	"wbytes"	"bigint"	64	0	5373	NULL	true	9	NULL
5371	"type"	"clob"	0	0	5373	NULL	true	10	NULL
5372	"stmt"	"clob"	0	0	5373	NULL	true	11	NULL
5421	"sch"	"varchar"	100	0	5420	NULL	true	0	NULL
5422	"usr"	"varchar"	100	0	5420	NULL	true	1	NULL
5423	"dep_type"	"varchar"	32	0	5420	NULL	true	2	NULL
5428	"sch"	"varchar"	100	0	5427	NULL	true	0	NULL
5429	"usr"	"varchar"	100	0	5427	NULL	true	1	NULL
5430	"dep_type"	"varchar"	32	0	5427	NULL	true	2	NULL
5435	"sch"	"varchar"	100	0	5434	NULL	true	0	NULL
5436	"usr"	"varchar"	100	0	5434	NULL	true	1	NULL
5437	"dep_type"	"varchar"	32	0	5434	NULL	true	2	NULL
5442	"sch"	"varchar"	100	0	5441	NULL	true	0	NULL
5443	"usr"	"varchar"	100	0	5441	NULL	true	1	NULL
5444	"dep_type"	"varchar"	32	0	5441	NULL	true	2	NULL
5449	"sch"	"varchar"	100	0	5448	NULL	true	0	NULL
5450	"usr"	"varchar"	100	0	5448	NULL	true	1	NULL
5451	"dep_type"	"varchar"	32	0	5448	NULL	true	2	NULL
5456	"sch"	"varchar"	100	0	5455	NULL	true	0	NULL
5457	"usr"	"varchar"	100	0	5455	NULL	true	1	NULL
5458	"dep_type"	"varchar"	32	0	5455	NULL	true	2	NULL
5463	"sch"	"varchar"	100	0	5462	NULL	true	0	NULL
5464	"usr"	"varchar"	100	0	5462	NULL	true	1	NULL
5465	"dep_type"	"varchar"	32	0	5462	NULL	true	2	NULL
5470	"sch"	"varchar"	100	0	5469	NULL	true	0	NULL
5471	"usr"	"varchar"	100	0	5469	NULL	true	1	NULL
5472	"dep_type"	"varchar"	32	0	5469	NULL	true	2	NULL
5477	"sch"	"varchar"	100	0	5476	NULL	true	0	NULL
5478	"usr"	"varchar"	100	0	5476	NULL	true	1	NULL
5479	"dep_type"	"varchar"	32	0	5476	NULL	true	2	NULL
5484	"sch"	"varchar"	100	0	5483	NULL	true	0	NULL
5485	"usr"	"varchar"	100	0	5483	NULL	true	1	NULL
5486	"dep_type"	"varchar"	32	0	5483	NULL	true	2	NULL
5491	"sch"	"varchar"	100	0	5490	NULL	true	0	NULL
5492	"usr"	"varchar"	100	0	5490	NULL	true	1	NULL
5493	"dep_type"	"varchar"	32	0	5490	NULL	true	2	NULL
5498	"sch"	"varchar"	100	0	5497	NULL	true	0	NULL
5499	"usr"	"varchar"	100	0	5497	NULL	true	1	NULL
5500	"dep_type"	"varchar"	32	0	5497	NULL	true	2	NULL
5505	"sch"	"varchar"	100	0	5504	NULL	true	0	NULL
5506	"usr"	"varchar"	100	0	5504	NULL	true	1	NULL
5507	"dep_type"	"varchar"	32	0	5504	NULL	true	2	NULL
5512	"sch"	"varchar"	100	0	5511	NULL	true	0	NULL
5513	"usr"	"varchar"	100	0	5511	NULL	true	1	NULL
5514	"dep_type"	"varchar"	32	0	5511	NULL	true	2	NULL
5519	"sch"	"varchar"	100	0	5518	NULL	true	0	NULL
5520	"usr"	"varchar"	100	0	5518	NULL	true	1	NULL
5521	"dep_type"	"varchar"	32	0	5518	NULL	true	2	NULL
5526	"sch"	"varchar"	100	0	5525	NULL	true	0	NULL
5527	"usr"	"varchar"	100	0	5525	NULL	true	1	NULL
5528	"dep_type"	"varchar"	32	0	5525	NULL	true	2	NULL
5533	"sch"	"varchar"	100	0	5532	NULL	true	0	NULL
5534	"usr"	"varchar"	100	0	5532	NULL	true	1	NULL
5535	"dep_type"	"varchar"	32	0	5532	NULL	true	2	NULL
5544	"user"	"clob"	0	0	5543	NULL	true	0	NULL
5545	"login"	"timestamp"	7	0	5543	NULL	true	1	NULL
5546	"sessiontimeout"	"bigint"	64	0	5543	NULL	true	2	NULL
5547	"lastcommand"	"timestamp"	7	0	5543	NULL	true	3	NULL
5548	"querytimeout"	"bigint"	64	0	5543	NULL	true	4	NULL
5549	"active"	"boolean"	1	0	5543	NULL	true	5	NULL
5554	"user"	"clob"	0	0	5560	NULL	true	0	NULL
5555	"login"	"timestamp"	7	0	5560	NULL	true	1	NULL
5556	"sessiontimeout"	"bigint"	64	0	5560	NULL	true	2	NULL
5557	"lastcommand"	"timestamp"	7	0	5560	NULL	true	3	NULL
5558	"querytimeout"	"bigint"	64	0	5560	NULL	true	4	NULL
5559	"active"	"boolean"	1	0	5560	NULL	true	5	NULL
5621	"rewrite"	"clob"	0	0	5620	NULL	true	0	NULL
5622	"count"	"int"	32	0	5620	NULL	true	1	NULL
5627	"query"	"clob"	0	0	5626	NULL	true	0	NULL
5628	"count"	"int"	32	0	5626	NULL	true	1	NULL
5636	"name"	"clob"	0	0	5635	NULL	true	0	NULL
5637	"def"	"clob"	0	0	5635	NULL	true	1	NULL
5638	"status"	"clob"	0	0	5635	NULL	true	2	NULL
5643	"name"	"clob"	0	0	5646	NULL	true	0	NULL
5644	"def"	"clob"	0	0	5646	NULL	true	1	NULL
5645	"status"	"clob"	0	0	5646	NULL	true	2	NULL
5648	"name"	"clob"	0	0	5647	NULL	true	0	NULL
5649	"value"	"clob"	0	0	5647	NULL	true	1	NULL
5654	"name"	"clob"	0	0	5656	NULL	true	0	NULL
5655	"value"	"clob"	0	0	5656	NULL	true	1	NULL
5658	"id"	"int"	32	0	5657	NULL	true	0	NULL
5659	"name"	"clob"	0	0	5657	NULL	true	1	NULL
5660	"htype"	"clob"	0	0	5657	NULL	true	2	NULL
5661	"ttype"	"clob"	0	0	5657	NULL	true	3	NULL
5662	"count"	"bigint"	64	0	5657	NULL	true	4	NULL
5663	"refcnt"	"int"	32	0	5657	NULL	true	5	NULL
5664	"lrefcnt"	"int"	32	0	5657	NULL	true	6	NULL
5665	"location"	"clob"	0	0	5657	NULL	true	7	NULL
5666	"heat"	"int"	32	0	5657	NULL	true	8	NULL
5667	"dirty"	"clob"	0	0	5657	NULL	true	9	NULL
5668	"status"	"clob"	0	0	5657	NULL	true	10	NULL
5669	"kind"	"clob"	0	0	5657	NULL	true	11	NULL
5678	"qtag"	"bigint"	64	0	5677	NULL	true	0	NULL
5679	"user"	"clob"	0	0	5677	NULL	true	1	NULL
5680	"started"	"timestamp"	7	0	5677	NULL	true	2	NULL
5681	"estimate"	"timestamp"	7	0	5677	NULL	true	3	NULL
5682	"progress"	"int"	32	0	5677	NULL	true	4	NULL
5683	"status"	"clob"	0	0	5677	NULL	true	5	NULL
5684	"tag"	"oid"	31	0	5677	NULL	true	6	NULL
5685	"query"	"clob"	0	0	5677	NULL	true	7	NULL
5690	"qtag"	"bigint"	64	0	5698	NULL	true	0	NULL
5691	"user"	"clob"	0	0	5698	NULL	true	1	NULL
5692	"started"	"timestamp"	7	0	5698	NULL	true	2	NULL
5693	"estimate"	"timestamp"	7	0	5698	NULL	true	3	NULL
5694	"progress"	"int"	32	0	5698	NULL	true	4	NULL
5695	"status"	"clob"	0	0	5698	NULL	true	5	NULL
5696	"tag"	"oid"	31	0	5698	NULL	true	6	NULL
5697	"query"	"clob"	0	0	5698	NULL	true	7	NULL
6267	"schema"	"clob"	0	0	6266	NULL	true	0	NULL
6268	"table"	"clob"	0	0	6266	NULL	true	1	NULL
6269	"column"	"clob"	0	0	6266	NULL	true	2	NULL
6270	"type"	"clob"	0	0	6266	NULL	true	3	NULL
6271	"location"	"clob"	0	0	6266	NULL	true	4	NULL
6272	"count"	"bigint"	64	0	6266	NULL	true	5	NULL
6273	"typewidth"	"int"	32	0	6266	NULL	true	6	NULL
6274	"columnsize"	"bigint"	64	0	6266	NULL	true	7	NULL
6275	"heapsize"	"bigint"	64	0	6266	NULL	true	8	NULL
6276	"indices"	"bigint"	64	0	6266	NULL	true	9	NULL
6277	"sorted"	"boolean"	1	0	6266	NULL	true	10	NULL
6282	"schema"	"clob"	0	0	6293	NULL	true	0	NULL
6283	"table"	"clob"	0	0	6293	NULL	true	1	NULL
6284	"column"	"clob"	0	0	6293	NULL	true	2	NULL
6285	"type"	"clob"	0	0	6293	NULL	true	3	NULL
6286	"location"	"clob"	0	0	6293	NULL	true	4	NULL
6287	"count"	"bigint"	64	0	6293	NULL	true	5	NULL
6288	"typewidth"	"int"	32	0	6293	NULL	true	6	NULL
6289	"columnsize"	"bigint"	64	0	6293	NULL	true	7	NULL
6290	"heapsize"	"bigint"	64	0	6293	NULL	true	8	NULL
6291	"indices"	"bigint"	64	0	6293	NULL	true	9	NULL
6292	"sorted"	"boolean"	1	0	6293	NULL	true	10	NULL
6295	"schema"	"clob"	0	0	6305	NULL	true	0	NULL
6296	"table"	"clob"	0	0	6305	NULL	true	1	NULL
6297	"column"	"clob"	0	0	6305	NULL	true	2	NULL
6298	"type"	"clob"	0	0	6305	NULL	true	3	NULL
6299	"typewidth"	"int"	32	0	6305	NULL	true	4	NULL
6300	"count"	"bigint"	64	0	6305	NULL	true	5	NULL
6301	"distinct"	"bigint"	64	0	6305	NULL	true	6	NULL
6302	"atomwidth"	"int"	32	0	6305	NULL	true	7	NULL
6303	"reference"	"boolean"	1	0	6305	NULL	true	8	NULL
6304	"sorted"	"boolean"	1	0	6305	NULL	true	9	NULL
6326	"schema"	"clob"	0	0	6325	NULL	true	0	NULL
6327	"table"	"clob"	0	0	6325	NULL	true	1	NULL
6328	"column"	"clob"	0	0	6325	NULL	true	2	NULL
6329	"type"	"clob"	0	0	6325	NULL	true	3	NULL
6330	"count"	"bigint"	64	0	6325	NULL	true	4	NULL
6331	"columnsize"	"bigint"	64	0	6325	NULL	true	5	NULL
6332	"heapsize"	"bigint"	64	0	6325	NULL	true	6	NULL
6333	"indices"	"bigint"	64	0	6325	NULL	true	7	NULL
6334	"sorted"	"boolean"	1	0	6325	NULL	true	8	NULL
6339	"schema"	"clob"	0	0	6348	NULL	true	0	NULL
6340	"table"	"clob"	0	0	6348	NULL	true	1	NULL
6341	"column"	"clob"	0	0	6348	NULL	true	2	NULL
6342	"type"	"clob"	0	0	6348	NULL	true	3	NULL
6343	"count"	"bigint"	64	0	6348	NULL	true	4	NULL
6344	"columnsize"	"bigint"	64	0	6348	NULL	true	5	NULL
6345	"heapsize"	"bigint"	64	0	6348	NULL	true	6	NULL
6346	"indices"	"bigint"	64	0	6348	NULL	true	7	NULL
6347	"sorted"	"boolean"	1	0	6348	NULL	true	8	NULL
6350	"schema"	"clob"	0	0	6357	NULL	true	0	NULL
6351	"table"	"clob"	0	0	6357	NULL	true	1	NULL
6352	"count"	"bigint"	64	0	6357	NULL	true	2	NULL
6353	"columnsize"	"bigint"	64	0	6357	NULL	true	3	NULL
6354	"heapsize"	"bigint"	64	0	6357	NULL	true	4	NULL
6355	"indices"	"bigint"	64	0	6357	NULL	true	5	NULL
6356	"auxillary"	"bigint"	53	0	6357	NULL	true	6	NULL
6359	"schema"	"clob"	0	0	6372	NULL	true	0	NULL
6360	"table"	"clob"	0	0	6372	NULL	true	1	NULL
6361	"column"	"clob"	0	0	6372	NULL	true	2	NULL
6362	"type"	"clob"	0	0	6372	NULL	true	3	NULL
6363	"width"	"int"	32	0	6372	NULL	true	4	NULL
6364	"stamp"	"timestamp"	7	0	6372	NULL	true	5	NULL
6365	"sample"	"bigint"	64	0	6372	NULL	true	6	NULL
6366	"count"	"bigint"	64	0	6372	NULL	true	7	NULL
6367	"unique"	"bigint"	64	0	6372	NULL	true	8	NULL
6368	"nils"	"bigint"	64	0	6372	NULL	true	9	NULL
6369	"minval"	"clob"	0	0	6372	NULL	true	10	NULL
6370	"maxval"	"clob"	0	0	6372	NULL	true	11	NULL
6371	"sorted"	"boolean"	1	0	6372	NULL	true	12	NULL
6425	"function_id"	"int"	32	0	6426	NULL	true	0	NULL
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."_tables" (
	"id"            INTEGER,
	"name"          VARCHAR(1024),
	"schema_id"     INTEGER,
	"query"         VARCHAR(2048),
	"type"          SMALLINT,
	"system"        BOOLEAN,
	"commit_action" SMALLINT,
	"readonly"      BOOLEAN
);
COPY 72 RECORDS INTO "sys"."_tables" FROM stdin USING DELIMITERS '\t','\n','"';
2001	"schemas"	2000	NULL	0	true	0	false
2007	"types"	2000	NULL	0	true	0	false
2016	"functions"	2000	NULL	0	true	0	false
2025	"args"	2000	NULL	0	true	0	false
2033	"sequences"	2000	NULL	0	true	0	false
2043	"dependencies"	2000	NULL	0	true	0	false
2047	"connections"	2000	NULL	0	true	0	false
2056	"_tables"	2000	NULL	0	true	0	false
2065	"_columns"	2000	NULL	0	true	0	false
2076	"keys"	2000	NULL	0	true	0	false
2083	"idxs"	2000	NULL	0	true	0	false
2088	"triggers"	2000	NULL	0	true	0	false
2099	"objects"	2000	NULL	0	true	0	false
2104	"_tables"	2103	NULL	0	true	2	false
2113	"_columns"	2103	NULL	0	true	2	false
2124	"keys"	2103	NULL	0	true	2	false
2131	"idxs"	2103	NULL	0	true	2	false
2136	"triggers"	2103	NULL	0	true	2	false
2147	"objects"	2103	NULL	0	true	2	false
5078	"tables"	2000	"SELECT * FROM (SELECT p.*, 0 AS \"temporary\" FROM \"sys\".\"_tables\" AS p UNION ALL SELECT t.*, 1 AS \"temporary\" FROM \"tmp\".\"_tables\" AS t) AS tables where tables.type <> 2;"	1	true	0	false
5088	"columns"	2000	"SELECT * FROM (SELECT p.* FROM \"sys\".\"_columns\" AS p UNION ALL SELECT t.* FROM \"tmp\".\"_columns\" AS t) AS columns;"	1	true	0	false
5099	"#env"	2000	NULL	2	true	0	false
5104	"#var"	2000	NULL	2	true	0	false
5108	"db_user_info"	2000	NULL	0	true	0	false
5112	"#db_users"	2000	NULL	2	true	0	false
5116	"users"	2000	"SELECT u.\"name\" AS \"name\", ui.\"fullname\", ui.\"default_schema\" FROM db_users() AS u LEFT JOIN \"sys\".\"db_user_info\" AS ui ON u.\"name\" = ui.\"name\" ;"	1	true	0	false
5120	"user_role"	2000	NULL	0	true	0	false
5123	"auths"	2000	NULL	0	true	0	false
5127	"privileges"	2000	NULL	0	true	0	false
5271	"#querylog_catalog"	2000	NULL	2	true	0	false
5282	"#querylog_calls"	2000	NULL	2	true	0	false
5304	"querylog_catalog"	2000	"-- create table views for convenience\ncreate view sys.querylog_catalog as select * from sys.querylog_catalog();"	1	true	0	false
5316	"querylog_calls"	2000	"create view sys.querylog_calls as select * from sys.querylog_calls();"	1	true	0	false
5334	"querylog_history"	2000	"create view sys.querylog_history as\nselect qd.*, ql.\"start\",ql.\"stop\", ql.arguments, ql.tuples, ql.run, ql.ship, ql.cpu, ql.space, ql.io \nfrom sys.querylog_catalog() qd, sys.querylog_calls() ql\nwhere qd.id = ql.id and qd.owner = user;"	1	true	0	false
5344	"#tracelog"	2000	NULL	2	true	0	false
5373	"tracelog"	2000	"create view sys.tracelog as select * from sys.tracelog();"	1	true	0	false
5420	"#dependencies_schemas_on_users"	2000	NULL	2	true	0	false
5427	"#dependencies_owners_on_schemas"	2000	NULL	2	true	0	false
5434	"#dependencies_tables_on_views"	2000	NULL	2	true	0	false
5441	"#dependencies_tables_on_indexes"	2000	NULL	2	true	0	false
5448	"#dependencies_tables_on_triggers"	2000	NULL	2	true	0	false
5455	"#dependencies_tables_on_foreignkeys"	2000	NULL	2	true	0	false
5462	"#dependencies_tables_on_functions"	2000	NULL	2	true	0	false
5469	"#dependencies_columns_on_views"	2000	NULL	2	true	0	false
5476	"#dependencies_columns_on_keys"	2000	NULL	2	true	0	false
5483	"#dependencies_columns_on_indexes"	2000	NULL	2	true	0	false
5490	"#dependencies_columns_on_functions"	2000	NULL	2	true	0	false
5497	"#dependencies_columns_on_triggers"	2000	NULL	2	true	0	false
5504	"#dependencies_views_on_functions"	2000	NULL	2	true	0	false
5511	"#dependencies_views_on_triggers"	2000	NULL	2	true	0	false
5518	"#dependencies_functions_on_functions"	2000	NULL	2	true	0	false
5525	"#dependencies_functions_os_triggers"	2000	NULL	2	true	0	false
5532	"#dependencies_keys_on_foreignkeys"	2000	NULL	2	true	0	false
5543	"#sessions"	2000	NULL	2	true	0	false
5560	"sessions"	2000	"create view sys.sessions as select * from sys.sessions();"	1	true	0	false
5620	"#optimizer_stats"	2000	NULL	2	true	0	false
5626	"#querycache"	2000	NULL	2	true	0	false
5635	"#optimizers"	2000	NULL	2	true	0	false
5646	"optimizers"	2000	"create view sys.optimizers as select * from sys.optimizers();"	1	true	0	false
5647	"#environment"	2000	NULL	2	true	0	false
5656	"environment"	2000	"create view sys.environment as select * from sys.environment();"	1	true	0	false
5657	"#bbp"	2000	NULL	2	true	0	false
5677	"#queue"	2000	NULL	2	true	0	false
5698	"queue"	2000	"create view sys.queue as select * from sys.queue();"	1	true	0	false
6266	"#storage"	2000	NULL	2	true	0	false
6293	"storage"	2000	"create view sys.storage as select * from sys.storage();"	1	true	0	false
6305	"storagemodelinput"	2000	NULL	0	true	0	false
6325	"#storagemodel"	2000	NULL	2	true	0	false
6348	"storagemodel"	2000	"create view sys.storagemodel as select * from sys.storagemodel();"	1	true	0	false
6357	"tablestoragemodel"	2000	"-- A summary of the table storage requirement is is available as a table view.\n-- The auxillary column denotes the maximum space if all non-sorted columns\n-- would be augmented with a hash (rare situation)\ncreate view sys.tablestoragemodel\nas select \"schema\",\"table\",max(count) as \"count\",\n\tsum(columnsize) as columnsize,\n\tsum(heapsize) as heapsize,\n\tsum(indices) as indices,\n\tsum(case when sorted = false then 8 * count else 0 end) as auxillary\nfrom sys.storagemodel() group by \"schema\",\"table\";"	1	true	0	false
6372	"statistics"	2000	NULL	0	true	0	false
6426	"systemfunctions"	2000	NULL	0	true	0	false
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."args" (
	"id"          INTEGER,
	"func_id"     INTEGER,
	"name"        VARCHAR(256),
	"type"        VARCHAR(1024),
	"type_digits" INTEGER,
	"type_scale"  INTEGER,
	"number"      INTEGER
);
COPY 3426 RECORDS INTO "sys"."args" FROM stdin USING DELIMITERS '\t','\n','"';
2152	28	"result"	"oid"	31	0	0
2153	28	"arg_1"	"wrd"	32	0	1
2154	29	"result"	"oid"	31	0	0
2155	29	"arg_1"	"oid"	31	0	1
2156	30	"result"	"wrd"	32	0	0
2157	30	"arg_1"	"any"	0	0	1
2158	31	"result"	"wrd"	32	0	0
2159	31	"arg_1"	"wrd"	32	0	1
2160	31	"arg_2"	"int"	32	0	2
2161	31	"arg_3"	"any"	0	0	3
2162	32	"result"	"boolean"	1	0	0
2163	32	"arg_1"	"any"	0	0	1
2164	32	"arg_2"	"any"	0	0	2
2165	33	"result"	"boolean"	1	0	0
2166	33	"arg_1"	"any"	0	0	1
2167	33	"arg_2"	"any"	0	0	2
2168	34	"result"	"boolean"	1	0	0
2169	34	"arg_1"	"any"	0	0	1
2170	35	"result"	"boolean"	1	0	0
2171	35	"arg_1"	"any"	0	0	1
2172	35	"arg_2"	"any"	0	0	2
2173	36	"result"	"boolean"	1	0	0
2174	36	"arg_1"	"any"	0	0	1
2175	36	"arg_2"	"any"	0	0	2
2176	37	"result"	"boolean"	1	0	0
2177	37	"arg_1"	"any"	0	0	1
2178	37	"arg_2"	"any"	0	0	2
2179	38	"result"	"boolean"	1	0	0
2180	38	"arg_1"	"any"	0	0	1
2181	38	"arg_2"	"any"	0	0	2
2182	42	"result"	"boolean"	1	0	0
2183	42	"arg_1"	"any"	0	0	1
2184	42	"arg_2"	"any"	0	0	2
2185	43	"result"	"oid"	31	0	0
2186	43	"arg_1"	"any"	0	0	1
2187	44	"result"	"int"	32	0	0
2188	44	"arg_1"	"any"	0	0	1
2189	45	"result"	"oid"	31	0	0
2190	45	"arg_1"	"any"	0	0	1
2191	45	"arg_2"	"varchar"	0	0	2
2192	45	"arg_3"	"varchar"	0	0	3
2193	48	"result"	"any"	0	0	0
2194	48	"arg_1"	"any"	0	0	1
2195	48	"arg_2"	"any"	0	0	2
2196	49	"result"	"any"	0	0	0
2197	49	"arg_1"	"any"	0	0	1
2198	49	"arg_2"	"any"	0	0	2
2199	50	"result"	"any"	0	0	0
2200	50	"arg_1"	"boolean"	1	0	1
2201	50	"arg_2"	"any"	0	0	2
2202	50	"arg_3"	"any"	0	0	3
2203	68	"result"	"tinyint"	8	0	0
2204	68	"arg_1"	"tinyint"	8	0	1
2205	68	"arg_2"	"tinyint"	8	0	2
2206	69	"result"	"smallint"	16	0	0
2207	69	"arg_1"	"smallint"	16	0	1
2208	69	"arg_2"	"smallint"	16	0	2
2209	70	"result"	"int"	32	0	0
2210	70	"arg_1"	"int"	32	0	1
2211	70	"arg_2"	"int"	32	0	2
2212	71	"result"	"oid"	31	0	0
2213	71	"arg_1"	"oid"	31	0	1
2214	71	"arg_2"	"oid"	31	0	2
2215	72	"result"	"wrd"	32	0	0
2216	72	"arg_1"	"wrd"	32	0	1
2217	72	"arg_2"	"wrd"	32	0	2
2218	73	"result"	"bigint"	64	0	0
2219	73	"arg_1"	"bigint"	64	0	1
2220	73	"arg_2"	"bigint"	64	0	2
2221	74	"result"	"decimal"	2	0	0
2222	74	"arg_1"	"decimal"	2	0	1
2223	74	"arg_2"	"decimal"	2	0	2
2224	75	"result"	"decimal"	4	0	0
2225	75	"arg_1"	"decimal"	4	0	1
2226	75	"arg_2"	"decimal"	4	0	2
2227	76	"result"	"decimal"	9	0	0
2228	76	"arg_1"	"decimal"	9	0	1
2229	76	"arg_2"	"decimal"	9	0	2
2230	77	"result"	"decimal"	19	0	0
2231	77	"arg_1"	"decimal"	19	0	1
2232	77	"arg_2"	"decimal"	19	0	2
2233	78	"result"	"real"	24	0	0
2234	78	"arg_1"	"real"	24	0	1
2235	78	"arg_2"	"real"	24	0	2
2236	79	"result"	"double"	53	0	0
2237	79	"arg_1"	"double"	53	0	1
2238	79	"arg_2"	"double"	53	0	2
2239	87	"result"	"int"	32	0	0
2240	87	"arg_1"	"any"	0	0	1
2241	88	"result"	"int"	32	0	0
2242	88	"arg_1"	"any"	0	0	1
2243	89	"result"	"int"	32	0	0
2244	89	"arg_1"	"any"	0	0	1
2245	90	"result"	"any"	0	0	0
2246	90	"arg_1"	"any"	0	0	1
2247	91	"result"	"int"	32	0	0
2248	91	"arg_1"	"any"	0	0	1
2249	92	"result"	"int"	32	0	0
2250	92	"arg_1"	"any"	0	0	1
2251	92	"arg_2"	"oid"	31	0	2
2252	92	"arg_3"	"any"	0	0	3
2253	93	"result"	"int"	32	0	0
2254	93	"arg_1"	"any"	0	0	1
2255	93	"arg_2"	"oid"	31	0	2
2256	93	"arg_3"	"any"	0	0	3
2257	94	"result"	"int"	32	0	0
2258	94	"arg_1"	"any"	0	0	1
2259	94	"arg_2"	"oid"	31	0	2
2260	94	"arg_3"	"any"	0	0	3
2261	95	"result"	"any"	0	0	0
2262	95	"arg_1"	"any"	0	0	1
2263	95	"arg_2"	"oid"	31	0	2
2264	95	"arg_3"	"any"	0	0	3
2265	96	"result"	"int"	32	0	0
2266	96	"arg_1"	"any"	0	0	1
2267	96	"arg_2"	"oid"	31	0	2
2268	96	"arg_3"	"any"	0	0	3
2269	97	"result"	"int"	32	0	0
2270	97	"arg_1"	"any"	0	0	1
2271	97	"arg_2"	"oid"	31	0	2
2272	97	"arg_3"	"oid"	31	0	3
2273	97	"arg_4"	"oid"	31	0	4
2274	98	"result"	"int"	32	0	0
2275	98	"arg_1"	"any"	0	0	1
2276	98	"arg_2"	"oid"	31	0	2
2277	98	"arg_3"	"oid"	31	0	3
2278	98	"arg_4"	"oid"	31	0	4
2279	99	"result"	"int"	32	0	0
2280	99	"arg_1"	"any"	0	0	1
2281	99	"arg_2"	"oid"	31	0	2
2282	99	"arg_3"	"oid"	31	0	3
2283	99	"arg_4"	"oid"	31	0	4
2284	100	"result"	"any"	0	0	0
2285	100	"arg_1"	"any"	0	0	1
2286	100	"arg_2"	"oid"	31	0	2
2287	100	"arg_3"	"oid"	31	0	3
2288	100	"arg_4"	"oid"	31	0	4
2289	101	"result"	"int"	32	0	0
2290	101	"arg_1"	"any"	0	0	1
2291	101	"arg_2"	"oid"	31	0	2
2292	101	"arg_3"	"oid"	31	0	3
2293	101	"arg_4"	"oid"	31	0	4
2294	102	"result"	"any"	0	0	0
2295	102	"arg_1"	"any"	0	0	1
2296	103	"result"	"any"	0	0	0
2297	103	"arg_1"	"any"	0	0	1
2298	104	"result"	"any"	0	0	0
2299	104	"arg_1"	"any"	0	0	1
2300	104	"arg_2"	"int"	32	0	2
2301	105	"result"	"any"	0	0	0
2302	105	"arg_1"	"any"	0	0	1
2303	105	"arg_2"	"int"	32	0	2
2304	106	"result"	"any"	0	0	0
2305	106	"arg_1"	"any"	0	0	1
2306	106	"arg_2"	"oid"	31	0	2
2307	106	"arg_3"	"oid"	31	0	3
2308	107	"result"	"any"	0	0	0
2309	107	"arg_1"	"any"	0	0	1
2310	107	"arg_2"	"oid"	31	0	2
2311	107	"arg_3"	"oid"	31	0	3
2312	108	"result"	"any"	0	0	0
2313	108	"arg_1"	"any"	0	0	1
2314	108	"arg_2"	"int"	32	0	2
2315	108	"arg_3"	"oid"	31	0	3
2316	108	"arg_4"	"oid"	31	0	4
2317	109	"result"	"any"	0	0	0
2318	109	"arg_1"	"any"	0	0	1
2319	109	"arg_2"	"int"	32	0	2
2320	109	"arg_3"	"oid"	31	0	3
2321	109	"arg_4"	"oid"	31	0	4
2322	110	"result"	"boolean"	1	0	0
2323	110	"arg_1"	"boolean"	1	0	1
2324	110	"arg_2"	"boolean"	1	0	2
2325	111	"result"	"boolean"	1	0	0
2326	111	"arg_1"	"boolean"	1	0	1
2327	111	"arg_2"	"boolean"	1	0	2
2328	112	"result"	"boolean"	1	0	0
2329	112	"arg_1"	"boolean"	1	0	1
2330	112	"arg_2"	"boolean"	1	0	2
2331	113	"result"	"boolean"	1	0	0
2332	113	"arg_1"	"boolean"	1	0	1
2333	114	"result"	"tinyint"	8	0	0
2334	114	"arg_1"	"tinyint"	8	0	1
2335	114	"arg_2"	"tinyint"	8	0	2
2336	115	"result"	"tinyint"	8	0	0
2337	115	"arg_1"	"tinyint"	8	0	1
2338	115	"arg_2"	"tinyint"	8	0	2
2339	116	"result"	"tinyint"	8	0	0
2340	116	"arg_1"	"tinyint"	8	0	1
2341	116	"arg_2"	"tinyint"	8	0	2
2342	117	"result"	"tinyint"	8	0	0
2343	117	"arg_1"	"tinyint"	8	0	1
2344	117	"arg_2"	"tinyint"	8	0	2
2345	118	"result"	"tinyint"	8	0	0
2346	118	"arg_1"	"tinyint"	8	0	1
2347	118	"arg_2"	"tinyint"	8	0	2
2348	119	"result"	"tinyint"	8	0	0
2349	119	"arg_1"	"tinyint"	8	0	1
2350	119	"arg_2"	"tinyint"	8	0	2
2351	120	"result"	"tinyint"	8	0	0
2352	120	"arg_1"	"tinyint"	8	0	1
2353	120	"arg_2"	"tinyint"	8	0	2
2354	121	"result"	"tinyint"	8	0	0
2355	121	"arg_1"	"tinyint"	8	0	1
2356	122	"result"	"tinyint"	8	0	0
2357	122	"arg_1"	"tinyint"	8	0	1
2358	122	"arg_2"	"int"	32	0	2
2359	123	"result"	"tinyint"	8	0	0
2360	123	"arg_1"	"tinyint"	8	0	1
2361	123	"arg_2"	"int"	32	0	2
2362	124	"result"	"tinyint"	8	0	0
2363	124	"arg_1"	"tinyint"	8	0	1
2364	125	"result"	"tinyint"	8	0	0
2365	125	"arg_1"	"tinyint"	8	0	1
2366	126	"result"	"tinyint"	8	0	0
2367	126	"arg_1"	"tinyint"	8	0	1
2368	127	"result"	"tinyint"	8	0	0
2369	127	"arg_1"	"tinyint"	8	0	1
2370	127	"arg_2"	"tinyint"	8	0	2
2371	128	"result"	"tinyint"	8	0	0
2372	128	"arg_1"	"tinyint"	8	0	1
2373	128	"arg_2"	"tinyint"	8	0	2
2374	129	"result"	"month_interval"	32	0	0
2375	129	"arg_1"	"month_interval"	32	0	1
2376	129	"arg_2"	"tinyint"	8	0	2
2377	130	"result"	"month_interval"	32	0	0
2378	130	"arg_1"	"month_interval"	32	0	1
2379	130	"arg_2"	"tinyint"	8	0	2
2380	131	"result"	"month_interval"	32	0	0
2381	131	"arg_1"	"month_interval"	32	0	1
2382	131	"arg_2"	"tinyint"	8	0	2
2383	132	"result"	"month_interval"	32	0	0
2384	132	"arg_1"	"month_interval"	32	0	1
2385	132	"arg_2"	"tinyint"	8	0	2
2386	133	"result"	"sec_interval"	19	0	0
2387	133	"arg_1"	"sec_interval"	19	0	1
2388	133	"arg_2"	"tinyint"	8	0	2
2389	134	"result"	"sec_interval"	19	0	0
2390	134	"arg_1"	"sec_interval"	19	0	1
2391	134	"arg_2"	"tinyint"	8	0	2
2392	135	"result"	"sec_interval"	19	0	0
2393	135	"arg_1"	"sec_interval"	19	0	1
2394	135	"arg_2"	"tinyint"	8	0	2
2395	136	"result"	"sec_interval"	19	0	0
2396	136	"arg_1"	"sec_interval"	19	0	1
2397	136	"arg_2"	"tinyint"	8	0	2
2398	137	"result"	"smallint"	16	0	0
2399	137	"arg_1"	"smallint"	16	0	1
2400	137	"arg_2"	"smallint"	16	0	2
2401	138	"result"	"smallint"	16	0	0
2402	138	"arg_1"	"smallint"	16	0	1
2403	138	"arg_2"	"smallint"	16	0	2
2404	139	"result"	"smallint"	16	0	0
2405	139	"arg_1"	"smallint"	16	0	1
2406	139	"arg_2"	"smallint"	16	0	2
2407	140	"result"	"smallint"	16	0	0
2408	140	"arg_1"	"smallint"	16	0	1
2409	140	"arg_2"	"smallint"	16	0	2
2410	141	"result"	"smallint"	16	0	0
2411	141	"arg_1"	"smallint"	16	0	1
2412	141	"arg_2"	"smallint"	16	0	2
2413	142	"result"	"smallint"	16	0	0
2414	142	"arg_1"	"smallint"	16	0	1
2415	142	"arg_2"	"smallint"	16	0	2
2416	143	"result"	"smallint"	16	0	0
2417	143	"arg_1"	"smallint"	16	0	1
2418	143	"arg_2"	"smallint"	16	0	2
2419	144	"result"	"smallint"	16	0	0
2420	144	"arg_1"	"smallint"	16	0	1
2421	145	"result"	"smallint"	16	0	0
2422	145	"arg_1"	"smallint"	16	0	1
2423	145	"arg_2"	"int"	32	0	2
2424	146	"result"	"smallint"	16	0	0
2425	146	"arg_1"	"smallint"	16	0	1
2426	146	"arg_2"	"int"	32	0	2
2427	147	"result"	"smallint"	16	0	0
2428	147	"arg_1"	"smallint"	16	0	1
2429	148	"result"	"smallint"	16	0	0
2430	148	"arg_1"	"smallint"	16	0	1
2431	149	"result"	"tinyint"	8	0	0
2432	149	"arg_1"	"smallint"	16	0	1
2433	150	"result"	"smallint"	16	0	0
2434	150	"arg_1"	"smallint"	16	0	1
2435	150	"arg_2"	"smallint"	16	0	2
2436	151	"result"	"smallint"	16	0	0
2437	151	"arg_1"	"smallint"	16	0	1
2438	151	"arg_2"	"smallint"	16	0	2
2439	152	"result"	"month_interval"	32	0	0
2440	152	"arg_1"	"month_interval"	32	0	1
2441	152	"arg_2"	"smallint"	16	0	2
2442	153	"result"	"month_interval"	32	0	0
2443	153	"arg_1"	"month_interval"	32	0	1
2444	153	"arg_2"	"smallint"	16	0	2
2445	154	"result"	"month_interval"	32	0	0
2446	154	"arg_1"	"month_interval"	32	0	1
2447	154	"arg_2"	"smallint"	16	0	2
2448	155	"result"	"month_interval"	32	0	0
2449	155	"arg_1"	"month_interval"	32	0	1
2450	155	"arg_2"	"smallint"	16	0	2
2451	156	"result"	"sec_interval"	19	0	0
2452	156	"arg_1"	"sec_interval"	19	0	1
2453	156	"arg_2"	"smallint"	16	0	2
2454	157	"result"	"sec_interval"	19	0	0
2455	157	"arg_1"	"sec_interval"	19	0	1
2456	157	"arg_2"	"smallint"	16	0	2
2457	158	"result"	"sec_interval"	19	0	0
2458	158	"arg_1"	"sec_interval"	19	0	1
2459	158	"arg_2"	"smallint"	16	0	2
2460	159	"result"	"sec_interval"	19	0	0
2461	159	"arg_1"	"sec_interval"	19	0	1
2462	159	"arg_2"	"smallint"	16	0	2
2463	160	"result"	"int"	32	0	0
2464	160	"arg_1"	"int"	32	0	1
2465	160	"arg_2"	"int"	32	0	2
2466	161	"result"	"int"	32	0	0
2467	161	"arg_1"	"int"	32	0	1
2468	161	"arg_2"	"int"	32	0	2
2469	162	"result"	"int"	32	0	0
2470	162	"arg_1"	"int"	32	0	1
2471	162	"arg_2"	"int"	32	0	2
2472	163	"result"	"int"	32	0	0
2473	163	"arg_1"	"int"	32	0	1
2474	163	"arg_2"	"int"	32	0	2
2475	164	"result"	"int"	32	0	0
2476	164	"arg_1"	"int"	32	0	1
2477	164	"arg_2"	"int"	32	0	2
2478	165	"result"	"int"	32	0	0
2479	165	"arg_1"	"int"	32	0	1
2480	165	"arg_2"	"int"	32	0	2
2481	166	"result"	"int"	32	0	0
2482	166	"arg_1"	"int"	32	0	1
2483	166	"arg_2"	"int"	32	0	2
2484	167	"result"	"int"	32	0	0
2485	167	"arg_1"	"int"	32	0	1
2486	168	"result"	"int"	32	0	0
2487	168	"arg_1"	"int"	32	0	1
2488	168	"arg_2"	"int"	32	0	2
2489	169	"result"	"int"	32	0	0
2490	169	"arg_1"	"int"	32	0	1
2491	169	"arg_2"	"int"	32	0	2
2492	170	"result"	"int"	32	0	0
2493	170	"arg_1"	"int"	32	0	1
2494	171	"result"	"int"	32	0	0
2495	171	"arg_1"	"int"	32	0	1
2496	172	"result"	"tinyint"	8	0	0
2497	172	"arg_1"	"int"	32	0	1
2498	173	"result"	"int"	32	0	0
2499	173	"arg_1"	"int"	32	0	1
2500	173	"arg_2"	"int"	32	0	2
2501	174	"result"	"int"	32	0	0
2502	174	"arg_1"	"int"	32	0	1
2503	174	"arg_2"	"int"	32	0	2
2504	175	"result"	"month_interval"	32	0	0
2505	175	"arg_1"	"month_interval"	32	0	1
2506	175	"arg_2"	"int"	32	0	2
2507	176	"result"	"month_interval"	32	0	0
2508	176	"arg_1"	"month_interval"	32	0	1
2509	176	"arg_2"	"int"	32	0	2
2510	177	"result"	"month_interval"	32	0	0
2511	177	"arg_1"	"month_interval"	32	0	1
2512	177	"arg_2"	"int"	32	0	2
2513	178	"result"	"month_interval"	32	0	0
2514	178	"arg_1"	"month_interval"	32	0	1
2515	178	"arg_2"	"int"	32	0	2
2516	179	"result"	"sec_interval"	19	0	0
2517	179	"arg_1"	"sec_interval"	19	0	1
2518	179	"arg_2"	"int"	32	0	2
2519	180	"result"	"sec_interval"	19	0	0
2520	180	"arg_1"	"sec_interval"	19	0	1
2521	180	"arg_2"	"int"	32	0	2
2522	181	"result"	"sec_interval"	19	0	0
2523	181	"arg_1"	"sec_interval"	19	0	1
2524	181	"arg_2"	"int"	32	0	2
2525	182	"result"	"sec_interval"	19	0	0
2526	182	"arg_1"	"sec_interval"	19	0	1
2527	182	"arg_2"	"int"	32	0	2
2528	183	"result"	"oid"	31	0	0
2529	183	"arg_1"	"oid"	31	0	1
2530	183	"arg_2"	"oid"	31	0	2
2531	184	"result"	"oid"	31	0	0
2532	184	"arg_1"	"oid"	31	0	1
2533	184	"arg_2"	"oid"	31	0	2
2534	185	"result"	"oid"	31	0	0
2535	185	"arg_1"	"oid"	31	0	1
2536	185	"arg_2"	"oid"	31	0	2
2537	186	"result"	"oid"	31	0	0
2538	186	"arg_1"	"oid"	31	0	1
2539	186	"arg_2"	"oid"	31	0	2
2540	187	"result"	"oid"	31	0	0
2541	187	"arg_1"	"oid"	31	0	1
2542	187	"arg_2"	"oid"	31	0	2
2543	188	"result"	"oid"	31	0	0
2544	188	"arg_1"	"oid"	31	0	1
2545	188	"arg_2"	"oid"	31	0	2
2546	189	"result"	"oid"	31	0	0
2547	189	"arg_1"	"oid"	31	0	1
2548	189	"arg_2"	"oid"	31	0	2
2549	190	"result"	"oid"	31	0	0
2550	190	"arg_1"	"oid"	31	0	1
2551	191	"result"	"oid"	31	0	0
2552	191	"arg_1"	"oid"	31	0	1
2553	191	"arg_2"	"int"	32	0	2
2554	192	"result"	"oid"	31	0	0
2555	192	"arg_1"	"oid"	31	0	1
2556	192	"arg_2"	"int"	32	0	2
2557	193	"result"	"oid"	31	0	0
2558	193	"arg_1"	"oid"	31	0	1
2559	194	"result"	"oid"	31	0	0
2560	194	"arg_1"	"oid"	31	0	1
2561	195	"result"	"tinyint"	8	0	0
2562	195	"arg_1"	"oid"	31	0	1
2563	196	"result"	"oid"	31	0	0
2564	196	"arg_1"	"oid"	31	0	1
2565	196	"arg_2"	"oid"	31	0	2
2566	197	"result"	"oid"	31	0	0
2567	197	"arg_1"	"oid"	31	0	1
2568	197	"arg_2"	"oid"	31	0	2
2569	198	"result"	"month_interval"	32	0	0
2570	198	"arg_1"	"month_interval"	32	0	1
2571	198	"arg_2"	"oid"	31	0	2
2572	199	"result"	"month_interval"	32	0	0
2573	199	"arg_1"	"month_interval"	32	0	1
2574	199	"arg_2"	"oid"	31	0	2
2575	200	"result"	"month_interval"	32	0	0
2576	200	"arg_1"	"month_interval"	32	0	1
2577	200	"arg_2"	"oid"	31	0	2
2578	201	"result"	"month_interval"	32	0	0
2579	201	"arg_1"	"month_interval"	32	0	1
2580	201	"arg_2"	"oid"	31	0	2
2581	202	"result"	"sec_interval"	19	0	0
2582	202	"arg_1"	"sec_interval"	19	0	1
2583	202	"arg_2"	"oid"	31	0	2
2584	203	"result"	"sec_interval"	19	0	0
2585	203	"arg_1"	"sec_interval"	19	0	1
2586	203	"arg_2"	"oid"	31	0	2
2587	204	"result"	"sec_interval"	19	0	0
2588	204	"arg_1"	"sec_interval"	19	0	1
2589	204	"arg_2"	"oid"	31	0	2
2590	205	"result"	"sec_interval"	19	0	0
2591	205	"arg_1"	"sec_interval"	19	0	1
2592	205	"arg_2"	"oid"	31	0	2
2593	206	"result"	"wrd"	32	0	0
2594	206	"arg_1"	"wrd"	32	0	1
2595	206	"arg_2"	"wrd"	32	0	2
2596	207	"result"	"wrd"	32	0	0
2597	207	"arg_1"	"wrd"	32	0	1
2598	207	"arg_2"	"wrd"	32	0	2
2599	208	"result"	"wrd"	32	0	0
2600	208	"arg_1"	"wrd"	32	0	1
2601	208	"arg_2"	"wrd"	32	0	2
2602	209	"result"	"wrd"	32	0	0
2603	209	"arg_1"	"wrd"	32	0	1
2604	209	"arg_2"	"wrd"	32	0	2
2605	210	"result"	"wrd"	32	0	0
2606	210	"arg_1"	"wrd"	32	0	1
2607	210	"arg_2"	"wrd"	32	0	2
2608	211	"result"	"wrd"	32	0	0
2609	211	"arg_1"	"wrd"	32	0	1
2610	211	"arg_2"	"wrd"	32	0	2
2611	212	"result"	"wrd"	32	0	0
2612	212	"arg_1"	"wrd"	32	0	1
2613	212	"arg_2"	"wrd"	32	0	2
2614	213	"result"	"wrd"	32	0	0
2615	213	"arg_1"	"wrd"	32	0	1
2616	214	"result"	"wrd"	32	0	0
2617	214	"arg_1"	"wrd"	32	0	1
2618	214	"arg_2"	"int"	32	0	2
2619	215	"result"	"wrd"	32	0	0
2620	215	"arg_1"	"wrd"	32	0	1
2621	215	"arg_2"	"int"	32	0	2
2622	216	"result"	"wrd"	32	0	0
2623	216	"arg_1"	"wrd"	32	0	1
2624	217	"result"	"wrd"	32	0	0
2625	217	"arg_1"	"wrd"	32	0	1
2626	218	"result"	"tinyint"	8	0	0
2627	218	"arg_1"	"wrd"	32	0	1
2628	219	"result"	"wrd"	32	0	0
2629	219	"arg_1"	"wrd"	32	0	1
2630	219	"arg_2"	"wrd"	32	0	2
2631	220	"result"	"wrd"	32	0	0
2632	220	"arg_1"	"wrd"	32	0	1
2633	220	"arg_2"	"wrd"	32	0	2
2634	221	"result"	"month_interval"	32	0	0
2635	221	"arg_1"	"month_interval"	32	0	1
2636	221	"arg_2"	"wrd"	32	0	2
2637	222	"result"	"month_interval"	32	0	0
2638	222	"arg_1"	"month_interval"	32	0	1
2639	222	"arg_2"	"wrd"	32	0	2
2640	223	"result"	"month_interval"	32	0	0
2641	223	"arg_1"	"month_interval"	32	0	1
2642	223	"arg_2"	"wrd"	32	0	2
2643	224	"result"	"month_interval"	32	0	0
2644	224	"arg_1"	"month_interval"	32	0	1
2645	224	"arg_2"	"wrd"	32	0	2
2646	225	"result"	"sec_interval"	19	0	0
2647	225	"arg_1"	"sec_interval"	19	0	1
2648	225	"arg_2"	"wrd"	32	0	2
2649	226	"result"	"sec_interval"	19	0	0
2650	226	"arg_1"	"sec_interval"	19	0	1
2651	226	"arg_2"	"wrd"	32	0	2
2652	227	"result"	"sec_interval"	19	0	0
2653	227	"arg_1"	"sec_interval"	19	0	1
2654	227	"arg_2"	"wrd"	32	0	2
2655	228	"result"	"sec_interval"	19	0	0
2656	228	"arg_1"	"sec_interval"	19	0	1
2657	228	"arg_2"	"wrd"	32	0	2
2658	229	"result"	"bigint"	64	0	0
2659	229	"arg_1"	"bigint"	64	0	1
2660	229	"arg_2"	"bigint"	64	0	2
2661	230	"result"	"bigint"	64	0	0
2662	230	"arg_1"	"bigint"	64	0	1
2663	230	"arg_2"	"bigint"	64	0	2
2664	231	"result"	"bigint"	64	0	0
2665	231	"arg_1"	"bigint"	64	0	1
2666	231	"arg_2"	"bigint"	64	0	2
2667	232	"result"	"bigint"	64	0	0
2668	232	"arg_1"	"bigint"	64	0	1
2669	232	"arg_2"	"bigint"	64	0	2
2670	233	"result"	"bigint"	64	0	0
2671	233	"arg_1"	"bigint"	64	0	1
2672	233	"arg_2"	"bigint"	64	0	2
2673	234	"result"	"bigint"	64	0	0
2674	234	"arg_1"	"bigint"	64	0	1
2675	234	"arg_2"	"bigint"	64	0	2
2676	235	"result"	"bigint"	64	0	0
2677	235	"arg_1"	"bigint"	64	0	1
2678	235	"arg_2"	"bigint"	64	0	2
2679	236	"result"	"bigint"	64	0	0
2680	236	"arg_1"	"bigint"	64	0	1
2681	237	"result"	"bigint"	64	0	0
2682	237	"arg_1"	"bigint"	64	0	1
2683	237	"arg_2"	"int"	32	0	2
2684	238	"result"	"bigint"	64	0	0
2685	238	"arg_1"	"bigint"	64	0	1
2686	238	"arg_2"	"int"	32	0	2
2687	239	"result"	"bigint"	64	0	0
2688	239	"arg_1"	"bigint"	64	0	1
2689	240	"result"	"bigint"	64	0	0
2690	240	"arg_1"	"bigint"	64	0	1
2691	241	"result"	"tinyint"	8	0	0
2692	241	"arg_1"	"bigint"	64	0	1
2693	242	"result"	"bigint"	64	0	0
2694	242	"arg_1"	"bigint"	64	0	1
2695	242	"arg_2"	"bigint"	64	0	2
2696	243	"result"	"bigint"	64	0	0
2697	243	"arg_1"	"bigint"	64	0	1
2698	243	"arg_2"	"bigint"	64	0	2
2699	244	"result"	"month_interval"	32	0	0
2700	244	"arg_1"	"month_interval"	32	0	1
2701	244	"arg_2"	"bigint"	64	0	2
2702	245	"result"	"month_interval"	32	0	0
2703	245	"arg_1"	"month_interval"	32	0	1
2704	245	"arg_2"	"bigint"	64	0	2
2705	246	"result"	"month_interval"	32	0	0
2706	246	"arg_1"	"month_interval"	32	0	1
2707	246	"arg_2"	"bigint"	64	0	2
2708	247	"result"	"month_interval"	32	0	0
2709	247	"arg_1"	"month_interval"	32	0	1
2710	247	"arg_2"	"bigint"	64	0	2
2711	248	"result"	"sec_interval"	19	0	0
2712	248	"arg_1"	"sec_interval"	19	0	1
2713	248	"arg_2"	"bigint"	64	0	2
2714	249	"result"	"sec_interval"	19	0	0
2715	249	"arg_1"	"sec_interval"	19	0	1
2716	249	"arg_2"	"bigint"	64	0	2
2717	250	"result"	"sec_interval"	19	0	0
2718	250	"arg_1"	"sec_interval"	19	0	1
2719	250	"arg_2"	"bigint"	64	0	2
2720	251	"result"	"sec_interval"	19	0	0
2721	251	"arg_1"	"sec_interval"	19	0	1
2722	251	"arg_2"	"bigint"	64	0	2
2723	252	"result"	"decimal"	2	0	0
2724	252	"arg_1"	"decimal"	2	0	1
2725	252	"arg_2"	"decimal"	2	0	2
2726	253	"result"	"decimal"	2	0	0
2727	253	"arg_1"	"decimal"	2	0	1
2728	253	"arg_2"	"decimal"	2	0	2
2729	254	"result"	"decimal"	2	0	0
2730	254	"arg_1"	"decimal"	2	0	1
2731	254	"arg_2"	"decimal"	2	0	2
2732	255	"result"	"decimal"	2	0	0
2733	255	"arg_1"	"decimal"	2	0	1
2734	255	"arg_2"	"decimal"	2	0	2
2735	256	"result"	"decimal"	2	0	0
2736	256	"arg_1"	"decimal"	2	0	1
2737	256	"arg_2"	"decimal"	2	0	2
2738	257	"result"	"decimal"	2	0	0
2739	257	"arg_1"	"decimal"	2	0	1
2740	257	"arg_2"	"decimal"	2	0	2
2741	258	"result"	"decimal"	2	0	0
2742	258	"arg_1"	"decimal"	2	0	1
2743	258	"arg_2"	"decimal"	2	0	2
2744	259	"result"	"decimal"	2	0	0
2745	259	"arg_1"	"decimal"	2	0	1
2746	260	"result"	"decimal"	2	0	0
2747	260	"arg_1"	"decimal"	2	0	1
2748	260	"arg_2"	"int"	32	0	2
2749	261	"result"	"decimal"	2	0	0
2750	261	"arg_1"	"decimal"	2	0	1
2751	261	"arg_2"	"int"	32	0	2
2752	262	"result"	"decimal"	2	0	0
2753	262	"arg_1"	"decimal"	2	0	1
2754	263	"result"	"decimal"	2	0	0
2755	263	"arg_1"	"decimal"	2	0	1
2756	264	"result"	"tinyint"	8	0	0
2757	264	"arg_1"	"decimal"	2	0	1
2758	265	"result"	"decimal"	2	0	0
2759	265	"arg_1"	"decimal"	2	0	1
2760	265	"arg_2"	"tinyint"	8	0	2
2761	266	"result"	"decimal"	2	0	0
2762	266	"arg_1"	"decimal"	2	0	1
2763	266	"arg_2"	"tinyint"	8	0	2
2764	267	"result"	"month_interval"	32	0	0
2765	267	"arg_1"	"month_interval"	32	0	1
2766	267	"arg_2"	"decimal"	2	0	2
2767	268	"result"	"month_interval"	32	0	0
2768	268	"arg_1"	"month_interval"	32	0	1
2769	268	"arg_2"	"decimal"	2	0	2
2770	269	"result"	"month_interval"	32	0	0
2771	269	"arg_1"	"month_interval"	32	0	1
2772	269	"arg_2"	"decimal"	2	0	2
2773	270	"result"	"month_interval"	32	0	0
2774	270	"arg_1"	"month_interval"	32	0	1
2775	270	"arg_2"	"decimal"	2	0	2
2776	271	"result"	"sec_interval"	19	0	0
2777	271	"arg_1"	"sec_interval"	19	0	1
2778	271	"arg_2"	"decimal"	2	0	2
2779	272	"result"	"sec_interval"	19	0	0
2780	272	"arg_1"	"sec_interval"	19	0	1
2781	272	"arg_2"	"decimal"	2	0	2
2782	273	"result"	"sec_interval"	19	0	0
2783	273	"arg_1"	"sec_interval"	19	0	1
2784	273	"arg_2"	"decimal"	2	0	2
2785	274	"result"	"sec_interval"	19	0	0
2786	274	"arg_1"	"sec_interval"	19	0	1
2787	274	"arg_2"	"decimal"	2	0	2
2788	275	"result"	"decimal"	4	0	0
2789	275	"arg_1"	"decimal"	4	0	1
2790	275	"arg_2"	"decimal"	4	0	2
2791	276	"result"	"decimal"	4	0	0
2792	276	"arg_1"	"decimal"	4	0	1
2793	276	"arg_2"	"decimal"	4	0	2
2794	277	"result"	"decimal"	4	0	0
2795	277	"arg_1"	"decimal"	4	0	1
2796	277	"arg_2"	"decimal"	4	0	2
2797	278	"result"	"decimal"	4	0	0
2798	278	"arg_1"	"decimal"	4	0	1
2799	278	"arg_2"	"decimal"	4	0	2
2800	279	"result"	"decimal"	4	0	0
2801	279	"arg_1"	"decimal"	4	0	1
2802	279	"arg_2"	"decimal"	4	0	2
2803	280	"result"	"decimal"	4	0	0
2804	280	"arg_1"	"decimal"	4	0	1
2805	280	"arg_2"	"decimal"	4	0	2
2806	281	"result"	"decimal"	4	0	0
2807	281	"arg_1"	"decimal"	4	0	1
2808	281	"arg_2"	"decimal"	4	0	2
2809	282	"result"	"decimal"	4	0	0
2810	282	"arg_1"	"decimal"	4	0	1
2811	283	"result"	"decimal"	4	0	0
2812	283	"arg_1"	"decimal"	4	0	1
2813	283	"arg_2"	"int"	32	0	2
2814	284	"result"	"decimal"	4	0	0
2815	284	"arg_1"	"decimal"	4	0	1
2816	284	"arg_2"	"int"	32	0	2
2817	285	"result"	"decimal"	4	0	0
2818	285	"arg_1"	"decimal"	4	0	1
2819	286	"result"	"decimal"	4	0	0
2820	286	"arg_1"	"decimal"	4	0	1
2821	287	"result"	"tinyint"	8	0	0
2822	287	"arg_1"	"decimal"	4	0	1
2823	288	"result"	"decimal"	4	0	0
2824	288	"arg_1"	"decimal"	4	0	1
2825	288	"arg_2"	"smallint"	16	0	2
2826	289	"result"	"decimal"	4	0	0
2827	289	"arg_1"	"decimal"	4	0	1
2828	289	"arg_2"	"smallint"	16	0	2
2829	290	"result"	"month_interval"	32	0	0
2830	290	"arg_1"	"month_interval"	32	0	1
2831	290	"arg_2"	"decimal"	4	0	2
2832	291	"result"	"month_interval"	32	0	0
2833	291	"arg_1"	"month_interval"	32	0	1
2834	291	"arg_2"	"decimal"	4	0	2
2835	292	"result"	"month_interval"	32	0	0
2836	292	"arg_1"	"month_interval"	32	0	1
2837	292	"arg_2"	"decimal"	4	0	2
2838	293	"result"	"month_interval"	32	0	0
2839	293	"arg_1"	"month_interval"	32	0	1
2840	293	"arg_2"	"decimal"	4	0	2
2841	294	"result"	"sec_interval"	19	0	0
2842	294	"arg_1"	"sec_interval"	19	0	1
2843	294	"arg_2"	"decimal"	4	0	2
2844	295	"result"	"sec_interval"	19	0	0
2845	295	"arg_1"	"sec_interval"	19	0	1
2846	295	"arg_2"	"decimal"	4	0	2
2847	296	"result"	"sec_interval"	19	0	0
2848	296	"arg_1"	"sec_interval"	19	0	1
2849	296	"arg_2"	"decimal"	4	0	2
2850	297	"result"	"sec_interval"	19	0	0
2851	297	"arg_1"	"sec_interval"	19	0	1
2852	297	"arg_2"	"decimal"	4	0	2
2853	298	"result"	"decimal"	9	0	0
2854	298	"arg_1"	"decimal"	9	0	1
2855	298	"arg_2"	"decimal"	9	0	2
2856	299	"result"	"decimal"	9	0	0
2857	299	"arg_1"	"decimal"	9	0	1
2858	299	"arg_2"	"decimal"	9	0	2
2859	300	"result"	"decimal"	9	0	0
2860	300	"arg_1"	"decimal"	9	0	1
2861	300	"arg_2"	"decimal"	9	0	2
2862	301	"result"	"decimal"	9	0	0
2863	301	"arg_1"	"decimal"	9	0	1
2864	301	"arg_2"	"decimal"	9	0	2
2865	302	"result"	"decimal"	9	0	0
2866	302	"arg_1"	"decimal"	9	0	1
2867	302	"arg_2"	"decimal"	9	0	2
2868	303	"result"	"decimal"	9	0	0
2869	303	"arg_1"	"decimal"	9	0	1
2870	303	"arg_2"	"decimal"	9	0	2
2871	304	"result"	"decimal"	9	0	0
2872	304	"arg_1"	"decimal"	9	0	1
2873	304	"arg_2"	"decimal"	9	0	2
2874	305	"result"	"decimal"	9	0	0
2875	305	"arg_1"	"decimal"	9	0	1
2876	306	"result"	"decimal"	9	0	0
2877	306	"arg_1"	"decimal"	9	0	1
2878	306	"arg_2"	"int"	32	0	2
2879	307	"result"	"decimal"	9	0	0
2880	307	"arg_1"	"decimal"	9	0	1
2881	307	"arg_2"	"int"	32	0	2
2882	308	"result"	"decimal"	9	0	0
2883	308	"arg_1"	"decimal"	9	0	1
2884	309	"result"	"decimal"	9	0	0
2885	309	"arg_1"	"decimal"	9	0	1
2886	310	"result"	"tinyint"	8	0	0
2887	310	"arg_1"	"decimal"	9	0	1
2888	311	"result"	"decimal"	9	0	0
2889	311	"arg_1"	"decimal"	9	0	1
2890	311	"arg_2"	"int"	32	0	2
2891	312	"result"	"decimal"	9	0	0
2892	312	"arg_1"	"decimal"	9	0	1
2893	312	"arg_2"	"int"	32	0	2
2894	313	"result"	"month_interval"	32	0	0
2895	313	"arg_1"	"month_interval"	32	0	1
2896	313	"arg_2"	"decimal"	9	0	2
2897	314	"result"	"month_interval"	32	0	0
2898	314	"arg_1"	"month_interval"	32	0	1
2899	314	"arg_2"	"decimal"	9	0	2
2900	315	"result"	"month_interval"	32	0	0
2901	315	"arg_1"	"month_interval"	32	0	1
2902	315	"arg_2"	"decimal"	9	0	2
2903	316	"result"	"month_interval"	32	0	0
2904	316	"arg_1"	"month_interval"	32	0	1
2905	316	"arg_2"	"decimal"	9	0	2
2906	317	"result"	"sec_interval"	19	0	0
2907	317	"arg_1"	"sec_interval"	19	0	1
2908	317	"arg_2"	"decimal"	9	0	2
2909	318	"result"	"sec_interval"	19	0	0
2910	318	"arg_1"	"sec_interval"	19	0	1
2911	318	"arg_2"	"decimal"	9	0	2
2912	319	"result"	"sec_interval"	19	0	0
2913	319	"arg_1"	"sec_interval"	19	0	1
2914	319	"arg_2"	"decimal"	9	0	2
2915	320	"result"	"sec_interval"	19	0	0
2916	320	"arg_1"	"sec_interval"	19	0	1
2917	320	"arg_2"	"decimal"	9	0	2
2918	321	"result"	"decimal"	19	0	0
2919	321	"arg_1"	"decimal"	19	0	1
2920	321	"arg_2"	"decimal"	19	0	2
2921	322	"result"	"decimal"	19	0	0
2922	322	"arg_1"	"decimal"	19	0	1
2923	322	"arg_2"	"decimal"	19	0	2
2924	323	"result"	"decimal"	19	0	0
2925	323	"arg_1"	"decimal"	19	0	1
2926	323	"arg_2"	"decimal"	19	0	2
2927	324	"result"	"decimal"	19	0	0
2928	324	"arg_1"	"decimal"	19	0	1
2929	324	"arg_2"	"decimal"	19	0	2
2930	325	"result"	"decimal"	19	0	0
2931	325	"arg_1"	"decimal"	19	0	1
2932	325	"arg_2"	"decimal"	19	0	2
2933	326	"result"	"decimal"	19	0	0
2934	326	"arg_1"	"decimal"	19	0	1
2935	326	"arg_2"	"decimal"	19	0	2
2936	327	"result"	"decimal"	19	0	0
2937	327	"arg_1"	"decimal"	19	0	1
2938	327	"arg_2"	"decimal"	19	0	2
2939	328	"result"	"decimal"	19	0	0
2940	328	"arg_1"	"decimal"	19	0	1
2941	329	"result"	"decimal"	19	0	0
2942	329	"arg_1"	"decimal"	19	0	1
2943	329	"arg_2"	"int"	32	0	2
2944	330	"result"	"decimal"	19	0	0
2945	330	"arg_1"	"decimal"	19	0	1
2946	330	"arg_2"	"int"	32	0	2
2947	331	"result"	"decimal"	19	0	0
2948	331	"arg_1"	"decimal"	19	0	1
2949	332	"result"	"decimal"	19	0	0
2950	332	"arg_1"	"decimal"	19	0	1
2951	333	"result"	"tinyint"	8	0	0
2952	333	"arg_1"	"decimal"	19	0	1
2953	334	"result"	"decimal"	19	0	0
2954	334	"arg_1"	"decimal"	19	0	1
2955	334	"arg_2"	"bigint"	64	0	2
2956	335	"result"	"decimal"	19	0	0
2957	335	"arg_1"	"decimal"	19	0	1
2958	335	"arg_2"	"bigint"	64	0	2
2959	336	"result"	"month_interval"	32	0	0
2960	336	"arg_1"	"month_interval"	32	0	1
2961	336	"arg_2"	"decimal"	19	0	2
2962	337	"result"	"month_interval"	32	0	0
2963	337	"arg_1"	"month_interval"	32	0	1
2964	337	"arg_2"	"decimal"	19	0	2
2965	338	"result"	"month_interval"	32	0	0
2966	338	"arg_1"	"month_interval"	32	0	1
2967	338	"arg_2"	"decimal"	19	0	2
2968	339	"result"	"month_interval"	32	0	0
2969	339	"arg_1"	"month_interval"	32	0	1
2970	339	"arg_2"	"decimal"	19	0	2
2971	340	"result"	"sec_interval"	19	0	0
2972	340	"arg_1"	"sec_interval"	19	0	1
2973	340	"arg_2"	"decimal"	19	0	2
2974	341	"result"	"sec_interval"	19	0	0
2975	341	"arg_1"	"sec_interval"	19	0	1
2976	341	"arg_2"	"decimal"	19	0	2
2977	342	"result"	"sec_interval"	19	0	0
2978	342	"arg_1"	"sec_interval"	19	0	1
2979	342	"arg_2"	"decimal"	19	0	2
2980	343	"result"	"sec_interval"	19	0	0
2981	343	"arg_1"	"sec_interval"	19	0	1
2982	343	"arg_2"	"decimal"	19	0	2
2983	344	"result"	"real"	24	0	0
2984	344	"arg_1"	"real"	24	0	1
2985	344	"arg_2"	"real"	24	0	2
2986	345	"result"	"real"	24	0	0
2987	345	"arg_1"	"real"	24	0	1
2988	345	"arg_2"	"real"	24	0	2
2989	346	"result"	"real"	24	0	0
2990	346	"arg_1"	"real"	24	0	1
2991	346	"arg_2"	"real"	24	0	2
2992	347	"result"	"real"	24	0	0
2993	347	"arg_1"	"real"	24	0	1
2994	347	"arg_2"	"real"	24	0	2
2995	348	"result"	"real"	24	0	0
2996	348	"arg_1"	"real"	24	0	1
2997	349	"result"	"real"	24	0	0
2998	349	"arg_1"	"real"	24	0	1
2999	350	"result"	"tinyint"	8	0	0
3000	350	"arg_1"	"real"	24	0	1
3001	351	"result"	"real"	24	0	0
3002	351	"arg_1"	"real"	24	0	1
3003	351	"arg_2"	"real"	24	0	2
3004	352	"result"	"real"	24	0	0
3005	352	"arg_1"	"real"	24	0	1
3006	352	"arg_2"	"real"	24	0	2
3007	353	"result"	"month_interval"	32	0	0
3008	353	"arg_1"	"month_interval"	32	0	1
3009	353	"arg_2"	"real"	24	0	2
3010	354	"result"	"month_interval"	32	0	0
3011	354	"arg_1"	"month_interval"	32	0	1
3012	354	"arg_2"	"real"	24	0	2
3013	355	"result"	"month_interval"	32	0	0
3014	355	"arg_1"	"month_interval"	32	0	1
3015	355	"arg_2"	"real"	24	0	2
3016	356	"result"	"month_interval"	32	0	0
3017	356	"arg_1"	"month_interval"	32	0	1
3018	356	"arg_2"	"real"	24	0	2
3019	357	"result"	"sec_interval"	19	0	0
3020	357	"arg_1"	"sec_interval"	19	0	1
3021	357	"arg_2"	"real"	24	0	2
3022	358	"result"	"sec_interval"	19	0	0
3023	358	"arg_1"	"sec_interval"	19	0	1
3024	358	"arg_2"	"real"	24	0	2
3025	359	"result"	"sec_interval"	19	0	0
3026	359	"arg_1"	"sec_interval"	19	0	1
3027	359	"arg_2"	"real"	24	0	2
3028	360	"result"	"sec_interval"	19	0	0
3029	360	"arg_1"	"sec_interval"	19	0	1
3030	360	"arg_2"	"real"	24	0	2
3031	361	"result"	"double"	53	0	0
3032	361	"arg_1"	"double"	53	0	1
3033	361	"arg_2"	"double"	53	0	2
3034	362	"result"	"double"	53	0	0
3035	362	"arg_1"	"double"	53	0	1
3036	362	"arg_2"	"double"	53	0	2
3037	363	"result"	"double"	53	0	0
3038	363	"arg_1"	"double"	53	0	1
3039	363	"arg_2"	"double"	53	0	2
3040	364	"result"	"double"	53	0	0
3041	364	"arg_1"	"double"	53	0	1
3042	364	"arg_2"	"double"	53	0	2
3043	365	"result"	"double"	53	0	0
3044	365	"arg_1"	"double"	53	0	1
3045	366	"result"	"double"	53	0	0
3046	366	"arg_1"	"double"	53	0	1
3047	367	"result"	"tinyint"	8	0	0
3048	367	"arg_1"	"double"	53	0	1
3049	368	"result"	"double"	53	0	0
3050	368	"arg_1"	"double"	53	0	1
3051	368	"arg_2"	"double"	53	0	2
3052	369	"result"	"double"	53	0	0
3053	369	"arg_1"	"double"	53	0	1
3054	369	"arg_2"	"double"	53	0	2
3055	370	"result"	"month_interval"	32	0	0
3056	370	"arg_1"	"month_interval"	32	0	1
3057	370	"arg_2"	"double"	53	0	2
3058	371	"result"	"month_interval"	32	0	0
3059	371	"arg_1"	"month_interval"	32	0	1
3060	371	"arg_2"	"double"	53	0	2
3061	372	"result"	"month_interval"	32	0	0
3062	372	"arg_1"	"month_interval"	32	0	1
3063	372	"arg_2"	"double"	53	0	2
3064	373	"result"	"month_interval"	32	0	0
3065	373	"arg_1"	"month_interval"	32	0	1
3066	373	"arg_2"	"double"	53	0	2
3067	374	"result"	"sec_interval"	19	0	0
3068	374	"arg_1"	"sec_interval"	19	0	1
3069	374	"arg_2"	"double"	53	0	2
3070	375	"result"	"sec_interval"	19	0	0
3071	375	"arg_1"	"sec_interval"	19	0	1
3072	375	"arg_2"	"double"	53	0	2
3073	376	"result"	"sec_interval"	19	0	0
3074	376	"arg_1"	"sec_interval"	19	0	1
3075	376	"arg_2"	"double"	53	0	2
3076	377	"result"	"sec_interval"	19	0	0
3077	377	"arg_1"	"sec_interval"	19	0	1
3078	377	"arg_2"	"double"	53	0	2
3079	378	"result"	"month_interval"	32	0	0
3080	378	"arg_1"	"month_interval"	32	0	1
3081	378	"arg_2"	"month_interval"	32	0	2
3082	379	"result"	"month_interval"	32	0	0
3083	379	"arg_1"	"month_interval"	32	0	1
3084	379	"arg_2"	"month_interval"	32	0	2
3085	380	"result"	"month_interval"	32	0	0
3086	380	"arg_1"	"month_interval"	32	0	1
3087	380	"arg_2"	"month_interval"	32	0	2
3088	381	"result"	"month_interval"	32	0	0
3089	381	"arg_1"	"month_interval"	32	0	1
3090	381	"arg_2"	"month_interval"	32	0	2
3091	382	"result"	"month_interval"	32	0	0
3092	382	"arg_1"	"month_interval"	32	0	1
3093	383	"result"	"month_interval"	32	0	0
3094	383	"arg_1"	"month_interval"	32	0	1
3095	384	"result"	"tinyint"	8	0	0
3096	384	"arg_1"	"month_interval"	32	0	1
3097	385	"result"	"month_interval"	32	0	0
3098	385	"arg_1"	"month_interval"	32	0	1
3099	385	"arg_2"	"int"	32	0	2
3100	386	"result"	"month_interval"	32	0	0
3101	386	"arg_1"	"month_interval"	32	0	1
3102	386	"arg_2"	"int"	32	0	2
3103	387	"result"	"sec_interval"	19	0	0
3104	387	"arg_1"	"sec_interval"	19	0	1
3105	387	"arg_2"	"sec_interval"	19	0	2
3106	388	"result"	"sec_interval"	19	0	0
3107	388	"arg_1"	"sec_interval"	19	0	1
3108	388	"arg_2"	"sec_interval"	19	0	2
3109	389	"result"	"sec_interval"	19	0	0
3110	389	"arg_1"	"sec_interval"	19	0	1
3111	389	"arg_2"	"sec_interval"	19	0	2
3112	390	"result"	"sec_interval"	19	0	0
3113	390	"arg_1"	"sec_interval"	19	0	1
3114	390	"arg_2"	"sec_interval"	19	0	2
3115	391	"result"	"sec_interval"	19	0	0
3116	391	"arg_1"	"sec_interval"	19	0	1
3117	392	"result"	"sec_interval"	19	0	0
3118	392	"arg_1"	"sec_interval"	19	0	1
3119	393	"result"	"tinyint"	8	0	0
3120	393	"arg_1"	"sec_interval"	19	0	1
3121	394	"result"	"sec_interval"	19	0	0
3122	394	"arg_1"	"sec_interval"	19	0	1
3123	394	"arg_2"	"bigint"	64	0	2
3124	395	"result"	"sec_interval"	19	0	0
3125	395	"arg_1"	"sec_interval"	19	0	1
3126	395	"arg_2"	"bigint"	64	0	2
3127	396	"result"	"decimal"	4	0	0
3128	396	"arg_1"	"decimal"	4	0	1
3129	396	"arg_2"	"tinyint"	8	0	2
3130	397	"result"	"decimal"	4	0	0
3131	397	"arg_1"	"tinyint"	8	0	1
3132	397	"arg_2"	"decimal"	4	0	2
3133	398	"result"	"decimal"	4	0	0
3134	398	"arg_1"	"decimal"	4	0	1
3135	398	"arg_2"	"decimal"	2	0	2
3136	399	"result"	"decimal"	4	0	0
3137	399	"arg_1"	"decimal"	2	0	1
3138	399	"arg_2"	"decimal"	4	0	2
3139	400	"result"	"decimal"	9	0	0
3140	400	"arg_1"	"decimal"	9	0	1
3141	400	"arg_2"	"tinyint"	8	0	2
3142	401	"result"	"decimal"	9	0	0
3143	401	"arg_1"	"tinyint"	8	0	1
3144	401	"arg_2"	"decimal"	9	0	2
3145	402	"result"	"decimal"	9	0	0
3146	402	"arg_1"	"decimal"	9	0	1
3147	402	"arg_2"	"smallint"	16	0	2
3148	403	"result"	"decimal"	9	0	0
3149	403	"arg_1"	"smallint"	16	0	1
3150	403	"arg_2"	"decimal"	9	0	2
3151	404	"result"	"decimal"	9	0	0
3152	404	"arg_1"	"decimal"	9	0	1
3153	404	"arg_2"	"decimal"	2	0	2
3154	405	"result"	"decimal"	9	0	0
3155	405	"arg_1"	"decimal"	2	0	1
3156	405	"arg_2"	"decimal"	9	0	2
3157	406	"result"	"decimal"	9	0	0
3158	406	"arg_1"	"decimal"	9	0	1
3159	406	"arg_2"	"decimal"	4	0	2
3160	407	"result"	"decimal"	9	0	0
3161	407	"arg_1"	"decimal"	4	0	1
3162	407	"arg_2"	"decimal"	9	0	2
3163	408	"result"	"decimal"	19	0	0
3164	408	"arg_1"	"decimal"	19	0	1
3165	408	"arg_2"	"tinyint"	8	0	2
3166	409	"result"	"decimal"	19	0	0
3167	409	"arg_1"	"tinyint"	8	0	1
3168	409	"arg_2"	"decimal"	19	0	2
3169	410	"result"	"decimal"	19	0	0
3170	410	"arg_1"	"decimal"	19	0	1
3171	410	"arg_2"	"smallint"	16	0	2
3172	411	"result"	"decimal"	19	0	0
3173	411	"arg_1"	"smallint"	16	0	1
3174	411	"arg_2"	"decimal"	19	0	2
3175	412	"result"	"decimal"	19	0	0
3176	412	"arg_1"	"decimal"	19	0	1
3177	412	"arg_2"	"int"	32	0	2
3178	413	"result"	"decimal"	19	0	0
3179	413	"arg_1"	"int"	32	0	1
3180	413	"arg_2"	"decimal"	19	0	2
3181	414	"result"	"decimal"	19	0	0
3182	414	"arg_1"	"decimal"	19	0	1
3183	414	"arg_2"	"wrd"	32	0	2
3184	415	"result"	"decimal"	19	0	0
3185	415	"arg_1"	"wrd"	32	0	1
3186	415	"arg_2"	"decimal"	19	0	2
3187	416	"result"	"decimal"	19	0	0
3188	416	"arg_1"	"decimal"	19	0	1
3189	416	"arg_2"	"decimal"	2	0	2
3190	417	"result"	"decimal"	19	0	0
3191	417	"arg_1"	"decimal"	2	0	1
3192	417	"arg_2"	"decimal"	19	0	2
3193	418	"result"	"decimal"	19	0	0
3194	418	"arg_1"	"decimal"	19	0	1
3195	418	"arg_2"	"decimal"	4	0	2
3196	419	"result"	"decimal"	19	0	0
3197	419	"arg_1"	"decimal"	4	0	1
3198	419	"arg_2"	"decimal"	19	0	2
3199	420	"result"	"decimal"	19	0	0
3200	420	"arg_1"	"decimal"	19	0	1
3201	420	"arg_2"	"decimal"	9	0	2
3202	421	"result"	"decimal"	19	0	0
3203	421	"arg_1"	"decimal"	9	0	1
3204	421	"arg_2"	"decimal"	19	0	2
3205	422	"result"	"decimal"	2	0	0
3206	422	"arg_1"	"decimal"	2	0	1
3207	422	"arg_2"	"tinyint"	8	0	2
3208	423	"result"	"decimal"	4	0	0
3209	423	"arg_1"	"decimal"	4	0	1
3210	423	"arg_2"	"tinyint"	8	0	2
3211	424	"result"	"decimal"	9	0	0
3212	424	"arg_1"	"decimal"	9	0	1
3213	424	"arg_2"	"tinyint"	8	0	2
3214	425	"result"	"decimal"	19	0	0
3215	425	"arg_1"	"decimal"	19	0	1
3216	425	"arg_2"	"tinyint"	8	0	2
3217	426	"result"	"real"	24	0	0
3218	426	"arg_1"	"real"	24	0	1
3219	426	"arg_2"	"tinyint"	8	0	2
3220	427	"result"	"double"	53	0	0
3221	427	"arg_1"	"double"	53	0	1
3222	427	"arg_2"	"tinyint"	8	0	2
3223	428	"result"	"tinyint"	8	0	0
3224	428	"arg_1"	"tinyint"	8	0	1
3225	428	"arg_2"	"tinyint"	8	0	2
3226	429	"result"	"tinyint"	8	0	0
3227	429	"arg_1"	"smallint"	16	0	1
3228	429	"arg_2"	"tinyint"	8	0	2
3229	430	"result"	"tinyint"	8	0	0
3230	430	"arg_1"	"int"	32	0	1
3231	430	"arg_2"	"tinyint"	8	0	2
3232	431	"result"	"tinyint"	8	0	0
3233	431	"arg_1"	"oid"	31	0	1
3234	431	"arg_2"	"tinyint"	8	0	2
3235	432	"result"	"tinyint"	8	0	0
3236	432	"arg_1"	"wrd"	32	0	1
3237	432	"arg_2"	"tinyint"	8	0	2
3238	433	"result"	"tinyint"	8	0	0
3239	433	"arg_1"	"bigint"	64	0	1
3240	433	"arg_2"	"tinyint"	8	0	2
3241	434	"result"	"tinyint"	8	0	0
3242	434	"arg_1"	"decimal"	2	0	1
3243	434	"arg_2"	"tinyint"	8	0	2
3244	435	"result"	"tinyint"	8	0	0
3245	435	"arg_1"	"decimal"	4	0	1
3246	435	"arg_2"	"tinyint"	8	0	2
3247	436	"result"	"tinyint"	8	0	0
3248	436	"arg_1"	"decimal"	9	0	1
3249	436	"arg_2"	"tinyint"	8	0	2
3250	437	"result"	"tinyint"	8	0	0
3251	437	"arg_1"	"decimal"	19	0	1
3252	437	"arg_2"	"tinyint"	8	0	2
3253	438	"result"	"tinyint"	8	0	0
3254	438	"arg_1"	"real"	24	0	1
3255	438	"arg_2"	"tinyint"	8	0	2
3256	439	"result"	"tinyint"	8	0	0
3257	439	"arg_1"	"double"	53	0	1
3258	439	"arg_2"	"tinyint"	8	0	2
3259	440	"result"	"tinyint"	8	0	0
3260	440	"arg_1"	"month_interval"	32	0	1
3261	440	"arg_2"	"tinyint"	8	0	2
3262	441	"result"	"tinyint"	8	0	0
3263	441	"arg_1"	"sec_interval"	19	0	1
3264	441	"arg_2"	"tinyint"	8	0	2
3265	442	"result"	"tinyint"	8	0	0
3266	442	"arg_1"	"time"	7	0	1
3267	442	"arg_2"	"tinyint"	8	0	2
3268	443	"result"	"tinyint"	8	0	0
3269	443	"arg_1"	"timetz"	7	0	1
3270	443	"arg_2"	"tinyint"	8	0	2
3271	444	"result"	"tinyint"	8	0	0
3272	444	"arg_1"	"date"	0	0	1
3273	444	"arg_2"	"tinyint"	8	0	2
3274	445	"result"	"tinyint"	8	0	0
3275	445	"arg_1"	"timestamp"	7	0	1
3276	445	"arg_2"	"tinyint"	8	0	2
3277	446	"result"	"tinyint"	8	0	0
3278	446	"arg_1"	"timestamptz"	7	0	1
3279	446	"arg_2"	"tinyint"	8	0	2
3280	447	"result"	"tinyint"	8	0	0
3281	447	"arg_1"	"blob"	0	0	1
3282	447	"arg_2"	"tinyint"	8	0	2
3283	448	"result"	"smallint"	16	0	0
3284	448	"arg_1"	"tinyint"	8	0	1
3285	448	"arg_2"	"smallint"	16	0	2
3286	449	"result"	"smallint"	16	0	0
3287	449	"arg_1"	"smallint"	16	0	1
3288	449	"arg_2"	"smallint"	16	0	2
3289	450	"result"	"smallint"	16	0	0
3290	450	"arg_1"	"int"	32	0	1
3291	450	"arg_2"	"smallint"	16	0	2
3292	451	"result"	"smallint"	16	0	0
3293	451	"arg_1"	"oid"	31	0	1
3294	451	"arg_2"	"smallint"	16	0	2
3295	452	"result"	"smallint"	16	0	0
3296	452	"arg_1"	"wrd"	32	0	1
3297	452	"arg_2"	"smallint"	16	0	2
3298	453	"result"	"smallint"	16	0	0
3299	453	"arg_1"	"bigint"	64	0	1
3300	453	"arg_2"	"smallint"	16	0	2
3301	454	"result"	"smallint"	16	0	0
3302	454	"arg_1"	"decimal"	2	0	1
3303	454	"arg_2"	"smallint"	16	0	2
3304	455	"result"	"smallint"	16	0	0
3305	455	"arg_1"	"decimal"	4	0	1
3306	455	"arg_2"	"smallint"	16	0	2
3307	456	"result"	"smallint"	16	0	0
3308	456	"arg_1"	"decimal"	9	0	1
3309	456	"arg_2"	"smallint"	16	0	2
3310	457	"result"	"smallint"	16	0	0
3311	457	"arg_1"	"decimal"	19	0	1
3312	457	"arg_2"	"smallint"	16	0	2
3313	458	"result"	"smallint"	16	0	0
3314	458	"arg_1"	"real"	24	0	1
3315	458	"arg_2"	"smallint"	16	0	2
3316	459	"result"	"smallint"	16	0	0
3317	459	"arg_1"	"double"	53	0	1
3318	459	"arg_2"	"smallint"	16	0	2
3319	460	"result"	"smallint"	16	0	0
3320	460	"arg_1"	"month_interval"	32	0	1
3321	460	"arg_2"	"smallint"	16	0	2
3322	461	"result"	"smallint"	16	0	0
3323	461	"arg_1"	"sec_interval"	19	0	1
3324	461	"arg_2"	"smallint"	16	0	2
3325	462	"result"	"smallint"	16	0	0
3326	462	"arg_1"	"time"	7	0	1
3327	462	"arg_2"	"smallint"	16	0	2
3328	463	"result"	"smallint"	16	0	0
3329	463	"arg_1"	"timetz"	7	0	1
3330	463	"arg_2"	"smallint"	16	0	2
3331	464	"result"	"smallint"	16	0	0
3332	464	"arg_1"	"date"	0	0	1
3333	464	"arg_2"	"smallint"	16	0	2
3334	465	"result"	"smallint"	16	0	0
3335	465	"arg_1"	"timestamp"	7	0	1
3336	465	"arg_2"	"smallint"	16	0	2
3337	466	"result"	"smallint"	16	0	0
3338	466	"arg_1"	"timestamptz"	7	0	1
3339	466	"arg_2"	"smallint"	16	0	2
3340	467	"result"	"smallint"	16	0	0
3341	467	"arg_1"	"blob"	0	0	1
3342	467	"arg_2"	"smallint"	16	0	2
3343	468	"result"	"int"	32	0	0
3344	468	"arg_1"	"tinyint"	8	0	1
3345	468	"arg_2"	"int"	32	0	2
3346	469	"result"	"int"	32	0	0
3347	469	"arg_1"	"smallint"	16	0	1
3348	469	"arg_2"	"int"	32	0	2
3349	470	"result"	"int"	32	0	0
3350	470	"arg_1"	"int"	32	0	1
3351	470	"arg_2"	"int"	32	0	2
3352	471	"result"	"int"	32	0	0
3353	471	"arg_1"	"oid"	31	0	1
3354	471	"arg_2"	"int"	32	0	2
3355	472	"result"	"int"	32	0	0
3356	472	"arg_1"	"wrd"	32	0	1
3357	472	"arg_2"	"int"	32	0	2
3358	473	"result"	"int"	32	0	0
3359	473	"arg_1"	"bigint"	64	0	1
3360	473	"arg_2"	"int"	32	0	2
3361	474	"result"	"int"	32	0	0
3362	474	"arg_1"	"decimal"	2	0	1
3363	474	"arg_2"	"int"	32	0	2
3364	475	"result"	"int"	32	0	0
3365	475	"arg_1"	"decimal"	4	0	1
3366	475	"arg_2"	"int"	32	0	2
3367	476	"result"	"int"	32	0	0
3368	476	"arg_1"	"decimal"	9	0	1
3369	476	"arg_2"	"int"	32	0	2
3370	477	"result"	"int"	32	0	0
3371	477	"arg_1"	"decimal"	19	0	1
3372	477	"arg_2"	"int"	32	0	2
3373	478	"result"	"int"	32	0	0
3374	478	"arg_1"	"real"	24	0	1
3375	478	"arg_2"	"int"	32	0	2
3376	479	"result"	"int"	32	0	0
3377	479	"arg_1"	"double"	53	0	1
3378	479	"arg_2"	"int"	32	0	2
3379	480	"result"	"int"	32	0	0
3380	480	"arg_1"	"month_interval"	32	0	1
3381	480	"arg_2"	"int"	32	0	2
3382	481	"result"	"int"	32	0	0
3383	481	"arg_1"	"sec_interval"	19	0	1
3384	481	"arg_2"	"int"	32	0	2
3385	482	"result"	"int"	32	0	0
3386	482	"arg_1"	"time"	7	0	1
3387	482	"arg_2"	"int"	32	0	2
3388	483	"result"	"int"	32	0	0
3389	483	"arg_1"	"timetz"	7	0	1
3390	483	"arg_2"	"int"	32	0	2
3391	484	"result"	"int"	32	0	0
3392	484	"arg_1"	"date"	0	0	1
3393	484	"arg_2"	"int"	32	0	2
3394	485	"result"	"int"	32	0	0
3395	485	"arg_1"	"timestamp"	7	0	1
3396	485	"arg_2"	"int"	32	0	2
3397	486	"result"	"int"	32	0	0
3398	486	"arg_1"	"timestamptz"	7	0	1
3399	486	"arg_2"	"int"	32	0	2
3400	487	"result"	"int"	32	0	0
3401	487	"arg_1"	"blob"	0	0	1
3402	487	"arg_2"	"int"	32	0	2
3403	488	"result"	"oid"	31	0	0
3404	488	"arg_1"	"tinyint"	8	0	1
3405	488	"arg_2"	"oid"	31	0	2
3406	489	"result"	"oid"	31	0	0
3407	489	"arg_1"	"smallint"	16	0	1
3408	489	"arg_2"	"oid"	31	0	2
3409	490	"result"	"oid"	31	0	0
3410	490	"arg_1"	"int"	32	0	1
3411	490	"arg_2"	"oid"	31	0	2
3412	491	"result"	"oid"	31	0	0
3413	491	"arg_1"	"oid"	31	0	1
3414	491	"arg_2"	"oid"	31	0	2
3415	492	"result"	"oid"	31	0	0
3416	492	"arg_1"	"wrd"	32	0	1
3417	492	"arg_2"	"oid"	31	0	2
3418	493	"result"	"oid"	31	0	0
3419	493	"arg_1"	"bigint"	64	0	1
3420	493	"arg_2"	"oid"	31	0	2
3421	494	"result"	"oid"	31	0	0
3422	494	"arg_1"	"decimal"	2	0	1
3423	494	"arg_2"	"oid"	31	0	2
3424	495	"result"	"oid"	31	0	0
3425	495	"arg_1"	"decimal"	4	0	1
3426	495	"arg_2"	"oid"	31	0	2
3427	496	"result"	"oid"	31	0	0
3428	496	"arg_1"	"decimal"	9	0	1
3429	496	"arg_2"	"oid"	31	0	2
3430	497	"result"	"oid"	31	0	0
3431	497	"arg_1"	"decimal"	19	0	1
3432	497	"arg_2"	"oid"	31	0	2
3433	498	"result"	"oid"	31	0	0
3434	498	"arg_1"	"real"	24	0	1
3435	498	"arg_2"	"oid"	31	0	2
3436	499	"result"	"oid"	31	0	0
3437	499	"arg_1"	"double"	53	0	1
3438	499	"arg_2"	"oid"	31	0	2
3439	500	"result"	"oid"	31	0	0
3440	500	"arg_1"	"month_interval"	32	0	1
3441	500	"arg_2"	"oid"	31	0	2
3442	501	"result"	"oid"	31	0	0
3443	501	"arg_1"	"sec_interval"	19	0	1
3444	501	"arg_2"	"oid"	31	0	2
3445	502	"result"	"oid"	31	0	0
3446	502	"arg_1"	"time"	7	0	1
3447	502	"arg_2"	"oid"	31	0	2
3448	503	"result"	"oid"	31	0	0
3449	503	"arg_1"	"timetz"	7	0	1
3450	503	"arg_2"	"oid"	31	0	2
3451	504	"result"	"oid"	31	0	0
3452	504	"arg_1"	"date"	0	0	1
3453	504	"arg_2"	"oid"	31	0	2
3454	505	"result"	"oid"	31	0	0
3455	505	"arg_1"	"timestamp"	7	0	1
3456	505	"arg_2"	"oid"	31	0	2
3457	506	"result"	"oid"	31	0	0
3458	506	"arg_1"	"timestamptz"	7	0	1
3459	506	"arg_2"	"oid"	31	0	2
3460	507	"result"	"oid"	31	0	0
3461	507	"arg_1"	"blob"	0	0	1
3462	507	"arg_2"	"oid"	31	0	2
3463	508	"result"	"wrd"	32	0	0
3464	508	"arg_1"	"tinyint"	8	0	1
3465	508	"arg_2"	"wrd"	32	0	2
3466	509	"result"	"wrd"	32	0	0
3467	509	"arg_1"	"smallint"	16	0	1
3468	509	"arg_2"	"wrd"	32	0	2
3469	510	"result"	"wrd"	32	0	0
3470	510	"arg_1"	"int"	32	0	1
3471	510	"arg_2"	"wrd"	32	0	2
3472	511	"result"	"wrd"	32	0	0
3473	511	"arg_1"	"oid"	31	0	1
3474	511	"arg_2"	"wrd"	32	0	2
3475	512	"result"	"wrd"	32	0	0
3476	512	"arg_1"	"wrd"	32	0	1
3477	512	"arg_2"	"wrd"	32	0	2
3478	513	"result"	"wrd"	32	0	0
3479	513	"arg_1"	"bigint"	64	0	1
3480	513	"arg_2"	"wrd"	32	0	2
3481	514	"result"	"wrd"	32	0	0
3482	514	"arg_1"	"decimal"	2	0	1
3483	514	"arg_2"	"wrd"	32	0	2
3484	515	"result"	"wrd"	32	0	0
3485	515	"arg_1"	"decimal"	4	0	1
3486	515	"arg_2"	"wrd"	32	0	2
3487	516	"result"	"wrd"	32	0	0
3488	516	"arg_1"	"decimal"	9	0	1
3489	516	"arg_2"	"wrd"	32	0	2
3490	517	"result"	"wrd"	32	0	0
3491	517	"arg_1"	"decimal"	19	0	1
3492	517	"arg_2"	"wrd"	32	0	2
3493	518	"result"	"wrd"	32	0	0
3494	518	"arg_1"	"real"	24	0	1
3495	518	"arg_2"	"wrd"	32	0	2
3496	519	"result"	"wrd"	32	0	0
3497	519	"arg_1"	"double"	53	0	1
3498	519	"arg_2"	"wrd"	32	0	2
3499	520	"result"	"wrd"	32	0	0
3500	520	"arg_1"	"month_interval"	32	0	1
3501	520	"arg_2"	"wrd"	32	0	2
3502	521	"result"	"wrd"	32	0	0
3503	521	"arg_1"	"sec_interval"	19	0	1
3504	521	"arg_2"	"wrd"	32	0	2
3505	522	"result"	"wrd"	32	0	0
3506	522	"arg_1"	"time"	7	0	1
3507	522	"arg_2"	"wrd"	32	0	2
3508	523	"result"	"wrd"	32	0	0
3509	523	"arg_1"	"timetz"	7	0	1
3510	523	"arg_2"	"wrd"	32	0	2
3511	524	"result"	"wrd"	32	0	0
3512	524	"arg_1"	"date"	0	0	1
3513	524	"arg_2"	"wrd"	32	0	2
3514	525	"result"	"wrd"	32	0	0
3515	525	"arg_1"	"timestamp"	7	0	1
3516	525	"arg_2"	"wrd"	32	0	2
3517	526	"result"	"wrd"	32	0	0
3518	526	"arg_1"	"timestamptz"	7	0	1
3519	526	"arg_2"	"wrd"	32	0	2
3520	527	"result"	"wrd"	32	0	0
3521	527	"arg_1"	"blob"	0	0	1
3522	527	"arg_2"	"wrd"	32	0	2
3523	528	"result"	"bigint"	64	0	0
3524	528	"arg_1"	"tinyint"	8	0	1
3525	528	"arg_2"	"bigint"	64	0	2
3526	529	"result"	"bigint"	64	0	0
3527	529	"arg_1"	"smallint"	16	0	1
3528	529	"arg_2"	"bigint"	64	0	2
3529	530	"result"	"bigint"	64	0	0
3530	530	"arg_1"	"int"	32	0	1
3531	530	"arg_2"	"bigint"	64	0	2
3532	531	"result"	"bigint"	64	0	0
3533	531	"arg_1"	"oid"	31	0	1
3534	531	"arg_2"	"bigint"	64	0	2
3535	532	"result"	"bigint"	64	0	0
3536	532	"arg_1"	"wrd"	32	0	1
3537	532	"arg_2"	"bigint"	64	0	2
3538	533	"result"	"bigint"	64	0	0
3539	533	"arg_1"	"bigint"	64	0	1
3540	533	"arg_2"	"bigint"	64	0	2
3541	534	"result"	"bigint"	64	0	0
3542	534	"arg_1"	"decimal"	2	0	1
3543	534	"arg_2"	"bigint"	64	0	2
3544	535	"result"	"bigint"	64	0	0
3545	535	"arg_1"	"decimal"	4	0	1
3546	535	"arg_2"	"bigint"	64	0	2
3547	536	"result"	"bigint"	64	0	0
3548	536	"arg_1"	"decimal"	9	0	1
3549	536	"arg_2"	"bigint"	64	0	2
3550	537	"result"	"bigint"	64	0	0
3551	537	"arg_1"	"decimal"	19	0	1
3552	537	"arg_2"	"bigint"	64	0	2
3553	538	"result"	"bigint"	64	0	0
3554	538	"arg_1"	"real"	24	0	1
3555	538	"arg_2"	"bigint"	64	0	2
3556	539	"result"	"bigint"	64	0	0
3557	539	"arg_1"	"double"	53	0	1
3558	539	"arg_2"	"bigint"	64	0	2
3559	540	"result"	"bigint"	64	0	0
3560	540	"arg_1"	"month_interval"	32	0	1
3561	540	"arg_2"	"bigint"	64	0	2
3562	541	"result"	"bigint"	64	0	0
3563	541	"arg_1"	"sec_interval"	19	0	1
3564	541	"arg_2"	"bigint"	64	0	2
3565	542	"result"	"bigint"	64	0	0
3566	542	"arg_1"	"time"	7	0	1
3567	542	"arg_2"	"bigint"	64	0	2
3568	543	"result"	"bigint"	64	0	0
3569	543	"arg_1"	"timetz"	7	0	1
3570	543	"arg_2"	"bigint"	64	0	2
3571	544	"result"	"bigint"	64	0	0
3572	544	"arg_1"	"date"	0	0	1
3573	544	"arg_2"	"bigint"	64	0	2
3574	545	"result"	"bigint"	64	0	0
3575	545	"arg_1"	"timestamp"	7	0	1
3576	545	"arg_2"	"bigint"	64	0	2
3577	546	"result"	"bigint"	64	0	0
3578	546	"arg_1"	"timestamptz"	7	0	1
3579	546	"arg_2"	"bigint"	64	0	2
3580	547	"result"	"bigint"	64	0	0
3581	547	"arg_1"	"blob"	0	0	1
3582	547	"arg_2"	"bigint"	64	0	2
3583	548	"result"	"decimal"	2	0	0
3584	548	"arg_1"	"tinyint"	8	0	1
3585	548	"arg_2"	"decimal"	2	0	2
3586	549	"result"	"decimal"	2	0	0
3587	549	"arg_1"	"smallint"	16	0	1
3588	549	"arg_2"	"decimal"	2	0	2
3589	550	"result"	"decimal"	2	0	0
3590	550	"arg_1"	"int"	32	0	1
3591	550	"arg_2"	"decimal"	2	0	2
3592	551	"result"	"decimal"	2	0	0
3593	551	"arg_1"	"oid"	31	0	1
3594	551	"arg_2"	"decimal"	2	0	2
3595	552	"result"	"decimal"	2	0	0
3596	552	"arg_1"	"wrd"	32	0	1
3597	552	"arg_2"	"decimal"	2	0	2
3598	553	"result"	"decimal"	2	0	0
3599	553	"arg_1"	"bigint"	64	0	1
3600	553	"arg_2"	"decimal"	2	0	2
3601	554	"result"	"decimal"	2	0	0
3602	554	"arg_1"	"decimal"	2	0	1
3603	554	"arg_2"	"decimal"	2	0	2
3604	555	"result"	"decimal"	2	0	0
3605	555	"arg_1"	"decimal"	4	0	1
3606	555	"arg_2"	"decimal"	2	0	2
3607	556	"result"	"decimal"	2	0	0
3608	556	"arg_1"	"decimal"	9	0	1
3609	556	"arg_2"	"decimal"	2	0	2
3610	557	"result"	"decimal"	2	0	0
3611	557	"arg_1"	"decimal"	19	0	1
3612	557	"arg_2"	"decimal"	2	0	2
3613	558	"result"	"decimal"	2	0	0
3614	558	"arg_1"	"real"	24	0	1
3615	558	"arg_2"	"decimal"	2	0	2
3616	559	"result"	"decimal"	2	0	0
3617	559	"arg_1"	"double"	53	0	1
3618	559	"arg_2"	"decimal"	2	0	2
3619	560	"result"	"decimal"	2	0	0
3620	560	"arg_1"	"month_interval"	32	0	1
3621	560	"arg_2"	"decimal"	2	0	2
3622	561	"result"	"decimal"	2	0	0
3623	561	"arg_1"	"sec_interval"	19	0	1
3624	561	"arg_2"	"decimal"	2	0	2
3625	562	"result"	"decimal"	2	0	0
3626	562	"arg_1"	"time"	7	0	1
3627	562	"arg_2"	"decimal"	2	0	2
3628	563	"result"	"decimal"	2	0	0
3629	563	"arg_1"	"timetz"	7	0	1
3630	563	"arg_2"	"decimal"	2	0	2
3631	564	"result"	"decimal"	2	0	0
3632	564	"arg_1"	"date"	0	0	1
3633	564	"arg_2"	"decimal"	2	0	2
3634	565	"result"	"decimal"	2	0	0
3635	565	"arg_1"	"timestamp"	7	0	1
3636	565	"arg_2"	"decimal"	2	0	2
3637	566	"result"	"decimal"	2	0	0
3638	566	"arg_1"	"timestamptz"	7	0	1
3639	566	"arg_2"	"decimal"	2	0	2
3640	567	"result"	"decimal"	2	0	0
3641	567	"arg_1"	"blob"	0	0	1
3642	567	"arg_2"	"decimal"	2	0	2
3643	568	"result"	"decimal"	4	0	0
3644	568	"arg_1"	"tinyint"	8	0	1
3645	568	"arg_2"	"decimal"	4	0	2
3646	569	"result"	"decimal"	4	0	0
3647	569	"arg_1"	"smallint"	16	0	1
3648	569	"arg_2"	"decimal"	4	0	2
3649	570	"result"	"decimal"	4	0	0
3650	570	"arg_1"	"int"	32	0	1
3651	570	"arg_2"	"decimal"	4	0	2
3652	571	"result"	"decimal"	4	0	0
3653	571	"arg_1"	"oid"	31	0	1
3654	571	"arg_2"	"decimal"	4	0	2
3655	572	"result"	"decimal"	4	0	0
3656	572	"arg_1"	"wrd"	32	0	1
3657	572	"arg_2"	"decimal"	4	0	2
3658	573	"result"	"decimal"	4	0	0
3659	573	"arg_1"	"bigint"	64	0	1
3660	573	"arg_2"	"decimal"	4	0	2
3661	574	"result"	"decimal"	4	0	0
3662	574	"arg_1"	"decimal"	2	0	1
3663	574	"arg_2"	"decimal"	4	0	2
3664	575	"result"	"decimal"	4	0	0
3665	575	"arg_1"	"decimal"	4	0	1
3666	575	"arg_2"	"decimal"	4	0	2
3667	576	"result"	"decimal"	4	0	0
3668	576	"arg_1"	"decimal"	9	0	1
3669	576	"arg_2"	"decimal"	4	0	2
3670	577	"result"	"decimal"	4	0	0
3671	577	"arg_1"	"decimal"	19	0	1
3672	577	"arg_2"	"decimal"	4	0	2
3673	578	"result"	"decimal"	4	0	0
3674	578	"arg_1"	"real"	24	0	1
3675	578	"arg_2"	"decimal"	4	0	2
3676	579	"result"	"decimal"	4	0	0
3677	579	"arg_1"	"double"	53	0	1
3678	579	"arg_2"	"decimal"	4	0	2
3679	580	"result"	"decimal"	4	0	0
3680	580	"arg_1"	"month_interval"	32	0	1
3681	580	"arg_2"	"decimal"	4	0	2
3682	581	"result"	"decimal"	4	0	0
3683	581	"arg_1"	"sec_interval"	19	0	1
3684	581	"arg_2"	"decimal"	4	0	2
3685	582	"result"	"decimal"	4	0	0
3686	582	"arg_1"	"time"	7	0	1
3687	582	"arg_2"	"decimal"	4	0	2
3688	583	"result"	"decimal"	4	0	0
3689	583	"arg_1"	"timetz"	7	0	1
3690	583	"arg_2"	"decimal"	4	0	2
3691	584	"result"	"decimal"	4	0	0
3692	584	"arg_1"	"date"	0	0	1
3693	584	"arg_2"	"decimal"	4	0	2
3694	585	"result"	"decimal"	4	0	0
3695	585	"arg_1"	"timestamp"	7	0	1
3696	585	"arg_2"	"decimal"	4	0	2
3697	586	"result"	"decimal"	4	0	0
3698	586	"arg_1"	"timestamptz"	7	0	1
3699	586	"arg_2"	"decimal"	4	0	2
3700	587	"result"	"decimal"	4	0	0
3701	587	"arg_1"	"blob"	0	0	1
3702	587	"arg_2"	"decimal"	4	0	2
3703	588	"result"	"decimal"	9	0	0
3704	588	"arg_1"	"tinyint"	8	0	1
3705	588	"arg_2"	"decimal"	9	0	2
3706	589	"result"	"decimal"	9	0	0
3707	589	"arg_1"	"smallint"	16	0	1
3708	589	"arg_2"	"decimal"	9	0	2
3709	590	"result"	"decimal"	9	0	0
3710	590	"arg_1"	"int"	32	0	1
3711	590	"arg_2"	"decimal"	9	0	2
3712	591	"result"	"decimal"	9	0	0
3713	591	"arg_1"	"oid"	31	0	1
3714	591	"arg_2"	"decimal"	9	0	2
3715	592	"result"	"decimal"	9	0	0
3716	592	"arg_1"	"wrd"	32	0	1
3717	592	"arg_2"	"decimal"	9	0	2
3718	593	"result"	"decimal"	9	0	0
3719	593	"arg_1"	"bigint"	64	0	1
3720	593	"arg_2"	"decimal"	9	0	2
3721	594	"result"	"decimal"	9	0	0
3722	594	"arg_1"	"decimal"	2	0	1
3723	594	"arg_2"	"decimal"	9	0	2
3724	595	"result"	"decimal"	9	0	0
3725	595	"arg_1"	"decimal"	4	0	1
3726	595	"arg_2"	"decimal"	9	0	2
3727	596	"result"	"decimal"	9	0	0
3728	596	"arg_1"	"decimal"	9	0	1
3729	596	"arg_2"	"decimal"	9	0	2
3730	597	"result"	"decimal"	9	0	0
3731	597	"arg_1"	"decimal"	19	0	1
3732	597	"arg_2"	"decimal"	9	0	2
3733	598	"result"	"decimal"	9	0	0
3734	598	"arg_1"	"real"	24	0	1
3735	598	"arg_2"	"decimal"	9	0	2
3736	599	"result"	"decimal"	9	0	0
3737	599	"arg_1"	"double"	53	0	1
3738	599	"arg_2"	"decimal"	9	0	2
3739	600	"result"	"decimal"	9	0	0
3740	600	"arg_1"	"month_interval"	32	0	1
3741	600	"arg_2"	"decimal"	9	0	2
3742	601	"result"	"decimal"	9	0	0
3743	601	"arg_1"	"sec_interval"	19	0	1
3744	601	"arg_2"	"decimal"	9	0	2
3745	602	"result"	"decimal"	9	0	0
3746	602	"arg_1"	"time"	7	0	1
3747	602	"arg_2"	"decimal"	9	0	2
3748	603	"result"	"decimal"	9	0	0
3749	603	"arg_1"	"timetz"	7	0	1
3750	603	"arg_2"	"decimal"	9	0	2
3751	604	"result"	"decimal"	9	0	0
3752	604	"arg_1"	"date"	0	0	1
3753	604	"arg_2"	"decimal"	9	0	2
3754	605	"result"	"decimal"	9	0	0
3755	605	"arg_1"	"timestamp"	7	0	1
3756	605	"arg_2"	"decimal"	9	0	2
3757	606	"result"	"decimal"	9	0	0
3758	606	"arg_1"	"timestamptz"	7	0	1
3759	606	"arg_2"	"decimal"	9	0	2
3760	607	"result"	"decimal"	9	0	0
3761	607	"arg_1"	"blob"	0	0	1
3762	607	"arg_2"	"decimal"	9	0	2
3763	608	"result"	"decimal"	19	0	0
3764	608	"arg_1"	"tinyint"	8	0	1
3765	608	"arg_2"	"decimal"	19	0	2
3766	609	"result"	"decimal"	19	0	0
3767	609	"arg_1"	"smallint"	16	0	1
3768	609	"arg_2"	"decimal"	19	0	2
3769	610	"result"	"decimal"	19	0	0
3770	610	"arg_1"	"int"	32	0	1
3771	610	"arg_2"	"decimal"	19	0	2
3772	611	"result"	"decimal"	19	0	0
3773	611	"arg_1"	"oid"	31	0	1
3774	611	"arg_2"	"decimal"	19	0	2
3775	612	"result"	"decimal"	19	0	0
3776	612	"arg_1"	"wrd"	32	0	1
3777	612	"arg_2"	"decimal"	19	0	2
3778	613	"result"	"decimal"	19	0	0
3779	613	"arg_1"	"bigint"	64	0	1
3780	613	"arg_2"	"decimal"	19	0	2
3781	614	"result"	"decimal"	19	0	0
3782	614	"arg_1"	"decimal"	2	0	1
3783	614	"arg_2"	"decimal"	19	0	2
3784	615	"result"	"decimal"	19	0	0
3785	615	"arg_1"	"decimal"	4	0	1
3786	615	"arg_2"	"decimal"	19	0	2
3787	616	"result"	"decimal"	19	0	0
3788	616	"arg_1"	"decimal"	9	0	1
3789	616	"arg_2"	"decimal"	19	0	2
3790	617	"result"	"decimal"	19	0	0
3791	617	"arg_1"	"decimal"	19	0	1
3792	617	"arg_2"	"decimal"	19	0	2
3793	618	"result"	"decimal"	19	0	0
3794	618	"arg_1"	"real"	24	0	1
3795	618	"arg_2"	"decimal"	19	0	2
3796	619	"result"	"decimal"	19	0	0
3797	619	"arg_1"	"double"	53	0	1
3798	619	"arg_2"	"decimal"	19	0	2
3799	620	"result"	"decimal"	19	0	0
3800	620	"arg_1"	"month_interval"	32	0	1
3801	620	"arg_2"	"decimal"	19	0	2
3802	621	"result"	"decimal"	19	0	0
3803	621	"arg_1"	"sec_interval"	19	0	1
3804	621	"arg_2"	"decimal"	19	0	2
3805	622	"result"	"decimal"	19	0	0
3806	622	"arg_1"	"time"	7	0	1
3807	622	"arg_2"	"decimal"	19	0	2
3808	623	"result"	"decimal"	19	0	0
3809	623	"arg_1"	"timetz"	7	0	1
3810	623	"arg_2"	"decimal"	19	0	2
3811	624	"result"	"decimal"	19	0	0
3812	624	"arg_1"	"date"	0	0	1
3813	624	"arg_2"	"decimal"	19	0	2
3814	625	"result"	"decimal"	19	0	0
3815	625	"arg_1"	"timestamp"	7	0	1
3816	625	"arg_2"	"decimal"	19	0	2
3817	626	"result"	"decimal"	19	0	0
3818	626	"arg_1"	"timestamptz"	7	0	1
3819	626	"arg_2"	"decimal"	19	0	2
3820	627	"result"	"decimal"	19	0	0
3821	627	"arg_1"	"blob"	0	0	1
3822	627	"arg_2"	"decimal"	19	0	2
3823	628	"result"	"real"	24	0	0
3824	628	"arg_1"	"tinyint"	8	0	1
3825	628	"arg_2"	"real"	24	0	2
3826	629	"result"	"real"	24	0	0
3827	629	"arg_1"	"smallint"	16	0	1
3828	629	"arg_2"	"real"	24	0	2
3829	630	"result"	"real"	24	0	0
3830	630	"arg_1"	"int"	32	0	1
3831	630	"arg_2"	"real"	24	0	2
3832	631	"result"	"real"	24	0	0
3833	631	"arg_1"	"oid"	31	0	1
3834	631	"arg_2"	"real"	24	0	2
3835	632	"result"	"real"	24	0	0
3836	632	"arg_1"	"wrd"	32	0	1
3837	632	"arg_2"	"real"	24	0	2
3838	633	"result"	"real"	24	0	0
3839	633	"arg_1"	"bigint"	64	0	1
3840	633	"arg_2"	"real"	24	0	2
3841	634	"result"	"real"	24	0	0
3842	634	"arg_1"	"decimal"	2	0	1
3843	634	"arg_2"	"real"	24	0	2
3844	635	"result"	"real"	24	0	0
3845	635	"arg_1"	"decimal"	4	0	1
3846	635	"arg_2"	"real"	24	0	2
3847	636	"result"	"real"	24	0	0
3848	636	"arg_1"	"decimal"	9	0	1
3849	636	"arg_2"	"real"	24	0	2
3850	637	"result"	"real"	24	0	0
3851	637	"arg_1"	"decimal"	19	0	1
3852	637	"arg_2"	"real"	24	0	2
3853	638	"result"	"real"	24	0	0
3854	638	"arg_1"	"real"	24	0	1
3855	638	"arg_2"	"real"	24	0	2
3856	639	"result"	"real"	24	0	0
3857	639	"arg_1"	"double"	53	0	1
3858	639	"arg_2"	"real"	24	0	2
3859	640	"result"	"real"	24	0	0
3860	640	"arg_1"	"month_interval"	32	0	1
3861	640	"arg_2"	"real"	24	0	2
3862	641	"result"	"real"	24	0	0
3863	641	"arg_1"	"sec_interval"	19	0	1
3864	641	"arg_2"	"real"	24	0	2
3865	642	"result"	"real"	24	0	0
3866	642	"arg_1"	"time"	7	0	1
3867	642	"arg_2"	"real"	24	0	2
3868	643	"result"	"real"	24	0	0
3869	643	"arg_1"	"timetz"	7	0	1
3870	643	"arg_2"	"real"	24	0	2
3871	644	"result"	"real"	24	0	0
3872	644	"arg_1"	"date"	0	0	1
3873	644	"arg_2"	"real"	24	0	2
3874	645	"result"	"real"	24	0	0
3875	645	"arg_1"	"timestamp"	7	0	1
3876	645	"arg_2"	"real"	24	0	2
3877	646	"result"	"real"	24	0	0
3878	646	"arg_1"	"timestamptz"	7	0	1
3879	646	"arg_2"	"real"	24	0	2
3880	647	"result"	"real"	24	0	0
3881	647	"arg_1"	"blob"	0	0	1
3882	647	"arg_2"	"real"	24	0	2
3883	648	"result"	"double"	53	0	0
3884	648	"arg_1"	"tinyint"	8	0	1
3885	648	"arg_2"	"double"	53	0	2
3886	649	"result"	"double"	53	0	0
3887	649	"arg_1"	"smallint"	16	0	1
3888	649	"arg_2"	"double"	53	0	2
3889	650	"result"	"double"	53	0	0
3890	650	"arg_1"	"int"	32	0	1
3891	650	"arg_2"	"double"	53	0	2
3892	651	"result"	"double"	53	0	0
3893	651	"arg_1"	"oid"	31	0	1
3894	651	"arg_2"	"double"	53	0	2
3895	652	"result"	"double"	53	0	0
3896	652	"arg_1"	"wrd"	32	0	1
3897	652	"arg_2"	"double"	53	0	2
3898	653	"result"	"double"	53	0	0
3899	653	"arg_1"	"bigint"	64	0	1
3900	653	"arg_2"	"double"	53	0	2
3901	654	"result"	"double"	53	0	0
3902	654	"arg_1"	"decimal"	2	0	1
3903	654	"arg_2"	"double"	53	0	2
3904	655	"result"	"double"	53	0	0
3905	655	"arg_1"	"decimal"	4	0	1
3906	655	"arg_2"	"double"	53	0	2
3907	656	"result"	"double"	53	0	0
3908	656	"arg_1"	"decimal"	9	0	1
3909	656	"arg_2"	"double"	53	0	2
3910	657	"result"	"double"	53	0	0
3911	657	"arg_1"	"decimal"	19	0	1
3912	657	"arg_2"	"double"	53	0	2
3913	658	"result"	"double"	53	0	0
3914	658	"arg_1"	"real"	24	0	1
3915	658	"arg_2"	"double"	53	0	2
3916	659	"result"	"double"	53	0	0
3917	659	"arg_1"	"double"	53	0	1
3918	659	"arg_2"	"double"	53	0	2
3919	660	"result"	"double"	53	0	0
3920	660	"arg_1"	"month_interval"	32	0	1
3921	660	"arg_2"	"double"	53	0	2
3922	661	"result"	"double"	53	0	0
3923	661	"arg_1"	"sec_interval"	19	0	1
3924	661	"arg_2"	"double"	53	0	2
3925	662	"result"	"double"	53	0	0
3926	662	"arg_1"	"time"	7	0	1
3927	662	"arg_2"	"double"	53	0	2
3928	663	"result"	"double"	53	0	0
3929	663	"arg_1"	"timetz"	7	0	1
3930	663	"arg_2"	"double"	53	0	2
3931	664	"result"	"double"	53	0	0
3932	664	"arg_1"	"date"	0	0	1
3933	664	"arg_2"	"double"	53	0	2
3934	665	"result"	"double"	53	0	0
3935	665	"arg_1"	"timestamp"	7	0	1
3936	665	"arg_2"	"double"	53	0	2
3937	666	"result"	"double"	53	0	0
3938	666	"arg_1"	"timestamptz"	7	0	1
3939	666	"arg_2"	"double"	53	0	2
3940	667	"result"	"double"	53	0	0
3941	667	"arg_1"	"blob"	0	0	1
3942	667	"arg_2"	"double"	53	0	2
3943	668	"result"	"month_interval"	32	0	0
3944	668	"arg_1"	"tinyint"	8	0	1
3945	668	"arg_2"	"month_interval"	32	0	2
3946	669	"result"	"month_interval"	32	0	0
3947	669	"arg_1"	"smallint"	16	0	1
3948	669	"arg_2"	"month_interval"	32	0	2
3949	670	"result"	"month_interval"	32	0	0
3950	670	"arg_1"	"int"	32	0	1
3951	670	"arg_2"	"month_interval"	32	0	2
3952	671	"result"	"month_interval"	32	0	0
3953	671	"arg_1"	"oid"	31	0	1
3954	671	"arg_2"	"month_interval"	32	0	2
3955	672	"result"	"month_interval"	32	0	0
3956	672	"arg_1"	"wrd"	32	0	1
3957	672	"arg_2"	"month_interval"	32	0	2
3958	673	"result"	"month_interval"	32	0	0
3959	673	"arg_1"	"bigint"	64	0	1
3960	673	"arg_2"	"month_interval"	32	0	2
3961	674	"result"	"month_interval"	32	0	0
3962	674	"arg_1"	"decimal"	2	0	1
3963	674	"arg_2"	"month_interval"	32	0	2
3964	675	"result"	"month_interval"	32	0	0
3965	675	"arg_1"	"decimal"	4	0	1
3966	675	"arg_2"	"month_interval"	32	0	2
3967	676	"result"	"month_interval"	32	0	0
3968	676	"arg_1"	"decimal"	9	0	1
3969	676	"arg_2"	"month_interval"	32	0	2
3970	677	"result"	"month_interval"	32	0	0
3971	677	"arg_1"	"decimal"	19	0	1
3972	677	"arg_2"	"month_interval"	32	0	2
3973	678	"result"	"month_interval"	32	0	0
3974	678	"arg_1"	"real"	24	0	1
3975	678	"arg_2"	"month_interval"	32	0	2
3976	679	"result"	"month_interval"	32	0	0
3977	679	"arg_1"	"double"	53	0	1
3978	679	"arg_2"	"month_interval"	32	0	2
3979	680	"result"	"month_interval"	32	0	0
3980	680	"arg_1"	"month_interval"	32	0	1
3981	680	"arg_2"	"month_interval"	32	0	2
3982	681	"result"	"month_interval"	32	0	0
3983	681	"arg_1"	"sec_interval"	19	0	1
3984	681	"arg_2"	"month_interval"	32	0	2
3985	682	"result"	"month_interval"	32	0	0
3986	682	"arg_1"	"time"	7	0	1
3987	682	"arg_2"	"month_interval"	32	0	2
3988	683	"result"	"month_interval"	32	0	0
3989	683	"arg_1"	"timetz"	7	0	1
3990	683	"arg_2"	"month_interval"	32	0	2
3991	684	"result"	"month_interval"	32	0	0
3992	684	"arg_1"	"date"	0	0	1
3993	684	"arg_2"	"month_interval"	32	0	2
3994	685	"result"	"month_interval"	32	0	0
3995	685	"arg_1"	"timestamp"	7	0	1
3996	685	"arg_2"	"month_interval"	32	0	2
3997	686	"result"	"month_interval"	32	0	0
3998	686	"arg_1"	"timestamptz"	7	0	1
3999	686	"arg_2"	"month_interval"	32	0	2
4000	687	"result"	"month_interval"	32	0	0
4001	687	"arg_1"	"blob"	0	0	1
4002	687	"arg_2"	"month_interval"	32	0	2
4003	688	"result"	"sec_interval"	19	0	0
4004	688	"arg_1"	"tinyint"	8	0	1
4005	688	"arg_2"	"sec_interval"	19	0	2
4006	689	"result"	"sec_interval"	19	0	0
4007	689	"arg_1"	"smallint"	16	0	1
4008	689	"arg_2"	"sec_interval"	19	0	2
4009	690	"result"	"sec_interval"	19	0	0
4010	690	"arg_1"	"int"	32	0	1
4011	690	"arg_2"	"sec_interval"	19	0	2
4012	691	"result"	"sec_interval"	19	0	0
4013	691	"arg_1"	"oid"	31	0	1
4014	691	"arg_2"	"sec_interval"	19	0	2
4015	692	"result"	"sec_interval"	19	0	0
4016	692	"arg_1"	"wrd"	32	0	1
4017	692	"arg_2"	"sec_interval"	19	0	2
4018	693	"result"	"sec_interval"	19	0	0
4019	693	"arg_1"	"bigint"	64	0	1
4020	693	"arg_2"	"sec_interval"	19	0	2
4021	694	"result"	"sec_interval"	19	0	0
4022	694	"arg_1"	"decimal"	2	0	1
4023	694	"arg_2"	"sec_interval"	19	0	2
4024	695	"result"	"sec_interval"	19	0	0
4025	695	"arg_1"	"decimal"	4	0	1
4026	695	"arg_2"	"sec_interval"	19	0	2
4027	696	"result"	"sec_interval"	19	0	0
4028	696	"arg_1"	"decimal"	9	0	1
4029	696	"arg_2"	"sec_interval"	19	0	2
4030	697	"result"	"sec_interval"	19	0	0
4031	697	"arg_1"	"decimal"	19	0	1
4032	697	"arg_2"	"sec_interval"	19	0	2
4033	698	"result"	"sec_interval"	19	0	0
4034	698	"arg_1"	"real"	24	0	1
4035	698	"arg_2"	"sec_interval"	19	0	2
4036	699	"result"	"sec_interval"	19	0	0
4037	699	"arg_1"	"double"	53	0	1
4038	699	"arg_2"	"sec_interval"	19	0	2
4039	700	"result"	"sec_interval"	19	0	0
4040	700	"arg_1"	"month_interval"	32	0	1
4041	700	"arg_2"	"sec_interval"	19	0	2
4042	701	"result"	"sec_interval"	19	0	0
4043	701	"arg_1"	"sec_interval"	19	0	1
4044	701	"arg_2"	"sec_interval"	19	0	2
4045	702	"result"	"sec_interval"	19	0	0
4046	702	"arg_1"	"time"	7	0	1
4047	702	"arg_2"	"sec_interval"	19	0	2
4048	703	"result"	"sec_interval"	19	0	0
4049	703	"arg_1"	"timetz"	7	0	1
4050	703	"arg_2"	"sec_interval"	19	0	2
4051	704	"result"	"sec_interval"	19	0	0
4052	704	"arg_1"	"date"	0	0	1
4053	704	"arg_2"	"sec_interval"	19	0	2
4054	705	"result"	"sec_interval"	19	0	0
4055	705	"arg_1"	"timestamp"	7	0	1
4056	705	"arg_2"	"sec_interval"	19	0	2
4057	706	"result"	"sec_interval"	19	0	0
4058	706	"arg_1"	"timestamptz"	7	0	1
4059	706	"arg_2"	"sec_interval"	19	0	2
4060	707	"result"	"sec_interval"	19	0	0
4061	707	"arg_1"	"blob"	0	0	1
4062	707	"arg_2"	"sec_interval"	19	0	2
4063	708	"result"	"time"	7	0	0
4064	708	"arg_1"	"tinyint"	8	0	1
4065	708	"arg_2"	"time"	7	0	2
4066	709	"result"	"time"	7	0	0
4067	709	"arg_1"	"smallint"	16	0	1
4068	709	"arg_2"	"time"	7	0	2
4069	710	"result"	"time"	7	0	0
4070	710	"arg_1"	"int"	32	0	1
4071	710	"arg_2"	"time"	7	0	2
4072	711	"result"	"time"	7	0	0
4073	711	"arg_1"	"oid"	31	0	1
4074	711	"arg_2"	"time"	7	0	2
4075	712	"result"	"time"	7	0	0
4076	712	"arg_1"	"wrd"	32	0	1
4077	712	"arg_2"	"time"	7	0	2
4078	713	"result"	"time"	7	0	0
4079	713	"arg_1"	"bigint"	64	0	1
4080	713	"arg_2"	"time"	7	0	2
4081	714	"result"	"time"	7	0	0
4082	714	"arg_1"	"decimal"	2	0	1
4083	714	"arg_2"	"time"	7	0	2
4084	715	"result"	"time"	7	0	0
4085	715	"arg_1"	"decimal"	4	0	1
4086	715	"arg_2"	"time"	7	0	2
4087	716	"result"	"time"	7	0	0
4088	716	"arg_1"	"decimal"	9	0	1
4089	716	"arg_2"	"time"	7	0	2
4090	717	"result"	"time"	7	0	0
4091	717	"arg_1"	"decimal"	19	0	1
4092	717	"arg_2"	"time"	7	0	2
4093	718	"result"	"time"	7	0	0
4094	718	"arg_1"	"real"	24	0	1
4095	718	"arg_2"	"time"	7	0	2
4096	719	"result"	"time"	7	0	0
4097	719	"arg_1"	"double"	53	0	1
4098	719	"arg_2"	"time"	7	0	2
4099	720	"result"	"time"	7	0	0
4100	720	"arg_1"	"month_interval"	32	0	1
4101	720	"arg_2"	"time"	7	0	2
4102	721	"result"	"time"	7	0	0
4103	721	"arg_1"	"sec_interval"	19	0	1
4104	721	"arg_2"	"time"	7	0	2
4105	722	"result"	"time"	7	0	0
4106	722	"arg_1"	"time"	7	0	1
4107	722	"arg_2"	"time"	7	0	2
4108	723	"result"	"time"	7	0	0
4109	723	"arg_1"	"timetz"	7	0	1
4110	723	"arg_2"	"time"	7	0	2
4111	724	"result"	"time"	7	0	0
4112	724	"arg_1"	"date"	0	0	1
4113	724	"arg_2"	"time"	7	0	2
4114	725	"result"	"time"	7	0	0
4115	725	"arg_1"	"timestamp"	7	0	1
4116	725	"arg_2"	"time"	7	0	2
4117	726	"result"	"time"	7	0	0
4118	726	"arg_1"	"timestamptz"	7	0	1
4119	726	"arg_2"	"time"	7	0	2
4120	727	"result"	"time"	7	0	0
4121	727	"arg_1"	"blob"	0	0	1
4122	727	"arg_2"	"time"	7	0	2
4123	728	"result"	"timetz"	7	0	0
4124	728	"arg_1"	"tinyint"	8	0	1
4125	728	"arg_2"	"timetz"	7	0	2
4126	729	"result"	"timetz"	7	0	0
4127	729	"arg_1"	"smallint"	16	0	1
4128	729	"arg_2"	"timetz"	7	0	2
4129	730	"result"	"timetz"	7	0	0
4130	730	"arg_1"	"int"	32	0	1
4131	730	"arg_2"	"timetz"	7	0	2
4132	731	"result"	"timetz"	7	0	0
4133	731	"arg_1"	"oid"	31	0	1
4134	731	"arg_2"	"timetz"	7	0	2
4135	732	"result"	"timetz"	7	0	0
4136	732	"arg_1"	"wrd"	32	0	1
4137	732	"arg_2"	"timetz"	7	0	2
4138	733	"result"	"timetz"	7	0	0
4139	733	"arg_1"	"bigint"	64	0	1
4140	733	"arg_2"	"timetz"	7	0	2
4141	734	"result"	"timetz"	7	0	0
4142	734	"arg_1"	"decimal"	2	0	1
4143	734	"arg_2"	"timetz"	7	0	2
4144	735	"result"	"timetz"	7	0	0
4145	735	"arg_1"	"decimal"	4	0	1
4146	735	"arg_2"	"timetz"	7	0	2
4147	736	"result"	"timetz"	7	0	0
4148	736	"arg_1"	"decimal"	9	0	1
4149	736	"arg_2"	"timetz"	7	0	2
4150	737	"result"	"timetz"	7	0	0
4151	737	"arg_1"	"decimal"	19	0	1
4152	737	"arg_2"	"timetz"	7	0	2
4153	738	"result"	"timetz"	7	0	0
4154	738	"arg_1"	"real"	24	0	1
4155	738	"arg_2"	"timetz"	7	0	2
4156	739	"result"	"timetz"	7	0	0
4157	739	"arg_1"	"double"	53	0	1
4158	739	"arg_2"	"timetz"	7	0	2
4159	740	"result"	"timetz"	7	0	0
4160	740	"arg_1"	"month_interval"	32	0	1
4161	740	"arg_2"	"timetz"	7	0	2
4162	741	"result"	"timetz"	7	0	0
4163	741	"arg_1"	"sec_interval"	19	0	1
4164	741	"arg_2"	"timetz"	7	0	2
4165	742	"result"	"timetz"	7	0	0
4166	742	"arg_1"	"time"	7	0	1
4167	742	"arg_2"	"timetz"	7	0	2
4168	743	"result"	"timetz"	7	0	0
4169	743	"arg_1"	"timetz"	7	0	1
4170	743	"arg_2"	"timetz"	7	0	2
4171	744	"result"	"timetz"	7	0	0
4172	744	"arg_1"	"date"	0	0	1
4173	744	"arg_2"	"timetz"	7	0	2
4174	745	"result"	"timetz"	7	0	0
4175	745	"arg_1"	"timestamp"	7	0	1
4176	745	"arg_2"	"timetz"	7	0	2
4177	746	"result"	"timetz"	7	0	0
4178	746	"arg_1"	"timestamptz"	7	0	1
4179	746	"arg_2"	"timetz"	7	0	2
4180	747	"result"	"timetz"	7	0	0
4181	747	"arg_1"	"blob"	0	0	1
4182	747	"arg_2"	"timetz"	7	0	2
4183	748	"result"	"date"	0	0	0
4184	748	"arg_1"	"tinyint"	8	0	1
4185	748	"arg_2"	"date"	0	0	2
4186	749	"result"	"date"	0	0	0
4187	749	"arg_1"	"smallint"	16	0	1
4188	749	"arg_2"	"date"	0	0	2
4189	750	"result"	"date"	0	0	0
4190	750	"arg_1"	"int"	32	0	1
4191	750	"arg_2"	"date"	0	0	2
4192	751	"result"	"date"	0	0	0
4193	751	"arg_1"	"oid"	31	0	1
4194	751	"arg_2"	"date"	0	0	2
4195	752	"result"	"date"	0	0	0
4196	752	"arg_1"	"wrd"	32	0	1
4197	752	"arg_2"	"date"	0	0	2
4198	753	"result"	"date"	0	0	0
4199	753	"arg_1"	"bigint"	64	0	1
4200	753	"arg_2"	"date"	0	0	2
4201	754	"result"	"date"	0	0	0
4202	754	"arg_1"	"decimal"	2	0	1
4203	754	"arg_2"	"date"	0	0	2
4204	755	"result"	"date"	0	0	0
4205	755	"arg_1"	"decimal"	4	0	1
4206	755	"arg_2"	"date"	0	0	2
4207	756	"result"	"date"	0	0	0
4208	756	"arg_1"	"decimal"	9	0	1
4209	756	"arg_2"	"date"	0	0	2
4210	757	"result"	"date"	0	0	0
4211	757	"arg_1"	"decimal"	19	0	1
4212	757	"arg_2"	"date"	0	0	2
4213	758	"result"	"date"	0	0	0
4214	758	"arg_1"	"real"	24	0	1
4215	758	"arg_2"	"date"	0	0	2
4216	759	"result"	"date"	0	0	0
4217	759	"arg_1"	"double"	53	0	1
4218	759	"arg_2"	"date"	0	0	2
4219	760	"result"	"date"	0	0	0
4220	760	"arg_1"	"month_interval"	32	0	1
4221	760	"arg_2"	"date"	0	0	2
4222	761	"result"	"date"	0	0	0
4223	761	"arg_1"	"sec_interval"	19	0	1
4224	761	"arg_2"	"date"	0	0	2
4225	762	"result"	"date"	0	0	0
4226	762	"arg_1"	"time"	7	0	1
4227	762	"arg_2"	"date"	0	0	2
4228	763	"result"	"date"	0	0	0
4229	763	"arg_1"	"timetz"	7	0	1
4230	763	"arg_2"	"date"	0	0	2
4231	764	"result"	"date"	0	0	0
4232	764	"arg_1"	"date"	0	0	1
4233	764	"arg_2"	"date"	0	0	2
4234	765	"result"	"date"	0	0	0
4235	765	"arg_1"	"timestamp"	7	0	1
4236	765	"arg_2"	"date"	0	0	2
4237	766	"result"	"date"	0	0	0
4238	766	"arg_1"	"timestamptz"	7	0	1
4239	766	"arg_2"	"date"	0	0	2
4240	767	"result"	"date"	0	0	0
4241	767	"arg_1"	"blob"	0	0	1
4242	767	"arg_2"	"date"	0	0	2
4243	768	"result"	"timestamp"	7	0	0
4244	768	"arg_1"	"tinyint"	8	0	1
4245	768	"arg_2"	"timestamp"	7	0	2
4246	769	"result"	"timestamp"	7	0	0
4247	769	"arg_1"	"smallint"	16	0	1
4248	769	"arg_2"	"timestamp"	7	0	2
4249	770	"result"	"timestamp"	7	0	0
4250	770	"arg_1"	"int"	32	0	1
4251	770	"arg_2"	"timestamp"	7	0	2
4252	771	"result"	"timestamp"	7	0	0
4253	771	"arg_1"	"oid"	31	0	1
4254	771	"arg_2"	"timestamp"	7	0	2
4255	772	"result"	"timestamp"	7	0	0
4256	772	"arg_1"	"wrd"	32	0	1
4257	772	"arg_2"	"timestamp"	7	0	2
4258	773	"result"	"timestamp"	7	0	0
4259	773	"arg_1"	"bigint"	64	0	1
4260	773	"arg_2"	"timestamp"	7	0	2
4261	774	"result"	"timestamp"	7	0	0
4262	774	"arg_1"	"decimal"	2	0	1
4263	774	"arg_2"	"timestamp"	7	0	2
4264	775	"result"	"timestamp"	7	0	0
4265	775	"arg_1"	"decimal"	4	0	1
4266	775	"arg_2"	"timestamp"	7	0	2
4267	776	"result"	"timestamp"	7	0	0
4268	776	"arg_1"	"decimal"	9	0	1
4269	776	"arg_2"	"timestamp"	7	0	2
4270	777	"result"	"timestamp"	7	0	0
4271	777	"arg_1"	"decimal"	19	0	1
4272	777	"arg_2"	"timestamp"	7	0	2
4273	778	"result"	"timestamp"	7	0	0
4274	778	"arg_1"	"real"	24	0	1
4275	778	"arg_2"	"timestamp"	7	0	2
4276	779	"result"	"timestamp"	7	0	0
4277	779	"arg_1"	"double"	53	0	1
4278	779	"arg_2"	"timestamp"	7	0	2
4279	780	"result"	"timestamp"	7	0	0
4280	780	"arg_1"	"month_interval"	32	0	1
4281	780	"arg_2"	"timestamp"	7	0	2
4282	781	"result"	"timestamp"	7	0	0
4283	781	"arg_1"	"sec_interval"	19	0	1
4284	781	"arg_2"	"timestamp"	7	0	2
4285	782	"result"	"timestamp"	7	0	0
4286	782	"arg_1"	"time"	7	0	1
4287	782	"arg_2"	"timestamp"	7	0	2
4288	783	"result"	"timestamp"	7	0	0
4289	783	"arg_1"	"timetz"	7	0	1
4290	783	"arg_2"	"timestamp"	7	0	2
4291	784	"result"	"timestamp"	7	0	0
4292	784	"arg_1"	"date"	0	0	1
4293	784	"arg_2"	"timestamp"	7	0	2
4294	785	"result"	"timestamp"	7	0	0
4295	785	"arg_1"	"timestamp"	7	0	1
4296	785	"arg_2"	"timestamp"	7	0	2
4297	786	"result"	"timestamp"	7	0	0
4298	786	"arg_1"	"timestamptz"	7	0	1
4299	786	"arg_2"	"timestamp"	7	0	2
4300	787	"result"	"timestamp"	7	0	0
4301	787	"arg_1"	"blob"	0	0	1
4302	787	"arg_2"	"timestamp"	7	0	2
4303	788	"result"	"timestamptz"	7	0	0
4304	788	"arg_1"	"tinyint"	8	0	1
4305	788	"arg_2"	"timestamptz"	7	0	2
4306	789	"result"	"timestamptz"	7	0	0
4307	789	"arg_1"	"smallint"	16	0	1
4308	789	"arg_2"	"timestamptz"	7	0	2
4309	790	"result"	"timestamptz"	7	0	0
4310	790	"arg_1"	"int"	32	0	1
4311	790	"arg_2"	"timestamptz"	7	0	2
4312	791	"result"	"timestamptz"	7	0	0
4313	791	"arg_1"	"oid"	31	0	1
4314	791	"arg_2"	"timestamptz"	7	0	2
4315	792	"result"	"timestamptz"	7	0	0
4316	792	"arg_1"	"wrd"	32	0	1
4317	792	"arg_2"	"timestamptz"	7	0	2
4318	793	"result"	"timestamptz"	7	0	0
4319	793	"arg_1"	"bigint"	64	0	1
4320	793	"arg_2"	"timestamptz"	7	0	2
4321	794	"result"	"timestamptz"	7	0	0
4322	794	"arg_1"	"decimal"	2	0	1
4323	794	"arg_2"	"timestamptz"	7	0	2
4324	795	"result"	"timestamptz"	7	0	0
4325	795	"arg_1"	"decimal"	4	0	1
4326	795	"arg_2"	"timestamptz"	7	0	2
4327	796	"result"	"timestamptz"	7	0	0
4328	796	"arg_1"	"decimal"	9	0	1
4329	796	"arg_2"	"timestamptz"	7	0	2
4330	797	"result"	"timestamptz"	7	0	0
4331	797	"arg_1"	"decimal"	19	0	1
4332	797	"arg_2"	"timestamptz"	7	0	2
4333	798	"result"	"timestamptz"	7	0	0
4334	798	"arg_1"	"real"	24	0	1
4335	798	"arg_2"	"timestamptz"	7	0	2
4336	799	"result"	"timestamptz"	7	0	0
4337	799	"arg_1"	"double"	53	0	1
4338	799	"arg_2"	"timestamptz"	7	0	2
4339	800	"result"	"timestamptz"	7	0	0
4340	800	"arg_1"	"month_interval"	32	0	1
4341	800	"arg_2"	"timestamptz"	7	0	2
4342	801	"result"	"timestamptz"	7	0	0
4343	801	"arg_1"	"sec_interval"	19	0	1
4344	801	"arg_2"	"timestamptz"	7	0	2
4345	802	"result"	"timestamptz"	7	0	0
4346	802	"arg_1"	"time"	7	0	1
4347	802	"arg_2"	"timestamptz"	7	0	2
4348	803	"result"	"timestamptz"	7	0	0
4349	803	"arg_1"	"timetz"	7	0	1
4350	803	"arg_2"	"timestamptz"	7	0	2
4351	804	"result"	"timestamptz"	7	0	0
4352	804	"arg_1"	"date"	0	0	1
4353	804	"arg_2"	"timestamptz"	7	0	2
4354	805	"result"	"timestamptz"	7	0	0
4355	805	"arg_1"	"timestamp"	7	0	1
4356	805	"arg_2"	"timestamptz"	7	0	2
4357	806	"result"	"timestamptz"	7	0	0
4358	806	"arg_1"	"timestamptz"	7	0	1
4359	806	"arg_2"	"timestamptz"	7	0	2
4360	807	"result"	"timestamptz"	7	0	0
4361	807	"arg_1"	"blob"	0	0	1
4362	807	"arg_2"	"timestamptz"	7	0	2
4363	808	"result"	"blob"	0	0	0
4364	808	"arg_1"	"tinyint"	8	0	1
4365	808	"arg_2"	"blob"	0	0	2
4366	809	"result"	"blob"	0	0	0
4367	809	"arg_1"	"smallint"	16	0	1
4368	809	"arg_2"	"blob"	0	0	2
4369	810	"result"	"blob"	0	0	0
4370	810	"arg_1"	"int"	32	0	1
4371	810	"arg_2"	"blob"	0	0	2
4372	811	"result"	"blob"	0	0	0
4373	811	"arg_1"	"oid"	31	0	1
4374	811	"arg_2"	"blob"	0	0	2
4375	812	"result"	"blob"	0	0	0
4376	812	"arg_1"	"wrd"	32	0	1
4377	812	"arg_2"	"blob"	0	0	2
4378	813	"result"	"blob"	0	0	0
4379	813	"arg_1"	"bigint"	64	0	1
4380	813	"arg_2"	"blob"	0	0	2
4381	814	"result"	"blob"	0	0	0
4382	814	"arg_1"	"decimal"	2	0	1
4383	814	"arg_2"	"blob"	0	0	2
4384	815	"result"	"blob"	0	0	0
4385	815	"arg_1"	"decimal"	4	0	1
4386	815	"arg_2"	"blob"	0	0	2
4387	816	"result"	"blob"	0	0	0
4388	816	"arg_1"	"decimal"	9	0	1
4389	816	"arg_2"	"blob"	0	0	2
4390	817	"result"	"blob"	0	0	0
4391	817	"arg_1"	"decimal"	19	0	1
4392	817	"arg_2"	"blob"	0	0	2
4393	818	"result"	"blob"	0	0	0
4394	818	"arg_1"	"real"	24	0	1
4395	818	"arg_2"	"blob"	0	0	2
4396	819	"result"	"blob"	0	0	0
4397	819	"arg_1"	"double"	53	0	1
4398	819	"arg_2"	"blob"	0	0	2
4399	820	"result"	"blob"	0	0	0
4400	820	"arg_1"	"month_interval"	32	0	1
4401	820	"arg_2"	"blob"	0	0	2
4402	821	"result"	"blob"	0	0	0
4403	821	"arg_1"	"sec_interval"	19	0	1
4404	821	"arg_2"	"blob"	0	0	2
4405	822	"result"	"blob"	0	0	0
4406	822	"arg_1"	"time"	7	0	1
4407	822	"arg_2"	"blob"	0	0	2
4408	823	"result"	"blob"	0	0	0
4409	823	"arg_1"	"timetz"	7	0	1
4410	823	"arg_2"	"blob"	0	0	2
4411	824	"result"	"blob"	0	0	0
4412	824	"arg_1"	"date"	0	0	1
4413	824	"arg_2"	"blob"	0	0	2
4414	825	"result"	"blob"	0	0	0
4415	825	"arg_1"	"timestamp"	7	0	1
4416	825	"arg_2"	"blob"	0	0	2
4417	826	"result"	"blob"	0	0	0
4418	826	"arg_1"	"timestamptz"	7	0	1
4419	826	"arg_2"	"blob"	0	0	2
4420	827	"result"	"blob"	0	0	0
4421	827	"arg_1"	"blob"	0	0	1
4422	827	"arg_2"	"blob"	0	0	2
4423	828	"result"	"double"	53	0	0
4424	828	"arg_1"	"double"	53	0	1
4425	828	"arg_2"	"double"	53	0	2
4426	829	"result"	"double"	53	0	0
4427	829	"arg_1"	"double"	53	0	1
4428	830	"result"	"double"	53	0	0
4429	830	"arg_1"	"double"	53	0	1
4430	831	"result"	"double"	53	0	0
4431	831	"arg_1"	"double"	53	0	1
4432	832	"result"	"double"	53	0	0
4433	832	"arg_1"	"double"	53	0	1
4434	833	"result"	"double"	53	0	0
4435	833	"arg_1"	"double"	53	0	1
4436	834	"result"	"double"	53	0	0
4437	834	"arg_1"	"double"	53	0	1
4438	835	"result"	"double"	53	0	0
4439	835	"arg_1"	"double"	53	0	1
4440	836	"result"	"double"	53	0	0
4441	836	"arg_1"	"double"	53	0	1
4442	837	"result"	"double"	53	0	0
4443	837	"arg_1"	"double"	53	0	1
4444	838	"result"	"double"	53	0	0
4445	838	"arg_1"	"double"	53	0	1
4446	838	"arg_2"	"double"	53	0	2
4447	839	"result"	"double"	53	0	0
4448	839	"arg_1"	"double"	53	0	1
4449	840	"result"	"double"	53	0	0
4450	840	"arg_1"	"double"	53	0	1
4451	841	"result"	"double"	53	0	0
4452	841	"arg_1"	"double"	53	0	1
4453	842	"result"	"double"	53	0	0
4454	842	"arg_1"	"double"	53	0	1
4455	843	"result"	"double"	53	0	0
4456	843	"arg_1"	"double"	53	0	1
4457	844	"result"	"double"	53	0	0
4458	844	"arg_1"	"double"	53	0	1
4459	845	"result"	"double"	53	0	0
4460	845	"arg_1"	"double"	53	0	1
4461	846	"result"	"double"	53	0	0
4462	846	"arg_1"	"double"	53	0	1
4463	847	"result"	"real"	24	0	0
4464	847	"arg_1"	"real"	24	0	1
4465	847	"arg_2"	"real"	24	0	2
4466	848	"result"	"real"	24	0	0
4467	848	"arg_1"	"real"	24	0	1
4468	849	"result"	"real"	24	0	0
4469	849	"arg_1"	"real"	24	0	1
4470	850	"result"	"real"	24	0	0
4471	850	"arg_1"	"real"	24	0	1
4472	851	"result"	"real"	24	0	0
4473	851	"arg_1"	"real"	24	0	1
4474	852	"result"	"real"	24	0	0
4475	852	"arg_1"	"real"	24	0	1
4476	853	"result"	"real"	24	0	0
4477	853	"arg_1"	"real"	24	0	1
4478	854	"result"	"real"	24	0	0
4479	854	"arg_1"	"real"	24	0	1
4480	855	"result"	"real"	24	0	0
4481	855	"arg_1"	"real"	24	0	1
4482	856	"result"	"real"	24	0	0
4483	856	"arg_1"	"real"	24	0	1
4484	857	"result"	"real"	24	0	0
4485	857	"arg_1"	"real"	24	0	1
4486	857	"arg_2"	"real"	24	0	2
4487	858	"result"	"real"	24	0	0
4488	858	"arg_1"	"real"	24	0	1
4489	859	"result"	"real"	24	0	0
4490	859	"arg_1"	"real"	24	0	1
4491	860	"result"	"real"	24	0	0
4492	860	"arg_1"	"real"	24	0	1
4493	861	"result"	"real"	24	0	0
4494	861	"arg_1"	"real"	24	0	1
4495	862	"result"	"real"	24	0	0
4496	862	"arg_1"	"real"	24	0	1
4497	863	"result"	"real"	24	0	0
4498	863	"arg_1"	"real"	24	0	1
4499	864	"result"	"real"	24	0	0
4500	864	"arg_1"	"real"	24	0	1
4501	865	"result"	"real"	24	0	0
4502	865	"arg_1"	"real"	24	0	1
4503	866	"result"	"double"	53	0	0
4504	867	"result"	"int"	32	0	0
4505	868	"result"	"int"	32	0	0
4506	868	"arg_1"	"int"	32	0	1
4507	869	"result"	"date"	0	0	0
4508	870	"result"	"date"	0	0	0
4509	871	"result"	"timetz"	7	0	0
4510	872	"result"	"timetz"	7	0	0
4511	873	"result"	"timestamptz"	7	0	0
4512	874	"result"	"time"	7	0	0
4513	875	"result"	"timestamp"	7	0	0
4514	876	"result"	"date"	0	0	0
4515	876	"arg_1"	"date"	0	0	1
4516	876	"arg_2"	"sec_interval"	19	0	2
4517	877	"result"	"date"	0	0	0
4518	877	"arg_1"	"date"	0	0	1
4519	877	"arg_2"	"month_interval"	32	0	2
4520	878	"result"	"timestamp"	7	0	0
4521	878	"arg_1"	"timestamp"	7	0	1
4522	878	"arg_2"	"sec_interval"	19	0	2
4523	879	"result"	"timestamp"	7	0	0
4524	879	"arg_1"	"timestamp"	7	0	1
4525	879	"arg_2"	"month_interval"	32	0	2
4526	880	"result"	"timestamptz"	7	0	0
4527	880	"arg_1"	"timestamptz"	7	0	1
4528	880	"arg_2"	"sec_interval"	19	0	2
4529	881	"result"	"timestamptz"	7	0	0
4530	881	"arg_1"	"timestamptz"	7	0	1
4531	881	"arg_2"	"month_interval"	32	0	2
4532	882	"result"	"time"	7	0	0
4533	882	"arg_1"	"time"	7	0	1
4534	882	"arg_2"	"sec_interval"	19	0	2
4535	883	"result"	"int"	32	0	0
4536	883	"arg_1"	"date"	0	0	1
4537	883	"arg_2"	"date"	0	0	2
4538	884	"result"	"bigint"	64	0	0
4539	884	"arg_1"	"timestamp"	7	0	1
4540	884	"arg_2"	"timestamp"	7	0	2
4541	885	"result"	"bigint"	64	0	0
4542	885	"arg_1"	"timestamptz"	7	0	1
4543	885	"arg_2"	"timestamptz"	7	0	2
4544	886	"result"	"date"	0	0	0
4545	886	"arg_1"	"date"	0	0	1
4546	886	"arg_2"	"sec_interval"	19	0	2
4547	887	"result"	"date"	0	0	0
4548	887	"arg_1"	"date"	0	0	1
4549	887	"arg_2"	"month_interval"	32	0	2
4550	888	"result"	"timestamp"	7	0	0
4551	888	"arg_1"	"timestamp"	7	0	1
4552	888	"arg_2"	"sec_interval"	19	0	2
4553	889	"result"	"timestamp"	7	0	0
4554	889	"arg_1"	"timestamp"	7	0	1
4555	889	"arg_2"	"month_interval"	32	0	2
4556	890	"result"	"timestamptz"	7	0	0
4557	890	"arg_1"	"timestamptz"	7	0	1
4558	890	"arg_2"	"sec_interval"	19	0	2
4559	891	"result"	"timestamptz"	7	0	0
4560	891	"arg_1"	"timestamptz"	7	0	1
4561	891	"arg_2"	"month_interval"	32	0	2
4562	892	"result"	"time"	7	0	0
4563	892	"arg_1"	"time"	7	0	1
4564	892	"arg_2"	"sec_interval"	19	0	2
4565	893	"result"	"sec_interval"	19	0	0
4566	894	"result"	"int"	32	0	0
4567	894	"arg_1"	"date"	0	0	1
4568	895	"result"	"int"	32	0	0
4569	895	"arg_1"	"date"	0	0	1
4570	896	"result"	"int"	32	0	0
4571	896	"arg_1"	"date"	0	0	1
4572	897	"result"	"int"	32	0	0
4573	897	"arg_1"	"time"	7	0	1
4574	898	"result"	"int"	32	0	0
4575	898	"arg_1"	"time"	7	0	1
4576	899	"result"	"decimal"	9	3	0
4577	899	"arg_1"	"time"	7	0	1
4578	900	"result"	"int"	32	0	0
4579	900	"arg_1"	"timestamp"	7	0	1
4580	901	"result"	"int"	32	0	0
4581	901	"arg_1"	"timestamp"	7	0	1
4582	902	"result"	"int"	32	0	0
4583	902	"arg_1"	"timestamp"	7	0	1
4584	903	"result"	"int"	32	0	0
4585	903	"arg_1"	"timestamp"	7	0	1
4586	904	"result"	"int"	32	0	0
4587	904	"arg_1"	"timestamp"	7	0	1
4588	905	"result"	"decimal"	9	3	0
4589	905	"arg_1"	"timestamp"	7	0	1
4590	906	"result"	"int"	32	0	0
4591	906	"arg_1"	"timestamptz"	7	0	1
4592	907	"result"	"int"	32	0	0
4593	907	"arg_1"	"timestamptz"	7	0	1
4594	908	"result"	"int"	32	0	0
4595	908	"arg_1"	"timestamptz"	7	0	1
4596	909	"result"	"int"	32	0	0
4597	909	"arg_1"	"timestamptz"	7	0	1
4598	910	"result"	"int"	32	0	0
4599	910	"arg_1"	"timestamptz"	7	0	1
4600	911	"result"	"decimal"	9	3	0
4601	911	"arg_1"	"timestamptz"	7	0	1
4602	912	"result"	"int"	32	0	0
4603	912	"arg_1"	"month_interval"	32	0	1
4604	913	"result"	"int"	32	0	0
4605	913	"arg_1"	"month_interval"	32	0	1
4606	914	"result"	"bigint"	64	0	0
4607	914	"arg_1"	"sec_interval"	19	0	1
4608	915	"result"	"int"	32	0	0
4609	915	"arg_1"	"sec_interval"	19	0	1
4610	916	"result"	"int"	32	0	0
4611	916	"arg_1"	"sec_interval"	19	0	1
4612	917	"result"	"int"	32	0	0
4613	917	"arg_1"	"sec_interval"	19	0	1
4614	918	"result"	"int"	32	0	0
4615	918	"arg_1"	"date"	0	0	1
4616	919	"result"	"int"	32	0	0
4617	919	"arg_1"	"date"	0	0	1
4618	920	"result"	"int"	32	0	0
4619	920	"arg_1"	"date"	0	0	1
4620	921	"result"	"int"	32	0	0
4621	921	"arg_1"	"date"	0	0	1
4622	922	"result"	"int"	32	0	0
4623	922	"arg_1"	"date"	0	0	1
4624	923	"result"	"bigint"	64	0	0
4625	923	"arg_1"	"varchar"	0	0	1
4626	923	"arg_2"	"varchar"	0	0	2
4627	924	"result"	"bigint"	64	0	0
4628	924	"arg_1"	"varchar"	0	0	1
4629	924	"arg_2"	"varchar"	0	0	2
4630	925	"result"	"bigint"	64	0	0
4631	925	"arg_1"	"varchar"	0	0	1
4632	925	"arg_2"	"varchar"	0	0	2
4633	925	"arg_3"	"bigint"	64	0	3
4634	926	"result"	"int"	32	0	0
4635	926	"arg_1"	"char"	0	0	1
4636	926	"arg_2"	"char"	0	0	2
4637	927	"result"	"int"	32	0	0
4638	927	"arg_1"	"char"	0	0	1
4639	927	"arg_2"	"char"	0	0	2
4640	927	"arg_3"	"int"	32	0	3
4641	928	"result"	"char"	0	0	0
4642	928	"arg_1"	"char"	0	0	1
4643	928	"arg_2"	"int"	32	0	2
4644	929	"result"	"char"	0	0	0
4645	929	"arg_1"	"char"	0	0	1
4646	929	"arg_2"	"int"	32	0	2
4647	929	"arg_3"	"int"	32	0	3
4648	930	"result"	"boolean"	1	0	0
4649	930	"arg_1"	"char"	0	0	1
4650	930	"arg_2"	"char"	0	0	2
4651	931	"result"	"boolean"	1	0	0
4652	931	"arg_1"	"char"	0	0	1
4653	931	"arg_2"	"char"	0	0	2
4654	931	"arg_3"	"char"	0	0	3
4655	932	"result"	"boolean"	1	0	0
4656	932	"arg_1"	"char"	0	0	1
4657	932	"arg_2"	"char"	0	0	2
4658	933	"result"	"boolean"	1	0	0
4659	933	"arg_1"	"char"	0	0	1
4660	933	"arg_2"	"char"	0	0	2
4661	933	"arg_3"	"char"	0	0	3
4662	934	"result"	"boolean"	1	0	0
4663	934	"arg_1"	"char"	0	0	1
4664	934	"arg_2"	"char"	0	0	2
4665	935	"result"	"boolean"	1	0	0
4666	935	"arg_1"	"char"	0	0	1
4667	935	"arg_2"	"char"	0	0	2
4668	935	"arg_3"	"char"	0	0	3
4669	936	"result"	"boolean"	1	0	0
4670	936	"arg_1"	"char"	0	0	1
4671	936	"arg_2"	"char"	0	0	2
4672	937	"result"	"boolean"	1	0	0
4673	937	"arg_1"	"char"	0	0	1
4674	937	"arg_2"	"char"	0	0	2
4675	937	"arg_3"	"char"	0	0	3
4676	938	"result"	"int"	32	0	0
4677	938	"arg_1"	"char"	0	0	1
4678	938	"arg_2"	"char"	0	0	2
4679	939	"result"	"char"	0	0	0
4680	939	"arg_1"	"char"	0	0	1
4681	939	"arg_2"	"int"	32	0	2
4682	940	"result"	"char"	0	0	0
4683	940	"arg_1"	"char"	0	0	1
4684	940	"arg_2"	"char"	0	0	2
4685	941	"result"	"int"	32	0	0
4686	941	"arg_1"	"char"	0	0	1
4687	942	"result"	"char"	0	0	0
4688	942	"arg_1"	"int"	32	0	1
4689	943	"result"	"int"	32	0	0
4690	943	"arg_1"	"char"	0	0	1
4691	944	"result"	"char"	0	0	0
4692	944	"arg_1"	"char"	0	0	1
4693	944	"arg_2"	"int"	32	0	2
4694	945	"result"	"char"	0	0	0
4695	945	"arg_1"	"char"	0	0	1
4696	945	"arg_2"	"int"	32	0	2
4697	946	"result"	"char"	0	0	0
4698	946	"arg_1"	"char"	0	0	1
4699	947	"result"	"char"	0	0	0
4700	947	"arg_1"	"char"	0	0	1
4701	948	"result"	"char"	0	0	0
4702	948	"arg_1"	"char"	0	0	1
4703	949	"result"	"char"	0	0	0
4704	949	"arg_1"	"char"	0	0	1
4705	950	"result"	"char"	0	0	0
4706	950	"arg_1"	"char"	0	0	1
4707	951	"result"	"char"	0	0	0
4708	951	"arg_1"	"char"	0	0	1
4709	952	"result"	"char"	0	0	0
4710	952	"arg_1"	"char"	0	0	1
4711	953	"result"	"char"	0	0	0
4712	953	"arg_1"	"char"	0	0	1
4713	953	"arg_2"	"int"	32	0	2
4714	953	"arg_3"	"int"	32	0	3
4715	953	"arg_4"	"char"	0	0	4
4716	954	"result"	"char"	0	0	0
4717	954	"arg_1"	"char"	0	0	1
4718	954	"arg_2"	"char"	0	0	2
4719	954	"arg_3"	"char"	0	0	3
4720	955	"result"	"char"	0	0	0
4721	955	"arg_1"	"char"	0	0	1
4722	955	"arg_2"	"int"	32	0	2
4723	956	"result"	"char"	0	0	0
4724	956	"arg_1"	"int"	32	0	1
4725	957	"result"	"int"	32	0	0
4726	957	"arg_1"	"char"	0	0	1
4727	958	"result"	"int"	32	0	0
4728	958	"arg_1"	"char"	0	0	1
4729	959	"result"	"int"	32	0	0
4730	959	"arg_1"	"char"	0	0	1
4731	960	"result"	"char"	0	0	0
4732	960	"arg_1"	"char"	0	0	1
4733	961	"result"	"int"	32	0	0
4734	961	"arg_1"	"char"	0	0	1
4735	961	"arg_2"	"char"	0	0	2
4736	962	"result"	"int"	32	0	0
4737	962	"arg_1"	"char"	0	0	1
4738	962	"arg_2"	"char"	0	0	2
4739	963	"result"	"int"	32	0	0
4740	963	"arg_1"	"char"	0	0	1
4741	963	"arg_2"	"char"	0	0	2
4742	964	"result"	"double"	53	0	0
4743	964	"arg_1"	"char"	0	0	1
4744	964	"arg_2"	"char"	0	0	2
4745	965	"result"	"char"	0	0	0
4746	965	"arg_1"	"char"	0	0	1
4747	966	"result"	"int"	32	0	0
4748	966	"arg_1"	"char"	0	0	1
4749	966	"arg_2"	"char"	0	0	2
4750	967	"result"	"int"	32	0	0
4751	967	"arg_1"	"char"	0	0	1
4752	967	"arg_2"	"char"	0	0	2
4753	967	"arg_3"	"int"	32	0	3
4754	967	"arg_4"	"int"	32	0	4
4755	967	"arg_5"	"int"	32	0	5
4756	968	"result"	"int"	32	0	0
4757	968	"arg_1"	"varchar"	0	0	1
4758	968	"arg_2"	"varchar"	0	0	2
4759	969	"result"	"int"	32	0	0
4760	969	"arg_1"	"varchar"	0	0	1
4761	969	"arg_2"	"varchar"	0	0	2
4762	969	"arg_3"	"int"	32	0	3
4763	970	"result"	"varchar"	0	0	0
4764	970	"arg_1"	"varchar"	0	0	1
4765	970	"arg_2"	"int"	32	0	2
4766	971	"result"	"varchar"	0	0	0
4767	971	"arg_1"	"varchar"	0	0	1
4768	971	"arg_2"	"int"	32	0	2
4769	971	"arg_3"	"int"	32	0	3
4770	972	"result"	"boolean"	1	0	0
4771	972	"arg_1"	"varchar"	0	0	1
4772	972	"arg_2"	"varchar"	0	0	2
4773	973	"result"	"boolean"	1	0	0
4774	973	"arg_1"	"varchar"	0	0	1
4775	973	"arg_2"	"varchar"	0	0	2
4776	973	"arg_3"	"varchar"	0	0	3
4777	974	"result"	"boolean"	1	0	0
4778	974	"arg_1"	"varchar"	0	0	1
4779	974	"arg_2"	"varchar"	0	0	2
4780	975	"result"	"boolean"	1	0	0
4781	975	"arg_1"	"varchar"	0	0	1
4782	975	"arg_2"	"varchar"	0	0	2
4783	975	"arg_3"	"varchar"	0	0	3
4784	976	"result"	"boolean"	1	0	0
4785	976	"arg_1"	"varchar"	0	0	1
4786	976	"arg_2"	"varchar"	0	0	2
4787	977	"result"	"boolean"	1	0	0
4788	977	"arg_1"	"varchar"	0	0	1
4789	977	"arg_2"	"varchar"	0	0	2
4790	977	"arg_3"	"varchar"	0	0	3
4791	978	"result"	"boolean"	1	0	0
4792	978	"arg_1"	"varchar"	0	0	1
4793	978	"arg_2"	"varchar"	0	0	2
4794	979	"result"	"boolean"	1	0	0
4795	979	"arg_1"	"varchar"	0	0	1
4796	979	"arg_2"	"varchar"	0	0	2
4797	979	"arg_3"	"varchar"	0	0	3
4798	980	"result"	"int"	32	0	0
4799	980	"arg_1"	"varchar"	0	0	1
4800	980	"arg_2"	"varchar"	0	0	2
4801	981	"result"	"varchar"	0	0	0
4802	981	"arg_1"	"varchar"	0	0	1
4803	981	"arg_2"	"int"	32	0	2
4804	982	"result"	"varchar"	0	0	0
4805	982	"arg_1"	"varchar"	0	0	1
4806	982	"arg_2"	"varchar"	0	0	2
4807	983	"result"	"int"	32	0	0
4808	983	"arg_1"	"varchar"	0	0	1
4809	984	"result"	"varchar"	0	0	0
4810	984	"arg_1"	"int"	32	0	1
4811	985	"result"	"int"	32	0	0
4812	985	"arg_1"	"varchar"	0	0	1
4813	986	"result"	"varchar"	0	0	0
4814	986	"arg_1"	"varchar"	0	0	1
4815	986	"arg_2"	"int"	32	0	2
4816	987	"result"	"varchar"	0	0	0
4817	987	"arg_1"	"varchar"	0	0	1
4818	987	"arg_2"	"int"	32	0	2
4819	988	"result"	"varchar"	0	0	0
4820	988	"arg_1"	"varchar"	0	0	1
4821	989	"result"	"varchar"	0	0	0
4822	989	"arg_1"	"varchar"	0	0	1
4823	990	"result"	"varchar"	0	0	0
4824	990	"arg_1"	"varchar"	0	0	1
4825	991	"result"	"varchar"	0	0	0
4826	991	"arg_1"	"varchar"	0	0	1
4827	992	"result"	"varchar"	0	0	0
4828	992	"arg_1"	"varchar"	0	0	1
4829	993	"result"	"varchar"	0	0	0
4830	993	"arg_1"	"varchar"	0	0	1
4831	994	"result"	"varchar"	0	0	0
4832	994	"arg_1"	"varchar"	0	0	1
4833	995	"result"	"varchar"	0	0	0
4834	995	"arg_1"	"varchar"	0	0	1
4835	995	"arg_2"	"int"	32	0	2
4836	995	"arg_3"	"int"	32	0	3
4837	995	"arg_4"	"varchar"	0	0	4
4838	996	"result"	"varchar"	0	0	0
4839	996	"arg_1"	"varchar"	0	0	1
4840	996	"arg_2"	"varchar"	0	0	2
4841	996	"arg_3"	"varchar"	0	0	3
4842	997	"result"	"varchar"	0	0	0
4843	997	"arg_1"	"varchar"	0	0	1
4844	997	"arg_2"	"int"	32	0	2
4845	998	"result"	"varchar"	0	0	0
4846	998	"arg_1"	"int"	32	0	1
4847	999	"result"	"int"	32	0	0
4848	999	"arg_1"	"varchar"	0	0	1
4849	1000	"result"	"int"	32	0	0
4850	1000	"arg_1"	"varchar"	0	0	1
4851	1001	"result"	"int"	32	0	0
4852	1001	"arg_1"	"varchar"	0	0	1
4853	1002	"result"	"varchar"	0	0	0
4854	1002	"arg_1"	"varchar"	0	0	1
4855	1003	"result"	"int"	32	0	0
4856	1003	"arg_1"	"varchar"	0	0	1
4857	1003	"arg_2"	"varchar"	0	0	2
4858	1004	"result"	"int"	32	0	0
4859	1004	"arg_1"	"varchar"	0	0	1
4860	1004	"arg_2"	"varchar"	0	0	2
4861	1005	"result"	"int"	32	0	0
4862	1005	"arg_1"	"varchar"	0	0	1
4863	1005	"arg_2"	"varchar"	0	0	2
4864	1006	"result"	"double"	53	0	0
4865	1006	"arg_1"	"varchar"	0	0	1
4866	1006	"arg_2"	"varchar"	0	0	2
4867	1007	"result"	"varchar"	0	0	0
4868	1007	"arg_1"	"varchar"	0	0	1
4869	1008	"result"	"int"	32	0	0
4870	1008	"arg_1"	"varchar"	0	0	1
4871	1008	"arg_2"	"varchar"	0	0	2
4872	1009	"result"	"int"	32	0	0
4873	1009	"arg_1"	"varchar"	0	0	1
4874	1009	"arg_2"	"varchar"	0	0	2
4875	1009	"arg_3"	"int"	32	0	3
4876	1009	"arg_4"	"int"	32	0	4
4877	1009	"arg_5"	"int"	32	0	5
4878	1010	"result"	"int"	32	0	0
4879	1010	"arg_1"	"clob"	0	0	1
4880	1010	"arg_2"	"clob"	0	0	2
4881	1011	"result"	"int"	32	0	0
4882	1011	"arg_1"	"clob"	0	0	1
4883	1011	"arg_2"	"clob"	0	0	2
4884	1011	"arg_3"	"int"	32	0	3
4885	1012	"result"	"clob"	0	0	0
4886	1012	"arg_1"	"clob"	0	0	1
4887	1012	"arg_2"	"int"	32	0	2
4888	1013	"result"	"clob"	0	0	0
4889	1013	"arg_1"	"clob"	0	0	1
4890	1013	"arg_2"	"int"	32	0	2
4891	1013	"arg_3"	"int"	32	0	3
4892	1014	"result"	"boolean"	1	0	0
4893	1014	"arg_1"	"clob"	0	0	1
4894	1014	"arg_2"	"clob"	0	0	2
4895	1015	"result"	"boolean"	1	0	0
4896	1015	"arg_1"	"clob"	0	0	1
4897	1015	"arg_2"	"clob"	0	0	2
4898	1015	"arg_3"	"clob"	0	0	3
4899	1016	"result"	"boolean"	1	0	0
4900	1016	"arg_1"	"clob"	0	0	1
4901	1016	"arg_2"	"clob"	0	0	2
4902	1017	"result"	"boolean"	1	0	0
4903	1017	"arg_1"	"clob"	0	0	1
4904	1017	"arg_2"	"clob"	0	0	2
4905	1017	"arg_3"	"clob"	0	0	3
4906	1018	"result"	"boolean"	1	0	0
4907	1018	"arg_1"	"clob"	0	0	1
4908	1018	"arg_2"	"clob"	0	0	2
4909	1019	"result"	"boolean"	1	0	0
4910	1019	"arg_1"	"clob"	0	0	1
4911	1019	"arg_2"	"clob"	0	0	2
4912	1019	"arg_3"	"clob"	0	0	3
4913	1020	"result"	"boolean"	1	0	0
4914	1020	"arg_1"	"clob"	0	0	1
4915	1020	"arg_2"	"clob"	0	0	2
4916	1021	"result"	"boolean"	1	0	0
4917	1021	"arg_1"	"clob"	0	0	1
4918	1021	"arg_2"	"clob"	0	0	2
4919	1021	"arg_3"	"clob"	0	0	3
4920	1022	"result"	"int"	32	0	0
4921	1022	"arg_1"	"clob"	0	0	1
4922	1022	"arg_2"	"clob"	0	0	2
4923	1023	"result"	"clob"	0	0	0
4924	1023	"arg_1"	"clob"	0	0	1
4925	1023	"arg_2"	"int"	32	0	2
4926	1024	"result"	"clob"	0	0	0
4927	1024	"arg_1"	"clob"	0	0	1
4928	1024	"arg_2"	"clob"	0	0	2
4929	1025	"result"	"int"	32	0	0
4930	1025	"arg_1"	"clob"	0	0	1
4931	1026	"result"	"clob"	0	0	0
4932	1026	"arg_1"	"int"	32	0	1
4933	1027	"result"	"int"	32	0	0
4934	1027	"arg_1"	"clob"	0	0	1
4935	1028	"result"	"clob"	0	0	0
4936	1028	"arg_1"	"clob"	0	0	1
4937	1028	"arg_2"	"int"	32	0	2
4938	1029	"result"	"clob"	0	0	0
4939	1029	"arg_1"	"clob"	0	0	1
4940	1029	"arg_2"	"int"	32	0	2
4941	1030	"result"	"clob"	0	0	0
4942	1030	"arg_1"	"clob"	0	0	1
4943	1031	"result"	"clob"	0	0	0
4944	1031	"arg_1"	"clob"	0	0	1
4945	1032	"result"	"clob"	0	0	0
4946	1032	"arg_1"	"clob"	0	0	1
4947	1033	"result"	"clob"	0	0	0
4948	1033	"arg_1"	"clob"	0	0	1
4949	1034	"result"	"clob"	0	0	0
4950	1034	"arg_1"	"clob"	0	0	1
4951	1035	"result"	"clob"	0	0	0
4952	1035	"arg_1"	"clob"	0	0	1
4953	1036	"result"	"clob"	0	0	0
4954	1036	"arg_1"	"clob"	0	0	1
4955	1037	"result"	"clob"	0	0	0
4956	1037	"arg_1"	"clob"	0	0	1
4957	1037	"arg_2"	"int"	32	0	2
4958	1037	"arg_3"	"int"	32	0	3
4959	1037	"arg_4"	"clob"	0	0	4
4960	1038	"result"	"clob"	0	0	0
4961	1038	"arg_1"	"clob"	0	0	1
4962	1038	"arg_2"	"clob"	0	0	2
4963	1038	"arg_3"	"clob"	0	0	3
4964	1039	"result"	"clob"	0	0	0
4965	1039	"arg_1"	"clob"	0	0	1
4966	1039	"arg_2"	"int"	32	0	2
4967	1040	"result"	"clob"	0	0	0
4968	1040	"arg_1"	"int"	32	0	1
4969	1041	"result"	"int"	32	0	0
4970	1041	"arg_1"	"clob"	0	0	1
4971	1042	"result"	"int"	32	0	0
4972	1042	"arg_1"	"clob"	0	0	1
4973	1043	"result"	"int"	32	0	0
4974	1043	"arg_1"	"clob"	0	0	1
4975	1044	"result"	"clob"	0	0	0
4976	1044	"arg_1"	"clob"	0	0	1
4977	1045	"result"	"int"	32	0	0
4978	1045	"arg_1"	"clob"	0	0	1
4979	1045	"arg_2"	"clob"	0	0	2
4980	1046	"result"	"int"	32	0	0
4981	1046	"arg_1"	"clob"	0	0	1
4982	1046	"arg_2"	"clob"	0	0	2
4983	1047	"result"	"int"	32	0	0
4984	1047	"arg_1"	"clob"	0	0	1
4985	1047	"arg_2"	"clob"	0	0	2
4986	1048	"result"	"double"	53	0	0
4987	1048	"arg_1"	"clob"	0	0	1
4988	1048	"arg_2"	"clob"	0	0	2
4989	1049	"result"	"clob"	0	0	0
4990	1049	"arg_1"	"clob"	0	0	1
4991	1050	"result"	"int"	32	0	0
4992	1050	"arg_1"	"clob"	0	0	1
4993	1050	"arg_2"	"clob"	0	0	2
4994	1051	"result"	"int"	32	0	0
4995	1051	"arg_1"	"clob"	0	0	1
4996	1051	"arg_2"	"clob"	0	0	2
4997	1051	"arg_3"	"int"	32	0	3
4998	1051	"arg_4"	"int"	32	0	4
4999	1051	"arg_5"	"int"	32	0	5
5000	1052	"result"	"table"	0	0	0
5001	1052	"arg_1"	"varchar"	0	0	1
5002	1052	"arg_2"	"varchar"	0	0	2
5003	1052	"arg_3"	"varchar"	0	0	3
5004	1052	"arg_4"	"varchar"	0	0	4
5005	1052	"arg_5"	"varchar"	0	0	5
5006	1052	"arg_6"	"varchar"	0	0	6
5007	1052	"arg_7"	"bigint"	64	0	7
5008	1052	"arg_8"	"bigint"	64	0	8
5009	1053	"result"	"table"	0	0	0
5010	1053	"arg_1"	"varchar"	0	0	1
5011	1053	"arg_2"	"varchar"	0	0	2
5012	1053	"arg_3"	"varchar"	0	0	3
5013	1053	"arg_4"	"varchar"	0	0	4
5014	1053	"arg_5"	"varchar"	0	0	5
5015	1053	"arg_6"	"bigint"	64	0	6
5016	1053	"arg_7"	"bigint"	64	0	7
5017	1054	"result"	"table"	0	0	0
5018	1054	"arg_1"	"varchar"	0	0	1
5019	1054	"arg_2"	"varchar"	0	0	2
5020	27	"result"	"boolean"	1	0	0
5021	27	"arg"	"oid"	31	0	1
5022	39	"result"	"any"	0	0	0
5023	39	"arg"	"any"	0	0	1
5024	40	"result"	"boolean"	1	0	0
5025	40	"arg"	"any"	0	0	1
5026	41	"result"	"boolean"	1	0	0
5027	41	"arg"	"any"	0	0	1
5028	46	"result"	"any"	0	0	0
5029	46	"arg"	"any"	0	0	1
5030	47	"result"	"any"	0	0	0
5031	47	"arg"	"any"	0	0	1
5032	51	"result"	"bigint"	64	0	0
5033	51	"arg"	"tinyint"	8	0	1
5034	52	"result"	"bigint"	64	0	0
5035	52	"arg"	"smallint"	16	0	1
5036	53	"result"	"bigint"	64	0	0
5037	53	"arg"	"int"	32	0	1
5038	54	"result"	"bigint"	64	0	0
5039	54	"arg"	"bigint"	64	0	1
5040	55	"result"	"wrd"	32	0	0
5041	55	"arg"	"wrd"	32	0	1
5042	56	"result"	"decimal"	19	0	0
5043	56	"arg"	"decimal"	2	0	1
5044	57	"result"	"decimal"	19	0	0
5045	57	"arg"	"decimal"	4	0	1
5046	58	"result"	"decimal"	19	0	0
5047	58	"arg"	"decimal"	9	0	1
5048	59	"result"	"decimal"	19	0	0
5049	59	"arg"	"decimal"	19	0	1
5050	60	"result"	"bigint"	64	0	0
5051	60	"arg"	"tinyint"	8	0	1
5052	61	"result"	"bigint"	64	0	0
5053	61	"arg"	"smallint"	16	0	1
5054	62	"result"	"bigint"	64	0	0
5055	62	"arg"	"int"	32	0	1
5056	63	"result"	"bigint"	64	0	0
5057	63	"arg"	"bigint"	64	0	1
5058	64	"result"	"decimal"	19	0	0
5059	64	"arg"	"decimal"	2	0	1
5060	65	"result"	"decimal"	19	0	0
5061	65	"arg"	"decimal"	4	0	1
5062	66	"result"	"decimal"	19	0	0
5063	66	"arg"	"decimal"	9	0	1
5064	67	"result"	"decimal"	19	0	0
5065	67	"arg"	"decimal"	19	0	1
5066	80	"result"	"real"	24	0	0
5067	80	"arg"	"real"	24	0	1
5068	81	"result"	"real"	24	0	0
5069	81	"arg"	"real"	24	0	1
5070	82	"result"	"double"	53	0	0
5071	82	"arg"	"double"	53	0	1
5072	83	"result"	"double"	53	0	0
5073	83	"arg"	"double"	53	0	1
5074	84	"result"	"double"	53	0	0
5075	84	"arg"	"double"	53	0	1
5076	85	"result"	"wrd"	32	0	0
5077	86	"result"	"wrd"	32	0	0
5103	5102	"result"	"table"	5099	0	0
5107	5106	"result"	"table"	5104	0	0
5115	5114	"result"	"table"	5112	0	0
5135	5134	"val"	"clob"	0	0	0
5136	5134	"pat"	"clob"	0	0	1
5137	5134	"esc"	"clob"	0	0	2
5140	5139	"val"	"clob"	0	0	0
5141	5139	"pat"	"clob"	0	0	1
5142	5139	"esc"	"clob"	0	0	2
5145	5144	"result"	"double"	53	0	0
5146	5144	"r"	"double"	53	0	1
5149	5148	"result"	"double"	53	0	0
5150	5148	"d"	"double"	53	0	1
5156	5155	"result"	"clob"	0	0	0
5157	5155	"theurl"	"url"	0	0	1
5160	5159	"result"	"clob"	0	0	0
5161	5159	"theurl"	"url"	0	0	1
5164	5163	"result"	"clob"	0	0	0
5165	5163	"theurl"	"url"	0	0	1
5168	5167	"result"	"clob"	0	0	0
5169	5167	"theurl"	"url"	0	0	1
5172	5171	"result"	"clob"	0	0	0
5173	5171	"theurl"	"url"	0	0	1
5176	5175	"result"	"clob"	0	0	0
5177	5175	"theurl"	"url"	0	0	1
5180	5179	"result"	"clob"	0	0	0
5181	5179	"theurl"	"url"	0	0	1
5184	5183	"result"	"clob"	0	0	0
5185	5183	"theurl"	"url"	0	0	1
5188	5187	"result"	"clob"	0	0	0
5189	5187	"theurl"	"url"	0	0	1
5192	5191	"result"	"clob"	0	0	0
5193	5191	"theurl"	"url"	0	0	1
5196	5195	"result"	"clob"	0	0	0
5197	5195	"theurl"	"url"	0	0	1
5200	5199	"result"	"clob"	0	0	0
5201	5199	"theurl"	"url"	0	0	1
5204	5203	"result"	"clob"	0	0	0
5205	5203	"theurl"	"url"	0	0	1
5208	5207	"result"	"boolean"	1	0	0
5209	5207	"theurl"	"url"	0	0	1
5212	5211	"result"	"url"	0	0	0
5213	5211	"protocol"	"clob"	0	0	1
5214	5211	"hostname"	"clob"	0	0	2
5215	5211	"port"	"int"	32	0	3
5216	5211	"file"	"clob"	0	0	4
5219	5218	"result"	"url"	0	0	0
5220	5218	"protocol"	"clob"	0	0	1
5221	5218	"hostname"	"clob"	0	0	2
5222	5218	"file"	"clob"	0	0	3
5225	5224	"result"	"date"	0	0	0
5226	5224	"s"	"clob"	0	0	1
5227	5224	"format"	"clob"	0	0	2
5230	5229	"result"	"clob"	0	0	0
5231	5229	"d"	"date"	0	0	1
5232	5229	"format"	"clob"	0	0	2
5236	5235	"result"	"inet"	0	0	0
5237	5235	"p"	"inet"	0	0	1
5240	5239	"result"	"clob"	0	0	0
5241	5239	"p"	"inet"	0	0	1
5244	5243	"result"	"int"	32	0	0
5245	5243	"p"	"inet"	0	0	1
5248	5247	"result"	"inet"	0	0	0
5249	5247	"p"	"inet"	0	0	1
5250	5247	"mask"	"int"	32	0	2
5253	5252	"result"	"inet"	0	0	0
5254	5252	"p"	"inet"	0	0	1
5257	5256	"result"	"inet"	0	0	0
5258	5256	"p"	"inet"	0	0	1
5261	5260	"result"	"inet"	0	0	0
5262	5260	"p"	"inet"	0	0	1
5265	5264	"result"	"clob"	0	0	0
5266	5264	"p"	"inet"	0	0	1
5269	5268	"result"	"clob"	0	0	0
5270	5268	"p"	"inet"	0	0	1
5281	5280	"result"	"table"	5271	0	0
5295	5294	"result"	"table"	5282	0	0
5341	5340	"threshold"	"smallint"	16	0	0
5359	5358	"result"	"table"	5344	0	0
5376	5375	"s"	"clob"	0	0	0
5377	5375	"t"	"clob"	0	0	1
5380	5379	"s"	"clob"	0	0	0
5381	5379	"t"	"clob"	0	0	1
5384	5383	"s"	"clob"	0	0	0
5385	5383	"t"	"clob"	0	0	1
5388	5387	"s"	"clob"	0	0	0
5389	5387	"t"	"clob"	0	0	1
5392	5391	"s"	"clob"	0	0	0
5393	5391	"t"	"clob"	0	0	1
5396	5395	"s"	"clob"	0	0	0
5397	5395	"t"	"clob"	0	0	1
5402	5401	"sys"	"clob"	0	0	0
5403	5401	"tab"	"clob"	0	0	1
5406	5405	"sys"	"clob"	0	0	0
5407	5405	"tab"	"clob"	0	0	1
5410	5409	"sys"	"clob"	0	0	0
5411	5409	"tab"	"clob"	0	0	1
5414	5413	"sys"	"clob"	0	0	0
5415	5413	"tab"	"clob"	0	0	1
5418	5417	"sys"	"clob"	0	0	0
5419	5417	"tab"	"clob"	0	0	1
5426	5425	"result"	"table"	5420	0	0
5433	5432	"result"	"table"	5427	0	0
5440	5439	"result"	"table"	5434	0	0
5447	5446	"result"	"table"	5441	0	0
5454	5453	"result"	"table"	5448	0	0
5461	5460	"result"	"table"	5455	0	0
5468	5467	"result"	"table"	5462	0	0
5475	5474	"result"	"table"	5469	0	0
5482	5481	"result"	"table"	5476	0	0
5489	5488	"result"	"table"	5483	0	0
5496	5495	"result"	"table"	5490	0	0
5503	5502	"result"	"table"	5497	0	0
5510	5509	"result"	"table"	5504	0	0
5517	5516	"result"	"table"	5511	0	0
5524	5523	"result"	"table"	5518	0	0
5531	5530	"result"	"table"	5525	0	0
5538	5537	"result"	"table"	5532	0	0
5541	5540	"result"	"clob"	0	0	0
5542	5540	"username"	"clob"	0	0	1
5552	5551	"result"	"table"	5543	0	0
5563	5562	"delay"	"tinyint"	8	0	0
5566	5565	"delay"	"tinyint"	8	0	0
5567	5565	"force"	"boolean"	1	0	1
5570	5569	"query"	"bigint"	64	0	0
5573	5572	"query"	"bigint"	64	0	0
5574	5572	"session"	"bigint"	64	0	1
5577	5576	"timeout"	"bigint"	64	0	0
5580	5579	"result"	"varchar"	32	0	0
5581	5579	"s1"	"varchar"	32	0	1
5582	5579	"st"	"int"	32	0	2
5583	5579	"len"	"int"	32	0	3
5584	5579	"s3"	"varchar"	32	0	4
5587	5586	"result"	"double"	53	0	0
5588	5586	"num"	"double"	53	0	1
5589	5586	"prc"	"int"	32	0	2
5592	5591	"result"	"double"	53	0	0
5593	5591	"num"	"double"	53	0	1
5594	5591	"prc"	"int"	32	0	2
5595	5591	"truncat"	"int"	32	0	3
5598	5597	"result"	"clob"	0	0	0
5599	5597	"num"	"double"	53	0	1
5600	5597	"prc"	"int"	32	0	2
5601	5597	"truncat"	"int"	32	0	3
5604	5603	"result"	"double"	53	0	0
5605	5603	"pdec"	"double"	53	0	1
5606	5603	"pradius"	"double"	53	0	2
5609	5608	"result"	"oid"	31	0	0
5610	5608	"x"	"int"	32	0	1
5611	5608	"y"	"int"	32	0	2
5614	5613	"result"	"int"	32	0	0
5615	5613	"z"	"oid"	31	0	1
5618	5617	"result"	"int"	32	0	0
5619	5617	"z"	"oid"	31	0	1
5625	5624	"result"	"table"	5620	0	0
5631	5630	"result"	"table"	5626	0	0
5634	5633	"filename"	"clob"	0	0	0
5641	5640	"result"	"table"	5635	0	0
5652	5651	"result"	"table"	5647	0	0
5672	5671	"result"	"table"	5657	0	0
5675	5674	"ra_stmt"	"clob"	0	0	0
5676	5674	"opt"	"boolean"	1	0	1
5688	5687	"result"	"table"	5677	0	0
5701	5700	"tag"	"int"	32	0	0
5704	5703	"tag"	"int"	32	0	0
5707	5706	"tag"	"int"	32	0	0
5710	5709	"tag"	"bigint"	64	0	0
5713	5712	"tag"	"bigint"	64	0	0
5716	5715	"tag"	"bigint"	64	0	0
5719	5718	"result"	"double"	53	0	0
5720	5718	"val"	"tinyint"	8	0	1
5723	5722	"result"	"double"	53	0	0
5724	5722	"val"	"smallint"	16	0	1
5727	5726	"result"	"double"	53	0	0
5728	5726	"val"	"int"	32	0	1
5731	5730	"result"	"double"	53	0	0
5732	5730	"val"	"wrd"	32	0	1
5735	5734	"result"	"double"	53	0	0
5736	5734	"val"	"bigint"	64	0	1
5739	5738	"result"	"double"	53	0	0
5740	5738	"val"	"real"	24	0	1
5743	5742	"result"	"double"	53	0	0
5744	5742	"val"	"double"	53	0	1
5747	5746	"result"	"double"	53	0	0
5748	5746	"val"	"date"	0	0	1
5751	5750	"result"	"double"	53	0	0
5752	5750	"val"	"time"	1	0	1
5755	5754	"result"	"double"	53	0	0
5756	5754	"val"	"timestamp"	7	0	1
5759	5758	"result"	"double"	53	0	0
5760	5758	"val"	"tinyint"	8	0	1
5763	5762	"result"	"double"	53	0	0
5764	5762	"val"	"smallint"	16	0	1
5767	5766	"result"	"double"	53	0	0
5768	5766	"val"	"int"	32	0	1
5771	5770	"result"	"double"	53	0	0
5772	5770	"val"	"wrd"	32	0	1
5775	5774	"result"	"double"	53	0	0
5776	5774	"val"	"bigint"	64	0	1
5779	5778	"result"	"double"	53	0	0
5780	5778	"val"	"real"	24	0	1
5783	5782	"result"	"double"	53	0	0
5784	5782	"val"	"double"	53	0	1
5787	5786	"result"	"double"	53	0	0
5788	5786	"val"	"date"	0	0	1
5791	5790	"result"	"double"	53	0	0
5792	5790	"val"	"time"	1	0	1
5795	5794	"result"	"double"	53	0	0
5796	5794	"val"	"timestamp"	7	0	1
5799	5798	"result"	"double"	53	0	0
5800	5798	"val"	"tinyint"	8	0	1
5803	5802	"result"	"double"	53	0	0
5804	5802	"val"	"smallint"	16	0	1
5807	5806	"result"	"double"	53	0	0
5808	5806	"val"	"int"	32	0	1
5811	5810	"result"	"double"	53	0	0
5812	5810	"val"	"wrd"	32	0	1
5815	5814	"result"	"double"	53	0	0
5816	5814	"val"	"bigint"	64	0	1
5819	5818	"result"	"double"	53	0	0
5820	5818	"val"	"real"	24	0	1
5823	5822	"result"	"double"	53	0	0
5824	5822	"val"	"double"	53	0	1
5827	5826	"result"	"double"	53	0	0
5828	5826	"val"	"date"	0	0	1
5831	5830	"result"	"double"	53	0	0
5832	5830	"val"	"time"	1	0	1
5835	5834	"result"	"double"	53	0	0
5836	5834	"val"	"timestamp"	7	0	1
5839	5838	"result"	"double"	53	0	0
5840	5838	"val"	"tinyint"	8	0	1
5843	5842	"result"	"double"	53	0	0
5844	5842	"val"	"smallint"	16	0	1
5847	5846	"result"	"double"	53	0	0
5848	5846	"val"	"int"	32	0	1
5851	5850	"result"	"double"	53	0	0
5852	5850	"val"	"wrd"	32	0	1
5855	5854	"result"	"double"	53	0	0
5856	5854	"val"	"bigint"	64	0	1
5859	5858	"result"	"double"	53	0	0
5860	5858	"val"	"real"	24	0	1
5863	5862	"result"	"double"	53	0	0
5864	5862	"val"	"double"	53	0	1
5867	5866	"result"	"double"	53	0	0
5868	5866	"val"	"date"	0	0	1
5871	5870	"result"	"double"	53	0	0
5872	5870	"val"	"time"	1	0	1
5875	5874	"result"	"double"	53	0	0
5876	5874	"val"	"timestamp"	7	0	1
5879	5878	"result"	"tinyint"	8	0	0
5880	5878	"val"	"tinyint"	8	0	1
5883	5882	"result"	"smallint"	16	0	0
5884	5882	"val"	"smallint"	16	0	1
5887	5886	"result"	"int"	32	0	0
5888	5886	"val"	"int"	32	0	1
5891	5890	"result"	"wrd"	32	0	0
5892	5890	"val"	"wrd"	32	0	1
5895	5894	"result"	"bigint"	64	0	0
5896	5894	"val"	"bigint"	64	0	1
5899	5898	"result"	"decimal"	1	0	0
5900	5898	"val"	"decimal"	1	0	1
5903	5902	"result"	"real"	24	0	0
5904	5902	"val"	"real"	24	0	1
5907	5906	"result"	"double"	53	0	0
5908	5906	"val"	"double"	53	0	1
5911	5910	"result"	"date"	0	0	0
5912	5910	"val"	"date"	0	0	1
5915	5914	"result"	"time"	1	0	0
5916	5914	"val"	"time"	1	0	1
5919	5918	"result"	"timestamp"	7	0	0
5920	5918	"val"	"timestamp"	7	0	1
5923	5922	"result"	"tinyint"	8	0	0
5924	5922	"val"	"tinyint"	8	0	1
5925	5922	"q"	"double"	53	0	2
5928	5927	"result"	"smallint"	16	0	0
5929	5927	"val"	"smallint"	16	0	1
5930	5927	"q"	"double"	53	0	2
5933	5932	"result"	"int"	32	0	0
5934	5932	"val"	"int"	32	0	1
5935	5932	"q"	"double"	53	0	2
5938	5937	"result"	"wrd"	32	0	0
5939	5937	"val"	"wrd"	32	0	1
5940	5937	"q"	"double"	53	0	2
5943	5942	"result"	"bigint"	64	0	0
5944	5942	"val"	"bigint"	64	0	1
5945	5942	"q"	"double"	53	0	2
5948	5947	"result"	"decimal"	1	0	0
5949	5947	"val"	"decimal"	1	0	1
5950	5947	"q"	"double"	53	0	2
5953	5952	"result"	"real"	24	0	0
5954	5952	"val"	"real"	24	0	1
5955	5952	"q"	"double"	53	0	2
5958	5957	"result"	"double"	53	0	0
5959	5957	"val"	"double"	53	0	1
5960	5957	"q"	"double"	53	0	2
5963	5962	"result"	"date"	0	0	0
5964	5962	"val"	"date"	0	0	1
5965	5962	"q"	"double"	53	0	2
5968	5967	"result"	"time"	1	0	0
5969	5967	"val"	"time"	1	0	1
5970	5967	"q"	"double"	53	0	2
5973	5972	"result"	"timestamp"	7	0	0
5974	5972	"val"	"timestamp"	7	0	1
5975	5972	"q"	"double"	53	0	2
5978	5977	"result"	"tinyint"	8	0	0
5979	5977	"e1"	"tinyint"	8	0	1
5980	5977	"e2"	"tinyint"	8	0	2
5983	5982	"result"	"smallint"	16	0	0
5984	5982	"e1"	"smallint"	16	0	1
5985	5982	"e2"	"smallint"	16	0	2
5988	5987	"result"	"int"	32	0	0
5989	5987	"e1"	"int"	32	0	1
5990	5987	"e2"	"int"	32	0	2
5993	5992	"result"	"wrd"	32	0	0
5994	5992	"e1"	"wrd"	32	0	1
5995	5992	"e2"	"wrd"	32	0	2
5998	5997	"result"	"bigint"	64	0	0
5999	5997	"e1"	"bigint"	64	0	1
6000	5997	"e2"	"bigint"	64	0	2
6003	6002	"result"	"real"	24	0	0
6004	6002	"e1"	"real"	24	0	1
6005	6002	"e2"	"real"	24	0	2
6008	6007	"result"	"double"	53	0	0
6009	6007	"e1"	"double"	53	0	1
6010	6007	"e2"	"double"	53	0	2
6026	6025	"result"	"mbr"	0	0	0
6027	6025	"g"	"geometry"	0	0	1
6030	6029	"result"	"boolean"	1	0	0
6031	6029	"a"	"mbr"	0	0	1
6032	6029	"b"	"mbr"	0	0	2
6035	6034	"result"	"geometry"	0	0	0
6036	6034	"wkt"	"clob"	0	0	1
6037	6034	"srid"	"smallint"	16	0	2
6040	6039	"result"	"point"	0	0	0
6041	6039	"wkt"	"clob"	0	0	1
6042	6039	"srid"	"smallint"	16	0	2
6045	6044	"result"	"linestring"	0	0	0
6046	6044	"wkt"	"clob"	0	0	1
6047	6044	"srid"	"smallint"	16	0	2
6050	6049	"result"	"polygon"	0	0	0
6051	6049	"wkt"	"clob"	0	0	1
6052	6049	"srid"	"smallint"	16	0	2
6055	6054	"result"	"multipoint"	0	0	0
6056	6054	"wkt"	"clob"	0	0	1
6057	6054	"srid"	"smallint"	16	0	2
6060	6059	"result"	"multilinestring"	0	0	0
6061	6059	"wkt"	"clob"	0	0	1
6062	6059	"srid"	"smallint"	16	0	2
6065	6064	"result"	"multipolygon"	0	0	0
6066	6064	"wkt"	"clob"	0	0	1
6067	6064	"srid"	"smallint"	16	0	2
6070	6069	"result"	"multipolygon"	0	0	0
6071	6069	"wkt"	"clob"	0	0	1
6072	6069	"srid"	"smallint"	16	0	2
6075	6074	"result"	"polygon"	0	0	0
6076	6074	"wkt"	"clob"	0	0	1
6077	6074	"srid"	"smallint"	16	0	2
6080	6079	"result"	"clob"	0	0	0
6081	6079	"g"	"geometry"	0	0	1
6084	6083	"result"	"double"	53	0	0
6085	6083	"g"	"geometry"	0	0	1
6088	6087	"result"	"double"	53	0	0
6089	6087	"g"	"geometry"	0	0	1
6092	6091	"result"	"point"	0	0	0
6093	6091	"x"	"double"	53	0	1
6094	6091	"y"	"double"	53	0	2
6097	6096	"result"	"int"	32	0	0
6098	6096	"g"	"geometry"	0	0	1
6101	6100	"result"	"int"	32	0	0
6102	6100	"g"	"geometry"	0	0	1
6105	6104	"result"	"int"	32	0	0
6106	6104	"g"	"geometry"	0	0	1
6109	6108	"result"	"geometry"	0	0	0
6110	6108	"g"	"geometry"	0	0	1
6113	6112	"result"	"boolean"	1	0	0
6114	6112	"g"	"geometry"	0	0	1
6117	6116	"result"	"boolean"	1	0	0
6118	6116	"g"	"geometry"	0	0	1
6121	6120	"result"	"geometry"	0	0	0
6122	6120	"g"	"geometry"	0	0	1
6125	6124	"result"	"boolean"	1	0	0
6126	6124	"a"	"geometry"	0	0	1
6127	6124	"b"	"geometry"	0	0	2
6130	6129	"result"	"boolean"	1	0	0
6131	6129	"a"	"geometry"	0	0	1
6132	6129	"b"	"geometry"	0	0	2
6135	6134	"result"	"boolean"	1	0	0
6136	6134	"a"	"geometry"	0	0	1
6137	6134	"b"	"geometry"	0	0	2
6140	6139	"result"	"boolean"	1	0	0
6141	6139	"a"	"geometry"	0	0	1
6142	6139	"b"	"geometry"	0	0	2
6145	6144	"result"	"boolean"	1	0	0
6146	6144	"a"	"geometry"	0	0	1
6147	6144	"b"	"geometry"	0	0	2
6150	6149	"result"	"boolean"	1	0	0
6151	6149	"a"	"geometry"	0	0	1
6152	6149	"b"	"geometry"	0	0	2
6155	6154	"result"	"boolean"	1	0	0
6156	6154	"a"	"geometry"	0	0	1
6157	6154	"b"	"geometry"	0	0	2
6160	6159	"result"	"boolean"	1	0	0
6161	6159	"a"	"geometry"	0	0	1
6162	6159	"b"	"geometry"	0	0	2
6165	6164	"result"	"boolean"	1	0	0
6166	6164	"a"	"geometry"	0	0	1
6167	6164	"b"	"geometry"	0	0	2
6168	6164	"pattern"	"clob"	0	0	3
6171	6170	"result"	"double"	53	0	0
6172	6170	"g"	"geometry"	0	0	1
6175	6174	"result"	"double"	53	0	0
6176	6174	"g"	"geometry"	0	0	1
6179	6178	"result"	"double"	53	0	0
6180	6178	"a"	"geometry"	0	0	1
6181	6178	"b"	"geometry"	0	0	2
6184	6183	"result"	"geometry"	0	0	0
6185	6183	"a"	"geometry"	0	0	1
6186	6183	"distance"	"double"	53	0	2
6189	6188	"result"	"geometry"	0	0	0
6190	6188	"a"	"geometry"	0	0	1
6193	6192	"result"	"geometry"	0	0	0
6194	6192	"a"	"geometry"	0	0	1
6195	6192	"b"	"geometry"	0	0	2
6198	6197	"result"	"geometry"	0	0	0
6199	6197	"a"	"geometry"	0	0	1
6200	6197	"b"	"geometry"	0	0	2
6203	6202	"result"	"geometry"	0	0	0
6204	6202	"a"	"geometry"	0	0	1
6205	6202	"b"	"geometry"	0	0	2
6208	6207	"result"	"geometry"	0	0	0
6209	6207	"a"	"geometry"	0	0	1
6210	6207	"b"	"geometry"	0	0	2
6215	6214	"result"	"json"	0	0	0
6216	6214	"js"	"json"	0	0	1
6217	6214	"name"	"clob"	0	0	2
6220	6219	"result"	"json"	0	0	0
6221	6219	"js"	"json"	0	0	1
6222	6219	"name"	"int"	32	0	2
6225	6224	"result"	"json"	0	0	0
6226	6224	"js"	"json"	0	0	1
6227	6224	"name"	"clob"	0	0	2
6230	6229	"result"	"json"	0	0	0
6231	6229	"js"	"json"	0	0	1
6232	6229	"e"	"clob"	0	0	2
6235	6234	"result"	"clob"	0	0	0
6236	6234	"js"	"json"	0	0	1
6237	6234	"e"	"clob"	0	0	2
6240	6239	"result"	"boolean"	1	0	0
6241	6239	"js"	"clob"	0	0	1
6244	6243	"result"	"boolean"	1	0	0
6245	6243	"js"	"clob"	0	0	1
6248	6247	"result"	"boolean"	1	0	0
6249	6247	"js"	"clob"	0	0	1
6252	6251	"result"	"int"	32	0	0
6253	6251	"js"	"json"	0	0	1
6256	6255	"result"	"clob"	0	0	0
6257	6255	"v"	"clob"	0	0	1
6261	6260	"result"	"uuid"	0	0	0
6264	6263	"result"	"uuid"	0	0	0
6265	6263	"u"	"uuid"	0	0	1
6280	6279	"result"	"table"	6266	0	0
6310	6309	"result"	"bigint"	64	0	0
6311	6309	"nme"	"clob"	0	0	1
6312	6309	"i"	"bigint"	64	0	2
6313	6309	"d"	"bigint"	64	0	3
6316	6315	"result"	"bigint"	64	0	0
6317	6315	"tpe"	"clob"	0	0	1
6318	6315	"i"	"bigint"	64	0	2
6319	6315	"w"	"int"	32	0	3
6322	6321	"result"	"bigint"	64	0	0
6323	6321	"b"	"boolean"	1	0	1
6324	6321	"i"	"bigint"	64	0	2
6337	6336	"result"	"table"	6325	0	0
6377	6376	"tbl"	"clob"	0	0	0
6380	6379	"sch"	"clob"	0	0	0
6381	6379	"tbl"	"clob"	0	0	1
6384	6383	"sch"	"clob"	0	0	0
6385	6383	"tbl"	"clob"	0	0	1
6386	6383	"col"	"clob"	0	0	2
6389	6388	"sample"	"bigint"	64	0	0
6392	6391	"tbl"	"clob"	0	0	0
6393	6391	"sample"	"bigint"	64	0	1
6396	6395	"sch"	"clob"	0	0	0
6397	6395	"tbl"	"clob"	0	0	1
6398	6395	"sample"	"bigint"	64	0	2
6401	6400	"sch"	"clob"	0	0	0
6402	6400	"tbl"	"clob"	0	0	1
6403	6400	"col"	"clob"	0	0	2
6404	6400	"sample"	"bigint"	64	0	3
6407	6406	"result"	"clob"	0	0	0
6408	6406	"src"	"clob"	0	0	1
6411	6410	"result"	"smallint"	16	0	0
6412	6410	"one"	"tinyint"	8	0	1
6413	6410	"two"	"tinyint"	8	0	2
6416	6415	"result"	"int"	32	0	0
6417	6415	"one"	"smallint"	16	0	1
6418	6415	"two"	"smallint"	16	0	2
6421	6420	"result"	"bigint"	64	0	0
6422	6420	"one"	"int"	32	0	1
6423	6420	"two"	"int"	32	0	2
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."auths" (
	"id"      INTEGER,
	"name"    VARCHAR(1024),
	"grantor" INTEGER
);
COPY 3 RECORDS INTO "sys"."auths" FROM stdin USING DELIMITERS '\t','\n','"';
1	"public"	0
2	"sysadmin"	0
3	"monetdb"	0
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."connections" (
	"id"       INTEGER,
	"server"   CHAR(1024),
	"port"     INTEGER,
	"db"       CHAR(64),
	"db_alias" CHAR(1024),
	"user"     CHAR(1024),
	"password" CHAR(1024),
	"language" CHAR(1024)
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."db_user_info" (
	"name"           VARCHAR(1024),
	"fullname"       VARCHAR(2048),
	"default_schema" INTEGER
);
COPY 1 RECORDS INTO "sys"."db_user_info" FROM stdin USING DELIMITERS '\t','\n','"';
"monetdb"	"MonetDB Admin"	2000
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."dependencies" (
	"id"          INTEGER,
	"depend_id"   INTEGER,
	"depend_type" SMALLINT
);
COPY 200 RECORDS INTO "sys"."dependencies" FROM stdin USING DELIMITERS '\t','\n','"';
363	5144	7
364	5144	7
866	5144	7
363	5148	7
364	5148	7
866	5148	7
5280	5304	5
5294	5316	5
5280	5334	5
5294	5334	5
5358	5373	5
2003	5425	7
2001	5425	7
2002	5425	7
5116	5425	7
5125	5432	7
5123	5432	7
5124	5432	7
2005	5432	7
2001	5432	7
2003	5432	7
5078	5439	7
2044	5439	7
2043	5439	7
2046	5439	7
2045	5439	7
5078	5446	7
2085	5446	7
2083	5446	7
2087	5446	7
2080	5446	7
2076	5446	7
34	5446	7
5078	5453	7
2044	5453	7
2043	5453	7
2046	5453	7
2089	5453	7
2088	5453	7
2045	5453	7
2090	5453	7
2091	5453	7
5078	5460	7
2078	5460	7
2076	5460	7
2081	5460	7
2077	5460	7
2080	5460	7
5078	5467	7
2044	5467	7
2043	5467	7
2046	5467	7
2017	5467	7
2016	5467	7
2045	5467	7
2018	5467	7
5088	5474	7
2044	5474	7
2043	5474	7
2046	5474	7
2045	5474	7
5078	5474	7
5088	5481	7
2078	5481	7
2076	5481	7
2081	5481	7
2100	5481	7
2099	5481	7
2101	5481	7
2077	5481	7
2080	5481	7
124	5481	7
31	5481	7
30	5481	7
32	5481	7
5088	5488	7
2085	5488	7
2083	5488	7
2087	5488	7
2100	5488	7
2099	5488	7
2101	5488	7
2084	5488	7
2080	5488	7
2076	5488	7
34	5488	7
31	5488	7
30	5488	7
32	5488	7
5088	5495	7
2044	5495	7
2043	5495	7
2046	5495	7
2045	5495	7
2017	5495	7
2016	5495	7
2018	5495	7
5088	5502	7
2044	5502	7
2043	5502	7
2046	5502	7
2089	5502	7
2088	5502	7
2045	5502	7
2090	5502	7
5078	5509	7
2044	5509	7
2043	5509	7
2046	5509	7
2017	5509	7
2016	5509	7
2045	5509	7
2018	5509	7
5078	5516	7
2044	5516	7
2043	5516	7
2046	5516	7
2089	5516	7
2088	5516	7
2045	5516	7
2090	5516	7
2018	5523	7
2016	5523	7
2017	5523	7
2044	5523	7
2043	5523	7
2046	5523	7
2045	5523	7
2018	5530	7
2016	5530	7
2017	5530	7
2044	5530	7
2043	5530	7
2046	5530	7
2089	5530	7
2088	5530	7
2045	5530	7
2090	5530	7
2080	5537	7
2076	5537	7
2077	5537	7
2081	5537	7
5551	5560	5
111	5579	7
37	5579	7
35	5579	7
985	5579	7
971	5579	7
229	5579	7
982	5579	7
230	5579	7
32	5591	7
427	5591	7
113	5591	7
5586	5591	7
5640	5646	5
5651	5656	5
5687	5698	5
6279	6293	5
6295	6307	13
6305	6307	13
6296	6307	13
6297	6307	13
6298	6307	13
6299	6307	13
6300	6307	13
6301	6307	13
6302	6307	13
6303	6307	13
6304	6307	13
32	6309	7
231	6309	7
237	6309	7
110	6315	7
33	6315	7
230	6315	7
231	6315	7
32	6321	7
231	6321	7
6295	6336	7
6305	6336	7
6296	6336	7
6297	6336	7
6298	6336	7
6300	6336	7
6301	6336	7
6302	6336	7
6303	6336	7
6304	6336	7
6309	6336	7
6315	6336	7
6321	6336	7
6336	6348	5
6336	6357	5
47	6357	5
54	6357	5
50	6357	5
34	6357	5
32	6357	5
231	6357	5
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."functions" (
	"id"          INTEGER,
	"name"        VARCHAR(256),
	"func"        VARCHAR(8196),
	"mod"         VARCHAR(8196),
	"sql"         BOOLEAN,
	"type"        INTEGER,
	"side_effect" BOOLEAN,
	"schema_id"   INTEGER
);
COPY 1267 RECORDS INTO "sys"."functions" FROM stdin USING DELIMITERS '\t','\n','"';
28	"not_uniques"	"not_uniques"	"sql"	false	1	false	0
29	"not_uniques"	"not_uniques"	"sql"	false	1	false	0
30	"hash"	"hash"	"calc"	false	1	false	0
31	"rotate_xor_hash"	"rotate_xor_hash"	"calc"	false	1	false	0
32	"="	"="	"calc"	false	1	false	0
33	"<>"	"!="	"calc"	false	1	false	0
34	"isnull"	"isnil"	"calc"	false	1	false	0
35	">"	">"	"calc"	false	1	false	0
36	">="	">="	"calc"	false	1	false	0
37	"<"	"<"	"calc"	false	1	false	0
38	"<="	"<="	"calc"	false	1	false	0
42	"in"	"in"	"calc"	false	1	false	0
43	"identity"	"identity"	"calc"	false	1	false	0
44	"rowid"	"identity"	"calc"	false	1	false	0
45	"rowid"	"rowid"	"calc"	false	1	false	0
48	"sql_min"	"min"	"calc"	false	1	false	0
49	"sql_max"	"max"	"calc"	false	1	false	0
50	"ifthenelse"	"ifthenelse"	"calc"	false	1	false	0
68	"mod"	"%"	"calc"	false	1	false	0
69	"mod"	"%"	"calc"	false	1	false	0
70	"mod"	"%"	"calc"	false	1	false	0
71	"mod"	"%"	"calc"	false	1	false	0
72	"mod"	"%"	"calc"	false	1	false	0
73	"mod"	"%"	"calc"	false	1	false	0
74	"mod"	"%"	"calc"	false	1	false	0
75	"mod"	"%"	"calc"	false	1	false	0
76	"mod"	"%"	"calc"	false	1	false	0
77	"mod"	"%"	"calc"	false	1	false	0
78	"mod"	"%"	"calc"	false	1	false	0
79	"mod"	"%"	"calc"	false	1	false	0
87	"rank"	"rank_grp"	"calc"	false	1	false	0
88	"dense_rank"	"dense_rank_grp"	"calc"	false	1	false	0
89	"percent_rank"	"precent_rank_grp"	"calc"	false	1	false	0
90	"cume_dist"	"cume_dist_grp"	"calc"	false	1	false	0
91	"row_number"	"mark_grp"	"calc"	false	1	false	0
92	"rank"	"rank_grp"	"calc"	false	1	false	0
93	"dense_rank"	"dense_rank_grp"	"calc"	false	1	false	0
94	"percent_rank"	"precent_rank_grp"	"calc"	false	1	false	0
95	"cume_dist"	"cume_dist_grp"	"calc"	false	1	false	0
96	"row_number"	"mark_grp"	"calc"	false	1	false	0
97	"rank"	"rank_grp"	"calc"	false	1	false	0
98	"dense_rank"	"dense_rank_grp"	"calc"	false	1	false	0
99	"percent_rank"	"precent_rank_grp"	"calc"	false	1	false	0
100	"cume_dist"	"cume_dist_grp"	"calc"	false	1	false	0
101	"row_number"	"mark_grp"	"calc"	false	1	false	0
102	"lag"	"lag_grp"	"calc"	false	1	false	0
103	"lead"	"lead_grp"	"calc"	false	1	false	0
104	"lag"	"lag_grp"	"calc"	false	1	false	0
105	"lead"	"lead_grp"	"calc"	false	1	false	0
106	"lag"	"lag_grp"	"calc"	false	1	false	0
107	"lead"	"lead_grp"	"calc"	false	1	false	0
108	"lag"	"lag_grp"	"calc"	false	1	false	0
109	"lead"	"lead_grp"	"calc"	false	1	false	0
110	"and"	"and"	"calc"	false	1	false	0
111	"or"	"or"	"calc"	false	1	false	0
112	"xor"	"xor"	"calc"	false	1	false	0
113	"not"	"not"	"calc"	false	1	false	0
114	"sql_sub"	"-"	"calc"	false	1	false	0
115	"sql_add"	"+"	"calc"	false	1	false	0
116	"sql_mul"	"*"	"calc"	false	1	false	0
117	"sql_div"	"/"	"calc"	false	1	false	0
118	"bit_and"	"and"	"calc"	false	1	false	0
119	"bit_or"	"or"	"calc"	false	1	false	0
120	"bit_xor"	"xor"	"calc"	false	1	false	0
121	"bit_not"	"not"	"calc"	false	1	false	0
122	"left_shift"	"<<"	"calc"	false	1	false	0
123	"right_shift"	">>"	"calc"	false	1	false	0
124	"sql_neg"	"-"	"calc"	false	1	false	0
125	"abs"	"abs"	"calc"	false	1	false	0
126	"sign"	"sign"	"calc"	false	1	false	0
127	"scale_up"	"*"	"calc"	false	1	false	0
128	"scale_down"	"dec_round"	"sql"	false	1	false	0
129	"sql_sub"	"-"	"calc"	false	1	false	0
130	"sql_add"	"+"	"calc"	false	1	false	0
131	"sql_mul"	"*"	"calc"	false	1	false	0
132	"sql_div"	"/"	"calc"	false	1	false	0
133	"sql_sub"	"-"	"calc"	false	1	false	0
134	"sql_add"	"+"	"calc"	false	1	false	0
135	"sql_mul"	"*"	"calc"	false	1	false	0
136	"sql_div"	"/"	"calc"	false	1	false	0
137	"sql_sub"	"-"	"calc"	false	1	false	0
138	"sql_add"	"+"	"calc"	false	1	false	0
139	"sql_mul"	"*"	"calc"	false	1	false	0
140	"sql_div"	"/"	"calc"	false	1	false	0
141	"bit_and"	"and"	"calc"	false	1	false	0
142	"bit_or"	"or"	"calc"	false	1	false	0
143	"bit_xor"	"xor"	"calc"	false	1	false	0
144	"bit_not"	"not"	"calc"	false	1	false	0
145	"left_shift"	"<<"	"calc"	false	1	false	0
146	"right_shift"	">>"	"calc"	false	1	false	0
147	"sql_neg"	"-"	"calc"	false	1	false	0
148	"abs"	"abs"	"calc"	false	1	false	0
149	"sign"	"sign"	"calc"	false	1	false	0
150	"scale_up"	"*"	"calc"	false	1	false	0
151	"scale_down"	"dec_round"	"sql"	false	1	false	0
152	"sql_sub"	"-"	"calc"	false	1	false	0
153	"sql_add"	"+"	"calc"	false	1	false	0
154	"sql_mul"	"*"	"calc"	false	1	false	0
155	"sql_div"	"/"	"calc"	false	1	false	0
156	"sql_sub"	"-"	"calc"	false	1	false	0
157	"sql_add"	"+"	"calc"	false	1	false	0
158	"sql_mul"	"*"	"calc"	false	1	false	0
159	"sql_div"	"/"	"calc"	false	1	false	0
160	"sql_sub"	"-"	"calc"	false	1	false	0
161	"sql_add"	"+"	"calc"	false	1	false	0
162	"sql_mul"	"*"	"calc"	false	1	false	0
163	"sql_div"	"/"	"calc"	false	1	false	0
164	"bit_and"	"and"	"calc"	false	1	false	0
165	"bit_or"	"or"	"calc"	false	1	false	0
166	"bit_xor"	"xor"	"calc"	false	1	false	0
167	"bit_not"	"not"	"calc"	false	1	false	0
168	"left_shift"	"<<"	"calc"	false	1	false	0
169	"right_shift"	">>"	"calc"	false	1	false	0
170	"sql_neg"	"-"	"calc"	false	1	false	0
171	"abs"	"abs"	"calc"	false	1	false	0
172	"sign"	"sign"	"calc"	false	1	false	0
173	"scale_up"	"*"	"calc"	false	1	false	0
174	"scale_down"	"dec_round"	"sql"	false	1	false	0
175	"sql_sub"	"-"	"calc"	false	1	false	0
176	"sql_add"	"+"	"calc"	false	1	false	0
177	"sql_mul"	"*"	"calc"	false	1	false	0
178	"sql_div"	"/"	"calc"	false	1	false	0
179	"sql_sub"	"-"	"calc"	false	1	false	0
180	"sql_add"	"+"	"calc"	false	1	false	0
181	"sql_mul"	"*"	"calc"	false	1	false	0
182	"sql_div"	"/"	"calc"	false	1	false	0
183	"sql_sub"	"-"	"calc"	false	1	false	0
184	"sql_add"	"+"	"calc"	false	1	false	0
185	"sql_mul"	"*"	"calc"	false	1	false	0
186	"sql_div"	"/"	"calc"	false	1	false	0
187	"bit_and"	"and"	"calc"	false	1	false	0
188	"bit_or"	"or"	"calc"	false	1	false	0
189	"bit_xor"	"xor"	"calc"	false	1	false	0
190	"bit_not"	"not"	"calc"	false	1	false	0
191	"left_shift"	"<<"	"calc"	false	1	false	0
192	"right_shift"	">>"	"calc"	false	1	false	0
193	"sql_neg"	"-"	"calc"	false	1	false	0
194	"abs"	"abs"	"calc"	false	1	false	0
195	"sign"	"sign"	"calc"	false	1	false	0
196	"scale_up"	"*"	"calc"	false	1	false	0
197	"scale_down"	"dec_round"	"sql"	false	1	false	0
198	"sql_sub"	"-"	"calc"	false	1	false	0
199	"sql_add"	"+"	"calc"	false	1	false	0
200	"sql_mul"	"*"	"calc"	false	1	false	0
201	"sql_div"	"/"	"calc"	false	1	false	0
202	"sql_sub"	"-"	"calc"	false	1	false	0
203	"sql_add"	"+"	"calc"	false	1	false	0
204	"sql_mul"	"*"	"calc"	false	1	false	0
205	"sql_div"	"/"	"calc"	false	1	false	0
206	"sql_sub"	"-"	"calc"	false	1	false	0
207	"sql_add"	"+"	"calc"	false	1	false	0
208	"sql_mul"	"*"	"calc"	false	1	false	0
209	"sql_div"	"/"	"calc"	false	1	false	0
210	"bit_and"	"and"	"calc"	false	1	false	0
211	"bit_or"	"or"	"calc"	false	1	false	0
212	"bit_xor"	"xor"	"calc"	false	1	false	0
213	"bit_not"	"not"	"calc"	false	1	false	0
214	"left_shift"	"<<"	"calc"	false	1	false	0
215	"right_shift"	">>"	"calc"	false	1	false	0
216	"sql_neg"	"-"	"calc"	false	1	false	0
217	"abs"	"abs"	"calc"	false	1	false	0
218	"sign"	"sign"	"calc"	false	1	false	0
219	"scale_up"	"*"	"calc"	false	1	false	0
220	"scale_down"	"dec_round"	"sql"	false	1	false	0
221	"sql_sub"	"-"	"calc"	false	1	false	0
222	"sql_add"	"+"	"calc"	false	1	false	0
223	"sql_mul"	"*"	"calc"	false	1	false	0
224	"sql_div"	"/"	"calc"	false	1	false	0
225	"sql_sub"	"-"	"calc"	false	1	false	0
226	"sql_add"	"+"	"calc"	false	1	false	0
227	"sql_mul"	"*"	"calc"	false	1	false	0
228	"sql_div"	"/"	"calc"	false	1	false	0
229	"sql_sub"	"-"	"calc"	false	1	false	0
230	"sql_add"	"+"	"calc"	false	1	false	0
231	"sql_mul"	"*"	"calc"	false	1	false	0
232	"sql_div"	"/"	"calc"	false	1	false	0
233	"bit_and"	"and"	"calc"	false	1	false	0
234	"bit_or"	"or"	"calc"	false	1	false	0
235	"bit_xor"	"xor"	"calc"	false	1	false	0
236	"bit_not"	"not"	"calc"	false	1	false	0
237	"left_shift"	"<<"	"calc"	false	1	false	0
238	"right_shift"	">>"	"calc"	false	1	false	0
239	"sql_neg"	"-"	"calc"	false	1	false	0
240	"abs"	"abs"	"calc"	false	1	false	0
241	"sign"	"sign"	"calc"	false	1	false	0
242	"scale_up"	"*"	"calc"	false	1	false	0
243	"scale_down"	"dec_round"	"sql"	false	1	false	0
244	"sql_sub"	"-"	"calc"	false	1	false	0
245	"sql_add"	"+"	"calc"	false	1	false	0
246	"sql_mul"	"*"	"calc"	false	1	false	0
247	"sql_div"	"/"	"calc"	false	1	false	0
248	"sql_sub"	"-"	"calc"	false	1	false	0
249	"sql_add"	"+"	"calc"	false	1	false	0
250	"sql_mul"	"*"	"calc"	false	1	false	0
251	"sql_div"	"/"	"calc"	false	1	false	0
252	"sql_sub"	"-"	"calc"	false	1	false	0
253	"sql_add"	"+"	"calc"	false	1	false	0
254	"sql_mul"	"*"	"calc"	false	1	false	0
255	"sql_div"	"/"	"calc"	false	1	false	0
256	"bit_and"	"and"	"calc"	false	1	false	0
257	"bit_or"	"or"	"calc"	false	1	false	0
258	"bit_xor"	"xor"	"calc"	false	1	false	0
259	"bit_not"	"not"	"calc"	false	1	false	0
260	"left_shift"	"<<"	"calc"	false	1	false	0
261	"right_shift"	">>"	"calc"	false	1	false	0
262	"sql_neg"	"-"	"calc"	false	1	false	0
263	"abs"	"abs"	"calc"	false	1	false	0
264	"sign"	"sign"	"calc"	false	1	false	0
265	"scale_up"	"*"	"calc"	false	1	false	0
266	"scale_down"	"dec_round"	"sql"	false	1	false	0
267	"sql_sub"	"-"	"calc"	false	1	false	0
268	"sql_add"	"+"	"calc"	false	1	false	0
269	"sql_mul"	"*"	"calc"	false	1	false	0
270	"sql_div"	"/"	"calc"	false	1	false	0
271	"sql_sub"	"-"	"calc"	false	1	false	0
272	"sql_add"	"+"	"calc"	false	1	false	0
273	"sql_mul"	"*"	"calc"	false	1	false	0
274	"sql_div"	"/"	"calc"	false	1	false	0
275	"sql_sub"	"-"	"calc"	false	1	false	0
276	"sql_add"	"+"	"calc"	false	1	false	0
277	"sql_mul"	"*"	"calc"	false	1	false	0
278	"sql_div"	"/"	"calc"	false	1	false	0
279	"bit_and"	"and"	"calc"	false	1	false	0
280	"bit_or"	"or"	"calc"	false	1	false	0
281	"bit_xor"	"xor"	"calc"	false	1	false	0
282	"bit_not"	"not"	"calc"	false	1	false	0
283	"left_shift"	"<<"	"calc"	false	1	false	0
284	"right_shift"	">>"	"calc"	false	1	false	0
285	"sql_neg"	"-"	"calc"	false	1	false	0
286	"abs"	"abs"	"calc"	false	1	false	0
287	"sign"	"sign"	"calc"	false	1	false	0
288	"scale_up"	"*"	"calc"	false	1	false	0
289	"scale_down"	"dec_round"	"sql"	false	1	false	0
290	"sql_sub"	"-"	"calc"	false	1	false	0
291	"sql_add"	"+"	"calc"	false	1	false	0
292	"sql_mul"	"*"	"calc"	false	1	false	0
293	"sql_div"	"/"	"calc"	false	1	false	0
294	"sql_sub"	"-"	"calc"	false	1	false	0
295	"sql_add"	"+"	"calc"	false	1	false	0
296	"sql_mul"	"*"	"calc"	false	1	false	0
297	"sql_div"	"/"	"calc"	false	1	false	0
298	"sql_sub"	"-"	"calc"	false	1	false	0
299	"sql_add"	"+"	"calc"	false	1	false	0
300	"sql_mul"	"*"	"calc"	false	1	false	0
301	"sql_div"	"/"	"calc"	false	1	false	0
302	"bit_and"	"and"	"calc"	false	1	false	0
303	"bit_or"	"or"	"calc"	false	1	false	0
304	"bit_xor"	"xor"	"calc"	false	1	false	0
305	"bit_not"	"not"	"calc"	false	1	false	0
306	"left_shift"	"<<"	"calc"	false	1	false	0
307	"right_shift"	">>"	"calc"	false	1	false	0
308	"sql_neg"	"-"	"calc"	false	1	false	0
309	"abs"	"abs"	"calc"	false	1	false	0
310	"sign"	"sign"	"calc"	false	1	false	0
311	"scale_up"	"*"	"calc"	false	1	false	0
312	"scale_down"	"dec_round"	"sql"	false	1	false	0
313	"sql_sub"	"-"	"calc"	false	1	false	0
314	"sql_add"	"+"	"calc"	false	1	false	0
315	"sql_mul"	"*"	"calc"	false	1	false	0
316	"sql_div"	"/"	"calc"	false	1	false	0
317	"sql_sub"	"-"	"calc"	false	1	false	0
318	"sql_add"	"+"	"calc"	false	1	false	0
319	"sql_mul"	"*"	"calc"	false	1	false	0
320	"sql_div"	"/"	"calc"	false	1	false	0
321	"sql_sub"	"-"	"calc"	false	1	false	0
322	"sql_add"	"+"	"calc"	false	1	false	0
323	"sql_mul"	"*"	"calc"	false	1	false	0
324	"sql_div"	"/"	"calc"	false	1	false	0
325	"bit_and"	"and"	"calc"	false	1	false	0
326	"bit_or"	"or"	"calc"	false	1	false	0
327	"bit_xor"	"xor"	"calc"	false	1	false	0
328	"bit_not"	"not"	"calc"	false	1	false	0
329	"left_shift"	"<<"	"calc"	false	1	false	0
330	"right_shift"	">>"	"calc"	false	1	false	0
331	"sql_neg"	"-"	"calc"	false	1	false	0
332	"abs"	"abs"	"calc"	false	1	false	0
333	"sign"	"sign"	"calc"	false	1	false	0
334	"scale_up"	"*"	"calc"	false	1	false	0
335	"scale_down"	"dec_round"	"sql"	false	1	false	0
336	"sql_sub"	"-"	"calc"	false	1	false	0
337	"sql_add"	"+"	"calc"	false	1	false	0
338	"sql_mul"	"*"	"calc"	false	1	false	0
339	"sql_div"	"/"	"calc"	false	1	false	0
340	"sql_sub"	"-"	"calc"	false	1	false	0
341	"sql_add"	"+"	"calc"	false	1	false	0
342	"sql_mul"	"*"	"calc"	false	1	false	0
343	"sql_div"	"/"	"calc"	false	1	false	0
344	"sql_sub"	"-"	"calc"	false	1	false	0
345	"sql_add"	"+"	"calc"	false	1	false	0
346	"sql_mul"	"*"	"calc"	false	1	false	0
347	"sql_div"	"/"	"calc"	false	1	false	0
348	"sql_neg"	"-"	"calc"	false	1	false	0
349	"abs"	"abs"	"calc"	false	1	false	0
350	"sign"	"sign"	"calc"	false	1	false	0
351	"scale_up"	"*"	"calc"	false	1	false	0
352	"scale_down"	"dec_round"	"sql"	false	1	false	0
353	"sql_sub"	"-"	"calc"	false	1	false	0
354	"sql_add"	"+"	"calc"	false	1	false	0
355	"sql_mul"	"*"	"calc"	false	1	false	0
356	"sql_div"	"/"	"calc"	false	1	false	0
357	"sql_sub"	"-"	"calc"	false	1	false	0
358	"sql_add"	"+"	"calc"	false	1	false	0
359	"sql_mul"	"*"	"calc"	false	1	false	0
360	"sql_div"	"/"	"calc"	false	1	false	0
361	"sql_sub"	"-"	"calc"	false	1	false	0
362	"sql_add"	"+"	"calc"	false	1	false	0
363	"sql_mul"	"*"	"calc"	false	1	false	0
364	"sql_div"	"/"	"calc"	false	1	false	0
365	"sql_neg"	"-"	"calc"	false	1	false	0
366	"abs"	"abs"	"calc"	false	1	false	0
367	"sign"	"sign"	"calc"	false	1	false	0
368	"scale_up"	"*"	"calc"	false	1	false	0
369	"scale_down"	"dec_round"	"sql"	false	1	false	0
370	"sql_sub"	"-"	"calc"	false	1	false	0
371	"sql_add"	"+"	"calc"	false	1	false	0
372	"sql_mul"	"*"	"calc"	false	1	false	0
373	"sql_div"	"/"	"calc"	false	1	false	0
374	"sql_sub"	"-"	"calc"	false	1	false	0
375	"sql_add"	"+"	"calc"	false	1	false	0
376	"sql_mul"	"*"	"calc"	false	1	false	0
377	"sql_div"	"/"	"calc"	false	1	false	0
378	"sql_sub"	"-"	"calc"	false	1	false	0
379	"sql_add"	"+"	"calc"	false	1	false	0
380	"sql_mul"	"*"	"calc"	false	1	false	0
381	"sql_div"	"/"	"calc"	false	1	false	0
382	"sql_neg"	"-"	"calc"	false	1	false	0
383	"abs"	"abs"	"calc"	false	1	false	0
384	"sign"	"sign"	"calc"	false	1	false	0
385	"scale_up"	"*"	"calc"	false	1	false	0
386	"scale_down"	"dec_round"	"sql"	false	1	false	0
387	"sql_sub"	"-"	"calc"	false	1	false	0
388	"sql_add"	"+"	"calc"	false	1	false	0
389	"sql_mul"	"*"	"calc"	false	1	false	0
390	"sql_div"	"/"	"calc"	false	1	false	0
391	"sql_neg"	"-"	"calc"	false	1	false	0
392	"abs"	"abs"	"calc"	false	1	false	0
393	"sign"	"sign"	"calc"	false	1	false	0
394	"scale_up"	"*"	"calc"	false	1	false	0
395	"scale_down"	"dec_round"	"sql"	false	1	false	0
396	"sql_mul"	"*"	"calc"	false	1	false	0
397	"sql_mul"	"*"	"calc"	false	1	false	0
398	"sql_mul"	"*"	"calc"	false	1	false	0
399	"sql_mul"	"*"	"calc"	false	1	false	0
400	"sql_mul"	"*"	"calc"	false	1	false	0
401	"sql_mul"	"*"	"calc"	false	1	false	0
402	"sql_mul"	"*"	"calc"	false	1	false	0
403	"sql_mul"	"*"	"calc"	false	1	false	0
404	"sql_mul"	"*"	"calc"	false	1	false	0
405	"sql_mul"	"*"	"calc"	false	1	false	0
406	"sql_mul"	"*"	"calc"	false	1	false	0
407	"sql_mul"	"*"	"calc"	false	1	false	0
408	"sql_mul"	"*"	"calc"	false	1	false	0
409	"sql_mul"	"*"	"calc"	false	1	false	0
410	"sql_mul"	"*"	"calc"	false	1	false	0
411	"sql_mul"	"*"	"calc"	false	1	false	0
412	"sql_mul"	"*"	"calc"	false	1	false	0
413	"sql_mul"	"*"	"calc"	false	1	false	0
414	"sql_mul"	"*"	"calc"	false	1	false	0
415	"sql_mul"	"*"	"calc"	false	1	false	0
416	"sql_mul"	"*"	"calc"	false	1	false	0
417	"sql_mul"	"*"	"calc"	false	1	false	0
418	"sql_mul"	"*"	"calc"	false	1	false	0
419	"sql_mul"	"*"	"calc"	false	1	false	0
420	"sql_mul"	"*"	"calc"	false	1	false	0
421	"sql_mul"	"*"	"calc"	false	1	false	0
422	"round"	"round"	"sql"	false	1	false	0
423	"round"	"round"	"sql"	false	1	false	0
424	"round"	"round"	"sql"	false	1	false	0
425	"round"	"round"	"sql"	false	1	false	0
426	"round"	"round"	"sql"	false	1	false	0
427	"round"	"round"	"sql"	false	1	false	0
428	"scale_up"	"*"	"calc"	false	1	false	0
429	"scale_up"	"*"	"calc"	false	1	false	0
430	"scale_up"	"*"	"calc"	false	1	false	0
431	"scale_up"	"*"	"calc"	false	1	false	0
432	"scale_up"	"*"	"calc"	false	1	false	0
433	"scale_up"	"*"	"calc"	false	1	false	0
434	"scale_up"	"*"	"calc"	false	1	false	0
435	"scale_up"	"*"	"calc"	false	1	false	0
436	"scale_up"	"*"	"calc"	false	1	false	0
437	"scale_up"	"*"	"calc"	false	1	false	0
438	"scale_up"	"*"	"calc"	false	1	false	0
439	"scale_up"	"*"	"calc"	false	1	false	0
440	"scale_up"	"*"	"calc"	false	1	false	0
441	"scale_up"	"*"	"calc"	false	1	false	0
442	"scale_up"	"*"	"calc"	false	1	false	0
443	"scale_up"	"*"	"calc"	false	1	false	0
444	"scale_up"	"*"	"calc"	false	1	false	0
445	"scale_up"	"*"	"calc"	false	1	false	0
446	"scale_up"	"*"	"calc"	false	1	false	0
447	"scale_up"	"*"	"calc"	false	1	false	0
448	"scale_up"	"*"	"calc"	false	1	false	0
449	"scale_up"	"*"	"calc"	false	1	false	0
450	"scale_up"	"*"	"calc"	false	1	false	0
451	"scale_up"	"*"	"calc"	false	1	false	0
452	"scale_up"	"*"	"calc"	false	1	false	0
453	"scale_up"	"*"	"calc"	false	1	false	0
454	"scale_up"	"*"	"calc"	false	1	false	0
455	"scale_up"	"*"	"calc"	false	1	false	0
456	"scale_up"	"*"	"calc"	false	1	false	0
457	"scale_up"	"*"	"calc"	false	1	false	0
458	"scale_up"	"*"	"calc"	false	1	false	0
459	"scale_up"	"*"	"calc"	false	1	false	0
460	"scale_up"	"*"	"calc"	false	1	false	0
461	"scale_up"	"*"	"calc"	false	1	false	0
462	"scale_up"	"*"	"calc"	false	1	false	0
463	"scale_up"	"*"	"calc"	false	1	false	0
464	"scale_up"	"*"	"calc"	false	1	false	0
465	"scale_up"	"*"	"calc"	false	1	false	0
466	"scale_up"	"*"	"calc"	false	1	false	0
467	"scale_up"	"*"	"calc"	false	1	false	0
468	"scale_up"	"*"	"calc"	false	1	false	0
469	"scale_up"	"*"	"calc"	false	1	false	0
470	"scale_up"	"*"	"calc"	false	1	false	0
471	"scale_up"	"*"	"calc"	false	1	false	0
472	"scale_up"	"*"	"calc"	false	1	false	0
473	"scale_up"	"*"	"calc"	false	1	false	0
474	"scale_up"	"*"	"calc"	false	1	false	0
475	"scale_up"	"*"	"calc"	false	1	false	0
476	"scale_up"	"*"	"calc"	false	1	false	0
477	"scale_up"	"*"	"calc"	false	1	false	0
478	"scale_up"	"*"	"calc"	false	1	false	0
479	"scale_up"	"*"	"calc"	false	1	false	0
480	"scale_up"	"*"	"calc"	false	1	false	0
481	"scale_up"	"*"	"calc"	false	1	false	0
482	"scale_up"	"*"	"calc"	false	1	false	0
483	"scale_up"	"*"	"calc"	false	1	false	0
484	"scale_up"	"*"	"calc"	false	1	false	0
485	"scale_up"	"*"	"calc"	false	1	false	0
486	"scale_up"	"*"	"calc"	false	1	false	0
487	"scale_up"	"*"	"calc"	false	1	false	0
488	"scale_up"	"*"	"calc"	false	1	false	0
489	"scale_up"	"*"	"calc"	false	1	false	0
490	"scale_up"	"*"	"calc"	false	1	false	0
491	"scale_up"	"*"	"calc"	false	1	false	0
492	"scale_up"	"*"	"calc"	false	1	false	0
493	"scale_up"	"*"	"calc"	false	1	false	0
494	"scale_up"	"*"	"calc"	false	1	false	0
495	"scale_up"	"*"	"calc"	false	1	false	0
496	"scale_up"	"*"	"calc"	false	1	false	0
497	"scale_up"	"*"	"calc"	false	1	false	0
498	"scale_up"	"*"	"calc"	false	1	false	0
499	"scale_up"	"*"	"calc"	false	1	false	0
500	"scale_up"	"*"	"calc"	false	1	false	0
501	"scale_up"	"*"	"calc"	false	1	false	0
502	"scale_up"	"*"	"calc"	false	1	false	0
503	"scale_up"	"*"	"calc"	false	1	false	0
504	"scale_up"	"*"	"calc"	false	1	false	0
505	"scale_up"	"*"	"calc"	false	1	false	0
506	"scale_up"	"*"	"calc"	false	1	false	0
507	"scale_up"	"*"	"calc"	false	1	false	0
508	"scale_up"	"*"	"calc"	false	1	false	0
509	"scale_up"	"*"	"calc"	false	1	false	0
510	"scale_up"	"*"	"calc"	false	1	false	0
511	"scale_up"	"*"	"calc"	false	1	false	0
512	"scale_up"	"*"	"calc"	false	1	false	0
513	"scale_up"	"*"	"calc"	false	1	false	0
514	"scale_up"	"*"	"calc"	false	1	false	0
515	"scale_up"	"*"	"calc"	false	1	false	0
516	"scale_up"	"*"	"calc"	false	1	false	0
517	"scale_up"	"*"	"calc"	false	1	false	0
518	"scale_up"	"*"	"calc"	false	1	false	0
519	"scale_up"	"*"	"calc"	false	1	false	0
520	"scale_up"	"*"	"calc"	false	1	false	0
521	"scale_up"	"*"	"calc"	false	1	false	0
522	"scale_up"	"*"	"calc"	false	1	false	0
523	"scale_up"	"*"	"calc"	false	1	false	0
524	"scale_up"	"*"	"calc"	false	1	false	0
525	"scale_up"	"*"	"calc"	false	1	false	0
526	"scale_up"	"*"	"calc"	false	1	false	0
527	"scale_up"	"*"	"calc"	false	1	false	0
528	"scale_up"	"*"	"calc"	false	1	false	0
529	"scale_up"	"*"	"calc"	false	1	false	0
530	"scale_up"	"*"	"calc"	false	1	false	0
531	"scale_up"	"*"	"calc"	false	1	false	0
532	"scale_up"	"*"	"calc"	false	1	false	0
533	"scale_up"	"*"	"calc"	false	1	false	0
534	"scale_up"	"*"	"calc"	false	1	false	0
535	"scale_up"	"*"	"calc"	false	1	false	0
536	"scale_up"	"*"	"calc"	false	1	false	0
537	"scale_up"	"*"	"calc"	false	1	false	0
538	"scale_up"	"*"	"calc"	false	1	false	0
539	"scale_up"	"*"	"calc"	false	1	false	0
540	"scale_up"	"*"	"calc"	false	1	false	0
541	"scale_up"	"*"	"calc"	false	1	false	0
542	"scale_up"	"*"	"calc"	false	1	false	0
543	"scale_up"	"*"	"calc"	false	1	false	0
544	"scale_up"	"*"	"calc"	false	1	false	0
545	"scale_up"	"*"	"calc"	false	1	false	0
546	"scale_up"	"*"	"calc"	false	1	false	0
547	"scale_up"	"*"	"calc"	false	1	false	0
548	"scale_up"	"*"	"calc"	false	1	false	0
549	"scale_up"	"*"	"calc"	false	1	false	0
550	"scale_up"	"*"	"calc"	false	1	false	0
551	"scale_up"	"*"	"calc"	false	1	false	0
552	"scale_up"	"*"	"calc"	false	1	false	0
553	"scale_up"	"*"	"calc"	false	1	false	0
554	"scale_up"	"*"	"calc"	false	1	false	0
555	"scale_up"	"*"	"calc"	false	1	false	0
556	"scale_up"	"*"	"calc"	false	1	false	0
557	"scale_up"	"*"	"calc"	false	1	false	0
558	"scale_up"	"*"	"calc"	false	1	false	0
559	"scale_up"	"*"	"calc"	false	1	false	0
560	"scale_up"	"*"	"calc"	false	1	false	0
561	"scale_up"	"*"	"calc"	false	1	false	0
562	"scale_up"	"*"	"calc"	false	1	false	0
563	"scale_up"	"*"	"calc"	false	1	false	0
564	"scale_up"	"*"	"calc"	false	1	false	0
565	"scale_up"	"*"	"calc"	false	1	false	0
566	"scale_up"	"*"	"calc"	false	1	false	0
567	"scale_up"	"*"	"calc"	false	1	false	0
568	"scale_up"	"*"	"calc"	false	1	false	0
569	"scale_up"	"*"	"calc"	false	1	false	0
570	"scale_up"	"*"	"calc"	false	1	false	0
571	"scale_up"	"*"	"calc"	false	1	false	0
572	"scale_up"	"*"	"calc"	false	1	false	0
573	"scale_up"	"*"	"calc"	false	1	false	0
574	"scale_up"	"*"	"calc"	false	1	false	0
575	"scale_up"	"*"	"calc"	false	1	false	0
576	"scale_up"	"*"	"calc"	false	1	false	0
577	"scale_up"	"*"	"calc"	false	1	false	0
578	"scale_up"	"*"	"calc"	false	1	false	0
579	"scale_up"	"*"	"calc"	false	1	false	0
580	"scale_up"	"*"	"calc"	false	1	false	0
581	"scale_up"	"*"	"calc"	false	1	false	0
582	"scale_up"	"*"	"calc"	false	1	false	0
583	"scale_up"	"*"	"calc"	false	1	false	0
584	"scale_up"	"*"	"calc"	false	1	false	0
585	"scale_up"	"*"	"calc"	false	1	false	0
586	"scale_up"	"*"	"calc"	false	1	false	0
587	"scale_up"	"*"	"calc"	false	1	false	0
588	"scale_up"	"*"	"calc"	false	1	false	0
589	"scale_up"	"*"	"calc"	false	1	false	0
590	"scale_up"	"*"	"calc"	false	1	false	0
591	"scale_up"	"*"	"calc"	false	1	false	0
592	"scale_up"	"*"	"calc"	false	1	false	0
593	"scale_up"	"*"	"calc"	false	1	false	0
594	"scale_up"	"*"	"calc"	false	1	false	0
595	"scale_up"	"*"	"calc"	false	1	false	0
596	"scale_up"	"*"	"calc"	false	1	false	0
597	"scale_up"	"*"	"calc"	false	1	false	0
598	"scale_up"	"*"	"calc"	false	1	false	0
599	"scale_up"	"*"	"calc"	false	1	false	0
600	"scale_up"	"*"	"calc"	false	1	false	0
601	"scale_up"	"*"	"calc"	false	1	false	0
602	"scale_up"	"*"	"calc"	false	1	false	0
603	"scale_up"	"*"	"calc"	false	1	false	0
604	"scale_up"	"*"	"calc"	false	1	false	0
605	"scale_up"	"*"	"calc"	false	1	false	0
606	"scale_up"	"*"	"calc"	false	1	false	0
607	"scale_up"	"*"	"calc"	false	1	false	0
608	"scale_up"	"*"	"calc"	false	1	false	0
609	"scale_up"	"*"	"calc"	false	1	false	0
610	"scale_up"	"*"	"calc"	false	1	false	0
611	"scale_up"	"*"	"calc"	false	1	false	0
612	"scale_up"	"*"	"calc"	false	1	false	0
613	"scale_up"	"*"	"calc"	false	1	false	0
614	"scale_up"	"*"	"calc"	false	1	false	0
615	"scale_up"	"*"	"calc"	false	1	false	0
616	"scale_up"	"*"	"calc"	false	1	false	0
617	"scale_up"	"*"	"calc"	false	1	false	0
618	"scale_up"	"*"	"calc"	false	1	false	0
619	"scale_up"	"*"	"calc"	false	1	false	0
620	"scale_up"	"*"	"calc"	false	1	false	0
621	"scale_up"	"*"	"calc"	false	1	false	0
622	"scale_up"	"*"	"calc"	false	1	false	0
623	"scale_up"	"*"	"calc"	false	1	false	0
624	"scale_up"	"*"	"calc"	false	1	false	0
625	"scale_up"	"*"	"calc"	false	1	false	0
626	"scale_up"	"*"	"calc"	false	1	false	0
627	"scale_up"	"*"	"calc"	false	1	false	0
628	"scale_up"	"*"	"calc"	false	1	false	0
629	"scale_up"	"*"	"calc"	false	1	false	0
630	"scale_up"	"*"	"calc"	false	1	false	0
631	"scale_up"	"*"	"calc"	false	1	false	0
632	"scale_up"	"*"	"calc"	false	1	false	0
633	"scale_up"	"*"	"calc"	false	1	false	0
634	"scale_up"	"*"	"calc"	false	1	false	0
635	"scale_up"	"*"	"calc"	false	1	false	0
636	"scale_up"	"*"	"calc"	false	1	false	0
637	"scale_up"	"*"	"calc"	false	1	false	0
638	"scale_up"	"*"	"calc"	false	1	false	0
639	"scale_up"	"*"	"calc"	false	1	false	0
640	"scale_up"	"*"	"calc"	false	1	false	0
641	"scale_up"	"*"	"calc"	false	1	false	0
642	"scale_up"	"*"	"calc"	false	1	false	0
643	"scale_up"	"*"	"calc"	false	1	false	0
644	"scale_up"	"*"	"calc"	false	1	false	0
645	"scale_up"	"*"	"calc"	false	1	false	0
646	"scale_up"	"*"	"calc"	false	1	false	0
647	"scale_up"	"*"	"calc"	false	1	false	0
648	"scale_up"	"*"	"calc"	false	1	false	0
649	"scale_up"	"*"	"calc"	false	1	false	0
650	"scale_up"	"*"	"calc"	false	1	false	0
651	"scale_up"	"*"	"calc"	false	1	false	0
652	"scale_up"	"*"	"calc"	false	1	false	0
653	"scale_up"	"*"	"calc"	false	1	false	0
654	"scale_up"	"*"	"calc"	false	1	false	0
655	"scale_up"	"*"	"calc"	false	1	false	0
656	"scale_up"	"*"	"calc"	false	1	false	0
657	"scale_up"	"*"	"calc"	false	1	false	0
658	"scale_up"	"*"	"calc"	false	1	false	0
659	"scale_up"	"*"	"calc"	false	1	false	0
660	"scale_up"	"*"	"calc"	false	1	false	0
661	"scale_up"	"*"	"calc"	false	1	false	0
662	"scale_up"	"*"	"calc"	false	1	false	0
663	"scale_up"	"*"	"calc"	false	1	false	0
664	"scale_up"	"*"	"calc"	false	1	false	0
665	"scale_up"	"*"	"calc"	false	1	false	0
666	"scale_up"	"*"	"calc"	false	1	false	0
667	"scale_up"	"*"	"calc"	false	1	false	0
668	"scale_up"	"*"	"calc"	false	1	false	0
669	"scale_up"	"*"	"calc"	false	1	false	0
670	"scale_up"	"*"	"calc"	false	1	false	0
671	"scale_up"	"*"	"calc"	false	1	false	0
672	"scale_up"	"*"	"calc"	false	1	false	0
673	"scale_up"	"*"	"calc"	false	1	false	0
674	"scale_up"	"*"	"calc"	false	1	false	0
675	"scale_up"	"*"	"calc"	false	1	false	0
676	"scale_up"	"*"	"calc"	false	1	false	0
677	"scale_up"	"*"	"calc"	false	1	false	0
678	"scale_up"	"*"	"calc"	false	1	false	0
679	"scale_up"	"*"	"calc"	false	1	false	0
680	"scale_up"	"*"	"calc"	false	1	false	0
681	"scale_up"	"*"	"calc"	false	1	false	0
682	"scale_up"	"*"	"calc"	false	1	false	0
683	"scale_up"	"*"	"calc"	false	1	false	0
684	"scale_up"	"*"	"calc"	false	1	false	0
685	"scale_up"	"*"	"calc"	false	1	false	0
686	"scale_up"	"*"	"calc"	false	1	false	0
687	"scale_up"	"*"	"calc"	false	1	false	0
688	"scale_up"	"*"	"calc"	false	1	false	0
689	"scale_up"	"*"	"calc"	false	1	false	0
690	"scale_up"	"*"	"calc"	false	1	false	0
691	"scale_up"	"*"	"calc"	false	1	false	0
692	"scale_up"	"*"	"calc"	false	1	false	0
693	"scale_up"	"*"	"calc"	false	1	false	0
694	"scale_up"	"*"	"calc"	false	1	false	0
695	"scale_up"	"*"	"calc"	false	1	false	0
696	"scale_up"	"*"	"calc"	false	1	false	0
697	"scale_up"	"*"	"calc"	false	1	false	0
698	"scale_up"	"*"	"calc"	false	1	false	0
699	"scale_up"	"*"	"calc"	false	1	false	0
700	"scale_up"	"*"	"calc"	false	1	false	0
701	"scale_up"	"*"	"calc"	false	1	false	0
702	"scale_up"	"*"	"calc"	false	1	false	0
703	"scale_up"	"*"	"calc"	false	1	false	0
704	"scale_up"	"*"	"calc"	false	1	false	0
705	"scale_up"	"*"	"calc"	false	1	false	0
706	"scale_up"	"*"	"calc"	false	1	false	0
707	"scale_up"	"*"	"calc"	false	1	false	0
708	"scale_up"	"*"	"calc"	false	1	false	0
709	"scale_up"	"*"	"calc"	false	1	false	0
710	"scale_up"	"*"	"calc"	false	1	false	0
711	"scale_up"	"*"	"calc"	false	1	false	0
712	"scale_up"	"*"	"calc"	false	1	false	0
713	"scale_up"	"*"	"calc"	false	1	false	0
714	"scale_up"	"*"	"calc"	false	1	false	0
715	"scale_up"	"*"	"calc"	false	1	false	0
716	"scale_up"	"*"	"calc"	false	1	false	0
717	"scale_up"	"*"	"calc"	false	1	false	0
718	"scale_up"	"*"	"calc"	false	1	false	0
719	"scale_up"	"*"	"calc"	false	1	false	0
720	"scale_up"	"*"	"calc"	false	1	false	0
721	"scale_up"	"*"	"calc"	false	1	false	0
722	"scale_up"	"*"	"calc"	false	1	false	0
723	"scale_up"	"*"	"calc"	false	1	false	0
724	"scale_up"	"*"	"calc"	false	1	false	0
725	"scale_up"	"*"	"calc"	false	1	false	0
726	"scale_up"	"*"	"calc"	false	1	false	0
727	"scale_up"	"*"	"calc"	false	1	false	0
728	"scale_up"	"*"	"calc"	false	1	false	0
729	"scale_up"	"*"	"calc"	false	1	false	0
730	"scale_up"	"*"	"calc"	false	1	false	0
731	"scale_up"	"*"	"calc"	false	1	false	0
732	"scale_up"	"*"	"calc"	false	1	false	0
733	"scale_up"	"*"	"calc"	false	1	false	0
734	"scale_up"	"*"	"calc"	false	1	false	0
735	"scale_up"	"*"	"calc"	false	1	false	0
736	"scale_up"	"*"	"calc"	false	1	false	0
737	"scale_up"	"*"	"calc"	false	1	false	0
738	"scale_up"	"*"	"calc"	false	1	false	0
739	"scale_up"	"*"	"calc"	false	1	false	0
740	"scale_up"	"*"	"calc"	false	1	false	0
741	"scale_up"	"*"	"calc"	false	1	false	0
742	"scale_up"	"*"	"calc"	false	1	false	0
743	"scale_up"	"*"	"calc"	false	1	false	0
744	"scale_up"	"*"	"calc"	false	1	false	0
745	"scale_up"	"*"	"calc"	false	1	false	0
746	"scale_up"	"*"	"calc"	false	1	false	0
747	"scale_up"	"*"	"calc"	false	1	false	0
748	"scale_up"	"*"	"calc"	false	1	false	0
749	"scale_up"	"*"	"calc"	false	1	false	0
750	"scale_up"	"*"	"calc"	false	1	false	0
751	"scale_up"	"*"	"calc"	false	1	false	0
752	"scale_up"	"*"	"calc"	false	1	false	0
753	"scale_up"	"*"	"calc"	false	1	false	0
754	"scale_up"	"*"	"calc"	false	1	false	0
755	"scale_up"	"*"	"calc"	false	1	false	0
756	"scale_up"	"*"	"calc"	false	1	false	0
757	"scale_up"	"*"	"calc"	false	1	false	0
758	"scale_up"	"*"	"calc"	false	1	false	0
759	"scale_up"	"*"	"calc"	false	1	false	0
760	"scale_up"	"*"	"calc"	false	1	false	0
761	"scale_up"	"*"	"calc"	false	1	false	0
762	"scale_up"	"*"	"calc"	false	1	false	0
763	"scale_up"	"*"	"calc"	false	1	false	0
764	"scale_up"	"*"	"calc"	false	1	false	0
765	"scale_up"	"*"	"calc"	false	1	false	0
766	"scale_up"	"*"	"calc"	false	1	false	0
767	"scale_up"	"*"	"calc"	false	1	false	0
768	"scale_up"	"*"	"calc"	false	1	false	0
769	"scale_up"	"*"	"calc"	false	1	false	0
770	"scale_up"	"*"	"calc"	false	1	false	0
771	"scale_up"	"*"	"calc"	false	1	false	0
772	"scale_up"	"*"	"calc"	false	1	false	0
773	"scale_up"	"*"	"calc"	false	1	false	0
774	"scale_up"	"*"	"calc"	false	1	false	0
775	"scale_up"	"*"	"calc"	false	1	false	0
776	"scale_up"	"*"	"calc"	false	1	false	0
777	"scale_up"	"*"	"calc"	false	1	false	0
778	"scale_up"	"*"	"calc"	false	1	false	0
779	"scale_up"	"*"	"calc"	false	1	false	0
780	"scale_up"	"*"	"calc"	false	1	false	0
781	"scale_up"	"*"	"calc"	false	1	false	0
782	"scale_up"	"*"	"calc"	false	1	false	0
783	"scale_up"	"*"	"calc"	false	1	false	0
784	"scale_up"	"*"	"calc"	false	1	false	0
785	"scale_up"	"*"	"calc"	false	1	false	0
786	"scale_up"	"*"	"calc"	false	1	false	0
787	"scale_up"	"*"	"calc"	false	1	false	0
788	"scale_up"	"*"	"calc"	false	1	false	0
789	"scale_up"	"*"	"calc"	false	1	false	0
790	"scale_up"	"*"	"calc"	false	1	false	0
791	"scale_up"	"*"	"calc"	false	1	false	0
792	"scale_up"	"*"	"calc"	false	1	false	0
793	"scale_up"	"*"	"calc"	false	1	false	0
794	"scale_up"	"*"	"calc"	false	1	false	0
795	"scale_up"	"*"	"calc"	false	1	false	0
796	"scale_up"	"*"	"calc"	false	1	false	0
797	"scale_up"	"*"	"calc"	false	1	false	0
798	"scale_up"	"*"	"calc"	false	1	false	0
799	"scale_up"	"*"	"calc"	false	1	false	0
800	"scale_up"	"*"	"calc"	false	1	false	0
801	"scale_up"	"*"	"calc"	false	1	false	0
802	"scale_up"	"*"	"calc"	false	1	false	0
803	"scale_up"	"*"	"calc"	false	1	false	0
804	"scale_up"	"*"	"calc"	false	1	false	0
805	"scale_up"	"*"	"calc"	false	1	false	0
806	"scale_up"	"*"	"calc"	false	1	false	0
807	"scale_up"	"*"	"calc"	false	1	false	0
808	"scale_up"	"*"	"calc"	false	1	false	0
809	"scale_up"	"*"	"calc"	false	1	false	0
810	"scale_up"	"*"	"calc"	false	1	false	0
811	"scale_up"	"*"	"calc"	false	1	false	0
812	"scale_up"	"*"	"calc"	false	1	false	0
813	"scale_up"	"*"	"calc"	false	1	false	0
814	"scale_up"	"*"	"calc"	false	1	false	0
815	"scale_up"	"*"	"calc"	false	1	false	0
816	"scale_up"	"*"	"calc"	false	1	false	0
817	"scale_up"	"*"	"calc"	false	1	false	0
818	"scale_up"	"*"	"calc"	false	1	false	0
819	"scale_up"	"*"	"calc"	false	1	false	0
820	"scale_up"	"*"	"calc"	false	1	false	0
821	"scale_up"	"*"	"calc"	false	1	false	0
822	"scale_up"	"*"	"calc"	false	1	false	0
823	"scale_up"	"*"	"calc"	false	1	false	0
824	"scale_up"	"*"	"calc"	false	1	false	0
825	"scale_up"	"*"	"calc"	false	1	false	0
826	"scale_up"	"*"	"calc"	false	1	false	0
827	"scale_up"	"*"	"calc"	false	1	false	0
828	"power"	"pow"	"mmath"	false	1	false	0
829	"floor"	"floor"	"mmath"	false	1	false	0
830	"ceil"	"ceil"	"mmath"	false	1	false	0
831	"ceiling"	"ceil"	"mmath"	false	1	false	0
832	"sin"	"sin"	"mmath"	false	1	false	0
833	"cos"	"cos"	"mmath"	false	1	false	0
834	"tan"	"tan"	"mmath"	false	1	false	0
835	"asin"	"asin"	"mmath"	false	1	false	0
836	"acos"	"acos"	"mmath"	false	1	false	0
837	"atan"	"atan"	"mmath"	false	1	false	0
838	"atan"	"atan2"	"mmath"	false	1	false	0
839	"sinh"	"sinh"	"mmath"	false	1	false	0
840	"cot"	"cot"	"mmath"	false	1	false	0
841	"cosh"	"cosh"	"mmath"	false	1	false	0
842	"tanh"	"tanh"	"mmath"	false	1	false	0
843	"sqrt"	"sqrt"	"mmath"	false	1	false	0
844	"exp"	"exp"	"mmath"	false	1	false	0
845	"log"	"log"	"mmath"	false	1	false	0
846	"log10"	"log10"	"mmath"	false	1	false	0
847	"power"	"pow"	"mmath"	false	1	false	0
848	"floor"	"floor"	"mmath"	false	1	false	0
849	"ceil"	"ceil"	"mmath"	false	1	false	0
850	"ceiling"	"ceil"	"mmath"	false	1	false	0
851	"sin"	"sin"	"mmath"	false	1	false	0
852	"cos"	"cos"	"mmath"	false	1	false	0
853	"tan"	"tan"	"mmath"	false	1	false	0
854	"asin"	"asin"	"mmath"	false	1	false	0
855	"acos"	"acos"	"mmath"	false	1	false	0
856	"atan"	"atan"	"mmath"	false	1	false	0
857	"atan"	"atan2"	"mmath"	false	1	false	0
858	"sinh"	"sinh"	"mmath"	false	1	false	0
859	"cot"	"cot"	"mmath"	false	1	false	0
860	"cosh"	"cosh"	"mmath"	false	1	false	0
861	"tanh"	"tanh"	"mmath"	false	1	false	0
862	"sqrt"	"sqrt"	"mmath"	false	1	false	0
863	"exp"	"exp"	"mmath"	false	1	false	0
864	"log"	"log"	"mmath"	false	1	false	0
865	"log10"	"log10"	"mmath"	false	1	false	0
866	"pi"	"pi"	"mmath"	false	1	false	0
867	"rand"	"rand"	"mmath"	false	1	true	0
868	"rand"	"sqlrand"	"mmath"	false	1	true	0
869	"curdate"	"current_date"	"mtime"	false	1	false	0
870	"current_date"	"current_date"	"mtime"	false	1	false	0
871	"curtime"	"current_time"	"mtime"	false	1	false	0
872	"current_time"	"current_time"	"mtime"	false	1	false	0
873	"current_timestamp"	"current_timestamp"	"mtime"	false	1	false	0
874	"localtime"	"current_time"	"sql"	false	1	false	0
875	"localtimestamp"	"current_timestamp"	"sql"	false	1	false	0
876	"sql_sub"	"date_sub_msec_interval"	"mtime"	false	1	false	0
877	"sql_sub"	"date_sub_month_interval"	"mtime"	false	1	false	0
878	"sql_sub"	"timestamp_sub_msec_interval"	"mtime"	false	1	false	0
879	"sql_sub"	"timestamp_sub_month_interval"	"mtime"	false	1	false	0
880	"sql_sub"	"timestamp_sub_msec_interval"	"mtime"	false	1	false	0
881	"sql_sub"	"timestamp_sub_month_interval"	"mtime"	false	1	false	0
882	"sql_sub"	"time_sub_msec_interval"	"mtime"	false	1	false	0
883	"sql_sub"	"diff"	"mtime"	false	1	false	0
884	"sql_sub"	"diff"	"mtime"	false	1	false	0
885	"sql_sub"	"diff"	"mtime"	false	1	false	0
886	"sql_add"	"date_add_msec_interval"	"mtime"	false	1	false	0
887	"sql_add"	"addmonths"	"mtime"	false	1	false	0
888	"sql_add"	"timestamp_add_msec_interval"	"mtime"	false	1	false	0
889	"sql_add"	"timestamp_add_month_interval"	"mtime"	false	1	false	0
890	"sql_add"	"timestamp_add_msec_interval"	"mtime"	false	1	false	0
891	"sql_add"	"timestamp_add_month_interval"	"mtime"	false	1	false	0
892	"sql_add"	"time_add_msec_interval"	"mtime"	false	1	false	0
893	"local_timezone"	"local_timezone"	"mtime"	false	1	false	0
894	"year"	"year"	"mtime"	false	1	false	0
895	"month"	"month"	"mtime"	false	1	false	0
896	"day"	"day"	"mtime"	false	1	false	0
897	"hour"	"hours"	"mtime"	false	1	false	0
898	"minute"	"minutes"	"mtime"	false	1	false	0
899	"second"	"sql_seconds"	"mtime"	false	1	false	0
900	"year"	"year"	"mtime"	false	1	false	0
901	"month"	"month"	"mtime"	false	1	false	0
902	"day"	"day"	"mtime"	false	1	false	0
903	"hour"	"hours"	"mtime"	false	1	false	0
904	"minute"	"minutes"	"mtime"	false	1	false	0
905	"second"	"sql_seconds"	"mtime"	false	1	false	0
906	"year"	"year"	"mtime"	false	1	false	0
907	"month"	"month"	"mtime"	false	1	false	0
908	"day"	"day"	"mtime"	false	1	false	0
909	"hour"	"hours"	"mtime"	false	1	false	0
910	"minute"	"minutes"	"mtime"	false	1	false	0
911	"second"	"sql_seconds"	"mtime"	false	1	false	0
912	"year"	"year"	"mtime"	false	1	false	0
913	"month"	"month"	"mtime"	false	1	false	0
914	"day"	"day"	"mtime"	false	1	false	0
915	"hour"	"hours"	"mtime"	false	1	false	0
916	"minute"	"minutes"	"mtime"	false	1	false	0
917	"second"	"seconds"	"mtime"	false	1	false	0
918	"dayofyear"	"dayofyear"	"mtime"	false	1	false	0
919	"weekofyear"	"weekofyear"	"mtime"	false	1	false	0
920	"dayofweek"	"dayofweek"	"mtime"	false	1	false	0
921	"dayofmonth"	"day"	"mtime"	false	1	false	0
922	"week"	"weekofyear"	"mtime"	false	1	false	0
923	"next_value_for"	"next_value"	"sql"	false	1	true	0
924	"get_value_for"	"get_value"	"sql"	false	1	false	0
925	"restart"	"restart"	"sql"	false	1	false	0
926	"locate"	"locate"	"str"	false	1	false	0
927	"locate"	"locate"	"str"	false	1	false	0
928	"substring"	"substring"	"str"	false	1	false	0
929	"substring"	"substring"	"str"	false	1	false	0
930	"like"	"like"	"str"	false	1	false	0
931	"like"	"like"	"str"	false	1	false	0
932	"ilike"	"ilike"	"str"	false	1	false	0
933	"ilike"	"ilike"	"str"	false	1	false	0
934	"not_like"	"not_like"	"str"	false	1	false	0
935	"not_like"	"not_like"	"str"	false	1	false	0
936	"not_ilike"	"not_ilike"	"str"	false	1	false	0
937	"not_ilike"	"not_ilike"	"str"	false	1	false	0
938	"patindex"	"patindex"	"pcre"	false	1	false	0
939	"truncate"	"stringleft"	"str"	false	1	false	0
940	"concat"	"+"	"calc"	false	1	false	0
941	"ascii"	"ascii"	"str"	false	1	false	0
942	"code"	"unicode"	"str"	false	1	false	0
943	"length"	"stringlength"	"str"	false	1	false	0
944	"right"	"stringright"	"str"	false	1	false	0
945	"left"	"stringleft"	"str"	false	1	false	0
946	"upper"	"toUpper"	"str"	false	1	false	0
947	"ucase"	"toUpper"	"str"	false	1	false	0
948	"lower"	"toLower"	"str"	false	1	false	0
949	"lcase"	"toLower"	"str"	false	1	false	0
950	"trim"	"trim"	"str"	false	1	false	0
951	"ltrim"	"ltrim"	"str"	false	1	false	0
952	"rtrim"	"rtrim"	"str"	false	1	false	0
953	"insert"	"insert"	"str"	false	1	false	0
954	"replace"	"replace"	"str"	false	1	false	0
955	"repeat"	"repeat"	"str"	false	1	false	0
956	"space"	"space"	"str"	false	1	false	0
957	"char_length"	"length"	"str"	false	1	false	0
958	"character_length"	"length"	"str"	false	1	false	0
959	"octet_length"	"nbytes"	"str"	false	1	false	0
960	"soundex"	"soundex"	"txtsim"	false	1	false	0
961	"difference"	"stringdiff"	"txtsim"	false	1	false	0
962	"editdistance"	"editdistance"	"txtsim"	false	1	false	0
963	"editdistance2"	"editdistance2"	"txtsim"	false	1	false	0
964	"similarity"	"similarity"	"txtsim"	false	1	false	0
965	"qgramnormalize"	"qgramnormalize"	"txtsim"	false	1	false	0
966	"levenshtein"	"levenshtein"	"txtsim"	false	1	false	0
967	"levenshtein"	"levenshtein"	"txtsim"	false	1	false	0
968	"locate"	"locate"	"str"	false	1	false	0
969	"locate"	"locate"	"str"	false	1	false	0
970	"substring"	"substring"	"str"	false	1	false	0
971	"substring"	"substring"	"str"	false	1	false	0
972	"like"	"like"	"str"	false	1	false	0
973	"like"	"like"	"str"	false	1	false	0
974	"ilike"	"ilike"	"str"	false	1	false	0
975	"ilike"	"ilike"	"str"	false	1	false	0
976	"not_like"	"not_like"	"str"	false	1	false	0
977	"not_like"	"not_like"	"str"	false	1	false	0
978	"not_ilike"	"not_ilike"	"str"	false	1	false	0
979	"not_ilike"	"not_ilike"	"str"	false	1	false	0
980	"patindex"	"patindex"	"pcre"	false	1	false	0
981	"truncate"	"stringleft"	"str"	false	1	false	0
982	"concat"	"+"	"calc"	false	1	false	0
983	"ascii"	"ascii"	"str"	false	1	false	0
984	"code"	"unicode"	"str"	false	1	false	0
985	"length"	"stringlength"	"str"	false	1	false	0
986	"right"	"stringright"	"str"	false	1	false	0
987	"left"	"stringleft"	"str"	false	1	false	0
988	"upper"	"toUpper"	"str"	false	1	false	0
989	"ucase"	"toUpper"	"str"	false	1	false	0
990	"lower"	"toLower"	"str"	false	1	false	0
991	"lcase"	"toLower"	"str"	false	1	false	0
992	"trim"	"trim"	"str"	false	1	false	0
993	"ltrim"	"ltrim"	"str"	false	1	false	0
994	"rtrim"	"rtrim"	"str"	false	1	false	0
995	"insert"	"insert"	"str"	false	1	false	0
996	"replace"	"replace"	"str"	false	1	false	0
997	"repeat"	"repeat"	"str"	false	1	false	0
998	"space"	"space"	"str"	false	1	false	0
999	"char_length"	"length"	"str"	false	1	false	0
1000	"character_length"	"length"	"str"	false	1	false	0
1001	"octet_length"	"nbytes"	"str"	false	1	false	0
1002	"soundex"	"soundex"	"txtsim"	false	1	false	0
1003	"difference"	"stringdiff"	"txtsim"	false	1	false	0
1004	"editdistance"	"editdistance"	"txtsim"	false	1	false	0
1005	"editdistance2"	"editdistance2"	"txtsim"	false	1	false	0
1006	"similarity"	"similarity"	"txtsim"	false	1	false	0
1007	"qgramnormalize"	"qgramnormalize"	"txtsim"	false	1	false	0
1008	"levenshtein"	"levenshtein"	"txtsim"	false	1	false	0
1009	"levenshtein"	"levenshtein"	"txtsim"	false	1	false	0
1010	"locate"	"locate"	"str"	false	1	false	0
1011	"locate"	"locate"	"str"	false	1	false	0
1012	"substring"	"substring"	"str"	false	1	false	0
1013	"substring"	"substring"	"str"	false	1	false	0
1014	"like"	"like"	"str"	false	1	false	0
1015	"like"	"like"	"str"	false	1	false	0
1016	"ilike"	"ilike"	"str"	false	1	false	0
1017	"ilike"	"ilike"	"str"	false	1	false	0
1018	"not_like"	"not_like"	"str"	false	1	false	0
1019	"not_like"	"not_like"	"str"	false	1	false	0
1020	"not_ilike"	"not_ilike"	"str"	false	1	false	0
1021	"not_ilike"	"not_ilike"	"str"	false	1	false	0
1022	"patindex"	"patindex"	"pcre"	false	1	false	0
1023	"truncate"	"stringleft"	"str"	false	1	false	0
1024	"concat"	"+"	"calc"	false	1	false	0
1025	"ascii"	"ascii"	"str"	false	1	false	0
1026	"code"	"unicode"	"str"	false	1	false	0
1027	"length"	"stringlength"	"str"	false	1	false	0
1028	"right"	"stringright"	"str"	false	1	false	0
1029	"left"	"stringleft"	"str"	false	1	false	0
1030	"upper"	"toUpper"	"str"	false	1	false	0
1031	"ucase"	"toUpper"	"str"	false	1	false	0
1032	"lower"	"toLower"	"str"	false	1	false	0
1033	"lcase"	"toLower"	"str"	false	1	false	0
1034	"trim"	"trim"	"str"	false	1	false	0
1035	"ltrim"	"ltrim"	"str"	false	1	false	0
1036	"rtrim"	"rtrim"	"str"	false	1	false	0
1037	"insert"	"insert"	"str"	false	1	false	0
1038	"replace"	"replace"	"str"	false	1	false	0
1039	"repeat"	"repeat"	"str"	false	1	false	0
1040	"space"	"space"	"str"	false	1	false	0
1041	"char_length"	"length"	"str"	false	1	false	0
1042	"character_length"	"length"	"str"	false	1	false	0
1043	"octet_length"	"nbytes"	"str"	false	1	false	0
1044	"soundex"	"soundex"	"txtsim"	false	1	false	0
1045	"difference"	"stringdiff"	"txtsim"	false	1	false	0
1046	"editdistance"	"editdistance"	"txtsim"	false	1	false	0
1047	"editdistance2"	"editdistance2"	"txtsim"	false	1	false	0
1048	"similarity"	"similarity"	"txtsim"	false	1	false	0
1049	"qgramnormalize"	"qgramnormalize"	"txtsim"	false	1	false	0
1050	"levenshtein"	"levenshtein"	"txtsim"	false	1	false	0
1051	"levenshtein"	"levenshtein"	"txtsim"	false	1	false	0
1052	"copyfrom"	"copy_from"	"sql"	false	1	false	0
1053	"copyfrom"	"copyfrom"	"sql"	false	1	false	0
1054	"copyfrom"	"importTable"	"sql"	false	1	false	0
27	"not_unique"	"not_unique"	"sql"	false	3	false	0
39	"zero_or_one"	"zero_or_one"	"sql"	false	3	false	0
40	"exist"	"exist"	"aggr"	false	3	false	0
41	"not_exist"	"not_exist"	"aggr"	false	3	false	0
46	"min"	"min"	"aggr"	false	3	false	0
47	"max"	"max"	"aggr"	false	3	false	0
51	"sum"	"sum"	"aggr"	false	3	false	0
52	"sum"	"sum"	"aggr"	false	3	false	0
53	"sum"	"sum"	"aggr"	false	3	false	0
54	"sum"	"sum"	"aggr"	false	3	false	0
55	"sum"	"sum"	"aggr"	false	3	false	0
56	"sum"	"sum"	"aggr"	false	3	false	0
57	"sum"	"sum"	"aggr"	false	3	false	0
58	"sum"	"sum"	"aggr"	false	3	false	0
59	"sum"	"sum"	"aggr"	false	3	false	0
60	"prod"	"prod"	"aggr"	false	3	false	0
61	"prod"	"prod"	"aggr"	false	3	false	0
62	"prod"	"prod"	"aggr"	false	3	false	0
63	"prod"	"prod"	"aggr"	false	3	false	0
64	"prod"	"prod"	"aggr"	false	3	false	0
65	"prod"	"prod"	"aggr"	false	3	false	0
66	"prod"	"prod"	"aggr"	false	3	false	0
67	"prod"	"prod"	"aggr"	false	3	false	0
80	"sum"	"sum"	"aggr"	false	3	false	0
81	"prod"	"prod"	"aggr"	false	3	false	0
82	"sum"	"sum"	"aggr"	false	3	false	0
83	"prod"	"prod"	"aggr"	false	3	false	0
84	"avg"	"avg"	"aggr"	false	3	false	0
85	"count_no_nil"	"count_no_nil"	"aggr"	false	3	false	0
86	"count"	"count"	"aggr"	false	3	false	0
5102	"env"	"CREATE FUNCTION env () RETURNS TABLE( name varchar(1024), value varchar(2048)) EXTERNAL NAME sql.sql_environment;"	"sql"	true	1	false	2000
5106	"var"	"CREATE FUNCTION var() RETURNS TABLE( name varchar(1024)) EXTERNAL NAME sql.sql_variables;"	"sql"	true	1	false	2000
5114	"db_users"	"CREATE FUNCTION db_users () RETURNS TABLE( name varchar(2048)) EXTERNAL NAME sql.db_users;"	"sql"	true	1	false	2000
5134	"like"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate filter function \"like\"(val string, pat string, esc string) external name algebra.likesubselect;"	"algebra"	true	4	false	2000
5139	"ilike"	"create filter function \"ilike\"(val string, pat string, esc string) external name algebra.ilikesubselect;"	"algebra"	true	4	false	2000
5144	"degrees"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate function degrees(r double) \nreturns double\n\treturn r*180/pi();"	"user"	true	1	false	2000
5148	"radians"	"create function radians(d double) \nreturns double\n\treturn d*pi()/180;"	"user"	true	1	false	2000
5152	"times"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- Provide a simple equivalent for the UNIX times command\n-- times 0 ms user 0 ms system 0 ms 0 reads 0 writes\n\ncreate procedure times()\nexternal name sql.times;"	"sql"	true	2	false	2000
5155	"getanchor"	"create function getanchor( theurl url ) returns string \n\texternal name url.\"getAnchor\";"	"url"	true	1	false	2000
5159	"getbasename"	"create function getbasename(theurl url) returns string       \n\texternal name url.\"getBasename\";"	"url"	true	1	false	2000
5163	"getcontent"	"create function getcontent(theurl url)   returns string       \n\texternal name url.\"getContent\";"	"url"	true	1	false	2000
5167	"getcontext"	"create function getcontext(theurl url)   returns string       \n\texternal name url.\"getContext\";"	"url"	true	1	false	2000
5171	"getdomain"	"create function getdomain(theurl url) returns string       \n\texternal name url.\"getDomain\";"	"url"	true	1	false	2000
5175	"getextension"	"create function getextension(theurl url) returns string       \n\texternal name url.\"getExtension\";"	"url"	true	1	false	2000
5179	"getfile"	"create function getfile(theurl url) returns string       \n\texternal name url.\"getFile\";"	"url"	true	1	false	2000
5183	"gethost"	"create function gethost(theurl url)   returns string       \n\texternal name url.\"getHost\";"	"url"	true	1	false	2000
5187	"getport"	"create function getport(theurl url) returns string       \n\texternal name url.\"getPort\";"	"url"	true	1	false	2000
5191	"getprotocol"	"create function getprotocol(theurl url) returns string       \n\texternal name url.\"getProtocol\";"	"url"	true	1	false	2000
5195	"getquery"	"create function getquery(theurl url) returns string       \n\texternal name url.\"getQuery\";"	"url"	true	1	false	2000
5199	"getuser"	"create function getuser(theurl url) returns string       \n\texternal name url.\"getUser\";"	"url"	true	1	false	2000
5203	"getroboturl"	"create function getroboturl(theurl url) returns string       \n\texternal name url.\"getRobotURL\";"	"url"	true	1	false	2000
5207	"isaurl"	"create function isaurl(theurl url) returns bool\n\texternal name url.\"isaURL\";"	"url"	true	1	false	2000
5211	"newurl"	"create function newurl(protocol string, hostname string, \"port\" int, file string) \n\treturns url       \n\texternal name url.\"new\";"	"url"	true	1	false	2000
5218	"newurl"	"create function newurl(protocol string, hostname string, file string) \n\treturns url \n\texternal name url.\"new\";"	"url"	true	1	false	2000
5224	"str_to_date"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate function str_to_date(s string, format string) returns date\n\texternal name mtime.\"str_to_date\";"	"mtime"	true	1	false	2000
5229	"date_to_str"	"create function date_to_str(d date, format string) returns string\n\texternal name mtime.\"date_to_str\";"	"mtime"	true	1	false	2000
5235	"broadcast"	"create function \"broadcast\" (p inet) returns inet \n\texternal name inet.\"broadcast\";"	"inet"	true	1	false	2000
5239	"host"	"create function \"host\" (p inet) returns clob\n\texternal name inet.\"host\";"	"inet"	true	1	false	2000
5243	"masklen"	"create function \"masklen\" (p inet) returns int\n\texternal name inet.\"masklen\";"	"inet"	true	1	false	2000
5247	"setmasklen"	"create function \"setmasklen\" (p inet, mask int) returns inet\n\texternal name inet.\"setmasklen\";"	"inet"	true	1	false	2000
5252	"netmask"	"create function \"netmask\" (p inet) returns inet\n\texternal name inet.\"netmask\";"	"inet"	true	1	false	2000
5256	"hostmask"	"create function \"hostmask\" (p inet) returns inet\n\texternal name inet.\"hostmask\";"	"inet"	true	1	false	2000
5260	"network"	"create function \"network\" (p inet) returns inet\n\texternal name inet.\"network\";"	"inet"	true	1	false	2000
5264	"text"	"create function \"text\" (p inet) returns clob\n\texternal name inet.\"text\";"	"inet"	true	1	false	2000
5268	"abbrev"	"create function \"abbrev\" (p inet) returns clob\n\texternal name inet.\"abbrev\";"	"inet"	true	1	false	2000
5280	"querylog_catalog"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- QUERY HISTORY\n-- The query history mechanism of MonetDB/SQL relies on a few hooks.\n-- The most important one is a global system variable which controls\n--  monitoring of all sessions. \n\ncreate function sys.querylog_catalog()\nreturns table(\n\tid oid,\n\towner string,\n\tdefined timestamp,\n\tquery string,\n\tpipe string,\n\tmal int,\t\t\t-- size of MAL plan\n\toptimize bigint \t-- time in usec\n)\nexternal name sql.querylog_catalog;"	"sql"	true	1	false	2000
5294	"querylog_calls"	"-- Each query call is stored in the table calls\n-- At regular intervals the query history table should be cleaned.\n-- This can be done manually on the SQL console, or be integrated\n-- in the keepQuery and keepCall upon need.\n-- The parameters are geared at understanding the resource claims\n-- They reflect the effect of the total workload mix during execution.\n-- The 'cpu' gives the average cpu load percentage over all cores on the \n-- server during execution phase. \n-- increasing cpu load indicates better use of multi-cores.\n-- The 'io' indicate IOs during complete query run.\n-- The 'space' is the total amount of intermediates created in MB.\n-- Reducing the space component improves performance/\n-- All timing in usec and all storage in bytes.\n\ncreate function sys.querylog_calls()\nreturns table(\n\tid oid,\t\t\t\t -- references query plan\n\t\"start\" timestamp,\t-- time the statement was started\n\t\"stop\" timestamp,\t-- time the statement was completely finished\n\targuments string,\t-- actual call structure\n\ttuples wrd,\t\t\t-- number of tuples in the result set\n\trun bigint,\t\t-- time spent (in usec)  until the result export\n\tship bigint,\t\t-- time spent (in usec)  to ship the result set\n\tcpu int,  \t\t-- average cpu load percentage during execution\n\tio int,\t\t\t-- percentage time waiting for IO to finish \n\tspace bigint\t\t-- total storage size of intermediates created (in MB)\n)\nexternal name sql.querylog_calls;"	"sql"	true	1	false	2000
5336	"querylog_empty"	"-- reset history for a particular user\ncreate procedure sys.querylog_empty()\nexternal name sql.querylog_empty;"	"sql"	true	2	false	2000
5338	"querylog_enable"	"-- manipulate the query logger\ncreate procedure sys.querylog_enable()\nexternal name sql.querylog_enable;"	"sql"	true	2	false	2000
5340	"querylog_enable"	"create procedure sys.querylog_enable(threshold smallint)\nexternal name sql.querylog_enable_threshold;"	"sql"	true	2	false	2000
5343	"querylog_disable"	"create procedure sys.querylog_disable()\nexternal name sql.querylog_disable;"	"sql"	true	2	false	2000
5358	"tracelog"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- make the offline tracing table available for inspection\ncreate function sys.tracelog() \n\treturns table (\n\t\tevent integer,\t\t-- event counter\n\t\tclk varchar(20), \t-- wallclock, no mtime in kernel\n\t\tpc varchar(50), \t-- module.function[nr]\n\t\tthread int, \t\t-- thread identifier\n\t\t\"user\" int, \t\t-- user identifier\n\t\tticks bigint, \t\t-- time in microseconds\n\t\treads bigint, \t\t-- number of blocks read\n\t\twrites bigint, \t-- number of blocks written\n\t\trbytes bigint,\t\t-- amount of bytes touched\n\t\twbytes bigint,\t\t-- amount of bytes written\n\t\ttype string,\t\t-- return types\n\t\tstmt string\t\t\t-- actual statement executed\n\t)\n\texternal name sql.dump_trace;"	"sql"	true	1	false	2000
5375	"gzcompress"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- Perform LZ-compression over a specific table;\ncreate procedure gzcompress (s string, t string)\n    external name sql.gzcompress;"	"sql"	true	2	false	2000
5379	"gzdecompress"	"create procedure gzdecompress (s string, t string)\n    external name sql.gzdecompress;"	"sql"	true	2	false	2000
5383	"gztruncate"	"-- Truncate the storage for columns with a compressed image\ncreate procedure gztruncate (s string, t string)\n    external name sql.gztruncate;"	"sql"	true	2	false	2000
5387	"gzexpand"	"-- Remove the compressed images\ncreate procedure gzexpand (s string, t string)\n    external name sql.gzexpand;"	"sql"	true	2	false	2000
5391	"newdictionary"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate procedure newdictionary (s string, t string)\n    external name sql.newdictionary;"	"sql"	true	2	false	2000
5395	"dropdictionary"	"create procedure dropdictionary (s string, t string)\n    external name sql.dropdictionary;"	"sql"	true	2	false	2000
5399	"initializedictionary"	"create procedure initializedictionary ()\n    external name dictionary.initialize;"	"dictionary"	true	2	false	2000
5401	"cluster1"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- Clustering a relational table should be done with care.\n-- For, the oid's are used in join-indices.\n\n-- Clustering of tables may improve IO performance\n-- The foreign key constraints should be dropped before\n-- and re-established after the cluster operation.\n\ncreate procedure cluster1(sys string, tab string)\n\texternal name sql.cluster1;"	"sql"	true	2	false	2000
5405	"cluster2"	"create procedure cluster2(sys string, tab string)\n\texternal name sql.cluster2;"	"sql"	true	2	false	2000
5409	"shrink"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- Vacuum a relational table should be done with care.\n-- For, the oid's are used in join-indices.\n\n-- Vacuum of tables may improve IO performance and disk footprint.\n-- The foreign key constraints should be dropped before\n-- and re-established after the cluster operation.\n\ncreate procedure shrink(sys string, tab string)\n\texternal name sql.shrink;"	"sql"	true	2	false	2000
5413	"reuse"	"create procedure reuse(sys string, tab string)\n\texternal name sql.reuse;"	"sql"	true	2	false	2000
5417	"vacuum"	"create procedure vacuum(sys string, tab string)\n\texternal name sql.vacuum;"	"sql"	true	2	false	2000
5425	"dependencies_schemas_on_users"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n--Schema s has a dependency on user u\ncreate function dependencies_schemas_on_users()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select s.name, u.name, 'DEP_USER' from schemas as s, users u where u.default_schema = s.id);"	"user"	true	1	false	2000
5432	"dependencies_owners_on_schemas"	"--User (owner) has a dependency in schema s\ncreate function dependencies_owners_on_schemas()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select a.name, s.name, 'DEP_SCHEMA' from schemas as s, auths a where s.owner = a.id);"	"user"	true	1	false	2000
5439	"dependencies_tables_on_views"	"--Table t has a dependency on view v\ncreate function dependencies_tables_on_views()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select t.name, v.name, 'DEP_VIEW' from tables as t, tables as v, dependencies as dep where t.id = dep.id and v.id = dep.depend_id and dep.depend_type = 5 and v.type = 1);"	"user"	true	1	false	2000
5446	"dependencies_tables_on_indexes"	"--Table t has a dependency on index  i\ncreate function dependencies_tables_on_indexes()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select t.name, i.name, 'DEP_INDEX' from tables as t, idxs as i where i.table_id = t.id and i.name not in (select name from keys) and t.type = 0);"	"user"	true	1	false	2000
5453	"dependencies_tables_on_triggers"	"--Table t has a dependency on trigger tri\n\ncreate function dependencies_tables_on_triggers()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table ((select t.name, tri.name, 'DEP_TRIGGER' from tables as t, triggers as tri where tri.table_id = t.id) union (select t.name, tri.name, 'DEP_TRIGGER' from triggers tri, tables t, dependencies dep where dep.id = t.id and dep.depend_id =tri.id and dep.depend_type = 8));"	"user"	true	1	false	2000
5460	"dependencies_tables_on_foreignkeys"	"--Table t has a dependency on foreign key k\ncreate function dependencies_tables_on_foreignkeys()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select t.name, fk.name, 'DEP_FKEY' from tables as t, keys as k, keys as fk where fk.rkey = k.id and k.table_id = t.id);"	"user"	true	1	false	2000
5467	"dependencies_tables_on_functions"	"--Table t has a dependency on function f\ncreate function dependencies_tables_on_functions()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select t.name, f.name, 'DEP_FUNC' from functions as f, tables as t, dependencies as dep where t.id = dep.id and f.id = dep.depend_id and dep.depend_type = 7 and t.type = 0);"	"user"	true	1	false	2000
5474	"dependencies_columns_on_views"	"--Column c has a dependency on view v\ncreate function dependencies_columns_on_views()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select c.name, v.name, 'DEP_VIEW' from columns as c, tables as v, dependencies as dep where c.id = dep.id and v.id = dep.depend_id and dep.depend_type = 5 and v.type = 1);"	"user"	true	1	false	2000
5481	"dependencies_columns_on_keys"	"--Column c has a dependency on key k\ncreate function dependencies_columns_on_keys()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select c.name, k.name, 'DEP_KEY' from columns as c, objects as kc, keys as k where kc.\"name\" = c.name and kc.id = k.id and k.table_id = c.table_id and k.rkey = -1);"	"user"	true	1	false	2000
5488	"dependencies_columns_on_indexes"	"--Column c has a dependency on index i \ncreate function dependencies_columns_on_indexes()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select c.name, i.name, 'DEP_INDEX' from columns as c, objects as kc, idxs as i where kc.\"name\" = c.name and kc.id = i.id and c.table_id = i.table_id and i.name not in (select name from keys));"	"user"	true	1	false	2000
5495	"dependencies_columns_on_functions"	"--Column c has a dependency on function f\ncreate function dependencies_columns_on_functions()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select c.name, f.name, 'DEP_FUNC' from functions as f, columns as c, dependencies as dep where c.id = dep.id and f.id = dep.depend_id and dep.depend_type = 7);"	"user"	true	1	false	2000
5502	"dependencies_columns_on_triggers"	"--Column c has a dependency on trigger tri\ncreate function dependencies_columns_on_triggers()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select c.name, tri.name, 'DEP_TRIGGER' from columns as c, triggers as tri, dependencies as dep where dep.id = c.id and dep.depend_id =tri.id and dep.depend_type = 8);"	"user"	true	1	false	2000
5509	"dependencies_views_on_functions"	"--View v has a dependency on function f\ncreate function dependencies_views_on_functions()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select v.name, f.name, 'DEP_FUNC' from functions as f, tables as v, dependencies as dep where v.id = dep.id and f.id = dep.depend_id and dep.depend_type = 7 and v.type = 1);"	"user"	true	1	false	2000
5516	"dependencies_views_on_triggers"	"--View v has a dependency on trigger tri\ncreate function dependencies_views_on_triggers()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select v.name, tri.name, 'DEP_TRIGGER' from tables as v, triggers as tri, dependencies as dep where dep.id = v.id and dep.depend_id =tri.id and dep.depend_type = 8 and v.type = 1);"	"user"	true	1	false	2000
5523	"dependencies_functions_on_functions"	"--Function f1 has a dependency on function f2\ncreate function dependencies_functions_on_functions()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select f1.name, f2.name, 'DEP_FUNC' from functions as f1, functions as f2, dependencies as dep where f1.id = dep.id and f2.id = dep.depend_id and dep.depend_type = 7);"	"user"	true	1	false	2000
5530	"dependencies_functions_os_triggers"	"--Function f1 has a dependency on trigger tri\ncreate function dependencies_functions_os_triggers()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select f.name, tri.name, 'DEP_TRIGGER' from functions as f, triggers as tri, dependencies as dep where dep.id = f.id and dep.depend_id =tri.id and dep.depend_type = 8);"	"user"	true	1	false	2000
5537	"dependencies_keys_on_foreignkeys"	"--Key k has a dependency on foreign key fk\ncreate function dependencies_keys_on_foreignkeys()\nreturns table (sch varchar(100), usr varchar(100), dep_type varchar(32))\nreturn table (select k.name, fk.name, 'DEP_FKEY' from keys as k, keys as fk where fk.rkey = k.id);"	"user"	true	1	false	2000
5540	"password_hash"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate function sys.password_hash (username string) \n\treturns string \n\texternal name sql.password;"	"sql"	true	1	false	2000
5551	"sessions"	"create function sys.sessions()\nreturns table(\"user\" string, \"login\" timestamp, \"sessiontimeout\" bigint, \"lastcommand\" timestamp, \"querytimeout\" bigint, \"active\" bool)\nexternal name sql.sessions;"	"sql"	true	1	false	2000
5562	"shutdown"	"create procedure sys.shutdown(delay tinyint) \nexternal name sql.shutdown;"	"sql"	true	2	false	2000
5565	"shutdown"	"create procedure sys.shutdown(delay tinyint, force bool) \nexternal name sql.shutdown;"	"sql"	true	2	false	2000
5569	"settimeout"	"-- control the query and session time out \ncreate procedure sys.settimeout(\"query\" bigint)\n\texternal name sql.settimeout;"	"sql"	true	2	false	2000
5572	"settimeout"	"create procedure sys.settimeout(\"query\" bigint, \"session\" bigint)\n\texternal name sql.settimeout;"	"sql"	true	2	false	2000
5576	"setsession"	"create procedure sys.setsession(\"timeout\" bigint)\n\texternal name sql.setsession;"	"sql"	true	2	false	2000
5579	"ms_stuff"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate function ms_stuff( s1 varchar(32), st int, len int, s3 varchar(32))\nreturns varchar(32)\nbegin\n\tdeclare res varchar(32), aux varchar(32);\n\tdeclare ofset int;\n\n    if ( st < 0 or st > length(s1))\n        then return '';\n    end if;\n\n    set ofset = 1;\n    set res = substring(s1,ofset,st-1);\n    set res = res || s3;\n    set ofset = st + len;\n    set aux = substring(s1,ofset,length(s1)-ofset+1);\n\tset res = res || aux;\n\treturn res;\nend;"	"user"	true	1	false	2000
5586	"ms_trunc"	"create function ms_trunc(num double, prc int)\nreturns double\nexternal name sql.ms_trunc;"	"sql"	true	1	false	2000
5591	"ms_round"	"create function ms_round(num double, prc int, truncat int)\nreturns double\nbegin\n\tif (truncat = 0)\n\t\tthen return round(num, prc);\n\t\telse return ms_trunc(num, prc);\n\tend if;\nend;"	"user"	true	1	false	2000
5597	"ms_str"	"create function ms_str(num float, prc int, truncat int)\nreturns string\nbegin\n        return cast(num as string);\nend;"	"user"	true	1	false	2000
5603	"alpha"	"create function alpha(pdec double, pradius double)\nreturns double external name sql.alpha;"	"sql"	true	1	false	2000
5608	"zorder_encode"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate function zorder_encode(x integer, y integer) returns oid\n    external name zorder.encode;"	"zorder"	true	1	false	2000
5613	"zorder_decode_x"	"create function zorder_decode_x(z oid) returns integer\n    external name zorder.decode_x;"	"zorder"	true	1	false	2000
5617	"zorder_decode_y"	"create function zorder_decode_y(z oid) returns integer\n    external name zorder.decode_y;"	"zorder"	true	1	false	2000
5624	"optimizer_stats"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- show the optimizer statistics maintained by the SQL frontend\ncreate function sys.optimizer_stats () \n\treturns table (rewrite string, count int) \n\texternal name sql.dump_opt_stats;"	"sql"	true	1	false	2000
5630	"querycache"	"-- SQL QUERY CACHE\n-- The SQL query cache returns a table with the query plans kept\n\ncreate function sys.querycache() \n\treturns table (query string, count int) \n\texternal name sql.dump_cache;"	"sql"	true	1	false	2000
5633	"querylog"	"-- Trace the SQL input\ncreate procedure sys.querylog(filename string) \n\texternal name sql.logfile;"	"sql"	true	2	false	2000
5640	"optimizers"	"-- MONETDB KERNEL SECTION\n-- optimizer pipe catalog\ncreate function sys.optimizers () \n\treturns table (name string, def string, status string)\n\texternal name sql.optimizers;"	"sql"	true	1	false	2000
5651	"environment"	"-- The environment table\ncreate function sys.environment()\n\treturns table (\"name\" string, value string)\n\texternal name sql.sql_environment;"	"sql"	true	1	false	2000
5671	"bbp"	"-- The BAT buffer pool overview\ncreate function sys.bbp () \n\treturns table (id int, name string, htype string, \n\t\tttype string, count bigint, refcnt int, lrefcnt int, \n\t\tlocation string, heat int, dirty string, \n\t\tstatus string, kind string) \n\texternal name sql.bbp;"	"sql"	true	1	false	2000
5674	"evalalgebra"	"create procedure sys.evalalgebra( ra_stmt string, opt bool)\n\texternal name sql.\"evalAlgebra\";"	"sql"	true	2	false	2000
5687	"queue"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- System monitoring\n\n-- show status of all active SQL queries.\ncreate function sys.queue()\nreturns table(\n\tqtag bigint,\n\t\"user\" string,\n\tstarted timestamp,\n\testimate timestamp,\n\tprogress int,\n\tstatus string,\n\ttag oid,\n\tquery string\n)\nexternal name sql.sysmon_queue;"	"sql"	true	1	false	2000
5700	"pause"	"-- operations to manipulate the state of havoc queries\ncreate procedure sys.pause(tag int)\nexternal name sql.sysmon_pause;"	"sql"	true	2	false	2000
5703	"resume"	"create procedure sys.resume(tag int)\nexternal name sql.sysmon_resume;"	"sql"	true	2	false	2000
5706	"stop"	"create procedure sys.stop(tag int)\nexternal name sql.sysmon_stop;"	"sql"	true	2	false	2000
5709	"pause"	"create procedure sys.pause(tag bigint)\nexternal name sql.sysmon_pause;"	"sql"	true	2	false	2000
5712	"resume"	"create procedure sys.resume(tag bigint)\nexternal name sql.sysmon_resume;"	"sql"	true	2	false	2000
5715	"stop"	"create procedure sys.stop(tag bigint)\nexternal name sql.sysmon_stop;"	"sql"	true	2	false	2000
5718	"stddev_samp"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\ncreate aggregate stddev_samp(val tinyint) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
5722	"stddev_samp"	"create aggregate stddev_samp(val smallint) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
5726	"stddev_samp"	"create aggregate stddev_samp(val integer) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
5730	"stddev_samp"	"create aggregate stddev_samp(val wrd) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
5734	"stddev_samp"	"create aggregate stddev_samp(val bigint) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
5738	"stddev_samp"	"create aggregate stddev_samp(val real) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
5742	"stddev_samp"	"create aggregate stddev_samp(val double) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
5746	"stddev_samp"	"create aggregate stddev_samp(val date) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
5750	"stddev_samp"	"create aggregate stddev_samp(val time) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
5754	"stddev_samp"	"create aggregate stddev_samp(val timestamp) returns double\n\texternal name \"aggr\".\"stdev\";"	"aggr"	true	3	false	2000
5758	"stddev_pop"	"create aggregate stddev_pop(val tinyint) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
5762	"stddev_pop"	"create aggregate stddev_pop(val smallint) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
5766	"stddev_pop"	"create aggregate stddev_pop(val integer) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
5770	"stddev_pop"	"create aggregate stddev_pop(val wrd) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
5774	"stddev_pop"	"create aggregate stddev_pop(val bigint) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
5778	"stddev_pop"	"create aggregate stddev_pop(val real) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
5782	"stddev_pop"	"create aggregate stddev_pop(val double) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
5786	"stddev_pop"	"create aggregate stddev_pop(val date) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
5790	"stddev_pop"	"create aggregate stddev_pop(val time) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
5794	"stddev_pop"	"create aggregate stddev_pop(val timestamp) returns double\n\texternal name \"aggr\".\"stdevp\";"	"aggr"	true	3	false	2000
5798	"var_samp"	"create aggregate var_samp(val tinyint) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
5802	"var_samp"	"create aggregate var_samp(val smallint) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
5806	"var_samp"	"create aggregate var_samp(val integer) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
5810	"var_samp"	"create aggregate var_samp(val wrd) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
5814	"var_samp"	"create aggregate var_samp(val bigint) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
5818	"var_samp"	"create aggregate var_samp(val real) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
5822	"var_samp"	"create aggregate var_samp(val double) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
5826	"var_samp"	"create aggregate var_samp(val date) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
5830	"var_samp"	"create aggregate var_samp(val time) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
5834	"var_samp"	"create aggregate var_samp(val timestamp) returns double\n\texternal name \"aggr\".\"variance\";"	"aggr"	true	3	false	2000
5838	"var_pop"	"create aggregate var_pop(val tinyint) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
5842	"var_pop"	"create aggregate var_pop(val smallint) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
5846	"var_pop"	"create aggregate var_pop(val integer) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
5850	"var_pop"	"create aggregate var_pop(val wrd) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
5854	"var_pop"	"create aggregate var_pop(val bigint) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
5858	"var_pop"	"create aggregate var_pop(val real) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
5862	"var_pop"	"create aggregate var_pop(val double) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
5866	"var_pop"	"create aggregate var_pop(val date) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
5870	"var_pop"	"create aggregate var_pop(val time) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
5874	"var_pop"	"create aggregate var_pop(val timestamp) returns double\n\texternal name \"aggr\".\"variancep\";"	"aggr"	true	3	false	2000
5878	"median"	"create aggregate median(val tinyint) returns tinyint\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
5882	"median"	"create aggregate median(val smallint) returns smallint\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
5886	"median"	"create aggregate median(val integer) returns integer\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
5890	"median"	"create aggregate median(val wrd) returns wrd\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
5894	"median"	"create aggregate median(val bigint) returns bigint\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
5898	"median"	"create aggregate median(val decimal) returns decimal\n \texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
5902	"median"	"create aggregate median(val real) returns real\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
5906	"median"	"create aggregate median(val double) returns double\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
5910	"median"	"create aggregate median(val date) returns date\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
5914	"median"	"create aggregate median(val time) returns time\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
5918	"median"	"create aggregate median(val timestamp) returns timestamp\n\texternal name \"aggr\".\"median\";"	"aggr"	true	3	false	2000
5922	"quantile"	"create aggregate quantile(val tinyint, q double) returns tinyint\n \texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
5927	"quantile"	"create aggregate quantile(val smallint, q double) returns smallint\n \texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
5932	"quantile"	"create aggregate quantile(val integer, q double) returns integer\n \texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
5937	"quantile"	"create aggregate quantile(val wrd, q double) returns wrd\n\texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
5942	"quantile"	"create aggregate quantile(val bigint, q double) returns bigint\n\texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
5947	"quantile"	"create aggregate quantile(val decimal, q double) returns decimal\n \texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
5952	"quantile"	"create aggregate quantile(val real, q double) returns real\n\texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
5957	"quantile"	"create aggregate quantile(val double, q double) returns double\n\texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
5962	"quantile"	"create aggregate quantile(val date, q double) returns date\n\texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
5967	"quantile"	"create aggregate quantile(val time, q double) returns time\n\texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
5972	"quantile"	"create aggregate quantile(val timestamp, q double) returns timestamp\n\texternal name \"aggr\".\"quantile\";"	"aggr"	true	3	false	2000
5977	"corr"	"create aggregate corr(e1 tinyint, e2 tinyint) returns tinyint\n\texternal name \"aggr\".\"corr\";"	"aggr"	true	3	false	2000
5982	"corr"	"create aggregate corr(e1 smallint, e2 smallint) returns smallint\n\texternal name \"aggr\".\"corr\";"	"aggr"	true	3	false	2000
5987	"corr"	"create aggregate corr(e1 integer, e2 integer) returns integer\n\texternal name \"aggr\".\"corr\";"	"aggr"	true	3	false	2000
5992	"corr"	"create aggregate corr(e1 wrd, e2 wrd) returns wrd\n\texternal name \"aggr\".\"corr\";"	"aggr"	true	3	false	2000
5997	"corr"	"create aggregate corr(e1 bigint, e2 bigint) returns bigint\n\texternal name \"aggr\".\"corr\";"	"aggr"	true	3	false	2000
6002	"corr"	"create aggregate corr(e1 real, e2 real) returns real\n\texternal name \"aggr\".\"corr\";"	"aggr"	true	3	false	2000
6007	"corr"	"create aggregate corr(e1 double, e2 double) returns double\n\texternal name \"aggr\".\"corr\";"	"aggr"	true	3	false	2000
6025	"mbr"	"-- currently we only use mbr instead of\n-- Envelope():Geometry\n-- as that returns Geometry objects, and we prefer the explicit mbr's\n-- minimum bounding rectangle (mbr)\ncreate function mbr (g geometry) returns mbr external name geom.mbr;"	"geom"	true	1	false	2000
6029	"mbroverlaps"	"create function mbroverlaps(a mbr, b mbr) returns boolean external name geom.\"mbroverlaps\";"	"geom"	true	1	false	2000
6034	"geomfromtext"	"-- The srid in the *FromText Functions is currently not used\ncreate function geomfromtext(wkt string, srid smallint) returns geometry external name geom.\"GeomFromText\";"	"geom"	true	1	false	2000
6039	"pointfromtext"	"create function pointfromtext(wkt string, srid smallint) returns point external name geom.\"PointFromText\";"	"geom"	true	1	false	2000
6044	"linefromtext"	"create function linefromtext(wkt string, srid smallint) returns linestring external name geom.\"LineFromText\";"	"geom"	true	1	false	2000
6049	"polyfromtext"	"create function polyfromtext(wkt string, srid smallint) returns polygon external name geom.\"PolyFromText\";"	"geom"	true	1	false	2000
6054	"mpointfromtext"	"create function mpointfromtext(wkt string, srid smallint) returns multipoint external name geom.\"MultiPointFromText\";"	"geom"	true	1	false	2000
6059	"mlinefromtext"	"create function mlinefromtext(wkt string, srid smallint) returns multilinestring external name geom.\"MultiLineFromText\";"	"geom"	true	1	false	2000
6064	"mpolyfromtext"	"create function mpolyfromtext(wkt string, srid smallint) returns multipolygon external name geom.\"MultiPolyFromText\";"	"geom"	true	1	false	2000
6069	"geomcollectionfromtext"	"create function geomcollectionfromtext(wkt string, srid smallint) returns multipolygon external name geom.\"GeomCollectionFromText\";"	"geom"	true	1	false	2000
6074	"polygonfromtext"	"-- alias\ncreate function polygonfromtext(wkt string, srid smallint) returns polygon external name geom.\"PolyFromText\";"	"geom"	true	1	false	2000
6079	"astext"	"create function astext(g geometry) returns string external name geom.\"AsText\";"	"geom"	true	1	false	2000
6083	"x"	"create function x(g geometry) returns double external name geom.\"X\";"	"geom"	true	1	false	2000
6087	"y"	"create function y(g geometry) returns double external name geom.\"Y\";"	"geom"	true	1	false	2000
6091	"point"	"create function point(x double,y double) returns point external name geom.point;"	"geom"	true	1	false	2000
6096	"dimension"	"-- CREATE FUNCTION Point(g Geometry) RETURNS Point external name geom.point;\n-- CREATE FUNCTION Curve(g Geometry) RETURNS Curve external name geom.curve;\n-- CREATE FUNCTION LineString(g Geometry) RETURNS LineString external name geom.linestring;\n-- CREATE FUNCTION Surface(g Geometry) RETURNS Surface external name geom.surface;\n-- CREATE FUNCTION Polygon(g Geometry) RETURNS Polygon external name geom.polygon;\n\n-- ogc basic methods\ncreate function dimension(g geometry) returns integer external name geom.\"Dimension\";"	"geom"	true	1	false	2000
6100	"geometrytypeid"	"create function geometrytypeid(g geometry) returns integer external name geom.\"GeometryTypeId\";"	"geom"	true	1	false	2000
6104	"srid"	"create function srid(g geometry) returns integer external name geom.\"SRID\";"	"geom"	true	1	false	2000
6108	"envelope"	"create function envelope(g geometry) returns geometry external name geom.\"Envelope\";"	"geom"	true	1	false	2000
6112	"isempty"	"create function isempty(g geometry) returns boolean external name geom.\"IsEmpty\";"	"geom"	true	1	false	2000
6116	"issimple"	"create function issimple(g geometry) returns boolean external name geom.\"IsSimple\";"	"geom"	true	1	false	2000
6120	"boundary"	"create function boundary(g geometry) returns geometry external name geom.\"Boundary\";"	"geom"	true	1	false	2000
6124	"equals"	"-- ogc spatial relation methods\ncreate function equals(a geometry, b geometry) returns boolean external name geom.\"Equals\";"	"geom"	true	1	false	2000
6129	"disjoint"	"create function disjoint(a geometry, b geometry) returns boolean external name geom.\"Disjoint\";"	"geom"	true	1	false	2000
6134	"Intersect"	"create function \"Intersect\"(a geometry, b geometry) returns boolean external name geom.\"Intersect\";"	"geom"	true	1	false	2000
6139	"touches"	"create function touches(a geometry, b geometry) returns boolean external name geom.\"Touches\";"	"geom"	true	1	false	2000
6144	"crosses"	"create function crosses(a geometry, b geometry) returns boolean external name geom.\"Crosses\";"	"geom"	true	1	false	2000
6149	"within"	"create function within(a geometry, b geometry) returns boolean external name geom.\"Within\";"	"geom"	true	1	false	2000
6154	"contains"	"create function contains(a geometry, b geometry) returns boolean external name geom.\"Contains\";"	"geom"	true	1	false	2000
6159	"overlaps"	"create function overlaps(a geometry, b geometry) returns boolean external name geom.\"Overlaps\";"	"geom"	true	1	false	2000
6164	"relate"	"create function relate(a geometry, b geometry, pattern string) returns boolean external name geom.\"Relate\";"	"geom"	true	1	false	2000
6170	"area"	"-- ogc Spatial Analysis methods\n\ncreate function area(g geometry) returns float external name geom.\"Area\";"	"geom"	true	1	false	2000
6174	"length"	"create function length(g geometry) returns float external name geom.\"Length\";"	"geom"	true	1	false	2000
6178	"distance"	"create function distance(a geometry, b geometry) returns float external name geom.\"Distance\";"	"geom"	true	1	false	2000
6183	"buffer"	"create function buffer(a geometry, distance float) returns geometry external name geom.\"Buffer\";"	"geom"	true	1	false	2000
6188	"convexhull"	"create function convexhull(a geometry) returns geometry external name geom.\"ConvexHull\";"	"geom"	true	1	false	2000
6192	"intersection"	"create function intersection(a geometry, b geometry) returns geometry external name geom.\"Intersection\";"	"geom"	true	1	false	2000
6197	"Union"	"create function \"Union\"(a geometry, b geometry) returns geometry external name geom.\"Union\";"	"geom"	true	1	false	2000
6202	"difference"	"create function difference(a geometry, b geometry) returns geometry external name geom.\"Difference\";"	"geom"	true	1	false	2000
6207	"symdifference"	"create function symdifference(a geometry, b geometry) returns geometry external name geom.\"SymDifference\";"	"geom"	true	1	false	2000
6214	"filter"	"-- access the top level key by name, return its value\ncreate function json.filter(js json, name string)\nreturns json external name json.filter;"	"json"	true	1	false	6211
6219	"filter"	"create function json.filter(js json, name integer)\nreturns json external name json.filter;"	"json"	true	1	false	6211
6224	"filter_all"	"create function json.filter_all(js json, name string)\nreturns json external name json.filterall;"	"json"	true	1	false	6211
6229	"path"	"-- a simple path extractor\ncreate function json.path(js json, e string)\nreturns json external name json.path;"	"json"	true	1	false	6211
6234	"text"	"-- a simple path extractor as plain text\ncreate function json.text(js json, e string)\nreturns string external name json.text;"	"json"	true	1	false	6211
6239	"isvalid"	"-- test string for JSON compliancy\ncreate function json.isvalid(js string)\nreturns bool external name json.isvalid;"	"json"	true	1	false	6211
6243	"isvalidobject"	"create function json.isvalidobject(js string)\nreturns bool external name json.isvalidobject;"	"json"	true	1	false	6211
6247	"isvalidarray"	"create function json.isvalidarray(js string)\nreturns bool external name json.isvalidarray;"	"json"	true	1	false	6211
6251	"length"	"-- return the number of primary components\ncreate function json.length(js json)\nreturns integer external name json.length;"	"json"	true	1	false	6211
6255	"md5"	"\n-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- (co) Arjen de Rijke\n-- Functions supporting jsonstore\n\ncreate function sys.md5(v string)\nreturns string external name clients.md5sum;"	"clients"	true	1	false	2000
6260	"uuid"	"-- generate a new uuid\ncreate function sys.uuid()\nreturns uuid external name uuid.\"new\";"	"uuid"	true	1	false	2000
6263	"isauuid"	"create function sys.isauuid(u uuid)\nreturns uuid external name uuid.\"isaUUID\";"	"uuid"	true	1	false	2000
6279	"storage"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- Author M.Kersten\n-- This script gives the database administrator insight in the actual\n-- footprint of the persistent tables and the maximum playground used\n-- when indices are introduced upon them.\n-- By chancing the storagemodelinput table directly, the footprint for\n-- yet to be loaded databases can be assessed.\n\n-- The actual storage footprint of an existing database can be\n-- obtained by the table procuding function storage()\n-- It represents the actual state of affairs, i.e. storage on disk\n-- of columns and foreign key indices, and possible temporary hash indices.\n-- For strings we take a sample to determine their average length.\n\ncreate function sys.storage()\nreturns table (\"schema\" string, \"table\" string, \"column\" string, \"type\" string, location string, \"count\" bigint, typewidth int, columnsize bigint, heapsize bigint, indices bigint, sorted boolean)\nexternal name sql.storage;"	"sql"	true	1	false	2000
6307	"storagemodelinit"	"-- this table can be adjusted to reflect the anticipated final database size\n\n-- The model input can be derived from the current database using\ncreate procedure sys.storagemodelinit()\nbegin\n\tdelete from sys.storagemodelinput;\n\n\tinsert into sys.storagemodelinput\n\tselect x.\"schema\", x.\"table\", x.\"column\", x.\"type\", x.typewidth, x.count, 0, x.typewidth, false, x.sorted from sys.storage() x;\n\n\tupdate sys.storagemodelinput\n\tset reference = true\n\twhere concat(concat(\"schema\",\"table\"), \"column\") in (\n\t\tselect concat( concat(\"fkschema\".\"name\", \"fktable\".\"name\"), \"fkkeycol\".\"name\" )\n\t\tfrom\t\"sys\".\"keys\" as    \"fkkey\",\n\t\t\t\t\"sys\".\"objects\" as \"fkkeycol\",\n\t\t\t\t\"sys\".\"tables\" as  \"fktable\",\n\t\t\t\t\"sys\".\"schemas\" as \"fkschema\"\n\t\twhere   \"fktable\".\"id\" = \"fkkey\".\"table_id\"\n\t\t\tand \"fkkey\".\"id\" = \"fkkeycol\".\"id\"\n\t\t\tand \"fkschema\".\"id\" = \"fktable\".\"schema_id\"\n\t\t\tand \"fkkey\".\"rkey\" > -1);\n\n\tupdate sys.storagemodelinput\n\tset \"distinct\" = \"count\" -- assume all distinct\n\twhere \"type\" = 'varchar' or \"type\"='clob';\nend;"	"user"	true	2	false	2000
6309	"columnsize"	"-- The predicted storage footprint of the complete database\n-- determines the amount of diskspace needed for persistent storage\n-- and the upperbound when all possible index structures are created.\n-- The storage requirement for foreign key joins is split amongst the participants.\n\ncreate function sys.columnsize(nme string, i bigint, d bigint)\nreturns bigint\nbegin\n\tcase\n\twhen nme = 'boolean' then return i;\n\twhen nme = 'char' then return 2*i;\n\twhen nme = 'smallint' then return 2 * i;\n\twhen nme = 'int'\t then return 4 * i;\n\twhen nme = 'bigint'\t then return 8 * i;\n\twhen nme = 'timestamp' then return 8 * i;\n\twhen  nme = 'varchar' then\n\t\tcase\n\t\twhen cast(d as bigint) << 8 then return i;\n\t\twhen cast(d as bigint) << 16 then return 2 * i;\n\t\twhen cast(d as bigint) << 32 then return 4 * i;\n\t\telse return 8 * i;\n\t\tend case;\n\telse return 8 * i;\n\tend case;\nend;"	"user"	true	1	false	2000
6315	"heapsize"	"create function sys.heapsize(tpe string, i bigint, w int)\nreturns bigint\nbegin\n\tif  tpe <> 'varchar' and tpe <> 'clob'\n\tthen\n\t\treturn 0;\n\tend if;\n\treturn 10240 + i * w;\nend;"	"user"	true	1	false	2000
6321	"indexsize"	"create function sys.indexsize(b boolean, i bigint)\nreturns bigint\nbegin\n\t-- assume non-compound keys\n\tif  b = true\n\tthen\n\t\treturn 8 * i;\n\tend if;\n\treturn 0;\nend;"	"user"	true	1	false	2000
6336	"storagemodel"	"create function sys.storagemodel()\nreturns table (\n\t\"schema\" string,\n\t\"table\" string,\n\t\"column\" string,\n\t\"type\" string,\n\t\"count\"\tbigint,\n\tcolumnsize bigint,\n\theapsize bigint,\n\tindices bigint,\n\tsorted boolean)\nbegin\n\treturn select i.\"schema\", i.\"table\", i.\"column\", i.\"type\", i.\"count\",\n\tcolumnsize(i.\"type\", i.count, i.\"distinct\"),\n\theapsize(i.\"type\", i.\"distinct\", i.\"atomwidth\"),\n\tindexsize(i.\"reference\", i.\"count\"),\n\ti.sorted\n\tfrom sys.storagemodelinput i;\nend;"	"user"	true	1	false	2000
6374	"analyze"	"create procedure analyze()\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6376	"analyze"	"create procedure analyze(tbl string)\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6379	"analyze"	"create procedure analyze(sch string, tbl string)\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6383	"analyze"	"create procedure analyze(sch string, tbl string, col string)\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6388	"analyze"	"-- control the sample size\ncreate procedure analyze(\"sample\" bigint)\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6391	"analyze"	"create procedure analyze(tbl string, \"sample\" bigint)\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6395	"analyze"	"create procedure analyze(sch string, tbl string, \"sample\" bigint)\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6400	"analyze"	"create procedure analyze(sch string, tbl string, col string, \"sample\" bigint)\nexternal name sql.analyze;"	"sql"	true	2	false	2000
6406	"reverse"	"-- The contents of this file are subject to the MonetDB Public License\n-- Version 1.1 (the \"License\"); you may not use this file except in\n-- compliance with the License. You may obtain a copy of the License at\n-- http://www.monetdb.org/Legal/MonetDBLicense\n--\n-- Software distributed under the License is distributed on an \"AS IS\"\n-- basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the\n-- License for the specific language governing rights and limitations\n-- under the License.\n--\n-- The Original Code is the MonetDB Database System.\n--\n-- The Initial Developer of the Original Code is CWI.\n-- Portions created by CWI are Copyright (C) 1997-July 2008 CWI.\n-- Copyright August 2008-2014 MonetDB B.V.\n-- All Rights Reserved.\n\n-- add function signatures to SQL catalog\n\n\n-- Reverse a string\ncreate function reverse(src string)\nreturns string external name udf.reverse;"	"udf"	true	1	false	2000
6410	"fuse"	"-- fuse two (1-byte) tinyint values into one (2-byte) smallint value\ncreate function fuse(one tinyint, two tinyint)\nreturns smallint external name udf.fuse;"	"udf"	true	1	false	2000
6415	"fuse"	"-- fuse two (2-byte) smallint values into one (4-byte) integer value\ncreate function fuse(one smallint, two smallint)\nreturns integer external name udf.fuse;"	"udf"	true	1	false	2000
6420	"fuse"	"-- fuse two (4-byte) integer values into one (8-byte) bigint value\ncreate function fuse(one integer, two integer)\nreturns bigint external name udf.fuse;"	"udf"	true	1	false	2000
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."idxs" (
	"id"       INTEGER,
	"table_id" INTEGER,
	"type"     INTEGER,
	"name"     VARCHAR(1024)
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."keys" (
	"id"       INTEGER,
	"table_id" INTEGER,
	"type"     INTEGER,
	"name"     VARCHAR(1024),
	"rkey"     INTEGER,
	"action"   INTEGER
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."objects" (
	"id"   INTEGER,
	"name" VARCHAR(1024),
	"nr"   INTEGER
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."privileges" (
	"obj_id"     INTEGER,
	"auth_id"    INTEGER,
	"privileges" INTEGER,
	"grantor"    INTEGER,
	"grantable"  INTEGER
);
COPY 19 RECORDS INTO "sys"."privileges" FROM stdin USING DELIMITERS '\t','\n','"';
2001	1	1	0	0
2007	1	1	0	0
2016	1	1	0	0
2025	1	1	0	0
2033	1	1	0	0
2043	1	1	0	0
2047	1	1	0	0
2056	1	1	0	0
2065	1	1	0	0
2076	1	1	0	0
2083	1	1	0	0
2088	1	1	0	0
2099	1	1	0	0
5078	1	1	0	0
5088	1	1	0	0
5120	1	1	0	0
5123	1	1	0	0
5127	1	1	0	0
6426	1	1	3	0
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."schemas" (
	"id"            INTEGER,
	"name"          VARCHAR(1024),
	"authorization" INTEGER,
	"owner"         INTEGER,
	"system"        BOOLEAN
);
COPY 3 RECORDS INTO "sys"."schemas" FROM stdin USING DELIMITERS '\t','\n','"';
2000	"sys"	2	3	true
2103	"tmp"	2	3	true
6211	"json"	3	3	true
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."sequences" (
	"id"        INTEGER,
	"schema_id" INTEGER,
	"name"      VARCHAR(256),
	"start"     BIGINT,
	"minvalue"  BIGINT,
	"maxvalue"  BIGINT,
	"increment" BIGINT,
	"cacheinc"  BIGINT,
	"cycle"     BOOLEAN
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."statistics" (
	"schema" CHARACTER LARGE OBJECT,
	"table"  CHARACTER LARGE OBJECT,
	"column" CHARACTER LARGE OBJECT,
	"type"   CHARACTER LARGE OBJECT,
	"width"  INTEGER,
	"stamp"  TIMESTAMP,
	"sample" BIGINT,
	"count"  BIGINT,
	"unique" BIGINT,
	"nils"   BIGINT,
	"minval" CHARACTER LARGE OBJECT,
	"maxval" CHARACTER LARGE OBJECT,
	"sorted" BOOLEAN
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."storagemodelinput" (
	"schema"    CHARACTER LARGE OBJECT,
	"table"     CHARACTER LARGE OBJECT,
	"column"    CHARACTER LARGE OBJECT,
	"type"      CHARACTER LARGE OBJECT,
	"typewidth" INTEGER,
	"count"     BIGINT,
	"distinct"  BIGINT,
	"atomwidth" INTEGER,
	"reference" BOOLEAN,
	"sorted"    BOOLEAN
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."systemfunctions" (
	"function_id" INTEGER
);
COPY 1267 RECORDS INTO "sys"."systemfunctions" FROM stdin USING DELIMITERS '\t','\n','"';
28
29
30
31
32
33
34
35
36
37
38
42
43
44
45
48
49
50
68
69
70
71
72
73
74
75
76
77
78
79
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
658
659
660
661
662
663
664
665
666
667
668
669
670
671
672
673
674
675
676
677
678
679
680
681
682
683
684
685
686
687
688
689
690
691
692
693
694
695
696
697
698
699
700
701
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
722
723
724
725
726
727
728
729
730
731
732
733
734
735
736
737
738
739
740
741
742
743
744
745
746
747
748
749
750
751
752
753
754
755
756
757
758
759
760
761
762
763
764
765
766
767
768
769
770
771
772
773
774
775
776
777
778
779
780
781
782
783
784
785
786
787
788
789
790
791
792
793
794
795
796
797
798
799
800
801
802
803
804
805
806
807
808
809
810
811
812
813
814
815
816
817
818
819
820
821
822
823
824
825
826
827
828
829
830
831
832
833
834
835
836
837
838
839
840
841
842
843
844
845
846
847
848
849
850
851
852
853
854
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
870
871
872
873
874
875
876
877
878
879
880
881
882
883
884
885
886
887
888
889
890
891
892
893
894
895
896
897
898
899
900
901
902
903
904
905
906
907
908
909
910
911
912
913
914
915
916
917
918
919
920
921
922
923
924
925
926
927
928
929
930
931
932
933
934
935
936
937
938
939
940
941
942
943
944
945
946
947
948
949
950
951
952
953
954
955
956
957
958
959
960
961
962
963
964
965
966
967
968
969
970
971
972
973
974
975
976
977
978
979
980
981
982
983
984
985
986
987
988
989
990
991
992
993
994
995
996
997
998
999
1000
1001
1002
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1016
1017
1018
1019
1020
1021
1022
1023
1024
1025
1026
1027
1028
1029
1030
1031
1032
1033
1034
1035
1036
1037
1038
1039
1040
1041
1042
1043
1044
1045
1046
1047
1048
1049
1050
1051
1052
1053
1054
27
39
40
41
46
47
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
80
81
82
83
84
85
86
5102
5106
5114
5134
5139
5144
5148
5152
5155
5159
5163
5167
5171
5175
5179
5183
5187
5191
5195
5199
5203
5207
5211
5218
5224
5229
5235
5239
5243
5247
5252
5256
5260
5264
5268
5280
5294
5336
5338
5340
5343
5358
5375
5379
5383
5387
5391
5395
5399
5401
5405
5409
5413
5417
5425
5432
5439
5446
5453
5460
5467
5474
5481
5488
5495
5502
5509
5516
5523
5530
5537
5540
5551
5562
5565
5569
5572
5576
5579
5586
5591
5597
5603
5608
5613
5617
5624
5630
5633
5640
5651
5671
5674
5687
5700
5703
5706
5709
5712
5715
5718
5722
5726
5730
5734
5738
5742
5746
5750
5754
5758
5762
5766
5770
5774
5778
5782
5786
5790
5794
5798
5802
5806
5810
5814
5818
5822
5826
5830
5834
5838
5842
5846
5850
5854
5858
5862
5866
5870
5874
5878
5882
5886
5890
5894
5898
5902
5906
5910
5914
5918
5922
5927
5932
5937
5942
5947
5952
5957
5962
5967
5972
5977
5982
5987
5992
5997
6002
6007
6025
6029
6034
6039
6044
6049
6054
6059
6064
6069
6074
6079
6083
6087
6091
6096
6100
6104
6108
6112
6116
6120
6124
6129
6134
6139
6144
6149
6154
6159
6164
6170
6174
6178
6183
6188
6192
6197
6202
6207
6214
6219
6224
6229
6234
6239
6243
6247
6251
6255
6260
6263
6279
6307
6309
6315
6321
6336
6374
6376
6379
6383
6388
6391
6395
6400
6406
6410
6415
6420
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."triggers" (
	"id"          INTEGER,
	"name"        VARCHAR(1024),
	"table_id"    INTEGER,
	"time"        SMALLINT,
	"orientation" SMALLINT,
	"event"       SMALLINT,
	"old_name"    VARCHAR(1024),
	"new_name"    VARCHAR(1024),
	"condition"   VARCHAR(2048),
	"statement"   VARCHAR(2048)
);
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."types" (
	"id"         INTEGER,
	"systemname" VARCHAR(256),
	"sqlname"    VARCHAR(1024),
	"digits"     INTEGER,
	"scale"      INTEGER,
	"radix"      INTEGER,
	"eclass"     INTEGER,
	"schema_id"  INTEGER
);
COPY 44 RECORDS INTO "sys"."types" FROM stdin USING DELIMITERS '\t','\n','"';
0	"void"	"any"	0	0	0	0	0
1	"bat"	"table"	0	0	0	1	0
2	"ptr"	"ptr"	0	0	0	1	0
3	"bit"	"boolean"	1	0	2	2	0
4	"str"	"char"	0	0	0	3	0
5	"str"	"varchar"	0	0	0	4	0
6	"str"	"clob"	0	0	0	4	0
7	"bte"	"tinyint"	8	1	2	6	0
8	"sht"	"smallint"	16	1	2	6	0
9	"int"	"int"	32	1	2	6	0
10	"oid"	"oid"	31	0	2	6	0
11	"wrd"	"wrd"	32	1	2	6	0
12	"lng"	"bigint"	64	1	2	6	0
13	"bte"	"decimal"	2	1	10	8	0
14	"sht"	"decimal"	4	1	10	8	0
15	"int"	"decimal"	9	1	10	8	0
16	"lng"	"decimal"	19	1	10	8	0
17	"flt"	"real"	24	2	2	9	0
18	"dbl"	"double"	53	2	2	9	0
19	"int"	"month_interval"	32	0	2	7	0
20	"lng"	"sec_interval"	19	1	10	7	0
21	"daytime"	"time"	7	0	0	10	0
22	"daytime"	"timetz"	7	1	0	10	0
23	"date"	"date"	0	0	0	11	0
24	"timestamp"	"timestamp"	7	0	0	12	0
25	"timestamp"	"timestamptz"	7	1	0	12	0
26	"sqlblob"	"blob"	0	0	0	5	0
5153	"url"	"url"	0	0	0	13	2000
5233	"inet"	"inet"	0	0	0	13	2000
6011	"wkb"	"point"	0	0	0	13	2000
6012	"wkb"	"curve"	0	0	0	13	2000
6013	"wkb"	"linestring"	0	0	0	13	2000
6014	"wkb"	"surface"	0	0	0	13	2000
6015	"wkb"	"polygon"	0	0	0	13	2000
6016	"wkb"	"multipoint"	0	0	0	13	2000
6017	"wkb"	"multicurve"	0	0	0	13	2000
6018	"wkb"	"multilinestring"	0	0	0	13	2000
6019	"wkb"	"multisurface"	0	0	0	13	2000
6020	"wkb"	"multipolygon"	0	0	0	13	2000
6021	"wkb"	"geometry"	0	0	0	13	2000
6022	"wkb"	"geomcollection"	0	0	0	13	2000
6023	"mbr"	"mbr"	0	0	0	13	2000
6212	"json"	"json"	0	0	0	13	2000
6258	"uuid"	"uuid"	0	0	0	13	2000
COMMIT;
START TRANSACTION;
CREATE TABLE "sys"."user_role" (
	"login_id" INTEGER,
	"role_id"  INTEGER
);
COMMIT;

# 20:26:19 >  
# 20:26:19 >  "Done."
# 20:26:19 >  

