stdout of test 'exports` in directory 'clients` itself:


# 15:10:42 >  
# 15:10:42 >  "/usr/bin/python" "exports.py" "exports"
# 15:10:42 >  

# gdk
int ALIGNsetH(BAT *b1, BAT *b2);
int ALIGNsynced(BAT *b1, BAT *b2);
int ATOMcmp(int id, const void *v_1, const void *v_2);
ptr ATOMdup(int id, const void *val);
bte ATOMelmshift(int sz);
int ATOMformat(int id, const void *val, char **buf);
int ATOMindex(char *nme);
int ATOMlen(int id, const void *v);
str ATOMname(int id);
ptr ATOMnil(int id);
int ATOMprint(int id, const void *val, stream *fd);
void ATOMproperty(char *nme, char *property, GDKfcn fcn, int val);
BAT *BATalpha(BAT *b);
BAT *BATantijoin(BAT *l, BAT *r);
BAT *BATantiuselect_(BAT *b, const void *tl, const void *th, bit li, bit hi);
BAT *BATappend(BAT *b, BAT *c, bit force);
void BATassertProps(BAT *b);
atomDesc BATatoms[];
BAT *BATattach(int tt, const char *heapfile);
BAT *BATbandjoin(BAT *l, BAT *r, ptr mnus, ptr plus, bit li, bit hi);
BAT *BATcalcabsolute(BAT *b, BAT *s);
BAT *BATcalcadd(BAT *b1, BAT *b2, BAT *s, int tp, int abort_on_error);
BAT *BATcalcaddcst(BAT *b, const ValRecord *v, BAT *s, int tp, int abort_on_error);
BAT *BATcalcand(BAT *b1, BAT *b2, BAT *s);
BAT *BATcalcandcst(BAT *b, const ValRecord *v, BAT *s);
int BATcalcavg(BAT *b, BAT *s, dbl *avg, BUN *vals);
BAT *BATcalcbetween(BAT *b, BAT *lo, BAT *hi, BAT *s);
BAT *BATcalcbetweenbatcst(BAT *b, BAT *lo, const ValRecord *hi, BAT *s);
BAT *BATcalcbetweencstbat(BAT *b, const ValRecord *lo, BAT *hi, BAT *s);
BAT *BATcalcbetweencstcst(BAT *b, const ValRecord *lo, const ValRecord *hi, BAT *s);
BAT *BATcalccmp(BAT *b1, BAT *b2, BAT *s);
BAT *BATcalccmpcst(BAT *b, const ValRecord *v, BAT *s);
BAT *BATcalccstadd(const ValRecord *v, BAT *b, BAT *s, int tp, int abort_on_error);
BAT *BATcalccstand(const ValRecord *v, BAT *b, BAT *s);
BAT *BATcalccstcmp(const ValRecord *v, BAT *b, BAT *s);
BAT *BATcalccstdiv(const ValRecord *v, BAT *b, BAT *s, int tp, int abort_on_error);
BAT *BATcalccsteq(const ValRecord *v, BAT *b, BAT *s);
BAT *BATcalccstge(const ValRecord *v, BAT *b, BAT *s);
BAT *BATcalccstgt(const ValRecord *v, BAT *b, BAT *s);
BAT *BATcalccstle(const ValRecord *v, BAT *b, BAT *s);
BAT *BATcalccstlsh(const ValRecord *v, BAT *b, BAT *s, int abort_on_error);
BAT *BATcalccstlt(const ValRecord *v, BAT *b, BAT *s);
BAT *BATcalccstmod(const ValRecord *v, BAT *b, BAT *s, int tp, int abort_on_error);
BAT *BATcalccstmul(const ValRecord *v, BAT *b, BAT *s, int tp, int abort_on_error);
BAT *BATcalccstne(const ValRecord *v, BAT *b, BAT *s);
BAT *BATcalccstor(const ValRecord *v, BAT *b, BAT *s);
BAT *BATcalccstrsh(const ValRecord *v, BAT *b, BAT *s, int abort_on_error);
BAT *BATcalccstsub(const ValRecord *v, BAT *b, BAT *s, int tp, int abort_on_error);
BAT *BATcalccstxor(const ValRecord *v, BAT *b, BAT *s);
BAT *BATcalcdecr(BAT *b, BAT *s, int abort_on_error);
BAT *BATcalcdiv(BAT *b1, BAT *b2, BAT *s, int tp, int abort_on_error);
BAT *BATcalcdivcst(BAT *b, const ValRecord *v, BAT *s, int tp, int abort_on_error);
BAT *BATcalceq(BAT *b1, BAT *b2, BAT *s);
BAT *BATcalceqcst(BAT *b, const ValRecord *v, BAT *s);
BAT *BATcalcge(BAT *b1, BAT *b2, BAT *s);
BAT *BATcalcgecst(BAT *b, const ValRecord *v, BAT *s);
BAT *BATcalcgt(BAT *b1, BAT *b2, BAT *s);
BAT *BATcalcgtcst(BAT *b, const ValRecord *v, BAT *s);
BAT *BATcalcifthencstelse(BAT *b, const ValRecord *c1, BAT *b2);
BAT *BATcalcifthencstelsecst(BAT *b, const ValRecord *c1, const ValRecord *c2);
BAT *BATcalcifthenelse(BAT *b, BAT *b1, BAT *b2);
BAT *BATcalcifthenelsecst(BAT *b, BAT *b1, const ValRecord *c2);
BAT *BATcalcincr(BAT *b, BAT *s, int abort_on_error);
BAT *BATcalcisnil(BAT *b, BAT *s);
BAT *BATcalciszero(BAT *b, BAT *s);
BAT *BATcalcle(BAT *b1, BAT *b2, BAT *s);
BAT *BATcalclecst(BAT *b, const ValRecord *v, BAT *s);
BAT *BATcalclsh(BAT *b1, BAT *b2, BAT *s, int abort_on_error);
BAT *BATcalclshcst(BAT *b, const ValRecord *v, BAT *s, int abort_on_error);
BAT *BATcalclt(BAT *b1, BAT *b2, BAT *s);
BAT *BATcalcltcst(BAT *b, const ValRecord *v, BAT *s);
BAT *BATcalcmod(BAT *b1, BAT *b2, BAT *s, int tp, int abort_on_error);
BAT *BATcalcmodcst(BAT *b, const ValRecord *v, BAT *s, int tp, int abort_on_error);
BAT *BATcalcmul(BAT *b1, BAT *b2, BAT *s, int tp, int abort_on_error);
BAT *BATcalcmulcst(BAT *b, const ValRecord *v, BAT *s, int tp, int abort_on_error);
BAT *BATcalcne(BAT *b1, BAT *b2, BAT *s);
BAT *BATcalcnecst(BAT *b, const ValRecord *v, BAT *s);
BAT *BATcalcnegate(BAT *b, BAT *s);
BAT *BATcalcnot(BAT *b, BAT *s);
BAT *BATcalcor(BAT *b1, BAT *b2, BAT *s);
BAT *BATcalcorcst(BAT *b, const ValRecord *v, BAT *s);
BAT *BATcalcrsh(BAT *b1, BAT *b2, BAT *s, int abort_on_error);
BAT *BATcalcrshcst(BAT *b, const ValRecord *v, BAT *s, int abort_on_error);
BAT *BATcalcsign(BAT *b, BAT *s);
dbl BATcalcstdev_population(dbl *avgp, BAT *b);
dbl BATcalcstdev_sample(dbl *avgp, BAT *b);
BAT *BATcalcsub(BAT *b1, BAT *b2, BAT *s, int tp, int abort_on_error);
BAT *BATcalcsubcst(BAT *b, const ValRecord *v, BAT *s, int tp, int abort_on_error);
dbl BATcalcvariance_population(dbl *avgp, BAT *b);
dbl BATcalcvariance_sample(dbl *avgp, BAT *b);
BAT *BATcalcxor(BAT *b1, BAT *b2, BAT *s);
BAT *BATcalcxorcst(BAT *b, const ValRecord *v, BAT *s);
BAT *BATclear(BAT *b, int force);
BAT *BATcommit(BAT *b);
BAT *BATconst(BAT *l, int tt, const void *val);
BAT *BATconstant(int tt, const void *val, BUN cnt);
BAT *BATconvert(BAT *b, BAT *s, int tp, int abort_on_error);
BAT *BATcopy(BAT *b, int ht, int tt, int writeable);
BUN BATcount(BAT *b);
BUN BATcount_no_nil(BAT *b);
BAT *BATcross(BAT *l, BAT *r);
BAT *BATdel(BAT *b, BAT *c, bit force);
BAT *BATdelHead(BAT *b, BAT *c, bit force);
int BATdelete(BAT *b);
BAT *BATdelta(BAT *b);
void BATderiveHeadProps(BAT *b, int expensive);
void BATderiveProps(BAT *b, int expensive);
BAT *BATextend(BAT *b, BUN newcap);
BAT *BATfakeCommit(BAT *b);
BAT *BATfetch(BAT *b, BAT *s);
BAT *BATfetchjoin(BAT *b, BAT *s, BUN estimate);
int BATgetaccess(BAT *b);
PROPrec *BATgetprop(BAT *b, int idx);
gdk_return BATgroup(BAT **groups, BAT **extents, BAT **histo, BAT *b, BAT *g, BAT *e, BAT *h);
const char *BATgroupaggrinit(const BAT *b, const BAT *g, const BAT *e, const BAT *s, oid *minp, oid *maxp, BUN *ngrpp, BUN *startp, BUN *endp, BUN *cntp, const oid **candp, const oid **candendp);
BAT *BATgroupavg(BAT *b, BAT *g, BAT *e, BAT *s, int tp, int skip_nils, int abort_on_error);
BAT *BATgroupcount(BAT *b, BAT *g, BAT *e, BAT *s, int tp, int skip_nils, int abort_on_error);
BAT *BATgroupmax(BAT *b, BAT *g, BAT *e, BAT *s, int tp, int skip_nils, int abort_on_error);
BAT *BATgroupmedian(BAT *b, BAT *g, BAT *e, BAT *s, int tp, int skip_nils, int abort_on_error);
BAT *BATgroupmin(BAT *b, BAT *g, BAT *e, BAT *s, int tp, int skip_nils, int abort_on_error);
BAT *BATgroupprod(BAT *b, BAT *g, BAT *e, BAT *s, int tp, int skip_nils, int abort_on_error);
BAT *BATgroupsize(BAT *b, BAT *g, BAT *e, BAT *s, int tp, int skip_nils, int abort_on_error);
BAT *BATgroupstdev_population(BAT *b, BAT *g, BAT *e, BAT *s, int tp, int skip_nils, int abort_on_error);
BAT *BATgroupstdev_sample(BAT *b, BAT *g, BAT *e, BAT *s, int tp, int skip_nils, int abort_on_error);
BAT *BATgroupsum(BAT *b, BAT *g, BAT *e, BAT *s, int tp, int skip_nils, int abort_on_error);
BAT *BATgroupvariance_population(BAT *b, BAT *g, BAT *e, BAT *s, int tp, int skip_nils, int abort_on_error);
BAT *BATgroupvariance_sample(BAT *b, BAT *g, BAT *e, BAT *s, int tp, int skip_nils, int abort_on_error);
BUN BATgrows(BAT *b);
BAT *BAThash(BAT *b, BUN masksize);
BAT *BAThashjoin(BAT *l, BAT *r, BUN estimate);
BAT *BAThistogram(BAT *b);
BAT *BATins(BAT *b, BAT *c, bit force);
BAT *BATintersectcand(BAT *a, BAT *b);
BAT *BATjoin(BAT *l, BAT *r, BUN estimate);
BAT *BATkdiff(BAT *b, BAT *c);
BAT *BATkey(BAT *b, int onoff);
BAT *BATkintersect(BAT *b, BAT *c);
BAT *BATkunion(BAT *b, BAT *c);
BAT *BATkunique(BAT *b);
BAT *BATleftfetchjoin(BAT *b, BAT *s, BUN estimate);
BAT *BATleftjoin(BAT *l, BAT *r, BUN estimate);
int BATmadvise(BAT *b, int hb, int tb, int hh, int th);
BAT *BATmark(BAT *b, oid base);
BAT *BATmark_grp(BAT *b, BAT *g, oid *base);
BAT *BATmaterialize(BAT *b);
BAT *BATmaterializeh(BAT *b);
size_t BATmemsize(BAT *b, int dirty);
BAT *BATmergecand(BAT *a, BAT *b);
BAT *BATmergejoin(BAT *l, BAT *r, BUN estimate);
int BATmmap(BAT *b, int hb, int tb, int hh, int th, int force);
BAT *BATmode(BAT *b, int onoff);
int BATmultiprintf(stream *f, int argc, BAT *argv[], int printoid, int order, int printorderby);
int BATname(BAT *b, const char *nme);
BAT *BATnew(int hdtype, int tltype, BUN capacity);
BAT *BATorder(BAT *b);
BAT *BATorder_rev(BAT *b);
int BATordered(BAT *b);
int BATordered_rev(BAT *b);
BAT *BATouterjoin(BAT *l, BAT *r, BUN estimate);
BAT *BATprev(BAT *b);
int BATprint(BAT *b);
int BATprintf(stream *f, BAT *b);
gdk_return BATprod(void *res, int tp, BAT *b, BAT *s, int skip_nils, int abort_on_error, int nil_if_empty);
BAT *BATrangejoin(BAT *l, BAT *rl, BAT *rh, bit li, bit hi);
BAT *BATreplace(BAT *b, BAT *n, bit force);
BAT *BATrestrict(BAT *b, const void *hl, const void *hh, const void *tl, const void *th);
BAT *BATrevert(BAT *b);
BAT *BATroles(BAT *b, const char *hnme, const char *tnme);
BAT *BATsample(BAT *b, BUN n);
BAT *BATsave(BAT *b);
BAT *BATsdiff(BAT *b, BAT *c);
BAT *BATselect(BAT *b, const void *tl, const void *th);
BAT *BATselect_(BAT *b, const void *tl, const void *th, bit li, bit hi);
BAT *BATsemijoin(BAT *l, BAT *r);
BAT *BATseqbase(BAT *b, oid o);
BAT *BATset(BAT *b, int onoff);
BAT *BATsetaccess(BAT *b, int mode);
void BATsetcapacity(BAT *b, BUN cnt);
void BATsetcount(BAT *b, BUN cnt);
void BATsetprop(BAT *b, int idx, int type, void *v);
BAT *BATsintersect(BAT *b, BAT *c);
BAT *BATslice(BAT *b, BUN low, BUN high);
BAT *BATsort(BAT *b);
BAT *BATsort_rev(BAT *b);
BAT *BATssort(BAT *b);
BAT *BATssort_rev(BAT *b);
BAT *BATsubselect(BAT *b, BAT *s, const void *tl, const void *th, int li, int hi, int anti);
gdk_return BATsubsort(BAT **sorted, BAT **order, BAT **groups, BAT *b, BAT *o, BAT *g, int reverse, int stable);
gdk_return BATsum(void *res, int tp, BAT *b, BAT *s, int skip_nils, int abort_on_error, int nil_if_empty);
BAT *BATsunion(BAT *b, BAT *c);
BAT *BATsunique(BAT *b);
BAT *BATthetajoin(BAT *l, BAT *r, int mode, BUN estimate);
BAT *BATthetasubselect(BAT *b, BAT *s, const void *val, const char *op);
int BATtopN(BAT *b, BUN topN);
BAT *BATundo(BAT *b);
BAT *BATuselect(BAT *b, const void *tl, const void *th);
BAT *BATuselect_(BAT *b, const void *tl, const void *th, bit li, bit hi);
BBPrec *BBP[N_BBPINIT];
int BBP_curstamp;
void BBPclear(bat bid);
void BBPcold(bat b);
int BBPdecref(bat b, int logical);
BAT *BBPdescriptor(bat b);
int BBPdir(int cnt, bat *subcommit);
BATstore *BBPgetdesc(bat i);
void BBPhot(bat b);
int BBPin;
int BBPincref(bat b, int logical);
bat BBPindex(const char *nme);
void BBPkeepref(bat i);
bat BBPlimit;
void BBPlock(const char *s);
str BBPlogical(bat b, str buf);
int BBPout;
str BBPphysical(bat b, str buf);
BAT *BBPquickdesc(bat b, int delaccess);
int BBPreclaim(BAT *b);
void BBPreleaseref(bat i);
int BBPrename(bat bid, const char *nme);
int BBPsave(BAT *b);
void BBPshare(bat b);
bat BBPsize;
int BBPsync(int cnt, bat *subcommit);
void BBPunlock(const char *s);
BAT *BUNappend(BAT *b, const void *right, bit force);
BAT *BUNdel(BAT *b, const void *left, const void *right, bit force);
BAT *BUNdelHead(BAT *b, const void *left, bit force);
BUN BUNdelete(BAT *b, BUN p, bit force);
BAT *BUNfastins(BAT *b, const void *left, const void *right);
BUN BUNfnd(BAT *b, const void *left);
BAT *BUNinplace(BAT *b, BUN p, const void *left, const void *right, bit force);
BAT *BUNins(BAT *b, const void *left, const void *right, bit force);
BUN BUNlocate(BAT *b, const void *left, const void *right);
BAT *BUNreplace(BAT *b, const void *left, const void *right, bit force);
size_t GDK_mem_bigsize;
size_t GDK_mem_maxsize;
int GDK_mem_pagebits;
size_t GDK_vm_maxsize;
int GDK_vm_trim;
int GDKatomcnt;
int GDKcreatedir(const char *nme);
int GDKdebug;
int GDKerror(_In_z_ _Printf_format_string_ const char *format, ...) __attribute__((__format__(__printf__, 1, 2)));
void GDKexit(int status);
int GDKexiting(void);
int GDKfatal(_In_z_ _Printf_format_string_ const char *format, ...) __attribute__((__format__(__printf__, 1, 2)));
void GDKfilepath(str path, const char *nme, const char *mode, const char *ext);
void GDKfree(void *blk);
char *GDKgetenv(const char *name);
int GDKgetenv_int(const char *name, int def);
int GDKgetenv_istrue(const char *name);
int GDKgetenv_isyes(const char *name);
int GDKinit(opt *set, int setlen);
BAT *GDKkey;
void *GDKmalloc(size_t size);
size_t GDKmem_cursize(void);
size_t GDKmem_inuse(void);
void *GDKmmap(const char *path, int mode, size_t len);
int GDKms(void);
int GDKnr_threads;
void GDKqsort(void *h, void *t, const void *base, size_t n, int hs, int ts, int tpe);
void GDKqsort_rev(void *h, void *t, const void *base, size_t n, int hs, int ts, int tpe);
void *GDKrealloc(void *pold, size_t size);
void GDKsetenv(str name, str value);
ssize_t GDKstrFromStr(unsigned char *dst, const unsigned char *src, ssize_t len);
str GDKstrdup(const char *s);
int GDKsyserror(_In_z_ _Printf_format_string_ const char *format, ...) __attribute__((__format__(__printf__, 1, 2)));
ThreadRec GDKthreads[THREADS];
int GDKupgradevarheap(COLrec *c, var_t v, int copyall);
lng GDKusec(void);
BAT *GDKval;
const char *GDKversion(void);
size_t GDKvm_cursize(void);
void *GDKzalloc(size_t size);
void HASHdestroy(BAT *b);
BUN HASHlist(Hash *h, BUN i);
BUN HASHprobe(Hash *h, const void *v);
void HASHremove(BAT *b);
void HEAP_free(Heap *heap, var_t block);
void HEAP_initialize(Heap *heap, size_t nbytes, size_t nprivate, int alignment);
var_t HEAP_malloc(Heap *heap, size_t nbytes);
int HEAPcopy(Heap *dst, Heap *src);
int HEAPextend(Heap *h, size_t size);
int HEAPfree(Heap *h);
size_t HEAPmemsize(Heap *h);
size_t HEAPvmsize(Heap *h);
void MRschedule(int taskcnt, void **arg, void( *cmd)(void *p));
int MT_check_nr_cores(void);
unsigned long long MT_clock(void);
int MT_create_thread(MT_Id *t, void( *function)(void *), void *arg, enum MT_thr_detach d);
void MT_exit_thread(int status) __attribute__((__noreturn__));
MT_Id MT_getpid(void);
size_t MT_getrss(void);
void MT_global_exit(int status) __attribute__((__noreturn__));
char *MT_heapbase;
char *MT_heapcur(void);
void MT_init(void);
int MT_join_thread(MT_Id t);
int MT_kill_thread(MT_Id t);
int MT_lockf(char *filename, int mode, off_t off, off_t len);
MT_Id MT_locktrace;
unsigned long long MT_locktrace_cnt[65536];
void MT_locktrace_end(void);
char *MT_locktrace_nme[65536];
void MT_locktrace_start(void);
struct Mallinfo MT_mallinfo(void);
void *MT_mmap(const char *path, int mode, size_t len);
int MT_munmap(void *p, size_t len);
int MT_path_absolute(const char *path);
void MT_sleep_ms(unsigned int ms);
oid OIDbase(oid base);
int OIDfromStr(const char *src, int *len, oid **dst);
oid OIDnew(oid inc);
int OIDtoStr(str *dst, int *len, const oid *src);
void PROPdestroy(PROPrec *p);
BUN SORTfnd(BAT *b, const void *v);
BUN SORTfndfirst(BAT *b, const void *v);
BUN SORTfndlast(BAT *b, const void *v);
void *THRdata[16];
void THRdel(Thread t);
Thread THRget(int tid);
void *THRgetdata(int);
int THRgettid(void);
int THRhighwater(void);
Thread THRnew(str name);
int THRprintf(stream *s, _In_z_ _Printf_format_string_ const char *format, ...) __attribute__((__format__(__printf__, 2, 3)));
void THRsetdata(int, ptr);
int TMabort(void);
int TMcommit(void);
int TMsubcommit(BAT *bl);
int TMsubcommit_list(bat *subcommit, int cnt);
void VALclear(ValPtr v);
int VALcmp(const ValRecord *p, const ValRecord *q);
ptr VALconvert(int typ, ValPtr t);
ValPtr VALcopy(ValPtr dst, const ValRecord *src);
void VALempty(ValPtr v);
int VALformat(char **buf, const ValRecord *res);
void *VALget(ValPtr v);
ValPtr VALinit(ValPtr d, int tpe, const void *s);
int VALisnil(const ValRecord *v);
ValPtr VALset(ValPtr v, int t, ptr p);
int VARcalcabsolute(ValPtr ret, const ValRecord *v);
int VARcalcadd(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, int abort_on_error);
int VARcalcand(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
int VARcalcbetween(ValPtr ret, const ValRecord *v, const ValRecord *lo, const ValRecord *hi);
int VARcalccmp(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
int VARcalcdecr(ValPtr ret, const ValRecord *v, int abort_on_error);
int VARcalcdiv(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, int abort_on_error);
int VARcalceq(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
int VARcalcge(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
int VARcalcgt(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
int VARcalcincr(ValPtr ret, const ValRecord *v, int abort_on_error);
int VARcalcisnil(ValPtr ret, const ValRecord *v);
int VARcalcisnotnil(ValPtr ret, const ValRecord *v);
int VARcalciszero(ValPtr ret, const ValRecord *v);
int VARcalcle(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
int VARcalclsh(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, int abort_on_error);
int VARcalclt(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
int VARcalcmod(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, int abort_on_error);
int VARcalcmul(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, int abort_on_error);
int VARcalcne(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
int VARcalcnegate(ValPtr ret, const ValRecord *v);
int VARcalcnot(ValPtr ret, const ValRecord *v);
int VARcalcor(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
int VARcalcrsh(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, int abort_on_error);
int VARcalcsign(ValPtr ret, const ValRecord *v);
int VARcalcsub(ValPtr ret, const ValRecord *lft, const ValRecord *rgt, int abort_on_error);
int VARcalcxor(ValPtr ret, const ValRecord *lft, const ValRecord *rgt);
int VARconvert(ValPtr ret, const ValRecord *v, int abort_on_error);
void VIEWbounds(BAT *b, BAT *view, BUN l, BUN h);
BAT *VIEWcombine(BAT *b);
BAT *VIEWcreate(BAT *h, BAT *t);
BAT *VIEWcreate_(BAT *h, BAT *t, int stable);
BAT *VIEWhead(BAT *b);
BAT *VIEWhead_(BAT *b, int mode);
size_t _MT_npages;
size_t _MT_pagesize;
int batFromStr(const char *src, int *len, bat **dst);
int batToStr(str *dst, int *len, const bat *src);
int bitFromStr(const char *src, int *len, bit **dst);
int bitToStr(str *dst, int *len, const bit *src);
int bteFromStr(const char *src, int *len, bte **dst);
int bteToStr(str *dst, int *len, const bte *src);
const bte bte_nil;
int closedir(DIR *dir);
int dblFromStr(const char *src, int *len, dbl **dst);
int dblToStr(str *dst, int *len, const dbl *src);
const dbl dbl_nil;
char *dirname(char *path);
int dlclose(void *handle);
char *dlerror(void);
void *dlopen(const char *file, int mode);
void *dlsym(void *handle, const char *name);
int escapedStr(char *dst, const char *src, int dstlen);
int escapedStrlen(const char *src);
int fltFromStr(const char *src, int *len, flt **dst);
int fltToStr(str *dst, int *len, const flt *src);
const flt flt_nil;
int ftruncate(int fd, off_t size);
char *get_bin_path(void);
int gettimeofday(struct timeval *tv, int *ignore_zone);
int gprof_pthread_create(pthread_t *__restrict, __const pthread_attr_t *__restrict, void *( *fcn)(void *), void *__restrict);
int intFromStr(const char *src, int *len, int **dst);
int intToStr(str *dst, int *len, const int *src);
const int int_nil;
int lngFromStr(const char *src, int *len, lng **dst);
int lngToStr(str *dst, int *len, const lng *src);
const lng lng_nil;
int log_abort(logger *lg);
int log_bat(logger *lg, BAT *b, char *n);
int log_bat_clear(logger *lg, char *n);
int log_bat_persists(logger *lg, BAT *b, char *n);
int log_bat_transient(logger *lg, char *n);
int log_delta(logger *lg, BAT *b, char *n);
int log_sequence(logger *lg, int seq, lng id);
int log_tend(logger *lg);
int log_tstart(logger *lg);
log_bid logger_add_bat(logger *lg, BAT *b, char *name);
size_t logger_changes(logger *lg);
int logger_cleanup(logger *lg);
logger *logger_create(int debug, char *fn, char *logdir, int version, preversionfix_fptr prefuncp, postversionfix_fptr postfuncp);
void logger_del_bat(logger *lg, log_bid bid);
void logger_destroy(logger *lg);
int logger_exit(logger *lg);
log_bid logger_find_bat(logger *lg, char *name);
int logger_restart(logger *lg);
int logger_sequence(logger *lg, int seq, lng *id);
void *mdlopen(const char *library, int mode);
int mo_add_option(opt **Set, int setlen, opt_kind kind, const char *name, const char *value);
int mo_builtin_settings(opt **Set);
char *mo_find_option(opt *set, int setlen, const char *name);
void mo_free_options(opt *set, int setlen);
void mo_print_options(opt *set, int setlen);
int mo_system_config(opt **Set, int setlen);
void msab_dbfarminit(const char *dbfarm);
void msab_dbpathinit(const char *dbpath);
char *msab_deserialise(sabdb **ret, char *sabdb);
char *msab_freeStatus(sabdb **ret);
char *msab_getDBfarm(char **ret);
char *msab_getDBname(char **ret);
char *msab_getMyStatus(sabdb **ret);
char *msab_getStatus(sabdb **ret, char *dbname);
char *msab_getUplogInfo(sabuplog *ret, const sabdb *db);
char *msab_marchConnection(const char *host, const int port);
char *msab_marchScenario(const char *lang);
char *msab_registerStarted(void);
char *msab_registerStarting(void);
char *msab_registerStop(void);
char *msab_retreatScenario(const char *lang);
char *msab_serialise(char **ret, const sabdb *db);
char *msab_wildRetreat(void);
const oid oid_nil;
DIR *opendir(const char *dirname);
void print_trace(void);
int pthread_cond_destroy(pthread_cond_t *);
int pthread_cond_init(pthread_cond_t *, pthread_condattr_t *);
int pthread_cond_signal(pthread_cond_t *);
int pthread_cond_wait(pthread_cond_t *, pthread_mutex_t *);
void pthread_mutex_destroy(pthread_mutex_t *);
void pthread_mutex_init(pthread_mutex_t *, const pthread_mutexattr_t *);
int pthread_mutex_lock(pthread_mutex_t *);
int pthread_mutex_trylock(pthread_mutex_t *);
int pthread_mutex_unlock(pthread_mutex_t *);
void pthread_sema_destroy(pthread_sema_t *s);
void pthread_sema_destroy(pthread_sema_t *s);
void pthread_sema_down(pthread_sema_t *s);
void pthread_sema_down(pthread_sema_t *s);
void pthread_sema_init(pthread_sema_t *s, int flag, int nresources);
void pthread_sema_init(pthread_sema_t *s, int flag, int nresources);
void pthread_sema_up(pthread_sema_t *s);
void pthread_sema_up(pthread_sema_t *s);
int ptrFromStr(const char *src, int *len, ptr **dst);
int ptrToStr(str *dst, int *len, const ptr *src);
const ptr ptr_nil;
struct dirent *readdir(DIR *dir);
void rewinddir(DIR *dir);
int shtFromStr(const char *src, int *len, sht **dst);
int shtToStr(str *dst, int *len, const sht *src);
const sht sht_nil;
int strFromStr(const char *src, int *len, str *dst);
BUN strHash(const char *s);
int strLen(const char *s);
int strNil(const char *s);
int strToStr(str *dst, int *len, const char *src);
const char str_nil[2];
int void_inplace(BAT *b, oid id, const void *val, bit force);
BUN void_replace_bat(BAT *b, BAT *u, bit force);
int *win_errno(void);
int win_mkdir(const char *, const int mode);
int win_rename(const char *, const char *);
int win_rmdir(const char *);
int win_stat(const char *, struct stat *);
int win_unlink(const char *);
const wrd wrd_nil;

# mapi
MapiMsg mapi_bind(MapiHdl hdl, int fnr, char **ptr);
MapiMsg mapi_bind_numeric(MapiHdl hdl, int fnr, int scale, int precision, void *ptr);
MapiMsg mapi_bind_var(MapiHdl hdl, int fnr, int type, void *ptr);
MapiMsg mapi_cache_freeup(MapiHdl hdl, int percentage);
MapiMsg mapi_cache_limit(Mapi mid, int limit);
MapiMsg mapi_cache_shuffle(MapiHdl hdl, int percentage);
MapiMsg mapi_clear_bindings(MapiHdl hdl);
MapiMsg mapi_clear_params(MapiHdl hdl);
MapiMsg mapi_close_handle(MapiHdl hdl);
Mapi mapi_connect(const char *host, int port, const char *username, const char *password, const char *lang, const char *dbname);
MapiMsg mapi_destroy(Mapi mid);
MapiMsg mapi_disconnect(Mapi mid);
MapiMsg mapi_error(Mapi mid);
char *mapi_error_str(Mapi mid);
MapiMsg mapi_execute(MapiHdl hdl);
MapiMsg mapi_execute_array(MapiHdl hdl, char **val);
MapiMsg mapi_explain(Mapi mid, FILE *fd);
MapiMsg mapi_explain_query(MapiHdl hdl, FILE *fd);
MapiMsg mapi_explain_result(MapiHdl hdl, FILE *fd);
mapi_int64 mapi_fetch_all_rows(MapiHdl hdl);
char *mapi_fetch_field(MapiHdl hdl, int fnr);
char **mapi_fetch_field_array(MapiHdl hdl);
size_t mapi_fetch_field_len(MapiHdl hdl, int fnr);
char *mapi_fetch_line(MapiHdl hdl);
MapiMsg mapi_fetch_reset(MapiHdl hdl);
int mapi_fetch_row(MapiHdl hdl);
MapiMsg mapi_finish(MapiHdl hdl);
MapiHdl mapi_get_active(Mapi mid);
int mapi_get_autocommit(Mapi mid);
char *mapi_get_dbname(Mapi mid);
int mapi_get_digits(MapiHdl hdl, int fnr);
int mapi_get_field_count(MapiHdl hdl);
stream *mapi_get_from(Mapi mid);
char *mapi_get_host(Mapi mid);
char *mapi_get_lang(Mapi mid);
mapi_int64 mapi_get_last_id(MapiHdl hdl);
int mapi_get_len(MapiHdl hdl, int fnr);
char *mapi_get_mapi_version(Mapi mid);
char *mapi_get_monet_version(Mapi mid);
char *mapi_get_motd(Mapi mid);
char *mapi_get_name(MapiHdl hdl, int fnr);
char *mapi_get_query(MapiHdl hdl);
int mapi_get_querytype(MapiHdl hdl);
mapi_int64 mapi_get_row_count(MapiHdl hdl);
int mapi_get_scale(MapiHdl hdl, int fnr);
char *mapi_get_table(MapiHdl hdl, int fnr);
int mapi_get_tableid(MapiHdl hdl);
stream *mapi_get_to(Mapi mid);
int mapi_get_trace(Mapi mid);
char *mapi_get_type(MapiHdl hdl, int fnr);
char *mapi_get_uri(Mapi mid);
char *mapi_get_user(Mapi mid);
int mapi_is_connected(Mapi mid);
MapiMsg mapi_log(Mapi mid, const char *nme);
Mapi mapi_mapi(const char *host, int port, const char *username, const char *password, const char *lang, const char *dbname);
Mapi mapi_mapiuri(const char *url, const char *user, const char *pass, const char *lang);
int mapi_more_results(MapiHdl hdl);
MapiMsg mapi_needmore(MapiHdl hdl);
MapiHdl mapi_new_handle(Mapi mid);
MapiMsg mapi_next_result(MapiHdl hdl);
void mapi_noexplain(Mapi mid, char *errorprefix);
MapiMsg mapi_param(MapiHdl hdl, int fnr, char **ptr);
MapiMsg mapi_param_numeric(MapiHdl hdl, int fnr, int scale, int precision, void *ptr);
MapiMsg mapi_param_string(MapiHdl hdl, int fnr, int sqltype, char *ptr, int *sizeptr);
MapiMsg mapi_param_type(MapiHdl hdl, int fnr, int ctype, int sqltype, void *ptr);
MapiMsg mapi_ping(Mapi mid);
MapiHdl mapi_prepare(Mapi mid, const char *cmd);
MapiHdl mapi_prepare_array(Mapi mid, const char *cmd, char **val);
MapiMsg mapi_prepare_handle(MapiHdl hdl, const char *cmd);
MapiHdl mapi_query(Mapi mid, const char *cmd);
MapiHdl mapi_query_array(Mapi mid, const char *cmd, char **val);
MapiMsg mapi_query_done(MapiHdl hdl);
MapiMsg mapi_query_handle(MapiHdl hdl, const char *cmd);
MapiMsg mapi_query_part(MapiHdl hdl, const char *cmd, size_t size);
MapiHdl mapi_query_prep(Mapi mid);
MapiHdl mapi_quick_query(Mapi mid, const char *cmd, FILE *fd);
MapiHdl mapi_quick_query_array(Mapi mid, const char *cmd, char **val, FILE *fd);
MapiMsg mapi_quick_response(MapiHdl hdl, FILE *fd);
char *mapi_quote(const char *msg, int size);
MapiMsg mapi_read_response(MapiHdl hdl);
MapiMsg mapi_reconnect(Mapi mid);
MapiMsg mapi_release_id(Mapi mid, int id);
char **mapi_resolve(const char *host, int port, const char *pattern);
char *mapi_result_error(MapiHdl hdl);
mapi_int64 mapi_rows_affected(MapiHdl hdl);
MapiMsg mapi_seek_row(MapiHdl hdl, mapi_int64 rowne, int whence);
MapiHdl mapi_send(Mapi mid, const char *cmd);
MapiMsg mapi_setAutocommit(Mapi mid, int autocommit);
MapiMsg mapi_set_size_header(Mapi mid, int value);
int mapi_split_line(MapiHdl hdl);
MapiMsg mapi_start_talking(Mapi mid);
MapiMsg mapi_store_field(MapiHdl hdl, int fnr, int outtype, void *outparam);
MapiHdl mapi_stream_query(Mapi mid, const char *cmd, int windowsize);
MapiMsg mapi_timeout(Mapi mid, unsigned int time);
MapiMsg mapi_trace(Mapi mid, int flag);
char *mapi_unquote(char *msg);
MapiMsg mapi_virtual_result(MapiHdl hdl, int columns, const char **columnnames, const char **columntypes, const int *columnlengths, int tuplecount, const char ***tuples);

# monetdb5
str AGGRavg2_dbl(bat *retval, bat *bid, bat *eid);
str AGGRavg3_dbl(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRcount2(bat *retval, bat *bid, bat *eid, bit *ignorenils);
str AGGRcount2nils(bat *retval, bat *bid, bat *eid);
str AGGRcount2nonils(bat *retval, bat *bid, bat *eid);
str AGGRcount3(bat *retval, bat *bid, bat *gid, bat *eid, bit *ignorenils);
str AGGRcount3nils(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRcount3nonils(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRmax2(bat *retval, bat *bid, bat *eid);
str AGGRmax3(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRmedian(bat *retval, bat *bid, bit *skip_nils);
str AGGRmedian3(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRmin2(bat *retval, bat *bid, bat *eid);
str AGGRmin3(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRprod2_bte(bat *retval, bat *bid, bat *eid);
str AGGRprod2_dbl(bat *retval, bat *bid, bat *eid);
str AGGRprod2_flt(bat *retval, bat *bid, bat *eid);
str AGGRprod2_int(bat *retval, bat *bid, bat *eid);
str AGGRprod2_lng(bat *retval, bat *bid, bat *eid);
str AGGRprod2_sht(bat *retval, bat *bid, bat *eid);
str AGGRprod2_wrd(bat *retval, bat *bid, bat *eid);
str AGGRprod3_bte(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRprod3_dbl(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRprod3_flt(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRprod3_int(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRprod3_lng(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRprod3_sht(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRprod3_wrd(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRsize2(bat *retval, bat *bid, bat *eid);
str AGGRstdev2_dbl(bat *retval, bat *bid, bat *eid);
str AGGRstdev3_dbl(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRstdevp2_dbl(bat *retval, bat *bid, bat *eid);
str AGGRstdevp3_dbl(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRsubavg_dbl(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils, bit *abort_on_error);
str AGGRsubavgcand_dbl(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils, bit *abort_on_error);
str AGGRsubcount(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils);
str AGGRsubcountcand(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils);
str AGGRsubmax(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils);
str AGGRsubmax_val(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils);
str AGGRsubmaxcand(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils);
str AGGRsubmaxcand_val(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils);
str AGGRsubmedian(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils);
str AGGRsubmediancand(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils);
str AGGRsubmin(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils);
str AGGRsubmin_val(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils);
str AGGRsubmincand(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils);
str AGGRsubmincand_val(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils);
str AGGRsubprod_bte(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils, bit *abort_on_error);
str AGGRsubprod_dbl(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils, bit *abort_on_error);
str AGGRsubprod_flt(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils, bit *abort_on_error);
str AGGRsubprod_int(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils, bit *abort_on_error);
str AGGRsubprod_lng(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils, bit *abort_on_error);
str AGGRsubprod_sht(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils, bit *abort_on_error);
str AGGRsubprod_wrd(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils, bit *abort_on_error);
str AGGRsubprodcand_bte(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils, bit *abort_on_error);
str AGGRsubprodcand_dbl(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils, bit *abort_on_error);
str AGGRsubprodcand_flt(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils, bit *abort_on_error);
str AGGRsubprodcand_int(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils, bit *abort_on_error);
str AGGRsubprodcand_lng(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils, bit *abort_on_error);
str AGGRsubprodcand_sht(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils, bit *abort_on_error);
str AGGRsubprodcand_wrd(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils, bit *abort_on_error);
str AGGRsubstdev_dbl(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils, bit *abort_on_error);
str AGGRsubstdevcand_dbl(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils, bit *abort_on_error);
str AGGRsubstdevp_dbl(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils, bit *abort_on_error);
str AGGRsubstdevpcand_dbl(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils, bit *abort_on_error);
str AGGRsubsum_bte(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils, bit *abort_on_error);
str AGGRsubsum_dbl(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils, bit *abort_on_error);
str AGGRsubsum_flt(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils, bit *abort_on_error);
str AGGRsubsum_int(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils, bit *abort_on_error);
str AGGRsubsum_lng(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils, bit *abort_on_error);
str AGGRsubsum_sht(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils, bit *abort_on_error);
str AGGRsubsum_wrd(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils, bit *abort_on_error);
str AGGRsubsumcand_bte(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils, bit *abort_on_error);
str AGGRsubsumcand_dbl(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils, bit *abort_on_error);
str AGGRsubsumcand_flt(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils, bit *abort_on_error);
str AGGRsubsumcand_int(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils, bit *abort_on_error);
str AGGRsubsumcand_lng(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils, bit *abort_on_error);
str AGGRsubsumcand_sht(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils, bit *abort_on_error);
str AGGRsubsumcand_wrd(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils, bit *abort_on_error);
str AGGRsubvariance_dbl(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils, bit *abort_on_error);
str AGGRsubvariancecand_dbl(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils, bit *abort_on_error);
str AGGRsubvariancep_dbl(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils, bit *abort_on_error);
str AGGRsubvariancepcand_dbl(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils, bit *abort_on_error);
str AGGRsubxml(bat *retval, bat *bid, bat *gid, bat *eid, bit *skip_nils);
str AGGRsubxmlcand(bat *retval, bat *bid, bat *gid, bat *eid, bat *sid, bit *skip_nils);
str AGGRsum2_bte(bat *retval, bat *bid, bat *eid);
str AGGRsum2_dbl(bat *retval, bat *bid, bat *eid);
str AGGRsum2_flt(bat *retval, bat *bid, bat *eid);
str AGGRsum2_int(bat *retval, bat *bid, bat *eid);
str AGGRsum2_lng(bat *retval, bat *bid, bat *eid);
str AGGRsum2_sht(bat *retval, bat *bid, bat *eid);
str AGGRsum2_wrd(bat *retval, bat *bid, bat *eid);
str AGGRsum3_bte(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRsum3_dbl(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRsum3_flt(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRsum3_int(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRsum3_lng(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRsum3_sht(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRsum3_wrd(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRvariance2_dbl(bat *retval, bat *bid, bat *eid);
str AGGRvariance3_dbl(bat *retval, bat *bid, bat *gid, bat *eid);
str AGGRvariancep2_dbl(bat *retval, bat *bid, bat *eid);
str AGGRvariancep3_dbl(bat *retval, bat *bid, bat *gid, bat *eid);
str ALARMctime(str *res);
str ALARMepilogue(void);
str ALARMepoch(int *res);
str ALARMprelude(void);
str ALARMsetalarm(int *res, int *secs, str *action);
str ALARMsleep(int *res, int *secs);
str ALARMtime(int *res);
str ALARMtimers(int *res);
str ALARMusec(lng *ret);
str ALGBATmaximum(ptr *result, int *bid);
str ALGBATminimum(ptr *result, int *bid);
str ALGantijoin(int *result, int *lid, int *rid);
str ALGantijoin2(int *l, int *r, int *lid, int *rid);
str ALGantiuselect1(int *result, int *bid, ptr value);
str ALGantiuselectInclusive(int *result, int *bid, ptr low, ptr high, bit *lin, bit *rin);
str ALGavg(dbl *res, int *bid);
str ALGbandjoin(int *result, int *lid, int *rid, ptr *minus, ptr *plus, bit *li, bit *hi);
str ALGbandjoin2(int *l, int *r, int *lid, int *rid, ptr *minus, ptr *plus, bit *li, bit *hi);
str ALGbandjoin_default(int *result, int *lid, int *rid, ptr *minus, ptr *plus);
str ALGcard(lng *result, int *bid);
str ALGcopy(int *result, int *bid);
str ALGcount_bat(wrd *result, int *bid);
str ALGcount_nil(wrd *result, int *bid, bit *ignore_nils);
str ALGcount_no_nil(wrd *result, int *bid);
str ALGcross(int *result, int *lid, int *rid);
str ALGcrossproduct2(int *l, int *r, int *lid, int *rid);
str ALGexist(bit *ret, int *bid, ptr val);
str ALGexistBUN(bit *ret, int *bid, ptr val, ptr tval);
str ALGfetch(ptr ret, int *bid, lng *pos);
str ALGfetchbat(int *ret, int *bid, int *sid);
str ALGfetchint(int *ret, int *bid, int *pos);
str ALGfetchjoin(int *result, int *lid, int *rid);
str ALGfetchjoinestimate(int *result, int *lid, int *rid, lng *estimate);
str ALGfetchoid(int *ret, int *bid, oid *pos);
str ALGfind(ptr ret, int *bid, ptr val);
str ALGfragment(int *result, int *bid, ptr hlow, ptr hhigh, ptr tlow, ptr thigh);
str ALGgroupby(int *res, int *gids, int *cnts);
str ALGhashjoin(int *result, int *lid, int *rid);
str ALGhistogram(int *result, int *bid);
str ALGhistogram_rev(int *result, int *bid);
str ALGhmarkp(int *result, int *bid, int *nr_parts, int *part_nr);
str ALGhsort(int *result, int *bid);
str ALGhsort_rev(int *result, int *bid);
str ALGhtsort(int *result, int *lid);
str ALGidentity(int *ret, int *bid);
str ALGindexjoin(int *result, int *lid, int *rid);
str ALGjoin(int *result, int *lid, int *rid);
str ALGjoin2(int *l, int *r, int *lid, int *rid);
str ALGjoinPath(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
BAT *ALGjoinPathBody(Client cntxt, int top, BAT **joins, int flag);
str ALGjoinestimate(int *result, int *lid, int *rid, lng *estimate);
str ALGkdiff(int *result, int *lid, int *rid);
str ALGkunion(int *result, int *lid, int *rid);
str ALGkunique(int *result, int *bid);
str ALGleftfetchjoin(int *result, int *lid, int *rid);
str ALGleftfetchjoinestimate(int *result, int *lid, int *rid, lng *estimate);
str ALGleftjoin(int *result, int *lid, int *rid);
str ALGleftjoinestimate(int *result, int *lid, int *rid, lng *estimate);
str ALGlike(int *ret, int *bid, str *k);
str ALGmarkHead(int *result, int *bid, oid *base);
str ALGmarkHead_default(int *result, int *bid);
str ALGmark_grp_1(int *result, int *bid, int *gid);
str ALGmark_grp_2(int *result, int *bid, int *gid, oid *base);
str ALGmaterialize(int *ret, int *bid);
str ALGmax_bte(bte *res, int *bid);
str ALGmax_dbl(dbl *res, int *bid);
str ALGmax_flt(flt *res, int *bid);
str ALGmax_int(int *res, int *bid);
str ALGmax_lng(lng *res, int *bid);
str ALGmax_sht(sht *res, int *bid);
str ALGmax_wrd(wrd *res, int *bid);
str ALGmaxany(ptr result, int *bid);
str ALGmerge(int *result, int *bid);
str ALGmergejoin(int *result, int *lid, int *rid);
str ALGmin_bte(bte *res, int *bid);
str ALGmin_dbl(dbl *res, int *bid);
str ALGmin_flt(flt *res, int *bid);
str ALGmin_int(int *res, int *bid);
str ALGmin_lng(lng *res, int *bid);
str ALGmin_sht(sht *res, int *bid);
str ALGmin_wrd(wrd *res, int *bid);
str ALGminany(ptr result, int *bid);
str ALGouterjoin(int *result, int *lid, int *rid);
str ALGouterjoinestimate(int *result, int *lid, int *rid, lng *estimate);
str ALGposition(wrd *retval, int *bid, ptr val);
str ALGpositionBUN(wrd *retval, int *bid, ptr val, ptr tval);
str ALGprejoin(int *rl, int *rr, int *l, int *r);
str ALGprojectNIL(int *ret, int *bid);
str ALGprojecthead(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str ALGprojecttail(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str ALGrangejoin(int *result, int *lid, int *rlid, int *rhid, bit *li, bit *hi);
str ALGrangejoin2(int *l, int *r, int *lid, int *rlid, int *rhid, bit *li, bit *hi);
str ALGreuse(int *ret, int *bid);
str ALGrevert(int *result, int *bid);
str ALGsample(int *result, int *bid, int *param);
str ALGsdiff(int *result, int *lid, int *rid);
str ALGselect(int *result, int *bid, ptr low, ptr high);
str ALGselect1(int *result, int *bid, ptr value);
str ALGselect1Head(int *result, int *bid, ptr value);
str ALGselectHead(int *result, int *bid, ptr low, ptr high);
str ALGselectInclusive(int *result, int *bid, ptr low, ptr high, bit *lin, bit *rin);
str ALGselectInclusiveHead(int *result, int *bid, ptr low, ptr high, bit *lin, bit *rin);
str ALGselectNotNil(int *result, int *bid);
str ALGsemijoin(int *result, int *lid, int *rid);
str ALGsintersect(int *result, int *lid, int *rid);
str ALGslice(int *ret, bat *bid, lng *start, lng *end);
str ALGslice_int(int *ret, bat *bid, int *start, int *end);
str ALGslice_oid(int *ret, bat *bid, oid *start, oid *end);
str ALGslice_wrd(int *ret, bat *bid, wrd *start, wrd *end);
str ALGsplit(int *result, int *bid);
str ALGssort(int *result, int *bid);
str ALGssort_rev(int *result, int *bid);
str ALGstdev(dbl *res, int *bid);
str ALGstdevp(dbl *res, int *bid);
str ALGsubselect1(bat *result, bat *bid, const void *low, const void *high, const bit *li, const bit *hi, const bit *anti);
str ALGsubselect2(bat *result, bat *bid, bat *sid, const void *low, const void *high, const bit *li, const bit *hi, const bit *anti);
str ALGsubslice_wrd(int *ret, bat *bid, wrd *start, wrd *end);
str ALGsubsort11(bat *result, bat *bid, bit *reverse, bit *stable);
str ALGsubsort12(bat *result, bat *norder, bat *bid, bit *reverse, bit *stable);
str ALGsubsort13(bat *result, bat *norder, bat *ngroup, bat *bid, bit *reverse, bit *stable);
str ALGsubsort21(bat *result, bat *bid, bat *order, bit *reverse, bit *stable);
str ALGsubsort22(bat *result, bat *norder, bat *bid, bat *order, bit *reverse, bit *stable);
str ALGsubsort23(bat *result, bat *norder, bat *ngroup, bat *bid, bat *order, bit *reverse, bit *stable);
str ALGsubsort31(bat *result, bat *bid, bat *order, bat *group, bit *reverse, bit *stable);
str ALGsubsort32(bat *result, bat *norder, bat *bid, bat *order, bat *group, bit *reverse, bit *stable);
str ALGsubsort33(bat *result, bat *norder, bat *ngroup, bat *bid, bat *order, bat *group, bit *reverse, bit *stable);
str ALGsunion(int *result, int *lid, int *rid);
str ALGsunique(int *result, int *bid);
str ALGtdiff(int *result, int *lid, int *rid);
str ALGtdifference(int *result, int *lid, int *rid);
str ALGthetajoin(int *result, int *lid, int *rid, int *opc);
str ALGthetajoin2(int *l, int *r, int *lid, int *rid, int *opc);
str ALGthetajoinEstimate(int *result, int *lid, int *rid, int *opc, lng *estimate);
str ALGthetaselect(int *result, int *bid, ptr low, str *op);
str ALGthetasubselect1(bat *result, bat *bid, const void *val, const char **op);
str ALGthetasubselect2(bat *result, bat *bid, bat *sid, const void *val, const char **op);
str ALGthetauselect(int *result, int *bid, ptr value, str *op);
str ALGthsort(int *result, int *lid);
str ALGtinter(int *result, int *lid, int *rid);
str ALGtintersect(int *result, int *lid, int *rid);
str ALGtmark(int *result, int *bid, oid *base);
str ALGtmark_default(int *result, int *bid);
str ALGtmarkp(int *result, int *bid, int *nr_parts, int *part_nr);
str ALGtopN(int *res, int *bid, lng *top);
str ALGtsort(int *result, int *bid);
str ALGtsort_rev(int *result, int *bid);
str ALGtunion(int *result, int *lid, int *rid);
str ALGtunique(int *result, int *bid);
str ALGtunique(int *result, int *bid);
str ALGuselect(int *result, int *bid, ptr low, ptr high);
str ALGuselect1(int *result, int *bid, ptr value);
str ALGuselectInclusive(int *result, int *bid, ptr low, ptr high, bit *lin, bit *rin);
str ALGvariance(dbl *res, int *bid);
str ALGvariancep(dbl *res, int *bid);
str ARRAYgridBAT_int(int *ret, int *bid, int *groups, int *groupsize, int *clustersize, int *offset);
str ARRAYgridBAT_lng(lng *ret, lng *bid, lng *groups, lng *groupsize, lng *clustersize, lng *offset);
str ARRAYgridBATshift_int(int *ret, int *bid, int *groups, int *groupsize, int *clustersize, int *offset, int *shift);
str ARRAYgridBATshift_lng(lng *ret, lng *bid, lng *groups, lng *groupsize, lng *clustersize, lng *offset, lng *shift);
str ARRAYgridShift_int(int *ret, int *groups, int *groupsize, int *clustersize, int *offset, int *shift);
str ARRAYgridShift_lng(lng *ret, lng *groups, lng *groupsize, lng *clustersize, lng *offset, lng *shift);
str ARRAYgrid_int(int *ret, int *groups, int *groupsize, int *clustersize, int *offset);
str ARRAYgrid_lng(lng *ret, lng *groups, lng *groupsize, lng *clustersize, lng *offset);
str ARRAYmultiply_int_int(int *ret, int *bid, int *rid);
str ARRAYmultiply_int_lng(int *ret, int *bid, int *rid);
str ARRAYmultiply_lng_lng(int *ret, int *bid, int *rid);
str ARRAYmultiply_sht_int(int *ret, int *bid, int *rid);
str ARRAYmultiply_sht_lng(int *ret, int *bid, int *rid);
str ARRAYproduct(int *ret, int *bid, int *rid);
str ARRAYproject(int *ret, int *bid, int *cst);
str AUTHaddUser(oid *ret, Client *c, str *user, str *pass);
str AUTHchangePassword(Client *c, str *oldpass, str *passwd);
str AUTHchangeUsername(Client *c, str *olduser, str *newuser);
str AUTHcheckCredentials(oid *ret, Client *c, str *user, str *passwd, str *challenge, str *algo);
str AUTHgetPasswordHash(str *ret, Client *c, str *username);
str AUTHgetUsername(str *ret, Client *c);
str AUTHgetUsers(BAT **ret, Client *c);
str AUTHinitTables(void);
str AUTHremoveUser(Client *c, str *username);
str AUTHrequireAdmin(Client *c);
str AUTHrequireAdminOrUser(Client *c, str *username);
str AUTHresolveUser(str *ret, oid *uid);
str AUTHsetPassword(Client *c, str *username, str *passwd);
str AUTHunlockVault(str *password);
str BATPCREilike(int *ret, int *b, str *pat, str *esc);
str BATPCREilike2(int *ret, int *b, str *pat);
str BATPCRElike(int *ret, int *b, str *pat, str *esc);
str BATPCRElike2(int *ret, int *b, str *pat);
str BATPCREnotilike(int *ret, int *b, str *pat, str *esc);
str BATPCREnotilike2(int *ret, int *b, str *pat);
str BATPCREnotlike(int *ret, int *b, str *pat, str *esc);
str BATPCREnotlike2(int *ret, int *b, str *pat);
str BATXMLagg(int *ret, int *bid, int *grp);
str BATXMLagg3(int *ret, int *bid, int *grp, int *e);
str BATXMLattribute(int *ret, str *name, int *bid);
str BATXMLcomment(int *x, int *s);
str BATXMLconcat(int *ret, int *bid, int *rid);
str BATXMLcontent(int *x, int *s);
str BATXMLdocument(int *x, int *s);
str BATXMLelement(int *ret, str *name, xml *ns, xml *attr, int *bid);
str BATXMLelementSmall(int *x, str *name, int *s);
str BATXMLforest(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str BATXMLgroup(xml *ret, int *bid);
str BATXMLisdocument(int *x, int *s);
str BATXMLoptions(int *x, str *name, str *options, int *s);
str BATXMLparse(int *x, str *doccont, int *s, str *option);
str BATXMLpi(int *x, str *tgt, int *s);
str BATXMLroot(int *ret, int *bid, str *version, str *standalone);
str BATXMLstr2xml(int *x, int *s);
str BATXMLxml2str(int *ret, int *bid);
str BATXMLxmltext(int *ret, int *bid);
str BATXMLxquery(int *x, int *s, str *expr);
ptr BATmax(BAT *b, ptr aggr);
ptr BATmin(BAT *b, ptr aggr);
char BBPTraceCall(Client cntxt, MalBlkPtr mb, MalStkPtr stk, int pc);
str BKCaccbuild(int *ret, int *bid, str *acc, ptr *param);
str BKCaccbuild_std(int *ret, int *bid, int *acc);
str BKCappend_force_wrap(int *r, int *bid, int *uid, bit *force);
str BKCappend_reverse_val_wrap(int *r, int *bid, ptr u);
str BKCappend_val_force_wrap(int *r, int *bid, ptr u, bit *force);
str BKCappend_val_wrap(int *r, int *bid, ptr u);
str BKCappend_wrap(int *r, int *bid, int *uid);
str BKCattach(int *ret, int *tt, str *heapfile);
char *BKCbat_append_val_wrap(int *r, int *bid, ptr u);
char *BKCbat_append_void_bat_wrap(int *r, int *bid, int *uid);
str BKCbat_inplace(int *r, int *bid, int *rid);
str BKCbat_inplace_force(int *r, int *bid, int *rid, bit *force);
str BKCbatdisksize(lng *tot, int *bid);
str BKCbatsize(lng *tot, int *bid);
str BKCbatvmsize(lng *tot, int *bid);
str BKCbun_inplace(int *r, int *bid, oid *id, ptr t);
str BKCbun_inplace_force(int *r, int *bid, oid *id, ptr t, bit *force);
str BKCcold(int *res, str *input);
str BKCcoldBAT(int *res, int *bid);
char *BKCdelete(int *r, int *bid, const void *h);
str BKCdelete_all(int *r, int *bid);
char *BKCdelete_bat(int *r, int *bid, int *bnid);
str BKCdelete_bat(int *r, int *bid, int *sid);
str BKCdelete_bat_bun(int *r, int *bid, int *sid);
char *BKCdelete_bun(int *r, int *bid, ptr h, ptr t);
str BKCdensebat(int *ret, wrd *size);
char *BKCdestroy(signed char *r, int *bid);
char *BKCdestroyImmediate(signed char *r, int *bid);
str BKCdestroy_bat(bit *r, str *input);
str BKCgetAccess(str *res, int *bid);
char *BKCgetAlpha(int *r, int *bid);
str BKCgetBBPname(str *ret, int *bid);
str BKCgetCapacity(lng *res, int *bid);
char *BKCgetDelta(int *r, int *bid);
str BKCgetHeadType(str *res, int *bid);
str BKCgetKey(bit *ret, int *bid);
str BKCgetRole(str *res, int *bid);
str BKCgetSequenceBase(oid *r, int *bid);
str BKCgetSpaceUsed(lng *tot, int *bid);
str BKCgetStorageSize(lng *tot, int *bid);
str BKCgetStorageSize_str(lng *tot, str batname);
str BKCgetTailType(str *res, int *bid);
str BKChasAppendMode(bit *res, int *bid);
str BKChasReadMode(bit *res, int *bid);
str BKChasWriteMode(bit *res, int *bid);
str BKCheat(int *res, str *input);
str BKChot(int *res, str *input);
str BKChotBAT(int *res, int *bid);
str BKCinfo(int *ret1, int *ret2, int *bid);
str BKCinsert_bat(int *r, int *bid, int *sid);
str BKCinsert_bat_force(int *r, int *bid, int *sid, bit *force);
char *BKCinsert_bun(int *r, int *bid, ptr h, ptr t);
char *BKCinsert_bun_force(int *r, int *bid, ptr h, ptr t, bit *force);
str BKCintersectcand(bat *ret, bat *aid, bat *bid);
str BKCisCached(bit *res, int *bid);
str BKCisPersistent(bit *res, int *bid);
str BKCisSorted(bit *res, int *bid);
str BKCisSortedReverse(bit *res, int *bid);
str BKCisSynced(bit *ret, int *bid1, int *bid2);
str BKCisTransient(bit *res, int *bid);
str BKCisaSet(bit *res, int *bid);
str BKCload(int *res, str *input);
str BKCmadvise(bit *res, int *bid, int *hbns, int *tbns, int *hhp, int *thp);
str BKCmadvise2(bit *res, int *bid, int *mode);
str BKCmergecand(bat *ret, bat *aid, bat *bid);
str BKCmirror(int *ret, int *bid);
str BKCmmap(bit *res, int *bid, int *hbns, int *tbns, int *hhp, int *thp);
str BKCmmap2(bit *res, int *bid, int *bns);
str BKCnewBAT(int *res, int *ht, int *tt, BUN *cap);
str BKCorder(int *ret, int *bid);
str BKCorder_rev(int *ret, int *bid);
str BKCpersists(int *r, int *bid, bit *flg);
str BKCreplace_bat(int *r, int *bid, int *sid);
str BKCreplace_bat_force(int *r, int *bid, int *sid, bit *force);
str BKCreplace_bun(int *r, int *bid, ptr h, ptr t);
str BKCreplace_bun_force(int *r, int *bid, ptr h, ptr t, bit *force);
str BKCreuseBAT(int *ret, int *bid, int *did);
str BKCreuseBATmap(int *ret, int *bid, int *did);
str BKCreverse(int *ret, int *bid);
str BKCrevert(int *ret, int *bid);
str BKCsave(bit *res, str *input);
str BKCsave2(int *r, int *bid);
str BKCsetAccess(int *res, int *bid, str *param);
str BKCsetAppendMode(int *res, int *bid);
str BKCsetColumn(int *r, int *bid, str *tname);
str BKCsetColumns(int *r, int *bid, str *hname, str *tname);
str BKCsetHash(bit *ret, int *bid, bit *prop);
str BKCsetName(int *r, int *bid, str *s);
str BKCsetPersistent(int *r, int *bid);
str BKCsetReadMode(int *res, int *bid);
char *BKCsetRole(int *r, int *bid, char **hname, char **tname);
str BKCsetSequenceBase(int *r, int *bid, oid *o);
str BKCsetSequenceBaseNil(int *r, int *bid, oid *o);
str BKCsetSet(int *res, int *bid, bit *param);
str BKCsetTransient(int *r, int *bid);
str BKCsetWriteMode(int *res, int *bid);
str BKCsetkey(int *res, int *bid, bit *param);
str BKCshrinkBAT(int *ret, int *bid, int *did);
str BKCshrinkBATmap(int *ret, int *bid, int *did);
str BKCunload(bit *res, str *input);
str BLOB_isnil(bit *retval, blob *val);
str BLOBblob_blob(blob **d, blob **s);
str BLOBblob_fromstr(blob **b, str *d);
void BLOBconvert(blob *b, int direction);
void BLOBdel(Heap *h, var_t *index);
str BLOBeoln(char *src, char *end);
str BLOBfromblob(str *retval, blob **b);
str BLOBfromidx(str *retval, blob **binp, int *index);
int BLOBfromstr(char *instr, int *l, blob **val);
int BLOBget(Heap *h, int *bun, int *l, blob **val);
BUN BLOBhash(blob *b);
void BLOBheap(Heap *heap, size_t capacity);
int BLOBlength(blob *p);
int BLOBnequal(blob *l, blob *r);
int BLOBnitems(int *ret, blob *b);
blob *BLOBnull(void);
str BLOBprelude(void);
var_t BLOBput(Heap *h, var_t *bun, blob *val);
blob *BLOBread(blob *a, stream *s, size_t cnt);
str BLOBsqlblob_fromstr(sqlblob **b, str *d);
str BLOBtoblob(blob **retval, str *s);
int BLOBtostr(str *tostr, int *l, blob *pin);
int BLOBwrite(blob *a, stream *s, size_t cnt);
str BOXclose(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str BOXdeposit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str BOXdestroy(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str BOXdiscard(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str BOXgetBoxNames(int *bid);
str BOXiterator(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str BOXopen(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str BOXrelease(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str BOXreleaseAll(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str BOXtake(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str BOXtoString(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CALCbat2batid(int *ret, bat *bid);
str CALCmax(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str CALCmax_no_nil(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str CALCmin(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str CALCmin_no_nil(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str CALCswitchbit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str CLRbatBlue(int *ret, int *l);
str CLRbatCb(int *ret, int *l);
str CLRbatColor(int *ret, int *l);
str CLRbatCr(int *ret, int *l);
str CLRbatGreen(int *ret, int *l);
str CLRbatHsv(int *ret, int *l, int *bid2, int *bid3);
str CLRbatHue(int *ret, int *l);
str CLRbatHueInt(int *ret, int *l);
str CLRbatLuminance(int *ret, int *l);
str CLRbatRed(int *ret, int *l);
str CLRbatRgb(int *ret, int *l, int *bid2, int *bid3);
str CLRbatSaturation(int *ret, int *l);
str CLRbatSaturationInt(int *ret, int *l);
str CLRbatStr(int *ret, int *l);
str CLRbatValue(int *ret, int *l);
str CLRbatValueInt(int *ret, int *l);
str CLRbatycc(int *ret, int *l, int *bid2, int *bid3);
str CLRblue(int *b, color *c);
str CLRcb(int *g, color *c);
str CLRcolor(color *c, str *val);
str CLRcr(int *r, color *c);
str CLRgreen(int *g, color *c);
str CLRhsv(color *c, flt *h, flt *s, flt *v);
str CLRhue(flt *r, color *c);
str CLRhueInt(int *r, color *c);
str CLRluminance(int *r, color *c);
str CLRred(int *r, color *c);
str CLRrgb(color *rgb, int *r, int *g, int *b);
str CLRsaturation(flt *g, color *c);
str CLRsaturationInt(int *g, color *c);
str CLRstr(str *val, color *c);
str CLRvalue(flt *b, color *c);
str CLRvalueInt(int *b, color *c);
str CLRycc(color *c, int *y, int *cr, int *cb);
str CLS_create2_bte(bat *rpsum, bat *rcmap, bat *b, unsigned int *bits, unsigned int *offset, bit *order);
str CLS_create2_dbl(bat *rpsum, bat *rcmap, bat *b, unsigned int *bits, unsigned int *offset, bit *order);
str CLS_create2_flt(bat *rpsum, bat *rcmap, bat *b, unsigned int *bits, unsigned int *offset, bit *order);
str CLS_create2_int(bat *rpsum, bat *rcmap, bat *b, unsigned int *bits, unsigned int *offset, bit *order);
str CLS_create2_lng(bat *rpsum, bat *rcmap, bat *b, unsigned int *bits, unsigned int *offset, bit *order);
str CLS_create2_sht(bat *rpsum, bat *rcmap, bat *b, unsigned int *bits, unsigned int *offset, bit *order);
str CLS_create2_wrd(bat *rpsum, bat *rcmap, bat *b, unsigned int *bits, unsigned int *offset, bit *order);
str CLS_create_bte(bat *rpsum, bat *rcmap, bat *b, unsigned int *bits, unsigned int *offset);
str CLS_create_dbl(bat *rpsum, bat *rcmap, bat *b, unsigned int *bits, unsigned int *offset);
str CLS_create_flt(bat *rpsum, bat *rcmap, bat *b, unsigned int *bits, unsigned int *offset);
str CLS_create_int(bat *rpsum, bat *rcmap, bat *b, unsigned int *bits, unsigned int *offset);
str CLS_create_lng(bat *rpsum, bat *rcmap, bat *b, unsigned int *bits, unsigned int *offset);
str CLS_create_sht(bat *rpsum, bat *rcmap, bat *b, unsigned int *bits, unsigned int *offset);
str CLS_create_wrd(bat *rpsum, bat *rcmap, bat *b, unsigned int *bits, unsigned int *offset);
str CLS_map(bat *rb, bat *cmap, bat *b);
str CLS_map2(bat *rb, bat *psum, bat *cmap, bat *b);
str CLS_split(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTActions(int *ret);
str CLTInfo(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTLastCommand(int *ret);
str CLTLogin(int *ret);
str CLTTime(int *ret);
str CLTaddUser(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTbackendsum(str *ret, str *pw);
str CLTchangePassword(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTchangeUsername(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTcheckPermission(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTgetClientId(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTgetPasswordHash(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTgetScenario(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTgetTimeout(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTgetUsername(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTgetUsers(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTmd5sum(str *ret, str *pw);
str CLTquit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTremoveUser(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTripemd160sum(str *ret, str *pw);
str CLTsetHistory(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTsetListing(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTsetPassword(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTsetScenario(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTsetTimeout(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTsha1sum(str *ret, str *pw);
str CLTsha2sum(str *ret, str *pw, int *bits);
str CLTshutdown(int *ret, bit *forced);
str CLTstop(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTsuspend(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLTusers(int *ret);
str CLTwakeup(int *ret, int *id);
str CLUSTER_apply(bat *bid, BAT *nb, BAT *cmap);
str CLUSTER_column(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CLUSTER_key(bat *M, bat *B);
str CLUSTER_map(bat *RB, bat *B);
str CLUSTER_table(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDBATclone(Client cntxt, MalBlkPtr m, MalStkPtr s, InstrPtr p);
str CMDBATderivedByName(int *ret, str *nme);
str CMDBATnew(Client cntxt, MalBlkPtr m, MalStkPtr s, InstrPtr p);
str CMDBATnewDerived(Client cntxt, MalBlkPtr m, MalStkPtr s, InstrPtr p);
str CMDBATnewint(Client cntxt, MalBlkPtr m, MalStkPtr s, InstrPtr p);
str CMDBATprod(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDBATsum(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDactivateProfiler(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatABS(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatADD(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatADDenlarge(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatADDsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatAND(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatBETWEEN(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatCMP(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatDECR(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatDIVdbl(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatDIVdblsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatDIVflt(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatDIVfltsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatDIVsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatEQ(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatGE(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatGT(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatINCR(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatISNIL(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatISZERO(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatLE(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatLSH(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatLSHsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatLT(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatMOD(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatMODsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatMUL(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatMULenlarge(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatMULsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatNE(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatNEG(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatNOT(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatOR(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatRSH(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatRSHsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatSIGN(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatSUB(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatSUBenlarge(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatSUBsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatXOR(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatpartition(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbatpartition2(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbbp(int *NS, int *HT, int *TT, int *CNT, int *REFCNT, int *LREFCNT, int *LOCATION, int *HEAT, int *DIRTY, int *STATUS, int *KIND);
str CMDbbpCount(int *ret);
str CMDbbpDirty(int *ret);
str CMDbbpDiskReads(lng *ret);
str CMDbbpDiskSpace(lng *ret);
str CMDbbpDiskWrites(lng *ret);
str CMDbbpGetObjects(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbbpHeat(int *ret);
str CMDbbpKind(int *ret);
str CMDbbpLRefCount(int *ret);
str CMDbbpLocation(int *ret);
str CMDbbpName(str *ret, int *bid);
str CMDbbpNames(int *ret);
str CMDbbpRNames(int *ret);
str CMDbbpRefCount(int *ret);
str CMDbbpReleaseAll(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbbpStatus(int *ret);
str CMDbbpSubCommit(int *ret, int *bid);
str CMDbbpType(int *ret);
str CMDbbpbind(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbbpbind2(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str CMDbbpbindDefinition(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbbpbindindex(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbbpclose(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbbpcompress(int *ret, int *bid, str *fnme);
str CMDbbpdecompress(int *ret, int *bid, str *fnme);
str CMDbbpdeposit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbbpdestroy(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbbpdestroyBAT(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbbpdestroyBAT1(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbbpdiscard(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbbpexpand(int *ret, int *bid, str *fnme);
str CMDbbpgetIndex(int *res, int *bid);
str CMDbbpiterator(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbbpopen(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbbpprelude(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbbprelease(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbbpreleaseBAT(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbbptake(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbbptoStr(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDbbptruncate(int *ret, int *bid, str *fnme);
str CMDcalcavg(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDcallBAT(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDcallString(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDcleanup(int *ret);
str CMDclearEvent(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDclearTrace(int *res);
str CMDcloseProfilerStream(int *res);
str CMDclrFilterProfiler(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDclrFilterVariable(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pc);
str CMDconvert_bit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvert_bte(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvert_dbl(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvert_flt(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvert_int(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvert_lng(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvert_oid(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvert_sht(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvert_str(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvert_wrd(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvertsignal_bit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvertsignal_bte(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvertsignal_dbl(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvertsignal_flt(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvertsignal_int(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvertsignal_lng(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvertsignal_oid(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvertsignal_sht(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvertsignal_str(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDconvertsignal_wrd(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDdeactivateProfiler(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDdebug(int *ret, int *flg);
str CMDdumpTrace(int *res);
str CMDendPointProfiler(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDevalFile(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDgetBATlrefcnt(int *res, int *bid);
str CMDgetBATrefcnt(int *res, int *bid);
str CMDgetDiskReads(lng *ret);
str CMDgetDiskWrites(lng *ret);
str CMDgetEvent(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDgetFootprint(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDgetMemory(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDgetPageSize(int *ret);
str CMDgetSystemTime(lng *ret);
str CMDgetTrace(int *res, str *ev);
str CMDgetUserTime(lng *ret);
str CMDifthen(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDincludeFile(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDmodules(int *bid);
str CMDnoopProfiler(int *res);
str CMDopenProfilerStream(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDqgramnormalize(str *res, str *input);
str CMDqgramselfjoin(BAT **res, BAT **res2, BAT *qgram, BAT *id, BAT *pos, BAT *len, flt *c, int *k);
str CMDraise(str *ret, str *msg);
str CMDregisterFunction(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDscience_bat_cst_atan2_dbl(int *ret, int *bid, dbl *d);
str CMDscience_bat_cst_atan2_flt(int *ret, int *bid, flt *d);
str CMDscience_bat_cst_pow_dbl(int *ret, int *bid, dbl *d);
str CMDscience_bat_cst_pow_flt(int *ret, int *bid, flt *d);
str CMDsetAllProfiler(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pc);
str CMDsetFilterProfiler(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDsetFilterVariable(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pc);
str CMDsetFootprintFlag(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDsetIOTrace(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDsetMemoryFlag(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDsetMemoryTrace(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDsetNoneProfiler(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDsetProfilerFile(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDsetProfilerStream(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDsetThreadTrace(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDsetTimerTrace(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDsetoid(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDstartPointProfiler(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDstartProfiler(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDstopProfiler(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDstr2qgrams(int *ret, str *val);
str CMDstrlength(int *ret, str *v);
str CMDtablet_input(int *ret, int *nameid, int *sepid, int *typeid, stream *s, int *nr);
str CMDtomograph(int *ret);
str CMDvarABS(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarADD(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarADDsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarADDstr(str *ret, str *s1, str *s2);
str CMDvarADDstrint(str *ret, str *s1, int *i);
str CMDvarAND(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarBETWEEN(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarCMP(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarCONVERT(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarCONVERTptr(ptr *ret, ptr *v);
str CMDvarDECRsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarDIV(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarDIVsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarEQ(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarGE(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarGT(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarINCRsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarISNIL(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarISNOTNIL(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarISZERO(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarLE(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarLSH(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarLSHsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarLT(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarMOD(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarMODsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarMUL(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarMULsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarNE(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarNEG(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarNOT(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarOR(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarRSH(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarRSHsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarSIGN(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarSUB(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarSUBsignal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CMDvarXOR(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CNTRScounter2bat(int *bid, int *idx);
str CNTRScounter2str(str *ret, int *idx);
str CNTRSeventName(str *ret, int *nr);
str CNTRSeventNumber(int *ret, str *nme);
str CNTRSinit(int *ret);
str CNTRSnativeEvents(int *ret);
str CNTRSreset(int *ret, int *idx, int *ev1, int *ev2);
str CNTRSstart(int *ret, int *ev1, int *ev2);
str CNTRSstop(int *ret, int *idx);
str CNTRSunifiedEvents(int *ret);
str CSTclose(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CSTdeposit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CSTdestroy(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CSTdiscard(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CSTepilogue(int *ret);
str CSThasMoreElements(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CSTnewIterator(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CSTopen(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CSTprelude(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CSTrelease(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CSTreleaseAll(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CSTtake(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str CSTtoString(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int CTrefine(BAT **res, BAT *b, BAT *a);
int CTrefine_rev(BAT **res, BAT *b, BAT *a);
str CemptySet(int *k, int *bid);
str DICTbind(int *idx, int *val, str *nme);
str DICTcompress(int *idx, str *nme, int *bid);
str DICTdecompress(int *ret, str *nme);
str DICTencode(int *ridx, int *val, int *bid);
str DICTexpand(int *rval, int *val, int *bid);
str DICTgroupid(int *ret, int *idx, int *val);
str DICTinitialize(int *ret);
str FCTgetArrival(int *ret);
str FCTgetCaller(int *ret);
str FCTgetDeparture(int *ret);
str FCTgetLocations(int *ret);
str FCTgetOwners(int *ret);
str FCTgetPlants(int *ret, int *ret2);
str FCTsetLocation(int *ret, str *loc);
str FCTshutdown(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str GRPaggr_count(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPavg_bte(int *ret, int *bid, int *eid);
str GRPavg_dbl(int *ret, int *bid, int *eid);
str GRPavg_flt(int *ret, int *bid, int *eid);
str GRPavg_int(int *ret, int *bid, int *eid);
str GRPavg_lng(int *ret, int *bid, int *eid);
str GRPavg_oid(int *ret, int *bid, int *eid);
str GRPavg_sht(int *ret, int *bid, int *eid);
str GRPavg_wrd(int *ret, int *bid, int *eid);
str GRPderive(int *hid, int *mid, int *ct_histoid, int *ct_mapid, int *bid);
str GRPgroup(int *rethisto, int *retbid, int *bid);
str GRPmax(int *retval, int *bid, int *eid);
str GRPmin(int *retval, int *bid, int *eid);
str GRPmulticolumngroup(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str GRPprod_bte_bte(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPprod_bte_int(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPprod_bte_lng(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPprod_bte_sht(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPprod_bte_wrd(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPprod_dbl_dbl(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPprod_flt_dbl(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPprod_flt_flt(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPprod_int_int(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPprod_int_lng(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPprod_int_wrd(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPprod_lng_lng(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPprod_oid_oid(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPprod_sht_int(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPprod_sht_lng(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPprod_sht_sht(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPprod_sht_wrd(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPprod_wrd_lng(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPprod_wrd_wrd(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPrefine(int *retid, int *bid, int *aid);
str GRPrefine_rev(int *retid, int *bid, int *aid);
str GRPsize(int *retval, int *bid, int *eid);
str GRPslidingsum_bte(int *retval, int *bid, int *size, int *shift);
str GRPslidingsum_dbl(int *retval, int *bid, int *size, int *shift);
str GRPslidingsum_flt(int *retval, int *bid, int *size, int *shift);
str GRPslidingsum_int(int *retval, int *bid, int *size, int *shift);
str GRPslidingsum_lng(int *retval, int *bid, int *size, int *shift);
str GRPslidingsum_oid(int *retval, int *bid, int *size, int *shift);
str GRPslidingsum_sht(int *retval, int *bid, int *size, int *shift);
str GRPslidingsum_wrd(int *retval, int *bid, int *size, int *shift);
str GRPsubgroup1(bat *ngid, bat *next, bat *nhis, bat *bid);
str GRPsubgroup2(bat *ngid, bat *next, bat *nhis, bat *bid, bat *gid);
str GRPsubgroup4(bat *ngid, bat *next, bat *nhis, bat *bid, bat *gid, bat *eid, bat *hid);
str GRPsum_bte_bte(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPsum_bte_int(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPsum_bte_lng(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPsum_bte_sht(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPsum_bte_wrd(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPsum_dbl_dbl(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPsum_flt_dbl(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPsum_flt_flt(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPsum_int_int(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPsum_int_lng(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPsum_int_wrd(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPsum_lng_lng(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPsum_oid_oid(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPsum_sht_int(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPsum_sht_lng(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPsum_sht_sht(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPsum_sht_wrd(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPsum_wrd_lng(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPsum_wrd_wrd(int *retval, int *bid, int *eid, bit *ignore_nils);
str GRPvar_bte(int *ret, int *bid, int *eid);
str GRPvar_dbl(int *ret, int *bid, int *eid);
str GRPvar_flt(int *ret, int *bid, int *eid);
str GRPvar_int(int *ret, int *bid, int *eid);
str GRPvar_lng(int *ret, int *bid, int *eid);
str GRPvar_oid(int *ret, int *bid, int *eid);
str GRPvar_sht(int *ret, int *bid, int *eid);
str GRPvar_wrd(int *ret, int *bid, int *eid);
str GRPwindowsum_bte(int *retval, int *bid, int *size);
str GRPwindowsum_dbl(int *retval, int *bid, int *size);
str GRPwindowsum_flt(int *retval, int *bid, int *size);
str GRPwindowsum_int(int *retval, int *bid, int *size);
str GRPwindowsum_lng(int *retval, int *bid, int *size);
str GRPwindowsum_oid(int *retval, int *bid, int *size);
str GRPwindowsum_sht(int *retval, int *bid, int *size);
str GRPwindowsum_wrd(int *retval, int *bid, int *size);
str IDentifier(str *retval, str *in);
int IDfromString(str src, int *len, str *retval);
str IDprelude(void);
int IDtoString(str *retval, int *len, str handle);
str INET_comp_CS(bit *retval, inet *val1, inet *val2);
str INET_comp_CSE(bit *retval, inet *val1, inet *val2);
str INET_comp_CW(bit *retval, inet *val1, inet *val2);
str INET_comp_CWE(bit *retval, inet *val1, inet *val2);
str INET_comp_EQ(bit *retval, inet *val1, inet *val2);
str INET_comp_GE(bit *retval, inet *val1, inet *val2);
str INET_comp_GT(bit *retval, inet *val1, inet *val2);
str INET_comp_LE(bit *retval, inet *val1, inet *val2);
str INET_comp_LT(bit *retval, inet *val1, inet *val2);
str INET_comp_NEQ(bit *retval, inet *val1, inet *val2);
str INET_fromstr(inet *ret, str *s);
str INET_inet(inet *d, inet *s);
str INET_isnil(bit *retval, inet *val);
str INETabbrev(str *retval, inet *val);
str INETbroadcast(inet *retval, inet *val);
int INETfromString(str src, int *len, inet **retval);
str INEThost(str *retval, inet *val);
str INEThostmask(inet *retval, inet *val);
str INETmasklen(int *retval, inet *val);
str INETnetmask(inet *retval, inet *val);
str INETnetwork(inet *retval, inet *val);
str INETnew(inet *retval, str *in);
str INETsetmasklen(inet *retval, inet *val, int *mask);
str INETtext(str *retval, inet *val);
int INETtoString(str *retval, int *len, inet *handle);
str INSPECTatom_names(int *ret);
str INSPECTatom_sizes(int *ret);
str INSPECTatom_sup_names(int *ret);
str INSPECTequalType(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTgetAddress(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTgetAllAddresses(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTgetAllFunctions(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTgetAllModules(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTgetAllSignatures(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTgetComment(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTgetDefinition(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTgetEnvironment(int *ret, int *ret2);
str INSPECTgetEnvironmentKey(str *ret, str *key);
str INSPECTgetFunction(int *ret);
str INSPECTgetFunctionSize(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str INSPECTgetModule(int *ret);
str INSPECTgetSignature(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTgetSize(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str INSPECTgetSource(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTgetkind(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTshowFunction(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str INSPECTshowFunction3(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str INSPECTsymbolType(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str INSPECTtype(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTtypeIndex(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTtypeName(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str INSPECTtypename(str *ret, int *tpe);
str IOdatafile(str *ret, str *fnme);
str IOexport(bit *ret, int *bid, str *fnme);
str IOfotable(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str IOftable(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str IOimport(int *ret, int *bid, str *fnme);
str IOotable(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str IOprintBoth(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci, int indx, str hd, str tl, int nobat);
str IOprintBoth(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci, int indx, str hd, str tl, int nobat);
str IOprint_tables(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str IOprint_tables(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str IOprint_val(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str IOprintf(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str IOprintfStream(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str IOprompt_val(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str IOtable(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str IOtableAll(stream *f, Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci, int i, int order, int printhead, int printorder);
str IOtableAll(stream *f, Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci, int i, int order, int printhead, int printorderby);
str IOtotable(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str IOttable(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str ITRbunIterator(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str ITRbunNext(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str ITRnewChunk(lng *res, int *vid, int *bid, lng *granule);
str ITRnextChunk(lng *res, int *vid, int *bid, lng *granule);
str ITRnext_dbl(dbl *i, dbl *step, dbl *last);
str ITRnext_flt(flt *i, flt *step, flt *last);
str ITRnext_int(int *i, int *step, int *last);
str ITRnext_lng(lng *i, lng *step, lng *last);
str ITRnext_oid(oid *i, oid *step, oid *last);
str ITRnext_sht(sht *i, sht *step, sht *last);
str LCKcreate(monet_lock *l);
str LCKdestroy(int *res, monet_lock *l);
str LCKset(int *res, monet_lock *l);
str LCKtry(int *res, monet_lock *l);
str LCKunset(int *res, monet_lock *l);
char *M5OutOfMemory;
str MACROprocessor(Client cntxt, MalBlkPtr mb, Symbol t);
int MAL_MAXCLIENTS;
int MALadmission(lng argclaim, lng hotclaim);
str MALassertBit(int *ret, bit *val, str *msg);
str MALassertInt(int *ret, int *val, str *msg);
str MALassertLng(int *ret, lng *val, str *msg);
str MALassertOid(int *ret, oid *val, str *msg);
str MALassertSht(int *ret, sht *val, str *msg);
str MALassertStr(int *ret, str *val, str *msg);
str MALassertTriple(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int MALcommentsOnly(MalBlkPtr mb);
str MALengine(Client c);
str MALexitClient(Client c);
str MALgarbagesink(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MALinitClient(Client c);
int MALkeyword(Client cntxt, str kw, int length);
int MALlookahead(Client cntxt, str kw, int length);
str MALoptimizer(Client c);
str MALparser(Client c);
str MALpass(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MALpipeline(Client c);
str MALreader(Client c);
void MALresourceFairness(Client cntxt, MalBlkPtr mb, lng usec);
str MALstartDataflow(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MANUALcompletion(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MANUALcreate0(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MANUALcreate1(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MANUALcreateIndex(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MANUALcreateSection(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MANUALcreateSummary(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MANUALhelp(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MANUALsearch(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MATHpi(dbl *pi);
str MATHrandint(int *res);
str MATHsqlrandint(int *res, int *seed);
str MATHsrandint(int *seed);
str MATHunary_FINITE(bit *res, dbl *a);
str MATHunary_ISINF(int *res, dbl *a);
str MATHunary_ISNAN(bit *res, dbl *a);
str MATdummy(int *ret, str *grp);
str MAThasMoreElements(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MATinfo(int *ret, str *grp, str *elm);
str MATnewIterator(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MATpack(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MATpack2(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MATpack3(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MATpackIncrement(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MATpackSlice(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MATpackValues(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MATprint(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MATproject(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MATrefine(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MATrefineReverse(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MATsortReverseTail(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MATsortTail(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MBMmix(int *ret, int *batid);
str MBMnormal(int *ret, oid *base, int *size, int *domain, int *stddev, int *mean);
str MBMrandom(int *ret, oid *base, int *size, int *domain);
str MBMskewed(int *ret, oid *base, int *size, int *domain, int *skew);
str MBMuniform(int *ret, oid *base, int *size, int *domain);
str MCawakeClient(int id);
void MCcleanupClients(void);
void MCcloseClient(Client c);
int MCcountClients(void);
int MCdefault;
Client MCforkClient(Client c);
Client MCgetClient(int id);
void MCinit(void);
Client MCinitClient(oid user, bstream *fin, stream *fout);
Client MCinitClientRecord(Client c, oid user, bstream *fin, stream *fout);
int MCinitClientThread(Client c);
void MCpopClientInput(Client c);
int MCpushClientInput(Client c, bstream *new_input, int listing, char *prompt);
int MCreadClient(Client c);
str MCsuspendClient(int id);
void MCtraceAllClients(int flag);
void MCtraceClient(oid which, int flag);
str MDBStkDepth(Client cntxt, MalBlkPtr mb, MalStkPtr s, InstrPtr p);
str MDBStkTrace(Client cntxt, MalBlkPtr m, MalStkPtr s, InstrPtr p);
int MDBdelay;
str MDBdummy(int *ret);
str MDBdump(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MDBgetDebug(int *ret);
str MDBgetDefinition(Client cntxt, MalBlkPtr m, MalStkPtr stk, InstrPtr p);
str MDBgetExceptionContext(str *ret, str *msg);
str MDBgetExceptionReason(str *ret, str *msg);
str MDBgetExceptionVariable(str *ret, str *msg);
str MDBgetStackFrame(Client cntxt, MalBlkPtr m, MalStkPtr s, InstrPtr p);
str MDBgetStackFrameN(Client cntxt, MalBlkPtr m, MalStkPtr s, InstrPtr p);
str MDBgrapTrappedProcess(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MDBinspect(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBlifespan(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBlist(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBlist3(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBlist3Detail(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBlistDetail(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBlistMapi(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBsetBigfoot(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MDBsetCatch(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBsetCount(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MDBsetDebug(int *ret, int *flg);
str MDBsetDebugStr(int *ret, str *nme);
str MDBsetFlow(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MDBsetIO(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MDBsetMemory(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MDBsetThread(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MDBsetTimer(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MDBsetTrace(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBsetVarTrace(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBshowFlowGraph(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBstart(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBstartFactory(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBstop(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBtrapFunction(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str MDBvar(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MDBvar3(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MKEYbathash(bat *res, bat *bid);
str MKEYbulk_rotate_xor_hash(int *ret, int *hid, int *nbits, int *bid);
str MKEYbulkconst_rotate_xor_hash(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MKEYconstbulk_rotate_xor_hash(int *ret, wrd *h, int *nbits, int *bid);
str MKEYhash(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str MKEYhash_bit(wrd *ret, bit *v);
str MKEYhash_bte(wrd *ret, bte *v);
str MKEYhash_dbl(wrd *ret, dbl *v);
str MKEYhash_flt(wrd *ret, flt *v);
str MKEYhash_int(wrd *ret, int *v);
str MKEYhash_lng(wrd *ret, lng *v);
str MKEYhash_sht(wrd *ret, sht *v);
str MKEYhash_str(wrd *ret, str *v);
str MKEYhash_wrd(wrd *ret, wrd *v);
str MKEYrotate(wrd *ret, wrd *v, int *nbits);
str MKEYrotate_xor_hash(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
void MPresetProfiler(stream *fdout);
str MRgetCloud(int *ret, str *nme);
char *MSP_locate_script(const char *mod_name);
char *MSP_locate_sqlscript(const char *mod_name, bit recurse);
void MSinitClientPrg(Client cntxt, str mod, str nme);
void MSresetInstructions(MalBlkPtr mb, int start);
void MSresetVariables(Client cntxt, MalBlkPtr mb, MalStkPtr glb, int start);
void MSscheduleClient(str command, str challenge, bstream *fin, stream *fout);
void MSserveClient(void *dummy);
str MTIMEcompute_rule_foryear(date *ret, rule *val, int *year);
str MTIMEcurrent_date(date *d);
str MTIMEcurrent_date(date *d);
str MTIMEcurrent_time(daytime *t);
str MTIMEcurrent_time(daytime *t);
str MTIMEcurrent_timestamp(timestamp *t);
str MTIMEcurrent_timestamp(timestamp *t);
str MTIMEdate2date(date *ret, date *src);
str MTIMEdate_add_msec_interval_lng_wrap(date *ret, date *t, lng *msec);
str MTIMEdate_add_sec_interval_wrap(date *ret, date *t, int *sec);
str MTIMEdate_adddays(date *ret, date *v, int *delta);
str MTIMEdate_addmonths(date *ret, date *v, int *delta);
str MTIMEdate_addyears(date *ret, date *v, int *delta);
str MTIMEdate_create(date *ret, int *year, int *month, int *day);
str MTIMEdate_date(date *d, date *s);
str MTIMEdate_diff(int *ret, date *v1, date *v2);
str MTIMEdate_diff_bulk(bat *ret, bat *bid1, bat *bid2);
str MTIMEdate_extract_day(int *ret, date *v);
str MTIMEdate_extract_day_bulk(int *ret, int *bid);
str MTIMEdate_extract_dayofweek(int *ret, date *v);
str MTIMEdate_extract_dayofyear(int *ret, date *v);
str MTIMEdate_extract_month(int *ret, date *v);
str MTIMEdate_extract_month_bulk(int *ret, int *bid);
str MTIMEdate_extract_weekofyear(int *ret, date *v);
str MTIMEdate_extract_year(int *ret, date *v);
str MTIMEdate_extract_year_bulk(int *ret, int *bid);
str MTIMEdate_fromstr(date *ret, str *s);
str MTIMEdate_sub_msec_interval_lng_wrap(date *ret, date *t, lng *msec);
str MTIMEdate_sub_sec_interval_wrap(date *ret, date *t, int *sec);
str MTIMEdate_tostr(str *ret, date *d);
str MTIMEday_from_str(int *ret, str *day);
str MTIMEday_to_str(str *ret, int *day);
str MTIMEdaytime1(daytime *ret, int *h);
str MTIMEdaytime2(daytime *ret, int *h, int *m);
str MTIMEdaytime2daytime(daytime *ret, daytime *src);
str MTIMEdaytime3(daytime *ret, int *h, int *m, int *s);
str MTIMEdaytime_create(daytime *ret, int *hour, int *min, int *sec, int *msec);
str MTIMEdaytime_extract_hours(int *ret, daytime *v);
str MTIMEdaytime_extract_hours_bulk(int *ret, int *bid);
str MTIMEdaytime_extract_milliseconds(int *ret, daytime *v);
str MTIMEdaytime_extract_milliseconds_bulk(int *ret, int *bid);
str MTIMEdaytime_extract_minutes(int *ret, daytime *v);
str MTIMEdaytime_extract_minutes_bulk(int *ret, int *bid);
str MTIMEdaytime_extract_seconds(int *ret, daytime *v);
str MTIMEdaytime_extract_seconds_bulk(int *ret, int *bid);
str MTIMEdaytime_extract_sql_seconds(int *ret, daytime *v);
str MTIMEdaytime_extract_sql_seconds_bulk(int *ret, int *bid);
str MTIMEdaytime_fromstr(daytime *ret, str *s);
str MTIMEdaytime_tostr(str *ret, daytime *d);
str MTIMEepilogue(void);
str MTIMEepoch(timestamp *ret);
str MTIMEepoch2int(int *res, timestamp *ts);
str MTIMElocal_timezone(lng *res);
str MTIMEmonth_from_str(int *ret, str *month);
str MTIMEmonth_to_str(str *ret, int *month);
str MTIMEmsec(lng *r);
str MTIMEmsecs(lng *ret, int *d, int *h, int *m, int *s, int *ms);
str MTIMEnil2date(date *ret, int *src);
str MTIMEolddate(date *d, str *buf);
str MTIMEoldduration(int *ndays, str *s);
str MTIMEprelude(void);
str MTIMEruleDef0(rule *ret, int *m, int *d, int *w, int *h, int *mint);
str MTIMEruleDef1(rule *ret, int *m, str *dnme, int *w, int *h, int *mint);
str MTIMEruleDef2(rule *ret, int *m, str *dnme, int *w, int *mint);
str MTIMErule_create(rule *ret, int *month, int *day, int *weekday, int *minutes);
str MTIMErule_extract_day(int *ret, rule *r);
str MTIMErule_extract_minutes(int *ret, rule *r);
str MTIMErule_extract_month(int *ret, rule *r);
str MTIMErule_extract_weekday(int *ret, rule *r);
str MTIMErule_fromstr(rule *ret, str *s);
str MTIMErule_fromstr(rule *ret, str *s);
str MTIMErule_tostr(str *s, rule *r);
str MTIMEsecs2daytime(daytime *ret, lng *src);
str MTIMEsql_day(lng *ret, lng *t);
str MTIMEsql_hours(int *ret, lng *t);
str MTIMEsql_minutes(int *ret, lng *t);
str MTIMEsql_month(int *ret, int *t);
str MTIMEsql_seconds(int *ret, lng *t);
str MTIMEsql_year(int *ret, int *t);
str MTIMEstrftime(str *s, date *d, str *format);
str MTIMEstrptime(date *d, str *s, str *format);
str MTIMEsynonyms(bit *allow);
str MTIMEtime_add_msec_interval_wrap(daytime *ret, daytime *t, lng *msec);
str MTIMEtime_sub_msec_interval_wrap(daytime *ret, daytime *t, lng *msec);
str MTIMEtimestamp(timestamp *ret, int *sec);
str MTIMEtimestamp2timestamp(timestamp *ret, timestamp *src);
str MTIMEtimestamp_GE(bit *retval, timestamp *val1, timestamp *val2);
str MTIMEtimestamp_GT(bit *retval, timestamp *val1, timestamp *val2);
str MTIMEtimestamp_LE(bit *retval, timestamp *val1, timestamp *val2);
str MTIMEtimestamp_LT(bit *retval, timestamp *val1, timestamp *val2);
str MTIMEtimestamp_add(timestamp *ret, timestamp *v, lng *msecs);
str MTIMEtimestamp_add_month_interval_wrap(timestamp *ret, timestamp *t, int *months);
str MTIMEtimestamp_create(timestamp *ret, date *d, daytime *t, tzone *z);
str MTIMEtimestamp_create_default(timestamp *ret, date *d, daytime *t);
str MTIMEtimestamp_create_from_date(timestamp *ret, date *d);
str MTIMEtimestamp_day(int *ret, timestamp *t);
str MTIMEtimestamp_diff(lng *ret, timestamp *v1, timestamp *v2);
str MTIMEtimestamp_diff_bulk(bat *ret, bat *bid1, bat *bid2);
str MTIMEtimestamp_extract_date(date *ret, timestamp *t, tzone *z);
str MTIMEtimestamp_extract_date_default(date *ret, timestamp *t);
str MTIMEtimestamp_extract_daytime(daytime *ret, timestamp *t, tzone *z);
str MTIMEtimestamp_extract_daytime_default(daytime *ret, timestamp *t);
str MTIMEtimestamp_fromstr(timestamp *ret, str *d);
str MTIMEtimestamp_hours(int *ret, timestamp *t);
str MTIMEtimestamp_inside_dst(bit *ret, timestamp *p, tzone *z);
str MTIMEtimestamp_lng(timestamp *ret, lng *msecs);
str MTIMEtimestamp_milliseconds(int *ret, timestamp *t);
str MTIMEtimestamp_minutes(int *ret, timestamp *t);
str MTIMEtimestamp_month(int *ret, timestamp *t);
str MTIMEtimestamp_seconds(int *ret, timestamp *t);
str MTIMEtimestamp_sql_seconds(int *ret, timestamp *t);
str MTIMEtimestamp_sub_month_interval_wrap(timestamp *ret, timestamp *t, int *months);
str MTIMEtimestamp_sub_msec_interval_lng_wrap(timestamp *ret, timestamp *t, lng *msec);
str MTIMEtimestamp_timestamp(timestamp *d, timestamp *s);
str MTIMEtimestamp_year(int *ret, timestamp *t);
str MTIMEtimezone(tzone *z, str *name);
str MTIMEtzone_create(tzone *ret, int *minutes);
str MTIMEtzone_create_dst(tzone *ret, int *minutes, rule *start, rule *end);
str MTIMEtzone_extract_end(rule *ret, tzone *t);
str MTIMEtzone_extract_minutes(int *ret, tzone *t);
str MTIMEtzone_extract_start(rule *ret, tzone *t);
str MTIMEtzone_fromstr(tzone *ret, str *s);
str MTIMEtzone_get_local(tzone *z);
str MTIMEtzone_isnil(bit *retval, tzone *val);
str MTIMEtzone_set_local(int res, tzone *z);
str MTIMEtzone_tostr(str *s, tzone *ret);
str MTIMEunix_epoch(timestamp *ret);
str OCTOPUSbidding(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OCTOPUSconnect(str *c, str *dbname);
str OCTOPUSdiscoverRegister(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OCTOPUSgetVersion(int *res);
str OCTOPUSmakeSchedule(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OCTOPUSregister(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OCTOPUSrun(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int OPTaccumulatorsImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
void OPTaliasRemap(InstrPtr p, int *alias);
int OPTaliasesImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int OPTcentipedeImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTcentipedeMaterialize(int *result, int *bid, ptr low, ptr high);
int OPTclusterImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int OPTcoercionImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int OPTcommonTermsImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int OPTcompressionImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int OPTconstantsImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int OPTcostModelImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int OPTdataflowImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int OPTdeadcodeImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int OPTdictionaryImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int OPTdumpQEPImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int OPTemptySetImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int OPTevaluateImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int OPTfactorizeImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTforgetPrevious(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int OPTgarbageCollectorImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int OPTgroupsImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int OPThistoryImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int OPTinlineImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int OPTisAlias(InstrPtr p);
int OPTjoinPathImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OPTlegAdvice(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int OPTlegAdviceInternal(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTmacro(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int OPTmacroImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int OPTmapreduceImplementation(Client cntxt, MalBlkPtr reduce, MalStkPtr stk, InstrPtr pc);
int OPTmatpackImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int OPTmergetableImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int OPTmitosisImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int OPTmultiplexImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTmultiplexSimple(Client cntxt);
int OPToctopusImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTorcam(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int OPTorcamImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int OPToriginImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTpeers(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int OPTprejoinImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int OPTpushrangesImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int OPTpushselectImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int OPTrecyclerImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int OPTreduceImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int OPTremapImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTremapMultiplex(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int OPTremoteQueriesImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int OPTreorderImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str OPTsetDebugStr(int *ret, str *nme);
int OPTstrengthReductionImplementation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTvector(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTvectorOid(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str OPTwrapper(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str PCREcompile_wrap(pcre **res, str *pattern);
str PCREexec_wrap(bit *res, pcre *pattern, str *s);
str PCREfromstr(str instr, int *l, pcre **val);
str PCREilike2(bit *ret, str *s, str *pat);
str PCREilike3(bit *ret, str *s, str *pat, str *esc);
str PCREilike_join_pcre(int *l, int *r, int *b, int *pat, str *esc);
str PCREilike_select_pcre(int *ret, int *b, str *pat, str *esc);
str PCREilike_uselect_pcre(int *ret, int *b, str *pat, str *esc);
str PCREimatch(bit *ret, str *val, str *pat);
str PCREindex(int *ret, pcre *pat, str *val);
str PCRElike2(bit *ret, str *s, str *pat);
str PCRElike3(bit *ret, str *s, str *pat, str *esc);
str PCRElike_join_pcre(int *l, int *r, int *b, int *pat, str *esc);
str PCRElike_select_pcre(int *ret, int *b, str *pat, str *esc);
str PCRElike_uselect_pcre(int *ret, int *b, str *pat, str *esc);
str PCRElikesubselect1(bat *ret, bat *bid, str *pat, str *esc, bit *caseignore, bit *anti);
str PCRElikesubselect2(bat *ret, bat *bid, bat *sid, str *pat, str *esc, bit *caseignore, bit *anti);
str PCREmatch(bit *ret, str *val, str *pat);
str PCREnotilike2(bit *ret, str *s, str *pat);
str PCREnotilike3(bit *ret, str *s, str *pat, str *esc);
str PCREnotlike2(bit *ret, str *s, str *pat);
str PCREnotlike3(bit *ret, str *s, str *pat, str *esc);
str PCREpatindex(int *ret, str *pat, str *val);
str PCREquote(str *r, str *v);
str PCREreplace_bat_wrap(int *res, int *or, str *pat, str *repl, str *flags);
str PCREreplace_wrap(str *res, str *or, str *pat, str *repl, str *flags);
str PCREselect(int *res, str *pattern, int *bid, bit *ignore);
str PCREselectDef(int *res, str *pattern, int *bid);
str PCREsql2pcre(str *ret, str *pat, str *esc);
str PCREuselect(int *res, str *pattern, int *bid, bit *ignore);
str PCREuselectDef(int *res, str *pattern, int *bid);
str PQdequeue_anymax(int *ret, int *bid);
str PQdequeue_anymin(int *ret, int *bid);
str PQdequeue_btemax(int *ret, int *bid);
str PQdequeue_btemin(int *ret, int *bid);
str PQdequeue_dblmax(int *ret, int *bid);
str PQdequeue_dblmin(int *ret, int *bid);
str PQdequeue_fltmax(int *ret, int *bid);
str PQdequeue_fltmin(int *ret, int *bid);
str PQdequeue_intmax(int *ret, int *bid);
str PQdequeue_intmin(int *ret, int *bid);
str PQdequeue_lngmax(int *ret, int *bid);
str PQdequeue_lngmin(int *ret, int *bid);
str PQdequeue_oidmax(int *ret, int *bid);
str PQdequeue_oidmin(int *ret, int *bid);
str PQdequeue_shtmax(int *ret, int *bid);
str PQdequeue_shtmin(int *ret, int *bid);
str PQdequeue_wrdmax(int *ret, int *bid);
str PQdequeue_wrdmin(int *ret, int *bid);
str PQenqueue_anymax(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str PQenqueue_anymin(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str PQenqueue_btemax(int *ret, int *bid, oid *idx, bte *el);
str PQenqueue_btemin(int *ret, int *bid, oid *idx, bte *el);
str PQenqueue_dblmax(int *ret, int *bid, oid *idx, dbl *el);
str PQenqueue_dblmin(int *ret, int *bid, oid *idx, dbl *el);
str PQenqueue_fltmax(int *ret, int *bid, oid *idx, flt *el);
str PQenqueue_fltmin(int *ret, int *bid, oid *idx, flt *el);
str PQenqueue_intmax(int *ret, int *bid, oid *idx, int *el);
str PQenqueue_intmin(int *ret, int *bid, oid *idx, int *el);
str PQenqueue_lngmax(int *ret, int *bid, oid *idx, lng *el);
str PQenqueue_lngmin(int *ret, int *bid, oid *idx, lng *el);
str PQenqueue_oidmax(int *ret, int *bid, oid *idx, oid *el);
str PQenqueue_oidmin(int *ret, int *bid, oid *idx, oid *el);
str PQenqueue_shtmax(int *ret, int *bid, oid *idx, sht *el);
str PQenqueue_shtmin(int *ret, int *bid, oid *idx, sht *el);
str PQenqueue_wrdmax(int *ret, int *bid, oid *idx, wrd *el);
str PQenqueue_wrdmin(int *ret, int *bid, oid *idx, wrd *el);
str PQinit(int *ret, int *bid, wrd *maxsize);
str PQmovedowntop_anymax(int *ret, int *bid);
str PQmovedowntop_anymin(int *ret, int *bid);
str PQmovedowntop_btemax(int *ret, int *bid);
str PQmovedowntop_btemin(int *ret, int *bid);
str PQmovedowntop_dblmax(int *ret, int *bid);
str PQmovedowntop_dblmin(int *ret, int *bid);
str PQmovedowntop_fltmax(int *ret, int *bid);
str PQmovedowntop_fltmin(int *ret, int *bid);
str PQmovedowntop_intmax(int *ret, int *bid);
str PQmovedowntop_intmin(int *ret, int *bid);
str PQmovedowntop_lngmax(int *ret, int *bid);
str PQmovedowntop_lngmin(int *ret, int *bid);
str PQmovedowntop_oidmax(int *ret, int *bid);
str PQmovedowntop_oidmin(int *ret, int *bid);
str PQmovedowntop_shtmax(int *ret, int *bid);
str PQmovedowntop_shtmin(int *ret, int *bid);
str PQmovedowntop_wrdmax(int *ret, int *bid);
str PQmovedowntop_wrdmin(int *ret, int *bid);
str PQtopn2_anymax(int *ret, int *aid, int *bid, wrd *N);
str PQtopn2_anymin(int *ret, int *aid, int *bid, wrd *N);
str PQtopn2_btemax(int *ret, int *aid, int *bid, wrd *N);
str PQtopn2_btemin(int *ret, int *aid, int *bid, wrd *N);
str PQtopn2_dblmax(int *ret, int *aid, int *bid, wrd *N);
str PQtopn2_dblmin(int *ret, int *aid, int *bid, wrd *N);
str PQtopn2_fltmax(int *ret, int *aid, int *bid, wrd *N);
str PQtopn2_fltmin(int *ret, int *aid, int *bid, wrd *N);
str PQtopn2_intmax(int *ret, int *aid, int *bid, wrd *N);
str PQtopn2_intmin(int *ret, int *aid, int *bid, wrd *N);
str PQtopn2_lngmax(int *ret, int *aid, int *bid, wrd *N);
str PQtopn2_lngmin(int *ret, int *aid, int *bid, wrd *N);
str PQtopn2_oidmax(int *ret, int *aid, int *bid, wrd *N);
str PQtopn2_oidmin(int *ret, int *aid, int *bid, wrd *N);
str PQtopn2_shtmax(int *ret, int *aid, int *bid, wrd *N);
str PQtopn2_shtmin(int *ret, int *aid, int *bid, wrd *N);
str PQtopn2_wrdmax(int *ret, int *aid, int *bid, wrd *N);
str PQtopn2_wrdmin(int *ret, int *aid, int *bid, wrd *N);
str PQtopn_anymax(int *ret, int *bid, wrd *N);
str PQtopn_anymin(int *ret, int *bid, wrd *N);
str PQtopn_btemax(int *ret, int *bid, wrd *N);
str PQtopn_btemin(int *ret, int *bid, wrd *N);
str PQtopn_dblmax(int *ret, int *bid, wrd *N);
str PQtopn_dblmin(int *ret, int *bid, wrd *N);
str PQtopn_fltmax(int *ret, int *bid, wrd *N);
str PQtopn_fltmin(int *ret, int *bid, wrd *N);
str PQtopn_intmax(int *ret, int *bid, wrd *N);
str PQtopn_intmin(int *ret, int *bid, wrd *N);
str PQtopn_lngmax(int *ret, int *bid, wrd *N);
str PQtopn_lngmin(int *ret, int *bid, wrd *N);
str PQtopn_oidmax(int *ret, int *bid, wrd *N);
str PQtopn_oidmin(int *ret, int *bid, wrd *N);
str PQtopn_shtmax(int *ret, int *bid, wrd *N);
str PQtopn_shtmin(int *ret, int *bid, wrd *N);
str PQtopn_wrdmax(int *ret, int *bid, wrd *N);
str PQtopn_wrdmin(int *ret, int *bid, wrd *N);
str PQtopreplace_anymax(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str PQtopreplace_anymin(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str PQtopreplace_btemax(int *ret, int *bid, oid *idx, bte *el);
str PQtopreplace_btemin(int *ret, int *bid, oid *idx, bte *el);
str PQtopreplace_dblmax(int *ret, int *bid, oid *idx, dbl *el);
str PQtopreplace_dblmin(int *ret, int *bid, oid *idx, dbl *el);
str PQtopreplace_fltmax(int *ret, int *bid, oid *idx, flt *el);
str PQtopreplace_fltmin(int *ret, int *bid, oid *idx, flt *el);
str PQtopreplace_intmax(int *ret, int *bid, oid *idx, int *el);
str PQtopreplace_intmin(int *ret, int *bid, oid *idx, int *el);
str PQtopreplace_lngmax(int *ret, int *bid, oid *idx, lng *el);
str PQtopreplace_lngmin(int *ret, int *bid, oid *idx, lng *el);
str PQtopreplace_oidmax(int *ret, int *bid, oid *idx, oid *el);
str PQtopreplace_oidmin(int *ret, int *bid, oid *idx, oid *el);
str PQtopreplace_shtmax(int *ret, int *bid, oid *idx, sht *el);
str PQtopreplace_shtmin(int *ret, int *bid, oid *idx, sht *el);
str PQtopreplace_wrdmax(int *ret, int *bid, oid *idx, wrd *el);
str PQtopreplace_wrdmin(int *ret, int *bid, oid *idx, wrd *el);
str PQutopn2_anymax(int *ret, int *aid, int *bid, wrd *N);
str PQutopn2_anymin(int *ret, int *aid, int *bid, wrd *N);
str PQutopn2_btemax(int *ret, int *aid, int *bid, wrd *N);
str PQutopn2_btemin(int *ret, int *aid, int *bid, wrd *N);
str PQutopn2_dblmax(int *ret, int *aid, int *bid, wrd *N);
str PQutopn2_dblmin(int *ret, int *aid, int *bid, wrd *N);
str PQutopn2_fltmax(int *ret, int *aid, int *bid, wrd *N);
str PQutopn2_fltmin(int *ret, int *aid, int *bid, wrd *N);
str PQutopn2_intmax(int *ret, int *aid, int *bid, wrd *N);
str PQutopn2_intmin(int *ret, int *aid, int *bid, wrd *N);
str PQutopn2_lngmax(int *ret, int *aid, int *bid, wrd *N);
str PQutopn2_lngmin(int *ret, int *aid, int *bid, wrd *N);
str PQutopn2_oidmax(int *ret, int *aid, int *bid, wrd *N);
str PQutopn2_oidmin(int *ret, int *aid, int *bid, wrd *N);
str PQutopn2_shtmax(int *ret, int *aid, int *bid, wrd *N);
str PQutopn2_shtmin(int *ret, int *aid, int *bid, wrd *N);
str PQutopn2_wrdmax(int *ret, int *aid, int *bid, wrd *N);
str PQutopn2_wrdmin(int *ret, int *aid, int *bid, wrd *N);
str PQutopn_anymax(int *ret, int *bid, wrd *N);
str PQutopn_anymin(int *ret, int *bid, wrd *N);
str PQutopn_btemax(int *ret, int *bid, wrd *N);
str PQutopn_btemin(int *ret, int *bid, wrd *N);
str PQutopn_dblmax(int *ret, int *bid, wrd *N);
str PQutopn_dblmin(int *ret, int *bid, wrd *N);
str PQutopn_fltmax(int *ret, int *bid, wrd *N);
str PQutopn_fltmin(int *ret, int *bid, wrd *N);
str PQutopn_intmax(int *ret, int *bid, wrd *N);
str PQutopn_intmin(int *ret, int *bid, wrd *N);
str PQutopn_lngmax(int *ret, int *bid, wrd *N);
str PQutopn_lngmin(int *ret, int *bid, wrd *N);
str PQutopn_oidmax(int *ret, int *bid, wrd *N);
str PQutopn_oidmin(int *ret, int *bid, wrd *N);
str PQutopn_shtmax(int *ret, int *bid, wrd *N);
str PQutopn_shtmin(int *ret, int *bid, wrd *N);
str PQutopn_wrdmax(int *ret, int *bid, wrd *N);
str PQutopn_wrdmin(int *ret, int *bid, wrd *N);
sht PropertyIndex(str name);
str PropertyName(sht idx);
prop_op_t PropertyOperator(str s);
str PropertyOperatorString(prop_op_t op);
str QOTclrdebugOptimizers(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str QOTdebugOptimizers(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str QOTgetStatistics(int *ret, str *nme);
str QOToptimize(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str QOTshowFlowGraph(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str QOTshowPlan(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
void QOTstatisticsExit(void);
void QOTupdateStatistics(str nme, int prop, lng val);
str RECYCLEdumpQPatWrap(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str RECYCLEdumpWrap(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int RECYCLEentry(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str RECYCLEepilogue(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
void RECYCLEexit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p, lng ticks);
str RECYCLEgetAdmission(int *p);
str RECYCLEgetCache(int *p);
bte RECYCLEgetQryCat(int qidx);
str RECYCLEgetReuse(int *p);
void RECYCLEinit(void);
void RECYCLEinitQPat(int sz);
int RECYCLEinterest(InstrPtr p);
str RECYCLElog(int *d, str *nm);
str RECYCLEmonitor(int *d, int *p);
int RECYCLEnewQryStat(MalBlkPtr mb);
str RECYCLEprelude(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
void RECYCLEreset(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str RECYCLEresetCMD(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str RECYCLEsetAdmission(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str RECYCLEsetCache(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str RECYCLEsetReuse(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
void RECYCLEshutdown(Client cntxt);
str RECYCLEshutdownWrap(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str RECYCLEstart(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str RECYCLEstop(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str RMTbatload(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str RMTbincopyfrom(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str RMTbincopyto(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str RMTbintype(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str RMTconnect(str *ret, str *uri, str *user, str *passwd);
str RMTconnectScen(str *ret, str *ouri, str *user, str *passwd, str *scen);
str RMTdisconnect(Client cntxt, str *conn);
str RMTepilogue(int *ret);
str RMTexec(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str RMTget(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str RMTisalive(int *ret, str *conn);
str RMTprelude(int *ret);
str RMTput(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str RMTregister(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str RMTregisterInternal(Client cntxt, str conn, str mod, str fcn);
str RMTresolve(int *ret, str *pat);
str RUNadder(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str RUNchoice(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str RUNcostPrediction(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str RUNisolation(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str RUNpickResult(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str RUNvolumeCost(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str SABAOTHdeserialise(sabdb **ret, str *sabdb);
str SABAOTHfreeStatus(sabdb **ret);
str SABAOTHgetDBfarm(str *ret);
str SABAOTHgetDBname(str *ret);
str SABAOTHgetLocalConnection(str *ret);
str SABAOTHgetMyStatus(sabdb **ret);
str SABAOTHgetStatus(sabdb **ret, str dbname);
str SABAOTHgetUplogInfo(sabuplog *ret, sabdb *db);
str SABAOTHmarchConnection(int *ret, str *host, int *port);
str SABAOTHmarchScenario(int *ret, str *lang);
str SABAOTHretreatScenario(int *ret, str *lang);
str SABAOTHserialise(str *ret, sabdb *db);
str SABepilogue(int *ret);
str SABgetLocalConnectionHost(str *ret);
str SABgetLocalConnectionPort(int *ret);
str SABgetLocalConnectionURI(str *ret);
str SABmarchConnection(int *ret, str *host, int *port);
str SABmarchScenario(int *ret, str *lang);
str SABprelude(int *ret);
str SABretreatScenario(int *ret, str *lang);
str SAMPLEuniform(bat *r, bat *b, ptr s);
str SAMPLEuniform_dbl(bat *r, bat *b, ptr p);
str SEMAcreate(monet_sema *res, int *init);
str SEMAdestroy(int *res, monet_sema *s);
str SEMAdown(int *res, monet_sema *s);
str SEMAup(int *res, monet_sema *s);
str SERVERbindBAT(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str SERVERclient(int *res, stream **In, stream **Out);
str SERVERconnect(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pc);
str SERVERdestroy(int *ret, int *mid);
str SERVERdisconnect(int *ret, int *mid);
str SERVERdisconnectALL(int *ret);
str SERVERdisconnectWithAlias(int *ret, str *db_alias);
str SERVERerror(int *ret, int *idx);
str SERVERexecute(int *ret, int *idx);
void SERVERexit(void);
str SERVERexplain(str *ret, int *idx);
str SERVERfetch_all_rows(lng *ret, int *idx);
str SERVERfetch_field_bat(int *bid, int *idx);
str SERVERfetch_field_bte(bte *ret, int *idx, int *fnr);
str SERVERfetch_field_int(int *ret, int *idx, int *fnr);
str SERVERfetch_field_lng(lng *ret, int *idx, int *fnr);
str SERVERfetch_field_oid(oid *ret, int *idx, int *fnr);
str SERVERfetch_field_sht(sht *ret, int *idx, int *fnr);
str SERVERfetch_field_str(str *ret, int *idx, int *fnr);
str SERVERfetch_field_void(oid *ret, int *idx, int *fnr);
str SERVERfetch_line(str *ret, int *key);
str SERVERfetch_reset(int *ret, int *key);
str SERVERfetch_row(int *ret, int *idx);
str SERVERfinish(int *ret, int *idx);
str SERVERgetError(str *ret, int *idx);
str SERVERget_field_count(int *ret, int *idx);
str SERVERget_row_count(lng *ret, int *idx);
str SERVERlisten(int *Port, str *Usockfile, int *Maxusers);
str SERVERlisten_default(int *ret);
str SERVERlisten_port(int *ret, int *pid);
str SERVERlisten_usock(int *ret, str *usock);
str SERVERlookup(int *ret, str *dbalias);
str SERVERmapi_rpc_bat(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str SERVERmapi_rpc_single_bat(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str SERVERmapi_rpc_single_row(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str SERVERnext_result(int *ret, int *key);
str SERVERping(int *ret, int *mid);
str SERVERprepare(int *ret, int *key, str *qry);
str SERVERput(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str SERVERputLocal(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str SERVERquery(int *ret, int *mid, str *qry);
str SERVERquery_array(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pc);
str SERVERquery_handle(int *ret, int *mid, str *qry);
str SERVERreconnect(int *ret, int *mid);
str SERVERreconnectAlias(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pc);
str SERVERreconnectWithoutAlias(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pc);
str SERVERresume(int *ret);
str SERVERrows_affected(lng *ret, int *idx);
str SERVERsetAlias(int *ret, int *mid, str *dbalias);
str SERVERstop(int *ret);
str SERVERsuspend(int *ret);
str SERVERtrace(int *ret, int *mid, int *flag);
int SQLBLOBfromstr(char *instr, int *l, blob **val);
int SQLBLOBtostr(str *tostr, int *l, blob *pin);
BUN SQLload_file(Client cntxt, Tablet *as, bstream *b, stream *out, char *csep, char *rsep, char quote, lng skip, lng maxrow);
str SRVPOOLconnect(str *c, str *dbname);
str SRVPOOLexec(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str SRVPOOLlocal(int *res, int *flag);
str SRVPOOLquery(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str SRVPOOLregister(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str SRVPOOLreset(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str SRVPOOLscheduler(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str SRVsetServers(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str STRBytes(int *res, str *arg1);
str STRConcat(str *res, str *val1, str *val2);
str STRFromWChr(str *res, int *at);
str STRIconv(str *res, str *o, str *fp, str *tp);
str STRLength(int *res, str *arg1);
str STRLower(str *res, str *arg1);
str STRLtrim(str *res, str *arg1);
str STRPrefix(bit *res, str *arg1, str *arg2);
str STRReverseStrSearch(int *res, str *arg1, str *arg2);
str STRRtrim(str *res, str *arg1);
str STRStrip(str *res, str *arg1);
str STRSubString(str *res, str *arg1, int *offset, int *length);
str STRSubstitute(str *res, str *arg1, str *arg2, str *arg3, bit *g);
str STRSuffix(bit *res, str *arg1, str *arg2);
str STRTail(str *res, str *arg1, int *offset);
str STRUpper(str *res, str *arg1);
str STRWChrAt(int *res, str *arg1, int *at);
str STRascii(int *ret, str *s);
str STRbatBytes(int *ret, int *l);
str STRbatConcat(int *ret, int *l, int *r);
str STRbatConcatcst(int *ret, int *l, str *cst);
str STRbatLength(int *ret, int *l);
str STRbatLower(int *ret, int *l);
str STRbatLtrim(int *ret, int *l);
str STRbatPrefix(int *ret, int *l, int *r);
str STRbatPrefixcst(int *ret, int *l, str *cst);
str STRbatRstrSearch(int *ret, int *l, int *r);
str STRbatRstrSearchcst(int *ret, int *l, str *cst);
str STRbatRtrim(int *ret, int *l);
str STRbatStrip(int *ret, int *l);
str STRbatSubstitutecst(int *ret, int *l, str *arg2, str *arg3, bit *rep);
str STRbatSubstitutecst(int *ret, int *l, str *arg2, str *arg3, bit *rep);
str STRbatSuffix(int *ret, int *l, int *r);
str STRbatSuffixcst(int *ret, int *l, str *cst);
str STRbatTail(int *ret, int *l, int *r);
str STRbatTailcst(int *ret, int *l, int *cst);
str STRbatUpper(int *ret, int *l);
str STRbatWChrAt(int *ret, int *l, int *r);
str STRbatWChrAtcst(int *ret, int *l, int *cst);
str STRbatlike_uselect(int *ret, int *bid, str *pat, str *esc);
str STRbatlike_uselect(int *ret, int *bid, str *pat, str *esc);
str STRbatlike_uselect(int *ret, int *bid, str *pat, str *esc);
str STRbatlike_uselect2(int *ret, int *bid, str *pat);
str STRbatlike_uselect2(int *ret, int *bid, str *pat);
str STRbatlike_uselect2(int *ret, int *bid, str *pat);
str STRbatreplace(int *ret, int *l, str *pat, str *s2);
str STRbatreplace(int *ret, int *l, str *pat, str *s2);
str STRbatreplace(int *ret, int *l, str *pat, str *s2);
str STRbatstrSearch(int *ret, int *l, int *r);
str STRbatstrSearchcst(int *ret, int *l, str *cst);
str STRbatstringLength(int *ret, int *l);
str STRbatsubstring(int *ret, int *l, int *r, int *t);
str STRbatsubstring(int *ret, int *l, int *r, int *t);
str STRbatsubstring(int *ret, int *l, int *r, int *t);
str STRbatsubstringcst(int *ret, int *bid, int *start, int *length);
str STRbatsubstringcst(int *ret, int *bid, int *start, int *length);
str STRbatsubstringcst(int *ret, int *bid, int *start, int *length);
str STRcodeset(str *res);
str STRcstConcatbat(int *ret, str *cst, int *r);
str STRcstPrefixbat(int *ret, str *cst, int *r);
str STRcstRstrSearchbat(int *ret, str *cst, int *r);
str STRcstSuffixbat(int *ret, str *cst, int *r);
str STRcststrSearchbat(int *ret, str *cst, int *r);
str STRfindUnescapedOccurrence(str b, str c, str esc);
str STRinsert(str *ret, str *s, int *start, int *l, str *s2);
int STRlike(str s, str pat, str esc);
str STRlikewrap(bit *ret, str *s, str *pat, str *esc);
str STRlikewrap2(bit *ret, str *s, str *pat);
str STRlocate(int *ret, str *s1, str *s2);
str STRlocate2(int *ret, str *s1, str *s2, int *start);
str STRmax(str *res, str *left, str *right);
str STRmax_no_nil(str *res, str *left, str *right);
str STRmin(str *res, str *left, str *right);
str STRmin_no_nil(str *res, str *left, str *right);
str STRprefix(str *ret, str *s, int *l);
str STRrepeat(str *ret, str *s, int *c);
str STRreplace(str *ret, str *s1, str *s2, str *s3);
str STRspace(str *ret, int *l);
str STRstrSearch(int *res, str *arg1, str *arg2);
str STRstringLength(int *res, str *s);
str STRsubstring(str *ret, str *s, int *start, int *l);
str STRsubstringTail(str *ret, str *s, int *start);
str STRsuffix(str *ret, str *s, int *l);
str STRtostr(str *res, str *src);
str SYScpuStatistics(int *ret, int *ret2);
str SYSgdkEnv(int *ret, int *ret2);
str SYSgdkThread(int *ret, int *ret2);
str SYSgetmem_cursize(lng *num);
str SYSgetmem_maxsize(lng *num);
str SYSgetvm_cursize(lng *num);
str SYSgetvm_maxsize(lng *num);
str SYSioStatistics(int *ret, int *ret2);
str SYSmemStatistics(int *ret, int *ret2);
str SYSmem_usage(int *ret, int *ret2, lng *minsize);
str SYSsetmem_maxsize(int *ret, lng *num);
str SYSsetvm_maxsize(lng *num);
str SYSvm_usage(int *ret, int *ret2, lng *minsize);
ptr *TABLETadt_frStr(Column *c, int type, char *s, char *e, char quote);
int TABLETadt_toStr(void *extra, char **buf, int *len, int type, ptr a);
BAT **TABLETcollect(Tablet *as);
BAT **TABLETcollect_parts(Tablet *as, BUN offset);
int TABLETcreate_bats(Tablet *as, BUN est);
void TABLETdestroy_format(Tablet *as);
int TABLEToutput_file(Tablet *as, BAT *order, stream *s);
ptr *TABLETstrFrStr(Column *c, char *s, char *e);
str TKNZRappend(oid *pos, str *tuple);
str TKNZRclose(int *r);
str TKNZRdepositFile(int *r, str *fnme);
str TKNZRgetCardinality(int *r);
str TKNZRgetCount(int *r);
str TKNZRgetIndex(int *r);
str TKNZRgetLevel(int *r, int *level);
str TKNZRlocate(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str TKNZRopen(int *r, str *name);
str TKNZRtakeOid(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
void TRACEtable(BAT **r);
str TRADERmakeBid(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str TRADERmakeBids(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str TRNglobal_abort(bit *ret);
str TRNglobal_commit(bit *ret);
str TRNglobal_sync(bit *ret);
str TRNsub_commit(bit *ret, int *bid);
str TRNsubcommit(bit *ret, int *bid);
str TRNtrans_abort(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str TRNtrans_alpha(int *ret, int *bid);
str TRNtrans_clean(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str TRNtrans_commit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str TRNtrans_delta(int *ret, int *bid);
str TRNtrans_prev(int *ret, int *bid);
int TYPE_blob;
int TYPE_date;
int TYPE_daytime;
int TYPE_identifier;
int TYPE_rule;
int TYPE_sqlblob;
int TYPE_timestamp;
int TYPE_tzone;
int TYPE_xml;
str UNIXgetRSS(lng *res);
str UNIXgetenv(str *res, str *varname);
str UNIXsetenv(bit *res, str *name, str *value);
str UNIXsync(int *res);
str URLBOXclose(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str URLBOXdeposit(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str URLBOXdepositFile(int *r, str *fnme);
str URLBOXdestroy(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str URLBOXdiscard(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str URLBOXdiscardAll(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str URLBOXdiscardOid(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str URLBOXgetCardinality(int *r);
str URLBOXgetCount(int *r);
str URLBOXgetLevel(int *r, int *level);
str URLBOXgetNames(int *r);
str URLBOXgetSize(int *r);
str URLBOXhasMoreElements(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str URLBOXnewIterator(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str URLBOXopen(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str URLBOXprelude(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str URLBOXrelease(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str URLBOXreleaseAll(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str URLBOXreleaseOid(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str URLBOXtake(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str URLBOXtoString(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int URLfromString(str src, int *len, str *url);
str URLgetAnchor(str *retval, str *val);
str URLgetBasename(str *retval, str *t);
str URLgetContent(str *retval, str *Str1);
str URLgetContext(str *retval, str *val);
str URLgetDomain(str *retval, str *tv);
str URLgetExtension(str *retval, str *tv);
str URLgetFile(str *retval, str *tv);
str URLgetHost(str *retval, str *tv);
str URLgetPort(str *retval, str *tv);
str URLgetProtocol(str *retval, str *tv);
str URLgetQuery(str *retval, str *tv);
str URLgetRobotURL(str *retval, str *tv);
str URLgetUser(str *retval, str *tv);
str URLisaURL(bit *retval, str *tv);
str URLnew(str *url, str *val);
str URLnew3(str *url, str *protocol, str *server, str *file);
str URLnew4(str *url, str *protocol, str *server, int *port, str *file);
str URLnoop(str *url, str *val);
int URLtoString(str *s, int *len, str src);
str XMLattribute(xml *ret, str *name, str *val);
str XMLcomment(xml *x, str *s);
str XMLconcat(xml *ret, xml *left, xml *right);
str XMLcontent(xml *x, str *s);
str XMLdocument(xml *x, str *s);
str XMLelement(xml *ret, str *name, xml *nspace, xml *attr, xml *val);
str XMLelementSmall(xml *ret, str *name, xml *val);
str XMLforest(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int XMLfromString(str src, int *len, xml *x);
str XMLisdocument(bit *x, str *s);
str XMLparse(xml *x, str *doccont, str *s, str *option);
str XMLpi(xml *x, str *target, str *s);
str XMLprelude(void);
size_t XMLquotestring(const char *s, char *buf, size_t len);
str XMLroot(str *x, str *v, str *version, str *standalone);
str XMLstr2xml(xml *x, str *s);
int XMLtoString(str *s, int *len, xml src);
size_t XMLunquotestring(char **p, char q, char *buf);
str XMLxml2str(str *s, xml *x);
str XMLxml2xml(xml *x, xml *s);
str XMLxmltext(str *s, xml *x);
str ZORDbatdecode_int_oid(int *x, int *y, int *z);
str ZORDbatdecode_int_oid_x(int *x, int *z);
str ZORDbatdecode_int_oid_y(int *y, int *z);
str ZORDbatencode_int_oid(int *z, int *x, int *y);
str ZORDdecode_int_oid(int *x, int *y, oid *z);
str ZORDdecode_int_oid_x(int *x, oid *z);
str ZORDdecode_int_oid_y(int *y, oid *z);
str ZORDencode_int_oid(oid *z, int *x, int *y);
str ZORDslice_int(int *r, int *xb, int *yb, int *xt, int *yt);
void _initTrace(void);
str abortRef;
str activateCounter(str name);
str addOptimizerPipe(Client cntxt, MalBlkPtr mb, str name);
str addPipeDefinition(Client cntxt, str name, str pipe);
void addtoMalBlkHistory(MalBlkPtr mb, str marker);
int admissionPolicy;
str affectedRowsRef;
str aggrRef;
str alarmRef;
str algebraRef;
int allTargetsVisible(MalBlkPtr mb, Lifespan span, int pc, int qc);
str antijoinRef;
str antiuselectRef;
str appendRef;
str appendidxRef;
str assertRef;
str attachRef;
str avgRef;
str bandjoinRef;
str basketRef;
void batAfterCall(ValPtr v, ValPtr bak);
void batBeforeCall(ValPtr v, ValPtr bak);
str batRef;
str batcalcRef;
str batmmathRef;
str batmtimeRef;
str batstrRef;
str bbpRef;
int bindBAT(Box box, str name, str location);
str bindRef;
str binddbatRef;
str bindidxRef;
var_t blobsize(size_t nitems);
str boxRef;
str bpmRef;
str bstreamRef;
int bstream_create_wrap(Bstream *BS, Stream *S, int *bufsize);
str bstream_create_wrapwrap(Bstream *Bs, Stream *S, int *bufsize);
int bstream_destroy_wrap(Bstream *BS);
str bstream_destroy_wrapwrap(int *ret, Bstream *BS);
int bstream_read_wrap(int *res, Bstream *BS, int *size);
str bstream_read_wrapwrap(int *res, Bstream *BS, int *size);
str calcRef;
str callFactory(Client cntxt, MalBlkPtr mb, ValPtr argv[], char flag);
str callMAL(Client cntxt, MalBlkPtr mb, MalStkPtr *glb, ValPtr argv[], char debug);
int callString(Client c, str s, int listing);
int canBeCrackedProp;
int canBeJoinselectProp;
str catalogRef;
str catchKernelException(Client cntxt, str ret);
str centipedeRef;
int charCst(Client cntxt, ValPtr val);
void chkDeclarations(stream *out, MalBlkPtr mb);
void chkFlow(stream *out, MalBlkPtr mb);
void chkInstruction(stream *out, Module s, MalBlkPtr mb, InstrPtr p);
void chkProgram(stream *out, Module s, MalBlkPtr mb);
void chkTypes(stream *out, Module s, MalBlkPtr mb, int silent);
str cleanupProfiler(void);
void clearStack(MalStkPtr s);
void clearTrace(void);
void clearVariable(MalBlkPtr mb, int varid);
str clear_tableRef;
Symbol cloneFunction(stream *out, Module scope, Symbol proc, MalBlkPtr mb, InstrPtr p);
int cloneVariable(MalBlkPtr dst, MalBlkPtr src, int varid);
int closeBox(str name, int flag);
str closeProfilerStream(void);
str closeRef;
void clrAllTypes(MalBlkPtr mb);
void clrDeclarations(MalBlkPtr mb);
void clrFilter(Module cntxt, str mod, str fcn);
void clrFilterVariable(MalBlkPtr mb, int i);
void clrFunction(InstrPtr p);
void clrInstruction(InstrPtr p);
int codeset(str *res);
int color_fromstr(char *colorStr, int *len, color **c);
int color_tostr(char **colorStr, int *len, color *c);
str columnBindRef;
str columnRef;
str commitRef;
str compileOptimizer(Client cntxt, str name);
str compileString(Symbol *fcn, Client c, str s);
str compressRef;
str connectRef;
str constraintsRef;
str convertConstant(malType type, ValPtr vr);
InstrPtr copyInstruction(InstrPtr p);
MalBlkPtr copyMalBlk(MalBlkPtr mb);
void copyProperties(MalBlkPtr mb, int src, int dst);
str copyRef;
void copyVariable(MalBlkPtr dst, VarPtr v);
str copy_fromRef;
str countRef;
str count_no_nilRef;
int cpyConstant(MalBlkPtr mb, VarPtr vr);
str createException(enum malexception, const char *, _In_z_ _Printf_format_string_ const char *, ...) __attribute__((__format__(__printf__, 3, 4)));
str createRef;
str createScriptException(MalBlkPtr, int, enum malexception, const char *, _In_z_ _Printf_format_string_ const char *, ...) __attribute__((__format__(__printf__, 5, 6)));
str crossRef;
int cstToken(Client cntxt, ValPtr val);
str datacellRef;
str datacyclotronRef;
str dataflowRef;
int date_fromstr(str buf, int *len, date **d);
int date_tostr(str *buf, int *len, date *val);
int daytime_fromstr(str buf, int *len, daytime **ret);
int daytime_tostr(str *buf, int *len, daytime *val);
int daytime_tz_fromstr(str buf, int *len, daytime **ret);
str dblRef;
str deactivateCounter(str name);
void debugLifespan(Client cntxt, MalBlkPtr mb, Lifespan span);
void debugModule(stream *f, Module v, str nme);
str debugOptimizers(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
void debugParser(int i);
str debugScheduler(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str decompressRef;
int defConstant(MalBlkPtr mb, int type, ValPtr cst);
str defaultScenario(Client c);
void delArgument(InstrPtr p, int varid);
void delName(str nme, size_t len);
void delVariable(MalBlkPtr mb, int varid);
str deleteRef;
void deleteSymbol(Module scope, Symbol prg);
int deletesProp;
str deltaRef;
str dense_rank_grpRef;
int depositBox(Box box, str name, int type, ValPtr val);
str depositRef;
void deriveModule(Module scope, str nme);
str deriveRef;
malType destinationType(MalBlkPtr mb, InstrPtr p);
void destroyBox(str name);
str differenceRef;
int discardBox(Box box, str name);
str disconnectRef;
int displayModule(stream *f, Module v, str fcn, int listing);
str divRef;
void dumpExceptionsToStream(stream *out, str msg);
void dumpHelpTable(stream *f, Module s, str text, int flag);
void dumpManual(stream *f, Module v, int recursive);
void dumpManualFooter(stream *f);
void dumpManualHeader(stream *f);
void dumpManualHelp(stream *f, Module s, int recursive);
void dumpManualOverview(stream *f, Module v, int recursive);
void dumpManualSection(stream *f, Module v);
void dumpSearchTable(stream *f, str text);
void echoInput(Client cntxt);
str escape_str(str *retval, str s);
str evalFile(Client c, str fname, int listing);
str evalRef;
str exceptionToString(enum malexception);
str execRef;
void exitScenario(Client c);
void expandMacro(MalBlkPtr mb, InstrPtr p, MalBlkPtr mc);
void expandMalBlk(MalBlkPtr mb, int lines);
str expandRef;
str exportOperationRef;
int factoryHasFreeSpace(void);
int fcnBinder(stream *out, Module scope, MalBlkPtr mb, InstrPtr p);
str fcnDefinition(MalBlkPtr mb, InstrPtr p, str s, int flg, str base, size_t len);
int fileProp;
Box findBox(str name);
int findGDKtype(int type);
int findInstruction(Module scope, MalBlkPtr mb, InstrPtr pci);
Module findModule(Module scope, str name);
Scenario findScenario(str nme);
Symbol findSymbol(Module nspace, str mod, str fcn);
Symbol findSymbolInModule(Module v, str fcn);
int findTmpVariable(MalBlkPtr mb, int type);
int findVariable(MalBlkPtr mb, str name);
int findVariableLength(MalBlkPtr mb, str name, int len);
str finishFactory(Client cntxt, MalBlkPtr mb, InstrPtr pp, int pc);
void finishNamespace(void);
str finishRef;
Module fixModule(Module scope, str nme);
int fndConstant(MalBlkPtr mb, const ValRecord *cst, int depth);
void formatVolume(str buf, int len, lng vol);
void freeInstruction(InstrPtr p);
void freeMalBlk(MalBlkPtr mb);
void freeModule(Module cur);
void freeModuleList(Module cur);
void freeStack(MalStkPtr stk);
void freeSymbol(Symbol s);
void freeSymbolList(Symbol s);
void freeVariable(MalBlkPtr mb, int varid);
void fromdate(int n, int *d, int *m, int *y);
void fromtime(int n, int *hour, int *min, int *sec, int *msec);
str fstrcmp0_impl(dbl *ret, str *string1, str *string2);
str fstrcmp_impl(dbl *ret, str *string1, str *string2, dbl *minimum);
str function2str(MalBlkPtr mb, int flg);
void garbageCollector(Client cntxt, MalBlkPtr mb, MalStkPtr stk, int flag);
void garbageElement(Client cntxt, ValPtr v);
MALfcn getAddress(stream *out, str filename, str modnme, str fcnname, int silent);
str getArgDefault(MalBlkPtr mb, InstrPtr p, int idx);
ptr getArgReference(MalStkPtr stk, InstrPtr pci, int k);
int getBarrierEnvelop(MalBlkPtr mb);
int getBlockBegin(MalBlkPtr mb, int pc);
int getBlockExit(MalBlkPtr mb, int pc);
str getBoxName(Box box, lng i);
str getBoxNames(int *bid);
char *getConsoleInput(Client c, const char *prompt, int linemode, int exit_on_error);
lng getDiskReads(void);
lng getDiskSpace(void);
lng getDiskWrites(void);
str getExceptionMessage(str);
str getExceptionPlace(str);
enum malexception getExceptionType(str);
Scenario getFreeScenario(void);
Symbol getFunctionSymbol(Module scope, InstrPtr p);
char **getHelp(Module m, str pat, int flag);
char **getHelpMatch(char *pat);
MalBlkPtr getMalBlkHistory(MalBlkPtr mb, int idx);
MalBlkPtr getMalBlkMarker(MalBlkPtr mb, str marker);
lng getMemoryClaim(MalBlkPtr mb, MalStkPtr stk, int pc, int i, int flag);
str getName(str nme, size_t len);
int getPC(MalBlkPtr mb, InstrPtr p);
str getPipeCatalog(int *nme, int *def, int *stat);
str getPipeDefinition(str name);
stream *getProfilerStream(void);
str getRef;
str getRefName(MalBlkPtr mb, int i);
str getScenarioLanguage(Client c);
lng getSystemTime(void);
BAT *getTrace(str ev);
int getTraceType(str nme);
malType getType(MalBlkPtr mb, str nme);
str getTypeIdentifier(malType tpe);
int getTypeIndex(str nme, int len, int deftpe);
str getTypeName(malType tpe);
lng getUserTime(void);
str getVarName(MalBlkPtr mb, int i);
wrd getVarRows(MalBlkPtr mb, int v);
MalBlkPtr gotoMalBlkMarker(MalBlkPtr mb, str marker);
str grabRef;
str groupRef;
str groupbyRef;
str groupsRef;
int hasCommonResults(InstrPtr p, InstrPtr q);
int hasSameArguments(MalBlkPtr mb, InstrPtr p, InstrPtr q);
int hasSameSignature(MalBlkPtr mb, InstrPtr p, InstrPtr q, int stop);
int hasSideEffects(InstrPtr p, int strict);
int has_whitespace(char *sep);
str hashRef;
int headProp;
str histogramRef;
int hlbProp;
int horiginProp;
int hubProp;
int idLength(Client cntxt);
str identityRef;
str ifthenelseRef;
str ilikeRef;
str ilikeselectRef;
str ilikesubselectRef;
str ilikeuselectRef;
void initHeartbeat(void);
void initLibraries(void);
void initNamespace(void);
void initParser(void);
void initProfiler(MalBlkPtr mb);
int inlineMALblock(MalBlkPtr mb, int pc, MalBlkPtr mc);
int inlineProp;
str inplaceRef;
void insertInstruction(MalBlkPtr mb, InstrPtr p, int pc);
str insertRef;
void insertSymbol(Module scope, Symbol prg);
void insertToBox(Box box, str name, str val);
int insert_line(Tablet *as, char *line, ptr key, BUN col1, BUN col2);
int insertionsProp;
int instrFilter(InstrPtr pci, str mod, str fcn);
str instruction2str(MalBlkPtr mb, MalStkPtr stl, InstrPtr p, int hidden);
str instructionCall(MalBlkPtr mb, InstrPtr p, str s, str base, size_t len);
str intRef;
str intersectcandRef;
str ioRef;
str io_stderr(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str io_stdin(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str io_stdout(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int isAllScalar(MalBlkPtr mb, InstrPtr p);
int isAmbiguousType(int type);
bit isBindInstr(InstrPtr p);
int isBlocking(InstrPtr p);
int isDelta(InstrPtr q);
int isDependent(InstrPtr p, InstrPtr q);
int isDiffOp(InstrPtr q);
int isExceptionVariable(str nme);
int isFragmentGroup(InstrPtr q);
int isFragmentGroup2(InstrPtr q);
int isIdentifier(str s);
int isInvariant(MalBlkPtr mb, int pcf, int pcl, int varid);
int isLikeOp(InstrPtr q);
int isLoaded(str modulename);
int isLoopBarrier(MalBlkPtr mb, int pc);
int isMapOp(InstrPtr q);
int isMatJoinOp(InstrPtr q);
int isModuleDefined(Module scope, str name);
int isNotUsedIn(InstrPtr p, int start, int a);
int isOptimizerEnabled(MalBlkPtr mb, str opt);
int isOptimizerPipe(str name);
int isOrderby(InstrPtr q);
int isPreloaded(str nme);
int isProcedure(MalBlkPtr mb, InstrPtr p);
int isSideEffectFree(MalBlkPtr mb);
int isSlice(InstrPtr q);
int isSubSelect(InstrPtr q);
int isTmpName(str n);
int isTopn(InstrPtr q);
int isTypeName(str n);
int isUnsafeFunction(InstrPtr q);
int isUnsafeInstruction(InstrPtr q);
int isUpdateInstruction(InstrPtr p);
str iteratorRef;
str joinPathRef;
str joinRef;
str kdifferenceRef;
int keepProp;
str kunionRef;
str kuniqueRef;
str languageRef;
str lastline(Client cntxt);
str leftfetchjoinPathRef;
str leftfetchjoinRef;
str leftjoinPathRef;
str leftjoinRef;
str levenshtein_impl(int *result, str *s, str *t, int *insdel_cost, int *replace_cost, int *transpose_cost);
str levenshteinbasic2_impl(int *result, str *s, str *t);
str levenshteinbasic_impl(int *result, str *s, str *t);
str likeRef;
str likeselectRef;
str likesubselectRef;
str likeuselectRef;
void listFunction(stream *fd, MalBlkPtr mb, MalStkPtr stk, int flg, int first, int step);
str listRef;
void loadBox(str nme);
str loadLibrary(str modulename, int flag);
str lockRef;
int lockToStr(char **dst, int *len, ptr *src);
int log_abort_wrap(logger *L);
int log_bat_clear_wrap(logger *L, str nme);
int log_bat_persists_wrap(logger *L, BAT *b, str nme);
int log_bat_transient_wrap(logger *L, str nme);
int log_bat_wrap(logger *L, BAT *b, str nme);
int log_delta_wrap(logger *L, BAT *b, str nme);
int log_tend_wrap(logger *L);
int log_tstart_wrap(logger *L);
int logger_add_bat_wrap(int *bid, logger *L, BAT *b, str nme);
int logger_changes_wrap(int *r, logger *L);
int logger_cleanup_wrap(logger *L);
str logger_create_wrap(logger *L, int *debug, str *fn, str *dirname, int *version);
int logger_del_bat_wrap(logger *L, int *bid);
str logger_destroy_wrap(logger *L);
int logger_exit_wrap(logger *L);
int logger_find_bat_wrap(int *bid, logger *L, str nme);
int logger_restart_wrap(logger *L);
str lookupRef;
str mal2str(MalBlkPtr mb, int flg, int first, int last);
malType malAnyBatType(malType t1, malType t2);
int malAtomArray(int tpe, int idx);
void malAtomDefinition(stream *out, str name, int tpe);
int malAtomFixed(int size, int align, char *name);
int malAtomProperty(MalBlkPtr mb, InstrPtr pci);
int malAtomSize(int size, int align, char *name);
int malBootstrap(void);
str malCommandCall(MalStkPtr stk, InstrPtr pci);
void malGarbageCollector(MalBlkPtr mb);
str malInclude(Client c, str name, int listing);
str malLoadScript(Client c, str name, bstream **fdin);
int malProfileMode;
str malRef;
ClientRec *mal_clients;
MT_Lock mal_contextLock;
MT_Lock mal_copyLock;
MT_Lock mal_delayLock;
void mal_exit(void);
int mal_init(void);
MT_Lock mal_namespaceLock;
MT_Sema mal_parallelism;
MT_Lock mal_profileLock;
str mal_quote(const char *msg, size_t size);
MT_Lock mal_remoteLock;
void mal_unquote(char *msg);
str mapiRef;
str markHRef;
str markTRef;
str mark_grpRef;
str matRef;
str materializeRef;
str materializeRef;
aggrFun maxAggr;
str maxRef;
str max_no_nilRef;
void mdbClrBreakRequest(Client cntxt, str name);
void mdbCommand(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p, int pc);
void mdbDump(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
str mdbGrab(Client cntxt, MalBlkPtr mb1, MalStkPtr stk1, InstrPtr pc1);
void mdbHelp(stream *f);
void mdbInit(void);
str mdbRef;
int mdbSession(void);
void mdbSetBreakRequest(Client cntxt, MalBlkPtr mb, str request, char cmd);
void mdbSetBreakpoint(Client cntxt, MalBlkPtr mb, int pc, char cmd);
int mdbSetTrap(Client cntxt, str modnme, str fcnnme, int flag);
void mdbShowBreakpoints(Client cntxt);
void mdbStep(Client cntxt, MalBlkPtr mb, MalStkPtr stk, int pc);
str mdbTrap(Client cntxt, MalBlkPtr mb, MalStkPtr stk, int pc);
str mdbTrapClient(Client cntxt, MalBlkPtr mb1, MalStkPtr stk1, InstrPtr pc1);
int memoryclaims;
lng memorypool;
str mergecandRef;
aggrFun minAggr;
str minRef;
str min_no_nilRef;
str mirrorRef;
str mitosisRef;
str mkeyRef;
str mmathRef;
int mnstr_close_stream(Stream *S);
str mnstr_close_streamwrap(int *ret, Stream *s);
int mnstr_flush_stream(Stream *S);
str mnstr_flush_streamwrap(int *ret, Stream *s);
str mnstr_open_rastreamwrap(Stream *S, str *filename);
str mnstr_open_rstreamwrap(Stream *S, str *filename);
str mnstr_open_wastreamwrap(Stream *S, str *filename);
str mnstr_open_wstreamwrap(Stream *S, str *filename);
int mnstr_readInt_wrap(int *data, Stream *S);
str mnstr_readIntwrap(int *ret, Stream *S);
str mnstr_readIntwrap(int *ret, Stream *S);
int mnstr_read_string(str *res, Stream *S);
str mnstr_read_stringwrap(str *res, Stream *s);
str mnstr_read_stringwrap(str *res, Stream *s);
str mnstr_socket_rastreamwrap(Stream *S, int *socket, str *name);
str mnstr_socket_rstreamwrap(Stream *S, int *socket, str *name);
str mnstr_socket_wastreamwrap(Stream *S, int *socket, str *name);
str mnstr_socket_wstreamwrap(Stream *S, int *socket, str *name);
str mnstr_stream_rstreamwrap(Stream *sout, Stream *sin);
str mnstr_stream_wstreamwrap(Stream *sout, Stream *sin);
int mnstr_writeInt_wrap(Stream *S, int *data);
str mnstr_writeIntwrap(int *ret, Stream *S, int *data);
int mnstr_write_string(Stream *S, str data);
str mnstr_write_stringwrap(int *ret, Stream *S, str *data);
char monet_cwd[PATHLENGTH];
size_t monet_memory;
int monitorRecycler;
int moreClients(int reruns);
void moveInstruction(MalBlkPtr mb, int pc, int target);
lng msComputeTime;
lng msFindTime;
str mtimeRef;
str multicolumnsRef;
str multiplexRef;
str mvcRef;
InstrPtr newAssignment(MalBlkPtr mb);
InstrPtr newAssignmentId(MalBlkPtr mb, str nme);
InstrPtr newCall(Module scope, str fcnname, int kind);
InstrPtr newCatchStmt(MalBlkPtr mb, str nme);
InstrPtr newComment(MalBlkPtr mb, const char *val);
InstrPtr newExitStmt(MalBlkPtr mb, str nme);
InstrPtr newFcnCall(MalBlkPtr mb, char *mod, char *fcn);
Symbol newFunction(str mod, str nme, int kind);
MalStkPtr newGlobalStack(int size);
InstrPtr newInstruction(MalBlkPtr mb, int kind);
MalBlkPtr newMalBlk(int maxvars, int maxstmts);
int newMalBlkStmt(MalBlkPtr mb, int maxstmts);
Module newModule(Module scope, str nme);
Plant newPlant(MalBlkPtr mb);
int newProperty(MalBlkPtr mb);
InstrPtr newRaiseStmt(MalBlkPtr mb, str nme);
str newRef;
InstrPtr newReturnStmt(MalBlkPtr mb);
InstrPtr newStmt(MalBlkPtr mb, char *module, char *name);
InstrPtr newStmt1(MalBlkPtr mb, str module, char *name);
InstrPtr newStmt2(MalBlkPtr mb, str module, char *name);
InstrPtr newStmtId(MalBlkPtr mb, char *id, char *module, char *name);
Symbol newSymbol(str nme, int kind);
str newTmpName(char tag, int i);
int newTmpSink(MalBlkPtr mb, malType type);
int newTmpVariable(MalBlkPtr mb, malType type);
int newTypeVariable(MalBlkPtr mb, malType type);
int newVariable(MalBlkPtr mb, str name, malType type);
oid nextBoxElement(Box box, oid *cursor, ValPtr v);
str nextRef;
str notRef;
str not_ilikeRef;
str not_likeRef;
str not_uniqueRef;
int notnilProp;
str octopusRef;
str oidRef;
void oldmoveInstruction(InstrPtr dst, InstrPtr src);
Box openBox(str name);
str openProfilerStream(stream *fd);
str openRef;
int open_block_stream(Stream *S, Stream *is);
str open_block_streamwrap(Stream *S, Stream *is);
str operatorCopy(Client cntxt, int length);
int operatorLength(Client cntxt);
str operatorName(int i);
lng optDebug;
str optimizeMALBlock(Client cntxt, MalBlkPtr mb);
str optimizerCheck(Client cntxt, MalBlkPtr mb, str name, int actions, lng usec, int flag);
void optimizerDebug(Client cntxt, MalBlkPtr mb, str name, int actions, lng usec);
void optimizerInit(void);
str optimizerRef;
str optimizer_prelude(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
int output_file_dense(Tablet *as, stream *fd);
str pack2Ref;
str packRef;
str parseError(Client cntxt, str msg);
int parseMAL(Client cntxt, Symbol curPrg);
str partitionRef;
str passRef;
str pcreRef;
void pcre_del(Heap *h, var_t *index);
int pcre_fromstr(str instr, int *l, pcre **val);
BUN pcre_hash(pcre *b);
void pcre_heap(Heap *heap, size_t capacity);
str pcre_init(void);
int pcre_length(pcre *p);
int pcre_nequal(pcre *l, pcre *r);
pcre *pcre_null(void);
var_t pcre_put(Heap *h, var_t *bun, pcre *val);
int pcre_tostr(str *tostr, int *l, pcre *p);
str pinRef;
int pivotDisjunctiveProp;
int pivotProp;
str plusRef;
ssize_t position(Client cntxt);
str postludeRef;
str pqueueRef;
str preludeRef;
MalStkPtr prepareMALstack(MalBlkPtr mb, int size);
void prepareMalBlk(MalBlkPtr mb, str s);
void printBATelm(stream *f, int i, BUN cnt, BUN first);
void printBBPinfo(stream *out);
void printBatDetails(stream *f, int bid);
void printBatInfo(stream *f, VarPtr n, ValPtr v);
void printBatProperties(stream *f, VarPtr n, ValPtr v, str props);
void printFunction(stream *fd, MalBlkPtr mb, MalStkPtr stk, int flg);
void printInstruction(stream *fd, MalBlkPtr mb, MalStkPtr stk, InstrPtr p, int flg);
str printRef;
void printSignature(stream *fd, Symbol s, int flg);
void printStack(stream *f, MalBlkPtr mb, MalStkPtr s);
void printTraceCall(stream *out, MalBlkPtr mb, MalStkPtr stk, int pc, int flags);
str prodRef;
int profilerAvailable(void);
void profilerEvent(int idx, MalBlkPtr mb, MalStkPtr stk, int pc, int start);
void profilerHeartbeatEvent(str msg);
str profilerRef;
str projectRef;
str projectdeltaRef;
void promptInstruction(stream *fd, MalBlkPtr mb, MalStkPtr stk, InstrPtr p, int flg);
InstrPtr pushArgument(MalBlkPtr mb, InstrPtr p, int varid);
InstrPtr pushArgumentId(MalBlkPtr mb, InstrPtr p, str name);
InstrPtr pushBit(MalBlkPtr mb, InstrPtr q, bit val);
InstrPtr pushBte(MalBlkPtr mb, InstrPtr q, bte val);
InstrPtr pushDbl(MalBlkPtr mb, InstrPtr q, dbl val);
InstrPtr pushEmptyBAT(MalBlkPtr mb, InstrPtr q, int tpe);
void pushEndInstruction(MalBlkPtr mb);
InstrPtr pushFlt(MalBlkPtr mb, InstrPtr q, flt val);
void pushInstruction(MalBlkPtr mb, InstrPtr p);
InstrPtr pushInt(MalBlkPtr mb, InstrPtr q, int val);
InstrPtr pushLng(MalBlkPtr mb, InstrPtr q, lng val);
InstrPtr pushNil(MalBlkPtr mb, InstrPtr q, int tpe);
InstrPtr pushNilType(MalBlkPtr mb, InstrPtr q, char *tpe);
InstrPtr pushOid(MalBlkPtr mb, InstrPtr q, oid val);
InstrPtr pushReturn(MalBlkPtr mb, InstrPtr p, int varid);
InstrPtr pushStr(MalBlkPtr mb, InstrPtr q, const char *val);
InstrPtr pushType(MalBlkPtr mb, InstrPtr q, int tpe);
InstrPtr pushValue(MalBlkPtr mb, InstrPtr q, ValPtr cst);
InstrPtr pushVoid(MalBlkPtr mb, InstrPtr q);
InstrPtr pushWrd(MalBlkPtr mb, InstrPtr q, wrd val);
InstrPtr pushZero(MalBlkPtr mb, InstrPtr q, int tpe);
str putName(str nme, size_t len);
str putRef;
str queryRef;
str rankRef;
str rank_grpRef;
int rcachePolicy;
int readConsole(Client cntxt);
MalStkPtr reallocGlobalStack(MalStkPtr s, int cnt);
MalStkPtr reallocStack(MalStkPtr s, int cnt);
str reconnectRef;
double recycleAlpha;
MalBlkPtr recycleBlk;
int recycleCacheLimit;
int recycleMaxInterest;
lng recycleMemory;
QryPatPtr recycleQPat;
str recycleRef;
lng recycleSearchTime;
lng recycleTime;
lng recyclerUsedMemory;
str reenterMAL(Client cntxt, MalBlkPtr mb, int startpc, int stoppc, MalStkPtr stk);
str refineRef;
str refine_reverseRef;
str registerRef;
int releaseAllBox(Box box);
void releaseBAT(MalBlkPtr mb, MalStkPtr stk, int bid);
int releaseBox(Box box, str name);
str remapRef;
str remoteRef;
void removeDataflow(MalBlkPtr mb);
void removeInstruction(MalBlkPtr mb, InstrPtr p);
void removeInstructionBlock(MalBlkPtr mb, int pc, int cnt);
int removeProp;
void removeVariable(MalBlkPtr mb, int varid);
void renameVariable(MalBlkPtr mb, int i, str name);
str replaceRef;
str replicatorRef;
void resetMalBlk(MalBlkPtr mb, int stop);
void resetScenario(Client c);
void resetVarName(MalBlkPtr mb, int i);
int resolveType(int dsttype, int srctype);
str resultSetRef;
int reusePolicy;
str reuseRef;
malType reverseBatType(malType v);
str reverseRef;
int rowsProp;
str rpcRef;
str rsColumnRef;
int rule_fromstr(str buf, int *len, rule **d);
int rule_tostr(str *buf, int *len, rule *r);
str runFactory(Client cntxt, MalBlkPtr mb, MalBlkPtr mbcaller, MalStkPtr stk, InstrPtr pci);
str runMAL(Client c, MalBlkPtr mb, MalBlkPtr mbcaller, MalStkPtr env);
str runMALDebugger(Client cntxt, Symbol s);
str runMALdataflow(Client cntxt, MalBlkPtr mb, int startpc, int stoppc, MalStkPtr stk);
str runMALsequence(Client cntxt, MalBlkPtr mb, int startpc, int stoppc, MalStkPtr stk, MalStkPtr env, InstrPtr pcicaller);
str runScenario(Client c);
int runonceProp;
str safeguardStack(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
int safetyBarrier(InstrPtr p, InstrPtr q);
int saveBox(Box box, int flag);
str schedulerRef;
str selectNotNilRef;
str selectRef;
str semaRef;
str semijoinPathRef;
str semijoinRef;
str setAccessRef;
void setArgType(MalBlkPtr mb, InstrPtr p, int i, int tpe);
InstrPtr setArgument(MalBlkPtr mb, InstrPtr p, int idx, int varid);
str setEndPoint(Module cntxt, str mod, str fcn);
void setFilter(Module cntxt, str mod, str fcn);
void setFilterOnBlock(MalBlkPtr mb, str mod, str fcn);
void setFilterVariable(MalBlkPtr mb, int i);
Module setInheritance(Module head, Module first, Module second);
void setInheritanceMode(Module head, int flag);
Lifespan setLifespan(MalBlkPtr mb);
str setLogFile(stream *fd, Module cntxt, str fname);
str setLogStream(Module cntxt, str host, int port);
str setLogStreamStream(Module cntxt, stream *s);
void setModuleJump(str nme, Module cur);
void setPolymorphic(InstrPtr p, int tpe, int force);
void setReturnArgument(InstrPtr p, int varid);
str setScenario(Client c, str nme);
str setStartPoint(Module cntxt, str mod, str fcn);
void setVarName(MalBlkPtr mb, int i, str nme);
void setVarType(MalBlkPtr mb, int i, int tpe);
str setWriteModeRef;
void showAllScenarios(stream *f);
void showAtoms(stream *fd);
void showCurrentScenario(void);
void showErrors(Client cntxt);
void showException(stream *out, enum malexception, const char *, _In_z_ _Printf_format_string_ const char *, ...) __attribute__((__format__(__printf__, 4, 5)));
void showFlowGraph(MalBlkPtr mb, MalStkPtr stk, str fname);
void showHelp(Module m, str txt, stream *fs);
void showMalBlkHistory(stream *out, MalBlkPtr mb);
void showModuleStatistics(stream *f, Module s);
void showModules(stream *f, Module v);
void showOptimizerHistory(void);
void showOptimizerStep(str fnme, int i, int flg);
void showScenario(stream *f, Scenario s);
void showScenarioByName(stream *f, str s);
void showScriptException(stream *out, MalBlkPtr, int, enum malexception, _In_z_ _Printf_format_string_ const char *, ...) __attribute__((__format__(__printf__, 5, 6)));
str shutdownFactory(Client cntxt, MalBlkPtr mb);
str shutdownFactoryByName(Client cntxt, Module m, str nme);
int sidewaysSelectProp;
str singleRef;
str sinkRef;
void slash_2_dir_sep(str fname);
str sliceRef;
str sortHRef;
str sortHTRef;
str sortRef;
str sortReverseTailRef;
str sortTHRef;
str sortTailRef;
str soundex_impl(str *res, str *Name);
str sqlRef;
int sqlblob_fromstr(char *instr, int *l, blob **val);
int sqlblob_tostr(str *tostr, int *l, blob *p);
int sqlfunctionProp;
str sqlplusRef;
str srvpoolRef;
int stableProp;
str startProfiling(void);
str startRef;
str stopProfiling(void);
str stopRef;
void strAfterCall(ValPtr v, ValPtr bak);
void strBeforeCall(ValPtr v, ValPtr bak);
int strBytes(int *res, str s);
int strConcat(str *res, str s, ptr val, int t);
str strEpilogue(void);
int strFromWChr(str *res, int *c);
int strIconv(str *res, str org, str f, str t);
int strLength(int *res, str s);
int strLower(str *res, str s);
int strLtrim(str *res, str s);
int strPrefix(bit *res, str s, str prefix);
bat *strPrelude(void);
str strRef;
int strReverseStrSearch(int *res, str s, str s2);
int strRtrim(str *res, str s);
int strSQLLength(int *res, str s);
int strStrSearch(int *res, str s, str s2);
int strStrip(str *res, str s);
int strSubString(str *res, str s, int *offset, int *length);
int strSubstitute(str *res, str s, str src, str dst, bit *g);
int strSuffix(bit *res, str s, str suffix);
int strTail(str *res, str s, int *offset);
int strUpper(str *res, str s);
int strWChrAt(int *res, str val, int *at);
str streamsRef;
int stringLength(Client cntxt);
str stringdiff_impl(int *res, str *s1, str *s2);
str subcountRef;
str subdeltaRef;
str subgroupRef;
str subgroupdoneRef;
str submaxRef;
str submedianRef;
str subminRef;
str subprodRef;
str subselectRef;
str subsliceRef;
str subsortRef;
str subsumRef;
str sumRef;
str sunionRef;
int tableProp;
int takeBox(Box box, str name, ValPtr val, int tpe);
str takeOid(oid id, str *val);
str takeRef;
str tdiffRef;
str tdifferenceRef;
str thetajoinRef;
str thetaselectRef;
str thetasubselectRef;
str thetauselectRef;
str tidRef;
int timestamp_fromstr(str buf, int *len, timestamp **ret);
timestamp *timestamp_nil;
int timestamp_tostr(str *buf, int *len, timestamp *val);
int timestamp_tostr(str *buf, int *len, timestamp *val);
int timestamp_tz_tostr(str *buf, int *len, timestamp *val, tzone *timezone);
str tinterRef;
str tintersectRef;
int tlbProp;
str toString(Box box, lng i);
str topn_maxRef;
str topn_minRef;
int toriginProp;
void trimMalBlk(MalBlkPtr mb);
void trimMalVariables(MalBlkPtr mb);
void trimMalVariables_(MalBlkPtr mb, bit *used, MalStkPtr glb);
int tubProp;
str tuniqueRef;
void typeChecker(stream *out, Module scope, MalBlkPtr mb, InstrPtr p, int silent);
int tzone_fromstr(str buf, int *len, tzone **d);
int tzone_fromstr(str buf, int *len, tzone **d);
tzone tzone_local;
int tzone_tostr(str *buf, int *len, tzone *z);
str unescape_str(str *retval, str s);
str unionRef;
void unloadLibraries(void);
str unlockRef;
str unpackRef;
str unpinRef;
int unsafeProp;
void updateBigFoot(Client cntxt, int bid, int add);
str updateRef;
void updateScenario(str scen, str nme, MALfcn fcn);
int updatesProp;
str uselectRef;
str userRef;
str utopn_maxRef;
str utopn_minRef;
VarPtr varGetProp(MalBlkPtr mb, int var, int prop);
str varGetPropStr(MalBlkPtr mb, int var);
void varSetProp(MalBlkPtr mb, int var, int prop, int op, ValPtr cst);
str vectorRef;
char *xmlChr(str s);
str yieldFactory(MalBlkPtr mb, InstrPtr p, int pc);
int yieldResult(MalBlkPtr mb, InstrPtr p, int pc);
str zero_or_oneRef;

# stream
stream *append_wastream(const char *filename);
stream *append_wstream(const char *filename);
stream *attach_teestream(stream *orig, stream *log);
stream *block_stream(stream *s);
ssize_t bs_read_next(stream *s, void *buf, size_t nbytes, int *last);
bstream *bstream_create(stream *rs, size_t chunk_size);
void bstream_destroy(bstream *s);
ssize_t bstream_next(bstream *s);
ssize_t bstream_read(bstream *s, size_t size);
buffer *buffer_create(size_t size);
void buffer_destroy(buffer *b);
char *buffer_get_buf(buffer *b);
void buffer_init(buffer *b, char *buf, size_t size);
stream *buffer_rastream(buffer *b, const char *name);
stream *buffer_wastream(buffer *b, const char *name);
void close_stream(stream *s);
void detach_teestream(stream *ts);
stream *dupFileStream(stream *s);
stream *file_rastream(FILE *fp, const char *name);
stream *file_rstream(FILE *fp, const char *name);
stream *file_wastream(FILE *fp, const char *name);
stream *file_wstream(FILE *fp, const char *name);
FILE *getFile(stream *s);
stream *iconv_rstream(stream *ss, const char *charset, const char *name);
stream *iconv_wstream(stream *ss, const char *charset, const char *name);
int isa_block_stream(stream *s);
int mnstr_byteorder(stream *s);
void mnstr_clearerr(stream *s);
void mnstr_close(stream *s);
void mnstr_destroy(stream *s);
int mnstr_errnr(stream *s);
char *mnstr_error(stream *s);
int mnstr_fgetpos(stream *s, lng *p);
int mnstr_flush(stream *s);
int mnstr_fsetpos(stream *s, lng p);
int mnstr_fsync(stream *s);
buffer *mnstr_get_buffer(stream *s);
int mnstr_init(void);
char *mnstr_name(stream *s);
int mnstr_printf(stream *s, _In_z_ _Printf_format_string_ const char *format, ...) __attribute__((__format__(__printf__, 2, 3)));
ssize_t mnstr_read(stream *s, void *buf, size_t elmsize, size_t cnt);
int mnstr_readBte(stream *s, signed char *val);
int mnstr_readBteArray(stream *s, signed char *val, size_t cnt);
int mnstr_readInt(stream *s, int *val);
int mnstr_readIntArray(stream *s, int *val, size_t cnt);
int mnstr_readLng(stream *s, lng *val);
int mnstr_readLngArray(stream *s, lng *val, size_t cnt);
int mnstr_readSht(stream *s, short *val);
int mnstr_readShtArray(stream *s, short *val, size_t cnt);
ssize_t mnstr_read_block(stream *s, void *buf, size_t elmsize, size_t cnt);
ssize_t mnstr_readline(stream *s, void *buf, size_t maxcnt);
stream *mnstr_rstream(stream *s);
void mnstr_set_byteorder(stream *s, char bigendian);
void mnstr_settimeout(stream *s, unsigned int secs);
int mnstr_type(stream *s);
ssize_t mnstr_write(stream *s, const void *buf, size_t elmsize, size_t cnt);
int mnstr_writeBte(stream *s, signed char val);
int mnstr_writeBteArray(stream *s, const signed char *val, size_t cnt);
int mnstr_writeInt(stream *s, int val);
int mnstr_writeIntArray(stream *s, const int *val, size_t cnt);
int mnstr_writeLng(stream *s, lng val);
int mnstr_writeLngArray(stream *s, const lng *val, size_t cnt);
int mnstr_writeSht(stream *s, short val);
int mnstr_writeShtArray(stream *s, const short *val, size_t cnt);
stream *mnstr_wstream(stream *s);
stream *open_bzrastream(const char *filename);
stream *open_bzrstream(const char *filename);
stream *open_bzwastream(const char *filename);
stream *open_bzwstream(const char *filename);
stream *open_gzrastream(const char *filename);
stream *open_gzrstream(const char *filename);
stream *open_gzwastream(const char *filename);
stream *open_gzwstream(const char *filename);
stream *open_rastream(const char *filename);
stream *open_rstream(const char *filename);
stream *open_urlstream(const char *url);
stream *open_wastream(const char *filename);
stream *open_wstream(const char *filename);
stream *socket_rastream(SOCKET socket, const char *name);
stream *socket_rstream(SOCKET socket, const char *name);
stream *socket_wastream(SOCKET socket, const char *name);
stream *socket_wstream(SOCKET socket, const char *name);
stream *udp_rastream(char *hostname, int port, const char *name);
stream *udp_wastream(char *hostname, int port, const char *name);
stream *wbstream(stream *s, size_t buflen);


# 15:11:17 >  
# 15:11:17 >  "Done."
# 15:11:17 >  

