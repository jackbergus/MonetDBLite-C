#                                               -*- Autoconf -*-
#                                               vim: ft=config :

# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2010 MonetDB B.V.
# All Rights Reserved.

# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.60)
AC_INIT([MonetDB clients], [1.38.0], [monet@cwi.nl], [MonetDB-client])
#                           ^^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AC_CONFIG_AUX_DIR(conf)
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
dnl AH_TOP([#include "sysdefs.h"])
AH_BOTTOM([#include "stddef.h"])
AM_INIT_AUTOMAKE
AC_CONFIG_SRCDIR([src/mapilib/Mapi.mx])
AM_CONFIG_HEADER([clients_config.h])
CONFIG_H=clients_config.h
AC_SUBST(CONFIG_H)

HOST=[$target]
AC_DEFINE_UNQUOTED(HOST, "$HOST", [Host identifier])

if test x"$target_os" = xcygwin; then
	AC_DEFINE(WIN32, 1, [Define on MS Windows (also under Cygwin)])
fi

# CLIENTS_BUILD and CLIENTS_SOURCE are *only* used for monetdb-clients-config
# CLIENTS_SOURCE is the absolute path name of the source directory
# (srcdir can be relative)

# The Q versions of various variables are used in places where \'s
# need to be escapes with an extra \.  Configure does not support \'s
# in path names, so there is no need to do anything special here
# except set the variables.  The command to set them in case we do
# need to escape the \'s is Qvar=`echo "$var" | sed 's/\\\\/\\\\\\\\/g'`
CLIENTS_BUILD=[`pwd`]
AC_SUBST(CLIENTS_BUILD)

CLIENTS_SOURCE=[`(cd $srcdir && pwd)`]
AC_SUBST(CLIENTS_SOURCE)

AM_MONETDB_XQ_VARS_1()


# Check for Monet 
req_monetdb_ver='1.38.0'
#                ^^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AM_MONETDB_COMMON($req_monetdb_ver)
if test "x$have_monetdb" != xyes; then
	if test "x$MONETDB_VERSION" = "x"; then
		AC_MSG_ERROR([MonetDB was not found. Clients requires at least version $req_monetdb_ver of MonetDB.])
	else
		AC_MSG_ERROR([Clients requires at least version $req_monetdb_ver of MonetDB, but only version $MONETDB_VERSION was found.])
	fi
fi
AM_MONETDB_DEFAULTS()
AM_MONETDB_COMPILER()
AM_MONETDB_TOOLS()
AM_MONETDB_OPTIONS()
AM_MONETDB_LIBS()
AM_MONETDB_UTILS()

AC_PROG_LIBTOOL

have_mapilite=no
AC_ARG_WITH([mapilite],
[AS_HELP_STRING([--with-mapilite],
[enable experimental lightweight mapi library])],
[have_mapilite=yes],
[have_mapilite=no])

AS_IF([test "x$have_mapilite" != xno],
   AC_DEFINE([HAVE_MAPILITE], [1], [Define if you want to use the mapilite library])
)
AM_CONDITIONAL(HAVE_MAPILITE, test x$have_mapilite != xno)

# Checks for libraries.
dnl unixODBC
dnl this is only used by the ODBC driver
have_unixodbc=auto
ODBC_INCS=''
ODBC_LIBS=''
AC_ARG_WITH(unixodbc,
	AS_HELP_STRING([--with-unixodbc=DIR],
		[unixODBC library is installed in DIR]),
	have_unixodbc="$withval")
if test "x$have_unixodbc" != xno; then
	case "$have_unixodbc" in
	yes|auto)
		;;
	*)
		ODBC_INCS="-I$have_unixodbc/include"
		ODBC_LIBS="-L$have_unixodbc/lib"
		;;
	esac
	save_CPPFLAGS="$CPPFLAGS"
	CPPFLAGS="$CPPFLAGS $ODBC_INCS"
	AC_CHECK_HEADER(odbcinst.h, AC_DEFINE(HAVE_ODBCINST_H, 1, [Define to 1 if you have the <odbcinst.h> header file.]), [if test "x$have_unixodbc" != xauto; then AC_MSG_ERROR([odbcinst.h not found]); fi; have_unixodbc=no])
	CPPFLAGS="$save_CPPFLAGS"
fi
if test "x$have_unixodbc" != xno; then
	save_LIBS="$LIBS"
    	LIBS="$LIBS $ODBC_LIBS"
    	AC_CHECK_LIB(odbcinst, SQLGetPrivateProfileString, :, [if test "x$have_unixodbc" != xauto; then AC_MSG_ERROR([-lodbcinst not found]); fi; have_unixodbc=no])
    	LIBS="$save_LIBS"
fi
if test "x$have_unixodbc" != xno; then
	ODBC_LIBS="$ODBC_LIBS -lodbcinst"
	AC_DEFINE(HAVE_SQLGETPRIVATEPROFILESTRING, 1, [Define if you have the SQLGetPrivateProfileString function])
fi
if test "x$have_unixodbc" != xno; then
	AC_MSG_CHECKING([checking whether SQLColAttribute uses SQLLEN * or SQLPOINTER])
	AC_COMPILE_IFELSE(
		AC_LANG_PROGRAM([[
			#include <sql.h>
			SQLRETURN SQL_API
			SQLColAttribute(SQLHSTMT hStmt, SQLUSMALLINT nCol, SQLUSMALLINT nFieldIdentifier, SQLPOINTER pszValue, SQLSMALLINT nValueLengthMax, SQLSMALLINT *pnValueLength, SQLLEN *pnValue) {
				(void) hStmt;
				(void) nCol;
				(void) nFieldIdentifier;
				(void) pszValue;
				(void) nValueLengthMax;
				(void) pnValueLength;
				(void) pnValue;
				return SQL_SUCCESS;}]],
			[[SQLColAttribute(0,0,0,0,0,0,0);]]),
		[lenp_or_pointer_t='SQLLEN *'],
		[lenp_or_pointer_t=SQLPOINTER])
	AC_MSG_RESULT([using "$lenp_or_pointer_t"])
	AC_DEFINE_UNQUOTED(LENP_OR_POINTER_T, $lenp_or_pointer_t, [Define as SQLLEN * or SQLPOINTER depending on the include file])
fi

AC_SUBST(ODBC_INCS)
AC_SUBST(ODBC_LIBS)
AM_CONDITIONAL(HAVE_ODBC, test x$have_unixodbc != xno)

# Checks for header files.
AC_HEADER_TIME
AC_CHECK_HEADERS([crypt.h pwd.h sys/ioctl.h sys/un.h termios.h])

# Checks for library functions.
AC_CHECK_FUNCS([crypt ftime getlogin gethostname localtime_r popen strcasecmp strncasecmp strtod strtof strtoll strtoull])
AC_CHECK_DECLS([strtof, strtoll, strtoull])

AM_MONETDB_MSG_CONTROL()

dnl provide different versions of the paths derived above
AM_MONETDB_XQ_VARS_2()
AC_DEFINE_UNQUOTED(CLIENTS_PREFIX,"$QXprefix",[architecture-independent files])
AC_DEFINE_UNQUOTED(CLIENTS_EXEC_PREFIX,"$QXexec_prefix",[architecture-dependent files])
QCLIENTS_BUILD="$CLIENTS_BUILD"
XCLIENTS_BUILD="`$translatepath "$CLIENTS_BUILD"`"
QXCLIENTS_BUILD="`echo "$XCLIENTS_BUILD" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(QCLIENTS_BUILD)
AC_SUBST(XCLIENTS_BUILD)
AC_SUBST(QXCLIENTS_BUILD)
QCLIENTS_SOURCE="$CLIENTS_SOURCE"
XCLIENTS_SOURCE="`$translatepath "$CLIENTS_SOURCE"`"
QXCLIENTS_SOURCE="`echo "$XCLIENTS_SOURCE" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(QCLIENTS_SOURCE)
AC_SUBST(XCLIENTS_SOURCE)
AC_SUBST(QXCLIENTS_SOURCE)
AC_DEFINE_UNQUOTED(CLIENTS_LOCALSTATEDIR,"$QXlocalstatedir",[modifiable single-machine data])
AC_DEFINE_UNQUOTED(CLIENTS_LIBDIR,"$QXlibdir",[object code libraries])
AC_DEFINE_UNQUOTED(CLIENTS_SYSCONFDIR,"$QXsysconfdir",[read-only single-machine data])


case "$host_os" in
mac*)	DIRSEP=':'
	QDIRSEP=':'
	AC_ERROR([mac not supported])
	;;
*mingw*)
	DIRSEP='\'
	QDIRSEP='\\'
	PATHSEP=';'
	SOEXT='-0.dll'
	;;
*darwin*)
	DIRSEP='/'
	QDIRSEP='/'
	PATHSEP=':'
	SOEXT='.dylib'
	;;
*)
	DIRSEP='/'
	QDIRSEP='/'
	PATHSEP=':'
	SOEXT='.so'
	;;
esac
AC_SUBST(DIRSEP)
AC_SUBST(QDIRSEP)
AC_SUBST(PATHSEP)
AC_SUBST(SOEXT)

dnl  CFLAGS for our code are stricter than what autoconf can cope with.
CFLAGS="$CFLAGS \$(X_CFLAGS)"
