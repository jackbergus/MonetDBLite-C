@/
The contents of this file are subject to the MonetDB Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.monetdb.org/Legal/MonetDBLicense

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is the MonetDB Database System.

The Initial Developer of the Original Code is CWI.
Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
Copyright August 2008-2013 MonetDB B.V.
All Rights Reserved.
@

@f gdk_rangejoin

@c
/*
 * @a N. J. Nes
 *
 * @* Range Join Operators
 * The sql statement b.x <= a.z <= b.y, could be implemented using two thetajoins.
 * But that results in very large intermediates.
 */
@h
#ifndef GDK_RANGEJOIN_H
#define GDK_RANGEJOIN_H

/*
 * @- BAT range join operator
 */
gdk_export BAT *BATrangejoin(BAT *l, BAT *rl, BAT *rh, bit li, bit hi);
/*
 * Join all BUNs of the BATs that have tail values: {rl <= l <= rh}.
 */
#endif /* GDK_RANGEJOIN_H */
@c

#include "monetdb_config.h"
#include "gdk.h"
#include "gdk_private.h"
#include "gdk_rangejoin.h"
#include <math.h>

BAT *BATrangejoin(BAT *l, BAT *rl, BAT *rh, bit li, bit hi)
{
	BAT *bn;

	ERRORcheck(l == NULL, "BATrangejoin: invalid left operand");
	ERRORcheck(rl == NULL, "BATrangejoin: invalid right low operand");
	ERRORcheck(rh == NULL, "BATrangejoin: invalid right high operand");
	ERRORcheck(TYPEerror(l->ttype, rl->ttype), "BATrangejoin: type conflict\n");
	ERRORcheck(TYPEerror(l->ttype, rh->ttype), "BATrangejoin: type conflict\n");
	/* TODO check that rl and rh are aligned */

	bn = BATnew(BAThtype(l), BAThtype(rl), MIN(BATcount(l), BATcount(rl)));
	if (bn == NULL) 
		return bn;
	switch (ATOMstorage(rl->ttype)) {
	case TYPE_bte:
		@:rangejoin(bte,)@
	case TYPE_sht:
		@:rangejoin(sht,)@
	case TYPE_int:
		@:rangejoin(int,)@
	case TYPE_wrd:
		@:rangejoin(wrd,)@
	case TYPE_flt:
		@:rangejoin(flt,)@
	case TYPE_dbl:
		@:rangejoin(dbl,)@
	case TYPE_lng:
		@:rangejoin(lng,)@
	default:
		@:rangejoin(any,any)@
	}
	/* set sorted flags by hand, because we used BUNfastins() */
	bn->hsorted = BAThordered(l);
	bn->hrevsorted = BAThrevordered(l);
	bn->tsorted = FALSE;
	bn->trevsorted = FALSE;

	ESTIDEBUG THRprintf(GDKout, "#BATrangejoin: actual resultsize: " BUNFMT "\n", BATcount(bn));

	return bn;
}

@= rangejoin
if (li && hi)
	@:rangejoin_@2(@1,>=,<=)
else if (li && !hi)
	@:rangejoin_@2(@1,>=,<)
else if (!li && hi)
	@:rangejoin_@2(@1,>,<=)
else
	@:rangejoin_@2(@1,>,<)
break;
@
@= rangejoin_
{
	BATiter li = bat_iterator(l);
	BATiter rli = bat_iterator(rl);
	BATiter rhi = bat_iterator(rh);
	BUN p, q;
	BUN v, w;
	BUN cap = bn->batCapacity, cnt = 0;

	BATloop(l, p, q) {
		@1 x1 = *(@1 *) BUNtloc(li, p);
		BATloop(rl, v, w) {
			if ((x1 @2 *(@1 *) BUNtloc(rli, v))  &&
			    (x1 @3 *(@1 *) BUNtloc(rhi, v))) { 
				if (BUNfastins(bn, BUNhead(li, p), BUNhead(rli, v)) == NULL) {
					BBPreclaim(bn);
					return NULL;
				}
			}
		}
		/* re-adjust the capacity if needed */
		cnt++;
		if ( BATcount(bn) > cap ){
			BUN sze = (BUN)ceil((double) BATcount(bn) /cnt);
			if ( BATextend(bn, BATcount(l) * sze ) == NULL ){
				BBPreclaim(bn);
				return NULL;
			}
			cap = bn->batCapacity - sze -1; /* trigger before BATextend in mainloop */
		}
	}
}
@= rangejoin_any
{
	BATiter li = bat_iterator(l);
	BATiter rli = bat_iterator(rl);
	BATiter rhi = bat_iterator(rh);
	BUN p, q;
	BUN v, w;
	BUN cap = bn->batCapacity, cnt = 0;
	int (*cmp)(const void *, const void *) = BATatoms[l->ttype].atomCmp;

	if (!ATOMlinear(l->ttype)) {
		GDKerror("range join not possible on non-linear types\n");
		return NULL;
	}
	BATloop(l, p, q) {
		ptr x1 = (ptr)BUNtail(li, p);
		BATloop(rl, v, w) {
			if (cmp(x1, (ptr)BUNtail(rli, v)) @2 0  &&
			    cmp(x1, (ptr)BUNtail(rhi, v)) @3 0) { 
				if (BUNfastins(bn, BUNhead(li, p), BUNhead(rli, v)) == NULL) {
					BBPreclaim(bn);
					return NULL;
				}
			}
		}
		/* re-adjust the capacity if needed */
		cnt++;
		if ( BATcount(bn) > cap ){
			BUN sze = (BUN)ceil((double) BATcount(bn) /cnt);
			if ( BATextend(bn, BATcount(l) * sze ) == NULL ){
				BBPreclaim(bn);
				return NULL;
			}
			cap = bn->batCapacity - sze -1; /* trigger before BATextend in mainloop */
		}
	}
}
@
