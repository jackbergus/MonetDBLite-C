#!@BASH@

# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-2008 CWI.
# All Rights Reserved.

# Translate an Encapsulated Postscript file to a bounded, 
# white-transparent GIF; nice for inclusion in HTML pages.
#
# usage: epstogif <srcfile.ps> <dstfile.gif> <maxwidth> <maxheight> 
#
# BEWARE: we need rm, gs, epsffit, echo, pnmcrop, ppmtogif and giftrans
# These files are not part of the monet distribution. Install
# them on your own, if they are not present.
#
# Make also sure that this script will find them, either by
# setting your default $PATH correctly, or by editing this
# script to reflect the correct locations. 
#
# On error, this script produces the warning file 'warning.gif'
# which in the Monet distribution is found in the executable path.
#

# determine location of output GIF in case of errors..
if [ -s `type warning.gif 2> /dev/null | sed 's|^.* /|/|g'` ] 
then
    WARNING=`type warning.gif 2> /dev/null | sed 's|^.* /|/|g'`
else
    touch /tmp/warning.gif
    WARNING=/tmp/warning.gif
fi

# check the command-line params
if [ $# = 4 ] 
then
    if [ -s $1 ]
    then
	cp $WARNING $2
        if [ -s $2 ] 
        then
            echo "[ $1 ]"
        else 
            echo "epstogif: cannot write output GIF file '$2'"
            exit
        fi
    else
        echo "epstogif: cannot read input Encapsulated PostScript file '$1'"
        exit
    fi
else
    echo "usage: epstogif <srcfile.ps> <dstfile.gif> <maxwidth> <maxheight>" 
    exit
fi


# do the work
epsffit 0 0 $3 $4 $1 > $1.tmp 2>/dev/null
echo "" >> $1.tmp
echo "showpage" >> $1.tmp
echo "" >> $1.tmp
# BEWARE: echo must be able to understand '\n' 
echo "" | gs -q -r70x70 -sDEVICE=ppmraw -sOutputFile=$1.ppm -dNOPAUSE $1.tmp >/dev/null 2>/dev/null
pnmcrop -white < $1.ppm 2>/dev/null | ppmtogif 2>/dev/null | giftrans -t "#ffffff" > $2 2>/dev/null
rm $1.tmp $1.ppm 2>/dev/null
