@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
@' Copyright August 2008-2009 MonetDB B.V.
@' All Rights Reserved.

@f debug
@a Niels Nes

@h
#ifndef _DEBUG_H_
#define _DEBUG_H_

#include "language.h"

class debug:public language {
      public:
	const char *get_name() const {
		return "debug";
	}
	int generate_code(ostream & o, Symbol *rootptr);

	ostream & gen_module(ostream & o, const Module & m);
	ostream & gen_dependency(ostream & o, const Dependency & m);
	ostream & gen_atom(ostream & o, const Atom & m);
	ostream & gen_atomops(ostream & o, const Atomops & m);
};

#endif //_DEBUG_H_

@C
#include <mel_config.h>
#include "debug.h"
#include "ListIterator.h"
#include "mel.h"

int
debug::generate_code(ostream &o, Symbol *rootptr)
{
	rootptr->print(this, o);
	return 0;
}


ostream &
debug::gen_module(ostream &o, const Module &d)
{ 

	o << "/*\n";
	o << " * This module is generated using the Mdebug utility\n";
	o << " */\n"; 

//	if (d.Deps()){
//		ListIterator *iter = d.Deps()->iterator();
//		Symbol *s = NULL;
//		while(iter->next((void**)&s)){
//			s->print(this, o);
//		}
//	}
	if (d.Defs()){
		ListIterator *iter = d.Defs()->iterator();
		Symbol *s = NULL;
		while(iter->next((void**)&s)){
			s->print(this, o);
		}
	}
	return o; 
}

ostream &
debug::gen_dependency(ostream &o, const Dependency &d)
{
	 o << d.Name() << "\n";
	 return o; 
}

ostream &
debug::gen_atom(ostream &o, const Atom &d)
{
	o << "/*\n";
	o << " * These are the prototypes for Atom " << d.Name() << "\n";
	o << " * Size   = " << d.size() << "\n";
	o << " * Align  = " << d.align() << "\n";
	o << " * Parent = " << d.parent() << "\n";
	o << " */\n";

	if (d.cmds()) {
		Ops **cmds = d.cmds();

		for (int i = OP_FIX; i <= OP_NEQUAL; i++) {
			Ops *s = cmds[i];

			if (s)
				s->print(this, o);
		}
	}
	return o;
}

ostream &
debug::gen_atomops(ostream &o, const Atomops &d)
{
	o << d.Name() << "\n";
	return o; 
}

ostream &
operator<<(ostream &o, const Symbol &s)
{
        o << token2str(s.Token()) << " " << s.Name() << "\n";
	return o;
}
