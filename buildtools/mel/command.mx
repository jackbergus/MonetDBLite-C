@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2008 CWI.
@' All Rights Reserved.

@f command
@a Niels Nes

@h
#ifndef _COMMAND_H_
#define _COMMAND_H_

#include "symbol.h"
#include "list.h"
#include "mel.h"
#include "mel.tab.h"

enum cmd_types {
	NORMAL,
	AGGREGATE,
	MULTIPLEX
};


class Command:public Symbol {
      public:
	Command(int t, char *n, char *fcn, int type, Symbol *result = NULL, List * args = NULL, char *hlp = NULL);

	char *fcn() const;
	Symbol *result() const;
	List *args() const;
	char *hlp() const;
	int type() const;
	int varargs() const;
	int Id() const;

	virtual const char *Token() const;
	virtual ostream & print(language * l, ostream & o) const;
      private:
	void set_arg_names(const char *base);

	char *_fcn;
	Symbol *_result;
	char *_hlp;
	int _type;
	int _id;
      protected:
	 List * _args;
};
#endif

@C
#include <mel_config.h>
#include "command.h"
#include "ListIterator.h"
#include "language.h"
#include <string.h>
#include <stdio.h>
#include <stdlib.h>

#ifdef NATIVE_WIN32
/* The POSIX name for this item is deprecated. Instead, use the ISO
   C++ conformant name: _strdup. See online help for details. */
#define strdup _strdup
#endif

static int id_rand(void);

Command::Command(int t, char *n, char *fcn, int type, Symbol *result, List *args, char *hlp) : Symbol(t, n)
{
	if (fcn)
		_fcn = strdup(fcn);
	else
		_fcn = NULL;
	_type = type;
	_result = result;
	_args = args;
	set_arg_names("arg");
	if (hlp)
		_hlp = strdup(hlp);
	else
		_hlp = NULL;
	_id = id_rand();
}


static void set_anyarg_name(Symbol *s, int i);

void
Command::set_arg_names(const char *base)
{
	if (!_args)
		return;
	int arg_nr = 0;
	char *name = new char[strlen(base) + 4];
	ListIterator *iter = _args->iterator();
	Symbol *s = NULL;

	while (iter->next((void **) &s)) {
		if (!s->Name()) {
			sprintf(name, "%s%d", base, arg_nr);
			s->Name(name);
		}
		set_anyarg_name(s, ++arg_nr);
	}
	delete(name);
}

int
Command::varargs() const
{
	int varargs = 0;

	if (args()) {
		ListIterator *iter = args()->iterator();
		Symbol *s = NULL;

		while (iter->next((void **) &s)) {
			if (s->Token() == MEL_VARARGS)
				varargs = 1;
		}
	}
	return varargs;
}

int
Command::Id() const
{ 
	return _id; 
}

char *
Command::fcn() const
{ 
	return _fcn; 
}

Symbol *
Command::result() const
 {
	return _result;
}

List *
Command::args() const
{
	return _args;
}

char *
Command::hlp() const
{
	return _hlp;
}

int
Command::type() const
{
	return _type;
}

const char *
Command::Token() const
{
	return "TOK_COMMAND";
}

ostream &
Command::print(language *l, ostream &o) const
{
	return l->gen_command(o, *this);
}

@- any arguments
Hacks to insert location info in any arguments.
Saves a whole lot of problems later on (glue.mx).
@C
#include "any_arg.h"
#include "bat_arg.h"

static void
set_batarg_name(Symbol *s, int i, char c)
{
	if (s && s->Token() == MEL_ANY) {
		AnyArg *a = (AnyArg *) s;

		sprintf(a->typestr, "BBPdescriptor(argv[%d].val.bval)->%ctype", i, c);
	}
}

static void
set_anyarg_name(Symbol *s, int i)
{
	if (s && s->Token() == MEL_ANY) {
		AnyArg *a = (AnyArg *) s;

		sprintf(a->typestr, "argv[%d].vtype", i);
	} else if (s->Token() == MEL_BAT) {
		BatArg *b = (BatArg *) s;

		set_batarg_name((Symbol *) b->atom1(), i, 'h');
		set_batarg_name((Symbol *) b->atom2(), i, 't');
	}
}


@-
random numbers with history (to avoid doubles)
@C
#include <assert.h>
#include <sys/types.h>

#ifdef TIME_WITH_SYS_TIME
# include <sys/time.h>
# include <time.h>
#else
# ifdef HAVE_SYS_TIME_H
#  include <sys/time.h>
# else
#  include <time.h>
# endif
#endif

#define MAX_ID_HIST 10240

static int id_hist[MAX_ID_HIST];
static int id_size = 0;

static int
id_rand(void)
{
	static int seeded = 0;
	int i, r;

	if (!seeded) {
		srand((unsigned int) time(NULL));
		seeded = 1;
	}

      try_again:
	r = rand();
	for (i = 0; i < id_size; i++)
		if (id_hist[i] == r) {
			// found duplicate random number: just try again
			goto try_again;
		}
	id_hist[id_size++] = r;
	assert(id_size <= MAX_ID_HIST);
	return r;
}
