@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
@' Copyright August 2008- MonetDB B.V.
@' All Rights Reserved.

@f language
@a Niels Nes

@h
#ifndef _LANGUAGE_H_
#define _LANGUAGE_H_

#include "symbol.h"
#include "symtable.h"
#include "module.h"
#include "dependency.h"
#include "atom.h"
#include "atomops.h"
#include "command.h"
#include "operator.h"
#include "builtin.h"
#include "iterator.h"
#include "object.h"
#include "atom_arg.h"
#include "type_arg.h"
#include "var_arg.h"
#include "bat_arg.h"
#include "any_arg.h"
#include "prelude.h"
#include "epilogue.h"
#ifdef HAVE_IOSTREAM
#include <iostream>
using namespace std;
#else
#include <iostream.h>
#endif
#ifdef __MINGW32__
extern char *strdup(const char*);
#endif

class language {
      public:
	virtual ~language () {
	}
	virtual const char *get_name() const {
		return "name";
	}
	virtual int handle_args(int, char **) {
		return 1;
	}
	virtual int generate_code(ostream &, Symbol *) {
		return 0;
	}
	virtual int generate_table(ostream &, Symtable *) {
		return 0;
	}

	virtual ostream &gen_symbol(ostream &o, const Symbol &) {
		return o;
	}
	virtual ostream &gen_module(ostream &o, const Module &) {
		return o;
	}
	virtual ostream &gen_dependency(ostream &o, const Dependency &) {
		return o;
	}
	virtual ostream &gen_atom(ostream &o, const Atom &) {
		return o;
	}
	virtual ostream &gen_atomops(ostream &o, const Atomops &) {
		return o;
	}
	virtual ostream &gen_command(ostream &o, const Command &) {
		return o;
	}
	virtual ostream &gen_operator(ostream &o, const Operator &) {
		return o;
	}
	virtual ostream &gen_builtin(ostream &o, const Builtin &) {
		return o;
	}
	virtual ostream &gen_iterator(ostream &o, const Iterator &) {
		return o;
	}
	virtual ostream &gen_object(ostream &o, const Object &) {
		return o;
	}
	virtual ostream &gen_atom_arg(ostream &o, const AtomArg &) {
		return o;
	}
	virtual ostream &gen_type_arg(ostream &o, const TypeArg &) {
		return o;
	}
	virtual ostream &gen_var_arg(ostream &o, const VarArg &) {
		return o;
	}
	virtual ostream &gen_bat_arg(ostream &o, const BatArg &) {
		return o;
	}
	virtual ostream &gen_any_arg(ostream &o, const AnyArg &) {
		return o;
	}
	virtual ostream &gen_prelude(ostream &o, const Prelude &) {
		return o;
	}
	virtual ostream &gen_epilogue(ostream &o, const Epilogue &) {
		return o;
	}
	ostream &gen_list(ostream &o, List *, const char *sep = "");
};

inline ostream &language::gen_list(ostream &o, List *l, const char *sep)
{

	if (l) {
		ListIterator *iter = l->iterator();
		Symbol *s = NULL;

		if (iter->next((void **)&s))
			s->print(this, o);
		while (iter->next((void **)&s)) {
			o << sep;
			s->print(this, o);
		}
	}
	return o;
}

#endif //_LANGUAGE_H_
