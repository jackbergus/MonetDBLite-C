@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@f FileInfo
@a Niels Nes

@h 
#ifndef _FILEINFO_H_
#define _FILEINFO_H_

#include <stdio.h>
#include "list.h"

class FileInfo {
      public:
	FileInfo(FILE *f, int lineno, char *filename, char *basename, FileInfo * parent = NULL);
	~FileInfo();
	static char *find_module(char *name, List * dir_list);
	static FileInfo *open(char *filename, char *basename = NULL, FileInfo * parent = NULL);
	void close();
	int LineNo();
	void LineNo(int lineno);
	FILE *FilePtr();
	char *FileName();
	void FileName(char *fname);
	char *BaseName();
	FileInfo *Parent();
	void *Buffer ();
	void Buffer (void *buf);
      private:
	FILE *_f;
	int _lineno;
	char *_filename;
	char *_basename;
	FileInfo *_parent;
	void *_buf;
};

#endif // _FILEINFO_H_

@C
#include <mel_config.h>
#include "FileInfo.h"
#include "language.h"
#include "mel.h"
#include "ListIterator.h"
#include <stdio.h>
#include <string.h>

#ifdef NATIVE_WIN32
/* The POSIX name for this item is deprecated. Instead, use the ISO
   C++ conformant name: _strdup. See online help for details. */
#define strdup _strdup
#endif

FileInfo::FileInfo(FILE *f, int lineno, char *filename, char *basename, FileInfo *parent)
{
	_f = f;
	_lineno = lineno;
	_filename = strdup(filename);
	_basename = strdup(basename);
	_parent = parent;
}

FileInfo::~FileInfo()
{
	delete(_filename);
	delete(_basename);
}

int
FileInfo::LineNo()
{
	return _lineno;
}

void
FileInfo::LineNo(int lineno)
{
	_lineno = lineno;
}

FILE *
FileInfo::FilePtr()
{
	return _f;
}

char *
FileInfo::FileName()
{
	return _filename;
}

void
FileInfo::FileName(char *fname)
{
	delete(_filename);
	_filename = strdup(fname);
}

char *
FileInfo::BaseName()
{
	return _basename;
}

FileInfo *
FileInfo::Parent()
{
	return _parent;
}

void *
FileInfo::Buffer()
{
	return _buf;
}

void
FileInfo::Buffer(void *buf)
{
	_buf = buf;
}

static char *
new_filename(const char *dir, const char *name, const char *ext)
{
	size_t len_dir = strlen(dir);
	size_t len_name = strlen(name);
	size_t len_ext = strlen(ext);
	char *fn = new char[len_dir + 1 + len_name + len_ext + 1];

	strcpy(fn, dir);
	fn[len_dir] = DIR_SEP;
	strcpy(fn + len_dir + 1, name);
	strcpy(fn + len_dir + 1 + len_name, ext);
	return fn;
}

char *
FileInfo::find_module(char *name, List *dir_list)
{
	char *fn = new_filename(".", name, ".m");
	FILE *fp = fopen(fn, "r");

	if (fp) {
		fclose(fp);
		return fn;
	} else {
		delete fn;
		char *dir = NULL;
		ListIterator *iter = dir_list->iterator();

		while (iter->next((void **)&dir)) {
			fn = new_filename(dir, name, ".m");
			fp = fopen(fn, "r");
			if (fp) {
				fclose(fp);
				return fn;
			} else {
				delete fn;
			}
		}
	}
	return NULL;
}

char *
basename(char *fname)
{
	char *start = strrchr(fname, DIR_SEP);

	if (start)
		start++;
	else
		start = fname;
#ifdef WIN32
	fname = start;
	start = strrchr(fname, '/');
	if (start)
		start++;
	else
		start = fname;
#endif
	char *end = strrchr(start, '.');
	size_t l = end ? end - start : strlen(start);
	char *b = new char[l + 1];

	strncpy(b, start, l);
	b[l] = 0;
	return b;
}

FileInfo *
FileInfo::open(char *fname, char *bname, FileInfo *parent)
{
	FILE *fp = fopen(fname, "r");

	if (fp) {
		if (!bname) {
			bname = basename(fname);
		}
		return new FileInfo (fp, 1, fname, bname, parent);
	} else {
		return NULL;
	}
}

void
FileInfo::close()
{
	fclose(_f);
}
