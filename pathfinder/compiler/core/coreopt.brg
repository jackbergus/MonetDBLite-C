%{

/**
 * @file
 *
 * Optimize XQuery Core tree (with static type information available).
 *
 * Copyright Notice:
 * -----------------
 *
 * The contents of this file are subject to the Pathfinder Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of the License at
 * http://monetdb.cwi.nl/Legal/PathfinderLicense-1.1.html
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
 * the License for the specific language governing rights and limitations
 * under the License.
 *
 * The Original Code is the Pathfinder system.
 *
 * The Initial Developer of the Original Code is the Database &
 * Information Systems Group at the University of Konstanz, Germany.
 * Portions created by the University of Konstanz are Copyright (C)
 * 2000-2006 University of Konstanz.  All Rights Reserved.
 *
 *
 * $Id$
 */ 


#include "pathfinder.h"
#include <assert.h>
#include <stdio.h>
#include <string.h>

#include "oops.h"
#include "core.h"
#include "qname.h"
#include "mem.h"
#include "subtyping.h"
#include "typecheck.h"

/*
 * Accessors for the burg matcher
 */
typedef struct PFcnode_t *NODEPTR_TYPE;

/* accessor to the node kind */
#define OP_LABEL(p)    ((p)->kind) 

/* accessors to left and right child node */
#define LEFT_CHILD(p)  ((p)->child[0])
#define RIGHT_CHILD(p) ((p)->child[1])

/* the state determined during bottom-up labeling is stored here */
#define STATE_LABEL(p) ((p)->state_label)

/* If something goes wrong, call PFoops */
#define PANIC(...) PFoops (OOPS_BURG, __VA_ARGS__)

/** We hash variable replacement bindings into 8 buckets */
#define HASH_BUCKETS 8
/** hash function for the variable replacement environment */
#define hash(v) ((unsigned int) ((v) - (PFvar_t *) NULL) % HASH_BUCKETS)

/** a binding in the variable replacement environment */
typedef struct {
    PFvar_t    *var;
    PFcnode_t  *atom;
} bind_t;

/**
 * Variable replacement environment.
 *
 * In order to unfold let-bound variables which are bound to some
 * other atom, we proceed as follows:
 *
 * First, we process the binding sequence (the atom).  If it is
 * a variable itself, there may be a replacement for it, so we do
 * that first.  Then, add an entry to the environment var_env
 * (a hash table with HASH_BUCKETS buckets) and process the return
 * part (which will replace every occurrence of the variable).
 * When we're back, we replace the let clause by its return part.
 *
 * Whenever we process the usage of a variable, look into the
 * environment if there is a replacement for it.  In that case,
 * do the replacement.
 *
 * Note that we do *not* remove the binding from the environment
 * when we're back from the return part.  The Core expression
 * tree may contain "global" variables (i.e., ones that were
 * bound in the query prolog).  Such variables may be used in
 * functions as well.  Therefore, we process the query first
 * (the start rule for our grammar is top-down) in order to have
 * globals be added to the environment.  As we leave all the
 * variables in the environment, they will be available when we
 * process the function bodies.  Hence, they will be replaced
 * there as well.
 */
PFarray_t *var_env[HASH_BUCKETS];

%}

/* start non-terminal */
%start Query

/*
 * Node identifiers. Keep these properly aligned with the node kinds
 * in include/core.h!
 */
%term var                =  1 /**< variable */
%term lit_str            =  2 /**< string literal */
%term lit_int            =  3 /**< integer literal */
%term lit_dec            =  4 /**< decimal literal */
%term lit_dbl            =  5 /**< double literal */
%term nil                =  6 /**< end-of-sequence marker */

%term seq                =  7 /**< sequence construction */
%term ordered            =  8
%term unordered          =  9

%term flwr               = 10 /**< flwr expression */
%term let                = 11 /**< let expression */
%term letbind            = 12 /**< binding part of a let expression */
%term for_               = 13 /**< for expression */
%term forbind            = 14 /**< binding part of a for expression */
%term forvars            = 15 /**< variable pair (var + pos. var) of a for */

%term orderby            = 16 /**< orderby clause */
%term orderspecs         = 17 /**< list of order specs */

%term apply              = 18 /**< function application */
%term arg                = 19 /**< function argument (list) */

%term typesw             = 20 /**< typeswitch clause */
%term cases              = 21 /**< case concatenation for typeswitch */
%term case_              = 22 /**< single case for typeswitch */
%term default_           = 23 /**< default branch in typeswitch */
%term seqtype            = 24 /**< a SequenceType */
%term seqcast            = 25 /**< cast along <: */
%term proof              = 26 /**< typechecker only: prove <: relationship */
%term subty              = 27 /**< subtype condition for proof() */
%term stattype           = 28 /**< static type of expression. Required for
                                   fs:convert-operand. Will be removed during
                                   typechecking and replaced by seqtype, as
                                   soon as types are known. */

%term if_                = 29 /**< if-then-else conditional */
%term then_else          = 30 /**< then- and else-branches of an
                                   if-then-else conditional */

%term locsteps           = 31 /**< path of location steps only */
%term ancestor           = 32 /**< the parent, the parent's parent,... */
%term ancestor_or_self   = 33 /**< the parent, the parent's parent,... + self */
%term attribute          = 34 /**< attributes of the context node */
%term child              = 35 /**< children of the context node */
%term descendant         = 36 /**< children, children's children,... + self */
%term descendant_or_self = 37 /**< children, children's children,... */
%term following          = 38 /**< nodes after current node (document order) */
%term following_sibling  = 39 /**< all following nodes with same parent */
%term parent             = 40 /**< parent node (exactly one or none) */
%term preceding          = 41 /**< nodes before context node (document order) */
%term preceding_sibling  = 42 /**< all preceding nodes with same parent */
%term self               = 43 /**< the context node itself */

%term elem               = 44 /**< the element constructor */
%term attr               = 45 /**< the attribute constructor */
%term text               = 46 /**< the text constructor */
%term doc                = 47 /**< the document constructor */
%term comment            = 48 /**< the comment constructor */
%term pi                 = 49 /**< the processing-instruction constructor */
%term tag                = 50 /**< the tagname for elem. and attr. constr. */

%term true_              = 51 /**< built-in function `fn:true ()' */
%term false_             = 52 /**< built-in function `fn:false ()' */
%term empty              = 53 /**< built-in function `empty' */
%term main               = 54 /**< tree root
                                   Separates function declarations from
                                   the query body. */
%term fun_decls          = 55 /**< list of function declarations */
%term fun_decl           = 56 /**< function declaration */
%term params             = 57 /**< function declaration parameter list */
%term param              = 58 /**< function declaration parameter */
%term cast               = 59 /**< XQuery `cast as' operation */

%%

Query:              main (FunctionDecls, CoreExpr)              =   1 (10);
                                                                     
CoreExpr:           Atom                                        =   2 (10);
CoreExpr:           SequenceTypeCast                            =   3 (10);
                                                                     
CoreExpr:           flwr (OptBindExpr, CoreExpr)                =   4 (10);
OptBindExpr:        for_ (forbind (forvars (var, OptVar),            
                                   Atom),                            
                          OptBindExpr)                          =   5 (10);
                                                                     
OptVar:             nil                                         =   6 (10);
OptVar:             var                                         =   7 (10);
                                                                     
OptBindExpr:        let (letbind (var, Atom), OptBindExpr)      =   8 (10);
OptBindExpr:        let (letbind (var,                               
                                  flwr (let (letbind (var,           
                                                      CoreExpr),     
                                             nil),                   
                                        CoreExpr)),                  
                         OptBindExpr)                           =   9 (10);
OptBindExpr:        let (letbind (var,                               
                                  flwr (let (letbind (var,           
                                                      CoreExpr),     
                                             OptBindExpr),           
                                        CoreExpr)),                  
                         OptBindExpr)                           =  10 (10);
OptBindExpr:        let (letbind (var, CoreExpr), OptBindExpr)  =  11 (10);
OptBindExpr:        nil                                         =  12 (10);
                                                                     
CoreExpr:           typesw (Atom,                                    
                            cases (case_ (SequenceType,              
                                          CoreExpr),                 
                                   default_ (CoreExpr)))        =  13 (10);
                                                                     
SequenceType:       seqtype                                     =  14 (10);
SequenceType:       stattype (CoreExpr)                         =  15 (10);
                                                                     
SequenceTypeCast:   seqcast (SequenceType, CoreExpr)            =  16 (10);
                                                                     
CoreExpr:           proof (subty (CoreExpr, SequenceType),           
                           CoreExpr)                            =  17 (10);
                                                                     
CoreExpr:           if_ (Atom, then_else (CoreExpr, CoreExpr))  =  18 (10);
                                                                     
Var:                var                                         =  19 (10);
                                                                     
CoreExpr:           seq (Atom, Atom)                            =  20 (10);
CoreExpr:           seq (empty, Atom)                           =  21 (10);
CoreExpr:           seq (Atom, empty)                           =  22 (10);
                                                                     
CoreExpr:           LocationSteps                               =  23 (10);
CoreExpr:           LocationStep                                =  24 (10);
                                                                     
LocationStep:       ancestor (SequenceType)                     =  25 (10);
LocationStep:       ancestor_or_self (SequenceType)             =  26 (10);
LocationStep:       attribute (SequenceType)                    =  27 (10);
LocationStep:       child (SequenceType)                        =  28 (10);
LocationStep:       descendant (SequenceType)                   =  29 (10);
LocationStep:       descendant_or_self (SequenceType)           =  30 (10);
LocationStep:       following (SequenceType)                    =  31 (10);
LocationStep:       following_sibling (SequenceType)            =  32 (10);
LocationStep:       parent (SequenceType)                       =  33 (10);
LocationStep:       preceding (SequenceType)                    =  34 (10);
LocationStep:       preceding_sibling (SequenceType)            =  35 (10);
LocationStep:       self (SequenceType)                         =  36 (10);
                                                                     
LocationSteps:      locsteps (LocationStep, LocationSteps)      =  37 (10);
LocationSteps:      locsteps (LocationStep, Atom)               =  38 (10);
                                                                     
CoreExpr:           elem (TagName, CoreExpr)                    =  39 (10);
CoreExpr:           attr (TagName, CoreExpr)                    =  40 (10);
CoreExpr:           text (CoreExpr)                             =  41 (10);
CoreExpr:           doc (CoreExpr)                              =  42 (10);
CoreExpr:           comment (CoreExpr)                          =  43 (10);
CoreExpr:           pi (CoreExpr)                               =  44 (10);
                                                                     
TagName:            tag                                         =  45 (10);
TagName:            CoreExpr                                    =  46 (10);
                                                                     
CoreExpr:           apply (FunctionArgs)                        =  47 (10);
CoreExpr:           apply (arg (Atom, nil))                     =  48 (10);
CoreExpr:           apply (arg (Atom, arg (Atom, nil)))         =  49 (10);
                                                                     
FunctionArgs:       arg (Atom, FunctionArgs)                    =  50 (10);
FunctionArgs:       arg (SequenceTypeCast, FunctionArgs)        =  51 (10);
FunctionArgs:       nil                                         =  52 (10);
                                                                     
CoreExpr:           ordered (CoreExpr)                          =  53 (10);
CoreExpr:           unordered (CoreExpr)                        =  54 (10);
                                                                     
CoreExpr:           orderby (OrderSpecs, CoreExpr)              =  55 (10);
                                                                     
OrderSpecs:         orderspecs (CoreExpr, nil)                  =  56 (10);
OrderSpecs:         orderspecs (CoreExpr, OrderSpecs)           =  57 (10);
                                                                     
CoreExpr:           cast (SequenceType, CoreExpr)               =  58 (10);
                                                                     
Atom:               var                                         =  59 (10);
Atom:               empty                                       =  60 (10);
Atom:               LiteralValue                                =  61 (10);
                                                                     
LiteralValue:       lit_str                                     =  62 (10);
LiteralValue:       lit_int                                     =  63 (10);
LiteralValue:       lit_dec                                     =  64 (10);
LiteralValue:       lit_dbl                                     =  65 (10);
LiteralValue:       true_                                       =  66 (10);
LiteralValue:       false_                                      =  67 (10);
                                                                     
FunctionDecls:      nil                                         =  68 (10);
FunctionDecls:      fun_decls (FunctionDecl, FunctionDecls)     =  69 (10);
                                                                     
FunctionDecl:       fun_decl (ParamList, FunctionBody)          =  70 (10);
                                                                     
ParamList:          nil                                         =  71 (10);
ParamList:          params (FunParam, ParamList)                =  72 (10);
                                                                     
FunctionBody:       CoreExpr                                    =  73 (10);
                                                                     
FunParam:           param (SequenceType, var)                   =  74 (10);

%%

/*
 * Easily access subtree-parts.
 */
/** starting from p, make a step left */
#define L(p) (LEFT_CHILD(p))
/** starting from p, make a step right */
#define R(p) (RIGHT_CHILD(p))
/** starting from p, make two steps left */
#define LL(p) L(L(p))
/** starting from p, make a step left, then a step right */
#define LR(p) R(L(p))
/** starting from p, make a step right, then a step left */
#define RL(p) L(R(p))
/** starting from p, make two steps right */
#define RR(p) R(R(p))
/* ... and so on ... */
#define LRL(p) L(R(L(p)))
#define RRL(p) L(R(R(p)))
#define RRRL(p) L(R(R(R(p))))
#define RRRRL(p) L(R(R(R(R(p)))))
#define RRRRRL(p) L(R(R(R(R(R(p))))))
#define RRRRRR(p) R(R(R(R(R(R(p))))))
#define LLL(p) L(L(L(p)))
#define LLR(p) R(L(L(p)))
#define LRR(p) R(R(L(p)))
#define LRLL(p) L(L(R(L(p))))
#define LRLR(p) R(L(R(L(p))))
#define RLR(p) R(L(R(p)))
#define RLL(p) L(L(R(p)))

/** Type of a core tree node */
#define TY(p) ((p)->type)

/** Maximum number of pattern leaves */
#define MAX_KIDS 10

static void relabel (PFcnode_t *p,  PFcnode_t **kids);

#include "core_mnemonic.h"

/**
 * Reducer function. This is the heart of this source file. It
 * contains all the action code for the above burg patterns.
 */
static bool
reduce (PFcnode_t * p, int goalnt)
{
    int           rule;           /* rule number that matches for this node */
    short        *nts;            /* target non-terminals for the leaf nodes of
                                     the current rule */
    PFcnode_t *   kids[MAX_KIDS]; /* leaf nodes of this rule */
    bool          rewritten;
    short         old_state_label;

    do {
        /* determine rule that matches for this non-terminal */
        rule = PFcoreopt_rule (STATE_LABEL (p), goalnt);

        assert (rule);

        /* PFinfo (OOPS_NOTICE, "match for rule %i", rule); */

        /* initialize the kids[] vector */
        for (unsigned short i = 0; i < MAX_KIDS; i++)
            kids[i] = NULL;

        /*
         * prepare recursive traversal: get information on leaf nodes of
         * this rule
         */
        nts = PFcoreopt_nts[rule];
        PFcoreopt_kids (p, rule, kids);

        rewritten = false;
        /* evaluate top-down in a number of cases */
        switch (rule) {
            /* Query:              main (FunctionDecls, CoreExpr) */
            case 1:
                /*
                 * Look at query body first, then at function declarations.
                 * This way we make sure that the expansion of let statements
                 * also considers function declarations.
                 */
                rewritten |= reduce (kids[1], nts[1]);
                rewritten |= reduce (kids[0], nts[0]);

                /*
                 * If we know (from static typing) that we are iterating
                 * over the empty sequence, replace the whole thing by
                 * the empty sequence.
                 */
                if (PFty_subtype (TY(p), PFty_empty ())) {
                    *p = *empty ();

                    /* assign new node a state label */
                    relabel (p, kids);
                    rewritten = true;
                    break;
                }

                break;

            /* CoreExpr:           flwr (OptBindExpr,
                                         CoreExpr) */
            case 4:
                /* Make sure to collect all variables first ... */
                rewritten |= reduce (kids[0], nts[0]);
                /* ... and then fill in the replacements. */
                rewritten |= reduce (kids[1], nts[1]);

                /* remove uncessary flwr expressions */
                if (L(p)->kind == c_nil)
                {
                    /* also remove orderby node if present
                       (static typing ensures that we don't
                        prune erroneous order arguments) */
                    if (R(p)->kind == c_orderby)
                        *p = *(RR(p));
                    else
                        *p = *(R(p));

                    rewritten = true;
                }
                break;

            /* OptBindExpr:        let (letbind (var, Atom), OptBindExpr) */
            case 8:
                /*
                 * Unfold atoms (a is an atom)
                 *
                 *     let $v := a return e
                 *  -->
                 *     e[a/$v]
                 *
                 * See the comment in the declaration of var_env to
                 * understand what's going on here.
                 */

                /*
                 * Handle Atom first.  In case it is a variable, this
                 * will make sure that we do transitive cases of variable
                 * replacement correctly.
                 */
                reduce (kids[0], nts[0]);

                /* add mapping for this variable to the environment */
                *((bind_t *) PFarray_add (var_env[hash(LL(p)->sem.var)]))
                    = (bind_t) { .var = LL(p)->sem.var, .atom = LR(p) };

                if (LL(p)->sem.var->global && LR(p)->kind == c_var)
                    LR(p)->sem.var->global = true;

                /*
                 * Reduce the return part.
                 */
                reduce (kids[1], nts[1]);

                /*
                 * Do NOT remove the variable from the environment.
                 */

                /*
                 * We have now replaced every occurrence of the variable
                 * in the return part with its binding atom.  The return
                 * part now becomes the expression itself.
                 */
                *p = *R(p);

                rewritten = true;
                break;

            default:
                /*
                 * Recursively invoke compilation.
                 * This means bottom-up compilation.
                 */
                for (unsigned short i = 0; nts[i]; i++)
                    if ((rewritten = reduce (kids[i], nts[i])))
                        break;  /* abort if a subtree was rewritten */
        }

        if (rewritten) {
            /*
             * If a subtree has been rewritten, we have to
             *  - re-label that part of the tree, and
             *  - possibly propagate the `rewritten' information upwards.
             */

            /* remember our old state_label (so we know if it has changed) */
            old_state_label = STATE_LABEL(p);

            /*
             * Re-label current tree pattern.
             * (at most down to the pattern leaves, as they should already be
             * correctly labeled by the above reduce() call)
             */
            relabel (p, kids);

            /* If our own state_label has changed, notify our caller. */
            if (old_state_label != STATE_LABEL(p))
                return true;
        }
    } while (rewritten);

    rewritten = false;

    switch (rule) {
        /* OptBindExpr:        for_ (forbind (forvars (var, OptVar),
                                              Atom),
                                     OptBindExpr) */
        case 5:
            /*
             * If we iterate over a sequence that we know (from static
             * typing) to always have length 1, replace the `for' by
             * a corresponding `let'.
             */
            if (PFty_subtype (TY(LR(p)), PFty_xs_anyItem ())) {

                PFcnode_t *c = R(p);

                if (LLR(p)->kind != c_nil) {
                    c = let (letbind (LLR(p), num (1)), c);

                    /* fix types */
                    TY(LR(c)) = PFty_xs_integer ();
                    c->sem.flwr.quantifier = PFty_one;
                }

                *p = *let (letbind (LLL(p), LR(p)), c);
                /* type let binding */
                p->sem.flwr.quantifier = PFty_one;

                relabel (p, kids);
                rewritten = true;

                break;
            }

            break;

        /* OptBindExpr:        let (letbind (var,
                                             flwr (let (letbind (var, 
                                                                 CoreExpr),
                                                        nil),
                                                   CoreExpr)),
                                    OptBindExpr) */
        case 9:
            /*
             * Remove a nested let block:
             * 
             *     let $v1 := let $v2 := e return e' return e''
             *  -->
             *     let $v2 := e return
             *       let $v1 := e' return
             *         e''
             */
            *p = *let (letbind (LL(LRL(p)), LR(LRL(p))), /* let $v2 := e ret */
                       let (letbind (LL(p), LRR(p)),     /*   let $v1 := e'  */
                            R(p)));                      /*     ret e''      */

            /* remove unncessary order by expression 
               bound to flwr expression (here e') */
            if (RLR(p)->kind == c_orderby)
                RLR(p) = R(RLR(p));
    
            /* type let binding */
            p->sem.flwr.quantifier    = 
            R(p)->sem.flwr.quantifier = RR(p)->sem.flwr.quantifier;

            relabel (p, kids);
            rewritten = true;
            break;


        /* OptBindExpr:        let (letbind (var,
                                             flwr (let (letbind (var, 
                                                                 CoreExpr),
                                                        OptBindExpr)),
                                                   CoreExpr),
                                    OptBindExpr) */
        case 10:
            /*
             * Remove a nested let block:
             * 
             *     let $v1 := let $v2 := e return e' return e''
             *  -->
             *     let $v2 := e return
             *       let $v1 := e' return
             *         e''
             */
            *p = *let (letbind (LL(LRL(p)), LR(LRL(p))), /* let $v2 := e ret */
                     let (letbind (LL(p),                /*   let $v1 := e'  */
                                   flwr (R(LRL(p)),
                                         LRR(p))),
                          R(p)));                        /*     ret e''      */

            /* type let binding */
            p->sem.flwr.quantifier    = 
            R(p)->sem.flwr.quantifier = RR(p)->sem.flwr.quantifier;

            relabel (p, kids);
            rewritten = true;
            break;

        /* CoreExpr:           typesw (Atom,
                                       cases (case_ (SequenceType,
                                                     CoreExpr),
                                              default_ (CoreExpr))) */
        case 13:
            /*
             * If we statically know that the type of an expression matches
             * a typeswitch case, we can remove the typeswitch.
             */
            if (PFty_subtype (L(p)->type, RLL(p)->type)) {
                *p = *RLR(p);
                rewritten = true;
            }
            /*
             * If we statically know that the type of an expression
             * can never match a typeswitch case, we can remove the
             * typeswitch.
             */
            else if (PFty_disjoint (L(p)->type, RLL(p)->type)) {
                *p = *RRL(p);
                rewritten = true;
            }

            break;

        /* CoreExpr:           seq (empty, Atom) */
        case 21:
            *p = *R(p);
            rewritten = true;
            break;

        /* CoreExpr:           seq (Atom, empty) */
        case 22:
            *p = *L(p);
            rewritten = true;
            break;

        /* CoreExpr:           apply (arg (Atom, nil)) */
        case 48:
            if (! PFqname_eq (p->sem.fun->qname, PFqname (PFns_fn, "data"))) {
                /*
                 * If the argument is a subtype of atomic*, fn:data()
                 * returns the argument itself.
                 */
                if (PFty_subtype (TY(LL(p)), PFty_star (PFty_atomic ()))) {
                    *p = *LL(p);
                    rewritten = true;
                    break;
                }

                /*
                 * If the argument is a subtype of node*,
                 * fn:data() returns the typed-value of the argument.
                 */
                if (PFty_subtype (TY(LL(p)),
                                  PFty_star (PFty_node ()))) {
                    /*
                     *   fn:data(e)
                     * -->
                     *   for $v in e return
                     *     fn:typed-value ($v)
                     */
                    PFvar_t *v = new_var (NULL);
                    PFfun_t *fn_tv
                        = function (PFqname (PFns_pf, "typed-value"));

                    *p = *flwr (for_ (forbind (forvars (var (v), nil ()), 
                                               LL(p)), nil ()),
                                apply (fn_tv, arg (var (v), nil ())));

                    /* type-check what we just created */
                    PFty_check (p);

                    rewritten = true;

                    /*
                     * Re-label entire subtree. Type-checking may have
                     * modified all the state labels in the subtree, so
                     * we have to restore them.
                     */
                    PFcoreopt_label (p);
                    break;
                }
            }

            /*
             * If the argument is a subtype of
             * (comment | processing-instruction),
             * fn:typed-value() returns the string-value
             * of the argument.
             */
            if (! PFqname_eq (p->sem.fun->qname,
                              PFqname (PFns_pf, "typed-value"))
                && PFty_subtype (TY(LL(p)),
                                 PFty_choice (PFty_comm (), PFty_pi (NULL)))) {
                p->sem.fun = function (PFqname (PFns_pf, "string-value"));
                rewritten = true;
                break;
            }

            /*
             * On non-validated nodes (for non-validated nodes,
             * the return type of typed-value() has been inferred
             * as untypedAtomic (via the judgement data_on)),
             * typed-value() always returns the string-value of
             * the node as xs:untypedAtomic.
             * (see also Data Model, 6.2.3)
             */
            if (! PFqname_eq (p->sem.fun->qname,
                              PFqname (PFns_pf, "typed-value"))
                && PFty_subtype (TY(p), PFty_untypedAtomic ())) {

                PFcnode_t *c = PFmalloc (sizeof (PFcnode_t));
                PFvar_t   *v = new_var (NULL);

                /* apply string-value(), not typed-value() */
                *c = *p;
                c->sem.fun = function (PFqname (PFns_pf, "string-value"));

                *p = *flwr (let (letbind (var (v), c), nil ()),
                            seqcast (seqtype (PFty_untypedAtomic ()), 
                                     var (v)));

                /* type-check what we just created */
                PFty_check (p);

                rewritten = true;

                /*
                 * Re-label entire subtree. Type-checking may have
                 * modified all the state labels in the subtree, so
                 * we have to restore them.
                 */
                PFcoreopt_label (p);

                break;
            }

            /*
             * fn:zero-or-one() applied to something that is of
             * type empty returns the argument itself.
             */
            if (! PFqname_eq (p->sem.fun->qname,
                              PFqname (PFns_fn, "zero-or-one"))) {
                if (PFty_subtype (TY(LL(p)), PFty_empty ())) {
                    *p = *LL(p);
                    rewritten = true;
                    break;
                }
            }
            
            /*
             * fn:exactly-one() applied to something that is of
             * type empty returns an error.
             */
            if (! PFqname_eq (p->sem.fun->qname,
                              PFqname (PFns_fn, "exactly-one"))) {
                if (PFty_subtype (TY(LL(p)), PFty_empty ()))
                    PFoops (OOPS_FATAL,
                            "err:FORG0005, fn:exactly-one called with a"
                            "sequence containing zero or more than one item.");
                break;
            }
            
            /*
             * fn:boolean() applied to something that is already of
             * type xs:boolean returns the argument itself.
             */
            if (! PFqname_eq (p->sem.fun->qname,
                              PFqname (PFns_fn, "boolean"))) {
                if (PFty_subtype (TY(LL(p)), PFty_boolean ())) {
                    *p = *LL(p);
                    rewritten = true;
                    break;
                }
            }

            if (! PFqname_eq (p->sem.fun->qname,
                              PFqname (PFns_fn, "string"))) {
                /*
                 * If the argument is a subtype of xs:string,
                 * fn:string returns the argument itself.
                 */
                if (PFty_subtype (TY(LL(p)), PFty_string ())) {
                    *p = *LL(p);
                    rewritten = true;
                    break;
                }
                /*
                 * If the argument is a subtype of atomic, fn:string()
                 * is just a cast.
                 */
                else if (PFty_subtype (TY(LL(p)), PFty_atomic ())) {
                    PFcnode_t *c = PFmalloc (sizeof (PFcnode_t));
                    PFvar_t   *v = new_var (NULL);
                    
                    c = flwr (let (letbind (var (v), LL(p)), nil ()),
                              cast (seqtype (PFty_string ()), var (v)));

                    *p = *c;
                    
                    /* type-check what we just created */
                    PFty_check (p);
                    
                    rewritten = true;
                    /*
                     * Re-label entire subtree. Type-checking may have
                     * modified all the state labels in the subtree, so
                     * we have to restore them.
                     */
                    PFcoreopt_label (p);
                    break;
                }
                /*
                 * If the argument is a subtype of node,
                 * fn:string() returns the string-value
                 * of the argument.
                 */
                else if (PFty_subtype (TY(LL(p)), PFty_xs_anyNode ())) {
                    p->sem.fun = function (PFqname (PFns_pf, "string-value"));
                    /* type-check what we just created */
                    PFty_check (p);

                    rewritten = true;

                    /*
                     * Re-label entire subtree. Type-checking may have
                     * modified all the state labels in the subtree, so
                     * we have to restore them.
                     */
                    PFcoreopt_label (p);
                    break;
                }
            }

            /*
             * pf:item-sequence-to-untypedAtomic () is translated into
             * fn:string for each node followed by a fn:string-join ()
             * with the seperator " "
             */
            if (! PFqname_eq (p->sem.fun->qname,
                              PFqname (PFns_pf,
                                       "item-sequence-to-untypedAtomic"))) {
                
                PFvar_t   *v1 = new_var (NULL);
                PFvar_t   *v2 = new_var (NULL);
                PFfun_t   *fn_string
                    = function (PFqname (PFns_fn, "string"));
                PFfun_t   *fn_string_join
                    = function (PFqname (PFns_fn, "string-join"));

                *p = *flwr (let (letbind (
                                     var (v1),
                                     flwr (for_ (forbind (forvars (var (v2),
                                                                   nil ()),
                                                          LL(p)), nil ()),
                                           apply (fn_string, 
                                                  arg (var (v2), nil ())))), 
                                 nil ()),
                            apply (fn_string_join, 
                                   arg (var (v1),
                                        arg (str (" "),
                                             nil ()))));
                PFty_check (p);

                rewritten = true;

                /*
                 * Re-label entire subtree. Type-checking may have
                 * modified all the state labels in the subtree, so
                 * we have to restore them.
                 */
                PFcoreopt_label (p);

                break;
            }

            /*
             * The application of pf:item-sequence-to-node-sequence ()
             * to something that contains only nodes can be discarded.
             */
            if (! PFqname_eq (p->sem.fun->qname,
                              PFqname (PFns_pf,
                                       "item-sequence-to-node-sequence"))) {
                if (PFty_subtype (TY(LL(p)),
                                  PFty_star (PFty_xs_anyNode ()))) {
                    *p = *LL(p);
                    rewritten = true;
                    break;
                }
            }

            /*
             * The application of pf:merge-adjacent-text-nodes () 
             * to something that contains at most one text node
             * can be discarded.
             */
            if (! PFqname_eq (p->sem.fun->qname,
                              PFqname (PFns_pf, "merge-adjacent-text-nodes"))) {
                    /* is empty */
                if (LL(p)->kind == c_empty ||
                    /* contains exactly one text node */
                    PFty_subtype (TY(LL(p)), PFty_text()) ||
                    /* contains exactly one text node and some attributes*/
                    PFty_subtype (TY(LL(p)), PFty_seq (
                                                 PFty_star (
                                                     PFty_xs_anyAttribute ()),
                                                 PFty_text())) ||
                    /* contains no text nodes */
                    PFty_subtype (TY(LL(p)),
                                  PFty_star (
                                      PFty_choice (
                                          PFty_xs_anyElement (),
                                          PFty_choice (
                                              PFty_xs_anyAttribute (),
                                              PFty_choice (
                                                  PFty_doc (PFty_xs_anyType ()),
                                                  PFty_choice (
                                                      PFty_comm (),
                                                      PFty_pi (NULL)))))))) {
                    *p = *LL(p);
                    rewritten = true;
                    break;
                }
            }
            break;

        /* CoreExpr:           apply (arg (Atom, arg (Atom, nil))) */
        case 49:
            /*
             * fn:concat does not need to append an empty string
             */
            if (! PFqname_eq (p->sem.fun->qname,
                              PFqname (PFns_fn, "concat"))) {
                if (LRL(p)->kind == c_lit_str && !strcmp (LRL(p)->sem.str,"")) {
                    *p = *LL(p);
                    rewritten = true;
                    break;
                }
            }

            /*
             * fn:string-join() applied to an empty sequence
             * returns an empty string and applied to a singleton
             * sequence returns the singleton
             */
            if (! PFqname_eq (p->sem.fun->qname,
                              PFqname (PFns_fn, "string-join"))) {
                if (PFty_subtype (TY(LL(p)), PFty_empty ())) {
                    *p = *str ("");
                    TY(p) = PFty_string ();

                    /* assign new node a state label */
                    relabel (p, kids);
                    rewritten = true;
                    break;
                }
                else if (PFty_subtype (TY(LL(p)), PFty_string ())) {
                    *p = *LL(p);
                    rewritten = true;
                    break;
                }
            }
            break;

        /* Atom:                var */
        case 59:
            {
                /*
                 * See the comment in the declaration of var_env and
                 * the rule that processes let-bindings to understand
                 * what's going on here.
                 */
                unsigned short h = hash (p->sem.var);

                /*
                 * Look up this variable in the variable replacement
                 * environment.  If we find it there, do the replacement.
                 */
                for (unsigned int i = 0; i < PFarray_last (var_env[h]); i++)
                    if (((bind_t *) PFarray_at (var_env[h], i))->var
                            == p->sem.var) {
                        *p = *((bind_t *) PFarray_at (var_env[h], i))->atom;
                        rewritten = true;
                        break;
                    }
            }
            break;

        default:
            break;
    }

    return rewritten;
}

/*
 * Re-label a match pattern.
 *
 * Start with node @a p and relabel the subtree below. However, stop
 * if @a p is one of the pattern leaves, passed as the argument @a kids.
 */
static void 
relabel (PFcnode_t *p,  PFcnode_t **kids)
{
    unsigned int i;

    for (i = 0; i < MAX_KIDS; i++) {
        if (kids[i] && p == kids[i])
            return;
    }

    /* Relabel p's children. */
    if (!L(p) && !R(p)) {
        STATE_LABEL(p) = PFcoreopt_state (OP_LABEL(p), 0, 0);
    }
    else if (L(p) && !R(p)) {
        relabel (L(p), kids);
        STATE_LABEL(p) = PFcoreopt_state (OP_LABEL(p),
                                          STATE_LABEL(L(p)),
                                          0);
    }
    else if (!L(p) && R(p)) {
        relabel (R(p), kids);
        STATE_LABEL(p) = PFcoreopt_state (OP_LABEL(p),
                                          STATE_LABEL(R(p)),
                                          0);
    }
    else {
        relabel (L(p), kids);
        relabel (R(p), kids);
        STATE_LABEL(p) = PFcoreopt_state (OP_LABEL(p),
                                          STATE_LABEL(L(p)),
                                          STATE_LABEL(R(p)));
    }

}

/**
 * Optimize Core tree, with static type information available.
 *
 * @param r root of the XQuery Core tree
 * @return the optimized XQuery Core tree
 */
PFcnode_t *
PFcoreopt (PFcnode_t *r)
{
    assert (r);

    /* set up variable replacement environment */
    for (unsigned short i = 0; i < HASH_BUCKETS; i++)
        var_env[i] = PFarray (sizeof (bind_t));

    /* label the Core tree bottom up */
    PFcoreopt_label (r);

    /* invoke rewriting */
    while (reduce (r, 1))
        /* rewrite as long as there is something to do. */;

    return r;
}


/* vim:set shiftwidth=4 expandtab filetype=c: */
