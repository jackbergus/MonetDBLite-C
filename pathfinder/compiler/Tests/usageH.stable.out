stdout of test 'usageH` in directory 'compiler` itself:


# 15:32:19 >  
# 15:32:19 >  Mtimeout -timeout 120 ./usage usage 
# 15:32:19 >  


# 15:32:19 >  
# 15:32:19 >  Mtimeout -timeout 60 pf -h
# 15:32:19 >  

Pathfinder XQuery Compiler ($Revision$, $Date$)
(c) Database Group, Technische Universitaet Muenchen

Usage: pf [OPTION] [FILE]

  Reads from standard input if FILE is omitted.

= -h, --help: print short help message
= -H, --fullhelp: print this help message for advanced options
= -q, --quiet: do not print informational messages to log file
= -d[N], --debug: print debug information (default level=1)
= -A, --enable-algebra: turn on internal algebra code
= -M, --print-mil_summer: print MIL code (summer version) (default)
= -P, --print-human-readable: print internal tree structure human-readable
= -D, --print-att-dot: print internal tree structure in AT&T dot notation
= -X, --print-XML: print internal tree structure in XML notation
        (only works for logical algebra tree)
= -T, --timing: print elapsed times for compiler phases
= -O[0-3], --optimize: select optimization level (default=1)
= -t, --typing: print static types (in {...}) for Core
= -s, --stop-after: stop processing after certain phase:
         1  right after input parsing
         2  after loading XQuery modules
         3  after parse/abstract syntax tree has been normalized
         4  after namespaces have been checked and resolved
         5  after variable scoping has been checked
         6  after XQuery built-in functions have been loaded
         7  after valid function usage has been checked
         8  after XML Schema predefined types have been loaded
         9  after XML Schema document has been imported (if any)
        10  after the abstract syntax tree has been mapped to Core
        11  after the Core tree has been simplified/normalized
        12  after type inference and checking
        13  after XQuery Core optimization
        14  after the Core tree has been translated to the logical algebra
        15  after the logical algebra tree has been rewritten/optimized
        16  after the CSE on the logical algebra tree
        17  after compiling logical into the physical algebra
        18  after compiling the physical algebra into MIL code
        19  after the MIL program has been serialized
= -a, --print-abstract-syntax-tree: print abstract syntax tree
= -c, --print-core-tree: print internal Core language
= -l, --print-logical-algebra: print logical algebra tree
= -p, --print-physical-algebra: print physical algebra tree
= -f format, --format=format: print optional information in algebra dot output:
         C  print cost value (physical algebra)
         c  print constant attributes (logical/physical algebra)
         i  print icols property (logical/physical algebra)
         o  print orderings (physical algebra)
         +  print all available properties (logical/physical algebra)
= -o options, --optimize-algebra=options: optimize algebra according to options:
         O  apply optimization based on constant property
         I  apply optimization based on icols property
         K  apply optimization based on key property
         D  apply optimization based on domain property
         C  apply optimization using multiple properties (complex)
            - icols based optimization will be applied afterwards
         G  apply general optimization (without properties)
         V  apply optimization based on required values property
         [  map column names to unique column names
         J  push down equi-joins (requires unique column names)
         ]  map column names back (from unique names to original names)
         M  apply optimization based on multi-value dependencies
         }  introduce proxy operators that representoperator groups
         {  remove proxy operators
         P  infer all properties
            (used for debug output and physical algebra
         _  does nothing (used for structuring the options)
         (default is: '-o OIKDCG_VGO_[J]OKCG}IM{_[J]OKCG}IM{_[J]OKCG}IM{_[J]OKCG}IM{_[J]OKCGCGP')
= -e[0|1], --dead-code-elimination=[0|1]: dead code elimination:
         0 disable dead code elimination
         1 enable dead code elimination (default)
= -b, --enable-standoff: enable StandOff axis steps

Enjoy.

# 15:32:19 >  
# 15:32:19 >  Done.
# 15:32:19 >  

