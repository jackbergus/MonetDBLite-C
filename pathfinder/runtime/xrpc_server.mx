@ Copyright Notice:
@' -----------------
@'
@' The contents of this file are subject to the Pathfinder Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License.  You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/PathfinderLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
@' the License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the Pathfinder system.
@'
@' The Original Code has initially been developed by the Database &
@' Information Systems Group at the University of Konstanz, Germany and
@' is now maintained by the Database Systems Group at the Technische
@' Universitaet Muenchen, Germany.  Portions created by the University of
@' Konstanz and the Technische Universitaet Muenchen are Copyright (C)
@' 2000-2005 University of Konstanz and (C) 2005-2008 Technische
@' Universitaet Muenchen, respectively.  All Rights Reserved.
@'
@' $Id$
@'

@f xrpc_server
@a Ying Zhang

@t MIL primitives for XRPC server

@* Introduction
This module provides new MIL primitives for the server side support of
remote XQuery execution using HTTP connection on top of MonetDB for the
"AmbientDB" project.
@
@* Module Definition
@m
.MODULE xrpc_server;

@- HTTP server function(s)
@m
.COMMAND rpcd_start(int port, bit open, str options) : void = CMDrpcd_start;
"Start the HTTP server for RPC calls on the specified port."

.EPILOGUE = xrpc_epilogue;
.END xrpc_server;

@mil
# initialize xrpcd_admin: IPs that can execute modules from the special
# xrpc/admin directory
var xrpc_admin := bat(str,void);
xrpc_admin.insert(reverse(split(monet_environment.find("xrpc_admin"),";"))).bbpname("xrpc_admin");

# initialize xrpcd_user: IPs that can retrieve XML documents stored in
# the database using a URL of the form:
#               http://<host>[:port]/xrpc/<name>.xml
var xrpc_user := bat(str,void);
xrpc_user.insert(reverse(split(monet_environment.find("xrpc_user"),";"))).bbpname("xrpc_user");

# initialize xrpcd_trusted: URL prefixes for modules that anybody can execute
var xrpc_trusted := bat(str,void);
xrpc_trusted.insert(reverse(split(monet_environment.find("xrpc_trusted"),";"))).bbpname("xrpc_trusted");

proc add_xrpc_trusted(BAT[str,void] prefixes) : void {
    xrpc_trusted.insert(prefixes);
}

proc add_xrpc_trusted(BAT[void,str] prefixes) : void {
    xrpc_trusted.insert(prefixes.reverse());
}

proc add_xrpc_trusted(str prefix) : void {
    xrpc_trusted.insert(prefix, nil);
}

proc get_xrpc_open() : bit {
    if (monet_environment.exist("xrpc_open")){
        return bit(monet_environment.find("xrpc_open"));
    }
    ERROR("get_xrpc_open(): xrpc_open is not set\n");
}
ADDHELP("get_xrpc_open", "zhang", "Febuary 2007",
"DESCRIPTION:\n\
Find if the XRPC server should accept connections from other hosts",
"xrpc_server");

proc get_xrpc_port() : int {
    var xrpc_port := int_nil;

    if (monet_environment.exist("xrpc_port"))
      if (length(monet_environment.find("xrpc_port")) > 0)
        xrpc_port := int(monet_environment.find("xrpc_port"));

    if (isnil(xrpc_port)) {
        var mapi_port := int_nil;
        if (monet_environment.exist("mapi_port")){
            mapi_port := int(monet_environment.find("mapi_port"));
        } else {
            ERROR("get_xrpc_port(): mapi_port is not set\n");
        }
        xrpc_port := mapi_port+1;
    }
    return xrpc_port;
}
ADDHELP("get_xrpc_port", "zhang", "Febuary 2007",
"DESCRIPTION:\n\
find/calculate the port number to be used by the XRPC server",
"xrpc_server");

proc get_xrpc_options() : str {
    if (monet_environment.exist("xrpc_options")){
        return str(monet_environment.find("xrpc_options"));
    }
    return "";
}
ADDHELP("get_xrpc_options", "zhang", "March 2007",
"DESCRIPTION:\n\
Find the options that should be pass to the XRPC server, currently only\
\"timing\"",
"xrpc_server");

PROC rpcd_start() : void {
    var port := get_xrpc_port();
    xrpc_trusted.insert("http://127.0.0.1:"+str(port),nil);
    if (monet_environment.find("monet_welcome") = "yes") 
        printf("%c XRPC administrative console at http://127.0.0.1:%d/admin\n", int(35), port);
    fork( rpcd_start(port, get_xrpc_open(), get_xrpc_options()) );
}
ADDHELP("rpcd_start", "zhang", "Febuary 2007",
"DESCRIPTION:\n\
Start XPRC receiver using the default values as specified in \
\"monet_environment\"",
"xrpc_server");

@h
#ifndef XRPC_SERVER_H
#define XRPC_SERVER_H

#define XRPC_DOC_CALLBACK       "/xrpc/doc"
#define XRPC_ADM_CALLBACK       "/xrpc/admin"

#define ERR403                  "403 Forbidden"
#define ERR404                  "404 Bad Request"
#define ERR500                  "500 Internal Server Error"

#define OUT_OF_MEM              "Internal Receiver Error: out-of memory"
#define NOT_WELL_FORMED         "Request XML message not well-formed"

#define MAX_NR_PARAMS           4096

#endif /* XRPC_SERVER_H */

@c
#include "pf_config.h"
#include <gdk.h>
#include "pathfinder.h"
#include "pf_support.h"
#include "shredder.h"
#include "serialize.h"
#include "xrpc_common.h"
#include "xrpc_server.h"
#include "shttpd.h"

extern int xrpc_port;
static int rpcd_running = 0;
static int timing = 0;
static int listen_socket = -1;
static char datadir[1024];

static BAT* xrpc_trusted = NULL;
static BAT* xrpc_admin = NULL;

#define send_err(out, http_err, soap_err, err_reason) { \
    stream_printf(out, "HTTP/1.1 %s\r\n" \
            "Content-type: text/xml; charset=\"utf-8\"\r\n\r\n" \
            "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" \
            "<env:Envelope xmlns:env=\"%s\">" \
            "<env:Body>" \
            "<env:Fault>" \
            "<env:Code><env:Value>%s</env:Value></env:Code>" \
            "<env:Reason>" \
            "<env:Text xml:lang=\"en\">%s</env:Text>" \
            "</env:Reason>" \
            "</env:Fault></env:Body></env:Envelope>\n", \
            http_err, \
            SOAP_NS, soap_err, err_reason); \
    stream_flush(out); \
}

static INLINE void
clean_up(lng **argcnt,
         char **argtpe,
         char **argval,
         lng iterc,
         lng nr_args)
{
    lng i = 0;

    if(argcnt){
        for(i = 0; i < iterc; i++) GDKfree(argcnt[i]);
        GDKfree(argcnt);
    }
    if(argtpe){
        for(i = 0; i < nr_args; i++) GDKfree(argtpe[i]);
        GDKfree(argtpe);
    }
    if(argval){
        for(i = 0; i < nr_args; i++) GDKfree(argval[i]);
        GDKfree(argval);
    }
}

/**
 * Retrieves the request message from the connection and shred it to
 * BATs.
 *
 * @return BATs containing the shredded request message, or
 *         NULL if an error has occurred.
 */
static BAT *
request2bat(stream *out, char *reqmsg)
{
    char *strptr = NULL;
    lng percentage = 0;
    BAT *shredBAT = NULL;
    bit verbose = FALSE;

    if(!reqmsg){
        send_err(out, ERR404, "env:Sender", "No request message!");
        return NULL;
    }

    /* Remove the first line of the message, which containing
     * "<?xml...?>", so that the message we pass to CMDshred2bats starts
     * directly with <env:Envelope ...> */
    strptr = reqmsg + 7; /* strlen("<?xml...?>") >= 7 */
    if( (strstr(reqmsg, "<?xml") != reqmsg) ||
        (strptr = strchr(strptr, (int)'<')) == NULL ) {
        send_err(out, ERR404, "env:Sender", NOT_WELL_FORMED);
        return NULL;
    }
    if (!(shredBAT = BATnew(TYPE_str, TYPE_bat, 32))) {
        send_err(out, ERR500, "env:Receiver", OUT_OF_MEM);
        return NULL;
    }
    
    if( CMDshred_str(shredBAT, strptr, &percentage, NULL, &verbose) == GDK_FAIL ) {
        send_err(out, ERR404, "env:Sender", NOT_WELL_FORMED);
        BBPreclaim(shredBAT);
        shredBAT = NULL;
    }
    return shredBAT;
}

/**
 * Checks if a prefix of 'key' is present in a bat with a list of allowed prefixes
 *
 * Return 1 if yes, 0 otherwise.
 */
static int 
isAllowed(BAT *allowed, char* key)
{
    BATiter allowedi = bat_iterator(allowed);
    BUN p,q;
    BATloop(allowed, p, q) {
        char* prefix = BUNhead(allowedi,p);
        if (strncmp(key, prefix, strlen(prefix)) == 0)  
            return 1;
    }
    return (BATcount(allowed) == 0);
}

/**
 * Checks if the prefix of 'location' is listed in "xrpc_trusted".
 *
 * Return 1 if yes, 0 otherwise.
 */
static int
isTrusted(stream *out, char *location)
{
    if (!isAllowed(xrpc_trusted, location)) {
        char * msg = "Called module not allowed:";
        size_t len = strlen(msg) + strlen(location) + 11;
        size_t len_x = 0, pos = 0;
        char * err;
        BUN p,q;
        BATiter xrpc_trustedi = bat_iterator(xrpc_trusted);
        BATloop(xrpc_trusted, p, q) {
            char* prefix = BUNhead(xrpc_trustedi, p);
            len_x += strlen(prefix) + 4;
        }
        err = alloca(len + len_x);
        if (err) {
            len += len_x;
        } else {
            len_x = 0;
            err = alloca(len);
        }
        assert(err);
        pos += snprintf(err+pos, len-pos, "%s", msg);
        if (!len_x) {
            pos += snprintf(err+pos, len-pos, " '%s'.", location);
        } else {
            pos += snprintf(err+pos, len-pos, "\n'%s' not in", location);
            BATloop(xrpc_trusted, p, q) {
                char* prefix = BUNhead(xrpc_trustedi, p);
                pos += snprintf(err+pos, len-pos, "\n'%s',", prefix);
            }
            err[pos-1] = '.';
        }
        send_err(out, ERR403, "env:Sender", err);
        return 0;
    }
    return 1;
}

/**
 * Find the PRE of the XRPC_NS:request node between start_pre
 * and end_pre (incl.).
 * 
 * @return PRE, or 0 if not found.
 */
static INLINE oid
get_req_node_pre(
        stream *out,
        oid   start_pre,
        oid   end_pre,
        oid  *pre_propT,
        char *pre_kindT,
        BAT  *qn_prefix_uri_loc)
{
    oid i;
    char *qname = NULL;
    BATiter qn_puli;
    
    qn_puli = bat_iterator(qn_prefix_uri_loc);
    for (i = start_pre; i <= end_pre; i++) {
        if (pre_kindT[i] == ELEMENT) {
            qname = BUNtail(qn_puli, BUNfnd(qn_prefix_uri_loc, &(pre_propT[i])));
            if(strcmp(qname, "xrpc|"XRPC_NS"|request") == 0)
                return i;
        }
    }

    send_err(out, ERR404, "env:Sender", "The required \""XRPC_NS":request\" element not found");
    return 0;
}

/**
 * Given the pre value of a type node, return the name of the type node
 * as a string in the form 'ns_uri:loc'.
 *
 * NB: the return value of this function, if not NULL, should be freed.
 *
 * @return the name of the type node, or
 *         NULL if anything went wrong.
 */
static char *
get_val_type(oid  tpe_node_pre,
         oid *pre_propT,
         BAT *qn_loc)
{
    BATiter qn_loci = bat_iterator(qn_loc);
    char *loc = NULL, *res = NULL;
    size_t i, j, plen, llen, len;

    if(!(loc = (char*)BUNtail(qn_loci, pre_propT[tpe_node_pre])))
        return NULL;

    llen = strlen(loc);
    if(strcmp(loc, "atomic-value") == 0){
        plen = 5;
        len = llen + plen;
        if(!(res = GDKmalloc(len + 1))) return NULL;
        res[0] = 'x';
        res[1] = 'r';
        res[2] = 'p';
        res[3] = 'c';
        res[4] = ':';
    } else {
        plen = 3;
        len = llen + plen;
        if(!(res = GDKmalloc(len + 1))) return NULL;
        res[0] = 'x';
        res[1] = 's';
        res[2] = ':';
    }

    for(i = plen, j = 0; i < len && j < llen; i++, j++)
        res[i] = loc[j];
    res[len] = '\0';
    return res;
}

/* Convert string to long int.  Set 'errno' if error occurs. */
static INLINE long int
my_strtol(stream *out, bte isSigned, char *val_ptr, char *attr_name)
{
    char errstr[1024];

    errno = 0;
    long int ret = strtoll(val_ptr, NULL, 10);

    if(errno){
        snprintf(errstr, 1024,
                "Invalid value (\"%s\") of numeric attribute \"%s\": %s",
                val_ptr, attr_name, strerror(errno));
        send_err(out, ERR404, "env:Sender", errstr);
        return 0;
    } else if(ret < 0 && !isSigned){
        errno = EINVAL;
        snprintf(errstr, 1024,
                "Invalid value (\"%s\") of numeric attribute \"%s\": "
                "should not be negative",
                val_ptr, attr_name);
        send_err(out, ERR404, "env:Sender", errstr);
        return 0;
    }
    return ret;
}

/**
 * @return GDK_SUCCEED, or
 *         GDK_FAIL if an error has occurred.
 */
static int 
getCallValues(stream *out,
              BAT *shredBAT,
              bit isAdmin,
              str *module,          /* outputs: */
              str *location,
              str *method,
              bit *_isSimpleParam,
              bool *_updCall,
              lng *_argc,
              lng *_iterc,
              lng *_nr_args,
              lng ***_argcnt,
              str **_argtpe,
              str **_argval)
{
    bit isSimpleParam = 1;
    bool updCall = FALSE;
    lng argc = 0, iterc = 0, nr_args = 0;
    lng **argcnt = NULL;
    lng i = 0, j = 0, k = 0, max_args = 0;
    str *argtpe = NULL, *argval = NULL;
    char *arity_str = NULL, *itercnt_str = NULL;
    char errstr[1024];

    BATiter shredBATi, prop_vali, qn_puli;
    BAT *pre_size = NULL, *pre_level = NULL, *pre_kind = NULL,  *pre_prop = NULL;
    BAT *qn_loc   = NULL, *qn_uri_loc = NULL;
    BAT *prop_val = NULL,  *prop_text = NULL, *qn_prefix_uri_loc = NULL;
    BAT *attr_own = NULL,  *attr_qn = NULL, *attr_prop = NULL;
    BAT *frag_root = NULL;
    int   *pre_sizeT = NULL; /* Arrays holding the Tail values of some of the BATs above. */
    char  *pre_levelT = NULL, *pre_kindT = NULL;
    char  *text_base = NULL; /* text base of prop_text tail values */
    oid   *attr_ownT = NULL, *attr_qnT = NULL, *attr_propT = NULL;
    oid   *pre_propT = NULL;
    var_t *prop_textT = NULL;

    oid req_node_pre = 0, val_node_pre = 0;
    oid call_node_pre = 0,  seq_node_pre = 0,  tpe_node_pre = 0;
    oid next_call_node_pre = 0, next_seq_node_pre = 0, next_tpe_node_pre = 0;
    oid ao_ptr = 0; /* cursor in the attr_own bat */
    size_t nattrs = 0;
    
    /* We need to clean up the pre_size, pre_level, pre_prop and
     * pre_kind values between two node values, to prevent that
     * a node value is treated as part of the message */
    oid start_invalidate = 0; /* indicates from which node we should
                                 start with invalidation */
    char level_diff = 0; /* indicates how many levels each pre_level
                            value of a node should be reduced. */

    i = BUNfirst(shredBAT);
    shredBATi = bat_iterator(shredBAT);
    /* FIXME: should used BATdescriptor */
    pre_size   = BBP_cache(*(bat*)BUNtail(shredBATi,i+PRE_SIZE) );
    pre_level  = BBP_cache(*(bat*)BUNtail(shredBATi,i+PRE_LEVEL));
    pre_prop   = BBP_cache(*(bat*)BUNtail(shredBATi,i+PRE_PROP) );
    pre_kind   = BBP_cache(*(bat*)BUNtail(shredBATi,i+PRE_KIND) );
    prop_text  = BBP_cache(*(bat*)BUNtail(shredBATi,i+PROP_TEXT));
    text_base  = BBP_cache(*(bat*)BUNtail(shredBATi,i+PROP_TEXT))->theap->base;
    prop_val   = BBP_cache(*(bat*)BUNtail(shredBATi,i+PROP_VAL) );
    qn_prefix_uri_loc =BBP_cache(*(bat*)BUNtail(shredBATi,i+QN_PREFIX_URI_LOC));
    qn_uri_loc = BBP_cache(*(bat*)BUNtail(shredBATi,i+QN_URI_LOC)   );
    qn_loc     = BBP_cache(*(bat*)BUNtail(shredBATi,i+QN_LOC)   );
    frag_root  = BBP_cache(*(bat*)BUNtail(shredBATi,i+FRAG_ROOT));
    attr_own   = BBP_cache(*(bat*)BUNtail(shredBATi,i+ATTR_OWN) );
    attr_qn    = BBP_cache(*(bat*)BUNtail(shredBATi,i+ATTR_QN)  );
    attr_prop  = BBP_cache(*(bat*)BUNtail(shredBATi,i+ATTR_PROP));

    prop_vali = bat_iterator(prop_val);
    qn_puli = bat_iterator(qn_prefix_uri_loc);

    pre_sizeT  = (int*)  Tloc(pre_size, BUNfirst(pre_size));
    pre_levelT = (char*) Tloc(pre_level, BUNfirst(pre_level));
    pre_propT  = (oid*)  Tloc(pre_prop, BUNfirst(pre_prop));
    pre_kindT  = (char*) Tloc(pre_kind, BUNfirst(pre_kind));
    prop_textT = (var_t*)Tloc(prop_text, BUNfirst(prop_text));
    attr_ownT  = (oid*)  Tloc(attr_own, BUNfirst(attr_own));
    attr_qnT   = (oid*)  Tloc(attr_qn, BUNfirst(attr_qn));
    attr_propT = (oid*)  Tloc(attr_prop, BUNfirst(attr_prop));

    pre_level  = BATsetaccess(pre_level, BAT_WRITE);
    frag_root  = BATsetaccess(frag_root, BAT_APPEND);
    nattrs     = BATcount(attr_prop);

    /* There are at least two nodes before "request", namely "Envelope"
     * and "Body" (a "Header" node is optional). There are at least one
     * node after "request", namely "sequence". */
    if (!(req_node_pre = get_req_node_pre(out, 2, BATcount(pre_size),
                    pre_propT, pre_kindT, qn_prefix_uri_loc)))
        return GDK_FAIL;
    while(ao_ptr < nattrs && attr_ownT[ao_ptr] < req_node_pre) ao_ptr++;
    while(ao_ptr < nattrs && attr_ownT[ao_ptr] == req_node_pre) {
        char *pul = (char*) BUNtail(qn_puli, BUNfirst(qn_prefix_uri_loc) + attr_qnT[ao_ptr]);
        char *val = (char*) BUNtail(prop_vali, BUNfirst(prop_val) + attr_propT[ao_ptr]);
        if(strcmp(pul, "xrpc|"XRPC_NS"|module") == 0) {
            *module = val;
        } else if(strcmp(pul,"xrpc|"XRPC_NS"|location") == 0) {
            *location = val;
        } else if(strcmp(pul,"xrpc|"XRPC_NS"|method") == 0) {
            *method = val;
        } else if(strcmp(pul,"xrpc|"XRPC_NS"|arity") == 0) {
            arity_str = val;
        } else if(strcmp(pul,"xrpc|"XRPC_NS"|iter-count") == 0) {
            itercnt_str = val;
        } else if(strcmp(pul,"xrpc|"XRPC_NS"|updCall") == 0) {
            if((val[0] == 't' && val[1] == 'r' && val[2] == 'u' && val[3] == 'e') ||
               (val[0] == 'T' && val[1] == 'r' && val[2] == 'u' && val[3] == 'e') ||
               (val[0] == 'T' && val[1] == 'R' && val[2] == 'U' && val[3] == 'E'))
                updCall = TRUE;
        }
        ao_ptr++;
    }
    if(!(*module) || !(*location) || !(*method) || !(*arity_str)) {
        GDKerror("getCallValues: the xrpc:request node doesn't contain the required attributes\n");
        send_err(out, ERR404, "env:Sender", 
                "The \""XRPC_NS":request\" node didn't contain the required attributes\n");
        return GDK_FAIL;
    }
    if(!isAdmin && !isTrusted(out, *location))
        return GDK_FAIL;
    if(itercnt_str){
        iterc = my_strtol(out, FALSE, itercnt_str, "iter-count");
        if(errno) {
            clean_up(argcnt, argtpe, argval, iterc, nr_args);
            return GDK_FAIL;
        }
    } else {
        iterc = BATcount(BATselect(qn_uri_loc, XRPC_NS"|call", XRPC_NS"|call"));
    }
    argc = my_strtol(out, FALSE, arity_str, "arity");
    if(errno) {
        clean_up(argcnt, argtpe, argval, iterc, nr_args);
        return GDK_FAIL;
    }

    if (!(argcnt = GDKmalloc(iterc * sizeof(lng*)))) {
        send_err(out, ERR500, "env:Receiver", OUT_OF_MEM);
        clean_up(argcnt, argtpe, argval, iterc, nr_args);
        return GDK_FAIL;
    }
    for (i = 0; i < iterc; i++) {
        /* we allocate _at least one_ argcnt for each parameter, so that
         * we have a place to note that a function has zero parameter */
        argcnt[i] = GDKmalloc( (argc>0?argc:1) * sizeof(lng) );
        if(!argcnt[i]){
            send_err(out, ERR500, "env:Receiver", OUT_OF_MEM);
            clean_up(argcnt, argtpe, argval, iterc, nr_args);
            return GDK_FAIL;
        }
        argcnt[i][0] = 0;
        for (j = 1; j < argc; j++)
            argcnt[i][j] = 0;
    }

    max_args = iterc * (argc>0?argc:1) * MAX_NR_PARAMS;
    argval = GDKmalloc(max_args * sizeof(char *));
    argtpe = GDKmalloc(max_args * sizeof(char *));
    if (!argval || !argtpe) {
        send_err(out, ERR500, "env:Receiver", OUT_OF_MEM);
        clean_up(argcnt, argtpe, argval, iterc, nr_args);
        return GDK_FAIL;
    }
   
    call_node_pre = req_node_pre + 1;
    /* Fill the arrays 'argcnt', 'argval', 'argtpe' */
    /* i: index in xrpc:call; j: index of xrpc:sequence per xrpc:call */
    for(i = 0; next_call_node_pre < BATcount(pre_size); call_node_pre = next_call_node_pre, i++) {
        /* skip possible empty text node, without further checking */
        call_node_pre += (pre_kindT[call_node_pre] == ELEMENT ? 0 : 1);
        next_call_node_pre = call_node_pre + pre_sizeT[call_node_pre] + 1;

        for(seq_node_pre = call_node_pre + 1, j = 0; seq_node_pre < next_call_node_pre;
                seq_node_pre = next_seq_node_pre, j++) {
            /* skip possible empty text nodes, without further checking */
            seq_node_pre += (pre_kindT[seq_node_pre] == ELEMENT ? 0 : 1);
            next_seq_node_pre = seq_node_pre + pre_sizeT[seq_node_pre] + 1;
       
            for(tpe_node_pre = seq_node_pre+1, k=1; tpe_node_pre < next_seq_node_pre;
                    tpe_node_pre = next_tpe_node_pre, k++) {
                /* skip possible empty text nodes, without further checking */
                tpe_node_pre += (pre_kindT[tpe_node_pre] == ELEMENT ? 0 : 1);
                next_tpe_node_pre = tpe_node_pre + pre_sizeT[tpe_node_pre]+1;
                /* advance our cursor in attr_own */
                while(ao_ptr < nattrs && attr_ownT[ao_ptr] < tpe_node_pre) ao_ptr++;

                if (nr_args == max_args) {
                    max_args *= 2;
                    char **bptr = GDKrealloc(argval, max_args * sizeof(char *));
                    if (!bptr) {
                        send_err(out, ERR500, "env:Receiver",OUT_OF_MEM);
                        clean_up(argcnt,argtpe,argval,iterc,nr_args);
                        return GDK_FAIL;
                    }
                    argval = bptr;

                    if(!(bptr = GDKrealloc(argtpe, max_args * sizeof(char *)))) {
                        send_err(out, ERR500, "env:Receiver",OUT_OF_MEM);
                        clean_up(argcnt,argtpe,argval,iterc,nr_args);
                        return GDK_FAIL;
                    }
                    argtpe = bptr;
                }

                if (!(argtpe[nr_args] = get_val_type(tpe_node_pre, pre_propT, qn_loc))) {
                    send_err(out, ERR500, "env:Receiver",OUT_OF_MEM);
                    clean_up(argcnt,argtpe,argval,iterc,nr_args);
                    return GDK_FAIL;
                }
                
                if(strcmp(argtpe[nr_args], "xrpc:atomic-value") == 0) {
                    GDKfree(argtpe[nr_args]); /* find sub-type of the atomic-value */
                    char *tptr = NULL;
                    while(ao_ptr < nattrs && attr_ownT[ao_ptr] == tpe_node_pre) {
                        if(strcmp((char*)BUNtail(qn_puli, BUNfirst(qn_prefix_uri_loc)+attr_qnT[ao_ptr]),
                                    "xsi|"XSI_NS"|type") == 0) {
                            tptr = (char*)BUNtail(prop_vali, BUNfirst(prop_val)+attr_propT[ao_ptr]);
                        }
                        ao_ptr++;
                    }
                    if(!tptr){
                        snprintf(errstr, 1024, "XRPC request: iter["LLFMT"]/param["LLFMT"]/value["LLFMT"]"
                                " does not have an \""XSI_NS":type\"", i+1, j+1, k);
                        send_err(out, ERR404, "env:Sender", errstr);
                        clean_up(argcnt,argtpe,argval,iterc,nr_args);
                        return GDK_FAIL;
                    }
                    /* we always GDKfree argtpe[*], because all the
                     * argtpe of node-typed values have to be GDKmalloc-d */
                    argtpe[nr_args] = GDKstrdup(tptr);

                    val_node_pre = tpe_node_pre + 1;
                    if(pre_sizeT[tpe_node_pre] != 1 || pre_kindT[val_node_pre] != TEXT) {
                        snprintf(errstr, 1024, "XRPC request: iter["LLFMT"]/param["LLFMT"]/value["LLFMT"]"
                                "of type \"%s\" is expected to have a simple value",
                                i+1, j+1, k, argtpe[nr_args]);
                        send_err(out, ERR404, "env:Sender", errstr);
                        clean_up(argcnt,argtpe,argval,iterc,nr_args);
                        return GDK_FAIL;
                    }
                    /* we always GDKfree argval[*], because all the
                     * argval of node-typed values have to be GDKmalloc-d */
                    argval[nr_args] = GDKstrdup(text_base + prop_textT[pre_propT[val_node_pre]]);
                } else if (strcmp(argtpe[nr_args], "xs:attribute") == 0) {
                    /* 32-bytes is enough to hold the string
                     * representation of the largest 64bits OID value */
                    argval[nr_args] = GDKmalloc(32);
                    if (!argval[nr_args]) {
                        send_err(out, ERR500, "env:Receiver", OUT_OF_MEM);
                        clean_up(argcnt,argtpe,argval,iterc,nr_args);
                        return GDK_FAIL;
                    }

                    while(ao_ptr < nattrs && attr_ownT[ao_ptr] < tpe_node_pre) ao_ptr++;
                    if (attr_ownT[ao_ptr] == tpe_node_pre) {
                        val_node_pre = ao_ptr;
                    } else {
                        snprintf(errstr, 1024, "XRPC request: "
                                "iter[" LLFMT "]/param[" LLFMT "]/value" LLFMT " "
                                "of type "XRPC_NS":attribute is expected to have a single attribute",
                                i+1, j+1, k);
                        send_err(out, ERR404, "env:Sender", errstr);
                        clean_up(argcnt,argtpe,argval,iterc,nr_args);
                        return GDK_FAIL;
                    }

                    snprintf(argval[nr_args], 32, OIDFMT, val_node_pre);
                    isSimpleParam = 0;
                } else {
                    /* 32-bytes is enough to hold the string
                     * representation of the largest 64bits OID value */
                    argval[nr_args] = GDKmalloc(32);
                    if (!argval[nr_args]) {
                        send_err(out, ERR500, "env:Receiver", OUT_OF_MEM);
                        clean_up(argcnt,argtpe,argval,iterc,nr_args);
                        return GDK_FAIL;
                    }

                    if(strcmp(argtpe[nr_args], "xs:element") == 0 ||
                       strcmp(argtpe[nr_args], "xs:text") == 0 ||
                       strcmp(argtpe[nr_args], "xs:comment") == 0 ||
                       strcmp(argtpe[nr_args], "xs:processing-instruction") == 0) {
                        val_node_pre = tpe_node_pre + 1;
                        val_node_pre += (pre_kindT[val_node_pre] == ELEMENT ? 0 : 1);
                    } else if (strcmp(argtpe[nr_args], "xs:document") == 0) {
                        val_node_pre = tpe_node_pre;
                        pre_kindT[val_node_pre] = 4;
                        pre_propT[val_node_pre] = oid_nil;
                    } else {
                        snprintf(errstr, 1024, "XRPC request: "
                                "iter["LLFMT"]/param["LLFMT"]/value["LLFMT"] "
                                "contains unsupported type: %s\n",
                                i+1, j+1, k, argtpe[nr_args]);
                        send_err(out, ERR404, "env:Sender", errstr);
                        clean_up(argcnt,argtpe,argval,iterc,nr_args);
                        return GDK_FAIL;
                    }

                    snprintf(argval[nr_args], 32, OIDFMT, val_node_pre);
                    frag_root = BUNappend(frag_root, (ptr)&val_node_pre, TRUE);
                    isSimpleParam = 0;

                    /* reassign level values for the ELEM nodes */
                    level_diff = pre_levelT[val_node_pre];
                    if(strcmp(argtpe[nr_args], "xs:document") == 0)
                        level_diff++;
                    unsigned long long l = val_node_pre;
                    for( ; l <= (val_node_pre + pre_sizeT[val_node_pre]); l++){
                        pre_levelT[l] -= level_diff;
                    }
                    for (l = start_invalidate; l < val_node_pre; l++) {
                        pre_levelT[l] = -3;
                        pre_sizeT[l] = 0;
                    }
                    start_invalidate = val_node_pre + pre_sizeT[val_node_pre] + 1;
                }
                argcnt[i][j]++;
                nr_args++;
            } /* end loop 'xrpc:<type>' */
        } /* end loop 'xrpc:sequence' */
    } /* end loop 'xrpc:call' */
    frag_root = BATsetaccess(frag_root, BAT_READ);

    *_isSimpleParam = isSimpleParam;
    *_updCall = updCall;
    *_argc = argc;
    *_iterc = iterc;
    *_nr_args = nr_args;
    *_argcnt = argcnt;
    *_argtpe = argtpe;
    *_argval = argval;
    return GDK_SUCCEED;
}

/**
 * @return GDK_SUCCEED, or
 *         GDK_FAIL if an error has occurred.
 */
static int
execQuery(mapi_client *mc,
          int serializeMode,
          char *module,
          char *location,
          char *method,
          bool updCall,
          lng argc,
          lng iterc,
          lng **argcnt,
          str *argtpe,
          str *argval,
          BAT *shredBAT)
{
    int ret = GDK_SUCCEED;
	char errbuf[GDKMAXERRLEN], errbuf_all[GDKMAXERRLEN*2], *errbuf_bak = GDKerrbuf;

    /* Possible values of serializeMode:
     * 0: xml-noheader-xrpc
     *    This is the normal serialize mode used for XRPC calls
     * 1: timing-xml-noheader-xrpc
     *    Let the XRPC server print the time of XRPC_Server_Application
     *    and XRPC_Network_Server_2_Client at the server side.
     * 2: xml
     *    Used for the GET, PUT, DELETE HTTP requests to avoid "xrpc"
     *    mode of serialization
     * 3. timing-xml
     *    Again, print time info at the XRPC server side, but is usually
     *    not used.
     */
	*errbuf = 0;
	GDKsetbuf(errbuf);
    char *err = xquery_method(mc, serializeMode, module, location,
                              method, argc, iterc, argcnt, argtpe,
                              argval, shredBAT);
    if (err) {
        ret = GDK_FAIL;
        if(err == ((char*)-1)) {
            if(*errbuf) {
                send_err(mc->c->fdout, ERR404, "env:Sender", errbuf);
            } else {
                send_err(mc->c->fdout, ERR404, "env:Sender", "Error occurred during execution.");
            }
        } else {
            if(*errbuf) {
                snprintf(errbuf_all, GDKMAXERRLEN*2, "%s\nDue to earlier error:\n%s", err, errbuf);
                send_err(mc->c->fdout, ERR404, "env:Sender", errbuf_all);
            } else {
                send_err(mc->c->fdout, ERR404, "env:Sender", err);
            }
        }
    } else if (updCall) { /* send empty HTTP OK header for updating request */
        stream_write(mc->c->fdout, "HTTP/1.1 200 OK\r\n"
                "Content-type: text/xml; charset=\"utf-8\"\r\n\r\n", 1, 60);
    }

    stream_flush(mc->c->fdout);
	GDKsetbuf(errbuf_bak);
    return ret;
}

/**
 * The XRPC server callback function.
 *
 * @return GDK_SUCCEED, or
 *         GDK_FAIL if an error has occurred.
 */
static int 
xrpc_handle_request(mapi_client *mc, struct shttpd_callback_arg *arg)
{
    BAT *shredBAT;
    char *module = NULL, *location = NULL, *method = NULL;
    bit isSimpleParam = 1;
    bool updCall = FALSE;
    lng argc = 0, iterc = 0, nr_args = 0;
    lng time_xrpcServDeSeria;
    lng **argcnt = NULL; /* argcnt[iterc][argc] */
    str *argtpe = NULL, *argval = NULL;
    int serializeMode = timing; 

    time_xrpcServDeSeria = GDKusec();
    shredBAT = request2bat(mc->c->fdout, shttpd_get_msg(arg));
    if(!shredBAT)
        return GDK_FAIL;

    if(getCallValues(mc->c->fdout, shredBAT, 0,
                     &module, &location, &method,
                     &isSimpleParam, &updCall, &argc, &iterc, &nr_args,
                     &argcnt, &argtpe, &argval) == GDK_FAIL ) {
        BBPreclaim(shredBAT);
        return GDK_FAIL;
    }
    time_xrpcServDeSeria = GDKusec() - time_xrpcServDeSeria;
    
    /* Execute the query and send XRPC response */
    if(execQuery(mc, serializeMode, module, location, method, updCall,
                 argc, iterc, argcnt, argtpe, argval,
                 isSimpleParam?NULL:shredBAT) == GDK_FAIL) {
        clean_up(argcnt, argtpe, argval, iterc, nr_args);
        BBPreclaim(shredBAT);
        return GDK_FAIL;
    }

    if (timing) {
        fprintf(stdout,
                "XRPC_Server_DeSerialisation:   " LLFMT " microsec\n",
                time_xrpcServDeSeria);
    }

    clean_up(argcnt, argtpe, argval, iterc, nr_args);
    BBPreclaim(shredBAT);
    return GDK_SUCCEED;
}


/**
 * The MonetDB/XQuery Document Management callback function.
 *
 * @return GDK_SUCCEED, or
 *         GDK_FAIL if an error has occurred.
 */
static int 
xrpc_handle_admin_request(mapi_client *mc, struct shttpd_callback_arg *arg)
{
    char *module = NULL, *location = NULL, *method = NULL;
    int serializeMode = 0;
    bit isSimpleParam = 1;
    bool updCall = FALSE;
    BAT *shredBAT;
    lng argc = 0, iterc = 0, nr_args = 0;
    lng **argcnt;
    str *argtpe, *argval;
    char dotted[80];
    /* Work arround for the problem that when only loading
     * the xrpc_client/xrpc_server module (without first load
     * module(pathfinder)), the linker doesn't realize that although
     * lib_logger is not used by the XRPC modules, it is needed by
     * lib_pathfinder.  This results in the error:
     * lib_pathfinder.so.0: undefined symbol: TYPE_logger.
     * So here, we misuse the not-yet-initialized 'ret' to add a
     * dependency on lib_logger in xrpc_server.
     */
    int ret = TYPE_logger;

    struct in_addr addr = shttpd_get_inAddr(arg);
#ifdef HAVE_INET_NTOP
    (void) inet_ntop(AF_INET, (void*) &addr, dotted, sizeof(dotted));
#else
    /* not normally thread safe, but on Windows where we need this it
     * actually *is* thread safe */
    strncpy(dotted, inet_ntoa(addr), sizeof(dotted));
#endif
    if (!isAllowed(xrpc_admin, dotted)) {
        char err[1024];
        snprintf(err, 1024, "Permission denied: your host (%s) "
                "does not have admin rights", dotted);
        send_err(mc->c->fdout, ERR403, "env:Sender", err);
        return GDK_FAIL;
    }

    shredBAT = request2bat(mc->c->fdout, shttpd_get_msg(arg));
    if(!shredBAT)
        return GDK_FAIL;

    if(getCallValues(mc->c->fdout, shredBAT, 1,
                     &module, &location, &method,
                     &isSimpleParam, &updCall, &argc, &iterc, &nr_args,
                     &argcnt, &argtpe, &argval) == GDK_FAIL){
        BBPreclaim(shredBAT);
        return GDK_FAIL;
    }

    if(strcmp(module, MXQ_ADMIN) != 0){
        send_err(mc->c->fdout, ERR404, "env:Sender",
                "Invalid namespace of admin module");
        clean_up(argcnt, argtpe, argval, iterc, nr_args);
        BBPreclaim(shredBAT);
        return GDK_FAIL;
    }

    ret = execQuery(mc, serializeMode, module, location, method, updCall,
            argc, iterc, argcnt, argtpe, argval, isSimpleParam?NULL:shredBAT);

    clean_up(argcnt, argtpe, argval, iterc, nr_args);
    BBPreclaim(shredBAT);
    return ret;
}

/**
 * Handle the document retrieving request using a URL of the form:
 *          http://<host>[:port]/xrpc/doc/<name>.xml
 *
 * @return GDK_SUCCEED, or
 *         GDK_FAIL if an error has occurred.
 */
static int 
xrpc_handle_file_request(mapi_client *mc, struct shttpd_callback_arg *arg)
{
    char *method = NULL, *uri = shttpd_get_uri(arg);
    char location[1024];
    int ret = GDK_FAIL;
    lng **argcnt = NULL;

    lng time_xrpcServDeSeria = GDKusec();

    /* skip callback identifier that directed us here */
    uri += strlen(XRPC_DOC_CALLBACK);

    /* we don't always have the second '/' */
    if(uri[0] == '/') uri++;
    if(uri[0] == '\0'){
        send_err(mc->c->fdout, ERR403, "env:Sender", "Directory listing denied");
        return GDK_FAIL;
    }
    snprintf(location, 1024, "http://127.0.0.1:%d/admin/admin.xq", xrpc_port);
    method = shttpd_get_method(arg);
    argcnt = GDKmalloc(sizeof(lng*));
    if (!argcnt){
        send_err(mc->c->fdout, ERR500, "env:Receiver", OUT_OF_MEM);
        return GDK_FAIL;
    }
    argcnt[0] = GDKmalloc(2 * sizeof(lng));
    if (!argcnt[0]){
        send_err(mc->c->fdout, ERR500, "env:Receiver", OUT_OF_MEM);
        GDKfree(argcnt);
        return GDK_FAIL;
    }
    argcnt[0][0] = argcnt[0][1] = 1;

    if (strcmp(method, "PUT") == 0) {
        lng percentage = 1;
        bit verbose = FALSE;
        BAT *shredBAT = BATnew(TYPE_str, TYPE_bat, 32);
        if (!shredBAT){
            send_err(mc->c->fdout, ERR500, "env:Receiver", OUT_OF_MEM);
            GDKfree(argcnt[0]); GDKfree(argcnt);
            return GDK_FAIL;
        }

        ret = CMDshred_str(shredBAT, shttpd_get_msg(arg), &percentage,
                NULL, &verbose);
        if (ret == GDK_FAIL) {
            BBPreclaim(shredBAT);
            send_err(mc->c->fdout, ERR404, "env:Sender", NOT_WELL_FORMED);
            GDKfree(argcnt[0]);
            GDKfree(argcnt);
            return ret;
        }

        str argtpe[2] = { "xs:string", "xs:document" };
        str argval[2] = { uri , "0" };
        time_xrpcServDeSeria = GDKusec() - time_xrpcServDeSeria;

        ret = execQuery(mc, 2|timing, MXQ_ADMIN, location, method, FALSE, 2, 1,
                argcnt, argtpe, argval, shredBAT);
        BBPreclaim(shredBAT);
    } else { /* GET/DELETE */
        str argtpe[1] = { "xs:string" };
        str argval[1] = { uri };
        time_xrpcServDeSeria = GDKusec() - time_xrpcServDeSeria;

        ret = execQuery(mc, 2|timing, MXQ_ADMIN, location, method, FALSE, 1, 1,
                argcnt, argtpe, argval, NULL);
    }

    if (timing && ret != GDK_FAIL) {
        fprintf(stdout,
                "XRPC_Server_DeSerialisation:   %lld microsec\n",
                time_xrpcServDeSeria);
    }

    GDKfree(argcnt[0]);
    GDKfree(argcnt);
    return ret;
}

/*
 * XRPC MAPI client handler (overrides the xquery_client_engine)
 */
static void 
xrpc_client_engine(mapi_client *mc)
{
    struct shttpd_callback_arg *arg = (struct shttpd_callback_arg *) mc->arg;
    char *uri = shttpd_get_uri(arg);

    if (strncmp(uri, XRPC_ADM_CALLBACK, strlen(XRPC_ADM_CALLBACK)) == 0) {
        (void) xrpc_handle_admin_request(mc, arg);
    } else if (strncmp(uri, XRPC_DOC_CALLBACK, strlen(XRPC_DOC_CALLBACK)) == 0) {
        (void) xrpc_handle_file_request(mc, arg); /* GET/PUT/DELETE file request */
    } else if (strncmp(uri, XRPC_REQ_CALLBACK, strlen(XRPC_REQ_CALLBACK)) == 0) {
        (void) xrpc_handle_request(mc, arg);
    }

    /* clean up */
    mc->engine = xquery_client_engine;
    xquery_client_end(mc, NULL);
    shttpd_finish(arg);
}


/*
 * handle request asynchronously using a MAPI xquery client
 */
static int
xrpc_fork_mapiclient(struct shttpd_callback_arg *arg)
{
    /* get a MAPI thread from the xquery client pool */
    int sock = shttpd_get_socket(arg);
    
    stream *fdin = socket_rastream(sock, "XRPC read");
    if (fdin && stream_errnr(fdin) == 0) {
        stream *fdout = wbstream(socket_wastream(sock, "XRPC write"), 8192);
        if (fdout && stream_errnr(fdout) == 0) {
            mapi_client *mc = MAPIclient(fdin, fdout, "xquery");
            if (mc) {
                /* override xquery_client_engine (will be restored later) */ 
                mc->engine = xrpc_client_engine;
                mc->arg = (char*) arg; /* HACK! pass xrpc arg */
                MT_up_sema(mc->s, "XRPC"); /* activate the thread */
                return 0;
            }
            stream_close(fdout);
            stream_destroy(fdout);
        }
        stream_close(fdin);
        stream_destroy(fdin);
    }
    shttpd_finish(arg);
    return -1;
}

int
CMDrpcd_start(int *port, bit *open, str option)
{
    shttpd_socket ctx;
    char *s;
    
    if (rpcd_running) {
        stream_printf(GDKout,
                "\nRPC receiver already running (on port %d)\n",
                xrpc_port);
        return GDK_SUCCEED;
    }

    xrpc_port = *port;
    rpcd_running = 1;

    /* find 'datadir' (often datadir = <prefix>/share), otherwise use
     * "/usr/share", hence, httpd serves out <datadir>/MonetDB/xrpc */
    if( !(s = GDKgetenv("datadir")) ){
        snprintf(datadir, 1024, "%cusr%cshare%cMonetDB%cxrpc",
                DIR_SEP, DIR_SEP, DIR_SEP, DIR_SEP);
    } else {
        snprintf(datadir, 1024, "%s%cMonetDB%cxrpc", s, DIR_SEP, DIR_SEP);
    }
    shttpd_setopt("document_root", datadir);

    shttpd_init(NULL); /* Initialize httpsd thread */

    if (option && strstr(option, "timing") != NULL)
        timing = 1;

    /* Register call back function, for XRPC (admin) requests, and XML (get/put/delete) file handling */
    shttpd_register_url(XRPC_REQ_CALLBACK, xrpc_fork_mapiclient, NULL);
    shttpd_register_url(XRPC_DOC_CALLBACK, xrpc_fork_mapiclient, NULL);
    shttpd_register_url(XRPC_ADM_CALLBACK, xrpc_fork_mapiclient, NULL);

    /* get admin bats */
    if (xrpc_trusted == NULL)
        xrpc_trusted = BATdescriptor(BBPindex("xrpc_trusted"));
    if (xrpc_admin == NULL) 
        xrpc_admin = BATdescriptor(BBPindex("xrpc_admin"));
    assert(xrpc_trusted && xrpc_admin);

    /* Open listening socket */
    ctx = shttpd_open_port(xrpc_port, *open);
    listen_socket = ctx.sock;

    /* Serve connections infinitely until someone kills us */
    for ( ; rpcd_running; ) shttpd_poll(&ctx, 200);

    return GDK_SUCCEED;
}

void xrpc_epilogue(void)
{
    shttpd_fini();      /* Shut down the HTTP server. */
    rpcd_running = 0;   /* Stop RPC server */
    if (listen_socket >= 0)
        close(listen_socket);
    listen_socket = -1;
    if (xrpc_trusted) {
        BBPunfix(xrpc_trusted->batCacheid);
        xrpc_trusted = NULL;
    }
    if (xrpc_admin) {
        BBPunfix(xrpc_trusted->batCacheid);
        xrpc_admin = NULL;
    }
}
/* vim:set shiftwidth=4 expandtab: */
