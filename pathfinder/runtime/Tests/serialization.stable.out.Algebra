stdout of test 'serialization` in directory 'runtime` itself:


# 13:48:28 >  
# 13:48:28 >  Mtimeout -timeout 60 Mserver "--config=/local_tmp/MonetDB/Linux/etc/MonetDB.conf" --debug=10 --set "monet_mod_path=/local_tmp/pathfinder/Linux/lib/MonetDB:/local_tmp/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/local_tmp/MonetDB/Linux/var/MonetDB/dbfarm" --set "sql_logdir=/local_tmp/MonetDB/Linux/var/MonetDB/log" --set mapi_port=30625 --set monet_prompt= --trace --dbname=mTests_runtime  < serialization.milS
# 13:48:28 >  

# Monet Database Server V4.11.3
# Copyright (c) 1993-2006, CWI. All rights reserved.
# Compiled for i686-suse-linux/32bit with 32bit OIDs; dynamically linked.
# Visit http://monetdb.cwi.nl/ for further information.
module("pathfinder");

# query for all output modes (contains all different kinds)
var query := "(1, 2.3, attribute attr { \"val\" }, 3E1, \"string\", doc(\"nodekinds.xml\")/descendant-or-self::node())";
var query_no_attr := "(1, 2.3, 3E1, \"string\", doc(\"nodekinds.xml\")/descendant-or-self::node())";

# current different XML modes
#
xquery("xml"            ,query , 0).printf();
<?xml version="1.0" encoding="utf-8"?>
<XQueryResult attr="val">1 2.300000 30.000000 string<elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem><elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem>text<!--comment--><?pi_tgt pi_data?></XQueryResult>

xquery("xml-typed"      ,query , 0).printf();
<?xml version="1.0" encoding="utf-8"?>
<result:sequence xmlns:result="http://monetdb.cwi.nl/XQuery/results" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><result:atomic-value xsi:type="xs:integer">1</result:atomic-value><result:atomic-value xsi:type="xs:decimal">2.300000</result:atomic-value><result:attribute attr="val"/><result:atomic-value xsi:type="xs:double">30.000000</result:atomic-value><result:atomic-value xsi:type="xs:string">string</result:atomic-value><result:document><elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem></result:document><result:element><elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem></result:element><result:text>text</result:text><result:comment><!--comment--></result:comment><result:processing-instruction><?pi_tgt pi_data?></result:processing-instruction></result:sequence>

# ... and their corresponding mapi variants
xquery("mapi-xml"       ,query , 0).printf();
=<?xml version="1.0" encoding="utf-8"?>
=<XQueryResult attr="val">1 2.300000 30.000000 string<elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem><elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem>text<!--comment--><?pi_tgt pi_data?></XQueryResult>

xquery("mapi-xml-typed" ,query , 0).printf();
=<?xml version="1.0" encoding="utf-8"?>
=<result:sequence xmlns:result="http://monetdb.cwi.nl/XQuery/results" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><result:atomic-value xsi:type="xs:integer">1</result:atomic-value><result:atomic-value xsi:type="xs:decimal">2.300000</result:atomic-value><result:attribute attr="val"/><result:atomic-value xsi:type="xs:double">30.000000</result:atomic-value><result:atomic-value xsi:type="xs:string">string</result:atomic-value><result:document><elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem></result:document><result:element><elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem></result:element><result:text>text</result:text><result:comment><!--comment--></result:comment><result:processing-instruction><?pi_tgt pi_data?></result:processing-instruction></result:sequence>


# additional XML mode arguments:
#
xquery("xml-noheader"   ,query , 0).printf();
<XQueryResult attr="val">1 2.300000 30.000000 string<elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem><elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem>text<!--comment--><?pi_tgt pi_data?></XQueryResult>

# does not work for xml-typed mode
xquery("xml-noroot"     ,query , 0).printf();
<?xml version="1.0" encoding="utf-8"?>
1 2.300000 30.000000 string<elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem><elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem>text<!--comment--><?pi_tgt pi_data?>

# does not work for xml-typed mode
xquery("xml-root-name"  ,query , 0).printf();
<?xml version="1.0" encoding="utf-8"?>
<name attr="val">1 2.300000 30.000000 string<elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem><elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem>text<!--comment--><?pi_tgt pi_data?></name>


# data model modes:
#
xquery("dm"             ,query , 0).printf();
1,
2.300000,
attribute attr { "val" },
30.000000,
"string",
<?xml version="1.0" encoding="utf-8"?>
<elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem>
,
<elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem>,
text {"text"},
<!--comment-->,
<?pi_tgt pi_data?>

xquery("mapi-dm"        ,query , 0).printf();
=1,
=2.300000,
=attribute attr { "val" },
=30.000000,
="string",
=<?xml version="1.0" encoding="utf-8"?>
=<elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem>
=,
=<elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem>,
=text {"text"},
=<!--comment-->,
=<?pi_tgt pi_data?>

# data model in tabular representation
#
printf("%s",xquery("seq"            ,query , 0));
&1 0 10 1 10
% xquery.result	# table_name
% xml	# name
% varchar	# type
% 60	# length
[ "1"	]
[ "2.300000"	]
[ "attribute attr { "val" }"	]
[ "30.000000"	]
[ "\"string\""	]
[ "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<elem attr=\"val\">text<!--comment--><?pi_tgt pi_data?></elem>\n"	]
[ "<elem attr=\"val\">text<!--comment--><?pi_tgt pi_data?></elem>"	]
[ "text {\"text\"}"	]
[ "<!--comment-->"	]
[ "<?pi_tgt pi_data?>"	]

xquery("seq"            ,query , 0).print();
[ "&1 0 10 1 10\n% xquery.result\t# table_name\n% xml\t# name\n% varchar\t# type\n% 60\t# length\n[ \"1\"\t]\n[ \"2.300000\"\t]\n[ \"attribute attr { \"val\" }\"\t]\n[ \"30.000000\"\t]\n[ \"\\\"string\\\"\"\t]\n[ \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<elem attr=\\\"val\\\">text<!--comment--><?pi_tgt pi_data?></elem>\\n\"\t]\n[ \"<elem attr=\\\"val\\\">text<!--comment--><?pi_tgt pi_data?></elem>\"\t]\n[ \"text {\\\"text\\\"}\"\t]\n[ \"<!--comment-->\"\t]\n[ \"<?pi_tgt pi_data?>\"\t]\n" ]


# text mode w/ top-level attribute
#
xquery("text"           ,query , 0).printf();
!ERROR: 12.300000!ERROR: serialize_dflt.mx: unable to print top level attribute nodes in text mode
!ERROR: xquery_print_result_main: operation failed.
!ERROR: interpret: no matching MIL operator to 'printf(void)'.
!MAYBE YOU MEAN:
!	printf(str, ..any..) : void

xquery("mapi-text"      ,query , 0).printf();
!ERROR: =12.300000!ERROR: serialize_dflt.mx: unable to print top level attribute nodes in text mode
!ERROR: xquery_print_result_main: operation failed.
!ERROR: interpret: no matching MIL operator to 'printf(void)'.
!MAYBE YOU MEAN:
!	printf(str, ..any..) : void

# text mode w/o top-level attribute
#
xquery("text"           ,query_no_attr , 0).printf();
12.30000030.000000string<elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem><elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem>text<!--comment--><?pi_tgt pi_data?>

xquery("mapi-text"      ,query_no_attr , 0).printf();
=12.30000030.000000string<elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem><elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem>text<!--comment--><?pi_tgt pi_data?>


# default mode is xml mode (it also works with mapi
# -- all other mode arguments are ignored)
#
xquery(""               ,query , 0).printf();
<?xml version="1.0" encoding="utf-8"?>
<XQueryResult attr="val">1 2.300000 30.000000 string<elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem><elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem>text<!--comment--><?pi_tgt pi_data?></XQueryResult>

xquery("mapi"           ,query , 0).printf();
=<?xml version="1.0" encoding="utf-8"?>
=<XQueryResult attr="val">1 2.300000 30.000000 string<elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem><elem attr="val">text<!--comment--><?pi_tgt pi_data?></elem>text<!--comment--><?pi_tgt pi_data?></XQueryResult>
quit();

# 13:48:29 >  
# 13:48:29 >  Done.
# 13:48:29 >  

