module(pf_support);
module(malalgebra);
var a1 := bat (void,oid).seqbase(0@0);
var a2 := bat (void,oid).seqbase(0@0);
a1.append(1@0);
a1.append(1@0);
a1.append(1@0);
a1.append(2@0);
a1.append(3@0);
a1.append(4@0);
a1.append(9@0);
a2.append(0@0);
a2.append(1@0);
a2.append(3@0);
a2.append(5@0);
a2.append(10@0);
a2.append(10@0);
a2.append(11@0);
a1.access(BAT_READ);
a2.access(BAT_READ);
var b1 := a1.copy().project("foo");
var b2 := a2.copy().project("bar");
var c1 := a1.copy().project(2);
var c2 := a2.copy().project(int(nil));

var d := a1.project(nil);
var e := d.ord_uselect(nil).mark(2@0);
var f := d.ord_uselect(nil).mark(0@0);
var g := d.[oid]();
var a3 := bat (void,oid).seqbase(0@0);
var b3 := bat (void,str).seqbase(0@0);
var c3 := bat (void,int).seqbase(0@0);
var a4 := bat (void,oid).seqbase(2@0);
var b4 := bat (void,str).seqbase(2@0);
var c4 := bat (void,int).seqbase(2@0);
var a5 := bat (void,oid).seqbase(2@0);
a5.append(1@0);
a5.append(1@0);
a5.access(BAT_READ);
var b5 := a5.copy().project("baz");
var c5 := a5.copy().project(3);

a1.print();
a2.print();
if (a1.reverse().ordered()) print("a1 ordered"); else print("a1 unordered");
if (a2.reverse().ordered()) print("a2 ordered"); else print("a2 unordered");
b1.print();
b2.print();
c1.print();
c2.print();
print(a1,b1,c1);
print(a2,b2,c2);
d.print();
e.print();
f.print();
g.print();

a3.print();
b3.print();
c3.print();
print(a3,b3,c3);

a4.print();
b4.print();
c4.print();
print(a4,b4,c4);

a5.print();
b5.print();
c5.print();
print(a5,b5,c5);

var res_mu;
res_mu := merged_union (a1, a2);
print(res_mu.fetch(0));
res_mu := merged_union (a2, a1);
print(res_mu.fetch(0));
res_mu := merged_union (a1, a2, b1, b2);
print(res_mu.fetch(0), res_mu.fetch(1));
res_mu := merged_union (a1, a2, c1, c2);
print(res_mu.fetch(0), res_mu.fetch(1));
res_mu := merged_union (a1, a2, b1, b2, c1, c2);
print(res_mu.fetch(0), res_mu.fetch(1), res_mu.fetch(2));
res_mu := merged_union (a2, a1, b2, b1, c2, c1);
print(res_mu.fetch(0), res_mu.fetch(1), res_mu.fetch(2));
res_mu := merged_union (a1, a3);
print(res_mu.fetch(0));
res_mu := merged_union (a1, a4);
print(res_mu.fetch(0));
res_mu := merged_union (a3, a2);
print(res_mu.fetch(0));
res_mu := merged_union (a4, a2);
print(res_mu.fetch(0));
res_mu := merged_union (a3, a4);
print(res_mu.fetch(0));
res_mu := merged_union (a1, a5);
print(res_mu.fetch(0));
res_mu := merged_union (a4, a5);
print(res_mu.fetch(0));
res_mu := merged_union (a1, a5, b1, b5, c1, c5);
print(res_mu.fetch(0), res_mu.fetch(1), res_mu.fetch(2));
res_mu := merged_union (a5, a2, b5, b2, c5, c2);
print(res_mu.fetch(0), res_mu.fetch(1), res_mu.fetch(2));

res_mu := merged_union (d, a2);
print(res_mu.fetch(0));
res_mu := merged_union (a1, a2, d, a2, c1, c2);
print(res_mu.fetch(0), res_mu.fetch(1), res_mu.fetch(2));
res_mu := merged_union (e, a2);
print(res_mu.fetch(0));
res_mu := merged_union (f, a2);
print(res_mu.fetch(0));
res_mu := merged_union (g, a2);
print(res_mu.fetch(0));
res_mu := merged_union (a2, d);
print(res_mu.fetch(0));
res_mu := merged_union (a2, e);
print(res_mu.fetch(0));
res_mu := merged_union (a2, f);
print(res_mu.fetch(0));
res_mu := merged_union (a2, g);
print(res_mu.fetch(0));
res_mu := merged_union (d, e);
print(res_mu.fetch(0));
res_mu := merged_union (f, e);
print(res_mu.fetch(0));
res_mu := merged_union (a5, a5);
print(res_mu.fetch(0));
res_mu := merged_union (g, e);
print(res_mu.fetch(0));
res_mu := merged_union (a5, d);
print(res_mu.fetch(0));
res_mu := merged_union (a5, e);
print(res_mu.fetch(0));
res_mu := merged_union (a5, f);
print(res_mu.fetch(0));
res_mu := merged_union (a5, g);
print(res_mu.fetch(0));
res_mu := merged_union (e, a5, b1, b5, c1, c5);
print(res_mu.fetch(0), res_mu.fetch(1), res_mu.fetch(2));


res_mu := merged_union (a1, a5, b5, b1); # wrong length
res_mu := merged_union (a1, a5, e, a5); # wrong seqbase

res_mu := merged_union (b1, b2); # string, string
res_mu := merged_union (a1, b2); # oid, string
res_mu := merged_union (c1, a2); # int, oid

var z1 := a1.copy();
z1.access(BAT_WRITE).insert(7@0,10@0);
z1.print();
z1.insert(7@0,10@0);
z1.print();

res_mu := merged_union (z1, a2); # first not dense
res_mu := merged_union (a2, z1); # snd not dens

z1.delete(7@0,10@0);
z1.print();

res_mu := merged_union (z1, a2); # oid
print(res_mu.fetch(0));

z1.insert(8@0,9@0);

res_mu := merged_union (z1, a2); # fst not sorted
res_mu := merged_union (a2, z1); # snd not sorted
