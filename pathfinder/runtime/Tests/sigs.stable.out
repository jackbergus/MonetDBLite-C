stdout of test 'sigs` in directory 'runtime` itself:


# 20:09:25 >  
# 20:09:25 >  Mtimeout -timeout 60 Mserver "--config=/var/tmp/_PREFIX_MONET_GNU_32_d__/etc/monet.conf" --debug=10 --set "monet_mod_path=/var/tmp/_PREFIX_MONET_GNU_32_d__/lib/MonetDB:/var/tmp/_PREFIX_TEMPLATE_GNU_32_d__/lib/MonetDB" --dbfarm "/var/tmp/_PREFIX_MONET_GNU_32_d__/var/dbfarm" --set monet_prompt= --trace --dbname=mTests_runtime  < sigs.milS
# 20:09:25 >  

# Monet Database Server V4.3.9
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
var mods := new(void,str);
mods.insert(nil,"pf_support");
mods.insert(nil,"pathfinder");
mods.insert(nil,"pf_standoff");

mods@batloop(){
	printf("module '%s'\n",$t);
	module($t);
	sigs($t);
	drop($t);
}
module 'pf_support'
#-----------------------------------------------------------------------------------------#
# signature										  # name
# str											  # type
#---------------------------------------------------------------------------------------------------------------------------------------------------------#
[ "add_qname(str, str, str, BAT[void,BAT]) : oid"													  ]
[ "add_qnames(BAT[void,str], BAT[void,str], BAT[void,str], BAT[void,BAT]) : BAT[void,oid]"								  ]
[ "append(BAT[any::1,BAT], any) : BAT[any::1,BAT]"													  ]
[ "attr_constr(BAT[void,oid], BAT[void,str], BAT[void,BAT]) : BAT[void,BAT]"										  ]
[ "bat2constant(any) : any"																  ]
[ "child(BAT[oid,oid], BAT[oid,oid], oid, BAT[oid,BAT], int, BAT[void,any], chr) : BAT[void,BAT]"							  ]
[ "cleantmpdir(lng) : void"																  ]
[ "combine_text_string(BAT[void,oid], BAT[void,oid], BAT[void,str], int) : BAT[oid,str]"						  ]
[ "constant2bat(any) : BAT[any,any]"															  ]
[ "correct_sizes(BAT[void,oid], BAT[void,oid], BAT[void,int]) : BAT[void,int]"								  ]
[ "delete_nodes_prepare_pre_size(BAT[void,int], BAT[oid,void]) : BAT[oid,int]"								  ]
[ "descendant(BAT[oid,oid], BAT[oid,oid], oid, BAT[oid,BAT], int, BAT[void,any], chr) : BAT[void,BAT]"							  ]
[ "descendant_or_self(BAT[oid,oid], BAT[oid,oid], oid, BAT[oid,BAT], int, BAT[void,any], chr) : BAT[void,BAT]"						  ]
[ "doc_tbl(BAT[void,BAT], BAT[void,str]) : BAT[void,BAT]"												  ]
[ "ebv(BAT[oid,bit]) : BAT[oid,bit]"													  ]
[ "elem_constr(BAT[void,oid], BAT[void,oid], BAT[void,oid], BAT[oid,oid], BAT[oid,oid], BAT[void,oid], BAT[void,oid], BAT[void,BAT]) : BAT[void,BAT]"	  ]
[ "elem_constr_empty(BAT[void,oid], BAT[void,BAT]) : BAT[void,BAT]"											  ]
[ "enumerate(BAT[void,lng], BAT[void,lng]) : BAT[oid,lng]"										  ]
[ "fetch(BAT[any,BAT], int) : any"															  ]
[ "following_sibling(BAT[void,oid], BAT[void,oid], oid, BAT[void,BAT], int) : BAT[void,BAT]"						  ]
[ "insert(BAT[any::1,BAT], any::1, any) : BAT[any::1,BAT]"												  ]
[ "invalid_qname(BAT[any,str]) : str"															  ]
[ "is_constant(any) : bit"																  ]
[ "lastmod_time(str) : timestamp"													  ]
[ "lev_child(BAT[void,chr], BAT[oid,any], int) : BAT[oid,void]"												  ]
[ "lev_fs(BAT[void,chr], BAT[oid,any], int) : BAT[oid,void]"												  ]
[ "lev_parent(BAT[void,chr], BAT[oid,any], int) : BAT[oid,void]"											  ]
[ "lev_ps(BAT[void,chr], BAT[oid,any], int) : BAT[oid,void]"												  ]
[ "ll_ancestor(BAT[oid,oid], BAT[oid,oid], BAT[oid,int], BAT[oid,chr]) : BAT[oid,oid]"									  ]
[ "ll_ancestor_or_self(BAT[oid,oid], BAT[oid,oid], BAT[oid,int], BAT[oid,chr]) : BAT[oid,oid]"								  ]
[ "ll_child(BAT[oid,oid], BAT[oid,oid], BAT[oid,int], BAT[void,any], bit, bit, oid, oid, bit, chr) : BAT[oid,oid]"					  ]
[ "ll_descendant(BAT[oid,oid], BAT[oid,oid], BAT[oid,int], BAT[void,any], bit, bit, oid, oid, bit, chr) : BAT[oid,oid]"					  ]
[ "ll_descendant_or_self(BAT[oid,oid], BAT[oid,oid], BAT[oid,int], BAT[void,any], bit, bit, oid, oid, bit, chr) : BAT[oid,oid]"				  ]
[ "ll_following(BAT[oid,oid], BAT[oid,oid], BAT[oid,oid], BAT[oid,int], BAT[oid,chr], chr) : BAT[oid,oid]"							  ]
[ "ll_parent(BAT[oid,oid], BAT[oid,oid], BAT[oid,int], BAT[oid,chr]) : BAT[oid,oid]"									  ]
[ "ll_preceding(BAT[oid,oid], BAT[oid,oid], BAT[oid,oid], BAT[oid,int], BAT[oid,chr], chr) : BAT[oid,oid]"							  ]
[ "ll_tokenize(BAT[void,str], BAT[void,str]) : BAT[oid,str]"										  ]
[ "merge_adjacent_text_nodes(BAT[void,oid], BAT[void,oid], BAT[void,oid], BAT[void,BAT]) : BAT[void,oid]"						  ]
[ "merged_union(any, any, ..any..) : BAT[void,BAT]"													  ]
[ "movedata(BAT[void,BAT], oid, oid, int, int) : void"													  ]
[ "mposjoin(BAT[oid,oid], BAT[oid,oid], BAT[oid,BAT]) : BAT[void,any]"									  ]
[ "mvaljoin(BAT[oid,oid], BAT[oid,oid], BAT[oid,BAT]) : BAT[oid,oid]"									  ]
[ "myupdate(BAT[any::1,any::2], BAT[any::1,any::2]) : BAT[any::1,any::2]"										  ]
[ "myupdate(BAT[any::1,any::2], any::1, any::2) : BAT[any::1,any::2]"											  ]
[ "niland(int, int) : int"																  ]
[ "nilor(int, int) : int"																  ]
[ "nilplus(int, int) : int"																  ]
[ "normSpace(str) : str"														  ]
[ "pflock_begin(lng) : void"																  ]
[ "pflock_end(lng) : void"																  ]
[ "pflock_free(bit) : bit"																  ]
[ "pflock_get(int) : lock"																  ]
[ "pflock_meta(lng) : void"																  ]
[ "preceding(BAT[void,oid], BAT[void,oid], oid, BAT[void,BAT], int) : BAT[void,BAT]"							  ]
[ "preceding_sibling(BAT[void,oid], BAT[void,oid], oid, BAT[void,BAT], int) : BAT[void,BAT]"						  ]
[ "print_doc(str, BAT[void,BAT], str) : void"												  ]
[ "print_result(str, BAT[void,BAT], BAT[void,oid], BAT[void,int], BAT[void,lng], BAT[void,dbl], BAT[void,dbl], BAT[void,str]) : void"	  ]
[ "print_result(str, str, BAT[void,BAT], oid, int, BAT[void,lng], BAT[void,dbl], BAT[void,dbl], BAT[void,str]) : void"					  ]
[ "print_result(str, str, str, BAT[oid,BAT], BAT[oid,any], BAT[void,oid], BAT[void,oid], BAT[void,int], BAT[oid,lng], BAT[oid,dbl], BAT[oid,str]) : void"	  ]
[ "round_up(dbl) : dbl"															  ]
[ "scj_anc(BAT[void,int], BAT[oid,any], int) : BAT[oid,void]"												  ]
[ "scj_ancorself(BAT[void,int], BAT[oid,any], int) : BAT[oid,void]"											  ]
[ "scj_desc(BAT[void,int], BAT[oid,any], int) : BAT[oid,void]"												  ]
[ "scj_descorself(BAT[void,int], BAT[oid,any], int) : BAT[oid,void]"											  ]
[ "shred_str(BAT[str,BAT], str, lng, lock, bit) : void"													  ]
[ "shred_stream(BAT[str,BAT], Stream, lng, lock, bit) : void"												  ]
[ "shred_url(BAT[str,BAT], str, lng, lock, bit) : void"													  ]
[ "splitbat(BAT[oid,str], str) : BAT[oid,BAT]"														  ]
[ "splitkind(BAT[oid,chr]) : BAT[oid,BAT]"														  ]
[ "string_join(BAT[oid,str], BAT[oid,str]) : BAT[oid,str]"										  ]
[ "text_constr(BAT[void,str], BAT[void,BAT]) : BAT[void,BAT]"												  ]
[ "ws_bat(lng) : BAT[void,BAT]"																  ]
module 'pathfinder'
#-------------------------------------------------#
# signature					  # name
# str						  # type
#---------------------------------------------------------#
[ "delete_all_docs(bit) : void"			  ]
[ "delete_doc(BAT[void,str]) : void"						  ]
[ "shred_doc(BAT[void,str], BAT[void,str], BAT[void,str], BAT[void,lng]) : void"  ]
[ "shred_doc(str, str) : void"							  ]
[ "shred_doc(str, str, str, lng) : void"					  ]
[ "xmlcache_add_rule(str, any) : void"		  ]
[ "xmlcache_del_rule(str) : void"		  ]
[ "xmlcache_print() : void"			  ]
[ "xmlcache_print_rules() : void"		  ]
[ "xmldb_print() : void"			  ]
[ "xquery(mode str, xquery str, is_url bit) : str "													  ]
[ "xquery_frontend() : ptr"				  ]
[ "xquery_start_query_cache(lng) : void"		  ]
module 'pf_standoff'
#---------------------------------------------------------------------------------------------------------#
# signature												  # name
# str													  # type
#-----------------------------------------------------------------------------------------------------------------#
[ "blob(BAT[void,int], BAT[void,int], str) : BAT[void,str]"						  ]
[ "blob(BAT[void,lng], BAT[void,lng], str) : BAT[void,str]"						  ]
[ "ll_reject_narrow_join_sort(BAT[oid,int], BAT[oid,int], BAT[oid,int], BAT[oid,int]) : BAT[oid,oid]"	  ]
[ "ll_reject_narrow_join_sort(BAT[oid,lng], BAT[oid,lng], BAT[oid,lng], BAT[oid,lng]) : BAT[oid,oid]"	  ]
[ "ll_reject_wide_join_sort(BAT[oid,int], BAT[oid,int], BAT[oid,int], BAT[oid,int]) : BAT[oid,oid]"	  ]
[ "ll_reject_wide_join_sort(BAT[oid,lng], BAT[oid,lng], BAT[oid,lng], BAT[oid,lng]) : BAT[oid,oid]"	  ]
[ "ll_select_narrow_join_sort(BAT[oid,int], BAT[oid,int], BAT[oid,int], BAT[oid,int]) : BAT[oid,oid]"	  ]
[ "ll_select_narrow_join_sort(BAT[oid,lng], BAT[oid,lng], BAT[oid,lng], BAT[oid,lng]) : BAT[oid,oid]"	  ]
[ "ll_select_wide_join_sort(BAT[oid,int], BAT[oid,int], BAT[oid,int], BAT[oid,int]) : BAT[oid,oid]"	  ]
[ "ll_select_wide_join_sort(BAT[oid,lng], BAT[oid,lng], BAT[oid,lng], BAT[oid,lng]) : BAT[oid,oid]"	  ]
[ "regionindex_extract(BAT[void,BAT], oid, str) : void"								  ]
[ "reject_narrow_join_sort(BAT[oid,int], BAT[oid,int], BAT[oid,int], BAT[oid,int]) : BAT[void,oid]"	  ]
[ "reject_narrow_join_sort(BAT[oid,lng], BAT[oid,lng], BAT[oid,lng], BAT[oid,lng]) : BAT[void,oid]"	  ]
[ "reject_wide_join_sort(BAT[oid,int], BAT[oid,int], BAT[oid,int], BAT[oid,int]) : BAT[void,oid]"	  ]
[ "reject_wide_join_sort(BAT[oid,lng], BAT[oid,lng], BAT[oid,lng], BAT[oid,lng]) : BAT[void,oid]"	  ]
[ "select_narrow(BAT[oid,oid], BAT[oid,oid], oid, BAT[void,BAT], int, BAT[void,oid], chr) : BAT[void,BAT]"	  ]
[ "select_narrow_join_sort(BAT[oid,int], BAT[oid,int], BAT[oid,int], BAT[oid,int]) : BAT[void,oid]"	  ]
[ "select_narrow_join_sort(BAT[oid,lng], BAT[oid,lng], BAT[oid,lng], BAT[oid,lng]) : BAT[void,oid]"	  ]
[ "select_wide(BAT[oid,oid], BAT[oid,oid], oid, BAT[void,BAT], int, BAT[void,oid], chr) : BAT[void,BAT]"	  ]
[ "select_wide_join_sort(BAT[oid,int], BAT[oid,int], BAT[oid,int], BAT[oid,int]) : BAT[void,oid]"	  ]
[ "select_wide_join_sort(BAT[oid,lng], BAT[oid,lng], BAT[oid,lng], BAT[oid,lng]) : BAT[void,oid]"	  ]

quit();

# 20:09:25 >  
# 20:09:25 >  Done.
# 20:09:25 >  

