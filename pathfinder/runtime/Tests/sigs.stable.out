stdout of test 'sigs` in directory 'runtime` itself:


# 20:09:25 >  
# 20:09:25 >  Mtimeout -timeout 60 Mserver "--config=/var/tmp/_PREFIX_MONET_GNU_32_d__/etc/monet.conf" --debug=10 --set "monet_mod_path=/var/tmp/_PREFIX_MONET_GNU_32_d__/lib/MonetDB:/var/tmp/_PREFIX_TEMPLATE_GNU_32_d__/lib/MonetDB" --dbfarm "/var/tmp/_PREFIX_MONET_GNU_32_d__/var/dbfarm" --set monet_prompt= --trace --dbname=mTests_runtime  < sigs.milS
# 20:09:25 >  

# Monet Database Server V4.3.9
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
var mods := new(void,str);
mods.insert(nil,"pf_support");
mods.insert(nil,"pathfinder");

mods@batloop(){
	printf("module '%s'\n",$t);
	module($t);
	sigs($t);
	drop($t);
}
module 'pf_support'
#-----------------------------------------------------------------------------------------#
# signature										  # name
# str											  # type
#-----------------------------------------------------------------------------------------------------------------------------------------#
[ "ancestor(BAT[void,oid], BAT[void,oid], oid, BAT[void,BAT], int) : BAT[void,BAT]"							  ]
[ "ancestor_or_self(BAT[void,oid], BAT[void,oid], oid, BAT[void,BAT], int) : BAT[void,BAT]"						  ]
[ "child(BAT[void,oid], BAT[void,oid], oid, BAT[void,BAT], int, BAT[oid,oid]) : BAT[void,BAT]"						  ]
[ "chk_order(BAT[any::1,any::2]) : BAT[any::1,any::2]"											  ]
[ "combine_text_string(BAT[void,oid], BAT[void,oid], BAT[void,str], int) : BAT[oid,str]"						  ]
[ "descendant(BAT[void,oid], BAT[void,oid], oid, BAT[void,BAT], int, BAT[oid,oid]) : BAT[void,BAT]"					  ]
[ "descendant_or_self(BAT[void,oid], BAT[void,oid], oid, BAT[void,BAT], int, BAT[oid,oid]) : BAT[void,BAT]"				  ]
[ "ebv(BAT[oid,bit]) : BAT[oid,bit]"													  ]
[ "enumerate(BAT[void,int], BAT[void,int]) : BAT[oid,int]"										  ]
[ "following(BAT[void,oid], BAT[void,oid], oid, BAT[void,BAT], int) : BAT[void,BAT]"							  ]
[ "following_sibling(BAT[void,oid], BAT[void,oid], oid, BAT[void,BAT], int) : BAT[void,BAT]"						  ]
[ "following_void(BAT[void,int], BAT[oid,any], BAT[void,oid], int, int) : BAT[oid,void]"  ]
[ "lastmod_time(str) : timestamp"													  ]
[ "lev_child(BAT[void,chr], BAT[oid,any], int, int) : BAT[oid,void]"			  ]
[ "lev_fs(BAT[void,chr], BAT[oid,any], int, int) : BAT[oid,void]"			  ]
[ "lev_parent(BAT[void,chr], BAT[oid,any], int, int) : BAT[oid,void]"			  ]
[ "lev_ps(BAT[void,chr], BAT[oid,any], int, int) : BAT[oid,void]"			  ]
[ "ll_child(BAT[void,oid], BAT[void,oid], BAT[void,int], BAT[oid,oid], int, bit, bit, oid, oid, bit) : BAT[oid,oid]"			  ]
[ "ll_descendant(BAT[void,oid], BAT[void,oid], BAT[void,int], BAT[oid,oid], int, bit, bit, oid, oid, bit) : BAT[oid,oid]"		  ]
[ "ll_descendant_or_self(BAT[void,oid], BAT[void,oid], BAT[void,int], BAT[oid,oid], int, bit, bit, oid, oid, bit) : BAT[oid,oid]"	  ]
[ "ll_tokenize(BAT[void,str], BAT[void,str]) : BAT[oid,str]"										  ]
[ "mark_grp(BAT[any::1,oid], BAT[oid,any], oid) : BAT[any::1,oid]"									  ]
[ "mark_grp(BAT[any::1,oid], BAT[oid,oid]) : BAT[any::1,oid]"										  ]
[ "merged_union(BAT[oid,any::1], BAT[oid,any::1], ..BAT[oid,any]..) : BAT[void,BAT]"							  ]
[ "mposjoin(BAT[oid,oid], BAT[oid,oid], BAT[oid,BAT]) : BAT[void,any]"									  ]
[ "mvaljoin(BAT[oid,oid], BAT[oid,oid], BAT[oid,BAT]) : BAT[oid,oid]"									  ]
[ "normSpace(str) : str"														  ]
[ "parent(BAT[void,oid], BAT[void,oid], oid, BAT[void,BAT], int) : BAT[void,BAT]"							  ]
[ "pflock() : lock"															  ]
[ "preceding(BAT[void,oid], BAT[void,oid], oid, BAT[void,BAT], int) : BAT[void,BAT]"							  ]
[ "preceding_sibling(BAT[void,oid], BAT[void,oid], oid, BAT[void,BAT], int) : BAT[void,BAT]"						  ]
[ "preceding_void(BAT[void,int], BAT[oid,any], BAT[void,oid], int, int) : BAT[oid,void]"  ]
[ "print_doc(str, BAT[void,BAT], str) : void"												  ]
[ "print_result(str, BAT[void,BAT], BAT[void,oid], BAT[void,int], BAT[void,int], BAT[void,dbl], BAT[void,dbl], BAT[void,str]) : void"	  ]
[ "round_up(dbl) : dbl"															  ]
[ "scj_anc(BAT[void,int], BAT[oid,any], int, int) : BAT[oid,void]"			  ]
[ "scj_ancorself(BAT[void,int], BAT[oid,any], int, int) : BAT[oid,void]"		  ]
[ "scj_desc(BAT[void,int], BAT[oid,any], int, int) : BAT[oid,void]"			  ]
[ "scj_descorself(BAT[void,int], BAT[oid,any], int, int) : BAT[oid,void]"		  ]
[ "shred2bats(str, str) : BAT[oid,BAT]"													  ]
[ "shred2bats(str, str, str) : BAT[oid,BAT]"												  ]
[ "string_join(BAT[oid,str], BAT[oid,str]) : BAT[oid,str]"										  ]
module 'pathfinder'
#-------------------------------------------------#
# signature					  # name
# str						  # type
#-------------------------------------------------#
[ "create_ws() : BAT[void,BAT]"                                   ]
[ "delete_all_docs(bit) : void"			  ]
[ "delete_doc(str) : void"			  ]
[ "doc_tbl(BAT[void,BAT], BAT[void,str]) : BAT[void,BAT]"         ]
[ "pfstart() : void"				  ]
[ "pfstart(bit) : void"				  ]
[ "shred_doc(str, str) : void"														  ]
[ "xmlcache_add_rule(str, any) : void"		  ]
[ "xmlcache_del_rule(str) : void"		  ]
[ "xmlcache_print() : void"			  ]
[ "xmlcache_print_rules() : void"		  ]
[ "xmldb_print() : void"			  ]
[ "xquery(str) : str"				  ]
[ "xquery(str, str) : str"														  ]
[ "xquery_server(Stream in, Stream out) : void "											  ]

quit();

# 20:09:25 >  
# 20:09:25 >  Done.
# 20:09:25 >  

