stdout of test 'SCJ_with_void_void_BATs.SF-1400473` in directory 'tests/BugTracker` itself:


# 20:30:27 >  
# 20:30:27 >  Mtimeout -timeout 60 Mserver "--config=/ufs/manegold/_/scratch0/Monet/Testing/Current/.GNU.64.64.d.--enable-debug.PREFIX./MONETDB/etc/MonetDB.conf" --debug=10 --set "monet_mod_path=/net/corona.ins.cwi.nl/export/scratch0/manegold/Monet/Testing/Current/.GNU.64.64.d.--enable-debug.PREFIX./PATHFINDER/lib/MonetDB:/ufs/manegold/_/scratch0/Monet/Testing/Current/.GNU.64.64.d.--enable-debug.PREFIX./MONETDB/lib/MonetDB" --set "gdk_dbfarm=/ufs/manegold/_/scratch0/Monet/Testing/Current/.GNU.64.64.d.--enable-debug.PREFIX./MONETDB/var/MonetDB/dbfarm" --set "sql_logdir=/ufs/manegold/_/scratch0/Monet/Testing/Current/.GNU.64.64.d.--enable-debug.PREFIX./MONETDB/var/MonetDB/log" --set mapi_port=33539 --set sql_port=42166 --set xquery_port=57565 --set monet_prompt= --trace --dbname=mTests_tests_BugTracker  < SCJ_with_void_void_BATs.SF-1400473.milS
# 20:30:27 >  

# Monet Database Server V4.9.3
# Copyright (c) 1993-2006, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs; dynamically linked.
# Visit http://monetdb.cwi.nl/ for further information.
module(pathfinder);
PROC elem_constr (BAT[void, oid] qn_iter,
                  BAT[void, oid] qn_item,
                  BAT[void, oid] iter,
                  BAT[oid, oid] pre,
                  BAT[oid, oid] pfrag,
                  BAT[void, oid] attr,
                  BAT[void, oid] afrag,
                  BAT[void, BAT] ws) : BAT[void,BAT]
{
    var root_iter;
    var root_size;
    var root_prop;
    var root_kind;
    var root_frag;
    var root_level;
    # attr
        var root_pre;
        var root_pre_frag;
        
    # throw out nil values and generate iter|item|frag representation
    # for attributes
    var selected := pre.select(oid(nil),oid(nil));
    var piter := selected.hmark(0@0).leftfetchjoin(iter).tmark(0@0); # make it void
    pre := selected.tmark(0@0);
    pfrag := pfrag.select(oid(nil),oid(nil)).tmark(0@0);
    selected := nil;

    # throw out nil values and generate iter|item|frag representation
    # for attributes
    selected := attr.select(oid(nil),oid(nil));
    var aiter := selected.hmark(0@0).leftfetchjoin(iter).tmark(0@0); # make it void
    attr := selected.tmark(0@0);
    afrag := afrag.select(oid(nil),oid(nil)).tmark(0@0);
    selected := nil;

    if (pre.count() != 0) {

        # use head to avoid elimination of duplicates
        # (this is additionally used in the content level determination
        var iter_unq := piter.mirror();
        # get all subtree copies
print("iter_unq"); print(iter_unq);
print("pfrag");    print(pfrag);
print("pre");      print(pre);
print("pre[0]");   print(pre.fetch(0));
#BUG APPEARS HERE
        var res_scj := loop_lifted_descendant_or_self_step (iter_unq, pre, pfrag, ws, 0);
#BUG APPEARS HERE
# the following works correctly:
#        var res_scj := loop_lifted_descendant_or_self_step (iter_unq, pre.access(BAT_APPEND).access(BAT_READ), pfrag, ws, 0);
print("pre");      print(pre);
print("pre[0]");   print(pre.fetch(0));
print("res_scj");  [print](res_scj);
        iter_unq := nil;

        # variables for the result of the scj 
        var res_iter := res_scj.fetch(0);
        var res_item := res_scj.fetch(1);
        # !be aware that res_frag is only a fake_project!
        var res_frag := res_scj.fetch(2);
        # !avoid being res_iter a fake_project!
        res_iter := materialize (res_iter, res_item);
        res_scj := nil;
            
        # create content_iter as sorting argument for the merged union
        var content_iter := res_iter.leftfetchjoin(piter).chk_order();
        # create subtree copies for all bats
        var content_size := mposjoin(res_item, res_frag, ws.fetch(PRE_SIZE));
        var content_prop := mposjoin(res_item, res_frag, ws.fetch(PRE_PROP));
        var content_kind := mposjoin(res_item, res_frag, ws.fetch(PRE_KIND));
        var content_frag := mposjoin(res_item, res_frag, ws.fetch(PRE_CONT));
        var content_level := mposjoin(res_item, res_frag, ws.fetch(PRE_LEVEL));
        # change the level of the subtree copies
        content_level := content_level.[+](chr(1));
        var contentRoot_level := mposjoin(pre, pfrag, ws.fetch(PRE_LEVEL));
        # map Root_level to the result of the scj 
        #using the faked iteration values
        contentRoot_level := res_iter.leftfetchjoin(contentRoot_level);
        content_level := content_level.[-](contentRoot_level);
        content_level := content_level.tmark(0@0);
        contentRoot_level := nil;
            
        # attr
            # content_pre is needed for attribute subtree copies
            var content_pre := res_item;
            # as well as content_pre_frag
            var content_pre_frag := res_frag;
            
        root_iter := qn_iter.chk_order();
        # calculate the sizes for the root nodes
        root_size := {count}(content_iter.reverse(), qn_iter.reverse(), FALSE).tmark(seqbase(qn_iter));
        root_prop := qn_item;
        root_kind := constant2bat(ELEMENT);
        root_frag := constant2bat(WS);
        root_level := constant2bat(chr(0));

        # attr
            # root_pre is a dummy needed for merge union with content_pre 
            root_pre := constant2bat(oid(nil));
            # as well as root_frag_pre
            root_pre_frag := constant2bat(oid(nil));

        # merge union root and nodes
        {
        var merged_result := merged_union (
                                 root_iter, content_iter,
                                 root_size, content_size,
                                 root_level, content_level,
                                 root_kind, content_kind,
                                 root_prop, content_prop,
                                 root_frag, content_frag,
        # attr
                                 root_pre, content_pre,
                                 root_pre_frag, content_pre_frag);
        root_iter := nil;
        content_iter := nil;
        content_size := nil;
        content_level := nil;
        content_kind := nil;
        content_prop := nil;
        content_frag := nil;
        # attr
            content_pre := nil;
            content_pre_frag := nil;
        root_size := merged_result.fetch(1);
        root_level := merged_result.fetch(2);
        root_kind := merged_result.fetch(3);
        root_prop := merged_result.fetch(4);
        root_frag := merged_result.fetch(5);
        # attr
            root_pre := merged_result.fetch(6);
            root_pre_frag := merged_result.fetch(7);

        merged_result := nil;

        # printing output for debugging purposes
            # print("merged (root & content)");
            # print(root_size, [int](root_level), [int](root_kind), root_prop);
        }

    } else { # end of ``if (pre.count() != 0)''

        root_size := qn_iter.project(0);
        root_prop := qn_item; # !the seqbase of qn_item is later modified
        root_kind := qn_iter.project(ELEMENT);
        root_frag := qn_iter.project(WS);
        root_level := qn_iter.project(chr(0));
        # attr
            root_pre := qn_iter.project(oid(nil));
            root_pre_frag := qn_iter.project(oid(nil));

    }  # end of else in ``if (pre.count() != 0)''
        
    # set the offset for the new created trees
    {
        var seqb := oid(count(ws.fetch(PRE_SIZE).fetch(WS))
                        + int(ws.fetch(PRE_SIZE).fetch(WS).seqbase()));
        root_size := root_size.seqbase(seqb);
        root_prop := root_prop.seqbase(seqb);
        root_kind := root_kind.seqbase(seqb);
        root_frag := root_frag.seqbase(seqb);
        root_level := root_level.seqbase(seqb);
        # attr
            # get the new pre values
            root_pre := root_pre.seqbase(seqb);
            root_pre_frag := root_pre_frag.seqbase(seqb);
        seqb := nil;
    }

    # insert the new trees into the working set
    ws.fetch(PRE_SIZE).fetch(WS).insert(root_size);
    ws.fetch(PRE_KIND).fetch(WS).insert(root_kind);
    ws.fetch(PRE_PROP).fetch(WS).insert(root_prop);
    ws.fetch(PRE_CONT).fetch(WS).insert(root_frag);
    ws.fetch(PRE_LEVEL).fetch(WS).insert(root_level);
    ws.fetch(PRE_NID).fetch(WS).append(root_kind.mirror());
    ws.fetch(NID_RID).fetch(WS).append(root_kind.mirror());

    # save the new roots for creation of the intermediate result
    var roots := root_level.ord_uselect(chr(0));
    # (note that all operations are order preserving and ``mark''
    # aligns the key with the qn_iter input 
    roots := roots.hmark(0@0);

    # resetting the temporary variables
    root_size := nil;
    root_prop := nil;
    root_kind := nil;
    root_frag := nil;
    root_level := nil;
        
    # adding the new constructed roots to the WS_FRAG bat of the
    # working set, that a following (preceding) step can check
    # the fragment boundaries
    {
        reverse(ws.fetch(FRAG_ROOT).fetch(WS)).insert(reverse(roots).project(oid_nil));
    }

    # ----------------------------------
    # ----- ATTRIBUTE TRANSLATION ------
    # ----------------------------------
    # 1. step: add subtree copies of attributes
    if (pre.count() != 0) { # but only if there are any subtree nodes
        # lookup the affected attributes using the old pre values
        var preNew_attr := mvaljoin(root_pre, 
                                    root_pre_frag,
                                    ws.fetch(ATTR_OWN));
        # lookup the first free attr value
        var seqb := oid(ws.fetch(ATTR_QN).fetch(WS).count());
        # split up result of mvaljoin and mark them with the correct seqbase
        var attrNew_preNew := preNew_attr.mark(seqb).reverse();
        var attrNew_attrOld := preNew_attr.reverse().mark(seqb).reverse();
        preNew_attr := nil;
        var attrNew_pre_frag := attrNew_preNew.leftfetchjoin(root_pre_frag);
        # help MIL to keep head void
        attrNew_pre_frag := attrNew_pre_frag.reverse().mark(seqb).reverse();
        seqb := nil;

        # get the values of the QN/OID offsets for the reference to the
        # string values
        var attrNew_qn := mposjoin(attrNew_attrOld,
                                   attrNew_pre_frag,
                                   ws.fetch(ATTR_QN));
        var attrNew_prop := mposjoin(attrNew_attrOld,
                                     attrNew_pre_frag,
                                     ws.fetch(ATTR_PROP));
        # get fragment where values are stored (not where attribute is stored)
        var attrNew_frag := mposjoin(attrNew_attrOld,
                                     attrNew_pre_frag,
                                     ws.fetch(ATTR_CONT));
        attrNew_attrOld := nil;
        attrNew_pre_frag := nil;

        ws.fetch(ATTR_QN).fetch(WS).insert(attrNew_qn);
        ws.fetch(ATTR_PROP).fetch(WS).insert(attrNew_prop);
        ws.fetch(ATTR_OWN).fetch(WS).insert(attrNew_preNew);
        ws.fetch(ATTR_CONT).fetch(WS).insert(attrNew_frag);
        attrNew_qn := nil;
        attrNew_prop := nil;
        attrNew_preNew := nil;
        attrNew_frag := nil;
    }

    # 2. step: add attribute binding for new elements
    if (attr.count() != 0) { # but only if there are any top level attributes
        
        # use iter, qn and frag to find unique combinations
        var attr_qn := mposjoin(attr, afrag, ws.fetch(ATTR_QN));
        var attr_frag := mposjoin(attr, afrag, ws.fetch(ATTR_CONT));
        var sorting := aiter.tsort();
        sorting := sorting.CTrefine(mposjoin(attr_qn,
                                             attr_frag,
                                             ws.fetch(QN_URI_LOC)));
        var unq_attrs := sorting.tunique();
        sorting := nil;
        # test uniqueness
        if (unq_attrs.count() != aiter.count())
        {
           if (qn_item.count() > 0) {
               ERROR ("err:XQDY0025: attribute names are not unique in constructed element '%s'.",
                      qn_item.leftfetchjoin(ws.fetch(QN_LOC).fetch(WS))
                             .fetch(0));
           } else {
               ERROR ("err:XQDY0025: attribute names are not unique in constructed element.");
           }
        }
        unq_attrs := nil;

        var seqb := oid(ws.fetch(ATTR_QN).fetch(WS).count());
        attr_qn := attr_qn.seqbase(seqb);
        var attr_own := aiter.leftjoin(qn_iter.reverse())
                             .leftfetchjoin(roots)
                             .reverse().mark(seqb).reverse();
        var attr_prop := mposjoin(attr, afrag, ws.fetch(ATTR_PROP));
        attr_prop := attr_prop.seqbase(seqb);
        attr_frag := attr_frag.seqbase(seqb);
        seqb := nil;

        ws.fetch(ATTR_QN).fetch(WS).insert(attr_qn);
        ws.fetch(ATTR_PROP).fetch(WS).insert(attr_prop);
        ws.fetch(ATTR_OWN).fetch(WS).insert(attr_own);
        ws.fetch(ATTR_CONT).fetch(WS).insert(attr_frag);
        attr_qn := nil;
        attr_prop := nil;
        attr_own := nil;
        attr_frag := nil;
    }

    # create result as a BAT of BATs
    var res := new (void, BAT).append (ws)
                              .append (roots)
                              .append (roots.project(WS))
                              .seqbase (0@0);
    roots := nil;

    return res;
}
var a0086;
var a0085;
var a0084;
var a0083;
var a0082;
var a0081;
var a0080;
var a0079;
var a0078;
var a0077;
var a0076;
var a0075;
var a0074;
var a0073;
var a0072;
var a0071;
var a0070;
var a0069;
var a0068;
var a0067;
var a0066;
var a0065;
var a0064;
var a0063;
var a0062;
var a0061;
var a0060;
var a0059;
var a0058;
var a0057;
var a0056;
var a0055;
var a0054;
var a0053;
var a0052;
var a0051;
var a0050;
var a0049;
var a0048;
var a0047;
var a0046;
var a0045;
var a0044;
var a0043;
var a0042;
var a0041;
var a0040;
var a0039;
var a0038;
var a0037;
var a0036;
var a0035;
var a0034;
var a0033;
var a0032;
var a0031;
var a0030;
var a0029;
var a0028;
var a0027;
var a0026;
var a0025;
var a0024;
var a0023;
var a0022;
var a0021;
var a0020;
var a0019;
var a0018;
var a0017;
var a0016;
var a0015;
var a0014;
var a0013;
var a0012;
var a0011;
var a0010;
var a0009;
var a0008;
var a0007;
var a0006;
var a0005;
var a0004;
var a0003;
var a0002;
var a0001;
var a0000;
var unused;
unused := nil;
var ws := ws_create(0);
a0000 := new (void, oid).seqbase (0@0);
a0000.append (1@0);
a0000.access (BAT_READ);
;
;
;
a0001 := a0000.project ("auctionG.xml");
;
;
a0002 := doc_tbl (ws, a0001);
ws := a0002.fetch (0);
a0003 := a0002.fetch (1);
a0004 := a0002.fetch (2);
a0001 := unused;
;
;
;
;
;
;
a0001 := a0004.reverse ().sort ().reverse ();
a0001 := a0001.CTrefine (a0003);
a0001 := a0001.CTrefine (a0000);
a0001 := a0001.mark (0@0).reverse ();
a0005 := a0001.leftjoin (a0003);
a0005 := a0005.reverse ().mark (0@0).reverse ();
a0006 := a0001.leftjoin (a0004);
a0006 := a0006.reverse ().mark (0@0).reverse ();
a0007 := a0001.leftjoin (a0000);
a0007 := a0007.reverse ().mark (0@0).reverse ();
a0001 := unused;
a0003 := unused;
a0004 := unused;
;
;
;
a0001 := loop_lifted_child_step_with_nsloc_test (a0007, a0005, a0006, ws, 3, "", "site");
a0004 := a0001.fetch (1);
a0003 := a0001.fetch (0).materialize (a0004);
a0008 := a0001.fetch (2).materialize (a0004);
a0001 := unused;
a0005 := unused;
a0006 := unused;
a0007 := unused;
;
;
;
a0001 := a0008.reverse ().sort ().reverse ();
a0001 := a0001.CTrefine (a0004);
a0001 := a0001.CTrefine (a0003);
a0001 := a0001.mark (0@0).reverse ();
a0005 := a0001.leftjoin (a0003);
a0005 := a0005.reverse ().mark (0@0).reverse ();
a0006 := a0001.leftjoin (a0004);
a0006 := a0006.reverse ().mark (0@0).reverse ();
a0007 := a0001.leftjoin (a0008);
a0007 := a0007.reverse ().mark (0@0).reverse ();
a0001 := unused;
a0003 := unused;
a0004 := unused;
a0008 := unused;
;
;
;
a0001 := loop_lifted_child_step_with_nsloc_test (a0005, a0006, a0007, ws, 3, "", "people");
a0004 := a0001.fetch (1);
a0003 := a0001.fetch (0).materialize (a0004);
a0008 := a0001.fetch (2).materialize (a0004);
a0001 := unused;
a0005 := unused;
a0006 := unused;
a0007 := unused;
;
;
;
a0001 := a0008.reverse ().sort ().reverse ();
a0001 := a0001.CTrefine (a0004);
a0001 := a0001.CTrefine (a0003);
a0001 := a0001.mark (0@0).reverse ();
a0005 := a0001.leftjoin (a0003);
a0005 := a0005.reverse ().mark (0@0).reverse ();
a0006 := a0001.leftjoin (a0004);
a0006 := a0006.reverse ().mark (0@0).reverse ();
a0007 := a0001.leftjoin (a0008);
a0007 := a0007.reverse ().mark (0@0).reverse ();
a0001 := unused;
a0003 := unused;
a0004 := unused;
a0008 := unused;
;
;
;
a0001 := loop_lifted_child_step_with_nsloc_test (a0005, a0006, a0007, ws, 3, "", "person");
a0004 := a0001.fetch (1);
a0003 := a0001.fetch (0).materialize (a0004);
a0008 := a0001.fetch (2).materialize (a0004);
a0001 := unused;
a0005 := unused;
a0006 := unused;
a0007 := unused;
;
;
;
a0001 := a0008.reverse ().sort ().reverse ();
a0001 := a0001.CTrefine (a0004);
a0001 := a0001.CTrefine (a0003);
a0001 := a0001.mark (0@0).reverse ();
a0005 := a0001.leftjoin (a0003);
a0005 := a0005.reverse ().mark (0@0).reverse ();
a0006 := a0001.leftjoin (a0004);
a0006 := a0006.reverse ().mark (0@0).reverse ();
a0007 := a0001.leftjoin (a0008);
a0007 := a0007.reverse ().mark (0@0).reverse ();
a0001 := unused;
a0003 := unused;
a0004 := unused;
a0008 := unused;
;
;
;
a0001 := a0007.CTgroup ();
a0001 := a0001.CTmap ().CTderive (a0006);
a0001 := a0001.CTmap ().CTderive (a0005);
a0001 := a0001.CTextend ().mark (0@0).reverse ();
a0003 := a0001.leftjoin (a0005);
a0003 := a0003.reverse ().mark (0@0).reverse ();
a0004 := a0001.leftjoin (a0006);
a0004 := a0004.reverse ().mark (0@0).reverse ();
a0008 := a0001.leftjoin (a0007);
a0008 := a0008.reverse ().mark (0@0).reverse ();
a0001 := unused;
a0005 := unused;
a0006 := unused;
a0007 := unused;
;
;
;
a0001 := a0003.mark (1@0);
;
;
;
;
;
;
a0005 := a0000.leftjoin (a0003.reverse ());
a0006 := a0005.mark (0@0).reverse ();
a0007 := a0005.reverse ().mark (0@0).reverse ();
a0005 := unused;
a0005 := a0006.leftjoin (a0000);
a0005 := a0005.reverse ().mark (0@0).reverse ();
a0009 := a0006.leftjoin (a0000);
a0009 := a0009.reverse ().mark (0@0).reverse ();
a0010 := a0007.leftjoin (a0001);
a0010 := a0010.reverse ().mark (0@0).reverse ();
a0011 := a0007.leftjoin (a0003);
a0011 := a0011.reverse ().mark (0@0).reverse ();
a0006 := unused;
;
;
;
;
a0009 := unused;
a0011 := unused;
;
;
a0003 := unused;
;
;
;
;
;
a0003 := a0008.reverse ().sort ().reverse ();
a0003 := a0003.CTrefine (a0004);
a0003 := a0003.CTrefine (a0001);
a0003 := a0003.mark (0@0).reverse ();
a0006 := a0003.leftjoin (a0001);
a0006 := a0006.reverse ().mark (0@0).reverse ();
a0009 := a0003.leftjoin (a0008);
a0009 := a0009.reverse ().mark (0@0).reverse ();
a0011 := a0003.leftjoin (a0004);
a0011 := a0011.reverse ().mark (0@0).reverse ();
a0003 := unused;
;
;
;
a0003 := loop_lifted_child_step_with_nsloc_test (a0006, a0011, a0009, ws, 3, "", "profile");
a0013 := a0003.fetch (1);
a0012 := a0003.fetch (0).materialize (a0013);
a0014 := a0003.fetch (2).materialize (a0013);
a0003 := unused;
a0006 := unused;
a0009 := unused;
a0011 := unused;
;
;
;
a0003 := a0014.CTgroup ();
a0003 := a0003.CTmap ().CTderive (a0013);
a0003 := a0003.CTmap ().CTderive (a0012);
a0003 := a0003.CTextend ().mark (0@0).reverse ();
a0006 := a0003.leftjoin (a0012);
a0006 := a0006.reverse ().mark (0@0).reverse ();
a0009 := a0003.leftjoin (a0013);
a0009 := a0009.reverse ().mark (0@0).reverse ();
a0011 := a0003.leftjoin (a0014);
a0011 := a0011.reverse ().mark (0@0).reverse ();
a0003 := unused;
;
;
;
a0003 := a0006.mark (1@0);
;
;
;
;
;
;
a0015 := a0001.leftjoin (a0006.reverse ());
a0016 := a0015.mark (0@0).reverse ();
a0017 := a0015.reverse ().mark (0@0).reverse ();
a0015 := unused;
a0015 := a0016.leftjoin (a0001);
a0015 := a0015.reverse ().mark (0@0).reverse ();
a0018 := a0016.leftjoin (a0001);
a0018 := a0018.reverse ().mark (0@0).reverse ();
a0019 := a0017.leftjoin (a0003);
a0019 := a0019.reverse ().mark (0@0).reverse ();
a0020 := a0017.leftjoin (a0006);
a0020 := a0020.reverse ().mark (0@0).reverse ();
a0016 := unused;
;
;
;
;
a0018 := unused;
a0020 := unused;
;
;
a0006 := unused;
;
;
;
;
;
a0006 := a0011.CTgroup ();
a0006 := a0006.CTmap ().CTderive (a0009);
a0006 := a0006.CTmap ();
a0006 := a0006.CTrefine (a0003);
a0006 := a0006.mark (0@0).reverse ();
a0016 := a0006.leftjoin (a0003);
a0016 := a0016.reverse ().mark (0@0).reverse ();
a0018 := a0006.leftjoin (a0011);
a0018 := a0018.reverse ().mark (0@0).reverse ();
a0020 := a0006.leftjoin (a0009);
a0020 := a0020.reverse ().mark (0@0).reverse ();
a0006 := unused;
;
;
;
a0006 := mvaljoin (a0020, a0018, ws.fetch (ATTR_OWN));
a0022 := a0006.reverse ().mark (0@0).reverse ();
a0023 := a0006.mark (0@0).reverse ().leftjoin (a0018);
a0021 := a0006.mark (0@0).reverse ().leftjoin (a0016);
a0006 := mposjoin (mposjoin (a0022, a0023, ws.fetch (ATTR_QN)), mposjoin (a0022, a0023, ws.fetch (ATTR_CONT)), ws.fetch (QN_LOC));
a0006 := a0006.ord_uselect ("income");
a0006 := a0006.mark (0@0).reverse ();
a0022 := a0006.leftjoin (a0022);
a0023 := a0006.leftjoin (a0023);
a0021 := a0006.leftjoin (a0021);
a0006 := mposjoin (mposjoin (a0022, a0023, ws.fetch (ATTR_QN)), mposjoin (a0022, a0023, ws.fetch (ATTR_CONT)), ws.fetch (QN_URI));
a0006 := a0006.ord_uselect ("");
a0006 := a0006.mark (0@0).reverse ();
a0022 := a0006.leftjoin (a0022);
a0023 := a0006.leftjoin (a0023);
a0021 := a0006.leftjoin (a0021);
a0022 := a0022.reverse ().mark (0@0).reverse ();
a0023 := a0023.reverse ().mark (0@0).reverse ();
a0021 := a0021.reverse ().mark (0@0).reverse ();
a0006 := unused;
a0016 := unused;
a0018 := unused;
a0020 := unused;
;
;
;
a0006 := a0023.CTgroup ();
a0006 := a0006.CTmap ().CTderive (a0022);
a0006 := a0006.CTmap ().CTderive (a0021);
a0006 := a0006.CTextend ().mark (0@0).reverse ();
a0016 := a0006.leftjoin (a0021);
a0016 := a0016.reverse ().mark (0@0).reverse ();
a0018 := a0006.leftjoin (a0022);
a0018 := a0018.reverse ().mark (0@0).reverse ();
a0020 := a0006.leftjoin (a0023);
a0020 := a0020.reverse ().mark (0@0).reverse ();
a0006 := unused;
a0021 := unused;
a0022 := unused;
a0023 := unused;
;
;
;
a0006 := a0016.mark (1@0);
;
;
;
;
;
;
a0021 := a0003.leftjoin (a0016.reverse ());
a0022 := a0021.mark (0@0).reverse ();
a0023 := a0021.reverse ().mark (0@0).reverse ();
a0021 := unused;
a0021 := a0022.leftjoin (a0003);
a0021 := a0021.reverse ().mark (0@0).reverse ();
a0024 := a0022.leftjoin (a0003);
a0024 := a0024.reverse ().mark (0@0).reverse ();
a0025 := a0023.leftjoin (a0006);
a0025 := a0025.reverse ().mark (0@0).reverse ();
a0026 := a0023.leftjoin (a0016);
a0026 := a0026.reverse ().mark (0@0).reverse ();
a0022 := unused;
;
;
;
;
a0024 := unused;
a0026 := unused;
;
;
a0016 := unused;
;
;
;
a0016 := mposjoin (mposjoin (a0018, a0020, ws.fetch (ATTR_PROP)), mposjoin (a0018, a0020, ws.fetch (ATTR_CONT)), ws.fetch (PROP_VAL));
;
;
;
;
a0020 := unused;
a0018 := unused;
;
;
a0018 := a0025.leftjoin (a0006.reverse ());
a0020 := a0018.mark (0@0).reverse ();
a0022 := a0018.reverse ().mark (0@0).reverse ();
a0018 := unused;
a0018 := a0020.leftjoin (a0021);
a0018 := a0018.reverse ().mark (0@0).reverse ();
a0024 := a0020.leftjoin (a0025);
a0024 := a0024.reverse ().mark (0@0).reverse ();
a0026 := a0022.leftjoin (a0006);
a0026 := a0026.reverse ().mark (0@0).reverse ();
a0027 := a0022.leftjoin (a0016);
a0027 := a0027.reverse ().mark (0@0).reverse ();
a0020 := unused;
a0021 := unused;
a0025 := unused;
a0006 := unused;
a0016 := unused;
;
;
;
;
a0024 := unused;
a0026 := unused;
;
;
a0006 := a0018.mark (1@0);
;
;
;
;
;
a0016 := a0003.leftjoin (a0018.reverse ());
a0020 := a0016.mark (0@0).reverse ();
a0021 := a0016.reverse ().mark (0@0).reverse ();
a0016 := unused;
a0016 := a0020.leftjoin (a0003);
a0016 := a0016.reverse ().mark (0@0).reverse ();
a0024 := a0020.leftjoin (a0003);
a0024 := a0024.reverse ().mark (0@0).reverse ();
a0025 := a0021.leftjoin (a0006);
a0025 := a0025.reverse ().mark (0@0).reverse ();
a0026 := a0021.leftjoin (a0018);
a0026 := a0026.reverse ().mark (0@0).reverse ();
a0020 := unused;
;
;
;
;
a0024 := unused;
a0026 := unused;
;
;
;
a0020 := a0006.project (100000LL);
;
;
a0018 := unused;
;
;
a0024 := [lng](a0027);
;
;
;
a0027 := unused;
;
;
a0026 := a0006.leftjoin (a0006.reverse ());
a0027 := a0026.mark (0@0).reverse ();
a0028 := a0026.reverse ().mark (0@0).reverse ();
a0026 := unused;
a0026 := a0027.leftjoin (a0006);
a0026 := a0026.reverse ().mark (0@0).reverse ();
a0029 := a0027.leftjoin (a0020);
a0029 := a0029.reverse ().mark (0@0).reverse ();
a0030 := a0028.leftjoin (a0006);
a0030 := a0030.reverse ().mark (0@0).reverse ();
a0031 := a0028.leftjoin (a0024);
a0031 := a0031.reverse ().mark (0@0).reverse ();
a0027 := unused;
;
;
;
;
a0027 := [>](a0029, a0031);
;
;
;
;
;
a0029 := unused;
a0030 := unused;
a0031 := unused;
;
;
a0029 := [not](a0027);
;
;
a0030 := a0029.uselect (true).mark (0@0).reverse ();
a0031 := a0030.leftjoin (a0026);
a0031 := a0031.reverse ().mark (0@0).reverse ();
a0032 := a0030.leftjoin (a0029);
a0032 := a0032.reverse ().mark (0@0).reverse ();
a0030 := unused;
a0029 := unused;
;
;
a0032 := unused;
;
a0029 := a0031.CTgroup ();
a0029 := a0029.CTextend ().mark (0@0).reverse ();
a0030 := a0029.leftjoin (a0031);
a0030 := a0030.reverse ().mark (0@0).reverse ();
a0029 := unused;
a0031 := unused;
;
a0029 := a0030.project (false);
;
;
a0031 := a0006.leftjoin (a0006.reverse ());
a0032 := a0031.mark (0@0).reverse ();
a0033 := a0031.reverse ().mark (0@0).reverse ();
a0031 := unused;
a0031 := a0032.leftjoin (a0006);
a0031 := a0031.reverse ().mark (0@0).reverse ();
a0034 := a0032.leftjoin (a0024);
a0034 := a0034.reverse ().mark (0@0).reverse ();
a0035 := a0033.leftjoin (a0006);
a0035 := a0035.reverse ().mark (0@0).reverse ();
a0036 := a0033.leftjoin (a0020);
a0036 := a0036.reverse ().mark (0@0).reverse ();
a0032 := unused;
a0020 := unused;
;
;
;
;
a0020 := [>](a0036, a0034);
;
;
;
;
;
a0031 := unused;
a0034 := unused;
a0036 := unused;
;
;
a0031 := [not](a0020);
;
;
a0032 := a0031.uselect (true).mark (0@0).reverse ();
a0034 := a0032.leftjoin (a0035);
a0034 := a0034.reverse ().mark (0@0).reverse ();
a0036 := a0032.leftjoin (a0031);
a0036 := a0036.reverse ().mark (0@0).reverse ();
a0032 := unused;
a0031 := unused;
;
;
a0036 := unused;
;
a0031 := a0006.reverse ().kdiff (a0034.reverse ()).mark (0@0).reverse ();
a0034 := unused;
;
a0032 := a0031.project (true);
;
;
a0034 := a0030.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0034 := a0034.insert (a0031.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0036 := a0029.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0036 := a0036.insert (a0032.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0030 := unused;
a0029 := unused;
a0031 := unused;
a0032 := unused;
;
;
a0029 := [not](a0036);
;
;
a0030 := a0029.uselect (true).mark (0@0).reverse ();
a0031 := a0030.leftjoin (a0034);
a0031 := a0031.reverse ().mark (0@0).reverse ();
a0032 := a0030.leftjoin (a0029);
a0032 := a0032.reverse ().mark (0@0).reverse ();
a0030 := unused;
a0029 := unused;
;
;
a0032 := unused;
;
a0029 := a0025.leftjoin (a0031.reverse ());
a0030 := a0029.mark (0@0).reverse ();
a0032 := a0029.reverse ().mark (0@0).reverse ();
a0029 := unused;
a0029 := a0030.leftjoin (a0016);
a0029 := a0029.reverse ().mark (0@0).reverse ();
a0037 := a0030.leftjoin (a0025);
a0037 := a0037.reverse ().mark (0@0).reverse ();
a0038 := a0032.leftjoin (a0031);
a0038 := a0038.reverse ().mark (0@0).reverse ();
a0030 := unused;
;
;
;
a0037 := unused;
a0038 := unused;
;
a0030 := a0029.CTgroup ();
a0030 := a0030.CTextend ().mark (0@0).reverse ();
a0037 := a0030.leftjoin (a0029);
a0037 := a0037.reverse ().mark (0@0).reverse ();
a0030 := unused;
a0029 := unused;
;
a0029 := a0037.project (false);
;
;
;
a0030 := a0025.leftjoin (a0031.reverse ());
a0038 := a0030.mark (0@0).reverse ();
a0039 := a0030.reverse ().mark (0@0).reverse ();
a0030 := unused;
a0030 := a0038.leftjoin (a0016);
a0030 := a0030.reverse ().mark (0@0).reverse ();
a0040 := a0038.leftjoin (a0025);
a0040 := a0040.reverse ().mark (0@0).reverse ();
a0041 := a0039.leftjoin (a0031);
a0041 := a0041.reverse ().mark (0@0).reverse ();
a0038 := unused;
a0031 := unused;
;
;
;
a0040 := unused;
a0041 := unused;
;
a0031 := a0003.reverse ().kdiff (a0030.reverse ()).mark (0@0).reverse ();
a0030 := unused;
;
a0030 := a0031.project (true);
;
;
a0038 := a0037.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0038 := a0038.insert (a0031.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0040 := a0029.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0040 := a0040.insert (a0030.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0037 := unused;
a0029 := unused;
a0031 := unused;
a0030 := unused;
;
;
a0029 := [not](a0040);
;
;
a0030 := a0029.uselect (true).mark (0@0).reverse ();
a0031 := a0030.leftjoin (a0038);
a0031 := a0031.reverse ().mark (0@0).reverse ();
a0037 := a0030.leftjoin (a0029);
a0037 := a0037.reverse ().mark (0@0).reverse ();
a0030 := unused;
a0029 := unused;
;
;
a0037 := unused;
;
a0029 := a0003.leftjoin (a0031.reverse ());
a0030 := a0029.mark (0@0).reverse ();
a0037 := a0029.reverse ().mark (0@0).reverse ();
a0029 := unused;
a0029 := a0030.leftjoin (a0003);
a0029 := a0029.reverse ().mark (0@0).reverse ();
a0041 := a0030.leftjoin (a0011);
a0041 := a0041.reverse ().mark (0@0).reverse ();
a0042 := a0030.leftjoin (a0009);
a0042 := a0042.reverse ().mark (0@0).reverse ();
a0043 := a0037.leftjoin (a0031);
a0043 := a0043.reverse ().mark (0@0).reverse ();
a0030 := unused;
a0031 := unused;
;
;
;
;
a0043 := unused;
;
;
;
a0030 := a0019.leftjoin (a0029.reverse ());
a0031 := a0030.mark (0@0).reverse ();
a0043 := a0030.reverse ().mark (0@0).reverse ();
a0030 := unused;
a0030 := a0031.leftjoin (a0015);
a0030 := a0030.reverse ().mark (0@0).reverse ();
a0044 := a0031.leftjoin (a0019);
a0044 := a0044.reverse ().mark (0@0).reverse ();
a0045 := a0043.leftjoin (a0029);
a0045 := a0045.reverse ().mark (0@0).reverse ();
a0046 := a0043.leftjoin (a0041);
a0046 := a0046.reverse ().mark (0@0).reverse ();
a0047 := a0043.leftjoin (a0042);
a0047 := a0047.reverse ().mark (0@0).reverse ();
a0031 := unused;
a0029 := unused;
a0041 := unused;
a0042 := unused;
;
;
;
;
;
a0044 := unused;
a0045 := unused;
;
;
;
a0029 := a0010.leftjoin (a0030.reverse ());
a0031 := a0029.mark (0@0).reverse ();
a0041 := a0029.reverse ().mark (0@0).reverse ();
a0029 := unused;
a0029 := a0031.leftjoin (a0005);
a0029 := a0029.reverse ().mark (0@0).reverse ();
a0042 := a0031.leftjoin (a0010);
a0042 := a0042.reverse ().mark (0@0).reverse ();
a0044 := a0041.leftjoin (a0030);
a0044 := a0044.reverse ().mark (0@0).reverse ();
a0045 := a0041.leftjoin (a0046);
a0045 := a0045.reverse ().mark (0@0).reverse ();
a0048 := a0041.leftjoin (a0047);
a0048 := a0048.reverse ().mark (0@0).reverse ();
a0031 := unused;
a0030 := unused;
a0046 := unused;
a0047 := unused;
;
;
;
;
;
a0042 := unused;
a0044 := unused;
;
;
;
a0030 := a0029.CTgroup ();
a0030 := a0030.CTmap ();
a0030 := a0030.CTrefine (a0045);
a0030 := a0030.CTrefine (a0048);
a0030 := a0030.mark (0@0).reverse ();
a0031 := a0030.leftjoin (a0029);
a0031 := a0031.reverse ().mark (0@0).reverse ();
a0042 := a0030.leftjoin (a0045);
a0042 := a0042.reverse ().mark (0@0).reverse ();
a0044 := a0030.leftjoin (a0048);
a0044 := a0044.reverse ().mark (0@0).reverse ();
a0030 := unused;
a0029 := unused;
a0045 := unused;
a0048 := unused;
;
;
;
a0029 := a0031.CTgroup ();
a0029 := a0029.CTmap ().CTderive (a0042);
a0029 := a0029.CTmap ().CTderive (a0044);
a0029 := a0029.CTextend ().mark (0@0).reverse ();
a0030 := a0029.leftjoin (a0031);
a0030 := a0030.reverse ().mark (0@0).reverse ();
a0045 := a0029.leftjoin (a0042);
a0045 := a0045.reverse ().mark (0@0).reverse ();
a0046 := a0029.leftjoin (a0044);
a0046 := a0046.reverse ().mark (0@0).reverse ();
a0029 := unused;
a0031 := unused;
a0042 := unused;
a0044 := unused;
;
;
;
a0045 := unused;
a0046 := unused;
;
a0029 := {count}(a0030.reverse ());
a0029 := [lng](a0029);
a0031 := a0029.reverse ().mark (0@0).reverse ();
a0042 := a0029.mark (0@0).reverse ();
a0029 := unused;
a0030 := unused;
;
;
;
a0029 := a0000.reverse ().kdiff (a0042.reverse ()).mark (0@0).reverse ();
;
a0030 := a0029.project (0LL);
;
;
a0044 := a0042.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0044 := a0044.insert (a0029.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0045 := a0031.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0045 := a0045.insert (a0030.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0031 := unused;
a0042 := unused;
a0029 := unused;
a0030 := unused;
;
;
a0030 := [str](a0045);
;
;
;
a0031 := text_constr (a0030, ws);
ws := a0031.fetch (0);
a0042 := a0031.fetch (1);
a0046 := a0031.fetch (2);
a0031 := unused;
;
;
;
;
;
a0031 := a0000.project (add_qname ("", "", "preferred", ws));
;
;
;
;
;
;
;
a0030 := unused;
a0045 := unused;
;
;
;
a0030 := a0044.project (1@0);
;
;
;
;
a0045 := a0044.reverse ().sort ().reverse ();
a0045 := a0045.CTrefine (a0030);
a0045 := a0045.mark (0@0).reverse ();
a0047 := a0045.leftjoin (a0044);
a0047 := a0047.reverse ().mark (0@0).reverse ();
a0048 := a0045.leftjoin (a0046);
a0048 := a0048.reverse ().mark (0@0).reverse ();
a0049 := a0045.leftjoin (a0042);
a0049 := a0049.reverse ().mark (0@0).reverse ();
a0050 := a0045.leftjoin (a0030);
a0050 := a0050.reverse ().mark (0@0).reverse ();
a0045 := unused;
a0044 := unused;
a0046 := unused;
a0042 := unused;
a0030 := unused;
;
;
;
;
a0030 := elem_constr (a0000, a0031, a0047, a0049, a0048, new (void, oid).seqbase (0@0), new (void, oid).seqbase (0@0), ws);
[ "iter_unq" ]
#-----------------#
# h	h	  # name
# void	void	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ "pfrag" ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ "pre" ]
#-----------------#
# h	t	  # name
# void	void	  # type
#-----------------#
[ 0@0,	  2@0	  ]
[ "pre[0]" ]
[ 2@0 ]
[ "pre" ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  2@0	  ]
[ "pre[0]" ]
[ 2@0 ]
[ "res_scj" ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  0@0	  ]
#-----------------#
# t	h	  # name
# void	void	  # type
#-----------------#
[ 0@0,	  2@0	  ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ nil,	  0@0	  ]
ws := a0030.fetch (0);
a0042 := a0030.fetch (1);
a0044 := a0030.fetch (2);
a0031 := unused;
a0047 := unused;
a0048 := unused;
a0049 := unused;
a0050 := unused;
;
;
;
a0031 := a0027.uselect (true).mark (0@0).reverse ();
a0045 := a0031.leftjoin (a0026);
a0045 := a0045.reverse ().mark (0@0).reverse ();
a0046 := a0031.leftjoin (a0027);
a0046 := a0046.reverse ().mark (0@0).reverse ();
a0031 := unused;
;
;
a0046 := unused;
;
a0031 := a0045.CTgroup ();
a0031 := a0031.CTextend ().mark (0@0).reverse ();
a0046 := a0031.leftjoin (a0045);
a0046 := a0046.reverse ().mark (0@0).reverse ();
a0031 := unused;
a0045 := unused;
;
a0031 := a0046.project (false);
;
;
a0045 := a0020.uselect (true).mark (0@0).reverse ();
a0047 := a0045.leftjoin (a0035);
a0047 := a0047.reverse ().mark (0@0).reverse ();
a0048 := a0045.leftjoin (a0020);
a0048 := a0048.reverse ().mark (0@0).reverse ();
a0045 := unused;
;
;
a0048 := unused;
;
a0045 := a0006.reverse ().kdiff (a0047.reverse ()).mark (0@0).reverse ();
a0047 := unused;
;
a0047 := a0045.project (true);
;
;
a0048 := a0046.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0048 := a0048.insert (a0045.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0049 := a0031.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0049 := a0049.insert (a0047.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0046 := unused;
a0031 := unused;
a0045 := unused;
a0047 := unused;
;
;
a0031 := [not](a0049);
;
;
a0045 := a0031.uselect (true).mark (0@0).reverse ();
a0046 := a0045.leftjoin (a0048);
a0046 := a0046.reverse ().mark (0@0).reverse ();
a0047 := a0045.leftjoin (a0031);
a0047 := a0047.reverse ().mark (0@0).reverse ();
a0045 := unused;
a0031 := unused;
;
;
a0047 := unused;
;
a0031 := a0025.leftjoin (a0046.reverse ());
a0045 := a0031.mark (0@0).reverse ();
a0047 := a0031.reverse ().mark (0@0).reverse ();
a0031 := unused;
a0031 := a0045.leftjoin (a0016);
a0031 := a0031.reverse ().mark (0@0).reverse ();
a0050 := a0045.leftjoin (a0025);
a0050 := a0050.reverse ().mark (0@0).reverse ();
a0051 := a0047.leftjoin (a0046);
a0051 := a0051.reverse ().mark (0@0).reverse ();
a0045 := unused;
;
;
;
a0050 := unused;
a0051 := unused;
;
a0045 := a0031.CTgroup ();
a0045 := a0045.CTextend ().mark (0@0).reverse ();
a0050 := a0045.leftjoin (a0031);
a0050 := a0050.reverse ().mark (0@0).reverse ();
a0045 := unused;
a0031 := unused;
;
a0031 := a0050.project (false);
;
;
a0045 := a0025.leftjoin (a0046.reverse ());
a0051 := a0045.mark (0@0).reverse ();
a0052 := a0045.reverse ().mark (0@0).reverse ();
a0045 := unused;
a0045 := a0051.leftjoin (a0016);
a0045 := a0045.reverse ().mark (0@0).reverse ();
a0053 := a0051.leftjoin (a0025);
a0053 := a0053.reverse ().mark (0@0).reverse ();
a0054 := a0052.leftjoin (a0046);
a0054 := a0054.reverse ().mark (0@0).reverse ();
a0051 := unused;
a0046 := unused;
;
;
;
a0053 := unused;
a0054 := unused;
;
a0046 := a0003.reverse ().kdiff (a0045.reverse ()).mark (0@0).reverse ();
a0045 := unused;
;
a0045 := a0046.project (true);
;
;
a0051 := a0050.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0051 := a0051.insert (a0046.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0053 := a0031.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0053 := a0053.insert (a0045.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0050 := unused;
a0031 := unused;
a0046 := unused;
a0045 := unused;
;
;
a0031 := [not](a0053);
;
;
a0045 := a0006.project (30000LL);
;
;
a0046 := a0006.leftjoin (a0006.reverse ());
a0050 := a0046.mark (0@0).reverse ();
a0054 := a0046.reverse ().mark (0@0).reverse ();
a0046 := unused;
a0046 := a0050.leftjoin (a0006);
a0046 := a0046.reverse ().mark (0@0).reverse ();
a0055 := a0050.leftjoin (a0045);
a0055 := a0055.reverse ().mark (0@0).reverse ();
a0056 := a0054.leftjoin (a0006);
a0056 := a0056.reverse ().mark (0@0).reverse ();
a0057 := a0054.leftjoin (a0024);
a0057 := a0057.reverse ().mark (0@0).reverse ();
a0050 := unused;
;
;
;
;
a0050 := [>](a0055, a0057);
;
;
;
;
;
a0055 := unused;
a0056 := unused;
a0057 := unused;
;
;
a0055 := [not](a0050);
;
;
a0056 := a0055.uselect (true).mark (0@0).reverse ();
a0057 := a0056.leftjoin (a0046);
a0057 := a0057.reverse ().mark (0@0).reverse ();
a0058 := a0056.leftjoin (a0055);
a0058 := a0058.reverse ().mark (0@0).reverse ();
a0056 := unused;
a0055 := unused;
;
;
a0058 := unused;
;
a0055 := a0057.CTgroup ();
a0055 := a0055.CTextend ().mark (0@0).reverse ();
a0056 := a0055.leftjoin (a0057);
a0056 := a0056.reverse ().mark (0@0).reverse ();
a0055 := unused;
a0057 := unused;
;
a0055 := a0056.project (false);
;
;
a0057 := a0006.leftjoin (a0006.reverse ());
a0058 := a0057.mark (0@0).reverse ();
a0059 := a0057.reverse ().mark (0@0).reverse ();
a0057 := unused;
a0057 := a0058.leftjoin (a0006);
a0057 := a0057.reverse ().mark (0@0).reverse ();
a0060 := a0058.leftjoin (a0024);
a0060 := a0060.reverse ().mark (0@0).reverse ();
a0061 := a0059.leftjoin (a0006);
a0061 := a0061.reverse ().mark (0@0).reverse ();
a0062 := a0059.leftjoin (a0045);
a0062 := a0062.reverse ().mark (0@0).reverse ();
a0058 := unused;
a0024 := unused;
a0045 := unused;
;
;
;
;
a0024 := [>](a0062, a0060);
;
;
;
;
;
a0057 := unused;
a0060 := unused;
a0062 := unused;
;
;
a0045 := [not](a0024);
;
;
a0057 := a0045.uselect (true).mark (0@0).reverse ();
a0058 := a0057.leftjoin (a0061);
a0058 := a0058.reverse ().mark (0@0).reverse ();
a0060 := a0057.leftjoin (a0045);
a0060 := a0060.reverse ().mark (0@0).reverse ();
a0057 := unused;
a0045 := unused;
;
;
a0060 := unused;
;
a0045 := a0006.reverse ().kdiff (a0058.reverse ()).mark (0@0).reverse ();
a0058 := unused;
;
a0057 := a0045.project (true);
;
;
a0058 := a0056.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0058 := a0058.insert (a0045.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0060 := a0055.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0060 := a0060.insert (a0057.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0056 := unused;
a0055 := unused;
a0045 := unused;
a0057 := unused;
;
;
a0045 := [not](a0060);
;
;
a0055 := a0045.uselect (true).mark (0@0).reverse ();
a0056 := a0055.leftjoin (a0058);
a0056 := a0056.reverse ().mark (0@0).reverse ();
a0057 := a0055.leftjoin (a0045);
a0057 := a0057.reverse ().mark (0@0).reverse ();
a0055 := unused;
a0045 := unused;
;
;
a0057 := unused;
;
a0045 := a0025.leftjoin (a0056.reverse ());
a0055 := a0045.mark (0@0).reverse ();
a0057 := a0045.reverse ().mark (0@0).reverse ();
a0045 := unused;
a0045 := a0055.leftjoin (a0016);
a0045 := a0045.reverse ().mark (0@0).reverse ();
a0062 := a0055.leftjoin (a0025);
a0062 := a0062.reverse ().mark (0@0).reverse ();
a0063 := a0057.leftjoin (a0056);
a0063 := a0063.reverse ().mark (0@0).reverse ();
a0055 := unused;
;
;
;
a0062 := unused;
a0063 := unused;
;
a0055 := a0045.CTgroup ();
a0055 := a0055.CTextend ().mark (0@0).reverse ();
a0062 := a0055.leftjoin (a0045);
a0062 := a0062.reverse ().mark (0@0).reverse ();
a0055 := unused;
a0045 := unused;
;
a0045 := a0062.project (false);
;
;
a0055 := a0025.leftjoin (a0056.reverse ());
a0063 := a0055.mark (0@0).reverse ();
a0064 := a0055.reverse ().mark (0@0).reverse ();
a0055 := unused;
a0055 := a0063.leftjoin (a0016);
a0055 := a0055.reverse ().mark (0@0).reverse ();
a0065 := a0063.leftjoin (a0025);
a0065 := a0065.reverse ().mark (0@0).reverse ();
a0066 := a0064.leftjoin (a0056);
a0066 := a0066.reverse ().mark (0@0).reverse ();
a0063 := unused;
a0056 := unused;
;
;
;
a0065 := unused;
a0066 := unused;
;
a0056 := a0003.reverse ().kdiff (a0055.reverse ()).mark (0@0).reverse ();
a0055 := unused;
;
a0055 := a0056.project (true);
;
;
a0063 := a0062.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0063 := a0063.insert (a0056.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0065 := a0045.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0065 := a0065.insert (a0055.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0062 := unused;
a0045 := unused;
a0056 := unused;
a0055 := unused;
;
;
a0045 := [not](a0065);
;
;
a0055 := a0051.leftjoin (a0063.reverse ());
a0056 := a0055.mark (0@0).reverse ();
a0062 := a0055.reverse ().mark (0@0).reverse ();
a0055 := unused;
a0055 := a0056.leftjoin (a0051);
a0055 := a0055.reverse ().mark (0@0).reverse ();
a0066 := a0056.leftjoin (a0031);
a0066 := a0066.reverse ().mark (0@0).reverse ();
a0067 := a0062.leftjoin (a0063);
a0067 := a0067.reverse ().mark (0@0).reverse ();
a0068 := a0062.leftjoin (a0045);
a0068 := a0068.reverse ().mark (0@0).reverse ();
a0056 := unused;
a0031 := unused;
a0045 := unused;
;
;
;
;
a0031 := [and](a0066, a0068);
;
;
;
;
;
a0066 := unused;
a0067 := unused;
a0068 := unused;
;
;
a0045 := a0031.uselect (true).mark (0@0).reverse ();
a0056 := a0045.leftjoin (a0055);
a0056 := a0056.reverse ().mark (0@0).reverse ();
a0066 := a0045.leftjoin (a0031);
a0066 := a0066.reverse ().mark (0@0).reverse ();
a0045 := unused;
a0055 := unused;
a0031 := unused;
;
;
a0066 := unused;
;
a0031 := a0003.leftjoin (a0056.reverse ());
a0045 := a0031.mark (0@0).reverse ();
a0055 := a0031.reverse ().mark (0@0).reverse ();
a0031 := unused;
a0031 := a0045.leftjoin (a0003);
a0031 := a0031.reverse ().mark (0@0).reverse ();
a0066 := a0045.leftjoin (a0011);
a0066 := a0066.reverse ().mark (0@0).reverse ();
a0067 := a0045.leftjoin (a0009);
a0067 := a0067.reverse ().mark (0@0).reverse ();
a0068 := a0055.leftjoin (a0056);
a0068 := a0068.reverse ().mark (0@0).reverse ();
a0045 := unused;
a0056 := unused;
;
;
;
;
a0068 := unused;
;
;
;
a0045 := a0019.leftjoin (a0031.reverse ());
a0056 := a0045.mark (0@0).reverse ();
a0068 := a0045.reverse ().mark (0@0).reverse ();
a0045 := unused;
a0045 := a0056.leftjoin (a0015);
a0045 := a0045.reverse ().mark (0@0).reverse ();
a0069 := a0056.leftjoin (a0019);
a0069 := a0069.reverse ().mark (0@0).reverse ();
a0070 := a0068.leftjoin (a0031);
a0070 := a0070.reverse ().mark (0@0).reverse ();
a0071 := a0068.leftjoin (a0066);
a0071 := a0071.reverse ().mark (0@0).reverse ();
a0072 := a0068.leftjoin (a0067);
a0072 := a0072.reverse ().mark (0@0).reverse ();
a0056 := unused;
a0031 := unused;
a0066 := unused;
a0067 := unused;
;
;
;
;
;
a0069 := unused;
a0070 := unused;
;
;
;
a0031 := a0010.leftjoin (a0045.reverse ());
a0056 := a0031.mark (0@0).reverse ();
a0066 := a0031.reverse ().mark (0@0).reverse ();
a0031 := unused;
a0031 := a0056.leftjoin (a0005);
a0031 := a0031.reverse ().mark (0@0).reverse ();
a0067 := a0056.leftjoin (a0010);
a0067 := a0067.reverse ().mark (0@0).reverse ();
a0069 := a0066.leftjoin (a0045);
a0069 := a0069.reverse ().mark (0@0).reverse ();
a0070 := a0066.leftjoin (a0071);
a0070 := a0070.reverse ().mark (0@0).reverse ();
a0073 := a0066.leftjoin (a0072);
a0073 := a0073.reverse ().mark (0@0).reverse ();
a0056 := unused;
a0045 := unused;
a0071 := unused;
a0072 := unused;
;
;
;
;
;
a0067 := unused;
a0069 := unused;
;
;
;
a0045 := a0031.CTgroup ();
a0045 := a0045.CTmap ();
a0045 := a0045.CTrefine (a0070);
a0045 := a0045.CTrefine (a0073);
a0045 := a0045.mark (0@0).reverse ();
a0056 := a0045.leftjoin (a0031);
a0056 := a0056.reverse ().mark (0@0).reverse ();
a0067 := a0045.leftjoin (a0070);
a0067 := a0067.reverse ().mark (0@0).reverse ();
a0069 := a0045.leftjoin (a0073);
a0069 := a0069.reverse ().mark (0@0).reverse ();
a0045 := unused;
a0031 := unused;
a0070 := unused;
a0073 := unused;
;
;
;
a0031 := a0056.CTgroup ();
a0031 := a0031.CTmap ().CTderive (a0067);
a0031 := a0031.CTmap ().CTderive (a0069);
a0031 := a0031.CTextend ().mark (0@0).reverse ();
a0045 := a0031.leftjoin (a0056);
a0045 := a0045.reverse ().mark (0@0).reverse ();
a0070 := a0031.leftjoin (a0067);
a0070 := a0070.reverse ().mark (0@0).reverse ();
a0071 := a0031.leftjoin (a0069);
a0071 := a0071.reverse ().mark (0@0).reverse ();
a0031 := unused;
a0056 := unused;
a0067 := unused;
a0069 := unused;
;
;
;
a0070 := unused;
a0071 := unused;
;
a0031 := {count}(a0045.reverse ());
a0031 := [lng](a0031);
a0056 := a0031.reverse ().mark (0@0).reverse ();
a0067 := a0031.mark (0@0).reverse ();
a0031 := unused;
a0045 := unused;
;
;
;
a0031 := a0000.reverse ().kdiff (a0067.reverse ()).mark (0@0).reverse ();
;
a0045 := a0031.project (0LL);
;
;
a0069 := a0067.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0069 := a0069.insert (a0031.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0070 := a0056.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0070 := a0070.insert (a0045.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0056 := unused;
a0067 := unused;
a0031 := unused;
a0045 := unused;
;
;
a0045 := [str](a0070);
;
;
;
a0056 := text_constr (a0045, ws);
ws := a0056.fetch (0);
a0067 := a0056.fetch (1);
a0071 := a0056.fetch (2);
a0056 := unused;
;
;
;
;
;
a0056 := a0000.project (add_qname ("", "", "standard", ws));
;
;
;
;
;
;
;
a0045 := unused;
a0070 := unused;
;
;
;
a0045 := a0069.project (1@0);
;
;
;
;
a0070 := a0069.reverse ().sort ().reverse ();
a0070 := a0070.CTrefine (a0045);
a0070 := a0070.mark (0@0).reverse ();
a0072 := a0070.leftjoin (a0069);
a0072 := a0072.reverse ().mark (0@0).reverse ();
a0073 := a0070.leftjoin (a0071);
a0073 := a0073.reverse ().mark (0@0).reverse ();
a0074 := a0070.leftjoin (a0067);
a0074 := a0074.reverse ().mark (0@0).reverse ();
a0075 := a0070.leftjoin (a0045);
a0075 := a0075.reverse ().mark (0@0).reverse ();
a0070 := unused;
a0069 := unused;
a0071 := unused;
a0067 := unused;
a0045 := unused;
;
;
;
;
a0045 := elem_constr (a0000, a0056, a0072, a0074, a0073, new (void, oid).seqbase (0@0), new (void, oid).seqbase (0@0), ws);
[ "iter_unq" ]
#-----------------#
# h	h	  # name
# void	void	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ "pfrag" ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ "pre" ]
#-----------------#
# h	t	  # name
# void	void	  # type
#-----------------#
[ 0@0,	  5@0	  ]
[ "pre[0]" ]
[ 5@0 ]
[ "pre" ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  5@0	  ]
[ "pre[0]" ]
[ 5@0 ]
[ "res_scj" ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  0@0	  ]
#-----------------#
# t	h	  # name
# void	void	  # type
#-----------------#
[ 0@0,	  5@0	  ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ nil,	  0@0	  ]
ws := a0045.fetch (0);
a0067 := a0045.fetch (1);
a0069 := a0045.fetch (2);
a0056 := unused;
a0072 := unused;
a0073 := unused;
a0074 := unused;
a0075 := unused;
;
;
;
a0056 := a0050.uselect (true).mark (0@0).reverse ();
a0070 := a0056.leftjoin (a0046);
a0070 := a0070.reverse ().mark (0@0).reverse ();
a0071 := a0056.leftjoin (a0050);
a0071 := a0071.reverse ().mark (0@0).reverse ();
a0056 := unused;
;
;
a0071 := unused;
;
a0056 := a0070.CTgroup ();
a0056 := a0056.CTextend ().mark (0@0).reverse ();
a0071 := a0056.leftjoin (a0070);
a0071 := a0071.reverse ().mark (0@0).reverse ();
a0056 := unused;
a0070 := unused;
;
a0056 := a0071.project (false);
;
;
a0070 := a0024.uselect (true).mark (0@0).reverse ();
a0072 := a0070.leftjoin (a0061);
a0072 := a0072.reverse ().mark (0@0).reverse ();
a0073 := a0070.leftjoin (a0024);
a0073 := a0073.reverse ().mark (0@0).reverse ();
a0070 := unused;
;
;
a0073 := unused;
;
a0070 := a0006.reverse ().kdiff (a0072.reverse ()).mark (0@0).reverse ();
a0006 := unused;
a0072 := unused;
;
a0006 := a0070.project (true);
;
;
a0072 := a0071.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0072 := a0072.insert (a0070.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0073 := a0056.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0073 := a0073.insert (a0006.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0071 := unused;
a0056 := unused;
a0070 := unused;
a0006 := unused;
;
;
a0006 := [not](a0073);
;
;
a0056 := a0006.uselect (true).mark (0@0).reverse ();
a0070 := a0056.leftjoin (a0072);
a0070 := a0070.reverse ().mark (0@0).reverse ();
a0071 := a0056.leftjoin (a0006);
a0071 := a0071.reverse ().mark (0@0).reverse ();
a0056 := unused;
a0006 := unused;
;
;
a0071 := unused;
;
a0006 := a0025.leftjoin (a0070.reverse ());
a0056 := a0006.mark (0@0).reverse ();
a0071 := a0006.reverse ().mark (0@0).reverse ();
a0006 := unused;
a0006 := a0056.leftjoin (a0016);
a0006 := a0006.reverse ().mark (0@0).reverse ();
a0074 := a0056.leftjoin (a0025);
a0074 := a0074.reverse ().mark (0@0).reverse ();
a0075 := a0071.leftjoin (a0070);
a0075 := a0075.reverse ().mark (0@0).reverse ();
a0056 := unused;
;
;
;
a0074 := unused;
a0075 := unused;
;
a0056 := a0006.CTgroup ();
a0056 := a0056.CTextend ().mark (0@0).reverse ();
a0074 := a0056.leftjoin (a0006);
a0074 := a0074.reverse ().mark (0@0).reverse ();
a0056 := unused;
a0006 := unused;
;
a0006 := a0074.project (false);
;
;
a0056 := a0025.leftjoin (a0070.reverse ());
a0075 := a0056.mark (0@0).reverse ();
a0076 := a0056.reverse ().mark (0@0).reverse ();
a0056 := unused;
a0056 := a0075.leftjoin (a0016);
a0056 := a0056.reverse ().mark (0@0).reverse ();
a0077 := a0075.leftjoin (a0025);
a0077 := a0077.reverse ().mark (0@0).reverse ();
a0078 := a0076.leftjoin (a0070);
a0078 := a0078.reverse ().mark (0@0).reverse ();
a0075 := unused;
a0016 := unused;
a0025 := unused;
a0070 := unused;
;
;
;
a0077 := unused;
a0078 := unused;
;
a0016 := a0003.reverse ().kdiff (a0056.reverse ()).mark (0@0).reverse ();
a0056 := unused;
;
a0025 := a0016.project (true);
;
;
a0056 := a0074.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0056 := a0056.insert (a0016.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0070 := a0006.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0070 := a0070.insert (a0025.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0074 := unused;
a0006 := unused;
a0016 := unused;
a0025 := unused;
;
;
a0006 := [not](a0070);
;
;
a0016 := a0006.uselect (true).mark (0@0).reverse ();
a0025 := a0016.leftjoin (a0056);
a0025 := a0025.reverse ().mark (0@0).reverse ();
a0074 := a0016.leftjoin (a0006);
a0074 := a0074.reverse ().mark (0@0).reverse ();
a0016 := unused;
a0006 := unused;
;
;
a0074 := unused;
;
a0006 := a0003.leftjoin (a0025.reverse ());
a0016 := a0006.mark (0@0).reverse ();
a0074 := a0006.reverse ().mark (0@0).reverse ();
a0006 := unused;
a0006 := a0016.leftjoin (a0003);
a0006 := a0006.reverse ().mark (0@0).reverse ();
a0075 := a0016.leftjoin (a0011);
a0075 := a0075.reverse ().mark (0@0).reverse ();
a0077 := a0016.leftjoin (a0009);
a0077 := a0077.reverse ().mark (0@0).reverse ();
a0078 := a0074.leftjoin (a0025);
a0078 := a0078.reverse ().mark (0@0).reverse ();
a0016 := unused;
a0003 := unused;
a0011 := unused;
a0009 := unused;
a0025 := unused;
;
;
;
;
a0078 := unused;
;
;
;
a0003 := a0019.leftjoin (a0006.reverse ());
a0009 := a0003.mark (0@0).reverse ();
a0011 := a0003.reverse ().mark (0@0).reverse ();
a0003 := unused;
a0003 := a0009.leftjoin (a0015);
a0003 := a0003.reverse ().mark (0@0).reverse ();
a0016 := a0009.leftjoin (a0019);
a0016 := a0016.reverse ().mark (0@0).reverse ();
a0025 := a0011.leftjoin (a0006);
a0025 := a0025.reverse ().mark (0@0).reverse ();
a0078 := a0011.leftjoin (a0075);
a0078 := a0078.reverse ().mark (0@0).reverse ();
a0079 := a0011.leftjoin (a0077);
a0079 := a0079.reverse ().mark (0@0).reverse ();
a0009 := unused;
a0015 := unused;
a0019 := unused;
a0006 := unused;
a0075 := unused;
a0077 := unused;
;
;
;
;
;
a0016 := unused;
a0025 := unused;
;
;
;
a0006 := a0010.leftjoin (a0003.reverse ());
a0009 := a0006.mark (0@0).reverse ();
a0015 := a0006.reverse ().mark (0@0).reverse ();
a0006 := unused;
a0006 := a0009.leftjoin (a0005);
a0006 := a0006.reverse ().mark (0@0).reverse ();
a0016 := a0009.leftjoin (a0010);
a0016 := a0016.reverse ().mark (0@0).reverse ();
a0019 := a0015.leftjoin (a0003);
a0019 := a0019.reverse ().mark (0@0).reverse ();
a0025 := a0015.leftjoin (a0078);
a0025 := a0025.reverse ().mark (0@0).reverse ();
a0075 := a0015.leftjoin (a0079);
a0075 := a0075.reverse ().mark (0@0).reverse ();
a0009 := unused;
a0003 := unused;
a0078 := unused;
a0079 := unused;
;
;
;
;
;
a0016 := unused;
a0019 := unused;
;
;
;
a0003 := a0006.CTgroup ();
a0003 := a0003.CTmap ();
a0003 := a0003.CTrefine (a0025);
a0003 := a0003.CTrefine (a0075);
a0003 := a0003.mark (0@0).reverse ();
a0009 := a0003.leftjoin (a0006);
a0009 := a0009.reverse ().mark (0@0).reverse ();
a0016 := a0003.leftjoin (a0025);
a0016 := a0016.reverse ().mark (0@0).reverse ();
a0019 := a0003.leftjoin (a0075);
a0019 := a0019.reverse ().mark (0@0).reverse ();
a0003 := unused;
a0006 := unused;
a0025 := unused;
a0075 := unused;
;
;
;
a0003 := a0009.CTgroup ();
a0003 := a0003.CTmap ().CTderive (a0016);
a0003 := a0003.CTmap ().CTderive (a0019);
a0003 := a0003.CTextend ().mark (0@0).reverse ();
a0006 := a0003.leftjoin (a0009);
a0006 := a0006.reverse ().mark (0@0).reverse ();
a0025 := a0003.leftjoin (a0016);
a0025 := a0025.reverse ().mark (0@0).reverse ();
a0075 := a0003.leftjoin (a0019);
a0075 := a0075.reverse ().mark (0@0).reverse ();
a0003 := unused;
a0009 := unused;
a0016 := unused;
a0019 := unused;
;
;
;
a0025 := unused;
a0075 := unused;
;
a0003 := {count}(a0006.reverse ());
a0003 := [lng](a0003);
a0009 := a0003.reverse ().mark (0@0).reverse ();
a0016 := a0003.mark (0@0).reverse ();
a0003 := unused;
a0006 := unused;
;
;
;
a0003 := a0000.reverse ().kdiff (a0016.reverse ()).mark (0@0).reverse ();
;
a0006 := a0003.project (0LL);
;
;
a0019 := a0016.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0019 := a0019.insert (a0003.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0025 := a0009.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0025 := a0025.insert (a0006.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0009 := unused;
a0016 := unused;
a0003 := unused;
a0006 := unused;
;
;
a0006 := [str](a0025);
;
;
;
a0009 := text_constr (a0006, ws);
ws := a0009.fetch (0);
a0016 := a0009.fetch (1);
a0075 := a0009.fetch (2);
a0009 := unused;
;
;
;
;
;
a0009 := a0000.project (add_qname ("", "", "challenge", ws));
;
;
;
;
;
;
;
a0006 := unused;
a0025 := unused;
;
;
;
a0006 := a0019.project (1@0);
;
;
;
;
a0025 := a0019.reverse ().sort ().reverse ();
a0025 := a0025.CTrefine (a0006);
a0025 := a0025.mark (0@0).reverse ();
a0077 := a0025.leftjoin (a0019);
a0077 := a0077.reverse ().mark (0@0).reverse ();
a0078 := a0025.leftjoin (a0075);
a0078 := a0078.reverse ().mark (0@0).reverse ();
a0079 := a0025.leftjoin (a0016);
a0079 := a0079.reverse ().mark (0@0).reverse ();
a0080 := a0025.leftjoin (a0006);
a0080 := a0080.reverse ().mark (0@0).reverse ();
a0025 := unused;
a0019 := unused;
a0075 := unused;
a0016 := unused;
a0006 := unused;
;
;
;
;
a0006 := elem_constr (a0000, a0009, a0077, a0079, a0078, new (void, oid).seqbase (0@0), new (void, oid).seqbase (0@0), ws);
[ "iter_unq" ]
#-----------------#
# h	h	  # name
# void	void	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ "pfrag" ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ "pre" ]
#-----------------#
# h	t	  # name
# void	void	  # type
#-----------------#
[ 0@0,	  8@0	  ]
[ "pre[0]" ]
[ 8@0 ]
[ "pre" ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  8@0	  ]
[ "pre[0]" ]
[ 8@0 ]
[ "res_scj" ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  0@0	  ]
#-----------------#
# t	h	  # name
# void	void	  # type
#-----------------#
[ 0@0,	  8@0	  ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ nil,	  0@0	  ]
ws := a0006.fetch (0);
a0016 := a0006.fetch (1);
a0019 := a0006.fetch (2);
a0009 := unused;
a0077 := unused;
a0078 := unused;
a0079 := unused;
a0080 := unused;
;
;
;
a0009 := a0012.reverse ().sort ().reverse ();
a0009 := a0009.CTrefine (a0014);
a0009 := a0009.CTrefine (a0013);
a0009 := a0009.mark (0@0).reverse ();
a0025 := a0009.leftjoin (a0012);
a0025 := a0025.reverse ().mark (0@0).reverse ();
a0075 := a0009.leftjoin (a0013);
a0075 := a0075.reverse ().mark (0@0).reverse ();
a0077 := a0009.leftjoin (a0014);
a0077 := a0077.reverse ().mark (0@0).reverse ();
a0009 := unused;
;
;
;
a0009 := mvaljoin (a0075, a0077, ws.fetch (ATTR_OWN));
a0079 := a0009.reverse ().mark (0@0).reverse ();
a0080 := a0009.mark (0@0).reverse ().leftjoin (a0077);
a0078 := a0009.mark (0@0).reverse ().leftjoin (a0025);
a0009 := mposjoin (mposjoin (a0079, a0080, ws.fetch (ATTR_QN)), mposjoin (a0079, a0080, ws.fetch (ATTR_CONT)), ws.fetch (QN_LOC));
a0009 := a0009.ord_uselect ("income");
a0009 := a0009.mark (0@0).reverse ();
a0079 := a0009.leftjoin (a0079);
a0080 := a0009.leftjoin (a0080);
a0078 := a0009.leftjoin (a0078);
a0009 := mposjoin (mposjoin (a0079, a0080, ws.fetch (ATTR_QN)), mposjoin (a0079, a0080, ws.fetch (ATTR_CONT)), ws.fetch (QN_URI));
a0009 := a0009.ord_uselect ("");
a0009 := a0009.mark (0@0).reverse ();
a0079 := a0009.leftjoin (a0079);
a0080 := a0009.leftjoin (a0080);
a0078 := a0009.leftjoin (a0078);
a0079 := a0079.reverse ().mark (0@0).reverse ();
a0080 := a0080.reverse ().mark (0@0).reverse ();
a0078 := a0078.reverse ().mark (0@0).reverse ();
a0009 := unused;
a0025 := unused;
a0075 := unused;
a0077 := unused;
;
;
;
a0009 := a0078.CTgroup ();
a0009 := a0009.CTmap ().CTderive (a0080);
a0009 := a0009.CTmap ().CTderive (a0079);
a0009 := a0009.CTextend ().mark (0@0).reverse ();
a0025 := a0009.leftjoin (a0078);
a0025 := a0025.reverse ().mark (0@0).reverse ();
a0075 := a0009.leftjoin (a0079);
a0075 := a0075.reverse ().mark (0@0).reverse ();
a0077 := a0009.leftjoin (a0080);
a0077 := a0077.reverse ().mark (0@0).reverse ();
a0009 := unused;
a0078 := unused;
a0079 := unused;
a0080 := unused;
;
;
;
a0075 := unused;
a0077 := unused;
;
a0009 := a0025.CTgroup ();
a0009 := a0009.CTextend ().mark (0@0).reverse ();
a0075 := a0009.leftjoin (a0025);
a0075 := a0075.reverse ().mark (0@0).reverse ();
a0009 := unused;
a0025 := unused;
;
a0009 := a0075.project (false);
;
;
;
a0025 := mvaljoin (a0013, a0014, ws.fetch (ATTR_OWN));
a0078 := a0025.reverse ().mark (0@0).reverse ();
a0079 := a0025.mark (0@0).reverse ().leftjoin (a0014);
a0077 := a0025.mark (0@0).reverse ().leftjoin (a0012);
a0025 := mposjoin (mposjoin (a0078, a0079, ws.fetch (ATTR_QN)), mposjoin (a0078, a0079, ws.fetch (ATTR_CONT)), ws.fetch (QN_LOC));
a0025 := a0025.ord_uselect ("income");
a0025 := a0025.mark (0@0).reverse ();
a0078 := a0025.leftjoin (a0078);
a0079 := a0025.leftjoin (a0079);
a0077 := a0025.leftjoin (a0077);
a0025 := mposjoin (mposjoin (a0078, a0079, ws.fetch (ATTR_QN)), mposjoin (a0078, a0079, ws.fetch (ATTR_CONT)), ws.fetch (QN_URI));
a0025 := a0025.ord_uselect ("");
a0025 := a0025.mark (0@0).reverse ();
a0078 := a0025.leftjoin (a0078);
a0079 := a0025.leftjoin (a0079);
a0077 := a0025.leftjoin (a0077);
a0078 := a0078.reverse ().mark (0@0).reverse ();
a0079 := a0079.reverse ().mark (0@0).reverse ();
a0077 := a0077.reverse ().mark (0@0).reverse ();
a0025 := unused;
a0012 := unused;
a0013 := unused;
a0014 := unused;
;
;
;
a0012 := a0079.CTgroup ();
a0012 := a0012.CTmap ().CTderive (a0078);
a0012 := a0012.CTmap ().CTderive (a0077);
a0012 := a0012.CTextend ().mark (0@0).reverse ();
a0013 := a0012.leftjoin (a0077);
a0013 := a0013.reverse ().mark (0@0).reverse ();
a0014 := a0012.leftjoin (a0078);
a0014 := a0014.reverse ().mark (0@0).reverse ();
a0025 := a0012.leftjoin (a0079);
a0025 := a0025.reverse ().mark (0@0).reverse ();
a0012 := unused;
a0077 := unused;
a0078 := unused;
a0079 := unused;
;
;
;
a0014 := unused;
a0025 := unused;
;
a0012 := a0001.reverse ().kdiff (a0013.reverse ()).mark (0@0).reverse ();
a0013 := unused;
;
a0013 := a0012.project (true);
;
;
a0014 := a0075.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0014 := a0014.insert (a0012.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0025 := a0009.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0025 := a0025.insert (a0013.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0075 := unused;
a0009 := unused;
a0012 := unused;
a0013 := unused;
;
;
a0009 := a0025.uselect (true).mark (0@0).reverse ();
a0012 := a0009.leftjoin (a0014);
a0012 := a0012.reverse ().mark (0@0).reverse ();
a0013 := a0009.leftjoin (a0025);
a0013 := a0013.reverse ().mark (0@0).reverse ();
a0009 := unused;
a0014 := unused;
a0025 := unused;
;
;
a0013 := unused;
;
a0009 := a0001.leftjoin (a0012.reverse ());
a0013 := a0009.mark (0@0).reverse ();
a0014 := a0009.reverse ().mark (0@0).reverse ();
a0009 := unused;
a0009 := a0013.leftjoin (a0001);
a0009 := a0009.reverse ().mark (0@0).reverse ();
a0025 := a0013.leftjoin (a0008);
a0025 := a0025.reverse ().mark (0@0).reverse ();
a0075 := a0013.leftjoin (a0004);
a0075 := a0075.reverse ().mark (0@0).reverse ();
a0077 := a0014.leftjoin (a0012);
a0077 := a0077.reverse ().mark (0@0).reverse ();
a0013 := unused;
a0001 := unused;
a0008 := unused;
a0004 := unused;
a0012 := unused;
;
;
;
;
a0025 := unused;
a0075 := unused;
a0077 := unused;
;
a0001 := a0010.leftjoin (a0009.reverse ());
a0004 := a0001.mark (0@0).reverse ();
a0008 := a0001.reverse ().mark (0@0).reverse ();
a0001 := unused;
a0001 := a0004.leftjoin (a0005);
a0001 := a0001.reverse ().mark (0@0).reverse ();
a0012 := a0004.leftjoin (a0010);
a0012 := a0012.reverse ().mark (0@0).reverse ();
a0013 := a0008.leftjoin (a0009);
a0013 := a0013.reverse ().mark (0@0).reverse ();
a0004 := unused;
a0005 := unused;
a0010 := unused;
a0009 := unused;
;
;
;
a0012 := unused;
a0013 := unused;
;
a0004 := {count}(a0001.reverse ());
a0004 := [lng](a0004);
a0005 := a0004.reverse ().mark (0@0).reverse ();
a0009 := a0004.mark (0@0).reverse ();
a0004 := unused;
a0001 := unused;
;
;
;
a0001 := a0000.reverse ().kdiff (a0009.reverse ()).mark (0@0).reverse ();
;
a0004 := a0001.project (0LL);
;
;
a0010 := a0009.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0010 := a0010.insert (a0001.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0012 := a0005.copy ().reverse ().project (nil).reverse ().access (BAT_APPEND);
a0012 := a0012.insert (a0004.copy ().reverse ().project (nil).reverse ()).access (BAT_READ).reverse ().mark (0@0).reverse ();
a0005 := unused;
a0009 := unused;
a0001 := unused;
a0004 := unused;
;
;
a0004 := [str](a0012);
;
;
;
a0005 := text_constr (a0004, ws);
ws := a0005.fetch (0);
a0009 := a0005.fetch (1);
a0013 := a0005.fetch (2);
a0005 := unused;
;
;
;
;
;
a0005 := a0000.project (add_qname ("", "", "na", ws));
;
;
;
;
;
;
;
a0004 := unused;
a0012 := unused;
;
;
;
a0004 := a0010.project (1@0);
;
;
;
;
a0012 := a0010.reverse ().sort ().reverse ();
a0012 := a0012.CTrefine (a0004);
a0012 := a0012.mark (0@0).reverse ();
a0025 := a0012.leftjoin (a0010);
a0025 := a0025.reverse ().mark (0@0).reverse ();
a0075 := a0012.leftjoin (a0013);
a0075 := a0075.reverse ().mark (0@0).reverse ();
a0077 := a0012.leftjoin (a0009);
a0077 := a0077.reverse ().mark (0@0).reverse ();
a0078 := a0012.leftjoin (a0004);
a0078 := a0078.reverse ().mark (0@0).reverse ();
a0012 := unused;
a0010 := unused;
a0013 := unused;
a0009 := unused;
a0004 := unused;
;
;
;
;
a0004 := elem_constr (a0000, a0005, a0025, a0077, a0075, new (void, oid).seqbase (0@0), new (void, oid).seqbase (0@0), ws);
[ "iter_unq" ]
#-----------------#
# h	h	  # name
# void	void	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ "pfrag" ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ "pre" ]
#-----------------#
# h	t	  # name
# void	void	  # type
#-----------------#
[ 0@0,	  11@0	  ]
[ "pre[0]" ]
[ 11@0 ]
[ "pre" ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  11@0	  ]
[ "pre[0]" ]
[ 11@0 ]
[ "res_scj" ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  0@0	  ]
#-----------------#
# t	h	  # name
# void	void	  # type
#-----------------#
[ 0@0,	  11@0	  ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ nil,	  0@0	  ]
ws := a0004.fetch (0);
a0009 := a0004.fetch (1);
a0010 := a0004.fetch (2);
a0005 := unused;
a0025 := unused;
a0075 := unused;
a0077 := unused;
a0078 := unused;
;
;
;
a0005 := a0000.project (add_qname ("", "", "result", ws));
;
;
;
;
;
a0012 := a0042.project (1@0);
;
;
;
;
a0013 := a0042.project (1@0);
;
;
;
;
;
;
;
;
a0025 := a0067.project (1@0);
;
;
;
;
a0075 := a0067.project (1@0);
;
;
;
;
;
;
;
;
a0077 := a0016.project (1@0);
;
;
;
;
a0078 := a0016.project (1@0);
;
;
;
;
;
;
;
;
a0079 := a0009.project (1@0);
;
;
;
;
a0080 := a0009.project (2@0);
;
;
;
;
;
a0081 := merged_union (a0000.chk_order (), a0000.chk_order (), a0019, a0010, a0016, a0009, a0077, a0079, a0078, a0080);
a0082 := a0081.fetch (0);
a0083 := a0081.fetch (1);
a0084 := a0081.fetch (2);
a0085 := a0081.fetch (3);
a0086 := a0081.fetch (4);
a0081 := unused;
a0016 := unused;
a0019 := unused;
a0077 := unused;
a0078 := unused;
a0009 := unused;
a0010 := unused;
a0079 := unused;
a0080 := unused;
;
;
;
;
;
a0009 := a0082.mark_grp (a0082.reverse ().kunique ().project (1@0));
;
;
;
;
;
;
a0085 := unused;
a0086 := unused;
;
;
;
;
a0010 := a0082.project (2@0);
;
;
;
;
;
a0016 := merged_union (a0000.chk_order (), a0082.chk_order (), a0069, a0083, a0067, a0084, a0025, a0009, a0075, a0010);
a0019 := a0016.fetch (0);
a0077 := a0016.fetch (1);
a0078 := a0016.fetch (2);
a0079 := a0016.fetch (3);
a0080 := a0016.fetch (4);
a0016 := unused;
a0067 := unused;
a0069 := unused;
a0025 := unused;
a0075 := unused;
a0082 := unused;
a0009 := unused;
a0083 := unused;
a0084 := unused;
a0010 := unused;
;
;
;
;
;
a0009 := a0019.mark_grp (a0019.reverse ().kunique ().project (1@0));
;
;
;
;
;
;
a0079 := unused;
a0080 := unused;
;
;
;
;
a0010 := a0019.project (2@0);
;
;
;
;
;
a0016 := merged_union (a0000.chk_order (), a0019.chk_order (), a0044, a0077, a0042, a0078, a0012, a0009, a0013, a0010);
a0025 := a0016.fetch (0);
a0067 := a0016.fetch (1);
a0069 := a0016.fetch (2);
a0075 := a0016.fetch (3);
a0079 := a0016.fetch (4);
a0016 := unused;
a0042 := unused;
a0044 := unused;
a0012 := unused;
a0013 := unused;
a0019 := unused;
a0009 := unused;
a0077 := unused;
a0078 := unused;
a0010 := unused;
;
;
;
;
;
a0009 := a0025.mark_grp (a0025.reverse ().kunique ().project (1@0));
;
;
;
;
;
;
a0075 := unused;
a0079 := unused;
;
;
;
;
a0010 := elem_constr (a0000, a0005, a0025, a0069, a0067, new (void, oid).seqbase (0@0), new (void, oid).seqbase (0@0), ws);
[ "iter_unq" ]
#-----------------#
# h	h	  # name
# void	void	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ 1@0,	  1@0	  ]
[ 2@0,	  2@0	  ]
[ 3@0,	  3@0	  ]
[ "pfrag" ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ 1@0,	  0@0	  ]
[ 2@0,	  0@0	  ]
[ 3@0,	  0@0	  ]
[ "pre" ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  3@0	  ]
[ 1@0,	  6@0	  ]
[ 2@0,	  9@0	  ]
[ 3@0,	  12@0	  ]
[ "pre[0]" ]
[ 3@0 ]
[ "pre" ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  3@0	  ]
[ 1@0,	  6@0	  ]
[ 2@0,	  9@0	  ]
[ 3@0,	  12@0	  ]
[ "pre[0]" ]
[ 3@0 ]
[ "res_scj" ]
#-----------------#
# t	h	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ 1@0,	  0@0	  ]
[ 2@0,	  1@0	  ]
[ 3@0,	  1@0	  ]
[ 4@0,	  2@0	  ]
[ 5@0,	  2@0	  ]
[ 6@0,	  3@0	  ]
[ 7@0,	  3@0	  ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  3@0	  ]
[ 1@0,	  4@0	  ]
[ 2@0,	  6@0	  ]
[ 3@0,	  7@0	  ]
[ 4@0,	  9@0	  ]
[ 5@0,	  10@0	  ]
[ 6@0,	  12@0	  ]
[ 7@0,	  13@0	  ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ nil,	  0@0	  ]
ws := a0010.fetch (0);
a0012 := a0010.fetch (1);
a0013 := a0010.fetch (2);
a0005 := unused;
a0025 := unused;
a0009 := unused;
a0067 := unused;
a0069 := unused;
;
;
;
;
;
;
a0005 := a0012.project (1@0);
;
;
;
;
a0009 := new (lng, void).key (true).reverse ().seqbase (0@0);
a0016 := new (dbl, void).key (true).reverse ().seqbase (0@0);
a0019 := new (dbl, void).key (true).reverse ().seqbase (0@0);
a0025 := new (str, void).key (true).reverse ().seqbase (0@0);
a0042 := new (void, oid).seqbase (0@0);
a0044 := new (void, int).seqbase (0@0);
a0042 := a0012;
a0044 := a0013.set_kind (ELEM);
a0042 := a0042.reverse ().mark (0@0).reverse ();
a0044 := a0044.reverse ().mark (0@0).reverse ();
print_result ("xml", ws, a0042, a0044, a0009, a0016, a0019, a0025);
<?xml version="1.0" encoding="utf-8"?>
<XQueryResult><result><preferred>1</preferred><standard>52</standard><challenge>19</challenge><na>55</na></result></XQueryResult>
a0012 := unused;
a0013 := unused;
a0000 := unused;
a0005 := unused;
quit();

# 20:30:27 >  
# 20:30:27 >  Done.
# 20:30:27 >  

