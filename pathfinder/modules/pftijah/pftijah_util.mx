@' Copyright Notice:
@' -----------------
@'
@' The contents of this file are subject to the PfTijah Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://dbappl.cs.utwente.nl/Legal/PfTijah-1.1.html
@' 
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@' 
@' The Original Code is the PfTijah system.
@' 
@' The Initial Developer of the Original Code is the "University of Twente".
@' Portions created by the "University of Twente" are 
@' Copyright (C) 2006-2007 "University of Twente".
@' All Rights Reserved.
@'

@f pftijah_util
@a Jan Flokstra
@a Henning Rode
@t pftijah_util

@h

extern BAT *pftu_lookup_bat(str name);

extern int  pftu_make_persistent(BAT* b, char* name);

extern BAT* pftu_create_bat(char* name, int ht, int tt, int persists);

@c
#include <pf_config.h>

/*******************************************
 * pftijah_util.c : the parallel term database
 *
 */

#include <gdk.h>

char* pftu_batname0(char* format, int i) {
    static char buff[64];

    sprintf(buff,format,i);
    return buff;
}

char* pftu_batname1(char* format, char* arg1, int i) {
    static char buff[64];

    sprintf(buff,format,arg1,i);
    return buff;
}

char* pftu_batname2(char* format, char* arg1, char* arg2, int i) {
    static char buff[64];

    sprintf(buff,format,arg1,arg2,i);
    return buff;
}

BAT *pftu_lookup_bat(str name) {
    bat b = BBPindex(name);
    
    if ( b == bat_nil ) {
    	return NULL;
    } else {
    	return BBPdescriptor(b);
    }
}

BAT* pftu_make_persistent(BAT* b, char* name) {
    if ( (name) && (BBPrename(BBPcacheid(b),name)==0) ) {
      stream_printf(GDKout,"#pftu_cr_bat(\"%s\"): bat creation failed.\n",name);
      return NULL;
    }
    b->batPersistence = PERSISTENT;
    return b;
}

BAT* pftu_create_bat(char* name, int ht, int tt, int persists) {
    BAT* b = BATnew(ht,tt,0);
    if ( (!b) || (BBPrename(BBPcacheid(b),name)!=0) ) {
      stream_printf(GDKout,"#pftu_cr_bat(\"%s\"): bat creation failed.\n",name);
      return NULL;
    }
    if ( persists ) {
      b->batPersistence = PERSISTENT;
    }
    return b;
}

/* vim:set shiftwidth=4 expandtab: */
