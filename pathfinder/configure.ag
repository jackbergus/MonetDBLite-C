#                                               -*- Autoconf -*-

# The contents of this file are subject to the Pathfinder Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://monetdb.cwi.nl/Legal/PathfinderLicense-1.1.html
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
# the License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the Pathfinder system.
#
# The Original Code has initially been developed by the Database &
# Information Systems Group at the University of Konstanz, Germany and
# the Database Group at the Technische Universitaet Muenchen, Germany.
# It is now maintained by the Database Systems Group at the Eberhard
# Karls Universitaet Tuebingen, Germany.  Portions created by the
# University of Konstanz, the Technische Universitaet Muenchen, and the
# Universitaet Tuebingen are Copyright (C) 2000-2005 University of
# Konstanz, (C) 2005-2008 Technische Universitaet Muenchen, and (C)
# 2008-2010 Eberhard Karls Universitaet Tuebingen, respectively.  All
# Rights Reserved.

dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.60)
AC_INIT([MonetDB XQuery], [0.36.3], [monet@cwi.nl], [MonetDB-XQuery])
#                          ^^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AC_CONFIG_SRCDIR(compiler/main.c)
AC_CONFIG_AUX_DIR(conf)
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
dnl AH_TOP([#include "sysdefs.h"])
AH_BOTTOM([#include "stddef.h"])

dnl ----------------------
AM_INIT_AUTOMAKE
AM_CONFIG_HEADER(pf_config.h:conf/config.h.in)
CONFIG_H=pf_config.h
AC_SUBST(CONFIG_H)

# PATHFINDER_BUILD and PATHFINDER_SOURCE are *only* used for monetdb-xquery-config and RunMserver
# PATHFINDER_SOURCE is the absolute path name of the source directory
# (srcdir can be relative)

# The Q versions of various variables are used in places where \'s
# need to be escapes with an extra \.  Configure does not support \'s
# in path names, so there is no need to do anything special here
# except set the variables.  The command to set them in case we do
# need to escape the \'s is Qvar=`echo "$var" | sed 's/\\\\/\\\\\\\\/g'`
PATHFINDER_BUILD=[`pwd`]
AC_SUBST(PATHFINDER_BUILD)

PATHFINDER_SOURCE=[`(cd $srcdir && pwd)`]
AC_SUBST(PATHFINDER_SOURCE)

AM_MONETDB_XQ_VARS_1()


dnl Check for Monet
req_monetdb_ver='1.36.0'
#                ^^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AM_MONETDB_COMMON($req_monetdb_ver)
if test "x$have_monetdb" != xyes; then
    if test "x$MONETDB_VERSION" = x; then
        AC_MSG_NOTICE([No MonetDB base installation found.  No runtime support for MonetDB4 and MonetDB5 will be compiled.])
    else
        AC_MSG_WARN([Your MonetDB base installation is outdated (version $MONETDB_VERSION, required $req_monetdb_ver).  No runtime support for MonetDB4 and MonetDB5 will be compiled.])
    fi
fi

dnl must check for compiler before checking for MonetDB4
AM_MONETDB_DEFAULTS()
AM_MONETDB_COMPILER()
if test "x$have_c99" != xyes; then
	AC_MSG_ERROR([Pathfinder requires a C99 compliant C compiler, but your C compiler does not seem to be C99 compliant.])
fi

req_clients_ver='1.36.0'
#                ^^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AM_MONETDB_CLIENTS($req_clients_ver)
AM_MONETDB_TOOLS()
AM_MONETDB_OPTIONS()
AM_MONETDB_LIBS()
AM_MONETDB_UTILS()

dnl overwrite CONDITIONAL HAVE_EXTRA_MK
dnl defined false in AM_MONETDB_UTILS()
AM_CONDITIONAL(HAVE_EXTRA_MK, true)

dnl Test for MonetDB4 and MonetDB5 (only if MonetDB base was found)

dnl We may not call AM_MONETDB4 and AM_MONETDB5 conditionally,
dnl since they use AM_CONDITIONAL.  So we do both tests, but
dnl ignore their outcome if we haven't found MonetDB common before.

req_monetdb4_ver='4.36.0'
#                 ^^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AM_MONETDB4($req_monetdb4_ver)

req_monetdb5_ver='5.18.0'
#                 ^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AM_MONETDB5($req_monetdb5_ver)

if test "x$have_monetdb" = xyes; then

    dnl Test for MonetDB4
    if test "x$have_monetdb4" != xyes; then
        if test "x$MONETDB4_VERSION" = x; then
            AC_MSG_NOTICE([Pathfinder will be compiled without MonetDB4 support])
            AC_MSG_NOTICE([(no installation of MonetDB4 found).])
        else
            AC_MSG_WARN([Pathfinder will be compiled without MonetDB4 support,])
            AC_MSG_WARN([since your version ($MONETDB4_VERSION) is outdated])
            AC_MSG_WARN([(Pathfinder requires at least version $req_monetdb4_ver).])
        fi
    else
        AC_MSG_NOTICE([MonetDB4 support enabled (found version $MONETDB4_VERSION of MonetDB4).])
    fi

    dnl Test for MonetDB5
    if test "x$have_monetdb5" != xyes; then
        if test "x$MONETDB5_VERSION" = x; then
            AC_MSG_NOTICE([Pathfinder will be compiled without MonetDB5 support])
            AC_MSG_NOTICE([(no installation of MonetDB5 found).])
        else
            AC_MSG_WARN([Pathfinder will be compiled without MonetDB5 support,])
            AC_MSG_WARN([since your version ($MONETDB5_VERSION) is outdated])
            AC_MSG_WARN([(Pathfinder requires at least version $req_monetdb5_ver).])
        fi
    else
        AC_MSG_NOTICE([MonetDB5 support enabled (found version $MONETDB5_VERSION of MonetDB5).])
    fi

else

    dnl No MonetDB base installation found
    AC_MSG_NOTICE([Support for MonetDB4 and MonetDB5 disabled, since no])
    AC_MSG_NOTICE([MonetDB base installation was found.])
    have_monetdb4=no
    have_monetdb5=no

fi

AM_CONDITIONAL(HAVE_MONETDB4, test "x$have_monetdb4" = xyes)
AM_CONDITIONAL(HAVE_MONETDB5, test "x$have_monetdb5" = xyes)


dnl provide different versions of the paths derived above
AM_MONETDB_XQ_VARS_2()
AC_DEFINE_UNQUOTED(PATHFINDER_PREFIX,"$QXprefix",[architecture-independent files])
AC_DEFINE_UNQUOTED(PATHFINDER_EXEC_PREFIX,"$QXexec_prefix",[architecture-dependent files])
QPATHFINDER_BUILD="$PATHFINDER_BUILD"
XPATHFINDER_BUILD="`$translatepath "$PATHFINDER_BUILD"`"
QXPATHFINDER_BUILD="`echo "$XPATHFINDER_BUILD" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(QPATHFINDER_BUILD)
AC_SUBST(XPATHFINDER_BUILD)
AC_SUBST(QXPATHFINDER_BUILD)
QPATHFINDER_SOURCE="$PATHFINDER_SOURCE"
XPATHFINDER_SOURCE="`$translatepath "$PATHFINDER_SOURCE"`"
QXPATHFINDER_SOURCE="`echo "$XPATHFINDER_SOURCE" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(QPATHFINDER_SOURCE)
AC_SUBST(XPATHFINDER_SOURCE)
AC_SUBST(QXPATHFINDER_SOURCE)
AC_DEFINE_UNQUOTED(PATHFINDER_LOCALSTATEDIR,"$QXlocalstatedir",[modifiable single-machine data])
AC_DEFINE_UNQUOTED(PATHFINDER_LIBDIR,"$QXlibdir",[object code libraries])
AC_DEFINE_UNQUOTED(PATHFINDER_SYSCONFDIR,"$QXsysconfdir",[read-only single-machine data])


AM_PROG_CC_C_O

dnl Pathfinder needs bison (not yacc) and the `locations' feature
dnl coming with bison versions >= 1.33.

if test "x$YACC" != "x"; then    dnl Yacc found on the system?

AC_MSG_CHECKING([for locations feature in bison/yacc])

dnl A tiny input file for bison containing the `%locations' option
cat <<EOF > conftest.y
%locations
%token A
%%
B : A;
%%
EOF

if $YACC conftest.y >/dev/null 2>&1 ; then
  AC_DEFINE(HAVE_LOCATIONS, 1, [Does bison have the `locations' feature?])
  AC_MSG_RESULT(yes)
else
  AC_DEFINE(HAVE_LOCATIONS, 0, [Does bison have the `locations' feature?])
  AC_MSG_RESULT(no)
  YACC=''
  AC_MSG_WARN([Your version of yacc/bison does not provide the `locations'
               feature, coming with bison >= 1.33. You will not be able to
               compile the Pathfinder compiler from the development
               sources.])
fi

fi   dnl Yacc found on the system?


AC_LANG_C

if test -f "$srcdir"/vertoo.data; then
	AC_ARG_WITH(burg,
		AC_HELP_STRING([--with-burg=FILE], [burg is installed as FILE]),
		have_burg="$withval",
		have_burg=auto)
	if test "x$have_burg" = xauto; then
		AC_PATH_PROGS(BURG,[ burg$EXEEXT burg ],,$PATH)
		if test "x$BURG" = x; then
			AC_ERROR([No burg$EXEEXT found in PATH=$PATH])
		fi
	elif test "x$have_burg" = xno; then
		AC_MSG_ERROR([burg is required])
	else
		BURG="$withval"
	fi
	AC_SUBST(BURG)
fi

dnl
dnl We support the GNU getopt library (and its features for long option
dnl names) if we find it available. Otherwise we fall back to the standard
dnl Unix unistd.h version.
dnl
dnl Check for standard Unix unistd.h
AC_CHECK_HEADER([unistd.h], [have_unistd="yes"], [have_unistd="no"])

if test x$have_unistd != "xyes"; then
    AC_MSG_ERROR([Pathfinder needs the getopt function to parse command
                 line options. Please check the existence of the header file
                 unistd.h on your system.])
fi

dnl Check for GNU Getopt
AC_CHECK_HEADERS([getopt.h])
AC_CHECK_FUNCS(getopt_long)

dnl Check for stdbool.h
AC_CHECK_HEADERS([stdbool.h])

dnl Check for type bool
AC_CHECK_TYPES(bool)

dnl Check for stdint.h
AC_CHECK_HEADERS([stdint.h])

dnl Check for type socklen_t
AC_CHECK_TYPE(socklen_t, AC_DEFINE(HAVE_SOCKLEN_T, 1, [Define to 1 if the system has the type `socklen_t'.]), , [#include <sys/types.h>
#include <sys/socket.h>])

AC_CHECK_FUNCS(inet_ntop)

dnl Check for libgen.h and function basename
AC_CHECK_HEADERS([libgen.h])
AC_CHECK_FUNCS(basename)

dnl Check some sizes
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(void *)


dnl Seems like the compiler on SunOS 5.8 cannot cope with the
dnl __attribute__ specifications that can give compilers additional
dnl hints about a function (style of variable argument list, functions
dnl that never return, etc.)
AC_MSG_CHECKING([if your compiler understands `__attribute__'])

save_CFLAGS="$CFLAGS"
case "$GCC-$CC-$host_os" in
-*-solaris*)
        dnl  Sun compiler on Solaris:
	dnl  treat warnings as errors to fail on
	dnl  'warning: attribute parameter "printf" is undefined'
        CFLAGS="$CFLAGS -errwarn=%all"
        ;;
esac

AC_COMPILE_IFELSE(AC_LANG_PROGRAM([[
#include <stdlib.h>

static void foo (const char *a, ...)
	__attribute__ ((format (printf, 1, 2)));

static void foo (const char *a, ...)
	{ (void)a; }

]],
[[ foo ("%s", ""); ]]
),
[AC_DEFINE([HAVE_FUNCTION_ATTRIBUTES], 1,
  [Does your compiler support function attributes (__attribute__)?])
AC_MSG_RESULT(yes)],
AC_MSG_RESULT(no))

CFLAGS="$save_CFLAGS"

AH_VERBATIM([__attribute__],
[ /* If the compiler does not support function attributes via __attribute__,
     we just define __attribute__(a) to nothing. */
#if HAVE_FUNCTION_ATTRIBUTES != 1
#define __attribute__(a)
#endif
])

dnl [AC_DEFINE([ __attribute__(a) ],,
dnl            [Compiler does not understand __attribute__.])

dnl We use signal handlers to catch segmentation faults and
dnl give helpful messages to the user, if available.
AC_CHECK_HEADERS(signal.h)
AC_TYPE_SIGNAL

dnl Convenience feature: Make argument of --debug case insensitive
dnl if we have strcasecmp().
AC_CHECK_HEADERS([strings.h],
                 [AC_CHECK_FUNCS([strcasecmp])],
                 [])

dnl The user may enter a location of the libxml2 library on the command line
dnl (with `--with-libxml2=DIR) or disable the libxml2 support.
dnl
dnl AC_ARG_WITH makes the --with-xxx available, then we do some checks and
dnl see if we actually found libxml2.
have_libxml2="auto"
AC_ARG_WITH(libxml2,
    AC_HELP_STRING([--with-libxml2=DIR],[libxml2 library is installed in DIR]),
    [have_libxml2="$withval"], [have_libxml2="auto"])
have_SAX2="$have_libxml2"

save_CPPFLAGS="$CPPFLAGS"
save_LDFLAGS="$LDFLAGS"
if test "x$have_libxml2" != xno; then

    XML2_CONFIG=""
    XPATH="$PATH"
    case "$have_libxml2" in
    auto|yes)
	;;
    *)
	XPATH="$have_libxml2/bin"
	;;
    esac

    AC_PATH_PROG(XML2_CONFIG,xml2-config.${bits},,$XPATH)
    if test "x$XML2_CONFIG" = x; then
        AC_PATH_PROG(XML2_CONFIG,xml2-${bits}-config,,$XPATH)
        if test "x$XML2_CONFIG" = x; then
            AC_PATH_PROG(XML2_CONFIG,xml2-config,,$XPATH)
        fi
    fi

    if test "x$XML2_CONFIG" != x; then
        LIBXML2_CFLAGS="`$XML2_CONFIG --cflags`"
        LIBXML2_LIBS="`$XML2_CONFIG --libs`"
    else
	case "$have_libxml2" in
	auto|no|yes)
	    ;;
	*)
	    LIBXML2_CFLAGS="-I$have_libxml2/include"
	    LIBXML2_LIBS="-L$have_libxml2/lib"
	    ;;
	esac
    fi

    dnl libxml2 needs iconv.h
    LIBXML2_CFLAGS="$LIBXML2_CFLAGS $ICONV_CFLAGS"
    CPPFLAGS="$CPPFLAGS $LIBXML2_CFLAGS"
    LDFLAGS="$LDFLAGS $LIBXML2_LIBS"
    AC_CHECK_HEADER([libxml/parser.h],
                    [AC_CHECK_LIB(xml2, xmlParseDocument,
                                  [have_libxml2="yes"], [have_libxml2="no"])],[],
		[#if HAVE_ICONV_H
#include <iconv.h>
#endif])
    if test "x$have_libxml2" = xyes; then
        AC_CHECK_HEADER([libxml/SAX2.h], [have_SAX2="yes"], [have_SAX2="no"])
    fi
fi
LDFLAGS="$save_LDFLAGS"
CPPFLAGS="$save_CPPFLAGS"

if test "x$have_SAX2" = xyes; then
    AC_DEFINE(HAVE_SAX2, 1,
              [Do we have the SAX2.h header file available, and hence SAX2 support in libxml2?])
    have_SAX2=1
else
    AC_DEFINE(HAVE_SAX2, 0,
              [Do we have the SAX2.h header file available, and hence SAX2 support in libxml2?])
    have_SAX2=0
fi

if test "x$have_libxml2" != xyes; then
    LIBXML2_CFLAGS=""
    LIBXML2_LIBS=""
    LIBXML2_LDADD=""
    AC_DEFINE(HAVE_LIBXML2, 0,
              [Do we have the libxml2 library available to support XML Schema?])
    AC_MSG_FAILURE([The libxml2 XML parsing library and/or include files were 
		not found or you have requested to not use it.
                This is required dependence, core components like 
		the XML Schema import functionality depends on it.])
fi

if test "x$have_libxml2" = xyes; then
    LIBXML2_LDADD="-lxml2"
    AC_DEFINE(HAVE_LIBXML2, 1,
         [Do we have the libxml2 library available to support XML Schema?])
    AC_MSG_NOTICE([The following compiler options will be used to integrate
           the libxml2 XML parsing library:
           To find the libxml2 include files: $LIBXML2_CFLAGS
           To find the libxml2 library:       $LIBXML2_LIBS
           SAX2 support:                      HAVE_SAX2=$have_SAX2])
fi

dnl Propagate the stuff to the Makefiles
AC_SUBST(LIBXML2_CFLAGS, $LIBXML2_CFLAGS)
AC_SUBST(LIBXML2_LIBS, $LIBXML2_LIBS)
AC_SUBST(LIBXML2_LDADD, $LIBXML2_LDADD)
AM_CONDITIONAL(HAVE_LIBXML2, test x"$have_libxml2" != xno)

dnl See if we have the Hans Boehm garbage collector available
dnl
dnl First allow the user to specify a location on the command line.
dnl Further down see if we find the library and abort if not.
have_gc="auto"
AC_ARG_WITH(gc,
    AC_HELP_STRING([--with-gc=DIR],[Boehm garbage collector library is installed in DIR]),
    [have_gc="$withval"], [have_gc="auto"])

if test "x$have_gc" != xauto; then
        LIBGC_CFLAGS="-I$have_gc/include"
        LIBGC_LIBS="-L$have_gc/lib"
fi

if test "x$have_gc" = xauto; then
        LIBGC_CFLAGS=""
        LIBGC_LIBS=""
fi

save_CPPFLAGS="$CPPFLAGS"
save_LDFLAGS="$LDFLAGS"
save_LIBS="$LIBS"
CPPFLAGS="$CPPFLAGS $LIBGC_CFLAGS"
LDFLAGS="$LDFLAGS $LIBGC_LIBS"
LIBS=""

dnl If we have the dl and/or the pthread library, use it
dnl (dl and/or pthread are required for the garbage collection
dnl library on some systems.)
LIBGC_LDADD=""
AC_CHECK_LIB(dl, dlopen, [LIBGC_LDADD="$LIBGC_LDADD -ldl"])
AC_CHECK_LIB(pthread, pthread_create, [LIBGC_LDADD="$LIBGC_LDADD -lpthread"])

AC_CHECK_HEADER([gc.h],
    [ dnl See if we can link in the gc library.
      dnl If we have found the dl and/or pthread library as well, also use it.
      dnl If the gc library was not found, clear LIBGC_LDADD.
      AC_CHECK_LIB(gc, GC_malloc,
                   [LIBGC_LDADD="$LIBGC_LDADD -lgc"],
                   [LIBGC_LDADD=""], [$LIBGC_LDADD])],
    [ LIBGC_LDADD=""])


LIBS="$save_LIBS"
LDFLAGS="$save_LDFLAGS"
CPPFLAGS="$save_CPPFLAGS"

if test "x$LIBGC_LDADD" = "x"; then
    AC_MSG_WARN([Unable to find the Hans Boehm garbage collector.
                 Please go get it from
                 http://www.hpl.hp.com/personal/Hans_Boehm/gc/
                 (Compilation will use memory allocation only strategy instead.)])
    AC_DEFINE(HAVE_GC, 0, [Define if you use garbage collection])
fi
if test "x$LIBGC_LDADD" != "x"; then
    AC_DEFINE(HAVE_GC, 1, [Define if you use garbage collection])
fi


dnl Propagate the variable to the Makefiles
AC_SUBST(LIBGC_CFLAGS, $LIBGC_CFLAGS)
AC_SUBST(LIBGC_LIBS, $LIBGC_LIBS)
AC_SUBST(LIBGC_LDADD, $LIBGC_LDADD)

# have_pftijah=no
# AM_CONDITIONAL(HAVE_PFTIJAH, test "x$have_pftijah" == xyes)

dnl Check for TIJAH support
dnl --enable-pftijah

if test "x$have_monetdb4" = xyes; then

    dft_pftijah=yes
    AC_ARG_ENABLE(pftijah,
            AC_HELP_STRING([--enable-pftijah],
                    [enable support for TIJAH (default=$dft_pftijah)]),
            enable_pftijah=$enableval,
            enable_pftijah=$dft_pftijah)
    case $enable_pftijah in
    yes)  AC_DEFINE(HAVE_PFTIJAH, 1, [Define if you want TIJAH])
    ;;
    esac

else

    AC_MSG_NOTICE([PFtijah support disabled (no MonetDB4 support enabled).])
    enable_pftijah=no
fi

AM_CONDITIONAL(HAVE_PFTIJAH, test "x$enable_pftijah" == xyes)

dnl Check for PROBXML support
dnl --enable-probxml

if test "x$have_monetdb4" = xyes; then

    dft_probxml=no
    AC_ARG_ENABLE(probxml,
            AC_HELP_STRING([--enable-probxml],
                    [enable support for PROBXML (default=$dft_probxml)]),
            enable_probxml=$enableval,
            enable_probxml=$dft_probxml)
    case $enable_probxml in
    yes)  AC_DEFINE(HAVE_PROBXML, 1, [Define if you want PROBXML])
    ;;
    esac

else

    AC_MSG_NOTICE([ProbXml support disabled (no MonetDB4 support enabled).])
    enable_probxml=no
fi

AM_CONDITIONAL(HAVE_PROBXML, test "x$enable_probxml" == xyes)

dnl Pathfinder has three different code generators: The
dnl "milprint_summer" back-end directly translates XQuery Core
dnl code into MIL, while the "algebra" back-end uses an intermediate
dnl representation.  The former is more feature complete, and we use
dnl it as the default if the user does not specify another default
dnl with --with-default-backend=....  In addition we have a "sql"
dnl backend that generates a SQL query plan. Note that users can ALWAYS
dnl select each of the back-ends with the -A, -M or -S switches on the
dnl compiler command line.
dnl This configure setting is primarily meant to ease debugging and
dnl testing.  If you invoke configure with --with-default-backend=algebra,
dnl Mtest will also use the algebraic back-end.
AC_ARG_WITH(default-backend,
            AC_HELP_STRING(
               [--with-default-backend=BACKEND],
               [select a default back-end (milprint_summer/algebra/sql)
                for Pathfinder (default=algebra)]),
            default_backend="$withval",
            default_backend='algebra')
if test "x$default_backend" = xmilprint_summer
then
        AC_DEFINE(ALGEBRA_IS_DEFAULT, 0,
                  [Use algebra back-end by default?])
        AC_DEFINE(MILPRINT_SUMMER_IS_DEFAULT, 1,
                  [Use milprint_summer back-end by default?])
        AC_DEFINE(SQL_IS_DEFAULT, 0,
                  [Use sql back-end by default?])
        DEFAULT_BACKEND=milprint_summer
fi
if test "x$default_backend" = xalgebra
then
        AC_DEFINE(ALGEBRA_IS_DEFAULT, 1,
                  [Use algebra back-end by default?])
        AC_DEFINE(MILPRINT_SUMMER_IS_DEFAULT, 0,
                  [Use milprint_summer back-end by default?])
        AC_DEFINE(SQL_IS_DEFAULT, 0,
                  [Use sql back-end by default?])
        DEFAULT_BACKEND=algebra
fi
if test "x$default_backend" = xsql
then
        AC_DEFINE(ALGEBRA_IS_DEFAULT, 0,
                  [Use algebra back-end by default?])
        AC_DEFINE(MILPRINT_SUMMER_IS_DEFAULT, 0,
                  [Use milprint_summer back-end by default?])
        AC_DEFINE(SQL_IS_DEFAULT, 1,
                  [Use sql back-end by default?])
        DEFAULT_BACKEND=sql
fi
if test "x$DEFAULT_BACKEND" = x
then
        AC_MSG_ERROR([Only 'milprint_summer', 'algebra', and 'sql' are allowed
                      as arguments for --with-default-backend.])
fi

AC_CHECK_HEADERS(time.h sys/time.h utime.h sys/utime.h string.h)

dnl The xmlshredder requires strdup() & strndup(). We test here if both are
dnl available on the system. If not, we will define them ourselves
dnl in shred_helpers.h & shred_helpers.c
AC_CHECK_FUNCS([strdup strndup],
	AC_CHECK_DECLS([strdup, strndup],,,[
		#ifdef HAVE_STRING_H
		#ifndef _GNU_SOURCE
		#define _GNU_SOURCE /* enable strndup prototype (on Linux, only?) */
		#endif
		#include <string.h>
		#endif
	])
)

AC_HEADER_TIME()
AC_STRUCT_TM()
AC_STRUCT_TIMEZONE()
AC_FUNC_UTIME_NULL()
AC_CHECK_FUNCS([ftime ctime_r localtime_r])
ctime_r3=yes
AC_MSG_CHECKING(ctime_r3)
AC_TRY_COMPILE([$ac_includes_default
#include <time.h>], 
[char buf[26]; time_t t; ctime_r(&t,buf,26);],
[AC_DEFINE(HAVE_CTIME_R3, 1, [Define if you have ctime_r(time_t*,char *buf,size_t s)])], [ctime_r3=no])
AC_MSG_RESULT($ctime_r3)

dnl  On Solaris, libxml2 enables threading only when _REENTRANT, __MT__
dnl  or _POSIX_C_SOURCE >= 199506L is defined.  The latter is only
dnl  defined on POSIX compliant Solaris systems (latest of the latest
dnl  as of this writing), hence defining that here would cause a
dnl  redefinition error.  To work around it, we define __MT__ here, as
dnl  _REENTRANT might also enable stuff in other software packages.
case "$GCC-$host_os" in
yes-solaris2.11)
	AC_DEFINE(__MT__, 1, [libxml2 enable threading compiler flag])
	;;
esac

dnl  Disabling the following warning is only required for the Intel compiler
dnl  and if assertions are enabled.
case "$GCC-$CC-$enable_assert" in
-*icc*-yes|-*ecc*-yes)
	dnl  # 279: controlling expression is constant
	X_CFLAGS="$X_CFLAGS -wd279";;
esac

dnl  CFLAGS for our code are stricter than what autoconf can cope with.
CFLAGS="$CFLAGS \$(X_CFLAGS)"
dnl  pathfinder code is not (yet?) up to this
case "$GCC-$gcc_ver-$host_os" in
yes-3.[[4-9]].*-*|yes-[[4-9]].*-*)
	CFLAGS="$CFLAGS -Wno-declaration-after-statement";;
esac
