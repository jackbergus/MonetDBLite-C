# The contents of this file are subject to the Pathfinder Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://monetdb.cwi.nl/Legal/PathfinderLicense-1.1.html
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
# the License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the Pathfinder system.
#
# The Initial Developer of the Original Code is the Database &
# Information Systems Group at the University of Konstanz, Germany.
# Portions created by the University of Konstanz are Copyright (C)
# 2000-2006 University of Konstanz.  All Rights Reserved.

dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.53)
AC_INIT(compiler/main.c)
AC_CONFIG_AUX_DIR(conf)
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
dnl AH_TOP([#include "monetdb_config.h"])
dnl AH_TOP([#include "sysdefs.h"])
AH_BOTTOM([#include "stddef.h"])

dnl ----------------------
AM_INIT_AUTOMAKE("pathfinder", 0.9.3, [no-define])
AM_CONFIG_HEADER(pf_config.h:conf/config.h.in)
CONFIG_H=pf_config.h
AC_SUBST(CONFIG_H)

dnl Check for Monet
AM_MONETDB_COMPILER()
if test "x$have_c99" != xyes; then
	AC_MSG_ERROR([Pathfinder requires a C99 compliant C compiler, but your C compiler does not seem to be C99 compliant.])
fi
AM_MONETDB_TOOLS()
AM_MONETDB_OPTIONS()
AM_MONETDB_LIBS()
req_monetdb_ver='4.9.3'
AM_MONET($req_monetdb_ver)
if test "x$have_monet" != xyes; then
	AC_MSG_ERROR([Pathfinder requires at least version $req_monetdb_ver of MonetDB, but only version $MONETDBVERS was found.])
fi
AM_MONETDB_UTILS()
req_monetdb_ver='4.99.19'
AM_MONET5($req_monetdb_ver)
AM_CONDITIONAL(MONET5,test "x$have_monet5" = xyes)

AM_PROG_CC_C_O

dnl Pathfinder needs bison (not yacc) and the `locations' feature
dnl coming with bison versions >= 1.33.

if test "x$YACC" != "x"; then    dnl Yacc found on the system?

AC_MSG_CHECKING([for locations feature in bison/yacc])

dnl A tiny input file for bison containing the `%locations' option
cat <<EOF > conftest.y
%locations
%token A
%%
B : A;
%%
EOF

if $YACC conftest.y >/dev/null 2>&1 ; then
  AC_DEFINE(HAVE_LOCATIONS, 1, [Does bison have the `locations' feature?])
  AC_MSG_RESULT(yes)
else
  AC_DEFINE(HAVE_LOCATIONS, 0, [Does bison have the `locations' feature?])
  AC_MSG_RESULT(no)
  YACC=''
  AC_MSG_WARN([Your version of yacc/bison does not provide the `locations'
               feature, coming with bison >= 1.33. You will not be able to
               compile the Pathfinder compiler from the development
               sources.])
fi

fi   dnl Yacc found on the system?


AC_LANG_C

if test -f "$srcdir"/vertoo.data; then
	AC_ARG_WITH(burg,
		AC_HELP_STRING([--with-burg=FILE], [burg is installed as FILE]),
		have_burg="$withval",
		have_burg=auto)
	if test "x$have_burg" = xauto; then
		AC_PATH_PROGS(BURG,[ burg$EXEEXT burg ],,$PATH)
		if test "x$BURG" = x; then
			AC_ERROR([No burg$EXEEXT found in PATH=$PATH])
		fi
	elif test "x$have_burg" = xno; then
		AC_MSG_ERROR([burg is required])
	else
		BURG="$withval"
	fi
	AC_SUBST(BURG)
fi

dnl
dnl We support the GNU getopt library (and its features for long option
dnl names) if we find it available. Otherwise we fall back to the standard
dnl Unix unistd.h version.
dnl
dnl Check for standard Unix unistd.h
AC_CHECK_HEADER([unistd.h], [have_unistd="yes"], [have_unistd="no"])

if test x$have_unistd != "xyes"; then
    AC_MSG_ERROR([Pathfinder needs the getopt function to parse command
                 line options. Please check the existence of the header file
                 unistd.h on your system.])
fi

dnl Check for GNU Getopt
AC_CHECK_HEADERS([getopt.h])
AC_CHECK_FUNCS(getopt_long)

dnl Check for stdbool.h
AC_CHECK_HEADERS([stdbool.h])

dnl Check for type bool
AC_CHECK_TYPES(bool)

dnl Check for type socklen_t
AC_CHECK_TYPE(socklen_t, AC_DEFINE(HAVE_SOCKLEN_T, 1, [Define to 1 if the system has the type `socklen_t'.]), , [#include <sys/types.h>
#include <sys/socket.h>])

dnl Check for libgen.h and function basename
AC_CHECK_HEADERS([libgen.h])
AC_CHECK_FUNCS(basename)

dnl Check some sizes
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(void *)


dnl Seems like the compiler on SunOS 5.8 cannot cope with the
dnl __attribute__ specifications that can give compilers additional
dnl hints about a function (style of variable argument list, functions
dnl that never return, etc.)
AC_MSG_CHECKING([if your compiler understands `__attribute__'])

AC_COMPILE_IFELSE(AC_LANG_PROGRAM([[
#include <stdlib.h>

void foo (void) __attribute__ ((noreturn));

void foo (void) { exit (0); }

]],
[[ foo (); ]]
),
[AC_DEFINE([HAVE_FUNCTION_ATTRIBUTES], 1,
  [Does your compiler support function attributes (__attribute__)?])
AC_MSG_RESULT(yes)],
AC_MSG_RESULT(no))

AH_VERBATIM([__attribute__],
[ /* If the compiler does not support function attributes via __attribute__,
     we just define __attribute__(a) to nothing. */
#if HAVE_FUNCTION_ATTRIBUTES != 1
#define __attribute__(a)
#endif
])

dnl [AC_DEFINE([ __attribute__(a) ],,
dnl            [Compiler does not understand __attribute__.])

dnl We use signal handlers to catch segmentation faults and
dnl give helpful messages to the user, if available.
AC_CHECK_HEADERS(signal.h)
AC_TYPE_SIGNAL


dnl The user may enter a location of the libxml2 library on the command line
dnl (with `--with-libxml2=DIR) or disable the libxml2 support.
dnl
dnl AC_ARG_WITH makes the --with-xxx available, then we do some checks and
dnl see if we actually found libxml2.
have_libxml2="auto"
AC_ARG_WITH(libxml2,
    [  --with-libxml2=DIR      libxml2 library is installed in DIR],
    [have_libxml2="$withval"], [have_libxml2="auto"])
have_SAX2="$have_libxml2"

save_CPPFLAGS="$CPPFLAGS"
save_LDFLAGS="$LDFLAGS"
if test "x$have_libxml2" != xno; then

    XLIBS=""
    XML2_CONFIG=""
    XPATH="$PATH"
    if test "x$have_libxml2" != xauto; then
	XPATH="$have_libxml2/bin"
	if test -d "$have_libxml2/lib$bits"; then
	    XLIBS="-L$have_libxml2/lib$bits "
	fi
    fi

    AC_PATH_PROG(XML2_CONFIG,xml2-config.${bits},,$XPATH)
    if test "x$XML2_CONFIG" = x; then
        AC_PATH_PROG(XML2_CONFIG,xml2-${bits}-config,,$XPATH)
        if test "x$XML2_CONFIG" = x; then
            AC_PATH_PROG(XML2_CONFIG,xml2-config,,$XPATH)
        fi
    fi

    if test "x$XML2_CONFIG" != x; then
        LIBXML2_CFLAGS="`$XML2_CONFIG --cflags`"
        LIBXML2_LIBS="$XLIBS`$XML2_CONFIG --libs`"
    else
	case "x$have_libxml2" in
	auto|no|yes)
	    ;;
	*)
	    LIBXML2_CFLAGS="-I$have_libxml2/include"
	    LIBXML2_LIBS="-L$have_libxml2/lib"
	    ;;
	esac
    fi

    dnl libxml2 needs iconv.h
    LIBXML2_CFLAGS="$LIBXML2_CFLAGS $ICONV_CFLAGS"
    CPPFLAGS="$CPPFLAGS $LIBXML2_CFLAGS"
    LDFLAGS="$LDFLAGS $LIBXML2_LIBS"
    AC_CHECK_HEADER([libxml/parser.h],
                    [AC_CHECK_LIB(xml2, xmlParseDocument,
                                  [have_libxml2="yes"], [have_libxml2="no"])],[],
		[#if HAVE_ICONV_H
#include <iconv.h>
#endif])
    if test "x$have_libxml2" = xyes; then
        AC_CHECK_HEADER([libxml/SAX2.h], [have_SAX2="yes"], [have_SAX2="no"])
    fi
fi
LDFLAGS="$save_LDFLAGS"
CPPFLAGS="$save_CPPFLAGS"

if test "x$have_SAX2" = xyes; then
    AC_DEFINE(HAVE_SAX2, 1,
              [Do we have the SAX2.h header file available, and hence SAX2 support in libxml2?])
    have_SAX2=1
else
    AC_DEFINE(HAVE_SAX2, 0,
              [Do we have the SAX2.h header file available, and hence SAX2 support in libxml2?])
    have_SAX2=0
fi

if test "x$have_libxml2" != xyes; then
    LIBXML2_CFLAGS=""
    LIBXML2_LIBS=""
    LIBXML2_LDADD=""
    AC_DEFINE(HAVE_LIBXML2, 0,
              [Do we have the libxml2 library available to support XML Schema?])
    AC_MSG_FAILURE([The libxml2 XML parsing library and/or include files were 
		not found or you have requested to not use it.
                This is required dependence, core components like 
		the XML Schema import functionality depends on it.])
fi

if test "x$have_libxml2" = xyes; then
    LIBXML2_LDADD="-lxml2"
    AC_DEFINE(HAVE_LIBXML2, 1,
         [Do we have the libxml2 library available to support XML Schema?])
    AC_MSG_NOTICE([The following compiler options will be used to integrate
           the libxml2 XML parsing library:
           To find the libxml2 include files: $LIBXML2_CFLAGS
           To find the libxml2 library:       $LIBXML2_LIBS
           SAX2 support:                      HAVE_SAX2=$have_SAX2])
fi

dnl Propagate the stuff to the Makefiles
AC_SUBST(LIBXML2_CFLAGS, $LIBXML2_CFLAGS)
AC_SUBST(LIBXML2_LIBS, $LIBXML2_LIBS)
AC_SUBST(LIBXML2_LDADD, $LIBXML2_LDADD)
AM_CONDITIONAL(HAVE_LIBXML2, test x"$have_libxml2" != xno)

dnl Check for Burkowski Axis Steps support
dnl --enable-burk
AC_ARG_ENABLE(burk,
	AC_HELP_STRING([--enable-burk],
		[enable support for Burkowski Axis Steps [default=no]]),
	enable_burk=$enableval,
	enable_burk=no)
case $enable_burk in
yes)  AC_DEFINE(BURKOWSKI, 1, [Define if you want Burkowski])
      AC_MSG_NOTICE([Burkowski Axis Steps will be available...])
;;
esac


dnl The Burg code requires strdup(). We test here if strdup() is
dnl available on the system. If not, we will define it ourselves
dnl in burg/main.c
AC_CHECK_HEADERS([string.h], [AC_CHECK_FUNCS([strdup strtok_r])])

AC_CHECK_HEADERS(time.h sys/time.h utime.h sys/utime.h sys/times.h)
AC_HEADER_TIME()
AC_STRUCT_TM()
AC_STRUCT_TIMEZONE()
AC_FUNC_UTIME_NULL()
AC_CHECK_FUNCS(gettimeofday ftime times ctime_r localtime_r)
ctime_r3=yes
AC_MSG_CHECKING(ctime_r3)
AC_TRY_COMPILE([$ac_includes_default
#include <time.h>], 
[char buf[26]; time_t t; ctime_r(&t,buf,26);],
[AC_DEFINE(HAVE_CTIME_R3, 1, [Define if you have ctime_r(time_t*,char *buf,size_t s)])], [ctime_r3=no])
AC_MSG_RESULT($ctime_r3)

dnl  CFLAGS for our code are stricter than what autoconf can cope with.
CFLAGS="$CFLAGS \$(X_CFLAGS)"
