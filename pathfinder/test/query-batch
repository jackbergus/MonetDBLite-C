#! /usr/bin/perl
#
# test/query-batch -- batch test script for the XQuery interpreter
# 
# Synopsis:
#   usage: $0 [options] files...
#   
#   where options can be
#     [-h]          print this help
#     [-a]          do tests for abstract syntax tree
#     [-n]          do tests after abstract syn tree normalization
#     [-c]          do tests until core translation
#     [-p]          generate postscript output
#     [-d]          compare with reference files
#     [-r]          create reference files
#     [-b filename] Pathfinder binary to execute
#
#   Runs all XQuery queries in the given files. Queries have to
#   be separated by single lines containing '--'.
#
#   Depending on the command line switches
#
#    - a PostScript output is generated that visualizes the
#      tree structure with the help of dot.
#
#    - the "human readable" ascii tree output is compared
#      against a reference file. That contains reference results
#      for every query, separated by '--' lines. Reference files
#      must have the same filename as the input files, followed by
#
#       * '.abssyn' for abstract syntax tree references
#       * '.norm'   for normalized abstract syntax tree references
#
#    - reference files for the previous test are generated.
#      Output filenames will be the input filename plus an
#      extension '.ref'. This is done to not delete existing
#      reference files. Be sure to rename the files accordingly
#      afterwards!
#
# Copyright Notice:
# -----------------
#
# The contents of this file are subject to the Pathfinder Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License.  You may obtain a copy of the License at
# http://monetdb.cwi.nl/Legal/PathfinderLicense-1.1.html
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.  See
# the License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the Pathfinder system.
#
# The Original Code has initially been developed by the Database &
# Information Systems Group at the University of Konstanz, Germany and
# is now maintained by the Database Systems Group at the Technische
# Universitaet Muenchen, Germany.  Portions created by the University of
# Konstanz and the Technische Universitaet Muenchen are Copyright (C)
# 2000-2005 University of Konstanz and (C) 2005-2008 Technische
# Universitaet Muenchen, respectively.  All Rights Reserved.
#
# $Id$

# tools 
$latex    = 'latex';
$dot      = 'dot';
$dvips    = 'dvips';

# ......................................................................
# dot configuration
# emit Postscript
$dot_flags = '-Tps';
# node layout (graph attributes)
$dot_flags .= ' -Gnodesep=0.2 -Granksep=0.4';
# box-shaped nodes, node label font (node attributes)
$dot_flags .= 
        ' -Nfontname=Helvetica-Narrow -Nfontsize=8 -Nshape=box -Nheight=0.1';

# dvips configuration
# emit Postscript w/ Type1 fonts, run silently
$dvips_flags = '-Ppdf -q1';

# Hash to store command line parameters in
%parameters = ( "h" => "", "a" => "", "n" => "", "c" => "", "p" => "", "d" => "",
                "r" => "", "b" => "Pathfinder" );

# Use getopt to parse command line options
use Getopt::Std;

getopts('hancpdrb:', \%parameters);

# Check parameters
&params;

if ($ENV{DEBUGFLAGS}) {
  print "\n*** WARNING! ***\n";
  print "The environment variable \$DEBUGFLAGS is set to\n";
  print "'$ENV{DEBUGFLAGS}'.\n";
  print "Setting debug flags might change the output of the\n";
  print "Pathfinder compiler.\n";
  print "\a\n";  # beep
  sleep 3;
}

foreach $inputfile (@xquery_files) {

  open Q, $inputfile || die "$0: failed to open query file `$inputfile': $!\n";
  $inputfilecontent = "";
  while (<Q>) {
    $inputfilecontent.= $_;
  }
  close Q;

  @queries = split /^--.*$/m, $inputfilecontent;

  if ($parameters{"p"}) { &queries2ps; }

  if ($parameters{"d"} || $parameters{"r"}) { &diff_queries; }
}

exit 0;

# ......................................................................
# check usage and parse command line
sub params {
  if ($parameters{"h"}) {
    die <<"END_USAGE";
usage: $0 [options] files...

where options can be
  [-h]          print this help
  [-a]          run tests for abstract syntax tree
  [-n]          do tests after abstract syn tree normalization
  [-c]          do tests until core translation
  [-p]          generate postscript output
  [-d]          compare with reference files
  [-r]          create reference files
  [-b filename] Pathfinder binary to execute
END_USAGE
    exit 1;
  }

  # check path to XQuery binary
  $xquery_bin = $parameters{"b"};
  die "$0: XQuery binary `$xquery_bin' not readable/executable\n"
    unless -r $xquery_bin && -x $xquery_bin;

  # check access permission for query files
  foreach $f (@ARGV) {
    if (-r $f) {
      push @xquery_files, $f;
    }
    else {
      warn "$0: cannot access query file `$f' (will be ignored)\n";
    }
  }

  # Abort if no input file was given
  die "$0: no accessible query file found\n"
    unless @xquery_files;

  # See if we are advised to do exactly one kind of tests
  $number_of_tests = 0;

  if ($parameters{"a"}) {
    $number_of_tests++;
    $testcase = "a";
    $cmdline_dot = "-p -D";
    $testcase_description = "Abstract Syntax Tree";
    $cmdline_pretty = "-p -P";
    $file_extension = "abssyn";
  }

  if ($parameters{"n"}) {
    $number_of_tests++;
    $testcase = "n";
    $cmdline_dot = "-n -D";
    $testcase_description = "Normalized Abstract Syntax Tree";
    $cmdline_pretty = "-n -P";
    $file_extension = "norm";
  }

  if ($parameters{"c"}) {
    $number_of_tests++;
    $testcase = "c";
    $cmdline_dot = "-c -D";
    $testcase_description = "Core Tree";
    $cmdline_pretty = "-c -P";
    $file_extension = "abssyn";
  }

  die "$0: you must specify exactly one test to perform\n"
    unless ($number_of_tests == 1);
}

sub queries2ps {

  # no query failed yet
  $err = 0;

  # write LaTeX output for this directory into `$d.tex'
  # (will be deleted when we finish)
  $tex = "$inputfile.tex";

  open TeX, ">$tex"
    || die "$0: cannot open LaTeX output file `$tex': $!\n";
  push @garbage, $tex;

  &latex_header;

  $count = 0;

  # process each query in turn
  foreach $query (@queries) {

    print TeX "\n\\hrulefill\n\\nopagebreak\n";

    # dump query into LaTeX output
    &latex_query ($query);

    # run XQuery interpreter,
    # capture dot output ($out) and error messages (file $$)
    open XQUERY, "|$xquery_bin $cmdline_dot > $$.out 2> $$.err";
    print XQUERY $query;
    close XQUERY;

    open XQUERY_OUTPUT, "$$.out";
    $out = "";
    while (<XQUERY_OUTPUT>) {
      $out.= $_;
    }

    if ($out) {

      # run dot on the successful XQuery output
      # (writes `$q.eps', will be deleted when we finish)
      open DOT,  "| $dot $dot_flags > graph$count.eps";
      print DOT $out;
      close DOT;
      push @garbage, "graph$count.eps";

      # include PS graphics file in LaTeX output
      &latex_graphics ("graph$count");

      $count++;
    }  
    else {
      # query failed (no output),
      $err++;
      print TeX "\n\\textbf{Query failed!}\\\\\n";
    }

    if (-s "$$.err")
    {
      # dump error message into LaTeX output
      &latex_error ("$$.err");
    }

    unlink "$$.out";
    unlink "$$.err";

  }

  &latex_footer;
  close TeX;

  # generate Postscript from LaTeX
  &latex_ps ($inputfile);

  # clean up
  unlink @garbage;
}


# ......................................................................
# emit LaTeX header
sub latex_header {
    # current time (for logging purposes)
    $now = localtime()."";

    print TeX <<"LaTeX-header";
\\documentclass[a4paper]{article}
\\usepackage{graphicx}
\\usepackage{fancyvrb}
\\parindent0mm
\\begin{document}
\\section*{XQuery Batch Test \\\\ ($testcase_description, run \\texttt{@ $now})}
LaTeX-header
}

# ......................................................................
# emit query 
sub latex_query {
    print TeX "\\begin{verbatim}\n";
    print TeX $_[0];
    print TeX "\n\\end{verbatim}\n\\nopagebreak\n";
}

# ......................................................................
# emit query parse tree
sub latex_graphics {
    my ($g) = @_;

    print TeX <<"LaTeX-graphics";
\\begin{center}
  \\includegraphics[scale=0.75]{$g.eps}
\\end{center}
LaTeX-graphics
}

# ......................................................................
# emit error message
sub latex_error {
    my ($e) = @_;

    print TeX "\n\\textbf{Pathfinder said:}\n";
    open E, $e || die "$0: cannot open XQuery error message `$e': $!\n";
    print TeX "\\begin{verbatim}\n";
    print TeX <E>;
    print TeX "\n\\end{verbatim}\n";
    close E;    
}

# ......................................................................
# emit LaTeX footer
sub latex_footer {
    # current time (for logging purposes)
    $now = localtime()."";

    print TeX "\n\n\\hrulefill\n\n";
    
    print TeX "(finished \\texttt{@ $now}, $err failed queries)\n";
    print TeX <<'LaTeX-footer';
\end{document}
LaTeX-footer
}

# ......................................................................
# generate Postscript from LaTeX
sub latex_ps {
    my ($d) = @_;

    # run LaTeX (writes .log/.aux/.dvi files into current directory)
    @dirs = split /\//, $d;
    $based = $dirs[-1];

    `$latex $d`;
    push @garbage, "$based.log";
    push @garbage, "$based.aux";
    push @garbage, "$based.dvi";

    # run dvips
    `$dvips $dvips_flags $based -o $d.ps`;
}

sub diff_queries {

  @results = ();

  open REF, "$inputfile.$file_extension"
    || die "$0: failed to open query file `$inputfile.$file_extension': $!\n";
  $refcontent = "";
  while (<REF>) {
    $refcontent.= $_;
  }
  close REF;

  @references = split /^--.*$/m, $refcontent;

  $currquery = 0;

  foreach $query (@queries) {
    
    # run XQuery interpreter,
    open XQUERY, "|$xquery_bin $cmdline_pretty > $$.out 2> $$.err";
    print XQUERY $query;
    close XQUERY;

    open XQUERY_OUTPUT, "$$.out";
    $out = "";
    while (<XQUERY_OUTPUT>) {
      $out.= $_;
    }
    close XQUERY_OUTPUT;

    # Remove trailing and leading whitespace from both dot strings
    $out =~ s/^\s*//;
    $out =~ s/\s*$//;
    $references[$currquery] =~ s/^\s*//;
    $references[$currquery] =~ s/\s*$//;

    push @results, $out;

    if ($parameters{"d"}) {
      if ($out) {
        if ($out ne $references[$currquery]) {

          print "Result for query ".($currquery+1)." in $inputfile does not match reference!\n";
          print "Query (from $inputfile):\n";
          print $query."\n";
          print "\nReference (from $inputfile.$file_extension):\n";
          print $references[$currquery]."\n";
          print "\nQuery result:\n";
          print $out."\n";
        }
      }
      else {
        print "Query ".($currquery+1)." in file $inputfile failed.";
        print "Query:\n";
        print $query."\n";
      }

      if (-s "$$.err")
      {
        open XQUERY_ERROUT, "$$.err";
        $err = "Pathfinder said:\n";
        while (<XQUERY_ERROUT>) {
          $err.= $_;
        }
        close XQUERY_ERROUT;
        print $err;
      }
    }

    unlink "$$.out";
    unlink "$$.err";

    $currquery++;
  }

  # Write reference file if requested
  if ($parameters{"r"}) {
    open REFOUT, ">$inputfile.ref"
      || die "Unable to open file $inputfile.ref: $!";
    print REFOUT join "\n--\n", @results;
    close REFOUT;
  }
}
