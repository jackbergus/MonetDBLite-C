/*
  The purpose of this Embedded MonetDB is to illustrate how the code
  base can be easily linked with a stand-alone application.  The
  current implementation uses a minimalistic approach, i.e.  using the
  Mapi prototol to communicate between application thread and the
  database kernel.
  This communication is not optimized for speed. 

  An area that has undergone some tweaking for performance improvement
  are the large number of lock calls needed in the GDK kernel to
  safely run multiple clients against the database.
  For direct linkage to an application we suggest to use the
  monet_embedded option, which allows just one mapi connection to be
  set up. This allows for removal of all lock calls in the
  kernel. This improves performance between 25-50%.
*/

#include <pf_config.h>
#include "embeddedclient.h"

#include "gdk.h"
#ifdef HAVE_PTHREAD_H
/* pthread.h on Windows includes config.h if HAVE_CONFIG_H is set */
#undef HAVE_CONFIG_H
#ifdef pid_t
#undef pid_t
#endif
#include <sched.h>
#include <pthread.h>
#endif

#include "monet.h"
#include "monet_options.h"
#include "initmodules.h"

static Client
Monet_init(opt **set, int setlen)
{
	/* determine Monet's kernel settings. */
	setlen = mo_add_option(set, setlen, opt_config, "gdk_embedded", "yes");
	if (!GDKinit(*set, setlen)) 
		return NULL;

	if (GDKgetenv_isyes("monet_daemon"))
		monet_daemon = 1;
	return monet_init();
}

static opt *embedded_set = NULL;
static int embedded_len = 0;

static void *
start_xq_server(void *arg)
{
	static int initialized = 0;
	stream *in, *out;
	char buf[128];

	if (!initialized) {
/* 		monet_singlethreaded = 1; */
		if (embedded_set == NULL) {
			int len = mo_builtin_settings(&embedded_set);
			embedded_len = mo_system_config(&embedded_set, len);
			embedded_len = mo_add_option(&embedded_set, embedded_len, opt_config, "monet_mod_path",
						     "@QXlibdir@@QDIRSEP@MonetDB4@PATHSEP@@QXlibdir@@QDIRSEP@MonetDB4@QDIRSEP@lib@PATHSEP@@QXlibdir@@QDIRSEP@MonetDB4@QDIRSEP@bin");
		}
		Monet_init(&embedded_set, embedded_len);
		mo_free_options(embedded_set, embedded_len);
		static_module_init();
		THRnew(MT_getpid(), "Interpreter");
		initialized = 1;
	}

	in = ((stream **) arg)[0];
	out = ((stream **) arg)[1];
	free(arg);
	snprintf(buf, sizeof(buf), "client(Stream(\"" PTRFMT "\"), Stream(\"" PTRFMT "\"));", PTRFMTCAST in, PTRFMTCAST out);
	monet_exec("module(pathfinder);xquery_start_query_cache(16000000LL);");
	monet_exec(buf);
	return NULL;
}

Mapi
embedded_xquery(opt *set, int len)
{
	Mapi mid;
	pthread_t xqthread;
	stream **server;

	if (set) {
		embedded_set = set;
		embedded_len = len;
	}
	server = mapi_embedded_init(&mid,"xquery");

	pthread_create(&xqthread, NULL, start_xq_server, (void *) server);

	mapi_start_talking(mid);

	return mid;
}
