It is possible to compile MonetDB using MinGW (Minimalist GNU for
Windows -- http://www.mingw.org/) on Windows.  This uses the GNU C
compiler gcc to produce code which does not depend on any extra .DLLs.

There are basically two ways in which you can use the MinGW compiler.
The first is by installing the tools directly from the MinGW website,
including the MSYS tools; and the second is by using the Cygwin
(http://www.cygwin.com/) tools.  Cygwin is a Linux-like environment
for Windows.

I have used the latter method.  The main reason for this is that the
Cygwin tools are more up-to-date.  Especially the bison parser
generator is newer than what is available from the MinGW site.  Also,
some of the required tools are missing from the MinGW site and would
have to be built separately.

This document does not address the issue of how to install the Cygwin
tools.

Some of the Cygwin packages that are required to build MonetDB (and
the other projects) are:
	gcc-mingw-core
	mingw-runtime
	w32api
and optionally:
	mingw-bzip2
	mingw-zlib

In addition to Cygwin, we also need the Pthreads library compiled for
Native Windows.  It can be found at
ftp://sources.redhat.com/pub/pthreads-win32/.  Download the archive
(the latest version we have tried is pthreads-w32-2-7-0-release.exe)
and extract it.  Pthreads should be installed to C:\Pthreads, so copy
the contents of the prebuilt or Pre-built.2 folder from the extracted
archive to C:\Pthreads (so that you end up with folders
C:\Pthreads\lib and C:\Pthreads\include).  Don't use spaces in the
name of the folder where you install the Pre-built files.

For information about compiling the optional PCRE library, see the
file HowToStart-MinGW-pcre.txt.

For information about using the optional SWIG tool, see the file
HowToStart-MinGW-swig.txt.

In order to compile and install MonetDB, I use the following commands:

./bootstrap
mkdir MinGW
cd MinGW
../configure --host=i386-pc-mingw32 \
	     --with-gcc='gcc -mwin32 -mno-cygwin' \
	     --with-gxx='g++ -mwin32 -mno-cygwin' \
	     --with-translatepath='cygpath -w' \
	     --with-pthread=C:/Pthreads \
	     --without-iconv \
	     --without-pcre \
	     --without-php \
	     --without-swig \
	     --prefix="$HOME/MinGW"
make
make install

As with the other ways of compiling MonetDB, compiling MonetDB with
MinGW uses Mx and mel.  These pacakges (from the buildtools module of
the MonetDB CVS repository) need to be compiled for Cygwin and need to
be installed in a directory in $PATH.  Alternatively, it is possible
to use the --with-mx=.../Mx.exe and --with-mel=.../mel.exe options to
configure to specify where these binaries are located.

???It is essential that the path to the configure script does not
contain any spaces.

If you don't have PCRE installed, use --without-pcre instead of the
--with-pcre=... option.  If you have installed it somewhere else,
change the location.

In order to run the resulting binary, a number of folders need to be
added to the Windows PATH:

rem as an abbreviation, set MONETDB_PREFIX to the Windows version of
rem the folder where MonetDB was installed
set MONETDB_PREFIX=...\MinGW
set PATH=C:\Pthreads\lib;%PATH%
set PATH=%MONETDB_PREFIX%\lib\MonetDB;%PATH%
set PATH=%MONETDB_PREFIX%\lib\bin;%PATH%
set PATH=%MONETDB_PREFIX%\lib;%PATH%
set PATH=%MONETDB_PREFIX%\bin;%PATH%

If bz2 and z are included in the compilation (i.e. the libraries were
found in the configure step), the Cygwin bin directory also needs to
be added.  Only the mgwbz2-1.dll and mgwz.dll are used from that
folder.  We add the folder at the end of the Windows search path:

set PATH=%PATH%;C:\cygwin\bin

You can now test the MonetDB installation using the following command:

rem as an abbreviation, set MNSRC to the (Windows name of) the
rem MonetDB source folder, also note that per the above,
rem %MNSRC%\MinGW is (the Windows name of) the folder in which
rem MonetDB was built.
set MNSRC=...\MonetDB
rem the following command should be on a single line
cd "%MNSRC"
Mtest.py --TSTSRCBASE="%MNSRC%" --TSTBLDBASE="%MNSRC%\MinGW" --TSTTRGBASE="%MONETDB_PREFIX%" -r
