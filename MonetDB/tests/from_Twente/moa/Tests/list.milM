var indexA  := new(oid,oid);
var valuesA := new(oid,int);
var orderA := new(oid,int);
var valuesD := new(void,int);
var indexB  := new(oid,oid);
var valuesB := new(oid,int);
var idsB  := new(oid,oid);
var orderB := new(oid,int);
var indexC  := new(void,oid);
var valuesC := new(void,int);
indexA.insert(4@0,4@0);
indexA.insert(3@0,3@0);
indexA.insert(2@0,2@0);
indexA.insert(1@0,1@0);
indexA.insert(0@0,0@0);
valuesA.insert(0@0,10);
valuesA.insert(1@0,20);
valuesA.insert(2@0,30);
valuesA.insert(3@0,40);
valuesA.insert(4@0,50);
orderA.insert(0@0,2);
orderA.insert(1@0,1);
orderA.insert(2@0,4);
orderA.insert(3@0,3);
orderA.insert(4@0,0);
valuesD.insert(nil,20);
valuesD.insert(nil,30);
valuesD.insert(nil,40);
valuesD.insert(nil,10);
valuesD := valuesD.reverse().mark(0@0).reverse();
indexC.insert(nil,0@0);
indexC.insert(nil,1@0);
indexC.insert(nil,2@0);
indexC.insert(nil,3@0);
valuesC.insert(nil,50);
valuesC.insert(nil,30);
valuesC.insert(nil,10);
valuesC.insert(nil,10);
valuesC := valuesC.reverse().mark(0@0).reverse();
indexB.insert(0@0,409@0);
indexB.insert(1@0,408@0);
indexB.insert(2@0,407@0);
indexB.insert(2@0,406@0);
indexB.insert(2@0,405@0);
indexB.insert(4@0,404@0);
indexB.insert(4@0,403@0);
indexB.insert(4@0,402@0);
indexB.insert(4@0,401@0);
valuesB.insert(409@0,9000);
valuesB.insert(408@0,8000);
valuesB.insert(407@0,7000);
valuesB.insert(406@0,6000);
valuesB.insert(405@0,5000);
valuesB.insert(404@0,4000);
valuesB.insert(403@0,3000);
valuesB.insert(402@0,2000);
valuesB.insert(401@0,1000);
orderB.insert(409@0,9);
orderB.insert(408@0,8);
orderB.insert(407@0,7);
orderB.insert(406@0,6);
orderB.insert(405@0,5);
orderB.insert(404@0,4);
orderB.insert(403@0,3);
orderB.insert(402@0,1);
orderB.insert(401@0,2);
var indexSet1 := new(oid,oid);
var indexSet2 := new(oid,oid);
indexSet1.insert(0@0,10@0);
indexSet1.insert(1@0,11@0);
indexSet1.insert(2@0,12@0);
indexSet2.insert(0@0,10@0);
indexSet2.insert(1@0,11@0);
indexSet2.insert(2@0,12@0);
var indexList1 := new(oid,oid);
var indexList2 := new(oid,oid);
var indexList3 := new(oid,oid);
indexList1.insert(10@0,100@0);
indexList1.insert(10@0,101@0);
indexList1.insert(11@0,102@0);
indexList1.insert(12@0,103@0);
indexList2.insert(10@0,100@0);
indexList2.insert(11@0,101@0);
indexList2.insert(11@0,102@0);
indexList2.insert(12@0,103@0);
indexList3.insert(100@0,100@0);
indexList3.insert(101@0,101@0);
indexList3.insert(101@0,102@0);
indexList3.insert(102@0,103@0);
var valuesList1 := new(oid,int);
var valuesList2 := new(oid,int);
var valuesList3 := new(oid,int);
var valuesList4 := new(oid,int);
valuesList1.insert(100@0,10);
valuesList1.insert(101@0,11);
valuesList1.insert(103@0,11);
valuesList1.insert(102@0,11);
valuesList2.insert(100@0,20);
valuesList2.insert(102@0,21);
valuesList2.insert(101@0,22);
valuesList2.insert(103@0,22);
valuesList3.insert(100@0,30);
valuesList3.insert(101@0,31);
valuesList3.insert(103@0,32);
valuesList3.insert(102@0,33);
valuesList4.insert(100@0,40);
valuesList4.insert(101@0,41);
valuesList4.insert(102@0,42);
valuesList4.insert(103@0,43);
var valuesTuple1 := new(oid,int);
var valuesTuple2 := new(oid,int);
valuesTuple1.insert(10@0,100);
valuesTuple1.insert(11@0,101);
valuesTuple1.insert(12@0,102);
valuesTuple2.insert(10@0,100);
valuesTuple2.insert(11@0,101);
valuesTuple2.insert(12@0,102);
var orderList1 := new(oid,int);
var orderList2 := new(oid,int);
orderList1.insert(100@0,1);
orderList1.insert(101@0,2);
orderList1.insert(102@0,3);
orderList1.insert(103@0,4);
orderList2.insert(100@0,4);
orderList2.insert(101@0,3);
orderList2.insert(102@0,2);
orderList2.insert(103@0,1);

reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print();
valuesA.find(4@0).print();
valuesA.find(1@0).print();
valuesA.find(0@0).print();
valuesA.find(3@0).print();
valuesA.find(2@0).print();
# [ 50 ,  20 ,  10 ,  40 ,  30 ]

indexA.print();
valuesA.find(4@0).print();
valuesA.find(3@0).print();
valuesA.find(2@0).print();
valuesA.find(1@0).print();
valuesA.find(0@0).print();
# { 50 ,  40 ,  30 ,  20 ,  10 }

reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print();
valuesA.find(4@0).print();
valuesA.find(1@0).print();
valuesA.find(0@0).print();
valuesA.find(3@0).print();
valuesA.find(2@0).print();
# [< 50 >, < 20 >, < 10 >, < 40 >, < 30 >]

indexA.print();
valuesA.find(4@0).print();
valuesA.find(3@0).print();
valuesA.find(2@0).print();
valuesA.find(1@0).print();
valuesA.find(0@0).print();
# {< 50 >, < 40 >, < 30 >, < 20 >, < 10 >}

var _MMreverse_2 := reverse(indexA);
indexA.print();
reverse(select(reverse(indexB),4@0)).print();
valuesB.find(404@0).print();
valuesB.find(403@0).print();
valuesB.find(402@0).print();
valuesB.find(401@0).print();
reverse(select(reverse(indexB),3@0)).print();
reverse(select(reverse(indexB),2@0)).print();
valuesB.find(407@0).print();
valuesB.find(406@0).print();
valuesB.find(405@0).print();
reverse(select(reverse(indexB),1@0)).print();
valuesB.find(408@0).print();
reverse(select(reverse(indexB),0@0)).print();
valuesB.find(409@0).print();
# {{ 4000 ,  3000 ,  2000 ,  1000 }, {}, { 7000 ,  6000 ,  5000 }, { 8000 }, { 9000 }}

_MMreverse_2 := reverse(indexA);
indexA.print();
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),4@0))))).print();
valuesB.find(402@0).print();
valuesB.find(401@0).print();
valuesB.find(403@0).print();
valuesB.find(404@0).print();
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),3@0))))).print();
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),2@0))))).print();
valuesB.find(405@0).print();
valuesB.find(406@0).print();
valuesB.find(407@0).print();
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),1@0))))).print();
valuesB.find(408@0).print();
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),0@0))))).print();
valuesB.find(409@0).print();
# {[ 2000 ,  1000 ,  3000 ,  4000 ], [], [ 5000 ,  6000 ,  7000 ], [ 8000 ], [ 9000 ]}

reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB))).print();
valuesB.find(402@0).print();
valuesB.find(401@0).print();
valuesB.find(403@0).print();
valuesB.find(404@0).print();
valuesB.find(405@0).print();
valuesB.find(406@0).print();
valuesB.find(407@0).print();
valuesB.find(408@0).print();
valuesB.find(409@0).print();
# [ 2000 ,  1000 ,  3000 ,  4000 ,  5000 ,  6000 ,  7000 ,  8000 ,  9000 ]

indexB.print();
valuesB.find(409@0).print();
valuesB.find(408@0).print();
valuesB.find(407@0).print();
valuesB.find(406@0).print();
valuesB.find(405@0).print();
valuesB.find(404@0).print();
valuesB.find(403@0).print();
valuesB.find(402@0).print();
valuesB.find(401@0).print();
# { 9000 ,  8000 ,  7000 ,  6000 ,  5000 ,  4000 ,  3000 ,  2000 ,  1000 }

_MMreverse_2 := reverse(indexA);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print();
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),4@0))))).print();
valuesB.find(402@0).print();
valuesB.find(401@0).print();
valuesB.find(403@0).print();
valuesB.find(404@0).print();
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),1@0))))).print();
valuesB.find(408@0).print();
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),0@0))))).print();
valuesB.find(409@0).print();
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),3@0))))).print();
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),2@0))))).print();
valuesB.find(405@0).print();
valuesB.find(406@0).print();
valuesB.find(407@0).print();
# [[ 2000 ,  1000 ,  3000 ,  4000 ], [ 8000 ], [ 9000 ], [], [ 5000 ,  6000 ,  7000 ]]

_MMreverse_2 := reverse(indexA);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print();
reverse(select(reverse(indexB),4@0)).print();
valuesB.find(404@0).print();
valuesB.find(403@0).print();
valuesB.find(402@0).print();
valuesB.find(401@0).print();
reverse(select(reverse(indexB),1@0)).print();
valuesB.find(408@0).print();
reverse(select(reverse(indexB),0@0)).print();
valuesB.find(409@0).print();
reverse(select(reverse(indexB),3@0)).print();
reverse(select(reverse(indexB),2@0)).print();
valuesB.find(407@0).print();
valuesB.find(406@0).print();
valuesB.find(405@0).print();
# [{ 4000 ,  3000 ,  2000 ,  1000 }, { 8000 }, { 9000 }, {}, { 7000 ,  6000 ,  5000 }]

_MMreverse_2 := reverse(indexA);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print();
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA)))),4@0))))).print();
valuesA.find(4@0).print();
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA)))),1@0))))).print();
valuesA.find(1@0).print();
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA)))),0@0))))).print();
valuesA.find(0@0).print();
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA)))),3@0))))).print();
valuesA.find(3@0).print();
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA)))),2@0))))).print();
valuesA.find(2@0).print();
# [[ 50 ], [ 20 ], [ 10 ], [ 40 ], [ 30 ]]

var _MMcopy_2 := copy(indexA);
var _MMreverse_3 := reverse(_MMcopy_2);
var _MMnumber_4 := number(_MMreverse_3);
reverse(copy_order(reverse(sort(reverse(_MMnumber_4))),reverse(indexA))).print();
valuesA.find(4@0).print();
valuesA.find(3@0).print();
valuesA.find(2@0).print();
valuesA.find(1@0).print();
valuesA.find(0@0).print();
# [ 50 ,  40 ,  30 ,  20 ,  10 ]

_MMcopy_2 := copy(indexB);
_MMreverse_3 := reverse(_MMcopy_2);
_MMnumber_4 := number(_MMreverse_3);
var _MMreverse_5 := reverse(indexA);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print();
reverse(copy_order(reverse(sort(reverse(_MMnumber_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMnumber_4))),reverse(indexB)))),4@0))))).print();
valuesB.find(404@0).print();
valuesB.find(403@0).print();
valuesB.find(402@0).print();
valuesB.find(401@0).print();
reverse(copy_order(reverse(sort(reverse(_MMnumber_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMnumber_4))),reverse(indexB)))),1@0))))).print();
valuesB.find(408@0).print();
reverse(copy_order(reverse(sort(reverse(_MMnumber_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMnumber_4))),reverse(indexB)))),0@0))))).print();
valuesB.find(409@0).print();
reverse(copy_order(reverse(sort(reverse(_MMnumber_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMnumber_4))),reverse(indexB)))),3@0))))).print();
reverse(copy_order(reverse(sort(reverse(_MMnumber_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMnumber_4))),reverse(indexB)))),2@0))))).print();
valuesB.find(407@0).print();
valuesB.find(406@0).print();
valuesB.find(405@0).print();
# [[ 4000 ,  3000 ,  2000 ,  1000 ], [ 8000 ], [ 9000 ], [], [ 7000 ,  6000 ,  5000 ]]

indexA.print();
valuesA.find(4@0).print();
valuesA.find(3@0).print();
valuesA.find(2@0).print();
valuesA.find(1@0).print();
valuesA.find(0@0).print();
# { 50 ,  40 ,  30 ,  20 ,  10 }

_MMreverse_2 := reverse(indexA);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print();
reverse(select(reverse(indexB),4@0)).print();
valuesB.find(404@0).print();
valuesB.find(403@0).print();
valuesB.find(402@0).print();
valuesB.find(401@0).print();
reverse(select(reverse(indexB),1@0)).print();
valuesB.find(408@0).print();
reverse(select(reverse(indexB),0@0)).print();
valuesB.find(409@0).print();
reverse(select(reverse(indexB),3@0)).print();
reverse(select(reverse(indexB),2@0)).print();
valuesB.find(407@0).print();
valuesB.find(406@0).print();
valuesB.find(405@0).print();
# [{ 4000 ,  3000 ,  2000 ,  1000 }, { 8000 }, { 9000 }, {}, { 7000 ,  6000 ,  5000 }]

var _MMkunique_2 := kunique(indexA);
var _MMcastnil_3 := _MMkunique_2.mark(0@0);
var _MMreverse_4 := reverse(_MMcastnil_3);
var _MMcastnil_5 := valuesA.mark(0@0);
var _MMjoin_6 := join(indexA,_MMcastnil_5);
var _MMjoin_7 := join(_MMreverse_4,_MMjoin_6);
var _MMkunique_8 := kunique(indexB);
var _MMcount_9 := count(_MMkunique_2);
var _MMoid_10 := oid(_MMcount_9);
var _MMmark_11 := mark(_MMkunique_8,_MMoid_10);
var _MMreverse_12 := reverse(_MMmark_11);
var _MMcount_13 := count(indexA);
var _MMoid_14 := oid(_MMcount_13);
var _MMmark_15 := mark(valuesB,_MMoid_14);
var _MMjoin_16 := join(indexB,_MMmark_15);
var _MMjoin_17 := join(_MMreverse_12,_MMjoin_16);
var _MMsunion_18 := sunion(_MMjoin_7,_MMjoin_17);
var _MMreverse_19 := reverse(_MMcastnil_5);
var _MMjoin_20 := join(_MMreverse_19,valuesA);
var _MMsort_21 := sort(_MMjoin_20);
var _MMreverse_22 := reverse(_MMmark_15);
var _MMjoin_23 := join(_MMreverse_22,valuesB);
var _MMsort_24 := sort(_MMjoin_23);
var _MMunion_25 := union(_MMsort_21,_MMsort_24);
var _MMnilcast_26 := _MMunion_25.reverse().mark(0@0).reverse();
var _MMreverse_27 := reverse(_MMcastnil_5);
var _MMreverse_28 := reverse(orderA);
var _MMsort_29 := sort(_MMreverse_28);
var _MMreverse_30 := reverse(_MMsort_29);
var _MMnumber_31 := number(_MMreverse_30);
var _MMjoin_32 := join(_MMreverse_27,_MMnumber_31);
var _MMreverse_33 := reverse(_MMmark_15);
var _MMreverse_34 := reverse(orderB);
var _MMsort_35 := sort(_MMreverse_34);
var _MMreverse_36 := reverse(_MMsort_35);
var _MMnumber_37 := number(_MMreverse_36);
var _MMcastval_38 := castval(_MMreverse_36,_MMcount_13);
var _MMoper_39 := [+](_MMnumber_37,_MMcastval_38);
var _MMjoin_40 := join(_MMreverse_33,_MMoper_39);
var _MMsunion_41 := sunion(_MMjoin_32,_MMjoin_40);
reverse(copy_order(reverse(sort(reverse(_MMsunion_41))),reverse(_MMsunion_18))).print();
_MMnilcast_26.find(4@0).print();
_MMnilcast_26.find(1@0).print();
_MMnilcast_26.find(0@0).print();
_MMnilcast_26.find(3@0).print();
_MMnilcast_26.find(2@0).print();
_MMnilcast_26.find(12@0).print();
_MMnilcast_26.find(13@0).print();
_MMnilcast_26.find(11@0).print();
_MMnilcast_26.find(10@0).print();
_MMnilcast_26.find(9@0).print();
_MMnilcast_26.find(8@0).print();
_MMnilcast_26.find(7@0).print();
_MMnilcast_26.find(6@0).print();
_MMnilcast_26.find(5@0).print();
# [ 50 ,  20 ,  10 ,  40 ,  30 ,  2000 ,  1000 ,  3000 ,  4000 ,  5000 ,  6000 ,  7000 ,  8000 ,  9000 ]

_MMreverse_2 := reverse(valuesTuple2);
var _MMjoin_3 := join(valuesTuple1,_MMreverse_2);
_MMreverse_4 := reverse(_MMjoin_3);
var _MMnilcast_5 := _MMreverse_4.reverse().mark(0@0).reverse();
_MMjoin_6 := join(_MMnilcast_5,valuesTuple1);
var _MMreverse_7 := reverse(_MMjoin_6);
var _MMnilcast_8 := _MMreverse_7.reverse().mark(0@0).reverse();
var _MMreverse_9 := reverse(indexSet1);
var _MMjoin_10 := join(_MMnilcast_5,_MMreverse_9);
var _MMcastnil_11 := _MMjoin_10.mark(0@0);
_MMreverse_12 := reverse(_MMcastnil_11);
var _MMjoin_13 := join(_MMnilcast_5,indexList1);
var _MMcastnil_14 := _MMjoin_13.mark(0@0);
var _MMnilcast_15 := _MMjoin_13.reverse().mark(0@0).reverse();
_MMjoin_16 := join(_MMnilcast_15,valuesList1);
var _MMcastnil_17 := _MMjoin_16.mark(0@0);
var _MMjoin_18 := join(_MMcastnil_14,_MMcastnil_17);
var _MMjoin_19 := join(_MMreverse_12,_MMjoin_18);
var _MMnilcast_20 := _MMjoin_3.reverse().mark(0@0).reverse();
var _MMreverse_21 := reverse(indexSet2);
var _MMjoin_22 := join(_MMnilcast_20,_MMreverse_21);
var _MMcastnil_23 := _MMjoin_22.mark(0@0);
var _MMreverse_24 := reverse(_MMcastnil_23);
var _MMjoin_25 := join(_MMnilcast_20,indexList2);
var _MMcastnil_26 := _MMjoin_25.mark(0@0);
var _MMnilcast_27 := _MMjoin_25.reverse().mark(0@0).reverse();
var _MMjoin_28 := join(_MMnilcast_27,valuesList2);
var _MMcount_29 := count(_MMcastnil_14);
var _MMoid_30 := oid(_MMcount_29);
var _MMmark_31 := mark(_MMjoin_28,_MMoid_30);
_MMjoin_32 := join(_MMcastnil_26,_MMmark_31);
var _MMjoin_33 := join(_MMreverse_24,_MMjoin_32);
var _MMsunion_34 := sunion(_MMjoin_19,_MMjoin_33);
var _MMreverse_35 := reverse(_MMcastnil_17);
var _MMjoin_36 := join(_MMreverse_35,_MMjoin_16);
var _MMsort_37 := sort(_MMjoin_36);
var _MMreverse_38 := reverse(_MMmark_31);
var _MMjoin_39 := join(_MMreverse_38,_MMjoin_28);
var _MMsort_40 := sort(_MMjoin_39);
var _MMunion_41 := union(_MMsort_37,_MMsort_40);
var _MMnilcast_42 := _MMunion_41.reverse().mark(0@0).reverse();
var _MMreverse_43 := reverse(_MMcastnil_17);
var _MMjoin_44 := join(_MMnilcast_15,orderList1);
var _MMreverse_45 := reverse(_MMjoin_44);
var _MMsort_46 := sort(_MMreverse_45);
var _MMreverse_47 := reverse(_MMsort_46);
var _MMnumber_48 := number(_MMreverse_47);
var _MMreverse_49 := reverse(_MMcastnil_14);
var _MMjoin_50 := join(_MMcastnil_14,_MMnumber_48);
var _MMoper_51 := {min}(_MMjoin_50);
var _MMjoin_52 := join(_MMreverse_49,_MMoper_51);
var _MMcopy_order_53 := copy_order(_MMnumber_48,_MMjoin_52);
var _MMoper_54 := [-](_MMnumber_48,_MMcopy_order_53);
var _MMreverse_55 := reverse(_MMcastnil_14);
var _MMoper_56 := {count}(_MMcastnil_14);
var _MMnumber_57 := number(_MMoper_56);
var _MMoper_58 := [<<](_MMnumber_57,20);
var _MMjoin_59 := join(_MMreverse_55,_MMoper_58);
var _MMoper_60 := [+](_MMoper_54,_MMjoin_59);
var _MMjoin_61 := join(_MMreverse_43,_MMoper_60);
var _MMreverse_62 := reverse(_MMmark_31);
var _MMjoin_63 := join(_MMnilcast_27,orderList2);
var _MMreverse_64 := reverse(_MMjoin_63);
var _MMsort_65 := sort(_MMreverse_64);
var _MMreverse_66 := reverse(_MMsort_65);
var _MMnumber_67 := number(_MMreverse_66);
var _MMreverse_68 := reverse(_MMcastnil_26);
var _MMjoin_69 := join(_MMcastnil_26,_MMnumber_67);
var _MMoper_70 := {min}(_MMjoin_69);
var _MMjoin_71 := join(_MMreverse_68,_MMoper_70);
var _MMcopy_order_72 := copy_order(_MMnumber_67,_MMjoin_71);
var _MMoper_73 := [-](_MMnumber_67,_MMcopy_order_72);
var _MMreverse_74 := reverse(_MMcastnil_26);
var _MMreverse_75 := reverse(_MMcastnil_23);
var _MMjoin_76 := join(_MMcastnil_11,_MMreverse_75);
var _MMreverse_77 := reverse(_MMjoin_76);
var _MMjoin_78 := join(_MMreverse_77,_MMoper_56);
var _MMjoin_79 := join(_MMreverse_74,_MMjoin_78);
var _MMoper_80 := [+](_MMoper_73,_MMjoin_79);
var _MMreverse_81 := reverse(_MMcastnil_26);
var _MMoper_82 := {count}(_MMcastnil_26);
var _MMnumber_83 := number(_MMoper_82);
var _MMoper_84 := [<<](_MMnumber_83,20);
var _MMjoin_85 := join(_MMreverse_81,_MMoper_84);
var _MMoper_86 := [+](_MMoper_80,_MMjoin_85);
var _MMjoin_87 := join(_MMreverse_62,_MMoper_86);
var _MMsunion_88 := sunion(_MMjoin_61,_MMjoin_87);
var _MMreverse_89 := reverse(_MMcastnil_11);
var _MMjoin_90 := join(_MMreverse_89,_MMjoin_10);
var _MMreverse_91 := reverse(_MMcastnil_23);
var _MMjoin_92 := join(_MMreverse_91,_MMjoin_22);
_MMjoin_90.print();
_MMjoin_90.info().reverse().like("sort").reverse().print();
_MMjoin_92.print();
_MMjoin_92.info().reverse().like("sort").reverse().print();
var _MMsunion_93 := sunion(_MMjoin_90,_MMjoin_92);
_MMsunion_93.print();
_MMsunion_93.info().reverse().like("sort").reverse().print();
_MMnilcast_8.print();
reverse(copy_order(reverse(sort(reverse(_MMsunion_88))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMsunion_88))),reverse(_MMsunion_34)))),0@0))))).print();
_MMnilcast_42.find(0@0).print();
_MMnilcast_42.find(1@0).print();
_MMnilcast_42.find(4@0).print();
reverse(copy_order(reverse(sort(reverse(_MMsunion_88))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMsunion_88))),reverse(_MMsunion_34)))),1@0))))).print();
_MMnilcast_42.find(3@0).print();
_MMnilcast_42.find(5@0).print();
_MMnilcast_42.find(6@0).print();
reverse(copy_order(reverse(sort(reverse(_MMsunion_88))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMsunion_88))),reverse(_MMsunion_34)))),2@0))))).print();
_MMnilcast_42.find(2@0).print();
_MMnilcast_42.find(7@0).print();
# {[ 10 ,  11 ,  20 ], [ 11 ,  21 ,  22 ], [ 11 ,  22 ]}

var _MMCTOgroup_2 := CTOgroup(valuesA);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexA))).print();
valuesA.find(0@0).print();
valuesA.find(1@0).print();
valuesA.find(2@0).print();
valuesA.find(3@0).print();
valuesA.find(4@0).print();
# [ 10 ,  20 ,  30 ,  40 ,  50 ]

var _MMoper_2 := [-](50,valuesA);
var _MMCTOgroup_3 := CTOgroup(_MMoper_2);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_3))),reverse(indexA))).print();
valuesA.find(4@0).print();
valuesA.find(3@0).print();
valuesA.find(2@0).print();
valuesA.find(1@0).print();
valuesA.find(0@0).print();
# [ 50 ,  40 ,  30 ,  20 ,  10 ]

_MMCTOgroup_2 := CTOgroup(valuesA);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexA))).print();
valuesA.find(0@0).print();
valuesA.find(1@0).print();
valuesA.find(2@0).print();
valuesA.find(3@0).print();
valuesA.find(4@0).print();
# [< 10 >, < 20 >, < 30 >, < 40 >, < 50 >]

_MMreverse_2 := reverse(indexA);
_MMreverse_3 := reverse(orderB);
var _MMsort_4 := sort(_MMreverse_3);
_MMnilcast_5 := _MMsort_4.reverse().mark(0@0).reverse();
var _MMreverse_6 := reverse(_MMnilcast_5);
_MMjoin_7 := join(indexB,_MMreverse_6);
var _MMlexsort_8 := lexsort(_MMjoin_7);
_MMreverse_9 := reverse(_MMlexsort_8);
var _MMcopy_order_10 := copy_order(_MMreverse_9,_MMnilcast_5);
var _MMreverse_11 := reverse(_MMcopy_order_10);
var _MMoper_12 := [str](valuesB);
var _MMcopy_order_13 := copy_order(_MMreverse_11,_MMoper_12);
var _MMjoin_14 := join(_MMcopy_order_10,_MMcopy_order_13);
var _MMjoin_15 := join(_MMlexsort_8,_MMjoin_14);
var _MMstr_concat_16 := str_concat(_MMjoin_15);
var _MMmergecast_17 := mergecast(_MMreverse_2,_MMstr_concat_16,"");
var _MMCTOgroup_18 := CTOgroup(_MMmergecast_17);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_18))),reverse(indexA))).print();
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),3@0))))).print();
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),4@0))))).print();
valuesB.find(402@0).print();
valuesB.find(401@0).print();
valuesB.find(403@0).print();
valuesB.find(404@0).print();
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),2@0))))).print();
valuesB.find(405@0).print();
valuesB.find(406@0).print();
valuesB.find(407@0).print();
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),1@0))))).print();
valuesB.find(408@0).print();
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),0@0))))).print();
valuesB.find(409@0).print();
# [[], [ 2000 ,  1000 ,  3000 ,  4000 ], [ 5000 ,  6000 ,  7000 ], [ 8000 ], [ 9000 ]]

_MMreverse_2 := reverse(indexA);
var _MMoper_3 := [str](valuesB);
var _MMjoin_4 := join(indexB,_MMoper_3);
var _MMsort_5 := sort(_MMjoin_4);
var _MMstr_concat_6 := str_concat(_MMsort_5);
var _MMmergecast_7 := mergecast(_MMreverse_2,_MMstr_concat_6,"");
var _MMCTOgroup_8 := CTOgroup(_MMmergecast_7);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_8))),reverse(indexA))).print();
reverse(select(reverse(indexB),3@0)).print();
reverse(select(reverse(indexB),4@0)).print();
valuesB.find(404@0).print();
valuesB.find(403@0).print();
valuesB.find(402@0).print();
valuesB.find(401@0).print();
reverse(select(reverse(indexB),2@0)).print();
valuesB.find(407@0).print();
valuesB.find(406@0).print();
valuesB.find(405@0).print();
reverse(select(reverse(indexB),1@0)).print();
valuesB.find(408@0).print();
reverse(select(reverse(indexB),0@0)).print();
valuesB.find(409@0).print();
# [{}, { 4000 ,  3000 ,  2000 ,  1000 }, { 7000 ,  6000 ,  5000 }, { 8000 }, { 9000 }]

_MMCTOgroup_2 := CTOgroup(valuesList1);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexList1))).print();
valuesList1.find(100@0).print();
valuesList1.find(101@0).print();
valuesList1.find(103@0).print();
valuesList1.find(102@0).print();
# [< 10 >, < 11 >, < 11 >, < 11 >]

_MMCTOgroup_2 := CTOgroup(valuesList1);
_MMCTOgroup_3 := CTOgroup(valuesList2);
var _MMCTOgroup_last_4 := CTOgroup_last(_MMCTOgroup_2,_MMCTOgroup_3);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_4))),reverse(indexList1))).print();
valuesList1.find(100@0).print();
valuesList2.find(100@0).print();
valuesList1.find(102@0).print();
valuesList2.find(102@0).print();
valuesList1.find(101@0).print();
valuesList2.find(101@0).print();
valuesList1.find(103@0).print();
valuesList2.find(103@0).print();
# [< 10 ,  20 >, < 11 ,  21 >, < 11 ,  22 >, < 11 ,  22 >]

_MMCTOgroup_2 := CTOgroup(valuesList1);
_MMCTOgroup_3 := CTOgroup(valuesList2);
var _MMCTOgroup_4 := CTOgroup(_MMCTOgroup_2,_MMCTOgroup_3);
var _MMCTOgroup_5 := CTOgroup(valuesList3);
var _MMCTOgroup_last_6 := CTOgroup_last(_MMCTOgroup_4,_MMCTOgroup_5);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_6))),reverse(indexList1))).print();
valuesList1.find(100@0).print();
valuesList2.find(100@0).print();
valuesList3.find(100@0).print();
valuesList1.find(102@0).print();
valuesList2.find(102@0).print();
valuesList3.find(102@0).print();
valuesList1.find(101@0).print();
valuesList2.find(101@0).print();
valuesList3.find(101@0).print();
valuesList1.find(103@0).print();
valuesList2.find(103@0).print();
valuesList3.find(103@0).print();
# [< 10 ,  20 ,  30 >, < 11 ,  21 ,  33 >, < 11 ,  22 ,  31 >, < 11 ,  22 ,  32 >]

_MMCTOgroup_2 := CTOgroup(valuesList1);
_MMCTOgroup_3 := CTOgroup(valuesList2);
_MMCTOgroup_4 := CTOgroup(_MMCTOgroup_2,_MMCTOgroup_3);
_MMCTOgroup_5 := CTOgroup(valuesList3);
var _MMCTOgroup_6 := CTOgroup(_MMCTOgroup_4,_MMCTOgroup_5);
var _MMCTOgroup_7 := CTOgroup(valuesList4);
var _MMCTOgroup_last_8 := CTOgroup_last(_MMCTOgroup_6,_MMCTOgroup_7);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_8))),reverse(indexList1))).print();
valuesList1.find(100@0).print();
valuesList2.find(100@0).print();
valuesList3.find(100@0).print();
valuesList4.find(100@0).print();
valuesList1.find(102@0).print();
valuesList2.find(102@0).print();
valuesList3.find(102@0).print();
valuesList4.find(102@0).print();
valuesList1.find(101@0).print();
valuesList2.find(101@0).print();
valuesList3.find(101@0).print();
valuesList4.find(101@0).print();
valuesList1.find(103@0).print();
valuesList2.find(103@0).print();
valuesList3.find(103@0).print();
valuesList4.find(103@0).print();
# [< 10 ,  20 ,  30 ,  40 >, < 11 ,  21 ,  33 ,  42 >, < 11 ,  22 ,  31 ,  41 >, < 11 ,  22 ,  32 ,  43 >]

_MMCTOgroup_2 := CTOgroup(valuesList1);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexList1))).print();
valuesList1.find(100@0).print();
valuesList2.find(100@0).print();
valuesList3.find(100@0).print();
valuesList4.find(100@0).print();
valuesList1.find(101@0).print();
valuesList2.find(101@0).print();
valuesList3.find(101@0).print();
valuesList4.find(101@0).print();
valuesList1.find(103@0).print();
valuesList2.find(103@0).print();
valuesList3.find(103@0).print();
valuesList4.find(103@0).print();
valuesList1.find(102@0).print();
valuesList2.find(102@0).print();
valuesList3.find(102@0).print();
valuesList4.find(102@0).print();
# [< 10 ,  20 ,  30 ,  40 >, < 11 ,  22 ,  31 ,  41 >, < 11 ,  22 ,  32 ,  43 >, < 11 ,  21 ,  33 ,  42 >]

_MMCTOgroup_2 := CTOgroup(valuesList4);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexList1))).print();
valuesList1.find(100@0).print();
valuesList2.find(100@0).print();
valuesList3.find(100@0).print();
valuesList4.find(100@0).print();
valuesList1.find(101@0).print();
valuesList2.find(101@0).print();
valuesList3.find(101@0).print();
valuesList4.find(101@0).print();
valuesList1.find(102@0).print();
valuesList2.find(102@0).print();
valuesList3.find(102@0).print();
valuesList4.find(102@0).print();
valuesList1.find(103@0).print();
valuesList2.find(103@0).print();
valuesList3.find(103@0).print();
valuesList4.find(103@0).print();
# [< 10 ,  20 ,  30 ,  40 >, < 11 ,  22 ,  31 ,  41 >, < 11 ,  21 ,  33 ,  42 >, < 11 ,  22 ,  32 ,  43 >]

_MMCTOgroup_2 := CTOgroup(valuesList4);
_MMCTOgroup_3 := CTOgroup(valuesList3);
_MMCTOgroup_4 := CTOgroup(_MMCTOgroup_2,_MMCTOgroup_3);
_MMCTOgroup_5 := CTOgroup(valuesList2);
_MMCTOgroup_6 := CTOgroup(_MMCTOgroup_4,_MMCTOgroup_5);
_MMCTOgroup_7 := CTOgroup(valuesList1);
_MMCTOgroup_last_8 := CTOgroup_last(_MMCTOgroup_6,_MMCTOgroup_7);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_8))),reverse(indexList1))).print();
valuesList1.find(100@0).print();
valuesList2.find(100@0).print();
valuesList3.find(100@0).print();
valuesList4.find(100@0).print();
valuesList1.find(101@0).print();
valuesList2.find(101@0).print();
valuesList3.find(101@0).print();
valuesList4.find(101@0).print();
valuesList1.find(102@0).print();
valuesList2.find(102@0).print();
valuesList3.find(102@0).print();
valuesList4.find(102@0).print();
valuesList1.find(103@0).print();
valuesList2.find(103@0).print();
valuesList3.find(103@0).print();
valuesList4.find(103@0).print();
# [< 10 ,  20 ,  30 ,  40 >, < 11 ,  22 ,  31 ,  41 >, < 11 ,  21 ,  33 ,  42 >, < 11 ,  22 ,  32 ,  43 >]

_MMkunique_2 := kunique(indexA);
_MMcastnil_3 := _MMkunique_2.mark(0@0);
_MMreverse_4 := reverse(_MMcastnil_3);
_MMcastnil_5 := valuesA.mark(0@0);
_MMjoin_6 := join(indexA,_MMcastnil_5);
_MMjoin_7 := join(_MMreverse_4,_MMjoin_6);
_MMkunique_8 := kunique(indexList1);
_MMcount_9 := count(_MMkunique_2);
_MMoid_10 := oid(_MMcount_9);
_MMmark_11 := mark(_MMkunique_8,_MMoid_10);
_MMreverse_12 := reverse(_MMmark_11);
_MMcount_13 := count(indexA);
_MMoid_14 := oid(_MMcount_13);
_MMmark_15 := mark(valuesList1,_MMoid_14);
_MMjoin_16 := join(indexList1,_MMmark_15);
_MMjoin_17 := join(_MMreverse_12,_MMjoin_16);
_MMsunion_18 := sunion(_MMjoin_7,_MMjoin_17);
_MMreverse_19 := reverse(_MMcastnil_5);
_MMjoin_20 := join(_MMreverse_19,valuesA);
_MMsort_21 := sort(_MMjoin_20);
_MMreverse_22 := reverse(_MMmark_15);
_MMjoin_23 := join(_MMreverse_22,valuesList1);
_MMsort_24 := sort(_MMjoin_23);
_MMunion_25 := union(_MMsort_21,_MMsort_24);
_MMnilcast_26 := _MMunion_25.reverse().mark(0@0).reverse();
var _MMCTOgroup_27 := CTOgroup(_MMnilcast_26);
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_27))),reverse(_MMsunion_18))).print();
_MMnilcast_26.find(0@0).print();
_MMnilcast_26.find(5@0).print();
_MMnilcast_26.find(8@0).print();
_MMnilcast_26.find(6@0).print();
_MMnilcast_26.find(7@0).print();
_MMnilcast_26.find(1@0).print();
_MMnilcast_26.find(2@0).print();
_MMnilcast_26.find(3@0).print();
_MMnilcast_26.find(4@0).print();
# [ 10 ,  10 ,  11 ,  11 ,  11 ,  20 ,  30 ,  40 ,  50 ]

_MMCTOgroup_2 := CTOgroup(valuesB);
_MMreverse_3 := reverse(indexA);
indexA.print();
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexB)))),4@0))))).print();
valuesB.find(401@0).print();
valuesB.find(402@0).print();
valuesB.find(403@0).print();
valuesB.find(404@0).print();
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexB)))),3@0))))).print();
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexB)))),2@0))))).print();
valuesB.find(405@0).print();
valuesB.find(406@0).print();
valuesB.find(407@0).print();
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexB)))),1@0))))).print();
valuesB.find(408@0).print();
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexB)))),0@0))))).print();
valuesB.find(409@0).print();
# {[ 1000 ,  2000 ,  3000 ,  4000 ], [], [ 5000 ,  6000 ,  7000 ], [ 8000 ], [ 9000 ]}

_MMCTOgroup_2 := CTOgroup(valuesB);
_MMreverse_3 := reverse(indexA);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print();
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexB)))),4@0))))).print();
valuesB.find(401@0).print();
valuesB.find(402@0).print();
valuesB.find(403@0).print();
valuesB.find(404@0).print();
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexB)))),1@0))))).print();
valuesB.find(408@0).print();
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexB)))),0@0))))).print();
valuesB.find(409@0).print();
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexB)))),3@0))))).print();
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexB)))),2@0))))).print();
valuesB.find(405@0).print();
valuesB.find(406@0).print();
valuesB.find(407@0).print();
# [[ 1000 ,  2000 ,  3000 ,  4000 ], [ 8000 ], [ 9000 ], [], [ 5000 ,  6000 ,  7000 ]]

_MMCTOgroup_2 := CTOgroup(valuesList1);
_MMreverse_3 := reverse(indexSet1);
indexSet1.print();
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexList2)))),10@0))))).print();
valuesList1.find(100@0).print();
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexList2)))),11@0))))).print();
valuesList1.find(101@0).print();
valuesList1.find(102@0).print();
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_2))),reverse(indexList2)))),12@0))))).print();
valuesList1.find(103@0).print();
# {[< 10 >], [< 11 >, < 11 >], [< 11 >]}

_MMCTOgroup_2 := CTOgroup(valuesList1);
_MMCTOgroup_3 := CTOgroup(valuesList2);
_MMCTOgroup_last_4 := CTOgroup_last(_MMCTOgroup_2,_MMCTOgroup_3);
_MMreverse_5 := reverse(indexSet1);
indexSet1.print();
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_4))),reverse(indexList2)))),10@0))))).print();
valuesList1.find(100@0).print();
valuesList2.find(100@0).print();
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_4))),reverse(indexList2)))),11@0))))).print();
valuesList1.find(102@0).print();
valuesList2.find(102@0).print();
valuesList1.find(101@0).print();
valuesList2.find(101@0).print();
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_4))),reverse(indexList2)))),12@0))))).print();
valuesList1.find(103@0).print();
valuesList2.find(103@0).print();
# {[< 10 ,  20 >], [< 11 ,  21 >, < 11 ,  22 >], [< 11 ,  22 >]}

_MMCTOgroup_2 := CTOgroup(valuesList1);
_MMCTOgroup_3 := CTOgroup(valuesList2);
_MMCTOgroup_4 := CTOgroup(_MMCTOgroup_2,_MMCTOgroup_3);
_MMCTOgroup_5 := CTOgroup(valuesList3);
_MMCTOgroup_last_6 := CTOgroup_last(_MMCTOgroup_4,_MMCTOgroup_5);
_MMreverse_7 := reverse(indexSet1);
indexSet1.print();
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_6))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_6))),reverse(indexList2)))),10@0))))).print();
valuesList1.find(100@0).print();
valuesList2.find(100@0).print();
valuesList3.find(100@0).print();
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_6))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_6))),reverse(indexList2)))),11@0))))).print();
valuesList1.find(102@0).print();
valuesList2.find(102@0).print();
valuesList3.find(102@0).print();
valuesList1.find(101@0).print();
valuesList2.find(101@0).print();
valuesList3.find(101@0).print();
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_6))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_6))),reverse(indexList2)))),12@0))))).print();
valuesList1.find(103@0).print();
valuesList2.find(103@0).print();
valuesList3.find(103@0).print();
# {[< 10 ,  20 ,  30 >], [< 11 ,  21 ,  33 >, < 11 ,  22 ,  31 >], [< 11 ,  22 ,  32 >]}

_MMCTOgroup_2 := CTOgroup(valuesList1);
_MMCTOgroup_3 := CTOgroup(valuesList2);
_MMCTOgroup_4 := CTOgroup(_MMCTOgroup_2,_MMCTOgroup_3);
_MMCTOgroup_5 := CTOgroup(valuesList3);
_MMCTOgroup_6 := CTOgroup(_MMCTOgroup_4,_MMCTOgroup_5);
_MMCTOgroup_7 := CTOgroup(valuesList4);
_MMCTOgroup_last_8 := CTOgroup_last(_MMCTOgroup_6,_MMCTOgroup_7);
_MMreverse_9 := reverse(indexSet1);
indexSet1.print();
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_8))),reverse(indexList2)))),10@0))))).print();
valuesList1.find(100@0).print();
valuesList2.find(100@0).print();
valuesList3.find(100@0).print();
valuesList4.find(100@0).print();
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_8))),reverse(indexList2)))),11@0))))).print();
valuesList1.find(102@0).print();
valuesList2.find(102@0).print();
valuesList3.find(102@0).print();
valuesList4.find(102@0).print();
valuesList1.find(101@0).print();
valuesList2.find(101@0).print();
valuesList3.find(101@0).print();
valuesList4.find(101@0).print();
reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMCTOgroup_last_8))),reverse(indexList2)))),12@0))))).print();
valuesList1.find(103@0).print();
valuesList2.find(103@0).print();
valuesList3.find(103@0).print();
valuesList4.find(103@0).print();
# {[< 10 ,  20 ,  30 ,  40 >], [< 11 ,  21 ,  33 ,  42 >, < 11 ,  22 ,  31 ,  41 >], [< 11 ,  22 ,  32 ,  43 >]}

var _MMmax_2 := max(orderA);
var _MMcastval_3 := castval(orderA,_MMmax_2);
var _MMoper_4 := [-](_MMcastval_3,orderA);
reverse(copy_order(reverse(sort(reverse(_MMoper_4))),reverse(indexA))).print();
valuesA.find(2@0).print();
valuesA.find(3@0).print();
valuesA.find(0@0).print();
valuesA.find(1@0).print();
valuesA.find(4@0).print();
# [ 30 ,  40 ,  10 ,  20 ,  50 ]

_MMreverse_2 := reverse(indexA);
var _MMmax_3 := max(orderA);
var _MMcastval_4 := castval(orderA,_MMmax_3);
var _MMoper_5 := [-](_MMcastval_4,orderA);
reverse(copy_order(reverse(sort(reverse(_MMoper_5))),reverse(indexA))).print();
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),2@0))))).print();
valuesB.find(405@0).print();
valuesB.find(406@0).print();
valuesB.find(407@0).print();
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),3@0))))).print();
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),0@0))))).print();
valuesB.find(409@0).print();
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),1@0))))).print();
valuesB.find(408@0).print();
reverse(copy_order(reverse(sort(reverse(orderB))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(orderB))),reverse(indexB)))),4@0))))).print();
valuesB.find(402@0).print();
valuesB.find(401@0).print();
valuesB.find(403@0).print();
valuesB.find(404@0).print();
# [[ 5000 ,  6000 ,  7000 ], [], [ 9000 ], [ 8000 ], [ 2000 ,  1000 ,  3000 ,  4000 ]]

_MMmax_2 := max(orderB);
_MMcastval_3 := castval(orderB,_MMmax_2);
_MMoper_4 := [-](_MMcastval_3,orderB);
_MMreverse_5 := reverse(indexA);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print();
reverse(copy_order(reverse(sort(reverse(_MMoper_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMoper_4))),reverse(indexB)))),4@0))))).print();
valuesB.find(404@0).print();
valuesB.find(403@0).print();
valuesB.find(401@0).print();
valuesB.find(402@0).print();
reverse(copy_order(reverse(sort(reverse(_MMoper_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMoper_4))),reverse(indexB)))),1@0))))).print();
valuesB.find(408@0).print();
reverse(copy_order(reverse(sort(reverse(_MMoper_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMoper_4))),reverse(indexB)))),0@0))))).print();
valuesB.find(409@0).print();
reverse(copy_order(reverse(sort(reverse(_MMoper_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMoper_4))),reverse(indexB)))),3@0))))).print();
reverse(copy_order(reverse(sort(reverse(_MMoper_4))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMoper_4))),reverse(indexB)))),2@0))))).print();
valuesB.find(407@0).print();
valuesB.find(406@0).print();
valuesB.find(405@0).print();
# [[ 4000 ,  3000 ,  1000 ,  2000 ], [ 8000 ], [ 9000 ], [], [ 7000 ,  6000 ,  5000 ]]

_MMreverse_2 := reverse(orderA);
var _MMsort_3 := sort(_MMreverse_2);
_MMreverse_4 := reverse(_MMsort_3);
var _MMslice_5 := slice(_MMreverse_4,0,1);
var _MMmirror_6 := mirror(_MMslice_5);
_MMjoin_7 := join(indexA,_MMmirror_6);
var _MMreverse_8 := reverse(_MMmirror_6);
var _MMjoin_9 := join(_MMreverse_8,valuesA);
var _MMreverse_10 := reverse(_MMmirror_6);
var _MMjoin_11 := join(_MMreverse_10,orderA);
reverse(copy_order(reverse(sort(reverse(_MMjoin_11))),reverse(_MMjoin_7))).print();
_MMjoin_9.find(4@0).print();
_MMjoin_9.find(1@0).print();
# [ 50 ,  20 ]

_MMcopy_2 := copy(indexA);
_MMreverse_3 := reverse(_MMcopy_2);
_MMnumber_4 := number(_MMreverse_3);
_MMreverse_5 := reverse(_MMnumber_4);
var _MMsort_6 := sort(_MMreverse_5);
_MMreverse_7 := reverse(_MMsort_6);
var _MMslice_8 := slice(_MMreverse_7,0,2);
var _MMmirror_9 := mirror(_MMslice_8);
_MMjoin_10 := join(indexA,_MMmirror_9);
_MMreverse_11 := reverse(_MMmirror_9);
_MMreverse_12 := reverse(valuesC);
_MMjoin_13 := join(valuesA,_MMreverse_12);
_MMcastnil_14 := _MMjoin_13.mark(0@0);
_MMjoin_15 := join(_MMreverse_11,_MMcastnil_14);
var _MMcastnil_16 := _MMjoin_15.mark(0@0);
var _MMnilcast_17 := _MMjoin_15.reverse().mark(0@0).reverse();
var _MMnilcast_18 := _MMjoin_13.reverse().mark(0@0).reverse();
_MMjoin_19 := join(_MMnilcast_18,valuesC);
_MMjoin_20 := join(_MMnilcast_17,_MMjoin_19);
_MMreverse_21 := reverse(indexA);
_MMjoin_22 := join(_MMreverse_11,_MMreverse_21);
var _MMreverse_23 := reverse(_MMmirror_9);
var _MMjoin_24 := join(_MMreverse_23,_MMnumber_4);
reverse(copy_order(reverse(sort(reverse(_MMjoin_24))),reverse(_MMjoin_10))).print();
reverse(select(reverse(_MMcastnil_16),4@0)).print();
_MMjoin_20.find(1@0).print();
reverse(select(reverse(_MMcastnil_16),3@0)).print();
reverse(select(reverse(_MMcastnil_16),2@0)).print();
_MMjoin_20.find(0@0).print();
# [{ 50 }, {}, { 30 }]

_MMreverse_2 := reverse(indexA);
_MMoper_3 := {count}(indexB);
var _MMmergecast_4 := mergecast(_MMreverse_2,_MMoper_3,0);
_MMoper_5 := [gt](_MMmergecast_4,0);
var _MMuselect_6 := uselect(_MMoper_5,true).mark(0@0);
_MMjoin_7 := join(indexA,_MMuselect_6);
_MMreverse_8 := reverse(_MMuselect_6);
_MMjoin_9 := join(_MMreverse_8,indexB);
var _MMcastnil_10 := _MMjoin_9.mark(0@0);
var _MMnilcast_11 := _MMjoin_9.reverse().mark(0@0).reverse();
var _MMjoin_12 := join(_MMnilcast_11,orderB);
var _MMreverse_13 := reverse(_MMjoin_12);
var _MMsort_14 := sort(_MMreverse_13);
var _MMreverse_15 := reverse(_MMsort_14);
var _MMnumber_16 := number(_MMreverse_15);
var _MMreverse_17 := reverse(_MMcastnil_10);
_MMjoin_18 := join(_MMcastnil_10,_MMnumber_16);
var _MMoper_19 := {min}(_MMjoin_18);
_MMjoin_20 := join(_MMreverse_17,_MMoper_19);
var _MMoper_21 := [-](_MMnumber_16,_MMjoin_20);
var _MMselect_22 := select(_MMoper_21,0,0);
var _MMmirror_23 := mirror(_MMselect_22);
_MMjoin_24 := join(_MMcastnil_10,_MMmirror_23);
var _MMreverse_25 := reverse(_MMmirror_23);
var _MMjoin_26 := join(_MMnilcast_11,valuesB);
var _MMjoin_27 := join(_MMreverse_25,_MMjoin_26);
_MMreverse_28 := reverse(_MMmirror_23);
var _MMjoin_29 := join(_MMreverse_28,_MMjoin_12);
var _MMjoin_30 := join(_MMreverse_8,_MMreverse_2);
var _MMreverse_31 := reverse(_MMuselect_6);
_MMjoin_32 := join(_MMreverse_31,orderA);
reverse(copy_order(reverse(sort(reverse(_MMjoin_32))),reverse(_MMjoin_7))).print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_29))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_29))),reverse(_MMjoin_24)))),0@0))))).print();
_MMjoin_27.find(7@0).print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_29))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_29))),reverse(_MMjoin_24)))),2@0))))).print();
_MMjoin_27.find(1@0).print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_29))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_29))),reverse(_MMjoin_24)))),3@0))))).print();
_MMjoin_27.find(0@0).print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_29))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_29))),reverse(_MMjoin_24)))),1@0))))).print();
_MMjoin_27.find(4@0).print();
# [[ 2000 ], [ 8000 ], [ 9000 ], [ 5000 ]]

_MMreverse_2 := reverse(orderA);
_MMsort_3 := sort(_MMreverse_2);
_MMreverse_4 := reverse(_MMsort_3);
var _MMnumber_5 := number(_MMreverse_4);
var _MMselect_6 := select(_MMnumber_5,1);
var _MMmirror_7 := mirror(_MMselect_6);
var _MMjoin_8 := join(_MMmirror_7,valuesA);
var _MMnilcast_9 := _MMjoin_8.reverse().mark(0@0).reverse();
var _MMfind_10 := find(_MMnilcast_9,oid(0));
_MMfind_10.print();
#  20 

_MMreverse_2 := reverse(orderA);
_MMsort_3 := sort(_MMreverse_2);
_MMreverse_4 := reverse(_MMsort_3);
_MMnumber_5 := number(_MMreverse_4);
_MMselect_6 := select(_MMnumber_5,1);
_MMmirror_7 := mirror(_MMselect_6);
_MMjoin_8 := join(_MMmirror_7,indexB);
var _MMcastnil_9 := _MMjoin_8.mark(0@0);
var _MMnilcast_10 := _MMjoin_8.reverse().mark(0@0).reverse();
_MMjoin_11 := join(_MMnilcast_10,valuesB);
_MMjoin_12 := join(_MMnilcast_10,orderB);
reverse(copy_order(reverse(sort(reverse(_MMjoin_12))),reverse(_MMcastnil_9))).print();
_MMjoin_11.find(0@0).print();
# [ 8000 ]

_MMreverse_2 := reverse(orderB);
_MMsort_3 := sort(_MMreverse_2);
_MMreverse_4 := reverse(_MMsort_3);
_MMnumber_5 := number(_MMreverse_4);
_MMreverse_6 := reverse(indexB);
_MMjoin_7 := join(indexB,_MMnumber_5);
var _MMoper_8 := {min}(_MMjoin_7);
_MMjoin_9 := join(_MMreverse_6,_MMoper_8);
var _MMoper_10 := [-](_MMnumber_5,_MMjoin_9);
var _MMselect_11 := select(_MMoper_10,0);
var _MMmirror_12 := mirror(_MMselect_11);
_MMjoin_13 := join(indexB,_MMmirror_12);
_MMjoin_14 := join(_MMjoin_13,valuesB);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print();
_MMjoin_14.find(4@0).print();
_MMjoin_14.find(1@0).print();
_MMjoin_14.find(0@0).print();
_MMjoin_14.find(3@0).print();
_MMjoin_14.find(2@0).print();
# [ 2000 ,  8000 ,  9000 , ERROR: CMDfind: value not found,  5000 ]

_MMreverse_2 := reverse(orderA);
_MMsort_3 := sort(_MMreverse_2);
_MMreverse_4 := reverse(_MMsort_3);
_MMnumber_5 := number(_MMreverse_4);
_MMselect_6 := select(_MMnumber_5,1);
_MMmirror_7 := mirror(_MMselect_6);
_MMjoin_8 := join(_MMmirror_7,indexB);
_MMcastnil_9 := _MMjoin_8.mark(0@0);
_MMnilcast_10 := _MMjoin_8.reverse().mark(0@0).reverse();
_MMjoin_11 := join(_MMnilcast_10,valuesB);
_MMcastnil_9.print();
_MMjoin_11.find(0@0).print();
# { 8000 }

_MMreverse_2 := reverse(orderList1);
_MMsort_3 := sort(_MMreverse_2);
_MMreverse_4 := reverse(_MMsort_3);
_MMnumber_5 := number(_MMreverse_4);
_MMselect_6 := select(_MMnumber_5,1);
_MMmirror_7 := mirror(_MMselect_6);
_MMjoin_8 := join(_MMmirror_7,valuesList1);
_MMnilcast_9 := _MMjoin_8.reverse().mark(0@0).reverse();
_MMfind_10 := find(_MMnilcast_9,oid(0));
_MMjoin_11 := join(_MMmirror_7,valuesList2);
var _MMnilcast_12 := _MMjoin_11.reverse().mark(0@0).reverse();
var _MMfind_13 := find(_MMnilcast_12,oid(0));
_MMfind_10.print();
_MMfind_13.print();
# < 11 ,  22 >

_MMreverse_2 := reverse(orderList1);
_MMsort_3 := sort(_MMreverse_2);
_MMreverse_4 := reverse(_MMsort_3);
_MMnumber_5 := number(_MMreverse_4);
_MMselect_6 := select(_MMnumber_5,1);
_MMmirror_7 := mirror(_MMselect_6);
_MMjoin_8 := join(_MMmirror_7,indexList3);
_MMcastnil_9 := _MMjoin_8.mark(0@0);
_MMnilcast_10 := _MMjoin_8.reverse().mark(0@0).reverse();
_MMjoin_11 := join(_MMnilcast_10,valuesList2);
_MMjoin_12 := join(_MMnilcast_10,orderList2);
_MMjoin_13 := join(_MMmirror_7,valuesList1);
var _MMnilcast_14 := _MMjoin_13.reverse().mark(0@0).reverse();
var _MMfind_15 := find(_MMnilcast_14,oid(0));
reverse(copy_order(reverse(sort(reverse(_MMjoin_12))),reverse(_MMcastnil_9))).print();
_MMjoin_11.find(1@0).print();
_MMjoin_11.find(0@0).print();
_MMfind_15.print();
# <[ 21 ,  22 ],  11 >

var _MMcount_2 := count(indexA);
_MMcount_2.print();
#  5 

_MMcount_2 := count(indexA);
_MMcount_2.print();
#  5 

_MMoper_2 := [=](valuesA,10);
var _MMuselect_3 := uselect(_MMoper_2,true).mark(0@0);
_MMjoin_4 := join(indexA,_MMuselect_3);
_MMreverse_5 := reverse(_MMuselect_3);
_MMjoin_6 := join(_MMreverse_5,valuesA);
_MMjoin_4.print();
_MMjoin_6.find(0@0).print();
# { 10 }

_MMoper_2 := [=](valuesA,10);
_MMuselect_3 := uselect(_MMoper_2,true).mark(0@0);
_MMjoin_4 := join(indexA,_MMuselect_3);
_MMreverse_5 := reverse(_MMuselect_3);
_MMjoin_6 := join(_MMreverse_5,valuesA);
_MMreverse_7 := reverse(_MMuselect_3);
_MMjoin_8 := join(_MMreverse_7,orderA);
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4))).print();
_MMjoin_6.find(0@0).print();
# [ 10 ]

_MMoper_2 := [=](valuesA,10);
_MMuselect_3 := uselect(_MMoper_2,true).mark(0@0);
_MMoper_4 := [=](valuesA,20);
var _MMuselect_5 := uselect(_MMoper_4,true).mark(0@0);
var _MMkunion_6 := kunion(_MMuselect_3,_MMuselect_5);
var _MMcastnil_7 := _MMkunion_6.mark(0@0);
_MMjoin_8 := join(indexA,_MMcastnil_7);
_MMreverse_9 := reverse(_MMcastnil_7);
_MMjoin_10 := join(_MMreverse_9,valuesA);
_MMjoin_8.print();
_MMjoin_10.find(1@0).print();
_MMjoin_10.find(0@0).print();
# { 20 ,  10 }

_MMoper_2 := [=](valuesA,10);
_MMoper_3 := [=](valuesA,20);
_MMoper_4 := [or](_MMoper_2,_MMoper_3);
_MMuselect_5 := uselect(_MMoper_4,true).mark(0@0);
_MMjoin_6 := join(indexA,_MMuselect_5);
_MMreverse_7 := reverse(_MMuselect_5);
_MMjoin_8 := join(_MMreverse_7,valuesA);
_MMreverse_9 := reverse(_MMuselect_5);
_MMjoin_10 := join(_MMreverse_9,orderA);
reverse(copy_order(reverse(sort(reverse(_MMjoin_10))),reverse(_MMjoin_6))).print();
_MMjoin_8.find(1@0).print();
_MMjoin_8.find(0@0).print();
# [ 20 ,  10 ]

_MMoper_2 := [>=](valuesB,2000);
_MMuselect_3 := uselect(_MMoper_2,true).mark(0@0);
_MMjoin_4 := join(indexB,_MMuselect_3);
_MMreverse_5 := reverse(_MMuselect_3);
_MMjoin_6 := join(_MMreverse_5,valuesB);
_MMreverse_7 := reverse(indexA);
indexA.print();
reverse(select(reverse(_MMjoin_4),4@0)).print();
_MMjoin_6.find(5@0).print();
_MMjoin_6.find(6@0).print();
_MMjoin_6.find(7@0).print();
reverse(select(reverse(_MMjoin_4),3@0)).print();
reverse(select(reverse(_MMjoin_4),2@0)).print();
_MMjoin_6.find(2@0).print();
_MMjoin_6.find(3@0).print();
_MMjoin_6.find(4@0).print();
reverse(select(reverse(_MMjoin_4),1@0)).print();
_MMjoin_6.find(1@0).print();
reverse(select(reverse(_MMjoin_4),0@0)).print();
_MMjoin_6.find(0@0).print();
# {{ 4000 ,  3000 ,  2000 }, {}, { 7000 ,  6000 ,  5000 }, { 8000 }, { 9000 }}

_MMoper_2 := [>=](valuesB,2000);
_MMuselect_3 := uselect(_MMoper_2,true).mark(0@0);
_MMjoin_4 := join(indexB,_MMuselect_3);
_MMreverse_5 := reverse(_MMuselect_3);
_MMjoin_6 := join(_MMreverse_5,valuesB);
_MMreverse_7 := reverse(indexA);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print();
reverse(select(reverse(_MMjoin_4),4@0)).print();
_MMjoin_6.find(5@0).print();
_MMjoin_6.find(6@0).print();
_MMjoin_6.find(7@0).print();
reverse(select(reverse(_MMjoin_4),1@0)).print();
_MMjoin_6.find(1@0).print();
reverse(select(reverse(_MMjoin_4),0@0)).print();
_MMjoin_6.find(0@0).print();
reverse(select(reverse(_MMjoin_4),3@0)).print();
reverse(select(reverse(_MMjoin_4),2@0)).print();
_MMjoin_6.find(2@0).print();
_MMjoin_6.find(3@0).print();
_MMjoin_6.find(4@0).print();
# [{ 4000 ,  3000 ,  2000 }, { 8000 }, { 9000 }, {}, { 7000 ,  6000 ,  5000 }]

_MMoper_2 := [>=](valuesA,20);
_MMuselect_3 := uselect(_MMoper_2,true).mark(0@0);
_MMjoin_4 := join(indexA,_MMuselect_3);
_MMreverse_5 := reverse(_MMuselect_3);
_MMjoin_6 := join(_MMreverse_5,valuesA);
_MMreverse_7 := reverse(_MMuselect_3);
_MMjoin_8 := join(_MMreverse_7,orderA);
_MMreverse_9 := reverse(indexA);
indexA.print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),4@0))))).print();
_MMjoin_6.find(3@0).print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),3@0))))).print();
_MMjoin_6.find(2@0).print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),2@0))))).print();
_MMjoin_6.find(1@0).print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),1@0))))).print();
_MMjoin_6.find(0@0).print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),0@0))))).print();
# {[ 50 ], [ 40 ], [ 30 ], [ 20 ], []}

_MMoper_2 := [>=](valuesA,20);
_MMuselect_3 := uselect(_MMoper_2,true).mark(0@0);
_MMjoin_4 := join(indexA,_MMuselect_3);
_MMreverse_5 := reverse(_MMuselect_3);
_MMjoin_6 := join(_MMreverse_5,valuesA);
_MMreverse_7 := reverse(_MMuselect_3);
_MMjoin_8 := join(_MMreverse_7,orderA);
_MMreverse_9 := reverse(indexA);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),4@0))))).print();
_MMjoin_6.find(3@0).print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),1@0))))).print();
_MMjoin_6.find(0@0).print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),0@0))))).print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),3@0))))).print();
_MMjoin_6.find(2@0).print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),2@0))))).print();
_MMjoin_6.find(1@0).print();
# [[ 50 ], [ 20 ], [], [ 40 ], [ 30 ]]

_MMoper_2 := [>=](valuesB,2000);
_MMuselect_3 := uselect(_MMoper_2,true).mark(0@0);
_MMjoin_4 := join(indexB,_MMuselect_3);
_MMreverse_5 := reverse(_MMuselect_3);
_MMjoin_6 := join(_MMreverse_5,valuesB);
_MMreverse_7 := reverse(_MMuselect_3);
_MMjoin_8 := join(_MMreverse_7,orderB);
_MMreverse_9 := reverse(indexA);
indexA.print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),4@0))))).print();
_MMjoin_6.find(7@0).print();
_MMjoin_6.find(6@0).print();
_MMjoin_6.find(5@0).print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),3@0))))).print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),2@0))))).print();
_MMjoin_6.find(4@0).print();
_MMjoin_6.find(3@0).print();
_MMjoin_6.find(2@0).print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),1@0))))).print();
_MMjoin_6.find(1@0).print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),0@0))))).print();
_MMjoin_6.find(0@0).print();
# {[ 2000 ,  3000 ,  4000 ], [], [ 5000 ,  6000 ,  7000 ], [ 8000 ], [ 9000 ]}

_MMoper_2 := [>=](valuesB,2000);
_MMuselect_3 := uselect(_MMoper_2,true).mark(0@0);
_MMjoin_4 := join(indexB,_MMuselect_3);
_MMreverse_5 := reverse(_MMuselect_3);
_MMjoin_6 := join(_MMreverse_5,valuesB);
_MMreverse_7 := reverse(_MMuselect_3);
_MMjoin_8 := join(_MMreverse_7,orderB);
_MMreverse_9 := reverse(indexA);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),4@0))))).print();
_MMjoin_6.find(7@0).print();
_MMjoin_6.find(6@0).print();
_MMjoin_6.find(5@0).print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),1@0))))).print();
_MMjoin_6.find(1@0).print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),0@0))))).print();
_MMjoin_6.find(0@0).print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),3@0))))).print();
reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(reverse(select(reverse(reverse(copy_order(reverse(sort(reverse(_MMjoin_8))),reverse(_MMjoin_4)))),2@0))))).print();
_MMjoin_6.find(4@0).print();
_MMjoin_6.find(3@0).print();
_MMjoin_6.find(2@0).print();
# [[ 2000 ,  3000 ,  4000 ], [ 8000 ], [ 9000 ], [], [ 5000 ,  6000 ,  7000 ]]

_MMreverse_2 := reverse(indexA);
_MMoper_3 := [<=](valuesB,2000);
var _MMuselect_4 := uselect(_MMoper_3,true).mark(0@0);
var _MMjoin_5 := join(indexB,_MMuselect_4);
var _MMoper_6 := {count}(_MMjoin_5);
_MMmergecast_7 := mergecast(_MMreverse_2,_MMoper_6,0);
indexA.print();
_MMmergecast_7.find(4@0).print();
_MMmergecast_7.find(3@0).print();
_MMmergecast_7.find(2@0).print();
_MMmergecast_7.find(1@0).print();
_MMmergecast_7.find(0@0).print();
# { 2 ,  0 ,  0 ,  0 ,  0 }

_MMreverse_2 := reverse(indexA);
_MMoper_3 := [<=](valuesB,2000);
_MMuselect_4 := uselect(_MMoper_3,true).mark(0@0);
_MMjoin_5 := join(indexB,_MMuselect_4);
_MMoper_6 := {count}(_MMjoin_5);
_MMmergecast_7 := mergecast(_MMreverse_2,_MMoper_6,0);
indexA.print();
_MMmergecast_7.find(4@0).print();
_MMmergecast_7.find(3@0).print();
_MMmergecast_7.find(2@0).print();
_MMmergecast_7.find(1@0).print();
_MMmergecast_7.find(0@0).print();
# { 2 ,  0 ,  0 ,  0 ,  0 }

_MMreverse_2 := reverse(indexA);
_MMoper_3 := [<=](valuesB,2000);
_MMuselect_4 := uselect(_MMoper_3,true).mark(0@0);
_MMjoin_5 := join(indexB,_MMuselect_4);
_MMoper_6 := {count}(_MMjoin_5);
_MMmergecast_7 := mergecast(_MMreverse_2,_MMoper_6,0);
reverse(copy_order(reverse(sort(reverse(orderA))),reverse(indexA))).print();
_MMmergecast_7.find(4@0).print();
_MMmergecast_7.find(1@0).print();
_MMmergecast_7.find(0@0).print();
_MMmergecast_7.find(3@0).print();
_MMmergecast_7.find(2@0).print();
# [ 2 ,  0 ,  0 ,  0 ,  0 ]

quit();
