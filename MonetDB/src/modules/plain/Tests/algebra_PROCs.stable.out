stdout of test 'algebra_PROCs` in directory 'src/modules/plain` itself:

#> Mtest (13:31:39):	milS algebra_PROCs milS
#> Mtest (13:31:39):	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db src_modules_plain -single algebra_PROCs.milS
# Monet Database Server V4.2
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
#script:algebra_PROCs.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.

setoid(oid(20000000));

proc loth(int a,int b): bit {return (a<b);}
proc loth(flt a,flt b): bit {return (a<b);}
proc grth(flt a,flt b): bit {return (a>b);}

var a:=new(str,int);
a.insert("A",1);
a.insert("B",2);
a.insert("C",3);
a.print();
#-----------------#
# BAT:	  tmp_24  #
# (str)	  (int)	  #
#-----------------#
[ "A",	  1	  ]
[ "B",	  2	  ]
[ "C",	  3	  ]

var b:=new(int,flt);
b.insert(1,1.1);
b.insert(2,2.2);
b.insert(3,3.3);
b.print();
#-------------------------#
# h	tmp_30		  # name
# int	flt		  # type
#-------------------------#
[ 1,	  1.10000002	  ]
[ 2,	  2.20000005	  ]
[ 3,	  3.29999995	  ]

thetajoin(a,b,LT,lng(nil)).print();
#-------------------------#
# h	tmp_28		  # name
# str	flt		  # type
#-------------------------#
[ "A",	  2.20000005	  ]
[ "A",	  3.29999995	  ]
[ "B",	  3.29999995	  ]
join(a,b,"loth").print();
#-------------------------#
# h	tmp_28		  # name
# str	flt		  # type
#-------------------------#
[ "A",	  2.20000005	  ]
[ "A",	  3.29999995	  ]
[ "B",	  3.29999995	  ]

b.insert(4,4.4);
b.print();
#-------------------------#
# h	tmp_30		  # name
# int	flt		  # type
#-------------------------#
[ 1,	  1.10000002	  ]
[ 2,	  2.20000005	  ]
[ 3,	  3.29999995	  ]
[ 4,	  4.4000001	  ]

thetajoin(a,b,LT,lng(nil)).print();
#-------------------------#
# h	tmp_28		  # name
# str	flt		  # type
#-------------------------#
[ "A",	  2.20000005	  ]
[ "A",	  3.29999995	  ]
[ "A",	  4.4000001	  ]
[ "B",	  3.29999995	  ]
[ "B",	  4.4000001	  ]
[ "C",	  4.4000001	  ]
join(a,b,"loth").print();
#-------------------------#
# t	tmp_28		  # name
# str	flt		  # type
#-------------------------#
[ "A",	  2.20000005	  ]
[ "A",	  3.29999995	  ]
[ "B",	  3.29999995	  ]
[ "A",	  4.4000001	  ]
[ "B",	  4.4000001	  ]
[ "C",	  4.4000001	  ]

select(b,flt(nil),3.4).print();
#-------------------------#
# h	tmp_28		  # name
# int	flt		  # type
#-------------------------#
[ 1,	  1.10000002	  ]
[ 2,	  2.20000005	  ]
[ 3,	  3.29999995	  ]
mil_select(b,"<=",3.4).print();
#-------------------------#
# h	tmp_28		  # name
# int	flt		  # type
#-------------------------#
[ 1,	  1.10000002	  ]
[ 2,	  2.20000005	  ]
[ 3,	  3.29999995	  ]
mil_select(b,"loth",3.4).print();
#-------------------------#
# h	tmp_31		  # name
# int	flt		  # type
#-------------------------#
[ 1,	  1.10000002	  ]
[ 2,	  2.20000005	  ]
[ 3,	  3.29999995	  ]
mil_select(b,"[in]",1.1,3.4).print();
#-------------------------#
# h	tmp_31		  # name
# int	flt		  # type
#-------------------------#
[ 1,	  1.10000002	  ]
[ 2,	  2.20000005	  ]
[ 3,	  3.29999995	  ]
mil_select(b,"between",1.1,3.4).print();
#-------------------------#
# h	tmp_31		  # name
# int	flt		  # type
#-------------------------#
[ 1,	  1.10000002	  ]
[ 2,	  2.20000005	  ]
[ 3,	  3.29999995	  ]
neg_select(b,">",3.4).print();
#-------------------------#
# h	tmp_31		  # name
# int	flt		  # type
#-------------------------#
[ 1,	  1.10000002	  ]
[ 2,	  2.20000005	  ]
[ 3,	  3.29999995	  ]
neg_select(b,"grth",3.4).print();
#-------------------------#
# h	tmp_28		  # name
# int	flt		  # type
#-------------------------#
[ 1,	  1.10000002	  ]
[ 2,	  2.20000005	  ]
[ 3,	  3.29999995	  ]
neg_select(b,"between",3.4,5.5).print();
#-------------------------#
# h	tmp_31		  # name
# int	flt		  # type
#-------------------------#
[ 1,	  1.10000002	  ]
[ 2,	  2.20000005	  ]
[ 3,	  3.29999995	  ]
rev_select(b,">=",3.4).print();
#-------------------------#
# h	tmp_31		  # name
# int	flt		  # type
#-------------------------#
[ 1,	  1.10000002	  ]
[ 2,	  2.20000005	  ]
[ 3,	  3.29999995	  ]

var b:=new(oid,oid);
b.insert(0@0,0@0);
b.insert(10@0,10@0);
b.info().find("hsorted").print();
[ "65" ]
b.info().find("tsorted").print();
[ "65" ]
b.info().find("hkey").print();
[ "1" ]
b.info().find("tkey").print();
[ "1" ]
var m:=b.merge();
m.info().find("hsorted").print();
[ "65" ]
m.info().find("tsorted").print();
[ "65" ]
m.info().find("hkey").print();
[ "1" ]
m.info().find("tkey").print();
[ "0" ]
var s:=m.split();
s.info().find("hsorted").print();
[ "65" ]
s.info().find("tsorted").print();
[ "0" ]
s.info().find("hkey").print();
[ "0" ]
s.info().find("tkey").print();
[ "0" ]

b.insert(5@0,0@0);
b.info().find("hsorted").print();
[ "0" ]
b.info().find("tsorted").print();
[ "0" ]
b.info().find("hkey").print();
[ "0" ]
b.info().find("tkey").print();
[ "0" ]
var m:=b.merge();
m.info().find("hsorted").print();
[ "0" ]
m.info().find("tsorted").print();
[ "65" ]
m.info().find("hkey").print();
[ "0" ]
m.info().find("tkey").print();
[ "0" ]
var s:=m.split();
s.info().find("hsorted").print();
[ "0" ]
s.info().find("tsorted").print();
[ "0" ]
s.info().find("hkey").print();
[ "0" ]
s.info().find("tkey").print();
[ "0" ]

quit();

# 17:05:09 >  
# 17:05:09 >  Done.
# 17:05:09 >  

