@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@a Sjoerd Mullender, based on code by M. Kersten and Peter Boncz and Niels Nes
@v 5
@f MapiClient
@* The Mapi Client interface (V4+V5)
A textual interface to the Monet server using the Mapi library,
providing command-line MIL access for its users. It is the preferred
interface for non-DBAs.

@+ Manual Page
@T
The {\tt MapiClient} program provides a textual
interface to the MonetDB server. Unlike the Mserver console, the
{\tt MapiClient} program is intended not only for the database
administrator, but for all users. It is more comfortable than the
console, since it provides a command history and automatic file name
completion. The default authorization for SQL interaction is the user
'monetdb'.

\begin{verbatim}
MapiClient [options] [inputfile+]
\end{verbatim}

The following options are supported:

\begin{tabular} {l l l}
 -b t/f      & --blocked=true/false& blocked mode \\
 -D          & --dump           & dump sql database \\
 -e          & --error          & exit on error \\
 -h hostname & --host=hostname  & host to connect to \\
 -l language & --language=lang  & {mal,sql,mil} \\
 -P passwd   & --passwd=passwd  & password \\
 -p portnr   & --port=portnr    & port to connect to \\
 -s stmt     & --statement=stmt & run single statement \\
 -t          & --trace          & trace Monet interaction \\
 -T          & --time           & time commands \\
 -u user     & --user=user      & user id \\
 -H          & --history        & load/save cmdline history (default off) \\
 -?          & --help           & show this usage message \\
\end{tabular}

Calling "MapiClient -l sql" establishes a SQL connection with an
Mserver server running on the local machine. The default user
'monetdb' is used, which provides administrative rights.
To protect your database you may want to introduce another DBA name and
limit the access permisions of 'monetdb' to the level of a guest account.
@

@{
@+ Implementation
@c
#include <monet_options.h>
#include "Mapi.h"
#include <unistd.h>
#include <stdlib.h>
#include <ctype.h>
#include <sys/stat.h>
#include <errno.h>
#include <string.h>
#ifdef HAVE_TERMIOS_H
#include <termios.h>
#endif
#ifdef HAVE_LIBREADLINE
#include <readline/readline.h>
#include <readline/history.h>
#include "ReadlineTools.h"
#endif

#ifndef S_ISCHR
#define S_ISCHR(m)	(((m) & S_IFMT) == S_IFCHR)
#endif

#ifdef NATIVE_WIN32
/* Windows doesn't declare chdir, even though it does provide the function */
extern int chdir(const char *);
#endif

static FILE *toConsole;

char *command = NULL;

static long t0, t1;		/* used for timing */
static char *mark, *mark2;

/* stolen piece */
#ifdef HAVE_FTIME
#include <sys/timeb.h>
#endif

#if TIME_WITH_SYS_TIME
# include <sys/time.h>
# include <time.h>
#else
# if HAVE_SYS_TIME_H
#  include <sys/time.h>
# else
#  include <time.h>
# endif
#endif

static long
gettime(void)
{
#ifdef HAVE_GETTIMEOFDAY
	struct timeval tp;

	gettimeofday(&tp, NULL);
	return (long) tp.tv_sec * 1000000 + (long) tp.tv_usec;
#else
#ifdef HAVE_FTIME
	struct timeb tb;

	ftime(&tb);
	return (long) tb.time * 1000000 + (long) tb.millitm * 1000;
#endif
#endif
}

static void
timerStart(void)
{
	t0 = gettime();
}

static void
timerEnd(void)
{
	t1 = gettime();
	if (mark) {
		fprintf(toConsole, "%s % 7ld.%03ld msec %s\n", mark, (t1 - t0) / 1000, (t1 - t0) % 1000, mark2 ? mark2 : "");
		fflush(toConsole);
	}
}

static int
doRequest(Mapi mid, const char *buf)
{
	MapiHdl hdl;

	if ((hdl = mapi_quick_query(mid, buf, toConsole)) == NULL) {
		mapi_explain(mid, stderr);
		return 1;
	}
	if (mapi_error(mid)) {
		mapi_explain_query(hdl, stderr);
		mapi_close_handle(hdl);
		return 1;
	}
	mapi_close_handle(hdl);
	return 0;
}

static void
quoted_print(FILE *f, const char *s)
{
	putc('"', f);
	while (*s) {
		switch (*s) {
		case '\\':
		case '"':
			putc('\\', f);
			putc(*s, f);
			break;
		case '\n':
			putc('\\', f);
			putc('n', f);
			break;
		case '\t':
			putc('\\', f);
			putc('t', f);
			break;
		default:
			if ((0 < *s && *s < 32) || *s == '\377')
				fprintf(f, "\\%03o", *s & 0377);
			else
				putc(*s, f);
			break;
		}
		s++;
	}
	putc('"', f);
}

static int
dump_table(Mapi mid, char *tname)
{
	int cnt = 0, i;
	MapiHdl hdl;
	char *query;
	size_t maxquerylen = BUFSIZ + strlen(tname);
	int *string;

	query = malloc(maxquerylen);
	fprintf(toConsole, "CREATE TABLE ");
	quoted_print(toConsole, tname);
	fprintf(toConsole, " (\n");

	snprintf(query, maxquerylen,
		 "SELECT \"name\","			/* 0 */
			"\"type\","			/* 1 */
			"\"type_digits\","		/* 2 */
			"\"type_scale\","		/* 3 */
			"\"null\","			/* 4 */
			"\"default\","			/* 5 */
			"\"number\" "			/* 6 */
		 "FROM \"columns\" \"c\",\"tables\" \"t\" "
		 "WHERE \"c\".\"table_id\" = \"t\".\"id\" "
		 "AND '%s' = \"t\".\"name\" ORDER BY \"number\"", tname);
	if ((hdl = mapi_query(mid, query)) == NULL || mapi_error(mid)) {
		if (hdl) {
			mapi_explain_query(hdl, stderr);
			mapi_close_handle(hdl);
		} else
			mapi_explain(mid, stderr);
		free(query);
		return 1;
	}

	while ((mapi_fetch_row(hdl)) != 0) {
		char *c_name = mapi_fetch_field(hdl, 0);
		char *c_type = mapi_fetch_field(hdl, 1);
		char *c_type_digits = mapi_fetch_field(hdl, 2);
		char *c_type_scale = mapi_fetch_field(hdl, 3);
		char *c_null = mapi_fetch_field(hdl, 4);
		char *c_default = mapi_fetch_field(hdl, 5);

		if (mapi_error(mid)) {
			mapi_explain_query(hdl, stderr);
			mapi_close_handle(hdl);
			free(query);
			return 1;
		}
		if (cnt)
			fprintf(toConsole, ",\n");

		putc('\t', toConsole);
		quoted_print(toConsole, c_name);
		putc(' ', toConsole);
		if (strcmp(c_type, "boolean") == 0 ||
		    strcmp(c_type, "int") == 0 ||
		    strcmp(c_type, "smallint") == 0 ||
		    strcmp(c_type, "bigint") == 0 ||
		    strcmp(c_type, "double") == 0 ||
		    strcmp(c_type, "real") == 0 ||
		    strcmp(c_type, "date") == 0) {
			fprintf(toConsole, "%s", c_type);
		} else if (strcmp(c_type, "month_interval") == 0) {
			fprintf(toConsole, "INTERVAL MONTH");
		} else if (strcmp(c_type, "sec_interval") == 0) {
			fprintf(toConsole, "INTERVAL SECOND");
		} else if (strcmp(c_type, "clob") == 0) {
			fprintf(toConsole, "CHARACTER LARGE OBJECT");
			if (strcmp(c_type_digits, "0") != 0)
				fprintf(toConsole, "(%s)", c_type_digits);
		} else if (strcmp(c_type, "timestamp") == 0 ||
			   strcmp(c_type, "time") == 0) {
			fprintf(toConsole, "%s", c_type);
			if (strcmp(c_type_digits, "0") != 0)
				fprintf(toConsole, "(%s)", c_type_digits);
			if (strcmp(c_type_scale, "1") == 0)
				fprintf(toConsole, " WITH TIME ZONE");
		} else if (strcmp(c_type_digits, "0") == 0) {
			fprintf(toConsole, "%s", c_type);
		} else if (strcmp(c_type_scale, "0") == 0) {
			fprintf(toConsole, "%s(%s)", c_type, c_type_digits);
		} else {
			fprintf(toConsole, "%s(%s,%s)", c_type, c_type_digits, c_type_scale);
		}
		if (strcmp(c_null, "false") == 0)
			fprintf(toConsole, " NOT NULL");
		if (c_default != NULL)
			fprintf(toConsole, " DEFAULT '%s'", c_default);
		cnt++;
	}
	if (mapi_error(mid)) {
		mapi_explain_query(hdl, stderr);
		mapi_close_handle(hdl);
		free(query);
		return 1;
	}
	mapi_close_handle(hdl);
	snprintf(query, maxquerylen,
		 "SELECT \"kc\".\"column\","		/* 0 */
			"\"kc\".\"nr\", "		/* 1 */
			"\"k\".\"name\" "		/* 2 */
		 "FROM \"keycolumns\" \"kc\", "
		      "\"keys\" \"k\", "
		      "\"tables\" \"t\" "
		 "WHERE \"kc\".\"id\" = \"k\".\"id\" AND "
		       "\"k\".\"table_id\" = \"t\".\"id\" AND "
		       "\"k\".\"type\" = 0 AND "
		       "\"t\".\"name\" = '%s' "
		 "ORDER BY \"nr\"", tname);
	if ((hdl = mapi_query(mid, query)) == NULL || mapi_error(mid)) {
		if (hdl) {
			mapi_explain_query(hdl, stderr);
			mapi_close_handle(hdl);
		} else
			mapi_explain(mid, stderr);
		free(query);
		return 1;
	}
	cnt = 0;
	while ((mapi_fetch_row(hdl)) != 0) {
		char *c_column = mapi_fetch_field(hdl, 0);
		char *k_name = mapi_fetch_field(hdl, 2);

		if (mapi_error(mid)) {
			mapi_explain_query(hdl, stderr);
			mapi_close_handle(hdl);
			free(query);
			return 1;
		}
		if (cnt == 0) {
			fprintf(toConsole, ",\n\t");
			if (k_name) {
				fprintf(toConsole, "CONSTRAINT ");
				quoted_print(toConsole, k_name);
				putc(' ', toConsole);
			}
			fprintf(toConsole, "PRIMARY KEY (");
		} else
			fprintf(toConsole, ", ");
		quoted_print(toConsole, c_column);
		cnt++;
	}
	if (cnt)
		fprintf(toConsole, ")");
	if (mapi_error(mid)) {
		mapi_explain_query(hdl, stderr);
		mapi_close_handle(hdl);
		free(query);
		return 1;
	}
	mapi_close_handle(hdl);

	snprintf(query, maxquerylen,
		 "SELECT \"kc\".\"column\","		/* 0 */
			"\"kc\".\"nr\", "		/* 1 */
			"\"k\".\"name\" "		/* 2 */
		 "FROM \"keycolumns\" \"kc\", "
		      "\"keys\" \"k\", "
		      "\"tables\" \"t\" "
		 "WHERE \"kc\".\"id\" = \"k\".\"id\" AND "
		       "\"k\".\"table_id\" = \"t\".\"id\" AND "
		       "\"k\".\"type\" = 1 AND "
		       "\"t\".\"name\" = '%s' "
		 "ORDER BY \"nr\"", tname);
	if ((hdl = mapi_query(mid, query)) == NULL || mapi_error(mid)) {
		if (hdl) {
			mapi_explain_query(hdl, stderr);
			mapi_close_handle(hdl);
		} else
			mapi_explain(mid, stderr);
		free(query);
		return 1;
	}
	cnt = 0;
	while ((mapi_fetch_row(hdl)) != 0) {
		char *c_column = mapi_fetch_field(hdl, 0);
		char *kc_nr = mapi_fetch_field(hdl, 1);
		char *k_name = mapi_fetch_field(hdl, 2);

		if (mapi_error(mid)) {
			mapi_explain_query(hdl, stderr);
			mapi_close_handle(hdl);
			free(query);
			return 1;
		}
		if (strcmp(kc_nr, "0") == 0) {
			if (cnt)
				putc(')', toConsole);
			fprintf(toConsole, ",\n\t");
			if (k_name) {
				fprintf(toConsole, "CONSTRAINT ");
				quoted_print(toConsole, k_name);
				putc(' ', toConsole);
			}
			fprintf(toConsole, "UNIQUE (");
			cnt = 1;
		} else
			fprintf(toConsole, ", ");
		quoted_print(toConsole, c_column);
	}
	if (cnt)
		putc(')', toConsole);
	if (mapi_error(mid)) {
		mapi_explain_query(hdl, stderr);
		mapi_close_handle(hdl);
		free(query);
		return 1;
	}
	mapi_close_handle(hdl);

	snprintf(query, maxquerylen,
		 "SELECT \"pkt\".\"name\","		/* 0 */
			"\"pkkc\".\"column\","		/* 1 */
			"\"fkkc\".\"column\","		/* 2 */
			"\"fkkc\".\"nr\","		/* 3 */
			"\"fkk\".\"name\""		/* 4 */
		 "FROM \"tables\" \"fkt\","
		      "\"keycolumns\" \"fkkc\","
		      "\"keys\" \"fkk\","
		      "\"tables\" \"pkt\","
		      "\"keycolumns\" \"pkkc\","
		      "\"keys\" \"pkk\""
		 "WHERE \"fkt\".\"id\" = \"fkk\".\"table_id\" AND "
		       "\"pkt\".\"id\" = \"pkk\".\"table_id\" AND "
		       "\"fkk\".\"id\" = \"fkkc\".\"id\" AND "
		       "\"pkk\".\"id\" = \"pkkc\".\"id\" AND "
		       "\"fkk\".\"rkey\" = \"pkk\".\"id\" AND "
		       "\"fkkc\".\"nr\" = \"pkkc\".\"nr\" AND "
		       "\"fkt\".\"name\" = '%s'"
		 "ORDER BY \"fkk\".\"name\", \"nr\"", tname);
	if ((hdl = mapi_query(mid, query)) == NULL || mapi_error(mid)) {
		if (hdl) {
			mapi_explain_query(hdl, stderr);
			mapi_close_handle(hdl);
		} else
			mapi_explain(mid, stderr);
		free(query);
		return 1;
	}
	cnt = mapi_fetch_row(hdl);
	while (cnt != 0) {
		char *c_name = mapi_fetch_field(hdl, 0);
		char *c_pcolumn = mapi_fetch_field(hdl, 1);
		char *c_fcolumn = mapi_fetch_field(hdl, 2);
		char *c_nr = mapi_fetch_field(hdl, 3);
		char *c_fkname = mapi_fetch_field(hdl, 4);
		char **fkeys, **pkeys;
		int nkeys = 0;

		if (mapi_error(mid)) {
			mapi_explain_query(hdl, stderr);
			mapi_close_handle(hdl);
			free(query);
			return 1;
		}
		assert(strcmp(c_nr, "0") == 0);
		(void) c_nr;	/* pacify compilers in case assertions are disabled */
		nkeys = 1;
		fkeys = malloc(nkeys * sizeof(*fkeys));
		pkeys = malloc(nkeys * sizeof(*pkeys));
		pkeys[nkeys - 1] = c_pcolumn;
		fkeys[nkeys - 1] = c_fcolumn;
		while ((cnt = mapi_fetch_row(hdl)) != 0 && strcmp(mapi_fetch_field(hdl, 3), "0") != 0) {
			nkeys++;
			pkeys = realloc(pkeys, nkeys * sizeof(*pkeys));
			fkeys = realloc(fkeys, nkeys * sizeof(*fkeys));
			pkeys[nkeys - 1] = mapi_fetch_field(hdl, 1);
			fkeys[nkeys - 1] = mapi_fetch_field(hdl, 2);
		}
		fprintf(toConsole, ",\n\t");
		if (c_fkname) {
			fprintf(toConsole, "CONSTRAINT ");
			quoted_print(toConsole, c_fkname);
			putc(' ', toConsole);
		}
		fprintf(toConsole, "FOREIGN KEY (");
		for (i = 0; i < nkeys; i++) {
			if (i > 0)
				fprintf(toConsole, ", ");
			quoted_print(toConsole, fkeys[i]);
		}
		fprintf(toConsole, ") REFERENCES ");
		quoted_print(toConsole, c_name);
		fprintf(toConsole, " (");
		for (i = 0; i < nkeys; i++) {
			if (i > 0)
				fprintf(toConsole, ", ");
			quoted_print(toConsole, pkeys[i]);
		}
		fprintf(toConsole, ")");
		free(fkeys);
		free(pkeys);
	}
	if (mapi_error(mid)) {
		mapi_explain_query(hdl, stderr);
		mapi_close_handle(hdl);
		free(query);
		return 1;
	}
	mapi_close_handle(hdl);

	fprintf(toConsole, "\n");

	fprintf(toConsole, ");\n");

	snprintf(query, maxquerylen,
		 "SELECT \"i\".\"name\", "		/* 0 */
			"\"k\".\"name\", "		/* 1 */
			"\"kc\".\"nr\", "		/* 2 */
			"\"c\".\"name\" "		/* 3 */
		 "FROM \"idxs\" AS \"i\" LEFT JOIN \"keys\" AS \"k\" "
				"ON \"i\".\"name\" = \"k\".\"name\", "
		      "\"keycolumns\" AS \"kc\", "
		      "\"columns\" AS \"c\", "
		      "\"tables\" AS \"t\" "
		 "WHERE \"i\".\"table_id\" = \"t\".\"id\" AND "
		       "\"i\".\"id\" = \"kc\".\"id\" AND "
		       "\"t\".\"id\" = \"c\".\"table_id\" AND "
		       "\"kc\".\"column\" = \"c\".\"name\" AND "
		       "(\"k\".\"type\" IS NULL OR \"k\".\"type\" = 1) AND "
		       "\"t\".\"name\" = '%s' "
		 "ORDER BY \"i\".\"name\", \"kc\".\"nr\"", tname);
	if ((hdl = mapi_query(mid, query)) == NULL || mapi_error(mid)) {
		if (hdl) {
			mapi_explain_query(hdl, stderr);
			mapi_close_handle(hdl);
		} else
			mapi_explain(mid, stderr);
		free(query);
		return 1;
	}
	cnt = 0;
	while (mapi_fetch_row(hdl) != 0) {
		char *i_name = mapi_fetch_field(hdl, 0);
		char *k_name = mapi_fetch_field(hdl, 1);
		char *kc_nr = mapi_fetch_field(hdl, 2);
		char *c_name = mapi_fetch_field(hdl, 3);

		if (mapi_error(mid)) {
			mapi_explain_query(hdl, stderr);
			mapi_close_handle(hdl);
			free(query);
			return 1;
		}
		if (k_name != NULL) {
			/* unique key, already handled */
			continue;
		}

		if (strcmp(kc_nr, "0") == 0) {
			if (cnt)
				fprintf(toConsole, ");\n");
			fprintf(toConsole, "CREATE INDEX ");
			quoted_print(toConsole, i_name);
			fprintf(toConsole, " ON ");
			quoted_print(toConsole, tname);
			fprintf(toConsole, " (");
			cnt = 1;
		} else
			fprintf(toConsole, ", ");
		quoted_print(toConsole, c_name);
	}
	if (cnt)
		fprintf(toConsole, ");\n");
	if (mapi_error(mid)) {
		mapi_explain_query(hdl, stderr);
		mapi_close_handle(hdl);
		free(query);
		return 1;
	}
	mapi_close_handle(hdl);

	snprintf(query, maxquerylen, "SELECT count(*) FROM \"%s\"", tname);
	if ((hdl = mapi_query(mid, query)) == NULL || mapi_error(mid)) {
		if (hdl) {
			mapi_explain_query(hdl, stderr);
			mapi_close_handle(hdl);
		} else
			mapi_explain(mid, stderr);
		free(query);
		return 1;
	}
	if (mapi_fetch_row(hdl)) {
		char *cnt = mapi_fetch_field(hdl, 0);

		fprintf(toConsole, "COPY %s RECORDS INTO ", cnt);
		quoted_print(toConsole, tname);
		fprintf(toConsole, " FROM stdin USING DELIMITERS '\\t';\n");
	}
	mapi_close_handle(hdl);

	snprintf(query, maxquerylen, "SELECT * FROM \"%s\"", tname);
	if ((hdl = mapi_query(mid, query)) == NULL || mapi_error(mid)) {
		if (hdl) {
			mapi_explain_query(hdl, stderr);
			mapi_close_handle(hdl);
		} else
			mapi_explain(mid, stderr);
		free(query);
		return 1;
	}

	cnt = mapi_get_field_count(hdl);
	string = malloc(sizeof(int) * cnt);
	for (i = 0; i < cnt; i++) {
		string[i] = 0;
		if (strcmp(mapi_get_type(hdl, i), "char") == 0 || strcmp(mapi_get_type(hdl, i), "varchar") == 0) {
			string[i] = 1;
		}
	}
	while (mapi_fetch_row(hdl)) {
		char *s;

		for (i = 0; i < cnt; i++) {
			s = mapi_fetch_field(hdl, i);
			if (s == NULL)
				fputs("NULL", toConsole);
			else if (string[i]) {
				/* write double-quoted string with
				   certain characters escaped */
				quoted_print(toConsole, s);
			} else
				fputs(s, toConsole);
			if (i < cnt - 1)
				putc('\t', toConsole);
			else
				putc('\n', toConsole);
		}
	}
	free(string);
	if (mapi_error(mid)) {
		mapi_explain_query(hdl, stderr);
		mapi_close_handle(hdl);
		free(query);
		return 1;
	}
	mapi_close_handle(hdl);
	free(query);
	return 0;
}

static int
dump_tables(Mapi mid)
{
	const char *tables = "SELECT \"name\" FROM \"ptables\" WHERE "
		"\"istable\" = TRUE AND \"system\" = FALSE AND "
		"\"name\" NOT LIKE 'history'";
	const char *views = "SELECT \"name\",\"query\" FROM \"ptables\" WHERE "
		"\"istable\" = FALSE AND \"system\" = FALSE";
	MapiHdl hdl;
	int rc = 0;

	if ((hdl = mapi_query(mid, tables)) == NULL || mapi_error(mid)) {
		if (hdl) {
			mapi_explain_query(hdl, stderr);
			mapi_close_handle(hdl);
		} else
			mapi_explain(mid, stderr);
		return 1;
	}

	while (mapi_fetch_row(hdl) != 0) {
		char *tname = mapi_fetch_field(hdl, 0);

		rc += dump_table(mid, tname);
	}
	if (mapi_error(mid)) {
		mapi_explain_query(hdl, stderr);
		mapi_close_handle(hdl);
		return 1;
	}
	mapi_close_handle(hdl);

	if ((hdl = mapi_query(mid, views)) == NULL || mapi_error(mid)) {
		if (hdl) {
			mapi_explain_query(hdl, stderr);
			mapi_close_handle(hdl);
		} else
			mapi_explain(mid, stderr);
		return 1;
	}
	while (mapi_fetch_row(hdl) != 0) {
		char *vname = mapi_fetch_field(hdl, 0);
		char *query = mapi_fetch_field(hdl, 1);

		fprintf(toConsole, "CREATE VIEW ");
		quoted_print(toConsole, vname);
		fprintf(toConsole, " AS %s\n", query);
	}
	if (mapi_error(mid)) {
		mapi_explain_query(hdl, stderr);
		mapi_close_handle(hdl);
		return 1;
	}
	mapi_close_handle(hdl);

	/* finally commit the whole transaction */
	fprintf(toConsole, "COMMIT;\n");

	return rc;
}

#define CHECK_RESULT(mid, hdl, buf, break_or_continue)			\
		switch (mapi_error(mid)) {				\
		case MOK:						\
			/* everything A OK */				\
			break;						\
		case MERROR:						\
			/* some error, but try to continue */		\
			if (hdl) {					\
				mapi_explain_query(hdl, stderr);	\
				mapi_close_handle(hdl);			\
				hdl = NULL;				\
			} else						\
				mapi_explain(mid, stderr);		\
			break_or_continue;				\
		case MTIMEOUT:						\
			/* lost contact with the server */		\
			if (hdl) {					\
				mapi_explain_query(hdl, stderr);	\
				mapi_close_handle(hdl);			\
				hdl = NULL;				\
			} else						\
				mapi_explain(mid, stderr);		\
			timerEnd();					\
			free(buf);					\
			return 1;					\
		}

static int
doFile(Mapi mid, const char *file, int skipequals)
{
	FILE *fp;
	char *buf = NULL;
	size_t length;
	MapiHdl hdl = NULL;
	MapiMsg rc = MOK;
	int bufsize = 0;

	if (file == NULL)
		fp = stdin;
	else if ((fp = fopen(file, "r")) == NULL) {
		fprintf(stderr, "%s: cannot open\n", file);
		return 1;
	}

	bufsize = BUFSIZ;
	buf = malloc(bufsize);
	if (!buf) {
		fprintf(stderr, "cannot allocate memory for send buffer\n");
		if (file != NULL)
			fclose(fp);
		return 1;
	}

	timerStart();
	if (command) {
		/* special code for XQuery: prepend command to query */
		hdl = mapi_query_prep(mid);
		CHECK_RESULT(mid, hdl, buf, break);
		mapi_query_part(hdl, command, strlen(command));
		CHECK_RESULT(mid, hdl, buf, break);
	}
	do {
		if ((length = fread(buf, 1, bufsize, fp)) == 0) {
			/* end of file */
			if (file != NULL) {
				fclose(fp);
				file = NULL;
			}
			if (hdl == NULL) {
				/* nothing more to do */
				timerEnd();
				free(buf);
				return 0;
			}
			/* hdl != NULL, we should finish the current query */
		}

		if (hdl == NULL) {
			hdl = mapi_query_prep(mid);
			CHECK_RESULT(mid, hdl, buf, continue);
		}
		if (length > 0) {
			assert(hdl != NULL);
			mapi_query_part(hdl, buf, length);
			CHECK_RESULT(mid, hdl, buf, continue);

			/* in case of xquery; do the whole file in one go */
			if (command) continue;
		}

		assert(hdl != NULL);
		/* If the server wants more but we're at the end of
		   file (length == 0), notify the server that we
		   don't have anything more.  If the server still
		   wants more (shouldn't happen according to the
		   protocol) we break out of the loop (via the
		   continue).  The assertion at the end will then go
		   off. */
		if (mapi_query_done(hdl) == MMORE &&
		    (length > 0 || mapi_query_done(hdl) == MMORE))
			continue;	/* get more data */

		CHECK_RESULT(mid, hdl, buf, continue);

		do {
			char *reply;

			if ((reply = mapi_result_error(hdl)) != NULL)
				mapi_explain_result(hdl, stderr);
			if (mapi_get_querytype(hdl) == Q_UPDATE) {
				fprintf(toConsole, "[ %d\t]\n",
					mapi_rows_affected(hdl));
			} else {
				while ((reply = mapi_fetch_line(hdl)) != NULL) {
					if (*reply == '=' && skipequals)
						reply++;
					fprintf(toConsole, "%s\n", reply);
				}
			}
		} while ((rc = mapi_next_result(hdl)) == 1);
		if (rc == MMORE && (length > 0 || mapi_query_done(hdl) != MOK))
			continue;	/* get more data */

		CHECK_RESULT(mid, hdl, buf, continue);

		mapi_close_handle(hdl);
		hdl = NULL;
	} while (length > 0);
	/* reached on end of file */
	assert(hdl == NULL);
	timerEnd();

	free(buf);
	if (file != NULL) fclose(fp);
	fflush(stdout);
	return 0;
}

static void
showCommands(void)
{
	fprintf(toConsole, "?\t - show this message\n");
	fprintf(toConsole, "?text\t - sent help message\n");
	fprintf(toConsole, "!\t - shell escape\n");
	fprintf(toConsole, "<file\t - read input from file\n");
	fprintf(toConsole, ">file\t - save response in file\n");
	fprintf(toConsole, ">\t - response to terminal\n");
	fprintf(toConsole, "cd\t - change directory\n");
	fprintf(toConsole, "\\l\t- line is sent immediately\n");
	fprintf(toConsole, "\\q\t- terminate session\n");
	fprintf(toConsole, "\\T\t- toggle timer\n");
	fprintf(toConsole, "\\D\t- dump database\n");
	fprintf(toConsole, "\\Dtable\t- dump table\n");
	fprintf(toConsole, "\\A\t- enable auto commit\n");
	fprintf(toConsole, "\\a\t- disable auto commit\n");
	fprintf(toConsole, "\\t\t- toggle interaction trace\n");
}

static int
doFileByLines(Mapi mid, FILE *fp, const char *prompt, int linemode, int exit_on_error)
{
	char *line = NULL;
	char *buf = NULL;
	size_t length;
	MapiHdl hdl = NULL;
	MapiMsg rc = MOK;

#ifdef HAVE_LIBREADLINE
	if (prompt == NULL)
#endif
		buf = malloc(BUFSIZ);

	do {
#ifdef HAVE_LIBREADLINE
		if (prompt) {
			rl_completion_func_t *func = NULL;

			if (buf)
				free(buf);
			if (hdl)
				func = suspend_completion();
			buf = readline(hdl ? "more>" : prompt);
			if (hdl)
				continue_completion(func);
			/* add a newline to the end since that makes
			   further processing easier */
			if (buf) {
				add_history(buf);
				length = strlen(buf);
				buf = realloc(buf, length + 2);
				buf[length++] = '\n';
				buf[length] = 0;
			}
			line = buf;
		} else
#endif
		{
#ifndef HAVE_LIBREADLINE
			if (prompt) {
				fputs(hdl ? "more>" : prompt, stdout);
				fflush(stdout);
			}
#endif
			line = fgets(buf, BUFSIZ, fp);
		}
		if (line == NULL) {
			/* end of file */
			if (hdl == NULL) {
				/* nothing more to do */
				return 0;
			}
			/* hdl != NULL, we should finish the current query */
			length = 0;
		} else
			length = strlen(line);

		if (length > 0 && (!linemode || (hdl == NULL && length > 0 && line[length - 1] == '\n'))) {
			/* test for special commands */
			while (length > 0 &&
			       (*line & ~0x7F) == 0 &&
			       isspace((int) *line)) {
				line++;
				length--;
			}
			/* in the switch, use continue if the line was
			   processed, use break to send to server */
			switch (*line) {
			case '\0':
				/* empty line */
				break;
			case '\\':
				switch (line[1]) {
				case 'q':
					free(buf);
					return 0;
				case 'T':
					mark = mark ? NULL : "Timer";
					if (mark2)
						free(mark2);
					mark2 = strdup(line + 2);
					continue;
				case 't':
					/* toggle interaction trace */
					mapi_trace(mid, !mapi_get_trace(mid));
					continue;
				case 'l':
					linemode = 1;
					line = "";
					length = 0;
					continue;
				case 'b':
					linemode = 0;
					continue;
				case 'A':
					mapi_setAutocommit(mid, 1);
					continue;
				case 'a':
					mapi_setAutocommit(mid, 0);
					continue;
				case 'D':
					if (line[length - 1] == '\n')
						line[--length] = 0;
					if (line[length - 1] == '\r')
						line[--length] = 0;
					if (line[2]) {
						dump_table(mid, line + 2);
						fprintf(toConsole, "COMMIT\n");
					} else {
						dump_tables(mid);
					}
					continue;
				default:
					break;
				}
				break;
			case '<':
				/* read commands from file */
				if (line[length - 1] == '\n')
					line[--length] = 0;
				if (line[length - 1] == '\r')
					line[--length] = 0;
				doFile(mid, line + 1, 0);
				continue;
			case '>':
				/* redirect output to file */
				line++;
				length--;
				if (line[length - 1] == '\n')
					line[--length] = 0;
				if (line[length - 1] == '\r')
					line[--length] = 0;
				if (toConsole != stdout && toConsole != stderr)
					fclose(toConsole);
				if (length == 0 || strcmp(line, "stdout") == 0)
					toConsole = stdout;
				else if (strcmp(line, "stderr") == 0)
					toConsole = stderr;
				else if ((toConsole = fopen(line, "w")) == NULL) {
					toConsole = stdout;
					fprintf(stderr, "Cannot open %s\n", line);
				}
				continue;
			case 'c':	/* cd command? */
				if (line[1] == 'd' &&
				    (line[2] & ~0x7F) == 0 &&
				    isspace((int) line[2])) {
					if (line[length - 1] == '\n')
						line[--length] = 0;
					if (line[length - 1] == '\r')
						line[--length] = 0;
					if (chdir(line + 3) < 0)
						perror(line);
					continue;
				}
				break;
			case '?':
				if( !isspace((int)line[1]))
					break;
				else showCommands();
				continue;
			}
		}

		if (hdl == NULL) {
			timerStart();
			hdl = mapi_query_prep(mid);
			CHECK_RESULT(mid, hdl, buf, continue);
		}
		if (length > 0) {
			assert(hdl != NULL);
			mapi_query_part(hdl, line, length);
			CHECK_RESULT(mid, hdl, buf, continue);
		}
		if (linemode) {
			assert(hdl != NULL);
			/* If the server wants more but we're at the
			   end of file (line == NULL), notify the
			   server that we don't have anything more.
			   If the server still wants more (shouldn't
			   happen according to the protocol) we break
			   out of the loop (via the continue).  The
			   assertion at the end will then go off. */
			if (mapi_query_done(hdl) == MMORE && (line != NULL || mapi_query_done(hdl) == MMORE))
				continue;	/* get more data */

			CHECK_RESULT(mid, hdl, buf, continue);

			do {
				char *reply;

				if ((reply = mapi_result_error(hdl)) != NULL) {
					mapi_explain_result(hdl, stderr);
					if (exit_on_error) {
						timerEnd();
						return 1;
					}
				}
				if (mapi_get_querytype(hdl) == Q_UPDATE) {
					fprintf(toConsole, "[ %d\t]\n",
						mapi_rows_affected(hdl));
				} else {
					while ((reply = mapi_fetch_line(hdl)) != NULL)
						fprintf(toConsole, "%s\n", reply);
				}
			} while ((rc = mapi_next_result(hdl)) == 1);
			if (rc == MMORE && (line != NULL || mapi_query_done(hdl) != MOK))
				continue;	/* get more data */

			CHECK_RESULT(mid, hdl, buf, continue);

			timerEnd();
			mapi_close_handle(hdl);
			hdl = NULL;
		}
	} while (line != NULL);
	/* reached on end of file */
	assert(hdl == NULL);
	return 0;
}

static char *
simple_prompt(const char *prompt, int maxlen, int echo, const char *def)
{
	int length = 0;
	char *destination = NULL;
	FILE *termin = NULL, *termout = NULL;

#ifdef HAVE_TERMIOS_H
	struct termios t_orig, t;
#else
	(void) echo;
#endif

	destination = (char *) malloc(maxlen + 2);
	if (!destination)
		return NULL;

	termin = fopen("/dev/tty", "r");
	termout = fopen("/dev/tty", "w");

	if (termin == NULL || termout == NULL) {
		if (termin)
			fclose(termin);
		if (termout)
			fclose(termout);
		termin = stdin;
		termout = stderr;
	}

#ifdef HAVE_TERMIOS_H
	if (!echo) {
		tcgetattr(fileno(termin), &t);
		t_orig = t;
		t.c_lflag &= ~ECHO;
		tcsetattr(fileno(termin), TCSAFLUSH, &t);
	}
#endif
	if (prompt) {
		if (def)
			fprintf(termout, "%s(%s):", prompt, def);
		else
			fprintf(termout, "%s:", prompt);
		fflush(termout);
	}
	if (fgets(destination, maxlen, termin) == NULL)
		destination[0] = '\0';

	length = strlen(destination);
	if (length > 0 && destination[length - 1] != '\n') {
		char buf[128];
		int buflen;

		do {
			if (fgets(buf, sizeof(buf), termin) == NULL)
				break;
			buflen = strlen(buf);
		} while (buflen > 0 && buf[buflen - 1] != '\n');
	}

	if (length > 0 && destination[length - 1] == '\n')
		destination[length - 1] = '\0';
#ifdef HAVE_TERMIOS_H
	if (!echo) {
		tcsetattr(fileno(termin), TCSAFLUSH, &t_orig);
		fputs("\n", termout);
		fflush(termout);
	}
	if (termin != stdin)
		fclose(termin);
	if (termout != stdout)
		fclose(termout);
#endif
	if (destination[0] == 0 && def)
		strcpy(destination, def);
	return destination;
}

static void
usage(const char *prog)
{
	fprintf(stderr, "Usage: %s [ options ]\n", prog);
	fprintf(stderr, "Options are:\n");
	fprintf(stderr, " -b t/f      | --blocked=true/false /* blocked mode */\n");
	fprintf(stderr, " -D          | --dump           /* dump sql database */\n");
	fprintf(stderr, " -e          | --error          /* exit on error */\n");
	fprintf(stderr, " -H          | --history        /* load/save cmdline history (default off) */\n");
	fprintf(stderr, " -h hostname | --host=hostname  /* host to connect to */\n");
	fprintf(stderr, " -i          | --interactive    /* read stdin after command line args */\n");
	fprintf(stderr, " -l language | --language=lang  /* {mal,sql,mil,xquery} */\n");
	fprintf(stderr, " -P passwd   | --passwd=passwd  /* password */\n");
	fprintf(stderr, " -p portnr   | --port=portnr    /* port to connect to */\n");
	fprintf(stderr, " -q          | --quiet          /* don't print welcome message */\n");
	fprintf(stderr, " -s stmt     | --statement=stmt /* run single statement */\n");
	fprintf(stderr, " -T          | --time           /* time commands */\n");
	fprintf(stderr, " -t          | --trace          /* trace Monet interaction */\n");
	fprintf(stderr, " -u user     | --user=user      /* user id */\n");
	fprintf(stderr, " -?          | --help           /* show this usage message */\n");
	exit(-1);
}

/* hardwired defaults, only used if monet environment cannot be found */
#define XQuerydefaultMode "dm"	
#define XQuerydefaultPort 45789	
#define SQLdefaultPort 45123	
#define MILdefaultPort 50000	

int
main(int argc, char **argv)
{
	opt *set = NULL;
	int setlen;
	char *language = "mil";
	int port = 0;
	char *user = NULL;
	char *passwd = NULL;
	char *host = NULL;
	int dodump = 0;
	int trace = 0;
	int guest = 1;
	int linemode = 1;
	int exit_on_error = 0;
	int c;
	Mapi mid;
	int quiet = 0;
	int save_history = 0;
	int interactive = 0;
	static struct option long_options[] = {
		{"blocked", 1, 0, 'b'},
		{"config", 1, 0, 'c'},
		{"dump", 0, 0, 'D'},
		{"error", 0, 0, 'e'},
		{"interactive", 0, 0, 'i'},
		{"host", 1, 0, 'h'},
		{"language", 1, 0, 'l'},
		{"passwd", 1, 0, 'P'},
		{"port", 1, 0, 'p'},
		{"set", 1, 0, 'S'},
		{"statement", 1, 0, 's'},
		{"time", 0, 0, 'T'},
		{"trace", 0, 0, 't'},
		{"user", 1, 0, 'u'},
		{"history", 0, 0, 'H'},
		{"quiet", 0, 0, 'q'},
		{"help", 0, 0, '?'},
		{0, 0, 0, 0}
	};

	toConsole = stdout;
	mark = NULL;
	mark2 = NULL;

	if ((setlen = mo_builtin_settings(&set)) == 0)
		usage(argv[0]);

	while ((c = getopt_long(argc, argv, "b:c:eil:u:p:P:qHh:s:DtT?", long_options, NULL)) != -1) {
		switch (c) {
		case 'b':
			if (*optarg == 't' || *optarg == 'T' || *optarg == '1')
				linemode = 0;
			else if (*optarg == 'f' || *optarg == 'F' || *optarg == '0')
				linemode = 1;
			else
				usage(argv[0]);
			break;
		case 'c':
			setlen = mo_add_option(&set, setlen, opt_cmdline, "config", optarg);
			break;
		case 'e':
			exit_on_error = 1;
			break;
		case 'l':
			/* accept unambiguous prefix of language */
			if (strcmp(optarg, "sql") == 0 ||
			    strcmp(optarg, "sq") == 0 ||
			    strcmp(optarg, "s") == 0) {
				language = "sql";
			} else if (strcmp(optarg, "mil") == 0 ||
				   strcmp(optarg, "mi") == 0) {
				language = "mil";
			} else if (strcmp(optarg, "mal") == 0 ||
				   strcmp(optarg, "ma") == 0) {
				language = "mal";
			} else if (strcmp(optarg, "xquery") == 0 ||
				   strcmp(optarg, "xquer") == 0 ||
				   strcmp(optarg, "xque") == 0 ||
				   strcmp(optarg, "xqu") == 0 ||
				   strcmp(optarg, "xq") == 0 ||
				   strcmp(optarg, "x") == 0) {
				language = "xquery";
			} else {
				fprintf(stderr, "language option needs to be one of sql, mil, mal, or xquery\n");
				exit(-1);
			}
			break;
		case 'u':
			guest = 0;
			user = optarg;
			break;
		case 'P':
			guest = 0;
			passwd = optarg;
			break;
		case 'i':
			interactive = 1;
			break;
		case 'h':
			host = optarg;
			break;
		case 'p':
			port = atoi(optarg);
			setlen = mo_add_option(&set, setlen, opt_cmdline, "port", optarg);
			break;
		case 's':
			command = optarg;
			break;
		case 'q':
			quiet = 1;
			break;
		case 'D':
			dodump = 1;
			break;
		case 'T':
			mark = "Timer";
			break;
		case 't':
			trace = 1;
			break;
		case 'S':{
			char *eq = strchr(optarg, '=');

			if (eq)
				*eq = 0;
			setlen = mo_add_option(&set, setlen, opt_cmdline, optarg, eq ? eq + 1 : "");
			if (eq)
				*eq = '=';
			break;
		}
		case 'H':
			save_history = 1;
			break;
		case '?':
			usage(argv[0]);
		default:
			usage(argv[0]);
		}
	}

	setlen = mo_system_config(&set, setlen);

	if (port == 0) {
		char *s = "mapi_port";
                int p = MILdefaultPort;

		if (strcmp(language, "sql") == 0) {
			s = "sql_port";
			p = SQLdefaultPort;
		} else if (strcmp(language, "xquery") == 0) {
			s = "xquery_port";
			p = XQuerydefaultPort;
		}
		if ((s = mo_find_option(set, setlen, s)) != NULL) {
			port = strtol(s, NULL, 10);
		} else {
			port = p;
		}
	}

	if (strcmp(language, "xquery") == 0 && command == NULL) {
		command = mo_find_option(set, setlen, "xquery_output");
        }

	if (host == NULL) {
		host = mo_find_option(set, setlen, "host");
		if (host == NULL)
			host = "localhost";
	}

	if (strcmp(language, "sql") == 0) {
		if (guest)
			user = "monetdb";
		else if (user == NULL)
			user = simple_prompt("User ", BUFSIZ, 1, "monetdb");
		if (guest)
			passwd = "monetdb";
		else if (passwd == NULL)
			passwd = simple_prompt("Password ", BUFSIZ, 0, "monetdb");
	}
	mid = mapi_connect(host, port, user, passwd, language);
	if (mid == NULL) {
		fprintf(stderr, "failed to allocate Mapi structure\n");
		exit(2);
	}
	if (strcmp(language, "xquery") == 0) {
		/* xquery options are passed via the command string
		   (becomes first line of query) */
		char *c = command ? command : XQuerydefaultMode;
		char *t = strstr(c, "timing-") ? "" : mark ? "timing-" : "";
		char *d = strstr(c, "debug-") ? "" : trace ? "debug-" : "";
		char *m = strstr(c, "-mapi") ? "" : "-mapi";

		command = (char*) malloc(strlen(c) + 20);
		sprintf(command, "%s%s%s%s\n", t, d, c, m);
		mapi_noexplain(mid, "!");
	}
	if (mapi_error(mid)) {
		mapi_explain(mid, stderr);
		exit(2);
	}
	if (!quiet) {
		char *motd = mapi_get_motd(mid);

		if (motd)
			printf("%s", motd);
	}
	mapi_trace(mid, trace);

	if (dodump && strcmp(language, "sql") == 0) {
		c = dump_tables(mid);
		mapi_disconnect(mid);
		return c;
	}

	c = 0;

	/* we're interactive if explicit or if no files and no -s option
	   we're also interactive if no files and the language is
	   XQuery (although in the latter case we're not really
	   interactive, we only allow reading from stdin if it's a
	   file, but that test comes later) */
	interactive = interactive ||
		(optind == argc &&
		 (command == NULL || strcmp(language, "xquery") == 0));

	/* for XQuery, doFile prefixes the query with command, so
	   don't do it here */
	if (command && strcmp(language, "xquery") != 0) {
		/* execute from command-line */
		c = doRequest(mid, command);
		command = NULL;
	}
	if (optind < argc) {
		/* execute from file(s) */
		while (optind < argc) {
			c |= doFile(mid, argv[optind], strcmp(language, "xquery") == 0);
			optind++;
		}
	}
	if (interactive) {
		/* execute from stdin */
		struct stat statb;
		char *prompt = NULL;
		char promptbuf[16];
		int interactive_stdin = 0;

		if (fstat(fileno(stdin), &statb) == 0 && S_ISCHR(statb.st_mode)) {
			interactive_stdin = 1;
		}
		if (interactive_stdin) {
			if (strcmp(language, "xquery") == 0) {
				fprintf(stderr, "XQuery cannot be used interactively\n");
				exit(1);
			}
#ifdef HAVE_LIBREADLINE
			init_readline(mid, language, save_history);
#else
			(void)save_history; /* pacify compiler */
#endif
			/* reading from terminal, prepare prompt */
			sprintf(promptbuf, "%.*s>", (int) sizeof(promptbuf) - 2, language);
			prompt = promptbuf;
		}
		if (strcmp(language, "xquery") == 0)
			c = doFile(mid, NULL, 1);
		else
			c = doFileByLines(mid, stdin, prompt, linemode, exit_on_error);
#ifdef HAVE_LIBREADLINE
		if (interactive_stdin) {
			deinit_readline();
		}
#endif
	}
	mapi_disconnect(mid);
	return c;
}
