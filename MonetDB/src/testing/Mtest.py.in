#!/usr/bin/env python

# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-2005 CWI.
# All Rights Reserved.

#TODO:
#=====
# - check all TODO's below
# - tidy -up HTML-generation by "keeping in mind" during testing,
#   which OUT/ERR differ or not and which tests were skipped.
#   dump HTML-stuff only at end
#   print an ascii summary at end, too
# - if no diffs, but warnings, say so at end
# - produce, keep & reference LOG
# - add a "grep-like" function and replace "inlined" grep
#   contains(<file>,<string>)
# - do multi-level prompting?
# - normalize all path's used
# - remove one of milM, milS

try:
    True
except NameError:
    # provide values for old Python versions
    False, True = 0, 1

import os
import sys
import fileinput
import popen2
import shutil
import re
import random
import time
import socket
import select
#import signal
#import getpass
import Mfilter
import prof
import string

F_SKIP = -1
F_OK = 0
F_WARN = 1
F_ERROR = 2

FAILURES = {
    F_SKIP  : "F_SKIP",
    F_OK    : "F_OK",
    F_WARN  : "F_WARN",
    F_ERROR : "F_ERROR"
}

CONDITIONALS = {
    # X == true   =>  @X_TRUE@='',  @X_FALSE@='#'
    # X == false  =>  @X_TRUE@='#', @X_FALSE@=''
    # MonetDB:
    'CROSS_COMPILING'  : "@CROSS_COMPILING_FALSE@",
    'DOCTOOLS'         : "@DOCTOOLS_FALSE@",
    'HAVE_JAVA'        : "@HAVE_JAVA_FALSE@",
    'HAVE_MONET5'      : "@HAVE_MONET5_FALSE@",
    'HAVE_MONET'       : "@HAVE_MONET_FALSE@",
    'HAVE_PCRE'        : "@HAVE_PCRE_FALSE@",
    'HAVE_PERL'        : "@HAVE_PERL_FALSE@",
    'HAVE_PERL_DEVEL'  : "@HAVE_PERL_DEVEL_FALSE@",
    'HAVE_PERL_SWIG'   : "@HAVE_PERL_SWIG_FALSE@",
    'HAVE_PHP'         : "@HAVE_PHP_FALSE@",
    'HAVE_PEAR'        : "@HAVE_PEAR_FALSE@",
    'HAVE_PYTHON'      : "@HAVE_PYTHON_FALSE@",
    'HAVE_PYTHON_DEVEL': "@HAVE_PYTHON_DEVEL_FALSE@",
    'HAVE_PYTHON_SWIG' : "@HAVE_PYTHON_SWIG_FALSE@",
    'HAVE_SWIG'        : "@HAVE_SWIG_FALSE@",
    'LINK_STATIC'      : "@LINK_STATIC_FALSE@",
    'NOT_WIN32'        : "@NOT_WIN32_FALSE@",
    'PROFILING'        : "@PROFILING_FALSE@",
    # SQL:
    'MONET4'           : "@MONET4_FALSE@",
    'MONET5'           : "@MONET5_FALSE@",
    'NATIVE_WIN32'     : "@NATIVE_WIN32_FALSE@",
}

# a bunch of classes to help with generating (X)HTML files
class _Encode:
    # mix-in class for encoding text and attribute values so that they
    # don't get interpreted as something else by the browser
    def encode(self, data, attr):
        map = [('&', '&amp;'),          # MUST be first
               ('<', '&lt;'),
               ('>', '&gt;'),
               (None, None),
               # following chars only translated in attr values (attr is True)
               ('"', '&quot;'),
               ('\t', '&#9;'),
               ('\n', '&#10;'),
               ('\r', '&#13;'),
               ]
        for c, tr in map:
            if c is None:
                if not attr:
                    break
                continue
            data = data.replace(c, tr)
        return data

class Element(_Encode):
    # class to represent an (X)HTML element with its attributes and
    # children

    # inline elements, we do not add newlines to the contents of these
    # elements
    inline = ['tt','i','b','big','small','em','strong','dfn','code',
              'samp','kbd','var','cite','abbr','acronym','a','img',
              'object','br','script','map','q','sub','sup','span',
              'bdo','input','select','textarea','label','button','font']
    # empty elements
    empty = ['link', 'basefont', 'br', 'area', 'img', 'param', 'hr',
             'input', 'col', 'frame', 'isindex', 'base', 'meta', ]
    xml = True                          # write XHTML instead of HTML

    def __init__(self, tag, attrdict = None, *children):
        self.tag = tag
        if attrdict is None:
            attrdict = {}
        self.attrdict = attrdict
        if children is None:
            children = []
        self.isempty = tag.lower() in self.empty
        if self.isempty:
            if children:
                raise ValueError("empty element can't have children")
            self.children = None
        else:
            self.children = list(children)

    def __str__(self):
        # string representation of the element with its children
        s = ['<%s' % self.tag]
        attrlist = self.attrdict.items()
        attrlist.sort()
        for name, value in attrlist:
            s.append(' %s="%s"' % (name, self.encode(value, True)))
        if self.children or (not self.xml and not self.isempty):
            s.append('>')
            for c in self.children:
                s.append(str(c))
            s.append('</%s>' % self.tag)
        elif self.xml:
            s.append('/>')
        else:
            s.append('>')               # empty HTML element
        return ''.join(s)

    def write(self, f, newline = False):
        # write the element with its children to a file
        # if newline is set, add newlines at strategic points
        if self.tag.lower() == 'html':
            # before we write the DOCTYPE we should really check
            # whether the document conforms...
            if self.xml:
                f.write('<!DOCTYPE html PUBLIC '
                        '"-//W3C//DTD XHTML 1.0 Transitional//EN"\n'
                        '                      '
                        '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\n')
            else:
                f.write('<!DOCTYPE html PUBLIC '
                        '"-//W3C//DTD HTML 4.01 Transitional//EN"\n'
                        '                      '
                        '"http://www.w3.org/TR/html4/loose.dtd">\n')
        inline = self.tag.lower() in self.inline
        f.write('<%s' % self.tag)
        attrlist = self.attrdict.items()
        attrlist.sort()
        for name, value in attrlist:
            f.write(' %s="%s"' % (name, self.encode(value, True)))
        if self.children or (not self.xml and not self.isempty):
            if not inline:
                for c in self.children:
                    if not isinstance(c, Element):
                        inline = True
                        break
            f.write('>')
            if newline and not inline:
                f.write('\n')
            for c in self.children:
                c.write(f, newline and not inline)
            f.write('</%s>' % self.tag)
        elif self.xml:
            f.write('/>')
        else:
            f.write('>')                # empty HTML element
        if newline:
            f.write('\n')

    def addchild(self, child):
        self.children.append(child)

    def addchildren(self, children):
        for child in children:
            self.children.append(child)

    def inschild(self, index, child):
        self.children.insert(index, child)

class Text(_Encode):
    # class to represent text in (X)HTML
    def __init__(self, text = '', raw = False):
        self.text = text
        self.raw = raw

    def __str__(self):
        if self.raw:
            return self.text
        return self.encode(self.text, False)

    def write(self, f, newline = False):
        f.write(str(self))
        if newline and not self.raw:
            f.write('\n')

class Comment:
    # class to represent an (X)HTML comment (not currently used)
    def __init__(self, text):
        self.text = text

    def __str__(self):
        return '<!--%s-->' % self.text

    def write(self, f, newline = False):
        f.write(str(self))

def _configure(str):
    # expand configure variables in str and return result
    config = [
        ('${source}', '@QXMONETDB_SOURCE@'),
        ('${build}', '@QXMONETDB_BUILD@'),

        ('${bindir}', '@QXbindir@'),
##        ('${sbindir}', '@QXsbindir@'),
        ('${libexecdir}', '@QXlibexecdir@'),
        ('${datadir}', '@QXdatadir@'),
        ('${sysconfdir}', '@QXsysconfdir@'),
##        ('${sharedstatedir}', '@QXsharedstatedir@'),
        ('${localstatedir}', '@QXlocalstatedir@'),
        ('${libdir}', '@QXlibdir@'),
        ('${includedir}', '@QXincludedir@'),
##        ('${oldincludedir}', '@QXoldincludedir@'),
        ('${infodir}', '@QXinfodir@'),
        ('${mandir}', '@QXmandir@'),
        ('${Qbindir}', '@QXbindir@'),
##        ('${Qsbindir}', '@QXsbindir@'),
        ('${Qlibexecdir}', '@QXlibexecdir@'),
        ('${Qdatadir}', '@QXdatadir@'),
        ('${Qsysconfdir}', '@QXsysconfdir@'),
##        ('${Qsharedstatedir}', '@QXsharedstatedir@'),
        ('${Qlocalstatedir}', '@QXlocalstatedir@'),
        ('${Qlibdir}', '@QXlibdir@'),
        ('${Qincludedir}', '@QXincludedir@'),
##        ('${Qoldincludedir}', '@QXoldincludedir@'),
        ('${Qinfodir}', '@QXinfodir@'),
        ('${Qmandir}', '@QXmandir@'),
        # put these at end (in this order!) for efficiency
        ('${exec_prefix}', '@QXexec_prefix@'),
        ('${Qexec_prefix}', '@QXexec_prefix@'),
        ('${prefix}', '@QXprefix@'),
        ('${Qprefix}', '@QXprefix@'),
        ]
    changed = True
    while '$' in str and changed:
        changed = False
        for key, val in config:
            nstr = str.replace(key, val)
            changed = changed or str != nstr
            str = nstr
    return str

# add dir where monet_options is installed to sys.path
# we must expand configure variables in the process
sys.path.append(_configure(os.path.join('@QXdatadir@','@PACKAGE@','python')))
import monet_options

STDOUT = sys.stdout
STDERR = sys.stdout     # err

black = 'black'                         # #000000
white = 'white'                         # #ffffff
red = 'red'                             # #ff0000
lime = 'lime'                           # #00ff00
green = '#00aa00'
darkgreen = '#005500'
orange = '#ffaa00'
stylesheet = Element('style', None, Text('''
.error   { font-weight: bold; font-style: italic; color: red; }
.warning { font-weight: bold; color: orange; }
.good    {  }
.header  { font-family: helvetica, arial; text-align: center; }
.black   { color: black; }
'''))

TIMES = []

random.seed(time.time())

def Usage (options) :
    try:
        monet_options.usage(options, '%s [options] ( [<dir>] [<tests>] | [<dirs>] )' % THISFILE)
    except monet_options.Error:
        pass

    sys.stderr.write("""
 <dir>   : if present, %(prog)s behaves as if called in <dir>
 <tests> : list of tests to be processed; if none or 'All' is given,
            all tests listed in 'Tests/All' are processed
            (defaults to 'All' if -r is used)
 <dirs>  : list of directories to be processed; if present, %(prog)s
            processes 'All' tests in each directory of <dirs>; -r may be used also

         See  %(readme)s
         for details about  %(prog)s.
""" % {'prog': THISFILE,
       'readme': os.path.join(GetMonetConfig('--source'),'src','testing','README'),
       })
    raise

### Usage () #

#TODO:
#class TimeoutError:
#       def __init__(self, text):
#               self.text = text
#       def __str__(self):
#               return self.text
#
#def AlarmHandler(signum, frame) :
#       raise TimeoutError, "Timeout"
#### AlarmHandler(signum, frame) #

def ErrMsg(TEXT) :
    STDOUT.flush()
    STDERR.write("\n"+THISFILE+":  ERROR:  %s\n\n" % TEXT)
    STDERR.flush()
### ErrMsg(TEXT) #

def ErrXit(TEXT) :
    ErrMsg(TEXT)
    sys.exit(1)
### ErrXit(TEXT) #

def Warn(TEXT) :
    try:
        STDOUT.flush()
    except IOError:
        pass
    try:
        STDERR.write("\n"+THISFILE+"  Warning:  %s\n\n" % TEXT)
        STDERR.flush()
    except IOError:
        pass
### Warn(TEXT) #

def startswith(str,pre) :
    return str[:len(pre)] == pre
### startswith(str,pre) #

import urllib
##def path(str) :
##    return str.replace('/', os.sep)
path = urllib.url2pathname
### path(str) #

##def url(str) :
##    return str.replace(os.sep, '/')
url = urllib.pathname2url
### url(str) #

def try_open(path, mode) :
    try:
        f = open(path, mode)
    except IOError, (IOerrNo, IOerrStr):
        Warn("Opening file '%s' in mode '%s' failed with #%d: '%s'." % (path, mode, IOerrNo, IOerrStr))
        f = None
    return f
###  try_open(path, mode) #

def CreateHtmlIndex (env, *body) :
    TSTDIR=env['TSTDIR']
    TSTTRGBASE=env['TSTTRGBASE']
    TSTTRGDIR=env['TSTTRGDIR']

    if TSTDIR:
        INDEX=".index"
    else:
        INDEX="index"

    if body:
        BACK = os.getcwd()
        os.chdir(TSTTRGDIR)

        if TSTDIR:
            header = Text(TSTDIR)
            if URLPREFIX:
                header = Element('a',
                                 {'href': '%s%s/%s' % (URLPREFIX, url(TSTDIR), TSTSUFF),
                                  'target': '%s%s_%s_body' % (URLSUFFIX_D, OSVER, TSTDIR),
                                  'class': 'black'},
                                 header)
        else:
            header = Element('span', {'class': 'black'},
                             Text(OSVER))
        tr = Element('tr', {},
                     Element('th', {'class': 'header'},
                             header))
        tr.addchildren(body)
        html = Element('html', {},
                       Element('head', {},
                               Element('title', {},
                                       Text(HTMLTITLE)),
                               stylesheet),
                       Element('body',
                               {'bgcolor': white,
                                'text': black,
                                'link': green,
                                'vlink': darkgreen,
                                'alink': lime},
                               Element('center', {},
                                       Element('table',
                                               {'align': 'abscenter',
                                                'border': '1',
                                                'cellspacing': '0',
                                                'cellpadding': '3'},
                                               tr))))
        f = open(INDEX+".head.html","w")
        html.write(f, True)
        f.close()

        if TSTDIR:
            ROWS="72"
        else:
            ROWS="54"
        html = Element('html', {},
                       Element('head', {},
                               Element('title', {}, Text(HTMLTITLE))),
                       Element('frameset',
                               {'rows': '%s,*' % ROWS,
                                'frameborder': 'yes',
                                'border': '1',
                                'bordercolor': white,
                                'marginwidth': '0',
                                'marginheight': '0'},
                               Element('frame',
                                       {'src': '%s.head.html' % INDEX,
                                        'scrolling': 'auto',
                                        'name': '%s_%s_head' % (OSVER, TSTDIR),
                                        'frameborder': 'yes',
                                        'bordercolor': white,
                                        'marginwidth': '0',
                                        'marginheight': '0'}),
                               Element('frame',
                                       {'src': url(env['_'+TSTDIR+'_BODY_'][0]),
                                        'scrolling': 'auto',
                                        'name': '%s_%s_body' % (OSVER, TSTDIR),
                                        'frameborder': 'yes',
                                        'bordercolor': white,
                                        'marginwidth': '0',
                                        'marginheight': '0'})))
        f = open(INDEX+".html","w")
        html.write(f, True)
        f.close()
        env['_'+TSTDIR+'_BODY_'] = ["",0]
        os.chdir(BACK)
### CreateHtmlIndex (env, *body) #

def CreateTstWhatXhtml (env, TST, stableWHAT, EXT) :
    WHAT = stableWHAT[7:11]
    TSTDIR    = env['TSTDIR']
    TSTSRCDIR = env['TSTSRCDIR']

    testT = re.compile("^/"+TST+EXT+"/([^/]*)/", re.MULTILINE)
    testS = re.compile("^/"+TST+stableWHAT+"/([^/]*)/", re.MULTILINE)
    REVt="?"
    REVs="?"
    entries = os.path.join(TSTSRCDIR,"CVS","Entries")
    if os.path.isfile(entries):
        for l in fileinput.input(entries):
            mT = testT.match(l)
            if mT:
                REVt=mT.group(1)
            mS = testS.match(l)
            if mS:
                REVs=mS.group(1)
    l = ''
    for l in fileinput.input(TST+WHAT+".diff.html"):
        pass
    if   l[:14] == '<!--NoDiffs-->':
        diffclass = 'good'
        difftext = 'No differences'
    elif l[:17] == '<!--MinorDiffs-->':
        diffclass = 'warning'
        difftext = 'Minor differences'
    elif l[:17] == '<!--MajorDiffs-->':
        diffclass = 'error'
        difftext = 'Major differences'
    else:
        Warn("Unexpected last line in %s:\n%s" % (TST+WHAT+".diff.html",l))
        f = open(TST+WHAT+".diff.html","a")
        f.write("\n<!--MajorDiffs-->\n")
        f.close()
        diffclass = 'error'
        difftext = 'Major differences'
    SYSTEM = OSVER+":"
    if COMPILER:
        SYSTEM = COMPILER+", "+SYSTEM

    xWHAT = WHAT
    if THISFILE == "Mprofile.py":
        test = re.compile("^"+TST+"(_[sp][0-9][0-9])?\..*mil.*\.prof\.diff\.html$", re.MULTILINE)
        d = os.listdir(os.getcwd())
        d.sort()
        rows = ""
        frames = ""
        frameset = Element('frameset',
                           {'frameborder': 'yes',
                            'border': '1',
                            'bordercolor': white,
                            'marginwidth': '0',
                            'marginheight': '0'})
        for f in d:
            if test.match(f):
                rows = rows+",*"
                frameset.addchild(Element('frame',
                                          {'src': f,
                                           'scrolling': 'auto',
                                           'frameborder': 'yes',
                                           'bordercolor': white,
                                           'marginwidth': '0',
                                           'marginheight': '0'}))
        if rows:
            xWHAT = ".prof-"+WHAT[1:]
            rows = "*"+rows
            frameset.inschild(0, Element('frame',
                                         {'src': TST+WHAT+'.diff.html',
                                          'scrolling': 'auto',
                                          'frameborder': 'yes',
                                          'bordercolor': white,
                                          'marginwidth': '0',
                                          'marginheight': '0'}))
            frameset.attrdict['rows'] = rows
            html = Element('html', {},
                           Element('head', {}.
                                   Element('title', {}, Text(HTMLTITLE))),
                           frameset)
            f = open(TST+xWHAT+".diff.html","w")
            html.write(f, True)
            f.close()

    html = Element('html', {},
                   Element('head', {},
                           Element('title', {}, Text(HTMLTITLE)),
                           stylesheet),
                   Element('frameset', {'rows': '42,*',
                                        'frameborder': 'yes',
                                        'border': '1',
                                        'bordercolor': white,
                                        'marginwidth': '0',
                                        'marginheight': '0'},
                           Element('frame',
                                   {'src': '.%s%s.head.html' % (TST, WHAT),
                                    'scrolling': 'auto',
                                    'name': '%s_%s_%s_%s_head' % (OSVER, TSTDIR, TST, WHAT[1:]),
                                    'frameborder': 'yes',
                                    'bordercolor': white,
                                    'marginwidth': '0',
                                    'marginheight': '0'}),
                           Element('frame',
                                   {'src': '%s%s.diff.html' % (TST, xWHAT),
                                    'scrolling': 'auto',
                                    'name': '%s_%s_%s_%s_body' % (OSVER, TSTDIR, TST, WHAT[1:]),
                                    'frameborder': 'yes',
                                    'bordercolor': white,
                                    'marginwidth': '0',
                                    'marginheight': '0'})))
    f = open(".%s%s.html" % (TST, WHAT),"w")
    html.write(f, True)
    f.close()
    f = open(".%s%s.head.html" % (TST, WHAT),"w")
    target = '%s_%s_%s_%s_body' % (OSVER, TSTDIR, TST, WHAT[1:])
    cvs = Text('cvs')
    if URLPREFIX:
        cvs = Element('a', {'href': '%s%s/%s%s' % (URLPREFIX, url(TSTDIR), TSTSUFF, URLSUFFIX_D),
                            'target': target},
                      cvs)
    text = Element('div', {'class': 'header'},
                   Text(SYSTEM),
                   Text(' '),
                   Element('a', {'href': '%s%s.diff.html' % (TST, xWHAT),
                                 'target': target,
                                 'class': diffclass},
                           Text(difftext)),
                   Text(' between '),
                   Element('a', {'href': '%s%s' % (TST, stableWHAT),
                                 'target': target},
                           Text('%s (r%s)' % (stableWHAT[1:], REVs))),
                   Text(' and '),
                   Element('a', {'href': '%s.test%s' % (TST, WHAT),
                                 'target': target},
                           Text('test%s' % WHAT)),
                   Text(' of '),
                   Element('a', {'href': TST + EXT, 'target': target},
                           Text('%s%s (r%s)' % (TST, EXT, REVt))),
                   Text(' in '),
                   Element('a', {'href': './', 'target': target},
                           Text(TSTDIR)),
                   Text(' ('),
                   cvs,
                   Text(', '),
                   Element('a', {'href': url(env['RELSRCDIR']),
                                 'target': target},
                           Text('src')))
    for d in env['RELBLDDIR'], os.path.dirname(env['RELBLDDIR']), env['RELBLDBASE']:
        if os.path.isdir(d):
            text.addchild(Text(', '))
            text.addchild(Element('a', {'href': url(d), 'target': target},
                                  Text('BLD')))
    text.addchild(Text(')'))
    html = Element('html', {},
                   Element('head', {},
                           Element('title', {},
                                   Text(HTMLTITLE)),
                           stylesheet),
                   Element('body',
                           {'bgcolor': white,
                            'text': black,
                            'link': green,
                            'vlink': darkgreen,
                            'alink': lime},
                           text))

    html.write(f, True)
    f.close()
#TODO?
# <A HREF='.Mtest.Slave.Log.OutErr' TARGET='"""+OSVER+"_"+TSTDIR+"_"+TST+"_"+WHAT[1:]+"""_body'>LOG</A>).
### CreateTstWhatXhtml (env, TST, stableWHAT, EXT) #

def CreateSrcIndex (env, TST, EXT) :
    TSTSRCDIR = env['TSTSRCDIR']
    TSTDIR    = env['TSTDIR']

    if URLPREFIX:
        framesrc = '%s%s/%s/%s%s%s' % (URLPREFIX, url(TSTDIR), TSTSUFF, TST, EXT, URLSUFFIX_F)
    else:
        f = open("."+TST+".nosrc.index.html","w")
        html = Element('html', {},
                       Element('head', {},
                               Element('title', {},
                                       Text(HTMLTITLE)),
                               stylesheet),
                       Element('body',
                               {'bgcolor': white,
                                'text': black,
                                'link': green,
                                'vlink': darkgreen,
                                'alink': lime},
                               Element('center', {},
                                       Text('no source available'))))
        framesrc = '.%s.nosrc.index.html' % TST
    html = Element('html', {},
                   Element('head', {},
                           Element('title', {}, Text(HTMLTITLE))),
                   Element('frameset',
                           {'rows': '54,*',
                            'frameborder': 'yes',
                            'border': '1',
                            'bordercolor': white,
                            'marginwidth': '0',
                            'marginheight': '0'},
                           Element('frame',
                                   {'src': '.%s.src.index.head.html' % TST,
                                    'scrolling': 'auto',
                                    'name': '%s_%s_%s_head' % (OSVER, TSTDIR, TST),
                                    'frameborder': 'yes',
                                    'bordercolor': white,
                                    'marginwidth': '0',
                                    'marginheight': '0'}),
                           Element('frame',
                                   {'src': framesrc,
                                    'scrolling': 'auto',
                                    'name': '%s_%s_%s_body' % (OSVER, TSTDIR, TST),
                                    'frameborder': 'yes',
                                    'bordercolor': white,
                                    'marginwidth': '0',
                                    'marginheight': '0'})))
    f = open("."+TST+".src.index.html","w")
    html.write(f, True)
    f.close()

    tr = Element('tr', {},
                 Element('th', {'class': 'header'},
                         Text(TST)))
    for s in os.listdir(TSTSRCDIR):
        if len(s) >= len(TST)  and  s[:len(TST)] == TST:
            slink = Text(s)
            if URLPREFIX:
                slink = Element('a',
                                {'href': '%s%s/%s/%s%s' % (URLPREFIX, url(TSTDIR), TSTSUFF, s, URLSUFFIX_F),
                                 'target': '%s_%s_%s_body' % (OSVER, TSTDIR, TST)},
                                slink)
            tr.addchild(Element('td', {'class': 'header'},
                                slink))
    html = Element('html', {},
                   Element('head', {},
                           Element('title', {},
                                   Text(HTMLTITLE)),
                           stylesheet),
                   Element('body',
                           {'bgcolor': white,
                            'text': black,
                            'link': green,
                            'vlink': darkgreen,
                            'alink': lime},
                           Element('center', {},
                                   Element('table',
                                           {'align': 'abscenter',
                                            'border': '1',
                                            'cellspacing': '0',
                                            'cellpadding': '3'},
                                           tr))))
    f = open("."+TST+".src.index.head.html","w")
    html.write(f, True)
    f.close()
### CreateSrcIndex (env, TST, EXT) #

def AddHref (href, target, linktext, diff) :
    if   diff == 2:
        klass = 'error'
    elif diff == 1:
        klass = 'warning'
    else:
        klass = 'good'
    a = Element('a', {'href': href, 'target': target, 'class': klass},
                Text(linktext))
    if klass == 'good':
        return [Text('('), a, Text(')')]
    else:
        return [a]
### AddHref (TSTDIR, TST, WHAT, diff) #

def AddTstToHtmlIndex (env, TST, STABLEout, STABLEerr, EXT) :
    TSTDIR = env['TSTDIR']

    CreateTstWhatXhtml(env, TST, STABLEout, EXT)
    CreateTstWhatXhtml(env, TST, STABLEerr, EXT)

    for l in fileinput.input(TST+".out.diff.html"):
        pass
    if   l[:14] == '<!--NoDiffs-->':
        o = 0
    elif l[:17] == '<!--MinorDiffs-->':
        o = 1
    elif l[:17] == '<!--MajorDiffs-->':
        o = 2
    else:
        Warn("Unexpected last line in %s:\n%s" % (TST+".out.diff.html",l))
        ff = open(TST+WHAT+".out.diff.html","a")
        ff.write("\n<!--MajorDiffs-->\n")
        ff.close()
        o = 2
    for l in fileinput.input(TST+".err.diff.html"):
        pass
    if   l[:14] == '<!--NoDiffs-->':
        e = 0
    elif l[:17] == '<!--MinorDiffs-->':
        e = 1
    elif l[:17] == '<!--MajorDiffs-->':
        e = 2
    else:
        Warn("Unexpected last line in %s:\n%s" % (TST+".err.diff.html",l))
        ff = open(TST+WHAT+".err.diff.html","a")
        ff.write("\n<!--MajorDiffs-->\n")
        ff.close()
        e = 2
    if o == 2 or e == 2:
        tstclass = 'error'
    elif o == 1 or e == 1:
        tstclass = 'warning'
    else:
        tstclass = 'good'

    td = Element('td', {'class': 'header'},
                 Element('a', {'href': '.%s.src.index.html' % TST,
                               'target': '%s_%s_body' % (OSVER, TSTDIR),
                               'class': tstclass},
                         Text(TST)),
                 Element('br'))
    td.addchildren(AddHref('.%s%s.html' % (TST, '.out'),
                           '%s_%s_body' % (OSVER, TSTDIR),
                           'out', o))
    td.addchild(Text("&nbsp;|&nbsp;", raw = True))
    td.addchildren(AddHref('.%s%s.html' % (TST, '.err'),
                           '%s_%s_body' % (OSVER, TSTDIR),
                           'err', e))
    if not env.has_key('_'+TSTDIR+'_BODY_')  or  \
       not env['_'+TSTDIR+'_BODY_'][0]  or  \
       ( (not env['_'+TSTDIR+'_BODY_'][1])  and  (o or e) ):
        if e and not o:
            env['_'+TSTDIR+'_BODY_'] = ["."+TST+".err.html", e]
        else:
            env['_'+TSTDIR+'_BODY_'] = ["."+TST+".out.html", o]

    CreateSrcIndex(env, TST, EXT)

    return o, e, td
### AddTstToHtmlIndex (env, TST, STABLEout, STABLEerr, EXT) #

def AddSubToHtmlIndex (env, TSTDIR, diff) :
    TSTTRGBASE = env['TSTTRGBASE']
    TSTPREF = env['TSTPREF']

    td = Element('td', {'class': 'header'})
    td.addchildren(AddHref('%s/.index.html' % url(TSTDIR), '%s__body' % OSVER,
                           TSTDIR, diff))
    if not env.has_key('__BODY_')  or  \
       not env['__BODY_'][0]  or  \
       ( (not env['__BODY_'][1])  and  diff ):
        env['__BODY_'] = [TSTDIR+"/.index.html", diff]
    return td
### AddSubToHtmlIndex (env, TSTDIR, diff) #

def SkipTest(env, TST, EXT, REASON) :
    TSTDIR = env['TSTDIR']
    TEXT = "Skipping test %s%s %s" % (TST, EXT, REASON)
    Warn(TEXT)
    f = open("."+TST+".SKIPPED","w")
    f.write("\n%s  Warning:  %s\n\n" % (THISFILE, TEXT))
    f.close()
    target = '%s_%s_body' % (OSVER, TSTDIR)
    td = Element('td', {'class': 'header'},
                 Element('a', {'href': '.%s.src.index.html' % TST,
                               'target': target,
                               'class': 'black'},
                         Text(TST)),
                 Element('br'),
                 Element('a', {'href': '.%s.SKIPPED' % TST,
                               'target': target},
                         Text('(skipped)')))
    if not env.has_key('_'+TSTDIR+'_BODY_')  or  \
       not env['_'+TSTDIR+'_BODY_'][0]  or  \
       not env['_'+TSTDIR+'_BODY_'][1]:
        env['_'+TSTDIR+'_BODY_'] = ["."+TST+".SKIPPED", 1]
    CreateSrcIndex(env, TST, EXT)
    return td
### SkipTest(env, TST, EXT, REASON) #

def find_test_dirs(thisdir) :
    testdirs = []
    thisdir = os.path.abspath(thisdir)
    dirnme = os.path.basename(thisdir)
    dirlst = os.listdir(thisdir)
    if dirnme == TSTSUFF  and  "All" in dirlst  and  os.path.isfile(os.path.join(thisdir,"All")):
        testdirs.append(os.path.dirname(thisdir))
    for d in dirlst:
        d = os.path.join(thisdir,d)
        if os.path.isdir(d):
            testdirs = testdirs + find_test_dirs(d)
    return testdirs
### find_test_dirs(thisdir) #

def PerformDir(env, testdir, testlist, BusyPorts) :
    td = 0
    elem = None
    FdOut = -1
    FdErr = -1
    TSTSRCBASE = env['TSTSRCBASE']
    TSTPREF = env['TSTPREF']
    if testdir == TSTSRCBASE:
        TSTDIR = os.curdir
    else:
        TSTDIR = testdir[len(TSTSRCBASE+os.sep):]
    TSTSRCDIR = os.path.normpath(os.path.join(testdir,TSTSUFF))
    TSTBLDDIR = os.path.normpath(os.path.join(env['TSTBLDBASE'],TSTDIR,TSTSUFF))
    TSTTRGDIR = os.path.normpath(os.path.join(env['TSTTRGBASE'],TSTPREF,TSTDIR))

    if THISFILE in ["Mtest.py", "Mprofile.py"]:
        TSTDB = TSTPREF+"_"+TSTDIR.replace(os.sep, '_')
    else: # THISFILE == "Mapprove.py"
        TSTDB = ""

    if testlist:
        tl = []
        for tst in testlist:
            tl.append((tst,None))
        testlist = tl
    else:
        for tc in fileinput.input(os.path.join(TSTSRCDIR,"All")):
            tc = tc.strip()
            if tc  and  tc[0] != "#":
                if tc.find('?') > -1:
                    cond,tst = tc.split('?')
                else:
                    cond,tst = None,tc
                testlist.append((tst,cond))
    if not testlist:
        Warn("No tests found in '"+TSTSRCDIR+"`; skipping directory!")
        return td, elem

    env['TSTDB']     = TSTDB
    env['TSTDIR']    = TSTDIR
    env['TSTSRCDIR'] = TSTSRCDIR
    env['TSTBLDDIR'] = TSTBLDDIR
    env['TSTTRGDIR'] = TSTTRGDIR
    env['RELSRCDIR'] = os.path.join(((os.pardir+os.sep)*(len(TSTDIR.split(os.sep))+1))+env['RELSRCBASE'],TSTDIR,TSTSUFF)
    env['RELBLDDIR'] = os.path.join(((os.pardir+os.sep)*(len(TSTDIR.split(os.sep))+1))+env['RELBLDBASE'],TSTDIR,TSTSUFF)
    os.environ['TSTDB']     = TSTDB
    os.environ['TSTDIR']    = TSTDIR
    os.environ['TSTSRCDIR'] = TSTSRCDIR
    os.environ['TSTBLDDIR'] = TSTBLDDIR
    os.environ['TSTTRGDIR'] = TSTTRGDIR
    os.environ['RELSRCDIR'] = env['RELSRCDIR']
    os.environ['RELBLDDIR'] = env['RELBLDDIR']

    #STDERR.flush()
    #for v in 'RELSRCDIR', 'RELBLDDIR':
    #       print v+" = "+str(env[v])
    #STDOUT.flush()

    if THISFILE in ["Mtest.py", "Mprofile.py"]:
        for LogDBvar in 'GDK_DBFARM', 'SQL_LOGDIR':
            LogDBdir = os.path.join(env[LogDBvar],TSTDB)
            if LogDBvar == 'SQL_LOGDIR':
                LogDBtxt = "log directory for "
            else:
                LogDBtxt = ""
            if os.path.exists(LogDBdir):
                try:
                    shutil.rmtree(LogDBdir)
                except:
                    Warn(LogDBtxt+"database '"+TSTDB+"` exists, but destroying it failed; skipping tests in '"+TSTSRCDIR+"`!")
                    #TODO:
                    # add "something" to HTML output
                    return td, elem
            try:
                os.makedirs(LogDBdir)
            except:
                Warn("creating "+LogDBtxt+"database '"+TSTDB+" failed; skipping tests in '"+TSTSRCDIR+"`!")
                #TODO:
                # add "something" to HTML output
                return td, elem
        if not os.path.exists(TSTTRGDIR):
            #TODO: set mode to umask
            os.makedirs(TSTTRGDIR)

        body = []
        for TST,COND in testlist:
            os.environ['TST'] = TST
            tt, FtOut, FtErr, bodyline = RunTest(env, TST, BusyPorts, COND)
            if tt:
                t = "%7.3f" % tt
            else:
                t = '-.---'
            TIMES.append([TSTDIR,TST,t,FtOut,FtErr])
            td = td + tt
            FdOut = max(FdOut,FtOut)
            FdErr = max(FdErr,FtErr)
            if bodyline is not None:
                body.append(bodyline)
        TIMES.append([TSTDIR,'',"%7.3f" % td,FdOut,FdErr])

        if THISFILE in ["Mtest.py", "Mprofile.py"]:
            CreateHtmlIndex(env, *body)
            elem = AddSubToHtmlIndex(env, TSTDIR, max(FdOut,FdErr))

        # HACK: remove large data-/input- files to save disk space
        for f in 'tcpip2.init.bat', 'ascii_io.4MBload', 'test100k', 'no.145.k100_unique1', 'test_00.k100_unique1', 'VOCrightpages.xml', 'VOCleftpages.xml':
            p = os.path.join(TSTTRGDIR,f)
            if os.path.isfile(p):
                os.remove(p)

    else: # THISFILE == "Mapprove.py"
        if not os.path.exists(TSTTRGDIR):
            Warn("Output directory '"+TSTTRGDIR+"` missing; skipping directory!")
            return td, elem

        for TST,COND in testlist:
            td = td + ApproveOutput(env, TST)

    return td, elem
### PerformDir(env, testdir, testlist, BusyPorts) #

def ApproveOutput (env, TST) :
    sem = 0
    TSTDB = env['TSTDB']
    TSTDIR  = env['TSTDIR']
    TSTSRCDIR = env['TSTSRCDIR']
    TSTTRGDIR = env['TSTTRGDIR']
    os.chdir(TSTSRCDIR)
    EXTENSIONS = par['EXTENSION']
    FORCE = par['FORCE']

#       filter = re.compile( "^!WARNING: TCPlisten\([0-9]*\): stopped.$"        "|"
#                            "^!WARNING: TCPepilogue: terminate [01] listeners$", re.MULTILINE)

    for WHAT in EXTENSIONS:
        testOUTPUT = os.path.join(TSTTRGDIR,TST+".test."+WHAT)
        TSTSRCDIRTST = os.path.join(TSTSRCDIR,TST)
        stableOUT  = TSTSRCDIRTST+".stable."+WHAT
        if par['SYSTEM']:
            SYSTEM = par['SYSTEM']
            stableOUTPUT = stableOUT+SYSTEM
        else:
            if WHAT == 'out':
                w = 0
            else: # WHAT == 'err'
                w = 1
            stableOUTPUT = TSTSRCDIRTST+StableOutErr(env,par,TSTSRCDIRTST,OS,RELEASE)[w]
            SYSTEM = stableOUTPUT.split(WHAT)[-1]

        if os.path.isfile(testOUTPUT):
#                       print "Approving "+testOUTPUT+" -> "+stableOUTPUT
            if os.path.isfile(stableOUTPUT):
                oc = 'overwriting old'
            else:
                oc = 'creating new'
                if os.path.isfile(stableOUT):
                    shutil.copy(stableOUT,stableOUTPUT)
                else:
                    open(stableOUTPUT,"w").close()

            for d in ('TMPDIR', 'TMP', 'TEMP'):
                if os.environ.has_key(d):
                    patch = os.environ[d]
                    break
            else:
                patch = os.path.join(os.sep, 'tmp')
            patch = os.path.join(patch, "%s.patch-%s" % (os.path.basename(stableOUTPUT), str(os.getpid())))
            os.system('diff -Bb "-I^[#=]" -U0 "%s" "%s" > "%s"' % (stableOUTPUT,testOUTPUT,patch+".0"))
            if os.path.getsize(patch+".0"):
                print "Approving  %s  ->  stable.%s%s   (%s file)" % (os.path.join(TSTDIR,TST+".test."+WHAT), WHAT, SYSTEM, oc)

                f = open(patch+".1", "w")
                for l in fileinput.input(patch+".0"):
                    if len(l) < 2  or  \
                       ( l[:2] not in ['+!','+=']  and  l[:10] != '+ERROR = !'  and  \
                         l[:8] != '+ERROR: '  and  l[:10] != '+WARNING: ' ) :        # or  filter.match(ln):
                        f.write(l)
                    else:
                        if FORCE:
                            f.write(l)
                            as = 'Approving'
                        else:
                            f.write(l[:1]+'\n')
                            as = 'Skipping'
                        Warn('%s new (error) message: "%s"' % (as,l.replace(os.linesep, '')))
                        sem = 1
                f.flush()
                f.close()
                shutil.copy(stableOUTPUT,stableOUTPUT+".ORG")
                os.system('patch "%s" "%s"' % (stableOUTPUT,patch+".1"))
                os.system('diff -u "%s" "%s" > "%s"' % (stableOUTPUT+".ORG",stableOUTPUT,patch))
                os.remove(stableOUTPUT+".ORG")
                os.remove(patch+".1")
            else:
                print "No differences detected between  %s and  stable.%s%s  that are not ignored by Mtest.py." % (os.path.join(TSTDIR,TST+".test."+WHAT), WHAT, SYSTEM)
            os.remove(patch+".0")

            thefile = os.path.split(stableOUTPUT)[1]
            dir,file = os.path.split(stableOUT)
            test = re.compile('^%s.*$' % re.escape(file))
            list = []
            for f in os.listdir(dir or os.curdir):
                if f != thefile and test.match(f):
                    list.append(f)
            if len(list) > 0:
                Warn('There are other (specific) stable outputs for test  %s:\n  %s' % (os.path.join(TSTDIR,'Tests',TST), str(list)))
                STDERR.write('  To propagate the changes that were just made in  %s\n' % os.path.join(TSTDIR,'Tests',thefile))
                STDERR.write('  to the other (specific) stable outputs,\n')
                STDERR.write('  simply apply the patch in  %s  to them.\n\n' % patch)
                STDERR.flush()
        else:
            Warn("Output file missing: '"+testOUTPUT+"`; skipping test!")
    return sem
### ApproveOutput (env, TST) #

def isexecutable(TST) :
    if   os.name == "nt":
        for ext in ".exe", ".com", ".bat", ".cmd":
            if os.path.isfile(TST+ext) or os.path.isfile(TST+ext+".src"):
                return [ 1, ext ]
    elif os.name == "posix":
        #TODO:
        # check with "file", and set executable
        if os.path.isfile(TST)  and  os.access(TST,os.X_OK):
            return [ 1, "" ]
        if os.path.isfile(TST+".src")  and  os.access(TST+".src",os.X_OK):
            return [ 1, "" ]
    #TODO:
    #else:
        # ???
    return [ 0, "" ]
### isexecutable(TST) #

def GetBitsAndOIDsAndModsAndStatic(env) :
    rtrn = 0
    TSTPREF = env['TSTPREF']
    cmd = '%s%s --dbname=%s' % (env['exe']['Mtimeout'][1], env['exe']['Mserver'][1], TSTPREF)
    pOut,pIn,pErr = popen2.popen3(cmd)
    if env['VERSION'] >= 49900:
        pIn.write('''\
            clients.quit();
        ''')
    else:
        pIn.write('''\
            help("kunion");
            {
                # print a list of all modules found
                # "Modules: mod1, mod2, ..."
                var MODs := kunion(bat("monet_mod_nme").reverse().mark(oid(nil)),view_modules().reverse().mark(oid(nil))).kunique();
                printf("\\nModules: ");
                var x := "";
                MODs@batloop(){
                    printf("%s\'%s\'",x,$h);
                    x:=",";
                }
                printf("\\n");
            }
            quit();
        ''')
    ##module("NoModule");
    try:
        pIn.close()
    except IOError, (IOerrNo, IOerrStr):
        Warn("Closing input pipe in GetBitsAndOIDsAndModsAndStatic failed with #%d: '%s'." % (IOerrNo, IOerrStr))
    qOut, qErr = ReadMultiple([pOut, pErr])
    env['TST_BITS'] = ""
    env['TST_OIDS'] = ""
    env['TST_MODS'] = []
    env['TST_STATIC'] = ""
    if qOut:
        tbs = re.compile("^# Compiled for .*/([63][42]bit) with ([63][42])bit OIDs; (.*) linked", re.MULTILINE)
        tm = re.compile("^Modules: (.*)$", re.MULTILINE)
        #ts = re.compile("^!ERROR: DL_open: library not found \(STATIC\).$", re.MULTILINE)
        for l in qOut.split('\n'):
            bs = tbs.match(l)
            if bs:
                env['TST_BITS'] = bs.group(1)
                os.environ['TST_BITS'] = env['TST_BITS']
                env['TST_OIDS'] = "oid" + bs.group(2)
                os.environ['TST_OIDS'] = env['TST_OIDS']
                if bs.group(3) == "statically":
                    env['TST_STATIC'] = "STATIC"
                    os.environ['TST_STATIC'] = env['TST_STATIC']
            m = tm.match(l)
            if m:
                env['TST_MODS'] = eval(m.group(1))
            #s = ts.match(l)
            #if s:
            #       env['TST_STATIC'] = "1"
            #       os.environ['TST_STATIC'] = env['TST_STATIC']
        if not env['TST_BITS']:
            ErrMsg("Checking for Bits failed!")
        if not env['TST_OIDS']:
            ErrMsg("Checking for OIDs failed!")
        if not env['TST_MODS']:
            if env['VERSION'] >= 49900:
                Warn("Monet5: Check, whether required modules do exist, is not possible, yet!")
                env['TST_MODS'].append("")
            else:
                ErrMsg("Checking for Modules failed!")
        if not env['TST_BITS'] or not env['TST_OIDS'] or not env['TST_MODS']:
            STDERR.write(cmd + "\n\n")
            STDERR.write(qOut)
            STDERR.write("\n")
            STDERR.write(qErr)
            STDERR.write("\n")
            STDERR.flush()
            rtrn = 1
    else:
        rtrn = 1
        ErrMsg("No output from Mserver when checking for Bits, OIDs & Modules!?")
        if qErr:
            STDERR.write(cmd + "\n\n")
            STDERR.write(qErr)
            STDERR.write("\n")
            STDERR.flush()
    os.environ['TST_MODS'] = str(env['TST_MODS'])
    return rtrn
### GetBitsAndOIDsAndModsAndStatic(env) #

def CheckMods(env, TST, SERVER, CALL) :
    missing = []
    if env['VERSION'] >= 49900:
        return missing
    if os.path.isfile(TST+".modules"):
        for m in fileinput.input(TST+".modules"):
            m = m.strip()
            if m  and  m[0] != "#"  and  m not in env['TST_MODS']:
                missing.append(m)
    if SERVER == "MAPI":
        for m in "streams", "mapi":
            if m not in env['TST_MODS']:
                missing.append(m)
    if SERVER == "SQL":
        for m in env['SQL_SERVER'], "streams", "ascii_io", "monettime", "alarm", "xtables", "aggrX3", "blob", "txtsim", "mmath", "mkey", "bat_arith", "pcre":
            if m not in env['TST_MODS']:
                missing.append(m)
    if SERVER == "XQUERY":
        for m in "pathfinder", "pf_support", "ascii_io", "alarm", "malalgebra", "aggrX3", "xtables", "mapi":
            if m not in env['TST_MODS']:
                missing.append(m)
    if CALL in ["x100", "x100Xs"]:
        for m in "amdb", "storage":
            if m not in env['TST_MODS']:
                missing.append(m)
    return missing
### CheckMods(env, TST, SERVER, CALL) #

def CheckBATs(env, TST, TSTDB) :
    missing = []

    if env['VERSION'] >= 49900:
        # Warn("Monet5: Check, whether required BATs do exist, is not possible, yet!")
        return missing

    cmd = '%s%s --dbname=%s' % (env['exe']['Mtimeout'][1], env['exe']['Mserver'][1], TSTDB)
    pOut,pIn,pErr = popen2.popen3(cmd)
    pIn.write('''\
        {
            # print a list of all persistent BATs
            # "BATs: bat1, bat2, ..."
            var BATs := view_bbp_name();
            printf("\\nBATs: ");
            var x := "";
            BATs@batloop(){
                printf("%s\'%s\'",x,$t);
                x:=",";
            }
            printf("\\n");
        }
        quit();
    ''')
    try:
        pIn.close()
    except IOError, (IOerrNo, IOerrStr):
        Warn("Closing input pipe in CheckBATs failed with #%d: '%s'." % (IOerrNo, IOerrStr))
    qOut, qErr = ReadMultiple([pOut, pErr])
    TST_BATS = []
    if qOut:
        tb = re.compile("^BATs: (.*)$", re.MULTILINE)
        for l in qOut.split('\n'):
            b = tb.match(l)
            if b:
                TST_BATS = eval(b.group(1))
    else:
        Warn("No output from Mserver when checking for Bats!?")
        if qErr:
            STDERR.write(cmd + "\n\n")
            STDERR.write(qErr)
            STDERR.write("\n")
            STDERR.flush()

    if os.path.isfile(TST+".BATs"):
        for b in fileinput.input(TST+".BATs"):
            b = b.strip()
            if b  and  b[0] != "#"  and  b not in TST_BATS:
                missing.append(b)
    return missing
### CheckBATs(env, TST, TSTDB) #

def StartAt(cmd) :
    pOut,pIn,pErr = popen2.popen3(cmd)
    pIn.close()
    qOut, qErr = ReadMultiple([pOut, pErr])
    return qOut.split('\n', 1)[0].strip()
### StartAt(cmd) #

def StopAt(ATJOB,ME) :
    while  os.path.isfile(path("/tmp/.MkillUsers."+ME)):
        time.sleep(9)
    if OS == "IRIX" or OS == "IRIX64":
        ATRM = 'at -r '
    else:
        ATRM = 'atrm '
    os.system(ATRM+ATJOB)
    #TODO:
    #LOG1x at -l >&2
### StopAt(ATJOB,ME) #

def StableOutErr(env,par,TST,OS,RELEASE) :
    BITS = env['TST_BITS']
    OIDS = env['TST_OIDS']
    STATIC = env['TST_STATIC']
    if STATIC:
        STATIC = "(\.STATIC)?"
    dir,file = os.path.split(TST)
    outre = re.compile('^'+re.escape(file)+'\.stable\.(?P<tp>out|err)(\.%s(%s)?)?(\.%s)?%s$' % (re.escape(OS), re.escape(RELEASE), BITS, STATIC))
    bestout = besterr = ''
    for f in os.listdir(dir or os.curdir):
        res = outre.match(f)
        if res is not None:
            if res.group('tp') == 'out':
                if len(bestout) < len(f):
                    bestout = f
            else:                   # res.group('tp') == 'err'
                if len(besterr) < len(f):
                    besterr = f
    if bestout:
        STABLEout = os.path.join(dir, bestout)[len(TST):]
    else:
        STABLEout = '.stable.out'
    if besterr:
        STABLEerr = os.path.join(dir, besterr)[len(TST):]
    else:
        STABLEerr = '.stable.err'
    return STABLEout, STABLEerr
### StableOutErr(env,par,TST,OS,RELEASE) #

def RunTest(env, TST, BusyPorts, COND) :
    Failed = -1
    FailedOut = -1
    FailedErr = -1
    TSTDB = env['TSTDB']
    TSTDIR  = env['TSTDIR']
    TSTSRCDIR = env['TSTSRCDIR']
    RELSRCDIR = env['RELSRCDIR']
    TSTTRGDIR = env['TSTTRGDIR']
    TSTTRGBASE = env['TSTTRGBASE']
    os.chdir(TSTSRCDIR)
    elem = None

    quiet = env['QUIET']

    TX = 0
    EXT = CALL = SERVER = ""
    x  = isexecutable(TST)
    xS = isexecutable(TST+".SQL")
    xM = isexecutable(TST+".MAPI")
    xQ = isexecutable(TST+".XQUERY")
    if   x[0]:
        EXT = x[1]          ; CALL = "other"
    elif xS[0]:
        EXT = ".SQL"+xS[1]  ; CALL = "other"  ; SERVER = "SQL"
    elif xM[0]:
        EXT = ".MAPI"+xM[1] ; CALL = "other"  ; SERVER = "MAPI"
    elif xQ[0]:
        EXT = ".XQUERY"+xQ[1] ; CALL = "other" ; SERVER = "XQUERY"
    elif os.path.isfile(TST+".py")          or  os.path.isfile(TST+".py.src"):
        EXT = ".py"         ; CALL = "python"
    elif os.path.isfile(TST+".SQL"+".py")   or  os.path.isfile(TST+".SQL"+".py.src"):
        EXT = ".SQL.py"     ; CALL = "python" ; SERVER = "SQL"
    elif os.path.isfile(TST+".MAPI"+".py")  or  os.path.isfile(TST+".MAPI"+".py.src"):
        EXT = ".MAPI.py"    ; CALL = "python" ; SERVER = "MAPI"
    elif os.path.isfile(TST+".XQUERY"+".py")  or  os.path.isfile(TST+".XQUERY"+".py.src"):
        EXT = ".XQUERY.py"  ; CALL = "python" ; SERVER = "XQUERY"
    elif os.path.isfile(TST+".mal")        or  os.path.isfile(TST+".mal.src"):
        EXT = ".mal"       ; CALL = "mal"
    elif os.path.isfile(TST+".milM")        or  os.path.isfile(TST+".milM.src"):
        EXT = ".milM"       ; CALL = "milM"
    elif os.path.isfile(TST+".milS")        or  os.path.isfile(TST+".milS.src"):
        EXT = ".milS"       ; CALL = "milS"
    elif os.path.isfile(TST+".milC")        or  os.path.isfile(TST+".milC.src"):
        EXT = ".milC"       ; CALL = "milC"   ; SERVER = "MAPI"
    elif os.path.isfile(TST+"_s00.milM")    or  os.path.isfile(TST+"_s00.milM.src"):
        EXT = ".milM"       ; CALL = "milMXs"
    elif os.path.isfile(TST+"_s00.milS")    or  os.path.isfile(TST+"_s00.milS.src"):
        EXT = ".milS"       ; CALL = "milSXs"
    elif os.path.isfile(TST+"_s00.milC")    or  os.path.isfile(TST+"_s00.milC.src"):
        EXT = ".milC"       ; CALL = "milCXs" ; SERVER = "MAPI"
    elif os.path.isfile(TST+"_p00.milC")    or  os.path.isfile(TST+"_p00.milC.src"):
        EXT = ".milC"       ; CALL = "milCXp" ; SERVER = "MAPI"
    elif os.path.isfile(TST+".sql")         or  os.path.isfile(TST+".sql.src"):
        EXT = ".sql"        ; CALL = "sql"    ; SERVER = "SQL"
    elif os.path.isfile(TST+"_s00.sql")     or  os.path.isfile(TST+"_s00.sql.src"):
        EXT = ".sql"        ; CALL = "sqlXs"  ; SERVER = "SQL"
    elif os.path.isfile(TST+"_p00.sql")     or  os.path.isfile(TST+"_p00.sql.src"):
        EXT = ".sql"        ; CALL = "sqlXp"  ; SERVER = "SQL"
    elif os.path.isfile(TST+".xq")          or  os.path.isfile(TST+".xq.src"):
        EXT = ".xq"         ; CALL = "xq"     ; SERVER = "XQUERY"
    elif os.path.isfile(TST+"_s00.xq")      or  os.path.isfile(TST+"_s00.xq.src"):
        EXT = ".xq"         ; CALL = "xqXs"   ; SERVER = "XQUERY"
    elif os.path.isfile(TST+"_p00.xq")      or  os.path.isfile(TST+"_p00.xq.src"):
        EXT = ".xq"         ; CALL = "xqXp"   ; SERVER = "XQUERY"
    elif os.path.isfile(TST+".x100")         or  os.path.isfile(TST+".x100.src"):
        EXT = ".x100"       ; CALL = "x100"   ; SERVER = "MAPI"
    elif os.path.isfile(TST+"_s00.x100")     or  os.path.isfile(TST+"_s00.x100.src"):
        EXT = ".x100"       ; CALL = "x100Xs" ; SERVER = "MAPI"
        #TODO:
        #elif [ -f "$TST.java"       ] ; then  EXT="java" ; CALL="Java   "+TST+" "+EXT
        #elif [ -f "${TST}_s00.java" ] ; then  EXT="java" ; CALL="JavaXs "+TST+" "+EXT
        #elif [ -f "${TST}_p00.java" ] ; then  EXT="java" ; CALL="JavaXp "+TST+" "+EXT
        #elif [ -f "$TST.odmg"       ] ; then  EXT="odmg" ; CALL="odmg   "+TST+" "+EXT
    else:
        EXT = CALL = SERVER = ""
        if os.name == "nt":
            ErrMsg("test missing: '"+os.path.join(TSTSRCDIR,TST)+".(exe|com|bat|cmd|py|mal|milM|milS|milC|sql|xq|x100)`")
            #TODO:
            #elif os.name == "posix":
        else:
            ErrMsg("test missing: '"+os.path.join(TSTSRCDIR,TST)+"[.py|.mal|.milM|.milS|.milC|.sql|.xq|.x100]`")
        return TX,Failed,Failed,elem

    MissingMods = CheckMods(env, TST, SERVER, CALL)
    MissingBATs = CheckBATs(env, TST, TSTDB)

    os.chdir(TSTTRGDIR)

    NotOnNT = []
    #["src/modules/contrib/salgebra"]
    #\
    #       ["src/modules/plain/tcpip1", "src/modules/plain/tcpip2"]
    #\
    #       "src/modules/contrib/salgebra", "tests/by_Peter/tst_priv", \
    #       "scripts/gold/tst100", "scripts/gold/tstvoid", "src/gdk/reload", "src/modules/plain/mprof", "src/modules/plain/mprof2", \
    #       "tests/Availability/00_Mserver", "tests/BugReports/no.073", "tests/BugReports/no.089"]
    NotOnCYG = []
    #[ "tests/BugReports/no.147", "tests/by_Peter/recursion" ]

    if   COND and not CONDITIONALS.has_key(COND):
        elem = SkipTest(env, TST, EXT, "as conditional '%s' is unknown." % COND)
    elif COND and not CONDITIONALS[COND]:
        elem = SkipTest(env, TST, EXT, "as conditional '%s' does not hold." % COND)
    elif os.name == "nt"  and  url(TSTDIR)+"/"+TST in NotOnNT:
        elem = SkipTest(env, TST, EXT, "as it currently crashes/hangs on WindowsNT.")
    elif sys.platform == "cygwin"  and  url(TSTDIR)+"/"+TST in NotOnCYG:
        elem = SkipTest(env, TST, EXT, "as it currently crashes/hangs on CYGWIN.")
    elif (EXT == ".milM" or EXT == ".milS") and env['VERSION'] >= 49900:
        elem = SkipTest(env, TST, EXT, "as M5/mil is missing modules.")
    elif EXT == ".milC" and  not env['exe']['Mapi_Client'][0]:
        elem = SkipTest(env, TST, EXT, "as "+env['MAPICLIENT'].split(None, 1)[0]+" is not available.")
    elif EXT == ".sql" and  not env['exe']['SQL_Client'][0]:
        elem = SkipTest(env, TST, EXT, "as "+env['SQLCLIENT'].split(None, 1)[0]+" is not available.")
    elif EXT == ".xq" and  not env['exe']['XQuery_Client'][0]:
        elem = SkipTest(env, TST, EXT, "as "+env['XQUERYCLIENT'].split(None, 1)[0]+" is not available.")
    elif EXT == ".x100" and  not env['exe']['X100_Client'][0]:
        elem = SkipTest(env, TST, EXT, "as "+env['X100CLIENT'].split(None, 1)[0]+" is not available.")
    elif CALL == "python"  and  not env['exe']['python'][0]:
        elem = SkipTest(env, TST, EXT, "as python is not available.")
        #TODO:
        #elif EXT == ".milC":
        #elem = SkipTest(env, TST, EXT, "as MapiClient-tests are temporary not supported by "+THISFILE+".")
        #TODO:
        #elif [ "$EXT" = "java"  -a  ! "`type -path java`" ] ; then
        #elem = SkipTest(env, TST, EXT, "as java is not in $PATH.")
    elif MissingMods:
        elem = SkipTest(env, TST, EXT, "as modules '"+str(MissingMods)+"` are missing.")
    elif MissingBATs:
        elem = SkipTest(env, TST, EXT, "as BATs '"+str(MissingBATs)+"` are missing in database '"+TSTDB+"`.")
    elif CALL == "milCXp":
        elem = SkipTest(env, TST, EXT, "as multiple MapiClients in parallel are currently not supported by "+THISFILE+".")
    elif CALL == "sqlXp":
        elem = SkipTest(env, TST, EXT, "as multiple SQL clients in parallel are currently not supported by "+THISFILE+".")
    elif CALL == "xqXp":
        elem = SkipTest(env, TST, EXT, "as multiple XQuery clients in parallel are currently not supported by "+THISFILE+".")
    elif SERVER in BusyPorts:
        if SERVER == "SQL":
            elem = SkipTest(env, TST, EXT, "as SQLPORT=%s and/or MAPIPORT=%s are not available." % (env['SQLPORT'],env['MAPIPORT']))
        else:
            elem = SkipTest(env, TST, EXT, "as %sPORT=%s is not available." % (SERVER,env[SERVER+'PORT']))
    else:
        test = re.compile("^"+TST+"((_[sp][0-9][0-9])?\..*)?$", re.MULTILINE)
        for f in os.listdir(RELSRCDIR):
            if test.match(f):
                SymlinkOrCopy(os.path.join(RELSRCDIR,f),os.path.join(TSTTRGDIR,f))
        if os.path.isfile(TST+EXT+".src")  and not os.path.isfile(TST+EXT):
            f = open(TST+EXT+".src","r")
            TSTSRC = os.path.expandvars(path(f.readline().strip()))
            f.close()
            if os.path.isfile(TSTSRC):
                SymlinkOrCopy(TSTSRC,TST+EXT)
            else:
                elem = SkipTest(env, TST, EXT+".src", "as source file '"+TSTSRC+"` is missing.")
                return TX,Failed,Failed,elem
        test = re.compile("^"+TST+"((_[sp][0-9][0-9])?\..*)?\.src$", re.MULTILINE)
        for ff in os.listdir(TSTTRGDIR):
            if test.match(ff) and not os.path.isfile(ff[:-4]):
                f = open(ff,"r")
                TSTSRC = os.path.expandvars(path(f.readline().strip()))
                f.close()
                if os.path.isfile(TSTSRC):
                    SymlinkOrCopy(TSTSRC,ff[:-4])
                else:
                    Warn("source file '"+TSTSRC+"` is missing.")

        if THISFILE == "Mprofile.py":
            test = re.compile("^"+TST+"(_[sp][0-9][0-9])?\..*mil.*$", re.MULTILINE)
            d = os.listdir(os.getcwd())
            for f in d:
                if test.match(f)  and  f != TST+EXT+".src":
                    prof.prof(f, env['CMDLST'])
                    os.rename(f,f+".no_prof")
                    os.rename("prof_"+f,f)
                    if not quiet:
                        os.system('%s -I"%s" "%s" -A%d "%s.no_prof" "%s" "%s.prof.diff.html"' % (env['exe']['Mdiff'][1],par['IGNORE'],par['CONTEXT'],par['ACCURACY'],f,f,f))
                    else:
                        os.system('%s -q -I"%s" "%s" -A%d "%s.no_prof" "%s" "%s.prof.diff.html"' % (env['exe']['Mdiff'][1],par['IGNORE'],par['CONTEXT'],par['ACCURACY'],f,f,f))

        ACCURACYout = par['ACCURACY']
        ACCURACYerr = par['ACCURACY']
        STABLEout,STABLEerr = StableOutErr(env,par,TST,OS,RELEASE)
        if not os.path.isfile(TST+STABLEout):
            open(TST+STABLEout,"w").close()
            ACCURACYout = 0
        if not os.path.isfile(TST+STABLEerr):
            open(TST+STABLEerr,"w").close()
            ACCURACYerr = 0

        if os.path.isfile(TST+".prelude")  and  EXT not in  ['.milC','.sql','.xq','.x100']:
            PRELUDE = TST+".prelude"
        else:
            PRELUDE = ""

        TIMEOUTED = "Mtimeout"
        for v in env['exe'].keys():
            TIMEOUTED = TIMEOUTED+"|"+v.upper()
        test = re.compile("^[^#]*("+TIMEOUTED+")[^#]*(# ([0-9]+)x|#.*)?$", re.MULTILINE)
        TIMEOUT = par['TIMEOUT']
        if os.path.isfile(TST+".timeout"):
            for f in fileinput.input(TST+".timeout"):
                TOf = int(f.strip())
                if TOf > 1:
                    TIMEOUT = TIMEOUT * TOf
        if env['exe']['Mtimeout'][0]:
            env['exe']['Mtimeout'] = env['exe']['Mtimeout'][0], 'Mtimeout -timeout '+str(TIMEOUT)+' '
            SetExecEnv(env['exe'],0)
        CTIMEOUT = 0
        if   CALL in ["other", "python"]:
            if TIMEOUT > 0:
                CTIMEOUT = CTIMEOUT + 60
            for l in fileinput.input(TST+EXT):
                TOm = test.match(l)
                if TOm:
                    TOx = TOm.group(3)
                    if TOx and (int(TOx) > 1):
                        TOx = int(TOx)
                    else:
                        TOx = 1
                    CTIMEOUT = CTIMEOUT + ( TOx * TIMEOUT )
        elif CALL in ["milMXs", "milSXs", "milCXs", "sqlXs", "xqXs", "x100Xs"]:
            test = re.compile("^"+TST+"_s[0-9][0-9]"+EXT+"$", re.MULTILINE)
            d = os.listdir(os.getcwd())
            for f in d:
                if test.match(f):
                    CTIMEOUT = CTIMEOUT + TIMEOUT
        elif CALL in ["mal", "milM", "milS", "milC", "sql", "xq", "x100"]:
            CTIMEOUT = CTIMEOUT + TIMEOUT
        if  CTIMEOUT < TIMEOUT:
            CTIMEOUT = TIMEOUT
        STIMEOUT = CTIMEOUT
        if  SERVER in ["MAPI", "SQL", "XQUERY"] and TIMEOUT > 0:
            STIMEOUT = STIMEOUT + TIMEOUT + 60

        ME = ""
        ATJOB1 = ""
        MkillUsers = ""
        if TIMEOUT and os.name != "nt" and sys.platform != 'cygwin' and env.get('USE_AT'):
            for f in TST+".KILLED.out", TST+".KILLED.err":
                if os.path.isfile(f):
                    os.remove(f)
            ME = str(os.getpid())
            WAIT = str(int(STIMEOUT / 60) + 2)
            FILES = os.path.join(TSTTRGDIR,TST)+" "+os.path.join(TSTTRGDIR,TST)+".*"
            for f in ["bat/\\*", '.gdk_lock']:
                FILES = FILES+" "+os.path.join(env['GDK_DBFARM'],TSTDB,path(f))
            FILES = FILES+" "+os.path.join(env['SQL_LOGDIR'],TSTDB,'log\\*')
            WHAT = os.path.join(THISPATH,"MkillUsers")+" -l"+ME+" -p"+ME+" "+FILES+r" \>\>"+os.path.join(TSTTRGDIR,TST+".KILLED.out")+r" 2\>\>"+os.path.join(TSTTRGDIR,TST+".KILLED.err")
            WHEN = "now + "+WAIT+" minutes"
            cmd  = "echo  "+WHAT+"  2>/dev/null | at "+WHEN+" 2>&1 | awk '/^[Jj]ob/{print $2}'"
            ATJOB1 = StartAt(cmd)
            #TODO:
            #LOG1x at -l >&2
            MkillUsers = "echo  "+WHAT+"  2>/dev/null | at now + 1 minute 2>&1 | awk '/^[Jj]ob/{print $2}'"

        #if THISFILE == "Mtest.py":
        TestOutFile = TST+".test.out"
        TestErrFile = TST+".test.err"
        TestOut = open(TestOutFile,"w")
        TestErr = open(TestErrFile,"w")
        #else:  # THISFILE == "Mprofile.py"
        #       TestOut = open(TST+".profile.out","w")
        #       TestErr = open(TST+".profile.err","w")
        TestOut.write("stdout of test '"+TST+"` in directory '"+url(TSTDIR)+"` itself:\n\n")
        TestErr.write("stderr of test '"+TST+"` in directory '"+url(TSTDIR)+"` itself:\n\n")
        TestOut.close()
        TestErr.close()

        t0 = time.time()
        DoIt (env, SERVER, CALL, TST, EXT, PRELUDE, TestOutFile, TestErrFile, STIMEOUT, CTIMEOUT, TIMEOUT, MkillUsers, ME)
        t1 = time.time()
        TX = t1 - t0
        if not quiet:
            STDOUT.write(" %7.3fs " % TX)

        if ATJOB1:
            StopAt(ATJOB1,ME)
            os.system(WHAT.replace('\\', '').replace(" -p"+ME+" ", ' '))
        else:
            while os.path.exists(os.path.join(TSTTRGBASE,".KILLED.lck")):
                time.sleep(1)

        killed = 0
        n = TST+".KILLED."
        for (x,txf) in [("out",TestOutFile),("err",TestErrFile)]:
            f = n+x
            if os.name == "nt":
                for t in os.path.join(TSTTRGBASE,f), os.path.join(TSTTRGBASE,".KILLED."+x):
                    if os.path.isfile(t):
                        shutil.copy(t,f)
                        os.remove(t)
                        break
            if os.path.isfile(f):
                p = try_open(txf, 'a')
                if p is not None:
                    for l in fileinput.input(f):
                        p.write("! "+l)
                        killed = 1
                    p.close()

        if SERVER in ["MAPI", "SQL", "XQUERY"]:
            CheckSocket3(env, SERVER, TestErrFile)
            if SERVER == "SQL":
                CheckSocket3(env, "MAPI", TestErrFile)

        #TODO:
        ##if [ ! -f $TSTTRGBASE/Tests/.old.left-over.tmp.bats. ] ; then  touch $TSTTRGBASE/Tests/.old.left-over.tmp.bats. ; fi
        ##LEFTOVERTMPBATS="`find $MONETDBFARM/dbfarm/*/bat/ -name tmp_\* -print 2> /dev/null`"
        ##if [ "$LEFTOVERTMPBATS" ] ; then
        ##      ls -alF $LEFTOVERTMPBATS 2> /dev/null > .all.left-over.tmp.bats.
        ##      diff -u0 $TSTTRGBASE/Tests/.old.left-over.tmp.bats. .all.left-over.tmp.bats. | grep '^\+[^\+]' > .new.left-over.tmp.bats.
        ##fi
        ##if [ -s .new.left-over.tmp.bats. ] ; then
        ##      echo -e "\n!ERROR: persistent temporary bats remained:" >> $LOGFILE.err
        ##      sed 's|^\+|! |g' .new.left-over.tmp.bats.               >> $LOGFILE.err
        ##      echo                                                    >> $LOGFILE.err
        ##fi
        ##rm -f .new.left-over.tmp.bats. $TSTTRGBASE/Tests/.old.left-over.tmp.bats.
        ##if [ -f .all.left-over.tmp.bats. ] ; then  mv -f .all.left-over.tmp.bats. $TSTTRGBASE/Tests/.old.left-over.tmp.bats. ; fi

        timeout = 0
        mto = re.compile("^!(Mtimeout:)? Timeout:", re.MULTILINE)
        for l in fileinput.input(TestErr.name):
            if mto.match(l):
                timeout = 1

        if timeout:
            if quiet:
                STDOUT.write("\n%s : Timeout!\n" % TST)
            else:
                STDOUT.write("(Timeout!) ")

        if killed:
            if quiet:
                STDOUT.write("\n%s : Killed!\n" % TST)
            else:
                STDOUT.write("(Killed!) ")

        if not quiet:
            STDOUT.write("\n")

        try:
            STDOUT.flush()
        except IOError, (IOerrNo, IOerrStr):
            Warn("Flushing STDOUT in RunTest failed with #%d: '%s'." % (IOerrNo, IOerrStr))

        if env['exe']['Mtimeout'][0]:
            env['exe']['Mtimeout'] = env['exe']['Mtimeout'][0], 'Mtimeout -timeout '+str(par['TIMEOUT'])+' '
            SetExecEnv(env['exe'],0)

        if THISFILE in ["Mtest.py", "Mprofile.py"]:
            Mfilter.mFilter(TST+STABLEout,par['IGNORE'])
            Mfilter.mFilter(TST+STABLEerr,par['IGNORE'])
            Mfilter.mFilter(TST+".test.out",par['IGNORE'])
            Mfilter.mFilter(TST+".test.err",par['IGNORE'])

            testO = re.compile("^/"+TST+STABLEout+"/([^/]*)/", re.MULTILINE)
            testE = re.compile("^/"+TST+STABLEerr+"/([^/]*)/", re.MULTILINE)
            REVo="?"
            REVe="?"
            entries = os.path.join(TSTSRCDIR,"CVS","Entries")
            if os.path.isfile(entries):
                for l in fileinput.input(entries):
                    mO = testO.match(l)
                    if mO:
                        REVo=mO.group(1)
                    mE = testE.match(l)
                    if mE:
                        REVe=mE.group(1)
            REVo=" (r"+REVo+")"
            REVe=" (r"+REVe+")"

            MDIFF0 = env['exe']['Mdiff'][1]
            MDIFF1 = MDIFF0+' -d'
            if env['exe']['Mtimeout'][0]:
                if quiet:
                    MDIFF1 = env['exe']['Mtimeout'][1]+' -q '+MDIFF1
                else:
                    MDIFF1 = env['exe']['Mtimeout'][1]+' '+MDIFF1

            #TODO:
            #timedout = 1
            #while timedout and ACCURACY >= 0:
            #       timedout = 0
            #       signal.alarm(par['TIMEOUT'])
            #       try:
            #               os.system(MDIFF+' -I"'+par['IGNORE']+'" '+par['CONTEXT']+' -A'+str(ACCURACY)+' -r"'+REVo+'" '+TST+STABLEout+'.FILTERED '+TST+'.test.out.FILTERED '+TST+'.out.diff.html')
            #       except TimeoutError, t:
            #               timedout = 1
            #       signal.alarm(0)
            #       ACCURACY = ACCURACY - 1
            MDIFF = MDIFF1
            diff_html = open('%s.out.diff.html' % TST,"w")
            diff_html.write('<!--MajorDiffs-->\n')
            diff_html.close()
            timedout = 1
            if timeout: # test run timed out, expect major differences!
                ACCURACYout = -1
            while timedout and MDIFF == MDIFF1:
                if ACCURACYout == -1:
                    MDIFF = MDIFF0
                    ACCURACYout = 0
                if not quiet:
                    timedout = os.system('%s -I"%s" "%s" -A%d -r"%s" "%s%s.FILTERED" "%s.test.out.FILTERED" "%s.out.diff.html"' % (MDIFF, par['IGNORE'], par['CONTEXT'], ACCURACYout, REVe, TST, STABLEout, TST, TST))
                else:
                    timedout = os.system('%s -q -I"%s" "%s" -A%d -r"%s" "%s%s.FILTERED" "%s.test.out.FILTERED" "%s.out.diff.html"' % (MDIFF, par['IGNORE'], par['CONTEXT'], ACCURACYout, REVe, TST, STABLEout, TST, TST))
                ACCURACYout = ACCURACYout - 1

            #TODO:
            #timedout = 1
            #while timedout and ACCURACY >= 0:
            #       timedout = 0
            #       signal.alarm(par['TIMEOUT'])
            #       try:
            #               os.system(MDIFF+' -I"'+par['IGNORE']+'" '+par['CONTEXT']+' -A'+str(ACCURACY)+' -r"'+REVe+'" '+TST+STABLEerr+'.FILTERED '+TST+'.test.err.FILTERED '+TST+'.err.diff.html')
            #       except TimeoutError, t:
            #               timedout = 1
            #       signal.alarm(0)
            #       ACCURACY = ACCURACY - 1
            MDIFF = MDIFF1
            diff_html = open('%s.err.diff.html' % TST,"w")
            diff_html.write('<!--MajorDiffs-->\n')
            diff_html.close()
            timedout = 1
            if timeout: # test run timed out, expect major differences!
                ACCURACYerr = -1
            while timedout and MDIFF == MDIFF1:
                if ACCURACYerr == -1:
                    MDIFF = MDIFF0
                    ACCURACYerr = 0
                if not quiet:
                    timedout = os.system('%s -I"%s" "%s" -A%d -r"%s" "%s%s.FILTERED" "%s.test.err.FILTERED" "%s.err.diff.html"' % (MDIFF, par['IGNORE'], par['CONTEXT'], ACCURACYerr, REVe, TST, STABLEerr, TST, TST))
                else:
                    timedout = os.system('%s -q -I"%s" "%s" -A%d -r"%s" "%s%s.FILTERED" "%s.test.err.FILTERED" "%s.err.diff.html"' % (MDIFF, par['IGNORE'], par['CONTEXT'], ACCURACYerr, REVe, TST, STABLEerr, TST, TST))
                ACCURACYerr = ACCURACYerr - 1

            FailedOut, FailedErr, elem = AddTstToHtmlIndex(env, TST, STABLEout, STABLEerr, EXT)

    return TX,FailedOut,FailedErr,elem
### RunTest(env, TST, BusyPorts) #

def CheckPort(host,port) :
    busy = 0
    Serrno = 0
    Serrstr = ""
    S = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        S.bind((host,port))
    except socket.error, (Serrno,Serrstr):
        busy = 1
    S.close()
    return busy, Serrno, Serrstr
### CheckPort(host,port) #

def randomPort(l,h) :
    repeat = 9
    host = 'localhost'
    port = 0
    rpt = 0
    while rpt < repeat:
        port = random.randrange(l,h,1)
        if CheckPort(host,port)[0]:
            rpt = rpt + 1
        else:
            break
    return port
### randomPort(l,h) #

def CheckSocket(env,SERVER,SrvrErr,LogLine) :
#       if OS == "SunOS":
#               wait = 241
#       else:
#               wait = 61
    wait = 61
    repeat = 5
    host = 'localhost'
    port = int(env[SERVER+'PORT'])
    rpt = 0
    while rpt < repeat:
        busy, Serrno, Serrstr = CheckPort(host,port)
        if busy:
            rpt = rpt + 1
            Smsg = """
! Socket-Check failed for %sserver on <%s:%d> with #%d; '%s' !
! Waiting %d seconds (%d/%d) ... """ % (SERVER, host, port, Serrno, Serrstr, wait, rpt, repeat)
#            STDERR.write(Smsg)
#            STDERR.flush()
#            SrvrErr.write(Smsg)
#            SrvrErr.flush()
            time.sleep(wait)
        else:
            break
    if rpt != 0:
        SrvrErr.write("Done.\n\n")
        SrvrErr.flush()
        STDERR.write("Done.\n"+prompt()+LogLine)
        STDERR.flush()
### CheckSocket(env,SERVER,SrvrErr,LogLine) #

def CheckSocket2(env,SERVER,SrvrErr) :
    host = 'localhost'
    port = int(env[SERVER+'PORT'])
    busy, Serrno, Serrstr = CheckPort(host,port)
    if busy:
        env[SERVER+'PORT'] = eval(dft[SERVER+'PORT'])
        os.environ[SERVER+'PORT'] = env[SERVER+'PORT']
        op = 'port=%d' % port
        np = 'port=%s' % env[SERVER+'PORT']
        env['exe']['Mserver']       = env['exe']['Mserver'][0]       , env['exe']['Mserver'][1].replace(op, np)
        env['exe']['Mapi_Client']   = env['exe']['Mapi_Client'][0]   , env['exe']['Mapi_Client'][1].replace(op, np)
        env['exe']['SQL_Client']    = env['exe']['SQL_Client'][0]    , env['exe']['SQL_Client'][1].replace(op, np)
        env['exe']['XQuery_Client'] = env['exe']['XQuery_Client'][0] , env['exe']['XQuery_Client'][1].replace(op, np)
        env['exe']['X100_Client']   = env['exe']['X100_Client'][0]   , env['exe']['X100_Client'][1].replace(op, np)
        os.environ['MSERVER']       = os.environ['MSERVER'].replace(op, np)
        os.environ['MAPI_CLIENT']   = os.environ['MAPI_CLIENT'].replace(op, np)
        os.environ['SQL_CLIENT']    = os.environ['SQL_CLIENT'].replace(op, np)
        os.environ['XQUERY_CLIENT'] = os.environ['XQUERY_CLIENT'].replace(op, np)
        os.environ['X100_CLIENT']   = os.environ['X100_CLIENT'].replace(op, np)
        Smsg = """
! Socket-Check failed for %sserver on <%s:%d> with #%d; '%s' !
! Using new %sPORT=%s !
""" % (SERVER, host, port, Serrno, Serrstr, SERVER, env[SERVER+'PORT'])
#        STDERR.write(Smsg)
#        STDERR.flush()
#        SrvrErr.write(Smsg)
#        SrvrErr.flush()
### CheckSocket2(env,SERVER,SrvrErr) #

def CheckSocket3(env,SERVER,ErrFileName) :
    host = 'localhost'
    port = int(env[SERVER+'PORT'])
    busy, Serrno, Serrstr = CheckPort(host,port)
    if busy:
        Smsg = """
! Socket-Check failed for %sserver on <%s:%d> with #%d; '%s' !
! %sPORT was not properly released by Mserver !
""" % (SERVER, host, port, Serrno, Serrstr, SERVER)
#        STDERR.write(Smsg)
#        STDERR.flush()
#        ErrFile = open(ErrFileName, 'a')
#        ErrFile.write(Smsg)
#        ErrFile.flush()
#        ErrFile.close()
### CheckSocket3(env,SERVER,ErrFileName) #

def prompt() :
    return time.strftime('%H:%M:%S> ',time.localtime(time.time()))
### prompt() #

def Prompt(cmd) :
    prmpt = time.strftime('\n# %H:%M:%S >  ',time.localtime(time.time()))
    return prmpt+prmpt+cmd+prmpt+"\n\n"
### Prompt(cmd) #

def LaunchIt(cmd, TestIn, TestOut, TestErr) :
    if type(TestOut) is type('') and type(TestErr) is type(''):
        f = open(TestOut, 'a')
        f.write(Prompt(cmd))
        f.close()
        f = open(TestErr, 'a')
        f.write(Prompt(cmd))
        f.close()
        cmd = '%s >> %s 2>> %s' % (cmd, TestOut, TestErr)
        pIn = os.popen(cmd, 'w')
        pOut = pErr = None
    else:
        TestOut.write(Prompt(cmd))
        TestOut.flush()
        TestErr.write(Prompt(cmd))
        TestErr.flush()
        pOut,pIn,pErr = popen2.popen3(cmd)

    if OS == "IRIX" or OS == "IRIX64":
        time.sleep(1)

    pIn.write(TestIn)
    try:
        pIn.flush()
    except IOError, (IOerrNo, IOerrStr):
        Warn("Flushing input pipe in LaunchIt failed with #%d: '%s'." % (IOerrNo, IOerrStr))
    return pIn, pOut, pErr
### LaunchIt(cmd, TestIn, TestOut, TestErr) #

def ReadMultiple(inpipes, outpipes = None):
    if outpipes is None:
        # we will return a list of strings, one for each of the pipes,
        # with the input from the corresponding pipe
        outbuffers = [''] * len(inpipes)
    else:
        # we will return nothing.  the input from the pipes will be
        # written to the correspondging outpipes.
        outbuffers = None
        # in this case it may be that inpipes are all None and
        # outpipes are all strings
        if inpipes == [None]*len(inpipes):
            # we only check inpipes
            # we're done
            return
    if os.name == 'nt':
        # On Windows, select only works on sockets.
        # We must hope that reading the pipes in order won't cause
        # deadlock.
        for i in range(len(inpipes)):
            if outpipes is None:
                outbuffers[i] = inpipes[i].read().replace('\r','')
            else:
                outpipes[i].write(inpipes[i].read())
            inpipes[i].close()
    else:
        readlist = inpipes[:]
        while readlist:
            readers, dummy1, dummy2 = select.select(readlist, [], [])
            todelete = []
            for r in readers:
                data = os.read(r.fileno(), 1024).replace('\r','')
                if not data:
                    # we hit EOF on this pipe
                    todelete.append(r)
                else:
                    for i in range(len(inpipes)):
                        if r is inpipes[i]:
                            if outpipes is None:
                                outbuffers[i] = outbuffers[i] + data
                            else:
                                outpipes[i].write(data)
            for r in todelete:
                # remove the pipe from consideration and close it
                readlist.remove(r)
                r.close()
    if outpipes is not None:
        for p in outpipes:
            p.flush()
    return outbuffers
### ReadMultiple(inpipes, outpipes = None) #

def CollectIt(pOut, pErr, TestOut, TestErr) :
    ReadMultiple([pOut, pErr], [TestOut, TestErr])
### CollectIt(pOut, pErr, TestOut, TestErr) #

def RunIt(cmd, TestIn, TestOut, TestErr) :
    pIn, pOut, pErr = LaunchIt(cmd, TestIn, TestOut, TestErr)
    try:
        pIn.close()
    except IOError, (IOerrNo, IOerrStr):
        Warn("Closing input pipe in RunIt failed with #%d: '%s'." % (IOerrNo, IOerrStr))
    CollectIt(pOut, pErr, TestOut, TestErr)
### RunIt(cmd, TestIn, TestOut, TestErr) #

def Log() :
    time.strftime('%H:%M:%S> ',time.localtime(time.time()))
### Log() #

def mapi_ping(port) :
    retry = 0
    wait = 1
    host = 'localhost'
    while retry < 3:
        retry += 1
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.connect((host, port))
            r = sock.makefile('r').readline();
            sock.makefile('w').write("ping\n");
            return True
        except socket.error, (Serrno,Serrstr):
            pass
        time.sleep(wait)
    return False
### mapi_ping() #

if os.name == "nt":
    devnull = 'C:nul'
else:
    devnull = '/dev/null'

def DoIt(env, SERVER, CALL, TST, EXT, PRELUDE, TestOutFile, TestErrFile, STIMEOUT, CTIMEOUT, TIMEOUT, MkillUsers, ME) :
    quiet = env['QUIET']
    ATJOB2 = ""
    LogLine = os.path.join(env['TSTDIR'],TST+EXT)+' '+PRELUDE+' (<=%d,%d,%d) ...' % (TIMEOUT,CTIMEOUT,STIMEOUT)
    STDERR.flush()
    if not quiet:
        STDOUT.write(prompt()+LogLine)
    else:
        STDOUT.write(".");

    try:
        STDOUT.flush()
    except IOError, (IOerrNo, IOerrStr):
        Warn("Flushing STDOUT in DoIt failed with #%d: '%s'." % (IOerrNo, IOerrStr))
    TSTDB = env['TSTDB']
    exe = env['exe']
    if exe['Mtimeout'][0]:
        MTO = "Mtimeout -timeout "
        TOT = TIMEOUT
        STO = STIMEOUT
        CTO = CTIMEOUT
    else:
        MTO = ""
        TOT = ""
        STO = ""
        CTO = ""

    LOCAL_CONF = ""
    if os.path.isfile(TST+".conf"):
        LOCAL_CONF = ' "--config=%s"' % TST+".conf"
    elif os.path.isfile(os.path.join(env['TSTSRCDIR'],"All.conf")):
        LOCAL_CONF = ' "--config=%s"' % os.path.join(env['TSTSRCDIR'],"All.conf")

    if env['VERSION'] >= 49900:
        PRINTF = "io.printf"
    else:
        PRINTF = "printf"


    ServerReady = True
    if SERVER in ["MAPI", "SQL", "XQUERY"]:
        SrvrOutFile = TST+".server.out"
        SrvrErrFile = TST+".server.err"
        SrvrOut = open(SrvrOutFile,"w")
        SrvrErr = open(SrvrErrFile,"w")
        ClntOutFile = TST+".client.out"
        ClntErrFile = TST+".client.err"
        open(ClntOutFile,"w").close()
        open(ClntErrFile,"w").close()

        CheckSocket2(env, SERVER, SrvrErr)
        if SERVER == "SQL":
            CheckSocket2(env, "MAPI", SrvrErr)

        PROLOGUE = ""
        if os.path.isfile(TST+".prologue") and env['VERSION'] < 49900:
            PROLOGUE = " "+TST+".prologue"

        Srvr = '%s%s %s%s "--dbname=%s"' % (MTO, str(STO), exe['Mserver'][1], LOCAL_CONF, TSTDB)
        if SERVER == "MAPI":
            Srvr = '%s --dbinit="module(mapi); mapi_start();"' % Srvr
        if SERVER == "SQL":
            if env['VERSION'] >= 49900:
                Srvr = '%s --dbinit="include sql; mapi.listen(%s:int);"' % (Srvr, env['SQLPORT'])
            else:
                Srvr = '%s --dbinit="module(sql_server); sql_server_start();"' % Srvr
        if SERVER == "XQUERY":
            Srvr = '%s --dbinit="module(pathfinder); pfstart();"' % Srvr
        Srvr = Srvr+PROLOGUE
        #-background"
        if os.name == "nt":
            Srvr = Srvr+' & echo.& '
        else:
            Srvr = Srvr+' ; echo ; '
        Srvr = Srvr+'echo Over..'

        pSrvrIn, pSrvrOut, pSrvrErr = LaunchIt(Srvr, '\n%s("\\nReady.\\n");\n' % PRINTF, SrvrOut, SrvrErr)
        ln="dummy"
        while 0 < len(ln) and ln[:6] not in ['Ready.','Over..']:
            ln=pSrvrOut.readline()
            SrvrOut.write(ln)
            SrvrOut.flush()
        if ln[:6] != 'Ready.':
            ServerReady = False

        if ServerReady:
            port = int(env[SERVER+'PORT'])
            ServerReady = mapi_ping(port)

    else:
        ClntOutFile = TestOutFile
        ClntErrFile = TestErrFile

    if ServerReady:
        if   CALL == "other":
            cmd = MTO+str(CTO)+" "+os.path.join(".",TST+EXT)+" "+TST+" "+PRELUDE
            RunIt(cmd, "", ClntOutFile, ClntErrFile)
        elif CALL == "python":
            cmd = MTO+str(CTO)+" "+exe['python'][1]+" "+TST+EXT+" "+TST+" "+PRELUDE
            RunIt(cmd, "", ClntOutFile, ClntErrFile)
        elif CALL in ["mal", "milM", "milS", "milMXs", "milSXs"]:
            cmd = '%s%s %s%s --dbname=%s %s ' % (MTO, str(TOT), exe['Mserver'][1], LOCAL_CONF, TSTDB, PRELUDE)
            if CALL in ["mal", "milM", "milS"]:
                X=""
            else:
                X="_s[0-9][0-9]"
            test = re.compile("^"+TST+X+EXT+"$", re.MULTILINE)
            d = os.listdir(os.getcwd())
            d.sort()
            for f in d:
                if test.match(f):
                    if CALL == "mal":
                        RunIt("%s%s < %s" % (cmd, f, devnull), "", ClntOutFile, ClntErrFile)
                    elif env['VERSION'] >= 49900:
                        RunIt(cmd+" --dbinit=\"include mil_scenario; mil();\" "+f+" </dev/null", "", ClntOutFile, ClntErrFile)
                    else:
                        RunIt(cmd+"< "+f, "", ClntOutFile, ClntErrFile)
        elif CALL in ["milC", "milCXs"]:
            TSTs = []
            if CALL == "milC":
                X=""
            else:
                X="_s[0-9][0-9]"
            test = re.compile("^"+TST+X+EXT+"$", re.MULTILINE)
            d = os.listdir(os.getcwd())
            d.sort()
            for f in d:
                if test.match(f):
                    TSTs.append(f)

            Clnt = MTO+str(TOT)+" "+exe['Mapi_Client'][1]+" < "
            for f in TSTs:
                RunIt(Clnt+f, "", ClntOutFile, ClntErrFile)

            #TODO
            #elif CALL == "milCXp":
        elif CALL in ["sql", "sqlXs"]:
            TSTs = []
            if CALL == "sql":
                X=""
            else:
                X="_s[0-9][0-9]"
            test = re.compile("^"+TST+X+EXT+"$", re.MULTILINE)
            d = os.listdir(os.getcwd())
            d.sort()
            for f in d:
                if test.match(f):
                    TSTs.append(f)

            Clnt = MTO+str(TOT)+" "+exe['SQL_Client'][1]+" < "
            for f in TSTs:
                RunIt(Clnt+f, "", ClntOutFile, ClntErrFile)
        elif CALL in ["xq", "xqXs"]:
            TSTs = []
            if CALL == "xq":
                X=""
            else:
                X="_s[0-9][0-9]"
            test = re.compile("^"+TST+X+EXT+"$", re.MULTILINE)
            d = os.listdir(os.getcwd())
            d.sort()
            for f in d:
                if test.match(f):
                    TSTs.append(f)

            Clnt = MTO+str(TOT)+" "+exe['XQuery_Client'][1]+" "
            for f in TSTs:
                RunIt(Clnt+f, "", ClntOutFile, ClntErrFile)
        elif CALL in ["x100", "x100Xs"]:
            TSTs = []
            if CALL == "x100":
                X=""
            else:
                X="_s[0-9][0-9]"
            test = re.compile("^"+TST+X+EXT+"$", re.MULTILINE)
            d = os.listdir(os.getcwd())
            d.sort()
            for f in d:
                if test.match(f):
                    TSTs.append(f)

            Clnt = MTO+str(TOT)+" "+exe['X100_Client'][1]+" < "
            for f in TSTs:
                RunIt(Clnt+f, "", ClntOutFile, ClntErrFile)
    else:
        for fn in ClntOutFile,ClntErrFile:
            fp = open(fn,'a')
            fp.write('\n\n! Server not ready; skipping attempt to start client!\n\n')
            fp.close()

    if SERVER in ["MAPI", "SQL", "XQUERY"]:
        if os.path.isfile(TST+".epilogue") and env['VERSION'] < 49900:
            EPILOGUE = open(TST+".epilogue",'r')
            EpiFailed = ""
            try:
                pSrvrIn.write(EPILOGUE.read())
                pSrvrIn.flush()
                pSrvrIn.write(';\n%s("\\nDone..\\n");\n' % PRINTF)
                pSrvrIn.flush()
            except IOError, (IOerrNo, IOerrStr):
                EpiFailed = EpiFailed+"\n! Executing "+TST+".epilogue failed with #"+str(IOerrNo)+": '"+IOerrStr+"'. !"
                EpiFailed = EpiFailed+"\n! Probably, Mserver has died before or during. !\n"
            ln="dummy"
            while 0 < len(ln) and ln[:6] not in ['Done..','Over..']:
                ln=pSrvrOut.readline()
                SrvrOut.write(ln)
                SrvrOut.flush()
            SrvrOut.write(EpiFailed)
            SrvrOut.flush()
            EPILOGUE.close()

        try:
            if env['VERSION'] >= 49900:
                pSrvrIn.write('clients.quit();\n')
            else:
                pSrvrIn.write('quit();\n')
            pSrvrIn.flush()
        except IOError:
            pass
        try:
            pSrvrIn.close()
        except IOError, (IOerrNo, IOerrStr):
            Warn("Closing input pipe in DoIt failed with #%d: '%s'." % (IOerrNo, IOerrStr))

        if MkillUsers:
            ATJOB2 = StartAt(MkillUsers)
        CollectIt(pSrvrOut, pSrvrErr, SrvrOut, SrvrErr)
        if MkillUsers:
            StopAt(ATJOB2,ME)

        AllOut = [SrvrOut, ClntOutFile]
        AllErr = [SrvrErr, ClntErrFile]
        TestOut = open(TestOutFile, 'a')
        for q in AllOut:
            if type(q) is type(''):
                n = q
            else:
                n = q.name
                q.close()
            q = open(n,'r')
            try:
                TestOut.write(q.read())
            except IOError, (IOerrNo, IOerrStr):
                Warn("Reading from input '%s' or writing to output '%s' failed with #%d: '%s'." % (q.name, TestOut.name, IOerrNo, IOerrStr))
            except MemoryError:
                Warn("Reading from input '%s' or writing to output '%s' failed with 'MemoryError'." % (q.name, TestOut.name))
            TestOut.flush()
            q.close()
        TestErr = open(TestErrFile, 'a')
        for q in AllErr:
            if type(q) is type(''):
                n = q
            else:
                n = q.name
                q.close()
            q = open(n,'r')
            TestErr.write(q.read())
            TestErr.flush()
            q.close()
    else:
        TestOut = try_open(TestOutFile, 'a')
        TestErr = try_open(TestErrFile, 'a')

    if TestOut is not None:
        TestOut.write(Prompt('Done.'))
        TestOut.close()
    if TestErr is not None:
        TestErr.write(Prompt('Done.'))
        TestErr.close()

### DoIt(env, SERVER, CALL, TST, EXT, PRELUDE, TestOut, TestErr, STIMEOUT, CTIMEOUT, TIMEOUT, MkillUsers, ME) #

def Check(command, input) :
    pOut,pIn,pErr = popen2.popen3(command+" || echo ! Exit 1")
    pIn.write(input)
    try:
        pIn.close()
    except IOError, (IOerrNo, IOerrStr):
        Warn("Closing input pipe in Check failed with #%d: '%s'." % (IOerrNo, IOerrStr))
    qOut, qErr = ReadMultiple([pOut, pErr])
    qOut = qOut.split('\n')
    qErr = qErr.split('\n')
    test = re.compile( r"^!WARNING: BATpropcheck: "                                          "|"
                       r"^!WARNING: monet_checkbat: "                                        "|"
                       r"^!WARNING: GDKlockHome: ignoring empty or invalid .gdk_lock."       "|"
                       r"^!WARNING: BBPdir: initializing BBP.",
                       re.MULTILINE)
    noErr = []
    for l in qOut+qErr:
        if l[:1] == "!":
            if test.match(l):
                if l[:10] != "!WARNING: ":
                    noErr.append(l+"\n")
            else:
                ErrMsg("'"+command+"` failed:")
                if qOut and len(qOut[-1]) >= 8 and qOut[-1][:8] == "! Exit 1":
                    qErr.append(qOut.pop())
                for l in qOut+qErr:
                    STDERR.write(l)
                    STDERR.write("\n")
                STDERR.write("\n")
                STDERR.flush()
                #sys.exit(1)
                return 1
    if noErr:
        STDOUT.flush()
        STDERR.writelines(noErr)
        STDERR.flush()
    return 0
### Check(command, input) #

def CheckExec(cmd) :
    for p in os.environ['PATH'].split(os.pathsep):
        x = isexecutable(os.path.join(p,cmd))
        if x[0]:
            return '"%s"' % os.path.join(p,cmd+x[1])
    return ""
### CheckExec(cmd) #

def SetExecEnv(exe,verbose) :
    if os.name == "nt":
        CALL = "call "
    else:
        CALL = ""
    if verbose:
        STDERR.flush()
    for v in exe.keys():
        V = v.upper()
        if  v != 'Mtimeout':
            os.environ[V] = CALL+exe['Mtimeout'][1]+exe[v][1]
        elif exe[v][0]:
            os.environ[V] = CALL+exe[v][1]
        else:
            os.environ[V] = ""
        if verbose:
            print "%s = %s : %s" % (V, exe[v][0], exe[v][1])
    if verbose:
        STDOUT.flush()
### SetExecEnv(exe,verbose) #

def ReadMapproveRc(f) :
    v = {}
    v['OS'] = OS
    v['RELEASE'] = RELEASE
    v['BITS'] = ''
    v['OIDS'] = ''
    v['STATIC'] = ''
    if os.path.isfile(f):
        r = re.compile('^([A-Z]+) = "(.*)".*$')
        for l in fileinput.input(f):
            m = r.match(l)
            if m:
                v[m.group(1)] = m.group(2)
    return v
### ReadMapproveRc(f) #

#############################################################################
#       MAIN

THISFILE = os.path.basename(sys.argv[0])
THISPATH = os.path.abspath(os.path.dirname(sys.argv[0]))
if THISFILE == "Mprofile.py":
    dftTSTPREF = "mProfiles"
    TSTDBG = str(0)
    dftIGNORE = '^[#~]'
else: # THISFILE in ["Mtest.py", "Mapprove.py"]
    dftIGNORE = '^#'
    TSTDBG = str(2+8)
    dftTSTPREF = "mTests"
TSTSUFF = "Tests"

if hasattr(os,"symlink"):
    SymlinkOrCopy = os.symlink
else:
    SymlinkOrCopy = shutil.copy

os.environ['CYGPATH_W'] = '@CYGPATH_W@'
os.environ['CYGPATH_WP'] = '@CYGPATH_WP@'

HOST = 'localhost'
#if os.environ.has_key('HOST'):
#    HOST = os.environ['HOST']
#else:
#    HOST = ''
##elif os.name != "nt":
##    HOST = os.uname()[1]
##elif os.environ.has_key('COMPUTERNAME'):
##    HOST = os.environ['COMPUTERNAME']
##else:
##    HOST = "WIN2000"
HOST = HOST.split('.', 1)[0]
os.environ['HOST'] = HOST

if os.name == "nt":
    OS    = "WindowsNT"
    if HOST == "WIN2000":
        RELEASE = "5.0"
    else:
        RELEASE = "5.2"
else:
    OS    = os.uname()[0].split("_NT-", 1)[0]
    if OS == "AIX":
        RELEASE = os.uname()[3]+"."+os.uname()[2]
    else:
        RELEASE = os.uname()[2].split("(", 1)[0]

# this is for the wine/mingw setup 
if sys.platform == 'linux2' and CONDITIONALS['CROSS_COMPILING']:
    OS = 'WindowsNT'
    HOST = "WINE"
    RELEASE = "5.2"

OSVER = OS+RELEASE
os.environ['OS'] = OS
os.environ['OSVER'] = OSVER
os.environ['RELEASE'] = RELEASE

if os.environ.has_key('COMPILER'):
    COMPILER = os.environ['COMPILER']
else:
    COMPILER = ""

if os.environ.has_key('HTMLTITLE'):
    HTMLTITLE = os.environ['HTMLTITLE']
else:
    HTMLTITLE = ""
    if COMPILER:
        HTMLTITLE = " for "+COMPILER
    HTMLTITLE = ""+THISFILE+" results"+HTMLTITLE+" on "+OSVER       #"+ ("`date`")"

URLPREFIXMAP = {
    'MonetDB': 'http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/monetdb/MonetDB/',
    'sql': 'http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/monetdb/sql/',
    'pathfinder': 'http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/monetdb/pathfinder/',
    'xml': 'http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/monetdb/xml/',
    'buildtools': 'http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/monetdb/buildtools/',
    'pf-tools': 'http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/monetdb/pf-tools/',
    'pf-haskell': 'http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/monetdb/pf-haskell/',
    }
URLPREFIX   = None
##URLSUFFIX_F = '?cvsroot=Monet-4.3'
URLSUFFIX_F = ''
##URLSUFFIX_D = '?cvsroot=Monet-4.3'
URLSUFFIX_D = ''

par = {}

def FindCmdLst(env) :
    dirs = [ os.path.join(os.getcwd(),"."), os.path.join(env['TSTSRCBASE'],".") ]
    if os.environ.has_key('HOME'):
        dirs.append(os.path.join(os.environ['HOME'],"."))
    dirs.append(path(env['MONETDB_PREFIX']+"/share/MonetDB/"))
    for d in dirs:
        f = d+'Mprofile-commands.lst'
        if os.path.isfile(f):
            return f
    return ""
### FindCmdLst(env) #

def MonetDBVersion():
    try:
        cmd = CheckExec("monetdb-config")
        pOut,pIn = popen2.popen2(cmd+' --version')
        pIn.close()
        res = pOut.readlines()[0]
        res = res.strip();
        pOut.close()
        (x,y,z) = res.split('.',2)
        return ((int(x)*100) + int(y)) * 100 + int(z);
    except:
        pass
    return 0

_MonetConfigDict = {
    '--source': '@QXMONETDB_SOURCE@',
    '--build': '@QXMONETDB_BUILD@',
    '--prefix': '@QXprefix@',
    }

def GetMonetConfig(arg) :
    # this works for arg in ('--source', '--build', '--prefix')
    return _configure(_MonetConfigDict[arg])
##    value = ""
##    #pOut,pIn = popen2.popen2(os.path.join(THISPATH,'monetdb-config')+' '+arg)
##    pOut,pIn = popen2.popen2('monetdb-config '+arg)
##    pIn.close()
##    qOut = pOut.readlines()
##    pOut.close()
##    if len(qOut):
##        value = qOut[0].strip()
##    return value
### GetMonetConfig(arg) #

SQLprefix = ''
dft = {}

def main(argv) :
    #TODO:
    #signal.signal(signal.SIGALRM, AlarmHandler)

    SQLprefix = os.environ.get('SQL_PREFIX', '')

    vars = ['MONETDB_SOURCE', 'MONETDB_BUILD', 'MONETDB_PREFIX',
            'TSTSRCBASE'  , 'TSTBLDBASE' , 'TSTTRGBASE'  ,
            'SQL_PREFIX']
    if THISFILE in ["Mtest.py", "Mprofile.py"]:
        vars = vars + [ 'MAPICLIENT', 'SQLCLIENT', 'XQUERYCLIENT', 'X100CLIENT']    #, 'MONETDB_MOD_PATH' ]
    if THISFILE == "Mprofile.py":
        vars = vars + ['CMDLST']

    env = {}
    env['VERSION'] = MonetDBVersion()

    # most intuitive (?) default settings
    dft['MONETDB_SOURCE']   = "GetMonetConfig('--source')"
    dft['MONETDB_BUILD']    = "GetMonetConfig('--build')"
    dft['MONETDB_PREFIX']   = "GetMonetConfig('--prefix')"    # or THISPATH ?
    dft['SQL_PREFIX']     = "SQLprefix"
    dft['TSTSRCBASE']     = "env['MONETDB_SOURCE']"
    dft['TSTBLDBASE']     = "env['MONETDB_BUILD']"
    dft['TSTTRGBASE']     = "env['MONETDB_PREFIX']"   # or os.getcwd() ?
    if THISFILE in ["Mtest.py", "Mprofile.py"]:
        dft['GDK_DEBUG']      = "TSTDBG"
        dft['MONETDB_MOD_PATH'] = "''"   #"os.path.join(env['MONETDB_PREFIX'],'lib')+os.pathsep+os.path.join(env['MONETDB_PREFIX'],'lib','MonetDB')"
        dft['setMONETDB_MOD_PATH'] = "'--set \"monet_mod_path='+env['MONETDB_MOD_PATH']+'\"'"
        dft['setGDK_DBFARM']     = "'--set \"gdk_dbfarm='+env['GDK_DBFARM']+'\"'"
        dft['setSQL_LOGDIR']     = "'--set \"sql_logdir='+env['SQL_LOGDIR']+'\"'"
        dft['MAPIPORT']       = "str(randomPort(30000,39999))"
        dft['SQLPORT']        = "str(randomPort(40000,49999))"
        dft['XQUERYPORT']     = "str(randomPort(50000,59999))"
        dft['MAPICLIENT']     = "'MapiClient -lmil'" # --port='+env['MAPIPORT']"
        dft['SQLCLIENT']      = "'MapiClient -lsql'" # --port='+env['SQLPORT']"
        dft['XQUERYCLIENT']   = "'MapiClient -lxquery -sxml'" # --port='+env['XQUERYPORT']"
        dft['X100CLIENT']     = "'x100run_mapi'" # --port='+env['MAPIPORT']"
    if THISFILE == "Mprofile.py":
        dft['CMDLST']         = "FindCmdLst(env)"

    #par = {}
    # get current environment
    for v in vars:
        if os.environ.has_key(v):
            env[v] = os.environ[v]
            #TODO:
            # make sure, that PATHs ar absolute

    # commandline options overrule environment
    cmd_options = [
        # long name, short name, GDK option, argument, comment
        (None, 'r', 'recursive', None,
         "recurse into subdirectories (implies 'All')"),
        ('MONETDB_SOURCE', None, 'MONETDB_SOURCE', '<path>',
         'default: "%s"' % GetMonetConfig('--source')),
        ('MONETDB_BUILD', None, 'MONETDB_BUILD', '<path>',
         'default: "%s"' % GetMonetConfig('--build')),
        ('MONETDB_PREFIX', None, 'MONETDB_PREFIX', '<path>',
         'default: "%s"' % GetMonetConfig('--prefix')),
        ('SQL_PREFIX', None, 'SQL_PREFIX', '<path>',
         'default: "%s"' % SQLprefix),
        ('TSTSRCBASE', None, 'TSTSRCBASE', '<path>',
         'default: <MONETDB_SOURCE>'),
        ('TSTBLDBASE', None, 'TSTBLDBASE', '<path>',
         'default: <MONETDB_BUILD>'),
        ('TSTTRGBASE', None, 'TSTTRGBASE', '<path>',
         'default: <MONETDB_PREFIX>'),
        ('quiet', 'q', 'quiet', None,
         "suppress messages on stdout"),
        ]

    if THISFILE in ["Mtest.py", "Mprofile.py"]:
        common_options = cmd_options + [
            (None, 'I', 'ignore', '<exp>',
             "ignore lines matching <exp> during diff (default: '%s')" % dftIGNORE),
            (None, 'C', 'context', '<num>',
             "use <num> lines of context during diff (default: -C1)"),
            (None, 'A', 'accuracy', '<num>',
             "accuracy for diff: 0=lines, 1=words, 2=chars (default: -A1)"),
            (None, 't', 'timeout', '<sec>',
             "timeout: kill (hanging) tests after <sec> seconds;\n"
             "-t0 means no timeout (default: -t60)"),
            ('debug', 'd', 'debug', '<num>',
             ("debug value to be used by Mserver (default: -d%s)\n"
              "(see `Mserver --help' for details)") % TSTDBG),
            ('monet_mod_path', None, 'monet_mod_path', '<pathlist>',
             "override Mserver's default module search path"),
            ('dbfarm', None, 'gdk_dbfarm', '<directory>',
             "override default location of database directory"),
            ('sql_logdir', None, 'sql_logdir', '<directory>',
             "override default location of transaction-log directory"),
            ('MAPICLIENT', None, 'MAPICLIENT', '<mapi-client program>',
             'default: %s' % dft['MAPICLIENT']),
            ('SQLCLIENT', None, 'SQLCLIENT', '<sql-client program>',
             'default: %s' % dft['SQLCLIENT']),
            ('XQUERYCLIENT', None, 'XQUERYCLIENT', '<XQuery-client program>',
             'default: %s' % dft['XQUERYCLIENT']),
            ('X100CLIENT', None, 'X100CLIENT', '<x100-client program>',
             'default: %s' % dft['X100CLIENT']),
            ('at', None, 'use_at', None, 'Use at command as watchdog'),
            ]

    if THISFILE == 'Mtest.py':
        options = common_options # + []
    elif THISFILE == "Mprofile.py":
        options = common_options + [
            ('CMDLIST', None, 'cmdlist', '<path>',
             "location of .Mprofile-commands.lst file; default is the first of\n" +
             "\t%s\n" % os.path.join(os.getcwd(), '.Mprofile-commands.lst') +
             "\t%s\n" % os.path.join('<TSTSRCBASE>', '.Mprofile-commands.lst') +
             "\t%s\n" % os.path.join(os.environ['HOME'],'.Mprofile-commands.lst') +
             "\t%s" % os.path.join(GetMonetConfig('--prefix'),'share','MonetDB','Mprofile-commands.lst')
             ),
            ]
    elif THISFILE == 'Mapprove.py':
        f = os.path.join(GetMonetConfig('--prefix'),dftTSTPREF,'.Mapprove.rc')
        v = ReadMapproveRc(f)
        for i in 'BITS', 'OIDS', 'STATIC':
            if v[i]:
                v[i] = '[.%s]' % v[i]
        options = cmd_options + [
            (None, 'x', 'ext', '<ext>',
             "approve only output files *.<ext><sys> (<ext> = 'out' or 'err')\n"
             "(default: <ext> = 'out' & 'err')"),
            (None, 'S', 'sys', '<sys>',
             "approve specific output *.<ext><sys>\n"
             "(<sys> = '[.<OS>[<RELEASE>]][.(32|64)bit][.oid(32|64)][.STATIC]',\n"
             "(default: longest match for <sys> = '[.%s[%s]]%s%s')"
              % (v['OS'], v['RELEASE'], v['BITS'], v['STATIC'])),
            (None, 'f', 'force', None,
             "force approval of error messages (i.e., lines starting with '!')"),
            ]
    else:
        options = []

    try:
        opts, args = monet_options.parse_options(argv[1:], options, Usage)
    except monet_options.Error:
        sys.exit(1)
    par['RECURSIVE'] = opts.get('recursive', 0)
    par['QUIET'] = opts.get('quiet', 0)
    if THISFILE in ["Mtest.py", "Mprofile.py"]:
        par['IGNORE'] = opts.get('ignore', dftIGNORE)
        par['CONTEXT'] = '-C%d' % int(opts.get('context', 1))
        a = int(opts.get('accuracy', (os.name != 'nt' and 1) or 0))
        if a not in (-1,0,1,2):
            ErrExit('Accuracy for diff (-A) must be one of: 0=lines, 1=words, 2=chars !')
        if os.name == "nt" and a != 0:
            Warn("Currently only '-A0` is supported on WindowsNT!")
            a = 0
        par['ACCURACY'] = a
        par['TIMEOUT'] = int(opts.get('timeout', 60))
        a = opts.get('debug')
        if a is not None:
            env['GDK_DEBUG'] = str(int(a))
        a = opts.get('monet_mod_path')
        if a is not None:
            env['MONETDB_MOD_PATH'] = a
        a = opts.get('gdk_dbfarm')
        if a is not None:
            env['GDK_DBFARM'] = a
        a = opts.get('sql_logdir')
        if a is not None:
            env['SQL_LOGDIR'] = a
        a = opts.get('use_at')
        if a is not None:
            env['USE_AT'] = a
    if THISFILE == 'Mapprove.py':
        a = opts.get('ext')
        if a is None:
            par['EXTENSION'] = ['out', 'err']
        elif a in ('out', 'err'):
            par['EXTENSION'] = [a]
        else:
            ErrXit("Extension (-x) must be one of: 'out', 'err' !")
        par['FORCE'] = opts.get('force', False)
        a = opts.get('sys')
        if a is None:
            par['SYSTEM'] = ''
        else:
            par['SYSTEM'] = a
    for v in vars:
        a = opts.get(v)
        if a is not None:
            env[v] = a

    quiet = par['QUIET']

    # display par's
    STDERR.flush()
    if not quiet:
        for v in par.keys():
            #os.environ[v] = par[v]
            print"%s = %s" % (v, str(par[v]))
    STDOUT.flush()
    #env['par'] = par

    #if env.has_key('MONETDB_PREFIX'):
        #bp = os.path.join(env['MONETDB_PREFIX'],"bin")
        #if os.environ.has_key('PATH'):
            #bp = bp+os.pathsep+os.environ['PATH']
        #os.environ['PATH'] = bp

    #if env.has_key('SQL_PREFIX'):
        #bp = os.path.join(env['SQL_PREFIX'],"bin")
        #if not os.path.isdir(bp):
            #bp = env['SQL_PREFIX']
        #if os.environ.has_key('PATH'):
            #bp = bp+os.pathsep+os.environ['PATH']
        #os.environ['PATH'] = bp

    # tidy-up and fall-back to defaults where necessary
    if THISFILE in ["Mtest.py", "Mprofile.py"]:
        vars_ = vars + ['MAPIPORT', 'SQLPORT', 'XQUERYPORT', 'GDK_DEBUG', 'MONETDB_MOD_PATH']
    else: # THISFILE == "Mapprove.py"
        vars_ = vars
    for v in vars_:
        if not env.has_key(v):
            env[v] = eval(dft[v])
            #TODO:
            # make sure, that PATHs are absolute
    if THISFILE in ["Mtest.py", "Mprofile.py"]:
        if env['MONETDB_MOD_PATH']:
            env['setMONETDB_MOD_PATH'] = eval(dft['setMONETDB_MOD_PATH'])
        else:
            env['setMONETDB_MOD_PATH'] = ''
        if env.has_key('GDK_DBFARM'):
            env['setGDK_DBFARM'] = eval(dft['setGDK_DBFARM'])
        else:
            env['setGDK_DBFARM'] = ''
        if env.has_key('SQL_LOGDIR'):
            env['setSQL_LOGDIR'] = eval(dft['setSQL_LOGDIR'])
        else:
            env['setSQL_LOGDIR'] = ''

    if THISFILE == "Mprofile.py"  and  not env['CMDLST']:
        try:
            Usage(options)
        except monet_options.Error:
            pass
        ErrXit("No .Mprofile-commands.lst found!")

    #TODO:
    ## in case of inconsistencies, try to fallback to "save" settings
    #
    #if not os.path.indir(TSTSRCBASE):
    #       ErrXit("Illegal TSTSRCBASE: directory '"+a"` does not exist!")
    #if not os.path.indir(MONETDB_SOURCE):
    #       ErrXit("Illegal MONETDB_SOURCE: directory '"+a"` does not exist!")
    #if not os.path.indir(MONETDB_BUILD):
    #       ErrXit("Illegal MONETDB_BUILD: directory '"+a"` does not exist!")
    #if not os.path.indir(MONETDB_PREFIX):
    #       ErrXit("Illegal MONETDB_PREFIX: directory '"+a"` does not exist!")

    # ensure consistent TSTSRCBASE
    if os.path.basename(env['TSTSRCBASE']) == TSTSUFF  and  os.path.isfile(os.path.join(env['TSTSRCBASE'],"All")):
        ErrXit('TSTSRCBASE itself must not be a test-directory, i.e., called "%s" and contain an "All" file!' % TSTSUFF)

    # make TSTxxxBASE absolute physical paths
    BACK = os.getcwd()
    for p in 'TSTSRCBASE', 'TSTBLDBASE', 'TSTTRGBASE':
        if os.path.isdir(env[p]):
            os.chdir(env[p])
            if os.getcwd() != env[p]:
                Warn(p+": Replacing logical path  "+env[p]+
                     "  by absolute physical path  "+os.getcwd())
                env[p] = os.getcwd()
        else:
            ErrXit("Illegal "+p+": directory '"+env[p]+"' does not exist!")
    os.chdir(BACK)

    if THISFILE == "Mapprove.py" \
       and not os.path.exists(os.path.join(env['TSTTRGBASE'],dftTSTPREF )) \
       and     os.path.isfile(os.path.join(env['TSTTRGBASE'],'times.lst')):
        env['TSTPREF'] = os.path.basename(env['TSTTRGBASE'])
        env['TSTTRGBASE'] = os.path.dirname(env['TSTTRGBASE'])
    else:
        env['TSTPREF'] = dftTSTPREF
    TSTPREF = env['TSTPREF']

    # read '.Mapprove.rc'
    if THISFILE == 'Mapprove.py':
        f = os.path.join(env['TSTTRGBASE'],TSTPREF,'.Mapprove.rc')
        v = ReadMapproveRc(f)
        OS = v['OS']
        RELEASE = v['RELEASE']
        OSVER = OS+RELEASE
        os.environ['OS'] = OS
        os.environ['OSVER'] = OSVER
        os.environ['RELEASE'] = RELEASE
        w = {}
        for i in 'OS', 'RELEASE', 'BITS', 'OIDS', 'STATIC':
            w[i] = re.escape(v[i])
        for i in 'BITS', 'OIDS', 'STATIC':
            j = 'TST_'+i
            env[j] = v[i]
            os.environ[j] = v[i]
            if v[i]:
                v[i] = '(.%s)?' % v[i]
                w[i] = '(\.%s)?' % w[i]
        sv = '^(.%s(%s)?)?%s%s$' % (v['OS'], v['RELEASE'], v['BITS'], v['STATIC'])
        sw = '^(\.%s(%s)?)?%s%s$' % (w['OS'], w['RELEASE'], w['BITS'], w['STATIC'])
        r = re.compile(sw)
        if not r.match(par['SYSTEM']):
            ErrXit("System (-S) must match '"+sv+"' !")

    # some relative path's for relocatable HTML output
    if env['TSTSRCBASE'] == env['TSTBLDBASE']  and  env['TSTBLDBASE'] == env['TSTTRGBASE']:
        RELSRCBASE = os.curdir
        RELBLDBASE = os.curdir
    else:
        TSTBASE = os.path.dirname(os.path.commonprefix([env['TSTSRCBASE'],env['TSTBLDBASE'],env['TSTTRGBASE']]))
        RELBASE = ((os.pardir+os.sep)*len(env['TSTTRGBASE'][len(TSTBASE+os.sep):].split(os.sep)))
        RELSRCBASE = RELBASE+env['TSTSRCBASE'][len(TSTBASE):]
        RELBLDBASE = RELBASE+env['TSTBLDBASE'][len(TSTBASE):]
    env['RELSRCBASE'] = RELSRCBASE
    env['RELBLDBASE'] = RELBLDBASE

    #STDERR.flush()
    #for v in 'RELSRCBASE', 'RELBLDBASE':
    #       print v+" = "+str(env[v])
    #STDOUT.flush()

    # find mil script for MAPI and SQL server
    if THISFILE in ["Mtest.py", "Mprofile.py"]:
        env['SQL_SERVER'] = "sql_server"
        env['SQL_TRACE'] = ""

    # fix up URLPREFIX
    global URLPREFIX
    if os.path.exists(os.path.join(env['TSTSRCBASE'], 'CVS', 'Repository')):
        repo = open(os.path.join(env['TSTSRCBASE'], 'CVS', 'Repository')).read()[:-1]
        i = repo.find('/')
        if i > 0:
            repo = repo[:i]
        URLPREFIX = URLPREFIXMAP.get(repo) # None if unknown
    # export and display env
    STDERR.flush()
    if THISFILE in ["Mtest.py", "Mprofile.py"]:
        vars_ = vars_ + ['SQL_LOGDIR','GDK_DBFARM','setMONETDB_MOD_PATH','SQL_SERVER']
    else: # THISFILE == "Mapprove.py"
        vars_ = vars_
    for v in vars_:
        os.environ[v] = env[v]
        if not quiet:
            print "%s = %s" % (v, env[v])
    if not quiet:
        print "%s = %s" % ('PATH', os.environ['PATH'])
        print "%s = %s" % ('VERSION', env['VERSION'])
    STDOUT.flush()

    # add QUIET par to env
    env['QUIET'] = quiet

    ## set/extend PATH & LD_LIBRARY_PATH
    #bp = ""        #os.path.join(env['MONETDB_PREFIX'],"bin")
    #if THISFILE in ["Mtest.py", "Mprofile.py"]:
    #       lp = env['MONETDB_MOD_PATH']
    #else: # THISFILE == "Mapprove.py"
    #       lp = ""
    #if os.name == "nt"  and  lp:
    #       if bp:
    #               bp = bp+os.pathsep+lp
    #       else:
    #               bp = lp
    #if os.environ.has_key('PATH'):
    #       if bp:
    #               bp = bp+os.pathsep+os.environ['PATH']
    #       else:
    #               bp = os.environ['PATH']
    #os.environ['PATH'] = bp
    #print "PATH = "+bp
    #if os.name == "posix":
    #       if os.environ.has_key('LD_LIBRARY_PATH'):
    #               if lp:
    #                       lp = lp+os.pathsep+os.environ['LD_LIBRARY_PATH']
    #               else:
    #                       lp = os.environ['LD_LIBRARY_PATH']
    #       os.environ['LD_LIBRARY_PATH'] = lp
    #       print "LD_LIBRARY_PATH = "+lp

    if not startswith(os.getcwd()+os.sep, env['TSTSRCBASE']+os.sep):
        Warn("Current directory "+os.getcwd()+" is no descendant of TSTSRCBASE="+env['TSTSRCBASE']+";")
        Warn("changing to TSTSRCBASE="+env['TSTSRCBASE']+", now.")
        os.chdir(env['TSTSRCBASE'])

    # check for executables, set their standard options and export them
    if THISFILE in ["Mtest.py", "Mprofile.py"]:
        exe = {}
        exe['Mtimeout']      = CheckExec('Mtimeout')     , 'Mtimeout -timeout %d ' % par['TIMEOUT']
        exe['Mserver']       = CheckExec('Mserver')      , 'Mserver "--config=%s" --debug=%s %s %s %s --set mapi_port=%s --set sql_port=%s --set xquery_port=%s --set monet_prompt= --trace' % \
                                                           (opts.config, env['GDK_DEBUG'], env['setMONETDB_MOD_PATH'], env['setGDK_DBFARM'], env['setSQL_LOGDIR'], env['MAPIPORT'], env['SQLPORT'], env['XQUERYPORT'])
        exe['Mdiff']         = CheckExec('Mdiff')        , 'Mdiff'
        exe['python']        = CheckExec('python')       , 'python'
        exe['Mapi_Client']   = CheckExec(env['MAPICLIENT'].split(None, 1)[0])  , '%s -u monetdb -P monetdb "--config=%s" --host=%s --port=%s' % (env['MAPICLIENT'], opts.config, HOST, env['MAPIPORT'])
        exe['SQL_Client']    = CheckExec(env['SQLCLIENT'].split(None, 1)[0])   , '%s -u monetdb -P monetdb --host=%s --port=%s %s' % (env['SQLCLIENT'], HOST, env['SQLPORT'], env['SQL_TRACE'])
        exe['XQuery_Client'] = CheckExec(env['XQUERYCLIENT'].split(None, 1)[0]), '%s -u monetdb -P monetdb --host=%s --port=%s' % (env['XQUERYCLIENT'], HOST, env['XQUERYPORT'])
        exe['X100_Client']   = CheckExec(env['X100CLIENT'].split(None, 1)[0])  , '%s -u monetdb -P monetdb "--config=%s" --host=%s --port=%s' % (env['X100CLIENT'], opts.config, HOST, env['MAPIPORT'])
        if par['TIMEOUT'] == 0 or not exe['Mtimeout'][0]:
            exe['Mtimeout'] = '', ''
        env['exe'] = exe
        if not quiet:
            SetExecEnv(exe,1)
        else:
            SetExecEnv(exe,0)

        #TODO:
        #exe['JAVA']       = 'java'
        #exe['JAVAC']      = 'javac'

    # parse commandline arguments
    testdirs = []
    testlist = []
    dirlist = []
    if   len(args) == 1:
        if   os.path.isdir(args[0]):
            d = os.path.abspath(args[0])
            if startswith(d+os.sep, env['TSTSRCBASE']+os.sep):
                dirlist.append(d)
            #TODO:
            #else:
                # WARNING/ERROR
        elif args[0].find(os.sep) != -1:
            ErrXit("'"+args[0]+"` is neither a valid directory in "+os.getcwd()+" nor a valid test-name!")
        elif args[0] != "All":
            #TODO:
            # check, whether args[0] in All
            testlist.append(args[0])
    elif len(args) > 1:
        i = 0
        while i < len(args)  and  os.path.isdir(args[i]):
            d = os.path.abspath(args[i])
            if startswith(d+os.sep, env['TSTSRCBASE']+os.sep):
                dirlist.append(os.path.abspath(args[i]))
            #TODO:
            #else:
                # WARNING/ERROR
            i = i + 1
        if len(dirlist) == 1  and  i < len(args)  and  args[i] != "All":
            while i < len(args):
                if args[i].find(os.sep) == -1:
                    #TODO:
                    # check, whether args[i] in All
                    testlist.append(args[i])
                #TODO
                #else:
                    # ERROR/WARNING
                i = i + 1
        else:
            if i < len(args)  and  args[i] == "All":
                i = i + 1
            #TODO:
            #if i < len(args):
                #if len(dirlist) > 1:
                    # Warn: dirlist => ignore testlist, assume All
                #else:
                    # Warn: All => ignore testlist
    if not dirlist:
        dirlist.append(os.getcwd())
    if par['RECURSIVE']:
        #TODO
        #if testlist:
            # WARNING
        testlist = []
        for d in dirlist:
            for t in find_test_dirs(d):
                if t not in testdirs:
                    testdirs.append(t)
    else:
        for d in dirlist:
            if   os.path.basename(d) == TSTSUFF  and  os.path.isfile(os.path.join(d,"All")):
                testdirs.append(os.path.dirname(os.path.abspath(d)))
            elif os.path.isdir(os.path.join(d,TSTSUFF))  and  os.path.isfile(os.path.join(d,TSTSUFF,"All")):
                testdirs.append(os.path.abspath(d))
            else:
                Warn("No tests found in '"+d+"`; skipping directory!")

    if len(testdirs) > 1  and  testlist:
        testlist = []
        #TODO
        # WARNING
    if not testdirs:
        Warn("No tests found in "+str(dirlist)+"!")
        sys.exit(1)

    BusyPorts = []

    if THISFILE in ["Mtest.py", "Mprofile.py"]:

        if os.name == "nt":
            n = os.path.join(THISPATH,"MkillNT.")
            for x in "bat", "py":
                f = n+x
                if os.path.isfile(f):
                    shutil.copy(f,"C:"+os.sep+"Tools")

        if os.path.exists(os.path.join(env['TSTTRGBASE'],TSTPREF)):
            try:
                shutil.rmtree(os.path.join(env['TSTTRGBASE'],TSTPREF))
            except:
                ErrXit("Failed to remove %s" % os.path.join(env['TSTTRGBASE'],TSTPREF))
        if not os.path.exists(env['GDK_DBFARM']):
            #TODO: set mode to umask
            os.makedirs(env['GDK_DBFARM'])
        if not os.path.exists(env['SQL_LOGDIR']):
            #TODO: set mode to umask
            os.makedirs(env['SQL_LOGDIR'])

        if os.path.exists(os.path.join(env['GDK_DBFARM'],TSTPREF)):
            try:
                shutil.rmtree(os.path.join(env['GDK_DBFARM'],TSTPREF))
            except:
                ErrXit("Failed to remove %s" % os.path.join(env['GDK_DBFARM'],TSTPREF))
        try:
            os.makedirs(os.path.join(env['GDK_DBFARM'],TSTPREF))
        except:
            ErrXit("Failed to create %s" % os.path.join(env['GDK_DBFARM'],TSTPREF))

        os.makedirs(os.path.join(env['TSTTRGBASE'],TSTPREF))
        if env['VERSION'] >= 49900:
            QUIT = 'clients.quit();\n'
        else:
            QUIT = 'quit();\n'
        if Check('%s%s --dbname=%s' % (env['exe']['Mtimeout'][1], env['exe']['Mserver'][1], TSTPREF), QUIT):
            sys.exit(1)
        if GetBitsAndOIDsAndModsAndStatic(env):
            sys.exit(1)
        STDERR.flush()
        if not quiet:
            print "Bits: ", env['TST_BITS']
            print "OIDs: ", env['TST_OIDS']
            print "Modules: ", env['TST_MODS']
        STDOUT.flush()

        is_pf = False
        am_init_pf = re.compile('AM_INIT_AUTOMAKE\("pathfinder",.*,.*\)', re.MULTILINE)
        configure_ag = os.path.join(env['TSTSRCBASE'],"configure.ag")
        if os.path.isfile(configure_ag):
            for l in fileinput.input(configure_ag):
                if am_init_pf.match(l) and not is_pf:
                    is_pf = True
        if is_pf:
            if not CheckExec('pf'):
                ErrXit('Stopping Pathfinder testing as XQuery compiler "pf" is not available!')
            MissingMods = CheckMods(env, '', 'XQUERY', '') 
            if MissingMods:
                ErrXit('Stopping Pathfinder testing as modules "%s" are missing!' % str(MissingMods))

        host = 'localhost'
        for S in 'MAPI', 'SQL', 'XQUERY':
            port = int(env[S+'PORT'])
            busy, Serrno, Serrstr = CheckPort(host,port)
            if busy:
                Warn("Skipping %s tests as %sPORT=%s is not available (Error #%d: '%s')!" % (S,S,env[S+'PORT'],Serrno,Serrstr))
                BusyPorts.append(S)
        if 'SQL' not in BusyPorts  and  'MAPI' in BusyPorts:
            Warn("Skipping SQL tests as MAPIPORT=%s is not available!" % env['MAPIPORT'])
            BusyPorts.append('SQL')

        # create '.Mapprove.rc'
        env['OS'] = os.environ['OS']
        env['RELEASE'] = os.environ['RELEASE']
        n = os.path.join(env['TSTTRGBASE'],TSTPREF,'.Mapprove.rc')
        f = open(n, 'w')
        for v in 'OS', 'RELEASE', 'TST_BITS', 'TST_OIDS', 'TST_STATIC':
            w = v.replace('TST_','')
            f.write('%s = "%s"\n' % (w, env[v]))
        f.close()

    STDERR.flush()
    t_ = 0
    body = []
    if len(testdirs) == 1:
        if testlist:
            tsts = "tests "+str(testlist)
        else:
            tsts = "all tests"
        if not quiet:
            print "\nRunning %s in directory %s.\n" % (tsts , testdirs[0])
        t_, elem = PerformDir(env, testdirs[0], testlist, BusyPorts)
        if elem is not None:
            body.append(elem)
    else:
        testdirs.sort()
        if not quiet:
            print "\nRunning all tests in directories %s.\n" % str(testdirs)
        for d in testdirs:
            t, elem = PerformDir(env, d, [], BusyPorts)
            t_ = t_ + t
            if elem is not None:
                body.append(elem)

    if THISFILE in ["Mtest.py", "Mprofile.py"]:
        fn = os.path.join(env['TSTTRGBASE'],TSTPREF,"times.")
        fl = open(fn+"lst","w")
        Failure = [0,0,0,0]
        for TSTDIR,TST,tt,FtOut,FtErr in TIMES:
            fl.write(url(os.path.join(TSTDIR,TST))+":\t"+tt+
                        "\t"+FAILURES[FtOut]+
                        "\t"+FAILURES[FtErr]+"\n")
            if TST != '':
                Failure[max(FtOut,FtErr)] += 1
        fl.write(":\t%7.3f\n" % t_)
        fl.close()

    if THISFILE in ["Mtest.py", "Mprofile.py"]:
        env['TSTDIR'] = ""
        env['TSTTRGDIR'] = os.path.join(env['TSTTRGBASE'],TSTPREF)
        CreateHtmlIndex(env, *body)

        Failed = 0
        for f in Failure[1:]:
            Failed += f
        num_tests = 0
        for f in Failure:
            num_tests += f
        how = ""
        what = ""
        if Failure[F_SKIP]:
            what += "  %3d out of %3d tests could not be executed\n" % (Failure[-1],num_tests)
        if Failure[F_WARN]:
            how = "slightly"
            what += "  %3d out of %3d tests produced %s different output\n" % (Failure[1],num_tests,how)
        if Failure[F_ERROR]:
            how = "SIGNIFICANTLY"
            what += "  %3d out of %3d tests produced %s different output\n" % (Failure[2],num_tests,how)
        STDERR.flush()
        if Failed:
            print """\

 !ERROR:  Testing FAILED %s !

%s
 First, check the testing results in  %s  !

 Then, fix the problems by:
  - fixing sources and test scripts
  - fixing stable output by hand
  - approving test output by Mapprove.py (cf. Mapprove.py -?)

 After that, re-run Mtest.
""" % (how, what, os.path.join(env['TSTTRGBASE'],TSTPREF,"index.html"))
            sys.exit(1)
        else:
            if not quiet:
                print """\

 No differences encountered during testing.

 If necessary, you can checkin your modifications, now.
"""
            else:
                print ""
            sys.exit(0)

    if THISFILE == "Mapprove.py":
        print """\

 First, run 'cvs -q diff` to check what you have changed.

 Then, re-run Mtest.py.
"""
        if t_:
            if par['FORCE']:
                print """\
 In case (some of) the approved error messages are not correct/expected,
 re-run Mapprove.py without -f to skip their approval.
"""
            else:
                print """\
 In case (some of) the skipped error messages are correct/expected,
 re-run Mapprove.py with -f to force their approval.
"""
### main(argv) #

if __name__ == "__main__":
    if '--trace' in sys.argv:
        sys.argv.remove('--trace')
        import trace
        t = trace.Trace(trace=1, count=0)
        t.runfunc(main, sys.argv)
    else:
        main(sys.argv)

#       END
#############################################################################
