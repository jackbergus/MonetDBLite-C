# casting to int

var b := new(void,int);
b.append(0);
b.append(1);
b.append(32767);
b.append(32768);
b.append(32769);
b.append(2147483647);
#b.append(2147483648); # implicitly casted to lng
#b.append(2147483649); # implicitly casted to lng
b.append(-2147483647);
#b.append(-2147483648); # implicitly casted to lng
#b.append(-2147483649); # implicitly casted to lng
b.access(BAT_READ);
b.print();

# from bit
b := new(void,bit);
b.append(true);
b.append(false);
b.access(BAT_READ);
b.[int]().print();

# from chr
b := new(void,chr);
b.append('a');
b.access(BAT_READ);
b.[int]().print();

# from sht
b := new(void,sht);
b.append(sht(1));
b.append(sht(32767));
b.access(BAT_READ);
b.[int]().print();

# from int
b := new(void,int);
b.append(1);
b.append(32767);
b.append(32768);
b.append(2147483647);
b.append(-2147483647);
b.append(2147483647+1);
b.append(-2147483647 - 1);
# should this produce nil (overflow)?
b.append(2147483647+2);
# should this produce nil (overflow)?
b.append(-2147483647 - 2);
b.access(BAT_READ);
b.[int]().print();

# from lng
b := new(void,lng);
b.append(1LL);
b.append(2147483647LL);
b.append(2147483648LL);
b.append(2147483649LL);
b.append(-2147483647LL);
b.append(-2147483648LL);
b.append(-2147483649LL);
b.access(BAT_READ);
b.[int]().print();

# from flt
b := new(void,flt);
b.append(0.0);
b.append(0.1);
b.append(0.5);
b.append(0.9);
b.append(1.0);
b.append(-0.1);
b.append(-0.5);
b.append(-0.9);
b.append(-1.0);
b.append(2147483647.0);
b.append(2147483648.0);
b.append(2147483649.0);
b.append(-2147483647.0);
b.append(-2147483648.0);
b.append(-2147483649.0);
b.access(BAT_READ);
b.[int]().print();

# from dbl
b := new(void,dbl);
b.append(0.0LL);
b.append(0.1LL);
b.append(0.5LL);
b.append(0.9LL);
b.append(1.0LL);
b.append(-0.1LL);
b.append(-0.5LL);
b.append(-0.9LL);
b.append(-1.0LL);
b.append(2147483647.0LL);
b.append(2147483648.0LL);
b.append(2147483649.0LL);
b.append(-2147483647.0LL);
b.append(-2147483648.0LL);
b.append(-2147483649.0LL);
b.access(BAT_READ);
b.[int]().print();

# from oid
b := new(void,oid);
b.append(2@0);
b.append(2@1);
b.append(2147483647@0);
b.append(2147483648@0);
b.append(2147483649@0);
b.access(BAT_READ);
b.[int]().print();

# from str
b := new(void,str);
b.append("0");
b.append("32767");
b.append("2147483647");
b.append("2147483648");
b.append("2147483649");
b.append("-2147483647");
b.append("-2147483648");
b.append("-2147483649");
b.append("");
b.append("random string");
b.access(BAT_READ);
b.[int]().print();

# to bit

# from bit
b := new(void,bit);
b.append(true);
b.append(false);
b.access(BAT_READ);
b.[bit]().print();

# from chr
b := new(void,chr);
b.append('a');
b.append(chr(0));
b.access(BAT_READ);
b.[bit]().print();

# from sht
b := new(void,sht);
b.append(sht(0));
b.append(sht(1));
b.append(sht(-1));
b.append(sht(4096));
b.access(BAT_READ);
b.[bit]().print();

# from int
b := new(void,int);
b.append(0);
b.append(1);
b.append(-1);
b.append(4096);
b.access(BAT_READ);
b.[bit]().print();

# from lng
b := new(void,lng);
b.append(0LL);
b.append(1LL);
b.append(-1LL);
b.append(4096LL);
b.access(BAT_READ);
b.[bit]().print();

# from flt
b := new(void,flt);
b.append(0.0);
b.append(0.1);
b.append(1.0);
b.append(-0.1);
b.append(-1.0);
b.append(4096.0);
b.access(BAT_READ);
b.[bit]().print();

# from dbl
b := new(void,dbl);
b.append(0.0LL);
b.append(0.1LL);
b.append(1.0LL);
b.append(-0.1LL);
b.append(-1.0LL);
b.append(4096.0LL);
b.access(BAT_READ);
b.[bit]().print();

# from oid
b := new(void,oid);
b.append(0@0);
b.append(1@0);
b.append(4096@0);
b.append(1073741824@0);
b.append(2147483647@0);
b.access(BAT_READ);
b.[bit]().print();

# from str
b := new(void,str);
b.append("true");
b.append("false");
b.append("0");
b.append("1");
b.append("random string");
b.append("");
b.access(BAT_READ);
b.[bit]().print();

# to sht

# from bit
b := new(void,bit);
b.append(true);
b.append(false);
b.access(BAT_READ);
b.[sht]().print();

# from chr
b := new(void,chr);
b.append('a');
b.append(chr(0));
b.access(BAT_READ);
b.[sht]().print();

# from int
b := new(void,int);
b.append(0);
b.append(32767);
b.append(32768);
b.append(32769);
b.append(-32767);
b.append(-32768);
b.append(-32769);
b.append(2147483647);
b.access(BAT_READ);
b.[sht]().print();

# from lng
b := new(void,lng);
b.append(0LL);
b.append(32767LL);
b.append(32768LL);
b.append(32769LL);
b.append(-32767LL);
b.append(-32768LL);
b.append(-32769LL);
b.append(2147483647LL);
b.access(BAT_READ);
b.[sht]().print();

# from flt
b := new(void,flt);
b.append(0.0);
b.append(0.1);
b.append(0.5);
b.append(0.9);
b.append(1.0);
b.append(-0.1);
b.append(-0.5);
b.append(-0.9);
b.append(-1.0);
b.append(32767.0);
b.append(32768.0);
b.append(32769.0);
b.append(-32767.0);
b.append(-32768.0);
b.append(-32769.0);
b.access(BAT_READ);
b.[sht]().print();

# from dbl
b := new(void,dbl);
b.append(0.0LL);
b.append(0.1LL);
b.append(0.5LL);
b.append(0.9LL);
b.append(1.0LL);
b.append(-0.1LL);
b.append(-0.5LL);
b.append(-0.9LL);
b.append(-1.0LL);
b.append(32767.0LL);
b.append(32768.0LL);
b.append(32769.0LL);
b.append(-32767.0LL);
b.append(-32768.0LL);
b.append(-32769.0LL);
b.access(BAT_READ);
b.[sht]().print();

# from oid
b := new(void,oid);
b.append(0@0);
b.append(1@0);
b.append(4096@0);
b.append(1073741824@0);
b.append(2147483647@0);
b.access(BAT_READ);
b.[sht]().print();

# from str
b := new(void,str);
b.append("0");
b.append("32767");
b.append("32768");
b.append("32769");
b.append("-32767");
b.append("-32768");
b.append("-32769");
b.append("");
b.append("random string");
b.access(BAT_READ);
b.[sht]().print();

# to long

b := new(void,lng);
b.append(0LL);
b.append(1LL);
b.append(32767LL);
b.append(32768LL);
b.append(32769LL);
b.append(2147483647LL);
b.append(2147483648LL);
b.append(2147483649LL);
b.append(-2147483647LL);
b.append(-2147483648LL);
b.append(-2147483649LL);
b.append(9223372036854775807LL);
b.append(9223372036854775808LL);
b.append(9223372036854775809LL);
b.append(-9223372036854775807LL);
b.append(-9223372036854775808LL);
b.append(-9223372036854775809LL);
b.access(BAT_READ);
b.print();

# from bit
b := new(void,bit);
b.append(true);
b.append(false);
b.access(BAT_READ);
b.[lng]().print();

# from chr
b := new(void,chr);
b.append('a');
b.access(BAT_READ);
b.[lng]().print();

# from sht
b := new(void,sht);
b.append(sht(1));
b.append(sht(32767));
b.access(BAT_READ);
b.[lng]().print();

# from int
b := new(void,int);
b.append(1);
b.append(32767);
b.append(32768);
b.append(2147483647);
b.append(-2147483647);
b.append(2147483647+1);
b.append(-2147483647 - 1);
# should this produce nil (overflow)?
b.append(2147483647+2);
# should this produce nil (overflow)?
b.append(-2147483647 - 2);
b.access(BAT_READ);
b.[lng]().print();

# from lng
# from flt
b := new(void,flt);
b.append(0.0);
b.append(0.1);
b.append(0.5);
b.append(0.9);
b.append(1.0);
b.append(-0.1);
b.append(-0.5);
b.append(-0.9);
b.append(-1.0);
b.append(2147483647.0);
b.append(2147483648.0);
b.append(2147483649.0);
b.append(-2147483647.0);
b.append(-2147483648.0);
b.append(-2147483649.0);
b.append(9223372036854775807.0);
b.append(9223372036854775808.0);
b.append(9223372036854775809.0);
b.append(-9223372036854775807.0);
b.append(-9223372036854775808.0);
b.append(-9223372036854775809.0);
b.access(BAT_READ);
b.[lng]().print();

# from dbl
b := new(void,dbl);
b.append(0.0LL);
b.append(0.1LL);
b.append(0.5LL);
b.append(0.9LL);
b.append(1.0LL);
b.append(-0.1LL);
b.append(-0.5LL);
b.append(-0.9LL);
b.append(-1.0LL);
b.append(2147483647.0LL);
b.append(2147483648.0LL);
b.append(2147483649.0LL);
b.append(-2147483647.0LL);
b.append(-2147483648.0LL);
b.append(-2147483649.0LL);
b.append(9223372036854775807.0LL);
b.append(9223372036854775808.0LL);
b.append(9223372036854775809.0LL);
b.append(-9223372036854775807.0LL);
b.append(-9223372036854775808.0LL);
b.append(-9223372036854775809.0LL);
b.access(BAT_READ);
b.[lng]().print();

# from oid
b := new(void,oid);
b.append(2@0);
b.append(2@1);
b.append(2147483647@0);
b.append(2147483648@0);
b.append(2147483649@0);
b.append(9223372036854775807@0);
b.append(9223372036854775808@0);
b.append(9223372036854775809@0);
b.access(BAT_READ);
b.[lng]().print();

# from str
b := new(void,str);
b.append("0");
b.append("32767");
b.append("2147483647");
b.append("2147483648");
b.append("2147483649");
b.append("-2147483647");
b.append("-2147483648");
b.append("-2147483649");
b.append("");
b.append("random string");
b.append("9223372036854775807");
b.append("9223372036854775808");
b.append("9223372036854775809");
b.append("-9223372036854775807");
b.append("-9223372036854775808");
b.append("-9223372036854775809");
b.access(BAT_READ);
b.[lng]().print();

# to flt

# from bit
b := new(void,bit);
b.append(true);
b.append(false);
b.access(BAT_READ);
b.[flt]().print();

# from chr
b := new(void,chr);
b.append('a');
b.access(BAT_READ);
b.[flt]().print();

# from sht
b := new(void,sht);
b.append(sht(1));
b.append(sht(32767));
b.access(BAT_READ);
b.[flt]().print();

# from int
b := new(void,int);
b.append(1);
b.append(32767);
b.append(32768);
b.append(2147483647);
b.append(-2147483647);
b.append(2147483647+1);
b.append(-2147483647 - 1);
# should this produce nil (overflow)?
b.append(2147483647+2);
# should this produce nil (overflow)?
b.append(-2147483647 - 2);
b.access(BAT_READ);
b.[flt]().print();

# from lng
b := new(void,lng);
b.append(1LL);
b.append(2147483647LL);
b.append(2147483648LL);
b.append(2147483649LL);
b.append(-2147483647LL);
b.append(-2147483648LL);
b.append(-2147483649LL);
b.append(9223372036854775807LL);
b.append(9223372036854775808LL);
b.append(9223372036854775809LL);
b.append(-9223372036854775807LL);
b.append(-9223372036854775808LL);
b.append(-9223372036854775809LL);
b.access(BAT_READ);
b.[flt]().print();

# from dbl
b := new(void,dbl);
b.append(0.0LL);
b.append(0.1LL);
b.append(0.5LL);
b.append(0.9LL);
b.append(1.0LL);
b.append(-0.1LL);
b.append(-0.5LL);
b.append(-0.9LL);
b.append(-1.0LL);
b.append(2147483647.0LL);
b.append(2147483648.0LL);
b.append(2147483649.0LL);
b.append(-2147483647.0LL);
b.append(-2147483648.0LL);
b.append(-2147483649.0LL);
b.access(BAT_READ);
b.[flt]().print();

# from oid
b := new(void,oid);
b.append(2@0);
b.append(2@1);
b.append(2147483647@0);
b.append(2147483648@0);
b.append(2147483649@0);
b.access(BAT_READ);
b.[flt]().print();

# from str
b := new(void,str);
b.append("0");
b.append("32767");
b.append("2147483647");
b.append("2147483648");
b.append("2147483649");
b.append("-2147483647");
b.append("-2147483648");
b.append("-2147483649");
b.append("0.0");
b.append("0.1");
b.append("1.0");
b.append("1e0");
b.append("1e1");
b.append("1e10");
b.append("1e+10");
b.append("1e-10");
b.append("1.e0");
b.append("1.e1");
b.append("1.e10");
b.append("1.e+10");
b.append("1.e-10");
b.append("1.0e0");
b.append("1.0e1");
b.append("1.0e10");
b.append("1.0e+10");
b.append("1.0e-10");
b.append("-0.0");
b.append("-0.1");
b.append("-1.0");
b.append("-1e0");
b.append("-1e1");
b.append("-1e10");
b.append("-1e+10");
b.append("-1e-10");
b.append("-1.e0");
b.append("-1.e1");
b.append("-1.e10");
b.append("-1.e+10");
b.append("-1.e-10");
b.append("-1.0e0");
b.append("-1.0e1");
b.append("-1.0e10");
b.append("-1.0e+10");
b.append("-1.0e-10");
b.append("1E0");
b.append("1E1");
b.append("1E10");
b.append("1E+10");
b.append("1E-10");
b.append("1.E0");
b.append("1.E1");
b.append("1.E10");
b.append("1.E+10");
b.append("1.E-10");
b.append("1.0E0");
b.append("1.0E1");
b.append("1.0E10");
b.append("1.0E+10");
b.append("1.0E-10");
b.append("-1E0");
b.append("-1E1");
b.append("-1E10");
b.append("-1E+10");
b.append("-1E-10");
b.append("-1.E0");
b.append("-1.E1");
b.append("-1.E10");
b.append("-1.E+10");
b.append("-1.E-10");
b.append("-1.0E0");
b.append("-1.0E1");
b.append("-1.0E10");
b.append("-1.0E+10");
b.append("-1.0E-10");
# flt range is -3.402823466E+38F to 3.402823466E+38F which is
# -3.4028234663852886e+38 to 3.4028234663852886e+38 in double
# precission
b.append("340282347000000000000000000000000000000");
b.append("340282346600000000000000000000000000000");
b.append("340282346700000000000000000000000000000");
b.append("-340282346600000000000000000000000000000");
b.append("-340282346700000000000000000000000000000");
b.append("3.402823466E+38");
b.append("3.402823467E+38");
b.append("0.3402823466E+39");
b.append("34.02823466E+37");
b.append("-3.402823466E+38");
b.append("-3.402823467E+38");
b.append("-0.3402823466E+39");
b.append("-34.02823466E+37");
b.append("");
b.append("random string");
b.access(BAT_READ);
b.[flt]().print();

# to dbl

# from bit
b := new(void,bit);
b.append(true);
b.append(false);
b.access(BAT_READ);
b.[dbl]().print();

# from chr
b := new(void,chr);
b.append('a');
b.access(BAT_READ);
b.[dbl]().print();

# from sht
b := new(void,sht);
b.append(sht(1));
b.append(sht(32767));
b.access(BAT_READ);
b.[dbl]().print();

# from int
b := new(void,int);
b.append(1);
b.append(32767);
b.append(32768);
b.append(2147483647);
b.append(-2147483647);
b.append(2147483647+1);
b.append(-2147483647 - 1);
# should this produce nil (overflow)?
b.append(2147483647+2);
# should this produce nil (overflow)?
b.append(-2147483647 - 2);
b.access(BAT_READ);
b.[dbl]().print();

# from lng
b := new(void,lng);
b.append(1LL);
b.append(2147483647LL);
b.append(2147483648LL);
b.append(2147483649LL);
b.append(-2147483647LL);
b.append(-2147483648LL);
b.append(-2147483649LL);
b.append(9223372036854775807LL);
b.append(9223372036854775808LL);
b.append(9223372036854775809LL);
b.append(-9223372036854775807LL);
b.append(-9223372036854775808LL);
b.append(-9223372036854775809LL);
b.access(BAT_READ);
b.[dbl]().print();

# from flt
b := new(void,flt);
b.append(0.0);
b.append(0.1);
b.append(0.5);
b.append(0.9);
b.append(1.0);
b.append(-0.1);
b.append(-0.5);
b.append(-0.9);
b.append(-1.0);
b.append(2147483647.0);
b.append(2147483648.0);
b.append(2147483649.0);
b.append(-2147483647.0);
b.append(-2147483648.0);
b.append(-2147483649.0);
b.access(BAT_READ);
b.[dbl]().print();

# from oid
b := new(void,oid);
b.append(2@0);
b.append(2@1);
b.append(2147483647@0);
b.append(2147483648@0);
b.append(2147483649@0);
b.access(BAT_READ);
b.[dbl]().print();

# from str
b := new(void,str);
b.append("0");
b.append("32767");
b.append("2147483647");
b.append("2147483648");
b.append("2147483649");
b.append("-2147483647");
b.append("-2147483648");
b.append("-2147483649");
b.append("0.0");
b.append("0.1");
b.append("1.0");
b.append("1e0");
b.append("1e1");
b.append("1e10");
b.append("1e+10");
b.append("1e-10");
b.append("1.e0");
b.append("1.e1");
b.append("1.e10");
b.append("1.e+10");
b.append("1.e-10");
b.append("1.0e0");
b.append("1.0e1");
b.append("1.0e10");
b.append("1.0e+10");
b.append("1.0e-10");
b.append("-0.0");
b.append("-0.1");
b.append("-1.0");
b.append("-1e0");
b.append("-1e1");
b.append("-1e10");
b.append("-1e+10");
b.append("-1e-10");
b.append("-1.e0");
b.append("-1.e1");
b.append("-1.e10");
b.append("-1.e+10");
b.append("-1.e-10");
b.append("-1.0e0");
b.append("-1.0e1");
b.append("-1.0e10");
b.append("-1.0e+10");
b.append("-1.0e-10");
b.append("1E0");
b.append("1E1");
b.append("1E10");
b.append("1E+10");
b.append("1E-10");
b.append("1.E0");
b.append("1.E1");
b.append("1.E10");
b.append("1.E+10");
b.append("1.E-10");
b.append("1.0E0");
b.append("1.0E1");
b.append("1.0E10");
b.append("1.0E+10");
b.append("1.0E-10");
b.append("-1E0");
b.append("-1E1");
b.append("-1E10");
b.append("-1E+10");
b.append("-1E-10");
b.append("-1.E0");
b.append("-1.E1");
b.append("-1.E10");
b.append("-1.E+10");
b.append("-1.E-10");
b.append("-1.0E0");
b.append("-1.0E1");
b.append("-1.0E10");
b.append("-1.0E+10");
b.append("-1.0E-10");
b.append("340282346600000000000000000000000000000");
b.append("340282346700000000000000000000000000000");
b.append("-340282346600000000000000000000000000000");
b.append("-340282346700000000000000000000000000000");
b.append("3.402823466E+38");
b.append("3.402823467E+38");
b.append("0.3402823466E+39");
b.append("34.02823466E+37");
b.append("-3.402823466E+38");
b.append("-3.402823467E+38");
b.append("-0.3402823466E+39");
b.append("-34.02823466E+37");
# dbl range is -1.7976931348623157E+308 to 1.7976931348623157E+308.
b.append("179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
b.append("179769313486231580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
b.append("-179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
b.append("-179769313486231580000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
b.append("1.7976931348623157E+308");
b.append("1.7976931348623158E+308");
b.append("0.17976931348623157E+309");
b.append("17.976931348623157E+307");
b.append("-1.7976931348623157E+308");
b.append("-1.7976931348623158E+308");
b.append("-0.17976931348623157E+309");
b.append("-17.976931348623157E+307");
b.append("");
b.append("random string");
b.access(BAT_READ);
b.[dbl]().print();

# to oid

# from bit
b := new(void,bit);
b.append(true);
b.append(false);
b.access(BAT_READ);
b.[oid]().print();

# from chr
b := new(void,chr);
b.append('a');
b.access(BAT_READ);
b.[oid]().print();

# from sht
b := new(void,sht);
b.append(sht(1));
b.append(sht(32767));
b.access(BAT_READ);
b.[oid]().print();

# from int
b := new(void,int);
b.append(1);
b.append(32767);
b.append(32768);
b.append(2147483647);
b.append(-2147483647);
b.append(2147483647+1);
b.append(-2147483647 - 1);
# should this produce nil (overflow)?
b.append(2147483647+2);
# should this produce nil (overflow)?
b.append(-2147483647 - 2);
b.access(BAT_READ);
b.[oid]().print();

# from lng
b := new(void,lng);
b.append(1LL);
b.append(2147483647LL);
b.append(2147483648LL);
b.append(2147483649LL);
b.append(-2147483647LL);
b.append(-2147483648LL);
b.append(-2147483649LL);
b.access(BAT_READ);
b.[oid]().print();

# from flt
b := new(void,flt);
b.append(0.0);
b.append(0.1);
b.append(0.5);
b.append(0.9);
b.append(1.0);
b.append(-0.1);
b.append(-0.5);
b.append(-0.9);
b.append(-1.0);
b.append(2147483647.0);
b.append(2147483648.0);
b.append(2147483649.0);
b.append(-2147483647.0);
b.append(-2147483648.0);
b.append(-2147483649.0);
b.access(BAT_READ);
b.[oid]().print();

# from dbl
b := new(void,dbl);
b.append(0.0LL);
b.append(0.1LL);
b.append(0.5LL);
b.append(0.9LL);
b.append(1.0LL);
b.append(-0.1LL);
b.append(-0.5LL);
b.append(-0.9LL);
b.append(-1.0LL);
b.append(2147483647.0LL);
b.append(2147483648.0LL);
b.append(2147483649.0LL);
b.append(-2147483647.0LL);
b.append(-2147483648.0LL);
b.append(-2147483649.0LL);
b.access(BAT_READ);
b.[oid]().print();

# from oid
b := new(void,oid);
b.append(2@0);
b.append(2@1);
b.append(2147483647@0);
b.append(2147483648@0);
b.append(2147483649@0);
b.access(BAT_READ);
b.[oid]().print();

# from str
b := new(void,str);
b.append("0");
b.append("32767");
b.append("2147483647");
b.append("2147483648");
b.append("2147483649");
b.append("-2147483647");
b.append("-2147483648");
b.append("-2147483649");
b.append("");
b.append("random string");
b.access(BAT_READ);
b.[oid]().print();


# to str

# from bit
b := new(void,bit);
b.append(true);
b.append(false);
b.access(BAT_READ);
b.[str]().print();

# from chr
b := new(void,chr);
b.append('a');
b.access(BAT_READ);
b.[str]().print();

# from sht
b := new(void,sht);
b.append(sht(1));
b.append(sht(32767));
b.access(BAT_READ);
b.[str]().print();

# from int
b := new(void,int);
b.append(1);
b.append(32767);
b.append(32768);
b.append(2147483647);
b.append(-2147483647);
b.append(2147483647+1);
b.append(-2147483647 - 1);
# should this produce nil (overflow)?
b.append(2147483647+2);
# should this produce nil (overflow)?
b.append(-2147483647 - 2);
b.access(BAT_READ);
b.[str]().print();

# from lng
b := new(void,lng);
b.append(1LL);
b.append(2147483647LL);
b.append(2147483648LL);
b.append(2147483649LL);
b.append(-2147483647LL);
b.append(-2147483648LL);
b.append(-2147483649LL);
b.access(BAT_READ);
b.[str]().print();

# from flt
b := new(void,flt);
b.append(0.0);
b.append(0.1);
b.append(0.5);
b.append(0.9);
b.append(1.0);
b.append(-0.1);
b.append(-0.5);
b.append(-0.9);
b.append(-1.0);
b.append(2147483647.0);
b.append(2147483648.0);
b.append(2147483649.0);
b.append(-2147483647.0);
b.append(-2147483648.0);
b.append(-2147483649.0);
b.access(BAT_READ);
b.[str]().print();

# from dbl
b := new(void,dbl);
b.append(0.0LL);
b.append(0.1LL);
b.append(0.5LL);
b.append(0.9LL);
b.append(1.0LL);
b.append(-0.1LL);
b.append(-0.5LL);
b.append(-0.9LL);
b.append(-1.0LL);
b.append(2147483647.0LL);
b.append(2147483648.0LL);
b.append(2147483649.0LL);
b.append(-2147483647.0LL);
b.append(-2147483648.0LL);
b.append(-2147483649.0LL);
b.access(BAT_READ);
b.[str]().print();

# from oid
b := new(void,oid);
b.append(2@0);
b.append(2@1);
b.append(2147483647@0);
b.append(2147483648@0);
b.append(2147483649@0);
b.access(BAT_READ);
b.[str]().print();

# from str
b := new(void,str);
b.append("0");
b.append("32767");
b.append("2147483647");
b.append("2147483648");
b.append("2147483649");
b.append("-2147483647");
b.append("-2147483648");
b.append("-2147483649");
b.append("");
b.append("random string");
b.access(BAT_READ);
b.[str]().print();

