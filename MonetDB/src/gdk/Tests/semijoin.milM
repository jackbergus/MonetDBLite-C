var a:=new(void,int).seqbase(oid(0));
a.append(0);
a.append(1);
a.append(int(nil));

var b:=new(int,int);
b.insert(0,0);
b.insert(0,1);
b.insert(0,2);
b.insert(0,3);
b.insert(0,4);
b.insert(0,5);
b.insert(0,6);
b.insert(0,7);
b.insert(0,8);
b.insert(0,9);
b.insert(0,int(nil));
b.insert(1,0);
b.insert(1,1);
b.insert(1,2);
b.insert(1,3);
b.insert(1,4);
b.insert(1,5);
b.insert(1,6);
b.insert(1,7);
b.insert(1,8);
b.insert(1,9);
b.insert(1,int(nil));
b.insert(int(nil),0);
b.insert(int(nil),1);
b.insert(int(nil),2);
b.insert(int(nil),3);
b.insert(int(nil),4);
b.insert(int(nil),5);
b.insert(int(nil),6);
b.insert(int(nil),7);
b.insert(int(nil),8);
b.insert(int(nil),9);
b.insert(int(nil),int(nil));

var c:=b.reverse().[oid]().reverse();
var d:=a.reverse();

a.print();
d.print();
b.print();
c.print();

b.semijoin(d).print();
d.semijoin(b).print();

c.semijoin(a).print();
a.semijoin(c).print();

# (try to) force different semijoin implementations

a:=new(int,oid).insert(1,1@0).insert(2,2@0).insert(int(nil),oid(nil)).sort();
c:=new(int,oid).insert(int(nil),oid(nil));
var i:=0;
while(i < 100) {
	i:+=1;
	c.insert(i, oid(i));
}
c:=c.sort();

a.print();
c.slice(0,1).print();

# binsemijoin
a.semijoin(c).print();
c.semijoin(a).print();

a:=a.access(BAT_WRITE).insert(int(nil),oid(nil)).access(BAT_READ);
c:=c.access(BAT_WRITE).insert(int(nil),oid(nil)).access(BAT_READ);

# hash => kinsertsect & revsemijoin
var ah:=a.copy();
ah.accbuild("hash");
var ch:=c.copy();
ch.accbuild("hash");
ah.semijoin(ch).print();
ch.semijoin(ah).print();
