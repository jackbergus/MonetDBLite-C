@/
The contents of this file are subject to the MonetDB Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is the MonetDB Database System.

The Initial Developer of the Original Code is CWI.
Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
Copyright August 2008-2010 MonetDB B.V.
All Rights Reserved.
@

@f gdk_search
@a M. L. Kersten, P. Boncz, N. Nes

@* Search Accelerators

What sets BATs apart from normal arrays is their built-in ability to
search on both dimensions of the binary association.  The easiest way to
implement this is simply walk to the whole table and compare against each
element.  This method is of course highly inefficient, much better performance
can be obtained if the BATs use some kind of index method to speed up
searching.

While index methods speed up searching they also have disadvantages.
In the first place extra storage is needed for the index. Second,
insertion of data or removing old data requires updating of the index
structure, which takes extra time.

This means there is a need for both indexed and non-indexed BAT, the
first to be used when  little or no searching is needed, the
second to be used when searching is predominant. Also, there is no
best index method for all cases, different methods have different storage
needs and different performance. Thus, multiple index methods are provided,
each suited to particular types of usage.

For query-dominant environments it pays to build a search accelerator.
The main problems to be solved are:
@itemize
@item
avoidance of excessive storage requirements, and
@item
limited maintenance overhead.
@end itemize

@-
The idea that query intensive tasks need many different index methods has
been proven invalid. The current direction is multiple copies of data, which
can than be sorted or clustered.

@-
The BAT library automatically decides when an index becomes cost
effective.

In situations where an index is expected, a call is
made to @emph{BAThash}.
This operation check for indexing on the header.
@{
@+ Interface Declarations
@h
#ifndef _GDK_SEARCH_H_
#define _GDK_SEARCH_H_
#include "gdk.h"
@}
@+ Hash indexing
This is a highly efficient implementation of simple bucket-chained hashing.

In the past, we used integer modulo for hashing, with bucket chains of mean size 4.
This was shown to be inferior to direct hashing with integer anding. The new implementation
reflects this.
@{
@h
gdk_export Hash *HASHnew(Heap *hp, int tpe, BUN size, BUN mask);
gdk_export BUN HASHmask(BUN cnt);
gdk_export BAT *HASHprint(BAT *b);
gdk_export void HASHremove(BAT *b);
gdk_export void HASHdestroy(BAT *b);
gdk_export int HASHgonebad(BAT *b, ptr v);
gdk_export BUN HASHprobe(Hash *h, ptr v);
gdk_export BUN HASHlist(Hash *h, BUN i);

#define mix_sht(X)            (((X)>>7)^(X))
#define mix_int(X)            (((X)>>7)^((X)>>13)^((X)>>21)^(X))
#define hash_loc(H,V)         hash_any(H,V)
#define hash_var(H,V)         hash_any(H,V)
#define hash_any(H,V)         (ATOMhash((H)->type, (V)) & (H)->mask)
#define heap_hash_any(hp,H,V) ((hp) && (hp)->hashash ? ((BUN *) (V))[-1] & (H)->mask : hash_any(H,V))
#define hash_bte(H,V)         ((BUN) (*(unsigned char*) (V)) & (H)->mask)
#define hash_chr(H,V)         hash_bte(H,V)
#define hash_sht(H,V)         ((BUN) mix_sht(*((unsigned short*) (V))) & (H)->mask)
#define hash_int(H,V)         ((BUN) mix_int(*((unsigned int*) (V))) & (H)->mask)
/* XXX return size_t-sized value for 8-byte oid? */
#define hash_lng(H,V)         ((BUN) mix_int((unsigned int) (*(lng *)(V) ^ (*(lng *)(V) >> 32))) & (H)->mask)
#if SIZEOF_OID == SIZEOF_INT
#define hash_oid(H,V)         ((BUN) mix_int((unsigned int) *((oid*) (V))) & (H)->mask)
#else
#define hash_oid(H,V)         ((BUN) mix_int((unsigned int) (*(oid *)(V) ^ (*(oid *)(V) >> 32))) & (H)->mask)
#endif
#if SIZEOF_WRD == SIZEOF_INT
#define hash_wrd(H,V)         ((BUN) mix_int((unsigned int) *((wrd*) (V))) & (H)->mask)
#else
#define hash_wrd(H,V)         ((BUN) mix_int((unsigned int) (*(wrd *)(V) ^ (*(wrd *)(V) >> 32))) & (H)->mask)
#endif

#define hash_flt(H,V)         hash_int(H,V)
#define hash_dbl(H,V)         hash_lng(H,V)


@= hashfnd
#define HASHfnd_@1(x,y,z)	{					\
	BUN _i;								\
	(x) = BUN_NONE;							\
	if ((y).b->H->hash || BAThash((y).b, 0) || GDKfatal("HASHfnd_@1: hash build failed on %s.\n", BATgetId((y).b))) \
		HASHloop_@1((y), (y).b->H->hash, _i, (z)) {		\
			(x) = _i;					\
			break;						\
		}							\
}
@h
#define HASHfnd_str(x,y,z)	{					\
	BUN _i;								\
	(x) = BUN_NONE;							\
	if ((y).b->H->hash || BAThash((y).b, 0) || GDKfatal("HASHfnd_str: hash build failed on %s.\n", BATgetId((y).b))) \
		HASHloop_str((y), (y).b->H->hash, _i, (z)) {		\
			(x) = _i;					\
			break;						\
		}							\
}
#define HASHfnd_str_hv(x,y,z)	{					\
	BUN _i;								\
	(x) = BUN_NONE;							\
	if ((y).b->H->hash || BAThash((y).b, 0) || GDKfatal("HASHfnd_str_hv: hash build failed on %s.\n", BATgetId((y).b))) \
		HASHloop_str_hv((y), (y).b->H->hash, _i, (z)) {		\
			(x) = _i;					\
			break;						\
		}							\
}
#define HASHfnd(x,y,z)	{						\
	BUN _i;							\
	(x) = BUN_NONE;							\
	if ((y).b->H->hash || BAThash((y).b, 0) || GDKfatal("HASHfnd: hash build failed on %s.\n", BATgetId((y).b))) \
		HASHloop((y), (y).b->H->hash, _i, (z)) {			\
			(x) = _i;					\
			break;						\
		}							\
}
@:hashfnd(chr)@
@:hashfnd(bte)@
@:hashfnd(sht)@
@:hashfnd(int)@
@:hashfnd(lng)@
@:hashfnd(oid)@
@:hashfnd(wrd)@

#if SIZEOF_VOID_P == SIZEOF_INT
#define HASHfnd_ptr(x,y,z)	HASHfnd_int(x,y,z)
#else /* SIZEOF_VOID_P == SIZEOF_LNG */
#define HASHfnd_ptr(x,y,z)	HASHfnd_lng(x,y,z)
#endif
#define HASHfnd_bit(x,y,z)	HASHfnd_chr(x,y,z)
#define HASHfnd_flt(x,y,z)	HASHfnd_int(x,y,z)
#define HASHfnd_dbl(x,y,z)	HASHfnd_lng(x,y,z)
#define HASHfnd_any(x,y,z)	HASHfnd(x,y,z)
@-
A new entry is added with @%HASHins@ using the BAT, the BUN index,
and a pointer to the value to be stored. An entry is removed by @%HASdel@.

@= hashins
#define HASHins_@1(h, i, v) do {		\
	BUN _c = hash_@1(h,v);			\
	h->link[i] = h->hash[_c];		\
	h->hash[_c] = i;			\
} while (0)
@h
#define HASHins_str(h,i,v) do {			\
	BUN _c;					\
	GDK_STRHASH(v,_c);			\
	_c &= (h)->mask;			\
	h->link[i] = h->hash[_c];		\
	h->hash[_c] = i;			\
} while (0)
#define HASHins_str_hv(h,i,v) do {		\
	BUN _c = ((BUN *) v)[-1] & (h)->mask;	\
	h->link[i] = h->hash[_c];		\
	h->hash[_c] = i;			\
} while (0)

#define HASHins_any(h,i,v) do {			\
	BUN _c = HASHprobe(h, v);		\
	h->link[i] = h->hash[_c];		\
	h->hash[_c] = i;			\
} while (0)

/* HASHins now receives a BAT* param and has become adaptive; killing wrongly configured hash tables */
/* use HASHins_any or HASHins_<tpe> instead if you know what you're doing or want to keep the hash whatever */
#define HASHins(b,i,v) do {						\
	if (((i) & 1023) == 1023 && HASHgonebad((b),(v)))		\
		HASHremove(b);						\
	else								\
		HASHins_any((b)->H->hash,(i),(v));			\
} while (0)

#if SIZEOF_VOID_P == SIZEOF_INT
#define HASHins_ptr(h,i,v)	HASHins_int(h,i,v)
#else /* SIZEOF_VOID_P == SIZEOF_LNG */
#define HASHins_ptr(h,i,v)	HASHins_lng(h,i,v)
#endif
#define HASHins_bit(h,i,v)	HASHins_chr(h,i,v)
#if SIZEOF_OID == SIZEOF_INT	/* OIDDEPEND */
#define HASHins_oid(h,i,v)	HASHins_int(h,i,v)
#else
#define HASHins_oid(h,i,v)	HASHins_lng(h,i,v)
#endif
#define HASHins_flt(h,i,v)	HASHins_int(h,i,v)
#define HASHins_dbl(h,i,v)	HASHins_lng(h,i,v)
#define HASHinsvar(h,i,v)	HASHins_any(h,i,v)
#define HASHinsloc(h,i,v)	HASHins_any(h,i,v)

@:hashins(chr)@
@:hashins(bte)@
@:hashins(sht)@
@:hashins(int)@
@:hashins(lng)@

#define HASHdel(h, i, v, next) {					\
	if (next && h->link[i+1] == i) {				\
		h->link[i+1] = h->link[i];				\
	} else {							\
		BUN _c = HASHprobe(h, v);				\
		if (h->hash[_c] == i) {					\
			h->hash[_c] = h->link[i];			\
		} else {						\
			for(_c = h->hash[_c]; _c != BUN_NONE; 		\
					_c = h->link[_c]){ 		\
				if (h->link[_c] == i) {			\
					h->link[_c] = h->link[i];	\
					break;				\
				}					\
			}						\
		}							\
	} h->link[i] = BUN_NONE;					\
}

#define HASHmove(h, i, j, v, next) {					\
	if (next && h->link[i+1] == i) {				\
		h->link[i+1] = j;					\
	} else {							\
		BUN _c = HASHprobe(h, v);				\
		if (h->hash[_c] == i) {					\
			h->hash[_c] = j;				\
		} else {						\
			for(_c = h->hash[_c]; _c != BUN_NONE; 		\
					_c = h->link[_c]){ 		\
				if (h->link[_c] == i) {			\
					h->link[_c] = j;		\
					break;				\
				}					\
			}						\
		}							\
	} h->link[j] = h->link[i];					\
}
@}
@- Hash Table Creation
The @emph{hash} indexing scheme for BATs reserves a block of memory to maintain
the hash table and a collision list. A one-to-one mapping exists between
the BAT and the collision list using the BUN index. NOTE: we alloc the
link list as a parallel array to the BUN array; hence the hash link array has
the same size as BATcapacity(b) (not BATcount(b)). This allows us in the
BUN insert and delete to assume that there is hash space iff there is BUN
space. If there is no BUN space, the BATextend now destroys the hash table.

The hash mask size is a power of two, so we can do bitwise AND on the
hash (integer) number to quickly find the head of the bucket chain.
Clearly, the hash mask size is a crucial parameter. If we know that the column
is unique (hkey), we use direct hashing (mask size ~= BATcount). Otherwise
we dynamically determine the mask size by starting out with mask size = BATcount/64
(just 1.5% of memory storage overhead). Then we start building the hash table
on the first 25% of the BAT. As we aim for max-collisions list length of 4,
the list on 25% should not exceed length 1. So, if a small number of collisssions
occurs (mask/2) then we abandon the attempt and restart with a mask that is 4 times
larger. This converges after three cycles to direct hashing.
@{
@c
#include "monetdb_config.h"
#include "gdk.h"

BUN
HASHmask(BUN cnt)
{
	BUN m = 8;		/* minimum size */

	while (m + m < cnt)
		m += m;
	if (m + m - cnt < 2 * (cnt - m))
		m += m;
	return m;
}

static void
HASHclear(Hash *h)
{
	BUN *i, *j;

	for (i = h->hash, j = i + h->mask; i <= j; i++) {
		*i = BUN_NONE;
	}
}

Hash *
HASHnew(Heap *hp, int tpe, BUN size, BUN mask)
{
	Hash *h = NULL;
	if (HEAPalloc(hp, mask + size, sizeof(BUN)) < 0)
		return NULL;
	h = (Hash *) GDKmalloc(sizeof(Hash));
	if (!h)
		return h;
	h->lim = size;
	h->mask = mask - 1;
	h->link = (BUN *) hp->base;
	h->hash = h->link + h->lim;
	h->type = tpe;
	h->heap = hp;
	HASHclear(h);		/* zero the mask */
	return h;
}

@= starthash
	{
		@1 *v = (@1*)BUNhloc(bi, 0);
		for (; r < p; r++) {
			BUN c = hash_@1(h, v+r);

			if (h->hash[c] == BUN_NONE && nslots-- == 0) 
				break; /* mask too full */
			h->link[r] = h->hash[c];
			h->hash[c] = r;
		}
	}
	break;
@= finishhash
	{
		@1 *v = (@1*)BUNhloc(bi, 0);
		for (; p < q; p++) {
			BUN c = hash_@1(h, v+p);
	
			h->link[p] = h->hash[c];
			h->hash[c] = p;
		}
	}
	break;
@-
The prime routine for the BAT layer is to create a new hash index.
Its argument is the element type and the maximum number of BUNs
be stored under the hash function.
@c
BAT *
BAThash(BAT *b, BUN masksize)
{
	BAT *o = NULL;

	if (VIEWhparent(b)) {
		bat p = VIEWhparent(b);
		o = b;
		b = BATdescriptor(p);
		if (!ALIGNsynced(o, b)) {
			BBPunfix(b->batCacheid);
			b = o;
			o = NULL;
		}
	}
	gdk_set_lock(GDKhashLock(ABS(b->batCacheid) & BBP_BATMASK), "BAThash");
	if (b->H->hash == NULL) {
		unsigned int tpe = ATOMstorage(b->htype);
		BUN cnt = BATcount(b);
		BUN mask;
		BUN p = BUNfirst(b), q = BUNlast(b), r;
		Hash *h = NULL;
		Heap *hp = NULL;
		str nme = BBP_physical(b->batCacheid);
		BATiter bi = bat_iterator(b);

		ALGODEBUG THRprintf(GDKout, "#BAThash: create hash(" BUNFMT ");\n", BATcount(b));
		/* cnt = 0, hopefully there is a proper capacity from which
		 * we can derive enough information */
		if (!cnt)
			cnt = BATcapacity(b);

		if (b->htype == TYPE_void) {
			if (b->hseqbase == oid_nil) {
				ALGODEBUG THRprintf(GDKout, "#BAThash: cannot create hash-table on void column.\n");
				return NULL;
			}
			ALGODEBUG THRprintf(GDKout, "#BAThash: creating hash-table on void column..\n");

			tpe = TYPE_void;
		}
		/* determine hash mask size 
		   p = first; then no dynamic scheme */
		if (masksize > 0) {
			mask = HASHmask(masksize);
		} else if (ATOMsize(ATOMstorage(tpe)) == 1) {
			mask = (1 << 8);
		} else if (ATOMsize(ATOMstorage(tpe)) == 2) {
			mask = (1 << 12);
		} else if (b->hkey) {
			mask = HASHmask(cnt);
		} else {
			/* dynamic hash: we start with HASHmask(cnt/64); if there are too many collisions
			 * we try HASHmask(cnt/16), then HASHmask(cnt/4), and finally HASHmask(cnt).  */
			mask = HASHmask(cnt >> 6);
			p += (cnt >> 2);	/* try out on first 25% of b */
			if (p > q)
				p = q;
		}

		if (mask < 1024)
			mask = 1024;
		do {
			BUN nslots = mask >> 3;	/* 1/8 full is too full */

			r = BUNfirst(b);
			if (hp) {
				HEAPfree(hp);
				GDKfree(hp);
			}
			if (h)
				GDKfree(h);
			/* create the hash structures */
			hp = (Heap *) GDKzalloc(sizeof(Heap));
			if (hp &&
			    (hp->filename = GDKmalloc(strlen(nme) + 12)) != NULL)
				sprintf(hp->filename, "%s.%chash", nme, b->batCacheid > 0 ? 'h' : 't');
			if (hp == NULL ||
			    hp->filename == NULL ||
			    (h = HASHnew(hp, ATOMtype(b->htype), BATcapacity(b), mask)) == NULL) {
				gdk_unset_lock(GDKhashLock(ABS(b->batCacheid) & BBP_BATMASK), "BAThash");
				if (hp != NULL) {
					GDKfree(hp->filename);
					GDKfree(hp);
				}
				return NULL;
			}

			switch (tpe) {
#ifndef NOEXPAND_CHR
			case TYPE_chr:
				@:starthash(chr)@
#endif
#ifndef NOEXPAND_BTE
			case TYPE_bte:
				@:starthash(bte)@
#endif
#ifndef NOEXPAND_SHT
			case TYPE_sht:
				@:starthash(sht)@
#endif
#if !defined(NOEXPAND_INT) || !defined(NOEXPAND_FLT)
			case TYPE_int:
			case TYPE_flt:
				@:starthash(int)@
#endif
#if !defined(NOEXPAND_DBL) || !defined(NOEXPAND_LNG)
			case TYPE_dbl:
			case TYPE_lng:
				@:starthash(lng)@
#endif
			default:
				for (; r < p; r++) {
					ptr v = BUNhead(bi, r);
					BUN c = heap_hash_any(b->H->vheap, h, v);

					if (h->hash[c] == BUN_NONE &&
					    nslots-- == 0)
						break;	/* mask too full */
					h->link[r] = h->hash[c];
					h->hash[c] = r;
				}
				break;
			}
		} while (r < p && mask < cnt && (mask <<= 2));

		/* finish the hashtable with the current mask */
		p = r;
		switch (tpe) {
#ifndef NOEXPAND_CHR
		case TYPE_chr:
			@:finishhash(chr)@
#endif
#ifndef NOEXPAND_BTE
		case TYPE_bte:
			@:finishhash(bte)@
#endif
#ifndef NOEXPAND_SHT
		case TYPE_sht:
			@:finishhash(sht)@
#endif
#if !defined(NOEXPAND_INT) || !defined(NOEXPAND_FLT)
		case TYPE_int:
		case TYPE_flt:
			@:finishhash(int)@
#endif
#if !defined(NOEXPAND_DBL) || !defined(NOEXPAND_LNG)
		case TYPE_dbl:
		case TYPE_lng:
			@:finishhash(lng)@
#endif
		default:
			for (; p < q; p++) {
				ptr v = BUNhead(bi, p);
				BUN c = heap_hash_any(b->H->vheap, h, v);

				h->link[p] = h->hash[c];
				h->hash[c] = p;
			}
			break;
		}
		b->H->hash = h;
	}
	gdk_unset_lock(GDKhashLock(ABS(b->batCacheid) & BBP_BATMASK), "BAThash");
	if (o != NULL) {
		o->H->hash = b->H->hash;
		BBPunfix(b->batCacheid);
		b = o;
	}
	return b;
}

@-
The entry on which a value hashes can be calculated with the
routine @%HASHprobe@.
@c
BUN
HASHprobe(Hash *h, ptr v)
{
	switch (ATOMstorage(h->type)) {
#ifndef NOEXPAND_CHR
	case TYPE_chr:
		return hash_chr(h, v);
#endif
#ifndef NOEXPAND_BTE
	case TYPE_bte:
		return hash_bte(h, v);
#endif
#ifndef NOEXPAND_SHT
	case TYPE_sht:
		return hash_sht(h, v);
#endif
#if !defined(NOEXPAND_INT) || !defined(NOEXPAND_FLT)
	case TYPE_int:
	case TYPE_flt:
		return hash_int(h, v);
#endif
#if !defined(NOEXPAND_DBL) || !defined(NOEXPAND_LNG)
	case TYPE_dbl:
	case TYPE_lng:
		return hash_lng(h, v);
#endif
	default:
		return hash_any(h, v);
	}
}

BAT *
HASHprint(BAT *b)
{
	BATiter bi = bat_iterator(b);
	BAT *bn;
	BUN p, q;

	if (!(b && b->H->hash))
		return NULL;
#if SIZEOF_OID == SIZEOF_INT
	bn = BATnew(BAThtype(b), TYPE_int, BATcount(b));
#else
	bn = BATnew(BAThtype(b), TYPE_lng, BATcount(b));
#endif
	if (bn == NULL)
		return NULL;
	BATloop(b, p, q) {
		BUN i = HASHprobe(b->H->hash, BUNhead(bi, p));

		bunfastins(bn, BUNhead(bi, p), &i);
	}
	bn->hsorted = BAThordered(b);
	bn->tsorted = FALSE;
	return bn;
      bunins_failed:
	BBPreclaim(bn);
	return NULL;
}

BUN
HASHlist(Hash *h, BUN i)
{
	BUN j;
	BUN c = 1;

	while ((j = h->link[i]) != BUN_NONE) {
		c++;
		i = j;
		if (i > h->lim) {
			mnstr_printf(GDKout, "hash inconsistency link " BUNFMT "\n", i);
			break;
		}
	}
	return c;
}

void
HASHremove(BAT *b)
{
	if (b && b->H->hash) {
		bat p = VIEWhparent(b);
		BAT *hp = NULL;

		if (p)
			hp = BBP_cache(p);

		if (!hp || b->H->hash != hp->H->hash) {
			HEAPfree(b->H->hash->heap);
			if (b->H->hash->heap->storage != STORE_MEM)
				HEAPdelete(b->H->hash->heap, BBP_physical(b->batCacheid), (b->batCacheid > 0) ? "hhash" : "thash");
			GDKfree(b->H->hash->heap);
			GDKfree(b->H->hash);
		}
		b->H->hash = NULL;
	}
}

void
HASHdestroy(BAT *b)
{
	if (b) {
		HASHremove(b);
		if (BATmirror(b))
			HASHremove(BATmirror(b));

	}
}

int
HASHgonebad(BAT *b, ptr v)
{
	Hash *h = b->H->hash;
	BATiter bi = bat_iterator(b);

	if (h == NULL)
		return 1;	/* no hash is bad hash? */

	if (h->mask * 2 < BATcount(b)) {
		int (*cmp) (ptr, ptr) = BATatoms[b->htype].atomCmp;
		BUN cnt, hit, i = h->hash[HASHprobe(h, v)];

		for (cnt = hit = 1; i != BUN_NONE; i = h->link[i], cnt++)
			hit += ((*cmp) (v, BUNhead(bi, i)) == 0);

		if (cnt / hit > 4)
			return 1;	/* linked list too long */

		/* in this case, linked lists are long but contain the desired values 
		 * such hash tables may be useful for locating all duplicates */
	}
	return 0;		/* a-ok */
}

@}

@+ Binary Search on a Sorted BAT
We have two main routines, @`SORTfndfirst@5(b,v) and @`SORTfndlast@5(b,v), that
search for a TAIL value 'v' in a sorted BAT. If the value is present, 
the first routine returns a pointer to its first occurrence, while the second
routine returns a pointer to the BUN just after the last occurrence of 'v'.
In case value 'v' does not occur in the tail of BAT b, both routines return
a pointer to the first BUN with a tail value larger than 'v' 
(i.e., @%BUNfirst(b)@, in case all tail values are larger than 'v'); 
or @%BUNlast(b)@, in case all tail values are smaller than 'v'.
@
@
From the above routines we now also defined the @`SORTfnd@5 and @%SORTfnd_tpe@
routines that look for a certain value and return a (not necessarily the first
or last) reference to it, or NULL (if the value does not exist).

Note: of the SORTfnd, only @`SORTfndfirst@5(b,v) and
@`SORTfndlast@5(b,v) work on the tail of a bat!
@
@

@- Range Binary Search
Type-specific versions of @:SORTfndfirst@ are available using macro
expansions. It finds the first BUN larger or equal than a certain
value and expands to @`SORTfndfirst_chr@5, @`SORTfndfirst_sht@5,
@`SORTfndfirst_int@5, @`SORTfndfirst_flt@5, @`SORTfndfirst_lng@5,
@`SORTfndfirst_dbl@5, @`SORTfndfirst_loc@5 and @`SORTfndfirst_var@5.

Type-specific versions of @:SORTfndlast@ are available using macro
expansions. It finds the first BUN smaller or equal than a certain
value and expands to @`SORTfndlast_chr@5, @`SORTfndlast_sht@5,
@`SORTfndlast_int@5, @`SORTfndlast_flt@5, @`SORTfndlast_lng@5,
@`SORTfndlast_dbl@5, @`SORTfndlast_loc@5 and @`SORTfndlast_var@5.
@{
@h
/* type specific binary search implementations */
gdk_export BUN SORTfnd_chr(BAT *b, ptr v);
gdk_export BUN SORTfnd_bte(BAT *b, ptr v);
gdk_export BUN SORTfnd_sht(BAT *b, ptr v);
gdk_export BUN SORTfnd_int(BAT *b, ptr v);
gdk_export BUN SORTfnd_flt(BAT *b, ptr v);
gdk_export BUN SORTfnd_lng(BAT *b, ptr v);
gdk_export BUN SORTfnd_dbl(BAT *b, ptr v);
gdk_export BUN SORTfnd_loc(BAT *b, ptr v);
gdk_export BUN SORTfnd_var(BAT *b, ptr v);
gdk_export BUN SORTfndfirst_chr(BAT *b, ptr v);
gdk_export BUN SORTfndfirst_bte(BAT *b, ptr v);
gdk_export BUN SORTfndfirst_sht(BAT *b, ptr v);
gdk_export BUN SORTfndfirst_int(BAT *b, ptr v);
gdk_export BUN SORTfndfirst_flt(BAT *b, ptr v);
gdk_export BUN SORTfndfirst_lng(BAT *b, ptr v);
gdk_export BUN SORTfndfirst_dbl(BAT *b, ptr v);
gdk_export BUN SORTfndfirst_loc(BAT *b, ptr v);
gdk_export BUN SORTfndfirst_var(BAT *b, ptr v);
gdk_export BUN SORTfndlast_chr(BAT *b, ptr v);
gdk_export BUN SORTfndlast_bte(BAT *b, ptr v);
gdk_export BUN SORTfndlast_sht(BAT *b, ptr v);
gdk_export BUN SORTfndlast_int(BAT *b, ptr v);
gdk_export BUN SORTfndlast_flt(BAT *b, ptr v);
gdk_export BUN SORTfndlast_lng(BAT *b, ptr v);
gdk_export BUN SORTfndlast_dbl(BAT *b, ptr v);
gdk_export BUN SORTfndlast_loc(BAT *b, ptr v);
gdk_export BUN SORTfndlast_var(BAT *b, ptr v);

#endif /* _GDK_SEARCH_H_ */

@-
@}
By Peter sept-99. This is a simple implementation that avoids all multiply
and divs on most bats by using integer BUNindex numbers rather than absolute
pointers (the BUNptr employed to obtain a pointer uses shift where possible).
Also, the gradient-based approach has been dropped again, which allows all
atoms to be treated in one macro. Main motivation: distrust of gradient
performance on odmg data and its high mult/div overhead.
@{
@= SORTfnd
BUN
SORTfndfirst_@2(BAT *b, ptr v)
{
	BUN diff, end = BUNfirst(b), cur = end;
	BUN lo = end, hi = BUNlast(b);
	int cmp = 1;
	BATiter bi = bat_iterator(b);

        if (lo >= hi || @3_CMP(BUNt@1(bi, cur), v, @4)>=0) {
		/* shortcut: if BAT is empty or first (and hence all) tail
		 * value is >= v, we're done. */
		return cur;
	}
	while (lo < hi) {
		BUN mid = (lo + hi) >> 1;

		cur = mid;
		cmp = @3_CMP(BUNt@1(bi, cur), v, @4);
		if (cmp < 0) {
			lo = ++mid;
			cur++;
		} else if (cmp > 0) {
			hi = mid;
		} else {
			break;
		}
	}
	if (cmp == 0 && b->tkey == 0) {  /* shift over multiple equals */
                for(diff = cur-end; diff; diff >>= 1) {
		    while (cur >= (end+diff) && @3_EQ(BUNt@1(bi, cur-diff), v, @4)) cur -= diff;
		}
	}
	return cur;
}

BUN
SORTfndlast_@2(BAT *b, ptr v)
{
	BUN diff, end = BUNlast(b), cur = end;
	BUN lo = BUNfirst(b), hi = end;
	int cmp = 1;
	BATiter bi = bat_iterator(b);

        if (lo >= hi || @3_CMP(BUNt@1(bi, cur - 1), v, @4)<=0) {
		/* shortcut: if BAT is empty or last (and hence all) tail
		 * value is <= v, we're done. */
		return cur;
	}
	while (lo < hi) {
		BUN mid = (lo + hi) >> 1;
		cur = mid;
		cmp = @3_CMP(BUNt@1(bi, cur), v, @4);
		if (cmp < 0) {
			lo = ++mid;
			cur++;
		} else if (cmp > 0) {
			hi = mid;
		} else {
			break;
		}
	}
	if (cmp == 0 && b->tkey == 0) {  /* shift over multiple equals */
                for(diff = (end-cur)>>1; diff; diff >>= 1) {
		    while ((cur+diff) < end && @3_EQ(BUNt@1(bi, cur+diff), v, @4)) cur += diff;
		}
	}
	if (cmp == 0) cur++;
	return cur;
}

BUN
SORTfnd_@2(BAT *m, ptr v)
{
	BAT *b = BATmirror(m);
	BUN lo = BUNfirst(b), hi = BUNlast(b);
	int cmp = 1;
	BUN cur = BUN_NONE;
	BATiter bi = bat_iterator(b);

	while (lo < hi) {
		BUN mid = (lo + hi) >> 1;
		cur = mid;
		cmp = @3_CMP(BUNt@1(bi, cur), v, @4);
		if (cmp < 0) {
			lo = ++mid;
			cur++;
		} else if (cmp > 0) {
			hi = mid;
		} else {
			break;
		}
	}
	return cmp ? BUN_NONE : cur;
}

@= SORTfnd_switch
BUN
SORTfnd@2(BAT *b, ptr v)
{
	if (b && b->@1sorted & 1) {
		switch(ATOMstorage(b->@1type)) {
#ifndef NOEXPAND_CHR
		case TYPE_chr:
			return SORTfnd@2_chr(b, v);
#endif
#ifndef NOEXPAND_BTE
		case TYPE_bte:
			return SORTfnd@2_bte(b, v);
#endif
#ifndef NOEXPAND_SHT
		case TYPE_sht:
			return SORTfnd@2_sht(b, v);
#endif
#ifndef NOEXPAND_INT
		case TYPE_int:
			return SORTfnd@2_int(b, v);
#endif
#ifndef NOEXPAND_FLT
		case TYPE_flt:
			return SORTfnd@2_flt(b, v);
#endif
#ifndef NOEXPAND_DBL
		case TYPE_dbl:
			return SORTfnd@2_dbl(b, v);
#endif
#ifndef NOEXPAND_LNG
		case TYPE_lng:
			return SORTfnd@2_lng(b, v);
#endif
		default:
			if (b->@1varsized) {
				return SORTfnd@2_var(b, v);
			} else {
				return SORTfnd@2_loc(b, v);
			}
		}
	}
	return BUN_NONE;
}
@c
@:SORTfnd(loc,chr,simple,chr)@
@:SORTfnd(loc,bte,simple,bte)@
@:SORTfnd(loc,sht,simple,sht)@
@:SORTfnd(loc,int,simple,int)@
@:SORTfnd(loc,lng,simple,lng)@
@:SORTfnd(loc,flt,simple,flt)@
@:SORTfnd(loc,dbl,simple,dbl)@
@:SORTfnd(loc,loc,atom,b->ttype)@
@:SORTfnd(var,var,atom,b->ttype)@

@:SORTfnd_switch(h,)@
@:SORTfnd_switch(t,last)@
@:SORTfnd_switch(t,first)@

@c

@}
