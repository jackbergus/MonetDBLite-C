module(xtables,ascii_io);

backup_dir := "";

proc seqinfo(BAT b) : str {
	return b.info.find("hseqbase");
}
PROC grp_dump(b) : str {
	var bats := [~b];
	var first := bats.find(nil);
	if (first.htype != void){
		var r := [first~].reverse.copy;
		r.rename("key");
		bats.access(BAT_APPEND);
		bats.append(r);
	}
	var name := bbpname(first);
	var file := backup_dir + name;
	bats := dump_format( bats, file + ".fmt" );
	dump_data( bats, file + ".dat.bz2", -1 );
	return file;
}
PROC backup( str Dir ) : void {
	backup_dir := Dir; 
        var nme := view_bbp_name;
        var prs := nme.semijoin(view_bbp_kind.select("pers"));
	rprs := [oid](prs.reverse);
	prs := rprs.reverse.copy;
	var bats := [load](prs);
	var cnts := [count](bats);
	var seqs := [seqinfo](bats);
	notvoid := seqs.select("-2147483648").mark(0@0);
	seqs := seqs.kdiff(notvoid);
	var grps := CTgroup(cnts,seqs);
	var files := {grp_dump}(grps.reverse.join(bats));
	bats := bats.semijoin(notvoid);
	files.insert( {grp_dump}(notvoid.reverse.join(bats) ));
	files.rename("files");
	bats := new(bat,bat);
	bats.insert(files,files);
	grp_dump(bats);
}
backup("/tmp/bup/");
