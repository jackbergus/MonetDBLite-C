module(enum,str);

var o := bat("car_age").reverse().fetch(0);

proc maketype(str title) : bat {
    var histoname := sprintf("%s_t", title);
    if (not(view_bbp_name().reverse().exist(histoname))) {
        var batname := sprintf("car_%s", title);
        var b := bat(batname);
        var histo := b.histogram().sort();
        histo.rename(histoname);
        histo.persists(true);
    } 
    return enum_load(histoname);
}

var age_t := maketype("age");
var carprice_t := maketype("carprice");
var category_t := maketype("category");
var town_t := maketype("town");
var class_t := maketype("class");

proc void_encode(int tpe, str title) : bat {
    var b := bat(sprintf("car_%s", title));
    var bn := tpe.[encode](b.reverse().project(nil).reverse()); 
    bn.rename(sprintf("void_%s", title));
    bn.persists(true);
    bn.seqbase(o);
    return bn;
}

proc void_create() : void {
    void_encode(age_t,"age");
    void_encode(carprice_t,"carprice");
    void_encode(category_t,"category");
    void_encode(town_t,"town");
    void_encode(class_t,"class");
    var void_neg := bat("car_neg").project(nil).copy();
    void_neg.rename("void_neg");
    void_neg.persists(true);
    var void_pos := bat("car_pos").project(nil).copy();
    void_pos.rename("void_pos");
    void_pos.persists(true);
    var void_gender := bat("car_gender").reverse().project(nil).reverse().copy();
    void_gender.rename("void_gender");
    void_gender.persists(true);
    void_gender.seqbase(o);
}

proc print_car(int low, int high) : void {
    bat("car_age").slice(low,high).table(bat("car_gender"),
			  bat("car_carprice"), bat("car_category"), 
                          bat("car_town"), bat("car_class"));
}

proc print_void(int low, int high) : void {
    bat("void_age").slice(low,high).table(bat("void_gender"),
			  bat("void_carprice"), bat("void_category"), 
                          bat("void_town"), bat("void_class"));
}

if (not(view_bbp_name().reverse().exist("void_age"))) {
    void_create();
}

ls();
commit();
quit();
