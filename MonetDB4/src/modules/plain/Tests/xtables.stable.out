stdout of test 'xtables` in directory 'src/modules/plain` itself:


# 13:29:26 >  
# 13:29:26 >  Mtimeout -timeout 120 Mserver "--config=/ufs/sjoerd/src/MonetDB/monet-merge/build/conf/monet.conf" --debug=10 --set "monet_mod_path=/ufs/sjoerd/src/MonetDB/monet-merge/build/src/modules/plain/.libs:/ufs/sjoerd/src/MonetDB/monet-merge/build/src/modules/contrib/.libs:/ufs/sjoerd/src/MonetDB/monet-merge/build/src/modules/calibrator/.libs:/ufs/sjoerd/src/MonetDB/monet-merge/build/src/mapi/.libs" --set "gdk_dbfarm=/ufs/sjoerd/src/MonetDB/monet-merge/build/dbfarm" --set "sql_logdir=/ufs/sjoerd/src/MonetDB/monet-merge/build/log" --set mapi_port=55384 --set sql_port=50160 --set monet_prompt= --trace --dbname=mTests_src_modules_plain  < xtables.milM
# 13:29:26 >  

# Monet Database Server V4.3.11
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
module("xtables");

# The cross tables are checked using the scripts defined below.

# First some procs for convenience: 
# - xtable_print(group[oid,oid], str, attr1[oid,a1], attr2[oid,a2], ...)
# 	print group count table 
# - xtable_realloc(bat, capacity):  bat
#	allocate more memory and return a copy of a bat
# - xtable_test(str title, bat x, bat y, bat z)
#	 major test script on xtable functionality

proc xtable_print(..any..) : void {
	printf("\n# %s (ct: %d elts, %d groups, %lld bytes)\n",
	       $2, $3.count(), $1.count(), $3.batsize());
	table($1.col_name("count"), $(4..));
}

proc xtable_histo_direct(..any..) : void {
	var histo := $2.histogram();
	var map := $2.map();
	histo.xtable_print($(1), map, $(3..), histo.mirror().col_name("gid"));
}

proc xtable_histo_remap(..any..) : void {
	var map := new(oid,oid,$2.count()).key(true).reverse().insert($2);
	map.join($2.histogram()).xtable_print($(1..), map.col_name("gid"));
}

proc xtable_realloc(bat[any::1,any::2] b, int cap) : bat[any::1,any::2] {
	var inf := b.info();
	var ht := monet_atomtbl.find(inf.find("head"));
	var tt := monet_atomtbl.find(inf.find("tail"));
	var bn := new(ht, tt, cap);
	bn.insert(b);
	if (ht = void) bn.seqbase(b.reverse().fetch(0));
	if (tt = void) bn.seqbase(b.fetch(0));
	return bn;
}

proc xtable_test(str title, bat x, bat y, bat z) : void {
	printf("# xtable_test: %s grouping (%d tuples, %lld bytes)\n\n",
	       title, x.count(), x.batsize() + y.batsize() + z.batsize());
	x.col_name("x"); y.col_name("y"); z.col_name("z");
	var yy := [+](y,dbl(1.0)).col_name("yy");

	print(x.slice(0,7).col_name("x"),y,yy,z);
	printf("synced(x,y) := %s\n", synced(x,y).str());
	printf("synced(x,z) := %s\n", synced(x,z).str());

	# test group 
	var b1 := CTgroup(x);
	xtable_histo_direct("group(x)", b1, x);

	# test derive
	b1 := CTgroup(b1.map(),y);#.access(BAT_WRITE);
	xtable_histo_direct("group(x,y)", b1, x, y);

	# test orderby
	{
		var b2 := CTrefine(x.reverse().sort().reverse(), y);
		xtable_histo_remap("orderby(x,y)", b2, x, y);
	}
 
	# test subgroup
	{
		var b2 := {count}([<=](y,dbl(2.0)),b1.map(),b1.histogram()).col_name("count");
		b2.xtable_print("subhisto(x,y|1-2)", x, y, b2.mirror().col_name("gid"));
	}
	b1 := CTsubgroup(b1.map(),y, y.uselect(dbl(1.0),dbl(2.0)));
	xtable_histo_direct("group(x,y|1-2)", b1, x, y);

	# test derive
	b1 := CTgroup(b1.map(),z);
	xtable_histo_direct("group(x,y,z)", b1, x, y, z);
}

setoid(oid(20000000));

var x := new(oid,chr);
x.insert(1@0,'a');
x.insert(2@0,'a');
x.insert(3@0,'b');
x.insert(4@0,'b');
x.insert(5@0,'b');
x.insert(6@0,'b');
x.insert(7@0,'c');
x.insert(8@0,'c');

var y:= new(oid,dbl);
y.insert(1@0,dbl(1.0));
y.insert(2@0,dbl(2.0));
y.insert(3@0,dbl(2.0));
y.insert(4@0,dbl(2.0));
y.insert(5@0,dbl(2.0));
y.insert(6@0,dbl(3.0));
y.insert(7@0,dbl(1.0));
y.insert(8@0,dbl(1.0));

var z:= new(oid,str);
z.insert(1@0,"c");
z.insert(2@0,"a");
z.insert(3@0,"b");
z.insert(4@0,"c");
z.insert(5@0,"a");
z.insert(6@0,"a");
z.insert(7@0,"c");
z.insert(8@0,"a");

xtable_test("small hash", x, y, z);
# xtable_test: small hash grouping (8 tuples, 32768 bytes)

#-----------------------------------------#
# BAT:	  x	| y	| yy	| z	  #
# (oid)	  (chr)	| (dbl)	| (dbl)	| (str)	  #
#-----------------------------------------#
[ 1@0,	  'a',	  1,	  2,	  "c"	  ]
[ 2@0,	  'a',	  2,	  3,	  "a"	  ]
[ 3@0,	  'b',	  2,	  3,	  "b"	  ]
[ 4@0,	  'b',	  2,	  3,	  "c"	  ]
[ 5@0,	  'b',	  2,	  3,	  "a"	  ]
[ 6@0,	  'b',	  3,	  4,	  "a"	  ]
[ 7@0,	  'c',	  1,	  2,	  "c"	  ]
[ 8@0,	  'c',	  1,	  2,	  "a"	  ]
synced(x,y) := true
synced(x,z) := true

# group(x) (ct: 8 elts, 3 groups, 12288 bytes)
#-------------------------#
# count	| x	| gid	  #
#-------------------------#
[ 2,	  'a',	  1@0	  ]
[ 4,	  'b',	  3@0	  ]
[ 2,	  'c',	  7@0	  ]

# group(x,y) (ct: 8 elts, 5 groups, 12288 bytes)
#---------------------------------#
# count	| x	| y	| gid	  #
#---------------------------------#
[ 1,	  'a',	  1,	  1@0	  ]
[ 1,	  'a',	  2,	  2@0	  ]
[ 3,	  'b',	  2,	  3@0	  ]
[ 1,	  'b',	  3,	  6@0	  ]
[ 2,	  'c',	  1,	  7@0	  ]

# orderby(x,y) (ct: 8 elts, 5 groups, 12288 bytes)
#---------------------------------#
# count	| x	| y	| gid	  #
#---------------------------------#
[ 1,	  'a',	  1,	  1@0	  ]
[ 1,	  'a',	  2,	  2@0	  ]
[ 3,	  'b',	  2,	  3@0	  ]
[ 1,	  'b',	  3,	  4@0	  ]
[ 2,	  'c',	  1,	  5@0	  ]

# subhisto(x,y|1-2) (ct: 8 elts, 5 groups, 8192 bytes)
#-------------------------#
# count	| y	| gid	  #
#-------------------------#
[ 1,	  1,	  1@0	  ]
[ 1,	  2,	  2@0	  ]
[ 3,	  2,	  3@0	  ]
[ 0,	  3,	  6@0	  ]
[ 2,	  1,	  7@0	  ]

# group(x,y|1-2) (ct: 7 elts, 4 groups, 12288 bytes)
#---------------------------------#
# count	| x	| y	| gid	  #
#---------------------------------#
[ 1,	  'a',	  1,	  1@0	  ]
[ 1,	  'a',	  2,	  2@0	  ]
[ 3,	  'b',	  2,	  3@0	  ]
[ 2,	  'c',	  1,	  7@0	  ]

# group(x,y,z) (ct: 7 elts, 7 groups, 8192 bytes)
#-----------------------------------------#
# count	x	y	z	gid	  # name
# int	chr	dbl	str	oid	  # type
#-----------------------------------------#
[ 1,	  'a',	  1,	  "c",	  1@0	  ]
[ 1,	  'a',	  2,	  "a",	  2@0	  ]
[ 1,	  'b',	  2,	  "b",	  3@0	  ]
[ 1,	  'b',	  2,	  "c",	  4@0	  ]
[ 1,	  'b',	  2,	  "a",	  5@0	  ]
[ 1,	  'c',	  1,	  "c",	  7@0	  ]
[ 1,	  'c',	  1,	  "a",	  8@0	  ]

# create vectorized versions
x := x.reverse().project().reverse().copy();
y := y.reverse().project().reverse().copy();
z := z.reverse().project().reverse().copy();

# activate voids
x.seqbase(1@0);
y.seqbase(1@0);
z.seqbase(1@0);

xtable_test("small vectorized", x, y, z);
# xtable_test: small vectorized grouping (8 tuples, 32768 bytes)

#-----------------------------------------#
# BAT:	  x	| y	| yy	| z	  #
# (void)  (chr)	| (dbl)	| (dbl)	| (str)	  #
#-----------------------------------------#
[ 1@0,	  'a',	  1,	  2,	  "c"	  ]
[ 2@0,	  'a',	  2,	  3,	  "a"	  ]
[ 3@0,	  'b',	  2,	  3,	  "b"	  ]
[ 4@0,	  'b',	  2,	  3,	  "c"	  ]
[ 5@0,	  'b',	  2,	  3,	  "a"	  ]
[ 6@0,	  'b',	  3,	  4,	  "a"	  ]
[ 7@0,	  'c',	  1,	  2,	  "c"	  ]
[ 8@0,	  'c',	  1,	  2,	  "a"	  ]
synced(x,y) := true
synced(x,z) := true

# group(x) (ct: 8 elts, 3 groups, 12288 bytes)
#-------------------------#
# count	| x	| gid	  #
#-------------------------#
[ 2,	  'a',	  1@0	  ]
[ 4,	  'b',	  3@0	  ]
[ 2,	  'c',	  7@0	  ]

# group(x,y) (ct: 8 elts, 5 groups, 12288 bytes)
#---------------------------------#
# count	| x	| y	| gid	  #
#---------------------------------#
[ 1,	  'a',	  1,	  1@0	  ]
[ 1,	  'a',	  2,	  2@0	  ]
[ 3,	  'b',	  2,	  3@0	  ]
[ 1,	  'b',	  3,	  6@0	  ]
[ 2,	  'c',	  1,	  7@0	  ]

# orderby(x,y) (ct: 8 elts, 5 groups, 12288 bytes)
#---------------------------------#
# count	| x	| y	| gid	  #
#---------------------------------#
[ 1,	  'a',	  1,	  1@0	  ]
[ 1,	  'a',	  2,	  2@0	  ]
[ 3,	  'b',	  2,	  3@0	  ]
[ 1,	  'b',	  3,	  4@0	  ]
[ 2,	  'c',	  1,	  5@0	  ]

# subhisto(x,y|1-2) (ct: 8 elts, 5 groups, 8192 bytes)
#-------------------------#
# count	| y	| gid	  #
#-------------------------#
[ 1,	  1,	  1@0	  ]
[ 1,	  2,	  2@0	  ]
[ 3,	  2,	  3@0	  ]
[ 0,	  3,	  6@0	  ]
[ 2,	  1,	  7@0	  ]

# group(x,y|1-2) (ct: 7 elts, 4 groups, 12288 bytes)
#---------------------------------#
# count	| x	| y	| gid	  #
#---------------------------------#
[ 1,	  'a',	  1,	  1@0	  ]
[ 1,	  'a',	  2,	  2@0	  ]
[ 3,	  'b',	  2,	  3@0	  ]
[ 2,	  'c',	  1,	  7@0	  ]

# group(x,y,z) (ct: 7 elts, 7 groups, 8192 bytes)
#-----------------------------------------#
# count	x	y	z	gid	  # name
# int	chr	dbl	str	oid	  # type
#-----------------------------------------#
[ 1,	  'a',	  1,	  "c",	  1@0	  ]
[ 1,	  'a',	  2,	  "a",	  2@0	  ]
[ 1,	  'b',	  2,	  "b",	  3@0	  ]
[ 1,	  'b',	  2,	  "c",	  4@0	  ]
[ 1,	  'b',	  2,	  "a",	  5@0	  ]
[ 1,	  'c',	  1,	  "c",	  7@0	  ]
[ 1,	  'c',	  1,	  "a",	  8@0	  ]

# deactivate voids
x.seqbase(oid(nil));
y.seqbase(oid(nil));
z.seqbase(oid(nil));

print("growing vectorized tables from 8 to 512k elements...");
[ "growing vectorized tables from 8 to 512k elements..." ]
x := x.xtable_realloc(512*1024);
y := y.xtable_realloc(512*1024);
z := z.xtable_realloc(512*1024);
var i := 17;
while((i := i - 1) > 0) {
	x.insert(x.copy());
	y.insert(y.copy());
	z.insert(z.copy());
	print(x.count());
}
[ 16 ]
[ 32 ]
[ 64 ]
[ 128 ]
[ 256 ]
[ 512 ]
[ 1024 ]
[ 2048 ]
[ 4096 ]
[ 8192 ]
[ 16384 ]
[ 32768 ]
[ 65536 ]
[ 131072 ]
[ 262144 ]
[ 524288 ]
print("done!");
[ "done!" ]

# materialize the oids again
x := [oid](x.reverse().mark(oid(1))).reverse();
y := [oid](y.reverse().mark(oid(1))).reverse();
z := [oid](z.reverse().mark(oid(1))).reverse();
y := y.access(BAT_WRITE);
z := z.access(BAT_WRITE);
y.insert(0@0,dbl(nil));
z.insert(0@0,str(nil));
y.delete(0@0);
z.delete(0@0);

xtable_test("big hash", x, y, z);
# xtable_test: big hash grouping (524288 tuples, 21274624 bytes)

#-----------------------------------------#
# BAT:	  x	| y	| yy	| z	  #
# (oid)	  (chr)	| (dbl)	| (dbl)	| (str)	  #
#-----------------------------------------#
[ 1@0,	  'a',	  1,	  2,	  "c"	  ]
[ 2@0,	  'a',	  2,	  3,	  "a"	  ]
[ 3@0,	  'b',	  2,	  3,	  "b"	  ]
[ 4@0,	  'b',	  2,	  3,	  "c"	  ]
[ 5@0,	  'b',	  2,	  3,	  "a"	  ]
[ 6@0,	  'b',	  3,	  4,	  "a"	  ]
[ 7@0,	  'c',	  1,	  2,	  "c"	  ]
[ 8@0,	  'c',	  1,	  2,	  "a"	  ]
synced(x,y) := true
synced(x,z) := true

# group(x) (ct: 524288 elts, 3 groups, 4206592 bytes)
#-------------------------#
# count	| x	| gid	  #
#-------------------------#
[ 131072, 'a',	  1@0	  ]
[ 262144, 'b',	  3@0	  ]
[ 131072, 'c',	  7@0	  ]

# group(x,y) (ct: 524288 elts, 5 groups, 2109440 bytes)
#---------------------------------#
# count	| x	| y	| gid	  #
#---------------------------------#
[ 65536,  'a',	  1,	  1@0	  ]
[ 65536,  'a',	  2,	  2@0	  ]
[ 196608, 'b',	  2,	  3@0	  ]
[ 65536,  'b',	  3,	  6@0	  ]
[ 131072, 'c',	  1,	  7@0	  ]

# orderby(x,y) (ct: 524288 elts, 5 groups, 4206592 bytes)
#---------------------------------#
# count	| x	| y	| gid	  #
#---------------------------------#
[ 65536,  'a',	  1,	  1@0	  ]
[ 65536,  'a',	  2,	  2@0	  ]
[ 196608, 'b',	  2,	  3@0	  ]
[ 65536,  'b',	  3,	  4@0	  ]
[ 131072, 'c',	  1,	  5@0	  ]

# subhisto(x,y|1-2) (ct: 524288 elts, 5 groups, 4202496 bytes)
#-------------------------#
# count	| y	| gid	  #
#-------------------------#
[ 65536,  1,	  1@0	  ]
[ 65536,  2,	  2@0	  ]
[ 196608, 2,	  3@0	  ]
[ 0,	  3,	  6@0	  ]
[ 131072, 1,	  7@0	  ]

# group(x,y|1-2) (ct: 458752 elts, 4 groups, 3682304 bytes)
#---------------------------------#
# count	| x	| y	| gid	  #
#---------------------------------#
[ 65536,  'a',	  1,	  1@0	  ]
[ 65536,  'a',	  2,	  2@0	  ]
[ 196608, 'b',	  2,	  3@0	  ]
[ 131072, 'c',	  1,	  7@0	  ]

# group(x,y,z) (ct: 458752 elts, 7 groups, 8392704 bytes)
#-----------------------------------------#
# count	x	y	z	gid	  # name
# int	chr	dbl	str	oid	  # type
#-----------------------------------------#
[ 65536,  'a',	  1,	  "c",	  1@0	  ]
[ 65536,  'a',	  2,	  "a",	  2@0	  ]
[ 65536,  'b',	  2,	  "b",	  3@0	  ]
[ 65536,  'b',	  2,	  "c",	  4@0	  ]
[ 65536,  'b',	  2,	  "a",	  5@0	  ]
[ 65536,  'c',	  1,	  "c",	  7@0	  ]
[ 65536,  'c',	  1,	  "a",	  8@0	  ]

# let the Mserver find out that the head columns are equal
y := x.mirror().join(y);
z := x.mirror().join(z);

xtable_test("big synced", x, y, z);
# xtable_test: big synced grouping (524288 tuples, 10780672 bytes)

#-----------------------------------------#
# BAT:	  x	| y	| yy	| z	  #
# (oid)	  (chr)	| (dbl)	| (dbl)	| (str)	  #
#-----------------------------------------#
[ 1@0,	  'a',	  1,	  2,	  "c"	  ]
[ 2@0,	  'a',	  2,	  3,	  "a"	  ]
[ 3@0,	  'b',	  2,	  3,	  "b"	  ]
[ 4@0,	  'b',	  2,	  3,	  "c"	  ]
[ 5@0,	  'b',	  2,	  3,	  "a"	  ]
[ 6@0,	  'b',	  3,	  4,	  "a"	  ]
[ 7@0,	  'c',	  1,	  2,	  "c"	  ]
[ 8@0,	  'c',	  1,	  2,	  "a"	  ]
synced(x,y) := true
synced(x,z) := true

# group(x) (ct: 524288 elts, 3 groups, 4206592 bytes)
#-------------------------#
# count	| x	| gid	  #
#-------------------------#
[ 131072, 'a',	  1@0	  ]
[ 262144, 'b',	  3@0	  ]
[ 131072, 'c',	  7@0	  ]

# group(x,y) (ct: 524288 elts, 5 groups, 2109440 bytes)
#---------------------------------#
# count	| x	| y	| gid	  #
#---------------------------------#
[ 65536,  'a',	  1,	  1@0	  ]
[ 65536,  'a',	  2,	  2@0	  ]
[ 196608, 'b',	  2,	  3@0	  ]
[ 65536,  'b',	  3,	  6@0	  ]
[ 131072, 'c',	  1,	  7@0	  ]

# orderby(x,y) (ct: 524288 elts, 5 groups, 4206592 bytes)
#---------------------------------#
# count	| x	| y	| gid	  #
#---------------------------------#
[ 65536,  'a',	  1,	  1@0	  ]
[ 65536,  'a',	  2,	  2@0	  ]
[ 196608, 'b',	  2,	  3@0	  ]
[ 65536,  'b',	  3,	  4@0	  ]
[ 131072, 'c',	  1,	  5@0	  ]

# subhisto(x,y|1-2) (ct: 524288 elts, 5 groups, 4202496 bytes)
#-------------------------#
# count	| y	| gid	  #
#-------------------------#
[ 65536,  1,	  1@0	  ]
[ 65536,  2,	  2@0	  ]
[ 196608, 2,	  3@0	  ]
[ 0,	  3,	  6@0	  ]
[ 131072, 1,	  7@0	  ]

# group(x,y|1-2) (ct: 458752 elts, 4 groups, 3682304 bytes)
#---------------------------------#
# count	| x	| y	| gid	  #
#---------------------------------#
[ 65536,  'a',	  1,	  1@0	  ]
[ 65536,  'a',	  2,	  2@0	  ]
[ 196608, 'b',	  2,	  3@0	  ]
[ 131072, 'c',	  1,	  7@0	  ]

# group(x,y,z) (ct: 458752 elts, 7 groups, 8392704 bytes)
#-----------------------------------------#
# count	x	y	z	gid	  # name
# int	chr	dbl	str	oid	  # type
#-----------------------------------------#
[ 65536,  'a',	  1,	  "c",	  1@0	  ]
[ 65536,  'a',	  2,	  "a",	  2@0	  ]
[ 65536,  'b',	  2,	  "b",	  3@0	  ]
[ 65536,  'b',	  2,	  "c",	  4@0	  ]
[ 65536,  'b',	  2,	  "a",	  5@0	  ]
[ 65536,  'c',	  1,	  "c",	  7@0	  ]
[ 65536,  'c',	  1,	  "a",	  8@0	  ]

# activate voids
x := x.reverse().mark(1@0).reverse();
y := y.reverse().mark(1@0).reverse();
z := z.reverse().mark(1@0).reverse();

xtable_test("big vectorized", x, y, z);
# xtable_test: big vectorized grouping (524288 tuples, 540672 bytes)

#-----------------------------------------#
# BAT:	  x	| y	| yy	| z	  #
# (void)  (chr)	| (dbl)	| (dbl)	| (str)	  #
#-----------------------------------------#
[ 1@0,	  'a',	  1,	  2,	  "c"	  ]
[ 2@0,	  'a',	  2,	  3,	  "a"	  ]
[ 3@0,	  'b',	  2,	  3,	  "b"	  ]
[ 4@0,	  'b',	  2,	  3,	  "c"	  ]
[ 5@0,	  'b',	  2,	  3,	  "a"	  ]
[ 6@0,	  'b',	  3,	  4,	  "a"	  ]
[ 7@0,	  'c',	  1,	  2,	  "c"	  ]
[ 8@0,	  'c',	  1,	  2,	  "a"	  ]
synced(x,y) := true
synced(x,z) := true

# group(x) (ct: 524288 elts, 3 groups, 2109440 bytes)
#-------------------------#
# count	| x	| gid	  #
#-------------------------#
[ 131072, 'a',	  1@0	  ]
[ 262144, 'b',	  3@0	  ]
[ 131072, 'c',	  7@0	  ]

# group(x,y) (ct: 524288 elts, 5 groups, 2109440 bytes)
#---------------------------------#
# count	| x	| y	| gid	  #
#---------------------------------#
[ 65536,  'a',	  1,	  1@0	  ]
[ 65536,  'a',	  2,	  2@0	  ]
[ 196608, 'b',	  2,	  3@0	  ]
[ 65536,  'b',	  3,	  6@0	  ]
[ 131072, 'c',	  1,	  7@0	  ]

# orderby(x,y) (ct: 524288 elts, 5 groups, 4206592 bytes)
#---------------------------------#
# count	| x	| y	| gid	  #
#---------------------------------#
[ 65536,  'a',	  1,	  1@0	  ]
[ 65536,  'a',	  2,	  2@0	  ]
[ 196608, 'b',	  2,	  3@0	  ]
[ 65536,  'b',	  3,	  4@0	  ]
[ 131072, 'c',	  1,	  5@0	  ]

# subhisto(x,y|1-2) (ct: 524288 elts, 5 groups, 532480 bytes)
#-------------------------#
# count	| y	| gid	  #
#-------------------------#
[ 65536,  1,	  1@0	  ]
[ 65536,  2,	  2@0	  ]
[ 196608, 2,	  3@0	  ]
[ 0,	  3,	  6@0	  ]
[ 131072, 1,	  7@0	  ]

# group(x,y|1-2) (ct: 458752 elts, 4 groups, 3682304 bytes)
#---------------------------------#
# count	| x	| y	| gid	  #
#---------------------------------#
[ 65536,  'a',	  1,	  1@0	  ]
[ 65536,  'a',	  2,	  2@0	  ]
[ 196608, 'b',	  2,	  3@0	  ]
[ 131072, 'c',	  1,	  7@0	  ]

# group(x,y,z) (ct: 458752 elts, 7 groups, 8392704 bytes)
#-----------------------------------------#
# count	x	y	z	gid	  # name
# int	chr	dbl	str	oid	  # type
#-----------------------------------------#
[ 65536,  'a',	  1,	  "c",	  1@0	  ]
[ 65536,  'a',	  2,	  "a",	  2@0	  ]
[ 65536,  'b',	  2,	  "b",	  3@0	  ]
[ 65536,  'b',	  2,	  "c",	  4@0	  ]
[ 65536,  'b',	  2,	  "a",	  5@0	  ]
[ 65536,  'c',	  1,	  "c",	  7@0	  ]
[ 65536,  'c',	  1,	  "a",	  8@0	  ]

quit();

# 13:29:38 >  
# 13:29:38 >  Done.
# 13:29:38 >  

