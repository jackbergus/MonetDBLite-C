@/
The contents of this file are subject to the MonetDB Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is the MonetDB Database System.

The Initial Developer of the Original Code is CWI.
Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
Copyright August 2008-2011 MonetDB B.V.
All Rights Reserved.
@

@f uchr
@t The uchr module
@a Niels Nes
@v 1.0
@* Introduction
The uchr atom is just a chr but uses numerical string representations.


@* Implementation

@+ MEL definition
@m
.MODULE uchr;
	.ATOM uchr = chr;
		.FROMSTR = uchr_fromstr;
		.TOSTR   = uchr_tostr;
	.END;
.END uchr;

@+ C implementation
@c
#include "monetdb4_config.h"

/*
#define DEBUG 
*/

@h
#ifndef _UCHR_H
#define _UCHR_H
typedef unsigned char uchr;

#include "uchr.proto.h"
#define uchr_nil ((uchr)chr_nil)

#endif
@c
#include "uchr.h"

@- Atom commands
@c

int
uchr_fromstr(char *uchrStr, int *len, uchr **c)
{
	char *p = uchrStr;

#ifdef DEBUG
	printf("* uchr_fromstr:\n");
	printf("  - uchrStr: %s\n", (uchrStr != NULL ? uchrStr : "null"));
	printf("  - *len: %d\n", *len);
#endif

	if (!*c) {
		*c = (uchr *) GDKmalloc(sizeof(uchr));
	} else if (*len < (int) sizeof(uchr)) {
		GDKfree(*c);
		*c = GDKmalloc(sizeof(uchr));
		*len = sizeof(uchr);
	}

	while (GDKisspace(*p))
		p++;
	if (p[0] == 'n' && p[1] == 'i' && p[2] == 'l') {
		char **sc = (char **) c;

		**sc = chr_nil;
		p += 3;
	} else {
		long v = strtol(p, &p, 10);

		if (v < 0 || v > 255) {
			GDKwarning("Unsigned character cannot hold %d\n", v);
			v = chr_nil;
		}
		**c = (uchr) v;
	}

#ifdef DEBUG
	printf("  = *c: %d\n", (int) **c);
	printf("  = *len: %d\n", *len);
#endif

	return (int) (p - uchrStr);
}

int
uchr_tostr(char **uchrStr, int *len, uchr *c)
{
	int sc = *c;

#ifdef DEBUG
	printf("* uchr_tostr:\n");
	printf("  - *len: %d\n", *len);
	printf("  - c: %s\n", (c != NULL ? c : "null"));
#endif

	/* allocate and fill a new string */

	if (*len < 4) {
		GDKfree(*uchrStr);
		*uchrStr = GDKmalloc(4);
		*len = 4;
	}

	if (sc < 0) {
		GDKwarning("Unsigned character cannot hold %d\n", sc);
		sc = chr_nil;
	}
	if ((chr) sc == chr_nil) {
		strcpy(*uchrStr, "nil");
		return 3;
	}
	snprintf(*uchrStr, *len, "%d", sc);

#ifdef DEBUG
	printf("  = buf: %s\n", buf);
	printf("  = *uchrStr: %s\n", *uchrStr);
	printf("  = *len: %d\n", *len);
#endif
	return (int) strlen(*uchrStr);
}

@mil

PROC test_uchr() : void {
  var b := new(int, uchr);
  b.insert(1,uchr(1));
}
