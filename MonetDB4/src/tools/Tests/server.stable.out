stdout of test 'server` in directory 'src/tools` itself:


# 18:26:51 >  
# 18:26:51 >  Mtimeout -timeout 60 Mserver "--config=/var/tmp/_4.3.13-FixedPetersDDsync_PREFIX_MONET_GNU_32_d_--enable-warning_/etc/monet.conf" --debug=10 --set "monet_mod_path=/var/tmp/_4.3.13-FixedPetersDDsync_PREFIX_MONET_GNU_32_d_--enable-warning_/lib/MonetDB" --set "gdk_dbfarm=/var/tmp/_4.3.13-FixedPetersDDsync_PREFIX_MONET_GNU_32_d_--enable-warning_/var/MonetDB/dbfarm" --set "sql_logdir=/var/tmp/_4.3.13-FixedPetersDDsync_PREFIX_MONET_GNU_32_d_--enable-warning_/var/MonetDB/log" --set mapi_port=53708 --set sql_port=52024 --set monet_prompt= --trace --dbname=mTests_src_tools server.prelude < server.milM
# 18:26:51 >  

# Monet Database Server V4.3.13
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
Start of MIL prelude.
[ 0 ]
##------------------------------------------------------------------------#
## key   | put   | get  | wakeup  | enter | start | duration | action     #
##------------------------------------------------------------------------#
#-------------------------#
# BAT:		  bbp	  #
# (str)		  (int)	  #
#-------------------------#
[ "bats",	  28	  ]
[ "tmpbats",	  28	  ]
[ "perbats",	  0	  ]
#---------------------------------#
# module	| usage_count	  #
#---------------------------------#
[ "algebra",	  1		  ]
[ "arith",	  1		  ]
[ "bat",	  1		  ]
[ "kernel",	  1		  ]
[ "main",	  1		  ]
[ "str",	  1		  ]
[ "sys",	  1		  ]
[ "trans",	  1		  ]
#-----------------------------------------------------------------------------------------#
# MIL Procedure										  #
#-----------------------------------------------------------------------------------------#
[ "ADDHELP(str, str, str, str, str) : void"						  ]
[ "ascii(str) : int"									  ]
[ "atoms() : void"									  ]
[ "avg(BAT[any,dbl]) : dbl"								  ]
[ "avg(BAT[any,flt]) : dbl"								  ]
[ "avg(BAT[any,int]) : dbl"								  ]
[ "avg(BAT[any,lng]) : dbl"								  ]
[ "avg(BAT[any,sht]) : dbl"								  ]
[ "bbp() : BAT[str,int]"								  ]
[ "capacity(BAT[any,any]) : lng"							  ]
[ "clear(BAT[any::1,any::2]) : BAT[any::1,any::2]"					  ]
[ "clients() : void"									  ]
[ "col_name(BAT[any::1,any::2], str) : BAT[any::1,any::2]"				  ]
[ "cold(BAT[any::1,any::2]) : void"							  ]
[ "count_no_nil(BAT[any,any]) : int"							  ]
[ "cpu() : BAT[str,int]"								  ]
[ "destroy(BAT[any,any]) : bit"								  ]
[ "destroy(str) : bit"									  ]
[ "diff(BAT[any::1,any::2], BAT[any::1,any::2]) : BAT[any::1,any::2]"			  ]
[ "dir() : void"									  ]
[ "dir(BAT[int,str]) : void"								  ]
[ "dir(str) : void"									  ]
[ "dir_leaks() : void"									  ]
[ "env() : void"									  ]
[ "environment() : BAT[str,str]"							  ]
[ "exit() : void"									  ]
[ "find_unescaped_occurrence(str, chr) : int"						  ]
[ "head(BAT[any,any]) : str"								  ]
[ "help() : void"									  ]
[ "help(str) : void"									  ]
[ "help_sig(oid) : void"								  ]
[ "help_tpe(int) : str"									  ]
[ "hot(BAT[any::1,any::2]) : void"							  ]
[ "htype(any) : int"									  ]
[ "intersect(BAT[any::1,any::2], BAT[any::1,any::2]) : BAT[any::1,any::2]"		  ]
[ "io() : BAT[str,int]"									  ]
[ "join(BAT[any::1,any::2], BAT[any::2,any::3]) : BAT[any::1,any::3]"			  ]
[ "join(BAT[any::1,any::2], BAT[any::2,any::3], lng, str, ..any..) : BAT[any::1,any::3]"  ]
[ "join(BAT[any::1,any::2], BAT[any::2,any::3], str, ..any..) : BAT[any::1,any::3]"	  ]
[ "likeselect(BAT[any::1,str], str) : BAT[any::1,oid]"					  ]
[ "load(str) : BAT[any,any]"								  ]
[ "loaded() : void"									  ]
[ "locate(str, str) : int"								  ]
[ "locate(str, str, int) : int"								  ]
[ "ls() : void"										  ]
[ "ls(str) : void"									  ]
[ "madvise(BAT[any::1,any::2], int) : BAT[any::1,any::2]"				  ]
[ "mem_usage() : BAT[str,lng]"								  ]
[ "mem_usage(int) : BAT[str,lng]"							  ]
[ "memory() : BAT[str,int]"								  ]
[ "mil_select(BAT[any::1,any::2], str, ..any..) : BAT[any::1,any::2]"			  ]
[ "mil_select(BAT[any::1,any::2], str, any::2, any::2) : BAT[any::1,any::2]"		  ]
[ "mmap(BAT[any::1,any::2], int) : BAT[any::1,any::2]"					  ]
[ "modules() : void"									  ]
[ "neg_select(BAT[any::1,any::2], str, ..any..) : BAT[any::1,any::2]"			  ]
[ "new(BAT[any,any], BAT[any,any], int) : BAT[any,any]"					  ]
[ "new(int, int) : BAT[any,any]"							  ]
[ "new(int, int, int) : BAT[any,any]"							  ]
[ "new(int, int, lng) : BAT[any,any]"							  ]
[ "outerjoin(BAT[any::1,any::2], BAT[any::2,any::3]) : BAT[any::1,any::3]"		  ]
[ "procs() : void"									  ]
[ "prod(BAT[any,dbl]) : dbl"								  ]
[ "prod(BAT[any,flt]) : flt"								  ]
[ "prod(BAT[any,int]) : int"								  ]
[ "prod(BAT[any,lng]) : lng"								  ]
[ "prod(BAT[any,sht]) : sht"								  ]
[ "project(BAT[any::1,any]) : BAT[any::1,void]"						  ]
[ "readonly(BAT[any::1,any::2]) : int"							  ]
[ "readonly(BAT[any::1,any::2], int) : BAT[any::1,any::2]"				  ]
[ "rename(BAT[any::1,any::2], str) : BAT[any::1,any::2]"				  ]
[ "repeat(str, int) : str"								  ]
[ "rev_select(BAT[any::1,any::2], str, any::2) : BAT[any::1,any::2]"			  ]
[ "save(BAT[any::1,any::2]) : BAT[any::1,any::2]"					  ]
[ "semijoin(BAT[any::1,any::2], BAT[any::1,any]) : BAT[any::1,any::2]"			  ]
[ "sigs(str) : void"									  ]
[ "sort_ht(BAT[any::1,any::2]) : BAT[any::1,any::2]"					  ]
[ "space(int) : str"									  ]
[ "stringinsert(str, int, int, str) : str"						  ]
[ "stringleft(str, int) : str"								  ]
[ "stringlength(str) : int"								  ]
[ "stringreplace(str, str, str) : str"							  ]
[ "stringright(str, int) : str"								  ]
[ "substring(str, int) : str"								  ]
[ "substring(str, int, int) : str"							  ]
[ "sum(BAT[any,dbl]) : dbl"								  ]
[ "sum(BAT[any,flt]) : flt"								  ]
[ "sum(BAT[any,int]) : int"								  ]
[ "sum(BAT[any,lng]) : lng"								  ]
[ "sum(BAT[any,sht]) : sht"								  ]
[ "tail(BAT[any,any]) : str"								  ]
[ "test_arith() : void"									  ]
[ "test_str() : void"									  ]
[ "threads() : void"									  ]
[ "ttype(any) : int"									  ]
[ "tunique(BAT[any,any::1]) : BAT[any::1,void]"						  ]
[ "union(BAT[any::1,any::2], BAT[any::1,any::2]) : BAT[any::1,any::2]"			  ]
[ "unique(BAT[any::1,any::2]) : BAT[any::1,any::2]"					  ]
[ "vars() : void"									  ]
[ "vars(str) : void"									  ]
[ "vm_usage() : BAT[str,lng]"								  ]
[ "vm_usage(int) : BAT[str,lng]"							  ]
#-----------------------------------------------------------------#
# tmp_28			type	type_status	value_status	  # name
# str			str	str		str		  # type
#-----------------------------------------------------------------#
[ "BBPTRIM_ALL",	  "lng",  "frozen",	  "constant"	  ]
[ "monet_environment",	  "BAT",  "frozen",	  "constant"	  ]
[ "GE",			  "int",  "frozen",	  "constant"	  ]
[ "GT",			  "int",  "frozen",	  "constant"	  ]
[ "LE",			  "int",  "frozen",	  "constant"	  ]
[ "LT",			  "int",  "frozen",	  "constant"	  ]
[ "EQ",			  "int",  "frozen",	  "constant"	  ]
[ "BAT_WRITE",		  "int",  "frozen",	  "constant"	  ]
[ "BAT_APPEND",		  "int",  "frozen",	  "constant"	  ]
[ "BAT_READ",		  "int",  "frozen",	  "constant"	  ]
[ "BUF_DONTNEED",	  "int",  "frozen",	  "constant"	  ]
[ "BUF_WILLNEED",	  "int",  "frozen",	  "constant"	  ]
[ "BUF_SEQUENTIAL",	  "int",  "frozen",	  "constant"	  ]
[ "BUF_RANDOM",		  "int",  "frozen",	  "constant"	  ]
[ "BUF_NORMAL",		  "int",  "frozen",	  "constant"	  ]
[ "STORE_COMPR",	  "int",  "frozen",	  "constant"	  ]
[ "STORE_MMAP",		  "int",  "frozen",	  "constant"	  ]
[ "STORE_MEM",		  "int",  "frozen",	  "constant"	  ]
[ "monet_mod_var",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_mod_use",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_mod_proc",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_mod_nme",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_mod_load",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_mod_hdl",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_mod_drop",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_mod_dep",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_mod_cnt",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_mod_atm",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_mod_acc",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcn_tpe",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcn_sig",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcn_pro",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcn_nme",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcn_mid",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcn_imp",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcn_fcn",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcn_dsc",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcn_dat",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcn_cnt",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcn_aut",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_unicode_case",	  "BAT",  "frozen",	  "constant"	  ]
[ "LNG_MIN",		  "lng",  "frozen",	  "constant"	  ]
[ "LNG_MAX",		  "lng",  "frozen",	  "constant"	  ]
[ "INT_MIN",		  "int",  "frozen",	  "constant"	  ]
[ "INT_MAX",		  "int",  "frozen",	  "constant"	  ]
[ "SHT_MIN",		  "sht",  "frozen",	  "constant"	  ]
[ "SHT_MAX",		  "sht",  "frozen",	  "constant"	  ]
[ "CHR_MIN",		  "chr",  "frozen",	  "constant"	  ]
[ "CHR_MAX",		  "chr",  "frozen",	  "constant"	  ]
[ "RAND_MAX",		  "int",  "frozen",	  "constant"	  ]
[ "TOK_OBJECT",		  "int",  "frozen",	  "constant"	  ]
[ "TOK_ITERATOR",	  "int",  "frozen",	  "constant"	  ]
[ "TOK_COMMAND",	  "int",  "frozen",	  "constant"	  ]
[ "TOK_OPERATOR",	  "int",  "frozen",	  "constant"	  ]
[ "TOK_PROC",		  "int",  "frozen",	  "constant"	  ]
[ "TOK_BUILTIN",	  "int",  "frozen",	  "constant"	  ]
[ "monet_atomtbl",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_acctbl",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcntbl",	  "BAT",  "frozen",	  "constant"	  ]
#-----------------#
# BAT:	  kind	  #
# (int)	  (str)	  #
#-----------------#
[ 1,	  "tran"  ]
[ 2,	  "tran"  ]
[ 3,	  "tran"  ]
[ 4,	  "tran"  ]
[ 5,	  "tran"  ]
[ 6,	  "tran"  ]
[ 7,	  "tran"  ]
[ 8,	  "tran"  ]
[ 9,	  "tran"  ]
[ 10,	  "tran"  ]
[ 11,	  "tran"  ]
[ 12,	  "tran"  ]
[ 13,	  "tran"  ]
[ 14,	  "tran"  ]
[ 15,	  "tran"  ]
[ 16,	  "tran"  ]
[ 17,	  "tran"  ]
[ 18,	  "tran"  ]
[ 19,	  "tran"  ]
[ 20,	  "tran"  ]
[ 21,	  "tran"  ]
[ 22,	  "tran"  ]
[ 23,	  "tran"  ]
[ 24,	  "tran"  ]
[ 25,	  "tran"  ]
[ 26,	  "tran"  ]
[ 27,	  "tran"  ]
#-------------------------#
# BAT:	  location	  #
# (int)	  (str)		  #
#-------------------------#
[ 1,	  "1"		  ]
[ 2,	  "2"		  ]
[ 3,	  "3"		  ]
[ 4,	  "4"		  ]
[ 5,	  "5"		  ]
[ 6,	  "6"		  ]
[ 7,	  "7"		  ]
[ 8,	  "8"		  ]
[ 9,	  "9"		  ]
[ 10,	  "10"		  ]
[ 11,	  "11"		  ]
[ 12,	  "12"		  ]
[ 13,	  "13"		  ]
[ 14,	  "14"		  ]
[ 15,	  "15"		  ]
[ 16,	  "16"		  ]
[ 17,	  "17"		  ]
[ 18,	  "18"		  ]
[ 19,	  "19"		  ]
[ 20,	  "20"		  ]
[ 21,	  "21"		  ]
[ 22,	  "22"		  ]
[ 23,	  "23"		  ]
[ 24,	  "24"		  ]
[ 25,	  "25"		  ]
[ 26,	  "26"		  ]
[ 27,	  "27"		  ]
#---------------------------------#
# BAT:	  name			  #
# (int)	  (str)			  #
#---------------------------------#
[ 1,	  "monet_environment"	  ]
[ 2,	  "monet_fcn_fcn"	  ]
[ 3,	  "monet_fcn_imp"	  ]
[ 4,	  "monet_fcn_tpe"	  ]
[ 5,	  "monet_fcn_mid"	  ]
[ 6,	  "monet_fcn_sig"	  ]
[ 7,	  "monet_fcn_dsc"	  ]
[ 8,	  "monet_fcn_aut"	  ]
[ 9,	  "monet_fcn_dat"	  ]
[ 10,	  "monet_fcn_nme"	  ]
[ 11,	  "monet_fcn_pro"	  ]
[ 12,	  "monet_fcn_cnt"	  ]
[ 13,	  "monet_mod_nme"	  ]
[ 14,	  "monet_mod_cnt"	  ]
[ 15,	  "monet_mod_atm"	  ]
[ 16,	  "monet_mod_acc"	  ]
[ 17,	  "monet_mod_hdl"	  ]
[ 18,	  "monet_mod_dep"	  ]
[ 19,	  "monet_mod_use"	  ]
[ 20,	  "monet_mod_load"	  ]
[ 21,	  "monet_mod_drop"	  ]
[ 22,	  "monet_mod_proc"	  ]
[ 23,	  "monet_mod_var"	  ]
[ 24,	  "adm_fcntbl"		  ]
[ 25,	  "adm_acctbl"		  ]
[ 26,	  "adm_atomtbl"		  ]
[ 27,	  "monet_unicode_case"	  ]
#-----------------#
# BAT:	  refcnt  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  1	  ]
[ 4,	  1	  ]
[ 5,	  1	  ]
[ 6,	  1	  ]
[ 7,	  1	  ]
[ 8,	  1	  ]
[ 9,	  1	  ]
[ 10,	  1	  ]
[ 11,	  1	  ]
[ 12,	  1	  ]
[ 13,	  1	  ]
[ 14,	  1	  ]
[ 15,	  1	  ]
[ 16,	  1	  ]
[ 17,	  1	  ]
[ 18,	  1	  ]
[ 19,	  1	  ]
[ 20,	  1	  ]
[ 21,	  1	  ]
[ 22,	  1	  ]
[ 23,	  1	  ]
[ 24,	  1	  ]
[ 25,	  1	  ]
[ 26,	  1	  ]
[ 27,	  1	  ]
#-------------------------------------------------------------------------------------------------#
# BAT:	  tree											  #
# (int)	  (str)											  #
#-------------------------------------------------------------------------------------------------#
[ 0,	  ""											  ]
[ 1,	  "setoid(oid(10000000));printf(\"Start of MIL prelude.\\n\");print(clientid());qstat"	  ]
#-------------------------#
# BAT:		  bbp	  #
# (str)		  (int)	  #
#-------------------------#
[ "bats",	  28	  ]
[ "tmpbats",	  28	  ]
[ "perbats",	  0	  ]
[ "ondisk",	  0	  ]
[ "todisk",	  0	  ]
[ "fromdisk",	  0	  ]
#-----------------------------------------#
# BAT:			  tmp_34	  #
# (str)			  (str)		  #
#-----------------------------------------#
[ "BBPTRIM_ALL",	  "constant"	  ]
[ "monet_environment",	  "constant"	  ]
[ "GE",			  "constant"	  ]
[ "GT",			  "constant"	  ]
[ "LE",			  "constant"	  ]
[ "LT",			  "constant"	  ]
[ "EQ",			  "constant"	  ]
[ "BAT_WRITE",		  "constant"	  ]
[ "BAT_APPEND",		  "constant"	  ]
[ "BAT_READ",		  "constant"	  ]
[ "BUF_DONTNEED",	  "constant"	  ]
[ "BUF_WILLNEED",	  "constant"	  ]
[ "BUF_SEQUENTIAL",	  "constant"	  ]
[ "BUF_RANDOM",		  "constant"	  ]
[ "BUF_NORMAL",		  "constant"	  ]
[ "STORE_COMPR",	  "constant"	  ]
[ "STORE_MMAP",		  "constant"	  ]
[ "STORE_MEM",		  "constant"	  ]
[ "monet_mod_var",	  "constant"	  ]
[ "monet_mod_use",	  "constant"	  ]
[ "monet_mod_proc",	  "constant"	  ]
[ "monet_mod_nme",	  "constant"	  ]
[ "monet_mod_load",	  "constant"	  ]
[ "monet_mod_hdl",	  "constant"	  ]
[ "monet_mod_drop",	  "constant"	  ]
[ "monet_mod_dep",	  "constant"	  ]
[ "monet_mod_cnt",	  "constant"	  ]
[ "monet_mod_atm",	  "constant"	  ]
[ "monet_mod_acc",	  "constant"	  ]
[ "monet_fcn_tpe",	  "constant"	  ]
[ "monet_fcn_sig",	  "constant"	  ]
[ "monet_fcn_pro",	  "constant"	  ]
[ "monet_fcn_nme",	  "constant"	  ]
[ "monet_fcn_mid",	  "constant"	  ]
[ "monet_fcn_imp",	  "constant"	  ]
[ "monet_fcn_fcn",	  "constant"	  ]
[ "monet_fcn_dsc",	  "constant"	  ]
[ "monet_fcn_dat",	  "constant"	  ]
[ "monet_fcn_cnt",	  "constant"	  ]
[ "monet_fcn_aut",	  "constant"	  ]
[ "monet_unicode_case",	  "constant"	  ]
[ "LNG_MIN",		  "constant"	  ]
[ "LNG_MAX",		  "constant"	  ]
[ "INT_MIN",		  "constant"	  ]
[ "INT_MAX",		  "constant"	  ]
[ "SHT_MIN",		  "constant"	  ]
[ "SHT_MAX",		  "constant"	  ]
[ "CHR_MIN",		  "constant"	  ]
[ "CHR_MAX",		  "constant"	  ]
[ "RAND_MAX",		  "constant"	  ]
[ "TOK_OBJECT",		  "constant"	  ]
[ "TOK_ITERATOR",	  "constant"	  ]
[ "TOK_COMMAND",	  "constant"	  ]
[ "TOK_OPERATOR",	  "constant"	  ]
[ "TOK_PROC",		  "constant"	  ]
[ "TOK_BUILTIN",	  "constant"	  ]
[ "monet_atomtbl",	  "constant"	  ]
[ "monet_acctbl",	  "constant"	  ]
[ "monet_fcntbl",	  "constant"	  ]
#-----------------------------------------#
# BAT:			  tmp_36	  #
# (str)			  (str)		  #
#-----------------------------------------#
[ "BBPTRIM_ALL",	  "frozen"	  ]
[ "monet_environment",	  "frozen"	  ]
[ "GE",			  "frozen"	  ]
[ "GT",			  "frozen"	  ]
[ "LE",			  "frozen"	  ]
[ "LT",			  "frozen"	  ]
[ "EQ",			  "frozen"	  ]
[ "BAT_WRITE",		  "frozen"	  ]
[ "BAT_APPEND",		  "frozen"	  ]
[ "BAT_READ",		  "frozen"	  ]
[ "BUF_DONTNEED",	  "frozen"	  ]
[ "BUF_WILLNEED",	  "frozen"	  ]
[ "BUF_SEQUENTIAL",	  "frozen"	  ]
[ "BUF_RANDOM",		  "frozen"	  ]
[ "BUF_NORMAL",		  "frozen"	  ]
[ "STORE_COMPR",	  "frozen"	  ]
[ "STORE_MMAP",		  "frozen"	  ]
[ "STORE_MEM",		  "frozen"	  ]
[ "monet_mod_var",	  "frozen"	  ]
[ "monet_mod_use",	  "frozen"	  ]
[ "monet_mod_proc",	  "frozen"	  ]
[ "monet_mod_nme",	  "frozen"	  ]
[ "monet_mod_load",	  "frozen"	  ]
[ "monet_mod_hdl",	  "frozen"	  ]
[ "monet_mod_drop",	  "frozen"	  ]
[ "monet_mod_dep",	  "frozen"	  ]
[ "monet_mod_cnt",	  "frozen"	  ]
[ "monet_mod_atm",	  "frozen"	  ]
[ "monet_mod_acc",	  "frozen"	  ]
[ "monet_fcn_tpe",	  "frozen"	  ]
[ "monet_fcn_sig",	  "frozen"	  ]
[ "monet_fcn_pro",	  "frozen"	  ]
[ "monet_fcn_nme",	  "frozen"	  ]
[ "monet_fcn_mid",	  "frozen"	  ]
[ "monet_fcn_imp",	  "frozen"	  ]
[ "monet_fcn_fcn",	  "frozen"	  ]
[ "monet_fcn_dsc",	  "frozen"	  ]
[ "monet_fcn_dat",	  "frozen"	  ]
[ "monet_fcn_cnt",	  "frozen"	  ]
[ "monet_fcn_aut",	  "frozen"	  ]
[ "monet_unicode_case",	  "frozen"	  ]
[ "LNG_MIN",		  "frozen"	  ]
[ "LNG_MAX",		  "frozen"	  ]
[ "INT_MIN",		  "frozen"	  ]
[ "INT_MAX",		  "frozen"	  ]
[ "SHT_MIN",		  "frozen"	  ]
[ "SHT_MAX",		  "frozen"	  ]
[ "CHR_MIN",		  "frozen"	  ]
[ "CHR_MAX",		  "frozen"	  ]
[ "RAND_MAX",		  "frozen"	  ]
[ "TOK_OBJECT",		  "frozen"	  ]
[ "TOK_ITERATOR",	  "frozen"	  ]
[ "TOK_COMMAND",	  "frozen"	  ]
[ "TOK_OPERATOR",	  "frozen"	  ]
[ "TOK_PROC",		  "frozen"	  ]
[ "TOK_BUILTIN",	  "frozen"	  ]
[ "monet_atomtbl",	  "frozen"	  ]
[ "monet_acctbl",	  "frozen"	  ]
[ "monet_fcntbl",	  "frozen"	  ]
#---------------------------------#
# BAT:			  tmp_34  #
# (str)			  (str)	  #
#---------------------------------#
[ "BBPTRIM_ALL",	  "lng"	  ]
[ "monet_environment",	  "BAT"	  ]
[ "GE",			  "int"	  ]
[ "GT",			  "int"	  ]
[ "LE",			  "int"	  ]
[ "LT",			  "int"	  ]
[ "EQ",			  "int"	  ]
[ "BAT_WRITE",		  "int"	  ]
[ "BAT_APPEND",		  "int"	  ]
[ "BAT_READ",		  "int"	  ]
[ "BUF_DONTNEED",	  "int"	  ]
[ "BUF_WILLNEED",	  "int"	  ]
[ "BUF_SEQUENTIAL",	  "int"	  ]
[ "BUF_RANDOM",		  "int"	  ]
[ "BUF_NORMAL",		  "int"	  ]
[ "STORE_COMPR",	  "int"	  ]
[ "STORE_MMAP",		  "int"	  ]
[ "STORE_MEM",		  "int"	  ]
[ "monet_mod_var",	  "BAT"	  ]
[ "monet_mod_use",	  "BAT"	  ]
[ "monet_mod_proc",	  "BAT"	  ]
[ "monet_mod_nme",	  "BAT"	  ]
[ "monet_mod_load",	  "BAT"	  ]
[ "monet_mod_hdl",	  "BAT"	  ]
[ "monet_mod_drop",	  "BAT"	  ]
[ "monet_mod_dep",	  "BAT"	  ]
[ "monet_mod_cnt",	  "BAT"	  ]
[ "monet_mod_atm",	  "BAT"	  ]
[ "monet_mod_acc",	  "BAT"	  ]
[ "monet_fcn_tpe",	  "BAT"	  ]
[ "monet_fcn_sig",	  "BAT"	  ]
[ "monet_fcn_pro",	  "BAT"	  ]
[ "monet_fcn_nme",	  "BAT"	  ]
[ "monet_fcn_mid",	  "BAT"	  ]
[ "monet_fcn_imp",	  "BAT"	  ]
[ "monet_fcn_fcn",	  "BAT"	  ]
[ "monet_fcn_dsc",	  "BAT"	  ]
[ "monet_fcn_dat",	  "BAT"	  ]
[ "monet_fcn_cnt",	  "BAT"	  ]
[ "monet_fcn_aut",	  "BAT"	  ]
[ "monet_unicode_case",	  "BAT"	  ]
[ "LNG_MIN",		  "lng"	  ]
[ "LNG_MAX",		  "lng"	  ]
[ "INT_MIN",		  "int"	  ]
[ "INT_MAX",		  "int"	  ]
[ "SHT_MIN",		  "sht"	  ]
[ "SHT_MAX",		  "sht"	  ]
[ "CHR_MIN",		  "chr"	  ]
[ "CHR_MAX",		  "chr"	  ]
[ "RAND_MAX",		  "int"	  ]
[ "TOK_OBJECT",		  "int"	  ]
[ "TOK_ITERATOR",	  "int"	  ]
[ "TOK_COMMAND",	  "int"	  ]
[ "TOK_OPERATOR",	  "int"	  ]
[ "TOK_PROC",		  "int"	  ]
[ "TOK_BUILTIN",	  "int"	  ]
[ "monet_atomtbl",	  "BAT"	  ]
[ "monet_acctbl",	  "BAT"	  ]
[ "monet_fcntbl",	  "BAT"	  ]
#-----------------------------------------------------------------------------------------------------------------#
# name			| htype	| ttype	| count	| heat	| dirty		| status| kind	| refcnt| lrefcnt	  #
#-----------------------------------------------------------------------------------------------------------------#
[ "adm_acctbl",		  "str",  "int",  2,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "adm_atomtbl",	  "str",  "int",  13,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "adm_fcntbl",		  "str",  "oid",  674,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_environment",	  "str",  "str",  29,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_fcn_aut",	  "oid",  "str",  614,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_fcn_cnt",	  "oid",  "int",  674,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_fcn_dat",	  "oid",  "str",  614,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_fcn_dsc",	  "oid",  "str",  614,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_fcn_fcn",	  "oid",  "ptr",  573,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_fcn_imp",	  "oid",  "ptr",  674,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_fcn_mid",	  "oid",  "oid",  614,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_fcn_nme",	  "oid",  "str",  674,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_fcn_pro",	  "oid",  "str",  1672,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_fcn_sig",	  "oid",  "str",  39,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_fcn_tpe",	  "oid",  "int",  674,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_mod_acc",	  "oid",  "str",  0,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_mod_atm",	  "oid",  "str",  0,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_mod_cnt",	  "oid",  "int",  15,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_mod_dep",	  "oid",  "str",  7,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_mod_drop",	  "oid",  "int",  0,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_mod_hdl",	  "oid",  "ptr",  7,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_mod_load",	  "oid",  "str",  0,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_mod_nme",	  "oid",  "str",  15,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_mod_proc",	  "str",  "oid",  101,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_mod_use",	  "oid",  "int",  15,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_mod_var",	  "str",  "ptr",  50,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
[ "monet_unicode_case",	  "int",  "int",  732,	  0,	  "dirty",	  "load", "tran", 1,	  1		  ]
#-------------------------------------------------------------------------------------------------#
# name	| htype	| ttype	| count	| heat	| dirty		| status| kind	| refcnt| lrefcnt	  #
#-------------------------------------------------------------------------------------------------#
#-----------------#
# BAT:	  heat	  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  0	  ]
[ 2,	  0	  ]
[ 3,	  0	  ]
[ 4,	  0	  ]
[ 5,	  0	  ]
[ 6,	  0	  ]
[ 7,	  0	  ]
[ 8,	  0	  ]
[ 9,	  0	  ]
[ 10,	  0	  ]
[ 11,	  0	  ]
[ 12,	  0	  ]
[ 13,	  0	  ]
[ 14,	  0	  ]
[ 15,	  0	  ]
[ 16,	  0	  ]
[ 17,	  0	  ]
[ 18,	  0	  ]
[ 19,	  0	  ]
[ 20,	  0	  ]
[ 21,	  0	  ]
[ 22,	  0	  ]
[ 23,	  0	  ]
[ 24,	  0	  ]
[ 25,	  0	  ]
[ 26,	  0	  ]
[ 27,	  0	  ]
#~BeginVariableOutput~#
[ 10 ]
##------------------------------------------------------------------#
## req      | tid      | status   | wakeup | action                 #
##------------------------------------------------------------------#
#[      1,         0,         1,         0, "unknown(0)#"                   ]
#[      0,         1,   running,         1, "source("/var/tmp/_4.3.13-#"    ]
[ 1 ]
#-----------------------------------------------------------------------------------------------------------------------------------------#
# client	name	login				tree											  # name
# int	str	str				str											  # type
#-----------------------------------------------------------------------------------------------------------------------------------------#
[ 0,	  "adm",  "Fri Oct 29 17:05:42 2004",	  "clients()"										  ]
[ 1,	  "adm",  "Fri Oct 29 17:05:42 2004",	  "setoid(oid(10000000));printf(\"Start of MIL prelude.\\n\");print(clientid());qstat"	  ]
#-------------------------#
# BAT:		  cpu	  #
# (str)		  (int)	  #
#-------------------------#
[ "elapsed",	  0	  ]
[ "user",	  340	  ]
[ "elapuser",	  0	  ]
[ "system",	  1380	  ]
[ "elapsystem",	  0	  ]
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# h			monet_environment																																								  # name
# str			str																																										  # type
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
[ "config",		  "/ufs/sjoerd/src/MonetDB/build/conf/MonetDB.conf"																						  ]
[ "gdk_arch",		  "32biti686-redhat-linux-gnu"																									  ]
[ "gdk_version",	  "4.5.0"																											  ]
[ "monet_pid",		  "24673"																											  ]
[ "prefix",		  "/ufs/sjoerd/Monet"																										  ]
[ "exec_prefix",	  "/ufs/sjoerd/Monet"																										  ]
[ "gdk_dbname",		  "mTests_src_tools"											  ]
[ "gdk_dbfarm",		  "/ufs/sjoerd/src/MonetDB/build/dbfarm"																							  ]
[ "gdk_debug",		  "10"													  ]
[ "gdk_mem_bigsize",	  "33554432"																											  ]
[ "gdk_alloc_map",	  "yes"																																												  ]
[ "monet_admin",	  "adm"													  ]
[ "monet_prompt",	  ""													  ]
[ "monet_welcome",	  "yes"													  ]
[ "monet_nostalgic",	  "no"																																												  ]
[ "monet_mod_path",	  "/ufs/sjoerd/src/MonetDB/build/src/modules/plain/.libs:/ufs/sjoerd/src/MonetDB/build/src/modules/contrib/.libs:/ufs/sjoerd/src/MonetDB/build/src/modules/calibrator/.libs:/ufs/sjoerd/src/MonetDB/build/src/mapi/.libs"	  ]
[ "monet_daemon",	  "no"													  ]
[ "host",		  "localhost"												  ]
[ "mapi_port",		  "42525"																											  ]
[ "mapi_noheaders",	  "no"													  ]
[ "mapi_debug",		  "0"													  ]
[ "sql_port",		  "50313"																											  ]
[ "sql_debug",		  "0"													  ]
[ "sql_user",		  "monetdb"												  ]
[ "sql_schema",		  "sys"																																												  ]
[ "sql_logdir",		  "/ufs/sjoerd/src/MonetDB/build/log"																								  ]
[ "gdk_embedded",	  "no"																												  ]
[ "monet_cwd",		  "/net/indus/export/scratch1/sjoerd/MonetDB/mTests/src/tools"																					  ]
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# h			monet_environment																																								  # name
# str			str																																										  # type
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
[ "config",		  "/ufs/sjoerd/src/MonetDB/build/conf/MonetDB.conf"																						  ]
[ "gdk_arch",		  "32biti686-redhat-linux-gnu"																									  ]
[ "gdk_version",	  "4.5.0"																											  ]
[ "monet_pid",		  "24673"																											  ]
[ "prefix",		  "/ufs/sjoerd/Monet"																										  ]
[ "exec_prefix",	  "/ufs/sjoerd/Monet"																										  ]
[ "gdk_dbname",		  "mTests_src_tools"											  ]
[ "gdk_dbfarm",		  "/ufs/sjoerd/src/MonetDB/build/dbfarm"																							  ]
[ "gdk_debug",		  "10"													  ]
[ "gdk_mem_bigsize",	  "33554432"																											  ]
[ "gdk_alloc_map",	  "yes"																																												  ]
[ "monet_admin",	  "adm"													  ]
[ "monet_prompt",	  ""													  ]
[ "monet_welcome",	  "yes"													  ]
[ "monet_nostalgic",	  "no"																																												  ]
[ "monet_mod_path",	  "/ufs/sjoerd/src/MonetDB/build/src/modules/plain/.libs:/ufs/sjoerd/src/MonetDB/build/src/modules/contrib/.libs:/ufs/sjoerd/src/MonetDB/build/src/modules/calibrator/.libs:/ufs/sjoerd/src/MonetDB/build/src/mapi/.libs"	  ]
[ "monet_daemon",	  "no"													  ]
[ "host",		  "localhost"												  ]
[ "mapi_port",		  "42525"																											  ]
[ "mapi_noheaders",	  "no"													  ]
[ "mapi_debug",		  "0"													  ]
[ "sql_port",		  "50313"																											  ]
[ "sql_debug",		  "0"													  ]
[ "sql_user",		  "monetdb"												  ]
[ "sql_schema",		  "sys"																																												  ]
[ "sql_logdir",		  "/ufs/sjoerd/src/MonetDB/build/log"																								  ]
[ "gdk_embedded",	  "no"																												  ]
[ "monet_cwd",		  "/net/indus/export/scratch1/sjoerd/MonetDB/mTests/src/tools"																					  ]
#-------------------------#
# BAT:		  io	  #
# (str)		  (int)	  #
#-------------------------#
[ "maxrss",	  0	  ]
[ "minflt",	  1947	  ]
[ "majflt",	  0	  ]
[ "nswap",	  0	  ]
[ "inblock",	  0	  ]
[ "oublock",	  0	  ]
[ "nvcsw",	  3	  ]
[ "ninvcsw",	  23	  ]
#---------------------------------#
# BAT:		  mem		  #
# (str)		  (int)		  #
#---------------------------------#
[ "memincr",	  1662976	  ]
[ "arena",	  1798144	  ]
[ "ordblks",	  124		  ]
[ "smblks",	  0		  ]
[ "hblkhd",	  0		  ]
[ "hblks",	  0		  ]
[ "usmblks",	  0		  ]
[ "fsmblks",	  0		  ]
[ "uordblks",	  1664344	  ]
[ "fordblks",	  133800	  ]
#-------------------------#
# BAT:	  thread	  #
# (int)	  (str)		  #
#-------------------------#
[ 1,	  "Interpreter"	  ]
#-----------------------------------------#
# BAT:	  login				  #
# (int)	  (str)				  #
#-----------------------------------------#
[ 0,	  "Fri Oct 29 17:05:42 2004"	  ]
[ 1,	  "Fri Oct 29 17:05:42 2004"	  ]
#-----------------#
# BAT:	  name	  #
# (int)	  (str)	  #
#-----------------#
[ 0,	  "adm"	  ]
[ 1,	  "adm"	  ]
#-------------------------#
# BAT:		  cpu	  #
# (str)		  (int)	  #
#-------------------------#
[ "elapsed",	  0	  ]
[ "user",	  340	  ]
[ "elapuser",	  0	  ]
[ "system",	  1380	  ]
[ "elapsystem",	  0	  ]
#-----------------------------------------------------------------------------------------#
# h			monet_environment																																								  # name
# str			str																																										  # type
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
[ "config",		  "/ufs/sjoerd/src/MonetDB/build/conf/MonetDB.conf"																						  ]
[ "gdk_arch",		  "32biti686-redhat-linux-gnu"																									  ]
[ "gdk_version",	  "4.5.0"																											  ]
[ "monet_pid",		  "24673"																											  ]
[ "prefix",		  "/ufs/sjoerd/Monet"																										  ]
[ "exec_prefix",	  "/ufs/sjoerd/Monet"																										  ]
[ "gdk_dbname",		  "mTests_src_tools"											  ]
[ "gdk_dbfarm",		  "/ufs/sjoerd/src/MonetDB/build/dbfarm"																							  ]
[ "gdk_debug",		  "10"													  ]
[ "gdk_mem_bigsize",	  "33554432"																											  ]
[ "gdk_alloc_map",	  "yes"																																												  ]
[ "monet_admin",	  "adm"													  ]
[ "monet_prompt",	  ""													  ]
[ "monet_welcome",	  "yes"													  ]
[ "monet_nostalgic",	  "no"																																												  ]
[ "monet_mod_path",	  "/ufs/sjoerd/src/MonetDB/build/src/modules/plain/.libs:/ufs/sjoerd/src/MonetDB/build/src/modules/contrib/.libs:/ufs/sjoerd/src/MonetDB/build/src/modules/calibrator/.libs:/ufs/sjoerd/src/MonetDB/build/src/mapi/.libs"	  ]
[ "monet_daemon",	  "no"													  ]
[ "host",		  "localhost"												  ]
[ "mapi_port",		  "42525"																											  ]
[ "mapi_noheaders",	  "no"													  ]
[ "mapi_debug",		  "0"													  ]
[ "sql_port",		  "50313"																											  ]
[ "sql_debug",		  "0"													  ]
[ "sql_user",		  "monetdb"												  ]
[ "sql_schema",		  "sys"																																												  ]
[ "sql_logdir",		  "/ufs/sjoerd/src/MonetDB/build/log"																								  ]
[ "gdk_embedded",	  "no"																												  ]
[ "monet_cwd",		  "/net/indus/export/scratch1/sjoerd/MonetDB/mTests/src/tools"																					  ]
#-------------------------#
# BAT:		  io	  #
# (str)		  (int)	  #
#-------------------------#
[ "maxrss",	  0	  ]
[ "minflt",	  1947	  ]
[ "majflt",	  0	  ]
[ "nswap",	  0	  ]
[ "inblock",	  0	  ]
[ "oublock",	  0	  ]
[ "nvcsw",	  3	  ]
[ "ninvcsw",	  23	  ]
#---------------------------------#
# BAT:		  mem		  #
# (str)		  (int)		  #
#---------------------------------#
[ "memincr",	  0		  ]
[ "arena",	  1798144	  ]
[ "ordblks",	  121		  ]
[ "smblks",	  0		  ]
[ "hblkhd",	  0		  ]
[ "hblks",	  0		  ]
[ "usmblks",	  0		  ]
[ "fsmblks",	  0		  ]
[ "uordblks",	  1673176	  ]
[ "fordblks",	  124968	  ]
#-------------------------#
# BAT:	  thread	  #
# (int)	  (str)		  #
#-------------------------#
[ 1,	  "Interpreter"	  ]
#~EndVariableOutput~#
End of MIL prelude.
setoid(oid(20000000));

printf("Start of MIL script.\n");
Start of MIL script.

clientid().print();
[ 0 ]
qstat();
##------------------------------------------------------------------------#
## key   | put   | get  | wakeup  | enter | start | duration | action     #
##------------------------------------------------------------------------#

bbp().reverse().like("bat").reverse().print();
#-------------------------#
# BAT:		  bbp	  #
# (str)		  (int)	  #
#-------------------------#
[ "bats",	  28	  ]
[ "tmpbats",	  28	  ]
[ "perbats",	  0	  ]
loaded();
#---------------------------------#
# module	| usage_count	  #
#---------------------------------#
[ "algebra",	  1		  ]
[ "arith",	  1		  ]
[ "bat",	  1		  ]
[ "kernel",	  1		  ]
[ "main",	  1		  ]
[ "str",	  1		  ]
[ "sys",	  1		  ]
[ "trans",	  1		  ]
procs();
#-----------------------------------------------------------------------------------------#
# MIL Procedure										  #
#-----------------------------------------------------------------------------------------#
[ "ADDHELP(str, str, str, str, str) : void"						  ]
[ "ascii(str) : int"									  ]
[ "atoms() : void"									  ]
[ "avg(BAT[any,dbl]) : dbl"								  ]
[ "avg(BAT[any,flt]) : dbl"								  ]
[ "avg(BAT[any,int]) : dbl"								  ]
[ "avg(BAT[any,lng]) : dbl"								  ]
[ "avg(BAT[any,sht]) : dbl"								  ]
[ "bbp() : BAT[str,int]"								  ]
[ "capacity(BAT[any,any]) : lng"							  ]
[ "clear(BAT[any::1,any::2]) : BAT[any::1,any::2]"					  ]
[ "clients() : void"									  ]
[ "col_name(BAT[any::1,any::2], str) : BAT[any::1,any::2]"				  ]
[ "cold(BAT[any::1,any::2]) : void"							  ]
[ "count_no_nil(BAT[any,any]) : int"							  ]
[ "cpu() : BAT[str,int]"								  ]
[ "destroy(BAT[any,any]) : bit"								  ]
[ "destroy(str) : bit"									  ]
[ "diff(BAT[any::1,any::2], BAT[any::1,any::2]) : BAT[any::1,any::2]"			  ]
[ "dir() : void"									  ]
[ "dir(BAT[int,str]) : void"								  ]
[ "dir(str) : void"									  ]
[ "dir_leaks() : void"									  ]
[ "env() : void"									  ]
[ "environment() : BAT[str,str]"							  ]
[ "exit() : void"									  ]
[ "find_unescaped_occurrence(str, chr) : int"						  ]
[ "head(BAT[any,any]) : str"								  ]
[ "help() : void"									  ]
[ "help(str) : void"									  ]
[ "help_sig(oid) : void"								  ]
[ "help_tpe(int) : str"									  ]
[ "hot(BAT[any::1,any::2]) : void"							  ]
[ "htype(any) : int"									  ]
[ "intersect(BAT[any::1,any::2], BAT[any::1,any::2]) : BAT[any::1,any::2]"		  ]
[ "io() : BAT[str,int]"									  ]
[ "join(BAT[any::1,any::2], BAT[any::2,any::3]) : BAT[any::1,any::3]"			  ]
[ "join(BAT[any::1,any::2], BAT[any::2,any::3], lng, str, ..any..) : BAT[any::1,any::3]"  ]
[ "join(BAT[any::1,any::2], BAT[any::2,any::3], str, ..any..) : BAT[any::1,any::3]"	  ]
[ "likeselect(BAT[any::1,str], str) : BAT[any::1,oid]"					  ]
[ "load(str) : BAT[any,any]"								  ]
[ "loaded() : void"									  ]
[ "locate(str, str) : int"								  ]
[ "locate(str, str, int) : int"								  ]
[ "ls() : void"										  ]
[ "ls(str) : void"									  ]
[ "madvise(BAT[any::1,any::2], int) : BAT[any::1,any::2]"				  ]
[ "mem_usage() : BAT[str,lng]"								  ]
[ "mem_usage(int) : BAT[str,lng]"							  ]
[ "memory() : BAT[str,int]"								  ]
[ "mil_select(BAT[any::1,any::2], str, ..any..) : BAT[any::1,any::2]"			  ]
[ "mil_select(BAT[any::1,any::2], str, any::2, any::2) : BAT[any::1,any::2]"		  ]
[ "mmap(BAT[any::1,any::2], int) : BAT[any::1,any::2]"					  ]
[ "modules() : void"									  ]
[ "neg_select(BAT[any::1,any::2], str, ..any..) : BAT[any::1,any::2]"			  ]
[ "new(BAT[any,any], BAT[any,any], int) : BAT[any,any]"					  ]
[ "new(int, int) : BAT[any,any]"							  ]
[ "new(int, int, int) : BAT[any,any]"							  ]
[ "new(int, int, lng) : BAT[any,any]"							  ]
[ "outerjoin(BAT[any::1,any::2], BAT[any::2,any::3]) : BAT[any::1,any::3]"		  ]
[ "procs() : void"									  ]
[ "prod(BAT[any,dbl]) : dbl"								  ]
[ "prod(BAT[any,flt]) : flt"								  ]
[ "prod(BAT[any,int]) : int"								  ]
[ "prod(BAT[any,lng]) : lng"								  ]
[ "prod(BAT[any,sht]) : sht"								  ]
[ "project(BAT[any::1,any]) : BAT[any::1,void]"						  ]
[ "readonly(BAT[any::1,any::2]) : int"							  ]
[ "readonly(BAT[any::1,any::2], int) : BAT[any::1,any::2]"				  ]
[ "rename(BAT[any::1,any::2], str) : BAT[any::1,any::2]"				  ]
[ "repeat(str, int) : str"								  ]
[ "rev_select(BAT[any::1,any::2], str, any::2) : BAT[any::1,any::2]"			  ]
[ "save(BAT[any::1,any::2]) : BAT[any::1,any::2]"					  ]
[ "semijoin(BAT[any::1,any::2], BAT[any::1,any]) : BAT[any::1,any::2]"			  ]
[ "sigs(str) : void"									  ]
[ "sort_ht(BAT[any::1,any::2]) : BAT[any::1,any::2]"					  ]
[ "space(int) : str"									  ]
[ "stringinsert(str, int, int, str) : str"						  ]
[ "stringleft(str, int) : str"								  ]
[ "stringlength(str) : int"								  ]
[ "stringreplace(str, str, str) : str"							  ]
[ "stringright(str, int) : str"								  ]
[ "substring(str, int) : str"								  ]
[ "substring(str, int, int) : str"							  ]
[ "sum(BAT[any,dbl]) : dbl"								  ]
[ "sum(BAT[any,flt]) : flt"								  ]
[ "sum(BAT[any,int]) : int"								  ]
[ "sum(BAT[any,lng]) : lng"								  ]
[ "sum(BAT[any,sht]) : sht"								  ]
[ "tail(BAT[any,any]) : str"								  ]
[ "test_arith() : void"									  ]
[ "test_str() : void"									  ]
[ "threads() : void"									  ]
[ "ttype(any) : int"									  ]
[ "tunique(BAT[any,any::1]) : BAT[any::1,void]"						  ]
[ "union(BAT[any::1,any::2], BAT[any::1,any::2]) : BAT[any::1,any::2]"			  ]
[ "unique(BAT[any::1,any::2]) : BAT[any::1,any::2]"					  ]
[ "vars() : void"									  ]
[ "vars(str) : void"									  ]
[ "vm_usage() : BAT[str,lng]"								  ]
[ "vm_usage(int) : BAT[str,lng]"							  ]
# vars() without the value (view_var_value())
table(view_var_name().kdiff([startsWith](view_var_name(), ".").uselect(true)), 
              view_var_type(), view_var_kind(), view_var_constant());
#-----------------------------------------------------------------#
# tmp_33			type	type_status	value_status	  # name
# str			str	str		str		  # type
#-----------------------------------------------------------------#
[ "BBPTRIM_ALL",	  "lng",  "frozen",	  "constant"	  ]
[ "monet_environment",	  "BAT",  "frozen",	  "constant"	  ]
[ "GE",			  "int",  "frozen",	  "constant"	  ]
[ "GT",			  "int",  "frozen",	  "constant"	  ]
[ "LE",			  "int",  "frozen",	  "constant"	  ]
[ "LT",			  "int",  "frozen",	  "constant"	  ]
[ "EQ",			  "int",  "frozen",	  "constant"	  ]
[ "BAT_WRITE",		  "int",  "frozen",	  "constant"	  ]
[ "BAT_APPEND",		  "int",  "frozen",	  "constant"	  ]
[ "BAT_READ",		  "int",  "frozen",	  "constant"	  ]
[ "BUF_DONTNEED",	  "int",  "frozen",	  "constant"	  ]
[ "BUF_WILLNEED",	  "int",  "frozen",	  "constant"	  ]
[ "BUF_SEQUENTIAL",	  "int",  "frozen",	  "constant"	  ]
[ "BUF_RANDOM",		  "int",  "frozen",	  "constant"	  ]
[ "BUF_NORMAL",		  "int",  "frozen",	  "constant"	  ]
[ "STORE_COMPR",	  "int",  "frozen",	  "constant"	  ]
[ "STORE_MMAP",		  "int",  "frozen",	  "constant"	  ]
[ "STORE_MEM",		  "int",  "frozen",	  "constant"	  ]
[ "monet_mod_var",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_mod_use",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_mod_proc",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_mod_nme",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_mod_load",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_mod_hdl",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_mod_drop",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_mod_dep",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_mod_cnt",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_mod_atm",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_mod_acc",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcn_tpe",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcn_sig",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcn_pro",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcn_nme",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcn_mid",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcn_imp",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcn_fcn",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcn_dsc",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcn_dat",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcn_cnt",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcn_aut",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_unicode_case",	  "BAT",  "frozen",	  "constant"	  ]
[ "LNG_MIN",		  "lng",  "frozen",	  "constant"	  ]
[ "LNG_MAX",		  "lng",  "frozen",	  "constant"	  ]
[ "INT_MIN",		  "int",  "frozen",	  "constant"	  ]
[ "INT_MAX",		  "int",  "frozen",	  "constant"	  ]
[ "SHT_MIN",		  "sht",  "frozen",	  "constant"	  ]
[ "SHT_MAX",		  "sht",  "frozen",	  "constant"	  ]
[ "CHR_MIN",		  "chr",  "frozen",	  "constant"	  ]
[ "CHR_MAX",		  "chr",  "frozen",	  "constant"	  ]
[ "RAND_MAX",		  "int",  "frozen",	  "constant"	  ]
[ "TOK_OBJECT",		  "int",  "frozen",	  "constant"	  ]
[ "TOK_ITERATOR",	  "int",  "frozen",	  "constant"	  ]
[ "TOK_COMMAND",	  "int",  "frozen",	  "constant"	  ]
[ "TOK_OPERATOR",	  "int",  "frozen",	  "constant"	  ]
[ "TOK_PROC",		  "int",  "frozen",	  "constant"	  ]
[ "TOK_BUILTIN",	  "int",  "frozen",	  "constant"	  ]
[ "monet_atomtbl",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_acctbl",	  "BAT",  "frozen",	  "constant"	  ]
[ "monet_fcntbl",	  "BAT",  "frozen",	  "constant"	  ]
view_bbp_kind().print();
#-----------------#
# BAT:	  kind	  #
# (int)	  (str)	  #
#-----------------#
[ 1,	  "tran"  ]
[ 2,	  "tran"  ]
[ 3,	  "tran"  ]
[ 4,	  "tran"  ]
[ 5,	  "tran"  ]
[ 6,	  "tran"  ]
[ 7,	  "tran"  ]
[ 8,	  "tran"  ]
[ 9,	  "tran"  ]
[ 10,	  "tran"  ]
[ 11,	  "tran"  ]
[ 12,	  "tran"  ]
[ 13,	  "tran"  ]
[ 14,	  "tran"  ]
[ 15,	  "tran"  ]
[ 16,	  "tran"  ]
[ 17,	  "tran"  ]
[ 18,	  "tran"  ]
[ 19,	  "tran"  ]
[ 20,	  "tran"  ]
[ 21,	  "tran"  ]
[ 22,	  "tran"  ]
[ 23,	  "tran"  ]
[ 24,	  "tran"  ]
[ 25,	  "tran"  ]
[ 26,	  "tran"  ]
[ 27,	  "tran"  ]
view_bbp_location().print();
#-------------------------#
# BAT:	  location	  #
# (int)	  (str)		  #
#-------------------------#
[ 1,	  "1"		  ]
[ 2,	  "2"		  ]
[ 3,	  "3"		  ]
[ 4,	  "4"		  ]
[ 5,	  "5"		  ]
[ 6,	  "6"		  ]
[ 7,	  "7"		  ]
[ 8,	  "8"		  ]
[ 9,	  "9"		  ]
[ 10,	  "10"		  ]
[ 11,	  "11"		  ]
[ 12,	  "12"		  ]
[ 13,	  "13"		  ]
[ 14,	  "14"		  ]
[ 15,	  "15"		  ]
[ 16,	  "16"		  ]
[ 17,	  "17"		  ]
[ 18,	  "18"		  ]
[ 19,	  "19"		  ]
[ 20,	  "20"		  ]
[ 21,	  "21"		  ]
[ 22,	  "22"		  ]
[ 23,	  "23"		  ]
[ 24,	  "24"		  ]
[ 25,	  "25"		  ]
[ 26,	  "26"		  ]
[ 27,	  "27"		  ]
view_bbp_name().print();
#---------------------------------#
# BAT:	  name			  #
# (int)	  (str)			  #
#---------------------------------#
[ 1,	  "monet_environment"	  ]
[ 2,	  "monet_fcn_fcn"	  ]
[ 3,	  "monet_fcn_imp"	  ]
[ 4,	  "monet_fcn_tpe"	  ]
[ 5,	  "monet_fcn_mid"	  ]
[ 6,	  "monet_fcn_sig"	  ]
[ 7,	  "monet_fcn_dsc"	  ]
[ 8,	  "monet_fcn_aut"	  ]
[ 9,	  "monet_fcn_dat"	  ]
[ 10,	  "monet_fcn_nme"	  ]
[ 11,	  "monet_fcn_pro"	  ]
[ 12,	  "monet_fcn_cnt"	  ]
[ 13,	  "monet_mod_nme"	  ]
[ 14,	  "monet_mod_cnt"	  ]
[ 15,	  "monet_mod_atm"	  ]
[ 16,	  "monet_mod_acc"	  ]
[ 17,	  "monet_mod_hdl"	  ]
[ 18,	  "monet_mod_dep"	  ]
[ 19,	  "monet_mod_use"	  ]
[ 20,	  "monet_mod_load"	  ]
[ 21,	  "monet_mod_drop"	  ]
[ 22,	  "monet_mod_proc"	  ]
[ 23,	  "monet_mod_var"	  ]
[ 24,	  "adm_fcntbl"		  ]
[ 25,	  "adm_acctbl"		  ]
[ 26,	  "adm_atomtbl"		  ]
[ 27,	  "monet_unicode_case"	  ]
view_bbp_refcnt().print();
#-----------------#
# BAT:	  refcnt  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  1	  ]
[ 4,	  1	  ]
[ 5,	  1	  ]
[ 6,	  1	  ]
[ 7,	  1	  ]
[ 8,	  1	  ]
[ 9,	  1	  ]
[ 10,	  1	  ]
[ 11,	  1	  ]
[ 12,	  1	  ]
[ 13,	  1	  ]
[ 14,	  1	  ]
[ 15,	  1	  ]
[ 16,	  1	  ]
[ 17,	  1	  ]
[ 18,	  1	  ]
[ 19,	  1	  ]
[ 20,	  1	  ]
[ 21,	  1	  ]
[ 22,	  1	  ]
[ 23,	  1	  ]
[ 24,	  1	  ]
[ 25,	  1	  ]
[ 26,	  1	  ]
[ 27,	  1	  ]
view_client_tree().print();
#-----------------------------------------#
# BAT:	  tree				  #
# (int)	  (str)				  #
#-----------------------------------------#
[ 0,	  "print(view_client_tree())"	  ]
view_gdk_bbp().print();
#-------------------------#
# BAT:		  bbp	  #
# (str)		  (int)	  #
#-------------------------#
[ "bats",	  28	  ]
[ "tmpbats",	  28	  ]
[ "perbats",	  0	  ]
[ "ondisk",	  0	  ]
[ "todisk",	  0	  ]
[ "fromdisk",	  0	  ]
view_var_name().reverse().join(view_var_constant()).print();
#-----------------------------------------#
# BAT:			  tmp_32	  #
# (str)			  (str)		  #
#-----------------------------------------#
[ "BBPTRIM_ALL",	  "constant"	  ]
[ "monet_environment",	  "constant"	  ]
[ "GE",			  "constant"	  ]
[ "GT",			  "constant"	  ]
[ "LE",			  "constant"	  ]
[ "LT",			  "constant"	  ]
[ "EQ",			  "constant"	  ]
[ "BAT_WRITE",		  "constant"	  ]
[ "BAT_APPEND",		  "constant"	  ]
[ "BAT_READ",		  "constant"	  ]
[ "BUF_DONTNEED",	  "constant"	  ]
[ "BUF_WILLNEED",	  "constant"	  ]
[ "BUF_SEQUENTIAL",	  "constant"	  ]
[ "BUF_RANDOM",		  "constant"	  ]
[ "BUF_NORMAL",		  "constant"	  ]
[ "STORE_COMPR",	  "constant"	  ]
[ "STORE_MMAP",		  "constant"	  ]
[ "STORE_MEM",		  "constant"	  ]
[ "monet_mod_var",	  "constant"	  ]
[ "monet_mod_use",	  "constant"	  ]
[ "monet_mod_proc",	  "constant"	  ]
[ "monet_mod_nme",	  "constant"	  ]
[ "monet_mod_load",	  "constant"	  ]
[ "monet_mod_hdl",	  "constant"	  ]
[ "monet_mod_drop",	  "constant"	  ]
[ "monet_mod_dep",	  "constant"	  ]
[ "monet_mod_cnt",	  "constant"	  ]
[ "monet_mod_atm",	  "constant"	  ]
[ "monet_mod_acc",	  "constant"	  ]
[ "monet_fcn_tpe",	  "constant"	  ]
[ "monet_fcn_sig",	  "constant"	  ]
[ "monet_fcn_pro",	  "constant"	  ]
[ "monet_fcn_nme",	  "constant"	  ]
[ "monet_fcn_mid",	  "constant"	  ]
[ "monet_fcn_imp",	  "constant"	  ]
[ "monet_fcn_fcn",	  "constant"	  ]
[ "monet_fcn_dsc",	  "constant"	  ]
[ "monet_fcn_dat",	  "constant"	  ]
[ "monet_fcn_cnt",	  "constant"	  ]
[ "monet_fcn_aut",	  "constant"	  ]
[ "monet_unicode_case",	  "constant"	  ]
[ "LNG_MIN",		  "constant"	  ]
[ "LNG_MAX",		  "constant"	  ]
[ "INT_MIN",		  "constant"	  ]
[ "INT_MAX",		  "constant"	  ]
[ "SHT_MIN",		  "constant"	  ]
[ "SHT_MAX",		  "constant"	  ]
[ "CHR_MIN",		  "constant"	  ]
[ "CHR_MAX",		  "constant"	  ]
[ "RAND_MAX",		  "constant"	  ]
[ "TOK_OBJECT",		  "constant"	  ]
[ "TOK_ITERATOR",	  "constant"	  ]
[ "TOK_COMMAND",	  "constant"	  ]
[ "TOK_OPERATOR",	  "constant"	  ]
[ "TOK_PROC",		  "constant"	  ]
[ "TOK_BUILTIN",	  "constant"	  ]
[ "monet_atomtbl",	  "constant"	  ]
[ "monet_acctbl",	  "constant"	  ]
[ "monet_fcntbl",	  "constant"	  ]
view_var_name().reverse().join(view_var_kind()).print();
#-----------------------------------------#
# BAT:			  tmp_29	  #
# (str)			  (str)		  #
#-----------------------------------------#
[ "BBPTRIM_ALL",	  "frozen"	  ]
[ "monet_environment",	  "frozen"	  ]
[ "GE",			  "frozen"	  ]
[ "GT",			  "frozen"	  ]
[ "LE",			  "frozen"	  ]
[ "LT",			  "frozen"	  ]
[ "EQ",			  "frozen"	  ]
[ "BAT_WRITE",		  "frozen"	  ]
[ "BAT_APPEND",		  "frozen"	  ]
[ "BAT_READ",		  "frozen"	  ]
[ "BUF_DONTNEED",	  "frozen"	  ]
[ "BUF_WILLNEED",	  "frozen"	  ]
[ "BUF_SEQUENTIAL",	  "frozen"	  ]
[ "BUF_RANDOM",		  "frozen"	  ]
[ "BUF_NORMAL",		  "frozen"	  ]
[ "STORE_COMPR",	  "frozen"	  ]
[ "STORE_MMAP",		  "frozen"	  ]
[ "STORE_MEM",		  "frozen"	  ]
[ "monet_mod_var",	  "frozen"	  ]
[ "monet_mod_use",	  "frozen"	  ]
[ "monet_mod_proc",	  "frozen"	  ]
[ "monet_mod_nme",	  "frozen"	  ]
[ "monet_mod_load",	  "frozen"	  ]
[ "monet_mod_hdl",	  "frozen"	  ]
[ "monet_mod_drop",	  "frozen"	  ]
[ "monet_mod_dep",	  "frozen"	  ]
[ "monet_mod_cnt",	  "frozen"	  ]
[ "monet_mod_atm",	  "frozen"	  ]
[ "monet_mod_acc",	  "frozen"	  ]
[ "monet_fcn_tpe",	  "frozen"	  ]
[ "monet_fcn_sig",	  "frozen"	  ]
[ "monet_fcn_pro",	  "frozen"	  ]
[ "monet_fcn_nme",	  "frozen"	  ]
[ "monet_fcn_mid",	  "frozen"	  ]
[ "monet_fcn_imp",	  "frozen"	  ]
[ "monet_fcn_fcn",	  "frozen"	  ]
[ "monet_fcn_dsc",	  "frozen"	  ]
[ "monet_fcn_dat",	  "frozen"	  ]
[ "monet_fcn_cnt",	  "frozen"	  ]
[ "monet_fcn_aut",	  "frozen"	  ]
[ "monet_unicode_case",	  "frozen"	  ]
[ "LNG_MIN",		  "frozen"	  ]
[ "LNG_MAX",		  "frozen"	  ]
[ "INT_MIN",		  "frozen"	  ]
[ "INT_MAX",		  "frozen"	  ]
[ "SHT_MIN",		  "frozen"	  ]
[ "SHT_MAX",		  "frozen"	  ]
[ "CHR_MIN",		  "frozen"	  ]
[ "CHR_MAX",		  "frozen"	  ]
[ "RAND_MAX",		  "frozen"	  ]
[ "TOK_OBJECT",		  "frozen"	  ]
[ "TOK_ITERATOR",	  "frozen"	  ]
[ "TOK_COMMAND",	  "frozen"	  ]
[ "TOK_OPERATOR",	  "frozen"	  ]
[ "TOK_PROC",		  "frozen"	  ]
[ "TOK_BUILTIN",	  "frozen"	  ]
[ "monet_atomtbl",	  "frozen"	  ]
[ "monet_acctbl",	  "frozen"	  ]
[ "monet_fcntbl",	  "frozen"	  ]
view_var_name().reverse().join(view_var_type()).print();
#---------------------------------#
# BAT:			  tmp_32  #
# (str)			  (str)	  #
#---------------------------------#
[ "BBPTRIM_ALL",	  "lng"	  ]
[ "monet_environment",	  "BAT"	  ]
[ "GE",			  "int"	  ]
[ "GT",			  "int"	  ]
[ "LE",			  "int"	  ]
[ "LT",			  "int"	  ]
[ "EQ",			  "int"	  ]
[ "BAT_WRITE",		  "int"	  ]
[ "BAT_APPEND",		  "int"	  ]
[ "BAT_READ",		  "int"	  ]
[ "BUF_DONTNEED",	  "int"	  ]
[ "BUF_WILLNEED",	  "int"	  ]
[ "BUF_SEQUENTIAL",	  "int"	  ]
[ "BUF_RANDOM",		  "int"	  ]
[ "BUF_NORMAL",		  "int"	  ]
[ "STORE_COMPR",	  "int"	  ]
[ "STORE_MMAP",		  "int"	  ]
[ "STORE_MEM",		  "int"	  ]
[ "monet_mod_var",	  "BAT"	  ]
[ "monet_mod_use",	  "BAT"	  ]
[ "monet_mod_proc",	  "BAT"	  ]
[ "monet_mod_nme",	  "BAT"	  ]
[ "monet_mod_load",	  "BAT"	  ]
[ "monet_mod_hdl",	  "BAT"	  ]
[ "monet_mod_drop",	  "BAT"	  ]
[ "monet_mod_dep",	  "BAT"	  ]
[ "monet_mod_cnt",	  "BAT"	  ]
[ "monet_mod_atm",	  "BAT"	  ]
[ "monet_mod_acc",	  "BAT"	  ]
[ "monet_fcn_tpe",	  "BAT"	  ]
[ "monet_fcn_sig",	  "BAT"	  ]
[ "monet_fcn_pro",	  "BAT"	  ]
[ "monet_fcn_nme",	  "BAT"	  ]
[ "monet_fcn_mid",	  "BAT"	  ]
[ "monet_fcn_imp",	  "BAT"	  ]
[ "monet_fcn_fcn",	  "BAT"	  ]
[ "monet_fcn_dsc",	  "BAT"	  ]
[ "monet_fcn_dat",	  "BAT"	  ]
[ "monet_fcn_cnt",	  "BAT"	  ]
[ "monet_fcn_aut",	  "BAT"	  ]
[ "monet_unicode_case",	  "BAT"	  ]
[ "LNG_MIN",		  "lng"	  ]
[ "LNG_MAX",		  "lng"	  ]
[ "INT_MIN",		  "int"	  ]
[ "INT_MAX",		  "int"	  ]
[ "SHT_MIN",		  "sht"	  ]
[ "SHT_MAX",		  "sht"	  ]
[ "CHR_MIN",		  "chr"	  ]
[ "CHR_MAX",		  "chr"	  ]
[ "RAND_MAX",		  "int"	  ]
[ "TOK_OBJECT",		  "int"	  ]
[ "TOK_ITERATOR",	  "int"	  ]
[ "TOK_COMMAND",	  "int"	  ]
[ "TOK_OPERATOR",	  "int"	  ]
[ "TOK_PROC",		  "int"	  ]
[ "TOK_BUILTIN",	  "int"	  ]
[ "monet_atomtbl",	  "BAT"	  ]
[ "monet_acctbl",	  "BAT"	  ]
[ "monet_fcntbl",	  "BAT"	  ]
view_bbp_heat().print();
#-----------------#
# BAT:	  heat	  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  0	  ]
[ 2,	  0	  ]
[ 3,	  0	  ]
[ 4,	  0	  ]
[ 5,	  0	  ]
[ 6,	  0	  ]
[ 7,	  0	  ]
[ 8,	  0	  ]
[ 9,	  0	  ]
[ 10,	  0	  ]
[ 11,	  0	  ]
[ 12,	  0	  ]
[ 13,	  0	  ]
[ 14,	  0	  ]
[ 15,	  0	  ]
[ 16,	  0	  ]
[ 17,	  0	  ]
[ 18,	  0	  ]
[ 19,	  0	  ]
[ 20,	  0	  ]
[ 21,	  0	  ]
[ 22,	  0	  ]
[ 23,	  0	  ]
[ 24,	  0	  ]
[ 25,	  0	  ]
[ 26,	  0	  ]
[ 27,	  0	  ]

printf("#~BeginVariableOutput~#\n");
#~BeginVariableOutput~#

var skiplist:= new(void,str);
skiplist.insert(nil,"config");
skiplist.insert(nil,"monet_pid");
skiplist.insert(nil,"prefix");
skiplist.insert(nil,"exec_prefix");
skiplist.insert(nil,"gdk_dbfarm");
skiplist.insert(nil,"monet_mod_path");
skiplist.insert(nil,"mapi_port");
skiplist.insert(nil,"sql_port");
skiplist.insert(nil,"sql_logdir");
skiplist.insert(nil,"monet_cwd");

debugmask().print();
[ 10 ]
queue();
##------------------------------------------------------------------#
## req      | tid      | status   | wakeup | action                 #
##------------------------------------------------------------------#
#[     48,         0,         1,         0, "unknown(0)#"                   ]
#[     49,         1,   running,        48, "queue()#"                      ]
threadid().print();
[ 1 ]

clients();
#-----------------------------------------------------------------#
# BAT:	  name	| login				| tree		  #
# (int)	  (str)	| (str)				| (str)		  #
#-----------------------------------------------------------------#
[ 0,	  "adm",  "Fri Oct 29 17:05:42 2004",	  "clients()"	  ]
cpu().print();
#-------------------------#
# BAT:		  cpu	  #
# (str)		  (int)	  #
#-------------------------#
[ "elapsed",	  0	  ]
[ "user",	  360	  ]
[ "elapuser",	  20	  ]
[ "system",	  1380	  ]
[ "elapsystem",	  0	  ]
environment().kdiff(skiplist.reverse()).print();
#---------------------------------------------------------#
# h			tmp_29				  # name
# str			str																																										  # type
#---------------------------------------------------------#
[ "gdk_arch",		  "32biti686-redhat-linux-gnu"	  ]
[ "gdk_version",	  "4.5.0"			  ]
[ "gdk_dbname",		  "mTests_src_tools"											  ]
[ "gdk_debug",		  "10"													  ]
[ "gdk_mem_bigsize",	  "33554432"																											  ]
[ "gdk_alloc_map",	  "yes"																																												  ]
[ "monet_admin",	  "adm"													  ]
[ "monet_prompt",	  ""													  ]
[ "monet_welcome",	  "yes"													  ]
[ "monet_nostalgic",	  "no"																																												  ]
[ "monet_daemon",	  "no"													  ]
[ "host",		  "localhost"												  ]
[ "mapi_noheaders",	  "no"													  ]
[ "mapi_debug",		  "0"													  ]
[ "sql_debug",		  "0"													  ]
[ "sql_user",		  "monetdb"												  ]
[ "sql_schema",		  "sys"																																												  ]
[ "gdk_embedded",	  "no"				  ]
io().print();
#-------------------------#
# BAT:		  io	  #
# (str)		  (int)	  #
#-------------------------#
[ "maxrss",	  0	  ]
[ "minflt",	  1948	  ]
[ "majflt",	  0	  ]
[ "nswap",	  0	  ]
[ "inblock",	  0	  ]
[ "oublock",	  0	  ]
[ "nvcsw",	  5	  ]
[ "ninvcsw",	  25	  ]
memory().print();
#---------------------------------#
# BAT:		  mem		  #
# (str)		  (int)		  #
#---------------------------------#
[ "memincr",	  0		  ]
[ "arena",	  1798144	  ]
[ "ordblks",	  446		  ]
[ "smblks",	  0		  ]
[ "hblkhd",	  0		  ]
[ "hblks",	  0		  ]
[ "usmblks",	  0		  ]
[ "fsmblks",	  0		  ]
[ "uordblks",	  1521440	  ]
[ "fordblks",	  276704	  ]
threads();
#-------------------------#
# BAT:	  thread	  #
# (int)	  (str)		  #
#-------------------------#
[ 1,	  "Interpreter"	  ]
view_client_login().print();
#-----------------------------------------#
# BAT:	  login				  #
# (int)	  (str)				  #
#-----------------------------------------#
[ 0,	  "Fri Oct 29 17:05:42 2004"	  ]
view_client_name().print();
#-----------------#
# BAT:	  name	  #
# (int)	  (str)	  #
#-----------------#
[ 0,	  "adm"	  ]
view_gdk_cpu().print();
#-------------------------#
# BAT:		  cpu	  #
# (str)		  (int)	  #
#-------------------------#
[ "elapsed",	  0	  ]
[ "user",	  360	  ]
[ "elapuser",	  0	  ]
[ "system",	  1380	  ]
[ "elapsystem",	  0	  ]
view_gdk_env().print();
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# h			monet_environment																																								  # name
# str			str																																										  # type
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
[ "config",		  "/ufs/sjoerd/src/MonetDB/build/conf/MonetDB.conf"																						  ]
[ "gdk_arch",		  "32biti686-redhat-linux-gnu"																									  ]
[ "gdk_version",	  "4.5.0"																											  ]
[ "monet_pid",		  "24673"																											  ]
[ "prefix",		  "/ufs/sjoerd/Monet"																										  ]
[ "exec_prefix",	  "/ufs/sjoerd/Monet"																										  ]
[ "gdk_dbname",		  "mTests_src_tools"											  ]
[ "gdk_dbfarm",		  "/ufs/sjoerd/src/MonetDB/build/dbfarm"																							  ]
[ "gdk_debug",		  "10"													  ]
[ "gdk_mem_bigsize",	  "33554432"																											  ]
[ "gdk_alloc_map",	  "yes"																																												  ]
[ "monet_admin",	  "adm"													  ]
[ "monet_prompt",	  ""													  ]
[ "monet_welcome",	  "yes"													  ]
[ "monet_nostalgic",	  "no"																																												  ]
[ "monet_mod_path",	  "/ufs/sjoerd/src/MonetDB/build/src/modules/plain/.libs:/ufs/sjoerd/src/MonetDB/build/src/modules/contrib/.libs:/ufs/sjoerd/src/MonetDB/build/src/modules/calibrator/.libs:/ufs/sjoerd/src/MonetDB/build/src/mapi/.libs"	  ]
[ "monet_daemon",	  "no"													  ]
[ "host",		  "localhost"												  ]
[ "mapi_port",		  "42525"																											  ]
[ "mapi_noheaders",	  "no"													  ]
[ "mapi_debug",		  "0"													  ]
[ "sql_port",		  "50313"																											  ]
[ "sql_debug",		  "0"													  ]
[ "sql_user",		  "monetdb"												  ]
[ "sql_schema",		  "sys"																																												  ]
[ "sql_logdir",		  "/ufs/sjoerd/src/MonetDB/build/log"																								  ]
[ "gdk_embedded",	  "no"																												  ]
[ "monet_cwd",		  "/net/indus/export/scratch1/sjoerd/MonetDB/mTests/src/tools"																					  ]
view_gdk_io().print();
#-------------------------#
# BAT:		  io	  #
# (str)		  (int)	  #
#-------------------------#
[ "maxrss",	  0	  ]
[ "minflt",	  1948	  ]
[ "majflt",	  0	  ]
[ "nswap",	  0	  ]
[ "inblock",	  0	  ]
[ "oublock",	  0	  ]
[ "nvcsw",	  5	  ]
[ "ninvcsw",	  25	  ]
view_gdk_memory().print();
#---------------------------------#
# BAT:		  mem		  #
# (str)		  (int)		  #
#---------------------------------#
[ "memincr",	  0		  ]
[ "arena",	  1798144	  ]
[ "ordblks",	  449		  ]
[ "smblks",	  0		  ]
[ "hblkhd",	  0		  ]
[ "hblks",	  0		  ]
[ "usmblks",	  0		  ]
[ "fsmblks",	  0		  ]
[ "uordblks",	  1520832	  ]
[ "fordblks",	  277312	  ]
view_gdk_thread().print();
#-------------------------#
# BAT:	  thread	  #
# (int)	  (str)		  #
#-------------------------#
[ 1,	  "Interpreter"	  ]

printf("#~EndVariableOutput~#\n");
#~EndVariableOutput~#

printf("End of MIL script.\n");
End of MIL script.

quit();

# 18:26:52 >  
# 18:26:52 >  Done.
# 18:26:52 >  

