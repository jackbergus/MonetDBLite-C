vm_minsize(lng(128*1024));

# test memory map of string heap under append
var i := 0;
var b := 20000;
var d := new(void,int,b).seqbase(0@0);

# temporarily disable propmask in order to make this bearable
var m := debugmask();
debugmask(2);
while(i < b) d.append(i :+= 1);
debugmask(m);

print("expecting malloc/malloc here");
d.info().reverse().like("storage").like("tail").reverse().print();

d.mmap(1);
print("expecting malloc/mmap here");
d.info().reverse().like("storage").like("tail").reverse().print();

# heap extend should activate the mmap settings
i := 0;
var m := debugmask();
debugmask(2);
while(i < b) d.append(i :+= 1);
debugmask(m);
print("expecting mmap/mmap here");
d.info().reverse().like("storage").like("tail").reverse().print();

d.access(BAT_READ);
print("still mmap/mmap here");
d.info().reverse().like("storage").like("tail").reverse().print();

d.access(BAT_WRITE);
print("still mmap/mmap here");
d.info().reverse().like("storage").like("tail").reverse().print();

d.persists(true);
d.rename("dd");
commit();
print("still mmap/priv here");
d.info().reverse().like("storage").like("tail").reverse().print();

unload("dd");
d = load("dd");
print("expecting priv/priv here");
d.info().reverse().like("storage").like("tail").reverse().print();

d.access(BAT_READ);
print("still priv/priv here");
d.info().reverse().like("storage").like("tail").reverse().print();

unload("dd");
d = load("dd");
print("expecting mmap/mmap here");
d.info().reverse().like("storage").like("tail").reverse().print();

d.access(BAT_WRITE);
print("expecting mmap/priv here");
d.info().reverse().like("storage").like("tail").reverse().print();

d.persists(false);
commit();
print("expecting mmap/mmap here");
d.info().reverse().like("storage").like("tail").reverse().print();
