PROC tmp() : void {
        # var sts := view_bbp_status();
        var nme := view_bbp_name().access(BAT_WRITE).col_name("name");
        var rev := [*](nme.reverse().select(int(nil),-1),-1).reverse();
# disable display of status column since the value depends on the
# system's memory situation which is unpredictable
        nme.replace(rev).table(view_bbp_heat(), # sts.col_name("status"),
                view_bbp_kind(), view_bbp_refcnt());
}

#NOTE: the reference counter of bat(name) is during insertion
#      into bat(b) correctly increased
PROC addBAT(bat b,str name) : void {
	VAR add := new(int,int);
	add.rename(name);
	b.insert(name,add);
}

#BUG: bat(name) will not be deleted in the garbage collection
#     because the delete doesn't decrease the reference counter
PROC delBAT(bat b,str name) : void {
	b.delete(name);
}

PROC createBAT(str name) : bat[int,int] {
	VAR res := new(int,int);
	res.rename(name);
	RETURN res;
}

tmp();

{

VAR top := new(str,bat);
top.rename("top");

addBAT(top,"one");
addBAT(top,"two");
tmp();

delBAT(top,"one");
tmp();

VAR i := new(oid,str);
i.insert(oid(10),"ten");
i.insert(oid(20),"twenty");
VAR res := [createBAT](i);
tmp();

top := nil;
res := nil;

}

#BUGS:
#- bat("one") still exists, due to not decreasing the reference counter
#  at the delete from bat("top")
#- bat("ten") and bat("twenty") still exist, due to creation during multiplex
#  operation (?)
tmp();
quit();
