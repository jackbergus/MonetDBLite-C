var b := new(oid, bit);

b.insert(oid(4), true);
b.insert(oid(4), true);
b.insert(oid(4), true);
b.insert(oid(5), true);
b.insert(oid(5), true);
b.insert(oid(5), false);
b.insert(oid(6), true);
b.insert(oid(7), false);
b.insert(oid(8), false);
b.insert(oid(8), false);
b.insert(oid(8), false);
b.insert(oid(9), true);
b.insert(oid(9), bit(nil));
b.insert(oid(10), false);
b.insert(oid(10), bit(nil));
b.insert(oid(11), false);
b.insert(oid(11), bit(nil));
b.insert(oid(11), true);
b.insert(oid(12), bit(nil));
b.print();

proc exist(BAT[bit,bit] b) : bit {
  return b.exist(true);
}

var x := {exist}(b);
x.print();

b.insert(oid(1), true);

x := {exist}(b);
x.print();

var bs := b.sort();
var bss := b.sort_ht();
printf("#~BeginVariableOutput~#\n");
bs.print();
printf("#~EndVariableOutput~#\n");
bss.print();

x := {exist}(bs);
x.print();

var y := {exist}(bss);
y.print();

var bst := b.reverse().sort().reverse();
var bsst := b.reverse().sort_ht().reverse();

x := {exist}(bst);
printf("#~BeginVariableOutput~#\n");
x.print();
printf("#~EndVariableOutput~#\n");
x.sort_ht().print();

y := {exist}(bsst);
y.print();
y.sort_ht().print();


bs.accbuild("hash");
bss.accbuild("hash");

printf("#~BeginVariableOutput~#\n");
bs@hashloop(oid(5)) {
  print($t);
}
printf("#~EndVariableOutput~#\n");
bss@hashloop(oid(5)) {
  print($t);
}

x := {exist}(bs);
x.print();

y := {exist}(bss);
y.print();

printf("#~BeginVariableOutput~#\n");
bs@hashloop(oid(5)) {
  print($t);
}
printf("#~EndVariableOutput~#\n");
bss@hashloop(oid(5)) {
  print($t);
}

bs.reverse().accbuild("hash");
bss.reverse().accbuild("hash");

x := {exist}(bs);
x.print();

y := {exist}(bss);
y.print();

printf("#~BeginVariableOutput~#\n");
bs@hashloop(oid(5)) {
  print($t);
}
printf("#~EndVariableOutput~#\n");
bss@hashloop(oid(5)) {
  print($t);
}

bs.reverse()@hashloop(true) {
  print($t);
}

bss.reverse()@hashloop(true) {
  print($t);
}
quit();
