stdout of test 'malloc_mmap_priv` in directory 'gdk` itself:


# 23:11:08 >  
# 23:11:08 >   Mserver "--config=/ufs/niels/scratch/monetdb/Linux-x86_64/etc/MonetDB.conf" --debug=10 --set "monet_mod_path=/ufs/niels/scratch/monetdb/Linux-x86_64/lib/MonetDB4:/ufs/niels/scratch/monetdb/Linux-x86_64/lib/MonetDB4/lib:/ufs/niels/scratch/monetdb/Linux-x86_64/lib/MonetDB4/bin" --set "gdk_dbfarm=/ufs/niels/scratch/monetdb/Linux-x86_64/var/MonetDB4/dbfarm" --set "sql_logdir=/ufs/niels/scratch/monetdb/Linux-x86_64/var/MonetDB4/sql_logs" --set "xquery_logdir=/ufs/niels/scratch/monetdb/Linux-x86_64/var/MonetDB4/xquery_logs" --set mapi_open=true --set xrpc_open=true --set mapi_port=32851 --set xrpc_port=41440 --set monet_prompt= --trace  --dbname=mTests_src_gdk  
# 23:11:08 >  

# MonetDB Server v4.23.0
# based on GDK   v1.23.0
# Copyright (c) 1993-2008, CWI. All rights reserved.
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs; dynamically linked.
# Visit http://monetdb.cwi.nl/ for further information.
# test memory map of string heap under append
var i := 0;
var b := 20000;
var d := new(void,int,b).seqbase(0@0);

# temporarily disable propmask in order to make this bearable
var m := debugmask();
debugmask(2);
while(i < b) d.append(i :+= 1);
debugmask(m);

print("expecting malloc/malloc here");
[ "expecting malloc/malloc here" ]
d.info().reverse().like("storage").like("tail").reverse().print();
#-----------------------------------------#
# t			h		  # name
# str			str		  # type
#-----------------------------------------#
[ "tail.storage",	  "malloced"	  ]
[ "tail.newstorage",	  "malloced"	  ]

d.mmap(1);
print("expecting malloc/mmap here");
[ "expecting malloc/mmap here" ]
d.info().reverse().like("storage").like("tail").reverse().print();
#-------------------------------------------------#
# t			h			  # name
# str			str			  # type
#-------------------------------------------------#
[ "tail.storage",	  "malloced"		  ]
[ "tail.newstorage",	  "memory mapped"	  ]

# heap extend should activate the mmap settings
i := 0;
var m := debugmask();
debugmask(2);
while(i < b) d.append(i :+= 1);
debugmask(m);
print("expecting mmap/mmap here");
[ "expecting mmap/mmap here" ]
d.info().reverse().like("storage").like("tail").reverse().print();
#-------------------------------------------------#
# t			h			  # name
# str			str			  # type
#-------------------------------------------------#
[ "tail.storage",	  "memory mapped"	  ]
[ "tail.newstorage",	  "memory mapped"	  ]

d.access(BAT_READ);
print("still mmap/mmap here");
[ "still mmap/mmap here" ]
d.info().reverse().like("storage").like("tail").reverse().print();
#-------------------------------------------------#
# t			h			  # name
# str			str			  # type
#-------------------------------------------------#
[ "tail.storage",	  "memory mapped"	  ]
[ "tail.newstorage",	  "memory mapped"	  ]

d.access(BAT_WRITE);
print("still mmap/mmap here");
[ "still mmap/mmap here" ]
d.info().reverse().like("storage").like("tail").reverse().print();
#-------------------------------------------------#
# t			h			  # name
# str			str			  # type
#-------------------------------------------------#
[ "tail.storage",	  "memory mapped"	  ]
[ "tail.newstorage",	  "memory mapped"	  ]

d.persists(true);
d.rename("dd");
commit();
print("still mmap/priv here");
[ "still mmap/priv here" ]
d.info().reverse().like("storage").like("tail").reverse().print();
#-------------------------------------------------#
# t			h			  # name
# str			str			  # type
#-------------------------------------------------#
[ "tail.storage",	  "memory mapped"	  ]
[ "tail.newstorage",	  "private map"		  ]

unload("dd");
d = load("dd");
print("expecting priv/priv here");
[ "expecting priv/priv here" ]
d.info().reverse().like("storage").like("tail").reverse().print();
#-----------------------------------------#
# t			h		  # name
# str			str		  # type
#-----------------------------------------#
[ "tail.storage",	  "private map"	  ]
[ "tail.newstorage",	  "private map"	  ]

d.access(BAT_READ);
print("still priv/priv here");
[ "still priv/priv here" ]
d.info().reverse().like("storage").like("tail").reverse().print();
#-----------------------------------------#
# t			h		  # name
# str			str		  # type
#-----------------------------------------#
[ "tail.storage",	  "private map"	  ]
[ "tail.newstorage",	  "private map"	  ]

unload("dd");
d = load("dd");
print("expecting mmap/mmap here");
[ "expecting mmap/mmap here" ]
d.info().reverse().like("storage").like("tail").reverse().print();
#-------------------------------------------------#
# t			h			  # name
# str			str			  # type
#-------------------------------------------------#
[ "tail.storage",	  "memory mapped"	  ]
[ "tail.newstorage",	  "memory mapped"	  ]

d.access(BAT_WRITE);
print("expecting mmap/priv here");
[ "expecting mmap/priv here" ]
d.info().reverse().like("storage").like("tail").reverse().print();
#-------------------------------------------------#
# t			h			  # name
# str			str			  # type
#-------------------------------------------------#
[ "tail.storage",	  "memory mapped"	  ]
[ "tail.newstorage",	  "private map"		  ]

d.persists(false);
commit();
print("expecting mmap/mmap here");
[ "expecting mmap/mmap here" ]
d.info().reverse().like("storage").like("tail").reverse().print();
#-------------------------------------------------#
# t			h			  # name
# str			str			  # type
#-------------------------------------------------#
[ "tail.storage",	  "memory mapped"	  ]
[ "tail.newstorage",	  "memory mapped"	  ]
quit();

# 23:11:08 >  
# 23:11:08 >  Done.
# 23:11:08 >  

