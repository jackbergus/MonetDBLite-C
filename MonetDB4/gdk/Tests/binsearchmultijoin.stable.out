stdout of test 'binsearchmultijoin` in directory 'gdk` itself:


# 04:47:25 >  
# 04:47:25 >  Mtimeout -timeout 60 Mserver --config=/home/arjen/local/etc/monet.conf --debug=10   --set monet_prompt= --dbname=Tests_src_gdk  < binsearchmultijoin.milM
# 04:47:25 >  

# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# The test triggers the binsearch implementation of BATmultijoin,
# which is chosen in two situations:
#   1. smallest bat is not sorted, but the larger is, and the count of the 
#      larger is not "too" small.
#   2. all bats are sorted on head, but the larger is *much* larger.

VAR l, r;

PROC Nseq(int N):BAT[void,int] {
  VAR i := 0; VAR seq := new(void,int).seqbase(oid(0));
  WHILE (i<N) { seq.append(i); i:+=1; }
  RETURN seq;
}

# first create example with l.count < 4*r.count
# r should not be sorted, or a different impl will be chosen.
l := union(Nseq(3).reverse().project(oid(0)),
           Nseq(3).reverse().project(oid(1))).reverse();
l := union(l, Nseq(3).reverse().project(oid(2)).reverse());
r := new(oid,int).insert(oid(1),1).insert(oid(0),2);
print(l,r);
#-------------------------#
# BAT:	  tmp_25| tmp_27  #
# (oid)	  (int)	| (int)	  #
#-------------------------#
[ 1@0,	  0,	  1	  ]
[ 1@0,	  1,	  1	  ]
[ 1@0,	  2,	  1	  ]
[ 0@0,	  0,	  2	  ]
[ 0@0,	  1,	  2	  ]
[ 0@0,	  2,	  2	  ]
[+](l,r).count().print();
[ 6 ]

# the other case when binsearch is chosen, is if r is sorted,
# but l.count() > 40*r.count():
[+](Nseq(81).reverse().project(oid(0)).reverse(),r.sort()).count().print();
[ 81 ]

quit();

# 17:04:55 >  
# 17:04:55 >  Done.
# 17:04:55 >  

