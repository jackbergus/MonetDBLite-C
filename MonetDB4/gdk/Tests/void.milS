

print("First keep void tests");
var a := bat(void,int,10).rename("A");
a.insert(nil,1);
a.insert(nil,4);
a.insert(nil,7);
a.insert(nil,2);
a.insert(nil,8);
a.insert(nil,1);
a.insert(nil,4);
a.insert(nil,5);
a.insert(nil,8);
a.insert(nil,3);
a.seqbase(oid(10));
a.print();

var b := a.copy().rename("B");

print("insert tests");
#insert in order
a.insert(oid(20),8);
a.print();

print("replace tests");
# replace uncommited no need to change to oid
a.replace(oid(15),9);
a.print();

# replace last no need to change to oid
a.replace(oid(20),9);
a.print();

# replace last + 1, noting needed
a.replace(oid(20),9);
a.print();

print("delete tests");
# delete uncommited from the top
a.delete(oid(20));
a.delete(oid(19));
a.delete(oid(18));
a.delete(oid(17));
a.delete(oid(16));
a.delete(oid(15));
a.delete(oid(14));
a.delete(oid(13));
a.delete(oid(12));
a.delete(oid(11));
# only 1 left and still void
a.print();

# now the convert to oid test
print("convert void to oid tests");
a := b.copy().access(BAT_WRITE).rename("C");

print("insert tests");
#insert in out of order
a.insert(oid(21),8);
a.print();

# use oid bat (test if its a properly made bat)
a.delete(oid(21));
a.reverse().join(b).print();

print("replace tests");
#replace commited bun
a := b.copy().access(BAT_WRITE).rename("D");
a.commit();

# replace commited 
a.replace(oid(15),-3);
# replace last (or used to be last)
a.replace(oid(19),-1);
# replace something not there
a.replace(oid(20),-2);
a.print();

# delete commited 
print("delete tests");
a := b.copy().access(BAT_WRITE).rename("E");
a.commit();
a.print();

a.delete(oid(20));a.print();
a.delete(oid(19));a.print();
a.delete(oid(18));a.print();
a.delete(oid(17));a.print();
a.delete(oid(16));a.print();
a.delete(oid(15));a.print();
a.delete(oid(14));a.print();
a.delete(oid(13));a.print();
a.delete(oid(12));a.print();
a.delete(oid(11));a.print();
# only 1 left and still void
a.print();

# deleting a transient value from a just void table didn't fix
# the denseness

var t1 := bat(void,int);
t1.seqbase(0@0);
t1.append(1);
t1.append(2);
t1.append(3);
var v1 := t1.mil_select("<in>", 2,int(nil));
var v2 := v1.mark(0@0).reverse();
v2.join(t1).print();

var v3 := t1.select(2, int(nil));
v3.info().find("hseqbase").print();
v3.info().find("hdense").print();
v3.access(BAT_WRITE);
v3.reverse().delete(2);
v3.info().find("hseqbase").print();
v3.info().find("hdense").print();

var x := new(void,void);
x.seqbase(0@0);
x.append(12@0);
x.append(nil);
x.print();

var e := new(void,int);
e.seqbase(10@0);
var n := new(void,int);
n.seqbase(20@0);
n.append(20);
e.insert(n);
e.print();

var y := new(void,int);
y.insert(nil,0);
y.seqbase(20@0);
var z := new(void,int);
z.seqbase(10@0);
z.key(true);
z.insert(y);
z.print();

quit();
