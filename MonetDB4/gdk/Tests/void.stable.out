stdout of test 'void` in directory 'src/gdk` itself:


# 16:29:54 >  
# 16:29:54 >  Mtimeout -timeout 60 Mserver "--config=/ufs/niels/data/monet/Linux/etc/monet.conf" --debug=10 --set "monet_mod_path=/ufs/niels/data/monet/Linux/lib/MonetDB" --dbfarm "/ufs/niels/data/monet/Linux/var/dbfarm" --set monet_prompt= --trace --dbname=Tests_src_gdk  < void.milM
# 16:29:54 >  

# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.


print("First keep void tests");
[ "First keep void tests" ]
var a := bat(void,int,10).rename("A");
a.insert(nil,1);
a.insert(nil,4);
a.insert(nil,7);
a.insert(nil,2);
a.insert(nil,8);
a.insert(nil,1);
a.insert(nil,4);
a.insert(nil,5);
a.insert(nil,8);
a.insert(nil,3);
a.seqbase(oid(10));
a.print();
#-----------------#
# BAT:	  A	  #
# (void)  (int)	  #
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  1	  ]
[ 16@0,	  4	  ]
[ 17@0,	  5	  ]
[ 18@0,	  8	  ]
[ 19@0,	  3	  ]

var b := a.copy().rename("B");

print("insert tests");
[ "insert tests" ]
#insert in order
a.insert(oid(20),8);
a.print();
#-----------------#
# BAT:	  A	  #
# (void)  (int)	  #
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  1	  ]
[ 16@0,	  4	  ]
[ 17@0,	  5	  ]
[ 18@0,	  8	  ]
[ 19@0,	  3	  ]
[ 20@0,	  8	  ]

print("replace tests");
[ "replace tests" ]
# replace uncommited no need to change to oid
a.replace(oid(15),9);
a.print();
#-----------------#
# BAT:	  A	  #
# (void)  (int)	  #
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  9	  ]
[ 16@0,	  4	  ]
[ 17@0,	  5	  ]
[ 18@0,	  8	  ]
[ 19@0,	  3	  ]
[ 20@0,	  8	  ]

# replace last no need to change to oid
a.replace(oid(20),9);
a.print();
#-----------------#
# BAT:	  A	  #
# (void)  (int)	  #
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  9	  ]
[ 16@0,	  4	  ]
[ 17@0,	  5	  ]
[ 18@0,	  8	  ]
[ 19@0,	  3	  ]
[ 20@0,	  9	  ]

# replace last + 1, noting needed
a.replace(oid(20),9);
a.print();
#-----------------#
# BAT:	  A	  #
# (void)  (int)	  #
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  9	  ]
[ 16@0,	  4	  ]
[ 17@0,	  5	  ]
[ 18@0,	  8	  ]
[ 19@0,	  3	  ]
[ 20@0,	  9	  ]

print("delete tests");
[ "delete tests" ]
# delete uncommited from the top
a.delete(oid(20));
a.delete(oid(19));
a.delete(oid(18));
a.delete(oid(17));
a.delete(oid(16));
a.delete(oid(15));
a.delete(oid(14));
a.delete(oid(13));
a.delete(oid(12));
a.delete(oid(11));
# only 1 left and still void
a.print();
#-----------------#
# BAT:	  A	  #
# (void)  (int)	  #
#-----------------#
[ 10@0,	  1	  ]

# now the convert to oid test
print("convert void to oid tests");
[ "convert void to oid tests" ]
a := b.copy().access(BAT_WRITE).rename("C");

print("insert tests");
[ "insert tests" ]
#insert in out of order
a.insert(oid(21),8);
a.print();
#-----------------#
# BAT:	  C	  #
# (oid)	  (int)	  #
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  1	  ]
[ 16@0,	  4	  ]
[ 17@0,	  5	  ]
[ 18@0,	  8	  ]
[ 19@0,	  3	  ]
[ 21@0,	  8	  ]

# use oid bat (test if its a properly made bat)
a.delete(oid(21));
a.reverse().join(b).print();
#-----------------#
# BAT:	  tmp_28  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
[ 4,	  4	  ]
[ 7,	  7	  ]
[ 2,	  2	  ]
[ 8,	  8	  ]
[ 1,	  1	  ]
[ 4,	  4	  ]
[ 5,	  5	  ]
[ 8,	  8	  ]
[ 3,	  3	  ]

print("replace tests");
[ "replace tests" ]
#replace commited bun
a := b.copy().access(BAT_WRITE).rename("D");
a.commit();

# replace commited 
a.replace(oid(15),-3);
# replace last (or used to be last)
a.replace(oid(19),-1);
# replace something not there
a.replace(oid(20),-2);
a.print();
#-----------------#
# BAT:	  D	  #
# (oid)	  (int)	  #
#-----------------#
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 10@0,	  1	  ]
[ 16@0,	  4	  ]
[ 17@0,	  5	  ]
[ 18@0,	  8	  ]
[ 11@0,	  4	  ]
[ 15@0,	  -3	  ]
[ 19@0,	  -1	  ]

# delete commited 
print("delete tests");
[ "delete tests" ]
a := b.copy().access(BAT_WRITE).rename("E");
a.commit();
a.print();
#-----------------#
# BAT:	  E	  #
# (void)  (int)	  #
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  1	  ]
[ 16@0,	  4	  ]
[ 17@0,	  5	  ]
[ 18@0,	  8	  ]
[ 19@0,	  3	  ]

a.delete(oid(20));a.print();
#-----------------#
# BAT:	  E	  #
# (void)  (int)	  #
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  1	  ]
[ 16@0,	  4	  ]
[ 17@0,	  5	  ]
[ 18@0,	  8	  ]
[ 19@0,	  3	  ]
a.delete(oid(19));a.print();
#-----------------#
# BAT:	  E	  #
# (oid)	  (int)	  #
#-----------------#
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  1	  ]
[ 16@0,	  4	  ]
[ 17@0,	  5	  ]
[ 18@0,	  8	  ]
[ 10@0,	  1	  ]
a.delete(oid(18));a.print();
#-----------------#
# BAT:	  E	  #
# (oid)	  (int)	  #
#-----------------#
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  1	  ]
[ 16@0,	  4	  ]
[ 17@0,	  5	  ]
[ 11@0,	  4	  ]
[ 10@0,	  1	  ]
a.delete(oid(17));a.print();
#-----------------#
# BAT:	  E	  #
# (oid)	  (int)	  #
#-----------------#
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  1	  ]
[ 16@0,	  4	  ]
[ 12@0,	  7	  ]
[ 11@0,	  4	  ]
[ 10@0,	  1	  ]
a.delete(oid(16));a.print();
#-----------------#
# BAT:	  E	  #
# (oid)	  (int)	  #
#-----------------#
[ 14@0,	  8	  ]
[ 15@0,	  1	  ]
[ 13@0,	  2	  ]
[ 12@0,	  7	  ]
[ 11@0,	  4	  ]
[ 10@0,	  1	  ]
a.delete(oid(15));a.print();
#-----------------#
# BAT:	  E	  #
# (oid)	  (int)	  #
#-----------------#
[ 14@0,	  8	  ]
[ 13@0,	  2	  ]
[ 12@0,	  7	  ]
[ 11@0,	  4	  ]
[ 10@0,	  1	  ]
a.delete(oid(14));a.print();
#-----------------#
# BAT:	  E	  #
# (oid)	  (int)	  #
#-----------------#
[ 13@0,	  2	  ]
[ 12@0,	  7	  ]
[ 11@0,	  4	  ]
[ 10@0,	  1	  ]
a.delete(oid(13));a.print();
#-----------------#
# BAT:	  E	  #
# (oid)	  (int)	  #
#-----------------#
[ 12@0,	  7	  ]
[ 11@0,	  4	  ]
[ 10@0,	  1	  ]
a.delete(oid(12));a.print();
#-----------------#
# BAT:	  E	  #
# (oid)	  (int)	  #
#-----------------#
[ 11@0,	  4	  ]
[ 10@0,	  1	  ]
a.delete(oid(11));a.print();
#-----------------#
# BAT:	  E	  #
# (oid)	  (int)	  #
#-----------------#
[ 10@0,	  1	  ]
# only 1 left and still void
a.print();
#-----------------#
# BAT:	  E	  #
# (oid)	  (int)	  #
#-----------------#
[ 10@0,	  1	  ]

# deleting a transient value from a just void table didn't fix
# the denseness

var t1 := bat(void,int);
t1.seqbase(0@0);
t1.append(1);
t1.append(2);
t1.append(3);
var v1 := t1.mil_select("<in>", 2,int(nil));
var v2 := v1.mark(0@0).reverse();
v2.join(t1).print();
#-----------------#
# BAT:	  tmp_32  #
# (void)  (int)	  #
#-----------------#
[ 0@0,	  3	  ]

var v3 := t1.select(2, int(nil));
v3.info().find("hseqbase").print();
[ "1@0" ]
v3.info().find("hdense").print();
[ "1" ]
v3.access(BAT_WRITE);
v3.reverse().delete(2);
v3.info().find("hseqbase").print();
[ "2@0" ]
v3.info().find("hdense").print();
[ "1" ]

var x := new(void,void);
x.seqbase(0@0);
x.append(12@0);
!ERROR: interpret: no matching MIL operator to 'append(BAT[oid,void], oid)'.
!MAYBE YOU MEAN:
!	append(BAT[void,any::1], any::1, bit) : BAT[void,any::1]
!	append(BAT[void,any::1], any::1) : BAT[void,any::1]
!	append(BAT[oid,any::1], any::1, bit) : BAT[oid,any::1]
!	append(BAT[oid,any::1], any::1) : BAT[oid,any::1]
!	append(BAT[void,any::1], BAT[oid,any::1], bit) : BAT[void,any::1]
!	append(BAT[void,any::1], BAT[oid,any::1]) : BAT[void,any::1]
!	append(BAT[void,any::1], BAT[void,any::1], bit) : BAT[void,any::1]
!	append(BAT[void,any::1], BAT[void,any::1]) : BAT[void,any::1]
!	append(BAT[oid,any::1], BAT[oid,any::1], bit) : BAT[oid,any::1]
!	append(BAT[oid,any::1], BAT[oid,any::1]) : BAT[oid,any::1]
x.append(nil);
x.print();
#-----------------#
# h	t	  # name
# void	void	  # type
#-----------------#
[ 0@0,	  nil	  ]

var e := new(void,int);
e.seqbase(10@0);
var n := new(void,int);
n.seqbase(20@0);
n.append(20);
e.insert(n);
e.print();
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 20@0,	  20	  ]

var y := new(void,int);
y.insert(nil,0);
y.seqbase(20@0);
var z := new(void,int);
z.seqbase(10@0);
z.key(true);
z.insert(y);
z.print();
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 20@0,	  0	  ]

quit();

# 16:29:54 >  
# 16:29:54 >  Done.
# 16:29:54 >  

