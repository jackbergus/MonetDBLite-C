setoid(oid(10000000));

printf("Start of MIL prelude.\n");

clientid().print();
qstat();

bbp().reverse().like("bat").reverse().print();
loaded();
procs();
# vars() without the value (view_var_value())
table(view_var_name().kdiff([startsWith](view_var_name(), ".").uselect(true)), 
              view_var_type(), view_var_kind(), view_var_constant());
view_bbp_kind().print();
view_bbp_location().print();
view_bbp_name().print();
view_bbp_refcnt().print();
view_client_tree().print();
view_gdk_bbp().print();
view_var_name().reverse().join(view_var_constant()).print();
view_var_name().reverse().join(view_var_kind()).print();
view_var_name().reverse().join(view_var_type()).print();

dir();
ls();
view_bbp_heat().print();

printf("#~BeginVariableOutput~#\n");

debugmask().print();
queue();
threadid().print();

clients();
cpu().print();
env();
environment().print();
io().print();
memory().print();
threads();
view_client_login().print();
view_client_name().print();
view_gdk_cpu().print();
view_gdk_env().print();
view_gdk_io().print();
view_gdk_memory().print();
view_gdk_thread().print();

printf("#~EndVariableOutput~#\n");

printf("End of MIL prelude.\n");

