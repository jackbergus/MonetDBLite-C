stdout of test 'bat2` in directory 'modules/plain` itself:

#> Mtest (13:31:42):	other bat2 1200
#> Mtest (13:31:42):	Mtimeout -timeout 1200 ./bat2 bat2
#> Mlog (13:31:42):	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db src_modules_plain bat2.mil
# Monet Database Server V4.2
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
#script:bat2.mil

# 13:35:55 >  
# 13:35:55 >  Mtimeout -timeout 60 Mserver "--config=/ufs/niels/data/Linux-i686/etc/MonetDB.conf" --debug=10 --set "monet_mod_path=/ufs/niels/data/Linux-i686/lib/MonetDB" --set "gdk_dbfarm=/ufs/niels/data/Linux-i686/var/MonetDB/dbfarm" --set "sql_logdir=/ufs/niels/data/Linux-i686/var/MonetDB/log" --set mapi_port=41065 --set sql_port=55025 --set monet_prompt= --trace --dbname=mTests_src_modules_plain  < bat2.milM
# 13:35:55 >  

# Monet Database Server V4.3.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# Visit http://monetdb.cwi.nl/ for further information.
var testje := new(int,str);

testje.insert(1,"one");
testje.insert(2,"two");
testje.insert(3,"three");
testje.insert(1,"een");
testje.insert(2,"twee");
testje.insert(3,"drie");

printf("* Example BAT\n");
* Example BAT
testje.print();
#-------------------------#
# BAT:	  tmp_24	  #
# (int)	  (str)		  #
#-------------------------#
[ 1,	  "one"		  ]
[ 2,	  "two"		  ]
[ 3,	  "three"	  ]
[ 1,	  "een"		  ]
[ 2,	  "twee"	  ]
[ 3,	  "drie"	  ]

var deltest := new(int,str);
deltest.insert(1,"one");

printf("\n* deleteBuns: Delete the exact BUN\n");

* deleteBuns: Delete the exact BUN
deltest.print();
#-----------------#
# BAT:	  tmp_23  #
# (int)	  (str)	  #
#-----------------#
[ 1,	  "one"	  ]
testje.deleteBuns(deltest);
testje.print();
#-------------------------#
# BAT:	  tmp_24	  #
# (int)	  (str)		  #
#-------------------------#
[ 3,	  "drie"	  ]
[ 2,	  "two"		  ]
[ 3,	  "three"	  ]
[ 1,	  "een"		  ]
[ 2,	  "twee"	  ]

deltest := new(int,int);
deltest.insert(2,2);
deltest.insert(3,3);

printf("\n* delete: Delete the BUNs with corresponding head values\n");

* delete: Delete the BUNs with corresponding head values
deltest.print();
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  2	  ]
[ 3,	  3	  ]
testje.delete(deltest);
testje.print();
#-----------------#
# BAT:	  tmp_24  #
# (int)	  (str)	  #
#-----------------#
[ 1,	  "een"	  ]

#
# test for VM bat remapping 
#
proc mk(bat[void,any] b, str tpe, bit map) : bat[void,any] {
        var nme := map.ifthenelse("mmap","file") + "_" + tpe; 
	CATCH({ bat(nme).persists(false); commit(); }); 
	[*tpe](b).rename(nme).access(BAT_READ).mmap(map.ifthenelse(STORE_MMAP,STORE_MEM)).persists(true).save();
        unload(nme);
        return bat(nme);
}

proc [equal](bat[void,any::1] l, bat[void,any::1] r) : bat[void,bit] {
  var n1 := [isnil](l);
  var n2 := [isnil](r);
  var res := [and](n1,n2).access(BAT_WRITE);
  var chk := [xor](n1,n2).uselect(false).mirror();
  return res.replace([=](chk.join(l),chk.join(r)).select(true)).access(BAT_READ);
}

var map := bat(void,oid).append(1@0).append(0@0).append(2@0).seqbase(0@0);
var sample := bat(void,oid, 200);
var b := bat(void,int,150000);
var o := bat(oid,int,150000);
var l := bat(lng,int,150000);
var i := 0;

var bak := debugmask();
debugmask(0); # do this quick: 150K times BATpropcheck is not nice
while(i < 150000) { 
  b.append(i); i :+= 1; 
  o.insert(oid(i),i+100); 
  l.insert(lng(i),i+100); 
  if ((i and 4095) = 0) 
    sample.append(oid(i));
}
debugmask(bak); # set debug to whatever we want it to be

sample := sample.seqbase(0@0).reverse().mirror();
b.seqbase(0@0);
o.access(BAT_READ);
l.access(BAT_READ);

########################################### 
# test for remap
#
# test both malloced (file) and mmap mem
########################################### 

var file_int := b.mk("int",false);
var file_oid := b.mk("oid",false);
var file_lng := b.mk("lng",false);
var file_str := b.mk("str",false);
var mmap_int := b.mk("int",true);
var mmap_oid := b.mk("oid",true);
var mmap_lng := b.mk("lng",true);
var mmap_str := b.mk("str",true);

var b0 := file_int.remap(map,true);
b0.count().print();
[ 196608 ]
b0.slice(149995,150005).print();
#-------------------------#
# h		t	  # name
# void		int	  # type
#-------------------------#
[ 149995@0,	  149995  ]
[ 149996@0,	  149996  ]
[ 149997@0,	  149997  ]
[ 149998@0,	  149998  ]
[ 149999@0,	  149999  ]
[ 150000@0,	  nil	  ]
[ 150001@0,	  nil	  ]
[ 150002@0,	  nil	  ]
[ 150003@0,	  nil	  ]
[ 150004@0,	  nil	  ]
[ 150005@0,	  nil	  ]


var b1 := file_oid.remap(map,true); 
    [equal](b0,[int](b1)).uselect(false).count().print(); 
[ 0 ]
    sample.print(b0,b1);
#---------------------------------------------------------#
# h		t		t	t		  # name
# oid		oid		int	oid		  # type
#---------------------------------------------------------#
[ 4096@0,	  4096@0,	  69632,  69632@0	  ]
[ 8192@0,	  8192@0,	  73728,  73728@0	  ]
[ 12288@0,	  12288@0,	  77824,  77824@0	  ]
[ 16384@0,	  16384@0,	  81920,  81920@0	  ]
[ 20480@0,	  20480@0,	  86016,  86016@0	  ]
[ 24576@0,	  24576@0,	  90112,  90112@0	  ]
[ 28672@0,	  28672@0,	  94208,  94208@0	  ]
[ 32768@0,	  32768@0,	  98304,  98304@0	  ]
[ 36864@0,	  36864@0,	  102400, 102400@0	  ]
[ 40960@0,	  40960@0,	  106496, 106496@0	  ]
[ 45056@0,	  45056@0,	  110592, 110592@0	  ]
[ 49152@0,	  49152@0,	  114688, 114688@0	  ]
[ 53248@0,	  53248@0,	  118784, 118784@0	  ]
[ 57344@0,	  57344@0,	  122880, 122880@0	  ]
[ 61440@0,	  61440@0,	  126976, 126976@0	  ]
[ 65536@0,	  65536@0,	  0,	  0@0		  ]
[ 69632@0,	  69632@0,	  4096,	  4096@0	  ]
[ 73728@0,	  73728@0,	  8192,	  8192@0	  ]
[ 77824@0,	  77824@0,	  12288,  12288@0	  ]
[ 81920@0,	  81920@0,	  16384,  16384@0	  ]
[ 86016@0,	  86016@0,	  20480,  20480@0	  ]
[ 90112@0,	  90112@0,	  24576,  24576@0	  ]
[ 94208@0,	  94208@0,	  28672,  28672@0	  ]
[ 98304@0,	  98304@0,	  32768,  32768@0	  ]
[ 102400@0,	  102400@0,	  36864,  36864@0	  ]
[ 106496@0,	  106496@0,	  40960,  40960@0	  ]
[ 110592@0,	  110592@0,	  45056,  45056@0	  ]
[ 114688@0,	  114688@0,	  49152,  49152@0	  ]
[ 118784@0,	  118784@0,	  53248,  53248@0	  ]
[ 122880@0,	  122880@0,	  57344,  57344@0	  ]
[ 126976@0,	  126976@0,	  61440,  61440@0	  ]
[ 131072@0,	  131072@0,	  131072, 131072@0	  ]
[ 135168@0,	  135168@0,	  135168, 135168@0	  ]
[ 139264@0,	  139264@0,	  139264, 139264@0	  ]
[ 143360@0,	  143360@0,	  143360, 143360@0	  ]
[ 147456@0,	  147456@0,	  147456, 147456@0	  ]

var b2 := file_lng.remap(map,true); 
    [equal](b0,[int](b2)).uselect(false).count().print(); 
[ 0 ]
    sample.print(b0,b2);
#-------------------------------------------------#
# h		t		t	t	  # name
# oid		oid		int	lng	  # type
#-------------------------------------------------#
[ 4096@0,	  4096@0,	  69632,  69632	  ]
[ 8192@0,	  8192@0,	  73728,  73728	  ]
[ 12288@0,	  12288@0,	  77824,  77824	  ]
[ 16384@0,	  16384@0,	  81920,  81920	  ]
[ 20480@0,	  20480@0,	  86016,  86016	  ]
[ 24576@0,	  24576@0,	  90112,  90112	  ]
[ 28672@0,	  28672@0,	  94208,  94208	  ]
[ 32768@0,	  32768@0,	  98304,  98304	  ]
[ 36864@0,	  36864@0,	  102400, 102400  ]
[ 40960@0,	  40960@0,	  106496, 106496  ]
[ 45056@0,	  45056@0,	  110592, 110592  ]
[ 49152@0,	  49152@0,	  114688, 114688  ]
[ 53248@0,	  53248@0,	  118784, 118784  ]
[ 57344@0,	  57344@0,	  122880, 122880  ]
[ 61440@0,	  61440@0,	  126976, 126976  ]
[ 65536@0,	  65536@0,	  0,	  0	  ]
[ 69632@0,	  69632@0,	  4096,	  4096	  ]
[ 73728@0,	  73728@0,	  8192,	  8192	  ]
[ 77824@0,	  77824@0,	  12288,  12288	  ]
[ 81920@0,	  81920@0,	  16384,  16384	  ]
[ 86016@0,	  86016@0,	  20480,  20480	  ]
[ 90112@0,	  90112@0,	  24576,  24576	  ]
[ 94208@0,	  94208@0,	  28672,  28672	  ]
[ 98304@0,	  98304@0,	  32768,  32768	  ]
[ 102400@0,	  102400@0,	  36864,  36864	  ]
[ 106496@0,	  106496@0,	  40960,  40960	  ]
[ 110592@0,	  110592@0,	  45056,  45056	  ]
[ 114688@0,	  114688@0,	  49152,  49152	  ]
[ 118784@0,	  118784@0,	  53248,  53248	  ]
[ 122880@0,	  122880@0,	  57344,  57344	  ]
[ 126976@0,	  126976@0,	  61440,  61440	  ]
[ 131072@0,	  131072@0,	  131072, 131072  ]
[ 135168@0,	  135168@0,	  135168, 135168  ]
[ 139264@0,	  139264@0,	  139264, 139264  ]
[ 143360@0,	  143360@0,	  143360, 143360  ]
[ 147456@0,	  147456@0,	  147456, 147456  ]

var b3 := file_str.remap(map,true); 
    [equal](b0,[int](b3)).uselect(false).count().print(); 
[ 0 ]
    sample.print(b0,b3);
#---------------------------------------------------------#
# h		t		t	t		  # name
# oid		oid		int	str		  # type
#---------------------------------------------------------#
[ 4096@0,	  4096@0,	  69632,  "69632"	  ]
[ 8192@0,	  8192@0,	  73728,  "73728"	  ]
[ 12288@0,	  12288@0,	  77824,  "77824"	  ]
[ 16384@0,	  16384@0,	  81920,  "81920"	  ]
[ 20480@0,	  20480@0,	  86016,  "86016"	  ]
[ 24576@0,	  24576@0,	  90112,  "90112"	  ]
[ 28672@0,	  28672@0,	  94208,  "94208"	  ]
[ 32768@0,	  32768@0,	  98304,  "98304"	  ]
[ 36864@0,	  36864@0,	  102400, "102400"	  ]
[ 40960@0,	  40960@0,	  106496, "106496"	  ]
[ 45056@0,	  45056@0,	  110592, "110592"	  ]
[ 49152@0,	  49152@0,	  114688, "114688"	  ]
[ 53248@0,	  53248@0,	  118784, "118784"	  ]
[ 57344@0,	  57344@0,	  122880, "122880"	  ]
[ 61440@0,	  61440@0,	  126976, "126976"	  ]
[ 65536@0,	  65536@0,	  0,	  "0"		  ]
[ 69632@0,	  69632@0,	  4096,	  "4096"	  ]
[ 73728@0,	  73728@0,	  8192,	  "8192"	  ]
[ 77824@0,	  77824@0,	  12288,  "12288"	  ]
[ 81920@0,	  81920@0,	  16384,  "16384"	  ]
[ 86016@0,	  86016@0,	  20480,  "20480"	  ]
[ 90112@0,	  90112@0,	  24576,  "24576"	  ]
[ 94208@0,	  94208@0,	  28672,  "28672"	  ]
[ 98304@0,	  98304@0,	  32768,  "32768"	  ]
[ 102400@0,	  102400@0,	  36864,  "36864"	  ]
[ 106496@0,	  106496@0,	  40960,  "40960"	  ]
[ 110592@0,	  110592@0,	  45056,  "45056"	  ]
[ 114688@0,	  114688@0,	  49152,  "49152"	  ]
[ 118784@0,	  118784@0,	  53248,  "53248"	  ]
[ 122880@0,	  122880@0,	  57344,  "57344"	  ]
[ 126976@0,	  126976@0,	  61440,  "61440"	  ]
[ 131072@0,	  131072@0,	  131072, "131072"	  ]
[ 135168@0,	  135168@0,	  135168, "135168"	  ]
[ 139264@0,	  139264@0,	  139264, "139264"	  ]
[ 143360@0,	  143360@0,	  143360, "143360"	  ]
[ 147456@0,	  147456@0,	  147456, "147456"	  ]

var b4 := mmap_int.remap(map,true); 
    [equal](b0,[int](b4)).uselect(false).count().print(); 
[ 0 ]
    sample.print(b0,b4);
#-------------------------------------------------#
# h		t		t	t	  # name
# oid		oid		int	int	  # type
#-------------------------------------------------#
[ 4096@0,	  4096@0,	  69632,  69632	  ]
[ 8192@0,	  8192@0,	  73728,  73728	  ]
[ 12288@0,	  12288@0,	  77824,  77824	  ]
[ 16384@0,	  16384@0,	  81920,  81920	  ]
[ 20480@0,	  20480@0,	  86016,  86016	  ]
[ 24576@0,	  24576@0,	  90112,  90112	  ]
[ 28672@0,	  28672@0,	  94208,  94208	  ]
[ 32768@0,	  32768@0,	  98304,  98304	  ]
[ 36864@0,	  36864@0,	  102400, 102400  ]
[ 40960@0,	  40960@0,	  106496, 106496  ]
[ 45056@0,	  45056@0,	  110592, 110592  ]
[ 49152@0,	  49152@0,	  114688, 114688  ]
[ 53248@0,	  53248@0,	  118784, 118784  ]
[ 57344@0,	  57344@0,	  122880, 122880  ]
[ 61440@0,	  61440@0,	  126976, 126976  ]
[ 65536@0,	  65536@0,	  0,	  0	  ]
[ 69632@0,	  69632@0,	  4096,	  4096	  ]
[ 73728@0,	  73728@0,	  8192,	  8192	  ]
[ 77824@0,	  77824@0,	  12288,  12288	  ]
[ 81920@0,	  81920@0,	  16384,  16384	  ]
[ 86016@0,	  86016@0,	  20480,  20480	  ]
[ 90112@0,	  90112@0,	  24576,  24576	  ]
[ 94208@0,	  94208@0,	  28672,  28672	  ]
[ 98304@0,	  98304@0,	  32768,  32768	  ]
[ 102400@0,	  102400@0,	  36864,  36864	  ]
[ 106496@0,	  106496@0,	  40960,  40960	  ]
[ 110592@0,	  110592@0,	  45056,  45056	  ]
[ 114688@0,	  114688@0,	  49152,  49152	  ]
[ 118784@0,	  118784@0,	  53248,  53248	  ]
[ 122880@0,	  122880@0,	  57344,  57344	  ]
[ 126976@0,	  126976@0,	  61440,  61440	  ]
[ 131072@0,	  131072@0,	  131072, 131072  ]
[ 135168@0,	  135168@0,	  135168, 135168  ]
[ 139264@0,	  139264@0,	  139264, 139264  ]
[ 143360@0,	  143360@0,	  143360, 143360  ]
[ 147456@0,	  147456@0,	  147456, 147456  ]

var b5 := mmap_oid.remap(map,true); 
    [equal](b0,[int](b5)).uselect(false).count().print(); 
[ 0 ]
    sample.print(b0,b5);
#---------------------------------------------------------#
# h		t		t	t		  # name
# oid		oid		int	oid		  # type
#---------------------------------------------------------#
[ 4096@0,	  4096@0,	  69632,  69632@0	  ]
[ 8192@0,	  8192@0,	  73728,  73728@0	  ]
[ 12288@0,	  12288@0,	  77824,  77824@0	  ]
[ 16384@0,	  16384@0,	  81920,  81920@0	  ]
[ 20480@0,	  20480@0,	  86016,  86016@0	  ]
[ 24576@0,	  24576@0,	  90112,  90112@0	  ]
[ 28672@0,	  28672@0,	  94208,  94208@0	  ]
[ 32768@0,	  32768@0,	  98304,  98304@0	  ]
[ 36864@0,	  36864@0,	  102400, 102400@0	  ]
[ 40960@0,	  40960@0,	  106496, 106496@0	  ]
[ 45056@0,	  45056@0,	  110592, 110592@0	  ]
[ 49152@0,	  49152@0,	  114688, 114688@0	  ]
[ 53248@0,	  53248@0,	  118784, 118784@0	  ]
[ 57344@0,	  57344@0,	  122880, 122880@0	  ]
[ 61440@0,	  61440@0,	  126976, 126976@0	  ]
[ 65536@0,	  65536@0,	  0,	  0@0		  ]
[ 69632@0,	  69632@0,	  4096,	  4096@0	  ]
[ 73728@0,	  73728@0,	  8192,	  8192@0	  ]
[ 77824@0,	  77824@0,	  12288,  12288@0	  ]
[ 81920@0,	  81920@0,	  16384,  16384@0	  ]
[ 86016@0,	  86016@0,	  20480,  20480@0	  ]
[ 90112@0,	  90112@0,	  24576,  24576@0	  ]
[ 94208@0,	  94208@0,	  28672,  28672@0	  ]
[ 98304@0,	  98304@0,	  32768,  32768@0	  ]
[ 102400@0,	  102400@0,	  36864,  36864@0	  ]
[ 106496@0,	  106496@0,	  40960,  40960@0	  ]
[ 110592@0,	  110592@0,	  45056,  45056@0	  ]
[ 114688@0,	  114688@0,	  49152,  49152@0	  ]
[ 118784@0,	  118784@0,	  53248,  53248@0	  ]
[ 122880@0,	  122880@0,	  57344,  57344@0	  ]
[ 126976@0,	  126976@0,	  61440,  61440@0	  ]
[ 131072@0,	  131072@0,	  131072, 131072@0	  ]
[ 135168@0,	  135168@0,	  135168, 135168@0	  ]
[ 139264@0,	  139264@0,	  139264, 139264@0	  ]
[ 143360@0,	  143360@0,	  143360, 143360@0	  ]
[ 147456@0,	  147456@0,	  147456, 147456@0	  ]

var b6 := mmap_lng.remap(map,true); 
    [equal](b0,[int](b6)).uselect(false).count().print(); 
[ 0 ]
    sample.print(b0,b6);
#-------------------------------------------------#
# h		t		t	t	  # name
# oid		oid		int	lng	  # type
#-------------------------------------------------#
[ 4096@0,	  4096@0,	  69632,  69632	  ]
[ 8192@0,	  8192@0,	  73728,  73728	  ]
[ 12288@0,	  12288@0,	  77824,  77824	  ]
[ 16384@0,	  16384@0,	  81920,  81920	  ]
[ 20480@0,	  20480@0,	  86016,  86016	  ]
[ 24576@0,	  24576@0,	  90112,  90112	  ]
[ 28672@0,	  28672@0,	  94208,  94208	  ]
[ 32768@0,	  32768@0,	  98304,  98304	  ]
[ 36864@0,	  36864@0,	  102400, 102400  ]
[ 40960@0,	  40960@0,	  106496, 106496  ]
[ 45056@0,	  45056@0,	  110592, 110592  ]
[ 49152@0,	  49152@0,	  114688, 114688  ]
[ 53248@0,	  53248@0,	  118784, 118784  ]
[ 57344@0,	  57344@0,	  122880, 122880  ]
[ 61440@0,	  61440@0,	  126976, 126976  ]
[ 65536@0,	  65536@0,	  0,	  0	  ]
[ 69632@0,	  69632@0,	  4096,	  4096	  ]
[ 73728@0,	  73728@0,	  8192,	  8192	  ]
[ 77824@0,	  77824@0,	  12288,  12288	  ]
[ 81920@0,	  81920@0,	  16384,  16384	  ]
[ 86016@0,	  86016@0,	  20480,  20480	  ]
[ 90112@0,	  90112@0,	  24576,  24576	  ]
[ 94208@0,	  94208@0,	  28672,  28672	  ]
[ 98304@0,	  98304@0,	  32768,  32768	  ]
[ 102400@0,	  102400@0,	  36864,  36864	  ]
[ 106496@0,	  106496@0,	  40960,  40960	  ]
[ 110592@0,	  110592@0,	  45056,  45056	  ]
[ 114688@0,	  114688@0,	  49152,  49152	  ]
[ 118784@0,	  118784@0,	  53248,  53248	  ]
[ 122880@0,	  122880@0,	  57344,  57344	  ]
[ 126976@0,	  126976@0,	  61440,  61440	  ]
[ 131072@0,	  131072@0,	  131072, 131072  ]
[ 135168@0,	  135168@0,	  135168, 135168  ]
[ 139264@0,	  139264@0,	  139264, 139264  ]
[ 143360@0,	  143360@0,	  143360, 143360  ]
[ 147456@0,	  147456@0,	  147456, 147456  ]

var b7 := mmap_str.remap(map,true); 
    [equal](b0,[int](b7)).uselect(false).count().print(); 
[ 0 ]
    sample.print(b0,b7);
#---------------------------------------------------------#
# h		t		t	t		  # name
# oid		oid		int	str		  # type
#---------------------------------------------------------#
[ 4096@0,	  4096@0,	  69632,  "69632"	  ]
[ 8192@0,	  8192@0,	  73728,  "73728"	  ]
[ 12288@0,	  12288@0,	  77824,  "77824"	  ]
[ 16384@0,	  16384@0,	  81920,  "81920"	  ]
[ 20480@0,	  20480@0,	  86016,  "86016"	  ]
[ 24576@0,	  24576@0,	  90112,  "90112"	  ]
[ 28672@0,	  28672@0,	  94208,  "94208"	  ]
[ 32768@0,	  32768@0,	  98304,  "98304"	  ]
[ 36864@0,	  36864@0,	  102400, "102400"	  ]
[ 40960@0,	  40960@0,	  106496, "106496"	  ]
[ 45056@0,	  45056@0,	  110592, "110592"	  ]
[ 49152@0,	  49152@0,	  114688, "114688"	  ]
[ 53248@0,	  53248@0,	  118784, "118784"	  ]
[ 57344@0,	  57344@0,	  122880, "122880"	  ]
[ 61440@0,	  61440@0,	  126976, "126976"	  ]
[ 65536@0,	  65536@0,	  0,	  "0"		  ]
[ 69632@0,	  69632@0,	  4096,	  "4096"	  ]
[ 73728@0,	  73728@0,	  8192,	  "8192"	  ]
[ 77824@0,	  77824@0,	  12288,  "12288"	  ]
[ 81920@0,	  81920@0,	  16384,  "16384"	  ]
[ 86016@0,	  86016@0,	  20480,  "20480"	  ]
[ 90112@0,	  90112@0,	  24576,  "24576"	  ]
[ 94208@0,	  94208@0,	  28672,  "28672"	  ]
[ 98304@0,	  98304@0,	  32768,  "32768"	  ]
[ 102400@0,	  102400@0,	  36864,  "36864"	  ]
[ 106496@0,	  106496@0,	  40960,  "40960"	  ]
[ 110592@0,	  110592@0,	  45056,  "45056"	  ]
[ 114688@0,	  114688@0,	  49152,  "49152"	  ]
[ 118784@0,	  118784@0,	  53248,  "53248"	  ]
[ 122880@0,	  122880@0,	  57344,  "57344"	  ]
[ 126976@0,	  126976@0,	  61440,  "61440"	  ]
[ 131072@0,	  131072@0,	  131072, "131072"	  ]
[ 135168@0,	  135168@0,	  135168, "135168"	  ]
[ 139264@0,	  139264@0,	  139264, "139264"	  ]
[ 143360@0,	  143360@0,	  143360, "143360"	  ]
[ 147456@0,	  147456@0,	  147456, "147456"	  ]

# showcase some features of these re-mapped bats
mmap_int.replace(65536@0,42,true); # change the master..
b4.slice(0,10).print(); # now 42 is also visible in the remap
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  42	  ]
[ 1@0,	  65537	  ]
[ 2@0,	  65538	  ]
[ 3@0,	  65539	  ]
[ 4@0,	  65540	  ]
[ 5@0,	  65541	  ]
[ 6@0,	  65542	  ]
[ 7@0,	  65543	  ]
[ 8@0,	  65544	  ]
[ 9@0,	  65545	  ]
[ 10@0,	  65546	  ]

# create a shadow page in the remap
b4.replace(0@0,1,true); 
b4.slice(0,10).print(); 
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  65537	  ]
[ 2@0,	  65538	  ]
[ 3@0,	  65539	  ]
[ 4@0,	  65540	  ]
[ 5@0,	  65541	  ]
[ 6@0,	  65542	  ]
[ 7@0,	  65543	  ]
[ 8@0,	  65544	  ]
[ 9@0,	  65545	  ]
[ 10@0,	  65546	  ]
mmap_int.slice(65536,65538).print(); # master is still 42
#-------------------------#
# h		t	  # name
# void		int	  # type
#-------------------------#
[ 65536@0,	  1	  ]
[ 65537@0,	  65537	  ]
[ 65538@0,	  65538	  ]

# replace in the master
mmap_int.replace(65536@0,0,true); 
b4.slice(0,10).print(); # it is still 1 => shadow paging works 
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  65537	  ]
[ 2@0,	  65538	  ]
[ 3@0,	  65539	  ]
[ 4@0,	  65540	  ]
[ 5@0,	  65541	  ]
[ 6@0,	  65542	  ]
[ 7@0,	  65543	  ]
[ 8@0,	  65544	  ]
[ 9@0,	  65545	  ]
[ 10@0,	  65546	  ]

########################################### 
# test for swizzle
#
# go for all optimized cases
########################################### 

var m_oid_oid := [oid](o.tmark(0@0));
var m_oid_void := o.hmark(100@0).hmark(0@0);
var m_void_oid := m_oid_oid.copy();
var m_void_void := m_oid_void.copy();
var m_lng_oid := [oid](l.tmark(0@0));
var m_lng_void := l.hmark(100@0).hmark(0@0);

var b2, b1 := [swizzle](m_void_oid, map);

b2 := [swizzle](m_void_void, map);
m_void_oid.slice(65430,65450).print(b1,m_void_void,b2);
#---------------------------------------------------------------------------------#
# h		t		t		t		t		  # name
# void		oid		oid		void		oid		  # type
#---------------------------------------------------------------------------------#
[ 65430@0,	  65531@0,	  131067@0,	  65530@0,	  131066@0	  ]
[ 65431@0,	  65532@0,	  131068@0,	  65531@0,	  131067@0	  ]
[ 65432@0,	  65533@0,	  131069@0,	  65532@0,	  131068@0	  ]
[ 65433@0,	  65534@0,	  131070@0,	  65533@0,	  131069@0	  ]
[ 65434@0,	  65535@0,	  131071@0,	  65534@0,	  131070@0	  ]
[ 65435@0,	  65536@0,	  0@0,		  65535@0,	  131071@0	  ]
[ 65436@0,	  65537@0,	  1@0,		  65536@0,	  0@0		  ]
[ 65437@0,	  65538@0,	  2@0,		  65537@0,	  1@0		  ]
[ 65438@0,	  65539@0,	  3@0,		  65538@0,	  2@0		  ]
[ 65439@0,	  65540@0,	  4@0,		  65539@0,	  3@0		  ]
[ 65440@0,	  65541@0,	  5@0,		  65540@0,	  4@0		  ]
[ 65441@0,	  65542@0,	  6@0,		  65541@0,	  5@0		  ]
[ 65442@0,	  65543@0,	  7@0,		  65542@0,	  6@0		  ]
[ 65443@0,	  65544@0,	  8@0,		  65543@0,	  7@0		  ]
[ 65444@0,	  65545@0,	  9@0,		  65544@0,	  8@0		  ]
[ 65445@0,	  65546@0,	  10@0,		  65545@0,	  9@0		  ]
[ 65446@0,	  65547@0,	  11@0,		  65546@0,	  10@0		  ]
[ 65447@0,	  65548@0,	  12@0,		  65547@0,	  11@0		  ]
[ 65448@0,	  65549@0,	  13@0,		  65548@0,	  12@0		  ]
[ 65449@0,	  65550@0,	  14@0,		  65549@0,	  13@0		  ]
[ 65450@0,	  65551@0,	  15@0,		  65550@0,	  14@0		  ]
print(count([!=](b1,b2).uselect(true)));
[ 150000 ]

b2 := [swizzle](m_oid_oid, map);
m_void_oid.slice(65430,65450).print(b1,m_oid_oid,b2);
#---------------------------------------------------------------------------------#
# h		t		t		t		t		  # name
# void		oid		oid		oid		oid		  # type
#---------------------------------------------------------------------------------#
[ 65430@0,	  65531@0,	  131067@0,	  65531@0,	  131067@0	  ]
[ 65431@0,	  65532@0,	  131068@0,	  65532@0,	  131068@0	  ]
[ 65432@0,	  65533@0,	  131069@0,	  65533@0,	  131069@0	  ]
[ 65433@0,	  65534@0,	  131070@0,	  65534@0,	  131070@0	  ]
[ 65434@0,	  65535@0,	  131071@0,	  65535@0,	  131071@0	  ]
[ 65435@0,	  65536@0,	  0@0,		  65536@0,	  0@0		  ]
[ 65436@0,	  65537@0,	  1@0,		  65537@0,	  1@0		  ]
[ 65437@0,	  65538@0,	  2@0,		  65538@0,	  2@0		  ]
[ 65438@0,	  65539@0,	  3@0,		  65539@0,	  3@0		  ]
[ 65439@0,	  65540@0,	  4@0,		  65540@0,	  4@0		  ]
[ 65440@0,	  65541@0,	  5@0,		  65541@0,	  5@0		  ]
[ 65441@0,	  65542@0,	  6@0,		  65542@0,	  6@0		  ]
[ 65442@0,	  65543@0,	  7@0,		  65543@0,	  7@0		  ]
[ 65443@0,	  65544@0,	  8@0,		  65544@0,	  8@0		  ]
[ 65444@0,	  65545@0,	  9@0,		  65545@0,	  9@0		  ]
[ 65445@0,	  65546@0,	  10@0,		  65546@0,	  10@0		  ]
[ 65446@0,	  65547@0,	  11@0,		  65547@0,	  11@0		  ]
[ 65447@0,	  65548@0,	  12@0,		  65548@0,	  12@0		  ]
[ 65448@0,	  65549@0,	  13@0,		  65549@0,	  13@0		  ]
[ 65449@0,	  65550@0,	  14@0,		  65550@0,	  14@0		  ]
[ 65450@0,	  65551@0,	  15@0,		  65551@0,	  15@0		  ]
print(count([!=](b1,b2).uselect(true)));
[ 0 ]

b2 := [swizzle](m_oid_void, map);
m_void_oid.slice(65430,65450).print(b1,m_oid_void,b2);
#---------------------------------------------------------------------------------#
# h		t		t		h		t		  # name
# void		oid		oid		void		oid		  # type
#---------------------------------------------------------------------------------#
[ 65430@0,	  65531@0,	  131067@0,	  65530@0,	  131066@0	  ]
[ 65431@0,	  65532@0,	  131068@0,	  65531@0,	  131067@0	  ]
[ 65432@0,	  65533@0,	  131069@0,	  65532@0,	  131068@0	  ]
[ 65433@0,	  65534@0,	  131070@0,	  65533@0,	  131069@0	  ]
[ 65434@0,	  65535@0,	  131071@0,	  65534@0,	  131070@0	  ]
[ 65435@0,	  65536@0,	  0@0,		  65535@0,	  131071@0	  ]
[ 65436@0,	  65537@0,	  1@0,		  65536@0,	  0@0		  ]
[ 65437@0,	  65538@0,	  2@0,		  65537@0,	  1@0		  ]
[ 65438@0,	  65539@0,	  3@0,		  65538@0,	  2@0		  ]
[ 65439@0,	  65540@0,	  4@0,		  65539@0,	  3@0		  ]
[ 65440@0,	  65541@0,	  5@0,		  65540@0,	  4@0		  ]
[ 65441@0,	  65542@0,	  6@0,		  65541@0,	  5@0		  ]
[ 65442@0,	  65543@0,	  7@0,		  65542@0,	  6@0		  ]
[ 65443@0,	  65544@0,	  8@0,		  65543@0,	  7@0		  ]
[ 65444@0,	  65545@0,	  9@0,		  65544@0,	  8@0		  ]
[ 65445@0,	  65546@0,	  10@0,		  65545@0,	  9@0		  ]
[ 65446@0,	  65547@0,	  11@0,		  65546@0,	  10@0		  ]
[ 65447@0,	  65548@0,	  12@0,		  65547@0,	  11@0		  ]
[ 65448@0,	  65549@0,	  13@0,		  65548@0,	  12@0		  ]
[ 65449@0,	  65550@0,	  14@0,		  65549@0,	  13@0		  ]
[ 65450@0,	  65551@0,	  15@0,		  65550@0,	  14@0		  ]
print(count([!=](b1,b2).uselect(true)));
[ 150000 ]

b2 := [swizzle](m_lng_oid, map);
m_void_oid.slice(65430,65450).print(b1,m_lng_oid,b2);
#---------------------------------------------------------------------------------#
# h		t		t		t		t		  # name
# void		oid		oid		oid		oid		  # type
#---------------------------------------------------------------------------------#
[ 65430@0,	  65531@0,	  131067@0,	  65531@0,	  131067@0	  ]
[ 65431@0,	  65532@0,	  131068@0,	  65532@0,	  131068@0	  ]
[ 65432@0,	  65533@0,	  131069@0,	  65533@0,	  131069@0	  ]
[ 65433@0,	  65534@0,	  131070@0,	  65534@0,	  131070@0	  ]
[ 65434@0,	  65535@0,	  131071@0,	  65535@0,	  131071@0	  ]
[ 65435@0,	  65536@0,	  0@0,		  65536@0,	  0@0		  ]
[ 65436@0,	  65537@0,	  1@0,		  65537@0,	  1@0		  ]
[ 65437@0,	  65538@0,	  2@0,		  65538@0,	  2@0		  ]
[ 65438@0,	  65539@0,	  3@0,		  65539@0,	  3@0		  ]
[ 65439@0,	  65540@0,	  4@0,		  65540@0,	  4@0		  ]
[ 65440@0,	  65541@0,	  5@0,		  65541@0,	  5@0		  ]
[ 65441@0,	  65542@0,	  6@0,		  65542@0,	  6@0		  ]
[ 65442@0,	  65543@0,	  7@0,		  65543@0,	  7@0		  ]
[ 65443@0,	  65544@0,	  8@0,		  65544@0,	  8@0		  ]
[ 65444@0,	  65545@0,	  9@0,		  65545@0,	  9@0		  ]
[ 65445@0,	  65546@0,	  10@0,		  65546@0,	  10@0		  ]
[ 65446@0,	  65547@0,	  11@0,		  65547@0,	  11@0		  ]
[ 65447@0,	  65548@0,	  12@0,		  65548@0,	  12@0		  ]
[ 65448@0,	  65549@0,	  13@0,		  65549@0,	  13@0		  ]
[ 65449@0,	  65550@0,	  14@0,		  65550@0,	  14@0		  ]
[ 65450@0,	  65551@0,	  15@0,		  65551@0,	  15@0		  ]
print(count([!=](b1,b2).uselect(true)));
[ 0 ]

b2 := [swizzle](m_lng_void, map);
m_void_oid.slice(65430,65450).print(b1,m_lng_void,b2);
#---------------------------------------------------------------------------------#
# h		t		t		h		t		  # name
# void		oid		oid		void		oid		  # type
#---------------------------------------------------------------------------------#
[ 65430@0,	  65531@0,	  131067@0,	  65530@0,	  131066@0	  ]
[ 65431@0,	  65532@0,	  131068@0,	  65531@0,	  131067@0	  ]
[ 65432@0,	  65533@0,	  131069@0,	  65532@0,	  131068@0	  ]
[ 65433@0,	  65534@0,	  131070@0,	  65533@0,	  131069@0	  ]
[ 65434@0,	  65535@0,	  131071@0,	  65534@0,	  131070@0	  ]
[ 65435@0,	  65536@0,	  0@0,		  65535@0,	  131071@0	  ]
[ 65436@0,	  65537@0,	  1@0,		  65536@0,	  0@0		  ]
[ 65437@0,	  65538@0,	  2@0,		  65537@0,	  1@0		  ]
[ 65438@0,	  65539@0,	  3@0,		  65538@0,	  2@0		  ]
[ 65439@0,	  65540@0,	  4@0,		  65539@0,	  3@0		  ]
[ 65440@0,	  65541@0,	  5@0,		  65540@0,	  4@0		  ]
[ 65441@0,	  65542@0,	  6@0,		  65541@0,	  5@0		  ]
[ 65442@0,	  65543@0,	  7@0,		  65542@0,	  6@0		  ]
[ 65443@0,	  65544@0,	  8@0,		  65543@0,	  7@0		  ]
[ 65444@0,	  65545@0,	  9@0,		  65544@0,	  8@0		  ]
[ 65445@0,	  65546@0,	  10@0,		  65545@0,	  9@0		  ]
[ 65446@0,	  65547@0,	  11@0,		  65546@0,	  10@0		  ]
[ 65447@0,	  65548@0,	  12@0,		  65547@0,	  11@0		  ]
[ 65448@0,	  65549@0,	  13@0,		  65548@0,	  12@0		  ]
[ 65449@0,	  65550@0,	  14@0,		  65549@0,	  13@0		  ]
[ 65450@0,	  65551@0,	  15@0,		  65550@0,	  14@0		  ]
print(count([!=](b1,b2).uselect(true)));
[ 150000 ]

map := map.reverse().[int]().hmark(0@0);

b2 := [swizzle](m_void_oid, map);
m_void_oid.slice(65430,65450).print(b1,m_void_oid,b2);
#---------------------------------------------------------------------------------#
# h		t		t		t		t		  # name
# void		oid		oid		oid		oid		  # type
#---------------------------------------------------------------------------------#
[ 65430@0,	  65531@0,	  131067@0,	  65531@0,	  131067@0	  ]
[ 65431@0,	  65532@0,	  131068@0,	  65532@0,	  131068@0	  ]
[ 65432@0,	  65533@0,	  131069@0,	  65533@0,	  131069@0	  ]
[ 65433@0,	  65534@0,	  131070@0,	  65534@0,	  131070@0	  ]
[ 65434@0,	  65535@0,	  131071@0,	  65535@0,	  131071@0	  ]
[ 65435@0,	  65536@0,	  0@0,		  65536@0,	  0@0		  ]
[ 65436@0,	  65537@0,	  1@0,		  65537@0,	  1@0		  ]
[ 65437@0,	  65538@0,	  2@0,		  65538@0,	  2@0		  ]
[ 65438@0,	  65539@0,	  3@0,		  65539@0,	  3@0		  ]
[ 65439@0,	  65540@0,	  4@0,		  65540@0,	  4@0		  ]
[ 65440@0,	  65541@0,	  5@0,		  65541@0,	  5@0		  ]
[ 65441@0,	  65542@0,	  6@0,		  65542@0,	  6@0		  ]
[ 65442@0,	  65543@0,	  7@0,		  65543@0,	  7@0		  ]
[ 65443@0,	  65544@0,	  8@0,		  65544@0,	  8@0		  ]
[ 65444@0,	  65545@0,	  9@0,		  65545@0,	  9@0		  ]
[ 65445@0,	  65546@0,	  10@0,		  65546@0,	  10@0		  ]
[ 65446@0,	  65547@0,	  11@0,		  65547@0,	  11@0		  ]
[ 65447@0,	  65548@0,	  12@0,		  65548@0,	  12@0		  ]
[ 65448@0,	  65549@0,	  13@0,		  65549@0,	  13@0		  ]
[ 65449@0,	  65550@0,	  14@0,		  65550@0,	  14@0		  ]
[ 65450@0,	  65551@0,	  15@0,		  65551@0,	  15@0		  ]
print(count([!=](b1,b2).uselect(true)));
[ 0 ]

b2 := [swizzle](m_void_void, map);
m_void_oid.slice(65430,65450).print(b1,m_void_void,b2);
#---------------------------------------------------------------------------------#
# h		t		t		t		t		  # name
# void		oid		oid		void		oid		  # type
#---------------------------------------------------------------------------------#
[ 65430@0,	  65531@0,	  131067@0,	  65530@0,	  131066@0	  ]
[ 65431@0,	  65532@0,	  131068@0,	  65531@0,	  131067@0	  ]
[ 65432@0,	  65533@0,	  131069@0,	  65532@0,	  131068@0	  ]
[ 65433@0,	  65534@0,	  131070@0,	  65533@0,	  131069@0	  ]
[ 65434@0,	  65535@0,	  131071@0,	  65534@0,	  131070@0	  ]
[ 65435@0,	  65536@0,	  0@0,		  65535@0,	  131071@0	  ]
[ 65436@0,	  65537@0,	  1@0,		  65536@0,	  0@0		  ]
[ 65437@0,	  65538@0,	  2@0,		  65537@0,	  1@0		  ]
[ 65438@0,	  65539@0,	  3@0,		  65538@0,	  2@0		  ]
[ 65439@0,	  65540@0,	  4@0,		  65539@0,	  3@0		  ]
[ 65440@0,	  65541@0,	  5@0,		  65540@0,	  4@0		  ]
[ 65441@0,	  65542@0,	  6@0,		  65541@0,	  5@0		  ]
[ 65442@0,	  65543@0,	  7@0,		  65542@0,	  6@0		  ]
[ 65443@0,	  65544@0,	  8@0,		  65543@0,	  7@0		  ]
[ 65444@0,	  65545@0,	  9@0,		  65544@0,	  8@0		  ]
[ 65445@0,	  65546@0,	  10@0,		  65545@0,	  9@0		  ]
[ 65446@0,	  65547@0,	  11@0,		  65546@0,	  10@0		  ]
[ 65447@0,	  65548@0,	  12@0,		  65547@0,	  11@0		  ]
[ 65448@0,	  65549@0,	  13@0,		  65548@0,	  12@0		  ]
[ 65449@0,	  65550@0,	  14@0,		  65549@0,	  13@0		  ]
[ 65450@0,	  65551@0,	  15@0,		  65550@0,	  14@0		  ]
print(count([!=](b1,b2).uselect(true)));
[ 150000 ]

b2 := [swizzle](m_oid_oid, map);
m_void_oid.slice(65430,65450).print(b1,m_oid_oid,b2);
#---------------------------------------------------------------------------------#
# h		t		t		t		t		  # name
# void		oid		oid		oid		oid		  # type
#---------------------------------------------------------------------------------#
[ 65430@0,	  65531@0,	  131067@0,	  65531@0,	  131067@0	  ]
[ 65431@0,	  65532@0,	  131068@0,	  65532@0,	  131068@0	  ]
[ 65432@0,	  65533@0,	  131069@0,	  65533@0,	  131069@0	  ]
[ 65433@0,	  65534@0,	  131070@0,	  65534@0,	  131070@0	  ]
[ 65434@0,	  65535@0,	  131071@0,	  65535@0,	  131071@0	  ]
[ 65435@0,	  65536@0,	  0@0,		  65536@0,	  0@0		  ]
[ 65436@0,	  65537@0,	  1@0,		  65537@0,	  1@0		  ]
[ 65437@0,	  65538@0,	  2@0,		  65538@0,	  2@0		  ]
[ 65438@0,	  65539@0,	  3@0,		  65539@0,	  3@0		  ]
[ 65439@0,	  65540@0,	  4@0,		  65540@0,	  4@0		  ]
[ 65440@0,	  65541@0,	  5@0,		  65541@0,	  5@0		  ]
[ 65441@0,	  65542@0,	  6@0,		  65542@0,	  6@0		  ]
[ 65442@0,	  65543@0,	  7@0,		  65543@0,	  7@0		  ]
[ 65443@0,	  65544@0,	  8@0,		  65544@0,	  8@0		  ]
[ 65444@0,	  65545@0,	  9@0,		  65545@0,	  9@0		  ]
[ 65445@0,	  65546@0,	  10@0,		  65546@0,	  10@0		  ]
[ 65446@0,	  65547@0,	  11@0,		  65547@0,	  11@0		  ]
[ 65447@0,	  65548@0,	  12@0,		  65548@0,	  12@0		  ]
[ 65448@0,	  65549@0,	  13@0,		  65549@0,	  13@0		  ]
[ 65449@0,	  65550@0,	  14@0,		  65550@0,	  14@0		  ]
[ 65450@0,	  65551@0,	  15@0,		  65551@0,	  15@0		  ]
print(count([!=](b1,b2).uselect(true)));
[ 0 ]

b2 := [swizzle](m_oid_void, map);
m_void_oid.slice(65430,65450).print(b1,m_oid_void,b2);
#---------------------------------------------------------------------------------#
# h		t		t		h		t		  # name
# void		oid		oid		void		oid		  # type
#---------------------------------------------------------------------------------#
[ 65430@0,	  65531@0,	  131067@0,	  65530@0,	  131066@0	  ]
[ 65431@0,	  65532@0,	  131068@0,	  65531@0,	  131067@0	  ]
[ 65432@0,	  65533@0,	  131069@0,	  65532@0,	  131068@0	  ]
[ 65433@0,	  65534@0,	  131070@0,	  65533@0,	  131069@0	  ]
[ 65434@0,	  65535@0,	  131071@0,	  65534@0,	  131070@0	  ]
[ 65435@0,	  65536@0,	  0@0,		  65535@0,	  131071@0	  ]
[ 65436@0,	  65537@0,	  1@0,		  65536@0,	  0@0		  ]
[ 65437@0,	  65538@0,	  2@0,		  65537@0,	  1@0		  ]
[ 65438@0,	  65539@0,	  3@0,		  65538@0,	  2@0		  ]
[ 65439@0,	  65540@0,	  4@0,		  65539@0,	  3@0		  ]
[ 65440@0,	  65541@0,	  5@0,		  65540@0,	  4@0		  ]
[ 65441@0,	  65542@0,	  6@0,		  65541@0,	  5@0		  ]
[ 65442@0,	  65543@0,	  7@0,		  65542@0,	  6@0		  ]
[ 65443@0,	  65544@0,	  8@0,		  65543@0,	  7@0		  ]
[ 65444@0,	  65545@0,	  9@0,		  65544@0,	  8@0		  ]
[ 65445@0,	  65546@0,	  10@0,		  65545@0,	  9@0		  ]
[ 65446@0,	  65547@0,	  11@0,		  65546@0,	  10@0		  ]
[ 65447@0,	  65548@0,	  12@0,		  65547@0,	  11@0		  ]
[ 65448@0,	  65549@0,	  13@0,		  65548@0,	  12@0		  ]
[ 65449@0,	  65550@0,	  14@0,		  65549@0,	  13@0		  ]
[ 65450@0,	  65551@0,	  15@0,		  65550@0,	  14@0		  ]
print(count([!=](b1,b2).uselect(true)));
[ 150000 ]

b2 := [swizzle](m_lng_oid, map);
m_void_oid.slice(65430,65450).print(b1,m_lng_oid,b2);
#---------------------------------------------------------------------------------#
# h		t		t		t		t		  # name
# void		oid		oid		oid		oid		  # type
#---------------------------------------------------------------------------------#
[ 65430@0,	  65531@0,	  131067@0,	  65531@0,	  131067@0	  ]
[ 65431@0,	  65532@0,	  131068@0,	  65532@0,	  131068@0	  ]
[ 65432@0,	  65533@0,	  131069@0,	  65533@0,	  131069@0	  ]
[ 65433@0,	  65534@0,	  131070@0,	  65534@0,	  131070@0	  ]
[ 65434@0,	  65535@0,	  131071@0,	  65535@0,	  131071@0	  ]
[ 65435@0,	  65536@0,	  0@0,		  65536@0,	  0@0		  ]
[ 65436@0,	  65537@0,	  1@0,		  65537@0,	  1@0		  ]
[ 65437@0,	  65538@0,	  2@0,		  65538@0,	  2@0		  ]
[ 65438@0,	  65539@0,	  3@0,		  65539@0,	  3@0		  ]
[ 65439@0,	  65540@0,	  4@0,		  65540@0,	  4@0		  ]
[ 65440@0,	  65541@0,	  5@0,		  65541@0,	  5@0		  ]
[ 65441@0,	  65542@0,	  6@0,		  65542@0,	  6@0		  ]
[ 65442@0,	  65543@0,	  7@0,		  65543@0,	  7@0		  ]
[ 65443@0,	  65544@0,	  8@0,		  65544@0,	  8@0		  ]
[ 65444@0,	  65545@0,	  9@0,		  65545@0,	  9@0		  ]
[ 65445@0,	  65546@0,	  10@0,		  65546@0,	  10@0		  ]
[ 65446@0,	  65547@0,	  11@0,		  65547@0,	  11@0		  ]
[ 65447@0,	  65548@0,	  12@0,		  65548@0,	  12@0		  ]
[ 65448@0,	  65549@0,	  13@0,		  65549@0,	  13@0		  ]
[ 65449@0,	  65550@0,	  14@0,		  65550@0,	  14@0		  ]
[ 65450@0,	  65551@0,	  15@0,		  65551@0,	  15@0		  ]
print(count([!=](b1,b2).uselect(true)));
[ 0 ]

b2 := [swizzle](m_lng_void, map);
m_void_oid.slice(65430,65450).print(b1,m_lng_void,b2);
#---------------------------------------------------------------------------------#
# h		t		t		h		t		  # name
# void		oid		oid		void		oid		  # type
#---------------------------------------------------------------------------------#
[ 65430@0,	  65531@0,	  131067@0,	  65530@0,	  131066@0	  ]
[ 65431@0,	  65532@0,	  131068@0,	  65531@0,	  131067@0	  ]
[ 65432@0,	  65533@0,	  131069@0,	  65532@0,	  131068@0	  ]
[ 65433@0,	  65534@0,	  131070@0,	  65533@0,	  131069@0	  ]
[ 65434@0,	  65535@0,	  131071@0,	  65534@0,	  131070@0	  ]
[ 65435@0,	  65536@0,	  0@0,		  65535@0,	  131071@0	  ]
[ 65436@0,	  65537@0,	  1@0,		  65536@0,	  0@0		  ]
[ 65437@0,	  65538@0,	  2@0,		  65537@0,	  1@0		  ]
[ 65438@0,	  65539@0,	  3@0,		  65538@0,	  2@0		  ]
[ 65439@0,	  65540@0,	  4@0,		  65539@0,	  3@0		  ]
[ 65440@0,	  65541@0,	  5@0,		  65540@0,	  4@0		  ]
[ 65441@0,	  65542@0,	  6@0,		  65541@0,	  5@0		  ]
[ 65442@0,	  65543@0,	  7@0,		  65542@0,	  6@0		  ]
[ 65443@0,	  65544@0,	  8@0,		  65543@0,	  7@0		  ]
[ 65444@0,	  65545@0,	  9@0,		  65544@0,	  8@0		  ]
[ 65445@0,	  65546@0,	  10@0,		  65545@0,	  9@0		  ]
[ 65446@0,	  65547@0,	  11@0,		  65546@0,	  10@0		  ]
[ 65447@0,	  65548@0,	  12@0,		  65547@0,	  11@0		  ]
[ 65448@0,	  65549@0,	  13@0,		  65548@0,	  12@0		  ]
[ 65449@0,	  65550@0,	  14@0,		  65549@0,	  13@0		  ]
[ 65450@0,	  65551@0,	  15@0,		  65550@0,	  14@0		  ]
print(count([!=](b1,b2).uselect(true)));
[ 150000 ]

map := map.reverse().[lng]().hmark(0@0);

b2 := [swizzle](m_void_void, map);
m_void_oid.slice(65430,65450).print(b1,m_void_void,b2);
#---------------------------------------------------------------------------------#
# h		t		t		t		t		  # name
# void		oid		oid		void		oid		  # type
#---------------------------------------------------------------------------------#
[ 65430@0,	  65531@0,	  131067@0,	  65530@0,	  131066@0	  ]
[ 65431@0,	  65532@0,	  131068@0,	  65531@0,	  131067@0	  ]
[ 65432@0,	  65533@0,	  131069@0,	  65532@0,	  131068@0	  ]
[ 65433@0,	  65534@0,	  131070@0,	  65533@0,	  131069@0	  ]
[ 65434@0,	  65535@0,	  131071@0,	  65534@0,	  131070@0	  ]
[ 65435@0,	  65536@0,	  0@0,		  65535@0,	  131071@0	  ]
[ 65436@0,	  65537@0,	  1@0,		  65536@0,	  0@0		  ]
[ 65437@0,	  65538@0,	  2@0,		  65537@0,	  1@0		  ]
[ 65438@0,	  65539@0,	  3@0,		  65538@0,	  2@0		  ]
[ 65439@0,	  65540@0,	  4@0,		  65539@0,	  3@0		  ]
[ 65440@0,	  65541@0,	  5@0,		  65540@0,	  4@0		  ]
[ 65441@0,	  65542@0,	  6@0,		  65541@0,	  5@0		  ]
[ 65442@0,	  65543@0,	  7@0,		  65542@0,	  6@0		  ]
[ 65443@0,	  65544@0,	  8@0,		  65543@0,	  7@0		  ]
[ 65444@0,	  65545@0,	  9@0,		  65544@0,	  8@0		  ]
[ 65445@0,	  65546@0,	  10@0,		  65545@0,	  9@0		  ]
[ 65446@0,	  65547@0,	  11@0,		  65546@0,	  10@0		  ]
[ 65447@0,	  65548@0,	  12@0,		  65547@0,	  11@0		  ]
[ 65448@0,	  65549@0,	  13@0,		  65548@0,	  12@0		  ]
[ 65449@0,	  65550@0,	  14@0,		  65549@0,	  13@0		  ]
[ 65450@0,	  65551@0,	  15@0,		  65550@0,	  14@0		  ]
print(count([!=](b1,b2).uselect(true)));
[ 150000 ]

b2 := [swizzle](m_oid_oid, map);
m_void_oid.slice(65430,65450).print(b1,m_oid_oid,b2);
#---------------------------------------------------------------------------------#
# h		t		t		t		t		  # name
# void		oid		oid		oid		oid		  # type
#---------------------------------------------------------------------------------#
[ 65430@0,	  65531@0,	  131067@0,	  65531@0,	  131067@0	  ]
[ 65431@0,	  65532@0,	  131068@0,	  65532@0,	  131068@0	  ]
[ 65432@0,	  65533@0,	  131069@0,	  65533@0,	  131069@0	  ]
[ 65433@0,	  65534@0,	  131070@0,	  65534@0,	  131070@0	  ]
[ 65434@0,	  65535@0,	  131071@0,	  65535@0,	  131071@0	  ]
[ 65435@0,	  65536@0,	  0@0,		  65536@0,	  0@0		  ]
[ 65436@0,	  65537@0,	  1@0,		  65537@0,	  1@0		  ]
[ 65437@0,	  65538@0,	  2@0,		  65538@0,	  2@0		  ]
[ 65438@0,	  65539@0,	  3@0,		  65539@0,	  3@0		  ]
[ 65439@0,	  65540@0,	  4@0,		  65540@0,	  4@0		  ]
[ 65440@0,	  65541@0,	  5@0,		  65541@0,	  5@0		  ]
[ 65441@0,	  65542@0,	  6@0,		  65542@0,	  6@0		  ]
[ 65442@0,	  65543@0,	  7@0,		  65543@0,	  7@0		  ]
[ 65443@0,	  65544@0,	  8@0,		  65544@0,	  8@0		  ]
[ 65444@0,	  65545@0,	  9@0,		  65545@0,	  9@0		  ]
[ 65445@0,	  65546@0,	  10@0,		  65546@0,	  10@0		  ]
[ 65446@0,	  65547@0,	  11@0,		  65547@0,	  11@0		  ]
[ 65447@0,	  65548@0,	  12@0,		  65548@0,	  12@0		  ]
[ 65448@0,	  65549@0,	  13@0,		  65549@0,	  13@0		  ]
[ 65449@0,	  65550@0,	  14@0,		  65550@0,	  14@0		  ]
[ 65450@0,	  65551@0,	  15@0,		  65551@0,	  15@0		  ]
print(count([!=](b1,b2).uselect(true)));
[ 0 ]

b2 := [swizzle](m_oid_void, map);
m_void_oid.slice(65430,65450).print(b1,m_oid_void,b2);
#---------------------------------------------------------------------------------#
# h		t		t		h		t		  # name
# void		oid		oid		void		oid		  # type
#---------------------------------------------------------------------------------#
[ 65430@0,	  65531@0,	  131067@0,	  65530@0,	  131066@0	  ]
[ 65431@0,	  65532@0,	  131068@0,	  65531@0,	  131067@0	  ]
[ 65432@0,	  65533@0,	  131069@0,	  65532@0,	  131068@0	  ]
[ 65433@0,	  65534@0,	  131070@0,	  65533@0,	  131069@0	  ]
[ 65434@0,	  65535@0,	  131071@0,	  65534@0,	  131070@0	  ]
[ 65435@0,	  65536@0,	  0@0,		  65535@0,	  131071@0	  ]
[ 65436@0,	  65537@0,	  1@0,		  65536@0,	  0@0		  ]
[ 65437@0,	  65538@0,	  2@0,		  65537@0,	  1@0		  ]
[ 65438@0,	  65539@0,	  3@0,		  65538@0,	  2@0		  ]
[ 65439@0,	  65540@0,	  4@0,		  65539@0,	  3@0		  ]
[ 65440@0,	  65541@0,	  5@0,		  65540@0,	  4@0		  ]
[ 65441@0,	  65542@0,	  6@0,		  65541@0,	  5@0		  ]
[ 65442@0,	  65543@0,	  7@0,		  65542@0,	  6@0		  ]
[ 65443@0,	  65544@0,	  8@0,		  65543@0,	  7@0		  ]
[ 65444@0,	  65545@0,	  9@0,		  65544@0,	  8@0		  ]
[ 65445@0,	  65546@0,	  10@0,		  65545@0,	  9@0		  ]
[ 65446@0,	  65547@0,	  11@0,		  65546@0,	  10@0		  ]
[ 65447@0,	  65548@0,	  12@0,		  65547@0,	  11@0		  ]
[ 65448@0,	  65549@0,	  13@0,		  65548@0,	  12@0		  ]
[ 65449@0,	  65550@0,	  14@0,		  65549@0,	  13@0		  ]
[ 65450@0,	  65551@0,	  15@0,		  65550@0,	  14@0		  ]
print(count([!=](b1,b2).uselect(true)));
[ 150000 ]

b2 := [swizzle](m_lng_oid, map);
m_void_oid.slice(65430,65450).print(b1,m_lng_oid,b2);
#---------------------------------------------------------------------------------#
# h		t		t		t		t		  # name
# void		oid		oid		oid		oid		  # type
#---------------------------------------------------------------------------------#
[ 65430@0,	  65531@0,	  131067@0,	  65531@0,	  131067@0	  ]
[ 65431@0,	  65532@0,	  131068@0,	  65532@0,	  131068@0	  ]
[ 65432@0,	  65533@0,	  131069@0,	  65533@0,	  131069@0	  ]
[ 65433@0,	  65534@0,	  131070@0,	  65534@0,	  131070@0	  ]
[ 65434@0,	  65535@0,	  131071@0,	  65535@0,	  131071@0	  ]
[ 65435@0,	  65536@0,	  0@0,		  65536@0,	  0@0		  ]
[ 65436@0,	  65537@0,	  1@0,		  65537@0,	  1@0		  ]
[ 65437@0,	  65538@0,	  2@0,		  65538@0,	  2@0		  ]
[ 65438@0,	  65539@0,	  3@0,		  65539@0,	  3@0		  ]
[ 65439@0,	  65540@0,	  4@0,		  65540@0,	  4@0		  ]
[ 65440@0,	  65541@0,	  5@0,		  65541@0,	  5@0		  ]
[ 65441@0,	  65542@0,	  6@0,		  65542@0,	  6@0		  ]
[ 65442@0,	  65543@0,	  7@0,		  65543@0,	  7@0		  ]
[ 65443@0,	  65544@0,	  8@0,		  65544@0,	  8@0		  ]
[ 65444@0,	  65545@0,	  9@0,		  65545@0,	  9@0		  ]
[ 65445@0,	  65546@0,	  10@0,		  65546@0,	  10@0		  ]
[ 65446@0,	  65547@0,	  11@0,		  65547@0,	  11@0		  ]
[ 65447@0,	  65548@0,	  12@0,		  65548@0,	  12@0		  ]
[ 65448@0,	  65549@0,	  13@0,		  65549@0,	  13@0		  ]
[ 65449@0,	  65550@0,	  14@0,		  65550@0,	  14@0		  ]
[ 65450@0,	  65551@0,	  15@0,		  65551@0,	  15@0		  ]
print(count([!=](b1,b2).uselect(true)));
[ 0 ]

b2 := [swizzle](m_lng_void, map);
m_void_oid.slice(65430,65450).print(b1,m_lng_void,b2);
#---------------------------------------------------------------------------------#
# h		t		t		h		t		  # name
# void		oid		oid		void		oid		  # type
#---------------------------------------------------------------------------------#
[ 65430@0,	  65531@0,	  131067@0,	  65530@0,	  131066@0	  ]
[ 65431@0,	  65532@0,	  131068@0,	  65531@0,	  131067@0	  ]
[ 65432@0,	  65533@0,	  131069@0,	  65532@0,	  131068@0	  ]
[ 65433@0,	  65534@0,	  131070@0,	  65533@0,	  131069@0	  ]
[ 65434@0,	  65535@0,	  131071@0,	  65534@0,	  131070@0	  ]
[ 65435@0,	  65536@0,	  0@0,		  65535@0,	  131071@0	  ]
[ 65436@0,	  65537@0,	  1@0,		  65536@0,	  0@0		  ]
[ 65437@0,	  65538@0,	  2@0,		  65537@0,	  1@0		  ]
[ 65438@0,	  65539@0,	  3@0,		  65538@0,	  2@0		  ]
[ 65439@0,	  65540@0,	  4@0,		  65539@0,	  3@0		  ]
[ 65440@0,	  65541@0,	  5@0,		  65540@0,	  4@0		  ]
[ 65441@0,	  65542@0,	  6@0,		  65541@0,	  5@0		  ]
[ 65442@0,	  65543@0,	  7@0,		  65542@0,	  6@0		  ]
[ 65443@0,	  65544@0,	  8@0,		  65543@0,	  7@0		  ]
[ 65444@0,	  65545@0,	  9@0,		  65544@0,	  8@0		  ]
[ 65445@0,	  65546@0,	  10@0,		  65545@0,	  9@0		  ]
[ 65446@0,	  65547@0,	  11@0,		  65546@0,	  10@0		  ]
[ 65447@0,	  65548@0,	  12@0,		  65547@0,	  11@0		  ]
[ 65448@0,	  65549@0,	  13@0,		  65548@0,	  12@0		  ]
[ 65449@0,	  65550@0,	  14@0,		  65549@0,	  13@0		  ]
[ 65450@0,	  65551@0,	  15@0,		  65550@0,	  14@0		  ]
print(count([!=](b1,b2).uselect(true)));
[ 150000 ]

quit();

# 17:05:12 >  
# 17:05:12 >  Done.
# 17:05:12 >  

