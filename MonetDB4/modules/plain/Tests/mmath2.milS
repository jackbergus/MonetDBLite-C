module(mmath);

# test parameter: what margin do we accept?
var epsilon := dbl(0.000001);

# set up a BAT with test expressions and expected results
var expect := bat(str, dbl);
expect.insert("sin(dbl(0))",			dbl(0));
expect.insert("sin(M_PI_4)",			M_SQRT1_2);
expect.insert("sin(M_PI_2)",			dbl(1));
expect.insert("sin(M_PI)",			dbl(0));
expect.insert("sin(3*M_PI_2)",			dbl(-1));
expect.insert("cos(dbl(0))",			dbl(1));
expect.insert("cos(M_PI_4)",			M_SQRT1_2);
expect.insert("cos(M_PI_2)",			dbl(0));
expect.insert("cos(M_PI)",			dbl(-1));
expect.insert("cos(3*M_PI_2)",			dbl(0));
expect.insert("tan(dbl(0))",			dbl(0));
expect.insert("tan(M_PI_4)",			dbl(1));
# expect.insert("tan(M_PI_2)",			Infinite);
expect.insert("tan(M_PI)",			dbl(0));
# expect.insert("tan(3*M_PI_2)",		Infinite);
expect.insert("asin(dbl(-1))",			-(M_PI_2));
expect.insert("asin(dbl(-0.5))",		-(M_PI_2/dbl(3)));
expect.insert("asin(dbl(0))",			dbl(0));
expect.insert("asin(dbl(0.5))",			M_PI_2/dbl(3));
expect.insert("asin(dbl(1))",			M_PI_2);
expect.insert("acos(dbl(-1))",			M_PI);
expect.insert("acos(dbl(-0.5))",		(M_PI*dbl(2))/dbl(3));
expect.insert("acos(dbl(0))",			M_PI_2);
expect.insert("acos(dbl(0.5))",			M_PI/dbl(3));
expect.insert("acos(dbl(1))",			dbl(0));
expect.insert("atan(dbl(-1))",			-(M_PI_4));
expect.insert("atan(-(sqrt(dbl(3))/dbl(3)))",	-(M_PI/dbl(6)));
expect.insert("atan(dbl(0))",			dbl(0));
expect.insert("atan(dbl(1))",			M_PI_4);
expect.insert("asin(sin(M_PI))",		dbl(0));
expect.insert("acos(cos(M_PI))",		M_PI);
expect.insert("atan(tan(M_PI_2))",		M_PI_2);
expect.insert("atan(tan(M_PI_4))",		M_PI_4);
expect.insert("tan(atan2(dbl(0.1),dbl(1.0)))",	dbl(0.1));
expect.insert("sqrt(pow(dbl(2),dbl(2)))",	dbl(2));
expect.insert("log(exp(dbl(10)))",		dbl(10));
expect.insert("exp(log(dbl(10)))",		dbl(10));
expect.insert("log10(dbl(10))",			dbl(1));
expect.insert("ceil(dbl(1.2))",			dbl(2));
expect.insert("fabs(dbl(1.2))",			dbl(1.2));
expect.insert("floor(dbl(1.2))",		dbl(1));
expect.insert("fmod(dbl(15.2),dbl(2.5))",	dbl(0.2));

# do the calculations and collect the results in a BAT
var actual := bat(str, dbl);
var v;
expect@batloop() { eval("v := " + $h + ";"); actual.insert($h, v); }

# calculate the difference
var diff := [-](expect, actual);

# print all expressions which resulted in too large an error
# we expect an empty table
sdiff(diff, select(diff, dbl(-(epsilon)), dbl(epsilon))).print();
