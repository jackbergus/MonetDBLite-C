module("str");

setoid(oid(20000000));
var i1 := "This is a test";
var i2 := "of the str atomic type";

(("concat an int "+1)+" with a string "+i1+(" with an dbl "+dbl(1.0))).print(); 
(("concat an int "+1) + " with a string").print(); 

length( i1 ).print();
var sres := (i1 + " ") + i2;
sres.print();
var len := length(sres);
string( sres, 10).print();
string( sres, -10).print();
string( sres, 10, len - 10 ).print();
string( sres, 10, 10 ).print();
string( sres, -10, 10 ).print();
string( sres, -10, 20 ).print();
string( sres, 10, len).print();
string( sres, len, 10).print();
string( sres, -(len), 10).print(); 
string( sres, -(len + 5), 10).print(); 
chrAt( sres, 5 ).print();
chrAt( sres, -3).print();
chrAt( sres, len + 20).print();
chrAt( sres, len).print();
chrAt( sres, len - 1).print();
chrAt( sres, 0).print();
startsWith( i2, "of the" ).print();
startsWith( i2, i2 ).print();
startsWith( i2, "k" ).print();
endsWith( i2, "type" ).print();
endsWith( i2, i2 ).print();
endsWith( i2, "k" ).print();
toLower( i1 ).print();
toUpper( i1 ).print();
search( "Hello this is a test for search", 'a' ).print();
r_search( "Hello this is a test for search", 'a' ).print();
search( "Hello this is a test for search", "ar" ).print();
r_search( "Hello this is a test for search", "ar" ).print();
search( "Hello this is a test for search", "is" ).print();
r_search( "Hello this is a test for search", "is" ).print();
search( "Hello this is a test for search", "Hello" ).print();
r_search( "Hello this is a test for search", "Hello" ).print();
search( "Hello this is a test for search", "arch" ).print();
r_search( "Hello this is a test for search", "arch" ).print();
search( "Hello this is a test for search", "xxx" ).print();
r_search( "Hello this is a test for search", "yyy" ).print();


trim("   f ").print();
trim("abc").print();
trim("   x").print();
trim("x   ").print();
trim("").print();
trim(str(nil)).print();

substitute("A.B.C",".","\\.",false).print();
substitute("A.B.C",".","\\.",true).print();

translate("bar","abc","ABC").print();
translate("--aaa--","abc-","ABC").print();
translate("abcdabc","abc","AB").print();
translate(str(nil),"abc","ABC").print();
translate("bar",str(nil),"ABC").print();
translate("bar","abc",str(nil)).print();
translate("","abc","ABC").print();
translate("abcdabc","","AB").print();
translate("abcdabc","abc","").print();
translate("abcdabc","abc","\303\244B").print();

#unicode tests
var i := 0;
while((i :+= 1) < 65535) {
  var t := unicode(i) + "je";
  var s := "test" + t;
  var u := s + " ";
  var v := " " + s;
  if (s.chrAt(3) != 't') printf("bug1 in chrAt at u%04x (=u%04x)\n", i, int(s.chrAt(i)));
  if (s.chrAt(5) != 'j') printf("bug2 in chrAt at u%04x (=u%04x)\n", i, int(s.chrAt(i)));
  if (i < 128) {
    if (isnil(s.chrAt(4))) {
      printf("char u%04x is nil\n", i);
    } else if (s.chrAt(4) != chr(i)) {
      printf("bug3 in chrAt at u%04x (=u%04x)\n", i, int(s.chrAt(4)));
    }
  } else {
    if (not(isnil(s.chrAt(4)))) printf("bug4 in chrAt at u%04x (=u%04x)\n", i, int(s.chrAt(i)));
    if (s.search('j') != 5) printf("bug in s.searchChr at u%04x (=%d)\n", i, s.search('j'));
    if (s.r_search('t') != 3) printf("bug in s.r_searchChr at u%04x (=%d)\n", i, s.r_search('t'));
  }
  if (s.unicodeAt(4) != i) printf("bug in unicodeAt at u%04x (=u%04x)\n", i, s.unicodeAt(4));
  if (s.length() != 7) printf("bug in length at u%04x (=%d)\n", i, s.length());
  if (s.toUpper().toLower() != s.toLower()) printf("nonreversible toUpper/toLower at u%04x\n", i);
  if (s.toLower().toUpper() != s.toUpper()) printf("nonreversible toLower/toUpper at u%04x\n", i);
  if (s.search(t) != 4) printf("bug1 in s.search at u%04x (=%d)\n", i, s.search(t));
  if (s.search("je") != 5) printf("bug2 in s.search at u%04x (=%d)\n", i, s.search("je"));
  if (s.r_search(t) != 4) printf("bug1 in s.r_search at u%04x (=%d)\n", i, s.r_search(t));
  if (s.r_search("je") != 5) printf("bug2 in s.r_search at u%04x (=%d)\n", i, s.r_search("je"));
  if (s.string(4) != t) printf("bug1 in stringtail at u%04x (=%s)\n", i, s.string(4));
  if (s.string(5) != "je") printf("bug2 in stringtail at u%04x (=%s)\n", i, s.string(5));
  if (s.string(4,3) != t) printf("bug1 in substring at u%04x (=%s)\n", i, s.string(4,2));
  if (s.string(5,2) != "je") printf("bug2 in substring at u%04x (=%s)\n", i, s.string(5,2));
  if (v.ltrim() != s) printf("bug in ltrim at u%04x (=%s)\n", i, u.ltrim());
  if (u.rtrim() != s) printf("bug in rtrim at u%04x (=%s)\n", i, v.ltrim());
  if (not(startsWith(u,s))) printf("bug in startsWith at u%04x\n", i);
  if (not(endsWith(v,s))) printf("bug in endsWith at u%04x\n", i);
}

quit();
