setoid(oid(2000000));
# This sequence is conflict free
#load(k10_unique1); load(k10_unique2);
var k10_unique1 := bat("k10_unique1");
var k10_unique2 := bat("k10_unique2");
qtrace(1);
var t1:= k10_unique1.copy();
var t2:= k10_unique1.copy();
var t3:= k10_unique1.copy();
var t4:= k10_unique1.copy();
var t5:= k10_unique1.copy();
var s1:= k10_unique2.copy();
var s2:= k10_unique2.copy();
var s3:= k10_unique2.copy();
var s4:= k10_unique2.copy();
var s5:= k10_unique2.copy();
printf("#~BeginVariableOutput~#\n"); cpu().print(); printf("#~EndVariableOutput~#\n");
join(t1,s1.reverse()).count().print();
join(t2,s2.reverse()).count().print();
join(t3,s3.reverse()).count().print();
join(t4,s4.reverse()).count().print();
join(t5,s5.reverse()).count().print();
printf("#~BeginVariableOutput~#\n"); cpu().print(); printf("#~EndVariableOutput~#\n");
var i1,i2,i3,i4,i5;
printf("#~BeginVariableOutput~#\n"); qstat(); printf("#~EndVariableOutput~#\n");
qtrace(0);qtrace(1);
threadcnt(4);printf("#~BeginVariableOutput~#\n"); cpu().print(); printf("#~EndVariableOutput~#\n");
{|	
	i1:=join(t1,s1.reverse()).count();
	i2:=join(t2,s2.reverse()).count();
	i3:=join(t3,s3.reverse()).count();
	i4:=join(t4,s4.reverse()).count();
	i5:=join(t5,s5.reverse()).count();
|}
printf("#~BeginVariableOutput~#\n"); qstat(); printf("#~EndVariableOutput~#\n");
qtrace(0);
print(i1);
print(i2);
print(i3);
print(i4);
print(i5);
print("done parallel");
"pseudo_thread_name".print();
printf("#~BeginVariableOutput~#\n"); view_gdk_thread().print(); printf("#~EndVariableOutput~#\n");
printf("#~BeginVariableOutput~#\n"); cpu().print(); printf("#~EndVariableOutput~#\n");
quit();
quit();
