stdout of test 'test_05` in directory 'tests/suite_01` itself:

#> Mtest:	milS test_05 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_01 -single test_05.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:test_05.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
setoid(oid(20000000));
# escape sequences
# first some basics, escaped characters are normalized

print("got single quote \' .");	# remove superfluous escapes
[ "got single quote ' ." ]
print("got single quote ' without escape");
[ "got single quote ' without escape" ]
print("got tab \t and single newline \n .");
[ "got tab \t and single newline \n ." ]
print("problem signalled before \\\"");
[ "problem signalled before \\\"" ]

var t0:= "got single quote \' .";	t0.print();
[ "got single quote ' ." ]
var t1:= "got single quote ' without escape";	t1.print();
[ "got single quote ' without escape" ]
var t2:= "got tab \t and single newline \n ."; t2.print();
[ "got tab \t and single newline \n ." ]
var t3:= "problem signalled before \\\""; t3.print();
[ "problem signalled before \\\"" ]

# character constants
var c0:= "\n"; c0.print();
[ "\n" ]
var c1:= "\'"; c1.print();
[ "'" ]
var c2:= "\\"; c2.print();
[ "\\" ]

var s:=new(int,str,100);
s.insert(2," single quote \' got it");
s.insert(4," backslash  \\ ");
s.insert(3," single quote ' ");
s.print();
#-----------------------------------------#
# BAT:	  tmp_25			  #
# (int)	  (str)				  #
#-----------------------------------------#
[ 2,	  " single quote ' got it"	  ]
[ 4,	  " backslash  \\ "		  ]
[ 3,	  " single quote ' "		  ]

# Monet printf should behave as in C
printf("got single quote \' .\n"); # remove superfluous escapes
got single quote ' .
printf("got single quote ' without escape\n");
got single quote ' without escape
printf("got tab \t and newline \n .\n");
got tab 	 and newline 
 .
printf("problem signalled before \\\"\n");
problem signalled before \"
quit();

# 17:08:56 >  
# 17:08:56 >  Done.
# 17:08:56 >  

