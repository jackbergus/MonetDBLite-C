stdout of test 'no.011` in directory 'tests/BugReports` itself:


# 22:20:28 >  
# 22:20:28 >  Mtimeout -timeout 60 Mserver "--config=/ufs/niels/data/monet/Linux/etc/monet.conf" --debug=10 --set "monet_mod_path=/ufs/niels/data/monet/Linux/lib/MonetDB" --dbfarm "/ufs/niels/data/monet/Linux/var/dbfarm" --set monet_prompt= --dbname=Tests_tests_BugReports  < no.011.milS
# 22:20:28 >  

!WARNING: GDKlockHome: ignoring empty or invalid .gdk_lock.
!WARNING: BBPdir: initializing BBP.
# MonetDB Server v4.20.1
# based on GDK   v1.20.1
# Copyright (c) 1993-2007, CWI. All rights reserved.
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs; dynamically linked.
# Visit http://monetdb.cwi.nl/ for further information.
# >Number:         11
# >Category:       Mserver
# >Synopsis:       batloop operator on new(int, nil) hangs...
# >Confidential:   no
# >Severity:       serious
# >Priority:       low
# >Responsible:    boncz
# >State:          closed
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Mon Jul 14 17:30:01 1997
# >Originator:     jonas
# >Organization:
# >Release:        970101
# >Environment:
# 3.06 hacked
# >Description:
# The following hangs the Mserver:
# 
# f := new(int, nil);
# f.insert(1,10);
# f.insert(2,20);
# f.insert(3,30);
# f.print;
# f@batloop()  { $head.print; $tail.print; }

var f := new(int, 0);
f.insert(1,10);
!ERROR: interpret: no matching MIL operator to 'insert(BAT[int,void], int, int)'.
!MAYBE YOU MEAN:
!	insert(BAT[any::1,any::2], BAT[any::1,any::2]) : BAT[any::1,any::2]
!	insert(BAT[any::1,any::2], any::1, any::2) : BAT[any::1,any::2]
!	insert(str, int, int, str) : str
f.insert(2,20);
!ERROR: interpret: no matching MIL operator to 'insert(BAT[int,void], int, int)'.
!MAYBE YOU MEAN:
!	insert(BAT[any::1,any::2], BAT[any::1,any::2]) : BAT[any::1,any::2]
!	insert(BAT[any::1,any::2], any::1, any::2) : BAT[any::1,any::2]
!	insert(str, int, int, str) : str
f.insert(3,30);
!ERROR: interpret: no matching MIL operator to 'insert(BAT[int,void], int, int)'.
!MAYBE YOU MEAN:
!	insert(BAT[any::1,any::2], BAT[any::1,any::2]) : BAT[any::1,any::2]
!	insert(BAT[any::1,any::2], any::1, any::2) : BAT[any::1,any::2]
!	insert(str, int, int, str) : str
f.print();
#-----------------#
# BAT:	  tmp_27  #
# (int)	  (void)  #
#-----------------#
f@batloop()  { $head.print(); $tail.print(); }
var h := new(int, void);
h.insert(1,void(10));
h.insert(2,void(20));
h.insert(3,void(30));
h.print();
#-----------------#
# BAT:	  tmp_26  #
# (int)	  (void)  #
#-----------------#
[ 1,	  nil	  ]
[ 2,	  nil	  ]
[ 3,	  nil	  ]
h@batloop()  { $head.print(); $tail.print(); }
[ 1 ]
[ nil ]
[ 2 ]
[ nil ]
[ 3 ]
[ nil ]
var k := new(int, void);
k.insert(1,void(nil));
k.insert(2,void(nil));
k.insert(3,void(nil));
k.print();
#-----------------#
# BAT:	  tmp_28  #
# (int)	  (void)  #
#-----------------#
[ 1,	  nil	  ]
[ 2,	  nil	  ]
[ 3,	  nil	  ]
k@batloop()  { $head.print(); $tail.print(); }
[ 1 ]
[ nil ]
[ 2 ]
[ nil ]
[ 3 ]
[ nil ]
var g := new(int, int);
g.insert(1,10);
g.insert(2,20);
g.insert(3,30);
g.print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  10	  ]
[ 2,	  20	  ]
[ 3,	  30	  ]
g@batloop()  { $head.print(); $tail.print(); }
[ 1 ]
[ 10 ]
[ 2 ]
[ 20 ]
[ 3 ]
[ 30 ]
quit();

# 22:20:28 >  
# 22:20:28 >  Done.
# 22:20:28 >  

