stdout of test 'tst_mmap` in directory 'tests/by_Peter` itself:

#> Mtest:	milM tst_mmap milM
#> Mtest:	Mtimeout -timeout 543 Mserver -modulesilent -yaccsilent -d8 -db tests_by_Peter tst_mmap.milM
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for SunOS5.7/32bit on Wed Jun  7 07:15:00 MET DST 2000.
#script:tst_mmap.milM

# 15:14:02 >  
# 15:14:02 >  Mtimeout -timeout 60 Mserver "--config=/ufs/niels/data/rc/Linux-i686/etc/monet.conf" --debug=10 --set "monet_mod_path=/ufs/niels/data/rc/Linux-i686/lib/MonetDB" --set "gdk_dbfarm=/ufs/niels/data/rc/Linux-i686/var/MonetDB/dbfarm" --set "sql_logdir=/ufs/niels/data/rc/Linux-i686/var/MonetDB/log" --set mapi_port=47758 --set sql_port=50013 --set monet_prompt= --trace --dbname=mTests_tests_by_Peter  < tst_mmap.milM
# 15:14:02 >  

# Monet Database Server V4.3.16_rc05
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# test memory map of string heap under append
var b := 20000;
#BIG := new(void,int,50000000); # claim 200MB
var d := densebat(wrd(b)).[int]().[+](1);

{
 new(void,str,200000).seqbase(0@0).access(BAT_APPEND).rename("aa").persists(true);
 unload("aa");
}

var i := 1;
while(i < 10) { 
 bat("aa").info().reverse().select("theap.storage").reverse().print();
 var e := [str]([+](d,b));
 #e := [str]([/](d,10000));
 print(b :+= 20000); 
 bat("aa").insert(e);
 bat("aa").mmap(1,1,1,1);
 unload("aa");
 i :+= 1;
}
#-------------------------------------------------#
# t			h			  # name
# str			str			  # type
#-----------------------------------------#
[ "theap.storage",	  "malloced"	  ]
[ 40000 ]
#-------------------------------------------------#
# t			tmp_32			  # name
# str			str			  # type
#-------------------------------------------------#
[ "theap.storage",	  "memory mapped"	  ]
[ 60000 ]
#-------------------------------------------------#
# BAT:			  tmp_31		  #
# (str)			  (str)			  #
#-------------------------------------------------#
[ "theap.storage",	  "memory mapped"	  ]
[ 80000 ]

#-------------------------------------------------#
# BAT:			  tmp_31		  #
# (str)			  (str)			  #
#-------------------------------------------------#
[ "theap.storage",	  "memory mapped"	  ]
[ 100000 ]
#-------------------------------------------------#
# BAT:			  tmp_31		  #
# (str)			  (str)			  #
#-------------------------------------------------#
[ "theap.storage",	  "memory mapped"	  ]
[ 120000 ]
#-------------------------------------------------#
# BAT:			  tmp_31		  #
# (str)			  (str)			  #
#-------------------------------------------------#
[ "theap.storage",	  "memory mapped"	  ]
[ 140000 ]
#-------------------------------------------------#
# BAT:			  tmp_31		  #
# (str)			  (str)			  #
#-------------------------------------------------#
[ "theap.storage",	  "memory mapped"	  ]
[ 160000 ]
#-------------------------------------------------#
# BAT:			  tmp_31		  #
# (str)			  (str)			  #
#-------------------------------------------------#
[ "theap.storage",	  "memory mapped"	  ]
[ 180000 ]
#-------------------------------------------------#
# BAT:			  tmp_31		  #
# (str)			  (str)			  #
#-------------------------------------------------#
[ "theap.storage",	  "memory mapped"	  ]
[ 200000 ]

bat("aa").info().reverse().select("theap.storage").reverse().print();
#-------------------------------------------------#
# BAT:			  tmp_31		  #
# (str)			  (str)			  #
#-------------------------------------------------#
[ "theap.storage",	  "memory mapped"	  ]
bat("aa").persists(false);
commit();

quit();

# 17:07:51 >  
# 17:07:51 >  Done.
# 17:07:51 >  

