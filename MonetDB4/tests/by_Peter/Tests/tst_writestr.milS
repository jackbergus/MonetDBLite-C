# test memory map of string heap under append
vm_minsize(lng(128*1024));

var i := 0;
var b := 500000;
#BIG := new(void,int,50000000); # claim 200MB
var d := new(void,int,b).seqbase(0@0);

# temporarily disable propmask in order to make this bearable
var m := debugmask();
debugmask(2);
while(i < b) d.append(i :+= 1);
debugmask(m);

{
 new(void,str,1000000).seqbase(0@0).access(BAT_WRITE).rename("aa").persists(true);
 unload("aa");
}

commit();

i := 0;
while(true) { 
 bat("aa").info().reverse().select("theap.storage").reverse().print();
 var e := [str]([+](d,b));
 #e := [str]([/](d,10000));
 print(b :+= 500000); 
 bat("aa").insert(e);
 bat("aa").mmap(1,1,1);
 i :+= 1;
 if (i = 4) { break; }
 unload("aa");
}

{
bat("aa").persists(false);
commit();
}

quit();
