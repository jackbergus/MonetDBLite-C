stdout of test 'tst_append_readonly` in directory 'tests/by_Peter` itself:


# 10:12:42 >  
# 10:12:42 >   Mserver "--config=/ufs/sjoerd/src/MonetDB/virgin/MonetDB4/x86_64-unknown-linux-gnu/conf/MonetDB.conf" --debug=10 --set gdk_nr_threads=1 --set "monet_mod_path=/ufs/sjoerd/src/MonetDB/virgin/MonetDB4/x86_64-unknown-linux-gnu/src/modules/plain/.libs:/ufs/sjoerd/src/MonetDB/virgin/MonetDB4/x86_64-unknown-linux-gnu/src/modules/plain:/ufs/sjoerd/src/MonetDB/virgin/MonetDB4/x86_64-unknown-linux-gnu/src/modules/contrib/.libs:/ufs/sjoerd/src/MonetDB/virgin/MonetDB4/x86_64-unknown-linux-gnu/src/modules/contrib:/ufs/sjoerd/src/MonetDB/virgin/MonetDB4/x86_64-unknown-linux-gnu/src/modules/calibrator/.libs:/ufs/sjoerd/src/MonetDB/virgin/MonetDB4/x86_64-unknown-linux-gnu/src/modules/calibrator:/ufs/sjoerd/src/MonetDB/virgin/MonetDB4/x86_64-unknown-linux-gnu/src/mapi/.libs:/ufs/sjoerd/src/MonetDB/virgin/MonetDB4/x86_64-unknown-linux-gnu/src/mapi:/ufs/sjoerd/src/MonetDB/virgin/MonetDB4/scripts/tools" --set "gdk_dbfarm=/ufs/sjoerd/src/MonetDB/virgin/MonetDB4/x86_64-unknown-linux-gnu/dbfarm" --set "sql_logdir=/ufs/sjoerd/src/MonetDB/virgin/MonetDB4/x86_64-unknown-linux-gnu/sql_logs" --set "xquery_logdir=/ufs/sjoerd/src/MonetDB/virgin/MonetDB4/x86_64-unknown-linux-gnu/xquery_logs" --set mapi_open=true --set xrpc_open=true --set mapi_port=37095 --set xrpc_port=41142 --set monet_prompt= --trace  --dbname=mTests_tests_by_Peter  
# 10:12:42 >  



# MonetDB Server v4.25.0
# based on GDK   v1.25.0
# Copyright (c) 1993-2008, CWI. All rights reserved.
# Compiled for x86_64-unknown-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# Visit http://monetdb.cwi.nl/ for further information.
# reduce mem_bigsize to trigger memory mapping
#
vm_minsize(lng(128*1024)); 

# test memory map of string heap under append
var b := 20000;
#BIG := new(void,int,50000000); # claim 200MB
var d := densebat(wrd(b)).[int]().[+](1);

{
 new(void,str,200000).seqbase(0@0).access(BAT_READ).rename("aa").persists(true);
}

var i := 1;
while(i < 4) { 
 bat("aa").info().reverse().select("theap.storage").reverse().print();
 var e := [str]([+](d,b));
 #e := [str]([/](d,10000));
 print(b :+= 20000); 
 # second insert will trigger a BATmaterialize 'aa' which changes the storage
 # from STORE_MMAP to STORE_MEM (which is a bug) 
 bat("aa").access(BAT_APPEND).insert(e).access(BAT_READ);
 i :+= 1;
}
#-------------------------------------------------#
# t			h			  # name
# str			str			  # type
#-----------------------------------------#
[ "theap.storage",	  "malloced"	  ]
[ 40000 ]
#-------------------------------------------------#
# t			tmp_32			  # name
# str			str			  # type
#-------------------------------------------------#
[ "theap.storage",	  "memory mapped"	  ]
[ 60000 ]
#-----------------------------------------#
# t			h		  # name
# str			str		  # type
#-------------------------------------------------#
[ "theap.storage",	  "memory mapped"	  ]
[ 80000 ]

bat("aa").info().reverse().select("theap.storage").reverse().print();
#-----------------------------------------#
# t			h		  # name
# str			str		  # type
#-------------------------------------------------#
[ "theap.storage",	  "memory mapped"	  ]
bat("aa").persists(false);
commit();

quit();



# 09:08:43 >  
# 09:08:43 >  Done.
# 09:08:43 >  

