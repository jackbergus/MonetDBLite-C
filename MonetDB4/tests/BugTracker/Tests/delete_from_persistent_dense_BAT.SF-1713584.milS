var b;

# FAILS: committed persistent dense BAT

var cpd;
b:=new(oid,void).rename("CPD").persists(true);
cpd:=bat("CPD");
b := nil;

cpd.insert(0@0,nil);
cpd.print();
cpd.info().reverse().like("sorted").print();
cpd.info().reverse().like("dense").print();
cpd.info().reverse().like("seqbase").print();
cpd.seqbase().print();

cpd.insert(1@0,nil);
cpd.print();
cpd.info().reverse().like("sorted").print();
cpd.info().reverse().like("dense").print();
cpd.info().reverse().like("seqbase").print();
cpd.seqbase().print();

cpd.insert(2@0,nil);
cpd.print();
cpd.info().reverse().like("sorted").print();
cpd.info().reverse().like("dense").print();
cpd.info().reverse().like("seqbase").print();
cpd.seqbase().print();

commit();

cpd.print();
cpd.info().reverse().like("sorted").print();
cpd.info().reverse().like("dense").print();
cpd.info().reverse().like("seqbase").print();
cpd.seqbase().print();

cpd.delete(2@0);
cpd.print();
cpd.info().reverse().like("sorted").print();
cpd.info().reverse().like("dense").print();
cpd.info().reverse().like("seqbase").print();
cpd.seqbase().print();

cpd.persists(false);
commit();
cpd := nil;

# works: non-committed persistent dense BAT

var _pd;
b:=new(oid,void).rename("_PD").persists(true);
_pd:=bat("_PD");
b := nil;

_pd.insert(0@0,nil);
_pd.print();
_pd.info().reverse().like("sorted").print();
_pd.info().reverse().like("dense").print();
_pd.info().reverse().like("seqbase").print();
_pd.seqbase().print();

_pd.insert(1@0,nil);
_pd.print();
_pd.info().reverse().like("sorted").print();
_pd.info().reverse().like("dense").print();
_pd.info().reverse().like("seqbase").print();
_pd.seqbase().print();

_pd.insert(2@0,nil);
_pd.print();
_pd.info().reverse().like("sorted").print();
_pd.info().reverse().like("dense").print();
_pd.info().reverse().like("seqbase").print();
_pd.seqbase().print();

#commit();

_pd.print();
_pd.info().reverse().like("sorted").print();
_pd.info().reverse().like("dense").print();
_pd.info().reverse().like("seqbase").print();
_pd.seqbase().print();

_pd.delete(2@0);
_pd.print();
_pd.info().reverse().like("sorted").print();
_pd.info().reverse().like("dense").print();
_pd.info().reverse().like("seqbase").print();
_pd.seqbase().print();

_pd.persists(false);
commit();
_pd := nil;

# works: committed non-persistent dense BAT

var c_d;
b:=new(oid,void).rename("C_D"); #.persists(true);
c_d:=bat("C_D");
b := nil;

c_d.insert(0@0,nil);
c_d.print();
c_d.info().reverse().like("sorted").print();
c_d.info().reverse().like("dense").print();
c_d.info().reverse().like("seqbase").print();
c_d.seqbase().print();

c_d.insert(1@0,nil);
c_d.print();
c_d.info().reverse().like("sorted").print();
c_d.info().reverse().like("dense").print();
c_d.info().reverse().like("seqbase").print();
c_d.seqbase().print();

c_d.insert(2@0,nil);
c_d.print();
c_d.info().reverse().like("sorted").print();
c_d.info().reverse().like("dense").print();
c_d.info().reverse().like("seqbase").print();
c_d.seqbase().print();

commit();

c_d.print();
c_d.info().reverse().like("sorted").print();
c_d.info().reverse().like("dense").print();
c_d.info().reverse().like("seqbase").print();
c_d.seqbase().print();

c_d.delete(2@0);
c_d.print();
c_d.info().reverse().like("sorted").print();
c_d.info().reverse().like("dense").print();
c_d.info().reverse().like("seqbase").print();
c_d.seqbase().print();

c_d.persists(false);
commit();
c_d := nil;

# works: committed persistent non-dense BAT

var cp_;
b:=new(oid,void).rename("CP_").persists(true);
cp_:=bat("CP_");
b := nil;

cp_.insert(0@0,nil);
cp_.print();
cp_.info().reverse().like("sorted").print();
cp_.info().reverse().like("dense").print();
cp_.info().reverse().like("seqbase").print();
cp_.seqbase().print();

cp_.insert(2@0,nil);
cp_.print();
cp_.info().reverse().like("sorted").print();
cp_.info().reverse().like("dense").print();
cp_.info().reverse().like("seqbase").print();
cp_.seqbase().print();

cp_.insert(4@0,nil);
cp_.print();
cp_.info().reverse().like("sorted").print();
cp_.info().reverse().like("dense").print();
cp_.info().reverse().like("seqbase").print();
cp_.seqbase().print();

commit();

cp_.print();
cp_.info().reverse().like("sorted").print();
cp_.info().reverse().like("dense").print();
cp_.info().reverse().like("seqbase").print();
cp_.seqbase().print();

cp_.delete(4@0);
cp_.print();
cp_.info().reverse().like("sorted").print();
cp_.info().reverse().like("dense").print();
cp_.info().reverse().like("seqbase").print();
cp_.seqbase().print();

cp_.persists(false);
commit();
cp_ := nil;

quit();
