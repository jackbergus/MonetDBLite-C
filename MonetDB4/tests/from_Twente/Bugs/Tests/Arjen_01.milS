#
# This program should select the valuesA that are larger than 20 and smaller
# than 30. But, _MMjoin_8 is constructed incorrectly, maybe due to
# property-propagation.
#
# Arjen (arjen@cs.utwente.nl)
#

# Initialization:

setoid(2000@0);

var indexA  := new(void,oid);
var valuesA := new(void,int);
indexA.insert(nil,0@0);
indexA.insert(nil,1@0);
indexA.insert(nil,2@0);
indexA.insert(nil,3@0);
valuesA.insert(nil,10);
valuesA.insert(nil,20);
valuesA.insert(nil,30);
valuesA.insert(nil,40);
indexA.seqbase(0@0);
valuesA.seqbase(0@0);
indexA.print();
valuesA.print();

# Test:

var _MMoper_2 := [>=](valuesA,20);   _MMoper_2.print();
var _MMuselect_3 := uselect(_MMoper_2,true).mark(0@0);   _MMuselect_3.print();
var _MMoper_4 := [<=](valuesA,30);   _MMoper_4.print();
var _MMuselect_5 := uselect(_MMoper_4,true).mark(0@0);   _MMuselect_5.print();
var _MMsemijoin_6 := semijoin(_MMuselect_3,_MMuselect_5);   _MMsemijoin_6.print();
var _MMcastnil_7 := _MMsemijoin_6.mark(0@0);   _MMcastnil_7.print();
var _MMjoin_8 := join(indexA,_MMcastnil_7);   _MMjoin_8.print();
var _MMreverse_9 := reverse(_MMcastnil_7);   _MMreverse_9.print();
var _MMjoin_10 := join(_MMreverse_9,valuesA);   _MMjoin_10.print();

# This gives <0,10>,<1,20> instead of <0,20>,<0,30>
# The cause is that _MMjoin_8 has 0,1 instead of 1,2:

print(indexA.info().access(BAT_WRITE).delete("batBuns.base").delete("batStamp").delete("lastUsed").delete("curStamp").delete("void_cnt").delete("void_tid").sort().col_name("indexA"),
      valuesA.info().col_name("valuesA"),
      _MMoper_2.info().col_name("MMoper_2"),
      _MMuselect_3.info().col_name("MMuselect_3"),
      _MMoper_4.info().col_name("MMoper_4"),
      _MMuselect_5.info().col_name("MMuselect_5"),
      _MMsemijoin_6.info().col_name("MMsemijoin_6"),
      _MMcastnil_7.info().col_name("MMcastnil_7"),
      _MMjoin_8.info().col_name("MMjoin_8"),
      _MMreverse_9.info().col_name("MMreverse_9"),
      _MMjoin_10.info().col_name("MMjoin_10"));

quit();
