stdout of test 'test_01` in directory 'tests/suite_00` itself:


# 13:36:16 >  
# 13:36:16 >  Mtimeout -timeout 60 Mserver "--config=/var/tmp/MonetDB/_PREFIX_d_/etc/monet.conf" --debug=10 --set "monet_mod_path=/var/tmp/MonetDB/_PREFIX_d_/lib/MonetDB" --dbfarm "/var/tmp/MonetDB/_PREFIX_d_/var/dbfarm" --set monet_prompt= "/var/tmp/MonetDB/_PREFIX_d_/Tests/trace.mil" --dbname=Tests_tests_suite_00  < test_01.milS
# 13:36:16 >  

# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
setoid(oid(20000000));
#test basic functionality of the BAT library.
#focussed on strings
#it includes insertions,deletions,selections, and joins.

var b:= new(str,int);
b.insert("the",1);
b.insert("quick",2);
b.insert("brown",3);
b.insert("fox",4);
b.insert("jumps",5);
b.insert("over",6);
b.insert("lazy",7);
b.insert("dog",8);
b.insert(str(nil),9);
b.insert(".",10);
b.insert("",int(nil));
b.insert(str(nil),int(nil));
b.print();
#-------------------------#
# BAT:		  tmp_26  #
# (str)		  (int)	  #
#-------------------------#
[ "the",	  1	  ]
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "fox",	  4	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
[ ".",		  10	  ]
[ "",		  nil	  ]
[ nil,		  nil	  ]


# Testing simple retrievals
b.find("the").print();
[ 1 ]
b.find("fox").print();
[ 4 ]
b.find(str(nil)).print();
[ nil ]
# This should cause an error
b.find("cat").print();
!ERROR: CMDfind: value not found.
!ERROR: CMDfind: operation failed.
!ERROR: interpret_params: print(param 1): evaluation error.

# Can we delete them and re-insert them later on
b.delete("fox",4);
b.delete("the",1);
b.delete(".",10);
b.print();
#-------------------------#
# BAT:		  tmp_26  #
# (str)		  (int)	  #
#-------------------------#
[ "",		  nil	  ]
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ nil,		  nil	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]

b.insert("fox",4);
b.insert("the",1);
b.insert(".",10);
b.count().print();
[ 12 ]

# Lets cut out a few sections
b.select(2,4).print();
#-------------------------#
# BAT:		  tmp_25  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "fox",	  4	  ]
b.select(7,int(nil)).print();
#-----------------#
# BAT:	  tmp_25  #
# (str)	  (int)	  #
#-----------------#
[ "lazy", 7	  ]
[ "dog",  8	  ]
[ nil,	  9	  ]
[ ".",	  10	  ]
b.select(int(nil),7).print();
#-------------------------#
# BAT:		  tmp_25  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "fox",	  4	  ]
[ "the",	  1	  ]
b.select(int(nil),int(nil)).print();
#-------------------------#
# BAT:		  tmp_25  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
[ "fox",	  4	  ]
[ "the",	  1	  ]
[ ".",		  10	  ]

b.reverse().select("fox","quick").print();
#-------------------------#
# BAT:	  tmp_25	  #
# (int)	  (str)		  #
#-------------------------#
[ 2,	  "quick"	  ]
[ 5,	  "jumps"	  ]
[ 6,	  "over"	  ]
[ 7,	  "lazy"	  ]
[ 4,	  "fox"		  ]
b.reverse().select("fox",str(nil)).print();
#-------------------------#
# BAT:	  tmp_25	  #
# (int)	  (str)		  #
#-------------------------#
[ 2,	  "quick"	  ]
[ 5,	  "jumps"	  ]
[ 6,	  "over"	  ]
[ 7,	  "lazy"	  ]
[ 4,	  "fox"		  ]
[ 1,	  "the"		  ]
b.reverse().select(str(nil),"quick").print();
#-------------------------#
# BAT:	  tmp_25	  #
# (int)	  (str)		  #
#-------------------------#
[ nil,	  ""		  ]
[ 2,	  "quick"	  ]
[ 3,	  "brown"	  ]
[ 5,	  "jumps"	  ]
[ 6,	  "over"	  ]
[ 7,	  "lazy"	  ]
[ 8,	  "dog"		  ]
[ 4,	  "fox"		  ]
[ 10,	  "."		  ]
b.reverse().select(str(nil),str(nil)).print();
#-------------------------#
# BAT:	  tmp_25	  #
# (int)	  (str)		  #
#-------------------------#
[ nil,	  ""		  ]
[ 2,	  "quick"	  ]
[ 3,	  "brown"	  ]
[ 5,	  "jumps"	  ]
[ 6,	  "over"	  ]
[ 7,	  "lazy"	  ]
[ 8,	  "dog"		  ]
[ 4,	  "fox"		  ]
[ 1,	  "the"		  ]
[ 10,	  "."		  ]

# A 2-dimensional cut
var bn:=b.fragment("fox","quick",1,5);bn.print();
#-------------------------#
# BAT:		  tmp_25  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]
b.fragment("fox",str(nil),1,5).print();
#-------------------------#
# BAT:		  tmp_27  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]
[ "the",	  1	  ]
b.fragment(str(nil),"quick",1,5).print();
#-------------------------#
# BAT:		  tmp_27  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]
b.fragment(str(nil),str(nil),1,5).print();
#-------------------------#
# BAT:		  tmp_27  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]
[ "the",	  1	  ]
b.fragment("fox","quick",1,int(nil)).print();
#-------------------------#
# BAT:		  tmp_27  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "fox",	  4	  ]
b.fragment("fox","quick",int(nil),5).print();
#-------------------------#
# BAT:		  tmp_27  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]
b.fragment("fox","quick",int(nil),int(nil)).print();
#-------------------------#
# BAT:		  tmp_27  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "fox",	  4	  ]
b.fragment("fox",str(nil),int(nil),int(nil)).print();
#-------------------------#
# BAT:		  tmp_27  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "fox",	  4	  ]
[ "the",	  1	  ]
b.fragment(str(nil),"f",int(nil),int(nil)).print();
#-------------------------#
# BAT:		  tmp_27  #
# (str)		  (int)	  #
#-------------------------#
[ "",		  nil	  ]
[ "brown",	  3	  ]
[ nil,		  nil	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
[ ".",		  10	  ]
b.reverse().fragment(int(nil),int(nil),str(nil),"f").print();
#-------------------------#
# BAT:	  tmp_27	  #
# (int)	  (str)		  #
#-------------------------#
[ nil,	  ""		  ]
[ 3,	  "brown"	  ]
[ nil,	  nil		  ]
[ 8,	  "dog"		  ]
[ 9,	  nil		  ]
[ 10,	  "."		  ]

var b1:= b.join(bn.reverse());
b1.print();
#---------------------------------#
# BAT:		  tmp_27	  #
# (str)		  (str)		  #
#---------------------------------#
[ "quick",	  "quick"	  ]
[ "jumps",	  "jumps"	  ]
[ "fox",	  "fox"		  ]

var b2:= b.semijoin(b1.reverse());
b2.print();
#-------------------------#
# BAT:		  tmp_25  #
# (str)		  (int)	  #
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]

# testing the like command
b.reverse().like("ox").print();
#-----------------#
# BAT:	  tmp_27  #
# (int)	  (str)	  #
#-----------------#
[ 4,	  "fox"	  ]
b.reverse().like("fo").print();
#-----------------#
# BAT:	  tmp_27  #
# (int)	  (str)	  #
#-----------------#
[ 4,	  "fox"	  ]
b.reverse().like("fox").print();
#-----------------#
# BAT:	  tmp_27  #
# (int)	  (str)	  #
#-----------------#
[ 4,	  "fox"	  ]
b.reverse().like(" fox").print();
#-----------------#
# BAT:	  tmp_27  #
# (int)	  (str)	  #
#-----------------#
quit();

# 13:36:16 >  
# 13:36:16 >  Done.
# 13:36:16 >  

