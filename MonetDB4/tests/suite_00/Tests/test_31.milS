setoid(oid(20000000));
## Performance test for closure and traversals
module("oo7");
module("alarm");

proc fill(int size) : BAT[int,int] {
    var c:= new(int,int);
    var i := 1;
    while(i < size) {
      insert(c,i,i:=i+1);
    }
    insert(c,i,1);
    return c;
}
    
var c := closure(fill(20)); 
count(c).print();
var z:= time();
var clo:= closure(c);
printf("#~BeginVariableOutput~#\nclosure in %d ms cnt %d\n#~EndVariableOutput~#\n",time()-z,count(clo));
## testing traversal on directed acyclic graph
## produces the end-points only
var d:= new(int,int);
d.insert(1,1);
d.subgraph(c).print();
## The alternative is to extract a subgraph as a set
d.clear();
d.insert(2,2);
var z:= time();
var e:=d.subgraph(c); printf("#~BeginVariableOutput~#\nsubgraph in %d ms on %d\n#~EndVariableOutput~#\n",time()-z,count(e));
d.clear();
d.insert(2,2);
d.insert(3,3);
z:= time(); 
e:=d.subgraph(c); printf("#~BeginVariableOutput~#\nsubgraph in %d ms cnt %d\n#~EndVariableOutput~#\n",time()-z,count(e));
d.clear();
d.insert(2,2);
d.insert(3,3);
d.insert(4,4);
d.insert(5,5);
z:= time(); 
e:=d.subgraph(c); printf("#~BeginVariableOutput~#\nsubgraph in %d ms cnt %d\n#~EndVariableOutput~#\n",time()-z,count(e));

## LARGE TEST
printf("#~BeginVariableOutput~#\n"); cpu().print(); printf("#~EndVariableOutput~#\n");
d.clear();
d.insert(2,2);
z:= time();
e:=d.subgraph(clo); 
printf("#~BeginVariableOutput~#\nsubgraph in %d ms on %d\n#~EndVariableOutput~#\n",time()-z,count(e));
d.clear();
## d.insert(2,2);
d.insert(3,3);
z:= time(); 
e:=d.subgraph(clo); 
printf("#~BeginVariableOutput~#\nsubgraph in %d ms cnt %d\n#~EndVariableOutput~#\n",time()-z,count(e));
d.clear();
##d.insert(2,2);
##d.insert(3,3);
d.insert(4,4);
##d.insert(5,5);
z:= time(); 
e:=d.subgraph(clo); printf("#~BeginVariableOutput~#\nsubgraph in %d ms cnt %d\n#~EndVariableOutput~#\n",time()-z,count(e));

printf("#~BeginVariableOutput~#\n"); cpu().print(); printf("#~EndVariableOutput~#\n");
quit();
