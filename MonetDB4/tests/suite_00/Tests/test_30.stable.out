stdout of test 'test_30` in directory 'tests/suite_00` itself:

#> Mtest (20:57:24):	milS test_30 milS
#> Mtest (20:57:24):	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_00 -single test_30.milS
# Monet Database Server V4.2
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
#script:test_30.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
setoid(oid(20000000));
## testing transitive closure on cyclic graph;
module("oo7");
module("alarm");

var c:= new(int,int);
insert(c,1,2);
insert(c,2,3);
insert(c,2,7);
insert(c,3,4);
insert(c,4,5);
insert(c,5,1);
count(c).print();
[ 6 ]
var d:= closure(c);
count(d).print();
[ 30 ]
print(d);
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  2	  ]
[ 2,	  3	  ]
[ 2,	  7	  ]
[ 3,	  4	  ]
[ 4,	  5	  ]
[ 5,	  1	  ]
[ 5,	  2	  ]
[ 1,	  3	  ]
[ 1,	  7	  ]
[ 2,	  4	  ]
[ 3,	  5	  ]
[ 4,	  1	  ]
[ 5,	  7	  ]
[ 5,	  3	  ]
[ 1,	  4	  ]
[ 2,	  5	  ]
[ 3,	  1	  ]
[ 4,	  2	  ]
[ 3,	  2	  ]
[ 4,	  3	  ]
[ 4,	  7	  ]
[ 5,	  4	  ]
[ 1,	  5	  ]
[ 2,	  1	  ]
[ 5,	  5	  ]
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 3,	  7	  ]
[ 3,	  3	  ]
[ 4,	  4	  ]
## testing traversal on directed acyclic graph
## produces the end-points only
var c:= new(int,int);
insert(c,1,2);
insert(c,2,3);
insert(c,2,7);
insert(c,3,4);
insert(c,4,5);
insert(c,3,5);
count(c).print();
[ 6 ]
var d:= new(int,int);
d.insert(1,1);
d.traverse(c).print();
#-----------------#
# BAT:	  tmp_26  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  7	  ]
[ 1,	  5	  ]
d.clear();
d.insert(2,3);
d.traverse(c).print();
#-----------------#
# BAT:	  tmp_27  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  5	  ]
## The alternative is to extract a subgraph
d.clear();
d.insert(2,2);
printf("#~BeginVariableOutput~#\n"); time().print(); var z:=d.subgraph(c); time().print(); printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
[ 247 ]
[ 247 ]
#~EndVariableOutput~#
z.print();
#-----------------#
# BAT:	  tmp_27  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  7	  ]
[ 2,	  3	  ]
[ 3,	  5	  ]
[ 3,	  4	  ]
[ 4,	  5	  ]
d.clear();
d.insert(2,2);
d.insert(3,3);
printf("#~BeginVariableOutput~#\n"); time().print(); z:=d.subgraph(c); time().print(); printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
[ 247 ]
[ 247 ]
#~EndVariableOutput~#
z.print();
#-----------------#
# BAT:	  tmp_28  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  7	  ]
[ 2,	  3	  ]
[ 3,	  5	  ]
[ 3,	  4	  ]
[ 4,	  5	  ]
quit();

# 17:08:47 >  
# 17:08:47 >  Done.
# 17:08:47 >  

