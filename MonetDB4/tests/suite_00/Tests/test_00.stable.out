stdout of test 'test_00` in directory 'tests/suite_00` itself:


# 15:33:18 >  
# 15:33:18 >  Mtimeout -timeout 60 Mserver "--config=/ufs/boncz/MonetDB/linux/etc/monet.conf" --debug=10 --set "monet_mod_path=/ufs/boncz/MonetDB/linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/boncz/MonetDB/linux/var/MonetDB/dbfarm" --set "sql_logdir=/ufs/boncz/MonetDB/linux/var/MonetDB/log" --set mapi_port=55437 --set sql_port=50559 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  < test_00.milS
# 15:33:18 >  

# Monet Database Server V4.3.13
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
setoid(oid(20000000));
#test basic functionality of the BAT library.
#focussed on integers
#it includes insertions,deletions,selections, and joins.

var b:= new(int,int);
#b.roles("head","tail"); roles was removed from the kernel ops
printf("#~BeginVariableOutput~#\n"); b.info().print(); printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
#-----------------------------------------#
# h			t		  # name
# str			str		  # type
#-----------------------------------------#
[ "version",		  "20749"	  ]
[ "batId",		  "tmp_33"	  ]
[ "batCacheid",		  "27"		  ]
[ "batParentid",		  "0"		  ]
[ "batSharecnt",		  "0"		  ]
[ "head",			  "int"		  ]
[ "tail",			  "int"		  ]
[ "batPersistence",		  "transient"	  ]
[ "batRestricted",		  "updatable"	  ]
[ "batRefcnt",			  "1"		  ]
[ "batLRefcnt",			  "1"		  ]
[ "batDirty",			  "dirty"	  ]
[ "batSet",			  "0"		  ]
[ "void_tid",			  "0"		  ]
[ "void_cnt",			  "0"		  ]
[ "hsorted",			  "1"		  ]
[ "hident",			  "h"		  ]
[ "hdense",			  "0"		  ]
[ "hseqbase",			  "0@0"		  ]
[ "hkey",			  "0"		  ]
[ "hloc",			  "0"		  ]
[ "hvarsized",			  "0"		  ]
[ "halign",			  "20000000"	  ]
[ "hnosorted",			  "0"		  ]
[ "hnosorted_rev",		  "0"		  ]
[ "hnodense",			  "0"		  ]
[ "hnokey[0]",			  "0"		  ]
[ "hnokey[1]",			  "0"		  ]
[ "tident",			  "t"		  ]
[ "tdense",			  "0"		  ]
[ "tseqbase",			  "0@0"		  ]
[ "tsorted",			  "1"		  ]
[ "tkey",			  "0"		  ]
[ "tloc",			  "4"		  ]
[ "tvarsized",			  "0"		  ]
[ "talign",			  "20000001"	  ]
[ "tnosorted",			  "0"		  ]
[ "tnosorted_rev",		  "0"		  ]
[ "tnodense",			  "0"		  ]
[ "tnokey[0]",			  "0"		  ]
[ "tnokey[1]",			  "0"		  ]
[ "batInserted",	  "0"		  ]
[ "batDeleted",			  "0"		  ]
[ "batFirst",		  "0"		  ]
[ "top",		  "0"		  ]
[ "batStamp",		  "-162"	  ]
[ "lastUsed",		  "4888"	  ]
[ "curStamp",		  "163"		  ]
[ "batCopiedtodisk",		  "0"		  ]
[ "batDirtydesc",		  "clean"	  ]
[ "batDirtybuns",		  "clean"	  ]
[ "batBuns.free",	  "0"		  ]
[ "batBuns.size",	  "400"		  ]
[ "batBuns.maxsize",	  "400"		  ]
[ "batBuns.storage",		  "malloced"	  ]
[ "batBuns.filename",	  "33.buns"	  ]
[ "hheapdirty",			  "clean"	  ]
[ "theapdirty",			  "clean"	  ]
#~EndVariableOutput~#

b.insert(1,15);
b.insert(2,4);
b.insert(3,int(nil));
b.insert(4,16);
b.insert(5,25);
b.insert(6,36);
b.insert(7,49);
b.insert(8,64);
b.insert(9,int(nil));
b.insert(int(nil),int(nil));
b.insert(int(nil),81);
b.print();
#-----------------#
# BAT:	  tmp_28  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]


# Testing simple retrievals
b.find(1).print();
[ 15 ]
b.find(4).print();
[ 16 ]
b.find(int(nil)).print();
[ 81 ]
# This should cause an error
b.find(10).print();
!ERROR: CMDfind: value not found.
!ERROR: CMDfind: operation failed.
!ERROR: interpret_params: print(param 1): evaluation error.

# Can we delete them and re-insert them later on
b.delete(4,16);
b.delete(1,15);
b.delete(int(nil),81);
b.print();
#-----------------#
# BAT:	  tmp_28  #
# (int)	  (int)	  #
#-----------------#
[ nil,	  nil	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 9,	  nil	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]

b.insert(4,16);
b.insert(int(nil),81);
b.insert(1,15);
b.count().print();
[ 11 ]
b.print();
#-----------------#
# BAT:	  tmp_28  #
# (int)	  (int)	  #
#-----------------#
[ nil,	  nil	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 9,	  nil	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
[ nil,	  81	  ]
[ 1,	  15	  ]

# Lets cut out a few sections
b.select(25,64).print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
b.select(4,15).print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 1,	  15	  ]
b.select(4,4).print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
# This should cause an error
b.select(4,3).print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
b.select(81,int(nil)).print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ nil,	  81	  ]
b.select(int(nil),int(nil)).print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
[ nil,	  81	  ]
[ 1,	  15	  ]

# A 2-dimensional cut
var bn:=b.fragment(1,5,4,15);bn.print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 1,	  15	  ]
b.fragment(1,5,16,int(nil)).print();
#-----------------#
# BAT:	  tmp_30  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  25	  ]
[ 4,	  16	  ]
b.fragment(1,int(nil),16,int(nil)).print();
#-----------------#
# BAT:	  tmp_30  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
b.fragment(int(nil),int(nil),16,int(nil)).print();
#-----------------#
# BAT:	  tmp_30  #
# (int)	  (int)	  #
#-----------------#
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
[ nil,	  81	  ]

bn:= b.join(bn.reverse());
bn.print();
#-----------------#
# BAT:	  tmp_30  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  2	  ]
[ 1,	  1	  ]

bn:= b.semijoin(bn.reverse());
bn.print();
#-----------------#
# BAT:	  tmp_29  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 1,	  15	  ]

# band join experiment
var c:= b.copy();
bandjoin(b,c,4,4).print();
#-----------------#
# BAT:	  tmp_31  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  4	  ]
[ 2,	  nil	  ]
[ 2,	  25	  ]
[ 2,	  36	  ]
[ 2,	  49	  ]
[ 2,	  64	  ]
[ 2,	  16	  ]
[ 2,	  15	  ]

#and theta joins?
b.thetajoin(c,LT,lng(nil)).print();
#-----------------#
# BAT:	  tmp_31  #
# (int)	  (int)	  #
#-----------------#
[ 2,	  nil	  ]
[ 2,	  25	  ]
[ 2,	  36	  ]
[ 2,	  49	  ]
[ 2,	  64	  ]
quit();

# 15:33:19 >  
# 15:33:19 >  Done.
# 15:33:19 >  

