setoid(oid(20000000));
# For distributed processing it should be possible
# split and re-distribute BATs.
# This is supported by hashsplit, rangesplit,  and groupby operations.

PROC groupby(bat b, bat  rng) : bat {
 VAR r := rng.reverse().number().reverse();
 VAR l := rng.number().reverse();
 RETURN [select](l.project(b),l,r);
}


var b:= new(int,int);
b.insert(1,15);
b.insert(2,4);
b.insert(3,int(nil));
b.insert(4,16);
b.insert(5,25);
b.insert(6,36);
b.insert(7,49);
b.insert(8,64);
b.insert(9,int(nil));
b.insert(int(nil),int(nil));
b.insert(int(nil),81);
b.rename("b");

var rng:= new(int,int);
rng.insert(1,1);
rng.insert(1,9);
rng.insert(int(nil),9);
rng.insert(1,int(nil));
rng.insert(9,9);
rng.insert(3,5);

var bb := b.groupby(rng);
bb.print();
bb@batloop() { $t.print(); }

# other values;
var x:= new(int,chr);
x.insert(1,'a');
x.insert(2,'a');
x.insert(3,'b');
x.insert(4,'b');
x.insert(5,'b');
x.insert(6,'b');
x.insert(7,'c');
x.insert(8,'c');

var t := new(chr,chr);
t.insert('a','b');
t.insert('c','c');
t.insert('b','b');
var xx:= x.groupby(t);
xx.print();
xx@batloop() { $t.print(); }

# other values;
x:= new(int,str);
x.insert(1,"a");
x.insert(2,"a");
x.insert(3,"b");
x.insert(4,"b");
x.insert(5,"b");
x.insert(6,"b");
x.insert(7,"c");
x.insert(8,"c");

t:= new(str,str);
t.rename("t");
t.insert("a","b");
t.insert("c","c");
t.insert("b","b");
xx:= x.groupby(t);
xx.print();
xx@batloop() { $t.print(); }
quit();
