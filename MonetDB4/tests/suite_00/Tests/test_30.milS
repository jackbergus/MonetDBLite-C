setoid(oid(20000000));
## testing transitive closure on cyclic graph;
module("oo7");
module("alarm");

var c:= new(int,int);
insert(c,1,2);
insert(c,2,3);
insert(c,2,7);
insert(c,3,4);
insert(c,4,5);
insert(c,5,1);
count(c).print();
var d:= closure(c);
count(d).print();
print(d);
## testing traversal on directed acyclic graph
## produces the end-points only
var c:= new(int,int);
insert(c,1,2);
insert(c,2,3);
insert(c,2,7);
insert(c,3,4);
insert(c,4,5);
insert(c,3,5);
count(c).print();
var d:= new(int,int);
d.insert(1,1);
d.traverse(c).print();
d.clear();
d.insert(2,3);
d.traverse(c).print();
## The alternative is to extract a subgraph
d.clear();
d.insert(2,2);
printf("#~BeginVariableOutput~#\n"); time().print(); var z:=d.subgraph(c); time().print(); printf("#~EndVariableOutput~#\n");
z.print();
d.clear();
d.insert(2,2);
d.insert(3,3);
printf("#~BeginVariableOutput~#\n"); time().print(); z:=d.subgraph(c); time().print(); printf("#~EndVariableOutput~#\n");
z.print();
quit();
