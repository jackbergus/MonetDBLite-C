stdout of test 'test_05` in directory 'tests/suite_00` itself:

#> Mtest (21:36:24):	milS test_05 milS
#> Mtest (21:36:24):	Mtimeout -timeout 600 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_00 -single test_05.milS
# Monet Database Server V4.2
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit.
#script:test_05.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
setoid(oid(20000000));
#test basic functionality of the BAT library.
#focussed on float
#it includes insertions,deletions,selections, and joins.

print(3.147);
[ 3.14700007 ]

var b:= new(flt,flt);
b.insert(1.2, 15.6);
b.insert(2.3, 4.5);
b.insert(3.0, flt(nil));
b.insert(4.5, 16.7);
b.insert(5.6, 25.6);
b.insert(6.6, 36.7);
b.insert(7.8, 49.0);
b.insert(8.9, 64.5);
b.insert(9.0, flt(nil));
b.insert(flt(nil),flt(nil));
b.insert(flt(nil),81.2);
b.print();
#---------------------------------#
# h		tmp_29		  # name
# flt		flt		  # type
#---------------------------------#
[ 1.20000005,	  15.6000004	  ]
[ 2.29999995,	  4.5		  ]
[ 3,	  nil	  ]
[ 4.5,		  16.7000008	  ]
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,		  81.1999969	  ]


# Testing simple retrievals
b.find(1.2).print();
[ 15.6000004 ]
b.find(4.5).print();
[ 16.7000008 ]
b.find(flt(nil)).print();
[ 81.1999969 ]
# This should cause an error
b.find(10.1).print();
!ERROR: CMDfind: value not found.
!ERROR: CMDfind: operation failed.
!ERROR: interpret_params: print(param 1): evaluation error.

# Can we delete them and re-insert them later on
b.delete(4.5, 16.7);
b.delete(1.2, 15.6);
b.delete(flt(nil),81.2);
b.print();
#---------------------------------#
# h		tmp_29		  # name
# flt		flt		  # type
#---------------------------------#
[ nil,	  nil	  ]
[ 2.29999995,	  4.5		  ]
[ 3,	  nil	  ]
[ 9,	  nil	  ]
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]

b.insert(4.5, 16.7);
b.insert(1.2, 15.6);
b.insert(flt(nil),81.2);
b.count().print();
[ 11 ]

# Lets cut out a few sections
b.select(25.6,64.5).print();
#---------------------------------#
# h		tmp_30		  # name
# flt		flt		  # type
#---------------------------------#
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
b.select(4.5,15.6).print();
#---------------------------------#
# h		tmp_30		  # name
# flt		flt		  # type
#---------------------------------#
[ 2.29999995,	  4.5		  ]
[ 1.20000005,	  15.6000004	  ]
b.select(4.5,4.5).print();
#-------------------------#
# h		tmp_30	  # name
# flt		flt	  # type
#-------------------------#
[ 2.29999995,	  4.5	  ]
# This should cause an error
b.select(4.5,3.4).print();
#-----------------#
# BAT:	  tmp_23  #
# (flt)	  (flt)	  #
#-----------------#
b.select(81.2,flt(nil)).print();
#-------------------------#
# h	tmp_30		  # name
# flt	flt		  # type
#-------------------------#
[ nil,	  81.1999969	  ]
b.select(flt(nil),flt(nil)).print();
#---------------------------------#
# h		tmp_30		  # name
# flt		flt		  # type
#---------------------------------#
[ 2.29999995,	  4.5		  ]
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
[ 4.5,		  16.7000008	  ]
[ 1.20000005,	  15.6000004	  ]
[ nil,		  81.1999969	  ]

# A 2-dimensional cut
var bn:=b.fragment(1.2,5.6,4.5,15.6);bn.print();
#---------------------------------#
# h		tmp_30		  # name
# flt		flt		  # type
#---------------------------------#
[ 2.29999995,	  4.5		  ]
[ 1.20000005,	  15.6000004	  ]
b.fragment(1.2,5.6,16.2,flt(nil)).print();
#---------------------------------#
# h		tmp_28		  # name
# flt		flt		  # type
#---------------------------------#
[ 5.5999999,	  25.6000004	  ]
[ 4.5,		  16.7000008	  ]
b.fragment(1.2,flt(nil),16.2,flt(nil)).print();
#---------------------------------#
# h		tmp_28		  # name
# flt		flt		  # type
#---------------------------------#
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
[ 4.5,		  16.7000008	  ]
b.fragment(flt(nil),flt(nil),16.2,flt(nil)).print();
#---------------------------------#
# h		tmp_28		  # name
# flt		flt		  # type
#---------------------------------#
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
[ 4.5,		  16.7000008	  ]
[ nil,		  81.1999969	  ]

var b1:= b.join(bn.reverse());
b1.print();
#---------------------------------#
# h		tmp_28		  # name
# flt		flt		  # type
#---------------------------------#
[ 2.29999995,	  2.29999995	  ]
[ 1.20000005,	  1.20000005	  ]

var b2:= b.semijoin(b1);
b2.print();
#---------------------------------#
# h		tmp_31		  # name
# flt		flt		  # type
#---------------------------------#
[ 2.29999995,	  4.5		  ]
[ 1.20000005,	  15.6000004	  ]

# band join experiment
var c:= b.copy();
bandjoin(b,c,4.5,4.5).print();
#---------------------------------#
# h		tmp_33		  # name
# flt		flt		  # type
#---------------------------------#
[ nil,	  nil	  ]
[ nil,		  81.1999969	  ]
[ 2.29999995,	  4.5		  ]
[ 2.29999995,	  nil		  ]
[ 2.29999995,	  nil		  ]
[ 2.29999995,	  25.6000004	  ]
[ 2.29999995,	  36.7000008	  ]
[ 2.29999995,	  49		  ]
[ 2.29999995,	  64.5		  ]
[ 2.29999995,	  16.7000008	  ]
[ 2.29999995,	  15.6000004	  ]
[ 3,	  nil	  ]
[ 3,		  81.1999969	  ]
[ 9,	  nil	  ]
[ 9,		  81.1999969	  ]
quit();

# 17:08:44 >  
# 17:08:44 >  Done.
# 17:08:44 >  

