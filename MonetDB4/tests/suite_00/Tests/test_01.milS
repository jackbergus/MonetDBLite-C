setoid(oid(20000000));
#test basic functionality of the BAT library.
#focussed on strings
#it includes insertions,deletions,selections, and joins.

var b:= new(str,int);
b.insert("the",1);
b.insert("quick",2);
b.insert("brown",3);
b.insert("fox",4);
b.insert("jumps",5);
b.insert("over",6);
b.insert("lazy",7);
b.insert("dog",8);
b.insert(str(nil),9);
b.insert(".",10);
b.insert("",int(nil));
b.insert(str(nil),int(nil));
b.print();


# Testing simple retrievals
b.find("the").print();
b.find("fox").print();
b.find(str(nil)).print();
# This should cause an error
b.find("cat").print();

# Can we delete them and re-insert them later on
b.delete("fox",4);
b.delete("the",1);
b.delete(".",10);
b.print();

b.insert("fox",4);
b.insert("the",1);
b.insert(".",10);
b.count().print();

# Lets cut out a few sections
b.select(2,4).print();
b.select(7,int(nil)).print();
b.select(int(nil),7).print();
b.select(int(nil),int(nil)).print();

b.reverse().select("fox","quick").print();
b.reverse().select("fox",str(nil)).print();
b.reverse().select(str(nil),"quick").print();
b.reverse().select(str(nil),str(nil)).print();

# A 2-dimensional cut
var bn:=b.fragment("fox","quick",1,5);bn.print();
b.fragment("fox",str(nil),1,5).print();
b.fragment(str(nil),"quick",1,5).print();
b.fragment(str(nil),str(nil),1,5).print();
b.fragment("fox","quick",1,int(nil)).print();
b.fragment("fox","quick",int(nil),5).print();
b.fragment("fox","quick",int(nil),int(nil)).print();
b.fragment("fox",str(nil),int(nil),int(nil)).print();
b.fragment(str(nil),"f",int(nil),int(nil)).print();
b.reverse().fragment(int(nil),int(nil),str(nil),"f").print();

var b1:= b.join(bn.reverse());
b1.print();

var b2:= b.semijoin(b1.reverse());
b2.print();

# testing the like command
b.reverse().like("ox").print();
b.reverse().like("fo").print();
b.reverse().like("fox").print();
b.reverse().like(" fox").print();
quit();
