stdout of test '04_Modules_odmgTest` in directory 'tests/Availability` itself:

#> Mtest:	milS 04_Modules_odmgTest milS
#> Mtest:	Mtimeout -timeout 543 Mserver -modulesilent -yaccsilent -d8 -db tests_Availability -single 04_Modules_odmgTest.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Mon Mar 20 04:32:59 MET 2000.
#script:04_Modules_odmgTest.milS


#You are system administrator (adm)!
setoid(oid(20000000));

proc doit(str The_mod) {
	Fname:=new(oid,str);Fname.col_name("function");
	FnameS:=new(oid,str);FnameS.col_name("function");
	Ftype:=new(oid,str);Ftype.col_name("type");
	Fsig:=new(oid,str);Fsig.col_name("signature");
	Fhelp:=new(oid,str);Fhelp.col_name("help");
	Fnts:=new(oid,str);

	Mod_fcn:=sdiff(monet_fcntbl.reverse,Static_fcn).reverse;
	Mod_fcn.sort@batloop() {
	    addThis:=false;
	    if (not(monet_fcn_mid.exist($t))) {
		addThis:=true;
	    } else if (monet_mod_nme.find(monet_fcn_mid.find($t))=The_mod) {
		addThis:=true;
	    }
	    if (addThis) {
		Tname:=$h;
		Ttype:=help_tpe(monet_fcn_tpe.find($t));
		Tsig:=format_fcn_sig($t);
		Thelp:="";
		if (monet_fcn_dsc.exist($t)) {
			Thelp:=monet_fcn_dsc.find($t);
		} else {
			Thelp:="not available";
		}
		Fname.insert($t,Tname);
		Ftype.insert($t,Ttype);
		Fsig.insert($t,Tsig);
		Fhelp.insert($t,Thelp);
		Fnts.insert($t,sprintf("%s %s %s",Tname,Ttype,Tsig));
	    }
	}

	Fnts.count.print;
	Fnts.reverse.sort.reverse@batloop() {
		FnameS.insert($h,Fname.find($h));
	}
	FnameS.count.print; table(1,FnameS,Ftype,Fsig,Fhelp);

	Fname.delete;
	FnameS.delete;
	Ftype.delete;
	Fsig.delete;
	Fhelp.delete;
	Fnts.delete;
}

Static_fcn:=monet_fcntbl.reverse.copy;

printf("Module: \"Meta\"\n\n");
Module: "Meta"




doit("Meta");
[ 144 ]
[ 144 ]
#---------------------------------------------------------------------------------------------------------------------------------------------------------#
# function			| type		| signature							| help					  #
#---------------------------------------------------------------------------------------------------------------------------------------------------------#
[ "Argument_Arguments",		  "COMMAND: ",	  "Argument_Arguments() : odSet",				  "returns the extent of Argument"	  ]
[ "Argument_GETargumentOf",	  "COMMAND: ",	  "Argument_GETargumentOf(odObject) : odObject",		  "extract argumentOf( odObject)."	  ]
[ "Argument_GETcollectionKind",	  "COMMAND: ",	  "Argument_GETcollectionKind(odObject) : int",			  "extract collectionKind( int)."	  ]
[ "Argument_GETname",		  "COMMAND: ",	  "Argument_GETname(odObject) : str",				  "extract name( str)."			  ]
[ "Argument_GETtheClass",	  "COMMAND: ",	  "Argument_GETtheClass(odObject) : odObject",			  "extract theClass( odObject)."	  ]
[ "Argument_GETtheType",	  "COMMAND: ",	  "Argument_GETtheType(odObject) : odObject",			  "extract theType( odObject)."		  ]
[ "Argument_SETargumentOf",	  "COMMAND: ",	  "Argument_SETargumentOf(odObject, odObject) : void",		  "sets argumentOf( odObject)."		  ]
[ "Argument_SETcollectionKind",	  "COMMAND: ",	  "Argument_SETcollectionKind(odObject, int) : void",		  "sets collectionKind( int)."		  ]
[ "Argument_SETname",		  "COMMAND: ",	  "Argument_SETname(odObject, str) : void",			  "sets name( str)."			  ]
[ "Argument_SETtheClass",	  "COMMAND: ",	  "Argument_SETtheClass(odObject, odObject) : void",		  "sets theClass( odObject)."		  ]
[ "Argument_SETtheType",	  "COMMAND: ",	  "Argument_SETtheType(odObject, odObject) : void",		  "sets theType( odObject)."		  ]
[ "Argument_argumentOf",	  "COMMAND: ",	  "Argument_argumentOf() : odAttr",				  "get attribute table argumentOf."	  ]
[ "Argument_checkRelease",	  "COMMAND: ",	  "Argument_checkRelease(odObject, int) : bit",			  "IMPLEMENT: method in C."		  ]
[ "Argument_collectionKind",	  "COMMAND: ",	  "Argument_collectionKind() : odAttr",				  "get attribute table collectionKind."	  ]
[ "Argument_name",		  "COMMAND: ",	  "Argument_name() : odAttr",					  "get attribute table name."		  ]
[ "Argument_new",		  "COMMAND: ",	  "Argument_new() : odObject",					  "DEFAULT constructor."		  ]
[ "Argument_theClass",		  "COMMAND: ",	  "Argument_theClass() : odAttr",				  "get attribute table theClass."	  ]
[ "Argument_theType",		  "COMMAND: ",	  "Argument_theType() : odAttr",				  "get attribute table theType."	  ]
[ "Class_Classes",		  "COMMAND: ",	  "Class_Classes() : odSet",					  "returns the extent of Class"		  ]
[ "Class_GETderiveds",		  "COMMAND: ",	  "Class_GETderiveds(odObject) : odSet",			  "extract deriveds( odSet)."		  ]
[ "Class_GETextentName",	  "COMMAND: ",	  "Class_GETextentName(odObject) : str",			  "extract extentName( str)."		  ]
[ "Class_GETmembers",		  "COMMAND: ",	  "Class_GETmembers(odObject) : odSet",				  "extract members( odSet)."		  ]
[ "Class_GETmethods",		  "COMMAND: ",	  "Class_GETmethods(odObject) : odSet",				  "extract methods( odSet)."		  ]
[ "Class_GETname",		  "COMMAND: ",	  "Class_GETname(odObject) : str",				  "extract name( str)."			  ]
[ "Class_GETobjects",		  "COMMAND: ",	  "Class_GETobjects(odObject) : odSet",				  "extract objects( odSet)."		  ]
[ "Class_GETsupers",		  "COMMAND: ",	  "Class_GETsupers(odObject) : odSet",				  "extract supers( odSet)."		  ]
[ "Class_GETtheExtent",		  "COMMAND: ",	  "Class_GETtheExtent(odObject) : odAttr",			  "extract theExtent( odAttr)."		  ]
[ "Class_GETtheKeys",		  "COMMAND: ",	  "Class_GETtheKeys(odObject) : odSet",				  "extract theKeys( odSet)."		  ]
[ "Class_GETtheModule",		  "COMMAND: ",	  "Class_GETtheModule(odObject) : odObject",			  "extract theModule( odObject)."	  ]
[ "Class_SETextentName",	  "COMMAND: ",	  "Class_SETextentName(odObject, str) : void",			  "sets extentName( str)."		  ]
[ "Class_SETname",		  "COMMAND: ",	  "Class_SETname(odObject, str) : void",			  "sets name( str)."			  ]
[ "Class_SETtheExtent",		  "COMMAND: ",	  "Class_SETtheExtent(odObject, odAttr) : void",		  "sets theExtent( odAttr)."		  ]
[ "Class_SETtheModule",		  "COMMAND: ",	  "Class_SETtheModule(odObject, odObject) : void",		  "sets theModule( odObject)."		  ]
[ "Class_checkRelease",		  "COMMAND: ",	  "Class_checkRelease(odObject, int) : bit",			  "IMPLEMENT: method in C."		  ]
[ "Class_deriveds",		  "COMMAND: ",	  "Class_deriveds() : odAttr",					  "get attribute table deriveds."	  ]
[ "Class_extentName",		  "COMMAND: ",	  "Class_extentName() : odAttr",				  "get attribute table extentName."	  ]
[ "Class_members",		  "COMMAND: ",	  "Class_members() : odAttr",					  "get attribute table members."	  ]
[ "Class_methods",		  "COMMAND: ",	  "Class_methods() : odAttr",					  "get attribute table methods."	  ]
[ "Class_name",			  "COMMAND: ",	  "Class_name() : odAttr",					  "get attribute table name."		  ]
[ "Class_new",			  "COMMAND: ",	  "Class_new() : odObject",					  "DEFAULT constructor."		  ]
[ "Class_newInstance",		  "COMMAND: ",	  "Class_newInstance(odObject) : odObject",			  "IMPLEMENT: method in C."		  ]
[ "Class_objects",		  "COMMAND: ",	  "Class_objects() : odAttr",					  "get attribute table objects."	  ]
[ "Class_supers",		  "COMMAND: ",	  "Class_supers() : odAttr",					  "get attribute table supers."		  ]
[ "Class_theExtent",		  "COMMAND: ",	  "Class_theExtent() : odAttr",					  "get attribute table theExtent."	  ]
[ "Class_theKeys",		  "COMMAND: ",	  "Class_theKeys() : odAttr",					  "get attribute table theKeys."	  ]
[ "Class_theModule",		  "COMMAND: ",	  "Class_theModule() : odAttr",					  "get attribute table theModule."	  ]
[ "Member_GETaccess",		  "COMMAND: ",	  "Member_GETaccess(odObject) : int",				  "extract access( int)."		  ]
[ "Member_GETattr",		  "COMMAND: ",	  "Member_GETattr(odObject) : odAttr",				  "extract attr( odAttr)."		  ]
[ "Member_GETcollectionKind",	  "COMMAND: ",	  "Member_GETcollectionKind(odObject) : int",			  "extract collectionKind( int)."	  ]
[ "Member_GETmemberOf",		  "COMMAND: ",	  "Member_GETmemberOf(odObject) : odObject",			  "extract memberOf( odObject)."	  ]
[ "Member_GETname",		  "COMMAND: ",	  "Member_GETname(odObject) : str",				  "extract name( str)."			  ]
[ "Member_GETreadOnly",		  "COMMAND: ",	  "Member_GETreadOnly(odObject) : bit",				  "extract readOnly( bit)."		  ]
[ "Member_GETtheClass",		  "COMMAND: ",	  "Member_GETtheClass(odObject) : odObject",			  "extract theClass( odObject)."	  ]
[ "Member_GETtheInverse",	  "COMMAND: ",	  "Member_GETtheInverse(odObject) : odObject",			  "extract theInverse( odObject)."	  ]
[ "Member_GETtheKey",		  "COMMAND: ",	  "Member_GETtheKey(odObject) : odObject",			  "extract theKey( odObject)."		  ]
[ "Member_GETtheType",		  "COMMAND: ",	  "Member_GETtheType(odObject) : odObject",			  "extract theType( odObject)."		  ]
[ "Member_Members",		  "COMMAND: ",	  "Member_Members() : odSet",					  "returns the extent of Member"	  ]
[ "Member_SETaccess",		  "COMMAND: ",	  "Member_SETaccess(odObject, int) : void",			  "sets access( int)."			  ]
[ "Member_SETattr",		  "COMMAND: ",	  "Member_SETattr(odObject, odAttr) : void",			  "sets attr( odAttr)."			  ]
[ "Member_SETcollectionKind",	  "COMMAND: ",	  "Member_SETcollectionKind(odObject, int) : void",		  "sets collectionKind( int)."		  ]
[ "Member_SETmemberOf",		  "COMMAND: ",	  "Member_SETmemberOf(odObject, odObject) : void",		  "sets memberOf( odObject)."		  ]
[ "Member_SETname",		  "COMMAND: ",	  "Member_SETname(odObject, str) : void",			  "sets name( str)."			  ]
[ "Member_SETreadOnly",		  "COMMAND: ",	  "Member_SETreadOnly(odObject, bit) : void",			  "sets readOnly( bit)."		  ]
[ "Member_SETtheClass",		  "COMMAND: ",	  "Member_SETtheClass(odObject, odObject) : void",		  "sets theClass( odObject)."		  ]
[ "Member_SETtheInverse",	  "COMMAND: ",	  "Member_SETtheInverse(odObject, odObject) : void",		  "sets theInverse( odObject)."		  ]
[ "Member_SETtheKey",		  "COMMAND: ",	  "Member_SETtheKey(odObject, odObject) : void",		  "sets theKey( odObject)."		  ]
[ "Member_SETtheType",		  "COMMAND: ",	  "Member_SETtheType(odObject, odObject) : void",		  "sets theType( odObject)."		  ]
[ "Member_access",		  "COMMAND: ",	  "Member_access() : odAttr",					  "get attribute table access."		  ]
[ "Member_attr",		  "COMMAND: ",	  "Member_attr() : odAttr",					  "get attribute table attr."		  ]
[ "Member_checkRelease",	  "COMMAND: ",	  "Member_checkRelease(odObject, int) : bit",			  "IMPLEMENT: method in C."		  ]
[ "Member_collectionKind",	  "COMMAND: ",	  "Member_collectionKind() : odAttr",				  "get attribute table collectionKind."	  ]
[ "Member_memberOf",		  "COMMAND: ",	  "Member_memberOf() : odAttr",					  "get attribute table memberOf."	  ]
[ "Member_name",		  "COMMAND: ",	  "Member_name() : odAttr",					  "get attribute table name."		  ]
[ "Member_new",			  "COMMAND: ",	  "Member_new() : odObject",					  "DEFAULT constructor."		  ]
[ "Member_readOnly",		  "COMMAND: ",	  "Member_readOnly() : odAttr",					  "get attribute table readOnly."	  ]
[ "Member_theClass",		  "COMMAND: ",	  "Member_theClass() : odAttr",					  "get attribute table theClass."	  ]
[ "Member_theInverse",		  "COMMAND: ",	  "Member_theInverse() : odAttr",				  "get attribute table theInverse."	  ]
[ "Member_theKey",		  "COMMAND: ",	  "Member_theKey() : odAttr",					  "get attribute table theKey."		  ]
[ "Member_theType",		  "COMMAND: ",	  "Member_theType() : odAttr",					  "get attribute table theType."	  ]
[ "Member_typeId",		  "COMMAND: ",	  "Member_typeId(odObject) : int",				  "IMPLEMENT: method in C."		  ]
[ "Method_GETaccess",		  "COMMAND: ",	  "Method_GETaccess(odObject) : int",				  "extract access( int)."		  ]
[ "Method_GETarguments",	  "COMMAND: ",	  "Method_GETarguments(odObject) : odList",			  "extract arguments( odList)."		  ]
[ "Method_GETmethodOf",		  "COMMAND: ",	  "Method_GETmethodOf(odObject) : odObject",			  "extract methodOf( odObject)."	  ]
[ "Method_GETname",		  "COMMAND: ",	  "Method_GETname(odObject) : str",				  "extract name( str)."			  ]
[ "Method_Methods",		  "COMMAND: ",	  "Method_Methods() : odSet",					  "returns the extent of Method"	  ]
[ "Method_SETaccess",		  "COMMAND: ",	  "Method_SETaccess(odObject, int) : void",			  "sets access( int)."			  ]
[ "Method_SETmethodOf",		  "COMMAND: ",	  "Method_SETmethodOf(odObject, odObject) : void",		  "sets methodOf( odObject)."		  ]
[ "Method_SETname",		  "COMMAND: ",	  "Method_SETname(odObject, str) : void",			  "sets name( str)."			  ]
[ "Method_access",		  "COMMAND: ",	  "Method_access() : odAttr",					  "get attribute table access."		  ]
[ "Method_arguments",		  "COMMAND: ",	  "Method_arguments() : odAttr",				  "get attribute table arguments."	  ]
[ "Method_checkRelease",	  "COMMAND: ",	  "Method_checkRelease(odObject, int) : bit",			  "IMPLEMENT: method in C."		  ]
[ "Method_methodOf",		  "COMMAND: ",	  "Method_methodOf() : odAttr",					  "get attribute table methodOf."	  ]
[ "Method_name",		  "COMMAND: ",	  "Method_name() : odAttr",					  "get attribute table name."		  ]
[ "Method_new",			  "COMMAND: ",	  "Method_new() : odObject",					  "DEFAULT constructor."		  ]
[ "Module_GETclasses",		  "COMMAND: ",	  "Module_GETclasses(odObject) : odSet",			  "extract classes( odSet)."		  ]
[ "Module_GETmoduleVersion",	  "COMMAND: ",	  "Module_GETmoduleVersion(odObject) : str",			  "extract moduleVersion( str)."	  ]
[ "Module_GETname",		  "COMMAND: ",	  "Module_GETname(odObject) : str",				  "extract name( str)."			  ]
[ "Module_Modules",		  "COMMAND: ",	  "Module_Modules() : odSet",					  "returns the extent of Module"	  ]
[ "Module_SETmoduleVersion",	  "COMMAND: ",	  "Module_SETmoduleVersion(odObject, str) : void",		  "sets moduleVersion( str)."		  ]
[ "Module_SETname",		  "COMMAND: ",	  "Module_SETname(odObject, str) : void",			  "sets name( str)."			  ]
[ "Module_checkRelease",	  "COMMAND: ",	  "Module_checkRelease(odObject, int) : bit",			  "IMPLEMENT: method in C."		  ]
[ "Module_classes",		  "COMMAND: ",	  "Module_classes() : odAttr",					  "get attribute table classes."	  ]
[ "Module_moduleVersion",	  "COMMAND: ",	  "Module_moduleVersion() : odAttr",				  "get attribute table moduleVersion."	  ]
[ "Module_name",		  "COMMAND: ",	  "Module_name() : odAttr",					  "get attribute table name."		  ]
[ "Module_new",			  "COMMAND: ",	  "Module_new() : odObject",					  "DEFAULT constructor."		  ]
[ "ODLMeta",			  "PROC: ",	  "ODLMeta() : any",						  "not available"			  ]
[ "ODLdestroy_odmg",		  "PROC: ",	  "ODLdestroy_odmg() : void",					  "not available"			  ]
[ "ODLnew_odmg",		  "PROC: ",	  "ODLnew_odmg() : void",					  "not available"			  ]
[ "Object_GETinstanceOf",	  "COMMAND: ",	  "Object_GETinstanceOf(odObject) : odObject",			  "extract instanceOf( odObject)."	  ]
[ "Object_Objects",		  "COMMAND: ",	  "Object_Objects() : odSet",					  "returns the extent of Object"	  ]
[ "Object_SETinstanceOf",	  "COMMAND: ",	  "Object_SETinstanceOf(odObject, odObject) : void",		  "sets instanceOf( odObject)."		  ]
[ "Object_checkRelease",	  "COMMAND: ",	  "Object_checkRelease(odObject, int) : bit",			  "IMPLEMENT: method in C."		  ]
[ "Object_dependsOn",		  "COMMAND: ",	  "Object_dependsOn(odObject, odObject) : bit",			  "IMPLEMENT: method in C."		  ]
[ "Object_getDepends",		  "COMMAND: ",	  "Object_getDepends(odObject, bit) : odSet",			  "IMPLEMENT: method in C."		  ]
[ "Object_getKeyReferees",	  "COMMAND: ",	  "Object_getKeyReferees(odObject, bit) : odSet",		  "IMPLEMENT: method in C."		  ]
[ "Object_getReferees",		  "COMMAND: ",	  "Object_getReferees(odObject, odSet, bit) : odSet",		  "IMPLEMENT: method in C."		  ]
[ "Object_getReferences",	  "COMMAND: ",	  "Object_getReferences(odObject, odSet, bit) : odSet",		  "IMPLEMENT: method in C."		  ]
[ "Object_instanceOf",		  "COMMAND: ",	  "Object_instanceOf() : odAttr",				  "get attribute table instanceOf."	  ]
[ "Object_isReleasable",	  "COMMAND: ",	  "Object_isReleasable(odObject, int) : bit",			  "IMPLEMENT: method in C."		  ]
[ "Object_new",			  "COMMAND: ",	  "Object_new() : odObject",					  "DEFAULT constructor."		  ]
[ "Object_release",		  "COMMAND: ",	  "Object_release(odObject, bit, int) : bit",			  "IMPLEMENT: method in C."		  ]
[ "Object_releaseRelation",	  "COMMAND: ",	  "Object_releaseRelation(odObject, odObject, bit, int) : bit",	  "IMPLEMENT: method in C."		  ]
[ "Type_GETname",		  "COMMAND: ",	  "Type_GETname(odObject) : str",				  "extract name( str)."			  ]
[ "Type_GETtypeId",		  "COMMAND: ",	  "Type_GETtypeId(odObject) : int",				  "extract typeId( int)."		  ]
[ "Type_SETname",		  "COMMAND: ",	  "Type_SETname(odObject, str) : void",				  "sets name( str)."			  ]
[ "Type_SETtypeId",		  "COMMAND: ",	  "Type_SETtypeId(odObject, int) : void",			  "sets typeId( int)."			  ]
[ "Type_Types",			  "COMMAND: ",	  "Type_Types() : odSet",					  "returns the extent of Type"		  ]
[ "Type_checkRelease",		  "COMMAND: ",	  "Type_checkRelease(odObject, int) : bit",			  "IMPLEMENT: method in C."		  ]
[ "Type_name",			  "COMMAND: ",	  "Type_name() : odAttr",					  "get attribute table name."		  ]
[ "Type_new",			  "COMMAND: ",	  "Type_new() : odObject",					  "DEFAULT constructor."		  ]
[ "Type_typeId",		  "COMMAND: ",	  "Type_typeId() : odAttr",					  "get attribute table typeId."		  ]
[ "bitset_toStr",		  "PROC: ",	  "bitset_toStr(any) : any",					  "not available"			  ]
[ "callFunction",		  "PROC: ",	  "callFunction(str) : any",					  "not available"			  ]
[ "find",			  "PROC: ",	  "find(str, str) : any",					  "not available"			  ]
[ "info",			  "PROC: ",	  "info(odBatCache) : BAT[int,any]",				  "not available"			  ]
[ "odBatCaches",		  "PROC: ",	  "odBatCaches(int) : BAT[str,odBatCache]",			  "not available"			  ]
[ "odInitMeta",			  "COMMAND: ",	  "odInitMeta() : void",					  "Initialize the module"		  ]
[ "odOIDnew",			  "PROC: ",	  "odOIDnew(int) : oid",					  "not available"			  ]
[ "table",			  "PROC: ",	  "table(BAT[oid,any], str) : any",				  "not available"			  ]
[ "table",			  "PROC: ",	  "table(BAT[oid,any], str, int) : any",			  "not available"			  ]
[ "table",			  "PROC: ",	  "table(str) : any",						  "not available"			  ]
[ "table",			  "PROC: ",	  "table(str, str, int) : any",					  "not available"			  ]
[ "table_print",		  "PROC: ",	  "table_print(BAT[any,any], BAT[str,BAT], int, int) : any",	  "not available"			  ]
[ "table_setformat",		  "PROC: ",	  "table_setformat(BAT[any,any]) : str",			  "not available"			  ]

Static_fcn:=sunion(Static_fcn,monet_fcntbl.reverse);

Odmg_mods:=MODULES.select("odmgTest").copy.access(BAT_WRITE).delete("Meta").sort;
table(Odmg_mods.reverse.col_name(sprintf("%i modules",Odmg_mods.count)));
#-----------------#
# 6 modules	  #
#-----------------#
[ "BasicOdmg"	  ]
[ "CC_Test"	  ]
[ "OdmgTest"	  ]
[ "Test7"	  ]
[ "TestUse"	  ]
[ "TransTest"	  ]
Odmg_mods@batloop() {
	The_mod:=$h;
	printf("\nModule: \"%s\"\n\n",The_mod);
	module($h);
	doit(The_mod);
	drop($h);
	Static_fcn:=sunion(Static_fcn,monet_fcntbl.reverse);
}

Module: "BasicOdmg"

[ 177 ]
[ 177 ]
#---------------------------------------------------------------------------------------------------------------------------------#
# function		| type		| signature					| help					  #
#---------------------------------------------------------------------------------------------------------------------------------#
[ "A_As",		  "COMMAND: ",	  "A_As() : odSet",				  "returns the extent of A"		  ]
[ "A_GETNr",		  "COMMAND: ",	  "A_GETNr(odObject) : int",			  "extract Nr( int)."			  ]
[ "A_GETUsed",		  "COMMAND: ",	  "A_GETUsed(odObject) : bit",			  "extract Used( bit)."			  ]
[ "A_GETname",		  "COMMAND: ",	  "A_GETname(odObject) : str",			  "extract name( str)."			  ]
[ "A_GETtest",		  "COMMAND: ",	  "A_GETtest(odObject) : int",			  "extract test( int)."			  ]
[ "A_NameLength",	  "COMMAND: ",	  "A_NameLength(odObject) : int",		  "IMPLEMENT: method in C."		  ]
[ "A_Nr",		  "COMMAND: ",	  "A_Nr() : odAttr",				  "get attribute table Nr."		  ]
[ "A_SETNr",		  "COMMAND: ",	  "A_SETNr(odObject, int) : void",		  "sets Nr( int)."			  ]
[ "A_SETUsed",		  "COMMAND: ",	  "A_SETUsed(odObject, bit) : void",		  "sets Used( bit)."			  ]
[ "A_SETname",		  "COMMAND: ",	  "A_SETname(odObject, str) : void",		  "sets name( str)."			  ]
[ "A_SETtest",		  "COMMAND: ",	  "A_SETtest(odObject, int) : void",		  "sets test( int)."			  ]
[ "A_Used",		  "COMMAND: ",	  "A_Used() : odAttr",				  "get attribute table Used."		  ]
[ "A_name",		  "COMMAND: ",	  "A_name() : odAttr",				  "get attribute table name."		  ]
[ "A_new",		  "COMMAND: ",	  "A_new() : odObject",				  "DEFAULT constructor."		  ]
[ "A_new",		  "COMMAND: ",	  "A_new(str) : odObject",			  "IMPLEMENT: alloc and init function."	  ]
[ "A_print",		  "COMMAND: ",	  "A_print(odObject, bit) : void",		  "IMPLEMENT: method in C."		  ]
[ "A_test",		  "COMMAND: ",	  "A_test() : odAttr",				  "get attribute table test."		  ]
[ "A_test_false",	  "COMMAND: ",	  "A_test_false(odObject) : bit",		  "IMPLEMENT: method in C."		  ]
[ "A_test_nil",		  "COMMAND: ",	  "A_test_nil(odObject) : bit",			  "IMPLEMENT: method in C."		  ]
[ "A_test_true",	  "COMMAND: ",	  "A_test_true(odObject) : bit",		  "IMPLEMENT: method in C."		  ]
[ "B_Bs",		  "COMMAND: ",	  "B_Bs() : odSet",				  "returns the extent of B"		  ]
[ "B_GETa",		  "COMMAND: ",	  "B_GETa(odObject) : odObject",		  "extract a( odObject)."		  ]
[ "B_GETname",		  "COMMAND: ",	  "B_GETname(odObject) : str",			  "extract name( str)."			  ]
[ "B_SETa",		  "COMMAND: ",	  "B_SETa(odObject, odObject) : void",		  "sets a( odObject)."			  ]
[ "B_SETname",		  "COMMAND: ",	  "B_SETname(odObject, str) : void",		  "sets name( str)."			  ]
[ "B_a",		  "COMMAND: ",	  "B_a() : odAttr",				  "get attribute table a."		  ]
[ "B_name",		  "COMMAND: ",	  "B_name() : odAttr",				  "get attribute table name."		  ]
[ "B_new",		  "COMMAND: ",	  "B_new() : odObject",				  "DEFAULT constructor."		  ]
[ "B_new",		  "COMMAND: ",	  "B_new(str) : odObject",			  "IMPLEMENT: alloc and init function."	  ]
[ "B_obtain",		  "COMMAND: ",	  "B_obtain(odObject) : odObject",		  "IMPLEMENT: method in C."		  ]
[ "C_GETName",		  "COMMAND: ",	  "C_GETName(odObject) : str",			  "extract Name( str)."			  ]
[ "C_GETabag",		  "COMMAND: ",	  "C_GETabag(odObject) : odSet",		  "extract abag( odSet)."		  ]
[ "C_GETd",		  "COMMAND: ",	  "C_GETd(odObject) : odObject",		  "extract d( odObject)."		  ]
[ "C_GETds",		  "COMMAND: ",	  "C_GETds(odObject) : odSet",			  "extract ds( odSet)."			  ]
[ "C_GETenums",		  "COMMAND: ",	  "C_GETenums(odObject) : int",			  "extract enums( int)."		  ]
[ "C_GETstring_list",	  "COMMAND: ",	  "C_GETstring_list(odObject) : odList",	  "extract string_list( odList)."	  ]
[ "C_Name",		  "COMMAND: ",	  "C_Name() : odAttr",				  "get attribute table Name."		  ]
[ "C_SETName",		  "COMMAND: ",	  "C_SETName(odObject, str) : void",		  "sets Name( str)."			  ]
[ "C_SETd",		  "COMMAND: ",	  "C_SETd(odObject, odObject) : void",		  "sets d( odObject)."			  ]
[ "C_SETenums",		  "COMMAND: ",	  "C_SETenums(odObject, int) : void",		  "sets enums( int)."			  ]
[ "C_abag",		  "COMMAND: ",	  "C_abag() : odAttr",				  "get attribute table abag."		  ]
[ "C_append",		  "COMMAND: ",	  "C_append(odObject, str) : void",		  "IMPLEMENT: method in C."		  ]
[ "C_d",		  "COMMAND: ",	  "C_d() : odAttr",				  "get attribute table d."		  ]
[ "C_ds",		  "COMMAND: ",	  "C_ds() : odAttr",				  "get attribute table ds."		  ]
[ "C_enums",		  "COMMAND: ",	  "C_enums() : odAttr",				  "get attribute table enums."		  ]
[ "C_new",		  "COMMAND: ",	  "C_new() : odObject",				  "DEFAULT constructor."		  ]
[ "C_new",		  "COMMAND: ",	  "C_new(str, int) : odObject",			  "IMPLEMENT: alloc and init function."	  ]
[ "C_string_list",	  "COMMAND: ",	  "C_string_list() : odAttr",			  "get attribute table string_list."	  ]
[ "C_val",		  "COMMAND: ",	  "C_val(odObject) : str",			  "IMPLEMENT: method in C."		  ]
[ "D_GETc",		  "COMMAND: ",	  "D_GETc(odObject) : odObject",		  "extract c( odObject)."		  ]
[ "D_GETclist",		  "COMMAND: ",	  "D_GETclist(odObject) : odList",		  "extract clist( odList)."		  ]
[ "D_GETcs",		  "COMMAND: ",	  "D_GETcs(odObject) : odSet",			  "extract cs( odSet)."			  ]
[ "D_GETenums",		  "COMMAND: ",	  "D_GETenums(odObject) : int",			  "extract enums( int)."		  ]
[ "D_GETl",		  "COMMAND: ",	  "D_GETl(odObject) : odList",			  "extract l( odList)."			  ]
[ "D_GETordered",	  "COMMAND: ",	  "D_GETordered(odObject) : odList",		  "extract ordered( odList)."		  ]
[ "D_SETc",		  "COMMAND: ",	  "D_SETc(odObject, odObject) : void",		  "sets c( odObject)."			  ]
[ "D_SETenums",		  "COMMAND: ",	  "D_SETenums(odObject, int) : void",		  "sets enums( int)."			  ]
[ "D_append",		  "COMMAND: ",	  "D_append(odObject, int) : void",		  "IMPLEMENT: method in C."		  ]
[ "D_c",		  "COMMAND: ",	  "D_c() : odAttr",				  "get attribute table c."		  ]
[ "D_clist",		  "COMMAND: ",	  "D_clist() : odAttr",				  "get attribute table clist."		  ]
[ "D_cs",		  "COMMAND: ",	  "D_cs() : odAttr",				  "get attribute table cs."		  ]
[ "D_enums",		  "COMMAND: ",	  "D_enums() : odAttr",				  "get attribute table enums."		  ]
[ "D_l",		  "COMMAND: ",	  "D_l() : odAttr",				  "get attribute table l."		  ]
[ "D_new",		  "COMMAND: ",	  "D_new() : odObject",				  "DEFAULT constructor."		  ]
[ "D_new",		  "COMMAND: ",	  "D_new(str) : odObject",			  "IMPLEMENT: alloc and init function."	  ]
[ "D_ordered",		  "COMMAND: ",	  "D_ordered() : odAttr",			  "get attribute table ordered."	  ]
[ "D_print",		  "COMMAND: ",	  "D_print(odObject) : void",			  "IMPLEMENT: method in C."		  ]
[ "D_setEnum",		  "COMMAND: ",	  "D_setEnum(odObject, int) : void",		  "IMPLEMENT: method in C."		  ]
[ "Date_GET_day",	  "COMMAND: ",	  "Date_GET_day(Date) : chr",			  "extract _day( chr)."			  ]
[ "Date_GET_month",	  "COMMAND: ",	  "Date_GET_month(Date) : chr",			  "extract _month( chr)."		  ]
[ "Date_GET_year",	  "COMMAND: ",	  "Date_GET_year(Date) : sht",			  "extract _year( sht)."		  ]
[ "Date_new",		  "COMMAND: ",	  "Date_new(int, int, int) : Date",		  "IMPLEMENT: alloc and init function."	  ]
[ "Date_setDay",	  "COMMAND: ",	  "Date_setDay(Date, int) : void",		  "IMPLEMENT: method in C."		  ]
[ "Date_setMonth",	  "COMMAND: ",	  "Date_setMonth(Date, int) : void",		  "IMPLEMENT: method in C."		  ]
[ "Date_setYear",	  "COMMAND: ",	  "Date_setYear(Date, int) : void",		  "IMPLEMENT: method in C."		  ]
[ "E_Es",		  "COMMAND: ",	  "E_Es() : odSet",				  "returns the extent of E"		  ]
[ "E_GETname",		  "COMMAND: ",	  "E_GETname(odObject) : str",			  "extract name( str)."			  ]
[ "E_GETnames",		  "COMMAND: ",	  "E_GETnames(odObject) : odSet",		  "extract names( odSet)."		  ]
[ "E_SETname",		  "COMMAND: ",	  "E_SETname(odObject, str) : void",		  "sets name( str)."			  ]
[ "E_name",		  "COMMAND: ",	  "E_name() : odAttr",				  "get attribute table name."		  ]
[ "E_names",		  "COMMAND: ",	  "E_names() : odAttr",				  "get attribute table names."		  ]
[ "E_new",		  "COMMAND: ",	  "E_new() : odObject",				  "DEFAULT constructor."		  ]
[ "E_new",		  "COMMAND: ",	  "E_new(str, odSet) : odObject",		  "IMPLEMENT: alloc and init function."	  ]
[ "F_Fs",		  "COMMAND: ",	  "F_Fs() : odSet",				  "returns the extent of F"		  ]
[ "F_GETname",		  "COMMAND: ",	  "F_GETname(odObject) : str",			  "extract name( str)."			  ]
[ "F_GETnames",		  "COMMAND: ",	  "F_GETnames(odObject) : odSet",		  "extract names( odSet)."		  ]
[ "F_SETname",		  "COMMAND: ",	  "F_SETname(odObject, str) : void",		  "sets name( str)."			  ]
[ "F_name",		  "COMMAND: ",	  "F_name() : odAttr",				  "get attribute table name."		  ]
[ "F_names",		  "COMMAND: ",	  "F_names() : odAttr",				  "get attribute table names."		  ]
[ "F_new",		  "COMMAND: ",	  "F_new() : odObject",				  "DEFAULT constructor."		  ]
[ "F_new",		  "COMMAND: ",	  "F_new(str, odSet) : odObject",		  "IMPLEMENT: alloc and init function."	  ]
[ "G_Birthday",		  "COMMAND: ",	  "G_Birthday() : odAttr",			  "get attribute table Birthday."	  ]
[ "G_GETBirthday",	  "COMMAND: ",	  "G_GETBirthday(odObject) : Date",		  "extract Birthday( Date)."		  ]
[ "G_GETname",		  "COMMAND: ",	  "G_GETname(odObject) : str",			  "extract name( str)."			  ]
[ "G_SETBirthday",	  "COMMAND: ",	  "G_SETBirthday(odObject, Date) : void",	  "sets Birthday( Date)."		  ]
[ "G_SETname",		  "COMMAND: ",	  "G_SETname(odObject, str) : void",		  "sets name( str)."			  ]
[ "G_age",		  "COMMAND: ",	  "G_age(odObject) : int",			  "IMPLEMENT: method in C."		  ]
[ "G_name",		  "COMMAND: ",	  "G_name() : odAttr",				  "get attribute table name."		  ]
[ "G_new",		  "COMMAND: ",	  "G_new() : odObject",				  "DEFAULT constructor."		  ]
[ "G_new",		  "COMMAND: ",	  "G_new(str, Date) : odObject",		  "IMPLEMENT: alloc and init function."	  ]
[ "K_GETName",		  "COMMAND: ",	  "K_GETName(odObject) : str",			  "extract Name( str)."			  ]
[ "K_Name",		  "COMMAND: ",	  "K_Name() : odAttr",				  "get attribute table Name."		  ]
[ "K_SETName",		  "COMMAND: ",	  "K_SETName(odObject, str) : void",		  "sets Name( str)."			  ]
[ "K_echo",		  "COMMAND: ",	  "K_echo(odObject, int) : void",		  "IMPLEMENT: method in C."		  ]
[ "K_new",		  "COMMAND: ",	  "K_new() : odObject",				  "DEFAULT constructor."		  ]
[ "K_new",		  "COMMAND: ",	  "K_new(str) : odObject",			  "IMPLEMENT: alloc and init function."	  ]
[ "L_Extra",		  "COMMAND: ",	  "L_Extra() : odAttr",				  "get attribute table Extra."		  ]
[ "L_GETExtra",		  "COMMAND: ",	  "L_GETExtra(odObject) : str",			  "extract Extra( str)."		  ]
[ "L_SETExtra",		  "COMMAND: ",	  "L_SETExtra(odObject, str) : void",		  "sets Extra( str)."			  ]
[ "L_echo",		  "COMMAND: ",	  "L_echo(odObject, int) : void",		  "IMPLEMENT: method in C."		  ]
[ "L_new",		  "COMMAND: ",	  "L_new() : odObject",				  "DEFAULT constructor."		  ]
[ "L_new",		  "COMMAND: ",	  "L_new(str, str) : odObject",			  "IMPLEMENT: alloc and init function."	  ]
[ "M_GETMore",		  "COMMAND: ",	  "M_GETMore(odObject) : str",			  "extract More( str)."			  ]
[ "M_More",		  "COMMAND: ",	  "M_More() : odAttr",				  "get attribute table More."		  ]
[ "M_SETMore",		  "COMMAND: ",	  "M_SETMore(odObject, str) : void",		  "sets More( str)."			  ]
[ "M_echo",		  "COMMAND: ",	  "M_echo(odObject, int) : void",		  "IMPLEMENT: method in C."		  ]
[ "M_new",		  "COMMAND: ",	  "M_new() : odObject",				  "DEFAULT constructor."		  ]
[ "M_new",		  "COMMAND: ",	  "M_new(str, str, str) : odObject",		  "IMPLEMENT: alloc and init function."	  ]
[ "N_GETName",		  "COMMAND: ",	  "N_GETName(odObject) : str",			  "extract Name( str)."			  ]
[ "N_GETOs",		  "COMMAND: ",	  "N_GETOs(odObject) : odSet",			  "extract Os( odSet)."			  ]
[ "N_Name",		  "COMMAND: ",	  "N_Name() : odAttr",				  "get attribute table Name."		  ]
[ "N_Ns",		  "COMMAND: ",	  "N_Ns() : odSet",				  "returns the extent of N"		  ]
[ "N_Os",		  "COMMAND: ",	  "N_Os() : odAttr",				  "get attribute table Os."		  ]
[ "N_SETName",		  "COMMAND: ",	  "N_SETName(odObject, str) : void",		  "sets Name( str)."			  ]
[ "N_new",		  "COMMAND: ",	  "N_new() : odObject",				  "DEFAULT constructor."		  ]
[ "N_new",		  "COMMAND: ",	  "N_new(str) : odObject",			  "IMPLEMENT: alloc and init function."	  ]
[ "ODLBasicOdmg",	  "PROC: ",	  "ODLBasicOdmg() : any",			  "not available"			  ]
[ "O_GETn",		  "COMMAND: ",	  "O_GETn(odObject) : odObject",		  "extract n( odObject)."		  ]
[ "O_GETnr",		  "COMMAND: ",	  "O_GETnr(odObject) : int",			  "extract nr( int)."			  ]
[ "O_GETps",		  "COMMAND: ",	  "O_GETps(odObject) : odSet",			  "extract ps( odSet)."			  ]
[ "O_GETq",		  "COMMAND: ",	  "O_GETq(odObject) : odObject",		  "extract q( odObject)."		  ]
[ "O_Os",		  "COMMAND: ",	  "O_Os() : odSet",				  "returns the extent of O"		  ]
[ "O_SETn",		  "COMMAND: ",	  "O_SETn(odObject, odObject) : void",		  "sets n( odObject)."			  ]
[ "O_SETnr",		  "COMMAND: ",	  "O_SETnr(odObject, int) : void",		  "sets nr( int)."			  ]
[ "O_SETq",		  "COMMAND: ",	  "O_SETq(odObject, odObject) : void",		  "sets q( odObject)."			  ]
[ "O_n",		  "COMMAND: ",	  "O_n() : odAttr",				  "get attribute table n."		  ]
[ "O_new",		  "COMMAND: ",	  "O_new() : odObject",				  "DEFAULT constructor."		  ]
[ "O_new",		  "COMMAND: ",	  "O_new(str, int) : odObject",			  "IMPLEMENT: alloc and init function."	  ]
[ "O_nr",		  "COMMAND: ",	  "O_nr() : odAttr",				  "get attribute table nr."		  ]
[ "O_ps",		  "COMMAND: ",	  "O_ps() : odAttr",				  "get attribute table ps."		  ]
[ "O_q",		  "COMMAND: ",	  "O_q() : odAttr",				  "get attribute table q."		  ]
[ "P_GETName",		  "COMMAND: ",	  "P_GETName(odObject) : str",			  "extract Name( str)."			  ]
[ "P_GETo",		  "COMMAND: ",	  "P_GETo(odObject) : odObject",		  "extract o( odObject)."		  ]
[ "P_Name",		  "COMMAND: ",	  "P_Name() : odAttr",				  "get attribute table Name."		  ]
[ "P_Ps",		  "COMMAND: ",	  "P_Ps() : odSet",				  "returns the extent of P"		  ]
[ "P_SETName",		  "COMMAND: ",	  "P_SETName(odObject, str) : void",		  "sets Name( str)."			  ]
[ "P_SETo",		  "COMMAND: ",	  "P_SETo(odObject, odObject) : void",		  "sets o( odObject)."			  ]
[ "P_new",		  "COMMAND: ",	  "P_new() : odObject",				  "DEFAULT constructor."		  ]
[ "P_new",		  "COMMAND: ",	  "P_new(str) : odObject",			  "IMPLEMENT: alloc and init function."	  ]
[ "P_o",		  "COMMAND: ",	  "P_o() : odAttr",				  "get attribute table o."		  ]
[ "P_relate",		  "COMMAND: ",	  "P_relate(odObject, odObject) : void",	  "IMPLEMENT: method in C."		  ]
[ "Q_GETName",		  "COMMAND: ",	  "Q_GETName(odObject) : str",			  "extract Name( str)."			  ]
[ "Q_GETOs",		  "COMMAND: ",	  "Q_GETOs(odObject) : odSet",			  "extract Os( odSet)."			  ]
[ "Q_Name",		  "COMMAND: ",	  "Q_Name() : odAttr",				  "get attribute table Name."		  ]
[ "Q_Os",		  "COMMAND: ",	  "Q_Os() : odAttr",				  "get attribute table Os."		  ]
[ "Q_Qs",		  "COMMAND: ",	  "Q_Qs() : odSet",				  "returns the extent of Q"		  ]
[ "Q_SETName",		  "COMMAND: ",	  "Q_SETName(odObject, str) : void",		  "sets Name( str)."			  ]
[ "Q_new",		  "COMMAND: ",	  "Q_new() : odObject",				  "DEFAULT constructor."		  ]
[ "Q_new",		  "COMMAND: ",	  "Q_new(str) : odObject",			  "IMPLEMENT: alloc and init function."	  ]
[ "Q_relate",		  "COMMAND: ",	  "Q_relate(odObject, odSet) : void",		  "IMPLEMENT: method in C."		  ]
[ "Q_remove",		  "COMMAND: ",	  "Q_remove(odObject, odObject) : void",	  "IMPLEMENT: method in C."		  ]
[ "Q_removeset",	  "COMMAND: ",	  "Q_removeset(odObject) : void",		  "IMPLEMENT: method in C."		  ]
[ "digit_GETnegative",	  "COMMAND: ",	  "digit_GETnegative(odObject) : odObject",	  "extract negative( odObject)."	  ]
[ "digit_GETvalue",	  "COMMAND: ",	  "digit_GETvalue(odObject) : int",		  "extract value( int)."		  ]
[ "digit_SETnegative",	  "COMMAND: ",	  "digit_SETnegative(odObject, odObject) : void", "sets negative( odObject)."		  ]
[ "digit_SETvalue",	  "COMMAND: ",	  "digit_SETvalue(odObject, int) : void",	  "sets value( int)."			  ]
[ "digit_SetNegative",	  "COMMAND: ",	  "digit_SetNegative(odObject, odObject) : void", "IMPLEMENT: method in C."		  ]
[ "digit_digits",	  "COMMAND: ",	  "digit_digits() : odSet",			  "returns the extent of digit"		  ]
[ "digit_negative",	  "COMMAND: ",	  "digit_negative() : odAttr",			  "get attribute table negative."	  ]
[ "digit_new",		  "COMMAND: ",	  "digit_new() : odObject",			  "DEFAULT constructor."		  ]
[ "digit_new",		  "COMMAND: ",	  "digit_new(int) : odObject",			  "IMPLEMENT: alloc and init function."	  ]
[ "digit_value",	  "COMMAND: ",	  "digit_value() : odAttr",			  "get attribute table value."		  ]
[ "find",		  "COMMAND: ",	  "find(str) : odObject",			  "IMPLEMENT: method in C."		  ]
[ "findset",		  "COMMAND: ",	  "findset() : odObject",			  "IMPLEMENT: method in C."		  ]
[ "odInitBasicOdmg",	  "COMMAND: ",	  "odInitBasicOdmg() : void",			  "Initialize the module"		  ]
[ "relate_Q_Os",	  "COMMAND: ",	  "relate_Q_Os() : void",			  "IMPLEMENT: method in C."		  ]
[ "test_iterator",	  "COMMAND: ",	  "test_iterator() : void",			  "IMPLEMENT: method in C."		  ]

Module: "CC_Test"

[ 59 ]
[ 59 ]
#-------------------------------------------------------------------------------------------------------------------------------------------------#
# function			| type		| signature						| help					  #
#-------------------------------------------------------------------------------------------------------------------------------------------------#
[ "Address_GETcity",		  "COMMAND: ",	  "Address_GETcity(odObject) : odObject",		  "extract city( odObject)."		  ]
[ "Address_GETnumber",		  "COMMAND: ",	  "Address_GETnumber(odObject) : int",			  "extract number( int)."		  ]
[ "Address_GETstreet",		  "COMMAND: ",	  "Address_GETstreet(odObject) : str",			  "extract street( str)."		  ]
[ "Address_SETcity",		  "COMMAND: ",	  "Address_SETcity(odObject, odObject) : void",		  "sets city( odObject)."		  ]
[ "Address_SETnumber",		  "COMMAND: ",	  "Address_SETnumber(odObject, int) : void",		  "sets number( int)."			  ]
[ "Address_SETstreet",		  "COMMAND: ",	  "Address_SETstreet(odObject, str) : void",		  "sets street( str)."			  ]
[ "Address_city",		  "COMMAND: ",	  "Address_city() : odAttr",				  "get attribute table city."		  ]
[ "Address_new",		  "COMMAND: ",	  "Address_new() : odObject",				  "DEFAULT constructor."		  ]
[ "Address_number",		  "COMMAND: ",	  "Address_number() : odAttr",				  "get attribute table number."		  ]
[ "Address_street",		  "COMMAND: ",	  "Address_street() : odAttr",				  "get attribute table street."		  ]
[ "City_GETname",		  "COMMAND: ",	  "City_GETname(odObject) : str",			  "extract name( str)."			  ]
[ "City_SETname",		  "COMMAND: ",	  "City_SETname(odObject, str) : void",			  "sets name( str)."			  ]
[ "City_cities",		  "COMMAND: ",	  "City_cities() : odSet",				  "returns the extent of City"		  ]
[ "City_name",			  "COMMAND: ",	  "City_name() : odAttr",				  "get attribute table name."		  ]
[ "City_new",			  "COMMAND: ",	  "City_new() : odObject",				  "DEFAULT constructor."		  ]
[ "DBconsult",			  "COMMAND: ",	  "DBconsult() : void",					  "IMPLEMENT: method in C."		  ]
[ "DBload",			  "COMMAND: ",	  "DBload(int) : void",					  "IMPLEMENT: method in C."		  ]
[ "Department_GETaddress",	  "COMMAND: ",	  "Department_GETaddress(odObject) : odObject",		  "extract address( odObject)."		  ]
[ "Department_GETname",		  "COMMAND: ",	  "Department_GETname(odObject) : str",			  "extract name( str)."			  ]
[ "Department_GETpeople",	  "COMMAND: ",	  "Department_GETpeople(odObject) : odSet",		  "extract people( odSet)."		  ]
[ "Department_SETaddress",	  "COMMAND: ",	  "Department_SETaddress(odObject, odObject) : void",	  "sets address( odObject)."		  ]
[ "Department_SETname",		  "COMMAND: ",	  "Department_SETname(odObject, str) : void",		  "sets name( str)."			  ]
[ "Department_address",		  "COMMAND: ",	  "Department_address() : odAttr",			  "get attribute table address."	  ]
[ "Department_departments",	  "COMMAND: ",	  "Department_departments() : odSet",			  "returns the extent of Department"	  ]
[ "Department_name",		  "COMMAND: ",	  "Department_name() : odAttr",				  "get attribute table name."		  ]
[ "Department_new",		  "COMMAND: ",	  "Department_new() : odObject",			  "DEFAULT constructor."		  ]
[ "Department_people",		  "COMMAND: ",	  "Department_people() : odAttr",			  "get attribute table people."		  ]
[ "Employee_GETsalary",		  "COMMAND: ",	  "Employee_GETsalary(odObject) : flt",			  "extract salary( flt)."		  ]
[ "Employee_SETsalary",		  "COMMAND: ",	  "Employee_SETsalary(odObject, flt) : void",		  "sets salary( flt)."			  ]
[ "Employee_employees",		  "COMMAND: ",	  "Employee_employees() : odSet",			  "returns the extent of Employee"	  ]
[ "Employee_new",		  "COMMAND: ",	  "Employee_new() : odObject",				  "DEFAULT constructor."		  ]
[ "Employee_salary",		  "COMMAND: ",	  "Employee_salary() : odAttr",				  "get attribute table salary."		  ]
[ "ODLCC_Test",			  "PROC: ",	  "ODLCC_Test() : any",					  "not available"			  ]
[ "Person_GETaddress",		  "COMMAND: ",	  "Person_GETaddress(odObject) : odObject",		  "extract address( odObject)."		  ]
[ "Person_GETdate_of_birth",	  "COMMAND: ",	  "Person_GETdate_of_birth(odObject) : lng",		  "extract date_of_birth( lng)."	  ]
[ "Person_GETdepartment",	  "COMMAND: ",	  "Person_GETdepartment(odObject) : odObject",		  "extract department( odObject)."	  ]
[ "Person_GEThobbies",		  "COMMAND: ",	  "Person_GEThobbies(odObject) : odList",		  "extract hobbies( odList)."		  ]
[ "Person_GETname",		  "COMMAND: ",	  "Person_GETname(odObject) : str",			  "extract name( str)."			  ]
[ "Person_GETsex",		  "COMMAND: ",	  "Person_GETsex(odObject) : str",			  "extract sex( str)."			  ]
[ "Person_SETaddress",		  "COMMAND: ",	  "Person_SETaddress(odObject, odObject) : void",	  "sets address( odObject)."		  ]
[ "Person_SETdate_of_birth",	  "COMMAND: ",	  "Person_SETdate_of_birth(odObject, lng) : void",	  "sets date_of_birth( lng)."		  ]
[ "Person_SETdepartment",	  "COMMAND: ",	  "Person_SETdepartment(odObject, odObject) : void",	  "sets department( odObject)."		  ]
[ "Person_SETname",		  "COMMAND: ",	  "Person_SETname(odObject, str) : void",		  "sets name( str)."			  ]
[ "Person_SETsex",		  "COMMAND: ",	  "Person_SETsex(odObject, str) : void",		  "sets sex( str)."			  ]
[ "Person_address",		  "COMMAND: ",	  "Person_address() : odAttr",				  "get attribute table address."	  ]
[ "Person_date_of_birth",	  "COMMAND: ",	  "Person_date_of_birth() : odAttr",			  "get attribute table date_of_birth."	  ]
[ "Person_department",		  "COMMAND: ",	  "Person_department() : odAttr",			  "get attribute table department."	  ]
[ "Person_get_hobbies",		  "COMMAND: ",	  "Person_get_hobbies(odObject) : odList",		  "IMPLEMENT: method in C."		  ]
[ "Person_hobbies",		  "COMMAND: ",	  "Person_hobbies() : odAttr",				  "get attribute table hobbies."	  ]
[ "Person_name",		  "COMMAND: ",	  "Person_name() : odAttr",				  "get attribute table name."		  ]
[ "Person_new",			  "COMMAND: ",	  "Person_new() : odObject",				  "DEFAULT constructor."		  ]
[ "Person_persons",		  "COMMAND: ",	  "Person_persons() : odSet",				  "returns the extent of Person"	  ]
[ "Person_sex",			  "COMMAND: ",	  "Person_sex() : odAttr",				  "get attribute table sex."		  ]
[ "Student_GETmajorSubject",	  "COMMAND: ",	  "Student_GETmajorSubject(odObject) : str",		  "extract majorSubject( str)."		  ]
[ "Student_SETmajorSubject",	  "COMMAND: ",	  "Student_SETmajorSubject(odObject, str) : void",	  "sets majorSubject( str)."		  ]
[ "Student_majorSubject",	  "COMMAND: ",	  "Student_majorSubject() : odAttr",			  "get attribute table majorSubject."	  ]
[ "Student_new",		  "COMMAND: ",	  "Student_new() : odObject",				  "DEFAULT constructor."		  ]
[ "Student_students",		  "COMMAND: ",	  "Student_students() : odSet",				  "returns the extent of Student"	  ]
[ "odInitCC_Test",		  "COMMAND: ",	  "odInitCC_Test() : void",				  "Initialize the module"		  ]

Module: "OdmgTest"

[ 49 ]
[ 49 ]
#-------------------------------------------------------------------------------------------------------------------------------------------------#
# function			| type		| signature						| help					  #
#-------------------------------------------------------------------------------------------------------------------------------------------------#
[ "Customer_Customers",		  "COMMAND: ",	  "Customer_Customers() : odSet",			  "returns the extent of Customer"	  ]
[ "Customer_GETcustID",		  "COMMAND: ",	  "Customer_GETcustID(odObject) : int",			  "extract custID( int)."		  ]
[ "Customer_GETproducts",	  "COMMAND: ",	  "Customer_GETproducts(odObject) : odSet",		  "extract products( odSet)."		  ]
[ "Customer_GETstatus",		  "COMMAND: ",	  "Customer_GETstatus(odObject) : int",			  "extract status( int)."		  ]
[ "Customer_SETcustID",		  "COMMAND: ",	  "Customer_SETcustID(odObject, int) : void",		  "sets custID( int)."			  ]
[ "Customer_SETstatus",		  "COMMAND: ",	  "Customer_SETstatus(odObject, int) : void",		  "sets status( int)."			  ]
[ "Customer_boughtThisYear",	  "COMMAND: ",	  "Customer_boughtThisYear(odObject) : odList",		  "IMPLEMENT: method in C."		  ]
[ "Customer_buyProduct",	  "COMMAND: ",	  "Customer_buyProduct(odObject, odObject, lng) : int",	  "IMPLEMENT: method in C."		  ]
[ "Customer_buyProductList",	  "COMMAND: ",	  "Customer_buyProductList(odObject, odList) : odSet",	  "IMPLEMENT: method in C."		  ]
[ "Customer_buyProductSet",	  "COMMAND: ",	  "Customer_buyProductSet(odObject, odSet) : void",	  "IMPLEMENT: method in C."		  ]
[ "Customer_custID",		  "COMMAND: ",	  "Customer_custID() : odAttr",				  "get attribute table custID."		  ]
[ "Customer_getProducts",	  "COMMAND: ",	  "Customer_getProducts(odObject, int) : odSet",	  "IMPLEMENT: method in C."		  ]
[ "Customer_new",		  "COMMAND: ",	  "Customer_new() : odObject",				  "DEFAULT constructor."		  ]
[ "Customer_products",		  "COMMAND: ",	  "Customer_products() : odAttr",			  "get attribute table products."	  ]
[ "Customer_status",		  "COMMAND: ",	  "Customer_status() : odAttr",				  "get attribute table status."		  ]
[ "ODLOdmgTest",		  "PROC: ",	  "ODLOdmgTest() : any",				  "not available"			  ]
[ "Part_GETname",		  "COMMAND: ",	  "Part_GETname(odObject) : str",			  "extract name( str)."			  ]
[ "Part_GETusedInProducts",	  "COMMAND: ",	  "Part_GETusedInProducts(odObject) : odSet",		  "extract usedInProducts( odSet)."	  ]
[ "Part_Parts",			  "COMMAND: ",	  "Part_Parts() : odSet",				  "returns the extent of Part"		  ]
[ "Part_SETname",		  "COMMAND: ",	  "Part_SETname(odObject, str) : void",			  "sets name( str)."			  ]
[ "Part_name",			  "COMMAND: ",	  "Part_name() : odAttr",				  "get attribute table name."		  ]
[ "Part_new",			  "COMMAND: ",	  "Part_new() : odObject",				  "DEFAULT constructor."		  ]
[ "Part_usedInProducts",	  "COMMAND: ",	  "Part_usedInProducts() : odAttr",			  "get attribute table usedInProducts."	  ]
[ "Person_GETchildren",		  "COMMAND: ",	  "Person_GETchildren(odObject) : odSet",		  "extract children( odSet)."		  ]
[ "Person_GETfirstLetter",	  "COMMAND: ",	  "Person_GETfirstLetter(odObject) : chr",		  "extract firstLetter( chr)."		  ]
[ "Person_GETmother",		  "COMMAND: ",	  "Person_GETmother(odObject) : odObject",		  "extract mother( odObject)."		  ]
[ "Person_GETname",		  "COMMAND: ",	  "Person_GETname(odObject) : str",			  "extract name( str)."			  ]
[ "Person_Persons",		  "COMMAND: ",	  "Person_Persons() : odSet",				  "returns the extent of Person"	  ]
[ "Person_SETfirstLetter",	  "COMMAND: ",	  "Person_SETfirstLetter(odObject, chr) : void",	  "sets firstLetter( chr)."		  ]
[ "Person_SETmother",		  "COMMAND: ",	  "Person_SETmother(odObject, odObject) : void",	  "sets mother( odObject)."		  ]
[ "Person_SETname",		  "COMMAND: ",	  "Person_SETname(odObject, str) : void",		  "sets name( str)."			  ]
[ "Person_children",		  "COMMAND: ",	  "Person_children() : odAttr",				  "get attribute table children."	  ]
[ "Person_firstLetter",		  "COMMAND: ",	  "Person_firstLetter() : odAttr",			  "get attribute table firstLetter."	  ]
[ "Person_mother",		  "COMMAND: ",	  "Person_mother() : odAttr",				  "get attribute table mother."		  ]
[ "Person_name",		  "COMMAND: ",	  "Person_name() : odAttr",				  "get attribute table name."		  ]
[ "Person_new",			  "COMMAND: ",	  "Person_new() : odObject",				  "DEFAULT constructor."		  ]
[ "Product_GETbuyers",		  "COMMAND: ",	  "Product_GETbuyers(odObject) : odSet",		  "extract buyers( odSet)."		  ]
[ "Product_GETname",		  "COMMAND: ",	  "Product_GETname(odObject) : str",			  "extract name( str)."			  ]
[ "Product_GETparts",		  "COMMAND: ",	  "Product_GETparts(odObject) : odList",		  "extract parts( odList)."		  ]
[ "Product_GETproductID",	  "COMMAND: ",	  "Product_GETproductID(odObject) : int",		  "extract productID( int)."		  ]
[ "Product_Products",		  "COMMAND: ",	  "Product_Products() : odSet",				  "returns the extent of Product"	  ]
[ "Product_SETname",		  "COMMAND: ",	  "Product_SETname(odObject, str) : void",		  "sets name( str)."			  ]
[ "Product_SETproductID",	  "COMMAND: ",	  "Product_SETproductID(odObject, int) : void",		  "sets productID( int)."		  ]
[ "Product_buyers",		  "COMMAND: ",	  "Product_buyers() : odAttr",				  "get attribute table buyers."		  ]
[ "Product_name",		  "COMMAND: ",	  "Product_name() : odAttr",				  "get attribute table name."		  ]
[ "Product_new",		  "COMMAND: ",	  "Product_new() : odObject",				  "DEFAULT constructor."		  ]
[ "Product_parts",		  "COMMAND: ",	  "Product_parts() : odAttr",				  "get attribute table parts."		  ]
[ "Product_productID",		  "COMMAND: ",	  "Product_productID() : odAttr",			  "get attribute table productID."	  ]
[ "odInitOdmgTest",		  "COMMAND: ",	  "odInitOdmgTest() : void",				  "Initialize the module"		  ]

Module: "Test7"

[ 8 ]
[ 8 ]
#-------------------------------------------------------------------------------------------------------------------------#
# function	| type		| signature					| help					  #
#-------------------------------------------------------------------------------------------------------------------------#
[ "C7_GETName",	  "COMMAND: ",	  "C7_GETName(odObject) : odObject",		  "extract Name( odObject)."		  ]
[ "C7_Name",	  "COMMAND: ",	  "C7_Name() : odAttr",				  "get attribute table Name."		  ]
[ "C7_SETName",	  "COMMAND: ",	  "C7_SETName(odObject, odObject) : void",	  "sets Name( odObject)."		  ]
[ "C7_new",	  "COMMAND: ",	  "C7_new() : odObject",			  "DEFAULT constructor."		  ]
[ "C7_new",	  "COMMAND: ",	  "C7_new(odObject) : odObject",		  "IMPLEMENT: alloc and init function."	  ]
[ "ODLBasicOdmg", "PROC: ",	  "ODLBasicOdmg() : any",			  "not available"			  ]
[ "ODLTest7",	  "PROC: ",	  "ODLTest7() : any",				  "not available"			  ]
[ "odInitTest7",  "COMMAND: ",	  "odInitTest7() : void",			  "Initialize the module"		  ]

Module: "TestUse"

[ 7 ]
[ 7 ]
#-----------------------------------------------------------------------------------------------------------------#
# function		| type		| signature				| help				  #
#-----------------------------------------------------------------------------------------------------------------#
[ "A_GETaDate",		  "COMMAND: ",	  "A_GETaDate(odObject) : instant",	  "extract aDate( instant)."	  ]
[ "A_SETaDate",		  "COMMAND: ",	  "A_SETaDate(odObject, instant) : void", "sets aDate( instant)."	  ]
[ "A_TestUseAs",	  "COMMAND: ",	  "A_TestUseAs() : odSet",		  "returns the extent of A"	  ]
[ "A_aDate",		  "COMMAND: ",	  "A_aDate() : odAttr",			  "get attribute table aDate."	  ]
[ "A_new",		  "COMMAND: ",	  "A_new() : odObject",			  "DEFAULT constructor."	  ]
[ "ODLTestUse",		  "PROC: ",	  "ODLTestUse() : any",			  "not available"		  ]
[ "odInitTestUse",	  "COMMAND: ",	  "odInitTestUse() : void",		  "Initialize the module"	  ]

Module: "TransTest"

[ 13 ]
[ 13 ]
#-----------------------------------------------------------------------------------------------------------------#
# function		| type		| signature				| help				  #
#-----------------------------------------------------------------------------------------------------------------#
[ "ODLTransTest",	  "PROC: ",	  "ODLTransTest() : any",		  "not available"		  ]
[ "T_GETname",		  "COMMAND: ",	  "T_GETname(odObject) : str",		  "extract name( str)."		  ]
[ "T_GETnr",		  "COMMAND: ",	  "T_GETnr(odObject) : int",		  "extract nr( int)."		  ]
[ "T_GETnr2",		  "COMMAND: ",	  "T_GETnr2(odObject) : int",		  "extract nr2( int)."		  ]
[ "T_SETname",		  "COMMAND: ",	  "T_SETname(odObject, str) : void",	  "sets name( str)."		  ]
[ "T_SETnr",		  "COMMAND: ",	  "T_SETnr(odObject, int) : void",	  "sets nr( int)."		  ]
[ "T_SETnr2",		  "COMMAND: ",	  "T_SETnr2(odObject, int) : void",	  "sets nr2( int)."		  ]
[ "T_Ts",		  "COMMAND: ",	  "T_Ts() : odSet",			  "returns the extent of T"	  ]
[ "T_name",		  "COMMAND: ",	  "T_name() : odAttr",			  "get attribute table name."	  ]
[ "T_new",		  "COMMAND: ",	  "T_new() : odObject",			  "DEFAULT constructor."	  ]
[ "T_nr",		  "COMMAND: ",	  "T_nr() : odAttr",			  "get attribute table nr."	  ]
[ "T_nr2",		  "COMMAND: ",	  "T_nr2() : odAttr",			  "get attribute table nr2."	  ]
[ "odInitTransTest",	  "COMMAND: ",	  "odInitTransTest() : void",		  "Initialize the module"	  ]

quit;
