stdout of test '09_Modules_UNKNOWN` in directory 'tests/Availability` itself:


# 15:30:12 >  
# 15:30:12 >  Mtimeout -timeout 60 Mserver "--config=/ufs/boncz/MonetDB/linux/etc/monet.conf" --debug=10 --set "monet_mod_path=/ufs/boncz/MonetDB/linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/boncz/MonetDB/linux/var/MonetDB/dbfarm" --set "sql_logdir=/ufs/boncz/MonetDB/linux/var/MonetDB/log" --set mapi_port=55437 --set sql_port=50559 --set monet_prompt= --trace --dbname=mTests_tests_Availability  < 09_Modules_UNKNOWN.milS
# 15:30:12 >  

# Monet Database Server V4.3.13
# Copyright (c) 1993-2004, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
setoid(oid(20000000));

var MODULES:=bat("MODULES");
var Static_fcn:=monet_fcntbl.reverse().copy();

var Fname:=new(oid,str);Fname.col_name("function");
var FnameS:=new(oid,str);FnameS.col_name("function");
var Ftype:=new(oid,str);Ftype.col_name("type");
var Fsig:=new(oid,str);Fsig.col_name("signature");
var Fhelp:=new(oid,str);Fhelp.col_name("help");
var Fnts:=new(oid,str);

var Unknown_mods:=MODULES.select("UNKNOWN").sort().copy();
table(Unknown_mods.reverse().col_name(sprintf("%i modules",Unknown_mods.count())));
#-----------------#
# 0 modules	  #
#-----------------#
[ "backup"	  ]
[ "restore"	  ]
Unknown_mods@batloop() {
	var The_mod:=$h;
	printf("\nModule: \"%s\"\n\n",The_mod);
	module($h);

	var Mod_fcn:=sdiff(monet_fcntbl.reverse(),Static_fcn).reverse();
	Mod_fcn.sort()@batloop() {
	    var addThis:=false;
	    if (not(monet_fcn_mid.exist($t))) {
		addThis:=true;
	    } else {
		var m:=monet_mod_nme.find(monet_fcn_mid.find($t));
		if (m.startsWith("_")) {
		    m:=string(m,1);
		}
		if (m = The_mod) {
		    addThis:=true;
		}
	    }
	    if (addThis) {
		var Tname:=$h;
		var Ttype:=help_tpe(monet_fcn_tpe.find($t));
		var Tsig:=format_fcn_sig($t);
		var Thelp:="";
		if (monet_fcn_dsc.exist($t)) {
			Thelp:=monet_fcn_dsc.find($t);
		} else {
			Thelp:="not available";
		}
		Fname.insert($t,Tname);
		Ftype.insert($t,Ttype);
		Fsig.insert($t,Tsig);
		Fhelp.insert($t,Thelp);
		Fnts.insert($t,sprintf("%s %s %s",Tname,Ttype,Tsig));
	    }
	}

	drop($h);
	Static_fcn:=sunion(Static_fcn,monet_fcntbl.reverse());

	Fnts.count().print();
	Fnts.reverse().sort().reverse()@batloop() {
		FnameS.insert($h,Fname.find($h));
	}
	FnameS.count().print(); table(1,FnameS,Ftype,Fsig,Fhelp);

	Fname.delete();
	FnameS.delete();
	Ftype.delete();
	Fsig.delete();
	Fhelp.delete();
	Fnts.delete();
}

Module: "backup"

[ 27 ]
[ 27 ]
#-----------------------------------------------------------------------------------------------------------------------------------------#
# function			type		signature								help			  # name
# str			str		str									str			  # type
#-----------------------------------------------------------------------------------------------------------------------------------------#
[ "CTderive",		  "PROC:      ",  "CTderive(BAT[oid,any], BAT[oid,any]) : grp",				  "not available"	  ]
[ "CTgroup",		  "PROC:      ",  "CTgroup(BAT[oid,any], BAT[oid,any]) : grp",				  "not available"	  ]
[ "CTorderby",		  "PROC:      ",  "CTorderby(BAT[oid,any], BAT[oid,any]) : BAT[oid,oid]",		  "not available"	  ]
[ "CTorderby_rev",	  "PROC:      ",  "CTorderby_rev(BAT[oid,any], BAT[oid,any]) : BAT[oid,oid]",		  "not available"	  ]
[ "CTsubgroup",		  "PROC:      ",  "CTsubgroup(BAT[oid,oid], BAT[oid,any], BAT[oid,any]) : BAT[oid,oid]",  "not available"	  ]
[ "backup",		  "PROC:      ",  "backup(str) : void",							  "not available"	  ]
[ "bat_ttype",		  "PROC:      ",  "bat_ttype(BAT[any,any]) : str",					  "not available"	  ]
[ "dump_data",		  "PROC:      ",  "dump_data(BAT[str,BAT], BAT[str,BAT], str, int) : void",		  "not available"	  ]
[ "dump_data",		  "PROC:      ",  "dump_data(BAT[str,BAT], str, int) : void",				  "not available"	  ]
[ "dump_format",	  "PROC:      ",  "dump_format(BAT[void,BAT], str) : BAT[str,BAT]",			  "not available"	  ]
[ "dump_seps",		  "PROC:      ",  "dump_seps(BAT[void,BAT]) : BAT[void,str]",				  "not available"	  ]
[ "export",		  "PROC:      ",  "export(BAT[any,any], str) : void",					  "not available"	  ]
[ "extend",		  "PROC:      ",  "extend(grp) : BAT[any,int]",						  "not available"	  ]
[ "fclose",		  "PROC:      ",  "fclose(Stream) : void",						  "not available"	  ]
[ "fflush",		  "PROC:      ",  "fflush(Stream) : void",						  "not available"	  ]
[ "fopen",		  "PROC:      ",  "fopen(str, str) : Stream",						  "not available"	  ]
[ "fputs",		  "PROC:      ",  "fputs(str, Stream) : void",						  "not available"	  ]
[ "grp_dump",		  "PROC:      ",  "grp_dump(BAT[any,any]) : str",					  "not available"	  ]
[ "histogram",		  "PROC:      ",  "histogram(grp) : BAT[any,int]",					  "not available"	  ]
[ "import",		  "PROC:      ",  "import(BAT[any,any], str) : BAT[any,any]",				  "not available"	  ]
[ "map",		  "PROC:      ",  "map(grp) : BAT[oid,oid]",						  "not available"	  ]
[ "orderby_table",	  "PROC:      ",  "orderby_table(str, str, ..BAT[any::1,any]..) : void",		  "not available"	  ]
[ "print",		  "PROC:      ",  "print(str, BAT[any::1,any], ..BAT[any::1,any]..) : void",		  "not available"	  ]
[ "seqinfo",		  "PROC:      ",  "seqinfo(BAT[any,any]) : str",					  "not available"	  ]
[ "table",		  "PROC:      ",  "table(str, BAT[any::1,any], ..BAT[any::1,any]..) : void",		  "not available"	  ]
[ "{count}",		  "PROC:      ",  "{count}(BAT[oid,bit], BAT[oid,oid], BAT[oid,int]) : BAT[oid,int]",	  "not available"	  ]
[ "{count}",		  "PROC:      ",  "{count}(BAT[void,bit], BAT[void,oid], BAT[oid,int]) : BAT[oid,int]",	  "not available"	  ]

Module: "restore"

[ 13 ]
[ 13 ]
#---------------------------------------------------------------------------------------------------------------------------------#
# function			type		signature							help			  # name
# str			str		str								str			  # type
#---------------------------------------------------------------------------------------------------------------------------------#
[ "bat_ttype",		  "PROC:      ",  "bat_ttype(BAT[any,any]) : str",				  "not available"	  ]
[ "dump_data",		  "PROC:      ",  "dump_data(BAT[str,BAT], BAT[str,BAT], str, int) : void",	  "not available"	  ]
[ "dump_data",		  "PROC:      ",  "dump_data(BAT[str,BAT], str, int) : void",			  "not available"	  ]
[ "dump_format",	  "PROC:      ",  "dump_format(BAT[void,BAT], str) : BAT[str,BAT]",		  "not available"	  ]
[ "dump_seps",		  "PROC:      ",  "dump_seps(BAT[void,BAT]) : BAT[void,str]",			  "not available"	  ]
[ "export",		  "PROC:      ",  "export(BAT[any,any], str) : void",				  "not available"	  ]
[ "fclose",		  "PROC:      ",  "fclose(Stream) : void",					  "not available"	  ]
[ "fflush",		  "PROC:      ",  "fflush(Stream) : void",					  "not available"	  ]
[ "fopen",		  "PROC:      ",  "fopen(str, str) : Stream",					  "not available"	  ]
[ "fputs",		  "PROC:      ",  "fputs(str, Stream) : void",					  "not available"	  ]
[ "import",		  "PROC:      ",  "import(BAT[any,any], str) : BAT[any,any]",			  "not available"	  ]
[ "load_persistent",	  "PROC:      ",  "load_persistent(str) : int",					  "not available"	  ]
[ "restore",		  "PROC:      ",  "restore(str) : void",					  "not available"	  ]

quit();

# 15:30:12 >  
# 15:30:12 >  Done.
# 15:30:12 >  

