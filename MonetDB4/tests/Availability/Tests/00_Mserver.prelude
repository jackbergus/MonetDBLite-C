setoid(oid(10000000));

var MODULES:=new(str,str);
MODULES.rename("MODULES");
MODULES.set(TRUE);
MODULES.persists(TRUE);
MODULES.save();
MODULES.commit();

view_modules().reverse().kunique().sort()@batloop() { MODULES.insert($h,"UNKNOWN"); }

MODULES.replace("aggr",      "plain");
MODULES.replace("aggrX3",    "plain");
MODULES.replace("alarm",     "plain");
MODULES.replace("algebra",   "plain");
MODULES.replace("arith",     "plain");
MODULES.replace("ascii_io",  "plain");
MODULES.replace("bat_arith", "plain");
MODULES.replace("bat",       "plain");
MODULES.replace("blob",      "plain");
MODULES.replace("calib",     "plain");
MODULES.replace("counters",  "plain");
MODULES.replace("decimal",   "plain");
MODULES.replace("enum",      "plain");
MODULES.replace("io",        "plain");
MODULES.replace("kernel",    "plain");
MODULES.replace("lock",      "plain");
MODULES.replace("logger",    "plain");
MODULES.replace("mapi",      "plain");
MODULES.replace("mkey",      "plain");
MODULES.replace("mmath",     "plain");
MODULES.replace("monettime", "plain");
MODULES.replace("pcl",       "plain");
MODULES.replace("pcre",      "plain");
MODULES.replace("pqueue",    "plain");
MODULES.replace("profiler",  "plain");
MODULES.replace("radix",     "plain");
MODULES.replace("remap",     "plain");
MODULES.replace("salgebra",  "plain");
MODULES.replace("stats",     "plain");
MODULES.replace("streams",   "plain");
MODULES.replace("sys",       "plain");
MODULES.replace("tcpip",     "plain");
MODULES.replace("trans",     "plain");
MODULES.replace("unix",      "plain");
MODULES.replace("upgrade",   "plain");
MODULES.replace("url",       "plain");
MODULES.replace("xtables",   "plain");
MODULES.replace("array",     "contrib");
MODULES.replace("bat_cast",  "contrib");
MODULES.replace("bat_mmath", "contrib");
MODULES.replace("bitset",    "contrib");
MODULES.replace("bitvector", "contrib");
MODULES.replace("color",     "contrib");
MODULES.replace("ddbench",   "contrib");
MODULES.replace("image",     "contrib");
MODULES.replace("iterator",  "contrib");
MODULES.replace("malalgebra","contrib");
MODULES.replace("mel",       "contrib");
MODULES.replace("mprof",     "contrib");
MODULES.replace("oo7",       "contrib");
MODULES.replace("uchr",      "contrib");
MODULES.replace("qt",        "contrib");
MODULES.replace("txtsim",    "contrib");
MODULES.replace("vector",    "contrib");
MODULES.replace("wisc",      "contrib");
#MODULES.replace("gdkmem",    "misc");
#MODULES.replace("vector",    "misc");
MODULES.replace("CC_odmg",   "odmg");
MODULES.replace("jOdmg",     "odmg");
MODULES.replace("odmg",      "odmg");
MODULES.replace("signature" ,"odmg");
MODULES.replace("BasicOdmg" ,"odmgTest");
MODULES.replace("CC_Test",   "odmgTest");
MODULES.replace("Meta",      "odmgTest");
MODULES.replace("Example",   "odmgTest");
MODULES.replace("OdmgTest",  "odmgTest");
MODULES.replace("Test7",     "odmgTest");
MODULES.replace("TestUse",   "odmgTest");
MODULES.replace("TransTest", "odmgTest");
#MODULES.replace("gis",       "geometry");
#MODULES.replace("gisbulk",   "geometry");
#MODULES.replace("blg",       "geometry");
#MODULES.replace("fmap",      "geometry");
#MODULES.replace("opengis",   "geometry");
#MODULES.replace("tdcel",     "geometry");

PROC mmn() : BAT[oid,str] {
	return(monet_mod_nme.kdiff(monet_mod_nme.[startsWith]("_").uselect(true)));
}

mmn()@batloop() { MODULES.replace($t,"static"); }

#MODULES.delete("CC_Test");
#MODULES.delete("Test");

MODULES.save();
MODULES.commit();

MODULES.sort().print();

commit();

