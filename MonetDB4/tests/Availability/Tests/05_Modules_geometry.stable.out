stdout of test '05_Modules_geometry` in directory 'tests/Availability` itself:

#> Mtest:	milS 05_Modules_geometry milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_Availability -single 05_Modules_geometry.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:05_Modules_geometry.milS


#You are system administrator (adm)!
setoid(oid(20000000));

Static_fcn:=monet_fcntbl.reverse.copy;

Fname:=new(oid,str);Fname.col_name("function");
FnameS:=new(oid,str);FnameS.col_name("function");
Ftype:=new(oid,str);Ftype.col_name("type");
Fsig:=new(oid,str);Fsig.col_name("signature");
Fhelp:=new(oid,str);Fhelp.col_name("help");
Fnts:=new(oid,str);

Geometry_mods:=MODULES.select("geometry").sort.copy;
table(Geometry_mods.reverse.col_name(sprintf("%i modules",Geometry_mods.count)));
#-----------------#
# 6 modules	  #
#-----------------#
[ "blg"		  ]
[ "fmap"	  ]
[ "gis"		  ]
[ "gisbulk"	  ]
[ "opengis"	  ]
[ "tdcel"	  ]
Geometry_mods@batloop() {
	The_mod:=$h;
	printf("\nModule: \"%s\"\n\n",The_mod);
	module($h);

	Mod_fcn:=sdiff(monet_fcntbl.reverse,Static_fcn).reverse;
	Mod_fcn.sort@batloop() {
	    addThis:=false;
	    if (not(monet_fcn_mid.exist($t))) {
		addThis:=true;
	    } else {
		m:=monet_mod_nme.find(monet_fcn_mid.find($t));
		if (m.startsWith("_")) {
		    m:=string(m,1);
		}
		if (m = The_mod) {
		    addThis:=true;
		}
	    }
	    if (addThis) {
		Tname:=$h;
		Ttype:=help_tpe(monet_fcn_tpe.find($t));
		Tsig:=format_fcn_sig($t);
		Thelp:="";
		if (monet_fcn_dsc.exist($t)) {
			Thelp:=monet_fcn_dsc.find($t);
		} else {
			Thelp:="not available";
		}
		Fname.insert($t,Tname);
		Ftype.insert($t,Ttype);
		Fsig.insert($t,Tsig);
		Fhelp.insert($t,Thelp);
		Fnts.insert($t,sprintf("%s %s %s",Tname,Ttype,Tsig));
	    }
	}

	drop($h);
	Static_fcn:=sunion(Static_fcn,monet_fcntbl.reverse);

	Fnts.count.print;
	Fnts.reverse.sort.reverse@batloop() {
		FnameS.insert($h,Fname.find($h));
	}
	FnameS.count.print; table("1",FnameS,Ftype,Fsig,Fhelp);

	Fname.delete;
	FnameS.delete;
	Ftype.delete;
	Fsig.delete;
	Fhelp.delete;
	Fnts.delete;
}

Module: "blg"

[ 3 ]
[ 3 ]
#-----------------------------------------------------------------------------------------#
# tmp_28	| type		| signature					| help	  #
#-----------------------------------------------------------------------------------------#
[ "create_blg",	  "COMMAND: ",	  "create_blg(polyline) : blg",			  ""	  ]
[ "printblg",	  "COMMAND: ",	  "printblg(blg) : void",			  ""	  ]
[ "reduce",	  "COMMAND: ",	  "reduce(polyline, blg, dbl) : polyline",	  ""	  ]

Module: "fmap"

[ 36 ]
[ 36 ]
#-----------------------------------------------------------------------------------------------------------------------------------------#
# tmp_28			| type		| signature							| help			  #
#-----------------------------------------------------------------------------------------------------------------------------------------#
[ "cmap_add_constraint",	  "COMMAND: ",	  "cmap_add_constraint(BAT[int,BAT], polyline) : int",		  ""			  ]
[ "cmap_add_constraint",	  "COMMAND: ",	  "cmap_add_constraint(BAT[int,BAT], segment) : void",		  ""			  ]
[ "cmap_create",		  "COMMAND: ",	  "cmap_create() : void",					  ""			  ]
[ "cmap_improve",		  "COMMAND: ",	  "cmap_improve(BAT[int,BAT]) : int",				  ""			  ]
[ "cmap_improve_special",	  "COMMAND: ",	  "cmap_improve_special(BAT[int,BAT], box) : int",		  ""			  ]
[ "cmap_persists",		  "COMMAND: ",	  "cmap_persists(BAT[int,BAT], bit) : void",			  ""			  ]
[ "dcel_create",		  "COMMAND: ",	  "dcel_create() : void",					  ""			  ]
[ "dcel_delete_edge",		  "COMMAND: ",	  "dcel_delete_edge(BAT[int,BAT], oid) : void",			  ""			  ]
[ "dcel_delete_vertex_special",	  "COMMAND: ",	  "dcel_delete_vertex_special(BAT[int,BAT], oid, box, BAT[oid,interval], BAT[oid,interval], BAT[oid,interval]) : void", ""			  ]
[ "dcel_face_geometry",		  "COMMAND: ",	  "dcel_face_geometry(BAT[int,BAT]) : BAT[oid,polygon]",	  ""			  ]
[ "dcel_face_geometry",		  "COMMAND: ",	  "dcel_face_geometry(BAT[int,BAT], oid) : polygon",		  ""			  ]
[ "dcel_rename",		  "COMMAND: ",	  "dcel_rename(BAT[int,BAT], str) : void",			  ""			  ]
[ "dcel_to_cmap",		  "COMMAND: ",	  "dcel_to_cmap(BAT[int,BAT]) : void",				  ""			  ]
[ "dcel_triangulate",		  "COMMAND: ",	  "dcel_triangulate(BAT[int,BAT]) : void",			  ""			  ]
[ "face_geometry_3d",		  "COMMAND: ",	  "face_geometry_3d(BAT[int,BAT], oid, BAT[oid,int]) : triangle3d", ""			  ]
[ "face_geometry_special",	  "COMMAND: ",	  "face_geometry_special(BAT[int,BAT], oid) : polygon",		  ""			  ]
[ "face_geometry_special",	  "PROC: ",	  "face_geometry_special(BAT[int,BAT], BAT[oid,interval], box, dbl) : BAT[oid,triangle]", "not available"	  ]
[ "fmap_noverbose",		  "COMMAND: ",	  "fmap_noverbose() : void",					  ""			  ]
[ "fmap_verbose",		  "COMMAND: ",	  "fmap_verbose() : void",					  ""			  ]
[ "pg_add_cpolygon",		  "COMMAND: ",	  "pg_add_cpolygon(BAT[int,BAT], cpolygon) : int",		  ""			  ]
[ "pg_add_point",		  "COMMAND: ",	  "pg_add_point(BAT[int,BAT], point) : void",			  ""			  ]
[ "pg_add_points",		  "COMMAND: ",	  "pg_add_points(BAT[int,BAT], BAT[any,point]) : void",		  ""			  ]
[ "pg_add_polygon",		  "COMMAND: ",	  "pg_add_polygon(BAT[int,BAT], polygon) : int",		  ""			  ]
[ "pg_add_polyline",		  "COMMAND: ",	  "pg_add_polyline(BAT[int,BAT], polyline) : int",		  ""			  ]
[ "pg_add_segment",		  "COMMAND: ",	  "pg_add_segment(BAT[int,BAT], segment) : void",		  ""			  ]
[ "pg_create_bat",		  "COMMAND: ",	  "pg_create_bat() : BAT[int,BAT]",				  ""			  ]
[ "pg_delete_vertex",		  "COMMAND: ",	  "pg_delete_vertex(BAT[int,BAT], oid) : void",			  ""			  ]
[ "pg_delete_vertex_special",	  "COMMAND: ",	  "pg_delete_vertex_special(BAT[int,BAT], oid, box) : void",	  ""			  ]
[ "pg_edge_geometry",		  "COMMAND: ",	  "pg_edge_geometry(BAT[int,BAT]) : BAT[oid,segment]",		  ""			  ]
[ "pg_edge_geometry",		  "COMMAND: ",	  "pg_edge_geometry(BAT[int,BAT], oid) : segment",		  ""			  ]
[ "pg_edge_geometry",		  "COMMAND: ",	  "pg_edge_geometry(BAT[int,BAT], oid) : segment",		  ""			  ]
[ "pg_makeloops",		  "COMMAND: ",	  "pg_makeloops(BAT[int,BAT], BAT[oid,polygon], BAT[oid,polygon]) : void", ""			  ]
[ "pg_makemonotone",		  "COMMAND: ",	  "pg_makemonotone(BAT[int,BAT]) : void",			  ""			  ]
[ "pg_select_vertices",		  "COMMAND: ",	  "pg_select_vertices(BAT[int,BAT], BAT[oid,int]) : BAT[oid,oid]", ""			  ]
[ "pg_select_vertices_special",	  "COMMAND: ",	  "pg_select_vertices_special(BAT[int,BAT], BAT[oid,any], BAT[oid,interval], BAT[oid,interval]) : BAT[oid,oid]", ""			  ]
[ "pg_to_dcel",			  "COMMAND: ",	  "pg_to_dcel(BAT[int,BAT]) : oid",				  ""			  ]

Module: "gis"

[ 338 ]
[ 338 ]
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------#
# tmp_28		| type		| signature						| help								  #
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------#
[ "!=",			  "OPERATOR: ",	  "!=(box, box) : bit",					  ""								  ]
[ "!=",			  "OPERATOR: ",	  "!=(circle, circle) : bit",				  ""								  ]
[ "!=",			  "OPERATOR: ",	  "!=(cpolygon, cpolygon) : bit",			  ""								  ]
[ "!=",			  "OPERATOR: ",	  "!=(point, point) : bit",				  ""								  ]
[ "!=",			  "OPERATOR: ",	  "!=(point3d, point3d) : bit",				  ""								  ]
[ "!=",			  "OPERATOR: ",	  "!=(polygon, polygon) : bit",				  ""								  ]
[ "!=",			  "OPERATOR: ",	  "!=(polyline, polyline) : bit",			  ""								  ]
[ "!=",			  "OPERATOR: ",	  "!=(segment, segment) : bit",				  ""								  ]
[ "!=",			  "OPERATOR: ",	  "!=(shape, shape) : bit",				  ""								  ]
[ "!=",			  "OPERATOR: ",	  "!=(triangle3d, triangle3d) : bit",			  ""								  ]
[ "=",			  "OPERATOR: ",	  "=(box, box) : bit",					  ""								  ]
[ "=",			  "OPERATOR: ",	  "=(circle, circle) : bit",				  ""								  ]
[ "=",			  "OPERATOR: ",	  "=(cpolygon, cpolygon) : bit",			  ""								  ]
[ "=",			  "OPERATOR: ",	  "=(point, point) : bit",				  ""								  ]
[ "=",			  "OPERATOR: ",	  "=(point3d, point3d) : bit",				  ""								  ]
[ "=",			  "OPERATOR: ",	  "=(polygon, polygon) : bit",				  ""								  ]
[ "=",			  "OPERATOR: ",	  "=(polyline, polyline) : bit",			  ""								  ]
[ "=",			  "OPERATOR: ",	  "=(segment, segment) : bit",				  ""								  ]
[ "=",			  "OPERATOR: ",	  "=(shape, shape) : bit",				  ""								  ]
[ "=",			  "OPERATOR: ",	  "=(triangle3d, triangle3d) : bit",			  ""								  ]
[ "add",		  "COMMAND: ",	  "add(box, point) : box",				  ""								  ]
[ "add",		  "COMMAND: ",	  "add(point, point) : point",				  ""								  ]
[ "add",		  "COMMAND: ",	  "add(point3d, point3d) : point3d",			  "Add the given vectors"					  ]
[ "add",		  "COMMAND: ",	  "add(polygon, point) : polygon",			  ""								  ]
[ "add",		  "COMMAND: ",	  "add(polyline, point) : polyline",			  ""								  ]
[ "addhole",		  "COMMAND: ",	  "addhole(cpolygon, polygon) : cpolygon",		  "Append polygon p as a hole to cpolygon c and return it"	  ]
[ "addminitree",	  "COMMAND: ",	  "addminitree(cpolygon, int) : cpolygon",		  "Add minitrees to this cpolygon"				  ]
[ "addminitree",	  "COMMAND: ",	  "addminitree(polygon, int) : polygon",		  "Add minitrees to this polygon"				  ]
[ "addminitree",	  "COMMAND: ",	  "addminitree(polyline, int) : polyline",		  "Add minitrees to this polylin"				  ]
[ "angle",		  "COMMAND: ",	  "angle(dbl, dbl) : dbl",				  ""								  ]
[ "angle",		  "COMMAND: ",	  "angle(point, point, point) : dbl",			  ""								  ]
[ "angle",		  "COMMAND: ",	  "angle(point3d) : dbl",				  "Calculate the angle between this vector and the z=0 plane"	  ]
[ "angle",		  "COMMAND: ",	  "angle(segment) : dbl",				  ""								  ]
[ "append",		  "COMMAND: ",	  "append(polyline, polyline) : polyline",		  ""								  ]
[ "area",		  "COMMAND: ",	  "area(box) : dbl",					  "Return area of given box"					  ]
[ "area",		  "COMMAND: ",	  "area(circle) : dbl",					  "Return area of given circle"					  ]
[ "area",		  "COMMAND: ",	  "area(cpolygon) : dbl",				  "Return area of given cpolygon"				  ]
[ "area",		  "COMMAND: ",	  "area(polygon) : dbl",				  "Return area of given polygon"				  ]
[ "area",		  "COMMAND: ",	  "area(shape) : dbl",					  "Return area of given shape"					  ]
[ "area",		  "COMMAND: ",	  "area(triangle) : dbl",				  "Return area of given triangle"				  ]
[ "bbox",		  "COMMAND: ",	  "bbox(BAT[any,box3d]) : box3d",			  ""								  ]
[ "bbox",		  "COMMAND: ",	  "bbox(BAT[any,box]) : box",				  ""								  ]
[ "bbox",		  "COMMAND: ",	  "bbox(box) : box",					  "Returns minimum bounding rectangle of given box"		  ]
[ "bbox",		  "COMMAND: ",	  "bbox(box, box) : box",				  ""								  ]
[ "bbox",		  "COMMAND: ",	  "bbox(box3d) : box3d",				  "Returns minimum bounding rectangle of given box"		  ]
[ "bbox",		  "COMMAND: ",	  "bbox(box3d, box3d) : box3d",				  ""								  ]
[ "bbox",		  "COMMAND: ",	  "bbox(circle) : box",					  "Returns minimum bounding rectangle of given circle"		  ]
[ "bbox",		  "COMMAND: ",	  "bbox(cpolygon) : box",				  "Returns minimum bounding rectangle of given Complex Polygon"	  ]
[ "bbox",		  "COMMAND: ",	  "bbox(point) : box",					  "Returns minimum bounding rectangle of given point"		  ]
[ "bbox",		  "COMMAND: ",	  "bbox(polygon) : box",				  "Returns minimum boundin rectangle of given polygon"		  ]
[ "bbox",		  "COMMAND: ",	  "bbox(polyline) : box",				  "Returns minimum bounding rectangle of given Polyline"	  ]
[ "bbox",		  "COMMAND: ",	  "bbox(segment) : box",				  "Returns minimum bounding rectangle of given segment"		  ]
[ "bbox",		  "COMMAND: ",	  "bbox(shape) : box",					  "Returns minimum bounding rectangle of given shape"		  ]
[ "blowup",		  "COMMAND: ",	  "blowup(box, dbl) : box",				  ""								  ]
[ "bottom",		  "COMMAND: ",	  "bottom(box) : dbl",					  "Return bottom margin of box"					  ]
[ "boundary",		  "COMMAND: ",	  "boundary(cpolygon) : polygon",			  "Return boundary of cpolygon"					  ]
[ "boundary",		  "COMMAND: ",	  "boundary(polygon) : polyline",			  ""								  ]
[ "center",		  "COMMAND: ",	  "center(box) : point",				  "Return centerpoint of box"					  ]
[ "center",		  "COMMAND: ",	  "center(circle) : point",				  "Return centerpoint of circle"				  ]
[ "center",		  "COMMAND: ",	  "center(segment) : point",				  ""								  ]
[ "centroid",		  "COMMAND: ",	  "centroid(triangle) : point",				  "Calculate centroid of triangle"				  ]
[ "clockwise",		  "COMMAND: ",	  "clockwise(polygon) : bit",				  ""								  ]
[ "clockwise",		  "COMMAND: ",	  "clockwise(triangle) : bit",				  "Return whether triangle has clockwise orientation"		  ]
[ "closed",		  "COMMAND: ",	  "closed(polyline) : bit",				  ""								  ]
[ "convex_hull",	  "COMMAND: ",	  "convex_hull(BAT[any,point]) : polygon",		  ""								  ]
[ "convex_hull",	  "COMMAND: ",	  "convex_hull(cpolygon) : polygon",			  ""								  ]
[ "convex_hull",	  "COMMAND: ",	  "convex_hull(polygon) : polygon",			  ""								  ]
[ "convex_hull",	  "COMMAND: ",	  "convex_hull(polyline) : polygon",			  ""								  ]
[ "create",		  "COMMAND: ",	  "create(box, interval) : box3d",			  ""								  ]
[ "create",		  "COMMAND: ",	  "create(dbl, dbl) : point",				  "Create point with given x and y coordinates"			  ]
[ "create",		  "COMMAND: ",	  "create(dbl, dbl, dbl) : point3d",			  "Create point3d with given x, y and z coordinates"		  ]
[ "create",		  "COMMAND: ",	  "create(interval, interval, interval) : box3d",	  "Create a box3d with given intervals"				  ]
[ "create",		  "COMMAND: ",	  "create(point, point) : segment",			  "Create segment with given source and destination"		  ]
[ "create",		  "COMMAND: ",	  "create(point, point, point) : triangle",		  "Create triangle with p1,p2,p3 as cornerpoints"		  ]
[ "create",		  "COMMAND: ",	  "create(point3d, point3d, point3d) : triangle3d",	  "Create a triangle3d with given coordinates"			  ]
[ "create",		  "COMMAND: ",	  "create(polygon) : cpolygon",				  "Create a cpolygon without holes with the given polygon as boundary"  ]
[ "create_circle",	  "COMMAND: ",	  "create_circle(point, point) : circle",		  "Return smallest circle through 2 given boundary points"	  ]
[ "create_circle",	  "COMMAND: ",	  "create_circle(point, point, point) : circle",	  "Return smallest circle through 3 given boundary points"	  ]
[ "create_interval",	  "COMMAND: ",	  "create_interval(dbl, dbl) : interval",		  "Create interval"						  ]
[ "create_minitree",	  "COMMAND: ",	  "create_minitree(polygon, int) : minitree",		  "Create a minitree for polygon p with maximun nodesize mn"	  ]
[ "depth",		  "COMMAND: ",	  "depth(minitree) : int",				  ""								  ]
[ "dest",		  "COMMAND: ",	  "dest(polyline) : point",				  ""								  ]
[ "dest",		  "COMMAND: ",	  "dest(segment) : point",				  "Return destination of segment"				  ]
[ "dest_direction",	  "COMMAND: ",	  "dest_direction(polyline) : dbl",			  ""								  ]
[ "dimension",		  "COMMAND: ",	  "dimension(box) : int",				  ""								  ]
[ "dimension",		  "COMMAND: ",	  "dimension(circle) : int",				  ""								  ]
[ "dimension",		  "COMMAND: ",	  "dimension(cpolygon) : int",				  ""								  ]
[ "dimension",		  "COMMAND: ",	  "dimension(point) : int",				  ""								  ]
[ "dimension",		  "COMMAND: ",	  "dimension(polygon) : int",				  ""								  ]
[ "dimension",		  "COMMAND: ",	  "dimension(polyline) : int",				  ""								  ]
[ "dimension",		  "COMMAND: ",	  "dimension(segment) : int",				  ""								  ]
[ "dimension",		  "COMMAND: ",	  "dimension(triangle) : int",				  ""								  ]
[ "direction",		  "COMMAND: ",	  "direction(point, point) : dbl",			  ""								  ]
[ "distance",		  "COMMAND: ",	  "distance(box, box) : dbl",				  "Return whether given box and box distance"			  ]
[ "distance",		  "COMMAND: ",	  "distance(box, point) : dbl",				  "Return whether given box and point distance"			  ]
[ "distance",		  "COMMAND: ",	  "distance(circle, circle) : dbl",			  "Return whether given circle and circle distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(circle, point) : dbl",			  "Return whether given circle and point distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(circle, segment) : dbl",			  "Return whether given circle and segment distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(cpolygon, cpolygon) : dbl",			  "Return whether given cpolygon and cpolygon distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(cpolygon, point) : dbl",			  "Return whether given cpolygon and point distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(cpolygon, polygon) : dbl",			  "Return whether given cpolygon and polygon distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(cpolygon, polyline) : dbl",			  "Return whether given cpolygon and polyline distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(cpolygon, segment) : dbl",			  "Return whether given cpolygon and segment distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(point, box) : dbl",				  "Return whether given point and box distance"			  ]
[ "distance",		  "COMMAND: ",	  "distance(point, circle) : dbl",			  "Return whether given point and circle distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(point, cpolygon) : dbl",			  "Return whether given point and cpolygon distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(point, point) : dbl",			  "Return whether given point and point distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(point, polygon) : dbl",			  "Return whether given point and polygon distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(point, polyline) : dbl",			  "Return whether given point and polyline distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(point, segment) : dbl",			  "Return whether given point and segment distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(point3d, point3d) : dbl",			  "return the distance between the given vectors"		  ]
[ "distance",		  "COMMAND: ",	  "distance(polygon, cpolygon) : dbl",			  "Return whether given polygon and cpolygon distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(polygon, minitree, point) : dbl",		  "Return distance between pgn and pnt using minitree m."	  ]
[ "distance",		  "COMMAND: ",	  "distance(polygon, minitree, polygon, minitree) : dbl", "Return distance between two polyogns using minitrees."	  ]
[ "distance",		  "COMMAND: ",	  "distance(polygon, minitree, segment) : dbl",		  "Return distance between p and s using minitree m."		  ]
[ "distance",		  "COMMAND: ",	  "distance(polygon, point) : dbl",			  "Return whether given polygon and point distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(polygon, polygon) : dbl",			  "Return whether given polygon and polygon distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(polygon, polyline) : dbl",			  "Return whether given polygon and polyline distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(polygon, segment) : dbl",			  "Return whether given polygon and segment distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(polyline, cpolygon) : dbl",			  "Return whether given polyline and cpolygon distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(polyline, point) : dbl",			  "Return whether given polyline and point distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(polyline, polygon) : dbl",			  "Return whether given polyline and polygon distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(polyline, polyline) : dbl",			  "Return whether given polyline and polyline distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(polyline, segment) : dbl",			  "Return whether given polyline and segment distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(segment, circle) : dbl",			  "Return whether given segment and circle distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(segment, cpolygon) : dbl",			  "Return whether given segment and cpolygon distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(segment, point) : dbl",			  "Return whether given segment and point distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(segment, polygon) : dbl",			  "Return whether given segment and polygon distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(segment, polyline) : dbl",			  "Return whether given segment and polyline distance"		  ]
[ "distance",		  "COMMAND: ",	  "distance(segment, segment) : dbl",			  "Return whether given segment and segment distance"		  ]
[ "divide",		  "COMMAND: ",	  "divide(box, dbl) : box",				  ""								  ]
[ "divide",		  "COMMAND: ",	  "divide(point, dbl) : point",				  ""								  ]
[ "divide",		  "COMMAND: ",	  "divide(polygon, dbl) : polygon",			  ""								  ]
[ "divide",		  "COMMAND: ",	  "divide(polyline, dbl) : polyline",			  ""								  ]
[ "east",		  "COMMAND: ",	  "east(box) : segment",				  "Return left segment of box"					  ]
[ "extract",		  "COMMAND: ",	  "extract(polygon) : minitree",			  "Extract a minitree from a polygon"				  ]
[ "extract",		  "COMMAND: ",	  "extract(polyline) : minitree",			  "Extract a minitree from a polyline"				  ]
[ "gcenter",		  "COMMAND: ",	  "gcenter(polygon) : point",				  ""								  ]
[ "hash_val",		  "COMMAND: ",	  "hash_val(box) : int",				  "Return hash value of given box"				  ]
[ "hash_val",		  "COMMAND: ",	  "hash_val(circle) : int",				  "Return hash value of given circle"				  ]
[ "hash_val",		  "COMMAND: ",	  "hash_val(cpolygon) : int",				  "Return hash value of given cpolygon"				  ]
[ "hash_val",		  "COMMAND: ",	  "hash_val(point) : int",				  "Return hash value of given point"				  ]
[ "hash_val",		  "COMMAND: ",	  "hash_val(polygon) : int",				  "Return hash value of given polygon"				  ]
[ "hash_val",		  "COMMAND: ",	  "hash_val(polyline) : int",				  "Return hash value of given polyline"				  ]
[ "hash_val",		  "COMMAND: ",	  "hash_val(segment) : int",				  "Return hash value of given segment"				  ]
[ "hash_val",		  "COMMAND: ",	  "hash_val(shape) : int",				  "Return hash value of given shape"				  ]
[ "hash_val",		  "COMMAND: ",	  "hash_val(triangle) : int",				  "Return hash value of given triangle"				  ]
[ "hasminitree",	  "COMMAND: ",	  "hasminitree(cpolygon) : bit",			  "Return whether this cpolygon contains minitree"		  ]
[ "hasminitree",	  "COMMAND: ",	  "hasminitree(polygon) : bit",				  "Return whether this polygon contains minitree"		  ]
[ "hasminitree",	  "COMMAND: ",	  "hasminitree(polyline) : bit",			  "Return whether this polyline contains minitree"		  ]
[ "heapstatus",		  "COMMAND: ",	  "heapstatus(BAT[any,cpolygon]) : void",		  ""								  ]
[ "heapstatus",		  "COMMAND: ",	  "heapstatus(BAT[any,polygon]) : void",		  ""								  ]
[ "heapstatus",		  "COMMAND: ",	  "heapstatus(BAT[any,polyline]) : void",		  ""								  ]
[ "heapstatus",		  "COMMAND: ",	  "heapstatus(BAT[any,shape]) : void",			  ""								  ]
[ "height",		  "COMMAND: ",	  "height(box) : dbl",					  "Return height of box"					  ]
[ "hole",		  "COMMAND: ",	  "hole(cpolygon, int) : polygon",			  "Return geometry of a hole in cpolygon. number should be between 0 and nholes"  ]
[ "index",		  "COMMAND: ",	  "index(polygon, int) : point",			  ""								  ]
[ "index",		  "COMMAND: ",	  "index(polyline, int) : point",			  ""								  ]
[ "index",		  "COMMAND: ",	  "index(triangle, int) : point",			  ""								  ]
[ "info",		  "COMMAND: ",	  "info(cpolygon) : void",				  "Print some info on the cpolygon as GDKwarnings"		  ]
[ "inside",		  "COMMAND: ",	  "inside(box, box) : bit",				  ""								  ]
[ "inside",		  "COMMAND: ",	  "inside(circle, box) : bit",				  ""								  ]
[ "inside",		  "COMMAND: ",	  "inside(cpolygon, box) : bit",			  ""								  ]
[ "inside",		  "COMMAND: ",	  "inside(cpolygon, circle) : bit",			  "Return whether given cpolygon and circle inside"		  ]
[ "inside",		  "COMMAND: ",	  "inside(cpolygon, cpolygon) : bit",			  "Return whether given cpolygon and cpolygon inside"		  ]
[ "inside",		  "COMMAND: ",	  "inside(cpolygon, polygon) : bit",			  "Return whether given cpolygon and polygon inside"		  ]
[ "inside",		  "COMMAND: ",	  "inside(dbl, interval) : bit",			  ""								  ]
[ "inside",		  "COMMAND: ",	  "inside(point, box) : bit",				  ""								  ]
[ "inside",		  "COMMAND: ",	  "inside(point, circle) : bit",			  "Return whether given point and circle inside"		  ]
[ "inside",		  "COMMAND: ",	  "inside(point, cpolygon) : bit",			  "Return whether given point and cpolygon inside"		  ]
[ "inside",		  "COMMAND: ",	  "inside(point, polygon) : bit",			  "Return whether given point and polygon inside"		  ]
[ "inside",		  "COMMAND: ",	  "inside(point, polygon, minitree) : bit",		  "Return whether pnt is inside pgn using m."			  ]
[ "inside",		  "COMMAND: ",	  "inside(polygon, box) : bit",				  ""								  ]
[ "inside",		  "COMMAND: ",	  "inside(polygon, circle) : bit",			  "Return whether given polygon and circle inside"		  ]
[ "inside",		  "COMMAND: ",	  "inside(polygon, cpolygon) : bit",			  "Return whether given polygon and cpolygon inside"		  ]
[ "inside",		  "COMMAND: ",	  "inside(polygon, polygon) : bit",			  "Return whether given polygon and polygon inside"		  ]
[ "inside",		  "COMMAND: ",	  "inside(polyline, box) : bit",			  ""								  ]
[ "inside",		  "COMMAND: ",	  "inside(polyline, circle) : bit",			  "Return whether given polyline and circle inside"		  ]
[ "inside",		  "COMMAND: ",	  "inside(polyline, cpolygon) : bit",			  "Return whether given polyline and cpolygon inside"		  ]
[ "inside",		  "COMMAND: ",	  "inside(polyline, polygon) : bit",			  "Return whether given polyline and polygon inside"		  ]
[ "inside",		  "COMMAND: ",	  "inside(segment, box) : bit",				  ""								  ]
[ "inside",		  "COMMAND: ",	  "inside(segment, circle) : bit",			  "Return whether given segment and circle inside"		  ]
[ "inside",		  "COMMAND: ",	  "inside(segment, cpolygon) : bit",			  "Return whether given segment and cpolygon inside"		  ]
[ "inside",		  "COMMAND: ",	  "inside(segment, polygon) : bit",			  "Return whether given segment and polygon inside"		  ]
[ "inside",		  "COMMAND: ",	  "inside(triangle, box) : bit",			  ""								  ]
[ "interior",		  "COMMAND: ",	  "interior(polyline) : polygon",			  ""								  ]
[ "intersect",		  "COMMAND: ",	  "intersect(polyline, polyline) : bit",		  ""								  ]
[ "intersect",		  "COMMAND: ",	  "intersect(segment, segment) : bit",			  "Return whether given segment and segment intersect"		  ]
[ "intersection",	  "COMMAND: ",	  "intersection(segment, segment) : point",		  "Return whether given segment and segment intersection"	  ]
[ "left",		  "COMMAND: ",	  "left(box) : dbl",					  "Return left margin of box"					  ]
[ "length",		  "COMMAND: ",	  "length(segment) : dbl",				  "Return length of segment"					  ]
[ "lower_res",		  "COMMAND: ",	  "lower_res(polygon, dbl) : polygon",			  ""								  ]
[ "max",		  "COMMAND: ",	  "max(interval) : dbl",				  "Return max value of interval"				  ]
[ "max_line",		  "COMMAND: ",	  "max_line(segment, segment) : segment",		  ""								  ]
[ "min",		  "COMMAND: ",	  "min(interval) : dbl",				  "Return min value of interval"				  ]
[ "mini_depth",		  "COMMAND: ",	  "mini_depth(polygon) : int",				  "Return depth of associated minitree"				  ]
[ "mini_nbytes",	  "COMMAND: ",	  "mini_nbytes(polygon) : int",				  "Return number of bytes occupied by associated minitree"	  ]
[ "mini_nnodes",	  "COMMAND: ",	  "mini_nnodes(polygon) : int",				  "Return number of nodes of associated minitree"		  ]
[ "monotone",		  "COMMAND: ",	  "monotone(polygon, int, int) : bit",			  ""								  ]
[ "monotone",		  "COMMAND: ",	  "monotone(polyline, int, int) : bit",			  ""								  ]
[ "multiply",		  "COMMAND: ",	  "multiply(box, dbl) : box",				  ""								  ]
[ "multiply",		  "COMMAND: ",	  "multiply(point, dbl) : point",			  ""								  ]
[ "multiply",		  "COMMAND: ",	  "multiply(polygon, dbl) : polygon",			  ""								  ]
[ "multiply",		  "COMMAND: ",	  "multiply(polyline, dbl) : polyline",			  ""								  ]
[ "nbytes",		  "COMMAND: ",	  "nbytes(cpolygon) : int",				  "Return number of bytes occupied by cpolygon"			  ]
[ "nbytes",		  "COMMAND: ",	  "nbytes(minitree) : int",				  ""								  ]
[ "nbytes",		  "COMMAND: ",	  "nbytes(polygon) : int",				  "Return number of bytes occupied by polygon"			  ]
[ "nbytes",		  "COMMAND: ",	  "nbytes(polyline) : int",				  "Return number of bytes occupied by polyline"			  ]
[ "nbytes",		  "COMMAND: ",	  "nbytes(shape) : int",				  "Return number of bytes occupied by shape"			  ]
[ "nholes",		  "COMMAND: ",	  "nholes(cpolygon) : int",				  "Return number of holes in cpolygon"				  ]
[ "nnodes",		  "COMMAND: ",	  "nnodes(minitree) : int",				  ""								  ]
[ "north",		  "COMMAND: ",	  "north(box) : segment",				  "Return top segment of box"					  ]
[ "npoints",		  "COMMAND: ",	  "npoints(cpolygon) : int",				  "Return the total number of points in this polygon. this is the sum of the npoints of holes and boundary"  ]
[ "npoints",		  "COMMAND: ",	  "npoints(polygon) : int",				  ""								  ]
[ "npoints",		  "COMMAND: ",	  "npoints(polyline) : int",				  ""								  ]
[ "ok",			  "COMMAND: ",	  "ok(box) : bit",					  "Perform internal integrity check on box"			  ]
[ "ok",			  "COMMAND: ",	  "ok(circle) : bit",					  "Perform internal integrity check on circle"			  ]
[ "ok",			  "COMMAND: ",	  "ok(cpolygon) : bit",					  "Perform internal integrity check on cpolygon"		  ]
[ "ok",			  "COMMAND: ",	  "ok(interval) : bit",					  "Perform internal integrity check on interval"		  ]
[ "ok",			  "COMMAND: ",	  "ok(point) : bit",					  "Perform internal integrity check on point"			  ]
[ "ok",			  "COMMAND: ",	  "ok(polygon) : bit",					  "Perform internal integrity check on polygon"			  ]
[ "ok",			  "COMMAND: ",	  "ok(polyline) : bit",					  "Perform internal integrity check on polyline"		  ]
[ "ok",			  "COMMAND: ",	  "ok(segment) : bit",					  "Perform internal integrity check on segment"			  ]
[ "ok",			  "COMMAND: ",	  "ok(shape) : bit",					  "Perform internal integrity check on shape"			  ]
[ "ok",			  "COMMAND: ",	  "ok(triangle) : bit",					  "Perform internal integrity check on triangle"		  ]
[ "overlap",		  "COMMAND: ",	  "overlap(box, box) : bit",				  ""								  ]
[ "overlap",		  "COMMAND: ",	  "overlap(box, point) : bit",				  "Return whether given box and point overlap"			  ]
[ "overlap",		  "COMMAND: ",	  "overlap(cpolygon, cpolygon) : bit",			  "Return whether given cpolygon and cpolygon overlap"		  ]
[ "overlap",		  "COMMAND: ",	  "overlap(cpolygon, point) : bit",			  "Return whether given cpolygon and point overlap"		  ]
[ "overlap",		  "COMMAND: ",	  "overlap(cpolygon, polygon) : bit",			  "Return whether given cpolygon and polygon overlap"		  ]
[ "overlap",		  "COMMAND: ",	  "overlap(cpolygon, polyline) : bit",			  "Return whether given cpolygon and polyline overlap"		  ]
[ "overlap",		  "COMMAND: ",	  "overlap(point, box) : bit",				  "Return whether given point and box overlap"			  ]
[ "overlap",		  "COMMAND: ",	  "overlap(point, cpolygon) : bit",			  "Return whether given point and cpolygon overlap"		  ]
[ "overlap",		  "COMMAND: ",	  "overlap(point, polygon) : bit",			  "Return whether given point and polygon overlap"		  ]
[ "overlap",		  "COMMAND: ",	  "overlap(point, polyline) : bit",			  "Return whether given point and polyline overlap"		  ]
[ "overlap",		  "COMMAND: ",	  "overlap(polygon, cpolygon) : bit",			  "Return whether given polygon and cpolygon overlap"		  ]
[ "overlap",		  "COMMAND: ",	  "overlap(polygon, point) : bit",			  "Return whether given polygon and point overlap"		  ]
[ "overlap",		  "COMMAND: ",	  "overlap(polygon, polygon) : bit",			  "Return whether given polygon and polygon overlap"		  ]
[ "overlap",		  "COMMAND: ",	  "overlap(polygon, polyline) : bit",			  "Return whether given polygon and polyline overlap"		  ]
[ "overlap",		  "COMMAND: ",	  "overlap(polygon, segment) : bit",			  "Return whether given polygon and segment overlap"		  ]
[ "overlap",		  "COMMAND: ",	  "overlap(polyline, cpolygon) : bit",			  "Return whether given polyline and cpolygon overlap"		  ]
[ "overlap",		  "COMMAND: ",	  "overlap(polyline, point) : bit",			  "Return whether given polyline and point overlap"		  ]
[ "overlap",		  "COMMAND: ",	  "overlap(polyline, polygon) : bit",			  "Return whether given polyline and polygon overlap"		  ]
[ "overlap",		  "COMMAND: ",	  "overlap(polyline, polyline) : bit",			  "Return whether given polyline and polyline overlap"		  ]
[ "overlap",		  "COMMAND: ",	  "overlap(segment, cpolygon) : bit",			  "Return whether given segment and cpolygon overlap"		  ]
[ "overlap",		  "COMMAND: ",	  "overlap(segment, point) : bit",			  "Return whether given segment and point overlap"		  ]
[ "overlap",		  "COMMAND: ",	  "overlap(segment, polygon) : bit",			  "Return whether given segment and polygon overlap"		  ]
[ "overlap",		  "COMMAND: ",	  "overlap(segment, polyline) : bit",			  "Return whether given segment and polyline overlap"		  ]
[ "perpendicular",	  "COMMAND: ",	  "perpendicular(triangle3d) : point3d",		  "Return a vector which is perpendicular to the given triangle"  ]
[ "plot",		  "COMMAND: ",	  "plot(BAT[any,segment]) : void",			  ""								  ]
[ "plot",		  "COMMAND: ",	  "plot(cpolygon) : void",				  ""								  ]
[ "plot",		  "COMMAND: ",	  "plot(polygon) : void",				  ""								  ]
[ "plot",		  "COMMAND: ",	  "plot(polyline) : void",				  ""								  ]
[ "plot",		  "COMMAND: ",	  "plot(segment) : void",				  ""								  ]
[ "plot",		  "COMMAND: ",	  "plot(shape) : void",					  ""								  ]
[ "pnt1",		  "COMMAND: ",	  "pnt1(triangle) : point",				  "Return corner point 1 of triangle"				  ]
[ "pnt1",		  "COMMAND: ",	  "pnt1(triangle3d) : point3d",				  "Return corner point 1 of triangle3d"				  ]
[ "pnt2",		  "COMMAND: ",	  "pnt2(triangle) : point",				  "Return corner point 2 of triangle"				  ]
[ "pnt2",		  "COMMAND: ",	  "pnt2(triangle3d) : point3d",				  "Return corner point 2 of triangle3d"				  ]
[ "pnt3",		  "COMMAND: ",	  "pnt3(triangle) : point",				  "Return corner point 3 of triangle"				  ]
[ "pnt3",		  "COMMAND: ",	  "pnt3(triangle3d) : point3d",				  "Return corner point 3 of triangle3d"				  ]
[ "point_add",		  "COMMAND: ",	  "point_add(point, point) : point",			  ""								  ]
[ "point_dir",		  "COMMAND: ",	  "point_dir(point) : dbl",				  ""								  ]
[ "point_div",		  "COMMAND: ",	  "point_div(point, dbl) : point",			  ""								  ]
[ "point_rand",		  "COMMAND: ",	  "point_rand() : point",				  ""								  ]
[ "point_rel",		  "COMMAND: ",	  "point_rel(point, point) : point",			  ""								  ]
[ "points_rand",	  "COMMAND: ",	  "points_rand(int) : BAT[oid,point]",			  ""								  ]
[ "pq_overlap",		  "COMMAND: ",	  "pq_overlap(polygon, polygon) : bit",			  "Return whether given polygon and polygon pq_overlap"		  ]
[ "pqrelate",		  "COMMAND: ",	  "pqrelate(polyline, polyline) : int",			  ""								  ]
[ "project",		  "COMMAND: ",	  "project(point, point, dbl) : point",			  ""								  ]
[ "radius",		  "COMMAND: ",	  "radius(circle) : dbl",				  "Return radius of circle"					  ]
[ "relate",		  "COMMAND: ",	  "relate(point, point) : int",				  ""								  ]
[ "relate",		  "COMMAND: ",	  "relate(polygon, polygon) : int",			  ""								  ]
[ "relate",		  "COMMAND: ",	  "relate(polyline, polyline) : int",			  ""								  ]
[ "remove_dups",	  "COMMAND: ",	  "remove_dups(polygon) : polygon",			  ""								  ]
[ "reverse",		  "COMMAND: ",	  "reverse(polygon) : polygon",				  ""								  ]
[ "reverse",		  "COMMAND: ",	  "reverse(polyline) : polyline",			  ""								  ]
[ "reverse",		  "COMMAND: ",	  "reverse(segment) : segment",				  "Return segment with source and destination swapped"		  ]
[ "right",		  "COMMAND: ",	  "right(box) : dbl",					  "Return right margin of box"					  ]
[ "rotate",		  "COMMAND: ",	  "rotate(point, dbl) : point",				  "Rotate point by given angle around origin"			  ]
[ "rotate",		  "COMMAND: ",	  "rotate(polygon, dbl) : polygon",			  "Rotate polygon by given angle around origin"			  ]
[ "rotate",		  "COMMAND: ",	  "rotate(polyline, dbl) : polyline",			  "Rotate polyline by given angle around origin"		  ]
[ "rotate",		  "COMMAND: ",	  "rotate(shape, dbl) : shape",				  "Rotate shape by given angle around origin"			  ]
[ "rotate",		  "COMMAND: ",	  "rotate(triangle, dbl) : triangle",			  "Rotate triangle by given angle around origin"		  ]
[ "scale",		  "COMMAND: ",	  "scale(point, dbl) : point",				  "Scale point by given factor"					  ]
[ "scale",		  "COMMAND: ",	  "scale(polygon, dbl) : polygon",			  "Scale polygon by given factor"				  ]
[ "scale",		  "COMMAND: ",	  "scale(polyline, dbl) : polyline",			  "Scale polyline by given factor"				  ]
[ "scale",		  "COMMAND: ",	  "scale(shape, dbl) : shape",				  "Scale shape by given factor"					  ]
[ "scale",		  "COMMAND: ",	  "scale(triangle, dbl) : triangle",			  "Scale triangle by given factor"				  ]
[ "segment_length",	  "COMMAND: ",	  "segment_length(segment) : dbl",			  ""								  ]
[ "segments",		  "COMMAND: ",	  "segments(BAT[any,cpolygon]) : BAT[any,segment]",	  ""								  ]
[ "segments",		  "COMMAND: ",	  "segments(BAT[any,polygon]) : BAT[any,segment]",	  ""								  ]
[ "segments",		  "COMMAND: ",	  "segments(BAT[any,polyline]) : BAT[any,segment]",	  ""								  ]
[ "selfintersect",	  "COMMAND: ",	  "selfintersect(polyline) : bit",			  ""								  ]
[ "south",		  "COMMAND: ",	  "south(box) : segment",				  "Return bottom segment of box"				  ]
[ "src",		  "COMMAND: ",	  "src(polyline) : point",				  ""								  ]
[ "src",		  "COMMAND: ",	  "src(segment) : point",				  "Return source of segment"					  ]
[ "src_direction",	  "COMMAND: ",	  "src_direction(polyline) : dbl",			  ""								  ]
[ "subtract",		  "COMMAND: ",	  "subtract(box, point) : box",				  ""								  ]
[ "subtract",		  "COMMAND: ",	  "subtract(point, point) : point",			  ""								  ]
[ "subtract",		  "COMMAND: ",	  "subtract(polygon, point) : polygon",			  ""								  ]
[ "subtract",		  "COMMAND: ",	  "subtract(polyline, point) : polyline",		  ""								  ]
[ "tobox",		  "COMMAND: ",	  "tobox(box3d) : box",					  "Convert box3d to a box"					  ]
[ "top",		  "COMMAND: ",	  "top(box) : dbl",					  "Return top margin of box"					  ]
[ "topolygon",		  "COMMAND: ",	  "topolygon(box) : polygon",				  "Convert box to polygon"					  ]
[ "topolygon",		  "COMMAND: ",	  "topolygon(cpolygon) : polygon",			  ""								  ]
[ "topolygon",		  "COMMAND: ",	  "topolygon(triangle) : polygon",			  "Convert triangle to polygon"					  ]
[ "topolyline",		  "COMMAND: ",	  "topolyline(box) : polyline",				  "Return boundary of box as polyline"				  ]
[ "topolyline",		  "COMMAND: ",	  "topolyline(segment) : polyline",			  "Return segment as polyline"					  ]
[ "topolyline",		  "COMMAND: ",	  "topolyline(triangle) : polyline",			  "Convert triangle to polyline"				  ]
[ "toscreen",		  "COMMAND: ",	  "toscreen(box, box, int, int) : box",			  "Convert a box from map coordinates to screen coordinates"	  ]
[ "toscreen",		  "COMMAND: ",	  "toscreen(box3d, box, int, int) : box",		  "Convert a box3d from map coordinates to screen coordinates"	  ]
[ "toscreen",		  "COMMAND: ",	  "toscreen(point, box, int, int) : point",		  "Convert a point from map coordinates to screen coordinates"	  ]
[ "toscreen",		  "COMMAND: ",	  "toscreen(polygon, box, int, int) : polygon",		  "Convert a polygon from map coordinates to screen coordinates"  ]
[ "toscreen",		  "COMMAND: ",	  "toscreen(polyline, box, int, int) : polyline",	  "Convert a polyline from map coordinates to screen coordinates"  ]
[ "toshape",		  "COMMAND: ",	  "toshape(point) : shape",				  "Convert a point to the shape type"				  ]
[ "toshape",		  "COMMAND: ",	  "toshape(polygon) : shape",				  "Convert a polygon to the shape type"				  ]
[ "toshape",		  "COMMAND: ",	  "toshape(polyline) : shape",				  "Convert a polyline to the shape type"			  ]
[ "toshape",		  "COMMAND: ",	  "toshape(segment) : shape",				  "Convert a segment to the shape type"				  ]
[ "toshape",		  "COMMAND: ",	  "toshape(triangle) : shape",				  "Convert a triangle to the shape type"			  ]
[ "translate",		  "COMMAND: ",	  "translate(point, point) : point",			  "Translate point along given vector (point)"			  ]
[ "translate",		  "COMMAND: ",	  "translate(polygon, point) : polygon",		  "Translate polygon along given vector (point)"		  ]
[ "translate",		  "COMMAND: ",	  "translate(polyline, point) : polyline",		  "Translate polyline along given vector (point)"		  ]
[ "translate",		  "COMMAND: ",	  "translate(shape, point) : shape",			  "Translate shape along given vector (point)"			  ]
[ "translate",		  "COMMAND: ",	  "translate(triangle, point) : triangle",		  "Translate triangle along given vector (point)"		  ]
[ "triangulate",	  "COMMAND: ",	  "triangulate(cpolygon) : BAT[oid,segment]",		  ""								  ]
[ "triangulate",	  "COMMAND: ",	  "triangulate(polygon) : BAT[oid,segment]",		  ""								  ]
[ "unite",		  "COMMAND: ",	  "unite(polygon, minitree) : polygon",			  "Create a polygon with an integrated minitree"		  ]
[ "west",		  "COMMAND: ",	  "west(box) : segment",				  "Return right segment of box"					  ]
[ "width",		  "COMMAND: ",	  "width(box) : dbl",					  "Return width of box"						  ]
[ "xcoord",		  "COMMAND: ",	  "xcoord(point) : dbl",				  "Return x-coordinate of given point"				  ]
[ "xcoord",		  "COMMAND: ",	  "xcoord(point3d) : dbl",				  "Return x-coordinate of given point3d"			  ]
[ "xinterval",		  "COMMAND: ",	  "xinterval(box3d) : interval",			  "Returns xinterval of box3d"					  ]
[ "ycoord",		  "COMMAND: ",	  "ycoord(point) : dbl",				  "Return y-coordinate of given point"				  ]
[ "ycoord",		  "COMMAND: ",	  "ycoord(point3d) : dbl",				  "Return y-coordinate of given point3d"			  ]
[ "yinterval",		  "COMMAND: ",	  "yinterval(box3d) : interval",			  "Returns yinterval of box3d"					  ]
[ "zcoord",		  "COMMAND: ",	  "zcoord(point3d) : dbl",				  "Return z-coordinate of given point3d"			  ]
[ "zinterval",		  "COMMAND: ",	  "zinterval(box3d) : interval",			  "Returns zinterval of box3d"					  ]

Module: "gisbulk"

[ 48 ]
[ 48 ]
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# tmp_28		| type		| signature							| help								  #
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
[ "disjoint_join",	  "COMMAND: ",	  "disjoint_join(BAT[any,box], BAT[box,any]) : BAT[any,any]",	  ""								  ]
[ "djoin",		  "COMMAND: ",	  "djoin(BAT[any,box], BAT[box,any], dbl, dbl) : BAT[any,any]",	  ""								  ]
[ "djoin",		  "COMMAND: ",	  "djoin(BAT[any,box], BAT[point,any], dbl, dbl) : BAT[any,any]", ""								  ]
[ "djoin",		  "COMMAND: ",	  "djoin(BAT[any,point], BAT[box,any], dbl, dbl) : BAT[any,any]", ""								  ]
[ "djoin",		  "COMMAND: ",	  "djoin(BAT[any,point], BAT[point,any], dbl, dbl) : BAT[any,any]", ""								  ]
[ "dselect",		  "COMMAND: ",	  "dselect(BAT[any,box], box, dbl, dbl) : BAT[any,box]",	  ""								  ]
[ "dselect",		  "COMMAND: ",	  "dselect(BAT[any,box], point, dbl, dbl) : BAT[any,box]",	  ""								  ]
[ "dselect",		  "COMMAND: ",	  "dselect(BAT[any,point], point, dbl, dbl) : BAT[any,point]",	  ""								  ]
[ "inside_join",	  "COMMAND: ",	  "inside_join(BAT[any,box], BAT[box,any]) : BAT[any,any]",	  ""								  ]
[ "inside_join",	  "COMMAND: ",	  "inside_join(BAT[any,polygon], BAT[polygon,any]) : BAT[any,any]", ""								  ]
[ "interval_tree_print",  "COMMAND: ",	  "interval_tree_print(BAT[any,interval]) : void",		  ""								  ]
[ "iselect",		  "COMMAND: ",	  "iselect(BAT[any,interval], dbl) : BAT[any,interval]",	  ""								  ]
[ "iselect",		  "COMMAND: ",	  "iselect(BAT[any,interval], interval) : BAT[any,interval]",	  ""								  ]
[ "octree_number",	  "COMMAND: ",	  "octree_number(BAT[any,box3d]) : BAT[int,box3d]",		  ""								  ]
[ "octree_number_leaves", "COMMAND: ",	  "octree_number_leaves(BAT[any,box3d]) : BAT[int,box3d]",	  ""								  ]
[ "octree_print",	  "COMMAND: ",	  "octree_print(BAT[any,box3d]) : void",			  ""								  ]
[ "rtree_number_leaves",  "COMMAND: ",	  "rtree_number_leaves(BAT[any,box]) : BAT[int,box]",		  ""								  ]
[ "rtree_ok",		  "COMMAND: ",	  "rtree_ok(BAT[box,any]) : bit",				  ""								  ]
[ "rtree_ok",		  "COMMAND: ",	  "rtree_ok(BAT[point,any]) : bit",				  ""								  ]
[ "rtree_ok",		  "COMMAND: ",	  "rtree_ok(BAT[polygon,any]) : bit",				  ""								  ]
[ "rtree_ok",		  "COMMAND: ",	  "rtree_ok(BAT[polyline,any]) : bit",				  ""								  ]
[ "rtree_ok",		  "COMMAND: ",	  "rtree_ok(BAT[segment,any]) : bit",				  ""								  ]
[ "rtree_print",	  "COMMAND: ",	  "rtree_print(BAT[box,any]) : void",				  ""								  ]
[ "rtree_print",	  "COMMAND: ",	  "rtree_print(BAT[point,any]) : void",				  ""								  ]
[ "rtree_print",	  "COMMAND: ",	  "rtree_print(BAT[polygon,any]) : void",			  ""								  ]
[ "rtree_print",	  "COMMAND: ",	  "rtree_print(BAT[polyline,any]) : void",			  ""								  ]
[ "rtree_print",	  "COMMAND: ",	  "rtree_print(BAT[segment,any]) : void",			  ""								  ]
[ "rtreebbox",		  "COMMAND: ",	  "rtreebbox(BAT[any,box]) : box",				  ""								  ]
[ "rtreebbox",		  "COMMAND: ",	  "rtreebbox(BAT[any,point]) : box",				  ""								  ]
[ "rtreebbox",		  "COMMAND: ",	  "rtreebbox(BAT[any,polygon]) : box",				  ""								  ]
[ "rtreebbox",		  "COMMAND: ",	  "rtreebbox(BAT[any,polyline]) : box",				  ""								  ]
[ "rtreebbox",		  "COMMAND: ",	  "rtreebbox(BAT[any,segment]) : box",				  ""								  ]
[ "rtreecluster",	  "COMMAND: ",	  "rtreecluster(BAT[box,any]) : void",				  ""								  ]
[ "sjoin",		  "COMMAND: ",	  "sjoin(BAT[any,segment], BAT[segment,any], int) : BAT[any,any]", ""								  ]
[ "sjoin",		  "COMMAND: ",	  "sjoin(BAT[any::1,box], BAT[box,any::2]) : BAT[any::1,any::2]", ""								  ]
[ "sjoin",		  "COMMAND: ",	  "sjoin(BAT[any::1,box], BAT[point,any::2]) : BAT[any::1,any::2]", ""								  ]
[ "sjoin",		  "COMMAND: ",	  "sjoin(BAT[any::1,point], BAT[box,any::2]) : BAT[any::1,any::2]", ""								  ]
[ "sjoin",		  "COMMAND: ",	  "sjoin(BAT[any::1,segment], BAT[segment,any::2]) : BAT[any::1,any::2]", ""								  ]
[ "sjoin_overlap",	  "COMMAND: ",	  "sjoin_overlap(BAT[any::1,polyline], BAT[polyline,any::2]) : BAT[any::1,any::2]", ""								  ]
[ "sjoin_overlap",	  "COMMAND: ",	  "sjoin_overlap(BAT[any::1,segment], BAT[segment,any::2]) : BAT[any::1,any::2]", ""								  ]
[ "sselect",		  "COMMAND: ",	  "sselect(BAT[any,box3d], box3d) : BAT[any,box3d]",		  "Select all boxes from the given bat which overlap with the given box"  ]
[ "sselect",		  "COMMAND: ",	  "sselect(BAT[any,box], box) : BAT[any,box]",			  "Select all boxes from the given bat which overlap with the given box"  ]
[ "sselect",		  "COMMAND: ",	  "sselect(BAT[any,point], box) : BAT[any,point]",		  "Select all points from the given bat which are inside the given box"  ]
[ "sselect",		  "COMMAND: ",	  "sselect(BAT[any,polygon], box) : BAT[any,polygon]",		  "Select all polylines from the BAT of which the bounding box overlaps with the given box"  ]
[ "sselect",		  "COMMAND: ",	  "sselect(BAT[any,polyline], box) : BAT[any,polyline]",	  "Select all polylines from the BAT of which the bounding box overlaps with the given box"  ]
[ "sselect",		  "COMMAND: ",	  "sselect(BAT[any,segment], box) : BAT[any,segment]",		  "Select all segments from the BAT of which the bounding box overlaps with the given box"  ]
[ "sselect",		  "COMMAND: ",	  "sselect(BAT[any,segment], segment, int) : BAT[any,segment]",	  ""								  ]
[ "sselect_cross",	  "COMMAND: ",	  "sselect_cross(BAT[any,segment], segment) : BAT[any,segment]",  "Select all segments from the BAT which cross the given segent"  ]

Module: "opengis"

[ 44 ]
[ 44 ]
#---------------------------------------------------------------------------------------------------------------------------------------------------------#
# tmp_28		| type		| signature							| help						  #
#---------------------------------------------------------------------------------------------------------------------------------------------------------#
[ "Area",		  "COMMAND: ",	  "Area(Polygon) : dbl",					  ""						  ]
[ "Centroid",		  "COMMAND: ",	  "Centroid(Polygon) : Point",					  ""						  ]
[ "Dimension",		  "COMMAND: ",	  "Dimension(LineString) : int",				  "The dimension of this object"		  ]
[ "Dimension",		  "COMMAND: ",	  "Dimension(MultiLineString) : int",				  "The dimension of this object"		  ]
[ "Dimension",		  "COMMAND: ",	  "Dimension(MultiPoint) : int",				  "The dimension of this object"		  ]
[ "Dimension",		  "COMMAND: ",	  "Dimension(MultiPolygon) : int",				  "The dimension of this object"		  ]
[ "Dimension",		  "COMMAND: ",	  "Dimension(Point) : int",					  "The dimension of this object"		  ]
[ "Dimension",		  "COMMAND: ",	  "Dimension(Polygon) : int",					  "The dimension of this object"		  ]
[ "EndPoint",		  "COMMAND: ",	  "EndPoint(LineString) : Point",				  ""						  ]
[ "ExteriorRing",	  "COMMAND: ",	  "ExteriorRing(Polygon) : LineString",				  ""						  ]
[ "GeometryN",		  "COMMAND: ",	  "GeometryN(GeometryCollection, int) : Geometry",		  ""						  ]
[ "GeometryN",		  "COMMAND: ",	  "GeometryN(MultiLineString, int) : LineString",		  ""						  ]
[ "GeometryN",		  "COMMAND: ",	  "GeometryN(MultiPoint, int) : Point",				  ""						  ]
[ "GeometryN",		  "COMMAND: ",	  "GeometryN(MultiPolygon, int) : Polygon",			  ""						  ]
[ "InteriorRingN",	  "COMMAND: ",	  "InteriorRingN(Polygon, int) : LineString",			  ""						  ]
[ "IsClosed",		  "COMMAND: ",	  "IsClosed(LineString) : int",					  ""						  ]
[ "IsRing",		  "COMMAND: ",	  "IsRing(LineString) : int",					  ""						  ]
[ "NumGeometries",	  "COMMAND: ",	  "NumGeometries(GeometryCollection) : int",			  ""						  ]
[ "NumGeometries",	  "COMMAND: ",	  "NumGeometries(MultiLineString) : int",			  ""						  ]
[ "NumGeometries",	  "COMMAND: ",	  "NumGeometries(MultiPoint) : int",				  ""						  ]
[ "NumGeometries",	  "COMMAND: ",	  "NumGeometries(MultiPolygon) : int",				  ""						  ]
[ "NumInteriorRing",	  "COMMAND: ",	  "NumInteriorRing(Polygon) : int",				  ""						  ]
[ "PointOnSurface",	  "COMMAND: ",	  "PointOnSurface(Polygon) : Point",				  ""						  ]
[ "StartPoint",		  "COMMAND: ",	  "StartPoint(LineString) : Point",				  ""						  ]
[ "X",			  "COMMAND: ",	  "X(Point) : dbl",						  "The x-coordinate value for this Point"	  ]
[ "Y",			  "COMMAND: ",	  "Y(Point) : dbl",						  "The y-coordinate value for this Point"	  ]
[ "append",		  "COMMAND: ",	  "append(GeometryCollection, Geometry) : GeometryCollection",	  ""						  ]
[ "asLineString",	  "COMMAND: ",	  "asLineString(Geometry) : LineString",			  ""						  ]
[ "asPoint",		  "COMMAND: ",	  "asPoint(Geometry) : Point",					  ""						  ]
[ "asPolygon",		  "COMMAND: ",	  "asPolygon(Geometry) : Polygon",				  ""						  ]
[ "create_collection",	  "COMMAND: ",	  "create_collection(Geometry) : GeometryCollection",		  ""						  ]
[ "item",		  "COMMAND: ",	  "item(GeometryCollection, int) : Geometry",			  ""						  ]
[ "make_geometry",	  "COMMAND: ",	  "make_geometry(cpolygon) : Geometry",				  ""						  ]
[ "make_geometry",	  "COMMAND: ",	  "make_geometry(point) : Geometry",				  ""						  ]
[ "make_geometry",	  "COMMAND: ",	  "make_geometry(polyline) : Geometry",				  ""						  ]
[ "nbytes",		  "COMMAND: ",	  "nbytes(Geometry) : int",					  ""						  ]
[ "nbytes",		  "COMMAND: ",	  "nbytes(GeometryCollection) : int",				  ""						  ]
[ "nbytes",		  "COMMAND: ",	  "nbytes(LineString) : int",					  ""						  ]
[ "nbytes",		  "COMMAND: ",	  "nbytes(MultiLineString) : int",				  ""						  ]
[ "nbytes",		  "COMMAND: ",	  "nbytes(MultiPoint) : int",					  ""						  ]
[ "nbytes",		  "COMMAND: ",	  "nbytes(MultiPolygon) : int",					  ""						  ]
[ "nbytes",		  "COMMAND: ",	  "nbytes(Point) : int",					  ""						  ]
[ "nbytes",		  "COMMAND: ",	  "nbytes(Polygon) : int",					  ""						  ]
[ "nitems",		  "COMMAND: ",	  "nitems(GeometryCollection) : int",				  ""						  ]

Module: "tdcel"

[ 2 ]
[ 2 ]
#-----------------------------------------------------------------------------------------------------------------------------------------#
# tmp_28			| type		| signature							| help			  #
#-----------------------------------------------------------------------------------------------------------------------------------------#
[ "dcel_to_tdcel",		  "COMMAND: ",	  "dcel_to_tdcel(BAT[int,BAT]) : void",				  ""			  ]
[ "face_geometry_special",	  "PROC: ",	  "face_geometry_special(BAT[int,BAT], BAT[oid,interval], box, dbl) : BAT[oid,triangle]", "not available"	  ]

quit;
