stdout of test '04_Modules_odmg` in directory 'tests/Availability` itself:

#> Mtest:	milS 04_Modules_odmg milS
#> Mtest:	Mtimeout -timeout 543 Mserver -modulesilent -yaccsilent -d8 -db tests_Availability -single 04_Modules_odmg.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Mon Mar 27 04:35:32 MET DST 2000.
#script:04_Modules_odmg.milS


#You are system administrator (adm)!
setoid(oid(20000000));

Static_fcn:=monet_fcntbl.reverse.copy;

Fname:=new(oid,str);Fname.col_name("function");
FnameS:=new(oid,str);FnameS.col_name("function");
Ftype:=new(oid,str);Ftype.col_name("type");
Fsig:=new(oid,str);Fsig.col_name("signature");
Fhelp:=new(oid,str);Fhelp.col_name("help");
Fnts:=new(oid,str);

Odmg_mods:=MODULES.select("odmg").sort.copy;
#Odmg_mods.access(BAT_WRITE).revert;
table(Odmg_mods.reverse.col_name(sprintf("%i modules",Odmg_mods.count)));
#-----------------#
# 4 modules	  #
#-----------------#
[ "CC_odmg"	  ]
[ "jOdmg"	  ]
[ "odmg"	  ]
[ "signature"	  ]
Odmg_mods@batloop() {
	The_mod:=$h;
	printf("\nModule: \"%s\"\n\n",The_mod);
	module($h);

	Mod_fcn:=sdiff(monet_fcntbl.reverse,Static_fcn).reverse;
	Mod_fcn.sort@batloop() {
	    addThis:=false;
	    if (not(monet_fcn_mid.exist($t))) {
		addThis:=true;
	    } else {
		m:=monet_mod_nme.find(monet_fcn_mid.find($t));
		if (m.startsWith("_")) {
		    m:=string(m,1);
		}
		if (m = The_mod) {
		    addThis:=true;
		}
	    }
	    if (addThis) {
		Tname:=$h;
		Ttype:=help_tpe(monet_fcn_tpe.find($t));
		Tsig:=format_fcn_sig($t);
		Thelp:="";
		if (monet_fcn_dsc.exist($t)) {
			Thelp:=monet_fcn_dsc.find($t);
		} else {
			Thelp:="not available";
		}
		Fname.insert($t,Tname);
		Ftype.insert($t,Ttype);
		Fsig.insert($t,Tsig);
		Fhelp.insert($t,Thelp);
		Fnts.insert($t,sprintf("%s %s %s",Tname,Ttype,Tsig));
	    }
	}

	drop($h);
	Static_fcn:=sunion(Static_fcn,monet_fcntbl.reverse);

	Fnts.count.print;
	Fnts.reverse.sort.reverse@batloop() {
		FnameS.insert($h,Fname.find($h));
	}
	FnameS.count.print; table(1,FnameS,Ftype,Fsig,Fhelp);

	Fname.delete;
	FnameS.delete;
	Ftype.delete;
	Fsig.delete;
	Fhelp.delete;
	Fnts.delete;
}

Module: "CC_odmg"

[ 16 ]
[ 16 ]
#---------------------------------------------------------------------------------------------------------------------------------------------------------#
# function		| type		| signature							| help						  #
#---------------------------------------------------------------------------------------------------------------------------------------------------------#
[ "DatabaseClose",	  "COMMAND: ",	  "DatabaseClose() : void",					  "Close the given database."			  ]
[ "DatabaseOpen",	  "COMMAND: ",	  "DatabaseOpen(str) : void",					  "open the database with the given name."	  ]
[ "ODLdestroy_odmg",	  "PROC: ",	  "ODLdestroy_odmg() : void",					  "not available"				  ]
[ "ODLnew_odmg",	  "PROC: ",	  "ODLnew_odmg() : void",					  "not available"				  ]
[ "bitset_toStr",	  "PROC: ",	  "bitset_toStr(any) : any",					  "not available"				  ]
[ "callFunction",	  "PROC: ",	  "callFunction(str) : any",					  "not available"				  ]
[ "find",		  "PROC: ",	  "find(str, str) : any",					  "not available"				  ]
[ "info",		  "PROC: ",	  "info(odBatCache) : BAT[int,any]",				  "not available"				  ]
[ "odBatCaches",	  "PROC: ",	  "odBatCaches(int) : BAT[str,odBatCache]",			  "not available"				  ]
[ "odOIDnew",		  "PROC: ",	  "odOIDnew(int) : oid",					  "not available"				  ]
[ "table",		  "PROC: ",	  "table(BAT[oid,any], str) : any",				  "not available"				  ]
[ "table",		  "PROC: ",	  "table(BAT[oid,any], str, int) : any",			  "not available"				  ]
[ "table",		  "PROC: ",	  "table(str) : any",						  "not available"				  ]
[ "table",		  "PROC: ",	  "table(str, str, int) : any",					  "not available"				  ]
[ "table_print",	  "PROC: ",	  "table_print(BAT[any,any], BAT[str,BAT], int, int) : any",	  "not available"				  ]
[ "table_setformat",	  "PROC: ",	  "table_setformat(BAT[any,any]) : str",			  "not available"				  ]

Module: "jOdmg"

!WARNING: TCPepilogue: terminate 0 listeners
[ 53 ]
[ 53 ]
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# function			| type		| signature							| help												  #
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
[ "DatabaseTransactionNEW",	  "PROC: ",	  "DatabaseTransactionNEW() : any",				  "not available"										  ]
[ "ODLdestroy_odmg",		  "PROC: ",	  "ODLdestroy_odmg() : void",					  "not available"										  ]
[ "ODLnew_odmg",		  "PROC: ",	  "ODLnew_odmg() : void",					  "not available"										  ]
[ "arpc",			  "PROC: ",	  "arpc(..any..) : any",					  "not available"										  ]
[ "cacheReadAccess",		  "COMMAND: ",	  "cacheReadAccess(odObject) : void",				  "Mark object as being read by the current client"						  ]
[ "cacheWriteAccess",		  "COMMAND: ",	  "cacheWriteAccess(odObject) : void",				  "Mark object as being written by the current client"						  ]
[ "callFunction",		  "PROC: ",	  "callFunction(str) : any",					  "not available"										  ]
[ "destroy_object",		  "PROC: ",	  "destroy_object(int, int) : any",				  "not available"										  ]
[ "end_rec",			  "PROC: ",	  "end_rec() : any",						  "not available"										  ]
[ "find",			  "PROC: ",	  "find(str, str) : any",					  "not available"										  ]
[ "getAtomIDs",			  "COMMAND: ",	  "getAtomIDs(odSet) : odSet",					  "lookup the atomIDs of a set of user defined atoms"						  ]
[ "getAttrIDs",			  "COMMAND: ",	  "getAttrIDs(str, str, odSet) : odSet",			  "lookup the attrIDs of a set of attribure names from a class in a module"			  ]
[ "getBaseClass",		  "COMMAND: ",	  "getBaseClass(oid) : oid",					  "Get the base class id for this class id"							  ]
[ "getClassIDs",		  "COMMAND: ",	  "getClassIDs(str, odSet) : odSet",				  "lookup the classIDs of a set of classes from a module"					  ]
[ "info",			  "PROC: ",	  "info(odBatCache) : BAT[int,any]",				  "not available"										  ]
[ "intTail",			  "PROC: ",	  "intTail(any) : any",						  "not available"										  ]
[ "jOdmgVoidCall",		  "PROC: ",	  "jOdmgVoidCall(any, ..any..) : any",				  "not available"										  ]
[ "jOdmg_assign",		  "PROC: ",	  "jOdmg_assign(any, ..any..) : any",				  "not available"										  ]
[ "jOdmg_call",			  "PROC: ",	  "jOdmg_call(any, any, ..any..) : any",			  "not available"										  ]
[ "jOdmg_check",		  "PROC: ",	  "jOdmg_check(int, any, any) : any",				  "not available"										  ]
[ "jOdmg_commit",		  "PROC: ",	  "jOdmg_commit() : any",					  "not available"										  ]
[ "jOdmg_doCall",		  "PROC: ",	  "jOdmg_doCall(any, any, ..any..) : any",			  "not available"										  ]
[ "jOdmg_err",			  "PROC: ",	  "jOdmg_err(str) : any",					  "not available"										  ]
[ "jOdmg_find",			  "PROC: ",	  "jOdmg_find(str) : any",					  "not available"										  ]
[ "jOdmg_insert",		  "PROC: ",	  "jOdmg_insert(any, oid) : str",				  "not available"										  ]
[ "jOdmg_match",		  "PROC: ",	  "jOdmg_match() : <predefinition>",				  "not available"										  ]
[ "jOdmg_match",		  "PROC: ",	  "jOdmg_match(any, oid) : str",				  "not available"										  ]
[ "jOdmg_obj",			  "PROC: ",	  "jOdmg_obj(str, int) : str",					  "not available"										  ]
[ "jOdmg_readAttr",		  "PROC: ",	  "jOdmg_readAttr(str, str, odObject) : any",			  "not available"										  ]
[ "jOdmg_readCall",		  "PROC: ",	  "jOdmg_readCall(any, any, ..any..) : any",			  "not available"										  ]
[ "jOdmg_str",			  "PROC: ",	  "jOdmg_str(BAT[any,any]) : str",				  "not available"										  ]
[ "jOdmg_str",			  "PROC: ",	  "jOdmg_str(any) : str",					  "not available"										  ]
[ "jOdmg_str",			  "PROC: ",	  "jOdmg_str(str) : str",					  "not available"										  ]
[ "jOdmg_writeAttr",		  "PROC: ",	  "jOdmg_writeAttr(str, odObject, any) : any",			  "not available"										  ]
[ "jTransactionABORT",		  "COMMAND: ",	  "jTransactionABORT(int) : void",				  "abort transaction tid, and invalidate the observed objects"					  ]
[ "jTransactionCOMMIT",		  "COMMAND: ",	  "jTransactionCOMMIT(int) : void",				  "commit transaction tid, and invalidate the observed objects"					  ]
[ "jget",			  "COMMAND: ",	  "jget(jarray) : any",						  "get value from the jarray"									  ]
[ "jput",			  "COMMAND: ",	  "jput(any, int) : jarray",					  "create a jarray from an object with a known type"						  ]
[ "jquote",			  "COMMAND: ",	  "jquote(str) : str",						  "escape characters in a string"								  ]
[ "multifetch",			  "COMMAND: ",	  "multifetch(odSet, odAttr) : odSet",				  "multifetch all attribute for the given set s"						  ]
[ "multifetch_collection",	  "COMMAND: ",	  "multifetch_collection(odSet, odAttr) : odCollectionSet",	  "multifetch all attribute for the given set s"						  ]
[ "newOid",			  "PROC: ",	  "newOid(int) : any",						  "not available"										  ]
[ "new_object",			  "PROC: ",	  "new_object(int) : any",					  "not available"										  ]
[ "odBatCaches",		  "PROC: ",	  "odBatCaches(int) : BAT[str,odBatCache]",			  "not available"										  ]
[ "odOIDnew",			  "PROC: ",	  "odOIDnew(int) : oid",					  "not available"										  ]
[ "registerClient",		  "COMMAND: ",	  "registerClient(str) : void",					  "register the clients hostname, so we can obtain the conn_id to do rpc's back to the client"	  ]
[ "start_rec",			  "PROC: ",	  "start_rec(str) : any",					  "not available"										  ]
[ "table",			  "PROC: ",	  "table(BAT[oid,any], str) : any",				  "not available"										  ]
[ "table",			  "PROC: ",	  "table(BAT[oid,any], str, int) : any",			  "not available"										  ]
[ "table",			  "PROC: ",	  "table(str) : any",						  "not available"										  ]
[ "table",			  "PROC: ",	  "table(str, str, int) : any",					  "not available"										  ]
[ "table_print",		  "PROC: ",	  "table_print(BAT[any,any], BAT[str,BAT], int, int) : any",	  "not available"										  ]
[ "table_setformat",		  "PROC: ",	  "table_setformat(BAT[any,any]) : str",			  "not available"										  ]

Module: "odmg"

[ 152 ]
[ 152 ]
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# function		| type		| signature										| help																	  #
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
[ "BAT",		  "COMMAND: ",	  "BAT(odList) : BAT[any,any]",								  "make a new bat that consists of all list values in the head of the BAT."								  ]
[ "BAT",		  "COMMAND: ",	  "BAT(odSet) : BAT[any,any]",								  "make a new bat that consists of all bag values in the head of the BAT."								  ]
[ "ODLargId",		  "COMMAND: ",	  "ODLargId(oid, str) : oid",								  "Get argument, from function/method fcn_id"												  ]
[ "ODLargIds",		  "COMMAND: ",	  "ODLargIds(oid) : BAT[oid,any]",							  "Get all argument of this function/method"												  ]
[ "ODLarg_names",	  "COMMAND: ",	  "ODLarg_names(oid) : BAT[oid,str]",							  "Get all argument names of this function/method"											  ]
[ "ODLclassId",		  "COMMAND: ",	  "ODLclassId(oid, str) : oid",								  "Get class, from module mid"														  ]
[ "ODLclassIds",	  "COMMAND: ",	  "ODLclassIds(oid) : BAT[oid,any]",							  "Get all classes of this module"													  ]
[ "ODLclass_name",	  "COMMAND: ",	  "ODLclass_name(oid) : str",								  "get name of class with classid cid"													  ]
[ "ODLclass_names",	  "COMMAND: ",	  "ODLclass_names(oid) : BAT[oid,str]",							  "Get all class names of this module"													  ]
[ "ODLdestroy_bat",	  "COMMAND: ",	  "ODLdestroy_bat(str) : void",								  "if a bat with this name exists destroy it"												  ]
[ "ODLdestroy_odmg",	  "PROC: ",	  "ODLdestroy_odmg() : void",								  "not available"															  ]
[ "ODLexist",		  "COMMAND: ",	  "ODLexist(str) : bit",								  "Check if a bat exists"														  ]
[ "ODLinsert",		  "COMMAND: ",	  "ODLinsert(BAT[any::1,any::2], any::1, any::2) : void",				  "Insert (if hv does not exist) pair(hv,tv) in bat b"											  ]
[ "ODLmemberId",	  "COMMAND: ",	  "ODLmemberId(oid, str) : oid",							  "Get member, from class cls_id"													  ]
[ "ODLmemberIds",	  "COMMAND: ",	  "ODLmemberIds(oid) : BAT[oid,any]",							  "Get all members of this class"													  ]
[ "ODLmember_names",	  "COMMAND: ",	  "ODLmember_names(oid) : BAT[oid,str]",						  "Get all member names of this class"													  ]
[ "ODLmethodId",	  "COMMAND: ",	  "ODLmethodId(oid, str) : oid",							  "Get method, from class cls_id"													  ]
[ "ODLmethodIds",	  "COMMAND: ",	  "ODLmethodIds(oid) : BAT[oid,any]",							  "Get all methods of this class"													  ]
[ "ODLmethod_names",	  "COMMAND: ",	  "ODLmethod_names(oid) : BAT[oid,str]",						  "Get all method names of this class"													  ]
[ "ODLmoduleId",	  "COMMAND: ",	  "ODLmoduleId(str) : oid",								  "Get module id of mod"														  ]
[ "ODLmodule_init",	  "COMMAND: ",	  "ODLmodule_init(odDatabase, str) : void",						  "Initialisation for the given module"													  ]
[ "ODLnew_argClass",	  "COMMAND: ",	  "ODLnew_argClass(str, oid, str, str, oid) : void",					  "create a new argument (result is also treated as an argument with name result)"							  ]
[ "ODLnew_argValue",	  "COMMAND: ",	  "ODLnew_argValue(str, oid, str, oid) : void",						  "create a new argument (result is also treated as an argument with name result)"							  ]
[ "ODLnew_bat",		  "COMMAND: ",	  "ODLnew_bat(str, int, int) : BAT[any,any]",						  "if a bat with the given name exists return it, else create one"									  ]
[ "ODLnew_class",	  "COMMAND: ",	  "ODLnew_class(str, str, str) : oid",							  "create a new class"															  ]
[ "ODLnew_link",	  "COMMAND: ",	  "ODLnew_link(str, str, str, str, str, str, oid, oid, bit, bit, bit, int) : void",	  "create a new object link"														  ]
[ "ODLnew_member",	  "COMMAND: ",	  "ODLnew_member(oid, str, oid, oid, bit, int) : void",					  "create a new base member"														  ]
[ "ODLnew_memberId",	  "COMMAND: ",	  "ODLnew_memberId() : oid",								  "Get next member id"															  ]
[ "ODLnew_memberObject",  "COMMAND: ",	  "ODLnew_memberObject(str, str, str, str, str, oid, bit, bit, int) : void",		  "create a new object member"														  ]
[ "ODLnew_memberValue",	  "COMMAND: ",	  "ODLnew_memberValue(str, str, str, str, oid, bit, bit, int) : void",			  "create a new value member"														  ]
[ "ODLnew_method",	  "COMMAND: ",	  "ODLnew_method(str, str, str, int) : oid",						  "create a new method/function (cls == mod)"												  ]
[ "ODLnew_module",	  "COMMAND: ",	  "ODLnew_module(str, str) : bit",							  "return true if module is created or changed"												  ]
[ "ODLnew_odmg",	  "PROC: ",	  "ODLnew_odmg() : void",								  "not available"															  ]
[ "ODLnew_type",	  "COMMAND: ",	  "ODLnew_type(str) : void",								  "create a new type"															  ]
[ "ODLrename",		  "COMMAND: ",	  "ODLrename(BAT[any,any], str) : void",						  "if the name is not used, rename bat b"												  ]
[ "ODLsuper",		  "COMMAND: ",	  "ODLsuper(oid, str, str) : void",							  "Create a super, parent class relation"												  ]
[ "ODLtypeId",		  "COMMAND: ",	  "ODLtypeId(str) : oid",								  "Get type id of tpe with name tpe_nme"												  ]
[ "ODLtype_typeId",	  "COMMAND: ",	  "ODLtype_typeId(str) : int",								  "Get atom id of tpe with name tpe_nme"												  ]
[ "abort",		  "COMMAND: ",	  "abort(odTransaction) : void",							  "abort transaction tid"														  ]
[ "append",		  "COMMAND: ",	  "append(odList, any) : odList",							  "appends element el to the list l"													  ]
[ "append",		  "COMMAND: ",	  "append(odList, odList) : odList",							  "appends a list, l2,  to the list l"													  ]
[ "append",		  "COMMAND: ",	  "append(odList, odObject) : odList",							  "appends object o to the list l"													  ]
[ "atom",		  "COMMAND: ",	  "atom(odSet) : any",									  "returns a random selected value from the set"											  ]
[ "begin",		  "COMMAND: ",	  "begin(odTransaction) : void",							  "begin transaction tid"														  ]
[ "callFunction",	  "PROC: ",	  "callFunction(str) : any",								  "not available"															  ]
[ "cardinality",	  "COMMAND: ",	  "cardinality(odList) : int",								  "returns the number of elements in the list"												  ]
[ "cardinality",	  "COMMAND: ",	  "cardinality(odSet) : int",								  "returns the sets cardinality"													  ]
[ "change",		  "COMMAND: ",	  "change(odTransaction, odObject) : void",						  "change a lock from upgrade to write for object o in transaction tid"									  ]
[ "classId",		  "COMMAND: ",	  "classId(odList) : oid",								  "Get the object/set/list classid"													  ]
[ "classId",		  "COMMAND: ",	  "classId(odObject) : oid",								  "Get the object/set/list classid"													  ]
[ "classId",		  "COMMAND: ",	  "classId(odSet) : oid",								  "Get the object/set/list classid"													  ]
[ "clear",		  "COMMAND: ",	  "clear(odList) : odList",								  "clears the list l"															  ]
[ "clear",		  "COMMAND: ",	  "clear(odSet) : odSet",								  "clears the set s"															  ]
[ "close",		  "COMMAND: ",	  "close(odDatabase) : void",								  "Close the given database."														  ]
[ "commit",		  "COMMAND: ",	  "commit(odTransaction) : void",							  "commit transaction tid"														  ]
[ "contains",		  "COMMAND: ",	  "contains(odList, any) : bit",							  "returns true if the list contains the given value v"											  ]
[ "contains",		  "COMMAND: ",	  "contains(odSet, any) : bit",								  "returns true if the set contains the give object"											  ]
[ "copy",		  "COMMAND: ",	  "copy(odList) : odList",								  "returns a copy of the input list"													  ]
[ "copy",		  "COMMAND: ",	  "copy(odSet) : odSet",								  "make a copy of the given set"													  ]
[ "destroy",		  "COMMAND: ",	  "destroy(odObject) : void",								  "destroy the given object"														  ]
[ "destroy",		  "COMMAND: ",	  "destroy(odTransaction) : void",							  "Destroy transaction tid"														  ]
[ "difference",		  "COMMAND: ",	  "difference(odSet, odSet) : odSet",							  "returns the set difference of s1 and s2"												  ]
[ "exists",		  "COMMAND: ",	  "exists(odSet, any::1, any::1, odAttr) : bit",					  "returns true if the set contains an attibute with value in between low and hight"							  ]
[ "find",		  "COMMAND: ",	  "find(odDatabase, str) : any",							  "Get the extent with the given name"													  ]
[ "find",		  "COMMAND: ",	  "find(odList, any, odAttr) : odObject",						  "returns object with given attribute value v"												  ]
[ "find",		  "COMMAND: ",	  "find(odSet, any, odAttr) : odObject",						  "finds object with attibute value a"													  ]
[ "find",		  "PROC: ",	  "find(str, str) : any",								  "not available"															  ]
[ "follow",		  "COMMAND: ",	  "follow(odSet, odAttr) : odSet",							  "return all values of a set of objects for a certain attribute."									  ]
[ "get_attr",		  "COMMAND: ",	  "get_attr(odObject, odAttr) : any",							  "Returns the attribute value for object o"												  ]
[ "get_attr_bat",	  "COMMAND: ",	  "get_attr_bat(oid) : BAT[oid,any]",							  "Returns the attribute bat of the given attribute"											  ]
[ "get_cache",		  "COMMAND: ",	  "get_cache(odBatCache) : BAT[int,BAT]",						  "return the nested bat where all cached bats are kept."										  ]
[ "get_extent",		  "COMMAND: ",	  "get_extent(oid) : BAT[oid,any]",							  "Returns the extent bat of the given class"												  ]
[ "get_hits",		  "COMMAND: ",	  "get_hits(odBatCache) : int",								  "return total number of hits for requests to the cache."										  ]
[ "get_kills",		  "COMMAND: ",	  "get_kills(odBatCache) : int",							  "return total number of elements offered for caching."										  ]
[ "get_maxbytes",	  "COMMAND: ",	  "get_maxbytes(odBatCache) : int",							  "get the maximum BAT-size (only bun heap) that a will be cached."									  ]
[ "get_maxentries",	  "COMMAND: ",	  "get_maxentries(odBatCache) : int",							  "get the maximum number of items that the cache can hold."										  ]
[ "get_misses",		  "COMMAND: ",	  "get_misses(odBatCache) : int",							  "return total number of misses in the cache."												  ]
[ "info",		  "PROC: ",	  "info(odBatCache) : BAT[int,any]",							  "not available"															  ]
[ "insert",		  "COMMAND: ",	  "insert(odSet, any) : odSet",								  "inserts val in s"															  ]
[ "insert",		  "COMMAND: ",	  "insert(odSet, odSet) : odSet",							  "inserts the set ins in s"														  ]
[ "insert_after",	  "COMMAND: ",	  "insert_after(odList, int, any) : odList",						  "insert value val after position pos in the list l"											  ]
[ "insert_before",	  "COMMAND: ",	  "insert_before(odList, int, any) : odList",						  "insert value val before position pos in the list l"											  ]
[ "intersect",		  "COMMAND: ",	  "intersect(odSet, odSet) : odSet",							  "returns the intersection of s1 and s2"												  ]
[ "isObject",		  "COMMAND: ",	  "isObject(odObject) : bit",								  "Returns true if the object is valid"													  ]
[ "isempty",		  "COMMAND: ",	  "isempty(odList) : bit",								  "returns true if the list is empty"													  ]
[ "isempty",		  "COMMAND: ",	  "isempty(odSet) : bit",								  "returns true if the set is empty"													  ]
[ "ismore",		  "COMMAND: ",	  "ismore(odIterator) : bit",								  "returns if there are more data items to iterate over, else false."									  ]
[ "isunique",		  "COMMAND: ",	  "isunique(odSet) : bit",								  "returns true if set, false for bag"													  ]
[ "lock_info",		  "COMMAND: ",	  "lock_info(odDatabase) : str",							  "Obtain current state information."													  ]
[ "lock_pass",		  "COMMAND: ",	  "lock_pass(odDatabase) : void",							  "Exclusive lock owner allows readers to get through."											  ]
[ "lock_set",		  "COMMAND: ",	  "lock_set(odDatabase, bit) : void",							  "Set the global database lock. \n         Do this yourself before using the named-object update methods."				  ]
[ "lock_unset",		  "COMMAND: ",	  "lock_unset(odDatabase, bit) : void",							  "Unset the global database lock. "													  ]
[ "next",		  "COMMAND: ",	  "next(odIterator) : odIterator",							  "moves to the next data item to iterate over."											  ]
[ "odBag",		  "COMMAND: ",	  "odBag(BAT[any,any]) : odSet",							  "make a new bag that consists of all head values of this BAT."									  ]
[ "odBag",		  "COMMAND: ",	  "odBag(BAT[any,any], oid) : odSet",							  "make a new bag that consists of all head values of this BAT."									  ]
[ "odBag",		  "COMMAND: ",	  "odBag(int) : odSet",									  "Creates an odl bag, with elements of type el_type"											  ]
[ "odBag",		  "COMMAND: ",	  "odBag(odSet, oid) : odSet",								  "Creates an odl bag, using a old bag, with set id sid "										  ]
[ "odBag",		  "COMMAND: ",	  "odBag(oid) : odSet",									  "Creates an odl bag of objects with the given classId"										  ]
[ "odBag",		  "COMMAND: ",	  "odBag(oid, oid) : odSet",								  "make an bag of attribute values"													  ]
[ "odBatCache",		  "COMMAND: ",	  "odBatCache(int, int) : odBatCache",							  "get a handle to an odBatCache; returns nil if no cache exists."									  ]
[ "odBatCaches",	  "PROC: ",	  "odBatCaches(int) : BAT[str,odBatCache]",						  "not available"															  ]
[ "odDatabase",		  "COMMAND: ",	  "odDatabase(str) : odDatabase",							  "open a database with the given name."												  ]
[ "odDatabaseGet",	  "COMMAND: ",	  "odDatabaseGet() : odDatabase",							  "Get the current database."														  ]
[ "odIterator",		  "COMMAND: ",	  "odIterator(odList, bit) : odIterator",						  "returns a list iterator for the given list"												  ]
[ "odIterator",		  "COMMAND: ",	  "odIterator(odSet, bit) : odIterator",						  "returns a set iterator for the given set."												  ]
[ "odList",		  "COMMAND: ",	  "odList(int) : odList",								  "Creates an odl list, with elements of type el_type"											  ]
[ "odList",		  "COMMAND: ",	  "odList(odList, oid) : odList",							  "Creates an odl list, using a old list, with list id lid "										  ]
[ "odList",		  "COMMAND: ",	  "odList(odSet) : odList",								  "return the list representation of this set s"											  ]
[ "odList",		  "COMMAND: ",	  "odList(oid) : odList",								  "Creates an odl list of objects with the given classId"										  ]
[ "odList",		  "COMMAND: ",	  "odList(oid, oid) : odList",								  "make an list"															  ]
[ "odOIDnew",		  "PROC: ",	  "odOIDnew(int) : oid",								  "not available"															  ]
[ "odObject",		  "COMMAND: ",	  "odObject(oid) : odObject",								  "create an object"															  ]
[ "odObject",		  "COMMAND: ",	  "odObject(oid, oid) : odObject",							  "make an object, and let it be looked up in its extent."										  ]
[ "odSet",		  "COMMAND: ",	  "odSet(BAT[any,any]) : odSet",							  "make a new set that consists of all head values of this BAT."									  ]
[ "odSet",		  "COMMAND: ",	  "odSet(BAT[any,any], oid) : odSet",							  "make a new set that consists of all head values of this BAT."									  ]
[ "odSet",		  "COMMAND: ",	  "odSet(int) : odSet",									  "Creates an odl set, with elements of type el_type"											  ]
[ "odSet",		  "COMMAND: ",	  "odSet(odList) : odSet",								  "return the set representation of this list l"											  ]
[ "odSet",		  "COMMAND: ",	  "odSet(odSet, oid) : odSet",								  "Creates an odl set, using a old set, with set id sid "										  ]
[ "odSet",		  "COMMAND: ",	  "odSet(oid) : odSet",									  "Creates an odl set of objects with the given classId"										  ]
[ "odSet",		  "COMMAND: ",	  "odSet(oid, oid) : odSet",								  "make an set of attribute values"													  ]
[ "odTransaction",	  "COMMAND: ",	  "odTransaction(odDatabase) : odTransaction",						  "Construct a new transaction, returns transaction id"											  ]
[ "oid",		  "COMMAND: ",	  "oid(odObject) : oid",								  "Get the object id"															  ]
[ "remove",		  "COMMAND: ",	  "remove(odList, int) : odList",							  "remove value on position pos in the list l"												  ]
[ "remove",		  "COMMAND: ",	  "remove(odSet, any) : odSet",								  "removes the val from s"														  ]
[ "remove",		  "COMMAND: ",	  "remove(odSet, odSet) : odSet",							  "removes the set r from s"														  ]
[ "rename",		  "COMMAND: ",	  "rename(odDatabase, str, odObject) : void",						  "Reset the name for the given object"													  ]
[ "reserve",		  "COMMAND: ",	  "reserve(odTransaction, odObject, int) : void",					  "reserve a lock with lockmode lm for object o in transaction tid"									  ]
[ "reset",		  "COMMAND: ",	  "reset(odIterator) : odIterator",							  "reset the iterator to the first element."												  ]
[ "retrieve",		  "COMMAND: ",	  "retrieve(odIterator) : any",								  "retrieves the current element."													  ]
[ "retrieve",		  "COMMAND: ",	  "retrieve(odList, int) : any",							  "retrieves the element in the list l at position pos"											  ]
[ "select",		  "COMMAND: ",	  "select(odSet, any::1, any::1, odAttr) : odSet",					  "selects objects with attribute values between low and high"										  ]
[ "set",		  "COMMAND: ",	  "set(odIterator, int) : odIterator",							  "set the iterator to a certain position (first=0)."											  ]
[ "set_attr",		  "COMMAND: ",	  "set_attr(odObject, odAttr, any) : void",						  "sets the attribute value for object o"												  ]
[ "set_maxbytes",	  "COMMAND: ",	  "set_maxbytes(odBatCache, int) : void",						  "set the maximum BAT-size (only bun heap) that a will be cached."									  ]
[ "set_maxentries",	  "COMMAND: ",	  "set_maxentries(odBatCache, int) : void",						  "set the maximum number of items that the cache can hold."										  ]
[ "setname",		  "COMMAND: ",	  "setname(odDatabase, str, odObject) : void",						  "Set the name for the given object"													  ]
[ "size",		  "COMMAND: ",	  "size(odIterator) : int",								  "returns the number of elements in the iteration."											  ]
[ "sort",		  "COMMAND: ",	  "sort(odSet) : odSet",								  "Sorts the set in ascending order."													  ]
[ "sort",		  "COMMAND: ",	  "sort(odSet, odAttr) : odSet",							  "Sorts an object set in ascending order on its member values."									  ]
[ "sorted",		  "COMMAND: ",	  "sorted(odSet) : bit",								  "Checks if the set is sorted"														  ]
[ "sortrev",		  "COMMAND: ",	  "sortrev(odSet) : odSet",								  "Sorts an object set in descending order."												  ]
[ "sortrev",		  "COMMAND: ",	  "sortrev(odSet, odAttr) : odSet",							  "Sorts an object set on its member values in descending order."									  ]
[ "str",		  "COMMAND: ",	  "str(odList, int) : str",								  "make a string representation of a set of maximal maxlen characters."									  ]
[ "str",		  "COMMAND: ",	  "str(odSet, int) : str",								  "make a string representation of a set of maximal maxlen characters."									  ]
[ "table",		  "PROC: ",	  "table(BAT[oid,any], str) : any",							  "not available"															  ]
[ "table",		  "PROC: ",	  "table(BAT[oid,any], str, int) : any",						  "not available"															  ]
[ "table",		  "PROC: ",	  "table(str) : any",									  "not available"															  ]
[ "table",		  "PROC: ",	  "table(str, str, int) : any",								  "not available"															  ]
[ "table_print",	  "PROC: ",	  "table_print(BAT[any,any], BAT[str,BAT], int, int) : any",				  "not available"															  ]
[ "table_setformat",	  "PROC: ",	  "table_setformat(BAT[any,any]) : str",						  "not available"															  ]
[ "union",		  "COMMAND: ",	  "union(odSet, odSet) : odSet",							  "returns the union of s1 and s2"													  ]
[ "unique",		  "COMMAND: ",	  "unique(odSet, bit) : odSet",								  "iff unique=true: construct a bag from s by double eleminiation\n         else: create a Bag result that is equal to the input set."	  ]

Module: "signature"

[ 20 ]
[ 20 ]
#---------------------------------------------------------------------------------------------------------------------------------------------------------#
# function		| type		| signature							| help						  #
#---------------------------------------------------------------------------------------------------------------------------------------------------------#
[ "ODLdestroy_odmg",	  "PROC: ",	  "ODLdestroy_odmg() : void",					  "not available"				  ]
[ "ODLnew_odmg",	  "PROC: ",	  "ODLnew_odmg() : void",					  "not available"				  ]
[ "bitset_toStr",	  "PROC: ",	  "bitset_toStr(any) : any",					  "not available"				  ]
[ "callFunction",	  "PROC: ",	  "callFunction(str) : any",					  "not available"				  ]
[ "find",		  "COMMAND: ",	  "find(odSet, odList, odAttr) : odObject",			  "Finds object with attribute list value v"	  ]
[ "find",		  "COMMAND: ",	  "find(odSet, odSet, odAttr) : odObject",			  "Finds object with attribute set value v"	  ]
[ "find",		  "PROC: ",	  "find(str, str) : any",					  "not available"				  ]
[ "info",		  "PROC: ",	  "info(odBatCache) : BAT[int,any]",				  "not available"				  ]
[ "odBatCaches",	  "PROC: ",	  "odBatCaches(int) : BAT[str,odBatCache]",			  "not available"				  ]
[ "odOIDnew",		  "PROC: ",	  "odOIDnew(int) : oid",					  "not available"				  ]
[ "select",		  "COMMAND: ",	  "select(odSet, odList, odAttr) : odSet",			  "Selects objects with attribute list value v"	  ]
[ "select",		  "COMMAND: ",	  "select(odSet, odSet, odAttr) : odSet",			  "Select objects with attribute set value v"	  ]
[ "signatures",		  "COMMAND: ",	  "signatures(odList) : BAT[oid,size_signature]",		  "Get the signature table"			  ]
[ "signatures",		  "COMMAND: ",	  "signatures(odSet) : BAT[oid,size_signature]",		  "Get the signature table"			  ]
[ "table",		  "PROC: ",	  "table(BAT[oid,any], str) : any",				  "not available"				  ]
[ "table",		  "PROC: ",	  "table(BAT[oid,any], str, int) : any",			  "not available"				  ]
[ "table",		  "PROC: ",	  "table(str) : any",						  "not available"				  ]
[ "table",		  "PROC: ",	  "table(str, str, int) : any",					  "not available"				  ]
[ "table_print",	  "PROC: ",	  "table_print(BAT[any,any], BAT[str,BAT], int, int) : any",	  "not available"				  ]
[ "table_setformat",	  "PROC: ",	  "table_setformat(BAT[any,any]) : str",			  "not available"				  ]

quit;
