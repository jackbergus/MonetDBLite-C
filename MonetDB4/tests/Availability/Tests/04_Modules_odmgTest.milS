setoid(oid(20000000));

proc doit(str The_mod) : void {
	var Fname:=new(oid,str);Fname.col_name("function");
	var FnameS:=new(oid,str);FnameS.col_name("function");
	var Ftype:=new(oid,str);Ftype.col_name("type");
	var Fsig:=new(oid,str);Fsig.col_name("signature");
	var Fhelp:=new(oid,str);Fhelp.col_name("help");
	var Fnts:=new(oid,str);

	var Mod_fcn:=sdiff(monet_fcntbl.reverse(),Static_fcn).reverse();
	Mod_fcn.sort()@batloop() {
	    var addThis:=false;
	    if (not(monet_fcn_mid.exist($t))) {
		addThis:=true;
	    } else if (monet_mod_nme.find(monet_fcn_mid.find($t))=The_mod) {
		addThis:=true;
	    }
	    if (addThis) {
		var Tname:=$h;
		var Ttype:=help_tpe(monet_fcn_tpe.find($t));
		var Tsig:=format_fcn_sig($t);
		var Thelp:="";
		if (monet_fcn_dsc.exist($t)) {
			Thelp:=monet_fcn_dsc.find($t);
		} else {
			Thelp:="not available";
		}
		Fname.insert($t,Tname);
		Ftype.insert($t,Ttype);
		Fsig.insert($t,Tsig);
		Fhelp.insert($t,Thelp);
		Fnts.insert($t,sprintf("%s %s %s",Tname,Ttype,Tsig));
	    }
	}

	Fnts.count().print();
	Fnts.reverse().sort().reverse()@batloop() {
		FnameS.insert($h,Fname.find($h));
	}
	FnameS.count().print(); table(1,FnameS,Ftype,Fsig,Fhelp);

	Fname.delete();
	FnameS.delete();
	Ftype.delete();
	Fsig.delete();
	Fhelp.delete();
	Fnts.delete();
}

var Static_fcn:=monet_fcntbl.reverse().copy();

printf("Module: \"Meta\"\n\n");

module(Meta);

doit("Meta");

Static_fcn:=sunion(Static_fcn,monet_fcntbl.reverse());

var Odmg_mods:=MODULES.select("odmgTest").copy().access(BAT_WRITE).delete("Meta").sort();
table(Odmg_mods.reverse().col_name(sprintf("%i modules",Odmg_mods.count())));
Odmg_mods@batloop() {
	var The_mod:=$h;
	printf("\nModule: \"%s\"\n\n",The_mod);
	module($h);
	doit(The_mod);
	drop($h);
	Static_fcn:=sunion(Static_fcn,monet_fcntbl.reverse());
}

quit();
