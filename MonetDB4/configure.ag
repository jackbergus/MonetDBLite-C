dnl -*- mode: autoconf -*-

# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-2007 CWI.
# All Rights Reserved.

dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.59)
AC_INIT([MonetDB Server], [4.19.0], [monet@cwi.nl], [MonetDB4])
#                          ^^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AC_CONFIG_AUX_DIR(conf)
AC_CANONICAL_HOST
AC_CANONICAL_TARGET
AH_TOP([#include "sysdefs.h"])
AH_BOTTOM([#include "stddef.h"])

dnl ----------------------
AM_INIT_AUTOMAKE([tar-ustar])
AC_CONFIG_SRCDIR([src/monet/monet.mx])
AM_CONFIG_HEADER(monetdb4_config.h:conf/config.h.in)
CONFIG_H=monetdb4_config.h
AC_SUBST(CONFIG_H)

HOST=[$target]
AC_DEFINE_UNQUOTED(HOST, "$HOST", [Host identifier])

if test x"$target_os" = xcygwin; then
	AC_DEFINE(WIN32, 1, [Define on MS Windows (also under Cygwin)])
fi

# MONETDB4_BUILD and MONETDB4_SOURCE are *only* used for monetdb4-config
# MONETDB4_SOURCE is the absolute path name of the source directory
# (srcdir can be relative)

# The Q versions of various variables are used in places where \'s
# need to be escapes with an extra \.  Configure does not support \'s
# in path names, so there is no need to do anything special here
# except set the variables.  The command to set them in case we do
# need to escape the \'s is Qvar=`echo "$var" | sed 's/\\\\/\\\\\\\\/g'`
MONETDB4_BUILD=[`pwd`]
AC_SUBST(MONETDB4_BUILD)

MONETDB4_SOURCE=[`(cd $srcdir && pwd)`]
AC_SUBST(MONETDB4_SOURCE)

# if no --prefix option, we must set Qprefix to the default value
# the problem is that prefix is set very late in the process if it
# wasn't set by --prefix
if test "${prefix}x" = "NONEx"; then
	Qprefix="${ac_default_prefix}"
else
	Qprefix="${prefix}"
fi
Qprefix="`echo "$Qprefix" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qprefix)
# exec_prefix is created very late, so let make do the expansion
if test "${exec_prefix}x" = "NONEx"; then
	Qexec_prefix='${prefix}'
else
	Qexec_prefix="`echo "$exec_prefix" | sed 's/\\\\/\\\\\\\\/g'`"
fi
AC_SUBST(Qexec_prefix)

# Check for Monet 
req_monetdb_ver='1.19.0'
#                ^^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AM_MONETDB_COMMON($req_monetdb_ver)
if test "x$have_monetdb" != xyes; then
	if test "x$MONETDBVERS" = "x"; then
		AC_MSG_ERROR([MonetDB was not found. MonetDB4 requires at least version $req_monetdb_ver of MonetDB.])
	else
		AC_MSG_ERROR([MonetDB4 requires at least version $req_monetdb_ver of MonetDB, but only version $MONETDBVERS was found.])
	fi
fi
req_clients_ver='1.18.0'
#                ^^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.
AM_MONETDB_CLIENTS($req_clients_ver)
AM_MONETDB_DEFAULTS()
AM_MONETDB_COMPILER()
AM_MONETDB_TOOLS()
AM_MONETDB_OPTIONS()
AM_MONETDB_LIBS()

AC_PROG_LIBTOOL

dnl provide different versions of the paths derived above
if test "${prefix}x" = "NONEx"; then
	Xprefix="`$translatepath "$Qprefix"`"
	QXprefix="`echo "$Xprefix" | sed 's/\\\\/\\\\\\\\/g'`"
else
	Xprefix="`$translatepath "$prefix"`"
	QXprefix="`echo "$Xprefix" | sed 's/\\\\/\\\\\\\\/g'`"
fi
if test "${exec_prefix}x" = "NONEx"; then
	Xexec_prefix="`$translatepath "$Qexec_prefix"`"
	QXexec_prefix="`echo "$Xexec_prefix" | sed 's/\\\\/\\\\\\\\/g'`"
else
	Xexec_prefix="`$translatepath "$exec_prefix"`"
	QXexec_prefix="`echo "$Xexec_prefix" | sed 's/\\\\/\\\\\\\\/g'`"
fi
AC_SUBST(Xprefix)
AC_SUBST(QXprefix)
AC_DEFINE_UNQUOTED(MONETDB4_PREFIX,"$QXprefix",[architecture-independent files])
AC_SUBST(Xexec_prefix)
AC_SUBST(QXexec_prefix)
AC_DEFINE_UNQUOTED(MONETDB4_EXEC_PREFIX,"$QXexec_prefix",[architecture-dependent files])
QMONETDB4_BUILD="$MONETDB4_BUILD"
XMONETDB4_BUILD="`$translatepath "$MONETDB4_BUILD"`"
QXMONETDB4_BUILD="`echo "$XMONETDB4_BUILD" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(QMONETDB4_BUILD)
AC_SUBST(XMONETDB4_BUILD)
AC_SUBST(QXMONETDB4_BUILD)
QMONETDB4_SOURCE="$MONETDB4_SOURCE"
XMONETDB4_SOURCE="`$translatepath "$MONETDB4_SOURCE"`"
QXMONETDB4_SOURCE="`echo "$XMONETDB4_SOURCE" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(QMONETDB4_SOURCE)
AC_SUBST(XMONETDB4_SOURCE)
AC_SUBST(QXMONETDB4_SOURCE)
Qsrcdir="$srcdir"
Xsrcdir="`$translatepath "$srcdir"`"
QXsrcdir="`echo "$Xsrcdir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qsrcdir)
AC_SUBST(Xsrcdir)
AC_SUBST(QXsrcdir)
Qlocalstatedir="$localstatedir"
Xlocalstatedir="`$translatepath "$localstatedir"`"
QXlocalstatedir="`echo "$Xlocalstatedir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_DEFINE_UNQUOTED(MONETDB4_LOCALSTATEDIR,"$QXlocalstatedir",[modifiable single-machine data])
AC_SUBST(Qlocalstatedir)
AC_SUBST(Xlocalstatedir)
AC_SUBST(QXlocalstatedir)
Qlibdir="$libdir"
Xlibdir="`$translatepath "$libdir"`"
QXlibdir="`echo "$Xlibdir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qlibdir)
AC_SUBST(Xlibdir)
AC_SUBST(QXlibdir)
AC_DEFINE_UNQUOTED(MONETDB4_LIBDIR,"$QXlibdir",[object code libraries])
Qsysconfdir="$sysconfdir"
Xsysconfdir="`$translatepath "$sysconfdir"`"
QXsysconfdir="`echo "$Xsysconfdir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_DEFINE_UNQUOTED(MONETDB4_SYSCONFDIR,"$QXsysconfdir",[read-only single-machine data])
AC_SUBST(Qsysconfdir)
AC_SUBST(Xsysconfdir)
AC_SUBST(QXsysconfdir)
Qbindir="$bindir"
Xbindir="`$translatepath "$bindir"`"
QXbindir="`echo "$Xbindir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qbindir)
AC_SUBST(Xbindir)
AC_SUBST(QXbindir)
Qlibexecdir="$libexecdir"
Xlibexecdir="`$translatepath "$libexecdir"`"
QXlibexecdir="`echo "$Xlibexecdir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qlibexecdir)
AC_SUBST(Xlibexecdir)
AC_SUBST(QXlibexecdir)
Qdatarootdir="$datarootdir"
Xdatarootdir="`$translatepath "$datarootdir"`"
QXdatarootdir="`echo "$Xdatarootdir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qdatarootdir)
AC_SUBST(Xdatarootdir)
AC_SUBST(QXdatarootdir)
if test "${datadir}" = '${datarootdir}'; then
	datadir="${datarootdir}"
fi
Qdatadir="$datadir"
Xdatadir="`$translatepath "$datadir"`"
QXdatadir="`echo "$Xdatadir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qdatadir)
AC_SUBST(Xdatadir)
AC_SUBST(QXdatadir)
Qmandir="$mandir"
Xmandir="`$translatepath "$mandir"`"
QXmandir="`echo "$Xmandir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qmandir)
AC_SUBST(Xmandir)
AC_SUBST(QXmandir)
Qincludedir="$includedir"
Xincludedir="`$translatepath "$includedir"`"
QXincludedir="`echo "$Xincludedir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qincludedir)
AC_SUBST(Xincludedir)
AC_SUBST(QXincludedir)
Qinfodir="$infodir"
Xinfodir="`$translatepath "$infodir"`"
QXinfodir="`echo "$Xinfodir" | sed 's/\\\\/\\\\\\\\/g'`"
AC_SUBST(Qinfodir)
AC_SUBST(Xinfodir)
AC_SUBST(QXinfodir)

dnl AC_CHECK_PROG(CP,cp,cp -f)
dnl AC_CHECK_PROG(MKDIR,mkdir,mkdir -p)
dnl AC_CHECK_PROG(TAGS,ctags,ctags)

dnl get monet compiler options (debug,warning,optimize,profiling,instrument)

dnl Checks for header files.
AC_HEADER_DIRENT()
AC_HEADER_SYS_WAIT()
CFLAGS_bak="$CFLAGS"
CFLAGS="$CFLAGS $X_CFLAGS"
AC_CHECK_HEADER(malloc.h, AC_DEFINE(HAVE_MALLOC_H,1,[Define to 1 if you have the
 <malloc.h> header file.]),,[ ])
AC_CHECK_HEADERS(fcntl.h limits.h unistd.h pwd.h dlfcn.h)
AC_CHECK_HEADERS(time.h sys/time.h utime.h sys/utime.h)
AC_CHECK_HEADERS(sys/file.h sys/param.h sys/times.h sys/mman.h)
AC_CHECK_HEADERS(rlimit.h sys/resource.h)
AC_CHECK_HEADERS(string.h strings.h signal.h sys/socket.h sys/un.h termios.h)
AC_CHECK_HEADERS(ieeefp.h winsock.h xmmintrin.h)
CFLAGS="$CFLAGS_bak"
dnl We don't need to check for these two: they're only present on
dnl Windows.  We list them here for completeness, since the
dnl corresponding defines are used.
dnl AC_CHECK_HEADERS(io.h winsock.h)

if test -z "$ac_includes_default"	# compatibility with autoconf 2.13
then
	ac_includes_default='#include <stdio.h>
#if HAVE_SYS_TYPES_H
# include <sys/types.h>
#endif
#if HAVE_SYS_STAT_H
# include <sys/stat.h>
#endif
#if STDC_HEADERS
# include <stdlib.h>
# include <stddef.h>
#else
# if HAVE_STDLIB_H
#  include <stdlib.h>
# endif
#endif
#if HAVE_STRING_H
# if !STDC_HEADERS && HAVE_MEMORY_H
#  include <memory.h>
# endif
# include <string.h>
#endif
#if HAVE_STRINGS_H
# include <strings.h>
#endif
#if HAVE_INTTYPES_H
# include <inttypes.h>
#else
# if HAVE_STDINT_H
#  include <stdint.h>
# endif
#endif
#if HAVE_UNISTD_H
# include <unistd.h>
#endif'
fi

dnl Checks for typedefs, structures, and compiler characteristics.
dnl AC_TYPE_PID_T()
AC_CHECK_TYPE([pid_t],,
	      [AC_DEFINE_UNQUOTED([pid_t], [int],
                                  [Define to 'int' if <sys/types.h> does not define.])],
	      [#include <stddef.h>
#include <sys/types.h>])

dnl AC_TYPE_OFF_T()
AC_CHECK_TYPE([off_t],,
	      [AC_DEFINE_UNQUOTED([off_t], [long],
                                  [Define to 'long' if <sys/types.h> does not define.])],
	      [#include <stddef.h>
#include <sys/types.h>])

AC_HEADER_STAT()
AC_HEADER_TIME()
AC_STRUCT_TM()
AC_STRUCT_TIMEZONE()

AC_TRY_COMPILE([$ac_includes_default
#include <malloc.h>], [struct mallinfo m;], AC_DEFINE(HAVE_STRUCT_MALLINFO, 1, [Define if you have struct mallinfo])
AC_TRY_COMPILE([$ac_includes_default
#include <malloc.h>], [struct mallinfo m = {0};
/* compilers that don't like <0 comparisons on unsigned data *
 * will fail here (but then not in src/gdk/gdk_utils.mx)     */
int x = (m.usmblks < 0);], AC_DEFINE(HAVE_SIGNED_MALLINFO, 1, [Define if your mallinfo struct has signed elements])
))
AC_CACHE_CHECK(for _sys_siglist, mn_cv_have__sys_siglist, [
AC_TRY_LINK([$ac_includes_default], [printf("%s\n", _sys_siglist[0]);], mn_cv_have__sys_siglist=yes, mn_cv_have__sys_siglist=no)])
if test $mn_cv_have__sys_siglist = yes; then
	AC_DEFINE(HAVE__SYS_SIGLIST, 1, [Define if you have _sys_siglist])
fi

AC_COMPILE_IFELSE(AC_LANG_SOURCE([int foo(int * restrict p) { return *p; }]),
AC_DEFINE(HAVE_RESTRICT, 1, [Define if the compiler supports the restrict keyword]),
AC_COMPILE_IFELSE(AC_LANG_SOURCE([int foo(int * __restrict__ p) { return *p; }]),
AC_DEFINE(HAVE___RESTRICT__, 1, [Define if the compiler supports the __restrict__ keyword])))

dnl Checks for library functions.
AC_FUNC_ALLOCA()
AC_FUNC_MMAP()
dnl  autoconf says, we cannot use AC_FUNC_SETPGRP when cross-compiling...
if test x$cross_compiling != xyes; then
	AC_FUNC_SETPGRP()
fi
AC_TYPE_SIGNAL()
AC_FUNC_UTIME_NULL()
AC_FUNC_VPRINTF()
AC_FUNC_MEMCMP()
AC_CHECK_FUNCS(strsignal)
AC_CHECK_FUNCS(mkdir rmdir getcwd getopt getrlimit vsnprintf snprintf kill pipe setsid)
AC_CHECK_FUNCS(strcspn strdup strstr strtod strtol strerror strcasecmp strncasecmp)
AC_CHECK_FUNCS(strtoll strtoull)
AC_CHECK_FUNCS(gethostname setenv putenv select times)
AC_CHECK_FUNCS(fstat getpwuid getuid ftime sysconf fcntl shutdown)
AC_CHECK_FUNCS(mrand48 drand48)
AC_CHECK_FUNCS(nanosleep lockf)
AC_CHECK_FUNCS(ctime_r asctime_r localtime_r isinf fpclassify fpclass getlogin)
AC_CHECK_FUNCS(madvise posix_madvise posix_fadvise uname)
AC_CHECK_FUNCS(readdir rewinddir closedir)

asctime_r3=yes
AC_MSG_CHECKING(asctime_r3)
AC_TRY_LINK([$ac_includes_default
#include <time.h>], 
[char buf[26]; struct tm t; asctime_r(&t,buf,26);],
[AC_DEFINE(HAVE_ASCTIME_R3, 1, [Define if you have asctime_r(struct tm*,char *buf,size_t s)])], [asctime_r3=no])
AC_MSG_RESULT($asctime_r3)

ctime_r3=yes
AC_MSG_CHECKING(ctime_r3)
AC_TRY_LINK([$ac_includes_default
#include <time.h>], 
[char buf[26]; time_t t; ctime_r(&t,buf,26);],
[AC_DEFINE(HAVE_CTIME_R3, 1, [Define if you have ctime_r(time_t*,char *buf,size_t s)])], [ctime_r3=no])
AC_MSG_RESULT($ctime_r3)

AM_MONETDB_UTILS()
AM_MONETDB_MEL()

AM_CONDITIONAL(CROSS_COMPILING, test x$cross_compiling = xyes)

dnl  CFLAGS for our code are stricter than what autoconf can cope with.
CFLAGS="$CFLAGS \$(X_CFLAGS)"
