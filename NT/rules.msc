# -*- makefile -*-

# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2013 MonetDB B.V.
# All Rights Reserved.

VERSION=11.15.12
#       ^^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.

!IFDEF MAKE_INCLUDEFILE
!INCLUDE $(MAKE_INCLUDEFILE)
!ENDIF

!IFNDEF bits
!IF defined(BITS32)
bits=32
!ELSEIF defined(BITS64)
bits=64
!ELSE
# default:
bits=32
!ENDIF
!ENDIF

!IF $(bits) == 32
!IFNDEF BITS32
BITS32=True
!ENDIF
!ELSEIF $(bits) == 64
!IFNDEF BITS64
BITS64=True
!ENDIF
!ENDIF

!IFDEF DEBUG
DEBUGLIB=d
!ELSE
DEBUGLIB=
!ENDIF

!IFDEF DEBUG
# force W_CFLAGS off in debug builds: using icc, you get way more
# warnings about casts which results in the code being uncompilable
W_CFLAGS =
!ENDIF
!IFDEF ENABLE_STRICT
# strict mode: treat warnings as errors
W_CFLAGS = -WX
!ENDIF

# This is the location of pthreads for Win32, 
# see http://sources.redhat.com/pthreads-win32/
# Note that pthreads are no longer used to compile MonetDB (although
# it might still work).
PTHREAD =
!IFNDEF PTHREAD_INCS
PTHREAD_INCS =
!ENDIF
!IFNDEF PTHREAD_LIBS
PTHREAD_LIBS =
!ENDIF

ODBCINST_LIBS = odbccp32.lib user32.lib
ODBC_LIBS = odbc32.lib

!IFNDEF PYTHON2BASE
PYTHON2BASE=C:\Python27
!ENDIF
!IFNDEF PYTHON2LIB
PYTHON2LIB=python27.lib
!ENDIF
PYTHON2_LIBDIR=share\MonetDB\python

!IFNDEF PYTHON3BASE
PYTHON3BASE=C:\Python32
!ENDIF
!IFNDEF PYTHON3LIB
PYTHON3LIB=python32.lib
!ENDIF
PYTHON3_LIBDIR=share\MonetDB\python3

!IFDEF HAVE_PERL
!IFNDEF LIBPERL
!IF $(bits) == 32
LIBPERL = C:\Perl
!ELSE
LIBPERL = C:\Perl64
!ENDIF
!ENDIF
!IFNDEF PERLLIB
PERLLIB = perl510.lib
!ENDIF
PERL_INCS = -I$(LIBPERL)\lib\CORE -DWIN32
PERL_LIBS = $(LIBPERL)\lib\CORE\$(PERLLIB)
PERL_LIBDIR = share\MonetDB\perl
!ENDIF

!IFDEF HAVE_PCRE
# This is the location of the PCRE library
!IFNDEF LIBPCRE
LIBPCRE = C:\Program Files\PCRE
!ENDIF
pcre_LIBS = "$(LIBPCRE)\lib\pcre$(DEBUGLIB).lib"
pcre_CFLAGS = -DHAVE_LIBPCRE "-I$(LIBPCRE)\include"
!ENDIF

!IFDEF HAVE_OPENSSL
# This is the location of the OpenSSL library
!IFNDEF LIBOPENSSL
LIBOPENSSL = C:\openssl-0.9.8k.win$(bits)
!ENDIF
openssl_LIBS = "$(LIBOPENSSL)\lib\ssleay32.lib" "$(LIBOPENSSL)\lib\libeay32.lib"
openssl_CFLAGS = -DHAVE_OPENSSL "-I$(LIBOPENSSL)\include"
!ENDIF

!IFDEF HAVE_ICONV
# This is the location of the ICONV library
!IFNDEF LIBICONV
LIBICONV = C:\iconv-1.9.2.win$(bits)
!ENDIF
LTLIBICONV = "$(LIBICONV)\lib\iconv$(DEBUGLIB).lib"
ICONV_CFLAGS = -DHAVE_ICONV "-I$(LIBICONV)\include"
!ENDIF

!IFDEF HAVE_LIBZ
# This is the location of the ZLIB library
!IFNDEF LIBZLIB
LIBZLIB = C:\zlib-1.2.3.win$(bits)
!ENDIF
!IFNDEF LIBZLIBFILE
LIBZLIBFILE=zlib1
!ENDIF
zlib_LIBS = "$(LIBZLIB)\lib\$(LIBZLIBFILE)$(DEBUGLIB).lib"
zlib_CFLAGS = -DHAVE_LIBZ "-I$(LIBZLIB)\include"
!ENDIF

!IFDEF HAVE_LIBBZ2
# This is the location of the BZIP2 library
!IFNDEF LIBBZIP2
LIBBZIP2 = C:\bzip2-1.0.5.win$(bits)
!ENDIF
BZ_LIBS = "$(LIBBZIP2)\lib\libbz2$(DEBUGLIB).lib"
BZ_CFLAGS = -DHAVE_LIBBZ2 "-I$(LIBBZIP2)\include"
!ENDIF

# This is the location of the libxml2 library
!IFNDEF LIBXML2
LIBXML2 = C:\libxml2-2.6.30.win$(bits)
!ENDIF
libxml2_CFLAGS = "-I$(LIBXML2)\include" $(zlib_CFLAGS) $(ICONV_CFLAGS)
libxml2_LIBS = "$(LIBXML2)\lib\libxml2$(DEBUGLIB).lib" $(zlib_LIBS) $(ICONV_LIBS)

!IFNDEF LIBGEOS
LIBGEOS = C:\geos-3.0.win$(bits)
!ENDIF
!IFDEF DEBUG
GEOS_LIBS = $(LIBGEOS)\lib\geos_c_i$(GEOSDEBUGLIB).lib
!ELSE
GEOS_LIBS = $(LIBGEOS)\lib\geos_c_i.lib
!ENDIF
GEOS_INCS = -I$(LIBGEOS)\include

!IFNDEF RUBY_DIR
RUBY_DIR = lib\ruby\gems\1.9.1
!ENDIF

# some programs we use, probably no need to edit

# install python, flex and bison on your systems
# PYTHON may be either a version 2 or a version 3
PYTHON = python
YACC = bison
LEX = flex

ARCHIVER = lib /nologo
GENDLL =
RC = rc

MT = mt /nologo
JAVAC = javac
JAR = jar
ANT = ant.bat

# no need to edit beyond here..

CONFIGURE_PY = "$(TOPDIR)\..\NT\winconfig.py"
WINCONFIG_INCS = "-I$(TOPDIR)\..\buildtools\conf"

!IFDEF DEBUG
COMPILERFLAGS = -GF -W3 $(W_CFLAGS) -MDd -nologo -Od -D_DEBUG -RTC1 -Zi
!ELSE
# add -Zi flag (implies -debug, not -D_DEBUG) to get symbol info in .pdb files
COMPILERFLAGS = -GF -W3 $(W_CFLAGS) -MD -nologo -Ox -Zi
!ENDIF
CFLAGS = $(COMPILERFLAGS)  -I. -I$(TOPDIR) $(LIBC_INCS) $(INCLUDES) $(WINCONFIG_INCS) $(ICONV_CFLAGS)

# No general LDFLAGS needed
INSTALL = copy
# TODO
# replace this hack by something like configure ...
MKDIR = mkdir
ECHO = echo
CD = cd

exec_prefix = $(prefix)

bindir = $(exec_prefix)\bin
sbindir = $(exec_prefix)\sbin
libexecdir = $(exec_prefix)\libexec
datadir = $(prefix)\share
sysconfdir = $(prefix)\etc
sharedstatedir = $(prefix)\com
localstatedir = $(prefix)\var
libdir = $(exec_prefix)\lib
infodir = $(prefix)\info
mandir = $(prefix)\man
includedir = $(prefix)\include
oldincludedir = \usr\include
pkgdatadir = $(datadir)\$(pkg)
pkglibdir = $(libdir)\$(pkg)
pkgincludedir = $(includedir)\$(pkg)

LIBC_INCS = $(PTHREAD_INCS)
MATH_LIBS =
SOCKET_LIBS = wsock32.lib Ws2_32.lib

MX=$(TOPDIR)\buildtools\Mx\Mx.exe
CP=copy
MV=copy
DEL=del
EDITBIN=editbin /nologo
NATIVE_WIN32 = 1

# we can't use the Windows utility find since it prints the file name
# we could use the Unix utility grep, but we can also use the Windows
# utility findstr, but with some care and feeding.
FILTER=findstr /v /l
FILTERPREF=/c:

# To avoid a too long commandline when calling winconfig.py ($(CONFIGURE)),
# we called the settings for AM_CONDITIONALS defined in configure.ag into
# a file ($(TOPDIR)\winconfig_conds.py) where winconfig.py reads these
# settings from, and make each call of winconfig.py (via $(CONFIGURE))
# depend on this file.
# To avoid unnecessary identical re-creation of $(TOPDIR)\winconfig_conds.py
# (and thus unnecessary identical re-conversion of *.in files by winconfig.py,
#  and thus unnecessary re-compilation of the resulting code files),
# we first create a temporary $(TOPDIR)\winconfig_conds_new.py with each
# nmake call, and then update the actual $(TOPDIR)\winconfig_conds.py
# only if the new $(TOPDIR)\winconfig_conds_new.py is different.

# These should cover all AM_CONDITIONALS defined in configure.ag, i.e.,
# `grep AM_CONDITIONAL configure.ag | sed 's|^AM_CONDITIONAL(\([^,]*\),.*$|\1|' | sort -u`
create_winconfig_conds_new_py:
	$(ECHO) # > "$(TOPDIR)\winconfig_conds_new.py"
!IFDEF BITS32
	$(ECHO) BITS32_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) BITS32_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF BITS64
	$(ECHO) BITS64_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) BITS64_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF CROSS_COMPILING
	$(ECHO) CROSS_COMPILING_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) CROSS_COMPILING_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF DOCTOOLS
	$(ECHO) DOCTOOLS_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) DOCTOOLS_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF ENABLE_CRACKERS
	$(ECHO) ENABLE_CRACKERS_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) ENABLE_CRACKERS_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF ENABLE_DATACELL
	$(ECHO) ENABLE_DATACELL_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) ENABLE_DATACELL_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF HAVE_CFITSIO
	$(ECHO) HAVE_CFITSIO_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) HAVE_CFITSIO_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF HAVE_DEVELOPER
	$(ECHO) HAVE_DEVELOPER_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) HAVE_DEVELOPER_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF HAVE_GDK
	$(ECHO) HAVE_GDK_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) HAVE_GDK_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF HAVE_GEOM
	$(ECHO) HAVE_GEOM_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) HAVE_GEOM_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF HAVE_JAVA
	$(ECHO) HAVE_JAVA_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!IFDEF HAVE_JAVAJDBC
	$(ECHO) HAVE_JAVAJDBC_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) HAVE_JAVAJDBC_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF HAVE_JAVAMEROCONTROL
	$(ECHO) HAVE_JAVAMEROCONTROL_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) HAVE_JAVAMEROCONTROL_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!ELSE
	$(ECHO) HAVE_JAVA_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
	$(ECHO) HAVE_JAVAJDBC_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
	$(ECHO) HAVE_JAVAMEROCONTROL_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF HAVE_LIBBZ2
	$(ECHO) HAVE_LIBBZ2_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) HAVE_LIBBZ2_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF HAVE_LIBZ
	$(ECHO) HAVE_LIBZ_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) HAVE_LIBZ_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF HAVE_MONETDB5
	$(ECHO) HAVE_MONETDB5_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) HAVE_MONETDB5_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF HAVE_MSEED
	$(ECHO) HAVE_MSEED_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) HAVE_MSEED_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF HAVE_ODBC
	$(ECHO) HAVE_ODBC_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) HAVE_ODBC_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF HAVE_PCRE
	$(ECHO) HAVE_PCRE_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) HAVE_PCRE_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF HAVE_PERL
	$(ECHO) HAVE_PERL_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) HAVE_PERL_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF HAVE_PYTHON
	$(ECHO) HAVE_PYTHON_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) HAVE_PYTHON_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF HAVE_PYTHON2
	$(ECHO) HAVE_PYTHON2_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) HAVE_PYTHON2_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF HAVE_PYTHON3
	$(ECHO) HAVE_PYTHON3_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) HAVE_PYTHON3_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF HAVE_RAPTOR
	$(ECHO) HAVE_RAPTOR_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) HAVE_RAPTOR_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF HAVE_RUBYGEM
	$(ECHO) HAVE_RUBYGEM_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) HAVE_RUBYGEM_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF HAVE_SPHINXCLIENT
	$(ECHO) HAVE_SPHINXCLIENT_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) HAVE_SPHINXCLIENT_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF HAVE_SQL
	$(ECHO) HAVE_SQL_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) HAVE_SQL_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF HAVE_JAQL
	$(ECHO) HAVE_JAQL_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) HAVE_JAQL_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF HAVE_TESTING
	$(ECHO) HAVE_TESTING_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) HAVE_TESTING_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF NATIVE_WIN32
	$(ECHO) NATIVE_WIN32_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) NATIVE_WIN32_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF NOT_WIN32
	$(ECHO) NOT_WIN32_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) NOT_WIN32_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF
!IFDEF PROFILING
	$(ECHO) PROFILING_FALSE='#' >> "$(TOPDIR)\winconfig_conds_new.py"
!ELSE
	$(ECHO) PROFILING_FALSE='' >> "$(TOPDIR)\winconfig_conds_new.py"
!ENDIF

update_winconfig_conds_py: create_winconfig_conds_new_py
	if not exist "$(TOPDIR)\winconfig_conds.py" $(CP) "$(TOPDIR)\winconfig_conds_new.py" "$(TOPDIR)\winconfig_conds.py"
	C:\cygwin\bin\cmp.exe -s "$(TOPDIR)\winconfig_conds_new.py" "$(TOPDIR)\winconfig_conds.py" || \
	$(CP) "$(TOPDIR)\winconfig_conds_new.py" "$(TOPDIR)\winconfig_conds.py"

CONFIGURE=$(PYTHON) $(CONFIGURE_PY) \
	"$(TOPDIR)\winconfig_conds.py" \
	"prefix=$(prefix)" \
	"JDBCCLIENT_JAR=$(JDBCCLIENT_JAR)" \
	"LIBICONV=$(LIBICONV)" \
	"LIBXML2=$(LIBXML2)" \
	"LIBZLIB=$(LIBZLIB)" \
	"PACKAGE=$(pkg)" \
	"PERL_LIBDIR=$(PERL_LIBDIR)" \
	"PYTHON=$(PYTHON)" \
	"PYTHON2=$(PYTHON2)" \
	"PYTHON2_LIBDIR=$(PYTHON2_LIBDIR)" \
	"PYTHON3=$(PYTHON3)" \
	"PYTHON3_LIBDIR=$(PYTHON3_LIBDIR)" \
	"RUBY_DIR=$(RUBY_DIR)" \
	"TOPDIR=$(TOPDIR)" \
	"VERSION=$(VERSION)" \
	"builtby=%USER%@%COMPUTERNAME%" \
	"compilercall=$(CC) $(COMPILERFLAGS)" \
	"linkercall=$(CC) $(COMPILERFLAGS)" \
	"pcreversion=" \
	"opensslversion=" \
	"libxml2version="

# Use "nmake DEBUG=1" to get a debug build (assertions enabled);
# use "nmake NDEBUG=1" to get a release build (assertions disabled);
# use plain "nmake" to get the default.
!IFNDEF DEBUG
!IFDEF NDEBUG
CFLAGS = $(CFLAGS) -DNDEBUG
MAKEDEBUG=NDEBUG=1
!ELSE
# default in case neither NDEBUG nor DEBUG are defined
CFLAGS = $(CFLAGS)
MAKEDEBUG=
!ENDIF
!ELSE
# CFLAGS = $(CFLAGS) -Wp64
MAKEDEBUG=DEBUG=1
!ENDIF

PSAPILIB = psapi.lib

# When compiled with plain `nmake`,
# 64-bit OIDs are used by default on 64-bit Windows
# (see monetdb_config.h.in for details);
# compile with `nmake MONET_OID32=1` to use 32-bit OIDs on 64-bit Windows.
!IF $(bits) == 64
!IFDEF MONET_OID32
CFLAGS = $(CFLAGS) -DMONET_OID32
!ENDIF
!ENDIF

CONFIG_H = monetdb_config.h

{$(srcdir)}.mx.h:
	$(MX) $(MXFLAGS) -l -x h $<

.mx.h:
	$(MX) $(MXFLAGS) -l -x h $<

{$(srcdir)}.mx.c:
	$(MX) $(MXFLAGS) -x c $<

.mx.c:
	$(MX) $(MXFLAGS) -x c $<

{$(srcdir)}.mx.mal:
	$(MX) $(MXFLAGS) -l -x mal $<
	if not exist .libs $(MKDIR) .libs
	$(INSTALL) $@ .libs\$@

.mx.mal:
	$(MX) $(MXFLAGS) -l -x mal $<
	if not exist .libs $(MKDIR) .libs
	$(INSTALL) $@ .libs\$@

{$(srcdir)}.mx.sql:
	$(MX) $(MXFLAGS) -l -x sql $<

.mx.sql:
	$(MX) $(MXFLAGS) -l -x sql $<

{$(srcdir)}.mx.y:
	$(MX) $(MXFLAGS) -x y $<

.mx.y:
	$(MX) $(MXFLAGS) -x y $<

{$(srcdir)}.c.obj:
	$(CC) $(CFLAGS) -c $<

.c.obj:
	$(CC) $(CFLAGS) -c $<

{$(srcdir)}.syms.def:
	echo EXPORTS > $@
	type $< >> $@

.syms.def:
	echo EXPORTS > $@
	type $< >> $@

.SUFFIXES: .mx .syms .def
