# -*- makefile -*-

# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2011 MonetDB B.V.
# All Rights Reserved.

VERSION=11.3.2
#       ^^^^^^
# Maintained via vertoo. Please don't modify by hand!
# Contact MonetDB-developers@lists.sourceforge.net for details and/or assistance.

!IFDEF MAKE_INCLUDEFILE
!INCLUDE $(MAKE_INCLUDEFILE)
!ENDIF

!IFNDEF bits
!IF defined(BITS32)
bits=32
!ELSEIF defined(BITS64)
bits=64
!ELSE
# default:
bits=32
!ENDIF
!ENDIF

!IF $(bits) == 32
!IFNDEF BITS32
BITS32=True
!ENDIF
!ELSEIF $(bits) == 64
!IFNDEF BITS64
BITS64=True
!ENDIF
!ENDIF

!IFDEF DEBUG
DEBUGLIB=d
!ELSE
DEBUGLIB=
!ENDIF

!IFDEF DEBUG
# force W_CFLAGS off in debug builds: using icc, you get way more
# warnings about casts which results in the code being uncompilable
W_CFLAGS =
!ENDIF

# This is the location of pthreads for Win32, 
# see http://sources.redhat.com/pthreads-win32/
# Note that pthreads are no longer used to compile MonetDB (although
# it might still work).
PTHREAD =
!IFNDEF PTHREAD_INCS
PTHREAD_INCS =
!ENDIF
!IFNDEF PTHREAD_LIBS
PTHREAD_LIBS =
!ENDIF

ODBC_LIBS = odbccp32.lib user32.lib

!IFNDEF PYTHONBASE
PYTHONBASE=C:\Python27
!ENDIF
!IFNDEF PYTHONLIB
PYTHONLIB=python27.lib
!ENDIF
PYTHON_LIBDIR=share\MonetDB\python

!IFDEF HAVE_PERL
!IFNDEF LIBPERL
!IF $(bits) == 32
LIBPERL = C:\Perl
!ELSE
LIBPERL = C:\Perl64
!ENDIF
!ENDIF
!IFNDEF PERLLIB
PERLLIB = perl510.lib
!ENDIF
PERL_INCS = -I$(LIBPERL)\lib\CORE -DWIN32
PERL_LIBS = $(LIBPERL)\lib\CORE\$(PERLLIB)
PERL_LIBDIR = share\MonetDB\perl
!ENDIF

!IFDEF HAVE_PCRE
# This is the location of the PCRE library
!IFNDEF LIBPCRE
LIBPCRE = C:\Program Files\PCRE
!ENDIF
pcre_LIBS = "$(LIBPCRE)\lib\pcre$(DEBUGLIB).lib"
pcre_CFLAGS = -DHAVE_LIBPCRE "-I$(LIBPCRE)\include"
!ENDIF

!IFDEF HAVE_OPENSSL
# This is the location of the OpenSSL library
!IFNDEF LIBOPENSSL
LIBOPENSSL = C:\openssl-0.9.8k.win$(bits)
!ENDIF
openssl_LIBS = "$(LIBOPENSSL)\lib\ssleay32.lib" "$(LIBOPENSSL)\lib\libeay32.lib"
openssl_CFLAGS = -DHAVE_OPENSSL "-I$(LIBOPENSSL)\include"
!ENDIF

!IFDEF HAVE_ICONV
# This is the location of the ICONV library
!IFNDEF LIBICONV
LIBICONV = C:\iconv-1.9.2.win$(bits)
!ENDIF
LTLIBICONV = "$(LIBICONV)\lib\iconv$(DEBUGLIB).lib"
ICONV_CFLAGS = -DHAVE_ICONV "-I$(LIBICONV)\include"
!ENDIF

!IFDEF HAVE_LIBZ
# This is the location of the ZLIB library
!IFNDEF LIBZLIB
LIBZLIB = C:\zlib-1.2.3.win$(bits)
!ENDIF
!IFNDEF LIBZLIBFILE
LIBZLIBFILE=zlib1
!ENDIF
zlib_LIBS = "$(LIBZLIB)\lib\$(LIBZLIBFILE)$(DEBUGLIB).lib"
zlib_CFLAGS = -DHAVE_LIBZ "-I$(LIBZLIB)\include"
!ENDIF

!IFDEF HAVE_LIBBZ2
# This is the location of the BZIP2 library
!IFNDEF LIBBZIP2
LIBBZIP2 = C:\bzip2-1.0.5.win$(bits)
!ENDIF
BZ_LIBS = "$(LIBBZIP2)\lib\libbz2$(DEBUGLIB).lib"
BZ_CFLAGS = -DHAVE_LIBBZ2 "-I$(LIBBZIP2)\include"
!ENDIF

!IFDEF HAVE_LIBXML2
# This is the location of the libxml2 library
!IFNDEF LIBXML2
LIBXML2 = C:\libxml2-2.6.30.win$(bits)
!ENDIF
libxml2_CFLAGS = -DHAVE_LIBXML2 "-I$(LIBXML2)\include" $(zlib_CFLAGS) $(ICONV_CFLAGS)
libxml2_LIBS = "$(LIBXML2)\lib\libxml2$(DEBUGLIB).lib" $(zlib_LIBS) $(ICONV_LIBS)
!ENDIF

!IFNDEF LIBGEOS
LIBGEOS = C:\geos-3.0.win$(bits)
!ENDIF
!IFDEF DEBUG
GEOS_LIBS = $(LIBGEOS)\lib\geos_c_i$(GEOSDEBUGLIB).lib
!ELSE
GEOS_LIBS = $(LIBGEOS)\lib\geos_c_i.lib
!ENDIF
GEOS_INCS = -I$(LIBGEOS)\include

!IFNDEF RUBY_DIR
RUBY_DIR = lib\ruby\gems\1.9.1
!ENDIF

# some programs we use, probably no need to edit

# install python, flex and bison on your systems 
PYTHON = python
YACC = bison -b y -y
SWIG = swig

ARCHIVER = lib
GENDLL =
RC = rc

MT = mt -nologo
JAVAC = javac
JAR = jar
ANT = ant.bat

# no need to edit beyond here..

CONFIGURE_PY = "$(TOPDIR)\..\NT\winconfig.py"
WINCONFIG_INCS = "-I$(TOPDIR)\..\buildtools\conf"

!IFDEF DEBUG
!IF $(bits) == 64
ZI = -Zi
!ELSE
ZI = -ZI
!ENDIF
COMPILERFLAGS = -GF -W3 $(W_CFLAGS) -wd4273 -wd4102 -MDd -nologo -Od -D_DEBUG -RTC1 $(ZI)
NO_INLINE_CFLAGS =
!ELSE
COMPILERFLAGS = -GF -W3 $(W_CFLAGS) -wd4273 -wd4102 -MD -nologo -Ox
NO_INLINE_CFLAGS = -Od -Ob0gysi-
!ENDIF
CFLAGS = $(COMPILERFLAGS)  -I. -I$(TOPDIR) $(LIBC_INCS) $(INCLUDES) $(WINCONFIG_INCS) $(ICONV_CFLAGS)

# No general LDFLAGS needed
INSTALL = copy
# TODO
# replace this hack by something like configure ...
MKDIR = mkdir
ECHO = echo
CD = cd

exec_prefix = $(prefix)

bindir = $(exec_prefix)\bin
sbindir = $(exec_prefix)\sbin
libexecdir = $(exec_prefix)\libexec
datadir = $(prefix)\share
sysconfdir = $(prefix)\etc
sharedstatedir = $(prefix)\com
localstatedir = $(prefix)\var
libdir = $(exec_prefix)\lib
infodir = $(prefix)\info
mandir = $(prefix)\man
includedir = $(prefix)\include
oldincludedir = \usr\include
pkgdatadir = $(datadir)\$(pkg)
pkglibdir = $(libdir)\$(pkg)
pkgincludedir = $(includedir)\$(pkg)

LIBC_INCS = $(PTHREAD_INCS)
MATH_LIBS =
SOCKET_LIBS = wsock32.lib Ws2_32.lib

MX=$(TOPDIR)\buildtools\Mx\Mx.exe
CP=copy
MV=copy
DEL=del
EDITBIN=editbin /nologo
NATIVE_WIN32 = 1

# we can't use the Windows utility find since it prints the file name
# we could use the Unix utility grep, but we can also use the Windows
# utility findstr, but with some care and feeding.
FILTER=findstr /v /l
FILTERPREF=/c:

!IFDEF BITS32
BITS32_FALSE=^#
!ENDIF
!IFDEF BITS64
BITS64_FALSE=^#
!ENDIF
!IFDEF DOCTOOLS
DOCTOOLS_FALSE=^#
!ENDIF
!IFDEF HAVE_JAVA
HAVE_JAVA_FALSE=^#
!ENDIF
!IFDEF HAVE_JAVAJDBC
HAVE_JAVAJDBC_FALSE=^#
!ENDIF
!IFDEF HAVE_LIBBZ2
HAVE_LIBBZ2_FALSE=^#
!ENDIF
!IFDEF HAVE_LIBZ
HAVE_LIBZ_FALSE=^#
!ENDIF
!IFDEF HAVE_MONETDB5
HAVE_MONETDB5_FALSE=^#
!ENDIF
!IFDEF HAVE_RAPTOR
HAVE_RAPTOR_FALSE=^#
!ENDIF
!IFDEF HAVE_NETCDF
HAVE_NETCDF_FALSE=^#
!ENDIF
!IFDEF HAVE_ODBC
HAVE_ODBC_FALSE=^#
!ENDIF
!IFDEF HAVE_PCRE
HAVE_PCRE_FALSE=^#
!ENDIF
!IFDEF HAVE_PERL_DEVEL
HAVE_PERL_DEVEL_FALSE=^#
!ENDIF
!IFDEF HAVE_PERL
HAVE_PERL_FALSE=^#
!ENDIF
!IFDEF HAVE_PERL_SWIG
HAVE_PERL_SWIG_FALSE=^#
!ENDIF
!IFDEF HAVE_PHP
HAVE_PHP_FALSE=^#
!ENDIF
!IFDEF HAVE_PYTHON
HAVE_PYTHON_FALSE=^#
!ENDIF
!IFDEF HAVE_RUBYGEM
HAVE_RUBYGEM_FALSE=^#
!ENDIF
!IFDEF PROFILING
PROFILING_FALSE=^#
!ENDIF
!IFDEF HAVE_LIBXML2
HAVE_LIBXML2_FALSE=^#
!ENDIF

CONFIGURE=$(PYTHON) $(CONFIGURE_PY) \
	"prefix=$(prefix)" \
	"BITS32_FALSE=$(BITS32_FALSE)" \
	"BITS64_FALSE=$(BITS64_FALSE)" \
	"DOCTOOLS_FALSE=$(DOCTOOLS_FALSE)" \
	"HAVE_CFITSIO_FALSE=$(HAVE_CFITSIO_FALSE)" \
	"HAVE_JAVAJDBC_FALSE=$(HAVE_JAVAJDBC_FALSE)" \
	"HAVE_JAVA_FALSE=$(HAVE_JAVA_FALSE)" \
	"HAVE_LIBBZ2_FALSE=$(HAVE_LIBBZ2_FALSE)" \
	"HAVE_LIBXML2_FALSE=$(HAVE_LIBXML2_FALSE)" \
	"HAVE_LIBZ_FALSE=$(HAVE_LIBZ_FALSE)" \
	"HAVE_MONETDB5_FALSE=$(HAVE_MONETDB5_FALSE)" \
	"HAVE_MSEED_FALSE=$(HAVE_MSEED_FALSE)" \
	"HAVE_NETCDF_FALSE=$(HAVE_NETCDF_FALSE)" \
	"HAVE_OPENSSL_FALSE=$(HAVE_OPENSSL_FALSE)" \
	"HAVE_ODBC_FALSE=$(HAVE_ODBC_FALSE)" \
	"HAVE_PCRE_FALSE=$(HAVE_PCRE_FALSE)" \
	"HAVE_PERL_DEVEL_FALSE=$(HAVE_PERL_DEVEL_FALSE)" \
	"HAVE_PERL_FALSE=$(HAVE_PERL_FALSE)" \
	"HAVE_PERL_SWIG_FALSE=$(HAVE_PERL_SWIG_FALSE)" \
	"HAVE_PHP_FALSE=$(HAVE_PHP_FALSE)" \
	"HAVE_PYTHON_FALSE=$(HAVE_PYTHON_FALSE)" \
	"HAVE_RAPTOR_FALSE=$(HAVE_RAPTOR_FALSE)" \
	"HAVE_RUBYGEM_FALSE=$(HAVE_RUBYGEM_FALSE)" \
	"JDBCCLIENT_JAR=$(JDBCCLIENT_JAR)" \
	"LIBICONV=$(LIBICONV)" \
	"LIBXML2=$(LIBXML2)" \
	"LIBZLIB=$(LIBZLIB)" \
	"PACKAGE=$(pkg)" \
	"PERL_LIBDIR=$(PERL_LIBDIR)" \
	"PROFILING_FALSE=$(PROFILING_FALSE)" \
	"PYTHON=$(PYTHON)" \
	"PYTHON_LIBDIR=$(PYTHON_LIBDIR)" \
	"RUBY_DIR=$(RUBY_DIR)" \
	"TOPDIR=$(TOPDIR)" \
	"VERSION=$(VERSION)" \
	"builtby=%USER%@%COMPUTERNAME%" \
	"compilercall=$(CC) $(COMPILERFLAGS)" \
	"linkercall=$(CC) $(COMPILERFLAGS)" \
	"pcreversion=" \
	"opensslversion=" \
	"libxml2version="

# Use "nmake DEBUG=1" to get a debug build (assertions enabled);
# use "nmake NDEBUG=1" to get a release build (assertions disabled);
# use plain "nmake" to get the default.
!IFNDEF DEBUG
!IFDEF NDEBUG
CFLAGS = $(CFLAGS) -DNDEBUG
MAKEDEBUG=NDEBUG=1
!ELSE
# default in case neither NDEBUG nor DEBUG are defined
CFLAGS = $(CFLAGS)
MAKEDEBUG=
!ENDIF
!ELSE
# CFLAGS = $(CFLAGS) -Wp64
MAKEDEBUG=DEBUG=1
!ENDIF

PSAPILIB = psapi.lib

# When compiled with plain `nmake`,
# 32-bit OIDs are used by default on 64-bit Windows
# (see winconfig.h for details);
# compile with `nmake MONET_OID64=1` to use 64-bit OIDs on 64-bit Windows;
# compile with `nmake MONET_OID32=1` to use 32-bit OIDs on 64-bit Windows
# in case the default is altered in winconfig.h .
#!IFDEF BITS64
!IF $(bits) == 64
!IFNDEF MONET_OID64
!IFDEF MONET_OID32
CFLAGS = $(CFLAGS) -DMONET_OID32
!ENDIF
!ENDIF
!IFNDEF MONET_OID32
!IFDEF MONET_OID64
CFLAGS = $(CFLAGS) -DMONET_OID64
!ENDIF
!ENDIF
!ENDIF

CONFIG_H = monetdb_config.h

{$(srcdir)}.mx.h:
	$(MX) $(MXFLAGS) -l -x h $<

.mx.h:
	$(MX) $(MXFLAGS) -l -x h $<

{$(srcdir)}.mx.c:
	$(MX) $(MXFLAGS) -x c $<

.mx.c:
	$(MX) $(MXFLAGS) -x c $<

{$(srcdir)}.mx.mal:
	$(MX) $(MXFLAGS) -l -x mal $<
	if not exist .libs $(MKDIR) .libs
	$(INSTALL) $@ .libs\$@

.mx.mal:
	$(MX) $(MXFLAGS) -l -x mal $<
	if not exist .libs $(MKDIR) .libs
	$(INSTALL) $@ .libs\$@

{$(srcdir)}.mx.sql:
	$(MX) $(MXFLAGS) -l -x sql $<

.mx.sql:
	$(MX) $(MXFLAGS) -l -x sql $<

{$(srcdir)}.mx.y:
	$(MX) $(MXFLAGS) -x y $<

.mx.y:
	$(MX) $(MXFLAGS) -x y $<

{$(srcdir)}.c.obj:
	$(CC) $(CFLAGS) -c $<

.c.obj:
	$(CC) $(CFLAGS) -c $<

{$(srcdir)}.syms.def:
	echo EXPORTS > $@
	type $< >> $@

.syms.def:
	echo EXPORTS > $@
	type $< >> $@

.SUFFIXES: .mx .syms .def
