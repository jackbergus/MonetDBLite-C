stdout of test 'intersect_diff_void` in directory 'tests/gdkTests` itself:


# 15:27:41 >  
# 15:27:41 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35206 --set monet_prompt= --trace --dbname=mTests_tests_gdkTests  intersect_diff_void.mal < /dev/null
# 15:27:41 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_gdkTests
# Visit http://monetdb.cwi.nl/ for further information
#a:=bat.new(:oid,:void);
#ar:=bat.reverse(a);
#bat.setSequenceBase(ar,1:oid);
#b:=bat.new(:oid,:void);
#br:=bat.reverse(b);
#bat.setSequenceBase(br,2:oid);
#
#a0 := algebra.kintersect(a,b);
#a0r:= bat.reverse(a0);
#i  := bat.getSequenceBase(a0r);
#io.print(i);
#
#a0 := algebra.kintersect(b,a);
#a0r:= bat.reverse(a0);
#i  := bat.getSequenceBase(a0r);
#io.print(i);
#
#a0 := algebra.sintersect(a,b);
#a0r:= bat.reverse(a0);
#i  := bat.getSequenceBase(a0r);
#io.print(i);
#
#a0 := algebra.sintersect(b,a);
#a0r:= bat.reverse(a0);
#i  := bat.getSequenceBase(a0r);
#io.print(i);
#
#a1 := algebra.kdifference(a,b);
#a1r:= bat.reverse(a1);
#i  := bat.getSequenceBase(a1r);
#io.print(i);
#
#a1 := algebra.kdifference(b,a);
#a1r:= bat.reverse(a1);
#i  := bat.getSequenceBase(a1r);
#io.print(i);
#
#a1 := algebra.sdifference(a,b);
#a1r:= bat.reverse(a1);
#i  := bat.getSequenceBase(a1r);
#io.print(i);
#
#a1 := algebra.sdifference(b,a);
#a1r:= bat.reverse(a1);
#i  := bat.getSequenceBase(a1r);
#io.print(i);
#
function user.main():void;              #  0 main:void := user.main() {G}
    a := bat.new(:oid,:oid);            #  1 a:bat[:oid,:oid] := CMDBATnew(_2:oid, _2:oid) {G}
    bat.insert(a,1@0,1@0);              #  2 _3:bat[:oid,:oid] := BKCinsert_bun(a:bat[:oid,:oid], _4:oid, _4:oid) {G}
    ar := bat.reverse(a);               #  3 ar:bat[:oid,:oid] := BKCreverse(a:bat[:oid,:oid]) {G}
    b := bat.new(:oid,:oid);            #  4 b:bat[:oid,:oid] := CMDBATnew(_2:oid, _2:oid) {G}
    bat.insert(b,2@0,2@0);              #  5 _7:bat[:oid,:oid] := BKCinsert_bun(b:bat[:oid,:oid], _8:oid, _8:oid) {G}
    br := bat.reverse(b);               #  6 br:bat[:oid,:oid] := BKCreverse(b:bat[:oid,:oid]) {G}
    a0 := algebra.kintersect(a,b);      #  7 a0:bat[:oid,:oid] := ALGsemijoin(a:bat[:oid,:oid], b:bat[:oid,:oid]) {G}
    a0r := bat.reverse(a0);             #  8 a0r:bat[:oid,:oid] := BKCreverse(a0:bat[:oid,:oid]) {G}
    i := bat.getSequenceBase(a0r);      #  9 i:oid := BKCgetSequenceBase(a0r:bat[:oid,:oid]) 
    io.print(i);                        # 10 _13:void := IOprint_val(i:oid) 
    a0 := algebra.kintersect(b,a);      # 11 a0:bat[:oid,:oid] := ALGsemijoin(b:bat[:oid,:oid], a:bat[:oid,:oid]) {G}
    a0r := bat.reverse(a0);             # 12 a0r:bat[:oid,:oid] := BKCreverse(a0:bat[:oid,:oid]) {G}
    i := bat.getSequenceBase(a0r);      # 13 i:oid := BKCgetSequenceBase(a0r:bat[:oid,:oid]) 
    io.print(i);                        # 14 _14:void := IOprint_val(i:oid) 
    a0 := algebra.sintersect(a,b);      # 15 a0:bat[:oid,:oid] := ALGsintersect(a:bat[:oid,:oid], b:bat[:oid,:oid]) {G}
    a0r := bat.reverse(a0);             # 16 a0r:bat[:oid,:oid] := BKCreverse(a0:bat[:oid,:oid]) {G}
    i := bat.getSequenceBase(a0r);      # 17 i:oid := BKCgetSequenceBase(a0r:bat[:oid,:oid]) 
    io.print(i);                        # 18 _15:void := IOprint_val(i:oid) 
    a0 := algebra.sintersect(b,a);      # 19 a0:bat[:oid,:oid] := ALGsintersect(b:bat[:oid,:oid], a:bat[:oid,:oid]) {G}
    a0r := bat.reverse(a0);             # 20 a0r:bat[:oid,:oid] := BKCreverse(a0:bat[:oid,:oid]) {G}
    i := bat.getSequenceBase(a0r);      # 21 i:oid := BKCgetSequenceBase(a0r:bat[:oid,:oid]) 
    io.print(i);                        # 22 _16:void := IOprint_val(i:oid) 
    a1 := algebra.kdifference(a,b);     # 23 a1:bat[:oid,:oid] := ALGkdiff(a:bat[:oid,:oid], b:bat[:oid,:oid]) {G}
    a1r := bat.reverse(a1);             # 24 a1r:bat[:oid,:oid] := BKCreverse(a1:bat[:oid,:oid]) {G}
    i := bat.getSequenceBase(a1r);      # 25 i:oid := BKCgetSequenceBase(a1r:bat[:oid,:oid]) 
    io.print(i);                        # 26 _19:void := IOprint_val(i:oid) 
    a1 := algebra.kdifference(b,a);     # 27 a1:bat[:oid,:oid] := ALGkdiff(b:bat[:oid,:oid], a:bat[:oid,:oid]) {G}
    a1r := bat.reverse(a1);             # 28 a1r:bat[:oid,:oid] := BKCreverse(a1:bat[:oid,:oid]) {G}
    i := bat.getSequenceBase(a1r);      # 29 i:oid := BKCgetSequenceBase(a1r:bat[:oid,:oid]) 
    io.print(i);                        # 30 _20:void := IOprint_val(i:oid) 
    a1 := algebra.sdifference(a,b);     # 31 a1:bat[:oid,:oid] := ALGsdiff(a:bat[:oid,:oid], b:bat[:oid,:oid]) {G}
    a1r := bat.reverse(a1);             # 32 a1r:bat[:oid,:oid] := BKCreverse(a1:bat[:oid,:oid]) {G}
    i := bat.getSequenceBase(a1r);      # 33 i:oid := BKCgetSequenceBase(a1r:bat[:oid,:oid]) 
    io.print(i);                        # 34 _21:void := IOprint_val(i:oid) 
    a1 := algebra.sdifference(b,a);     # 35 a1:bat[:oid,:oid] := ALGsdiff(b:bat[:oid,:oid], a:bat[:oid,:oid]) {G}
    a1r := bat.reverse(a1);             # 36 a1r:bat[:oid,:oid] := BKCreverse(a1:bat[:oid,:oid]) {G}
    i := bat.getSequenceBase(a1r);      # 37 i:oid := BKCgetSequenceBase(a1r:bat[:oid,:oid]) 
    io.print(i);                        # 38 _22:void := IOprint_val(i:oid) 
end main;	# 39  
[ 2@0 ]
[ 2@0 ]
[ 0@0 ]
[ 0@0 ]
[ 1@0 ]
[ 2@0 ]
[ 1@0 ]
[ 2@0 ]

# 15:27:41 >  
# 15:27:41 >  Done.
# 15:27:41 >  

