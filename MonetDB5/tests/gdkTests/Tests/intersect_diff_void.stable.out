stdout of test 'intersect_diff_void` in directory 'tests/gdkTests` itself:


# 15:27:41 >  
# 15:27:41 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35206 --set monet_prompt= --trace --dbname=mTests_tests_gdkTests  intersect_diff_void.mal < /dev/null
# 15:27:41 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_gdkTests
# Visit http://monetdb.cwi.nl/ for further information
#a:=bat.new(:oid,:void);
#ar:=bat.reverse(a);
#bat.setSequenceBase(ar,1:oid);
#b:=bat.new(:oid,:void);
#br:=bat.reverse(b);
#bat.setSequenceBase(br,2:oid);
#
#a0 := algebra.kintersect(a,b);
#a0r:= bat.reverse(a0);
#i  := bat.getSequenceBase(a0r);
#io.print(i);
#
#a0 := algebra.kintersect(b,a);
#a0r:= bat.reverse(a0);
#i  := bat.getSequenceBase(a0r);
#io.print(i);
#
#a0 := algebra.sintersect(a,b);
#a0r:= bat.reverse(a0);
#i  := bat.getSequenceBase(a0r);
#io.print(i);
#
#a0 := algebra.sintersect(b,a);
#a0r:= bat.reverse(a0);
#i  := bat.getSequenceBase(a0r);
#io.print(i);
#
#a1 := algebra.kdifference(a,b);
#a1r:= bat.reverse(a1);
#i  := bat.getSequenceBase(a1r);
#io.print(i);
#
#a1 := algebra.kdifference(b,a);
#a1r:= bat.reverse(a1);
#i  := bat.getSequenceBase(a1r);
#io.print(i);
#
#a1 := algebra.sdifference(a,b);
#a1r:= bat.reverse(a1);
#i  := bat.getSequenceBase(a1r);
#io.print(i);
#
#a1 := algebra.sdifference(b,a);
#a1r:= bat.reverse(a1);
#i  := bat.getSequenceBase(a1r);
#io.print(i);
#
function user.main():void;	# 0  (main:void)
    a := bat.new(:oid,:oid);	# 1 CMDBATnew (a:bat[:oid,:oid])<-(_2:oid)(_2:oid)
    bat.insert(a,1@0,1@0);	# 2 BKCinsert_bun (_3:void)<-(a:bat[:oid,:oid])(_4:oid)(_4:oid)
    ar := bat.reverse(a);	# 3 BKCreverse (ar:bat[:oid,:oid])<-(a:bat[:oid,:oid])
    b := bat.new(:oid,:oid);	# 4 CMDBATnew (b:bat[:oid,:oid])<-(_2:oid)(_2:oid)
    bat.insert(b,2@0,2@0);	# 5 BKCinsert_bun (_7:void)<-(b:bat[:oid,:oid])(_8:oid)(_8:oid)
    br := bat.reverse(b);	# 6 BKCreverse (br:bat[:oid,:oid])<-(b:bat[:oid,:oid])
    a0 := algebra.kintersect(a,b);	# 7 ALGsemijoin (a0:bat[:oid,:oid])<-(a:bat[:oid,:oid])(b:bat[:oid,:oid])
    a0r := bat.reverse(a0);	# 8 BKCreverse (a0r:bat[:oid,:oid])<-(a0:bat[:oid,:oid])
    i := bat.getSequenceBase(a0r);	# 9 BKCgetSequenceBase (i:oid)<-(a0r:bat[:oid,:oid])
    io.print(i);	# 10 IOprint_val (_13:void)<-(i:oid)
    a0 := algebra.kintersect(b,a);	# 11 ALGsemijoin (a0:bat[:oid,:oid])<-(b:bat[:oid,:oid])(a:bat[:oid,:oid])
    a0r := bat.reverse(a0);	# 12 BKCreverse (a0r:bat[:oid,:oid])<-(a0:bat[:oid,:oid])
    i := bat.getSequenceBase(a0r);	# 13 BKCgetSequenceBase (i:oid)<-(a0r:bat[:oid,:oid])
    io.print(i);	# 14 IOprint_val (_14:void)<-(i:oid)
    a0 := algebra.sintersect(a,b);	# 15 ALGsintersect (a0:bat[:oid,:oid])<-(a:bat[:oid,:oid])(b:bat[:oid,:oid])
    a0r := bat.reverse(a0);	# 16 BKCreverse (a0r:bat[:oid,:oid])<-(a0:bat[:oid,:oid])
    i := bat.getSequenceBase(a0r);	# 17 BKCgetSequenceBase (i:oid)<-(a0r:bat[:oid,:oid])
    io.print(i);	# 18 IOprint_val (_15:void)<-(i:oid)
    a0 := algebra.sintersect(b,a);	# 19 ALGsintersect (a0:bat[:oid,:oid])<-(b:bat[:oid,:oid])(a:bat[:oid,:oid])
    a0r := bat.reverse(a0);	# 20 BKCreverse (a0r:bat[:oid,:oid])<-(a0:bat[:oid,:oid])
    i := bat.getSequenceBase(a0r);	# 21 BKCgetSequenceBase (i:oid)<-(a0r:bat[:oid,:oid])
    io.print(i);	# 22 IOprint_val (_16:void)<-(i:oid)
    a1 := algebra.kdifference(a,b);	# 23 ALGkdiff (a1:bat[:oid,:oid])<-(a:bat[:oid,:oid])(b:bat[:oid,:oid])
    a1r := bat.reverse(a1);	# 24 BKCreverse (a1r:bat[:oid,:oid])<-(a1:bat[:oid,:oid])
    i := bat.getSequenceBase(a1r);	# 25 BKCgetSequenceBase (i:oid)<-(a1r:bat[:oid,:oid])
    io.print(i);	# 26 IOprint_val (_19:void)<-(i:oid)
    a1 := algebra.kdifference(b,a);	# 27 ALGkdiff (a1:bat[:oid,:oid])<-(b:bat[:oid,:oid])(a:bat[:oid,:oid])
    a1r := bat.reverse(a1);	# 28 BKCreverse (a1r:bat[:oid,:oid])<-(a1:bat[:oid,:oid])
    i := bat.getSequenceBase(a1r);	# 29 BKCgetSequenceBase (i:oid)<-(a1r:bat[:oid,:oid])
    io.print(i);	# 30 IOprint_val (_20:void)<-(i:oid)
    a1 := algebra.sdifference(a,b);	# 31 ALGsdiff (a1:bat[:oid,:oid])<-(a:bat[:oid,:oid])(b:bat[:oid,:oid])
    a1r := bat.reverse(a1);	# 32 BKCreverse (a1r:bat[:oid,:oid])<-(a1:bat[:oid,:oid])
    i := bat.getSequenceBase(a1r);	# 33 BKCgetSequenceBase (i:oid)<-(a1r:bat[:oid,:oid])
    io.print(i);	# 34 IOprint_val (_21:void)<-(i:oid)
    a1 := algebra.sdifference(b,a);	# 35 ALGsdiff (a1:bat[:oid,:oid])<-(b:bat[:oid,:oid])(a:bat[:oid,:oid])
    a1r := bat.reverse(a1);	# 36 BKCreverse (a1r:bat[:oid,:oid])<-(a1:bat[:oid,:oid])
    i := bat.getSequenceBase(a1r);	# 37 BKCgetSequenceBase (i:oid)<-(a1r:bat[:oid,:oid])
    io.print(i);	# 38 IOprint_val (_22:void)<-(i:oid)
end main;	# 39  
[ 2@0 ]
[ 2@0 ]
[ 0@0 ]
[ 0@0 ]
[ 1@0 ]
[ 2@0 ]
[ 1@0 ]
[ 2@0 ]

# 15:27:41 >  
# 15:27:41 >  Done.
# 15:27:41 >  

