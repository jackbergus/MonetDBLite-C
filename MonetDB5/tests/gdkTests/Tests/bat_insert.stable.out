stdout of test 'bat_insert` in directory 'tests/gdkTests` itself:


# 20:34:11 >  
# 20:34:11 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=38345 --set monet_prompt= --trace --dbname=mTests_tests_gdkTests  bat_insert.mal < /dev/null
# 20:34:11 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_gdkTests
# Visit http://monetdb.cwi.nl/ for further information
#function check_cap(b:bat[:any_1,:any_2]) :void;
#	inserted := aggr.count(b);
#	d:= bat.getDelta(b);
#	d1 := aggr.count(d);
#	deleted := calc.lng(d1);
#	cap := bat.getCapacity(b);
#	overflow := inserted + deleted;
#	overflow := overflow - cap;
#barrier errors:= overflow > 0:lng;
#		io.printf("!ERROR: wrote %d BUNs beyond capacity\n",overflow);
#exit errors;
#end check_cap;
function user.check_cap(b:bat[:any_1,:any_2]):void;	# 0  (check_cap:void)<-(b:bat[:any_1,:any_2])
    inserted := aggr.count(b);	# 1 ALGcount_bat (inserted:int)<-(b:bat[:any_1,:any_2])
    d := bat.getDelta(b);	# 2 BKCgetDelta (d:bat[:any,:any])<-(b:bat[:any_1,:any_2])
    d1 := aggr.count(d);	# 3 ALGcount_bat (d1:int)<-(d:bat[:any,:any])
    deleted := calc.lng(d1);	# 4 CALCint2lng (deleted:lng)<-(d1:int)
    cap := bat.getCapacity(b);	# 5 BKCgetCapacity (cap:lng)<-(b:bat[:any_1,:any_2])
    overflow := calc.+(inserted,deleted);	# 6 CALCbinaryADDintlng (overflow:lng)<-(inserted:int)(deleted:lng)
    overflow := calc.-(overflow,cap);	# 7 CALCbinarySUBlnglng (overflow:lng)<-(overflow:lng)(cap:lng)
barrier errors := calc.>(overflow,0:lng);	# 8 CALCcompGTlnglng (errors:bit)<-(overflow:lng)(_9:lng) jump 10
    io.printf("!ERROR: wrote %d BUNs beyond capacity\n",overflow);	# 9 IOprint_formatted_lng (_10:void)<-(_11:str)(overflow:lng)
exit errors;	# 10  (errors:bit)
end check_cap;	# 11  
#
#b := bat.new(:oid,:oid);
#bat.setName(b,"b");
#bat.setPersistent(b,true);
#
#cap := bat.getCapacity(b);
#cap := cap/4;
#ci  := calc.int(cap);
#ci := ci+ 1;
#
#i := ci * 3;
#barrier go:= i>0;
#	o:= calc.oid(i);
#	bat.insert(b,o,o);
#	i:= i -1;
#	redo go:= i>0;
#exit go;
#
#transaction.commit();
#
#i := ci * 2;
#barrier go:= i>0;
#	o:= calc.oid(i);
#	bat.delete(b,o);
#	i:= i -1;
#	redo go:= i>0;
#exit go;
#
#c := bat.new(:oid,:oid);
#i := ci * 2;
#barrier go:= i>0;
#	o:= calc.oid(i);
#	bat.insert(c,o,o);
#	i:= i -1;
#	redo go:= i>0;
#exit go;
#
#bat.insert(b,c);
#check_cap(b);
#
#bat.setPersistent(b,false);
#
#transaction.commit();
#
#clients.quit();
#
function user.main():void;	# 0  (main:void)
    o := nil:oid;	# 1  (o:oid)<-(_2:oid)
    b := bat.new(:oid,:oid);	# 2 CMDBATnew (b:bat[:oid,:oid])<-(_4:oid)(_5:oid)
    bat.setName(b,"b");	# 3 BKCsetName (_6:void)<-(b:bat[:oid,:oid])(_7:str)
    bat.setPersistent(b,true);	# 4 BKCpersists (_8:void)<-(b:bat[:oid,:oid])(_9:bit)
    cap := bat.getCapacity(b);	# 5 BKCgetCapacity (cap:lng)<-(b:bat[:oid,:oid])
    cap := calc./(cap,4);	# 6 CALCbinarycheckDIVlngint (cap:lng)<-(cap:lng)(_11:int)
    ci := calc.int(cap);	# 7 CALClng2int (ci:int)<-(cap:lng)
    ci := calc.+(ci,1);	# 8 CALCbinaryADDintint (ci:int)<-(ci:int)(_13:int)
    i := calc.*(ci,3);	# 9 CALCbinaryMULintint (i:int)<-(ci:int)(_15:int)
barrier go := calc.>(i,0);	# 10 CALCcompGTintint (go:bit)<-(i:int)(_17:int) jump 15
    o := calc.oid(i);	# 11 CALCint2oid (o:oid)<-(i:int)
    bat.insert(b,o,o);	# 12 BKCinsert_bun (_18:void)<-(b:bat[:oid,:oid])(o:oid)(o:oid)
    i := calc.-(i,1);	# 13 CALCbinarySUBintint (i:int)<-(i:int)(_13:int)
    redo go := calc.>(i,0);	# 14 CALCcompGTintint (go:bit)<-(i:int)(_17:int) jump 11
exit go;	# 15  (go:bit)
    transaction.commit();	# 16 TRNglobal_commit (_19:bit)
    i := calc.*(ci,2);	# 17 CALCbinaryMULintint (i:int)<-(ci:int)(_20:int)
barrier go := calc.>(i,0);	# 18 CALCcompGTintint (go:bit)<-(i:int)(_17:int) jump 23
    o := calc.oid(i);	# 19 CALCint2oid (o:oid)<-(i:int)
    bat.delete(b,o);	# 20 BKCdelete (_21:void)<-(b:bat[:oid,:oid])(o:oid)
    i := calc.-(i,1);	# 21 CALCbinarySUBintint (i:int)<-(i:int)(_13:int)
    redo go := calc.>(i,0);	# 22 CALCcompGTintint (go:bit)<-(i:int)(_17:int) jump 19
exit go;	# 23  (go:bit)
    c := bat.new(:oid,:oid);	# 24 CMDBATnew (c:bat[:oid,:oid])<-(_23:oid)(_24:oid)
    i := calc.*(ci,2);	# 25 CALCbinaryMULintint (i:int)<-(ci:int)(_20:int)
barrier go := calc.>(i,0);	# 26 CALCcompGTintint (go:bit)<-(i:int)(_17:int) jump 31
    o := calc.oid(i);	# 27 CALCint2oid (o:oid)<-(i:int)
    bat.insert(c,o,o);	# 28 BKCinsert_bun (_25:void)<-(c:bat[:oid,:oid])(o:oid)(o:oid)
    i := calc.-(i,1);	# 29 CALCbinarySUBintint (i:int)<-(i:int)(_13:int)
    redo go := calc.>(i,0);	# 30 CALCcompGTintint (go:bit)<-(i:int)(_17:int) jump 27
exit go;	# 31  (go:bit)
    bat.insert(b,c);	# 32 BKCinsert_bat (_26:void)<-(b:bat[:oid,:oid])(c:bat[:oid,:oid])
    user.check_cap(b);	# 33  (_27:void)<-(b:bat[:oid,:oid])
    bat.setPersistent(b,false);	# 34 BKCpersists (_28:void)<-(b:bat[:oid,:oid])(_29:bit)
    transaction.commit();	# 35 TRNglobal_commit (_30:bit)
    clients.quit();	# 36 CLTquit (_31:void)
end main;	# 37  

# 20:34:11 >  
# 20:34:11 >  Done.
# 20:34:11 >  

