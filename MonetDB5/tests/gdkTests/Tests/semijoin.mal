a:=bat.new(:oid,:int);
bat.append(a,0);
bat.append(a,1);
bat.append(a,nil:int);

b:=bat.new(:oid,:int);
bat.append(b,0);
bat.append(b,1);
bat.append(b,2);
bat.append(b,3);
bat.append(b,4);
bat.append(b,5);
bat.append(b,6);
bat.append(b,7);
bat.append(b,8);
bat.append(b,9);
bat.append(b,nil:int);

c:=bat.reverse(b);
d:=bat.reverse(a);

io.print(b);
io.print(c);

io.print("semijoin tests b,d");
z1:= algebra.semijoin(b,b); io.print(z1);

z3:= algebra.semijoin(a,a); io.print(z3);

# (try to) force different semijoin implementations

a1:= bat.new(:oid,:oid);
bat.append(a1,1@0);
bat.append(a1,2@0);
bat.append(a1,nil:oid);
a1s:= algebra.sort(a1);

c1:= bat.new(:oid,:oid);
bat.append(c1,nil:oid);
barrier i:= 1;
	oi:= calc.oid(i);
	bat.append(c1, oi);
redo i:= iterator.next(1,100);
exit i;
c1s:= algebra.sort(c1);

io.print("slices");
io.print(a1s);
sl:= algebra.slice(c1s,0,1);
io.print(sl);

io.print("semijoin tests a1,c1");
# binsemijoin
e:= algebra.semijoin(a1s,c1s);io.print(e);
f:= algebra.semijoin(c1s,a1s);io.print(f);

