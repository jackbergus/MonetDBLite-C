stdout of test 'append_dense_tail` in directory 'tests/gdkTests` itself:


# 09:01:01 >  
# 09:01:01 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=31140 --set monet_prompt= --trace --dbname=mTests_tests_gdkTests  append_dense_tail.mal < /dev/null
# 09:01:01 >  





!WARNING: GDKlockHome: ignoring empty or invalid .gdk_lock.
!WARNING: BBPdir: initializing BBP.
# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_gdkTests
# Visit http://monetdb.cwi.nl/ for further information
## create an empty [void,oid] BAT with dense tail
#a := bat.new(:void,:oid);
#bat.setSequenceBase(a,0@0);
#bat.append(a,1@0);
#bat.delete(a,0@0);
## create a non-empty [void,oid] BAT with non-dense tail
#b := bat.new(:void,:oid);
#bat.setSequenceBase(b,0@0);
#bat.append(b,0@0);
#bat.append(b,0@0);
#bat.append(b,0@0);
## append the latter to the former
# bat.append(a,b);
#io.print(a);
## check important properties
#f:= bat.new(:void,:str);
#bat.append(f,"hseqbase");
#bat.append(f,"hdense");
#bat.append(f,"tseqbase");
#bat.append(f,"tdense");
#fr:= bat.reverse(f);
#fm:= bat.mirror(fr);
#i:= bat.info(a);
#j:= algebra.join(fm,i);
#io.print(j);
#
function user.main():void;	# 0  (main:void)
# create an empty [void,oid] BAT with dense tail 	# 1  (_1:str)
    a := bat.new(:oid,:oid);	# 2 CMDBATnew (a:bat[:oid,:oid])<-(_3:oid)(_3:oid)
    bat.append(a,1@0);	# 3 BKCappend_val_wrap (_4:void)<-(a:bat[:oid,:oid])(_5:oid)
    bat.delete(a,0@0);	# 4 BKCdelete (_6:void)<-(a:bat[:oid,:oid])(_7:oid)
# create a non-empty [void,oid] BAT with non-dense tail 	# 5  (_8:str)
    b := bat.new(:oid,:oid);	# 6 CMDBATnew (b:bat[:oid,:oid])<-(_3:oid)(_3:oid)
    bat.append(b,0@0);	# 7 BKCappend_val_wrap (_10:void)<-(b:bat[:oid,:oid])(_7:oid)
    bat.append(b,0@0);	# 8 BKCappend_val_wrap (_11:void)<-(b:bat[:oid,:oid])(_7:oid)
    bat.append(b,0@0);	# 9 BKCappend_val_wrap (_12:void)<-(b:bat[:oid,:oid])(_7:oid)
# append the latter to the former 	# 10  (_13:str)
    bat.append(a,b);	# 11 BKCappend_wrap (_14:void)<-(a:bat[:oid,:oid])(b:bat[:oid,:oid])
    io.print(a);	# 12 IOprint_val (_15:void)<-(a:bat[:oid,:oid])
# check important properties 	# 13  (_16:str)
    f := bat.new(:void,:str);	# 14 CMDBATnew (f:bat[:void,:str])<-(_18:void)(_19:str)
    bat.append(f,"hseqbase");	# 15 BKCappend_val_wrap (_20:void)<-(f:bat[:void,:str])(_21:str)
    bat.append(f,"hdense");	# 16 BKCappend_val_wrap (_22:void)<-(f:bat[:void,:str])(_23:str)
    bat.append(f,"tseqbase");	# 17 BKCappend_val_wrap (_24:void)<-(f:bat[:void,:str])(_25:str)
    bat.append(f,"tdense");	# 18 BKCappend_val_wrap (_26:void)<-(f:bat[:void,:str])(_27:str)
    fr := bat.reverse(f);	# 19 BKCreverse (fr:bat[:str,:void])<-(f:bat[:void,:str])
    fm := bat.mirror(fr);	# 20 BKCmirror (fm:bat[:str,:str])<-(fr:bat[:str,:void])
    i := bat.info(a);	# 21 BKCinfo (i:bat[:str,:str])<-(a:bat[:oid,:oid])
    j := algebra.join(fm,i);	# 22 ALGjoin (j:bat[:str,:str])<-(fm:bat[:str,:str])(i:bat[:str,:str])
    io.print(j);	# 23 IOprint_val (_32:void)<-(j:bat[:str,:str])
end main;	# 24  
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ 1@0,	  0@0	  ]
[ 2@0,	  0@0	  ]
#-------------------------#
# h		t	  # name
# str		str	  # type
#-------------------------#
[ "hseqbase",	  "0@0"	  ]
[ "hdense",	  "1"	  ]
[ "tseqbase",	  "0@0"	  ]
[ "tdense",	  "0"	  ]

# 09:01:01 >  
# 09:01:01 >  Done.
# 09:01:01 >  

