stdout of test 'void` in directory 'tests/gdkTests` itself:


# 23:46:00 >  
# 23:46:00 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35611 --set monet_prompt= --trace --dbname=mTests_tests_gdkTests  void.mal < /dev/null
# 23:46:00 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_gdkTests
# Visit http://monetdb.cwi.nl/ for further information
#
#io.print("First keep void tests");
#a := bat.new(:void,:int,10);
#bat.setName(a,"A");
#bat.append(a,1);
#bat.append(a,4);
#bat.append(a,7);
#bat.append(a,2);
#bat.append(a,8);
#bat.append(a,1);
#bat.append(a,4);
#bat.append(a,5);
#bat.append(a,8);
#bat.append(a,3);
#bat.setSequenceBase(a,10:oid);
#io.print(a);
#
#b := algebra.copy(a);
#bat.setName(b,"B");
#
#io.print("insert tests");
##insert in order
#bat.insert(a,20:oid,8);
#io.print(a);
#
#io.print("replace tests");
## replace uncommited no need to change to oid
#bat.replace(a,15:oid,9);
#io.print(a);
#
## replace last no need to change to oid
#bat.replace(a,20:oid,9);
#io.print(a);
#
## replace last + 1, noting needed
#bat.replace(a,20:oid,9);
#io.print(a);
#
#io.print("delete tests");
## delete uncommited from the top
#bat.delete(a,20:oid);
#bat.delete(a,19:oid);
#bat.delete(a,18:oid);
#bat.delete(a,17:oid);
#bat.delete(a,16:oid);
#bat.delete(a,15:oid);
#bat.delete(a,14:oid);
#bat.delete(a,13:oid);
#bat.delete(a,12:oid);
#bat.delete(a,11:oid);
## only 1 left and still void
#io.print(a);
#
## now the convert to oid test
#io.print("convert void to oid tests");
#a := algebra.copy(b);
#bat.setWriteMode(a);
#bat.setName(a,"C");
#
#io.print("insert tests");
##insert in out of order
#bat.insert(a,21:oid,8);
#io.print(a);
#
## use oid bat (test if its a properly made bat)
#bat.delete(a,21:oid);
#ar:= bat.reverse(a);
#z:= algebra.join(ar,b);
#io.print(z);
#
#io.print("replace tests");
##replace commited bun
#a := algebra.copy(b); bat.setWriteMode(a); bat.setName(a,"D");
#transaction.commit(a);
#
## replace commited 
#bat.replace(a,15:oid,-3);
## replace last (or used to be last)
#bat.replace(a,19:oid,-1);
## replace something not there
#bat.replace(a,20:oid,-2);
#io.print(a);
#
## delete commited 
#io.print("delete tests");
#a := algebra.copy(b); bat.setWriteMode(a); bat.setName(a,"E");
#transaction.commit(a);
#io.print(a);
#
#bat.delete(a,20:oid);io.print(a);
#bat.delete(a,19:oid);io.print(a);
#bat.delete(a,18:oid);io.print(a);
#bat.delete(a,17:oid);io.print(a);
#bat.delete(a,16:oid);io.print(a);
#bat.delete(a,15:oid);io.print(a);
#bat.delete(a,14:oid);io.print(a);
#bat.delete(a,13:oid);io.print(a);
#bat.delete(a,12:oid);io.print(a);
#bat.delete(a,11:oid);io.print(a);
## only 1 left and still void
#io.print(a);
#
## deleting a transient value from a just void table didn't fix
## the denseness
#
#t1 := bat.new(:void,:int);
#bat.setSequenceBase(t1,0@0);
#bat.append(t1,1);
#bat.append(t1,2);
#bat.append(t1,3);
#io.print("<in>");
#v1 := algebra.select(t1, 2,nil:int,false,false);
#v2a := algebra.markT(v1,0@0);
#vr := bat.reverse(v2a);
#vj:= algebra.join(vr,t1);
#io.print(vj);
#
#v3 := algebra.select(t1,2, nil:int);
#i:= bat.info(v3); z2:= algebra.find(i,"hseqbase"); io.print(z2);
#z2:= algebra.find(i,"hdense"); io.print(z2);
#bat.setWriteMode(v3);
#v3r:= bat.reverse(v3);
#bat.delete(v3r,2);
#i:= bat.info(v3); z2:= algebra.find(i,"hseqbase"); io.print(z2);
#z2:= algebra.find(i,"hdense"); io.print(z2);
#
#x := bat.new(:void,:void);
#bat.setSequenceBase(x,0@0);
##bat.append(x,12@0);
#bat.append(x,nil);
#io.print(x);
#
#e := bat.new(:void,:int);
#bat.setSequenceBase(e,10@0);
#n := bat.new(:void,:int);
#bat.setSequenceBase(n,20@0);
#bat.append(n,20);
#bat.insert(e,n);
#io.print(e);
#
#y := bat.new(:void,:int);
#bat.insert(y,nil:oid,0);
#bat.setSequenceBase(y,20@0);
#zn := bat.new(:void,:int);
#bat.setSequenceBase(zn,10@0);
#bat.setKey(zn,true);
#bat.insert(zn,y);
#io.print(zn);
#
#clients.quit();
#
function user.main():void;	# 0  (main:void)
    io.print("First keep void tests");	# 1 IOprint_val (_1:void)<-(_2:str)
    a := bat.new(:void,:int,10);	# 2 CMDBATnewint (a:bat[:void,:int])<-(_4:void)(_5:int)(_6:int)
    bat.setName(a,"A");	# 3 BKCsetName (_7:void)<-(a:bat[:void,:int])(_8:str)
    bat.append(a,1);	# 4 BKCappend_val_wrap (_9:void)<-(a:bat[:void,:int])(_10:int)
    bat.append(a,4);	# 5 BKCappend_val_wrap (_11:void)<-(a:bat[:void,:int])(_12:int)
    bat.append(a,7);	# 6 BKCappend_val_wrap (_13:void)<-(a:bat[:void,:int])(_14:int)
    bat.append(a,2);	# 7 BKCappend_val_wrap (_15:void)<-(a:bat[:void,:int])(_16:int)
    bat.append(a,8);	# 8 BKCappend_val_wrap (_17:void)<-(a:bat[:void,:int])(_18:int)
    bat.append(a,1);	# 9 BKCappend_val_wrap (_19:void)<-(a:bat[:void,:int])(_10:int)
    bat.append(a,4);	# 10 BKCappend_val_wrap (_20:void)<-(a:bat[:void,:int])(_12:int)
    bat.append(a,5);	# 11 BKCappend_val_wrap (_21:void)<-(a:bat[:void,:int])(_22:int)
    bat.append(a,8);	# 12 BKCappend_val_wrap (_23:void)<-(a:bat[:void,:int])(_18:int)
    bat.append(a,3);	# 13 BKCappend_val_wrap (_24:void)<-(a:bat[:void,:int])(_25:int)
    bat.setSequenceBase(a,10@0:oid);	# 14 BKCsetSequenceBase (_26:bat[:void,:int])<-(a:bat[:void,:int])(_27:oid)
    io.print(a);	# 15 IOprint_val (_28:void)<-(a:bat[:void,:int])
    b := algebra.copy(a);	# 16 ALGcopy (b:bat[:void,:int])<-(a:bat[:void,:int])
    bat.setName(b,"B");	# 17 BKCsetName (_30:void)<-(b:bat[:void,:int])(_31:str)
    io.print("insert tests");	# 18 IOprint_val (_32:void)<-(_33:str)
#insert in order 	# 19  (_34:str)
    bat.insert(a,20@0:oid,8);	# 20 BKCinsert_bun (_35:void)<-(a:bat[:void,:int])(_36:oid)(_18:int)
    io.print(a);	# 21 IOprint_val (_37:void)<-(a:bat[:void,:int])
    io.print("replace tests");	# 22 IOprint_val (_38:void)<-(_39:str)
# replace uncommited no need to change to oid 	# 23  (_40:str)
    bat.replace(a,15@0:oid,9);	# 24 BKCreplace_bun (_41:void)<-(a:bat[:void,:int])(_42:oid)(_43:int)
    io.print(a);	# 25 IOprint_val (_44:void)<-(a:bat[:void,:int])
# replace last no need to change to oid 	# 26  (_45:str)
    bat.replace(a,20@0:oid,9);	# 27 BKCreplace_bun (_46:void)<-(a:bat[:void,:int])(_36:oid)(_43:int)
    io.print(a);	# 28 IOprint_val (_47:void)<-(a:bat[:void,:int])
# replace last + 1, noting needed 	# 29  (_48:str)
    bat.replace(a,20@0:oid,9);	# 30 BKCreplace_bun (_49:void)<-(a:bat[:void,:int])(_36:oid)(_43:int)
    io.print(a);	# 31 IOprint_val (_50:void)<-(a:bat[:void,:int])
    io.print("delete tests");	# 32 IOprint_val (_51:void)<-(_52:str)
# delete uncommited from the top 	# 33  (_53:str)
    bat.delete(a,20@0:oid);	# 34 BKCdelete (_54:void)<-(a:bat[:void,:int])(_36:oid)
    bat.delete(a,19@0:oid);	# 35 BKCdelete (_55:void)<-(a:bat[:void,:int])(_56:oid)
    bat.delete(a,18@0:oid);	# 36 BKCdelete (_57:void)<-(a:bat[:void,:int])(_58:oid)
    bat.delete(a,17@0:oid);	# 37 BKCdelete (_59:void)<-(a:bat[:void,:int])(_60:oid)
    bat.delete(a,16@0:oid);	# 38 BKCdelete (_61:void)<-(a:bat[:void,:int])(_62:oid)
    bat.delete(a,15@0:oid);	# 39 BKCdelete (_63:void)<-(a:bat[:void,:int])(_42:oid)
    bat.delete(a,14@0:oid);	# 40 BKCdelete (_64:void)<-(a:bat[:void,:int])(_65:oid)
    bat.delete(a,13@0:oid);	# 41 BKCdelete (_66:void)<-(a:bat[:void,:int])(_67:oid)
    bat.delete(a,12@0:oid);	# 42 BKCdelete (_68:void)<-(a:bat[:void,:int])(_69:oid)
    bat.delete(a,11@0:oid);	# 43 BKCdelete (_70:void)<-(a:bat[:void,:int])(_71:oid)
# only 1 left and still void 	# 44  (_72:str)
    io.print(a);	# 45 IOprint_val (_73:void)<-(a:bat[:void,:int])
# now the convert to oid test 	# 46  (_74:str)
    io.print("convert void to oid tests");	# 47 IOprint_val (_75:void)<-(_76:str)
    a := algebra.copy(b);	# 48 ALGcopy (a:bat[:void,:int])<-(b:bat[:void,:int])
    bat.setWriteMode(a);	# 49 BKCsetWriteMode (_77:bat[:void,:int])<-(a:bat[:void,:int])
    bat.setName(a,"C");	# 50 BKCsetName (_78:void)<-(a:bat[:void,:int])(_79:str)
    io.print("insert tests");	# 51 IOprint_val (_80:void)<-(_81:str)
#insert in out of order 	# 52  (_82:str)
    bat.insert(a,21@0:oid,8);	# 53 BKCinsert_bun (_83:void)<-(a:bat[:void,:int])(_84:oid)(_85:int)
    io.print(a);	# 54 IOprint_val (_86:void)<-(a:bat[:void,:int])
# use oid bat (test if its a properly made bat) 	# 55  (_87:str)
    bat.delete(a,21@0:oid);	# 56 BKCdelete (_88:void)<-(a:bat[:void,:int])(_84:oid)
    ar := bat.reverse(a);	# 57 BKCreverse (ar:bat[:int,:void])<-(a:bat[:void,:int])
    z := algebra.join(ar,b);	# 58 ALGjoin (z:bat[:int,:int])<-(ar:bat[:int,:void])(b:bat[:void,:int])
    io.print(z);	# 59 IOprint_val (_91:void)<-(z:bat[:int,:int])
    io.print("replace tests");	# 60 IOprint_val (_92:void)<-(_93:str)
#replace commited bun 	# 61  (_94:str)
    a := algebra.copy(b);	# 62 ALGcopy (a:bat[:void,:int])<-(b:bat[:void,:int])
    bat.setWriteMode(a);	# 63 BKCsetWriteMode (_95:bat[:void,:int])<-(a:bat[:void,:int])
    bat.setName(a,"D");	# 64 BKCsetName (_96:void)<-(a:bat[:void,:int])(_97:str)
    transaction.commit(a);	# 65 TRNtrans_commit (_98:void)<-(a:bat[:void,:int])
# replace commited  	# 66  (_99:str)
    bat.replace(a,15@0:oid,-3);	# 67 BKCreplace_bun (_100:void)<-(a:bat[:void,:int])(_101:oid)(_102:int)
# replace last (or used to be last) 	# 68  (_103:str)
    bat.replace(a,19@0:oid,-1);	# 69 BKCreplace_bun (_104:void)<-(a:bat[:void,:int])(_105:oid)(_106:int)
# replace something not there 	# 70  (_107:str)
    bat.replace(a,20@0:oid,-2);	# 71 BKCreplace_bun (_108:void)<-(a:bat[:void,:int])(_109:oid)(_110:int)
    io.print(a);	# 72 IOprint_val (_111:void)<-(a:bat[:void,:int])
# delete commited  	# 73  (_112:str)
    io.print("delete tests");	# 74 IOprint_val (_113:void)<-(_114:str)
    a := algebra.copy(b);	# 75 ALGcopy (a:bat[:void,:int])<-(b:bat[:void,:int])
    bat.setWriteMode(a);	# 76 BKCsetWriteMode (_115:bat[:void,:int])<-(a:bat[:void,:int])
    bat.setName(a,"E");	# 77 BKCsetName (_116:void)<-(a:bat[:void,:int])(_117:str)
    transaction.commit(a);	# 78 TRNtrans_commit (_118:void)<-(a:bat[:void,:int])
    io.print(a);	# 79 IOprint_val (_119:void)<-(a:bat[:void,:int])
    bat.delete(a,20@0:oid);	# 80 BKCdelete (_120:void)<-(a:bat[:void,:int])(_109:oid)
    io.print(a);	# 81 IOprint_val (_121:void)<-(a:bat[:void,:int])
    bat.delete(a,19@0:oid);	# 82 BKCdelete (_122:void)<-(a:bat[:void,:int])(_105:oid)
    io.print(a);	# 83 IOprint_val (_123:void)<-(a:bat[:void,:int])
    bat.delete(a,18@0:oid);	# 84 BKCdelete (_124:void)<-(a:bat[:void,:int])(_125:oid)
    io.print(a);	# 85 IOprint_val (_126:void)<-(a:bat[:void,:int])
    bat.delete(a,17@0:oid);	# 86 BKCdelete (_127:void)<-(a:bat[:void,:int])(_128:oid)
    io.print(a);	# 87 IOprint_val (_129:void)<-(a:bat[:void,:int])
    bat.delete(a,16@0:oid);	# 88 BKCdelete (_130:void)<-(a:bat[:void,:int])(_131:oid)
    io.print(a);	# 89 IOprint_val (_132:void)<-(a:bat[:void,:int])
    bat.delete(a,15@0:oid);	# 90 BKCdelete (_133:void)<-(a:bat[:void,:int])(_101:oid)
    io.print(a);	# 91 IOprint_val (_134:void)<-(a:bat[:void,:int])
    bat.delete(a,14@0:oid);	# 92 BKCdelete (_135:void)<-(a:bat[:void,:int])(_136:oid)
    io.print(a);	# 93 IOprint_val (_137:void)<-(a:bat[:void,:int])
    bat.delete(a,13@0:oid);	# 94 BKCdelete (_138:void)<-(a:bat[:void,:int])(_139:oid)
    io.print(a);	# 95 IOprint_val (_140:void)<-(a:bat[:void,:int])
    bat.delete(a,12@0:oid);	# 96 BKCdelete (_141:void)<-(a:bat[:void,:int])(_142:oid)
    io.print(a);	# 97 IOprint_val (_143:void)<-(a:bat[:void,:int])
    bat.delete(a,11@0:oid);	# 98 BKCdelete (_144:void)<-(a:bat[:void,:int])(_145:oid)
    io.print(a);	# 99 IOprint_val (_146:void)<-(a:bat[:void,:int])
# only 1 left and still void 	# 100  (_147:str)
    io.print(a);	# 101 IOprint_val (_148:void)<-(a:bat[:void,:int])
# deleting a transient value from a just void table didn't fix 	# 102  (_149:str)
# the denseness 	# 103  (_150:str)
    t1 := bat.new(:void,:int);	# 104 CMDBATnew (t1:bat[:void,:int])<-(_4:void)(_5:int)
    bat.setSequenceBase(t1,0@0);	# 105 BKCsetSequenceBase (_152:bat[:void,:int])<-(t1:bat[:void,:int])(_153:oid)
    bat.append(t1,1);	# 106 BKCappend_val_wrap (_154:void)<-(t1:bat[:void,:int])(_155:int)
    bat.append(t1,2);	# 107 BKCappend_val_wrap (_156:void)<-(t1:bat[:void,:int])(_157:int)
    bat.append(t1,3);	# 108 BKCappend_val_wrap (_158:void)<-(t1:bat[:void,:int])(_159:int)
    io.print("<in>");	# 109 IOprint_val (_160:void)<-(_161:str)
    v1 := algebra.select(t1,2,nil:int,false,false);	# 110 ALGselectInclusive (v1:bat[:oid,:int])<-(t1:bat[:void,:int])(_157:int)(_163:int)(_164:bit)(_164:bit)
    v2a := algebra.markT(v1,0@0);	# 111 ALGtmark (v2a:bat[:oid,:void])<-(v1:bat[:oid,:int])(_153:oid)
    vr := bat.reverse(v2a);	# 112 BKCreverse (vr:bat[:void,:oid])<-(v2a:bat[:oid,:void])
    vj := algebra.join(vr,t1);	# 113 ALGjoin (vj:bat[:void,:int])<-(vr:bat[:void,:oid])(t1:bat[:void,:int])
    io.print(vj);	# 114 IOprint_val (_168:void)<-(vj:bat[:void,:int])
    v3 := algebra.select(t1,2,nil:int);	# 115 ALGselect (v3:bat[:oid,:int])<-(t1:bat[:void,:int])(_157:int)(_163:int)
    i := bat.info(v3);	# 116 BKCinfo (i:bat[:str,:str])<-(v3:bat[:oid,:int])
    z2 := algebra.find(i,"hseqbase");	# 117 ALGfind (z2:str)<-(i:bat[:str,:str])(_172:str)
    io.print(z2);	# 118 IOprint_val (_173:void)<-(z2:str)
    z2 := algebra.find(i,"hdense");	# 119 ALGfind (z2:str)<-(i:bat[:str,:str])(_174:str)
    io.print(z2);	# 120 IOprint_val (_175:void)<-(z2:str)
    bat.setWriteMode(v3);	# 121 BKCsetWriteMode (_176:bat[:oid,:int])<-(v3:bat[:oid,:int])
    v3r := bat.reverse(v3);	# 122 BKCreverse (v3r:bat[:int,:oid])<-(v3:bat[:oid,:int])
    bat.delete(v3r,2);	# 123 BKCdelete (_178:void)<-(v3r:bat[:int,:oid])(_157:int)
    i := bat.info(v3);	# 124 BKCinfo (i:bat[:str,:str])<-(v3:bat[:oid,:int])
    z2 := algebra.find(i,"hseqbase");	# 125 ALGfind (z2:str)<-(i:bat[:str,:str])(_172:str)
    io.print(z2);	# 126 IOprint_val (_179:void)<-(z2:str)
    z2 := algebra.find(i,"hdense");	# 127 ALGfind (z2:str)<-(i:bat[:str,:str])(_174:str)
    io.print(z2);	# 128 IOprint_val (_180:void)<-(z2:str)
    x := bat.new(:void,:void);	# 129 CMDBATnew (x:bat[:void,:void])<-(_4:void)(_4:void)
    bat.setSequenceBase(x,0@0);	# 130 BKCsetSequenceBase (_182:bat[:void,:void])<-(x:bat[:void,:void])(_153:oid)
#bat.append(x,12@0); 	# 131  (_183:str)
    bat.append(x,nil:void);	# 132 BKCappend_val_wrap (_184:void)<-(x:bat[:void,:void])(_185:void)
    io.print(x);	# 133 IOprint_val (_186:void)<-(x:bat[:void,:void])
    e := bat.new(:void,:int);	# 134 CMDBATnew (e:bat[:void,:int])<-(_4:void)(_5:int)
    bat.setSequenceBase(e,10@0);	# 135 BKCsetSequenceBase (_188:bat[:void,:int])<-(e:bat[:void,:int])(_189:oid)
    n := bat.new(:void,:int);	# 136 CMDBATnew (n:bat[:void,:int])<-(_4:void)(_5:int)
    bat.setSequenceBase(n,20@0);	# 137 BKCsetSequenceBase (_191:bat[:void,:int])<-(n:bat[:void,:int])(_192:oid)
    bat.append(n,20);	# 138 BKCappend_val_wrap (_193:void)<-(n:bat[:void,:int])(_194:int)
    bat.insert(e,n);	# 139 BKCinsert_bat (_195:void)<-(e:bat[:void,:int])(n:bat[:void,:int])
    io.print(e);	# 140 IOprint_val (_196:void)<-(e:bat[:void,:int])
    y := bat.new(:void,:int);	# 141 CMDBATnew (y:bat[:void,:int])<-(_4:void)(_5:int)
    bat.insert(y,nil:oid,0);	# 142 BKCinsert_bun (_198:void)<-(y:bat[:void,:int])(_199:oid)(_200:int)
    bat.setSequenceBase(y,20@0);	# 143 BKCsetSequenceBase (_201:bat[:void,:int])<-(y:bat[:void,:int])(_192:oid)
    zn := bat.new(:void,:int);	# 144 CMDBATnew (zn:bat[:void,:int])<-(_4:void)(_5:int)
    bat.setSequenceBase(zn,10@0);	# 145 BKCsetSequenceBase (_203:bat[:void,:int])<-(zn:bat[:void,:int])(_189:oid)
    bat.setKey(zn,true);	# 146 BKCsetkey (_204:bat[:void,:int])<-(zn:bat[:void,:int])(_205:bit)
    bat.insert(zn,y);	# 147 BKCinsert_bat (_206:void)<-(zn:bat[:void,:int])(y:bat[:void,:int])
    io.print(zn);	# 148 IOprint_val (_207:void)<-(zn:bat[:void,:int])
    clients.quit();	# 149 CLTquitDefault (_208:void)
end main;	# 150  
[ "First keep void tests" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  1	  ]
[ 16@0,	  4	  ]
[ 17@0,	  5	  ]
[ 18@0,	  8	  ]
[ 19@0,	  3	  ]
[ "insert tests" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  1	  ]
[ 16@0,	  4	  ]
[ 17@0,	  5	  ]
[ 18@0,	  8	  ]
[ 19@0,	  3	  ]
[ 20@0,	  8	  ]
[ "replace tests" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  9	  ]
[ 16@0,	  4	  ]
[ 17@0,	  5	  ]
[ 18@0,	  8	  ]
[ 19@0,	  3	  ]
[ 20@0,	  8	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  9	  ]
[ 16@0,	  4	  ]
[ 17@0,	  5	  ]
[ 18@0,	  8	  ]
[ 19@0,	  3	  ]
[ 20@0,	  9	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  9	  ]
[ 16@0,	  4	  ]
[ 17@0,	  5	  ]
[ 18@0,	  8	  ]
[ 19@0,	  3	  ]
[ 20@0,	  9	  ]
[ "delete tests" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 10@0,	  1	  ]
[ "convert void to oid tests" ]
[ "insert tests" ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  1	  ]
[ 16@0,	  4	  ]
[ 17@0,	  5	  ]
[ 18@0,	  8	  ]
[ 19@0,	  3	  ]
[ 21@0,	  8	  ]
#-----------------#
# t	h	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 4,	  4	  ]
[ 7,	  7	  ]
[ 2,	  2	  ]
[ 8,	  8	  ]
[ 1,	  1	  ]
[ 4,	  4	  ]
[ 5,	  5	  ]
[ 8,	  8	  ]
[ 3,	  3	  ]
[ "replace tests" ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 19@0,	  -1	  ]
[ 16@0,	  4	  ]
[ 17@0,	  5	  ]
[ 18@0,	  8	  ]
[ 15@0,	  -3	  ]
[ "delete tests" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  1	  ]
[ 16@0,	  4	  ]
[ 17@0,	  5	  ]
[ 18@0,	  8	  ]
[ 19@0,	  3	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  1	  ]
[ 16@0,	  4	  ]
[ 17@0,	  5	  ]
[ 18@0,	  8	  ]
[ 19@0,	  3	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  1	  ]
[ 16@0,	  4	  ]
[ 17@0,	  5	  ]
[ 18@0,	  8	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  1	  ]
[ 16@0,	  4	  ]
[ 17@0,	  5	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  1	  ]
[ 16@0,	  4	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
[ 15@0,	  1	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
[ 14@0,	  8	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
[ 13@0,	  2	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
[ 12@0,	  7	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 10@0,	  1	  ]
[ 11@0,	  4	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 10@0,	  1	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 10@0,	  1	  ]
[ "<in>" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  3	  ]
[ "1@0" ]
[ "1" ]
[ "1@0" ]
[ "0" ]
#-----------------#
# h	t	  # name
# void	void	  # type
#-----------------#
[ 0@0,	  nil	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 20@0,	  20	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 20@0,	  0	  ]

# 23:46:00 >  
# 23:46:00 >  Done.
# 23:46:00 >  

