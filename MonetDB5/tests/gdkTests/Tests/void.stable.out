stdout of test 'void` in directory 'tests/gdkTests` itself:


# 23:46:00 >  
# 23:46:00 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35611 --set monet_prompt= --trace --dbname=mTests_tests_gdkTests  void.mal < /dev/null
# 23:46:00 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_gdkTests
# Visit http://monetdb.cwi.nl/ for further information
#
#io.print("First keep void tests");
#a := bat.new(:void,:int,10);
#bat.setName(a,"A");
#bat.append(a,1);
#bat.append(a,4);
#bat.append(a,7);
#bat.append(a,2);
#bat.append(a,8);
#bat.append(a,1);
#bat.append(a,4);
#bat.append(a,5);
#bat.append(a,8);
#bat.append(a,3);
#bat.setSequenceBase(a,10:oid);
#io.print(a);
#
#b := algebra.copy(a);
#bat.setName(b,"B");
#
#io.print("insert tests");
##insert in order
#bat.insert(a,20:oid,8);
#io.print(a);
#
#io.print("replace tests");
## replace uncommited no need to change to oid
#bat.replace(a,15:oid,9);
#io.print(a);
#
## replace last no need to change to oid
#bat.replace(a,20:oid,9);
#io.print(a);
#
## replace last + 1, noting needed
#bat.replace(a,20:oid,9);
#io.print(a);
#
#io.print("delete tests");
## delete uncommited from the top
#bat.delete(a,20:oid);
#bat.delete(a,19:oid);
#bat.delete(a,18:oid);
#bat.delete(a,17:oid);
#bat.delete(a,16:oid);
#bat.delete(a,15:oid);
#bat.delete(a,14:oid);
#bat.delete(a,13:oid);
#bat.delete(a,12:oid);
#bat.delete(a,11:oid);
## only 1 left and still void
#io.print(a);
#
## now the convert to oid test
#io.print("convert void to oid tests");
#a := algebra.copy(b);
#bat.setWriteMode(a);
#bat.setName(a,"C");
#
#io.print("insert tests");
##insert in out of order
#bat.insert(a,21:oid,8);
#io.print(a);
#
## use oid bat (test if its a properly made bat)
#bat.delete(a,21:oid);
#ar:= bat.reverse(a);
#z:= algebra.join(ar,b);
#io.print(z);
#
#io.print("replace tests");
##replace commited bun
#a := algebra.copy(b); bat.setWriteMode(a); bat.setName(a,"D");
#transaction.commit(a);
#
## replace commited 
#bat.replace(a,15:oid,-3);
## replace last (or used to be last)
#bat.replace(a,19:oid,-1);
## replace something not there
#bat.replace(a,20:oid,-2);
#io.print(a);
#
## delete commited 
#io.print("delete tests");
#a := algebra.copy(b); bat.setWriteMode(a); bat.setName(a,"E");
#transaction.commit(a);
#io.print(a);
#
#bat.delete(a,20:oid);io.print(a);
#bat.delete(a,19:oid);io.print(a);
#bat.delete(a,18:oid);io.print(a);
#bat.delete(a,17:oid);io.print(a);
#bat.delete(a,16:oid);io.print(a);
#bat.delete(a,15:oid);io.print(a);
#bat.delete(a,14:oid);io.print(a);
#bat.delete(a,13:oid);io.print(a);
#bat.delete(a,12:oid);io.print(a);
#bat.delete(a,11:oid);io.print(a);
## only 1 left and still void
#io.print(a);
#
## deleting a transient value from a just void table didn't fix
## the denseness
#
#t1 := bat.new(:void,:int);
#bat.setSequenceBase(t1,0@0);
#bat.append(t1,1);
#bat.append(t1,2);
#bat.append(t1,3);
#io.print("<in>");
#v1 := algebra.select(t1, 2,nil:int,false,false);
#v2a := algebra.markT(v1,0@0);
#vr := bat.reverse(v2a);
#vj:= algebra.join(vr,t1);
#io.print(vj);
#
#v3 := algebra.select(t1,2, nil:int);
#i:= bat.info(v3); z2:= algebra.find(i,"hseqbase"); io.print(z2);
#z2:= algebra.find(i,"hdense"); io.print(z2);
#bat.setWriteMode(v3);
#v3r:= bat.reverse(v3);
#bat.delete(v3r,2);
#i:= bat.info(v3); z2:= algebra.find(i,"hseqbase"); io.print(z2);
#z2:= algebra.find(i,"hdense"); io.print(z2);
#
#x := bat.new(:void,:void);
#bat.setSequenceBase(x,0@0);
##bat.append(x,12@0);
#bat.append(x,nil);
#io.print(x);
#
#e := bat.new(:void,:int);
#bat.setSequenceBase(e,10@0);
#n := bat.new(:void,:int);
#bat.setSequenceBase(n,20@0);
#bat.append(n,20);
#bat.insert(e,n);
#io.print(e);
#
#y := bat.new(:void,:int);
#bat.insert(y,nil:oid,0);
#bat.setSequenceBase(y,20@0);
#zn := bat.new(:void,:int);
#bat.setSequenceBase(zn,10@0);
#bat.setKey(zn,true);
#bat.insert(zn,y);
#io.print(zn);
#
#clients.quit();
#
function user.main():void;              #  0 main:void := user.main() {G}
    io.print("First keep void tests");  #  1 _1:void := IOprint_val(_2:str) 
    a := bat.new(:oid,:int,10);         #  2 a:bat[:oid,:int] := CMDBATnewint(_4:oid, _5:int, _6:int) {G}
    bat.setName(a,"A");                 #  3 _7:void := BKCsetName(a:bat[:oid,:int], _8:str) 
    bat.append(a,1);                    #  4 _9:void := BKCappend_val_wrap(a:bat[:oid,:int], _10:int) 
    bat.append(a,4);                    #  5 _11:void := BKCappend_val_wrap(a:bat[:oid,:int], _12:int) 
    bat.append(a,7);                    #  6 _13:void := BKCappend_val_wrap(a:bat[:oid,:int], _14:int) 
    bat.append(a,2);                    #  7 _15:void := BKCappend_val_wrap(a:bat[:oid,:int], _16:int) 
    bat.append(a,8);                    #  8 _17:void := BKCappend_val_wrap(a:bat[:oid,:int], _18:int) 
    bat.append(a,1);                    #  9 _19:void := BKCappend_val_wrap(a:bat[:oid,:int], _10:int) 
    bat.append(a,4);                    # 10 _20:void := BKCappend_val_wrap(a:bat[:oid,:int], _12:int) 
    bat.append(a,5);                    # 11 _21:void := BKCappend_val_wrap(a:bat[:oid,:int], _22:int) 
    bat.append(a,8);                    # 12 _23:void := BKCappend_val_wrap(a:bat[:oid,:int], _18:int) 
    bat.append(a,3);                    # 13 _24:void := BKCappend_val_wrap(a:bat[:oid,:int], _25:int) 
    io.print(a);                        # 14 _26:void := IOprint_val(a:bat[:oid,:int]) 
    b := algebra.copy(a);               # 15 b:bat[:oid,:int] := ALGcopy(a:bat[:oid,:int]) {G}
    bat.setName(b,"B");                 # 16 _28:void := BKCsetName(b:bat[:oid,:int], _29:str) 
    io.print("insert tests");           # 17 _30:void := IOprint_val(_31:str) 
#insert in order 
    bat.insert(a,20@0:oid,8);           # 19 _33:void := BKCinsert_bun(a:bat[:oid,:int], _34:oid, _18:int) 
    io.print(a);                        # 20 _35:void := IOprint_val(a:bat[:oid,:int]) 
    io.print("replace tests");          # 21 _36:void := IOprint_val(_37:str) 
# replace uncommited no need to change to oid 
    bat.replace(a,5@0:oid,9);           # 23 _39:void := BKCreplace_bun(a:bat[:oid,:int], _40:oid, _41:int) 
    io.print(a);                        # 24 _42:void := IOprint_val(a:bat[:oid,:int]) 
# replace last no need to change to oid 
    bat.replace(a,20@0:oid,9);          # 26 _44:void := BKCreplace_bun(a:bat[:oid,:int], _34:oid, _41:int) 
    io.print(a);                        # 27 _45:void := IOprint_val(a:bat[:oid,:int]) 
# replace last + 1, noting needed 
    bat.replace(a,20@0:oid,9);          # 29 _47:void := BKCreplace_bun(a:bat[:oid,:int], _34:oid, _41:int) 
    io.print(a);                        # 30 _48:void := IOprint_val(a:bat[:oid,:int]) 
    io.print("delete tests");           # 31 _49:void := IOprint_val(_50:str) 
# delete uncommited from the top 
    bat.delete(a,20@0:oid);             # 33 _52:void := BKCdelete(a:bat[:oid,:int], _34:oid) 
    bat.delete(a,9@0:oid);              # 34 _53:void := BKCdelete(a:bat[:oid,:int], _54:oid) 
    bat.delete(a,8@0:oid);              # 35 _55:void := BKCdelete(a:bat[:oid,:int], _56:oid) 
    bat.delete(a,7@0:oid);              # 36 _57:void := BKCdelete(a:bat[:oid,:int], _58:oid) 
    bat.delete(a,6@0:oid);              # 37 _59:void := BKCdelete(a:bat[:oid,:int], _60:oid) 
    bat.delete(a,5@0:oid);              # 38 _61:void := BKCdelete(a:bat[:oid,:int], _40:oid) 
    bat.delete(a,4@0:oid);              # 39 _62:void := BKCdelete(a:bat[:oid,:int], _63:oid) 
    bat.delete(a,3@0:oid);              # 40 _64:void := BKCdelete(a:bat[:oid,:int], _65:oid) 
    bat.delete(a,2@0:oid);              # 41 _66:void := BKCdelete(a:bat[:oid,:int], _67:oid) 
    bat.delete(a,1@0:oid);              # 42 _68:void := BKCdelete(a:bat[:oid,:int], _69:oid) 
# only 1 left and still void 
    io.print(a);                        # 44 _71:void := IOprint_val(a:bat[:oid,:int]) 
# now the convert to oid test 
    io.print("convert void to oid tests");# 46 _73:void := IOprint_val(_74:str) 
    a := algebra.copy(b);               # 47 a:bat[:oid,:int] := ALGcopy(b:bat[:oid,:int]) {G}
    bat.setWriteMode(a);                # 48 _75:bat[:oid,:int] := BKCsetWriteMode(a:bat[:oid,:int]) {G}
    bat.setName(a,"C");                 # 49 _76:void := BKCsetName(a:bat[:oid,:int], _77:str) 
    io.print("insert tests");           # 50 _78:void := IOprint_val(_79:str) 
#insert in out of order 
    bat.insert(a,21@0:oid,8);           # 52 _81:void := BKCinsert_bun(a:bat[:oid,:int], _82:oid, _83:int) 
    io.print(a);                        # 53 _84:void := IOprint_val(a:bat[:oid,:int]) 
# use oid bat (test if its a properly made bat) 
    bat.delete(a,21@0:oid);             # 55 _86:void := BKCdelete(a:bat[:oid,:int], _82:oid) 
    ar := bat.reverse(a);               # 56 ar:bat[:int,:oid] := BKCreverse(a:bat[:oid,:int]) {G}
    z := algebra.join(ar,b);            # 57 z:bat[:int,:int] := ALGjoin(ar:bat[:int,:oid], b:bat[:oid,:int]) {G}
    io.print(z);                        # 58 _89:void := IOprint_val(z:bat[:int,:int]) 
    io.print("replace tests");          # 59 _90:void := IOprint_val(_91:str) 
#replace commited bun 
    a := algebra.copy(b);               # 61 a:bat[:oid,:int] := ALGcopy(b:bat[:oid,:int]) {G}
    bat.setWriteMode(a);                # 62 _93:bat[:oid,:int] := BKCsetWriteMode(a:bat[:oid,:int]) {G}
    bat.setName(a,"D");                 # 63 _94:void := BKCsetName(a:bat[:oid,:int], _95:str) 
    transaction.commit(a);              # 64 _96:void := TRNtrans_commit(a:bat[:oid,:int]) 
# replace commited  
    bat.replace(a,5@0:oid,-3);          # 66 _98:void := BKCreplace_bun(a:bat[:oid,:int], _99:oid, _100:int) 
# replace last (or used to be last) 
    bat.replace(a,9@0:oid,-1);          # 68 _102:void := BKCreplace_bun(a:bat[:oid,:int], _103:oid, _104:int) 
# replace something not there 
    bat.replace(a,20@0:oid,-2);         # 70 _106:void := BKCreplace_bun(a:bat[:oid,:int], _107:oid, _108:int) 
    io.print(a);                        # 71 _109:void := IOprint_val(a:bat[:oid,:int]) 
# delete commited  
    io.print("delete tests");           # 73 _111:void := IOprint_val(_112:str) 
    a := algebra.copy(b);               # 74 a:bat[:oid,:int] := ALGcopy(b:bat[:oid,:int]) {G}
    bat.setWriteMode(a);                # 75 _113:bat[:oid,:int] := BKCsetWriteMode(a:bat[:oid,:int]) {G}
    bat.setName(a,"E");                 # 76 _114:void := BKCsetName(a:bat[:oid,:int], _115:str) 
    transaction.commit(a);              # 77 _116:void := TRNtrans_commit(a:bat[:oid,:int]) 
    io.print(a);                        # 78 _117:void := IOprint_val(a:bat[:oid,:int]) 
    bat.delete(a,20@0:oid);             # 79 _118:void := BKCdelete(a:bat[:oid,:int], _107:oid) 
    io.print(a);                        # 80 _119:void := IOprint_val(a:bat[:oid,:int]) 
    bat.delete(a,9@0:oid);              # 81 _120:void := BKCdelete(a:bat[:oid,:int], _103:oid) 
    io.print(a);                        # 82 _121:void := IOprint_val(a:bat[:oid,:int]) 
    bat.delete(a,8@0:oid);              # 83 _122:void := BKCdelete(a:bat[:oid,:int], _123:oid) 
    io.print(a);                        # 84 _124:void := IOprint_val(a:bat[:oid,:int]) 
    bat.delete(a,7@0:oid);              # 85 _125:void := BKCdelete(a:bat[:oid,:int], _126:oid) 
    io.print(a);                        # 86 _127:void := IOprint_val(a:bat[:oid,:int]) 
    bat.delete(a,6@0:oid);              # 87 _128:void := BKCdelete(a:bat[:oid,:int], _129:oid) 
    io.print(a);                        # 88 _130:void := IOprint_val(a:bat[:oid,:int]) 
    bat.delete(a,5@0:oid);              # 89 _131:void := BKCdelete(a:bat[:oid,:int], _132:oid) 
    io.print(a);                        # 90 _133:void := IOprint_val(a:bat[:oid,:int]) 
    bat.delete(a,4@0:oid);              # 91 _134:void := BKCdelete(a:bat[:oid,:int], _135:oid) 
    io.print(a);                        # 92 _136:void := IOprint_val(a:bat[:oid,:int]) 
    bat.delete(a,3@0:oid);              # 93 _137:void := BKCdelete(a:bat[:oid,:int], _138:oid) 
    io.print(a);                        # 94 _139:void := IOprint_val(a:bat[:oid,:int]) 
    bat.delete(a,2@0:oid);              # 95 _140:void := BKCdelete(a:bat[:oid,:int], _141:oid) 
    io.print(a);                        # 96 _142:void := IOprint_val(a:bat[:oid,:int]) 
    bat.delete(a,1@0:oid);              # 97 _143:void := BKCdelete(a:bat[:oid,:int], _144:oid) 
    io.print(a);                        # 98 _145:void := IOprint_val(a:bat[:oid,:int]) 
# only 1 left and still void 
    io.print(a);                        #100 _147:void := IOprint_val(a:bat[:oid,:int]) 
# deleting a transient value from a just void table didn't fix 
# the denseness 
    t1 := bat.new(:oid,:int);           #103 t1:bat[:oid,:int] := CMDBATnew(_4:oid, _5:int) {G}
    bat.append(t1,1);                   #104 _151:void := BKCappend_val_wrap(t1:bat[:oid,:int], _152:int) 
    bat.append(t1,2);                   #105 _153:void := BKCappend_val_wrap(t1:bat[:oid,:int], _154:int) 
    bat.append(t1,3);                   #106 _155:void := BKCappend_val_wrap(t1:bat[:oid,:int], _156:int) 
    io.print("<in>");                   #107 _157:void := IOprint_val(_158:str) 
    v1 := algebra.select(t1,2,nil:int,false,false);#108 v1:bat[:oid,:int] := ALGselectInclusive(t1:bat[:oid,:int], _154:int, _160:int, _161:bit, _161:bit) {G}
    v2a := algebra.markT(v1,0@0);       #109 v2a:bat[:oid,:oid] := ALGtmark(v1:bat[:oid,:int], _163:oid) {G}
    vr := bat.reverse(v2a);             #110 vr:bat[:oid,:oid] := BKCreverse(v2a:bat[:oid,:oid]) {G}
    vj := algebra.join(vr,t1);          #111 vj:bat[:oid,:int] := ALGjoin(vr:bat[:oid,:oid], t1:bat[:oid,:int]) {G}
    io.print(vj);                       #112 _166:void := IOprint_val(vj:bat[:oid,:int]) 
    v3 := algebra.select(t1,2,nil:int); #113 v3:bat[:oid,:int] := ALGselect(t1:bat[:oid,:int], _154:int, _160:int) {G}
    i := bat.info(v3);                  #114 i:bat[:str,:str] := BKCinfo(v3:bat[:oid,:int]) {G}
    z2 := algebra.find(i,"hseqbase");   #115 z2:str := ALGfind(i:bat[:str,:str], _170:str) {G}
    io.print(z2);                       #116 _171:void := IOprint_val(z2:str) 
    z2 := algebra.find(i,"hdense");     #117 z2:str := ALGfind(i:bat[:str,:str], _172:str) {G}
    io.print(z2);                       #118 _173:void := IOprint_val(z2:str) 
    bat.setWriteMode(v3);               #119 _174:bat[:oid,:int] := BKCsetWriteMode(v3:bat[:oid,:int]) {G}
    v3r := bat.reverse(v3);             #120 v3r:bat[:int,:oid] := BKCreverse(v3:bat[:oid,:int]) {G}
    bat.delete(v3r,2);                  #121 _176:void := BKCdelete(v3r:bat[:int,:oid], _154:int) 
    i := bat.info(v3);                  #122 i:bat[:str,:str] := BKCinfo(v3:bat[:oid,:int]) {G}
    z2 := algebra.find(i,"hseqbase");   #123 z2:str := ALGfind(i:bat[:str,:str], _170:str) {G}
    io.print(z2);                       #124 _177:void := IOprint_val(z2:str) 
    z2 := algebra.find(i,"hdense");     #125 z2:str := ALGfind(i:bat[:str,:str], _172:str) {G}
    io.print(z2);                       #126 _178:void := IOprint_val(z2:str) 
    x := bat.new(:oid,:oid);            #127 x:bat[:oid,:oid] := CMDBATnew(_4:oid, _4:oid) {G}
#bat.append(x,2@0); 
    bat.append(x,nil:oid);              #129 _181:void := BKCappend_val_wrap(x:bat[:oid,:oid], _182:oid) 
    io.print(x);                        #130 _183:void := IOprint_val(x:bat[:oid,:oid]) 
    e := bat.new(:oid,:int);            #131 e:bat[:oid,:int] := CMDBATnew(_4:oid, _5:int) {G}
    n := bat.new(:oid,:int);            #132 n:bat[:oid,:int] := CMDBATnew(_4:oid, _5:int) {G}
    bat.append(n,20);                   #133 _186:void := BKCappend_val_wrap(n:bat[:oid,:int], _187:int) 
    bat.insert(e,n);                    #134 _188:void := BKCinsert_bat(e:bat[:oid,:int], n:bat[:oid,:int]) 
    io.print(e);                        #135 _189:void := IOprint_val(e:bat[:oid,:int]) 
    y := bat.new(:oid,:int);            #136 y:bat[:oid,:int] := CMDBATnew(_4:oid, _5:int) {G}
    bat.insert(y,nil:oid,0);            #137 _191:void := BKCinsert_bun(y:bat[:oid,:int], _182:oid, _192:int) 
    zn := bat.new(:oid,:int);           #138 zn:bat[:oid,:int] := CMDBATnew(_4:oid, _5:int) {G}
    bat.setKey(zn,true);                #139 _194:bat[:oid,:int] := BKCsetkey(zn:bat[:oid,:int], _195:bit) {G}
    bat.insert(zn,y);                   #140 _196:void := BKCinsert_bat(zn:bat[:oid,:int], y:bat[:oid,:int]) 
    io.print(zn);                       #141 _197:void := IOprint_val(zn:bat[:oid,:int]) 
    clients.quit();                     #142 _198:void := CLTquit() 
end main;                               #143  
[ "First keep void tests" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  4	  ]
[ 2@0,	  7	  ]
[ 3@0,	  2	  ]
[ 4@0,	  8	  ]
[ 5@0,	  1	  ]
[ 6@0,	  4	  ]
[ 7@0,	  5	  ]
[ 8@0,	  8	  ]
[ 9@0,	  3	  ]
[ "insert tests" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  4	  ]
[ 2@0,	  7	  ]
[ 3@0,	  2	  ]
[ 4@0,	  8	  ]
[ 5@0,	  1	  ]
[ 6@0,	  4	  ]
[ 7@0,	  5	  ]
[ 8@0,	  8	  ]
[ 9@0,	  3	  ]
[ 20@0,	  8	  ]
[ "replace tests" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  4	  ]
[ 2@0,	  7	  ]
[ 3@0,	  2	  ]
[ 4@0,	  8	  ]
[ 5@0,	  9	  ]
[ 6@0,	  4	  ]
[ 7@0,	  5	  ]
[ 8@0,	  8	  ]
[ 9@0,	  3	  ]
[ 20@0,	  8	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  4	  ]
[ 2@0,	  7	  ]
[ 3@0,	  2	  ]
[ 4@0,	  8	  ]
[ 5@0,	  9	  ]
[ 6@0,	  4	  ]
[ 7@0,	  5	  ]
[ 8@0,	  8	  ]
[ 9@0,	  3	  ]
[ 20@0,	  9	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  4	  ]
[ 2@0,	  7	  ]
[ 3@0,	  2	  ]
[ 4@0,	  8	  ]
[ 5@0,	  9	  ]
[ 6@0,	  4	  ]
[ 7@0,	  5	  ]
[ 8@0,	  8	  ]
[ 9@0,	  3	  ]
[ 20@0,	  9	  ]
[ "delete tests" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ "convert void to oid tests" ]
[ "insert tests" ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  4	  ]
[ 2@0,	  7	  ]
[ 3@0,	  2	  ]
[ 4@0,	  8	  ]
[ 5@0,	  1	  ]
[ 6@0,	  4	  ]
[ 7@0,	  5	  ]
[ 8@0,	  8	  ]
[ 9@0,	  3	  ]
[ 21@0,	  8	  ]
#-----------------#
# t	h	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 4,	  4	  ]
[ 7,	  7	  ]
[ 2,	  2	  ]
[ 8,	  8	  ]
[ 1,	  1	  ]
[ 4,	  4	  ]
[ 5,	  5	  ]
[ 8,	  8	  ]
[ 3,	  3	  ]
[ "replace tests" ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 2@0,	  7	  ]
[ 3@0,	  2	  ]
[ 4@0,	  8	  ]
[ 0@0,	  1	  ]
[ 6@0,	  4	  ]
[ 7@0,	  5	  ]
[ 8@0,	  8	  ]
[ 1@0,	  4	  ]
[ 5@0,	  -3	  ]
[ 9@0,	  -1	  ]
[ "delete tests" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  4	  ]
[ 2@0,	  7	  ]
[ 3@0,	  2	  ]
[ 4@0,	  8	  ]
[ 5@0,	  1	  ]
[ 6@0,	  4	  ]
[ 7@0,	  5	  ]
[ 8@0,	  8	  ]
[ 9@0,	  3	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  4	  ]
[ 2@0,	  7	  ]
[ 3@0,	  2	  ]
[ 4@0,	  8	  ]
[ 5@0,	  1	  ]
[ 6@0,	  4	  ]
[ 7@0,	  5	  ]
[ 8@0,	  8	  ]
[ 9@0,	  3	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 1@0,	  4	  ]
[ 2@0,	  7	  ]
[ 3@0,	  2	  ]
[ 4@0,	  8	  ]
[ 5@0,	  1	  ]
[ 6@0,	  4	  ]
[ 7@0,	  5	  ]
[ 8@0,	  8	  ]
[ 0@0,	  1	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 2@0,	  7	  ]
[ 3@0,	  2	  ]
[ 4@0,	  8	  ]
[ 5@0,	  1	  ]
[ 6@0,	  4	  ]
[ 7@0,	  5	  ]
[ 1@0,	  4	  ]
[ 0@0,	  1	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 3@0,	  2	  ]
[ 4@0,	  8	  ]
[ 5@0,	  1	  ]
[ 6@0,	  4	  ]
[ 2@0,	  7	  ]
[ 1@0,	  4	  ]
[ 0@0,	  1	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 4@0,	  8	  ]
[ 5@0,	  1	  ]
[ 3@0,	  2	  ]
[ 2@0,	  7	  ]
[ 1@0,	  4	  ]
[ 0@0,	  1	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 4@0,	  8	  ]
[ 3@0,	  2	  ]
[ 2@0,	  7	  ]
[ 1@0,	  4	  ]
[ 0@0,	  1	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 3@0,	  2	  ]
[ 2@0,	  7	  ]
[ 1@0,	  4	  ]
[ 0@0,	  1	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 2@0,	  7	  ]
[ 1@0,	  4	  ]
[ 0@0,	  1	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 1@0,	  4	  ]
[ 0@0,	  1	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  1	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ "<in>" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  3	  ]
[ "1@0" ]
[ "1" ]
[ "1@0" ]
[ "0" ]
#-----------------#
# h	t	  # name
# void	void	  # type
#-----------------#
[ 0@0,	  nil	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  20	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  0	  ]

# 23:46:00 >  
# 23:46:00 >  Done.
# 23:46:00 >  

