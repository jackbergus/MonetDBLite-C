stdout of test 'semijoin` in directory 'tests/gdkTests` itself:


# 22:53:06 >  
# 22:53:06 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=36170 --set monet_prompt= --trace --dbname=mTests_tests_gdkTests  semijoin.mal < /dev/null
# 22:53:06 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_gdkTests
# Visit http://monetdb.cwi.nl/ for further information
#a:=bat.new(:void,:int);
#bat.setSequenceBase(a,0:oid);
#bat.append(a,0);
#bat.append(a,1);
#bat.append(a,nil:int);
#
#b:=bat.new(:int,:int);
#bat.insert(b,0,0);
#bat.insert(b,0,1);
#bat.insert(b,0,2);
#bat.insert(b,0,3);
#bat.insert(b,0,4);
#bat.insert(b,0,5);
#bat.insert(b,0,6);
#bat.insert(b,0,7);
#bat.insert(b,0,8);
#bat.insert(b,0,9);
#bat.insert(b,0,nil:int);
#bat.insert(b,1,0);
#bat.insert(b,1,1);
#bat.insert(b,1,2);
#bat.insert(b,1,3);
#bat.insert(b,1,4);
#bat.insert(b,1,5);
#bat.insert(b,1,6);
#bat.insert(b,1,7);
#bat.insert(b,1,8);
#bat.insert(b,1,9);
#bat.insert(b,1,nil:int);
#bat.insert(b,nil:int,0);
#bat.insert(b,nil:int,1);
#bat.insert(b,nil:int,2);
#bat.insert(b,nil:int,3);
#bat.insert(b,nil:int,4);
#bat.insert(b,nil:int,5);
#bat.insert(b,nil:int,6);
#bat.insert(b,nil:int,7);
#bat.insert(b,nil:int,8);
#bat.insert(b,nil:int,9);
#bat.insert(b,nil:int,nil:int);
#
#c0:=bat.reverse(b);
#c1:= batcalc.oid(c0);
#c:= bat.reverse(c1);
#d:=bat.reverse(a);
#
#io.print(a);
#io.print(d);
#io.print(b);
#io.print(c);
#
#io.print("semijoin tests b,d");
#z1:= algebra.semijoin(b,d); io.print(z1);
#z2:= algebra.semijoin(d,b); io.print(z2);
#
#z3:= algebra.semijoin(c,a); io.print(z3);
#z4:= algebra.semijoin(a,c); io.print(z4);
#
## (try to) force different semijoin implementations
#
#a1:= bat.new(:int,:oid);
#bat.insert(a1,1,1@0);
#bat.insert(a1,2,2@0);
#bat.insert(a1,nil:int,nil:oid);
#a1s:= algebra.sort(a1);
#
#c1:= bat.new(:int,:oid);
#bat.insert(c1,nil:int,nil:oid);
#barrier (mloop,i):= language.newRange(1);
#	oi:= calc.oid(i);
#	bat.insert(c1,i, oi);
#redo (mloop,i):= language.nextElement(1,100);
#exit mloop;
#c1s:= algebra.sort(c1);
#
#io.print("slices");
#io.print(a1s);
#sl:= algebra.slice(c1s,0,1);
#io.print(sl);
#
#io.print("semijoin tests a1,c1");
## binsemijoin
#e:= algebra.semijoin(a1s,c1s);io.print(e);
#f:= algebra.semijoin(c1s,a1s);io.print(f);
#
#bat.setWriteMode(a1s);
#bat.insert(a1s,nil:int,nil:oid);
#bat.setReadMode(a1s);
#bat.setWriteMode(c1s);
#bat.insert(c1s,nil:int,nil:oid);
#bat.setReadMode(c1s);
#
## hash => kinsertsect & revsemijoin
##ah:=algebra.copy(a1);
##bat.accbuild(ah,"hash");
##ch:=algebra.copy(c);
##bat.accbuild(ch,"hash");
##k:=algebra.semijoin(ah,ch);io.print(k);
##l:=algebra.semijoin(ch,ah);io.print(l);
#
function user.main():void;              #  0 main:void := user.main() {G}
    a := bat.new(:oid,:int);            #  1 a:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    bat.append(a,0);                    #  2 _4:void := BKCappend_val_wrap(a:bat[:oid,:int], _5:int) 
    bat.append(a,1);                    #  3 _6:void := BKCappend_val_wrap(a:bat[:oid,:int], _7:int) 
    bat.append(a,nil:int);              #  4 _8:void := BKCappend_val_wrap(a:bat[:oid,:int], _9:int) 
    b := bat.new(:int,:int);            #  5 b:bat[:int,:int] := CMDBATnew(_3:int, _3:int) {G}
    bat.insert(b,0,0);                  #  6 _11:void := BKCinsert_bun(b:bat[:int,:int], _5:int, _5:int) 
    bat.insert(b,0,1);                  #  7 _12:void := BKCinsert_bun(b:bat[:int,:int], _5:int, _7:int) 
    bat.insert(b,0,2);                  #  8 _13:void := BKCinsert_bun(b:bat[:int,:int], _5:int, _14:int) 
    bat.insert(b,0,3);                  #  9 _15:void := BKCinsert_bun(b:bat[:int,:int], _5:int, _16:int) 
    bat.insert(b,0,4);                  # 10 _17:void := BKCinsert_bun(b:bat[:int,:int], _5:int, _18:int) 
    bat.insert(b,0,5);                  # 11 _19:void := BKCinsert_bun(b:bat[:int,:int], _5:int, _20:int) 
    bat.insert(b,0,6);                  # 12 _21:void := BKCinsert_bun(b:bat[:int,:int], _5:int, _22:int) 
    bat.insert(b,0,7);                  # 13 _23:void := BKCinsert_bun(b:bat[:int,:int], _5:int, _24:int) 
    bat.insert(b,0,8);                  # 14 _25:void := BKCinsert_bun(b:bat[:int,:int], _5:int, _26:int) 
    bat.insert(b,0,9);                  # 15 _27:void := BKCinsert_bun(b:bat[:int,:int], _5:int, _28:int) 
    bat.insert(b,0,nil:int);            # 16 _29:void := BKCinsert_bun(b:bat[:int,:int], _5:int, _9:int) 
    bat.insert(b,1,0);                  # 17 _30:void := BKCinsert_bun(b:bat[:int,:int], _7:int, _5:int) 
    bat.insert(b,1,1);                  # 18 _31:void := BKCinsert_bun(b:bat[:int,:int], _7:int, _7:int) 
    bat.insert(b,1,2);                  # 19 _32:void := BKCinsert_bun(b:bat[:int,:int], _7:int, _14:int) 
    bat.insert(b,1,3);                  # 20 _33:void := BKCinsert_bun(b:bat[:int,:int], _7:int, _16:int) 
    bat.insert(b,1,4);                  # 21 _34:void := BKCinsert_bun(b:bat[:int,:int], _7:int, _18:int) 
    bat.insert(b,1,5);                  # 22 _35:void := BKCinsert_bun(b:bat[:int,:int], _7:int, _20:int) 
    bat.insert(b,1,6);                  # 23 _36:void := BKCinsert_bun(b:bat[:int,:int], _7:int, _22:int) 
    bat.insert(b,1,7);                  # 24 _37:void := BKCinsert_bun(b:bat[:int,:int], _7:int, _24:int) 
    bat.insert(b,1,8);                  # 25 _38:void := BKCinsert_bun(b:bat[:int,:int], _7:int, _26:int) 
    bat.insert(b,1,9);                  # 26 _39:void := BKCinsert_bun(b:bat[:int,:int], _40:int, _28:int) 
    bat.insert(b,1,nil:int);            # 27 _41:void := BKCinsert_bun(b:bat[:int,:int], _40:int, _42:int) 
    bat.insert(b,nil:int,0);            # 28 _43:void := BKCinsert_bun(b:bat[:int,:int], _42:int, _44:int) 
    bat.insert(b,nil:int,1);            # 29 _45:void := BKCinsert_bun(b:bat[:int,:int], _42:int, _40:int) 
    bat.insert(b,nil:int,2);            # 30 _46:void := BKCinsert_bun(b:bat[:int,:int], _42:int, _47:int) 
    bat.insert(b,nil:int,3);            # 31 _48:void := BKCinsert_bun(b:bat[:int,:int], _42:int, _49:int) 
    bat.insert(b,nil:int,4);            # 32 _50:void := BKCinsert_bun(b:bat[:int,:int], _42:int, _51:int) 
    bat.insert(b,nil:int,5);            # 33 _52:void := BKCinsert_bun(b:bat[:int,:int], _42:int, _53:int) 
    bat.insert(b,nil:int,6);            # 34 _54:void := BKCinsert_bun(b:bat[:int,:int], _42:int, _55:int) 
    bat.insert(b,nil:int,7);            # 35 _56:void := BKCinsert_bun(b:bat[:int,:int], _42:int, _57:int) 
    bat.insert(b,nil:int,8);            # 36 _58:void := BKCinsert_bun(b:bat[:int,:int], _42:int, _59:int) 
    bat.insert(b,nil:int,9);            # 37 _60:void := BKCinsert_bun(b:bat[:int,:int], _42:int, _61:int) 
    bat.insert(b,nil:int,nil:int);      # 38 _62:void := BKCinsert_bun(b:bat[:int,:int], _42:int, _42:int) 
    c0 := bat.reverse(b);               # 39 c0:bat[:int,:int] := BKCreverse(b:bat[:int,:int]) {G}
    c1 := batcalc.oid(c0);              # 40 c1:bat[:int,:oid] := CMDconvert_int_oid(c0:bat[:int,:int]) {G}
    c := bat.reverse(c1);               # 41 c:bat[:oid,:int] := BKCreverse(c1:bat[:int,:oid]) {G}
    d := bat.reverse(a);                # 42 d:bat[:int,:oid] := BKCreverse(a:bat[:oid,:int]) {G}
    io.print(a);                        # 43 _67:void := IOprint_val(a:bat[:oid,:int]) 
    io.print(d);                        # 44 _68:void := IOprint_val(d:bat[:int,:oid]) 
    io.print(b);                        # 45 _69:void := IOprint_val(b:bat[:int,:int]) 
    io.print(c);                        # 46 _70:void := IOprint_val(c:bat[:oid,:int]) 
    io.print("semijoin tests b,d");     # 47 _71:void := IOprint_val(_72:str) 
    z1 := algebra.semijoin(b,d);        # 48 z1:bat[:int,:int] := ALGsemijoin(b:bat[:int,:int], d:bat[:int,:oid]) {G}
    io.print(z1);                       # 49 _74:void := IOprint_val(z1:bat[:int,:int]) 
    z2 := algebra.semijoin(d,b);        # 50 z2:bat[:int,:oid] := ALGsemijoin(d:bat[:int,:oid], b:bat[:int,:int]) {G}
    io.print(z2);                       # 51 _76:void := IOprint_val(z2:bat[:int,:oid]) 
    z3 := algebra.semijoin(c,a);        # 52 z3:bat[:oid,:int] := ALGsemijoin(c:bat[:oid,:int], a:bat[:oid,:int]) {G}
    io.print(z3);                       # 53 _78:void := IOprint_val(z3:bat[:oid,:int]) 
    z4 := algebra.semijoin(a,c);        # 54 z4:bat[:oid,:int] := ALGsemijoin(a:bat[:oid,:int], c:bat[:oid,:int]) {G}
    io.print(z4);                       # 55 _80:void := IOprint_val(z4:bat[:oid,:int]) 
# (try to) force different semijoin implementations 
    a1 := bat.new(:int,:oid);           # 57 a1:bat[:int,:oid] := CMDBATnew(_3:int, _2:oid) {G}
    bat.insert(a1,1,1@0);               # 58 _83:void := BKCinsert_bun(a1:bat[:int,:oid], _84:int, _85:oid) 
    bat.insert(a1,2,2@0);               # 59 _86:void := BKCinsert_bun(a1:bat[:int,:oid], _87:int, _88:oid) 
    bat.insert(a1,nil:int,nil:oid);     # 60 _89:void := BKCinsert_bun(a1:bat[:int,:oid], _90:int, _91:oid) 
    a1s := algebra.sort(a1);            # 61 a1s:bat[:int,:oid] := ALGhsort(a1:bat[:int,:oid]) {G}
    c1 := bat.new(:int,:oid);           # 62 c1:bat[:int,:oid] := CMDBATnew(_3:int, _2:oid) {G}
    bat.insert(c1,nil:int,nil:oid);     # 63 _93:void := BKCinsert_bun(c1:bat[:int,:oid], _90:int, _91:oid) 
barrier (mloop,i):= language.newRange(1);# 64 (mloop:bit, i:int) := RNGnewRange_int(_84:int) {J68}
    oi := calc.oid(i);                  # 65 oi:oid := CALCint2oid(i:int) 
    bat.insert(c1,i,oi);                # 66 _97:void := BKCinsert_bun(c1:bat[:int,:oid], i:int, oi:oid) 
    redo (mloop,i):= language.nextElement(1,100);# 67 (mloop:bit, i:int) := RNGnextElement_int(_84:int, _98:int) {J65}
exit mloop;                             # 68 mloop:bit 
    c1s := algebra.sort(c1);            # 69 c1s:bat[:int,:oid] := ALGhsort(c1:bat[:int,:oid]) {G}
    io.print("slices");                 # 70 _100:void := IOprint_val(_101:str) 
    io.print(a1s);                      # 71 _102:void := IOprint_val(a1s:bat[:int,:oid]) 
    sl := algebra.slice(c1s,0,1);       # 72 sl:bat[:int,:oid] := ALGslice_int(c1s:bat[:int,:oid], _104:int, _84:int) {G}
    io.print(sl);                       # 73 _105:void := IOprint_val(sl:bat[:int,:oid]) 
    io.print("semijoin tests a1,c1");   # 74 _106:void := IOprint_val(_107:str) 
# binsemijoin 
    e := algebra.semijoin(a1s,c1s);     # 76 e:bat[:int,:oid] := ALGsemijoin(a1s:bat[:int,:oid], c1s:bat[:int,:oid]) {G}
    io.print(e);                        # 77 _110:void := IOprint_val(e:bat[:int,:oid]) 
    f := algebra.semijoin(c1s,a1s);     # 78 f:bat[:int,:oid] := ALGsemijoin(c1s:bat[:int,:oid], a1s:bat[:int,:oid]) {G}
    io.print(f);                        # 79 _112:void := IOprint_val(f:bat[:int,:oid]) 
    bat.setWriteMode(a1s);              # 80 _113:bat[:int,:oid] := BKCsetWriteMode(a1s:bat[:int,:oid]) {G}
    bat.insert(a1s,nil:int,nil:oid);    # 81 _114:void := BKCinsert_bun(a1s:bat[:int,:oid], _90:int, _91:oid) 
    bat.setReadMode(a1s);               # 82 _115:bat[:int,:oid] := BKCsetReadMode(a1s:bat[:int,:oid]) {G}
    bat.setWriteMode(c1s);              # 83 _116:bat[:int,:oid] := BKCsetWriteMode(c1s:bat[:int,:oid]) {G}
    bat.insert(c1s,nil:int,nil:oid);    # 84 _117:void := BKCinsert_bun(c1s:bat[:int,:oid], _90:int, _91:oid) 
    bat.setReadMode(c1s);               # 85 _118:bat[:int,:oid] := BKCsetReadMode(c1s:bat[:int,:oid]) {G}
# hash => kinsertsect & revsemijoin 
#ah:=algebra.copy(a1); 
#bat.accbuild(ah,"hash"); 
#ch:=algebra.copy(c); 
#bat.accbuild(ch,"hash"); 
#k:=algebra.semijoin(ah,ch);io.print(k); 
#l:=algebra.semijoin(ch,ah);io.print(l); 
end main;	# 93  
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  nil	  ]
#-----------------#
# t	h	  # name
# int	void	  # type
#-----------------#
[ 0,	  0@0	  ]
[ 1,	  1@0	  ]
[ nil,	  2@0	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 0,	  0	  ]
[ 0,	  1	  ]
[ 0,	  2	  ]
[ 0,	  3	  ]
[ 0,	  4	  ]
[ 0,	  5	  ]
[ 0,	  6	  ]
[ 0,	  7	  ]
[ 0,	  8	  ]
[ 0,	  9	  ]
[ 0,	  nil	  ]
[ 1,	  0	  ]
[ 1,	  1	  ]
[ 1,	  2	  ]
[ 1,	  3	  ]
[ 1,	  4	  ]
[ 1,	  5	  ]
[ 1,	  6	  ]
[ 1,	  7	  ]
[ 1,	  8	  ]
[ 1,	  9	  ]
[ 1,	  nil	  ]
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
[ nil,	  3	  ]
[ nil,	  4	  ]
[ nil,	  5	  ]
[ nil,	  6	  ]
[ nil,	  7	  ]
[ nil,	  8	  ]
[ nil,	  9	  ]
[ nil,	  nil	  ]
#-----------------#
# t	h	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 0@0,	  1	  ]
[ 0@0,	  2	  ]
[ 0@0,	  3	  ]
[ 0@0,	  4	  ]
[ 0@0,	  5	  ]
[ 0@0,	  6	  ]
[ 0@0,	  7	  ]
[ 0@0,	  8	  ]
[ 0@0,	  9	  ]
[ 0@0,	  nil	  ]
[ 1@0,	  0	  ]
[ 1@0,	  1	  ]
[ 1@0,	  2	  ]
[ 1@0,	  3	  ]
[ 1@0,	  4	  ]
[ 1@0,	  5	  ]
[ 1@0,	  6	  ]
[ 1@0,	  7	  ]
[ 1@0,	  8	  ]
[ 1@0,	  9	  ]
[ 1@0,	  nil	  ]
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
[ nil,	  3	  ]
[ nil,	  4	  ]
[ nil,	  5	  ]
[ nil,	  6	  ]
[ nil,	  7	  ]
[ nil,	  8	  ]
[ nil,	  9	  ]
[ nil,	  nil	  ]
[ "semijoin tests b,d" ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 0,	  0	  ]
[ 0,	  1	  ]
[ 0,	  2	  ]
[ 0,	  3	  ]
[ 0,	  4	  ]
[ 0,	  5	  ]
[ 0,	  6	  ]
[ 0,	  7	  ]
[ 0,	  8	  ]
[ 0,	  9	  ]
[ 0,	  nil	  ]
[ 1,	  0	  ]
[ 1,	  1	  ]
[ 1,	  2	  ]
[ 1,	  3	  ]
[ 1,	  4	  ]
[ 1,	  5	  ]
[ 1,	  6	  ]
[ 1,	  7	  ]
[ 1,	  8	  ]
[ 1,	  9	  ]
[ 1,	  nil	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 0,	  0@0	  ]
[ 1,	  1@0	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 0@0,	  1	  ]
[ 0@0,	  2	  ]
[ 0@0,	  3	  ]
[ 0@0,	  4	  ]
[ 0@0,	  5	  ]
[ 0@0,	  6	  ]
[ 0@0,	  7	  ]
[ 0@0,	  8	  ]
[ 0@0,	  9	  ]
[ 0@0,	  nil	  ]
[ 1@0,	  0	  ]
[ 1@0,	  1	  ]
[ 1@0,	  2	  ]
[ 1@0,	  3	  ]
[ 1@0,	  4	  ]
[ 1@0,	  5	  ]
[ 1@0,	  6	  ]
[ 1@0,	  7	  ]
[ 1@0,	  8	  ]
[ 1@0,	  9	  ]
[ 1@0,	  nil	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ "slices" ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ nil,	  nil	  ]
[ 1,	  1@0	  ]
[ 2,	  2@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ nil,	  nil	  ]
[ 1,	  1@0	  ]
[ "semijoin tests a1,c1" ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 1,	  1@0	  ]
[ 2,	  2@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 1,	  1@0	  ]
[ 2,	  2@0	  ]

# 22:53:06 >  
# 22:53:06 >  Done.
# 22:53:06 >  

