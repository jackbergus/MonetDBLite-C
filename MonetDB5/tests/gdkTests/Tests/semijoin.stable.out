stdout of test 'semijoin` in directory 'tests/gdkTests` itself:


# 22:53:06 >  
# 22:53:06 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=36170 --set monet_prompt= --trace --dbname=mTests_tests_gdkTests  semijoin.mal < /dev/null
# 22:53:06 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_gdkTests
# Visit http://monetdb.cwi.nl/ for further information
#a:=bat.new(:void,:int);
#bat.setSequenceBase(a,0:oid);
#bat.append(a,0);
#bat.append(a,1);
#bat.append(a,nil:int);
#
#b:=bat.new(:int,:int);
#bat.insert(b,0,0);
#bat.insert(b,0,1);
#bat.insert(b,0,2);
#bat.insert(b,0,3);
#bat.insert(b,0,4);
#bat.insert(b,0,5);
#bat.insert(b,0,6);
#bat.insert(b,0,7);
#bat.insert(b,0,8);
#bat.insert(b,0,9);
#bat.insert(b,0,nil:int);
#bat.insert(b,1,0);
#bat.insert(b,1,1);
#bat.insert(b,1,2);
#bat.insert(b,1,3);
#bat.insert(b,1,4);
#bat.insert(b,1,5);
#bat.insert(b,1,6);
#bat.insert(b,1,7);
#bat.insert(b,1,8);
#bat.insert(b,1,9);
#bat.insert(b,1,nil:int);
#bat.insert(b,nil:int,0);
#bat.insert(b,nil:int,1);
#bat.insert(b,nil:int,2);
#bat.insert(b,nil:int,3);
#bat.insert(b,nil:int,4);
#bat.insert(b,nil:int,5);
#bat.insert(b,nil:int,6);
#bat.insert(b,nil:int,7);
#bat.insert(b,nil:int,8);
#bat.insert(b,nil:int,9);
#bat.insert(b,nil:int,nil:int);
#
#c0:=bat.reverse(b);
#c1:= batcalc.oid(c0);
#c:= bat.reverse(c1);
#d:=bat.reverse(a);
#
#io.print(a);
#io.print(d);
#io.print(b);
#io.print(c);
#
#io.print("semijoin tests b,d");
#z1:= algebra.semijoin(b,d); io.print(z1);
#z2:= algebra.semijoin(d,b); io.print(z2);
#
#z3:= algebra.semijoin(c,a); io.print(z3);
#z4:= algebra.semijoin(a,c); io.print(z4);
#
## (try to) force different semijoin implementations
#
#a1:= bat.new(:int,:oid);
#bat.insert(a1,1,1@0);
#bat.insert(a1,2,2@0);
#bat.insert(a1,nil:int,nil:oid);
#a1s:= algebra.sort(a1);
#
#c1:= bat.new(:int,:oid);
#bat.insert(c1,nil:int,nil:oid);
#barrier (mloop,i):= language.newRange(1);
#	oi:= calc.oid(i);
#	bat.insert(c1,i, oi);
#redo (mloop,i):= language.nextElement(1,100);
#exit mloop;
#c1s:= algebra.sort(c1);
#
#io.print("slices");
#io.print(a1s);
#sl:= algebra.slice(c1s,0,1);
#io.print(sl);
#
#io.print("semijoin tests a1,c1");
## binsemijoin
#e:= algebra.semijoin(a1s,c1s);io.print(e);
#f:= algebra.semijoin(c1s,a1s);io.print(f);
#
#bat.setWriteMode(a1s);
#bat.insert(a1s,nil:int,nil:oid);
#bat.setReadMode(a1s);
#bat.setWriteMode(c1s);
#bat.insert(c1s,nil:int,nil:oid);
#bat.setReadMode(c1s);
#
## hash => kinsertsect & revsemijoin
##ah:=algebra.copy(a1);
##bat.accbuild(ah,"hash");
##ch:=algebra.copy(c);
##bat.accbuild(ch,"hash");
##k:=algebra.semijoin(ah,ch);io.print(k);
##l:=algebra.semijoin(ch,ah);io.print(l);
#
function user.main():void;	# 0  (main:void)
    a := bat.new(:oid,:int);	# 1 CMDBATnew (a:bat[:oid,:int])<-(_2:oid)(_3:int)
    bat.append(a,0);	# 2 BKCappend_val_wrap (_4:void)<-(a:bat[:oid,:int])(_5:int)
    bat.append(a,1);	# 3 BKCappend_val_wrap (_6:void)<-(a:bat[:oid,:int])(_7:int)
    bat.append(a,nil:int);	# 4 BKCappend_val_wrap (_8:void)<-(a:bat[:oid,:int])(_9:int)
    b := bat.new(:int,:int);	# 5 CMDBATnew (b:bat[:int,:int])<-(_3:int)(_3:int)
    bat.insert(b,0,0);	# 6 BKCinsert_bun (_11:void)<-(b:bat[:int,:int])(_5:int)(_5:int)
    bat.insert(b,0,1);	# 7 BKCinsert_bun (_12:void)<-(b:bat[:int,:int])(_5:int)(_7:int)
    bat.insert(b,0,2);	# 8 BKCinsert_bun (_13:void)<-(b:bat[:int,:int])(_5:int)(_14:int)
    bat.insert(b,0,3);	# 9 BKCinsert_bun (_15:void)<-(b:bat[:int,:int])(_5:int)(_16:int)
    bat.insert(b,0,4);	# 10 BKCinsert_bun (_17:void)<-(b:bat[:int,:int])(_5:int)(_18:int)
    bat.insert(b,0,5);	# 11 BKCinsert_bun (_19:void)<-(b:bat[:int,:int])(_5:int)(_20:int)
    bat.insert(b,0,6);	# 12 BKCinsert_bun (_21:void)<-(b:bat[:int,:int])(_5:int)(_22:int)
    bat.insert(b,0,7);	# 13 BKCinsert_bun (_23:void)<-(b:bat[:int,:int])(_5:int)(_24:int)
    bat.insert(b,0,8);	# 14 BKCinsert_bun (_25:void)<-(b:bat[:int,:int])(_5:int)(_26:int)
    bat.insert(b,0,9);	# 15 BKCinsert_bun (_27:void)<-(b:bat[:int,:int])(_5:int)(_28:int)
    bat.insert(b,0,nil:int);	# 16 BKCinsert_bun (_29:void)<-(b:bat[:int,:int])(_5:int)(_9:int)
    bat.insert(b,1,0);	# 17 BKCinsert_bun (_30:void)<-(b:bat[:int,:int])(_7:int)(_5:int)
    bat.insert(b,1,1);	# 18 BKCinsert_bun (_31:void)<-(b:bat[:int,:int])(_7:int)(_7:int)
    bat.insert(b,1,2);	# 19 BKCinsert_bun (_32:void)<-(b:bat[:int,:int])(_7:int)(_14:int)
    bat.insert(b,1,3);	# 20 BKCinsert_bun (_33:void)<-(b:bat[:int,:int])(_7:int)(_16:int)
    bat.insert(b,1,4);	# 21 BKCinsert_bun (_34:void)<-(b:bat[:int,:int])(_7:int)(_18:int)
    bat.insert(b,1,5);	# 22 BKCinsert_bun (_35:void)<-(b:bat[:int,:int])(_7:int)(_20:int)
    bat.insert(b,1,6);	# 23 BKCinsert_bun (_36:void)<-(b:bat[:int,:int])(_7:int)(_22:int)
    bat.insert(b,1,7);	# 24 BKCinsert_bun (_37:void)<-(b:bat[:int,:int])(_7:int)(_24:int)
    bat.insert(b,1,8);	# 25 BKCinsert_bun (_38:void)<-(b:bat[:int,:int])(_7:int)(_26:int)
    bat.insert(b,1,9);	# 26 BKCinsert_bun (_39:void)<-(b:bat[:int,:int])(_40:int)(_28:int)
    bat.insert(b,1,nil:int);	# 27 BKCinsert_bun (_41:void)<-(b:bat[:int,:int])(_40:int)(_42:int)
    bat.insert(b,nil:int,0);	# 28 BKCinsert_bun (_43:void)<-(b:bat[:int,:int])(_42:int)(_44:int)
    bat.insert(b,nil:int,1);	# 29 BKCinsert_bun (_45:void)<-(b:bat[:int,:int])(_42:int)(_40:int)
    bat.insert(b,nil:int,2);	# 30 BKCinsert_bun (_46:void)<-(b:bat[:int,:int])(_42:int)(_47:int)
    bat.insert(b,nil:int,3);	# 31 BKCinsert_bun (_48:void)<-(b:bat[:int,:int])(_42:int)(_49:int)
    bat.insert(b,nil:int,4);	# 32 BKCinsert_bun (_50:void)<-(b:bat[:int,:int])(_42:int)(_51:int)
    bat.insert(b,nil:int,5);	# 33 BKCinsert_bun (_52:void)<-(b:bat[:int,:int])(_42:int)(_53:int)
    bat.insert(b,nil:int,6);	# 34 BKCinsert_bun (_54:void)<-(b:bat[:int,:int])(_42:int)(_55:int)
    bat.insert(b,nil:int,7);	# 35 BKCinsert_bun (_56:void)<-(b:bat[:int,:int])(_42:int)(_57:int)
    bat.insert(b,nil:int,8);	# 36 BKCinsert_bun (_58:void)<-(b:bat[:int,:int])(_42:int)(_59:int)
    bat.insert(b,nil:int,9);	# 37 BKCinsert_bun (_60:void)<-(b:bat[:int,:int])(_42:int)(_61:int)
    bat.insert(b,nil:int,nil:int);	# 38 BKCinsert_bun (_62:void)<-(b:bat[:int,:int])(_42:int)(_42:int)
    c0 := bat.reverse(b);	# 39 BKCreverse (c0:bat[:int,:int])<-(b:bat[:int,:int])
    c1 := batcalc.oid(c0);	# 40 CMDconvert_int_oid (c1:bat[:int,:oid])<-(c0:bat[:int,:int])
    c := bat.reverse(c1);	# 41 BKCreverse (c:bat[:oid,:int])<-(c1:bat[:int,:oid])
    d := bat.reverse(a);	# 42 BKCreverse (d:bat[:int,:oid])<-(a:bat[:oid,:int])
    io.print(a);	# 43 IOprint_val (_67:void)<-(a:bat[:oid,:int])
    io.print(d);	# 44 IOprint_val (_68:void)<-(d:bat[:int,:oid])
    io.print(b);	# 45 IOprint_val (_69:void)<-(b:bat[:int,:int])
    io.print(c);	# 46 IOprint_val (_70:void)<-(c:bat[:oid,:int])
    io.print("semijoin tests b,d");	# 47 IOprint_val (_71:void)<-(_72:str)
    z1 := algebra.semijoin(b,d);	# 48 ALGsemijoin (z1:bat[:int,:int])<-(b:bat[:int,:int])(d:bat[:int,:oid])
    io.print(z1);	# 49 IOprint_val (_74:void)<-(z1:bat[:int,:int])
    z2 := algebra.semijoin(d,b);	# 50 ALGsemijoin (z2:bat[:int,:oid])<-(d:bat[:int,:oid])(b:bat[:int,:int])
    io.print(z2);	# 51 IOprint_val (_76:void)<-(z2:bat[:int,:oid])
    z3 := algebra.semijoin(c,a);	# 52 ALGsemijoin (z3:bat[:oid,:int])<-(c:bat[:oid,:int])(a:bat[:oid,:int])
    io.print(z3);	# 53 IOprint_val (_78:void)<-(z3:bat[:oid,:int])
    z4 := algebra.semijoin(a,c);	# 54 ALGsemijoin (z4:bat[:oid,:int])<-(a:bat[:oid,:int])(c:bat[:oid,:int])
    io.print(z4);	# 55 IOprint_val (_80:void)<-(z4:bat[:oid,:int])
# (try to) force different semijoin implementations 	# 56  (_81:str)
    a1 := bat.new(:int,:oid);	# 57 CMDBATnew (a1:bat[:int,:oid])<-(_3:int)(_2:oid)
    bat.insert(a1,1,1@0);	# 58 BKCinsert_bun (_83:void)<-(a1:bat[:int,:oid])(_84:int)(_85:oid)
    bat.insert(a1,2,2@0);	# 59 BKCinsert_bun (_86:void)<-(a1:bat[:int,:oid])(_87:int)(_88:oid)
    bat.insert(a1,nil:int,nil:oid);	# 60 BKCinsert_bun (_89:void)<-(a1:bat[:int,:oid])(_90:int)(_91:oid)
    a1s := algebra.sort(a1);	# 61 ALGhsort (a1s:bat[:int,:oid])<-(a1:bat[:int,:oid])
    c1 := bat.new(:int,:oid);	# 62 CMDBATnew (c1:bat[:int,:oid])<-(_3:int)(_2:oid)
    bat.insert(c1,nil:int,nil:oid);	# 63 BKCinsert_bun (_93:void)<-(c1:bat[:int,:oid])(_90:int)(_91:oid)
barrier (mloop,i):= language.newRange(1);	# 64 RNGnewRange_int (mloop:bit)(i:int)<-(_84:int) jump 68
    oi := calc.oid(i);	# 65 CALCint2oid (oi:oid)<-(i:int)
    bat.insert(c1,i,oi);	# 66 BKCinsert_bun (_97:void)<-(c1:bat[:int,:oid])(i:int)(oi:oid)
    redo (mloop,i):= language.nextElement(1,100);	# 67 RNGnextElement_int (mloop:bit)(i:int)<-(_84:int)(_98:int) jump 65
exit mloop;	# 68  (mloop:bit)
    c1s := algebra.sort(c1);	# 69 ALGhsort (c1s:bat[:int,:oid])<-(c1:bat[:int,:oid])
    io.print("slices");	# 70 IOprint_val (_100:void)<-(_101:str)
    io.print(a1s);	# 71 IOprint_val (_102:void)<-(a1s:bat[:int,:oid])
    sl := algebra.slice(c1s,0,1);	# 72 ALGslice_int (sl:bat[:int,:oid])<-(c1s:bat[:int,:oid])(_104:int)(_84:int)
    io.print(sl);	# 73 IOprint_val (_105:void)<-(sl:bat[:int,:oid])
    io.print("semijoin tests a1,c1");	# 74 IOprint_val (_106:void)<-(_107:str)
# binsemijoin 	# 75  (_108:str)
    e := algebra.semijoin(a1s,c1s);	# 76 ALGsemijoin (e:bat[:int,:oid])<-(a1s:bat[:int,:oid])(c1s:bat[:int,:oid])
    io.print(e);	# 77 IOprint_val (_110:void)<-(e:bat[:int,:oid])
    f := algebra.semijoin(c1s,a1s);	# 78 ALGsemijoin (f:bat[:int,:oid])<-(c1s:bat[:int,:oid])(a1s:bat[:int,:oid])
    io.print(f);	# 79 IOprint_val (_112:void)<-(f:bat[:int,:oid])
    bat.setWriteMode(a1s);	# 80 BKCsetWriteMode (_113:bat[:int,:oid])<-(a1s:bat[:int,:oid])
    bat.insert(a1s,nil:int,nil:oid);	# 81 BKCinsert_bun (_114:void)<-(a1s:bat[:int,:oid])(_90:int)(_91:oid)
    bat.setReadMode(a1s);	# 82 BKCsetReadMode (_115:bat[:int,:oid])<-(a1s:bat[:int,:oid])
    bat.setWriteMode(c1s);	# 83 BKCsetWriteMode (_116:bat[:int,:oid])<-(c1s:bat[:int,:oid])
    bat.insert(c1s,nil:int,nil:oid);	# 84 BKCinsert_bun (_117:void)<-(c1s:bat[:int,:oid])(_90:int)(_91:oid)
    bat.setReadMode(c1s);	# 85 BKCsetReadMode (_118:bat[:int,:oid])<-(c1s:bat[:int,:oid])
# hash => kinsertsect & revsemijoin 	# 86  (_119:str)
#ah:=algebra.copy(a1); 	# 87  (_120:str)
#bat.accbuild(ah,"hash"); 	# 88  (_121:str)
#ch:=algebra.copy(c); 	# 89  (_122:str)
#bat.accbuild(ch,"hash"); 	# 90  (_123:str)
#k:=algebra.semijoin(ah,ch);io.print(k); 	# 91  (_124:str)
#l:=algebra.semijoin(ch,ah);io.print(l); 	# 92  (_125:str)
end main;	# 93  
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  nil	  ]
#-----------------#
# t	h	  # name
# int	void	  # type
#-----------------#
[ 0,	  0@0	  ]
[ 1,	  1@0	  ]
[ nil,	  2@0	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 0,	  0	  ]
[ 0,	  1	  ]
[ 0,	  2	  ]
[ 0,	  3	  ]
[ 0,	  4	  ]
[ 0,	  5	  ]
[ 0,	  6	  ]
[ 0,	  7	  ]
[ 0,	  8	  ]
[ 0,	  9	  ]
[ 0,	  nil	  ]
[ 1,	  0	  ]
[ 1,	  1	  ]
[ 1,	  2	  ]
[ 1,	  3	  ]
[ 1,	  4	  ]
[ 1,	  5	  ]
[ 1,	  6	  ]
[ 1,	  7	  ]
[ 1,	  8	  ]
[ 1,	  9	  ]
[ 1,	  nil	  ]
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
[ nil,	  3	  ]
[ nil,	  4	  ]
[ nil,	  5	  ]
[ nil,	  6	  ]
[ nil,	  7	  ]
[ nil,	  8	  ]
[ nil,	  9	  ]
[ nil,	  nil	  ]
#-----------------#
# t	h	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 0@0,	  1	  ]
[ 0@0,	  2	  ]
[ 0@0,	  3	  ]
[ 0@0,	  4	  ]
[ 0@0,	  5	  ]
[ 0@0,	  6	  ]
[ 0@0,	  7	  ]
[ 0@0,	  8	  ]
[ 0@0,	  9	  ]
[ 0@0,	  nil	  ]
[ 1@0,	  0	  ]
[ 1@0,	  1	  ]
[ 1@0,	  2	  ]
[ 1@0,	  3	  ]
[ 1@0,	  4	  ]
[ 1@0,	  5	  ]
[ 1@0,	  6	  ]
[ 1@0,	  7	  ]
[ 1@0,	  8	  ]
[ 1@0,	  9	  ]
[ 1@0,	  nil	  ]
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
[ nil,	  3	  ]
[ nil,	  4	  ]
[ nil,	  5	  ]
[ nil,	  6	  ]
[ nil,	  7	  ]
[ nil,	  8	  ]
[ nil,	  9	  ]
[ nil,	  nil	  ]
[ "semijoin tests b,d" ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 0,	  0	  ]
[ 0,	  1	  ]
[ 0,	  2	  ]
[ 0,	  3	  ]
[ 0,	  4	  ]
[ 0,	  5	  ]
[ 0,	  6	  ]
[ 0,	  7	  ]
[ 0,	  8	  ]
[ 0,	  9	  ]
[ 0,	  nil	  ]
[ 1,	  0	  ]
[ 1,	  1	  ]
[ 1,	  2	  ]
[ 1,	  3	  ]
[ 1,	  4	  ]
[ 1,	  5	  ]
[ 1,	  6	  ]
[ 1,	  7	  ]
[ 1,	  8	  ]
[ 1,	  9	  ]
[ 1,	  nil	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 0,	  0@0	  ]
[ 1,	  1@0	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 0@0,	  1	  ]
[ 0@0,	  2	  ]
[ 0@0,	  3	  ]
[ 0@0,	  4	  ]
[ 0@0,	  5	  ]
[ 0@0,	  6	  ]
[ 0@0,	  7	  ]
[ 0@0,	  8	  ]
[ 0@0,	  9	  ]
[ 0@0,	  nil	  ]
[ 1@0,	  0	  ]
[ 1@0,	  1	  ]
[ 1@0,	  2	  ]
[ 1@0,	  3	  ]
[ 1@0,	  4	  ]
[ 1@0,	  5	  ]
[ 1@0,	  6	  ]
[ 1@0,	  7	  ]
[ 1@0,	  8	  ]
[ 1@0,	  9	  ]
[ 1@0,	  nil	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ "slices" ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ nil,	  nil	  ]
[ 1,	  1@0	  ]
[ 2,	  2@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ nil,	  nil	  ]
[ 1,	  1@0	  ]
[ "semijoin tests a1,c1" ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 1,	  1@0	  ]
[ 2,	  2@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 1,	  1@0	  ]
[ 2,	  2@0	  ]

# 22:53:06 >  
# 22:53:06 >  Done.
# 22:53:06 >  

