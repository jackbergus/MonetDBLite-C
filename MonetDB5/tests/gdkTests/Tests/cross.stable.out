stdout of test 'cross` in directory 'tests/gdkTests` itself:


# 09:01:02 >  
# 09:01:02 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=31140 --set monet_prompt= --trace --dbname=mTests_tests_gdkTests  cross.mal < /dev/null
# 09:01:02 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_gdkTests
# Visit http://monetdb.cwi.nl/ for further information
#a:=bat.new(:void,:int);
#bat.setSequenceBase(a,0@0);
#ar:= bat.reverse(a);
#io.print(ar);
#b:=bat.new(:void,:int);
#bat.setSequenceBase(b,0@0);
#io.print(b);
#
#ar:= bat.reverse(a);
#c:= algebra.crossproduct(ar,ar);
#io.print(c);
#bb:= algebra.crossproduct(b,b);
#io.print(bb);
#ab:= algebra.crossproduct(ar,b);
#io.print(ab);
#ba:= algebra.crossproduct(b,ar);
#io.print(ba);
#
#bat.append(a,1);
#ar:= bat.reverse(a);
#io.print(ar);
#
#ar:= bat.reverse(a);
#c:= algebra.crossproduct(ar,ar);
#io.print(c);
#bb:= algebra.crossproduct(b,b);
#io.print(bb);
#ab:= algebra.crossproduct(ar,b);
#io.print(ab);
#ba:= algebra.crossproduct(b,ar);
#io.print(ba);
#
#bat.append(b,11);
#io.print(b);
#
#ar:= bat.reverse(a);
#c:= algebra.crossproduct(ar,ar);
#io.print(c);
#bb:= algebra.crossproduct(b,b);
#io.print(bb);
#ab:= algebra.crossproduct(ar,b);
#io.print(ab);
#ba:= algebra.crossproduct(b,ar);
#io.print(ba);
#
#bat.append(a,2);
#ar:= bat.reverse(a);
#c:= algebra.crossproduct(ar,ar);
#io.print(c);
#bb:= algebra.crossproduct(b,b);
#io.print(bb);
#ab:= algebra.crossproduct(ar,b);
#io.print(ab);
#ba:= algebra.crossproduct(b,ar);
#io.print(ba);
#
#bat.append(b,22);
#io.print(b);
#
#ar:= bat.reverse(a);
#c:= algebra.crossproduct(ar,ar);
#io.print(c);
#bb:= algebra.crossproduct(b,b);
#io.print(bb);
#ab:= algebra.crossproduct(ar,b);
#io.print(ab);
#ba:= algebra.crossproduct(b,ar);
#io.print(ba);
#
function user.main():void;	# 0  (main:void)
    a := bat.new(:void,:int);	# 1 CMDBATnew (a:bat[:void,:int])<-(_2:void)(_3:int)
    bat.setSequenceBase(a,0@0);	# 2 BKCsetSequenceBase (_4:bat[:void,:int])<-(a:bat[:void,:int])(_5:oid)
    ar := bat.reverse(a);	# 3 BKCreverse (ar:bat[:int,:void])<-(a:bat[:void,:int])
    io.print(ar);	# 4 IOprint_val (_7:int)<-(ar:bat[:int,:void])
    b := bat.new(:void,:int);	# 5 CMDBATnew (b:bat[:void,:int])<-(_2:void)(_3:int)
    bat.setSequenceBase(b,0@0);	# 6 BKCsetSequenceBase (_9:bat[:void,:int])<-(b:bat[:void,:int])(_5:oid)
    io.print(b);	# 7 IOprint_val (_10:int)<-(b:bat[:void,:int])
    ar := bat.reverse(a);	# 8 BKCreverse (ar:bat[:int,:void])<-(a:bat[:void,:int])
    c := algebra.crossproduct(ar,ar);	# 9 ALGcross (c:bat[:int,:void])<-(ar:bat[:int,:void])(ar:bat[:int,:void])
    io.print(c);	# 10 IOprint_val (_12:int)<-(c:bat[:int,:void])
    bb := algebra.crossproduct(b,b);	# 11 ALGcross (bb:bat[:void,:int])<-(b:bat[:void,:int])(b:bat[:void,:int])
    io.print(bb);	# 12 IOprint_val (_14:int)<-(bb:bat[:void,:int])
    ab := algebra.crossproduct(ar,b);	# 13 ALGcross (ab:bat[:int,:int])<-(ar:bat[:int,:void])(b:bat[:void,:int])
    io.print(ab);	# 14 IOprint_val (_16:int)<-(ab:bat[:int,:int])
    ba := algebra.crossproduct(b,ar);	# 15 ALGcross (ba:bat[:void,:void])<-(b:bat[:void,:int])(ar:bat[:int,:void])
    io.print(ba);	# 16 IOprint_val (_18:int)<-(ba:bat[:void,:void])
    bat.append(a,1);	# 17 BKCappend_val_wrap (_19:void)<-(a:bat[:void,:int])(_20:int)
    ar := bat.reverse(a);	# 18 BKCreverse (ar:bat[:int,:void])<-(a:bat[:void,:int])
    io.print(ar);	# 19 IOprint_val (_21:int)<-(ar:bat[:int,:void])
    ar := bat.reverse(a);	# 20 BKCreverse (ar:bat[:int,:void])<-(a:bat[:void,:int])
    c := algebra.crossproduct(ar,ar);	# 21 ALGcross (c:bat[:int,:void])<-(ar:bat[:int,:void])(ar:bat[:int,:void])
    io.print(c);	# 22 IOprint_val (_22:int)<-(c:bat[:int,:void])
    bb := algebra.crossproduct(b,b);	# 23 ALGcross (bb:bat[:void,:int])<-(b:bat[:void,:int])(b:bat[:void,:int])
    io.print(bb);	# 24 IOprint_val (_23:int)<-(bb:bat[:void,:int])
    ab := algebra.crossproduct(ar,b);	# 25 ALGcross (ab:bat[:int,:int])<-(ar:bat[:int,:void])(b:bat[:void,:int])
    io.print(ab);	# 26 IOprint_val (_24:int)<-(ab:bat[:int,:int])
    ba := algebra.crossproduct(b,ar);	# 27 ALGcross (ba:bat[:void,:void])<-(b:bat[:void,:int])(ar:bat[:int,:void])
    io.print(ba);	# 28 IOprint_val (_25:int)<-(ba:bat[:void,:void])
    bat.append(b,11);	# 29 BKCappend_val_wrap (_26:void)<-(b:bat[:void,:int])(_27:int)
    io.print(b);	# 30 IOprint_val (_28:int)<-(b:bat[:void,:int])
    ar := bat.reverse(a);	# 31 BKCreverse (ar:bat[:int,:void])<-(a:bat[:void,:int])
    c := algebra.crossproduct(ar,ar);	# 32 ALGcross (c:bat[:int,:void])<-(ar:bat[:int,:void])(ar:bat[:int,:void])
    io.print(c);	# 33 IOprint_val (_29:int)<-(c:bat[:int,:void])
    bb := algebra.crossproduct(b,b);	# 34 ALGcross (bb:bat[:void,:int])<-(b:bat[:void,:int])(b:bat[:void,:int])
    io.print(bb);	# 35 IOprint_val (_30:int)<-(bb:bat[:void,:int])
    ab := algebra.crossproduct(ar,b);	# 36 ALGcross (ab:bat[:int,:int])<-(ar:bat[:int,:void])(b:bat[:void,:int])
    io.print(ab);	# 37 IOprint_val (_31:int)<-(ab:bat[:int,:int])
    ba := algebra.crossproduct(b,ar);	# 38 ALGcross (ba:bat[:void,:void])<-(b:bat[:void,:int])(ar:bat[:int,:void])
    io.print(ba);	# 39 IOprint_val (_32:int)<-(ba:bat[:void,:void])
    bat.append(a,2);	# 40 BKCappend_val_wrap (_33:void)<-(a:bat[:void,:int])(_34:int)
    ar := bat.reverse(a);	# 41 BKCreverse (ar:bat[:int,:void])<-(a:bat[:void,:int])
    io.print(ar);	# 42 IOprint_val (_35:int)<-(ar:bat[:int,:void])
    ar := bat.reverse(a);	# 43 BKCreverse (ar:bat[:int,:void])<-(a:bat[:void,:int])
    c := algebra.crossproduct(ar,ar);	# 44 ALGcross (c:bat[:int,:void])<-(ar:bat[:int,:void])(ar:bat[:int,:void])
    io.print(c);	# 45 IOprint_val (_36:int)<-(c:bat[:int,:void])
    bb := algebra.crossproduct(b,b);	# 46 ALGcross (bb:bat[:void,:int])<-(b:bat[:void,:int])(b:bat[:void,:int])
    io.print(bb);	# 47 IOprint_val (_37:int)<-(bb:bat[:void,:int])
    ab := algebra.crossproduct(ar,b);	# 48 ALGcross (ab:bat[:int,:int])<-(ar:bat[:int,:void])(b:bat[:void,:int])
    io.print(ab);	# 49 IOprint_val (_38:int)<-(ab:bat[:int,:int])
    ba := algebra.crossproduct(b,ar);	# 50 ALGcross (ba:bat[:void,:void])<-(b:bat[:void,:int])(ar:bat[:int,:void])
    io.print(ba);	# 51 IOprint_val (_39:int)<-(ba:bat[:void,:void])
    bat.append(b,22);	# 52 BKCappend_val_wrap (_40:void)<-(b:bat[:void,:int])(_41:int)
    io.print(b);	# 53 IOprint_val (_42:int)<-(b:bat[:void,:int])
    ar := bat.reverse(a);	# 54 BKCreverse (ar:bat[:int,:void])<-(a:bat[:void,:int])
    c := algebra.crossproduct(ar,ar);	# 55 ALGcross (c:bat[:int,:void])<-(ar:bat[:int,:void])(ar:bat[:int,:void])
    io.print(c);	# 56 IOprint_val (_43:int)<-(c:bat[:int,:void])
    bb := algebra.crossproduct(b,b);	# 57 ALGcross (bb:bat[:void,:int])<-(b:bat[:void,:int])(b:bat[:void,:int])
    io.print(bb);	# 58 IOprint_val (_44:int)<-(bb:bat[:void,:int])
    ab := algebra.crossproduct(ar,b);	# 59 ALGcross (ab:bat[:int,:int])<-(ar:bat[:int,:void])(b:bat[:void,:int])
    io.print(ab);	# 60 IOprint_val (_45:int)<-(ab:bat[:int,:int])
    ba := algebra.crossproduct(b,ar);	# 61 ALGcross (ba:bat[:void,:void])<-(b:bat[:void,:int])(ar:bat[:int,:void])
    io.print(ba);	# 62 IOprint_val (_46:int)<-(ba:bat[:void,:void])
end main;	# 63  
#-----------------#
# t	h	  # name
# int	void	  # type
#-----------------#
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	oid	  # type
#-----------------#
#-----------------#
# t	h	  # name
# int	void	  # type
#-----------------#
[ 1,	  0@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 1,	  0@0	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	oid	  # type
#-----------------#
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  11	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 1,	  0@0	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  11	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  11	  ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  0@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 1,	  0@0	  ]
[ 2,	  1@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 1,	  0@0	  ]
[ 1,	  1@0	  ]
[ 2,	  0@0	  ]
[ 2,	  1@0	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  11	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  11	  ]
[ 2,	  11	  ]
#-----------------#
# t	h	  # name
# oid	void	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ 0@0,	  1@0	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  11	  ]
[ 1@0,	  22	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 1,	  0@0	  ]
[ 1,	  1@0	  ]
[ 2,	  0@0	  ]
[ 2,	  1@0	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  11	  ]
[ 0@0,	  22	  ]
[ 1@0,	  11	  ]
[ 1@0,	  22	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  11	  ]
[ 1,	  22	  ]
[ 2,	  11	  ]
[ 2,	  22	  ]
#-----------------#
# h	t	  # name
# oid	oid	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ 0@0,	  1@0	  ]
[ 1@0,	  0@0	  ]
[ 1@0,	  1@0	  ]

# 09:01:02 >  
# 09:01:02 >  Done.
# 09:01:02 >  

