stdout of test 'cross` in directory 'tests/gdkTests` itself:


# 09:01:02 >  
# 09:01:02 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=31140 --set monet_prompt= --trace --dbname=mTests_tests_gdkTests  cross.mal < /dev/null
# 09:01:02 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_gdkTests
# Visit http://monetdb.cwi.nl/ for further information
#a:=bat.new(:void,:int);
#bat.setSequenceBase(a,0@0);
#ar:= bat.reverse(a);
#io.print(ar);
#b:=bat.new(:void,:int);
#bat.setSequenceBase(b,0@0);
#io.print(b);
#
#ar:= bat.reverse(a);
#c:= algebra.crossproduct(ar,ar);
#io.print(c);
#bb:= algebra.crossproduct(b,b);
#io.print(bb);
#ab:= algebra.crossproduct(ar,b);
#io.print(ab);
#ba:= algebra.crossproduct(b,ar);
#io.print(ba);
#
#bat.append(a,1);
#ar:= bat.reverse(a);
#io.print(ar);
#
#ar:= bat.reverse(a);
#c:= algebra.crossproduct(ar,ar);
#io.print(c);
#bb:= algebra.crossproduct(b,b);
#io.print(bb);
#ab:= algebra.crossproduct(ar,b);
#io.print(ab);
#ba:= algebra.crossproduct(b,ar);
#io.print(ba);
#
#bat.append(b,11);
#io.print(b);
#
#ar:= bat.reverse(a);
#c:= algebra.crossproduct(ar,ar);
#io.print(c);
#bb:= algebra.crossproduct(b,b);
#io.print(bb);
#ab:= algebra.crossproduct(ar,b);
#io.print(ab);
#ba:= algebra.crossproduct(b,ar);
#io.print(ba);
#
#bat.append(a,2);
#ar:= bat.reverse(a);
#c:= algebra.crossproduct(ar,ar);
#io.print(c);
#bb:= algebra.crossproduct(b,b);
#io.print(bb);
#ab:= algebra.crossproduct(ar,b);
#io.print(ab);
#ba:= algebra.crossproduct(b,ar);
#io.print(ba);
#
#bat.append(b,22);
#io.print(b);
#
#ar:= bat.reverse(a);
#c:= algebra.crossproduct(ar,ar);
#io.print(c);
#bb:= algebra.crossproduct(b,b);
#io.print(bb);
#ab:= algebra.crossproduct(ar,b);
#io.print(ab);
#ba:= algebra.crossproduct(b,ar);
#io.print(ba);
#
function user.main():void;              #  0 main:void := user.main() {G}
    a := bat.new(:oid,:int);            #  1 a:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    ar := bat.reverse(a);               #  2 ar:bat[:int,:oid] := BKCreverse(a:bat[:oid,:int]) {G}
    io.print(ar);                       #  3 _5:void := IOprint_val(ar:bat[:int,:oid]) 
    b := bat.new(:oid,:int);            #  4 b:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    io.print(b);                        #  5 _7:void := IOprint_val(b:bat[:oid,:int]) 
    ar := bat.reverse(a);               #  6 ar:bat[:int,:oid] := BKCreverse(a:bat[:oid,:int]) {G}
    c := algebra.crossproduct(ar,ar);   #  7 c:bat[:int,:oid] := ALGcross(ar:bat[:int,:oid], ar:bat[:int,:oid]) {G}
    io.print(c);                        #  8 _9:void := IOprint_val(c:bat[:int,:oid]) 
    bb := algebra.crossproduct(b,b);    #  9 bb:bat[:oid,:int] := ALGcross(b:bat[:oid,:int], b:bat[:oid,:int]) {G}
    io.print(bb);                       # 10 _11:void := IOprint_val(bb:bat[:oid,:int]) 
    ab := algebra.crossproduct(ar,b);   # 11 ab:bat[:int,:int] := ALGcross(ar:bat[:int,:oid], b:bat[:oid,:int]) {G}
    io.print(ab);                       # 12 _13:void := IOprint_val(ab:bat[:int,:int]) 
    ba := algebra.crossproduct(b,ar);   # 13 ba:bat[:oid,:oid] := ALGcross(b:bat[:oid,:int], ar:bat[:int,:oid]) {G}
    io.print(ba);                       # 14 _15:void := IOprint_val(ba:bat[:oid,:oid]) 
    bat.append(a,1);                    # 15 _16:void := BKCappend_val_wrap(a:bat[:oid,:int], _17:int) 
    ar := bat.reverse(a);               # 16 ar:bat[:int,:oid] := BKCreverse(a:bat[:oid,:int]) {G}
    io.print(ar);                       # 17 _18:void := IOprint_val(ar:bat[:int,:oid]) 
    ar := bat.reverse(a);               # 18 ar:bat[:int,:oid] := BKCreverse(a:bat[:oid,:int]) {G}
    c := algebra.crossproduct(ar,ar);   # 19 c:bat[:int,:oid] := ALGcross(ar:bat[:int,:oid], ar:bat[:int,:oid]) {G}
    io.print(c);                        # 20 _19:void := IOprint_val(c:bat[:int,:oid]) 
    bb := algebra.crossproduct(b,b);    # 21 bb:bat[:oid,:int] := ALGcross(b:bat[:oid,:int], b:bat[:oid,:int]) {G}
    io.print(bb);                       # 22 _20:void := IOprint_val(bb:bat[:oid,:int]) 
    ab := algebra.crossproduct(ar,b);   # 23 ab:bat[:int,:int] := ALGcross(ar:bat[:int,:oid], b:bat[:oid,:int]) {G}
    io.print(ab);                       # 24 _21:void := IOprint_val(ab:bat[:int,:int]) 
    ba := algebra.crossproduct(b,ar);   # 25 ba:bat[:oid,:oid] := ALGcross(b:bat[:oid,:int], ar:bat[:int,:oid]) {G}
    io.print(ba);                       # 26 _22:void := IOprint_val(ba:bat[:oid,:oid]) 
    bat.append(b,11);                   # 27 _23:void := BKCappend_val_wrap(b:bat[:oid,:int], _24:int) 
    io.print(b);                        # 28 _25:void := IOprint_val(b:bat[:oid,:int]) 
    ar := bat.reverse(a);               # 29 ar:bat[:int,:oid] := BKCreverse(a:bat[:oid,:int]) {G}
    c := algebra.crossproduct(ar,ar);   # 30 c:bat[:int,:oid] := ALGcross(ar:bat[:int,:oid], ar:bat[:int,:oid]) {G}
    io.print(c);                        # 31 _26:void := IOprint_val(c:bat[:int,:oid]) 
    bb := algebra.crossproduct(b,b);    # 32 bb:bat[:oid,:int] := ALGcross(b:bat[:oid,:int], b:bat[:oid,:int]) {G}
    io.print(bb);                       # 33 _27:void := IOprint_val(bb:bat[:oid,:int]) 
    ab := algebra.crossproduct(ar,b);   # 34 ab:bat[:int,:int] := ALGcross(ar:bat[:int,:oid], b:bat[:oid,:int]) {G}
    io.print(ab);                       # 35 _28:void := IOprint_val(ab:bat[:int,:int]) 
    ba := algebra.crossproduct(b,ar);   # 36 ba:bat[:oid,:oid] := ALGcross(b:bat[:oid,:int], ar:bat[:int,:oid]) {G}
    io.print(ba);                       # 37 _29:void := IOprint_val(ba:bat[:oid,:oid]) 
    bat.append(a,2);                    # 38 _30:void := BKCappend_val_wrap(a:bat[:oid,:int], _31:int) 
    ar := bat.reverse(a);               # 39 ar:bat[:int,:oid] := BKCreverse(a:bat[:oid,:int]) {G}
    io.print(ar);                       # 40 _32:void := IOprint_val(ar:bat[:int,:oid]) 
    ar := bat.reverse(a);               # 41 ar:bat[:int,:oid] := BKCreverse(a:bat[:oid,:int]) {G}
    c := algebra.crossproduct(ar,ar);   # 42 c:bat[:int,:oid] := ALGcross(ar:bat[:int,:oid], ar:bat[:int,:oid]) {G}
    io.print(c);                        # 43 _33:void := IOprint_val(c:bat[:int,:oid]) 
    bb := algebra.crossproduct(b,b);    # 44 bb:bat[:oid,:int] := ALGcross(b:bat[:oid,:int], b:bat[:oid,:int]) {G}
    io.print(bb);                       # 45 _34:void := IOprint_val(bb:bat[:oid,:int]) 
    ab := algebra.crossproduct(ar,b);   # 46 ab:bat[:int,:int] := ALGcross(ar:bat[:int,:oid], b:bat[:oid,:int]) {G}
    io.print(ab);                       # 47 _35:void := IOprint_val(ab:bat[:int,:int]) 
    ba := algebra.crossproduct(b,ar);   # 48 ba:bat[:oid,:oid] := ALGcross(b:bat[:oid,:int], ar:bat[:int,:oid]) {G}
    io.print(ba);                       # 49 _36:void := IOprint_val(ba:bat[:oid,:oid]) 
    bat.append(b,22);                   # 50 _37:void := BKCappend_val_wrap(b:bat[:oid,:int], _38:int) 
    io.print(b);                        # 51 _39:void := IOprint_val(b:bat[:oid,:int]) 
    ar := bat.reverse(a);               # 52 ar:bat[:int,:oid] := BKCreverse(a:bat[:oid,:int]) {G}
    c := algebra.crossproduct(ar,ar);   # 53 c:bat[:int,:oid] := ALGcross(ar:bat[:int,:oid], ar:bat[:int,:oid]) {G}
    io.print(c);                        # 54 _40:void := IOprint_val(c:bat[:int,:oid]) 
    bb := algebra.crossproduct(b,b);    # 55 bb:bat[:oid,:int] := ALGcross(b:bat[:oid,:int], b:bat[:oid,:int]) {G}
    io.print(bb);                       # 56 _41:void := IOprint_val(bb:bat[:oid,:int]) 
    ab := algebra.crossproduct(ar,b);   # 57 ab:bat[:int,:int] := ALGcross(ar:bat[:int,:oid], b:bat[:oid,:int]) {G}
    io.print(ab);                       # 58 _42:void := IOprint_val(ab:bat[:int,:int]) 
    ba := algebra.crossproduct(b,ar);   # 59 ba:bat[:oid,:oid] := ALGcross(b:bat[:oid,:int], ar:bat[:int,:oid]) {G}
    io.print(ba);                       # 60 _43:void := IOprint_val(ba:bat[:oid,:oid]) 
end main;	# 61  
#-----------------#
# t	h	  # name
# int	void	  # type
#-----------------#
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	oid	  # type
#-----------------#
#-----------------#
# t	h	  # name
# int	void	  # type
#-----------------#
[ 1,	  0@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 1,	  0@0	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	oid	  # type
#-----------------#
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  11	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 1,	  0@0	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  11	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  11	  ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  0@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 1,	  0@0	  ]
[ 2,	  1@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 1,	  0@0	  ]
[ 1,	  1@0	  ]
[ 2,	  0@0	  ]
[ 2,	  1@0	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  11	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  11	  ]
[ 2,	  11	  ]
#-----------------#
# t	h	  # name
# oid	void	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ 0@0,	  1@0	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  11	  ]
[ 1@0,	  22	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 1,	  0@0	  ]
[ 1,	  1@0	  ]
[ 2,	  0@0	  ]
[ 2,	  1@0	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  11	  ]
[ 0@0,	  22	  ]
[ 1@0,	  11	  ]
[ 1@0,	  22	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  11	  ]
[ 1,	  22	  ]
[ 2,	  11	  ]
[ 2,	  22	  ]
#-----------------#
# h	t	  # name
# oid	oid	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ 0@0,	  1@0	  ]
[ 1@0,	  0@0	  ]
[ 1@0,	  1@0	  ]

# 09:01:02 >  
# 09:01:02 >  Done.
# 09:01:02 >  

