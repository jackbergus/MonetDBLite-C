o:= nil:oid;
function check_cap(b:bat[:any_1,:any_2]) :void;
	inserted := aggr.count(b);
	d:= bat.getDelta(b);
	d1 := aggr.count(d);
	deleted := calc.lng(d1);
	cap := bat.getCapacity(b);
	overflow := inserted + deleted;
	overflow := overflow - cap;
barrier errors:= overflow > 0:lng;
		io.printf("!ERROR: wrote %d BUNs beyond capacity\n",overflow);
exit errors;
end check_cap;

b := bat.new(:oid,:oid);
bat.setName(b,"b");
bat.setPersistent(b,true);

cap := bat.getCapacity(b);
cap := cap/4;
ci  := calc.int(cap);
ci := ci+ 1;

i := ci * 3;
barrier go:= i>0;
	o:= calc.oid(i);
	bat.insert(b,o,o);
	i:= i -1;
	redo go:= i>0;
exit go;

transaction.commit();

i := ci * 2;
barrier go:= i>0;
	o:= calc.oid(i);
	bat.delete(b,o);
	i:= i -1;
	redo go:= i>0;
exit go;

c := bat.new(:oid,:oid);
i := ci * 2;
barrier go:= i>0;
	o:= calc.oid(i);
	bat.insert(c,o,o);
	i:= i -1;
	redo go:= i>0;
exit go;

bat.insert(b,c);
check_cap(b);

bat.setPersistent(b,false);

transaction.commit();

clients.quit();
