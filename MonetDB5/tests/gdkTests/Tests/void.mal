
io.print("First keep void tests");
a := bat.new(:void,:int,10);
bat.setName(a,"A");
bat.append(a,1);
bat.append(a,4);
bat.append(a,7);
bat.append(a,2);
bat.append(a,8);
bat.append(a,1);
bat.append(a,4);
bat.append(a,5);
bat.append(a,8);
bat.append(a,3);
bat.setSequenceBase(a,10:oid);
io.print(a);

b := algebra.copy(a);
bat.setName(b,"B");

io.print("insert tests");
#insert in order
bat.insert(a,20:oid,8);
io.print(a);

io.print("replace tests");
# replace uncommited no need to change to oid
bat.replace(a,15:oid,9);
io.print(a);

# replace last no need to change to oid
bat.replace(a,20:oid,9);
io.print(a);

# replace last + 1, noting needed
bat.replace(a,20:oid,9);
io.print(a);

io.print("delete tests");
# delete uncommited from the top
bat.delete(a,20:oid);
bat.delete(a,19:oid);
bat.delete(a,18:oid);
bat.delete(a,17:oid);
bat.delete(a,16:oid);
bat.delete(a,15:oid);
bat.delete(a,14:oid);
bat.delete(a,13:oid);
bat.delete(a,12:oid);
bat.delete(a,11:oid);
# only 1 left and still void
io.print(a);

# now the convert to oid test
io.print("convert void to oid tests");
a := algebra.copy(b);
bat.setWriteMode(a);
bat.setName(a,"C");

io.print("insert tests");
#insert in out of order
bat.insert(a,21:oid,8);
io.print(a);

# use oid bat (test if its a properly made bat)
bat.delete(a,21:oid);
ar:= bat.reverse(a);
z:= algebra.join(ar,b);
io.print(z);

io.print("replace tests");
#replace commited bun
a := algebra.copy(b); bat.setWriteMode(a); bat.setName(a,"D");
transaction.commit(a);

# replace commited 
bat.replace(a,15:oid,-3);
# replace last (or used to be last)
bat.replace(a,19:oid,-1);
# replace something not there
bat.replace(a,20:oid,-2);
io.print(a);

# delete commited 
io.print("delete tests");
a := algebra.copy(b); bat.setWriteMode(a); bat.setName(a,"E");
transaction.commit(a);
io.print(a);

bat.delete(a,20:oid);io.print(a);
bat.delete(a,19:oid);io.print(a);
bat.delete(a,18:oid);io.print(a);
bat.delete(a,17:oid);io.print(a);
bat.delete(a,16:oid);io.print(a);
bat.delete(a,15:oid);io.print(a);
bat.delete(a,14:oid);io.print(a);
bat.delete(a,13:oid);io.print(a);
bat.delete(a,12:oid);io.print(a);
bat.delete(a,11:oid);io.print(a);
# only 1 left and still void
io.print(a);

# deleting a transient value from a just void table didn't fix
# the denseness

t1 := bat.new(:void,:int);
bat.setSequenceBase(t1,0@0);
bat.append(t1,1);
bat.append(t1,2);
bat.append(t1,3);
io.print("<in>");
v1 := algebra.select(t1, 2,nil:int,false,false);
v2a := algebra.markT(v1,0@0);
vr := bat.reverse(v2a);
vj:= algebra.join(vr,t1);
io.print(vj);

v3 := algebra.select(t1,2, nil:int);
i:= bat.info(v3); z2:= algebra.find(i,"hseqbase"); io.print(z2);
z2:= algebra.find(i,"hdense"); io.print(z2);
bat.setWriteMode(v3);
v3r:= bat.reverse(v3);
bat.delete(v3r,2);
i:= bat.info(v3); z2:= algebra.find(i,"hseqbase"); io.print(z2);
z2:= algebra.find(i,"hdense"); io.print(z2);

x := bat.new(:void,:void);
bat.setSequenceBase(x,0@0);
#bat.append(x,12@0);
bat.append(x,nil);
io.print(x);

e := bat.new(:void,:int);
bat.setSequenceBase(e,10@0);
n := bat.new(:void,:int);
bat.setSequenceBase(n,20@0);
bat.append(n,20);
bat.insert(e,n);
io.print(e);

y := bat.new(:void,:int);
bat.insert(y,nil:oid,0);
bat.setSequenceBase(y,20@0);
zn := bat.new(:void,:int);
bat.setSequenceBase(zn,10@0);
bat.setKey(zn,true);
bat.insert(zn,y);
io.print(zn);

clients.quit();
