stdout of test 'qsort` in directory 'tests/gdkTests` itself:


# 08:04:37 >  
# 08:04:37 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=31641 --set monet_prompt= --trace --dbname=mTests_tests_gdkTests  qsort.mal < /dev/null
# 08:04:37 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_gdkTests
# Visit http://monetdb.cwi.nl/ for further information
#b := bat.new(:int,:int,10);
#bat.insert(b,2,3);
#bat.insert(b,1,9);
#bat.insert(b,9,8);
#bat.insert(b,6,4);
#bat.insert(b,5,2);
#bat.insert(b,3,0);
#bat.insert(b,0,1);
#bat.insert(b,8,6);
#bat.insert(b,4,5);
#bat.insert(b,7,7);
#bat.setReadMode(b);
#io.print(b);
#ma:= algebra.markT(b,nil:oid);
#i_n := algebra.copy(ma);
#ra := bat.reverse(i_n);
#n_i := algebra.copy(ra);
#ba := algebra.markT(b,0:oid);
#i_v := algebra.copy(ba);
#ir := bat.reverse(i_v);
#v_i := algebra.copy(ir);
#bo := batcalc.oid(b);
#i_o := algebra.copy(bo);
#or := bat.reverse(i_o);
#o_i := algebra.copy(or);
#
#io.print(n_i);
#Zn_i:= algebra.sort(n_i); io.print(Zn_i);
#Zn_i1:= algebra.copy(n_i);bat.setWriteMode(Zn_i1); bat.order(Zn_i1); io.print(Zn_i1);
#Zn_i2:= algebra.sortReverse(n_i); io.print(Zn_i2);
#Zn_i3:= algebra.copy(n_i);bat.setWriteMode(Zn_i3); bat.orderReverse(Zn_i3); io.print(Zn_i3);
#
#io.print(i_n);
#Zi_n:= algebra.sort(i_n); io.print(Zi_n);
#Zi_n:= algebra.copy(i_n);bat.setWriteMode(Zi_n); bat.order(Zi_n); io.print(Zi_n);
#Zi_n:= algebra.sortReverse(i_n); io.print(Zi_n);
#Zi_n:= algebra.copy(i_n);bat.setWriteMode(Zi_n); bat.orderReverse(Zi_n); io.print(Zi_n);
#
#io.print(v_i);
#Zv_i:= algebra.sort(v_i); io.print(Zv_i);
#Zv_i:= algebra.copy(v_i);bat.setWriteMode(Zv_i); bat.order(Zv_i); io.print(Zv_i);
#Zv_i:= algebra.sortReverse(v_i); io.print(Zv_i);
#Zv_i:= algebra.copy(v_i);bat.setWriteMode(Zv_i); bat.orderReverse(Zv_i); io.print(Zv_i);
#
#io.print(i_v);
#Zi_v:= algebra.sort(i_v); io.print(Zi_v);
#Zi_v:= algebra.copy(i_v);bat.setWriteMode(Zi_v); bat.order(Zi_v); io.print(Zi_v);
#Zi_v:= algebra.sortReverse(i_v); io.print(Zi_v);
#Zi_v:= algebra.copy(i_v);bat.setWriteMode(Zi_v); bat.orderReverse(Zi_v); io.print(Zi_v);
#
#io.print(o_i);
#Zo_i:= algebra.sort(o_i); io.print(Zo_i);
#Zo_i:= algebra.copy(o_i);bat.setWriteMode(Zo_i); bat.order(Zo_i); io.print(Zo_i);
#Zo_i:= algebra.sortReverse(o_i); io.print(Zo_i);
#Zo_i:= algebra.copy(o_i);bat.setWriteMode(Zo_i); bat.orderReverse(Zo_i); io.print(Zo_i);
#
#io.print(i_o);
#Zi_o:= algebra.sort(i_o); io.print(Zi_o);
#Zi_o1:= algebra.copy(i_o);bat.setWriteMode(Zi_o1); bat.order(Zi_o1); io.print(Zi_o1);
#Zi_o2:= algebra.sortReverse(i_o); io.print(Zi_o2);
#Zi_o3:= algebra.copy(i_o);bat.setWriteMode(Zi_o3); bat.orderReverse(Zi_o3); io.print(Zi_o3);
#
function user.main():void;	# 0  (main:void)
    b := bat.new(:int,:int,10);	# 1 CMDBATnewint (b:bat[:int,:int])<-(_2:int)(_2:int)(_3:int)
    bat.insert(b,2,3);	# 2 BKCinsert_bun (_4:void)<-(b:bat[:int,:int])(_5:int)(_6:int)
    bat.insert(b,1,9);	# 3 BKCinsert_bun (_7:void)<-(b:bat[:int,:int])(_8:int)(_9:int)
    bat.insert(b,9,8);	# 4 BKCinsert_bun (_10:void)<-(b:bat[:int,:int])(_9:int)(_11:int)
    bat.insert(b,6,4);	# 5 BKCinsert_bun (_12:void)<-(b:bat[:int,:int])(_13:int)(_14:int)
    bat.insert(b,5,2);	# 6 BKCinsert_bun (_15:void)<-(b:bat[:int,:int])(_16:int)(_5:int)
    bat.insert(b,3,0);	# 7 BKCinsert_bun (_17:void)<-(b:bat[:int,:int])(_6:int)(_18:int)
    bat.insert(b,0,1);	# 8 BKCinsert_bun (_19:void)<-(b:bat[:int,:int])(_18:int)(_8:int)
    bat.insert(b,8,6);	# 9 BKCinsert_bun (_20:void)<-(b:bat[:int,:int])(_11:int)(_13:int)
    bat.insert(b,4,5);	# 10 BKCinsert_bun (_21:void)<-(b:bat[:int,:int])(_14:int)(_16:int)
    bat.insert(b,7,7);	# 11 BKCinsert_bun (_22:void)<-(b:bat[:int,:int])(_23:int)(_23:int)
    bat.setReadMode(b);	# 12 BKCsetReadMode (_24:bat[:int,:int])<-(b:bat[:int,:int])
    io.print(b);	# 13 IOprint_val (_25:int)<-(b:bat[:int,:int])
    ma := algebra.markT(b,nil:oid);	# 14 ALGtmark (ma:bat[:int,:void])<-(b:bat[:int,:int])(_27:oid)
    i_n := algebra.copy(ma);	# 15 ALGcopy (i_n:bat[:int,:void])<-(ma:bat[:int,:void])
    ra := bat.reverse(i_n);	# 16 BKCreverse (ra:bat[:void,:int])<-(i_n:bat[:int,:void])
    n_i := algebra.copy(ra);	# 17 ALGcopy (n_i:bat[:void,:int])<-(ra:bat[:void,:int])
    ba := algebra.markT(b,0@0:oid);	# 18 ALGtmark (ba:bat[:int,:void])<-(b:bat[:int,:int])(_32:oid)
    i_v := algebra.copy(ba);	# 19 ALGcopy (i_v:bat[:int,:void])<-(ba:bat[:int,:void])
    ir := bat.reverse(i_v);	# 20 BKCreverse (ir:bat[:void,:int])<-(i_v:bat[:int,:void])
    v_i := algebra.copy(ir);	# 21 ALGcopy (v_i:bat[:void,:int])<-(ir:bat[:void,:int])
    bo := batcalc.oid(b);	# 22 CMDconvert_int_oid (bo:bat[:int,:oid])<-(b:bat[:int,:int])
    i_o := algebra.copy(bo);	# 23 ALGcopy (i_o:bat[:int,:oid])<-(bo:bat[:int,:oid])
    or := bat.reverse(i_o);	# 24 BKCreverse (or:bat[:oid,:int])<-(i_o:bat[:int,:oid])
    o_i := algebra.copy(or);	# 25 ALGcopy (o_i:bat[:oid,:int])<-(or:bat[:oid,:int])
    io.print(n_i);	# 26 IOprint_val (_40:int)<-(n_i:bat[:void,:int])
    Zn_i := algebra.sort(n_i);	# 27 ALGhsort (Zn_i:bat[:void,:int])<-(n_i:bat[:void,:int])
    io.print(Zn_i);	# 28 IOprint_val (_42:int)<-(Zn_i:bat[:void,:int])
    Zn_i1 := algebra.copy(n_i);	# 29 ALGcopy (Zn_i1:bat[:void,:int])<-(n_i:bat[:void,:int])
    bat.setWriteMode(Zn_i1);	# 30 BKCsetWriteMode (_44:bat[:void,:int])<-(Zn_i1:bat[:void,:int])
    bat.order(Zn_i1);	# 31 BKCorder (_45:bat[:void,:int])<-(Zn_i1:bat[:void,:int])
    io.print(Zn_i1);	# 32 IOprint_val (_46:int)<-(Zn_i1:bat[:void,:int])
    Zn_i2 := algebra.sortReverse(n_i);	# 33 ALGhsort_rev (Zn_i2:bat[:void,:int])<-(n_i:bat[:void,:int])
    io.print(Zn_i2);	# 34 IOprint_val (_48:int)<-(Zn_i2:bat[:void,:int])
    Zn_i3 := algebra.copy(n_i);	# 35 ALGcopy (Zn_i3:bat[:void,:int])<-(n_i:bat[:void,:int])
    bat.setWriteMode(Zn_i3);	# 36 BKCsetWriteMode (_50:bat[:void,:int])<-(Zn_i3:bat[:void,:int])
    bat.orderReverse(Zn_i3);	# 37 BKCorder_rev (_51:bat[:void,:int])<-(Zn_i3:bat[:void,:int])
    io.print(Zn_i3);	# 38 IOprint_val (_52:int)<-(Zn_i3:bat[:void,:int])
    io.print(i_n);	# 39 IOprint_val (_53:int)<-(i_n:bat[:int,:void])
    Zi_n := algebra.sort(i_n);	# 40 ALGhsort (Zi_n:bat[:int,:void])<-(i_n:bat[:int,:void])
    io.print(Zi_n);	# 41 IOprint_val (_55:int)<-(Zi_n:bat[:int,:void])
    Zi_n := algebra.copy(i_n);	# 42 ALGcopy (Zi_n:bat[:int,:void])<-(i_n:bat[:int,:void])
    bat.setWriteMode(Zi_n);	# 43 BKCsetWriteMode (_56:bat[:int,:void])<-(Zi_n:bat[:int,:void])
    bat.order(Zi_n);	# 44 BKCorder (_57:bat[:int,:void])<-(Zi_n:bat[:int,:void])
    io.print(Zi_n);	# 45 IOprint_val (_58:int)<-(Zi_n:bat[:int,:void])
    Zi_n := algebra.sortReverse(i_n);	# 46 ALGhsort_rev (Zi_n:bat[:int,:void])<-(i_n:bat[:int,:void])
    io.print(Zi_n);	# 47 IOprint_val (_59:int)<-(Zi_n:bat[:int,:void])
    Zi_n := algebra.copy(i_n);	# 48 ALGcopy (Zi_n:bat[:int,:void])<-(i_n:bat[:int,:void])
    bat.setWriteMode(Zi_n);	# 49 BKCsetWriteMode (_60:bat[:int,:void])<-(Zi_n:bat[:int,:void])
    bat.orderReverse(Zi_n);	# 50 BKCorder_rev (_61:bat[:int,:void])<-(Zi_n:bat[:int,:void])
    io.print(Zi_n);	# 51 IOprint_val (_62:int)<-(Zi_n:bat[:int,:void])
    io.print(v_i);	# 52 IOprint_val (_63:int)<-(v_i:bat[:void,:int])
    Zv_i := algebra.sort(v_i);	# 53 ALGhsort (Zv_i:bat[:void,:int])<-(v_i:bat[:void,:int])
    io.print(Zv_i);	# 54 IOprint_val (_65:int)<-(Zv_i:bat[:void,:int])
    Zv_i := algebra.copy(v_i);	# 55 ALGcopy (Zv_i:bat[:void,:int])<-(v_i:bat[:void,:int])
    bat.setWriteMode(Zv_i);	# 56 BKCsetWriteMode (_66:bat[:void,:int])<-(Zv_i:bat[:void,:int])
    bat.order(Zv_i);	# 57 BKCorder (_67:bat[:void,:int])<-(Zv_i:bat[:void,:int])
    io.print(Zv_i);	# 58 IOprint_val (_68:int)<-(Zv_i:bat[:void,:int])
    Zv_i := algebra.sortReverse(v_i);	# 59 ALGhsort_rev (Zv_i:bat[:void,:int])<-(v_i:bat[:void,:int])
    io.print(Zv_i);	# 60 IOprint_val (_69:int)<-(Zv_i:bat[:void,:int])
    Zv_i := algebra.copy(v_i);	# 61 ALGcopy (Zv_i:bat[:void,:int])<-(v_i:bat[:void,:int])
    bat.setWriteMode(Zv_i);	# 62 BKCsetWriteMode (_70:bat[:void,:int])<-(Zv_i:bat[:void,:int])
    bat.orderReverse(Zv_i);	# 63 BKCorder_rev (_71:bat[:void,:int])<-(Zv_i:bat[:void,:int])
    io.print(Zv_i);	# 64 IOprint_val (_72:int)<-(Zv_i:bat[:void,:int])
    io.print(i_v);	# 65 IOprint_val (_73:int)<-(i_v:bat[:int,:void])
    Zi_v := algebra.sort(i_v);	# 66 ALGhsort (Zi_v:bat[:int,:void])<-(i_v:bat[:int,:void])
    io.print(Zi_v);	# 67 IOprint_val (_75:int)<-(Zi_v:bat[:int,:void])
    Zi_v := algebra.copy(i_v);	# 68 ALGcopy (Zi_v:bat[:int,:void])<-(i_v:bat[:int,:void])
    bat.setWriteMode(Zi_v);	# 69 BKCsetWriteMode (_76:bat[:int,:void])<-(Zi_v:bat[:int,:void])
    bat.order(Zi_v);	# 70 BKCorder (_77:bat[:int,:void])<-(Zi_v:bat[:int,:void])
    io.print(Zi_v);	# 71 IOprint_val (_78:int)<-(Zi_v:bat[:int,:void])
    Zi_v := algebra.sortReverse(i_v);	# 72 ALGhsort_rev (Zi_v:bat[:int,:void])<-(i_v:bat[:int,:void])
    io.print(Zi_v);	# 73 IOprint_val (_79:int)<-(Zi_v:bat[:int,:void])
    Zi_v := algebra.copy(i_v);	# 74 ALGcopy (Zi_v:bat[:int,:void])<-(i_v:bat[:int,:void])
    bat.setWriteMode(Zi_v);	# 75 BKCsetWriteMode (_80:bat[:int,:void])<-(Zi_v:bat[:int,:void])
    bat.orderReverse(Zi_v);	# 76 BKCorder_rev (_81:bat[:int,:void])<-(Zi_v:bat[:int,:void])
    io.print(Zi_v);	# 77 IOprint_val (_82:int)<-(Zi_v:bat[:int,:void])
    io.print(o_i);	# 78 IOprint_val (_83:int)<-(o_i:bat[:oid,:int])
    Zo_i := algebra.sort(o_i);	# 79 ALGhsort (Zo_i:bat[:oid,:int])<-(o_i:bat[:oid,:int])
    io.print(Zo_i);	# 80 IOprint_val (_85:int)<-(Zo_i:bat[:oid,:int])
    Zo_i := algebra.copy(o_i);	# 81 ALGcopy (Zo_i:bat[:oid,:int])<-(o_i:bat[:oid,:int])
    bat.setWriteMode(Zo_i);	# 82 BKCsetWriteMode (_86:bat[:oid,:int])<-(Zo_i:bat[:oid,:int])
    bat.order(Zo_i);	# 83 BKCorder (_87:bat[:oid,:int])<-(Zo_i:bat[:oid,:int])
    io.print(Zo_i);	# 84 IOprint_val (_88:int)<-(Zo_i:bat[:oid,:int])
    Zo_i := algebra.sortReverse(o_i);	# 85 ALGhsort_rev (Zo_i:bat[:oid,:int])<-(o_i:bat[:oid,:int])
    io.print(Zo_i);	# 86 IOprint_val (_89:int)<-(Zo_i:bat[:oid,:int])
    Zo_i := algebra.copy(o_i);	# 87 ALGcopy (Zo_i:bat[:oid,:int])<-(o_i:bat[:oid,:int])
    bat.setWriteMode(Zo_i);	# 88 BKCsetWriteMode (_90:bat[:oid,:int])<-(Zo_i:bat[:oid,:int])
    bat.orderReverse(Zo_i);	# 89 BKCorder_rev (_91:bat[:oid,:int])<-(Zo_i:bat[:oid,:int])
    io.print(Zo_i);	# 90 IOprint_val (_92:int)<-(Zo_i:bat[:oid,:int])
    io.print(i_o);	# 91 IOprint_val (_93:int)<-(i_o:bat[:int,:oid])
    Zi_o := algebra.sort(i_o);	# 92 ALGhsort (Zi_o:bat[:int,:oid])<-(i_o:bat[:int,:oid])
    io.print(Zi_o);	# 93 IOprint_val (_95:int)<-(Zi_o:bat[:int,:oid])
    Zi_o1 := algebra.copy(i_o);	# 94 ALGcopy (Zi_o1:bat[:int,:oid])<-(i_o:bat[:int,:oid])
    bat.setWriteMode(Zi_o1);	# 95 BKCsetWriteMode (_97:bat[:int,:oid])<-(Zi_o1:bat[:int,:oid])
    bat.order(Zi_o1);	# 96 BKCorder (_98:bat[:int,:oid])<-(Zi_o1:bat[:int,:oid])
    io.print(Zi_o1);	# 97 IOprint_val (_99:int)<-(Zi_o1:bat[:int,:oid])
    Zi_o2 := algebra.sortReverse(i_o);	# 98 ALGhsort_rev (Zi_o2:bat[:int,:oid])<-(i_o:bat[:int,:oid])
    io.print(Zi_o2);	# 99 IOprint_val (_101:int)<-(Zi_o2:bat[:int,:oid])
    Zi_o3 := algebra.copy(i_o);	# 100 ALGcopy (Zi_o3:bat[:int,:oid])<-(i_o:bat[:int,:oid])
    bat.setWriteMode(Zi_o3);	# 101 BKCsetWriteMode (_103:bat[:int,:oid])<-(Zi_o3:bat[:int,:oid])
    bat.orderReverse(Zi_o3);	# 102 BKCorder_rev (_104:bat[:int,:oid])<-(Zi_o3:bat[:int,:oid])
    io.print(Zi_o3);	# 103 IOprint_val (_105:int)<-(Zi_o3:bat[:int,:oid])
end main;	# 104  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  3	  ]
[ 1,	  9	  ]
[ 9,	  8	  ]
[ 6,	  4	  ]
[ 5,	  2	  ]
[ 3,	  0	  ]
[ 0,	  1	  ]
[ 8,	  6	  ]
[ 4,	  5	  ]
[ 7,	  7	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  2	  ]
[ nil,	  1	  ]
[ nil,	  9	  ]
[ nil,	  6	  ]
[ nil,	  5	  ]
[ nil,	  3	  ]
[ nil,	  0	  ]
[ nil,	  8	  ]
[ nil,	  4	  ]
[ nil,	  7	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  2	  ]
[ nil,	  1	  ]
[ nil,	  9	  ]
[ nil,	  6	  ]
[ nil,	  5	  ]
[ nil,	  3	  ]
[ nil,	  0	  ]
[ nil,	  8	  ]
[ nil,	  4	  ]
[ nil,	  7	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  2	  ]
[ nil,	  1	  ]
[ nil,	  9	  ]
[ nil,	  6	  ]
[ nil,	  5	  ]
[ nil,	  3	  ]
[ nil,	  0	  ]
[ nil,	  8	  ]
[ nil,	  4	  ]
[ nil,	  7	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  2	  ]
[ nil,	  1	  ]
[ nil,	  9	  ]
[ nil,	  6	  ]
[ nil,	  5	  ]
[ nil,	  3	  ]
[ nil,	  0	  ]
[ nil,	  8	  ]
[ nil,	  4	  ]
[ nil,	  7	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  2	  ]
[ nil,	  1	  ]
[ nil,	  9	  ]
[ nil,	  6	  ]
[ nil,	  5	  ]
[ nil,	  3	  ]
[ nil,	  0	  ]
[ nil,	  8	  ]
[ nil,	  4	  ]
[ nil,	  7	  ]
#-----------------#
# h	t	  # name
# int	void	  # type
#-----------------#
[ 2,	  nil	  ]
[ 1,	  nil	  ]
[ 9,	  nil	  ]
[ 6,	  nil	  ]
[ 5,	  nil	  ]
[ 3,	  nil	  ]
[ 0,	  nil	  ]
[ 8,	  nil	  ]
[ 4,	  nil	  ]
[ 7,	  nil	  ]
#-----------------#
# h	t	  # name
# int	void	  # type
#-----------------#
[ 0,	  nil	  ]
[ 1,	  nil	  ]
[ 2,	  nil	  ]
[ 3,	  nil	  ]
[ 4,	  nil	  ]
[ 5,	  nil	  ]
[ 6,	  nil	  ]
[ 7,	  nil	  ]
[ 8,	  nil	  ]
[ 9,	  nil	  ]
#-----------------#
# h	t	  # name
# int	void	  # type
#-----------------#
[ 0,	  nil	  ]
[ 1,	  nil	  ]
[ 2,	  nil	  ]
[ 3,	  nil	  ]
[ 4,	  nil	  ]
[ 5,	  nil	  ]
[ 6,	  nil	  ]
[ 7,	  nil	  ]
[ 8,	  nil	  ]
[ 9,	  nil	  ]
#-----------------#
# h	t	  # name
# int	void	  # type
#-----------------#
[ 9,	  nil	  ]
[ 8,	  nil	  ]
[ 7,	  nil	  ]
[ 6,	  nil	  ]
[ 5,	  nil	  ]
[ 4,	  nil	  ]
[ 3,	  nil	  ]
[ 2,	  nil	  ]
[ 1,	  nil	  ]
[ 0,	  nil	  ]
#-----------------#
# h	t	  # name
# int	void	  # type
#-----------------#
[ 9,	  nil	  ]
[ 8,	  nil	  ]
[ 7,	  nil	  ]
[ 6,	  nil	  ]
[ 5,	  nil	  ]
[ 4,	  nil	  ]
[ 3,	  nil	  ]
[ 2,	  nil	  ]
[ 1,	  nil	  ]
[ 0,	  nil	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  2	  ]
[ 1@0,	  1	  ]
[ 2@0,	  9	  ]
[ 3@0,	  6	  ]
[ 4@0,	  5	  ]
[ 5@0,	  3	  ]
[ 6@0,	  0	  ]
[ 7@0,	  8	  ]
[ 8@0,	  4	  ]
[ 9@0,	  7	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  2	  ]
[ 1@0,	  1	  ]
[ 2@0,	  9	  ]
[ 3@0,	  6	  ]
[ 4@0,	  5	  ]
[ 5@0,	  3	  ]
[ 6@0,	  0	  ]
[ 7@0,	  8	  ]
[ 8@0,	  4	  ]
[ 9@0,	  7	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  2	  ]
[ 1@0,	  1	  ]
[ 2@0,	  9	  ]
[ 3@0,	  6	  ]
[ 4@0,	  5	  ]
[ 5@0,	  3	  ]
[ 6@0,	  0	  ]
[ 7@0,	  8	  ]
[ 8@0,	  4	  ]
[ 9@0,	  7	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 9@0,	  7	  ]
[ 8@0,	  4	  ]
[ 7@0,	  8	  ]
[ 6@0,	  0	  ]
[ 5@0,	  3	  ]
[ 4@0,	  5	  ]
[ 3@0,	  6	  ]
[ 2@0,	  9	  ]
[ 1@0,	  1	  ]
[ 0@0,	  2	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 9@0,	  7	  ]
[ 8@0,	  4	  ]
[ 7@0,	  8	  ]
[ 6@0,	  0	  ]
[ 5@0,	  3	  ]
[ 4@0,	  5	  ]
[ 3@0,	  6	  ]
[ 2@0,	  9	  ]
[ 1@0,	  1	  ]
[ 0@0,	  2	  ]
#-----------------#
# h	t	  # name
# int	void	  # type
#-----------------#
[ 2,	  0@0	  ]
[ 1,	  1@0	  ]
[ 9,	  2@0	  ]
[ 6,	  3@0	  ]
[ 5,	  4@0	  ]
[ 3,	  5@0	  ]
[ 0,	  6@0	  ]
[ 8,	  7@0	  ]
[ 4,	  8@0	  ]
[ 7,	  9@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 0,	  6@0	  ]
[ 1,	  1@0	  ]
[ 2,	  0@0	  ]
[ 3,	  5@0	  ]
[ 4,	  8@0	  ]
[ 5,	  4@0	  ]
[ 6,	  3@0	  ]
[ 7,	  9@0	  ]
[ 8,	  7@0	  ]
[ 9,	  2@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 0,	  6@0	  ]
[ 1,	  1@0	  ]
[ 2,	  0@0	  ]
[ 3,	  5@0	  ]
[ 4,	  8@0	  ]
[ 5,	  4@0	  ]
[ 6,	  3@0	  ]
[ 7,	  9@0	  ]
[ 8,	  7@0	  ]
[ 9,	  2@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 9,	  2@0	  ]
[ 8,	  7@0	  ]
[ 7,	  9@0	  ]
[ 6,	  3@0	  ]
[ 5,	  4@0	  ]
[ 4,	  8@0	  ]
[ 3,	  5@0	  ]
[ 2,	  0@0	  ]
[ 1,	  1@0	  ]
[ 0,	  6@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 9,	  2@0	  ]
[ 8,	  7@0	  ]
[ 7,	  9@0	  ]
[ 6,	  3@0	  ]
[ 5,	  4@0	  ]
[ 4,	  8@0	  ]
[ 3,	  5@0	  ]
[ 2,	  0@0	  ]
[ 1,	  1@0	  ]
[ 0,	  6@0	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 3@0,	  2	  ]
[ 9@0,	  1	  ]
[ 8@0,	  9	  ]
[ 4@0,	  6	  ]
[ 2@0,	  5	  ]
[ 0@0,	  3	  ]
[ 1@0,	  0	  ]
[ 6@0,	  8	  ]
[ 5@0,	  4	  ]
[ 7@0,	  7	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  3	  ]
[ 1@0,	  0	  ]
[ 2@0,	  5	  ]
[ 3@0,	  2	  ]
[ 4@0,	  6	  ]
[ 5@0,	  4	  ]
[ 6@0,	  8	  ]
[ 7@0,	  7	  ]
[ 8@0,	  9	  ]
[ 9@0,	  1	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  3	  ]
[ 1@0,	  0	  ]
[ 2@0,	  5	  ]
[ 3@0,	  2	  ]
[ 4@0,	  6	  ]
[ 5@0,	  4	  ]
[ 6@0,	  8	  ]
[ 7@0,	  7	  ]
[ 8@0,	  9	  ]
[ 9@0,	  1	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 9@0,	  1	  ]
[ 8@0,	  9	  ]
[ 7@0,	  7	  ]
[ 6@0,	  8	  ]
[ 5@0,	  4	  ]
[ 4@0,	  6	  ]
[ 3@0,	  2	  ]
[ 2@0,	  5	  ]
[ 1@0,	  0	  ]
[ 0@0,	  3	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 9@0,	  1	  ]
[ 8@0,	  9	  ]
[ 7@0,	  7	  ]
[ 6@0,	  8	  ]
[ 5@0,	  4	  ]
[ 4@0,	  6	  ]
[ 3@0,	  2	  ]
[ 2@0,	  5	  ]
[ 1@0,	  0	  ]
[ 0@0,	  3	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 2,	  3@0	  ]
[ 1,	  9@0	  ]
[ 9,	  8@0	  ]
[ 6,	  4@0	  ]
[ 5,	  2@0	  ]
[ 3,	  0@0	  ]
[ 0,	  1@0	  ]
[ 8,	  6@0	  ]
[ 4,	  5@0	  ]
[ 7,	  7@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 0,	  1@0	  ]
[ 1,	  9@0	  ]
[ 2,	  3@0	  ]
[ 3,	  0@0	  ]
[ 4,	  5@0	  ]
[ 5,	  2@0	  ]
[ 6,	  4@0	  ]
[ 7,	  7@0	  ]
[ 8,	  6@0	  ]
[ 9,	  8@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 0,	  1@0	  ]
[ 1,	  9@0	  ]
[ 2,	  3@0	  ]
[ 3,	  0@0	  ]
[ 4,	  5@0	  ]
[ 5,	  2@0	  ]
[ 6,	  4@0	  ]
[ 7,	  7@0	  ]
[ 8,	  6@0	  ]
[ 9,	  8@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 9,	  8@0	  ]
[ 8,	  6@0	  ]
[ 7,	  7@0	  ]
[ 6,	  4@0	  ]
[ 5,	  2@0	  ]
[ 4,	  5@0	  ]
[ 3,	  0@0	  ]
[ 2,	  3@0	  ]
[ 1,	  9@0	  ]
[ 0,	  1@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 9,	  8@0	  ]
[ 8,	  6@0	  ]
[ 7,	  7@0	  ]
[ 6,	  4@0	  ]
[ 5,	  2@0	  ]
[ 4,	  5@0	  ]
[ 3,	  0@0	  ]
[ 2,	  3@0	  ]
[ 1,	  9@0	  ]
[ 0,	  1@0	  ]

# 08:04:37 >  
# 08:04:37 >  Done.
# 08:04:37 >  

