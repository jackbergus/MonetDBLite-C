stdout of test 'qsort` in directory 'tests/gdkTests` itself:


# 08:04:37 >  
# 08:04:37 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=31641 --set monet_prompt= --trace --dbname=mTests_tests_gdkTests  qsort.mal < /dev/null
# 08:04:37 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_gdkTests
# Visit http://monetdb.cwi.nl/ for further information
#b := bat.new(:int,:int,10);
#bat.insert(b,2,3);
#bat.insert(b,1,9);
#bat.insert(b,9,8);
#bat.insert(b,6,4);
#bat.insert(b,5,2);
#bat.insert(b,3,0);
#bat.insert(b,0,1);
#bat.insert(b,8,6);
#bat.insert(b,4,5);
#bat.insert(b,7,7);
#bat.setReadMode(b);
#io.print(b);
#ma:= algebra.markT(b,nil:oid);
#i_n := algebra.copy(ma);
#ra := bat.reverse(i_n);
#n_i := algebra.copy(ra);
#ba := algebra.markT(b,0:oid);
#i_v := algebra.copy(ba);
#ir := bat.reverse(i_v);
#v_i := algebra.copy(ir);
#bo := batcalc.oid(b);
#i_o := algebra.copy(bo);
#or := bat.reverse(i_o);
#o_i := algebra.copy(or);
#
#io.print(n_i);
#Zn_i:= algebra.sort(n_i); io.print(Zn_i);
#Zn_i1:= algebra.copy(n_i);bat.setWriteMode(Zn_i1); bat.order(Zn_i1); io.print(Zn_i1);
#Zn_i2:= algebra.sortReverse(n_i); io.print(Zn_i2);
#Zn_i3:= algebra.copy(n_i);bat.setWriteMode(Zn_i3); bat.orderReverse(Zn_i3); io.print(Zn_i3);
#
#io.print(i_n);
#Zi_n:= algebra.sort(i_n); io.print(Zi_n);
#Zi_n:= algebra.copy(i_n);bat.setWriteMode(Zi_n); bat.order(Zi_n); io.print(Zi_n);
#Zi_n:= algebra.sortReverse(i_n); io.print(Zi_n);
#Zi_n:= algebra.copy(i_n);bat.setWriteMode(Zi_n); bat.orderReverse(Zi_n); io.print(Zi_n);
#
#io.print(v_i);
#Zv_i:= algebra.sort(v_i); io.print(Zv_i);
#Zv_i:= algebra.copy(v_i);bat.setWriteMode(Zv_i); bat.order(Zv_i); io.print(Zv_i);
#Zv_i:= algebra.sortReverse(v_i); io.print(Zv_i);
#Zv_i:= algebra.copy(v_i);bat.setWriteMode(Zv_i); bat.orderReverse(Zv_i); io.print(Zv_i);
#
#io.print(i_v);
#Zi_v:= algebra.sort(i_v); io.print(Zi_v);
#Zi_v:= algebra.copy(i_v);bat.setWriteMode(Zi_v); bat.order(Zi_v); io.print(Zi_v);
#Zi_v:= algebra.sortReverse(i_v); io.print(Zi_v);
#Zi_v:= algebra.copy(i_v);bat.setWriteMode(Zi_v); bat.orderReverse(Zi_v); io.print(Zi_v);
#
#io.print(o_i);
#Zo_i:= algebra.sort(o_i); io.print(Zo_i);
#Zo_i:= algebra.copy(o_i);bat.setWriteMode(Zo_i); bat.order(Zo_i); io.print(Zo_i);
#Zo_i:= algebra.sortReverse(o_i); io.print(Zo_i);
#Zo_i:= algebra.copy(o_i);bat.setWriteMode(Zo_i); bat.orderReverse(Zo_i); io.print(Zo_i);
#
#io.print(i_o);
#Zi_o:= algebra.sort(i_o); io.print(Zi_o);
#Zi_o1:= algebra.copy(i_o);bat.setWriteMode(Zi_o1); bat.order(Zi_o1); io.print(Zi_o1);
#Zi_o2:= algebra.sortReverse(i_o); io.print(Zi_o2);
#Zi_o3:= algebra.copy(i_o);bat.setWriteMode(Zi_o3); bat.orderReverse(Zi_o3); io.print(Zi_o3);
#
function user.main():void;              #  0 main:void := user.main() {G}
    b := bat.new(:int,:int,10);         #  1 b:bat[:int,:int] := CMDBATnewint(_2:int, _2:int, _3:int) {G}
    bat.insert(b,2,3);                  #  2 _4:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _5:int, _6:int) {G}
    bat.insert(b,1,9);                  #  3 _7:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _8:int, _9:int) {G}
    bat.insert(b,9,8);                  #  4 _10:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _9:int, _11:int) {G}
    bat.insert(b,6,4);                  #  5 _12:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _13:int, _14:int) {G}
    bat.insert(b,5,2);                  #  6 _15:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _16:int, _5:int) {G}
    bat.insert(b,3,0);                  #  7 _17:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _6:int, _18:int) {G}
    bat.insert(b,0,1);                  #  8 _19:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _18:int, _8:int) {G}
    bat.insert(b,8,6);                  #  9 _20:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _11:int, _13:int) {G}
    bat.insert(b,4,5);                  # 10 _21:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _14:int, _16:int) {G}
    bat.insert(b,7,7);                  # 11 _22:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _23:int, _23:int) {G}
    bat.setReadMode(b);                 # 12 _24:bat[:int,:int] := BKCsetReadMode(b:bat[:int,:int]) {G}
    io.print(b);                        # 13 _25:void := IOprint_val(b:bat[:int,:int]) 
    ma := algebra.markT(b,nil:oid);     # 14 ma:bat[:int,:oid] := ALGtmark(b:bat[:int,:int], _27:oid) {G}
    i_n := algebra.copy(ma);            # 15 i_n:bat[:int,:oid] := ALGcopy(ma:bat[:int,:oid]) {G}
    ra := bat.reverse(i_n);             # 16 ra:bat[:oid,:int] := BKCreverse(i_n:bat[:int,:oid]) {G}
    n_i := algebra.copy(ra);            # 17 n_i:bat[:oid,:int] := ALGcopy(ra:bat[:oid,:int]) {G}
    ba := algebra.markT(b,0@0:oid);     # 18 ba:bat[:int,:oid] := ALGtmark(b:bat[:int,:int], _32:oid) {G}
    i_v := algebra.copy(ba);            # 19 i_v:bat[:int,:oid] := ALGcopy(ba:bat[:int,:oid]) {G}
    ir := bat.reverse(i_v);             # 20 ir:bat[:oid,:int] := BKCreverse(i_v:bat[:int,:oid]) {G}
    v_i := algebra.copy(ir);            # 21 v_i:bat[:oid,:int] := ALGcopy(ir:bat[:oid,:int]) {G}
    bo := batcalc.oid(b);               # 22 bo:bat[:int,:oid] := CMDconvert_int_oid(b:bat[:int,:int]) {G}
    i_o := algebra.copy(bo);            # 23 i_o:bat[:int,:oid] := ALGcopy(bo:bat[:int,:oid]) {G}
    or := bat.reverse(i_o);             # 24 or:bat[:oid,:int] := BKCreverse(i_o:bat[:int,:oid]) {G}
    o_i := algebra.copy(or);            # 25 o_i:bat[:oid,:int] := ALGcopy(or:bat[:oid,:int]) {G}
    io.print(n_i);                      # 26 _40:void := IOprint_val(n_i:bat[:oid,:int]) 
    Zn_i := algebra.sort(n_i);          # 27 Zn_i:bat[:oid,:int] := ALGhsort(n_i:bat[:oid,:int]) {G}
    io.print(Zn_i);                     # 28 _42:void := IOprint_val(Zn_i:bat[:oid,:int]) 
    Zn_i1 := algebra.copy(n_i);         # 29 Zn_i1:bat[:oid,:int] := ALGcopy(n_i:bat[:oid,:int]) {G}
    bat.setWriteMode(Zn_i1);            # 30 _44:bat[:oid,:int] := BKCsetWriteMode(Zn_i1:bat[:oid,:int]) {G}
    bat.order(Zn_i1);                   # 31 _45:bat[:oid,:int] := BKCorder(Zn_i1:bat[:oid,:int]) {G}
    io.print(Zn_i1);                    # 32 _46:void := IOprint_val(Zn_i1:bat[:oid,:int]) 
    Zn_i2 := algebra.sortReverse(n_i);  # 33 Zn_i2:bat[:oid,:int] := ALGhsort_rev(n_i:bat[:oid,:int]) {G}
    io.print(Zn_i2);                    # 34 _48:void := IOprint_val(Zn_i2:bat[:oid,:int]) 
    Zn_i3 := algebra.copy(n_i);         # 35 Zn_i3:bat[:oid,:int] := ALGcopy(n_i:bat[:oid,:int]) {G}
    bat.setWriteMode(Zn_i3);            # 36 _50:bat[:oid,:int] := BKCsetWriteMode(Zn_i3:bat[:oid,:int]) {G}
    bat.orderReverse(Zn_i3);            # 37 _51:bat[:oid,:int] := BKCorder_rev(Zn_i3:bat[:oid,:int]) {G}
    io.print(Zn_i3);                    # 38 _52:void := IOprint_val(Zn_i3:bat[:oid,:int]) 
    io.print(i_n);                      # 39 _53:void := IOprint_val(i_n:bat[:int,:oid]) 
    Zi_n := algebra.sort(i_n);          # 40 Zi_n:bat[:int,:oid] := ALGhsort(i_n:bat[:int,:oid]) {G}
    io.print(Zi_n);                     # 41 _55:void := IOprint_val(Zi_n:bat[:int,:oid]) 
    Zi_n := algebra.copy(i_n);          # 42 Zi_n:bat[:int,:oid] := ALGcopy(i_n:bat[:int,:oid]) {G}
    bat.setWriteMode(Zi_n);             # 43 _56:bat[:int,:oid] := BKCsetWriteMode(Zi_n:bat[:int,:oid]) {G}
    bat.order(Zi_n);                    # 44 _57:bat[:int,:oid] := BKCorder(Zi_n:bat[:int,:oid]) {G}
    io.print(Zi_n);                     # 45 _58:void := IOprint_val(Zi_n:bat[:int,:oid]) 
    Zi_n := algebra.sortReverse(i_n);   # 46 Zi_n:bat[:int,:oid] := ALGhsort_rev(i_n:bat[:int,:oid]) {G}
    io.print(Zi_n);                     # 47 _59:void := IOprint_val(Zi_n:bat[:int,:oid]) 
    Zi_n := algebra.copy(i_n);          # 48 Zi_n:bat[:int,:oid] := ALGcopy(i_n:bat[:int,:oid]) {G}
    bat.setWriteMode(Zi_n);             # 49 _60:bat[:int,:oid] := BKCsetWriteMode(Zi_n:bat[:int,:oid]) {G}
    bat.orderReverse(Zi_n);             # 50 _61:bat[:int,:oid] := BKCorder_rev(Zi_n:bat[:int,:oid]) {G}
    io.print(Zi_n);                     # 51 _62:void := IOprint_val(Zi_n:bat[:int,:oid]) 
    io.print(v_i);                      # 52 _63:void := IOprint_val(v_i:bat[:oid,:int]) 
    Zv_i := algebra.sort(v_i);          # 53 Zv_i:bat[:oid,:int] := ALGhsort(v_i:bat[:oid,:int]) {G}
    io.print(Zv_i);                     # 54 _65:void := IOprint_val(Zv_i:bat[:oid,:int]) 
    Zv_i := algebra.copy(v_i);          # 55 Zv_i:bat[:oid,:int] := ALGcopy(v_i:bat[:oid,:int]) {G}
    bat.setWriteMode(Zv_i);             # 56 _66:bat[:oid,:int] := BKCsetWriteMode(Zv_i:bat[:oid,:int]) {G}
    bat.order(Zv_i);                    # 57 _67:bat[:oid,:int] := BKCorder(Zv_i:bat[:oid,:int]) {G}
    io.print(Zv_i);                     # 58 _68:void := IOprint_val(Zv_i:bat[:oid,:int]) 
    Zv_i := algebra.sortReverse(v_i);   # 59 Zv_i:bat[:oid,:int] := ALGhsort_rev(v_i:bat[:oid,:int]) {G}
    io.print(Zv_i);                     # 60 _69:void := IOprint_val(Zv_i:bat[:oid,:int]) 
    Zv_i := algebra.copy(v_i);          # 61 Zv_i:bat[:oid,:int] := ALGcopy(v_i:bat[:oid,:int]) {G}
    bat.setWriteMode(Zv_i);             # 62 _70:bat[:oid,:int] := BKCsetWriteMode(Zv_i:bat[:oid,:int]) {G}
    bat.orderReverse(Zv_i);             # 63 _71:bat[:oid,:int] := BKCorder_rev(Zv_i:bat[:oid,:int]) {G}
    io.print(Zv_i);                     # 64 _72:void := IOprint_val(Zv_i:bat[:oid,:int]) 
    io.print(i_v);                      # 65 _73:void := IOprint_val(i_v:bat[:int,:oid]) 
    Zi_v := algebra.sort(i_v);          # 66 Zi_v:bat[:int,:oid] := ALGhsort(i_v:bat[:int,:oid]) {G}
    io.print(Zi_v);                     # 67 _75:void := IOprint_val(Zi_v:bat[:int,:oid]) 
    Zi_v := algebra.copy(i_v);          # 68 Zi_v:bat[:int,:oid] := ALGcopy(i_v:bat[:int,:oid]) {G}
    bat.setWriteMode(Zi_v);             # 69 _76:bat[:int,:oid] := BKCsetWriteMode(Zi_v:bat[:int,:oid]) {G}
    bat.order(Zi_v);                    # 70 _77:bat[:int,:oid] := BKCorder(Zi_v:bat[:int,:oid]) {G}
    io.print(Zi_v);                     # 71 _78:void := IOprint_val(Zi_v:bat[:int,:oid]) 
    Zi_v := algebra.sortReverse(i_v);   # 72 Zi_v:bat[:int,:oid] := ALGhsort_rev(i_v:bat[:int,:oid]) {G}
    io.print(Zi_v);                     # 73 _79:void := IOprint_val(Zi_v:bat[:int,:oid]) 
    Zi_v := algebra.copy(i_v);          # 74 Zi_v:bat[:int,:oid] := ALGcopy(i_v:bat[:int,:oid]) {G}
    bat.setWriteMode(Zi_v);             # 75 _80:bat[:int,:oid] := BKCsetWriteMode(Zi_v:bat[:int,:oid]) {G}
    bat.orderReverse(Zi_v);             # 76 _81:bat[:int,:oid] := BKCorder_rev(Zi_v:bat[:int,:oid]) {G}
    io.print(Zi_v);                     # 77 _82:void := IOprint_val(Zi_v:bat[:int,:oid]) 
    io.print(o_i);                      # 78 _83:void := IOprint_val(o_i:bat[:oid,:int]) 
    Zo_i := algebra.sort(o_i);          # 79 Zo_i:bat[:oid,:int] := ALGhsort(o_i:bat[:oid,:int]) {G}
    io.print(Zo_i);                     # 80 _85:void := IOprint_val(Zo_i:bat[:oid,:int]) 
    Zo_i := algebra.copy(o_i);          # 81 Zo_i:bat[:oid,:int] := ALGcopy(o_i:bat[:oid,:int]) {G}
    bat.setWriteMode(Zo_i);             # 82 _86:bat[:oid,:int] := BKCsetWriteMode(Zo_i:bat[:oid,:int]) {G}
    bat.order(Zo_i);                    # 83 _87:bat[:oid,:int] := BKCorder(Zo_i:bat[:oid,:int]) {G}
    io.print(Zo_i);                     # 84 _88:void := IOprint_val(Zo_i:bat[:oid,:int]) 
    Zo_i := algebra.sortReverse(o_i);   # 85 Zo_i:bat[:oid,:int] := ALGhsort_rev(o_i:bat[:oid,:int]) {G}
    io.print(Zo_i);                     # 86 _89:void := IOprint_val(Zo_i:bat[:oid,:int]) 
    Zo_i := algebra.copy(o_i);          # 87 Zo_i:bat[:oid,:int] := ALGcopy(o_i:bat[:oid,:int]) {G}
    bat.setWriteMode(Zo_i);             # 88 _90:bat[:oid,:int] := BKCsetWriteMode(Zo_i:bat[:oid,:int]) {G}
    bat.orderReverse(Zo_i);             # 89 _91:bat[:oid,:int] := BKCorder_rev(Zo_i:bat[:oid,:int]) {G}
    io.print(Zo_i);                     # 90 _92:void := IOprint_val(Zo_i:bat[:oid,:int]) 
    io.print(i_o);                      # 91 _93:void := IOprint_val(i_o:bat[:int,:oid]) 
    Zi_o := algebra.sort(i_o);          # 92 Zi_o:bat[:int,:oid] := ALGhsort(i_o:bat[:int,:oid]) {G}
    io.print(Zi_o);                     # 93 _95:void := IOprint_val(Zi_o:bat[:int,:oid]) 
    Zi_o1 := algebra.copy(i_o);         # 94 Zi_o1:bat[:int,:oid] := ALGcopy(i_o:bat[:int,:oid]) {G}
    bat.setWriteMode(Zi_o1);            # 95 _97:bat[:int,:oid] := BKCsetWriteMode(Zi_o1:bat[:int,:oid]) {G}
    bat.order(Zi_o1);                   # 96 _98:bat[:int,:oid] := BKCorder(Zi_o1:bat[:int,:oid]) {G}
    io.print(Zi_o1);                    # 97 _99:void := IOprint_val(Zi_o1:bat[:int,:oid]) 
    Zi_o2 := algebra.sortReverse(i_o);  # 98 Zi_o2:bat[:int,:oid] := ALGhsort_rev(i_o:bat[:int,:oid]) {G}
    io.print(Zi_o2);                    # 99 _101:void := IOprint_val(Zi_o2:bat[:int,:oid]) 
    Zi_o3 := algebra.copy(i_o);         #100 Zi_o3:bat[:int,:oid] := ALGcopy(i_o:bat[:int,:oid]) {G}
    bat.setWriteMode(Zi_o3);            #101 _103:bat[:int,:oid] := BKCsetWriteMode(Zi_o3:bat[:int,:oid]) {G}
    bat.orderReverse(Zi_o3);            #102 _104:bat[:int,:oid] := BKCorder_rev(Zi_o3:bat[:int,:oid]) {G}
    io.print(Zi_o3);                    #103 _105:void := IOprint_val(Zi_o3:bat[:int,:oid]) 
end main;                               #104  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  3	  ]
[ 1,	  9	  ]
[ 9,	  8	  ]
[ 6,	  4	  ]
[ 5,	  2	  ]
[ 3,	  0	  ]
[ 0,	  1	  ]
[ 8,	  6	  ]
[ 4,	  5	  ]
[ 7,	  7	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  2	  ]
[ nil,	  1	  ]
[ nil,	  9	  ]
[ nil,	  6	  ]
[ nil,	  5	  ]
[ nil,	  3	  ]
[ nil,	  0	  ]
[ nil,	  8	  ]
[ nil,	  4	  ]
[ nil,	  7	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  2	  ]
[ nil,	  1	  ]
[ nil,	  9	  ]
[ nil,	  6	  ]
[ nil,	  5	  ]
[ nil,	  3	  ]
[ nil,	  0	  ]
[ nil,	  8	  ]
[ nil,	  4	  ]
[ nil,	  7	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  2	  ]
[ nil,	  1	  ]
[ nil,	  9	  ]
[ nil,	  6	  ]
[ nil,	  5	  ]
[ nil,	  3	  ]
[ nil,	  0	  ]
[ nil,	  8	  ]
[ nil,	  4	  ]
[ nil,	  7	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  2	  ]
[ nil,	  1	  ]
[ nil,	  9	  ]
[ nil,	  6	  ]
[ nil,	  5	  ]
[ nil,	  3	  ]
[ nil,	  0	  ]
[ nil,	  8	  ]
[ nil,	  4	  ]
[ nil,	  7	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  2	  ]
[ nil,	  1	  ]
[ nil,	  9	  ]
[ nil,	  6	  ]
[ nil,	  5	  ]
[ nil,	  3	  ]
[ nil,	  0	  ]
[ nil,	  8	  ]
[ nil,	  4	  ]
[ nil,	  7	  ]
#-----------------#
# h	t	  # name
# int	void	  # type
#-----------------#
[ 2,	  nil	  ]
[ 1,	  nil	  ]
[ 9,	  nil	  ]
[ 6,	  nil	  ]
[ 5,	  nil	  ]
[ 3,	  nil	  ]
[ 0,	  nil	  ]
[ 8,	  nil	  ]
[ 4,	  nil	  ]
[ 7,	  nil	  ]
#-----------------#
# h	t	  # name
# int	void	  # type
#-----------------#
[ 0,	  nil	  ]
[ 1,	  nil	  ]
[ 2,	  nil	  ]
[ 3,	  nil	  ]
[ 4,	  nil	  ]
[ 5,	  nil	  ]
[ 6,	  nil	  ]
[ 7,	  nil	  ]
[ 8,	  nil	  ]
[ 9,	  nil	  ]
#-----------------#
# h	t	  # name
# int	void	  # type
#-----------------#
[ 0,	  nil	  ]
[ 1,	  nil	  ]
[ 2,	  nil	  ]
[ 3,	  nil	  ]
[ 4,	  nil	  ]
[ 5,	  nil	  ]
[ 6,	  nil	  ]
[ 7,	  nil	  ]
[ 8,	  nil	  ]
[ 9,	  nil	  ]
#-----------------#
# h	t	  # name
# int	void	  # type
#-----------------#
[ 9,	  nil	  ]
[ 8,	  nil	  ]
[ 7,	  nil	  ]
[ 6,	  nil	  ]
[ 5,	  nil	  ]
[ 4,	  nil	  ]
[ 3,	  nil	  ]
[ 2,	  nil	  ]
[ 1,	  nil	  ]
[ 0,	  nil	  ]
#-----------------#
# h	t	  # name
# int	void	  # type
#-----------------#
[ 9,	  nil	  ]
[ 8,	  nil	  ]
[ 7,	  nil	  ]
[ 6,	  nil	  ]
[ 5,	  nil	  ]
[ 4,	  nil	  ]
[ 3,	  nil	  ]
[ 2,	  nil	  ]
[ 1,	  nil	  ]
[ 0,	  nil	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  2	  ]
[ 1@0,	  1	  ]
[ 2@0,	  9	  ]
[ 3@0,	  6	  ]
[ 4@0,	  5	  ]
[ 5@0,	  3	  ]
[ 6@0,	  0	  ]
[ 7@0,	  8	  ]
[ 8@0,	  4	  ]
[ 9@0,	  7	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  2	  ]
[ 1@0,	  1	  ]
[ 2@0,	  9	  ]
[ 3@0,	  6	  ]
[ 4@0,	  5	  ]
[ 5@0,	  3	  ]
[ 6@0,	  0	  ]
[ 7@0,	  8	  ]
[ 8@0,	  4	  ]
[ 9@0,	  7	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  2	  ]
[ 1@0,	  1	  ]
[ 2@0,	  9	  ]
[ 3@0,	  6	  ]
[ 4@0,	  5	  ]
[ 5@0,	  3	  ]
[ 6@0,	  0	  ]
[ 7@0,	  8	  ]
[ 8@0,	  4	  ]
[ 9@0,	  7	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 9@0,	  7	  ]
[ 8@0,	  4	  ]
[ 7@0,	  8	  ]
[ 6@0,	  0	  ]
[ 5@0,	  3	  ]
[ 4@0,	  5	  ]
[ 3@0,	  6	  ]
[ 2@0,	  9	  ]
[ 1@0,	  1	  ]
[ 0@0,	  2	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 9@0,	  7	  ]
[ 8@0,	  4	  ]
[ 7@0,	  8	  ]
[ 6@0,	  0	  ]
[ 5@0,	  3	  ]
[ 4@0,	  5	  ]
[ 3@0,	  6	  ]
[ 2@0,	  9	  ]
[ 1@0,	  1	  ]
[ 0@0,	  2	  ]
#-----------------#
# h	t	  # name
# int	void	  # type
#-----------------#
[ 2,	  0@0	  ]
[ 1,	  1@0	  ]
[ 9,	  2@0	  ]
[ 6,	  3@0	  ]
[ 5,	  4@0	  ]
[ 3,	  5@0	  ]
[ 0,	  6@0	  ]
[ 8,	  7@0	  ]
[ 4,	  8@0	  ]
[ 7,	  9@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 0,	  6@0	  ]
[ 1,	  1@0	  ]
[ 2,	  0@0	  ]
[ 3,	  5@0	  ]
[ 4,	  8@0	  ]
[ 5,	  4@0	  ]
[ 6,	  3@0	  ]
[ 7,	  9@0	  ]
[ 8,	  7@0	  ]
[ 9,	  2@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 0,	  6@0	  ]
[ 1,	  1@0	  ]
[ 2,	  0@0	  ]
[ 3,	  5@0	  ]
[ 4,	  8@0	  ]
[ 5,	  4@0	  ]
[ 6,	  3@0	  ]
[ 7,	  9@0	  ]
[ 8,	  7@0	  ]
[ 9,	  2@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 9,	  2@0	  ]
[ 8,	  7@0	  ]
[ 7,	  9@0	  ]
[ 6,	  3@0	  ]
[ 5,	  4@0	  ]
[ 4,	  8@0	  ]
[ 3,	  5@0	  ]
[ 2,	  0@0	  ]
[ 1,	  1@0	  ]
[ 0,	  6@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 9,	  2@0	  ]
[ 8,	  7@0	  ]
[ 7,	  9@0	  ]
[ 6,	  3@0	  ]
[ 5,	  4@0	  ]
[ 4,	  8@0	  ]
[ 3,	  5@0	  ]
[ 2,	  0@0	  ]
[ 1,	  1@0	  ]
[ 0,	  6@0	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 3@0,	  2	  ]
[ 9@0,	  1	  ]
[ 8@0,	  9	  ]
[ 4@0,	  6	  ]
[ 2@0,	  5	  ]
[ 0@0,	  3	  ]
[ 1@0,	  0	  ]
[ 6@0,	  8	  ]
[ 5@0,	  4	  ]
[ 7@0,	  7	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  3	  ]
[ 1@0,	  0	  ]
[ 2@0,	  5	  ]
[ 3@0,	  2	  ]
[ 4@0,	  6	  ]
[ 5@0,	  4	  ]
[ 6@0,	  8	  ]
[ 7@0,	  7	  ]
[ 8@0,	  9	  ]
[ 9@0,	  1	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  3	  ]
[ 1@0,	  0	  ]
[ 2@0,	  5	  ]
[ 3@0,	  2	  ]
[ 4@0,	  6	  ]
[ 5@0,	  4	  ]
[ 6@0,	  8	  ]
[ 7@0,	  7	  ]
[ 8@0,	  9	  ]
[ 9@0,	  1	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 9@0,	  1	  ]
[ 8@0,	  9	  ]
[ 7@0,	  7	  ]
[ 6@0,	  8	  ]
[ 5@0,	  4	  ]
[ 4@0,	  6	  ]
[ 3@0,	  2	  ]
[ 2@0,	  5	  ]
[ 1@0,	  0	  ]
[ 0@0,	  3	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 9@0,	  1	  ]
[ 8@0,	  9	  ]
[ 7@0,	  7	  ]
[ 6@0,	  8	  ]
[ 5@0,	  4	  ]
[ 4@0,	  6	  ]
[ 3@0,	  2	  ]
[ 2@0,	  5	  ]
[ 1@0,	  0	  ]
[ 0@0,	  3	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 2,	  3@0	  ]
[ 1,	  9@0	  ]
[ 9,	  8@0	  ]
[ 6,	  4@0	  ]
[ 5,	  2@0	  ]
[ 3,	  0@0	  ]
[ 0,	  1@0	  ]
[ 8,	  6@0	  ]
[ 4,	  5@0	  ]
[ 7,	  7@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 0,	  1@0	  ]
[ 1,	  9@0	  ]
[ 2,	  3@0	  ]
[ 3,	  0@0	  ]
[ 4,	  5@0	  ]
[ 5,	  2@0	  ]
[ 6,	  4@0	  ]
[ 7,	  7@0	  ]
[ 8,	  6@0	  ]
[ 9,	  8@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 0,	  1@0	  ]
[ 1,	  9@0	  ]
[ 2,	  3@0	  ]
[ 3,	  0@0	  ]
[ 4,	  5@0	  ]
[ 5,	  2@0	  ]
[ 6,	  4@0	  ]
[ 7,	  7@0	  ]
[ 8,	  6@0	  ]
[ 9,	  8@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 9,	  8@0	  ]
[ 8,	  6@0	  ]
[ 7,	  7@0	  ]
[ 6,	  4@0	  ]
[ 5,	  2@0	  ]
[ 4,	  5@0	  ]
[ 3,	  0@0	  ]
[ 2,	  3@0	  ]
[ 1,	  9@0	  ]
[ 0,	  1@0	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 9,	  8@0	  ]
[ 8,	  6@0	  ]
[ 7,	  7@0	  ]
[ 6,	  4@0	  ]
[ 5,	  2@0	  ]
[ 4,	  5@0	  ]
[ 3,	  0@0	  ]
[ 2,	  3@0	  ]
[ 1,	  9@0	  ]
[ 0,	  1@0	  ]

# 08:04:37 >  
# 08:04:37 >  Done.
# 08:04:37 >  

