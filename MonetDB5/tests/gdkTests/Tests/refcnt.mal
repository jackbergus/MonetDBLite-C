function tmp():void;
	d:= bbp.getRefCount();
	dl:=bbp.getLRefCount();
	dn:= bbp.getNames();
	io.print(dn,d,dl);
end tmp;

#NOTE: the reference counter of bat(name) is during insertion
#      into bat(b) correctly increased
#PROC addBAT(bat b,str name) : void {
#	VAR add := new(int,int);
#	add.rename(name);
#	b.insert(name,add);
#}
function addBAT(b:bat[:str,:bat],name:str):void;
	add:= bat.new(:int,:int);
	bat.setName(add,name);
	i:= calc.bat(add);
	bat.insert(b,name,i);
end addBAT;
#
##BUG: bat(name) will not be deleted in the garbage collection
##     because the delete doesn't decrease the reference counter
#PROC delBAT(bat b,str name) : void {
#	b.delete(name);
#}
function delBAT(b:bat[:any_1,:any_2],name:str):void;
	bat.delete(b,name);
end delBAT;
#
#PROC createBAT(str name) : bat[int,int] {
#	VAR res := new(int,int);
#	res.rename(name);
#	RETURN res;
#}
#NOTE we can not return  (yet) a (:bat,:bat[:int,:int])
#into a multiplex. This means that the BATs created
# are immediately garbage collected when leaving the
#function. A hack would be to provide explicit incref/decref
function createBAT(name:str):bat;
	res:= bat.new(:int,:int);
	bat.setName(res,name);	
	i:= calc.bat(res);
	return i;
end createBAT;
#
#tmp();
user.tmp();
#
#{
#
#VAR top := new(str,bat);
#top.rename("top");
top := bat.new(:str,:bat);
bat.setName(top,"top");
mdb.start();

#
#addBAT(top,"one");
#addBAT(top,"two");
user.addBAT(top,"one");
user.addBAT(top,"two");
#tmp();
user.tmp();
#
#delBAT(top,"one");
user.delBAT(top,"one");
#tmp();
user.tmp();
#
#VAR i := new(oid,str);
m:= bat.new(:oid,:str);
#i.insert(oid(10),"ten");
bat.insert(m,10:oid,"ten");
#i.insert(oid(20),"twenty");
bat.insert(m,20:oid,"twenty");
#VAR res := [createBAT](i);
r:bat[:oid,:bat]:= optimizer.multiplex("user.createBAT",m);
io.print(r);
#tmp();
user.tmp();
#
#top := nil;
#res := nil;
#
#}
#
##BUGS:
##- bat("one") still exists, due to not decreasing the reference counter
##  at the delete from bat("top")
##- bat("ten") and bat("twenty") still exist, due to creation during multiplex
##  operation (?)
#tmp();
#quit();
clients.quit();
