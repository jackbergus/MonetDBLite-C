a:=bat.new(:void,:int);
bat.setSequenceBase(a,0@0);
ar:= bat.reverse(a);
io.print(ar);
b:=bat.new(:void,:int);
bat.setSequenceBase(b,0@0);
io.print(b);

ar:= bat.reverse(a);
c:= algebra.crossproduct(ar,ar);
io.print(c);
bb:= algebra.crossproduct(b,b);
io.print(bb);
ab:= algebra.crossproduct(ar,b);
io.print(ab);
ba:= algebra.crossproduct(b,ar);
io.print(ba);

bat.append(a,1);
ar:= bat.reverse(a);
io.print(ar);

ar:= bat.reverse(a);
c:= algebra.crossproduct(ar,ar);
io.print(c);
bb:= algebra.crossproduct(b,b);
io.print(bb);
ab:= algebra.crossproduct(ar,b);
io.print(ab);
ba:= algebra.crossproduct(b,ar);
io.print(ba);

bat.append(b,11);
io.print(b);

ar:= bat.reverse(a);
c:= algebra.crossproduct(ar,ar);
io.print(c);
bb:= algebra.crossproduct(b,b);
io.print(bb);
ab:= algebra.crossproduct(ar,b);
io.print(ab);
ba:= algebra.crossproduct(b,ar);
io.print(ba);

bat.append(a,2);
ar:= bat.reverse(a);
io.print(ar);

ar:= bat.reverse(a);
c:= algebra.crossproduct(ar,ar);
io.print(c);
bb:= algebra.crossproduct(b,b);
io.print(bb);
ab:= algebra.crossproduct(ar,b);
io.print(ab);
ba:= algebra.crossproduct(b,ar);
io.print(ba);

bat.append(b,22);
io.print(b);

ar:= bat.reverse(a);
c:= algebra.crossproduct(ar,ar);
io.print(c);
bb:= algebra.crossproduct(b,b);
io.print(bb);
ab:= algebra.crossproduct(ar,b);
io.print(ab);
ba:= algebra.crossproduct(b,ar);
io.print(ba);
