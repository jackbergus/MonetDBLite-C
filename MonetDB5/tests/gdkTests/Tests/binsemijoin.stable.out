stdout of test 'binsemijoin` in directory 'tests/gdkTests` itself:


# 09:01:02 >  
# 09:01:02 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=31140 --set monet_prompt= --trace --dbname=mTests_tests_gdkTests  binsemijoin.mal < /dev/null
# 09:01:02 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_gdkTests
# Visit http://monetdb.cwi.nl/ for further information
#a:=bat.new(:void,:int);
#bat.setSequenceBase(a,0@0);
#bat.append(a,0);
#bat.append(a,1);
#
#b:=bat.new(:int,:int);
#bat.insert(b,0,0);
#bat.insert(b,0,1);
#bat.insert(b,0,2);
#bat.insert(b,0,3);
#bat.insert(b,0,4);
#bat.insert(b,0,5);
#bat.insert(b,0,6);
#bat.insert(b,0,7);
#bat.insert(b,0,8);
#bat.insert(b,0,9);
#bat.insert(b,1,0);
#bat.insert(b,1,1);
#bat.insert(b,1,2);
#bat.insert(b,1,3);
#bat.insert(b,1,4);
#bat.insert(b,1,5);
#bat.insert(b,1,6);
#bat.insert(b,1,7);
#bat.insert(b,1,8);
#bat.insert(b,1,9);
#
#cr:=bat.reverse(b);
#co:=batcalc.oid(cr);
#c:= bat.reverse(co);
#d:=bat.reverse(a);
#
#io.print(a);
#io.print(d);
#io.print(b);
#io.print(c);
#
#v:=algebra.semijoin(b,d);
#io.print(v);
#w:=algebra.semijoin(d,b);
#io.print(w);
#
#e:= algebra.semijoin(c,a);
#io.print(e);
#f:= algebra.semijoin(a,c);
#io.print(f);
#
function user.main():void;              #  0 main:void {G}
    a := bat.new(:oid,:int);            #  1 a:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    bat.append(a,0);                    #  2 _4:void := BKCappend_val_wrap(a:bat[:oid,:int], _5:int) 
    bat.append(a,1);                    #  3 _6:void := BKCappend_val_wrap(a:bat[:oid,:int], _7:int) 
    b := bat.new(:int,:int);            #  4 b:bat[:int,:int] := CMDBATnew(_3:int, _3:int) {G}
    bat.insert(b,0,0);                  #  5 _9:void := BKCinsert_bun(b:bat[:int,:int], _5:int, _5:int) 
    bat.insert(b,0,1);                  #  6 _10:void := BKCinsert_bun(b:bat[:int,:int], _5:int, _7:int) 
    bat.insert(b,0,2);                  #  7 _11:void := BKCinsert_bun(b:bat[:int,:int], _5:int, _12:int) 
    bat.insert(b,0,3);                  #  8 _13:void := BKCinsert_bun(b:bat[:int,:int], _5:int, _14:int) 
    bat.insert(b,0,4);                  #  9 _15:void := BKCinsert_bun(b:bat[:int,:int], _5:int, _16:int) 
    bat.insert(b,0,5);                  # 10 _17:void := BKCinsert_bun(b:bat[:int,:int], _5:int, _18:int) 
    bat.insert(b,0,6);                  # 11 _19:void := BKCinsert_bun(b:bat[:int,:int], _5:int, _20:int) 
    bat.insert(b,0,7);                  # 12 _21:void := BKCinsert_bun(b:bat[:int,:int], _5:int, _22:int) 
    bat.insert(b,0,8);                  # 13 _23:void := BKCinsert_bun(b:bat[:int,:int], _5:int, _24:int) 
    bat.insert(b,0,9);                  # 14 _25:void := BKCinsert_bun(b:bat[:int,:int], _5:int, _26:int) 
    bat.insert(b,1,0);                  # 15 _27:void := BKCinsert_bun(b:bat[:int,:int], _7:int, _5:int) 
    bat.insert(b,1,1);                  # 16 _28:void := BKCinsert_bun(b:bat[:int,:int], _7:int, _7:int) 
    bat.insert(b,1,2);                  # 17 _29:void := BKCinsert_bun(b:bat[:int,:int], _7:int, _12:int) 
    bat.insert(b,1,3);                  # 18 _30:void := BKCinsert_bun(b:bat[:int,:int], _7:int, _14:int) 
    bat.insert(b,1,4);                  # 19 _31:void := BKCinsert_bun(b:bat[:int,:int], _7:int, _16:int) 
    bat.insert(b,1,5);                  # 20 _32:void := BKCinsert_bun(b:bat[:int,:int], _7:int, _18:int) 
    bat.insert(b,1,6);                  # 21 _33:void := BKCinsert_bun(b:bat[:int,:int], _7:int, _20:int) 
    bat.insert(b,1,7);                  # 22 _34:void := BKCinsert_bun(b:bat[:int,:int], _7:int, _22:int) 
    bat.insert(b,1,8);                  # 23 _35:void := BKCinsert_bun(b:bat[:int,:int], _7:int, _24:int) 
    bat.insert(b,1,9);                  # 24 _36:void := BKCinsert_bun(b:bat[:int,:int], _7:int, _26:int) 
    cr := bat.reverse(b);               # 25 cr:bat[:int,:int] := BKCreverse(b:bat[:int,:int]) {G}
    co := batcalc.oid(cr);              # 26 co:bat[:int,:oid] := CMDconvert_int_oid(cr:bat[:int,:int]) {G}
    c := bat.reverse(co);               # 27 c:bat[:oid,:int] := BKCreverse(co:bat[:int,:oid]) {G}
    d := bat.reverse(a);                # 28 d:bat[:int,:oid] := BKCreverse(a:bat[:oid,:int]) {G}
    io.print(a);                        # 29 _41:void := IOprint_val(a:bat[:oid,:int]) 
    io.print(d);                        # 30 _42:void := IOprint_val(d:bat[:int,:oid]) 
    io.print(b);                        # 31 _43:void := IOprint_val(b:bat[:int,:int]) 
    io.print(c);                        # 32 _44:void := IOprint_val(c:bat[:oid,:int]) 
    v := algebra.semijoin(b,d);         # 33 v:bat[:int,:int] := ALGsemijoin(b:bat[:int,:int], d:bat[:int,:oid]) {G}
    io.print(v);                        # 34 _46:void := IOprint_val(v:bat[:int,:int]) 
    w := algebra.semijoin(d,b);         # 35 w:bat[:int,:oid] := ALGsemijoin(d:bat[:int,:oid], b:bat[:int,:int]) {G}
    io.print(w);                        # 36 _48:void := IOprint_val(w:bat[:int,:oid]) 
    e := algebra.semijoin(c,a);         # 37 e:bat[:oid,:int] := ALGsemijoin(c:bat[:oid,:int], a:bat[:oid,:int]) {G}
    io.print(e);                        # 38 _50:void := IOprint_val(e:bat[:oid,:int]) 
    f := algebra.semijoin(a,c);         # 39 f:bat[:oid,:int] := ALGsemijoin(a:bat[:oid,:int], c:bat[:oid,:int]) {G}
    io.print(f);                        # 40 _52:void := IOprint_val(f:bat[:oid,:int]) 
end main;	# 41  
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
#-----------------#
# t	h	  # name
# int	void	  # type
#-----------------#
[ 0,	  0@0	  ]
[ 1,	  1@0	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 0,	  0	  ]
[ 0,	  1	  ]
[ 0,	  2	  ]
[ 0,	  3	  ]
[ 0,	  4	  ]
[ 0,	  5	  ]
[ 0,	  6	  ]
[ 0,	  7	  ]
[ 0,	  8	  ]
[ 0,	  9	  ]
[ 1,	  0	  ]
[ 1,	  1	  ]
[ 1,	  2	  ]
[ 1,	  3	  ]
[ 1,	  4	  ]
[ 1,	  5	  ]
[ 1,	  6	  ]
[ 1,	  7	  ]
[ 1,	  8	  ]
[ 1,	  9	  ]
#-----------------#
# t	h	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 0@0,	  1	  ]
[ 0@0,	  2	  ]
[ 0@0,	  3	  ]
[ 0@0,	  4	  ]
[ 0@0,	  5	  ]
[ 0@0,	  6	  ]
[ 0@0,	  7	  ]
[ 0@0,	  8	  ]
[ 0@0,	  9	  ]
[ 1@0,	  0	  ]
[ 1@0,	  1	  ]
[ 1@0,	  2	  ]
[ 1@0,	  3	  ]
[ 1@0,	  4	  ]
[ 1@0,	  5	  ]
[ 1@0,	  6	  ]
[ 1@0,	  7	  ]
[ 1@0,	  8	  ]
[ 1@0,	  9	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 0,	  0	  ]
[ 0,	  1	  ]
[ 0,	  2	  ]
[ 0,	  3	  ]
[ 0,	  4	  ]
[ 0,	  5	  ]
[ 0,	  6	  ]
[ 0,	  7	  ]
[ 0,	  8	  ]
[ 0,	  9	  ]
[ 1,	  0	  ]
[ 1,	  1	  ]
[ 1,	  2	  ]
[ 1,	  3	  ]
[ 1,	  4	  ]
[ 1,	  5	  ]
[ 1,	  6	  ]
[ 1,	  7	  ]
[ 1,	  8	  ]
[ 1,	  9	  ]
#-----------------#
# h	t	  # name
# int	oid	  # type
#-----------------#
[ 0,	  0@0	  ]
[ 1,	  1@0	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 0@0,	  1	  ]
[ 0@0,	  2	  ]
[ 0@0,	  3	  ]
[ 0@0,	  4	  ]
[ 0@0,	  5	  ]
[ 0@0,	  6	  ]
[ 0@0,	  7	  ]
[ 0@0,	  8	  ]
[ 0@0,	  9	  ]
[ 1@0,	  0	  ]
[ 1@0,	  1	  ]
[ 1@0,	  2	  ]
[ 1@0,	  3	  ]
[ 1@0,	  4	  ]
[ 1@0,	  5	  ]
[ 1@0,	  6	  ]
[ 1@0,	  7	  ]
[ 1@0,	  8	  ]
[ 1@0,	  9	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]

# 09:01:02 >  
# 09:01:02 >  Done.
# 09:01:02 >  

