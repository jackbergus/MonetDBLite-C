# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
	mil.line("var k1 := new(void,int,1000);");
	k1 := new(nil:void,nil:int,1000);
	mil.line("var i := 0;");
	i := 0;
	mil.line("while(i < 1000) {");
barrier	aa_a := true;
barrier	ba_a := <(i,1000);
	mil.line("        k1.insert(nil,i);");
	ca_a := insert(k1,nil,i);
	mil.line("        i :+= 1;");
	da_a := +(i,1);
	mil.line("}");
redo	aa_a;
exit	ba_a;
exit	aa_a;
	mil.line("var m1 := new(void,int,1000000);");
	m1 := new(nil:void,nil:int,1000000);
	mil.line("i := 0;");
	i := 0;
	mil.line("while(i < 1000) {");
barrier	ea_a := true;
barrier	fa_a := <(i,1000);
	mil.line("        m1.insert(k1);");
	ga_a := insert(m1,k1);
	mil.line("        i :+= 1;");
	ha_a := +(i,1);
	mil.line("}");
redo	ea_a;
exit	fa_a;
exit	ea_a;
	mil.line("m1.seqbase(0@0);");
	ia_a := bat.setSequenceBase(m1,0@0);
	mil.line("dir(\"tmp\");");
	ja_a := dir("tmp");
	mil.line("i := 0;");
	i := 0;
	mil.line("mem_maxsize(lng(10*1024*1024));");
	ka_a := *(1024,1024);
	la_a := *(10,ka_a);
	ma_a := lng(la_a);
	na_a := mem_maxsize(ma_a);
	mil.line("#vm_maxsize(lng(100*1024*1024));\n");
barrier	oa_a := true;
barrier	pa_a := <(i,10);
	mil.line("#mem_usage(100000).print();\n");
	qa_a := print("DIR");
	mil.line("\tdir(\"b_\");");
	ra_a := dir("b_");
	mil.line("#vm_usage(100000).print();\n");
	sa_a := print("COPY");
	mil.line("        var b := m1.copy().rename(sprintf(\"b_%d\",i :+= 1));");
	ta_a := +(i,1);
	ua_a := sprintf("b_%d",ta_a);
	va_a := copy(m1);
	b := bat.setName(va_a,ua_a);
	mil.line("        b.persists(true).commit();");
	wa_a := persists(b,true);
	xa_a := commit(wa_a);
	mil.line("}");
redo	oa_a;
exit	pa_a;
exit	oa_a;
	mil.line("proc countall (..any..) : void {");
function countall(,countall:any$1...):void;
	mil.line("  var i := 0;");
	i := 0;
	mil.line("  while(i < $0) {");
barrier	ya_a := true;
	bb_a := mil.getVarTemp($0);
barrier	ab_a := <(i,bb_a);
	mil.line("     i :+= 1;");
	cb_a := +(i,1);
	mil.line("     $(i).count().print();");
	db_a := mil.getVarTemp(i);
	eb_a := count(db_a);
	fb_a := print(eb_a);
	mil.line("  }");
redo	ya_a;
exit	ab_a;
exit	ya_a;
end countall;
	mil.line("dir(\"b_\");");
	gb_a := dir("b_");
	mil.line("countall(bat(\"b_1\"),bat(\"b_2\"),bat(\"b_3\"),bat(\"b_4\"));");
	hb_a := new("b_1");
	ib_a := new("b_2");
	jb_a := new("b_3");
	kb_a := new("b_4");
	lb_a := countall(hb_a,ib_a,jb_a,kb_a);
	mil.line("dir(\"b_\");");
	mb_a := dir("b_");
	mil.line("quit();");
	nb_a := quit();
#Identifer 'rename' mapped to 'bat.setName'
#Identifer 'seqbase' mapped to 'bat.setSequenceBase'
