stdout of test 'test_05` in directory 'tests/suite_01` itself:


# 00:12:30 >  
# 00:12:30 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_01  test_05.mal </dev/null
# 00:12:30 >  

!WARNING: GDKlockHome: ignoring empty or invalid .gdk_lock.
!WARNING: BBPdir: initializing BBP.
# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_01
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("# escape sequences\n");
#	mil.line("# first some basics, escaped characters are normalized\n");
#	mil.line("print(\"got single quote \\' .\");\t# remove superfluous escapes");
#	ca_a := io.print("got single quote \' .");
#	mil.line("# remove superfluous escapes\n");
#	da_a := io.print("got single quote ' without escape");
#	mil.line("print(\"got tab \\t and single newline \\n .\");");
#	ea_a := io.print("got tab \t and single newline \n .");
#	mil.line("print(\"problem signalled before \\\\\\\"\");");
#	fa_a := io.print("problem signalled before \\\"");
#	mil.line("var t0:= \"got single quote \\' .\";\tt0.print();");
#	t0 := "got single quote \' .";
#	ga_a := io.print(t0);
#	mil.line("var t1:= \"got single quote ' without escape\";\tt1.print();");
#	t1 := "got single quote ' without escape";
#	ha_a := io.print(t1);
#	mil.line("var t2:= \"got tab \\t and single newline \\n .\"; t2.print();");
#	t2 := "got tab \t and single newline \n .";
#	ia_a := io.print(t2);
#	mil.line("var t3:= \"problem signalled before \\\\\\\"\"; t3.print();");
#	t3 := "problem signalled before \\\"";
#	ja_a := io.print(t3);
#	mil.line("# character constants\n");
#	c0 := "\n";
#	ka_a := io.print(c0);
#	mil.line("var c1:= \"\\'\"; c1.print();");
#	c1 := "\'";
#	la_a := io.print(c1);
#	mil.line("var c2:= \"\\\\\"; c2.print();");
#	c2 := "\\";
#	ma_a := io.print(c2);
#	mil.line("var s:=new(int,str,100);");
#	s := bbp.new(nil:int,nil:str,100);
#	mil.line("s.insert(2,\" single quote \\' got it\");");
#	na_a := bat.insert(s,2," single quote \' got it");
#	mil.line("s.insert(4,\" backslash  \\\\ \");");
#	oa_a := bat.insert(s,4," backslash  \\ ");
#	mil.line("s.insert(3,\" single quote ' \");");
#	pa_a := bat.insert(s,3," single quote ' ");
#	mil.line("s.print();");
#	qa_a := io.print(s);
#	mil.line("# Monet printf should behave as in C\n");
#	ra_a := io.printf("got single quote \' .\n");
#	mil.line("# remove superfluous escapes\n");
#	sa_a := io.printf("got single quote ' without escape\n");
#	mil.line("printf(\"got tab \\t and newline \\n .\\n\");");
#	ta_a := io.printf("got tab \t and newline \n .\n");
#	mil.line("printf(\"problem signalled before \\\\\\\"\\n\");");
#	ua_a := io.printf("problem signalled before \\\"\n");
#	mil.line("quit();");
#	va_a := clients.quit();
#
function user.main():int;	# 0  (main:int)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  (_32:str)
#Predefined code segment 	# 2  (_34:str)
#The compiler can not guarantee an accurate compilation, 	# 3  (_36:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  (_38:str)
#A few guidelines to maximize usefullness. 	# 5  (_40:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  (_42:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  (_44:str)
#use the "mil_schema" for additional support routines 	# 8  (_46:str)
    mil.line("setoid(oid(20000000));");	# 9 MILline (_47:void)<-(_48:str)
    aa_a := calc.oid(20000000);	# 10 CALCint2oid (aa_a:oid)<-(_50:int)
    ba_a := calc.setoid(aa_a);	# 11 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("# escape sequences\n");	# 12 MILline (_52:void)<-(_53:str)
    mil.line("# first some basics, escaped characters are normalized\n");	# 13 MILline (_54:void)<-(_55:str)
    mil.line("print(\"got single quote ' .\");\t# remove superfluous escapes");	# 14 MILline (_56:void)<-(_57:str)
    ca_a := io.print("got single quote ' .");	# 15 IOprint_val (ca_a:int)<-(_59:str)
    mil.line("# remove superfluous escapes\n");	# 16 MILline (_60:void)<-(_61:str)
    da_a := io.print("got single quote ' without escape");	# 17 IOprint_val (da_a:int)<-(_63:str)
    mil.line("print(\"got tab \t and single newline \n .\");");	# 18 MILline (_64:void)<-(_65:str)
    ea_a := io.print("got tab \t and single newline \n .");	# 19 IOprint_val (ea_a:int)<-(_67:str)
    mil.line("print(\"problem signalled before \\\"\");");	# 20 MILline (_68:void)<-(_69:str)
    fa_a := io.print("problem signalled before \\\"");	# 21 IOprint_val (fa_a:int)<-(_71:str)
    mil.line("var t0:= \"got single quote ' .\";\tt0.print();");	# 22 MILline (_72:void)<-(_73:str)
    t0 := "got single quote ' .";	# 23  (t0:str)<-(_59:str)
    ga_a := io.print(t0);	# 24 IOprint_val (ga_a:int)<-(t0:str)
    mil.line("var t1:= \"got single quote ' without escape\";\tt1.print();");	# 25 MILline (_76:void)<-(_77:str)
    t1 := "got single quote ' without escape";	# 26  (t1:str)<-(_63:str)
    ha_a := io.print(t1);	# 27 IOprint_val (ha_a:int)<-(t1:str)
    mil.line("var t2:= \"got tab \t and single newline \n .\"; t2.print();");	# 28 MILline (_80:void)<-(_81:str)
    t2 := "got tab \t and single newline \n .";	# 29  (t2:str)<-(_67:str)
    ia_a := io.print(t2);	# 30 IOprint_val (ia_a:int)<-(t2:str)
    mil.line("var t3:= \"problem signalled before \\\"\"; t3.print();");	# 31 MILline (_84:void)<-(_85:str)
    t3 := "problem signalled before \\\"";	# 32  (t3:str)<-(_71:str)
    ja_a := io.print(t3);	# 33 IOprint_val (ja_a:int)<-(t3:str)
    mil.line("# character constants\n");	# 34 MILline (_88:void)<-(_89:str)
    c0 := "\\n";	# 35  (c0:str)<-(_91:str)
    ka_a := io.print(c0);	# 36 IOprint_val (ka_a:int)<-(c0:str)
    mil.line("var c1:= \"'\"; c1.print();");	# 37 MILline (_93:void)<-(_94:str)
    c1 := "'";	# 38  (c1:str)<-(_96:str)
    la_a := io.print(c1);	# 39 IOprint_val (la_a:int)<-(c1:str)
    mil.line("var c2:= \"\\\"; c2.print();");	# 40 MILline (_98:void)<-(_99:str)
    c2 := "\\";	# 41  (c2:str)<-(_101:str)
    ma_a := io.print(c2);	# 42 IOprint_val (ma_a:int)<-(c2:str)
    mil.line("var s:=new(int,str,100);");	# 43 MILline (_103:void)<-(_104:str)
    s := bbp.new(nil:int,nil:str,100);	# 44 CMDBATnewint (s:bat[:int,:str])<-(_106:int)(_107:str)(_108:int)
    mil.line("s.insert(2,\" single quote ' got it\");");	# 45 MILline (_109:void)<-(_110:str)
    na_a := bat.insert(s,2," single quote ' got it");	# 46 BKCinsert_bun (na_a:bat[:int,:str])<-(s:bat[:int,:str])(_112:int)(_113:str)
    mil.line("s.insert(4,\" backslash  \\ \");");	# 47 MILline (_114:void)<-(_115:str)
    oa_a := bat.insert(s,4," backslash   ");	# 48 BKCinsert_bun (oa_a:bat[:int,:str])<-(s:bat[:int,:str])(_117:int)(_118:str)
    mil.line("s.insert(3,\" single quote ' \");");	# 49 MILline (_119:void)<-(_120:str)
    pa_a := bat.insert(s,3," single quote ' ");	# 50 BKCinsert_bun (pa_a:bat[:int,:str])<-(s:bat[:int,:str])(_122:int)(_123:str)
    mil.line("s.print();");	# 51 MILline (_124:void)<-(_125:str)
    qa_a := io.print(s);	# 52 IOprint_val (qa_a:int)<-(s:bat[:int,:str])
    mil.line("# Monet printf should behave as in C\n");	# 53 MILline (_127:void)<-(_128:str)
    ra_a := io.printf("got single quote ' .\n");	# 54 IOprint_str (ra_a:int)<-(_130:str)
    mil.line("# remove superfluous escapes\n");	# 55 MILline (_131:void)<-(_132:str)
    sa_a := io.printf("got single quote ' without escape\n");	# 56 IOprint_str (sa_a:int)<-(_134:str)
    mil.line("printf(\"got tab \t and newline \n .\n\");");	# 57 MILline (_135:void)<-(_136:str)
    ta_a := io.printf("got tab \t and newline \n .\n");	# 58 IOprint_str (ta_a:int)<-(_138:str)
    mil.line("printf(\"problem signalled before \\\"\n\");");	# 59 MILline (_139:void)<-(_140:str)
    ua_a := io.printf("problem signalled before \\\"\n");	# 60 IOprint_str (ua_a:int)<-(_142:str)
    mil.line("quit();");	# 61 MILline (_143:void)<-(_144:str)
    va_a := clients.quit();	# 62 CLTquit (va_a:void)
end main;	# 63  
#setoid(oid(20000000));
## escape sequences

## first some basics, escaped characters are normalized

#print("got single quote ' .");	# remove superfluous escapes
[ "got single quote ' ." ]
## remove superfluous escapes

[ "got single quote ' without escape" ]
#print("got tab 	 and single newline 
 .");
[ "got tab \t and single newline \n ." ]
#print("problem signalled before \"");
[ "problem signalled before \\\"" ]
#var t0:= "got single quote ' .";	t0.print();
[ "got single quote ' ." ]
#var t1:= "got single quote ' without escape";	t1.print();
[ "got single quote ' without escape" ]
#var t2:= "got tab 	 and single newline 
 ."; t2.print();
[ "got tab \t and single newline \n ." ]
#var t3:= "problem signalled before \""; t3.print();
[ "problem signalled before \\\"" ]
## character constants

[ "\\n" ]
#var c1:= "'"; c1.print();
[ "'" ]
#var c2:= "\"; c2.print();
[ "\\" ]
#var s:=new(int,str,100);
#s.insert(2,\" single quote \\' got it\");
#s.insert(4,\" backslash  \\\\ \");
#s.insert(3,\" single quote ' \");
#s.print();
#-----------------------------------------#
# h	t				  # name
# int	str				  # type
#-----------------------------------------#
[ 2,	  " single quote ' got it"	  ]
[ 4,	  " backslash   "		  ]
[ 3,	  " single quote ' "		  ]
## Monet printf should behave as in C

got single quote ' .
## remove superfluous escapes

got single quote ' without escape
#printf("got tab 	 and newline 
 .
");
got tab 	 and newline 
 .
#printf("problem signalled before \"
");
problem signalled before \"
#quit();

# 00:12:30 >  
# 00:12:30 >  Done.
# 00:12:30 >  

