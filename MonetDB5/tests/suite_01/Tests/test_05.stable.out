stdout of test 'test_05` in directory 'monetdb5/tests/suite_01` itself:


# 20:24:33 >  
# 20:24:33 >   mserver5 "--config=/ufs/mk/monet5//Linux/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=31637 --set xrpc_port=43587 --set monet_prompt= --trace  --dbname=mTests_tests_suite_01  test_05.mal
# 20:24:33 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_tests_suite_01', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008- MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:30579/
function user.main():void;
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);
    ba_a := calc.setoid(aa_a);
#	io.print("# escape sequences\n"); 
#	io.print("# first some basics, escaped characters are normalized\n"); 
#	io.print("print(\"got single quote ' .\");\t# remove superfluous escapes"); 
    ca_a := io.print("got single quote ' .");
#	io.print("# remove superfluous escapes\n"); 
    da_a := io.print("got single quote ' without escape");
#	io.print("print(\"got tab \t and single newline \n .\");"); 
    ea_a := io.print("got tab \t and single newline \n .");
#	io.print("print(\"problem signalled before \\\"\");"); 
    fa_a := io.print("problem signalled before \\\"");
#	io.print("var t0:= \"got single quote ' .\";\tt0.print();"); 
    t0 := "got single quote ' .";
    ga_a := io.print(t0);
#	io.print("var t1:= \"got single quote ' without escape\";\tt1.print();"); 
    t1 := "got single quote ' without escape";
    ha_a := io.print(t1);
#	io.print("var t2:= \"got tab \t and single newline \n .\"; t2.print();"); 
    t2 := "got tab \t and single newline \n .";
    ia_a := io.print(t2);
#	io.print("var t3:= \"problem signalled before \\\"\"; t3.print();"); 
    t3 := "problem signalled before \\\"";
    ja_a := io.print(t3);
#	io.print("# character constants\n"); 
    c0 := "\n";
    ka_a := io.print(c0);
#	io.print("var c1:= \"'\"; c1.print();"); 
    c1 := "'";
    la_a := io.print(c1);
#	io.print("var c2:= \"\\\"; c2.print();"); 
    c2 := "\\";
    ma_a := io.print(c2);
#	io.print("var s:=new(int,str,100);"); 
    s := bat.new(nil:oid,nil:str,100);
#	io.print("s.insert(2,\" single quote ' got it\");"); 
    na_a := bat.append(s," single quote ' got it");
#	io.print("s.append(4,\" backslash  \\ \");"); 
    oa_a := bat.append(s," backslash   ");
#	io.print("s.append(3,\" single quote ' \");"); 
    pa_a := bat.append(s," single quote ' ");
#	io.print("s.print();"); 
    qa_a := io.print(s);
#	io.print("# Monet printf should behave as in C\n"); 
    ra_a := io.printf("got single quote ' .\n");
#	io.print("# remove superfluous escapes\n"); 
    sa_a := io.printf("got single quote ' without escape\n");
#	io.print("printf(\"got tab \t and newline \n .\n\");"); 
    ta_a := io.printf("got tab \t and newline \n .\n");
#	io.print("printf(\"problem signalled before \\\"\n\");"); 
    ua_a := io.printf("problem signalled before \\\"\n");
#	io.print("quit();"); 
    va_a := clients.quit();
end main;
[ "got single quote ' ." ]
## remove superfluous escapes

[ "got single quote ' without escape" ]
[ "got tab \t and single newline \n ." ]
#print("problem signalled before \"");
[ "problem signalled before \\\"" ]
#var t0:= "got single quote ' .";	t0.print();
[ "got single quote ' ." ]
#var t1:= "got single quote ' without escape";	t1.print();
[ "got single quote ' without escape" ]
[ "got tab \t and single newline \n ." ]
#var t3:= "problem signalled before \""; t3.print();
[ "problem signalled before \\\"" ]
[ "\n" ]
[ "'" ]
#var c2:= "\"; c2.print();
[ "\\" ]
#var s:=new(int,str,100);
#s.insert(2,\" single quote \\' got it\");
#s.insert(4,\" backslash  \\\\ \");
#s.insert(3,\" single quote ' \");
#s.print();
#-----------------------------------------#
# h	t				  # name
# int	str				  # type
#-----------------------------------------#
[ 0@0,	  " single quote ' got it"	  ]
[ 1@0,	  " backslash   "		  ]
[ 2@0,	  " single quote ' "		  ]
got single quote ' .
## remove superfluous escapes

got single quote ' without escape
got tab 	 and newline 
 .
problem signalled before \"
#quit();

# 00:12:30 >  
# 00:12:30 >  Done.
# 00:12:30 >  

