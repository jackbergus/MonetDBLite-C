stdout of test 'test_05` in directory 'tests/suite_01` itself:


# 00:12:30 >  
# 00:12:30 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_01  test_05.mal </dev/null
# 00:12:30 >  

!WARNING: GDKlockHome: ignoring empty or invalid .gdk_lock.
!WARNING: BBPdir: initializing BBP.
# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_01
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("# escape sequences\n");
#	mil.line("# first some basics, escaped characters are normalized\n");
#	mil.line("print(\"got single quote \\' .\");\t# remove superfluous escapes");
#	ca_a := io.print("got single quote \' .");
#	mil.line("# remove superfluous escapes\n");
#	da_a := io.print("got single quote ' without escape");
#	mil.line("print(\"got tab \\t and single newline \\n .\");");
#	ea_a := io.print("got tab \t and single newline \n .");
#	mil.line("print(\"problem signalled before \\\\\\\"\");");
#	fa_a := io.print("problem signalled before \\\"");
#	mil.line("var t0:= \"got single quote \\' .\";\tt0.print();");
#	t0 := "got single quote \' .";
#	ga_a := io.print(t0);
#	mil.line("var t1:= \"got single quote ' without escape\";\tt1.print();");
#	t1 := "got single quote ' without escape";
#	ha_a := io.print(t1);
#	mil.line("var t2:= \"got tab \\t and single newline \\n .\"; t2.print();");
#	t2 := "got tab \t and single newline \n .";
#	ia_a := io.print(t2);
#	mil.line("var t3:= \"problem signalled before \\\\\\\"\"; t3.print();");
#	t3 := "problem signalled before \\\"";
#	ja_a := io.print(t3);
#	mil.line("# character constants\n");
#	c0 := "\n";
#	ka_a := io.print(c0);
#	mil.line("var c1:= \"\\'\"; c1.print();");
#	c1 := "\'";
#	la_a := io.print(c1);
#	mil.line("var c2:= \"\\\\\"; c2.print();");
#	c2 := "\\";
#	ma_a := io.print(c2);
#	mil.line("var s:=new(int,str,100);");
#	s := bbp.new(nil:int,nil:str,100);
#	mil.line("s.insert(2,\" single quote \\' got it\");");
#	na_a := bat.insert(s,2," single quote \' got it");
#	mil.line("s.insert(4,\" backslash  \\\\ \");");
#	oa_a := bat.insert(s,4," backslash  \\ ");
#	mil.line("s.insert(3,\" single quote ' \");");
#	pa_a := bat.insert(s,3," single quote ' ");
#	mil.line("s.print();");
#	qa_a := io.print(s);
#	mil.line("# Monet printf should behave as in C\n");
#	ra_a := io.printf("got single quote \' .\n");
#	mil.line("# remove superfluous escapes\n");
#	sa_a := io.printf("got single quote ' without escape\n");
#	mil.line("printf(\"got tab \\t and newline \\n .\\n\");");
#	ta_a := io.printf("got tab \t and newline \n .\n");
#	mil.line("printf(\"problem signalled before \\\\\\\"\\n\");");
#	ua_a := io.printf("problem signalled before \\\"\n");
#	mil.line("quit();");
#	va_a := clients.quit();
#
function user.main():void;              #  0 main:void {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         # 11 aa_a:oid := CALCint2oid(_12:int) 
    ba_a := calc.setoid(aa_a);          # 12 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("# escape sequences\n"); 
#	io.print("# first some basics, escaped characters are normalized\n"); 
#	io.print("print(\"got single quote ' .\");\t# remove superfluous escapes"); 
    ca_a := io.print("got single quote ' .");# 16 ca_a:void := IOprint_val(_18:str) 
#	io.print("# remove superfluous escapes\n"); 
    da_a := io.print("got single quote ' without escape");# 18 da_a:void := IOprint_val(_21:str) 
#	io.print("print(\"got tab \t and single newline \n .\");"); 
    ea_a := io.print("got tab \t and single newline \n .");# 20 ea_a:void := IOprint_val(_24:str) 
#	io.print("print(\"problem signalled before \\\"\");"); 
    fa_a := io.print("problem signalled before \\\"");# 22 fa_a:void := IOprint_val(_27:str) 
#	io.print("var t0:= \"got single quote ' .\";\tt0.print();"); 
    t0 := "got single quote ' .";       # 24 t0:str := _18:str {G}
    ga_a := io.print(t0);               # 25 ga_a:void := IOprint_val(t0:str) 
#	io.print("var t1:= \"got single quote ' without escape\";\tt1.print();"); 
    t1 := "got single quote ' without escape";# 27 t1:str := _21:str {G}
    ha_a := io.print(t1);               # 28 ha_a:void := IOprint_val(t1:str) 
#	io.print("var t2:= \"got tab \t and single newline \n .\"; t2.print();"); 
    t2 := "got tab \t and single newline \n .";# 30 t2:str := _24:str {G}
    ia_a := io.print(t2);               # 31 ia_a:void := IOprint_val(t2:str) 
#	io.print("var t3:= \"problem signalled before \\\"\"; t3.print();"); 
    t3 := "problem signalled before \\\"";# 33 t3:str := _27:str {G}
    ja_a := io.print(t3);               # 34 ja_a:void := IOprint_val(t3:str) 
#	io.print("# character constants\n"); 
    c0 := "\n";                         # 36 c0:str := _42:str {G}
    ka_a := io.print(c0);               # 37 ka_a:void := IOprint_val(c0:str) 
#	io.print("var c1:= \"'\"; c1.print();"); 
    c1 := "'";                          # 39 c1:str := _46:str {G}
    la_a := io.print(c1);               # 40 la_a:void := IOprint_val(c1:str) 
#	io.print("var c2:= \"\\\"; c2.print();"); 
    c2 := "\\";                         # 42 c2:str := _50:str {G}
    ma_a := io.print(c2);               # 43 ma_a:void := IOprint_val(c2:str) 
#	io.print("var s:=new(int,str,100);"); 
    s := bat.new(nil:int,nil:str,100);  # 45 s:bat[:int,:str] := CMDBATnewint(_54:int, _55:str, _56:int) {G}
#	io.print("s.insert(2,\" single quote ' got it\");"); 
    na_a := bat.insert(s,2," single quote ' got it");# 47 na_a:void := BKCinsert_bun(s:bat[:int,:str], _59:int, _60:str) 
#	io.print("s.insert(4,\" backslash  \\ \");"); 
    oa_a := bat.insert(s,4," backslash   ");# 49 oa_a:void := BKCinsert_bun(s:bat[:int,:str], _63:int, _64:str) 
#	io.print("s.insert(3,\" single quote ' \");"); 
    pa_a := bat.insert(s,3," single quote ' ");# 51 pa_a:void := BKCinsert_bun(s:bat[:int,:str], _67:int, _68:str) 
#	io.print("s.print();"); 
    qa_a := io.print(s);                # 53 qa_a:void := IOprint_val(s:bat[:int,:str]) 
#	io.print("# Monet printf should behave as in C\n"); 
    ra_a := io.printf("got single quote ' .\n");# 55 ra_a:void := IOprint_str(_73:str) 
#	io.print("# remove superfluous escapes\n"); 
    sa_a := io.printf("got single quote ' without escape\n");# 57 sa_a:void := IOprint_str(_76:str) 
#	io.print("printf(\"got tab \t and newline \n .\n\");"); 
    ta_a := io.printf("got tab \t and newline \n .\n");# 59 ta_a:void := IOprint_str(_79:str) 
#	io.print("printf(\"problem signalled before \\\"\n\");"); 
    ua_a := io.printf("problem signalled before \\\"\n");# 61 ua_a:void := IOprint_str(_82:str) 
#	io.print("quit();"); 
    va_a := clients.quit();             # 63 va_a:void 
end main;	# 64  
[ "got single quote ' ." ]
## remove superfluous escapes

[ "got single quote ' without escape" ]
[ "got tab \t and single newline \n ." ]
#print("problem signalled before \"");
[ "problem signalled before \\\"" ]
#var t0:= "got single quote ' .";	t0.print();
[ "got single quote ' ." ]
#var t1:= "got single quote ' without escape";	t1.print();
[ "got single quote ' without escape" ]
[ "got tab \t and single newline \n ." ]
#var t3:= "problem signalled before \""; t3.print();
[ "problem signalled before \\\"" ]
[ "\n" ]
[ "'" ]
#var c2:= "\"; c2.print();
[ "\\" ]
#var s:=new(int,str,100);
#s.insert(2,\" single quote \\' got it\");
#s.insert(4,\" backslash  \\\\ \");
#s.insert(3,\" single quote ' \");
#s.print();
#-----------------------------------------#
# h	t				  # name
# int	str				  # type
#-----------------------------------------#
[ 2,	  " single quote ' got it"	  ]
[ 4,	  " backslash   "		  ]
[ 3,	  " single quote ' "		  ]
## Monet printf should behave as in C

got single quote ' .
## remove superfluous escapes

got single quote ' without escape
got tab 	 and newline 
 .
problem signalled before \"
#quit();

# 00:12:30 >  
# 00:12:30 >  Done.
# 00:12:30 >  

