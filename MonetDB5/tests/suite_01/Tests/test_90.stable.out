stdout of test 'test_90` in directory 'monetdb5/tests/suite_01` itself:

#> Mtest:	milS test_90 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_suite_01 -single test_90.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 19:36:03 MET 2000.
#script:test_90.milS


# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_01
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("# This test at some point caused Monet to hang and\n");
#	mil.line("# it did not present the error messages at the proper line.");
#	mil.line("# it did not present the error messages at the proper line.\n");
#	mil.line("# It forgot to echo the input line.");
#	mil.line("# It forgot to echo the input line.\n");
#	mil.line("var x;");
#	mil.line("#var 34;\n");
#	mil.line("time().print();");
#	ca_a := alarm.time();
#	da_a := print(ca_a);
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); time().print(); printf(\"#~EndVariableOutput~#\\n\");");
#	ea_a := printf("#~BeginVariableOutput~#\n");
#	fa_a := alarm.time();
#	ga_a := print(fa_a);
#	ha_a := printf("#~EndVariableOutput~#\n");
#	mil.line("quit();");
#	ia_a := quit();
##Identifer 'time' mapped to 'alarm.time'
#
function Admin.main():int;	# 0  (main:int)
    mil.line("setoid(oid(20000000));");	# 1 MILline ($1:void)<-($2:str)
    aa_a := calc.oid(20000000);	# 2 CALCint2oid (aa_a:oid)<-($4:int)
    ba_a := calc.setoid(aa_a);	# 3 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("# This test at some point caused Monet to hang and\n");	# 4 MILline ($6:void)<-($7:str)
    mil.line("# it did not present the error messages at the proper line.\n");	# 5 MILline ($8:void)<-($9:str)
    mil.line("# It forgot to echo the input line.\n");	# 6 MILline ($10:void)<-($11:str)
    mil.line("#var 34;\n");	# 7 MILline ($12:void)<-($13:str)
    ca_a := alarm.time();	# 8 ALARMtime (ca_a:int)
    da_a := io.print(ca_a);	# 9 IOprint_val (da_a:int)<-(ca_a:int)
    mil.line("printf(\"#~BeginVariableOutput~#\\n\"); time().print(); printf(\"#~EndVariableOutput~#\\n\");");	# 10 MILline ($16:void)<-($17:str)
    ea_a := io.printf("#~BeginVariableOutput~#\n");	# 11 IOprint_str (ea_a:int)<-($19:str)
    fa_a := alarm.time();	# 12 ALARMtime (fa_a:int)
    ga_a := io.print(fa_a);	# 13 IOprint_val (ga_a:int)<-(fa_a:int)
    ha_a := io.printf("#~EndVariableOutput~#\n");	# 14 IOprint_str (ha_a:int)<-($23:str)
    mil.line("quit();");	# 15 MILline ($24:void)<-($25:str)
    ia_a := clients.quit();	# 16 CLTquit (ia_a:void)
end main;	# 17  
#setoid(oid(20000000));
## This test at some point caused Monet to hang and
## it did not present the error messages at the proper line.
## it did not present the error messages at the proper line.
## It forgot to echo the input line.
## It forgot to echo the input line.
#var x;
##var 34;
[ 666 ]
#printf("#~BeginVariableOutput~#\n"); time().print(); printf("#~EndVariableOutput~#\n");
#~BeginVariableOutput~#
[ 666 ]
#~EndVariableOutput~#
#quit();

# 17:09:03 >  
# 17:09:03 >  Done.
# 17:09:03 >  

