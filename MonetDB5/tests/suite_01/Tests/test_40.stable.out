stdout of test 'test_40` in directory 'tests/suite_01` itself:


# 00:12:30 >  
# 00:12:30 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_01  test_40.mal </dev/null
# 00:12:30 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_01
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("#test ascii export/import facility.\n");
#	mil.line("var b:= new(str,int);");
#	b := bbp.new(nil:str,nil:int);
#	mil.line("b.insert(\"the\",1);");
#	ca_a := bat.insert(b,"the",1);
#	mil.line("b.insert(\"quick\",2);");
#	da_a := bat.insert(b,"quick",2);
#	mil.line("b.insert(\"brown\",3);");
#	ea_a := bat.insert(b,"brown",3);
#	mil.line("b.insert(\"fox\",4);");
#	fa_a := bat.insert(b,"fox",4);
#	mil.line("b.insert(\"jumps\",5);");
#	ga_a := bat.insert(b,"jumps",5);
#	mil.line("b.insert(\"over\",6);");
#	ha_a := bat.insert(b,"over",6);
#	mil.line("b.insert(\"lazy\",7);");
#	ia_a := bat.insert(b,"lazy",7);
#	mil.line("b.insert(\"dog\",8);");
#	ja_a := bat.insert(b,"dog",8);
#	mil.line("b.insert(str(nil),9);");
#	ka_a := calc.str(nil);
#	la_a := bat.insert(b,ka_a,9);
#	mil.line("b.insert(\".\",10);");
#	ma_a := bat.insert(b,".",10);
#	mil.line("b.insert(\"\",calc.int(nil));");
#	na_a := calc.int(nil);
#	oa_a := bat.insert(b,"",na_a);
#	mil.line("b.insert(str(nil),calc.int(nil));");
#	pa_a := calc.str(nil);
#	qa_a := calc.int(nil);
#	ra_a := bat.insert(b,pa_a,qa_a);
#	mil.line("b.print();");
#	sa_a := io.print(b);
#	mil.line("b.export(\"monet2\");");
#	ta_a := io.export(b,"monet2");
#	mil.line("b.delete();");
#	ua_a := bat.delete(b);
#	mil.line("b.count().print();");
#	va_a := aggr.count(b);
#	wa_a := io.print(va_a);
#	mil.line("b.import(\"monet2\");");
#	xa_a := io.import(b,"monet2");
#	mil.line("b.print();");
#	ya_a := io.print(b);
#	mil.line("var cb:= new(int,int);");
#	cb := bbp.new(nil:int,nil:int);
#	mil.line("cb.insert(1,15);");
#	ab_a := bat.insert(cb,1,15);
#	mil.line("cb.insert(2,4);");
#	bb_a := bat.insert(cb,2,4);
#	mil.line("cb.insert(3,calc.int(nil));");
#	cb_a := calc.int(nil);
#	db_a := bat.insert(cb,3,cb_a);
#	mil.line("cb.insert(4,16);");
#	eb_a := bat.insert(cb,4,16);
#	mil.line("cb.insert(5,25);");
#	fb_a := bat.insert(cb,5,25);
#	mil.line("cb.insert(6,36);");
#	gb_a := bat.insert(cb,6,36);
#	mil.line("cb.insert(7,49);");
#	hb_a := bat.insert(cb,7,49);
#	mil.line("cb.insert(8,64);");
#	ib_a := bat.insert(cb,8,64);
#	mil.line("cb.insert(9,calc.int(nil));");
#	jb_a := calc.int(nil);
#	kb_a := bat.insert(cb,9,jb_a);
#	mil.line("cb.insert(calc.int(nil),int(nil));");
#	lb_a := calc.int(nil);
#	mb_a := calc.int(nil);
#	nb_a := bat.insert(cb,lb_a,mb_a);
#	mil.line("cb.insert(calc.int(nil),81);");
#	ob_a := calc.int(nil);
#	pb_a := bat.insert(cb,ob_a,81);
#	mil.line("cb.print();");
#	qb_a := io.print(cb);
#	mil.line("cb.export(\"monet1\");");
#	rb_a := io.export(cb,"monet1");
#	mil.line("cb.delete();");
#	sb_a := bat.delete(cb);
#	mil.line("cb.count().print();");
#	tb_a := aggr.count(cb);
#	ub_a := io.print(tb_a);
#	mil.line("cb.import(\"monet1\");");
#	vb_a := io.import(cb,"monet1");
#	mil.line("cb.print();");
#	wb_a := io.print(cb);
#	mil.line("commit();");
#	xb_a := transaction.commit();
#	mil.line("quit();");
#	yb_a := clients.quit();
#
function user.main():void;              #  0 main:void := user.main() {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         # 11 aa_a:oid := CALCint2oid(_12:int) 
    ba_a := calc.setoid(aa_a);          # 12 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("#test ascii export/import facility.\n"); 
#	io.print("var b:= new(str,int);"); 
    b := bat.new(nil:str,nil:int);      # 15 b:bat[:str,:int] := CMDBATnew(_17:str, _18:int) {G}
#	io.print("b.insert(\"the\",1);"); 
    ca_a := bat.insert(b,"the",1);      # 17 ca_a:void := BKCinsert_bun(b:bat[:str,:int], _21:str, _22:int) 
#	io.print("b.insert(\"quick\",2);"); 
    da_a := bat.insert(b,"quick",2);    # 19 da_a:void := BKCinsert_bun(b:bat[:str,:int], _25:str, _26:int) 
#	io.print("b.insert(\"brown\",3);"); 
    ea_a := bat.insert(b,"brown",3);    # 21 ea_a:void := BKCinsert_bun(b:bat[:str,:int], _29:str, _30:int) 
#	io.print("b.insert(\"fox\",4);"); 
    fa_a := bat.insert(b,"fox",4);      # 23 fa_a:void := BKCinsert_bun(b:bat[:str,:int], _33:str, _34:int) 
#	io.print("b.insert(\"jumps\",5);"); 
    ga_a := bat.insert(b,"jumps",5);    # 25 ga_a:void := BKCinsert_bun(b:bat[:str,:int], _37:str, _38:int) 
#	io.print("b.insert(\"over\",6);"); 
    ha_a := bat.insert(b,"over",6);     # 27 ha_a:void := BKCinsert_bun(b:bat[:str,:int], _41:str, _42:int) 
#	io.print("b.insert(\"lazy\",7);"); 
    ia_a := bat.insert(b,"lazy",7);     # 29 ia_a:void := BKCinsert_bun(b:bat[:str,:int], _45:str, _46:int) 
#	io.print("b.insert(\"dog\",8);"); 
    ja_a := bat.insert(b,"dog",8);      # 31 ja_a:void := BKCinsert_bun(b:bat[:str,:int], _49:str, _50:int) 
#	io.print("b.insert(str(nil),9);"); 
    ka_a := calc.str(nil:void);         # 33 ka_a:str := CALCnil2str(_53:void) {G}
    la_a := bat.insert(b,ka_a,9);       # 34 la_a:void := BKCinsert_bun(b:bat[:str,:int], ka_a:str, _55:int) 
#	io.print("b.insert(\".\",10);"); 
    ma_a := bat.insert(b,".",10);       # 36 ma_a:void := BKCinsert_bun(b:bat[:str,:int], _58:str, _59:int) 
#	io.print("b.insert(\"\",calc.int(nil));"); 
    na_a := calc.int(nil:void);         # 38 na_a:int := CALCnil2int(_53:void) 
    oa_a := bat.insert(b,"",na_a);      # 39 oa_a:void := BKCinsert_bun(b:bat[:str,:int], _63:str, na_a:int) 
#	io.print("b.insert(str(nil),calc.int(nil));"); 
    pa_a := calc.str(nil:void);         # 41 pa_a:str := CALCnil2str(_53:void) {G}
    qa_a := calc.int(nil:void);         # 42 qa_a:int := CALCnil2int(_53:void) 
    ra_a := bat.insert(b,pa_a,qa_a);    # 43 ra_a:void := BKCinsert_bun(b:bat[:str,:int], pa_a:str, qa_a:int) 
#	io.print("b.print();"); 
    sa_a := io.print(b);                # 45 sa_a:void := IOprint_val(b:bat[:str,:int]) 
#	io.print("b.export(\"monet2\");"); 
    ta_a := io.export(b,"monet2");      # 47 ta_a:bit := IOexport(b:bat[:str,:int], _72:str) 
#	io.print("b.delete();"); 
    ua_a := bat.delete(b);              # 49 ua_a:void := BKCdelete_all(b:bat[:str,:int]) 
#	io.print("b.count().print();"); 
    va_a := aggr.count(b);              # 51 va_a:int := ALGcount_bat(b:bat[:str,:int]) 
    wa_a := io.print(va_a);             # 52 wa_a:void := IOprint_val(va_a:int) 
#	io.print("b.import(\"monet2\");"); 
    xa_a := io.import(b,"monet2");      # 54 xa_a:bat[:str,:int] := IOimport(b:bat[:str,:int], _72:str) {G}
#	io.print("b.print();"); 
    ya_a := io.print(b);                # 56 ya_a:void := IOprint_val(b:bat[:str,:int]) 
#	io.print("var cb:= new(int,int);"); 
    cb := bat.new(nil:int,nil:int);     # 58 cb:bat[:int,:int] := CMDBATnew(_84:int, _84:int) {G}
#	io.print("cb.insert(1,15);"); 
    ab_a := bat.insert(cb,1,15);        # 60 ab_a:void := BKCinsert_bun(cb:bat[:int,:int], _87:int, _88:int) 
#	io.print("cb.insert(2,4);"); 
    bb_a := bat.insert(cb,2,4);         # 62 bb_a:void := BKCinsert_bun(cb:bat[:int,:int], _91:int, _92:int) 
#	io.print("cb.insert(3,calc.int(nil));"); 
    cb_a := calc.int(nil:void);         # 64 cb_a:int := CALCnil2int(_95:void) 
    db_a := bat.insert(cb,3,cb_a);      # 65 db_a:void := BKCinsert_bun(cb:bat[:int,:int], _97:int, cb_a:int) 
#	io.print("cb.insert(4,16);"); 
    eb_a := bat.insert(cb,4,16);        # 67 eb_a:void := BKCinsert_bun(cb:bat[:int,:int], _92:int, _100:int) 
#	io.print("cb.insert(5,25);"); 
    fb_a := bat.insert(cb,5,25);        # 69 fb_a:void := BKCinsert_bun(cb:bat[:int,:int], _103:int, _104:int) 
#	io.print("cb.insert(6,36);"); 
    gb_a := bat.insert(cb,6,36);        # 71 gb_a:void := BKCinsert_bun(cb:bat[:int,:int], _107:int, _108:int) 
#	io.print("cb.insert(7,49);"); 
    hb_a := bat.insert(cb,7,49);        # 73 hb_a:void := BKCinsert_bun(cb:bat[:int,:int], _111:int, _112:int) 
#	io.print("cb.insert(8,64);"); 
    ib_a := bat.insert(cb,8,64);        # 75 ib_a:void := BKCinsert_bun(cb:bat[:int,:int], _115:int, _116:int) 
#	io.print("cb.insert(9,calc.int(nil));"); 
    jb_a := calc.int(nil:void);         # 77 jb_a:int := CALCnil2int(_95:void) 
    kb_a := bat.insert(cb,9,jb_a);      # 78 kb_a:void := BKCinsert_bun(cb:bat[:int,:int], _120:int, jb_a:int) 
#	io.print("cb.insert(calc.int(nil),int(nil));"); 
    lb_a := calc.int(nil:void);         # 80 lb_a:int := CALCnil2int(_95:void) 
    mb_a := calc.int(nil:void);         # 81 mb_a:int := CALCnil2int(_95:void) 
    nb_a := bat.insert(cb,lb_a,mb_a);   # 82 nb_a:void := BKCinsert_bun(cb:bat[:int,:int], lb_a:int, mb_a:int) 
#	io.print("cb.insert(calc.int(nil),81);"); 
    ob_a := calc.int(nil:void);         # 84 ob_a:int := CALCnil2int(_95:void) 
    pb_a := bat.insert(cb,ob_a,81);     # 85 pb_a:void := BKCinsert_bun(cb:bat[:int,:int], ob_a:int, _128:int) 
#	io.print("cb.print();"); 
    qb_a := io.print(cb);               # 87 qb_a:void := IOprint_val(cb:bat[:int,:int]) 
#	io.print("cb.export(\"monet1\");"); 
    rb_a := io.export(cb,"monet1");     # 89 rb_a:bit := IOexport(cb:bat[:int,:int], _133:str) 
#	io.print("cb.delete();"); 
    sb_a := bat.delete(cb);             # 91 sb_a:void := BKCdelete_all(cb:bat[:int,:int]) 
#	io.print("cb.count().print();"); 
    tb_a := aggr.count(cb);             # 93 tb_a:int := ALGcount_bat(cb:bat[:int,:int]) 
    ub_a := io.print(tb_a);             # 94 ub_a:void := IOprint_val(tb_a:int) 
#	io.print("cb.import(\"monet1\");"); 
    vb_a := io.import(cb,"monet1");     # 96 vb_a:bat[:int,:int] := IOimport(cb:bat[:int,:int], _133:str) {G}
#	io.print("cb.print();"); 
    wb_a := io.print(cb);               # 98 wb_a:void := IOprint_val(cb:bat[:int,:int]) 
#	io.print("commit();"); 
    xb_a := transaction.commit();       #100 xb_a:bit := TRNglobal_commit() 
#	io.print("quit();"); 
    yb_a := clients.quit();             #102 yb_a:void := CLTquit() 
end main;                               #103  
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "the",	  1	  ]
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "fox",	  4	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
[ ".",		  10	  ]
[ "",		  nil	  ]
[ nil,		  nil	  ]
#b.export(\"monet2\");
#b.delete();
#b.count().print();
[ 0 ]
#b.import(\"monet2\");
#b.print();
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "the",	  1	  ]
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "fox",	  4	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
[ ".",		  10	  ]
[ "",		  nil	  ]
[ nil,		  nil	  ]
#var cb:= new(int,int);
#cb.insert(1,15);
#cb.insert(2,4);
#cb.insert(3,calc.int(nil));
#cb.insert(4,16);
#cb.insert(5,25);
#cb.insert(6,36);
#cb.insert(7,49);
#cb.insert(8,64);
#cb.insert(9,calc.int(nil));
#cb.insert(calc.int(nil),int(nil));
#cb.insert(calc.int(nil),81);
#cb.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
#cb.export(\"monet1\");
#cb.delete();
#cb.count().print();
[ 0 ]
#cb.import(\"monet1\");
#cb.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
#commit();
#quit();

# 00:12:30 >  
# 00:12:30 >  Done.
# 00:12:30 >  

