stdout of test 'test_40` in directory 'tests/suite_01` itself:


# 00:12:30 >  
# 00:12:30 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_01  test_40.mal </dev/null
# 00:12:30 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_01
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("#test ascii export/import facility.\n");
#	mil.line("var b:= new(str,int);");
#	b := bbp.new(nil:str,nil:int);
#	mil.line("b.insert(\"the\",1);");
#	ca_a := bat.insert(b,"the",1);
#	mil.line("b.insert(\"quick\",2);");
#	da_a := bat.insert(b,"quick",2);
#	mil.line("b.insert(\"brown\",3);");
#	ea_a := bat.insert(b,"brown",3);
#	mil.line("b.insert(\"fox\",4);");
#	fa_a := bat.insert(b,"fox",4);
#	mil.line("b.insert(\"jumps\",5);");
#	ga_a := bat.insert(b,"jumps",5);
#	mil.line("b.insert(\"over\",6);");
#	ha_a := bat.insert(b,"over",6);
#	mil.line("b.insert(\"lazy\",7);");
#	ia_a := bat.insert(b,"lazy",7);
#	mil.line("b.insert(\"dog\",8);");
#	ja_a := bat.insert(b,"dog",8);
#	mil.line("b.insert(str(nil),9);");
#	ka_a := calc.str(nil);
#	la_a := bat.insert(b,ka_a,9);
#	mil.line("b.insert(\".\",10);");
#	ma_a := bat.insert(b,".",10);
#	mil.line("b.insert(\"\",calc.int(nil));");
#	na_a := calc.int(nil);
#	oa_a := bat.insert(b,"",na_a);
#	mil.line("b.insert(str(nil),calc.int(nil));");
#	pa_a := calc.str(nil);
#	qa_a := calc.int(nil);
#	ra_a := bat.insert(b,pa_a,qa_a);
#	mil.line("b.print();");
#	sa_a := io.print(b);
#	mil.line("b.export(\"monet2\");");
#	ta_a := io.export(b,"monet2");
#	mil.line("b.delete();");
#	ua_a := bat.delete(b);
#	mil.line("b.count().print();");
#	va_a := aggr.count(b);
#	wa_a := io.print(va_a);
#	mil.line("b.import(\"monet2\");");
#	xa_a := io.import(b,"monet2");
#	mil.line("b.print();");
#	ya_a := io.print(b);
#	mil.line("var cb:= new(int,int);");
#	cb := bbp.new(nil:int,nil:int);
#	mil.line("cb.insert(1,15);");
#	ab_a := bat.insert(cb,1,15);
#	mil.line("cb.insert(2,4);");
#	bb_a := bat.insert(cb,2,4);
#	mil.line("cb.insert(3,calc.int(nil));");
#	cb_a := calc.int(nil);
#	db_a := bat.insert(cb,3,cb_a);
#	mil.line("cb.insert(4,16);");
#	eb_a := bat.insert(cb,4,16);
#	mil.line("cb.insert(5,25);");
#	fb_a := bat.insert(cb,5,25);
#	mil.line("cb.insert(6,36);");
#	gb_a := bat.insert(cb,6,36);
#	mil.line("cb.insert(7,49);");
#	hb_a := bat.insert(cb,7,49);
#	mil.line("cb.insert(8,64);");
#	ib_a := bat.insert(cb,8,64);
#	mil.line("cb.insert(9,calc.int(nil));");
#	jb_a := calc.int(nil);
#	kb_a := bat.insert(cb,9,jb_a);
#	mil.line("cb.insert(calc.int(nil),int(nil));");
#	lb_a := calc.int(nil);
#	mb_a := calc.int(nil);
#	nb_a := bat.insert(cb,lb_a,mb_a);
#	mil.line("cb.insert(calc.int(nil),81);");
#	ob_a := calc.int(nil);
#	pb_a := bat.insert(cb,ob_a,81);
#	mil.line("cb.print();");
#	qb_a := io.print(cb);
#	mil.line("cb.export(\"monet1\");");
#	rb_a := io.export(cb,"monet1");
#	mil.line("cb.delete();");
#	sb_a := bat.delete(cb);
#	mil.line("cb.count().print();");
#	tb_a := aggr.count(cb);
#	ub_a := io.print(tb_a);
#	mil.line("cb.import(\"monet1\");");
#	vb_a := io.import(cb,"monet1");
#	mil.line("cb.print();");
#	wb_a := io.print(cb);
#	mil.line("commit();");
#	xb_a := transaction.commit();
#	mil.line("quit();");
#	yb_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  (_31:str)
#Predefined code segment 	# 2  (_32:str)
#The compiler can not guarantee an accurate compilation, 	# 3  (_33:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  (_34:str)
#A few guidelines to maximize usefullness. 	# 5  (_35:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  (_36:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  (_37:str)
#use the "mil_schema" for additional support routines 	# 8  (_38:str)
    mil.line("setoid(oid(20000000));");	# 9 MILline (_39:void)<-(_40:str)
    aa_a := calc.oid(20000000);	# 10 CALCint2oid (aa_a:oid)<-(_42:int)
    ba_a := calc.setoid(aa_a);	# 11 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("#test ascii export/import facility.\n");	# 12 MILline (_44:void)<-(_45:str)
    mil.line("var b:= new(str,int);");	# 13 MILline (_46:void)<-(_47:str)
    b := bat.new(nil:str,nil:int);	# 14 CMDBATnew (b:bat[:str,:int])<-(_49:str)(_50:int)
    mil.line("b.insert(\"the\",1);");	# 15 MILline (_51:void)<-(_52:str)
    ca_a := bat.insert(b,"the",1);	# 16 BKCinsert_bun (ca_a:void)<-(b:bat[:str,:int])(_54:str)(_55:int)
    mil.line("b.insert(\"quick\",2);");	# 17 MILline (_56:void)<-(_57:str)
    da_a := bat.insert(b,"quick",2);	# 18 BKCinsert_bun (da_a:void)<-(b:bat[:str,:int])(_59:str)(_60:int)
    mil.line("b.insert(\"brown\",3);");	# 19 MILline (_61:void)<-(_62:str)
    ea_a := bat.insert(b,"brown",3);	# 20 BKCinsert_bun (ea_a:void)<-(b:bat[:str,:int])(_64:str)(_65:int)
    mil.line("b.insert(\"fox\",4);");	# 21 MILline (_66:void)<-(_67:str)
    fa_a := bat.insert(b,"fox",4);	# 22 BKCinsert_bun (fa_a:void)<-(b:bat[:str,:int])(_69:str)(_70:int)
    mil.line("b.insert(\"jumps\",5);");	# 23 MILline (_71:void)<-(_72:str)
    ga_a := bat.insert(b,"jumps",5);	# 24 BKCinsert_bun (ga_a:void)<-(b:bat[:str,:int])(_74:str)(_75:int)
    mil.line("b.insert(\"over\",6);");	# 25 MILline (_76:void)<-(_77:str)
    ha_a := bat.insert(b,"over",6);	# 26 BKCinsert_bun (ha_a:void)<-(b:bat[:str,:int])(_79:str)(_80:int)
    mil.line("b.insert(\"lazy\",7);");	# 27 MILline (_81:void)<-(_82:str)
    ia_a := bat.insert(b,"lazy",7);	# 28 BKCinsert_bun (ia_a:void)<-(b:bat[:str,:int])(_84:str)(_85:int)
    mil.line("b.insert(\"dog\",8);");	# 29 MILline (_86:void)<-(_87:str)
    ja_a := bat.insert(b,"dog",8);	# 30 BKCinsert_bun (ja_a:void)<-(b:bat[:str,:int])(_89:str)(_90:int)
    mil.line("b.insert(str(nil),9);");	# 31 MILline (_91:void)<-(_92:str)
    ka_a := calc.str(nil);	# 32 CALCnil2str (ka_a:str)<-(_94:void)
    la_a := bat.insert(b,ka_a,9);	# 33 BKCinsert_bun (la_a:void)<-(b:bat[:str,:int])(ka_a:str)(_96:int)
    mil.line("b.insert(\".\",10);");	# 34 MILline (_97:void)<-(_98:str)
    ma_a := bat.insert(b,".",10);	# 35 BKCinsert_bun (ma_a:void)<-(b:bat[:str,:int])(_100:str)(_101:int)
    mil.line("b.insert(\"\",calc.int(nil));");	# 36 MILline (_102:void)<-(_103:str)
    na_a := calc.int(nil);	# 37 CALCnil2int (na_a:int)<-(_94:void)
    oa_a := bat.insert(b,"",na_a);	# 38 BKCinsert_bun (oa_a:void)<-(b:bat[:str,:int])(_106:str)(na_a:int)
    mil.line("b.insert(str(nil),calc.int(nil));");	# 39 MILline (_107:void)<-(_108:str)
    pa_a := calc.str(nil);	# 40 CALCnil2str (pa_a:str)<-(_94:void)
    qa_a := calc.int(nil);	# 41 CALCnil2int (qa_a:int)<-(_94:void)
    ra_a := bat.insert(b,pa_a,qa_a);	# 42 BKCinsert_bun (ra_a:void)<-(b:bat[:str,:int])(pa_a:str)(qa_a:int)
    mil.line("b.print();");	# 43 MILline (_112:void)<-(_113:str)
    sa_a := io.print(b);	# 44 IOprint_val (sa_a:int)<-(b:bat[:str,:int])
    mil.line("b.export(\"monet2\");");	# 45 MILline (_115:void)<-(_116:str)
    ta_a := io.export(b,"monet2");	# 46 IOexport (ta_a:bit)<-(b:bat[:str,:int])(_118:str)
    mil.line("b.delete();");	# 47 MILline (_119:void)<-(_120:str)
    ua_a := bat.delete(b);	# 48 BKCdelete_all (ua_a:void)<-(b:bat[:str,:int])
    mil.line("b.count().print();");	# 49 MILline (_122:void)<-(_123:str)
    va_a := aggr.count(b);	# 50 ALGcount_bat (va_a:int)<-(b:bat[:str,:int])
    wa_a := io.print(va_a);	# 51 IOprint_val (wa_a:int)<-(va_a:int)
    mil.line("b.import(\"monet2\");");	# 52 MILline (_126:void)<-(_127:str)
    xa_a := io.import(b,"monet2");	# 53 IOimport (xa_a:bit)<-(b:bat[:str,:int])(_118:str)
    mil.line("b.print();");	# 54 MILline (_129:void)<-(_113:str)
    ya_a := io.print(b);	# 55 IOprint_val (ya_a:int)<-(b:bat[:str,:int])
    mil.line("var cb:= new(int,int);");	# 56 MILline (_131:void)<-(_132:str)
    cb := bat.new(nil:int,nil:int);	# 57 CMDBATnew (cb:bat[:int,:int])<-(_134:int)(_134:int)
    mil.line("cb.insert(1,15);");	# 58 MILline (_135:void)<-(_136:str)
    ab_a := bat.insert(cb,1,15);	# 59 BKCinsert_bun (ab_a:void)<-(cb:bat[:int,:int])(_138:int)(_139:int)
    mil.line("cb.insert(2,4);");	# 60 MILline (_140:void)<-(_141:str)
    bb_a := bat.insert(cb,2,4);	# 61 BKCinsert_bun (bb_a:void)<-(cb:bat[:int,:int])(_143:int)(_144:int)
    mil.line("cb.insert(3,calc.int(nil));");	# 62 MILline (_145:void)<-(_146:str)
    cb_a := calc.int(nil);	# 63 CALCnil2int (cb_a:int)<-(_148:void)
    db_a := bat.insert(cb,3,cb_a);	# 64 BKCinsert_bun (db_a:void)<-(cb:bat[:int,:int])(_150:int)(cb_a:int)
    mil.line("cb.insert(4,16);");	# 65 MILline (_151:void)<-(_152:str)
    eb_a := bat.insert(cb,4,16);	# 66 BKCinsert_bun (eb_a:void)<-(cb:bat[:int,:int])(_144:int)(_154:int)
    mil.line("cb.insert(5,25);");	# 67 MILline (_155:void)<-(_156:str)
    fb_a := bat.insert(cb,5,25);	# 68 BKCinsert_bun (fb_a:void)<-(cb:bat[:int,:int])(_158:int)(_159:int)
    mil.line("cb.insert(6,36);");	# 69 MILline (_160:void)<-(_161:str)
    gb_a := bat.insert(cb,6,36);	# 70 BKCinsert_bun (gb_a:void)<-(cb:bat[:int,:int])(_163:int)(_164:int)
    mil.line("cb.insert(7,49);");	# 71 MILline (_165:void)<-(_166:str)
    hb_a := bat.insert(cb,7,49);	# 72 BKCinsert_bun (hb_a:void)<-(cb:bat[:int,:int])(_168:int)(_169:int)
    mil.line("cb.insert(8,64);");	# 73 MILline (_170:void)<-(_171:str)
    ib_a := bat.insert(cb,8,64);	# 74 BKCinsert_bun (ib_a:void)<-(cb:bat[:int,:int])(_173:int)(_174:int)
    mil.line("cb.insert(9,calc.int(nil));");	# 75 MILline (_175:void)<-(_176:str)
    jb_a := calc.int(nil);	# 76 CALCnil2int (jb_a:int)<-(_148:void)
    kb_a := bat.insert(cb,9,jb_a);	# 77 BKCinsert_bun (kb_a:void)<-(cb:bat[:int,:int])(_179:int)(jb_a:int)
    mil.line("cb.insert(calc.int(nil),int(nil));");	# 78 MILline (_180:void)<-(_181:str)
    lb_a := calc.int(nil);	# 79 CALCnil2int (lb_a:int)<-(_148:void)
    mb_a := calc.int(nil);	# 80 CALCnil2int (mb_a:int)<-(_148:void)
    nb_a := bat.insert(cb,lb_a,mb_a);	# 81 BKCinsert_bun (nb_a:void)<-(cb:bat[:int,:int])(lb_a:int)(mb_a:int)
    mil.line("cb.insert(calc.int(nil),81);");	# 82 MILline (_185:void)<-(_186:str)
    ob_a := calc.int(nil);	# 83 CALCnil2int (ob_a:int)<-(_188:void)
    pb_a := bat.insert(cb,ob_a,81);	# 84 BKCinsert_bun (pb_a:void)<-(cb:bat[:int,:int])(ob_a:int)(_190:int)
    mil.line("cb.print();");	# 85 MILline (_191:void)<-(_192:str)
    qb_a := io.print(cb);	# 86 IOprint_val (qb_a:int)<-(cb:bat[:int,:int])
    mil.line("cb.export(\"monet1\");");	# 87 MILline (_194:void)<-(_195:str)
    rb_a := io.export(cb,"monet1");	# 88 IOexport (rb_a:bit)<-(cb:bat[:int,:int])(_197:str)
    mil.line("cb.delete();");	# 89 MILline (_198:void)<-(_199:str)
    sb_a := bat.delete(cb);	# 90 BKCdelete_all (sb_a:void)<-(cb:bat[:int,:int])
    mil.line("cb.count().print();");	# 91 MILline (_201:void)<-(_202:str)
    tb_a := aggr.count(cb);	# 92 ALGcount_bat (tb_a:int)<-(cb:bat[:int,:int])
    ub_a := io.print(tb_a);	# 93 IOprint_val (ub_a:int)<-(tb_a:int)
    mil.line("cb.import(\"monet1\");");	# 94 MILline (_205:void)<-(_206:str)
    vb_a := io.import(cb,"monet1");	# 95 IOimport (vb_a:bit)<-(cb:bat[:int,:int])(_197:str)
    mil.line("cb.print();");	# 96 MILline (_208:void)<-(_192:str)
    wb_a := io.print(cb);	# 97 IOprint_val (wb_a:int)<-(cb:bat[:int,:int])
    mil.line("commit();");	# 98 MILline (_210:void)<-(_211:str)
    xb_a := transaction.commit();	# 99 TRNglobal_commit (xb_a:void)
    mil.line("quit();");	# 100 MILline (_213:void)<-(_214:str)
    yb_a := clients.quit();	# 101 CLTquit (yb_a:void)
end main;	# 102  
#setoid(oid(20000000));
##test ascii export/import facility.\n
#var b:= new(str,int);
#b.insert(\"the\",1);
#b.insert(\"quick\",2);
#b.insert(\"brown\",3);
#b.insert(\"fox\",4);
#b.insert(\"jumps\",5);
#b.insert(\"over\",6);
#b.insert(\"lazy\",7);
#b.insert(\"dog\",8);
#b.insert(str(nil),9);
#b.insert(\".\",10);
#b.insert(\"\",calc.int(nil));
#b.insert(str(nil),calc.int(nil));
#b.print();
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "the",	  1	  ]
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "fox",	  4	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
[ ".",		  10	  ]
[ "",		  nil	  ]
[ nil,		  nil	  ]
#b.export(\"monet2\");
#b.delete();
#b.count().print();
[ 0 ]
#b.import(\"monet2\");
#b.print();
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "the",	  1	  ]
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "fox",	  4	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
[ ".",		  10	  ]
[ "",		  nil	  ]
[ nil,		  nil	  ]
#var cb:= new(int,int);
#cb.insert(1,15);
#cb.insert(2,4);
#cb.insert(3,calc.int(nil));
#cb.insert(4,16);
#cb.insert(5,25);
#cb.insert(6,36);
#cb.insert(7,49);
#cb.insert(8,64);
#cb.insert(9,calc.int(nil));
#cb.insert(calc.int(nil),int(nil));
#cb.insert(calc.int(nil),81);
#cb.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
#cb.export(\"monet1\");
#cb.delete();
#cb.count().print();
[ 0 ]
#cb.import(\"monet1\");
#cb.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
#commit();
#quit();

# 00:12:30 >  
# 00:12:30 >  Done.
# 00:12:30 >  

