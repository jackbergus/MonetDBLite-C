stdout of test 'test_70` in directory 'tests/suite_01` itself:


# 00:12:30 >  
# 00:12:30 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_01  test_70.mal </dev/null
# 00:12:30 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_01
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("# The Monet interpreter supports type casts\n");
#	p := calc.int("21");
#	mil.line("p.io.print();");
#	ca_a := io.print(p);
#	mil.line("var pf:= flt(\"23\");");
#	pf := calc.flt("23");
#	mil.line("pf.io.print();");
#	da_a := io.print(pf);
#	mil.line("var pb:= bit(1);");
#	pb := calc.bit(1);
#	mil.line("pb.io.print();");
#	ea_a := io.print(pb);
#	mil.line("var z:= int(p);");
#	z := calc.int(p);
#	mil.line("z.io.print();");
#	fa_a := io.print(z);
#	mil.line("var pi:= bit(0);");
#	pi := calc.bit(0);
#	mil.line("pi.io.print();");
#	ga_a := io.print(pi);
#	mil.line("var ps:= str(1);");
#	ps := calc.str(1);
#	mil.line("quit();");
#	ha_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  (_31:str)
#Predefined code segment 	# 2  (_32:str)
#The compiler can not guarantee an accurate compilation, 	# 3  (_33:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  (_34:str)
#A few guidelines to maximize usefullness. 	# 5  (_35:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  (_36:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  (_37:str)
#use the "mil_schema" for additional support routines 	# 8  (_38:str)
    mil.line("setoid(oid(20000000));");	# 9 MILline (_39:void)<-(_40:str)
    aa_a := calc.oid(20000000);	# 10 CALCint2oid (aa_a:oid)<-(_42:int)
    ba_a := calc.setoid(aa_a);	# 11 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("# The Monet interpreter supports type casts\n");	# 12 MILline (_44:void)<-(_45:str)
    p := calc.int("21");	# 13 CALCstr2int (p:int)<-(_47:str)
    mil.line("p.io.print();");	# 14 MILline (_48:void)<-(_49:str)
    ca_a := io.print(p);	# 15 IOprint_val (ca_a:int)<-(p:int)
    mil.line("var pf:= flt(\"23\");");	# 16 MILline (_51:void)<-(_52:str)
    pf := calc.flt("23");	# 17 CALCstr2flt (pf:flt)<-(_54:str)
    mil.line("pf.io.print();");	# 18 MILline (_55:void)<-(_56:str)
    da_a := io.print(pf);	# 19 IOprint_val (da_a:int)<-(pf:flt)
    mil.line("var pb:= bit(1);");	# 20 MILline (_58:void)<-(_59:str)
    pb := calc.bit(1);	# 21 CALCint2bit (pb:bit)<-(_61:int)
    mil.line("pb.io.print();");	# 22 MILline (_62:void)<-(_63:str)
    ea_a := io.print(pb);	# 23 IOprint_val (ea_a:int)<-(pb:bit)
    mil.line("var z:= int(p);");	# 24 MILline (_65:void)<-(_66:str)
    z := calc.int(p);	# 25 CALCint2int (z:int)<-(p:int)
    mil.line("z.io.print();");	# 26 MILline (_68:void)<-(_69:str)
    fa_a := io.print(z);	# 27 IOprint_val (fa_a:int)<-(z:int)
    mil.line("var pi:= bit(0);");	# 28 MILline (_71:void)<-(_72:str)
    pi := calc.bit(0);	# 29 CALCint2bit (pi:bit)<-(_74:int)
    mil.line("pi.io.print();");	# 30 MILline (_75:void)<-(_76:str)
    ga_a := io.print(pi);	# 31 IOprint_val (ga_a:int)<-(pi:bit)
    mil.line("var ps:= str(1);");	# 32 MILline (_78:void)<-(_79:str)
    ps := calc.str(1);	# 33 CALCint2str (ps:str)<-(_61:int)
    mil.line("quit();");	# 34 MILline (_81:void)<-(_82:str)
    ha_a := clients.quit();	# 35 CLTquit (ha_a:void)
end main;	# 36  
#setoid(oid(20000000));
## The Monet interpreter supports type casts\n
#p.io.print();
[ 21 ]
#var pf:= flt(\"23\");
#pf.io.print();
[ 23 ]
#var pb:= bit(1);
#pb.io.print();
[ true ]
#var z:= int(p);
#z.io.print();
[ 21 ]
#var pi:= bit(0);
#pi.io.print();
[ false ]
#var ps:= str(1);
#quit();

# 00:12:30 >  
# 00:12:30 >  Done.
# 00:12:30 >  

