stdout of test 'test_70` in directory 'tests/suite_01` itself:


# 00:12:30 >  
# 00:12:30 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_01  test_70.mal </dev/null
# 00:12:30 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_01
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("# The Monet interpreter supports type casts\n");
#	p := calc.int("21");
#	mil.line("p.io.print();");
#	ca_a := io.print(p);
#	mil.line("var pf:= flt(\"23\");");
#	pf := calc.flt("23");
#	mil.line("pf.io.print();");
#	da_a := io.print(pf);
#	mil.line("var pb:= bit(1);");
#	pb := calc.bit(1);
#	mil.line("pb.io.print();");
#	ea_a := io.print(pb);
#	mil.line("var z:= int(p);");
#	z := calc.int(p);
#	mil.line("z.io.print();");
#	fa_a := io.print(z);
#	mil.line("var pi:= bit(0);");
#	pi := calc.bit(0);
#	mil.line("pi.io.print();");
#	ga_a := io.print(pi);
#	mil.line("var ps:= str(1);");
#	ps := calc.str(1);
#	mil.line("quit();");
#	ha_a := clients.quit();
#
function user.main():void;              #  0 main:void {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         # 11 aa_a:oid := CALCint2oid(_12:int) 
    ba_a := calc.setoid(aa_a);          # 12 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("# The Monet interpreter supports type casts\n"); 
    p := calc.int("21");                # 14 p:int := CALCstr2int(_16:str) 
#	io.print("p.io.print();"); 
    ca_a := io.print(p);                # 16 ca_a:void := IOprint_val(p:int) 
#	io.print("var pf:= flt(\"23\");"); 
    pf := calc.flt("23");               # 18 pf:flt := CALCstr2flt(_21:str) 
#	io.print("pf.io.print();"); 
    da_a := io.print(pf);               # 20 da_a:void := IOprint_val(pf:flt) 
#	io.print("var pb:= bit(1);"); 
    pb := calc.bit(1);                  # 22 pb:bit := CALCint2bit(_26:int) 
#	io.print("pb.io.print();"); 
    ea_a := io.print(pb);               # 24 ea_a:void := IOprint_val(pb:bit) 
#	io.print("var z:= int(p);"); 
    z := calc.int(p);                   # 26 z:int := CALCint2int(p:int) 
#	io.print("z.io.print();"); 
    fa_a := io.print(z);                # 28 fa_a:void := IOprint_val(z:int) 
#	io.print("var pi:= bit(0);"); 
    pi := calc.bit(0);                  # 30 pi:bit := CALCint2bit(_35:int) 
#	io.print("pi.io.print();"); 
    ga_a := io.print(pi);               # 32 ga_a:void := IOprint_val(pi:bit) 
#	io.print("var ps:= str(1);"); 
    ps := calc.str(1);                  # 34 ps:str := CALCint2str(_26:int) {G}
#	io.print("quit();"); 
    ha_a := clients.quit();             # 36 ha_a:void 
end main;	# 37  
[ 21 ]
#var pf:= flt(\"23\");
#pf.io.print();
[ 23 ]
#var pb:= bit(1);
#pb.io.print();
[ true ]
#var z:= int(p);
#z.io.print();
[ 21 ]
#var pi:= bit(0);
#pi.io.print();
[ false ]
#var ps:= str(1);
#quit();

# 00:12:30 >  
# 00:12:30 >  Done.
# 00:12:30 >  

