# Monet Mil to Mal compiler
#include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
	aa_a := calc.oid(20000000);
	ba_a := calc.setoid(aa_a);
#	mil.line("# The Monet interpreter supports type casts\n");
	p := calc.int("21");
#	mil.line("p.io.print();");
	ca_a := io.print(p);
#	mil.line("var pf:= flt(\"23\");");
	pf := calc.flt("23");
#	mil.line("pf.io.print();");
	da_a := io.print(pf);
#	mil.line("var pb:= bit(1);");
	pb := calc.bit(1);
#	mil.line("pb.io.print();");
	ea_a := io.print(pb);
#	mil.line("var z:= int(p);");
	z := calc.int(p);
#	mil.line("z.io.print();");
	fa_a := io.print(z);
#	mil.line("var pi:= bit(0);");
	pi := calc.bit(0);
#	mil.line("pi.io.print();");
	ga_a := io.print(pi);
#	mil.line("var ps:= str(1);");
	ps := calc.str(1);
#	mil.line("quit();");
	ha_a := clients.quit();
