# Monet Mil to Mal compiler
include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
	mil.line("setoid(oid(20000000));");
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
	mil.line("# definition and use of Monet procs.\n");
	mil.line("# Note that complex procs should normally be prepared in block mode.\n");
	mil.line("unknown(\"hello\");");
	ca_a := unknown("hello");
	mil.line("#simple procedure with withdrawal\n");
function c():void;
	da_a := clock();
	ea_a := print(da_a);
end c;
	mil.line("c();");
	fa_a := c();
	mil.line("c();");
	ga_a := c();
	mil.line("# redefinition of existing procedure\n");
function c():void;
	clock:= mil.take("clock");
	ha_a := print(clock);
end c;
	mil.line("c();");
	ia_a := c();
	mil.line("proc c() : void { cpu().print();}");
function c():void;
	ja_a := cpu();
	ka_a := print(ja_a);
end c;
	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); c(); printf(\"#~EndVariableOutput~#\\n\");");
	la_a := printf("#~BeginVariableOutput~#\n");
	ma_a := c();
	na_a := printf("#~EndVariableOutput~#\n");
	mil.line("proc echo(..any..) : void { $1.print();}");
function echo(,echo:any$1...):void;
	oa_a := mil.getVarTemp($1);
	pa_a := print(oa_a);
end echo;
	mil.line("echo(1);");
	qa_a := echo(1);
	mil.line("echo(\"hello\");");
	ra_a := echo("hello");
	mil.line("echo(12,13);");
	sa_a := echo(12,13);
	mil.line("echo();");
	ta_a := echo();
	mil.line("proc echo(..any..) : void { $3.print();}");
function echo(,echo:any$1...):void;
	ua_a := mil.getVarTemp($3);
	va_a := print(ua_a);
end echo;
	mil.line("echo(1);");
	wa_a := echo(1);
	mil.line("echo(1,2,3);");
	xa_a := echo(1,2,3);
	mil.line("# handling non-complete proc definition;\n");
function forward():void;
end forward;
	mil.line("forward();");
	ya_a := forward();
	mil.line("forward();");
	ab_a := forward();
	mil.line("quit();");
	bb_a := quit();
