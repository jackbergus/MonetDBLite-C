# Monet Mil to Mal compiler
#include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
#	mil.line("#advanced features BATs as primitives.\n");
#	mil.line("var c:= new(int,bat);");
	c := new(nil:int,:bat[:any$1,:any$2]);
#	mil.line("#c.insert(1,gdk_cpu_stat);\n");
	cpu:= mil.take("cpu");
	ca_a := insert(c,1,cpu);
#	mil.line("c.insert(2,c);");
	da_a := insert(c,2,c);
#	mil.line("c.print();");
	ea_a := print(c);
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); c.find(1).print(); printf(\"#~EndVariableOutput~#\\n\");");
	fa_a := printf("#~BeginVariableOutput~#\n");
	ga_a := find(c,1);
	ha_a := print(ga_a);
	ia_a := printf("#~EndVariableOutput~#\n");
#	mil.line("c.print();");
	ja_a := print(c);
#	mil.line("c.find(2).print();");
	ka_a := find(c,2);
	la_a := print(ka_a);
#	mil.line("c.print();");
	ma_a := print(c);
#	mil.line("quit();");
	na_a := quit();
