stdout of test 'test_15` in directory 'tests/suite_01` itself:


# 00:12:30 >  
# 00:12:30 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_01  test_15.mal </dev/null
# 00:12:30 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_01
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("commit(); printf(\"#~BeginVariableOutput~#\\n\"); ioStatistics().print(); printf(\"#~EndVariableOutput~#\\n\");");
#	ca_a := transaction.commit();
#	da_a := io.printf("#~BeginVariableOutput~#\n");
#	ea_a := status.ioStatistics();
#	fa_a := io.print(ea_a);
#	ga_a := io.printf("#~EndVariableOutput~#\n");
#	mil.line("commit(); commit(); commit(); commit(); commit(); commit(); commit(); commit();");
#	ha_a := transaction.commit();
#	ia_a := transaction.commit();
#	ja_a := transaction.commit();
#	ka_a := transaction.commit();
#	la_a := transaction.commit();
#	ma_a := transaction.commit();
#	na_a := transaction.commit();
#	oa_a := transaction.commit();
#	mil.line("transaction.commit(); commit(); commit(); commit(); commit(); commit(); commit(); commit();");
#	pa_a := transaction.commit();
#	qa_a := transaction.commit();
#	ra_a := transaction.commit();
#	sa_a := transaction.commit();
#	ta_a := transaction.commit();
#	ua_a := transaction.commit();
#	va_a := transaction.commit();
#	wa_a := transaction.commit();
#	mil.line("transaction.commit(); commit(); commit(); commit(); ");
#	xa_a := transaction.commit();
#	ya_a := transaction.commit();
#	ab_a := transaction.commit();
#	bb_a := transaction.commit();
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); ioStatistics().print(); printf(\"#~EndVariableOutput~#\\n\");");
#	cb_a := io.printf("#~BeginVariableOutput~#\n");
#	db_a := status.ioStatistics();
#	eb_a := io.print(db_a);
#	fb_a := io.printf("#~EndVariableOutput~#\n");
#	mil.line("quit();");
#	gb_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
#include mil; 	# 2  (_2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 3  (_3:str)
#Predefined code segment 	# 4  (_4:str)
#The compiler can not guarantee an accurate compilation, 	# 5  (_5:str)
#because MIL unlike MAL is a dynamically typed language. 	# 6  (_6:str)
#A few guidelines to maximize usefullness. 	# 7  (_7:str)
#- make the type of variables explicit, in particular 'nil' 	# 8  (_8:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 9  (_9:str)
#use the "mil_schema" for additional support routines 	# 10  (_10:str)
#	mil.line("setoid(oid(20000000));"); 	# 11  (_11:str)
    aa_a := calc.oid(20000000);	# 12 CALCint2oid (aa_a:oid)<-(_13:int)
    ba_a := calc.setoid(aa_a);	# 13 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	mil.line("commit(); printf(\"#~BeginVariableOutput~#\\n\"); ioStatistics().print(); printf(\"#~EndVariableOutput~#\\n\");"); 	# 14  (_15:str)
    ca_a := transaction.commit();	# 15 TRNglobal_commit (ca_a:bit)
    da_a := io.printf("#~BeginVariableOutput~#\n");	# 16 IOprint_str (da_a:int)<-(_18:str)
    ea_a := status.ioStatistics();	# 17 SYSioStatistics (ea_a:bat[:str,:int])
    fa_a := io.print(ea_a);	# 18 IOprint_val (fa_a:int)<-(ea_a:bat[:str,:int])
    ga_a := io.printf("#~EndVariableOutput~#\n");	# 19 IOprint_str (ga_a:int)<-(_22:str)
#	mil.line("commit(); commit(); commit(); commit(); commit(); commit(); commit(); commit();"); 	# 20  (_23:str)
    ha_a := transaction.commit();	# 21 TRNglobal_commit (ha_a:bit)
    ia_a := transaction.commit();	# 22 TRNglobal_commit (ia_a:bit)
    ja_a := transaction.commit();	# 23 TRNglobal_commit (ja_a:bit)
    ka_a := transaction.commit();	# 24 TRNglobal_commit (ka_a:bit)
    la_a := transaction.commit();	# 25 TRNglobal_commit (la_a:bit)
    ma_a := transaction.commit();	# 26 TRNglobal_commit (ma_a:bit)
    na_a := transaction.commit();	# 27 TRNglobal_commit (na_a:bit)
    oa_a := transaction.commit();	# 28 TRNglobal_commit (oa_a:bit)
#	mil.line("transaction.commit(); commit(); commit(); commit(); commit(); commit(); commit(); commit();"); 	# 29  (_32:str)
    pa_a := transaction.commit();	# 30 TRNglobal_commit (pa_a:bit)
    qa_a := transaction.commit();	# 31 TRNglobal_commit (qa_a:bit)
    ra_a := transaction.commit();	# 32 TRNglobal_commit (ra_a:bit)
    sa_a := transaction.commit();	# 33 TRNglobal_commit (sa_a:bit)
    ta_a := transaction.commit();	# 34 TRNglobal_commit (ta_a:bit)
    ua_a := transaction.commit();	# 35 TRNglobal_commit (ua_a:bit)
    va_a := transaction.commit();	# 36 TRNglobal_commit (va_a:bit)
    wa_a := transaction.commit();	# 37 TRNglobal_commit (wa_a:bit)
#	mil.line("transaction.commit(); commit(); commit(); commit(); "); 	# 38  (_41:str)
    xa_a := transaction.commit();	# 39 TRNglobal_commit (xa_a:bit)
    ya_a := transaction.commit();	# 40 TRNglobal_commit (ya_a:bit)
    ab_a := transaction.commit();	# 41 TRNglobal_commit (ab_a:bit)
    bb_a := transaction.commit();	# 42 TRNglobal_commit (bb_a:bit)
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); ioStatistics().print(); printf(\"#~EndVariableOutput~#\\n\");"); 	# 43  (_46:str)
    cb_a := io.printf("#~BeginVariableOutput~#\n");	# 44 IOprint_str (cb_a:int)<-(_18:str)
    db_a := status.ioStatistics();	# 45 SYSioStatistics (db_a:bat[:str,:int])
    eb_a := io.print(db_a);	# 46 IOprint_val (eb_a:int)<-(db_a:bat[:str,:int])
    fb_a := io.printf("#~EndVariableOutput~#\n");	# 47 IOprint_str (fb_a:int)<-(_22:str)
#	mil.line("quit();"); 	# 48  (_51:str)
    gb_a := clients.quit();	# 49 CLTquitDefault (gb_a:void)
end main;	# 50  
#~BeginVariableOutput~#
#-------------------------#
# gdk		io	  # name
# str		int	  # type
#-------------------------#
[ "maxrss",	  0	  ]
[ "minflt",	  2406	  ]
[ "majflt",	  0	  ]
[ "nswap",	  0	  ]
[ "inblock",	  0	  ]
[ "oublock",	  0	  ]
[ "nvcsw",	  1	  ]
[ "ninvcsw",	  8	  ]
#~EndVariableOutput~#
#commit(); commit(); commit(); commit(); commit(); commit(); commit(); commit();
#transaction.commit(); commit(); commit(); commit(); commit(); commit(); commit(); commit();
#transaction.commit(); commit(); commit(); commit(); 
#printf(\"#~BeginVariableOutput~#\\n\"); ioStatistics().print(); printf(\"#~EndVariableOutput~#\\n\");
#~BeginVariableOutput~#
#-------------------------#
# gdk		io	  # name
# str		int	  # type
#-------------------------#
[ "maxrss",	  0	  ]
[ "minflt",	  2422	  ]
[ "majflt",	  0	  ]
[ "nswap",	  0	  ]
[ "inblock",	  0	  ]
[ "oublock",	  0	  ]
[ "nvcsw",	  1	  ]
[ "ninvcsw",	  9	  ]
#~EndVariableOutput~#
#quit();

# 00:12:30 >  
# 00:12:30 >  Done.
# 00:12:30 >  

