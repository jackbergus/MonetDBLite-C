stdout of test 'test_15` in directory 'tests/suite_01` itself:


# 00:12:30 >  
# 00:12:30 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_01  test_15.mal </dev/null
# 00:12:30 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_01
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("commit(); printf(\"#~BeginVariableOutput~#\\n\"); ioStatistics().print(); printf(\"#~EndVariableOutput~#\\n\");");
#	ca_a := transaction.commit();
#	da_a := io.printf("#~BeginVariableOutput~#\n");
#	ea_a := status.ioStatistics();
#	fa_a := io.print(ea_a);
#	ga_a := io.printf("#~EndVariableOutput~#\n");
#	mil.line("commit(); commit(); commit(); commit(); commit(); commit(); commit(); commit();");
#	ha_a := transaction.commit();
#	ia_a := transaction.commit();
#	ja_a := transaction.commit();
#	ka_a := transaction.commit();
#	la_a := transaction.commit();
#	ma_a := transaction.commit();
#	na_a := transaction.commit();
#	oa_a := transaction.commit();
#	mil.line("transaction.commit(); commit(); commit(); commit(); commit(); commit(); commit(); commit();");
#	pa_a := transaction.commit();
#	qa_a := transaction.commit();
#	ra_a := transaction.commit();
#	sa_a := transaction.commit();
#	ta_a := transaction.commit();
#	ua_a := transaction.commit();
#	va_a := transaction.commit();
#	wa_a := transaction.commit();
#	mil.line("transaction.commit(); commit(); commit(); commit(); ");
#	xa_a := transaction.commit();
#	ya_a := transaction.commit();
#	ab_a := transaction.commit();
#	bb_a := transaction.commit();
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); ioStatistics().print(); printf(\"#~EndVariableOutput~#\\n\");");
#	cb_a := io.printf("#~BeginVariableOutput~#\n");
#	db_a := status.ioStatistics();
#	eb_a := io.print(db_a);
#	fb_a := io.printf("#~EndVariableOutput~#\n");
#	mil.line("quit();");
#	gb_a := clients.quit();
#
function user.main():void;              #  0 main:void {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         # 11 aa_a:oid := CALCint2oid(_12:int) 
    ba_a := calc.setoid(aa_a);          # 12 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("commit(); printf(\"#~BeginVariableOutput~#\\n\"); ioStatistics().print(); printf(\"#~EndVariableOutput~#\\n\");"); 
    ca_a := transaction.commit();       # 14 ca_a:bit 
    da_a := io.printf("#~BeginVariableOutput~#\n");# 15 da_a:void := IOprint_str(_17:str) 
    ea_a := status.ioStatistics();      # 16 ea_a:bat[:str,:int] {G}
    fa_a := io.print(ea_a);             # 17 fa_a:void := IOprint_val(ea_a:bat[:str,:int]) 
    ga_a := io.printf("#~EndVariableOutput~#\n");# 18 ga_a:void := IOprint_str(_21:str) 
#	io.print("commit(); commit(); commit(); commit(); commit(); commit(); commit(); commit();"); 
    ha_a := transaction.commit();       # 20 ha_a:bit 
    ia_a := transaction.commit();       # 21 ia_a:bit 
    ja_a := transaction.commit();       # 22 ja_a:bit 
    ka_a := transaction.commit();       # 23 ka_a:bit 
    la_a := transaction.commit();       # 24 la_a:bit 
    ma_a := transaction.commit();       # 25 ma_a:bit 
    na_a := transaction.commit();       # 26 na_a:bit 
    oa_a := transaction.commit();       # 27 oa_a:bit 
#	io.print("transaction.commit(); commit(); commit(); commit(); commit(); commit(); commit(); commit();"); 
    pa_a := transaction.commit();       # 29 pa_a:bit 
    qa_a := transaction.commit();       # 30 qa_a:bit 
    ra_a := transaction.commit();       # 31 ra_a:bit 
    sa_a := transaction.commit();       # 32 sa_a:bit 
    ta_a := transaction.commit();       # 33 ta_a:bit 
    ua_a := transaction.commit();       # 34 ua_a:bit 
    va_a := transaction.commit();       # 35 va_a:bit 
    wa_a := transaction.commit();       # 36 wa_a:bit 
#	io.print("transaction.commit(); commit(); commit(); commit(); "); 
    xa_a := transaction.commit();       # 38 xa_a:bit 
    ya_a := transaction.commit();       # 39 ya_a:bit 
    ab_a := transaction.commit();       # 40 ab_a:bit 
    bb_a := transaction.commit();       # 41 bb_a:bit 
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); ioStatistics().print(); printf(\"#~EndVariableOutput~#\\n\");"); 
    cb_a := io.printf("#~BeginVariableOutput~#\n");# 43 cb_a:void := IOprint_str(_17:str) 
    db_a := status.ioStatistics();      # 44 db_a:bat[:str,:int] {G}
    eb_a := io.print(db_a);             # 45 eb_a:void := IOprint_val(db_a:bat[:str,:int]) 
    fb_a := io.printf("#~EndVariableOutput~#\n");# 46 fb_a:void := IOprint_str(_21:str) 
#	io.print("quit();"); 
    gb_a := clients.quit();             # 48 gb_a:void 
end main;	# 49  
#~BeginVariableOutput~#
#-------------------------#
# gdk		io	  # name
# str		int	  # type
#-------------------------#
[ "maxrss",	  0	  ]
[ "minflt",	  3349	  ]
[ "majflt",	  0	  ]
[ "nswap",	  0	  ]
[ "inblock",	  0	  ]
[ "oublock",	  48	  ]
[ "nvcsw",	  4	  ]
[ "ninvcsw",	  33	  ]
#~EndVariableOutput~#
#commit(); commit(); commit(); commit(); commit(); commit(); commit(); commit();
#transaction.commit(); commit(); commit(); commit(); commit(); commit(); commit(); commit();
#transaction.commit(); commit(); commit(); commit(); 
#printf(\"#~BeginVariableOutput~#\\n\"); ioStatistics().print(); printf(\"#~EndVariableOutput~#\\n\");
#~BeginVariableOutput~#
#-------------------------#
# gdk		io	  # name
# str		int	  # type
#-------------------------#
[ "maxrss",	  0	  ]
[ "minflt",	  3352	  ]
[ "majflt",	  0	  ]
[ "nswap",	  0	  ]
[ "inblock",	  0	  ]
[ "oublock",	  56	  ]
[ "nvcsw",	  7	  ]
[ "ninvcsw",	  34	  ]
#~EndVariableOutput~#
#quit();

# 00:12:30 >  
# 00:12:30 >  Done.
# 00:12:30 >  

