stdout of test 'test_00` in directory 'monetdb5/tests/suite_01` itself:


# 18:33:43 >  
# 18:33:43 >  Mtimeout -timeout 60 Mserver "--config=/var/tmp/_4.3.13-FixedPetersDDsync_PREFIX_MONET_GNU_32_d_--enable-warning_/etc/monet.conf" --debug=10 --set "monet_mod_path=/var/tmp/_4.3.13-FixedPetersDDsync_PREFIX_MONET_GNU_32_d_--enable-warning_/lib/MonetDB" --set "gdk_dbfarm=/var/tmp/_4.3.13-FixedPetersDDsync_PREFIX_MONET_GNU_32_d_--enable-warning_/var/MonetDB/dbfarm" --set "sql_logdir=/var/tmp/_4.3.13-FixedPetersDDsync_PREFIX_MONET_GNU_32_d_--enable-warning_/var/MonetDB/log" --set mapi_port=53708 --set sql_port=52024 --set monet_prompt= --trace --dbname=mTests_tests_suite_01  < test_00.milS
# 18:33:43 >  



# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux//var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_01
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("#problem: Monet -prelude fatal sometimes leaves a monet thread behind.\n");
#	mil.line("var b:= new(int,str,0);");
#	b := new(nil:int,nil:str,0);
#	mil.line("vars();");
#	ca_a := vars();
#	mil.line("var bn:= fragment(b,1,5,str(nil),str(nil));");
#	da_a := str(nil);
#	ea_a := str(nil);
#	bn := fragment(b,1,5,da_a,ea_a);
#	mil.line("vars();");
#	fa_a := vars();
#	mil.line("print(bn);");
#	ga_a := print(bn);
#	mil.line("quit();");
#	ha_a := quit();
#print("test dropped: it uses 4.4. catalogues");
#
!ERROR: 'vars' undefined in Admin.main[8]
!ERROR: 'vars' undefined in Admin.main[14]
function Admin.main():int;	# 0  (main:int)
    mil.line("setoid(oid(20000000));");	# 1 MILline ($1:void)<-($2:str)
    aa_a := calc.oid(20000000);	# 2 CALCint2oid (aa_a:oid)<-($4:int)
    ba_a := calc.setoid(aa_a);	# 3 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("#problem: Monet -prelude fatal sometimes leaves a monet thread behind.\n");	# 4 MILline ($6:void)<-($7:str)
    mil.line("var b:= new(int,str,0);");	# 5 MILline ($8:void)<-($9:str)
    b := bbp.new(nil,"nil",0);	# 6 CMDBATnewint (b:bat[:int,:str])<-($11:int)($12:str)($13:int)
    mil.line("vars();");	# 7 MILline ($14:void)<-($15:str)
    ca_a := vars();	# 8  unknown (ca_a:any)
    mil.line("var bn:= fragment(b,1,5,str(nil),str(nil));");	# 9 MILline ($17:void)<-($18:str)
    da_a := calc.str(nil);	# 10 CALCnil2str (da_a:str)<-($20:void)
    ea_a := calc.str(nil);	# 11 CALCnil2str (ea_a:str)<-($20:void)
    bn := algebra.fragment(b,1,5,da_a,ea_a);	# 12 ALGfragment (bn:bat[:int,:str])<-(b:bat[:int,:str])($23:int)($24:int)(da_a:str)(ea_a:str)
    mil.line("vars();");	# 13 MILline ($25:void)<-($15:str)
    fa_a := vars();	# 14  unknown (fa_a:any)
    mil.line("print(bn);");	# 15 MILline ($27:void)<-($28:str)
    ga_a := io.print(bn);	# 16 IOprint_val (ga_a:int)<-(bn:bat[:int,:str])
    mil.line("quit();");	# 17 MILline ($30:void)<-($31:str)
    ha_a := clients.quit();	# 18 CLTquit (ha_a:void)
    io.print("test dropped: it uses 4.4. catalogues");	# 19 IOprint_val ($33:int)<-($34:str)
end main;	# 20  
>
# 15:18:41 >  
# 15:18:41 >  Done.
# 15:18:41 >  

