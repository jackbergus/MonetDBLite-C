stdout of test 'batcalc-convert_on_void_view.SF-1573060` in directory 'tests/BugTracker` itself:


# 14:01:54 >  
# 14:01:54 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib64/MonetDB5:/ufs/mk/monet5/Linux/lib64/MonetDB5/lib:/ufs/mk/monet5/Linux/lib64/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/xquery_logs" --set mapi_port=32772 --set monet_prompt= --trace --dbname=mTests_tests_BugTracker  batcalc-convert_on_void_view.SF-1573060.mal < /dev/null
# 14:01:54 >  

!WARNING: GDKlockHome: ignoring empty or invalid .gdk_lock.
!WARNING: BBPdir: initializing BBP.
# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_tests_BugTracker
# Visit http://monetdb.cwi.nl/ for further information
#include microbenchmark;
## head: oid
## a:=microbenchmark.uniform(0:oid,9,9); platform dependent
#
#a:= bat.new(:oid,:int);
#bat.insert(a, 3@0,  0  );
#bat.insert(a, 0@0,  1  );
#bat.insert(a, 2@0,  2  );
#bat.insert(a, 5@0,  3  );
#bat.insert(a, 7@0,  4  );
#bat.insert(a, 8@0,  5  );
#bat.insert(a, 1@0,  6  );
#bat.insert(a, 6@0,  7  );
#bat.insert(a, 4@0,  8  );
#
#as:= algebra.sortTail(a);
#io.print(as);
#
#b:=batcalc.sht(a);
#bs:= algebra.sortTail(b);
#io.print(bs);
#c:=batcalc.lng(a);
#cs:= algebra.sortTail(c);
#io.print(cs);
#
## head: void view on oid
#d:=algebra.markH(a,10:oid);
#ds:= algebra.sortTail(d);
#io.print(ds);
#e:=batcalc.sht(d);
#es:= algebra.sortTail(e);
#io.print(es);
#f:=batcalc.lng(d);
#fs:= algebra.sortTail(f);
#io.print(fs);
#
## head: physically void
#g:=algebra.markH(a,20:oid);
#g:=algebra.copy(g);
#gs:= algebra.sortTail(g);
#io.print(gs);
#h:=batcalc.sht(g);
#hs:= algebra.sortTail(h);
#io.print(hs);
#i:=batcalc.lng(g);
#is:= algebra.sortTail(i);
#io.print(is);
#
function user.main():void;              #  0 main:void := user.main() {G}
# head: oid 
# a:=microbenchmark.uniform(0:oid,9,9); platform dependent 
    a := bat.new(:oid,:int);            #  3 a:bat[:oid,:int] := CMDBATnew(_4:oid, _5:int) {G}
    bat.insert(a,3@0,0);                #  4 _6:bat[:oid,:int] := BKCinsert_bun(a:bat[:oid,:int], _7:oid, _8:int) {G}
    bat.insert(a,0@0,1);                #  5 _9:bat[:oid,:int] := BKCinsert_bun(a:bat[:oid,:int], _10:oid, _11:int) {G}
    bat.insert(a,2@0,2);                #  6 _12:bat[:oid,:int] := BKCinsert_bun(a:bat[:oid,:int], _13:oid, _14:int) {G}
    bat.insert(a,5@0,3);                #  7 _15:bat[:oid,:int] := BKCinsert_bun(a:bat[:oid,:int], _16:oid, _17:int) {G}
    bat.insert(a,7@0,4);                #  8 _18:bat[:oid,:int] := BKCinsert_bun(a:bat[:oid,:int], _19:oid, _20:int) {G}
    bat.insert(a,8@0,5);                #  9 _21:bat[:oid,:int] := BKCinsert_bun(a:bat[:oid,:int], _22:oid, _23:int) {G}
    bat.insert(a,1@0,6);                # 10 _24:bat[:oid,:int] := BKCinsert_bun(a:bat[:oid,:int], _25:oid, _26:int) {G}
    bat.insert(a,6@0,7);                # 11 _27:bat[:oid,:int] := BKCinsert_bun(a:bat[:oid,:int], _28:oid, _29:int) {G}
    bat.insert(a,4@0,8);                # 12 _30:bat[:oid,:int] := BKCinsert_bun(a:bat[:oid,:int], _31:oid, _32:int) {G}
    as := algebra.sortTail(a);          # 13 as:bat[:oid,:int] := ALGtsort(a:bat[:oid,:int]) {G}
    io.print(as);                       # 14 _34:void := IOprint_val(as:bat[:oid,:int]) 
    b := batcalc.sht(a);                # 15 b:bat[:oid,:sht] := CMDconvert_int_sht(a:bat[:oid,:int]) {G}
    bs := algebra.sortTail(b);          # 16 bs:bat[:oid,:sht] := ALGtsort(b:bat[:oid,:sht]) {G}
    io.print(bs);                       # 17 _37:void := IOprint_val(bs:bat[:oid,:sht]) 
    c := batcalc.lng(a);                # 18 c:bat[:oid,:lng] := CMDconvert_int_lng(a:bat[:oid,:int]) {G}
    cs := algebra.sortTail(c);          # 19 cs:bat[:oid,:lng] := ALGtsort(c:bat[:oid,:lng]) {G}
    io.print(cs);                       # 20 _40:void := IOprint_val(cs:bat[:oid,:lng]) 
# head: void view on oid 
    d := algebra.markH(a,10@0:oid);     # 22 d:bat[:oid,:int] := ALGmarkHead(a:bat[:oid,:int], _43:oid) {G}
    ds := algebra.sortTail(d);          # 23 ds:bat[:oid,:int] := ALGtsort(d:bat[:oid,:int]) {G}
    io.print(ds);                       # 24 _45:void := IOprint_val(ds:bat[:oid,:int]) 
    e := batcalc.sht(d);                # 25 e:bat[:oid,:sht] := CMDconvert_int_sht(d:bat[:oid,:int]) {G}
    es := algebra.sortTail(e);          # 26 es:bat[:oid,:sht] := ALGtsort(e:bat[:oid,:sht]) {G}
    io.print(es);                       # 27 _48:void := IOprint_val(es:bat[:oid,:sht]) 
    f := batcalc.lng(d);                # 28 f:bat[:oid,:lng] := CMDconvert_int_lng(d:bat[:oid,:int]) {G}
    fs := algebra.sortTail(f);          # 29 fs:bat[:oid,:lng] := ALGtsort(f:bat[:oid,:lng]) {G}
    io.print(fs);                       # 30 _51:void := IOprint_val(fs:bat[:oid,:lng]) 
# head: physically void 
    g := algebra.markH(a,20@0:oid);     # 32 g:bat[:oid,:int] := ALGmarkHead(a:bat[:oid,:int], _54:oid) {G}
    g := algebra.copy(g);               # 33 g:bat[:oid,:int] := ALGcopy(g:bat[:oid,:int]) {G}
    gs := algebra.sortTail(g);          # 34 gs:bat[:oid,:int] := ALGtsort(g:bat[:oid,:int]) {G}
    io.print(gs);                       # 35 _56:void := IOprint_val(gs:bat[:oid,:int]) 
    h := batcalc.sht(g);                # 36 h:bat[:oid,:sht] := CMDconvert_int_sht(g:bat[:oid,:int]) {G}
    hs := algebra.sortTail(h);          # 37 hs:bat[:oid,:sht] := ALGtsort(h:bat[:oid,:sht]) {G}
    io.print(hs);                       # 38 _59:void := IOprint_val(hs:bat[:oid,:sht]) 
    i := batcalc.lng(g);                # 39 i:bat[:oid,:lng] := CMDconvert_int_lng(g:bat[:oid,:int]) {G}
    is := algebra.sortTail(i);          # 40 is:bat[:oid,:lng] := ALGtsort(i:bat[:oid,:lng]) {G}
    io.print(is);                       # 41 _62:void := IOprint_val(is:bat[:oid,:lng]) 
end main;	# 42  
#-----------------#
# t	h	  # name
# oid	int	  # type
#-----------------#
[ 3@0,	  0	  ]
[ 0@0,	  1	  ]
[ 2@0,	  2	  ]
[ 5@0,	  3	  ]
[ 7@0,	  4	  ]
[ 8@0,	  5	  ]
[ 1@0,	  6	  ]
[ 6@0,	  7	  ]
[ 4@0,	  8	  ]
#-----------------#
# t	h	  # name
# oid	sht	  # type
#-----------------#
[ 3@0,	  0	  ]
[ 0@0,	  1	  ]
[ 2@0,	  2	  ]
[ 5@0,	  3	  ]
[ 7@0,	  4	  ]
[ 8@0,	  5	  ]
[ 1@0,	  6	  ]
[ 6@0,	  7	  ]
[ 4@0,	  8	  ]
#-----------------#
# t	h	  # name
# oid	lng	  # type
#-----------------#
[ 3@0,	  0	  ]
[ 0@0,	  1	  ]
[ 2@0,	  2	  ]
[ 5@0,	  3	  ]
[ 7@0,	  4	  ]
[ 8@0,	  5	  ]
[ 1@0,	  6	  ]
[ 6@0,	  7	  ]
[ 4@0,	  8	  ]
#-----------------#
# t	h	  # name
# void	int	  # type
#-----------------#
[ 10@0,	  0	  ]
[ 11@0,	  1	  ]
[ 12@0,	  2	  ]
[ 13@0,	  3	  ]
[ 14@0,	  4	  ]
[ 15@0,	  5	  ]
[ 16@0,	  6	  ]
[ 17@0,	  7	  ]
[ 18@0,	  8	  ]
#-----------------#
# t	h	  # name
# void	sht	  # type
#-----------------#
[ 10@0,	  0	  ]
[ 11@0,	  1	  ]
[ 12@0,	  2	  ]
[ 13@0,	  3	  ]
[ 14@0,	  4	  ]
[ 15@0,	  5	  ]
[ 16@0,	  6	  ]
[ 17@0,	  7	  ]
[ 18@0,	  8	  ]
#-----------------#
# t	h	  # name
# void	lng	  # type
#-----------------#
[ 10@0,	  0	  ]
[ 11@0,	  1	  ]
[ 12@0,	  2	  ]
[ 13@0,	  3	  ]
[ 14@0,	  4	  ]
[ 15@0,	  5	  ]
[ 16@0,	  6	  ]
[ 17@0,	  7	  ]
[ 18@0,	  8	  ]
#-----------------#
# t	h	  # name
# void	int	  # type
#-----------------#
[ 20@0,	  0	  ]
[ 21@0,	  1	  ]
[ 22@0,	  2	  ]
[ 23@0,	  3	  ]
[ 24@0,	  4	  ]
[ 25@0,	  5	  ]
[ 26@0,	  6	  ]
[ 27@0,	  7	  ]
[ 28@0,	  8	  ]
#-----------------#
# t	h	  # name
# void	sht	  # type
#-----------------#
[ 20@0,	  0	  ]
[ 21@0,	  1	  ]
[ 22@0,	  2	  ]
[ 23@0,	  3	  ]
[ 24@0,	  4	  ]
[ 25@0,	  5	  ]
[ 26@0,	  6	  ]
[ 27@0,	  7	  ]
[ 28@0,	  8	  ]
#-----------------#
# t	h	  # name
# void	lng	  # type
#-----------------#
[ 20@0,	  0	  ]
[ 21@0,	  1	  ]
[ 22@0,	  2	  ]
[ 23@0,	  3	  ]
[ 24@0,	  4	  ]
[ 25@0,	  5	  ]
[ 26@0,	  6	  ]
[ 27@0,	  7	  ]
[ 28@0,	  8	  ]

# 14:01:54 >  
# 14:01:54 >  Done.
# 14:01:54 >  

