# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#include "mil_prelude";
#	io.print("setoid(oid(20000000));");
	aa_a := calc.oid(20000000);
	ba_a := calc.setoid(aa_a);
#	io.print("#check out arithmatic against using Multi-cast operator\n");
#	io.print("");
#	io.print("var t:= new(int, int);");
	t := bat.new(:oid,nil:int);
	ca_a := bat.append(t,2);
	da_a := bat.append(t,6);
	ea_a := bat.append(t,14);
	fa_a := bat.append(t,16);
	ga_a := bat.append(t,18);
	ha_a := bat.append(t,8);
	ia_a := bat.append(t,10);
	ja_a := bat.append(t,4);
	ka_a := bat.append(t,12);
	z := batcalc.+(t,t);
	la_a := io.print(z);
	z := batcalc.*(t,z);
	ma_a := io.print(z);
	z := batcalc./(t,t);
	na_a := io.print(z);
	oa_a := clients.quit();
