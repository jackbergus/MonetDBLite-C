# Monet Mil to Mal compiler
#include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#include "mil_prelude";
#	mil.line("setoid(oid(20000000));");
	aa_a := calc.oid(20000000);
	ba_a := calc.setoid(aa_a);
#	mil.line("#check out arithmatic against using Multi-cast operator\n");
#	mil.line("");
#	mil.line("var t:= new(int, int);");
	t := bat.new(nil:int,nil:int);
#	mil.line("t.insert(1,2);");
	ca_a := bat.insert(t,1,2);
#	mil.line("t.insert(3,6);");
	da_a := bat.insert(t,3,6);
#	mil.line("t.insert(13,14);");
	ea_a := bat.insert(t,13,14);
#	mil.line("t.insert(17,16);");
	fa_a := bat.insert(t,17,16);
#	mil.line("t.insert(19,18);");
	ga_a := bat.insert(t,19,18);
#	mil.line("t.insert(5,8);");
	ha_a := bat.insert(t,5,8);
#	mil.line("t.insert(7,10);");
	ia_a := bat.insert(t,7,10);
#	mil.line("t.insert(2,4);");
	ja_a := bat.insert(t,2,4);
#	mil.line("t.insert(11,12);");
	ka_a := bat.insert(t,11,12);
#	mil.line("var z:= t[+]t;");
	z := batcalc.+(t,t);
#	mil.line("z.print();");
	la_a := io.print(z);
#	mil.line("z:= t [*] z;");
	z := batcalc.*(t,z);
#	mil.line("z.print();");
	ma_a := io.print(z);
#	mil.line("z:= t [/] t;");
	z := batcalc./(t,t);
#	mil.line("z.print();");
	na_a := io.print(z);
#	mil.line("quit();");
	oa_a := clients.quit();
