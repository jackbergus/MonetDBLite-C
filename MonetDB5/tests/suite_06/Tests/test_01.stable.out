stdout of test 'test_01` in directory 'tests/suite_06` itself:


# 00:12:30 >  
# 00:12:30 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_06  test_01.mal </dev/null
# 00:12:30 >  

!WARNING: GDKlockHome: ignoring empty or invalid .gdk_lock.
!WARNING: BBPdir: initializing BBP.
# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_06
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("#check out arithmatic against using Multi-cast operator\n");
#	mil.line("");
#	mil.line("var t:= new(int, int);");
#	t := bbp.new(nil:int,nil:int);
#	mil.line("t.insert(1,2);");
#	ca_a := bat.insert(t,1,2);
#	mil.line("t.insert(3,6);");
#	da_a := bat.insert(t,3,6);
#	mil.line("t.insert(13,14);");
#	ea_a := bat.insert(t,13,14);
#	mil.line("t.insert(17,16);");
#	fa_a := bat.insert(t,17,16);
#	mil.line("t.insert(19,18);");
#	ga_a := bat.insert(t,19,18);
#	mil.line("t.insert(5,8);");
#	ha_a := bat.insert(t,5,8);
#	mil.line("t.insert(7,10);");
#	ia_a := bat.insert(t,7,10);
#	mil.line("t.insert(2,4);");
#	ja_a := bat.insert(t,2,4);
#	mil.line("t.insert(11,12);");
#	ka_a := bat.insert(t,11,12);
#	mil.line("var z:= t[+]t;");
#	z := batcalc.+(t,t);
#	mil.line("z.print();");
#	la_a := io.print(z);
#	mil.line("z:= t [*] z;");
#	z := batcalc.*(t,z);
#	mil.line("z.print();");
#	ma_a := io.print(z);
#	mil.line("z:= t [/] t;");
#	z := batcalc./(t,t);
#	mil.line("z.print();");
#	na_a := io.print(z);
#	mil.line("quit();");
#	oa_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  (_31:str)
#Predefined code segment 	# 2  (_32:str)
#The compiler can not guarantee an accurate compilation, 	# 3  (_33:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  (_34:str)
#A few guidelines to maximize usefullness. 	# 5  (_35:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  (_36:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  (_37:str)
#include "mil_prelude"; 	# 8  (_38:str)
    mil.line("setoid(oid(20000000));");	# 9 MILline (_39:void)<-(_40:str)
    aa_a := calc.oid(20000000);	# 10 CALCint2oid (aa_a:oid)<-(_42:int)
    ba_a := calc.setoid(aa_a);	# 11 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("#check out arithmatic against using Multi-cast operator\n");	# 12 MILline (_44:void)<-(_45:str)
    mil.line("");	# 13 MILline (_46:void)<-(_47:str)
    mil.line("var t:= new(int, int);");	# 14 MILline (_48:void)<-(_49:str)
    t := bat.new(nil:int,nil:int);	# 15 CMDBATnew (t:bat[:int,:int])<-(_51:int)(_51:int)
    mil.line("t.insert(1,2);");	# 16 MILline (_52:void)<-(_53:str)
    ca_a := bat.insert(t,1,2);	# 17 BKCinsert_bun_int_int (ca_a:void)<-(t:bat[:int,:int])(_55:int)(_56:int)
    mil.line("t.insert(3,6);");	# 18 MILline (_57:void)<-(_58:str)
    da_a := bat.insert(t,3,6);	# 19 BKCinsert_bun_int_int (da_a:void)<-(t:bat[:int,:int])(_60:int)(_61:int)
    mil.line("t.insert(13,14);");	# 20 MILline (_62:void)<-(_63:str)
    ea_a := bat.insert(t,13,14);	# 21 BKCinsert_bun_int_int (ea_a:void)<-(t:bat[:int,:int])(_65:int)(_66:int)
    mil.line("t.insert(17,16);");	# 22 MILline (_67:void)<-(_68:str)
    fa_a := bat.insert(t,17,16);	# 23 BKCinsert_bun_int_int (fa_a:void)<-(t:bat[:int,:int])(_70:int)(_71:int)
    mil.line("t.insert(19,18);");	# 24 MILline (_72:void)<-(_73:str)
    ga_a := bat.insert(t,19,18);	# 25 BKCinsert_bun_int_int (ga_a:void)<-(t:bat[:int,:int])(_75:int)(_76:int)
    mil.line("t.insert(5,8);");	# 26 MILline (_77:void)<-(_78:str)
    ha_a := bat.insert(t,5,8);	# 27 BKCinsert_bun_int_int (ha_a:void)<-(t:bat[:int,:int])(_80:int)(_81:int)
    mil.line("t.insert(7,10);");	# 28 MILline (_82:void)<-(_83:str)
    ia_a := bat.insert(t,7,10);	# 29 BKCinsert_bun_int_int (ia_a:void)<-(t:bat[:int,:int])(_85:int)(_86:int)
    mil.line("t.insert(2,4);");	# 30 MILline (_87:void)<-(_88:str)
    ja_a := bat.insert(t,2,4);	# 31 BKCinsert_bun_int_int (ja_a:void)<-(t:bat[:int,:int])(_56:int)(_90:int)
    mil.line("t.insert(11,12);");	# 32 MILline (_91:void)<-(_92:str)
    ka_a := bat.insert(t,11,12);	# 33 BKCinsert_bun_int_int (ka_a:void)<-(t:bat[:int,:int])(_94:int)(_95:int)
    mil.line("var z:= t[+]t;");	# 34 MILline (_96:void)<-(_97:str)
    z := batcalc.+(t,t);	# 35 CMDbatADD_int_int_int (z:bat[:int,:int])<-(t:bat[:int,:int])(t:bat[:int,:int])
    mil.line("z.print();");	# 36 MILline (_99:void)<-(_100:str)
    la_a := io.print(z);	# 37 IOprint_val (la_a:int)<-(z:bat[:int,:int])
    mil.line("z:= t [*] z;");	# 38 MILline (_102:void)<-(_103:str)
    z := batcalc.*(t,z);	# 39 CMDbatMUL_int_int_int (z:bat[:int,:int])<-(t:bat[:int,:int])(z:bat[:int,:int])
    mil.line("z.print();");	# 40 MILline (_104:void)<-(_100:str)
    ma_a := io.print(z);	# 41 IOprint_val (ma_a:int)<-(z:bat[:int,:int])
    mil.line("z:= t [/] t;");	# 42 MILline (_106:void)<-(_107:str)
    z := batcalc./(t,t);	# 43 CMDbatDIV_int_int_int (z:bat[:int,:int])<-(t:bat[:int,:int])(t:bat[:int,:int])
    mil.line("z.print();");	# 44 MILline (_108:void)<-(_100:str)
    na_a := io.print(z);	# 45 IOprint_val (na_a:int)<-(z:bat[:int,:int])
    mil.line("quit();");	# 46 MILline (_110:void)<-(_111:str)
    oa_a := clients.quit();	# 47 CLTquit (oa_a:void)
end main;	# 48  
#setoid(oid(20000000));
##check out arithmatic against using Multi-cast operator\n
#
#var t:= new(int, int);
#t.insert(1,2);
#t.insert(3,6);
#t.insert(13,14);
#t.insert(17,16);
#t.insert(19,18);
#t.insert(5,8);
#t.insert(7,10);
#t.insert(2,4);
#t.insert(11,12);
#var z:= t[+]t;
#z.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  4	  ]
[ 3,	  12	  ]
[ 13,	  28	  ]
[ 17,	  32	  ]
[ 19,	  36	  ]
[ 5,	  16	  ]
[ 7,	  20	  ]
[ 2,	  8	  ]
[ 11,	  24	  ]
#z:= t [*] z;
#z.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  8	  ]
[ 3,	  72	  ]
[ 13,	  392	  ]
[ 17,	  512	  ]
[ 19,	  648	  ]
[ 5,	  128	  ]
[ 7,	  200	  ]
[ 2,	  32	  ]
[ 11,	  288	  ]
#z:= t [/] t;
#z.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 3,	  1	  ]
[ 13,	  1	  ]
[ 17,	  1	  ]
[ 19,	  1	  ]
[ 5,	  1	  ]
[ 7,	  1	  ]
[ 2,	  1	  ]
[ 11,	  1	  ]
#quit();

# 00:12:30 >  
# 00:12:30 >  Done.
# 00:12:30 >  

