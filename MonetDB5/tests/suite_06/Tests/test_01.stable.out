stdout of test 'test_01` in directory 'tests/suite_06` itself:


# 00:12:30 >  
# 00:12:30 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_06  test_01.mal </dev/null
# 00:12:30 >  

!WARNING: GDKlockHome: ignoring empty or invalid .gdk_lock.
!WARNING: BBPdir: initializing BBP.
# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_06
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("#check out arithmatic against using Multi-cast operator\n");
#	mil.line("");
#	mil.line("var t:= new(int, int);");
#	t := bbp.new(nil:int,nil:int);
#	mil.line("t.insert(1,2);");
#	ca_a := bat.insert(t,1,2);
#	mil.line("t.insert(3,6);");
#	da_a := bat.insert(t,3,6);
#	mil.line("t.insert(13,14);");
#	ea_a := bat.insert(t,13,14);
#	mil.line("t.insert(17,16);");
#	fa_a := bat.insert(t,17,16);
#	mil.line("t.insert(19,18);");
#	ga_a := bat.insert(t,19,18);
#	mil.line("t.insert(5,8);");
#	ha_a := bat.insert(t,5,8);
#	mil.line("t.insert(7,10);");
#	ia_a := bat.insert(t,7,10);
#	mil.line("t.insert(2,4);");
#	ja_a := bat.insert(t,2,4);
#	mil.line("t.insert(11,12);");
#	ka_a := bat.insert(t,11,12);
#	mil.line("var z:= t[+]t;");
#	z := batcalc.+(t,t);
#	mil.line("z.print();");
#	la_a := io.print(z);
#	mil.line("z:= t [*] z;");
#	z := batcalc.*(t,z);
#	mil.line("z.print();");
#	ma_a := io.print(z);
#	mil.line("z:= t [/] t;");
#	z := batcalc./(t,t);
#	mil.line("z.print();");
#	na_a := io.print(z);
#	mil.line("quit();");
#	oa_a := clients.quit();
#
function user.main():void;              #  0 main:void {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#include "mil_prelude"; 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         # 11 aa_a:oid := CALCint2oid(_12:int) 
    ba_a := calc.setoid(aa_a);          # 12 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("#check out arithmatic against using Multi-cast operator\n"); 
#	io.print(""); 
#	io.print("var t:= new(int, int);"); 
    t := bat.new(:oid,nil:int);         # 16 t:bat[:oid,:int] := CMDBATnew(_18:oid, _19:int) {G}
    ca_a := bat.insert(t,1@0,2);        # 17 ca_a:void := BKCinsert_bun(t:bat[:oid,:int], _21:oid, _22:int) 
    da_a := bat.insert(t,3@0,6);        # 18 da_a:void := BKCinsert_bun(t:bat[:oid,:int], _24:oid, _25:int) 
    ea_a := bat.insert(t,13@0,14);      # 19 ea_a:void := BKCinsert_bun(t:bat[:oid,:int], _27:oid, _28:int) 
    fa_a := bat.insert(t,17@0,16);      # 20 fa_a:void := BKCinsert_bun(t:bat[:oid,:int], _30:oid, _31:int) 
    ga_a := bat.insert(t,19@0,18);      # 21 ga_a:void := BKCinsert_bun(t:bat[:oid,:int], _33:oid, _34:int) 
    ha_a := bat.insert(t,5@0,8);        # 22 ha_a:void := BKCinsert_bun(t:bat[:oid,:int], _36:oid, _37:int) 
    ia_a := bat.insert(t,7@0,10);       # 23 ia_a:void := BKCinsert_bun(t:bat[:oid,:int], _39:oid, _40:int) 
    ja_a := bat.insert(t,2@0,4);        # 24 ja_a:void := BKCinsert_bun(t:bat[:oid,:int], _42:oid, _43:int) 
    ka_a := bat.insert(t,11@0,12);      # 25 ka_a:void := BKCinsert_bun(t:bat[:oid,:int], _45:oid, _46:int) 
    z := batcalc.+(t,t);                # 26 z:bat[:oid,:int] := CMDbatADD_int_int_int(t:bat[:oid,:int], t:bat[:oid,:int]) {G}
    la_a := io.print(z);                # 27 la_a:void := IOprint_val(z:bat[:oid,:int]) 
    z := batcalc.*(t,z);                # 28 z:bat[:oid,:int] := CMDbatMUL_int_int_int(t:bat[:oid,:int], z:bat[:oid,:int]) {G}
    ma_a := io.print(z);                # 29 ma_a:void := IOprint_val(z:bat[:oid,:int]) 
    z := batcalc./(t,t);                # 30 z:bat[:oid,:int] := CMDbatDIV_int_int_int(t:bat[:oid,:int], t:bat[:oid,:int]) {G}
    na_a := io.print(z);                # 31 na_a:void := IOprint_val(z:bat[:oid,:int]) 
    oa_a := clients.quit();             # 32 oa_a:void 
end main;	# 33  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1@0,	  4	  ]
[ 3@0,	  12	  ]
[ 13@0,	  28	  ]
[ 17@0,	  32	  ]
[ 19@0,	  36	  ]
[ 5@0,	  16	  ]
[ 7@0,	  20	  ]
[ 2@0,	  8	  ]
[ 11@0,	  24	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1@0,	  8	  ]
[ 3@0,	  72	  ]
[ 13@0,	  392	  ]
[ 17@0,	  512	  ]
[ 19@0,	  648	  ]
[ 5@0,	  128	  ]
[ 7@0,	  200	  ]
[ 2@0,	  32	  ]
[ 11@0,	  288	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1@0,	  1	  ]
[ 3@0,	  1	  ]
[ 13@0,	  1	  ]
[ 17@0,	  1	  ]
[ 19@0,	  1	  ]
[ 5@0,	  1	  ]
[ 7@0,	  1	  ]
[ 2@0,	  1	  ]
[ 11@0,	  1	  ]

# 00:12:30 >  
# 00:12:30 >  Done.
# 00:12:30 >  

