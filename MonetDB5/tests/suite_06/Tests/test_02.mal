# Monet Mil to Mal compiler
#include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#include "mil_prelude";
#	mil.line("setoid(oid(20000000));");
	aa_a := oid(20000000);
	ba_a := setoid(aa_a);
#	mil.line("#check out arithmatic against using Multi-cast operator\n");
#	mil.line("");
#	mil.line("var t:= new(int, int);");
	t := new(nil:int,nil:int);
#	mil.line("t.insert(1,2);");
	ca_a := insert(t,1,2);
#	mil.line("t.insert(3,6);");
	da_a := insert(t,3,6);
#	mil.line("t.insert(13,14);");
	ea_a := insert(t,13,14);
#	mil.line("t.insert(17,16);");
	fa_a := insert(t,17,16);
#	mil.line("t.insert(19,18);");
	ga_a := insert(t,19,18);
#	mil.line("t.insert(5,8);");
	ha_a := insert(t,5,8);
#	mil.line("t.insert(7,10);");
	ia_a := insert(t,7,10);
#	mil.line("t.insert(2,4);");
	ja_a := insert(t,2,4);
#	mil.line("t.insert(11,12);");
	ka_a := insert(t,11,12);
#	mil.line("#A quick mechanism to create an initialized BAT\n");
#	mil.line("var z:= new(int,str);");
	z := new(nil:int,nil:str);
#	mil.line("z.[insert](t,\"hello\");");
	la_a := multiplex.tactics("insert",z,t,"hello");
#	mil.line("z.print();");
	ma_a := print(z);
#	mil.line("quit();");
	na_a := quit();
