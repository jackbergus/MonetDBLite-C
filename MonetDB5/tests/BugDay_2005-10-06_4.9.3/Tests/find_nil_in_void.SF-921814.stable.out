stdout of test 'find_nil_in_void.SF-921814` in directory 'tests/BugDay_2005-10-06_4.9.3` itself:


# 13:57:07 >  
# 13:57:07 >  Mtimeout -timeout 60 Mserver "--config=/home/manegold/Monet/Testing/Current/.GNU.32.32.d.--enable-debug.PREFIX./etc/MonetDB.conf" --debug=10 --set "monet_mod_path=/home/manegold/Monet/Testing/Current/.GNU.32.32.d.--enable-debug.PREFIX./lib/MonetDB:/home/manegold/Monet/Testing/Current/.GNU.32.32.d.--enable-debug.PREFIX./lib/bin" --set "gdk_dbfarm=/home/manegold/Monet/Testing/Current/.GNU.32.32.d.--enable-debug.PREFIX./var/MonetDB/dbfarm" --set "sql_logdir=/home/manegold/Monet/Testing/Current/.GNU.32.32.d.--enable-debug.PREFIX./var/MonetDB/log" --set mapi_port=32481 --set sql_port=42936 --set xquery_port=53149 --set monet_prompt= --trace --dbname=mTests_tests_BugDay_2005-10-06_4.9.3  < find_nil_in_void.SF-921814.milS
# 13:57:07 >  

# Monet Database Server V4.9.3
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit with 32bit OIDs; dynamically linked.
# Visit http://monetdb.cwi.nl/ for further information.
#b := bat.new(:void,:str);
#bat.setSequenceBase(b,nil);
#bat.insert(b,nil,"zero");
#io.print(b);
#z:= algebra.find(b,0:oid);
#zs:=str.str(z);
#catch MALException;
#	zs:= nil:str;
#exit MALException;
#io.printf("oid(0) -> %s\n",zs);
#
#z:= algebra.find(b,nil:oid);
#zs:= str.str(z);
#io.printf("oid(nil) -> %s\n",zs);
#
#bat.setSequenceBase(b,0@0);
#bat.insert(b,nil,"zero");
#io.print(b);
#z:= algebra.find(b,0:oid);
#zs:=str.str(z);
#catch MALException;
#	zs:= nil:str;
#exit MALException;
#io.printf("oid(0) -> %s\n",zs);
#
#z:= algebra.find(b,nil:oid);
#zs:= str.str(z);
#catch MALException;
#	zs:= nil:str;
#exit MALException;
#io.printf("oid(nil) -> %s\n",zs);
#
function user.main():void;              #  0 main:void := user.main() {G}
    b := bat.new(:oid,:str);            #  1 b:bat[:oid,:str] := CMDBATnew(_2:oid, _3:str) {G}
    bat.append(b,"zero");               #  2 _4:bat[:str,:any] := BKCappend_val_wrap(b:bat[:oid,:str], _5:str) {G}
    io.print(b);                        #  3 _6:void := IOprint_val(b:bat[:oid,:str]) 
    z := algebra.find(b,0@0:oid);       #  4 z:str := ALGfind(b:bat[:oid,:str], _8:oid) {G}
    zs := str.str(z);                   #  5 zs:str := STRtostr(z:str) {G}
catch MALException:str ;                #  6 MALException:str {J8}
    zs := nil:str;                      #  7 zs:str := _11:str {G}
exit MALException:str ;                 #  8 MALException:str 
    io.printf("oid(0) -> %s\n",zs);     #  9 _12:void := IOprintf(_13:str, zs:str) 
    z := algebra.find(b,nil:oid);       # 10 z:str := ALGfind(b:bat[:oid,:str], _14:oid) {G}
    zs := str.str(z);                   # 11 zs:str := STRtostr(z:str) {G}
    io.printf("oid(nil) -> %s\n",zs);   # 12 _15:void := IOprintf(_16:str, zs:str) 
    bat.append(b,"zero");               # 13 _17:bat[:str,:any] := BKCappend_val_wrap(b:bat[:oid,:str], _5:str) {G}
    io.print(b);                        # 14 _18:void := IOprint_val(b:bat[:oid,:str]) 
    z := algebra.find(b,0@0:oid);       # 15 z:str := ALGfind(b:bat[:oid,:str], _8:oid) {G}
    zs := str.str(z);                   # 16 zs:str := STRtostr(z:str) {G}
catch MALException:str ;                # 17 MALException:str {J19}
    zs := nil:str;                      # 18 zs:str := _11:str {G}
exit MALException:str ;                 # 19 MALException:str 
    io.printf("oid(0) -> %s\n",zs);     # 20 _19:void := IOprintf(_13:str, zs:str) 
    z := algebra.find(b,nil:oid);       # 21 z:str := ALGfind(b:bat[:oid,:str], _14:oid) {G}
    zs := str.str(z);                   # 22 zs:str := STRtostr(z:str) {G}
catch MALException:str ;                # 23 MALException:str {J25}
    zs := nil:str;                      # 24 zs:str := _11:str {G}
exit MALException:str ;                 # 25 MALException:str 
    io.printf("oid(nil) -> %s\n",zs);   # 26 _20:void := IOprintf(_16:str, zs:str) 
end main;	# 27  
#-----------------#
# h	t	  # name
# oid	str	  # type
#-----------------#
[ 0@0,	  "zero"  ]
oid(0) -> zero
oid(0) -> nil
oid(nil) -> nil

# 19:59:42 >  
# 19:59:42 >  Done.
# 19:59:42 >  

