# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	io.print("setoid(oid(2000000));");
	aa_a := oid(2000000);
	ba_a := setoid(aa_a);
#	io.print("# make a wisconsin-like database\n");
#	io.print("# it uses the predefined wisconsin generator\n");
#	io.print("wisc(\"W10k\",10000);");
	ca_a := wisc("W10k",10000);
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); cpu().print(); printf(\"#~EndVariableOutput~#\\n\");");
	da_a := printf("#~BeginVariableOutput~#\n");
	ea_a := cpu();
	fa_a := print(ea_a);
	ga_a := printf("#~EndVariableOutput~#\n");
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); memory().print(); printf(\"#~EndVariableOutput~#\\n\");");
	ha_a := printf("#~BeginVariableOutput~#\n");
	ia_a := status.memStatistics();
	ja_a := print(ia_a);
	ka_a := printf("#~EndVariableOutput~#\n");
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); io().print(); printf(\"#~EndVariableOutput~#\\n\");");
	la_a := printf("#~BeginVariableOutput~#\n");
	ma_a := io();
	na_a := print(ma_a);
	oa_a := printf("#~EndVariableOutput~#\n");
#	io.print("commit();");
	pa_a := commit();
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); io().print(); printf(\"#~EndVariableOutput~#\\n\");");
	qa_a := printf("#~BeginVariableOutput~#\n");
	ra_a := io();
	sa_a := print(ra_a);
	ta_a := printf("#~EndVariableOutput~#\n");
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); cpu().print(); printf(\"#~EndVariableOutput~#\\n\");");
	ua_a := printf("#~BeginVariableOutput~#\n");
	va_a := cpu();
	wa_a := print(va_a);
	xa_a := printf("#~EndVariableOutput~#\n");
#	io.print("wisc(\"W100k\",100000);");
	ya_a := wisc("W100k",100000);
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); cpu().print(); printf(\"#~EndVariableOutput~#\\n\");");
	ab_a := printf("#~BeginVariableOutput~#\n");
	bb_a := cpu();
	cb_a := print(bb_a);
	db_a := printf("#~EndVariableOutput~#\n");
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); memory().print(); printf(\"#~EndVariableOutput~#\\n\");");
	eb_a := printf("#~BeginVariableOutput~#\n");
	fb_a := status.memStatistics();
	gb_a := print(fb_a);
	hb_a := printf("#~EndVariableOutput~#\n");
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); io().print(); printf(\"#~EndVariableOutput~#\\n\");");
	ib_a := printf("#~BeginVariableOutput~#\n");
	jb_a := io();
	kb_a := print(jb_a);
	lb_a := printf("#~EndVariableOutput~#\n");
#	io.print("commit();");
	mb_a := commit();
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); io().print(); printf(\"#~EndVariableOutput~#\\n\");");
	nb_a := printf("#~BeginVariableOutput~#\n");
	ob_a := io();
	pb_a := print(ob_a);
	qb_a := printf("#~EndVariableOutput~#\n");
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); cpu().print(); printf(\"#~EndVariableOutput~#\\n\");");
	rb_a := printf("#~BeginVariableOutput~#\n");
	sb_a := cpu();
	tb_a := print(sb_a);
	ub_a := printf("#~EndVariableOutput~#\n");
#	io.print("quit();");
	vb_a := quit();
#Identifer 'memory' mapped to 'status.memStatistics'
