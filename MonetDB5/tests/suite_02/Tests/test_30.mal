# Monet Mil to Mal compiler
#include mil_scenario;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(2000000));");
	aa_a := oid(2000000);
	ba_a := setoid(aa_a);
#	mil.line("# load a few wisconsin tables and produce histograms\n");
	W10k_evenOnePercent := new("W10k_evenOnePercent");
#	mil.line("var W10k_tenPercent := bat(\"W10k_tenPercent\");");
	W10k_tenPercent := new("W10k_tenPercent");
#	mil.line("var h1:= W10k_evenOnePercent.histogram();");
	h1 := histogram(W10k_evenOnePercent);
#	mil.line("h1.sort().print();");
	ca_a := sort(h1);
	da_a := print(ca_a);
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); cpu().print(); printf(\"#~EndVariableOutput~#\\n\");printf(\"#~BeginVariableOutput~#\\n\"); memory().print(); printf(\"#~EndVariableOutput~#\\n\");printf(\"#~BeginVariableOutput~#\\n\"); io().print(); printf(\"#~EndVariableOutput~#\\n\");");
	ea_a := printf("#~BeginVariableOutput~#\n");
	fa_a := cpu();
	ga_a := print(fa_a);
	ha_a := printf("#~EndVariableOutput~#\n");
	ia_a := printf("#~BeginVariableOutput~#\n");
	ja_a := status.memStatistics();
	ka_a := print(ja_a);
	la_a := printf("#~EndVariableOutput~#\n");
	ma_a := printf("#~BeginVariableOutput~#\n");
	na_a := io();
	oa_a := print(na_a);
	pa_a := printf("#~EndVariableOutput~#\n");
#	mil.line("var h2:= W10k_tenPercent.histogram();");
	h2 := histogram(W10k_tenPercent);
#	mil.line("h2.sort().print();");
	qa_a := sort(h2);
	ra_a := print(qa_a);
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); cpu().print(); printf(\"#~EndVariableOutput~#\\n\");printf(\"#~BeginVariableOutput~#\\n\"); memory().print(); printf(\"#~EndVariableOutput~#\\n\");printf(\"#~BeginVariableOutput~#\\n\"); io().print(); printf(\"#~EndVariableOutput~#\\n\");");
	sa_a := printf("#~BeginVariableOutput~#\n");
	ta_a := cpu();
	ua_a := print(ta_a);
	va_a := printf("#~EndVariableOutput~#\n");
	wa_a := printf("#~BeginVariableOutput~#\n");
	xa_a := status.memStatistics();
	ya_a := print(xa_a);
	ab_a := printf("#~EndVariableOutput~#\n");
	bb_a := printf("#~BeginVariableOutput~#\n");
	cb_a := io();
	db_a := print(cb_a);
	eb_a := printf("#~EndVariableOutput~#\n");
#	mil.line("quit();");
	fb_a := quit();
#Identifer 'memory' mapped to 'status.memStatistics'
