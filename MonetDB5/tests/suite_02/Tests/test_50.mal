# Monet Mil to Mal compiler
#include mil_scenario;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilatioStatisticsn,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additioStatisticsnal support routines
#	mil.line("setoid(oid(2000000));");
	aa_a := oid(2000000);
	ba_a := setoid(aa_a);
#	mil.line("# Testing effect on join ordering\n");
	ca_a := load("k10_unique1");
#	mil.line("var k10_unique1:=bat(\"k10_unique1\");");
	k10_unique1 := new("k10_unique1");
#	mil.line("var c:= k10_unique1.select(0,9); ");
	c := select(k10_unique1,0,9);
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); cpuStatistics().print(); printf(\"#~EndVariableOutput~#\\n\");printf(\"#~BeginVariableOutput~#\\n\"); memStatisticsory().print(); printf(\"#~EndVariableOutput~#\\n\");printf(\"#~BeginVariableOutput~#\\n\"); ioStatistics().print(); printf(\"#~EndVariableOutput~#\\n\");");
	da_a := printf("#~BeginVariableOutput~#\n");
	ea_a := cpuStatistics();
	fa_a := print(ea_a);
	ga_a := printf("#~EndVariableOutput~#\n");
	ha_a := printf("#~BeginVariableOutput~#\n");
	ia_a := status.memStatisticsStatistics();
	ja_a := print(ia_a);
	ka_a := printf("#~EndVariableOutput~#\n");
	la_a := printf("#~BeginVariableOutput~#\n");
	ma_a := ioStatistics();
	na_a := print(ma_a);
	oa_a := printf("#~EndVariableOutput~#\n");
#	mil.line("k10_unique1.join(c).count().print();commit();");
	pa_a := join(k10_unique1,c);
	qa_a := count(pa_a);
	ra_a := print(qa_a);
	sa_a := commit();
#	mil.line("k10_unique1.join(c);commit();");
	ta_a := join(k10_unique1,c);
	ua_a := commit();
#	mil.line("k10_unique1.join(c);commit();");
	va_a := join(k10_unique1,c);
	wa_a := commit();
#	mil.line("k10_unique1.join(c);commit();");
	xa_a := join(k10_unique1,c);
	ya_a := commit();
#	mil.line("k10_unique1.join(c);commit();");
	ab_a := join(k10_unique1,c);
	bb_a := commit();
#	mil.line("k10_unique1.join(c);commit();");
	cb_a := join(k10_unique1,c);
	db_a := commit();
#	mil.line("k10_unique1.join(c);commit();");
	eb_a := join(k10_unique1,c);
	fb_a := commit();
#	mil.line("k10_unique1.join(c);commit();");
	gb_a := join(k10_unique1,c);
	hb_a := commit();
#	mil.line("k10_unique1.join(c);commit();");
	ib_a := join(k10_unique1,c);
	jb_a := commit();
#	mil.line("k10_unique1.join(c);commit(); ");
	kb_a := join(k10_unique1,c);
	lb_a := commit();
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); cpuStatistics().print(); printf(\"#~EndVariableOutput~#\\n\");printf(\"#~BeginVariableOutput~#\\n\"); memStatisticsory().print(); printf(\"#~EndVariableOutput~#\\n\");printf(\"#~BeginVariableOutput~#\\n\"); ioStatistics().print(); printf(\"#~EndVariableOutput~#\\n\");");
	mb_a := printf("#~BeginVariableOutput~#\n");
	nb_a := cpuStatistics();
	ob_a := print(nb_a);
	pb_a := printf("#~EndVariableOutput~#\n");
	qb_a := printf("#~BeginVariableOutput~#\n");
	rb_a := status.memStatisticsStatistics();
	sb_a := print(rb_a);
	tb_a := printf("#~EndVariableOutput~#\n");
	ub_a := printf("#~BeginVariableOutput~#\n");
	vb_a := ioStatistics();
	wb_a := print(vb_a);
	xb_a := printf("#~EndVariableOutput~#\n");
#	mil.line("c.join(k10_unique1).count().print();commit();");
	yb_a := join(c,k10_unique1);
	ac_a := count(yb_a);
	bc_a := print(ac_a);
	cc_a := commit();
#	mil.line("c.join(k10_unique1).count();commit();");
	dc_a := join(c,k10_unique1);
	ec_a := count(dc_a);
	fc_a := commit();
#	mil.line("c.join(k10_unique1).count();commit();");
	gc_a := join(c,k10_unique1);
	hc_a := count(gc_a);
	ic_a := commit();
#	mil.line("c.join(k10_unique1).count();commit();");
	jc_a := join(c,k10_unique1);
	kc_a := count(jc_a);
	lc_a := commit();
#	mil.line("c.join(k10_unique1).count();commit();");
	mc_a := join(c,k10_unique1);
	nc_a := count(mc_a);
	oc_a := commit();
#	mil.line("c.join(k10_unique1).count();commit();");
	pc_a := join(c,k10_unique1);
	qc_a := count(pc_a);
	rc_a := commit();
#	mil.line("c.join(k10_unique1).count();commit();");
	sc_a := join(c,k10_unique1);
	tc_a := count(sc_a);
	uc_a := commit();
#	mil.line("c.join(k10_unique1).count();commit();");
	vc_a := join(c,k10_unique1);
	wc_a := count(vc_a);
	xc_a := commit();
#	mil.line("c.join(k10_unique1).count();commit();");
	yc_a := join(c,k10_unique1);
	ad_a := count(yc_a);
	bd_a := commit();
#	mil.line("c.join(k10_unique1).count();commit();");
	cd_a := join(c,k10_unique1);
	dd_a := count(cd_a);
	ed_a := commit();
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); cpuStatistics().print(); printf(\"#~EndVariableOutput~#\\n\");printf(\"#~BeginVariableOutput~#\\n\"); memStatisticsory().print(); printf(\"#~EndVariableOutput~#\\n\");printf(\"#~BeginVariableOutput~#\\n\"); ioStatistics().print(); printf(\"#~EndVariableOutput~#\\n\");");
	fd_a := printf("#~BeginVariableOutput~#\n");
	gd_a := cpuStatistics();
	hd_a := print(gd_a);
	id_a := printf("#~EndVariableOutput~#\n");
	jd_a := printf("#~BeginVariableOutput~#\n");
	kd_a := status.memStatisticsStatistics();
	ld_a := print(kd_a);
	md_a := printf("#~EndVariableOutput~#\n");
	nd_a := printf("#~BeginVariableOutput~#\n");
	od_a := ioStatistics();
	pd_a := print(od_a);
	qd_a := printf("#~EndVariableOutput~#\n");
#	mil.line("quit();");
	rd_a := quit();
#Identifer 'memStatisticsory' mapped to 'status.memStatistics'
