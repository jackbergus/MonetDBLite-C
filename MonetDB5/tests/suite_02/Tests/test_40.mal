# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	io.print("setoid(oid(2000000));");
	aa_a := oid(2000000);
	ba_a := setoid(aa_a);
#	io.print("# Checking out the effect of hash clustering\n");
#	io.print("var k10_unique1 := bat(\"k10_unique1\");");
	k10_unique1 := new("k10_unique1");
#	io.print("var t:= k10_unique1.select(0,20);");
	t := select(k10_unique1,0,20);
#	io.print("t.accbuild(\"hash\");");
	ca_a := accbuild(t,"hash");
#	io.print("t.print();");
	da_a := print(t);
#	io.print("t.acccluster(find(monet_acctbl,\"hash\"));");
	monet_acctbl:= mil.take("monet_acctbl");
	ea_a := find(monet_acctbl,"hash");
	fa_a := acccluster(t,ea_a);
#	io.print("t.print();");
	ga_a := print(t);
#	io.print("quit();");
	ha_a := quit();
