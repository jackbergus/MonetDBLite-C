# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	io.print("setoid(oid(2000000));");
	aa_a := oid(2000000);
	ba_a := setoid(aa_a);
#	io.print("# This sequence is conflict free\n");
#	io.print("#load(k10_unique1); load(k10_unique2);\n");
	k10_unique1 := new("k10_unique1");
#	io.print("var k10_unique2 := bat(\"k10_unique2\");");
	k10_unique2 := new("k10_unique2");
#	io.print("qtrace(1);");
	ca_a := qtrace(1);
#	io.print("var t1:= k10_unique1.copy();");
	t1 := copy(k10_unique1);
#	io.print("var t2:= k10_unique1.copy();");
	t2 := copy(k10_unique1);
#	io.print("var t3:= k10_unique1.copy();");
	t3 := copy(k10_unique1);
#	io.print("var t4:= k10_unique1.copy();");
	t4 := copy(k10_unique1);
#	io.print("var t5:= k10_unique1.copy();");
	t5 := copy(k10_unique1);
#	io.print("var s1:= k10_unique2.copy();");
	s1 := copy(k10_unique2);
#	io.print("var s2:= k10_unique2.copy();");
	s2 := copy(k10_unique2);
#	io.print("var s3:= k10_unique2.copy();");
	s3 := copy(k10_unique2);
#	io.print("var s4:= k10_unique2.copy();");
	s4 := copy(k10_unique2);
#	io.print("var s5:= k10_unique2.copy();");
	s5 := copy(k10_unique2);
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); cpu.print(); printf(\"#~EndVariableOutput~#\\n\");");
	da_a := printf("#~BeginVariableOutput~#\n");
	cpu:= mil.take("cpu");
	ea_a := print(cpu);
	fa_a := printf("#~EndVariableOutput~#\n");
#	io.print("join(t1,s1.reverse()).count().print();");
	ga_a := reverse(s1);
	ha_a := join(t1,ga_a);
	ia_a := count(ha_a);
	ja_a := print(ia_a);
#	io.print("join(t2,s2.reverse()).count().print();");
	ka_a := reverse(s2);
	la_a := join(t2,ka_a);
	ma_a := count(la_a);
	na_a := print(ma_a);
#	io.print("join(t3,s3.reverse()).count().print();");
	oa_a := reverse(s3);
	pa_a := join(t3,oa_a);
	qa_a := count(pa_a);
	ra_a := print(qa_a);
#	io.print("join(t4,s4.reverse()).count().print();");
	sa_a := reverse(s4);
	ta_a := join(t4,sa_a);
	ua_a := count(ta_a);
	va_a := print(ua_a);
#	io.print("join(t5,s5.reverse()).count().print();");
	wa_a := reverse(s5);
	xa_a := join(t5,wa_a);
	ya_a := count(xa_a);
	ab_a := print(ya_a);
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); cpu.print(); printf(\"#~EndVariableOutput~#\\n\");");
	bb_a := printf("#~BeginVariableOutput~#\n");
	cb_a := print(cpu);
	db_a := printf("#~EndVariableOutput~#\n");
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); qstat(); printf(\"#~EndVariableOutput~#\\n\");");
	eb_a := printf("#~BeginVariableOutput~#\n");
	fb_a := qstat();
	gb_a := printf("#~EndVariableOutput~#\n");
#	io.print("qtrace(0);qtrace(1);");
	hb_a := qtrace(0);
	ib_a := qtrace(1);
#	io.print("threadcnt(4);printf(\"#~BeginVariableOutput~#\\n\"); cpu.print(); printf(\"#~EndVariableOutput~#\\n\");");
	jb_a := threadcnt(4);
	kb_a := printf("#~BeginVariableOutput~#\n");
	lb_a := print(cpu);
	mb_a := printf("#~EndVariableOutput~#\n");
#	io.print("{|\t");
thread	nb_a;
#	io.print("\ti1:=join(t1,s1.reverse()).count();");
	ob_a := reverse(s1);
	pb_a := join(t1,ob_a);
	i1 := count(pb_a);
#	io.print("\ti2:=join(t2,s2.reverse()).count();");
	qb_a := reverse(s2);
	rb_a := join(t2,qb_a);
	i2 := count(rb_a);
#	io.print("\ti3:=join(t3,s3.reverse()).count();");
	sb_a := reverse(s3);
	tb_a := join(t3,sb_a);
	i3 := count(tb_a);
#	io.print("\ti4:=join(t4,s4.reverse()).count();");
	ub_a := reverse(s4);
	vb_a := join(t4,ub_a);
	i4 := count(vb_a);
#	io.print("\ti5:=join(t5,s5.reverse()).count();");
	wb_a := reverse(s5);
	xb_a := join(t5,wb_a);
	i5 := count(xb_a);
exit	nb_a;
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); qstat(); printf(\"#~EndVariableOutput~#\\n\");");
	yb_a := printf("#~BeginVariableOutput~#\n");
	ac_a := qstat();
	bc_a := printf("#~EndVariableOutput~#\n");
#	io.print("qtrace(0);");
	cc_a := qtrace(0);
#	io.print("print(i1);");
	dc_a := print(i1);
#	io.print("print(i2);");
	ec_a := print(i2);
#	io.print("print(i3);");
	fc_a := print(i3);
#	io.print("print(i4);");
	gc_a := print(i4);
#	io.print("print(i5);");
	hc_a := print(i5);
#	io.print("print(\"done parallel\");");
	ic_a := print("done parallel");
!ERROR: ""pseudo_thread_name".print();"
!                              ^
! syntax error, unexpected '.', expecting TOK_ITERATION or TOK_ITERATION_PAR or ';'.
