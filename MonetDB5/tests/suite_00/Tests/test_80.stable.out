stdout of test 'test_80` in directory 'tests/suite_00` itself:


# 00:12:29 >  
# 00:12:29 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_80.mal </dev/null
# 00:12:29 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("# Testing key and set constraints ;\n");
#	b := bbp.new(nil:int,nil:int);
#	mil.line("b.key(true);");
#	ca_a := bat.setKey(b,true);
#	mil.line("insert(b,1,2);");
#	da_a := bat.insert(b,1,2);
#	mil.line("insert(b,2,2);");
#	ea_a := bat.insert(b,2,2);
#	mil.line("print(b);");
#	fa_a := io.print(b);
#	mil.line("insert(b,1,3);");
#	ga_a := bat.insert(b,1,3);
#	mil.line("print(b);");
#	ha_a := io.print(b);
#	mil.line("insert(b,2,4);");
#	ia_a := bat.insert(b,2,4);
#	mil.line("print(b);");
#	ja_a := io.print(b);
#	mil.line("var c:= bbp.new(int,int);");
#	c := bbp.new(nil:int,nil:int);
#	mil.line("set(c,true);");
#	ka_a := bat.setSet(c,true);
#	mil.line("insert(c,1,2);");
#	la_a := bat.insert(c,1,2);
#	mil.line("insert(c,2,2);");
#	ma_a := bat.insert(c,2,2);
#	mil.line("print(c);");
#	na_a := io.print(c);
#	mil.line("insert(c,1,2);");
#	oa_a := bat.insert(c,1,2);
#	mil.line("print(c);");
#	pa_a := io.print(c);
#	mil.line("insert(c,2,2);");
#	qa_a := bat.insert(c,2,2);
#	mil.line("print(c);");
#	ra_a := io.print(c);
#	mil.line("quit();");
#	sa_a := clients.quit();
##Identifer 'key' mapped to 'bat.setKey'
##Identifer 'set' mapped to 'bat.setSet'
#
function user.main():void;              #  0 main:void := user.main() {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         # 11 aa_a:oid := CALCint2oid(_12:int) 
    ba_a := calc.setoid(aa_a);          # 12 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("# Testing key and set constraints ;\n"); 
    b := bat.new(nil:int,nil:int);      # 14 b:bat[:int,:int] := CMDBATnew(_16:int, _16:int) {G}
#	io.print("b.key(true);"); 
    ca_a := bat.setKey(b,true);         # 16 ca_a:bat[:int,:int] := BKCsetkey(b:bat[:int,:int], _19:bit) {G}
#	io.print("insert(b,1,2);"); 
    da_a := bat.insert(b,1,2);          # 18 da_a:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _22:int, _23:int) {G}
#	io.print("insert(b,2,2);"); 
    ea_a := bat.insert(b,2,2);          # 20 ea_a:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _23:int, _23:int) {G}
#	io.print("print(b);"); 
    fa_a := io.print(b);                # 22 fa_a:void := IOprint_val(b:bat[:int,:int]) 
#	io.print("insert(b,1,3);"); 
    ga_a := bat.insert(b,1,3);          # 24 ga_a:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _22:int, _30:int) {G}
#	io.print("print(b);"); 
    ha_a := io.print(b);                # 26 ha_a:void := IOprint_val(b:bat[:int,:int]) 
#	io.print("insert(b,2,4);"); 
    ia_a := bat.insert(b,2,4);          # 28 ia_a:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _23:int, _35:int) {G}
#	io.print("print(b);"); 
    ja_a := io.print(b);                # 30 ja_a:void := IOprint_val(b:bat[:int,:int]) 
#	io.print("var c:= bat.new(int,int);"); 
    c := bat.new(nil:int,nil:int);      # 32 c:bat[:int,:int] := CMDBATnew(_16:int, _16:int) {G}
#	io.print("set(c,true);"); 
    ka_a := bat.setSet(c,true);         # 34 ka_a:bat[:int,:int] := BKCsetSet(c:bat[:int,:int], _19:bit) {G}
#	io.print("insert(c,1,2);"); 
    la_a := bat.insert(c,1,2);          # 36 la_a:bat[:int,:int] := BKCinsert_bun(c:bat[:int,:int], _22:int, _23:int) {G}
#	io.print("insert(c,2,2);"); 
    ma_a := bat.insert(c,2,2);          # 38 ma_a:bat[:int,:int] := BKCinsert_bun(c:bat[:int,:int], _23:int, _23:int) {G}
#	io.print("print(c);"); 
    na_a := io.print(c);                # 40 na_a:void := IOprint_val(c:bat[:int,:int]) 
#	io.print("insert(c,1,2);"); 
    oa_a := bat.insert(c,1,2);          # 42 oa_a:bat[:int,:int] := BKCinsert_bun(c:bat[:int,:int], _22:int, _23:int) {G}
#	io.print("print(c);"); 
    pa_a := io.print(c);                # 44 pa_a:void := IOprint_val(c:bat[:int,:int]) 
#	io.print("insert(c,2,2);"); 
    qa_a := bat.insert(c,2,2);          # 46 qa_a:bat[:int,:int] := BKCinsert_bun(c:bat[:int,:int], _23:int, _23:int) {G}
#	io.print("print(c);"); 
    ra_a := io.print(c);                # 48 ra_a:void := IOprint_val(c:bat[:int,:int]) 
#	io.print("quit();"); 
    sa_a := clients.quit();             # 50 sa_a:void := CLTquit() 
#Identifer 'key' mapped to 'bat.setKey' 
#Identifer 'set' mapped to 'bat.setSet' 
end main;	# 53  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  2	  ]
#insert(b,1,3);
#print(b);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  3	  ]
[ 2,	  2	  ]
#insert(b,2,4);
#print(b);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  3	  ]
[ 2,	  4	  ]
#var c:= bbp.new(int,int);
#set(c,true);
#insert(c,1,2);
#insert(c,2,2);
#print(c);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  2	  ]
#insert(c,1,2);
#print(c);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  2	  ]
#insert(c,2,2);
#print(c);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  2	  ]
#quit();

# 00:12:29 >  
# 00:12:29 >  Done.
# 00:12:29 >  

