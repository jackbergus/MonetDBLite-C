stdout of test 'test_80` in directory 'tests/suite_00` itself:


# 00:12:29 >  
# 00:12:29 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_80.mal </dev/null
# 00:12:29 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("# Testing key and set constraints ;\n");
#	b := bbp.new(nil:int,nil:int);
#	mil.line("b.key(true);");
#	ca_a := bat.setKey(b,true);
#	mil.line("insert(b,1,2);");
#	da_a := bat.insert(b,1,2);
#	mil.line("insert(b,2,2);");
#	ea_a := bat.insert(b,2,2);
#	mil.line("print(b);");
#	fa_a := io.print(b);
#	mil.line("insert(b,1,3);");
#	ga_a := bat.insert(b,1,3);
#	mil.line("print(b);");
#	ha_a := io.print(b);
#	mil.line("insert(b,2,4);");
#	ia_a := bat.insert(b,2,4);
#	mil.line("print(b);");
#	ja_a := io.print(b);
#	mil.line("var c:= bbp.new(int,int);");
#	c := bbp.new(nil:int,nil:int);
#	mil.line("set(c,true);");
#	ka_a := bat.setSet(c,true);
#	mil.line("insert(c,1,2);");
#	la_a := bat.insert(c,1,2);
#	mil.line("insert(c,2,2);");
#	ma_a := bat.insert(c,2,2);
#	mil.line("print(c);");
#	na_a := io.print(c);
#	mil.line("insert(c,1,2);");
#	oa_a := bat.insert(c,1,2);
#	mil.line("print(c);");
#	pa_a := io.print(c);
#	mil.line("insert(c,2,2);");
#	qa_a := bat.insert(c,2,2);
#	mil.line("print(c);");
#	ra_a := io.print(c);
#	mil.line("quit();");
#	sa_a := clients.quit();
##Identifer 'key' mapped to 'bat.setKey'
##Identifer 'set' mapped to 'bat.setSet'
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  (_2:str)
#Predefined code segment 	# 3  (_3:str)
#The compiler can not guarantee an accurate compilation, 	# 4  (_4:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  (_5:str)
#A few guidelines to maximize usefullness. 	# 6  (_6:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  (_7:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  (_8:str)
#use the "mil_schema" for additional support routines 	# 9  (_9:str)
#	io.print("setoid(oid(20000000));"); 	# 10  (_10:str)
    aa_a := calc.oid(20000000);	# 11 CALCint2oid (aa_a:oid)<-(_12:int)
    ba_a := calc.setoid(aa_a);	# 12 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	io.print("# Testing key and set constraints ;\n"); 	# 13  (_14:str)
    b := bat.new(nil:int,nil:int);	# 14 CMDBATnew (b:bat[:int,:int])<-(_16:int)(_16:int)
#	io.print("b.key(true);"); 	# 15  (_17:str)
    ca_a := bat.setKey(b,true);	# 16 BKCsetkey (ca_a:bat[:int,:int])<-(b:bat[:int,:int])(_19:bit)
#	io.print("insert(b,1,2);"); 	# 17  (_20:str)
    da_a := bat.insert(b,1,2);	# 18 BKCinsert_bun (da_a:void)<-(b:bat[:int,:int])(_22:int)(_23:int)
#	io.print("insert(b,2,2);"); 	# 19  (_24:str)
    ea_a := bat.insert(b,2,2);	# 20 BKCinsert_bun (ea_a:void)<-(b:bat[:int,:int])(_23:int)(_23:int)
#	io.print("print(b);"); 	# 21  (_26:str)
    fa_a := io.print(b);	# 22 IOprint_val (fa_a:void)<-(b:bat[:int,:int])
#	io.print("insert(b,1,3);"); 	# 23  (_28:str)
    ga_a := bat.insert(b,1,3);	# 24 BKCinsert_bun (ga_a:void)<-(b:bat[:int,:int])(_22:int)(_30:int)
#	io.print("print(b);"); 	# 25  (_26:str)
    ha_a := io.print(b);	# 26 IOprint_val (ha_a:void)<-(b:bat[:int,:int])
#	io.print("insert(b,2,4);"); 	# 27  (_32:str)
    ia_a := bat.insert(b,2,4);	# 28 BKCinsert_bun (ia_a:void)<-(b:bat[:int,:int])(_23:int)(_34:int)
#	io.print("print(b);"); 	# 29  (_26:str)
    ja_a := io.print(b);	# 30 IOprint_val (ja_a:void)<-(b:bat[:int,:int])
#	io.print("var c:= bat.new(int,int);"); 	# 31  (_36:str)
    c := bat.new(nil:int,nil:int);	# 32 CMDBATnew (c:bat[:int,:int])<-(_16:int)(_16:int)
#	io.print("set(c,true);"); 	# 33  (_38:str)
    ka_a := bat.setSet(c,true);	# 34 BKCsetSet (ka_a:bat[:int,:int])<-(c:bat[:int,:int])(_19:bit)
#	io.print("insert(c,1,2);"); 	# 35  (_40:str)
    la_a := bat.insert(c,1,2);	# 36 BKCinsert_bun (la_a:void)<-(c:bat[:int,:int])(_22:int)(_23:int)
#	io.print("insert(c,2,2);"); 	# 37  (_42:str)
    ma_a := bat.insert(c,2,2);	# 38 BKCinsert_bun (ma_a:void)<-(c:bat[:int,:int])(_23:int)(_23:int)
#	io.print("print(c);"); 	# 39  (_44:str)
    na_a := io.print(c);	# 40 IOprint_val (na_a:void)<-(c:bat[:int,:int])
#	io.print("insert(c,1,2);"); 	# 41  (_40:str)
    oa_a := bat.insert(c,1,2);	# 42 BKCinsert_bun (oa_a:void)<-(c:bat[:int,:int])(_22:int)(_23:int)
#	io.print("print(c);"); 	# 43  (_44:str)
    pa_a := io.print(c);	# 44 IOprint_val (pa_a:void)<-(c:bat[:int,:int])
#	io.print("insert(c,2,2);"); 	# 45  (_42:str)
    qa_a := bat.insert(c,2,2);	# 46 BKCinsert_bun (qa_a:void)<-(c:bat[:int,:int])(_23:int)(_23:int)
#	io.print("print(c);"); 	# 47  (_44:str)
    ra_a := io.print(c);	# 48 IOprint_val (ra_a:void)<-(c:bat[:int,:int])
#	io.print("quit();"); 	# 49  (_50:str)
    sa_a := clients.quit();	# 50 CLTquit (sa_a:void)
#Identifer 'key' mapped to 'bat.setKey' 	# 51  (_52:str)
#Identifer 'set' mapped to 'bat.setSet' 	# 52  (_53:str)
end main;	# 53  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  2	  ]
#insert(b,1,3);
#print(b);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  3	  ]
[ 2,	  2	  ]
#insert(b,2,4);
#print(b);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  3	  ]
[ 2,	  4	  ]
#var c:= bbp.new(int,int);
#set(c,true);
#insert(c,1,2);
#insert(c,2,2);
#print(c);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  2	  ]
#insert(c,1,2);
#print(c);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  2	  ]
#insert(c,2,2);
#print(c);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  2	  ]
#quit();

# 00:12:29 >  
# 00:12:29 >  Done.
# 00:12:29 >  

