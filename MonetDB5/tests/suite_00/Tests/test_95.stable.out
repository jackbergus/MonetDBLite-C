stdout of test 'test_95` in directory 'tests/suite_00` itself:


# 00:12:29 >  
# 00:12:29 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_95.mal </dev/null
# 00:12:29 >  

# MonetDB server v5.9.0, based on kernel v1.27.0
# Serving database 'mTests_tests_suite_00', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008- MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:30579/
function user.main():void;
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);
    ba_a := calc.setoid(aa_a);
#	io.print("# test the new set operations\n"); 
#	io.print("var b := bat.new(int,int);"); 
    b := bat.new(nil:int,nil:int);
#	io.print("var c := bat.new(int,int);"); 
    c := bat.new(nil:int,nil:int);
#	io.print("b.insert(3,5);"); 
    ca_a := bat.insert(b,3,5);
#	io.print("b.insert(3,6);"); 
    da_a := bat.insert(b,3,6);
#	io.print("b.insert(4,5);"); 
    ea_a := bat.insert(b,4,5);
#	io.print("b.insert(4,6);"); 
    fa_a := bat.insert(b,4,6);
#	io.print("b.insert(8,10);"); 
    ga_a := bat.insert(b,8,10);
#	io.print("b.insert(8,11);"); 
    ha_a := bat.insert(b,8,11);
#	io.print("b.insert(9,10);"); 
    ia_a := bat.insert(b,9,10);
#	io.print("b.insert(9,11);"); 
    ja_a := bat.insert(b,9,11);
#	io.print("b.insert(9,11);"); 
    ka_a := bat.insert(b,9,11);
#	io.print("c.insert(3,10);"); 
    la_a := bat.insert(c,3,10);
#	io.print("c.insert(3,5);"); 
    ma_a := bat.insert(c,3,5);
#	io.print("c.insert(8,10);"); 
    na_a := bat.insert(c,8,10);
#	io.print("c.insert(8,5);"); 
    oa_a := bat.insert(c,8,5);
#	io.print("b.sunique().print();"); 
    pa_a := algebra.sunique(b);
    qa_a := io.print(pa_a);
#	io.print("b.kunique().print();"); 
    ra_a := algebra.kunique(b);
    sa_a := io.print(ra_a);
#	io.print("sintersect(c,b).print();"); 
    ta_a := algebra.sintersect(c,b);
    ua_a := io.print(ta_a);
#	io.print("kintersect(c,b).print();"); 
    va_a := algebra.kintersect(c,b);
    wa_a := io.print(va_a);
#	io.print("kintersect(b,c).print();"); 
    xa_a := algebra.kintersect(b,c);
    ya_a := io.print(xa_a);
#	io.print("sdifference(c,b).print();"); 
    ab_a := algebra.sdifference(c,b);
    bb_a := io.print(ab_a);
#	io.print("kdifference(b,c).print();"); 
    cb_a := algebra.kdifference(b,c);
    db_a := io.print(cb_a);
#	io.print("sdifference(b,c).print();"); 
    eb_a := algebra.sdifference(b,c);
    fb_a := io.print(eb_a);
#	io.print("kdifference(b,c).print();"); 
    gb_a := algebra.kdifference(b,c);
    hb_a := io.print(gb_a);
#	io.print("sunion(c,b).print();"); 
    ib_a := algebra.sunion(c,b);
    jb_a := io.print(ib_a);
#	io.print("kunion(c,b).print();"); 
    kb_a := algebra.kunion(c,b);
    lb_a := io.print(kb_a);
#	io.print("kunion(b,c).print();"); 
    mb_a := algebra.kunion(b,c);
    nb_a := io.print(mb_a);
#	io.print("b.insert(0,0);"); 
    ob_a := bat.insert(b,0,0);
#	io.print("c.insert(0,0);"); 
    pb_a := bat.insert(c,0,0);
#	io.print("b.sunique().print();"); 
    qb_a := algebra.sunique(b);
    rb_a := io.print(qb_a);
#	io.print("b.kunique().print();"); 
    sb_a := algebra.kunique(b);
    tb_a := io.print(sb_a);
#	io.print("sintersect(c,b).print();"); 
    ub_a := algebra.sintersect(c,b);
    vb_a := io.print(ub_a);
#	io.print("kintersect(c,b).print();"); 
    wb_a := algebra.kintersect(c,b);
    xb_a := io.print(wb_a);
#	io.print("kintersect(b,c).print();"); 
    yb_a := algebra.kintersect(b,c);
    ac_a := io.print(yb_a);
#	io.print("sdifference(c,b).print();"); 
    bc_a := algebra.sdifference(c,b);
    cc_a := io.print(bc_a);
#	io.print("kdifference(b,c).print();"); 
    dc_a := algebra.kdifference(b,c);
    ec_a := io.print(dc_a);
#	io.print("sdifference(b,c).print();"); 
    fc_a := algebra.sdifference(b,c);
    gc_a := io.print(fc_a);
#	io.print("kdifference(b,c).print();"); 
    hc_a := algebra.kdifference(b,c);
    ic_a := io.print(hc_a);
#	io.print("sunion(c,b).print();"); 
    jc_a := algebra.sunion(c,b);
    kc_a := io.print(jc_a);
#	io.print("kunion(c,b).print();"); 
    lc_a := algebra.kunion(c,b);
    mc_a := io.print(lc_a);
#	io.print("kunion(b,c).print();"); 
    nc_a := algebra.kunion(b,c);
    oc_a := io.print(nc_a);
#	io.print("quit();"); 
    pc_a := clients.quit();
end main;
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
#b.kunique().print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  6	  ]
[ 4,	  6	  ]
[ 8,	  11	  ]
[ 9,	  11	  ]
#sintersect(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 8,	  10	  ]
#kintersect(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
#kintersect(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
#sdiff(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 8,	  5	  ]
#kdiff(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#sdiff(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kdiff(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#sunion(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kunion(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kunion(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#b.insert(0,0);
#c.insert(0,0);
#b.sunique().print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 0,	  0	  ]
#b.kunique().print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 4,	  5	  ]
[ 8,	  10	  ]
[ 9,	  10	  ]
[ 0,	  0	  ]
#sintersect(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 0,	  0	  ]
#kintersect(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
[ 0,	  0	  ]
#kintersect(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
[ 0,	  0	  ]
#sdiff(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 8,	  5	  ]
#kdiff(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#sdiff(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kdiff(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#sunion(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
[ 0,	  0	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kunion(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
[ 0,	  0	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kunion(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
[ 0,	  0	  ]
#quit();

# 00:12:29 >  
# 00:12:29 >  Done.
# 00:12:29 >  

