stdout of test 'test_95` in directory 'tests/suite_00` itself:


# 00:12:29 >  
# 00:12:29 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_95.mal </dev/null
# 00:12:29 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("# test the new set operations\n");
#	mil.line("var b := bbp.new(int,int);");
#	b := bbp.new(nil:int,nil:int);
#	mil.line("var c := bbp.new(int,int);");
#	c := bbp.new(nil:int,nil:int);
#	mil.line("b.insert(3,5);");
#	ca_a := bat.insert(b,3,5);
#	mil.line("b.insert(3,6);");
#	da_a := bat.insert(b,3,6);
#	mil.line("b.insert(4,5);");
#	ea_a := bat.insert(b,4,5);
#	mil.line("b.insert(4,6);");
#	fa_a := bat.insert(b,4,6);
#	mil.line("b.insert(8,10);");
#	ga_a := bat.insert(b,8,10);
#	mil.line("b.insert(8,11);");
#	ha_a := bat.insert(b,8,11);
#	mil.line("b.insert(9,10);");
#	ia_a := bat.insert(b,9,10);
#	mil.line("b.insert(9,11);");
#	ja_a := bat.insert(b,9,11);
#	mil.line("b.insert(9,11);");
#	ka_a := bat.insert(b,9,11);
#	mil.line("c.insert(3,10);");
#	la_a := bat.insert(c,3,10);
#	mil.line("c.insert(3,5);");
#	ma_a := bat.insert(c,3,5);
#	mil.line("c.insert(8,10);");
#	na_a := bat.insert(c,8,10);
#	mil.line("c.insert(8,5);");
#	oa_a := bat.insert(c,8,5);
#	mil.line("b.sunique().print();");
#	pa_a := algebra.sunique(b);
#	qa_a := io.print(pa_a);
#	mil.line("b.kunique().print();");
#	ra_a := algebra. kunique(b);
#	sa_a := io.print(ra_a);
#	mil.line("sintersect(c,b).print();");
#	ta_a := algebra.sintersect(c,b);
#	ua_a := io.print(ta_a);
#	mil.line("kintersect(c,b).print();");
#	va_a := algebra.kintersect(c,b);
#	wa_a := io.print(va_a);
#	mil.line("kintersect(b,c).print();");
#	xa_a := algebra.kintersect(b,c);
#	ya_a := io.print(xa_a);
#	mil.line("sdiff(c,b).print();");
#	ab_a := algebra.sdiff(c,b);
#	bb_a := io.print(ab_a);
#	mil.line("kdiff(b,c).print();");
#	cb_a := algebra.kdiff(b,c);
#	db_a := io.print(cb_a);
#	mil.line("sdiff(b,c).print();");
#	eb_a := algebra.sdiff(b,c);
#	fb_a := io.print(eb_a);
#	mil.line("kdiff(b,c).print();");
#	gb_a := algebra.kdiff(b,c);
#	hb_a := io.print(gb_a);
#	mil.line("sunion(c,b).print();");
#	ib_a := algebra.sunion(c,b);
#	jb_a := io.print(ib_a);
#	mil.line("kunion(c,b).print();");
#	kb_a := algebra.kunion(c,b);
#	lb_a := io.print(kb_a);
#	mil.line("kunion(b,c).print();");
#	mb_a := algebra.kunion(b,c);
#	nb_a := io.print(mb_a);
#	mil.line("b.insert(0,0);");
#	ob_a := bat.insert(b,0,0);
#	mil.line("c.insert(0,0);");
#	pb_a := bat.insert(c,0,0);
#	mil.line("b.sunique().print();");
#	qb_a := algebra.sunique(b);
#	rb_a := io.print(qb_a);
#	mil.line("b.kunique().print();");
#	sb_a := algebra. kunique(b);
#	tb_a := io.print(sb_a);
#	mil.line("sintersect(c,b).print();");
#	ub_a := algebra.sintersect(c,b);
#	vb_a := io.print(ub_a);
#	mil.line("kintersect(c,b).print();");
#	wb_a := algebra.kintersect(c,b);
#	xb_a := io.print(wb_a);
#	mil.line("kintersect(b,c).print();");
#	yb_a := algebra.kintersect(b,c);
#	ac_a := io.print(yb_a);
#	mil.line("sdiff(c,b).print();");
#	bc_a := algebra.sdiff(c,b);
#	cc_a := io.print(bc_a);
#	mil.line("kdiff(b,c).print();");
#	dc_a := algebra.kdiff(b,c);
#	ec_a := io.print(dc_a);
#	mil.line("sdiff(b,c).print();");
#	fc_a := algebra.sdiff(b,c);
#	gc_a := io.print(fc_a);
#	mil.line("kdiff(b,c).print();");
#	hc_a := algebra.kdiff(b,c);
#	ic_a := io.print(hc_a);
#	mil.line("sunion(c,b).print();");
#	jc_a := algebra.sunion(c,b);
#	kc_a := io.print(jc_a);
#	mil.line("kunion(c,b).print();");
#	lc_a := algebra.kunion(c,b);
#	mc_a := io.print(lc_a);
#	mil.line("kunion(b,c).print();");
#	nc_a := algebra.kunion(b,c);
#	oc_a := io.print(nc_a);
#	mil.line("quit();");
#	pc_a := clients.quit();
#
function user.main():int;	# 0  (main:int)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  (_32:str)
#Predefined code segment 	# 2  (_34:str)
#The compiler can not guarantee an accurate compilation, 	# 3  (_36:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  (_38:str)
#A few guidelines to maximize usefullness. 	# 5  (_40:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  (_42:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  (_44:str)
#use the "mil_schema" for additional support routines 	# 8  (_46:str)
    mil.line("setoid(oid(20000000));");	# 9 MILline (_47:void)<-(_48:str)
    aa_a := calc.oid(20000000);	# 10 CALCint2oid (aa_a:oid)<-(_50:int)
    ba_a := calc.setoid(aa_a);	# 11 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("# test the new set operations\n");	# 12 MILline (_52:void)<-(_53:str)
    mil.line("var b := bat.new(int,int);");	# 13 MILline (_54:void)<-(_55:str)
    b := bat.new(nil:int,nil:int);	# 14 CMDBATnew (b:bat[:int,:int])<-(_57:int)(_57:int)
    mil.line("var c := bat.new(int,int);");	# 15 MILline (_58:void)<-(_59:str)
    c := bat.new(nil:int,nil:int);	# 16 CMDBATnew (c:bat[:int,:int])<-(_57:int)(_57:int)
    mil.line("b.insert(3,5);");	# 17 MILline (_61:void)<-(_62:str)
    ca_a := bat.insert(b,3,5);	# 18 BKCinsert_bun (ca_a:bat[:int,:int])<-(b:bat[:int,:int])(_64:int)(_65:int)
    mil.line("b.insert(3,6);");	# 19 MILline (_66:void)<-(_67:str)
    da_a := bat.insert(b,3,6);	# 20 BKCinsert_bun (da_a:bat[:int,:int])<-(b:bat[:int,:int])(_64:int)(_69:int)
    mil.line("b.insert(4,5);");	# 21 MILline (_70:void)<-(_71:str)
    ea_a := bat.insert(b,4,5);	# 22 BKCinsert_bun (ea_a:bat[:int,:int])<-(b:bat[:int,:int])(_73:int)(_65:int)
    mil.line("b.insert(4,6);");	# 23 MILline (_74:void)<-(_75:str)
    fa_a := bat.insert(b,4,6);	# 24 BKCinsert_bun (fa_a:bat[:int,:int])<-(b:bat[:int,:int])(_73:int)(_69:int)
    mil.line("b.insert(8,10);");	# 25 MILline (_77:void)<-(_78:str)
    ga_a := bat.insert(b,8,10);	# 26 BKCinsert_bun (ga_a:bat[:int,:int])<-(b:bat[:int,:int])(_80:int)(_81:int)
    mil.line("b.insert(8,11);");	# 27 MILline (_82:void)<-(_83:str)
    ha_a := bat.insert(b,8,11);	# 28 BKCinsert_bun (ha_a:bat[:int,:int])<-(b:bat[:int,:int])(_80:int)(_85:int)
    mil.line("b.insert(9,10);");	# 29 MILline (_86:void)<-(_87:str)
    ia_a := bat.insert(b,9,10);	# 30 BKCinsert_bun (ia_a:bat[:int,:int])<-(b:bat[:int,:int])(_89:int)(_81:int)
    mil.line("b.insert(9,11);");	# 31 MILline (_90:void)<-(_91:str)
    ja_a := bat.insert(b,9,11);	# 32 BKCinsert_bun (ja_a:bat[:int,:int])<-(b:bat[:int,:int])(_89:int)(_85:int)
    mil.line("b.insert(9,11);");	# 33 MILline (_93:void)<-(_91:str)
    ka_a := bat.insert(b,9,11);	# 34 BKCinsert_bun (ka_a:bat[:int,:int])<-(b:bat[:int,:int])(_89:int)(_85:int)
    mil.line("c.insert(3,10);");	# 35 MILline (_95:void)<-(_96:str)
    la_a := bat.insert(c,3,10);	# 36 BKCinsert_bun (la_a:bat[:int,:int])<-(c:bat[:int,:int])(_98:int)(_81:int)
    mil.line("c.insert(3,5);");	# 37 MILline (_99:void)<-(_100:str)
    ma_a := bat.insert(c,3,5);	# 38 BKCinsert_bun (ma_a:bat[:int,:int])<-(c:bat[:int,:int])(_98:int)(_102:int)
    mil.line("c.insert(8,10);");	# 39 MILline (_103:void)<-(_104:str)
    na_a := bat.insert(c,8,10);	# 40 BKCinsert_bun (na_a:bat[:int,:int])<-(c:bat[:int,:int])(_80:int)(_81:int)
    mil.line("c.insert(8,5);");	# 41 MILline (_106:void)<-(_107:str)
    oa_a := bat.insert(c,8,5);	# 42 BKCinsert_bun (oa_a:bat[:int,:int])<-(c:bat[:int,:int])(_80:int)(_102:int)
    mil.line("b.sunique().print();");	# 43 MILline (_109:void)<-(_110:str)
    pa_a := algebra.sunique(b);	# 44 ALGsunique (pa_a:bat[:int,:int])<-(b:bat[:int,:int])
    qa_a := io.print(pa_a);	# 45 IOprint_val (qa_a:int)<-(pa_a:bat[:int,:int])
    mil.line("b.kunique().print();");	# 46 MILline (_113:void)<-(_114:str)
    ra_a := algebra.kunique(b);	# 47 ALGkunique (ra_a:bat[:int,:int])<-(b:bat[:int,:int])
    sa_a := io.print(ra_a);	# 48 IOprint_val (sa_a:int)<-(ra_a:bat[:int,:int])
    mil.line("sintersect(c,b).print();");	# 49 MILline (_117:void)<-(_118:str)
    ta_a := algebra.sintersect(c,b);	# 50 ALGsintersect (ta_a:bat[:int,:int])<-(c:bat[:int,:int])(b:bat[:int,:int])
    ua_a := io.print(ta_a);	# 51 IOprint_val (ua_a:int)<-(ta_a:bat[:int,:int])
    mil.line("kintersect(c,b).print();");	# 52 MILline (_121:void)<-(_122:str)
    va_a := algebra.kintersect(c,b);	# 53 ALGsemijoin (va_a:bat[:int,:int])<-(c:bat[:int,:int])(b:bat[:int,:int])
    wa_a := io.print(va_a);	# 54 IOprint_val (wa_a:int)<-(va_a:bat[:int,:int])
    mil.line("kintersect(b,c).print();");	# 55 MILline (_125:void)<-(_126:str)
    xa_a := algebra.kintersect(b,c);	# 56 ALGsemijoin (xa_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])
    ya_a := io.print(xa_a);	# 57 IOprint_val (ya_a:int)<-(xa_a:bat[:int,:int])
    mil.line("sdiff(c,b).print();");	# 58 MILline (_129:void)<-(_130:str)
    ab_a := algebra.sdiff(c,b);	# 59 ALGsdiff (ab_a:bat[:int,:int])<-(c:bat[:int,:int])(b:bat[:int,:int])
    bb_a := io.print(ab_a);	# 60 IOprint_val (bb_a:int)<-(ab_a:bat[:int,:int])
    mil.line("kdiff(b,c).print();");	# 61 MILline (_133:void)<-(_134:str)
    cb_a := algebra.kdiff(b,c);	# 62 ALGkdiff (cb_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])
    db_a := io.print(cb_a);	# 63 IOprint_val (db_a:int)<-(cb_a:bat[:int,:int])
    mil.line("sdiff(b,c).print();");	# 64 MILline (_137:void)<-(_138:str)
    eb_a := algebra.sdiff(b,c);	# 65 ALGsdiff (eb_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])
    fb_a := io.print(eb_a);	# 66 IOprint_val (fb_a:int)<-(eb_a:bat[:int,:int])
    mil.line("kdiff(b,c).print();");	# 67 MILline (_141:void)<-(_134:str)
    gb_a := algebra.kdiff(b,c);	# 68 ALGkdiff (gb_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])
    hb_a := io.print(gb_a);	# 69 IOprint_val (hb_a:int)<-(gb_a:bat[:int,:int])
    mil.line("sunion(c,b).print();");	# 70 MILline (_144:void)<-(_145:str)
    ib_a := algebra.sunion(c,b);	# 71 ALGsunion (ib_a:bat[:int,:int])<-(c:bat[:int,:int])(b:bat[:int,:int])
    jb_a := io.print(ib_a);	# 72 IOprint_val (jb_a:int)<-(ib_a:bat[:int,:int])
    mil.line("kunion(c,b).print();");	# 73 MILline (_148:void)<-(_149:str)
    kb_a := algebra.kunion(c,b);	# 74 ALGkunion (kb_a:bat[:int,:int])<-(c:bat[:int,:int])(b:bat[:int,:int])
    lb_a := io.print(kb_a);	# 75 IOprint_val (lb_a:int)<-(kb_a:bat[:int,:int])
    mil.line("kunion(b,c).print();");	# 76 MILline (_152:void)<-(_153:str)
    mb_a := algebra.kunion(b,c);	# 77 ALGkunion (mb_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])
    nb_a := io.print(mb_a);	# 78 IOprint_val (nb_a:int)<-(mb_a:bat[:int,:int])
    mil.line("b.insert(0,0);");	# 79 MILline (_156:void)<-(_157:str)
    ob_a := bat.insert(b,0,0);	# 80 BKCinsert_bun (ob_a:bat[:int,:int])<-(b:bat[:int,:int])(_159:int)(_159:int)
    mil.line("c.insert(0,0);");	# 81 MILline (_160:void)<-(_161:str)
    pb_a := bat.insert(c,0,0);	# 82 BKCinsert_bun (pb_a:bat[:int,:int])<-(c:bat[:int,:int])(_159:int)(_159:int)
    mil.line("b.sunique().print();");	# 83 MILline (_163:void)<-(_164:str)
    qb_a := algebra.sunique(b);	# 84 ALGsunique (qb_a:bat[:int,:int])<-(b:bat[:int,:int])
    rb_a := io.print(qb_a);	# 85 IOprint_val (rb_a:int)<-(qb_a:bat[:int,:int])
    mil.line("b.kunique().print();");	# 86 MILline (_167:void)<-(_168:str)
    sb_a := algebra.kunique(b);	# 87 ALGkunique (sb_a:bat[:int,:int])<-(b:bat[:int,:int])
    tb_a := io.print(sb_a);	# 88 IOprint_val (tb_a:int)<-(sb_a:bat[:int,:int])
    mil.line("sintersect(c,b).print();");	# 89 MILline (_171:void)<-(_172:str)
    ub_a := algebra.sintersect(c,b);	# 90 ALGsintersect (ub_a:bat[:int,:int])<-(c:bat[:int,:int])(b:bat[:int,:int])
    vb_a := io.print(ub_a);	# 91 IOprint_val (vb_a:int)<-(ub_a:bat[:int,:int])
    mil.line("kintersect(c,b).print();");	# 92 MILline (_175:void)<-(_176:str)
    wb_a := algebra.kintersect(c,b);	# 93 ALGsemijoin (wb_a:bat[:int,:int])<-(c:bat[:int,:int])(b:bat[:int,:int])
    xb_a := io.print(wb_a);	# 94 IOprint_val (xb_a:int)<-(wb_a:bat[:int,:int])
    mil.line("kintersect(b,c).print();");	# 95 MILline (_179:void)<-(_180:str)
    yb_a := algebra.kintersect(b,c);	# 96 ALGsemijoin (yb_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])
    ac_a := io.print(yb_a);	# 97 IOprint_val (ac_a:int)<-(yb_a:bat[:int,:int])
    mil.line("sdiff(c,b).print();");	# 98 MILline (_183:void)<-(_184:str)
    bc_a := algebra.sdiff(c,b);	# 99 ALGsdiff (bc_a:bat[:int,:int])<-(c:bat[:int,:int])(b:bat[:int,:int])
    cc_a := io.print(bc_a);	# 100 IOprint_val (cc_a:int)<-(bc_a:bat[:int,:int])
    mil.line("kdiff(b,c).print();");	# 101 MILline (_187:void)<-(_188:str)
    dc_a := algebra.kdiff(b,c);	# 102 ALGkdiff (dc_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])
    ec_a := io.print(dc_a);	# 103 IOprint_val (ec_a:int)<-(dc_a:bat[:int,:int])
    mil.line("sdiff(b,c).print();");	# 104 MILline (_191:void)<-(_192:str)
    fc_a := algebra.sdiff(b,c);	# 105 ALGsdiff (fc_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])
    gc_a := io.print(fc_a);	# 106 IOprint_val (gc_a:int)<-(fc_a:bat[:int,:int])
    mil.line("kdiff(b,c).print();");	# 107 MILline (_195:void)<-(_188:str)
    hc_a := algebra.kdiff(b,c);	# 108 ALGkdiff (hc_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])
    ic_a := io.print(hc_a);	# 109 IOprint_val (ic_a:int)<-(hc_a:bat[:int,:int])
    mil.line("sunion(c,b).print();");	# 110 MILline (_198:void)<-(_199:str)
    jc_a := algebra.sunion(c,b);	# 111 ALGsunion (jc_a:bat[:int,:int])<-(c:bat[:int,:int])(b:bat[:int,:int])
    kc_a := io.print(jc_a);	# 112 IOprint_val (kc_a:int)<-(jc_a:bat[:int,:int])
    mil.line("kunion(c,b).print();");	# 113 MILline (_202:void)<-(_203:str)
    lc_a := algebra.kunion(c,b);	# 114 ALGkunion (lc_a:bat[:int,:int])<-(c:bat[:int,:int])(b:bat[:int,:int])
    mc_a := io.print(lc_a);	# 115 IOprint_val (mc_a:int)<-(lc_a:bat[:int,:int])
    mil.line("kunion(b,c).print();");	# 116 MILline (_206:void)<-(_207:str)
    nc_a := algebra.kunion(b,c);	# 117 ALGkunion (nc_a:bat[:int,:int])<-(b:bat[:int,:int])(c:bat[:int,:int])
    oc_a := io.print(nc_a);	# 118 IOprint_val (oc_a:int)<-(nc_a:bat[:int,:int])
    mil.line("quit();");	# 119 MILline (_210:void)<-(_211:str)
    pc_a := clients.quit();	# 120 CLTquit (pc_a:void)
end main;	# 121  
#setoid(oid(20000000));
## test the new set operations\n
#var b := bbp.new(int,int);
#var c := bbp.new(int,int);
#b.insert(3,5);
#b.insert(3,6);
#b.insert(4,5);
#b.insert(4,6);
#b.insert(8,10);
#b.insert(8,11);
#b.insert(9,10);
#b.insert(9,11);
#b.insert(9,11);
#c.insert(3,10);
#c.insert(3,5);
#c.insert(8,10);
#c.insert(8,5);
#b.sunique().print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
#b.kunique().print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  6	  ]
[ 4,	  6	  ]
[ 8,	  11	  ]
[ 9,	  11	  ]
#sintersect(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 8,	  10	  ]
#kintersect(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
#kintersect(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
#sdiff(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 8,	  5	  ]
#kdiff(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#sdiff(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kdiff(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#sunion(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kunion(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kunion(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#b.insert(0,0);
#c.insert(0,0);
#b.sunique().print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 0,	  0	  ]
#b.kunique().print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 4,	  5	  ]
[ 8,	  10	  ]
[ 9,	  10	  ]
[ 0,	  0	  ]
#sintersect(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 0,	  0	  ]
#kintersect(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
[ 0,	  0	  ]
#kintersect(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
[ 0,	  0	  ]
#sdiff(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 8,	  5	  ]
#kdiff(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#sdiff(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kdiff(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#sunion(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
[ 0,	  0	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kunion(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
[ 0,	  0	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kunion(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
[ 0,	  0	  ]
#quit();

# 00:12:29 >  
# 00:12:29 >  Done.
# 00:12:29 >  

