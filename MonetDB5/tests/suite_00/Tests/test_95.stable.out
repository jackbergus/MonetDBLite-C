stdout of test 'test_95` in directory 'tests/suite_00` itself:


# 00:12:29 >  
# 00:12:29 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_95.mal </dev/null
# 00:12:29 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("# test the new set operations\n");
#	mil.line("var b := bbp.new(int,int);");
#	b := bbp.new(nil:int,nil:int);
#	mil.line("var c := bbp.new(int,int);");
#	c := bbp.new(nil:int,nil:int);
#	mil.line("b.insert(3,5);");
#	ca_a := bat.insert(b,3,5);
#	mil.line("b.insert(3,6);");
#	da_a := bat.insert(b,3,6);
#	mil.line("b.insert(4,5);");
#	ea_a := bat.insert(b,4,5);
#	mil.line("b.insert(4,6);");
#	fa_a := bat.insert(b,4,6);
#	mil.line("b.insert(8,10);");
#	ga_a := bat.insert(b,8,10);
#	mil.line("b.insert(8,11);");
#	ha_a := bat.insert(b,8,11);
#	mil.line("b.insert(9,10);");
#	ia_a := bat.insert(b,9,10);
#	mil.line("b.insert(9,11);");
#	ja_a := bat.insert(b,9,11);
#	mil.line("b.insert(9,11);");
#	ka_a := bat.insert(b,9,11);
#	mil.line("c.insert(3,10);");
#	la_a := bat.insert(c,3,10);
#	mil.line("c.insert(3,5);");
#	ma_a := bat.insert(c,3,5);
#	mil.line("c.insert(8,10);");
#	na_a := bat.insert(c,8,10);
#	mil.line("c.insert(8,5);");
#	oa_a := bat.insert(c,8,5);
#	mil.line("b.sunique().print();");
#	pa_a := algebra.sunique(b);
#	qa_a := io.print(pa_a);
#	mil.line("b.kunique().print();");
#	ra_a := algebra. kunique(b);
#	sa_a := io.print(ra_a);
#	mil.line("sintersect(c,b).print();");
#	ta_a := algebra.sintersect(c,b);
#	ua_a := io.print(ta_a);
#	mil.line("kintersect(c,b).print();");
#	va_a := algebra.kintersect(c,b);
#	wa_a := io.print(va_a);
#	mil.line("kintersect(b,c).print();");
#	xa_a := algebra.kintersect(b,c);
#	ya_a := io.print(xa_a);
#	mil.line("sdiff(c,b).print();");
#	ab_a := algebra.sdiff(c,b);
#	bb_a := io.print(ab_a);
#	mil.line("kdiff(b,c).print();");
#	cb_a := algebra.kdiff(b,c);
#	db_a := io.print(cb_a);
#	mil.line("sdiff(b,c).print();");
#	eb_a := algebra.sdiff(b,c);
#	fb_a := io.print(eb_a);
#	mil.line("kdiff(b,c).print();");
#	gb_a := algebra.kdiff(b,c);
#	hb_a := io.print(gb_a);
#	mil.line("sunion(c,b).print();");
#	ib_a := algebra.sunion(c,b);
#	jb_a := io.print(ib_a);
#	mil.line("kunion(c,b).print();");
#	kb_a := algebra.kunion(c,b);
#	lb_a := io.print(kb_a);
#	mil.line("kunion(b,c).print();");
#	mb_a := algebra.kunion(b,c);
#	nb_a := io.print(mb_a);
#	mil.line("b.insert(0,0);");
#	ob_a := bat.insert(b,0,0);
#	mil.line("c.insert(0,0);");
#	pb_a := bat.insert(c,0,0);
#	mil.line("b.sunique().print();");
#	qb_a := algebra.sunique(b);
#	rb_a := io.print(qb_a);
#	mil.line("b.kunique().print();");
#	sb_a := algebra. kunique(b);
#	tb_a := io.print(sb_a);
#	mil.line("sintersect(c,b).print();");
#	ub_a := algebra.sintersect(c,b);
#	vb_a := io.print(ub_a);
#	mil.line("kintersect(c,b).print();");
#	wb_a := algebra.kintersect(c,b);
#	xb_a := io.print(wb_a);
#	mil.line("kintersect(b,c).print();");
#	yb_a := algebra.kintersect(b,c);
#	ac_a := io.print(yb_a);
#	mil.line("sdiff(c,b).print();");
#	bc_a := algebra.sdiff(c,b);
#	cc_a := io.print(bc_a);
#	mil.line("kdiff(b,c).print();");
#	dc_a := algebra.kdiff(b,c);
#	ec_a := io.print(dc_a);
#	mil.line("sdiff(b,c).print();");
#	fc_a := algebra.sdiff(b,c);
#	gc_a := io.print(fc_a);
#	mil.line("kdiff(b,c).print();");
#	hc_a := algebra.kdiff(b,c);
#	ic_a := io.print(hc_a);
#	mil.line("sunion(c,b).print();");
#	jc_a := algebra.sunion(c,b);
#	kc_a := io.print(jc_a);
#	mil.line("kunion(c,b).print();");
#	lc_a := algebra.kunion(c,b);
#	mc_a := io.print(lc_a);
#	mil.line("kunion(b,c).print();");
#	nc_a := algebra.kunion(b,c);
#	oc_a := io.print(nc_a);
#	mil.line("quit();");
#	pc_a := clients.quit();
#
function user.main():void;              #  0 main:void := user.main() {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         # 11 aa_a:oid := CALCint2oid(_12:int) 
    ba_a := calc.setoid(aa_a);          # 12 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("# test the new set operations\n"); 
#	io.print("var b := bat.new(int,int);"); 
    b := bat.new(nil:int,nil:int);      # 15 b:bat[:int,:int] := CMDBATnew(_17:int, _17:int) {G}
#	io.print("var c := bat.new(int,int);"); 
    c := bat.new(nil:int,nil:int);      # 17 c:bat[:int,:int] := CMDBATnew(_17:int, _17:int) {G}
#	io.print("b.insert(3,5);"); 
    ca_a := bat.insert(b,3,5);          # 19 ca_a:void := BKCinsert_bun(b:bat[:int,:int], _22:int, _23:int) 
#	io.print("b.insert(3,6);"); 
    da_a := bat.insert(b,3,6);          # 21 da_a:void := BKCinsert_bun(b:bat[:int,:int], _22:int, _26:int) 
#	io.print("b.insert(4,5);"); 
    ea_a := bat.insert(b,4,5);          # 23 ea_a:void := BKCinsert_bun(b:bat[:int,:int], _29:int, _23:int) 
#	io.print("b.insert(4,6);"); 
    fa_a := bat.insert(b,4,6);          # 25 fa_a:void := BKCinsert_bun(b:bat[:int,:int], _29:int, _26:int) 
#	io.print("b.insert(8,10);"); 
    ga_a := bat.insert(b,8,10);         # 27 ga_a:void := BKCinsert_bun(b:bat[:int,:int], _34:int, _35:int) 
#	io.print("b.insert(8,11);"); 
    ha_a := bat.insert(b,8,11);         # 29 ha_a:void := BKCinsert_bun(b:bat[:int,:int], _34:int, _38:int) 
#	io.print("b.insert(9,10);"); 
    ia_a := bat.insert(b,9,10);         # 31 ia_a:void := BKCinsert_bun(b:bat[:int,:int], _41:int, _35:int) 
#	io.print("b.insert(9,11);"); 
    ja_a := bat.insert(b,9,11);         # 33 ja_a:void := BKCinsert_bun(b:bat[:int,:int], _41:int, _38:int) 
#	io.print("b.insert(9,11);"); 
    ka_a := bat.insert(b,9,11);         # 35 ka_a:void := BKCinsert_bun(b:bat[:int,:int], _41:int, _38:int) 
#	io.print("c.insert(3,10);"); 
    la_a := bat.insert(c,3,10);         # 37 la_a:void := BKCinsert_bun(c:bat[:int,:int], _22:int, _35:int) 
#	io.print("c.insert(3,5);"); 
    ma_a := bat.insert(c,3,5);          # 39 ma_a:void := BKCinsert_bun(c:bat[:int,:int], _22:int, _23:int) 
#	io.print("c.insert(8,10);"); 
    na_a := bat.insert(c,8,10);         # 41 na_a:void := BKCinsert_bun(c:bat[:int,:int], _34:int, _35:int) 
#	io.print("c.insert(8,5);"); 
    oa_a := bat.insert(c,8,5);          # 43 oa_a:void := BKCinsert_bun(c:bat[:int,:int], _34:int, _23:int) 
#	io.print("b.sunique().print();"); 
    pa_a := algebra.sunique(b);         # 45 pa_a:bat[:int,:int] := ALGsunique(b:bat[:int,:int]) {G}
    qa_a := io.print(pa_a);             # 46 qa_a:void := IOprint_val(pa_a:bat[:int,:int]) 
#	io.print("b.kunique().print();"); 
    ra_a := algebra.kunique(b);         # 48 ra_a:bat[:int,:int] := ALGkunique(b:bat[:int,:int]) {G}
    sa_a := io.print(ra_a);             # 49 sa_a:void := IOprint_val(ra_a:bat[:int,:int]) 
#	io.print("sintersect(c,b).print();"); 
    ta_a := algebra.sintersect(c,b);    # 51 ta_a:bat[:int,:int] := ALGsintersect(c:bat[:int,:int], b:bat[:int,:int]) {G}
    ua_a := io.print(ta_a);             # 52 ua_a:void := IOprint_val(ta_a:bat[:int,:int]) 
#	io.print("kintersect(c,b).print();"); 
    va_a := algebra.kintersect(c,b);    # 54 va_a:bat[:int,:int] := ALGsemijoin(c:bat[:int,:int], b:bat[:int,:int]) {G}
    wa_a := io.print(va_a);             # 55 wa_a:void := IOprint_val(va_a:bat[:int,:int]) 
#	io.print("kintersect(b,c).print();"); 
    xa_a := algebra.kintersect(b,c);    # 57 xa_a:bat[:int,:int] := ALGsemijoin(b:bat[:int,:int], c:bat[:int,:int]) {G}
    ya_a := io.print(xa_a);             # 58 ya_a:void := IOprint_val(xa_a:bat[:int,:int]) 
#	io.print("sdifference(c,b).print();"); 
    ab_a := algebra.sdifference(c,b);   # 60 ab_a:bat[:int,:int] := ALGsdiff(c:bat[:int,:int], b:bat[:int,:int]) {G}
    bb_a := io.print(ab_a);             # 61 bb_a:void := IOprint_val(ab_a:bat[:int,:int]) 
#	io.print("kdifference(b,c).print();"); 
    cb_a := algebra.kdifference(b,c);   # 63 cb_a:bat[:int,:int] := ALGkdiff(b:bat[:int,:int], c:bat[:int,:int]) {G}
    db_a := io.print(cb_a);             # 64 db_a:void := IOprint_val(cb_a:bat[:int,:int]) 
#	io.print("sdifference(b,c).print();"); 
    eb_a := algebra.sdifference(b,c);   # 66 eb_a:bat[:int,:int] := ALGsdiff(b:bat[:int,:int], c:bat[:int,:int]) {G}
    fb_a := io.print(eb_a);             # 67 fb_a:void := IOprint_val(eb_a:bat[:int,:int]) 
#	io.print("kdifference(b,c).print();"); 
    gb_a := algebra.kdifference(b,c);   # 69 gb_a:bat[:int,:int] := ALGkdiff(b:bat[:int,:int], c:bat[:int,:int]) {G}
    hb_a := io.print(gb_a);             # 70 hb_a:void := IOprint_val(gb_a:bat[:int,:int]) 
#	io.print("sunion(c,b).print();"); 
    ib_a := algebra.sunion(c,b);        # 72 ib_a:bat[:int,:int] := ALGsunion(c:bat[:int,:int], b:bat[:int,:int]) {G}
    jb_a := io.print(ib_a);             # 73 jb_a:void := IOprint_val(ib_a:bat[:int,:int]) 
#	io.print("kunion(c,b).print();"); 
    kb_a := algebra.kunion(c,b);        # 75 kb_a:bat[:int,:int] := ALGkunion(c:bat[:int,:int], b:bat[:int,:int]) {G}
    lb_a := io.print(kb_a);             # 76 lb_a:void := IOprint_val(kb_a:bat[:int,:int]) 
#	io.print("kunion(b,c).print();"); 
    mb_a := algebra.kunion(b,c);        # 78 mb_a:bat[:int,:int] := ALGkunion(b:bat[:int,:int], c:bat[:int,:int]) {G}
    nb_a := io.print(mb_a);             # 79 nb_a:void := IOprint_val(mb_a:bat[:int,:int]) 
#	io.print("b.insert(0,0);"); 
    ob_a := bat.insert(b,0,0);          # 81 ob_a:void := BKCinsert_bun(b:bat[:int,:int], _92:int, _92:int) 
#	io.print("c.insert(0,0);"); 
    pb_a := bat.insert(c,0,0);          # 83 pb_a:void := BKCinsert_bun(c:bat[:int,:int], _92:int, _92:int) 
#	io.print("b.sunique().print();"); 
    qb_a := algebra.sunique(b);         # 85 qb_a:bat[:int,:int] := ALGsunique(b:bat[:int,:int]) {G}
    rb_a := io.print(qb_a);             # 86 rb_a:void := IOprint_val(qb_a:bat[:int,:int]) 
#	io.print("b.kunique().print();"); 
    sb_a := algebra.kunique(b);         # 88 sb_a:bat[:int,:int] := ALGkunique(b:bat[:int,:int]) {G}
    tb_a := io.print(sb_a);             # 89 tb_a:void := IOprint_val(sb_a:bat[:int,:int]) 
#	io.print("sintersect(c,b).print();"); 
    ub_a := algebra.sintersect(c,b);    # 91 ub_a:bat[:int,:int] := ALGsintersect(c:bat[:int,:int], b:bat[:int,:int]) {G}
    vb_a := io.print(ub_a);             # 92 vb_a:void := IOprint_val(ub_a:bat[:int,:int]) 
#	io.print("kintersect(c,b).print();"); 
    wb_a := algebra.kintersect(c,b);    # 94 wb_a:bat[:int,:int] := ALGsemijoin(c:bat[:int,:int], b:bat[:int,:int]) {G}
    xb_a := io.print(wb_a);             # 95 xb_a:void := IOprint_val(wb_a:bat[:int,:int]) 
#	io.print("kintersect(b,c).print();"); 
    yb_a := algebra.kintersect(b,c);    # 97 yb_a:bat[:int,:int] := ALGsemijoin(b:bat[:int,:int], c:bat[:int,:int]) {G}
    ac_a := io.print(yb_a);             # 98 ac_a:void := IOprint_val(yb_a:bat[:int,:int]) 
#	io.print("sdifference(c,b).print();"); 
    bc_a := algebra.sdifference(c,b);   #100 bc_a:bat[:int,:int] := ALGsdiff(c:bat[:int,:int], b:bat[:int,:int]) {G}
    cc_a := io.print(bc_a);             #101 cc_a:void := IOprint_val(bc_a:bat[:int,:int]) 
#	io.print("kdifference(b,c).print();"); 
    dc_a := algebra.kdifference(b,c);   #103 dc_a:bat[:int,:int] := ALGkdiff(b:bat[:int,:int], c:bat[:int,:int]) {G}
    ec_a := io.print(dc_a);             #104 ec_a:void := IOprint_val(dc_a:bat[:int,:int]) 
#	io.print("sdifference(b,c).print();"); 
    fc_a := algebra.sdifference(b,c);   #106 fc_a:bat[:int,:int] := ALGsdiff(b:bat[:int,:int], c:bat[:int,:int]) {G}
    gc_a := io.print(fc_a);             #107 gc_a:void := IOprint_val(fc_a:bat[:int,:int]) 
#	io.print("kdifference(b,c).print();"); 
    hc_a := algebra.kdifference(b,c);   #109 hc_a:bat[:int,:int] := ALGkdiff(b:bat[:int,:int], c:bat[:int,:int]) {G}
    ic_a := io.print(hc_a);             #110 ic_a:void := IOprint_val(hc_a:bat[:int,:int]) 
#	io.print("sunion(c,b).print();"); 
    jc_a := algebra.sunion(c,b);        #112 jc_a:bat[:int,:int] := ALGsunion(c:bat[:int,:int], b:bat[:int,:int]) {G}
    kc_a := io.print(jc_a);             #113 kc_a:void := IOprint_val(jc_a:bat[:int,:int]) 
#	io.print("kunion(c,b).print();"); 
    lc_a := algebra.kunion(c,b);        #115 lc_a:bat[:int,:int] := ALGkunion(c:bat[:int,:int], b:bat[:int,:int]) {G}
    mc_a := io.print(lc_a);             #116 mc_a:void := IOprint_val(lc_a:bat[:int,:int]) 
#	io.print("kunion(b,c).print();"); 
    nc_a := algebra.kunion(b,c);        #118 nc_a:bat[:int,:int] := ALGkunion(b:bat[:int,:int], c:bat[:int,:int]) {G}
    oc_a := io.print(nc_a);             #119 oc_a:void := IOprint_val(nc_a:bat[:int,:int]) 
#	io.print("quit();"); 
    pc_a := clients.quit();             #121 pc_a:void := CLTquit() 
end main;                               #122  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
#b.kunique().print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  6	  ]
[ 4,	  6	  ]
[ 8,	  11	  ]
[ 9,	  11	  ]
#sintersect(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 8,	  10	  ]
#kintersect(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
#kintersect(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
#sdiff(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 8,	  5	  ]
#kdiff(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#sdiff(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kdiff(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#sunion(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kunion(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kunion(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#b.insert(0,0);
#c.insert(0,0);
#b.sunique().print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 0,	  0	  ]
#b.kunique().print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 4,	  5	  ]
[ 8,	  10	  ]
[ 9,	  10	  ]
[ 0,	  0	  ]
#sintersect(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 0,	  0	  ]
#kintersect(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
[ 0,	  0	  ]
#kintersect(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
[ 0,	  0	  ]
#sdiff(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 8,	  5	  ]
#kdiff(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#sdiff(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kdiff(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#sunion(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
[ 0,	  0	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kunion(c,b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  10	  ]
[ 3,	  5	  ]
[ 8,	  10	  ]
[ 8,	  5	  ]
[ 0,	  0	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
#kunion(b,c).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  5	  ]
[ 3,	  6	  ]
[ 4,	  5	  ]
[ 4,	  6	  ]
[ 8,	  10	  ]
[ 8,	  11	  ]
[ 9,	  10	  ]
[ 9,	  11	  ]
[ 9,	  11	  ]
[ 0,	  0	  ]
#quit();

# 00:12:29 >  
# 00:12:29 >  Done.
# 00:12:29 >  

