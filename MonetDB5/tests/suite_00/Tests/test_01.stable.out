stdout of test 'test_01` in directory 'tests/suite_00` itself:


# 00:12:27 >  
# 00:12:27 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_01.mal </dev/null
# 00:12:27 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI.All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("#test basic functionality of the BAT library.\n");
#	mil.line("#focussed on strings\n");
#	mil.line("#it includes bat.insertions,deletions,selections, and joins.\n");
#	mil.line("var b:= bbp.new(str,int);");
#	b := bbp.new(nil:str,nil:int);
#	mil.line("b.insert(\"the\",1);");
#	ca_a := bat.insert(b,"the",1);
#	mil.line("b.insert(\"quick\",2);");
#	da_a := bat.insert(b,"quick",2);
#	mil.line("b.insert(\"brown\",3);");
#	ea_a := bat.insert(b,"brown",3);
#	mil.line("b.insert(\"fox\",4);");
#	fa_a := bat.insert(b,"fox",4);
#	mil.line("b.insert(\"jumps\",5);");
#	ga_a := bat.insert(b,"jumps",5);
#	mil.line("b.insert(\"over\",6);");
#	ha_a := bat.insert(b,"over",6);
#	mil.line("b.insert(\"lazy\",7);");
#	ia_a := bat.insert(b,"lazy",7);
#	mil.line("b.insert(\"dog\",8);");
#	ja_a := bat.insert(b,"dog",8);
#	mil.line("b.insert(str(nil),9);");
#	ka_a := calc.str(nil);
#	la_a := bat.insert(b,ka_a,9);
#	mil.line("b.insert(\".\",10);");
#	ma_a := bat.insert(b,".",10);
#	mil.line("b.insert(\"\",int(nil));");
#	na_a := calc.int(nil);
#	oa_a := bat.insert(b,"",na_a);
#	mil.line("b.insert(str(nil),int(nil));");
#	pa_a := calc.str(nil);
#	qa_a := calc.int(nil);
#	ra_a := bat.insert(b,pa_a,qa_a);
#	mil.line("b.print();");
#	sa_a := io.print(b);
#	mil.line("# Testing simple retrievals\n");
#	ta_a := algebra.find(b,"the");
#	ua_a := io.print(ta_a);
#	mil.line("b.find(\"fox\").print();");
#	va_a := algebra.find(b,"fox");
#	wa_a := io.print(va_a);
#	mil.line("b.find(str(nil)).print();");
#	xa_a := calc.str(nil);
#	ya_a := algebra.find(b,xa_a);
#	ab_a := io.print(ya_a);
#	mil.line("# This should cause an error\n");
##ignore	bb_a := algebra. find(b,"cat");
##ignore	cb_a := print(bb_a);
#	mil.line("# Can we delete them and re-insert them later on\n");
#	db_a := bat.delete(b,"fox",4);
#	mil.line("b.delete(\"the\",1);");
#	eb_a := bat.delete(b,"the",1);
#	mil.line("b.delete(\".\",10);");
#	fb_a := bat.delete(b,".",10);
#	mil.line("b.print();");
#	gb_a := io.print(b);
#	mil.line("b.insert(\"fox\",4);");
#	hb_a := bat.insert(b,"fox",4);
#	mil.line("b.insert(\"the\",1);");
#	ib_a := bat.insert(b,"the",1);
#	mil.line("b.insert(\".\",10);");
#	jb_a := bat.insert(b,".",10);
#	mil.line("b.count().print();");
#	kb_a := aggr.count(b);
#	lb_a := io.print(kb_a);
#	mil.line("# Lets cut out a few sections\n");
#	mb_a := algebra.select(b,2,4);
#	nb_a := io.print(mb_a);
#	mil.line("b.select(7,int(nil)).print();");
#	ob_a := calc.int(nil);
#	pb_a := algebra.select(b,7,ob_a);
#	qb_a := io.print(pb_a);
#	mil.line("b.select(int(nil),7).print();");
#	rb_a := calc.int(nil);
#	sb_a := algebra.select(b,rb_a,7);
#	tb_a := io.print(sb_a);
#	mil.line("b.select(int(nil),int(nil)).print();");
#	ub_a := calc.int(nil);
#	vb_a := calc.int(nil);
#	wb_a := algebra.select(b,ub_a,vb_a);
#	xb_a := io.print(wb_a);
#	mil.line("b.reverse().select(\"fox\",\"quick\").print();");
#	yb_a := bat.reverse(b);
#	ac_a := algebra.select(yb_a,"fox","quick");
#	bc_a := io.print(ac_a);
#	mil.line("b.reverse().select(\"fox\",str(nil)).print();");
#	cc_a := calc.str(nil);
#	dc_a := bat.reverse(b);
#	ec_a := algebra.select(dc_a,"fox",cc_a);
#	fc_a := io.print(ec_a);
#	mil.line("b.reverse().select(str(nil),\"quick\").print();");
#	gc_a := calc.str(nil);
#	hc_a := bat.reverse(b);
#	ic_a := algebra. select(hc_a,gc_a,"quick");
#	jc_a := io.print(ic_a);
#	mil.line("b.reverse().select(str(nil),str(nil)).print();");
#	kc_a := calc.str(nil);
#	lc_a := calc.str(nil);
#	mc_a := bat.reverse(b);
#	nc_a := algebra.select(mc_a,kc_a,lc_a);
#	oc_a := io.print(nc_a);
#	mil.line("# A 2-dimensional cut\n");
#	bn := algebra.fragment(b,"fox","quick",1,5);
#	pc_a := io.print(bn);
#	mil.line("b.fragment(\"fox\",str(nil),1,5).print();");
#	qc_a := calc.str(nil);
#	rc_a := algebra.fragment(b,"fox",qc_a,1,5);
#	sc_a := io.print(rc_a);
#	mil.line("b.fragment(str(nil),\"quick\",1,5).print();");
#	tc_a := calc.str(nil);
#	uc_a := algebra.fragment(b,tc_a,"quick",1,5);
#	vc_a := io.print(uc_a);
#	mil.line("b.fragment(str(nil),str(nil),1,5).print();");
#	wc_a := calc.str(nil);
#	xc_a := calc.str(nil);
#	yc_a := algebra.fragment(b,wc_a,xc_a,1,5);
#	ad_a := io.print(yc_a);
#	mil.line("b.fragment(\"fox\",\"quick\",1,int(nil)).print();");
#	bd_a := calc.int(nil);
#	cd_a := algebra.fragment(b,"fox","quick",1,bd_a);
#	dd_a := io.print(cd_a);
#	mil.line("b.fragment(\"fox\",\"quick\",int(nil),5).print();");
#	ed_a := calc.int(nil);
#	fd_a := algebra.fragment(b,"fox","quick",ed_a,5);
#	gd_a := io.print(fd_a);
#	mil.line("b.fragment(\"fox\",\"quick\",int(nil),int(nil)).print();");
#	hd_a := calc.int(nil);
#	id_a := calc.int(nil);
#	jd_a := algebra.fragment(b,"fox","quick",hd_a,id_a);
#	kd_a := io.print(jd_a);
#	mil.line("b.fragment(\"fox\",str(nil),int(nil),int(nil)).print();");
#	ld_a := calc.str(nil);
#	md_a := calc.int(nil);
#	nd_a := calc.int(nil);
#	od_a := algebra.fragment(b,"fox",ld_a,md_a,nd_a);
#	pd_a := io.print(od_a);
#	mil.line("b.fragment(str(nil),\"f\",int(nil),int(nil)).print();");
#	qd_a := calc.str(nil);
#	rd_a := calc.int(nil);
#	sd_a := calc.int(nil);
#	td_a := algebra.fragment(b,qd_a,"f",rd_a,sd_a);
#	ud_a := io.print(td_a);
#	mil.line("b.reverse().fragment(int(nil),int(nil),str(nil),\"f\").print();");
#	vd_a := calc.int(nil);
#	wd_a := calc.int(nil);
#	xd_a := calc.str(nil);
#	yd_a := bat.reverse(b);
#	ae_a := algebra.fragment(yd_a,vd_a,wd_a,xd_a,"f");
#	be_a := io.print(ae_a);
#	mil.line("var b1:= b.join(bn.reverse());");
#	ce_a := bat.reverse(bn);
#	b1 := algebra.join(b,ce_a);
#	mil.line("b1.print();");
#	de_a := io.print(b1);
#	mil.line("var b2:= b.semijoin(b1.reverse());");
#	ee_a := bat.reverse(b1);
#	b2 := algebra.semijoin(b,ee_a);
#	mil.line("b2.print();");
#	fe_a := io.print(b2);
#	mil.line("# testing the like command\n");
#	ge_a := bat.reverse(b);
#	he_a := algebra.like(ge_a,"ox");
#	ie_a := io.print(he_a);
#	mil.line("b.reverse().like(\"fo\").print();");
#	je_a := bat.reverse(b);
#	ke_a := algebra.like(je_a,"fo");
#	le_a := io.print(ke_a);
#	mil.line("b.reverse().like(\"fox\").print();");
#	me_a := bat.reverse(b);
#	ne_a := algebra.like(me_a,"fox");
#	oe_a := io.print(ne_a);
#	mil.line("b.reverse().like(\" fox\").print();");
#	pe_a := bat.reverse(b);
#	qe_a := algebra.like(pe_a," fox");
#	re_a := io.print(qe_a);
#	mil.line("quit();");
#	se_a := clients.quit();
#
function user.main():void;              #  0 main:void := user.main() {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI.All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         # 11 aa_a:oid := CALCint2oid(_12:int) 
    ba_a := calc.setoid(aa_a);          # 12 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("#test basic functionality of the BAT library.\n"); 
#	io.print("#focussed on strings\n"); 
#	io.print("#it includes bat.insertions,deletions,selections, and joins.\n"); 
#	io.print("var b:= bat.new(str,int);"); 
    b := bat.new(nil:str,nil:int);      # 17 b:bat[:str,:int] := CMDBATnew(_19:str, _20:int) {G}
#	io.print("b.insert(\"the\",1);"); 
    ca_a := bat.insert(b,"the",1);      # 19 ca_a:bat[:str,:int] := BKCinsert_bun(b:bat[:str,:int], _23:str, _24:int) {G}
#	io.print("b.insert(\"quick\",2);"); 
    da_a := bat.insert(b,"quick",2);    # 21 da_a:bat[:str,:int] := BKCinsert_bun(b:bat[:str,:int], _27:str, _28:int) {G}
#	io.print("b.insert(\"brown\",3);"); 
    ea_a := bat.insert(b,"brown",3);    # 23 ea_a:bat[:str,:int] := BKCinsert_bun(b:bat[:str,:int], _31:str, _32:int) {G}
#	io.print("b.insert(\"fox\",4);"); 
    fa_a := bat.insert(b,"fox",4);      # 25 fa_a:bat[:str,:int] := BKCinsert_bun(b:bat[:str,:int], _35:str, _36:int) {G}
#	io.print("b.insert(\"jumps\",5);"); 
    ga_a := bat.insert(b,"jumps",5);    # 27 ga_a:bat[:str,:int] := BKCinsert_bun(b:bat[:str,:int], _39:str, _40:int) {G}
#	io.print("b.insert(\"over\",6);"); 
    ha_a := bat.insert(b,"over",6);     # 29 ha_a:bat[:str,:int] := BKCinsert_bun(b:bat[:str,:int], _43:str, _44:int) {G}
#	io.print("b.insert(\"lazy\",7);"); 
    ia_a := bat.insert(b,"lazy",7);     # 31 ia_a:bat[:str,:int] := BKCinsert_bun(b:bat[:str,:int], _47:str, _48:int) {G}
#	io.print("b.insert(\"dog\",8);"); 
    ja_a := bat.insert(b,"dog",8);      # 33 ja_a:bat[:str,:int] := BKCinsert_bun(b:bat[:str,:int], _51:str, _52:int) {G}
#	io.print("b.insert(str(nil),9);"); 
    ka_a := calc.str(nil:void);         # 35 ka_a:str := CALCnil2str(_55:void) {G}
    la_a := bat.insert(b,ka_a,9);       # 36 la_a:bat[:str,:int] := BKCinsert_bun(b:bat[:str,:int], ka_a:str, _57:int) {G}
#	io.print("b.insert(\".\",10);"); 
    ma_a := bat.insert(b,".",10);       # 38 ma_a:bat[:str,:int] := BKCinsert_bun(b:bat[:str,:int], _60:str, _61:int) {G}
#	io.print("b.insert(\"\",int(nil));"); 
    na_a := calc.int(nil:void);         # 40 na_a:int := CALCnil2int(_55:void) 
    oa_a := bat.insert(b,"",na_a);      # 41 oa_a:bat[:str,:int] := BKCinsert_bun(b:bat[:str,:int], _65:str, na_a:int) {G}
#	io.print("b.insert(str(nil),int(nil));"); 
    pa_a := calc.str(nil:void);         # 43 pa_a:str := CALCnil2str(_55:void) {G}
    qa_a := calc.int(nil:void);         # 44 qa_a:int := CALCnil2int(_55:void) 
    ra_a := bat.insert(b,pa_a,qa_a);    # 45 ra_a:bat[:str,:int] := BKCinsert_bun(b:bat[:str,:int], pa_a:str, qa_a:int) {G}
#	io.print("b.print();"); 
    sa_a := io.print(b);                # 47 sa_a:void := IOprint_val(b:bat[:str,:int]) 
#	io.print("# Testing simple retrievals\n"); 
    ta_a := algebra.find(b,"the");      # 49 ta_a:int := ALGfind(b:bat[:str,:int], _74:str) 
    ua_a := io.print(ta_a);             # 50 ua_a:void := IOprint_val(ta_a:int) 
#	io.print("b.find(\"fox\").print();"); 
    va_a := algebra.find(b,"fox");      # 52 va_a:int := ALGfind(b:bat[:str,:int], _78:str) 
    wa_a := io.print(va_a);             # 53 wa_a:void := IOprint_val(va_a:int) 
#	io.print("b.find(str(nil)).print();"); 
    xa_a := calc.str(nil:void);         # 55 xa_a:str := CALCnil2str(_55:void) {G}
    ya_a := algebra.find(b,xa_a);       # 56 ya_a:int := ALGfind(b:bat[:str,:int], xa_a:str) 
    ab_a := io.print(ya_a);             # 57 ab_a:void := IOprint_val(ya_a:int) 
#	io.print("# This should cause an error\n"); 
#ignore	bb_a := algebra. find(b,"cat"); 
#ignore	cb_a := print(bb_a); 
#	io.print("# Can we delete them and re-insert them later on\n"); 
    db_a := bat.delete(b,"fox",4);      # 62 db_a:bat[:str,:int] := BKCdelete_bun(b:bat[:str,:int], _78:str, _89:int) {G}
#	io.print("b.delete(\"the\",1);"); 
    eb_a := bat.delete(b,"the",1);      # 64 eb_a:bat[:str,:int] := BKCdelete_bun(b:bat[:str,:int], _74:str, _92:int) {G}
#	io.print("b.delete(\".\",10);"); 
    fb_a := bat.delete(b,".",10);       # 66 fb_a:bat[:str,:int] := BKCdelete_bun(b:bat[:str,:int], _95:str, _96:int) {G}
#	io.print("b.print();"); 
    gb_a := io.print(b);                # 68 gb_a:void := IOprint_val(b:bat[:str,:int]) 
#	io.print("b.insert(\"fox\",4);"); 
    hb_a := bat.insert(b,"fox",4);      # 70 hb_a:bat[:str,:int] := BKCinsert_bun(b:bat[:str,:int], _78:str, _89:int) {G}
#	io.print("b.insert(\"the\",1);"); 
    ib_a := bat.insert(b,"the",1);      # 72 ib_a:bat[:str,:int] := BKCinsert_bun(b:bat[:str,:int], _74:str, _92:int) {G}
#	io.print("b.insert(\".\",10);"); 
    jb_a := bat.insert(b,".",10);       # 74 jb_a:bat[:str,:int] := BKCinsert_bun(b:bat[:str,:int], _95:str, _96:int) {G}
#	io.print("b.count().print();"); 
    kb_a := aggr.count(b);              # 76 kb_a:int := ALGcount_bat(b:bat[:str,:int]) 
    lb_a := io.print(kb_a);             # 77 lb_a:void := IOprint_val(kb_a:int) 
#	io.print("# Lets cut out a few sections\n"); 
    mb_a := algebra.select(b,2,4);      # 79 mb_a:bat[:str,:int] := ALGselect(b:bat[:str,:int], _110:int, _89:int) {G}
    nb_a := io.print(mb_a);             # 80 nb_a:void := IOprint_val(mb_a:bat[:str,:int]) 
#	io.print("b.select(7,int(nil)).print();"); 
    ob_a := calc.int(nil:void);         # 82 ob_a:int := CALCnil2int(_114:void) 
    pb_a := algebra.select(b,7,ob_a);   # 83 pb_a:bat[:str,:int] := ALGselect(b:bat[:str,:int], _116:int, ob_a:int) {G}
    qb_a := io.print(pb_a);             # 84 qb_a:void := IOprint_val(pb_a:bat[:str,:int]) 
#	io.print("b.select(int(nil),7).print();"); 
    rb_a := calc.int(nil:void);         # 86 rb_a:int := CALCnil2int(_114:void) 
    sb_a := algebra.select(b,rb_a,7);   # 87 sb_a:bat[:str,:int] := ALGselect(b:bat[:str,:int], rb_a:int, _116:int) {G}
    tb_a := io.print(sb_a);             # 88 tb_a:void := IOprint_val(sb_a:bat[:str,:int]) 
#	io.print("b.select(int(nil),int(nil)).print();"); 
    ub_a := calc.int(nil:void);         # 90 ub_a:int := CALCnil2int(_114:void) 
    vb_a := calc.int(nil:void);         # 91 vb_a:int := CALCnil2int(_114:void) 
    wb_a := algebra.select(b,ub_a,vb_a);# 92 wb_a:bat[:str,:int] := ALGselect(b:bat[:str,:int], ub_a:int, vb_a:int) {G}
    xb_a := io.print(wb_a);             # 93 xb_a:void := IOprint_val(wb_a:bat[:str,:int]) 
#	io.print("b.reverse().select(\"fox\",\"quick\").print();"); 
    yb_a := bat.reverse(b);             # 95 yb_a:bat[:int,:str] := BKCreverse(b:bat[:str,:int]) {G}
    ac_a := algebra.select(yb_a,"fox","quick");# 96 ac_a:bat[:int,:str] := ALGselect(yb_a:bat[:int,:str], _130:str, _131:str) {G}
    bc_a := io.print(ac_a);             # 97 bc_a:void := IOprint_val(ac_a:bat[:int,:str]) 
#	io.print("b.reverse().select(\"fox\",str(nil)).print();"); 
    cc_a := calc.str(nil:void);         # 99 cc_a:str := CALCnil2str(_114:void) {G}
    dc_a := bat.reverse(b);             #100 dc_a:bat[:int,:str] := BKCreverse(b:bat[:str,:int]) {G}
    ec_a := algebra.select(dc_a,"fox",cc_a);#101 ec_a:bat[:int,:str] := ALGselect(dc_a:bat[:int,:str], _130:str, cc_a:str) {G}
    fc_a := io.print(ec_a);             #102 fc_a:void := IOprint_val(ec_a:bat[:int,:str]) 
#	io.print("b.reverse().select(str(nil),\"quick\").print();"); 
    gc_a := calc.str(nil:void);         #104 gc_a:str := CALCnil2str(_114:void) {G}
    hc_a := bat.reverse(b);             #105 hc_a:bat[:int,:str] := BKCreverse(b:bat[:str,:int]) {G}
    ic_a := algebra.select(hc_a,gc_a,"quick");#106 ic_a:bat[:int,:str] := ALGselect(hc_a:bat[:int,:str], gc_a:str, _131:str) {G}
    jc_a := io.print(ic_a);             #107 jc_a:void := IOprint_val(ic_a:bat[:int,:str]) 
#	io.print("b.reverse().select(str(nil),str(nil)).print();"); 
    kc_a := calc.str(nil:void);         #109 kc_a:str := CALCnil2str(_114:void) {G}
    lc_a := calc.str(nil:void);         #110 lc_a:str := CALCnil2str(_114:void) {G}
    mc_a := bat.reverse(b);             #111 mc_a:bat[:int,:str] := BKCreverse(b:bat[:str,:int]) {G}
    nc_a := algebra.select(mc_a,kc_a,lc_a);#112 nc_a:bat[:int,:str] := ALGselect(mc_a:bat[:int,:str], kc_a:str, lc_a:str) {G}
    oc_a := io.print(nc_a);             #113 oc_a:void := IOprint_val(nc_a:bat[:int,:str]) 
#	io.print("# A 2-dimensional cut\n"); 
    bn := algebra.fragment(b,"fox","quick",1,5);#115 bn:bat[:str,:int] := ALGfragment(b:bat[:str,:int], _130:str, _131:str, _151:int, _152:int) {G}
    pc_a := io.print(bn);               #116 pc_a:void := IOprint_val(bn:bat[:str,:int]) 
#	io.print("b.fragment(\"fox\",str(nil),1,5).print();"); 
    qc_a := calc.str(nil:void);         #118 qc_a:str := CALCnil2str(_156:void) {G}
    rc_a := algebra.fragment(b,"fox",qc_a,1,5);#119 rc_a:bat[:str,:int] := ALGfragment(b:bat[:str,:int], _130:str, qc_a:str, _151:int, _152:int) {G}
    sc_a := io.print(rc_a);             #120 sc_a:void := IOprint_val(rc_a:bat[:str,:int]) 
#	io.print("b.fragment(str(nil),\"quick\",1,5).print();"); 
    tc_a := calc.str(nil:void);         #122 tc_a:str := CALCnil2str(_156:void) {G}
    uc_a := algebra.fragment(b,tc_a,"quick",1,5);#123 uc_a:bat[:str,:int] := ALGfragment(b:bat[:str,:int], tc_a:str, _131:str, _151:int, _152:int) {G}
    vc_a := io.print(uc_a);             #124 vc_a:void := IOprint_val(uc_a:bat[:str,:int]) 
#	io.print("b.fragment(str(nil),str(nil),1,5).print();"); 
    wc_a := calc.str(nil:void);         #126 wc_a:str := CALCnil2str(_156:void) {G}
    xc_a := calc.str(nil:void);         #127 xc_a:str := CALCnil2str(_156:void) {G}
    yc_a := algebra.fragment(b,wc_a,xc_a,1,5);#128 yc_a:bat[:str,:int] := ALGfragment(b:bat[:str,:int], wc_a:str, xc_a:str, _151:int, _152:int) {G}
    ad_a := io.print(yc_a);             #129 ad_a:void := IOprint_val(yc_a:bat[:str,:int]) 
#	io.print("b.fragment(\"fox\",\"quick\",1,int(nil)).print();"); 
    bd_a := calc.int(nil:void);         #131 bd_a:int := CALCnil2int(_156:void) 
    cd_a := algebra.fragment(b,"fox","quick",1,bd_a);#132 cd_a:bat[:str,:int] := ALGfragment(b:bat[:str,:int], _171:str, _172:str, _151:int, bd_a:int) {G}
    dd_a := io.print(cd_a);             #133 dd_a:void := IOprint_val(cd_a:bat[:str,:int]) 
#	io.print("b.fragment(\"fox\",\"quick\",int(nil),5).print();"); 
    ed_a := calc.int(nil:void);         #135 ed_a:int := CALCnil2int(_156:void) 
    fd_a := algebra.fragment(b,"fox","quick",ed_a,5);#136 fd_a:bat[:str,:int] := ALGfragment(b:bat[:str,:int], _171:str, _172:str, ed_a:int, _152:int) {G}
    gd_a := io.print(fd_a);             #137 gd_a:void := IOprint_val(fd_a:bat[:str,:int]) 
#	io.print("b.fragment(\"fox\",\"quick\",int(nil),int(nil)).print();"); 
    hd_a := calc.int(nil:void);         #139 hd_a:int := CALCnil2int(_156:void) 
    id_a := calc.int(nil:void);         #140 id_a:int := CALCnil2int(_156:void) 
    jd_a := algebra.fragment(b,"fox","quick",hd_a,id_a);#141 jd_a:bat[:str,:int] := ALGfragment(b:bat[:str,:int], _171:str, _172:str, hd_a:int, id_a:int) {G}
    kd_a := io.print(jd_a);             #142 kd_a:void := IOprint_val(jd_a:bat[:str,:int]) 
#	io.print("b.fragment(\"fox\",str(nil),int(nil),int(nil)).print();"); 
    ld_a := calc.str(nil:void);         #144 ld_a:str := CALCnil2str(_156:void) {G}
    md_a := calc.int(nil:void);         #145 md_a:int := CALCnil2int(_156:void) 
    nd_a := calc.int(nil:void);         #146 nd_a:int := CALCnil2int(_156:void) 
    od_a := algebra.fragment(b,"fox",ld_a,md_a,nd_a);#147 od_a:bat[:str,:int] := ALGfragment(b:bat[:str,:int], _171:str, ld_a:str, md_a:int, nd_a:int) {G}
    pd_a := io.print(od_a);             #148 pd_a:void := IOprint_val(od_a:bat[:str,:int]) 
#	io.print("b.fragment(str(nil),\"f\",int(nil),int(nil)).print();"); 
    qd_a := calc.str(nil:void);         #150 qd_a:str := CALCnil2str(_191:void) {G}
    rd_a := calc.int(nil:void);         #151 rd_a:int := CALCnil2int(_191:void) 
    sd_a := calc.int(nil:void);         #152 sd_a:int := CALCnil2int(_191:void) 
    td_a := algebra.fragment(b,qd_a,"f",rd_a,sd_a);#153 td_a:bat[:str,:int] := ALGfragment(b:bat[:str,:int], qd_a:str, _195:str, rd_a:int, sd_a:int) {G}
    ud_a := io.print(td_a);             #154 ud_a:void := IOprint_val(td_a:bat[:str,:int]) 
#	io.print("b.reverse().fragment(int(nil),int(nil),str(nil),\"f\").print();"); 
    vd_a := calc.int(nil:void);         #156 vd_a:int := CALCnil2int(_191:void) 
    wd_a := calc.int(nil:void);         #157 wd_a:int := CALCnil2int(_191:void) 
    xd_a := calc.str(nil:void);         #158 xd_a:str := CALCnil2str(_191:void) {G}
    yd_a := bat.reverse(b);             #159 yd_a:bat[:int,:str] := BKCreverse(b:bat[:str,:int]) {G}
    ae_a := algebra.fragment(yd_a,vd_a,wd_a,xd_a,"f");#160 ae_a:bat[:int,:str] := ALGfragment(yd_a:bat[:int,:str], vd_a:int, wd_a:int, xd_a:str, _195:str) {G}
    be_a := io.print(ae_a);             #161 be_a:void := IOprint_val(ae_a:bat[:int,:str]) 
#	io.print("var b1:= b.join(bn.reverse());"); 
    ce_a := bat.reverse(bn);            #163 ce_a:bat[:int,:str] := BKCreverse(bn:bat[:str,:int]) {G}
    b1 := algebra.join(b,ce_a);         #164 b1:bat[:str,:str] := ALGjoin(b:bat[:str,:int], ce_a:bat[:int,:str]) {G}
#	io.print("b1.print();"); 
    de_a := io.print(b1);               #166 de_a:void := IOprint_val(b1:bat[:str,:str]) 
#	io.print("var b2:= b.semijoin(b1.reverse());"); 
    ee_a := bat.reverse(b1);            #168 ee_a:bat[:str,:str] := BKCreverse(b1:bat[:str,:str]) {G}
    b2 := algebra.semijoin(b,ee_a);     #169 b2:bat[:str,:int] := ALGsemijoin(b:bat[:str,:int], ee_a:bat[:str,:str]) {G}
#	io.print("b2.print();"); 
    fe_a := io.print(b2);               #171 fe_a:void := IOprint_val(b2:bat[:str,:int]) 
#	io.print("# testing the like command\n"); 
    ge_a := bat.reverse(b);             #173 ge_a:bat[:int,:str] := BKCreverse(b:bat[:str,:int]) {G}
    he_a := algebra.like(ge_a,"ox");    #174 he_a:bat[:int,:str] := ALGlike(ge_a:bat[:int,:str], _217:str) {G}
    ie_a := io.print(he_a);             #175 ie_a:void := IOprint_val(he_a:bat[:int,:str]) 
#	io.print("b.reverse().like(\"fo\").print();"); 
    je_a := bat.reverse(b);             #177 je_a:bat[:int,:str] := BKCreverse(b:bat[:str,:int]) {G}
    ke_a := algebra.like(je_a,"fo");    #178 ke_a:bat[:int,:str] := ALGlike(je_a:bat[:int,:str], _222:str) {G}
    le_a := io.print(ke_a);             #179 le_a:void := IOprint_val(ke_a:bat[:int,:str]) 
#	io.print("b.reverse().like(\"fox\").print();"); 
    me_a := bat.reverse(b);             #181 me_a:bat[:int,:str] := BKCreverse(b:bat[:str,:int]) {G}
    ne_a := algebra.like(me_a,"fox");   #182 ne_a:bat[:int,:str] := ALGlike(me_a:bat[:int,:str], _227:str) {G}
    oe_a := io.print(ne_a);             #183 oe_a:void := IOprint_val(ne_a:bat[:int,:str]) 
#	io.print("b.reverse().like(\" fox\").print();"); 
    pe_a := bat.reverse(b);             #185 pe_a:bat[:int,:str] := BKCreverse(b:bat[:str,:int]) {G}
    qe_a := algebra.like(pe_a," fox");  #186 qe_a:bat[:int,:str] := ALGlike(pe_a:bat[:int,:str], _232:str) {G}
    re_a := io.print(qe_a);             #187 re_a:void := IOprint_val(qe_a:bat[:int,:str]) 
#	io.print("quit();"); 
    se_a := clients.quit();             #189 se_a:void := CLTquit() 
end main;                               #190  
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "the",	  1	  ]
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "fox",	  4	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
[ ".",		  10	  ]
[ "",		  nil	  ]
[ nil,		  nil	  ]
## Testing simple retrievals\n
[ 1 ]
#b.find(\"fox\").print();
[ 4 ]
#b.find(str(nil)).print();
[ nil ]
## This should cause an error\n
## Can we delete them and re-insert them later on\n
#b.delete(\"the\",1);
#b.delete(\".\",10);
#b.print();
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "",		  nil	  ]
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ nil,		  nil	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
#b.insert(\"fox\",4);
#b.insert(\"the\",1);
#b.insert(\".\",10);
#b.count().print();
[ 12 ]
## Lets cut out a few sections\n
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "fox",	  4	  ]
#b.select(7,int(nil)).print();
#-----------------#
# h	t	  # name
# str	int	  # type
#-----------------#
[ "lazy", 7	  ]
[ "dog",  8	  ]
[ nil,	  9	  ]
[ ".",	  10	  ]
#b.select(int(nil),7).print();
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "fox",	  4	  ]
[ "the",	  1	  ]
#b.select(int(nil),int(nil)).print();
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
[ "fox",	  4	  ]
[ "the",	  1	  ]
[ ".",		  10	  ]
#b.reverse().select(\"fox\",\"quick\").print();
#-------------------------#
# h	t		  # name
# int	str		  # type
#-------------------------#
[ 2,	  "quick"	  ]
[ 5,	  "jumps"	  ]
[ 6,	  "over"	  ]
[ 7,	  "lazy"	  ]
[ 4,	  "fox"		  ]
#b.reverse().select(\"fox\",str(nil)).print();
#-------------------------#
# h	t		  # name
# int	str		  # type
#-------------------------#
[ 2,	  "quick"	  ]
[ 5,	  "jumps"	  ]
[ 6,	  "over"	  ]
[ 7,	  "lazy"	  ]
[ 4,	  "fox"		  ]
[ 1,	  "the"		  ]
#b.reverse().select(str(nil),\"quick\").print();
#-------------------------#
# h	t		  # name
# int	str		  # type
#-------------------------#
[ nil,	  ""		  ]
[ 2,	  "quick"	  ]
[ 3,	  "brown"	  ]
[ 5,	  "jumps"	  ]
[ 6,	  "over"	  ]
[ 7,	  "lazy"	  ]
[ 8,	  "dog"		  ]
[ 4,	  "fox"		  ]
[ 10,	  "."		  ]
#b.reverse().select(str(nil),str(nil)).print();
#-------------------------#
# h	t		  # name
# int	str		  # type
#-------------------------#
[ nil,	  ""		  ]
[ 2,	  "quick"	  ]
[ 3,	  "brown"	  ]
[ 5,	  "jumps"	  ]
[ 6,	  "over"	  ]
[ 7,	  "lazy"	  ]
[ 8,	  "dog"		  ]
[ 4,	  "fox"		  ]
[ 1,	  "the"		  ]
[ 10,	  "."		  ]
## A 2-dimensional cut\n
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]
#b.fragment(\"fox\",str(nil),1,5).print();
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]
[ "the",	  1	  ]
#b.fragment(str(nil),\"quick\",1,5).print();
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]
#b.fragment(str(nil),str(nil),1,5).print();
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "quick",	  2	  ]
[ "brown",	  3	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]
[ "the",	  1	  ]
#b.fragment(\"fox\",\"quick\",1,int(nil)).print();
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "fox",	  4	  ]
#b.fragment(\"fox\",\"quick\",int(nil),5).print();
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]
#b.fragment(\"fox\",\"quick\",int(nil),int(nil)).print();
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "fox",	  4	  ]
#b.fragment(\"fox\",str(nil),int(nil),int(nil)).print();
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "over",	  6	  ]
[ "lazy",	  7	  ]
[ "fox",	  4	  ]
[ "the",	  1	  ]
#b.fragment(str(nil),\"f\",int(nil),int(nil)).print();
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "",		  nil	  ]
[ "brown",	  3	  ]
[ nil,		  nil	  ]
[ "dog",	  8	  ]
[ nil,		  9	  ]
[ ".",		  10	  ]
#b.reverse().fragment(int(nil),int(nil),str(nil),\"f\").print();
#-------------------------#
# h	t		  # name
# int	str		  # type
#-------------------------#
[ nil,	  ""		  ]
[ 3,	  "brown"	  ]
[ nil,	  nil		  ]
[ 8,	  "dog"		  ]
[ 9,	  nil		  ]
[ 10,	  "."		  ]
#var b1:= b.join(bn.reverse());
#b1.print();
#---------------------------------#
# h		t		  # name
# str		str		  # type
#---------------------------------#
[ "quick",	  "quick"	  ]
[ "jumps",	  "jumps"	  ]
[ "fox",	  "fox"		  ]
#var b2:= b.semijoin(b1.reverse());
#b2.print();
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "quick",	  2	  ]
[ "jumps",	  5	  ]
[ "fox",	  4	  ]
## testing the like command\n
#-----------------#
# h	t	  # name
# int	str	  # type
#-----------------#
[ 4,	  "fox"	  ]
#b.reverse().like(\"fo\").print();
#-----------------#
# h	t	  # name
# int	str	  # type
#-----------------#
[ 4,	  "fox"	  ]
#b.reverse().like(\"fox\").print();
#-----------------#
# h	t	  # name
# int	str	  # type
#-----------------#
[ 4,	  "fox"	  ]
#b.reverse().like(\" fox\").print();
#-----------------#
# h	t	  # name
# int	str	  # type
#-----------------#
#quit();

# 00:12:27 >  
# 00:12:27 >  Done.
# 00:12:27 >  

