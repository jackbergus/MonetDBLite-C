# Monet Mil to Mal compiler
include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
	mil.line("setoid(oid(20000000));");
	aa_a := calc.oid(20000000);
	ba_a := calc.setoid(aa_a);
	mil.line("#test sampling\n");
	b := bat.new(nil:int,nil:int);
	mil.line("b.insert(1,15);");
	ca_a := bat.insert(b,1,15);
	mil.line("b.insert(2,4);");
	da_a := bat.insert(b,2,4);
	mil.line("b.insert(3,int(nil));");
	ea_a := calc.int(nil);
	fa_a := bat.insert(b,3,ea_a);
	mil.line("b.insert(4,16);");
	ga_a := bat.insert(b,4,16);
	mil.line("b.insert(5,25);");
	ha_a := bat.insert(b,5,25);
	mil.line("b.insert(6,36);");
	ia_a := bat.insert(b,6,36);
	mil.line("b.insert(7,49);");
	ja_a := bat.insert(b,7,49);
	mil.line("b.insert(8,64);");
	ka_a := bat.insert(b,8,64);
	mil.line("b.insert(9,int(nil));");
	la_a := calc.int(nil);
	ma_a := bat.insert(b,9,la_a);
	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(1).print(); io.printf(\"#~EndVariableOutput~#\\n\");");
	na_a := io.printf("#~BeginVariableOutput~#\n");
	oa_a := algebra.sample(b,1);
	pa_a := io.print(oa_a);
	qa_a := io.printf("#~EndVariableOutput~#\n");
	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(1).print(); io.printf(\"#~EndVariableOutput~#\\n\");");
	ra_a := io.printf("#~BeginVariableOutput~#\n");
	sa_a := algebra.sample(b,1);
	ta_a := io.print(sa_a);
	ua_a := io.printf("#~EndVariableOutput~#\n");
	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(9).print(); ioprintf(\"#~EndVariableOutput~#\\n\");");
	va_a := io.printf("#~BeginVariableOutput~#\n");
	wa_a := algebra.sample(b,9);
	xa_a := io.print(wa_a);
	ya_a := io.printf("#~EndVariableOutput~#\n");
	mil.line("b.sample(0).print();");
	ab_a := algebra.sample(b,0);
	bb_a := io.print(ab_a);
	mil.line("quit();");
	cb_a := clients.quit();
