# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	io.print("setoid(oid(20000000));");
	aa_a := calc.oid(20000000);
	ba_a := calc.setoid(aa_a);
#	io.print("#test sampling\n");
	b := bat.new(:oid,nil:int);
	ca_a := bat.insert(b,1@0,15);
	da_a := bat.insert(b,2@0,4);
	ea_a := calc.int(nil);
	fa_a := bat.insert(b,3@0,ea_a);
	ga_a := bat.insert(b,4@0,16);
	ia_a := bat.insert(b,6@0,36);
	ja_a := bat.insert(b,7@0,49);
	ka_a := bat.insert(b,8@0,64);
	la_a := calc.int(nil);
	ma_a := bat.insert(b,9@0,la_a);
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(1).print(); io.printf(\"#~EndVariableOutput~#\\n\");");
	na_a := io.printf("#~BeginVariableOutput~#\n");
	oa_a := algebra.sample(b,1);
	pa_a := io.print(oa_a);
	qa_a := io.printf("#~EndVariableOutput~#\n");
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(1).print(); io.printf(\"#~EndVariableOutput~#\\n\");");
	ra_a := io.printf("#~BeginVariableOutput~#\n");
	sa_a := algebra.sample(b,1);
	ta_a := io.print(sa_a);
	ua_a := io.printf("#~EndVariableOutput~#\n");
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(9).print(); ioprintf(\"#~EndVariableOutput~#\\n\");");
	va_a := io.printf("#~BeginVariableOutput~#\n");
	wa_a := algebra.sample(b,9);
	xa_a := io.print(wa_a);
	ya_a := io.printf("#~EndVariableOutput~#\n");
#	io.print("b.sample(0).print();");
	ab_a := algebra.sample(b,0);
	bb_a := io.print(ab_a);
#	io.print("quit();");
	cb_a := clients.quit();
