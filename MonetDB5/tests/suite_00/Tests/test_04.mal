# Monet Mil to Mal compiler
#include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
	aa_a := calc.oid(20000000);
	ba_a := calc.setoid(aa_a);
#	mil.line("# test correctness of semijoin\n");
	b := bat.new(nil:int,nil:int);
#	mil.line("var c:= bat.new(int,int);");
	c := bat.new(nil:int,nil:int);
#	mil.line("b.insert(0,0);");
	ca_a := bat.insert(b,0,0);
#	mil.line("b.insert(1,1);");
	da_a := bat.insert(b,1,1);
#	mil.line("b.insert(1,2);");
	ea_a := bat.insert(b,1,2);
#	mil.line("b.insert(1,3);");
	fa_a := bat.insert(b,1,3);
#	mil.line("b.insert(1,4);");
	ga_a := bat.insert(b,1,4);
#	mil.line("c.insert(1,5);");
	ha_a := bat.insert(c,1,5);
#	mil.line("c.insert(1,4);");
	ia_a := bat.insert(c,1,4);
#	mil.line("c.insert(2,2);");
	ja_a := bat.insert(c,2,2);
#	mil.line("b.semijoin(c).print();");
	ka_a := algebra.semijoin(b,c);
	la_a := io.print(ka_a);
#	mil.line("c.semijoin(b).print();");
	ma_a := algebra.semijoin(c,b);
	na_a := io.print(ma_a);
#	mil.line("b.semijoin(b).print();");
	oa_a := algebra.semijoin(b,b);
	pa_a := io.print(oa_a);
#	mil.line("quit();");
	qa_a := clients.quit();
