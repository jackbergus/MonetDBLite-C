# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	io.print("setoid(oid(20000000));");
	aa_a := calc.oid(20000000);
	ba_a := calc.setoid(aa_a);
#	io.print("# Selfcontained test of delta operations\n");
#	io.print("var b:=new(int,int);");
	b := bat.new(nil:int,nil:int);
#	io.print("var bi:=new(int,int);");
	bi := bat.new(nil:int,nil:int);
#	io.print("var bd:=new(int,int);");
	bd := bat.new(nil:int,nil:int);
#	io.print("insert(b,1,2);");
	ca_a := bat.insert(b,1,2);
#	io.print("insert(b,2,3);");
	da_a := bat.insert(b,2,3);
#	io.print("bd:=b.delta();");
	bd := transaction.delta(b);
#	io.print("print(bd);");
	ea_a := io.print(bd);
#	io.print("var a:= b.alpha();");
	a := transaction.alpha(b);
#	io.print("a.print();");
	fa_a := io.print(a);
#	io.print("#commit the changes and repeat the action\n");
	ga_a := bat.delete(bd);
#	io.print("commit(b);");
	ha_a := transaction.commit(b);
#	io.print("b.alpha().print();");
	ia_a := transaction.alpha(b);
	ja_a := io.print(ia_a);
#	io.print("insert(b,4,5);");
	ka_a := bat.insert(b,4,5);
#	io.print("delete(b,2,3);");
	la_a := bat.delete(b,2,3);
#	io.print("print(b);");
	ma_a := io.print(b);
#	io.print("bd:=b.delta();");
	bd := transaction.delta(b);
#	io.print("print(bd);");
	na_a := io.print(bd);
#	io.print("a:= b.alpha();");
	a := transaction.alpha(b);
#	io.print("a.print();");
	oa_a := io.print(a);
#	io.print("abort(b);");
	pa_a := transaction.abort(b);
#	io.print("print(b);");
	qa_a := io.print(b);
#	io.print("quit();");
	ra_a := clients.quit();
