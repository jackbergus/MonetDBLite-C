stdout of test 'test_20` in directory 'tests/suite_00` itself:


# 00:12:28 >  
# 00:12:28 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_20.mal </dev/null
# 00:12:28 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("# test single column BATs\n");
#	a := bbp.new(:int,:void);
#	mil.line("a.insert(1,void(nil));");
#	ca_a := calc.void(nil);
#	da_a := bat.insert(a,1,ca_a);
#	mil.line("a.print();");
#	ea_a := io.print(a);
#	mil.line("a.insert(2,void(nil));");
#	fa_a := calc.void(nil);
#	ga_a := bat.insert(a,2,fa_a);
#	mil.line("a.insert(int(nil),void(nil));");
#	ha_a := calc.int(nil);
#	ia_a := calc.void(nil);
#	ja_a := bat.insert(a,ha_a,ia_a);
#	mil.line("a.print();");
#	ka_a := io.print(a);
#	mil.line("var b:= bbp.new(void,int);");
#	b := bbp.new(:void,:int);
#	mil.line("b.insert(void(nil),1);");
#	la_a := calc.void(nil);
#	ma_a := bat.insert(b,la_a,1);
#	mil.line("b.print();");
#	na_a := io.print(b);
#	mil.line("b.insert(void(nil),2);");
#	oa_a := calc.void(nil);
#	pa_a := bat.insert(b,oa_a,2);
#	mil.line("b.insert(void(nil),int(nil));");
#	qa_a := calc.void(nil);
#	ra_a := calc.int(nil);
#	sa_a := bat.insert(b,qa_a,ra_a);
#	mil.line("b.print();");
#	ta_a := io.print(b);
#	mil.line("quit();");
#	ua_a := clients.quit();
#
function user.main():void;              #  0 main:void := user.main() {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         # 11 aa_a:oid := CALCint2oid(_12:int) 
    ba_a := calc.setoid(aa_a);          # 12 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("# test single column BATs\n"); 
    a := bat.new(:int,:oid);            # 14 a:bat[:int,:oid] := CMDBATnew(_16:int, _17:oid) {G}
#	io.print("a.insert(1,oid(nil));"); 
    ca_a := calc.oid(nil:void);         # 16 ca_a:oid := CALCnil2oid(_20:void) 
    da_a := bat.insert(a,1,ca_a);       # 17 da_a:void := BKCinsert_bun(a:bat[:int,:oid], _22:int, ca_a:oid) 
#	io.print("a.print();"); 
    ea_a := io.print(a);                # 19 ea_a:void := IOprint_val(a:bat[:int,:oid]) 
#	io.print("a.insert(2,oid(nil));"); 
    fa_a := calc.oid(nil:void);         # 21 fa_a:oid := CALCnil2oid(_20:void) 
    ga_a := bat.insert(a,2,fa_a);       # 22 ga_a:void := BKCinsert_bun(a:bat[:int,:oid], _28:int, fa_a:oid) 
#	io.print("a.insert(int(nil),oid(nil));"); 
    ha_a := calc.int(nil:void);         # 24 ha_a:int := CALCnil2int(_20:void) 
    ia_a := calc.oid(nil:void);         # 25 ia_a:oid := CALCnil2oid(_20:void) 
    ja_a := bat.insert(a,ha_a,ia_a);    # 26 ja_a:void := BKCinsert_bun(a:bat[:int,:oid], ha_a:int, ia_a:oid) 
#	io.print("a.print();"); 
    ka_a := io.print(a);                # 28 ka_a:void := IOprint_val(a:bat[:int,:oid]) 
#	io.print("var b:= bat.new(oid,int);"); 
    b := bat.new(:oid,:int);            # 30 b:bat[:oid,:int] := CMDBATnew(_17:oid, _37:int) {G}
#	io.print("b.insert(void(nil),1);"); 
    la_a := calc.oid(nil:void);         # 32 la_a:oid := CALCnil2oid(_20:void) 
    ma_a := bat.insert(b,la_a,1);       # 33 ma_a:void := BKCinsert_bun(b:bat[:oid,:int], la_a:oid, _22:int) 
#	io.print("b.print();"); 
    na_a := io.print(b);                # 35 na_a:void := IOprint_val(b:bat[:oid,:int]) 
#	io.print("b.insert(oid(nil),2);"); 
    oa_a := calc.oid(nil:void);         # 37 oa_a:oid := CALCnil2oid(_20:void) 
    pa_a := bat.insert(b,oa_a,2);       # 38 pa_a:void := BKCinsert_bun(b:bat[:oid,:int], oa_a:oid, _28:int) 
#	io.print("b.insert(void(nil),int(nil));"); 
    qa_a := calc.oid(nil:void);         # 40 qa_a:oid := CALCnil2oid(_20:void) 
    ra_a := calc.int(nil:void);         # 41 ra_a:int := CALCnil2int(_20:void) 
    sa_a := bat.insert(b,qa_a,ra_a);    # 42 sa_a:void := BKCinsert_bun(b:bat[:oid,:int], qa_a:oid, ra_a:int) 
#	io.print("b.print();"); 
    ta_a := io.print(b);                # 44 ta_a:void := IOprint_val(b:bat[:oid,:int]) 
#	io.print("quit();"); 
    ua_a := clients.quit();             # 46 ua_a:void := CLTquit() 
end main;	# 47  
#-----------------#
# h	t	  # name
# int	void	  # type
#-----------------#
[ 1,	  nil	  ]
#a.insert(2,void(nil));
#a.insert(int(nil),void(nil));
#a.print();
#-----------------#
# h	t	  # name
# int	void	  # type
#-----------------#
[ 1,	  nil	  ]
[ 2,	  nil	  ]
[ nil,	  nil	  ]
#var b:= bbp.new(void,int);
#b.insert(void(nil),1);
#b.print();
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  1	  ]
#b.insert(void(nil),2);
#b.insert(void(nil),int(nil));
#b.print();
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  1	  ]
[ nil,	  2	  ]
[ nil,	  nil	  ]
#quit();

# 00:12:28 >  
# 00:12:28 >  Done.
# 00:12:28 >  

