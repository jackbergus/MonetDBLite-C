stdout of test 'test_20` in directory 'tests/suite_00` itself:


# 00:12:28 >  
# 00:12:28 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_20.mal </dev/null
# 00:12:28 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("# test single column BATs\n");
#	a := bbp.new(:int,:void);
#	mil.line("a.insert(1,void(nil));");
#	ca_a := calc.void(nil);
#	da_a := bat.insert(a,1,ca_a);
#	mil.line("a.print();");
#	ea_a := io.print(a);
#	mil.line("a.insert(2,void(nil));");
#	fa_a := calc.void(nil);
#	ga_a := bat.insert(a,2,fa_a);
#	mil.line("a.insert(int(nil),void(nil));");
#	ha_a := calc.int(nil);
#	ia_a := calc.void(nil);
#	ja_a := bat.insert(a,ha_a,ia_a);
#	mil.line("a.print();");
#	ka_a := io.print(a);
#	mil.line("var b:= bbp.new(void,int);");
#	b := bbp.new(:void,:int);
#	mil.line("b.insert(void(nil),1);");
#	la_a := calc.void(nil);
#	ma_a := bat.insert(b,la_a,1);
#	mil.line("b.print();");
#	na_a := io.print(b);
#	mil.line("b.insert(void(nil),2);");
#	oa_a := calc.void(nil);
#	pa_a := bat.insert(b,oa_a,2);
#	mil.line("b.insert(void(nil),int(nil));");
#	qa_a := calc.void(nil);
#	ra_a := calc.int(nil);
#	sa_a := bat.insert(b,qa_a,ra_a);
#	mil.line("b.print();");
#	ta_a := io.print(b);
#	mil.line("quit();");
#	ua_a := clients.quit();
#
function user.main():int;	# 0  (main:int)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  (_32:str)
#Predefined code segment 	# 2  (_34:str)
#The compiler can not guarantee an accurate compilation, 	# 3  (_36:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  (_38:str)
#A few guidelines to maximize usefullness. 	# 5  (_40:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  (_42:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  (_44:str)
#use the "mil_schema" for additional support routines 	# 8  (_46:str)
    mil.line("setoid(oid(20000000));");	# 9 MILline (_47:void)<-(_48:str)
    aa_a := calc.oid(20000000);	# 10 CALCint2oid (aa_a:oid)<-(_50:int)
    ba_a := calc.setoid(aa_a);	# 11 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("# test single column BATs\n");	# 12 MILline (_52:void)<-(_53:str)
    a := bat.new(:int,:void);	# 13 CMDBATnew (a:bat[:int,:void])<-(_55:int)(_56:void)
    mil.line("a.insert(1,void(nil));");	# 14 MILline (_57:void)<-(_58:str)
    ca_a := calc.void(nil);	# 15 CALCnil2void (ca_a:void)<-(_60:void)
    da_a := bat.insert(a,1,ca_a);	# 16 BKCinsert_bun (da_a:void)<-(a:bat[:int,:void])(_62:int)(ca_a:void)
    mil.line("a.print();");	# 17 MILline (_63:void)<-(_64:str)
    ea_a := io.print(a);	# 18 IOprint_val (ea_a:int)<-(a:bat[:int,:void])
    mil.line("a.insert(2,void(nil));");	# 19 MILline (_66:void)<-(_67:str)
    fa_a := calc.void(nil);	# 20 CALCnil2void (fa_a:void)<-(_60:void)
    ga_a := bat.insert(a,2,fa_a);	# 21 BKCinsert_bun (ga_a:void)<-(a:bat[:int,:void])(_70:int)(fa_a:void)
    mil.line("a.insert(int(nil),void(nil));");	# 22 MILline (_71:void)<-(_72:str)
    ha_a := calc.int(nil);	# 23 CALCnil2int (ha_a:int)<-(_60:void)
    ia_a := calc.void(nil);	# 24 CALCnil2void (ia_a:void)<-(_60:void)
    ja_a := bat.insert(a,ha_a,ia_a);	# 25 BKCinsert_bun (ja_a:void)<-(a:bat[:int,:void])(ha_a:int)(ia_a:void)
    mil.line("a.print();");	# 26 MILline (_76:void)<-(_64:str)
    ka_a := io.print(a);	# 27 IOprint_val (ka_a:int)<-(a:bat[:int,:void])
    mil.line("var b:= bat.new(void,int);");	# 28 MILline (_78:void)<-(_79:str)
    b := bat.new(:void,:int);	# 29 CMDBATnew (b:bat[:void,:int])<-(_81:void)(_82:int)
    mil.line("b.insert(void(nil),1);");	# 30 MILline (_83:void)<-(_84:str)
    la_a := calc.void(nil);	# 31 CALCnil2void (la_a:void)<-(_60:void)
    ma_a := bat.insert(b,la_a,1);	# 32 BKCinsert_bun (ma_a:void)<-(b:bat[:void,:int])(la_a:void)(_62:int)
    mil.line("b.print();");	# 33 MILline (_87:void)<-(_88:str)
    na_a := io.print(b);	# 34 IOprint_val (na_a:int)<-(b:bat[:void,:int])
    mil.line("b.insert(void(nil),2);");	# 35 MILline (_90:void)<-(_91:str)
    oa_a := calc.void(nil);	# 36 CALCnil2void (oa_a:void)<-(_93:void)
    pa_a := bat.insert(b,oa_a,2);	# 37 BKCinsert_bun (pa_a:void)<-(b:bat[:void,:int])(oa_a:void)(_70:int)
    mil.line("b.insert(void(nil),int(nil));");	# 38 MILline (_95:void)<-(_96:str)
    qa_a := calc.void(nil);	# 39 CALCnil2void (qa_a:void)<-(_93:void)
    ra_a := calc.int(nil);	# 40 CALCnil2int (ra_a:int)<-(_93:void)
    sa_a := bat.insert(b,qa_a,ra_a);	# 41 BKCinsert_bun (sa_a:void)<-(b:bat[:void,:int])(qa_a:void)(ra_a:int)
    mil.line("b.print();");	# 42 MILline (_100:void)<-(_88:str)
    ta_a := io.print(b);	# 43 IOprint_val (ta_a:int)<-(b:bat[:void,:int])
    mil.line("quit();");	# 44 MILline (_102:void)<-(_103:str)
    ua_a := clients.quit();	# 45 CLTquit (ua_a:void)
end main;	# 46  
#setoid(oid(20000000));
## test single column BATs\n
#a.insert(1,void(nil));
#a.print();
#-----------------#
# h	t	  # name
# int	void	  # type
#-----------------#
[ 1,	  nil	  ]
#a.insert(2,void(nil));
#a.insert(int(nil),void(nil));
#a.print();
#-----------------#
# h	t	  # name
# int	void	  # type
#-----------------#
[ 1,	  nil	  ]
[ 2,	  nil	  ]
[ nil,	  nil	  ]
#var b:= bbp.new(void,int);
#b.insert(void(nil),1);
#b.print();
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  1	  ]
#b.insert(void(nil),2);
#b.insert(void(nil),int(nil));
#b.print();
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  1	  ]
[ nil,	  2	  ]
[ nil,	  nil	  ]
#quit();

# 00:12:28 >  
# 00:12:28 >  Done.
# 00:12:28 >  

