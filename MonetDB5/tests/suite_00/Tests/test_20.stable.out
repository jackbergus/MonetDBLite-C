stdout of test 'test_20` in directory 'tests/suite_00` itself:


# 00:12:28 >  
# 00:12:28 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_20.mal </dev/null
# 00:12:28 >  

# MonetDB server v5.9.0, based on kernel v1.27.0
# Serving database 'mTests_tests_suite_00', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008- MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:30579/
function user.main():void;
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);
    ba_a := calc.setoid(aa_a);
#	io.print("# test single column BATs\n"); 
    a := bat.new(:int,:oid);
#	io.print("a.insert(1,oid(nil));"); 
    ca_a := calc.oid(nil);
    da_a := bat.insert(a,1,ca_a);
#	io.print("a.print();"); 
    ea_a := io.print(a);
#	io.print("a.insert(2,oid(nil));"); 
    fa_a := calc.oid(nil);
    ga_a := bat.insert(a,2,fa_a);
#	io.print("a.insert(int(nil),oid(nil));"); 
    ha_a := calc.int(nil);
    ia_a := calc.oid(nil);
    ja_a := bat.insert(a,ha_a,ia_a);
#	io.print("a.print();"); 
    ka_a := io.print(a);
#	io.print("var b:= bat.new(oid,int);"); 
    b := bat.new(:oid,:int);
#	io.print("b.insert(void(nil),1);"); 
    la_a := calc.oid(nil);
    ma_a := bat.insert(b,la_a,1);
#	io.print("b.print();"); 
    na_a := io.print(b);
#	io.print("b.insert(oid(nil),2);"); 
    oa_a := calc.oid(nil);
    pa_a := bat.insert(b,oa_a,2);
#	io.print("b.insert(void(nil),int(nil));"); 
    qa_a := calc.oid(nil);
    ra_a := calc.int(nil);
    sa_a := bat.insert(b,qa_a,ra_a);
#	io.print("b.print();"); 
    ta_a := io.print(b);
#	io.print("quit();"); 
    ua_a := clients.quit();
end main;
#-----------------#
# h	t	  # name
# int	void	  # type
#-----------------#
[ 1,	  nil	  ]
#a.insert(2,void(nil));
#a.insert(int(nil),void(nil));
#a.print();
#-----------------#
# h	t	  # name
# int	void	  # type
#-----------------#
[ 1,	  nil	  ]
[ 2,	  nil	  ]
[ nil,	  nil	  ]
#var b:= bbp.new(void,int);
#b.insert(void(nil),1);
#b.print();
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  1	  ]
#b.insert(void(nil),2);
#b.insert(void(nil),int(nil));
#b.print();
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  1	  ]
[ nil,	  2	  ]
[ nil,	  nil	  ]
#quit();

# 00:12:28 >  
# 00:12:28 >  Done.
# 00:12:28 >  

