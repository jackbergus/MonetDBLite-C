stdout of test 'test_65` in directory 'tests/suite_00` itself:


# 00:12:29 >  
# 00:12:29 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_65.mal </dev/null
# 00:12:29 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("#test sampling\n");
#	b := bbp.new(nil:int,nil:int);
#	mil.line("b.insert(1,15);");
#	ca_a := bat.insert(b,1,15);
#	mil.line("b.insert(2,4);");
#	da_a := bat.insert(b,2,4);
#	mil.line("b.insert(3,int(nil));");
#	ea_a := calc.int(nil);
#	fa_a := bat.insert(b,3,ea_a);
#	mil.line("b.insert(4,16);");
#	ga_a := bat.insert(b,4,16);
#	mil.line("b.insert(5,25);");
#	ha_a := bat.insert(b,5,25);
#	mil.line("b.insert(6,36);");
#	ia_a := bat.insert(b,6,36);
#	mil.line("b.insert(7,49);");
#	ja_a := bat.insert(b,7,49);
#	mil.line("b.insert(8,64);");
#	ka_a := bat.insert(b,8,64);
#	mil.line("b.insert(9,int(nil));");
#	la_a := calc.int(nil);
#	ma_a := bat.insert(b,9,la_a);
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(1).print(); io.printf(\"#~EndVariableOutput~#\\n\");");
#	na_a := io.printf("#~BeginVariableOutput~#\n");
#	oa_a := algebra.sample(b,1);
#	pa_a := io.print(oa_a);
#	qa_a := io.printf("#~EndVariableOutput~#\n");
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(1).print(); io.printf(\"#~EndVariableOutput~#\\n\");");
#	ra_a := io.printf("#~BeginVariableOutput~#\n");
#	sa_a := algebra.sample(b,1);
#	ta_a := io.print(sa_a);
#	ua_a := io.printf("#~EndVariableOutput~#\n");
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(9).print(); ioprintf(\"#~EndVariableOutput~#\\n\");");
#	va_a := io.printf("#~BeginVariableOutput~#\n");
#	wa_a := algebra.sample(b,9);
#	xa_a := io.print(wa_a);
#	ya_a := io.printf("#~EndVariableOutput~#\n");
#	mil.line("b.sample(0).print();");
#	ab_a := algebra.sample(b,0);
#	bb_a := io.print(ab_a);
#	mil.line("quit();");
#	cb_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  (_2:str)
#Predefined code segment 	# 3  (_3:str)
#The compiler can not guarantee an accurate compilation, 	# 4  (_4:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  (_5:str)
#A few guidelines to maximize usefullness. 	# 6  (_6:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  (_7:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  (_8:str)
#use the "mil_schema" for additional support routines 	# 9  (_9:str)
#	io.print("setoid(oid(20000000));"); 	# 10  (_10:str)
    aa_a := calc.oid(20000000);	# 11 CALCint2oid (aa_a:oid)<-(_12:int)
    ba_a := calc.setoid(aa_a);	# 12 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	io.print("#test sampling\n"); 	# 13  (_14:str)
    b := bat.new(:oid,nil:int);	# 14 CMDBATnew (b:bat[:oid,:int])<-(_16:oid)(_17:int)
    ca_a := bat.insert(b,1@0,15);	# 15 BKCinsert_bun (ca_a:void)<-(b:bat[:oid,:int])(_19:oid)(_20:int)
    da_a := bat.insert(b,2@0,4);	# 16 BKCinsert_bun (da_a:void)<-(b:bat[:oid,:int])(_22:oid)(_23:int)
    ea_a := calc.int(nil:void);	# 17 CALCnil2int (ea_a:int)<-(_25:void)
    fa_a := bat.insert(b,3@0,ea_a);	# 18 BKCinsert_bun (fa_a:void)<-(b:bat[:oid,:int])(_27:oid)(ea_a:int)
    ga_a := bat.insert(b,4@0,16);	# 19 BKCinsert_bun (ga_a:void)<-(b:bat[:oid,:int])(_29:oid)(_30:int)
    ia_a := bat.insert(b,6@0,36);	# 20 BKCinsert_bun (ia_a:void)<-(b:bat[:oid,:int])(_32:oid)(_33:int)
    ja_a := bat.insert(b,7@0,49);	# 21 BKCinsert_bun (ja_a:void)<-(b:bat[:oid,:int])(_35:oid)(_36:int)
    ka_a := bat.insert(b,8@0,64);	# 22 BKCinsert_bun (ka_a:void)<-(b:bat[:oid,:int])(_38:oid)(_39:int)
    la_a := calc.int(nil:void);	# 23 CALCnil2int (la_a:int)<-(_25:void)
    ma_a := bat.insert(b,9@0,la_a);	# 24 BKCinsert_bun (ma_a:void)<-(b:bat[:oid,:int])(_42:oid)(la_a:int)
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(1).print(); io.printf(\"#~EndVariableOutput~#\\n\");"); 	# 25  (_43:str)
    na_a := io.printf("#~BeginVariableOutput~#\n");	# 26 IOprint_str (na_a:void)<-(_45:str)
    oa_a := algebra.sample(b,1);	# 27 ALGsample (oa_a:bat[:oid,:int])<-(b:bat[:oid,:int])(_47:int)
    pa_a := io.print(oa_a);	# 28 IOprint_val (pa_a:void)<-(oa_a:bat[:oid,:int])
    qa_a := io.printf("#~EndVariableOutput~#\n");	# 29 IOprint_str (qa_a:void)<-(_50:str)
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(1).print(); io.printf(\"#~EndVariableOutput~#\\n\");"); 	# 30  (_43:str)
    ra_a := io.printf("#~BeginVariableOutput~#\n");	# 31 IOprint_str (ra_a:void)<-(_45:str)
    sa_a := algebra.sample(b,1);	# 32 ALGsample (sa_a:bat[:oid,:int])<-(b:bat[:oid,:int])(_47:int)
    ta_a := io.print(sa_a);	# 33 IOprint_val (ta_a:void)<-(sa_a:bat[:oid,:int])
    ua_a := io.printf("#~EndVariableOutput~#\n");	# 34 IOprint_str (ua_a:void)<-(_50:str)
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(9).print(); ioprintf(\"#~EndVariableOutput~#\\n\");"); 	# 35  (_55:str)
    va_a := io.printf("#~BeginVariableOutput~#\n");	# 36 IOprint_str (va_a:void)<-(_45:str)
    wa_a := algebra.sample(b,9);	# 37 ALGsample (wa_a:bat[:oid,:int])<-(b:bat[:oid,:int])(_59:int)
    xa_a := io.print(wa_a);	# 38 IOprint_val (xa_a:void)<-(wa_a:bat[:oid,:int])
    ya_a := io.printf("#~EndVariableOutput~#\n");	# 39 IOprint_str (ya_a:void)<-(_50:str)
#	io.print("b.sample(0).print();"); 	# 40  (_62:str)
    ab_a := algebra.sample(b,0);	# 41 ALGsample (ab_a:bat[:oid,:int])<-(b:bat[:oid,:int])(_64:int)
    bb_a := io.print(ab_a);	# 42 IOprint_val (bb_a:void)<-(ab_a:bat[:oid,:int])
#	io.print("quit();"); 	# 43  (_65:str)
    cb_a := clients.quit();	# 44 CLTquit (cb_a:void)
end main;	# 45  
#~BeginVariableOutput~#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3@0,	  nil	  ]
#~EndVariableOutput~#
#printf(\"#~BeginVariableOutput~#\\n\"); b.sample(1).print(); io.printf(\"#~EndVariableOutput~#\\n\");
#~BeginVariableOutput~#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 8@0,	  64	  ]
#~EndVariableOutput~#
#printf(\"#~BeginVariableOutput~#\\n\"); b.sample(9).print(); ioprintf(\"#~EndVariableOutput~#\\n\");
#~BeginVariableOutput~#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1@0,	  15	  ]
[ 2@0,	  4	  ]
[ 3@0,	  nil	  ]
[ 4@0,	  16	  ]
[ 6@0,	  36	  ]
[ 7@0,	  49	  ]
[ 8@0,	  64	  ]
[ 9@0,	  nil	  ]
#~EndVariableOutput~#
#b.sample(0).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
#quit();

# 00:12:29 >  
# 00:12:29 >  Done.
# 00:12:29 >  

