stdout of test 'test_65` in directory 'tests/suite_00` itself:


# 00:12:29 >  
# 00:12:29 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_65.mal </dev/null
# 00:12:29 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("#test sampling\n");
#	b := bbp.new(nil:int,nil:int);
#	mil.line("b.insert(1,15);");
#	ca_a := bat.insert(b,1,15);
#	mil.line("b.insert(2,4);");
#	da_a := bat.insert(b,2,4);
#	mil.line("b.insert(3,int(nil));");
#	ea_a := calc.int(nil);
#	fa_a := bat.insert(b,3,ea_a);
#	mil.line("b.insert(4,16);");
#	ga_a := bat.insert(b,4,16);
#	mil.line("b.insert(5,25);");
#	ha_a := bat.insert(b,5,25);
#	mil.line("b.insert(6,36);");
#	ia_a := bat.insert(b,6,36);
#	mil.line("b.insert(7,49);");
#	ja_a := bat.insert(b,7,49);
#	mil.line("b.insert(8,64);");
#	ka_a := bat.insert(b,8,64);
#	mil.line("b.insert(9,int(nil));");
#	la_a := calc.int(nil);
#	ma_a := bat.insert(b,9,la_a);
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(1).print(); io.printf(\"#~EndVariableOutput~#\\n\");");
#	na_a := io.printf("#~BeginVariableOutput~#\n");
#	oa_a := algebra.sample(b,1);
#	pa_a := io.print(oa_a);
#	qa_a := io.printf("#~EndVariableOutput~#\n");
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(1).print(); io.printf(\"#~EndVariableOutput~#\\n\");");
#	ra_a := io.printf("#~BeginVariableOutput~#\n");
#	sa_a := algebra.sample(b,1);
#	ta_a := io.print(sa_a);
#	ua_a := io.printf("#~EndVariableOutput~#\n");
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(9).print(); ioprintf(\"#~EndVariableOutput~#\\n\");");
#	va_a := io.printf("#~BeginVariableOutput~#\n");
#	wa_a := algebra.sample(b,9);
#	xa_a := io.print(wa_a);
#	ya_a := io.printf("#~EndVariableOutput~#\n");
#	mil.line("b.sample(0).print();");
#	ab_a := algebra.sample(b,0);
#	bb_a := io.print(ab_a);
#	mil.line("quit();");
#	cb_a := clients.quit();
#
function user.main():void;              #  0 main:void := user.main() {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         # 11 aa_a:oid := CALCint2oid(_12:int) 
    ba_a := calc.setoid(aa_a);          # 12 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("#test sampling\n"); 
    b := bat.new(:oid,nil:int);         # 14 b:bat[:oid,:int] := CMDBATnew(_16:oid, _17:int) {G}
    ca_a := bat.insert(b,1@0,15);       # 15 ca_a:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _19:oid, _20:int) {G}
    da_a := bat.insert(b,2@0,4);        # 16 da_a:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _22:oid, _23:int) {G}
    ea_a := calc.int(nil:void);         # 17 ea_a:int := CALCnil2int(_25:void) 
    fa_a := bat.insert(b,3@0,ea_a);     # 18 fa_a:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _27:oid, ea_a:int) {G}
    ga_a := bat.insert(b,4@0,16);       # 19 ga_a:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _29:oid, _30:int) {G}
    ia_a := bat.insert(b,6@0,36);       # 20 ia_a:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _32:oid, _33:int) {G}
    ja_a := bat.insert(b,7@0,49);       # 21 ja_a:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _35:oid, _36:int) {G}
    ka_a := bat.insert(b,8@0,64);       # 22 ka_a:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _38:oid, _39:int) {G}
    la_a := calc.int(nil:void);         # 23 la_a:int := CALCnil2int(_25:void) 
    ma_a := bat.insert(b,9@0,la_a);     # 24 ma_a:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _42:oid, la_a:int) {G}
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(1).print(); io.printf(\"#~EndVariableOutput~#\\n\");"); 
    na_a := io.printf("#~BeginVariableOutput~#\n");# 26 na_a:void := IOprint_str(_45:str) 
    oa_a := algebra.sample(b,1);        # 27 oa_a:bat[:oid,:int] := ALGsample(b:bat[:oid,:int], _47:int) {G}
    pa_a := io.print(oa_a);             # 28 pa_a:void := IOprint_val(oa_a:bat[:oid,:int]) 
    qa_a := io.printf("#~EndVariableOutput~#\n");# 29 qa_a:void := IOprint_str(_50:str) 
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(1).print(); io.printf(\"#~EndVariableOutput~#\\n\");"); 
    ra_a := io.printf("#~BeginVariableOutput~#\n");# 31 ra_a:void := IOprint_str(_45:str) 
    sa_a := algebra.sample(b,1);        # 32 sa_a:bat[:oid,:int] := ALGsample(b:bat[:oid,:int], _47:int) {G}
    ta_a := io.print(sa_a);             # 33 ta_a:void := IOprint_val(sa_a:bat[:oid,:int]) 
    ua_a := io.printf("#~EndVariableOutput~#\n");# 34 ua_a:void := IOprint_str(_50:str) 
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(9).print(); ioprintf(\"#~EndVariableOutput~#\\n\");"); 
    va_a := io.printf("#~BeginVariableOutput~#\n");# 36 va_a:void := IOprint_str(_45:str) 
    wa_a := algebra.sample(b,9);        # 37 wa_a:bat[:oid,:int] := ALGsample(b:bat[:oid,:int], _59:int) {G}
    xa_a := io.print(wa_a);             # 38 xa_a:void := IOprint_val(wa_a:bat[:oid,:int]) 
    ya_a := io.printf("#~EndVariableOutput~#\n");# 39 ya_a:void := IOprint_str(_50:str) 
#	io.print("b.sample(0).print();"); 
    ab_a := algebra.sample(b,0);        # 41 ab_a:bat[:oid,:int] := ALGsample(b:bat[:oid,:int], _64:int) {G}
    bb_a := io.print(ab_a);             # 42 bb_a:void := IOprint_val(ab_a:bat[:oid,:int]) 
#	io.print("quit();"); 
    cb_a := clients.quit();             # 44 cb_a:void := CLTquit() 
end main;	# 45  
#~BeginVariableOutput~#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 6@0,	  36	  ]
#~EndVariableOutput~#
#printf(\"#~BeginVariableOutput~#\\n\"); b.sample(1).print(); io.printf(\"#~EndVariableOutput~#\\n\");
#~BeginVariableOutput~#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 8@0,	  64	  ]
#~EndVariableOutput~#
#printf(\"#~BeginVariableOutput~#\\n\"); b.sample(9).print(); ioprintf(\"#~EndVariableOutput~#\\n\");
#~BeginVariableOutput~#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1@0,	  15	  ]
[ 2@0,	  4	  ]
[ 3@0,	  nil	  ]
[ 4@0,	  16	  ]
[ 6@0,	  36	  ]
[ 7@0,	  49	  ]
[ 8@0,	  64	  ]
[ 9@0,	  nil	  ]
#~EndVariableOutput~#
#b.sample(0).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
#quit();

# 00:12:29 >  
# 00:12:29 >  Done.
# 00:12:29 >  

