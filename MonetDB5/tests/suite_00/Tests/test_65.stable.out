stdout of test 'test_65` in directory 'tests/suite_00` itself:


# 00:12:29 >  
# 00:12:29 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_65.mal </dev/null
# 00:12:29 >  

# MonetDB server v5.9.0, based on kernel v1.27.0
# Serving database 'mTests_tests_suite_00', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008- MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:30579/
function user.main():void;
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);
    ba_a := calc.setoid(aa_a);
#	io.print("#test sampling\n"); 
    b := bat.new(:oid,nil:int);
    ca_a := bat.insert(b,1@0,15);
    da_a := bat.insert(b,2@0,4);
    ea_a := calc.int(nil);
    fa_a := bat.insert(b,3@0,ea_a);
    ga_a := bat.insert(b,4@0,16);
    ia_a := bat.insert(b,6@0,36);
    ja_a := bat.insert(b,7@0,49);
    ka_a := bat.insert(b,8@0,64);
    la_a := calc.int(nil);
    ma_a := bat.insert(b,9@0,la_a);
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(1).print(); io.printf(\"#~EndVariableOutput~#\\n\");"); 
    na_a := io.printf("#~BeginVariableOutput~#\n");
    oa_a := algebra.sample(b,1);
    pa_a := io.print(oa_a);
    qa_a := io.printf("#~EndVariableOutput~#\n");
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(1).print(); io.printf(\"#~EndVariableOutput~#\\n\");"); 
    ra_a := io.printf("#~BeginVariableOutput~#\n");
    sa_a := algebra.sample(b,1);
    ta_a := io.print(sa_a);
    ua_a := io.printf("#~EndVariableOutput~#\n");
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); b.sample(9).print(); ioprintf(\"#~EndVariableOutput~#\\n\");"); 
    va_a := io.printf("#~BeginVariableOutput~#\n");
    wa_a := algebra.sample(b,9);
    xa_a := io.print(wa_a);
    ya_a := io.printf("#~EndVariableOutput~#\n");
#	io.print("b.sample(0).print();"); 
    ab_a := algebra.sample(b,0);
    bb_a := io.print(ab_a);
#	io.print("quit();"); 
    cb_a := clients.quit();
end main;
#~BeginVariableOutput~#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 4@0,	  16	  ]
#~EndVariableOutput~#
#printf(\"#~BeginVariableOutput~#\\n\"); b.sample(1).print(); io.printf(\"#~EndVariableOutput~#\\n\");
#~BeginVariableOutput~#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2@0,	  4	  ]
#~EndVariableOutput~#
#printf(\"#~BeginVariableOutput~#\\n\"); b.sample(9).print(); ioprintf(\"#~EndVariableOutput~#\\n\");
#~BeginVariableOutput~#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1@0,	  15	  ]
[ 2@0,	  4	  ]
[ 3@0,	  nil	  ]
[ 4@0,	  16	  ]
[ 6@0,	  36	  ]
[ 7@0,	  49	  ]
[ 8@0,	  64	  ]
[ 9@0,	  nil	  ]
#~EndVariableOutput~#
#b.sample(0).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
#quit();

# 00:12:29 >  
# 00:12:29 >  Done.
# 00:12:29 >  

