# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	io.print("setoid(oid(20000000));");
	aa_a := calc.oid(20000000);
	ba_a := calc.setoid(aa_a);
#	io.print("#This collection of examples is geared at the support\n");
#	io.print("#of the data mining tool\n");
#	io.print("var b:= bat.new(int,int);");
	b := bat.new(nil:int,nil:int);
#	io.print("b.insert(1,15);");
	ca_a := bat.insert(b,1,15);
#	io.print("b.insert(2,15);");
	da_a := bat.insert(b,2,15);
#	io.print("b.sum().print();");
	ea_a := aggr.sum(b);
	fa_a := io.print(ea_a);
#	io.print("b.insert(3,int(nil));");
	ga_a := calc.int(nil);
	ha_a := bat.insert(b,3,ga_a);
#	io.print("b.sum().print();");
	ia_a := aggr.sum(b);
	ja_a := io.print(ia_a);
#	io.print("b.insert(4,15);");
	ka_a := bat.insert(b,4,15);
#	io.print("b.insert(5,25);");
	la_a := bat.insert(b,5,25);
#	io.print("b.insert(6,36);");
	ma_a := bat.insert(b,6,36);
#	io.print("b.insert(7,49);");
	na_a := bat.insert(b,7,49);
#	io.print("b.insert(8,64);");
	oa_a := bat.insert(b,8,64);
#	io.print("b.insert(9,int(nil));");
	pa_a := calc.int(nil);
	qa_a := bat.insert(b,9,pa_a);
#	io.print("var t:= b.histogram();");
	t := aggr.histogram(b);
#	io.print("t.print();");
	ra_a := io.print(t);
#	io.print("commit();");
	sa_a := transaction.commit();
#	io.print("var s:= bat.new(int,str);");
	s := bat.new(nil:int,nil:str);
#	io.print("insert(s,1,\"hello\");");
	ta_a := bat.insert(s,1,"hello");
#	io.print("insert(s,2,\"hello\");");
	ua_a := bat.insert(s,2,"hello");
#	io.print("insert(s,3,\"hello\");");
	va_a := bat.insert(s,3,"hello");
#	io.print("insert(s,4,\"dello\");");
	wa_a := bat.insert(s,4,"dello");
#	io.print("insert(s,5,\"eello\");");
	xa_a := bat.insert(s,5,"eello");
#	io.print("insert(s,6,\"fello\");");
	ya_a := bat.insert(s,6,"fello");
#	io.print("insert(s,7,\"fello\");");
	ab_a := bat.insert(s,7,"fello");
#	io.print("insert(s,8,\"fello\");");
	bb_a := bat.insert(s,8,"fello");
#	io.print("var t2:= s.histogram();");
	t2 := aggr.histogram(s);
#	io.print("t2.print();");
	cb_a := io.print(t2);
#	io.print("#It requires a few additional routines\n");
	c := bat.new(nil:int,nil:int);
#	io.print("c.insert(1,15);");
	db_a := bat.insert(c,1,15);
#	io.print("c.insert(2,15);");
	eb_a := bat.insert(c,2,15);
#	io.print("c.insert(3,int(nil));");
	fb_a := calc.int(nil);
	gb_a := bat.insert(c,3,fb_a);
#	io.print("c.insert(4,0);");
	hb_a := bat.insert(c,4,0);
#	io.print("c.insert(5,30);");
	ib_a := bat.insert(c,5,30);
#	io.print("c.print();");
	jb_a := io.print(c);
#	io.print("quit();");
	nb_a := clients.quit();
