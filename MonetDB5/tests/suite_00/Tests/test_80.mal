# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	io.print("setoid(oid(20000000));");
	aa_a := calc.oid(20000000);
	ba_a := calc.setoid(aa_a);
#	io.print("# Testing key and set constraints ;\n");
	b := bat.new(nil:int,nil:int);
#	io.print("b.key(true);");
	ca_a := bat.setKey(b,true);
#	io.print("insert(b,1,2);");
	da_a := bat.insert(b,1,2);
#	io.print("insert(b,2,2);");
	ea_a := bat.insert(b,2,2);
#	io.print("print(b);");
	fa_a := io.print(b);
#	io.print("insert(b,1,3);");
	ga_a := bat.insert(b,1,3);
#	io.print("print(b);");
	ha_a := io.print(b);
#	io.print("insert(b,2,4);");
	ia_a := bat.insert(b,2,4);
#	io.print("print(b);");
	ja_a := io.print(b);
#	io.print("var c:= bat.new(int,int);");
	c := bat.new(nil:int,nil:int);
#	io.print("set(c,true);");
	ka_a := bat.setSet(c,true);
#	io.print("insert(c,1,2);");
	la_a := bat.insert(c,1,2);
#	io.print("insert(c,2,2);");
	ma_a := bat.insert(c,2,2);
#	io.print("print(c);");
	na_a := io.print(c);
#	io.print("insert(c,1,2);");
	oa_a := bat.insert(c,1,2);
#	io.print("print(c);");
	pa_a := io.print(c);
#	io.print("insert(c,2,2);");
	qa_a := bat.insert(c,2,2);
#	io.print("print(c);");
	ra_a := io.print(c);
#	io.print("quit();");
	sa_a := clients.quit();
#Identifer 'key' mapped to 'bat.setKey'
#Identifer 'set' mapped to 'bat.setSet'
