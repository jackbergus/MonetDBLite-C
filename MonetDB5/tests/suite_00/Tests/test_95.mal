# Monet Mil to Mal compiler
include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
	mil.line("setoid(oid(20000000));");
	aa_a := calc.oid(20000000);
	ba_a := calc.setoid(aa_a);
	mil.line("# test the new set operations\n");
	mil.line("var b := bat.new(int,int);");
	b := bat.new(nil:int,nil:int);
	mil.line("var c := bat.new(int,int);");
	c := bat.new(nil:int,nil:int);
	mil.line("b.insert(3,5);");
	ca_a := bat.insert(b,3,5);
	mil.line("b.insert(3,6);");
	da_a := bat.insert(b,3,6);
	mil.line("b.insert(4,5);");
	ea_a := bat.insert(b,4,5);
	mil.line("b.insert(4,6);");
	fa_a := bat.insert(b,4,6);
	mil.line("b.insert(8,10);");
	ga_a := bat.insert(b,8,10);
	mil.line("b.insert(8,11);");
	ha_a := bat.insert(b,8,11);
	mil.line("b.insert(9,10);");
	ia_a := bat.insert(b,9,10);
	mil.line("b.insert(9,11);");
	ja_a := bat.insert(b,9,11);
	mil.line("b.insert(9,11);");
	ka_a := bat.insert(b,9,11);
	mil.line("c.insert(3,10);");
	la_a := bat.insert(c,3,10);
	mil.line("c.insert(3,5);");
	ma_a := bat.insert(c,3,5);
	mil.line("c.insert(8,10);");
	na_a := bat.insert(c,8,10);
	mil.line("c.insert(8,5);");
	oa_a := bat.insert(c,8,5);
	mil.line("b.sunique().print();");
	pa_a := algebra.sunique(b);
	qa_a := io.print(pa_a);
	mil.line("b.kunique().print();");
	ra_a := algebra. kunique(b);
	sa_a := io.print(ra_a);
	mil.line("sintersect(c,b).print();");
	ta_a := algebra.sintersect(c,b);
	ua_a := io.print(ta_a);
	mil.line("kintersect(c,b).print();");
	va_a := algebra.kintersect(c,b);
	wa_a := io.print(va_a);
	mil.line("kintersect(b,c).print();");
	xa_a := algebra.kintersect(b,c);
	ya_a := io.print(xa_a);
	mil.line("sdiff(c,b).print();");
	ab_a := algebra.sdiff(c,b);
	bb_a := io.print(ab_a);
	mil.line("kdiff(b,c).print();");
	cb_a := algebra.kdiff(b,c);
	db_a := io.print(cb_a);
	mil.line("sdiff(b,c).print();");
	eb_a := algebra.sdiff(b,c);
	fb_a := io.print(eb_a);
	mil.line("kdiff(b,c).print();");
	gb_a := algebra.kdiff(b,c);
	hb_a := io.print(gb_a);
	mil.line("sunion(c,b).print();");
	ib_a := algebra.sunion(c,b);
	jb_a := io.print(ib_a);
	mil.line("kunion(c,b).print();");
	kb_a := algebra.kunion(c,b);
	lb_a := io.print(kb_a);
	mil.line("kunion(b,c).print();");
	mb_a := algebra.kunion(b,c);
	nb_a := io.print(mb_a);
	mil.line("b.insert(0,0);");
	ob_a := bat.insert(b,0,0);
	mil.line("c.insert(0,0);");
	pb_a := bat.insert(c,0,0);
	mil.line("b.sunique().print();");
	qb_a := algebra.sunique(b);
	rb_a := io.print(qb_a);
	mil.line("b.kunique().print();");
	sb_a := algebra. kunique(b);
	tb_a := io.print(sb_a);
	mil.line("sintersect(c,b).print();");
	ub_a := algebra.sintersect(c,b);
	vb_a := io.print(ub_a);
	mil.line("kintersect(c,b).print();");
	wb_a := algebra.kintersect(c,b);
	xb_a := io.print(wb_a);
	mil.line("kintersect(b,c).print();");
	yb_a := algebra.kintersect(b,c);
	ac_a := io.print(yb_a);
	mil.line("sdiff(c,b).print();");
	bc_a := algebra.sdiff(c,b);
	cc_a := io.print(bc_a);
	mil.line("kdiff(b,c).print();");
	dc_a := algebra.kdiff(b,c);
	ec_a := io.print(dc_a);
	mil.line("sdiff(b,c).print();");
	fc_a := algebra.sdiff(b,c);
	gc_a := io.print(fc_a);
	mil.line("kdiff(b,c).print();");
	hc_a := algebra.kdiff(b,c);
	ic_a := io.print(hc_a);
	mil.line("sunion(c,b).print();");
	jc_a := algebra.sunion(c,b);
	kc_a := io.print(jc_a);
	mil.line("kunion(c,b).print();");
	lc_a := algebra.kunion(c,b);
	mc_a := io.print(lc_a);
	mil.line("kunion(b,c).print();");
	nc_a := algebra.kunion(b,c);
	oc_a := io.print(nc_a);
	mil.line("quit();");
	pc_a := clients.quit();
