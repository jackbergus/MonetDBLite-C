stdout of test 'test_10` in directory 'tests/suite_00` itself:


# 00:12:28 >  
# 00:12:28 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_10.mal </dev/null
# 00:12:28 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("# Sorting activities\n");
#	mil.line("# left->right shift + left boundary;\n");
#	s := bbp.new(nil:int,nil:int);
#	mil.line("insert(s,5,5);insert(s,3,3);insert(s,4,2);insert(s,2,1);");
#	ca_a := bat.insert(s,5,5);
#	da_a := bat.insert(s,3,3);
#	ea_a := bat.insert(s,4,2);
#	fa_a := bat.insert(s,2,1);
#	mil.line("insert(s,1,1);insert(s,4,2); bat.insert(s,4,3);");
#	ga_a := bat.insert(s,1,1);
#	ha_a := bat.insert(s,4,2);
#	ia_a := bat.insert(s,4,3);
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\");");
#	ja_a := io.printf("#~BeginVariableOutput~#\n");
#	mil.line("sort(s).print();");
#	ka_a := algebra.sortH(s);
#	la_a := io.print(ka_a);
#	mil.line("printf(\"#~EndVariableOutput~#\\n\");");
#	ma_a := io.printf("#~EndVariableOutput~#\n");
#	mil.line("sortHT(s).print();");
#	na_a := algebra.sortHT(s);
#	oa_a := io.print(na_a);
#	mil.line("sortHT(s).print();");
#	na := algebra.sortHT(s);
#	oa_a := io.print(na);
#	mil.line("# right->left shift + right boundary;\n");
#	s := bbp.new(nil:int,nil:int);
#	mil.line("insert(s,2,1);insert(s,4,1); bat.insert(s,3,1); insert(s,5,1);");
#	pa_a := bat.insert(s,2,1);
#	qa_a := bat.insert(s,4,1);
#	ra_a := bat.insert(s,3,1);
#	sa_a := bat.insert(s,5,1);
#	mil.line("insert(s,6,1);insert(s,4,2);insert(s,1,1);");
#	ta_a := bat.insert(s,6,1);
#	ua_a := bat.insert(s,4,2);
#	va_a := bat.insert(s,1,1);
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\");");
#	wa_a := io.printf("#~BeginVariableOutput~#\n");
#	mil.line("sort(s).print();");
#	xa_a := algebra.sortH(s);
#	ya_a := io.print(xa_a);
#	mil.line("printf(\"#~EndVariableOutput~#\\n\");");
#	ab_a := io.printf("#~EndVariableOutput~#\n");
#	mil.line("sortHT(s).print();");
#	bb_a := algebra.sortHT(s);
#	cb_a := io.print(bb_a);
#	mil.line("quit();");
#	db_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  (_31:str)
#Predefined code segment 	# 2  (_32:str)
#The compiler can not guarantee an accurate compilation, 	# 3  (_33:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  (_34:str)
#A few guidelines to maximize usefullness. 	# 5  (_35:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  (_36:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  (_37:str)
#use the "mil_schema" for additional support routines 	# 8  (_38:str)
    mil.line("setoid(oid(20000000));");	# 9 MILline (_39:void)<-(_40:str)
    aa_a := calc.oid(20000000);	# 10 CALCint2oid (aa_a:oid)<-(_42:int)
    ba_a := calc.setoid(aa_a);	# 11 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("# Sorting activities\n");	# 12 MILline (_44:void)<-(_45:str)
    mil.line("# left->right shift + left boundary;\n");	# 13 MILline (_46:void)<-(_47:str)
    s := bat.new(nil:int,nil:int);	# 14 CMDBATnew (s:bat[:int,:int])<-(_49:int)(_49:int)
    mil.line("insert(s,5,5);insert(s,3,3);insert(s,4,2);insert(s,2,1);");	# 15 MILline (_50:void)<-(_51:str)
    ca_a := bat.insert(s,5,5);	# 16 BKCinsert_bun_int_int (ca_a:void)<-(s:bat[:int,:int])(_53:int)(_53:int)
    da_a := bat.insert(s,3,3);	# 17 BKCinsert_bun_int_int (da_a:void)<-(s:bat[:int,:int])(_55:int)(_55:int)
    ea_a := bat.insert(s,4,2);	# 18 BKCinsert_bun_int_int (ea_a:void)<-(s:bat[:int,:int])(_57:int)(_58:int)
    fa_a := bat.insert(s,2,1);	# 19 BKCinsert_bun_int_int (fa_a:void)<-(s:bat[:int,:int])(_58:int)(_60:int)
    mil.line("insert(s,1,1);insert(s,4,2); bat.insert(s,4,3);");	# 20 MILline (_61:void)<-(_62:str)
    ga_a := bat.insert(s,1,1);	# 21 BKCinsert_bun_int_int (ga_a:void)<-(s:bat[:int,:int])(_60:int)(_60:int)
    ha_a := bat.insert(s,4,2);	# 22 BKCinsert_bun_int_int (ha_a:void)<-(s:bat[:int,:int])(_57:int)(_58:int)
    ia_a := bat.insert(s,4,3);	# 23 BKCinsert_bun_int_int (ia_a:void)<-(s:bat[:int,:int])(_57:int)(_55:int)
    mil.line("printf(\"#~BeginVariableOutput~#\\n\");");	# 24 MILline (_66:void)<-(_67:str)
    ja_a := io.printf("#~BeginVariableOutput~#\n");	# 25 IOprint_str (ja_a:int)<-(_69:str)
    mil.line("sort(s).print();");	# 26 MILline (_70:void)<-(_71:str)
    ka_a := algebra.sort(s);	# 27 ALGtsort (ka_a:bat[:int,:int])<-(s:bat[:int,:int])
    la_a := io.print(ka_a);	# 28 IOprint_val (la_a:int)<-(ka_a:bat[:int,:int])
    mil.line("printf(\"#~EndVariableOutput~#\\n\");");	# 29 MILline (_74:void)<-(_75:str)
    ma_a := io.printf("#~EndVariableOutput~#\n");	# 30 IOprint_str (ma_a:int)<-(_77:str)
    mil.line("sortHT(s).print();");	# 31 MILline (_78:void)<-(_79:str)
    na_a := algebra.sortHT(s);	# 32 ALGhtsort (na_a:bat[:int,:int])<-(s:bat[:int,:int])
    oa_a := io.print(na_a);	# 33 IOprint_val (oa_a:int)<-(na_a:bat[:int,:int])
    mil.line("sortHT(s).print();");	# 34 MILline (_82:void)<-(_79:str)
    na := algebra.sortHT(s);	# 35 ALGhtsort (na:bat[:int,:int])<-(s:bat[:int,:int])
    oa_a := io.print(na);	# 36 IOprint_val (oa_a:int)<-(na:bat[:int,:int])
    mil.line("# right->left shift + right boundary;\n");	# 37 MILline (_84:void)<-(_85:str)
    s := bat.new(nil:int,nil:int);	# 38 CMDBATnew (s:bat[:int,:int])<-(_86:int)(_86:int)
    mil.line("insert(s,2,1);insert(s,4,1); bat.insert(s,3,1); insert(s,5,1);");	# 39 MILline (_87:void)<-(_88:str)
    pa_a := bat.insert(s,2,1);	# 40 BKCinsert_bun_int_int (pa_a:void)<-(s:bat[:int,:int])(_58:int)(_60:int)
    qa_a := bat.insert(s,4,1);	# 41 BKCinsert_bun_int_int (qa_a:void)<-(s:bat[:int,:int])(_57:int)(_60:int)
    ra_a := bat.insert(s,3,1);	# 42 BKCinsert_bun_int_int (ra_a:void)<-(s:bat[:int,:int])(_92:int)(_60:int)
    sa_a := bat.insert(s,5,1);	# 43 BKCinsert_bun_int_int (sa_a:void)<-(s:bat[:int,:int])(_94:int)(_60:int)
    mil.line("insert(s,6,1);insert(s,4,2);insert(s,1,1);");	# 44 MILline (_95:void)<-(_96:str)
    ta_a := bat.insert(s,6,1);	# 45 BKCinsert_bun_int_int (ta_a:void)<-(s:bat[:int,:int])(_98:int)(_99:int)
    ua_a := bat.insert(s,4,2);	# 46 BKCinsert_bun_int_int (ua_a:void)<-(s:bat[:int,:int])(_101:int)(_102:int)
    va_a := bat.insert(s,1,1);	# 47 BKCinsert_bun_int_int (va_a:void)<-(s:bat[:int,:int])(_99:int)(_99:int)
    mil.line("printf(\"#~BeginVariableOutput~#\\n\");");	# 48 MILline (_104:void)<-(_105:str)
    wa_a := io.printf("#~BeginVariableOutput~#\n");	# 49 IOprint_str (wa_a:int)<-(_107:str)
    mil.line("sort(s).print();");	# 50 MILline (_108:void)<-(_109:str)
    xa_a := algebra.sort(s);	# 51 ALGtsort (xa_a:bat[:int,:int])<-(s:bat[:int,:int])
    ya_a := io.print(xa_a);	# 52 IOprint_val (ya_a:int)<-(xa_a:bat[:int,:int])
    mil.line("printf(\"#~EndVariableOutput~#\\n\");");	# 53 MILline (_112:void)<-(_113:str)
    ab_a := io.printf("#~EndVariableOutput~#\n");	# 54 IOprint_str (ab_a:int)<-(_115:str)
    mil.line("sortHT(s).print();");	# 55 MILline (_116:void)<-(_117:str)
    bb_a := algebra.sortHT(s);	# 56 ALGhtsort (bb_a:bat[:int,:int])<-(s:bat[:int,:int])
    cb_a := io.print(bb_a);	# 57 IOprint_val (cb_a:int)<-(bb_a:bat[:int,:int])
    mil.line("quit();");	# 58 MILline (_120:void)<-(_121:str)
    db_a := clients.quit();	# 59 CLTquit (db_a:void)
end main;	# 60  
#setoid(oid(20000000));
## Sorting activities\n
## left->right shift + left boundary;\n
#insert(s,5,5);insert(s,3,3);insert(s,4,2);insert(s,2,1);
#insert(s,1,1);insert(s,4,2); bat.insert(s,4,3);
#printf(\"#~BeginVariableOutput~#\\n\");
#~BeginVariableOutput~#
#sort(s).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  1	  ]
[ 1,	  1	  ]
[ 4,	  2	  ]
[ 4,	  2	  ]
[ 3,	  3	  ]
[ 4,	  3	  ]
[ 5,	  5	  ]
#printf(\"#~EndVariableOutput~#\\n\");
#~EndVariableOutput~#
#sortHT(s).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 4,	  2	  ]
[ 4,	  2	  ]
[ 4,	  3	  ]
[ 5,	  5	  ]
#sortHT(s).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 4,	  2	  ]
[ 4,	  2	  ]
[ 4,	  3	  ]
[ 5,	  5	  ]
## right->left shift + right boundary;\n
#insert(s,2,1);insert(s,4,1); bat.insert(s,3,1); insert(s,5,1);
#insert(s,6,1);insert(s,4,2);insert(s,1,1);
#printf(\"#~BeginVariableOutput~#\\n\");
#~BeginVariableOutput~#
#sort(s).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 5,	  1	  ]
[ 4,	  1	  ]
[ 3,	  1	  ]
[ 2,	  1	  ]
[ 6,	  1	  ]
[ 1,	  1	  ]
[ 4,	  2	  ]
#printf("#~EndVariableOutput~#\n");
#~EndVariableOutput~#
#sortHT(s).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  1	  ]
[ 4,	  1	  ]
[ 4,	  2	  ]
[ 5,	  1	  ]
[ 6,	  1	  ]
#quit();

# 00:12:28 >  
# 00:12:28 >  Done.
# 00:12:28 >  

