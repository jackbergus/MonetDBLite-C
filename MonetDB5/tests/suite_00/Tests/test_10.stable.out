stdout of test 'test_10` in directory 'tests/suite_00` itself:


# 07:27:19 >  
# 07:27:19 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_10.mal < /dev/null
# 07:27:19 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:30579/
function user.main():void;
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);
    ba_a := calc.setoid(aa_a);
#	io.print("# Sorting activities\n"); 
#	io.print("# left->right shift + left boundary;\n"); 
    s := bat.new(nil:int,nil:int);
#	io.print("insert(s,5,5);insert(s,3,3);insert(s,4,2);insert(s,2,1);"); 
    ca_a := bat.insert(s,5,5);
    da_a := bat.insert(s,3,3);
    ea_a := bat.insert(s,4,2);
    fa_a := bat.insert(s,2,1);
#	io.print("insert(s,1,1);insert(s,4,2); bat.insert(s,4,3);"); 
    ga_a := bat.insert(s,1,1);
    ha_a := bat.insert(s,4,2);
    ia_a := bat.insert(s,4,3);
#	io.print("printf(\"#~BeginVariableOutput~#\\n\");"); 
    ja_a := io.printf("#~BeginVariableOutput~#\n");
#	io.print("sort(s).print();"); 
    ka_a := algebra.sort(s);
    la_a := io.print(ka_a);
#	io.print("printf(\"#~EndVariableOutput~#\\n\");"); 
    ma_a := io.printf("#~EndVariableOutput~#\n");
#	io.print("sortHT(s).print();"); 
    na_a := algebra.sortHT(s);
    oa_a := io.print(na_a);
#	io.print("sortHT(s).print();"); 
    na := algebra.sortHT(s);
    oa_a := io.print(na);
#	io.print("# right->left shift + right boundary;\n"); 
    s := bat.new(nil:int,nil:int);
#	io.print("insert(s,2,1);insert(s,4,1); bat.insert(s,3,1); insert(s,5,1);"); 
    pa_a := bat.insert(s,2,1);
    qa_a := bat.insert(s,4,1);
    ra_a := bat.insert(s,3,1);
    sa_a := bat.insert(s,5,1);
#	io.print("insert(s,6,1);insert(s,4,2);insert(s,1,1);"); 
    ta_a := bat.insert(s,6,1);
    ua_a := bat.insert(s,4,2);
    va_a := bat.insert(s,1,1);
#	io.print("printf(\"#~BeginVariableOutput~#\\n\");"); 
    wa_a := io.printf("#~BeginVariableOutput~#\n");
#	io.print("sort(s).print();"); 
    xa_a := algebra.sort(s);
    ya_a := io.print(xa_a);
#	io.print("printf(\"#~EndVariableOutput~#\\n\");"); 
    ab_a := io.printf("#~EndVariableOutput~#\n");
#	io.print("sortHT(s).print();"); 
    bb_a := algebra.sortHT(s);
    cb_a := io.print(bb_a);
#	io.print("quit();"); 
    db_a := clients.quit();
end main;
#~BeginVariableOutput~#
#-----------------#
# t	h	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 4,	  3	  ]
[ 4,	  2	  ]
[ 4,	  2	  ]
[ 5,	  5	  ]
#~EndVariableOutput~#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 4,	  2	  ]
[ 4,	  2	  ]
[ 4,	  3	  ]
[ 5,	  5	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 4,	  2	  ]
[ 4,	  2	  ]
[ 4,	  3	  ]
[ 5,	  5	  ]
#~BeginVariableOutput~#
#-----------------#
# t	h	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  1	  ]
[ 4,	  1	  ]
[ 4,	  2	  ]
[ 5,	  1	  ]
[ 6,	  1	  ]
#~EndVariableOutput~#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  1	  ]
[ 4,	  1	  ]
[ 4,	  2	  ]
[ 5,	  1	  ]
[ 6,	  1	  ]

# 07:27:19 >  
# 07:27:19 >  Done.
# 07:27:19 >  

