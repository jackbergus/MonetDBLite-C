stdout of test 'test_10` in directory 'tests/suite_00` itself:


# 07:27:19 >  
# 07:27:19 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_10.mal < /dev/null
# 07:27:19 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
##	mil.line("# Sorting activities\n");
##	mil.line("# left->right shift + left boundary;\n");
#	s := bat.new(nil:int,nil:int);
##	mil.line("insert(s,5,5);insert(s,3,3);insert(s,4,2);insert(s,2,1);");
#	ca_a := bat.insert(s,5,5);
#	da_a := bat.insert(s,3,3);
#	ea_a := bat.insert(s,4,2);
#	fa_a := bat.insert(s,2,1);
##	mil.line("insert(s,1,1);insert(s,4,2); bat.insert(s,4,3);");
#	ga_a := bat.insert(s,1,1);
#	ha_a := bat.insert(s,4,2);
#	ia_a := bat.insert(s,4,3);
##	mil.line("printf(\"#~BeginVariableOutput~#\\n\");");
#	ja_a := io.printf("#~BeginVariableOutput~#\n");
##	mil.line("sort(s).print();");
#	ka_a := algebra.sort(s);
#	la_a := io.print(ka_a);
##	mil.line("printf(\"#~EndVariableOutput~#\\n\");");
#	ma_a := io.printf("#~EndVariableOutput~#\n");
##	mil.line("sortHT(s).print();");
#	na_a := algebra.sortHT(s);
#	oa_a := io.print(na_a);
##	mil.line("sortHT(s).print();");
#	na := algebra.sortHT(s);
#	oa_a := io.print(na);
##	mil.line("# right->left shift + right boundary;\n");
#	s := bat.new(nil:int,nil:int);
##	mil.line("insert(s,2,1);insert(s,4,1); bat.insert(s,3,1); insert(s,5,1);");
#	pa_a := bat.insert(s,2,1);
#	qa_a := bat.insert(s,4,1);
#	ra_a := bat.insert(s,3,1);
#	sa_a := bat.insert(s,5,1);
##	mil.line("insert(s,6,1);insert(s,4,2);insert(s,1,1);");
#	ta_a := bat.insert(s,6,1);
#	ua_a := bat.insert(s,4,2);
#	va_a := bat.insert(s,1,1);
##	mil.line("printf(\"#~BeginVariableOutput~#\\n\");");
#	wa_a := io.printf("#~BeginVariableOutput~#\n");
##	mil.line("sort(s).print();");
#	xa_a := algebra.sort(s);
#	ya_a := io.print(xa_a);
##	mil.line("printf(\"#~EndVariableOutput~#\\n\");");
#	ab_a := io.printf("#~EndVariableOutput~#\n");
##	mil.line("sortHT(s).print();");
#	bb_a := algebra.sortHT(s);
#	cb_a := io.print(bb_a);
##	mil.line("quit();");
#	db_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
#include mil; 	# 2  (_2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 3  (_3:str)
#Predefined code segment 	# 4  (_4:str)
#The compiler can not guarantee an accurate compilation, 	# 5  (_5:str)
#because MIL unlike MAL is a dynamically typed language. 	# 6  (_6:str)
#A few guidelines to maximize usefullness. 	# 7  (_7:str)
#- make the type of variables explicit, in particular 'nil' 	# 8  (_8:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 9  (_9:str)
#use the "mil_schema" for additional support routines 	# 10  (_10:str)
#	mil.line("setoid(oid(20000000));"); 	# 11  (_11:str)
    aa_a := calc.oid(20000000);	# 12 CALCint2oid (aa_a:oid)<-(_13:int)
    ba_a := calc.setoid(aa_a);	# 13 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	mil.line("# Sorting activities\n"); 	# 14  (_15:str)
#	mil.line("# left->right shift + left boundary;\n"); 	# 15  (_16:str)
    s := bat.new(nil:int,nil:int);	# 16 CMDBATnew (s:bat[:int,:int])<-(_18:int)(_18:int)
#	mil.line("insert(s,5,5);insert(s,3,3);insert(s,4,2);insert(s,2,1);"); 	# 17  (_19:str)
    ca_a := bat.insert(s,5,5);	# 18 BKCinsert_bun (ca_a:void)<-(s:bat[:int,:int])(_21:int)(_21:int)
    da_a := bat.insert(s,3,3);	# 19 BKCinsert_bun (da_a:void)<-(s:bat[:int,:int])(_23:int)(_23:int)
    ea_a := bat.insert(s,4,2);	# 20 BKCinsert_bun (ea_a:void)<-(s:bat[:int,:int])(_25:int)(_26:int)
    fa_a := bat.insert(s,2,1);	# 21 BKCinsert_bun (fa_a:void)<-(s:bat[:int,:int])(_26:int)(_28:int)
#	mil.line("insert(s,1,1);insert(s,4,2); bat.insert(s,4,3);"); 	# 22  (_29:str)
    ga_a := bat.insert(s,1,1);	# 23 BKCinsert_bun (ga_a:void)<-(s:bat[:int,:int])(_28:int)(_28:int)
    ha_a := bat.insert(s,4,2);	# 24 BKCinsert_bun (ha_a:void)<-(s:bat[:int,:int])(_25:int)(_26:int)
    ia_a := bat.insert(s,4,3);	# 25 BKCinsert_bun (ia_a:void)<-(s:bat[:int,:int])(_25:int)(_23:int)
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\");"); 	# 26  (_33:str)
    ja_a := io.printf("#~BeginVariableOutput~#\n");	# 27 IOprint_str (ja_a:int)<-(_35:str)
#	mil.line("sort(s).print();"); 	# 28  (_36:str)
    ka_a := algebra.sort(s);	# 29 ALGhsort (ka_a:bat[:int,:int])<-(s:bat[:int,:int])
    la_a := io.print(ka_a);	# 30 IOprint_val (la_a:int)<-(ka_a:bat[:int,:int])
#	mil.line("printf(\"#~EndVariableOutput~#\\n\");"); 	# 31  (_39:str)
    ma_a := io.printf("#~EndVariableOutput~#\n");	# 32 IOprint_str (ma_a:int)<-(_41:str)
#	mil.line("sortHT(s).print();"); 	# 33  (_42:str)
    na_a := algebra.sortHT(s);	# 34 ALGhtsort (na_a:bat[:int,:int])<-(s:bat[:int,:int])
    oa_a := io.print(na_a);	# 35 IOprint_val (oa_a:int)<-(na_a:bat[:int,:int])
#	mil.line("sortHT(s).print();"); 	# 36  (_42:str)
    na := algebra.sortHT(s);	# 37 ALGhtsort (na:bat[:int,:int])<-(s:bat[:int,:int])
    oa_a := io.print(na);	# 38 IOprint_val (oa_a:int)<-(na:bat[:int,:int])
#	mil.line("# right->left shift + right boundary;\n"); 	# 39  (_46:str)
    s := bat.new(nil:int,nil:int);	# 40 CMDBATnew (s:bat[:int,:int])<-(_18:int)(_18:int)
#	mil.line("insert(s,2,1);insert(s,4,1); bat.insert(s,3,1); insert(s,5,1);"); 	# 41  (_47:str)
    pa_a := bat.insert(s,2,1);	# 42 BKCinsert_bun (pa_a:void)<-(s:bat[:int,:int])(_26:int)(_28:int)
    qa_a := bat.insert(s,4,1);	# 43 BKCinsert_bun (qa_a:void)<-(s:bat[:int,:int])(_25:int)(_28:int)
    ra_a := bat.insert(s,3,1);	# 44 BKCinsert_bun (ra_a:void)<-(s:bat[:int,:int])(_23:int)(_28:int)
    sa_a := bat.insert(s,5,1);	# 45 BKCinsert_bun (sa_a:void)<-(s:bat[:int,:int])(_21:int)(_28:int)
#	mil.line("insert(s,6,1);insert(s,4,2);insert(s,1,1);"); 	# 46  (_52:str)
    ta_a := bat.insert(s,6,1);	# 47 BKCinsert_bun (ta_a:void)<-(s:bat[:int,:int])(_54:int)(_28:int)
    ua_a := bat.insert(s,4,2);	# 48 BKCinsert_bun (ua_a:void)<-(s:bat[:int,:int])(_25:int)(_26:int)
    va_a := bat.insert(s,1,1);	# 49 BKCinsert_bun (va_a:void)<-(s:bat[:int,:int])(_28:int)(_28:int)
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\");"); 	# 50  (_33:str)
    wa_a := io.printf("#~BeginVariableOutput~#\n");	# 51 IOprint_str (wa_a:int)<-(_35:str)
#	mil.line("sort(s).print();"); 	# 52  (_36:str)
    xa_a := algebra.sort(s);	# 53 ALGhsort (xa_a:bat[:int,:int])<-(s:bat[:int,:int])
    ya_a := io.print(xa_a);	# 54 IOprint_val (ya_a:int)<-(xa_a:bat[:int,:int])
#	mil.line("printf(\"#~EndVariableOutput~#\\n\");"); 	# 55  (_39:str)
    ab_a := io.printf("#~EndVariableOutput~#\n");	# 56 IOprint_str (ab_a:int)<-(_41:str)
#	mil.line("sortHT(s).print();"); 	# 57  (_42:str)
    bb_a := algebra.sortHT(s);	# 58 ALGhtsort (bb_a:bat[:int,:int])<-(s:bat[:int,:int])
    cb_a := io.print(bb_a);	# 59 IOprint_val (cb_a:int)<-(bb_a:bat[:int,:int])
#	mil.line("quit();"); 	# 60  (_63:str)
    db_a := clients.quit();	# 61 CLTquitDefault (db_a:void)
end main;	# 62  
#~BeginVariableOutput~#
#-----------------#
# t	h	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 4,	  3	  ]
[ 4,	  2	  ]
[ 4,	  2	  ]
[ 5,	  5	  ]
#~EndVariableOutput~#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 4,	  2	  ]
[ 4,	  2	  ]
[ 4,	  3	  ]
[ 5,	  5	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 4,	  2	  ]
[ 4,	  2	  ]
[ 4,	  3	  ]
[ 5,	  5	  ]
#~BeginVariableOutput~#
#-----------------#
# t	h	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  1	  ]
[ 4,	  1	  ]
[ 4,	  2	  ]
[ 5,	  1	  ]
[ 6,	  1	  ]
#~EndVariableOutput~#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  1	  ]
[ 4,	  1	  ]
[ 4,	  2	  ]
[ 5,	  1	  ]
[ 6,	  1	  ]

# 07:27:19 >  
# 07:27:19 >  Done.
# 07:27:19 >  

