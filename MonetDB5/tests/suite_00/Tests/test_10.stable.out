stdout of test 'test_10` in directory 'tests/suite_00` itself:


# 07:27:19 >  
# 07:27:19 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_10.mal < /dev/null
# 07:27:19 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
##	mil.line("# Sorting activities\n");
##	mil.line("# left->right shift + left boundary;\n");
#	s := bat.new(nil:int,nil:int);
##	mil.line("insert(s,5,5);insert(s,3,3);insert(s,4,2);insert(s,2,1);");
#	ca_a := bat.insert(s,5,5);
#	da_a := bat.insert(s,3,3);
#	ea_a := bat.insert(s,4,2);
#	fa_a := bat.insert(s,2,1);
##	mil.line("insert(s,1,1);insert(s,4,2); bat.insert(s,4,3);");
#	ga_a := bat.insert(s,1,1);
#	ha_a := bat.insert(s,4,2);
#	ia_a := bat.insert(s,4,3);
##	mil.line("printf(\"#~BeginVariableOutput~#\\n\");");
#	ja_a := io.printf("#~BeginVariableOutput~#\n");
##	mil.line("sort(s).print();");
#	ka_a := algebra.sort(s);
#	la_a := io.print(ka_a);
##	mil.line("printf(\"#~EndVariableOutput~#\\n\");");
#	ma_a := io.printf("#~EndVariableOutput~#\n");
##	mil.line("sortHT(s).print();");
#	na_a := algebra.sortHT(s);
#	oa_a := io.print(na_a);
##	mil.line("sortHT(s).print();");
#	na := algebra.sortHT(s);
#	oa_a := io.print(na);
##	mil.line("# right->left shift + right boundary;\n");
#	s := bat.new(nil:int,nil:int);
##	mil.line("insert(s,2,1);insert(s,4,1); bat.insert(s,3,1); insert(s,5,1);");
#	pa_a := bat.insert(s,2,1);
#	qa_a := bat.insert(s,4,1);
#	ra_a := bat.insert(s,3,1);
#	sa_a := bat.insert(s,5,1);
##	mil.line("insert(s,6,1);insert(s,4,2);insert(s,1,1);");
#	ta_a := bat.insert(s,6,1);
#	ua_a := bat.insert(s,4,2);
#	va_a := bat.insert(s,1,1);
##	mil.line("printf(\"#~BeginVariableOutput~#\\n\");");
#	wa_a := io.printf("#~BeginVariableOutput~#\n");
##	mil.line("sort(s).print();");
#	xa_a := algebra.sort(s);
#	ya_a := io.print(xa_a);
##	mil.line("printf(\"#~EndVariableOutput~#\\n\");");
#	ab_a := io.printf("#~EndVariableOutput~#\n");
##	mil.line("sortHT(s).print();");
#	bb_a := algebra.sortHT(s);
#	cb_a := io.print(bb_a);
##	mil.line("quit();");
#	db_a := clients.quit();
#
function user.main():void;              #  0 main:void {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         # 11 aa_a:oid := CALCint2oid(_12:int) 
    ba_a := calc.setoid(aa_a);          # 12 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("# Sorting activities\n"); 
#	io.print("# left->right shift + left boundary;\n"); 
    s := bat.new(nil:int,nil:int);      # 15 s:bat[:int,:int] := CMDBATnew(_17:int, _17:int) {G}
#	io.print("insert(s,5,5);insert(s,3,3);insert(s,4,2);insert(s,2,1);"); 
    ca_a := bat.insert(s,5,5);          # 17 ca_a:void := BKCinsert_bun(s:bat[:int,:int], _20:int, _20:int) 
    da_a := bat.insert(s,3,3);          # 18 da_a:void := BKCinsert_bun(s:bat[:int,:int], _22:int, _22:int) 
    ea_a := bat.insert(s,4,2);          # 19 ea_a:void := BKCinsert_bun(s:bat[:int,:int], _24:int, _25:int) 
    fa_a := bat.insert(s,2,1);          # 20 fa_a:void := BKCinsert_bun(s:bat[:int,:int], _25:int, _27:int) 
#	io.print("insert(s,1,1);insert(s,4,2); bat.insert(s,4,3);"); 
    ga_a := bat.insert(s,1,1);          # 22 ga_a:void := BKCinsert_bun(s:bat[:int,:int], _27:int, _27:int) 
    ha_a := bat.insert(s,4,2);          # 23 ha_a:void := BKCinsert_bun(s:bat[:int,:int], _24:int, _25:int) 
    ia_a := bat.insert(s,4,3);          # 24 ia_a:void := BKCinsert_bun(s:bat[:int,:int], _24:int, _22:int) 
#	io.print("printf(\"#~BeginVariableOutput~#\\n\");"); 
    ja_a := io.printf("#~BeginVariableOutput~#\n");# 26 ja_a:void := IOprint_str(_34:str) 
#	io.print("sort(s).print();"); 
    ka_a := algebra.sort(s);            # 28 ka_a:bat[:int,:int] := ALGhsort(s:bat[:int,:int]) {G}
    la_a := io.print(ka_a);             # 29 la_a:void := IOprint_val(ka_a:bat[:int,:int]) 
#	io.print("printf(\"#~EndVariableOutput~#\\n\");"); 
    ma_a := io.printf("#~EndVariableOutput~#\n");# 31 ma_a:void := IOprint_str(_40:str) 
#	io.print("sortHT(s).print();"); 
    na_a := algebra.sortHT(s);          # 33 na_a:bat[:int,:int] := ALGhtsort(s:bat[:int,:int]) {G}
    oa_a := io.print(na_a);             # 34 oa_a:void := IOprint_val(na_a:bat[:int,:int]) 
#	io.print("sortHT(s).print();"); 
    na := algebra.sortHT(s);            # 36 na:bat[:int,:int] := ALGhtsort(s:bat[:int,:int]) {G}
    oa_a := io.print(na);               # 37 oa_a:void := IOprint_val(na:bat[:int,:int]) 
#	io.print("# right->left shift + right boundary;\n"); 
    s := bat.new(nil:int,nil:int);      # 39 s:bat[:int,:int] := CMDBATnew(_17:int, _17:int) {G}
#	io.print("insert(s,2,1);insert(s,4,1); bat.insert(s,3,1); insert(s,5,1);"); 
    pa_a := bat.insert(s,2,1);          # 41 pa_a:void := BKCinsert_bun(s:bat[:int,:int], _25:int, _27:int) 
    qa_a := bat.insert(s,4,1);          # 42 qa_a:void := BKCinsert_bun(s:bat[:int,:int], _24:int, _27:int) 
    ra_a := bat.insert(s,3,1);          # 43 ra_a:void := BKCinsert_bun(s:bat[:int,:int], _22:int, _27:int) 
    sa_a := bat.insert(s,5,1);          # 44 sa_a:void := BKCinsert_bun(s:bat[:int,:int], _20:int, _27:int) 
#	io.print("insert(s,6,1);insert(s,4,2);insert(s,1,1);"); 
    ta_a := bat.insert(s,6,1);          # 46 ta_a:void := BKCinsert_bun(s:bat[:int,:int], _54:int, _27:int) 
    ua_a := bat.insert(s,4,2);          # 47 ua_a:void := BKCinsert_bun(s:bat[:int,:int], _24:int, _25:int) 
    va_a := bat.insert(s,1,1);          # 48 va_a:void := BKCinsert_bun(s:bat[:int,:int], _27:int, _27:int) 
#	io.print("printf(\"#~BeginVariableOutput~#\\n\");"); 
    wa_a := io.printf("#~BeginVariableOutput~#\n");# 50 wa_a:void := IOprint_str(_34:str) 
#	io.print("sort(s).print();"); 
    xa_a := algebra.sort(s);            # 52 xa_a:bat[:int,:int] := ALGhsort(s:bat[:int,:int]) {G}
    ya_a := io.print(xa_a);             # 53 ya_a:void := IOprint_val(xa_a:bat[:int,:int]) 
#	io.print("printf(\"#~EndVariableOutput~#\\n\");"); 
    ab_a := io.printf("#~EndVariableOutput~#\n");# 55 ab_a:void := IOprint_str(_40:str) 
#	io.print("sortHT(s).print();"); 
    bb_a := algebra.sortHT(s);          # 57 bb_a:bat[:int,:int] := ALGhtsort(s:bat[:int,:int]) {G}
    cb_a := io.print(bb_a);             # 58 cb_a:void := IOprint_val(bb_a:bat[:int,:int]) 
#	io.print("quit();"); 
    db_a := clients.quit();             # 60 db_a:void 
end main;	# 61  
#~BeginVariableOutput~#
#-----------------#
# t	h	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 4,	  3	  ]
[ 4,	  2	  ]
[ 4,	  2	  ]
[ 5,	  5	  ]
#~EndVariableOutput~#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 4,	  2	  ]
[ 4,	  2	  ]
[ 4,	  3	  ]
[ 5,	  5	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 4,	  2	  ]
[ 4,	  2	  ]
[ 4,	  3	  ]
[ 5,	  5	  ]
#~BeginVariableOutput~#
#-----------------#
# t	h	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  1	  ]
[ 4,	  1	  ]
[ 4,	  2	  ]
[ 5,	  1	  ]
[ 6,	  1	  ]
#~EndVariableOutput~#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  1	  ]
[ 4,	  1	  ]
[ 4,	  2	  ]
[ 5,	  1	  ]
[ 6,	  1	  ]

# 07:27:19 >  
# 07:27:19 >  Done.
# 07:27:19 >  

