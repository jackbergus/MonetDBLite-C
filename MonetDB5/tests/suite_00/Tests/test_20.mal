# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	io.print("setoid(oid(20000000));");
	aa_a := calc.oid(20000000);
	ba_a := calc.setoid(aa_a);
#	io.print("# test single column BATs\n");
	a := bat.new(:int,:void);
#	io.print("a.insert(1,void(nil));");
	ca_a := calc.void(nil);
	da_a := bat.insert(a,1,ca_a);
#	io.print("a.print();");
	ea_a := io.print(a);
#	io.print("a.insert(2,void(nil));");
	fa_a := calc.void(nil);
	ga_a := bat.insert(a,2,fa_a);
#	io.print("a.insert(int(nil),void(nil));");
	ha_a := calc.int(nil);
	ia_a := calc.void(nil);
	ja_a := bat.insert(a,ha_a,ia_a);
#	io.print("a.print();");
	ka_a := io.print(a);
#	io.print("var b:= bat.new(void,int);");
	b := bat.new(:void,:int);
#	io.print("b.insert(void(nil),1);");
	la_a := calc.void(nil);
	ma_a := bat.insert(b,la_a,1);
#	io.print("b.print();");
	na_a := io.print(b);
#	io.print("b.insert(void(nil),2);");
	oa_a := calc.void(nil);
	pa_a := bat.insert(b,oa_a,2);
#	io.print("b.insert(void(nil),int(nil));");
	qa_a := calc.void(nil);
	ra_a := calc.int(nil);
	sa_a := bat.insert(b,qa_a,ra_a);
#	io.print("b.print();");
	ta_a := io.print(b);
#	io.print("quit();");
	ua_a := clients.quit();
