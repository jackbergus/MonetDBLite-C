stdout of test 'test_05` in directory 'tests/suite_00` itself:


# 00:12:27 >  
# 00:12:27 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_05.mal </dev/null
# 00:12:27 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("#test basic functionality of the BAT library.\n");
#	mil.line("#focussed on float\n");
#	mil.line("#it includes bat.insertions,deletions,selections, and joins.\n");
#	mil.line("print(3.147);");
#	ca_a := io.print(3.147);
#	mil.line("var b:= bbp.new(flt,flt);");
#	b := bbp.new(nil:flt,nil:flt);
#	mil.line("b.insert(1.2, 15.6);");
#	da_a := bat.insert(b,1.2,15.6);
#	mil.line("b.insert(2.3, 4.5);");
#	ea_a := bat.insert(b,2.3,4.5);
#	mil.line("b.insert(3.0, calc.flt(nil));");
#	fa_a := calc.flt(nil);
#	ga_a := bat.insert(b,3.0,fa_a);
#	mil.line("b.insert(4.5, 16.7);");
#	ha_a := bat.insert(b,4.5,16.7);
#	mil.line("b.insert(5.6, 25.6);");
#	ia_a := bat.insert(b,5.6,25.6);
#	mil.line("b.insert(6.6, 36.7);");
#	ja_a := bat.insert(b,6.6,36.7);
#	mil.line("b.insert(7.8, 49.0);");
#	ka_a := bat.insert(b,7.8,49.0);
#	mil.line("b.insert(8.9, 64.5);");
#	la_a := bat.insert(b,8.9,64.5);
#	mil.line("b.insert(9.0, calc.flt(nil));");
#	ma_a := calc.flt(nil);
#	na_a := bat.insert(b,9.0,ma_a);
#	mil.line("b.insert(flt(nil),flt(nil));");
#	oa_a := calc.flt(nil);
#	pa_a := calc.flt(nil);
#	qa_a := bat.insert(b,oa_a,pa_a);
#	mil.line("b.insert(flt(nil),81.2);");
#	ra_a := calc.flt(nil);
#	sa_a := bat.insert(b,ra_a,81.2);
#	mil.line("b.print();");
#	ta_a := io.print(b);
#	mil.line("# Testing simple retrievals\n");
#	ua_a := algebra.find(b,1.2);
#	va_a := io.print(ua_a);
#	mil.line("b.find(4.5).print();");
#	wa_a := algebra.find(b,4.5);
#	xa_a := io.print(wa_a);
#	mil.line("b.find(flt(nil)).print();");
#	ya_a := calc.flt(nil);
#	ab_a := algebra.find(b,ya_a);
#	bb_a := io.print(ab_a);
#	mil.line("# This should cause an error\n");
##ignore	cb_a := algebra.find(b,10.1);
##ignore	db_a := io.print(cb_a);
#	mil.line("# Can we delete them and re-insert them later on\n");
#	eb_a := bat.delete(b,4.5,16.7);
#	mil.line("b.delete(1.2, 15.6);");
#	fb_a := bat.delete(b,1.2,15.6);
#	mil.line("b.delete(flt(nil),81.2);");
#	gb_a := calc.flt(nil);
#	hb_a := bat.delete(b,gb_a,81.2);
#	mil.line("b.print();");
#	ib_a := io.print(b);
#	mil.line("b.insert(4.5, 16.7);");
#	jb_a := bat.insert(b,4.5,16.7);
#	mil.line("b.insert(1.2, 15.6);");
#	kb_a := bat.insert(b,1.2,15.6);
#	mil.line("b.insert(flt(nil),81.2);");
#	lb_a := calc.flt(nil);
#	mb_a := bat.insert(b,lb_a,81.2);
#	mil.line("b.count().print();");
#	nb_a := aggr.count(b);
#	ob_a := io.print(nb_a);
#	mil.line("# Lets cut out a few sections\n");
#	pb_a := algebra.select(b,25.6,64.5);
#	qb_a := io.print(pb_a);
#	mil.line("b.select(4.5,15.6).print();");
#	rb_a := algebra.select(b,4.5,15.6);
#	sb_a := io.print(rb_a);
#	mil.line("b.select(4.5,4.5).print();");
#	tb_a := algebra.select(b,4.5,4.5);
#	ub_a := io.print(tb_a);
#	mil.line("# This should cause an error\n");
#	vb_a := algebra.select(b,4.5,3.4);
#	wb_a := io.print(vb_a);
#	mil.line("b.select(81.2,flt(nil)).print();");
#	xb_a := calc.flt(nil);
#	yb_a := algebra.select(b,81.2,xb_a);
#	ac_a := io.print(yb_a);
#	mil.line("b.select(flt(nil),flt(nil)).print();");
#	bc_a := calc.flt(nil);
#	cc_a := calc.flt(nil);
#	dc_a := algebra.select(b,bc_a,cc_a);
#	ec_a := io.print(dc_a);
#	mil.line("# A 2-dimensional cut\n");
#	bn := algebra.fragment(b,1.2,5.6,4.5,15.6);
#	fc_a := io.print(bn);
#	mil.line("b.fragment(1.2,5.6,16.2,flt(nil)).print();");
#	gc_a := calc.flt(nil);
#	hc_a := algebra.fragment(b,1.2,5.6,16.2,gc_a);
#	ic_a := io.print(hc_a);
#	mil.line("b.fragment(1.2,flt(nil),16.2,flt(nil)).print();");
#	jc_a := calc.flt(nil);
#	kc_a := calc.flt(nil);
#	lc_a := algebra.fragment(b,1.2,jc_a,16.2,kc_a);
#	mc_a := io.print(lc_a);
#	mil.line("b.fragment(flt(nil),flt(nil),16.2,flt(nil)).print();");
#	nc_a := calc.flt(nil);
#	oc_a := calc.flt(nil);
#	pc_a := calc.flt(nil);
#	qc_a := algebra.fragment(b,nc_a,oc_a,16.2,pc_a);
#	rc_a := io.print(qc_a);
#	mil.line("var b1:= b.join(bn.reverse());");
#	sc_a := bat.reverse(bn);
#	b1 := algebra.join(b,sc_a);
#	mil.line("b1.print();");
#	tc_a := io.print(b1);
#	mil.line("var b2:= b.semijoin(b1);");
#	b2 := algebra.semijoin(b,b1);
#	mil.line("b2.print();");
#	uc_a := io.print(b2);
#	mil.line("# band join experiment\n");
#	c := algebra.copy(b);
#	mil.line("bandjoin(b,c,4.5,4.5).print();");
#	vc_a := algebra.bandjoin(b,c,4.5,4.5);
#	wc_a := io.print(vc_a);
#	mil.line("quit();");
#	xc_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
#include mil; 	# 2  (_2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 3  (_3:str)
#Predefined code segment 	# 4  (_4:str)
#The compiler can not guarantee an accurate compilation, 	# 5  (_5:str)
#because MIL unlike MAL is a dynamically typed language. 	# 6  (_6:str)
#A few guidelines to maximize usefullness. 	# 7  (_7:str)
#- make the type of variables explicit, in particular 'nil' 	# 8  (_8:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 9  (_9:str)
#use the "mil_schema" for additional support routines 	# 10  (_10:str)
#	mil.line("setoid(oid(20000000));"); 	# 11  (_11:str)
    aa_a := calc.oid(20000000);	# 12 CALCint2oid (aa_a:oid)<-(_13:int)
    ba_a := calc.setoid(aa_a);	# 13 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	mil.line("#test basic functionality of the BAT library.\n"); 	# 14  (_15:str)
#	mil.line("#focussed on float\n"); 	# 15  (_16:str)
#	mil.line("#it includes bat.insertions,deletions,selections, and joins.\n"); 	# 16  (_17:str)
#	mil.line("print(3.147);"); 	# 17  (_18:str)
    ca_a := io.print(3.14700007);	# 18 IOprint_val (ca_a:int)<-(_20:flt)
#	mil.line("var b:= bat.new(flt,flt);"); 	# 19  (_21:str)
    b := bat.new(nil:flt,nil:flt);	# 20 CMDBATnew (b:bat[:flt,:flt])<-(_23:flt)(_23:flt)
#	mil.line("b.insert(1.2, 15.6);"); 	# 21  (_24:str)
    da_a := bat.insert(b,1.20000005,15.6000004);	# 22 BKCinsert_bun (da_a:void)<-(b:bat[:flt,:flt])(_26:flt)(_27:flt)
#	mil.line("b.insert(2.3, 4.5);"); 	# 23  (_28:str)
    ea_a := bat.insert(b,2.29999995,4.5);	# 24 BKCinsert_bun (ea_a:void)<-(b:bat[:flt,:flt])(_30:flt)(_31:flt)
#	mil.line("b.insert(3.0, calc.flt(nil));"); 	# 25  (_32:str)
    fa_a := calc.flt(nil);	# 26 CALCnil2flt (fa_a:flt)<-(_34:void)
    ga_a := bat.insert(b,3,fa_a);	# 27 BKCinsert_bun (ga_a:void)<-(b:bat[:flt,:flt])(_36:flt)(fa_a:flt)
#	mil.line("b.insert(4.5, 16.7);"); 	# 28  (_37:str)
    ha_a := bat.insert(b,4.5,16.7000008);	# 29 BKCinsert_bun (ha_a:void)<-(b:bat[:flt,:flt])(_31:flt)(_39:flt)
#	mil.line("b.insert(5.6, 25.6);"); 	# 30  (_40:str)
    ia_a := bat.insert(b,5.5999999,25.6000004);	# 31 BKCinsert_bun (ia_a:void)<-(b:bat[:flt,:flt])(_42:flt)(_43:flt)
#	mil.line("b.insert(6.6, 36.7);"); 	# 32  (_44:str)
    ja_a := bat.insert(b,6.5999999,36.7000008);	# 33 BKCinsert_bun (ja_a:void)<-(b:bat[:flt,:flt])(_46:flt)(_47:flt)
#	mil.line("b.insert(7.8, 49.0);"); 	# 34  (_48:str)
    ka_a := bat.insert(b,7.80000019,49);	# 35 BKCinsert_bun (ka_a:void)<-(b:bat[:flt,:flt])(_50:flt)(_51:flt)
#	mil.line("b.insert(8.9, 64.5);"); 	# 36  (_52:str)
    la_a := bat.insert(b,8.89999962,64.5);	# 37 BKCinsert_bun (la_a:void)<-(b:bat[:flt,:flt])(_54:flt)(_55:flt)
#	mil.line("b.insert(9.0, calc.flt(nil));"); 	# 38  (_56:str)
    ma_a := calc.flt(nil);	# 39 CALCnil2flt (ma_a:flt)<-(_34:void)
    na_a := bat.insert(b,9,ma_a);	# 40 BKCinsert_bun (na_a:void)<-(b:bat[:flt,:flt])(_59:flt)(ma_a:flt)
#	mil.line("b.insert(flt(nil),flt(nil));"); 	# 41  (_60:str)
    oa_a := calc.flt(nil);	# 42 CALCnil2flt (oa_a:flt)<-(_34:void)
    pa_a := calc.flt(nil);	# 43 CALCnil2flt (pa_a:flt)<-(_34:void)
    qa_a := bat.insert(b,oa_a,pa_a);	# 44 BKCinsert_bun (qa_a:void)<-(b:bat[:flt,:flt])(oa_a:flt)(pa_a:flt)
#	mil.line("b.insert(flt(nil),81.2);"); 	# 45  (_64:str)
    ra_a := calc.flt(nil);	# 46 CALCnil2flt (ra_a:flt)<-(_34:void)
    sa_a := bat.insert(b,ra_a,81.1999969);	# 47 BKCinsert_bun (sa_a:void)<-(b:bat[:flt,:flt])(ra_a:flt)(_67:flt)
#	mil.line("b.print();"); 	# 48  (_68:str)
    ta_a := io.print(b);	# 49 IOprint_val (ta_a:int)<-(b:bat[:flt,:flt])
#	mil.line("# Testing simple retrievals\n"); 	# 50  (_70:str)
    ua_a := algebra.find(b,1.20000005);	# 51 ALGfind (ua_a:flt)<-(b:bat[:flt,:flt])(_72:flt)
    va_a := io.print(ua_a);	# 52 IOprint_val (va_a:int)<-(ua_a:flt)
#	mil.line("b.find(4.5).print();"); 	# 53  (_74:str)
    wa_a := algebra.find(b,4.5);	# 54 ALGfind (wa_a:flt)<-(b:bat[:flt,:flt])(_76:flt)
    xa_a := io.print(wa_a);	# 55 IOprint_val (xa_a:int)<-(wa_a:flt)
#	mil.line("b.find(flt(nil)).print();"); 	# 56  (_78:str)
    ya_a := calc.flt(nil);	# 57 CALCnil2flt (ya_a:flt)<-(_80:void)
    ab_a := algebra.find(b,ya_a);	# 58 ALGfind (ab_a:flt)<-(b:bat[:flt,:flt])(ya_a:flt)
    bb_a := io.print(ab_a);	# 59 IOprint_val (bb_a:int)<-(ab_a:flt)
#	mil.line("# This should cause an error\n"); 	# 60  (_83:str)
#ignore	cb_a := algebra.find(b,10.1); 	# 61  (_84:str)
#ignore	db_a := io.print(cb_a); 	# 62  (_85:str)
#	mil.line("# Can we delete them and re-insert them later on\n"); 	# 63  (_86:str)
    eb_a := bat.delete(b,4.5,16.7000008);	# 64 BKCdelete_bun (eb_a:void)<-(b:bat[:flt,:flt])(_76:flt)(_88:flt)
#	mil.line("b.delete(1.2, 15.6);"); 	# 65  (_89:str)
    fb_a := bat.delete(b,1.20000005,15.6000004);	# 66 BKCdelete_bun (fb_a:void)<-(b:bat[:flt,:flt])(_72:flt)(_91:flt)
#	mil.line("b.delete(flt(nil),81.2);"); 	# 67  (_92:str)
    gb_a := calc.flt(nil);	# 68 CALCnil2flt (gb_a:flt)<-(_80:void)
    hb_a := bat.delete(b,gb_a,81.1999969);	# 69 BKCdelete_bun (hb_a:void)<-(b:bat[:flt,:flt])(gb_a:flt)(_67:flt)
#	mil.line("b.print();"); 	# 70  (_68:str)
    ib_a := io.print(b);	# 71 IOprint_val (ib_a:int)<-(b:bat[:flt,:flt])
#	mil.line("b.insert(4.5, 16.7);"); 	# 72  (_96:str)
    jb_a := bat.insert(b,4.5,16.7000008);	# 73 BKCinsert_bun (jb_a:void)<-(b:bat[:flt,:flt])(_76:flt)(_88:flt)
#	mil.line("b.insert(1.2, 15.6);"); 	# 74  (_98:str)
    kb_a := bat.insert(b,1.20000005,15.6000004);	# 75 BKCinsert_bun (kb_a:void)<-(b:bat[:flt,:flt])(_72:flt)(_91:flt)
#	mil.line("b.insert(flt(nil),81.2);"); 	# 76  (_64:str)
    lb_a := calc.flt(nil);	# 77 CALCnil2flt (lb_a:flt)<-(_80:void)
    mb_a := bat.insert(b,lb_a,81.1999969);	# 78 BKCinsert_bun (mb_a:void)<-(b:bat[:flt,:flt])(lb_a:flt)(_67:flt)
#	mil.line("b.count().print();"); 	# 79  (_102:str)
    nb_a := aggr.count(b);	# 80 ALGcount_bat (nb_a:int)<-(b:bat[:flt,:flt])
    ob_a := io.print(nb_a);	# 81 IOprint_val (ob_a:int)<-(nb_a:int)
#	mil.line("# Lets cut out a few sections\n"); 	# 82  (_105:str)
    pb_a := algebra.select(b,25.6000004,64.5);	# 83 ALGselect (pb_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])(_107:flt)(_108:flt)
    qb_a := io.print(pb_a);	# 84 IOprint_val (qb_a:int)<-(pb_a:bat[:flt,:flt])
#	mil.line("b.select(4.5,15.6).print();"); 	# 85  (_110:str)
    rb_a := algebra.select(b,4.5,15.6000004);	# 86 ALGselect (rb_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])(_76:flt)(_91:flt)
    sb_a := io.print(rb_a);	# 87 IOprint_val (sb_a:int)<-(rb_a:bat[:flt,:flt])
#	mil.line("b.select(4.5,4.5).print();"); 	# 88  (_113:str)
    tb_a := algebra.select(b,4.5,4.5);	# 89 ALGselect (tb_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])(_115:flt)(_115:flt)
    ub_a := io.print(tb_a);	# 90 IOprint_val (ub_a:int)<-(tb_a:bat[:flt,:flt])
#	mil.line("# This should cause an error\n"); 	# 91  (_83:str)
    vb_a := algebra.select(b,4.5,3.4000001);	# 92 ALGselect (vb_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])(_115:flt)(_118:flt)
    wb_a := io.print(vb_a);	# 93 IOprint_val (wb_a:int)<-(vb_a:bat[:flt,:flt])
#	mil.line("b.select(81.2,flt(nil)).print();"); 	# 94  (_120:str)
    xb_a := calc.flt(nil);	# 95 CALCnil2flt (xb_a:flt)<-(_122:void)
    yb_a := algebra.select(b,81.1999969,xb_a);	# 96 ALGselect (yb_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])(_124:flt)(xb_a:flt)
    ac_a := io.print(yb_a);	# 97 IOprint_val (ac_a:int)<-(yb_a:bat[:flt,:flt])
#	mil.line("b.select(flt(nil),flt(nil)).print();"); 	# 98  (_126:str)
    bc_a := calc.flt(nil);	# 99 CALCnil2flt (bc_a:flt)<-(_122:void)
    cc_a := calc.flt(nil);	# 100 CALCnil2flt (cc_a:flt)<-(_122:void)
    dc_a := algebra.select(b,bc_a,cc_a);	# 101 ALGselect (dc_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])(bc_a:flt)(cc_a:flt)
    ec_a := io.print(dc_a);	# 102 IOprint_val (ec_a:int)<-(dc_a:bat[:flt,:flt])
#	mil.line("# A 2-dimensional cut\n"); 	# 103  (_131:str)
    bn := algebra.fragment(b,1.20000005,5.5999999,4.5,15.6000004);	# 104 ALGfragment (bn:bat[:flt,:flt])<-(b:bat[:flt,:flt])(_133:flt)(_134:flt)(_115:flt)(_135:flt)
    fc_a := io.print(bn);	# 105 IOprint_val (fc_a:int)<-(bn:bat[:flt,:flt])
#	mil.line("b.fragment(1.2,5.6,16.2,flt(nil)).print();"); 	# 106  (_137:str)
    gc_a := calc.flt(nil);	# 107 CALCnil2flt (gc_a:flt)<-(_122:void)
    hc_a := algebra.fragment(b,1.20000005,5.5999999,16.2000008,gc_a);	# 108 ALGfragment (hc_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])(_133:flt)(_134:flt)(_140:flt)(gc_a:flt)
    ic_a := io.print(hc_a);	# 109 IOprint_val (ic_a:int)<-(hc_a:bat[:flt,:flt])
#	mil.line("b.fragment(1.2,flt(nil),16.2,flt(nil)).print();"); 	# 110  (_142:str)
    jc_a := calc.flt(nil);	# 111 CALCnil2flt (jc_a:flt)<-(_122:void)
    kc_a := calc.flt(nil);	# 112 CALCnil2flt (kc_a:flt)<-(_122:void)
    lc_a := algebra.fragment(b,1.20000005,jc_a,16.2000008,kc_a);	# 113 ALGfragment (lc_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])(_133:flt)(jc_a:flt)(_140:flt)(kc_a:flt)
    mc_a := io.print(lc_a);	# 114 IOprint_val (mc_a:int)<-(lc_a:bat[:flt,:flt])
#	mil.line("b.fragment(flt(nil),flt(nil),16.2,flt(nil)).print();"); 	# 115  (_147:str)
    nc_a := calc.flt(nil);	# 116 CALCnil2flt (nc_a:flt)<-(_122:void)
    oc_a := calc.flt(nil);	# 117 CALCnil2flt (oc_a:flt)<-(_122:void)
    pc_a := calc.flt(nil);	# 118 CALCnil2flt (pc_a:flt)<-(_122:void)
    qc_a := algebra.fragment(b,nc_a,oc_a,16.2000008,pc_a);	# 119 ALGfragment (qc_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])(nc_a:flt)(oc_a:flt)(_140:flt)(pc_a:flt)
    rc_a := io.print(qc_a);	# 120 IOprint_val (rc_a:int)<-(qc_a:bat[:flt,:flt])
#	mil.line("var b1:= b.join(bn.reverse());"); 	# 121  (_153:str)
    sc_a := bat.reverse(bn);	# 122 BKCreverse (sc_a:bat[:flt,:flt])<-(bn:bat[:flt,:flt])
    b1 := algebra.join(b,sc_a);	# 123 ALGjoin (b1:bat[:flt,:flt])<-(b:bat[:flt,:flt])(sc_a:bat[:flt,:flt])
#	mil.line("b1.print();"); 	# 124  (_156:str)
    tc_a := io.print(b1);	# 125 IOprint_val (tc_a:int)<-(b1:bat[:flt,:flt])
#	mil.line("var b2:= b.semijoin(b1);"); 	# 126  (_158:str)
    b2 := algebra.semijoin(b,b1);	# 127 ALGsemijoin (b2:bat[:flt,:flt])<-(b:bat[:flt,:flt])(b1:bat[:flt,:flt])
#	mil.line("b2.print();"); 	# 128  (_160:str)
    uc_a := io.print(b2);	# 129 IOprint_val (uc_a:int)<-(b2:bat[:flt,:flt])
#	mil.line("# band join experiment\n"); 	# 130  (_162:str)
    c := algebra.copy(b);	# 131 ALGcopy (c:bat[:flt,:flt])<-(b:bat[:flt,:flt])
#	mil.line("bandjoin(b,c,4.5,4.5).print();"); 	# 132  (_164:str)
    vc_a := algebra.bandjoin(b,c,4.5,4.5);	# 133 ALGbandjoin (vc_a:bat[:flt,:flt])<-(b:bat[:flt,:flt])(c:bat[:flt,:flt])(_166:flt)(_166:flt)
    wc_a := io.print(vc_a);	# 134 IOprint_val (wc_a:int)<-(vc_a:bat[:flt,:flt])
#	mil.line("quit();"); 	# 135  (_168:str)
    xc_a := clients.quit();	# 136 CLTquit (xc_a:void)
end main;	# 137  
[ 3.14700007 ]
#var b:= bbp.new(flt,flt);
#b.insert(1.2, 15.6);
#b.insert(2.3, 4.5);
#b.insert(3.0, calc.flt(nil));
#b.insert(4.5, 16.7);
#b.insert(5.6, 25.6);
#b.insert(6.6, 36.7);
#b.insert(7.8, 49.0);
#b.insert(8.9, 64.5);
#b.insert(9.0, calc.flt(nil));
#b.insert(flt(nil),flt(nil));
#b.insert(flt(nil),81.2);
#b.print();
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ 1.20000005,	  15.6000004	  ]
[ 2.29999995,	  4.5		  ]
[ 3,		  nil		  ]
[ 4.5,		  16.7000008	  ]
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
[ 9,		  nil		  ]
[ nil,		  nil		  ]
[ nil,		  81.1999969	  ]
## Testing simple retrievals\n
[ 15.6000004 ]
#b.find(4.5).print();
[ 16.7000008 ]
#b.find(flt(nil)).print();
[ 81.1999969 ]
## This should cause an error\n
## Can we delete them and re-insert them later on\n
#b.delete(1.2, 15.6);
#b.delete(flt(nil),81.2);
#b.print();
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ nil,		  nil		  ]
[ 2.29999995,	  4.5		  ]
[ 3,		  nil		  ]
[ 9,		  nil		  ]
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
#b.insert(4.5, 16.7);
#b.insert(1.2, 15.6);
#b.insert(flt(nil),81.2);
#b.count().print();
[ 11 ]
## Lets cut out a few sections\n
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
#b.select(4.5,15.6).print();
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ 2.29999995,	  4.5		  ]
[ 1.20000005,	  15.6000004	  ]
#b.select(4.5,4.5).print();
#-------------------------#
# h		t	  # name
# flt		flt	  # type
#-------------------------#
[ 2.29999995,	  4.5	  ]
## This should cause an error\n
#-----------------#
# h	t	  # name
# flt	flt	  # type
#-----------------#
#b.select(81.2,flt(nil)).print();
#-------------------------#
# h	t		  # name
# flt	flt		  # type
#-------------------------#
[ nil,	  81.1999969	  ]
#b.select(flt(nil),flt(nil)).print();
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ 2.29999995,	  4.5		  ]
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
[ 4.5,		  16.7000008	  ]
[ 1.20000005,	  15.6000004	  ]
[ nil,		  81.1999969	  ]
## A 2-dimensional cut\n
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ 2.29999995,	  4.5		  ]
[ 1.20000005,	  15.6000004	  ]
#b.fragment(1.2,5.6,16.2,flt(nil)).print();
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ 5.5999999,	  25.6000004	  ]
[ 4.5,		  16.7000008	  ]
#b.fragment(1.2,flt(nil),16.2,flt(nil)).print();
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
[ 4.5,		  16.7000008	  ]
#b.fragment(flt(nil),flt(nil),16.2,flt(nil)).print();
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
[ 4.5,		  16.7000008	  ]
[ nil,		  81.1999969	  ]
#var b1:= b.join(bn.reverse());
#b1.print();
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ 2.29999995,	  2.29999995	  ]
[ 1.20000005,	  1.20000005	  ]
#var b2:= b.semijoin(b1);
#b2.print();
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ 2.29999995,	  4.5		  ]
[ 1.20000005,	  15.6000004	  ]
## band join experiment\n
#bandjoin(b,c,4.5,4.5).print();
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ nil,		  nil		  ]
[ nil,		  81.1999969	  ]
[ 2.29999995,	  4.5		  ]
[ 2.29999995,	  nil		  ]
[ 2.29999995,	  nil		  ]
[ 2.29999995,	  25.6000004	  ]
[ 2.29999995,	  36.7000008	  ]
[ 2.29999995,	  49		  ]
[ 2.29999995,	  64.5		  ]
[ 2.29999995,	  16.7000008	  ]
[ 2.29999995,	  15.6000004	  ]
[ 3,		  nil		  ]
[ 3,		  81.1999969	  ]
[ 9,		  nil		  ]
[ 9,		  81.1999969	  ]
#quit();

# 00:12:27 >  
# 00:12:27 >  Done.
# 00:12:27 >  

