stdout of test 'test_05` in directory 'tests/suite_00` itself:


# 00:12:27 >  
# 00:12:27 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_05.mal </dev/null
# 00:12:27 >  

# MonetDB server v5.9.0, based on kernel v1.27.0
# Serving database 'mTests_tests_suite_00', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008- MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:30579/
function user.main():void;
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);
    ba_a := calc.setoid(aa_a);
#	io.print("#test basic functionality of the BAT library.\n"); 
#	io.print("#focussed on float\n"); 
#	io.print("#it includes bat.insertions,deletions,selections, and joins.\n"); 
#	io.print("print(3.147);"); 
    ca_a := io.print(3.14700007);
#	io.print("var b:= bat.new(flt,flt);"); 
    b := bat.new(nil:flt,nil:flt);
#	io.print("b.insert(1.2, 15.6);"); 
    da_a := bat.insert(b,1.20000005,15.6000004);
#	io.print("b.insert(2.3, 4.5);"); 
    ea_a := bat.insert(b,2.29999995,4.5);
#	io.print("b.insert(3.0, calc.flt(nil));"); 
    fa_a := calc.flt(nil);
    ga_a := bat.insert(b,3,fa_a);
#	io.print("b.insert(4.5, 16.7);"); 
    ha_a := bat.insert(b,4.5,16.7000008);
#	io.print("b.insert(5.6, 25.6);"); 
    ia_a := bat.insert(b,5.5999999,25.6000004);
#	io.print("b.insert(6.6, 36.7);"); 
    ja_a := bat.insert(b,6.5999999,36.7000008);
#	io.print("b.insert(7.8, 49.0);"); 
    ka_a := bat.insert(b,7.80000019,49);
#	io.print("b.insert(8.9, 64.5);"); 
    la_a := bat.insert(b,8.89999962,64.5);
#	io.print("b.insert(9.0, calc.flt(nil));"); 
    ma_a := calc.flt(nil);
    na_a := bat.insert(b,9,ma_a);
#	io.print("b.insert(flt(nil),flt(nil));"); 
    oa_a := calc.flt(nil);
    pa_a := calc.flt(nil);
    qa_a := bat.insert(b,oa_a,pa_a);
#	io.print("b.insert(flt(nil),81.2);"); 
    ra_a := calc.flt(nil);
    sa_a := bat.insert(b,ra_a,81.1999969);
#	io.print("b.print();"); 
    ta_a := io.print(b);
#	io.print("# Testing simple retrievals\n"); 
    ua_a := algebra.find(b,1.20000005);
    va_a := io.print(ua_a);
#	io.print("b.find(4.5).print();"); 
    wa_a := algebra.find(b,4.5);
    xa_a := io.print(wa_a);
#	io.print("b.find(flt(nil)).print();"); 
    ya_a := calc.flt(nil);
    ab_a := algebra.find(b,ya_a);
    bb_a := io.print(ab_a);
#	io.print("# This should cause an error\n"); 
#ignore	cb_a := algebra.find(b,10.1); 
#ignore	db_a := io.print(cb_a); 
#	io.print("# Can we delete them and re-insert them later on\n"); 
    eb_a := bat.delete(b,4.5,16.7000008);
#	io.print("b.delete(1.2, 15.6);"); 
    fb_a := bat.delete(b,1.20000005,15.6000004);
#	io.print("b.delete(flt(nil),81.2);"); 
    gb_a := calc.flt(nil);
    hb_a := bat.delete(b,gb_a,81.1999969);
#	io.print("b.print();"); 
    ib_a := io.print(b);
#	io.print("b.insert(4.5, 16.7);"); 
    jb_a := bat.insert(b,4.5,16.7000008);
#	io.print("b.insert(1.2, 15.6);"); 
    kb_a := bat.insert(b,1.20000005,15.6000004);
#	io.print("b.insert(flt(nil),81.2);"); 
    lb_a := calc.flt(nil);
    mb_a := bat.insert(b,lb_a,81.1999969);
#	io.print("b.count().print();"); 
    nb_a := aggr.count(b);
    ob_a := io.print(nb_a);
#	io.print("# Lets cut out a few sections\n"); 
    pb_a := algebra.select(b,25.6000004,64.5);
    qb_a := io.print(pb_a);
#	io.print("b.select(4.5,15.6).print();"); 
    rb_a := algebra.select(b,4.5,15.6000004);
    sb_a := io.print(rb_a);
#	io.print("b.select(4.5,4.5).print();"); 
    tb_a := algebra.select(b,4.5,4.5);
    ub_a := io.print(tb_a);
#	io.print("# This should cause an error\n"); 
    vb_a := algebra.select(b,4.5,3.4000001);
    wb_a := io.print(vb_a);
#	io.print("b.select(81.2,flt(nil)).print();"); 
    xb_a := calc.flt(nil);
    yb_a := algebra.select(b,81.1999969,xb_a);
    ac_a := io.print(yb_a);
#	io.print("b.select(flt(nil),flt(nil)).print();"); 
    bc_a := calc.flt(nil);
    cc_a := calc.flt(nil);
    dc_a := algebra.select(b,bc_a,cc_a);
    ec_a := io.print(dc_a);
#	io.print("# A 2-dimensional cut\n"); 
    bn := algebra.fragment(b,1.20000005,5.5999999,4.5,15.6000004);
    fc_a := io.print(bn);
#	io.print("b.fragment(1.2,5.6,16.2,flt(nil)).print();"); 
    gc_a := calc.flt(nil);
    hc_a := algebra.fragment(b,1.20000005,5.5999999,16.2000008,gc_a);
    ic_a := io.print(hc_a);
#	io.print("b.fragment(1.2,flt(nil),16.2,flt(nil)).print();"); 
    jc_a := calc.flt(nil);
    kc_a := calc.flt(nil);
    lc_a := algebra.fragment(b,1.20000005,jc_a,16.2000008,kc_a);
    mc_a := io.print(lc_a);
#	io.print("b.fragment(flt(nil),flt(nil),16.2,flt(nil)).print();"); 
    nc_a := calc.flt(nil);
    oc_a := calc.flt(nil);
    pc_a := calc.flt(nil);
    qc_a := algebra.fragment(b,nc_a,oc_a,16.2000008,pc_a);
    rc_a := io.print(qc_a);
#	io.print("var b1:= b.join(bn.reverse());"); 
    sc_a := bat.reverse(bn);
    b1 := algebra.join(b,sc_a);
#	io.print("b1.print();"); 
    tc_a := io.print(b1);
#	io.print("var b2:= b.semijoin(b1);"); 
    b2 := algebra.semijoin(b,b1);
#	io.print("b2.print();"); 
    uc_a := io.print(b2);
#	io.print("# band join experiment\n"); 
    c := algebra.copy(b);
#	io.print("bandjoin(b,c,4.5,4.5).print();"); 
    vc_a := algebra.bandjoin(b,c,4.5,4.5);
    wc_a := io.print(vc_a);
#	io.print("quit();"); 
    xc_a := clients.quit();
end main;
[ 3.14700007 ]
#var b:= bbp.new(flt,flt);
#b.insert(1.2, 15.6);
#b.insert(2.3, 4.5);
#b.insert(3.0, calc.flt(nil));
#b.insert(4.5, 16.7);
#b.insert(5.6, 25.6);
#b.insert(6.6, 36.7);
#b.insert(7.8, 49.0);
#b.insert(8.9, 64.5);
#b.insert(9.0, calc.flt(nil));
#b.insert(flt(nil),flt(nil));
#b.insert(flt(nil),81.2);
#b.print();
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ 1.20000005,	  15.6000004	  ]
[ 2.29999995,	  4.5		  ]
[ 3,		  nil		  ]
[ 4.5,		  16.7000008	  ]
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
[ 9,		  nil		  ]
[ nil,		  nil		  ]
[ nil,		  81.1999969	  ]
## Testing simple retrievals\n
[ 15.6000004 ]
#b.find(4.5).print();
[ 16.7000008 ]
#b.find(flt(nil)).print();
[ 81.1999969 ]
## This should cause an error\n
## Can we delete them and re-insert them later on\n
#b.delete(1.2, 15.6);
#b.delete(flt(nil),81.2);
#b.print();
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ nil,		  nil		  ]
[ 2.29999995,	  4.5		  ]
[ 3,		  nil		  ]
[ 9,		  nil		  ]
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
#b.insert(4.5, 16.7);
#b.insert(1.2, 15.6);
#b.insert(flt(nil),81.2);
#b.count().print();
[ 11 ]
## Lets cut out a few sections\n
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
#b.select(4.5,15.6).print();
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ 2.29999995,	  4.5		  ]
[ 1.20000005,	  15.6000004	  ]
#b.select(4.5,4.5).print();
#-------------------------#
# h		t	  # name
# flt		flt	  # type
#-------------------------#
[ 2.29999995,	  4.5	  ]
## This should cause an error\n
#-----------------#
# h	t	  # name
# flt	flt	  # type
#-----------------#
#b.select(81.2,flt(nil)).print();
#-------------------------#
# h	t		  # name
# flt	flt		  # type
#-------------------------#
[ nil,	  81.1999969	  ]
#b.select(flt(nil),flt(nil)).print();
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ 2.29999995,	  4.5		  ]
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
[ 4.5,		  16.7000008	  ]
[ 1.20000005,	  15.6000004	  ]
[ nil,		  81.1999969	  ]
## A 2-dimensional cut\n
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ 2.29999995,	  4.5		  ]
[ 1.20000005,	  15.6000004	  ]
#b.fragment(1.2,5.6,16.2,flt(nil)).print();
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ 5.5999999,	  25.6000004	  ]
[ 4.5,		  16.7000008	  ]
#b.fragment(1.2,flt(nil),16.2,flt(nil)).print();
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
[ 4.5,		  16.7000008	  ]
#b.fragment(flt(nil),flt(nil),16.2,flt(nil)).print();
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ 5.5999999,	  25.6000004	  ]
[ 6.5999999,	  36.7000008	  ]
[ 7.80000019,	  49		  ]
[ 8.89999962,	  64.5		  ]
[ 4.5,		  16.7000008	  ]
[ nil,		  81.1999969	  ]
#var b1:= b.join(bn.reverse());
#b1.print();
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ 2.29999995,	  2.29999995	  ]
[ 1.20000005,	  1.20000005	  ]
#var b2:= b.semijoin(b1);
#b2.print();
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ 2.29999995,	  4.5		  ]
[ 1.20000005,	  15.6000004	  ]
## band join experiment\n
#bandjoin(b,c,4.5,4.5).print();
#---------------------------------#
# h		t		  # name
# flt		flt		  # type
#---------------------------------#
[ nil,		  nil		  ]
[ nil,		  81.1999969	  ]
[ 2.29999995,	  4.5		  ]
[ 2.29999995,	  nil		  ]
[ 2.29999995,	  nil		  ]
[ 2.29999995,	  25.6000004	  ]
[ 2.29999995,	  36.7000008	  ]
[ 2.29999995,	  49		  ]
[ 2.29999995,	  64.5		  ]
[ 2.29999995,	  16.7000008	  ]
[ 2.29999995,	  15.6000004	  ]
[ 3,		  nil		  ]
[ 3,		  81.1999969	  ]
[ 9,		  nil		  ]
[ 9,		  81.1999969	  ]
#quit();

# 00:12:27 >  
# 00:12:27 >  Done.
# 00:12:27 >  

