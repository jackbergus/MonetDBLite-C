stdout of test 'test_03` in directory 'tests/suite_00` itself:


# 00:12:27 >  
# 00:12:27 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_03.mal </dev/null
# 00:12:27 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("#test basic functionality of the BAT library.\n");
#	mil.line("#focussed on temporary reversal of roles.\n");
#	mil.line("var b:= bbp.new(int,str);");
#	b := bbp.new(nil:int,nil:str);
#	mil.line("b.insert(1,\"15\");");
#	ca_a := bat.insert(b,1,"15");
#	mil.line("b.print();");
#	da_a := io.print(b);
#	mil.line("b.reverse().print();");
#	ea_a := bat.reverse(b);
#	fa_a := io.print(ea_a);
#	mil.line("b.print();");
#	ga_a := io.print(b);
#	mil.line("quit();");
#	ha_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
#include mil; 	# 2  (_2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 3  (_3:str)
#Predefined code segment 	# 4  (_4:str)
#The compiler can not guarantee an accurate compilation, 	# 5  (_5:str)
#because MIL unlike MAL is a dynamically typed language. 	# 6  (_6:str)
#A few guidelines to maximize usefullness. 	# 7  (_7:str)
#- make the type of variables explicit, in particular 'nil' 	# 8  (_8:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 9  (_9:str)
#use the "mil_schema" for additional support routines 	# 10  (_10:str)
#	mil.line("setoid(oid(20000000));"); 	# 11  (_11:str)
    aa_a := calc.oid(20000000);	# 12 CALCint2oid (aa_a:oid)<-(_13:int)
    ba_a := calc.setoid(aa_a);	# 13 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	mil.line("#test basic functionality of the BAT library.\n"); 	# 14  (_15:str)
#	mil.line("#focussed on temporary reversal of roles.\n"); 	# 15  (_16:str)
#	mil.line("var b:= bat.new(int,str);"); 	# 16  (_17:str)
    b := bat.new(nil:int,nil:str);	# 17 CMDBATnew (b:bat[:int,:str])<-(_19:int)(_20:str)
#	mil.line("b.insert(1,\"15\");"); 	# 18  (_21:str)
    ca_a := bat.insert(b,1,"15");	# 19 BKCinsert_bun (ca_a:void)<-(b:bat[:int,:str])(_23:int)(_24:str)
#	mil.line("b.print();"); 	# 20  (_25:str)
    da_a := io.print(b);	# 21 IOprint_val (da_a:int)<-(b:bat[:int,:str])
#	mil.line("b.reverse().print();"); 	# 22  (_27:str)
    ea_a := bat.reverse(b);	# 23 BKCreverse (ea_a:bat[:str,:int])<-(b:bat[:int,:str])
    fa_a := io.print(ea_a);	# 24 IOprint_val (fa_a:int)<-(ea_a:bat[:str,:int])
#	mil.line("b.print();"); 	# 25  (_25:str)
    ga_a := io.print(b);	# 26 IOprint_val (ga_a:int)<-(b:bat[:int,:str])
#	mil.line("quit();"); 	# 27  (_31:str)
    ha_a := clients.quit();	# 28 CLTquitDefault (ha_a:void)
end main;	# 29  
#-----------------#
# h	t	  # name
# int	str	  # type
#-----------------#
[ 1,	  "15"	  ]
#b.reverse().print();
#-----------------#
# t	h	  # name
# str	int	  # type
#-----------------#
[ "15",	  1	  ]
#b.print();
#-----------------#
# h	t	  # name
# int	str	  # type
#-----------------#
[ 1,	  "15"	  ]
#quit();

# 00:12:27 >  
# 00:12:27 >  Done.
# 00:12:27 >  

