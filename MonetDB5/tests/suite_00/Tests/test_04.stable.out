stdout of test 'test_04` in directory 'tests/suite_00` itself:


# 00:12:27 >  
# 00:12:27 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_04.mal </dev/null
# 00:12:27 >  

# MonetDB server v5.9.0, based on kernel v1.27.0
# Serving database 'mTests_tests_suite_00', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008- MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:30579/
function user.main():void;
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);
    ba_a := calc.setoid(aa_a);
#	io.print("# test correctness of semijoin\n"); 
    b := bat.new(nil:int,nil:int);
#	io.print("var c:= bat.new(int,int);"); 
    c := bat.new(nil:int,nil:int);
#	io.print("b.insert(0,0);"); 
    ca_a := bat.insert(b,0,0);
#	io.print("b.insert(1,1);"); 
    da_a := bat.insert(b,1,1);
#	io.print("b.insert(1,2);"); 
    ea_a := bat.insert(b,1,2);
#	io.print("b.insert(1,3);"); 
    fa_a := bat.insert(b,1,3);
#	io.print("b.insert(1,4);"); 
    ga_a := bat.insert(b,1,4);
#	io.print("c.insert(1,5);"); 
    ha_a := bat.insert(c,1,5);
#	io.print("c.insert(1,4);"); 
    ia_a := bat.insert(c,1,4);
#	io.print("c.insert(2,2);"); 
    ja_a := bat.insert(c,2,2);
#	io.print("b.semijoin(c).print();"); 
    ka_a := algebra.semijoin(b,c);
    la_a := io.print(ka_a);
#	io.print("c.semijoin(b).print();"); 
    ma_a := algebra.semijoin(c,b);
    na_a := io.print(ma_a);
#	io.print("b.semijoin(b).print();"); 
    oa_a := algebra.semijoin(b,b);
    pa_a := io.print(oa_a);
#	io.print("quit();"); 
    qa_a := clients.quit();
end main;
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 1,	  2	  ]
[ 1,	  3	  ]
[ 1,	  4	  ]
#c.semijoin(b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  5	  ]
[ 1,	  4	  ]
#b.semijoin(b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 0,	  0	  ]
[ 1,	  1	  ]
[ 1,	  2	  ]
[ 1,	  3	  ]
[ 1,	  4	  ]
#quit();

# 00:12:27 >  
# 00:12:27 >  Done.
# 00:12:27 >  

