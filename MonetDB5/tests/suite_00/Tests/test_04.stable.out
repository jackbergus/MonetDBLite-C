stdout of test 'test_04` in directory 'tests/suite_00` itself:


# 00:12:27 >  
# 00:12:27 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_04.mal </dev/null
# 00:12:27 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("# test correctness of semijoin\n");
#	b := bbp.new(nil:int,nil:int);
#	mil.line("var c:= bbp.new(int,int);");
#	c := bbp.new(nil:int,nil:int);
#	mil.line("b.insert(0,0);");
#	ca_a := bat.insert(b,0,0);
#	mil.line("b.insert(1,1);");
#	da_a := bat.insert(b,1,1);
#	mil.line("b.insert(1,2);");
#	ea_a := bat.insert(b,1,2);
#	mil.line("b.insert(1,3);");
#	fa_a := bat.insert(b,1,3);
#	mil.line("b.insert(1,4);");
#	ga_a := bat.insert(b,1,4);
#	mil.line("c.insert(1,5);");
#	ha_a := bat.insert(c,1,5);
#	mil.line("c.insert(1,4);");
#	ia_a := bat.insert(c,1,4);
#	mil.line("c.insert(2,2);");
#	ja_a := bat.insert(c,2,2);
#	mil.line("b.semijoin(c).print();");
#	ka_a := algebra.semijoin(b,c);
#	la_a := io.print(ka_a);
#	mil.line("c.semijoin(b).print();");
#	ma_a := algebra.semijoin(c,b);
#	na_a := io.print(ma_a);
#	mil.line("b.semijoin(b).print();");
#	oa_a := algebra.semijoin(b,b);
#	pa_a := io.print(oa_a);
#	mil.line("quit();");
#	qa_a := clients.quit();
#
function user.main():void;              #  0 main:void := user.main() {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         # 11 aa_a:oid := CALCint2oid(_12:int) 
    ba_a := calc.setoid(aa_a);          # 12 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("# test correctness of semijoin\n"); 
    b := bat.new(nil:int,nil:int);      # 14 b:bat[:int,:int] := CMDBATnew(_16:int, _16:int) {G}
#	io.print("var c:= bat.new(int,int);"); 
    c := bat.new(nil:int,nil:int);      # 16 c:bat[:int,:int] := CMDBATnew(_16:int, _16:int) {G}
#	io.print("b.insert(0,0);"); 
    ca_a := bat.insert(b,0,0);          # 18 ca_a:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _21:int, _21:int) {G}
#	io.print("b.insert(1,1);"); 
    da_a := bat.insert(b,1,1);          # 20 da_a:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _24:int, _24:int) {G}
#	io.print("b.insert(1,2);"); 
    ea_a := bat.insert(b,1,2);          # 22 ea_a:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _24:int, _27:int) {G}
#	io.print("b.insert(1,3);"); 
    fa_a := bat.insert(b,1,3);          # 24 fa_a:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _24:int, _30:int) {G}
#	io.print("b.insert(1,4);"); 
    ga_a := bat.insert(b,1,4);          # 26 ga_a:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _24:int, _33:int) {G}
#	io.print("c.insert(1,5);"); 
    ha_a := bat.insert(c,1,5);          # 28 ha_a:bat[:int,:int] := BKCinsert_bun(c:bat[:int,:int], _24:int, _36:int) {G}
#	io.print("c.insert(1,4);"); 
    ia_a := bat.insert(c,1,4);          # 30 ia_a:bat[:int,:int] := BKCinsert_bun(c:bat[:int,:int], _24:int, _33:int) {G}
#	io.print("c.insert(2,2);"); 
    ja_a := bat.insert(c,2,2);          # 32 ja_a:bat[:int,:int] := BKCinsert_bun(c:bat[:int,:int], _27:int, _27:int) {G}
#	io.print("b.semijoin(c).print();"); 
    ka_a := algebra.semijoin(b,c);      # 34 ka_a:bat[:int,:int] := ALGsemijoin(b:bat[:int,:int], c:bat[:int,:int]) {G}
    la_a := io.print(ka_a);             # 35 la_a:void := IOprint_val(ka_a:bat[:int,:int]) 
#	io.print("c.semijoin(b).print();"); 
    ma_a := algebra.semijoin(c,b);      # 37 ma_a:bat[:int,:int] := ALGsemijoin(c:bat[:int,:int], b:bat[:int,:int]) {G}
    na_a := io.print(ma_a);             # 38 na_a:void := IOprint_val(ma_a:bat[:int,:int]) 
#	io.print("b.semijoin(b).print();"); 
    oa_a := algebra.semijoin(b,b);      # 40 oa_a:bat[:int,:int] := ALGsemijoin(b:bat[:int,:int], b:bat[:int,:int]) {G}
    pa_a := io.print(oa_a);             # 41 pa_a:void := IOprint_val(oa_a:bat[:int,:int]) 
#	io.print("quit();"); 
    qa_a := clients.quit();             # 43 qa_a:void := CLTquit() 
end main;	# 44  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 1,	  2	  ]
[ 1,	  3	  ]
[ 1,	  4	  ]
#c.semijoin(b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  5	  ]
[ 1,	  4	  ]
#b.semijoin(b).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 0,	  0	  ]
[ 1,	  1	  ]
[ 1,	  2	  ]
[ 1,	  3	  ]
[ 1,	  4	  ]
#quit();

# 00:12:27 >  
# 00:12:27 >  Done.
# 00:12:27 >  

