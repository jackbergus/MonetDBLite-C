# Monet Mil to Mal compiler
#include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
	aa_a := calc.oid(20000000);
	ba_a := calc.setoid(aa_a);
#	mil.line("#testing the set operations;\n");
	b := bat.new(nil:int,nil:int);
#	mil.line("b.insert(1,15);");
	ca_a := bat.insert(b,1,15);
#	mil.line("b.insert(2,4);");
	da_a := bat.insert(b,2,4);
#	mil.line("b.insert(3,int(nil));");
	ea_a := calc.int(nil);
	fa_a := bat.insert(b,3,ea_a);
#	mil.line("b.insert(4,16);");
	ga_a := bat.insert(b,4,16);
#	mil.line("b.insert(5,25);");
	ha_a := bat.insert(b,5,25);
#	mil.line("b.insert(6,36);");
	ia_a := bat.insert(b,6,36);
#	mil.line("b.insert(7,49);");
	ja_a := bat.insert(b,7,49);
#	mil.line("b.insert(8,64);");
	ka_a := bat.insert(b,8,64);
#	mil.line("b.insert(9,int(nil));");
	la_a := calc.int(nil);
	ma_a := bat.insert(b,9,la_a);
#	mil.line("b.insert(int(nil),int(nil));");
	na_a := calc.int(nil);
	oa_a := calc.int(nil);
	pa_a := bat.insert(b,na_a,oa_a);
#	mil.line("b.insert(int(nil),81);");
	qa_a := calc.int(nil);
	ra_a := bat.insert(b,qa_a,81);
#	mil.line("var c:= b.copy();");
	c := algebra.copy(b);
#	mil.line("var t:= b.select(80,int(nil)); io.print(t);");
	sa_a := calc.int(nil);
	t := algebra.select(b,80,sa_a);
	ta_a := io.print(t);
#	mil.line("c.access(BAT_WRITE);");
	BAT_WRITE:= 0;
	ua_a := bat.setWriteMode(c);
#	mil.line("insert(c,t);print(c);");
	va_a := bat.insert(c,t);
	wa_a := io.print(c);
#	mil.line("var z:= bat.new(int,int);");
	z := bat.new(nil:int,nil:int);
#	mil.line("b.replace(1,1);");
	xa_a := bat.replace(b,1,1);
#	mil.line("z.insert(2,4);");
	ya_a := bat.insert(z,2,4);
#	mil.line("z.insert(3,9);");
	ab_a := bat.insert(z,3,9);
#	mil.line("b.replace(z);");
	bb_a := bat.replace(b,z);
#	mil.line("b.print();");
	cb_a := io.print(b);
#	mil.line("c.reverse().print();");
	db_a := bat.reverse(c);
	eb_a := io.print(db_a);
#	mil.line("var d:= intersect(reverse(c),b);");
	fb_a := bat.reverse(c);
	d := algebra.intersect(fb_a,b);
#	mil.line("print(d);");
	gb_a := io.print(d);
#	mil.line("var e:= difference(reverse(c),d);");
	hb_a := bat.reverse(c);
	e := algebra.difference(hb_a,d);
#	mil.line("print(e);");
	ib_a := io.print(e);
#	mil.line("var f:= union(e,b);");
	f := algebra.union(e,b);
#	mil.line("print(f);");
	jb_a := io.print(f);
#	mil.line("# specials\n");
	marcel := algebra.kunion(b,b);
#	mil.line("marcel.print();");
	kb_a := io.print(marcel);
#	mil.line("quit();");
	lb_a := clients.quit();
