stdout of test 'test_00` in directory 'tests/suite_00` itself:


# 11:45:02 >  
# 11:45:02 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=34848 --set xrpc_port=46218 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_00.mal
# 11:45:02 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_tests_suite_00', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008- MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:30579/
function user.main():void;
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);
    ba_a := calc.setoid(aa_a);
#	io.print("#test basic functionality of the BAT library.\n"); 
#	io.print("#focussed on integers\n"); 
#	io.print("#it includes bat.insertions,deletions,selections, and algebra.joins.\n"); 
#	io.print("var b:= new(int,int);"); 
    b := bat.new(nil:int,nil:int);
#	io.print("#b.roles(\"head\",\"tail\"); roles was removed from the kernel ops\n"); 
    ca_a := io.printf("#~BeginVariableOutput~#\n");
    da_a := bat.info(b);
    ea_a := io.print(da_a);
    fa_a := io.printf("#~EndVariableOutput~#\n");
#	io.print("b.insert(1,15);"); 
    ga_a := bat.insert(b,1,15);
#	io.print("b.insert(2,4);"); 
    ha_a := bat.insert(b,2,4);
#	io.print("b.insert(3,int(nil));"); 
    ia_a := calc.int(nil);
    ja_a := bat.insert(b,3,ia_a);
#	io.print("b.insert(4,16);"); 
    ka_a := bat.insert(b,4,16);
#	io.print("b.insert(5,25);"); 
    la_a := bat.insert(b,5,25);
#	io.print("b.insert(6,36);"); 
    ma_a := bat.insert(b,6,36);
#	io.print("b.insert(7,49);"); 
    na_a := bat.insert(b,7,49);
#	io.print("b.insert(8,64);"); 
    oa_a := bat.insert(b,8,64);
#	io.print("b.insert(9,int(nil));"); 
    pa_a := calc.int(nil);
    qa_a := bat.insert(b,9,pa_a);
#	io.print("b.insert(int(nil),int(nil));"); 
    ra_a := calc.int(nil);
    sa_a := calc.int(nil);
    ta_a := bat.insert(b,ra_a,sa_a);
#	io.print("b.insert(int(nil),81);"); 
    ua_a := calc.int(nil);
    va_a := bat.insert(b,ua_a,81);
#	io.print("b.print();"); 
    wa_a := io.print(b);
#	io.print("# Testing simple retrievals\n"); 
    xa_a := algebra.find(b,1);
    ya_a := io.print(xa_a);
#	io.print("b.find(4).print();"); 
    ab_a := algebra.find(b,4);
    bb_a := io.print(ab_a);
#	io.print("b.find(int(nil)).print();"); 
    cb_a := calc.int(nil);
    db_a := algebra.find(b,cb_a);
    eb_a := io.print(db_a);
#	io.print("# This should cause an error\n"); 
#ignore	fb_a := find(b,10); 
#ignore	gb_a := io.print(fb_a); 
#	io.print("# Can we delete them and re-insert them later on\n"); 
    hb_a := bat.delete(b,4,16);
#	io.print("b.delete(1,15);"); 
    ib_a := bat.delete(b,1,15);
#	io.print("b.delete(int(nil),81);"); 
    jb_a := calc.int(nil);
    kb_a := bat.delete(b,jb_a,81);
#	io.print("b.print();"); 
    lb_a := io.print(b);
#	io.print("b.insert(4,16);"); 
    mb_a := bat.insert(b,4,16);
#	io.print("b.insert(int(nil),81);"); 
    nb_a := calc.int(nil);
    ob_a := bat.insert(b,nb_a,81);
#	io.print("b.insert(1,15);"); 
    pb_a := bat.insert(b,1,15);
#	io.print("b.count().print();"); 
    qb_a := aggr.count(b);
    rb_a := io.print(qb_a);
#	io.print("b.print();"); 
    sb_a := io.print(b);
#	io.print("# Lets cut out a few sections\n"); 
    tb_a := algebra.select(b,25,64);
    ub_a := io.print(tb_a);
#	io.print("b.select(4,15).print();"); 
    vb_a := algebra.select(b,4,15);
    wb_a := io.print(vb_a);
#	io.print("b.select(4,4).print();"); 
    xb_a := algebra.select(b,4,4);
    yb_a := io.print(xb_a);
#	io.print("# This should cause an error\n"); 
    ac_a := algebra.select(b,4,3);
    bc_a := io.print(ac_a);
#	io.print("b.select(81,int(nil)).print();"); 
    cc_a := calc.int(nil);
    dc_a := algebra.select(b,81,cc_a);
    ec_a := io.print(dc_a);
#	io.print("b.select(int(nil),int(nil)).print();"); 
    fc_a := calc.int(nil);
    gc_a := calc.int(nil);
    hc_a := algebra.select(b,fc_a,gc_a);
    ic_a := io.print(hc_a);
#	io.print("# A 2-dimensional cut\n"); 
    bn := algebra.fragment(b,1,5,4,15);
    jc_a := io.print(bn);
#	io.print("b.fragment(1,5,16,int(nil)).print();"); 
    kc_a := calc.int(nil);
    lc_a := algebra.fragment(b,1,5,16,kc_a);
    mc_a := io.print(lc_a);
#	io.print("b.fragment(1,int(nil),16,int(nil)).print();"); 
    nc_a := calc.int(nil);
    oc_a := calc.int(nil);
    pc_a := algebra.fragment(b,1,nc_a,16,oc_a);
    qc_a := io.print(pc_a);
#	io.print("b.fragment(int(nil),int(nil),16,int(nil)).print();"); 
    rc_a := calc.int(nil);
    sc_a := calc.int(nil);
    tc_a := calc.int(nil);
    uc_a := algebra.fragment(b,rc_a,sc_a,16,tc_a);
    vc_a := io.print(uc_a);
#	io.print("bn:= b.join(bn.reverse());"); 
    wc_a := bat.reverse(bn);
    bn := algebra.join(b,wc_a);
#	io.print("bn.print();"); 
    xc_a := io.print(bn);
#	io.print("bn:= b.semijoin(bn.reverse());"); 
    yc_a := bat.reverse(bn);
    bn := algebra.semijoin(b,yc_a);
#	io.print("bn.print();"); 
    ad_a := io.print(bn);
#	io.print("# band algebra.join experiment\n"); 
    c := algebra.copy(b);
#	io.print("bandjoin(b,c,4,4).print();"); 
    bd_a := algebra.bandjoin(b,c,4,4);
    cd_a := io.print(bd_a);
#	io.print("#and theta algebra.joins\?\n"); 
    LT := -1;
    dd_a := calc.lng(nil);
    ed_a := algebra.thetajoin(b,c,LT,dd_a);
    fd_a := io.print(ed_a);
#	io.print("quit();"); 
    gd_a := clients.quit();
end main;
#~BeginVariableOutput~#
#-----------------------------------------#
# h			t		  # name
# str			str		  # type
#-----------------------------------------#
[ "batId",		  "tmp_10"	  ]
[ "batCacheid",		  "8"		  ]
[ "hparentid",		  "0"		  ]
[ "tparentid",		  "0"		  ]
[ "batSharecnt",	  "0"		  ]
[ "batCount",		  "0"		  ]
[ "batCapacity",	  "256"		  ]
[ "head",		  "int"		  ]
[ "tail",		  "int"		  ]
[ "batPersistence",	  "transient"	  ]
[ "batRestricted",	  "updatable"	  ]
[ "batRefcnt",		  "1"		  ]
[ "batLRefcnt",		  "1"		  ]
[ "batDirty",		  "dirty"	  ]
[ "batSet",		  "0"		  ]
[ "hsorted",		  "65"		  ]
[ "hident",		  "h"		  ]
[ "hdense",		  "0"		  ]
[ "hseqbase",		  "0@0"		  ]
[ "hkey",		  "0"		  ]
[ "hvarsized",		  "0"		  ]
[ "halign",		  "20000000"	  ]
[ "hnosorted",		  "0"		  ]
[ "hnosorted_rev",	  "0"		  ]
[ "hnodense",		  "0"		  ]
[ "hnokey[0]",		  "0"		  ]
[ "hnokey[1]",		  "0"		  ]
[ "hnonil",		  "1"		  ]
[ "hnil",		  "0"		  ]
[ "tident",		  "t"		  ]
[ "tdense",		  "0"		  ]
[ "tseqbase",		  "0@0"		  ]
[ "tsorted",		  "65"		  ]
[ "tkey",		  "0"		  ]
[ "tvarsized",		  "0"		  ]
[ "talign",		  "20000001"	  ]
[ "tnosorted",		  "0"		  ]
[ "tnosorted_rev",	  "0"		  ]
[ "tnodense",		  "0"		  ]
[ "tnokey[0]",		  "0"		  ]
[ "tnokey[1]",		  "0"		  ]
[ "tnonil",		  "1"		  ]
[ "tnil",		  "0"		  ]
[ "batInserted",	  "0"		  ]
[ "batDeleted",		  "0"		  ]
[ "batFirst",		  "0"		  ]
[ "htop",		  "0"		  ]
[ "ttop",		  "0"		  ]
[ "batStamp",		  "8"		  ]
[ "lastUsed",		  "158"		  ]
[ "curStamp",		  "9"		  ]
[ "batCopiedtodisk",	  "0"		  ]
[ "batDirtydesc",	  "dirty"	  ]
[ "H->heap.dirty",	  "clean"	  ]
[ "T->heap.dirty",	  "clean"	  ]
[ "head.free",		  "0"		  ]
[ "head.size",		  "1024"	  ]
[ "head.maxsize",	  "1024"	  ]
[ "head.storage",	  "malloced"	  ]
[ "head.newstorage",	  "malloced"	  ]
[ "head.filename",	  "10.head"	  ]
[ "tail.free",		  "0"		  ]
[ "tail.size",		  "1024"	  ]
[ "tail.maxsize",	  "1024"	  ]
[ "tail.storage",	  "malloced"	  ]
[ "tail.newstorage",	  "malloced"	  ]
[ "tail.filename",	  "10.tail"	  ]
[ "H->vheap->dirty",	  "clean"	  ]
[ "T->vheap->dirty",	  "clean"	  ]
#~EndVariableOutput~#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
[ 15 ]
[ 16 ]
[ 81 ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ nil,	  nil	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 9,	  nil	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 11 ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ nil,	  nil	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 9,	  nil	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
[ nil,	  81	  ]
[ 1,	  15	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  4	  ]
[ 1,	  15	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  4	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ nil,	  81	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  4	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
[ nil,	  81	  ]
[ 1,	  15	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  4	  ]
[ 1,	  15	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 5,	  25	  ]
[ 4,	  16	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
[ nil,	  81	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  2	  ]
[ 1,	  1	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  4	  ]
[ 1,	  15	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  4	  ]
[ 2,	  nil	  ]
[ 2,	  25	  ]
[ 2,	  36	  ]
[ 2,	  49	  ]
[ 2,	  64	  ]
[ 2,	  16	  ]
[ 2,	  15	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  nil	  ]
[ 2,	  25	  ]
[ 2,	  36	  ]
[ 2,	  49	  ]
[ 2,	  64	  ]

# 11:45:02 >  
# 11:45:02 >  Done.
# 11:45:02 >  

