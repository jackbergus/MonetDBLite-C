stdout of test 'test_35` in directory 'tests/suite_00` itself:


# 00:12:28 >  
# 00:12:28 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_35.mal </dev/null
# 00:12:28 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("# testing merge semijoin\n");
#	c := bbp.new(nil:int,nil:int);
#	mil.line("insert(c,1,1);");
#	ca_a := bat.insert(c,1,1);
#	mil.line("insert(c,2,2);");
#	da_a := bat.insert(c,2,2);
#	mil.line("insert(c,3,4);");
#	ea_a := bat.insert(c,3,4);
#	mil.line("insert(c,4,4);");
#	fa_a := bat.insert(c,4,4);
#	mil.line("insert(c,4,9);");
#	ga_a := bat.insert(c,4,9);
#	mil.line("insert(c,5,int(nil));");
#	ha_a := calc.int(nil);
#	ia_a := bat.insert(c,5,ha_a);
#	mil.line("c.print();");
#	ja_a := io.print(c);
#	mil.line("var d:= bbp.new(int,int);");
#	d := bbp.new(nil:int,nil:int);
#	mil.line("insert(d,1,1);");
#	ka_a := bat.insert(d,1,1);
#	mil.line("insert(d,2,2);");
#	la_a := bat.insert(d,2,2);
#	mil.line("insert(d,4,3);");
#	ma_a := bat.insert(d,4,3);
#	mil.line("insert(d,4,4);");
#	na_a := bat.insert(d,4,4);
#	mil.line("insert(d,9,4);");
#	oa_a := bat.insert(d,9,4);
#	mil.line("insert(d,int(nil),5);");
#	pa_a := calc.int(nil);
#	qa_a := bat.insert(d,pa_a,5);
#	mil.line("d.print();");
#	ra_a := io.print(d);
#	mil.line("var z:=c.semijoin(d);");
#	z := algebra.semijoin(c,d);
#	mil.line("z.print();");
#	sa_a := io.print(z);
#	mil.line("z:=c.reverse().semijoin(d);");
#	ta_a := bat.reverse(c);
#	z := algebra.semijoin(ta_a,d);
#	mil.line("z.print();");
#	ua_a := io.print(z);
#	mil.line("z:=d.semijoin(c);");
#	z := algebra.semijoin(d,c);
#	mil.line("z.print();");
#	va_a := io.print(z);
#	mil.line("# String management\n");
#	b := bbp.new(nil:oid,nil:str);
#	mil.line("b.insert(oid(1),\"hello\");");
#	wa_a := calc.oid(1);
#	xa_a := bat.insert(b,wa_a,"hello");
#	mil.line("b.insert(oid(2),\"world\");");
#	ya_a := calc.oid(2);
#	ab_a := bat.insert(b,ya_a,"world");
#	mil.line("b.insert(oid(3),\"..\");");
#	bb_a := calc.oid(3);
#	cb_a := bat.insert(b,bb_a,"..");
#	mil.line("var z1:= b.semijoin(b);");
#	z1 := algebra.semijoin(b,b);
#	mil.line("z1.print();");
#	db_a := io.print(z1);
#	mil.line("quit();");
#	eb_a := clients.quit();
#
function user.main():void;              #  0 main:void := user.main() {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         # 11 aa_a:oid := CALCint2oid(_12:int) 
    ba_a := calc.setoid(aa_a);          # 12 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("# testing merge semijoin\n"); 
    c := bat.new(nil:int,nil:int);      # 14 c:bat[:int,:int] := CMDBATnew(_16:int, _16:int) {G}
#	io.print("insert(c,1,1);"); 
    ca_a := bat.insert(c,1,1);          # 16 ca_a:bat[:int,:int] := BKCinsert_bun(c:bat[:int,:int], _19:int, _19:int) {G}
#	io.print("insert(c,2,2);"); 
    da_a := bat.insert(c,2,2);          # 18 da_a:bat[:int,:int] := BKCinsert_bun(c:bat[:int,:int], _22:int, _22:int) {G}
#	io.print("insert(c,3,4);"); 
    ea_a := bat.insert(c,3,4);          # 20 ea_a:bat[:int,:int] := BKCinsert_bun(c:bat[:int,:int], _25:int, _26:int) {G}
#	io.print("insert(c,4,4);"); 
    fa_a := bat.insert(c,4,4);          # 22 fa_a:bat[:int,:int] := BKCinsert_bun(c:bat[:int,:int], _26:int, _26:int) {G}
#	io.print("insert(c,4,9);"); 
    ga_a := bat.insert(c,4,9);          # 24 ga_a:bat[:int,:int] := BKCinsert_bun(c:bat[:int,:int], _26:int, _31:int) {G}
#	io.print("insert(c,5,int(nil));"); 
    ha_a := calc.int(nil:void);         # 26 ha_a:int := CALCnil2int(_34:void) 
    ia_a := bat.insert(c,5,ha_a);       # 27 ia_a:bat[:int,:int] := BKCinsert_bun(c:bat[:int,:int], _36:int, ha_a:int) {G}
#	io.print("c.print();"); 
    ja_a := io.print(c);                # 29 ja_a:void := IOprint_val(c:bat[:int,:int]) 
#	io.print("var d:= bat.new(int,int);"); 
    d := bat.new(nil:int,nil:int);      # 31 d:bat[:int,:int] := CMDBATnew(_16:int, _16:int) {G}
#	io.print("insert(d,1,1);"); 
    ka_a := bat.insert(d,1,1);          # 33 ka_a:bat[:int,:int] := BKCinsert_bun(d:bat[:int,:int], _19:int, _19:int) {G}
#	io.print("insert(d,2,2);"); 
    la_a := bat.insert(d,2,2);          # 35 la_a:bat[:int,:int] := BKCinsert_bun(d:bat[:int,:int], _22:int, _22:int) {G}
#	io.print("insert(d,4,3);"); 
    ma_a := bat.insert(d,4,3);          # 37 ma_a:bat[:int,:int] := BKCinsert_bun(d:bat[:int,:int], _26:int, _25:int) {G}
#	io.print("insert(d,4,4);"); 
    na_a := bat.insert(d,4,4);          # 39 na_a:bat[:int,:int] := BKCinsert_bun(d:bat[:int,:int], _26:int, _26:int) {G}
#	io.print("insert(d,9,4);"); 
    oa_a := bat.insert(d,9,4);          # 41 oa_a:bat[:int,:int] := BKCinsert_bun(d:bat[:int,:int], _31:int, _26:int) {G}
#	io.print("insert(d,int(nil),5);"); 
    pa_a := calc.int(nil:void);         # 43 pa_a:int := CALCnil2int(_34:void) 
    qa_a := bat.insert(d,pa_a,5);       # 44 qa_a:bat[:int,:int] := BKCinsert_bun(d:bat[:int,:int], pa_a:int, _36:int) {G}
#	io.print("d.print();"); 
    ra_a := io.print(d);                # 46 ra_a:void := IOprint_val(d:bat[:int,:int]) 
#	io.print("var z:=c.semijoin(d);"); 
    z := algebra.semijoin(c,d);         # 48 z:bat[:int,:int] := ALGsemijoin(c:bat[:int,:int], d:bat[:int,:int]) {G}
#	io.print("z.print();"); 
    sa_a := io.print(z);                # 50 sa_a:void := IOprint_val(z:bat[:int,:int]) 
#	io.print("z:=c.reverse().semijoin(d);"); 
    ta_a := bat.reverse(c);             # 52 ta_a:bat[:int,:int] := BKCreverse(c:bat[:int,:int]) {G}
    z := algebra.semijoin(ta_a,d);      # 53 z:bat[:int,:int] := ALGsemijoin(ta_a:bat[:int,:int], d:bat[:int,:int]) {G}
#	io.print("z.print();"); 
    ua_a := io.print(z);                # 55 ua_a:void := IOprint_val(z:bat[:int,:int]) 
#	io.print("z:=d.semijoin(c);"); 
    z := algebra.semijoin(d,c);         # 57 z:bat[:int,:int] := ALGsemijoin(d:bat[:int,:int], c:bat[:int,:int]) {G}
#	io.print("z.print();"); 
    va_a := io.print(z);                # 59 va_a:void := IOprint_val(z:bat[:int,:int]) 
#	io.print("# String management\n"); 
    b := bat.new(nil:oid,nil:str);      # 61 b:bat[:oid,:str] := CMDBATnew(_69:oid, _70:str) {G}
#	io.print("b.insert(oid(1),\"hello\");"); 
    wa_a := calc.oid(1);                # 63 wa_a:oid := CALCint2oid(_73:int) 
    xa_a := bat.insert(b,wa_a,"hello"); # 64 xa_a:bat[:oid,:str] := BKCinsert_bun(b:bat[:oid,:str], wa_a:oid, _75:str) {G}
#	io.print("b.insert(oid(2),\"world\");"); 
    ya_a := calc.oid(2);                # 66 ya_a:oid := CALCint2oid(_78:int) 
    ab_a := bat.insert(b,ya_a,"world"); # 67 ab_a:bat[:oid,:str] := BKCinsert_bun(b:bat[:oid,:str], ya_a:oid, _80:str) {G}
#	io.print("b.insert(oid(3),\"..\");"); 
    bb_a := calc.oid(3);                # 69 bb_a:oid := CALCint2oid(_83:int) 
    cb_a := bat.insert(b,bb_a,"..");    # 70 cb_a:bat[:oid,:str] := BKCinsert_bun(b:bat[:oid,:str], bb_a:oid, _85:str) {G}
#	io.print("var z1:= b.semijoin(b);"); 
    z1 := algebra.semijoin(b,b);        # 72 z1:bat[:oid,:str] := ALGsemijoin(b:bat[:oid,:str], b:bat[:oid,:str]) {G}
#	io.print("z1.print();"); 
    db_a := io.print(z1);               # 74 db_a:void := IOprint_val(z1:bat[:oid,:str]) 
#	io.print("quit();"); 
    eb_a := clients.quit();             # 76 eb_a:void := CLTquit() 
end main;	# 77  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 3,	  4	  ]
[ 4,	  4	  ]
[ 4,	  9	  ]
[ 5,	  nil	  ]
#var d:= bbp.new(int,int);
#insert(d,1,1);
#insert(d,2,2);
#insert(d,4,3);
#insert(d,4,4);
#insert(d,9,4);
#insert(d,int(nil),5);
#d.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 4,	  3	  ]
[ 4,	  4	  ]
[ 9,	  4	  ]
[ nil,	  5	  ]
#var z:=c.semijoin(d);
#z.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 4,	  4	  ]
[ 4,	  9	  ]
#z:=c.reverse().semijoin(d);
#z.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 4,	  3	  ]
[ 4,	  4	  ]
[ 9,	  4	  ]
#z:=d.semijoin(c);
#z.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 4,	  3	  ]
[ 4,	  4	  ]
## String management\n
#b.insert(oid(1),\"hello\");
#b.insert(oid(2),\"world\");
#b.insert(oid(3),\"..\");
#var z1:= b.semijoin(b);
#z1.print();
#-------------------------#
# h	t		  # name
# void	str		  # type
#-------------------------#
[ 1@0,	  "hello"	  ]
[ 2@0,	  "world"	  ]
[ 3@0,	  ".."		  ]
#quit();

# 00:12:28 >  
# 00:12:28 >  Done.
# 00:12:28 >  

