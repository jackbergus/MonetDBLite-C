stdout of test 'test_35` in directory 'tests/suite_00` itself:


# 00:12:28 >  
# 00:12:28 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_35.mal </dev/null
# 00:12:28 >  

# MonetDB server v5.9.0, based on kernel v1.27.0
# Serving database 'mTests_tests_suite_00', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008- MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:30579/
function user.main():void;
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);
    ba_a := calc.setoid(aa_a);
#	io.print("# testing merge semijoin\n"); 
    c := bat.new(nil:int,nil:int);
#	io.print("insert(c,1,1);"); 
    ca_a := bat.insert(c,1,1);
#	io.print("insert(c,2,2);"); 
    da_a := bat.insert(c,2,2);
#	io.print("insert(c,3,4);"); 
    ea_a := bat.insert(c,3,4);
#	io.print("insert(c,4,4);"); 
    fa_a := bat.insert(c,4,4);
#	io.print("insert(c,4,9);"); 
    ga_a := bat.insert(c,4,9);
#	io.print("insert(c,5,int(nil));"); 
    ha_a := calc.int(nil);
    ia_a := bat.insert(c,5,ha_a);
#	io.print("c.print();"); 
    ja_a := io.print(c);
#	io.print("var d:= bat.new(int,int);"); 
    d := bat.new(nil:int,nil:int);
#	io.print("insert(d,1,1);"); 
    ka_a := bat.insert(d,1,1);
#	io.print("insert(d,2,2);"); 
    la_a := bat.insert(d,2,2);
#	io.print("insert(d,4,3);"); 
    ma_a := bat.insert(d,4,3);
#	io.print("insert(d,4,4);"); 
    na_a := bat.insert(d,4,4);
#	io.print("insert(d,9,4);"); 
    oa_a := bat.insert(d,9,4);
#	io.print("insert(d,int(nil),5);"); 
    pa_a := calc.int(nil);
    qa_a := bat.insert(d,pa_a,5);
#	io.print("d.print();"); 
    ra_a := io.print(d);
#	io.print("var z:=c.semijoin(d);"); 
    z := algebra.semijoin(c,d);
#	io.print("z.print();"); 
    sa_a := io.print(z);
#	io.print("z:=c.reverse().semijoin(d);"); 
    ta_a := bat.reverse(c);
    z := algebra.semijoin(ta_a,d);
#	io.print("z.print();"); 
    ua_a := io.print(z);
#	io.print("z:=d.semijoin(c);"); 
    z := algebra.semijoin(d,c);
#	io.print("z.print();"); 
    va_a := io.print(z);
#	io.print("# String management\n"); 
    b := bat.new(nil:oid,nil:str);
#	io.print("b.insert(oid(1),\"hello\");"); 
    wa_a := calc.oid(1);
    xa_a := bat.insert(b,wa_a,"hello");
#	io.print("b.insert(oid(2),\"world\");"); 
    ya_a := calc.oid(2);
    ab_a := bat.insert(b,ya_a,"world");
#	io.print("b.insert(oid(3),\"..\");"); 
    bb_a := calc.oid(3);
    cb_a := bat.insert(b,bb_a,"..");
#	io.print("var z1:= b.semijoin(b);"); 
    z1 := algebra.semijoin(b,b);
#	io.print("z1.print();"); 
    db_a := io.print(z1);
#	io.print("quit();"); 
    eb_a := clients.quit();
end main;
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 3,	  4	  ]
[ 4,	  4	  ]
[ 4,	  9	  ]
[ 5,	  nil	  ]
#var d:= bbp.new(int,int);
#insert(d,1,1);
#insert(d,2,2);
#insert(d,4,3);
#insert(d,4,4);
#insert(d,9,4);
#insert(d,int(nil),5);
#d.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 4,	  3	  ]
[ 4,	  4	  ]
[ 9,	  4	  ]
[ nil,	  5	  ]
#var z:=c.semijoin(d);
#z.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 4,	  4	  ]
[ 4,	  9	  ]
#z:=c.reverse().semijoin(d);
#z.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 4,	  3	  ]
[ 4,	  4	  ]
[ 9,	  4	  ]
#z:=d.semijoin(c);
#z.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 4,	  3	  ]
[ 4,	  4	  ]
## String management\n
#b.insert(oid(1),\"hello\");
#b.insert(oid(2),\"world\");
#b.insert(oid(3),\"..\");
#var z1:= b.semijoin(b);
#z1.print();
#-------------------------#
# h	t		  # name
# void	str		  # type
#-------------------------#
[ 1@0,	  "hello"	  ]
[ 2@0,	  "world"	  ]
[ 3@0,	  ".."		  ]
#quit();

# 00:12:28 >  
# 00:12:28 >  Done.
# 00:12:28 >  

