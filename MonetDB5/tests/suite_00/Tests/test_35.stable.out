stdout of test 'test_35` in directory 'tests/suite_00` itself:


# 00:12:28 >  
# 00:12:28 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_35.mal </dev/null
# 00:12:28 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("# testing merge semijoin\n");
#	c := bbp.new(nil:int,nil:int);
#	mil.line("insert(c,1,1);");
#	ca_a := bat.insert(c,1,1);
#	mil.line("insert(c,2,2);");
#	da_a := bat.insert(c,2,2);
#	mil.line("insert(c,3,4);");
#	ea_a := bat.insert(c,3,4);
#	mil.line("insert(c,4,4);");
#	fa_a := bat.insert(c,4,4);
#	mil.line("insert(c,4,9);");
#	ga_a := bat.insert(c,4,9);
#	mil.line("insert(c,5,int(nil));");
#	ha_a := calc.int(nil);
#	ia_a := bat.insert(c,5,ha_a);
#	mil.line("c.print();");
#	ja_a := io.print(c);
#	mil.line("var d:= bbp.new(int,int);");
#	d := bbp.new(nil:int,nil:int);
#	mil.line("insert(d,1,1);");
#	ka_a := bat.insert(d,1,1);
#	mil.line("insert(d,2,2);");
#	la_a := bat.insert(d,2,2);
#	mil.line("insert(d,4,3);");
#	ma_a := bat.insert(d,4,3);
#	mil.line("insert(d,4,4);");
#	na_a := bat.insert(d,4,4);
#	mil.line("insert(d,9,4);");
#	oa_a := bat.insert(d,9,4);
#	mil.line("insert(d,int(nil),5);");
#	pa_a := calc.int(nil);
#	qa_a := bat.insert(d,pa_a,5);
#	mil.line("d.print();");
#	ra_a := io.print(d);
#	mil.line("var z:=c.semijoin(d);");
#	z := algebra.semijoin(c,d);
#	mil.line("z.print();");
#	sa_a := io.print(z);
#	mil.line("z:=c.reverse().semijoin(d);");
#	ta_a := bat.reverse(c);
#	z := algebra.semijoin(ta_a,d);
#	mil.line("z.print();");
#	ua_a := io.print(z);
#	mil.line("z:=d.semijoin(c);");
#	z := algebra.semijoin(d,c);
#	mil.line("z.print();");
#	va_a := io.print(z);
#	mil.line("# String management\n");
#	b := bbp.new(nil:oid,nil:str);
#	mil.line("b.insert(oid(1),\"hello\");");
#	wa_a := calc.oid(1);
#	xa_a := bat.insert(b,wa_a,"hello");
#	mil.line("b.insert(oid(2),\"world\");");
#	ya_a := calc.oid(2);
#	ab_a := bat.insert(b,ya_a,"world");
#	mil.line("b.insert(oid(3),\"..\");");
#	bb_a := calc.oid(3);
#	cb_a := bat.insert(b,bb_a,"..");
#	mil.line("var z1:= b.semijoin(b);");
#	z1 := algebra.semijoin(b,b);
#	mil.line("z1.print();");
#	db_a := io.print(z1);
#	mil.line("quit();");
#	eb_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  (_31:str)
#Predefined code segment 	# 2  (_32:str)
#The compiler can not guarantee an accurate compilation, 	# 3  (_33:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  (_34:str)
#A few guidelines to maximize usefullness. 	# 5  (_35:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  (_36:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  (_37:str)
#use the "mil_schema" for additional support routines 	# 8  (_38:str)
    mil.line("setoid(oid(20000000));");	# 9 MILline (_39:void)<-(_40:str)
    aa_a := calc.oid(20000000);	# 10 CALCint2oid (aa_a:oid)<-(_42:int)
    ba_a := calc.setoid(aa_a);	# 11 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("# testing merge semijoin\n");	# 12 MILline (_44:void)<-(_45:str)
    c := bat.new(nil:int,nil:int);	# 13 CMDBATnew (c:bat[:int,:int])<-(_47:int)(_47:int)
    mil.line("insert(c,1,1);");	# 14 MILline (_48:void)<-(_49:str)
    ca_a := bat.insert(c,1,1);	# 15 BKCinsert_bun (ca_a:void)<-(c:bat[:int,:int])(_51:int)(_51:int)
    mil.line("insert(c,2,2);");	# 16 MILline (_52:void)<-(_53:str)
    da_a := bat.insert(c,2,2);	# 17 BKCinsert_bun (da_a:void)<-(c:bat[:int,:int])(_55:int)(_55:int)
    mil.line("insert(c,3,4);");	# 18 MILline (_56:void)<-(_57:str)
    ea_a := bat.insert(c,3,4);	# 19 BKCinsert_bun (ea_a:void)<-(c:bat[:int,:int])(_59:int)(_60:int)
    mil.line("insert(c,4,4);");	# 20 MILline (_61:void)<-(_62:str)
    fa_a := bat.insert(c,4,4);	# 21 BKCinsert_bun (fa_a:void)<-(c:bat[:int,:int])(_60:int)(_60:int)
    mil.line("insert(c,4,9);");	# 22 MILline (_64:void)<-(_65:str)
    ga_a := bat.insert(c,4,9);	# 23 BKCinsert_bun (ga_a:void)<-(c:bat[:int,:int])(_60:int)(_67:int)
    mil.line("insert(c,5,int(nil));");	# 24 MILline (_68:void)<-(_69:str)
    ha_a := calc.int(nil);	# 25 CALCnil2int (ha_a:int)<-(_71:void)
    ia_a := bat.insert(c,5,ha_a);	# 26 BKCinsert_bun (ia_a:void)<-(c:bat[:int,:int])(_73:int)(ha_a:int)
    mil.line("c.print();");	# 27 MILline (_74:void)<-(_75:str)
    ja_a := io.print(c);	# 28 IOprint_val (ja_a:int)<-(c:bat[:int,:int])
    mil.line("var d:= bat.new(int,int);");	# 29 MILline (_77:void)<-(_78:str)
    d := bat.new(nil:int,nil:int);	# 30 CMDBATnew (d:bat[:int,:int])<-(_47:int)(_47:int)
    mil.line("insert(d,1,1);");	# 31 MILline (_80:void)<-(_81:str)
    ka_a := bat.insert(d,1,1);	# 32 BKCinsert_bun (ka_a:void)<-(d:bat[:int,:int])(_51:int)(_51:int)
    mil.line("insert(d,2,2);");	# 33 MILline (_83:void)<-(_84:str)
    la_a := bat.insert(d,2,2);	# 34 BKCinsert_bun (la_a:void)<-(d:bat[:int,:int])(_55:int)(_55:int)
    mil.line("insert(d,4,3);");	# 35 MILline (_86:void)<-(_87:str)
    ma_a := bat.insert(d,4,3);	# 36 BKCinsert_bun (ma_a:void)<-(d:bat[:int,:int])(_60:int)(_59:int)
    mil.line("insert(d,4,4);");	# 37 MILline (_89:void)<-(_90:str)
    na_a := bat.insert(d,4,4);	# 38 BKCinsert_bun (na_a:void)<-(d:bat[:int,:int])(_60:int)(_60:int)
    mil.line("insert(d,9,4);");	# 39 MILline (_92:void)<-(_93:str)
    oa_a := bat.insert(d,9,4);	# 40 BKCinsert_bun (oa_a:void)<-(d:bat[:int,:int])(_67:int)(_60:int)
    mil.line("insert(d,int(nil),5);");	# 41 MILline (_95:void)<-(_96:str)
    pa_a := calc.int(nil);	# 42 CALCnil2int (pa_a:int)<-(_71:void)
    qa_a := bat.insert(d,pa_a,5);	# 43 BKCinsert_bun (qa_a:void)<-(d:bat[:int,:int])(pa_a:int)(_73:int)
    mil.line("d.print();");	# 44 MILline (_99:void)<-(_100:str)
    ra_a := io.print(d);	# 45 IOprint_val (ra_a:int)<-(d:bat[:int,:int])
    mil.line("var z:=c.semijoin(d);");	# 46 MILline (_102:void)<-(_103:str)
    z := algebra.semijoin(c,d);	# 47 ALGsemijoin (z:bat[:int,:int])<-(c:bat[:int,:int])(d:bat[:int,:int])
    mil.line("z.print();");	# 48 MILline (_105:void)<-(_106:str)
    sa_a := io.print(z);	# 49 IOprint_val (sa_a:int)<-(z:bat[:int,:int])
    mil.line("z:=c.reverse().semijoin(d);");	# 50 MILline (_108:void)<-(_109:str)
    ta_a := bat.reverse(c);	# 51 BKCreverse (ta_a:bat[:int,:int])<-(c:bat[:int,:int])
    z := algebra.semijoin(ta_a,d);	# 52 ALGsemijoin (z:bat[:int,:int])<-(ta_a:bat[:int,:int])(d:bat[:int,:int])
    mil.line("z.print();");	# 53 MILline (_111:void)<-(_106:str)
    ua_a := io.print(z);	# 54 IOprint_val (ua_a:int)<-(z:bat[:int,:int])
    mil.line("z:=d.semijoin(c);");	# 55 MILline (_113:void)<-(_114:str)
    z := algebra.semijoin(d,c);	# 56 ALGsemijoin (z:bat[:int,:int])<-(d:bat[:int,:int])(c:bat[:int,:int])
    mil.line("z.print();");	# 57 MILline (_115:void)<-(_106:str)
    va_a := io.print(z);	# 58 IOprint_val (va_a:int)<-(z:bat[:int,:int])
    mil.line("# String management\n");	# 59 MILline (_117:void)<-(_118:str)
    b := bat.new(nil:oid,nil:str);	# 60 CMDBATnew (b:bat[:oid,:str])<-(_120:oid)(_121:str)
    mil.line("b.insert(oid(1),\"hello\");");	# 61 MILline (_122:void)<-(_123:str)
    wa_a := calc.oid(1);	# 62 CALCint2oid (wa_a:oid)<-(_125:int)
    xa_a := bat.insert(b,wa_a,"hello");	# 63 BKCinsert_bun (xa_a:void)<-(b:bat[:oid,:str])(wa_a:oid)(_127:str)
    mil.line("b.insert(oid(2),\"world\");");	# 64 MILline (_128:void)<-(_129:str)
    ya_a := calc.oid(2);	# 65 CALCint2oid (ya_a:oid)<-(_131:int)
    ab_a := bat.insert(b,ya_a,"world");	# 66 BKCinsert_bun (ab_a:void)<-(b:bat[:oid,:str])(ya_a:oid)(_133:str)
    mil.line("b.insert(oid(3),\"..\");");	# 67 MILline (_134:void)<-(_135:str)
    bb_a := calc.oid(3);	# 68 CALCint2oid (bb_a:oid)<-(_137:int)
    cb_a := bat.insert(b,bb_a,"..");	# 69 BKCinsert_bun (cb_a:void)<-(b:bat[:oid,:str])(bb_a:oid)(_139:str)
    mil.line("var z1:= b.semijoin(b);");	# 70 MILline (_140:void)<-(_141:str)
    z1 := algebra.semijoin(b,b);	# 71 ALGsemijoin (z1:bat[:oid,:str])<-(b:bat[:oid,:str])(b:bat[:oid,:str])
    mil.line("z1.print();");	# 72 MILline (_143:void)<-(_144:str)
    db_a := io.print(z1);	# 73 IOprint_val (db_a:int)<-(z1:bat[:oid,:str])
    mil.line("quit();");	# 74 MILline (_146:void)<-(_147:str)
    eb_a := clients.quit();	# 75 CLTquit (eb_a:void)
end main;	# 76  
#setoid(oid(20000000));
## testing merge semijoin\n
#insert(c,1,1);
#insert(c,2,2);
#insert(c,3,4);
#insert(c,4,4);
#insert(c,4,9);
#insert(c,5,int(nil));
#c.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 3,	  4	  ]
[ 4,	  4	  ]
[ 4,	  9	  ]
[ 5,	  nil	  ]
#var d:= bbp.new(int,int);
#insert(d,1,1);
#insert(d,2,2);
#insert(d,4,3);
#insert(d,4,4);
#insert(d,9,4);
#insert(d,int(nil),5);
#d.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 4,	  3	  ]
[ 4,	  4	  ]
[ 9,	  4	  ]
[ nil,	  5	  ]
#var z:=c.semijoin(d);
#z.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 4,	  4	  ]
[ 4,	  9	  ]
#z:=c.reverse().semijoin(d);
#z.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 4,	  3	  ]
[ 4,	  4	  ]
[ 9,	  4	  ]
#z:=d.semijoin(c);
#z.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 4,	  3	  ]
[ 4,	  4	  ]
## String management\n
#b.insert(oid(1),\"hello\");
#b.insert(oid(2),\"world\");
#b.insert(oid(3),\"..\");
#var z1:= b.semijoin(b);
#z1.print();
#-------------------------#
# h	t		  # name
# void	str		  # type
#-------------------------#
[ 1@0,	  "hello"	  ]
[ 2@0,	  "world"	  ]
[ 3@0,	  ".."		  ]
#quit();

# 00:12:28 >  
# 00:12:28 >  Done.
# 00:12:28 >  

