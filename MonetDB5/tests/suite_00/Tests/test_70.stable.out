stdout of test 'test_70` in directory 'tests/suite_00` itself:


# 00:12:29 >  
# 00:12:29 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_70.mal </dev/null
# 00:12:29 >  

# MonetDB server v5.9.0, based on kernel v1.27.0
# Serving database 'mTests_tests_suite_00', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008- MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:30579/
function user.main():void;
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);
    ba_a := calc.setoid(aa_a);
#	io.print("#This collection of examples is geared at the support\n"); 
#	io.print("#of the data mining tool\n"); 
#	io.print("var b:= bat.new(int,int);"); 
    b := bat.new(nil:int,nil:int);
#	io.print("b.insert(1,15);"); 
    ca_a := bat.insert(b,1,15);
#	io.print("b.insert(2,15);"); 
    da_a := bat.insert(b,2,15);
#	io.print("b.sum().print();"); 
    ea_a := aggr.sum(b);
    fa_a := io.print(ea_a);
#	io.print("b.insert(3,int(nil));"); 
    ga_a := calc.int(nil);
    ha_a := bat.insert(b,3,ga_a);
#	io.print("b.sum().print();"); 
    ia_a := aggr.sum(b);
    ja_a := io.print(ia_a);
#	io.print("b.insert(4,15);"); 
    ka_a := bat.insert(b,4,15);
#	io.print("b.insert(5,25);"); 
    la_a := bat.insert(b,5,25);
#	io.print("b.insert(6,36);"); 
    ma_a := bat.insert(b,6,36);
#	io.print("b.insert(7,49);"); 
    na_a := bat.insert(b,7,49);
#	io.print("b.insert(8,64);"); 
    oa_a := bat.insert(b,8,64);
#	io.print("b.insert(9,int(nil));"); 
    pa_a := calc.int(nil);
    qa_a := bat.insert(b,9,pa_a);
#	io.print("var t:= b.histogram();"); 
    t := aggr.histogram(b);
#	io.print("t.print();"); 
    ra_a := io.print(t);
#	io.print("commit();"); 
    sa_a := transaction.commit();
#	io.print("var s:= bat.new(int,str);"); 
    s := bat.new(nil:int,nil:str);
#	io.print("insert(s,1,\"hello\");"); 
    ta_a := bat.insert(s,1,"hello");
#	io.print("insert(s,2,\"hello\");"); 
    ua_a := bat.insert(s,2,"hello");
#	io.print("insert(s,3,\"hello\");"); 
    va_a := bat.insert(s,3,"hello");
#	io.print("insert(s,4,\"dello\");"); 
    wa_a := bat.insert(s,4,"dello");
#	io.print("insert(s,5,\"eello\");"); 
    xa_a := bat.insert(s,5,"eello");
#	io.print("insert(s,6,\"fello\");"); 
    ya_a := bat.insert(s,6,"fello");
#	io.print("insert(s,7,\"fello\");"); 
    ab_a := bat.insert(s,7,"fello");
#	io.print("insert(s,8,\"fello\");"); 
    bb_a := bat.insert(s,8,"fello");
#	io.print("var t2:= s.histogram();"); 
    t2 := aggr.histogram(s);
#	io.print("t2.print();"); 
    cb_a := io.print(t2);
#	io.print("#It requires a few additional routines\n"); 
    c := bat.new(nil:int,nil:int);
#	io.print("c.insert(1,15);"); 
    db_a := bat.insert(c,1,15);
#	io.print("c.insert(2,15);"); 
    eb_a := bat.insert(c,2,15);
#	io.print("c.insert(3,int(nil));"); 
    fb_a := calc.int(nil);
    gb_a := bat.insert(c,3,fb_a);
#	io.print("c.insert(4,0);"); 
    hb_a := bat.insert(c,4,0);
#	io.print("c.insert(5,30);"); 
    ib_a := bat.insert(c,5,30);
#	io.print("c.print();"); 
    jb_a := io.print(c);
#	io.print("quit();"); 
    nb_a := clients.quit();
end main;
[ 30 ]
#b.insert(3,int(nil));
#b.sum().print();
[ nil ]
#b.insert(4,15);
#b.insert(5,25);
#b.insert(6,36);
#b.insert(7,49);
#b.insert(8,64);
#b.insert(9,int(nil));
#var t:= b.histogram();
#t.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 15,	  3	  ]
[ nil,	  2	  ]
[ 25,	  1	  ]
[ 36,	  1	  ]
[ 49,	  1	  ]
[ 64,	  1	  ]
#commit();
#var s:= bbp.new(int,str);
#insert(s,1,\"hello\");
#insert(s,2,\"hello\");
#insert(s,3,\"hello\");
#insert(s,4,\"dello\");
#insert(s,5,\"eello\");
#insert(s,6,\"fello\");
#insert(s,7,\"fello\");
#insert(s,8,\"fello\");
#var t2:= s.histogram();
#t2.print();
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "hello",	  3	  ]
[ "dello",	  1	  ]
[ "eello",	  1	  ]
[ "fello",	  3	  ]
##It requires a few additional routines\n
#c.insert(1,15);
#c.insert(2,15);
#c.insert(3,int(nil));
#c.insert(4,0);
#c.insert(5,30);
#c.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  15	  ]
[ 2,	  15	  ]
[ 3,	  nil	  ]
[ 4,	  0	  ]
[ 5,	  30	  ]
#quit();

# 00:12:29 >  
# 00:12:29 >  Done.
# 00:12:29 >  

