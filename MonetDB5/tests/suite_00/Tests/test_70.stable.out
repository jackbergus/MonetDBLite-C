stdout of test 'test_70` in directory 'tests/suite_00` itself:


# 00:12:29 >  
# 00:12:29 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_70.mal </dev/null
# 00:12:29 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("#This collection of examples is geared at the support\n");
#	mil.line("#of the data mining tool\n");
#	mil.line("var b:= bbp.new(int,int);");
#	b := bbp.new(nil:int,nil:int);
#	mil.line("b.insert(1,15);");
#	ca_a := bat.insert(b,1,15);
#	mil.line("b.insert(2,15);");
#	da_a := bat.insert(b,2,15);
#	mil.line("b.sum().print();");
#	ea_a := aggr.sum(b);
#	fa_a := io.print(ea_a);
#	mil.line("b.insert(3,int(nil));");
#	ga_a := calc.int(nil);
#	ha_a := bat.insert(b,3,ga_a);
#	mil.line("b.sum().print();");
#	ia_a := aggr.sum(b);
#	ja_a := io.print(ia_a);
#	mil.line("b.insert(4,15);");
#	ka_a := bat.insert(b,4,15);
#	mil.line("b.insert(5,25);");
#	la_a := bat.insert(b,5,25);
#	mil.line("b.insert(6,36);");
#	ma_a := bat.insert(b,6,36);
#	mil.line("b.insert(7,49);");
#	na_a := bat.insert(b,7,49);
#	mil.line("b.insert(8,64);");
#	oa_a := bat.insert(b,8,64);
#	mil.line("b.insert(9,int(nil));");
#	pa_a := calc.int(nil);
#	qa_a := bat.insert(b,9,pa_a);
#	mil.line("var t:= b.histogram();");
#	t := aggr.histogram(b);
#	mil.line("t.print();");
#	ra_a := io.print(t);
#	mil.line("commit();");
#	sa_a := transaction.commit();
#	mil.line("var s:= bbp.new(int,str);");
#	s := bbp.new(nil:int,nil:str);
#	mil.line("insert(s,1,\"hello\");");
#	ta_a := bat.insert(s,1,"hello");
#	mil.line("insert(s,2,\"hello\");");
#	ua_a := bat.insert(s,2,"hello");
#	mil.line("insert(s,3,\"hello\");");
#	va_a := bat.insert(s,3,"hello");
#	mil.line("insert(s,4,\"dello\");");
#	wa_a := bat.insert(s,4,"dello");
#	mil.line("insert(s,5,\"eello\");");
#	xa_a := bat.insert(s,5,"eello");
#	mil.line("insert(s,6,\"fello\");");
#	ya_a := bat.insert(s,6,"fello");
#	mil.line("insert(s,7,\"fello\");");
#	ab_a := bat.insert(s,7,"fello");
#	mil.line("insert(s,8,\"fello\");");
#	bb_a := bat.insert(s,8,"fello");
#	mil.line("var t2:= s.histogram();");
#	t2 := aggr.histogram(s);
#	mil.line("t2.print();");
#	cb_a := io.print(t2);
#	mil.line("#It requires a few additional routines\n");
#	c := bbp.new(nil:int,nil:int);
#	mil.line("c.insert(1,15);");
#	db_a := bat.insert(c,1,15);
#	mil.line("c.insert(2,15);");
#	eb_a := bat.insert(c,2,15);
#	mil.line("c.insert(3,int(nil));");
#	fb_a := calc.int(nil);
#	gb_a := bat.insert(c,3,fb_a);
#	mil.line("c.insert(4,0);");
#	hb_a := bat.insert(c,4,0);
#	mil.line("c.insert(5,30);");
#	ib_a := bat.insert(c,5,30);
#	mil.line("c.print();");
#	jb_a := io.print(c);
#	mil.line("quit();");
#	nb_a := clients.quit();
#
function user.main():void;              #  0 main:void {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         # 11 aa_a:oid := CALCint2oid(_12:int) 
    ba_a := calc.setoid(aa_a);          # 12 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("#This collection of examples is geared at the support\n"); 
#	io.print("#of the data mining tool\n"); 
#	io.print("var b:= bat.new(int,int);"); 
    b := bat.new(nil:int,nil:int);      # 16 b:bat[:int,:int] := CMDBATnew(_18:int, _18:int) {G}
#	io.print("b.insert(1,15);"); 
    ca_a := bat.insert(b,1,15);         # 18 ca_a:void := BKCinsert_bun(b:bat[:int,:int], _21:int, _22:int) 
#	io.print("b.insert(2,15);"); 
    da_a := bat.insert(b,2,15);         # 20 da_a:void := BKCinsert_bun(b:bat[:int,:int], _25:int, _22:int) 
#	io.print("b.sum().print();"); 
    ea_a := aggr.sum(b);                # 22 ea_a:dbl := aggr.sum(b:bat[:int,:int]) 
    fa_a := io.print(ea_a);             # 23 fa_a:void := IOprint_val(ea_a:dbl) 
#	io.print("b.insert(3,int(nil));"); 
    ga_a := calc.int(nil:void);         # 25 ga_a:int := CALCnil2int(_31:void) 
    ha_a := bat.insert(b,3,ga_a);       # 26 ha_a:void := BKCinsert_bun(b:bat[:int,:int], _33:int, ga_a:int) 
#	io.print("b.sum().print();"); 
    ia_a := aggr.sum(b);                # 28 ia_a:dbl := aggr.sum(b:bat[:int,:int]) 
    ja_a := io.print(ia_a);             # 29 ja_a:void := IOprint_val(ia_a:dbl) 
#	io.print("b.insert(4,15);"); 
    ka_a := bat.insert(b,4,15);         # 31 ka_a:void := BKCinsert_bun(b:bat[:int,:int], _39:int, _22:int) 
#	io.print("b.insert(5,25);"); 
    la_a := bat.insert(b,5,25);         # 33 la_a:void := BKCinsert_bun(b:bat[:int,:int], _42:int, _43:int) 
#	io.print("b.insert(6,36);"); 
    ma_a := bat.insert(b,6,36);         # 35 ma_a:void := BKCinsert_bun(b:bat[:int,:int], _46:int, _47:int) 
#	io.print("b.insert(7,49);"); 
    na_a := bat.insert(b,7,49);         # 37 na_a:void := BKCinsert_bun(b:bat[:int,:int], _50:int, _51:int) 
#	io.print("b.insert(8,64);"); 
    oa_a := bat.insert(b,8,64);         # 39 oa_a:void := BKCinsert_bun(b:bat[:int,:int], _54:int, _55:int) 
#	io.print("b.insert(9,int(nil));"); 
    pa_a := calc.int(nil:void);         # 41 pa_a:int := CALCnil2int(_31:void) 
    qa_a := bat.insert(b,9,pa_a);       # 42 qa_a:void := BKCinsert_bun(b:bat[:int,:int], _59:int, pa_a:int) 
#	io.print("var t:= b.histogram();"); 
    t := aggr.histogram(b);             # 44 t:bat[:int,:int] := ALGhistogram(b:bat[:int,:int]) {G}
#	io.print("t.print();"); 
    ra_a := io.print(t);                # 46 ra_a:void := IOprint_val(t:bat[:int,:int]) 
#	io.print("commit();"); 
    sa_a := transaction.commit();       # 48 sa_a:bit 
#	io.print("var s:= bat.new(int,str);"); 
    s := bat.new(nil:int,nil:str);      # 50 s:bat[:int,:str] := CMDBATnew(_68:int, _69:str) {G}
#	io.print("insert(s,1,\"hello\");"); 
    ta_a := bat.insert(s,1,"hello");    # 52 ta_a:void := BKCinsert_bun(s:bat[:int,:str], _72:int, _73:str) 
#	io.print("insert(s,2,\"hello\");"); 
    ua_a := bat.insert(s,2,"hello");    # 54 ua_a:void := BKCinsert_bun(s:bat[:int,:str], _76:int, _73:str) 
#	io.print("insert(s,3,\"hello\");"); 
    va_a := bat.insert(s,3,"hello");    # 56 va_a:void := BKCinsert_bun(s:bat[:int,:str], _79:int, _73:str) 
#	io.print("insert(s,4,\"dello\");"); 
    wa_a := bat.insert(s,4,"dello");    # 58 wa_a:void := BKCinsert_bun(s:bat[:int,:str], _82:int, _83:str) 
#	io.print("insert(s,5,\"eello\");"); 
    xa_a := bat.insert(s,5,"eello");    # 60 xa_a:void := BKCinsert_bun(s:bat[:int,:str], _86:int, _87:str) 
#	io.print("insert(s,6,\"fello\");"); 
    ya_a := bat.insert(s,6,"fello");    # 62 ya_a:void := BKCinsert_bun(s:bat[:int,:str], _90:int, _91:str) 
#	io.print("insert(s,7,\"fello\");"); 
    ab_a := bat.insert(s,7,"fello");    # 64 ab_a:void := BKCinsert_bun(s:bat[:int,:str], _94:int, _91:str) 
#	io.print("insert(s,8,\"fello\");"); 
    bb_a := bat.insert(s,8,"fello");    # 66 bb_a:void := BKCinsert_bun(s:bat[:int,:str], _97:int, _91:str) 
#	io.print("var t2:= s.histogram();"); 
    t2 := aggr.histogram(s);            # 68 t2:bat[:str,:int] := ALGhistogram(s:bat[:int,:str]) {G}
#	io.print("t2.print();"); 
    cb_a := io.print(t2);               # 70 cb_a:void := IOprint_val(t2:bat[:str,:int]) 
#	io.print("#It requires a few additional routines\n"); 
    c := bat.new(nil:int,nil:int);      # 72 c:bat[:int,:int] := CMDBATnew(_104:int, _104:int) {G}
#	io.print("c.insert(1,15);"); 
    db_a := bat.insert(c,1,15);         # 74 db_a:void := BKCinsert_bun(c:bat[:int,:int], _107:int, _108:int) 
#	io.print("c.insert(2,15);"); 
    eb_a := bat.insert(c,2,15);         # 76 eb_a:void := BKCinsert_bun(c:bat[:int,:int], _111:int, _108:int) 
#	io.print("c.insert(3,int(nil));"); 
    fb_a := calc.int(nil:void);         # 78 fb_a:int := CALCnil2int(_114:void) 
    gb_a := bat.insert(c,3,fb_a);       # 79 gb_a:void := BKCinsert_bun(c:bat[:int,:int], _116:int, fb_a:int) 
#	io.print("c.insert(4,0);"); 
    hb_a := bat.insert(c,4,0);          # 81 hb_a:void := BKCinsert_bun(c:bat[:int,:int], _119:int, _120:int) 
#	io.print("c.insert(5,30);"); 
    ib_a := bat.insert(c,5,30);         # 83 ib_a:void := BKCinsert_bun(c:bat[:int,:int], _123:int, _124:int) 
#	io.print("c.print();"); 
    jb_a := io.print(c);                # 85 jb_a:void := IOprint_val(c:bat[:int,:int]) 
#	io.print("quit();"); 
    nb_a := clients.quit();             # 87 nb_a:void 
end main;	# 88  
[ 30 ]
#b.insert(3,int(nil));
#b.sum().print();
[ nil ]
#b.insert(4,15);
#b.insert(5,25);
#b.insert(6,36);
#b.insert(7,49);
#b.insert(8,64);
#b.insert(9,int(nil));
#var t:= b.histogram();
#t.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 15,	  3	  ]
[ nil,	  2	  ]
[ 25,	  1	  ]
[ 36,	  1	  ]
[ 49,	  1	  ]
[ 64,	  1	  ]
#commit();
#var s:= bbp.new(int,str);
#insert(s,1,\"hello\");
#insert(s,2,\"hello\");
#insert(s,3,\"hello\");
#insert(s,4,\"dello\");
#insert(s,5,\"eello\");
#insert(s,6,\"fello\");
#insert(s,7,\"fello\");
#insert(s,8,\"fello\");
#var t2:= s.histogram();
#t2.print();
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "hello",	  3	  ]
[ "dello",	  1	  ]
[ "eello",	  1	  ]
[ "fello",	  3	  ]
##It requires a few additional routines\n
#c.insert(1,15);
#c.insert(2,15);
#c.insert(3,int(nil));
#c.insert(4,0);
#c.insert(5,30);
#c.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  15	  ]
[ 2,	  15	  ]
[ 3,	  nil	  ]
[ 4,	  0	  ]
[ 5,	  30	  ]
#quit();

# 00:12:29 >  
# 00:12:29 >  Done.
# 00:12:29 >  

