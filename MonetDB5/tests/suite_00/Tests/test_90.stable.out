stdout of test 'test_90` in directory 'tests/suite_00` itself:


# 00:12:29 >  
# 00:12:29 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_90.mal </dev/null
# 00:12:29 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("#test mark and number primitives\n");
#	mil.line("var b:= bbp.new(str,int);");
#	b := bbp.new(nil:str,nil:int);
#	mil.line("b.insert(\"the\",1);");
#	ca_a := bat.insert(b,"the",1);
#	mil.line("b.insert(\"quick\",20);");
#	da_a := bat.insert(b,"quick",20);
#	mil.line("b.insert(\"brown\",30);");
#	ea_a := bat.insert(b,"brown",30);
#	mil.line("b.insert(\"fox\",40);");
#	fa_a := bat.insert(b,"fox",40);
#	mil.line("b.insert(\"jumps\",50);");
#	ga_a := bat.insert(b,"jumps",50);
#	mil.line("b.insert(\"over\",60);");
#	ha_a := bat.insert(b,"over",60);
#	mil.line("b.insert(\"lazy\",70);");
#	ia_a := bat.insert(b,"lazy",70);
#	mil.line("b.insert(\"dog\",80);");
#	ja_a := bat.insert(b,"dog",80);
#	mil.line("b.insert(str(nil),90);");
#	ka_a := calc.str(nil);
#	la_a := bat.insert(b,ka_a,90);
#	mil.line("b.insert(\".\",100);");
#	ma_a := bat.insert(b,".",100);
#	mil.line("b.insert(\"\",int(nil));");
#	na_a := calc.int(nil);
#	oa_a := bat.insert(b,"",na_a);
#	mil.line("b.insert(str(nil),int(nil));");
#	pa_a := calc.str(nil);
#	qa_a := calc.int(nil);
#	ra_a := bat.insert(b,pa_a,qa_a);
#	mil.line("b.print();");
#	sa_a := io.print(b);
#	mil.line("var c:= mark(b,oid(20000050));");
#	ta_a := calc.oid(20000050);
#	c := algebra.markT(b,ta_a);
#	mil.line("print(c);");
#	ua_a := io.print(c);
#	mil.line("var d:=number(b);");
#	d := algebra.number(b);
#	mil.line("print(d);");
#	va_a := io.print(d);
#	mil.line("quit();");
#	wa_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  (_2:str)
#Predefined code segment 	# 3  (_3:str)
#The compiler can not guarantee an accurate compilation, 	# 4  (_4:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  (_5:str)
#A few guidelines to maximize usefullness. 	# 6  (_6:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  (_7:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  (_8:str)
#use the "mil_schema" for additional support routines 	# 9  (_9:str)
#	io.print("setoid(oid(20000000));"); 	# 10  (_10:str)
    aa_a := calc.oid(20000000);	# 11 CALCint2oid (aa_a:oid)<-(_12:int)
    ba_a := calc.setoid(aa_a);	# 12 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	io.print("#test mark and number primitives\n"); 	# 13  (_14:str)
#	io.print("var b:= bat.new(str,int);"); 	# 14  (_15:str)
    b := bat.new(nil:str,nil:int);	# 15 CMDBATnew (b:bat[:str,:int])<-(_17:str)(_18:int)
#	io.print("b.insert(\"the\",1);"); 	# 16  (_19:str)
    ca_a := bat.insert(b,"the",1);	# 17 BKCinsert_bun (ca_a:void)<-(b:bat[:str,:int])(_21:str)(_22:int)
#	io.print("b.insert(\"quick\",20);"); 	# 18  (_23:str)
    da_a := bat.insert(b,"quick",20);	# 19 BKCinsert_bun (da_a:void)<-(b:bat[:str,:int])(_25:str)(_26:int)
#	io.print("b.insert(\"brown\",30);"); 	# 20  (_27:str)
    ea_a := bat.insert(b,"brown",30);	# 21 BKCinsert_bun (ea_a:void)<-(b:bat[:str,:int])(_29:str)(_30:int)
#	io.print("b.insert(\"fox\",40);"); 	# 22  (_31:str)
    fa_a := bat.insert(b,"fox",40);	# 23 BKCinsert_bun (fa_a:void)<-(b:bat[:str,:int])(_33:str)(_34:int)
#	io.print("b.insert(\"jumps\",50);"); 	# 24  (_35:str)
    ga_a := bat.insert(b,"jumps",50);	# 25 BKCinsert_bun (ga_a:void)<-(b:bat[:str,:int])(_37:str)(_38:int)
#	io.print("b.insert(\"over\",60);"); 	# 26  (_39:str)
    ha_a := bat.insert(b,"over",60);	# 27 BKCinsert_bun (ha_a:void)<-(b:bat[:str,:int])(_41:str)(_42:int)
#	io.print("b.insert(\"lazy\",70);"); 	# 28  (_43:str)
    ia_a := bat.insert(b,"lazy",70);	# 29 BKCinsert_bun (ia_a:void)<-(b:bat[:str,:int])(_45:str)(_46:int)
#	io.print("b.insert(\"dog\",80);"); 	# 30  (_47:str)
    ja_a := bat.insert(b,"dog",80);	# 31 BKCinsert_bun (ja_a:void)<-(b:bat[:str,:int])(_49:str)(_50:int)
#	io.print("b.insert(str(nil),90);"); 	# 32  (_51:str)
    ka_a := calc.str(nil:void);	# 33 CALCnil2str (ka_a:str)<-(_53:void)
    la_a := bat.insert(b,ka_a,90);	# 34 BKCinsert_bun (la_a:void)<-(b:bat[:str,:int])(ka_a:str)(_55:int)
#	io.print("b.insert(\".\",100);"); 	# 35  (_56:str)
    ma_a := bat.insert(b,".",100);	# 36 BKCinsert_bun (ma_a:void)<-(b:bat[:str,:int])(_58:str)(_59:int)
#	io.print("b.insert(\"\",int(nil));"); 	# 37  (_60:str)
    na_a := calc.int(nil:void);	# 38 CALCnil2int (na_a:int)<-(_53:void)
    oa_a := bat.insert(b,"",na_a);	# 39 BKCinsert_bun (oa_a:void)<-(b:bat[:str,:int])(_63:str)(na_a:int)
#	io.print("b.insert(str(nil),int(nil));"); 	# 40  (_64:str)
    pa_a := calc.str(nil:void);	# 41 CALCnil2str (pa_a:str)<-(_53:void)
    qa_a := calc.int(nil:void);	# 42 CALCnil2int (qa_a:int)<-(_53:void)
    ra_a := bat.insert(b,pa_a,qa_a);	# 43 BKCinsert_bun (ra_a:void)<-(b:bat[:str,:int])(pa_a:str)(qa_a:int)
#	io.print("b.print();"); 	# 44  (_68:str)
    sa_a := io.print(b);	# 45 IOprint_val (sa_a:void)<-(b:bat[:str,:int])
#	io.print("var c:= mark(b,oid(20000050));"); 	# 46  (_70:str)
    ta_a := calc.oid(20000050);	# 47 CALCint2oid (ta_a:oid)<-(_72:int)
    c := algebra.markT(b,ta_a);	# 48 ALGtmark (c:bat[:str,:oid])<-(b:bat[:str,:int])(ta_a:oid)
#	io.print("print(c);"); 	# 49  (_74:str)
    ua_a := io.print(c);	# 50 IOprint_val (ua_a:void)<-(c:bat[:str,:oid])
#	io.print("var d:=number(b);"); 	# 51  (_76:str)
    d := algebra.number(b);	# 52 ALGnumber (d:bat[:str,:int])<-(b:bat[:str,:int])
#	io.print("print(d);"); 	# 53  (_78:str)
    va_a := io.print(d);	# 54 IOprint_val (va_a:void)<-(d:bat[:str,:int])
#	io.print("quit();"); 	# 55  (_80:str)
    wa_a := clients.quit();	# 56 CLTquit (wa_a:void)
end main;	# 57  
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "the",	  1	  ]
[ "quick",	  20	  ]
[ "brown",	  30	  ]
[ "fox",	  40	  ]
[ "jumps",	  50	  ]
[ "over",	  60	  ]
[ "lazy",	  70	  ]
[ "dog",	  80	  ]
[ nil,		  90	  ]
[ ".",		  100	  ]
[ "",		  nil	  ]
[ nil,		  nil	  ]
#var c:= mark(b,oid(20000050));
#print(c);
#---------------------------------#
# h		t		  # name
# str		void		  # type
#---------------------------------#
[ "the",	  20000050@0	  ]
[ "quick",	  20000051@0	  ]
[ "brown",	  20000052@0	  ]
[ "fox",	  20000053@0	  ]
[ "jumps",	  20000054@0	  ]
[ "over",	  20000055@0	  ]
[ "lazy",	  20000056@0	  ]
[ "dog",	  20000057@0	  ]
[ nil,		  20000058@0	  ]
[ ".",		  20000059@0	  ]
[ "",		  20000060@0	  ]
[ nil,		  20000061@0	  ]
#var d:=number(b);
#print(d);
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "the",	  0	  ]
[ "quick",	  1	  ]
[ "brown",	  2	  ]
[ "fox",	  3	  ]
[ "jumps",	  4	  ]
[ "over",	  5	  ]
[ "lazy",	  6	  ]
[ "dog",	  7	  ]
[ nil,		  8	  ]
[ ".",		  9	  ]
[ "",		  10	  ]
[ nil,		  11	  ]
#quit();

# 00:12:29 >  
# 00:12:29 >  Done.
# 00:12:29 >  

