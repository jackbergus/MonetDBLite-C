stdout of test 'test_15` in directory 'tests/suite_00` itself:


# 00:12:28 >  
# 00:12:28 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_15.mal </dev/null
# 00:12:28 >  

# MonetDB server v5.9.0, based on kernel v1.27.0
# Serving database 'mTests_tests_suite_00', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008- MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:30579/
function user.main():void;
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);
    ba_a := calc.setoid(aa_a);
#	io.print("#testing the set operations;\n"); 
    b := bat.new(nil:int,nil:int);
#	io.print("b.insert(1,15);"); 
    ca_a := bat.insert(b,1,15);
#	io.print("b.insert(2,4);"); 
    da_a := bat.insert(b,2,4);
#	io.print("b.insert(3,int(nil));"); 
    ea_a := calc.int(nil);
    fa_a := bat.insert(b,3,ea_a);
#	io.print("b.insert(4,16);"); 
    ga_a := bat.insert(b,4,16);
#	io.print("b.insert(5,25);"); 
    ha_a := bat.insert(b,5,25);
#	io.print("b.insert(6,36);"); 
    ia_a := bat.insert(b,6,36);
#	io.print("b.insert(7,49);"); 
    ja_a := bat.insert(b,7,49);
#	io.print("b.insert(8,64);"); 
    ka_a := bat.insert(b,8,64);
#	io.print("b.insert(9,int(nil));"); 
    la_a := calc.int(nil);
    ma_a := bat.insert(b,9,la_a);
#	io.print("b.insert(int(nil),int(nil));"); 
    na_a := calc.int(nil);
    oa_a := calc.int(nil);
    pa_a := bat.insert(b,na_a,oa_a);
#	io.print("b.insert(int(nil),81);"); 
    qa_a := calc.int(nil);
    ra_a := bat.insert(b,qa_a,81);
#	io.print("var c:= b.copy();"); 
    c := algebra.copy(b);
#	io.print("var t:= b.select(80,int(nil)); io.print(t);"); 
    sa_a := calc.int(nil);
    t := algebra.select(b,80,sa_a);
    ta_a := io.print(t);
#	io.print("c.access(BAT_WRITE);"); 
    BAT_WRITE := 0;
    ua_a := bat.setWriteMode(c);
#	io.print("insert(c,t);print(c);"); 
    va_a := bat.insert(c,t);
    wa_a := io.print(c);
#	io.print("var z:= bat.new(int,int);"); 
    z := bat.new(nil:int,nil:int);
#	io.print("b.replace(1,1);"); 
    xa_a := bat.replace(b,1,1);
#	io.print("z.insert(2,4);"); 
    ya_a := bat.insert(z,2,4);
#	io.print("z.insert(3,9);"); 
    ab_a := bat.insert(z,3,9);
#	io.print("b.replace(z);"); 
    bb_a := bat.replace(b,z);
#	io.print("b.print();"); 
    cb_a := io.print(b);
#	io.print("c.reverse().print();"); 
    db_a := bat.reverse(c);
    eb_a := io.print(db_a);
#	io.print("var d:= intersect(reverse(c),b);"); 
    fb_a := bat.reverse(c);
    d := algebra.intersect(fb_a,b);
#	io.print("print(d);"); 
    gb_a := io.print(d);
#	io.print("var e:= difference(reverse(c),d);"); 
    hb_a := bat.reverse(c);
    e := algebra.difference(hb_a,d);
#	io.print("print(e);"); 
    ib_a := io.print(e);
#	io.print("var f:= union(e,b);"); 
    f := algebra.union(e,b);
#	io.print("print(f);"); 
    jb_a := io.print(f);
#	io.print("# specials\n"); 
    marcel := algebra.kunion(b,b);
#	io.print("marcel.print();"); 
    kb_a := io.print(marcel);
#	io.print("quit();"); 
    lb_a := clients.quit();
end main;
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ nil,	  81	  ]
#c.access(BAT_WRITE);
#insert(c,t);print(c);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
[ nil,	  81	  ]
#var z:= bbp.new(int,int);
#b.replace(1,1);
#z.insert(2,4);
#z.insert(3,9);
#b.replace(z);
#b.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
#c.reverse().print();
#-----------------#
# t	h	  # name
# int	int	  # type
#-----------------#
[ 15,	  1	  ]
[ 4,	  2	  ]
[ nil,	  3	  ]
[ 16,	  4	  ]
[ 25,	  5	  ]
[ 36,	  6	  ]
[ 49,	  7	  ]
[ 64,	  8	  ]
[ nil,	  9	  ]
[ nil,	  nil	  ]
[ 81,	  nil	  ]
[ 81,	  nil	  ]
#var d:= intersect(reverse(c),b);
#print(d);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
#var e:= diff(reverse(c),d);
#print(e);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 15,	  1	  ]
[ 4,	  2	  ]
[ nil,	  3	  ]
[ 16,	  4	  ]
[ 25,	  5	  ]
[ 36,	  6	  ]
[ 49,	  7	  ]
[ 64,	  8	  ]
[ nil,	  9	  ]
[ nil,	  nil	  ]
[ 81,	  nil	  ]
[ 81,	  nil	  ]
#var f:= union(e,b);
#print(f);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 15,	  1	  ]
[ 4,	  2	  ]
[ nil,	  3	  ]
[ 16,	  4	  ]
[ 25,	  5	  ]
[ 36,	  6	  ]
[ 49,	  7	  ]
[ 64,	  8	  ]
[ nil,	  9	  ]
[ nil,	  nil	  ]
[ 81,	  nil	  ]
[ 81,	  nil	  ]
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
## specials\n
#marcel.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
#quit();

# 00:12:28 >  
# 00:12:28 >  Done.
# 00:12:28 >  

