stdout of test 'test_50` in directory 'tests/suite_00` itself:


# 00:12:29 >  
# 00:12:29 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_50.mal </dev/null
# 00:12:29 >  

# MonetDB server v5.9.0, based on kernel v1.27.0
# Serving database 'mTests_tests_suite_00', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008- MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:30579/
function user.main():void;
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);
    ba_a := calc.setoid(aa_a);
#	io.print("# Selfcontained test of delta operations\n"); 
#	io.print("var b:=new(int,int);"); 
    b := bat.new(nil:int,nil:int);
#	io.print("var bi:=new(int,int);"); 
    bi := bat.new(nil:int,nil:int);
#	io.print("var bd:=new(int,int);"); 
    bd := bat.new(nil:int,nil:int);
#	io.print("insert(b,1,2);"); 
    ca_a := bat.insert(b,1,2);
#	io.print("insert(b,2,3);"); 
    da_a := bat.insert(b,2,3);
#	io.print("bd:=b.delta();"); 
    bd := transaction.delta(b);
#	io.print("print(bd);"); 
    ea_a := io.print(bd);
#	io.print("var a:= b.alpha();"); 
    a := transaction.alpha(b);
#	io.print("a.print();"); 
    fa_a := io.print(a);
#	io.print("#commit the changes and repeat the action\n"); 
    ga_a := bat.delete(bd);
#	io.print("commit(b);"); 
    ha_a := transaction.commit(b);
#	io.print("b.alpha().print();"); 
    ia_a := transaction.alpha(b);
    ja_a := io.print(ia_a);
#	io.print("insert(b,4,5);"); 
    ka_a := bat.insert(b,4,5);
#	io.print("delete(b,2,3);"); 
    la_a := bat.delete(b,2,3);
#	io.print("print(b);"); 
    ma_a := io.print(b);
#	io.print("bd:=b.delta();"); 
    bd := transaction.delta(b);
#	io.print("print(bd);"); 
    na_a := io.print(bd);
#	io.print("a:= b.alpha();"); 
    a := transaction.alpha(b);
#	io.print("a.print();"); 
    oa_a := io.print(a);
#	io.print("abort(b);"); 
    pa_a := transaction.abort(b);
#	io.print("print(b);"); 
    qa_a := io.print(b);
#	io.print("quit();"); 
    ra_a := clients.quit();
end main;
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
#var a:= b.alpha();
#a.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  3	  ]
##commit the changes and repeat the action\n
#commit(b);
#b.alpha().print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
#insert(b,4,5);
#delete(b,2,3);
#print(b);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 4,	  5	  ]
#bd:=b.delta();
#print(bd);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  3	  ]
#a:= b.alpha();
#a.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 4,	  5	  ]
#abort(b);
#print(b);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  3	  ]
[ 1,	  2	  ]
#quit();

# 00:12:29 >  
# 00:12:29 >  Done.
# 00:12:29 >  

