stdout of test 'test_50` in directory 'tests/suite_00` itself:


# 00:12:29 >  
# 00:12:29 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_50.mal </dev/null
# 00:12:29 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("# Selfcontained test of delta operations\n");
#	mil.line("var b:=new(int,int);");
#	b := bbp.new(nil:int,nil:int);
#	mil.line("var bi:=new(int,int);");
#	bi := bbp.new(nil:int,nil:int);
#	mil.line("var bd:=new(int,int);");
#	bd := bbp.new(nil:int,nil:int);
#	mil.line("insert(b,1,2);");
#	ca_a := bat.insert(b,1,2);
#	mil.line("insert(b,2,3);");
#	da_a := bat.insert(b,2,3);
#	mil.line("bd:=b.delta();");
#	bd := transaction.delta(b);
#	mil.line("print(bd);");
#	ea_a := io.print(bd);
#	mil.line("var a:= b.alpha();");
#	a := transaction.alpha(b);
#	mil.line("a.print();");
#	fa_a := io.print(a);
#	mil.line("#commit the changes and repeat the action\n");
#	ga_a := bat.delete(bd);
#	mil.line("commit(b);");
#	ha_a := transaction.commit(b);
#	mil.line("b.alpha().print();");
#	ia_a := transaction.alpha(b);
#	ja_a := io.print(ia_a);
#	mil.line("insert(b,4,5);");
#	ka_a := bat.insert(b,4,5);
#	mil.line("delete(b,2,3);");
#	la_a := bat.delete(b,2,3);
#	mil.line("print(b);");
#	ma_a := io.print(b);
#	mil.line("bd:=b.delta();");
#	bd := transaction.delta(b);
#	mil.line("print(bd);");
#	na_a := io.print(bd);
#	mil.line("a:= b.alpha();");
#	a := transaction.alpha(b);
#	mil.line("a.print();");
#	oa_a := io.print(a);
#	mil.line("abort(b);");
#	pa_a := transaction.abort(b);
#	mil.line("print(b);");
#	qa_a := io.print(b);
#	mil.line("quit();");
#	ra_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  (_2:str)
#Predefined code segment 	# 3  (_3:str)
#The compiler can not guarantee an accurate compilation, 	# 4  (_4:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  (_5:str)
#A few guidelines to maximize usefullness. 	# 6  (_6:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  (_7:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  (_8:str)
#use the "mil_schema" for additional support routines 	# 9  (_9:str)
#	io.print("setoid(oid(20000000));"); 	# 10  (_10:str)
    aa_a := calc.oid(20000000);	# 11 CALCint2oid (aa_a:oid)<-(_12:int)
    ba_a := calc.setoid(aa_a);	# 12 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	io.print("# Selfcontained test of delta operations\n"); 	# 13  (_14:str)
#	io.print("var b:=new(int,int);"); 	# 14  (_15:str)
    b := bat.new(nil:int,nil:int);	# 15 CMDBATnew (b:bat[:int,:int])<-(_17:int)(_17:int)
#	io.print("var bi:=new(int,int);"); 	# 16  (_18:str)
    bi := bat.new(nil:int,nil:int);	# 17 CMDBATnew (bi:bat[:int,:int])<-(_17:int)(_17:int)
#	io.print("var bd:=new(int,int);"); 	# 18  (_20:str)
    bd := bat.new(nil:int,nil:int);	# 19 CMDBATnew (bd:bat[:int,:int])<-(_17:int)(_17:int)
#	io.print("insert(b,1,2);"); 	# 20  (_22:str)
    ca_a := bat.insert(b,1,2);	# 21 BKCinsert_bun (ca_a:void)<-(b:bat[:int,:int])(_24:int)(_25:int)
#	io.print("insert(b,2,3);"); 	# 22  (_26:str)
    da_a := bat.insert(b,2,3);	# 23 BKCinsert_bun (da_a:void)<-(b:bat[:int,:int])(_25:int)(_28:int)
#	io.print("bd:=b.delta();"); 	# 24  (_29:str)
    bd := transaction.delta(b);	# 25 TRNtrans_delta (bd:bat[:int,:int])<-(b:bat[:int,:int])
#	io.print("print(bd);"); 	# 26  (_30:str)
    ea_a := io.print(bd);	# 27 IOprint_val (ea_a:int)<-(bd:bat[:int,:int])
#	io.print("var a:= b.alpha();"); 	# 28  (_32:str)
    a := transaction.alpha(b);	# 29 TRNtrans_alpha (a:bat[:int,:int])<-(b:bat[:int,:int])
#	io.print("a.print();"); 	# 30  (_34:str)
    fa_a := io.print(a);	# 31 IOprint_val (fa_a:int)<-(a:bat[:int,:int])
#	io.print("#commit the changes and repeat the action\n"); 	# 32  (_36:str)
    ga_a := bat.delete(bd);	# 33 BKCdelete_all (ga_a:void)<-(bd:bat[:int,:int])
#	io.print("commit(b);"); 	# 34  (_38:str)
    ha_a := transaction.commit(b);	# 35 TRNtrans_commit (ha_a:void)<-(b:bat[:int,:int])
#	io.print("b.alpha().print();"); 	# 36  (_40:str)
    ia_a := transaction.alpha(b);	# 37 TRNtrans_alpha (ia_a:bat[:int,:int])<-(b:bat[:int,:int])
    ja_a := io.print(ia_a);	# 38 IOprint_val (ja_a:int)<-(ia_a:bat[:int,:int])
#	io.print("insert(b,4,5);"); 	# 39  (_43:str)
    ka_a := bat.insert(b,4,5);	# 40 BKCinsert_bun (ka_a:void)<-(b:bat[:int,:int])(_45:int)(_46:int)
#	io.print("delete(b,2,3);"); 	# 41  (_47:str)
    la_a := bat.delete(b,2,3);	# 42 BKCdelete_bun (la_a:void)<-(b:bat[:int,:int])(_25:int)(_28:int)
#	io.print("print(b);"); 	# 43  (_49:str)
    ma_a := io.print(b);	# 44 IOprint_val (ma_a:int)<-(b:bat[:int,:int])
#	io.print("bd:=b.delta();"); 	# 45  (_29:str)
    bd := transaction.delta(b);	# 46 TRNtrans_delta (bd:bat[:int,:int])<-(b:bat[:int,:int])
#	io.print("print(bd);"); 	# 47  (_30:str)
    na_a := io.print(bd);	# 48 IOprint_val (na_a:int)<-(bd:bat[:int,:int])
#	io.print("a:= b.alpha();"); 	# 49  (_52:str)
    a := transaction.alpha(b);	# 50 TRNtrans_alpha (a:bat[:int,:int])<-(b:bat[:int,:int])
#	io.print("a.print();"); 	# 51  (_34:str)
    oa_a := io.print(a);	# 52 IOprint_val (oa_a:int)<-(a:bat[:int,:int])
#	io.print("abort(b);"); 	# 53  (_54:str)
    pa_a := transaction.abort(b);	# 54 TRNtrans_abort (pa_a:void)<-(b:bat[:int,:int])
#	io.print("print(b);"); 	# 55  (_49:str)
    qa_a := io.print(b);	# 56 IOprint_val (qa_a:int)<-(b:bat[:int,:int])
#	io.print("quit();"); 	# 57  (_57:str)
    ra_a := clients.quit();	# 58 CLTquitDefault (ra_a:void)
end main;	# 59  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
#var a:= b.alpha();
#a.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  3	  ]
##commit the changes and repeat the action\n
#commit(b);
#b.alpha().print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
#insert(b,4,5);
#delete(b,2,3);
#print(b);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 4,	  5	  ]
#bd:=b.delta();
#print(bd);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  3	  ]
#a:= b.alpha();
#a.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 4,	  5	  ]
#abort(b);
#print(b);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  3	  ]
[ 1,	  2	  ]
#quit();

# 00:12:29 >  
# 00:12:29 >  Done.
# 00:12:29 >  

