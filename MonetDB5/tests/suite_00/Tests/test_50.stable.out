stdout of test 'test_50` in directory 'tests/suite_00` itself:


# 00:12:29 >  
# 00:12:29 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_50.mal </dev/null
# 00:12:29 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("# Selfcontained test of delta operations\n");
#	mil.line("var b:=new(int,int);");
#	b := bbp.new(nil:int,nil:int);
#	mil.line("var bi:=new(int,int);");
#	bi := bbp.new(nil:int,nil:int);
#	mil.line("var bd:=new(int,int);");
#	bd := bbp.new(nil:int,nil:int);
#	mil.line("insert(b,1,2);");
#	ca_a := bat.insert(b,1,2);
#	mil.line("insert(b,2,3);");
#	da_a := bat.insert(b,2,3);
#	mil.line("bd:=b.delta();");
#	bd := transaction.delta(b);
#	mil.line("print(bd);");
#	ea_a := io.print(bd);
#	mil.line("var a:= b.alpha();");
#	a := transaction.alpha(b);
#	mil.line("a.print();");
#	fa_a := io.print(a);
#	mil.line("#commit the changes and repeat the action\n");
#	ga_a := bat.delete(bd);
#	mil.line("commit(b);");
#	ha_a := transaction.commit(b);
#	mil.line("b.alpha().print();");
#	ia_a := transaction.alpha(b);
#	ja_a := io.print(ia_a);
#	mil.line("insert(b,4,5);");
#	ka_a := bat.insert(b,4,5);
#	mil.line("delete(b,2,3);");
#	la_a := bat.delete(b,2,3);
#	mil.line("print(b);");
#	ma_a := io.print(b);
#	mil.line("bd:=b.delta();");
#	bd := transaction.delta(b);
#	mil.line("print(bd);");
#	na_a := io.print(bd);
#	mil.line("a:= b.alpha();");
#	a := transaction.alpha(b);
#	mil.line("a.print();");
#	oa_a := io.print(a);
#	mil.line("abort(b);");
#	pa_a := transaction.abort(b);
#	mil.line("print(b);");
#	qa_a := io.print(b);
#	mil.line("quit();");
#	ra_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  (_31:str)
#Predefined code segment 	# 2  (_32:str)
#The compiler can not guarantee an accurate compilation, 	# 3  (_33:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  (_34:str)
#A few guidelines to maximize usefullness. 	# 5  (_35:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  (_36:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  (_37:str)
#use the "mil_schema" for additional support routines 	# 8  (_38:str)
    mil.line("setoid(oid(20000000));");	# 9 MILline (_39:void)<-(_40:str)
    aa_a := calc.oid(20000000);	# 10 CALCint2oid (aa_a:oid)<-(_42:int)
    ba_a := calc.setoid(aa_a);	# 11 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("# Selfcontained test of delta operations\n");	# 12 MILline (_44:void)<-(_45:str)
    mil.line("var b:=new(int,int);");	# 13 MILline (_46:void)<-(_47:str)
    b := bat.new(nil:int,nil:int);	# 14 CMDBATnew (b:bat[:int,:int])<-(_49:int)(_49:int)
    mil.line("var bi:=new(int,int);");	# 15 MILline (_50:void)<-(_51:str)
    bi := bat.new(nil:int,nil:int);	# 16 CMDBATnew (bi:bat[:int,:int])<-(_49:int)(_49:int)
    mil.line("var bd:=new(int,int);");	# 17 MILline (_53:void)<-(_54:str)
    bd := bat.new(nil:int,nil:int);	# 18 CMDBATnew (bd:bat[:int,:int])<-(_49:int)(_49:int)
    mil.line("insert(b,1,2);");	# 19 MILline (_56:void)<-(_57:str)
    ca_a := bat.insert(b,1,2);	# 20 BKCinsert_bun (ca_a:void)<-(b:bat[:int,:int])(_59:int)(_60:int)
    mil.line("insert(b,2,3);");	# 21 MILline (_61:void)<-(_62:str)
    da_a := bat.insert(b,2,3);	# 22 BKCinsert_bun (da_a:void)<-(b:bat[:int,:int])(_60:int)(_64:int)
    mil.line("bd:=b.delta();");	# 23 MILline (_65:void)<-(_66:str)
    bd := transaction.delta(b);	# 24 TRNtrans_delta (bd:bat[:int,:int])<-(b:bat[:int,:int])
    mil.line("print(bd);");	# 25 MILline (_67:void)<-(_68:str)
    ea_a := io.print(bd);	# 26 IOprint_val (ea_a:int)<-(bd:bat[:int,:int])
    mil.line("var a:= b.alpha();");	# 27 MILline (_70:void)<-(_71:str)
    a := transaction.alpha(b);	# 28 TRNtrans_alpha (a:bat[:int,:int])<-(b:bat[:int,:int])
    mil.line("a.print();");	# 29 MILline (_73:void)<-(_74:str)
    fa_a := io.print(a);	# 30 IOprint_val (fa_a:int)<-(a:bat[:int,:int])
    mil.line("#commit the changes and repeat the action\n");	# 31 MILline (_76:void)<-(_77:str)
    ga_a := bat.delete(bd);	# 32 BKCdelete_all (ga_a:void)<-(bd:bat[:int,:int])
    mil.line("commit(b);");	# 33 MILline (_79:void)<-(_80:str)
    ha_a := transaction.commit(b);	# 34 TRNtrans_commit (ha_a:void)<-(b:bat[:int,:int])
    mil.line("b.alpha().print();");	# 35 MILline (_82:void)<-(_83:str)
    ia_a := transaction.alpha(b);	# 36 TRNtrans_alpha (ia_a:bat[:int,:int])<-(b:bat[:int,:int])
    ja_a := io.print(ia_a);	# 37 IOprint_val (ja_a:int)<-(ia_a:bat[:int,:int])
    mil.line("insert(b,4,5);");	# 38 MILline (_86:void)<-(_87:str)
    ka_a := bat.insert(b,4,5);	# 39 BKCinsert_bun (ka_a:void)<-(b:bat[:int,:int])(_89:int)(_90:int)
    mil.line("delete(b,2,3);");	# 40 MILline (_91:void)<-(_92:str)
    la_a := bat.delete(b,2,3);	# 41 BKCdelete_bun (la_a:void)<-(b:bat[:int,:int])(_60:int)(_64:int)
    mil.line("print(b);");	# 42 MILline (_94:void)<-(_95:str)
    ma_a := io.print(b);	# 43 IOprint_val (ma_a:int)<-(b:bat[:int,:int])
    mil.line("bd:=b.delta();");	# 44 MILline (_97:void)<-(_66:str)
    bd := transaction.delta(b);	# 45 TRNtrans_delta (bd:bat[:int,:int])<-(b:bat[:int,:int])
    mil.line("print(bd);");	# 46 MILline (_98:void)<-(_68:str)
    na_a := io.print(bd);	# 47 IOprint_val (na_a:int)<-(bd:bat[:int,:int])
    mil.line("a:= b.alpha();");	# 48 MILline (_100:void)<-(_101:str)
    a := transaction.alpha(b);	# 49 TRNtrans_alpha (a:bat[:int,:int])<-(b:bat[:int,:int])
    mil.line("a.print();");	# 50 MILline (_102:void)<-(_74:str)
    oa_a := io.print(a);	# 51 IOprint_val (oa_a:int)<-(a:bat[:int,:int])
    mil.line("abort(b);");	# 52 MILline (_104:void)<-(_105:str)
    pa_a := transaction.abort(b);	# 53 TRNtrans_abort (pa_a:void)<-(b:bat[:int,:int])
    mil.line("print(b);");	# 54 MILline (_107:void)<-(_95:str)
    qa_a := io.print(b);	# 55 IOprint_val (qa_a:int)<-(b:bat[:int,:int])
    mil.line("quit();");	# 56 MILline (_109:void)<-(_110:str)
    ra_a := clients.quit();	# 57 CLTquit (ra_a:void)
end main;	# 58  
#setoid(oid(20000000));
## Selfcontained test of delta operations\n
#var b:=new(int,int);
#var bi:=new(int,int);
#var bd:=new(int,int);
#insert(b,1,2);
#insert(b,2,3);
#bd:=b.delta();
#print(bd);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
#var a:= b.alpha();
#a.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  3	  ]
##commit the changes and repeat the action\n
#commit(b);
#b.alpha().print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
#insert(b,4,5);
#delete(b,2,3);
#print(b);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 4,	  5	  ]
#bd:=b.delta();
#print(bd);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  3	  ]
#a:= b.alpha();
#a.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 4,	  5	  ]
#abort(b);
#print(b);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  3	  ]
[ 1,	  2	  ]
#quit();

# 00:12:29 >  
# 00:12:29 >  Done.
# 00:12:29 >  

