stdout of test 'test_50` in directory 'tests/suite_00` itself:


# 00:12:29 >  
# 00:12:29 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_50.mal </dev/null
# 00:12:29 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("# Selfcontained test of delta operations\n");
#	mil.line("var b:=new(int,int);");
#	b := bbp.new(nil:int,nil:int);
#	mil.line("var bi:=new(int,int);");
#	bi := bbp.new(nil:int,nil:int);
#	mil.line("var bd:=new(int,int);");
#	bd := bbp.new(nil:int,nil:int);
#	mil.line("insert(b,1,2);");
#	ca_a := bat.insert(b,1,2);
#	mil.line("insert(b,2,3);");
#	da_a := bat.insert(b,2,3);
#	mil.line("bd:=b.delta();");
#	bd := transaction.delta(b);
#	mil.line("print(bd);");
#	ea_a := io.print(bd);
#	mil.line("var a:= b.alpha();");
#	a := transaction.alpha(b);
#	mil.line("a.print();");
#	fa_a := io.print(a);
#	mil.line("#commit the changes and repeat the action\n");
#	ga_a := bat.delete(bd);
#	mil.line("commit(b);");
#	ha_a := transaction.commit(b);
#	mil.line("b.alpha().print();");
#	ia_a := transaction.alpha(b);
#	ja_a := io.print(ia_a);
#	mil.line("insert(b,4,5);");
#	ka_a := bat.insert(b,4,5);
#	mil.line("delete(b,2,3);");
#	la_a := bat.delete(b,2,3);
#	mil.line("print(b);");
#	ma_a := io.print(b);
#	mil.line("bd:=b.delta();");
#	bd := transaction.delta(b);
#	mil.line("print(bd);");
#	na_a := io.print(bd);
#	mil.line("a:= b.alpha();");
#	a := transaction.alpha(b);
#	mil.line("a.print();");
#	oa_a := io.print(a);
#	mil.line("abort(b);");
#	pa_a := transaction.abort(b);
#	mil.line("print(b);");
#	qa_a := io.print(b);
#	mil.line("quit();");
#	ra_a := clients.quit();
#
function user.main():void;              #  0 main:void := user.main() {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         # 11 aa_a:oid := CALCint2oid(_12:int) 
    ba_a := calc.setoid(aa_a);          # 12 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("# Selfcontained test of delta operations\n"); 
#	io.print("var b:=new(int,int);"); 
    b := bat.new(nil:int,nil:int);      # 15 b:bat[:int,:int] := CMDBATnew(_17:int, _17:int) {G}
#	io.print("var bi:=new(int,int);"); 
    bi := bat.new(nil:int,nil:int);     # 17 bi:bat[:int,:int] := CMDBATnew(_17:int, _17:int) {G}
#	io.print("var bd:=new(int,int);"); 
    bd := bat.new(nil:int,nil:int);     # 19 bd:bat[:int,:int] := CMDBATnew(_17:int, _17:int) {G}
#	io.print("insert(b,1,2);"); 
    ca_a := bat.insert(b,1,2);          # 21 ca_a:void := BKCinsert_bun(b:bat[:int,:int], _24:int, _25:int) 
#	io.print("insert(b,2,3);"); 
    da_a := bat.insert(b,2,3);          # 23 da_a:void := BKCinsert_bun(b:bat[:int,:int], _25:int, _28:int) 
#	io.print("bd:=b.delta();"); 
    bd := transaction.delta(b);         # 25 bd:bat[:int,:int] := TRNtrans_delta(b:bat[:int,:int]) {G}
#	io.print("print(bd);"); 
    ea_a := io.print(bd);               # 27 ea_a:void := IOprint_val(bd:bat[:int,:int]) 
#	io.print("var a:= b.alpha();"); 
    a := transaction.alpha(b);          # 29 a:bat[:int,:int] := TRNtrans_alpha(b:bat[:int,:int]) {G}
#	io.print("a.print();"); 
    fa_a := io.print(a);                # 31 fa_a:void := IOprint_val(a:bat[:int,:int]) 
#	io.print("#commit the changes and repeat the action\n"); 
    ga_a := bat.delete(bd);             # 33 ga_a:void := BKCdelete_all(bd:bat[:int,:int]) 
#	io.print("commit(b);"); 
    ha_a := transaction.commit(b);      # 35 ha_a:void := TRNtrans_commit(b:bat[:int,:int]) 
#	io.print("b.alpha().print();"); 
    ia_a := transaction.alpha(b);       # 37 ia_a:bat[:int,:int] := TRNtrans_alpha(b:bat[:int,:int]) {G}
    ja_a := io.print(ia_a);             # 38 ja_a:void := IOprint_val(ia_a:bat[:int,:int]) 
#	io.print("insert(b,4,5);"); 
    ka_a := bat.insert(b,4,5);          # 40 ka_a:void := BKCinsert_bun(b:bat[:int,:int], _45:int, _46:int) 
#	io.print("delete(b,2,3);"); 
    la_a := bat.delete(b,2,3);          # 42 la_a:void := BKCdelete_bun(b:bat[:int,:int], _25:int, _28:int) 
#	io.print("print(b);"); 
    ma_a := io.print(b);                # 44 ma_a:void := IOprint_val(b:bat[:int,:int]) 
#	io.print("bd:=b.delta();"); 
    bd := transaction.delta(b);         # 46 bd:bat[:int,:int] := TRNtrans_delta(b:bat[:int,:int]) {G}
#	io.print("print(bd);"); 
    na_a := io.print(bd);               # 48 na_a:void := IOprint_val(bd:bat[:int,:int]) 
#	io.print("a:= b.alpha();"); 
    a := transaction.alpha(b);          # 50 a:bat[:int,:int] := TRNtrans_alpha(b:bat[:int,:int]) {G}
#	io.print("a.print();"); 
    oa_a := io.print(a);                # 52 oa_a:void := IOprint_val(a:bat[:int,:int]) 
#	io.print("abort(b);"); 
    pa_a := transaction.abort(b);       # 54 pa_a:void := TRNtrans_abort(b:bat[:int,:int]) 
#	io.print("print(b);"); 
    qa_a := io.print(b);                # 56 qa_a:void := IOprint_val(b:bat[:int,:int]) 
#	io.print("quit();"); 
    ra_a := clients.quit();             # 58 ra_a:void := CLTquit() 
end main;	# 59  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
#var a:= b.alpha();
#a.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  3	  ]
##commit the changes and repeat the action\n
#commit(b);
#b.alpha().print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
#insert(b,4,5);
#delete(b,2,3);
#print(b);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 4,	  5	  ]
#bd:=b.delta();
#print(bd);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  3	  ]
#a:= b.alpha();
#a.print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 4,	  5	  ]
#abort(b);
#print(b);
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  3	  ]
[ 1,	  2	  ]
#quit();

# 00:12:29 >  
# 00:12:29 >  Done.
# 00:12:29 >  

