stdout of test 'test_40` in directory 'tests/suite_00` itself:


# 00:12:28 >  
# 00:12:28 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_40.mal </dev/null
# 00:12:28 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("# Some applications may wish to directly access the buns\n");
#	mil.line("# i.e. they use a BAT like an array.\n");
#	b := bbp.new(nil:int,nil:int);
#	mil.line("b.rename(\"b\");");
#	ca_a := bat.setName(b,"b");
#	mil.line("b.insert(1,15);");
#	da_a := bat.insert(b,1,15);
#	mil.line("b.insert(2,4);");
#	ea_a := bat.insert(b,2,4);
#	mil.line("b.insert(3,int(nil));");
#	fa_a := calc.int(nil);
#	ga_a := bat.insert(b,3,fa_a);
#	mil.line("b.insert(4,16);");
#	ha_a := bat.insert(b,4,16);
#	mil.line("b.insert(5,25);");
#	ia_a := bat.insert(b,5,25);
#	mil.line("b.insert(6,36);");
#	ja_a := bat.insert(b,6,36);
#	mil.line("b.insert(7,49);");
#	ka_a := bat.insert(b,7,49);
#	mil.line("b.insert(8,64);");
#	la_a := bat.insert(b,8,64);
#	mil.line("b.insert(9,int(nil));");
#	ma_a := calc.int(nil);
#	na_a := bat.insert(b,9,ma_a);
#	mil.line("b.insert(int(nil),int(nil));");
#	oa_a := calc.int(nil);
#	pa_a := calc.int(nil);
#	qa_a := bat.insert(b,oa_a,pa_a);
#	mil.line("b.insert(int(nil),81);");
#	ra_a := calc.int(nil);
#	sa_a := bat.insert(b,ra_a,81);
#	mil.line("#b.rename(\"b\");\n");
#	mil.line("b.save();");
#	ta_a := bat.save(b);
#	mil.line("load(\"b\");");
#	ua_a := bat.load("b");
#	mil.line("b.position(4).print();");
#	va_a := algebra.position(b,4);
#	wa_a := io.print(va_a);
#	mil.line("b.fetch(5).print();");
#	xa_a := algebra.fetch(b,5);
#	ya_a := io.print(xa_a);
#	mil.line("b.fetch(8).print();");
#	ab_a := algebra.fetch(b,8);
#	bb_a := io.print(ab_a);
#	mil.line("b.slice(5,8).print();");
#	cb_a := algebra.slice(b,5,8);
#	db_a := io.print(cb_a);
#	mil.line("# errors\n");
#	eb_a := algebra.position(b,111);
#	fb_a := io.print(eb_a);
#	mil.line("b.fetch(-1).print();");
#	gb_a := algebra.fetch(b,-1);
#	hb_a := io.print(gb_a);
#	mil.line("b.slice(8,5).print();");
#	ib_a := algebra.slice(b,8,5);
#	jb_a := io.print(ib_a);
#	mil.line("quit();");
#	kb_a := clients.quit();
##Identifer 'rename' mapped to 'bat.setName'
#
function user.main():void;              #  0 main:void := user.main() {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         # 11 aa_a:oid := CALCint2oid(_12:int) 
    ba_a := calc.setoid(aa_a);          # 12 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("# Some applications may wish to directly access the buns\n"); 
#	io.print("# i.e. they use a BAT like an array.\n"); 
    b := bat.new(nil:int,nil:int);      # 15 b:bat[:int,:int] := CMDBATnew(_17:int, _17:int) {G}
#	io.print("b.rename(\"b\");"); 
    ca_a := bat.setName(b,"b");         # 17 ca_a:void := BKCsetName(b:bat[:int,:int], _20:str) 
#	io.print("b.insert(1,15);"); 
    da_a := bat.insert(b,1,15);         # 19 da_a:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _23:int, _24:int) {G}
#	io.print("b.insert(2,4);"); 
    ea_a := bat.insert(b,2,4);          # 21 ea_a:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _27:int, _28:int) {G}
#	io.print("b.insert(3,int(nil));"); 
    fa_a := calc.int(nil:void);         # 23 fa_a:int := CALCnil2int(_31:void) 
    ga_a := bat.insert(b,3,fa_a);       # 24 ga_a:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _33:int, fa_a:int) {G}
#	io.print("b.insert(4,16);"); 
    ha_a := bat.insert(b,4,16);         # 26 ha_a:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _28:int, _36:int) {G}
#	io.print("b.insert(5,25);"); 
    ia_a := bat.insert(b,5,25);         # 28 ia_a:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _39:int, _40:int) {G}
#	io.print("b.insert(6,36);"); 
    ja_a := bat.insert(b,6,36);         # 30 ja_a:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _43:int, _44:int) {G}
#	io.print("b.insert(7,49);"); 
    ka_a := bat.insert(b,7,49);         # 32 ka_a:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _47:int, _48:int) {G}
#	io.print("b.insert(8,64);"); 
    la_a := bat.insert(b,8,64);         # 34 la_a:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _51:int, _52:int) {G}
#	io.print("b.insert(9,int(nil));"); 
    ma_a := calc.int(nil:void);         # 36 ma_a:int := CALCnil2int(_31:void) 
    na_a := bat.insert(b,9,ma_a);       # 37 na_a:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _56:int, ma_a:int) {G}
#	io.print("b.insert(int(nil),int(nil));"); 
    oa_a := calc.int(nil:void);         # 39 oa_a:int := CALCnil2int(_31:void) 
    pa_a := calc.int(nil:void);         # 40 pa_a:int := CALCnil2int(_31:void) 
    qa_a := bat.insert(b,oa_a,pa_a);    # 41 qa_a:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], oa_a:int, pa_a:int) {G}
#	io.print("b.insert(int(nil),81);"); 
    ra_a := calc.int(nil:void);         # 43 ra_a:int := CALCnil2int(_31:void) 
    sa_a := bat.insert(b,ra_a,81);      # 44 sa_a:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], ra_a:int, _64:int) {G}
#	io.print("#b.rename(\"b\");\n"); 
#	io.print("b.save();"); 
    ta_a := bat.save(b);                # 47 ta_a:void := BKCsave2(b:bat[:int,:int]) 
#	io.print("load(\"b\");"); 
    ua_a := bat.load("b");              # 49 ua_a:bat[:any,:any] := BKCload(_70:str) {G}
#	io.print("b.position(4).print();"); 
    va_a := algebra.position(b,4);      # 51 va_a:wrd := ALGposition(b:bat[:int,:int], _73:int) 
    wa_a := io.print(va_a);             # 52 wa_a:void := IOprint_val(va_a:wrd) 
#	io.print("b.fetch(5).print();"); 
    xa_a := algebra.fetch(b,5);         # 54 xa_a:int := ALGfetchint(b:bat[:int,:int], _77:int) 
    ya_a := io.print(xa_a);             # 55 ya_a:void := IOprint_val(xa_a:int) 
#	io.print("b.fetch(8).print();"); 
    ab_a := algebra.fetch(b,8);         # 57 ab_a:int := ALGfetchint(b:bat[:int,:int], _51:int) 
    bb_a := io.print(ab_a);             # 58 bb_a:void := IOprint_val(ab_a:int) 
#	io.print("b.slice(5,8).print();"); 
    cb_a := algebra.slice(b,5,8);       # 60 cb_a:bat[:int,:int] := ALGslice_int(b:bat[:int,:int], _77:int, _84:int) {G}
    db_a := io.print(cb_a);             # 61 db_a:void := IOprint_val(cb_a:bat[:int,:int]) 
#	io.print("# errors\n"); 
    eb_a := algebra.position(b,111);    # 63 eb_a:wrd := ALGposition(b:bat[:int,:int], _88:int) 
    fb_a := io.print(eb_a);             # 64 fb_a:void := IOprint_val(eb_a:wrd) 
#	io.print("b.fetch(-1).print();"); 
    gb_a := algebra.fetch(b,-1);        # 66 gb_a:int := ALGfetchint(b:bat[:int,:int], _92:int) 
    hb_a := io.print(gb_a);             # 67 hb_a:void := IOprint_val(gb_a:int) 
#	io.print("b.slice(8,5).print();"); 
    ib_a := algebra.slice(b,8,5);       # 69 ib_a:bat[:int,:int] := ALGslice_int(b:bat[:int,:int], _84:int, _77:int) {G}
    jb_a := io.print(ib_a);             # 70 jb_a:void := IOprint_val(ib_a:bat[:int,:int]) 
#	io.print("quit();"); 
    kb_a := clients.quit();             # 72 kb_a:void := CLTquit() 
#Identifer 'rename' mapped to 'bat.setName' 
end main;	# 74  
[ 3 ]
#b.fetch(5).print();
[ 36 ]
#b.fetch(8).print();
[ nil ]
#b.slice(5,8).print();
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
## errors\n
[ 0 ]
!MALException:algebra.fetch: idx out of range

!ERROR: CMDposition: item not found

# 00:12:28 >  
# 00:12:28 >  Done.
# 00:12:28 >  

