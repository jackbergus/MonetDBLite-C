# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	io.print("setoid(oid(20000000));");
	aa_a := calc.oid(20000000);
	ba_a := calc.setoid(aa_a);
#	io.print("#test mark and number primitives\n");
#	io.print("var b:= bat.new(str,int);");
	b := bat.new(nil:str,nil:int);
#	io.print("b.insert(\"the\",1);");
	ca_a := bat.insert(b,"the",1);
#	io.print("b.insert(\"quick\",20);");
	da_a := bat.insert(b,"quick",20);
#	io.print("b.insert(\"brown\",30);");
	ea_a := bat.insert(b,"brown",30);
#	io.print("b.insert(\"fox\",40);");
	fa_a := bat.insert(b,"fox",40);
#	io.print("b.insert(\"jumps\",50);");
	ga_a := bat.insert(b,"jumps",50);
#	io.print("b.insert(\"over\",60);");
	ha_a := bat.insert(b,"over",60);
#	io.print("b.insert(\"lazy\",70);");
	ia_a := bat.insert(b,"lazy",70);
#	io.print("b.insert(\"dog\",80);");
	ja_a := bat.insert(b,"dog",80);
#	io.print("b.insert(str(nil),90);");
	ka_a := calc.str(nil);
	la_a := bat.insert(b,ka_a,90);
#	io.print("b.insert(\".\",100);");
	ma_a := bat.insert(b,".",100);
#	io.print("b.insert(\"\",int(nil));");
	na_a := calc.int(nil);
	oa_a := bat.insert(b,"",na_a);
#	io.print("b.insert(str(nil),int(nil));");
	pa_a := calc.str(nil);
	qa_a := calc.int(nil);
	ra_a := bat.insert(b,pa_a,qa_a);
#	io.print("b.print();");
	sa_a := io.print(b);
#	io.print("var c:= mark(b,oid(20000050));");
	ta_a := calc.oid(20000050);
	c := algebra.markT(b,ta_a);
#	io.print("print(c);");
	ua_a := io.print(c);
#	io.print("var d:=number(b);");
	d := algebra.number(b);
#	io.print("print(d);");
	va_a := io.print(d);
#	io.print("quit();");
	wa_a := clients.quit();
