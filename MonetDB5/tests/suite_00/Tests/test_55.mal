# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	io.print("setoid(oid(20000000));");
	aa_a := calc.oid(20000000);
	ba_a := setoid(aa_a);
#	io.print("# basic nameing problem\n");
	b := bat.new(nil:int,nil:int);
#	io.print("b.insert(1,15);");
	ca_a := bat.insert(b,1,15);
#	io.print("b.insert(2,4);");
	da_a := bat.insert(b,2,4);
#	io.print("b.insert(3,int(nil));");
	ea_a := calc.int(nil);
	fa_a := bat.insert(b,3,ea_a);
#	io.print("b.insert(4,16);");
	ga_a := bat.insert(b,4,16);
#	io.print("b.insert(5,25);");
	ha_a := bat.insert(b,5,25);
#	io.print("b.insert(6,36);");
	ia_a := bat.insert(b,6,36);
#	io.print("b.insert(7,49);");
	ja_a := bat.insert(b,7,49);
#	io.print("b.insert(8,64);");
	ka_a := bat.insert(b,8,64);
#	io.print("b.insert(9,int(nil));");
	la_a := calc.int(nil);
	ma_a := bat.insert(b,9,la_a);
#	io.print("b.insert(int(nil),int(nil));");
	na_a := calc.int(nil);
	oa_a := calc.int(nil);
	pa_a := bat.insert(b,na_a,oa_a);
#	io.print("b.insert(int(nil),81);");
	qa_a := calc.int(nil);
	ra_a := bat.insert(b,qa_a,81);
#	io.print("b.print();");
	sa_a := bat.print(b);
#	io.print("var h:=b.hashsplit(3);");
	h := hashsplit(b,3);
#	io.print("h.print();");
	ta_a := bat.print(h);
#	io.print("dir(\"tmp\");");
	ua_a := dir("tmp");
#	io.print("h.find(0).rename(\"dummy\");");
	va_a := algebra.find(h,0);
	wa_a := bat.setName(va_a,"dummy");
#	io.print("dir(\"dummy\");");
	xa_a := dir("dummy");
#	io.print("dir(\"tmp\");");
	ya_a := dir("tmp");
#	io.print("quit();");
	bb_a := clients.quit();
#Identifer 'rename' mapped to 'bat.setName'
