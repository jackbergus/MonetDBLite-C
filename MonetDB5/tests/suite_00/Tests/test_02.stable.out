stdout of test 'test_02` in directory 'tests/suite_00` itself:


# 00:12:27 >  
# 00:12:27 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_02.mal </dev/null
# 00:12:27 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("var s:= bbp.new(str,int);");
#	s := bbp.new(nil:str,nil:int);
#	mil.line("insert(s,\"hello\",1);");
#	ca_a := bat.insert(s,"hello",1);
#	mil.line("print(find(s,\"hello\"));");
#	da_a := algebra.find(s,"hello");
#	ea_a := io.print(da_a);
#	mil.line("insert(s,\"bello\",2);");
#	fa_a := bat.insert(s,"bello",2);
#	mil.line("insert(s,\"cello\",3);");
#	ga_a := bat.insert(s,"cello",3);
#	mil.line("insert(s,\"dello\",4);");
#	ha_a := bat.insert(s,"dello",4);
#	mil.line("insert(s,\"eello\",5);");
#	ia_a := bat.insert(s,"eello",5);
#	mil.line("insert(s,\"fello\",6);");
#	ja_a := bat.insert(s,"fello",6);
#	mil.line("insert(s,\"gello\",7);");
#	ka_a := bat.insert(s,"gello",7);
#	mil.line("insert(s,\"hello\",8);");
#	la_a := bat.insert(s,"hello",8);
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); info(s).print(); printf(\"#~EndVariableOutput~#\\n\");");
#	ma_a := io.printf("#~BeginVariableOutput~#\n");
#	na_a := bat.info(s);
#	oa_a := io.print(na_a);
#	pa_a := io.printf("#~EndVariableOutput~#\n");
#	mil.line("print(find(s,\"cello\"));");
#	qa_a := algebra.find(s,"cello");
#	ra_a := io.print(qa_a);
#	mil.line("delete(s,\"cello\",3);");
#	sa_a := bat.delete(s,"cello",3);
#	mil.line("print(s);");
#	ta_a := io.print(s);
#	mil.line("var sn:= algebra.select(s,1,5);");
#	sn := algebra.select(s,1,5);
#	mil.line("print(sn);");
#	ua_a := io.print(sn);
#	mil.line("var s2:= semijoin(s.reverse(),sn.reverse());");
#	va_a := bat.reverse(s);
#	wa_a := bat.reverse(sn);
#	s2 := algebra.semijoin(va_a,wa_a);
#	mil.line("print(s2);");
#	xa_a := io.print(s2);
#	mil.line("var x:= algebra.join(s,s2);");
#	x := algebra.join(s,s2);
#	mil.line("print(x);");
#	ya_a := io.print(x);
#	mil.line("quit();");
#	ab_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  (_2:str)
#Predefined code segment 	# 3  (_3:str)
#The compiler can not guarantee an accurate compilation, 	# 4  (_4:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  (_5:str)
#A few guidelines to maximize usefullness. 	# 6  (_6:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  (_7:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  (_8:str)
#use the "mil_schema" for additional support routines 	# 9  (_9:str)
#	io.print("setoid(oid(20000000));"); 	# 10  (_10:str)
    aa_a := calc.oid(20000000);	# 11 CALCint2oid (aa_a:oid)<-(_12:int)
    ba_a := calc.setoid(aa_a);	# 12 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	io.print("var s:= bat.new(str,int);"); 	# 13  (_14:str)
    s := bat.new(nil:str,nil:int);	# 14 CMDBATnew (s:bat[:str,:int])<-(_16:str)(_17:int)
#	io.print("insert(s,\"hello\",1);"); 	# 15  (_18:str)
    ca_a := bat.insert(s,"hello",1);	# 16 BKCinsert_bun (ca_a:void)<-(s:bat[:str,:int])(_20:str)(_21:int)
#	io.print("print(find(s,\"hello\"));"); 	# 17  (_22:str)
    da_a := algebra.find(s,"hello");	# 18 ALGfind (da_a:int)<-(s:bat[:str,:int])(_20:str)
    ea_a := io.print(da_a);	# 19 IOprint_val (ea_a:void)<-(da_a:int)
#	io.print("insert(s,\"bello\",2);"); 	# 20  (_25:str)
    fa_a := bat.insert(s,"bello",2);	# 21 BKCinsert_bun (fa_a:void)<-(s:bat[:str,:int])(_27:str)(_28:int)
#	io.print("insert(s,\"cello\",3);"); 	# 22  (_29:str)
    ga_a := bat.insert(s,"cello",3);	# 23 BKCinsert_bun (ga_a:void)<-(s:bat[:str,:int])(_31:str)(_32:int)
#	io.print("insert(s,\"dello\",4);"); 	# 24  (_33:str)
    ha_a := bat.insert(s,"dello",4);	# 25 BKCinsert_bun (ha_a:void)<-(s:bat[:str,:int])(_35:str)(_36:int)
#	io.print("insert(s,\"eello\",5);"); 	# 26  (_37:str)
    ia_a := bat.insert(s,"eello",5);	# 27 BKCinsert_bun (ia_a:void)<-(s:bat[:str,:int])(_39:str)(_40:int)
#	io.print("insert(s,\"fello\",6);"); 	# 28  (_41:str)
    ja_a := bat.insert(s,"fello",6);	# 29 BKCinsert_bun (ja_a:void)<-(s:bat[:str,:int])(_43:str)(_44:int)
#	io.print("insert(s,\"gello\",7);"); 	# 30  (_45:str)
    ka_a := bat.insert(s,"gello",7);	# 31 BKCinsert_bun (ka_a:void)<-(s:bat[:str,:int])(_47:str)(_48:int)
#	io.print("insert(s,\"hello\",8);"); 	# 32  (_49:str)
    la_a := bat.insert(s,"hello",8);	# 33 BKCinsert_bun (la_a:void)<-(s:bat[:str,:int])(_20:str)(_51:int)
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); info(s).print(); printf(\"#~EndVariableOutput~#\\n\");"); 	# 34  (_52:str)
    ma_a := io.printf("#~BeginVariableOutput~#\n");	# 35 IOprint_str (ma_a:void)<-(_54:str)
    na_a := bat.info(s);	# 36 BKCinfo (na_a:bat[:str,:str])<-(s:bat[:str,:int])
    oa_a := io.print(na_a);	# 37 IOprint_val (oa_a:void)<-(na_a:bat[:str,:str])
    pa_a := io.printf("#~EndVariableOutput~#\n");	# 38 IOprint_str (pa_a:void)<-(_58:str)
#	io.print("print(find(s,\"cello\"));"); 	# 39  (_59:str)
    qa_a := algebra.find(s,"cello");	# 40 ALGfind (qa_a:int)<-(s:bat[:str,:int])(_31:str)
    ra_a := io.print(qa_a);	# 41 IOprint_val (ra_a:void)<-(qa_a:int)
#	io.print("delete(s,\"cello\",3);"); 	# 42  (_62:str)
    sa_a := bat.delete(s,"cello",3);	# 43 BKCdelete_bun (sa_a:void)<-(s:bat[:str,:int])(_31:str)(_32:int)
#	io.print("print(s);"); 	# 44  (_64:str)
    ta_a := io.print(s);	# 45 IOprint_val (ta_a:void)<-(s:bat[:str,:int])
#	io.print("var sn:= algebra.select(s,1,5);"); 	# 46  (_66:str)
    sn := algebra.select(s,1,5);	# 47 ALGselect (sn:bat[:str,:int])<-(s:bat[:str,:int])(_68:int)(_40:int)
#	io.print("print(sn);"); 	# 48  (_69:str)
    ua_a := io.print(sn);	# 49 IOprint_val (ua_a:void)<-(sn:bat[:str,:int])
#	io.print("var s2:= semijoin(s.reverse(),sn.reverse());"); 	# 50  (_71:str)
    va_a := bat.reverse(s);	# 51 BKCreverse (va_a:bat[:int,:str])<-(s:bat[:str,:int])
    wa_a := bat.reverse(sn);	# 52 BKCreverse (wa_a:bat[:int,:str])<-(sn:bat[:str,:int])
    s2 := algebra.semijoin(va_a,wa_a);	# 53 ALGsemijoin (s2:bat[:int,:str])<-(va_a:bat[:int,:str])(wa_a:bat[:int,:str])
#	io.print("print(s2);"); 	# 54  (_75:str)
    xa_a := io.print(s2);	# 55 IOprint_val (xa_a:void)<-(s2:bat[:int,:str])
#	io.print("var x:= algebra.join(s,s2);"); 	# 56  (_77:str)
    x := algebra.join(s,s2);	# 57 ALGjoin (x:bat[:str,:str])<-(s:bat[:str,:int])(s2:bat[:int,:str])
#	io.print("print(x);"); 	# 58  (_79:str)
    ya_a := io.print(x);	# 59 IOprint_val (ya_a:void)<-(x:bat[:str,:str])
#	io.print("quit();"); 	# 60  (_81:str)
    ab_a := clients.quit();	# 61 CLTquitDefault (ab_a:void)
end main;	# 62  
[ 1 ]
#insert(s,\"bello\",2);
#insert(s,\"cello\",3);
#insert(s,\"dello\",4);
#insert(s,\"eello\",5);
#insert(s,\"fello\",6);
#insert(s,\"gello\",7);
#insert(s,\"hello\",8);
#printf(\"#~BeginVariableOutput~#\\n\"); info(s).print(); printf(\"#~EndVariableOutput~#\\n\");
#~BeginVariableOutput~#
#-----------------------------------------#
# h			t		  # name
# str			str		  # type
#-----------------------------------------#
[ "version",		  "25105"	  ]
[ "batId",		  "tmp_7"	  ]
[ "batCacheid",		  "7"		  ]
[ "batParentid",	  "0"		  ]
[ "batSharecnt",	  "0"		  ]
[ "head",		  "str"		  ]
[ "tail",		  "int"		  ]
[ "batPersistence",	  "transient"	  ]
[ "batRestricted",	  "updatable"	  ]
[ "batRefcnt",		  "1"		  ]
[ "batLRefcnt",		  "1"		  ]
[ "batDirty",		  "dirty"	  ]
[ "batSet",		  "0"		  ]
[ "void_tid",		  "-1"		  ]
[ "void_cnt",		  "0"		  ]
[ "hsorted",		  "0"		  ]
[ "hident",		  "h"		  ]
[ "hdense",		  "0"		  ]
[ "hseqbase",		  "0@0"		  ]
[ "hkey",		  "0"		  ]
[ "hloc",		  "0"		  ]
[ "hvarsized",		  "1"		  ]
[ "halign",		  "0"		  ]
[ "hnosorted",		  "1"		  ]
[ "hnosorted_rev",	  "0"		  ]
[ "hnodense",		  "0"		  ]
[ "hnokey[0]",		  "0"		  ]
[ "hnokey[1]",		  "1"		  ]
[ "tident",		  "t"		  ]
[ "tdense",		  "0"		  ]
[ "tseqbase",		  "0@0"		  ]
[ "tsorted",		  "65"		  ]
[ "tkey",		  "1"		  ]
[ "tloc",		  "8"		  ]
[ "tvarsized",		  "0"		  ]
[ "talign",		  "0"		  ]
[ "tnosorted",		  "0"		  ]
[ "tnosorted_rev",	  "0"		  ]
[ "tnodense",		  "0"		  ]
[ "tnokey[0]",		  "0"		  ]
[ "tnokey[1]",		  "0"		  ]
[ "batInserted",	  "0"		  ]
[ "batDeleted",		  "0"		  ]
[ "batFirst",		  "0"		  ]
[ "top",		  "8"		  ]
[ "batStamp",		  "4"		  ]
[ "lastUsed",		  "165"		  ]
[ "curStamp",		  "5"		  ]
[ "batCopiedtodisk",	  "0"		  ]
[ "batDirtydesc",	  "dirty"	  ]
[ "batDirtybuns",	  "clean"	  ]
[ "batBuns.free",	  "128"		  ]
[ "batBuns.size",	  "4096"	  ]
[ "batBuns.maxsize",	  "4096"	  ]
[ "batBuns.storage",	  "malloced"	  ]
[ "batBuns.filename",	  "7.buns"	  ]
[ "hheapdirty",		  "clean"	  ]
[ "hheap.free",		  "8304"	  ]
[ "hheap.size",		  "11272"	  ]
[ "hheap.maxsize",	  "11272"	  ]
[ "hheap.storage",	  "malloced"	  ]
[ "hheap.filename",	  "7.hheap"	  ]
[ "theapdirty",		  "clean"	  ]
#~EndVariableOutput~#
#print(find(s,\"cello\"));
[ 3 ]
#delete(s,\"cello\",3);
#print(s);
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "hello",	  1	  ]
[ "bello",	  2	  ]
[ "hello",	  8	  ]
[ "dello",	  4	  ]
[ "eello",	  5	  ]
[ "fello",	  6	  ]
[ "gello",	  7	  ]
#var sn:= algebra.select(s,1,5);
#print(sn);
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "hello",	  1	  ]
[ "bello",	  2	  ]
[ "dello",	  4	  ]
[ "eello",	  5	  ]
#var s2:= semijoin(s.reverse(),sn.reverse());
#print(s2);
#-------------------------#
# h	t		  # name
# int	str		  # type
#-------------------------#
[ 1,	  "hello"	  ]
[ 2,	  "bello"	  ]
[ 4,	  "dello"	  ]
[ 5,	  "eello"	  ]
#var x:= algebra.join(s,s2);
#print(x);
#---------------------------------#
# h		t		  # name
# str		str		  # type
#---------------------------------#
[ "hello",	  "hello"	  ]
[ "bello",	  "bello"	  ]
[ "dello",	  "dello"	  ]
[ "eello",	  "eello"	  ]
#quit();

# 00:12:27 >  
# 00:12:27 >  Done.
# 00:12:27 >  

