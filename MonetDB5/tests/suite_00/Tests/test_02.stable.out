stdout of test 'test_02` in directory 'tests/suite_00` itself:


# 00:12:27 >  
# 00:12:27 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_02.mal </dev/null
# 00:12:27 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_suite_00
# Visit http://monetdb.cwi.nl/ for further information.
## Monet Mil to Mal compiler
#include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
#	mil.line("var s:= bbp.new(str,int);");
#	s := bbp.new(nil:str,nil:int);
#	mil.line("insert(s,\"hello\",1);");
#	ca_a := bat.insert(s,"hello",1);
#	mil.line("print(find(s,\"hello\"));");
#	da_a := algebra.find(s,"hello");
#	ea_a := io.print(da_a);
#	mil.line("insert(s,\"bello\",2);");
#	fa_a := bat.insert(s,"bello",2);
#	mil.line("insert(s,\"cello\",3);");
#	ga_a := bat.insert(s,"cello",3);
#	mil.line("insert(s,\"dello\",4);");
#	ha_a := bat.insert(s,"dello",4);
#	mil.line("insert(s,\"eello\",5);");
#	ia_a := bat.insert(s,"eello",5);
#	mil.line("insert(s,\"fello\",6);");
#	ja_a := bat.insert(s,"fello",6);
#	mil.line("insert(s,\"gello\",7);");
#	ka_a := bat.insert(s,"gello",7);
#	mil.line("insert(s,\"hello\",8);");
#	la_a := bat.insert(s,"hello",8);
#	mil.line("printf(\"#~BeginVariableOutput~#\\n\"); info(s).print(); printf(\"#~EndVariableOutput~#\\n\");");
#	ma_a := io.printf("#~BeginVariableOutput~#\n");
#	na_a := bat.info(s);
#	oa_a := io.print(na_a);
#	pa_a := io.printf("#~EndVariableOutput~#\n");
#	mil.line("print(find(s,\"cello\"));");
#	qa_a := algebra.find(s,"cello");
#	ra_a := io.print(qa_a);
#	mil.line("delete(s,\"cello\",3);");
#	sa_a := bat.delete(s,"cello",3);
#	mil.line("print(s);");
#	ta_a := io.print(s);
#	mil.line("var sn:= algebra.select(s,1,5);");
#	sn := algebra.select(s,1,5);
#	mil.line("print(sn);");
#	ua_a := io.print(sn);
#	mil.line("var s2:= semijoin(s.reverse(),sn.reverse());");
#	va_a := bat.reverse(s);
#	wa_a := bat.reverse(sn);
#	s2 := algebra.semijoin(va_a,wa_a);
#	mil.line("print(s2);");
#	xa_a := io.print(s2);
#	mil.line("var x:= algebra.join(s,s2);");
#	x := algebra.join(s,s2);
#	mil.line("print(x);");
#	ya_a := io.print(x);
#	mil.line("quit();");
#	ab_a := clients.quit();
#
function user.main():void;              #  0 main:void {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         # 11 aa_a:oid := CALCint2oid(_12:int) 
    ba_a := calc.setoid(aa_a);          # 12 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("var s:= bat.new(str,int);"); 
    s := bat.new(nil:str,nil:int);      # 14 s:bat[:str,:int] := CMDBATnew(_16:str, _17:int) {G}
#	io.print("insert(s,\"hello\",1);"); 
    ca_a := bat.insert(s,"hello",1);    # 16 ca_a:void := BKCinsert_bun(s:bat[:str,:int], _20:str, _21:int) 
#	io.print("print(find(s,\"hello\"));"); 
    da_a := algebra.find(s,"hello");    # 18 da_a:int := ALGfind(s:bat[:str,:int], _20:str) 
    ea_a := io.print(da_a);             # 19 ea_a:void := IOprint_val(da_a:int) 
#	io.print("insert(s,\"bello\",2);"); 
    fa_a := bat.insert(s,"bello",2);    # 21 fa_a:void := BKCinsert_bun(s:bat[:str,:int], _27:str, _28:int) 
#	io.print("insert(s,\"cello\",3);"); 
    ga_a := bat.insert(s,"cello",3);    # 23 ga_a:void := BKCinsert_bun(s:bat[:str,:int], _31:str, _32:int) 
#	io.print("insert(s,\"dello\",4);"); 
    ha_a := bat.insert(s,"dello",4);    # 25 ha_a:void := BKCinsert_bun(s:bat[:str,:int], _35:str, _36:int) 
#	io.print("insert(s,\"eello\",5);"); 
    ia_a := bat.insert(s,"eello",5);    # 27 ia_a:void := BKCinsert_bun(s:bat[:str,:int], _39:str, _40:int) 
#	io.print("insert(s,\"fello\",6);"); 
    ja_a := bat.insert(s,"fello",6);    # 29 ja_a:void := BKCinsert_bun(s:bat[:str,:int], _43:str, _44:int) 
#	io.print("insert(s,\"gello\",7);"); 
    ka_a := bat.insert(s,"gello",7);    # 31 ka_a:void := BKCinsert_bun(s:bat[:str,:int], _47:str, _48:int) 
#	io.print("insert(s,\"hello\",8);"); 
    la_a := bat.insert(s,"hello",8);    # 33 la_a:void := BKCinsert_bun(s:bat[:str,:int], _20:str, _51:int) 
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); info(s).print(); printf(\"#~EndVariableOutput~#\\n\");"); 
    ma_a := io.printf("#~BeginVariableOutput~#\n");# 35 ma_a:void := IOprint_str(_54:str) 
    na_a := bat.info(s);                # 36 na_a:bat[:str,:str] := BKCinfo(s:bat[:str,:int]) {G}
    oa_a := io.print(na_a);             # 37 oa_a:void := IOprint_val(na_a:bat[:str,:str]) 
    pa_a := io.printf("#~EndVariableOutput~#\n");# 38 pa_a:void := IOprint_str(_58:str) 
#	io.print("print(find(s,\"cello\"));"); 
    qa_a := algebra.find(s,"cello");    # 40 qa_a:int := ALGfind(s:bat[:str,:int], _31:str) 
    ra_a := io.print(qa_a);             # 41 ra_a:void := IOprint_val(qa_a:int) 
#	io.print("delete(s,\"cello\",3);"); 
    sa_a := bat.delete(s,"cello",3);    # 43 sa_a:void := BKCdelete_bun(s:bat[:str,:int], _64:str, _65:int) 
#	io.print("print(s);"); 
    ta_a := io.print(s);                # 45 ta_a:void := IOprint_val(s:bat[:str,:int]) 
#	io.print("var sn:= algebra.select(s,1,5);"); 
    sn := algebra.select(s,1,5);        # 47 sn:bat[:str,:int] := ALGselect(s:bat[:str,:int], _70:int, _40:int) {G}
#	io.print("print(sn);"); 
    ua_a := io.print(sn);               # 49 ua_a:void := IOprint_val(sn:bat[:str,:int]) 
#	io.print("var s2:= semijoin(s.reverse(),sn.reverse());"); 
    va_a := bat.reverse(s);             # 51 va_a:bat[:int,:str] := BKCreverse(s:bat[:str,:int]) {G}
    wa_a := bat.reverse(sn);            # 52 wa_a:bat[:int,:str] := BKCreverse(sn:bat[:str,:int]) {G}
    s2 := algebra.semijoin(va_a,wa_a);  # 53 s2:bat[:int,:str] := ALGsemijoin(va_a:bat[:int,:str], wa_a:bat[:int,:str]) {G}
#	io.print("print(s2);"); 
    xa_a := io.print(s2);               # 55 xa_a:void := IOprint_val(s2:bat[:int,:str]) 
#	io.print("var x:= algebra.join(s,s2);"); 
    x := algebra.join(s,s2);            # 57 x:bat[:str,:str] := ALGjoin(s:bat[:str,:int], s2:bat[:int,:str]) {G}
#	io.print("print(x);"); 
    ya_a := io.print(x);                # 59 ya_a:void := IOprint_val(x:bat[:str,:str]) 
#	io.print("quit();"); 
    ab_a := clients.quit();             # 61 ab_a:void 
end main;	# 62  
[ 1 ]
#insert(s,\"bello\",2);
#insert(s,\"cello\",3);
#insert(s,\"dello\",4);
#insert(s,\"eello\",5);
#insert(s,\"fello\",6);
#insert(s,\"gello\",7);
#insert(s,\"hello\",8);
#printf(\"#~BeginVariableOutput~#\\n\"); info(s).print(); printf(\"#~EndVariableOutput~#\\n\");
#~BeginVariableOutput~#
#-----------------------------------------#
# h			t		  # name
# str			str		  # type
#-----------------------------------------#
[ "version",		  "25106"	  ]
[ "batId",		  "tmp_10"	  ]
[ "batCacheid",		  "8"		  ]
[ "hparentid",		  "0"		  ]
[ "tparentid",		  "0"		  ]
[ "batSharecnt",	  "0"		  ]
[ "head",		  "str"		  ]
[ "tail",		  "int"		  ]
[ "batPersistence",	  "transient"	  ]
[ "batRestricted",	  "updatable"	  ]
[ "batRefcnt",		  "1"		  ]
[ "batLRefcnt",		  "1"		  ]
[ "batDirty",		  "dirty"	  ]
[ "batSet",		  "0"		  ]
[ "hsorted",		  "0"		  ]
[ "hident",		  "h"		  ]
[ "hdense",		  "0"		  ]
[ "hseqbase",		  "0@0"		  ]
[ "hkey",		  "0"		  ]
[ "hvarsized",		  "1"		  ]
[ "halign",		  "0"		  ]
[ "hnosorted",		  "1"		  ]
[ "hnosorted_rev",	  "0"		  ]
[ "hnodense",		  "0"		  ]
[ "hnokey[0]",		  "0"		  ]
[ "hnokey[1]",		  "1"		  ]
[ "tident",		  "t"		  ]
[ "tdense",		  "0"		  ]
[ "tseqbase",		  "0@0"		  ]
[ "tsorted",		  "65"		  ]
[ "tkey",		  "1"		  ]
[ "tvarsized",		  "0"		  ]
[ "talign",		  "0"		  ]
[ "tnosorted",		  "0"		  ]
[ "tnosorted_rev",	  "0"		  ]
[ "tnodense",		  "0"		  ]
[ "tnokey[0]",		  "0"		  ]
[ "tnokey[1]",		  "0"		  ]
[ "batInserted",	  "0"		  ]
[ "batDeleted",		  "0"		  ]
[ "batFirst",		  "0"		  ]
[ "htop",		  "64"		  ]
[ "ttop",		  "32"		  ]
[ "batStamp",		  "4"		  ]
[ "lastUsed",		  "165"		  ]
[ "curStamp",		  "5"		  ]
[ "batCopiedtodisk",	  "0"		  ]
[ "batDirtydesc",	  "dirty"	  ]
[ "H->heap.dirty",	  "clean"	  ]
[ "T->heap.dirty",	  "clean"	  ]
[ "head.free",		  "64"		  ]
[ "head.size",		  "2048"	  ]
[ "head.maxsize",	  "2048"	  ]
[ "head.storage",	  "malloced"	  ]
[ "head.filename",	  "10.head"	  ]
[ "tail.free",		  "32"		  ]
[ "tail.size",		  "1024"	  ]
[ "tail.maxsize",	  "1024"	  ]
[ "tail.storage",	  "malloced"	  ]
[ "tail.filename",	  "10.tail"	  ]
[ "H->vheap->dirty",	  "clean"	  ]
[ "hheap.free",		  "8304"	  ]
[ "hheap.size",		  "11272"	  ]
[ "hheap.maxsize",	  "11272"	  ]
[ "hheap.storage",	  "malloced"	  ]
[ "hheap.filename",	  "10.hheap"	  ]
[ "T->vheap->dirty",	  "clean"	  ]
#~EndVariableOutput~#
#print(find(s,\"cello\"));
[ 3 ]
#delete(s,\"cello\",3);
#print(s);
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "hello",	  1	  ]
[ "bello",	  2	  ]
[ "hello",	  8	  ]
[ "dello",	  4	  ]
[ "eello",	  5	  ]
[ "fello",	  6	  ]
[ "gello",	  7	  ]
#var sn:= algebra.select(s,1,5);
#print(sn);
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "hello",	  1	  ]
[ "bello",	  2	  ]
[ "dello",	  4	  ]
[ "eello",	  5	  ]
#var s2:= semijoin(s.reverse(),sn.reverse());
#print(s2);
#-------------------------#
# h	t		  # name
# int	str		  # type
#-------------------------#
[ 1,	  "hello"	  ]
[ 2,	  "bello"	  ]
[ 4,	  "dello"	  ]
[ 5,	  "eello"	  ]
#var x:= algebra.join(s,s2);
#print(x);
#---------------------------------#
# h		t		  # name
# str		str		  # type
#---------------------------------#
[ "hello",	  "hello"	  ]
[ "bello",	  "bello"	  ]
[ "dello",	  "dello"	  ]
[ "eello",	  "eello"	  ]
#quit();

# 00:12:27 >  
# 00:12:27 >  Done.
# 00:12:27 >  

