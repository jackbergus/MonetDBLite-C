stdout of test 'test_02` in directory 'tests/suite_00` itself:


# 00:12:27 >  
# 00:12:27 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34380 --set sql_port=46008 --set xquery_port=58634 --set monet_prompt= --trace --dbname=mTests_tests_suite_00  test_02.mal </dev/null
# 00:12:27 >  

# MonetDB server v5.9.0, based on kernel v1.27.0
# Serving database 'mTests_tests_suite_00', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008- MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:30579/
function user.main():void;
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);
    ba_a := calc.setoid(aa_a);
#	io.print("var s:= bat.new(str,int);"); 
    s := bat.new(nil:str,nil:int);
#	io.print("insert(s,\"hello\",1);"); 
    ca_a := bat.insert(s,"hello",1);
#	io.print("print(find(s,\"hello\"));"); 
    da_a := algebra.find(s,"hello");
    ea_a := io.print(da_a);
#	io.print("insert(s,\"bello\",2);"); 
    fa_a := bat.insert(s,"bello",2);
#	io.print("insert(s,\"cello\",3);"); 
    ga_a := bat.insert(s,"cello",3);
#	io.print("insert(s,\"dello\",4);"); 
    ha_a := bat.insert(s,"dello",4);
#	io.print("insert(s,\"eello\",5);"); 
    ia_a := bat.insert(s,"eello",5);
#	io.print("insert(s,\"fello\",6);"); 
    ja_a := bat.insert(s,"fello",6);
#	io.print("insert(s,\"gello\",7);"); 
    ka_a := bat.insert(s,"gello",7);
#	io.print("insert(s,\"hello\",8);"); 
    la_a := bat.insert(s,"hello",8);
#	io.print("printf(\"#~BeginVariableOutput~#\\n\"); info(s).print(); printf(\"#~EndVariableOutput~#\\n\");"); 
    ma_a := io.printf("#~BeginVariableOutput~#\n");
    na_a := bat.info(s);
    oa_a := io.print(na_a);
    pa_a := io.printf("#~EndVariableOutput~#\n");
#	io.print("print(find(s,\"cello\"));"); 
    qa_a := algebra.find(s,"cello");
    ra_a := io.print(qa_a);
#	io.print("delete(s,\"cello\",3);"); 
    sa_a := bat.delete(s,"cello",3);
#	io.print("print(s);"); 
    ta_a := io.print(s);
#	io.print("var sn:= algebra.select(s,1,5);"); 
    sn := algebra.select(s,1,5);
#	io.print("print(sn);"); 
    ua_a := io.print(sn);
#	io.print("var s2:= semijoin(s.reverse(),sn.reverse());"); 
    va_a := bat.reverse(s);
    wa_a := bat.reverse(sn);
    s2 := algebra.semijoin(va_a,wa_a);
#	io.print("print(s2);"); 
    xa_a := io.print(s2);
#	io.print("var x:= algebra.join(s,s2);"); 
    x := algebra.join(s,s2);
#	io.print("print(x);"); 
    ya_a := io.print(x);
#	io.print("quit();"); 
    ab_a := clients.quit();
end main;
[ 1 ]
#insert(s,\"bello\",2);
#insert(s,\"cello\",3);
#insert(s,\"dello\",4);
#insert(s,\"eello\",5);
#insert(s,\"fello\",6);
#insert(s,\"gello\",7);
#insert(s,\"hello\",8);
#printf(\"#~BeginVariableOutput~#\\n\"); info(s).print(); printf(\"#~EndVariableOutput~#\\n\");
#~BeginVariableOutput~#
#-----------------------------------------#
# h			t		  # name
# str			str		  # type
#-----------------------------------------#
[ "batId",		  "tmp_657"	  ]
[ "batCacheid",		  "431"		  ]
[ "hparentid",		  "0"		  ]
[ "tparentid",		  "0"		  ]
[ "batSharecnt",	  "0"		  ]
[ "batCount",		  "8"		  ]
[ "batCapacity",	  "256"		  ]
[ "head",		  "str"		  ]
[ "tail",		  "int"		  ]
[ "batPersistence",	  "transient"	  ]
[ "batRestricted",	  "updatable"	  ]
[ "batRefcnt",		  "1"		  ]
[ "batLRefcnt",		  "9"		  ]
[ "batDirty",		  "dirty"	  ]
[ "batSet",		  "0"		  ]
[ "hsorted",		  "0"		  ]
[ "hrevsorted",		  "0"		  ]
[ "hident",		  "h"		  ]
[ "hdense",		  "0"		  ]
[ "hseqbase",		  "0@0"		  ]
[ "hkey",		  "0"		  ]
[ "hvarsized",		  "1"		  ]
[ "halign",		  "20000046"	  ]
[ "hnosorted",		  "1"		  ]
[ "hnorevsorted",	  "2"		  ]
[ "hnodense",		  "0"		  ]
[ "hnokey[0]",		  "0"		  ]
[ "hnokey[1]",		  "7"		  ]
[ "hnonil",		  "1"		  ]
[ "hnil",		  "0"		  ]
[ "tident",		  "t"		  ]
[ "tdense",		  "0"		  ]
[ "tseqbase",		  "0@0"		  ]
[ "tsorted",		  "1"		  ]
[ "trevsorted",		  "0"		  ]
[ "tkey",		  "1"		  ]
[ "tvarsized",		  "0"		  ]
[ "talign",		  "20000049"	  ]
[ "tnosorted",		  "0"		  ]
[ "tnorevsorted",	  "7"		  ]
[ "tnodense",		  "0"		  ]
[ "tnokey[0]",		  "0"		  ]
[ "tnokey[1]",		  "0"		  ]
[ "tnonil",		  "1"		  ]
[ "tnil",		  "0"		  ]
[ "batInserted",	  "0"		  ]
[ "batDeleted",		  "0"		  ]
[ "batFirst",		  "0"		  ]
[ "htop",		  "8"		  ]
[ "ttop",		  "32"		  ]
[ "batStamp",		  "1397"	  ]
[ "lastUsed",		  "71369"	  ]
[ "curStamp",		  "1513"	  ]
[ "batCopiedtodisk",	  "0"		  ]
[ "batDirtydesc",	  "dirty"	  ]
[ "H->heap.dirty",	  "clean"	  ]
[ "T->heap.dirty",	  "clean"	  ]
[ "head.free",		  "8"		  ]
[ "head.size",		  "256"		  ]
[ "head.maxsize",	  "256"		  ]
[ "head.storage",	  "malloced"	  ]
[ "head.newstorage",	  "malloced"	  ]
[ "head.filename",	  "06/657.head"	  ]
[ "tail.free",		  "32"		  ]
[ "tail.size",		  "1024"	  ]
[ "tail.maxsize",	  "1024"	  ]
[ "tail.storage",	  "malloced"	  ]
[ "tail.newstorage",	  "malloced"	  ]
[ "tail.filename",	  "06/657.tail"	  ]
[ "H->vheap->dirty",	  "clean"	  ]
[ "hheap.free",		  "8358"	  ]
[ "hheap.size",		  "10240"	  ]
[ "hheap.maxsize",	  "10240"	  ]
[ "hheap.storage",	  "malloced"	  ]
[ "hheap.newstorage",	  "malloced"	  ]
[ "hheap.filename",	  "06/657.hheap"  ]
[ "T->vheap->dirty",	  "clean"	  ]
#~EndVariableOutput~#
#print(find(s,\"cello\"));
[ 3 ]
#delete(s,\"cello\",3);
#print(s);
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "hello",	  1	  ]
[ "bello",	  2	  ]
[ "hello",	  8	  ]
[ "dello",	  4	  ]
[ "eello",	  5	  ]
[ "fello",	  6	  ]
[ "gello",	  7	  ]
#var sn:= algebra.select(s,1,5);
#print(sn);
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "hello",	  1	  ]
[ "bello",	  2	  ]
[ "dello",	  4	  ]
[ "eello",	  5	  ]
#var s2:= semijoin(s.reverse(),sn.reverse());
#print(s2);
#-------------------------#
# h	t		  # name
# int	str		  # type
#-------------------------#
[ 1,	  "hello"	  ]
[ 2,	  "bello"	  ]
[ 4,	  "dello"	  ]
[ 5,	  "eello"	  ]
#var x:= algebra.join(s,s2);
#print(x);
#---------------------------------#
# h		t		  # name
# str		str		  # type
#---------------------------------#
[ "hello",	  "hello"	  ]
[ "bello",	  "bello"	  ]
[ "dello",	  "dello"	  ]
[ "eello",	  "eello"	  ]
#quit();

# 00:12:27 >  
# 00:12:27 >  Done.
# 00:12:27 >  

