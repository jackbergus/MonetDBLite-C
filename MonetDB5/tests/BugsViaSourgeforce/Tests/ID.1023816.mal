# Monet Mil to Mal compiler
#include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	mil.line("var x:=new(void,int);");
	x := bat.new(:void,:int);
#	mil.line("x.insert(void(nil),2);");
	aa_a := calc.void(nil);
	ba_a := bat.insert(x,aa_a,2);
#	mil.line("x.insert(void(nil),4);");
	ca_a := calc.void(nil);
	da_a := bat.insert(x,ca_a,4);
#	mil.line("x:=x.reverse().mark(0@0).reverse();");
	ea_a := bat.reverse(x);
	fa_a := algebra.markT(ea_a,0@0);
	x := bat.reverse(fa_a);
#	mil.line("table(x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x);");
	ga_a := io.table(x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x);
