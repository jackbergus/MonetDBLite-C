# Monet Mil to Mal compiler
#include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	mil.line("var a:=new(oid,int).insert(0@0,0).access(BAT_READ);");
	aa_a := new(nil:oid,nil:int);
	BAT_READ:= mil.take("BAT_READ");
	ba_a := insert(aa_a,0@0,0);
	a := access(ba_a,BAT_READ);
#	mil.line("var b:=new(oid,int).insert(1@0,1).access(BAT_READ);");
	ca_a := new(nil:oid,nil:int);
	da_a := insert(ca_a,1@0,1);
	b := access(da_a,BAT_READ);
#	mil.line("var x:=new(oid,int).insert(a).insert(b).access(BAT_READ).reverse();");
	ea_a := new(nil:oid,nil:int);
	fa_a := insert(ea_a,a);
	ga_a := insert(fa_a,b);
	ha_a := access(ga_a,BAT_READ);
	x := reverse(ha_a);
#	mil.line("var c:=b.kunion(a);");
	c := kunion(b,a);
#	mil.line("var d:=a.kunion(b);");
	d := kunion(a,b);
#	mil.line("x.print();");
	ia_a := print(x);
#	mil.line("c.print();");
	ja_a := print(c);
#	mil.line("d.print();");
	ka_a := print(d);
#	mil.line("x.reverse().seqbase().print();");
	la_a := reverse(x);
	ma_a := bat.setSequenceBase(la_a);
	na_a := print(ma_a);
#	mil.line("c.seqbase().print();");
	oa_a := bat.setSequenceBase(c);
	pa_a := print(oa_a);
#	mil.line("d.seqbase().print();");
	qa_a := bat.setSequenceBase(d);
	ra_a := print(qa_a);
#	mil.line("var e:=x.join(c);");
	e := join(x,c);
#	mil.line("var f:=x.join(d);");
	f := join(x,d);
#	mil.line("e.count().print();");
	sa_a := count(e);
	ta_a := print(sa_a);
#	mil.line("f.count().print();");
	ua_a := count(f);
	va_a := print(ua_a);
#	mil.line("e.print();");
	wa_a := print(e);
#	mil.line("f.print();");
	xa_a := print(f);
#Identifer 'seqbase' mapped to 'bat.setSequenceBase'
