# Monet Mil to Mal compiler
#include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	mil.line("# Date:\t\t2002-08-30 08:04\n");
#	mil.line("# Priority:\t5\n");
#	mil.line("# Submitted By:\tArjen P. de Vries (apdv)\n");
#	mil.line("# Assigned To:\tNiels Nes (nielsnes)\n");
#	mil.line("# Category:\tNone\n");
#	mil.line("# Status:\tClosed\n");
#	mil.line("# Summary:\n");
#	mil.line("# join uses wrong column (\?)\n");
#	mil.line("# \n");
#	mil.line("# a join with a .reverse.mirror-ed void-oid-bat gives a \n");
#	mil.line("# non-empty \n");
#	mil.line("# result while it should have been empty. \n");
#	mil.line("");
	aa_a := oid(0);
	ba_a := new(nil:void,nil:oid);
	ca_a := oid(0);
	da_a := oid(10);
	ea_a := bat.setSequenceBase(ba_a,aa_a);
	t1 := insert(ea_a,ca_a,da_a);
#	mil.line("var t1 := new(void,oid).seqbase(oid(0)).insert(oid(0),oid(10));");
	fa_a := oid(0);
	ga_a := new(nil:void,nil:int);
	ha_a := oid(0);
	ia_a := bat.setSequenceBase(ga_a,fa_a);
	t2 := insert(ia_a,ha_a,1);
#	mil.line("");
	ja_a := printf("LHS:\n");
#	mil.line("printf(\"LHS:\\n\");");
	ka_a := reverse(t1);
	la_a := mirror(ka_a);
	ma_a := print(la_a);
#	mil.line("t1.reverse().mirror().print();");
	na_a := printf("RHS:\n");
#	mil.line("printf(\"RHS:\\n\");");
	oa_a := print(t2);
#	mil.line("t2.print();");
	pa_a := printf("Result (should be empty):\n");
#	mil.line("printf(\"Result (should be empty):\\n\");");
	qa_a := reverse(t1);
#	mil.line("t1.reverse();");
	ra_a := mirror(t1);
	sa_a := join(ra_a,t2);
	ta_a := print(sa_a);
#Identifer 'seqbase' mapped to 'bat.setSequenceBase'
