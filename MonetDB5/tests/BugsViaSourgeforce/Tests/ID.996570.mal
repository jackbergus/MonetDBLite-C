# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	io.print("var a:=new(void,int);");
	a := new(nil:void,nil:int);
#	io.print("a.insert(nil,1);");
	aa_a := insert(a,nil,1);
#	io.print("a.insert(nil,2);");
	ba_a := insert(a,nil,2);
#	io.print("a.print();");
	ca_a := print(a);
#	io.print("var b:=new(oid,int);");
	b := new(nil:oid,nil:int);
#	io.print("b.insert(3@0,3);");
	da_a := insert(b,3@0,3);
#	io.print("b.insert(4@0,4);");
	ea_a := insert(b,4@0,4);
#	io.print("b.print();");
	fa_a := print(b);
#	io.print("var c:=a.copy().access(BAT_WRITE);;");
	BAT_WRITE:= mil.take("BAT_WRITE");
	ga_a := copy(a);
	c := access(ga_a,BAT_WRITE);
#	io.print("c.print();");
	ha_a := print(c);
#	io.print("var d:=c.insert(b);");
	d := insert(c,b);
#	io.print("d.print();");
	ia_a := print(d);
#	io.print("a.seqbase(0@0);");
#	io.print("a.print();");
	ka_a := print(a);
#	io.print("c:=a.copy().access(BAT_WRITE);");
	la_a := copy(a);
	c := access(la_a,BAT_WRITE);
#	io.print("c.print();");
	ma_a := print(c);
#	io.print("d:=c.insert(b);");
	d := insert(c,b);
#	io.print("d.print();");
	na_a := print(d);
#	io.print("b:=new(oid,int);");
	b := new(nil:oid,nil:int);
#	io.print("b.insert(2@0,3);");
	oa_a := insert(b,2@0,3);
#	io.print("b.insert(4@0,4);");
	pa_a := insert(b,4@0,4);
#	io.print("b.print();");
	qa_a := print(b);
#	io.print("c:=a.copy().access(BAT_WRITE);");
	ra_a := copy(a);
	c := access(ra_a,BAT_WRITE);
#	io.print("c.print();");
	sa_a := print(c);
#	io.print("d:=c.insert(b);");
	d := insert(c,b);
#	io.print("d.print();");
	ta_a := print(d);
