stdout of test 'ID.1023816` in directory 'tests/BugsViaSourgeforce` itself:


# 07:27:17 >  
# 07:27:17 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugsViaSourgeforce  ID.1023816.mal < /dev/null
# 07:27:17 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugsViaSourgeforce
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("var x:=new(void,int);");
#	x := bat.new(:void,:int);
##	mil.line("x.insert(void(nil),2);");
#	aa_a := calc.void(nil);
#	ba_a := bat.insert(x,aa_a,2);
##	mil.line("x.insert(void(nil),4);");
#	ca_a := calc.void(nil);
#	da_a := bat.insert(x,ca_a,4);
##	mil.line("x:=x.reverse().mark(0@0).reverse();");
#	ea_a := bat.reverse(x);
#	fa_a := algebra.markT(ea_a,0@0);
#	x := bat.reverse(fa_a);
##	mil.line("table(x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x);");
#	ga_a := io.table(x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x);
#
function user.main():void;              #  0 main:void := user.main() {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("var x:=new(void,int);"); 
    x := bat.new(:oid,:int);            # 11 x:bat[:oid,:int] := CMDBATnew(_12:oid, _13:int) {G}
#	io.print("x.insert(void(nil),2);"); 
    aa_a := calc.oid(nil);              # 13 aa_a:oid := CALCnil2oid(_16:void) 
    ba_a := bat.insert(x,aa_a,2);       # 14 ba_a:bat[:oid,:int] := BKCinsert_bun(x:bat[:oid,:int], aa_a:oid, _18:int) {G}
#	io.print("x.insert(void(nil),4);"); 
    ca_a := calc.oid(nil);              # 16 ca_a:oid := CALCnil2oid(_16:void) 
    da_a := bat.insert(x,ca_a,4);       # 17 da_a:bat[:oid,:int] := BKCinsert_bun(x:bat[:oid,:int], ca_a:oid, _22:int) {G}
#	io.print("x:=x.reverse().mark(0@0).reverse();"); 
    ea_a := bat.reverse(x);             # 19 ea_a:bat[:int,:oid] := BKCreverse(x:bat[:oid,:int]) {G}
    fa_a := algebra.markT(ea_a,0@0);    # 20 fa_a:bat[:int,:oid] := ALGtmark(ea_a:bat[:int,:oid], _26:oid) {G}
    x := bat.reverse(fa_a);             # 21 x:bat[:oid,:int] := BKCreverse(fa_a:bat[:int,:oid]) {G}
#	io.print("table(x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x);"); 
    ga_a := io.table(x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x);# 23 ga_a:void := IOttable(x:bat[:oid,:int], x:bat[:oid,:int], x:bat[:oid,:int], x:bat[:oid,:int], x:bat[:oid,:int], x:bat[:oid,:int], x:bat[:oid,:int], x:bat[:oid,:int], x:bat[:oid,:int], x:bat[:oid,:int], x:bat[:oid,:int], x:bat[:oid,:int], x:bat[:oid,:int], x:bat[:oid,:int], x:bat[:oid,:int], x:bat[:oid,:int]) 
end main;	# 24  
#---------------------------------------------------------------------------------------------------------------------------------#
# h	h	h	h	h	h	h	h	h	h	h	h	h	h	h	h	  # name
# int	int	int	int	int	int	int	int	int	int	int	int	int	int	int	int	  # type
#---------------------------------------------------------------------------------------------------------------------------------#
[ 2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2	  ]
[ 4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4	  ]

# 07:27:18 >  
# 07:27:18 >  Done.
# 07:27:18 >  

