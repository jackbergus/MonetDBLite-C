stdout of test 'ID.1023816` in directory 'tests/BugsViaSourgeforce` itself:


# 07:27:17 >  
# 07:27:17 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugsViaSourgeforce  ID.1023816.mal < /dev/null
# 07:27:17 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugsViaSourgeforce
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("var x:=new(void,int);");
#	x := bat.new(:void,:int);
##	mil.line("x.insert(void(nil),2);");
#	aa_a := calc.void(nil);
#	ba_a := bat.insert(x,aa_a,2);
##	mil.line("x.insert(void(nil),4);");
#	ca_a := calc.void(nil);
#	da_a := bat.insert(x,ca_a,4);
##	mil.line("x:=x.reverse().mark(0@0).reverse();");
#	ea_a := bat.reverse(x);
#	fa_a := algebra.markT(ea_a,0@0);
#	x := bat.reverse(fa_a);
##	mil.line("table(x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x);");
#	ga_a := io.table(x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x);
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  (_2:str)
#Predefined code segment 	# 3  (_3:str)
#The compiler can not guarantee an accurate compilation, 	# 4  (_4:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  (_5:str)
#A few guidelines to maximize usefullness. 	# 6  (_6:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  (_7:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  (_8:str)
#use the "mil_schema" for additional support routines 	# 9  (_9:str)
#	io.print("var x:=new(void,int);"); 	# 10  (_10:str)
    x := bat.new(:void,:int);	# 11 CMDBATnew (x:bat[:void,:int])<-(_12:void)(_13:int)
#	io.print("x.insert(void(nil),2);"); 	# 12  (_14:str)
    aa_a := calc.void(nil:void);	# 13 CALCnil2void (aa_a:void)<-(_16:void)
    ba_a := bat.insert(x,aa_a,2);	# 14 BKCinsert_bun (ba_a:void)<-(x:bat[:void,:int])(aa_a:void)(_18:int)
#	io.print("x.insert(void(nil),4);"); 	# 15  (_19:str)
    ca_a := calc.void(nil:void);	# 16 CALCnil2void (ca_a:void)<-(_16:void)
    da_a := bat.insert(x,ca_a,4);	# 17 BKCinsert_bun (da_a:void)<-(x:bat[:void,:int])(ca_a:void)(_22:int)
#	io.print("x:=x.reverse().mark(0@0).reverse();"); 	# 18  (_23:str)
    ea_a := bat.reverse(x);	# 19 BKCreverse (ea_a:bat[:int,:void])<-(x:bat[:void,:int])
    fa_a := algebra.markT(ea_a,0@0);	# 20 ALGtmark (fa_a:bat[:int,:void])<-(ea_a:bat[:int,:void])(_26:oid)
    x := bat.reverse(fa_a);	# 21 BKCreverse (x:bat[:void,:int])<-(fa_a:bat[:int,:void])
#	io.print("table(x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x);"); 	# 22  (_27:str)
    ga_a := io.table(x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x);	# 23 IOttable (ga_a:void)<-(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])(x:bat[:void,:int])
end main;	# 24  
#---------------------------------------------------------------------------------------------------------------------------------#
# h	h	h	h	h	h	h	h	h	h	h	h	h	h	h	h	  # name
# int	int	int	int	int	int	int	int	int	int	int	int	int	int	int	int	  # type
#---------------------------------------------------------------------------------------------------------------------------------#
[ 2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2,	  2	  ]
[ 4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4,	  4	  ]

# 07:27:18 >  
# 07:27:18 >  Done.
# 07:27:18 >  

