# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	io.print("debugmask(2);");
	aa_a := setDebug(2);
#	io.print("var a20 := bat(oid,oid).insert(2@0,1@0).insert(1@0,2@0).insert(0@0,0@0);");
	ba_a := new(nil:oid,nil:oid);
	ca_a := insert(ba_a,2@0,1@0);
	da_a := insert(ca_a,1@0,2@0);
	a20 := insert(da_a,0@0,0@0);
#	io.print("var b20 := a20;\t#.copy;");
	b20 := a20;
#	io.print("#.copy;\n");
	b20 := multiplex.tactics("int",b20);
#	io.print("a20 := a20.[int]();");
	a20 := multiplex.tactics("int",a20);
#	io.print("var ai2:=a20.info();");
	ai2 := info(a20);
#	io.print("a20.[-](b20);");
	ea_a := multiplex.tactics("-",a20,b20);
#	io.print("b20 := b20.[oid]().reverse().[int]();");
	fa_a := multiplex.tactics("oid",b20);
	ga_a := reverse(fa_a);
	b20 := multiplex.tactics("int",ga_a);
#	io.print("b20.print();");
	ha_a := print(b20);
#	io.print("var a21 := bat(oid,oid).insert(2@0,1@0).insert(1@0,2@0).insert(0@0,0@0);");
	ia_a := new(nil:oid,nil:oid);
	ja_a := insert(ia_a,2@0,1@0);
	ka_a := insert(ja_a,1@0,2@0);
	a21 := insert(ka_a,0@0,0@0);
#	io.print("var b21 := a21.copy();");
	b21 := copy(a21);
#	io.print("b21 := b21.[int]();");
	b21 := multiplex.tactics("int",b21);
#	io.print("a21 := a21.[int]();");
	a21 := multiplex.tactics("int",a21);
#	io.print("var ai2:=a21.info();");
	ai2 := info(a21);
#	io.print("a21.[-](b21);");
	la_a := multiplex.tactics("-",a21,b21);
#	io.print("b21 := b21.[oid]().reverse().[int]();");
	ma_a := multiplex.tactics("oid",b21);
	na_a := reverse(ma_a);
	b21 := multiplex.tactics("int",na_a);
#	io.print("b21.print();");
	oa_a := print(b21);
#	io.print("debugmask(0);");
	pa_a := setDebug(0);
#	io.print("var a00 := bat(oid,oid).insert(2@0,1@0).insert(1@0,2@0).insert(0@0,0@0);");
	qa_a := new(nil:oid,nil:oid);
	ra_a := insert(qa_a,2@0,1@0);
	sa_a := insert(ra_a,1@0,2@0);
	a00 := insert(sa_a,0@0,0@0);
#	io.print("var b00 := a00;\t#.copy;");
	b00 := a00;
#	io.print("#.copy;\n");
	b00 := multiplex.tactics("int",b00);
#	io.print("a00 := a00.[int]();");
	a00 := multiplex.tactics("int",a00);
#	io.print("ai2:=a00.info();");
	ai2 := info(a00);
#	io.print("a00.[-](b00);");
	ta_a := multiplex.tactics("-",a00,b00);
#	io.print("b00 := b00.[oid]().reverse().[int]();");
	ua_a := multiplex.tactics("oid",b00);
	va_a := reverse(ua_a);
	b00 := multiplex.tactics("int",va_a);
#	io.print("b00.print();");
	wa_a := print(b00);
#	io.print("var a01 := bat(oid,oid).insert(2@0,1@0).insert(1@0,2@0).insert(0@0,0@0);");
	xa_a := new(nil:oid,nil:oid);
	ya_a := insert(xa_a,2@0,1@0);
	ab_a := insert(ya_a,1@0,2@0);
	a01 := insert(ab_a,0@0,0@0);
#	io.print("var b01 := a01.copy();");
	b01 := copy(a01);
#	io.print("b01 := b01.[int]();");
	b01 := multiplex.tactics("int",b01);
#	io.print("a01 := a01.[int]();");
	a01 := multiplex.tactics("int",a01);
#	io.print("ai2:=a01.info();");
	ai2 := info(a01);
#	io.print("a01.[-](b01);");
	bb_a := multiplex.tactics("-",a01,b01);
#	io.print("b01 := b01.[oid]().reverse().[int]();");
	cb_a := multiplex.tactics("oid",b01);
	db_a := reverse(cb_a);
	b01 := multiplex.tactics("int",db_a);
#	io.print("b01.print();");
	eb_a := print(b01);
#Identifer 'debugmask' mapped to 'setDebug'
