stdout of test 'ID.914159` in directory 'tests/BugsViaSourgeforce` itself:


# 07:27:17 >  
# 07:27:17 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugsViaSourgeforce  ID.914159.mal < /dev/null
# 07:27:17 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugsViaSourgeforce
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("PROC crash() : void");
#function crash():void;
#
##	mil.line("\tprint($t);\n");
#	unknown:= mil.take("unknown");
#	aa_a := io.print(unknown);
#end crash;
function user.crash():void;	# 0  (crash:void)
#	mil.line("\tprint($t);\n"); 	# 1  (_1:str)
    unknown := mil.take("unknown");	# 2  unknown (unknown:any)<-(_3:str)
    aa_a := io.print(unknown);	# 3 IOprint_val (aa_a:int)<-(unknown:any)
end crash;	# 4  
!ERROR: 'mil.take' undefined in user.crash[2] unknown:any := mil.take(_3:str)
##	mil.line("crash();");
#	ba_a := user.crash();
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  (_2:str)
#Predefined code segment 	# 3  (_3:str)
#The compiler can not guarantee an accurate compilation, 	# 4  (_4:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  (_5:str)
#A few guidelines to maximize usefullness. 	# 6  (_6:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  (_7:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  (_8:str)
#use the "mil_schema" for additional support routines 	# 9  (_9:str)
#	io.print("PROC crash() : void"); 	# 10  (_10:str)
#	io.print("crash();"); 	# 11  (_11:str)
    ba_a := user.crash();	# 12  (ba_a:void)
end main;	# 13  
!ERROR: SyntaxError:user.crash[0]:'user.crash' contains errors

# 07:27:17 >  
# 07:27:17 >  Done.
# 07:27:17 >  

