stdout of test 'ID.914159` in directory 'tests/BugsViaSourgeforce` itself:


# 07:27:17 >  
# 07:27:17 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugsViaSourgeforce  ID.914159.mal < /dev/null
# 07:27:17 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugsViaSourgeforce
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("PROC crash() : void");
#function crash():void;
#
##	mil.line("\tprint($t);\n");
#	unknown:= mil.take("unknown");
#	aa_a := io.print(unknown);
#end crash;
!TypeException:user.crash[2]:'mil.take' undefined in: unknown:any := mil.take(_3:str)
function user.crash():void;             #  0 crash:void := user.crash() 
#	io.print("\tprint($t);\n"); 
    unknown := mil.take("unknown");     #  2 unknown:any := mil.take(_3:str) {U}
    aa_a := io.print(unknown);          #  3 aa_a:void := IOprint_val(unknown:any) 
end crash;	# 4  
##	io.print("crash();");
#	ba_a := user.crash();
#
function user.main():void;              #  0 main:void := user.main() 
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("PROC crash() : void"); 
#	io.print("crash();"); 
    ba_a := user.crash();               # 12 ba_a:void := user.crash() 
end main;	# 13  
!MALException:user.crash[0]:Syntax error in script

# 10:01:19 >  
# 10:01:19 >  Done.
# 10:01:19 >  

