# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	io.print("VAR b := new(void,str).seqbase(0@0);");
	aa_a := new(nil:oid,nil:str);
#	io.print("b.insert(nil,\"zero\");");
	ba_a := insert(b,nil,"zero");
#	io.print("b.print();");
	ca_a := print(b);
#	io.print("printf(\"oid(0)   -> %s\\n\",str(b.find(oid(0))));");
	da_a := oid(0);
	ea_a := find(b,da_a);
	fa_a := str(ea_a);
	ga_a := printf("oid(0)   -> %s\n",fa_a);
#	io.print("printf(\"oid(nil) -> %s\\n\",str(b.find(oid(nil))));");
	ha_a := oid(nil);
	ia_a := find(b,ha_a);
	ja_a := str(ia_a);
	ka_a := printf("oid(nil) -> %s\n",ja_a);
#	io.print("b.seqbase(oid(nil));");
	la_a := oid(nil);
#	io.print("b.print();");
	na_a := print(b);
#	io.print("printf(\"oid(0)   -> %s\\n\",str(b.find(oid(0))));");
	oa_a := oid(0);
	pa_a := find(b,oa_a);
	qa_a := str(pa_a);
	ra_a := printf("oid(0)   -> %s\n",qa_a);
#	io.print("printf(\"oid(nil) -> %s\\n\",str(b.find(oid(nil))));");
	sa_a := oid(nil);
	ta_a := find(b,sa_a);
	ua_a := str(ta_a);
	va_a := printf("oid(nil) -> %s\n",ua_a);
