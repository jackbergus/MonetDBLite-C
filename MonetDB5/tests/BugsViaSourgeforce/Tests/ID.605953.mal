# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
	t := bat.new(nil:oid,nil:str);
	aa_a := calc.oid(0);
	ba_a := bat.insert(t,aa_a,"a");
	ca_a := calc.oid(1);
	da_a := bat.insert(t,ca_a,"b");
	ea_a := calc.oid(2);
	fa_a := bat.insert(t,ea_a,"c");
	ga_a := calc.oid(3);
	ha_a := bat.insert(t,ga_a,"d");
	ia_a := calc.oid(4);
	ja_a := bat.insert(t,ia_a,"e");
	ka_a := calc.oid(5);
	la_a := bat.insert(t,ka_a,"f");
	ma_a := calc.oid(6);
	na_a := bat.insert(t,ma_a,"g");
	oa_a := calc.oid(7);
	pa_a := bat.insert(t,oa_a,"h");
	qa_a := algebra.markT(t,nil:oid);
	ra_a := io.print(t);
	t2 := bat.new(nil:oid,nil:str);
	va_a := bat.append(t2,"a");
	xa_a := bat.append(t2,"b");
	mb_a := io.print(xa_a);
#Identifer 'seqbase' mapped to 'bat.setSequenceBase'
