# Monet Mil to Mal compiler
#include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	mil.line("var x:=new(int,void);");
	x := new(nil:int,nil:void);
#	mil.line("x.insert(1,nil);");
	aa_a := insert(x,1,nil);
#	mil.line("x.insert(1,nil);");
	ba_a := insert(x,1,nil);
#	mil.line("x.insert(2,nil);");
	ca_a := insert(x,2,nil);
#	mil.line("x.insert(3,nil);");
	da_a := insert(x,3,nil);
#	mil.line("x.insert(3,nil);");
	ea_a := insert(x,3,nil);
#	mil.line("x:=x.mark(0@0);");
	x := mark(x,0@0);
#	mil.line("var y:=[oid](x);");
	y := multiplex.tactics("oid",x);
#	mil.line("var z:=x.copy().access(BAT_APPEND);");
	BAT_APPEND:= mil.take("BAT_APPEND");
	fa_a := copy(x);
	z := access(fa_a,BAT_APPEND);
#	mil.line("z.insert(2,nil);");
	ga_a := insert(z,2,nil);
#	mil.line("z.access(BAT_READ);");
	BAT_READ:= mil.take("BAT_READ");
	ha_a := access(z,BAT_READ);
#	mil.line("var w:=x.copy().reverse().mark(0@0).reverse();");
	ia_a := copy(x);
	ja_a := reverse(ia_a);
	ka_a := mark(ja_a,0@0);
	w := reverse(ka_a);
#	mil.line("var d:=debugmask();");
	d := setDebug();
#	mil.line("debugmask(or(d,131072));");
	la_a := or(d,131072);
	ma_a := setDebug(la_a);
#	mil.line("y.print();");
	na_a := print(y);
#	mil.line("{min}(y).print();");
	oa_a := group.min(y);
	pa_a := print(oa_a);
#	mil.line("x.print();");
	qa_a := print(x);
#	mil.line("{min}(x).print();");
	ra_a := group.min(x);
	sa_a := print(ra_a);
#	mil.line("w.print();");
	ta_a := print(w);
#	mil.line("{min}(w).print();");
	ua_a := group.min(w);
	va_a := print(ua_a);
#	mil.line("z.print();");
	wa_a := print(z);
#	mil.line("{min}(z).print();");
	xa_a := group.min(z);
	ya_a := print(xa_a);
#Identifer 'debugmask' mapped to 'setDebug'
