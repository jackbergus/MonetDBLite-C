stdout of test 'ID.605953` in directory 'tests/BugsViaSourgeforce` itself:


# 07:27:17 >  
# 07:27:17 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugsViaSourgeforce  ID.605953.mal < /dev/null
# 07:27:17 >  

!WARNING: GDKlockHome: ignoring empty or invalid .gdk_lock.
!WARNING: BBPdir: initializing BBP.
# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugsViaSourgeforce
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	t := bat.new(nil:oid,nil:str);
#	aa_a := calc.oid(0);
#	ba_a := bat.insert(t,aa_a,"a");
#	ca_a := calc.oid(1);
#	da_a := bat.insert(t,ca_a,"b");
#	ea_a := calc.oid(2);
#	fa_a := bat.insert(t,ea_a,"c");
#	ga_a := calc.oid(3);
#	ha_a := bat.insert(t,ga_a,"d");
#	ia_a := calc.oid(4);
#	ja_a := bat.insert(t,ia_a,"e");
#	ka_a := calc.oid(5);
#	la_a := bat.insert(t,ka_a,"f");
#	ma_a := calc.oid(6);
#	na_a := bat.insert(t,ma_a,"g");
#	oa_a := calc.oid(7);
#	pa_a := bat.insert(t,oa_a,"h");
#	qa_a := algebra.markT(t,nil:oid);
#	ra_a := io.print(t);
#	t2 := bat.new(nil:void,nil:str);
#	sa_a := calc.oid(0);
#	ta_a := bat.setSequenceBase(t2,sa_a);
#	ua_a := calc.oid(0);
#	va_a := bat.insert(t2,ua_a,"a");
#	wa_a := calc.oid(1);
#	xa_a := bat.insert(t2,wa_a,"b");
#	ya_a := calc.oid(2);
#	ab_a := bat.insert(t2,ya_a,"c");
#	bb_a := calc.oid(3);
#	cb_a := bat.insert(t2,bb_a,"d");
#	db_a := calc.oid(4);
#	eb_a := bat.insert(t2,db_a,"e");
#	fb_a := calc.oid(5);
#	gb_a := bat.insert(t2,fb_a,"f");
#	hb_a := calc.oid(6);
#	ib_a := bat.insert(t2,hb_a,"g");
#	jb_a := calc.oid(7);
#	kb_a := bat.insert(t2,jb_a,"h");
#	lb_a := algebra.markT(t2,nil:oid);
#	mb_a := io.print(lb_a);
##Identifer 'seqbase' mapped to 'bat.setSequenceBase'
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
#include mil; 	# 2  (_2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 3  (_3:str)
#Predefined code segment 	# 4  (_4:str)
#The compiler can not guarantee an accurate compilation, 	# 5  (_5:str)
#because MIL unlike MAL is a dynamically typed language. 	# 6  (_6:str)
#A few guidelines to maximize usefullness. 	# 7  (_7:str)
#- make the type of variables explicit, in particular 'nil' 	# 8  (_8:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 9  (_9:str)
#use the "mil_schema" for additional support routines 	# 10  (_10:str)
    t := bat.new(nil:oid,nil:str);	# 11 CMDBATnew (t:bat[:oid,:str])<-(_12:oid)(_13:str)
    aa_a := calc.oid(0);	# 12 CALCint2oid (aa_a:oid)<-(_15:int)
    ba_a := bat.insert(t,aa_a,"a");	# 13 BKCinsert_bun (ba_a:void)<-(t:bat[:oid,:str])(aa_a:oid)(_17:str)
    ca_a := calc.oid(1);	# 14 CALCint2oid (ca_a:oid)<-(_19:int)
    da_a := bat.insert(t,ca_a,"b");	# 15 BKCinsert_bun (da_a:void)<-(t:bat[:oid,:str])(ca_a:oid)(_21:str)
    ea_a := calc.oid(2);	# 16 CALCint2oid (ea_a:oid)<-(_23:int)
    fa_a := bat.insert(t,ea_a,"c");	# 17 BKCinsert_bun (fa_a:void)<-(t:bat[:oid,:str])(ea_a:oid)(_25:str)
    ga_a := calc.oid(3);	# 18 CALCint2oid (ga_a:oid)<-(_27:int)
    ha_a := bat.insert(t,ga_a,"d");	# 19 BKCinsert_bun (ha_a:void)<-(t:bat[:oid,:str])(ga_a:oid)(_29:str)
    ia_a := calc.oid(4);	# 20 CALCint2oid (ia_a:oid)<-(_31:int)
    ja_a := bat.insert(t,ia_a,"e");	# 21 BKCinsert_bun (ja_a:void)<-(t:bat[:oid,:str])(ia_a:oid)(_33:str)
    ka_a := calc.oid(5);	# 22 CALCint2oid (ka_a:oid)<-(_35:int)
    la_a := bat.insert(t,ka_a,"f");	# 23 BKCinsert_bun (la_a:void)<-(t:bat[:oid,:str])(ka_a:oid)(_37:str)
    ma_a := calc.oid(6);	# 24 CALCint2oid (ma_a:oid)<-(_39:int)
    na_a := bat.insert(t,ma_a,"g");	# 25 BKCinsert_bun (na_a:void)<-(t:bat[:oid,:str])(ma_a:oid)(_41:str)
    oa_a := calc.oid(7);	# 26 CALCint2oid (oa_a:oid)<-(_43:int)
    pa_a := bat.insert(t,oa_a,"h");	# 27 BKCinsert_bun (pa_a:void)<-(t:bat[:oid,:str])(oa_a:oid)(_45:str)
    qa_a := algebra.markT(t,nil:oid);	# 28 ALGtmark (qa_a:bat[:oid,:void])<-(t:bat[:oid,:str])(_12:oid)
    ra_a := io.print(t);	# 29 IOprint_val (ra_a:int)<-(t:bat[:oid,:str])
    t2 := bat.new(nil:void,nil:str);	# 30 CMDBATnew (t2:bat[:void,:str])<-(_49:void)(_50:str)
    sa_a := calc.oid(0);	# 31 CALCint2oid (sa_a:oid)<-(_52:int)
    ta_a := bat.setSequenceBase(t2,sa_a);	# 32 BKCsetSequenceBase (ta_a:bat[:void,:str])<-(t2:bat[:void,:str])(sa_a:oid)
    ua_a := calc.oid(0);	# 33 CALCint2oid (ua_a:oid)<-(_52:int)
    va_a := bat.insert(t2,ua_a,"a");	# 34 BKCinsert_bun (va_a:void)<-(t2:bat[:void,:str])(ua_a:oid)(_56:str)
    wa_a := calc.oid(1);	# 35 CALCint2oid (wa_a:oid)<-(_58:int)
    xa_a := bat.insert(t2,wa_a,"b");	# 36 BKCinsert_bun (xa_a:void)<-(t2:bat[:void,:str])(wa_a:oid)(_60:str)
    ya_a := calc.oid(2);	# 37 CALCint2oid (ya_a:oid)<-(_62:int)
    ab_a := bat.insert(t2,ya_a,"c");	# 38 BKCinsert_bun (ab_a:void)<-(t2:bat[:void,:str])(ya_a:oid)(_64:str)
    bb_a := calc.oid(3);	# 39 CALCint2oid (bb_a:oid)<-(_66:int)
    cb_a := bat.insert(t2,bb_a,"d");	# 40 BKCinsert_bun (cb_a:void)<-(t2:bat[:void,:str])(bb_a:oid)(_68:str)
    db_a := calc.oid(4);	# 41 CALCint2oid (db_a:oid)<-(_70:int)
    eb_a := bat.insert(t2,db_a,"e");	# 42 BKCinsert_bun (eb_a:void)<-(t2:bat[:void,:str])(db_a:oid)(_72:str)
    fb_a := calc.oid(5);	# 43 CALCint2oid (fb_a:oid)<-(_74:int)
    gb_a := bat.insert(t2,fb_a,"f");	# 44 BKCinsert_bun (gb_a:void)<-(t2:bat[:void,:str])(fb_a:oid)(_76:str)
    hb_a := calc.oid(6);	# 45 CALCint2oid (hb_a:oid)<-(_78:int)
    ib_a := bat.insert(t2,hb_a,"g");	# 46 BKCinsert_bun (ib_a:void)<-(t2:bat[:void,:str])(hb_a:oid)(_80:str)
    jb_a := calc.oid(7);	# 47 CALCint2oid (jb_a:oid)<-(_82:int)
    kb_a := bat.insert(t2,jb_a,"h");	# 48 BKCinsert_bun (kb_a:void)<-(t2:bat[:void,:str])(jb_a:oid)(_84:str)
    lb_a := algebra.markT(t2,nil:oid);	# 49 ALGtmark (lb_a:bat[:oid,:void])<-(t2:bat[:void,:str])(_86:oid)
    mb_a := io.print(lb_a);	# 50 IOprint_val (mb_a:int)<-(lb_a:bat[:oid,:void])
#Identifer 'seqbase' mapped to 'bat.setSequenceBase' 	# 51  (_88:str)
end main;	# 52  
#-----------------#
# h	t	  # name
# oid	str	  # type
#-----------------#
[ 0@0,	  "a"	  ]
[ 1@0,	  "b"	  ]
[ 2@0,	  "c"	  ]
[ 3@0,	  "d"	  ]
[ 4@0,	  "e"	  ]
[ 5@0,	  "f"	  ]
[ 6@0,	  "g"	  ]
[ 7@0,	  "h"	  ]
#-----------------#
# h	t	  # name
# void	void	  # type
#-----------------#
[ 0@0,	  nil	  ]
[ 1@0,	  nil	  ]
[ 2@0,	  nil	  ]
[ 3@0,	  nil	  ]
[ 4@0,	  nil	  ]
[ 5@0,	  nil	  ]
[ 6@0,	  nil	  ]
[ 7@0,	  nil	  ]

# 07:27:17 >  
# 07:27:17 >  Done.
# 07:27:17 >  

