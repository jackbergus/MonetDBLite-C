stdout of test 'ID.605953` in directory 'tests/BugsViaSourgeforce` itself:


# 20:59:58 >  
# 20:59:58 >  Mtimeout -timeout 60 Mserver "--config=/home/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/home/mk/monet5/Linux/lib/MonetDB5:/home/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/home/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/home/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=41087 --set sql_port=50141 --set monet_prompt= --trace --dbname=mTests_tests_BugsViaSourgeforce  ID.605953.mal </dev/null
# 20:59:58 >  





!WARNING: GDKlockHome: ignoring empty or invalid .gdk_lock.
!WARNING: BBPdir: initializing BBP.
# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugsViaSourgeforce
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
# marking a void-T table nil gives incorrect results. 
#
function user.main():void;	# 0  (main:void)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  (_31:str)
#Predefined code segment 	# 2  (_32:str)
#The compiler can not guarantee an accurate compilation, 	# 3  (_33:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  (_34:str)
#A few guidelines to maximize usefullness. 	# 5  (_35:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  (_36:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  (_37:str)
#use the "mil_schema" for additional support routines 	# 8  (_38:str)
    t := bat.new(nil:oid,nil:str);	# 9 CMDBATnew (t:bat[:oid,:str])<-(_40:oid)(_41:str)
    aa_a := calc.oid(0);	# 10 CALCint2oid (aa_a:oid)<-(_43:int)
    ba_a := bat.insert(t,aa_a,"a");	# 11 BKCinsert_bun (ba_a:void)<-(t:bat[:oid,:str])(aa_a:oid)(_45:str)
    ca_a := calc.oid(1);	# 12 CALCint2oid (ca_a:oid)<-(_47:int)
    da_a := bat.insert(t,ca_a,"b");	# 13 BKCinsert_bun (da_a:void)<-(t:bat[:oid,:str])(ca_a:oid)(_49:str)
    ea_a := calc.oid(2);	# 14 CALCint2oid (ea_a:oid)<-(_51:int)
    fa_a := bat.insert(t,ea_a,"c");	# 15 BKCinsert_bun (fa_a:void)<-(t:bat[:oid,:str])(ea_a:oid)(_53:str)
    ga_a := calc.oid(3);	# 16 CALCint2oid (ga_a:oid)<-(_55:int)
    ha_a := bat.insert(t,ga_a,"d");	# 17 BKCinsert_bun (ha_a:void)<-(t:bat[:oid,:str])(ga_a:oid)(_57:str)
    ia_a := calc.oid(4);	# 18 CALCint2oid (ia_a:oid)<-(_59:int)
    ja_a := bat.insert(t,ia_a,"e");	# 19 BKCinsert_bun (ja_a:void)<-(t:bat[:oid,:str])(ia_a:oid)(_61:str)
    ka_a := calc.oid(5);	# 20 CALCint2oid (ka_a:oid)<-(_63:int)
    la_a := bat.insert(t,ka_a,"f");	# 21 BKCinsert_bun (la_a:void)<-(t:bat[:oid,:str])(ka_a:oid)(_65:str)
    ma_a := calc.oid(6);	# 22 CALCint2oid (ma_a:oid)<-(_67:int)
    na_a := bat.insert(t,ma_a,"g");	# 23 BKCinsert_bun (na_a:void)<-(t:bat[:oid,:str])(ma_a:oid)(_69:str)
    oa_a := calc.oid(7);	# 24 CALCint2oid (oa_a:oid)<-(_71:int)
    pa_a := bat.insert(t,oa_a,"h");	# 25 BKCinsert_bun (pa_a:void)<-(t:bat[:oid,:str])(oa_a:oid)(_73:str)
    qa_a := algebra.markT(t,nil:oid);	# 26 ALGtmark (qa_a:bat[:oid,:void])<-(t:bat[:oid,:str])(_40:oid)
    ra_a := io.print(t);	# 27 IOprint_val (ra_a:int)<-(t:bat[:oid,:str])
    t2 := bat.new(nil:void,nil:str);	# 28 CMDBATnew (t2:bat[:void,:str])<-(_77:void)(_78:str)
    sa_a := calc.oid(0);	# 29 CALCint2oid (sa_a:oid)<-(_80:int)
    ta_a := bat.setSequenceBase(t2,sa_a);	# 30 BKCsetSequenceBase (ta_a:bat[:void,:str])<-(t2:bat[:void,:str])(sa_a:oid)
    ua_a := calc.oid(0);	# 31 CALCint2oid (ua_a:oid)<-(_80:int)
    va_a := bat.insert(t2,ua_a,"a");	# 32 BKCinsert_bun (va_a:void)<-(t2:bat[:void,:str])(ua_a:oid)(_84:str)
    wa_a := calc.oid(1);	# 33 CALCint2oid (wa_a:oid)<-(_86:int)
    xa_a := bat.insert(t2,wa_a,"b");	# 34 BKCinsert_bun (xa_a:void)<-(t2:bat[:void,:str])(wa_a:oid)(_88:str)
    ya_a := calc.oid(2);	# 35 CALCint2oid (ya_a:oid)<-(_90:int)
    ab_a := bat.insert(t2,ya_a,"c");	# 36 BKCinsert_bun (ab_a:void)<-(t2:bat[:void,:str])(ya_a:oid)(_92:str)
    bb_a := calc.oid(3);	# 37 CALCint2oid (bb_a:oid)<-(_94:int)
    cb_a := bat.insert(t2,bb_a,"d");	# 38 BKCinsert_bun (cb_a:void)<-(t2:bat[:void,:str])(bb_a:oid)(_96:str)
    db_a := calc.oid(4);	# 39 CALCint2oid (db_a:oid)<-(_98:int)
    eb_a := bat.insert(t2,db_a,"e");	# 40 BKCinsert_bun (eb_a:void)<-(t2:bat[:void,:str])(db_a:oid)(_100:str)
    fb_a := calc.oid(5);	# 41 CALCint2oid (fb_a:oid)<-(_102:int)
    gb_a := bat.insert(t2,fb_a,"f");	# 42 BKCinsert_bun (gb_a:void)<-(t2:bat[:void,:str])(fb_a:oid)(_104:str)
    hb_a := calc.oid(6);	# 43 CALCint2oid (hb_a:oid)<-(_106:int)
    ib_a := bat.insert(t2,hb_a,"g");	# 44 BKCinsert_bun (ib_a:void)<-(t2:bat[:void,:str])(hb_a:oid)(_108:str)
    jb_a := calc.oid(7);	# 45 CALCint2oid (jb_a:oid)<-(_110:int)
    kb_a := bat.insert(t2,jb_a,"h");	# 46 BKCinsert_bun (kb_a:void)<-(t2:bat[:void,:str])(jb_a:oid)(_112:str)
    lb_a := algebra.markT(t2,nil:oid);	# 47 ALGtmark (lb_a:bat[:oid,:void])<-(t2:bat[:void,:str])(_114:oid)
    mb_a := io.print(lb_a);	# 48 IOprint_val (mb_a:int)<-(lb_a:bat[:oid,:void])
#Identifer 'seqbase' mapped to 'bat.setSequenceBase' 	# 49  ($126:str)
end main;	# 50  
#-----------------#
# BAT:	  tmp_25  #
# (oid)	  (void)  #
#-----------------#
[ 0@0,	  "a"	  ]
[ 1@0,	  "b"	  ]
[ 2@0,	  "c"	  ]
[ 3@0,	  "d"	  ]
[ 4@0,	  "e"	  ]
[ 5@0,	  "f"	  ]
[ 6@0,	  "g"	  ]
[ 7@0,	  "h"	  ]
#-----------------#
# BAT:	  tmp_26  #
# (void)  (oid)	  #
#-----------------#
[ 0@0,	  nil	  ]
[ 1@0,	  nil	  ]
[ 2@0,	  nil	  ]
[ 3@0,	  nil	  ]
[ 4@0,	  nil	  ]
[ 5@0,	  nil	  ]
[ 6@0,	  nil	  ]
[ 7@0,	  nil	  ]

# 22:47:51 >  
# 22:47:51 >  Done.
# 22:47:51 >  

