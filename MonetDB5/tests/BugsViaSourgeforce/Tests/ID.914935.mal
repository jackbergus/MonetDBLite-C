# Monet Mil to Mal compiler
#include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	mil.line("");
	b := new(nil:int,nil:int);
#	mil.line("VAR b := new(int,int);");
	n := 10;
#	mil.line("VAR n := 10;");
	i := 0;
#	mil.line("");
barrier	aa_a := true;
barrier	ba_a := <(i,n);
#	mil.line("WHILE (i < n) {");
	ca_a := +(i,1);
#	mil.line("\ti :+= 1;");
	da_a := insert(b,i,i);
#	mil.line("\tb.insert(i,i);");
redo	aa_a;
exit	ba_a;
exit	aa_a;
#	mil.line("}");
	BAT_READ:= mil.take("BAT_READ");
	ea_a := access(b,BAT_READ);
#	mil.line("");
	fa_a := rangesplit(b,0);
	ga_a := print(fa_a);
#	mil.line("print(rangesplit(b,0));");
	ha_a := rangesplit(b,-1);
	ia_a := print(ha_a);
#	mil.line("print(rangesplit(b,-1));");
	ja_a := rangesplit(b,1);
	ka_a := print(ja_a);
#	mil.line("print(rangesplit(b,1));");
	la_a := rangesplit(b,2);
	ma_a := print(la_a);
#	mil.line("print(rangesplit(b,2));");
	na_a := rangesplit(b,5);
	oa_a := print(na_a);
#	mil.line("print(rangesplit(b,5));");
	pa_a := rangesplit(b,n);
	qa_a := print(pa_a);
#	mil.line("print(rangesplit(b,n));");
	ra_a := +(n,1);
	sa_a := rangesplit(b,ra_a);
	ta_a := print(sa_a);
#	mil.line("");
	ua_a := hashsplit(b,0);
	va_a := print(ua_a);
#	mil.line("print(hashsplit(b,0));");
	wa_a := hashsplit(b,-1);
	xa_a := print(wa_a);
#	mil.line("print(hashsplit(b,-1));");
	ya_a := hashsplit(b,2);
	ab_a := print(ya_a);
#	mil.line("print(hashsplit(b,2));");
	bb_a := hashsplit(b,5);
	cb_a := print(bb_a);
#	mil.line("print(hashsplit(b,5));");
	db_a := hashsplit(b,1);
	eb_a := print(db_a);
#	mil.line("print(hashsplit(b,1));");
	fb_a := hashsplit(b,n);
	gb_a := print(fb_a);
#	mil.line("print(hashsplit(b,n));");
	hb_a := +(n,1);
	ib_a := hashsplit(b,hb_a);
	jb_a := print(ib_a);
