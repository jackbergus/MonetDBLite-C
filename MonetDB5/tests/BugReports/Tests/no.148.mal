# Monet Mil to Mal compiler
#include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	mil.line("# >Number:         148\n");
#	mil.line("# >Category:       Module_xtables\n");
#	mil.line("# >Synopsis:       table() call fails in xtable.mil\n");
#	mil.line("# >Confidential:   no\n");
#	mil.line("# >Severity:       serious\n");
#	mil.line("# >Priority:       medium\n");
#	mil.line("# >Responsible:    mk (Martin Kersten)\n");
#	mil.line("# >State:          open\n");
#	mil.line("# >Class:          sw-bug\n");
#	mil.line("# >Submitter-Id:   unknown\n");
#	mil.line("# >Arrival-Date:   Wed Mar 11 14:28:45 1998\n");
#	mil.line("# >Originator:     manegold@cwi.nl\n");
#	mil.line("# >Organization:\n");
#	mil.line("# CWI\n");
#	mil.line("# >Release:        980101\n");
#	mil.line("# >Environment:\n");
#	mil.line("# any\n");
#	mil.line("# >Description:\n");
#	mil.line("# 'table(histo, $(3..))` in 'proc xtable_print`  in\n");
#	mil.line("# 'xtables.mil` (also available as test 'plain/xtables/`)\n");
#	mil.line("# ends up in an endless loop in the macro 'matchloop`\n");
#	mil.line("# (src/gdk/gdk_relop.mx) as soon as the first tuple is \n");
#	mil.line("# printed. 'matchloop` is called as \n");
#	mil.line("# 'matchloop(hloc,OID,_oid)` in line 1054 of \n");
#	mil.line("# 'src/gdk/gdk_relop.mx`.\n");
#	mil.line("# \n");
#	mil.line("# maybe, this is no bug in module xtables, but somewhere \n");
#	mil.line("# else, but as it seems to occur only here, I submit \n");
#	mil.line("# this as an xtables bug report.\n");
#	mil.line("# \n");
#	mil.line("# as soon as I got some time, I will try to do some more \n");
#	mil.line("# debugging.\n");
#	mil.line("# \n");
#	mil.line("# \tstefan\n");
#	mil.line("# \n");
#	mil.line("# ================\n");
#	mil.line("# Output\n");
#	mil.line("# ----------------\n");
#	mil.line("# [...]\n");
#	mil.line("# \n");
#	mil.line("# #You are system administrator (adm)!\n");
#	mil.line("# \n");
#	mil.line("# #line 437 \"modules/plain/xtables.mx\"\n");
#	mil.line("# setoid(oid(20000000));\n");
#	mil.line("# module(xtables);\n");
#	mil.line("# \n");
#	mil.line("# # First some procs for convenience:\n");
#	mil.line("# # - xtable_print(group[oid,oid], str, attr1[oid,a1], attr2[oid,a2], ...)\n");
#	mil.line("# #       print group count table \n");
#	mil.line("# # - xtable_realloc(bat, capacity):  bat\n");
#	mil.line("# #       allocate more memory and return a copy of a bat\n");
#	mil.line("# # - xtable_test(str title, bat x, bat y, bat z)\n");
#	mil.line("# #        major test script on xtable functionality\n");
#	mil.line("# \n");
#	mil.line("# proc xtable_print() : void { \n");
#	mil.line("#         var histo := $1.histogram;\n");
#	mil.line("#         histo.rename(\"count\");\n");
#	mil.line("#         printf(\"\\n# %s (ct: %d elts, %d groups, %d bytes)\\n\",\n");
#	mil.line("#                 $2, $1.count, histo.count, $1.batsize);\n");
#	mil.line("#         table(histo, $(3..));\n");
#	mil.line("# }\n");
#	mil.line("# \n");
#	mil.line("# proc xtable_realloc(bat b, int cap) : bat { \n");
#	mil.line("#         bn := bbp.new(b.htype, b.ttype, bat);\n");
#	mil.line("#         if (b.htype = void) bn.seqbase(b.reverse.fetch(0));\n");
#	mil.line("#         if (b.ttype = void) bn.seqbase(b.fetch(0));\n");
#	mil.line("#         bn.insert(b);\n");
#	mil.line("#         return bn;\n");
#	mil.line("# }\n");
#	mil.line("# \n");
#	mil.line("# proc xtable_test(str title, bat x, bat y, bat z) : bat {\n");
#	mil.line("#     printf(\"# xtable_test: %s grouping (%d tuples, %d bytes)\\n\\n\",\n");
#	mil.line("#                 title, x.count, x.batsize + y.batsize + z.batsize);\n");
#	mil.line("#     x.rename(\"x\"); y.rename(\"y\"); z.rename(\"z\");\n");
#	mil.line("# \n");
#	mil.line("#     bat.print(x.slice(0,7),y,z);\n");
#	mil.line("#     printf(\"synced(x,y) := %s\\n\", synced(x,y).str);\n");
#	mil.line("#     printf(\"synced(x,z) := %s\\n\", synced(x,z).str);\n");
#	mil.line("# \n");
#	mil.line("#     var x1 := CTgroup(x);\n");
#	mil.line("#     x1.xtable_print(\"CT(x)\", x);\n");
#	mil.line("# \n");
#	mil.line("#     var x1y := CTgroup(x1,y);\n");
#	mil.line("#     x1y.xtable_print(\"CT(x,y)\", x, y);\n");
#	mil.line("# \n");
#	mil.line("#     var v :=  y.uselect(dbl(2.0),dbl(3.0));\n");
#	mil.line("#     var xvy := CTsubgroup(x1,y,v);\n");
#	mil.line("#     xvy.xtable_print(\"CT(x,y|v)\", x, y);\n");
#	mil.line("# \n");
#	mil.line("#     var x1yz := CTgroup(x1y,z);\n");
#	mil.line("#     x1yz.xtable_print(\"CT(x,y,z)\", x, y, z);\n");
#	mil.line("# }\n");
#	mil.line("# \n");
#	mil.line("# x := bbp.new(oid,chr);\n");
#	mil.line("# x.insert(1@0,'a');\n");
#	mil.line("# x.insert(2@0,'a');\n");
#	mil.line("# x.insert(3@0,'b');\n");
#	mil.line("# x.insert(4@0,'b');\n");
#	mil.line("# x.insert(5@0,'b');\n");
#	mil.line("# x.insert(6@0,'b');\n");
#	mil.line("# x.insert(7@0,'c');\n");
#	mil.line("# x.insert(8@0,'c');\n");
#	mil.line("# \n");
#	mil.line("# y:= bbp.new(oid,dbl);\n");
#	mil.line("# y.insert(1@0,dbl(1.0));\n");
#	mil.line("# y.insert(2@0,dbl(3.0));\n");
#	mil.line("# y.insert(3@0,dbl(2.0));\n");
#	mil.line("# y.insert(4@0,dbl(2.0));\n");
#	mil.line("# y.insert(5@0,dbl(2.0));\n");
#	mil.line("# y.insert(6@0,dbl(3.0));\n");
#	mil.line("# y.insert(7@0,dbl(1.0));\n");
#	mil.line("# y.insert(8@0,dbl(1.0));\n");
#	mil.line("# \n");
#	mil.line("# z:= bbp.new(oid,str);\n");
#	mil.line("# z.insert(1@0,\"c\");\n");
#	mil.line("# z.insert(2@0,\"a\");\n");
#	mil.line("# z.insert(3@0,\"b\");\n");
#	mil.line("# z.insert(4@0,\"c\");\n");
#	mil.line("# z.insert(5@0,\"a\");\n");
#	mil.line("# z.insert(6@0,\"a\");\n");
#	mil.line("# z.insert(7@0,\"c\");\n");
#	mil.line("# z.insert(8@0,\"a\");\n");
#	mil.line("# \n");
#	mil.line("# xtable_test(\"small hash\", x, y, z);\n");
#	mil.line("# # xtable_test: small hash grouping (8 tuples, 8660 bytes)\n");
#	mil.line("# \n");
#	mil.line("# #-----------------------------------------#\n");
#	mil.line("# # oid   | tmp_30| y             | z       #\n");
#	mil.line("# #-----------------------------------------#\n");
#	mil.line("# [ 1@0,    'a',    1.000000,       \"c\"     ]\n");
#	mil.line("# [ 2@0,    'a',    3.000000,       \"a\"     ]\n");
#	mil.line("# [ 3@0,    'b',    2.000000,       \"b\"     ]\n");
#	mil.line("# [ 4@0,    'b',    2.000000,       \"c\"     ]\n");
#	mil.line("# [ 5@0,    'b',    2.000000,       \"a\"     ]\n");
#	mil.line("# [ 6@0,    'b',    3.000000,       \"a\"     ]\n");
#	mil.line("# [ 7@0,    'c',    1.000000,       \"c\"     ]\n");
#	mil.line("# [ 8@0,    'c',    1.000000,       \"a\"     ]\n");
#	mil.line("# synced(x,y) := false\n");
#	mil.line("# synced(x,z) := false\n");
#	mil.line("# \n");
#	mil.line("# # CT(x) (ct: 8 elts, 3 groups, 1096 bytes)\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# # count | x       #\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# [ 2,      'a'     ]\n");
#	mil.line("# \n");
#	mil.line("# ================\n");
#	mil.line("#line 450 \"modules/plain/xtables.mx\"\n");
	aa_a := calc.oid(20000000);
	ba_a := setoid(aa_a);
#	mil.line("# First some procs for convenience: \n");
#	mil.line("# - xtable_print(group[oid,oid], str, attr1[oid,a1], attr2[oid,a2], ...)\n");
#	mil.line("# \tprint group count table \n");
#	mil.line("# - xtable_realloc(bat, capacity):  bat\n");
#	mil.line("#\tallocate more memory and return a copy of a bat\n");
#	mil.line("# - xtable_test(str title, bat x, bat y, bat z)\n");
#	mil.line("#\t major test script on xtable functionality\n");
#	mil.line("proc xtable_print(..any..) : void {");
function xtable_print(,xtable_print:any$1...):void;
#	mil.line("        var histo := $1.histogram();");
	ca_a := mil.getVarTemp($1);
	histo := histogram(ca_a);
#	mil.line("                $2, $1.count(), histo.count(), $1.batsize());");
	da_a := mil.getVarTemp($2);
	ea_a := mil.getVarTemp($1);
	fa_a := aggr.count(ea_a);
	ga_a := aggr.count(histo);
	ha_a := mil.getVarTemp($1);
	ia_a := bat.bbpBatSize(ha_a);
	ja_a := printf("\n# %s (ct: %d elts, %d groups, %d bytes)\n",da_a,fa_a,ga_a,ia_a);
#	mil.line("        table(histo.col_name(\"count\"), $(3..));");
	ka_a := bat.setColumn(histo,"count");
	la_a := mil.getVarTempRange(3);
	ma_a := table(ka_a,la_a);
end xtable_print;
#	mil.line("proc xtable_realloc(bat b,int cap) : bat {");
function xtable_realloc(b:bat[:any_1,:any_2], cap:int):bat[:any_3,:any_4];
#	mil.line("        var inf := b.info();");
	inf := info(b);
#	mil.line("        var ht := monet_atomtbl.find(inf.find(\"head\"));");
	monet_atomtbl:= mil.take("monet_atomtbl");
	na_a := algebra.find(inf,"head");
	ht := algebra.find(monet_atomtbl,na_a);
#	mil.line("        var tt := monet_atomtbl.find(inf.find(\"tail\"));");
	oa_a := algebra.find(inf,"tail");
	tt := algebra.find(monet_atomtbl,oa_a);
#	mil.line("        var bn := bbp.new(ht, tt, cap);");
	bn := bbp.new(ht,tt,cap);
#	mil.line("        bn.insert(b);");
	pa_a := bat.insert(bn,b);
#	mil.line("        if (ht = void) bn.seqbase(b.reverse().fetch(0));");
barrier	qa_a := ==(ht,nil:void);
	ra_a := bat.reverse(b);
	sa_a := fetch(ra_a,0);
	ta_a := bat.setSequenceBase(bn,sa_a);
#	mil.line("        if (tt = void) bn.seqbase(b.fetch(0));");
exit	qa_a;
barrier	ua_a := ==(tt,nil:void);
	va_a := fetch(b,0);
	wa_a := bat.setSequenceBase(bn,va_a);
#	mil.line("        return bn;");
exit	ua_a;
	return xa_a :=bn;
end xtable_realloc;
#	mil.line("proc xtable_test(str title, bat x, bat y, bat z) : void {");
function xtable_test(title:str, x:bat[:any_1,:any_2], y:bat[:any_3,:any_4], z:bat[:any_5,:any_6]):void;
#	mil.line("                title, x.count(), x.batsize() + y.batsize() + z.batsize());");
	ya_a := aggr.count(x);
	ab_a := bat.bbpBatSize(y);
	bb_a := bat.bbpBatSize(z);
	cb_a := bat.bbpBatSize(x);
	db_a := +(ab_a,bb_a);
	eb_a := +(cb_a,db_a);
	fb_a := printf("# xtable_test: %s grouping (%d tuples, %d bytes)\n\n",title,ya_a,eb_a);
#	mil.line("    x.col_name(\"x\"); y.col_name(\"y\"); z.col_name(\"z\");");
	gb_a := bat.setColumn(x,"x");
	hb_a := bat.setColumn(y,"y");
	ib_a := bat.setColumn(z,"z");
#	mil.line("    bat.print(x.slice(0,7),y,z);");
	jb_a := slice(x,0,7);
	kb_a := bat.print(jb_a,y,z);
#	mil.line("    printf(\"synced(x,y) := %s\\n\", synced(x,y).str());");
	lb_a := isSynced(x,y);
	mb_a := str(lb_a);
	nb_a := printf("synced(x,y) := %s\n",mb_a);
#	mil.line("    printf(\"synced(x,z) := %s\\n\", synced(x,z).str());");
	ob_a := isSynced(x,z);
	pb_a := str(ob_a);
	qb_a := printf("synced(x,z) := %s\n",pb_a);
#	mil.line("    var x1 := CTgroup(x);");
	x1 := group(x);
#	mil.line("    x1.xtable_print(\"CT(x)\", x);");
	rb_a := xtable_print(x1,"CT(x)",x);
#	mil.line("    var x1y := CTgroup(x1,y);");
	x1y := group(x1,y);
#	mil.line("    x1y.xtable_print(\"CT(x,y)\", x, y);");
	sb_a := xtable_print(x1y,"CT(x,y)",x,y);
#	mil.line("    var v :=  y.uselect(dbl(2.0),dbl(3.0));");
	tb_a := dbl(2.0);
	ub_a := dbl(3.0);
	v := uselect(y,tb_a,ub_a);
#	mil.line("    var xvy := CTsubgroup(x1,y,v);");
	xvy := CTsubgroup(x1,y,v);
#	mil.line("    xvy.xtable_print(\"CT(x,y|v)\", x, y);");
	vb_a := xtable_print(xvy,"CT(x,y|v)",x,y);
#	mil.line("    var x1yz := CTgroup(x1y,z);");
	x1yz := group(x1y,z);
#	mil.line("    x1yz.xtable_print(\"CT(x,y,z)\", x, y, z);");
	wb_a := xtable_print(x1yz,"CT(x,y,z)",x,y,z);
end xtable_test;
#	mil.line("var x := bbp.new(oid,chr);");
	x := bbp.new(nil:oid,nil:chr);
#	mil.line("x.insert(1@0,'a');");
	xb_a := bat.insert(x,1@0,'a');
#	mil.line("x.insert(2@0,'a');");
	yb_a := bat.insert(x,2@0,'a');
#	mil.line("x.insert(3@0,'b');");
	ac_a := bat.insert(x,3@0,'b');
#	mil.line("x.insert(4@0,'b');");
	bc_a := bat.insert(x,4@0,'b');
#	mil.line("x.insert(5@0,'b');");
	cc_a := bat.insert(x,5@0,'b');
#	mil.line("x.insert(6@0,'b');");
	dc_a := bat.insert(x,6@0,'b');
#	mil.line("x.insert(7@0,'c');");
	ec_a := bat.insert(x,7@0,'c');
#	mil.line("x.insert(8@0,'c');");
	fc_a := bat.insert(x,8@0,'c');
#	mil.line("var y:= bbp.new(oid,dbl);");
	y := bbp.new(nil:oid,nil:dbl);
#	mil.line("y.insert(1@0,dbl(1.0));");
	gc_a := dbl(1.0);
	hc_a := bat.insert(y,1@0,gc_a);
#	mil.line("y.insert(2@0,dbl(3.0));");
	ic_a := dbl(3.0);
	jc_a := bat.insert(y,2@0,ic_a);
#	mil.line("y.insert(3@0,dbl(2.0));");
	kc_a := dbl(2.0);
	lc_a := bat.insert(y,3@0,kc_a);
#	mil.line("y.insert(4@0,dbl(2.0));");
	mc_a := dbl(2.0);
	nc_a := bat.insert(y,4@0,mc_a);
#	mil.line("y.insert(5@0,dbl(2.0));");
	oc_a := dbl(2.0);
	pc_a := bat.insert(y,5@0,oc_a);
#	mil.line("y.insert(6@0,dbl(3.0));");
	qc_a := dbl(3.0);
	rc_a := bat.insert(y,6@0,qc_a);
#	mil.line("y.insert(7@0,dbl(1.0));");
	sc_a := dbl(1.0);
	tc_a := bat.insert(y,7@0,sc_a);
#	mil.line("y.insert(8@0,dbl(1.0));");
	uc_a := dbl(1.0);
	vc_a := bat.insert(y,8@0,uc_a);
#	mil.line("var z:= bbp.new(oid,str);");
	z := bbp.new(nil:oid,nil:str);
#	mil.line("z.insert(1@0,\"c\");");
	wc_a := bat.insert(z,1@0,"c");
#	mil.line("z.insert(2@0,\"a\");");
	xc_a := bat.insert(z,2@0,"a");
#	mil.line("z.insert(3@0,\"b\");");
	yc_a := bat.insert(z,3@0,"b");
#	mil.line("z.insert(4@0,\"c\");");
	ad_a := bat.insert(z,4@0,"c");
#	mil.line("z.insert(5@0,\"a\");");
	bd_a := bat.insert(z,5@0,"a");
#	mil.line("z.insert(6@0,\"a\");");
	cd_a := bat.insert(z,6@0,"a");
#	mil.line("z.insert(7@0,\"c\");");
	dd_a := bat.insert(z,7@0,"c");
#	mil.line("z.insert(8@0,\"a\");");
	ed_a := bat.insert(z,8@0,"a");
#	mil.line("xtable_test(\"small hash\", x, y, z);");
	fd_a := xtable_test("small hash",x,y,z);
#	mil.line("# create vectorized versions\n");
	gd_a := bat.reverse(x);
	hd_a := project(gd_a);
	id_a := bat.reverse(hd_a);
	x := copy(id_a);
#	mil.line("y := y.reverse().project().reverse().copy();");
	jd_a := bat.reverse(y);
	kd_a := project(jd_a);
	ld_a := bat.reverse(kd_a);
	y := copy(ld_a);
#	mil.line("z := z.reverse().project().reverse().copy();");
	md_a := bat.reverse(z);
	nd_a := project(md_a);
	od_a := bat.reverse(nd_a);
	z := copy(od_a);
#	mil.line("# activate voids\n");
	pd_a := bat.setSequenceBase(x,1@0);
#	mil.line("y.seqbase(1@0);");
	qd_a := bat.setSequenceBase(y,1@0);
#	mil.line("z.seqbase(1@0);");
	rd_a := bat.setSequenceBase(z,1@0);
#	mil.line("xtable_test(\"small vectorized\", x, y, z);");
	sd_a := xtable_test("small vectorized",x,y,z);
#	mil.line("# deactivate voids\n");
	td_a := calc.oid(nil);
	ud_a := bat.setSequenceBase(x,td_a);
#	mil.line("y.seqbase(oid(nil));");
	vd_a := calc.oid(nil);
	wd_a := bat.setSequenceBase(y,vd_a);
#	mil.line("z.seqbase(oid(nil));");
	xd_a := calc.oid(nil);
	yd_a := bat.setSequenceBase(z,xd_a);
#	mil.line("print(\"growing tables from 8 to 512k elements...\");");
	ae_a := bat.print("growing tables from 8 to 512k elements...");
#	mil.line("x := x.xtable_realloc(512*1024);");
	be_a := *(512,1024);
	x := xtable_realloc(x,be_a);
#	mil.line("y := y.xtable_realloc(512*1024);");
	ce_a := *(512,1024);
	y := xtable_realloc(y,ce_a);
#	mil.line("z := z.xtable_realloc(512*1024);");
	de_a := *(512,1024);
	z := xtable_realloc(z,de_a);
#	mil.line("var i := 17;");
	i := 17;
#	mil.line("while((i := i - 1) > 0) {");
barrier	ee_a := true;
	i := -(i,1);
barrier	fe_a := >(i,0);
#	mil.line("        x.insert(x.copy());");
	ge_a := copy(x);
	he_a := bat.insert(x,ge_a);
#	mil.line("        y.insert(y.copy());");
	ie_a := copy(y);
	je_a := bat.insert(y,ie_a);
#	mil.line("        z.insert(z.copy());");
	ke_a := copy(z);
	le_a := bat.insert(z,ke_a);
#	mil.line("        bat.print(x.count());");
	me_a := aggr.count(x);
	ne_a := bat.print(me_a);
#	mil.line("}");
redo	ee_a;
exit	fe_a;
exit	ee_a;
#	mil.line("print(\"done!\");");
	oe_a := bat.print("done!");
#	mil.line("# materialize the oids again\n");
	pe_a := calc.oid(1);
	qe_a := bat.reverse(x);
	re_a := mark(qe_a,pe_a);
	se_a := multiplex.tactics("oid",re_a);
	x := bat.reverse(se_a);
#	mil.line("y := [oid](y.reverse().mark(oid(1))).reverse();");
	te_a := calc.oid(1);
	ue_a := bat.reverse(y);
	ve_a := mark(ue_a,te_a);
	we_a := multiplex.tactics("oid",ve_a);
	y := bat.reverse(we_a);
#	mil.line("z := [oid](z.reverse().mark(oid(1))).reverse();");
	xe_a := calc.oid(1);
	ye_a := bat.reverse(z);
	af_a := mark(ye_a,xe_a);
	bf_a := multiplex.tactics("oid",af_a);
	z := bat.reverse(bf_a);
#	mil.line("y.access(BAT_WRITE);");
	BAT_WRITE:= mil.take("BAT_WRITE");
	cf_a := access(y,BAT_WRITE);
#	mil.line("z.access(BAT_WRITE);");
	df_a := access(z,BAT_WRITE);
#	mil.line("y.insert(0@0,dbl(nil));");
	ef_a := calc.dbl(nil);
	ff_a := bat.insert(y,0@0,ef_a);
#	mil.line("z.insert(0@0,str(nil));");
	gf_a := calc.str(nil);
	hf_a := bat.insert(z,0@0,gf_a);
#	mil.line("y.delete(0@0);");
	if_a := algebra.delete(y,0@0);
#	mil.line("z.delete(0@0);");
	jf_a := algebra.delete(z,0@0);
#	mil.line("xtable_test(\"big hash\", x, y, z);");
	kf_a := xtable_test("big hash",x,y,z);
#	mil.line("# let the Mserver find out that the head columns are equal\n");
	lf_a := mirror(x);
	y := algebra.join(lf_a,y);
#	mil.line("z := x.mirror().join(z);");
	mf_a := mirror(x);
	z := algebra.join(mf_a,z);
#	mil.line("xtable_test(\"big synced\", x, y, z);");
	nf_a := xtable_test("big synced",x,y,z);
#	mil.line("# activate voids\n");
	of_a := bat.reverse(x);
	pf_a := mark(of_a,1@0);
	x := bat.reverse(pf_a);
#	mil.line("y := y.reverse().mark(1@0).reverse();");
	qf_a := bat.reverse(y);
	rf_a := mark(qf_a,1@0);
	y := bat.reverse(rf_a);
#	mil.line("z := z.reverse().mark(1@0).reverse();");
	sf_a := bat.reverse(z);
	tf_a := mark(sf_a,1@0);
	z := bat.reverse(tf_a);
#	mil.line("xtable_test(\"big vectorized\", x, y, z);");
	uf_a := xtable_test("big vectorized",x,y,z);
#	mil.line("# try out the histosum\n");
#	mil.line("#z:= histogram(x1yz);\n");
#	mil.line("#z2:= y.CTgroup();\n");
#	mil.line("#print(z2);\n");
#	mil.line("#z3:= z2.CThistosum(z);\n");
#	mil.line("#print(z3);\n");
#	mil.line("quit();");
	vf_a := clients.quit();
#	mil.line("# try out the histosum\n");
#	mil.line("#z:= histogram(x1yz);\n");
#	mil.line("#z2:= y.CTgroup();\n");
#	mil.line("#print(z2);\n");
#	mil.line("#z3:= z2.CThistosum(z);\n");
#	mil.line("#print(z3);\n");
#	mil.line("#line 638 \"modules/plain/xtables.mx\"\n");
#Identifer 'synced' mapped to 'isSynced'
#Identifer 'col_name' mapped to 'bat.setColumn'
#Identifer 'seqbase' mapped to 'bat.setSequenceBase'
#Identifer 'batsize' mapped to 'bat.bbpBatSize'
#Identifer 'CTgroup' mapped to 'group'
