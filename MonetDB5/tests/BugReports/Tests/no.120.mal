# Monet Mil to Mal compiler
include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
	mil.line("# >Number:         120\n");
	mil.line("# >Category:       Mserver\n");
	mil.line("# >Synopsis:       First bun always nul in case of Virtual Oid.\n");
	mil.line("# >Confidential:   no\n");
	mil.line("# >Severity:       serious\n");
	mil.line("# >Priority:       medium\n");
	mil.line("# >Responsible:    boncz\n");
	mil.line("# >State:          open\n");
	mil.line("# >Class:          sw-bug\n");
	mil.line("# >Submitter-Id:   unknown\n");
	mil.line("# >Arrival-Date:   Mon Feb 16 15:25:54 1998\n");
	mil.line("# >Originator:     quak\n");
	mil.line("# >Organization:\n");
	mil.line("# UvA\n");
	mil.line("# >Release:        971007\n");
	mil.line("# >Environment:\n");
	mil.line("# solaris\n");
	mil.line("# >Description:\n");
	mil.line("# Have a look at the script:\n");
	mil.line("# \n");
	mil.line("# > a := bbp.new(int,int);\n");
	mil.line("# > a.insert(1,2);\n");
	mil.line("# > a.insert(2,3);\n");
	mil.line("# > a.insert(3,4);\n");
	mil.line("# > a.seqbase(newoid(a.count()));\n");
	mil.line("# > [oid]([a~]).print;\n");
	mil.line("# #-------------------------#\n");
	mil.line("# # int   | tmp_107         #\n");
	mil.line("# #-------------------------#\n");
	mil.line("# [ 1,      nil             ]\n");
	mil.line("# [ 2,      1000000003@2    ]\n");
	mil.line("# [ 3,      1000000004@2    ]\n");
	mil.line("setoid(oid(20000000));");
	aa_a := calc.oid(20000000);
	ba_a := setoid(aa_a);
	mil.line("var a := bbp.new(int,int);");
	a := bbp.new(nil:int,nil:int);
	mil.line("a.insert(1,2);");
	ca_a := bat.insert(a,1,2);
	mil.line("a.insert(2,3);");
	da_a := bat.insert(a,2,3);
	mil.line("a.insert(3,4);");
	ea_a := bat.insert(a,3,4);
	mil.line("a.seqbase(newoid(a.count()));");
	fa_a := aggr.count(a);
	ga_a := newoid(fa_a);
	ha_a := bat.setSequenceBase(a,ga_a);
	mil.line("[oid](a.mark(nil)).print();");
	ia_a := mark(a,nil);
	ja_a := multiplex.tactics("oid",ia_a);
	ka_a := bat.print(ja_a);
	mil.line("quit();");
	la_a := clients.quit();
#Identifer 'seqbase' mapped to 'bat.setSequenceBase'
