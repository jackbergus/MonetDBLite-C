stdout of test 'no.098` in directory 'tests/BugReports` itself:


# 07:27:15 >  
# 07:27:15 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.098.mal < /dev/null
# 07:27:15 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# >Number:         98\n");
##	mil.line("# >Category:       Mserver\n");
##	mil.line("# >Synopsis:       wrong select when a BAT contains one BUN\n");
##	mil.line("# >Confidential:   no\n");
##	mil.line("# >Severity:       critical\n");
##	mil.line("# >Priority:       high\n");
##	mil.line("# >Responsible:    boncz\n");
##	mil.line("# >State:          open\n");
##	mil.line("# >Class:          sw-bug\n");
##	mil.line("# >Submitter-Id:   unknown\n");
##	mil.line("# >Arrival-Date:   Fri Dec 12 19:56:04 1997\n");
##	mil.line("# >Originator:     windhouw\n");
##	mil.line("# >Organization:\n");
##	mil.line("# UvA\n");
##	mil.line("# >Release:        971007\n");
##	mil.line("# >Environment:\n");
##	mil.line("# \n");
##	mil.line("# >Description:\n");
##	mil.line("# When a BAT contains only one BUN a select returns this BUN,\n");
##	mil.line("# even when it's not in the selection range:\n");
##	mil.line("# \n");
##	mil.line("# #You are system administrator (adm)!\n");
##	mil.line("# >b:=new(oid,oid);\n");
##	mil.line("# >b.insert(oid(1),oid(2));\n");
##	mil.line("# >b.select(oid(3)).print;\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# # oid   | tmp_25  #\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# [ 1@0,    2@0     ]\n");
##	mil.line("# >b.select(oid(3)).print;\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# # oid   | tmp_25  #\n");
##	mil.line("# #-----------------#\n");
##	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := setoid(aa_a);
#	b := bat.new(nil:oid,nil:oid);
##	mil.line("b.insert(oid(1),oid(2));");
#	ca_a := calc.oid(1);
#	da_a := calc.oid(2);
#	ea_a := bat.insert(b,ca_a,da_a);
##	mil.line("b.select(oid(3)).print();");
#	fa_a := calc.oid(3);
#	ga_a := algebra.select(b,fa_a);
#	ha_a := io.print(ga_a);
##	mil.line("b.select(oid(3)).print();");
#	ia_a := calc.oid(3);
#	ja_a := algebra.select(b,ia_a);
#	ka_a := io.print(ja_a);
##	mil.line("quit();");
#	la_a := clients.quit();
#
function user.main():void;              #  0 main:void := user.main() {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("# >Number:         98\n"); 
#	io.print("# >Category:       Mserver\n"); 
#	io.print("# >Synopsis:       wrong select when a BAT contains one BUN\n"); 
#	io.print("# >Confidential:   no\n"); 
#	io.print("# >Severity:       critical\n"); 
#	io.print("# >Priority:       high\n"); 
#	io.print("# >Responsible:    boncz\n"); 
#	io.print("# >State:          open\n"); 
#	io.print("# >Class:          sw-bug\n"); 
#	io.print("# >Submitter-Id:   unknown\n"); 
#	io.print("# >Arrival-Date:   Fri Dec 12 19:56:04 1997\n"); 
#	io.print("# >Originator:     windhouw\n"); 
#	io.print("# >Organization:\n"); 
#	io.print("# UvA\n"); 
#	io.print("# >Release:        971007\n"); 
#	io.print("# >Environment:\n"); 
#	io.print("# \n"); 
#	io.print("# >Description:\n"); 
#	io.print("# When a BAT contains only one BUN a select returns this BUN,\n"); 
#	io.print("# even when it's not in the selection range:\n"); 
#	io.print("# \n"); 
#	io.print("# #You are system administrator (adm)!\n"); 
#	io.print("# >b:=new(oid,oid);\n"); 
#	io.print("# >b.insert(oid(1),oid(2));\n"); 
#	io.print("# >b.select(oid(3)).print;\n"); 
#	io.print("# #-----------------#\n"); 
#	io.print("# # oid   | tmp_25  #\n"); 
#	io.print("# #-----------------#\n"); 
#	io.print("# [ 1@0,    2@0     ]\n"); 
#	io.print("# >b.select(oid(3)).print;\n"); 
#	io.print("# #-----------------#\n"); 
#	io.print("# # oid   | tmp_25  #\n"); 
#	io.print("# #-----------------#\n"); 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         # 44 aa_a:oid := CALCint2oid(_45:int) 
    ba_a := calc.setoid(aa_a);          # 45 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("var b:=new(oid,oid);"); 
    b := bat.new(nil:oid,nil:oid);      # 47 b:bat[:oid,:oid] := CMDBATnew(_49:oid, _49:oid) {G}
#	io.print("b.insert(oid(1),oid(2));"); 
    ca_a := calc.oid(1);                # 49 ca_a:oid := CALCint2oid(_52:int) 
    da_a := calc.oid(2);                # 50 da_a:oid := CALCint2oid(_54:int) 
    ea_a := bat.insert(b,ca_a,da_a);    # 51 ea_a:void := BKCinsert_bun(b:bat[:oid,:oid], ca_a:oid, da_a:oid) 
#	io.print("b.select(oid(3)).print();"); 
    fa_a := calc.oid(3);                # 53 fa_a:oid := CALCint2oid(_58:int) 
    ga_a := algebra.select(b,fa_a);     # 54 ga_a:bat[:oid,:oid] := ALGselect1(b:bat[:oid,:oid], fa_a:oid) {G}
    ha_a := io.print(ga_a);             # 55 ha_a:void := IOprint_val(ga_a:bat[:oid,:oid]) 
#	io.print("b.select(oid(3)).print();"); 
    ia_a := calc.oid(3);                # 57 ia_a:oid := CALCint2oid(_58:int) 
    ja_a := algebra.select(b,ia_a);     # 58 ja_a:bat[:oid,:oid] := ALGselect1(b:bat[:oid,:oid], ia_a:oid) {G}
    ka_a := io.print(ja_a);             # 59 ka_a:void := IOprint_val(ja_a:bat[:oid,:oid]) 
#	io.print("quit();"); 
    la_a := clients.quit();             # 61 la_a:void := CLTquit() 
end main;	# 62  

# 07:27:15 >  
# 07:27:15 >  Done.
# 07:27:15 >  

