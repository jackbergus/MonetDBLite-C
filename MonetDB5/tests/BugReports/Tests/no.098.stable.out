stdout of test 'no.098` in directory 'tests/BugReports` itself:


# 07:27:15 >  
# 07:27:15 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.098.mal < /dev/null
# 07:27:15 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# >Number:         98\n");
##	mil.line("# >Category:       Mserver\n");
##	mil.line("# >Synopsis:       wrong select when a BAT contains one BUN\n");
##	mil.line("# >Confidential:   no\n");
##	mil.line("# >Severity:       critical\n");
##	mil.line("# >Priority:       high\n");
##	mil.line("# >Responsible:    boncz\n");
##	mil.line("# >State:          open\n");
##	mil.line("# >Class:          sw-bug\n");
##	mil.line("# >Submitter-Id:   unknown\n");
##	mil.line("# >Arrival-Date:   Fri Dec 12 19:56:04 1997\n");
##	mil.line("# >Originator:     windhouw\n");
##	mil.line("# >Organization:\n");
##	mil.line("# UvA\n");
##	mil.line("# >Release:        971007\n");
##	mil.line("# >Environment:\n");
##	mil.line("# \n");
##	mil.line("# >Description:\n");
##	mil.line("# When a BAT contains only one BUN a select returns this BUN,\n");
##	mil.line("# even when it's not in the selection range:\n");
##	mil.line("# \n");
##	mil.line("# #You are system administrator (adm)!\n");
##	mil.line("# >b:=new(oid,oid);\n");
##	mil.line("# >b.insert(oid(1),oid(2));\n");
##	mil.line("# >b.select(oid(3)).print;\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# # oid   | tmp_25  #\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# [ 1@0,    2@0     ]\n");
##	mil.line("# >b.select(oid(3)).print;\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# # oid   | tmp_25  #\n");
##	mil.line("# #-----------------#\n");
##	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := setoid(aa_a);
#	b := bat.new(nil:oid,nil:oid);
##	mil.line("b.insert(oid(1),oid(2));");
#	ca_a := calc.oid(1);
#	da_a := calc.oid(2);
#	ea_a := bat.insert(b,ca_a,da_a);
##	mil.line("b.select(oid(3)).print();");
#	fa_a := calc.oid(3);
#	ga_a := algebra.select(b,fa_a);
#	ha_a := io.print(ga_a);
##	mil.line("b.select(oid(3)).print();");
#	ia_a := calc.oid(3);
#	ja_a := algebra.select(b,ia_a);
#	ka_a := io.print(ja_a);
##	mil.line("quit();");
#	la_a := clients.quit();
#
!ERROR: 'user.setoid' undefined in user.main[46] ba_a:any := user.setoid(aa_a:oid)
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
#include mil; 	# 2  (_2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 3  (_3:str)
#Predefined code segment 	# 4  (_4:str)
#The compiler can not guarantee an accurate compilation, 	# 5  (_5:str)
#because MIL unlike MAL is a dynamically typed language. 	# 6  (_6:str)
#A few guidelines to maximize usefullness. 	# 7  (_7:str)
#- make the type of variables explicit, in particular 'nil' 	# 8  (_8:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 9  (_9:str)
#use the "mil_schema" for additional support routines 	# 10  (_10:str)
#	mil.line("# >Number:         98\n"); 	# 11  (_11:str)
#	mil.line("# >Category:       Mserver\n"); 	# 12  (_12:str)
#	mil.line("# >Synopsis:       wrong select when a BAT contains one BUN\n"); 	# 13  (_13:str)
#	mil.line("# >Confidential:   no\n"); 	# 14  (_14:str)
#	mil.line("# >Severity:       critical\n"); 	# 15  (_15:str)
#	mil.line("# >Priority:       high\n"); 	# 16  (_16:str)
#	mil.line("# >Responsible:    boncz\n"); 	# 17  (_17:str)
#	mil.line("# >State:          open\n"); 	# 18  (_18:str)
#	mil.line("# >Class:          sw-bug\n"); 	# 19  (_19:str)
#	mil.line("# >Submitter-Id:   unknown\n"); 	# 20  (_20:str)
#	mil.line("# >Arrival-Date:   Fri Dec 12 19:56:04 1997\n"); 	# 21  (_21:str)
#	mil.line("# >Originator:     windhouw\n"); 	# 22  (_22:str)
#	mil.line("# >Organization:\n"); 	# 23  (_23:str)
#	mil.line("# UvA\n"); 	# 24  (_24:str)
#	mil.line("# >Release:        971007\n"); 	# 25  (_25:str)
#	mil.line("# >Environment:\n"); 	# 26  (_26:str)
#	mil.line("# \n"); 	# 27  (_27:str)
#	mil.line("# >Description:\n"); 	# 28  (_28:str)
#	mil.line("# When a BAT contains only one BUN a select returns this BUN,\n"); 	# 29  (_29:str)
#	mil.line("# even when it's not in the selection range:\n"); 	# 30  (_30:str)
#	mil.line("# \n"); 	# 31  (_27:str)
#	mil.line("# #You are system administrator (adm)!\n"); 	# 32  (_31:str)
#	mil.line("# >b:=new(oid,oid);\n"); 	# 33  (_32:str)
#	mil.line("# >b.insert(oid(1),oid(2));\n"); 	# 34  (_33:str)
#	mil.line("# >b.select(oid(3)).print;\n"); 	# 35  (_34:str)
#	mil.line("# #-----------------#\n"); 	# 36  (_35:str)
#	mil.line("# # oid   | tmp_25  #\n"); 	# 37  (_36:str)
#	mil.line("# #-----------------#\n"); 	# 38  (_35:str)
#	mil.line("# [ 1@0,    2@0     ]\n"); 	# 39  (_37:str)
#	mil.line("# >b.select(oid(3)).print;\n"); 	# 40  (_34:str)
#	mil.line("# #-----------------#\n"); 	# 41  (_35:str)
#	mil.line("# # oid   | tmp_25  #\n"); 	# 42  (_36:str)
#	mil.line("# #-----------------#\n"); 	# 43  (_35:str)
#	mil.line("setoid(oid(20000000));"); 	# 44  (_38:str)
    aa_a := calc.oid(20000000);	# 45 CALCint2oid (aa_a:oid)<-(_40:int)
    ba_a := user.setoid(aa_a);	# 46  unknown (ba_a:any)<-(aa_a:oid)
#	mil.line("var b:=new(oid,oid);"); 	# 47  (_42:str)
    b := bat.new(nil:oid,nil:oid);	# 48 CMDBATnew (b:bat[:oid,:oid])<-(_44:oid)(_44:oid)
#	mil.line("b.insert(oid(1),oid(2));"); 	# 49  (_45:str)
    ca_a := calc.oid(1);	# 50 CALCint2oid (ca_a:oid)<-(_47:int)
    da_a := calc.oid(2);	# 51 CALCint2oid (da_a:oid)<-(_49:int)
    ea_a := bat.insert(b,ca_a,da_a);	# 52 BKCinsert_bun (ea_a:void)<-(b:bat[:oid,:oid])(ca_a:oid)(da_a:oid)
#	mil.line("b.select(oid(3)).print();"); 	# 53  (_51:str)
    fa_a := calc.oid(3);	# 54 CALCint2oid (fa_a:oid)<-(_53:int)
    ga_a := algebra.select(b,fa_a);	# 55 ALGselect1 (ga_a:bat[:oid,:oid])<-(b:bat[:oid,:oid])(fa_a:oid)
    ha_a := io.print(ga_a);	# 56 IOprint_val (ha_a:int)<-(ga_a:bat[:oid,:oid])
#	mil.line("b.select(oid(3)).print();"); 	# 57  (_51:str)
    ia_a := calc.oid(3);	# 58 CALCint2oid (ia_a:oid)<-(_53:int)
    ja_a := algebra.select(b,ia_a);	# 59 ALGselect1 (ja_a:bat[:oid,:oid])<-(b:bat[:oid,:oid])(ia_a:oid)
    ka_a := io.print(ja_a);	# 60 IOprint_val (ka_a:int)<-(ja_a:bat[:oid,:oid])
#	mil.line("quit();"); 	# 61  (_59:str)
    la_a := clients.quit();	# 62 CLTquit (la_a:void)
end main;	# 63  

# 07:27:15 >  
# 07:27:15 >  Done.
# 07:27:15 >  

