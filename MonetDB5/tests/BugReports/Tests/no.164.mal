# Monet Mil to Mal compiler
#include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	mil.line("# \n");
#	mil.line("# >Number:         164\n");
#	mil.line("# >Category:       MIL\n");
#	mil.line("# >Synopsis:       BATcheck in heapclustercopy (module cluster) fails\n");
#	mil.line("# >Confidential:   no\n");
#	mil.line("# >Severity:       serious\n");
#	mil.line("# >Priority:       medium\n");
#	mil.line("# >Responsible:    boncz (Peter Boncz)\n");
#	mil.line("# >State:          open\n");
#	mil.line("# >Class:          sw-bug\n");
#	mil.line("# >Submitter-Id:   unknown\n");
#	mil.line("# >Arrival-Date:   Wed Aug 12 14:54:49 1998\n");
#	mil.line("# >Originator:     manegold@cwi.nl\n");
#	mil.line("# >Organization:\n");
#	mil.line("# CWI\n");
#	mil.line("# >Release:        980101\n");
#	mil.line("# >Environment:\n");
#	mil.line("# any\n");
#	mil.line("# >Description:\n");
#	mil.line("# heapclustercopy fails with\n");
#	mil.line("# !ERROR: CLUSTERcopyheap: BAT 2: BAT required.\n");
#	mil.line("# !ERROR: CMDheapclustercopy: operation failed.\n");
#	mil.line("# \n");
#	mil.line("# ========\n");
#	mil.line("# test.script\n");
#	mil.line("# --------\n");
#	mil.line("# a:=new(int,str);    \n");
#	mil.line("# a.insert(1,\"A\");\n");
#	mil.line("# a.insert(2,\"B\");\n");
#	mil.line("# a.insert(3,\"C\");\n");
#	mil.line("# b:=new(int,str);\n");
#	mil.line("# b.insert(3,\"A\");\n");
#	mil.line("# b.insert(2,\"B\");\n");
#	mil.line("# b.insert(1,\"C\");\n");
#	mil.line("# table(a,b);\n");
#	mil.line("# module(\"cluster\");\n");
#	mil.line("# a.heapclustercopy(b);\n");
#	mil.line("# table(a,b);\n");
#	mil.line("# heapclustercopy(a,b);\n");
#	mil.line("# table(a,b);\n");
#	mil.line("# b.heapclustercopy(a);\n");
#	mil.line("# table(a,b);\n");
#	mil.line("# heapclustercopy(b,a);\n");
#	mil.line("# table(a,b);\n");
#	mil.line("# quit;\n");
#	mil.line("# \n");
#	mil.line("# ========\n");
#	mil.line("# output\n");
#	mil.line("# --------\n");
#	mil.line("# # Monet Database Server V4.0\n");
#	mil.line("# # Copyright (c) 1993-1998, CWI & SION. All rights reserved.\n");
#	mil.line("# # compiled for IRIX5.3/32bit on Wed Aug 12 00:27:12 MET DST 1998.\n");
#	mil.line("# #script:bug.mil\n");
#	mil.line("# \n");
#	mil.line("# loaded;\n");
#	mil.line("# #---------------------------------#\n");
#	mil.line("# # module        | usage_count     #\n");
#	mil.line("# #---------------------------------#\n");
#	mil.line("# [ \"kernel\",       1               ]\n");
#	mil.line("# [ \"arith\",        1               ]\n");
#	mil.line("# [ \"bat\",          1               ]\n");
#	mil.line("# [ \"algebra\",      1               ]\n");
#	mil.line("# [ \"sys\",          1               ]\n");
#	mil.line("# [ \"trans\",        1               ]\n");
#	mil.line("# \n");
#	mil.line("# Try: modules;                - for other modules.\n");
#	mil.line("#      ls;                     - for persistent bat listing.\n");
#	mil.line("#      sigs(\"<module>\")        - for available commands per module.\n");
#	mil.line("#      help(\"<command>\")       - for help one-liner for a command.\n");
#	mil.line("# \n");
#	mil.line("# #You are system administrator (adm)!\n");
#	mil.line("# a:=new(int,str);    \n");
#	mil.line("# a.insert(1,\"A\");\n");
#	mil.line("# a.insert(2,\"B\");\n");
#	mil.line("# a.insert(3,\"C\");\n");
#	mil.line("# b:=new(int,str);\n");
#	mil.line("# b.insert(3,\"A\");\n");
#	mil.line("# b.insert(2,\"B\");\n");
#	mil.line("# b.insert(1,\"C\");\n");
#	mil.line("# table(a,b);\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# # tmp_23| tmp_24  #\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# [ \"A\",    \"C\"     ]\n");
#	mil.line("# [ \"B\",    \"B\"     ]\n");
#	mil.line("# [ \"C\",    \"A\"     ]\n");
#	mil.line("# module(\"cluster\");\n");
#	mil.line("# a.heapclustercopy(b);\n");
#	mil.line("# !ERROR: CLUSTERcopyheap: BAT 2: BAT required.\n");
#	mil.line("# !ERROR: CMDheapclustercopy: operation failed.\n");
#	mil.line("# table(a,b);\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# # tmp_23| tmp_24  #\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# [ \"A\",    \"C\"     ]\n");
#	mil.line("# [ \"B\",    \"B\"     ]\n");
#	mil.line("# [ \"C\",    \"A\"     ]\n");
#	mil.line("# heapclustercopy(a,b);\n");
#	mil.line("# !ERROR: CLUSTERcopyheap: BAT 2: BAT required.\n");
#	mil.line("# !ERROR: CMDheapclustercopy: operation failed.\n");
#	mil.line("# table(a,b);\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# # tmp_23| tmp_24  #\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# [ \"A\",    \"C\"     ]\n");
#	mil.line("# [ \"B\",    \"B\"     ]\n");
#	mil.line("# [ \"C\",    \"A\"     ]\n");
#	mil.line("# b.heapclustercopy(a);\n");
#	mil.line("# !ERROR: CLUSTERcopyheap: BAT 2: BAT required.\n");
#	mil.line("# !ERROR: CMDheapclustercopy: operation failed.\n");
#	mil.line("# table(a,b);\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# # tmp_23| tmp_24  #\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# [ \"A\",    \"C\"     ]\n");
#	mil.line("# [ \"B\",    \"B\"     ]\n");
#	mil.line("# [ \"C\",    \"A\"     ]\n");
#	mil.line("# heapclustercopy(b,a);\n");
#	mil.line("# !ERROR: CLUSTERcopyheap: BAT 2: BAT required.\n");
#	mil.line("# !ERROR: CMDheapclustercopy: operation failed.\n");
#	mil.line("# table(a,b);\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# # tmp_23| tmp_24  #\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# [ \"A\",    \"C\"     ]\n");
#	mil.line("# [ \"B\",    \"B\"     ]\n");
#	mil.line("# [ \"C\",    \"A\"     ]\n");
#	mil.line("# quit;\n");
#	mil.line("# \n");
#	mil.line("# ========\n");
#	mil.line("setoid(oid(20000000));");
	aa_a := calc.oid(20000000);
	ba_a := setoid(aa_a);
#	mil.line("var a:=new(int,str);    ");
	a := bbp.new(nil:int,nil:str);
#	mil.line("a.insert(1,\"A\");");
	ca_a := bat.insert(a,1,"A");
#	mil.line("a.insert(2,\"B\");");
	da_a := bat.insert(a,2,"B");
#	mil.line("a.insert(3,\"C\");");
	ea_a := bat.insert(a,3,"C");
#	mil.line("var b:=new(int,str);");
	b := bbp.new(nil:int,nil:str);
#	mil.line("b.insert(3,\"A\");");
	fa_a := bat.insert(b,3,"A");
#	mil.line("b.insert(2,\"B\");");
	ga_a := bat.insert(b,2,"B");
#	mil.line("b.insert(1,\"C\");");
	ha_a := bat.insert(b,1,"C");
#	mil.line("table(a,b);");
	ia_a := table(a,b);
#	mil.line("a.heapclustercopy(b);");
	ja_a := heapclustercopy(a,b);
#	mil.line("table(a,b);");
	ka_a := table(a,b);
#	mil.line("heapclustercopy(a,b);");
	la_a := heapclustercopy(a,b);
#	mil.line("table(a,b);");
	ma_a := table(a,b);
#	mil.line("b.heapclustercopy(a);");
	na_a := heapclustercopy(b,a);
#	mil.line("table(a,b);");
	oa_a := table(a,b);
#	mil.line("heapclustercopy(b,a);");
	pa_a := heapclustercopy(b,a);
#	mil.line("table(a,b);");
	qa_a := table(a,b);
#	mil.line("quit();");
	ra_a := clients.quit();
