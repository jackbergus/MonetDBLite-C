stdout of test 'no.050` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.050 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.050.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.050.milS


# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("# >Number:         50\n");
#	mil.line("# >Category:       MIL\n");
#	mil.line("# >Confidential:   no\n");
#	mil.line("# >Severity:       critical\n");
#	mil.line("# >Priority:       high\n");
#	mil.line("# >Responsible:    boncz\n");
#	mil.line("# >State:          closed\n");
#	mil.line("# >Class:          sw-bug\n");
#	mil.line("# >Submitter-Id:   unknown\n");
#	mil.line("# >Arrival-Date:   Wed Oct 15 10:23:33 1997\n");
#	mil.line("# >Originator:     niels\n");
#	mil.line("# >Organization:\n");
#	mil.line("# >Release:        971007\n");
#	mil.line("# >Environment:\n");
#	mil.line("# SunOS5.5.1\n");
#	mil.line("# >Description:\n");
#	mil.line("# a := new (oid,int);\n");
#	mil.line("# a.insert( oid(1), 100 );\n");
#	mil.line("# a.insert( oid(2), 1000 );\n");
#	mil.line("# a.insert( oid(4), 10 );\n");
#	mil.line("# a.insert( oid(5), 15 );\n");
#	mil.line("# a.select( 94, 110 ).print;\n");
#	mil.line("# #output\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# # oid   | tmp_27  #\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# [ 1@0,    100     ]\n");
#	mil.line("# [ 2@0,    1000    ]\n");
#	mil.line("var a := new (oid,int);");
#	a := new(nil:oid,nil:int);
#	mil.line("a.insert( oid(1), 100 );");
#	aa_a := oid(1);
#	ba_a := insert(a,aa_a,100);
#	mil.line("a.insert( oid(2), 1000 );");
#	ca_a := oid(2);
#	da_a := insert(a,ca_a,1000);
#	mil.line("a.insert( oid(4), 10 );");
#	ea_a := oid(4);
#	fa_a := insert(a,ea_a,10);
#	mil.line("a.insert( oid(5), 15 );");
#	ga_a := oid(5);
#	ha_a := insert(a,ga_a,15);
#	mil.line("a.print();");
#	ia_a := print(a);
#	ja_a := reverse(a);
#	mil.line("a.print();");
#	la_a := print(a);
#	mil.line("a.select( 94, 110 ).print();");
#	ma_a := select(a,94,110);
#	na_a := print(ma_a);
#	mil.line("quit();");
#	oa_a := quit();
#
function user.main():int;	# 0  (main:int)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  (_32:str)
#Predefined code segment 	# 2  (_34:str)
#The compiler can not guarantee an accurate compilation, 	# 3  (_36:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  (_38:str)
#A few guidelines to maximize usefullness. 	# 5  (_40:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  (_42:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  (_44:str)
#use the "mil_schema" for additional support routines 	# 8  (_46:str)
    mil.line("# >Number:         50\n");	# 9 MILline (_47:void)<-(_48:str)
    mil.line("# >Category:       MIL\n");	# 10 MILline (_49:void)<-(_50:str)
    mil.line("# >Confidential:   no\n");	# 11 MILline (_51:void)<-(_52:str)
    mil.line("# >Severity:       critical\n");	# 12 MILline (_53:void)<-(_54:str)
    mil.line("# >Priority:       high\n");	# 13 MILline (_55:void)<-(_56:str)
    mil.line("# >Responsible:    boncz\n");	# 14 MILline (_57:void)<-(_58:str)
    mil.line("# >State:          closed\n");	# 15 MILline (_59:void)<-(_60:str)
    mil.line("# >Class:          sw-bug\n");	# 16 MILline (_61:void)<-(_62:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 17 MILline (_63:void)<-(_64:str)
    mil.line("# >Arrival-Date:   Wed Oct 15 10:23:33 1997\n");	# 18 MILline (_65:void)<-(_66:str)
    mil.line("# >Originator:     niels\n");	# 19 MILline (_67:void)<-(_68:str)
    mil.line("# >Organization:\n");	# 20 MILline (_69:void)<-(_70:str)
    mil.line("# >Release:        971007\n");	# 21 MILline (_71:void)<-(_72:str)
    mil.line("# >Environment:\n");	# 22 MILline (_73:void)<-(_74:str)
    mil.line("# SunOS5.5.1\n");	# 23 MILline (_75:void)<-(_76:str)
    mil.line("# >Description:\n");	# 24 MILline (_77:void)<-(_78:str)
    mil.line("# a := new (oid,int);\n");	# 25 MILline (_79:void)<-(_80:str)
    mil.line("# a.insert( calc.oid(1), 100 );\n");	# 26 MILline (_81:void)<-(_82:str)
    mil.line("# a.insert( calc.oid(2), 1000 );\n");	# 27 MILline (_83:void)<-(_84:str)
    mil.line("# a.insert( calc.oid(4), 10 );\n");	# 28 MILline (_85:void)<-(_86:str)
    mil.line("# a.insert( calc.oid(5), 15 );\n");	# 29 MILline (_87:void)<-(_88:str)
    mil.line("# a.select( 94, 110 ).print;\n");	# 30 MILline (_89:void)<-(_90:str)
    mil.line("# #output\n");	# 31 MILline (_91:void)<-(_92:str)
    mil.line("# #-----------------#\n");	# 32 MILline (_93:void)<-(_94:str)
    mil.line("# # oid   | tmp_27  #\n");	# 33 MILline (_95:void)<-(_96:str)
    mil.line("# #-----------------#\n");	# 34 MILline (_97:void)<-(_94:str)
    mil.line("# [ 1@0,    100     ]\n");	# 35 MILline (_98:void)<-(_99:str)
    mil.line("# [ 2@0,    1000    ]\n");	# 36 MILline (_100:void)<-(_101:str)
    mil.line("var a := new (oid,int);");	# 37 MILline (_102:void)<-(_103:str)
    a := bat.new(nil:oid,nil:int);	# 38 CMDBATnew (a:bat[:oid,:int])<-(_105:oid)(_106:int)
    mil.line("a.insert( calc.oid(1), 100 );");	# 39 MILline (_107:void)<-(_108:str)
    aa_a := calc.oid(1);	# 40 CALCint2oid (aa_a:oid)<-(_110:int)
    ba_a := bat.insert(a,aa_a,100);	# 41 BKCinsert_bun_oid_any (ba_a:void)<-(a:bat[:oid,:int])(aa_a:oid)(_112:int)
    mil.line("a.insert( calc.oid(2), 1000 );");	# 42 MILline (_113:void)<-(_114:str)
    ca_a := calc.oid(2);	# 43 CALCint2oid (ca_a:oid)<-(_116:int)
    da_a := bat.insert(a,ca_a,1000);	# 44 BKCinsert_bun_oid_any (da_a:void)<-(a:bat[:oid,:int])(ca_a:oid)(_118:int)
    mil.line("a.insert( calc.oid(4), 10 );");	# 45 MILline (_119:void)<-(_120:str)
    ea_a := calc.oid(4);	# 46 CALCint2oid (ea_a:oid)<-(_122:int)
    fa_a := bat.insert(a,ea_a,10);	# 47 BKCinsert_bun_oid_any (fa_a:void)<-(a:bat[:oid,:int])(ea_a:oid)(_124:int)
    mil.line("a.insert( calc.oid(5), 15 );");	# 48 MILline (_125:void)<-(_126:str)
    ga_a := calc.oid(5);	# 49 CALCint2oid (ga_a:oid)<-(_128:int)
    ha_a := bat.insert(a,ga_a,15);	# 50 BKCinsert_bun_oid_any (ha_a:void)<-(a:bat[:oid,:int])(ga_a:oid)(_130:int)
    mil.line("a.print();");	# 51 MILline (_131:void)<-(_132:str)
    ia_a := io.print(a);	# 52 IOprint_val (ia_a:int)<-(a:bat[:oid,:int])
    ja_a := bat.reverse(a);	# 53 BKCreverse (ja_a:bat[:int,:oid])<-(a:bat[:oid,:int])
    mil.line("a.print();");	# 54 MILline (_135:void)<-(_132:str)
    la_a := io.print(a);	# 55 IOprint_val (la_a:int)<-(a:bat[:oid,:int])
    mil.line("a.select( 94, 110 ).print();");	# 56 MILline (_137:void)<-(_138:str)
    ma_a := algebra.select(a,94,110);	# 57 ALGselect (ma_a:bat[:oid,:int])<-(a:bat[:oid,:int])(_140:int)(_141:int)
    na_a := io.print(ma_a);	# 58 IOprint_val (na_a:int)<-(ma_a:bat[:oid,:int])
    mil.line("quit();");	# 59 MILline (_143:void)<-(_144:str)
    oa_a := clients.quit();	# 60 CLTquit (oa_a:void)
end main;	# 61  
## >Number:         50\n
## >Category:       MIL\n
## >Confidential:   no\n
## >Severity:       critical\n
## >Priority:       high\n
## >Responsible:    boncz\n
## >State:          closed\n
## >Class:          sw-bug\n
## >Submitter-Id:   unknown\n
## >Arrival-Date:   Wed Oct 15 10:23:33 1997\n
## >Originator:     niels\n
## >Organization:\n
## >Release:        971007\n
## >Environment:\n
## SunOS5.5.1\n
## >Description:\n
## a := new (oid,int);\n
## a.insert( calc.oid(1), 100 );\n
## a.insert( calc.oid(2), 1000 );\n
## a.insert( calc.oid(4), 10 );\n
## a.insert( calc.oid(5), 15 );\n
## a.select( 94, 110 ).print;\n
## #output\n
## #-----------------#\n
## # oid   | tmp_27  #\n
## #-----------------#\n
## [ 1@0,    100     ]\n
## [ 2@0,    1000    ]\n
#var a := new (oid,int);
#a.insert( oid(1), 100 );
#a.insert( oid(2), 1000 );
#a.insert( oid(4), 10 );
#a.insert( oid(5), 15 );
#a.print();
#-----------------#
# BAT:	  tmp_25  #
# (oid)	  (int)	  #
#-----------------#
[ 1@0,	  100	  ]
[ 2@0,	  1000	  ]
[ 4@0,	  10	  ]
[ 5@0,	  15	  ]
#a.print();
#-----------------#
# BAT:	  tmp_25  #
# (oid)	  (int)	  #
#-----------------#
[ 1@0,	  100	  ]
[ 2@0,	  1000	  ]
[ 4@0,	  10	  ]
[ 5@0,	  15	  ]
#a.select( 94, 110 ).print();
#-----------------#
# BAT:	  tmp_26  #
# (oid)	  (int)	  #
#-----------------#
[ 1@0,	  100	  ]
#quit();

# 17:06:48 >  
# 17:06:48 >  Done.
# 17:06:48 >  

