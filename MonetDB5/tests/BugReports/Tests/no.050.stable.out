stdout of test 'no.050` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.050 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.050.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.050.milS


# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("# >Number:         50\n");
#	mil.line("# >Category:       MIL\n");
#	mil.line("# >Confidential:   no\n");
#	mil.line("# >Severity:       critical\n");
#	mil.line("# >Priority:       high\n");
#	mil.line("# >Responsible:    boncz\n");
#	mil.line("# >State:          closed\n");
#	mil.line("# >Class:          sw-bug\n");
#	mil.line("# >Submitter-Id:   unknown\n");
#	mil.line("# >Arrival-Date:   Wed Oct 15 10:23:33 1997\n");
#	mil.line("# >Originator:     niels\n");
#	mil.line("# >Organization:\n");
#	mil.line("# >Release:        971007\n");
#	mil.line("# >Environment:\n");
#	mil.line("# SunOS5.5.1\n");
#	mil.line("# >Description:\n");
#	mil.line("# a := new (oid,int);\n");
#	mil.line("# a.insert( oid(1), 100 );\n");
#	mil.line("# a.insert( oid(2), 1000 );\n");
#	mil.line("# a.insert( oid(4), 10 );\n");
#	mil.line("# a.insert( oid(5), 15 );\n");
#	mil.line("# a.select( 94, 110 ).print;\n");
#	mil.line("# #output\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# # oid   | tmp_27  #\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# [ 1@0,    100     ]\n");
#	mil.line("# [ 2@0,    1000    ]\n");
#	mil.line("var a := new (oid,int);");
#	a := new(nil:oid,nil:int);
#	mil.line("a.insert( oid(1), 100 );");
#	aa_a := oid(1);
#	ba_a := insert(a,aa_a,100);
#	mil.line("a.insert( oid(2), 1000 );");
#	ca_a := oid(2);
#	da_a := insert(a,ca_a,1000);
#	mil.line("a.insert( oid(4), 10 );");
#	ea_a := oid(4);
#	fa_a := insert(a,ea_a,10);
#	mil.line("a.insert( oid(5), 15 );");
#	ga_a := oid(5);
#	ha_a := insert(a,ga_a,15);
#	mil.line("a.print();");
#	ia_a := print(a);
#	ja_a := reverse(a);
#	mil.line("a.print();");
#	la_a := print(a);
#	mil.line("a.select( 94, 110 ).print();");
#	ma_a := select(a,94,110);
#	na_a := print(ma_a);
#	mil.line("quit();");
#	oa_a := quit();
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
#include mil; 	# 2  (_2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 3  (_3:str)
#Predefined code segment 	# 4  (_4:str)
#The compiler can not guarantee an accurate compilation, 	# 5  (_5:str)
#because MIL unlike MAL is a dynamically typed language. 	# 6  (_6:str)
#A few guidelines to maximize usefullness. 	# 7  (_7:str)
#- make the type of variables explicit, in particular 'nil' 	# 8  (_8:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 9  (_9:str)
#use the "mil_schema" for additional support routines 	# 10  (_10:str)
#	mil.line("# >Number:         50\n"); 	# 11  (_11:str)
#	mil.line("# >Category:       MIL\n"); 	# 12  (_12:str)
#	mil.line("# >Confidential:   no\n"); 	# 13  (_13:str)
#	mil.line("# >Severity:       critical\n"); 	# 14  (_14:str)
#	mil.line("# >Priority:       high\n"); 	# 15  (_15:str)
#	mil.line("# >Responsible:    boncz\n"); 	# 16  (_16:str)
#	mil.line("# >State:          closed\n"); 	# 17  (_17:str)
#	mil.line("# >Class:          sw-bug\n"); 	# 18  (_18:str)
#	mil.line("# >Submitter-Id:   unknown\n"); 	# 19  (_19:str)
#	mil.line("# >Arrival-Date:   Wed Oct 15 10:23:33 1997\n"); 	# 20  (_20:str)
#	mil.line("# >Originator:     niels\n"); 	# 21  (_21:str)
#	mil.line("# >Organization:\n"); 	# 22  (_22:str)
#	mil.line("# >Release:        971007\n"); 	# 23  (_23:str)
#	mil.line("# >Environment:\n"); 	# 24  (_24:str)
#	mil.line("# SunOS5.5.1\n"); 	# 25  (_25:str)
#	mil.line("# >Description:\n"); 	# 26  (_26:str)
#	mil.line("# a := new (oid,int);\n"); 	# 27  (_27:str)
#	mil.line("# a.insert( calc.oid(1), 100 );\n"); 	# 28  (_28:str)
#	mil.line("# a.insert( calc.oid(2), 1000 );\n"); 	# 29  (_29:str)
#	mil.line("# a.insert( calc.oid(4), 10 );\n"); 	# 30  (_30:str)
#	mil.line("# a.insert( calc.oid(5), 15 );\n"); 	# 31  (_31:str)
#	mil.line("# a.select( 94, 110 ).print;\n"); 	# 32  (_32:str)
#	mil.line("# #output\n"); 	# 33  (_33:str)
#	mil.line("# #-----------------#\n"); 	# 34  (_34:str)
#	mil.line("# # oid   | tmp_27  #\n"); 	# 35  (_35:str)
#	mil.line("# #-----------------#\n"); 	# 36  (_34:str)
#	mil.line("# [ 1@0,    100     ]\n"); 	# 37  (_36:str)
#	mil.line("# [ 2@0,    1000    ]\n"); 	# 38  (_37:str)
#	mil.line("var a := new (oid,int);"); 	# 39  (_38:str)
    a := bat.new(nil:oid,nil:int);	# 40 CMDBATnew (a:bat[:oid,:int])<-(_40:oid)(_41:int)
#	mil.line("a.insert( calc.oid(1), 100 );"); 	# 41  (_42:str)
    aa_a := calc.oid(1);	# 42 CALCint2oid (aa_a:oid)<-(_44:int)
    ba_a := bat.insert(a,aa_a,100);	# 43 BKCinsert_bun (ba_a:void)<-(a:bat[:oid,:int])(aa_a:oid)(_46:int)
#	mil.line("a.insert( calc.oid(2), 1000 );"); 	# 44  (_47:str)
    ca_a := calc.oid(2);	# 45 CALCint2oid (ca_a:oid)<-(_49:int)
    da_a := bat.insert(a,ca_a,1000);	# 46 BKCinsert_bun (da_a:void)<-(a:bat[:oid,:int])(ca_a:oid)(_51:int)
#	mil.line("a.insert( calc.oid(4), 10 );"); 	# 47  (_52:str)
    ea_a := calc.oid(4);	# 48 CALCint2oid (ea_a:oid)<-(_54:int)
    fa_a := bat.insert(a,ea_a,10);	# 49 BKCinsert_bun (fa_a:void)<-(a:bat[:oid,:int])(ea_a:oid)(_56:int)
#	mil.line("a.insert( calc.oid(5), 15 );"); 	# 50  (_57:str)
    ga_a := calc.oid(5);	# 51 CALCint2oid (ga_a:oid)<-(_59:int)
    ha_a := bat.insert(a,ga_a,15);	# 52 BKCinsert_bun (ha_a:void)<-(a:bat[:oid,:int])(ga_a:oid)(_61:int)
#	mil.line("a.print();"); 	# 53  (_62:str)
    ia_a := io.print(a);	# 54 IOprint_val (ia_a:int)<-(a:bat[:oid,:int])
    ja_a := bat.reverse(a);	# 55 BKCreverse (ja_a:bat[:int,:oid])<-(a:bat[:oid,:int])
#	mil.line("a.print();"); 	# 56  (_62:str)
    la_a := io.print(a);	# 57 IOprint_val (la_a:int)<-(a:bat[:oid,:int])
#	mil.line("a.select( 94, 110 ).print();"); 	# 58  (_66:str)
    ma_a := algebra.select(a,94,110);	# 59 ALGselect (ma_a:bat[:oid,:int])<-(a:bat[:oid,:int])(_68:int)(_69:int)
    na_a := io.print(ma_a);	# 60 IOprint_val (na_a:int)<-(ma_a:bat[:oid,:int])
#	mil.line("quit();"); 	# 61  (_71:str)
    oa_a := clients.quit();	# 62 CLTquit (oa_a:void)
end main;	# 63  
#-----------------#
# BAT:	  tmp_25  #
# (oid)	  (int)	  #
#-----------------#
[ 1@0,	  100	  ]
[ 2@0,	  1000	  ]
[ 4@0,	  10	  ]
[ 5@0,	  15	  ]
#a.print();
#-----------------#
# BAT:	  tmp_25  #
# (oid)	  (int)	  #
#-----------------#
[ 1@0,	  100	  ]
[ 2@0,	  1000	  ]
[ 4@0,	  10	  ]
[ 5@0,	  15	  ]
#a.select( 94, 110 ).print();
#-----------------#
# BAT:	  tmp_26  #
# (oid)	  (int)	  #
#-----------------#
[ 1@0,	  100	  ]
#quit();

# 17:06:48 >  
# 17:06:48 >  Done.
# 17:06:48 >  

