# Monet Mil to Mal compiler
include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
	mil.line("# >Number:         16\n");
	mil.line("# >Category:       MIL\n");
	mil.line("# >Synopsis:       MIL: sample, does not handle empty BAT\n");
	mil.line("# >Confidential:   no\n");
	mil.line("# >Severity:       serious\n");
	mil.line("# >Priority:       medium\n");
	mil.line("# >Responsible:    boncz\n");
	mil.line("# >State:          closed\n");
	mil.line("# >Class:          sw-bug\n");
	mil.line("# >Submitter-Id:   unknown\n");
	mil.line("# >Arrival-Date:   Wed Jul 16 15:00:00 1997\n");
	mil.line("# >Originator:     jonas\n");
	mil.line("# >Organization:\n");
	mil.line("# >Release:        970101\n");
	mil.line("# >Environment:\n");
	mil.line("# general/IRIX monet3.0.6\n");
	mil.line("# >Description:\n");
	mil.line("# >a := bat.new(int, int);\n");
	mil.line("# >a.sample(1).print;\n");
	mil.line("# !FATAL GDKmalloc called with size 0\n");
	mil.line("var a := bat.new(int, int);");
	a := bat.new(nil:int,nil:int);
	mil.line("a.sample(1).print();");
	aa_a := algebra.sample(a,1);
	ba_a := io.print(aa_a);
	mil.line("quit();");
	ca_a := clients.quit();
