stdout of test 'no.162` in directory 'tests/BugReports` itself:


# 07:27:16 >  
# 07:27:16 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.162.mal < /dev/null
# 07:27:16 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# >Number:         162\n");
##	mil.line("# >Category:       Mserver\n");
##	mil.line("# >Synopsis:       ghost BUN in join result\n");
##	mil.line("# >Confidential:   no\n");
##	mil.line("# >Severity:       critical\n");
##	mil.line("# >Priority:       high\n");
##	mil.line("# >Responsible:    boncz (Peter Boncz)\n");
##	mil.line("# >State:          open\n");
##	mil.line("# >Class:          sw-bug\n");
##	mil.line("# >Submitter-Id:   unknown\n");
##	mil.line("# >Arrival-Date:   Wed Jul 15 16:13:00 1998\n");
##	mil.line("# >Originator:     windhouw@cwi.nl\n");
##	mil.line("# >Organization:\n");
##	mil.line("# CWI\n");
##	mil.line("# >Release:        980101\n");
##	mil.line("# >Environment:\n");
##	mil.line("# \n");
##	mil.line("# >Description:\n");
##	mil.line("# A ghost BUN appears in the following script:\n");
##	mil.line("# \n");
##	mil.line("# script\n");
##	mil.line("# 8<-----\n");
##	mil.line("# VAR left := bat.new(int,int);\n");
##	mil.line("# left.insert(4,-3);\n");
##	mil.line("# left.insert(3,-2);\n");
##	mil.line("# left.insert(2,-1);\n");
##	mil.line("# left.insert(1,0);\n");
##	mil.line("#  \n");
##	mil.line("# VAR right := bat.new(int,str);\n");
##	mil.line("# right.insert(-3,\"vier\");\n");
##	mil.line("# right.insert(-2,\"drie\");\n");
##	mil.line("# right.insert(-1,\"twee\");\n");
##	mil.line("# right.insert(0,\"een\");\n");
##	mil.line("# \n");
##	mil.line("# algebra.join(left,right).print;\n");
##	mil.line("# \n");
##	mil.line("# 8<-----\n");
##	mil.line("# output\n");
##	mil.line("# 8<-----\n");
##	mil.line("# >join(left,right).print;\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# # BAT:    tmp_37  #\n");
##	mil.line("# # (int)   (str)   #\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# [ 4,      \"vier\"  ]\n");
##	mil.line("# [ 3,      \"drie\"  ]\n");
##	mil.line("# [ 2,      \"twee\"  ]\n");
##	mil.line("# [ 1,      \"een\"   ]\n");
##	mil.line("# [ 1,      \"\"      ]\n");
##	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
##	mil.line("VAR left := bat.new(int,int);");
#	left := bat.new(nil:int,nil:int);
##	mil.line("left.insert(4,-3);");
#	ca_a := bat.insert(left,4,-3);
##	mil.line("left.insert(3,-2);");
#	da_a := bat.insert(left,3,-2);
##	mil.line("left.insert(2,-1);");
#	ea_a := bat.insert(left,2,-1);
##	mil.line("left.insert(1,0);");
#	fa_a := bat.insert(left,1,0);
##	mil.line("VAR right := bat.new(int,str);");
#	right := bat.new(nil:int,nil:str);
##	mil.line("right.insert(-3,\"vier\");");
#	ga_a := bat.insert(right,-3,"vier");
##	mil.line("right.insert(-2,\"drie\");");
#	ha_a := bat.insert(right,-2,"drie");
##	mil.line("right.insert(-1,\"twee\");");
#	ia_a := bat.insert(right,-1,"twee");
##	mil.line("right.insert(0,\"een\");");
#	ja_a := bat.insert(right,0,"een");
##	mil.line("join(left,right).print();");
#	ka_a := algebra.join(left,right);
#	la_a := io.print(ka_a);
##	mil.line("quit();");
#	ma_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  (_2:str)
#Predefined code segment 	# 3  (_3:str)
#The compiler can not guarantee an accurate compilation, 	# 4  (_4:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  (_5:str)
#A few guidelines to maximize usefullness. 	# 6  (_6:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  (_7:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  (_8:str)
#use the "mil_schema" for additional support routines 	# 9  (_9:str)
#	io.print("# >Number:         162\n"); 	# 10  (_10:str)
#	io.print("# >Category:       Mserver\n"); 	# 11  (_11:str)
#	io.print("# >Synopsis:       ghost BUN in join result\n"); 	# 12  (_12:str)
#	io.print("# >Confidential:   no\n"); 	# 13  (_13:str)
#	io.print("# >Severity:       critical\n"); 	# 14  (_14:str)
#	io.print("# >Priority:       high\n"); 	# 15  (_15:str)
#	io.print("# >Responsible:    boncz (Peter Boncz)\n"); 	# 16  (_16:str)
#	io.print("# >State:          open\n"); 	# 17  (_17:str)
#	io.print("# >Class:          sw-bug\n"); 	# 18  (_18:str)
#	io.print("# >Submitter-Id:   unknown\n"); 	# 19  (_19:str)
#	io.print("# >Arrival-Date:   Wed Jul 15 16:13:00 1998\n"); 	# 20  (_20:str)
#	io.print("# >Originator:     windhouw@cwi.nl\n"); 	# 21  (_21:str)
#	io.print("# >Organization:\n"); 	# 22  (_22:str)
#	io.print("# CWI\n"); 	# 23  (_23:str)
#	io.print("# >Release:        980101\n"); 	# 24  (_24:str)
#	io.print("# >Environment:\n"); 	# 25  (_25:str)
#	io.print("# \n"); 	# 26  (_26:str)
#	io.print("# >Description:\n"); 	# 27  (_27:str)
#	io.print("# A ghost BUN appears in the following script:\n"); 	# 28  (_28:str)
#	io.print("# \n"); 	# 29  (_26:str)
#	io.print("# script\n"); 	# 30  (_29:str)
#	io.print("# 8<-----\n"); 	# 31  (_30:str)
#	io.print("# VAR left := bat.new(int,int);\n"); 	# 32  (_31:str)
#	io.print("# left.insert(4,-3);\n"); 	# 33  (_32:str)
#	io.print("# left.insert(3,-2);\n"); 	# 34  (_33:str)
#	io.print("# left.insert(2,-1);\n"); 	# 35  (_34:str)
#	io.print("# left.insert(1,0);\n"); 	# 36  (_35:str)
#	io.print("#  \n"); 	# 37  (_36:str)
#	io.print("# VAR right := bat.new(int,str);\n"); 	# 38  (_37:str)
#	io.print("# right.insert(-3,\"vier\");\n"); 	# 39  (_38:str)
#	io.print("# right.insert(-2,\"drie\");\n"); 	# 40  (_39:str)
#	io.print("# right.insert(-1,\"twee\");\n"); 	# 41  (_40:str)
#	io.print("# right.insert(0,\"een\");\n"); 	# 42  (_41:str)
#	io.print("# \n"); 	# 43  (_26:str)
#	io.print("# algebra.join(left,right).print;\n"); 	# 44  (_42:str)
#	io.print("# \n"); 	# 45  (_26:str)
#	io.print("# 8<-----\n"); 	# 46  (_30:str)
#	io.print("# output\n"); 	# 47  (_43:str)
#	io.print("# 8<-----\n"); 	# 48  (_30:str)
#	io.print("# >join(left,right).print;\n"); 	# 49  (_44:str)
#	io.print("# #-----------------#\n"); 	# 50  (_45:str)
#	io.print("# # BAT:    tmp_37  #\n"); 	# 51  (_46:str)
#	io.print("# # (int)   (str)   #\n"); 	# 52  (_47:str)
#	io.print("# #-----------------#\n"); 	# 53  (_45:str)
#	io.print("# [ 4,      \"vier\"  ]\n"); 	# 54  (_48:str)
#	io.print("# [ 3,      \"drie\"  ]\n"); 	# 55  (_49:str)
#	io.print("# [ 2,      \"twee\"  ]\n"); 	# 56  (_50:str)
#	io.print("# [ 1,      \"een\"   ]\n"); 	# 57  (_51:str)
#	io.print("# [ 1,      \"\"      ]\n"); 	# 58  (_52:str)
#	io.print("setoid(oid(20000000));"); 	# 59  (_53:str)
    aa_a := calc.oid(20000000);	# 60 CALCint2oid (aa_a:oid)<-(_55:int)
    ba_a := calc.setoid(aa_a);	# 61 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	io.print("VAR left := bat.new(int,int);"); 	# 62  (_57:str)
    left := bat.new(nil:int,nil:int);	# 63 CMDBATnew (left:bat[:int,:int])<-(_59:int)(_59:int)
#	io.print("left.insert(4,-3);"); 	# 64  (_60:str)
    ca_a := bat.insert(left,4,-3);	# 65 BKCinsert_bun (ca_a:void)<-(left:bat[:int,:int])(_62:int)(_63:int)
#	io.print("left.insert(3,-2);"); 	# 66  (_64:str)
    da_a := bat.insert(left,3,-2);	# 67 BKCinsert_bun (da_a:void)<-(left:bat[:int,:int])(_66:int)(_67:int)
#	io.print("left.insert(2,-1);"); 	# 68  (_68:str)
    ea_a := bat.insert(left,2,-1);	# 69 BKCinsert_bun (ea_a:void)<-(left:bat[:int,:int])(_70:int)(_71:int)
#	io.print("left.insert(1,0);"); 	# 70  (_72:str)
    fa_a := bat.insert(left,1,0);	# 71 BKCinsert_bun (fa_a:void)<-(left:bat[:int,:int])(_74:int)(_75:int)
#	io.print("VAR right := bat.new(int,str);"); 	# 72  (_76:str)
    right := bat.new(nil:int,nil:str);	# 73 CMDBATnew (right:bat[:int,:str])<-(_59:int)(_78:str)
#	io.print("right.insert(-3,\"vier\");"); 	# 74  (_79:str)
    ga_a := bat.insert(right,-3,"vier");	# 75 BKCinsert_bun (ga_a:void)<-(right:bat[:int,:str])(_63:int)(_81:str)
#	io.print("right.insert(-2,\"drie\");"); 	# 76  (_82:str)
    ha_a := bat.insert(right,-2,"drie");	# 77 BKCinsert_bun (ha_a:void)<-(right:bat[:int,:str])(_67:int)(_84:str)
#	io.print("right.insert(-1,\"twee\");"); 	# 78  (_85:str)
    ia_a := bat.insert(right,-1,"twee");	# 79 BKCinsert_bun (ia_a:void)<-(right:bat[:int,:str])(_71:int)(_87:str)
#	io.print("right.insert(0,\"een\");"); 	# 80  (_88:str)
    ja_a := bat.insert(right,0,"een");	# 81 BKCinsert_bun (ja_a:void)<-(right:bat[:int,:str])(_75:int)(_90:str)
#	io.print("join(left,right).print();"); 	# 82  (_91:str)
    ka_a := algebra.join(left,right);	# 83 ALGjoin (ka_a:bat[:int,:str])<-(left:bat[:int,:int])(right:bat[:int,:str])
    la_a := io.print(ka_a);	# 84 IOprint_val (la_a:int)<-(ka_a:bat[:int,:str])
#	io.print("quit();"); 	# 85  (_94:str)
    ma_a := clients.quit();	# 86 CLTquitDefault (ma_a:void)
end main;	# 87  
#-----------------#
# h	t	  # name
# int	str	  # type
#-----------------#
[ 4,	  "vier"  ]
[ 3,	  "drie"  ]
[ 2,	  "twee"  ]
[ 1,	  "een"	  ]

# 07:27:16 >  
# 07:27:16 >  Done.
# 07:27:16 >  

