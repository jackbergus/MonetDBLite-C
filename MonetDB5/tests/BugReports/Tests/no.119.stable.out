stdout of test 'no.119` in directory 'tests/BugReports` itself:


# 07:27:15 >  
# 07:27:15 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.119.mal < /dev/null
# 07:27:15 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# >Number:         119\n");
##	mil.line("# >Category:       Module_kernel\n");
##	mil.line("# >Synopsis:       thetajoin gives incorrect output\n");
##	mil.line("# >Confidential:   no\n");
##	mil.line("# >Severity:       serious\n");
##	mil.line("# >Priority:       medium\n");
##	mil.line("# >Responsible:    boncz\n");
##	mil.line("# >State:          open\n");
##	mil.line("# >Class:          sw-bug\n");
##	mil.line("# >Submitter-Id:   unknown\n");
##	mil.line("# >Arrival-Date:   Wed Feb 11 11:26:18 1998\n");
##	mil.line("# >Originator:     niels\n");
##	mil.line("# >Organization:\n");
##	mil.line("# CWI\n");
##	mil.line("# >Release:        971007\n");
##	mil.line("# >Environment:\n");
##	mil.line("# All\n");
##	mil.line("# >Description:\n");
##	mil.line("# Simple script \n");
##	mil.line("# a.insert(1,2);\n");
##	mil.line("# a.insert(2,1);\n");
##	mil.line("# a.thetajoin(a,LT).print();\n");
##	mil.line("# 2 1\n");
##	mil.line("# 2 2\n");
##	mil.line("# 1 1 \n");
##	mil.line("# 1 2\n");
##	mil.line("# Since this report was submitted, thetajoin has grown a 4th argument:\n");
##	mil.line("# the estimated length of the result\n");
##	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
##	mil.line("var a := bat.new(int,int);");
#	a := bat.new(nil:int,nil:int);
##	mil.line("a.insert(1,3);");
#	ca_a := bat.insert(a,1,3);
##	mil.line("a.insert(2,2);");
#	da_a := bat.insert(a,2,2);
##	mil.line("a.insert(3,1);");
#	ea_a := bat.insert(a,3,1);
##	mil.line("a.thetajoin(a,LT,calc.lng(nil)).print();");
#	LT:= -1;
#	fa_a := calc.lng(nil);
#	ga_a := algebra.thetajoin(a,a,LT,fa_a);
#	ha_a := io.print(ga_a);
##	mil.line("a.thetajoin(a,LE,calc.lng(nil)).print();");
#	LE:= -2;
#	ia_a := calc.lng(nil);
#	ja_a := algebra.thetajoin(a,a,LE,ia_a);
#	ka_a := io.print(ja_a);
##	mil.line("a.thetajoin(a,EQ,calc.lng(nil)).print();");
#	EQ:= 0;
#	la_a := calc.lng(nil);
#	ma_a := algebra.thetajoin(a,a,EQ,la_a);
#	na_a := io.print(ma_a);
##	mil.line("a.thetajoin(a,GE,calc.lng(nil)).print();");
#	GE:= 2;
#	oa_a := calc.lng(nil);
#	pa_a := algebra.thetajoin(a,a,GE,oa_a);
#	qa_a := io.print(pa_a);
##	mil.line("a.thetajoin(a,GT,calc.lng(nil)).print();");
#	GT:= 1;
#	ra_a := calc.lng(nil);
#	sa_a := algebra.thetajoin(a,a,GT,ra_a);
#	ta_a := io.print(sa_a);
##	mil.line("quit();");
#	ua_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  (_2:str)
#Predefined code segment 	# 3  (_3:str)
#The compiler can not guarantee an accurate compilation, 	# 4  (_4:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  (_5:str)
#A few guidelines to maximize usefullness. 	# 6  (_6:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  (_7:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  (_8:str)
#use the "mil_schema" for additional support routines 	# 9  (_9:str)
#	io.print("# >Number:         119\n"); 	# 10  (_10:str)
#	io.print("# >Category:       Module_kernel\n"); 	# 11  (_11:str)
#	io.print("# >Synopsis:       thetajoin gives incorrect output\n"); 	# 12  (_12:str)
#	io.print("# >Confidential:   no\n"); 	# 13  (_13:str)
#	io.print("# >Severity:       serious\n"); 	# 14  (_14:str)
#	io.print("# >Priority:       medium\n"); 	# 15  (_15:str)
#	io.print("# >Responsible:    boncz\n"); 	# 16  (_16:str)
#	io.print("# >State:          open\n"); 	# 17  (_17:str)
#	io.print("# >Class:          sw-bug\n"); 	# 18  (_18:str)
#	io.print("# >Submitter-Id:   unknown\n"); 	# 19  (_19:str)
#	io.print("# >Arrival-Date:   Wed Feb 11 11:26:18 1998\n"); 	# 20  (_20:str)
#	io.print("# >Originator:     niels\n"); 	# 21  (_21:str)
#	io.print("# >Organization:\n"); 	# 22  (_22:str)
#	io.print("# CWI\n"); 	# 23  (_23:str)
#	io.print("# >Release:        971007\n"); 	# 24  (_24:str)
#	io.print("# >Environment:\n"); 	# 25  (_25:str)
#	io.print("# All\n"); 	# 26  (_26:str)
#	io.print("# >Description:\n"); 	# 27  (_27:str)
#	io.print("# Simple script \n"); 	# 28  (_28:str)
#	io.print("# a.insert(1,2);\n"); 	# 29  (_29:str)
#	io.print("# a.insert(2,1);\n"); 	# 30  (_30:str)
#	io.print("# a.thetajoin(a,LT).print();\n"); 	# 31  (_31:str)
#	io.print("# 2 1\n"); 	# 32  (_32:str)
#	io.print("# 2 2\n"); 	# 33  (_33:str)
#	io.print("# 1 1 \n"); 	# 34  (_34:str)
#	io.print("# 1 2\n"); 	# 35  (_35:str)
#	io.print("# Since this report was submitted, thetajoin has grown a 4th argument:\n"); 	# 36  (_36:str)
#	io.print("# the estimated length of the result\n"); 	# 37  (_37:str)
#	io.print("setoid(oid(20000000));"); 	# 38  (_38:str)
    aa_a := calc.oid(20000000);	# 39 CALCint2oid (aa_a:oid)<-(_40:int)
    ba_a := calc.setoid(aa_a);	# 40 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	io.print("var a := bat.new(int,int);"); 	# 41  (_42:str)
    a := bat.new(nil:int,nil:int);	# 42 CMDBATnew (a:bat[:int,:int])<-(_44:int)(_44:int)
#	io.print("a.insert(1,3);"); 	# 43  (_45:str)
    ca_a := bat.insert(a,1,3);	# 44 BKCinsert_bun (ca_a:void)<-(a:bat[:int,:int])(_47:int)(_48:int)
#	io.print("a.insert(2,2);"); 	# 45  (_49:str)
    da_a := bat.insert(a,2,2);	# 46 BKCinsert_bun (da_a:void)<-(a:bat[:int,:int])(_51:int)(_51:int)
#	io.print("a.insert(3,1);"); 	# 47  (_52:str)
    ea_a := bat.insert(a,3,1);	# 48 BKCinsert_bun (ea_a:void)<-(a:bat[:int,:int])(_48:int)(_47:int)
#	io.print("a.thetajoin(a,LT,calc.lng(nil)).print();"); 	# 49  (_54:str)
    LT := -1;	# 50  (LT:int)<-(_56:int)
    fa_a := calc.lng(nil:void);	# 51 CALCnil2lng (fa_a:lng)<-(_58:void)
    ga_a := algebra.thetajoin(a,a,LT,fa_a);	# 52 ALGthetajoinEstimate (ga_a:bat[:int,:int])<-(a:bat[:int,:int])(a:bat[:int,:int])(LT:int)(fa_a:lng)
    ha_a := io.print(ga_a);	# 53 IOprint_val (ha_a:void)<-(ga_a:bat[:int,:int])
#	io.print("a.thetajoin(a,LE,calc.lng(nil)).print();"); 	# 54  (_61:str)
    LE := -2;	# 55  (LE:int)<-(_63:int)
    ia_a := calc.lng(nil:void);	# 56 CALCnil2lng (ia_a:lng)<-(_58:void)
    ja_a := algebra.thetajoin(a,a,LE,ia_a);	# 57 ALGthetajoinEstimate (ja_a:bat[:int,:int])<-(a:bat[:int,:int])(a:bat[:int,:int])(LE:int)(ia_a:lng)
    ka_a := io.print(ja_a);	# 58 IOprint_val (ka_a:void)<-(ja_a:bat[:int,:int])
#	io.print("a.thetajoin(a,EQ,calc.lng(nil)).print();"); 	# 59  (_67:str)
    EQ := 0;	# 60  (EQ:int)<-(_69:int)
    la_a := calc.lng(nil:void);	# 61 CALCnil2lng (la_a:lng)<-(_58:void)
    ma_a := algebra.thetajoin(a,a,EQ,la_a);	# 62 ALGthetajoinEstimate (ma_a:bat[:int,:int])<-(a:bat[:int,:int])(a:bat[:int,:int])(EQ:int)(la_a:lng)
    na_a := io.print(ma_a);	# 63 IOprint_val (na_a:void)<-(ma_a:bat[:int,:int])
#	io.print("a.thetajoin(a,GE,calc.lng(nil)).print();"); 	# 64  (_73:str)
    GE := 2;	# 65  (GE:int)<-(_51:int)
    oa_a := calc.lng(nil:void);	# 66 CALCnil2lng (oa_a:lng)<-(_58:void)
    pa_a := algebra.thetajoin(a,a,GE,oa_a);	# 67 ALGthetajoinEstimate (pa_a:bat[:int,:int])<-(a:bat[:int,:int])(a:bat[:int,:int])(GE:int)(oa_a:lng)
    qa_a := io.print(pa_a);	# 68 IOprint_val (qa_a:void)<-(pa_a:bat[:int,:int])
#	io.print("a.thetajoin(a,GT,calc.lng(nil)).print();"); 	# 69  (_78:str)
    GT := 1;	# 70  (GT:int)<-(_80:int)
    ra_a := calc.lng(nil:void);	# 71 CALCnil2lng (ra_a:lng)<-(_58:void)
    sa_a := algebra.thetajoin(a,a,GT,ra_a);	# 72 ALGthetajoinEstimate (sa_a:bat[:int,:int])<-(a:bat[:int,:int])(a:bat[:int,:int])(GT:int)(ra_a:lng)
    ta_a := io.print(sa_a);	# 73 IOprint_val (ta_a:void)<-(sa_a:bat[:int,:int])
#	io.print("quit();"); 	# 74  (_83:str)
    ua_a := clients.quit();	# 75 CLTquit (ua_a:void)
end main;	# 76  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  1	  ]
[ 3,	  2	  ]
[ 3,	  1	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 3,	  2	  ]
[ 3,	  1	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 3,	  3	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  3	  ]
[ 1,	  2	  ]
[ 1,	  1	  ]
[ 2,	  3	  ]
[ 2,	  2	  ]
[ 3,	  3	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  3	  ]
[ 1,	  2	  ]
[ 2,	  3	  ]

# 07:27:15 >  
# 07:27:15 >  Done.
# 07:27:15 >  

