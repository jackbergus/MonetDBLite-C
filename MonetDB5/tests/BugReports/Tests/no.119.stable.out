stdout of test 'no.119` in directory 'tests/BugReports` itself:


# 07:27:15 >  
# 07:27:15 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.119.mal < /dev/null
# 07:27:15 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# >Number:         119\n");
##	mil.line("# >Category:       Module_kernel\n");
##	mil.line("# >Synopsis:       thetajoin gives incorrect output\n");
##	mil.line("# >Confidential:   no\n");
##	mil.line("# >Severity:       serious\n");
##	mil.line("# >Priority:       medium\n");
##	mil.line("# >Responsible:    boncz\n");
##	mil.line("# >State:          open\n");
##	mil.line("# >Class:          sw-bug\n");
##	mil.line("# >Submitter-Id:   unknown\n");
##	mil.line("# >Arrival-Date:   Wed Feb 11 11:26:18 1998\n");
##	mil.line("# >Originator:     niels\n");
##	mil.line("# >Organization:\n");
##	mil.line("# CWI\n");
##	mil.line("# >Release:        971007\n");
##	mil.line("# >Environment:\n");
##	mil.line("# All\n");
##	mil.line("# >Description:\n");
##	mil.line("# Simple script \n");
##	mil.line("# a.insert(1,2);\n");
##	mil.line("# a.insert(2,1);\n");
##	mil.line("# a.thetajoin(a,LT).print();\n");
##	mil.line("# 2 1\n");
##	mil.line("# 2 2\n");
##	mil.line("# 1 1 \n");
##	mil.line("# 1 2\n");
##	mil.line("# Since this report was submitted, thetajoin has grown a 4th argument:\n");
##	mil.line("# the estimated length of the result\n");
##	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
##	mil.line("var a := bat.new(int,int);");
#	a := bat.new(nil:int,nil:int);
##	mil.line("a.insert(1,3);");
#	ca_a := bat.insert(a,1,3);
##	mil.line("a.insert(2,2);");
#	da_a := bat.insert(a,2,2);
##	mil.line("a.insert(3,1);");
#	ea_a := bat.insert(a,3,1);
##	mil.line("a.thetajoin(a,LT,calc.lng(nil)).print();");
#	LT:= -1;
#	fa_a := calc.lng(nil);
#	ga_a := algebra.thetajoin(a,a,LT,fa_a);
#	ha_a := io.print(ga_a);
##	mil.line("a.thetajoin(a,LE,calc.lng(nil)).print();");
#	LE:= -2;
#	ia_a := calc.lng(nil);
#	ja_a := algebra.thetajoin(a,a,LE,ia_a);
#	ka_a := io.print(ja_a);
##	mil.line("a.thetajoin(a,EQ,calc.lng(nil)).print();");
#	EQ:= 0;
#	la_a := calc.lng(nil);
#	ma_a := algebra.thetajoin(a,a,EQ,la_a);
#	na_a := io.print(ma_a);
##	mil.line("a.thetajoin(a,GE,calc.lng(nil)).print();");
#	GE:= 2;
#	oa_a := calc.lng(nil);
#	pa_a := algebra.thetajoin(a,a,GE,oa_a);
#	qa_a := io.print(pa_a);
##	mil.line("a.thetajoin(a,GT,calc.lng(nil)).print();");
#	GT:= 1;
#	ra_a := calc.lng(nil);
#	sa_a := algebra.thetajoin(a,a,GT,ra_a);
#	ta_a := io.print(sa_a);
##	mil.line("quit();");
#	ua_a := clients.quit();
#
function user.main():void;              #  0 main:void := user.main() {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("# >Number:         119\n"); 
#	io.print("# >Category:       Module_kernel\n"); 
#	io.print("# >Synopsis:       thetajoin gives incorrect output\n"); 
#	io.print("# >Confidential:   no\n"); 
#	io.print("# >Severity:       serious\n"); 
#	io.print("# >Priority:       medium\n"); 
#	io.print("# >Responsible:    boncz\n"); 
#	io.print("# >State:          open\n"); 
#	io.print("# >Class:          sw-bug\n"); 
#	io.print("# >Submitter-Id:   unknown\n"); 
#	io.print("# >Arrival-Date:   Wed Feb 11 11:26:18 1998\n"); 
#	io.print("# >Originator:     niels\n"); 
#	io.print("# >Organization:\n"); 
#	io.print("# CWI\n"); 
#	io.print("# >Release:        971007\n"); 
#	io.print("# >Environment:\n"); 
#	io.print("# All\n"); 
#	io.print("# >Description:\n"); 
#	io.print("# Simple script \n"); 
#	io.print("# a.insert(1,2);\n"); 
#	io.print("# a.insert(2,1);\n"); 
#	io.print("# a.thetajoin(a,LT).print();\n"); 
#	io.print("# 2 1\n"); 
#	io.print("# 2 2\n"); 
#	io.print("# 1 1 \n"); 
#	io.print("# 1 2\n"); 
#	io.print("# Since this report was submitted, thetajoin has grown a 4th argument:\n"); 
#	io.print("# the estimated length of the result\n"); 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         # 39 aa_a:oid := CALCint2oid(_40:int) 
    ba_a := calc.setoid(aa_a);          # 40 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("var a := bat.new(int,int);"); 
    a := bat.new(nil:int,nil:int);      # 42 a:bat[:int,:int] := CMDBATnew(_44:int, _44:int) {G}
#	io.print("a.insert(1,3);"); 
    ca_a := bat.insert(a,1,3);          # 44 ca_a:bat[:int,:int] := BKCinsert_bun(a:bat[:int,:int], _47:int, _48:int) {G}
#	io.print("a.insert(2,2);"); 
    da_a := bat.insert(a,2,2);          # 46 da_a:bat[:int,:int] := BKCinsert_bun(a:bat[:int,:int], _51:int, _51:int) {G}
#	io.print("a.insert(3,1);"); 
    ea_a := bat.insert(a,3,1);          # 48 ea_a:bat[:int,:int] := BKCinsert_bun(a:bat[:int,:int], _48:int, _47:int) {G}
#	io.print("a.thetajoin(a,LT,calc.lng(nil)).print();"); 
    LT := -1;                           # 50 LT:int := _56:int 
    fa_a := calc.lng(nil:void);         # 51 fa_a:lng := CALCnil2lng(_58:void) 
    ga_a := algebra.thetajoin(a,a,LT,fa_a);# 52 ga_a:bat[:int,:int] := ALGthetajoinEstimate(a:bat[:int,:int], a:bat[:int,:int], LT:int, fa_a:lng) {G}
    ha_a := io.print(ga_a);             # 53 ha_a:void := IOprint_val(ga_a:bat[:int,:int]) 
#	io.print("a.thetajoin(a,LE,calc.lng(nil)).print();"); 
    LE := -2;                           # 55 LE:int := _63:int 
    ia_a := calc.lng(nil:void);         # 56 ia_a:lng := CALCnil2lng(_58:void) 
    ja_a := algebra.thetajoin(a,a,LE,ia_a);# 57 ja_a:bat[:int,:int] := ALGthetajoinEstimate(a:bat[:int,:int], a:bat[:int,:int], LE:int, ia_a:lng) {G}
    ka_a := io.print(ja_a);             # 58 ka_a:void := IOprint_val(ja_a:bat[:int,:int]) 
#	io.print("a.thetajoin(a,EQ,calc.lng(nil)).print();"); 
    EQ := 0;                            # 60 EQ:int := _69:int 
    la_a := calc.lng(nil:void);         # 61 la_a:lng := CALCnil2lng(_58:void) 
    ma_a := algebra.thetajoin(a,a,EQ,la_a);# 62 ma_a:bat[:int,:int] := ALGthetajoinEstimate(a:bat[:int,:int], a:bat[:int,:int], EQ:int, la_a:lng) {G}
    na_a := io.print(ma_a);             # 63 na_a:void := IOprint_val(ma_a:bat[:int,:int]) 
#	io.print("a.thetajoin(a,GE,calc.lng(nil)).print();"); 
    GE := 2;                            # 65 GE:int := _51:int 
    oa_a := calc.lng(nil:void);         # 66 oa_a:lng := CALCnil2lng(_58:void) 
    pa_a := algebra.thetajoin(a,a,GE,oa_a);# 67 pa_a:bat[:int,:int] := ALGthetajoinEstimate(a:bat[:int,:int], a:bat[:int,:int], GE:int, oa_a:lng) {G}
    qa_a := io.print(pa_a);             # 68 qa_a:void := IOprint_val(pa_a:bat[:int,:int]) 
#	io.print("a.thetajoin(a,GT,calc.lng(nil)).print();"); 
    GT := 1;                            # 70 GT:int := _80:int 
    ra_a := calc.lng(nil:void);         # 71 ra_a:lng := CALCnil2lng(_58:void) 
    sa_a := algebra.thetajoin(a,a,GT,ra_a);# 72 sa_a:bat[:int,:int] := ALGthetajoinEstimate(a:bat[:int,:int], a:bat[:int,:int], GT:int, ra_a:lng) {G}
    ta_a := io.print(sa_a);             # 73 ta_a:void := IOprint_val(sa_a:bat[:int,:int]) 
#	io.print("quit();"); 
    ua_a := clients.quit();             # 75 ua_a:void := CLTquit() 
end main;	# 76  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  1	  ]
[ 3,	  2	  ]
[ 3,	  1	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 3,	  2	  ]
[ 3,	  1	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 3,	  3	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  3	  ]
[ 1,	  2	  ]
[ 1,	  1	  ]
[ 2,	  3	  ]
[ 2,	  2	  ]
[ 3,	  3	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  3	  ]
[ 1,	  2	  ]
[ 2,	  3	  ]

# 07:27:15 >  
# 07:27:15 >  Done.
# 07:27:15 >  

