stdout of test 'no.119` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.119 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.119.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.119.milS


# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux//var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
#include mil;
#include mil_scenario;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("# >Number:         119\n");
#	mil.line("# >Category:       Module_kernel");
#	mil.line("# >Category:       Module_kernel\n");
#	mil.line("# >Synopsis:       thetajoin gives incorrect output");
#	mil.line("# >Synopsis:       thetajoin gives incorrect output\n");
#	mil.line("# >Confidential:   no");
#	mil.line("# >Confidential:   no\n");
#	mil.line("# >Severity:       serious");
#	mil.line("# >Severity:       serious\n");
#	mil.line("# >Priority:       medium");
#	mil.line("# >Priority:       medium\n");
#	mil.line("# >Responsible:    boncz");
#	mil.line("# >Responsible:    boncz\n");
#	mil.line("# >State:          open");
#	mil.line("# >State:          open\n");
#	mil.line("# >Class:          sw-bug");
#	mil.line("# >Class:          sw-bug\n");
#	mil.line("# >Submitter-Id:   unknown");
#	mil.line("# >Submitter-Id:   unknown\n");
#	mil.line("# >Arrival-Date:   Wed Feb 11 11:26:18 1998");
#	mil.line("# >Arrival-Date:   Wed Feb 11 11:26:18 1998\n");
#	mil.line("# >Originator:     niels");
#	mil.line("# >Originator:     niels\n");
#	mil.line("# >Organization:");
#	mil.line("# >Organization:\n");
#	mil.line("# CWI");
#	mil.line("# CWI\n");
#	mil.line("# >Release:        971007");
#	mil.line("# >Release:        971007\n");
#	mil.line("# >Environment:");
#	mil.line("# >Environment:\n");
#	mil.line("# All");
#	mil.line("# All\n");
#	mil.line("# >Description:");
#	mil.line("# >Description:\n");
#	mil.line("# Simple script ");
#	mil.line("# Simple script \n");
#	mil.line("# a.insert(1,2);");
#	mil.line("# a.insert(1,2);\n");
#	mil.line("# a.insert(2,1);");
#	mil.line("# a.insert(2,1);\n");
#	mil.line("# a.thetajoin(a,LT).print();");
#	mil.line("# a.thetajoin(a,LT).print();\n");
#	mil.line("# 2 1");
#	mil.line("# 2 1\n");
#	mil.line("# 2 2");
#	mil.line("# 2 2\n");
#	mil.line("# 1 1 ");
#	mil.line("# 1 1 \n");
#	mil.line("# 1 2");
#	mil.line("# 1 2\n");
#	mil.line("");
#	mil.line("# Since this report was submitted, thetajoin has grown a 4th argument:\n");
#	mil.line("# the estimated length of the result");
#	mil.line("# the estimated length of the result\n");
#	mil.line("");
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("var a := new(int,int);");
#	a := new(nil:int,nil:int);
#	mil.line("a.insert(1,3);");
#	ca_a := insert(a,1,3);
#	mil.line("a.insert(2,2);");
#	da_a := insert(a,2,2);
#	mil.line("a.insert(3,1);");
#	ea_a := insert(a,3,1);
#	mil.line("a.thetajoin(a,LT,lng(nil)).print();");
#	LT:= mil.take("LT");
#	fa_a := lng(nil);
#	ga_a := thetajoin(a,a,LT,fa_a);
#	ha_a := print(ga_a);
#	mil.line("a.thetajoin(a,LE,lng(nil)).print();");
#	LE:= mil.take("LE");
#	ia_a := lng(nil);
#	ja_a := thetajoin(a,a,LE,ia_a);
#	ka_a := print(ja_a);
#	mil.line("a.thetajoin(a,EQ,lng(nil)).print();");
#	EQ:= mil.take("EQ");
#	la_a := lng(nil);
#	ma_a := thetajoin(a,a,EQ,la_a);
#	na_a := print(ma_a);
#	mil.line("a.thetajoin(a,GE,lng(nil)).print();");
#	GE:= mil.take("GE");
#	oa_a := lng(nil);
#	pa_a := thetajoin(a,a,GE,oa_a);
#	qa_a := print(pa_a);
#	mil.line("a.thetajoin(a,GT,lng(nil)).print();");
#	GT:= mil.take("GT");
#	ra_a := lng(nil);
#	sa_a := thetajoin(a,a,GT,ra_a);
#	ta_a := print(sa_a);
#	mil.line("quit();");
#	ua_a := quit();
#





function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
#include mil; 	# 2  (_2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 3  (_3:str)
#Predefined code segment 	# 4  (_4:str)
#The compiler can not guarantee an accurate compilation, 	# 5  (_5:str)
#because MIL unlike MAL is a dynamically typed language. 	# 6  (_6:str)
#A few guidelines to maximize usefullness. 	# 7  (_7:str)
#- make the type of variables explicit, in particular 'nil' 	# 8  (_8:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 9  (_9:str)
#use the "mil_schema" for additional support routines 	# 10  (_10:str)
#	mil.line("# >Number:         119\n"); 	# 11  (_11:str)
#	mil.line("# >Category:       Module_kernel\n"); 	# 12  (_12:str)
#	mil.line("# >Synopsis:       thetajoin gives incorrect output\n"); 	# 13  (_13:str)
#	mil.line("# >Confidential:   no\n"); 	# 14  (_14:str)
#	mil.line("# >Severity:       serious\n"); 	# 15  (_15:str)
#	mil.line("# >Priority:       medium\n"); 	# 16  (_16:str)
#	mil.line("# >Responsible:    boncz\n"); 	# 17  (_17:str)
#	mil.line("# >State:          open\n"); 	# 18  (_18:str)
#	mil.line("# >Class:          sw-bug\n"); 	# 19  (_19:str)
#	mil.line("# >Submitter-Id:   unknown\n"); 	# 20  (_20:str)
#	mil.line("# >Arrival-Date:   Wed Feb 11 11:26:18 1998\n"); 	# 21  (_21:str)
#	mil.line("# >Originator:     niels\n"); 	# 22  (_22:str)
#	mil.line("# >Organization:\n"); 	# 23  (_23:str)
#	mil.line("# CWI\n"); 	# 24  (_24:str)
#	mil.line("# >Release:        971007\n"); 	# 25  (_25:str)
#	mil.line("# >Environment:\n"); 	# 26  (_26:str)
#	mil.line("# All\n"); 	# 27  (_27:str)
#	mil.line("# >Description:\n"); 	# 28  (_28:str)
#	mil.line("# Simple script \n"); 	# 29  (_29:str)
#	mil.line("# a.insert(1,2);\n"); 	# 30  (_30:str)
#	mil.line("# a.insert(2,1);\n"); 	# 31  (_31:str)
#	mil.line("# a.thetajoin(a,LT).print();\n"); 	# 32  (_32:str)
#	mil.line("# 2 1\n"); 	# 33  (_33:str)
#	mil.line("# 2 2\n"); 	# 34  (_34:str)
#	mil.line("# 1 1 \n"); 	# 35  (_35:str)
#	mil.line("# 1 2\n"); 	# 36  (_36:str)
#	mil.line("# Since this report was submitted, thetajoin has grown a 4th argument:\n"); 	# 37  (_37:str)
#	mil.line("# the estimated length of the result\n"); 	# 38  (_38:str)
#	mil.line("setoid(oid(20000000));"); 	# 39  (_39:str)
    aa_a := calc.oid(20000000);	# 40 CALCint2oid (aa_a:oid)<-(_41:int)
    ba_a := calc.setoid(aa_a);	# 41 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	mil.line("var a := bat.new(int,int);"); 	# 42  (_43:str)
    a := bat.new(nil:int,nil:int);	# 43 CMDBATnew (a:bat[:int,:int])<-(_45:int)(_45:int)
#	mil.line("a.insert(1,3);"); 	# 44  (_46:str)
    ca_a := bat.insert(a,1,3);	# 45 BKCinsert_bun (ca_a:void)<-(a:bat[:int,:int])(_48:int)(_49:int)
#	mil.line("a.insert(2,2);"); 	# 46  (_50:str)
    da_a := bat.insert(a,2,2);	# 47 BKCinsert_bun (da_a:void)<-(a:bat[:int,:int])(_52:int)(_52:int)
#	mil.line("a.insert(3,1);"); 	# 48  (_53:str)
    ea_a := bat.insert(a,3,1);	# 49 BKCinsert_bun (ea_a:void)<-(a:bat[:int,:int])(_49:int)(_48:int)
#	mil.line("a.thetajoin(a,LT,calc.lng(nil)).print();"); 	# 50  (_55:str)
    LT := mil.take("LT");	# 51  unknown (LT:any)<-(_57:str)
    fa_a := calc.lng(nil);	# 52 CALCnil2lng (fa_a:lng)<-(_59:void)
    ga_a := algebra.thetajoin(a,a,LT,fa_a);	# 53 ALGthetajoinEstimate (ga_a:bat[:int,:int])<-(a:bat[:int,:int])(a:bat[:int,:int])(LT:any)(fa_a:lng)
    ha_a := io.print(ga_a);	# 54 IOprint_val (ha_a:int)<-(ga_a:bat[:int,:int])
#	mil.line("a.thetajoin(a,LE,calc.lng(nil)).print();"); 	# 55  (_62:str)
    LE := mil.take("LE");	# 56  unknown (LE:any)<-(_64:str)
    ia_a := calc.lng(nil);	# 57 CALCnil2lng (ia_a:lng)<-(_59:void)
    ja_a := algebra.thetajoin(a,a,LE,ia_a);	# 58 ALGthetajoinEstimate (ja_a:bat[:int,:int])<-(a:bat[:int,:int])(a:bat[:int,:int])(LE:any)(ia_a:lng)
    ka_a := io.print(ja_a);	# 59 IOprint_val (ka_a:int)<-(ja_a:bat[:int,:int])
#	mil.line("a.thetajoin(a,EQ,calc.lng(nil)).print();"); 	# 60  (_68:str)
    EQ := mil.take("EQ");	# 61  unknown (EQ:any)<-(_70:str)
    la_a := calc.lng(nil);	# 62 CALCnil2lng (la_a:lng)<-(_59:void)
    ma_a := algebra.thetajoin(a,a,EQ,la_a);	# 63 ALGthetajoinEstimate (ma_a:bat[:int,:int])<-(a:bat[:int,:int])(a:bat[:int,:int])(EQ:any)(la_a:lng)
    na_a := io.print(ma_a);	# 64 IOprint_val (na_a:int)<-(ma_a:bat[:int,:int])
#	mil.line("a.thetajoin(a,GE,calc.lng(nil)).print();"); 	# 65  (_74:str)
    GE := mil.take("GE");	# 66  unknown (GE:any)<-(_76:str)
    oa_a := calc.lng(nil);	# 67 CALCnil2lng (oa_a:lng)<-(_59:void)
    pa_a := algebra.thetajoin(a,a,GE,oa_a);	# 68 ALGthetajoinEstimate (pa_a:bat[:int,:int])<-(a:bat[:int,:int])(a:bat[:int,:int])(GE:any)(oa_a:lng)
    qa_a := io.print(pa_a);	# 69 IOprint_val (qa_a:int)<-(pa_a:bat[:int,:int])
#	mil.line("a.thetajoin(a,GT,calc.lng(nil)).print();"); 	# 70  (_80:str)
    GT := mil.take("GT");	# 71  unknown (GT:any)<-(_82:str)
    ra_a := calc.lng(nil);	# 72 CALCnil2lng (ra_a:lng)<-(_59:void)
    sa_a := algebra.thetajoin(a,a,GT,ra_a);	# 73 ALGthetajoinEstimate (sa_a:bat[:int,:int])<-(a:bat[:int,:int])(a:bat[:int,:int])(GT:any)(ra_a:lng)
    ta_a := io.print(sa_a);	# 74 IOprint_val (ta_a:int)<-(sa_a:bat[:int,:int])
#	mil.line("quit();"); 	# 75  (_86:str)
    ua_a := clients.quit();	# 76 CLTquit (ua_a:void)
end main;	# 77  

# 17:06:57 >  
# 17:06:57 >  Done.
# 17:06:57 >  

