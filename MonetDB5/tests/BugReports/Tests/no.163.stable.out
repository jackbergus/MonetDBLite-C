stdout of test 'no.163` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.163 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.163.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.163.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.

# >Number:         163
# >Category:       MIL
# >Synopsis:       multi[lex bug
# >Confidential:   no
# >Severity:       serious
# >Priority:       medium
# >Responsible:    boncz (Peter Boncz)
# >State:          open
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Mon Jul 20 09:56:02 1998
# >Originator:     manegold@cwi.nl
# >Organization:
# >Release:        980101
# >Environment:
# any
# >Description:
# Tim Ruhl (DDi) reported this bug:
# 
# The following script fails with "GDKmalloc called with size 0".
# (cf. output below)
# 
# -8<-----
# 
# proc tst(BAT[any, int] b) :=
# {  
#   var i;
# 
#   i := 0;
#	mil.line("  i := 0;");
#barrier	ca_a := true;
#barrier	da_a := <(i,2);
#	mil.line("  while (i < 2) {");
#	b := multiplex.tactics("+",b,1);
#	mil.line("    b := [+](b, 1);");
#	i := +(i,1);
#	mil.line("    i := i + 1;");
#redo	ca_a;
#exit	da_a;
#exit	ca_a;
#	mil.line("");
#	return ea_a :=b;
#end tst;
function user.tst(b:bat[:any_1,:int]):bat[:any_1,:int];	# 0  dynamic (tst:bat[:any_1,:int])<-(b:bat[:any_1,:int])
    mil.line("");	# 1 MILline (_2:void)<-(_3:str)
    i := 0;	# 2  (i:int)<-(_5:int)
    mil.line("  i := 0;");	# 3 MILline (_6:void)<-(_7:str)
barrier ca_a := true;	# 4  (ca_a:bit)<-(_9:bit) jump 13
barrier da_a := calc.<(i,2);	# 5 CALCcompLTintint (da_a:bit)<-(i:int)(_11:int) jump 12
    mil.line("  while (i < 2) {");	# 6 MILline (_12:void)<-(_13:str)
    b := batcalc.+(b,1);	# 7 CMDbatADDcst (b:bat[:any_1,:int])<-(b:bat[:any_1,:int])(_14:int)
    mil.line("    b := [+](b, 1);");	# 8 MILline (_15:void)<-(_16:str)
    i := calc.+(i,1);	# 9 CALCbinaryADDintint (i:int)<-(i:int)(_14:int)
    mil.line("    i := i + 1;");	# 10 MILline (_17:void)<-(_18:str)
    redo ca_a;	# 11  (ca_a:bit) jump 5
exit da_a;	# 12  (da_a:bit)
exit ca_a;	# 13  (ca_a:bit)
    mil.line("");	# 14 MILline (_19:void)<-(_3:str)
    return ea_a := b;	# 15  (ea_a:bat[:any_1,:int])<-(b:bat[:any_1,:int])
end tst;	# 16  
#	mil.line("");
#	b1 := bbp.new(nil:int,nil:int);
#	mil.line("var b1 := bbp.new(int, int);");
#	fa_a := bat.insert(b1,0,0);
#	mil.line("b1.insert(0, 0);");
#	ga_a := insert(b1,0,1);
#	mil.line("");
# bn := tst(b1);
#	mil.line("var bn := tst(b1);  ");
#	ha_a := print(bn);
#	mil.line("");
#	ia_a := quit();
#
function user.main():int;	# 0  (main:int)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  (_32:str)
#Predefined code segment 	# 2  (_34:str)
#The compiler can not guarantee an accurate compilation, 	# 3  (_36:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  (_38:str)
#A few guidelines to maximize usefullness. 	# 5  (_40:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  (_42:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  (_44:str)
#use the "mil_schema" for additional support routines 	# 8  (_46:str)
    mil.line("# >Number:         163\n");	# 9 MILline (_47:void)<-(_48:str)
    mil.line("# >Category:       MIL\n");	# 10 MILline (_49:void)<-(_50:str)
    mil.line("# >Synopsis:       multi[lex bug\n");	# 11 MILline (_51:void)<-(_52:str)
    mil.line("# >Confidential:   no\n");	# 12 MILline (_53:void)<-(_54:str)
    mil.line("# >Severity:       serious\n");	# 13 MILline (_55:void)<-(_56:str)
    mil.line("# >Priority:       medium\n");	# 14 MILline (_57:void)<-(_58:str)
    mil.line("# >Responsible:    boncz (Peter Boncz)\n");	# 15 MILline (_59:void)<-(_60:str)
    mil.line("# >State:          open\n");	# 16 MILline (_61:void)<-(_62:str)
    mil.line("# >Class:          sw-bug\n");	# 17 MILline (_63:void)<-(_64:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 18 MILline (_65:void)<-(_66:str)
    mil.line("# >Arrival-Date:   Mon Jul 20 09:56:02 1998\n");	# 19 MILline (_67:void)<-(_68:str)
    mil.line("# >Originator:     manegold@cwi.nl\n");	# 20 MILline (_69:void)<-(_70:str)
    mil.line("# >Organization:\n");	# 21 MILline (_71:void)<-(_72:str)
    mil.line("# >Release:        980101\n");	# 22 MILline (_73:void)<-(_74:str)
    mil.line("# >Environment:\n");	# 23 MILline (_75:void)<-(_76:str)
    mil.line("# any\n");	# 24 MILline (_77:void)<-(_78:str)
    mil.line("# >Description:\n");	# 25 MILline (_79:void)<-(_80:str)
    mil.line("# Tim Ruhl (DDi) reported this bug:\n");	# 26 MILline (_81:void)<-(_82:str)
    mil.line("# \n");	# 27 MILline (_83:void)<-(_84:str)
    mil.line("# The following script fails with \"GDKmalloc called with size 0\".\n");	# 28 MILline (_85:void)<-(_86:str)
    mil.line("# (cf. output below)\n");	# 29 MILline (_87:void)<-(_88:str)
    mil.line("# \n");	# 30 MILline (_89:void)<-(_84:str)
    mil.line("# -8<-----\n");	# 31 MILline (_90:void)<-(_91:str)
    mil.line("# \n");	# 32 MILline (_92:void)<-(_84:str)
    mil.line("# proc tst(BAT[any, int] b) : bat\n");	# 33 MILline (_93:void)<-(_94:str)
    mil.line("# {  \n");	# 34 MILline (_95:void)<-(_96:str)
    mil.line("#   var i;\n");	# 35 MILline (_97:void)<-(_98:str)
    mil.line("# \n");	# 36 MILline (_99:void)<-(_84:str)
    mil.line("#   i := 0;\n");	# 37 MILline (_100:void)<-(_101:str)
    mil.line("#   while (i < 2) {\n");	# 38 MILline (_102:void)<-(_103:str)
    mil.line("#     b := [+](b, 1);\n");	# 39 MILline (_104:void)<-(_105:str)
    mil.line("#     i := i + 1;\n");	# 40 MILline (_106:void)<-(_107:str)
    mil.line("#   }\n");	# 41 MILline (_108:void)<-(_109:str)
    mil.line("# \n");	# 42 MILline (_110:void)<-(_84:str)
    mil.line("#   return b;\n");	# 43 MILline (_111:void)<-(_112:str)
    mil.line("# }\n");	# 44 MILline (_113:void)<-(_114:str)
    mil.line("# \n");	# 45 MILline (_115:void)<-(_84:str)
    mil.line("# b1 := bat.new(int, int);\n");	# 46 MILline (_116:void)<-(_117:str)
    mil.line("# b1.insert(0, 0);\n");	# 47 MILline (_118:void)<-(_119:str)
    mil.line("# b1.insert(0, 1);\n");	# 48 MILline (_120:void)<-(_121:str)
    mil.line("# \n");	# 49 MILline (_122:void)<-(_123:str)
    mil.line("# bn := tst(b1);\n");	# 50 MILline (_124:void)<-(_125:str)
    mil.line("# bn.print;\n");	# 51 MILline (_126:void)<-(_127:str)
    mil.line("# \n");	# 52 MILline (_128:void)<-(_123:str)
    mil.line("# quit;\n");	# 53 MILline (_129:void)<-(_130:str)
    mil.line("# \n");	# 54 MILline (_131:void)<-(_123:str)
    mil.line("# -8<-----\n");	# 55 MILline (_132:void)<-(_133:str)
    mil.line("# \n");	# 56 MILline (_134:void)<-(_123:str)
    mil.line("# # Monet Database Server V4.0 (IRIX5.3/32bit) of Fri Jul 17 21:30:49 MET DST 1998\n");	# 57 MILline (_135:void)<-(_136:str)
    mil.line("# # Copyright (c) 1993-1998, CWI & SION. All rights reserved.\n");	# 58 MILline (_137:void)<-(_138:str)
    mil.line("# #script:../tim.mil\n");	# 59 MILline (_139:void)<-(_140:str)
    mil.line("# \n");	# 60 MILline (_141:void)<-(_123:str)
    mil.line("# loaded;\n");	# 61 MILline (_142:void)<-(_143:str)
    mil.line("# #---------------------------------#\n");	# 62 MILline (_144:void)<-(_145:str)
    mil.line("# # module        | usage_count     #\n");	# 63 MILline (_146:void)<-(_147:str)
    mil.line("# #---------------------------------#\n");	# 64 MILline (_148:void)<-(_145:str)
    mil.line("# [ \"kernel\",       1               ]\n");	# 65 MILline (_149:void)<-(_150:str)
    mil.line("# [ \"arith\",        1               ]\n");	# 66 MILline (_151:void)<-(_152:str)
    mil.line("# [ \"bat\",          1               ]\n");	# 67 MILline (_153:void)<-(_154:str)
    mil.line("# [ \"algebra\",      1               ]\n");	# 68 MILline (_155:void)<-(_156:str)
    mil.line("# [ \"sys\",          1               ]\n");	# 69 MILline (_157:void)<-(_158:str)
    mil.line("# [ \"trans\",        1               ]\n");	# 70 MILline (_159:void)<-(_160:str)
    mil.line("# \n");	# 71 MILline (_161:void)<-(_162:str)
    mil.line("# Try: modules;                - for other modules.\n");	# 72 MILline (_163:void)<-(_164:str)
    mil.line("#      ls;                     - for persistent bat listing.\n");	# 73 MILline (_165:void)<-(_166:str)
    mil.line("#      sigs(\"<module>\")        - for available commands per module.\n");	# 74 MILline (_167:void)<-(_168:str)
    mil.line("#      help(\"<command>\")       - for help one-liner for a command.\n");	# 75 MILline (_169:void)<-(_170:str)
    mil.line("# \n");	# 76 MILline (_171:void)<-(_162:str)
    mil.line("# #You are system administrator (adm)!\n");	# 77 MILline (_172:void)<-(_173:str)
    mil.line("#  \n");	# 78 MILline (_174:void)<-(_175:str)
    mil.line("# proc tst(BAT[any, int] b) : bat\n");	# 79 MILline (_176:void)<-(_177:str)
    mil.line("# {\n");	# 80 MILline (_178:void)<-(_179:str)
    mil.line("#   var i;\n");	# 81 MILline (_180:void)<-(_181:str)
    mil.line("# \n");	# 82 MILline (_182:void)<-(_162:str)
    mil.line("#   i := 0;\n");	# 83 MILline (_183:void)<-(_184:str)
    mil.line("#   while (i < 2) {\n");	# 84 MILline (_185:void)<-(_186:str)
    mil.line("#     b := [+](b, 1);\n");	# 85 MILline (_187:void)<-(_188:str)
    mil.line("#     i := i + 1;\n");	# 86 MILline (_189:void)<-(_190:str)
    mil.line("#   }\n");	# 87 MILline (_191:void)<-(_192:str)
    mil.line("# \n");	# 88 MILline (_193:void)<-(_162:str)
    mil.line("#   return b;\n");	# 89 MILline (_194:void)<-(_195:str)
    mil.line("# }\n");	# 90 MILline (_196:void)<-(_197:str)
    mil.line("# \n");	# 91 MILline (_198:void)<-(_199:str)
    mil.line("# b1 := bat.new(int, int);\n");	# 92 MILline (_200:void)<-(_201:str)
    mil.line("# b1.insert(0, 0);\n");	# 93 MILline (_202:void)<-(_203:str)
    mil.line("# b1.insert(0, 1);\n");	# 94 MILline (_204:void)<-(_205:str)
    mil.line("# \n");	# 95 MILline (_206:void)<-(_199:str)
    mil.line("# bn := tst(b1);\n");	# 96 MILline (_207:void)<-(_208:str)
    mil.line("# GDKmalloc called with size 0\n");	# 97 MILline (_209:void)<-(_210:str)
    mil.line("# \n");	# 98 MILline (_211:void)<-(_199:str)
    mil.line("# -8<-----\n");	# 99 MILline (_212:void)<-(_213:str)
    mil.line("# \n");	# 100 MILline (_214:void)<-(_199:str)
    mil.line("# As Tim sais, it has probably to do with rewriting the\n");	# 101 MILline (_215:void)<-(_216:str)
    mil.line("# MIL parse tree after the first iteration of the while loop.\n");	# 102 MILline (_217:void)<-(_218:str)
    mil.line("# \n");	# 103 MILline (_219:void)<-(_199:str)
    mil.line("# ========\n");	# 104 MILline (_220:void)<-(_221:str)
    mil.line("# \n");	# 105 MILline (_222:void)<-(_199:str)
    mil.line("# As I just noticed, similar (the same?) bugs have already been\n");	# 106 MILline (_223:void)<-(_224:str)
    mil.line("# reported in bug reports #117 & #156.\n");	# 107 MILline (_225:void)<-(_226:str)
    mil.line("# \n");	# 108 MILline (_227:void)<-(_199:str)
    mil.line("#\t\tStefan\n");	# 109 MILline (_228:void)<-(_229:str)
    mil.line("");	# 110 MILline (_230:void)<-(_231:str)
    aa_a := calc.oid(20000000);	# 111 CALCint2oid (aa_a:oid)<-(_233:int)
    ba_a := calc.setoid(aa_a);	# 112 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("");	# 113 MILline (_235:void)<-(_231:str)
    mil.line("");	# 114 MILline (_236:void)<-(_231:str)
    b1 := bat.new(nil:int,nil:int);	# 115 CMDBATnew (b1:bat[:int,:int])<-(_238:int)(_238:int)
    mil.line("var b1 := bat.new(int, int);");	# 116 MILline (_239:void)<-(_240:str)
    fa_a := bat.insert(b1,0,0);	# 117 BKCinsert_bun (fa_a:bat[:int,:int])<-(b1:bat[:int,:int])(_242:int)(_242:int)
    mil.line("b1.insert(0, 0);");	# 118 MILline (_243:void)<-(_244:str)
    ga_a := bat.insert(b1,0,1);	# 119 BKCinsert_bun (ga_a:bat[:int,:int])<-(b1:bat[:int,:int])(_242:int)(_246:int)
    mil.line("");	# 120 MILline (_247:void)<-(_231:str)
    bn := user.tst(b1);	# 121  (bn:bat[:int,:int])<-(b1:bat[:int,:int])
    mil.line("var bn := tst(b1);  ");	# 122 MILline (_249:void)<-(_250:str)
    ha_a := io.print(bn);	# 123 IOprint_val (ha_a:int)<-(bn:bat[:int,:int])
    mil.line("");	# 124 MILline (_252:void)<-(_231:str)
    ia_a := clients.quit();	# 125 CLTquit (ia_a:void)
end main;	# 126  
## >Number:         163\n
## >Category:       MIL\n
## >Synopsis:       multi[lex bug\n
## >Confidential:   no\n
## >Severity:       serious\n
## >Priority:       medium\n
## >Responsible:    boncz (Peter Boncz)\n
## >State:          open\n
## >Class:          sw-bug\n
## >Submitter-Id:   unknown\n
## >Arrival-Date:   Mon Jul 20 09:56:02 1998\n
## >Originator:     manegold@cwi.nl\n
## >Organization:\n
## >Release:        980101\n
## >Environment:\n
## any\n
## >Description:\n
## Tim Ruhl (DDi) reported this bug:\n
## \n
## The following script fails with \"GDKmalloc called with size 0\".\n
## (cf. output below)\n
## \n
## -8<-----\n
## \n
## proc tst(BAT[any, int] b) : bat\n
## {  \n
##   var i;\n
## \n
##   i := 0;\n
##   while (i < 2) {\n
##     b := [+](b, 1);\n
##     i := i + 1;\n
##   }\n
## \n
##   return b;\n
## }\n
## \n
## b1 := bbp.new(int, int);\n
## b1.insert(0, 0);\n
## b1.insert(0, 1);\n
## \n
## bn := tst(b1);\n
## bn.print;\n
## \n
## quit;\n
## \n
## -8<-----\n
## \n
## # Monet Database Server V4.0 (IRIX5.3/32bit) of Fri Jul 17 21:30:49 MET DST 1998\n
## # Copyright (c) 1993-1998, CWI & SION. All rights reserved.\n
## #script:../tim.mil\n
## \n
## loaded;\n
## #---------------------------------#\n
## # module        | usage_count     #\n
## #---------------------------------#\n
## [ \"kernel\",       1               ]\n
## [ \"arith\",        1               ]\n
## [ \"bat\",          1               ]\n
## [ \"algebra\",      1               ]\n
## [ \"sys\",          1               ]\n
## [ \"trans\",        1               ]\n
## \n
## Try: modules;                - for other modules.\n
##      ls;                     - for persistent bat listing.\n
##      sigs(\"<module>\")        - for available commands per module.\n
##      help(\"<command>\")       - for help one-liner for a command.\n
## \n
## #You are system administrator (adm)!\n
##  \n
## proc tst(BAT[any, int] b) : bat\n
## {\n
##   var i;\n
## \n
##   i := 0;\n
##   while (i < 2) {\n
##     b := [+](b, 1);\n
##     i := i + 1;\n
##   }\n
## \n
##   return b;\n
## }\n
## \n
## b1 := bbp.new(int, int);\n
## b1.insert(0, 0);\n
## b1.insert(0, 1);\n
## \n
## bn := tst(b1);\n
## GDKmalloc called with size 0\n
## \n
## -8<-----\n
## \n
## As Tim sais, it has probably to do with rewriting the\n
## MIL parse tree after the first iteration of the while loop.\n
## \n
## ========\n
## \n
## As I just noticed, similar (the same\?) bugs have already been\n
## reported in bug reports #117 & #156.\n
## \n
##\t\tStefan\n
#
#
#
#var b1 := bbp.new(int, int);
#b1.insert(0, 0);
#
#
#  i := 0;
#  while (i < 2) {
#    b := [+](b, 1);
#    i := i + 1;
#  while (i < 2) {
#    b := [+](b, 1);
#    i := i + 1;
#
#var bn := tst(b1);  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 0,	  2	  ]
[ 0,	  3	  ]
#

# 14:17:57 >  
# 14:17:57 >  Done.
# 14:17:57 >  

