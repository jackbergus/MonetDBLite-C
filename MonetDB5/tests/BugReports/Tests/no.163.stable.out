stdout of test 'no.163` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.163 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.163.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.163.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.

# >Number:         163
# >Category:       MIL
# >Synopsis:       multi[lex bug
# >Confidential:   no
# >Severity:       serious
# >Priority:       medium
# >Responsible:    boncz (Peter Boncz)
# >State:          open
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Mon Jul 20 09:56:02 1998
# >Originator:     manegold@cwi.nl
# >Organization:
# >Release:        980101
# >Environment:
# any
# >Description:
# Tim Ruhl (DDi) reported this bug:
# 
# The following script fails with "GDKmalloc called with size 0".
# (cf. output below)
# 
# -8<-----
# 
# proc tst(BAT[any, int] b) :=
# {  
#   var i;
# 
#   i := 0;
#	mil.line("  i := 0;");
#barrier	ca_a := true;
#barrier	da_a := <(i,2);
#	mil.line("  while (i < 2) {");
#	b := multiplex.tactics("+",b,1);
#	mil.line("    b := [+](b, 1);");
#	i := +(i,1);
#	mil.line("    i := i + 1;");
#redo	ca_a;
#exit	da_a;
#exit	ca_a;
#	mil.line("");
#	return ea_a :=b;
#end tst;
function user.tst(b:bat[:any_1,:int]):bat[:any_1,:int];	# 0  dynamic (tst:bat[:any_1,:int])<-(b:bat[:any_1,:int])
#	mil.line(""); 	# 1  (_2:str)
    i := 0;	# 2  (i:int)<-(_4:int)
#	mil.line("  i := 0;"); 	# 3  (_5:str)
barrier ca_a := true;	# 4  (ca_a:bit)<-(_7:bit) jump 13
barrier da_a := calc.<(i,2);	# 5 CALCcompLTintint (da_a:bit)<-(i:int)(_9:int) jump 12
#	mil.line("  while (i < 2) {"); 	# 6  (_10:str)
    b := batcalc.+(b,1);	# 7 CMDbatADDcst_int_int_int (b:bat[:any_1,:int])<-(b:bat[:any_1,:int])(_11:int)
#	mil.line("    b := [+](b, 1);"); 	# 8  (_12:str)
    i := calc.+(i,1);	# 9 CALCbinaryADDintint (i:int)<-(i:int)(_11:int)
#	mil.line("    i := i + 1;"); 	# 10  (_13:str)
    redo ca_a;	# 11  (ca_a:bit) jump 5
exit da_a;	# 12  (da_a:bit)
exit ca_a;	# 13  (ca_a:bit)
#	mil.line(""); 	# 14  (_2:str)
    return ea_a := b;	# 15  (ea_a:bat[:any_1,:int])<-(b:bat[:any_1,:int])
end tst;	# 16  
#	mil.line("");
#	b1 := bbp.new(nil:int,nil:int);
#	mil.line("var b1 := bbp.new(int, int);");
#	fa_a := bat.insert(b1,0,0);
#	mil.line("b1.insert(0, 0);");
#	ga_a := insert(b1,0,1);
#	mil.line("");
# bn := tst(b1);
#	mil.line("var bn := tst(b1);  ");
#	ha_a := print(bn);
#	mil.line("");
#	ia_a := quit();
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
#include mil; 	# 2  (_2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 3  (_3:str)
#Predefined code segment 	# 4  (_4:str)
#The compiler can not guarantee an accurate compilation, 	# 5  (_5:str)
#because MIL unlike MAL is a dynamically typed language. 	# 6  (_6:str)
#A few guidelines to maximize usefullness. 	# 7  (_7:str)
#- make the type of variables explicit, in particular 'nil' 	# 8  (_8:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 9  (_9:str)
#use the "mil_schema" for additional support routines 	# 10  (_10:str)
#	mil.line("# >Number:         163\n"); 	# 11  (_11:str)
#	mil.line("# >Category:       MIL\n"); 	# 12  (_12:str)
#	mil.line("# >Synopsis:       multi[lex bug\n"); 	# 13  (_13:str)
#	mil.line("# >Confidential:   no\n"); 	# 14  (_14:str)
#	mil.line("# >Severity:       serious\n"); 	# 15  (_15:str)
#	mil.line("# >Priority:       medium\n"); 	# 16  (_16:str)
#	mil.line("# >Responsible:    boncz (Peter Boncz)\n"); 	# 17  (_17:str)
#	mil.line("# >State:          open\n"); 	# 18  (_18:str)
#	mil.line("# >Class:          sw-bug\n"); 	# 19  (_19:str)
#	mil.line("# >Submitter-Id:   unknown\n"); 	# 20  (_20:str)
#	mil.line("# >Arrival-Date:   Mon Jul 20 09:56:02 1998\n"); 	# 21  (_21:str)
#	mil.line("# >Originator:     manegold@cwi.nl\n"); 	# 22  (_22:str)
#	mil.line("# >Organization:\n"); 	# 23  (_23:str)
#	mil.line("# >Release:        980101\n"); 	# 24  (_24:str)
#	mil.line("# >Environment:\n"); 	# 25  (_25:str)
#	mil.line("# any\n"); 	# 26  (_26:str)
#	mil.line("# >Description:\n"); 	# 27  (_27:str)
#	mil.line("# Tim Ruhl (DDi) reported this bug:\n"); 	# 28  (_28:str)
#	mil.line("# \n"); 	# 29  (_29:str)
#	mil.line("# The following script fails with \"GDKmalloc called with size 0\".\n"); 	# 30  (_30:str)
#	mil.line("# (cf. output below)\n"); 	# 31  (_31:str)
#	mil.line("# \n"); 	# 32  (_29:str)
#	mil.line("# -8<-----\n"); 	# 33  (_32:str)
#	mil.line("# \n"); 	# 34  (_29:str)
#	mil.line("# proc tst(BAT[any, int] b) : bat\n"); 	# 35  (_33:str)
#	mil.line("# {  \n"); 	# 36  (_34:str)
#	mil.line("#   var i;\n"); 	# 37  (_35:str)
#	mil.line("# \n"); 	# 38  (_29:str)
#	mil.line("#   i := 0;\n"); 	# 39  (_36:str)
#	mil.line("#   while (i < 2) {\n"); 	# 40  (_37:str)
#	mil.line("#     b := [+](b, 1);\n"); 	# 41  (_38:str)
#	mil.line("#     i := i + 1;\n"); 	# 42  (_39:str)
#	mil.line("#   }\n"); 	# 43  (_40:str)
#	mil.line("# \n"); 	# 44  (_29:str)
#	mil.line("#   return b;\n"); 	# 45  (_41:str)
#	mil.line("# }\n"); 	# 46  (_42:str)
#	mil.line("# \n"); 	# 47  (_29:str)
#	mil.line("# b1 := bat.new(int, int);\n"); 	# 48  (_43:str)
#	mil.line("# b1.insert(0, 0);\n"); 	# 49  (_44:str)
#	mil.line("# b1.insert(0, 1);\n"); 	# 50  (_45:str)
#	mil.line("# \n"); 	# 51  (_29:str)
#	mil.line("# bn := tst(b1);\n"); 	# 52  (_46:str)
#	mil.line("# bn.print;\n"); 	# 53  (_47:str)
#	mil.line("# \n"); 	# 54  (_29:str)
#	mil.line("# quit;\n"); 	# 55  (_48:str)
#	mil.line("# \n"); 	# 56  (_29:str)
#	mil.line("# -8<-----\n"); 	# 57  (_32:str)
#	mil.line("# \n"); 	# 58  (_29:str)
#	mil.line("# # Monet Database Server V4.0 (IRIX5.3/32bit) of Fri Jul 17 21:30:49 MET DST 1998\n"); 	# 59  (_49:str)
#	mil.line("# # Copyright (c) 1993-1998, CWI & SION. All rights reserved.\n"); 	# 60  (_50:str)
#	mil.line("# #script:../tim.mil\n"); 	# 61  (_51:str)
#	mil.line("# \n"); 	# 62  (_29:str)
#	mil.line("# loaded;\n"); 	# 63  (_52:str)
#	mil.line("# #---------------------------------#\n"); 	# 64  (_53:str)
#	mil.line("# # module        | usage_count     #\n"); 	# 65  (_54:str)
#	mil.line("# #---------------------------------#\n"); 	# 66  (_53:str)
#	mil.line("# [ \"kernel\",       1               ]\n"); 	# 67  (_55:str)
#	mil.line("# [ \"arith\",        1               ]\n"); 	# 68  (_56:str)
#	mil.line("# [ \"bat\",          1               ]\n"); 	# 69  (_57:str)
#	mil.line("# [ \"algebra\",      1               ]\n"); 	# 70  (_58:str)
#	mil.line("# [ \"sys\",          1               ]\n"); 	# 71  (_59:str)
#	mil.line("# [ \"trans\",        1               ]\n"); 	# 72  (_60:str)
#	mil.line("# \n"); 	# 73  (_29:str)
#	mil.line("# Try: modules;                - for other modules.\n"); 	# 74  (_61:str)
#	mil.line("#      ls;                     - for persistent bat listing.\n"); 	# 75  (_62:str)
#	mil.line("#      sigs(\"<module>\")        - for available commands per module.\n"); 	# 76  (_63:str)
#	mil.line("#      help(\"<command>\")       - for help one-liner for a command.\n"); 	# 77  (_64:str)
#	mil.line("# \n"); 	# 78  (_29:str)
#	mil.line("# #You are system administrator (adm)!\n"); 	# 79  (_65:str)
#	mil.line("#  \n"); 	# 80  (_66:str)
#	mil.line("# proc tst(BAT[any, int] b) : bat\n"); 	# 81  (_33:str)
#	mil.line("# {\n"); 	# 82  (_67:str)
#	mil.line("#   var i;\n"); 	# 83  (_35:str)
#	mil.line("# \n"); 	# 84  (_68:str)
#	mil.line("#   i := 0;\n"); 	# 85  (_36:str)
#	mil.line("#   while (i < 2) {\n"); 	# 86  (_37:str)
#	mil.line("#     b := [+](b, 1);\n"); 	# 87  (_38:str)
#	mil.line("#     i := i + 1;\n"); 	# 88  (_39:str)
#	mil.line("#   }\n"); 	# 89  (_40:str)
#	mil.line("# \n"); 	# 90  (_68:str)
#	mil.line("#   return b;\n"); 	# 91  (_41:str)
#	mil.line("# }\n"); 	# 92  (_42:str)
#	mil.line("# \n"); 	# 93  (_68:str)
#	mil.line("# b1 := bat.new(int, int);\n"); 	# 94  (_43:str)
#	mil.line("# b1.insert(0, 0);\n"); 	# 95  (_44:str)
#	mil.line("# b1.insert(0, 1);\n"); 	# 96  (_45:str)
#	mil.line("# \n"); 	# 97  (_68:str)
#	mil.line("# bn := tst(b1);\n"); 	# 98  (_46:str)
#	mil.line("# GDKmalloc called with size 0\n"); 	# 99  (_69:str)
#	mil.line("# \n"); 	# 100  (_68:str)
#	mil.line("# -8<-----\n"); 	# 101  (_70:str)
#	mil.line("# \n"); 	# 102  (_68:str)
#	mil.line("# As Tim sais, it has probably to do with rewriting the\n"); 	# 103  (_71:str)
#	mil.line("# MIL parse tree after the first iteration of the while loop.\n"); 	# 104  (_72:str)
#	mil.line("# \n"); 	# 105  (_68:str)
#	mil.line("# ========\n"); 	# 106  (_73:str)
#	mil.line("# \n"); 	# 107  (_68:str)
#	mil.line("# As I just noticed, similar (the same\?) bugs have already been\n"); 	# 108  (_74:str)
#	mil.line("# reported in bug reports #117 & #156.\n"); 	# 109  (_75:str)
#	mil.line("# \n"); 	# 110  (_68:str)
#	mil.line("#\t\tStefan\n"); 	# 111  (_76:str)
#	mil.line(""); 	# 112  (_77:str)
    aa_a := calc.oid(20000000);	# 113 CALCint2oid (aa_a:oid)<-(_79:int)
    ba_a := calc.setoid(aa_a);	# 114 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	mil.line(""); 	# 115  (_77:str)
#	mil.line(""); 	# 116  (_77:str)
    b1 := bat.new(nil:int,nil:int);	# 117 CMDBATnew (b1:bat[:int,:int])<-(_82:int)(_82:int)
#	mil.line("var b1 := bat.new(int, int);"); 	# 118  (_83:str)
    fa_a := bat.insert(b1,0,0);	# 119 BKCinsert_bun (fa_a:void)<-(b1:bat[:int,:int])(_85:int)(_85:int)
#	mil.line("b1.insert(0, 0);"); 	# 120  (_86:str)
    ga_a := bat.insert(b1,0,1);	# 121 BKCinsert_bun (ga_a:void)<-(b1:bat[:int,:int])(_85:int)(_88:int)
#	mil.line(""); 	# 122  (_77:str)
    bn := user.tst(b1);	# 123  (bn:bat[:int,:int])<-(b1:bat[:int,:int])
#	mil.line("var bn := tst(b1);  "); 	# 124  (_90:str)
    ha_a := io.print(bn);	# 125 IOprint_val (ha_a:int)<-(bn:bat[:int,:int])
#	mil.line(""); 	# 126  (_77:str)
    ia_a := clients.quit();	# 127 CLTquit (ia_a:void)
end main;	# 128  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 0,	  2	  ]
[ 0,	  3	  ]
#

# 14:17:57 >  
# 14:17:57 >  Done.
# 14:17:57 >  

