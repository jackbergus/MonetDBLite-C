stdout of test 'no.163` in directory 'tests/BugReports` itself:


# 07:27:16 >  
# 07:27:16 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.163.mal < /dev/null
# 07:27:16 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# >Number:         163\n");
##	mil.line("# >Category:       MIL\n");
##	mil.line("# >Synopsis:       multi[lex bug\n");
##	mil.line("# >Confidential:   no\n");
##	mil.line("# >Severity:       serious\n");
##	mil.line("# >Priority:       medium\n");
##	mil.line("# >Responsible:    boncz (Peter Boncz)\n");
##	mil.line("# >State:          open\n");
##	mil.line("# >Class:          sw-bug\n");
##	mil.line("# >Submitter-Id:   unknown\n");
##	mil.line("# >Arrival-Date:   Mon Jul 20 09:56:02 1998\n");
##	mil.line("# >Originator:     manegold@cwi.nl\n");
##	mil.line("# >Organization:\n");
##	mil.line("# >Release:        980101\n");
##	mil.line("# >Environment:\n");
##	mil.line("# any\n");
##	mil.line("# >Description:\n");
##	mil.line("# Tim Ruhl (DDi) reported this bug:\n");
##	mil.line("# \n");
##	mil.line("# The following script fails with \"GDKmalloc called with size 0\".\n");
##	mil.line("# (cf. output below)\n");
##	mil.line("# \n");
##	mil.line("# -8<-----\n");
##	mil.line("# \n");
##	mil.line("# proc tst(BAT[any, int] b) : bat\n");
##	mil.line("# {  \n");
##	mil.line("#   var i;\n");
##	mil.line("# \n");
##	mil.line("#   i := 0;\n");
##	mil.line("#   while (i < 2) {\n");
##	mil.line("#     b := [+](b, 1);\n");
##	mil.line("#     i := i + 1;\n");
##	mil.line("#   }\n");
##	mil.line("# \n");
##	mil.line("#   return b;\n");
##	mil.line("# }\n");
##	mil.line("# \n");
##	mil.line("# b1 := bat.new(int, int);\n");
##	mil.line("# b1.insert(0, 0);\n");
##	mil.line("# b1.insert(0, 1);\n");
##	mil.line("# \n");
##	mil.line("# bn := tst(b1);\n");
##	mil.line("# bn.print;\n");
##	mil.line("# \n");
##	mil.line("# quit;\n");
##	mil.line("# \n");
##	mil.line("# -8<-----\n");
##	mil.line("# \n");
##	mil.line("# # Monet Database Server V4.0 (IRIX5.3/32bit) of Fri Jul 17 21:30:49 MET DST 1998\n");
##	mil.line("# # Copyright (c) 1993-1998, CWI & SION. All rights reserved.\n");
##	mil.line("# #script:../tim.mil\n");
##	mil.line("# \n");
##	mil.line("# loaded;\n");
##	mil.line("# #---------------------------------#\n");
##	mil.line("# # module        | usage_count     #\n");
##	mil.line("# #---------------------------------#\n");
##	mil.line("# [ \"kernel\",       1               ]\n");
##	mil.line("# [ \"arith\",        1               ]\n");
##	mil.line("# [ \"bat\",          1               ]\n");
##	mil.line("# [ \"algebra\",      1               ]\n");
##	mil.line("# [ \"sys\",          1               ]\n");
##	mil.line("# [ \"trans\",        1               ]\n");
##	mil.line("# \n");
##	mil.line("# Try: modules;                - for other modules.\n");
##	mil.line("#      ls;                     - for persistent bat listing.\n");
##	mil.line("#      sigs(\"<module>\")        - for available commands per module.\n");
##	mil.line("#      help(\"<command>\")       - for help one-liner for a command.\n");
##	mil.line("# \n");
##	mil.line("# #You are system administrator (adm)!\n");
##	mil.line("#  \n");
##	mil.line("# proc tst(BAT[any, int] b) : bat\n");
##	mil.line("# {\n");
##	mil.line("#   var i;\n");
##	mil.line("# \n");
##	mil.line("#   i := 0;\n");
##	mil.line("#   while (i < 2) {\n");
##	mil.line("#     b := [+](b, 1);\n");
##	mil.line("#     i := i + 1;\n");
##	mil.line("#   }\n");
##	mil.line("# \n");
##	mil.line("#   return b;\n");
##	mil.line("# }\n");
##	mil.line("# \n");
##	mil.line("# b1 := bat.new(int, int);\n");
##	mil.line("# b1.insert(0, 0);\n");
##	mil.line("# b1.insert(0, 1);\n");
##	mil.line("# \n");
##	mil.line("# bn := tst(b1);\n");
##	mil.line("# GDKmalloc called with size 0\n");
##	mil.line("# \n");
##	mil.line("# -8<-----\n");
##	mil.line("# \n");
##	mil.line("# As Tim sais, it has probably to do with rewriting the\n");
##	mil.line("# MIL parse tree after the first iteration of the while loop.\n");
##	mil.line("# \n");
##	mil.line("# ========\n");
##	mil.line("# \n");
##	mil.line("# As I just noticed, similar (the same\?) bugs have already been\n");
##	mil.line("# reported in bug reports #117 & #156.\n");
##	mil.line("# \n");
##	mil.line("#\t\tStefan\n");
##	mil.line("");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
##	mil.line("");
#function tst(b:bat[:any_1,:int]):bat[:any_1,:int];
##	mil.line("");
#	i := 0;
##	mil.line("  i := 0;");
#barrier	ca_a := true;
#barrier	da_a := calc.<(i,2);
##	mil.line("  while (i < 2) {");
#	b := batcalc.+(b,1);
##	mil.line("    b := [+](b, 1);");
#	i := calc.+(i,1);
##	mil.line("    i := i + 1;");
#redo	ca_a;
#exit	da_a;
#exit	ca_a;
##	mil.line("");
#	return ea_a :=b;
#end tst;
function user.tst(b:bat[:any_1,:int]):bat[:any_1,:int];#  0 tst:bat[:any_1,:int] := user.tst(b:bat[:any_1,:int]) {UPG}
#	io.print(""); 
    i := 0;                             #  2 i:int := _4:int 
#	io.print("  i := 0;"); 
barrier ca_a := true;                   #  4 ca_a:bit := _7:bit {J13}
barrier da_a := calc.<(i,2);            #  5 da_a:bit := CALCcompLTintint(i:int, _9:int) {J12}
#	io.print("  while (i < 2) {"); 
    b := batcalc.+(b,1);                #  7 b:bat[:any_1,:int] := CMDbatADDcst_int_int_int(b:bat[:any_1,:int], _11:int) {PG}
#	io.print("    b := [+](b, 1);"); 
    i := calc.+(i,1);                   #  9 i:int := CALCbinaryADDintint(i:int, _11:int) 
#	io.print("    i := i + 1;"); 
    redo ca_a;                          # 11 ca_a:bit {J5}
exit da_a;                              # 12 da_a:bit 
exit ca_a;                              # 13 ca_a:bit 
#	io.print(""); 
    return ea_a := b;                   # 15 ea_a:bat[:any_1,:int] := b:bat[:any_1,:int] {PG}
end tst;	# 16  
##	mil.line("");
#	b1 := bat.new(nil:int,nil:int);
##	mil.line("var b1 := bat.new(int, int);");
#	fa_a := bat.insert(b1,0,0);
##	mil.line("b1.insert(0, 0);");
#	ga_a := bat.insert(b1,0,1);
##	mil.line("");
#	bn := user.tst(b1);
##	mil.line("var bn := tst(b1);  ");
#	ha_a := io.print(bn);
##	mil.line("");
#	ia_a := clients.quit();
#
function user.main():void;              #  0 main:void {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("# >Number:         163\n"); 
#	io.print("# >Category:       MIL\n"); 
#	io.print("# >Synopsis:       multi[lex bug\n"); 
#	io.print("# >Confidential:   no\n"); 
#	io.print("# >Severity:       serious\n"); 
#	io.print("# >Priority:       medium\n"); 
#	io.print("# >Responsible:    boncz (Peter Boncz)\n"); 
#	io.print("# >State:          open\n"); 
#	io.print("# >Class:          sw-bug\n"); 
#	io.print("# >Submitter-Id:   unknown\n"); 
#	io.print("# >Arrival-Date:   Mon Jul 20 09:56:02 1998\n"); 
#	io.print("# >Originator:     manegold@cwi.nl\n"); 
#	io.print("# >Organization:\n"); 
#	io.print("# >Release:        980101\n"); 
#	io.print("# >Environment:\n"); 
#	io.print("# any\n"); 
#	io.print("# >Description:\n"); 
#	io.print("# Tim Ruhl (DDi) reported this bug:\n"); 
#	io.print("# \n"); 
#	io.print("# The following script fails with \"GDKmalloc called with size 0\".\n"); 
#	io.print("# (cf. output below)\n"); 
#	io.print("# \n"); 
#	io.print("# -8<-----\n"); 
#	io.print("# \n"); 
#	io.print("# proc tst(BAT[any, int] b) : bat\n"); 
#	io.print("# {  \n"); 
#	io.print("#   var i;\n"); 
#	io.print("# \n"); 
#	io.print("#   i := 0;\n"); 
#	io.print("#   while (i < 2) {\n"); 
#	io.print("#     b := [+](b, 1);\n"); 
#	io.print("#     i := i + 1;\n"); 
#	io.print("#   }\n"); 
#	io.print("# \n"); 
#	io.print("#   return b;\n"); 
#	io.print("# }\n"); 
#	io.print("# \n"); 
#	io.print("# b1 := bat.new(int, int);\n"); 
#	io.print("# b1.insert(0, 0);\n"); 
#	io.print("# b1.insert(0, 1);\n"); 
#	io.print("# \n"); 
#	io.print("# bn := tst(b1);\n"); 
#	io.print("# bn.print;\n"); 
#	io.print("# \n"); 
#	io.print("# quit;\n"); 
#	io.print("# \n"); 
#	io.print("# -8<-----\n"); 
#	io.print("# \n"); 
#	io.print("# # Monet Database Server V4.0 (IRIX5.3/32bit) of Fri Jul 17 21:30:49 MET DST 1998\n"); 
#	io.print("# # Copyright (c) 1993-1998, CWI & SION. All rights reserved.\n"); 
#	io.print("# #script:../tim.mil\n"); 
#	io.print("# \n"); 
#	io.print("# loaded;\n"); 
#	io.print("# #---------------------------------#\n"); 
#	io.print("# # module        | usage_count     #\n"); 
#	io.print("# #---------------------------------#\n"); 
#	io.print("# [ \"kernel\",       1               ]\n"); 
#	io.print("# [ \"arith\",        1               ]\n"); 
#	io.print("# [ \"bat\",          1               ]\n"); 
#	io.print("# [ \"algebra\",      1               ]\n"); 
#	io.print("# [ \"sys\",          1               ]\n"); 
#	io.print("# [ \"trans\",        1               ]\n"); 
#	io.print("# \n"); 
#	io.print("# Try: modules;                - for other modules.\n"); 
#	io.print("#      ls;                     - for persistent bat listing.\n"); 
#	io.print("#      sigs(\"<module>\")        - for available commands per module.\n"); 
#	io.print("#      help(\"<command>\")       - for help one-liner for a command.\n"); 
#	io.print("# \n"); 
#	io.print("# #You are system administrator (adm)!\n"); 
#	io.print("#  \n"); 
#	io.print("# proc tst(BAT[any, int] b) : bat\n"); 
#	io.print("# {\n"); 
#	io.print("#   var i;\n"); 
#	io.print("# \n"); 
#	io.print("#   i := 0;\n"); 
#	io.print("#   while (i < 2) {\n"); 
#	io.print("#     b := [+](b, 1);\n"); 
#	io.print("#     i := i + 1;\n"); 
#	io.print("#   }\n"); 
#	io.print("# \n"); 
#	io.print("#   return b;\n"); 
#	io.print("# }\n"); 
#	io.print("# \n"); 
#	io.print("# b1 := bat.new(int, int);\n"); 
#	io.print("# b1.insert(0, 0);\n"); 
#	io.print("# b1.insert(0, 1);\n"); 
#	io.print("# \n"); 
#	io.print("# bn := tst(b1);\n"); 
#	io.print("# GDKmalloc called with size 0\n"); 
#	io.print("# \n"); 
#	io.print("# -8<-----\n"); 
#	io.print("# \n"); 
#	io.print("# As Tim sais, it has probably to do with rewriting the\n"); 
#	io.print("# MIL parse tree after the first iteration of the while loop.\n"); 
#	io.print("# \n"); 
#	io.print("# ========\n"); 
#	io.print("# \n"); 
#	io.print("# As I just noticed, similar (the same\?) bugs have already been\n"); 
#	io.print("# reported in bug reports #117 & #156.\n"); 
#	io.print("# \n"); 
#	io.print("#\t\tStefan\n"); 
#	io.print(""); 
    aa_a := calc.oid(20000000);         #112 aa_a:oid := CALCint2oid(_113:int) 
    ba_a := calc.setoid(aa_a);          #113 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print(""); 
#	io.print(""); 
    b1 := bat.new(:oid,nil:int);        #116 b1:bat[:oid,:int] := CMDBATnew(_118:oid, _119:int) {G}
    fa_a := bat.insert(b1,0@0,0);       #117 fa_a:void := BKCinsert_bun(b1:bat[:oid,:int], _121:oid, _122:int) 
    ga_a := bat.insert(b1,0@0,1);       #118 ga_a:void := BKCinsert_bun(b1:bat[:oid,:int], _121:oid, _124:int) 
    bn := user.tst(b1);                 #119 bn:bat[:oid,:int] := user.tst(b1:bat[:oid,:int]) {G}
    ha_a := io.print(bn);               #120 ha_a:void := IOprint_val(bn:bat[:oid,:int]) 
    ia_a := clients.quit();             #121 ia_a:void 
end main;                               #122  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 0@0,	  2	  ]
[ 0@0,	  3	  ]

# 07:27:16 >  
# 07:27:16 >  Done.
# 07:27:16 >  

