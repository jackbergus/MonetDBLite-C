# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	io.print("# >Number:         27\n");
#	io.print("# >Category:       Mserver\n");
#	io.print("# >Synopsis:       Batloop.\n");
#	io.print("# >Confidential:   no\n");
#	io.print("# >Severity:       serious\n");
#	io.print("# >Priority:       medium\n");
#	io.print("# >Responsible:    boncz\n");
#	io.print("# >State:          closed\n");
#	io.print("# >Class:          sw-bug\n");
#	io.print("# >Submitter-Id:   unknown\n");
#	io.print("# >Arrival-Date:   Thu Sep 18 13:45:07 1997\n");
#	io.print("# >Originator:     quak\n");
#	io.print("# >Organization:\n");
#	io.print("# >Release:        970101\n");
#	io.print("# >Environment:\n");
#	io.print("# All\n");
#	io.print("# >Description:\n");
#	io.print("# The following program should work (I think).\n");
#	io.print("# \n");
#	io.print("# > b := bbp.new(int,int);\n");
#	io.print("# > b.insert(1,2);\n");
#	io.print("# > b@batloop(){$h.print;}\n");
#	io.print("#  It doesn't\n");
#	io.print("var b := bbp.new(int,int);");
	b := bbp.new(nil:int,nil:int);
#	io.print("b.insert(1,2);");
	aa_a := bat.insert(b,1,2);
#	io.print("b@batloop(){$h.print();}");
barrier	(ba_a,ba_aH,ba_aT) := chopper.newIterator(b);
	ca_a := io.print(ba_aH);
redo	(ba_a,ba_aH,ba_aT) := chopper.hasMoreElements(b);
exit	(ba_a,ba_aH,ba_aT) ;
#	io.print("quit();");
	da_a := clients.quit();
