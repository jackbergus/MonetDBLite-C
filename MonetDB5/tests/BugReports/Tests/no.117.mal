# Monet Mil to Mal compiler
include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
	mil.line("# >Number:         117\n");
	mil.line("# >Category:       Mserver\n");
	mil.line("# >Synopsis:       multiplex fails in a loop\n");
	mil.line("# >Confidential:   no\n");
	mil.line("# >Severity:       critical\n");
	mil.line("# >Priority:       high\n");
	mil.line("# >Responsible:    boncz\n");
	mil.line("# >State:          open\n");
	mil.line("# >Class:          sw-bug\n");
	mil.line("# >Submitter-Id:   unknown\n");
	mil.line("# >Arrival-Date:   Thu Feb  5 13:46:05 1998\n");
	mil.line("# >Originator:     windhouw\n");
	mil.line("# >Organization:\n");
	mil.line("# UvA\n");
	mil.line("# >Release:        971007\n");
	mil.line("# >Environment:\n");
	mil.line("# \n");
	mil.line("# >Description:\n");
	mil.line("# The following script fails:\n");
	mil.line("# \n");
	mil.line("# =====\n");
	mil.line("# \n");
	mil.line("# test := bbp.new(oid,int);\n");
	mil.line("# test.insert(oid(1),1);\n");
	mil.line("# test.insert(oid(2),2);\n");
	mil.line("# test.insert(oid(3),3);\n");
	mil.line("# \n");
	mil.line("# PROC addNr( any theNrs, any theNr) : any {\n");
	mil.line("#         printf(\"add Nr: %d\\n\",theNr);\n");
	mil.line("#         VAR r := [+](theNrs,theNr);\n");
	mil.line("#         r.print;\n");
	mil.line("#         return r;\n");
	mil.line("# }\n");
	mil.line("# \n");
	mil.line("# PROC loopTest( any theBAT, any theMax) : void {\n");
	mil.line("#         VAR i := 0;\n");
	mil.line("#         WHILE (i < theMax) {\n");
	mil.line("#                 addNr(theBAT,i);\n");
	mil.line("#                 i := i + 1;\n");
	mil.line("#         }\n");
	mil.line("# }\n");
	mil.line("# \n");
	mil.line("# =====\n");
	mil.line("# \n");
	mil.line("# >loopTest(test,1);\n");
	mil.line("# add Nr: 0\n");
	mil.line("# #-----------------#\n");
	mil.line("# # oid   | tmp_25  #\n");
	mil.line("# #-----------------#\n");
	mil.line("# [ 1@0,    1       ]\n");
	mil.line("# [ 2@0,    2       ]\n");
	mil.line("# [ 3@0,    3       ]\n");
	mil.line("# >loopTest(test,2);\n");
	mil.line("# add Nr: 0\n");
	mil.line("# #-----------------#\n");
	mil.line("# # oid   | tmp_47  #\n");
	mil.line("# #-----------------#\n");
	mil.line("# [ 1@0,    1       ]\n");
	mil.line("# [ 2@0,    2       ]\n");
	mil.line("# [ 3@0,    3       ]\n");
	mil.line("# add Nr: 1\n");
	mil.line("# !WARNING: BATdescriptor: range error\n");
	mil.line("# ... segmentation fault\n");
	mil.line("# \n");
	mil.line("# =====\n");
	mil.line("# \n");
	mil.line("setoid(oid(20000000));");
	aa_a := calc.oid(20000000);
	ba_a := setoid(aa_a);
	mil.line("var test := bbp.new(oid,int);");
	test := bbp.new(nil:oid,nil:int);
	mil.line("test.insert(oid(1),1);");
	ca_a := calc.oid(1);
	da_a := bat.insert(test,ca_a,1);
	mil.line("test.insert(oid(2),2);");
	ea_a := calc.oid(2);
	fa_a := bat.insert(test,ea_a,2);
	mil.line("test.insert(oid(3),3);");
	ga_a := calc.oid(3);
	ha_a := bat.insert(test,ga_a,3);
	mil.line("PROC addNr(any theNrs, any theNr) : any {");
function addNr(theNrs:any$1, theNr:any$2):any$3;
	mil.line("        printf(\"add Nr: %d\\n\",theNr);");
	ia_a := printf("add Nr: %d\n",theNr);
	mil.line("        VAR r := [+](theNrs,theNr);");
	r := multiplex.tactics("+",theNrs,theNr);
	mil.line("        r.print();");
	ja_a := bat.print(r);
	mil.line("        return r;");
	return ka_a :=r;
end addNr;
	mil.line("PROC loopTest(any theBAT,any theMax) : void {");
function loopTest(theBAT:any$1, theMax:any$2):void;
	mil.line("        VAR i := 0;");
	i := 0;
	mil.line("        WHILE (i < theMax) {");
barrier	la_a := true;
barrier	ma_a := <(i,theMax);
	mil.line("                addNr(theBAT,i);");
	na_a := addNr(theBAT,i);
	mil.line("                i := i + 1;");
	i := +(i,1);
	mil.line("        }");
redo	la_a;
exit	ma_a;
exit	la_a;
end loopTest;
	mil.line("loopTest(test,1);");
	oa_a := loopTest(test,1);
	mil.line("loopTest(test,2);");
	pa_a := loopTest(test,2);
	mil.line("quit();");
	qa_a := clients.quit();
