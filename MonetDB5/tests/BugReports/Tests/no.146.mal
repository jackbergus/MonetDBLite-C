# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	io.print("# >Number:         146\n");
#	io.print("# >Category:       ODMG_java_rts\n");
#	io.print("# >Synopsis:       loading module jOdmg yields error\n");
#	io.print("# >Confidential:   no\n");
#	io.print("# >Severity:       serious\n");
#	io.print("# >Priority:       medium\n");
#	io.print("# >Responsible:    frank (Frank Bos)\n");
#	io.print("# >State:          closed\n");
#	io.print("# >Class:          sw-bug\n");
#	io.print("# >Submitter-Id:   unknown\n");
#	io.print("# >Arrival-Date:   Mon Mar  9 15:13:17 1998\n");
#	io.print("# >Originator:     manegold@cwi.nl\n");
#	io.print("# >Organization:\n");
#	io.print("# >Release:        980101\n");
#	io.print("# >Environment:\n");
#	io.print("# SunOS5.6 (GNU=OFF)\n");
#	io.print("# >Description:\n");
#	io.print("# ================\n");
#	io.print("# Test script:\n");
#	io.print("# ----------------\n");
#	io.print("# module(\"jOdmg\");\n");
#	io.print("# loaded;\n");
#	io.print("# sigs(\"jOdmg\");\n");
#	io.print("# procs;\n");
#	io.print("# quit;\n");
#	io.print("# \n");
#	io.print("# ================\n");
#	io.print("# stdout & stderr\n");
#	io.print("# ----------------\n");
#	io.print("# [...]\n");
#	io.print("# #You are system administrator (adm)!\n");
#	io.print("# GDKfree: corrupted data at 19252608\n");
#	io.print("# module(\"jOdmg\");\n");
#	io.print("# !ERROR: in syntax at \"AÅx ODLtrue := 1;\"\n");
#	io.print("# !                                       ^\n");
#	io.print("# can't help you here, sorry.\n");
#	io.print("# loaded;\n");
#	io.print("# #---------------------------------#\n");
#	io.print("# # module        | usage_count     #\n");
#	io.print("# #---------------------------------#\n");
#	io.print("# [ \"kernel\",       1               ]\n");
#	io.print("# [ \"arith\",        1               ]\n");
#	io.print("# [ \"bat\",          1               ]\n");
#	io.print("# [ \"algebra\",      1               ]\n");
#	io.print("# [ \"sys\",          1               ]\n");
#	io.print("# [ \"trans\",        1               ]\n");
#	io.print("# [ \"jOdmg\",        1               ]\n");
#	io.print("# [ \"blob\",         1               ]\n");
#	io.print("# [ \"odmg\",         1               ]\n");
#	io.print("# sigs(\"jOdmg\");\n");
#	io.print("# #-----------------------------------------------------------------#\n");
#	io.print("# # signature                                                       #\n");
#	io.print("# #-----------------------------------------------------------------#\n");
#	io.print("# [ \"delObjs(bat[oid,int], odSet) : void\"                           ]\n");
#	io.print("# [ \"followFetch(odSet, odSet, oid) : jarray\"                       ]\n");
#	io.print("# [ \"getAtomIDs(odSet) : bat[int,int]\"                              ]\n");
#	io.print("# [ \"getClassIDs(str, odSet) : bat[int,int]\"                        ]\n");
#	io.print("# [ \"jget(jarray) : any\"                                            ]\n");
#	io.print("# [ \"jlen(jarray) : int\"                                            ]\n");
#	io.print("# [ \"jput(any) : jarray\"                                            ]\n");
#	io.print("# [ \"jput(any, int, int) : jarray\"                                  ]\n");
#	io.print("# [ \"jput2(any, int, int) : jarray2\"                                ]\n");
#	io.print("# [ \"jtype(jarray) : int\"                                           ]\n");
#	io.print("# [ \"lookup(str) : jarray\"                                          ]\n");
#	io.print("# [ \"objFetch(bat[oid,any], bat[oid,any]) : bat[any,int]\"           ]\n");
#	io.print("# [ \"objFetch(bat[oid,any], oid) : any\"                             ]\n");
#	io.print("# [ \"objFind(bat[oid,any], odSet, any) : oid\"                       ]\n");
#	io.print("# [ \"setFetch(bat[oid,any], bat[oid,any]) : bat[any,int]\"           ]\n");
#	io.print("# [ \"setFetch(bat[oid,any], oid) : bat[any,int]\"                    ]\n");
#	io.print("# [ \"setSelect(bat[oid,any], odSet, any, any) : bat[oid,int]\"       ]\n");
#	io.print("# [ \"update(bat[any,any], odSet, odSet) : void\"                     ]\n");
#	io.print("# [ \"updateSet(bat[oid,any], int, odSet, odSet) : void\"             ]\n");
#	io.print("# procs;\n");
#	io.print("# #-----------------------------------------------------------------#\n");
#	io.print("# # MIL Procedure                                                   #\n");
#	io.print("# #-----------------------------------------------------------------#\n");
#	io.print("# [ \"ADDHELP(PTR addr, STR aut, STR dat, STR hlp, STR sig) : VOID\"  ]\n");
#	io.print("# [ \"clear(BAT) : BAT\"                                              ]\n");
#	io.print("# [ \"unique(bat[any::1,any::2]) : bat[any::1,any::2]\"               ]\n");
#	io.print("# [ \"diff(bat[any::1,any::2],bat[any::1,any::2]) : bat[any::1,any::2]\"  ]\n");
#	io.print("# [ \"intersect(bat[any::1,any::2],bat[any::1,any::2]) : bat[any::1,any::2]\"  ]\n");
#	io.print("# [ \"union(bat[any::1,any::2],bat[any::1,any::2]) : bat[any::1,any::2]\"  ]\n");
#	io.print("# [ \"help(PTR commmand_addr) : VOID\"                                ]\n");
#	io.print("# [ \"help(STR command_name) : VOID\"                                 ]\n");
#	io.print("# [ \"modules() : VOID\"                                              ]\n");
#	io.print("# [ \"loaded() : VOID\"                                               ]\n");
#	io.print("# [ \"sigs(..STR modname..) : VOID\"                                  ]\n");
#	io.print("# [ \"dir() : VOID\"                                                  ]\n");
#	io.print("# [ \"ls() : VOID\"                                                   ]\n");
#	io.print("# [ \"procs() : VOID\"                                                ]\n");
#	io.print("# [ \"clients() : VOID\"                                              ]\n");
#	io.print("# [ \"vars() : VOID\"                                                 ]\n");
#	io.print("# [ \"threads() : VOID\"                                              ]\n");
#	io.print("# [ \"env() : VOID\"                                                  ]\n");
#	io.print("# [ \"batsize(BAT) : INT\"                                            ]\n");
#	io.print("# [ \"help_tpe: NO SIGNATURE AVAILABLE\"                              ]\n");
#	io.print("# [ \"help_sig: NO SIGNATURE AVAILABLE\"                              ]\n");
#	io.print("# [ \"col_name: NO SIGNATURE AVAILABLE\"                              ]\n");
#	io.print("# [ \"environment: NO SIGNATURE AVAILABLE\"                           ]\n");
#	io.print("# drop(\"jOdmg\");\n");
#	io.print("# quit;\n");
#	io.print("setoid(oid(2000000));");
	aa_a := calc.oid(2000000);
	ba_a := setoid(aa_a);
#	io.print("loaded();");
	ca_a := loaded();
#	io.print("sigs(\"jOdmg\");");
	da_a := sigs("jOdmg");
#	io.print("procs();");
	ea_a := procs();
#	io.print("quit();");
	fa_a := clients.quit();
