# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	io.print("# this used to hang because the no longer persistent\n");
#	io.print("# bat got the BBPUNLOADING status but can only be done\n");
#	io.print("# with refs()==0 and lrefs()==0 \n");
#	io.print("");
	abat := bbp.new(nil:int,nil:int);
#	io.print("var abat := bat(int,int);");
	aa_a := persists(abat,true);
#	io.print("abat.persists(true);");
	ba_a := commit();
#	io.print("# met of zonder 'abat := nil;'\n");
#	io.print("");
	ca_a := getName(abat);
	t_3 := bbp.new(ca_a);
#	io.print("var t_3 := bat(bbpname(abat));");
	da_a := persists(t_3,false);
#	io.print("persists(t_3,false);");
	ea_a := commit();
#	io.print("## Hang:\n");
	fa_a := bat.print(t_3);
#	io.print("");
	ga_a := clients.quit();
#Identifer 'bbpname' mapped to 'getName'
