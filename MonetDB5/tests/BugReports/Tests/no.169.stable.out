stdout of test 'no.169` in directory 'tests/BugReports` itself:


# 07:27:16 >  
# 07:27:16 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.169.mal < /dev/null
# 07:27:16 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# \n");
##	mil.line("#>Number:         169\n");
##	mil.line("#>Category:       Mserver\n");
##	mil.line("#>Synopsis:       calc.str(nil).print hangs\n");
##	mil.line("#>Confidential:   no\n");
##	mil.line("#>Severity:       critical\n");
##	mil.line("#>Priority:       high\n");
##	mil.line("#>Responsible:    boncz (Peter Boncz)\n");
##	mil.line("#>State:          open\n");
##	mil.line("#>Class:          sw-bug\n");
##	mil.line("#>Submitter-Id:   unknown\n");
##	mil.line("#>Arrival-Date:   Thu Sep  3 15:30:20 1998\n");
##	mil.line("#>Originator:     windhouw@cwi.nl\n");
##	mil.line("#>Organization:\n");
##	mil.line("#CWI\n");
##	mil.line("#>Release:        980101\n");
##	mil.line("#>Environment:\n");
##	mil.line("#IRIX646.5\n");
##	mil.line("#>Description:\n");
##	mil.line("#On the medusa (IRIX646.5 64bit) the following\n");
##	mil.line("#script hangs Mserver:\n");
##	mil.line("#> calc.str(nil).print;\n");
##	mil.line("#[ nil ]\n");
##	mil.line("#>How-To-Repeat:\n");
##	mil.line("#>Fix:\n");
##	mil.line("#>Audit-Trail:\n");
##	mil.line("#>Unformatted:\n");
##	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
##	mil.line("str(nil).print();");
#	ca_a := calc.str(nil);
#	da_a := io.print(ca_a);
##	mil.line("quit();");
#	ea_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
#include mil; 	# 2  (_2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 3  (_3:str)
#Predefined code segment 	# 4  (_4:str)
#The compiler can not guarantee an accurate compilation, 	# 5  (_5:str)
#because MIL unlike MAL is a dynamically typed language. 	# 6  (_6:str)
#A few guidelines to maximize usefullness. 	# 7  (_7:str)
#- make the type of variables explicit, in particular 'nil' 	# 8  (_8:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 9  (_9:str)
#use the "mil_schema" for additional support routines 	# 10  (_10:str)
#	mil.line("# \n"); 	# 11  (_11:str)
#	mil.line("#>Number:         169\n"); 	# 12  (_12:str)
#	mil.line("#>Category:       Mserver\n"); 	# 13  (_13:str)
#	mil.line("#>Synopsis:       calc.str(nil).print hangs\n"); 	# 14  (_14:str)
#	mil.line("#>Confidential:   no\n"); 	# 15  (_15:str)
#	mil.line("#>Severity:       critical\n"); 	# 16  (_16:str)
#	mil.line("#>Priority:       high\n"); 	# 17  (_17:str)
#	mil.line("#>Responsible:    boncz (Peter Boncz)\n"); 	# 18  (_18:str)
#	mil.line("#>State:          open\n"); 	# 19  (_19:str)
#	mil.line("#>Class:          sw-bug\n"); 	# 20  (_20:str)
#	mil.line("#>Submitter-Id:   unknown\n"); 	# 21  (_21:str)
#	mil.line("#>Arrival-Date:   Thu Sep  3 15:30:20 1998\n"); 	# 22  (_22:str)
#	mil.line("#>Originator:     windhouw@cwi.nl\n"); 	# 23  (_23:str)
#	mil.line("#>Organization:\n"); 	# 24  (_24:str)
#	mil.line("#CWI\n"); 	# 25  (_25:str)
#	mil.line("#>Release:        980101\n"); 	# 26  (_26:str)
#	mil.line("#>Environment:\n"); 	# 27  (_27:str)
#	mil.line("#IRIX646.5\n"); 	# 28  (_28:str)
#	mil.line("#>Description:\n"); 	# 29  (_29:str)
#	mil.line("#On the medusa (IRIX646.5 64bit) the following\n"); 	# 30  (_30:str)
#	mil.line("#script hangs Mserver:\n"); 	# 31  (_31:str)
#	mil.line("#> calc.str(nil).print;\n"); 	# 32  (_32:str)
#	mil.line("#[ nil ]\n"); 	# 33  (_33:str)
#	mil.line("#>How-To-Repeat:\n"); 	# 34  (_34:str)
#	mil.line("#>Fix:\n"); 	# 35  (_35:str)
#	mil.line("#>Audit-Trail:\n"); 	# 36  (_36:str)
#	mil.line("#>Unformatted:\n"); 	# 37  (_37:str)
#	mil.line("setoid(oid(20000000));"); 	# 38  (_38:str)
    aa_a := calc.oid(20000000);	# 39 CALCint2oid (aa_a:oid)<-(_40:int)
    ba_a := calc.setoid(aa_a);	# 40 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	mil.line("str(nil).print();"); 	# 41  (_42:str)
    ca_a := calc.str(nil:void);	# 42 CALCnil2str (ca_a:str)<-(_44:void)
    da_a := io.print(ca_a);	# 43 IOprint_val (da_a:int)<-(ca_a:str)
#	mil.line("quit();"); 	# 44  (_46:str)
    ea_a := clients.quit();	# 45 CLTquit (ea_a:void)
end main;	# 46  
[ nil ]

# 07:27:16 >  
# 07:27:16 >  Done.
# 07:27:16 >  

