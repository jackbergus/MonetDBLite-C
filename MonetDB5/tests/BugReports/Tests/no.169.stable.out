stdout of test 'no.169` in directory 'tests/BugReports` itself:


# 07:27:16 >  
# 07:27:16 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.169.mal < /dev/null
# 07:27:16 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# \n");
##	mil.line("#>Number:         169\n");
##	mil.line("#>Category:       Mserver\n");
##	mil.line("#>Synopsis:       calc.str(nil).print hangs\n");
##	mil.line("#>Confidential:   no\n");
##	mil.line("#>Severity:       critical\n");
##	mil.line("#>Priority:       high\n");
##	mil.line("#>Responsible:    boncz (Peter Boncz)\n");
##	mil.line("#>State:          open\n");
##	mil.line("#>Class:          sw-bug\n");
##	mil.line("#>Submitter-Id:   unknown\n");
##	mil.line("#>Arrival-Date:   Thu Sep  3 15:30:20 1998\n");
##	mil.line("#>Originator:     windhouw@cwi.nl\n");
##	mil.line("#>Organization:\n");
##	mil.line("#CWI\n");
##	mil.line("#>Release:        980101\n");
##	mil.line("#>Environment:\n");
##	mil.line("#IRIX646.5\n");
##	mil.line("#>Description:\n");
##	mil.line("#On the medusa (IRIX646.5 64bit) the following\n");
##	mil.line("#script hangs Mserver:\n");
##	mil.line("#> calc.str(nil).print;\n");
##	mil.line("#[ nil ]\n");
##	mil.line("#>How-To-Repeat:\n");
##	mil.line("#>Fix:\n");
##	mil.line("#>Audit-Trail:\n");
##	mil.line("#>Unformatted:\n");
##	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
##	mil.line("str(nil).print();");
#	ca_a := calc.str(nil);
#	da_a := io.print(ca_a);
##	mil.line("quit();");
#	ea_a := clients.quit();
#
function user.main():void;              #  0 main:void := user.main() {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("# \n"); 
#	io.print("#>Number:         169\n"); 
#	io.print("#>Category:       Mserver\n"); 
#	io.print("#>Synopsis:       calc.str(nil).print hangs\n"); 
#	io.print("#>Confidential:   no\n"); 
#	io.print("#>Severity:       critical\n"); 
#	io.print("#>Priority:       high\n"); 
#	io.print("#>Responsible:    boncz (Peter Boncz)\n"); 
#	io.print("#>State:          open\n"); 
#	io.print("#>Class:          sw-bug\n"); 
#	io.print("#>Submitter-Id:   unknown\n"); 
#	io.print("#>Arrival-Date:   Thu Sep  3 15:30:20 1998\n"); 
#	io.print("#>Originator:     windhouw@cwi.nl\n"); 
#	io.print("#>Organization:\n"); 
#	io.print("#CWI\n"); 
#	io.print("#>Release:        980101\n"); 
#	io.print("#>Environment:\n"); 
#	io.print("#IRIX646.5\n"); 
#	io.print("#>Description:\n"); 
#	io.print("#On the medusa (IRIX646.5 64bit) the following\n"); 
#	io.print("#script hangs Mserver:\n"); 
#	io.print("#> calc.str(nil).print;\n"); 
#	io.print("#[ nil ]\n"); 
#	io.print("#>How-To-Repeat:\n"); 
#	io.print("#>Fix:\n"); 
#	io.print("#>Audit-Trail:\n"); 
#	io.print("#>Unformatted:\n"); 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         # 38 aa_a:oid := CALCint2oid(_39:int) 
    ba_a := calc.setoid(aa_a);          # 39 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("str(nil).print();"); 
    ca_a := calc.str(nil:void);         # 41 ca_a:str := CALCnil2str(_43:void) {G}
    da_a := io.print(ca_a);             # 42 da_a:void := IOprint_val(ca_a:str) 
#	io.print("quit();"); 
    ea_a := clients.quit();             # 44 ea_a:void := CLTquit() 
end main;	# 45  
[ nil ]

# 07:27:16 >  
# 07:27:16 >  Done.
# 07:27:16 >  

