stdout of test 'no.169` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.169 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.169.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.169.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# 
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("# \n");
#	mil.line("#>Number:         169");
#	mil.line("#>Number:         169\n");
#	mil.line("#>Category:       Mserver");
#	mil.line("#>Category:       Mserver\n");
#	mil.line("#>Synopsis:       str(nil).print hangs");
#	mil.line("#>Synopsis:       str(nil).print hangs\n");
#	mil.line("#>Confidential:   no");
#	mil.line("#>Confidential:   no\n");
#	mil.line("#>Severity:       critical");
#	mil.line("#>Severity:       critical\n");
#	mil.line("#>Priority:       high");
#	mil.line("#>Priority:       high\n");
#	mil.line("#>Responsible:    boncz (Peter Boncz)");
#	mil.line("#>Responsible:    boncz (Peter Boncz)\n");
#	mil.line("#>State:          open");
#	mil.line("#>State:          open\n");
#	mil.line("#>Class:          sw-bug");
#	mil.line("#>Class:          sw-bug\n");
#	mil.line("#>Submitter-Id:   unknown");
#	mil.line("#>Submitter-Id:   unknown\n");
#	mil.line("#>Arrival-Date:   Thu Sep  3 15:30:20 1998");
#	mil.line("#>Arrival-Date:   Thu Sep  3 15:30:20 1998\n");
#	mil.line("#>Originator:     windhouw@cwi.nl");
#	mil.line("#>Originator:     windhouw@cwi.nl\n");
#	mil.line("#>Organization:");
#	mil.line("#>Organization:\n");
#	mil.line("#CWI");
#	mil.line("#CWI\n");
#	mil.line("#>Release:        980101");
#	mil.line("#>Release:        980101\n");
#	mil.line("#>Environment:");
#	mil.line("#>Environment:\n");
#	mil.line("#IRIX646.5");
#	mil.line("#IRIX646.5\n");
#	mil.line("#>Description:");
#	mil.line("#>Description:\n");
#	mil.line("#On the medusa (IRIX646.5 64bit) the following");
#	mil.line("#On the medusa (IRIX646.5 64bit) the following\n");
#	mil.line("#script hangs Mserver:");
#	mil.line("#script hangs Mserver:\n");
#	mil.line("#> str(nil).print;");
#	mil.line("#> str(nil).print;\n");
#	mil.line("#[ nil ]");
#	mil.line("#[ nil ]\n");
#	mil.line("#>How-To-Repeat:");
#	mil.line("#>How-To-Repeat:\n");
#	mil.line("#>Fix:");
#	mil.line("#>Fix:\n");
#	mil.line("#>Audit-Trail:");
#	mil.line("#>Audit-Trail:\n");
#	mil.line("#>Unformatted:");
#	mil.line("#>Unformatted:\n");
#	mil.line("");
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("str(nil).print();");
#	ca_a := str(nil);
#	da_a := print(ca_a);
#	mil.line("quit();");
#	ea_a := quit();
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
#include mil; 	# 2  (_2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 3  (_3:str)
#Predefined code segment 	# 4  (_4:str)
#The compiler can not guarantee an accurate compilation, 	# 5  (_5:str)
#because MIL unlike MAL is a dynamically typed language. 	# 6  (_6:str)
#A few guidelines to maximize usefullness. 	# 7  (_7:str)
#- make the type of variables explicit, in particular 'nil' 	# 8  (_8:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 9  (_9:str)
#use the "mil_schema" for additional support routines 	# 10  (_10:str)
#	mil.line("# \n"); 	# 11  (_11:str)
#	mil.line("#>Number:         169\n"); 	# 12  (_12:str)
#	mil.line("#>Category:       Mserver\n"); 	# 13  (_13:str)
#	mil.line("#>Synopsis:       calc.str(nil).print hangs\n"); 	# 14  (_14:str)
#	mil.line("#>Confidential:   no\n"); 	# 15  (_15:str)
#	mil.line("#>Severity:       critical\n"); 	# 16  (_16:str)
#	mil.line("#>Priority:       high\n"); 	# 17  (_17:str)
#	mil.line("#>Responsible:    boncz (Peter Boncz)\n"); 	# 18  (_18:str)
#	mil.line("#>State:          open\n"); 	# 19  (_19:str)
#	mil.line("#>Class:          sw-bug\n"); 	# 20  (_20:str)
#	mil.line("#>Submitter-Id:   unknown\n"); 	# 21  (_21:str)
#	mil.line("#>Arrival-Date:   Thu Sep  3 15:30:20 1998\n"); 	# 22  (_22:str)
#	mil.line("#>Originator:     windhouw@cwi.nl\n"); 	# 23  (_23:str)
#	mil.line("#>Organization:\n"); 	# 24  (_24:str)
#	mil.line("#CWI\n"); 	# 25  (_25:str)
#	mil.line("#>Release:        980101\n"); 	# 26  (_26:str)
#	mil.line("#>Environment:\n"); 	# 27  (_27:str)
#	mil.line("#IRIX646.5\n"); 	# 28  (_28:str)
#	mil.line("#>Description:\n"); 	# 29  (_29:str)
#	mil.line("#On the medusa (IRIX646.5 64bit) the following\n"); 	# 30  (_30:str)
#	mil.line("#script hangs Mserver:\n"); 	# 31  (_31:str)
#	mil.line("#> calc.str(nil).print;\n"); 	# 32  (_32:str)
#	mil.line("#[ nil ]\n"); 	# 33  (_33:str)
#	mil.line("#>How-To-Repeat:\n"); 	# 34  (_34:str)
#	mil.line("#>Fix:\n"); 	# 35  (_35:str)
#	mil.line("#>Audit-Trail:\n"); 	# 36  (_36:str)
#	mil.line("#>Unformatted:\n"); 	# 37  (_37:str)
#	mil.line("setoid(oid(20000000));"); 	# 38  (_38:str)
    aa_a := calc.oid(20000000);	# 39 CALCint2oid (aa_a:oid)<-(_40:int)
    ba_a := calc.setoid(aa_a);	# 40 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	mil.line("str(nil).print();"); 	# 41  (_42:str)
    ca_a := calc.str(nil);	# 42 CALCnil2str (ca_a:str)<-(_44:void)
    da_a := io.print(ca_a);	# 43 IOprint_val (da_a:int)<-(ca_a:str)
#	mil.line("quit();"); 	# 44  (_46:str)
    ea_a := clients.quit();	# 45 CLTquit (ea_a:void)
end main;	# 46  
[ nil ]

# 08:27:59 >  
# 08:27:59 >  Done.
# 08:27:59 >  

