# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	io.print("# >Number:         100\n");
#	io.print("# >Category:       MIL\n");
#	io.print("# >Synopsis:       Virtual oids behave in a strange way.\n");
#	io.print("# >Confidential:   no\n");
#	io.print("# >Severity:       serious\n");
#	io.print("# >Priority:       medium\n");
#	io.print("# >Responsible:    boncz\n");
#	io.print("# >State:          open\n");
#	io.print("# >Class:          sw-bug\n");
#	io.print("# >Submitter-Id:   unknown\n");
#	io.print("# >Arrival-Date:   Mon Dec 15 11:47:39 1997\n");
#	io.print("# >Originator:     quak\n");
#	io.print("# >Organization:\n");
#	io.print("# UvA\n");
#	io.print("# >Release:        971007\n");
#	io.print("# >Environment:\n");
#	io.print("# all\n");
#	io.print("# >Description:\n");
#	io.print("# Try this out:\n");
#	io.print("# > a := bat.new(int,str);\n");
#	io.print("# > a.insert(1,\"hello world\");\n");
#	io.print("# > a.seqbase(100@0);\n");
#	io.print("# > [oid]([a~]).reverse.print();\n");
#	io.print("# #-----------------#\n");
#	io.print("# # oid   | tmp_92  #\n");
#	io.print("# #-----------------#\n");
#	io.print("# [ 100@0,  1       ]\n");
#	io.print("# > [oid]([a~]).reverse.copy.print();\n");
#	io.print("# #-----------------#\n");
#	io.print("# # oid   | tmp_93  #\n");
#	io.print("# #-----------------#\n");
#	io.print("# [ 1@0,    100     ]\n");
#	io.print("# \n");
#	io.print("setoid(oid(20000000));");
	aa_a := calc.oid(20000000:lng);
	ba_a := calc.setoid(aa_a);
#	io.print("var a := bat.new(int,str);");
	a := bat.new(nil:oid,nil:str);
#	io.print("a.insert(1,\"hello world\");");
	ca_a := bat.append(a,"hello world");
#	io.print("a.print();");
	da_a := io.print(a);
#	io.print("a.mark(nil).print();");
	ea_a := algebra.markT(a);
	fa_a := io.print(ea_a);
#	io.print("a.mark(nil).reverse().print();");
	ga_a := algebra.markT(a);
	ha_a := bat.reverse(ga_a);
	ia_a := io.print(ha_a);
#	io.print("[oid](a.mark(nil)).reverse().print();");
	ja_a := algebra.markT(a);
	ka_a := batcalc.oid(ja_a);
	la_a := bat.reverse(ka_a);
	ma_a := io.print(la_a);
#	io.print("a.seqbase(100@0);");
#	io.print("[oid](a.mark(nil)).reverse().print();");
	oa_a := algebra.markT(a);
	pa_a := batcalc.oid(oa_a);
	qa_a := bat.reverse(pa_a);
	ra_a := io.print(qa_a);
#	io.print("[oid](a.mark(nil)).reverse().copy().print();");
	sa_a := algebra.markT(a);
	ta_a := batcalc.oid(sa_a);
	ua_a := bat.reverse(ta_a);
	va_a := algebra.copy(ua_a);
	wa_a := io.print(va_a);
#	io.print("quit();");
	xa_a := clients.quit();
