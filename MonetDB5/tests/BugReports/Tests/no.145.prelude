# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

# Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#setoid(oid(10000000));
	aa_a := oid(10000000);
	ba_a := setoid(aa_a);
#var t:= new(int,int);
	t := new(:int,:int);
#t.rename("k10_unique1");
	ca_a := bat.setName(t,"k10_unique1");
#t.persists(true);
	da_a := persists(t,true);
#t.import(sprintf("%s/no.145.k10_unique1",getenv("TSTTRGDIR")));
	ea_a := getenv("TSTTRGDIR");
	fa_a := sprintf("%s/no.145.k10_unique1",ea_a);
	ga_a := import(t,fa_a);
#t.count().print();
	ha_a := count(t,);
	ia_a := print(ha_a,);
#var z:= new(int,int);
	z := new(:int,:int);
#z.rename("k10_unique2");
	ja_a := bat.setName(z,"k10_unique2");
#z.persists(true);
	ka_a := persists(z,true);
#z.import(sprintf("%s/no.145.k10_unique2",getenv("TSTTRGDIR")));
	la_a := getenv("TSTTRGDIR");
	ma_a := sprintf("%s/no.145.k10_unique2",la_a);
	na_a := import(z,ma_a);
#z.count().print();
	oa_a := count(z,);
	pa_a := print(oa_a,);
#var w:= new(int,int);
	w := new(:int,:int);
#w.rename("k100_unique1");
	qa_a := bat.setName(w,"k100_unique1");
#w.persists(true);
	ra_a := persists(w,true);
#w.import(sprintf("%s/no.145.k100_unique1",getenv("TSTTRGDIR")));
	sa_a := getenv("TSTTRGDIR");
	ta_a := sprintf("%s/no.145.k100_unique1",sa_a);
	ua_a := import(w,ta_a);
#w.count().print();
	va_a := count(w,);
	wa_a := print(va_a,);
#commit();
	xa_a := commit();
#Identifer 'rename' mapped to 'bat.setName'
