# Monet Mil to Mal compiler
#include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	mil.line("# >Number:         73\n");
#	mil.line("# >Category:       Mserver\n");
#	mil.line("# >Synopsis:       original BAT unknown after renamed reverse BAT\n");
#	mil.line("# >Confidential:   no\n");
#	mil.line("# >Severity:       serious\n");
#	mil.line("# >Priority:       medium\n");
#	mil.line("# >Responsible:    boncz\n");
#	mil.line("# >State:          closed\n");
#	mil.line("# >Class:          sw-bug\n");
#	mil.line("# >Submitter-Id:   unknown\n");
#	mil.line("# >Arrival-Date:   Wed Nov  5 13:03:07 1997\n");
#	mil.line("# >Originator:     windhouw\n");
#	mil.line("# >Organization:\n");
#	mil.line("# >Release:        971007\n");
#	mil.line("# >Environment:\n");
#	mil.line("# \n");
#	mil.line("# >Description:\n");
#	mil.line("# example:\n");
#	mil.line("# - creating a persisten BAT with name ab;\n");
#	mil.line("# - naming the reverse to ba;\n");
#	mil.line("# - restart the server;\n");
#	mil.line("# - trying to access the original ab gives the following error:\n");
#	mil.line("#   >!ERROR: GDKload: can not access ab.desc\n");
#	mil.line("#   >No such file or directory!ERROR: BATprintf: BAT expected\n");
#	mil.line("# - access to the reverse ba succeeds;\n");
#	mil.line("# - access to the original ab is now succesfull.\n");
#	mil.line("# ======\n");
#	mil.line("# OUTPUT\n");
#	mil.line("# ======\n");
#	mil.line("# (windhouw@mamba 33) Mserver\n");
#	mil.line("# # Monet Database Server V4.00\n");
#	mil.line("# # Copyright (c) 1993-1997, CWI & SION.All rights reserved.\n");
#	mil.line("#  \n");
#	mil.line("# loaded;\n");
#	mil.line("# #-----------------------------------------#\n");
#	mil.line("# # module        | owner | usage_count     #\n");
#	mil.line("# #-----------------------------------------#\n");
#	mil.line("# [ \"kernel\",       \"adm\",  1               ]\n");
#	mil.line("# [ \"arith\",        \"adm\",  1               ]\n");
#	mil.line("# [ \"bat\",          \"adm\",  1               ]\n");
#	mil.line("# [ \"algebra\",      \"adm\",  1               ]\n");
#	mil.line("# [ \"sys\",          \"adm\",  1               ]\n");
#	mil.line("#  \n");
#	mil.line("# Try: modules;                - for other modules.\n");
#	mil.line("#      ls;                     - for persistent bat listing.\n");
#	mil.line("#      sigs(\"<module>\")        - for available commands per module.\n");
#	mil.line("#      help(\"<command>\")       - for help one-liner for a command.\n");
#	mil.line("#  \n");
#	mil.line("# #You are system administrator (adm)!\n");
#	mil.line("# >ab := bbp.new(int,str);\n");
#	mil.line("# >ab.rename(\"ab\");\n");
#	mil.line("# >ab.persists(true);\n");
#	mil.line("# >ab.commit;\n");
#	mil.line("# >ba := ab.reverse;\n");
#	mil.line("# >ba.rename(\"ba\");\n");
#	mil.line("# >ba.persists(true);\n");
#	mil.line("# >ba.commit;\n");
#	mil.line("# >ab.insert(1,\"een\");\n");
#	mil.line("# >ba.insert(\"twee\",2);\n");
#	mil.line("# >ab.print;\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# # int   | ba      #\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# [ 1,      \"een\"   ]\n");
#	mil.line("# [ 2,      \"twee\"  ]\n");
#	mil.line("# >ba.print;\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# # str   | ba      #\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# [ \"een\",  1       ]\n");
#	mil.line("# [ \"twee\", 2       ]\n");
#	mil.line("# >commit;\n");
#	mil.line("# >quit;\n");
#	mil.line("# (windhouw@mamba 34) Mserver\n");
#	mil.line("# # Monet Database Server V4.00\n");
#	mil.line("# # Copyright (c) 1993-1997, CWI & SION.All rights reserved.\n");
#	mil.line("#  \n");
#	mil.line("# loaded;\n");
#	mil.line("# #-----------------------------------------#\n");
#	mil.line("# # module        | owner | usage_count     #\n");
#	mil.line("# #-----------------------------------------#\n");
#	mil.line("# [ \"kernel\",       \"adm\",  1               ]\n");
#	mil.line("# [ \"arith\",        \"adm\",  1               ]\n");
#	mil.line("# [ \"bat\",          \"adm\",  1               ]\n");
#	mil.line("# [ \"algebra\",      \"adm\",  1               ]\n");
#	mil.line("# [ \"sys\",          \"adm\",  1               ]\n");
#	mil.line("#  \n");
#	mil.line("# Try: modules;                - for other modules.\n");
#	mil.line("#      ls;                     - for persistent bat listing.\n");
#	mil.line("#      sigs(\"<module>\")        - for available commands per module.\n");
#	mil.line("#      help(\"<command>\")       - for help one-liner for a command.\n");
#	mil.line("#  \n");
#	mil.line("# #You are system administrator (adm)!\n");
#	mil.line("# >ab.print;\n");
#	mil.line("# !ERROR: GDKload: can not access ab.desc\n");
#	mil.line("# No such file or directory!ERROR: BATprintf: BAT expected>\n");
#	mil.line("# >ba.print;\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# # str   | ba      #\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# [ \"een\",  1       ]\n");
#	mil.line("# [ \"twee\", 2       ]\n");
#	mil.line("# >ab.print;\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# # int   | ba      #\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# [ 1,      \"een\"   ]\n");
#	mil.line("# [ 2,      \"twee\"  ]\n");
#	mil.line("var ab := bbp.new(int,str);");
	ab := bbp.new(nil:int,nil:str);
#	mil.line("ab.rename(\"ab\");");
	aa_a := bat.setName(ab,"ab");
#	mil.line("ab.persists(true);");
	ba_a := persists(ab,true);
#	mil.line("ab.commit();");
	ca_a := commit(ab);
#	mil.line("var ba := ab.reverse();");
	ba := bat.reverse(ab);
#	mil.line("ba.rename(\"ba\");");
	da_a := bat.setName(ba,"ba");
#	mil.line("ba.persists(true);");
	ea_a := persists(ba,true);
#	mil.line("ba.commit();");
	fa_a := commit(ba);
#	mil.line("ab.insert(1,\"een\");");
	ga_a := bat.insert(ab,1,"een");
#	mil.line("ba.insert(\"twee\",2);");
	ha_a := bat.insert(ba,"twee",2);
#	mil.line("ab.print();");
	ia_a := bat.print(ab);
#	mil.line("ba.print();");
	ja_a := bat.print(ba);
#	mil.line("commit();");
	ka_a := commit();
#	mil.line("quit();");
	la_a := clients.quit();
#Identifer 'rename' mapped to 'bat.setName'
