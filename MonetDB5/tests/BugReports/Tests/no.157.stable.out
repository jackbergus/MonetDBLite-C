stdout of test 'no.157` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.157 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.157.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.157.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# >Number:         157
# >Category:       Mserver
# >Synopsis:       long selects
# >Confidential:   no
# >Severity:       critical
# >Priority:       high
# >Responsible:    boncz (Peter Boncz)
# >State:          open
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Tue Jun 23 13:42:30 1998
# >Originator:     windhouw@cwi.nl
# >Organization:
# CWI
# >Release:        980101
# >Environment:
# 
# >Description:
# Selection of longs results in rather strange results:
# 
function user.main():void;	# 0  (main:void)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  (_31:str)
#Predefined code segment 	# 2  (_32:str)
#The compiler can not guarantee an accurate compilation, 	# 3  (_33:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  (_34:str)
#A few guidelines to maximize usefullness. 	# 5  (_35:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  (_36:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  (_37:str)
#use the "mil_schema" for additional support routines 	# 8  (_38:str)
    mil.line("# >Number:         157\n");	# 9 MILline (_39:void)<-(_40:str)
    mil.line("# >Category:       Mserver\n");	# 10 MILline (_41:void)<-(_42:str)
    mil.line("# >Synopsis:       long selects\n");	# 11 MILline (_43:void)<-(_44:str)
    mil.line("# >Confidential:   no\n");	# 12 MILline (_45:void)<-(_46:str)
    mil.line("# >Severity:       critical\n");	# 13 MILline (_47:void)<-(_48:str)
    mil.line("# >Priority:       high\n");	# 14 MILline (_49:void)<-(_50:str)
    mil.line("# >Responsible:    boncz (Peter Boncz)\n");	# 15 MILline (_51:void)<-(_52:str)
    mil.line("# >State:          open\n");	# 16 MILline (_53:void)<-(_54:str)
    mil.line("# >Class:          sw-bug\n");	# 17 MILline (_55:void)<-(_56:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 18 MILline (_57:void)<-(_58:str)
    mil.line("# >Arrival-Date:   Tue Jun 23 13:42:30 1998\n");	# 19 MILline (_59:void)<-(_60:str)
    mil.line("# >Originator:     windhouw@cwi.nl\n");	# 20 MILline (_61:void)<-(_62:str)
    mil.line("# >Organization:\n");	# 21 MILline (_63:void)<-(_64:str)
    mil.line("# CWI\n");	# 22 MILline (_65:void)<-(_66:str)
    mil.line("# >Release:        980101\n");	# 23 MILline (_67:void)<-(_68:str)
    mil.line("# >Environment:\n");	# 24 MILline (_69:void)<-(_70:str)
    mil.line("# \n");	# 25 MILline (_71:void)<-(_72:str)
    mil.line("# >Description:\n");	# 26 MILline (_73:void)<-(_74:str)
    mil.line("# Selection of longs results in rather strange results:\n");	# 27 MILline (_75:void)<-(_76:str)
    mil.line("# \n");	# 28 MILline (_77:void)<-(_72:str)
    mil.line("# Test script\n");	# 29 MILline (_78:void)<-(_79:str)
    mil.line("# 8<----\n");	# 30 MILline (_80:void)<-(_81:str)
    mil.line("# test := bat.new(oid,lng);\n");	# 31 MILline (_82:void)<-(_83:str)
    mil.line("# test.insert(oid(53991617),lng(60000401));\n");	# 32 MILline (_84:void)<-(_85:str)
    mil.line("# test.insert(oid(53996584),lng(60000400));\n");	# 33 MILline (_86:void)<-(_87:str)
    mil.line("# test.insert(oid(55526089),lng(50015637));\n");	# 34 MILline (_88:void)<-(_89:str)
    mil.line("# test.print;\n");	# 35 MILline (_90:void)<-(_91:str)
    mil.line("# test.select(lng(0)).print;\n");	# 36 MILline (_92:void)<-(_93:str)
    mil.line("# test.select(lng(60000401)).print;\n");	# 37 MILline (_94:void)<-(_95:str)
    mil.line("# test.select(lng(0),lng(1)).print;\n");	# 38 MILline (_96:void)<-(_97:str)
    mil.line("# test.insert(oid(1),lng(1));\n");	# 39 MILline (_98:void)<-(_99:str)
    mil.line("# test.select(lng(0)).print;\n");	# 40 MILline (_100:void)<-(_93:str)
    mil.line("# test.select(lng(60000401)).print;\n");	# 41 MILline (_101:void)<-(_95:str)
    mil.line("# test.select(lng(0),lng(1)).print;\n");	# 42 MILline (_102:void)<-(_97:str)
    mil.line("# \n");	# 43 MILline (_103:void)<-(_72:str)
    mil.line("# 8<-----\n");	# 44 MILline (_104:void)<-(_105:str)
    mil.line("# Test output\n");	# 45 MILline (_106:void)<-(_107:str)
    mil.line("# 8<-----\n");	# 46 MILline (_108:void)<-(_105:str)
    mil.line("# #You are system administrator (adm)!\n");	# 47 MILline (_109:void)<-(_110:str)
    mil.line("# >>>>>#---------------------------------#\n");	# 48 MILline (_111:void)<-(_112:str)
    mil.line("# # BAT:            tmp_23          #\n");	# 49 MILline (_113:void)<-(_114:str)
    mil.line("# # (oid)           (lng)           #\n");	# 50 MILline (_115:void)<-(_116:str)
    mil.line("# #---------------------------------#\n");	# 51 MILline (_117:void)<-(_118:str)
    mil.line("# [ 53991617@0,     60000401        ]\n");	# 52 MILline (_119:void)<-(_120:str)
    mil.line("# [ 53996584@0,     60000400        ]\n");	# 53 MILline (_121:void)<-(_122:str)
    mil.line("# [ 55526089@0,     50015637        ]\n");	# 54 MILline (_123:void)<-(_124:str)
    mil.line("# >#-------------------------#\n");	# 55 MILline (_125:void)<-(_126:str)
    mil.line("# # BAT:            tmp_24  #\n");	# 56 MILline (_127:void)<-(_128:str)
    mil.line("# # (oid)           (lng)   #\n");	# 57 MILline (_129:void)<-(_130:str)
    mil.line("# #-------------------------#\n");	# 58 MILline (_131:void)<-(_132:str)
    mil.line("# [ 53991617@0,     0       ]\n");	# 59 MILline (_133:void)<-(_134:str)
    mil.line("# [ 53996584@0,     0       ]\n");	# 60 MILline (_135:void)<-(_136:str)
    mil.line("# [ 55526089@0,     0       ]\n");	# 61 MILline (_137:void)<-(_138:str)
    mil.line("# >#---------------------------------#\n");	# 62 MILline (_139:void)<-(_140:str)
    mil.line("# # BAT:            tmp_24          #\n");	# 63 MILline (_141:void)<-(_142:str)
    mil.line("# # (oid)           (lng)           #\n");	# 64 MILline (_143:void)<-(_116:str)
    mil.line("# #---------------------------------#\n");	# 65 MILline (_144:void)<-(_118:str)
    mil.line("# [ 53991617@0,     60000401        ]\n");	# 66 MILline (_145:void)<-(_120:str)
    mil.line("# [ 53996584@0,     60000401        ]\n");	# 67 MILline (_146:void)<-(_147:str)
    mil.line("# [ 55526089@0,     60000401        ]\n");	# 68 MILline (_148:void)<-(_149:str)
    mil.line("# >#---------------------------------#\n");	# 69 MILline (_150:void)<-(_140:str)
    mil.line("# # BAT:            tmp_24          #\n");	# 70 MILline (_151:void)<-(_142:str)
    mil.line("# # (oid)           (lng)           #\n");	# 71 MILline (_152:void)<-(_153:str)
    mil.line("# #---------------------------------#\n");	# 72 MILline (_154:void)<-(_155:str)
    mil.line("# [ 53991617@0,     60000401        ]\n");	# 73 MILline (_156:void)<-(_157:str)
    mil.line("# [ 53996584@0,     60000400        ]\n");	# 74 MILline (_158:void)<-(_159:str)
    mil.line("# [ 55526089@0,     50015637        ]\n");	# 75 MILline (_160:void)<-(_161:str)
    mil.line("# >>#-------------------------#\n");	# 76 MILline (_162:void)<-(_163:str)
    mil.line("# # BAT:            tmp_24  #\n");	# 77 MILline (_164:void)<-(_165:str)
    mil.line("# # (oid)           (lng)   #\n");	# 78 MILline (_166:void)<-(_167:str)
    mil.line("# #-------------------------#\n");	# 79 MILline (_168:void)<-(_169:str)
    mil.line("# [ 53991617@0,     0       ]\n");	# 80 MILline (_170:void)<-(_171:str)
    mil.line("# [ 53996584@0,     0       ]\n");	# 81 MILline (_172:void)<-(_173:str)
    mil.line("# [ 55526089@0,     0       ]\n");	# 82 MILline (_174:void)<-(_175:str)
    mil.line("# [ 1@0,            0       ]\n");	# 83 MILline (_176:void)<-(_177:str)
    mil.line("# >#---------------------------------#\n");	# 84 MILline (_178:void)<-(_179:str)
    mil.line("# # BAT:            tmp_24          #\n");	# 85 MILline (_180:void)<-(_181:str)
    mil.line("# # (oid)           (lng)           #\n");	# 86 MILline (_182:void)<-(_153:str)
    mil.line("# #---------------------------------#\n");	# 87 MILline (_183:void)<-(_155:str)
    mil.line("# [ 53991617@0,     60000401        ]\n");	# 88 MILline (_184:void)<-(_157:str)
    mil.line("# [ 53996584@0,     60000401        ]\n");	# 89 MILline (_185:void)<-(_186:str)
    mil.line("# [ 55526089@0,     60000401        ]\n");	# 90 MILline (_187:void)<-(_188:str)
    mil.line("# [ 1@0,            60000401        ]\n");	# 91 MILline (_189:void)<-(_190:str)
    mil.line("# >#---------------------------------#\n");	# 92 MILline (_191:void)<-(_179:str)
    mil.line("# # BAT:            tmp_24          #\n");	# 93 MILline (_192:void)<-(_181:str)
    mil.line("# # (oid)           (lng)           #\n");	# 94 MILline (_193:void)<-(_194:str)
    mil.line("# #---------------------------------#\n");	# 95 MILline (_195:void)<-(_196:str)
    mil.line("# [ 53991617@0,     60000401        ]\n");	# 96 MILline (_197:void)<-(_198:str)
    mil.line("# [ 53996584@0,     60000400        ]\n");	# 97 MILline (_199:void)<-(_200:str)
    mil.line("# [ 55526089@0,     50015637        ]\n");	# 98 MILline (_201:void)<-(_202:str)
    mil.line("# [ 1@0,            1               ]\n");	# 99 MILline (_203:void)<-(_204:str)
    mil.line("setoid(oid(20000000));");	# 100 MILline (_205:void)<-(_206:str)
    aa_a := calc.oid(20000000);	# 101 CALCint2oid (aa_a:oid)<-(_208:int)
    ba_a := calc.setoid(aa_a);	# 102 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("var test := bat.new(oid,lng);");	# 103 MILline (_210:void)<-(_211:str)
    test := bat.new(nil:oid,nil:lng);	# 104 CMDBATnew (test:bat[:oid,:lng])<-(_213:oid)(_214:lng)
    mil.line("test.insert(oid(53991617),lng(60000401));");	# 105 MILline (_215:void)<-(_216:str)
    ca_a := calc.oid(53991617);	# 106 CALCint2oid (ca_a:oid)<-(_218:int)
    da_a := calc.lng(60000401);	# 107 CALCint2lng (da_a:lng)<-(_220:int)
    ea_a := bat.insert(test,ca_a,da_a);	# 108 BKCinsert_bun_oid_any (ea_a:void)<-(test:bat[:oid,:lng])(ca_a:oid)(da_a:lng)
    mil.line("test.insert(oid(53996584),lng(60000400));");	# 109 MILline (_222:void)<-(_223:str)
    fa_a := calc.oid(53996584);	# 110 CALCint2oid (fa_a:oid)<-(_225:int)
    ga_a := calc.lng(60000400);	# 111 CALCint2lng (ga_a:lng)<-(_227:int)
    ha_a := bat.insert(test,fa_a,ga_a);	# 112 BKCinsert_bun_oid_any (ha_a:void)<-(test:bat[:oid,:lng])(fa_a:oid)(ga_a:lng)
    mil.line("test.insert(oid(55526089),lng(50015637));");	# 113 MILline (_229:void)<-(_230:str)
    ia_a := calc.oid(55526089);	# 114 CALCint2oid (ia_a:oid)<-(_232:int)
    ja_a := calc.lng(50015637);	# 115 CALCint2lng (ja_a:lng)<-(_234:int)
    ka_a := bat.insert(test,ia_a,ja_a);	# 116 BKCinsert_bun_oid_any (ka_a:void)<-(test:bat[:oid,:lng])(ia_a:oid)(ja_a:lng)
    mil.line("test.print();");	# 117 MILline (_236:void)<-(_237:str)
    la_a := io.print(test);	# 118 IOprint_val (la_a:int)<-(test:bat[:oid,:lng])
    mil.line("test.select(lng(0)).print();");	# 119 MILline (_239:void)<-(_240:str)
    ma_a := calc.lng(0);	# 120 CALCint2lng (ma_a:lng)<-(_242:int)
    na_a := algebra.select(test,ma_a);	# 121 ALGselect1 (na_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(ma_a:lng)
    oa_a := io.print(na_a);	# 122 IOprint_val (oa_a:int)<-(na_a:bat[:oid,:lng])
    mil.line("test.select(lng(60000401)).print();");	# 123 MILline (_245:void)<-(_246:str)
    pa_a := calc.lng(60000401);	# 124 CALCint2lng (pa_a:lng)<-(_220:int)
    qa_a := algebra.select(test,pa_a);	# 125 ALGselect1 (qa_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(pa_a:lng)
    ra_a := io.print(qa_a);	# 126 IOprint_val (ra_a:int)<-(qa_a:bat[:oid,:lng])
    mil.line("test.select(lng(0),lng(1)).print();");	# 127 MILline (_250:void)<-(_251:str)
    sa_a := calc.lng(0);	# 128 CALCint2lng (sa_a:lng)<-(_242:int)
    ta_a := calc.lng(1);	# 129 CALCint2lng (ta_a:lng)<-(_254:int)
    ua_a := algebra.select(test,sa_a,ta_a);	# 130 ALGselect (ua_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(sa_a:lng)(ta_a:lng)
    va_a := io.print(ua_a);	# 131 IOprint_val (va_a:int)<-(ua_a:bat[:oid,:lng])
    mil.line("test.insert(oid(1),lng(1));");	# 132 MILline (_257:void)<-(_258:str)
    wa_a := calc.oid(1);	# 133 CALCint2oid (wa_a:oid)<-(_254:int)
    xa_a := calc.lng(1);	# 134 CALCint2lng (xa_a:lng)<-(_254:int)
    ya_a := bat.insert(test,wa_a,xa_a);	# 135 BKCinsert_bun_oid_any (ya_a:void)<-(test:bat[:oid,:lng])(wa_a:oid)(xa_a:lng)
    mil.line("test.select(lng(0)).print();");	# 136 MILline (_262:void)<-(_240:str)
    ab_a := calc.lng(0);	# 137 CALCint2lng (ab_a:lng)<-(_242:int)
    bb_a := algebra.select(test,ab_a);	# 138 ALGselect1 (bb_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(ab_a:lng)
    cb_a := io.print(bb_a);	# 139 IOprint_val (cb_a:int)<-(bb_a:bat[:oid,:lng])
    mil.line("test.select(lng(60000401)).print();");	# 140 MILline (_266:void)<-(_246:str)
    db_a := calc.lng(60000401);	# 141 CALCint2lng (db_a:lng)<-(_268:int)
    eb_a := algebra.select(test,db_a);	# 142 ALGselect1 (eb_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(db_a:lng)
    fb_a := io.print(eb_a);	# 143 IOprint_val (fb_a:int)<-(eb_a:bat[:oid,:lng])
    mil.line("test.select(lng(0),lng(1)).print();");	# 144 MILline (_271:void)<-(_251:str)
    gb_a := calc.lng(0);	# 145 CALCint2lng (gb_a:lng)<-(_242:int)
    hb_a := calc.lng(1);	# 146 CALCint2lng (hb_a:lng)<-(_254:int)
    ib_a := algebra.select(test,gb_a,hb_a);	# 147 ALGselect (ib_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(gb_a:lng)(hb_a:lng)
    jb_a := io.print(ib_a);	# 148 IOprint_val (jb_a:int)<-(ib_a:bat[:oid,:lng])
    mil.line("quit();");	# 149 MILline (_276:void)<-(_277:str)
    kb_a := clients.quit();	# 150 CLTquit (kb_a:void)
end main;	# 151  
## >Number:         157\n
## >Category:       Mserver\n
## >Synopsis:       long selects\n
## >Confidential:   no\n
## >Severity:       critical\n
## >Priority:       high\n
## >Responsible:    boncz (Peter Boncz)\n
## >State:          open\n
## >Class:          sw-bug\n
## >Submitter-Id:   unknown\n
## >Arrival-Date:   Tue Jun 23 13:42:30 1998\n
## >Originator:     windhouw@cwi.nl\n
## >Organization:\n
## CWI\n
## >Release:        980101\n
## >Environment:\n
## \n
## >Description:\n
## Selection of longs results in rather strange results:\n
## \n
## Test script\n
## 8<----\n
## test := bbp.new(oid,lng);\n
## test.insert(oid(53991617),lng(60000401));\n
## test.insert(oid(53996584),lng(60000400));\n
## test.insert(oid(55526089),lng(50015637));\n
## test.print;\n
## test.select(lng(0)).print;\n
## test.select(lng(60000401)).print;\n
## test.select(lng(0),lng(1)).print;\n
## test.insert(oid(1),lng(1));\n
## test.select(lng(0)).print;\n
## test.select(lng(60000401)).print;\n
## test.select(lng(0),lng(1)).print;\n
## \n
## 8<-----\n
## Test output\n
## 8<-----\n
## #You are system administrator (adm)!\n
## >>>>>#---------------------------------#\n
## # BAT:            tmp_23          #\n
## # (oid)           (lng)           #\n
## #---------------------------------#\n
## [ 53991617@0,     60000401        ]\n
## [ 53996584@0,     60000400        ]\n
## [ 55526089@0,     50015637        ]\n
## >#-------------------------#\n
## # BAT:            tmp_24  #\n
## # (oid)           (lng)   #\n
## #-------------------------#\n
## [ 53991617@0,     0       ]\n
## [ 53996584@0,     0       ]\n
## [ 55526089@0,     0       ]\n
## >#---------------------------------#\n
## # BAT:            tmp_24          #\n
## # (oid)           (lng)           #\n
## #---------------------------------#\n
## [ 53991617@0,     60000401        ]\n
## [ 53996584@0,     60000401        ]\n
## [ 55526089@0,     60000401        ]\n
## >#---------------------------------#\n
## # BAT:            tmp_24          #\n
## # (oid)           (lng)           #\n
## #---------------------------------#\n
## [ 53991617@0,     60000401        ]\n
## [ 53996584@0,     60000400        ]\n
## [ 55526089@0,     50015637        ]\n
## >>#-------------------------#\n
## # BAT:            tmp_24  #\n
## # (oid)           (lng)   #\n
## #-------------------------#\n
## [ 53991617@0,     0       ]\n
## [ 53996584@0,     0       ]\n
## [ 55526089@0,     0       ]\n
## [ 1@0,            0       ]\n
## >#---------------------------------#\n
## # BAT:            tmp_24          #\n
## # (oid)           (lng)           #\n
## #---------------------------------#\n
## [ 53991617@0,     60000401        ]\n
## [ 53996584@0,     60000401        ]\n
## [ 55526089@0,     60000401        ]\n
## [ 1@0,            60000401        ]\n
## >#---------------------------------#\n
## # BAT:            tmp_24          #\n
## # (oid)           (lng)           #\n
## #---------------------------------#\n
## [ 53991617@0,     60000401        ]\n
## [ 53996584@0,     60000400        ]\n
## [ 55526089@0,     50015637        ]\n
## [ 1@0,            1               ]\n
#setoid(oid(20000000));
#var test := new(oid,lng);
#test.insert(oid(53991617),lng(60000401));
#test.insert(oid(53996584),lng(60000400));
#test.insert(oid(55526089),lng(50015637));
#test.print();
#---------------------------------#
# BAT:		  tmp_30	  #
# (oid)		  (lng)		  #
#---------------------------------#
[ 53991617@0,	  60000401	  ]
[ 53996584@0,	  60000400	  ]
[ 55526089@0,	  50015637	  ]
#test.select(lng(0)).print();
#-----------------#
# BAT:	  tmp_70  #
# (oid)	  (lng)	  #
#-----------------#
#test.select(lng(60000401)).print();
#---------------------------------#
# BAT:		  tmp_70	  #
# (oid)		  (lng)		  #
#---------------------------------#
[ 53991617@0,	  60000401	  ]
#test.select(lng(0),lng(1)).print();
#-----------------#
# BAT:	  tmp_70  #
# (oid)	  (lng)	  #
#-----------------#
#test.insert(oid(1),lng(1));
#test.select(lng(0)).print();
#-----------------#
# BAT:	  tmp_70  #
# (oid)	  (lng)	  #
#-----------------#
#test.select(lng(60000401)).print();
#---------------------------------#
# BAT:		  tmp_70	  #
# (oid)		  (lng)		  #
#---------------------------------#
[ 53991617@0,	  60000401	  ]
#test.select(lng(0),lng(1)).print();
#-----------------#
# BAT:	  tmp_70  #
# (oid)	  (lng)	  #
#-----------------#
[ 1@0,	  1	  ]

# 14:17:56 >  
# 14:17:56 >  Done.
# 14:17:56 >  

