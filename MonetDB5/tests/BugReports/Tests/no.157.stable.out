stdout of test 'no.157` in directory 'tests/BugReports` itself:


# 07:27:16 >  
# 07:27:16 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.157.mal < /dev/null
# 07:27:16 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# >Number:         157\n");
##	mil.line("# >Category:       Mserver\n");
##	mil.line("# >Synopsis:       long selects\n");
##	mil.line("# >Confidential:   no\n");
##	mil.line("# >Severity:       critical\n");
##	mil.line("# >Priority:       high\n");
##	mil.line("# >Responsible:    boncz (Peter Boncz)\n");
##	mil.line("# >State:          open\n");
##	mil.line("# >Class:          sw-bug\n");
##	mil.line("# >Submitter-Id:   unknown\n");
##	mil.line("# >Arrival-Date:   Tue Jun 23 13:42:30 1998\n");
##	mil.line("# >Originator:     windhouw@cwi.nl\n");
##	mil.line("# >Organization:\n");
##	mil.line("# CWI\n");
##	mil.line("# >Release:        980101\n");
##	mil.line("# >Environment:\n");
##	mil.line("# \n");
##	mil.line("# >Description:\n");
##	mil.line("# Selection of longs results in rather strange results:\n");
##	mil.line("# \n");
##	mil.line("# Test script\n");
##	mil.line("# 8<----\n");
##	mil.line("# test := bat.new(oid,lng);\n");
##	mil.line("# test.insert(oid(53991617),lng(60000401));\n");
##	mil.line("# test.insert(oid(53996584),lng(60000400));\n");
##	mil.line("# test.insert(oid(55526089),lng(50015637));\n");
##	mil.line("# test.print;\n");
##	mil.line("# test.select(lng(0)).print;\n");
##	mil.line("# test.select(lng(60000401)).print;\n");
##	mil.line("# test.select(lng(0),lng(1)).print;\n");
##	mil.line("# test.insert(oid(1),lng(1));\n");
##	mil.line("# test.select(lng(0)).print;\n");
##	mil.line("# test.select(lng(60000401)).print;\n");
##	mil.line("# test.select(lng(0),lng(1)).print;\n");
##	mil.line("# \n");
##	mil.line("# 8<-----\n");
##	mil.line("# Test output\n");
##	mil.line("# 8<-----\n");
##	mil.line("# #You are system administrator (adm)!\n");
##	mil.line("# >>>>>#---------------------------------#\n");
##	mil.line("# # BAT:            tmp_23          #\n");
##	mil.line("# # (oid)           (lng)           #\n");
##	mil.line("# #---------------------------------#\n");
##	mil.line("# [ 53991617@0,     60000401        ]\n");
##	mil.line("# [ 53996584@0,     60000400        ]\n");
##	mil.line("# [ 55526089@0,     50015637        ]\n");
##	mil.line("# >#-------------------------#\n");
##	mil.line("# # BAT:            tmp_24  #\n");
##	mil.line("# # (oid)           (lng)   #\n");
##	mil.line("# #-------------------------#\n");
##	mil.line("# [ 53991617@0,     0       ]\n");
##	mil.line("# [ 53996584@0,     0       ]\n");
##	mil.line("# [ 55526089@0,     0       ]\n");
##	mil.line("# >#---------------------------------#\n");
##	mil.line("# # BAT:            tmp_24          #\n");
##	mil.line("# # (oid)           (lng)           #\n");
##	mil.line("# #---------------------------------#\n");
##	mil.line("# [ 53991617@0,     60000401        ]\n");
##	mil.line("# [ 53996584@0,     60000401        ]\n");
##	mil.line("# [ 55526089@0,     60000401        ]\n");
##	mil.line("# >#---------------------------------#\n");
##	mil.line("# # BAT:            tmp_24          #\n");
##	mil.line("# # (oid)           (lng)           #\n");
##	mil.line("# #---------------------------------#\n");
##	mil.line("# [ 53991617@0,     60000401        ]\n");
##	mil.line("# [ 53996584@0,     60000400        ]\n");
##	mil.line("# [ 55526089@0,     50015637        ]\n");
##	mil.line("# >>#-------------------------#\n");
##	mil.line("# # BAT:            tmp_24  #\n");
##	mil.line("# # (oid)           (lng)   #\n");
##	mil.line("# #-------------------------#\n");
##	mil.line("# [ 53991617@0,     0       ]\n");
##	mil.line("# [ 53996584@0,     0       ]\n");
##	mil.line("# [ 55526089@0,     0       ]\n");
##	mil.line("# [ 1@0,            0       ]\n");
##	mil.line("# >#---------------------------------#\n");
##	mil.line("# # BAT:            tmp_24          #\n");
##	mil.line("# # (oid)           (lng)           #\n");
##	mil.line("# #---------------------------------#\n");
##	mil.line("# [ 53991617@0,     60000401        ]\n");
##	mil.line("# [ 53996584@0,     60000401        ]\n");
##	mil.line("# [ 55526089@0,     60000401        ]\n");
##	mil.line("# [ 1@0,            60000401        ]\n");
##	mil.line("# >#---------------------------------#\n");
##	mil.line("# # BAT:            tmp_24          #\n");
##	mil.line("# # (oid)           (lng)           #\n");
##	mil.line("# #---------------------------------#\n");
##	mil.line("# [ 53991617@0,     60000401        ]\n");
##	mil.line("# [ 53996584@0,     60000400        ]\n");
##	mil.line("# [ 55526089@0,     50015637        ]\n");
##	mil.line("# [ 1@0,            1               ]\n");
##	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
##	mil.line("var test := bat.new(oid,lng);");
#	test := bat.new(nil:oid,nil:lng);
##	mil.line("test.insert(oid(53991617),lng(60000401));");
#	ca_a := calc.oid(53991617);
#	da_a := calc.lng(60000401);
#	ea_a := bat.insert(test,ca_a,da_a);
##	mil.line("test.insert(oid(53996584),lng(60000400));");
#	fa_a := calc.oid(53996584);
#	ga_a := calc.lng(60000400);
#	ha_a := bat.insert(test,fa_a,ga_a);
##	mil.line("test.insert(oid(55526089),lng(50015637));");
#	ia_a := calc.oid(55526089);
#	ja_a := calc.lng(50015637);
#	ka_a := bat.insert(test,ia_a,ja_a);
##	mil.line("test.print();");
#	la_a := io.print(test);
##	mil.line("test.select(lng(0)).print();");
#	ma_a := calc.lng(0);
#	na_a := algebra.select(test,ma_a);
#	oa_a := io.print(na_a);
##	mil.line("test.select(lng(60000401)).print();");
#	pa_a := calc.lng(60000401);
#	qa_a := algebra.select(test,pa_a);
#	ra_a := io.print(qa_a);
##	mil.line("test.select(lng(0),lng(1)).print();");
#	sa_a := calc.lng(0);
#	ta_a := calc.lng(1);
#	ua_a := algebra.select(test,sa_a,ta_a);
#	va_a := io.print(ua_a);
##	mil.line("test.insert(oid(1),lng(1));");
#	wa_a := calc.oid(1);
#	xa_a := calc.lng(1);
#	ya_a := bat.insert(test,wa_a,xa_a);
##	mil.line("test.select(lng(0)).print();");
#	ab_a := calc.lng(0);
#	bb_a := algebra.select(test,ab_a);
#	cb_a := io.print(bb_a);
##	mil.line("test.select(lng(60000401)).print();");
#	db_a := calc.lng(60000401);
#	eb_a := algebra.select(test,db_a);
#	fb_a := io.print(eb_a);
##	mil.line("test.select(lng(0),lng(1)).print();");
#	gb_a := calc.lng(0);
#	hb_a := calc.lng(1);
#	ib_a := algebra.select(test,gb_a,hb_a);
#	jb_a := io.print(ib_a);
##	mil.line("quit();");
#	kb_a := clients.quit();
#
function user.main():void;              #  0 main:void := user.main() {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("# >Number:         157\n"); 
#	io.print("# >Category:       Mserver\n"); 
#	io.print("# >Synopsis:       long selects\n"); 
#	io.print("# >Confidential:   no\n"); 
#	io.print("# >Severity:       critical\n"); 
#	io.print("# >Priority:       high\n"); 
#	io.print("# >Responsible:    boncz (Peter Boncz)\n"); 
#	io.print("# >State:          open\n"); 
#	io.print("# >Class:          sw-bug\n"); 
#	io.print("# >Submitter-Id:   unknown\n"); 
#	io.print("# >Arrival-Date:   Tue Jun 23 13:42:30 1998\n"); 
#	io.print("# >Originator:     windhouw@cwi.nl\n"); 
#	io.print("# >Organization:\n"); 
#	io.print("# CWI\n"); 
#	io.print("# >Release:        980101\n"); 
#	io.print("# >Environment:\n"); 
#	io.print("# \n"); 
#	io.print("# >Description:\n"); 
#	io.print("# Selection of longs results in rather strange results:\n"); 
#	io.print("# \n"); 
#	io.print("# Test script\n"); 
#	io.print("# 8<----\n"); 
#	io.print("# test := bat.new(oid,lng);\n"); 
#	io.print("# test.insert(oid(53991617),lng(60000401));\n"); 
#	io.print("# test.insert(oid(53996584),lng(60000400));\n"); 
#	io.print("# test.insert(oid(55526089),lng(50015637));\n"); 
#	io.print("# test.print;\n"); 
#	io.print("# test.select(lng(0)).print;\n"); 
#	io.print("# test.select(lng(60000401)).print;\n"); 
#	io.print("# test.select(lng(0),lng(1)).print;\n"); 
#	io.print("# test.insert(oid(1),lng(1));\n"); 
#	io.print("# test.select(lng(0)).print;\n"); 
#	io.print("# test.select(lng(60000401)).print;\n"); 
#	io.print("# test.select(lng(0),lng(1)).print;\n"); 
#	io.print("# \n"); 
#	io.print("# 8<-----\n"); 
#	io.print("# Test output\n"); 
#	io.print("# 8<-----\n"); 
#	io.print("# #You are system administrator (adm)!\n"); 
#	io.print("# >>>>>#---------------------------------#\n"); 
#	io.print("# # BAT:            tmp_23          #\n"); 
#	io.print("# # (oid)           (lng)           #\n"); 
#	io.print("# #---------------------------------#\n"); 
#	io.print("# [ 53991617@0,     60000401        ]\n"); 
#	io.print("# [ 53996584@0,     60000400        ]\n"); 
#	io.print("# [ 55526089@0,     50015637        ]\n"); 
#	io.print("# >#-------------------------#\n"); 
#	io.print("# # BAT:            tmp_24  #\n"); 
#	io.print("# # (oid)           (lng)   #\n"); 
#	io.print("# #-------------------------#\n"); 
#	io.print("# [ 53991617@0,     0       ]\n"); 
#	io.print("# [ 53996584@0,     0       ]\n"); 
#	io.print("# [ 55526089@0,     0       ]\n"); 
#	io.print("# >#---------------------------------#\n"); 
#	io.print("# # BAT:            tmp_24          #\n"); 
#	io.print("# # (oid)           (lng)           #\n"); 
#	io.print("# #---------------------------------#\n"); 
#	io.print("# [ 53991617@0,     60000401        ]\n"); 
#	io.print("# [ 53996584@0,     60000401        ]\n"); 
#	io.print("# [ 55526089@0,     60000401        ]\n"); 
#	io.print("# >#---------------------------------#\n"); 
#	io.print("# # BAT:            tmp_24          #\n"); 
#	io.print("# # (oid)           (lng)           #\n"); 
#	io.print("# #---------------------------------#\n"); 
#	io.print("# [ 53991617@0,     60000401        ]\n"); 
#	io.print("# [ 53996584@0,     60000400        ]\n"); 
#	io.print("# [ 55526089@0,     50015637        ]\n"); 
#	io.print("# >>#-------------------------#\n"); 
#	io.print("# # BAT:            tmp_24  #\n"); 
#	io.print("# # (oid)           (lng)   #\n"); 
#	io.print("# #-------------------------#\n"); 
#	io.print("# [ 53991617@0,     0       ]\n"); 
#	io.print("# [ 53996584@0,     0       ]\n"); 
#	io.print("# [ 55526089@0,     0       ]\n"); 
#	io.print("# [ 1@0,            0       ]\n"); 
#	io.print("# >#---------------------------------#\n"); 
#	io.print("# # BAT:            tmp_24          #\n"); 
#	io.print("# # (oid)           (lng)           #\n"); 
#	io.print("# #---------------------------------#\n"); 
#	io.print("# [ 53991617@0,     60000401        ]\n"); 
#	io.print("# [ 53996584@0,     60000401        ]\n"); 
#	io.print("# [ 55526089@0,     60000401        ]\n"); 
#	io.print("# [ 1@0,            60000401        ]\n"); 
#	io.print("# >#---------------------------------#\n"); 
#	io.print("# # BAT:            tmp_24          #\n"); 
#	io.print("# # (oid)           (lng)           #\n"); 
#	io.print("# #---------------------------------#\n"); 
#	io.print("# [ 53991617@0,     60000401        ]\n"); 
#	io.print("# [ 53996584@0,     60000400        ]\n"); 
#	io.print("# [ 55526089@0,     50015637        ]\n"); 
#	io.print("# [ 1@0,            1               ]\n"); 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         #102 aa_a:oid := CALCint2oid(_103:int) 
    ba_a := calc.setoid(aa_a);          #103 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("var test := bat.new(oid,lng);"); 
    test := bat.new(nil:oid,nil:lng);   #105 test:bat[:oid,:lng] := CMDBATnew(_107:oid, _108:lng) {G}
#	io.print("test.insert(oid(53991617),lng(60000401));"); 
    ca_a := calc.oid(53991617);         #107 ca_a:oid := CALCint2oid(_111:int) 
    da_a := calc.lng(60000401);         #108 da_a:lng := CALCint2lng(_113:int) 
    ea_a := bat.insert(test,ca_a,da_a); #109 ea_a:bat[:oid,:lng] := BKCinsert_bun(test:bat[:oid,:lng], ca_a:oid, da_a:lng) {G}
#	io.print("test.insert(oid(53996584),lng(60000400));"); 
    fa_a := calc.oid(53996584);         #111 fa_a:oid := CALCint2oid(_117:int) 
    ga_a := calc.lng(60000400);         #112 ga_a:lng := CALCint2lng(_119:int) 
    ha_a := bat.insert(test,fa_a,ga_a); #113 ha_a:bat[:oid,:lng] := BKCinsert_bun(test:bat[:oid,:lng], fa_a:oid, ga_a:lng) {G}
#	io.print("test.insert(oid(55526089),lng(50015637));"); 
    ia_a := calc.oid(55526089);         #115 ia_a:oid := CALCint2oid(_123:int) 
    ja_a := calc.lng(50015637);         #116 ja_a:lng := CALCint2lng(_125:int) 
    ka_a := bat.insert(test,ia_a,ja_a); #117 ka_a:bat[:oid,:lng] := BKCinsert_bun(test:bat[:oid,:lng], ia_a:oid, ja_a:lng) {G}
#	io.print("test.print();"); 
    la_a := io.print(test);             #119 la_a:void := IOprint_val(test:bat[:oid,:lng]) 
#	io.print("test.select(lng(0)).print();"); 
    ma_a := calc.lng(0);                #121 ma_a:lng := CALCint2lng(_131:int) 
    na_a := algebra.select(test,ma_a);  #122 na_a:bat[:oid,:lng] := ALGselect1(test:bat[:oid,:lng], ma_a:lng) {G}
    oa_a := io.print(na_a);             #123 oa_a:void := IOprint_val(na_a:bat[:oid,:lng]) 
#	io.print("test.select(lng(60000401)).print();"); 
    pa_a := calc.lng(60000401);         #125 pa_a:lng := CALCint2lng(_113:int) 
    qa_a := algebra.select(test,pa_a);  #126 qa_a:bat[:oid,:lng] := ALGselect1(test:bat[:oid,:lng], pa_a:lng) {G}
    ra_a := io.print(qa_a);             #127 ra_a:void := IOprint_val(qa_a:bat[:oid,:lng]) 
#	io.print("test.select(lng(0),lng(1)).print();"); 
    sa_a := calc.lng(0);                #129 sa_a:lng := CALCint2lng(_131:int) 
    ta_a := calc.lng(1);                #130 ta_a:lng := CALCint2lng(_141:int) 
    ua_a := algebra.select(test,sa_a,ta_a);#131 ua_a:bat[:oid,:lng] := ALGselect(test:bat[:oid,:lng], sa_a:lng, ta_a:lng) {G}
    va_a := io.print(ua_a);             #132 va_a:void := IOprint_val(ua_a:bat[:oid,:lng]) 
#	io.print("test.insert(oid(1),lng(1));"); 
    wa_a := calc.oid(1);                #134 wa_a:oid := CALCint2oid(_141:int) 
    xa_a := calc.lng(1);                #135 xa_a:lng := CALCint2lng(_141:int) 
    ya_a := bat.insert(test,wa_a,xa_a); #136 ya_a:bat[:oid,:lng] := BKCinsert_bun(test:bat[:oid,:lng], wa_a:oid, xa_a:lng) {G}
#	io.print("test.select(lng(0)).print();"); 
    ab_a := calc.lng(0);                #138 ab_a:lng := CALCint2lng(_131:int) 
    bb_a := algebra.select(test,ab_a);  #139 bb_a:bat[:oid,:lng] := ALGselect1(test:bat[:oid,:lng], ab_a:lng) {G}
    cb_a := io.print(bb_a);             #140 cb_a:void := IOprint_val(bb_a:bat[:oid,:lng]) 
#	io.print("test.select(lng(60000401)).print();"); 
    db_a := calc.lng(60000401);         #142 db_a:lng := CALCint2lng(_154:int) 
    eb_a := algebra.select(test,db_a);  #143 eb_a:bat[:oid,:lng] := ALGselect1(test:bat[:oid,:lng], db_a:lng) {G}
    fb_a := io.print(eb_a);             #144 fb_a:void := IOprint_val(eb_a:bat[:oid,:lng]) 
#	io.print("test.select(lng(0),lng(1)).print();"); 
    gb_a := calc.lng(0);                #146 gb_a:lng := CALCint2lng(_131:int) 
    hb_a := calc.lng(1);                #147 hb_a:lng := CALCint2lng(_141:int) 
    ib_a := algebra.select(test,gb_a,hb_a);#148 ib_a:bat[:oid,:lng] := ALGselect(test:bat[:oid,:lng], gb_a:lng, hb_a:lng) {G}
    jb_a := io.print(ib_a);             #149 jb_a:void := IOprint_val(ib_a:bat[:oid,:lng]) 
#	io.print("quit();"); 
    kb_a := clients.quit();             #151 kb_a:void := CLTquit() 
end main;                               #152  
#---------------------------------#
# h		t		  # name
# oid		lng		  # type
#---------------------------------#
[ 53991617@0,	  60000401	  ]
[ 53996584@0,	  60000400	  ]
[ 55526089@0,	  50015637	  ]
#-----------------#
# h	t	  # name
# oid	lng	  # type
#-----------------#
#---------------------------------#
# h		t		  # name
# oid		lng		  # type
#---------------------------------#
[ 53991617@0,	  60000401	  ]
#-----------------#
# h	t	  # name
# oid	lng	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	lng	  # type
#-----------------#
#---------------------------------#
# h		t		  # name
# oid		lng		  # type
#---------------------------------#
[ 53991617@0,	  60000401	  ]
#-----------------#
# h	t	  # name
# oid	lng	  # type
#-----------------#
[ 1@0,	  1	  ]

# 07:27:16 >  
# 07:27:16 >  Done.
# 07:27:16 >  

