stdout of test 'no.157` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.157 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.157.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.157.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# >Number:         157
# >Category:       Mserver
# >Synopsis:       long selects
# >Confidential:   no
# >Severity:       critical
# >Priority:       high
# >Responsible:    boncz (Peter Boncz)
# >State:          open
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Tue Jun 23 13:42:30 1998
# >Originator:     windhouw@cwi.nl
# >Organization:
# CWI
# >Release:        980101
# >Environment:
# 
# >Description:
# Selection of longs results in rather strange results:
# 
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
#include mil; 	# 2  (_2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 3  (_3:str)
#Predefined code segment 	# 4  (_4:str)
#The compiler can not guarantee an accurate compilation, 	# 5  (_5:str)
#because MIL unlike MAL is a dynamically typed language. 	# 6  (_6:str)
#A few guidelines to maximize usefullness. 	# 7  (_7:str)
#- make the type of variables explicit, in particular 'nil' 	# 8  (_8:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 9  (_9:str)
#use the "mil_schema" for additional support routines 	# 10  (_10:str)
#	mil.line("# >Number:         157\n"); 	# 11  (_11:str)
#	mil.line("# >Category:       Mserver\n"); 	# 12  (_12:str)
#	mil.line("# >Synopsis:       long selects\n"); 	# 13  (_13:str)
#	mil.line("# >Confidential:   no\n"); 	# 14  (_14:str)
#	mil.line("# >Severity:       critical\n"); 	# 15  (_15:str)
#	mil.line("# >Priority:       high\n"); 	# 16  (_16:str)
#	mil.line("# >Responsible:    boncz (Peter Boncz)\n"); 	# 17  (_17:str)
#	mil.line("# >State:          open\n"); 	# 18  (_18:str)
#	mil.line("# >Class:          sw-bug\n"); 	# 19  (_19:str)
#	mil.line("# >Submitter-Id:   unknown\n"); 	# 20  (_20:str)
#	mil.line("# >Arrival-Date:   Tue Jun 23 13:42:30 1998\n"); 	# 21  (_21:str)
#	mil.line("# >Originator:     windhouw@cwi.nl\n"); 	# 22  (_22:str)
#	mil.line("# >Organization:\n"); 	# 23  (_23:str)
#	mil.line("# CWI\n"); 	# 24  (_24:str)
#	mil.line("# >Release:        980101\n"); 	# 25  (_25:str)
#	mil.line("# >Environment:\n"); 	# 26  (_26:str)
#	mil.line("# \n"); 	# 27  (_27:str)
#	mil.line("# >Description:\n"); 	# 28  (_28:str)
#	mil.line("# Selection of longs results in rather strange results:\n"); 	# 29  (_29:str)
#	mil.line("# \n"); 	# 30  (_27:str)
#	mil.line("# Test script\n"); 	# 31  (_30:str)
#	mil.line("# 8<----\n"); 	# 32  (_31:str)
#	mil.line("# test := bat.new(oid,lng);\n"); 	# 33  (_32:str)
#	mil.line("# test.insert(oid(53991617),lng(60000401));\n"); 	# 34  (_33:str)
#	mil.line("# test.insert(oid(53996584),lng(60000400));\n"); 	# 35  (_34:str)
#	mil.line("# test.insert(oid(55526089),lng(50015637));\n"); 	# 36  (_35:str)
#	mil.line("# test.print;\n"); 	# 37  (_36:str)
#	mil.line("# test.select(lng(0)).print;\n"); 	# 38  (_37:str)
#	mil.line("# test.select(lng(60000401)).print;\n"); 	# 39  (_38:str)
#	mil.line("# test.select(lng(0),lng(1)).print;\n"); 	# 40  (_39:str)
#	mil.line("# test.insert(oid(1),lng(1));\n"); 	# 41  (_40:str)
#	mil.line("# test.select(lng(0)).print;\n"); 	# 42  (_37:str)
#	mil.line("# test.select(lng(60000401)).print;\n"); 	# 43  (_38:str)
#	mil.line("# test.select(lng(0),lng(1)).print;\n"); 	# 44  (_39:str)
#	mil.line("# \n"); 	# 45  (_27:str)
#	mil.line("# 8<-----\n"); 	# 46  (_41:str)
#	mil.line("# Test output\n"); 	# 47  (_42:str)
#	mil.line("# 8<-----\n"); 	# 48  (_41:str)
#	mil.line("# #You are system administrator (adm)!\n"); 	# 49  (_43:str)
#	mil.line("# >>>>>#---------------------------------#\n"); 	# 50  (_44:str)
#	mil.line("# # BAT:            tmp_23          #\n"); 	# 51  (_45:str)
#	mil.line("# # (oid)           (lng)           #\n"); 	# 52  (_46:str)
#	mil.line("# #---------------------------------#\n"); 	# 53  (_47:str)
#	mil.line("# [ 53991617@0,     60000401        ]\n"); 	# 54  (_48:str)
#	mil.line("# [ 53996584@0,     60000400        ]\n"); 	# 55  (_49:str)
#	mil.line("# [ 55526089@0,     50015637        ]\n"); 	# 56  (_50:str)
#	mil.line("# >#-------------------------#\n"); 	# 57  (_51:str)
#	mil.line("# # BAT:            tmp_24  #\n"); 	# 58  (_52:str)
#	mil.line("# # (oid)           (lng)   #\n"); 	# 59  (_53:str)
#	mil.line("# #-------------------------#\n"); 	# 60  (_54:str)
#	mil.line("# [ 53991617@0,     0       ]\n"); 	# 61  (_55:str)
#	mil.line("# [ 53996584@0,     0       ]\n"); 	# 62  (_56:str)
#	mil.line("# [ 55526089@0,     0       ]\n"); 	# 63  (_57:str)
#	mil.line("# >#---------------------------------#\n"); 	# 64  (_58:str)
#	mil.line("# # BAT:            tmp_24          #\n"); 	# 65  (_59:str)
#	mil.line("# # (oid)           (lng)           #\n"); 	# 66  (_46:str)
#	mil.line("# #---------------------------------#\n"); 	# 67  (_47:str)
#	mil.line("# [ 53991617@0,     60000401        ]\n"); 	# 68  (_48:str)
#	mil.line("# [ 53996584@0,     60000401        ]\n"); 	# 69  (_60:str)
#	mil.line("# [ 55526089@0,     60000401        ]\n"); 	# 70  (_61:str)
#	mil.line("# >#---------------------------------#\n"); 	# 71  (_58:str)
#	mil.line("# # BAT:            tmp_24          #\n"); 	# 72  (_59:str)
#	mil.line("# # (oid)           (lng)           #\n"); 	# 73  (_46:str)
#	mil.line("# #---------------------------------#\n"); 	# 74  (_47:str)
#	mil.line("# [ 53991617@0,     60000401        ]\n"); 	# 75  (_48:str)
#	mil.line("# [ 53996584@0,     60000400        ]\n"); 	# 76  (_49:str)
#	mil.line("# [ 55526089@0,     50015637        ]\n"); 	# 77  (_50:str)
#	mil.line("# >>#-------------------------#\n"); 	# 78  (_62:str)
#	mil.line("# # BAT:            tmp_24  #\n"); 	# 79  (_52:str)
#	mil.line("# # (oid)           (lng)   #\n"); 	# 80  (_53:str)
#	mil.line("# #-------------------------#\n"); 	# 81  (_54:str)
#	mil.line("# [ 53991617@0,     0       ]\n"); 	# 82  (_55:str)
#	mil.line("# [ 53996584@0,     0       ]\n"); 	# 83  (_56:str)
#	mil.line("# [ 55526089@0,     0       ]\n"); 	# 84  (_57:str)
#	mil.line("# [ 1@0,            0       ]\n"); 	# 85  (_63:str)
#	mil.line("# >#---------------------------------#\n"); 	# 86  (_58:str)
#	mil.line("# # BAT:            tmp_24          #\n"); 	# 87  (_59:str)
#	mil.line("# # (oid)           (lng)           #\n"); 	# 88  (_46:str)
#	mil.line("# #---------------------------------#\n"); 	# 89  (_47:str)
#	mil.line("# [ 53991617@0,     60000401        ]\n"); 	# 90  (_48:str)
#	mil.line("# [ 53996584@0,     60000401        ]\n"); 	# 91  (_60:str)
#	mil.line("# [ 55526089@0,     60000401        ]\n"); 	# 92  (_61:str)
#	mil.line("# [ 1@0,            60000401        ]\n"); 	# 93  (_64:str)
#	mil.line("# >#---------------------------------#\n"); 	# 94  (_58:str)
#	mil.line("# # BAT:            tmp_24          #\n"); 	# 95  (_59:str)
#	mil.line("# # (oid)           (lng)           #\n"); 	# 96  (_46:str)
#	mil.line("# #---------------------------------#\n"); 	# 97  (_47:str)
#	mil.line("# [ 53991617@0,     60000401        ]\n"); 	# 98  (_48:str)
#	mil.line("# [ 53996584@0,     60000400        ]\n"); 	# 99  (_49:str)
#	mil.line("# [ 55526089@0,     50015637        ]\n"); 	# 100  (_50:str)
#	mil.line("# [ 1@0,            1               ]\n"); 	# 101  (_65:str)
#	mil.line("setoid(oid(20000000));"); 	# 102  (_66:str)
    aa_a := calc.oid(20000000);	# 103 CALCint2oid (aa_a:oid)<-(_68:int)
    ba_a := calc.setoid(aa_a);	# 104 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	mil.line("var test := bat.new(oid,lng);"); 	# 105  (_70:str)
    test := bat.new(nil:oid,nil:lng);	# 106 CMDBATnew (test:bat[:oid,:lng])<-(_72:oid)(_73:lng)
#	mil.line("test.insert(oid(53991617),lng(60000401));"); 	# 107  (_74:str)
    ca_a := calc.oid(53991617);	# 108 CALCint2oid (ca_a:oid)<-(_76:int)
    da_a := calc.lng(60000401);	# 109 CALCint2lng (da_a:lng)<-(_78:int)
    ea_a := bat.insert(test,ca_a,da_a);	# 110 BKCinsert_bun (ea_a:void)<-(test:bat[:oid,:lng])(ca_a:oid)(da_a:lng)
#	mil.line("test.insert(oid(53996584),lng(60000400));"); 	# 111  (_80:str)
    fa_a := calc.oid(53996584);	# 112 CALCint2oid (fa_a:oid)<-(_82:int)
    ga_a := calc.lng(60000400);	# 113 CALCint2lng (ga_a:lng)<-(_84:int)
    ha_a := bat.insert(test,fa_a,ga_a);	# 114 BKCinsert_bun (ha_a:void)<-(test:bat[:oid,:lng])(fa_a:oid)(ga_a:lng)
#	mil.line("test.insert(oid(55526089),lng(50015637));"); 	# 115  (_86:str)
    ia_a := calc.oid(55526089);	# 116 CALCint2oid (ia_a:oid)<-(_88:int)
    ja_a := calc.lng(50015637);	# 117 CALCint2lng (ja_a:lng)<-(_90:int)
    ka_a := bat.insert(test,ia_a,ja_a);	# 118 BKCinsert_bun (ka_a:void)<-(test:bat[:oid,:lng])(ia_a:oid)(ja_a:lng)
#	mil.line("test.print();"); 	# 119  (_92:str)
    la_a := io.print(test);	# 120 IOprint_val (la_a:int)<-(test:bat[:oid,:lng])
#	mil.line("test.select(lng(0)).print();"); 	# 121  (_94:str)
    ma_a := calc.lng(0);	# 122 CALCint2lng (ma_a:lng)<-(_96:int)
    na_a := algebra.select(test,ma_a);	# 123 ALGselect1 (na_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(ma_a:lng)
    oa_a := io.print(na_a);	# 124 IOprint_val (oa_a:int)<-(na_a:bat[:oid,:lng])
#	mil.line("test.select(lng(60000401)).print();"); 	# 125  (_99:str)
    pa_a := calc.lng(60000401);	# 126 CALCint2lng (pa_a:lng)<-(_78:int)
    qa_a := algebra.select(test,pa_a);	# 127 ALGselect1 (qa_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(pa_a:lng)
    ra_a := io.print(qa_a);	# 128 IOprint_val (ra_a:int)<-(qa_a:bat[:oid,:lng])
#	mil.line("test.select(lng(0),lng(1)).print();"); 	# 129  (_103:str)
    sa_a := calc.lng(0);	# 130 CALCint2lng (sa_a:lng)<-(_96:int)
    ta_a := calc.lng(1);	# 131 CALCint2lng (ta_a:lng)<-(_106:int)
    ua_a := algebra.select(test,sa_a,ta_a);	# 132 ALGselect (ua_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(sa_a:lng)(ta_a:lng)
    va_a := io.print(ua_a);	# 133 IOprint_val (va_a:int)<-(ua_a:bat[:oid,:lng])
#	mil.line("test.insert(oid(1),lng(1));"); 	# 134  (_109:str)
    wa_a := calc.oid(1);	# 135 CALCint2oid (wa_a:oid)<-(_106:int)
    xa_a := calc.lng(1);	# 136 CALCint2lng (xa_a:lng)<-(_106:int)
    ya_a := bat.insert(test,wa_a,xa_a);	# 137 BKCinsert_bun (ya_a:void)<-(test:bat[:oid,:lng])(wa_a:oid)(xa_a:lng)
#	mil.line("test.select(lng(0)).print();"); 	# 138  (_94:str)
    ab_a := calc.lng(0);	# 139 CALCint2lng (ab_a:lng)<-(_96:int)
    bb_a := algebra.select(test,ab_a);	# 140 ALGselect1 (bb_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(ab_a:lng)
    cb_a := io.print(bb_a);	# 141 IOprint_val (cb_a:int)<-(bb_a:bat[:oid,:lng])
#	mil.line("test.select(lng(60000401)).print();"); 	# 142  (_99:str)
    db_a := calc.lng(60000401);	# 143 CALCint2lng (db_a:lng)<-(_117:int)
    eb_a := algebra.select(test,db_a);	# 144 ALGselect1 (eb_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(db_a:lng)
    fb_a := io.print(eb_a);	# 145 IOprint_val (fb_a:int)<-(eb_a:bat[:oid,:lng])
#	mil.line("test.select(lng(0),lng(1)).print();"); 	# 146  (_103:str)
    gb_a := calc.lng(0);	# 147 CALCint2lng (gb_a:lng)<-(_96:int)
    hb_a := calc.lng(1);	# 148 CALCint2lng (hb_a:lng)<-(_106:int)
    ib_a := algebra.select(test,gb_a,hb_a);	# 149 ALGselect (ib_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(gb_a:lng)(hb_a:lng)
    jb_a := io.print(ib_a);	# 150 IOprint_val (jb_a:int)<-(ib_a:bat[:oid,:lng])
#	mil.line("quit();"); 	# 151  (_124:str)
    kb_a := clients.quit();	# 152 CLTquit (kb_a:void)
end main;	# 153  
#---------------------------------#
# BAT:		  tmp_30	  #
# (oid)		  (lng)		  #
#---------------------------------#
[ 53991617@0,	  60000401	  ]
[ 53996584@0,	  60000400	  ]
[ 55526089@0,	  50015637	  ]
#test.select(lng(0)).print();
#-----------------#
# BAT:	  tmp_70  #
# (oid)	  (lng)	  #
#-----------------#
#test.select(lng(60000401)).print();
#---------------------------------#
# BAT:		  tmp_70	  #
# (oid)		  (lng)		  #
#---------------------------------#
[ 53991617@0,	  60000401	  ]
#test.select(lng(0),lng(1)).print();
#-----------------#
# BAT:	  tmp_70  #
# (oid)	  (lng)	  #
#-----------------#
#test.insert(oid(1),lng(1));
#test.select(lng(0)).print();
#-----------------#
# BAT:	  tmp_70  #
# (oid)	  (lng)	  #
#-----------------#
#test.select(lng(60000401)).print();
#---------------------------------#
# BAT:		  tmp_70	  #
# (oid)		  (lng)		  #
#---------------------------------#
[ 53991617@0,	  60000401	  ]
#test.select(lng(0),lng(1)).print();
#-----------------#
# BAT:	  tmp_70  #
# (oid)	  (lng)	  #
#-----------------#
[ 1@0,	  1	  ]

# 14:17:56 >  
# 14:17:56 >  Done.
# 14:17:56 >  

