stdout of test 'no.157` in directory 'tests/BugReports` itself:


# 07:27:16 >  
# 07:27:16 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.157.mal < /dev/null
# 07:27:16 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# >Number:         157\n");
##	mil.line("# >Category:       Mserver\n");
##	mil.line("# >Synopsis:       long selects\n");
##	mil.line("# >Confidential:   no\n");
##	mil.line("# >Severity:       critical\n");
##	mil.line("# >Priority:       high\n");
##	mil.line("# >Responsible:    boncz (Peter Boncz)\n");
##	mil.line("# >State:          open\n");
##	mil.line("# >Class:          sw-bug\n");
##	mil.line("# >Submitter-Id:   unknown\n");
##	mil.line("# >Arrival-Date:   Tue Jun 23 13:42:30 1998\n");
##	mil.line("# >Originator:     windhouw@cwi.nl\n");
##	mil.line("# >Organization:\n");
##	mil.line("# CWI\n");
##	mil.line("# >Release:        980101\n");
##	mil.line("# >Environment:\n");
##	mil.line("# \n");
##	mil.line("# >Description:\n");
##	mil.line("# Selection of longs results in rather strange results:\n");
##	mil.line("# \n");
##	mil.line("# Test script\n");
##	mil.line("# 8<----\n");
##	mil.line("# test := bat.new(oid,lng);\n");
##	mil.line("# test.insert(oid(53991617),lng(60000401));\n");
##	mil.line("# test.insert(oid(53996584),lng(60000400));\n");
##	mil.line("# test.insert(oid(55526089),lng(50015637));\n");
##	mil.line("# test.print;\n");
##	mil.line("# test.select(lng(0)).print;\n");
##	mil.line("# test.select(lng(60000401)).print;\n");
##	mil.line("# test.select(lng(0),lng(1)).print;\n");
##	mil.line("# test.insert(oid(1),lng(1));\n");
##	mil.line("# test.select(lng(0)).print;\n");
##	mil.line("# test.select(lng(60000401)).print;\n");
##	mil.line("# test.select(lng(0),lng(1)).print;\n");
##	mil.line("# \n");
##	mil.line("# 8<-----\n");
##	mil.line("# Test output\n");
##	mil.line("# 8<-----\n");
##	mil.line("# #You are system administrator (adm)!\n");
##	mil.line("# >>>>>#---------------------------------#\n");
##	mil.line("# # BAT:            tmp_23          #\n");
##	mil.line("# # (oid)           (lng)           #\n");
##	mil.line("# #---------------------------------#\n");
##	mil.line("# [ 53991617@0,     60000401        ]\n");
##	mil.line("# [ 53996584@0,     60000400        ]\n");
##	mil.line("# [ 55526089@0,     50015637        ]\n");
##	mil.line("# >#-------------------------#\n");
##	mil.line("# # BAT:            tmp_24  #\n");
##	mil.line("# # (oid)           (lng)   #\n");
##	mil.line("# #-------------------------#\n");
##	mil.line("# [ 53991617@0,     0       ]\n");
##	mil.line("# [ 53996584@0,     0       ]\n");
##	mil.line("# [ 55526089@0,     0       ]\n");
##	mil.line("# >#---------------------------------#\n");
##	mil.line("# # BAT:            tmp_24          #\n");
##	mil.line("# # (oid)           (lng)           #\n");
##	mil.line("# #---------------------------------#\n");
##	mil.line("# [ 53991617@0,     60000401        ]\n");
##	mil.line("# [ 53996584@0,     60000401        ]\n");
##	mil.line("# [ 55526089@0,     60000401        ]\n");
##	mil.line("# >#---------------------------------#\n");
##	mil.line("# # BAT:            tmp_24          #\n");
##	mil.line("# # (oid)           (lng)           #\n");
##	mil.line("# #---------------------------------#\n");
##	mil.line("# [ 53991617@0,     60000401        ]\n");
##	mil.line("# [ 53996584@0,     60000400        ]\n");
##	mil.line("# [ 55526089@0,     50015637        ]\n");
##	mil.line("# >>#-------------------------#\n");
##	mil.line("# # BAT:            tmp_24  #\n");
##	mil.line("# # (oid)           (lng)   #\n");
##	mil.line("# #-------------------------#\n");
##	mil.line("# [ 53991617@0,     0       ]\n");
##	mil.line("# [ 53996584@0,     0       ]\n");
##	mil.line("# [ 55526089@0,     0       ]\n");
##	mil.line("# [ 1@0,            0       ]\n");
##	mil.line("# >#---------------------------------#\n");
##	mil.line("# # BAT:            tmp_24          #\n");
##	mil.line("# # (oid)           (lng)           #\n");
##	mil.line("# #---------------------------------#\n");
##	mil.line("# [ 53991617@0,     60000401        ]\n");
##	mil.line("# [ 53996584@0,     60000401        ]\n");
##	mil.line("# [ 55526089@0,     60000401        ]\n");
##	mil.line("# [ 1@0,            60000401        ]\n");
##	mil.line("# >#---------------------------------#\n");
##	mil.line("# # BAT:            tmp_24          #\n");
##	mil.line("# # (oid)           (lng)           #\n");
##	mil.line("# #---------------------------------#\n");
##	mil.line("# [ 53991617@0,     60000401        ]\n");
##	mil.line("# [ 53996584@0,     60000400        ]\n");
##	mil.line("# [ 55526089@0,     50015637        ]\n");
##	mil.line("# [ 1@0,            1               ]\n");
##	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
##	mil.line("var test := bat.new(oid,lng);");
#	test := bat.new(nil:oid,nil:lng);
##	mil.line("test.insert(oid(53991617),lng(60000401));");
#	ca_a := calc.oid(53991617);
#	da_a := calc.lng(60000401);
#	ea_a := bat.insert(test,ca_a,da_a);
##	mil.line("test.insert(oid(53996584),lng(60000400));");
#	fa_a := calc.oid(53996584);
#	ga_a := calc.lng(60000400);
#	ha_a := bat.insert(test,fa_a,ga_a);
##	mil.line("test.insert(oid(55526089),lng(50015637));");
#	ia_a := calc.oid(55526089);
#	ja_a := calc.lng(50015637);
#	ka_a := bat.insert(test,ia_a,ja_a);
##	mil.line("test.print();");
#	la_a := io.print(test);
##	mil.line("test.select(lng(0)).print();");
#	ma_a := calc.lng(0);
#	na_a := algebra.select(test,ma_a);
#	oa_a := io.print(na_a);
##	mil.line("test.select(lng(60000401)).print();");
#	pa_a := calc.lng(60000401);
#	qa_a := algebra.select(test,pa_a);
#	ra_a := io.print(qa_a);
##	mil.line("test.select(lng(0),lng(1)).print();");
#	sa_a := calc.lng(0);
#	ta_a := calc.lng(1);
#	ua_a := algebra.select(test,sa_a,ta_a);
#	va_a := io.print(ua_a);
##	mil.line("test.insert(oid(1),lng(1));");
#	wa_a := calc.oid(1);
#	xa_a := calc.lng(1);
#	ya_a := bat.insert(test,wa_a,xa_a);
##	mil.line("test.select(lng(0)).print();");
#	ab_a := calc.lng(0);
#	bb_a := algebra.select(test,ab_a);
#	cb_a := io.print(bb_a);
##	mil.line("test.select(lng(60000401)).print();");
#	db_a := calc.lng(60000401);
#	eb_a := algebra.select(test,db_a);
#	fb_a := io.print(eb_a);
##	mil.line("test.select(lng(0),lng(1)).print();");
#	gb_a := calc.lng(0);
#	hb_a := calc.lng(1);
#	ib_a := algebra.select(test,gb_a,hb_a);
#	jb_a := io.print(ib_a);
##	mil.line("quit();");
#	kb_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  (_2:str)
#Predefined code segment 	# 3  (_3:str)
#The compiler can not guarantee an accurate compilation, 	# 4  (_4:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  (_5:str)
#A few guidelines to maximize usefullness. 	# 6  (_6:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  (_7:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  (_8:str)
#use the "mil_schema" for additional support routines 	# 9  (_9:str)
#	io.print("# >Number:         157\n"); 	# 10  (_10:str)
#	io.print("# >Category:       Mserver\n"); 	# 11  (_11:str)
#	io.print("# >Synopsis:       long selects\n"); 	# 12  (_12:str)
#	io.print("# >Confidential:   no\n"); 	# 13  (_13:str)
#	io.print("# >Severity:       critical\n"); 	# 14  (_14:str)
#	io.print("# >Priority:       high\n"); 	# 15  (_15:str)
#	io.print("# >Responsible:    boncz (Peter Boncz)\n"); 	# 16  (_16:str)
#	io.print("# >State:          open\n"); 	# 17  (_17:str)
#	io.print("# >Class:          sw-bug\n"); 	# 18  (_18:str)
#	io.print("# >Submitter-Id:   unknown\n"); 	# 19  (_19:str)
#	io.print("# >Arrival-Date:   Tue Jun 23 13:42:30 1998\n"); 	# 20  (_20:str)
#	io.print("# >Originator:     windhouw@cwi.nl\n"); 	# 21  (_21:str)
#	io.print("# >Organization:\n"); 	# 22  (_22:str)
#	io.print("# CWI\n"); 	# 23  (_23:str)
#	io.print("# >Release:        980101\n"); 	# 24  (_24:str)
#	io.print("# >Environment:\n"); 	# 25  (_25:str)
#	io.print("# \n"); 	# 26  (_26:str)
#	io.print("# >Description:\n"); 	# 27  (_27:str)
#	io.print("# Selection of longs results in rather strange results:\n"); 	# 28  (_28:str)
#	io.print("# \n"); 	# 29  (_26:str)
#	io.print("# Test script\n"); 	# 30  (_29:str)
#	io.print("# 8<----\n"); 	# 31  (_30:str)
#	io.print("# test := bat.new(oid,lng);\n"); 	# 32  (_31:str)
#	io.print("# test.insert(oid(53991617),lng(60000401));\n"); 	# 33  (_32:str)
#	io.print("# test.insert(oid(53996584),lng(60000400));\n"); 	# 34  (_33:str)
#	io.print("# test.insert(oid(55526089),lng(50015637));\n"); 	# 35  (_34:str)
#	io.print("# test.print;\n"); 	# 36  (_35:str)
#	io.print("# test.select(lng(0)).print;\n"); 	# 37  (_36:str)
#	io.print("# test.select(lng(60000401)).print;\n"); 	# 38  (_37:str)
#	io.print("# test.select(lng(0),lng(1)).print;\n"); 	# 39  (_38:str)
#	io.print("# test.insert(oid(1),lng(1));\n"); 	# 40  (_39:str)
#	io.print("# test.select(lng(0)).print;\n"); 	# 41  (_36:str)
#	io.print("# test.select(lng(60000401)).print;\n"); 	# 42  (_37:str)
#	io.print("# test.select(lng(0),lng(1)).print;\n"); 	# 43  (_38:str)
#	io.print("# \n"); 	# 44  (_26:str)
#	io.print("# 8<-----\n"); 	# 45  (_40:str)
#	io.print("# Test output\n"); 	# 46  (_41:str)
#	io.print("# 8<-----\n"); 	# 47  (_40:str)
#	io.print("# #You are system administrator (adm)!\n"); 	# 48  (_42:str)
#	io.print("# >>>>>#---------------------------------#\n"); 	# 49  (_43:str)
#	io.print("# # BAT:            tmp_23          #\n"); 	# 50  (_44:str)
#	io.print("# # (oid)           (lng)           #\n"); 	# 51  (_45:str)
#	io.print("# #---------------------------------#\n"); 	# 52  (_46:str)
#	io.print("# [ 53991617@0,     60000401        ]\n"); 	# 53  (_47:str)
#	io.print("# [ 53996584@0,     60000400        ]\n"); 	# 54  (_48:str)
#	io.print("# [ 55526089@0,     50015637        ]\n"); 	# 55  (_49:str)
#	io.print("# >#-------------------------#\n"); 	# 56  (_50:str)
#	io.print("# # BAT:            tmp_24  #\n"); 	# 57  (_51:str)
#	io.print("# # (oid)           (lng)   #\n"); 	# 58  (_52:str)
#	io.print("# #-------------------------#\n"); 	# 59  (_53:str)
#	io.print("# [ 53991617@0,     0       ]\n"); 	# 60  (_54:str)
#	io.print("# [ 53996584@0,     0       ]\n"); 	# 61  (_55:str)
#	io.print("# [ 55526089@0,     0       ]\n"); 	# 62  (_56:str)
#	io.print("# >#---------------------------------#\n"); 	# 63  (_57:str)
#	io.print("# # BAT:            tmp_24          #\n"); 	# 64  (_58:str)
#	io.print("# # (oid)           (lng)           #\n"); 	# 65  (_45:str)
#	io.print("# #---------------------------------#\n"); 	# 66  (_46:str)
#	io.print("# [ 53991617@0,     60000401        ]\n"); 	# 67  (_47:str)
#	io.print("# [ 53996584@0,     60000401        ]\n"); 	# 68  (_59:str)
#	io.print("# [ 55526089@0,     60000401        ]\n"); 	# 69  (_60:str)
#	io.print("# >#---------------------------------#\n"); 	# 70  (_57:str)
#	io.print("# # BAT:            tmp_24          #\n"); 	# 71  (_58:str)
#	io.print("# # (oid)           (lng)           #\n"); 	# 72  (_45:str)
#	io.print("# #---------------------------------#\n"); 	# 73  (_46:str)
#	io.print("# [ 53991617@0,     60000401        ]\n"); 	# 74  (_47:str)
#	io.print("# [ 53996584@0,     60000400        ]\n"); 	# 75  (_48:str)
#	io.print("# [ 55526089@0,     50015637        ]\n"); 	# 76  (_49:str)
#	io.print("# >>#-------------------------#\n"); 	# 77  (_61:str)
#	io.print("# # BAT:            tmp_24  #\n"); 	# 78  (_51:str)
#	io.print("# # (oid)           (lng)   #\n"); 	# 79  (_52:str)
#	io.print("# #-------------------------#\n"); 	# 80  (_53:str)
#	io.print("# [ 53991617@0,     0       ]\n"); 	# 81  (_54:str)
#	io.print("# [ 53996584@0,     0       ]\n"); 	# 82  (_55:str)
#	io.print("# [ 55526089@0,     0       ]\n"); 	# 83  (_56:str)
#	io.print("# [ 1@0,            0       ]\n"); 	# 84  (_62:str)
#	io.print("# >#---------------------------------#\n"); 	# 85  (_57:str)
#	io.print("# # BAT:            tmp_24          #\n"); 	# 86  (_58:str)
#	io.print("# # (oid)           (lng)           #\n"); 	# 87  (_45:str)
#	io.print("# #---------------------------------#\n"); 	# 88  (_46:str)
#	io.print("# [ 53991617@0,     60000401        ]\n"); 	# 89  (_47:str)
#	io.print("# [ 53996584@0,     60000401        ]\n"); 	# 90  (_59:str)
#	io.print("# [ 55526089@0,     60000401        ]\n"); 	# 91  (_60:str)
#	io.print("# [ 1@0,            60000401        ]\n"); 	# 92  (_63:str)
#	io.print("# >#---------------------------------#\n"); 	# 93  (_57:str)
#	io.print("# # BAT:            tmp_24          #\n"); 	# 94  (_58:str)
#	io.print("# # (oid)           (lng)           #\n"); 	# 95  (_45:str)
#	io.print("# #---------------------------------#\n"); 	# 96  (_46:str)
#	io.print("# [ 53991617@0,     60000401        ]\n"); 	# 97  (_47:str)
#	io.print("# [ 53996584@0,     60000400        ]\n"); 	# 98  (_48:str)
#	io.print("# [ 55526089@0,     50015637        ]\n"); 	# 99  (_49:str)
#	io.print("# [ 1@0,            1               ]\n"); 	# 100  (_64:str)
#	io.print("setoid(oid(20000000));"); 	# 101  (_65:str)
    aa_a := calc.oid(20000000);	# 102 CALCint2oid (aa_a:oid)<-(_67:int)
    ba_a := calc.setoid(aa_a);	# 103 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	io.print("var test := bat.new(oid,lng);"); 	# 104  (_69:str)
    test := bat.new(nil:oid,nil:lng);	# 105 CMDBATnew (test:bat[:oid,:lng])<-(_71:oid)(_72:lng)
#	io.print("test.insert(oid(53991617),lng(60000401));"); 	# 106  (_73:str)
    ca_a := calc.oid(53991617);	# 107 CALCint2oid (ca_a:oid)<-(_75:int)
    da_a := calc.lng(60000401);	# 108 CALCint2lng (da_a:lng)<-(_77:int)
    ea_a := bat.insert(test,ca_a,da_a);	# 109 BKCinsert_bun (ea_a:void)<-(test:bat[:oid,:lng])(ca_a:oid)(da_a:lng)
#	io.print("test.insert(oid(53996584),lng(60000400));"); 	# 110  (_79:str)
    fa_a := calc.oid(53996584);	# 111 CALCint2oid (fa_a:oid)<-(_81:int)
    ga_a := calc.lng(60000400);	# 112 CALCint2lng (ga_a:lng)<-(_83:int)
    ha_a := bat.insert(test,fa_a,ga_a);	# 113 BKCinsert_bun (ha_a:void)<-(test:bat[:oid,:lng])(fa_a:oid)(ga_a:lng)
#	io.print("test.insert(oid(55526089),lng(50015637));"); 	# 114  (_85:str)
    ia_a := calc.oid(55526089);	# 115 CALCint2oid (ia_a:oid)<-(_87:int)
    ja_a := calc.lng(50015637);	# 116 CALCint2lng (ja_a:lng)<-(_89:int)
    ka_a := bat.insert(test,ia_a,ja_a);	# 117 BKCinsert_bun (ka_a:void)<-(test:bat[:oid,:lng])(ia_a:oid)(ja_a:lng)
#	io.print("test.print();"); 	# 118  (_91:str)
    la_a := io.print(test);	# 119 IOprint_val (la_a:void)<-(test:bat[:oid,:lng])
#	io.print("test.select(lng(0)).print();"); 	# 120  (_93:str)
    ma_a := calc.lng(0);	# 121 CALCint2lng (ma_a:lng)<-(_95:int)
    na_a := algebra.select(test,ma_a);	# 122 ALGselect1 (na_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(ma_a:lng)
    oa_a := io.print(na_a);	# 123 IOprint_val (oa_a:void)<-(na_a:bat[:oid,:lng])
#	io.print("test.select(lng(60000401)).print();"); 	# 124  (_98:str)
    pa_a := calc.lng(60000401);	# 125 CALCint2lng (pa_a:lng)<-(_77:int)
    qa_a := algebra.select(test,pa_a);	# 126 ALGselect1 (qa_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(pa_a:lng)
    ra_a := io.print(qa_a);	# 127 IOprint_val (ra_a:void)<-(qa_a:bat[:oid,:lng])
#	io.print("test.select(lng(0),lng(1)).print();"); 	# 128  (_102:str)
    sa_a := calc.lng(0);	# 129 CALCint2lng (sa_a:lng)<-(_95:int)
    ta_a := calc.lng(1);	# 130 CALCint2lng (ta_a:lng)<-(_105:int)
    ua_a := algebra.select(test,sa_a,ta_a);	# 131 ALGselect (ua_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(sa_a:lng)(ta_a:lng)
    va_a := io.print(ua_a);	# 132 IOprint_val (va_a:void)<-(ua_a:bat[:oid,:lng])
#	io.print("test.insert(oid(1),lng(1));"); 	# 133  (_108:str)
    wa_a := calc.oid(1);	# 134 CALCint2oid (wa_a:oid)<-(_105:int)
    xa_a := calc.lng(1);	# 135 CALCint2lng (xa_a:lng)<-(_105:int)
    ya_a := bat.insert(test,wa_a,xa_a);	# 136 BKCinsert_bun (ya_a:void)<-(test:bat[:oid,:lng])(wa_a:oid)(xa_a:lng)
#	io.print("test.select(lng(0)).print();"); 	# 137  (_93:str)
    ab_a := calc.lng(0);	# 138 CALCint2lng (ab_a:lng)<-(_95:int)
    bb_a := algebra.select(test,ab_a);	# 139 ALGselect1 (bb_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(ab_a:lng)
    cb_a := io.print(bb_a);	# 140 IOprint_val (cb_a:void)<-(bb_a:bat[:oid,:lng])
#	io.print("test.select(lng(60000401)).print();"); 	# 141  (_98:str)
    db_a := calc.lng(60000401);	# 142 CALCint2lng (db_a:lng)<-(_116:int)
    eb_a := algebra.select(test,db_a);	# 143 ALGselect1 (eb_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(db_a:lng)
    fb_a := io.print(eb_a);	# 144 IOprint_val (fb_a:void)<-(eb_a:bat[:oid,:lng])
#	io.print("test.select(lng(0),lng(1)).print();"); 	# 145  (_102:str)
    gb_a := calc.lng(0);	# 146 CALCint2lng (gb_a:lng)<-(_95:int)
    hb_a := calc.lng(1);	# 147 CALCint2lng (hb_a:lng)<-(_105:int)
    ib_a := algebra.select(test,gb_a,hb_a);	# 148 ALGselect (ib_a:bat[:oid,:lng])<-(test:bat[:oid,:lng])(gb_a:lng)(hb_a:lng)
    jb_a := io.print(ib_a);	# 149 IOprint_val (jb_a:void)<-(ib_a:bat[:oid,:lng])
#	io.print("quit();"); 	# 150  (_123:str)
    kb_a := clients.quit();	# 151 CLTquit (kb_a:void)
end main;	# 152  
#---------------------------------#
# h		t		  # name
# oid		lng		  # type
#---------------------------------#
[ 53991617@0,	  60000401	  ]
[ 53996584@0,	  60000400	  ]
[ 55526089@0,	  50015637	  ]
#-----------------#
# h	t	  # name
# oid	lng	  # type
#-----------------#
#---------------------------------#
# h		t		  # name
# oid		lng		  # type
#---------------------------------#
[ 53991617@0,	  60000401	  ]
#-----------------#
# h	t	  # name
# oid	lng	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	lng	  # type
#-----------------#
#---------------------------------#
# h		t		  # name
# oid		lng		  # type
#---------------------------------#
[ 53991617@0,	  60000401	  ]
#-----------------#
# h	t	  # name
# oid	lng	  # type
#-----------------#
[ 1@0,	  1	  ]

# 07:27:16 >  
# 07:27:16 >  Done.
# 07:27:16 >  

