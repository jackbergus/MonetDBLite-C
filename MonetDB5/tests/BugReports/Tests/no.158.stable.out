stdout of test 'no.158` in directory 'monetdb5/tests/BugReports` itself:

#> Mtest:	milS no.158 milS -prelude no.158.prelude
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single -prelude no.158.prelude no.158.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.158.milS
#prelude:no.158.prelude

# 17:07:25 >  
# 17:07:25 >  Mtimeout -timeout 60 Mserver "--config=/var/tmp/MonetDB/_PREFIX_d_/etc/monet.conf" --debug=10 --set "monet_mod_path=/var/tmp/MonetDB/_PREFIX_d_/lib/MonetDB" --dbfarm "/var/tmp/MonetDB/_PREFIX_d_/var/dbfarm" --set monet_prompt= /ufs/manegold/tmp/Tests-d10/Tests/trace.mil --dbname=Tests_tests_BugReports no.158.prelude < no.158.milS
# 17:07:25 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
## Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##setoid(oid(10000000));
#	aa_a := oid(10000000);
#	ba_a := setoid(aa_a);
##var test1 := new(int,int);
#	test1 := new(:int,:int);
##test1.insert(1,1);
#	ca_a := insert(test1,1,1);
#
function Admin.main():int;	# 0  (main:int)
    aa_a := calc.oid(10000000);	# 1 CALCint2oid (aa_a:oid)<-($2:int)
    ba_a := calc.setoid(aa_a);	# 2 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    test1 := bbp.new(:int,:int);	# 3 CMDBATnew (test1:bat[:int,:int])<-($5:int)($6:int)
    ca_a := bat.insert(test1,1,1);	# 4 BKCinsert_bun (ca_a:void)<-(test1:bat[:int,:int])($8:int)($8:int)
end main;	# 5  
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("test1.print();");
#	test1:= mil.take("test1");
#	ca_a := print(test1);
#	mil.line("source(getenv(\"TSTTRGDIR\")+\"/no.158.source.mil\");");
#	da_a := getenv("TSTTRGDIR");
#	ea_a := +(da_a,"/no.158.source.mil");
#	fa_a := source(ea_a);
#	mil.line("test2.print();");
#	test2:= mil.take("test2");
#	ga_a := print(test2);
#	mil.line("quit();");
#	ha_a := quit();
#
function Admin.main():int;	# 0  (main:int)
    mil.line("setoid(oid(20000000));");	# 1 MILline ($1:void)<-($2:str)
    aa_a := calc.oid(20000000);	# 2 CALCint2oid (aa_a:oid)<-($4:int)
    ba_a := calc.setoid(aa_a);	# 3 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("test1.print();");	# 4 MILline ($6:void)<-($7:str)
    test1 := mil.take("test1");	# 5 MILtake (test1:any)<-($9:str)
    ca_a := io.print(test1);	# 6 IOprint_val (ca_a:int)<-(test1:any)
    mil.line("source(getenv(\"TSTTRGDIR\")+\"/no.158.source.mil\");");	# 7 MILline ($11:void)<-($12:str)
    da_a := unix.getenv("TSTTRGDIR");	# 8 UNIXgetenv (da_a:str)<-($14:str)
    ea_a := str.+(da_a,"/no.158.source.mil");	# 9 STRConcat (ea_a:str)<-(da_a:str)($16:str)
    fa_a := mal.source(ea_a);	# 10 CMDevalFile (fa_a:void)<-(ea_a:str)
    mil.line("test2.print();");	# 11 MILline ($18:void)<-($19:str)
    test2 := mil.take("test2");	# 12 MILtake (test2:any)<-($21:str)
    ga_a := io.print(test2);	# 13 IOprint_val (ga_a:int)<-(test2:any)
    mil.line("quit();");	# 14 MILline ($23:void)<-($24:str)
    ha_a := clients.quit();	# 15 CLTquit (ha_a:void)
end main;	# 16  
#setoid(oid(20000000));
#test1.print();
!ERROR: MALException:mil.take:failed to take 'test1' from box
>
# 17:31:26 >  
# 17:31:26 >  Done.
# 17:31:26 >  

