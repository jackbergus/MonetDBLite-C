stdout of test 'no.031` in directory 'tests/BugReports` itself:


# 07:27:14 >  
# 07:27:14 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.031.mal < /dev/null
# 07:27:14 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# >Number:         31\n");
##	mil.line("# >Category:       Mserver\n");
##	mil.line("# >Synopsis:       Import does not work.\n");
##	mil.line("# >Confidential:   no\n");
##	mil.line("# >Severity:       serious\n");
##	mil.line("# >Priority:       medium\n");
##	mil.line("# >Responsible:    quak\n");
##	mil.line("# >State:          closed\n");
##	mil.line("# >Class:          sw-bug\n");
##	mil.line("# >Submitter-Id:   unknown\n");
##	mil.line("# >Arrival-Date:   Fri Sep 19 16:00:42 1997\n");
##	mil.line("# >Originator:     quak\n");
##	mil.line("# >Organization:\n");
##	mil.line("# >Release:        970101\n");
##	mil.line("# >Environment:\n");
##	mil.line("# ALL\n");
##	mil.line("# >Description:\n");
##	mil.line("# The following script, which creates a bat exports\n");
##	mil.line("# it and then tries to import it again fails:\n");
##	mil.line("# \n");
##	mil.line("# > a := bat.new(int,int);\n");
##	mil.line("# > a.insert(1,1);\n");
##	mil.line("# > a.export(\"/home/quak/tmp/testt\");\n");
##	mil.line("# > b := bat.new(int,int);\n");
##	mil.line("# > b.import(\"/home/quak/tmp/testt\");\n");
##	mil.line("var a := bat.new(int,int);");
#	a := bat.new(nil:int,nil:int);
##	mil.line("a.insert(1,1);");
#	aa_a := bat.insert(a,1,1);
##	mil.line("a.print();");
#	ba_a := io.print(a);
##	mil.line("a.export(\"testt\");");
#	ca_a := io.export(a,"testt");
##	mil.line("var b := bat.new(int,int);");
#	b := bat.new(nil:int,nil:int);
##	mil.line("b.import(\"testt\");");
#	da_a := io.import(b,"testt");
##	mil.line("b.print();");
#	ea_a := io.print(b);
##	mil.line("quit();");
#	fa_a := clients.quit();
#
function user.main():void;              #  0 main:void := user.main() {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("# >Number:         31\n"); 
#	io.print("# >Category:       Mserver\n"); 
#	io.print("# >Synopsis:       Import does not work.\n"); 
#	io.print("# >Confidential:   no\n"); 
#	io.print("# >Severity:       serious\n"); 
#	io.print("# >Priority:       medium\n"); 
#	io.print("# >Responsible:    quak\n"); 
#	io.print("# >State:          closed\n"); 
#	io.print("# >Class:          sw-bug\n"); 
#	io.print("# >Submitter-Id:   unknown\n"); 
#	io.print("# >Arrival-Date:   Fri Sep 19 16:00:42 1997\n"); 
#	io.print("# >Originator:     quak\n"); 
#	io.print("# >Organization:\n"); 
#	io.print("# >Release:        970101\n"); 
#	io.print("# >Environment:\n"); 
#	io.print("# ALL\n"); 
#	io.print("# >Description:\n"); 
#	io.print("# The following script, which creates a bat exports\n"); 
#	io.print("# it and then tries to import it again fails:\n"); 
#	io.print("# \n"); 
#	io.print("# > a := bat.new(int,int);\n"); 
#	io.print("# > a.insert(1,1);\n"); 
#	io.print("# > a.export(\"/home/quak/tmp/testt\");\n"); 
#	io.print("# > b := bat.new(int,int);\n"); 
#	io.print("# > b.import(\"/home/quak/tmp/testt\");\n"); 
#	io.print("var a := bat.new(int,int);"); 
    a := bat.new(nil:int,nil:int);      # 36 a:bat[:int,:int] := CMDBATnew(_37:int, _37:int) {G}
#	io.print("a.insert(1,1);"); 
    aa_a := bat.insert(a,1,1);          # 38 aa_a:bat[:int,:int] := BKCinsert_bun(a:bat[:int,:int], _40:int, _40:int) {G}
#	io.print("a.print();"); 
    ba_a := io.print(a);                # 40 ba_a:void := IOprint_val(a:bat[:int,:int]) 
#	io.print("a.export(\"testt\");"); 
    ca_a := io.export(a,"testt");       # 42 ca_a:bit := IOexport(a:bat[:int,:int], _45:str) 
#	io.print("var b := bat.new(int,int);"); 
    b := bat.new(nil:int,nil:int);      # 44 b:bat[:int,:int] := CMDBATnew(_37:int, _37:int) {G}
#	io.print("b.import(\"testt\");"); 
    da_a := io.import(b,"testt");       # 46 da_a:bat[:int,:int] := IOimport(b:bat[:int,:int], _45:str) {G}
#	io.print("b.print();"); 
    ea_a := io.print(b);                # 48 ea_a:void := IOprint_val(b:bat[:int,:int]) 
#	io.print("quit();"); 
    fa_a := clients.quit();             # 50 fa_a:void := CLTquit() 
end main;	# 51  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]

# 07:27:14 >  
# 07:27:14 >  Done.
# 07:27:14 >  

