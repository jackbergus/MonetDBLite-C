stdout of test 'no.031` in directory 'tests/BugReports` itself:


# 07:27:14 >  
# 07:27:14 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.031.mal < /dev/null
# 07:27:14 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# >Number:         31\n");
##	mil.line("# >Category:       Mserver\n");
##	mil.line("# >Synopsis:       Import does not work.\n");
##	mil.line("# >Confidential:   no\n");
##	mil.line("# >Severity:       serious\n");
##	mil.line("# >Priority:       medium\n");
##	mil.line("# >Responsible:    quak\n");
##	mil.line("# >State:          closed\n");
##	mil.line("# >Class:          sw-bug\n");
##	mil.line("# >Submitter-Id:   unknown\n");
##	mil.line("# >Arrival-Date:   Fri Sep 19 16:00:42 1997\n");
##	mil.line("# >Originator:     quak\n");
##	mil.line("# >Organization:\n");
##	mil.line("# >Release:        970101\n");
##	mil.line("# >Environment:\n");
##	mil.line("# ALL\n");
##	mil.line("# >Description:\n");
##	mil.line("# The following script, which creates a bat exports\n");
##	mil.line("# it and then tries to import it again fails:\n");
##	mil.line("# \n");
##	mil.line("# > a := bat.new(int,int);\n");
##	mil.line("# > a.insert(1,1);\n");
##	mil.line("# > a.export(\"/home/quak/tmp/testt\");\n");
##	mil.line("# > b := bat.new(int,int);\n");
##	mil.line("# > b.import(\"/home/quak/tmp/testt\");\n");
##	mil.line("var a := bat.new(int,int);");
#	a := bat.new(nil:int,nil:int);
##	mil.line("a.insert(1,1);");
#	aa_a := bat.insert(a,1,1);
##	mil.line("a.print();");
#	ba_a := io.print(a);
##	mil.line("a.export(\"testt\");");
#	ca_a := io.export(a,"testt");
##	mil.line("var b := bat.new(int,int);");
#	b := bat.new(nil:int,nil:int);
##	mil.line("b.import(\"testt\");");
#	da_a := io.import(b,"testt");
##	mil.line("b.print();");
#	ea_a := io.print(b);
##	mil.line("quit();");
#	fa_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  (_2:str)
#Predefined code segment 	# 3  (_3:str)
#The compiler can not guarantee an accurate compilation, 	# 4  (_4:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  (_5:str)
#A few guidelines to maximize usefullness. 	# 6  (_6:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  (_7:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  (_8:str)
#use the "mil_schema" for additional support routines 	# 9  (_9:str)
#	io.print("# >Number:         31\n"); 	# 10  (_10:str)
#	io.print("# >Category:       Mserver\n"); 	# 11  (_11:str)
#	io.print("# >Synopsis:       Import does not work.\n"); 	# 12  (_12:str)
#	io.print("# >Confidential:   no\n"); 	# 13  (_13:str)
#	io.print("# >Severity:       serious\n"); 	# 14  (_14:str)
#	io.print("# >Priority:       medium\n"); 	# 15  (_15:str)
#	io.print("# >Responsible:    quak\n"); 	# 16  (_16:str)
#	io.print("# >State:          closed\n"); 	# 17  (_17:str)
#	io.print("# >Class:          sw-bug\n"); 	# 18  (_18:str)
#	io.print("# >Submitter-Id:   unknown\n"); 	# 19  (_19:str)
#	io.print("# >Arrival-Date:   Fri Sep 19 16:00:42 1997\n"); 	# 20  (_20:str)
#	io.print("# >Originator:     quak\n"); 	# 21  (_21:str)
#	io.print("# >Organization:\n"); 	# 22  (_22:str)
#	io.print("# >Release:        970101\n"); 	# 23  (_23:str)
#	io.print("# >Environment:\n"); 	# 24  (_24:str)
#	io.print("# ALL\n"); 	# 25  (_25:str)
#	io.print("# >Description:\n"); 	# 26  (_26:str)
#	io.print("# The following script, which creates a bat exports\n"); 	# 27  (_27:str)
#	io.print("# it and then tries to import it again fails:\n"); 	# 28  (_28:str)
#	io.print("# \n"); 	# 29  (_29:str)
#	io.print("# > a := bat.new(int,int);\n"); 	# 30  (_30:str)
#	io.print("# > a.insert(1,1);\n"); 	# 31  (_31:str)
#	io.print("# > a.export(\"/home/quak/tmp/testt\");\n"); 	# 32  (_32:str)
#	io.print("# > b := bat.new(int,int);\n"); 	# 33  (_33:str)
#	io.print("# > b.import(\"/home/quak/tmp/testt\");\n"); 	# 34  (_34:str)
#	io.print("var a := bat.new(int,int);"); 	# 35  (_35:str)
    a := bat.new(nil:int,nil:int);	# 36 CMDBATnew (a:bat[:int,:int])<-(_37:int)(_37:int)
#	io.print("a.insert(1,1);"); 	# 37  (_38:str)
    aa_a := bat.insert(a,1,1);	# 38 BKCinsert_bun (aa_a:void)<-(a:bat[:int,:int])(_40:int)(_40:int)
#	io.print("a.print();"); 	# 39  (_41:str)
    ba_a := io.print(a);	# 40 IOprint_val (ba_a:void)<-(a:bat[:int,:int])
#	io.print("a.export(\"testt\");"); 	# 41  (_43:str)
    ca_a := io.export(a,"testt");	# 42 IOexport (ca_a:bit)<-(a:bat[:int,:int])(_45:str)
#	io.print("var b := bat.new(int,int);"); 	# 43  (_46:str)
    b := bat.new(nil:int,nil:int);	# 44 CMDBATnew (b:bat[:int,:int])<-(_37:int)(_37:int)
#	io.print("b.import(\"testt\");"); 	# 45  (_48:str)
    da_a := io.import(b,"testt");	# 46 IOimport (da_a:bat[:int,:int])<-(b:bat[:int,:int])(_45:str)
#	io.print("b.print();"); 	# 47  (_50:str)
    ea_a := io.print(b);	# 48 IOprint_val (ea_a:void)<-(b:bat[:int,:int])
#	io.print("quit();"); 	# 49  (_52:str)
    fa_a := clients.quit();	# 50 CLTquit (fa_a:void)
end main;	# 51  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]

# 07:27:14 >  
# 07:27:14 >  Done.
# 07:27:14 >  

