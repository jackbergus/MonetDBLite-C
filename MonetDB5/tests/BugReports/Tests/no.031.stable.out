stdout of test 'no.031` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.031 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.031.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.031.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# >Number:         31
# >Category:       Mserver
# >Synopsis:       Import does not work.
# >Confidential:   no
# >Severity:       serious
# >Priority:       medium
# >Responsible:    quak
# >State:          closed
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Fri Sep 19 16:00:42 1997
# >Originator:     quak
# >Organization:
# >Release:        970101
# >Environment:
# ALL
# >Description:
# The following script, which creates a bat exports
# it and then tries to import it again fails:
# 
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("# >Number:         31\n");
#	mil.line("# >Category:       Mserver");
#	mil.line("# >Category:       Mserver\n");
#	mil.line("# >Synopsis:       Import does not work.");
#	mil.line("# >Synopsis:       Import does not work.\n");
#	mil.line("# >Confidential:   no");
#	mil.line("# >Confidential:   no\n");
#	mil.line("# >Severity:       serious");
#	mil.line("# >Severity:       serious\n");
#	mil.line("# >Priority:       medium");
#	mil.line("# >Priority:       medium\n");
#	mil.line("# >Responsible:    quak");
#	mil.line("# >Responsible:    quak\n");
#	mil.line("# >State:          closed");
#	mil.line("# >State:          closed\n");
#	mil.line("# >Class:          sw-bug");
#	mil.line("# >Class:          sw-bug\n");
#	mil.line("# >Submitter-Id:   unknown");
#	mil.line("# >Submitter-Id:   unknown\n");
#	mil.line("# >Arrival-Date:   Fri Sep 19 16:00:42 1997");
#	mil.line("# >Arrival-Date:   Fri Sep 19 16:00:42 1997\n");
#	mil.line("# >Originator:     quak");
#	mil.line("# >Originator:     quak\n");
#	mil.line("# >Organization:");
#	mil.line("# >Organization:\n");
#	mil.line("# >Release:        970101");
#	mil.line("# >Release:        970101\n");
#	mil.line("# >Environment:");
#	mil.line("# >Environment:\n");
#	mil.line("# ALL");
#	mil.line("# ALL\n");
#	mil.line("# >Description:");
#	mil.line("# >Description:\n");
#	mil.line("# The following script, which creates a bat exports");
#	mil.line("# The following script, which creates a bat exports\n");
#	mil.line("# it and then tries to import it again fails:");
#	mil.line("# it and then tries to import it again fails:\n");
#	mil.line("# ");
#	mil.line("# \n");
#	mil.line("# > a := new(int,int);");
#	mil.line("# > a := new(int,int);\n");
#	mil.line("# > a.insert(1,1);");
#	mil.line("# > a.insert(1,1);\n");
#	mil.line("# > a.export(\"/home/quak/tmp/testt\");");
#	mil.line("# > a.export(\"/home/quak/tmp/testt\");\n");
#	mil.line("# > b := new(int,int);");
#	mil.line("# > b := new(int,int);\n");
#	mil.line("# > b.import(\"/home/quak/tmp/testt\");");
#	mil.line("# > b.import(\"/home/quak/tmp/testt\");\n");
#	mil.line("");
#	mil.line("var a := new(int,int);");
#	a := new(nil:int,nil:int);
#	mil.line("a.insert(1,1);");
#	aa_a := insert(a,1,1);
#	mil.line("a.print();");
#	ba_a := print(a);
#	mil.line("a.export(\"testt\");");
#	ca_a := export(a,"testt");
#	mil.line("var b := new(int,int);");
#	b := new(nil:int,nil:int);
#	mil.line("b.import(\"testt\");");
#	da_a := import(b,"testt");
#	mil.line("b.print();");
#	ea_a := print(b);
#	mil.line("quit();");
#	fa_a := quit();
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
#include mil; 	# 2  (_2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 3  (_3:str)
#Predefined code segment 	# 4  (_4:str)
#The compiler can not guarantee an accurate compilation, 	# 5  (_5:str)
#because MIL unlike MAL is a dynamically typed language. 	# 6  (_6:str)
#A few guidelines to maximize usefullness. 	# 7  (_7:str)
#- make the type of variables explicit, in particular 'nil' 	# 8  (_8:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 9  (_9:str)
#use the "mil_schema" for additional support routines 	# 10  (_10:str)
#	mil.line("# >Number:         31\n"); 	# 11  (_11:str)
#	mil.line("# >Category:       Mserver\n"); 	# 12  (_12:str)
#	mil.line("# >Synopsis:       Import does not work.\n"); 	# 13  (_13:str)
#	mil.line("# >Confidential:   no\n"); 	# 14  (_14:str)
#	mil.line("# >Severity:       serious\n"); 	# 15  (_15:str)
#	mil.line("# >Priority:       medium\n"); 	# 16  (_16:str)
#	mil.line("# >Responsible:    quak\n"); 	# 17  (_17:str)
#	mil.line("# >State:          closed\n"); 	# 18  (_18:str)
#	mil.line("# >Class:          sw-bug\n"); 	# 19  (_19:str)
#	mil.line("# >Submitter-Id:   unknown\n"); 	# 20  (_20:str)
#	mil.line("# >Arrival-Date:   Fri Sep 19 16:00:42 1997\n"); 	# 21  (_21:str)
#	mil.line("# >Originator:     quak\n"); 	# 22  (_22:str)
#	mil.line("# >Organization:\n"); 	# 23  (_23:str)
#	mil.line("# >Release:        970101\n"); 	# 24  (_24:str)
#	mil.line("# >Environment:\n"); 	# 25  (_25:str)
#	mil.line("# ALL\n"); 	# 26  (_26:str)
#	mil.line("# >Description:\n"); 	# 27  (_27:str)
#	mil.line("# The following script, which creates a bat exports\n"); 	# 28  (_28:str)
#	mil.line("# it and then tries to import it again fails:\n"); 	# 29  (_29:str)
#	mil.line("# \n"); 	# 30  (_30:str)
#	mil.line("# > a := bat.new(int,int);\n"); 	# 31  (_31:str)
#	mil.line("# > a.insert(1,1);\n"); 	# 32  (_32:str)
#	mil.line("# > a.export(\"/home/quak/tmp/testt\");\n"); 	# 33  (_33:str)
#	mil.line("# > b := bat.new(int,int);\n"); 	# 34  (_34:str)
#	mil.line("# > b.import(\"/home/quak/tmp/testt\");\n"); 	# 35  (_35:str)
#	mil.line("var a := bat.new(int,int);"); 	# 36  (_36:str)
    a := bat.new(nil:int,nil:int);	# 37 CMDBATnew (a:bat[:int,:int])<-(_38:int)(_38:int)
#	mil.line("a.insert(1,1);"); 	# 38  (_39:str)
    aa_a := bat.insert(a,1,1);	# 39 BKCinsert_bun (aa_a:void)<-(a:bat[:int,:int])(_41:int)(_41:int)
#	mil.line("a.print();"); 	# 40  (_42:str)
    ba_a := io.print(a);	# 41 IOprint_val (ba_a:int)<-(a:bat[:int,:int])
#	mil.line("a.export(\"testt\");"); 	# 42  (_44:str)
    ca_a := io.export(a,"testt");	# 43 IOexport (ca_a:bit)<-(a:bat[:int,:int])(_46:str)
#	mil.line("var b := bat.new(int,int);"); 	# 44  (_47:str)
    b := bat.new(nil:int,nil:int);	# 45 CMDBATnew (b:bat[:int,:int])<-(_38:int)(_38:int)
#	mil.line("b.import(\"testt\");"); 	# 46  (_49:str)
    da_a := io.import(b,"testt");	# 47 IOimport (da_a:bit)<-(b:bat[:int,:int])(_46:str)
#	mil.line("b.print();"); 	# 48  (_51:str)
    ea_a := io.print(b);	# 49 IOprint_val (ea_a:int)<-(b:bat[:int,:int])
#	mil.line("quit();"); 	# 50  (_53:str)
    fa_a := clients.quit();	# 51 CLTquit (fa_a:void)
end main;	# 52  
#-----------------#
# BAT:	  tmp_25  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
#a.export("testt");
#var b := new(int,int);
#b.import("testt");
#b.print();
#-----------------#
# BAT:	  tmp_26  #
# (int)	  (int)	  #
#-----------------#
[ 1,	  1	  ]
#quit();

# 17:06:47 >  
# 17:06:47 >  Done.
# 17:06:47 >  

