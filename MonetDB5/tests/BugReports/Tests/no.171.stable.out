stdout of test 'no.171` in directory 'tests/BugReports` itself:


# 07:39:41 >  
# 07:39:41 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=36999 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.171.mal < /dev/null
# 07:39:41 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# >Number:         171\n");
##	mil.line("# >Category:       MIL\n");
##	mil.line("# >Synopsis:       X.reverse().select() fails after X.sort()\n");
##	mil.line("# >Confidential:   no\n");
##	mil.line("# >Severity:       critical\n");
##	mil.line("# >Priority:       high\n");
##	mil.line("# >Responsible:    boncz (Peter Boncz)\n");
##	mil.line("# >State:          open\n");
##	mil.line("# >Class:          sw-bug\n");
##	mil.line("# >Submitter-Id:   unknown\n");
##	mil.line("# >Arrival-Date:   Thu Dec 10 22:54:12 1998\n");
##	mil.line("# >Originator:     manegold@cwi.nl\n");
##	mil.line("# >Organization:\n");
##	mil.line("# CWI\n");
##	mil.line("# >Release:        980101\n");
##	mil.line("# >Environment:\n");
##	mil.line("# IRIX\n");
##	mil.line("# >Description:\n");
##	mil.line("# a select on an bat.reverse()d BAT returns incorrect result\n");
##	mil.line("# when a sort has been done on the same BAT before.\n");
##	mil.line("#\n");
##	mil.line("# sample script:\n");
##	mil.line("# ========\n");
##	mil.line("# s:=new(int,int);\n");
##	mil.line("# bat.insert(s,5,5);\n");
##	mil.line("# bat.insert(s,3,3);\n");
##	mil.line("# bat.insert(s,4,2);\n");
##	mil.line("# bat.insert(s,2,1);\n");
##	mil.line("# bat.insert(s,1,1);\n");
##	mil.line("# bat.insert(s,4,2);\n");
##	mil.line("# bat.insert(s,4,3);\n");
##	mil.line("# s.sort.print();\n");
##	mil.line("# s.reverse().select(2).print();\n");
##	mil.line("# ========\n");
##	mil.line("#\n");
##	mil.line("# incorrect output of the last select:\n");
##	mil.line("# ========\n");
##	mil.line("# s.reverse().select(2).print();\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# # BAT:    tmp_24  #\n");
##	mil.line("# # (int)   (int)   #\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# [ 1,      1       ]\n");
##	mil.line("# [ 1,      2       ]\n");
##	mil.line("# ========\n");
##	mil.line("#\n");
##	mil.line("# correct output of the last select:\n");
##	mil.line("# ========\n");
##	mil.line("# s.reverse().select(2).print();\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# # BAT:    tmp_24  #\n");
##	mil.line("# # (int)   (int)   #\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# [ 1,      2       ]\n");
##	mil.line("# ========\n");
##	mil.line("#\n");
##	mil.line("# for a detailed test script see \n");
##	mil.line("# tests/BugReports/Tests/no.171.*\n");
##	mil.line("# in the Monet source repository.\n");
##	mil.line("#\n");
##	mil.line("#         stefan\n");
##	mil.line("var s:=new(int,int);");
#	s := bat.new(nil:int,nil:int);
##	mil.line("insert(s,5,5);");
#	aa_a := bat.insert(s,5,5);
##	mil.line("insert(s,3,3);");
#	ba_a := bat.insert(s,3,3);
##	mil.line("insert(s,4,2);");
#	ca_a := bat.insert(s,4,2);
##	mil.line("insert(s,2,1);");
#	da_a := bat.insert(s,2,1);
##	mil.line("insert(s,1,1);");
#	ea_a := bat.insert(s,1,1);
##	mil.line("insert(s,4,2);");
#	fa_a := bat.insert(s,4,2);
##	mil.line("insert(s,4,3);");
#	ga_a := bat.insert(s,4,3);
##	mil.line("s.print();");
#	ha_a := io.print(s);
##	mil.line("s.select(1).print();");
#	ia_a := algebra.select(s,1);
#	ja_a := io.print(ia_a);
##	mil.line("s.select(2).print();");
#	ka_a := algebra.select(s,2);
#	la_a := io.print(ka_a);
##	mil.line("s.select(3).print();");
#	ma_a := algebra.select(s,3);
#	na_a := io.print(ma_a);
##	mil.line("s.select(4).print();");
#	oa_a := algebra.select(s,4);
#	pa_a := io.print(oa_a);
##	mil.line("s.select(5).print();");
#	qa_a := algebra.select(s,5);
#	ra_a := io.print(qa_a);
##	mil.line("s.reverse().print();");
#	sa_a := bat.reverse(s);
#	ta_a := io.print(sa_a);
##	mil.line("s.reverse().select(1).print();");
#	ua_a := bat.reverse(s);
#	va_a := algebra.select(ua_a,1);
#	wa_a := io.print(va_a);
##	mil.line("s.reverse().select(2).print();");
#	xa_a := bat.reverse(s);
#	ya_a := algebra.select(xa_a,2);
#	ab_a := io.print(ya_a);
##	mil.line("s.reverse().select(3).print();");
#	bb_a := bat.reverse(s);
#	cb_a := algebra.select(bb_a,3);
#	db_a := io.print(cb_a);
##	mil.line("s.reverse().select(4).print();");
#	eb_a := bat.reverse(s);
#	fb_a := algebra.select(eb_a,4);
#	gb_a := io.print(fb_a);
##	mil.line("s.reverse().select(5).print();");
#	hb_a := bat.reverse(s);
#	ib_a := algebra.select(hb_a,5);
#	jb_a := io.print(ib_a);
##	mil.line("printf(\"#~BeginVariableOutput~#\\n\");");
#	kb_a := io.printf("#~BeginVariableOutput~#\n");
##	mil.line("s.sort().print();");
#	lb_a := algebra.sort(s);
#	mb_a := io.print(lb_a);
##	mil.line("printf(\"#~EndVariableOutput~#\\n\");");
#	nb_a := io.printf("#~EndVariableOutput~#\n");
##	mil.line("s.sortHT().print();");
#	ob_a := algebra.sortHT(s);
#	pb_a := io.print(ob_a);
##	mil.line("s.select(1).print();");
#	qb_a := algebra.select(s,1);
#	rb_a := io.print(qb_a);
##	mil.line("s.select(2).print();");
#	sb_a := algebra.select(s,2);
#	tb_a := io.print(sb_a);
##	mil.line("s.select(3).print();");
#	ub_a := algebra.select(s,3);
#	vb_a := io.print(ub_a);
##	mil.line("s.select(4).print();");
#	wb_a := algebra.select(s,4);
#	xb_a := io.print(wb_a);
##	mil.line("s.select(5).print();");
#	yb_a := algebra.select(s,5);
#	ac_a := io.print(yb_a);
##	mil.line("s.reverse().print();");
#	bc_a := bat.reverse(s);
#	cc_a := io.print(bc_a);
##	mil.line("s.reverse().select(1).print();");
#	dc_a := bat.reverse(s);
#	ec_a := algebra.select(dc_a,1);
#	fc_a := io.print(ec_a);
##	mil.line("s.reverse().select(2).print();");
#	gc_a := bat.reverse(s);
#	hc_a := algebra.select(gc_a,2);
#	ic_a := io.print(hc_a);
##	mil.line("s.reverse().select(3).print();");
#	jc_a := bat.reverse(s);
#	kc_a := algebra.select(jc_a,3);
#	lc_a := io.print(kc_a);
##	mil.line("s.reverse().select(4).print();");
#	mc_a := bat.reverse(s);
#	nc_a := algebra.select(mc_a,4);
#	oc_a := io.print(nc_a);
##	mil.line("s.reverse().select(4).sortHT().print();");
#	pc_a := bat.reverse(s);
#	qc_a := algebra.select(pc_a,4);
#	rc_a := algebra.sortHT(qc_a);
#	sc_a := io.print(rc_a);
##	mil.line("s.reverse().select(5).print();");
#	tc_a := bat.reverse(s);
#	uc_a := algebra.select(tc_a,5);
#	vc_a := io.print(uc_a);
##	mil.line("printf(\"#~BeginVariableOutput~#\\n\");");
#	wc_a := io.printf("#~BeginVariableOutput~#\n");
##	mil.line("s.reverse().sort().print();");
#	xc_a := bat.reverse(s);
#	yc_a := algebra.sort(xc_a);
#	ad_a := io.print(yc_a);
##	mil.line("printf(\"#~EndVariableOutput~#\\n\");");
#	bd_a := io.printf("#~EndVariableOutput~#\n");
##	mil.line("s.reverse().sortHT().print();");
#	cd_a := bat.reverse(s);
#	dd_a := algebra.sortHT(cd_a);
#	ed_a := io.print(dd_a);
##	mil.line("s.reverse().select(1).print();");
#	fd_a := bat.reverse(s);
#	gd_a := algebra.select(fd_a,1);
#	hd_a := io.print(gd_a);
##	mil.line("s.reverse().select(2).print();");
#	id_a := bat.reverse(s);
#	jd_a := algebra.select(id_a,2);
#	kd_a := io.print(jd_a);
##	mil.line("s.reverse().select(3).print();");
#	ld_a := bat.reverse(s);
#	md_a := algebra.select(ld_a,3);
#	nd_a := io.print(md_a);
##	mil.line("s.reverse().select(4).print();");
#	od_a := bat.reverse(s);
#	pd_a := algebra.select(od_a,4);
#	qd_a := io.print(pd_a);
##	mil.line("s.reverse().select(4).sortHT().print();");
#	rd_a := bat.reverse(s);
#	sd_a := algebra.select(rd_a,4);
#	td_a := algebra.sortHT(sd_a);
#	ud_a := io.print(td_a);
##	mil.line("s.reverse().select(5).print();");
#	vd_a := bat.reverse(s);
#	wd_a := algebra.select(vd_a,5);
#	xd_a := io.print(wd_a);
##	mil.line("quit();");
#	yd_a := clients.quit();
#
function user.main():void;              #  0 main:void {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("# >Number:         171\n"); 
#	io.print("# >Category:       MIL\n"); 
#	io.print("# >Synopsis:       X.reverse().select() fails after X.sort()\n"); 
#	io.print("# >Confidential:   no\n"); 
#	io.print("# >Severity:       critical\n"); 
#	io.print("# >Priority:       high\n"); 
#	io.print("# >Responsible:    boncz (Peter Boncz)\n"); 
#	io.print("# >State:          open\n"); 
#	io.print("# >Class:          sw-bug\n"); 
#	io.print("# >Submitter-Id:   unknown\n"); 
#	io.print("# >Arrival-Date:   Thu Dec 10 22:54:12 1998\n"); 
#	io.print("# >Originator:     manegold@cwi.nl\n"); 
#	io.print("# >Organization:\n"); 
#	io.print("# CWI\n"); 
#	io.print("# >Release:        980101\n"); 
#	io.print("# >Environment:\n"); 
#	io.print("# IRIX\n"); 
#	io.print("# >Description:\n"); 
#	io.print("# a select on an bat.reverse()d BAT returns incorrect result\n"); 
#	io.print("# when a sort has been done on the same BAT before.\n"); 
#	io.print("#\n"); 
#	io.print("# sample script:\n"); 
#	io.print("# ========\n"); 
#	io.print("# s:=new(int,int);\n"); 
#	io.print("# bat.insert(s,5,5);\n"); 
#	io.print("# bat.insert(s,3,3);\n"); 
#	io.print("# bat.insert(s,4,2);\n"); 
#	io.print("# bat.insert(s,2,1);\n"); 
#	io.print("# bat.insert(s,1,1);\n"); 
#	io.print("# bat.insert(s,4,2);\n"); 
#	io.print("# bat.insert(s,4,3);\n"); 
#	io.print("# s.sort.print();\n"); 
#	io.print("# s.reverse().select(2).print();\n"); 
#	io.print("# ========\n"); 
#	io.print("#\n"); 
#	io.print("# incorrect output of the last select:\n"); 
#	io.print("# ========\n"); 
#	io.print("# s.reverse().select(2).print();\n"); 
#	io.print("# #-----------------#\n"); 
#	io.print("# # BAT:    tmp_24  #\n"); 
#	io.print("# # (int)   (int)   #\n"); 
#	io.print("# #-----------------#\n"); 
#	io.print("# [ 1,      1       ]\n"); 
#	io.print("# [ 1,      2       ]\n"); 
#	io.print("# ========\n"); 
#	io.print("#\n"); 
#	io.print("# correct output of the last select:\n"); 
#	io.print("# ========\n"); 
#	io.print("# s.reverse().select(2).print();\n"); 
#	io.print("# #-----------------#\n"); 
#	io.print("# # BAT:    tmp_24  #\n"); 
#	io.print("# # (int)   (int)   #\n"); 
#	io.print("# #-----------------#\n"); 
#	io.print("# [ 1,      2       ]\n"); 
#	io.print("# ========\n"); 
#	io.print("#\n"); 
#	io.print("# for a detailed test script see \n"); 
#	io.print("# tests/BugReports/Tests/no.171.*\n"); 
#	io.print("# in the Monet source repository.\n"); 
#	io.print("#\n"); 
#	io.print("#         stefan\n"); 
#	io.print("var s:=new(int,int);"); 
    s := bat.new(nil:int,nil:int);      # 72 s:bat[:int,:int] := CMDBATnew(_73:int, _73:int) {G}
#	io.print("insert(s,5,5);"); 
    aa_a := bat.insert(s,5,5);          # 74 aa_a:void := BKCinsert_bun(s:bat[:int,:int], _76:int, _76:int) 
#	io.print("insert(s,3,3);"); 
    ba_a := bat.insert(s,3,3);          # 76 ba_a:void := BKCinsert_bun(s:bat[:int,:int], _79:int, _79:int) 
#	io.print("insert(s,4,2);"); 
    ca_a := bat.insert(s,4,2);          # 78 ca_a:void := BKCinsert_bun(s:bat[:int,:int], _82:int, _83:int) 
#	io.print("insert(s,2,1);"); 
    da_a := bat.insert(s,2,1);          # 80 da_a:void := BKCinsert_bun(s:bat[:int,:int], _83:int, _86:int) 
#	io.print("insert(s,1,1);"); 
    ea_a := bat.insert(s,1,1);          # 82 ea_a:void := BKCinsert_bun(s:bat[:int,:int], _86:int, _86:int) 
#	io.print("insert(s,4,2);"); 
    fa_a := bat.insert(s,4,2);          # 84 fa_a:void := BKCinsert_bun(s:bat[:int,:int], _82:int, _83:int) 
#	io.print("insert(s,4,3);"); 
    ga_a := bat.insert(s,4,3);          # 86 ga_a:void := BKCinsert_bun(s:bat[:int,:int], _82:int, _79:int) 
#	io.print("s.print();"); 
    ha_a := io.print(s);                # 88 ha_a:void := IOprint_val(s:bat[:int,:int]) 
#	io.print("s.select(1).print();"); 
    ia_a := algebra.select(s,1);        # 90 ia_a:bat[:int,:int] := ALGselect1(s:bat[:int,:int], _86:int) {G}
    ja_a := io.print(ia_a);             # 91 ja_a:void := IOprint_val(ia_a:bat[:int,:int]) 
#	io.print("s.select(2).print();"); 
    ka_a := algebra.select(s,2);        # 93 ka_a:bat[:int,:int] := ALGselect1(s:bat[:int,:int], _83:int) {G}
    la_a := io.print(ka_a);             # 94 la_a:void := IOprint_val(ka_a:bat[:int,:int]) 
#	io.print("s.select(3).print();"); 
    ma_a := algebra.select(s,3);        # 96 ma_a:bat[:int,:int] := ALGselect1(s:bat[:int,:int], _79:int) {G}
    na_a := io.print(ma_a);             # 97 na_a:void := IOprint_val(ma_a:bat[:int,:int]) 
#	io.print("s.select(4).print();"); 
    oa_a := algebra.select(s,4);        # 99 oa_a:bat[:int,:int] := ALGselect1(s:bat[:int,:int], _82:int) {G}
    pa_a := io.print(oa_a);             #100 pa_a:void := IOprint_val(oa_a:bat[:int,:int]) 
#	io.print("s.select(5).print();"); 
    qa_a := algebra.select(s,5);        #102 qa_a:bat[:int,:int] := ALGselect1(s:bat[:int,:int], _109:int) {G}
    ra_a := io.print(qa_a);             #103 ra_a:void := IOprint_val(qa_a:bat[:int,:int]) 
#	io.print("s.reverse().print();"); 
    sa_a := bat.reverse(s);             #105 sa_a:bat[:int,:int] := BKCreverse(s:bat[:int,:int]) {G}
    ta_a := io.print(sa_a);             #106 ta_a:void := IOprint_val(sa_a:bat[:int,:int]) 
#	io.print("s.reverse().select(1).print();"); 
    ua_a := bat.reverse(s);             #108 ua_a:bat[:int,:int] := BKCreverse(s:bat[:int,:int]) {G}
    va_a := algebra.select(ua_a,1);     #109 va_a:bat[:int,:int] := ALGselect1(ua_a:bat[:int,:int], _86:int) {G}
    wa_a := io.print(va_a);             #110 wa_a:void := IOprint_val(va_a:bat[:int,:int]) 
#	io.print("s.reverse().select(2).print();"); 
    xa_a := bat.reverse(s);             #112 xa_a:bat[:int,:int] := BKCreverse(s:bat[:int,:int]) {G}
    ya_a := algebra.select(xa_a,2);     #113 ya_a:bat[:int,:int] := ALGselect1(xa_a:bat[:int,:int], _121:int) {G}
    ab_a := io.print(ya_a);             #114 ab_a:void := IOprint_val(ya_a:bat[:int,:int]) 
#	io.print("s.reverse().select(3).print();"); 
    bb_a := bat.reverse(s);             #116 bb_a:bat[:int,:int] := BKCreverse(s:bat[:int,:int]) {G}
    cb_a := algebra.select(bb_a,3);     #117 cb_a:bat[:int,:int] := ALGselect1(bb_a:bat[:int,:int], _126:int) {G}
    db_a := io.print(cb_a);             #118 db_a:void := IOprint_val(cb_a:bat[:int,:int]) 
#	io.print("s.reverse().select(4).print();"); 
    eb_a := bat.reverse(s);             #120 eb_a:bat[:int,:int] := BKCreverse(s:bat[:int,:int]) {G}
    fb_a := algebra.select(eb_a,4);     #121 fb_a:bat[:int,:int] := ALGselect1(eb_a:bat[:int,:int], _131:int) {G}
    gb_a := io.print(fb_a);             #122 gb_a:void := IOprint_val(fb_a:bat[:int,:int]) 
#	io.print("s.reverse().select(5).print();"); 
    hb_a := bat.reverse(s);             #124 hb_a:bat[:int,:int] := BKCreverse(s:bat[:int,:int]) {G}
    ib_a := algebra.select(hb_a,5);     #125 ib_a:bat[:int,:int] := ALGselect1(hb_a:bat[:int,:int], _109:int) {G}
    jb_a := io.print(ib_a);             #126 jb_a:void := IOprint_val(ib_a:bat[:int,:int]) 
#	io.print("printf(\"#~BeginVariableOutput~#\\n\");"); 
    kb_a := io.printf("#~BeginVariableOutput~#\n");#128 kb_a:void := IOprint_str(_139:str) 
#	io.print("s.sort().print();"); 
    lb_a := algebra.sort(s);            #130 lb_a:bat[:int,:int] := ALGhsort(s:bat[:int,:int]) {G}
    mb_a := io.print(lb_a);             #131 mb_a:void := IOprint_val(lb_a:bat[:int,:int]) 
#	io.print("printf(\"#~EndVariableOutput~#\\n\");"); 
    nb_a := io.printf("#~EndVariableOutput~#\n");#133 nb_a:void := IOprint_str(_145:str) 
#	io.print("s.sortHT().print();"); 
    ob_a := algebra.sortHT(s);          #135 ob_a:bat[:int,:int] := ALGhtsort(s:bat[:int,:int]) {G}
    pb_a := io.print(ob_a);             #136 pb_a:void := IOprint_val(ob_a:bat[:int,:int]) 
#	io.print("s.select(1).print();"); 
    qb_a := algebra.select(s,1);        #138 qb_a:bat[:int,:int] := ALGselect1(s:bat[:int,:int], _151:int) {G}
    rb_a := io.print(qb_a);             #139 rb_a:void := IOprint_val(qb_a:bat[:int,:int]) 
#	io.print("s.select(2).print();"); 
    sb_a := algebra.select(s,2);        #141 sb_a:bat[:int,:int] := ALGselect1(s:bat[:int,:int], _155:int) {G}
    tb_a := io.print(sb_a);             #142 tb_a:void := IOprint_val(sb_a:bat[:int,:int]) 
#	io.print("s.select(3).print();"); 
    ub_a := algebra.select(s,3);        #144 ub_a:bat[:int,:int] := ALGselect1(s:bat[:int,:int], _159:int) {G}
    vb_a := io.print(ub_a);             #145 vb_a:void := IOprint_val(ub_a:bat[:int,:int]) 
#	io.print("s.select(4).print();"); 
    wb_a := algebra.select(s,4);        #147 wb_a:bat[:int,:int] := ALGselect1(s:bat[:int,:int], _131:int) {G}
    xb_a := io.print(wb_a);             #148 xb_a:void := IOprint_val(wb_a:bat[:int,:int]) 
#	io.print("s.select(5).print();"); 
    yb_a := algebra.select(s,5);        #150 yb_a:bat[:int,:int] := ALGselect1(s:bat[:int,:int], _166:int) {G}
    ac_a := io.print(yb_a);             #151 ac_a:void := IOprint_val(yb_a:bat[:int,:int]) 
#	io.print("s.reverse().print();"); 
    bc_a := bat.reverse(s);             #153 bc_a:bat[:int,:int] := BKCreverse(s:bat[:int,:int]) {G}
    cc_a := io.print(bc_a);             #154 cc_a:void := IOprint_val(bc_a:bat[:int,:int]) 
#	io.print("s.reverse().select(1).print();"); 
    dc_a := bat.reverse(s);             #156 dc_a:bat[:int,:int] := BKCreverse(s:bat[:int,:int]) {G}
    ec_a := algebra.select(dc_a,1);     #157 ec_a:bat[:int,:int] := ALGselect1(dc_a:bat[:int,:int], _151:int) {G}
    fc_a := io.print(ec_a);             #158 fc_a:void := IOprint_val(ec_a:bat[:int,:int]) 
#	io.print("s.reverse().select(2).print();"); 
    gc_a := bat.reverse(s);             #160 gc_a:bat[:int,:int] := BKCreverse(s:bat[:int,:int]) {G}
    hc_a := algebra.select(gc_a,2);     #161 hc_a:bat[:int,:int] := ALGselect1(gc_a:bat[:int,:int], _155:int) {G}
    ic_a := io.print(hc_a);             #162 ic_a:void := IOprint_val(hc_a:bat[:int,:int]) 
#	io.print("s.reverse().select(3).print();"); 
    jc_a := bat.reverse(s);             #164 jc_a:bat[:int,:int] := BKCreverse(s:bat[:int,:int]) {G}
    kc_a := algebra.select(jc_a,3);     #165 kc_a:bat[:int,:int] := ALGselect1(jc_a:bat[:int,:int], _159:int) {G}
    lc_a := io.print(kc_a);             #166 lc_a:void := IOprint_val(kc_a:bat[:int,:int]) 
#	io.print("s.reverse().select(4).print();"); 
    mc_a := bat.reverse(s);             #168 mc_a:bat[:int,:int] := BKCreverse(s:bat[:int,:int]) {G}
    nc_a := algebra.select(mc_a,4);     #169 nc_a:bat[:int,:int] := ALGselect1(mc_a:bat[:int,:int], _186:int) {G}
    oc_a := io.print(nc_a);             #170 oc_a:void := IOprint_val(nc_a:bat[:int,:int]) 
#	io.print("s.reverse().select(4).sortHT().print();"); 
    pc_a := bat.reverse(s);             #172 pc_a:bat[:int,:int] := BKCreverse(s:bat[:int,:int]) {G}
    qc_a := algebra.select(pc_a,4);     #173 qc_a:bat[:int,:int] := ALGselect1(pc_a:bat[:int,:int], _186:int) {G}
    rc_a := algebra.sortHT(qc_a);       #174 rc_a:bat[:int,:int] := ALGhtsort(qc_a:bat[:int,:int]) {G}
    sc_a := io.print(rc_a);             #175 sc_a:void := IOprint_val(rc_a:bat[:int,:int]) 
#	io.print("s.reverse().select(5).print();"); 
    tc_a := bat.reverse(s);             #177 tc_a:bat[:int,:int] := BKCreverse(s:bat[:int,:int]) {G}
    uc_a := algebra.select(tc_a,5);     #178 uc_a:bat[:int,:int] := ALGselect1(tc_a:bat[:int,:int], _166:int) {G}
    vc_a := io.print(uc_a);             #179 vc_a:void := IOprint_val(uc_a:bat[:int,:int]) 
#	io.print("printf(\"#~BeginVariableOutput~#\\n\");"); 
    wc_a := io.printf("#~BeginVariableOutput~#\n");#181 wc_a:void := IOprint_str(_199:str) 
#	io.print("s.reverse().sort().print();"); 
    xc_a := bat.reverse(s);             #183 xc_a:bat[:int,:int] := BKCreverse(s:bat[:int,:int]) {G}
    yc_a := algebra.sort(xc_a);         #184 yc_a:bat[:int,:int] := ALGhsort(xc_a:bat[:int,:int]) {G}
    ad_a := io.print(yc_a);             #185 ad_a:void := IOprint_val(yc_a:bat[:int,:int]) 
#	io.print("printf(\"#~EndVariableOutput~#\\n\");"); 
    bd_a := io.printf("#~EndVariableOutput~#\n");#187 bd_a:void := IOprint_str(_206:str) 
#	io.print("s.reverse().sortHT().print();"); 
    cd_a := bat.reverse(s);             #189 cd_a:bat[:int,:int] := BKCreverse(s:bat[:int,:int]) {G}
    dd_a := algebra.sortHT(cd_a);       #190 dd_a:bat[:int,:int] := ALGhtsort(cd_a:bat[:int,:int]) {G}
    ed_a := io.print(dd_a);             #191 ed_a:void := IOprint_val(dd_a:bat[:int,:int]) 
#	io.print("s.reverse().select(1).print();"); 
    fd_a := bat.reverse(s);             #193 fd_a:bat[:int,:int] := BKCreverse(s:bat[:int,:int]) {G}
    gd_a := algebra.select(fd_a,1);     #194 gd_a:bat[:int,:int] := ALGselect1(fd_a:bat[:int,:int], _214:int) {G}
    hd_a := io.print(gd_a);             #195 hd_a:void := IOprint_val(gd_a:bat[:int,:int]) 
#	io.print("s.reverse().select(2).print();"); 
    id_a := bat.reverse(s);             #197 id_a:bat[:int,:int] := BKCreverse(s:bat[:int,:int]) {G}
    jd_a := algebra.select(id_a,2);     #198 jd_a:bat[:int,:int] := ALGselect1(id_a:bat[:int,:int], _219:int) {G}
    kd_a := io.print(jd_a);             #199 kd_a:void := IOprint_val(jd_a:bat[:int,:int]) 
#	io.print("s.reverse().select(3).print();"); 
    ld_a := bat.reverse(s);             #201 ld_a:bat[:int,:int] := BKCreverse(s:bat[:int,:int]) {G}
    md_a := algebra.select(ld_a,3);     #202 md_a:bat[:int,:int] := ALGselect1(ld_a:bat[:int,:int], _224:int) {G}
    nd_a := io.print(md_a);             #203 nd_a:void := IOprint_val(md_a:bat[:int,:int]) 
#	io.print("s.reverse().select(4).print();"); 
    od_a := bat.reverse(s);             #205 od_a:bat[:int,:int] := BKCreverse(s:bat[:int,:int]) {G}
    pd_a := algebra.select(od_a,4);     #206 pd_a:bat[:int,:int] := ALGselect1(od_a:bat[:int,:int], _229:int) {G}
    qd_a := io.print(pd_a);             #207 qd_a:void := IOprint_val(pd_a:bat[:int,:int]) 
#	io.print("s.reverse().select(4).sortHT().print();"); 
    rd_a := bat.reverse(s);             #209 rd_a:bat[:int,:int] := BKCreverse(s:bat[:int,:int]) {G}
    sd_a := algebra.select(rd_a,4);     #210 sd_a:bat[:int,:int] := ALGselect1(rd_a:bat[:int,:int], _229:int) {G}
    td_a := algebra.sortHT(sd_a);       #211 td_a:bat[:int,:int] := ALGhtsort(sd_a:bat[:int,:int]) {G}
    ud_a := io.print(td_a);             #212 ud_a:void := IOprint_val(td_a:bat[:int,:int]) 
#	io.print("s.reverse().select(5).print();"); 
    vd_a := bat.reverse(s);             #214 vd_a:bat[:int,:int] := BKCreverse(s:bat[:int,:int]) {G}
    wd_a := algebra.select(vd_a,5);     #215 wd_a:bat[:int,:int] := ALGselect1(vd_a:bat[:int,:int], _239:int) {G}
    xd_a := io.print(wd_a);             #216 xd_a:void := IOprint_val(wd_a:bat[:int,:int]) 
#	io.print("quit();"); 
    yd_a := clients.quit();             #218 yd_a:void 
end main;                               #219  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 5,	  5	  ]
[ 3,	  3	  ]
[ 4,	  2	  ]
[ 2,	  1	  ]
[ 1,	  1	  ]
[ 4,	  2	  ]
[ 4,	  3	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  1	  ]
[ 1,	  1	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 4,	  2	  ]
[ 4,	  2	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  3	  ]
[ 4,	  3	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 5,	  5	  ]
#-----------------#
# t	h	  # name
# int	int	  # type
#-----------------#
[ 5,	  5	  ]
[ 3,	  3	  ]
[ 2,	  4	  ]
[ 1,	  2	  ]
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  3	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 5,	  5	  ]
#~BeginVariableOutput~#
#-----------------#
# t	h	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 4,	  3	  ]
[ 4,	  2	  ]
[ 4,	  2	  ]
[ 5,	  5	  ]
#~EndVariableOutput~#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 4,	  2	  ]
[ 4,	  2	  ]
[ 4,	  3	  ]
[ 5,	  5	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  1	  ]
[ 1,	  1	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 4,	  2	  ]
[ 4,	  2	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  3	  ]
[ 4,	  3	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 5,	  5	  ]
#-----------------#
# t	h	  # name
# int	int	  # type
#-----------------#
[ 5,	  5	  ]
[ 3,	  3	  ]
[ 2,	  4	  ]
[ 1,	  2	  ]
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  3	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 5,	  5	  ]
#~BeginVariableOutput~#
#-----------------#
# t	h	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  3	  ]
[ 3,	  4	  ]
[ 5,	  5	  ]
#~EndVariableOutput~#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  3	  ]
[ 3,	  4	  ]
[ 5,	  5	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  3	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 5,	  5	  ]

# 07:39:41 >  
# 07:39:41 >  Done.
# 07:39:41 >  

