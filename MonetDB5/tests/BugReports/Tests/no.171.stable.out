stdout of test 'no.171` in directory 'tests/BugReports` itself:


# 07:39:41 >  
# 07:39:41 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=36999 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.171.mal < /dev/null
# 07:39:41 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# >Number:         171\n");
##	mil.line("# >Category:       MIL\n");
##	mil.line("# >Synopsis:       X.reverse().select() fails after X.sort()\n");
##	mil.line("# >Confidential:   no\n");
##	mil.line("# >Severity:       critical\n");
##	mil.line("# >Priority:       high\n");
##	mil.line("# >Responsible:    boncz (Peter Boncz)\n");
##	mil.line("# >State:          open\n");
##	mil.line("# >Class:          sw-bug\n");
##	mil.line("# >Submitter-Id:   unknown\n");
##	mil.line("# >Arrival-Date:   Thu Dec 10 22:54:12 1998\n");
##	mil.line("# >Originator:     manegold@cwi.nl\n");
##	mil.line("# >Organization:\n");
##	mil.line("# CWI\n");
##	mil.line("# >Release:        980101\n");
##	mil.line("# >Environment:\n");
##	mil.line("# IRIX\n");
##	mil.line("# >Description:\n");
##	mil.line("# a select on an bat.reverse()d BAT returns incorrect result\n");
##	mil.line("# when a sort has been done on the same BAT before.\n");
##	mil.line("#\n");
##	mil.line("# sample script:\n");
##	mil.line("# ========\n");
##	mil.line("# s:=new(int,int);\n");
##	mil.line("# bat.insert(s,5,5);\n");
##	mil.line("# bat.insert(s,3,3);\n");
##	mil.line("# bat.insert(s,4,2);\n");
##	mil.line("# bat.insert(s,2,1);\n");
##	mil.line("# bat.insert(s,1,1);\n");
##	mil.line("# bat.insert(s,4,2);\n");
##	mil.line("# bat.insert(s,4,3);\n");
##	mil.line("# s.sort.print();\n");
##	mil.line("# s.reverse().select(2).print();\n");
##	mil.line("# ========\n");
##	mil.line("#\n");
##	mil.line("# incorrect output of the last select:\n");
##	mil.line("# ========\n");
##	mil.line("# s.reverse().select(2).print();\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# # BAT:    tmp_24  #\n");
##	mil.line("# # (int)   (int)   #\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# [ 1,      1       ]\n");
##	mil.line("# [ 1,      2       ]\n");
##	mil.line("# ========\n");
##	mil.line("#\n");
##	mil.line("# correct output of the last select:\n");
##	mil.line("# ========\n");
##	mil.line("# s.reverse().select(2).print();\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# # BAT:    tmp_24  #\n");
##	mil.line("# # (int)   (int)   #\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# [ 1,      2       ]\n");
##	mil.line("# ========\n");
##	mil.line("#\n");
##	mil.line("# for a detailed test script see \n");
##	mil.line("# tests/BugReports/Tests/no.171.*\n");
##	mil.line("# in the Monet source repository.\n");
##	mil.line("#\n");
##	mil.line("#         stefan\n");
##	mil.line("var s:=new(int,int);");
#	s := bat.new(nil:int,nil:int);
##	mil.line("insert(s,5,5);");
#	aa_a := bat.insert(s,5,5);
##	mil.line("insert(s,3,3);");
#	ba_a := bat.insert(s,3,3);
##	mil.line("insert(s,4,2);");
#	ca_a := bat.insert(s,4,2);
##	mil.line("insert(s,2,1);");
#	da_a := bat.insert(s,2,1);
##	mil.line("insert(s,1,1);");
#	ea_a := bat.insert(s,1,1);
##	mil.line("insert(s,4,2);");
#	fa_a := bat.insert(s,4,2);
##	mil.line("insert(s,4,3);");
#	ga_a := bat.insert(s,4,3);
##	mil.line("s.print();");
#	ha_a := io.print(s);
##	mil.line("s.select(1).print();");
#	ia_a := algebra.select(s,1);
#	ja_a := io.print(ia_a);
##	mil.line("s.select(2).print();");
#	ka_a := algebra.select(s,2);
#	la_a := io.print(ka_a);
##	mil.line("s.select(3).print();");
#	ma_a := algebra.select(s,3);
#	na_a := io.print(ma_a);
##	mil.line("s.select(4).print();");
#	oa_a := algebra.select(s,4);
#	pa_a := io.print(oa_a);
##	mil.line("s.select(5).print();");
#	qa_a := algebra.select(s,5);
#	ra_a := io.print(qa_a);
##	mil.line("s.reverse().print();");
#	sa_a := bat.reverse(s);
#	ta_a := io.print(sa_a);
##	mil.line("s.reverse().select(1).print();");
#	ua_a := bat.reverse(s);
#	va_a := algebra.select(ua_a,1);
#	wa_a := io.print(va_a);
##	mil.line("s.reverse().select(2).print();");
#	xa_a := bat.reverse(s);
#	ya_a := algebra.select(xa_a,2);
#	ab_a := io.print(ya_a);
##	mil.line("s.reverse().select(3).print();");
#	bb_a := bat.reverse(s);
#	cb_a := algebra.select(bb_a,3);
#	db_a := io.print(cb_a);
##	mil.line("s.reverse().select(4).print();");
#	eb_a := bat.reverse(s);
#	fb_a := algebra.select(eb_a,4);
#	gb_a := io.print(fb_a);
##	mil.line("s.reverse().select(5).print();");
#	hb_a := bat.reverse(s);
#	ib_a := algebra.select(hb_a,5);
#	jb_a := io.print(ib_a);
##	mil.line("printf(\"#~BeginVariableOutput~#\\n\");");
#	kb_a := io.printf("#~BeginVariableOutput~#\n");
##	mil.line("s.sort().print();");
#	lb_a := algebra.sort(s);
#	mb_a := io.print(lb_a);
##	mil.line("printf(\"#~EndVariableOutput~#\\n\");");
#	nb_a := io.printf("#~EndVariableOutput~#\n");
##	mil.line("s.sortHT().print();");
#	ob_a := algebra.sortHT(s);
#	pb_a := io.print(ob_a);
##	mil.line("s.select(1).print();");
#	qb_a := algebra.select(s,1);
#	rb_a := io.print(qb_a);
##	mil.line("s.select(2).print();");
#	sb_a := algebra.select(s,2);
#	tb_a := io.print(sb_a);
##	mil.line("s.select(3).print();");
#	ub_a := algebra.select(s,3);
#	vb_a := io.print(ub_a);
##	mil.line("s.select(4).print();");
#	wb_a := algebra.select(s,4);
#	xb_a := io.print(wb_a);
##	mil.line("s.select(5).print();");
#	yb_a := algebra.select(s,5);
#	ac_a := io.print(yb_a);
##	mil.line("s.reverse().print();");
#	bc_a := bat.reverse(s);
#	cc_a := io.print(bc_a);
##	mil.line("s.reverse().select(1).print();");
#	dc_a := bat.reverse(s);
#	ec_a := algebra.select(dc_a,1);
#	fc_a := io.print(ec_a);
##	mil.line("s.reverse().select(2).print();");
#	gc_a := bat.reverse(s);
#	hc_a := algebra.select(gc_a,2);
#	ic_a := io.print(hc_a);
##	mil.line("s.reverse().select(3).print();");
#	jc_a := bat.reverse(s);
#	kc_a := algebra.select(jc_a,3);
#	lc_a := io.print(kc_a);
##	mil.line("s.reverse().select(4).print();");
#	mc_a := bat.reverse(s);
#	nc_a := algebra.select(mc_a,4);
#	oc_a := io.print(nc_a);
##	mil.line("s.reverse().select(4).sortHT().print();");
#	pc_a := bat.reverse(s);
#	qc_a := algebra.select(pc_a,4);
#	rc_a := algebra.sortHT(qc_a);
#	sc_a := io.print(rc_a);
##	mil.line("s.reverse().select(5).print();");
#	tc_a := bat.reverse(s);
#	uc_a := algebra.select(tc_a,5);
#	vc_a := io.print(uc_a);
##	mil.line("printf(\"#~BeginVariableOutput~#\\n\");");
#	wc_a := io.printf("#~BeginVariableOutput~#\n");
##	mil.line("s.reverse().sort().print();");
#	xc_a := bat.reverse(s);
#	yc_a := algebra.sort(xc_a);
#	ad_a := io.print(yc_a);
##	mil.line("printf(\"#~EndVariableOutput~#\\n\");");
#	bd_a := io.printf("#~EndVariableOutput~#\n");
##	mil.line("s.reverse().sortHT().print();");
#	cd_a := bat.reverse(s);
#	dd_a := algebra.sortHT(cd_a);
#	ed_a := io.print(dd_a);
##	mil.line("s.reverse().select(1).print();");
#	fd_a := bat.reverse(s);
#	gd_a := algebra.select(fd_a,1);
#	hd_a := io.print(gd_a);
##	mil.line("s.reverse().select(2).print();");
#	id_a := bat.reverse(s);
#	jd_a := algebra.select(id_a,2);
#	kd_a := io.print(jd_a);
##	mil.line("s.reverse().select(3).print();");
#	ld_a := bat.reverse(s);
#	md_a := algebra.select(ld_a,3);
#	nd_a := io.print(md_a);
##	mil.line("s.reverse().select(4).print();");
#	od_a := bat.reverse(s);
#	pd_a := algebra.select(od_a,4);
#	qd_a := io.print(pd_a);
##	mil.line("s.reverse().select(4).sortHT().print();");
#	rd_a := bat.reverse(s);
#	sd_a := algebra.select(rd_a,4);
#	td_a := algebra.sortHT(sd_a);
#	ud_a := io.print(td_a);
##	mil.line("s.reverse().select(5).print();");
#	vd_a := bat.reverse(s);
#	wd_a := algebra.select(vd_a,5);
#	xd_a := io.print(wd_a);
##	mil.line("quit();");
#	yd_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  (_2:str)
#Predefined code segment 	# 3  (_3:str)
#The compiler can not guarantee an accurate compilation, 	# 4  (_4:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  (_5:str)
#A few guidelines to maximize usefullness. 	# 6  (_6:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  (_7:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  (_8:str)
#use the "mil_schema" for additional support routines 	# 9  (_9:str)
#	io.print("# >Number:         171\n"); 	# 10  (_10:str)
#	io.print("# >Category:       MIL\n"); 	# 11  (_11:str)
#	io.print("# >Synopsis:       X.reverse().select() fails after X.sort()\n"); 	# 12  (_12:str)
#	io.print("# >Confidential:   no\n"); 	# 13  (_13:str)
#	io.print("# >Severity:       critical\n"); 	# 14  (_14:str)
#	io.print("# >Priority:       high\n"); 	# 15  (_15:str)
#	io.print("# >Responsible:    boncz (Peter Boncz)\n"); 	# 16  (_16:str)
#	io.print("# >State:          open\n"); 	# 17  (_17:str)
#	io.print("# >Class:          sw-bug\n"); 	# 18  (_18:str)
#	io.print("# >Submitter-Id:   unknown\n"); 	# 19  (_19:str)
#	io.print("# >Arrival-Date:   Thu Dec 10 22:54:12 1998\n"); 	# 20  (_20:str)
#	io.print("# >Originator:     manegold@cwi.nl\n"); 	# 21  (_21:str)
#	io.print("# >Organization:\n"); 	# 22  (_22:str)
#	io.print("# CWI\n"); 	# 23  (_23:str)
#	io.print("# >Release:        980101\n"); 	# 24  (_24:str)
#	io.print("# >Environment:\n"); 	# 25  (_25:str)
#	io.print("# IRIX\n"); 	# 26  (_26:str)
#	io.print("# >Description:\n"); 	# 27  (_27:str)
#	io.print("# a select on an bat.reverse()d BAT returns incorrect result\n"); 	# 28  (_28:str)
#	io.print("# when a sort has been done on the same BAT before.\n"); 	# 29  (_29:str)
#	io.print("#\n"); 	# 30  (_30:str)
#	io.print("# sample script:\n"); 	# 31  (_31:str)
#	io.print("# ========\n"); 	# 32  (_32:str)
#	io.print("# s:=new(int,int);\n"); 	# 33  (_33:str)
#	io.print("# bat.insert(s,5,5);\n"); 	# 34  (_34:str)
#	io.print("# bat.insert(s,3,3);\n"); 	# 35  (_35:str)
#	io.print("# bat.insert(s,4,2);\n"); 	# 36  (_36:str)
#	io.print("# bat.insert(s,2,1);\n"); 	# 37  (_37:str)
#	io.print("# bat.insert(s,1,1);\n"); 	# 38  (_38:str)
#	io.print("# bat.insert(s,4,2);\n"); 	# 39  (_36:str)
#	io.print("# bat.insert(s,4,3);\n"); 	# 40  (_39:str)
#	io.print("# s.sort.print();\n"); 	# 41  (_40:str)
#	io.print("# s.reverse().select(2).print();\n"); 	# 42  (_41:str)
#	io.print("# ========\n"); 	# 43  (_32:str)
#	io.print("#\n"); 	# 44  (_30:str)
#	io.print("# incorrect output of the last select:\n"); 	# 45  (_42:str)
#	io.print("# ========\n"); 	# 46  (_32:str)
#	io.print("# s.reverse().select(2).print();\n"); 	# 47  (_41:str)
#	io.print("# #-----------------#\n"); 	# 48  (_43:str)
#	io.print("# # BAT:    tmp_24  #\n"); 	# 49  (_44:str)
#	io.print("# # (int)   (int)   #\n"); 	# 50  (_45:str)
#	io.print("# #-----------------#\n"); 	# 51  (_43:str)
#	io.print("# [ 1,      1       ]\n"); 	# 52  (_46:str)
#	io.print("# [ 1,      2       ]\n"); 	# 53  (_47:str)
#	io.print("# ========\n"); 	# 54  (_32:str)
#	io.print("#\n"); 	# 55  (_30:str)
#	io.print("# correct output of the last select:\n"); 	# 56  (_48:str)
#	io.print("# ========\n"); 	# 57  (_32:str)
#	io.print("# s.reverse().select(2).print();\n"); 	# 58  (_41:str)
#	io.print("# #-----------------#\n"); 	# 59  (_43:str)
#	io.print("# # BAT:    tmp_24  #\n"); 	# 60  (_44:str)
#	io.print("# # (int)   (int)   #\n"); 	# 61  (_45:str)
#	io.print("# #-----------------#\n"); 	# 62  (_43:str)
#	io.print("# [ 1,      2       ]\n"); 	# 63  (_47:str)
#	io.print("# ========\n"); 	# 64  (_32:str)
#	io.print("#\n"); 	# 65  (_30:str)
#	io.print("# for a detailed test script see \n"); 	# 66  (_49:str)
#	io.print("# tests/BugReports/Tests/no.171.*\n"); 	# 67  (_50:str)
#	io.print("# in the Monet source repository.\n"); 	# 68  (_51:str)
#	io.print("#\n"); 	# 69  (_30:str)
#	io.print("#         stefan\n"); 	# 70  (_52:str)
#	io.print("var s:=new(int,int);"); 	# 71  (_53:str)
    s := bat.new(nil:int,nil:int);	# 72 CMDBATnew (s:bat[:int,:int])<-(_55:int)(_55:int)
#	io.print("insert(s,5,5);"); 	# 73  (_56:str)
    aa_a := bat.insert(s,5,5);	# 74 BKCinsert_bun (aa_a:void)<-(s:bat[:int,:int])(_58:int)(_58:int)
#	io.print("insert(s,3,3);"); 	# 75  (_59:str)
    ba_a := bat.insert(s,3,3);	# 76 BKCinsert_bun (ba_a:void)<-(s:bat[:int,:int])(_61:int)(_61:int)
#	io.print("insert(s,4,2);"); 	# 77  (_62:str)
    ca_a := bat.insert(s,4,2);	# 78 BKCinsert_bun (ca_a:void)<-(s:bat[:int,:int])(_64:int)(_65:int)
#	io.print("insert(s,2,1);"); 	# 79  (_66:str)
    da_a := bat.insert(s,2,1);	# 80 BKCinsert_bun (da_a:void)<-(s:bat[:int,:int])(_65:int)(_68:int)
#	io.print("insert(s,1,1);"); 	# 81  (_69:str)
    ea_a := bat.insert(s,1,1);	# 82 BKCinsert_bun (ea_a:void)<-(s:bat[:int,:int])(_68:int)(_68:int)
#	io.print("insert(s,4,2);"); 	# 83  (_62:str)
    fa_a := bat.insert(s,4,2);	# 84 BKCinsert_bun (fa_a:void)<-(s:bat[:int,:int])(_64:int)(_65:int)
#	io.print("insert(s,4,3);"); 	# 85  (_72:str)
    ga_a := bat.insert(s,4,3);	# 86 BKCinsert_bun (ga_a:void)<-(s:bat[:int,:int])(_64:int)(_61:int)
#	io.print("s.print();"); 	# 87  (_74:str)
    ha_a := io.print(s);	# 88 IOprint_val (ha_a:void)<-(s:bat[:int,:int])
#	io.print("s.select(1).print();"); 	# 89  (_76:str)
    ia_a := algebra.select(s,1);	# 90 ALGselect1 (ia_a:bat[:int,:int])<-(s:bat[:int,:int])(_68:int)
    ja_a := io.print(ia_a);	# 91 IOprint_val (ja_a:void)<-(ia_a:bat[:int,:int])
#	io.print("s.select(2).print();"); 	# 92  (_79:str)
    ka_a := algebra.select(s,2);	# 93 ALGselect1 (ka_a:bat[:int,:int])<-(s:bat[:int,:int])(_65:int)
    la_a := io.print(ka_a);	# 94 IOprint_val (la_a:void)<-(ka_a:bat[:int,:int])
#	io.print("s.select(3).print();"); 	# 95  (_82:str)
    ma_a := algebra.select(s,3);	# 96 ALGselect1 (ma_a:bat[:int,:int])<-(s:bat[:int,:int])(_61:int)
    na_a := io.print(ma_a);	# 97 IOprint_val (na_a:void)<-(ma_a:bat[:int,:int])
#	io.print("s.select(4).print();"); 	# 98  (_85:str)
    oa_a := algebra.select(s,4);	# 99 ALGselect1 (oa_a:bat[:int,:int])<-(s:bat[:int,:int])(_64:int)
    pa_a := io.print(oa_a);	# 100 IOprint_val (pa_a:void)<-(oa_a:bat[:int,:int])
#	io.print("s.select(5).print();"); 	# 101  (_88:str)
    qa_a := algebra.select(s,5);	# 102 ALGselect1 (qa_a:bat[:int,:int])<-(s:bat[:int,:int])(_58:int)
    ra_a := io.print(qa_a);	# 103 IOprint_val (ra_a:void)<-(qa_a:bat[:int,:int])
#	io.print("s.reverse().print();"); 	# 104  (_91:str)
    sa_a := bat.reverse(s);	# 105 BKCreverse (sa_a:bat[:int,:int])<-(s:bat[:int,:int])
    ta_a := io.print(sa_a);	# 106 IOprint_val (ta_a:void)<-(sa_a:bat[:int,:int])
#	io.print("s.reverse().select(1).print();"); 	# 107  (_94:str)
    ua_a := bat.reverse(s);	# 108 BKCreverse (ua_a:bat[:int,:int])<-(s:bat[:int,:int])
    va_a := algebra.select(ua_a,1);	# 109 ALGselect1 (va_a:bat[:int,:int])<-(ua_a:bat[:int,:int])(_68:int)
    wa_a := io.print(va_a);	# 110 IOprint_val (wa_a:void)<-(va_a:bat[:int,:int])
#	io.print("s.reverse().select(2).print();"); 	# 111  (_98:str)
    xa_a := bat.reverse(s);	# 112 BKCreverse (xa_a:bat[:int,:int])<-(s:bat[:int,:int])
    ya_a := algebra.select(xa_a,2);	# 113 ALGselect1 (ya_a:bat[:int,:int])<-(xa_a:bat[:int,:int])(_101:int)
    ab_a := io.print(ya_a);	# 114 IOprint_val (ab_a:void)<-(ya_a:bat[:int,:int])
#	io.print("s.reverse().select(3).print();"); 	# 115  (_102:str)
    bb_a := bat.reverse(s);	# 116 BKCreverse (bb_a:bat[:int,:int])<-(s:bat[:int,:int])
    cb_a := algebra.select(bb_a,3);	# 117 ALGselect1 (cb_a:bat[:int,:int])<-(bb_a:bat[:int,:int])(_106:int)
    db_a := io.print(cb_a);	# 118 IOprint_val (db_a:void)<-(cb_a:bat[:int,:int])
#	io.print("s.reverse().select(4).print();"); 	# 119  (_107:str)
    eb_a := bat.reverse(s);	# 120 BKCreverse (eb_a:bat[:int,:int])<-(s:bat[:int,:int])
    fb_a := algebra.select(eb_a,4);	# 121 ALGselect1 (fb_a:bat[:int,:int])<-(eb_a:bat[:int,:int])(_111:int)
    gb_a := io.print(fb_a);	# 122 IOprint_val (gb_a:void)<-(fb_a:bat[:int,:int])
#	io.print("s.reverse().select(5).print();"); 	# 123  (_112:str)
    hb_a := bat.reverse(s);	# 124 BKCreverse (hb_a:bat[:int,:int])<-(s:bat[:int,:int])
    ib_a := algebra.select(hb_a,5);	# 125 ALGselect1 (ib_a:bat[:int,:int])<-(hb_a:bat[:int,:int])(_116:int)
    jb_a := io.print(ib_a);	# 126 IOprint_val (jb_a:void)<-(ib_a:bat[:int,:int])
#	io.print("printf(\"#~BeginVariableOutput~#\\n\");"); 	# 127  (_118:str)
    kb_a := io.printf("#~BeginVariableOutput~#\n");	# 128 IOprint_str (kb_a:void)<-(_120:str)
#	io.print("s.sort().print();"); 	# 129  (_121:str)
    lb_a := algebra.sort(s);	# 130 ALGhsort (lb_a:bat[:int,:int])<-(s:bat[:int,:int])
    mb_a := io.print(lb_a);	# 131 IOprint_val (mb_a:void)<-(lb_a:bat[:int,:int])
#	io.print("printf(\"#~EndVariableOutput~#\\n\");"); 	# 132  (_124:str)
    nb_a := io.printf("#~EndVariableOutput~#\n");	# 133 IOprint_str (nb_a:void)<-(_126:str)
#	io.print("s.sortHT().print();"); 	# 134  (_127:str)
    ob_a := algebra.sortHT(s);	# 135 ALGhtsort (ob_a:bat[:int,:int])<-(s:bat[:int,:int])
    pb_a := io.print(ob_a);	# 136 IOprint_val (pb_a:void)<-(ob_a:bat[:int,:int])
#	io.print("s.select(1).print();"); 	# 137  (_130:str)
    qb_a := algebra.select(s,1);	# 138 ALGselect1 (qb_a:bat[:int,:int])<-(s:bat[:int,:int])(_132:int)
    rb_a := io.print(qb_a);	# 139 IOprint_val (rb_a:void)<-(qb_a:bat[:int,:int])
#	io.print("s.select(2).print();"); 	# 140  (_134:str)
    sb_a := algebra.select(s,2);	# 141 ALGselect1 (sb_a:bat[:int,:int])<-(s:bat[:int,:int])(_136:int)
    tb_a := io.print(sb_a);	# 142 IOprint_val (tb_a:void)<-(sb_a:bat[:int,:int])
#	io.print("s.select(3).print();"); 	# 143  (_138:str)
    ub_a := algebra.select(s,3);	# 144 ALGselect1 (ub_a:bat[:int,:int])<-(s:bat[:int,:int])(_140:int)
    vb_a := io.print(ub_a);	# 145 IOprint_val (vb_a:void)<-(ub_a:bat[:int,:int])
#	io.print("s.select(4).print();"); 	# 146  (_142:str)
    wb_a := algebra.select(s,4);	# 147 ALGselect1 (wb_a:bat[:int,:int])<-(s:bat[:int,:int])(_144:int)
    xb_a := io.print(wb_a);	# 148 IOprint_val (xb_a:void)<-(wb_a:bat[:int,:int])
#	io.print("s.select(5).print();"); 	# 149  (_146:str)
    yb_a := algebra.select(s,5);	# 150 ALGselect1 (yb_a:bat[:int,:int])<-(s:bat[:int,:int])(_116:int)
    ac_a := io.print(yb_a);	# 151 IOprint_val (ac_a:void)<-(yb_a:bat[:int,:int])
#	io.print("s.reverse().print();"); 	# 152  (_146:str)
    bc_a := bat.reverse(s);	# 153 BKCreverse (bc_a:bat[:int,:int])<-(s:bat[:int,:int])
    cc_a := io.print(bc_a);	# 154 IOprint_val (cc_a:void)<-(bc_a:bat[:int,:int])
#	io.print("s.reverse().select(1).print();"); 	# 155  (_149:str)
    dc_a := bat.reverse(s);	# 156 BKCreverse (dc_a:bat[:int,:int])<-(s:bat[:int,:int])
    ec_a := algebra.select(dc_a,1);	# 157 ALGselect1 (ec_a:bat[:int,:int])<-(dc_a:bat[:int,:int])(_132:int)
    fc_a := io.print(ec_a);	# 158 IOprint_val (fc_a:void)<-(ec_a:bat[:int,:int])
#	io.print("s.reverse().select(2).print();"); 	# 159  (_153:str)
    gc_a := bat.reverse(s);	# 160 BKCreverse (gc_a:bat[:int,:int])<-(s:bat[:int,:int])
    hc_a := algebra.select(gc_a,2);	# 161 ALGselect1 (hc_a:bat[:int,:int])<-(gc_a:bat[:int,:int])(_136:int)
    ic_a := io.print(hc_a);	# 162 IOprint_val (ic_a:void)<-(hc_a:bat[:int,:int])
#	io.print("s.reverse().select(3).print();"); 	# 163  (_157:str)
    jc_a := bat.reverse(s);	# 164 BKCreverse (jc_a:bat[:int,:int])<-(s:bat[:int,:int])
    kc_a := algebra.select(jc_a,3);	# 165 ALGselect1 (kc_a:bat[:int,:int])<-(jc_a:bat[:int,:int])(_140:int)
    lc_a := io.print(kc_a);	# 166 IOprint_val (lc_a:void)<-(kc_a:bat[:int,:int])
#	io.print("s.reverse().select(4).print();"); 	# 167  (_162:str)
    mc_a := bat.reverse(s);	# 168 BKCreverse (mc_a:bat[:int,:int])<-(s:bat[:int,:int])
    nc_a := algebra.select(mc_a,4);	# 169 ALGselect1 (nc_a:bat[:int,:int])<-(mc_a:bat[:int,:int])(_144:int)
    oc_a := io.print(nc_a);	# 170 IOprint_val (oc_a:void)<-(nc_a:bat[:int,:int])
#	io.print("s.reverse().select(4).sortHT().print();"); 	# 171  (_167:str)
    pc_a := bat.reverse(s);	# 172 BKCreverse (pc_a:bat[:int,:int])<-(s:bat[:int,:int])
    qc_a := algebra.select(pc_a,4);	# 173 ALGselect1 (qc_a:bat[:int,:int])<-(pc_a:bat[:int,:int])(_144:int)
    rc_a := algebra.sortHT(qc_a);	# 174 ALGhtsort (rc_a:bat[:int,:int])<-(qc_a:bat[:int,:int])
    sc_a := io.print(rc_a);	# 175 IOprint_val (sc_a:void)<-(rc_a:bat[:int,:int])
#	io.print("s.reverse().select(5).print();"); 	# 176  (_172:str)
    tc_a := bat.reverse(s);	# 177 BKCreverse (tc_a:bat[:int,:int])<-(s:bat[:int,:int])
    uc_a := algebra.select(tc_a,5);	# 178 ALGselect1 (uc_a:bat[:int,:int])<-(tc_a:bat[:int,:int])(_176:int)
    vc_a := io.print(uc_a);	# 179 IOprint_val (vc_a:void)<-(uc_a:bat[:int,:int])
#	io.print("printf(\"#~BeginVariableOutput~#\\n\");"); 	# 180  (_178:str)
    wc_a := io.printf("#~BeginVariableOutput~#\n");	# 181 IOprint_str (wc_a:void)<-(_180:str)
#	io.print("s.reverse().sort().print();"); 	# 182  (_181:str)
    xc_a := bat.reverse(s);	# 183 BKCreverse (xc_a:bat[:int,:int])<-(s:bat[:int,:int])
    yc_a := algebra.sort(xc_a);	# 184 ALGhsort (yc_a:bat[:int,:int])<-(xc_a:bat[:int,:int])
    ad_a := io.print(yc_a);	# 185 IOprint_val (ad_a:void)<-(yc_a:bat[:int,:int])
#	io.print("printf(\"#~EndVariableOutput~#\\n\");"); 	# 186  (_185:str)
    bd_a := io.printf("#~EndVariableOutput~#\n");	# 187 IOprint_str (bd_a:void)<-(_187:str)
#	io.print("s.reverse().sortHT().print();"); 	# 188  (_188:str)
    cd_a := bat.reverse(s);	# 189 BKCreverse (cd_a:bat[:int,:int])<-(s:bat[:int,:int])
    dd_a := algebra.sortHT(cd_a);	# 190 ALGhtsort (dd_a:bat[:int,:int])<-(cd_a:bat[:int,:int])
    ed_a := io.print(dd_a);	# 191 IOprint_val (ed_a:void)<-(dd_a:bat[:int,:int])
#	io.print("s.reverse().select(1).print();"); 	# 192  (_191:str)
    fd_a := bat.reverse(s);	# 193 BKCreverse (fd_a:bat[:int,:int])<-(s:bat[:int,:int])
    gd_a := algebra.select(fd_a,1);	# 194 ALGselect1 (gd_a:bat[:int,:int])<-(fd_a:bat[:int,:int])(_195:int)
    hd_a := io.print(gd_a);	# 195 IOprint_val (hd_a:void)<-(gd_a:bat[:int,:int])
#	io.print("s.reverse().select(2).print();"); 	# 196  (_196:str)
    id_a := bat.reverse(s);	# 197 BKCreverse (id_a:bat[:int,:int])<-(s:bat[:int,:int])
    jd_a := algebra.select(id_a,2);	# 198 ALGselect1 (jd_a:bat[:int,:int])<-(id_a:bat[:int,:int])(_200:int)
    kd_a := io.print(jd_a);	# 199 IOprint_val (kd_a:void)<-(jd_a:bat[:int,:int])
#	io.print("s.reverse().select(3).print();"); 	# 200  (_201:str)
    ld_a := bat.reverse(s);	# 201 BKCreverse (ld_a:bat[:int,:int])<-(s:bat[:int,:int])
    md_a := algebra.select(ld_a,3);	# 202 ALGselect1 (md_a:bat[:int,:int])<-(ld_a:bat[:int,:int])(_205:int)
    nd_a := io.print(md_a);	# 203 IOprint_val (nd_a:void)<-(md_a:bat[:int,:int])
#	io.print("s.reverse().select(4).print();"); 	# 204  (_206:str)
    od_a := bat.reverse(s);	# 205 BKCreverse (od_a:bat[:int,:int])<-(s:bat[:int,:int])
    pd_a := algebra.select(od_a,4);	# 206 ALGselect1 (pd_a:bat[:int,:int])<-(od_a:bat[:int,:int])(_210:int)
    qd_a := io.print(pd_a);	# 207 IOprint_val (qd_a:void)<-(pd_a:bat[:int,:int])
#	io.print("s.reverse().select(4).sortHT().print();"); 	# 208  (_211:str)
    rd_a := bat.reverse(s);	# 209 BKCreverse (rd_a:bat[:int,:int])<-(s:bat[:int,:int])
    sd_a := algebra.select(rd_a,4);	# 210 ALGselect1 (sd_a:bat[:int,:int])<-(rd_a:bat[:int,:int])(_210:int)
    td_a := algebra.sortHT(sd_a);	# 211 ALGhtsort (td_a:bat[:int,:int])<-(sd_a:bat[:int,:int])
    ud_a := io.print(td_a);	# 212 IOprint_val (ud_a:void)<-(td_a:bat[:int,:int])
#	io.print("s.reverse().select(5).print();"); 	# 213  (_216:str)
    vd_a := bat.reverse(s);	# 214 BKCreverse (vd_a:bat[:int,:int])<-(s:bat[:int,:int])
    wd_a := algebra.select(vd_a,5);	# 215 ALGselect1 (wd_a:bat[:int,:int])<-(vd_a:bat[:int,:int])(_220:int)
    xd_a := io.print(wd_a);	# 216 IOprint_val (xd_a:void)<-(wd_a:bat[:int,:int])
#	io.print("quit();"); 	# 217  (_221:str)
    yd_a := clients.quit();	# 218 CLTquit (yd_a:void)
end main;	# 219  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 5,	  5	  ]
[ 3,	  3	  ]
[ 4,	  2	  ]
[ 2,	  1	  ]
[ 1,	  1	  ]
[ 4,	  2	  ]
[ 4,	  3	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  1	  ]
[ 1,	  1	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 4,	  2	  ]
[ 4,	  2	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  3	  ]
[ 4,	  3	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 5,	  5	  ]
#-----------------#
# t	h	  # name
# int	int	  # type
#-----------------#
[ 5,	  5	  ]
[ 3,	  3	  ]
[ 2,	  4	  ]
[ 1,	  2	  ]
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  3	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 5,	  5	  ]
#~BeginVariableOutput~#
#-----------------#
# t	h	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 4,	  3	  ]
[ 4,	  2	  ]
[ 4,	  2	  ]
[ 5,	  5	  ]
#~EndVariableOutput~#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  1	  ]
[ 3,	  3	  ]
[ 4,	  2	  ]
[ 4,	  2	  ]
[ 4,	  3	  ]
[ 5,	  5	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  1	  ]
[ 1,	  1	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 4,	  2	  ]
[ 4,	  2	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  3	  ]
[ 4,	  3	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 5,	  5	  ]
#-----------------#
# t	h	  # name
# int	int	  # type
#-----------------#
[ 5,	  5	  ]
[ 3,	  3	  ]
[ 2,	  4	  ]
[ 1,	  2	  ]
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  3	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 5,	  5	  ]
#~BeginVariableOutput~#
#-----------------#
# t	h	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  3	  ]
[ 3,	  4	  ]
[ 5,	  5	  ]
#~EndVariableOutput~#
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  3	  ]
[ 3,	  4	  ]
[ 5,	  5	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  3	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 2,	  4	  ]
[ 2,	  4	  ]
[ 3,	  4	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 5,	  5	  ]

# 07:39:41 >  
# 07:39:41 >  Done.
# 07:39:41 >  

