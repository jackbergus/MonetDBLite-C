# Monet Mil to Mal compiler
#include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	mil.line("# >Number:         125\n");
#	mil.line("# >Category:       Module_math\n");
#	mil.line("# >Synopsis:       (almost) all functions of mmath return strange results on IRIX.\n");
#	mil.line("# >Confidential:   no\n");
#	mil.line("# >Severity:       serious\n");
#	mil.line("# >Priority:       medium\n");
#	mil.line("# >Responsible:    niels\n");
#	mil.line("# >State:          open\n");
#	mil.line("# >Class:          sw-bug\n");
#	mil.line("# >Submitter-Id:   unknown\n");
#	mil.line("# >Arrival-Date:   Fri Feb 27 16:36:42 1998\n");
#	mil.line("# >Originator:     manegold\n");
#	mil.line("# >Organization:\n");
#	mil.line("# >Release:        \n");
#	mil.line("# >Environment:\n");
#	mil.line("# IRIX\n");
#	mil.line("# >Description:\n");
#	mil.line("# (almost) all functions of mmath return strange results on IRIX.             \n");
#	mil.line("# \n");
#	mil.line("# test script and output for both GNU=ON & GNU=OFF follow.\n");
#	mil.line("# \n");
#	mil.line("#         stefan\n");
#	mil.line("# \n");
#	mil.line("# ================================================================================\n");
#	mil.line("# test script (also available as 'testing/plain/mmath2/script.mil')\n");
#	mil.line("# --------------------------------------------------------------------------------\n");
#	mil.line("# setoid(oid(20000000));\n");
#	mil.line("# module(mmath);\n");
#	mil.line("# sin(dbl(0)).print();\n");
#	mil.line("# sin(M_PI_4).print();\n");
#	mil.line("# sin(M_PI_2).print();\n");
#	mil.line("# sin(M_PI).print();\n");
#	mil.line("# sin(3*M_PI_2).print();\n");
#	mil.line("# cos(dbl(0)).print();\n");
#	mil.line("# cos(M_PI_4).print();\n");
#	mil.line("# cos(M_PI_2).print();\n");
#	mil.line("# cos(M_PI).print();\n");
#	mil.line("# cos(3*M_PI_2).print();\n");
#	mil.line("# tan(dbl(0)).print();\n");
#	mil.line("# tan(M_PI_4).print();\n");
#	mil.line("# tan(M_PI_2).print();\n");
#	mil.line("# tan(M_PI).print();\n");
#	mil.line("# tan(3*M_PI_2).print();\n");
#	mil.line("# asin(dbl(-1)).print();\n");
#	mil.line("# asin(dbl(-0.5)).print();\n");
#	mil.line("# asin(dbl(0)).print();\n");
#	mil.line("# asin(dbl(0.5)).print();\n");
#	mil.line("# asin(dbl(1)).print();\n");
#	mil.line("# acos(dbl(-1)).print();\n");
#	mil.line("# acos(dbl(-0.5)).print();\n");
#	mil.line("# acos(dbl(0)).print();\n");
#	mil.line("# acos(dbl(0.5)).print();\n");
#	mil.line("# acos(dbl(1)).print();\n");
#	mil.line("# atan(dbl(-1)).print();\n");
#	mil.line("# atan(dbl(-0.5)).print();\n");
#	mil.line("# atan(dbl(0)).print();\n");
#	mil.line("# atan(dbl(0.5)).print();\n");
#	mil.line("# atan(dbl(1)).print();\n");
#	mil.line("# \n");
#	mil.line("# asin(sin(M_PI)).print();\n");
#	mil.line("# acos(cos(M_PI)).print();\n");
#	mil.line("# atan(tan(M_PI_2)).print();\n");
#	mil.line("# atan(tan(M_PI_4)).print();\n");
#	mil.line("# sqrt(pow(dbl(2),dbl(2))).print();\n");
#	mil.line("# \n");
#	mil.line("# exp(dbl(10)).print(); \n");
#	mil.line("# log(dbl(10)).print();\n");
#	mil.line("# log10(dbl(10)).print();\n");
#	mil.line("# \n");
#	mil.line("# ceil(dbl(1.2)).print();\n");
#	mil.line("# fabs(dbl(1.2)).print();\n");
#	mil.line("# floor(dbl(1.2)).print();\n");
#	mil.line("# fmod(dbl(15.2),dbl(2.5)).print();\n");
#	mil.line("# --------------------------------------------------------------------------------\n");
#	mil.line("# ================================================================================\n");
#	mil.line("# differences between SunOS5.5 and IRIX6.2                  compiled with GNU=ON\n");
#	mil.line("# --------------------------------------------------------------------------------\n");
#	mil.line("# --- .SunOS5.5/plain/mmath2/111.out      Fri Feb 27 16:00:24 1998\n");
#	mil.line("# +++ .IRIX6.2/plain/mmath2/111.out       Fri Feb 27 16:00:01 1998\n");
#	mil.line("# @@ -1,3 +1,3 @@\n");
#	mil.line("#  Statistics about the output of plain/mmath2:\n");
#	mil.line("# -  143 lines,  385 words,  3505 chars\n");
#	mil.line("# +  143 lines,  385 words,  3751 chars\n");
#	mil.line("# \n");
#	mil.line("# @@ -8,3 +8,3 @@\n");
#	mil.line("#  Mcreatedb -db plain\n");
#	mil.line("# -Mcreatedb: processing database 'plain' in /ufs/manegold/programming/Monet/testing/.SunOS5.5/dbfarm/plain.\n");
#	mil.line("# +Mcreatedb: processing database 'plain' in /ufs/manegold/programming/Monet/testing/.IRIX6.2/dbfarm/plain.\n");
#	mil.line("#  Mcreatedb: calling 'Mserver -db plain' for the first time..\n");
#	mil.line("# @@ -68,3 +68,3 @@\n");
#	mil.line("#  sin(M_PI).print();\n");
#	mil.line("# -[ -0.000000 ]\n");
#	mil.line("# +[ 0.000000 ]\n");
#	mil.line("#  sin(3*M_PI_2).print();\n");
#	mil.line("# @@ -76,3 +76,3 @@\n");
#	mil.line("#  cos(M_PI_2).print();\n");
#	mil.line("# -[ -0.000000 ]\n");
#	mil.line("# +[ 0.000000 ]\n");
#	mil.line("#  cos(M_PI).print();\n");
#	mil.line("# @@ -82,62 +82,62 @@\n");
#	mil.line("#  tan(dbl(0)).print();\n");
#	mil.line("# -[ 0.000000 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("#  tan(M_PI_4).print();\n");
#	mil.line("# -[ 1.000000 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("#  tan(M_PI_2).print();\n");
#	mil.line("# -[ -22877332.428856 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("#  tan(M_PI).print();\n");
#	mil.line("# -[ 0.000000 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("#  tan(3*M_PI_2).print();\n");
#	mil.line("# -[ -7625777.476285 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("#  asin(dbl(-1)).print();\n");
#	mil.line("# -[ -1.570796 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("#  asin(dbl(-0.5)).print();\n");
#	mil.line("# -[ -0.523599 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("#  asin(dbl(0)).print();\n");
#	mil.line("# -[ 0.000000 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("#  asin(dbl(0.5)).print();\n");
#	mil.line("# -[ 0.523599 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("#  asin(dbl(1)).print();\n");
#	mil.line("# -[ 1.570796 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("#  acos(dbl(-1)).print();\n");
#	mil.line("# -[ 3.141593 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("#  acos(dbl(-0.5)).print();\n");
#	mil.line("# -[ 2.094395 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("#  acos(dbl(0)).print();\n");
#	mil.line("# -[ 1.570796 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("#  acos(dbl(0.5)).print();\n");
#	mil.line("# -[ 1.047198 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("#  acos(dbl(1)).print();\n");
#	mil.line("# -[ 0.000000 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("#  atan(tan(M_PI_2)).print();\n");
#	mil.line("# -[ -1.570796 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("#  atan(tan(M_PI_4)).print();\n");
#	mil.line("# -[ 0.785398 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("#  sqrt(pow(dbl(2),dbl(2))).print();\n");
#	mil.line("# -[ 2.000000 ]\n");
#	mil.line("# +[ 45610.384256 ]\n");
#	mil.line("# \n");
#	mil.line("#  exp(dbl(10)).print();\n");
#	mil.line("# -[ 22026.465795 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("#  log(dbl(10)).print();\n");
#	mil.line("# -[ 2.302585 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("#  log10(dbl(10)).print();\n");
#	mil.line("# -[ 1.000000 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("# \n");
#	mil.line("#  ceil(dbl(1.2)).print();\n");
#	mil.line("# -[ 2.000000 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("#  fabs(dbl(1.2)).print();\n");
#	mil.line("# @@ -145,4 +145,4 @@\n");
#	mil.line("#  floor(dbl(1.2)).print();\n");
#	mil.line("# -[ 1.000000 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("#  fmod(dbl(15.2),dbl(2.5)).print();\n");
#	mil.line("# -[ 0.200000 ]\n");
#	mil.line("# +[ 2080315712.000000 ]\n");
#	mil.line("# --------------------------------------------------------------------------------\n");
#	mil.line("# ================================================================================\n");
#	mil.line("# differences between SunOS5.5 and IRIX6.2                  compiled with GNU=OFF\n");
#	mil.line("# --------------------------------------------------------------------------------\n");
#	mil.line("# --- plain/mmath2/stable.out     Fri Feb 27 16:11:45 1998\n");
#	mil.line("# +++ .IRIX6.2/plain/mmath2/1998.02.27,16:51:37.out       Fri Feb 27 17:23:28 1998\n");
#	mil.line("# @@ -1,3 +1,3 @@\n");
#	mil.line("#  Statistics about the output of plain/mmath2:\n");
#	mil.line("# -  143 lines,  385 words,  3505 chars\n");
#	mil.line("# +  138 lines,  360 words,  3229 chars\n");
#	mil.line("#  \n");
#	mil.line("# @@ -7,7 +7,2 @@\n");
#	mil.line("#  \n");
#	mil.line("# -Mcreatedb -db plain\n");
#	mil.line("# -Mcreatedb: processing database 'plain' in /ufs/manegold/programming/Monet/testing/.SunOS5.5/dbfarm/plain.\n");
#	mil.line("# -Mcreatedb: calling 'Mserver -db plain' for the first time..\n");
#	mil.line("# -Mcreatedb: database 'plain' has been initialized succesfully!\n");
#	mil.line("# -\n");
#	mil.line("#  Mserver -db plain  script.mil\n");
#	mil.line("# @@ -68,3 +63,3 @@\n");
#	mil.line("#  sin(M_PI).print();\n");
#	mil.line("# -[ -0.000000 ]\n");
#	mil.line("# +[ 0.000000 ]\n");
#	mil.line("#  sin(3*M_PI_2).print();\n");
#	mil.line("# @@ -76,3 +71,3 @@\n");
#	mil.line("#  cos(M_PI_2).print();\n");
#	mil.line("# -[ -0.000000 ]\n");
#	mil.line("# +[ 0.000000 ]\n");
#	mil.line("#  cos(M_PI).print();\n");
#	mil.line("# @@ -82,3 +77,3 @@\n");
#	mil.line("#  tan(dbl(0)).print();\n");
#	mil.line("# -[ 0.000000 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  tan(M_PI_4).print();\n");
#	mil.line("# @@ -86,53 +81,53 @@\n");
#	mil.line("#  tan(M_PI_2).print();\n");
#	mil.line("# -[ -22877332.428856 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  tan(M_PI).print();\n");
#	mil.line("# -[ 0.000000 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  tan(3*M_PI_2).print();\n");
#	mil.line("# -[ -7625777.476285 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  asin(dbl(-1)).print();\n");
#	mil.line("# -[ -1.570796 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  asin(dbl(-0.5)).print();\n");
#	mil.line("# -[ -0.523599 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  asin(dbl(0)).print();\n");
#	mil.line("# -[ 0.000000 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  asin(dbl(0.5)).print();\n");
#	mil.line("# -[ 0.523599 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  asin(dbl(1)).print();\n");
#	mil.line("# -[ 1.570796 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  acos(dbl(-1)).print();\n");
#	mil.line("# -[ 3.141593 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  acos(dbl(-0.5)).print();\n");
#	mil.line("# -[ 2.094395 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  acos(dbl(0)).print();\n");
#	mil.line("# -[ 1.570796 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  acos(dbl(0.5)).print();\n");
#	mil.line("# -[ 1.047198 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  acos(dbl(1)).print();\n");
#	mil.line("# -[ 0.000000 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  atan(dbl(-1)).print();\n");
#	mil.line("# -[ -0.785398 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  atan(dbl(-0.5)).print();\n");
#	mil.line("# -[ -0.463648 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  atan(dbl(0)).print();\n");
#	mil.line("# -[ 0.000000 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  atan(dbl(0.5)).print();\n");
#	mil.line("# -[ 0.463648 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  atan(dbl(1)).print();\n");
#	mil.line("# -[ 0.785398 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  \n");
#	mil.line("#  asin(sin(M_PI)).print();\n");
#	mil.line("# -[ -0.000000 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  acos(cos(M_PI)).print();\n");
#	mil.line("# -[ 3.141593 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  atan(tan(M_PI_2)).print();\n");
#	mil.line("# -[ -1.570796 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  atan(tan(M_PI_4)).print();\n");
#	mil.line("# -[ 0.785398 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  sqrt(pow(dbl(2),dbl(2))).print();\n");
#	mil.line("# -[ 2.000000 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  \n");
#	mil.line("#  exp(dbl(10)).print();\n");
#	mil.line("# -[ 22026.465795 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  log(dbl(10)).print();\n");
#	mil.line("# -[ 2.302585 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  log10(dbl(10)).print();\n");
#	mil.line("# @@ -141,3 +136,3 @@\n");
#	mil.line("#  ceil(dbl(1.2)).print();\n");
#	mil.line("# -[ 2.000000 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("#  fabs(dbl(1.2)).print();\n");
#	mil.line("# @@ -147,2 +142,2 @@\n");
#	mil.line("#  fmod(dbl(15.2),dbl(2.5)).print();\n");
#	mil.line("# -[ 0.200000 ]\n");
#	mil.line("# +[ 1.000000 ]\n");
#	mil.line("# ================================================================================>How-To-Repeat:\n");
#	mil.line("setoid(oid(20000000));");
	aa_a := calc.oid(20000000);
	ba_a := setoid(aa_a);
#	mil.line("sin(dbl(0)).print();");
	ca_a := dbl(0);
	da_a := sin(ca_a);
	ea_a := bat.print(da_a);
#	mil.line("sin(M_PI_4).print();");
	M_PI_4:dbl:= mil.take("M_PI_4");
	fa_a := sin(M_PI_4);
	ga_a := bat.print(fa_a);
#	mil.line("sin(M_PI_2).print();");
	M_PI_2:dbl:= mil.take("M_PI_2");
	ha_a := sin(M_PI_2);
	ia_a := bat.print(ha_a);
#	mil.line("sin(M_PI).print();");
	M_PI:dbl:= mil.take("M_PI");
	ja_a := sin(M_PI);
	ka_a := bat.print(ja_a);
#	mil.line("sin(3*M_PI_2).print();");
	la_a := *(3,M_PI_2);
	ma_a := sin(la_a);
	na_a := bat.print(ma_a);
#	mil.line("cos(dbl(0)).print();");
	oa_a := dbl(0);
	pa_a := cos(oa_a);
	qa_a := bat.print(pa_a);
#	mil.line("cos(M_PI_4).print();");
	ra_a := cos(M_PI_4);
	sa_a := bat.print(ra_a);
#	mil.line("cos(M_PI_2).print();");
	ta_a := cos(M_PI_2);
	ua_a := bat.print(ta_a);
#	mil.line("cos(M_PI).print();");
	va_a := cos(M_PI);
	wa_a := bat.print(va_a);
#	mil.line("cos(3*M_PI_2).print();");
	xa_a := *(3,M_PI_2);
	ya_a := cos(xa_a);
	ab_a := bat.print(ya_a);
#	mil.line("tan(dbl(0)).print();");
	bb_a := dbl(0);
	cb_a := tan(bb_a);
	db_a := bat.print(cb_a);
#	mil.line("tan(M_PI_4).print();");
	eb_a := tan(M_PI_4);
	fb_a := bat.print(eb_a);
#	mil.line("tan(M_PI_2).print();");
	gb_a := tan(M_PI_2);
	hb_a := bat.print(gb_a);
#	mil.line("tan(M_PI).print();");
	ib_a := tan(M_PI);
	jb_a := bat.print(ib_a);
#	mil.line("tan(3*M_PI_2).print();");
	kb_a := *(3,M_PI_2);
	lb_a := tan(kb_a);
	mb_a := bat.print(lb_a);
#	mil.line("asin(dbl(-1)).print();");
	nb_a := dbl(-1);
	ob_a := asin(nb_a);
	pb_a := bat.print(ob_a);
#	mil.line("asin(dbl(-0.5)).print();");
	qb_a := dbl(-0.5);
	rb_a := asin(qb_a);
	sb_a := bat.print(rb_a);
#	mil.line("asin(dbl(0)).print();");
	tb_a := dbl(0);
	ub_a := asin(tb_a);
	vb_a := bat.print(ub_a);
#	mil.line("asin(dbl(0.5)).print();");
	wb_a := dbl(0.5);
	xb_a := asin(wb_a);
	yb_a := bat.print(xb_a);
#	mil.line("asin(dbl(1)).print();");
	ac_a := dbl(1);
	bc_a := asin(ac_a);
	cc_a := bat.print(bc_a);
#	mil.line("acos(dbl(-1)).print();");
	dc_a := dbl(-1);
	ec_a := acos(dc_a);
	fc_a := bat.print(ec_a);
#	mil.line("acos(dbl(-0.5)).print();");
	gc_a := dbl(-0.5);
	hc_a := acos(gc_a);
	ic_a := bat.print(hc_a);
#	mil.line("acos(dbl(0)).print();");
	jc_a := dbl(0);
	kc_a := acos(jc_a);
	lc_a := bat.print(kc_a);
#	mil.line("acos(dbl(0.5)).print();");
	mc_a := dbl(0.5);
	nc_a := acos(mc_a);
	oc_a := bat.print(nc_a);
#	mil.line("acos(dbl(1)).print();");
	pc_a := dbl(1);
	qc_a := acos(pc_a);
	rc_a := bat.print(qc_a);
#	mil.line("atan(dbl(-1)).print();");
	sc_a := dbl(-1);
	tc_a := atan(sc_a);
	uc_a := bat.print(tc_a);
#	mil.line("atan(dbl(-0.5)).print();");
	vc_a := dbl(-0.5);
	wc_a := atan(vc_a);
	xc_a := bat.print(wc_a);
#	mil.line("atan(dbl(0)).print();");
	yc_a := dbl(0);
	ad_a := atan(yc_a);
	bd_a := bat.print(ad_a);
#	mil.line("atan(dbl(0.5)).print();");
	cd_a := dbl(0.5);
	dd_a := atan(cd_a);
	ed_a := bat.print(dd_a);
#	mil.line("atan(dbl(1)).print();");
	fd_a := dbl(1);
	gd_a := atan(fd_a);
	hd_a := bat.print(gd_a);
#	mil.line("asin(sin(M_PI)).print();");
	id_a := sin(M_PI);
	jd_a := asin(id_a);
	kd_a := bat.print(jd_a);
#	mil.line("acos(cos(M_PI)).print();");
	ld_a := cos(M_PI);
	md_a := acos(ld_a);
	nd_a := bat.print(md_a);
#	mil.line("atan(tan(M_PI_2)).print();");
	od_a := tan(M_PI_2);
	pd_a := atan(od_a);
	qd_a := bat.print(pd_a);
#	mil.line("atan(tan(M_PI_4)).print();");
	rd_a := tan(M_PI_4);
	sd_a := atan(rd_a);
	td_a := bat.print(sd_a);
#	mil.line("sqrt(pow(dbl(2),dbl(2))).print();");
	ud_a := dbl(2);
	vd_a := dbl(2);
	wd_a := pow(ud_a,vd_a);
	xd_a := sqrt(wd_a);
	yd_a := bat.print(xd_a);
#	mil.line("exp(dbl(10)).print();");
	ae_a := dbl(10);
	be_a := exp(ae_a);
	ce_a := bat.print(be_a);
#	mil.line("log(dbl(10)).print();");
	de_a := dbl(10);
	ee_a := log(de_a);
	fe_a := bat.print(ee_a);
#	mil.line("log10(dbl(10)).print();");
	ge_a := dbl(10);
	he_a := log10(ge_a);
	ie_a := bat.print(he_a);
#	mil.line("ceil(dbl(1.2)).print();");
	je_a := dbl(1.2);
	ke_a := ceil(je_a);
	le_a := bat.print(ke_a);
#	mil.line("fabs(dbl(1.2)).print();");
	me_a := dbl(1.2);
	ne_a := fabs(me_a);
	oe_a := bat.print(ne_a);
#	mil.line("floor(dbl(1.2)).print();");
	pe_a := dbl(1.2);
	qe_a := floor(pe_a);
	re_a := bat.print(qe_a);
#	mil.line("fmod(dbl(15.2),dbl(2.5)).print();");
	se_a := dbl(15.2);
	te_a := dbl(2.5);
	ue_a := fmod(se_a,te_a);
	ve_a := bat.print(ue_a);
#	mil.line("quit();");
	we_a := clients.quit();
