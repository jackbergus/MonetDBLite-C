# Monet Mil to Mal compiler
include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
	mil.line("# >Number:         151\n");
	mil.line("# >Category:       MIL\n");
	mil.line("# >Synopsis:       type check problem when bat.inserting bats\n");
	mil.line("# >Confidential:   no\n");
	mil.line("# >Severity:       critical\n");
	mil.line("# >Priority:       high\n");
	mil.line("# >Responsible:    boncz (Peter Boncz)\n");
	mil.line("# >State:          open\n");
	mil.line("# >Class:          sw-bug\n");
	mil.line("# >Submitter-Id:   unknown\n");
	mil.line("# >Arrival-Date:   Wed Apr 15 13:00:01 1998\n");
	mil.line("# >Originator:     niels@cwi.nl\n");
	mil.line("# >Organization:\n");
	mil.line("# DDi\n");
	mil.line("# >Release:        980101\n");
	mil.line("# >Environment:\n");
	mil.line("# IRIX 5.3\n");
	mil.line("# >Description:\n");
	mil.line("# Following script gives an error\n");
	mil.line("# a:= bbp.new(int,bat);\n");
	mil.line("# b:= bbp.new(int,bat);\n");
	mil.line("# a.insert(1,b);\n");
	mil.line("# !ERROR: interpret: no matching MIL operator to 'insert(bat[int,bat], int, bat[int,bat])'.\n");
	mil.line("# !MAYBE YOU MEAN:\n");
	mil.line("# !       bat.insert(BAT[any::1,any::2], BAT[any::1,any::2]) : BAT[any::1,any::2]\n");
	mil.line("setoid(oid(20000000));");
	aa_a := calc.oid(20000000);
	ba_a := setoid(aa_a);
	mil.line("var a:= bbp.new(int,bat);");
	a := bbp.new(nil:int,:bat[:any_1,:any_2]);
	mil.line("var b:= bbp.new(int,bat);");
	b := bbp.new(nil:int,:bat[:any_1,:any_2]);
	mil.line("a.insert(1,b);");
	ca_a := bat.insert(a,1,b);
	mil.line("quit();");
	da_a := clients.quit();
