# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	io.print("# >Number:         151\n");
#	io.print("# >Category:       MIL\n");
#	io.print("# >Synopsis:       type check problem when bat.inserting bats\n");
#	io.print("# >Confidential:   no\n");
#	io.print("# >Severity:       critical\n");
#	io.print("# >Priority:       high\n");
#	io.print("# >Responsible:    boncz (Peter Boncz)\n");
#	io.print("# >State:          open\n");
#	io.print("# >Class:          sw-bug\n");
#	io.print("# >Submitter-Id:   unknown\n");
#	io.print("# >Arrival-Date:   Wed Apr 15 13:00:01 1998\n");
#	io.print("# >Originator:     niels@cwi.nl\n");
#	io.print("# >Organization:\n");
#	io.print("# DDi\n");
#	io.print("# >Release:        980101\n");
#	io.print("# >Environment:\n");
#	io.print("# IRIX 5.3\n");
#	io.print("# >Description:\n");
#	io.print("# Following script gives an error\n");
#	io.print("# a:= bbp.new(int,bat);\n");
#	io.print("# b:= bbp.new(int,bat);\n");
#	io.print("# a.insert(1,b);\n");
#	io.print("# !ERROR: interpret: no matching MIL operator to 'insert(bat[int,bat], int, bat[int,bat])'.\n");
#	io.print("# !MAYBE YOU MEAN:\n");
#	io.print("# !       bat.insert(BAT[any::1,any::2], BAT[any::1,any::2]) : BAT[any::1,any::2]\n");
#	io.print("setoid(oid(20000000));");
	aa_a := calc.oid(20000000);
	ba_a := setoid(aa_a);
#	io.print("var a:= bbp.new(int,bat);");
	a := bbp.new(nil:int,:bat[:any_1,:any_2]);
#	io.print("var b:= bbp.new(int,bat);");
	b := bbp.new(nil:int,:bat[:any_1,:any_2]);
#	io.print("a.insert(1,b);");
	ca_a := bat.insert(a,1,b);
#	io.print("quit();");
	da_a := clients.quit();
