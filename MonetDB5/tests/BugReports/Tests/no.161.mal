# Monet Mil to Mal compiler
#include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	mil.line("# >Number:         161\n");
#	mil.line("# >Category:       Mserver\n");
#	mil.line("# >Synopsis:       tostr problem when str module is loaded\n");
#	mil.line("# >Confidential:   no\n");
#	mil.line("# >Severity:       critical\n");
#	mil.line("# >Priority:       high\n");
#	mil.line("# >Responsible:    boncz (Peter Boncz)\n");
#	mil.line("# >State:          open\n");
#	mil.line("# >Class:          sw-bug\n");
#	mil.line("# >Submitter-Id:   unknown\n");
#	mil.line("# >Arrival-Date:   Wed Jul 15 15:24:01 1998\n");
#	mil.line("# >Originator:     windhouw@cwi.nl\n");
#	mil.line("# >Organization:\n");
#	mil.line("# CWI\n");
#	mil.line("# >Release:        980101\n");
#	mil.line("# >Environment:\n");
#	mil.line("# \n");
#	mil.line("# >Description:\n");
#	mil.line("# In the following script the string becomes different\n");
#	mil.line("# in the inner procedure (when the str module is loaded):\n");
#	mil.line("# \n");
#	mil.line("# Script\n");
#	mil.line("# 8<-----\n");
#	mil.line("# PROC test_inner(any in) : void {\n");
#	mil.line("#    printf(\"test_inner.in: %s\\n\",str(in));\n");
#	mil.line("# }\n");
#	mil.line("#  \n");
#	mil.line("# PROC test_outer(any in) : void {\n");
#	mil.line("#    printf(\"test_outer.in: %s\\n\",str(in));\n");
#	mil.line("#    test_inner(in);\n");
#	mil.line("# }\n");
#	mil.line("# 8<-----\n");
#	mil.line("# Output\n");
#	mil.line("# 8<-----\n");
#	mil.line("# >test_outer(\"chr\");\n");
#	mil.line("# test_outer.in: chr\n");
#	mil.line("# test_inner.in: chr\n");
#	mil.line("# >module(str);\n");
#	mil.line("# >test_outer(\"chr\");\n");
#	mil.line("# test_outer.in: chr\n");
#	mil.line("# test_inner.in: test_inner.in: %s\n");
#	mil.line("# 8<----\n");
#	mil.line("setoid(oid(20000000));");
	aa_a := calc.oid(20000000);
	ba_a := calc.setoid(aa_a);
#	mil.line("PROC test_inner(any in) : void {");
function test_inner(in:str):void;
#	mil.line("   printf(\"test_inner.in: %s\\n\",str(in));");
	ca_a := calc.str(in);
	da_a := io.printf("test_inner.in: %s\n",ca_a);
end test_inner;
#	mil.line("PROC test_outer(any in) : void {");
function test_outer(in:any_1):void;
#	mil.line("   printf(\"test_outer.in: %s\\n\",str(in));");
	ea_a := calc.str(in);
	fa_a := io.printf("test_outer.in: %s\n",ea_a);
#	mil.line("   test_inner(in);");
	ga_a := user.test_inner(in);
end test_outer;
#	mil.line("test_outer(\"chr\");");
	ha_a := user.test_outer("chr");
#	mil.line("test_outer(\"chr\");");
	ia_a := user.test_outer("chr");
#	mil.line("quit();");
	ja_a := clients.quit();
