# Monet Mil to Mal compiler
#include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	mil.line("setoid(oid(2000000));");
	aa_a := calc.oid(2000000);
	ba_a := setoid(aa_a);
#	mil.line("var k100_unique1:=bat(\"k100_unique1\");");
	k100_unique1 := bbp.new("k100_unique1");
#	mil.line("#test correct decisions in the join operation.\n");
	t := algebra.select(k100_unique1,10,10);
#	mil.line("t.count().print(); k100_unique1.count().print();");
	ca_a := aggr.count(t);
	da_a := bat.print(ca_a);
	ea_a := aggr.count(k100_unique1);
	fa_a := bat.print(ea_a);
#	mil.line("var u:= t.copy();");
	u := copy(t);
#	mil.line("#cpu.print();\n");
#	mil.line("var z:= t.reverse().join(k100_unique1);");
	ga_a := bat.reverse(t);
	z := algebra.join(ga_a,k100_unique1);
#	mil.line("z.print();");
	ha_a := bat.print(z);
#	mil.line("#cpu.print();\n");
	ia_a := bat.reverse(k100_unique1);
	z := algebra.join(ia_a,u);
#	mil.line("#cpu.print();\n");
	ja_a := bat.print(z);
#	mil.line("quit();");
	ka_a := clients.quit();
