stdout of test 'no.165` in directory 'tests/BugReports` itself:


# 07:27:16 >  
# 07:27:16 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.165.mal < /dev/null
# 07:27:16 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# \n");
##	mil.line("# >Number:         165\n");
##	mil.line("# >Category:       Module_libgdk\n");
##	mil.line("# >Synopsis:       mark(BAT) fails\n");
##	mil.line("# >Confidential:   no\n");
##	mil.line("# >Severity:       serious\n");
##	mil.line("# >Priority:       medium\n");
##	mil.line("# >Responsible:    boncz (Peter Boncz)\n");
##	mil.line("# >State:          open\n");
##	mil.line("# >Class:          sw-bug\n");
##	mil.line("# >Submitter-Id:   unknown\n");
##	mil.line("# >Arrival-Date:   Wed Aug 12 15:18:26 1998\n");
##	mil.line("# >Originator:     manegold@cwi.nl\n");
##	mil.line("# >Organization:\n");
##	mil.line("# CWI\n");
##	mil.line("# >Release:        980101\n");
##	mil.line("# >Environment:\n");
##	mil.line("# any\n");
##	mil.line("# >Description:\n");
##	mil.line("# mark(BAT) fails with\n");
##	mil.line("# !ERROR: CMDmark_default: returned BAT has unexpected head.\n");
##	mil.line("# \n");
##	mil.line("# ========\n");
##	mil.line("# test script\n");
##	mil.line("# --------\n");
##	mil.line("# b:= bat.new(str,int);\n");
##	mil.line("# b.insert(\"the\",1);\n");
##	mil.line("# b.insert(\"quick\",20);\n");
##	mil.line("# b.insert(\"brown\",30);\n");
##	mil.line("# b.insert(\"fox\",40);\n");
##	mil.line("# b.insert(\"jumps\",50);\n");
##	mil.line("# b.insert(\"over\",60);\n");
##	mil.line("# b.insert(\"lazy\",70);\n");
##	mil.line("# b.insert(\"dog\",80);\n");
##	mil.line("# b.insert(str(nil),90);\n");
##	mil.line("# b.insert(\".\",100);\n");
##	mil.line("# b.insert(\"\",int(nil));\n");
##	mil.line("# b.insert(str(nil),int(nil));\n");
##	mil.line("# b.print;\n");
##	mil.line("# \n");
##	mil.line("# c:= mark(b);\n");
##	mil.line("# bat.print(c);\n");
##	mil.line("# quit;\n");
##	mil.line("# \n");
##	mil.line("# ========\n");
##	mil.line("# output\n");
##	mil.line("# --------\n");
##	mil.line("# [...]\n");
##	mil.line("# b.print;\n");
##	mil.line("# #-------------------------#\n");
##	mil.line("# # BAT:            tmp_23  #\n");
##	mil.line("# # (str)           (int)   #\n");
##	mil.line("# #-------------------------#\n");
##	mil.line("# [ \"the\",          1       ]\n");
##	mil.line("# [ \"quick\",        20      ]\n");
##	mil.line("# [ \"brown\",        30      ]\n");
##	mil.line("# [ \"fox\",          40      ]\n");
##	mil.line("# [ \"jumps\",        50      ]\n");
##	mil.line("# [ \"over\",         60      ]\n");
##	mil.line("# [ \"lazy\",         70      ]\n");
##	mil.line("# [ \"dog\",          80      ]\n");
##	mil.line("# [ nil,            90      ]\n");
##	mil.line("# [ \".\",            100     ]\n");
##	mil.line("# [ \"\",             nil     ]\n");
##	mil.line("# [ nil,            nil     ]\n");
##	mil.line("# \n");
##	mil.line("# c:= mark(b);\n");
##	mil.line("# !ERROR: CMDmark_default: returned BAT has unexpected head.\n");
##	mil.line("# bat.print(c);\n");
##	mil.line("# !WARNING: BATdescriptor: range error\n");
##	mil.line("# !ERROR: interpret operator: 1nd param: invalid BAT.\n");
##	mil.line("# quit;\n");
##	mil.line("# \n");
##	mil.line("# ========\n");
##	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
##	mil.line("var b:= bat.new(str,int);");
#	b := bat.new(nil:str,nil:int);
##	mil.line("b.insert(\"the\",1);");
#	ca_a := bat.insert(b,"the",1);
##	mil.line("b.insert(\"quick\",20);");
#	da_a := bat.insert(b,"quick",20);
##	mil.line("b.insert(\"brown\",30);");
#	ea_a := bat.insert(b,"brown",30);
##	mil.line("b.insert(\"fox\",40);");
#	fa_a := bat.insert(b,"fox",40);
##	mil.line("b.insert(\"jumps\",50);");
#	ga_a := bat.insert(b,"jumps",50);
##	mil.line("b.insert(\"over\",60);");
#	ha_a := bat.insert(b,"over",60);
##	mil.line("b.insert(\"lazy\",70);");
#	ia_a := bat.insert(b,"lazy",70);
##	mil.line("b.insert(\"dog\",80);");
#	ja_a := bat.insert(b,"dog",80);
##	mil.line("b.insert(str(nil),90);");
#	ka_a := calc.str(nil);
#	la_a := bat.insert(b,ka_a,90);
##	mil.line("b.insert(\".\",100);");
#	ma_a := bat.insert(b,".",100);
##	mil.line("b.insert(\"\",int(nil));");
#	na_a := calc.int(nil);
#	oa_a := bat.insert(b,"",na_a);
##	mil.line("b.insert(str(nil),int(nil));");
#	pa_a := calc.str(nil);
#	qa_a := calc.int(nil);
#	ra_a := bat.insert(b,pa_a,qa_a);
##	mil.line("b.print();");
#	sa_a := io.print(b);
##	mil.line("var c:= mark(b,oid(20000050));");
#	ta_a := calc.oid(20000050);
#	c := algebra.markT(b,ta_a);
##	mil.line("print(c);");
#	ua_a := io.print(c);
##	mil.line("quit();");
#	va_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
#include mil; 	# 2  (_2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 3  (_3:str)
#Predefined code segment 	# 4  (_4:str)
#The compiler can not guarantee an accurate compilation, 	# 5  (_5:str)
#because MIL unlike MAL is a dynamically typed language. 	# 6  (_6:str)
#A few guidelines to maximize usefullness. 	# 7  (_7:str)
#- make the type of variables explicit, in particular 'nil' 	# 8  (_8:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 9  (_9:str)
#use the "mil_schema" for additional support routines 	# 10  (_10:str)
#	mil.line("# \n"); 	# 11  (_11:str)
#	mil.line("# >Number:         165\n"); 	# 12  (_12:str)
#	mil.line("# >Category:       Module_libgdk\n"); 	# 13  (_13:str)
#	mil.line("# >Synopsis:       mark(BAT) fails\n"); 	# 14  (_14:str)
#	mil.line("# >Confidential:   no\n"); 	# 15  (_15:str)
#	mil.line("# >Severity:       serious\n"); 	# 16  (_16:str)
#	mil.line("# >Priority:       medium\n"); 	# 17  (_17:str)
#	mil.line("# >Responsible:    boncz (Peter Boncz)\n"); 	# 18  (_18:str)
#	mil.line("# >State:          open\n"); 	# 19  (_19:str)
#	mil.line("# >Class:          sw-bug\n"); 	# 20  (_20:str)
#	mil.line("# >Submitter-Id:   unknown\n"); 	# 21  (_21:str)
#	mil.line("# >Arrival-Date:   Wed Aug 12 15:18:26 1998\n"); 	# 22  (_22:str)
#	mil.line("# >Originator:     manegold@cwi.nl\n"); 	# 23  (_23:str)
#	mil.line("# >Organization:\n"); 	# 24  (_24:str)
#	mil.line("# CWI\n"); 	# 25  (_25:str)
#	mil.line("# >Release:        980101\n"); 	# 26  (_26:str)
#	mil.line("# >Environment:\n"); 	# 27  (_27:str)
#	mil.line("# any\n"); 	# 28  (_28:str)
#	mil.line("# >Description:\n"); 	# 29  (_29:str)
#	mil.line("# mark(BAT) fails with\n"); 	# 30  (_30:str)
#	mil.line("# !ERROR: CMDmark_default: returned BAT has unexpected head.\n"); 	# 31  (_31:str)
#	mil.line("# \n"); 	# 32  (_11:str)
#	mil.line("# ========\n"); 	# 33  (_32:str)
#	mil.line("# test script\n"); 	# 34  (_33:str)
#	mil.line("# --------\n"); 	# 35  (_34:str)
#	mil.line("# b:= bat.new(str,int);\n"); 	# 36  (_35:str)
#	mil.line("# b.insert(\"the\",1);\n"); 	# 37  (_36:str)
#	mil.line("# b.insert(\"quick\",20);\n"); 	# 38  (_37:str)
#	mil.line("# b.insert(\"brown\",30);\n"); 	# 39  (_38:str)
#	mil.line("# b.insert(\"fox\",40);\n"); 	# 40  (_39:str)
#	mil.line("# b.insert(\"jumps\",50);\n"); 	# 41  (_40:str)
#	mil.line("# b.insert(\"over\",60);\n"); 	# 42  (_41:str)
#	mil.line("# b.insert(\"lazy\",70);\n"); 	# 43  (_42:str)
#	mil.line("# b.insert(\"dog\",80);\n"); 	# 44  (_43:str)
#	mil.line("# b.insert(str(nil),90);\n"); 	# 45  (_44:str)
#	mil.line("# b.insert(\".\",100);\n"); 	# 46  (_45:str)
#	mil.line("# b.insert(\"\",int(nil));\n"); 	# 47  (_46:str)
#	mil.line("# b.insert(str(nil),int(nil));\n"); 	# 48  (_47:str)
#	mil.line("# b.print;\n"); 	# 49  (_48:str)
#	mil.line("# \n"); 	# 50  (_49:str)
#	mil.line("# c:= mark(b);\n"); 	# 51  (_50:str)
#	mil.line("# bat.print(c);\n"); 	# 52  (_51:str)
#	mil.line("# quit;\n"); 	# 53  (_52:str)
#	mil.line("# \n"); 	# 54  (_49:str)
#	mil.line("# ========\n"); 	# 55  (_32:str)
#	mil.line("# output\n"); 	# 56  (_53:str)
#	mil.line("# --------\n"); 	# 57  (_34:str)
#	mil.line("# [...]\n"); 	# 58  (_54:str)
#	mil.line("# b.print;\n"); 	# 59  (_48:str)
#	mil.line("# #-------------------------#\n"); 	# 60  (_55:str)
#	mil.line("# # BAT:            tmp_23  #\n"); 	# 61  (_56:str)
#	mil.line("# # (str)           (int)   #\n"); 	# 62  (_57:str)
#	mil.line("# #-------------------------#\n"); 	# 63  (_55:str)
#	mil.line("# [ \"the\",          1       ]\n"); 	# 64  (_58:str)
#	mil.line("# [ \"quick\",        20      ]\n"); 	# 65  (_59:str)
#	mil.line("# [ \"brown\",        30      ]\n"); 	# 66  (_60:str)
#	mil.line("# [ \"fox\",          40      ]\n"); 	# 67  (_61:str)
#	mil.line("# [ \"jumps\",        50      ]\n"); 	# 68  (_62:str)
#	mil.line("# [ \"over\",         60      ]\n"); 	# 69  (_63:str)
#	mil.line("# [ \"lazy\",         70      ]\n"); 	# 70  (_64:str)
#	mil.line("# [ \"dog\",          80      ]\n"); 	# 71  (_65:str)
#	mil.line("# [ nil,            90      ]\n"); 	# 72  (_66:str)
#	mil.line("# [ \".\",            100     ]\n"); 	# 73  (_67:str)
#	mil.line("# [ \"\",             nil     ]\n"); 	# 74  (_68:str)
#	mil.line("# [ nil,            nil     ]\n"); 	# 75  (_69:str)
#	mil.line("# \n"); 	# 76  (_49:str)
#	mil.line("# c:= mark(b);\n"); 	# 77  (_50:str)
#	mil.line("# !ERROR: CMDmark_default: returned BAT has unexpected head.\n"); 	# 78  (_70:str)
#	mil.line("# bat.print(c);\n"); 	# 79  (_51:str)
#	mil.line("# !WARNING: BATdescriptor: range error\n"); 	# 80  (_71:str)
#	mil.line("# !ERROR: interpret operator: 1nd param: invalid BAT.\n"); 	# 81  (_72:str)
#	mil.line("# quit;\n"); 	# 82  (_52:str)
#	mil.line("# \n"); 	# 83  (_49:str)
#	mil.line("# ========\n"); 	# 84  (_73:str)
#	mil.line("setoid(oid(20000000));"); 	# 85  (_74:str)
    aa_a := calc.oid(20000000);	# 86 CALCint2oid (aa_a:oid)<-(_76:int)
    ba_a := calc.setoid(aa_a);	# 87 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	mil.line("var b:= bat.new(str,int);"); 	# 88  (_78:str)
    b := bat.new(nil:str,nil:int);	# 89 CMDBATnew (b:bat[:str,:int])<-(_80:str)(_81:int)
#	mil.line("b.insert(\"the\",1);"); 	# 90  (_82:str)
    ca_a := bat.insert(b,"the",1);	# 91 BKCinsert_bun (ca_a:void)<-(b:bat[:str,:int])(_84:str)(_85:int)
#	mil.line("b.insert(\"quick\",20);"); 	# 92  (_86:str)
    da_a := bat.insert(b,"quick",20);	# 93 BKCinsert_bun (da_a:void)<-(b:bat[:str,:int])(_88:str)(_89:int)
#	mil.line("b.insert(\"brown\",30);"); 	# 94  (_90:str)
    ea_a := bat.insert(b,"brown",30);	# 95 BKCinsert_bun (ea_a:void)<-(b:bat[:str,:int])(_92:str)(_93:int)
#	mil.line("b.insert(\"fox\",40);"); 	# 96  (_94:str)
    fa_a := bat.insert(b,"fox",40);	# 97 BKCinsert_bun (fa_a:void)<-(b:bat[:str,:int])(_96:str)(_97:int)
#	mil.line("b.insert(\"jumps\",50);"); 	# 98  (_98:str)
    ga_a := bat.insert(b,"jumps",50);	# 99 BKCinsert_bun (ga_a:void)<-(b:bat[:str,:int])(_100:str)(_101:int)
#	mil.line("b.insert(\"over\",60);"); 	# 100  (_102:str)
    ha_a := bat.insert(b,"over",60);	# 101 BKCinsert_bun (ha_a:void)<-(b:bat[:str,:int])(_104:str)(_105:int)
#	mil.line("b.insert(\"lazy\",70);"); 	# 102  (_106:str)
    ia_a := bat.insert(b,"lazy",70);	# 103 BKCinsert_bun (ia_a:void)<-(b:bat[:str,:int])(_108:str)(_109:int)
#	mil.line("b.insert(\"dog\",80);"); 	# 104  (_110:str)
    ja_a := bat.insert(b,"dog",80);	# 105 BKCinsert_bun (ja_a:void)<-(b:bat[:str,:int])(_112:str)(_113:int)
#	mil.line("b.insert(str(nil),90);"); 	# 106  (_114:str)
    ka_a := calc.str(nil:void);	# 107 CALCnil2str (ka_a:str)<-(_116:void)
    la_a := bat.insert(b,ka_a,90);	# 108 BKCinsert_bun (la_a:void)<-(b:bat[:str,:int])(ka_a:str)(_118:int)
#	mil.line("b.insert(\".\",100);"); 	# 109  (_119:str)
    ma_a := bat.insert(b,".",100);	# 110 BKCinsert_bun (ma_a:void)<-(b:bat[:str,:int])(_121:str)(_122:int)
#	mil.line("b.insert(\"\",int(nil));"); 	# 111  (_123:str)
    na_a := calc.int(nil:void);	# 112 CALCnil2int (na_a:int)<-(_116:void)
    oa_a := bat.insert(b,"",na_a);	# 113 BKCinsert_bun (oa_a:void)<-(b:bat[:str,:int])(_126:str)(na_a:int)
#	mil.line("b.insert(str(nil),int(nil));"); 	# 114  (_127:str)
    pa_a := calc.str(nil:void);	# 115 CALCnil2str (pa_a:str)<-(_116:void)
    qa_a := calc.int(nil:void);	# 116 CALCnil2int (qa_a:int)<-(_116:void)
    ra_a := bat.insert(b,pa_a,qa_a);	# 117 BKCinsert_bun (ra_a:void)<-(b:bat[:str,:int])(pa_a:str)(qa_a:int)
#	mil.line("b.print();"); 	# 118  (_131:str)
    sa_a := io.print(b);	# 119 IOprint_val (sa_a:int)<-(b:bat[:str,:int])
#	mil.line("var c:= mark(b,oid(20000050));"); 	# 120  (_133:str)
    ta_a := calc.oid(20000050);	# 121 CALCint2oid (ta_a:oid)<-(_135:int)
    c := algebra.markT(b,ta_a);	# 122 ALGtmark (c:bat[:str,:void])<-(b:bat[:str,:int])(ta_a:oid)
#	mil.line("print(c);"); 	# 123  (_137:str)
    ua_a := io.print(c);	# 124 IOprint_val (ua_a:int)<-(c:bat[:str,:void])
#	mil.line("quit();"); 	# 125  (_139:str)
    va_a := clients.quit();	# 126 CLTquit (va_a:void)
end main;	# 127  
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "the",	  1	  ]
[ "quick",	  20	  ]
[ "brown",	  30	  ]
[ "fox",	  40	  ]
[ "jumps",	  50	  ]
[ "over",	  60	  ]
[ "lazy",	  70	  ]
[ "dog",	  80	  ]
[ nil,		  90	  ]
[ ".",		  100	  ]
[ "",		  nil	  ]
[ nil,		  nil	  ]
#---------------------------------#
# h		t		  # name
# str		void		  # type
#---------------------------------#
[ "the",	  20000050@0	  ]
[ "quick",	  20000051@0	  ]
[ "brown",	  20000052@0	  ]
[ "fox",	  20000053@0	  ]
[ "jumps",	  20000054@0	  ]
[ "over",	  20000055@0	  ]
[ "lazy",	  20000056@0	  ]
[ "dog",	  20000057@0	  ]
[ nil,		  20000058@0	  ]
[ ".",		  20000059@0	  ]
[ "",		  20000060@0	  ]
[ nil,		  20000061@0	  ]

# 07:27:16 >  
# 07:27:16 >  Done.
# 07:27:16 >  

