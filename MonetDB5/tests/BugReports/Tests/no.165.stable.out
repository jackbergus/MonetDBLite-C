stdout of test 'no.165` in directory 'tests/BugReports` itself:


# 07:27:16 >  
# 07:27:16 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.165.mal < /dev/null
# 07:27:16 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# \n");
##	mil.line("# >Number:         165\n");
##	mil.line("# >Category:       Module_libgdk\n");
##	mil.line("# >Synopsis:       mark(BAT) fails\n");
##	mil.line("# >Confidential:   no\n");
##	mil.line("# >Severity:       serious\n");
##	mil.line("# >Priority:       medium\n");
##	mil.line("# >Responsible:    boncz (Peter Boncz)\n");
##	mil.line("# >State:          open\n");
##	mil.line("# >Class:          sw-bug\n");
##	mil.line("# >Submitter-Id:   unknown\n");
##	mil.line("# >Arrival-Date:   Wed Aug 12 15:18:26 1998\n");
##	mil.line("# >Originator:     manegold@cwi.nl\n");
##	mil.line("# >Organization:\n");
##	mil.line("# CWI\n");
##	mil.line("# >Release:        980101\n");
##	mil.line("# >Environment:\n");
##	mil.line("# any\n");
##	mil.line("# >Description:\n");
##	mil.line("# mark(BAT) fails with\n");
##	mil.line("# !ERROR: CMDmark_default: returned BAT has unexpected head.\n");
##	mil.line("# \n");
##	mil.line("# ========\n");
##	mil.line("# test script\n");
##	mil.line("# --------\n");
##	mil.line("# b:= bat.new(str,int);\n");
##	mil.line("# b.insert(\"the\",1);\n");
##	mil.line("# b.insert(\"quick\",20);\n");
##	mil.line("# b.insert(\"brown\",30);\n");
##	mil.line("# b.insert(\"fox\",40);\n");
##	mil.line("# b.insert(\"jumps\",50);\n");
##	mil.line("# b.insert(\"over\",60);\n");
##	mil.line("# b.insert(\"lazy\",70);\n");
##	mil.line("# b.insert(\"dog\",80);\n");
##	mil.line("# b.insert(str(nil),90);\n");
##	mil.line("# b.insert(\".\",100);\n");
##	mil.line("# b.insert(\"\",int(nil));\n");
##	mil.line("# b.insert(str(nil),int(nil));\n");
##	mil.line("# b.print;\n");
##	mil.line("# \n");
##	mil.line("# c:= mark(b);\n");
##	mil.line("# bat.print(c);\n");
##	mil.line("# quit;\n");
##	mil.line("# \n");
##	mil.line("# ========\n");
##	mil.line("# output\n");
##	mil.line("# --------\n");
##	mil.line("# [...]\n");
##	mil.line("# b.print;\n");
##	mil.line("# #-------------------------#\n");
##	mil.line("# # BAT:            tmp_23  #\n");
##	mil.line("# # (str)           (int)   #\n");
##	mil.line("# #-------------------------#\n");
##	mil.line("# [ \"the\",          1       ]\n");
##	mil.line("# [ \"quick\",        20      ]\n");
##	mil.line("# [ \"brown\",        30      ]\n");
##	mil.line("# [ \"fox\",          40      ]\n");
##	mil.line("# [ \"jumps\",        50      ]\n");
##	mil.line("# [ \"over\",         60      ]\n");
##	mil.line("# [ \"lazy\",         70      ]\n");
##	mil.line("# [ \"dog\",          80      ]\n");
##	mil.line("# [ nil,            90      ]\n");
##	mil.line("# [ \".\",            100     ]\n");
##	mil.line("# [ \"\",             nil     ]\n");
##	mil.line("# [ nil,            nil     ]\n");
##	mil.line("# \n");
##	mil.line("# c:= mark(b);\n");
##	mil.line("# !ERROR: CMDmark_default: returned BAT has unexpected head.\n");
##	mil.line("# bat.print(c);\n");
##	mil.line("# !WARNING: BATdescriptor: range error\n");
##	mil.line("# !ERROR: interpret operator: 1nd param: invalid BAT.\n");
##	mil.line("# quit;\n");
##	mil.line("# \n");
##	mil.line("# ========\n");
##	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
##	mil.line("var b:= bat.new(str,int);");
#	b := bat.new(nil:str,nil:int);
##	mil.line("b.insert(\"the\",1);");
#	ca_a := bat.insert(b,"the",1);
##	mil.line("b.insert(\"quick\",20);");
#	da_a := bat.insert(b,"quick",20);
##	mil.line("b.insert(\"brown\",30);");
#	ea_a := bat.insert(b,"brown",30);
##	mil.line("b.insert(\"fox\",40);");
#	fa_a := bat.insert(b,"fox",40);
##	mil.line("b.insert(\"jumps\",50);");
#	ga_a := bat.insert(b,"jumps",50);
##	mil.line("b.insert(\"over\",60);");
#	ha_a := bat.insert(b,"over",60);
##	mil.line("b.insert(\"lazy\",70);");
#	ia_a := bat.insert(b,"lazy",70);
##	mil.line("b.insert(\"dog\",80);");
#	ja_a := bat.insert(b,"dog",80);
##	mil.line("b.insert(str(nil),90);");
#	ka_a := calc.str(nil);
#	la_a := bat.insert(b,ka_a,90);
##	mil.line("b.insert(\".\",100);");
#	ma_a := bat.insert(b,".",100);
##	mil.line("b.insert(\"\",int(nil));");
#	na_a := calc.int(nil);
#	oa_a := bat.insert(b,"",na_a);
##	mil.line("b.insert(str(nil),int(nil));");
#	pa_a := calc.str(nil);
#	qa_a := calc.int(nil);
#	ra_a := bat.insert(b,pa_a,qa_a);
##	mil.line("b.print();");
#	sa_a := io.print(b);
##	mil.line("var c:= mark(b,oid(20000050));");
#	ta_a := calc.oid(20000050);
#	c := algebra.markT(b,ta_a);
##	mil.line("print(c);");
#	ua_a := io.print(c);
##	mil.line("quit();");
#	va_a := clients.quit();
#
function user.main():void;              #  0 main:void {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("# \n"); 
#	io.print("# >Number:         165\n"); 
#	io.print("# >Category:       Module_libgdk\n"); 
#	io.print("# >Synopsis:       mark(BAT) fails\n"); 
#	io.print("# >Confidential:   no\n"); 
#	io.print("# >Severity:       serious\n"); 
#	io.print("# >Priority:       medium\n"); 
#	io.print("# >Responsible:    boncz (Peter Boncz)\n"); 
#	io.print("# >State:          open\n"); 
#	io.print("# >Class:          sw-bug\n"); 
#	io.print("# >Submitter-Id:   unknown\n"); 
#	io.print("# >Arrival-Date:   Wed Aug 12 15:18:26 1998\n"); 
#	io.print("# >Originator:     manegold@cwi.nl\n"); 
#	io.print("# >Organization:\n"); 
#	io.print("# CWI\n"); 
#	io.print("# >Release:        980101\n"); 
#	io.print("# >Environment:\n"); 
#	io.print("# any\n"); 
#	io.print("# >Description:\n"); 
#	io.print("# mark(BAT) fails with\n"); 
#	io.print("# !ERROR: CMDmark_default: returned BAT has unexpected head.\n"); 
#	io.print("# \n"); 
#	io.print("# ========\n"); 
#	io.print("# test script\n"); 
#	io.print("# --------\n"); 
#	io.print("# b:= bat.new(str,int);\n"); 
#	io.print("# b.insert(\"the\",1);\n"); 
#	io.print("# b.insert(\"quick\",20);\n"); 
#	io.print("# b.insert(\"brown\",30);\n"); 
#	io.print("# b.insert(\"fox\",40);\n"); 
#	io.print("# b.insert(\"jumps\",50);\n"); 
#	io.print("# b.insert(\"over\",60);\n"); 
#	io.print("# b.insert(\"lazy\",70);\n"); 
#	io.print("# b.insert(\"dog\",80);\n"); 
#	io.print("# b.insert(str(nil),90);\n"); 
#	io.print("# b.insert(\".\",100);\n"); 
#	io.print("# b.insert(\"\",int(nil));\n"); 
#	io.print("# b.insert(str(nil),int(nil));\n"); 
#	io.print("# b.print;\n"); 
#	io.print("# \n"); 
#	io.print("# c:= mark(b);\n"); 
#	io.print("# bat.print(c);\n"); 
#	io.print("# quit;\n"); 
#	io.print("# \n"); 
#	io.print("# ========\n"); 
#	io.print("# output\n"); 
#	io.print("# --------\n"); 
#	io.print("# [...]\n"); 
#	io.print("# b.print;\n"); 
#	io.print("# #-------------------------#\n"); 
#	io.print("# # BAT:            tmp_23  #\n"); 
#	io.print("# # (str)           (int)   #\n"); 
#	io.print("# #-------------------------#\n"); 
#	io.print("# [ \"the\",          1       ]\n"); 
#	io.print("# [ \"quick\",        20      ]\n"); 
#	io.print("# [ \"brown\",        30      ]\n"); 
#	io.print("# [ \"fox\",          40      ]\n"); 
#	io.print("# [ \"jumps\",        50      ]\n"); 
#	io.print("# [ \"over\",         60      ]\n"); 
#	io.print("# [ \"lazy\",         70      ]\n"); 
#	io.print("# [ \"dog\",          80      ]\n"); 
#	io.print("# [ nil,            90      ]\n"); 
#	io.print("# [ \".\",            100     ]\n"); 
#	io.print("# [ \"\",             nil     ]\n"); 
#	io.print("# [ nil,            nil     ]\n"); 
#	io.print("# \n"); 
#	io.print("# c:= mark(b);\n"); 
#	io.print("# !ERROR: CMDmark_default: returned BAT has unexpected head.\n"); 
#	io.print("# bat.print(c);\n"); 
#	io.print("# !WARNING: BATdescriptor: range error\n"); 
#	io.print("# !ERROR: interpret operator: 1nd param: invalid BAT.\n"); 
#	io.print("# quit;\n"); 
#	io.print("# \n"); 
#	io.print("# ========\n"); 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         # 85 aa_a:oid := CALCint2oid(_86:int) 
    ba_a := calc.setoid(aa_a);          # 86 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("var b:= bat.new(str,int);"); 
    b := bat.new(nil:str,nil:int);      # 88 b:bat[:str,:int] := CMDBATnew(_90:str, _91:int) {G}
#	io.print("b.insert(\"the\",1);"); 
    ca_a := bat.insert(b,"the",1);      # 90 ca_a:void := BKCinsert_bun(b:bat[:str,:int], _94:str, _95:int) 
#	io.print("b.insert(\"quick\",20);"); 
    da_a := bat.insert(b,"quick",20);   # 92 da_a:void := BKCinsert_bun(b:bat[:str,:int], _98:str, _99:int) 
#	io.print("b.insert(\"brown\",30);"); 
    ea_a := bat.insert(b,"brown",30);   # 94 ea_a:void := BKCinsert_bun(b:bat[:str,:int], _102:str, _103:int) 
#	io.print("b.insert(\"fox\",40);"); 
    fa_a := bat.insert(b,"fox",40);     # 96 fa_a:void := BKCinsert_bun(b:bat[:str,:int], _106:str, _107:int) 
#	io.print("b.insert(\"jumps\",50);"); 
    ga_a := bat.insert(b,"jumps",50);   # 98 ga_a:void := BKCinsert_bun(b:bat[:str,:int], _110:str, _111:int) 
#	io.print("b.insert(\"over\",60);"); 
    ha_a := bat.insert(b,"over",60);    #100 ha_a:void := BKCinsert_bun(b:bat[:str,:int], _114:str, _115:int) 
#	io.print("b.insert(\"lazy\",70);"); 
    ia_a := bat.insert(b,"lazy",70);    #102 ia_a:void := BKCinsert_bun(b:bat[:str,:int], _118:str, _119:int) 
#	io.print("b.insert(\"dog\",80);"); 
    ja_a := bat.insert(b,"dog",80);     #104 ja_a:void := BKCinsert_bun(b:bat[:str,:int], _122:str, _123:int) 
#	io.print("b.insert(str(nil),90);"); 
    ka_a := calc.str(nil:void);         #106 ka_a:str := CALCnil2str(_126:void) {G}
    la_a := bat.insert(b,ka_a,90);      #107 la_a:void := BKCinsert_bun(b:bat[:str,:int], ka_a:str, _128:int) 
#	io.print("b.insert(\".\",100);"); 
    ma_a := bat.insert(b,".",100);      #109 ma_a:void := BKCinsert_bun(b:bat[:str,:int], _131:str, _132:int) 
#	io.print("b.insert(\"\",int(nil));"); 
    na_a := calc.int(nil:void);         #111 na_a:int := CALCnil2int(_126:void) 
    oa_a := bat.insert(b,"",na_a);      #112 oa_a:void := BKCinsert_bun(b:bat[:str,:int], _136:str, na_a:int) 
#	io.print("b.insert(str(nil),int(nil));"); 
    pa_a := calc.str(nil:void);         #114 pa_a:str := CALCnil2str(_126:void) {G}
    qa_a := calc.int(nil:void);         #115 qa_a:int := CALCnil2int(_126:void) 
    ra_a := bat.insert(b,pa_a,qa_a);    #116 ra_a:void := BKCinsert_bun(b:bat[:str,:int], pa_a:str, qa_a:int) 
#	io.print("b.print();"); 
    sa_a := io.print(b);                #118 sa_a:void := IOprint_val(b:bat[:str,:int]) 
#	io.print("var c:= mark(b,oid(20000050));"); 
    ta_a := calc.oid(20000050);         #120 ta_a:oid := CALCint2oid(_145:int) 
    c := algebra.markT(b,ta_a);         #121 c:bat[:str,:oid] := ALGtmark(b:bat[:str,:int], ta_a:oid) {G}
#	io.print("print(c);"); 
    ua_a := io.print(c);                #123 ua_a:void := IOprint_val(c:bat[:str,:oid]) 
#	io.print("quit();"); 
    va_a := clients.quit();             #125 va_a:void 
end main;                               #126  
#-------------------------#
# h		t	  # name
# str		int	  # type
#-------------------------#
[ "the",	  1	  ]
[ "quick",	  20	  ]
[ "brown",	  30	  ]
[ "fox",	  40	  ]
[ "jumps",	  50	  ]
[ "over",	  60	  ]
[ "lazy",	  70	  ]
[ "dog",	  80	  ]
[ nil,		  90	  ]
[ ".",		  100	  ]
[ "",		  nil	  ]
[ nil,		  nil	  ]
#---------------------------------#
# h		t		  # name
# str		void		  # type
#---------------------------------#
[ "the",	  20000050@0	  ]
[ "quick",	  20000051@0	  ]
[ "brown",	  20000052@0	  ]
[ "fox",	  20000053@0	  ]
[ "jumps",	  20000054@0	  ]
[ "over",	  20000055@0	  ]
[ "lazy",	  20000056@0	  ]
[ "dog",	  20000057@0	  ]
[ nil,		  20000058@0	  ]
[ ".",		  20000059@0	  ]
[ "",		  20000060@0	  ]
[ nil,		  20000061@0	  ]

# 07:27:16 >  
# 07:27:16 >  Done.
# 07:27:16 >  

