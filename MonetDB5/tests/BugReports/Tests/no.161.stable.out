stdout of test 'no.161` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.161 milS
#> Mtest:	Mtimeout -timeout 900 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.161.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Sat Feb  5 04:39:19 MET 2000.
#script:no.161.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# >Number:         161
# >Category:       Mserver
# >Synopsis:       tostr problem when str module is loaded
# >Confidential:   no
# >Severity:       critical
# >Priority:       high
# >Responsible:    boncz (Peter Boncz)
# >State:          open
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Wed Jul 15 15:24:01 1998
# >Originator:     windhouw@cwi.nl
# >Organization:
# CWI
# >Release:        980101
# >Environment:
# 
# >Description:
# In the following script the string becomes different
# in the inner procedure (when the str module is loaded):
# 
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("# >Number:         161\n");
#	mil.line("# >Category:       Mserver\n");
#	mil.line("# >Synopsis:       tostr problem when str module is loaded\n");
#	mil.line("# >Confidential:   no\n");
#	mil.line("# >Severity:       critical\n");
#	mil.line("# >Priority:       high\n");
#	mil.line("# >Responsible:    boncz (Peter Boncz)\n");
#	mil.line("# >State:          open\n");
#	mil.line("# >Class:          sw-bug\n");
#	mil.line("# >Submitter-Id:   unknown\n");
#	mil.line("# >Arrival-Date:   Wed Jul 15 15:24:01 1998\n");
#	mil.line("# >Originator:     windhouw@cwi.nl\n");
#	mil.line("# >Organization:\n");
#	mil.line("# CWI\n");
#	mil.line("# >Release:        980101\n");
#	mil.line("# >Environment:\n");
#	mil.line("# \n");
#	mil.line("# >Description:\n");
#	mil.line("# In the following script the string becomes different\n");
#	mil.line("# in the inner procedure (when the str module is loaded):\n");
#	mil.line("# \n");
#	mil.line("# Script\n");
#	mil.line("# 8<-----\n");
#	mil.line("# PROC test_inner(any in) : void {\n");
#	mil.line("#    printf(\"test_inner.in: %s\\n\",str(in));\n");
#	mil.line("# }\n");
#	mil.line("#  \n");
#	mil.line("# PROC test_outer(any in) : void {\n");
#	mil.line("#    printf(\"test_outer.in: %s\\n\",str(in));\n");
#	mil.line("#    test_inner(in);\n");
#	mil.line("# }\n");
#	mil.line("# 8<-----\n");
#	mil.line("# Output\n");
#	mil.line("# 8<-----\n");
#	mil.line("# >test_outer(\"chr\");\n");
#	mil.line("# test_outer.in: chr\n");
#	mil.line("# test_inner.in: chr\n");
#	mil.line("# >module(str);\n");
#	mil.line("# >test_outer(\"chr\");\n");
#	mil.line("# test_outer.in: chr\n");
#	mil.line("# test_inner.in: test_inner.in: %s\n");
#	mil.line("# 8<----\n");
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("PROC test_inner(any in) : void {");
#function test_inner(in:any):void;
#	mil.line("   printf(\"test_inner.in: %s\\n\",str(in));");
#	ca_a := str(in);
#	da_a := printf("test_inner.in: %s\n",ca_a);
#end test_inner;
function user.test_inner(in:str):void;	# 0  (test_inner:void)<-(in:str)
    mil.line("   printf(\"test_inner.in: %s\\n\",str(in));");	# 1 MILline ($2:void)<-($3:str)
    ca_a := calc.str(in);	# 2 CALCstr2str (ca_a:str)<-(in:str)
    da_a := io.printf("test_inner.in: %s\n",ca_a);	# 3 IOprint_formatted_str (da_a:int)<-($6:str)(ca_a:str)
end test_inner;	# 4  
#	mil.line("PROC test_outer(any in) : void {");
#function test_outer(in:any):void;
#	mil.line("   printf(\"test_outer.in: %s\\n\",str(in));");
#	ea_a := str(in);
#	fa_a := printf("test_outer.in: %s\n",ea_a);
#	mil.line("   test_inner(in);");
#	ga_a := test_inner(in);
#end test_outer;
function user.test_outer(in:any_1):void;	# 0  (test_outer:void)<-(in:any_1)
    mil.line("   printf(\"test_outer.in: %s\\n\",str(in));");	# 1 MILline ($2:void)<-($3:str)
    ea_a := calc.str(in);	# 2  (ea_a:any)<-(in:any_1)
    fa_a := io.printf("test_outer.in: %s\n",ea_a);	# 3  (fa_a:any)<-($6:str)(ea_a:any)
    mil.line("   test_inner(in);");	# 4 MILline ($7:void)<-($8:str)
    ga_a := user.test_inner(in);	# 5  (ga_a:any)<-(in:any_1)
end test_outer;	# 6  
#	mil.line("test_outer(\"chr\");");
#	ha_a := test_outer("chr");
#	mil.line("test_outer(\"chr\");");
#	ia_a := test_outer("chr");
#	mil.line("quit();");
#	ja_a := quit();
#  
function user.main():int;	# 0  (main:int)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  ($32:str)
#Predefined code segment 	# 2  ($34:str)
#The compiler can not guarantee an accurate compilation, 	# 3  ($36:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  ($38:str)
#A few guidelines to maximize usefullness. 	# 5  ($40:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  ($42:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  ($44:str)
#use the "mil_schema" for additional support routines 	# 8  ($46:str)
    mil.line("# >Number:         161\n");	# 9 MILline ($47:void)<-($48:str)
    mil.line("# >Category:       Mserver\n");	# 10 MILline ($49:void)<-($50:str)
    mil.line("# >Synopsis:       tostr problem when str module is loaded\n");	# 11 MILline ($51:void)<-($52:str)
    mil.line("# >Confidential:   no\n");	# 12 MILline ($53:void)<-($54:str)
    mil.line("# >Severity:       critical\n");	# 13 MILline ($55:void)<-($56:str)
    mil.line("# >Priority:       high\n");	# 14 MILline ($57:void)<-($58:str)
    mil.line("# >Responsible:    boncz (Peter Boncz)\n");	# 15 MILline ($59:void)<-($60:str)
    mil.line("# >State:          open\n");	# 16 MILline ($61:void)<-($62:str)
    mil.line("# >Class:          sw-bug\n");	# 17 MILline ($63:void)<-($64:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 18 MILline ($65:void)<-($66:str)
    mil.line("# >Arrival-Date:   Wed Jul 15 15:24:01 1998\n");	# 19 MILline ($67:void)<-($68:str)
    mil.line("# >Originator:     windhouw@cwi.nl\n");	# 20 MILline ($69:void)<-($70:str)
    mil.line("# >Organization:\n");	# 21 MILline ($71:void)<-($72:str)
    mil.line("# CWI\n");	# 22 MILline ($73:void)<-($74:str)
    mil.line("# >Release:        980101\n");	# 23 MILline ($75:void)<-($76:str)
    mil.line("# >Environment:\n");	# 24 MILline ($77:void)<-($78:str)
    mil.line("# \n");	# 25 MILline ($79:void)<-($80:str)
    mil.line("# >Description:\n");	# 26 MILline ($81:void)<-($82:str)
    mil.line("# In the following script the string becomes different\n");	# 27 MILline ($83:void)<-($84:str)
    mil.line("# in the inner procedure (when the str module is loaded):\n");	# 28 MILline ($85:void)<-($86:str)
    mil.line("# \n");	# 29 MILline ($87:void)<-($80:str)
    mil.line("# Script\n");	# 30 MILline ($88:void)<-($89:str)
    mil.line("# 8<-----\n");	# 31 MILline ($90:void)<-($91:str)
    mil.line("# PROC test_inner(any in) : void {\n");	# 32 MILline ($92:void)<-($93:str)
    mil.line("#    printf(\"test_inner.in: %s\\n\",str(in));\n");	# 33 MILline ($94:void)<-($95:str)
    mil.line("# }\n");	# 34 MILline ($96:void)<-($97:str)
    mil.line("#  \n");	# 35 MILline ($98:void)<-($99:str)
    mil.line("# PROC test_outer(any in) : void {\n");	# 36 MILline ($100:void)<-($101:str)
    mil.line("#    printf(\"test_outer.in: %s\\n\",str(in));\n");	# 37 MILline ($102:void)<-($103:str)
    mil.line("#    test_inner(in);\n");	# 38 MILline ($104:void)<-($105:str)
    mil.line("# }\n");	# 39 MILline ($106:void)<-($97:str)
    mil.line("# 8<-----\n");	# 40 MILline ($107:void)<-($91:str)
    mil.line("# Output\n");	# 41 MILline ($108:void)<-($109:str)
    mil.line("# 8<-----\n");	# 42 MILline ($110:void)<-($91:str)
    mil.line("# >test_outer(\"chr\");\n");	# 43 MILline ($111:void)<-($112:str)
    mil.line("# test_outer.in: chr\n");	# 44 MILline ($113:void)<-($114:str)
    mil.line("# test_inner.in: chr\n");	# 45 MILline ($115:void)<-($116:str)
    mil.line("# >module(str);\n");	# 46 MILline ($117:void)<-($118:str)
    mil.line("# >test_outer(\"chr\");\n");	# 47 MILline ($119:void)<-($112:str)
    mil.line("# test_outer.in: chr\n");	# 48 MILline ($120:void)<-($114:str)
    mil.line("# test_inner.in: test_inner.in: %s\n");	# 49 MILline ($121:void)<-($122:str)
    mil.line("# 8<----\n");	# 50 MILline ($123:void)<-($124:str)
    mil.line("setoid(oid(20000000));");	# 51 MILline ($125:void)<-($126:str)
    aa_a := calc.oid(20000000);	# 52 CALCint2oid (aa_a:oid)<-($128:int)
    ba_a := calc.setoid(aa_a);	# 53 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("PROC test_inner(any in) : void {");	# 54 MILline ($130:void)<-($131:str)
    mil.line("PROC test_outer(any in) : void {");	# 55 MILline ($132:void)<-($133:str)
    mil.line("test_outer(\"chr\");");	# 56 MILline ($134:void)<-($135:str)
    ha_a := user.test_outer("chr");	# 57  (ha_a:void)<-($137:str)
    mil.line("test_outer(\"chr\");");	# 58 MILline ($138:void)<-($135:str)
    ia_a := user.test_outer("chr");	# 59  (ia_a:void)<-($137:str)
    mil.line("quit();");	# 60 MILline ($140:void)<-($141:str)
    ja_a := clients.quit();	# 61 CLTquit (ja_a:void)
end main;	# 62  
## >Number:         161\n
## >Category:       Mserver\n
## >Synopsis:       tostr problem when str module is loaded\n
## >Confidential:   no\n
## >Severity:       critical\n
## >Priority:       high\n
## >Responsible:    boncz (Peter Boncz)\n
## >State:          open\n
## >Class:          sw-bug\n
## >Submitter-Id:   unknown\n
## >Arrival-Date:   Wed Jul 15 15:24:01 1998\n
## >Originator:     windhouw@cwi.nl\n
## >Organization:\n
## CWI\n
## >Release:        980101\n
## >Environment:\n
## \n
## >Description:\n
## In the following script the string becomes different\n
## in the inner procedure (when the str module is loaded):\n
## \n
## Script\n
## 8<-----\n
## PROC test_inner(any in) : void {\n
##    printf(\"test_inner.in: %s\\n\",str(in));\n
## }\n
##  \n
## PROC test_outer(any in) : void {\n
##    printf(\"test_outer.in: %s\\n\",str(in));\n
##    test_inner(in);\n
## }\n
## 8<-----\n
## Output\n
## 8<-----\n
## >test_outer(\"chr\");\n
## test_outer.in: chr\n
## test_inner.in: chr\n
## >module(str);\n
## >test_outer(\"chr\");\n
## test_outer.in: chr\n
## test_inner.in: test_inner.in: %s\n
## 8<----\n
#setoid(oid(20000000));
#PROC test_inner(any in) : void {
#PROC test_outer(any in) : void {
#test_outer(\"chr\");
#   printf(\"test_outer.in: %s\\n\",str(in));
test_outer.in: chr
#   test_inner(in);
#   printf(\"test_inner.in: %s\\n\",str(in));
test_inner.in: chr
#test_outer(\"chr\");
#   printf(\"test_outer.in: %s\\n\",str(in));
test_outer.in: chr
#   test_inner(in);
#   printf(\"test_inner.in: %s\\n\",str(in));
test_inner.in: chr
#quit();

# 21:16:01 >  
# 21:16:01 >  Done.
# 21:16:01 >  

