stdout of test 'no.161` in directory 'tests/BugReports` itself:


# 07:27:16 >  
# 07:27:16 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.161.mal < /dev/null
# 07:27:16 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# >Number:         161\n");
##	mil.line("# >Category:       Mserver\n");
##	mil.line("# >Synopsis:       tostr problem when str module is loaded\n");
##	mil.line("# >Confidential:   no\n");
##	mil.line("# >Severity:       critical\n");
##	mil.line("# >Priority:       high\n");
##	mil.line("# >Responsible:    boncz (Peter Boncz)\n");
##	mil.line("# >State:          open\n");
##	mil.line("# >Class:          sw-bug\n");
##	mil.line("# >Submitter-Id:   unknown\n");
##	mil.line("# >Arrival-Date:   Wed Jul 15 15:24:01 1998\n");
##	mil.line("# >Originator:     windhouw@cwi.nl\n");
##	mil.line("# >Organization:\n");
##	mil.line("# CWI\n");
##	mil.line("# >Release:        980101\n");
##	mil.line("# >Environment:\n");
##	mil.line("# \n");
##	mil.line("# >Description:\n");
##	mil.line("# In the following script the string becomes different\n");
##	mil.line("# in the inner procedure (when the str module is loaded):\n");
##	mil.line("# \n");
##	mil.line("# Script\n");
##	mil.line("# 8<-----\n");
##	mil.line("# PROC test_inner(any in) : void {\n");
##	mil.line("#    printf(\"test_inner.in: %s\\n\",str(in));\n");
##	mil.line("# }\n");
##	mil.line("#  \n");
##	mil.line("# PROC test_outer(any in) : void {\n");
##	mil.line("#    printf(\"test_outer.in: %s\\n\",str(in));\n");
##	mil.line("#    test_inner(in);\n");
##	mil.line("# }\n");
##	mil.line("# 8<-----\n");
##	mil.line("# Output\n");
##	mil.line("# 8<-----\n");
##	mil.line("# >test_outer(\"chr\");\n");
##	mil.line("# test_outer.in: chr\n");
##	mil.line("# test_inner.in: chr\n");
##	mil.line("# >module(str);\n");
##	mil.line("# >test_outer(\"chr\");\n");
##	mil.line("# test_outer.in: chr\n");
##	mil.line("# test_inner.in: test_inner.in: %s\n");
##	mil.line("# 8<----\n");
##	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
##	mil.line("PROC test_inner(any in) : void {");
#function test_inner(in:str):void;
##	mil.line("   printf(\"test_inner.in: %s\\n\",str(in));");
#	ca_a := calc.str(in);
#	da_a := io.printf("test_inner.in: %s\n",ca_a);
#end test_inner;
function user.test_inner(in:str):void;	# 0  (test_inner:void)<-(in:str)
#	mil.line("   printf(\"test_inner.in: %s\\n\",str(in));"); 	# 1  (_2:str)
    ca_a := calc.str(in);	# 2 CALCstr2str (ca_a:str)<-(in:str)
    da_a := io.printf("test_inner.in: %s\n",ca_a);	# 3 IOprint_formatted_str (da_a:void)<-(_5:str)(ca_a:str)
end test_inner;	# 4  
##	mil.line("PROC test_outer(any in) : void {");
#function test_outer(in:any_1):void;
##	mil.line("   printf(\"test_outer.in: %s\\n\",str(in));");
#	ea_a := calc.str(in);
#	fa_a := io.printf("test_outer.in: %s\n",ea_a);
##	mil.line("   test_inner(in);");
#	ga_a := user.test_inner(in);
#end test_outer;
function user.test_outer(in:any_1):void;	# 0  (test_outer:void)<-(in:any_1)
#	mil.line("   printf(\"test_outer.in: %s\\n\",str(in));"); 	# 1  (_2:str)
    ea_a := calc.str(in);	# 2  (ea_a:any)<-(in:any_1)
    fa_a := io.printf("test_outer.in: %s\n",ea_a);	# 3  (fa_a:any)<-(_5:str)(ea_a:any)
#	mil.line("   test_inner(in);"); 	# 4  (_6:str)
    ga_a := user.test_inner(in);	# 5  (ga_a:any)<-(in:any_1)
end test_outer;	# 6  
##	mil.line("test_outer(\"chr\");");
#	ha_a := user.test_outer("chr");
##	mil.line("test_outer(\"chr\");");
#	ia_a := user.test_outer("chr");
##	mil.line("quit();");
#	ja_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  (_2:str)
#Predefined code segment 	# 3  (_3:str)
#The compiler can not guarantee an accurate compilation, 	# 4  (_4:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  (_5:str)
#A few guidelines to maximize usefullness. 	# 6  (_6:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  (_7:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  (_8:str)
#use the "mil_schema" for additional support routines 	# 9  (_9:str)
#	io.print("# >Number:         161\n"); 	# 10  (_10:str)
#	io.print("# >Category:       Mserver\n"); 	# 11  (_11:str)
#	io.print("# >Synopsis:       tostr problem when str module is loaded\n"); 	# 12  (_12:str)
#	io.print("# >Confidential:   no\n"); 	# 13  (_13:str)
#	io.print("# >Severity:       critical\n"); 	# 14  (_14:str)
#	io.print("# >Priority:       high\n"); 	# 15  (_15:str)
#	io.print("# >Responsible:    boncz (Peter Boncz)\n"); 	# 16  (_16:str)
#	io.print("# >State:          open\n"); 	# 17  (_17:str)
#	io.print("# >Class:          sw-bug\n"); 	# 18  (_18:str)
#	io.print("# >Submitter-Id:   unknown\n"); 	# 19  (_19:str)
#	io.print("# >Arrival-Date:   Wed Jul 15 15:24:01 1998\n"); 	# 20  (_20:str)
#	io.print("# >Originator:     windhouw@cwi.nl\n"); 	# 21  (_21:str)
#	io.print("# >Organization:\n"); 	# 22  (_22:str)
#	io.print("# CWI\n"); 	# 23  (_23:str)
#	io.print("# >Release:        980101\n"); 	# 24  (_24:str)
#	io.print("# >Environment:\n"); 	# 25  (_25:str)
#	io.print("# \n"); 	# 26  (_26:str)
#	io.print("# >Description:\n"); 	# 27  (_27:str)
#	io.print("# In the following script the string becomes different\n"); 	# 28  (_28:str)
#	io.print("# in the inner procedure (when the str module is loaded):\n"); 	# 29  (_29:str)
#	io.print("# \n"); 	# 30  (_26:str)
#	io.print("# Script\n"); 	# 31  (_30:str)
#	io.print("# 8<-----\n"); 	# 32  (_31:str)
#	io.print("# PROC test_inner(any in) : void {\n"); 	# 33  (_32:str)
#	io.print("#    printf(\"test_inner.in: %s\\n\",str(in));\n"); 	# 34  (_33:str)
#	io.print("# }\n"); 	# 35  (_34:str)
#	io.print("#  \n"); 	# 36  (_35:str)
#	io.print("# PROC test_outer(any in) : void {\n"); 	# 37  (_36:str)
#	io.print("#    printf(\"test_outer.in: %s\\n\",str(in));\n"); 	# 38  (_37:str)
#	io.print("#    test_inner(in);\n"); 	# 39  (_38:str)
#	io.print("# }\n"); 	# 40  (_34:str)
#	io.print("# 8<-----\n"); 	# 41  (_31:str)
#	io.print("# Output\n"); 	# 42  (_39:str)
#	io.print("# 8<-----\n"); 	# 43  (_31:str)
#	io.print("# >test_outer(\"chr\");\n"); 	# 44  (_40:str)
#	io.print("# test_outer.in: chr\n"); 	# 45  (_41:str)
#	io.print("# test_inner.in: chr\n"); 	# 46  (_42:str)
#	io.print("# >module(str);\n"); 	# 47  (_43:str)
#	io.print("# >test_outer(\"chr\");\n"); 	# 48  (_40:str)
#	io.print("# test_outer.in: chr\n"); 	# 49  (_41:str)
#	io.print("# test_inner.in: test_inner.in: %s\n"); 	# 50  (_44:str)
#	io.print("# 8<----\n"); 	# 51  (_45:str)
#	io.print("setoid(oid(20000000));"); 	# 52  (_46:str)
    aa_a := calc.oid(20000000);	# 53 CALCint2oid (aa_a:oid)<-(_48:int)
    ba_a := calc.setoid(aa_a);	# 54 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	io.print("PROC test_inner(any in) : void {"); 	# 55  (_50:str)
#	io.print("PROC test_outer(any in) : void {"); 	# 56  (_51:str)
#	io.print("test_outer(\"chr\");"); 	# 57  (_52:str)
    ha_a := user.test_outer("chr");	# 58  (ha_a:void)<-(_54:str)
#	io.print("test_outer(\"chr\");"); 	# 59  (_52:str)
    ia_a := user.test_outer("chr");	# 60  (ia_a:void)<-(_54:str)
#	io.print("quit();"); 	# 61  (_56:str)
    ja_a := clients.quit();	# 62 CLTquitDefault (ja_a:void)
end main;	# 63  
test_outer.in: chr
test_inner.in: chr
test_outer.in: chr
test_inner.in: chr

# 07:27:16 >  
# 07:27:16 >  Done.
# 07:27:16 >  

