stdout of test 'no.161` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.161 milS
#> Mtest:	Mtimeout -timeout 900 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.161.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Sat Feb  5 04:39:19 MET 2000.
#script:no.161.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# >Number:         161
# >Category:       Mserver
# >Synopsis:       tostr problem when str module is loaded
# >Confidential:   no
# >Severity:       critical
# >Priority:       high
# >Responsible:    boncz (Peter Boncz)
# >State:          open
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Wed Jul 15 15:24:01 1998
# >Originator:     windhouw@cwi.nl
# >Organization:
# CWI
# >Release:        980101
# >Environment:
# 
# >Description:
# In the following script the string becomes different
# in the inner procedure (when the str module is loaded):
# 
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("# >Number:         161\n");
#	mil.line("# >Category:       Mserver\n");
#	mil.line("# >Synopsis:       tostr problem when str module is loaded\n");
#	mil.line("# >Confidential:   no\n");
#	mil.line("# >Severity:       critical\n");
#	mil.line("# >Priority:       high\n");
#	mil.line("# >Responsible:    boncz (Peter Boncz)\n");
#	mil.line("# >State:          open\n");
#	mil.line("# >Class:          sw-bug\n");
#	mil.line("# >Submitter-Id:   unknown\n");
#	mil.line("# >Arrival-Date:   Wed Jul 15 15:24:01 1998\n");
#	mil.line("# >Originator:     windhouw@cwi.nl\n");
#	mil.line("# >Organization:\n");
#	mil.line("# CWI\n");
#	mil.line("# >Release:        980101\n");
#	mil.line("# >Environment:\n");
#	mil.line("# \n");
#	mil.line("# >Description:\n");
#	mil.line("# In the following script the string becomes different\n");
#	mil.line("# in the inner procedure (when the str module is loaded):\n");
#	mil.line("# \n");
#	mil.line("# Script\n");
#	mil.line("# 8<-----\n");
#	mil.line("# PROC test_inner(any in) : void {\n");
#	mil.line("#    printf(\"test_inner.in: %s\\n\",str(in));\n");
#	mil.line("# }\n");
#	mil.line("#  \n");
#	mil.line("# PROC test_outer(any in) : void {\n");
#	mil.line("#    printf(\"test_outer.in: %s\\n\",str(in));\n");
#	mil.line("#    test_inner(in);\n");
#	mil.line("# }\n");
#	mil.line("# 8<-----\n");
#	mil.line("# Output\n");
#	mil.line("# 8<-----\n");
#	mil.line("# >test_outer(\"chr\");\n");
#	mil.line("# test_outer.in: chr\n");
#	mil.line("# test_inner.in: chr\n");
#	mil.line("# >module(str);\n");
#	mil.line("# >test_outer(\"chr\");\n");
#	mil.line("# test_outer.in: chr\n");
#	mil.line("# test_inner.in: test_inner.in: %s\n");
#	mil.line("# 8<----\n");
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("PROC test_inner(any in) : void {");
#function test_inner(in:any):void;
#	mil.line("   printf(\"test_inner.in: %s\\n\",str(in));");
#	ca_a := str(in);
#	da_a := printf("test_inner.in: %s\n",ca_a);
#end test_inner;
function user.test_inner(in:str):void;	# 0  (test_inner:void)<-(in:str)
    mil.line("   printf(\"test_inner.in: %s\\n\",str(in));");	# 1 MILline (_2:void)<-(_3:str)
    ca_a := calc.str(in);	# 2 CALCstr2str (ca_a:str)<-(in:str)
    da_a := io.printf("test_inner.in: %s\n",ca_a);	# 3 IOprint_formatted_str (da_a:int)<-(_6:str)(ca_a:str)
end test_inner;	# 4  
#	mil.line("PROC test_outer(any in) : void {");
#function test_outer(in:any):void;
#	mil.line("   printf(\"test_outer.in: %s\\n\",str(in));");
#	ea_a := str(in);
#	fa_a := printf("test_outer.in: %s\n",ea_a);
#	mil.line("   test_inner(in);");
#	ga_a := test_inner(in);
#end test_outer;
function user.test_outer(in:any_1):void;	# 0  (test_outer:void)<-(in:any_1)
    mil.line("   printf(\"test_outer.in: %s\\n\",str(in));");	# 1 MILline (_2:void)<-(_3:str)
    ea_a := calc.str(in);	# 2  (ea_a:any)<-(in:any_1)
    fa_a := io.printf("test_outer.in: %s\n",ea_a);	# 3  (fa_a:any)<-(_6:str)(ea_a:any)
    mil.line("   test_inner(in);");	# 4 MILline (_7:void)<-(_8:str)
    ga_a := user.test_inner(in);	# 5  (ga_a:any)<-(in:any_1)
end test_outer;	# 6  
#	mil.line("test_outer(\"chr\");");
#	ha_a := test_outer("chr");
#	mil.line("test_outer(\"chr\");");
#	ia_a := test_outer("chr");
#	mil.line("quit();");
#	ja_a := quit();
#  
function user.main():int;	# 0  (main:int)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  (_32:str)
#Predefined code segment 	# 2  (_34:str)
#The compiler can not guarantee an accurate compilation, 	# 3  (_36:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  (_38:str)
#A few guidelines to maximize usefullness. 	# 5  (_40:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  (_42:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  (_44:str)
#use the "mil_schema" for additional support routines 	# 8  (_46:str)
    mil.line("# >Number:         161\n");	# 9 MILline (_47:void)<-(_48:str)
    mil.line("# >Category:       Mserver\n");	# 10 MILline (_49:void)<-(_50:str)
    mil.line("# >Synopsis:       tostr problem when str module is loaded\n");	# 11 MILline (_51:void)<-(_52:str)
    mil.line("# >Confidential:   no\n");	# 12 MILline (_53:void)<-(_54:str)
    mil.line("# >Severity:       critical\n");	# 13 MILline (_55:void)<-(_56:str)
    mil.line("# >Priority:       high\n");	# 14 MILline (_57:void)<-(_58:str)
    mil.line("# >Responsible:    boncz (Peter Boncz)\n");	# 15 MILline (_59:void)<-(_60:str)
    mil.line("# >State:          open\n");	# 16 MILline (_61:void)<-(_62:str)
    mil.line("# >Class:          sw-bug\n");	# 17 MILline (_63:void)<-(_64:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 18 MILline (_65:void)<-(_66:str)
    mil.line("# >Arrival-Date:   Wed Jul 15 15:24:01 1998\n");	# 19 MILline (_67:void)<-(_68:str)
    mil.line("# >Originator:     windhouw@cwi.nl\n");	# 20 MILline (_69:void)<-(_70:str)
    mil.line("# >Organization:\n");	# 21 MILline (_71:void)<-(_72:str)
    mil.line("# CWI\n");	# 22 MILline (_73:void)<-(_74:str)
    mil.line("# >Release:        980101\n");	# 23 MILline (_75:void)<-(_76:str)
    mil.line("# >Environment:\n");	# 24 MILline (_77:void)<-(_78:str)
    mil.line("# \n");	# 25 MILline (_79:void)<-(_80:str)
    mil.line("# >Description:\n");	# 26 MILline (_81:void)<-(_82:str)
    mil.line("# In the following script the string becomes different\n");	# 27 MILline (_83:void)<-(_84:str)
    mil.line("# in the inner procedure (when the str module is loaded):\n");	# 28 MILline (_85:void)<-(_86:str)
    mil.line("# \n");	# 29 MILline (_87:void)<-(_80:str)
    mil.line("# Script\n");	# 30 MILline (_88:void)<-(_89:str)
    mil.line("# 8<-----\n");	# 31 MILline (_90:void)<-(_91:str)
    mil.line("# PROC test_inner(any in) : void {\n");	# 32 MILline (_92:void)<-(_93:str)
    mil.line("#    printf(\"test_inner.in: %s\\n\",str(in));\n");	# 33 MILline (_94:void)<-(_95:str)
    mil.line("# }\n");	# 34 MILline (_96:void)<-(_97:str)
    mil.line("#  \n");	# 35 MILline (_98:void)<-(_99:str)
    mil.line("# PROC test_outer(any in) : void {\n");	# 36 MILline (_100:void)<-(_101:str)
    mil.line("#    printf(\"test_outer.in: %s\\n\",str(in));\n");	# 37 MILline (_102:void)<-(_103:str)
    mil.line("#    test_inner(in);\n");	# 38 MILline (_104:void)<-(_105:str)
    mil.line("# }\n");	# 39 MILline (_106:void)<-(_97:str)
    mil.line("# 8<-----\n");	# 40 MILline (_107:void)<-(_91:str)
    mil.line("# Output\n");	# 41 MILline (_108:void)<-(_109:str)
    mil.line("# 8<-----\n");	# 42 MILline (_110:void)<-(_91:str)
    mil.line("# >test_outer(\"chr\");\n");	# 43 MILline (_111:void)<-(_112:str)
    mil.line("# test_outer.in: chr\n");	# 44 MILline (_113:void)<-(_114:str)
    mil.line("# test_inner.in: chr\n");	# 45 MILline (_115:void)<-(_116:str)
    mil.line("# >module(str);\n");	# 46 MILline (_117:void)<-(_118:str)
    mil.line("# >test_outer(\"chr\");\n");	# 47 MILline (_119:void)<-(_112:str)
    mil.line("# test_outer.in: chr\n");	# 48 MILline (_120:void)<-(_114:str)
    mil.line("# test_inner.in: test_inner.in: %s\n");	# 49 MILline (_121:void)<-(_122:str)
    mil.line("# 8<----\n");	# 50 MILline (_123:void)<-(_124:str)
    mil.line("setoid(oid(20000000));");	# 51 MILline (_125:void)<-(_126:str)
    aa_a := calc.oid(20000000);	# 52 CALCint2oid (aa_a:oid)<-(_128:int)
    ba_a := calc.setoid(aa_a);	# 53 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("PROC test_inner(any in) : void {");	# 54 MILline (_130:void)<-(_131:str)
    mil.line("PROC test_outer(any in) : void {");	# 55 MILline (_132:void)<-(_133:str)
    mil.line("test_outer(\"chr\");");	# 56 MILline (_134:void)<-(_135:str)
    ha_a := user.test_outer("chr");	# 57  (ha_a:void)<-(_137:str)
    mil.line("test_outer(\"chr\");");	# 58 MILline (_138:void)<-(_135:str)
    ia_a := user.test_outer("chr");	# 59  (ia_a:void)<-(_137:str)
    mil.line("quit();");	# 60 MILline (_140:void)<-(_141:str)
    ja_a := clients.quit();	# 61 CLTquit (ja_a:void)
end main;	# 62  
## >Number:         161\n
## >Category:       Mserver\n
## >Synopsis:       tostr problem when str module is loaded\n
## >Confidential:   no\n
## >Severity:       critical\n
## >Priority:       high\n
## >Responsible:    boncz (Peter Boncz)\n
## >State:          open\n
## >Class:          sw-bug\n
## >Submitter-Id:   unknown\n
## >Arrival-Date:   Wed Jul 15 15:24:01 1998\n
## >Originator:     windhouw@cwi.nl\n
## >Organization:\n
## CWI\n
## >Release:        980101\n
## >Environment:\n
## \n
## >Description:\n
## In the following script the string becomes different\n
## in the inner procedure (when the str module is loaded):\n
## \n
## Script\n
## 8<-----\n
## PROC test_inner(any in) : void {\n
##    printf(\"test_inner.in: %s\\n\",str(in));\n
## }\n
##  \n
## PROC test_outer(any in) : void {\n
##    printf(\"test_outer.in: %s\\n\",str(in));\n
##    test_inner(in);\n
## }\n
## 8<-----\n
## Output\n
## 8<-----\n
## >test_outer(\"chr\");\n
## test_outer.in: chr\n
## test_inner.in: chr\n
## >module(str);\n
## >test_outer(\"chr\");\n
## test_outer.in: chr\n
## test_inner.in: test_inner.in: %s\n
## 8<----\n
#setoid(oid(20000000));
#PROC test_inner(any in) : void {
#PROC test_outer(any in) : void {
#test_outer(\"chr\");
#   printf(\"test_outer.in: %s\\n\",str(in));
test_outer.in: chr
#   test_inner(in);
#   printf(\"test_inner.in: %s\\n\",str(in));
test_inner.in: chr
#test_outer(\"chr\");
#   printf(\"test_outer.in: %s\\n\",str(in));
test_outer.in: chr
#   test_inner(in);
#   printf(\"test_inner.in: %s\\n\",str(in));
test_inner.in: chr
#quit();

# 21:16:01 >  
# 21:16:01 >  Done.
# 21:16:01 >  

