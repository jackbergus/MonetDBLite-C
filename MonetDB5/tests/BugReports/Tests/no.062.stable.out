stdout of test 'no.062` in directory 'tests/BugReports` itself:


# 07:27:15 >  
# 07:27:15 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.062.mal < /dev/null
# 07:27:15 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# >Number:         62\n");
##	mil.line("# >Category:       MIL\n");
##	mil.line("# >Synopsis:       Handling of nested arithmetic expressions is inconsistent\n");
##	mil.line("# >Confidential:   no\n");
##	mil.line("# >Severity:       critical\n");
##	mil.line("# >Priority:       high\n");
##	mil.line("# >Responsible:    mk\n");
##	mil.line("# >State:          feedback\n");
##	mil.line("# >Class:          sw-bug\n");
##	mil.line("# >Submitter-Id:   unknown\n");
##	mil.line("# >Arrival-Date:   Fri Oct 24 14:09:23 1997\n");
##	mil.line("# >Originator:     mk\n");
##	mil.line("# >Organization:\n");
##	mil.line("# >Release:        971007\n");
##	mil.line("# >Environment:\n");
##	mil.line("# \n");
##	mil.line("# >Description:\n");
##	mil.line("# Handlin>t:= bat.new(int,int);\n");
##	mil.line("# >t.insert(0,0);\n");
##	mil.line("# >t.insert(1+1,0);\n");
##	mil.line("# >t.insert(-1,-0);\n");
##	mil.line("# >print(t);\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# # int   | tmp_32  #\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# [ 0,      0       ]\n");
##	mil.line("# [ 2,      0       ]\n");
##	mil.line("# [ -1,     0       ]\n");
##	mil.line("# ># alles zover is goed\n");
##	mil.line("# >t.insert(-1+1,0);\n");
##	mil.line("# >t.insert(-1 - 1,0);\n");
##	mil.line("# !ERROR: in syntax at \"t.insert(-1 - 1,0);\"\n");
##	mil.line("# !                                      ^\n");
##	mil.line("# >t.insert(-1 -1, 0);\n");
##	mil.line("# !ERROR: in syntax at \"t.insert(-1 -1, 0);\"\n");
##	mil.line("# !                                        ^\n");
##	mil.line("# >#not what is expected from nested expression\n");
##	mil.line("# >t.print;\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# # int   | tmp_32  #\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# [ 0,      0       ]\n");
##	mil.line("# [ 2,      0       ]\n");
##	mil.line("# [ -1,     0       ]\n");
##	mil.line("# [ 0,      0       ]\n");
##	mil.line("# >t.insert(0-1+ -1, 0);\n");
##	mil.line("# !ERROR: in syntax at \"t.insert(0-1+ -1, 0);\"\n");
##	mil.line("# \n");
##	mil.line("# This is not what a user would expect\n");
##	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
##	mil.line("var t:= bat.new(int,int);");
#	t := bat.new(nil:int,nil:int);
##	mil.line("t.insert(0,0);");
#	ca_a := bat.insert(t,0,0);
##	mil.line("t.insert(1+1,0);");
#	da_a := calc.+(1,1);
#	ea_a := bat.insert(t,da_a,0);
##	mil.line("t.insert(-1,-0);");
#	fa_a := bat.insert(t,-1,-0);
##	mil.line("t.insert(0,0);");
#	ga_a := bat.insert(t,0,0);
##	mil.line("t.insert(-1+1,0);");
#	ha_a := calc.+(-1,1);
#	ia_a := bat.insert(t,ha_a,0);
##	mil.line("print(t);");
#	ja_a := io.print(t);
##	mil.line("# alles zover is goed\n");
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
#include mil; 	# 2  (_2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 3  (_3:str)
#Predefined code segment 	# 4  (_4:str)
#The compiler can not guarantee an accurate compilation, 	# 5  (_5:str)
#because MIL unlike MAL is a dynamically typed language. 	# 6  (_6:str)
#A few guidelines to maximize usefullness. 	# 7  (_7:str)
#- make the type of variables explicit, in particular 'nil' 	# 8  (_8:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 9  (_9:str)
#use the "mil_schema" for additional support routines 	# 10  (_10:str)
#	mil.line("# >Number:         62\n"); 	# 11  (_11:str)
#	mil.line("# >Category:       MIL\n"); 	# 12  (_12:str)
#	mil.line("# >Synopsis:       Handling of nested arithmetic expressions is inconsistent\n"); 	# 13  (_13:str)
#	mil.line("# >Confidential:   no\n"); 	# 14  (_14:str)
#	mil.line("# >Severity:       critical\n"); 	# 15  (_15:str)
#	mil.line("# >Priority:       high\n"); 	# 16  (_16:str)
#	mil.line("# >Responsible:    mk\n"); 	# 17  (_17:str)
#	mil.line("# >State:          feedback\n"); 	# 18  (_18:str)
#	mil.line("# >Class:          sw-bug\n"); 	# 19  (_19:str)
#	mil.line("# >Submitter-Id:   unknown\n"); 	# 20  (_20:str)
#	mil.line("# >Arrival-Date:   Fri Oct 24 14:09:23 1997\n"); 	# 21  (_21:str)
#	mil.line("# >Originator:     mk\n"); 	# 22  (_22:str)
#	mil.line("# >Organization:\n"); 	# 23  (_23:str)
#	mil.line("# >Release:        971007\n"); 	# 24  (_24:str)
#	mil.line("# >Environment:\n"); 	# 25  (_25:str)
#	mil.line("# \n"); 	# 26  (_26:str)
#	mil.line("# >Description:\n"); 	# 27  (_27:str)
#	mil.line("# Handlin>t:= bat.new(int,int);\n"); 	# 28  (_28:str)
#	mil.line("# >t.insert(0,0);\n"); 	# 29  (_29:str)
#	mil.line("# >t.insert(1+1,0);\n"); 	# 30  (_30:str)
#	mil.line("# >t.insert(-1,-0);\n"); 	# 31  (_31:str)
#	mil.line("# >print(t);\n"); 	# 32  (_32:str)
#	mil.line("# #-----------------#\n"); 	# 33  (_33:str)
#	mil.line("# # int   | tmp_32  #\n"); 	# 34  (_34:str)
#	mil.line("# #-----------------#\n"); 	# 35  (_33:str)
#	mil.line("# [ 0,      0       ]\n"); 	# 36  (_35:str)
#	mil.line("# [ 2,      0       ]\n"); 	# 37  (_36:str)
#	mil.line("# [ -1,     0       ]\n"); 	# 38  (_37:str)
#	mil.line("# ># alles zover is goed\n"); 	# 39  (_38:str)
#	mil.line("# >t.insert(-1+1,0);\n"); 	# 40  (_39:str)
#	mil.line("# >t.insert(-1 - 1,0);\n"); 	# 41  (_40:str)
#	mil.line("# !ERROR: in syntax at \"t.insert(-1 - 1,0);\"\n"); 	# 42  (_41:str)
#	mil.line("# !                                      ^\n"); 	# 43  (_42:str)
#	mil.line("# >t.insert(-1 -1, 0);\n"); 	# 44  (_43:str)
#	mil.line("# !ERROR: in syntax at \"t.insert(-1 -1, 0);\"\n"); 	# 45  (_44:str)
#	mil.line("# !                                        ^\n"); 	# 46  (_45:str)
#	mil.line("# >#not what is expected from nested expression\n"); 	# 47  (_46:str)
#	mil.line("# >t.print;\n"); 	# 48  (_47:str)
#	mil.line("# #-----------------#\n"); 	# 49  (_33:str)
#	mil.line("# # int   | tmp_32  #\n"); 	# 50  (_34:str)
#	mil.line("# #-----------------#\n"); 	# 51  (_33:str)
#	mil.line("# [ 0,      0       ]\n"); 	# 52  (_35:str)
#	mil.line("# [ 2,      0       ]\n"); 	# 53  (_36:str)
#	mil.line("# [ -1,     0       ]\n"); 	# 54  (_37:str)
#	mil.line("# [ 0,      0       ]\n"); 	# 55  (_35:str)
#	mil.line("# >t.insert(0-1+ -1, 0);\n"); 	# 56  (_48:str)
#	mil.line("# !ERROR: in syntax at \"t.insert(0-1+ -1, 0);\"\n"); 	# 57  (_49:str)
#	mil.line("# \n"); 	# 58  (_26:str)
#	mil.line("# This is not what a user would expect\n"); 	# 59  (_50:str)
#	mil.line("setoid(oid(20000000));"); 	# 60  (_51:str)
    aa_a := calc.oid(20000000);	# 61 CALCint2oid (aa_a:oid)<-(_53:int)
    ba_a := calc.setoid(aa_a);	# 62 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	mil.line("var t:= bat.new(int,int);"); 	# 63  (_55:str)
    t := bat.new(nil:int,nil:int);	# 64 CMDBATnew (t:bat[:int,:int])<-(_57:int)(_57:int)
#	mil.line("t.insert(0,0);"); 	# 65  (_58:str)
    ca_a := bat.insert(t,0,0);	# 66 BKCinsert_bun (ca_a:void)<-(t:bat[:int,:int])(_60:int)(_60:int)
#	mil.line("t.insert(1+1,0);"); 	# 67  (_61:str)
    da_a := calc.+(1,1);	# 68 CALCbinaryADDintint (da_a:int)<-(_63:int)(_63:int)
    ea_a := bat.insert(t,da_a,0);	# 69 BKCinsert_bun (ea_a:void)<-(t:bat[:int,:int])(da_a:int)(_60:int)
#	mil.line("t.insert(-1,-0);"); 	# 70  (_65:str)
    fa_a := bat.insert(t,-1,0);	# 71 BKCinsert_bun (fa_a:void)<-(t:bat[:int,:int])(_67:int)(_60:int)
#	mil.line("t.insert(0,0);"); 	# 72  (_58:str)
    ga_a := bat.insert(t,0,0);	# 73 BKCinsert_bun (ga_a:void)<-(t:bat[:int,:int])(_60:int)(_60:int)
#	mil.line("t.insert(-1+1,0);"); 	# 74  (_69:str)
    ha_a := calc.+(-1,1);	# 75 CALCbinaryADDintint (ha_a:int)<-(_67:int)(_63:int)
    ia_a := bat.insert(t,ha_a,0);	# 76 BKCinsert_bun (ia_a:void)<-(t:bat[:int,:int])(ha_a:int)(_60:int)
#	mil.line("print(t);"); 	# 77  (_72:str)
    ja_a := io.print(t);	# 78 IOprint_val (ja_a:int)<-(t:bat[:int,:int])
#	mil.line("# alles zover is goed\n"); 	# 79  (_74:str)
end main;	# 80  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 0,	  0	  ]
[ 2,	  0	  ]
[ -1,	  0	  ]
[ 0,	  0	  ]
[ 0,	  0	  ]

# 07:27:15 >  
# 07:27:15 >  Done.
# 07:27:15 >  

