stdout of test 'no.051` in directory 'tests/BugReports` itself:


# 07:27:15 >  
# 07:27:15 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.051.mal < /dev/null
# 07:27:15 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# >Number:         51\n");
##	mil.line("# >Category:       MIL\n");
##	mil.line("# >Synopsis:       returns from within a batloop\n");
##	mil.line("# >Confidential:   no\n");
##	mil.line("# >Severity:       serious\n");
##	mil.line("# >Priority:       medium\n");
##	mil.line("# >Responsible:    boncz\n");
##	mil.line("# >State:          closed\n");
##	mil.line("# >Class:          sw-bug\n");
##	mil.line("# >Submitter-Id:   unknown\n");
##	mil.line("# >Arrival-Date:   Wed Oct 15 13:50:27 1997\n");
##	mil.line("# >Originator:     niels\n");
##	mil.line("# >Organization:\n");
##	mil.line("# >Release:        971007\n");
##	mil.line("# >Environment:\n");
##	mil.line("# SOLARIS 2.5.1\n");
##	mil.line("# >Description:\n");
##	mil.line("# When a bat is returned from with a batloop the return value\n");
##	mil.line("# is incorrect. \n");
##	mil.line("# proc create(b) : bat {\n");
##	mil.line("#         var a := new (oid,flt);\n");
##	mil.line("#         b@batloop(){\n");
##	mil.line("#                 if (a.count = 0)\n");
##	mil.line("#                         return a;\n");
##	mil.line("#         }\n");
##	mil.line("#         return a;\n");
##	mil.line("# }\n");
##	mil.line("# \n");
##	mil.line("# b := new (oid,flt);\n");
##	mil.line("# b.insert(oid(1),flt(2));\n");
##	mil.line("# var c := create(b);\n");
##	mil.line("# b.semijoin(c).print;\n");
##	mil.line("# #output\n");
##	mil.line("# !WARNING: BATdescriptor: range error\n");
##	mil.line("# !ERROR: interpret command/proc: 2nd param: invalid BAT.\n");
##	mil.line("# [ nil ]\n");
##	mil.line("proc create(bat b) : bat {");
#function create(b:bat[:any_1,:any_2]):bat[:any_1,:any_2];
##	mil.line("        var a := new (oid,flt);");
#	a := bat.new(nil:oid,nil:flt);
##	mil.line("        b@batloop(){");
#barrier	(aa_a,aa_aH,aa_aT) := chopper.newIterator(b);
##	mil.line("                if (a.count() = 0)");
#	ba_a := aggr.count(a);
#barrier	ca_a := calc.==(ba_a,0);
##	mil.line("                        return a;");
#	return da_a :=a;
##	mil.line("        }");
#exit	ca_a;
#redo	(aa_a,aa_aH,aa_aT) := chopper.hasMoreElements(b);
#exit	(aa_a,aa_aH,aa_aT) ;
##	mil.line("        return a;");
#	return ea_a :=a;
#end create;
function user.create(b:bat[:any_1,:any_2]):bat[:any_1,:any_2];	# 0  dynamic (create:bat[:any_1,:any_2])<-(b:bat[:any_1,:any_2])
#	mil.line("        var a := new (oid,flt);"); 	# 1  (_2:str)
    a := bat.new(nil:oid,nil:flt);	# 2 CMDBATnew (a:bat[:oid,:flt])<-(_4:oid)(_5:flt)
#	mil.line("        b@batloop(){"); 	# 3  (_6:str)
barrier (aa_a,aa_aH,aa_aT):= bat.newIterator(b);	# 4 CHPbunIterator (aa_a:lng)(aa_aH:oid)(aa_aT:any)<-(b:bat[:any_1,:any_2]) jump 13
#	mil.line("                if (a.count() = 0)"); 	# 5  (_10:str)
    ba_a := aggr.count(a);	# 6 ALGcount_bat (ba_a:int)<-(a:bat[:oid,:flt])
barrier ca_a := calc.==(ba_a,0);	# 7 CALCcompEQintint (ca_a:bit)<-(ba_a:int)(_13:int) jump 11
#	mil.line("                        return a;"); 	# 8  (_14:str)
    return da_a := a;	# 9  (da_a:bat[:oid,:flt])<-(a:bat[:oid,:flt])
#	mil.line("        }"); 	# 10  (_16:str)
exit ca_a;	# 11  (ca_a:bit)
    redo (aa_a,aa_aH,aa_aT):= bat.hasMoreElements(b);	# 12 CHPbunHasMoreElements (aa_a:lng)(aa_aH:oid)(aa_aT:any)<-(b:bat[:any_1,:any_2]) jump 5
exit (aa_a,aa_aH,aa_aT);	# 13  (aa_a:lng)(aa_aH:oid)(aa_aT:any)
#	mil.line("        return a;"); 	# 14  (_17:str)
    return ea_a := a;	# 15  (ea_a:bat[:oid,:flt])<-(a:bat[:oid,:flt])
end create;	# 16  
##	mil.line("var b := new (oid,flt);");
#	b := bat.new(nil:oid,nil:flt);
##	mil.line("b.insert(oid(1),flt(2));");
#	fa_a := calc.oid(1);
#	ga_a := calc.flt(2);
#	ha_a := bat.insert(b,fa_a,ga_a);
##	mil.line("b.print();");
#	ia_a := io.print(b);
##	mil.line("var c := create(b);");
#	c := user.create(b);
##	mil.line("b.print();");
#	ja_a := io.print(b);
##	mil.line("c.print();");
#	ka_a := io.print(c);
##	mil.line("b.semijoin(c).print();");
#	la_a := algebra.semijoin(b,c);
#	ma_a := io.print(la_a);
##	mil.line("quit();");
#	na_a := clients.quit();
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
#include mil; 	# 2  (_2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 3  (_3:str)
#Predefined code segment 	# 4  (_4:str)
#The compiler can not guarantee an accurate compilation, 	# 5  (_5:str)
#because MIL unlike MAL is a dynamically typed language. 	# 6  (_6:str)
#A few guidelines to maximize usefullness. 	# 7  (_7:str)
#- make the type of variables explicit, in particular 'nil' 	# 8  (_8:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 9  (_9:str)
#use the "mil_schema" for additional support routines 	# 10  (_10:str)
#	mil.line("# >Number:         51\n"); 	# 11  (_11:str)
#	mil.line("# >Category:       MIL\n"); 	# 12  (_12:str)
#	mil.line("# >Synopsis:       returns from within a batloop\n"); 	# 13  (_13:str)
#	mil.line("# >Confidential:   no\n"); 	# 14  (_14:str)
#	mil.line("# >Severity:       serious\n"); 	# 15  (_15:str)
#	mil.line("# >Priority:       medium\n"); 	# 16  (_16:str)
#	mil.line("# >Responsible:    boncz\n"); 	# 17  (_17:str)
#	mil.line("# >State:          closed\n"); 	# 18  (_18:str)
#	mil.line("# >Class:          sw-bug\n"); 	# 19  (_19:str)
#	mil.line("# >Submitter-Id:   unknown\n"); 	# 20  (_20:str)
#	mil.line("# >Arrival-Date:   Wed Oct 15 13:50:27 1997\n"); 	# 21  (_21:str)
#	mil.line("# >Originator:     niels\n"); 	# 22  (_22:str)
#	mil.line("# >Organization:\n"); 	# 23  (_23:str)
#	mil.line("# >Release:        971007\n"); 	# 24  (_24:str)
#	mil.line("# >Environment:\n"); 	# 25  (_25:str)
#	mil.line("# SOLARIS 2.5.1\n"); 	# 26  (_26:str)
#	mil.line("# >Description:\n"); 	# 27  (_27:str)
#	mil.line("# When a bat is returned from with a batloop the return value\n"); 	# 28  (_28:str)
#	mil.line("# is incorrect. \n"); 	# 29  (_29:str)
#	mil.line("# proc create(b) : bat {\n"); 	# 30  (_30:str)
#	mil.line("#         var a := new (oid,flt);\n"); 	# 31  (_31:str)
#	mil.line("#         b@batloop(){\n"); 	# 32  (_32:str)
#	mil.line("#                 if (a.count = 0)\n"); 	# 33  (_33:str)
#	mil.line("#                         return a;\n"); 	# 34  (_34:str)
#	mil.line("#         }\n"); 	# 35  (_35:str)
#	mil.line("#         return a;\n"); 	# 36  (_36:str)
#	mil.line("# }\n"); 	# 37  (_37:str)
#	mil.line("# \n"); 	# 38  (_38:str)
#	mil.line("# b := new (oid,flt);\n"); 	# 39  (_39:str)
#	mil.line("# b.insert(oid(1),flt(2));\n"); 	# 40  (_40:str)
#	mil.line("# var c := create(b);\n"); 	# 41  (_41:str)
#	mil.line("# b.semijoin(c).print;\n"); 	# 42  (_42:str)
#	mil.line("# #output\n"); 	# 43  (_43:str)
#	mil.line("# !WARNING: BATdescriptor: range error\n"); 	# 44  (_44:str)
#	mil.line("# !ERROR: interpret command/proc: 2nd param: invalid BAT.\n"); 	# 45  (_45:str)
#	mil.line("# [ nil ]\n"); 	# 46  (_46:str)
#	mil.line("proc create(bat b) : bat {"); 	# 47  (_47:str)
#	mil.line("var b := new (oid,flt);"); 	# 48  (_48:str)
    b := bat.new(nil:oid,nil:flt);	# 49 CMDBATnew (b:bat[:oid,:flt])<-(_50:oid)(_51:flt)
#	mil.line("b.insert(oid(1),flt(2));"); 	# 50  (_52:str)
    fa_a := calc.oid(1);	# 51 CALCint2oid (fa_a:oid)<-(_54:int)
    ga_a := calc.flt(2);	# 52 CALCint2flt (ga_a:flt)<-(_56:int)
    ha_a := bat.insert(b,fa_a,ga_a);	# 53 BKCinsert_bun (ha_a:void)<-(b:bat[:oid,:flt])(fa_a:oid)(ga_a:flt)
#	mil.line("b.print();"); 	# 54  (_58:str)
    ia_a := io.print(b);	# 55 IOprint_val (ia_a:int)<-(b:bat[:oid,:flt])
#	mil.line("var c := create(b);"); 	# 56  (_60:str)
    c := user.create(b);	# 57  (c:bat[:oid,:flt])<-(b:bat[:oid,:flt])
#	mil.line("b.print();"); 	# 58  (_58:str)
    ja_a := io.print(b);	# 59 IOprint_val (ja_a:int)<-(b:bat[:oid,:flt])
#	mil.line("c.print();"); 	# 60  (_63:str)
    ka_a := io.print(c);	# 61 IOprint_val (ka_a:int)<-(c:bat[:oid,:flt])
#	mil.line("b.semijoin(c).print();"); 	# 62  (_65:str)
    la_a := algebra.semijoin(b,c);	# 63 ALGsemijoin (la_a:bat[:oid,:flt])<-(b:bat[:oid,:flt])(c:bat[:oid,:flt])
    ma_a := io.print(la_a);	# 64 IOprint_val (ma_a:int)<-(la_a:bat[:oid,:flt])
#	mil.line("quit();"); 	# 65  (_68:str)
    na_a := clients.quit();	# 66 CLTquitDefault (na_a:void)
end main;	# 67  
#-----------------#
# h	t	  # name
# oid	flt	  # type
#-----------------#
[ 1@0,	  2	  ]
#-----------------#
# h	t	  # name
# oid	flt	  # type
#-----------------#
[ 1@0,	  2	  ]
#-----------------#
# h	t	  # name
# oid	flt	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	flt	  # type
#-----------------#

# 07:27:15 >  
# 07:27:15 >  Done.
# 07:27:15 >  

