stdout of test 'no.051` in directory 'tests/BugReports` itself:


# 07:27:15 >  
# 07:27:15 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.051.mal < /dev/null
# 07:27:15 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# >Number:         51\n");
##	mil.line("# >Category:       MIL\n");
##	mil.line("# >Synopsis:       returns from within a batloop\n");
##	mil.line("# >Confidential:   no\n");
##	mil.line("# >Severity:       serious\n");
##	mil.line("# >Priority:       medium\n");
##	mil.line("# >Responsible:    boncz\n");
##	mil.line("# >State:          closed\n");
##	mil.line("# >Class:          sw-bug\n");
##	mil.line("# >Submitter-Id:   unknown\n");
##	mil.line("# >Arrival-Date:   Wed Oct 15 13:50:27 1997\n");
##	mil.line("# >Originator:     niels\n");
##	mil.line("# >Organization:\n");
##	mil.line("# >Release:        971007\n");
##	mil.line("# >Environment:\n");
##	mil.line("# SOLARIS 2.5.1\n");
##	mil.line("# >Description:\n");
##	mil.line("# When a bat is returned from with a batloop the return value\n");
##	mil.line("# is incorrect. \n");
##	mil.line("# proc create(b) : bat {\n");
##	mil.line("#         var a := new (oid,flt);\n");
##	mil.line("#         b@batloop(){\n");
##	mil.line("#                 if (a.count = 0)\n");
##	mil.line("#                         return a;\n");
##	mil.line("#         }\n");
##	mil.line("#         return a;\n");
##	mil.line("# }\n");
##	mil.line("# \n");
##	mil.line("# b := new (oid,flt);\n");
##	mil.line("# b.insert(oid(1),flt(2));\n");
##	mil.line("# var c := create(b);\n");
##	mil.line("# b.semijoin(c).print;\n");
##	mil.line("# #output\n");
##	mil.line("# !WARNING: BATdescriptor: range error\n");
##	mil.line("# !ERROR: interpret command/proc: 2nd param: invalid BAT.\n");
##	mil.line("# [ nil ]\n");
##	mil.line("proc create(bat b) : bat {");
#function create(b:bat[:any_1,:any_2]):bat[:any_1,:any_2];
##	mil.line("        var a := new (oid,flt);");
#	a := bat.new(nil:oid,nil:flt);
##	mil.line("        b@batloop(){");
#barrier	(aa_a,aa_aH,aa_aT) := chopper.newIterator(b);
##	mil.line("                if (a.count() = 0)");
#	ba_a := aggr.count(a);
#barrier	ca_a := calc.==(ba_a,0);
##	mil.line("                        return a;");
#	return da_a :=a;
##	mil.line("        }");
#exit	ca_a;
#redo	(aa_a,aa_aH,aa_aT) := chopper.hasMoreElements(b);
#exit	(aa_a,aa_aH,aa_aT) ;
##	mil.line("        return a;");
#	return ea_a :=a;
#end create;
function user.create(b:bat[:any_1,:any_2]):bat[:any_1,:any_2];#  0 create:bat[:any_1,:any_2] := user.create(b:bat[:any_1,:any_2]) {UPG}
#	io.print("        var a := new (oid,flt);"); 
    a := bat.new(nil:oid,nil:flt);      #  2 a:bat[:oid,:flt] := CMDBATnew(_4:oid, _5:flt) {G}
#	io.print("        b@batloop(){"); 
barrier (aa_a,aa_aH,aa_aT):= bat.newIterator(b);#  4 (aa_a:lng, aa_aH:any, aa_aT:any) := CHPbunIterator(b:bat[:any_1,:any_2]) {PJ13}
#	io.print("                if (a.count() = 0)"); 
    ba_a := aggr.count(a);              #  6 ba_a:int := ALGcount_bat(a:bat[:oid,:flt]) 
barrier ca_a := calc.==(ba_a,0);        #  7 ca_a:bit := CALCcompEQintint(ba_a:int, _13:int) {J11}
#	io.print("                        return a;"); 
    return da_a := a;                   #  9 da_a:bat[:oid,:flt] := a:bat[:oid,:flt] {G}
#	io.print("        }"); 
exit ca_a;                              # 11 ca_a:bit 
    redo (aa_a,aa_aH,aa_aT):= bat.hasMoreElements(b);# 12 (aa_a:lng, aa_aH:any, aa_aT:any) := CHPbunHasMoreElements(b:bat[:any_1,:any_2]) {PJ5}
exit (aa_a,aa_aH,aa_aT);                # 13 (aa_a:lng, aa_aH:any, aa_aT:any) 
#	io.print("        return a;"); 
    return ea_a := a;                   # 15 ea_a:bat[:oid,:flt] := a:bat[:oid,:flt] {G}
end create;	# 16  
##	mil.line("var b := new (oid,flt);");
#	b := bat.new(nil:oid,nil:flt);
##	mil.line("b.insert(oid(1),flt(2));");
#	fa_a := calc.oid(1);
#	ga_a := calc.flt(2);
#	ha_a := bat.insert(b,fa_a,ga_a);
##	mil.line("b.print();");
#	ia_a := io.print(b);
##	mil.line("var c := create(b);");
#	c := user.create(b);
##	mil.line("b.print();");
#	ja_a := io.print(b);
##	mil.line("c.print();");
#	ka_a := io.print(c);
##	mil.line("b.semijoin(c).print();");
#	la_a := algebra.semijoin(b,c);
#	ma_a := io.print(la_a);
##	mil.line("quit();");
#	na_a := clients.quit();
#
function user.main():void;              #  0 main:void := user.main() {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("# >Number:         51\n"); 
#	io.print("# >Category:       MIL\n"); 
#	io.print("# >Synopsis:       returns from within a batloop\n"); 
#	io.print("# >Confidential:   no\n"); 
#	io.print("# >Severity:       serious\n"); 
#	io.print("# >Priority:       medium\n"); 
#	io.print("# >Responsible:    boncz\n"); 
#	io.print("# >State:          closed\n"); 
#	io.print("# >Class:          sw-bug\n"); 
#	io.print("# >Submitter-Id:   unknown\n"); 
#	io.print("# >Arrival-Date:   Wed Oct 15 13:50:27 1997\n"); 
#	io.print("# >Originator:     niels\n"); 
#	io.print("# >Organization:\n"); 
#	io.print("# >Release:        971007\n"); 
#	io.print("# >Environment:\n"); 
#	io.print("# SOLARIS 2.5.1\n"); 
#	io.print("# >Description:\n"); 
#	io.print("# When a bat is returned from with a batloop the return value\n"); 
#	io.print("# is incorrect. \n"); 
#	io.print("# proc create(b) : bat {\n"); 
#	io.print("#         var a := new (oid,flt);\n"); 
#	io.print("#         b@batloop(){\n"); 
#	io.print("#                 if (a.count = 0)\n"); 
#	io.print("#                         return a;\n"); 
#	io.print("#         }\n"); 
#	io.print("#         return a;\n"); 
#	io.print("# }\n"); 
#	io.print("# \n"); 
#	io.print("# b := new (oid,flt);\n"); 
#	io.print("# b.insert(oid(1),flt(2));\n"); 
#	io.print("# var c := create(b);\n"); 
#	io.print("# b.semijoin(c).print;\n"); 
#	io.print("# #output\n"); 
#	io.print("# !WARNING: BATdescriptor: range error\n"); 
#	io.print("# !ERROR: interpret command/proc: 2nd param: invalid BAT.\n"); 
#	io.print("# [ nil ]\n"); 
#	io.print("proc create(bat b) : bat {"); 
#	io.print("var b := new (oid,flt);"); 
    b := bat.new(nil:oid,nil:flt);      # 48 b:bat[:oid,:flt] := CMDBATnew(_49:oid, _50:flt) {G}
#	io.print("b.insert(oid(1),flt(2));"); 
    fa_a := calc.oid(1);                # 50 fa_a:oid := CALCint2oid(_53:int) 
    ga_a := calc.flt(2);                # 51 ga_a:flt := CALCint2flt(_55:int) 
    ha_a := bat.insert(b,fa_a,ga_a);    # 52 ha_a:void := BKCinsert_bun(b:bat[:oid,:flt], fa_a:oid, ga_a:flt) 
#	io.print("b.print();"); 
    ia_a := io.print(b);                # 54 ia_a:void := IOprint_val(b:bat[:oid,:flt]) 
#	io.print("var c := create(b);"); 
    c := user.create(b);                # 56 c:bat[:oid,:flt] := user.create(b:bat[:oid,:flt]) {G}
#	io.print("b.print();"); 
    ja_a := io.print(b);                # 58 ja_a:void := IOprint_val(b:bat[:oid,:flt]) 
#	io.print("c.print();"); 
    ka_a := io.print(c);                # 60 ka_a:void := IOprint_val(c:bat[:oid,:flt]) 
#	io.print("b.semijoin(c).print();"); 
    la_a := algebra.semijoin(b,c);      # 62 la_a:bat[:oid,:flt] := ALGsemijoin(b:bat[:oid,:flt], c:bat[:oid,:flt]) {G}
    ma_a := io.print(la_a);             # 63 ma_a:void := IOprint_val(la_a:bat[:oid,:flt]) 
#	io.print("quit();"); 
    na_a := clients.quit();             # 65 na_a:void := CLTquit() 
end main;	# 66  
#-----------------#
# h	t	  # name
# oid	flt	  # type
#-----------------#
[ 1@0,	  2	  ]
#-----------------#
# h	t	  # name
# oid	flt	  # type
#-----------------#
[ 1@0,	  2	  ]
#-----------------#
# h	t	  # name
# oid	flt	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	flt	  # type
#-----------------#

# 07:27:15 >  
# 07:27:15 >  Done.
# 07:27:15 >  

