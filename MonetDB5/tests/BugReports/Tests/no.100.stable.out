stdout of test 'no.100` in directory 'tests/BugReports` itself:


# 07:27:15 >  
# 07:27:15 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.100.mal < /dev/null
# 07:27:15 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# >Number:         100\n");
##	mil.line("# >Category:       MIL\n");
##	mil.line("# >Synopsis:       Virtual oids behave in a strange way.\n");
##	mil.line("# >Confidential:   no\n");
##	mil.line("# >Severity:       serious\n");
##	mil.line("# >Priority:       medium\n");
##	mil.line("# >Responsible:    boncz\n");
##	mil.line("# >State:          open\n");
##	mil.line("# >Class:          sw-bug\n");
##	mil.line("# >Submitter-Id:   unknown\n");
##	mil.line("# >Arrival-Date:   Mon Dec 15 11:47:39 1997\n");
##	mil.line("# >Originator:     quak\n");
##	mil.line("# >Organization:\n");
##	mil.line("# UvA\n");
##	mil.line("# >Release:        971007\n");
##	mil.line("# >Environment:\n");
##	mil.line("# all\n");
##	mil.line("# >Description:\n");
##	mil.line("# Try this out:\n");
##	mil.line("# > a := bat.new(int,str);\n");
##	mil.line("# > a.insert(1,\"hello world\");\n");
##	mil.line("# > a.seqbase(100@0);\n");
##	mil.line("# > [oid]([a~]).reverse.print();\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# # oid   | tmp_92  #\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# [ 100@0,  1       ]\n");
##	mil.line("# > [oid]([a~]).reverse.copy.print();\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# # oid   | tmp_93  #\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# [ 1@0,    100     ]\n");
##	mil.line("# \n");
##	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
##	mil.line("var a := bat.new(int,str);");
#	a := bat.new(nil:int,nil:str);
##	mil.line("a.insert(1,\"hello world\");");
#	ca_a := bat.insert(a,1,"hello world");
##	mil.line("a.print();");
#	da_a := io.print(a);
##	mil.line("a.mark(nil).print();");
#	ea_a := algebra.markT(a);
#	fa_a := io.print(ea_a);
##	mil.line("a.mark(nil).reverse().print();");
#	ga_a := algebra.markT(a);
#	ha_a := bat.reverse(ga_a);
#	ia_a := io.print(ha_a);
##	mil.line("[oid](a.mark(nil)).reverse().print();");
#	ja_a := algebra.markT(a);
#	ka_a := batcalc.oid(ja_a);
#	la_a := bat.reverse(ka_a);
#	ma_a := io.print(la_a);
##	mil.line("a.seqbase(100@0);");
#	na_a := bat.setSequenceBase(a,100@0);
##	mil.line("[oid](a.mark(nil)).reverse().print();");
#	oa_a := algebra.markT(a);
#	pa_a := batcalc.oid(oa_a);
#	qa_a := bat.reverse(pa_a);
#	ra_a := io.print(qa_a);
##	mil.line("[oid](a.mark(nil)).reverse().copy().print();");
#	sa_a := algebra.markT(a);
#	ta_a := batcalc.oid(sa_a);
#	ua_a := bat.reverse(ta_a);
#	va_a := algebra.copy(ua_a);
#	wa_a := io.print(va_a);
##	mil.line("quit();");
#	xa_a := clients.quit();
##Identifer 'seqbase' mapped to 'bat.setSequenceBase'
#
!ERROR: 'batcalc.oid' undefined in user.main[62] ka_a:any := batcalc.oid(ja_a:bat[:int,:void])
!ERROR: 'bat.reverse' undefined in user.main[63] la_a:any := bat.reverse(ka_a:any)
!ERROR: 'bat.setSequenceBase' undefined in user.main[66] na_a:any := bat.setSequenceBase(a:bat[:int,:str], _69:oid)
!ERROR: 'batcalc.oid' undefined in user.main[69] pa_a:any := batcalc.oid(oa_a:bat[:int,:void])
!ERROR: 'bat.reverse' undefined in user.main[70] qa_a:any := bat.reverse(pa_a:any)
!ERROR: 'batcalc.oid' undefined in user.main[74] ta_a:any := batcalc.oid(sa_a:bat[:int,:void])
!ERROR: 'bat.reverse' undefined in user.main[75] ua_a:any := bat.reverse(ta_a:any)
!ERROR: 'algebra.copy' undefined in user.main[76] va_a:any := algebra.copy(ua_a:any)
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
#include mil; 	# 2  (_2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 3  (_3:str)
#Predefined code segment 	# 4  (_4:str)
#The compiler can not guarantee an accurate compilation, 	# 5  (_5:str)
#because MIL unlike MAL is a dynamically typed language. 	# 6  (_6:str)
#A few guidelines to maximize usefullness. 	# 7  (_7:str)
#- make the type of variables explicit, in particular 'nil' 	# 8  (_8:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 9  (_9:str)
#use the "mil_schema" for additional support routines 	# 10  (_10:str)
#	mil.line("# >Number:         100\n"); 	# 11  (_11:str)
#	mil.line("# >Category:       MIL\n"); 	# 12  (_12:str)
#	mil.line("# >Synopsis:       Virtual oids behave in a strange way.\n"); 	# 13  (_13:str)
#	mil.line("# >Confidential:   no\n"); 	# 14  (_14:str)
#	mil.line("# >Severity:       serious\n"); 	# 15  (_15:str)
#	mil.line("# >Priority:       medium\n"); 	# 16  (_16:str)
#	mil.line("# >Responsible:    boncz\n"); 	# 17  (_17:str)
#	mil.line("# >State:          open\n"); 	# 18  (_18:str)
#	mil.line("# >Class:          sw-bug\n"); 	# 19  (_19:str)
#	mil.line("# >Submitter-Id:   unknown\n"); 	# 20  (_20:str)
#	mil.line("# >Arrival-Date:   Mon Dec 15 11:47:39 1997\n"); 	# 21  (_21:str)
#	mil.line("# >Originator:     quak\n"); 	# 22  (_22:str)
#	mil.line("# >Organization:\n"); 	# 23  (_23:str)
#	mil.line("# UvA\n"); 	# 24  (_24:str)
#	mil.line("# >Release:        971007\n"); 	# 25  (_25:str)
#	mil.line("# >Environment:\n"); 	# 26  (_26:str)
#	mil.line("# all\n"); 	# 27  (_27:str)
#	mil.line("# >Description:\n"); 	# 28  (_28:str)
#	mil.line("# Try this out:\n"); 	# 29  (_29:str)
#	mil.line("# > a := bat.new(int,str);\n"); 	# 30  (_30:str)
#	mil.line("# > a.insert(1,\"hello world\");\n"); 	# 31  (_31:str)
#	mil.line("# > a.seqbase(100@0);\n"); 	# 32  (_32:str)
#	mil.line("# > [oid]([a~]).reverse.print();\n"); 	# 33  (_33:str)
#	mil.line("# #-----------------#\n"); 	# 34  (_34:str)
#	mil.line("# # oid   | tmp_92  #\n"); 	# 35  (_35:str)
#	mil.line("# #-----------------#\n"); 	# 36  (_34:str)
#	mil.line("# [ 100@0,  1       ]\n"); 	# 37  (_36:str)
#	mil.line("# > [oid]([a~]).reverse.copy.print();\n"); 	# 38  (_37:str)
#	mil.line("# #-----------------#\n"); 	# 39  (_34:str)
#	mil.line("# # oid   | tmp_93  #\n"); 	# 40  (_38:str)
#	mil.line("# #-----------------#\n"); 	# 41  (_34:str)
#	mil.line("# [ 1@0,    100     ]\n"); 	# 42  (_39:str)
#	mil.line("# \n"); 	# 43  (_40:str)
#	mil.line("setoid(oid(20000000));"); 	# 44  (_41:str)
    aa_a := calc.oid(20000000);	# 45 CALCint2oid (aa_a:oid)<-(_43:int)
    ba_a := calc.setoid(aa_a);	# 46 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	mil.line("var a := bat.new(int,str);"); 	# 47  (_45:str)
    a := bat.new(nil:int,nil:str);	# 48 CMDBATnew (a:bat[:int,:str])<-(_47:int)(_48:str)
#	mil.line("a.insert(1,\"hello world\");"); 	# 49  (_49:str)
    ca_a := bat.insert(a,1,"hello world");	# 50 BKCinsert_bun (ca_a:void)<-(a:bat[:int,:str])(_51:int)(_52:str)
#	mil.line("a.print();"); 	# 51  (_53:str)
    da_a := io.print(a);	# 52 IOprint_val (da_a:int)<-(a:bat[:int,:str])
#	mil.line("a.mark(nil).print();"); 	# 53  (_55:str)
    ea_a := algebra.markT(a);	# 54 ALGtmark_default (ea_a:bat[:int,:void])<-(a:bat[:int,:str])
    fa_a := io.print(ea_a);	# 55 IOprint_val (fa_a:int)<-(ea_a:bat[:int,:void])
#	mil.line("a.mark(nil).reverse().print();"); 	# 56  (_58:str)
    ga_a := algebra.markT(a);	# 57 ALGtmark_default (ga_a:bat[:int,:void])<-(a:bat[:int,:str])
    ha_a := bat.reverse(ga_a);	# 58 BKCreverse (ha_a:bat[:void,:int])<-(ga_a:bat[:int,:void])
    ia_a := io.print(ha_a);	# 59 IOprint_val (ia_a:int)<-(ha_a:bat[:void,:int])
#	mil.line("[oid](a.mark(nil)).reverse().print();"); 	# 60  (_62:str)
    ja_a := algebra.markT(a);	# 61 ALGtmark_default (ja_a:bat[:int,:void])<-(a:bat[:int,:str])
    ka_a := batcalc.oid(ja_a);	# 62  unknown (ka_a:any)<-(ja_a:bat[:int,:void])
    la_a := bat.reverse(ka_a);	# 63  unknown (la_a:any)<-(ka_a:any)
    ma_a := io.print(la_a);	# 64 IOprint_val (ma_a:int)<-(la_a:any)
#	mil.line("a.seqbase(100@0);"); 	# 65  (_67:str)
    na_a := bat.setSequenceBase(a,100@0);	# 66  unknown (na_a:any)<-(a:bat[:int,:str])(_69:oid)
#	mil.line("[oid](a.mark(nil)).reverse().print();"); 	# 67  (_62:str)
    oa_a := algebra.markT(a);	# 68 ALGtmark_default (oa_a:bat[:int,:void])<-(a:bat[:int,:str])
    pa_a := batcalc.oid(oa_a);	# 69  unknown (pa_a:any)<-(oa_a:bat[:int,:void])
    qa_a := bat.reverse(pa_a);	# 70  unknown (qa_a:any)<-(pa_a:any)
    ra_a := io.print(qa_a);	# 71 IOprint_val (ra_a:int)<-(qa_a:any)
#	mil.line("[oid](a.mark(nil)).reverse().copy().print();"); 	# 72  (_74:str)
    sa_a := algebra.markT(a);	# 73 ALGtmark_default (sa_a:bat[:int,:void])<-(a:bat[:int,:str])
    ta_a := batcalc.oid(sa_a);	# 74  unknown (ta_a:any)<-(sa_a:bat[:int,:void])
    ua_a := bat.reverse(ta_a);	# 75  unknown (ua_a:any)<-(ta_a:any)
    va_a := algebra.copy(ua_a);	# 76  unknown (va_a:any)<-(ua_a:any)
    wa_a := io.print(va_a);	# 77 IOprint_val (wa_a:int)<-(va_a:any)
#	mil.line("quit();"); 	# 78  (_80:str)
    xa_a := clients.quit();	# 79 CLTquitDefault (xa_a:void)
#Identifer 'seqbase' mapped to 'bat.setSequenceBase' 	# 80  (_82:str)
end main;	# 81  

# 07:27:15 >  
# 07:27:15 >  Done.
# 07:27:15 >  

