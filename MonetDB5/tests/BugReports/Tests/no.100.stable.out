stdout of test 'no.100` in directory 'tests/BugReports` itself:


# 04:45:15 >  
# 04:45:15 >  Mtimeout -timeout 432 Mserver -monetrc /export/scratch1/monet/tmp/monet.GNU_32-d.15730/monet/.GNU_32-d/Linux2.4.2-0.1.28smp/share/Monet/monet.Mtest.conf -db Tests_tests_BugReports  < no.100.milS
# 04:45:15 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit; dynamically linked.
# config:/home/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/home/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl for further information.
## Monet Mil to Mal compiler
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
#	mil.line("# >Number:         100\n");
#	mil.line("# >Category:       MIL\n");
#	mil.line("# >Synopsis:       Virtual oids behave in a strange way.\n");
#	mil.line("# >Confidential:   no\n");
#	mil.line("# >Severity:       serious\n");
#	mil.line("# >Priority:       medium\n");
#	mil.line("# >Responsible:    boncz\n");
#	mil.line("# >State:          open\n");
#	mil.line("# >Class:          sw-bug\n");
#	mil.line("# >Submitter-Id:   unknown\n");
#	mil.line("# >Arrival-Date:   Mon Dec 15 11:47:39 1997\n");
#	mil.line("# >Originator:     quak\n");
#	mil.line("# >Organization:\n");
#	mil.line("# UvA\n");
#	mil.line("# >Release:        971007\n");
#	mil.line("# >Environment:\n");
#	mil.line("# all\n");
#	mil.line("# >Description:\n");
#	mil.line("# Try this out:\n");
#	mil.line("# > a := new(int,str);\n");
#	mil.line("# > a.insert(1,\"hello world\");\n");
#	mil.line("# > a.seqbase(100@0);\n");
#	mil.line("# > [oid]([a~]).reverse.print();\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# # oid   | tmp_92  #\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# [ 100@0,  1       ]\n");
#	mil.line("# > [oid]([a~]).reverse.copy.print();\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# # oid   | tmp_93  #\n");
#	mil.line("# #-----------------#\n");
#	mil.line("# [ 1@0,    100     ]\n");
#	mil.line("# \n");
#	mil.line("setoid(oid(20000000));");
#	aa_a := oid(20000000);
#	ba_a := setoid(aa_a);
#	mil.line("var a := new(int,str);");
#	a := new(nil:int,nil:str);
#	mil.line("a.insert(1,\"hello world\");");
#	ca_a := insert(a,1,"hello world");
#	mil.line("a.print();");
#	da_a := print(a);
#	mil.line("a.mark(nil).print();");
#	ea_a := mark(a,nil);
#	fa_a := print(ea_a);
#	mil.line("a.mark(nil).reverse().print();");
#	ga_a := mark(a,nil);
#	ha_a := reverse(ga_a);
#	ia_a := print(ha_a);
#	mil.line("[oid](a.mark(nil)).reverse().print();");
#	ja_a := mark(a,nil);
#	ka_a := multiplex.tactics("oid",ja_a);
#	la_a := reverse(ka_a);
#	ma_a := print(la_a);
#	mil.line("a.seqbase(100@0);");
#	na_a := bat.setSequenceBase(a,100@0);
#	mil.line("[oid](a.mark(nil)).reverse().print();");
#	oa_a := mark(a,nil);
#	pa_a := multiplex.tactics("oid",oa_a);
#	qa_a := reverse(pa_a);
#	ra_a := print(qa_a);
#	mil.line("[oid](a.mark(nil)).reverse().copy().print();");
#	sa_a := mark(a,nil);
#	ta_a := multiplex.tactics("oid",sa_a);
#	ua_a := reverse(ta_a);
#	va_a := copy(ua_a);
#	wa_a := print(va_a);
#	mil.line("quit();");
#	xa_a := quit();
##Identifer 'seqbase' mapped to 'bat.setSequenceBase'
!ERROR: 'batcalc.oid' undefined in user.main[60]
!ERROR: 'bat.reverse' undefined in user.main[61]
!ERROR: 'bat.setSequenceBase' undefined in user.main[64]
!ERROR: 'batcalc.oid' undefined in user.main[67]
!ERROR: 'bat.reverse' undefined in user.main[68]
!ERROR: 'batcalc.oid' undefined in user.main[72]
!ERROR: 'bat.reverse' undefined in user.main[73]
!ERROR: 'algebra.copy' undefined in user.main[74]
function user.main():void;	# 0  (main:void)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 1  (_31:str)
#Predefined code segment 	# 2  (_32:str)
#The compiler can not guarantee an accurate compilation, 	# 3  (_33:str)
#because MIL unlike MAL is a dynamically typed language. 	# 4  (_34:str)
#A few guidelines to maximize usefullness. 	# 5  (_35:str)
#- make the type of variables explicit, in particular 'nil' 	# 6  (_36:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 7  (_37:str)
#use the "mil_schema" for additional support routines 	# 8  (_38:str)
    mil.line("# >Number:         100\n");	# 9 MILline (_39:void)<-(_40:str)
    mil.line("# >Category:       MIL\n");	# 10 MILline (_41:void)<-(_42:str)
    mil.line("# >Synopsis:       Virtual oids behave in a strange way.\n");	# 11 MILline (_43:void)<-(_44:str)
    mil.line("# >Confidential:   no\n");	# 12 MILline (_45:void)<-(_46:str)
    mil.line("# >Severity:       serious\n");	# 13 MILline (_47:void)<-(_48:str)
    mil.line("# >Priority:       medium\n");	# 14 MILline (_49:void)<-(_50:str)
    mil.line("# >Responsible:    boncz\n");	# 15 MILline (_51:void)<-(_52:str)
    mil.line("# >State:          open\n");	# 16 MILline (_53:void)<-(_54:str)
    mil.line("# >Class:          sw-bug\n");	# 17 MILline (_55:void)<-(_56:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 18 MILline (_57:void)<-(_58:str)
    mil.line("# >Arrival-Date:   Mon Dec 15 11:47:39 1997\n");	# 19 MILline (_59:void)<-(_60:str)
    mil.line("# >Originator:     quak\n");	# 20 MILline (_61:void)<-(_62:str)
    mil.line("# >Organization:\n");	# 21 MILline (_63:void)<-(_64:str)
    mil.line("# UvA\n");	# 22 MILline (_65:void)<-(_66:str)
    mil.line("# >Release:        971007\n");	# 23 MILline (_67:void)<-(_68:str)
    mil.line("# >Environment:\n");	# 24 MILline (_69:void)<-(_70:str)
    mil.line("# all\n");	# 25 MILline (_71:void)<-(_72:str)
    mil.line("# >Description:\n");	# 26 MILline (_73:void)<-(_74:str)
    mil.line("# Try this out:\n");	# 27 MILline (_75:void)<-(_76:str)
    mil.line("# > a := bat.new(int,str);\n");	# 28 MILline (_77:void)<-(_78:str)
    mil.line("# > a.insert(1,\"hello world\");\n");	# 29 MILline (_79:void)<-(_80:str)
    mil.line("# > a.seqbase(100@0);\n");	# 30 MILline (_81:void)<-(_82:str)
    mil.line("# > [oid]([a~]).reverse.print();\n");	# 31 MILline (_83:void)<-(_84:str)
    mil.line("# #-----------------#\n");	# 32 MILline (_85:void)<-(_86:str)
    mil.line("# # oid   | tmp_92  #\n");	# 33 MILline (_87:void)<-(_88:str)
    mil.line("# #-----------------#\n");	# 34 MILline (_89:void)<-(_86:str)
    mil.line("# [ 100@0,  1       ]\n");	# 35 MILline (_90:void)<-(_91:str)
    mil.line("# > [oid]([a~]).reverse.copy.print();\n");	# 36 MILline (_92:void)<-(_93:str)
    mil.line("# #-----------------#\n");	# 37 MILline (_94:void)<-(_86:str)
    mil.line("# # oid   | tmp_93  #\n");	# 38 MILline (_95:void)<-(_96:str)
    mil.line("# #-----------------#\n");	# 39 MILline (_97:void)<-(_86:str)
    mil.line("# [ 1@0,    100     ]\n");	# 40 MILline (_98:void)<-(_99:str)
    mil.line("# \n");	# 41 MILline (_100:void)<-(_101:str)
    mil.line("setoid(oid(20000000));");	# 42 MILline (_102:void)<-(_103:str)
    aa_a := calc.oid(20000000);	# 43 CALCint2oid (aa_a:oid)<-(_105:int)
    ba_a := calc.setoid(aa_a);	# 44 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
    mil.line("var a := bat.new(int,str);");	# 45 MILline (_107:void)<-(_108:str)
    a := bat.new(nil:int,nil:str);	# 46 CMDBATnew (a:bat[:int,:str])<-(_110:int)(_111:str)
    mil.line("a.insert(1,\"hello world\");");	# 47 MILline (_112:void)<-(_113:str)
    ca_a := bat.insert(a,1,"hello world");	# 48 BKCinsert_bun (ca_a:void)<-(a:bat[:int,:str])(_115:int)(_116:str)
    mil.line("a.print();");	# 49 MILline (_117:void)<-(_118:str)
    da_a := io.print(a);	# 50 IOprint_val (da_a:int)<-(a:bat[:int,:str])
    mil.line("a.mark(nil).print();");	# 51 MILline (_120:void)<-(_121:str)
    ea_a := algebra.markT(a);	# 52 ALGtmark_default (ea_a:bat[:int,:void])<-(a:bat[:int,:str])
    fa_a := io.print(ea_a);	# 53 IOprint_val (fa_a:int)<-(ea_a:bat[:int,:void])
    mil.line("a.mark(nil).reverse().print();");	# 54 MILline (_124:void)<-(_125:str)
    ga_a := algebra.markT(a);	# 55 ALGtmark_default (ga_a:bat[:int,:void])<-(a:bat[:int,:str])
    ha_a := bat.reverse(ga_a);	# 56 BKCreverse (ha_a:bat[:void,:int])<-(ga_a:bat[:int,:void])
    ia_a := io.print(ha_a);	# 57 IOprint_val (ia_a:int)<-(ha_a:bat[:void,:int])
    mil.line("[oid](a.mark(nil)).reverse().print();");	# 58 MILline (_129:void)<-(_130:str)
    ja_a := algebra.markT(a);	# 59 ALGtmark_default (ja_a:bat[:int,:void])<-(a:bat[:int,:str])
    ka_a := batcalc.oid(ja_a);	# 60  unknown (ka_a:any)<-(ja_a:bat[:int,:void])
    la_a := bat.reverse(ka_a);	# 61  unknown (la_a:any)<-(ka_a:any)
    ma_a := io.print(la_a);	# 62 IOprint_val (ma_a:int)<-(la_a:any)
    mil.line("a.seqbase(100@0);");	# 63 MILline (_135:void)<-(_136:str)
    na_a := bat.setSequenceBase(a,100@0);	# 64  unknown (na_a:any)<-(a:bat[:int,:str])(_138:oid)
    mil.line("[oid](a.mark(nil)).reverse().print();");	# 65 MILline (_139:void)<-(_130:str)
    oa_a := algebra.markT(a);	# 66 ALGtmark_default (oa_a:bat[:int,:void])<-(a:bat[:int,:str])
    pa_a := batcalc.oid(oa_a);	# 67  unknown (pa_a:any)<-(oa_a:bat[:int,:void])
    qa_a := bat.reverse(pa_a);	# 68  unknown (qa_a:any)<-(pa_a:any)
    ra_a := io.print(qa_a);	# 69 IOprint_val (ra_a:int)<-(qa_a:any)
    mil.line("[oid](a.mark(nil)).reverse().copy().print();");	# 70 MILline (_144:void)<-(_145:str)
    sa_a := algebra.markT(a);	# 71 ALGtmark_default (sa_a:bat[:int,:void])<-(a:bat[:int,:str])
    ta_a := batcalc.oid(sa_a);	# 72  unknown (ta_a:any)<-(sa_a:bat[:int,:void])
    ua_a := bat.reverse(ta_a);	# 73  unknown (ua_a:any)<-(ta_a:any)
    va_a := algebra.copy(ua_a);	# 74  unknown (va_a:any)<-(ua_a:any)
    wa_a := io.print(va_a);	# 75 IOprint_val (wa_a:int)<-(va_a:any)
    mil.line("quit();");	# 76 MILline (_151:void)<-(_152:str)
    xa_a := clients.quit();	# 77 CLTquit (xa_a:void)
#Identifer 'seqbase' mapped to 'bat.setSequenceBase' 	# 78  ($163:str)
end main;	# 79  

# 22:47:45 >  
# 22:47:45 >  Done.
# 22:47:45 >  

