stdout of test 'no.100` in directory 'tests/BugReports` itself:


# 07:27:15 >  
# 07:27:15 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.100.mal < /dev/null
# 07:27:15 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# >Number:         100\n");
##	mil.line("# >Category:       MIL\n");
##	mil.line("# >Synopsis:       Virtual oids behave in a strange way.\n");
##	mil.line("# >Confidential:   no\n");
##	mil.line("# >Severity:       serious\n");
##	mil.line("# >Priority:       medium\n");
##	mil.line("# >Responsible:    boncz\n");
##	mil.line("# >State:          open\n");
##	mil.line("# >Class:          sw-bug\n");
##	mil.line("# >Submitter-Id:   unknown\n");
##	mil.line("# >Arrival-Date:   Mon Dec 15 11:47:39 1997\n");
##	mil.line("# >Originator:     quak\n");
##	mil.line("# >Organization:\n");
##	mil.line("# UvA\n");
##	mil.line("# >Release:        971007\n");
##	mil.line("# >Environment:\n");
##	mil.line("# all\n");
##	mil.line("# >Description:\n");
##	mil.line("# Try this out:\n");
##	mil.line("# > a := bat.new(int,str);\n");
##	mil.line("# > a.insert(1,\"hello world\");\n");
##	mil.line("# > a.seqbase(100@0);\n");
##	mil.line("# > [oid]([a~]).reverse.print();\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# # oid   | tmp_92  #\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# [ 100@0,  1       ]\n");
##	mil.line("# > [oid]([a~]).reverse.copy.print();\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# # oid   | tmp_93  #\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# [ 1@0,    100     ]\n");
##	mil.line("# \n");
##	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
##	mil.line("var a := bat.new(int,str);");
#	a := bat.new(nil:int,nil:str);
##	mil.line("a.insert(1,\"hello world\");");
#	ca_a := bat.insert(a,1,"hello world");
##	mil.line("a.print();");
#	da_a := io.print(a);
##	mil.line("a.mark(nil).print();");
#	ea_a := algebra.markT(a);
#	fa_a := io.print(ea_a);
##	mil.line("a.mark(nil).reverse().print();");
#	ga_a := algebra.markT(a);
#	ha_a := bat.reverse(ga_a);
#	ia_a := io.print(ha_a);
##	mil.line("[oid](a.mark(nil)).reverse().print();");
#	ja_a := algebra.markT(a);
#	ka_a := batcalc.oid(ja_a);
#	la_a := bat.reverse(ka_a);
#	ma_a := io.print(la_a);
##	mil.line("a.seqbase(100@0);");
#	na_a := bat.setSequenceBase(a,100@0);
##	mil.line("[oid](a.mark(nil)).reverse().print();");
#	oa_a := algebra.markT(a);
#	pa_a := batcalc.oid(oa_a);
#	qa_a := bat.reverse(pa_a);
#	ra_a := io.print(qa_a);
##	mil.line("[oid](a.mark(nil)).reverse().copy().print();");
#	sa_a := algebra.markT(a);
#	ta_a := batcalc.oid(sa_a);
#	ua_a := bat.reverse(ta_a);
#	va_a := algebra.copy(ua_a);
#	wa_a := io.print(va_a);
##	mil.line("quit();");
#	xa_a := clients.quit();
##Identifer 'seqbase' mapped to 'bat.setSequenceBase'
#
function user.main():void;              #  0 main:void {G}
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("# >Number:         100\n"); 
#	io.print("# >Category:       MIL\n"); 
#	io.print("# >Synopsis:       Virtual oids behave in a strange way.\n"); 
#	io.print("# >Confidential:   no\n"); 
#	io.print("# >Severity:       serious\n"); 
#	io.print("# >Priority:       medium\n"); 
#	io.print("# >Responsible:    boncz\n"); 
#	io.print("# >State:          open\n"); 
#	io.print("# >Class:          sw-bug\n"); 
#	io.print("# >Submitter-Id:   unknown\n"); 
#	io.print("# >Arrival-Date:   Mon Dec 15 11:47:39 1997\n"); 
#	io.print("# >Originator:     quak\n"); 
#	io.print("# >Organization:\n"); 
#	io.print("# UvA\n"); 
#	io.print("# >Release:        971007\n"); 
#	io.print("# >Environment:\n"); 
#	io.print("# all\n"); 
#	io.print("# >Description:\n"); 
#	io.print("# Try this out:\n"); 
#	io.print("# > a := bat.new(int,str);\n"); 
#	io.print("# > a.insert(1,\"hello world\");\n"); 
#	io.print("# > a.seqbase(100@0);\n"); 
#	io.print("# > [oid]([a~]).reverse.print();\n"); 
#	io.print("# #-----------------#\n"); 
#	io.print("# # oid   | tmp_92  #\n"); 
#	io.print("# #-----------------#\n"); 
#	io.print("# [ 100@0,  1       ]\n"); 
#	io.print("# > [oid]([a~]).reverse.copy.print();\n"); 
#	io.print("# #-----------------#\n"); 
#	io.print("# # oid   | tmp_93  #\n"); 
#	io.print("# #-----------------#\n"); 
#	io.print("# [ 1@0,    100     ]\n"); 
#	io.print("# \n"); 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000:lng);     # 44 aa_a:oid := CALClng2oid(_45:lng) 
    ba_a := calc.setoid(aa_a);          # 45 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("var a := bat.new(int,str);"); 
    a := bat.new(nil:int,nil:str);      # 47 a:bat[:int,:str] := CMDBATnew(_49:int, _50:str) {G}
#	io.print("a.insert(1,\"hello world\");"); 
    ca_a := bat.insert(a,1,"hello world");# 49 ca_a:void := BKCinsert_bun(a:bat[:int,:str], _53:int, _54:str) 
#	io.print("a.print();"); 
    da_a := io.print(a);                # 51 da_a:void := IOprint_val(a:bat[:int,:str]) 
#	io.print("a.mark(nil).print();"); 
    ea_a := algebra.markT(a);           # 53 ea_a:bat[:int,:oid] := ALGtmark_default(a:bat[:int,:str]) {G}
    fa_a := io.print(ea_a);             # 54 fa_a:void := IOprint_val(ea_a:bat[:int,:oid]) 
#	io.print("a.mark(nil).reverse().print();"); 
    ga_a := algebra.markT(a);           # 56 ga_a:bat[:int,:oid] := ALGtmark_default(a:bat[:int,:str]) {G}
    ha_a := bat.reverse(ga_a);          # 57 ha_a:bat[:oid,:int] := BKCreverse(ga_a:bat[:int,:oid]) {G}
    ia_a := io.print(ha_a);             # 58 ia_a:void := IOprint_val(ha_a:bat[:oid,:int]) 
#	io.print("[oid](a.mark(nil)).reverse().print();"); 
    ja_a := algebra.markT(a);           # 60 ja_a:bat[:int,:oid] := ALGtmark_default(a:bat[:int,:str]) {G}
    ka_a := batcalc.oid(ja_a);          # 61 ka_a:bat[:int,:oid] := CMDconvert_oid(ja_a:bat[:int,:oid]) {G}
    la_a := bat.reverse(ka_a);          # 62 la_a:bat[:oid,:int] := BKCreverse(ka_a:bat[:int,:oid]) {G}
    ma_a := io.print(la_a);             # 63 ma_a:void := IOprint_val(la_a:bat[:oid,:int]) 
#	io.print("a.seqbase(100@0);"); 
#	io.print("[oid](a.mark(nil)).reverse().print();"); 
    oa_a := algebra.markT(a);           # 66 oa_a:bat[:int,:oid] := ALGtmark_default(a:bat[:int,:str]) {G}
    pa_a := batcalc.oid(oa_a);          # 67 pa_a:bat[:int,:oid] := CMDconvert_oid(oa_a:bat[:int,:oid]) {G}
    qa_a := bat.reverse(pa_a);          # 68 qa_a:bat[:oid,:int] := BKCreverse(pa_a:bat[:int,:oid]) {G}
    ra_a := io.print(qa_a);             # 69 ra_a:void := IOprint_val(qa_a:bat[:oid,:int]) 
#	io.print("[oid](a.mark(nil)).reverse().copy().print();"); 
    sa_a := algebra.markT(a);           # 71 sa_a:bat[:int,:oid] := ALGtmark_default(a:bat[:int,:str]) {G}
    ta_a := batcalc.oid(sa_a);          # 72 ta_a:bat[:int,:oid] := CMDconvert_oid(sa_a:bat[:int,:oid]) {G}
    ua_a := bat.reverse(ta_a);          # 73 ua_a:bat[:oid,:int] := BKCreverse(ta_a:bat[:int,:oid]) {G}
    va_a := algebra.copy(ua_a);         # 74 va_a:bat[:oid,:int] := ALGcopy(ua_a:bat[:oid,:int]) {G}
    wa_a := io.print(va_a);             # 75 wa_a:void := IOprint_val(va_a:bat[:oid,:int]) 
#	io.print("quit();"); 
    xa_a := clients.quit();             # 77 xa_a:void 
end main;	# 78  
#-------------------------#
# h	t		  # name
# int	str		  # type
#-------------------------#
[ 1,	  "hello world"	  ]
#-----------------#
# h	t	  # name
# int	void	  # type
#-----------------#
[ 1,	  0@0	  ]
#-----------------#
# t	h	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
#-----------------#
# t	h	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
#-----------------#
# t	h	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]

# 07:27:15 >  
# 07:27:15 >  Done.
# 07:27:15 >  

