stdout of test 'no.100` in directory 'tests/BugReports` itself:


# 07:27:15 >  
# 07:27:15 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.100.mal < /dev/null
# 07:27:15 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# >Number:         100\n");
##	mil.line("# >Category:       MIL\n");
##	mil.line("# >Synopsis:       Virtual oids behave in a strange way.\n");
##	mil.line("# >Confidential:   no\n");
##	mil.line("# >Severity:       serious\n");
##	mil.line("# >Priority:       medium\n");
##	mil.line("# >Responsible:    boncz\n");
##	mil.line("# >State:          open\n");
##	mil.line("# >Class:          sw-bug\n");
##	mil.line("# >Submitter-Id:   unknown\n");
##	mil.line("# >Arrival-Date:   Mon Dec 15 11:47:39 1997\n");
##	mil.line("# >Originator:     quak\n");
##	mil.line("# >Organization:\n");
##	mil.line("# UvA\n");
##	mil.line("# >Release:        971007\n");
##	mil.line("# >Environment:\n");
##	mil.line("# all\n");
##	mil.line("# >Description:\n");
##	mil.line("# Try this out:\n");
##	mil.line("# > a := bat.new(int,str);\n");
##	mil.line("# > a.insert(1,\"hello world\");\n");
##	mil.line("# > a.seqbase(100@0);\n");
##	mil.line("# > [oid]([a~]).reverse.print();\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# # oid   | tmp_92  #\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# [ 100@0,  1       ]\n");
##	mil.line("# > [oid]([a~]).reverse.copy.print();\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# # oid   | tmp_93  #\n");
##	mil.line("# #-----------------#\n");
##	mil.line("# [ 1@0,    100     ]\n");
##	mil.line("# \n");
##	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
##	mil.line("var a := bat.new(int,str);");
#	a := bat.new(nil:int,nil:str);
##	mil.line("a.insert(1,\"hello world\");");
#	ca_a := bat.insert(a,1,"hello world");
##	mil.line("a.print();");
#	da_a := io.print(a);
##	mil.line("a.mark(nil).print();");
#	ea_a := algebra.markT(a);
#	fa_a := io.print(ea_a);
##	mil.line("a.mark(nil).reverse().print();");
#	ga_a := algebra.markT(a);
#	ha_a := bat.reverse(ga_a);
#	ia_a := io.print(ha_a);
##	mil.line("[oid](a.mark(nil)).reverse().print();");
#	ja_a := algebra.markT(a);
#	ka_a := batcalc.oid(ja_a);
#	la_a := bat.reverse(ka_a);
#	ma_a := io.print(la_a);
##	mil.line("a.seqbase(100@0);");
#	na_a := bat.setSequenceBase(a,100@0);
##	mil.line("[oid](a.mark(nil)).reverse().print();");
#	oa_a := algebra.markT(a);
#	pa_a := batcalc.oid(oa_a);
#	qa_a := bat.reverse(pa_a);
#	ra_a := io.print(qa_a);
##	mil.line("[oid](a.mark(nil)).reverse().copy().print();");
#	sa_a := algebra.markT(a);
#	ta_a := batcalc.oid(sa_a);
#	ua_a := bat.reverse(ta_a);
#	va_a := algebra.copy(ua_a);
#	wa_a := io.print(va_a);
##	mil.line("quit();");
#	xa_a := clients.quit();
##Identifer 'seqbase' mapped to 'bat.setSequenceBase'
#
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 2  (_2:str)
#Predefined code segment 	# 3  (_3:str)
#The compiler can not guarantee an accurate compilation, 	# 4  (_4:str)
#because MIL unlike MAL is a dynamically typed language. 	# 5  (_5:str)
#A few guidelines to maximize usefullness. 	# 6  (_6:str)
#- make the type of variables explicit, in particular 'nil' 	# 7  (_7:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 8  (_8:str)
#use the "mil_schema" for additional support routines 	# 9  (_9:str)
#	io.print("# >Number:         100\n"); 	# 10  (_10:str)
#	io.print("# >Category:       MIL\n"); 	# 11  (_11:str)
#	io.print("# >Synopsis:       Virtual oids behave in a strange way.\n"); 	# 12  (_12:str)
#	io.print("# >Confidential:   no\n"); 	# 13  (_13:str)
#	io.print("# >Severity:       serious\n"); 	# 14  (_14:str)
#	io.print("# >Priority:       medium\n"); 	# 15  (_15:str)
#	io.print("# >Responsible:    boncz\n"); 	# 16  (_16:str)
#	io.print("# >State:          open\n"); 	# 17  (_17:str)
#	io.print("# >Class:          sw-bug\n"); 	# 18  (_18:str)
#	io.print("# >Submitter-Id:   unknown\n"); 	# 19  (_19:str)
#	io.print("# >Arrival-Date:   Mon Dec 15 11:47:39 1997\n"); 	# 20  (_20:str)
#	io.print("# >Originator:     quak\n"); 	# 21  (_21:str)
#	io.print("# >Organization:\n"); 	# 22  (_22:str)
#	io.print("# UvA\n"); 	# 23  (_23:str)
#	io.print("# >Release:        971007\n"); 	# 24  (_24:str)
#	io.print("# >Environment:\n"); 	# 25  (_25:str)
#	io.print("# all\n"); 	# 26  (_26:str)
#	io.print("# >Description:\n"); 	# 27  (_27:str)
#	io.print("# Try this out:\n"); 	# 28  (_28:str)
#	io.print("# > a := bat.new(int,str);\n"); 	# 29  (_29:str)
#	io.print("# > a.insert(1,\"hello world\");\n"); 	# 30  (_30:str)
#	io.print("# > a.seqbase(100@0);\n"); 	# 31  (_31:str)
#	io.print("# > [oid]([a~]).reverse.print();\n"); 	# 32  (_32:str)
#	io.print("# #-----------------#\n"); 	# 33  (_33:str)
#	io.print("# # oid   | tmp_92  #\n"); 	# 34  (_34:str)
#	io.print("# #-----------------#\n"); 	# 35  (_35:str)
#	io.print("# [ 100@0,  1       ]\n"); 	# 36  (_36:str)
#	io.print("# > [oid]([a~]).reverse.copy.print();\n"); 	# 37  (_37:str)
#	io.print("# #-----------------#\n"); 	# 38  (_38:str)
#	io.print("# # oid   | tmp_93  #\n"); 	# 39  (_39:str)
#	io.print("# #-----------------#\n"); 	# 40  (_40:str)
#	io.print("# [ 1@0,    100     ]\n"); 	# 41  (_41:str)
#	io.print("# \n"); 	# 42  (_42:str)
#	io.print("setoid(oid(20000000));"); 	# 43  (_43:str)
    aa_a := calc.oid(20000000:lng);	# 44 CALClng2oid (aa_a:oid)<-(_45:lng)
    ba_a := calc.setoid(aa_a);	# 45 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	io.print("var a := bat.new(int,str);"); 	# 46  (_47:str)
    a := bat.new(nil:int,nil:str);	# 47 CMDBATnew (a:bat[:int,:str])<-(_49:int)(_50:str)
#	io.print("a.insert(1,\"hello world\");"); 	# 48  (_51:str)
    ca_a := bat.insert(a,1,"hello world");	# 49 BKCinsert_bun (ca_a:void)<-(a:bat[:int,:str])(_53:int)(_54:str)
#	io.print("a.print();"); 	# 50  (_55:str)
    da_a := io.print(a);	# 51 IOprint_val (da_a:void)<-(a:bat[:int,:str])
#	io.print("a.mark(nil).print();"); 	# 52  (_54:str)
    ea_a := algebra.markT(a);	# 53 ALGtmark_default (ea_a:bat[:int,:oid])<-(a:bat[:int,:str])
    fa_a := io.print(ea_a);	# 54 IOprint_val (fa_a:void)<-(ea_a:bat[:int,:oid])
#	io.print("a.mark(nil).reverse().print();"); 	# 55  (_57:str)
    ga_a := algebra.markT(a);	# 56 ALGtmark_default (ga_a:bat[:int,:oid])<-(a:bat[:int,:str])
    ha_a := bat.reverse(ga_a);	# 57 BKCreverse (ha_a:bat[:oid,:int])<-(ga_a:bat[:int,:oid])
    ia_a := io.print(ha_a);	# 58 IOprint_val (ia_a:void)<-(ha_a:bat[:oid,:int])
#	io.print("[oid](a.mark(nil)).reverse().print();"); 	# 59  (_61:str)
    ja_a := algebra.markT(a);	# 60 ALGtmark_default (ja_a:bat[:int,:oid])<-(a:bat[:int,:str])
    ka_a := batcalc.oid(ja_a);	# 61 CMDconvert_oid (ka_a:bat[:int,:oid])<-(ja_a:bat[:int,:oid])
    la_a := bat.reverse(ka_a);	# 62 BKCreverse (la_a:bat[:oid,:int])<-(ka_a:bat[:int,:oid])
    ma_a := io.print(la_a);	# 63 IOprint_val (ma_a:void)<-(la_a:bat[:oid,:int])
#	io.print("a.seqbase(100@0);"); 	# 64  (_66:str)
#	io.print("[oid](a.mark(nil)).reverse().print();"); 	# 65  (_61:str)
    oa_a := algebra.markT(a);	# 66 ALGtmark_default (oa_a:bat[:int,:oid])<-(a:bat[:int,:str])
    pa_a := batcalc.oid(oa_a);	# 67 CMDconvert_oid (pa_a:bat[:int,:oid])<-(oa_a:bat[:int,:oid])
    qa_a := bat.reverse(pa_a);	# 68 BKCreverse (qa_a:bat[:oid,:int])<-(pa_a:bat[:int,:oid])
    ra_a := io.print(qa_a);	# 69 IOprint_val (ra_a:void)<-(qa_a:bat[:oid,:int])
#	io.print("[oid](a.mark(nil)).reverse().copy().print();"); 	# 70  (_71:str)
    sa_a := algebra.markT(a);	# 71 ALGtmark_default (sa_a:bat[:int,:oid])<-(a:bat[:int,:str])
    ta_a := batcalc.oid(sa_a);	# 72 CMDconvert_oid (ta_a:bat[:int,:oid])<-(sa_a:bat[:int,:oid])
    ua_a := bat.reverse(ta_a);	# 73 BKCreverse (ua_a:bat[:oid,:int])<-(ta_a:bat[:int,:oid])
    va_a := algebra.copy(ua_a);	# 74 ALGcopy (va_a:bat[:oid,:int])<-(ua_a:bat[:oid,:int])
    wa_a := io.print(va_a);	# 75 IOprint_val (wa_a:void)<-(va_a:bat[:oid,:int])
#	io.print("quit();"); 	# 76  (_77:str)
    xa_a := clients.quit();	# 77 CLTquit (xa_a:void)
end main;	# 78  
#-------------------------#
# h	t		  # name
# int	str		  # type
#-------------------------#
[ 1,	  "hello world"	  ]
#-----------------#
# h	t	  # name
# int	void	  # type
#-----------------#
[ 1,	  0@0	  ]
#-----------------#
# t	h	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
#-----------------#
# t	h	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
#-----------------#
# t	h	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]

# 07:27:15 >  
# 07:27:15 >  Done.
# 07:27:15 >  

