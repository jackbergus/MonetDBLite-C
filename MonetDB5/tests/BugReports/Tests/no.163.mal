# Monet Mil to Mal compiler
#include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	mil.line("# >Number:         163\n");
#	mil.line("# >Category:       MIL\n");
#	mil.line("# >Synopsis:       multi[lex bug\n");
#	mil.line("# >Confidential:   no\n");
#	mil.line("# >Severity:       serious\n");
#	mil.line("# >Priority:       medium\n");
#	mil.line("# >Responsible:    boncz (Peter Boncz)\n");
#	mil.line("# >State:          open\n");
#	mil.line("# >Class:          sw-bug\n");
#	mil.line("# >Submitter-Id:   unknown\n");
#	mil.line("# >Arrival-Date:   Mon Jul 20 09:56:02 1998\n");
#	mil.line("# >Originator:     manegold@cwi.nl\n");
#	mil.line("# >Organization:\n");
#	mil.line("# >Release:        980101\n");
#	mil.line("# >Environment:\n");
#	mil.line("# any\n");
#	mil.line("# >Description:\n");
#	mil.line("# Tim Ruhl (DDi) reported this bug:\n");
#	mil.line("# \n");
#	mil.line("# The following script fails with \"GDKmalloc called with size 0\".\n");
#	mil.line("# (cf. output below)\n");
#	mil.line("# \n");
#	mil.line("# -8<-----\n");
#	mil.line("# \n");
#	mil.line("# proc tst(BAT[any, int] b) : bat\n");
#	mil.line("# {  \n");
#	mil.line("#   var i;\n");
#	mil.line("# \n");
#	mil.line("#   i := 0;\n");
#	mil.line("#   while (i < 2) {\n");
#	mil.line("#     b := [+](b, 1);\n");
#	mil.line("#     i := i + 1;\n");
#	mil.line("#   }\n");
#	mil.line("# \n");
#	mil.line("#   return b;\n");
#	mil.line("# }\n");
#	mil.line("# \n");
#	mil.line("# b1 := bat.new(int, int);\n");
#	mil.line("# b1.insert(0, 0);\n");
#	mil.line("# b1.insert(0, 1);\n");
#	mil.line("# \n");
#	mil.line("# bn := tst(b1);\n");
#	mil.line("# bn.print;\n");
#	mil.line("# \n");
#	mil.line("# quit;\n");
#	mil.line("# \n");
#	mil.line("# -8<-----\n");
#	mil.line("# \n");
#	mil.line("# # Monet Database Server V4.0 (IRIX5.3/32bit) of Fri Jul 17 21:30:49 MET DST 1998\n");
#	mil.line("# # Copyright (c) 1993-1998, CWI & SION. All rights reserved.\n");
#	mil.line("# #script:../tim.mil\n");
#	mil.line("# \n");
#	mil.line("# loaded;\n");
#	mil.line("# #---------------------------------#\n");
#	mil.line("# # module        | usage_count     #\n");
#	mil.line("# #---------------------------------#\n");
#	mil.line("# [ \"kernel\",       1               ]\n");
#	mil.line("# [ \"arith\",        1               ]\n");
#	mil.line("# [ \"bat\",          1               ]\n");
#	mil.line("# [ \"algebra\",      1               ]\n");
#	mil.line("# [ \"sys\",          1               ]\n");
#	mil.line("# [ \"trans\",        1               ]\n");
#	mil.line("# \n");
#	mil.line("# Try: modules;                - for other modules.\n");
#	mil.line("#      ls;                     - for persistent bat listing.\n");
#	mil.line("#      sigs(\"<module>\")        - for available commands per module.\n");
#	mil.line("#      help(\"<command>\")       - for help one-liner for a command.\n");
#	mil.line("# \n");
#	mil.line("# #You are system administrator (adm)!\n");
#	mil.line("#  \n");
#	mil.line("# proc tst(BAT[any, int] b) : bat\n");
#	mil.line("# {\n");
#	mil.line("#   var i;\n");
#	mil.line("# \n");
#	mil.line("#   i := 0;\n");
#	mil.line("#   while (i < 2) {\n");
#	mil.line("#     b := [+](b, 1);\n");
#	mil.line("#     i := i + 1;\n");
#	mil.line("#   }\n");
#	mil.line("# \n");
#	mil.line("#   return b;\n");
#	mil.line("# }\n");
#	mil.line("# \n");
#	mil.line("# b1 := bat.new(int, int);\n");
#	mil.line("# b1.insert(0, 0);\n");
#	mil.line("# b1.insert(0, 1);\n");
#	mil.line("# \n");
#	mil.line("# bn := tst(b1);\n");
#	mil.line("# GDKmalloc called with size 0\n");
#	mil.line("# \n");
#	mil.line("# -8<-----\n");
#	mil.line("# \n");
#	mil.line("# As Tim sais, it has probably to do with rewriting the\n");
#	mil.line("# MIL parse tree after the first iteration of the while loop.\n");
#	mil.line("# \n");
#	mil.line("# ========\n");
#	mil.line("# \n");
#	mil.line("# As I just noticed, similar (the same\?) bugs have already been\n");
#	mil.line("# reported in bug reports #117 & #156.\n");
#	mil.line("# \n");
#	mil.line("#\t\tStefan\n");
#	mil.line("");
	aa_a := calc.oid(20000000);
	ba_a := calc.setoid(aa_a);
#	mil.line("");
function tst(b:bat[:any_1,:int]):bat[:any_1,:int];
#	mil.line("");
	i := 0;
#	mil.line("  i := 0;");
barrier	ca_a := true;
barrier	da_a := calc.<(i,2);
#	mil.line("  while (i < 2) {");
	b := batcalc.+(b,1);
#	mil.line("    b := [+](b, 1);");
	i := calc.+(i,1);
#	mil.line("    i := i + 1;");
redo	ca_a;
exit	da_a;
exit	ca_a;
#	mil.line("");
	return ea_a :=b;
end tst;
#	mil.line("");
	b1 := bat.new(nil:int,nil:int);
#	mil.line("var b1 := bat.new(int, int);");
	fa_a := bat.insert(b1,0,0);
#	mil.line("b1.insert(0, 0);");
	ga_a := bat.insert(b1,0,1);
#	mil.line("");
	bn := user.tst(b1);
#	mil.line("var bn := tst(b1);  ");
	ha_a := io.print(bn);
#	mil.line("");
	ia_a := clients.quit();
