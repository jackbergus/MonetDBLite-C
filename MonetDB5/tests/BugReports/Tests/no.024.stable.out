stdout of test 'no.024` in directory 'monetdb5/tests/BugReports` itself:

#> Mtest:	milS no.024 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.024.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 01:04:33 MET 2000.
#script:no.024.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# >Number:         24
# >Category:       MIL
# >Synopsis:       Assignment in proc
# >Confidential:   no
# >Severity:       serious
# >Priority:       high
# >Responsible:    boncz
# >State:          closed
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Sun Aug 31 09:45:04 1997
# >Originator:     mk
# >Organization:
# >Release:        970101
# >Environment:
# SGI
# >Description:
# #SCRIPT
# > b:= new(int,int);
# > proc error1(B):= {
# >         B.insert(1,2);
# >         B.insert(2,3);
# >         B:= B.join(B);
# >         print(B);
# > }
# > error1(b);
# #-----------------#
# # h     | t       #
# #-----------------#
# [ 1,      3       ]
# > print(b);
# #-----------------#
# # h     | t       #
# #-----------------#
# [ 1,      2       ]
# [ 2,      3       ]
# 
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##include "mil_prelude";
#	mil.line("# >Number:         24\n");
#	mil.line("# >Category:       MIL");
#	mil.line("# >Category:       MIL\n");
#	mil.line("# >Synopsis:       Assignment in proc");
#	mil.line("# >Synopsis:       Assignment in proc\n");
#	mil.line("# >Confidential:   no");
#	mil.line("# >Confidential:   no\n");
#	mil.line("# >Severity:       serious");
#	mil.line("# >Severity:       serious\n");
#	mil.line("# >Priority:       high");
#	mil.line("# >Priority:       high\n");
#	mil.line("# >Responsible:    boncz");
#	mil.line("# >Responsible:    boncz\n");
#	mil.line("# >State:          closed");
#	mil.line("# >State:          closed\n");
#	mil.line("# >Class:          sw-bug");
#	mil.line("# >Class:          sw-bug\n");
#	mil.line("# >Submitter-Id:   unknown");
#	mil.line("# >Submitter-Id:   unknown\n");
#	mil.line("# >Arrival-Date:   Sun Aug 31 09:45:04 1997");
#	mil.line("# >Arrival-Date:   Sun Aug 31 09:45:04 1997\n");
#	mil.line("# >Originator:     mk");
#	mil.line("# >Originator:     mk\n");
#	mil.line("# >Organization:");
#	mil.line("# >Organization:\n");
#	mil.line("# >Release:        970101");
#	mil.line("# >Release:        970101\n");
#	mil.line("# >Environment:");
#	mil.line("# >Environment:\n");
#	mil.line("# SGI");
#	mil.line("# SGI\n");
#	mil.line("# >Description:");
#	mil.line("# >Description:\n");
#	mil.line("# #SCRIPT");
#	mil.line("# #SCRIPT\n");
#	mil.line("# > b:= new(int,int);");
#	mil.line("# > b:= new(int,int);\n");
#	mil.line("# > proc error1(B) : void {");
#	mil.line("# > proc error1(B) : void {\n");
#	mil.line("# >         B.insert(1,2);");
#	mil.line("# >         B.insert(1,2);\n");
#	mil.line("# >         B.insert(2,3);");
#	mil.line("# >         B.insert(2,3);\n");
#	mil.line("# >         B:= B.join(B);");
#	mil.line("# >         B:= B.join(B);\n");
#	mil.line("# >         print(B);");
#	mil.line("# >         print(B);\n");
#	mil.line("# > }");
#	mil.line("# > }\n");
#	mil.line("# > error1(b);");
#	mil.line("# > error1(b);\n");
#	mil.line("# #-----------------#");
#	mil.line("# #-----------------#\n");
#	mil.line("# # h     | t       #");
#	mil.line("# # h     | t       #\n");
#	mil.line("# #-----------------#");
#	mil.line("# #-----------------#\n");
#	mil.line("# [ 1,      3       ]");
#	mil.line("# [ 1,      3       ]\n");
#	mil.line("# > print(b);");
#	mil.line("# > print(b);\n");
#	mil.line("# #-----------------#");
#	mil.line("# #-----------------#\n");
#	mil.line("# # h     | t       #");
#	mil.line("# # h     | t       #\n");
#	mil.line("# #-----------------#");
#	mil.line("# #-----------------#\n");
#	mil.line("# [ 1,      2       ]");
#	mil.line("# [ 1,      2       ]\n");
#	mil.line("# [ 2,      3       ]");
#	mil.line("# [ 2,      3       ]\n");
#	mil.line("# ");
#	mil.line("# \n");
#	mil.line("# The semantics of B is unclear within proc");
#	mil.line("# The semantics of B is unclear within proc\n");
#	mil.line("");
#	mil.line("var b:= new(int,int);");
#	b := new(nil:int,nil:int);
#	mil.line("proc error1(bat B) : void {");
#function error1(B:bat[:any,:any]):void;
#	mil.line("        B.insert(1,2);");
#	aa_a := insert(B,1,2);
#	mil.line("        B.insert(2,3);");
#	ba_a := insert(B,2,3);
#	mil.line("        B:= B.join(B);");
#	B := join(B,B);
#	mil.line("        print(B);");
#	ca_a := print(B);
#end error1;
function Admin.error1(B:bat[:any,:any]):void;	# 0  (error1:void)<-(B:bat[:any,:any])
    mil.line("        B.insert(1,2);");	# 1 MILline ($2:void)<-($3:str)
    aa_a := bat.insert(B,1,2);	# 2 BKCinsert_bun (aa_a:void)<-(B:bat[:any,:any])($5:int)($6:int)
    mil.line("        B.insert(2,3);");	# 3 MILline ($7:void)<-($8:str)
    ba_a := bat.insert(B,2,3);	# 4 BKCinsert_bun (ba_a:void)<-(B:bat[:any,:any])($6:int)($10:int)
    mil.line("        B:= B.join(B);");	# 5 MILline ($11:void)<-($12:str)
    B := algebra.join(B,B);	# 6 ALGjoin (B:bat[:any,:any])<-(B:bat[:any,:any])(B:bat[:any,:any])
    mil.line("        print(B);");	# 7 MILline ($13:void)<-($14:str)
    ca_a := io.print(B);	# 8 IOprint_val (ca_a:int)<-(B:bat[:any,:any])
end error1;	# 9  
#	mil.line("error1(b);");
#	b:= mil.take("b");
#	da_a := error1(b);
#	mil.line("print(b);");
#	ea_a := print(b);
#	mil.line("quit();");
#	fa_a := quit();
#
function Admin.main():int;	# 0  (main:int)
    mil.line("# >Number:         24\n");	# 1 MILline ($1:void)<-($2:str)
    mil.line("# >Category:       MIL");	# 2 MILline ($3:void)<-($4:str)
    mil.line("# >Category:       MIL\n");	# 3 MILline ($5:void)<-($6:str)
    mil.line("# >Synopsis:       Assignment in proc");	# 4 MILline ($7:void)<-($8:str)
    mil.line("# >Synopsis:       Assignment in proc\n");	# 5 MILline ($9:void)<-($10:str)
    mil.line("# >Confidential:   no");	# 6 MILline ($11:void)<-($12:str)
    mil.line("# >Confidential:   no\n");	# 7 MILline ($13:void)<-($14:str)
    mil.line("# >Severity:       serious");	# 8 MILline ($15:void)<-($16:str)
    mil.line("# >Severity:       serious\n");	# 9 MILline ($17:void)<-($18:str)
    mil.line("# >Priority:       high");	# 10 MILline ($19:void)<-($20:str)
    mil.line("# >Priority:       high\n");	# 11 MILline ($21:void)<-($22:str)
    mil.line("# >Responsible:    boncz");	# 12 MILline ($23:void)<-($24:str)
    mil.line("# >Responsible:    boncz\n");	# 13 MILline ($25:void)<-($26:str)
    mil.line("# >State:          closed");	# 14 MILline ($27:void)<-($28:str)
    mil.line("# >State:          closed\n");	# 15 MILline ($29:void)<-($30:str)
    mil.line("# >Class:          sw-bug");	# 16 MILline ($31:void)<-($32:str)
    mil.line("# >Class:          sw-bug\n");	# 17 MILline ($33:void)<-($34:str)
    mil.line("# >Submitter-Id:   unknown");	# 18 MILline ($35:void)<-($36:str)
    mil.line("# >Submitter-Id:   unknown\n");	# 19 MILline ($37:void)<-($38:str)
    mil.line("# >Arrival-Date:   Sun Aug 31 09:45:04 1997");	# 20 MILline ($39:void)<-($40:str)
    mil.line("# >Arrival-Date:   Sun Aug 31 09:45:04 1997\n");	# 21 MILline ($41:void)<-($42:str)
    mil.line("# >Originator:     mk");	# 22 MILline ($43:void)<-($44:str)
    mil.line("# >Originator:     mk\n");	# 23 MILline ($45:void)<-($46:str)
    mil.line("# >Organization:");	# 24 MILline ($47:void)<-($48:str)
    mil.line("# >Organization:\n");	# 25 MILline ($49:void)<-($50:str)
    mil.line("# >Release:        970101");	# 26 MILline ($51:void)<-($52:str)
    mil.line("# >Release:        970101\n");	# 27 MILline ($53:void)<-($54:str)
    mil.line("# >Environment:");	# 28 MILline ($55:void)<-($56:str)
    mil.line("# >Environment:\n");	# 29 MILline ($57:void)<-($58:str)
    mil.line("# SGI");	# 30 MILline ($59:void)<-($60:str)
    mil.line("# SGI\n");	# 31 MILline ($61:void)<-($62:str)
    mil.line("# >Description:");	# 32 MILline ($63:void)<-($64:str)
    mil.line("# >Description:\n");	# 33 MILline ($65:void)<-($66:str)
    mil.line("# #SCRIPT");	# 34 MILline ($67:void)<-($68:str)
    mil.line("# #SCRIPT\n");	# 35 MILline ($69:void)<-($70:str)
    mil.line("# > b:= new(int,int);");	# 36 MILline ($71:void)<-($72:str)
    mil.line("# > b:= new(int,int);\n");	# 37 MILline ($73:void)<-($74:str)
    mil.line("# > proc error1(B) : void {");	# 38 MILline ($75:void)<-($76:str)
    mil.line("# > proc error1(B) : void {\n");	# 39 MILline ($77:void)<-($78:str)
    mil.line("# >         B.insert(1,2);");	# 40 MILline ($79:void)<-($80:str)
    mil.line("# >         B.insert(1,2);\n");	# 41 MILline ($81:void)<-($82:str)
    mil.line("# >         B.insert(2,3);");	# 42 MILline ($83:void)<-($84:str)
    mil.line("# >         B.insert(2,3);\n");	# 43 MILline ($85:void)<-($86:str)
    mil.line("# >         B:= B.join(B);");	# 44 MILline ($87:void)<-($88:str)
    mil.line("# >         B:= B.join(B);\n");	# 45 MILline ($89:void)<-($90:str)
    mil.line("# >         print(B);");	# 46 MILline ($91:void)<-($92:str)
    mil.line("# >         print(B);\n");	# 47 MILline ($93:void)<-($94:str)
    mil.line("# > }");	# 48 MILline ($95:void)<-($96:str)
    mil.line("# > }\n");	# 49 MILline ($97:void)<-($98:str)
    mil.line("# > error1(b);");	# 50 MILline ($99:void)<-($100:str)
    mil.line("# > error1(b);\n");	# 51 MILline ($101:void)<-($102:str)
    mil.line("# #-----------------#");	# 52 MILline ($103:void)<-($104:str)
    mil.line("# #-----------------#\n");	# 53 MILline ($105:void)<-($106:str)
    mil.line("# # h     | t       #");	# 54 MILline ($107:void)<-($108:str)
    mil.line("# # h     | t       #\n");	# 55 MILline ($109:void)<-($110:str)
    mil.line("# #-----------------#");	# 56 MILline ($111:void)<-($104:str)
    mil.line("# #-----------------#\n");	# 57 MILline ($112:void)<-($106:str)
    mil.line("# [ 1,      3       ]");	# 58 MILline ($113:void)<-($114:str)
    mil.line("# [ 1,      3       ]\n");	# 59 MILline ($115:void)<-($116:str)
    mil.line("# > print(b);");	# 60 MILline ($117:void)<-($118:str)
    mil.line("# > print(b);\n");	# 61 MILline ($119:void)<-($120:str)
    mil.line("# #-----------------#");	# 62 MILline ($121:void)<-($104:str)
    mil.line("# #-----------------#\n");	# 63 MILline ($122:void)<-($106:str)
    mil.line("# # h     | t       #");	# 64 MILline ($123:void)<-($108:str)
    mil.line("# # h     | t       #\n");	# 65 MILline ($124:void)<-($110:str)
    mil.line("# #-----------------#");	# 66 MILline ($125:void)<-($104:str)
    mil.line("# #-----------------#\n");	# 67 MILline ($126:void)<-($106:str)
    mil.line("# [ 1,      2       ]");	# 68 MILline ($127:void)<-($128:str)
    mil.line("# [ 1,      2       ]\n");	# 69 MILline ($129:void)<-($130:str)
    mil.line("# [ 2,      3       ]");	# 70 MILline ($131:void)<-($132:str)
    mil.line("# [ 2,      3       ]\n");	# 71 MILline ($133:void)<-($134:str)
    mil.line("# ");	# 72 MILline ($135:void)<-($136:str)
    mil.line("# \n");	# 73 MILline ($137:void)<-($138:str)
    mil.line("# The semantics of B is unclear within proc");	# 74 MILline ($139:void)<-($140:str)
    mil.line("# The semantics of B is unclear within proc\n");	# 75 MILline ($141:void)<-($142:str)
    mil.line("");	# 76 MILline ($143:void)<-($144:str)
    mil.line("var b:= new(int,int);");	# 77 MILline ($145:void)<-($146:str)
    b := bbp.new(nil,nil);	# 78 CMDBATnew (b:bat[:int,:int])<-($148:int)($148:int)
    mil.line("proc error1(bat B) : void {");	# 79 MILline ($149:void)<-($150:str)
    mil.line("error1(b);");	# 80 MILline ($151:void)<-($152:str)
    b := mil.take("b");	# 81 MILtake (b:bat[:int,:int])<-($153:str)
    da_a := Admin.error1(b);	# 82  (da_a:void)<-(b:bat[:int,:int])
    mil.line("print(b);");	# 83 MILline ($155:void)<-($156:str)
    ea_a := io.print(b);	# 84 IOprint_val (ea_a:int)<-(b:bat[:int,:int])
    mil.line("quit();");	# 85 MILline ($158:void)<-($159:str)
    fa_a := clients.quit();	# 86 CLTquit (fa_a:void)
end main;	# 87  
## >Number:         24
## >Category:       MIL
## >Category:       MIL
## >Synopsis:       Assignment in proc
## >Synopsis:       Assignment in proc
## >Confidential:   no
## >Confidential:   no
## >Severity:       serious
## >Severity:       serious
## >Priority:       high
## >Priority:       high
## >Responsible:    boncz
## >Responsible:    boncz
## >State:          closed
## >State:          closed
## >Class:          sw-bug
## >Class:          sw-bug
## >Submitter-Id:   unknown
## >Submitter-Id:   unknown
## >Arrival-Date:   Sun Aug 31 09:45:04 1997
## >Arrival-Date:   Sun Aug 31 09:45:04 1997
## >Originator:     mk
## >Originator:     mk
## >Organization:
## >Organization:
## >Release:        970101
## >Release:        970101
## >Environment:
## >Environment:
## SGI
## SGI
## >Description:
## >Description:
## #SCRIPT
## #SCRIPT
## > b:= new(int,int);
## > b:= new(int,int);
## > proc error1(B) : void {
## > proc error1(B) : void {
## >         B.insert(1,2);
## >         B.insert(1,2);
## >         B.insert(2,3);
## >         B.insert(2,3);
## >         B:= B.join(B);
## >         B:= B.join(B);
## >         print(B);
## >         print(B);
## > }
## > }
## > error1(b);
## > error1(b);
## #-----------------#
## #-----------------#
## # h     | t       #
## # h     | t       #
## #-----------------#
## #-----------------#
## [ 1,      3       ]
## [ 1,      3       ]
## > print(b);
## > print(b);
## #-----------------#
## #-----------------#
## # h     | t       #
## # h     | t       #
## #-----------------#
## #-----------------#
## [ 1,      2       ]
## [ 1,      2       ]
## [ 2,      3       ]
## [ 2,      3       ]
## 
## 
## The semantics of B is unclear within proc
## The semantics of B is unclear within proc
#
#var b:= new(int,int);
#proc error1(bat B) : void {
#error1(b);

>
# 18:14:26 >  
# 18:14:26 >  Done.
# 18:14:26 >  

