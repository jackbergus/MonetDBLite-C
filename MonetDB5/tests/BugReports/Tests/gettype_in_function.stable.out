stdout of test 'gettype_in_function` in directory 'monetdb5/tests/BugReports` itself:


# 13:09:36 >  
# 13:09:36 >   mserver5 "--config=/ufs/fabian/scratch/monetdb/current/program-x86_64/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/fabian/scratch/monetdb/current/program-x86_64/lib/MonetDB5:/ufs/fabian/scratch/monetdb/current/program-x86_64/lib/MonetDB5/lib:/ufs/fabian/scratch/monetdb/current/program-x86_64/lib/MonetDB5/bin" --set "gdk_dbfarm=/net/pegasus.ins.cwi.nl/export/scratch0/fabian/vtmp/mtest-current-pegasus.ins.cwi.nl/five/dbfarm" --set "sql_logdir=/net/pegasus.ins.cwi.nl/export/scratch0/fabian/vtmp/mtest-current-pegasus.ins.cwi.nl/five/sqllog" --set "xquery_logdir=/net/pegasus.ins.cwi.nl/export/scratch0/fabian/vtmp/mtest-current-pegasus.ins.cwi.nl/five/xquerylog" --set mapi_open=true --set xrpc_open=true --set mapi_port=39150 --set xrpc_port=46783 --set monet_prompt= --trace  --dbname=mTests_tests_BugReports  gettype_in_function.mal
# 13:09:36 >  





# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_tests_BugReports', using 2 threads
# Compiled for x86_64-pc-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2008 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:30579/
function user.typetest(o:any):void;
    t := inspect.getType(o);
    io.print(t);
end typetest;
function user.main():void;
# observed 13-08-2008: inspect.getType works fine local, but not in a 
# function on an argument with type :any 
# SF bug #2051258 
    p := "string";
    t := inspect.getType(p);
# here it is still a "str" 
    io.print(t);
# but now it is a "any", should be "str" 
    user.typetest(p);
# more fun with a BAT 
    b := bat.new(:oid,:int);
    (h,t) := inspect.getType(b);
# here it is what we expect 
    io.print(t);
# now it is "any" even though the above problem was fixed 
    user.typetest(b);
# even cooler, now suddenly a string is "any" too 
    user.typetest(p);
# extended 
    i := 1:int;
    d := bat.new(:oid,:flt);
    tii := inspect.getTypeIndex(i);
    io.print(tii);
    tni := inspect.getTypeName(tii);
    io.print(tni);
    tib := inspect.getTypeIndex(d);
    io.print(tib);
    (ht,tt) := inspect.getTypeIndex(d);
    io.print(ht,tt);
    tnb := inspect.getTypeName(tib);
    io.print(tnb);
    rev := bat.reverse(d);
    rid := inspect.getTypeIndex(rev);
    tns := inspect.getTypeName(rid);
    io.print(tns);
#type tests 
    z1 := inspect.equalType(i,:int);
    io.print(z1);
    z1 := inspect.equalType(d,:bat[:str,:flt]);
    io.print(z1);
    z1 := inspect.equalType(d,:int);
    io.print(z1);
end main;
[ "str" ]
[ "str" ]
[ "int" ]
[ "bat[:oid,:int]" ]
[ "str" ]
[ 5 ]
[ "int" ]
[ 9 ]
[ 6, 9]
[ "flt" ]
[ "oid" ]
[ true ]
[ false ]
[ false ]

# 12:26:33 >  
# 12:26:33 >  Done.
# 12:26:33 >  

