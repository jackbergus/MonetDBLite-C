# Monet Mil to Mal compiler
include mil;
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
	mil.line("# >Number:         51\n");
	mil.line("# >Category:       MIL\n");
	mil.line("# >Synopsis:       returns from within a batloop\n");
	mil.line("# >Confidential:   no\n");
	mil.line("# >Severity:       serious\n");
	mil.line("# >Priority:       medium\n");
	mil.line("# >Responsible:    boncz\n");
	mil.line("# >State:          closed\n");
	mil.line("# >Class:          sw-bug\n");
	mil.line("# >Submitter-Id:   unknown\n");
	mil.line("# >Arrival-Date:   Wed Oct 15 13:50:27 1997\n");
	mil.line("# >Originator:     niels\n");
	mil.line("# >Organization:\n");
	mil.line("# >Release:        971007\n");
	mil.line("# >Environment:\n");
	mil.line("# SOLARIS 2.5.1\n");
	mil.line("# >Description:\n");
	mil.line("# When a bat is returned from with a batloop the return value\n");
	mil.line("# is incorrect. \n");
	mil.line("# proc create(b) : bat {\n");
	mil.line("#         var a := new (oid,flt);\n");
	mil.line("#         b@batloop(){\n");
	mil.line("#                 if (a.count = 0)\n");
	mil.line("#                         return a;\n");
	mil.line("#         }\n");
	mil.line("#         return a;\n");
	mil.line("# }\n");
	mil.line("# \n");
	mil.line("# b := new (oid,flt);\n");
	mil.line("# b.insert(oid(1),flt(2));\n");
	mil.line("# var c := create(b);\n");
	mil.line("# b.semijoin(c).print;\n");
	mil.line("# #output\n");
	mil.line("# !WARNING: BATdescriptor: range error\n");
	mil.line("# !ERROR: interpret command/proc: 2nd param: invalid BAT.\n");
	mil.line("# [ nil ]\n");
	mil.line("proc create(bat b) : bat {");
function create(b:bat[:any_1,:any_2]):bat[:any_1,:any_2];
	mil.line("        var a := new (oid,flt);");
	a := bat.new(nil:oid,nil:flt);
	mil.line("        b@batloop(){");
barrier	(aa_a,aa_aH,aa_aT) := chop.newIterator(b);
	mil.line("                if (a.count() = 0)");
	ba_a := algebra.count(a);
barrier	ca_a := calc.==(ba_a,0);
	mil.line("                        return a;");
	return da_a :=a;
	mil.line("        }");
exit	ca_a;
redo	(aa_a,aa_aH,aa_aT) := chop.hasMoreElements(b);
exit	(aa_a,aa_aH,aa_aT) ;
	mil.line("        return a;");
	return ea_a :=a;
end create;
	mil.line("var b := new (oid,flt);");
	b := bat.new(nil:oid,nil:flt);
	mil.line("b.insert(oid(1),flt(2));");
	fa_a := calc.oid(1);
	ga_a := calc.flt(2);
	ha_a := bat.insert(b,fa_a,ga_a);
	mil.line("b.print();");
	ia_a := io.print(b);
	mil.line("var c := create(b);");
	c := user.create(b);
	mil.line("b.print();");
	ja_a := io.print(b);
	mil.line("c.print();");
	ka_a := io.print(c);
	mil.line("b.semijoin(c).print();");
	la_a := algebra.semijoin(b,c);
	ma_a := io.print(la_a);
	mil.line("quit();");
	na_a := clients.quit();
