stdout of test 'no.150` in directory 'tests/BugReports` itself:

#> Mtest:	milS no.150 milS
#> Mtest:	Mtimeout -timeout 210 Mserver -modulesilent -yaccsilent -d8 -db tests_BugReports -single no.150.milS
# Monet Database Server V4.1
# Copyright (c) 1993-1999, CWI & SION. All rights reserved.
# compiled for IRIX646.5/32bit on Fri Jan 14 19:36:03 MET 2000.
#script:no.150.milS


# Monet Database Server V4.3.5
# Copyright (c) 1993-2002, CWI. All rights reserved.
# compiled for i686-pc-linux-gnu/32bit; dynamically linked.
# >Number:         150
# >Category:       MIL
# >Synopsis:       Mserver crashes on non-existing module.
# >Confidential:   no
# >Severity:       critical
# >Priority:       high
# >Responsible:    boncz (Peter Boncz)
# >State:          open
# >Class:          sw-bug
# >Submitter-Id:   unknown
# >Arrival-Date:   Wed Apr  8 16:48:12 1998
# >Originator:     quak@cwi.nl
# >Organization:
# UvA
# >Release:        980101
# >Environment:
# solaris
# >Description:
# On solaris if you load a module which does not exist,
# the Mserver crashes. How to repeat:
# 
# Mclient
# > module("jabberwocky");
# 
function user.main():void;	# 0  (main:void)
# Monet Mil to Mal compiler 	# 1  (_1:str)
#include mil; 	# 2  (_2:str)
# Copyright (c) 2001-2004, CWI. All rights reserved. 	# 3  (_3:str)
#Predefined code segment 	# 4  (_4:str)
#The compiler can not guarantee an accurate compilation, 	# 5  (_5:str)
#because MIL unlike MAL is a dynamically typed language. 	# 6  (_6:str)
#A few guidelines to maximize usefullness. 	# 7  (_7:str)
#- make the type of variables explicit, in particular 'nil' 	# 8  (_8:str)
#- upon advice of M2m to remap identifiers, change it in your program directly 	# 9  (_9:str)
#use the "mil_schema" for additional support routines 	# 10  (_10:str)
#	mil.line("# >Number:         150\n"); 	# 11  (_11:str)
#	mil.line("# >Category:       MIL\n"); 	# 12  (_12:str)
#	mil.line("# >Synopsis:       Mserver crashes on non-existing module.\n"); 	# 13  (_13:str)
#	mil.line("# >Confidential:   no\n"); 	# 14  (_14:str)
#	mil.line("# >Severity:       critical\n"); 	# 15  (_15:str)
#	mil.line("# >Priority:       high\n"); 	# 16  (_16:str)
#	mil.line("# >Responsible:    boncz (Peter Boncz)\n"); 	# 17  (_17:str)
#	mil.line("# >State:          open\n"); 	# 18  (_18:str)
#	mil.line("# >Class:          sw-bug\n"); 	# 19  (_19:str)
#	mil.line("# >Submitter-Id:   unknown\n"); 	# 20  (_20:str)
#	mil.line("# >Arrival-Date:   Wed Apr  8 16:48:12 1998\n"); 	# 21  (_21:str)
#	mil.line("# >Originator:     quak@cwi.nl\n"); 	# 22  (_22:str)
#	mil.line("# >Organization:\n"); 	# 23  (_23:str)
#	mil.line("# UvA\n"); 	# 24  (_24:str)
#	mil.line("# >Release:        980101\n"); 	# 25  (_25:str)
#	mil.line("# >Environment:\n"); 	# 26  (_26:str)
#	mil.line("# solaris\n"); 	# 27  (_27:str)
#	mil.line("# >Description:\n"); 	# 28  (_28:str)
#	mil.line("# On solaris if you load a module which does not exist,\n"); 	# 29  (_29:str)
#	mil.line("# the Mserver crashes. How to repeat:\n"); 	# 30  (_30:str)
#	mil.line("# \n"); 	# 31  (_31:str)
#	mil.line("# Mclient\n"); 	# 32  (_32:str)
#	mil.line("# > module(\"jabberwocky\");\n"); 	# 33  (_33:str)
#	mil.line("# \n"); 	# 34  (_31:str)
#	mil.line("# (Under the assumption that the module \"jabberwocky\"\n"); 	# 35  (_34:str)
#	mil.line("# does not exist\n"); 	# 36  (_35:str)
#	mil.line("setoid(oid(20000000));"); 	# 37  (_36:str)
    aa_a := calc.oid(20000000);	# 38 CALCint2oid (aa_a:oid)<-(_38:int)
    ba_a := calc.setoid(aa_a);	# 39 CALCsetoidInc (ba_a:oid)<-(aa_a:oid)
#	mil.line("quit();"); 	# 40  (_40:str)
    ca_a := clients.quit();	# 41 CLTquit (ca_a:void)
end main;	# 42  

# 14:17:55 >  
# 14:17:55 >  Done.
# 14:17:55 >  

