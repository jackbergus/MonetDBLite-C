stdout of test 'no.150` in directory 'tests/BugReports` itself:


# 07:27:15 >  
# 07:27:15 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35545 --set monet_prompt= --trace --dbname=mTests_tests_BugReports  no.150.mal < /dev/null
# 07:27:15 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_tests_BugReports
# Visit http://monetdb.cwi.nl/ for further information
## Monet Mil to Mal compiler
##include mil;
## Copyright (c) 2001-2004, CWI. All rights reserved.
#
##Predefined code segment
##The compiler can not guarantee an accurate compilation,
##because MIL unlike MAL is a dynamically typed language.
##A few guidelines to maximize usefullness.
##- make the type of variables explicit, in particular 'nil'
##- upon advice of M2m to remap identifiers, change it in your program directly
##use the "mil_schema" for additional support routines
##	mil.line("# >Number:         150\n");
##	mil.line("# >Category:       MIL\n");
##	mil.line("# >Synopsis:       Mserver crashes on non-existing module.\n");
##	mil.line("# >Confidential:   no\n");
##	mil.line("# >Severity:       critical\n");
##	mil.line("# >Priority:       high\n");
##	mil.line("# >Responsible:    boncz (Peter Boncz)\n");
##	mil.line("# >State:          open\n");
##	mil.line("# >Class:          sw-bug\n");
##	mil.line("# >Submitter-Id:   unknown\n");
##	mil.line("# >Arrival-Date:   Wed Apr  8 16:48:12 1998\n");
##	mil.line("# >Originator:     quak@cwi.nl\n");
##	mil.line("# >Organization:\n");
##	mil.line("# UvA\n");
##	mil.line("# >Release:        980101\n");
##	mil.line("# >Environment:\n");
##	mil.line("# solaris\n");
##	mil.line("# >Description:\n");
##	mil.line("# On solaris if you load a module which does not exist,\n");
##	mil.line("# the Mserver crashes. How to repeat:\n");
##	mil.line("# \n");
##	mil.line("# Mclient\n");
##	mil.line("# > module(\"jabberwocky\");\n");
##	mil.line("# \n");
##	mil.line("# (Under the assumption that the module \"jabberwocky\"\n");
##	mil.line("# does not exist\n");
##	mil.line("setoid(oid(20000000));");
#	aa_a := calc.oid(20000000);
#	ba_a := calc.setoid(aa_a);
##	mil.line("quit();");
#	ca_a := clients.quit();
#
function user.main():void;              #  0 main:void := user.main() 
# Monet Mil to Mal compiler 
# Copyright (c) 2001-2004, CWI. All rights reserved. 
#Predefined code segment 
#The compiler can not guarantee an accurate compilation, 
#because MIL unlike MAL is a dynamically typed language. 
#A few guidelines to maximize usefullness. 
#- make the type of variables explicit, in particular 'nil' 
#- upon advice of M2m to remap identifiers, change it in your program directly 
#use the "mil_schema" for additional support routines 
#	io.print("# >Number:         150\n"); 
#	io.print("# >Category:       MIL\n"); 
#	io.print("# >Synopsis:       Mserver crashes on non-existing module.\n"); 
#	io.print("# >Confidential:   no\n"); 
#	io.print("# >Severity:       critical\n"); 
#	io.print("# >Priority:       high\n"); 
#	io.print("# >Responsible:    boncz (Peter Boncz)\n"); 
#	io.print("# >State:          open\n"); 
#	io.print("# >Class:          sw-bug\n"); 
#	io.print("# >Submitter-Id:   unknown\n"); 
#	io.print("# >Arrival-Date:   Wed Apr  8 16:48:12 1998\n"); 
#	io.print("# >Originator:     quak@cwi.nl\n"); 
#	io.print("# >Organization:\n"); 
#	io.print("# UvA\n"); 
#	io.print("# >Release:        980101\n"); 
#	io.print("# >Environment:\n"); 
#	io.print("# solaris\n"); 
#	io.print("# >Description:\n"); 
#	io.print("# On solaris if you load a module which does not exist,\n"); 
#	io.print("# the Mserver crashes. How to repeat:\n"); 
#	io.print("# \n"); 
#	io.print("# Mclient\n"); 
#	io.print("# > module(\"jabberwocky\");\n"); 
#	io.print("# \n"); 
#	io.print("# (Under the assumption that the module \"jabberwocky\"\n"); 
#	io.print("# does not exist\n"); 
#	io.print("setoid(oid(20000000));"); 
    aa_a := calc.oid(20000000);         # 37 aa_a:oid := CALCint2oid(_38:int) 
    ba_a := calc.setoid(aa_a);          # 38 ba_a:oid := CALCsetoidInc(aa_a:oid) 
#	io.print("quit();"); 
    ca_a := clients.quit();             # 40 ca_a:void := CLTquit() 
end main;	# 41  

# 07:27:15 >  
# 07:27:15 >  Done.
# 07:27:15 >  

