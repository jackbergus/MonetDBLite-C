# Monet Mil to Mal compiler
# Copyright (c) 2001-2004, CWI. All rights reserved.

#Predefined code segment
#The compiler can not guarantee an accurate compilation,
#because MIL unlike MAL is a dynamically typed language.
#A few guidelines to maximize usefullness.
#- make the type of variables explicit, in particular 'nil'
#- upon advice of M2m to remap identifiers, change it in your program directly
#use the "mil_schema" for additional support routines
#	io.print("setoid(oid(20000000));");
	aa_a := calc.oid(20000000);
	ba_a := setoid(aa_a);
#	io.print("#split w in twee tabellen\n");
	docid := bbp.new(nil:oid,nil:oid);
#	io.print("var tid := bbp.new( void, str );");
	tid := bbp.new(nil:oid,nil:str);
#	io.print("docid := w.mark(nil).reverse();");
	w:= mil.take("w");
	ca_a := mark(w,nil);
	docid := bat.reverse(ca_a);
#	io.print("docid.print();");
	da_a := bat.print(docid);
#	io.print("tid := w.reverse().mark(nil).reverse();");
	ea_a := bat.reverse(w);
	fa_a := mark(ea_a,nil);
	tid := bat.reverse(fa_a);
#	io.print("tid.print();");
	ga_a := bat.print(tid);
#	io.print("docid.seqbase( 1000@0 );");
#	io.print("docid.print();");
	ia_a := bat.print(docid);
#	io.print("tid.seqbase( 1000@0 );");
#	io.print("tid.print();");
	ka_a := bat.print(tid);
#	io.print("CTgroup( docid, tid ).print();");
	la_a := group(docid,tid);
	ma_a := bat.print(la_a);
#	io.print("quit();");
	na_a := clients.quit();
#Identifer 'CTgroup' mapped to 'group'
