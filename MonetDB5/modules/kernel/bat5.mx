@/
The contents of this file are subject to the MonetDB Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.monetdb.org/Legal/MonetDBLicense

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is the MonetDB Database System.

The Initial Developer of the Original Code is CWI.
Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
Copyright August 2008-2012 MonetDB B.V.
All Rights Reserved.
@

@f bat5

@c
/*
 * @v 2.0
 * @a Peter Boncz, M.L. Kersten
 * @+ Binary Association Tables
 * This module contains the commands and patterns to manage Binary
 * Association Tables (BATs). The relational operations you can execute
 * on BATs have the form of a neat algebra, described in algebra.mx
 *
 * But a database system needs more that just this algebra, since often it
 * is crucial to do table-updates (this would not be permitted in a strict
 * algebra).
 *
 * All commands needed for BAT updates, property management, basic I/O,
 * persistence, and storage options can be found in this module.
 *
 * All parameters to the modules are passed by reference.
 * In particular, this means that string values are passed to the module
 * layer as (str *)
 * and we have to de-reference them before entering the gdk library.
 * (Actual a design error in gdk to differentiate passing int/str)
 * This calls for knowledge on the underlying BAT types`s
 * @-
 */
@= derefStr
{ if( @1->@2type >= TYPE_str  && ATOMstorage(@1->@2type) >= TYPE_str)
 { if(@3== 0 || *(str*)@3==0) @3 = (str)str_nil;
   else @3 = *(str *)@3; 
}}
@
@mal
# @-
# The code speaks for itself
#
# #command access( b:bat[:any_1,:any_2], mode:int) :bat[:any_1,:any_2]
# #address BKCaccess;
#
# #command setSequenceBase( b:bat[:oid,:any_1], base:oid):void
# #address BKCsetSequenceBase
# #comment "Set the sequence base for the void column of a BAT.";
module bat;
command attach(tt:int, heapfile:str) :bat[:void,:any_1]
address BKCattach
comment "Returns a new BAT with dense head and tail of the given type and uses
        the given file to initialize the tail. The file will be owned by the
        server."

command densebat(size:wrd) :bat[:void,:void]
address BKCdensebat
comment "Creates a new [void,void] BAT of size 'size'."

command reverse(b:bat[:any_1,:any_2]) :bat[:any_2,:any_1] 
address BKCreverse
comment "Returns the reverse view of a BAT (head is tail and tail is head).
        BEWARE  no copying is involved; input and output refer to the 
        same object!";

command mirror(b:bat[:any_1,:any_2]) :bat[:any_1,:any_1] 
address BKCmirror
comment "Returns the head-mirror image of a BAT (two head columns).";

command order(b:bat[:any_1,:any_2]) :bat[:any_1,:any_2] 
address BKCorder
comment "Sorts the BAT itself on the head, in place. ";
command orderReverse(b:bat[:any_1,:any_2]) :bat[:any_1,:any_2] 
address BKCorder_rev
comment "Reverse sorts the BAT itself on the head, in place. ";

command revert(b:bat[:any_1,:any_2]) :bat[:any_1,:any_2] 
address BKCrevert
comment "Puts all BUNs in a BAT in reverse order.  (Belongs to the 
        BAT sequence module)";

# @+ BAT properties
# Properties of BATs not necessarily require loading the BAT completely.
# The BAT identifier can be used to access the descriptors.
# These properties can be inspected with the
# @emph{info(BAT[:any_1,:any_2]) :bat[str,str] } command:
# @verbatim
# > car_age.info.print;
# #---------------------------------#
# # BAT:               tmp_31       #
# # (str)              (str)        #
# #---------------------------------#
# [ "batId",           "car_age"    ] # logical bat name
# [ "batCacheid",      "26"         ] # BBP index
# [ "batParentid",     "0"          ] # set if a BAT is a view
# [ "head",            "void"       ] # physical head-type
# [ "tail",            "int"        ] # physical tail-type
# [ "batPersistence",  "persistent" ] # transient/session/persistent
# [ "batRestricted",   "updatable"  ] # read-only/append-only/updatable
# [ "batDirty",        "clean"      ] # clean/dirty
# [ "batRefcnt",       "1"          ] # physical refcount
# [ "batLRefcnt",      "1"          ] # logical refcount (total)
# [ "batPlevel",       "1"          ] # logical refcount (persistent part)
# [ "batSet",          "0"          ] # [head,tail] combinations are unique
# [ "batCopiedtodisk", "1"          ] # has been saved or not
# @end verbatim
#
# Per column, a number of properties are kept. We only show the head-properties; the tail properties
# have the first character of their named replaced by 't' (@emph{sorted}, @emph{tdense}, etc.):
#
# @verbatim
# [ "hsorted",         "1"          ] # column is known to be sorted
# [ "hdense",          "1"          ] # column is known to be densely ascended
# [ "hseqbase",        "0@0"        ] # if densely ascending first value
# @end verbatim
#
# As described in the @[<a href="www/gdk.html#mod_1_3_0">GDK Technical Reference</a>@,
# BATs store their data in one to six heaps. For each column type that is @emph{variable-sized} -
# like @emph{str} - another
# heap might be present (@emph{hheap} and @emph{theap}).
#
# @verbatim
# [ "head.free",    "400004"     ] # occupied size in bytes
# [ "head.size",    "400012"     ] # allocated size in bytes
# [ "head.maxsize", "400012"     ] # reserver virtual memory in bytes
# [ "head.storage", "malloced"   ] # malloced/mmap/priv
# @end verbatim
#
# Properties steer the algorithms that Monet uses to execute algebra command. For instance,
# the @emph{find(bat[:any_1,:any_2] b, :any_1) :any_2} that looks up a tail value by head,
# uses binary search if and only if the head column is sorted (in other cases, hash-lookup
# and scan are execution options).
#
# Sometimes new (extension) code contains bugs in the property management, leaving false
# properties on produced BATs. You can imagine that later on, this leads to additional
# bugs, as e,g, the binary search algorithms will yield erroneous results on a non-sorted
# sequence.
command info ( b:bat[:any_1,:any_2]) :bat[:str,:str] 
address BKCinfo
comment "Produce a BAT containing info about a BAT in [attribute,value] format. 
        It contains all properties of the BAT record. See the BAT documentation 
        in GDK for more information.";

command getSize ( b:bat[:any_1,:any_2]) :lng
address BKCbatsize
comment "Calculate the size of the BAT descriptor, heaps and indices in bytes.";

command getMemorySize ( b:bat[:any_1,:any_2]) :lng
address BKCbatvmsize
comment "Calculate the size of the BAT heaps and indices in bytes
rounded to the memory page size (see bbp.getPageSize()).";

command getDiskSize ( b:bat[:any_1,:any_2]) :lng
address BKCbatdisksize
comment "Approximate size of the (persistent) BAT heaps as stored on disk 
in pages of 512 bytes. Indices are not included, as they only live temporarily
in virtual memory.";

command getCapacity(b:bat[:any_1,:any_2]):lng 
address BKCgetCapacity
comment "Returns the current allocation size (in max number of elements) of a BAT.";

command getHeadType(b:bat[:any_1,:any_2] ) :str 
address BKCgetHeadType
comment "Returns the type of the head column of a BAT, as an integer type number.";

command getTailType( b:bat[:any_1,:any_2] ) :str 
address BKCgetTailType 
comment "Returns the type of the tail column of a BAT, as an integer type number.";

command getRole ( bid:bat[:any_1,:any_2] ) :str 
address BKCgetRole
comment "Returns the rolename of the head column of a BAT.";

command setKey( b:bat[:any_1,:any_2], mode:bit) :bat[:any_1,:any_2] 
address BKCsetkey
comment "Sets the 'key' property of the head column to 'mode'. In 'key' mode, 
        the kernel will silently block insertions that cause a duplicate 
        entries in the head column. KNOWN BUG:when 'key' is set to TRUE, this 
	function does not automatically eliminate duplicates. 
        Use b := b.kunique;";

command isaKey( b:bat[:any_1,:any_2]) :bit 
address BKCgetKey
comment "return whether the head column of a BAT is unique (key).";

command setSet( b:bat[:any_1,:any_2], mode:bit) :bat[:any_1,:any_2] 
address BKCsetSet
comment "Sets the 'set' property on this BAT to 'mode'. In 'set' mode, 
        the kernel will silently block insertions that cause a duplicate 
        BUN [head,tail] entries in the BAT.  KNOWN BUG:when 'set' is set 
        to TRUE, this function does not automatically eliminate duplicates. 
        Use b := b.sunique; Returns the BAT itself.";

command isaSet( b:bat[:any_1,:any_1]) :bit 
address BKCisaSet
comment "return whether the BAT mode is set to unique.";

command setAccess( b:bat[:any_1,:any_2], mode:str) :bat[:any_1,:any_2]
address BKCsetAccess
comment "Try to change the update access priviliges 
	to this BAT. Mode:
	 r[ead-only]      - allow only read access.
	 a[append-only]   - allow reads and update.
	 w[riteable]      - allow all operations.
	BATs are updatable by default. On making a BAT read-only, 
        all subsequent updates fail with an error message.Returns 
        the BAT itself.";

command setAppendMode( b:bat[:any_1,:any_2]) :bat[:any_1,:any_2]
address BKCsetAppendMode
comment "Change access privilige of BAT to append only";

command setReadMode( b:bat[:any_1,:any_2]) :bat[:any_1,:any_2]
address BKCsetReadMode
comment "Change access privilige of BAT to read only";

command setWriteMode( b:bat[:any_1,:any_2]) :bat[:any_1,:any_2]
address BKCsetWriteMode
comment "Change access privilige of BAT to read and write";

command getAccess( b:bat[:any_1,:any_2]):str 
address BKCgetAccess
comment "return the access mode attached to this BAT as a character.";

command hasAppendMode( b:bat[:any_1,:any_2]):bit 
address BKChasAppendMode
comment "return true if to this BAT is append only.";

command hasWriteMode( b:bat[:any_1,:any_2]):bit 
address BKChasWriteMode
comment "return true if to this BAT is read and write.";

command hasReadMode( b:bat[:any_1,:any_2]):bit 
address BKChasReadMode
comment "return true if to this BAT is read only.";


command getSequenceBase( b:bat[:oid,:any_1]):oid 
address BKCgetSequenceBase
comment "Get the sequence base for the void column of a BAT.";

command isSorted(b:bat[:any_1,:any_2]) :bit 
address BKCisSorted
comment "Returns whether a BAT is ordered on head or not.";
command isSortedReverse(b:bat[:any_1,:any_2]) :bit 
address BKCisSortedReverse
comment "Returns whether a BAT is ordered on head or not.";

command getStorageSize(b:bat[:any_1,:any_2]) :lng 
address BKCgetStorageSize
comment "Determine the total space (in bytes) reserved for a BAT.";

command getSpaceUsed(b:bat[:any_1,:any_2]) :lng 
address BKCgetSpaceUsed
comment "Determine the total space (in bytes) occupied by a BAT.";

# @- BAT updates
# Update commands come in many disguises.  Note that we don;t return
# the BAT id, but merely a success/failure code.
command insert(b:bat[:any_1,:any_2], src:bat[:any_1,:any_2]):bat[:any_1,:any_2]
address BKCinsert_bat
comment "Insert all BUNs of the second BAT into the first.";

command insert(b:bat[:any_1,:any_2], src:bat[:any_1,:any_2], force:bit):bat[:any_1,:any_2]
address BKCinsert_bat_force
comment "Insert all BUNs of the second BAT into the first.";

command insert(b:bat[:any_1,:any_2], h:any_1, t:any_2) :bat[:any_1,:any_2]
address BKCinsert_bun
comment "Insert one BUN[h,t] in a BAT.";

command insert(b:bat[:any_1,:any_2], h:any_1, t:any_2, force:bit) :bat[:any_1,:any_2]
address BKCinsert_bun_force
comment "Insert one BUN[h,t] in a BAT.";

# @+
command replace(b:bat[:any_1, :any_2], src:bat[:any_1,:any_2]) :bat[:any_1,:any_2]
address BKCreplace_bat
comment "Perform replace for all BUNs of the second BAT into the first.";

command replace(b:bat[:any_1, :any_2], src:bat[:any_1,:any_2], force:bit) :bat[:any_1,:any_2]
address BKCreplace_bat_force
comment "Perform replace for all BUNs of the second BAT into the first.";

command replace(b:bat[:any_1, :any_2], h:any_1, t:any_2) :bat[:any_1,:any_2]
address BKCreplace_bun
comment "Replace the tail value of one BUN that has some head value.";

command replace(b:bat[:any_1, :any_2], h:any_1, t:any_2, force:bit) :bat[:any_1,:any_2]
address BKCreplace_bun_force
comment "Replace the tail value of one BUN that has some head value.";
# @-
# The SQL append/inplace commands
command append( i:bat[:any_1,:any_2], u:bat[:any_1,:any_2] ) :bat[:any_1,:any_2]
address BKCappend_wrap
comment "append the content of u to i";

command append( i:bat[:any_1,:any_2], u:bat[:any_1,:any_2], force:bit ) :bat[:any_1,:any_2]
address BKCappend_force_wrap
comment "append the content of u to i";

command append(i:bat[:oid,:any_1], u:any_1):bat[:oid,:any_1]
address BKCappend_val_wrap
comment "append the value u to i";

command append(i:bat[:void,:any_1], u:any_1):bat[:void,:any_1]
address BKCappend_val_wrap
comment "append the value u to i";

command append(i:bat[:any_1,:void], u:any_1):bat[:any_1,:void]
address BKCappend_reverse_val_wrap
comment "append the value u to i";

command append(i:bat[:any_1,:any_2], u:any_2, force:bit):bat[:any_1,:any_2]
address BKCappend_val_force_wrap
comment "append the value u to i";

command inplace( o:bat[:any_1,:any_2], id:any_1, t:any_2) :bat[:any_1,:any_2]
address BKCbun_inplace
comment "inplace replace values on the given locations";

command inplace( o:bat[:any_1,:any_2], d:bat[:any_1,:any_2]) :bat[:any_1,:any_2]
address BKCbat_inplace
comment "inplace replace values on the given locations";

command inplace( o:bat[:any_1,:any_2], id:any_1, t:any_2, force:bit) :bat[:any_1,:any_2]
address BKCbun_inplace_force
comment "inplace replace values on the given locations";

command inplace( o:bat[:any_1,:any_2], d:bat[:any_1,:any_2], force:bit) :bat[:any_1,:any_2]
address BKCbat_inplace_force
comment "inplace replace values on the given locations";

command delete(b:bat[:any_1, :any_2], h:any_1, t:any_2) :bat[:any_1,:any_2]
address BKCdelete_bun
comment "Delete one specific BUN.";

command delete(b:bat[:any_1, :any_2], h:any_1) :bat[:any_1,:any_2]
address BKCdelete
comment "Delete all BUNs with a certain tail value.";

command delete(b:bat[:any_1, :any_2]) :bat[:any_1,:any_2]
address BKCdelete_all
comment "Delete all BUNs in a BAT.";

command deleteHead(b:bat[:any_1, :any_2], src:bat[:any_1,:any]) :void
address BKCdelete_bat
comment "Delete from the first BAT all BUNs with a corresponding head  
        in the second.";

command delete(b:bat[:any_1, :any_2], src:bat[:any_1,:any_2]) :bat[:any_1,:any_2]
address BKCdelete_bat_bun
comment "Delete from the first BAT all BUNs with a corresponding BUN 
        in the second.";

command getAlpha(b:bat[:any_1,:any_2]) :bat[:any_1,:any_2] 
address BKCgetAlpha
comment "Obtain the list of BUNs added";
command getDelta(b:bat[:any_1,:any_2]) :bat[:any_1,:any_2] 
address BKCgetDelta
comment "Obtain the list of BUNs deleted";
# @- BAT I/O, Persistency
# The BAT Buffer Pool (BBP) manages all known BATs. It administers
# their logical and physical names and a reference count. BATs can
# either be @emph{persistent} or @emph{transient}. The BBP also manages
# swapping on a BAT level:a BAT is either loaded entirely or not.
# MAL variables of type @emph{bat} can either be loaded or not. When
# the Monet server is started, all BATs are swapped out. If an unloaded
# bat-variable is used as an operand in a command, it is automatically
# loaded.  The BBP applies a simple but effective LRU based swapping
# algorithm. BATs have a @emph{heat}, which drops over time, and is
# increased when a BAT is used by some command.  If the size of the
# allocated arena gets to be large, BATs may be swapped out.
#
# Note, we should move old-fashioned mil operator definitions
# into a separate module.
command setName ( b:bat[:any_1,:any_2] , s:str) :void
address BKCsetName
comment "Give a logical name to a BAT. ";

command getName ( b:bat[:any_1,:any_2]) :str 
address BKCgetBBPname
comment "Gives back the logical name of a BAT.";

command setRole( b:bat[:any_1,:any_2], h:str, t:str) :void
address BKCsetRole
comment "Give a logical name to the columns of a BAT.";

command setColumn( b:bat[:any_1,:any_2], t:str) :void
address BKCsetColumn
comment "Give a logical name to the tail column of a BAT.";
command setColumn( b:bat[:any_1,:any_2], h:str, t:str) :void
address BKCsetColumns
comment "Give both columns of a BAT a new name.";


command isTransient( b:bat[:any_1,:any_2]) :bit 
address BKCisTransient;
command setTransient( b:bat[:any_1,:any_2]) :void
address BKCsetTransient
comment "Make the BAT transient.  Returns 
	boolean which indicates if the
BAT administration has indeed changed.";

command isPersistent( b:bat[:any_1,:any_2]) :bit 
address BKCisPersistent;
command setPersistent( b:bat[:any_1,:any_2],f:bit) :void
address BKCpersists
comment "Backward compatibility";
command setPersistent( b:bat[:any_1,:any_2]) :void
address BKCsetPersistent
comment "Make the BAT persistent.";

command save(nme:bat[:any_1,:any_2]) :void
address BKCsave2;

command save(nme:str) :bit 
address BKCsave
comment "Save a BAT to storage, if it was loaded and dirty.  
        Returns whether IO was necessary.  Please realize that 
	calling this function violates the atomic commit protocol!!";


command load(name:str) :bat[:any_1,:any_2] 
address BKCload
comment "Load a particular BAT from disk";

command unload(name:str) :bit 
address BKCunload
comment "Swapout a BAT to disk. Transient BATs can also be swapped out.     
        Returns whether the unload indeed happened. ";

command isCached(b:bat[:any_1,:any_2]):bit 
address BKCisCached
comment "Bat is stored in main memory.";

command getHeat(b:bat[:any_1,:any_2]) :lng 
address BKCheat
comment "Return the current BBP heat (LRU stamp)";

command setCold(b:bat[:any_1,:any_1]) :void 
address BKCcoldBAT
comment "Makes a BAT very cold for the BBP. The chance of being choses 
        for swapout is big, afterwards.";
command setHot(b:bat[:any_1,:any_2]) :void 
address BKChotBAT
comment "Makes a BAT very hot for the BBP. The chance of being chosen for 
        swapout is small, afterwards.";

# @- Heap Specific Commands
# BATs are stored in memory in a number of Heap objects. A heap is nothing
# more than a contiguous range of memory. Bats are saved to disk by just writing
# away their image. This approach without pointer swizzling makes it possible
# to either load an image into an alloced range of memory (STORE_MEM), or
# memory-map (STORE_MMAP) an image into virtual memory.
#
# The heap images of a BAT are stored in the @emph{$MONETHOME/dbfarm/$DB/bat/}
# directory.  For each bat X, the following heaps are stored:
# @table @code
# @item[X.buns]
#     an array with all the fixed-size parts of all BUNs.
# @item[X.hheap]
#     if the head column contains a variable sized atoms (e.g. str),
# then the fixed-size part of a BUN contains an integer byte-offset into
# the heap. String values themselves are stored in this the X.hheap.
# @item[X.theap]
#     similar to X.hheap, but for the tail column.
# @item[X.desc]
# the BAT descriptor. Stores most of the properties of a BAT.
# @end table
#
# Each of these heaps can be compressed using the Unix @emph{compress}
# utility forming a X.ext.Z file. Monet will automatically decompress it
# upon load. Compressed heaps cannot be memory mapped.
#
#
# For more technical information on BATs, we refer to the
# @[<a href="http://www.cwi.nl/~monet/www/scw/gdk/470_pseudo.html">GDK</a>@
# documentation.
command setMemoryMap(b:bat[:any_1,:any_2], head_mode:int, tail_mode:int, hheap_mode:int, theap_mode:int) :bit 
address BKCmmap
comment "For each individual heap, you can change the allocation mode 
        to either STORE_MEM or STORE_MMAP. Passing an int(nil) means:
        no change.  Changing a dirty STORE_MEM heap into STORE_MMAP, 
	will cause a BAT save (this has to happen before the heap can 
        be mapped into virtual memory). These modes are persistent. ";

command setMemoryMap(b:bat[:any_1,:any_2], mode:int):bit 
address BKCmmap2
comment "Alias for mmap(b, mode, mode, mode, mode)";

command setMemoryAdvise(b:bat[:any_1,:any_2], head_mode:int, tail_mode:int, hheap_mode:int, theap_mode:int) :bit 
address BKCmadvise
comment "Modern Operating Systems allow users to influence the buffer 
        management policy of virtual memory. This is a crucial feature 
        for database systems, and eliminates the need to reimplement 
	the OS in a database buffer manager.  The supported flags are 
        BUF_NORMAL (the normal adaptive kernel algorithm),
	BUF_RANDOM (no page prefetching), 
	BUF_SEQUENTIAL (prefetch and swapout),
	BUF_WILLNEED (load everything with prefetch), 
	BUF_DONTNEED (swapout).
	These buffer management modes are not persistent. 
	Returns the BAT operated upon.";

command setMemoryAdvise(b:bat[:any_1,:any_2], mode:int):bit 
address BKCmadvise2
comment "alias for madvise(b, mode, mode, mode, mode)";

command setHash(b:bat[:any_1,:any_2],prop:bit):bit 
address BKCsetHash;

# @- Synced BATs
# The binary model of Monet has important advantages when working in
# main-memory. Tables are thin and very efficiently processed. The binary
# model gives rise, however, to a larger-than-normal number of join
# and semijoin operations. Relations are split up in vertical parts that
# are very much related to each other. Then, for instance, multiple
# similar semijoins occur on different vertical parts. By equipping the
# kernel with knowledge about the correspondence of these parts, we
# can greatly limit the amount of work to be done.
#
# When two BATs effectively contain the same sequence of head elements,
# we call them 'synced'. This is implemented by storing a very large
# OID for each column. An update to the column destroys this OID.
# By comparing two OIDs the Monet kernel can very quickly decide that
# two columns are exactly equal. All BAT algebra operations propagate
# these 'sync' OIDs with their own propagation rules.
command isSynced (b1:bat[:any_1,:any_2], b2:bat[:any_3,:any_4]) :bit 
address BKCisSynced
comment "Tests whether two BATs are synced or not. ";

# @- Constants
# The following constants have not been integrated in the code base
#
# #Constants have been added to mal/const.mx prelude
# #    STORE_MEM   := 0;     # load into GDKmalloced memory
# #    STORE_MMAP  := 1;     # mmap() into virtual memory
# #    STORE_COMPR := 2;     # currently not implemented this way
# #    BUF_NORMAL    := 0;   # No further special treatment
# #    BUF_RANDOM    := 1;   # Expect random page references
# #    BUF_SEQUENTIAL:= 2;   # Expect sequential page references
# #    BUF_WILLNEED  := 3;   # Will need these pages
# #    BUF_DONTNEED  := 4;   # Don't need these pages
#
# @- Shrinking BATs
# The SQL front-end uses a multi-BAT representation for relational tables.
# This includes a list of tuples to be deleted at some convenient time.
# The primitives to consolidate the information consists of shrink()
# and reuse().
# The former simply compresses the underlying BAT skipping over all
# oids mentioned as to-be-deleted. The reuse() operator takes the tail
# of the BAT an fills all the holes that occur due to the deletion list.
command shrink(b:bat[:oid,:any_1],del:bat[:oid,:oid]):bat[:oid,:any_1]
address BKCshrinkBAT
comment "Shrink the BAT based on a list of entries identified as to-be-deleted";

command shrinkMap(b:bat[:oid,:any_1],del:bat[:oid,:oid]):bat[:oid,:oid]
address BKCshrinkBATmap
comment "Derive the oid mapping for shrink BAT based on list of to-be-deleted";

command reuse(b:bat[:oid,:any_1],del:bat[:oid,:oid]):bat[:oid,:any_1]
address BKCreuseBAT
comment "Shuffle the values around to restore a dense representation of buns.";

command reuseMap(b:bat[:oid,:any_1],del:bat[:oid,:oid]):bat[:oid,:oid]
address BKCreuseBATmap
comment "Derive the oid mapping for reuse BAT based on list of to-be-deleted";

@h
/*
 * @+ Implementation Code
 * In Version 5, we are not going to support recursive BATs.
 * It is up to the programmer to translate a bat into a
 * bat-name or batCacheid
 */
#ifndef _BAT_H_
#define _BAT_H_

#include <mal.h>
#include <gdk.h>

#ifdef WIN32
#if !defined(LIBMAL) && !defined(LIBATOMS) && !defined(LIBKERNEL) && !defined(LIBMAL) && !defined(LIBOPTIMIZER) && !defined(LIBSCHEDULER) && !defined(LIBMONETDB5)
#define bat5_export extern __declspec(dllimport)
#else
#define bat5_export extern __declspec(dllexport)
#endif
#else
#define bat5_export extern
#endif

bat5_export char *BKCsetRole(int *r, int *bid, char **hname, char **tname);
bat5_export char *BKCdestroyImmediate(signed char *r, int *bid);
bat5_export char *BKCgetAlpha(int *r, int *bid);
bat5_export char *BKCgetDelta(int *r, int *bid);
bat5_export char *BKCinsert_bun(int *r, int *bid, ptr h, ptr t);
bat5_export char *BKCinsert_bun_force(int *r, int *bid, ptr h, ptr t, bit *force);
bat5_export char *BKCdelete(int *r, int *bid, ptr h);
bat5_export char *BKCdelete_bat(int *r, int *bid, int *bnid);
bat5_export char *BKCdelete_bun(int *r, int *bid, ptr h, ptr t);
bat5_export char *BKCdestroy(signed char *r, int *bid);
bat5_export char *BKCbat_append_void_bat_wrap(int *r, int *bid, int *uid);
bat5_export char * BKCbat_append_val_wrap(int *r, int *bid, ptr u);
bat5_export str BKCnewBAT(int *res, int *ht, int *tt, BUN *cap);
bat5_export str BKCattach(int *ret, int *tt, str *heapfile);
bat5_export str BKCdensebat(int *ret, wrd *size);
bat5_export str BKCreverse(int *ret, int *bid);
bat5_export str BKCmirror(int *ret, int *bid);
bat5_export str BKCrevert(int *ret, int *bid);
bat5_export str BKCorder(int *ret, int *bid);
bat5_export str BKCorder_rev(int *ret, int *bid);
bat5_export str BKCinsert_bat(int *r, int *bid, int *sid);
bat5_export str BKCinsert_bat_force(int *r, int *bid, int *sid, bit *force);
bat5_export str BKCreplace_bun(int *r, int *bid, ptr h, ptr t);
bat5_export str BKCreplace_bat(int *r, int *bid, int *sid);
bat5_export str BKCreplace_bun_force(int *r, int *bid, ptr h, ptr t, bit *force);
bat5_export str BKCreplace_bat_force(int *r, int *bid, int *sid, bit *force);
bat5_export str BKCdelete_all(int *r, int *bid);
bat5_export str BKCdelete_bat_bun(int *r, int *bid, int *sid);
bat5_export str BKCdelete_bat(int *r, int *bid, int *sid);
bat5_export str BKCdestroy_bat(bit *r, str *input);
bat5_export str BKCappend_wrap(int *r, int *bid, int *uid);
bat5_export str BKCappend_val_wrap(int *r, int *bid, ptr u);
bat5_export str BKCappend_reverse_val_wrap(int *r, int *bid, ptr u);
bat5_export str BKCappend_force_wrap(int *r, int *bid, int *uid, bit *force);
bat5_export str BKCappend_val_force_wrap(int *r, int *bid, ptr u, bit *force);
bat5_export str BKCbun_inplace(int *r, int *bid, oid *id, ptr t);
bat5_export str BKCbat_inplace(int *r, int *bid, int *rid);
bat5_export str BKCbun_inplace_force(int *r, int *bid, oid *id, ptr t, bit *force);
bat5_export str BKCbat_inplace_force(int *r, int *bid, int *rid, bit *force);
bat5_export str BKCgetCapacity(lng *res, int *bid);
bat5_export str BKCgetHeadType(str *res, int *bid);
bat5_export str BKCgetTailType(str *res, int *bid);
bat5_export str BKCgetRole(str *res, int *bid);
bat5_export str BKCsetkey(int *res, int *bid, bit *param);
bat5_export str BKCsetSet(int *res, int *bid, bit *param);
bat5_export str BKCisaSet(bit *res, int *bid);
bat5_export str BKCisSorted(bit *res, int *bid);
bat5_export str BKCisSortedReverse(bit *res, int *bid);
bat5_export str BKCgetKey(bit *ret, int *bid);
bat5_export str BKCpersists(int *r, int *bid, bit *flg);
bat5_export str BKCsetPersistent(int *r, int *bid);
bat5_export str BKCisPersistent(bit *res, int *bid);
bat5_export str BKCsetTransient(int *r, int *bid);
bat5_export str BKCisTransient(bit *res, int *bid);
bat5_export str BKCaccess(int *res, int *bid, int *m);
bat5_export str BKCsetAccess(int *res, int *bid, str *param);
bat5_export str BKCgetAccess(str *res, int *bid);
bat5_export str BKCinfo(int *retval, int *bid);
bat5_export str BKCbatsize(lng *tot, int *bid);
bat5_export str BKCbatvmsize(lng *tot, int *bid);
bat5_export str BKCbatdisksize(lng *tot, int *bid);
bat5_export str BKCgetStorageSize(lng *tot, int *bid);
bat5_export str BKCgetSpaceUsed(lng *tot, int *bid);
bat5_export str BKCgetStorageSize_str(lng *tot, str batname);
bat5_export str BKCisSynced(bit *ret, int *bid1, int *bid2);
bat5_export str BKCsetColumn(int *r, int *bid, str *tname);
bat5_export str BKCsetColumns(int *r, int *bid, str *hname, str *tname);
bat5_export str BKCsetName(int *r, int *bid, str *s);
bat5_export str BKCgetBBPname(str *ret, int *bid);
bat5_export str BKCunload(bit *res, str *input);
bat5_export str BKCisCached(bit *res, int *bid);
bat5_export str BKCload(int *res, str *input);
bat5_export str BKChot(int *res, str *input);
bat5_export str BKCcold(int *res, str *input);
bat5_export str BKCcoldBAT(int *res, int *bid);
bat5_export str BKCheat(int *res, str *input);
bat5_export str BKChotBAT(int *res, int *bid);
bat5_export str BKCsave(bit *res, str *input);
bat5_export str BKCsave2(int *r, int *bid);
bat5_export str BKCmmap(bit *res, int *bid, int *hbns, int *tbns, int *hhp, int *thp);
bat5_export str BKCmmap2(bit *res, int *bid, int *bns);
bat5_export str BKCmadvise(bit *res, int *bid, int *hbns, int *tbns, int *hhp, int *thp);
bat5_export str BKCmadvise2(bit *res, int *bid, int *mode);
bat5_export str BKCaccbuild(int *ret, int *bid, str *acc, ptr *param);
bat5_export str BKCaccbuild_std(int *ret, int *bid, int *acc);
bat5_export str BKCsetHash(bit *ret, int *bid, bit *prop);
bat5_export str BKCsetSequenceBase(int *r, int *bid, oid *o);
bat5_export str BKCsetSequenceBaseNil(int *r, int *bid, oid *o);
bat5_export str BKCgetSequenceBase(oid *r, int *bid);
bat5_export str BKCshrinkBAT(int *ret, int *bid, int *did);
bat5_export str BKCreuseBAT(int *ret, int *bid, int *did);
bat5_export str BKCshrinkBATmap(int *ret, int *bid, int *did);
bat5_export str BKCreuseBATmap(int *ret, int *bid, int *did);

#endif /*_BAT_H_*/

@c
#include "monetdb_config.h"
#include "bat5.h"
#include "mal_exception.h"
/*
 * @-
 */
@= batconvert
	(BAT@2type(@1) == TYPE_bat)?(ptr)&((BAT*)@2)->batCacheid:(ptr)@2

@
@c
/*
 * @+ Information Functions
 */

static int
CMDnew(BAT **ret, int *ht, int *tt, BUN *cap)
{
	*ret = BATnew(*ht, *tt, *cap);
	if (*ret)
		(*ret)->batDirty |= 2;
	return (*ret) ? GDK_SUCCEED : GDK_FAIL;
}

static int
CMDattach(BAT **ret, int *tt, str heapfile)
{
	*ret = BATattach(*tt, heapfile);
	return *ret ? GDK_SUCCEED : GDK_FAIL;
}

static int
CMDdensebat(BAT **ret, wrd *size)
{
	BAT *b;

	if (*size < 0)
		*size = 0;
	if (*size > (wrd) BUN_MAX)
		*size = (wrd) BUN_MAX;
	*ret = b = BATnew(TYPE_void, TYPE_void, (BUN) *size);
	if (b == NULL)
		return GDK_FAIL;
	b->batDirty = 1;
	b->hseqbase = 0;
	b->tseqbase = 0;
	BATkey(b, TRUE);
	BATkey(BBP_cache(-b->batCacheid), TRUE);
	BATsetcount(b, (BUN) *size);
	return GDK_SUCCEED;
}

static int
CMDreverse(BAT **ret, BAT *b)
{
	*ret = BATmirror(b);
	BBPfix(b->batCacheid);
	return GDK_SUCCEED;
}

static int
CMDmirror(BAT **ret, BAT *b)
{
	BAT *v = *ret = VIEWcombine(b);

	if (b->batRestricted == BAT_WRITE) {
		*ret = BATcopy(v, v->htype, v->ttype, FALSE);
		BBPreclaim(v);
	}
	return (*ret) ? GDK_SUCCEED : GDK_FAIL;
}

/*
 * @-
 * The next collection of operators fill a hole in the MonetDB kernel libraries.
 * It provide handy operations on void-BATs.
 */
static BAT *
lock_desc(bat bid)
{
	BBPfix(bid);
	return (BAT *) BBPgetdesc(bid);
}

static void
unlock_desc(bat bid)
{
	BBPunfix(bid);
}

static int
CMDcapacity(lng *res, int *bid)
{
	if (BBPcheck((bat) *bid, "CMDcapacity")) {
		BAT *b = lock_desc((bat) *bid);

		if (b == NULL) {
			*res = lng_nil;
		} else {
			*res = (lng) BATcapacity(b);
		}
		unlock_desc(*bid);
	}
	return GDK_SUCCEED;
}

static int
CMDhead(str *res, int *bid)
{
	if (BBPcheck((bat) *bid, "CMDhead")) {
		str ret = (str)str_nil;
		BAT *b = lock_desc((bat) *bid);

		if (b) {
			ret = *bid > 0 ? ATOMname(b->htype) : ATOMname(b->ttype);
		}
		*res = GDKstrdup(ret);
		unlock_desc(*bid);
	} else {
		*res = GDKstrdup(str_nil);
	}
	return GDK_SUCCEED;
}

static int
CMDtail(str *res, int *bid)
{
	if (BBPcheck((bat) *bid, "CMDtail")) {
		str ret = (str)str_nil;
		BAT *b = lock_desc((bat) *bid);

		if (b) {
			ret = *bid > 0 ? ATOMname(b->ttype) : ATOMname(b->htype);
		}
		*res = GDKstrdup(ret);
		unlock_desc(*bid);
	} else {
		*res = GDKstrdup(str_nil);
	}
	return GDK_SUCCEED;
}

static int
CMDgetkey(bit *ret, BAT *b)
{
	/* we must take care of the special case of a nil column (TYPE_void,seqbase=nil)
	 * such nil columns never set hkey (and BUNins will never invalidate it if set) yet
	 * a nil column of a BAT with <= 1 entries does not contain doubles => return TRUE.
	 */
	if (BATcount(b) <= 1) {
		*ret = TRUE;
	} else {
		if (!b->hkey) {
			BATderiveHeadProps(b, 1);
		}
		*ret = b->hkey ? TRUE : FALSE;
	}
	return GDK_SUCCEED;
}

static int
CMDdestroy(bit *res, str input )
{
	int bid = BBPindex(input);

	*res = FALSE;
	if (bid) {
		BBPfix(bid);
		if (BBPindex(input) == bid) {
			BAT *b = (BAT*)BBPgetdesc(ABS(bid));

			BATmode(b, TRANSIENT);
			*res = TRUE;
		}
		BBPunfix(bid);
	}
	return GDK_SUCCEED;
}

static int
CMDsetaccess(BAT **r, BAT *input, int *param)
{
	bat oldCacheid = input->batCacheid;

	*r = BATsetaccess(input, *param);
	if ((*r)->batCacheid == oldCacheid) {
		BBPfix(oldCacheid);
	}
	return GDK_SUCCEED;
}

static char *
pre(str s1, str s2)
{
	static char buf[64];

	snprintf(buf, 64, "%s%s", s1, s2);
	return buf;
}
static char *
local_itoa(ssize_t i)
{
	static char buf[32];

	snprintf(buf, 32, SSZFMT, i);
	return buf;
}
static char *
local_utoa(size_t i)
{
	static char buf[32];

	snprintf(buf, 32, SZFMT, i);
	return buf;
}

#define COLLISION 64 

static void
HASHinfo(BAT *bn, Hash *h, str s)
{
	BUN i;
	BUN j;
	BUN k;
	BUN cnt[COLLISION + 2];

	BUNins(bn, pre(s, "type"), ATOMname(h->type),FALSE);
	BUNins(bn, pre(s, "mask"), local_utoa(h->mask),FALSE);
	BUNins(bn, pre(s, "lim"), local_utoa(h->lim),FALSE);

	for (i = 0; i <= COLLISION + 1; i++) {
		cnt[i] = 0;
	}
	for (i = 0; i <= h->mask; i++) {
		if (h->hash[i] == BUN_NONE) {
			cnt[0]++;
		} else if (h->hash[i] > h->lim) {
			GDKerror("HASHinfo: hash consistency problem " BUNFMT "\n", i);
		} else {
			j = HASHlist(h, h->hash[i]);
			for (k = 0; j; k++)
				j >>= 1;
			cnt[k]++;
		}
	}

	for (i = 0; i <= COLLISION + 1; i++)
		if (cnt[i]) {
			BUNins(bn, pre(s, local_itoa((ssize_t) (i?(((ssize_t)1)<<(i-1)):0))), local_utoa((size_t) cnt[i]), FALSE);
		}
}

static void
infoHeap(BAT *bn, Heap *hp, str nme)
{
	char buf[1024], *p = buf;

	if (!hp)
		return;
	while (*nme)
		*p++ = *nme++;
	strcpy(p, "free");
	BUNins(bn, buf, local_utoa(hp->free),FALSE);
	strcpy(p, "size");
	BUNins(bn, buf, local_utoa(hp->size),FALSE);
	strcpy(p, "maxsize");
	BUNins(bn, buf, local_utoa(hp->maxsize),FALSE);
	strcpy(p, "storage");
	BUNins(bn, buf, (hp->base == NULL || hp->base == (char*)1) ? "absent" : (hp->storage == STORE_MMAP) ? (hp->filename ? "memory mapped" : "anonymous vm") : (hp->storage == STORE_PRIV) ? "private map" : "malloced",FALSE);
	strcpy(p, "newstorage");
	BUNins(bn, buf, (hp->newstorage == STORE_MEM) ? "malloced" : (hp->newstorage == STORE_PRIV) ? "private map" : "memory mapped",FALSE);
	strcpy(p, "filename");
	BUNins(bn, buf, hp->filename ? hp->filename : "no file",FALSE);
}

static char *
oidtostr(oid i)
{
	int len = 48;
	static char bf[48];
	char *p = bf;

	(void) OIDtoStr(&p, &len, &i);
	return bf;
}

static int
CMDinfo(BAT **retval, BAT *b)
{
	BAT *bn;
	char mode[1024], *accessmode;

	if (!(bn = BATnew(TYPE_str, TYPE_str, 128)))
		return GDK_FAIL;
	*retval = bn;

	if (b->batPersistence == PERSISTENT) {
		strcpy(mode, "persistent");
	} else if (b->batPersistence == SESSION) {
		strcpy(mode, "session");
	} else if (b->batPersistence == TRANSIENT) {
		strcpy(mode, "transient");
	} else {
		strcpy(mode, "unknown");
	}

	switch (b->batRestricted) {
	case BAT_READ:
		accessmode = "read-only";
		break;
	case BAT_WRITE:
		accessmode = "updatable";
		break;
	case BAT_APPEND:
		accessmode = "append-only";
		break;
	default:
		accessmode = "unknown";
	}

	BUNins(bn, "batId", BATgetId(b),FALSE);
	BUNins(bn, "batCacheid", local_itoa((ssize_t)(b->batCacheid)),FALSE);
	BUNins(bn, "hparentid", local_itoa((ssize_t)(b->H->heap.parentid)),FALSE);
	BUNins(bn, "tparentid", local_itoa((ssize_t)(b->T->heap.parentid)),FALSE);
	BUNins(bn, "batSharecnt", local_itoa((ssize_t)(b->batSharecnt)),FALSE);
	BUNins(bn, "batCount", local_utoa((size_t)b->batCount),FALSE);
	BUNins(bn, "batCapacity", local_utoa((size_t)b->batCapacity),FALSE);
	BUNins(bn, "head", ATOMname(b->htype),FALSE);
	BUNins(bn, "tail", ATOMname(b->ttype),FALSE);
	BUNins(bn, "batPersistence", mode,FALSE);
	BUNins(bn, "batRestricted", accessmode,FALSE);
	BUNins(bn, "batRefcnt", local_itoa((ssize_t)(BBP_refs(b->batCacheid))),FALSE);
	BUNins(bn, "batLRefcnt", local_itoa((ssize_t)(BBP_lrefs(b->batCacheid))),FALSE);
	BUNins(bn, "batDirty", BATdirty(b) ? "dirty" : "clean",FALSE);
	BUNins(bn, "batSet", local_itoa((ssize_t)(b->batSet)),FALSE);

	BUNins(bn, "hsorted", local_itoa((ssize_t)BAThordered(b)),FALSE);
	BUNins(bn, "hrevsorted", local_itoa((ssize_t)BAThrevordered(b)),FALSE);
	BUNins(bn, "hident", b->hident,FALSE);
	BUNins(bn, "hdense", local_itoa((ssize_t)(BAThdense(b))),FALSE);
	BUNins(bn, "hseqbase", oidtostr(b->hseqbase),FALSE);
	BUNins(bn, "hkey", local_itoa((ssize_t)(b->hkey)),FALSE);
	BUNins(bn, "hvarsized", local_itoa((ssize_t)(b->hvarsized)),FALSE);
	BUNins(bn, "halign", local_utoa(b->halign),FALSE);
	BUNins(bn, "hnosorted", local_utoa(b->H->nosorted),FALSE);
	BUNins(bn, "hnorevsorted", local_utoa(b->H->norevsorted),FALSE);
	BUNins(bn, "hnodense", local_utoa(b->H->nodense),FALSE);
	BUNins(bn, "hnokey[0]", local_utoa(b->H->nokey[0]),FALSE);
	BUNins(bn, "hnokey[1]", local_utoa(b->H->nokey[1]),FALSE);
	BUNins(bn, "hnonil", local_utoa(b->H->nonil),FALSE);
	BUNins(bn, "hnil", local_utoa(b->H->nil),FALSE);

	BUNins(bn, "tident", b->tident,FALSE);
	BUNins(bn, "tdense", local_itoa((ssize_t)(BATtdense(b))),FALSE);
	BUNins(bn, "tseqbase", oidtostr(b->tseqbase),FALSE);
	BUNins(bn, "tsorted", local_itoa((ssize_t)BATtordered(b)),FALSE);
	BUNins(bn, "trevsorted", local_itoa((ssize_t)BATtrevordered(b)),FALSE);
	BUNins(bn, "tkey", local_itoa((ssize_t)(b->tkey)),FALSE);
	BUNins(bn, "tvarsized", local_itoa((ssize_t)(b->tvarsized)),FALSE);
	BUNins(bn, "talign", local_utoa(b->talign),FALSE);
	BUNins(bn, "tnosorted", local_utoa(b->T->nosorted),FALSE);
	BUNins(bn, "tnorevsorted", local_utoa(b->T->norevsorted),FALSE);
	BUNins(bn, "tnodense", local_utoa(b->T->nodense),FALSE);
	BUNins(bn, "tnokey[0]", local_utoa(b->T->nokey[0]),FALSE);
	BUNins(bn, "tnokey[1]", local_utoa(b->T->nokey[1]),FALSE);
	BUNins(bn, "tnonil", local_utoa(b->T->nonil),FALSE);
	BUNins(bn, "tnil", local_utoa(b->T->nil),FALSE);

	BUNins(bn, "batInserted", local_utoa(b->batInserted),FALSE);
	BUNins(bn, "batDeleted", local_utoa(b->batDeleted),FALSE);
	BUNins(bn, "batFirst", local_utoa(b->batFirst),FALSE);
	BUNins(bn, "htop", local_utoa(b->H->heap.free),FALSE);
	BUNins(bn, "ttop", local_utoa(b->T->heap.free),FALSE);
	BUNins(bn, "batStamp", local_itoa((ssize_t)(b->batStamp)),FALSE);
	BUNins(bn, "lastUsed", local_itoa((ssize_t)(BBP_lastused(b->batCacheid))),FALSE);
	BUNins(bn, "curStamp", local_itoa((ssize_t)(BBPcurstamp())),FALSE);
	BUNins(bn, "batCopiedtodisk", local_itoa((ssize_t)(b->batCopiedtodisk)),FALSE);
	BUNins(bn, "batDirtydesc", b->batDirtydesc ? "dirty" : "clean",FALSE);

	BUNins(bn, "H->heap.dirty", b->H->heap.dirty ? "dirty" : "clean",FALSE);
	BUNins(bn, "T->heap.dirty", b->T->heap.dirty ? "dirty" : "clean",FALSE);
	infoHeap(bn, &b->H->heap, "head.");
	infoHeap(bn, &b->T->heap, "tail.");

	BUNins(bn, "H->vheap->dirty", (b->H->vheap && b->H->vheap->dirty) ? "dirty" : "clean",FALSE);
	infoHeap(bn, b->H->vheap, "hheap.");

	BUNins(bn, "T->vheap->dirty", (b->T->vheap && b->T->vheap->dirty) ? "dirty" : "clean",FALSE);
	infoHeap(bn, b->T->vheap, "theap.");

	/* dump index information */
	if (b->H->hash) {
		HASHinfo(bn, b->H->hash, "hhash->");
	}
	if (b->T->hash) {
		HASHinfo(bn, b->T->hash, "thash->");
	}
	return GDK_SUCCEED;
}

#define ROUND_UP(x,y) ((y)*(((x)+(y)-1)/(y)))

static int
CMDbatdisksize(lng *tot, BAT *b)
{
	size_t blksize = 512;
	size_t size = 0;

	if (!isVIEW(b)) {
		size += ROUND_UP(b->H->heap.free, blksize);
		size += ROUND_UP(b->T->heap.free, blksize);
		if (b->H->vheap)
			size += ROUND_UP(b->H->vheap->free, blksize);
		if (b->T->vheap)
			size += ROUND_UP(b->T->vheap->free, blksize);
	}
	*tot = size;
	return GDK_SUCCEED;
}

static int
CMDbatvmsize(lng *tot, BAT *b)
{
	size_t blksize = MT_pagesize();
	size_t size = 0;

	if (!isVIEW(b)) {
		BUN cnt = BATcapacity(b);

		size += ROUND_UP(b->H->heap.size, blksize);
		size += ROUND_UP(b->T->heap.size, blksize);
		if (b->H->vheap)
			size += ROUND_UP(b->H->vheap->size, blksize);
		if (b->T->vheap)
			size += ROUND_UP(b->T->vheap->size, blksize);
		if (b->H->hash)
			size += ROUND_UP(sizeof(BUN) * cnt, blksize);
		if (b->T->hash)
			size += ROUND_UP(sizeof(BUN) * cnt, blksize);
	}
	*tot = size;
	return GDK_SUCCEED;
}

static int
CMDbatsize(lng *tot, BAT *b, int force)
{
	size_t size = 0;

	if ( force || !isVIEW(b)) {
		BUN cnt = BATcapacity(b);

		size += b->H->heap.size;
		size += b->T->heap.size;
		if (b->H->vheap)
			size += b->H->vheap->size;
		if (b->T->vheap)
			size += b->T->vheap->size;
		if (b->H->hash)
			size += sizeof(BUN) * cnt;
		if (b->T->hash)
			size += sizeof(BUN) * cnt;
	}
	*tot = size;
	return GDK_SUCCEED;
}

/*
 * @+ Synced BATs
 */
static int
CMDsynced(bit *ret, BAT *b1, BAT *b2)
{
	*ret = ALIGNsynced(b1, b2) ? 1 : 0;
	return GDK_SUCCEED;
}

/*
 * @+ BBP Management, IO
 */
static int
CMDrename(bit *retval, BAT *b, str s)
{
	int ret;
	int c;
	char *t = s;

	for ( ; (c = *t) != 0; t++) {
		if (c != '_' && !GDKisalnum(c)) {
			GDKerror("CMDrename: identifier expected: %s\n", s);
			return GDK_FAIL;
		}
	}

	ret = BATname(b, s);
	*retval = FALSE;
	if (ret == 1) {
		GDKerror("CMDrename: identifier expected: %s\n", s);
		return GDK_FAIL;
	} else if (ret == BBPRENAME_ILLEGAL) {
		GDKerror("CMDrename: illegal temporary name: '%s'\n", s);
		return GDK_FAIL;
	} else if (ret == BBPRENAME_LONG) {
		GDKerror("CMDrename: name too long: '%s'\n", s);
		return GDK_FAIL;
	} else if (ret != BBPRENAME_ALREADY) {
		*retval = TRUE;
	}
	return GDK_SUCCEED;
}

static int
CMDunload(bit *res, str input)
{
	bat bid = ABS(BBPindex(input));

	*res = FALSE;
	if (bid > 0) {
		BAT *b;

		BBPfix(bid);
		b = BBP_cache(bid);
		if (b) {
			if (b->batPersistence == SESSION)
				BATmode(b, TRANSIENT);
			BBPcold(bid);	/* will trigger unload of also persistent bats */
		}
		*res = BBPunfix(bid) == 0;
	}
	return GDK_SUCCEED;
}

static int
CMDsave(bit *res, str input)
{
	bat bid = BBPindex(input);
	BAT *b;

	*res = FALSE;
	if (bid) {
		BBPfix(bid);
		b = BBP_cache(bid);
		if (b && BATdirty(b)) {
			if (BBPsave(b) == 0)
				*res = TRUE;
		}
		BBPunfix(bid);
	}
	return GDK_SUCCEED;
}


static int
CMDmmap(BAT **r, BAT *b, int *hbns, int *tbns, int *hhp, int *thp)
{
	/* == int_nil means no change */
	if (*hbns == int_nil) 
		*hbns = b->batMaphead;
	if (*tbns == int_nil) 
		*tbns = b->batMaptail;
	if (b->H->vheap && *hhp == int_nil) 
		*hhp = b->batMaphheap;
	if (b->T->vheap && *thp == int_nil) 
		*thp = b->batMaptheap;
	if (BATmmap(*r = b, *hbns, *tbns, *hhp, *thp, 0) == 0) {
		BBPfix(b->batCacheid);
		return GDK_SUCCEED;
	}
	return GDK_FAIL;
}


/*
 * @- Wrapping
 * The remainder contains the wrapper code over the version 4
 * @+ InformationFunctions
 * In most cases we pass a BAT identifier, which should be unified
 * with a BAT descriptor. Upon failure we can simply abort the function.
 *
 * The logical head type :oid is mapped to a TYPE_void
 * with sequenceBase. It represents the old fashioned :vid
 */


str
BKCnewBAT(int *res, int *ht, int *tt, BUN *cap)
{
	BAT *b;

	if( *ht == TYPE_oid){
		int tpe= TYPE_void;
		if (CMDnew(&b, &tpe, tt, cap) == GDK_SUCCEED) {
			oid o= 0;
			BATseqbase(b, o);
			*res = b->batCacheid;
			BBPkeepref(*res);
			return MAL_SUCCEED;
		}
	} else
	if (CMDnew(&b, ht, tt, cap) == GDK_SUCCEED) {
		*res = b->batCacheid;
		BBPkeepref(*res);
		return MAL_SUCCEED;
	}
	throw(MAL, "bat.new", GDK_EXCEPTION);
}

str
BKCattach(int *ret, int *tt, str *heapfile)
{
	BAT *b;

	if (CMDattach(&b, tt, *heapfile) == GDK_SUCCEED) {
		*ret = b->batCacheid;
		BBPkeepref(*ret);
		return MAL_SUCCEED;
	}
	throw(MAL, "bat.attach", GDK_EXCEPTION);
}

str
BKCdensebat(int *ret, wrd *size)
{
	BAT *b;

	if (CMDdensebat(&b, size) == GDK_SUCCEED) {
		*ret = b->batCacheid;
		BBPkeepref(*ret);
		return MAL_SUCCEED;
	}
	throw(MAL, "bat.densebat", GDK_EXCEPTION);
}

str
BKCreverse(int *ret, int *bid)
{
	BAT *b, *bn = NULL;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.reverse", RUNTIME_OBJECT_MISSING);
	}

	CMDreverse(&bn, b);
	BBPreleaseref(b->batCacheid);
	if (bn) {
		*ret = bn->batCacheid;
		BBPkeepref(bn->batCacheid);
		return MAL_SUCCEED;
	}
	throw(MAL, "bat.reverse", GDK_EXCEPTION);
}

str
BKCmirror(int *ret, int *bid)
{
	BAT *b, *bn = NULL;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.mirror", RUNTIME_OBJECT_MISSING);
	}
	if (CMDmirror(&bn, b) == GDK_SUCCEED) {
		*ret = bn->batCacheid;
		BBPkeepref(*ret);
		BBPreleaseref(b->batCacheid);
		return MAL_SUCCEED;
	}
	*ret = 0;
	BBPreleaseref(b->batCacheid);
	throw(MAL, "bat.mirror", GDK_EXCEPTION);
}

str
BKCrevert(int *ret, int *bid)
{
	BAT *b, *bn;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.revert", RUNTIME_OBJECT_MISSING);
	}
	bn= BATrevert(b);
	if(bn==NULL ){
		BBPreleaseref(b->batCacheid);
		throw(MAL, "bat.revert", GDK_EXCEPTION);
	}
	BBPkeepref(*ret= bn->batCacheid);
	return MAL_SUCCEED;
}

str
BKCorder(int *ret, int *bid)
{
	BAT *b,*bn;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.order", RUNTIME_OBJECT_MISSING);
	}
	bn= BATorder(b);
	if (bn != b)
		BBPreleaseref(b->batCacheid);
	if(bn==NULL ){
		throw(MAL, "bat.order", GDK_EXCEPTION);
	}
	BBPkeepref(*ret= bn->batCacheid);
	return MAL_SUCCEED;
}

str
BKCorder_rev(int *ret, int *bid)
{
	BAT *b,*bn;

	(void) ret;
	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.order_rev", RUNTIME_OBJECT_MISSING);
	}
	bn= BATorder_rev(b);
	if (bn != b)
		BBPreleaseref(b->batCacheid);
	if(bn==NULL ){
		throw(MAL, "bat.order_rev", GDK_EXCEPTION);
	}
	BBPkeepref(*ret= bn->batCacheid);
	return MAL_SUCCEED;
}

/*
 * @-
 * Insertions into the BAT may involve void types (=no storage required)
 * These cases should actually be captured during BUNins, because they
 * may emerge internally as well.
 */
@= void_insertbun
if (b->@1type == TYPE_void && *(oid*) @1 != oid_nil &&
    *(oid*) @1 != (b->@1seqbase + BUNgetpos(b, BUNlast(b))))
{
printf("val " OIDFMT " seqbase " OIDFMT " pos " BUNFMT "\n", *(oid*)@1,
	b->@1seqbase,  BUNgetpos(b, BUNlast(b)) );
      throw(MAL, "bat.insert", OPERATION_FAILED " Insert non-nil values in a void column.");
}
@
@c

char *
BKCinsert_bun(int *r, int *bid, ptr h, ptr t)
{
	BAT *i,*b;
	int param=BAT_WRITE;
	(void) r;

	if ((i = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.insert", RUNTIME_OBJECT_MISSING);
	}
	CMDsetaccess(&b,i,&param);
	@:derefStr(b,h,h)@
	@:derefStr(b,t,t)@
	BUNins(b, h, t,FALSE);
	BBPkeepref(*r=b->batCacheid);
	BBPreleaseref(i->batCacheid);
	return MAL_SUCCEED;
}

char *
BKCinsert_bun_force(int *r, int *bid, ptr h, ptr t, bit *force)
{
	BAT *i,*b;
	int param=BAT_WRITE;
	(void) r;

	if ((i = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.insert", RUNTIME_OBJECT_MISSING);
	}
	CMDsetaccess(&b,i,&param);
	@:derefStr(b,h,h)@
	@:derefStr(b,t,t)@
	BUNins(b, h, t, *force);
	BBPkeepref(*r=b->batCacheid);
	BBPreleaseref(i->batCacheid);
	return MAL_SUCCEED;
}

str
BKCinsert_bat(int *r, int *bid, int *sid)
{
	BAT *i,*b, *s;
	int param=BAT_WRITE;

	if ((i = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.insert", RUNTIME_OBJECT_MISSING);
	}
	if ((s = BATdescriptor(*sid)) == NULL) {
		BBPreleaseref(i->batCacheid);
		throw(MAL, "bat.insert", RUNTIME_OBJECT_MISSING);
	}
	CMDsetaccess(&b,i,&param);
	if (BATins(b, s,FALSE) == NULL) {
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(s->batCacheid);
		BBPreleaseref(i->batCacheid);
		throw(MAL, "bat.insert", GDK_EXCEPTION);
	}
	BBPkeepref(*r=b->batCacheid);
	BBPreleaseref(s->batCacheid);
	BBPreleaseref(i->batCacheid);
	return MAL_SUCCEED;
}

str
BKCinsert_bat_force(int *r, int *bid, int *sid, bit *force)
{
	BAT *i,*b, *s;
	int param=BAT_WRITE;

	if ((i = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.insert", RUNTIME_OBJECT_MISSING);
	}
	if ((s = BATdescriptor(*sid)) == NULL) {
		BBPreleaseref(i->batCacheid);
		throw(MAL, "bat.insert", RUNTIME_OBJECT_MISSING);
	}
	CMDsetaccess(&b,i,&param);
	if (BATins(b, s, *force) == NULL) {
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(s->batCacheid);
		BBPreleaseref(i->batCacheid);
		throw(MAL, "bat.insert", GDK_EXCEPTION);
	}
	BBPkeepref(*r=b->batCacheid);
	BBPreleaseref(s->batCacheid);
	BBPreleaseref(i->batCacheid);
	return MAL_SUCCEED;
}


str
BKCreplace_bun(int *r, int *bid, ptr h, ptr t)
{
	BAT *i,*b;
	int param=BAT_WRITE;

	if ((i = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.replace", RUNTIME_OBJECT_MISSING);
	}
	CMDsetaccess(&b,i,&param);
	@:derefStr(b,h,h)@
	@:derefStr(b,t,t)@
	if (BUNreplace(b, h, t, 0) == NULL) {
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(i->batCacheid);
		throw(MAL, "bat.replace", GDK_EXCEPTION);
	}
	BBPkeepref(*r=b->batCacheid);
	BBPreleaseref(i->batCacheid);
	return MAL_SUCCEED;
}

str
BKCreplace_bat(int *r, int *bid, int *sid)
{
	BAT *i, *b, *bn, *s;
	int param=BAT_WRITE;

	if ((i = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.replace", RUNTIME_OBJECT_MISSING);
	}
	if ((s = BATdescriptor(*sid)) == NULL) {
		BBPreleaseref(i->batCacheid);
		throw(MAL, "bat.replace", RUNTIME_OBJECT_MISSING);
	}
	CMDsetaccess(&b,i,&param);
	bn=BATreplace(b, s, 0);
	if (bn == NULL || bn->batCacheid != b->batCacheid){
		BBPreleaseref(i->batCacheid);
		BBPreleaseref(s->batCacheid);
		BBPreleaseref(b->batCacheid);
		if( bn)
			BBPreleaseref(bn->batCacheid);
		throw(MAL, "bat.replace", OPERATION_FAILED);
	}
	BBPkeepref(*r=bn->batCacheid);
	BBPreleaseref(i->batCacheid);
	BBPreleaseref(s->batCacheid);
	return MAL_SUCCEED;
}

str
BKCreplace_bun_force(int *r, int *bid, ptr h, ptr t, bit *force)
{
	BAT *b, *bn;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.replace", RUNTIME_OBJECT_MISSING);
	}
	@:derefStr(b,h,h)@
	@:derefStr(b,t,t)@
	bn= BUNreplace(b, h, t, *force);
	if (bn == NULL){
		BBPreleaseref(b->batCacheid);
		throw(MAL, "bat.replace", OPERATION_FAILED);
	}
	if(bn->batCacheid != b->batCacheid) {
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(bn->batCacheid);
		throw(MAL, "bat.replace", OPERATION_FAILED "Different BAT returned");
	}
	BBPkeepref(*r=bn->batCacheid);
	return MAL_SUCCEED;
}

str
BKCreplace_bat_force(int *r, int *bid, int *sid, bit *force)
{
	BAT *b, *bn, *s;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.replace", RUNTIME_OBJECT_MISSING);
	}
	if ((s = BATdescriptor(*sid)) == NULL) {
		BBPreleaseref(b->batCacheid);
		throw(MAL, "bat.replace", RUNTIME_OBJECT_MISSING);
	}
	bn= BATreplace(b, s, *force);
	if (bn == NULL || bn->batCacheid != b->batCacheid){
		BBPreleaseref(s->batCacheid);
		BBPreleaseref(b->batCacheid);
		if (bn)
			BBPreleaseref(bn->batCacheid);
		throw(MAL, "bat.replace_bat", OPERATION_FAILED);
	}
	BBPkeepref(*r=bn->batCacheid);
	BBPreleaseref(s->batCacheid);
	return MAL_SUCCEED;
}

char *
BKCdelete_bun(int *r, int *bid, ptr h, ptr t)
{
	BAT *b, *bn;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.delete", RUNTIME_OBJECT_MISSING);
	}
	@:derefStr(b,h,h)@
	@:derefStr(b,t,t)@
	bn= BUNdel(b, h, t,FALSE);
	if (bn == NULL){
		BBPreleaseref(b->batCacheid);
		throw(MAL, "bat.delete_bun", OPERATION_FAILED);
	}
	if(bn->batCacheid != b->batCacheid) {
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(bn->batCacheid);
		throw(MAL, "bat.delete_bun", OPERATION_FAILED "Different BAT returned");
	}
	BBPkeepref(*r=bn->batCacheid);
	return MAL_SUCCEED;
}

char *
BKCdelete(int *r, int *bid, ptr h)
{
	BAT *b, *bn;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.delete", RUNTIME_OBJECT_MISSING);
	}
	@:derefStr(b,h,h)@
	bn= BUNdelHead(b, h,FALSE);
	if (bn == NULL) {
		BBPreleaseref(b->batCacheid);
		throw(MAL, "bat.delete", OPERATION_FAILED);
	}
	if (bn->batCacheid != b->batCacheid) {
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(bn->batCacheid);
		throw(MAL, "bat.delete", OPERATION_FAILED "Different BAT returned");
	}
	BBPkeepref(*r=bn->batCacheid);
	return MAL_SUCCEED;
}

str
BKCdelete_all(int *r, int *bid)
{
	BAT *b, *bn;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.delete", RUNTIME_OBJECT_MISSING);
	}
	bn=BATclear(b, FALSE);
	if (bn == NULL){
		BBPreleaseref(b->batCacheid);
		throw(MAL, "bat.delete_all", OPERATION_FAILED);
	}
	if(bn->batCacheid != b->batCacheid){
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(bn->batCacheid);
		throw(MAL, "bat.delete_all", OPERATION_FAILED "Different BAT returned");
	}
	BBPkeepref(*r=b->batCacheid);
	return MAL_SUCCEED;
}

str
BKCdelete_bat_bun(int *r, int *bid, int *sid)
{
	BAT *b, *bn, *s;

	if( *bid == *sid)
		return BKCdelete_all(r,bid);
	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.delete", RUNTIME_OBJECT_MISSING);
	}
	if ((s = BATdescriptor(*sid)) == NULL) {
		BBPreleaseref(b->batCacheid);
		throw(MAL, "bat.delete", RUNTIME_OBJECT_MISSING);
	}

	bn=BATdel(b, s,FALSE);
	if (bn == NULL || bn->batCacheid != b->batCacheid){
		BBPreleaseref(s->batCacheid);
		BBPreleaseref(b->batCacheid);
		if(bn)
			BBPreleaseref(bn->batCacheid);
		throw(MAL, "bat.delete_bat_bun", OPERATION_FAILED);
	}
	BBPkeepref(*r=bn->batCacheid);
	BBPreleaseref(s->batCacheid);
	return MAL_SUCCEED;
}

str
BKCdelete_bat(int *r, int *bid, int *sid)
{
	BAT *i,*b, *s;
	int param=BAT_WRITE;

	if ((i = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.delete", RUNTIME_OBJECT_MISSING);
	}
	if ((s = BATdescriptor(*sid)) == NULL) {
		BBPreleaseref(i->batCacheid);
		throw(MAL, "bat.delete", RUNTIME_OBJECT_MISSING);
	}
	CMDsetaccess(&b,i,&param);
	if (BATdelHead(b, s,FALSE) == NULL) {
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(s->batCacheid);
		BBPreleaseref(i->batCacheid);
		throw(MAL, "bat.delete", OPERATION_FAILED);
	}
	BBPkeepref(*r=b->batCacheid);
	BBPreleaseref(s->batCacheid);
	BBPreleaseref(i->batCacheid);
	return MAL_SUCCEED;
}

str
BKCdestroy_bat(bit *r, str *input)
{
	CMDdestroy(r, *input);
	return MAL_SUCCEED;
}

char *
BKCdestroyImmediate(signed char*r, int *bid)
{
	BAT *b;
	char buf[512];

	if ((b = BATdescriptor(*bid)) == NULL) 
		return MAL_SUCCEED;
	BBPlogical(b->batCacheid, buf);
	BBPreleaseref(b->batCacheid);
	CMDdestroy(r, buf);
	return MAL_SUCCEED;
}

char *
BKCdestroy(signed char *r, int *bid)
{
	BAT *b;

	(void) r;
	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.destroy", RUNTIME_OBJECT_MISSING);
	}
	*bid = 0;
	BATmode(b, TRANSIENT);
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

char *
BKCappend_wrap(int *r, int *bid, int *uid)
{
	BAT *b, *i, *u;
	int param=BAT_WRITE;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.append", RUNTIME_OBJECT_MISSING);
	}
	if ((u = BATdescriptor(*uid)) == NULL) {
		BBPreleaseref(b->batCacheid);
		throw(MAL, "bat.append", RUNTIME_OBJECT_MISSING);
	}
	CMDsetaccess(&i,b,&param);
	BATappend(i, u,FALSE);
	BBPkeepref(*r=i->batCacheid);
	BBPreleaseref(b->batCacheid);
	BBPreleaseref(u->batCacheid);
	return MAL_SUCCEED;
}

str
BKCappend_val_wrap(int *r, int *bid, ptr u)
{
	BAT *i,*b;
	int param=BAT_WRITE;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.append", RUNTIME_OBJECT_MISSING);
	}

	@:derefStr(b,t,u)@
	CMDsetaccess(&i,b,&param);
	BUNappend(i, u,FALSE);
	BBPkeepref(*r=i->batCacheid);
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}
str
BKCappend_reverse_val_wrap(int *r, int *bid, ptr u)
{
	BAT *i,*b;
	int param=BAT_WRITE;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.append", RUNTIME_OBJECT_MISSING);
	}

	CMDsetaccess(&i,b,&param);
	@:derefStr(i,t,u)@
	BUNappend(BATmirror(i), u,FALSE);
	BBPkeepref(*r=i->batCacheid);
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

char *
BKCappend_force_wrap(int *r, int *bid, int *uid, bit *force)
{
	BAT *b,*i, *u;
	int param=BAT_WRITE;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.append", RUNTIME_OBJECT_MISSING);
	}
	if ((u = BATdescriptor(*uid)) == NULL) {
		BBPreleaseref(b->batCacheid);
		throw(MAL, "bat.append", RUNTIME_OBJECT_MISSING);
	}
	CMDsetaccess(&i,b,&param);
	BATappend(i, u, *force);
	BBPkeepref(*r=i->batCacheid);
	BBPreleaseref(u->batCacheid);
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

str
BKCappend_val_force_wrap(int *r, int *bid, ptr u, bit *force)
{
	BAT *b,*i;
	int param=BAT_WRITE;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.append", RUNTIME_OBJECT_MISSING);
	}

	CMDsetaccess(&i,b,&param);
	@:derefStr(i,t,u)@
	BUNappend(i, u, *force);
	BBPkeepref(*r=i->batCacheid);
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

str 
BKCbun_inplace(int *r, int *bid, oid *id, ptr t)
{
	BAT *o;

	(void) r;
	if ((o = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.inplace", RUNTIME_OBJECT_MISSING);
	}
	void_inplace(o, *id, t,FALSE);
	BBPkeepref(*r = o->batCacheid);
	return MAL_SUCCEED;
}

str 
BKCbun_inplace_force(int *r, int *bid, oid *id, ptr t, bit *force)
{
	BAT *o;

	(void) r;
	if ((o = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.inplace", RUNTIME_OBJECT_MISSING);
	}
	void_inplace(o, *id, t, *force);
	BBPkeepref(*r = o->batCacheid);
	return MAL_SUCCEED;
}

str
BKCbat_inplace(int *r, int *bid, int *rid)
{
	BAT *o, *d;

	(void) r;
	if ((o = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.inplace", RUNTIME_OBJECT_MISSING);
	}
	if ((d = BATdescriptor(*rid)) == NULL) {
		BBPreleaseref(o->batCacheid);
		throw(MAL, "bat.inplace", RUNTIME_OBJECT_MISSING);
	}
	void_replace_bat(o, d,FALSE);
	BBPkeepref(*r = o->batCacheid);
	BBPreleaseref(d->batCacheid);
	return MAL_SUCCEED;
}

str
BKCbat_inplace_force(int *r, int *bid, int *rid, bit *force)
{
	BAT *o, *d;

	(void) r;
	if ((o = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.inplace", RUNTIME_OBJECT_MISSING);
	}
	if ((d = BATdescriptor(*rid)) == NULL) {
		BBPreleaseref(o->batCacheid);
		throw(MAL, "bat.inplace", RUNTIME_OBJECT_MISSING);
	}
	void_replace_bat(o, d, *force);
	BBPkeepref(*r = o->batCacheid);
	BBPreleaseref(d->batCacheid);
	return MAL_SUCCEED;
}

/*end of SQL enhancement */

char *
BKCgetAlpha(int *r, int *bid)
{
	BAT *b, *c;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.getInserted", RUNTIME_OBJECT_MISSING);
	}
	c = BATalpha(b);
	*r = c->batCacheid;
	BBPkeepref(c->batCacheid);
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

char *
BKCgetDelta(int *r, int *bid)
{
	BAT *b, *c;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.getDeleted", RUNTIME_OBJECT_MISSING);
	}
	c = BATdelta(b);
	*r = c->batCacheid;
	BBPkeepref(c->batCacheid);
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

str
BKCgetCapacity(lng *res, int *bid)
{
	CMDcapacity(res, bid);
	return MAL_SUCCEED;
}

str
BKCgetHeadType(str *res, int *bid)
{
	CMDhead(res, bid);
	return MAL_SUCCEED;
}

str
BKCgetTailType(str *res, int *bid)
{
	CMDtail(res, bid);
	return MAL_SUCCEED;
}

str
BKCgetRole(str *res, int *bid)
{
	BAT *b;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.getType", RUNTIME_OBJECT_MISSING);
	}
	*res = GDKstrdup((*bid > 0) ? b->hident : b->tident);
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

str
BKCsetkey(int *res, int *bid, bit *param)
{
	BAT *b;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.setKey", RUNTIME_OBJECT_MISSING);
	}
	BATkey(b, *param ? BOUND2BTRUE :FALSE);
	*res = b->batCacheid;
	BBPkeepref(b->batCacheid);
	return MAL_SUCCEED;
}

str
BKCsetSet(int *res, int *bid, bit *param)
{
	BAT *b;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.setSet", RUNTIME_OBJECT_MISSING);
	}
	BATset(b, *param ? BOUND2BTRUE :FALSE);
	*res = b->batCacheid;
	BBPkeepref(b->batCacheid);
	return MAL_SUCCEED;
}

str
BKCisaSet(bit *res, int *bid)
{
	BAT *b;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.isaSet", RUNTIME_OBJECT_MISSING);
	}
	*res = b->batSet;
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

str
BKCisSorted(bit *res, int *bid)
{
	BAT *b;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.isSorted", RUNTIME_OBJECT_MISSING);
	}
	*res = BATordered(b);
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

str
BKCisSortedReverse(bit *res, int *bid)
{
	BAT *b;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.isSorted", RUNTIME_OBJECT_MISSING);
	}
	*res = BATordered_rev(b);
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

/*
 * @-
 * We must take care of the special case of a nil column (TYPE_void,seqbase=nil)
 * such nil columns never set hkey (and BUNins will never invalidate it if set) yet
 * a nil column of a BAT with <= 1 entries does not contain doubles => return TRUE.
 */

str
BKCgetKey(bit *ret, int *bid)
{
	BAT *b;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.setPersistence", RUNTIME_OBJECT_MISSING);
	}
	CMDgetkey(ret, b);
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

str
BKCpersists(int *r, int *bid, bit *flg)
{
	BAT *b;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.setPersistence", RUNTIME_OBJECT_MISSING);
	}
	BATmode(b, (*flg == TRUE) ? PERSISTENT : (*flg ==FALSE) ? TRANSIENT : SESSION);
	BBPreleaseref(b->batCacheid);
	*r = 0;
	return MAL_SUCCEED;
}

str
BKCsetPersistent(int *r, int *bid)
{
	bit flag= TRUE;
	return BKCpersists(r,bid, &flag);
}

str
BKCisPersistent(bit *res, int *bid)
{
	BAT *b;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.setPersistence", RUNTIME_OBJECT_MISSING);
	}
	*res = (b->batPersistence == PERSISTENT) ? TRUE :FALSE;
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

str
BKCsetTransient(int *r, int *bid)
{
	BAT *b;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.setTransient", RUNTIME_OBJECT_MISSING);
	}
	BATmode(b, TRANSIENT);
	*r = 0;
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

str
BKCisTransient(bit *res, int *bid)
{
	BAT *b;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.setTransient", RUNTIME_OBJECT_MISSING);
	}
	*res = b->batPersistence == TRANSIENT;
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

/*
 * @-
 */
@= accessMode_export
bat5_export str BKCset@1(int *res, int *bid) ;
bat5_export str BKChas@1(bit *res, int *bid);
@= accessMode
str BKCset@1(int *res, int *bid) {
	BAT *b, *bn = NULL;
	int param=@2;
    if( (b= BATdescriptor(*bid)) == NULL ){
        throw(MAL, "bat.set@1", RUNTIME_OBJECT_MISSING);
    }
	CMDsetaccess(&bn,b,&param);
	BBPkeepref(*res=bn->batCacheid);
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

str BKChas@1(bit *res, int *bid) {
	BAT *b;
    if( (b= BATdescriptor(*bid)) == NULL ){
        throw(MAL, "bat.set@1", RUNTIME_OBJECT_MISSING);
    }
	*res = BATgetaccess(b)=='@3';
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}
@
@h
/*
 * @-
 */
@:accessMode_export(WriteMode,0,w)@
@:accessMode_export(ReadMode,1,r)@
@:accessMode_export(AppendMode,2,a)@
@c
@:accessMode(WriteMode,0,w)@
@:accessMode(ReadMode,1,r)@
@:accessMode(AppendMode,2,a)@

str
BKCaccess(int *res, int *bid, int *m)
{
	BAT *b, *bn = NULL;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.setAccess", RUNTIME_OBJECT_MISSING);
	}
	CMDsetaccess(&bn, b, m);
	*res = bn->batCacheid;
	BBPkeepref(bn->batCacheid);
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

str
BKCsetAccess(int *res, int *bid, str *param)
{
	BAT *b, *bn = NULL;
	int m;
	int oldid;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.setAccess", RUNTIME_OBJECT_MISSING);
	}
	switch (*param[0]) {
	case 'r':
		m = 1;
		break;
	case 'a':
		m = 2;
		break;
	case 'w':
		m = 0;
		break;
	default:
		*res = 0;
		throw(MAL, "bat.setAccess", ILLEGAL_ARGUMENT" Got %c" " expected 'r','a', or 'w'", *param[0]);
	}
	/* CMDsetaccess(&bn, b, &m);*/

	oldid= b->batCacheid;
	bn = BATsetaccess(b, m);
	if ((bn)->batCacheid == b->batCacheid) {
		BBPkeepref(bn->batCacheid);
	} else {
		BBPreleaseref(oldid);
		BBPfix(bn->batCacheid);
		BBPkeepref(bn->batCacheid);
	}
	*res = bn->batCacheid;
	return MAL_SUCCEED;
}

str
BKCgetAccess(str *res, int *bid)
{
	BAT *b;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.getAccess", RUNTIME_OBJECT_MISSING);
	}
	switch (BATgetaccess(b)) {
	case 1:
		*res = GDKstrdup("read");
		break;
	case 2:
		*res = GDKstrdup("append");
		break;
	case 0:
		*res = GDKstrdup("write");
		break;
	}
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

/*
 * @- Property management
 * All property operators should ensure exclusive access to the BAT
 * descriptor.
 * Where necessary use the primary view to access the properties
 */
str
BKCinfo(int *retval, int *bid)
{
	BAT *bn = NULL, *b;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.getInfo", RUNTIME_OBJECT_MISSING);
	}
	if (CMDinfo(&bn, b) == GDK_SUCCEED) {
		*retval = bn->batCacheid;
		BBPkeepref(bn->batCacheid);
		BBPreleaseref(*bid);
		return MAL_SUCCEED;
	}
	BBPreleaseref(*bid);
	throw(MAL, "BKCinfo", GDK_EXCEPTION);
}

str
BKCbatdisksize(lng *tot, int *bid){
	BAT *b;
	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.getDiskSize", RUNTIME_OBJECT_MISSING);
	}
	CMDbatdisksize(tot,b);
	BBPreleaseref(*bid);
	return MAL_SUCCEED;
}

str
BKCbatvmsize(lng *tot, int *bid){
	BAT *b;
	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.getDiskSize", RUNTIME_OBJECT_MISSING);
	}
	CMDbatvmsize(tot,b);
	BBPreleaseref(*bid);
	return MAL_SUCCEED;
}

str
BKCbatsize(lng *tot, int *bid){
	BAT *b;
	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.getDiskSize", RUNTIME_OBJECT_MISSING);
	}
	CMDbatsize(tot,b, FALSE);
	BBPreleaseref(*bid);
	return MAL_SUCCEED;
}

str
BKCgetStorageSize(lng *tot, int *bid)
{
	BAT *b;

	if ((b = BATdescriptor(*bid)) == NULL)
		throw(MAL, "bat.getStorageSize", RUNTIME_OBJECT_MISSING);
	CMDbatsize(tot,b,TRUE);
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}
str
BKCgetSpaceUsed(lng *tot, int *bid)
{
	BAT *b;
	size_t size = sizeof(BATstore);

	if ((b = BATdescriptor(*bid)) == NULL)
		throw(MAL, "bat.getSpaceUsed", RUNTIME_OBJECT_MISSING);

	if (!isVIEW(b)) {
		BUN cnt = BATcount(b);

		size += headsize(b, cnt);
		size += tailsize(b, cnt);
		/* the upperbound is used for the heaps */
		if (b->H->vheap)
			size += b->H->vheap->size;
		if (b->T->vheap)
			size += b->T->vheap->size;
		if (b->H->hash)
			size += sizeof(BUN) * cnt;
		if (b->T->hash)
			size += sizeof(BUN) * cnt;
	}
	*tot = size;
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

str
BKCgetStorageSize_str(lng *tot, str batname)
{
	int bid = BBPindex(batname);

	if (bid == 0) 
		throw(MAL, "bat.getStorageSize", RUNTIME_OBJECT_MISSING);
	return BKCgetStorageSize(tot, &bid);
}

/*
 * @+ Synced BATs
 */
str
BKCisSynced(bit *ret, int *bid1, int *bid2)
{
	BAT *b1, *b2;

	if ((b1 = BATdescriptor(*bid1)) == NULL) {
		throw(MAL, "bat.isSynced", RUNTIME_OBJECT_MISSING);
	}
	if ((b2 = BATdescriptor(*bid2)) == NULL) {
		BBPreleaseref(b1->batCacheid);
		throw(MAL, "bat.isSynced", RUNTIME_OBJECT_MISSING);
	}
	CMDsynced(ret, b1, b2);
	BBPreleaseref(b1->batCacheid);
	BBPreleaseref(b2->batCacheid);
	return MAL_SUCCEED;
}

/*
 * @+ Role Management
 */
char *
BKCsetRole(int *r, int *bid, char **hname, char **tname)
{
	BAT *b;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.setRole", RUNTIME_OBJECT_MISSING);
	}
	if (hname == 0 || *hname == 0 || **hname == 0){
		BBPreleaseref(b->batCacheid);
		throw(MAL, "bat.setRole", ILLEGAL_ARGUMENT " Head name missing");
	}
	if (tname == 0 || *tname == 0 || **tname == 0){
		BBPreleaseref(b->batCacheid);
		throw(MAL, "bat.setRole", ILLEGAL_ARGUMENT " Tail name missing");
	}
	BATroles(b, *hname, *tname);
	BBPreleaseref(b->batCacheid);
	*r = 0;
	return MAL_SUCCEED;
}

str
BKCsetColumn(int *r, int *bid, str *tname)
{
	BAT *b;
	str dummy;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.setColumn", RUNTIME_OBJECT_MISSING);
	}
	if (tname == 0 || *tname == 0 || **tname == 0){
		BBPreleaseref(b->batCacheid);
		throw(MAL, "bat.setColumn", ILLEGAL_ARGUMENT " Column name missing");
	}
	/* watch out, hident is freed first */
	dummy= GDKstrdup(b->hident);
	BATroles(b, dummy, *tname);
	GDKfree(dummy);
	BBPreleaseref(b->batCacheid);
	*r =0;
	return MAL_SUCCEED;
}

str
BKCsetColumns(int *r, int *bid, str *hname, str *tname)
{
	BAT *b;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.setColumns", RUNTIME_OBJECT_MISSING);
	}
	if (hname == 0 || *hname == 0 || **hname == 0){
		BBPreleaseref(b->batCacheid);
		throw(MAL, "bat.setRole", ILLEGAL_ARGUMENT " Head name missing");
	}
	if (tname == 0 || *tname == 0 || **tname == 0){
		BBPreleaseref(b->batCacheid);
		throw(MAL, "bat.setRole", ILLEGAL_ARGUMENT " Tail name missing");
	}
	BATroles(b, *hname, *tname);
	BBPreleaseref(b->batCacheid);
	*r =0;
	return MAL_SUCCEED;
}


str
BKCsetName(int *r, int *bid, str *s)
{
	BAT *b;
	bit res, *rp = &res;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.setName", RUNTIME_OBJECT_MISSING);
	}
	CMDrename(rp, b, *s);
	BBPreleaseref(b->batCacheid);
	*r = 0;
	return MAL_SUCCEED;
}

str
BKCgetBBPname(str *ret, int *bid)
{
	BAT *b;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.getName", RUNTIME_OBJECT_MISSING);
	}
	*ret = GDKstrdup(BBPname(b->batCacheid));
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

str
BKCunload(bit *res, str *input)
{
	CMDunload(res, *input);
	return MAL_SUCCEED;
}

str
BKCisCached(bit *res, int *bid)
{
	BAT *b;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.isCached", RUNTIME_OBJECT_MISSING);
	}
	*res = 0;
	BBPreleaseref(b->batCacheid);
	throw(MAL, "bat.isCached", PROGRAM_NYI);
}

str
BKCload(int *res, str *input)
{
	bat bid = BBPindex(*input);

	*res = bid;
	if (bid) {
		BBPincref(bid,TRUE);
		return MAL_SUCCEED;
	}
	throw(MAL, "bat.unload", ILLEGAL_ARGUMENT " File name missing");
}

str
BKChot(int *res, str *input)
{
	(void) res;		/* fool compiler */
	BBPhot(BBPindex(*input));
	return MAL_SUCCEED;
}

str
BKCcold(int *res, str *input)
{
	(void) res;		/* fool compiler */
	BBPcold(BBPindex(*input));
	return MAL_SUCCEED;
}

str
BKCcoldBAT(int *res, int *bid)
{
	BAT *b;

	(void) res;
	(void) bid;		/* fool compiler */
	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.isCached", RUNTIME_OBJECT_MISSING);
	}
	BBPcold(b->batCacheid);
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

str
BKCheat(int *res, str *input)
{
	int bid = BBPindex(*input);

	if (bid) {
		*res = BBP_lastused(bid) & 0x7fffffff;
	}
	throw(MAL, "bat", PROGRAM_NYI);
}

str
BKChotBAT(int *res, int *bid)
{
	BAT *b;

	(void) res;
	(void) bid;		/* fool compiler */
	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.isCached", RUNTIME_OBJECT_MISSING);
	}
	BBPhot(b->batCacheid);
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

str
BKCsave(bit *res, str *input)
{
	CMDsave(res, *input);
	return MAL_SUCCEED;
}

str
BKCsave2(int *r, int *bid)
{
	BAT *b;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.save", RUNTIME_OBJECT_MISSING);
	}

	if (b && BATdirty(b))
		BBPsave(b);
	BBPreleaseref(b->batCacheid);
	*r = 0;
	return MAL_SUCCEED;
}

str
BKCmmap(bit *res, int *bid, int *hbns, int *tbns, int *hhp, int *thp)
{
	BAT *b, *bn = NULL;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.mmap", RUNTIME_OBJECT_MISSING);
	}
	if (CMDmmap(&bn, b, hbns, tbns, hhp, thp) == GDK_SUCCEED) {
		*res = TRUE;
		BBPreleaseref(bn->batCacheid);
		BBPreleaseref(b->batCacheid);
		return MAL_SUCCEED;
	}
	*res =FALSE;
	BBPreleaseref(b->batCacheid);
	throw(MAL, "bat.mmap", GDK_EXCEPTION);
}

str
BKCmmap2(bit *res, int *bid, int *mode)
{
	return BKCmmap(res, bid, mode, mode, mode, mode);
}

str
BKCmadvise(bit *res, int *bid, int *hbns, int *tbns, int *hhp, int *thp)
{
	BAT *b;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.madvice", RUNTIME_OBJECT_MISSING);
	}
	*res = BATmadvise(b, (*hbns == int_nil) ? -1 : *hbns, (*tbns == int_nil) ? -1 : *tbns, (*hhp == int_nil) ? -1 : *hhp, (*thp == int_nil) ? -1 : *thp);
	BBPreleaseref(b->batCacheid);
	if (*res)
		throw(MAL, "bat.madvise", GDK_EXCEPTION);
	return MAL_SUCCEED;
}

str
BKCmadvise2(bit *res, int *bid, int *mode)
{
	return BKCmadvise(res, bid, mode, mode, mode, mode);
}

/*
 * @+ Accelerator Control
 */
str
BKCaccbuild(int *ret, int *bid, str *acc, ptr *param)
{
	(void) bid;
	(void) acc;
	(void) param;
	*ret = TRUE;
	throw(MAL, "Accelerator", PROGRAM_NYI);
}

str
BKCaccbuild_std(int *ret, int *bid, int *acc)
{
	(void) bid;
	(void) acc;
	*ret = TRUE;
	throw(MAL, "Accelerator", PROGRAM_NYI);
}


str
BKCsetHash(bit *ret, int *bid, bit *prop)
{
	BAT *b;

	(void) ret;
	(void) prop;		/* fool compiler */
	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.setHash", RUNTIME_OBJECT_MISSING);
	}
	BAThash(b, 0);
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

str
BKCsetSequenceBase(int *r, int *bid, oid *o)
{
	BAT *b;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.setSequenceBase", RUNTIME_OBJECT_MISSING);
	}
	BATseqbase(b, *o);
	*r = b->batCacheid;
	BBPkeepref(b->batCacheid);
	return MAL_SUCCEED;
}

str
BKCsetSequenceBaseNil(int *r, int *bid, oid *o)
{
	oid ov = oid_nil;

	(void) o;
	return BKCsetSequenceBase(r, bid, &ov);
}

str
BKCgetSequenceBase(oid *r, int *bid)
{
	BAT *b;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.setSequenceBase", RUNTIME_OBJECT_MISSING);
	}
	*r = b->hseqbase;
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}

/*
 * @-
 * Shrinking a void-headed BAT using a list of oids to ignore.
 */
@= shrinkloop
{
	@1 *p = (@1*)Tloc(b, BUNfirst(b));
	@1 *q = (@1*)Tloc(b, BUNlast(b));
	@1 *r = (@1*)Tloc(bn, BUNfirst(bn));

	cnt=0;
	for (;p<q; oidx++, p++) {
		if ( o < ol && *o == oidx ){
			o++;
		} else {
			cnt++;
			*r++ = *p;
		}
	}
}
@
@c
str
BKCshrinkBAT(int *ret, int *bid, int *did)
{
	BAT *b, *d, *bn, *bs;
	BUN cnt =0;
	oid oidx = 0, *o, *ol;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.shrink", RUNTIME_OBJECT_MISSING);
	}
	if ( b->htype != TYPE_void) {
		BBPreleaseref(b->batCacheid);
		throw(MAL, "bat.shrink", SEMANTIC_TYPE_MISMATCH);
	}
	if ((d = BATdescriptor(*did)) == NULL) {
		BBPreleaseref(b->batCacheid);
		throw(MAL, "bat.shrink", RUNTIME_OBJECT_MISSING);
	}
	bn= BATnew(b->htype, b->ttype, BATcount(b) - BATcount(d) );
	if (bn == NULL) {
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(d->batCacheid);
		throw(MAL, "bat.shrink", MAL_MALLOC_FAIL );
	}
	bs = BATmirror(BATsort(BATmirror(d)));
	if (bs == NULL) {
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(d->batCacheid);
		BBPreleaseref(bn->batCacheid);
		throw(MAL, "bat.shrink", MAL_MALLOC_FAIL );
	}

    	o = (oid*)Tloc(bs, BUNfirst(bs));
    	ol= (oid*)Tloc(bs, BUNlast(bs));

	BATaccessBegin(d, USE_TAIL, MMAP_SEQUENTIAL);
	BATaccessBegin(b, USE_TAIL, MMAP_SEQUENTIAL);
	switch(ATOMstorage(b->ttype) ){
	case TYPE_bte: @:shrinkloop(bte)@ break;
	case TYPE_sht: @:shrinkloop(sht)@ break;
	case TYPE_int: @:shrinkloop(int)@ break;
	case TYPE_lng: @:shrinkloop(lng)@ break;
	case TYPE_flt: @:shrinkloop(flt)@ break;
	case TYPE_dbl: @:shrinkloop(dbl)@ break;
	case TYPE_oid: @:shrinkloop(oid)@ break;
	default:
		if (ATOMvarsized(bn->ttype)) {
			BUN p = BUNfirst(b);
			BUN q = BUNlast(b);
			BATiter bi = bat_iterator(b);

			cnt=0;
			for (;p<q; oidx++, p++) {
				if ( o < ol && *o == oidx ){
					o++;
				} else {
					BUNappend(bn, BUNtail(bi, p), FALSE);
					cnt++;
				}
			}
		} else {
			switch( b->T->width){
			case 1:@:shrinkloop(bte)@ break;
			case 2:@:shrinkloop(sht)@ break;
			case 4:@:shrinkloop(int)@ break;
			case 8:@:shrinkloop(lng)@ break;
			default:
				throw(MAL, "bat.shrink", "Illegal argument type");
			}
		}
	}
	BATaccessEnd(d, USE_TAIL, MMAP_SEQUENTIAL);
	BATaccessEnd(b, USE_TAIL, MMAP_SEQUENTIAL);

	BATsetcount(bn, cnt);
	BATseqbase(bn, 0);
	bn->tsorted = 0;
	bn->trevsorted = 0;
	bn->tdense = 0;
	bn->tkey = b->tkey;
	bn->T->nonil = b->T->nonil;
	bn->T->nil = b->T->nil;

	if (!(bn->batDirty&2)) bn = BATsetaccess(bn, BAT_READ);

	BBPreleaseref(b->batCacheid);
	BBPreleaseref(d->batCacheid);
	BBPkeepref(*ret= bn->batCacheid);
	return MAL_SUCCEED;
}

str
BKCshrinkBATmap(int *ret, int *bid, int *did)
{
	BAT *b, *d, *bn, *bs;
	oid lim,oidx = 0, *o, *ol;
	oid *r;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.shrinkMap", RUNTIME_OBJECT_MISSING);
	}
	if ( b->htype != TYPE_void) {
		BBPreleaseref(b->batCacheid);
		throw(MAL, "bat.shrinkMap", SEMANTIC_TYPE_MISMATCH);
	}
	if ((d = BATdescriptor(*did)) == NULL) {
		BBPreleaseref(b->batCacheid);
		throw(MAL, "bat.shrinkMap", RUNTIME_OBJECT_MISSING);
	}
	if ( d->htype != TYPE_void) {
		BBPreleaseref(d->batCacheid);
		throw(MAL, "bat.shrinkMap", SEMANTIC_TYPE_MISMATCH);
	}

	bn= BATnew(TYPE_void, TYPE_oid, BATcount(b) );
	if (bn == NULL) {
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(d->batCacheid);
		throw(MAL, "bat.shrinkMap", MAL_MALLOC_FAIL );
	}
	bs = BATmirror(BATsort(BATmirror(d)));
	if (bs == NULL) {
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(d->batCacheid);
		BBPreleaseref(bn->batCacheid);
		throw(MAL, "bat.shrinkMap", MAL_MALLOC_FAIL );
	}

    	o = (oid*)Tloc(bs, BUNfirst(bs));
    	ol= (oid*)Tloc(bs, BUNlast(bs));
    	r = (oid*)Tloc(bn, BUNfirst(bn));

	lim = BATcount(b);

    BATaccessBegin(d, USE_TAIL, MMAP_SEQUENTIAL);
	for (;oidx<lim; oidx++) {
		if ( o < ol && *o == oidx ){
			o++;
		} else {
			*r++ = oidx;
		}
	}
    BATaccessEnd(d, USE_TAIL, MMAP_SEQUENTIAL);

    BATsetcount(bn, BATcount(b)-BATcount(d));
	BATseqbase(bn, b->hseqbase);
    bn->tsorted = 0;
    bn->trevsorted = 0;
    bn->tdense = 0;

    if (!(bn->batDirty&2)) bn = BATsetaccess(bn, BAT_READ);

	BBPreleaseref(b->batCacheid);
	BBPreleaseref(d->batCacheid);
	BBPkeepref(*ret= bn->batCacheid);
	return MAL_SUCCEED;
}
/*
 * @-
 * Shrinking a void-headed BAT using a list of oids to ignore.
 */
@= reuseloop
{
	@1 *p = (@1*)Tloc(b, BUNfirst(b));
	@1 *q = (@1*)Tloc(b, BUNlast(b));
	@1 *r = (@1*)Tloc(bn, BUNfirst(bn));

	for (;p<q; oidx++, p++) {
		if ( *o == oidx ){
			while ( *ol == bidx && ol>o) {
				bidx--;
				ol--;q--;
			}
			*r++ = *(--q);
			o += (o < ol);
			bidx--;
		} else
			*r++ = *p; 
	}
}
@
@c
str
BKCreuseBAT(int *ret, int *bid, int *did)
{
	BAT *b, *d, *bn, *bs;
	oid oidx = 0, bidx, *o, *ol;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.reuse", RUNTIME_OBJECT_MISSING);
	}
	if ( b->htype != TYPE_void) {
		BBPreleaseref(b->batCacheid);
		throw(MAL, "bat.reuse", SEMANTIC_TYPE_MISMATCH);
	}
	if ((d = BATdescriptor(*did)) == NULL) {
		BBPreleaseref(b->batCacheid);
		throw(MAL, "bat.reuse", RUNTIME_OBJECT_MISSING);
	}
	bn= BATnew(b->htype, b->ttype, BATcount(b) - BATcount(d) );
	if (bn == NULL) {
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(d->batCacheid);
		throw(MAL, "bat.reuse", MAL_MALLOC_FAIL );
	}
	bs = BATmirror(BATsort(BATmirror(d)));
	if (bs == NULL) {
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(d->batCacheid);
		BBPreleaseref(bn->batCacheid);
		throw(MAL, "bat.reuse", MAL_MALLOC_FAIL );
	}

	bidx= BUNlast(b)-1;
    	o = (oid*)Tloc(bs, BUNfirst(bs));
    	ol= (oid*)Tloc(bs, BUNlast(bs))-1;

    BATaccessBegin(d, USE_TAIL, MMAP_SEQUENTIAL);
    BATaccessBegin(b, USE_TAIL, MMAP_SEQUENTIAL);
	switch(ATOMstorage(b->ttype) ){
	case TYPE_bte: @:reuseloop(bte)@ break;
	case TYPE_sht: @:reuseloop(sht)@ break;
	case TYPE_int: @:reuseloop(int)@ break;
	case TYPE_lng: @:reuseloop(lng)@ break;
	case TYPE_flt: @:reuseloop(flt)@ break;
	case TYPE_dbl: @:reuseloop(dbl)@ break;
	case TYPE_oid: @:reuseloop(oid)@ break;
	case TYPE_str: /* to be done based on its index width */
	default:
		if (ATOMvarsized(bn->ttype)) {
			BUN p = BUNfirst(b);
			BUN q = BUNlast(b);
			BATiter bi = bat_iterator(b);
		
			for (;p<q; oidx++, p++) {
				if ( *o == oidx ){
					while ( *ol == bidx && ol>o) {
						bidx--;
						ol--;q--;
					}
					BUNappend(bn, BUNtail(bi, --q), FALSE);
					o += (o < ol);
					bidx--;
				} else
					BUNappend(bn, BUNtail(bi, p), FALSE);
			}
		} else {
			switch( b->T->width){
			case 1:@:reuseloop(bte)@ break;
			case 2:@:reuseloop(sht)@ break;
			case 4:@:reuseloop(int)@ break;
			case 8:@:reuseloop(lng)@ break;
			default:
				throw(MAL, "bat.shrink", "Illegal argument type");
			}
		}
	}
    BATaccessEnd(d, USE_TAIL, MMAP_SEQUENTIAL);
    BATaccessEnd(b, USE_TAIL, MMAP_SEQUENTIAL);

    BATsetcount(bn, BATcount(b) - BATcount(d));
	BATseqbase(bn, b->hseqbase);
    bn->tsorted = 0;
    bn->trevsorted = 0;
    bn->tdense = 0;
	bn->tkey = b->tkey;

    if (!(bn->batDirty&2)) bn = BATsetaccess(bn, BAT_READ);

	BBPreleaseref(b->batCacheid);
	BBPreleaseref(d->batCacheid);
	BBPkeepref(*ret= bn->batCacheid);
	return MAL_SUCCEED;
}
str
BKCreuseBATmap(int *ret, int *bid, int *did)
{
	BAT *b, *d, *bn, *bs;
	oid bidx, oidx = 0, *o, *ol;
	oid *r;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bat.shrinkMap", RUNTIME_OBJECT_MISSING);
	}
	if ( b->htype != TYPE_void) {
		BBPreleaseref(b->batCacheid);
		throw(MAL, "bat.shrinkMap", SEMANTIC_TYPE_MISMATCH);
	}
	if ((d = BATdescriptor(*did)) == NULL) {
		BBPreleaseref(b->batCacheid);
		throw(MAL, "bat.shrinkMap", RUNTIME_OBJECT_MISSING);
	}
	bn= BATnew(TYPE_void, TYPE_oid, BATcount(b) );
	if (bn == NULL) {
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(d->batCacheid);
		throw(MAL, "bat.shrinkMap", MAL_MALLOC_FAIL );
	}
	bs = BATmirror(BATsort(BATmirror(d)));
	if (bs == NULL) {
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(d->batCacheid);
		BBPreleaseref(bn->batCacheid);
		throw(MAL, "bat.shrinkMap", MAL_MALLOC_FAIL );
	}

	bidx= BUNlast(b)-1;
    o = (oid*)Tloc(d, BUNfirst(d));
    ol= (oid*)Tloc(d, BUNlast(d));
    r = (oid*)Tloc(bn, BUNfirst(bn));

    BATaccessBegin(d, USE_TAIL, MMAP_SEQUENTIAL);
	for (;oidx<bidx; oidx++) {
		if ( *o == oidx ){
			while ( ol > o && *--ol == bidx) {
				bidx--;
			}
			*r++ = bidx;
			o += (o < ol);
			bidx--;
		} else
			*r++ = oidx; 
	}
    BATaccessEnd(d, USE_TAIL, MMAP_SEQUENTIAL);

    BATsetcount(bn, BATcount(b)-BATcount(d));
	BATseqbase(bn, b->hseqbase);
    bn->tsorted = 0;
    bn->trevsorted = 0;
    bn->tdense = 0;

    if (!(bn->batDirty&2)) bn = BATsetaccess(bn, BAT_READ);

	BBPreleaseref(b->batCacheid);
	BBPreleaseref(d->batCacheid);
	BBPkeepref(*ret= bn->batCacheid);
	return MAL_SUCCEED;
}

