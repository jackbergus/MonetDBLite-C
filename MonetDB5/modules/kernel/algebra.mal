# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0.  If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# Copyright 1997 - July 2008 CWI, August 2008 - 2016 MonetDB B.V.

# 
module algebra;

# TO BE REMOVED OR CHANGED FOR HEADLESS

command tintersect( left:bat[:oid,:oid], right:bat[:oid,:oid] ) :bat[:oid,:oid]
address ALGtintersect;

command tdifference ( left:bat[:oid,:oid], right:bat[:oid,:oid] ) :bat[:oid,:oid]
address ALGtdifference;

command groupby(gids:bat[:oid,:oid], cnts:bat[:oid,:wrd]) :bat[:oid,:oid]
address ALGgroupby
comment "Produces a new BAT with groups identified by the head column. The result contains tail times the head value, ie the tail contains the result group sizes.";

command leftjoin( left:bat[:oid,:any_2], right:bat[:any_2,:any_3]) :bat[:oid,:any_3]
address ALGleftjoin;
command leftjoin( left:bat[:oid,:any_2], right:bat[:any_2,:any_3], estimate:lng) :bat[:oid,:any_3]
address ALGleftjoinestimate;

#END OF HEADLESS PLANS

command find(b:bat[:oid,:any_1], t:any_1):oid
address ALGfind
comment "Returns the index position of a value.  If no such BUN exists return OID-nil." ;

command fetch(b:bat[:oid,:any_1], x:oid) :any_1
address ALGfetchoid
comment "Returns the value of the BUN at x-th position with 0 <= x < b.count";

command leftfetchjoin ( left:bat[:oid,:oid], right:bat[:oid,:any_3] ) :bat[:oid,:any_3]
address ALGleftfetchjoin
comment "Hook directly into the left fetch join implementation.";

command revert( b:bat[:oid,:any_1]) :bat[:oid,:any_1]
address ALGrevert
comment "Returns a BAT copy with buns in reverse order";

# BAT copying
command copy( b:bat[:oid,:any_1]) :bat[:oid,:any_1]
address ALGcopy
comment "Returns physical copy of a BAT.";

command exist(b:bat[:oid,:any_1], val:any_1):bit
address ALGexist
comment "Returns whether 'val' occurs in b.";

# The range selections are targeted at the tail of the BAT.
command subselect(b:bat[:oid,:any_1], low:any_1, high:any_1, li:bit, hi:bit, anti:bit) :bat[:oid,:oid]
address ALGsubselect1
comment "Select all head values for which the tail value is in range.
	Input is a dense-headed BAT, output is a dense-headed BAT with in
	the tail the head value of the input BAT for which the tail value
	is between the values low and high (inclusive if li respectively
	hi is set).  The output BAT is sorted on the tail value.  If low
	or high is nil, the boundary is not considered (effectively - and
	+ infinity).  If anti is set, the result is the complement.  Nil
	values in the tail are never matched, unless low=nil, high=nil,
	li=1, hi=1, anti=0.  All non-nil values are returned if low=nil,
	high=nil, and li, hi are not both 1, or anti=1.
	Note that the output is suitable as second input for the other
	version of this function.";

command subselect(b:bat[:oid,:any_1], s:bat[:oid,:oid], low:any_1, high:any_1, li:bit, hi:bit, anti:bit) :bat[:oid,:oid]
address ALGsubselect2
comment "Select all head values of the first input BAT for which the tail value
	is in range and for which the head value occurs in the tail of the
	second input BAT.
	The first input is a dense-headed BAT, the second input is a
	dense-headed BAT with sorted tail, output is a dense-headed BAT
	with in the tail the head value of the input BAT for which the
	tail value is between the values low and high (inclusive if li
	respectively hi is set).  The output BAT is sorted on the tail
	value.  If low or high is nil, the boundary is not considered
	(effectively - and + infinity).  If anti is set, the result is the
	complement.  Nil values in the tail are never matched, unless
	low=nil, high=nil, li=1, hi=1, anti=0.  All non-nil values are
	returned if low=nil, high=nil, and li, hi are not both 1, or anti=1.
	Note that the output is suitable as second input for this
	function.";

command thetasubselect(b:bat[:oid,:any_1], val:any_1, op:str) :bat[:oid,:oid]
address ALGthetasubselect1
comment "Select all head values for which the tail value obeys the relation
	value OP VAL.
	Input is a dense-headed BAT, output is a dense-headed BAT with in
	the tail the head value of the input BAT for which the
	relationship holds.  The output BAT is sorted on the tail value.";

command thetasubselect(b:bat[:oid,:any_1], s:bat[:oid,:oid], val:any_1, op:str) :bat[:oid,:oid]
address ALGthetasubselect2
comment "Select all head values of the first input BAT for which the tail value
	obeys the relation value OP VAL and for which the head value occurs in
	the tail of the second input BAT.
	Input is a dense-headed BAT, output is a dense-headed BAT with in
	the tail the head value of the input BAT for which the
	relationship holds.  The output BAT is sorted on the tail value.";


command select(b:bat[:oid,:any_2], low:any_2, high:any_2):bat[:oid,:any_2]
address ALGselect
comment "Select all BUNs that have tail values: {v| low <= v <= high}.
	NIL boundary values have a special meaning.
		+ low  == nil means: no lower bound
		+ high == nil means: no upper bound.
		NOTE 1: you should cast the nil to the appropriate type,
				e.g. int(nil) in order to circumvent type clashes.
		NOTE 2: as the 'nil' element has no clear place in the
				ordered domain of values, tuples with 'nil' values
				are NEVER returned by the range select.";

command select(b:bat[:oid,:any_2], low:any_2, high:any_2, li:bit, hi:bit) :bat[:oid,:any_2]
address ALGselectInclusive
comment "Select all BUNs that have tail values: {v| low <{=} v <{=} high}.
	Boundary inclusion is indicated separately.
	NIL boundary values have a special meaning.
	+ low  == nil means: no lower bound
	+ high == nil means: no upper bound.";

command select(b:bat[:oid,:any_2],value:any_2) :bat[:oid,:any_2]
address ALGselect1
comment "Select all BUNs of a BAT with a certain
	tail value. Selection on NIL is also
	possible (it should be properly casted,
	e.g.:int(nil)).";

command selectNotNil(b:bat[:oid,:any_2]):bat[:oid,:any_2]
address ALGselectNotNil
comment "Select all not-nil values";

# Pattern matching
command like(b:bat[:oid,:str], substr:str) :bat[:oid,:str]
address ALGlike
comment "Selects all elements that have 'substr' as in the tail.";

# Sampling
command sample ( b:bat[:oid,:any_1], num:int ) :bat[:oid,:oid]
address ALGsample
comment "Returns the oids of a random selection of size 'num' from the input BAT.";

command subsort(b:bat[:oid,:any_1], reverse:bit, stable:bit) :bat[:oid,:any_1]
address ALGsubsort11
comment "Returns a copy of the BAT sorted on tail values.
         The input and output are (must be) dense headed.
         The order is descending if the reverse bit is set.
		 This is a stable sort if the stable bit is set.";
command subsort(b:bat[:oid,:any_1], reverse:bit, stable:bit) (:bat[:oid,:any_1], :bat[:oid,:oid])
address ALGsubsort12
comment "Returns a copy of the BAT sorted on tail values and a BAT that
         specifies how the input was reordered.
         The input and output are (must be) dense headed.
         The order is descending if the reverse bit is set.
		 This is a stable sort if the stable bit is set.";
command subsort(b:bat[:oid,:any_1], reverse:bit, stable:bit) (:bat[:oid,:any_1], :bat[:oid,:oid], :bat[:oid,:oid])
address ALGsubsort13
comment "Returns a copy of the BAT sorted on tail values, a BAT that specifies
         how the input was reordered, and a BAT with group information.
         The input and output are (must be) dense headed.
         The order is descending if the reverse bit is set.
		 This is a stable sort if the stable bit is set.";
command subsort(b:bat[:oid,:any_1], o:bat[:oid,:oid], reverse:bit, stable:bit) :bat[:oid,:any_1]
address ALGsubsort21
comment "Returns a copy of the BAT sorted on tail values.
         The input and output are (must be) dense headed.
         The order is descending if the reverse bit is set.
		 This is a stable sort if the stable bit is set.";
command subsort(b:bat[:oid,:any_1], o:bat[:oid,:oid], reverse:bit, stable:bit) (:bat[:oid,:any_1], :bat[:oid,:oid])
address ALGsubsort22
comment "Returns a copy of the BAT sorted on tail values and a BAT that
         specifies how the input was reordered.
         The input and output are (must be) dense headed.
         The order is descending if the reverse bit is set.
		 This is a stable sort if the stable bit is set.";
command subsort(b:bat[:oid,:any_1], o:bat[:oid,:oid], reverse:bit, stable:bit) (:bat[:oid,:any_1], :bat[:oid,:oid], :bat[:oid,:oid])
address ALGsubsort23
comment "Returns a copy of the BAT sorted on tail values, a BAT that specifies
         how the input was reordered, and a BAT with group information.
         The input and output are (must be) dense headed.
         The order is descending if the reverse bit is set.
		 This is a stable sort if the stable bit is set.";
command subsort(b:bat[:oid,:any_1], o:bat[:oid,:oid], g:bat[:oid,:oid], reverse:bit, stable:bit) :bat[:oid,:any_1]
address ALGsubsort31
comment "Returns a copy of the BAT sorted on tail values.
         The input and output are (must be) dense headed.
         The order is descending if the reverse bit is set.
		 This is a stable sort if the stable bit is set.";
command subsort(b:bat[:oid,:any_1], o:bat[:oid,:oid], g:bat[:oid,:oid], reverse:bit, stable:bit) (:bat[:oid,:any_1], :bat[:oid,:oid])
address ALGsubsort32
comment "Returns a copy of the BAT sorted on tail values and a BAT that
         specifies how the input was reordered.
         The input and output are (must be) dense headed.
         The order is descending if the reverse bit is set.
		 This is a stable sort if the stable bit is set.";
command subsort(b:bat[:oid,:any_1], o:bat[:oid,:oid], g:bat[:oid,:oid], reverse:bit, stable:bit) (:bat[:oid,:any_1], :bat[:oid,:oid], :bat[:oid,:oid])
address ALGsubsort33
comment "Returns a copy of the BAT sorted on tail values, a BAT that specifies
         how the input was reordered, and a BAT with group information.
         The input and output are (must be) dense headed.
         The order is descending if the reverse bit is set.
		 This is a stable sort if the stable bit is set.";

command subunique(b:bat[:oid,:any_1], s:bat[:oid,:oid]) :bat[:oid,:oid]
address ALGsubunique2
comment "Select all unique values from the tail of the first input.
	Input is a dense-headed BAT, the second input is a
	dense-headed BAT with sorted tail, output is a dense-headed
	BAT with in the tail the head value of the input BAT that was
	selected.  The output BAT is sorted on the tail value.  The
	second input BAT is a list of candidates.";
command subunique(b:bat[:oid,:any_1]) :bat[:oid,:oid]
address ALGsubunique1
comment "Select all unique values from the tail of the input.
	Input is a dense-headed BAT, output is a dense-headed BAT with
	in the tail the head value of the input BAT that was selected.
	The output BAT is sorted on the tail value.";


command tinter( left:bat[:oid,:oid], right:bat[:oid,:oid] ) :bat[:oid,:oid]
address ALGtinter;

command tdiff( left:bat[:oid,:oid], right:bat[:oid,:oid] ) :bat[:oid,:oid]
address ALGtdiff;

command tunion ( left:bat[:any_1,:any_2], right:bat[:any_1,:any_2])
		:bat[:any_1,:any_2]
address ALGtunion;

# @+ Join operations
# The core of every relational engine.
# The join collection provided by the GDK kernel.
command antijoin( left:bat[:oid,:any_1], right:bat[:oid,:any_1]) (l:bat[:oid,:oid],r:bat[:oid,:oid])
address ALGantijoin2
comment "Returns 2 columns with all BUNs, consisting of the head-oids
	  from 'left' and 'right' for which there are BUNs in 'left'
	  and 'right' with equal tails";

command join( left:bat[:oid,:any_1], right:bat[:oid,:any_1])
		(l:bat[:oid,:oid],r:bat[:oid,:oid])
address ALGjoin2
comment "Returns 2 columns with all BUNs, consisting of the head-oids
	  from 'left' and 'right' for which there are BUNs in 'left'
	  and 'right' with equal tails";

# Theta Join
#command thetajoin( left:bat[:oid,:any_1], right:bat[:oid,:any_1], opname:int)
#		(l:bat[:oid,:oid],r:bat[:oid,:oid])
#address ALGthetajoin2
#comment "Returns 2 columns with all BUNs, consisting of the head-oids
#	  from 'left' and 'right' for which there are BUNs in 'left'
#	  and 'right' with equal tails";

command crossproduct( left:bat[:oid,:any_1], right:bat[:oid,:any_2])
		(l:bat[:oid,:oid],r:bat[:oid,:oid])
address ALGcrossproduct2
comment "Returns 2 columns with all BUNs, consisting of the head-oids
	  from 'left' and 'right' for which there are BUNs in 'left'
	  and 'right' with equal tails";

command join(left:bat[:oid,:any_2], rl:bat[:oid,:any_2], rh:bat[:oid,:any_2], li:bit, hi:bit)
		(l:bat[:oid,:oid],r:bat[:oid,:oid])
address ALGrangejoin2;

command subjoin(l:bat[:oid,:any_1],r:bat[:oid,:any_1],sl:bat[:oid,:oid],sr:bat[:oid,:oid],nil_matches:bit,estimate:lng) (:bat[:oid,:oid],:bat[:oid,:oid])
address ALGsubjoin
comment "Join";

command subleftjoin(l:bat[:oid,:any_1],r:bat[:oid,:any_1],sl:bat[:oid,:oid],sr:bat[:oid,:oid],nil_matches:bit,estimate:lng) (:bat[:oid,:oid],:bat[:oid,:oid])
address ALGsubleftjoin
comment "Left join with candidate lists";

command subouterjoin(l:bat[:oid,:any_1],r:bat[:oid,:any_1],sl:bat[:oid,:oid],sr:bat[:oid,:oid],nil_matches:bit,estimate:lng) (:bat[:oid,:oid],:bat[:oid,:oid])
address ALGsubouterjoin
comment "Left outer join with candidate lists";

command subthetajoin(l:bat[:oid,:any_1],r:bat[:oid,:any_1],sl:bat[:oid,:oid],sr:bat[:oid,:oid],op:int,nil_matches:bit,estimate:lng) (:bat[:oid,:oid],:bat[:oid,:oid])
address ALGsubthetajoin
comment "Theta join with candidate lists";

function subantijoin(l:bat[:oid,:any_1],r:bat[:oid,:any_1],sl:bat[:oid,:oid],sr:bat[:oid,:oid],nil_matches:bit,estimate:lng) (:bat[:oid,:oid],:bat[:oid,:oid]);
	 # JOIN_NE == -3
	(r1,r2) := subthetajoin(l,r,sl,sr,-3:int,nil_matches,estimate);
	return (r1,r2);
end subantijoin;

command subbandjoin(l:bat[:oid,:any_1],r:bat[:oid,:any_1],sl:bat[:oid,:oid],sr:bat[:oid,:oid],c1:any_1,c2:any_1,li:bit,hi:bit,estimate:lng) (:bat[:oid,:oid],:bat[:oid,:oid])
address ALGsubbandjoin
comment "Band join: values in l and r match if r - c1 <[=] l <[=] r + c2";

command subrangejoin(l:bat[:oid,:any_1],r1:bat[:oid,:any_1],r2:bat[:oid,:any_1],sl:bat[:oid,:oid],sr:bat[:oid,:oid],li:bit,hi:bit,estimate:lng) (:bat[:oid,:oid],:bat[:oid,:oid])
address ALGsubrangejoin
comment "Range join: values in l and r1/r2 match if r1 <[=] l <[=] r2";

# @+ Projection operations
pattern project(b:bat[:oid,:any_1],v:any_3) :bat[:oid,:any_3]
address ALGprojecttail
comment "Fill the tail with a constant";

pattern firstn(b:bat[:oid,:any], n:wrd, asc:bit, distinct:bit) :bat[:oid,:oid]
address ALGfirstn
comment "Calculate first N values of B";
pattern firstn(b:bat[:oid,:any], s:bat[:oid,:oid], n:wrd, asc:bit, distinct:bit) :bat[:oid,:oid]
address ALGfirstn
comment "Calculate first N values of B with candidate list S";
pattern firstn(b:bat[:oid,:any], s:bat[:oid,:oid], g:bat[:oid,:oid], n:wrd, asc:bit, distinct:bit) :bat[:oid,:oid]
address ALGfirstn
comment "Calculate first N values of B with candidate list S";
pattern firstn(b:bat[:oid,:any], n:wrd, asc:bit, distinct:bit) (:bat[:oid,:oid],:bat[:oid,:oid])
address ALGfirstn
comment "Calculate first N values of B";
pattern firstn(b:bat[:oid,:any], s:bat[:oid,:oid], n:wrd, asc:bit, distinct:bit) (:bat[:oid,:oid],:bat[:oid,:oid])
address ALGfirstn
comment "Calculate first N values of B with candidate list S";
pattern firstn(b:bat[:oid,:any], s:bat[:oid,:oid], g:bat[:oid,:oid], n:wrd, asc:bit, distinct:bit) (:bat[:oid,:oid],:bat[:oid,:oid])
address ALGfirstn
comment "Calculate first N values of B with candidate list S";

# @+ OID Introducing Commands
# For relational processing, some operators are necessary to produce newly
# initiated OID columns, for representing n-ary (intermediary) relations.
command mark( b:bat[:any_1,:any_2], base:oid ) :bat[:any_1,:oid]
address ALGtmark
comment "Produces a BAT with fresh unique dense sequense of OIDs in
		the tail that starts at base (i.e. [base,..base+b.count()-1] ).";

command mark( b:bat[:any_1,:any_2] ) :bat[:any_1,:oid]
address ALGtmark_default
comment "Produces a BAT with fresh unique OIDs in the tail starting at 0@0.";

command mark( b:bat[:any_1,:any_2], nr_parts:int, part_nr:int ) :bat[:any_1,:oid]
address ALGtmarkp
comment "Produces a BAT with fresh unique dense sequense of OIDs in
	the tail that starts at base (i.e. [base,..base+b.count()-1] ).
	The base is uniquely defined by the part_nr (ie we set the highest
	bits based on the part_nr/nr_parts) ";

command mark_grp( b:bat[:any_1,:oid], g:bat[:oid,:oid]) :bat[:any_1,:oid]
address ALGmark_grp_1
comment "\"grouped mark\": Produces a new BAT with per group a locally unique dense
 ascending sequence of OIDs in the tail. The tail of the first BAT (b)
 identifies the group that each BUN of b belongs to. The second BAT (g)
 represents the group extent, i.e., the head is the unique list of group IDs
 from b's tail. The tail of g gives for each group the base value for the new
 OID sequence.";

command mark_grp(b:bat[:any_1,:oid], g:bat[:oid,:any_2], s:oid) :bat[:any_1,:oid]
address ALGmark_grp_2
comment "\"grouped mark\": Produces a new BAT with per group a locally unique dense
 ascending sequense of OIDs in the tail. The tail of the first BAT (b)
 identifies the group that each BUN of b belongs to. The second BAT (g)
 represents the group extent, i.e., the head is the unique list of group IDs
 from b's tail. The third argument (s) gives the base value for the new
 OID sequence of each group.";

command reuse(b:bat[:oid,:any_1]):bat[:oid,:any_1]
address ALGreuse
comment "Reuse a temporary BAT if you can. Otherwise,
	allocate enough storage to accept result of an
 	operation (not involving the heap)";

# The second group uses the head to perform the range selection
command slice(b:bat[:oid,:any_1], x:oid, y:oid) :bat[:oid,:any_1]
address ALGslice_oid
comment "Return the slice based on head oid x till y (exclusive).";

command slice(b:bat[:oid,:any_1], x:lng, y:lng) :bat[:oid,:any_1]
address ALGslice
comment "Return the slice with the BUNs at position x till y.";

command slice(b:bat[:oid,:any_1], x:int, y:int) :bat[:oid,:any_1]
address ALGslice_int
comment "Return the slice with the BUNs at position x till y.";

command slice(b:bat[:oid,:any_1], x:wrd, y:wrd) :bat[:oid,:any_1]
address ALGslice_wrd
comment "Return the slice with the BUNs at position x till y.";

command subslice(b:bat[:oid,:any_1], x:wrd, y:wrd) :bat[:oid,:oid]
address ALGsubslice_wrd
comment "Return the oids of the slice with the BUNs at position x till y.";

# @+ Common BAT Aggregates
# These operations examine a BAT, and compute some simple aggregate result
# over it.
#  BAT size
module aggr;

command count( b:bat[:oid,:any] ) :wrd
address ALGcount_bat
comment "Return the current size (in number of elements) in a BAT.";
command count ( b:bat[:oid,:any], ignore_nils:bit ) :wrd
address ALGcount_nil
comment "Return the number of elements currently in a BAT ignores
		BUNs with nil-tail iff ignore_nils==TRUE.";
command count_no_nil ( b:bat[:oid,:any_2]) :wrd
address ALGcount_no_nil
comment "Return the number of elements currently
	in a BAT ignoring BUNs with nil-tail";

#  Default Min and Max
# Implementations a generic Min and Max routines get declared first. The
# @emph{min()} and @emph{max()} routines below catch any tail-type.
# The type-specific routines defined later are faster, and will
# override these any implementations.
command cardinality( b:bat[:oid,:any_2] ) :lng
address ALGcard
comment "Return the cardinality of the BAT tail values.";
# Implementations a generic Min and Max routines get declared first. The
# @emph{ min()} and @emph{ max()} routines below catch any tail-type.
# The type-specific routines defined later are faster, and will
# override these any implementations.

#SQL uses variable head types
command min(b:bat[:oid,:any_2]):any_2
address ALGminany
comment "Return the lowest tail value or nil.";

command max(b:bat[:oid,:any_2]):any_2
address ALGmaxany
comment "Return the highest tail value or nil.";

pattern avg (b:bat[:oid,:any_2] ) :dbl
address CMDcalcavg
comment "Gives the avg of all tail values";

# Standard deviation
# The standard deviation of a set is the square root of its variance.
# The variance is the sum of squares of the deviation of each value in the set
# from the mean (average) value, divided by the population of the set.
command stdev(b:bat[:oid,:any_2]) :dbl
address ALGstdev
comment "Gives the standard deviation of all tail values";
command stdevp(b:bat[:oid,:any_2]) :dbl
address ALGstdevp
comment "Gives the standard deviation of all tail values";
command variance(b:bat[:oid,:any_2]) :dbl
address ALGvariance
comment "Gives the variance of all tail values";
command variancep(b:bat[:oid,:any_2]) :dbl
address ALGvariancep
comment "Gives the variance of all tail values";

