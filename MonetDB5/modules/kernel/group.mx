@/
The contents of this file are subject to the MonetDB Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.monetdb.org/Legal/MonetDBLicense

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is the MonetDB Database System.

The Initial Developer of the Original Code is CWI.
Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
Copyright August 2008-2013 MonetDB B.V.
All Rights Reserved.
@

@f group

@c
/*
 * @a M.L. Kersten, P. Boncz, A.P. de Vries, N.J. Nes
 * @v 2.3
 * @+ The group module
 * This module contains the primitives to construct, derive, and
 * perform statistical operations on BATs representing groups.
 * The default scheme in Monet is to assume the head to represent
 * the group identifier and the tail an element in the group.
 *
 * Groups play an important role in datamining, where they are used
 * to construct cross-tables. Such cross tables over a single
 * BAT are already supported by the histogram function.
 * This module provides extensions to support identification of groups in a
 * (multi-)dimensional space.
 *
 * The module implementation has a long history. The first implementation
 * provided several alternatives to produce/derive the grouping.
 * A more complete (and complex) scheme was derived during its
 * extensive use in the context of the Data Distilleries  product.
 * The current implementation is partly a cleanup of this code-base,
 * but also enables provides better access to the intermediate
 * structures produced in the process, i.e. the histogram and
 * the sub-group mapping. They can be used for various optimization
 * schemes at the MAL level.
 *
 * The prime limitation of the current implementation is that an
 * underlying database of @code{oid->any} BATs is assumed.
 * This enables representation of each group using an oid,
 * and the value representation of the group can be accordingly be
 * retrieved easily. An optimized implementation in which we use positional
 * integer id's (as embodied by Monet's void type) is also available.
 *
 * This limitation on (v)oid-headers is marginal. The primitive GRPsplit
 * produces for any BAT two copies with both a (v)oid header.
 * @- Algorithms
 * There are several approaches to build a cross table. The one chosen here
 * is aimed at incremental construction, such that re-use of intermediates
 * becomes possible. Starting with the first dimension, a BAT is derived to
 * represent the various groups, called a @emph{GRP BAT} or cross-table BAT.
 *
 * @- Cross Table (GRP)
 * A cross table is an <oid,oid> BAT where the first (head) denotes a tuple in
 * the cross table and the second (tail) marks all identical lists.
 * The tail-oids contain group identifiers; that is, @emph{this value is equal
 * @strong{iff} two tuples belong to the same group}. The group identifiers are
 * chosen from the domain of the tuple-identifiers. This simplifies
 * getting back to the original tuples, when talking about a group.
 * If the tuple-oid of 'John' is chosen as a group-id, you might view this
 * as saying that each member of the group is 'like John' with respect
 * to the grouping-criterion.
 *
 * @-
 * Successively the subgroups can be identified by modifying the GRP BAT or
 * to derive a new GRP BAT for the subgroups. After all groups have been
 * identified this way, a BAT histogram operation can be used to obtain
 * the counts of each data cube. Other aggregation operations using the MIL
 * set aggregate construct @code{@{X@}(bat)}
 * can be used as well; note for instance that @code{histogram == @{count@}(b.reverse())}.
 *
 * The Monet interface module specification is shown below.
 * Ideally we should defined stronger type constraints, e.g.
 * command group.new(attr:bat[@{void,oid@},:any_1]
 */
@mal
module group;

command subgroup(b:bat[:oid,:any_1]) (groups:bat[:oid,:oid],extents:bat[:oid,:oid],histo:bat[:oid,:wrd])
address GRPsubgroup1;
command subgroup(b:bat[:oid,:any_1],g:bat[:oid,:oid]) (groups:bat[:oid,:oid],extents:bat[:oid,:oid],histo:bat[:oid,:wrd])
address GRPsubgroup2;
command subgroup(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:oid],h:bat[:oid,:wrd]) (groups:bat[:oid,:oid],extents:bat[:oid,:oid],histo:bat[:oid,:wrd])
address GRPsubgroup4;

command subgroupdone(b:bat[:oid,:any_1]) (groups:bat[:oid,:oid],extents:bat[:oid,:oid],histo:bat[:oid,:wrd])
address GRPsubgroup1;
command subgroupdone(b:bat[:oid,:any_1],g:bat[:oid,:oid]) (groups:bat[:oid,:oid],extents:bat[:oid,:oid],histo:bat[:oid,:wrd])
address GRPsubgroup2;
command subgroupdone(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:oid],h:bat[:oid,:wrd]) (groups:bat[:oid,:oid],extents:bat[:oid,:oid],histo:bat[:oid,:wrd])
address GRPsubgroup4;

command new(attr:bat[:any_1,:any_2] )
	(histo:bat[:any_1,:wrd], grp:bat[:any_1,:void]) 
address GRPgroup;

command new(attr:bat[:any_1,:any_2] )
	(histo:bat[:any_1,:wrd], grp:bat[:any_1,:oid]) 
address GRPgroup;

command done(attr:bat[:any_1,:any_2] )
	(histo:bat[:any_1,:wrd], grp:bat[:any_1,:void]) 
address GRPgroup;

command done(attr:bat[:any_1,:any_2] )
	(histo:bat[:any_1,:wrd], grp:bat[:any_1,:oid]) 
address GRPgroup;

command derive(hist:bat[:any_1,:wrd], map:bat[:any_1,:oid], a:bat[:any_1,:any_2])
	(histo:bat[:any_1,:wrd],grp:bat[:any_1,:oid]) 
address GRPderive
comment "Cross tabulation group extension step.  Returned head values are 
		identical as in 'ct'. Tail values are from the same domain and 
		indicate further refinement of the groups in 'ct', taking into 
		account also the tail-values in 'attr'.";
command derive(histo:bat[:void,:wrd], map:bat[:void,:oid], a:bat[:oid,:any_2])
	(hist:bat[:oid,:wrd],grp:bat[:oid,:oid]) 
address GRPderive;

command done(hist:bat[:any_1,:wrd], map:bat[:any_1,:oid], a:bat[:any_1,:any_2])
	(histo:bat[:any_1,:wrd],grp:bat[:any_1,:oid]) 
address GRPderive;

command done(histo:bat[:void,:wrd], map:bat[:void,:oid], a:bat[:oid,:any_2])
	(hist:bat[:oid,:wrd],grp:bat[:oid,:oid]) 
address GRPderive;

command refine(b:bat[:any_2,:any_3], a:bat[:any_2,:any_1]) :bat[:any_2,:oid] 
address GRPrefine
comment "refine the ordering of a tail-ordered BAT by sub-ordering on the 
		values of a second bat 'a' (where the heads of a and b match 1-1).
		The effect of this is similar to (hash-based) GRPderive, with the 
		distinction that the group ids respect the ordering of the group 
		values.";

command refine(b:bat[:oid,:any_3], a:bat[:void,:any_1]) :bat[:oid,:oid] 
address GRPrefine;
command refine(b:bat[:void,:any_3], a:bat[:oid,:any_1]) :bat[:oid,:oid] 
address GRPrefine;

command refine_reverse(b:bat[:any_2,:any_3], a:bat[:any_2,:any_1]) :bat[:any_2,:oid] 
address GRPrefine_rev
comment "refine the ordering of a tail-ordered BAT by sub-ordering on the 
		values of a second bat 'a' (where the heads of a and b match 1-1).
		The effect of this is similar to (hash-based) GRPderive, with the 
		distinction that the group ids respect the ordering of the group 
		values.";
		# @-
		# @+ Group Aggregate operations
		#
		# This module also contains some efficient aggregate functions over
		# groups that compute their result in one scan.
		#
		# For the groups we assume a bat structure where the head indicates the group
		# and the tail contains the group elements. This leads to the situation that
		# most value-based operators work on the tail, while counting groups
		# is focussed on the head.
@= grpSignature
command sum(b:bat[:any_2,:@1], e:bat[:any_2,:any_1]) :bat[:any_2,:@1] 
address GRPsum_@1_@1
comment "grouped tail sum";

command sum(b:bat[:any_2,:@1], size:int) :bat[:any_2,:@1] 
address GRPwindowsum_@1
comment "Tail sum of groups of a fixed size";

command sum(b:bat[:any_2,:@1], size:int, shift:int) :bat[:any_2,:@1] 
address GRPslidingsum_@1
comment "Tail sum of groups of a sliding window of fixed size";

command avg(b:bat[:any_2,:@1], e:bat[:any_2,:any_1]) :bat[:any_2,:@1] 
address GRPavg_@1
comment "grouped tail average";

command variance(b:bat[:any_2,:@1], e:bat[:any_2,:any_1]) :bat[:any_2,:@1] 
address GRPvar_@1
comment "grouped tail variance";

@
@mal
# @-
# Not used yet
# #command min(b:bat[:any_2,:@1], size:int) :bat[:any_2,:@1]
# #address GRPwindowmin@1
# #comment "Tail minimum of groups of a fixed size";
# #command max(b:bat[:any_2,:@1], size:int) :bat[:any_2,:@1]
# #address GRPwindowmax@1
# #comment "Tail minimum of groups of a fixed size";
	@:grpSignature(bte)@
	@:grpSignature(sht)@
	@:grpSignature(int)@
	@:grpSignature(lng)@
	@:grpSignature(wrd)@
	@:grpSignature(flt)@
	@:grpSignature(dbl)@
	@:grpSignature(oid)@

command min(b:bat[:any_2,:any_1], e:bat[:any_2,:any_3]) :bat[:any_2,:any_1] 
address GRPmin
comment "Grouped tail minimum";
command max(b:bat[:any_2,:any_1], e:bat[:any_2,:any_3]) :bat[:any_2,:any_1] 
address GRPmax
comment "Grouped tail maximum";

command count(b:bat[:any_2,:any_1], e:bat[:any_2,:any_3], nonils:bit) :bat[:any_2,:wrd] 
address GRPaggr_count
comment "Grouped count";
command size(b:bat[:any_2,:bit], e:bat[:any_2,:any_1]) :bat[:any_2,:wrd] 
address GRPsize
comment "Grouped count of true values";

@h
/*
 * @+ Implementation Code
 * Inclusion of the xtables requires some preliminary definitions
 * and als renaming :group by something else, because Mx can;t handle
 * macros identical to file names.
 */
#ifndef _GROUP_H_
#define _GROUP_H_
#include "gdk.h"

#ifdef WIN32
#if !defined(LIBMAL) && !defined(LIBATOMS) && !defined(LIBKERNEL) && !defined(LIBMAL) && !defined(LIBOPTIMIZER) && !defined(LIBSCHEDULER) && !defined(LIBMONETDB5)
#define group_export extern __declspec(dllimport)
#else
#define group_export extern __declspec(dllexport)
#endif
#else
#define group_export extern
#endif

group_export str GRPsubgroup1(bat *ngid, bat *next, bat *nhis, bat *bid);
group_export str GRPsubgroup2(bat *ngid, bat *next, bat *nhis,
							  bat *bid, bat *gid);
group_export str GRPsubgroup4(bat *ngid, bat *next, bat *nhis,
							  bat *bid, bat *gid, bat *eid, bat *hid);
group_export str GRPgroup(int *rethisto, int *retbid, int *bid);
group_export str GRPderive(int *hid, int *mid, int *ct_histoid, int *ct_mapid, int *bid);
group_export str GRPrefine(int *retid, int *bid, int *aid);
group_export str GRPrefine_rev(int *retid, int *bid, int *aid);

/* used by rdf_shredder.mx */
group_export int CTrefine(BAT **res, BAT *b, BAT *a);
group_export int CTrefine_rev(BAT **res, BAT *b, BAT *a);

#endif /* _GROUP_H_ */
@c
#include "monetdb_config.h"
#include "mal.h"
#include "mal_exception.h"
#include "mal_atom.h"
#include "group.h"
#include "algebra.h"

/*
 * @+ Core Grouping Algorithms
 * We use hash-grouping all the way. This implementation employs
 * a simple sequential scan through the operands, adding group
 * values to a hash-table. This hash-table gives access to the group
 * identifiers, which are always OIDs.
 *
 * This strategy is also followed on binary groupings; here
 * we construct a special integer consisting of the XORed hashnumber
 * of both columns. In such a way, we can build a hash table on
 * map_entries (instead of simple atomic values -- the unary case).
 *
 * In the unary group case, we optimized processing on 1-byte
 * and 2-byte values by using direct mapping in an array instead of
 * hashing.
 */
#if SIZEOF_BUN == SIZEOF_INT
#define mix_BUN(v) mix_int(v)
#else
#define mix_BUN(v) mix_int((v)^((v)>>31))
#endif
#define HASH_bte(p) ((BUN) (*(const unsigned char*) (p)))
#define HASH_sht(p) ((BUN) (*(const unsigned short*) (p)))
#define HASH_int(p) ((BUN) (*(const unsigned int*) (p)))
#if SIZEOF_BUN == SIZEOF_LNG
#define HASH_lng(p) ((BUN) (*(BUN *) (p)))
#else
#define HASH_lng(p) ((BUN) (((const unsigned int*)(p))[0]^((const unsigned int*)(p))[1]))
#endif
#define HASH_str_hv(p) (((BUN *) (p))[-1])
#define HASH_any(p) ((*hashfcn)(p))

#define match_sync(bi,p,r) r++
#define match_hash(bi,p,r) BUNfndOID(r,bi,p); if (r == BUN_NONE) continue;

#define declare_atom int any = b->ttype; BUN (*hashfcn)(const void *) = BATatoms[any].atomHash;
#define declare_simple	/* any and hash would otherwise give unused variable warning */
#define declare_str_hv

#define htype_sync(b) BAThdense(b)?TYPE_void:TYPE_oid
#define htype_hash(b) TYPE_oid

#define ttype_simple(b,t) t
#define ttype_atom(b,t) b->ttype

#define str_hv_EQ(a,b,t) GDK_STREQ(a,b)

/*
   Note:
	following macros take advantage of clustered property;
	if b is clustered, then we can stop early traversing collision lists.

	BTW, simply stopping possibly breaks chain construction, so the resulting
	map is not directly reuseable as a hash table; the current Monet cannot
	however handle multiple accellerators, so this ain't a real problem for now :)
 */

#define declare_unclustered	/* avoid warning */
#define declare_clustered   int samecluster = TRUE;

#define chain_unclustered   for (zz = hash[c]; zz != BUN_NONE; zz = e->use.link)
#define chain_clustered     for (zz = hash[c]; (zz != BUN_NONE) && (samecluster); zz = e->use.link)

#define tst_grp_unclustered(eq,p,t)    (eq(p, tcur, t))
#define tst_grp_clustered(eq,p,t)      (samecluster = eq(p, tcur, t))

/*
 * @+ Support for Order-by
 */
#define DEFAULT_SIZE 10000

static inline BUN
sort_flush(var_t *off, oid *o, BUN size, int tpe, char *base, oid *hdst, oid *tdst, oid *idp, int reverse)
{
	int (*cmp) (const void *, const void *) = BATatoms[tpe].atomCmp;
	int shift = 0;
	oid id = *idp + 1;
	ptr cur, val;
	BUN i;

	/* StM: we don't need to sort voids, do we??? */
	if (tpe != TYPE_void) {
		/* qsort works fine for small amount of tuples; with few duplicates */
		if (reverse) {
			GDKqsort_rev(off, o, base, size, sizeof(var_t), sizeof(oid), tpe);
		} else {
			GDKqsort(off, o, base, size, sizeof(var_t), sizeof(oid), tpe);
		}
		if (ATOMvarsized(tpe)) shift = GDK_VARSHIFT;
	}

	cur = base + (off[0] << shift);
	for (i=0; i < size; i++) {
		val = base + (off[i] << shift);
		if ((*cmp) (cur, val)) {
			cur = val;
			id++;
		}
		*hdst++ = o[i];
		*tdst++ = id;
	}
	*idp = id;

	return i;
}

static int
refine(BAT **res, BAT *b, BAT *a, int rv)
{
	str rev = rv ? "_rev" : "";
	BAT *bn = NULL;

	if (BATcount(b) != BATcount(a)) {
		GDKerror("CTrefine%s: both BATs must have the same cardinality and their heads must form a 1-1 match.\n", rev);
		return GDK_FAIL;
	}
@(
	/* checking only the key property is too strict,
	 * as it might not be set although it does hold;
	 * exhaustively checking keyness is too expensive;
	 * hence, we just don't check, and keep our fingers crossed...
	 */
	if (!(b->hkey && a->hkey)) {
		if (a->hkey) {
			GDKerror("CTrefine%s: head of first BAT is not unique (key);", rev);
		} else if (b->hkey) {
			GDKerror("CTrefine%s: head of second BAT is not unique (key);", rev);
		} else {
			GDKerror("CTrefine%s: heads of both BATs are not unique (key);", rev);
		}
		GDKerror("CTrefine%s: heads of both BATs must be unique (key) to form a 1-1 match.\n", rev);
		return GDK_FAIL;
	}
@)
	if (b->tkey) {		/* if key, no further refinements can take place */
		bn = BATmark(b, 0);
	} else {
		int (*cmp) (const void *, const void *) = BATatoms[b->ttype].atomCmp;
		BUN cnt = 0;
		BUN p, q, r, last = BUNfirst(b);
		char *base = a->T->vheap ? NULL : a->T->heap.base, *this = NULL;
		BUN cur, end, off;
		var_t *offp;
		oid *ids;
		bit a_void = (a->ttype == TYPE_void);
		int xx, tpe = a_void ? TYPE_oid : a->ttype;
		BUN size = DEFAULT_SIZE;
		oid *hdst, *tdst, o, *op = &o, id = 0;
		BATiter ai = bat_iterator(a), bi = bat_iterator(b);

		/* create tmp BAT that holds one cluster; estimate required
		 * size using sampling */
		if (BATcount(b) > DEFAULT_SIZE) {
			BAT *histo = NULL, *sample = BATsample(b, DEFAULT_SIZE);

			if (sample) {
				histo = BAThistogram(sample);
				if (histo) {
					BATmax(histo, &xx);
					if (xx > 1)
						size = MAX(size, (BUN) (xx * (((float) BATcount(b)) / DEFAULT_SIZE)));
					BBPreclaim(histo);
				}
				BBPreclaim(sample);
			}
			if (histo == NULL)
				return GDK_FAIL;
		}
		/* create a temporary BAT of the estimated size holding
		 * pointers to the a tail atoms */
		cur = 0;
		end = size;
		offp = (var_t*) GDKmalloc(size * sizeof(var_t));
		ids = (oid*) GDKmalloc(size * sizeof(oid));
		if (offp == NULL || ids == NULL) {
			if (offp) GDKfree(offp);
			if (ids) GDKfree(ids);
			return GDK_FAIL;
		}
		if (a_void) {
			base = this = (char*) GDKmalloc(size * sizeof(oid));
			if (base == NULL) {
				GDKfree(offp);
				GDKfree(ids);
				return GDK_FAIL;
			}
		}

		/* create result BAT */
		bn = BATnew(TYPE_oid, TYPE_oid, BATcount(b));
		if (bn == NULL) {
			GDKfree(offp);
			GDKfree(ids);
			if (a_void)
				GDKfree(base);
			return GDK_FAIL;
		}
		bn->hsorted = bn->tsorted = FALSE;
		bn->hrevsorted = bn->trevsorted = FALSE;
		hdst = (oid *) Hloc(bn,BUNfirst(bn));
		tdst = (oid *) Tloc(bn,BUNfirst(bn));

		/* merge-scan tail of b, finding chunks with equal values;
		 * then sort each chunk on a */
		BATloop(b, p, q) {
			if ((*cmp) (BUNtail(bi, last), BUNtail(bi, p))) {
				cnt = sort_flush(offp, ids, cur, tpe, base ? base : a->T->vheap->base, hdst, tdst, &id, rv);
				hdst += cnt;
				tdst += cnt;

				last = p;
				cur = 0;
				if (a_void) {
					this = base;
				}
			}
			o = *(oid *) BUNhead(bi, p);
			BUNfndOID(r, ai, op);
			if (r == BUN_NONE) {
				GDKerror("CTrefine%s: value "OIDFMT"@0 not found in head of second BAT;\n"
					 "CTrefine%s: heads of both BATs do not form a 1-1 match.\n", rev, o, rev);
				BBPreclaim(bn);
				GDKfree(offp);
				GDKfree(ids);
				if (a_void) {
					GDKfree(base);
				}
				return GDK_FAIL;
			}
			if (cur >= end) {
				offp = (var_t*) GDKrealloc(offp, (size *= 2) * sizeof(var_t));
				ids = (oid*) GDKrealloc(ids, size * sizeof(oid));
				end = size;
				if (a_void) {
					off = (BUN) (this - base);
					base = GDKrealloc(base, size * sizeof(oid));
					this = base + off;
				}
			}
			if (a_void) {
				*(oid*)this = a->tseqbase+r;
				r = (BUN) (this - base);
				this += sizeof(oid);
			}
			offp[cur] = (base) ? r<<a->T->shift : VarHeapValRaw(a->T->heap.base, r, a->T->width);
			ids[cur] = o;
			cur++;
		}
		cnt = sort_flush(offp, ids, cur, tpe, base ? base : a->T->vheap->base, hdst, tdst, &id, rv);
		hdst += cnt;
		tdst += cnt;

		GDKfree(offp);
		GDKfree(ids);
		if (a_void)
			GDKfree(base);
		BATsetcount(bn, (BUN) (((char*) tdst - bn->T->heap.base) / Tsize(bn)));
		bn->tsorted = 1;
		bn->trevsorted = 0;
	}
	*res = bn;
	return GDK_SUCCEED;
}

int
CTrefine(BAT **res, BAT *b, BAT *a)
{
	return refine(res, b, a, FALSE);
}

int
CTrefine_rev(BAT **res, BAT *b, BAT *a)
{
	return refine(res, b, a, TRUE);
}


str
GRPsubgroup4(bat *ngid, bat *next, bat *nhis, bat *bid, bat *gid, bat *eid, bat *hid)
{
	BAT *b, *g, *e, *h, *gn, *en, *hn;
	gdk_return r;

	b = BATdescriptor(*bid);
	g = gid ? BATdescriptor(*gid) : NULL;
	e = eid ? BATdescriptor(*eid) : NULL;
	h = hid ? BATdescriptor(*hid) : NULL;
	if (b == NULL ||
		(gid != NULL && g == NULL) ||
		(eid != NULL && e == NULL) ||
		(hid != NULL && h == NULL)) {
		if (g)
			BBPreleaseref(g->batCacheid);
		if (e)
			BBPreleaseref(e->batCacheid);
		if (h)
			BBPreleaseref(h->batCacheid);
		throw(MAL, "group.subgroup", RUNTIME_OBJECT_MISSING);
	}
	if ((r = BATgroup(&gn, &en, &hn, b, g, e, h)) == GDK_SUCCEED) {
		*ngid = gn->batCacheid;
		*next = en->batCacheid;
		*nhis = hn->batCacheid;
		BBPkeepref(*ngid);
		BBPkeepref(*next);
		BBPkeepref(*nhis);
	}
	BBPreleaseref(b->batCacheid);
	if (g)
		BBPreleaseref(g->batCacheid);
	if (e)
		BBPreleaseref(e->batCacheid);
	if (h)
		BBPreleaseref(h->batCacheid);
	return r == GDK_SUCCEED ? MAL_SUCCEED : createException(MAL, "group.subgroup", GDK_EXCEPTION);
}

str
GRPsubgroup2(bat *ngid, bat *next, bat *nhis, bat *bid, bat *gid)
{
	return GRPsubgroup4(ngid, next, nhis, bid, gid, NULL, NULL);
}

str
GRPsubgroup1(bat *ngid, bat *next, bat *nhis, bat *bid)
{
	return GRPsubgroup4(ngid, next, nhis, bid, NULL, NULL, NULL);
}

str
GRPgroup(bat *rethisto, bat *retbid, bat *bid)
{
	BAT *b, *gn, *hn, *en, *t, *map;

	if ((b = BATdescriptor(*bid)) == NULL)
		throw(MAL, "group.new", RUNTIME_OBJECT_MISSING);
	if (b->htype != TYPE_void && b->htype != TYPE_oid) {
		BBPreleaseref(b->batCacheid);
		throw(MAL, "group.new",
		      SEMANTIC_TYPE_MISMATCH ": (v)oid head required");
	}
	if (!BAThdense(b)) {
		map = BATmark(b, 0); /* [head,dense] */
		t = BATmirror(BATmark(BATmirror(b), 0)); /* [dense,tail] */
		BBPreleaseref(b->batCacheid);
		b = t;
	} else {
		map = NULL;
	}
	if (BATgroup(&gn, &en, &hn, b, NULL, NULL, NULL) == GDK_FAIL) {
		BBPreleaseref(b->batCacheid);
		if (map)
			BBPreleaseref(map->batCacheid);
		throw(MAL, "group.new", GDK_EXCEPTION);
	}
	if (map) {
		t = BATleftfetchjoin(map, gn, BATcount(gn));
		BBPreleaseref(gn->batCacheid);
		gn = t;
		t = BATleftfetchjoin(en, BATmirror(map), BATcount(en));
		BBPreleaseref(en->batCacheid);
		en = t;
		BBPreleaseref(map->batCacheid);
	}
	t = BATleftfetchjoin(gn, en, BATcount(gn));
	BBPreleaseref(gn->batCacheid);
	gn = t;
	t = BATleftfetchjoin(BATmirror(en), hn, BATcount(hn));
	BBPreleaseref(en->batCacheid);
	BBPreleaseref(hn->batCacheid);
	hn = t;
	*rethisto = hn->batCacheid;
	*retbid = gn->batCacheid;
	BBPreleaseref(b->batCacheid);
	BBPkeepref(hn->batCacheid);
	BBPkeepref(gn->batCacheid);
	return MAL_SUCCEED;
}

str
GRPderive(bat *hid, bat *mid, bat *ct_histoid, bat *ct_mapid, bat *bid)
{
	BAT *h, *g, *b, *gn, *en, *hn, *t, *map;

	h = BATdescriptor(*ct_histoid);
	g = BATdescriptor(*ct_mapid);
	b = BATdescriptor(*bid);
	if (h == NULL || g == NULL || b == NULL) {
		if (h)
			BBPreleaseref(h->batCacheid);
		if (g)
			BBPreleaseref(g->batCacheid);
		if (b)
			BBPreleaseref(b->batCacheid);
		throw(MAL, "group.derive", RUNTIME_OBJECT_MISSING);
	}
	if ((b->htype != TYPE_void && b->htype != TYPE_oid) ||
		(g->htype != TYPE_void && g->htype != TYPE_oid)) {
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(g->batCacheid);
		BBPreleaseref(h->batCacheid);
		throw(MAL, "group.new",
		      SEMANTIC_TYPE_MISMATCH ": (v)oid head required");
	}
	if (!BAThdense(b) || !BAThdense(g)) {
		map = BATmark(b, 0); /* [head,dense] */
		t = BATmirror(BATmark(BATmirror(b), 0)); /* [dense,tail] */
		BBPreleaseref(b->batCacheid);
		b = t;
		t = BATmirror(BATmark(BATmirror(g), 0)); /* [dense,tail] */
		BBPreleaseref(g->batCacheid);
		g = t;
	} else {
		map = NULL;
	}
	if (BATgroup(&gn, &en, &hn, b, g, NULL, NULL) == GDK_FAIL) {
		BBPreleaseref(h->batCacheid);
		BBPreleaseref(g->batCacheid);
		BBPreleaseref(b->batCacheid);
		if (map)
			BBPreleaseref(map->batCacheid);
		throw(MAL, "group.new", GDK_EXCEPTION);
	}
	if (map) {
		t = BATleftfetchjoin(map, gn, BATcount(gn));
		BBPreleaseref(gn->batCacheid);
		gn = t;
		t = BATleftfetchjoin(en, BATmirror(map), BATcount(en));
		BBPreleaseref(en->batCacheid);
		en = t;
		BBPreleaseref(map->batCacheid);
	}
	t = BATleftfetchjoin(gn, en, BATcount(gn));
	BBPreleaseref(gn->batCacheid);
	gn = t;
	t = BATleftfetchjoin(BATmirror(en), hn, BATcount(hn));
	BBPreleaseref(en->batCacheid);
	BBPreleaseref(hn->batCacheid);
	hn = t;
	*hid = hn->batCacheid;
	*mid = gn->batCacheid;
	BBPreleaseref(b->batCacheid);
	BBPreleaseref(g->batCacheid);
	BBPreleaseref(h->batCacheid);
	BBPkeepref(hn->batCacheid);
	BBPkeepref(gn->batCacheid);
	return MAL_SUCCEED;
}

str
GRPrefine(int *retid, int *bid, int *aid)
{
	BAT *b, *a;
	BAT *bn = NULL;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "group.refine", RUNTIME_OBJECT_MISSING);
	}
	if(b->htype != TYPE_oid && b->htype != TYPE_void)
		throw(MAL, "group.refine", SEMANTIC_TYPE_ERROR "(v)oid head required\n");
	if ((a = BATdescriptor(*aid)) == NULL) {
		BBPreleaseref(b->batCacheid);
		throw(MAL, "group.refine", RUNTIME_OBJECT_MISSING);
	}
	if(a->htype != TYPE_oid && a->htype != TYPE_void)
		throw(MAL, "group.GRPrefine", SEMANTIC_TYPE_ERROR "(v)oid head required\n");

	CTrefine(&bn, b, a);
	if (!bn){
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(a->batCacheid);
		throw(MAL, "group.refine", OPERATION_FAILED);
	}
	BBPkeepref(*retid = bn->batCacheid);
	BBPreleaseref(b->batCacheid);
	BBPreleaseref(a->batCacheid);
	return MAL_SUCCEED;
}

str
GRPrefine_rev(int *retid, int *bid, int *aid)
{
	BAT *b, *a;
	BAT *bn;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "group.refine", RUNTIME_OBJECT_MISSING);
	}
	if(b->htype != TYPE_oid && b->htype != TYPE_void)
		throw(MAL, "group.GRPrefine", SEMANTIC_TYPE_ERROR "(v)oid head required\n");
	if ((a = BATdescriptor(*aid)) == NULL) {
		BBPreleaseref(b->batCacheid);
		throw(MAL, "group.refine", RUNTIME_OBJECT_MISSING);
	}
	if(a->htype != TYPE_oid && a->htype != TYPE_void)
		throw(MAL, "group.GRPrefine", SEMANTIC_TYPE_ERROR "(v)oid head required\n");

	CTrefine_rev(&bn, b, a);
	if (!bn){
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(a->batCacheid);
		throw(MAL, "group.refine", OPERATION_FAILED);
	}
	BBPkeepref(*retid = bn->batCacheid);
	BBPreleaseref(b->batCacheid);
	BBPreleaseref(a->batCacheid);
	return MAL_SUCCEED;
}

/*
 * @-
 *
 * These implementations need just one scan and a simple hash-maintained data
 * structure to compute a group of common aggregates.
 *
 * With group OIDs spanning a range of less SMALL_AGGR_MAX (the actual number
 * of groups might be even less, in case there are "holes" in the group OID
 * range), we use a simple array as temporary sum/cnt table on order to benefit
 * from positional lookups; with size of sum <= 8 bytes and size of cnt == 4
 * bytes, we stay below 16 KBytes, i.e., within (almost) any L1 cache
 */
#define SMALL_AGGR_MAX 1024

/*
 * @-
 */
@= large_aggr_sum
	if (BATprepareHash(bn)) {
		BBPreclaim(bn);
		throw(MAL, "group.sum", MAL_MALLOC_FAIL);
	}
	BATloop(b, p, q) {
		oid *h = (oid*) BUNhead(bi,p);
		@1 *t = (@1*) BUN@2(bi,p);

		BUNfndOID(r, bni, h);
		if (r != BUN_NONE) {
			@3 *dst = (@3*) BUN@2(bni, r);
			if (*dst != @3_nil) {
				if (*t == @1_nil) {
					*dst = @3_nil;
				} else {
					*dst += *t;
				}
			}
		}
	}
@
 * @-
@= small_aggr_sum
	sums = (@3*) GDKzalloc(range*sizeof(@3));
	BATloop(b, p, q) {
		oid h = (*(oid*) BUNhead(bi,p)) - min;
		@1 *t = (@1*) BUN@2(bi,p);

		if (h < range) {
			@3 *dst = sums + h;
			if (*dst != @3_nil) {
				if (*t == @1_nil) {
					*dst = @3_nil;
				} else {
					*dst += *t;
				}
			}
		}
	}
	BATloop(bn, p, q) {
		oid h = (*(oid*) BUNhead(bni,p)) - min;
		*(@3*)BUN@2(bni, p) = sums[h];
	}
	GDKfree(sums);
@= large_aggr_prod
	if (BATprepareHash(bn)) {
		BBPreclaim(bn);
		throw(MAL, "group.prod", MAL_MALLOC_FAIL);
	}
	BATloop(b, p, q) {
		oid *h = (oid*) BUNhead(bi,p);
		@1 *t = (@1*) BUN@2(bi,p);

		BUNfndOID(r, bni, h);
		if (r != BUN_NONE) {
			@3 *dst = (@3*) BUN@2(bni, r);
			if (*dst != @3_nil) {
				if (*t == @1_nil) {
					*dst = @3_nil;
				} else {
					*dst *= *t;
				}
			}
		}
	}
@
@c
@= small_aggr_prod
	prods = (@3*) GDKmalloc(range*sizeof(@3));
	for (i = 0; i < range; i++)
		prods[i] = one;
	BATloop(b, p, q) {
		oid h = (*(oid*) BUNhead(bi,p)) - min;
		@1 *t = (@1*) BUN@2(bi,p);

		if (h < range) {
			@3 *dst = prods + h;
			if (*dst != @3_nil) {
				if (*t == @1_nil) {
					*dst = @3_nil;
				} else {
					*dst *= *t;
				}
			}
		}
	}
	BATloop(bn, p, q) {
		oid h = (*(oid*) BUNhead(bni,p)) - min;
		*(@3*)BUN@2(bni, p) = prods[h];
	}
        GDKfree(prods);
@= large_aggr_avg
	cnt  = (BUN*) GDKzalloc(BATcount(e)*sizeof(BUN));
	if (BATprepareHash(bn)) {
		GDKfree(cnt);
		BBPreclaim(bn);
		throw(MAL, "group.@1", MAL_MALLOC_FAIL);
	}
	BATloop(b, p, q) {
		oid *h = (oid*) BUNhead(bi,p);
		@1 *t = (@1*) BUN@2(bi,p);

		BUNfndOID(r,bni,h);
		if (r != BUN_NONE) {
			dbl *dst = (dbl*) BUN@2(bni, r);
			if (*dst != dbl_nil) {
				if (*t == @1_nil) {
					*dst = dbl_nil;
				} else {
					*dst += *t;
				}
				cnt[r-off]++;
			}
		}
	}
	/* postprocess by dividing sums by counts */
	BATloop(bn, p, q) {
		dbl *dst = (dbl*) BUN@2(bni, p);
		if (cnt[yy] == 0) {
			*dst = dbl_nil;
		} else if (*dst != dbl_nil) {
			*dst = (dbl) (*dst / cnt[yy]);
		}
		yy++;
	}
	GDKfree(cnt);
@
@c
@= small_aggr_avg
	sums = (dbl*) GDKzalloc(range*sizeof(dbl));
	cnt  = (BUN*) GDKzalloc(range*sizeof(BUN));
	BATloop(b, p, q) {
		oid h = (*(oid*) BUNhead(bi,p)) - min;
		@1 *t = (@1*) BUN@2(bi,p);

		if (h < range) {
			dbl *dst = sums + h;
			if (*dst != dbl_nil) {
				if (*t == @1_nil) {
					*dst = dbl_nil;
				} else {
					*dst += *t;
				}
				cnt[h]++;
			}
		}
	}
	/* postprocess by dividing sums by counts */
	BATloop(bn, p, q) {
		oid h = (*(oid*) BUNhead(bni,p)) - min;
		dbl *dst = (dbl*) BUN@2(bni, p);
		if (cnt[h] == 0 || sums[h] == dbl_nil) {
			*dst = dbl_nil;
		} else {
			*dst = (dbl) (sums[h]/cnt[h]);
		}
	}
        GDKfree(sums);
	GDKfree(cnt);

@= arithsumprod
group_export str GRPsum_@1_@3(int *retval, int *bid, int  *eid, bit *ignore_nils);
str GRPsum_@1_@3(int *retval, int *bid, int  *eid, bit *ignore_nils)
{
	BAT *b = NULL, *e = NULL;
	BAT *bn;
	BATiter ei, bi, bni;
	@3 zero = (@3) 0, *sums;
	BUN p, q, r;
	oid i, range, min, max;


	(void) ignore_nils; /* fool compiler */
	if( (b= BATdescriptor(*bid)) == NULL ){
		throw(MAL, "group.sum", RUNTIME_OBJECT_MISSING);
	}

	if(b->htype != TYPE_oid && b->htype != TYPE_void)
		throw(MAL, "group.GRPsum_@1_@3", SEMANTIC_TYPE_ERROR "(v)oid head required\n");
	if( (e= BATdescriptor(*eid)) == NULL ){
		BBPreleaseref(b->batCacheid);
		throw(MAL, "group.sum", RUNTIME_OBJECT_MISSING);
	}
	bn = BATnew(e->htype, BATttype(b), BATcount(e));
	if (bn == NULL){
		BBPreleaseref(e->batCacheid);
		BBPreleaseref(b->batCacheid);
		throw(MAL, "group.sum", MAL_MALLOC_FAIL);
	}

	if(e->htype != TYPE_oid && e->htype != TYPE_void)
		throw(MAL, "group.GRPsum_@1_@3", SEMANTIC_TYPE_ERROR "(v)oid head required\n");
	/* init: set all sums to zero */
	bn->tsorted = bn->hsorted = 0;
	bn->trevsorted = bn->hrevsorted = 0;
	bn->T->nonil = 0;
	ALIGNsetH(bn, e);
	ei = bat_iterator(e);
	bi = bat_iterator(b);
	bni = bat_iterator(bn);

	if (BAThordered(e)) {
		min = *(oid*)BUNhead(ei, BUNfirst(e));
		BATloop(e, p, q) {
			if (BUNfastins(bn, BUNhead(ei,p), &zero) == NULL) {
				BBPreclaim(bn);
				throw(MAL, "group.sum", OPERATION_FAILED " Cannot insert zero");
			}
		}
		max = *(oid*)BUNhead(ei, BUNlast(e)-1);
	} else {
		min = max = *(oid*)BUNhead(ei, BUNfirst(e));
		BATloop(e, p, q) {
			if (BUNfastins(bn, BUNhead(ei,p), &zero) == NULL) {
				BBPreclaim(bn);
				throw(MAL, "group.sum", OPERATION_FAILED " Cannot insert zero");
			}
			i = *(oid*)BUNhead(ei, p);
			if (i < min)
				min = i;
			else if (i > max)
				max = i;
		}
	}
	range = max - min + 1;

	/* scan b, and add values to sums in-place */
	if (range > SMALL_AGGR_MAX) {
		ALGODEBUG fprintf(stderr, "#CMDaggr_sum_@1_@3: range(=" OIDFMT ") > SMALL_AGGR_MAX(=%d)  => large_aggr_sum\n",range,SMALL_AGGR_MAX);
		@:large_aggr_sum(@1,@2,@3)@
	} else {
		ALGODEBUG fprintf(stderr, "#CMDaggr_sum_@1_@3: range(=" OIDFMT ") <= SMALL_AGGR_MAX(=%d)  => small_aggr_sum\n",range,SMALL_AGGR_MAX);
		@:small_aggr_sum(@1,@2,@3)@
	}
	BBPkeepref(*retval = bn->batCacheid);
	BBPreleaseref(b->batCacheid);
	BBPreleaseref(e->batCacheid);
	return MAL_SUCCEED;
}

group_export str GRPprod_@1_@3(int *retval, int *bid, int  *eid, bit *ignore_nils);
str GRPprod_@1_@3(int *retval, int *bid, int  *eid, bit *ignore_nils)
{
	BAT *bn, *b, *e;
	BATiter ei, bi, bni;
	@3 one = (@3) 1, *prods;
	BUN p, q, r;
	oid i, range, min, max;

	(void) ignore_nils; /* fool compiler */
	if( (b= BATdescriptor(*bid)) == NULL )
		throw(MAL, "group.prod", RUNTIME_OBJECT_MISSING);

	if(b->htype != TYPE_oid && b->htype != TYPE_void)
		throw(MAL, "group.GRPgroup_@1_@3", SEMANTIC_TYPE_ERROR "(v)oid head required\n");
	if( (e= BATdescriptor(*eid)) == NULL ){
		BBPreleaseref(b->batCacheid);
		throw(MAL, "group.prod", RUNTIME_OBJECT_MISSING);
	}
 	bn = BATnew(e->htype, TYPE_@3, BATcount(e));
	if (bn == NULL){
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(e->batCacheid);
		throw(MAL, "group.prod", MAL_MALLOC_FAIL);
	}

	if(e->htype != TYPE_oid && e->htype != TYPE_void)
		throw(MAL, "group.GRPprod_@1_@3", SEMANTIC_TYPE_ERROR "(v)oid head required\n");
	/* init: set all prods to one */
	bn->tsorted = bn->hsorted = 0;
	bn->trevsorted = bn->hrevsorted = 0;
	bn->T->nonil = 0;
	ALIGNsetH(bn, e);
	ei = bat_iterator(e);
	bi = bat_iterator(b);
	bni = bat_iterator(bn);

	if (BAThordered(e)) {
		min = *(oid*)BUNhead(ei, BUNfirst(e));
		BATloop(e, p, q) {
			if (BUNfastins(bn, BUNhead(ei,p), &one) == NULL) {
				BBPreclaim(bn);
				throw(MAL, "group.prod", OPERATION_FAILED " Cannot insert one");
			}
		}
		max = *(oid*)BUNhead(ei, BUNlast(e)-1);
	} else {
		min = max = *(oid*)BUNhead(ei, BUNfirst(e));
		BATloop(e, p, q) {
			if (BUNfastins(bn, BUNhead(ei,p), &one) == NULL) {
				BBPreclaim(bn);
				throw(MAL, "group.prod", OPERATION_FAILED " Cannot insert one");
			}
			i = *(oid*)BUNhead(ei, p);
			if (i < min)
				min = i;
			else if (i > max)
				max = i;
		}
	}
	range = max - min + 1;

	/* scan b, and mul values to prods in-place */
	if (range > SMALL_AGGR_MAX) {
		ALGODEBUG fprintf(stderr, "#CMDaggr_prod_@1_@3: range(=" OIDFMT ") > SMALL_AGGR_MAX(=%d)  => large_aggr_prod\n",range,SMALL_AGGR_MAX);
		@:large_aggr_prod(@1,@2,@3)@
	} else {
		ALGODEBUG fprintf(stderr, "#CMDaggr_prod_@1_@3: range(=" OIDFMT ") <= SMALL_AGGR_MAX(=%d)  => small_aggr_prod\n",range,SMALL_AGGR_MAX);
		@:small_aggr_prod(@1,@2,@3)@
	}
	BBPkeepref(*retval = bn->batCacheid);
	BBPreleaseref(b->batCacheid);
	BBPreleaseref(e->batCacheid);
	return MAL_SUCCEED;
}
@
@c
@:arithsumprod(bte,tloc,bte)@
@:arithsumprod(bte,tloc,sht)@
@:arithsumprod(bte,tloc,int)@
@:arithsumprod(bte,tloc,wrd)@
@:arithsumprod(bte,tloc,lng)@
@:arithsumprod(sht,tloc,sht)@
@:arithsumprod(sht,tloc,int)@
@:arithsumprod(sht,tloc,wrd)@
@:arithsumprod(sht,tloc,lng)@
@:arithsumprod(int,tloc,int)@
@:arithsumprod(int,tloc,wrd)@
@:arithsumprod(int,tloc,lng)@
@:arithsumprod(wrd,tloc,wrd)@
@:arithsumprod(wrd,tloc,lng)@
@:arithsumprod(lng,tloc,lng)@
@:arithsumprod(oid,tloc,oid)@
@:arithsumprod(flt,tloc,flt)@
@:arithsumprod(flt,tloc,dbl)@
@:arithsumprod(dbl,tloc,dbl)@

@= arithavg
group_export str GRPavg_@1(int *ret, int *bid, int *eid);
str GRPavg_@1(int *ret, int *bid, int *eid)
{
	BAT *b = NULL, *e = NULL;
	BAT *bn = NULL;
	BATiter ei, bi, bni;
	BUN yy = 0, off;
	BUN *cnt;
	oid i, range, min, max;
	dbl zero = (dbl) 0, *sums;
	BUN p, q, r;

	if ((b = BATdescriptor(*bid)) == NULL ){
		throw(MAL, "group.@1", RUNTIME_OBJECT_MISSING);
	}
	if(b->htype != TYPE_oid && b->htype != TYPE_void)
		throw(MAL, "group.GRPavg_@1", SEMANTIC_TYPE_ERROR "(v)oid head required\n");
	if( (e= BATdescriptor(*eid)) == NULL ){
		BBPreleaseref(b->batCacheid);
		throw(MAL, "group.@1", RUNTIME_OBJECT_MISSING);
	}
	if(e->htype != TYPE_oid && e->htype != TYPE_void)
		throw(MAL, "group.GRPavg_@1", SEMANTIC_TYPE_ERROR "(v)oid head required\n");
	bn = BATnew(e->htype, BATttype(b), BATcount(e));
	if (bn == NULL){
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(e->batCacheid);
		throw(MAL, "group.@1", MAL_MALLOC_FAIL);
	}

	/* init sums and counts to zero */
	bn->tsorted = bn->hsorted = 0;
	bn->trevsorted = bn->hrevsorted = 0;
	bn->T->nonil = 0;
	ALIGNsetH(bn, e);
	ei = bat_iterator(e);
	bi = bat_iterator(b);
	bni = bat_iterator(bn);
	off = BUNfirst(bn);

	if (BAThordered(e)) {
		min = *(oid*)BUNhead(ei, BUNfirst(e));
		BATloop(e, p, q) {
			if (BUNfastins(bn, BUNhead(ei,p), &zero) == NULL) {
				BBPreclaim(bn);
				throw(MAL, "group.@1", OPERATION_FAILED " Cannot insert zero");
			}
		}
		max = *(oid*)BUNhead(ei, BUNlast(e)-1);
	} else {
		min = max = *(oid*)BUNhead(ei, BUNfirst(e));
		BATloop(e, p, q) {
			if (BUNfastins(bn, BUNhead(ei,p), &zero) == NULL) {
				BBPreclaim(bn);
				throw(MAL, "group.@1", OPERATION_FAILED " Cannot insert zero");
			}
			i = *(oid*)BUNhead(ei, p);
			if (i < min)
				min = i;
			else if (i > max)
				max = i;
		}
	}
	range = max - min + 1;

	/* scan b, adding sums, and incrementing counts */
	if (range > SMALL_AGGR_MAX) {
		ALGODEBUG fprintf(stderr, "#CMDaggr_avg_@1: range(=" OIDFMT ") > SMALL_AGGR_MAX(=%d)  =>  large_aggr_avg\n",range,SMALL_AGGR_MAX);
		@:large_aggr_avg(@1,@2)@
	} else {
		ALGODEBUG fprintf(stderr, "#CMDaggr_avg_@1: range(=" OIDFMT ") <= SMALL_AGGR_MAX(=%d)  =>  small_aggr_avg\n",range,SMALL_AGGR_MAX);
		@:small_aggr_avg(@1,@2)@
	}
	BBPkeepref(*ret= bn->batCacheid);
	BBPreleaseref(b->batCacheid);
	BBPreleaseref(e->batCacheid);
	return MAL_SUCCEED;
}
@
@c
@:arithavg(bte,tloc)@
@:arithavg(sht,tloc)@
@:arithavg(int,tloc)@
@:arithavg(wrd,tloc)@
@:arithavg(oid,tloc)@
@:arithavg(lng,tloc)@
@:arithavg(flt,tloc)@
@:arithavg(dbl,tloc)@

@= arithvar
group_export str GRPvar_@1(int *ret, int *bid, int *eid);
str GRPvar_@1(int *ret, int *bid, int *eid)
{
	int err = 0;
	BUN nElements;
	BAT *b = NULL, *e = NULL;
	BAT *bn = NULL;
	BATiter ei, bi;
	BUN off, idx = 0;
	wrd *cnt;
	@1 zero = (@1) 0;
	dbl *sum ;
	dbl *sumsquares ;
	BUN p, q, r;
	oid previousOid = oid_nil;

	if ((b = BATdescriptor(*bid)) == NULL ){
		throw(MAL, "group.@1", RUNTIME_OBJECT_MISSING);
	}
	if(b->htype != TYPE_oid && b->htype != TYPE_void)
		throw(MAL, "group.GRPavg_@1", SEMANTIC_TYPE_ERROR "(v)oid head required\n");
	if( (e= BATdescriptor(*eid)) == NULL ){
		BBPreleaseref(b->batCacheid);
		throw(MAL, "group.@1", RUNTIME_OBJECT_MISSING);
	}
	if(e->htype != TYPE_oid && e->htype != TYPE_void)
		throw(MAL, "group.GRPavg_@1", SEMANTIC_TYPE_ERROR "(v)oid head required\n");
	bn = BATnew(e->htype, BATttype(b), BATcount(e));
	if (bn == NULL){
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(e->batCacheid);
		throw(MAL, "group.@1", MAL_MALLOC_FAIL);
	}
	nElements = BATcount(e);

	off = BUNfirst(e);
	/* init sums and counts to zero */
	bn->tsorted = bn->hsorted = 0;
	bn->trevsorted = bn->hrevsorted = 0;
	bn->T->nonil = 0;
	ALIGNsetH(bn, e);
	ei = bat_iterator(e);
	bi = bat_iterator(b);
	cnt = (wrd*) GDKmalloc(nElements*sizeof(wrd));
	if (cnt == NULL) {
		BBPreclaim(bn);
		throw(MAL, "group.@1", MAL_MALLOC_FAIL);
	}
	sum = (dbl*) GDKmalloc(nElements*sizeof(dbl));
	if (sum == NULL) {
		BBPreclaim(bn);
		GDKfree(cnt);
		throw(MAL, "group.@1", MAL_MALLOC_FAIL);
	}
	sumsquares = (dbl*) GDKmalloc(nElements*sizeof(dbl));
	if (sumsquares == NULL) {
		BBPreclaim(bn);
		GDKfree(cnt);
		GDKfree(sum);
		throw(MAL, "group.@1", MAL_MALLOC_FAIL);
	}

	/* scan b, adding sums, and incrementing counts */
	if (BATprepareHash(bn)) {
		BBPreclaim(bn);
		GDKfree(cnt);
		GDKfree(sum);
		GDKfree(sumsquares);
		throw(MAL, "group.@1", MAL_MALLOC_FAIL);
	}

	/* init sums and counts to zero */
	memset(cnt, 0, nElements*sizeof(wrd));
	memset(sum, 0, nElements*sizeof(dbl));
	memset(sumsquares, 0, nElements*sizeof(dbl));

	BATloop(b, p, q) {
		oid *h = (oid*) BUNhead(bi,p);
		if (*h != previousOid) {
			previousOid = *h;
			BUNfndOID(r,ei,h);
			if (r == BUN_NONE)
				continue;
			idx = r-off;
		}

		if (cnt[idx] != wrd_nil) {
			@1 v = *(@1*) BUNtloc(bi,p);
			if (v == @1_nil) {
				cnt[idx] = wrd_nil;
			} else {
				cnt[idx]++;
				sum[idx] += v;
				sumsquares[idx] += (v * v);
			}
		}
	}

	/* postprocess by dividing sumsquares and sum by counts and
	   subtracting square of the averages from the average sum of
	   squares */
	idx = 0;
	BATloop(e, p, q) {
		if (cnt[idx] == wrd_nil) {
			@1 _nil = @1_nil;
			if (BUNfastins(bn, BUNhead(ei,p), (ptr)&_nil) == NULL) {
				err = 1;
				break;
			}
		} else if (cnt[idx] <= 1) {
			if (BUNfastins(bn, BUNhead(ei,p), &zero) == NULL) {
				err = 1;
				break;
			}
		} else {
			dbl avg = (sum[idx] / cnt[idx]);
			@1 variance = (@1) (sumsquares[idx] / cnt[idx] - (avg * avg));
			if (BUNfastins(bn, BUNhead(ei,p), &variance) == NULL) {
				err = 1;
				break;
			}
		}
		idx++;
	}
	GDKfree(cnt);
	GDKfree(sum);
	if (err) {
		BBPreclaim(bn);
		throw(MAL, "group.@1", "failed");
	}
	bn->hsorted = bn->tsorted = 0;
	bn->hrevsorted = bn->trevsorted = 0;
	bn->T->nonil = 0;
	ALIGNsetH(bn, e);
	BBPkeepref(*ret= bn->batCacheid);
	BBPreleaseref(b->batCacheid);
	BBPreleaseref(e->batCacheid);
	return MAL_SUCCEED;
}
@
@c
@:arithvar(bte)@
@:arithvar(sht)@
@:arithvar(int)@
@:arithvar(wrd)@
@:arithvar(lng)@
@:arithvar(oid)@
@:arithvar(flt)@
@:arithvar(dbl)@


@= extreme
static int
CMDaggr_@1_@3(BAT **ret, BAT *b, BAT *e)
{
	BAT *bn = *ret = BATnew(e->htype, BATttype(b), BATcount(e));
	BATiter ei = bat_iterator(e), bi = bat_iterator(b);
	int (*cmp)(const void *, const void *);
	ptr nil;
	BUN yy = 0, off;
	@3 *extremes;
	BUN p, q, r;

	if (bn == NULL)
		return GDK_FAIL;
	cmp = BATatoms[bn->ttype].atomCmp;
	nil = ATOMnilptr(bn->ttype);
	off = BUNfirst(e);
	extremes = (@3*) GDKmalloc(BATcount(e)*sizeof(@3));
	if (extremes == NULL) {
		BBPreclaim(bn);
		return GDK_FAIL;
	}

	/* init: set all extremes to the zero pointer */
	@:extreme_init_@3(@4)@

	/* scan b and replace totals by the extreme value (just pointers to vals in b) */
	if (BATprepareHash(e)) {
		BBPreclaim(bn);
		GDKfree(extremes);
		return GDK_FAIL;
	}
	BATloop(b, p, q) {
		oid *h = (oid*) BUNhead(bi,p);
		ptr t =  BUNtail(bi,p);

		BUNfndOID(r,ei,h);
		if (r != BUN_NONE) {
			@:extreme_body_@3(@2)@
		}
	}
	/* insert the extreme values into the result */
	yy = 0;
	BATloop(e, p, q) {
		@3 val = extremes[yy++];
		if (BUNfastins(bn, BUNhead(ei,p), @:extreme_tail_@3@) == NULL) {
			ret = NULL;
			break;
		}
	}
	GDKfree(extremes);
	if (!ret) {
		BBPreclaim(bn);
		return GDK_FAIL;
	}
	bn->tsorted = bn->hsorted = 0;
	bn->trevsorted = bn->hrevsorted = 0;
	bn->T->nonil = 0;
	ALIGNsetH(bn, e);
	return GDK_SUCCEED;
}
@= extreme_init_oid
	for (yy = 0 ; yy < BATcount(e) ; yy++) extremes[yy] = GDK_oid_@1;
@= extreme_init_ptr
	memset(extremes, 0, BATcount(e)*sizeof(ptr));
@= extreme_body_oid
			oid *val = extremes + r - off;
			if (*val != *(oid*)nil) {
				if ((*cmp)(t,nil) == 0) {
					*val = *(oid*)nil;
				} else if ((*cmp)(t,val) @1 0) {
					*val = *(oid*)t;
				}
			}
@= extreme_body_ptr
			ptr *val = extremes + r - off;
			if (*val != nil) {
				if ((*cmp)(t,nil) == 0) {
					*val = nil;
				} else if (*val == NULL || (*cmp)(t,*val) @1 0) {
					*val = t;
				}
			}
@= extreme_tail_oid
	&val
@= extreme_tail_ptr
	val?val:nil
@= extreme_
@:extreme(@1,@2,oid,@3)@
@:extreme(@1,@2,ptr,@3)@
group_export str GRP@1(int *retval, int *bid, int *eid);
str
GRP@1(int *retval, int *bid, int *eid)
{
	BAT *b = NULL, *e = NULL, *bn;
	int res = 0;

	if ((b = BATdescriptor(*bid)) == NULL ){
		throw(MAL, "group.@1", RUNTIME_OBJECT_MISSING);
	}
	if(b->htype != TYPE_oid && b->htype != TYPE_void)
		throw(MAL, "group.GRP@1", SEMANTIC_TYPE_ERROR "(v)oid head required\n");
	if ((e = BATdescriptor(*eid)) == NULL ){
		BBPreleaseref(b->batCacheid);
		throw(MAL, "group.@1", RUNTIME_OBJECT_MISSING);
	}
	if(e->htype != TYPE_oid && e->htype != TYPE_void)
		throw(MAL, "group.GRP@1", SEMANTIC_TYPE_ERROR "(v)oid head required\n");

	if (b->ttype == TYPE_void) {
		res = CMDaggr_@1_oid(&bn, b, e);
	} else {
		res = CMDaggr_@1_ptr(&bn, b, e);
	}
	if (!res){
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(e->batCacheid);
		throw(MAL, "group.@1", RUNTIME_OBJECT_MISSING);
	}
	BBPkeepref(*retval = bn->batCacheid);
	BBPreleaseref(b->batCacheid);
	BBPreleaseref(e->batCacheid);
	return MAL_SUCCEED;
}
@
@c
@:extreme_(min,<,max)@
@:extreme_(max,>,min)@

@= large_aggr_count
	if (BATprepareHash(bn)) {
		BBPreclaim(bn);
		throw(MAL, "group.count", MAL_MALLOC_FAIL);
	}
	BATloop(b, p, q) {
		oid *h = (oid*) BUNhead(bi,p);

		BUNfndOID(r, bni, h);
		if (r != BUN_NONE) {
			ptr t = BUNtail(bi,p);
			(void) t; /* silence compiler about unused variable */
			@1 {
				wrd *dst = (wrd*) BUNtloc(bni, r);
				(*dst)++;
			}
		}
	}
@
@c
@= small_aggr_count
	cnt  = (wrd*) GDKzalloc(range*sizeof(wrd));
	BATloop(b, p, q) {
		oid h = (*(oid*) BUNhead(bi,p)) - min;

		if (h < range) {
			ptr t = BUNtail(bi,p);
			(void) t; /* silence compiler about unused variable */
			@1 {
				cnt[h]++;
			}
		}
	}
	BATloop(bn, p, q) {
		oid h = (*(oid*) BUNhead(bni,p)) - min;
		*(wrd*)BUNtloc(bni, p) = cnt[h];
	}
        GDKfree(cnt);
@
@c

group_export str GRPaggr_count(int *retval, int *bid, int *eid, bit *ignore_nils);
str
GRPaggr_count(int *retval, int *bid, int *eid, bit *ignore_nils)
{
/* XXX in a large BAT, it is conceivable that there are head elements
   that occur more often than fits in an "int", so the return BAT
   should really have a tail type of BUN.
 */
	BAT *bn, *b = NULL, *e = NULL;
	BATiter ei, bi, bni;
	wrd zero = 0, *cnt;
	BUN p, q, r;
	oid i, range, min, max;
	int btt;
	ptr bt_nil;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "group.count", RUNTIME_OBJECT_MISSING);
	}

	if(b->htype != TYPE_oid && b->htype != TYPE_void)
		throw(MAL, "group.GRPaggr_count", SEMANTIC_TYPE_ERROR "(v)oid head required\n");
	if ((e = BATdescriptor(*eid)) == NULL) {
		BBPreleaseref(b->batCacheid);
		throw(MAL, "group.count", RUNTIME_OBJECT_MISSING);
	}
	if(e->htype != TYPE_oid && e->htype != TYPE_void)
		throw(MAL, "group.GRPaggr_count", SEMANTIC_TYPE_ERROR "(v)oid head required\n");

	bn = BATnew(e->htype, TYPE_wrd, BATcount(e));
	if (bn == NULL){
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(e->batCacheid);
		throw(MAL, "group.count", MAL_MALLOC_FAIL);
	}
	btt = b->ttype;
	bt_nil = ATOMnilptr(b->ttype);

	/* init: set all sums to zero */
	bn->tsorted = bn->hsorted = 0;
	bn->trevsorted = bn->hrevsorted = 0;
	bn->T->nonil = 1;
	ALIGNsetH(bn, e);
	ei = bat_iterator(e);
	bi = bat_iterator(b);
	bni = bat_iterator(bn);
	if (BAThordered(e)) {
		min = *(oid *) BUNhead(ei, BUNfirst(e));
		BATloop(e, p, q) {
			if (BUNfastins(bn, BUNhead(ei, p), &zero) == NULL) {
				BBPreclaim(bn);
				throw(MAL, "group.count", OPERATION_FAILED );
			}
		}
		max = *(oid *) BUNhead(ei, BUNlast(e) - 1);
	} else {
		min = max = *(oid *) BUNhead(ei, BUNfirst(e));
		BATloop(e, p, q) {
			if (BUNfastins(bn, BUNhead(ei, p), &zero) == NULL) {
				BBPreclaim(bn);
				throw(MAL, "group.count", OPERATION_FAILED);
			}
			i = *(oid *) BUNhead(ei, p);
			if (i < min)
				min = i;
			else if (i > max)
				max = i;
		}
	}
	range = max - min + 1;

	/* scan b, and add increment totals for true values */
	if (range > SMALL_AGGR_MAX) {
		if (*ignore_nils && !b->T->nonil) {
			ALGODEBUG fprintf(stderr, "#CMDaggr_count: range(=" OIDFMT ") > SMALL_AGGR_MAX(=%d)  =>  large_aggr_count(if (ATOMcmp(btt,t,bt_nil)))\n", range, SMALL_AGGR_MAX);

			@:large_aggr_count(if(ATOMcmp(btt,t,bt_nil)))@
		} else {
			ALGODEBUG fprintf(stderr, "#CMDaggr_count: range(=" OIDFMT ") > SMALL_AGGR_MAX(=%d)  =>  large_aggr_count()\n", range, SMALL_AGGR_MAX);

			@:large_aggr_count()@
		}
	} else {
		if (*ignore_nils && !b->T->nonil) {
			ALGODEBUG fprintf(stderr, "#CMDaggr_count: range(=" OIDFMT ") <= SMALL_AGGR_MAX(=%d)  =>  small_aggr_count(if (ATOMcmp(btt,t,bt_nil)))\n", range, SMALL_AGGR_MAX);

			@:small_aggr_count(if(ATOMcmp(btt,t,bt_nil)))@
		} else {
			ALGODEBUG fprintf(stderr, "#CMDaggr_count: range(=" OIDFMT ") <= SMALL_AGGR_MAX(=%d)  =>  small_aggr_count()\n", range, SMALL_AGGR_MAX);

			@:small_aggr_count()@
		}
	}
	BBPkeepref(*retval = bn->batCacheid);
	BBPreleaseref(b->batCacheid);
	BBPreleaseref(e->batCacheid);
	return MAL_SUCCEED;
}

group_export str GRPsize(int *retval, int *bid, int *eid);
str
GRPsize(int *retval, int *bid, int *eid)
{
	BAT *bn, *b = NULL, *e = NULL;
	BATiter ei, bi, bni;
	wrd zero = 0;
	BUN p, q, r;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "group.size", RUNTIME_OBJECT_MISSING);
	}

	if(b->htype != TYPE_oid && b->htype != TYPE_void)
		throw(MAL, "group.GRPsize", SEMANTIC_TYPE_ERROR "(v)oid head required\n");
	if ((e = BATdescriptor(*eid)) == NULL) {
		BBPreleaseref(b->batCacheid);
		throw(MAL, "group.size", RUNTIME_OBJECT_MISSING);
	}
	if(e->htype != TYPE_oid && e->htype != TYPE_void)
		throw(MAL, "group.GRPsize", SEMANTIC_TYPE_ERROR "(v)oid head required\n");

	bn = BATnew(e->htype, TYPE_wrd, BATcount(e));
	if (bn == NULL){
		BBPreleaseref(b->batCacheid);
		BBPreleaseref(e->batCacheid);
		throw(MAL, "group.size", MAL_MALLOC_FAIL);
	}
	/* init: set all sums to zero */
	bn->tsorted = bn->hsorted = 0;
	bn->trevsorted = bn->hrevsorted = 0;
	bn->T->nonil = 1;
	ALIGNsetH(bn, e);
	ei = bat_iterator(e);
	bi = bat_iterator(b);
	bni = bat_iterator(bn);
	BATloop(e, p, q) {
		if (BUNfastins(bn, BUNhead(ei, p), &zero) == NULL) {
			BBPreclaim(bn);
			throw(MAL, "group.count", OPERATION_FAILED);
		}
	}
	/* scan b, and add increment totals for true values */
	if (BATprepareHash(bn)) {
		BBPreclaim(bn);
		throw(MAL, "group.count", MAL_MALLOC_FAIL);
	}
	BATloop(b, p, q) {
		if (*(bit *) BUNtloc(bi, p) == TRUE) {
			oid *h = (oid *) BUNhead(bi, p);

			BUNfndOID(r, bni, h);
			if (r != BUN_NONE) {
				wrd *dst = (wrd *) BUNtloc(bni, r);

				(*dst)++;
			}
		}
	}
	BBPkeepref(*retval = bn->batCacheid);
	BBPreleaseref(b->batCacheid);
	BBPreleaseref(e->batCacheid);
	return MAL_SUCCEED;
}

/*
 * @-
 * The window aggregate functions
 */
@= windowsum
group_export str GRPslidingsum_@1(int *retval, int *bid, int  *size, int *shift);
str GRPslidingsum_@1(int *retval, int *bid, int  *size, int *shift)
{
	BATiter bi;
	BAT *b, *bn;
	@2 sum;
	oid o= oid_nil;
	BUN p, q;
	int i;

	if( *shift <=0){
		throw(MAL, "group.sum", ILLEGAL_ARGUMENT " Illegal shift value");
	}
		
	if( (b= BATdescriptor(*bid)) == NULL ){
		throw(MAL, "group.sum", RUNTIME_OBJECT_MISSING);
	}
	if(b->htype != TYPE_oid && b->htype != TYPE_void)
		throw(MAL, "group.GRPwindowsum_@1", SEMANTIC_TYPE_ERROR "(v)oid head required\n");

	/* init: set all sums to zero */
	bn= BATnew( TYPE_void, TYPE_@2, BATcount(b)/ *size +1);
	if ( bn == NULL){
		BBPreleaseref(b->batCacheid);
		throw(MAL, "group.sum", RUNTIME_OBJECT_MISSING);
	}

	i = *size;
	sum =0;
	bi = bat_iterator(b);
	BATloop(b, p, q) {
		sum += *(@1*) BUNtail(bi,p);
		if (--i == 0){
			if (BUNfastins(bn, &o, &sum) == NULL) {
				BBPreclaim(bn);
				throw(MAL, "group.sum", OPERATION_FAILED);
			}
			/* slide here */
			if (*size != *shift ){
				p -= (*size-*shift);
			}
			i = *size;
			sum =0;
		}
	}
	if(i != *size && BUNfastins(bn, &o, &sum) == NULL) {
		BBPreclaim(bn);
		throw(MAL, "group.sum", OPERATION_FAILED);
	}

	bn->tsorted = bn->hsorted = 0;
	bn->trevsorted = bn->hrevsorted = 0;
	BATseqbase(bn,0);

	*retval= bn->batCacheid;
	BBPkeepref(*retval);
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}
group_export str GRPwindowsum_@1(int *retval, int *bid, int  *size);
str GRPwindowsum_@1(int *retval, int *bid, int  *size){
	return GRPslidingsum_@1(retval,bid,size,size);
}
@
@c
@:windowsum(bte,lng)@
@:windowsum(sht,lng)@
@:windowsum(int,lng)@
@:windowsum(lng,lng)@
@:windowsum(oid,lng)@
@:windowsum(wrd,lng)@
@:windowsum(flt,dbl)@
@:windowsum(dbl,dbl)@
