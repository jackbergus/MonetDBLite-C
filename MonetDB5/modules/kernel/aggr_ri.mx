@/
The contents of this file are subject to the MonetDB Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.monetdb.org/Legal/MonetDBLicense

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is the MonetDB Database System.

The Initial Developer of the Original Code is CWI.
Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
Copyright August 2008-2012 MonetDB B.V.
All Rights Reserved.
@

@a S. Manegold 
@v 1.0
@+ Aggregates Module

@- Result initialization
/*	init_result
	@1:	tail-type:	bte/sht/int/wrd/lng/flt/dbl / any / void
*/
@= init_result
{
	register BUN _cnt = BATcount(e);
	BAT *bm = 0;

	bn->tsorted = 0;
	bn->trevsorted = 0;
	bn->T->nonil = 0;
	min = max = (oid) 0;
	if (_cnt) {
		if (BAThdense(e)) {
			min = e->hseqbase;
			max = min + _cnt - 1;
		} else
		if (BAThordered(e)) {
			min = *(oid*) Hloc(e, BUNfirst(e));
			max = *(oid*) Hloc(e, BUNlast(e) - 1);
		} else {
			BUN _i = 0;
			oid *eh = (oid*)Hloc(e,BUNfirst(e));
			min = max = eh[0];
			BATaccessBegin(e,USE_HEAD,MMAP_SEQUENTIAL);
			for (_i = 0; _i < _cnt; _i++) {
				if (eh[_i] < min)
					min = eh[_i];
				else
				if (eh[_i] > max)
					max = eh[_i];
			}
			BATaccessEnd(e,USE_HEAD,MMAP_SEQUENTIAL);
		}
	}
#if (TYPE_@1 != TYPE_void) && (TYPE_@1 != TYPE_str)
{
	/* set all sums/avgs/counts to zero; for prod, zero is 1 */
	BUN _i = 0;
	@1 *bnt = (@1*)Tloc(bn,BUNfirst(bn));
	BATaccessBegin(bn,USE_TAIL,MMAP_SEQUENTIAL);
	for (_i = 0; _i < _cnt; _i++)
		bnt[_i] = zero;
	BATaccessEnd(bn,USE_TAIL,MMAP_SEQUENTIAL);
}
#endif
	BATsetcount(bn, _cnt);
#if TYPE_@1 == TYPE_str
{
	/* copy head values */
	BUN _i = 0;
	oid *bnh = (oid*)Hloc(bn,BUNfirst(bn));
	oid *eh = (oid*)Hloc(e,BUNfirst(e));
	(void) bm; /* silence compiler */
	BATaccessBegin(bn,USE_HEAD,MMAP_SEQUENTIAL);
	BATaccessBegin(e,USE_HEAD,MMAP_SEQUENTIAL);
	for (_i = 0; _i < _cnt; _i++)
		bnh[_i] = eh[_i];
	BATaccessEnd(bn,USE_HEAD,MMAP_SEQUENTIAL);
	BATaccessEnd(e,USE_HEAD,MMAP_SEQUENTIAL);
}
#else
	if (!bn->batDirty)
		bn->batDirty = TRUE;
	bm = VIEWcreate(e,bn);
	BBPreleaseref(bn->batCacheid);
	bn = bm;
	bm = 0;
	ALIGNsetH(bn, e);
#endif
}
