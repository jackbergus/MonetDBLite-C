@/
The contents of this file are subject to the MonetDB Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.monetdb.org/Legal/MonetDBLicense

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is the MonetDB Database System.

The Initial Developer of the Original Code is CWI.
Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
Copyright August 2008-2012 MonetDB B.V.
All Rights Reserved.
@

@f aggr_bge_avg

@c
/*
 * @a S. Manegold
 * @v 1.0
 * @+ Aggregates Module
 *
 *
 * @+ Implementation
 * These implementations need just one scan and a simple hash-maintained data
 * structure to compute a group of common aggregates.
 */
#include "monetdb_config.h"
#include <gdk.h>
#include "aggr.h"
#include "aggr_bge_avg.h"
#include "aggr_be_avg.h"

/*
 * @- Result initialization
 * //	init_result
 * 	@1:	tail-type:	bte/sht/int/wrd/lng/flt/dbl / any / void
 *
 */
@include aggr_ri.mx
@c
/*
 * @- Average
 */
/*	aggrX3_avg3
		e-void-head	e-oid-head	e-oid-head	e-oid-head
		void-lookup	array-lookup	scan-lookup	hash-lookup

	@1:	0		1		0		0		use sums-array?
	@2:	0		0		0		1		do BATprepareHash?
	@3:	BUNfndVOID	CHKrange	SCANfndOID	HASHfnd_oid	lookup
	@4:	var		loc		loc		loc		e/bn-head-access

	@5:	"BUNhloc(b,p)"	for  (oid) b-head-type,		b-head access
		"&bhsb; bhsb++" for (void) b-head-type

	@6:	bte / sht / int / wrd / lng / flt / dbl		b-tail-type
	@7:	"loc" for fixsized b-tail-type,			b-tail-access
		"var" for varsized b-tail-type			(only loc used currently)

	@8:	BUNt@7(bn,r)	BUNt@7(bn,r)	&sums[(*(oid*)h)-min]
								*dst: sum in-place or in sums-array ?

	@9:		r-off		(*(oid*)h)-min	index in cnt array
*/
@= aggrX3_avg3
	ALGODEBUG THRprintf(GDKout, "#aggrX3_avg3(@1,@2,@3,@4,@5,@6,@7,@8,@9);\n");
#if @1
	if (range > 0) {
		/* create tmp. sums array */
		sums = (dbl*) GDKzalloc(range*sizeof(dbl));
		if (sums == NULL) {
			GDKerror("aggrX3_avg3(@1,@2,@3,@4,@5,@6,@6,@7,@8,@9): sums = GDKzalloc("OIDFMT"*"SZFMT") failed", range, sizeof(dbl));
			BBPreclaim(bn);
			return GDK_FAIL;
		}
	}
#endif
#if @2
	if (BATprepareHash(bn)) {
		GDKerror("aggrX3_avg3(@1,@2,@3,@4,@5,@6,@6,@7,@8,@9): BATprepareHash(bn) failed");
#if @1
		if (sums)
			GDKfree(sums);
#endif
		BBPreclaim(bn);
		return GDK_FAIL;
	}
#endif
	cnt = (BUN*) GDKzalloc(slots*sizeof(cnt[0]));
	if (cnt == NULL) {
		GDKerror("aggrX3_avg3(@1,@2,@3,@4,@5,@6,@7,@8,@9): cnt = GDKzalloc("OIDFMT"*"SZFMT") failed", slots, sizeof(cnt[0]));
#if @1
		if (sums)
			GDKfree(sums);
#endif
		BBPreclaim(bn);
		return GDK_FAIL;
	}
	/* scan b & g, adding sums, and incrementing counts */
	base = BUNfirst(g);
	gh_offset = (ssize_t) base - (ssize_t) g->hseqbase;
	gt_offset = (ssize_t) g->tseqbase - (ssize_t) g->hseqbase;
	end = base + BATcount(g);
	(void) end;		/* keep compilers happy */
	bhsb = b->hseqbase;
#if @1
	if (!sums)
#endif
		BATaccessBegin(bn,USE_HEAD|USE_HHASH|USE_TAIL,BATtordered(g)&BAThordered(e)?MMAP_SEQUENTIAL:MMAP_WILLNEED);
	if (b_use)
		BATaccessBegin(b,b_use,MMAP_SEQUENTIAL);
	if (BATtdense(g)) {
		@:aggrX3_avg3_body(@1,@2,@3,@4,@5,@6,@7,@8,@9,@[10],oid hh = (oid) (gt_offset + v); oid *h = &hh)@
	} else {
		BATaccessBegin(g,USE_TAIL,MMAP_SEQUENTIAL);
		@:aggrX3_avg3_body(@1,@2,@3,@4,@5,@6,@7,@8,@9,@[10],oid *h = (oid*) Tloc(g, w))@
		BATaccessEnd(g,USE_TAIL,MMAP_SEQUENTIAL);
	}
	if (b_use)
		BATaccessEnd(b,b_use,MMAP_SEQUENTIAL);
#if @1
	if (!sums)
#endif
		BATaccessEnd(bn,USE_HEAD|USE_HHASH|USE_TAIL,BATtordered(g)&BAThordered(e)?MMAP_SEQUENTIAL:MMAP_WILLNEED);
	/* postprocess by dividing sums by counts */
#if @1
	if (sums) {
		/* sums in sums-array */
		BATaccessBegin(bn,USE_HEAD|USE_TAIL,MMAP_SEQUENTIAL);
		BATloop(bn, p, q) {
			oid h = (*(oid*) BUNh@4(bni,p)) - min;
			dbl *dst = (dbl*) BUNt@7(bni, p);
			if (cnt[h] == 0 || sums[h] == dbl_nil) {
				*dst = dbl_nil;
			} else {
				*dst = sums[h]/cnt[h];
			}
		}
		BATaccessEnd(bn,USE_HEAD|USE_TAIL,MMAP_SEQUENTIAL);
		GDKfree(sums);
	}
#else
	{
		/* sums in-place */
		BUN yy = 0;
		BATaccessBegin(bn,USE_TAIL,MMAP_SEQUENTIAL);
		BATloop(bn, p, q) {
			dbl *dst = (dbl*) BUNt@7(bni, p);
			if (cnt[yy] == 0) {
				*dst = dbl_nil;
			} else if (*dst != dbl_nil) {
				*dst /= cnt[yy];
			}
			yy++;
		}
		BATaccessEnd(bn,USE_TAIL,MMAP_SEQUENTIAL);

	}
#endif
	if (cnt)
		GDKfree(cnt);
@
@c
/*	aggrX3_avg3_body
	@[11]:	oid hh = (oid) (gt_offset + v); oid *h = &hh		g tail value calculation
		oid *h = (oid*) Tloc(g, w)				g tail value lookup
*/
@= aggrX3_avg3_body
	ALGODEBUG THRprintf(GDKout, "#aggrX3_avg3_oid_body(@1,@2,@3,@4,@5,@6,@7,@8,@9,@[10],@[11]);\n");
	if (b->T->nonil) {
		BATloop(b, p, q) {
			@6 *t = (@6*) BUNt@7(bi,p);
			oid v = *(oid*) @5;

			w = (BUN) (gh_offset + v);
			if (w >= base && w < end) {
				@[11];

				@3(r, bni, (oid*)h);
				if (r != BUN_NONE) {
					dbl *dst = (dbl*) @8;
					*dst += *t;
					cnt[@9]++;
				}
			}
		}
	} else {
		BATloop(b, p, q) {
			@6 *t = (@6*) BUNt@7(bi,p);
			oid v = *(oid*) @5;

			w = (BUN) (gh_offset + v);
			if (w >= base && w < end) {
				@[11];

				@3(r, bni, (oid*)h);
				if (r != BUN_NONE) {
					dbl *dst = (dbl*) @8;
					if (*dst != dbl_nil) {
						if (*t == @6_nil) {
							*dst = dbl_nil;
						} else {
							*dst += *t;
						}
						cnt[@9]++;
					}
				}
			}
		}
	}
@
@c
/*	arithavg3
	@6:	bte / sht / int / wrd / lng / flt / dbl	b-tail-type
	@7:	"loc" for fixsized b-tail-type,		b-tail-access
		"var" for varsized b-tail-type		(only loc used currently)
	@9:	result type
*/
@= arithavg3_h
int
CMDaggrX3_avg3_@1(BAT **ret, BAT *b, BAT *g, BAT *e);
@= arithavg3_c
int
CMDaggrX3_avg3_@1(BAT **ret, BAT *b, BAT *g, BAT *e)
{
	BAT *bn;
	BATiter bni, bi = bat_iterator(b);
	BUN off;
	BUN *cnt = NULL;
	oid range;
	oid min, max;
	dbl zero = (dbl) 0, *sums = NULL;
	BUN slots;
	BUN p, q, r;
	oid bhsb;
	BUN base, end, w;
	ssize_t gh_offset, gt_offset;
	int b_use = USE_TAIL;

	ALGODEBUG THRprintf(GDKout, "#CMDaggrX3_avg3_@1[@2](b=%s,g=%s,e=%s);\n",
		BATgetId(b),BATgetId(g),BATgetId(e));
/*	ERRORcheck((BATcount(b)!=BATcount(g)), "CMDaggrX3_avg3_@1: BATs b & g must be of equal size.\n");	*/
	ERRORcheck((g->htype == TYPE_void) && (g->hseqbase == oid_nil) && (BATcount(g) > 0), "CMDaggrX3_avg3_@1: head of BAT g must not be nil.\n");

	if (g->hseqbase == oid_nil || !BAThdense(g) || !BAThordered(b) || !g->hkey) {
		BAT *gb = BATjoin(BATmirror(g),b,BUN_NONE);
		int rtrn = CMDaggrX3_avg_@1(ret, gb, e);
		BBPunfix(gb->batCacheid);
		return rtrn;
	}

	bn = BATnew(TYPE_void, TYPE_dbl, BATcount(e));
	if( bn == NULL) {
		GDKerror("CMDaggrX3_avg3_@1(): BATnew() failed");
		return GDK_FAIL;
	}

	/* init: set all sums & counts to zero and calculate min/max oid */
	@:init_result(dbl)@
	bni = bat_iterator(bn);
	off = BUNfirst(bn);
	range = max - min + 1;

	/* scan b & g, calculate sums & counts, derive averages */
	slots = BATcount(e);
	if (slots == 0) {
		/* empty extend => empty result */
		*ret = bn;
		return GDK_SUCCEED;
	}
	if (!BAThdense(b))
		b_use |= USE_HEAD;
	if (e->htype == TYPE_void) {
		/* void lookup */
		if (BAThdense(b)) {
			@:aggrX3_avg3(0,0,BUNfndVOID,var,&bhsb;bhsb++,@1,@2,BUNt@2(bni,r),r-off)@
		} else {
			@:aggrX3_avg3(0,0,BUNfndVOID,var,BUNhloc(bi,p),@1,@2,BUNt@2(bni,r),r-off)@
		}
	/* e->htype == TYPE_oid */
	} else if (range <= SMALL_AGGR_MAX) {
		/* array lookup */
		slots = range;
		if (BAThdense(b)) {
			@:aggrX3_avg3(1,0,CHKrange,loc,&bhsb;bhsb++,@1,@2,&sums[(*(oid*)h)-min],(*(oid*)h)-min)@
		} else {
			@:aggrX3_avg3(1,0,CHKrange,loc,BUNhloc(bi,p),@1,@2,&sums[(*(oid*)h)-min],(*(oid*)h)-min)@
		}
	} else if (BATcount(e) <= SCAN_AGGR_MAX) {
		/* scan lookup */
		SCAN_aggr_init;
		if (BAThdense(b)) {
			@:aggrX3_avg3(0,0,SCANfndOID,loc,&bhsb;bhsb++,@1,@2,BUNt@2(bni,r),r-off)@
		} else {
			@:aggrX3_avg3(0,0,SCANfndOID,loc,BUNhloc(bi,p),@1,@2,BUNt@2(bni,r),r-off)@
		}
	} else if (BATtordered(g)&BAThordered(e)) {
		/* merge lookup */
		MERGE_aggr_init;
		if (BAThdense(b)) {
			@:aggrX3_avg3(0,0,MERGEfndOID,loc,&bhsb;bhsb++,@1,@2,BUNt@2(bni,r),r-off)@
		} else {
			@:aggrX3_avg3(0,0,MERGEfndOID,loc,BUNhloc(bi,p),@1,@2,BUNt@2(bni,r),r-off)@
		}
	} else {
		/* hash lookup */
		if (BAThdense(b)) {
			@:aggrX3_avg3(0,1,HASHfnd_oid,loc,&bhsb;bhsb++,@1,@2,BUNt@2(bni,r),r-off)@
		} else {
			@:aggrX3_avg3(0,1,HASHfnd_oid,loc,BUNhloc(bi,p),@1,@2,BUNt@2(bni,r),r-off)@
		}
	}

	*ret = bn;
	return GDK_SUCCEED;
}
@= arithavg3_hc
@:arithavg3_@1(@2,@3)@
@= arithavg3
@:arithavg3_hc(@1,bte,loc)@
@:arithavg3_hc(@1,sht,loc)@
@:arithavg3_hc(@1,int,loc)@
@:arithavg3_hc(@1,wrd,loc)@
@:arithavg3_hc(@1,lng,loc)@
@:arithavg3_hc(@1,flt,loc)@
@:arithavg3_hc(@1,dbl,loc)@
@
@h
@:arithavg3(h)@
@c
@:arithavg3(c)@

