@/
The contents of this file are subject to the MonetDB Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://www.monetdb.org/Legal/MonetDBLicense

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is the MonetDB Database System.

The Initial Developer of the Original Code is CWI.
Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
Copyright August 2008-2011 MonetDB B.V.
All Rights Reserved.
@

@c
/*
 * @f aggr_be_prod
 * @a S. Manegold
 * @v 1.0
 * @+ Aggregates Module
 *
 *
 * @+ Implementation
 * These implementations need just one scan and a simple hash-maintained data
 * structure to compute a group of common aggregates.
 */
#include "monetdb_config.h"
#include <gdk.h>
#include <gdk_scanselect.h>	/* for type-specific HT_bunfastins_nocheck_noinc(), until they're moved to gdk.mx */
#include "aggr.h"
#include "aggr_be_prod.h"

/*
 * @- Result initialization
 * //	init_result
 * 	@1:	tail-type:	bte/sht/int/wrd/lng/flt/dbl / any / void
 *
 */
@include aggr_ri.mx
@c
/*
 * @- Product
 */
/*	aggrX3_prod
		e-void-head	e-oid-head	e-oid-head	e-oid-head
		void-lookup	array-lookup	scan-lookup	hash-lookup

	@1:	0		1		0		0		use prods-array?
	@2:	0		0		0		1		do BATprepareHash?
	@3:	BUNfndVOID	CHKrange	SCANfndOID	HASHfnd_oid	lookup
	@4:	var		loc		loc		loc		e/bn-head-access

	@5:	"BUNhloc(b,p)"	for  (oid) b-head-type,		b-head access
		"&bhsb; bhsb++" for (void) b-head-type

	@6:	bte / sht / int / wrd / lng / flt / dbl		b-tail-type
	@7:	"loc" for fixsized b-tail-type,			b-tail-access
		"var" for varsized b-tail-type			(only loc used currently)

	@8:	BUNt@7(bn,r)	BUNt@7(bn,r)	&prods[(*(oid*)h)-min]
								*dst: prod in-place or in prods-array ?
	@9:	result type
	@[10]:		r-off		(*(oid*)h)-min	index in hit array
*/
@= aggrX3_prod
	ALGODEBUG THRprintf(GDKout, "#aggrX3_prod(@1,@2,@3,@4,@5,@6,@7,@8,@9,@[10]);\n");
	if (@1 && range > 0) {
		/* create tmp. prods array */
		oid i;
		prods = (@9*) GDKmalloc(range*sizeof(@9));
		if (prods == NULL) {
			GDKerror("aggrX3_prod(@1,@2,@3,@4,@5,@6,@7,@8,@9,@[10]): prods = GDKmalloc("OIDFMT"*"SZFMT") failed", range, sizeof(@9));
			BBPreclaim(bn);
			return GDK_FAIL;
		}
		for (i = 0; i < range; i++)
			prods[i] = zero;
	}
	if (@2 && BATprepareHash(bn)) {
		GDKerror("aggrX3_prod(@1,@2,@3,@4,@5,@6,@7,@8,@9,@[10]): BATprepareHash(bn) failed");
		if (@1 && prods)
			GDKfree(prods);
		BBPreclaim(bn);
		return GDK_FAIL;
	}
	hit = (bit*) GDKzalloc(slots*sizeof(bit));
	if (hit == NULL) {
		GDKerror("aggrX3_prod(@1,@2,@3,@4,@5,@6,@7,@8,@9,@[10]): hit = GDKzalloc("OIDFMT"*"SZFMT") failed", slots, sizeof(bit));
		if (@1 && prods)
			GDKfree(prods);
		BBPreclaim(bn);
		return GDK_FAIL;
	}
	/* scan b, and mul values to prods in-place or in prods-array */
	bhsb = b->hseqbase - 1;
	if (!(@1 && prods))
		BATaccessBegin(bn,USE_HEAD|USE_HHASH|USE_TAIL,BAThordered(b)&BAThordered(e)&1?MMAP_SEQUENTIAL:MMAP_WILLNEED);
	if (b_use)
		BATaccessBegin(b,b_use,MMAP_SEQUENTIAL);
	if (b->T->nonil) {
		BATloop(b, p, q) {
			@6 *t = (@6*) BUNt@7(bi,p);
			oid *h = (oid*) @5;

			@3(r, bni, h);
			if (r != BUN_NONE) {
				@9 *dst = (@9*) @8;
				*dst *= (@9) *t;
				hit[@[10]] = 1;
			}
		}
	} else {
		BATloop(b, p, q) {
			@6 *t = (@6*) BUNt@7(bi,p);
			oid *h = (oid*) @5;

			@3(r, bni, h);
			if (r != BUN_NONE) {
				@9 *dst = (@9*) @8;
				if (*dst != @9_nil) {
					if (*t == @6_nil) {
						*dst = @9_nil;
					} else {
						*dst *= (@9) *t;
						hit[@[10]] = 1;
					}
				}
			}
		}
	}
	if (b_use)
		BATaccessEnd(b,b_use,MMAP_SEQUENTIAL);
	if (!(@1 && prods))
		BATaccessEnd(bn,USE_HEAD|USE_HHASH|USE_TAIL,BAThordered(b)&BAThordered(e)&1?MMAP_SEQUENTIAL:MMAP_WILLNEED);
	if (@1) {
	    if (prods) {
		/* copy prods array to final result */
		BATaccessBegin(bn,USE_HEAD|USE_TAIL,MMAP_SEQUENTIAL);
		BATloop(bn, p, q) {
			oid h = (*(oid*) BUNh@4(bni,p)) - min;
			@9 *dst = (@9*)BUNt@7(bni, p);
			if (hit[h] == 0) {
				*dst = @9_nil;
			} else {
				*dst = prods[h];
			}
		}
		BATaccessEnd(bn,USE_HEAD|USE_TAIL,MMAP_SEQUENTIAL);
		GDKfree(prods);
	    }
	} else {
		BUN yy = 0;
		BATaccessBegin(bn,USE_TAIL,MMAP_SEQUENTIAL);
		BATloop(bn, p, q) {
			@9 *dst = (@9*)BUNt@7(bni, p);
			if (hit[yy] == 0) {
				*dst = @9_nil;
			}
			yy++;
		}
		BATaccessEnd(bn,USE_TAIL,MMAP_SEQUENTIAL);
	}
	if (hit)
		GDKfree(hit);
@
@c

/*	arithprod
	@6:	bte / sht / int / wrd / lng / flt / dbl	b-tail-type
	@7:	"loc" for fixsized b-tail-type,		b-tail-access
		"var" for varsized b-tail-type		(only loc used currently)
	@9:	result type
*/
@= arithprod_h
int
CMDaggrX3_prod_@1_@3(BAT **ret, BAT *b, BAT *e);
@= arithprod_c
int
CMDaggrX3_prod_@1_@3(BAT **ret, BAT *b, BAT *e)
{
	BAT *bn = BATnew(TYPE_void, TYPE_@3, BATcount(e));
	BATiter bni, bi = bat_iterator(b);
	@3 zero = (@3) 1, *prods = NULL;
	bit *hit = NULL;
	BUN slots, off;
	BUN p, q, r;
	oid range;
	oid min, max;
	oid bhsb;
	int b_use = USE_TAIL;

	if( bn == NULL) {
		GDKerror("CMDaggrX3_prod_@1_@3(): BATnew() failed");
		return GDK_FAIL;
	}
	ALGODEBUG THRprintf(GDKout, "#CMDaggrX3_prod_@1_@3[@2](b=%s,e=%s);\n",
		BATgetId(b), BATgetId(e));
	/* init: set all prods to zero and calculate min/max oid */
	@:init_result(@3)@
	bni = bat_iterator(bn);
	off = BUNfirst(bn);
	range = max - min + 1;

	/* scan b, and calculate prods */
	slots = BATcount(e);
	if (slots == 0) {
		/* empty extend => empty result */
		*ret = bn;
		return GDK_SUCCEED;
	}
	if (!BAThdense(b))
		b_use |= USE_HEAD;
	if (e->htype == TYPE_void) {
		/* void lookup */
		if (BAThdense(b)) {
			@:aggrX3_prod(0,0,BUNfndVOID,var,&bhsb;bhsb++,@1,@2,BUNt@2(bni,r),@3,r-off)@
		} else {
			@:aggrX3_prod(0,0,BUNfndVOID,var,BUNhloc(bi,p),@1,@2,BUNt@2(bni,r),@3,r-off)@
		}
	/* e->htype == TYPE_oid */
	} else if (range <= SMALL_AGGR_MAX) {
		/* array lookup */
		slots = range;
		if (BAThdense(b)) {
			@:aggrX3_prod(1,0,CHKrange,loc,&bhsb;bhsb++,@1,@2,&prods[(*(oid*)h)-min],@3,(*(oid*)h)-min)@
		} else {
			@:aggrX3_prod(1,0,CHKrange,loc,BUNhloc(bi,p),@1,@2,&prods[(*(oid*)h)-min],@3,(*(oid*)h)-min)@
		}
	} else if (BATcount(e) <= SCAN_AGGR_MAX) {
		/* scan lookup */
		SCAN_aggr_init;
		if (BAThdense(b)) {
			@:aggrX3_prod(0,0,SCANfndOID,loc,&bhsb;bhsb++,@1,@2,BUNt@2(bni,r),@3,r-off)@
		} else {
			@:aggrX3_prod(0,0,SCANfndOID,loc,BUNhloc(bi,p),@1,@2,BUNt@2(bni,r),@3,r-off)@
		}
	} else if (BATtordered(b)&BAThordered(e)&1) {
		/* merge lookup */
		MERGE_aggr_init;
		if (BAThdense(b)) {
			@:aggrX3_prod(0,0,MERGEfndOID,loc,&bhsb;bhsb++,@1,@2,BUNt@2(bni,r),@3,r-off)@
		} else {
			@:aggrX3_prod(0,0,MERGEfndOID,loc,BUNhloc(bi,p),@1,@2,BUNt@2(bni,r),@3,r-off)@
		}
	} else {
		/* hash lookup */
		if (BAThdense(b)) {
			@:aggrX3_prod(0,1,HASHfnd_oid,loc,&bhsb;bhsb++,@1,@2,BUNt@2(bni,r),@3,r-off)@
		} else {
			@:aggrX3_prod(0,1,HASHfnd_oid,loc,BUNhloc(bi,p),@1,@2,BUNt@2(bni,r),@3,r-off)@
		}
	}

	*ret = bn;
	return GDK_SUCCEED;
}
@
@= arithprod_hc
@:arithprod_@1(@2,@3,@4)@
@= arithprod
@:arithprod_hc(@1,bte,loc,bte)@
@:arithprod_hc(@1,bte,loc,sht)@
@:arithprod_hc(@1,bte,loc,int)@
@:arithprod_hc(@1,bte,loc,wrd)@
@:arithprod_hc(@1,bte,loc,lng)@
@:arithprod_hc(@1,sht,loc,sht)@
@:arithprod_hc(@1,sht,loc,int)@
@:arithprod_hc(@1,sht,loc,wrd)@
@:arithprod_hc(@1,sht,loc,lng)@
@:arithprod_hc(@1,int,loc,int)@
@:arithprod_hc(@1,int,loc,wrd)@
@:arithprod_hc(@1,int,loc,lng)@
@:arithprod_hc(@1,wrd,loc,wrd)@
@:arithprod_hc(@1,wrd,loc,lng)@
@:arithprod_hc(@1,lng,loc,wrd)@
@:arithprod_hc(@1,lng,loc,lng)@
@:arithprod_hc(@1,flt,loc,flt)@
@:arithprod_hc(@1,flt,loc,dbl)@
@:arithprod_hc(@1,dbl,loc,dbl)@
@
@h
@:arithprod(h)@
@c
@:arithprod(c)@

