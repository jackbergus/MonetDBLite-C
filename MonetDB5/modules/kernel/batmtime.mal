# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2012 MonetDB B.V.
# All Rights Reserved.

command batcalc.==( l:bat[:oid,:date], r:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatEQ
comment "Compare a bat of date against each other";
pattern batcalc.==( l:bat[:oid,:date], r:date) :bat[:oid,:bit]
address CMDbatEQcst;
pattern batcalc.==(r:date, l:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatEQcst
comment "Compare a bat of date against a singleton";

command batcalc.!=( l:bat[:oid,:date], r:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatNE
comment "Compare a bat of date against each other";
pattern batcalc.!=( l:bat[:oid,:date], r:date) :bat[:oid,:bit]
address CMDbatNEcst;
pattern batcalc.!=(r:date, l:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatNEcst
comment "Compare a bat of date against a singleton";

command batcalc.<( l:bat[:oid,:date], r:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatLT
comment "Compare a bat of date against each other";
pattern batcalc.<( l:bat[:oid,:date], r:date) :bat[:oid,:bit]
address CMDbatLTcst;
pattern batcalc.<(r:date, l:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatLTcst
comment "Compare a bat of date against a singleton";

command batcalc.<=( l:bat[:oid,:date], r:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatLE
comment "Compare a bat of date against each other";
pattern batcalc.<=( l:bat[:oid,:date], r:date) :bat[:oid,:bit]
address CMDbatLEcst;
pattern batcalc.<=(r:date, l:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatLEcst
comment "Compare a bat of date against a singleton";

command batcalc.>( l:bat[:oid,:date], r:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatGT
comment "Compare a bat of date against each other";
pattern batcalc.>( l:bat[:oid,:date], r:date) :bat[:oid,:bit]
address CMDbatGTcst;
pattern batcalc.>(r:date, l:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatGTcst
comment "Compare a bat of date against a singleton";

command batcalc.>=( l:bat[:oid,:date], r:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatGE
comment "Compare a bat of date against each other";
pattern batcalc.>=( l:bat[:oid,:date], r:date) :bat[:oid,:bit]
address CMDbatGEcst;
pattern batcalc.>=(r:date, l:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatGEcst
comment "Compare a bat of date against a singleton";

command batcalc.==( l:bat[:oid,:daytime], r:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatEQ
comment "Compare a bat of daytime against each other";
pattern batcalc.==( l:bat[:oid,:daytime], r:daytime) :bat[:oid,:bit]
address CMDbatEQcst;
pattern batcalc.==(r:daytime, l:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatEQcst
comment "Compare a bat of daytime against a singleton";

command batcalc.!=( l:bat[:oid,:daytime], r:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatNE
comment "Compare a bat of daytime against each other";
pattern batcalc.!=( l:bat[:oid,:daytime], r:daytime) :bat[:oid,:bit]
address CMDbatNEcst;
pattern batcalc.!=(r:daytime, l:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatNEcst
comment "Compare a bat of daytime against a singleton";

command batcalc.<( l:bat[:oid,:daytime], r:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatLT
comment "Compare a bat of daytime against each other";
pattern batcalc.<( l:bat[:oid,:daytime], r:daytime) :bat[:oid,:bit]
address CMDbatLTcst;
pattern batcalc.<(r:daytime, l:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatLTcst
comment "Compare a bat of daytime against a singleton";

command batcalc.<=( l:bat[:oid,:daytime], r:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatLE
comment "Compare a bat of daytime against each other";
pattern batcalc.<=( l:bat[:oid,:daytime], r:daytime) :bat[:oid,:bit]
address CMDbatLEcst;
pattern batcalc.<=(r:daytime, l:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatLEcst
comment "Compare a bat of daytime against a singleton";

command batcalc.>( l:bat[:oid,:daytime], r:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatGT
comment "Compare a bat of daytime against each other";
pattern batcalc.>( l:bat[:oid,:daytime], r:daytime) :bat[:oid,:bit]
address CMDbatGTcst;
pattern batcalc.>(r:daytime, l:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatGTcst
comment "Compare a bat of daytime against a singleton";

command batcalc.>=( l:bat[:oid,:daytime], r:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatGE
comment "Compare a bat of daytime against each other";
pattern batcalc.>=( l:bat[:oid,:daytime], r:daytime) :bat[:oid,:bit]
address CMDbatGEcst;
pattern batcalc.>=(r:daytime, l:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatGEcst
comment "Compare a bat of daytime against a singleton";

command batcalc.==( l:bat[:oid,:timestamp], r:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatEQ
comment "Compare a bat of timestamp against each other";
pattern batcalc.==( l:bat[:oid,:timestamp], r:timestamp) :bat[:oid,:bit]
address CMDbatEQcst;
pattern batcalc.==(r:timestamp, l:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatEQcst
comment "Compare a bat of timestamp against a singleton";

command batcalc.!=( l:bat[:oid,:timestamp], r:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatNE
comment "Compare a bat of timestamp against each other";
pattern batcalc.!=( l:bat[:oid,:timestamp], r:timestamp) :bat[:oid,:bit]
address CMDbatNEQcst;
pattern batcalc.!=(r:timestamp, l:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatNEQcst
comment "Compare a bat of timestamp against a singleton";

command batcalc.<( l:bat[:oid,:timestamp], r:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatLT
comment "Compare a bat of timestamp against each other";
pattern batcalc.<( l:bat[:oid,:timestamp], r:timestamp) :bat[:oid,:bit]
address CMDbatLTcst;
pattern batcalc.<(r:timestamp, l:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatLTcst
comment "Compare a bat of timestamp against a singleton";

command batcalc.<=( l:bat[:oid,:timestamp], r:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatLE
comment "Compare a bat of timestamp against each other";
pattern batcalc.<=( l:bat[:oid,:timestamp], r:timestamp) :bat[:oid,:bit]
address CMDbatLEcst;
pattern batcalc.<=(r:timestamp, l:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatLEcst
comment "Compare a bat of timestamp against a singleton";

command batcalc.>( l:bat[:oid,:timestamp], r:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatGT
comment "Compare a bat of timestamp against each other";
pattern batcalc.>( l:bat[:oid,:timestamp], r:timestamp) :bat[:oid,:bit]
address CMDbatGTcst;
pattern batcalc.>(r:timestamp, l:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatGTcst
comment "Compare a bat of timestamp against a singleton";

command batcalc.>=( l:bat[:oid,:timestamp], r:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatGE
comment "Compare a bat of timestamp against each other";
pattern batcalc.>=( l:bat[:oid,:timestamp], r:timestamp) :bat[:oid,:bit]
address CMDbatGEcst;
pattern batcalc.>=(r:timestamp, l:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatGEcst
comment "Compare a bat of timestamp against a singleton";


command batcalc.isnil(b:bat[:oid,:date]):bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat";

command batcalc.isnil(b:bat[:oid,:daytime]):bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat";

command batcalc.isnil(b:bat[:oid,:timestamp]):bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat";
# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2012 MonetDB B.V.
# All Rights Reserved.

# @f batmtime
#
command batcalc.==( l:bat[:oid,:date], r:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatEQ
comment "Compare a bat of date against each other";
pattern batcalc.==( l:bat[:oid,:date], r:date) :bat[:oid,:bit]
address CMDbatEQcst;
pattern batcalc.==(r:date, l:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatEQcst
comment "Compare a bat of date against a singleton";

command batcalc.!=( l:bat[:oid,:date], r:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatNE
comment "Compare a bat of date against each other";
pattern batcalc.!=( l:bat[:oid,:date], r:date) :bat[:oid,:bit]
address CMDbatNEcst;
pattern batcalc.!=(r:date, l:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatNEcst
comment "Compare a bat of date against a singleton";

command batcalc.<( l:bat[:oid,:date], r:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatLT
comment "Compare a bat of date against each other";
pattern batcalc.<( l:bat[:oid,:date], r:date) :bat[:oid,:bit]
address CMDbatLTcst;
pattern batcalc.<(r:date, l:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatLTcst
comment "Compare a bat of date against a singleton";

command batcalc.<=( l:bat[:oid,:date], r:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatLE
comment "Compare a bat of date against each other";
pattern batcalc.<=( l:bat[:oid,:date], r:date) :bat[:oid,:bit]
address CMDbatLEcst;
pattern batcalc.<=(r:date, l:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatLEcst
comment "Compare a bat of date against a singleton";

command batcalc.>( l:bat[:oid,:date], r:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatGT
comment "Compare a bat of date against each other";
pattern batcalc.>( l:bat[:oid,:date], r:date) :bat[:oid,:bit]
address CMDbatGTcst;
pattern batcalc.>(r:date, l:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatGTcst
comment "Compare a bat of date against a singleton";

command batcalc.>=( l:bat[:oid,:date], r:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatGE
comment "Compare a bat of date against each other";
pattern batcalc.>=( l:bat[:oid,:date], r:date) :bat[:oid,:bit]
address CMDbatGEcst;
pattern batcalc.>=(r:date, l:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatGEcst
comment "Compare a bat of date against a singleton";

command batcalc.==( l:bat[:oid,:daytime], r:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatEQ
comment "Compare a bat of daytime against each other";
pattern batcalc.==( l:bat[:oid,:daytime], r:daytime) :bat[:oid,:bit]
address CMDbatEQcst;
pattern batcalc.==(r:daytime, l:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatEQcst
comment "Compare a bat of daytime against a singleton";

command batcalc.!=( l:bat[:oid,:daytime], r:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatNE
comment "Compare a bat of daytime against each other";
pattern batcalc.!=( l:bat[:oid,:daytime], r:daytime) :bat[:oid,:bit]
address CMDbatNEcst;
pattern batcalc.!=(r:daytime, l:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatNEcst
comment "Compare a bat of daytime against a singleton";

command batcalc.<( l:bat[:oid,:daytime], r:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatLT
comment "Compare a bat of daytime against each other";
pattern batcalc.<( l:bat[:oid,:daytime], r:daytime) :bat[:oid,:bit]
address CMDbatLTcst;
pattern batcalc.<(r:daytime, l:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatLTcst
comment "Compare a bat of daytime against a singleton";

command batcalc.<=( l:bat[:oid,:daytime], r:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatLE
comment "Compare a bat of daytime against each other";
pattern batcalc.<=( l:bat[:oid,:daytime], r:daytime) :bat[:oid,:bit]
address CMDbatLEcst;
pattern batcalc.<=(r:daytime, l:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatLEcst
comment "Compare a bat of daytime against a singleton";

command batcalc.>( l:bat[:oid,:daytime], r:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatGT
comment "Compare a bat of daytime against each other";
pattern batcalc.>( l:bat[:oid,:daytime], r:daytime) :bat[:oid,:bit]
address CMDbatGTcst;
pattern batcalc.>(r:daytime, l:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatGTcst
comment "Compare a bat of daytime against a singleton";

command batcalc.>=( l:bat[:oid,:daytime], r:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatGE
comment "Compare a bat of daytime against each other";
pattern batcalc.>=( l:bat[:oid,:daytime], r:daytime) :bat[:oid,:bit]
address CMDbatGEcst;
pattern batcalc.>=(r:daytime, l:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatGEcst
comment "Compare a bat of daytime against a singleton";

command batcalc.==( l:bat[:oid,:timestamp], r:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatEQ
comment "Compare a bat of timestamp against each other";
pattern batcalc.==( l:bat[:oid,:timestamp], r:timestamp) :bat[:oid,:bit]
address CMDbatEQcst;
pattern batcalc.==(r:timestamp, l:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatEQcst
comment "Compare a bat of timestamp against a singleton";

command batcalc.!=( l:bat[:oid,:timestamp], r:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatNE
comment "Compare a bat of timestamp against each other";
pattern batcalc.!=( l:bat[:oid,:timestamp], r:timestamp) :bat[:oid,:bit]
address CMDbatNEQcst;
pattern batcalc.!=(r:timestamp, l:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatNEQcst
comment "Compare a bat of timestamp against a singleton";

command batcalc.<( l:bat[:oid,:timestamp], r:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatLT
comment "Compare a bat of timestamp against each other";
pattern batcalc.<( l:bat[:oid,:timestamp], r:timestamp) :bat[:oid,:bit]
address CMDbatLTcst;
pattern batcalc.<(r:timestamp, l:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatLTcst
comment "Compare a bat of timestamp against a singleton";

command batcalc.<=( l:bat[:oid,:timestamp], r:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatLE
comment "Compare a bat of timestamp against each other";
pattern batcalc.<=( l:bat[:oid,:timestamp], r:timestamp) :bat[:oid,:bit]
address CMDbatLEcst;
pattern batcalc.<=(r:timestamp, l:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatLEcst
comment "Compare a bat of timestamp against a singleton";

command batcalc.>( l:bat[:oid,:timestamp], r:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatGT
comment "Compare a bat of timestamp against each other";
pattern batcalc.>( l:bat[:oid,:timestamp], r:timestamp) :bat[:oid,:bit]
address CMDbatGTcst;
pattern batcalc.>(r:timestamp, l:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatGTcst
comment "Compare a bat of timestamp against a singleton";

command batcalc.>=( l:bat[:oid,:timestamp], r:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatGE
comment "Compare a bat of timestamp against each other";
pattern batcalc.>=( l:bat[:oid,:timestamp], r:timestamp) :bat[:oid,:bit]
address CMDbatGEcst;
pattern batcalc.>=(r:timestamp, l:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatGEcst
comment "Compare a bat of timestamp against a singleton";


command batcalc.isnil(b:bat[:oid,:date]):bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat";

command batcalc.isnil(b:bat[:oid,:daytime]):bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat";

command batcalc.isnil(b:bat[:oid,:timestamp]):bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat";
