# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2012 MonetDB B.V.
# All Rights Reserved.

# This file was generated by using the script batmtime.mal.sh.

module batcalc;

command <(b1:bat[:oid,:date],b2:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b:bat[:oid,:date],v:date) :bat[:oid,:bit]
address CMDbatLTcst
comment "Return B < V";
pattern <(v:date,b:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatLTcst
comment "Return V < B";

command <(b1:bat[:oid,:daytime],b2:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b:bat[:oid,:daytime],v:daytime) :bat[:oid,:bit]
address CMDbatLTcst
comment "Return B < V";
pattern <(v:daytime,b:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatLTcst
comment "Return V < B";

command <(b1:bat[:oid,:timestamp],b2:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatLT
comment "Return B1 < B2";
pattern <(b:bat[:oid,:timestamp],v:timestamp) :bat[:oid,:bit]
address CMDbatLTcst
comment "Return B < V";
pattern <(v:timestamp,b:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatLTcst
comment "Return V < B";

command <=(b1:bat[:oid,:date],b2:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b:bat[:oid,:date],v:date) :bat[:oid,:bit]
address CMDbatLEcst
comment "Return B <= V";
pattern <=(v:date,b:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatLEcst
comment "Return V <= B";

command <=(b1:bat[:oid,:daytime],b2:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b:bat[:oid,:daytime],v:daytime) :bat[:oid,:bit]
address CMDbatLEcst
comment "Return B <= V";
pattern <=(v:daytime,b:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatLEcst
comment "Return V <= B";

command <=(b1:bat[:oid,:timestamp],b2:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatLE
comment "Return B1 <= B2";
pattern <=(b:bat[:oid,:timestamp],v:timestamp) :bat[:oid,:bit]
address CMDbatLEcst
comment "Return B <= V";
pattern <=(v:timestamp,b:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatLEcst
comment "Return V <= B";

command >(b1:bat[:oid,:date],b2:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b:bat[:oid,:date],v:date) :bat[:oid,:bit]
address CMDbatGTcst
comment "Return B > V";
pattern >(v:date,b:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatGTcst
comment "Return V > B";

command >(b1:bat[:oid,:daytime],b2:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b:bat[:oid,:daytime],v:daytime) :bat[:oid,:bit]
address CMDbatGTcst
comment "Return B > V";
pattern >(v:daytime,b:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatGTcst
comment "Return V > B";

command >(b1:bat[:oid,:timestamp],b2:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatGT
comment "Return B1 > B2";
pattern >(b:bat[:oid,:timestamp],v:timestamp) :bat[:oid,:bit]
address CMDbatGTcst
comment "Return B > V";
pattern >(v:timestamp,b:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatGTcst
comment "Return V > B";

command >=(b1:bat[:oid,:date],b2:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b:bat[:oid,:date],v:date) :bat[:oid,:bit]
address CMDbatGEcst
comment "Return B >= V";
pattern >=(v:date,b:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatGEcst
comment "Return V >= B";

command >=(b1:bat[:oid,:daytime],b2:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b:bat[:oid,:daytime],v:daytime) :bat[:oid,:bit]
address CMDbatGEcst
comment "Return B >= V";
pattern >=(v:daytime,b:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatGEcst
comment "Return V >= B";

command >=(b1:bat[:oid,:timestamp],b2:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatGE
comment "Return B1 >= B2";
pattern >=(b:bat[:oid,:timestamp],v:timestamp) :bat[:oid,:bit]
address CMDbatGEcst
comment "Return B >= V";
pattern >=(v:timestamp,b:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatGEcst
comment "Return V >= B";

command ==(b1:bat[:oid,:date],b2:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b:bat[:oid,:date],v:date) :bat[:oid,:bit]
address CMDbatEQcst
comment "Return B == V";
pattern ==(v:date,b:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatEQcst
comment "Return V == B";

command ==(b1:bat[:oid,:daytime],b2:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b:bat[:oid,:daytime],v:daytime) :bat[:oid,:bit]
address CMDbatEQcst
comment "Return B == V";
pattern ==(v:daytime,b:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatEQcst
comment "Return V == B";

command ==(b1:bat[:oid,:timestamp],b2:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatEQ
comment "Return B1 == B2";
pattern ==(b:bat[:oid,:timestamp],v:timestamp) :bat[:oid,:bit]
address CMDbatEQcst
comment "Return B == V";
pattern ==(v:timestamp,b:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatEQcst
comment "Return V == B";

command !=(b1:bat[:oid,:date],b2:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b:bat[:oid,:date],v:date) :bat[:oid,:bit]
address CMDbatNEcst
comment "Return B != V";
pattern !=(v:date,b:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatNEcst
comment "Return V != B";

command !=(b1:bat[:oid,:daytime],b2:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b:bat[:oid,:daytime],v:daytime) :bat[:oid,:bit]
address CMDbatNEcst
comment "Return B != V";
pattern !=(v:daytime,b:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatNEcst
comment "Return V != B";

command !=(b1:bat[:oid,:timestamp],b2:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatNE
comment "Return B1 != B2";
pattern !=(b:bat[:oid,:timestamp],v:timestamp) :bat[:oid,:bit]
address CMDbatNEcst
comment "Return B != V";
pattern !=(v:timestamp,b:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatNEcst
comment "Return V != B";

command isnil(b:bat[:oid,:date]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat";

command isnil(b:bat[:oid,:daytime]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat";

command isnil(b:bat[:oid,:timestamp]) :bat[:oid,:bit]
address CMDbatISNIL
comment "Unary check for nil over the tail of the bat";

module batmtime;

command diff(b1:bat[:oid,:date],b2:bat[:oid,:date]) :bat[:oid,:int]
address MTIMEdate_diff_bulk
comment "Difference of two sets of date.";

command diff(b1:bat[:oid,:timestamp],b2:bat[:oid,:timestamp]) :bat[:oid,:lng]
address MTIMEtimestamp_diff_bulk
comment "Difference of two sets of timestamp.";

