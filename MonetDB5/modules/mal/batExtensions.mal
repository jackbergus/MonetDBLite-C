# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2014 MonetDB B.V.
# All Rights Reserved.

pattern bat.new(ht:oid, tt:any_1) :bat[:oid,:any_1]
address CMDBATnew
comment "Creates a new empty transient BAT, with head- and tail-types as indicated.";

pattern bat.new(ht:oid, tt:any_1, size:int) :bat[:oid,:any_1]
address CMDBATnewint
comment "Creates a new BAT with sufficient space.";

pattern bat.new(ht:oid, tt:any_1, size:lng) :bat[:oid,:any_1]
address CMDBATnew
comment "Creates a new BAT and allocate space.";

pattern bat.new(b:bat[:oid,:any_1] ) :bat[:oid,:any_1]
address CMDBATnewDerived;
pattern bat.new(b:bat[:oid,:any_1], size:lng) :bat[:oid,:any_1]
address CMDBATnewDerived;

command bat.new(nme:str):bat[:oid,:any_1]
address CMDBATderivedByName
comment "Localize a bat by name and produce a clone.";

pattern bat.partition(b:bat[:oid,:any_1]):bat[:oid,:any_1]...
address CMDBATpartition
comment "Create a serie of slices over the BAT argument. The BUNs are distributed evenly.";

pattern bat.partition(b:bat[:oid,:any_1], pieces:int, n:int):bat[:oid,:any_1]
address CMDBATpartition2
comment "Create the n-th slice over the BAT broken into severral pieces.";

command bat.imprints(b:bat[:oid,:bte])
address CMDBATimprints;
command bat.imprints(b:bat[:oid,:sht])
address CMDBATimprints;
command bat.imprints(b:bat[:oid,:int])
address CMDBATimprints;
command bat.imprints(b:bat[:oid,:lng])
address CMDBATimprints;
command bat.imprints(b:bat[:oid,:flt])
address CMDBATimprints;
command bat.imprints(b:bat[:oid,:dbl])
address CMDBATimprints
comment "Check/create an imprint index on the BAT";

command bat.imprintsize(b:bat[:oid,:bte]):lng
address CMDBATimprintsize;
command bat.imprintsize(b:bat[:oid,:sht]):lng
address CMDBATimprintsize;
command bat.imprintsize(b:bat[:oid,:int]):lng
address CMDBATimprintsize;
command bat.imprintsize(b:bat[:oid,:lng]):lng
address CMDBATimprintsize;
command bat.imprintsize(b:bat[:oid,:flt]):lng
address CMDBATimprintsize;
command bat.imprintsize(b:bat[:oid,:dbl]):lng
address CMDBATimprintsize
comment "Return the size of the imprints";

command bat.bloom(b:bat[:oid,:bte]):bat[:oid,:bit]
address CMDBATbloom;
command bat.bloom(b:bat[:oid,:sht]):bat[:oid,:bit]
address CMDBATbloom;
command bat.bloom(b:bat[:oid,:int]):bat[:oid,:bit]
address CMDBATbloom;
command bat.bloom(b:bat[:oid,:lng]):bat[:oid,:bit]
address CMDBATbloom;
command bat.bloom(b:bat[:oid,:flt]):bat[:oid,:bit]
address CMDBATbloom;
command bat.bloom(b:bat[:oid,:dbl]):bat[:oid,:bit]
address CMDBATbloom
comment "Create a Bloom filter on the BAT";

command bat.bloomselect(b:bat[:oid,:bte], cand:bat[:oid,:oid], bloom:bat[:oid,:bit]):bat[:oid,:oid]
address CMDBLOOMselect;
command bat.bloomselect(b:bat[:oid,:sht], cand:bat[:oid,:oid], bloom:bat[:oid,:bit]):bat[:oid,:oid]
address CMDBLOOMselect;
command bat.bloomselect(b:bat[:oid,:int], cand:bat[:oid,:oid], bloom:bat[:oid,:bit]):bat[:oid,:oid]
address CMDBLOOMselect;
command bat.bloomselect(b:bat[:oid,:lng], cand:bat[:oid,:oid], bloom:bat[:oid,:bit]):bat[:oid,:oid]
address CMDBLOOMselect;
command bat.bloomselect(b:bat[:oid,:flt], cand:bat[:oid,:oid], bloom:bat[:oid,:bit]):bat[:oid,:oid]
address CMDBLOOMselect;
command bat.bloomselect(b:bat[:oid,:dbl], cand:bat[:oid,:oid], bloom:bat[:oid,:bit]):bat[:oid,:oid]
address CMDBLOOMselect
comment "Select using a Bloom filter";

