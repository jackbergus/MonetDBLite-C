# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2013 MonetDB B.V.
# All Rights Reserved.

module group;

pattern group.subgroup(b:bat[:oid,:any]...)(ref:bat[:oid,:oid], grp:bat[:oid,:any], ext:bat[:oid,:any])
address GROUPmulticolumn
comment "Old-fashioned derivation of a group index over multiple columns. A first oid- argument is interpreted as a candidate list";

pattern group.id(cand:bat[:oid,:oid],b:bat[:oid,:any]...) :bat[:oid,:oid]
address GROUPid
comment "Derive a group id for all n-tuples. A first oid-argument is interpreted as a candidate list or NULL";

pattern group.id(b:bat[:oid,:any]...) :bat[:oid,:oid]
address GROUPid
comment "Derive a group id for all n-tuples.";

pattern group.count(cand:bat[:oid,:oid],b:bat[:oid,:any]...) (cnt:bat[:oid,:wrd], b:bat[:oid,:any]...)
address GROUPcountTable
comment "Derive a group table for all n-tuples and their count. The first argument is a candidate list";

pattern group.count(cand:bat[:oid,:oid],b:bat[:oid,:any]...) (cnt:bat[:oid,:wrd], gid:bat[:oid,:oid])
address GROUPcount
comment "Derive a group id for all n-tuples and their count. The first argument is a candidate list";

pattern group.max(cand:bat[:oid,:oid],target:bat[:oid,:any_1],b:bat[:oid,:any]...) (mx:bat[:oid,:any_1], o:bat[:oid,:any]...)
address GROUPmaxTable
comment "Derive the group table of all n-tuples and determine their maximum value. The first argument is a candidate list";

pattern group.max(cand:bat[:oid,:oid],target:bat[:oid,:any_1],b:bat[:oid,:any]...) (mx:bat[:oid,:any_1], gid:bat[:oid,:oid])
address GROUPmax
comment "Derive the group id of all n-tuples and determine their maximum value. The first argument is a candidate list";

pattern group.min(cand:bat[:oid,:oid],target:bat[:oid,:any_1],b:bat[:oid,:any]...) (mi:bat[:oid,:any_1], o:bat[:oid,:any]...)
address GROUPminTable
comment "Derive the grop id of all n-tuples and determine their minimum value. The first argument is a candidate list";

pattern group.min(cand:bat[:oid,:oid], target:bat[:oid,:any_1],b:bat[:oid,:any]...) (mi:bat[:oid,:any_1], gid:bat[:oid,:oid])
address GROUPmin
comment "Derive the group id of all n-tuples and determin their minimum value. The first argument is a candidate list";

pattern group.avg(cand:bat[:oid,:oid], target:bat[:oid,:any_1],b:bat[:oid,:any_2]...) (a:bat[:oid,:dbl])
address GROUPavg
comment "Derive the group id of all n-tuples and determine their average value. The first argument is a candidate list";

pattern group.avg(cand:bat[:oid,:oid], target:bat[:oid,:any_1],b:bat[:oid,:any_2]...) (a:bat[:oid,:dbl], o:bat[:oid,:any]...)
address GROUPavgTable
comment "Derive the group id of all n-tuples and determine their average value. The first argument is a candidate list";
