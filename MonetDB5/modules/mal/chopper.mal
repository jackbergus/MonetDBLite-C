# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2011 MonetDB B.V.
# All Rights Reserved.


command bat.newIterator(b:bat[:any_1,:any_2], size:lng)
	(:lng,:bat[:any_1,:any_2])
address CHPnewChunkIterator
comment "Create an iterator with fixed granule size.
	  The result is a view.";

command bat.hasMoreElements(b:bat[:any_1,:any_2], size:lng)
	(:lng, :bat[:any_1,:any_2])
address CHPhasMoreElements
comment "Produce the next chunk for processing.";

pattern bat.newIterator(b:bat[:any_1,:any_2]) (:lng, h:any_1, t:any_2)
address CHPbunIterator
comment "Process the buns one by one extracted from a void table.";
pattern bat.newIterator(b:bat[:any_1,:bat]) (:lng, h:any_1, t:any_2)
address CHPbunIterator
comment "Process the buns one by one extracted from a void table.";

pattern bat.hasMoreElements(b:bat[:any_1,:any_2]) (:lng, h:any_1, t:any_2)
address CHPbunHasMoreElements;
pattern bat.hasMoreElements(b:bat[:oid,:any_2]) (:lng, h:oid, t:any_2)
address CHPbunHasMoreElements
comment "Produce the next bun for processing.";
pattern bat.hasMoreElements(b:bat[:any_1,:bat]) (:lng, h:any_1, t:any_2)
address CHPbunHasMoreElements
comment "Produce the next bun for processing.";

# @-
# The head and tail values can also be extracted using the cursor.
# It points to the first bun in the chunk under consideration.
# It is often more effective due to use the iterator with automatic
# extraction of head and tail value; the overhead involved is much less.
pattern bat.getHead(b:bat[:any_1,:any],i:lng):any_1
address CHPgetHead
comment "return the BUN head value using the cursor.";

pattern bat.getTail(b:bat[:any_2,:any_1],i:lng):any_1
address CHPgetTail
comment "return the BUN tail value using the cursor.";
