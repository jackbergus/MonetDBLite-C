module const;

pattern open():void
address CSTopen
comment "Locate and open the constant box.";
pattern close():void
address CSTclose
comment "Close the constant box.";
pattern destroy():void
address CSTdestroy
comment "Destroy the box.";
pattern take(name:str):any_1 
address CSTtake
comment "Take a variable out of the box.";
pattern deposit(name:str,val:any_1) :void 		
address CSTdeposit
comment "Add a variable to the box.";

pattern releaseAll():void 
address CSTreleaseAll
comment "Release all variables in the box.";
pattern release(name:str) :void 		
address CSTrelease
comment "Release a constant value.";
pattern release(name:any_1):void 
address CSTrelease
comment "Release a constant value.";
pattern toString(name:any_1):str 
address CSTtoString
comment "Get the string representation of an element in the box.";
pattern discard(name:any_1) :void 		
address CSTdiscard
comment "Release the const from the box.";
pattern newIterator()(:lng,:str)
address CSTnewIterator
comment "Locate next element in the box.";
pattern hasMoreElements()(:lng,:str)
address CSThasMoreElements
comment "Locate next element in the box.";

pattern prelude():void 
address CSTprelude
comment "Initialize the const box";

command epiloque():void 
address CSTepilogue
comment "Cleanup the const box";

const.prelude();
