function gen(n:int):bat[:oid,:int];
	r:=bat.new(:oid,:int);
	barrier (go,i):=language.newRange(0:int);
                bat.append(r,i);
                redo (go,i):= language.nextElement(1:int,n);
        exit (go,i);
	return r;
end gen;

r:=gen(3000);

s:=bat.getSpaceUsed(r);
io.print(s);

ra:= bpm.deposit("myr",r);
bpm.dump();

r1:=bpm.take(ra,1);
rs:=algebra.uselect(r1,nil:int,250);
bpm.adapt(r1,nil:int,250,rs);


function myselect(b:bat[:oid,:int],low:int,hgh:int):bat[:oid,:oid];
barrier p:= bpm.newIterator(b,low,hgh);
	rs:=algebra.uselect(p,low,hgh);
	bpm.adapt(p,low,hgh,rs);
	redo p:= bpm.hasMoreElements(b,low,hgh);
exit p;
return rs;	
end myselect;

bpm.partition(ra,450);

myselect(ra,300,500);
bpm.dump();
