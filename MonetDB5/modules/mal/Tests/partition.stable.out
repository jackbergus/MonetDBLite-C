stdout of test 'partition` in directory 'monetdb5/modules/mal` itself:


# 16:35:42 >  
# 16:35:42 >   mserver5 "--config=/ufs/mk/monet5//Linux/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=sql_logs"   --set mapi_open=true --set xrpc_open=true --set mapi_port=34622 --set xrpc_port=40864 --set monet_prompt= --trace  --dbname=mTests_src_modules_mal  partition.mal
# 16:35:42 >  

# MonetDB server v5.11.0, based on kernel v1.29.0
# Serving database 'mTests_src_modules_mal', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.da.cwi.nl:35410/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-26774/.s.monetdb.35410
# MonetDB/GIS module loaded
# Start processing logs sql/sql_logs version 52200
# Start reading the write-ahead log 'sql_logs/sql/log.4'
# Finished reading the write-ahead log 'sql_logs/sql/log.4'
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/R   module loaded

Ready.

# 09:46:29 >  
# 09:46:29 >  "mclient" "-lmal" "-ftest" "-Eutf-8" "--host=/var/tmp/mtest-26774" "--port=35410"
# 09:46:29 >  

function user.tst():void;               	#[0]  0 
    b:bat[:oid,:int] := bat.new(:oid,:int);	#[1] CMDBATnew 1 <- 2 3 
    bat.append(b:bat[:oid,:int],1:int); 	#[2] BKCappend_val_wrap 4 <- 1 5 
    bat.append(b:bat[:oid,:int],2:int); 	#[3] BKCappend_val_wrap 6 <- 1 7 
    bat.append(b:bat[:oid,:int],3:int); 	#[4] BKCappend_val_wrap 8 <- 1 9 
    bat.append(b:bat[:oid,:int],4:int); 	#[5] BKCappend_val_wrap 10 <- 1 11 
    bat.append(b:bat[:oid,:int],5:int); 	#[6] BKCappend_val_wrap 12 <- 1 13 
    c:bat[:oid,:int] := bat.partition(b:bat[:oid,:int],2:int,0:int);	#[7] CMDBATpartition2 14 <- 1 7 15 
    io.print(c:bat[:oid,:int]);         	#[8] IOprint_val 16 <- 14 
    d:bat[:oid,:int] := bat.partition(b:bat[:oid,:int],2:int,1:int);	#[9] CMDBATpartition2 17 <- 1 7 5 
    io.print(d:bat[:oid,:int]);         	#[10] IOprint_val 18 <- 17 
    (b1:bat[:oid,:int],b2:bat[:oid,:int]) := bat.partition(b:bat[:oid,:int]);	#[11] CMDBATpartition 19 20 <- 1 
    io.print(b1:bat[:oid,:int]);        	#[12] IOprint_val 21 <- 19 
    io.print(b2:bat[:oid,:int]);        	#[13] IOprint_val 22 <- 20 
    b3:bat[:oid,:int] := bat.partition(b:bat[:oid,:int]);	#[14] CMDBATpartition 23 <- 1 
    io.print(b3:bat[:oid,:int]);        	#[15] IOprint_val 24 <- 23 
# an error should be produced           	#[16]  25 <- 
    e:bat[:oid,:int] := bat.partition(b:bat[:oid,:int],2:int,-1:int);	#[17] CMDBATpartition2 26 <- 1 7 27 
    io.print(e:bat[:oid,:int]);         	#[18] IOprint_val 28 <- 26 
end user.tst;                           	#[19]  
#--------------------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#--------------------------#
[ 2@0,	3  ]
[ 3@0,	4  ]
[ 4@0,	5  ]
#--------------------------#
# t	t  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
[ 2@0,	  3	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#--------------------------#
[ 3@0,	4  ]
[ 4@0,	5  ]
#--------------------------#
# t	t  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
[ 2@0,	  3	  ]
[ 3@0,	  4	  ]
[ 4@0,	  5	  ]

# 16:35:42 >  
# 16:35:42 >  Done.
# 16:35:42 >  

