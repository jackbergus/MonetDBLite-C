#testing the BAT partition manager
R := bat.new(:oid,:int);
bat.append(R,1);
bat.append(R,3);
bat.append(R,5);
bat.append(R,7);
bat.append(R,11);

function user.pr(Ra:bat[:any_1,:any_2]):void;
barrier Rp:= bpm.newIterator(Ra);
	io.print(Rp);
	redo Rp:= bpm.hasMoreElements(Ra);
exit Rp;
end pr;

function user.printrange(Ra:bat[:any_1,:any_2],l:any_2,h:any_2):void;
barrier Rp:= bpm.newIterator(Ra,l,h);
	io.print(Rp);
	redo Rp:= bpm.hasMoreElements(Ra,l,h);
exit Rp;
end printrange;

# add the stuff to the BPM and dump it
Ra:= bpm.deposit("myR",R);
user.pr(Ra);

V := bat.new(:oid,:int);
bat.append(V,2);
bat.append(V,4);
bat.append(V,8);
bat.append(V,10);
io.print(V);

io.print("Range partition using sorted BAT of ranges");
bpm.rangePartition(Ra,V);
#bpm.dump(Ra);
user.pr(Ra);

io.print("Iterate on range 3-9");
user.printrange(Ra,3,9);

io.print("Iterate on range <6");
user.printrange(Ra,nil:int,6);

io.print("Take 3rd partition ");
Rx:bat[:oid,:int] := bpm.take("myR");
Rp := bpm.take(Rx,3);
io.print(Rp);

#bpm.discard(Ra);
