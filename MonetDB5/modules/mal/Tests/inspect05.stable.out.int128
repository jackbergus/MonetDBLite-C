stdout of test 'inspect05` in directory 'monetdb5/modules/mal` itself:


# 18:15:32 >  
# 18:15:32 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "gdk_dbfarm=/home/sjoerd/Monet-devel/var/MonetDB" "--set" "mapi_open=true" "--set" "mapi_port=37682" "--set" "monet_prompt=" "--trace" "--forcemito" "--set" "mal_listing=2" "--dbname=mTests_modules_mal" "inspect05.mal"
# 18:15:32 >  

# MonetDB 5 server v11.10.0 (hg id: d6a857b5d084)
# This is an unreleased version
# Serving database 'mTests_modules_mal', using 2 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 3.861 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://koolmees.mullender.nl:37682/
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded
function user.main():void;
#Illustrate the modules loaded after start 
    m := inspect.getModule();
    m0 := algebra.subselect(m,nil:bat[:oid,:oid],"bat","bat",true,true,false);
# limit the list 
    m1 := algebra.leftfetchjoin(m0,m);
    k := inspect.getKind();
    k0 := algebra.leftfetchjoin(m0,k);
    f := inspect.getFunction();
    f0 := algebra.leftfetchjoin(m0,f);
    s := inspect.getSignatures();
    s0 := algebra.leftfetchjoin(m0,s);
    a := inspect.getAddresses();
    a0 := algebra.leftfetchjoin(m0,a);
    (fv,forder) := algebra.subsort(f0,false,true);
    io.print(fv,k0,m1,s0,a0);
end user.main;
#--------------------------#
# t	t	t	t	t  # name
# str	str	str	str	str  # type
#--------------------------#
[ 0@0,	"append",	"command",	"bat",	"(i:bat[:oid,:any_1],u:any_1):bat[:oid,:any_1] ",	"BKCappend_val_wrap;"  ]
[ 1@0,	"append",	"command",	"bat",	"(tt:int,heapfile:str):bat[:oid,:any_1] ",	"BKCattach;"  ]
[ 2@0,	"append",	"command",	"bat",	"(i:bat[:oid,:any_1],u:any_1,force:bit):bat[:oid,:any_1] ",	"BKCappend_val_force_wrap;"  ]
[ 3@0,	"append",	"command",	"bat",	"(i:bat[:oid,:any_1],u:bat[:oid,:any_1],force:bit):bat[:oid,:any_1] ",	"BKCappend_force_wrap;"  ]
[ 4@0,	"attach",	"command",	"bat",	"(i:bat[:oid,:any_1],u:bat[:oid,:any_1]):bat[:oid,:any_1] ",	"BKCappend_wrap;"  ]
[ 5@0,	"delete",	"command",	"bat",	"(sz:wrd):bat[:oid,:oid] ",	"BKCdensebat;"  ]
[ 6@0,	"delete",	"command",	"bat",	"(b:bat[:oid,:any_1]):bat[:oid,:any_1] ",	"BKCdelete_all;"  ]
[ 7@0,	"delete",	"command",	"bat",	"(b:bat[:oid,:any_1],h:oid):bat[:oid,:any_1] ",	"BKCdelete;"  ]
[ 8@0,	"densebat",	"command",	"bat",	"(b:bat[:oid,:any_1],src:bat[:oid,:any_1]):bat[:oid,:any_1] ",	"BKCdelete_bat_bun;"  ]
[ 9@0,	"getAccess",	"command",	"bat",	"(b:bat[:oid,:any_1]):str ",	"BKCgetBBPname;"  ]
[ 10@0,	"getCapacity",	"command",	"bat",	"(b:bat[:oid,:any_1]):oid ",	"BKCgetSequenceBase;"  ]
[ 11@0,	"getColumnType",	"command",	"bat",	"(b:bat[:oid,:any_1]):str ",	"BKCgetAccess;"  ]
[ 12@0,	"getName",	"command",	"bat",	"(bid:bat[:oid,:any_1]):str ",	"BKCgetRole;"  ]
[ 13@0,	"getRole",	"command",	"bat",	"(b:bat[:oid,:any_1]):str ",	"BKCgetColumnType;"  ]
[ 14@0,	"getSequenceBase",	"command",	"bat",	"(b:bat[:oid,:any_1]):lng ",	"BKCgetCapacity;"  ]
[ 15@0,	"getSize",	"command",	"bat",	"(b:bat[:oid,:any_1]):lng ",	"BKCgetSize;"  ]
[ 16@0,	"imprints",	"command",	"bat",	"(b:bat[:oid,:hge]):lng ",	"CMDBATimprintsize;"  ]
[ 17@0,	"imprints",	"command",	"bat",	"(b:bat[:oid,:hge]):void ",	"CMDBATimprints;"  ]
[ 18@0,	"imprints",	"command",	"bat",	"(b:bat[:oid,:dbl]):lng ",	"CMDBATimprintsize;"  ]
[ 19@0,	"imprints",	"command",	"bat",	"(b:bat[:oid,:flt]):lng ",	"CMDBATimprintsize;"  ]
[ 20@0,	"imprints",	"command",	"bat",	"(b:bat[:oid,:lng]):lng ",	"CMDBATimprintsize;"  ]
[ 21@0,	"imprints",	"command",	"bat",	"(b:bat[:oid,:int]):lng ",	"CMDBATimprintsize;"  ]
[ 22@0,	"imprints",	"command",	"bat",	"(b:bat[:oid,:sht]):lng ",	"CMDBATimprintsize;"  ]
[ 23@0,	"imprintsize",	"command",	"bat",	"(b:bat[:oid,:bte]):lng ",	"CMDBATimprintsize;"  ]
[ 24@0,	"imprintsize",	"command",	"bat",	"(b:bat[:oid,:dbl]):void ",	"CMDBATimprints;"  ]
[ 25@0,	"imprintsize",	"command",	"bat",	"(b:bat[:oid,:flt]):void ",	"CMDBATimprints;"  ]
[ 26@0,	"imprintsize",	"command",	"bat",	"(b:bat[:oid,:lng]):void ",	"CMDBATimprints;"  ]
[ 27@0,	"imprintsize",	"command",	"bat",	"(b:bat[:oid,:int]):void ",	"CMDBATimprints;"  ]
[ 28@0,	"imprintsize",	"command",	"bat",	"(b:bat[:oid,:sht]):void ",	"CMDBATimprints;"  ]
[ 29@0,	"imprintsize",	"command",	"bat",	"(b:bat[:oid,:bte]):void ",	"CMDBATimprints;"  ]
[ 30@0,	"info",	"command",	"bat",	"(a:bat[:oid,:oid],b:bat[:oid,:oid]):bat[:oid,:oid] ",	"BKCintersectcand;"  ]
[ 31@0,	"intersectcand",	"command",	"bat",	"(b1:bat[:oid,:any_1],b2:bat[:oid,:any_2]):bit ",	"BKCisSynced;"  ]
[ 32@0,	"isPersistent",	"command",	"bat",	"(b:bat[:oid,:any_1]):bit ",	"BKCisPersistent;"  ]
[ 33@0,	"isSorted",	"command",	"bat",	"(b:bat[:oid,:any_1]):bit ",	"BKCisTransient;"  ]
[ 34@0,	"isSortedReverse",	"command",	"bat",	"(b:bat[:oid,:any_1]):bit ",	"BKCisSortedReverse;"  ]
[ 35@0,	"isSynced",	"command",	"bat",	"(b:bat[:oid,:any_1]):bit ",	"BKCisSorted;"  ]
[ 36@0,	"isTransient",	"command",	"bat",	"(b:bat[:oid,:any_1]):bit ",	"BKCgetKey;"  ]
[ 37@0,	"isaKey",	"command",	"bat",	"(b:bat[:oid,:any_1]) (X_2:bat[:oid,:str],X_3:bat[:oid,:str]) ",	"BKCinfo;"  ]
[ 38@0,	"mergecand",	"command",	"bat",	"(a:bat[:oid,:oid],b:bat[:oid,:oid]):bat[:oid,:oid] ",	"BKCmergecand;"  ]
[ 39@0,	"mirror",	"command",	"bat",	"(b:bat[:any_1,:any_2]):bat[:any_1,:any_1] ",	"BKCmirror;"  ]
[ 40@0,	"new",	"command",	"bat",	"(nme:str):bat[:oid,:any_1] ",	"CMDBATderivedByName;"  ]
[ 41@0,	"new",	"pattern",	"bat",	"(b:bat[:oid,:any_1],size:lng):bat[:oid,:any_1] ",	"CMDBATnewDerived;"  ]
[ 42@0,	"new",	"pattern",	"bat",	"(b:bat[:oid,:any_1]):bat[:oid,:any_1] ",	"CMDBATnewDerived;"  ]
[ 43@0,	"new",	"pattern",	"bat",	"(ht:oid,tt:any_1,size:lng):bat[:oid,:any_1] ",	"CMDBATnew_persistent;"  ]
[ 44@0,	"new",	"pattern",	"bat",	"(ht:oid,tt:any_1,size:int):bat[:oid,:any_1] ",	"CMDBATnew_persistent;"  ]
[ 45@0,	"new",	"pattern",	"bat",	"(ht:oid,tt:any_1):bat[:oid,:any_1] ",	"CMDBATnew_persistent;"  ]
[ 46@0,	"new_persistent",	"pattern",	"bat",	"(ht:oid,tt:any_1,size:lng):bat[:oid,:any_1] ",	"CMDBATnew;"  ]
[ 47@0,	"new_persistent",	"pattern",	"bat",	"(ht:oid,tt:any_1,size:int):bat[:oid,:any_1] ",	"CMDBATnew;"  ]
[ 48@0,	"new_persistent",	"pattern",	"bat",	"(ht:oid,tt:any_1):bat[:oid,:any_1] ",	"CMDBATnew;"  ]
[ 49@0,	"partition",	"pattern",	"bat",	"(b:bat[:oid,:any_1],pieces:int,n:int):bat[:oid,:any_1] ",	"CMDBATpartition2;"  ]
[ 50@0,	"partition",	"pattern",	"bat",	"(b:bat[:oid,:any_1]):bat[:oid,:any_1]... ",	"CMDBATpartition;"  ]
[ 51@0,	"replace",	"command",	"bat",	"(b:bat[:oid,:any_1],del:bat[:oid,:oid]):bat[:oid,:oid] ",	"BKCreuseBATmap;"  ]
[ 52@0,	"replace",	"command",	"bat",	"(b:bat[:oid,:any_1],del:bat[:oid,:oid]):bat[:oid,:any_1] ",	"BKCreuseBAT;"  ]
[ 53@0,	"replace",	"command",	"bat",	"(b:bat[:oid,:any_1],rid:bat[:oid,:oid],val:bat[:oid,:any_1],force:bit):bat[:oid,:any_1] ",	"BKCbat_inplace_force;"  ]
[ 54@0,	"replace",	"command",	"bat",	"(b:bat[:oid,:any_1],rid:bat[:oid,:oid],val:bat[:oid,:any_1]):bat[:oid,:any_1] ",	"BKCbat_inplace;"  ]
[ 55@0,	"reuse",	"command",	"bat",	"(b:bat[:oid,:any_1],h:oid,t:any_1,force:bit):bat[:oid,:any_1] ",	"BKCbun_inplace_force;"  ]
[ 56@0,	"reuseMap",	"command",	"bat",	"(b:bat[:oid,:any_1],h:oid,t:any_1):bat[:oid,:any_1] ",	"BKCbun_inplace;"  ]
[ 57@0,	"save",	"pattern",	"bat",	"(val:any_1):bat[:oid,:any_1] ",	"CMDBATsingle;"  ]
[ 58@0,	"save",	"command",	"bat",	"(b:bat[:oid,:any_1]):bit ",	"BKCsetImprints;"  ]
[ 59@0,	"setAccess",	"command",	"bat",	"(b:bat[:oid,:any_1]):bit ",	"BKCsetHash;"  ]
[ 60@0,	"setColumn",	"command",	"bat",	"(nme:str):bit ",	"BKCsave;"  ]
[ 61@0,	"setColumn",	"command",	"bat",	"(nme:bat[:oid,:any_1]):void ",	"BKCsave2;"  ]
[ 62@0,	"setHash",	"command",	"bat",	"(b:bat[:oid,:any_1]):void ",	"BKCsetPersistent;"  ]
[ 63@0,	"setImprints",	"command",	"bat",	"(b:bat[:oid,:any_1]):void ",	"BKCsetTransient;"  ]
[ 64@0,	"setKey",	"command",	"bat",	"(b:bat[:oid,:any_1],h:str,t:str):void ",	"BKCsetColumns;"  ]
[ 65@0,	"setName",	"command",	"bat",	"(b:bat[:oid,:any_1],t:str):void ",	"BKCsetColumn;"  ]
[ 66@0,	"setPersistent",	"command",	"bat",	"(b:bat[:oid,:any_1],h:str,t:str):void ",	"BKCsetRole;"  ]
[ 67@0,	"setRole",	"command",	"bat",	"(b:bat[:oid,:any_1],s:str):void ",	"BKCsetName;"  ]
[ 68@0,	"setTransient",	"command",	"bat",	"(b:bat[:oid,:any_1],mode:str):bat[:oid,:any_1] ",	"BKCsetAccess;"  ]
[ 69@0,	"single",	"command",	"bat",	"(b:bat[:oid,:any_1],mode:bit):bat[:oid,:any_1] ",	"BKCsetkey;"  ]

# 08:55:30 >  
# 08:55:30 >  Done.
# 08:55:30 >  

