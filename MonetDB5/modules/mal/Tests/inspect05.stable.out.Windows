stdout of test 'inspect05` in directory 'modules/mal` itself:


# 08:55:29 >  
# 08:55:29 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=4 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//dbfarm" --set "sql_logdir=/ufs/mk/monet5//dblogs/logs/sql"  --set mapi_open=true --set xrpc_open=true --set mapi_port=36941 --set xrpc_port=42461 --set monet_prompt= --trace  --dbname=mTests_src_modules_mal  inspect05.mal
# 08:55:29 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_modules_mal', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2008 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:37931/
function user.main():void;
#Illustrate the modules loaded after start 
    k := inspect.getKind();
    m := inspect.getModule();
    f := inspect.getFunction();
    f1 := bat.reverse(f);
    f2 := algebra.ssort(f1);
    fs := bat.reverse(f2);
    s := inspect.getSignatures();
    a := inspect.getAddresses();
    io.table(1,fs,k,m,s,a);
end main;
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# h				symbol		symbol		 symbol																	 symbol							  # name
# str				str		str		str																	str							  # type
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
[ "!=",				  "command",	  "batcalc",		  "(l:bat[:oid,:str],r:str):bat[:oid,:bit] ",																												  "STRbatNotEqualCst;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(l:bat[:oid,:str],r:bat[:oid,:str]):bat[:oid,:bit] ",																										  "STRbatNotEqual;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",																								  "MTIMEaccum_timestamp_cst_NEQ;"		  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",																								  "MTIMEaccum_timestamp_NEQ_cst;"		  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",																						  "MTIMEaccum_timestamp_NEQ;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",																										  "MTIMEbat_timestamp_cst_NEQ;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",																										  "MTIMEbat_timestamp_NEQ_cst;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",																									  "MTIMEbat_timestamp_NEQ;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(l:bat[:oid,:timestamp],r:bat[:oid,:timestamp]):bat[:oid,:bit] ",																									  "MTIMEbat_timestamp_NEQ;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",																								  "MTIMEaccum_daytime_cst_NEQ;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",																									  "MTIMEaccum_daytime_NEQ_cst;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",																							  "MTIMEaccum_daytime_NEQ;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",																											  "MTIMEbat_daytime_cst_NEQ;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",																											  "MTIMEbat_daytime_NEQ_cst;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",																									  "MTIMEbat_daytime_NEQ;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(l:bat[:oid,:daytime],r:bat[:oid,:daytime]):bat[:oid,:bit] ",																									  "MTIMEbat_daytime_NEQ;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:date],r:date):bat[:void,:bit] ",																									  "MTIMEaccum_date_cst_NEQ;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:oid,:date],r:date):bat[:oid,:bit] ",																									  "MTIMEaccum_date_NEQ_cst;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",																								  "MTIMEaccum_date_NEQ;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(l:bat[:void,:date],r:date):bat[:void,:bit] ",																											  "MTIMEbat_date_cst_NEQ;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(l:bat[:oid,:date],r:date):bat[:oid,:bit] ",																												  "MTIMEbat_date_NEQ_cst;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",																										  "MTIMEbat_date_NEQ;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(l:bat[:oid,:date],r:bat[:oid,:date]):bat[:oid,:bit] ",																										  "MTIMEbat_date_NEQ;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",																									  "CMDaccum_NEQ_cst_oid;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",																									  "CMDaccum_NEQ_oid_cst;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",																											  "CMD_NEQ_cst_oid;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",																											  "CMD_NEQ_oid_cst;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",																							  "CMDaccum_NEQ_oid;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",																										  "CMD_NEQ_oid;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",																									  "CMDaccum_NEQ_cst_flt;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",																									  "CMDaccum_NEQ_flt_cst;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",																											  "CMD_NEQ_cst_flt;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",																											  "CMD_NEQ_flt_cst;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",																							  "CMDaccum_NEQ_flt;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",																										  "CMD_NEQ_flt;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																									  "CMDaccum_NEQ_cst_dbl;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",																									  "CMDaccum_NEQ_dbl_cst;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																											  "CMD_NEQ_cst_dbl;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",																											  "CMD_NEQ_dbl_cst;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																							  "CMDaccum_NEQ_dbl;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																										  "CMD_NEQ_dbl;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",																									  "CMDaccum_NEQ_cst_lng;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",																									  "CMDaccum_NEQ_lng_cst;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",																											  "CMD_NEQ_cst_lng;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",																											  "CMD_NEQ_lng_cst;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",																							  "CMDaccum_NEQ_lng;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",																										  "CMD_NEQ_lng;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																									  "CMDaccum_NEQ_cst_wrd;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",																									  "CMDaccum_NEQ_wrd_cst;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																											  "CMD_NEQ_cst_wrd;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",																											  "CMD_NEQ_wrd_cst;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																							  "CMDaccum_NEQ_wrd;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																										  "CMD_NEQ_wrd;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",																									  "CMDaccum_NEQ_cst_int;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",																									  "CMDaccum_NEQ_int_cst;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",																											  "CMD_NEQ_cst_int;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",																											  "CMD_NEQ_int_cst;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",																							  "CMDaccum_NEQ_int;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",																										  "CMD_NEQ_int;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",																									  "CMDaccum_NEQ_cst_sht;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",																									  "CMDaccum_NEQ_sht_cst;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",																											  "CMD_NEQ_cst_sht;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",																											  "CMD_NEQ_sht_cst;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",																							  "CMDaccum_NEQ_sht;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",																										  "CMD_NEQ_sht;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",																									  "CMDaccum_NEQ_cst_bte;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",																									  "CMDaccum_NEQ_bte_cst;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",																											  "CMD_NEQ_cst_bte;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",																											  "CMD_NEQ_bte_cst;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",																							  "CMDaccum_NEQ_bte;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",																										  "CMD_NEQ_bte;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",																									  "CMDaccum_NEQ_cst_bit;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",																									  "CMDaccum_NEQ_bit_cst;"			  ]
[ "!=",				  "command",	  "batcalc",		  "(cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",																											  "CMD_NEQ_cst_bit;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",																											  "CMD_NEQ_bit_cst;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",																							  "CMDaccum_NEQ_bit;"				  ]
[ "!=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",																										  "CMD_NEQ_bit;"				  ]
[ "!=",				  "command",	  "inet",		  "(v:inet,w:inet):bit ",																														  "INET_comp_NEQ;"				  ]
[ "!=",				  "command",	  "date",		  "(v:date,w:date):bit ",																														  "MTIMEdate_NEQ;"				  ]
[ "!=",				  "command",	  "timestamp",		  "(v:timestamp,w:timestamp):bit ",																													  "MTIMEtimestamp_NEQ;"				  ]
[ "!=",				  "command",	  "daytime",		  "(v:daytime,w:daytime):bit ",																														  "MTIMEdaytime_NEQ;"				  ]
[ "!=",				  "command",	  "calc",		  "(v:inet,w:inet):bit ",																														  "INET_comp_NEQ;"				  ]
[ "!=",				  "command",	  "calc",		  "(v:timestamp,w:timestamp):bit ",																													  "MTIMEtimestamp_NEQ;"				  ]
[ "!=",				  "command",	  "calc",		  "(v:daytime,w:daytime):bit ",																														  "MTIMEdaytime_NEQ;"				  ]
[ "!=",				  "command",	  "calc",		  "(v:date,w:date):bit ",																														  "MTIMEdate_NEQ;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:str,right:str):bit ",																														  "CALCcompNEQstrstr;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:lng,right:lng):bit ",																														  "CALCcompNEQlnglng;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:lng,right:int):bit ",																														  "CALCcompNEQlngint;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:lng,right:sht):bit ",																														  "CALCcompNEQlngsht;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:wrd,right:bte):bit ",																														  "CALCcompNEQwrdbte;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:int,right:lng):bit ",																														  "CALCcompNEQintlng;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:int,right:int):bit ",																														  "CALCcompNEQintint;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:int,right:sht):bit ",																														  "CALCcompNEQintsht;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:int,right:bte):bit ",																														  "CALCcompNEQintbte;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:int,right:wrd):bit ",																														  "CALCcompNEQintwrd;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:wrd,right:lng):bit ",																														  "CALCcompNEQwrdlng;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:wrd,right:int):bit ",																														  "CALCcompNEQwrdint;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:wrd,right:wrd):bit ",																														  "CALCcompNEQwrdwrd;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:wrd,right:sht):bit ",																														  "CALCcompNEQwrdsht;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:wrd,right:bte):bit ",																														  "CALCcompNEQwrdbte;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:sht,right:lng):bit ",																														  "CALCcompNEQshtlng;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:sht,right:int):bit ",																														  "CALCcompNEQshtint;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:sht,right:wrd):bit ",																														  "CALCcompNEQshtwrd;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:sht,right:sht):bit ",																														  "CALCcompNEQshtsht;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:sht,right:bte):bit ",																														  "CALCcompNEQshtbte;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:bte,right:lng):bit ",																														  "CALCcompNEQbtelng;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:bte,right:wrd):bit ",																														  "CALCcompNEQbtewrd;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:bte,right:int):bit ",																														  "CALCcompNEQbteint;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:bte,right:sht):bit ",																														  "CALCcompNEQbtesht;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:bte,right:bte):bit ",																														  "CALCcompNEQbtebte;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:bit,right:lng):bit ",																														  "CALCcompNEQbitlng;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:bit,right:int):bit ",																														  "CALCcompNEQbitint;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:bit,right:sht):bit ",																														  "CALCcompNEQbitsht;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:bit,right:bte):bit ",																														  "CALCcompNEQbitbte;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:bit,right:bit):bit ",																														  "CALCcompNEQbitbit;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:dbl,right:dbl):bit ",																														  "CALCcompNEQdbldbl;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:flt,right:dbl):bit ",																														  "CALCcompNEQfltdbl;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:flt,right:flt):bit ",																														  "CALCcompNEQfltflt;"				  ]
[ "!=",				  "command",	  "calc",		  "(left:oid,right:oid):bit ",																														  "CALCcompNEQoidoid;"				  ]
[ "#cmp",		  "command",	  "mbr",		  "():int ",										  "mbrCOMP;"				  ]
[ "#cmp",		  "command",	  "wkb",		  "():int ",										  "wkbCOMP;"				  ]
[ "#convert",			  "command",	  "blob",		  "():void ",																																  "BLOBconvert;"				  ]
[ "#del",		  "command",	  "wkb",		  "():int ",										  "wkbDEL;"				  ]
[ "#del",			  "command",	  "pcre",		  "():void ",																																  "pcre_del;"					  ]
[ "#del",			  "command",	  "blob",		  "():void ",																																  "BLOBdel;"					  ]
[ "#fromstr",			  "command",	  "mbr",		  "():mbr ",																																  "mbrFROMSTR;"					  ]
[ "#fromstr",		  "command",	  "wkb",		  "():wkb ",										  "wkbFROMSTR;"				  ]
[ "#fromstr",			  "command",	  "pcre",		  "():void ",																																  "pcre_fromstr;"				  ]
[ "#fromstr",			  "command",	  "xml",		  "():xml ",																																  "XMLfromString;"				  ]
[ "#fromstr",			  "command",	  "identifier",		  "():void ",																																  "IDfromString;"				  ]
[ "#fromstr",			  "command",	  "inet",		  "():void ",																																  "INETfromString;"				  ]
[ "#fromstr",			  "command",	  "date",		  "():date ",																																  "date_fromstr;"				  ]
[ "#fromstr",			  "command",	  "timezone",		  "():timezone ",																															  "tzone_fromstr;"				  ]
[ "#fromstr",			  "command",	  "zrule",		  "():zrule ",																																  "rule_fromstr;"				  ]
[ "#fromstr",			  "command",	  "timestamp",		  "():timestamp ",																															  "timestamp_fromstr;"				  ]
[ "#fromstr",			  "command",	  "daytime",		  "():daytime ",																															  "daytime_tz_fromstr;"				  ]
[ "#fromstr",			  "command",	  "url",		  "():url ",																																  "URLfromString;"				  ]
[ "#fromstr",			  "command",	  "color",		  "():color ",																																  "color_fromstr;"				  ]
[ "#fromstr",			  "command",	  "blob",		  "():void ",																																  "BLOBfromstr;"				  ]
[ "#fromstr",			  "command",	  "sqlblob",		  "():void ",																																  "SQLBLOBfromstr;"				  ]
[ "#hash",			  "command",	  "mbr",		  "():int ",																																  "mbrHASH;"					  ]
[ "#hash",		  "command",	  "wkb",		  "():int ",										  "wkbHASH;"				  ]
[ "#hash",			  "command",	  "pcre",		  "():void ",																																  "pcre_hash;"					  ]
[ "#hash",			  "command",	  "blob",		  "():void ",																																  "BLOBhash;"					  ]
[ "#heap",			  "command",	  "wkb",		  "():int ",																																  "wkbHEAP;"					  ]
[ "#heap",			  "command",	  "pcre",		  "():void ",																																  "pcre_heap;"					  ]
[ "#heap",			  "command",	  "blob",		  "():void ",																																  "BLOBheap;"					  ]
[ "#length",		  "command",	  "wkb",		  "():int ",										  "wkbLENGTH;"				  ]
[ "#length",			  "command",	  "pcre",		  "():void ",																																  "pcre_length;"				  ]
[ "#length",			  "command",	  "blob",		  "():void ",																																  "BLOBlength;"					  ]
[ "#nequal",			  "command",	  "pcre",		  "():void ",																																  "pcre_nequal;"				  ]
[ "#nequal",			  "command",	  "blob",		  "():void ",																																  "BLOBnequal;"					  ]
[ "#null",			  "command",	  "mbr",		  "():int ",																																  "mbrNULL;"					  ]
[ "#null",		  "command",	  "wkb",		  "():int ",										  "wkbNULL;"				  ]
[ "#null",			  "command",	  "pcre",		  "():void ",																																  "pcre_null;"					  ]
[ "#null",			  "command",	  "blob",		  "():void ",																																  "BLOBnull;"					  ]
[ "#put",		  "command",	  "wkb",		  "():int ",										  "wkbPUT;"				  ]
[ "#put",			  "command",	  "pcre",		  "():void ",																																  "pcre_put;"					  ]
[ "#put",			  "command",	  "blob",		  "():void ",																																  "BLOBput;"					  ]
[ "#read",			  "command",	  "mbr",		  "():void ",																																  "mbrREAD;"					  ]
[ "#read",		  "command",	  "wkb",		  "():void ",										  "wkbREAD;"				  ]
[ "#read",			  "command",	  "blob",		  "():void ",																																  "BLOBread;"					  ]
[ "#tostr",			  "command",	  "mbr",		  "():str ",																																  "mbrTOSTR;"					  ]
[ "#tostr",		  "command",	  "wkb",		  "():str ",										  "wkbTOSTR;"				  ]
[ "#tostr",			  "command",	  "pcre",		  "():void ",																																  "pcre_tostr;"					  ]
[ "#tostr",			  "command",	  "xml",		  "():str ",																																  "XMLtoString;"				  ]
[ "#tostr",			  "command",	  "identifier",		  "():void ",																																  "IDtoString;"					  ]
[ "#tostr",			  "command",	  "inet",		  "():void ",																																  "INETtoString;"				  ]
[ "#tostr",			  "command",	  "date",		  "():str ",																																  "date_tostr;"					  ]
[ "#tostr",			  "command",	  "timezone",		  "():str ",																																  "tzone_tostr;"				  ]
[ "#tostr",			  "command",	  "zrule",		  "():str ",																																  "rule_tostr;"					  ]
[ "#tostr",			  "command",	  "timestamp",		  "():str ",																																  "timestamp_tostr;"				  ]
[ "#tostr",			  "command",	  "daytime",		  "():str ",																																  "daytime_tostr;"				  ]
[ "#tostr",			  "command",	  "url",		  "():str ",																																  "URLtoString;"				  ]
[ "#tostr",			  "command",	  "color",		  "():str ",																																  "color_tostr;"				  ]
[ "#tostr",			  "command",	  "blob",		  "():void ",																																  "BLOBtostr;"					  ]
[ "#tostr",			  "command",	  "sqlblob",		  "():void ",																																  "SQLBLOBtostr;"				  ]
[ "#write",			  "command",	  "mbr",		  "():void ",																																  "mbrWRITE;"					  ]
[ "#write",		  "command",	  "wkb",		  "():void ",										  "wkbWRITE;"				  ]
[ "#write",			  "command",	  "blob",		  "():void ",																																  "BLOBwrite;"					  ]
[ "%",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumMODcst_lng_lng_lng;"		  ]
[ "%",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumMODcst2_lng_lng_lng;"		  ]
[ "%",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumMOD_lng_lng_lng;"			  ]
[ "%",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatMOD_lng_lng_lng;"			  ]
[ "%",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstMODbat_lng_lng_lng;"			  ]
[ "%",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",																												  "CMDbatMODcst_lng_lng_lng;"			  ]
[ "%",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumMODcst_wrd_wrd_wrd;"		  ]
[ "%",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumMODcst2_wrd_wrd_wrd;"		  ]
[ "%",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumMOD_wrd_wrd_wrd;"			  ]
[ "%",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",																										  "CMDbatMOD_wrd_wrd_wrd;"			  ]
[ "%",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",																												  "CMDcstMODbat_wrd_wrd_wrd;"			  ]
[ "%",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:wrd] ",																												  "CMDbatMODcst_wrd_wrd_wrd;"			  ]
[ "%",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumMODcst_int_int_int;"		  ]
[ "%",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumMODcst2_int_int_int;"		  ]
[ "%",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumMOD_int_int_int;"			  ]
[ "%",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",																										  "CMDbatMOD_int_int_int;"			  ]
[ "%",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",																												  "CMDcstMODbat_int_int_int;"			  ]
[ "%",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",																												  "CMDbatMODcst_int_int_int;"			  ]
[ "%",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumMODcst_sht_sht_sht;"		  ]
[ "%",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumMODcst2_sht_sht_sht;"		  ]
[ "%",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",																								  "CMDbataccumMOD_sht_sht_sht;"			  ]
[ "%",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",																										  "CMDbatMOD_sht_sht_sht;"			  ]
[ "%",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",																												  "CMDcstMODbat_sht_sht_sht;"			  ]
[ "%",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",																												  "CMDbatMODcst_sht_sht_sht;"			  ]
[ "%",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte,bflag:bit,cflag:bit):bat[:oid,:bte] ",																									  "CMDbataccumMODcst_bte_bte_bte;"		  ]
[ "%",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:bte] ",																									  "CMDbataccumMODcst2_bte_bte_bte;"		  ]
[ "%",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:bte] ",																								  "CMDbataccumMOD_bte_bte_bte;"			  ]
[ "%",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:bte] ",																										  "CMDbatMOD_bte_bte_bte;"			  ]
[ "%",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:bte] ",																												  "CMDcstMODbat_bte_bte_bte;"			  ]
[ "%",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:bte] ",																												  "CMDbatMODcst_bte_bte_bte;"			  ]
[ "%",				  "command",	  "calc",		  "(left:lng,right:dbl):dbl ",																														  "CALCbinarycheckMODlngdbl;"			  ]
[ "%",				  "command",	  "calc",		  "(left:lng,right:flt):flt ",																														  "CALCbinarycheckMODlngflt;"			  ]
[ "%",				  "command",	  "calc",		  "(left:lng,right:lng):lng ",																														  "CALCbinarycheckMODlnglng;"			  ]
[ "%",				  "command",	  "calc",		  "(left:lng,right:wrd):wrd ",																														  "CALCbinarycheckMODlngwrd;"			  ]
[ "%",				  "command",	  "calc",		  "(left:lng,right:int):int ",																														  "CALCbinarycheckMODlngint;"			  ]
[ "%",				  "command",	  "calc",		  "(left:lng,right:sht):sht ",																														  "CALCbinarycheckMODlngsht;"			  ]
[ "%",				  "command",	  "calc",		  "(left:lng,right:bte):bte ",																														  "CALCbinarycheckMODlngbte;"			  ]
[ "%",				  "command",	  "calc",		  "(left:dbl,right:dbl):dbl ",																														  "CALCbinarycheckMODdbldbl;"			  ]
[ "%",				  "command",	  "calc",		  "(left:dbl,right:flt):dbl ",																														  "CALCbinarycheckMODdblflt;"			  ]
[ "%",				  "command",	  "calc",		  "(left:dbl,right:lng):dbl ",																														  "CALCbinarycheckMODdbllng;"			  ]
[ "%",				  "command",	  "calc",		  "(left:dbl,right:wrd):dbl ",																														  "CALCbinarycheckMODdblwrd;"			  ]
[ "%",				  "command",	  "calc",		  "(left:dbl,right:int):dbl ",																														  "CALCbinarycheckMODdblint;"			  ]
[ "%",				  "command",	  "calc",		  "(left:dbl,right:sht):dbl ",																														  "CALCbinarycheckMODdblsht;"			  ]
[ "%",				  "command",	  "calc",		  "(left:dbl,right:bte):dbl ",																														  "CALCbinarycheckMODdblbte;"			  ]
[ "%",				  "command",	  "calc",		  "(left:flt,right:dbl):dbl ",																														  "CALCbinarycheckMODfltdbl;"			  ]
[ "%",				  "command",	  "calc",		  "(left:flt,right:flt):flt ",																														  "CALCbinarycheckMODfltflt;"			  ]
[ "%",				  "command",	  "calc",		  "(left:flt,right:lng):flt ",																														  "CALCbinarycheckMODfltlng;"			  ]
[ "%",				  "command",	  "calc",		  "(left:flt,right:wrd):flt ",																														  "CALCbinarycheckMODfltwrd;"			  ]
[ "%",				  "command",	  "calc",		  "(left:flt,right:int):flt ",																														  "CALCbinarycheckMODfltint;"			  ]
[ "%",				  "command",	  "calc",		  "(left:flt,right:sht):flt ",																														  "CALCbinarycheckMODfltsht;"			  ]
[ "%",				  "command",	  "calc",		  "(left:flt,right:bte):flt ",																														  "CALCbinarycheckMODfltbte;"			  ]
[ "%",				  "command",	  "calc",		  "(left:wrd,right:dbl):dbl ",																														  "CALCbinarycheckMODwrddbl;"			  ]
[ "%",				  "command",	  "calc",		  "(left:wrd,right:flt):flt ",																														  "CALCbinarycheckMODwrdflt;"			  ]
[ "%",				  "command",	  "calc",		  "(left:wrd,right:lng):lng ",																														  "CALCbinarycheckMODwrdlng;"			  ]
[ "%",				  "command",	  "calc",		  "(left:wrd,right:wrd):wrd ",																														  "CALCbinarycheckMODwrdwrd;"			  ]
[ "%",				  "command",	  "calc",		  "(left:wrd,right:int):int ",																														  "CALCbinarycheckMODwrdint;"			  ]
[ "%",				  "command",	  "calc",		  "(left:wrd,right:sht):sht ",																														  "CALCbinarycheckMODwrdsht;"			  ]
[ "%",				  "command",	  "calc",		  "(left:wrd,right:bte):bte ",																														  "CALCbinarycheckMODwrdbte;"			  ]
[ "%",				  "command",	  "calc",		  "(left:int,right:dbl):dbl ",																														  "CALCbinarycheckMODintdbl;"			  ]
[ "%",				  "command",	  "calc",		  "(left:int,right:flt):flt ",																														  "CALCbinarycheckMODintflt;"			  ]
[ "%",				  "command",	  "calc",		  "(left:int,right:lng):lng ",																														  "CALCbinarycheckMODintlng;"			  ]
[ "%",				  "command",	  "calc",		  "(left:int,right:wrd):wrd ",																														  "CALCbinarycheckMODintwrd;"			  ]
[ "%",				  "command",	  "calc",		  "(left:int,right:int):int ",																														  "CALCbinarycheckMODintint;"			  ]
[ "%",				  "command",	  "calc",		  "(left:int,right:sht):sht ",																														  "CALCbinarycheckMODintsht;"			  ]
[ "%",				  "command",	  "calc",		  "(left:int,right:bte):bte ",																														  "CALCbinarycheckMODintbte;"			  ]
[ "%",				  "command",	  "calc",		  "(left:sht,right:dbl):dbl ",																														  "CALCbinarycheckMODshtdbl;"			  ]
[ "%",				  "command",	  "calc",		  "(left:sht,right:flt):flt ",																														  "CALCbinarycheckMODshtflt;"			  ]
[ "%",				  "command",	  "calc",		  "(left:sht,right:lng):lng ",																														  "CALCbinarycheckMODshtlng;"			  ]
[ "%",				  "command",	  "calc",		  "(left:sht,right:wrd):wrd ",																														  "CALCbinarycheckMODshtwrd;"			  ]
[ "%",				  "command",	  "calc",		  "(left:sht,right:int):int ",																														  "CALCbinarycheckMODshtint;"			  ]
[ "%",				  "command",	  "calc",		  "(left:sht,right:sht):sht ",																														  "CALCbinarycheckMODshtsht;"			  ]
[ "%",				  "command",	  "calc",		  "(left:sht,right:bte):bte ",																														  "CALCbinarycheckMODshtbte;"			  ]
[ "%",				  "command",	  "calc",		  "(left:bte,right:dbl):dbl ",																														  "CALCbinarycheckMODbtedbl;"			  ]
[ "%",				  "command",	  "calc",		  "(left:bte,right:flt):flt ",																														  "CALCbinarycheckMODbteflt;"			  ]
[ "%",				  "command",	  "calc",		  "(left:bte,right:lng):lng ",																														  "CALCbinarycheckMODbtelng;"			  ]
[ "%",				  "command",	  "calc",		  "(left:bte,right:wrd):wrd ",																														  "CALCbinarycheckMODbtewrd;"			  ]
[ "%",				  "command",	  "calc",		  "(left:bte,right:int):int ",																														  "CALCbinarycheckMODbteint;"			  ]
[ "%",				  "command",	  "calc",		  "(left:bte,right:sht):sht ",																														  "CALCbinarycheckMODbtesht;"			  ]
[ "%",				  "command",	  "calc",		  "(left:bte,right:bte):bte ",																														  "CALCbinarycheckMODbtebte;"			  ]
[ "%",				  "command",	  "calc",		  "(left:oid,right:oid):oid ",																														  "CALCbinarycheckMODoidoid;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],cst:flt,bflag:bit,cflag:bit):bat[:oid,:flt] ",																									  "CMDbataccumMULcst_flt_flt_flt;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:oid,:flt],cflag:bit,bflag:bit):bat[:oid,:flt] ",																									  "CMDbataccumMULcst2_flt_flt_flt;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],c:bat[:oid,:flt],aflag:bit,bflag:bit):bat[:oid,:flt] ",																								  "CMDbataccumMUL_flt_flt_flt;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",																										  "CMDbatMUL_flt_flt_flt;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:oid,:flt]):bat[:oid,:flt] ",																												  "CMDcstMULbat_flt_flt_flt;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],cst:flt):bat[:oid,:flt] ",																												  "CMDbatMULcst_flt_flt_flt;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],cst:dbl,bflag:bit,cflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumMULcst_dbl_dbl_dbl;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:dbl,b:bat[:oid,:dbl],cflag:bit,bflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumMULcst2_dbl_dbl_dbl;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],c:bat[:oid,:dbl],aflag:bit,bflag:bit):bat[:oid,:dbl] ",																								  "CMDbataccumMUL_dbl_dbl_dbl;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",																										  "CMDbatMUL_dbl_dbl_dbl;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",																												  "CMDcstMULbat_dbl_dbl_dbl;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],cst:dbl):bat[:oid,:dbl] ",																												  "CMDbatMULcst_dbl_dbl_dbl;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],cst:flt,bflag:bit,cflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumMULcst_dbl_flt_dbl;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:dbl,b:bat[:oid,:flt],cflag:bit,bflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumMULcst2_dbl_flt_dbl;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],c:bat[:oid,:flt],aflag:bit,bflag:bit):bat[:oid,:dbl] ",																								  "CMDbataccumMUL_dbl_flt_dbl;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],c:bat[:oid,:flt]):bat[:oid,:dbl] ",																										  "CMDbatMUL_dbl_flt_dbl;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:dbl,b:bat[:oid,:flt]):bat[:oid,:dbl] ",																												  "CMDcstMULbat_dbl_flt_dbl;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],cst:flt):bat[:oid,:dbl] ",																												  "CMDbatMULcst_dbl_flt_dbl;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],cst:dbl,bflag:bit,cflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumMULcst_flt_dbl_dbl;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:oid,:dbl],cflag:bit,bflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumMULcst2_flt_dbl_dbl;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],c:bat[:oid,:dbl],aflag:bit,bflag:bit):bat[:oid,:dbl] ",																								  "CMDbataccumMUL_flt_dbl_dbl;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",																										  "CMDbatMUL_flt_dbl_dbl;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",																												  "CMDcstMULbat_flt_dbl_dbl;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],cst:dbl):bat[:oid,:dbl] ",																												  "CMDbatMULcst_flt_dbl_dbl;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:dbl] ",																										  "CMDbatMUL_flt_flt_dbl;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:oid,:flt]):bat[:oid,:dbl] ",																												  "CMDcstMULbat_flt_flt_dbl;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],cst:flt):bat[:oid,:dbl] ",																												  "CMDbatMULcst_flt_flt_dbl;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte,bflag:bit,cflag:bit):bat[:oid,:bte] ",																									  "CMDbataccumMULcst_bte_bte_bte;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:bte] ",																									  "CMDbataccumMULcst2_bte_bte_bte;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:bte] ",																								  "CMDbataccumMUL_bte_bte_bte;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:bte] ",																										  "CMDbatMUL_bte_bte_bte;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:bte] ",																												  "CMDcstMULbat_bte_bte_bte;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:bte] ",																												  "CMDbatMULcst_bte_bte_bte;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumMULcst_sht_sht_sht;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumMULcst2_sht_sht_sht;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",																								  "CMDbataccumMUL_sht_sht_sht;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",																										  "CMDbatMUL_sht_sht_sht;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",																												  "CMDcstMULbat_sht_sht_sht;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",																												  "CMDbatMULcst_sht_sht_sht;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:bte,bflag:bit,cflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumMULcst_sht_bte_sht;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumMULcst2_sht_bte_sht;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:sht] ",																								  "CMDbataccumMUL_sht_bte_sht;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:sht] ",																										  "CMDbatMUL_sht_bte_sht;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:sht] ",																												  "CMDcstMULbat_sht_bte_sht;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:sht] ",																												  "CMDbatMULcst_sht_bte_sht;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumMULcst_bte_sht_sht;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumMULcst2_bte_sht_sht;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",																								  "CMDbataccumMUL_bte_sht_sht;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:sht] ",																										  "CMDbatMUL_bte_sht_sht;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:sht] ",																												  "CMDcstMULbat_bte_sht_sht;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:sht] ",																												  "CMDbatMULcst_bte_sht_sht;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:sht] ",																										  "CMDbatMUL_bte_bte_sht;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:sht] ",																												  "CMDcstMULbat_bte_bte_sht;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:sht] ",																												  "CMDbatMULcst_bte_bte_sht;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumMULcst_int_int_int;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumMULcst2_int_int_int;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumMUL_int_int_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",																										  "CMDbatMUL_int_int_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",																												  "CMDcstMULbat_int_int_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",																												  "CMDbatMULcst_int_int_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:sht,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumMULcst_int_sht_int;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumMULcst2_int_sht_int;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumMUL_int_sht_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:int] ",																										  "CMDbatMUL_int_sht_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:int] ",																												  "CMDcstMULbat_int_sht_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:sht):bat[:oid,:int] ",																												  "CMDbatMULcst_int_sht_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:bte,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumMULcst_int_bte_int;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumMULcst2_int_bte_int;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumMUL_int_bte_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:int] ",																										  "CMDbatMUL_int_bte_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:int] ",																												  "CMDcstMULbat_int_bte_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:bte):bat[:oid,:int] ",																												  "CMDbatMULcst_int_bte_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumMULcst_sht_int_int;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumMULcst2_sht_int_int;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumMUL_sht_int_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",																										  "CMDbatMUL_sht_int_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:int] ",																												  "CMDcstMULbat_sht_int_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:int):bat[:oid,:int] ",																												  "CMDbatMULcst_sht_int_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:int] ",																										  "CMDbatMUL_sht_sht_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:int] ",																												  "CMDcstMULbat_sht_sht_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:int] ",																												  "CMDbatMULcst_sht_sht_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:int] ",																										  "CMDbatMUL_sht_bte_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:int] ",																												  "CMDcstMULbat_sht_bte_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:int] ",																												  "CMDbatMULcst_sht_bte_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumMULcst_bte_int_int;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumMULcst2_bte_int_int;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumMUL_bte_int_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:int] ",																										  "CMDbatMUL_bte_int_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:int] ",																												  "CMDcstMULbat_bte_int_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:int):bat[:oid,:int] ",																												  "CMDbatMULcst_bte_int_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:int] ",																										  "CMDbatMUL_bte_sht_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:int] ",																												  "CMDcstMULbat_bte_sht_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:int] ",																												  "CMDbatMULcst_bte_sht_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:int] ",																										  "CMDbatMUL_bte_bte_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:int] ",																												  "CMDcstMULbat_bte_bte_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:int] ",																												  "CMDbatMULcst_bte_bte_int;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumMULcst_wrd_wrd_wrd;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumMULcst2_wrd_wrd_wrd;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumMUL_wrd_wrd_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",																										  "CMDbatMUL_wrd_wrd_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",																												  "CMDcstMULbat_wrd_wrd_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:wrd] ",																												  "CMDbatMULcst_wrd_wrd_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:int,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumMULcst_wrd_int_wrd;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumMULcst2_wrd_int_wrd;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumMUL_wrd_int_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:int]):bat[:oid,:wrd] ",																										  "CMDbatMUL_wrd_int_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] ",																												  "CMDcstMULbat_wrd_int_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:int):bat[:oid,:wrd] ",																												  "CMDbatMULcst_wrd_int_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:sht,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumMULcst_wrd_sht_wrd;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumMULcst2_wrd_sht_wrd;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumMUL_wrd_sht_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:sht]):bat[:oid,:wrd] ",																										  "CMDbatMUL_wrd_sht_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:sht]):bat[:oid,:wrd] ",																												  "CMDcstMULbat_wrd_sht_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:sht):bat[:oid,:wrd] ",																												  "CMDbatMULcst_wrd_sht_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:bte,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumMULcst_wrd_bte_wrd;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumMULcst2_wrd_bte_wrd;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumMUL_wrd_bte_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:bte]):bat[:oid,:wrd] ",																										  "CMDbatMUL_wrd_bte_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:bte]):bat[:oid,:wrd] ",																												  "CMDcstMULbat_wrd_bte_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:bte):bat[:oid,:wrd] ",																												  "CMDbatMULcst_wrd_bte_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumMULcst_int_wrd_wrd;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumMULcst2_int_wrd_wrd;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumMUL_int_wrd_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",																										  "CMDbatMUL_int_wrd_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",																												  "CMDcstMULbat_int_wrd_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:wrd):bat[:oid,:wrd] ",																												  "CMDbatMULcst_int_wrd_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:wrd] ",																										  "CMDbatMUL_int_int_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int]):bat[:oid,:wrd] ",																												  "CMDcstMULbat_int_int_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int):bat[:oid,:wrd] ",																												  "CMDbatMULcst_int_int_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:wrd] ",																										  "CMDbatMUL_int_sht_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:wrd] ",																												  "CMDcstMULbat_int_sht_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:sht):bat[:oid,:wrd] ",																												  "CMDbatMULcst_int_sht_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:wrd] ",																										  "CMDbatMUL_int_bte_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:wrd] ",																												  "CMDcstMULbat_int_bte_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:bte):bat[:oid,:wrd] ",																												  "CMDbatMULcst_int_bte_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumMULcst_sht_wrd_wrd;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumMULcst2_sht_wrd_wrd;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumMUL_sht_wrd_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",																										  "CMDbatMUL_sht_wrd_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",																												  "CMDcstMULbat_sht_wrd_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:wrd):bat[:oid,:wrd] ",																												  "CMDbatMULcst_sht_wrd_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:wrd] ",																										  "CMDbatMUL_sht_int_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:wrd] ",																												  "CMDcstMULbat_sht_int_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:int):bat[:oid,:wrd] ",																												  "CMDbatMULcst_sht_int_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:wrd] ",																										  "CMDbatMUL_sht_sht_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:wrd] ",																												  "CMDcstMULbat_sht_sht_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:wrd] ",																												  "CMDbatMULcst_sht_sht_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:wrd] ",																										  "CMDbatMUL_sht_bte_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:wrd] ",																												  "CMDcstMULbat_sht_bte_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:wrd] ",																												  "CMDbatMULcst_sht_bte_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumMULcst_bte_wrd_wrd;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumMULcst2_bte_wrd_wrd;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumMUL_bte_wrd_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",																										  "CMDbatMUL_bte_wrd_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",																												  "CMDcstMULbat_bte_wrd_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:wrd):bat[:oid,:wrd] ",																												  "CMDbatMULcst_bte_wrd_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:wrd] ",																										  "CMDbatMUL_bte_int_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:wrd] ",																												  "CMDcstMULbat_bte_int_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:int):bat[:oid,:wrd] ",																												  "CMDbatMULcst_bte_int_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:wrd] ",																										  "CMDbatMUL_bte_sht_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:wrd] ",																												  "CMDcstMULbat_bte_sht_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:wrd] ",																												  "CMDbatMULcst_bte_sht_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:wrd] ",																										  "CMDbatMUL_bte_bte_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:wrd] ",																												  "CMDcstMULbat_bte_bte_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:wrd] ",																												  "CMDbatMULcst_bte_bte_wrd;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumMULcst_lng_lng_lng;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumMULcst2_lng_lng_lng;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumMUL_lng_lng_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatMUL_lng_lng_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstMULbat_lng_lng_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",																												  "CMDbatMULcst_lng_lng_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumMULcst_lng_wrd_lng;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumMULcst2_lng_wrd_lng;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumMUL_lng_wrd_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:wrd]):bat[:oid,:lng] ",																										  "CMDbatMUL_lng_wrd_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:wrd]):bat[:oid,:lng] ",																												  "CMDcstMULbat_lng_wrd_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:wrd):bat[:oid,:lng] ",																												  "CMDbatMULcst_lng_wrd_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:int,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumMULcst_lng_int_lng;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumMULcst2_lng_int_lng;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumMUL_lng_int_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",																										  "CMDbatMUL_lng_int_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:int]):bat[:oid,:lng] ",																												  "CMDcstMULbat_lng_int_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:int):bat[:oid,:lng] ",																												  "CMDbatMULcst_lng_int_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:sht,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumMULcst_lng_sht_lng;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumMULcst2_lng_sht_lng;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumMUL_lng_sht_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:sht]):bat[:oid,:lng] ",																										  "CMDbatMUL_lng_sht_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:sht]):bat[:oid,:lng] ",																												  "CMDcstMULbat_lng_sht_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:sht):bat[:oid,:lng] ",																												  "CMDbatMULcst_lng_sht_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:bte,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumMULcst_lng_bte_lng;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumMULcst2_lng_bte_lng;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumMUL_lng_bte_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:bte]):bat[:oid,:lng] ",																										  "CMDbatMUL_lng_bte_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:bte]):bat[:oid,:lng] ",																												  "CMDcstMULbat_lng_bte_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:bte):bat[:oid,:lng] ",																												  "CMDbatMULcst_lng_bte_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumMULcst_wrd_lng_lng;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumMULcst2_wrd_lng_lng;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumMUL_wrd_lng_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatMUL_wrd_lng_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstMULbat_wrd_lng_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:lng):bat[:oid,:lng] ",																												  "CMDbatMULcst_wrd_lng_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:lng] ",																										  "CMDbatMUL_wrd_wrd_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:lng] ",																												  "CMDcstMULbat_wrd_wrd_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:lng] ",																												  "CMDbatMULcst_wrd_wrd_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:int]):bat[:oid,:lng] ",																										  "CMDbatMUL_wrd_int_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:int]):bat[:oid,:lng] ",																												  "CMDcstMULbat_wrd_int_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:int):bat[:oid,:lng] ",																												  "CMDbatMULcst_wrd_int_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:sht]):bat[:oid,:lng] ",																										  "CMDbatMUL_wrd_sht_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:sht]):bat[:oid,:lng] ",																												  "CMDcstMULbat_wrd_sht_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:sht):bat[:oid,:lng] ",																												  "CMDbatMULcst_wrd_sht_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:bte]):bat[:oid,:lng] ",																										  "CMDbatMUL_wrd_bte_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:bte]):bat[:oid,:lng] ",																												  "CMDcstMULbat_wrd_bte_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:bte):bat[:oid,:lng] ",																												  "CMDbatMULcst_wrd_bte_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumMULcst_int_lng_lng;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumMULcst2_int_lng_lng;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumMUL_int_lng_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatMUL_int_lng_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstMULbat_int_lng_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:lng):bat[:oid,:lng] ",																												  "CMDbatMULcst_int_lng_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:wrd]):bat[:oid,:lng] ",																										  "CMDbatMUL_int_wrd_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:wrd]):bat[:oid,:lng] ",																												  "CMDcstMULbat_int_wrd_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:wrd):bat[:oid,:lng] ",																												  "CMDbatMULcst_int_wrd_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:lng] ",																										  "CMDbatMUL_int_int_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int]):bat[:oid,:lng] ",																												  "CMDcstMULbat_int_int_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int):bat[:oid,:lng] ",																												  "CMDbatMULcst_int_int_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:lng] ",																										  "CMDbatMUL_int_sht_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:lng] ",																												  "CMDcstMULbat_int_sht_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:sht):bat[:oid,:lng] ",																												  "CMDbatMULcst_int_sht_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:lng] ",																										  "CMDbatMUL_int_bte_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:lng] ",																												  "CMDcstMULbat_int_bte_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:bte):bat[:oid,:lng] ",																												  "CMDbatMULcst_int_bte_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumMULcst_sht_lng_lng;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumMULcst2_sht_lng_lng;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumMUL_sht_lng_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatMUL_sht_lng_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstMULbat_sht_lng_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:lng):bat[:oid,:lng] ",																												  "CMDbatMULcst_sht_lng_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:wrd]):bat[:oid,:lng] ",																										  "CMDbatMUL_sht_wrd_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:wrd]):bat[:oid,:lng] ",																												  "CMDcstMULbat_sht_wrd_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:wrd):bat[:oid,:lng] ",																												  "CMDbatMULcst_sht_wrd_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:lng] ",																										  "CMDbatMUL_sht_int_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:lng] ",																												  "CMDcstMULbat_sht_int_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:int):bat[:oid,:lng] ",																												  "CMDbatMULcst_sht_int_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:lng] ",																										  "CMDbatMUL_sht_sht_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:lng] ",																												  "CMDcstMULbat_sht_sht_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:lng] ",																												  "CMDbatMULcst_sht_sht_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:lng] ",																										  "CMDbatMUL_sht_bte_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:lng] ",																												  "CMDcstMULbat_sht_bte_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:lng] ",																												  "CMDbatMULcst_sht_bte_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumMULcst_bte_lng_lng;"		  ]
[ "*",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumMULcst2_bte_lng_lng;"		  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumMUL_bte_lng_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatMUL_bte_lng_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstMULbat_bte_lng_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:lng):bat[:oid,:lng] ",																												  "CMDbatMULcst_bte_lng_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:wrd]):bat[:oid,:lng] ",																										  "CMDbatMUL_bte_wrd_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:wrd]):bat[:oid,:lng] ",																												  "CMDcstMULbat_bte_wrd_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:wrd):bat[:oid,:lng] ",																												  "CMDbatMULcst_bte_wrd_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:lng] ",																										  "CMDbatMUL_bte_int_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:lng] ",																												  "CMDcstMULbat_bte_int_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:int):bat[:oid,:lng] ",																												  "CMDbatMULcst_bte_int_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:lng] ",																										  "CMDbatMUL_bte_sht_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:lng] ",																												  "CMDcstMULbat_bte_sht_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:lng] ",																												  "CMDbatMULcst_bte_sht_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:lng] ",																										  "CMDbatMUL_bte_bte_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:lng] ",																												  "CMDcstMULbat_bte_bte_lng;"			  ]
[ "*",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:lng] ",																												  "CMDbatMULcst_bte_bte_lng;"			  ]
[ "*",				  "command",	  "calc",		  "(left:lng,right:dbl):dbl ",																														  "CALCbinaryMULlngdbl;"			  ]
[ "*",				  "command",	  "calc",		  "(left:lng,right:flt):dbl ",																														  "CALCbinaryMULlngflt;"			  ]
[ "*",				  "command",	  "calc",		  "(left:lng,right:lng):lng ",																														  "CALCbinaryMULlnglng;"			  ]
[ "*",				  "command",	  "calc",		  "(left:lng,right:wrd):lng ",																														  "CALCbinaryMULlngwrd;"			  ]
[ "*",				  "command",	  "calc",		  "(left:lng,right:int):lng ",																														  "CALCbinaryMULlngint;"			  ]
[ "*",				  "command",	  "calc",		  "(left:lng,right:sht):lng ",																														  "CALCbinaryMULlngsht;"			  ]
[ "*",				  "command",	  "calc",		  "(left:lng,right:bte):lng ",																														  "CALCbinaryMULlngbte;"			  ]
[ "*",				  "command",	  "calc",		  "(left:dbl,right:dbl):dbl ",																														  "CALCbinaryMULdbldbl;"			  ]
[ "*",				  "command",	  "calc",		  "(left:dbl,right:flt):dbl ",																														  "CALCbinaryMULdblflt;"			  ]
[ "*",				  "command",	  "calc",		  "(left:dbl,right:lng):dbl ",																														  "CALCbinaryMULdbllng;"			  ]
[ "*",				  "command",	  "calc",		  "(left:dbl,right:wrd):dbl ",																														  "CALCbinaryMULdblwrd;"			  ]
[ "*",				  "command",	  "calc",		  "(left:dbl,right:int):dbl ",																														  "CALCbinaryMULdblint;"			  ]
[ "*",				  "command",	  "calc",		  "(left:dbl,right:sht):dbl ",																														  "CALCbinaryMULdblsht;"			  ]
[ "*",				  "command",	  "calc",		  "(left:dbl,right:bte):dbl ",																														  "CALCbinaryMULdblbte;"			  ]
[ "*",				  "command",	  "calc",		  "(left:flt,right:dbl):dbl ",																														  "CALCbinaryMULfltdbl;"			  ]
[ "*",				  "command",	  "calc",		  "(left:flt,right:flt):flt ",																														  "CALCbinaryMULfltflt;"			  ]
[ "*",				  "command",	  "calc",		  "(left:flt,right:lng):flt ",																														  "CALCbinaryMULfltlng;"			  ]
[ "*",				  "command",	  "calc",		  "(left:flt,right:wrd):flt ",																														  "CALCbinaryMULfltwrd;"			  ]
[ "*",				  "command",	  "calc",		  "(left:flt,right:int):flt ",																														  "CALCbinaryMULfltint;"			  ]
[ "*",				  "command",	  "calc",		  "(left:flt,right:sht):flt ",																														  "CALCbinaryMULfltsht;"			  ]
[ "*",				  "command",	  "calc",		  "(left:flt,right:bte):flt ",																														  "CALCbinaryMULfltbte;"			  ]
[ "*",				  "command",	  "calc",		  "(left:wrd,right:dbl):dbl ",																														  "CALCbinaryMULwrddbl;"			  ]
[ "*",				  "command",	  "calc",		  "(left:wrd,right:flt):flt ",																														  "CALCbinaryMULwrdflt;"			  ]
[ "*",				  "command",	  "calc",		  "(left:wrd,right:lng):lng ",																														  "CALCbinaryMULwrdlng;"			  ]
[ "*",				  "command",	  "calc",		  "(left:wrd,right:wrd):wrd ",																														  "CALCbinaryMULwrdwrd;"			  ]
[ "*",				  "command",	  "calc",		  "(left:wrd,right:int):wrd ",																														  "CALCbinaryMULwrdint;"			  ]
[ "*",				  "command",	  "calc",		  "(left:wrd,right:sht):wrd ",																														  "CALCbinaryMULwrdsht;"			  ]
[ "*",				  "command",	  "calc",		  "(left:wrd,right:bte):wrd ",																														  "CALCbinaryMULwrdbte;"			  ]
[ "*",				  "command",	  "calc",		  "(left:int,right:dbl):dbl ",																														  "CALCbinaryMULintdbl;"			  ]
[ "*",				  "command",	  "calc",		  "(left:int,right:flt):flt ",																														  "CALCbinaryMULintflt;"			  ]
[ "*",				  "command",	  "calc",		  "(left:int,right:lng):lng ",																														  "CALCbinaryMULintlng;"			  ]
[ "*",				  "command",	  "calc",		  "(left:int,right:wrd):wrd ",																														  "CALCbinaryMULintwrd;"			  ]
[ "*",				  "command",	  "calc",		  "(left:int,right:int):int ",																														  "CALCbinaryMULintint;"			  ]
[ "*",				  "command",	  "calc",		  "(left:int,right:sht):int ",																														  "CALCbinaryMULintsht;"			  ]
[ "*",				  "command",	  "calc",		  "(left:int,right:bte):int ",																														  "CALCbinaryMULintbte;"			  ]
[ "*",				  "command",	  "calc",		  "(left:sht,right:dbl):dbl ",																														  "CALCbinaryMULshtdbl;"			  ]
[ "*",				  "command",	  "calc",		  "(left:sht,right:flt):flt ",																														  "CALCbinaryMULshtflt;"			  ]
[ "*",				  "command",	  "calc",		  "(left:sht,right:lng):lng ",																														  "CALCbinaryMULshtlng;"			  ]
[ "*",				  "command",	  "calc",		  "(left:sht,right:wrd):wrd ",																														  "CALCbinaryMULshtwrd;"			  ]
[ "*",				  "command",	  "calc",		  "(left:sht,right:int):int ",																														  "CALCbinaryMULshtint;"			  ]
[ "*",				  "command",	  "calc",		  "(left:sht,right:sht):sht ",																														  "CALCbinaryMULshtsht;"			  ]
[ "*",				  "command",	  "calc",		  "(left:sht,right:bte):sht ",																														  "CALCbinaryMULshtbte;"			  ]
[ "*",				  "command",	  "calc",		  "(left:bte,right:dbl):dbl ",																														  "CALCbinaryMULbtedbl;"			  ]
[ "*",				  "command",	  "calc",		  "(left:bte,right:flt):flt ",																														  "CALCbinaryMULbteflt;"			  ]
[ "*",				  "command",	  "calc",		  "(left:bte,right:lng):lng ",																														  "CALCbinaryMULbtelng;"			  ]
[ "*",				  "command",	  "calc",		  "(left:bte,right:wrd):wrd ",																														  "CALCbinaryMULbtewrd;"			  ]
[ "*",				  "command",	  "calc",		  "(left:bte,right:int):int ",																														  "CALCbinaryMULbteint;"			  ]
[ "*",				  "command",	  "calc",		  "(left:bte,right:sht):sht ",																														  "CALCbinaryMULbtesht;"			  ]
[ "*",				  "command",	  "calc",		  "(left:bte,right:bte):bte ",																														  "CALCbinaryMULbtebte;"			  ]
[ "*",				  "command",	  "calc",		  "(left:oid,right:oid):oid ",																														  "CALCbinaryMULoidoid;"			  ]
[ "+",				  "command",	  "batcalc",		  "(l:str,r:bat[:oid,:str]):bat[:oid,:str] ",																												  "STRcstConcatbat;"				  ]
[ "+",				  "command",	  "batcalc",		  "(l:bat[:oid,:str],r:str):bat[:oid,:str] ",																												  "STRbatConcatcst;"				  ]
[ "+",				  "command",	  "batcalc",		  "(l:bat[:oid,:str],r:bat[:oid,:str]):bat[:oid,:str] ",																										  "STRbatConcat;"				  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],cst:flt,bflag:bit,cflag:bit):bat[:oid,:flt] ",																									  "CMDbataccumADDcst_flt_flt_flt;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:oid,:flt],cflag:bit,bflag:bit):bat[:oid,:flt] ",																									  "CMDbataccumADDcst2_flt_flt_flt;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],c:bat[:oid,:flt],aflag:bit,bflag:bit):bat[:oid,:flt] ",																								  "CMDbataccumADD_flt_flt_flt;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",																										  "CMDbatADD_flt_flt_flt;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:oid,:flt]):bat[:oid,:flt] ",																												  "CMDcstADDbat_flt_flt_flt;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],cst:flt):bat[:oid,:flt] ",																												  "CMDbatADDcst_flt_flt_flt;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],cst:dbl,bflag:bit,cflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumADDcst_dbl_dbl_dbl;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:dbl,b:bat[:oid,:dbl],cflag:bit,bflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumADDcst2_dbl_dbl_dbl;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],c:bat[:oid,:dbl],aflag:bit,bflag:bit):bat[:oid,:dbl] ",																								  "CMDbataccumADD_dbl_dbl_dbl;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",																										  "CMDbatADD_dbl_dbl_dbl;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",																												  "CMDcstADDbat_dbl_dbl_dbl;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],cst:dbl):bat[:oid,:dbl] ",																												  "CMDbatADDcst_dbl_dbl_dbl;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],cst:flt,bflag:bit,cflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumADDcst_dbl_flt_dbl;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:dbl,b:bat[:oid,:flt],cflag:bit,bflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumADDcst2_dbl_flt_dbl;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],c:bat[:oid,:flt],aflag:bit,bflag:bit):bat[:oid,:dbl] ",																								  "CMDbataccumADD_dbl_flt_dbl;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],c:bat[:oid,:flt]):bat[:oid,:dbl] ",																										  "CMDbatADD_dbl_flt_dbl;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:dbl,b:bat[:oid,:flt]):bat[:oid,:dbl] ",																												  "CMDcstADDbat_dbl_flt_dbl;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],cst:flt):bat[:oid,:dbl] ",																												  "CMDbatADDcst_dbl_flt_dbl;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],cst:dbl,bflag:bit,cflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumADDcst_flt_dbl_dbl;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:oid,:dbl],cflag:bit,bflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumADDcst2_flt_dbl_dbl;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],c:bat[:oid,:dbl],aflag:bit,bflag:bit):bat[:oid,:dbl] ",																								  "CMDbataccumADD_flt_dbl_dbl;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",																										  "CMDbatADD_flt_dbl_dbl;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",																												  "CMDcstADDbat_flt_dbl_dbl;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],cst:dbl):bat[:oid,:dbl] ",																												  "CMDbatADDcst_flt_dbl_dbl;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:dbl] ",																										  "CMDbatADD_flt_flt_dbl;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:oid,:flt]):bat[:oid,:dbl] ",																												  "CMDcstADDbat_flt_flt_dbl;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],cst:flt):bat[:oid,:dbl] ",																												  "CMDbatADDcst_flt_flt_dbl;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte,bflag:bit,cflag:bit):bat[:oid,:bte] ",																									  "CMDbataccumADDcst_bte_bte_bte;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:bte] ",																									  "CMDbataccumADDcst2_bte_bte_bte;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:bte] ",																								  "CMDbataccumADD_bte_bte_bte;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:bte] ",																										  "CMDbatADD_bte_bte_bte;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:bte] ",																												  "CMDcstADDbat_bte_bte_bte;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:bte] ",																												  "CMDbatADDcst_bte_bte_bte;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumADDcst_sht_sht_sht;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumADDcst2_sht_sht_sht;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",																								  "CMDbataccumADD_sht_sht_sht;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",																										  "CMDbatADD_sht_sht_sht;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",																												  "CMDcstADDbat_sht_sht_sht;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",																												  "CMDbatADDcst_sht_sht_sht;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:bte,bflag:bit,cflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumADDcst_sht_bte_sht;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumADDcst2_sht_bte_sht;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:sht] ",																								  "CMDbataccumADD_sht_bte_sht;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:sht] ",																										  "CMDbatADD_sht_bte_sht;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:sht] ",																												  "CMDcstADDbat_sht_bte_sht;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:sht] ",																												  "CMDbatADDcst_sht_bte_sht;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumADDcst_bte_sht_sht;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumADDcst2_bte_sht_sht;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",																								  "CMDbataccumADD_bte_sht_sht;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:sht] ",																										  "CMDbatADD_bte_sht_sht;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:sht] ",																												  "CMDcstADDbat_bte_sht_sht;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:sht] ",																												  "CMDbatADDcst_bte_sht_sht;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:sht] ",																										  "CMDbatADD_bte_bte_sht;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:sht] ",																												  "CMDcstADDbat_bte_bte_sht;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:sht] ",																												  "CMDbatADDcst_bte_bte_sht;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumADDcst_int_int_int;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumADDcst2_int_int_int;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumADD_int_int_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",																										  "CMDbatADD_int_int_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",																												  "CMDcstADDbat_int_int_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",																												  "CMDbatADDcst_int_int_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:sht,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumADDcst_int_sht_int;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumADDcst2_int_sht_int;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumADD_int_sht_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:int] ",																										  "CMDbatADD_int_sht_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:int] ",																												  "CMDcstADDbat_int_sht_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:sht):bat[:oid,:int] ",																												  "CMDbatADDcst_int_sht_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:bte,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumADDcst_int_bte_int;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumADDcst2_int_bte_int;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumADD_int_bte_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:int] ",																										  "CMDbatADD_int_bte_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:int] ",																												  "CMDcstADDbat_int_bte_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:bte):bat[:oid,:int] ",																												  "CMDbatADDcst_int_bte_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumADDcst_sht_int_int;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumADDcst2_sht_int_int;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumADD_sht_int_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",																										  "CMDbatADD_sht_int_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:int] ",																												  "CMDcstADDbat_sht_int_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:int):bat[:oid,:int] ",																												  "CMDbatADDcst_sht_int_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:int] ",																										  "CMDbatADD_sht_sht_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:int] ",																												  "CMDcstADDbat_sht_sht_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:int] ",																												  "CMDbatADDcst_sht_sht_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:int] ",																										  "CMDbatADD_sht_bte_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:int] ",																												  "CMDcstADDbat_sht_bte_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:int] ",																												  "CMDbatADDcst_sht_bte_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumADDcst_bte_int_int;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumADDcst2_bte_int_int;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumADD_bte_int_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:int] ",																										  "CMDbatADD_bte_int_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:int] ",																												  "CMDcstADDbat_bte_int_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:int):bat[:oid,:int] ",																												  "CMDbatADDcst_bte_int_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:int] ",																										  "CMDbatADD_bte_sht_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:int] ",																												  "CMDcstADDbat_bte_sht_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:int] ",																												  "CMDbatADDcst_bte_sht_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:int] ",																										  "CMDbatADD_bte_bte_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:int] ",																												  "CMDcstADDbat_bte_bte_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:int] ",																												  "CMDbatADDcst_bte_bte_int;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumADDcst_wrd_wrd_wrd;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumADDcst2_wrd_wrd_wrd;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumADD_wrd_wrd_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",																										  "CMDbatADD_wrd_wrd_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",																												  "CMDcstADDbat_wrd_wrd_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:wrd] ",																												  "CMDbatADDcst_wrd_wrd_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:int,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumADDcst_wrd_int_wrd;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumADDcst2_wrd_int_wrd;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumADD_wrd_int_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:int]):bat[:oid,:wrd] ",																										  "CMDbatADD_wrd_int_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] ",																												  "CMDcstADDbat_wrd_int_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:int):bat[:oid,:wrd] ",																												  "CMDbatADDcst_wrd_int_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:sht,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumADDcst_wrd_sht_wrd;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumADDcst2_wrd_sht_wrd;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumADD_wrd_sht_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:sht]):bat[:oid,:wrd] ",																										  "CMDbatADD_wrd_sht_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:sht]):bat[:oid,:wrd] ",																												  "CMDcstADDbat_wrd_sht_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:sht):bat[:oid,:wrd] ",																												  "CMDbatADDcst_wrd_sht_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:bte,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumADDcst_wrd_bte_wrd;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumADDcst2_wrd_bte_wrd;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumADD_wrd_bte_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:bte]):bat[:oid,:wrd] ",																										  "CMDbatADD_wrd_bte_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:bte]):bat[:oid,:wrd] ",																												  "CMDcstADDbat_wrd_bte_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:bte):bat[:oid,:wrd] ",																												  "CMDbatADDcst_wrd_bte_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumADDcst_int_wrd_wrd;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumADDcst2_int_wrd_wrd;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumADD_int_wrd_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",																										  "CMDbatADD_int_wrd_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",																												  "CMDcstADDbat_int_wrd_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:wrd):bat[:oid,:wrd] ",																												  "CMDbatADDcst_int_wrd_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:wrd] ",																										  "CMDbatADD_int_int_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int]):bat[:oid,:wrd] ",																												  "CMDcstADDbat_int_int_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int):bat[:oid,:wrd] ",																												  "CMDbatADDcst_int_int_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:wrd] ",																										  "CMDbatADD_int_sht_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:wrd] ",																												  "CMDcstADDbat_int_sht_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:sht):bat[:oid,:wrd] ",																												  "CMDbatADDcst_int_sht_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:wrd] ",																										  "CMDbatADD_int_bte_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:wrd] ",																												  "CMDcstADDbat_int_bte_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:bte):bat[:oid,:wrd] ",																												  "CMDbatADDcst_int_bte_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumADDcst_sht_wrd_wrd;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumADDcst2_sht_wrd_wrd;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumADD_sht_wrd_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",																										  "CMDbatADD_sht_wrd_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",																												  "CMDcstADDbat_sht_wrd_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:wrd):bat[:oid,:wrd] ",																												  "CMDbatADDcst_sht_wrd_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:wrd] ",																										  "CMDbatADD_sht_int_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:wrd] ",																												  "CMDcstADDbat_sht_int_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:int):bat[:oid,:wrd] ",																												  "CMDbatADDcst_sht_int_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:wrd] ",																										  "CMDbatADD_sht_sht_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:wrd] ",																												  "CMDcstADDbat_sht_sht_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:wrd] ",																												  "CMDbatADDcst_sht_sht_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:wrd] ",																										  "CMDbatADD_sht_bte_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:wrd] ",																												  "CMDcstADDbat_sht_bte_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:wrd] ",																												  "CMDbatADDcst_sht_bte_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumADDcst_bte_wrd_wrd;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumADDcst2_bte_wrd_wrd;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumADD_bte_wrd_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",																										  "CMDbatADD_bte_wrd_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",																												  "CMDcstADDbat_bte_wrd_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:wrd):bat[:oid,:wrd] ",																												  "CMDbatADDcst_bte_wrd_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:wrd] ",																										  "CMDbatADD_bte_int_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:wrd] ",																												  "CMDcstADDbat_bte_int_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:int):bat[:oid,:wrd] ",																												  "CMDbatADDcst_bte_int_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:wrd] ",																										  "CMDbatADD_bte_sht_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:wrd] ",																												  "CMDcstADDbat_bte_sht_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:wrd] ",																												  "CMDbatADDcst_bte_sht_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:wrd] ",																										  "CMDbatADD_bte_bte_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:wrd] ",																												  "CMDcstADDbat_bte_bte_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:wrd] ",																												  "CMDbatADDcst_bte_bte_wrd;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumADDcst_lng_lng_lng;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumADDcst2_lng_lng_lng;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumADD_lng_lng_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatADD_lng_lng_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstADDbat_lng_lng_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",																												  "CMDbatADDcst_lng_lng_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumADDcst_lng_wrd_lng;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumADDcst2_lng_wrd_lng;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumADD_lng_wrd_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:wrd]):bat[:oid,:lng] ",																										  "CMDbatADD_lng_wrd_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:wrd]):bat[:oid,:lng] ",																												  "CMDcstADDbat_lng_wrd_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:wrd):bat[:oid,:lng] ",																												  "CMDbatADDcst_lng_wrd_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:int,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumADDcst_lng_int_lng;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumADDcst2_lng_int_lng;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumADD_lng_int_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",																										  "CMDbatADD_lng_int_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:int]):bat[:oid,:lng] ",																												  "CMDcstADDbat_lng_int_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:int):bat[:oid,:lng] ",																												  "CMDbatADDcst_lng_int_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:sht,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumADDcst_lng_sht_lng;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumADDcst2_lng_sht_lng;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumADD_lng_sht_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:sht]):bat[:oid,:lng] ",																										  "CMDbatADD_lng_sht_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:sht]):bat[:oid,:lng] ",																												  "CMDcstADDbat_lng_sht_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:sht):bat[:oid,:lng] ",																												  "CMDbatADDcst_lng_sht_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:bte,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumADDcst_lng_bte_lng;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumADDcst2_lng_bte_lng;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumADD_lng_bte_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:bte]):bat[:oid,:lng] ",																										  "CMDbatADD_lng_bte_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:bte]):bat[:oid,:lng] ",																												  "CMDcstADDbat_lng_bte_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:bte):bat[:oid,:lng] ",																												  "CMDbatADDcst_lng_bte_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumADDcst_wrd_lng_lng;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumADDcst2_wrd_lng_lng;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumADD_wrd_lng_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatADD_wrd_lng_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstADDbat_wrd_lng_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:lng):bat[:oid,:lng] ",																												  "CMDbatADDcst_wrd_lng_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:lng] ",																										  "CMDbatADD_wrd_wrd_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:lng] ",																												  "CMDcstADDbat_wrd_wrd_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:lng] ",																												  "CMDbatADDcst_wrd_wrd_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:int]):bat[:oid,:lng] ",																										  "CMDbatADD_wrd_int_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:int]):bat[:oid,:lng] ",																												  "CMDcstADDbat_wrd_int_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:int):bat[:oid,:lng] ",																												  "CMDbatADDcst_wrd_int_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:sht]):bat[:oid,:lng] ",																										  "CMDbatADD_wrd_sht_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:sht]):bat[:oid,:lng] ",																												  "CMDcstADDbat_wrd_sht_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:sht):bat[:oid,:lng] ",																												  "CMDbatADDcst_wrd_sht_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:bte]):bat[:oid,:lng] ",																										  "CMDbatADD_wrd_bte_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:bte]):bat[:oid,:lng] ",																												  "CMDcstADDbat_wrd_bte_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:bte):bat[:oid,:lng] ",																												  "CMDbatADDcst_wrd_bte_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumADDcst_int_lng_lng;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumADDcst2_int_lng_lng;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumADD_int_lng_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatADD_int_lng_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstADDbat_int_lng_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:lng):bat[:oid,:lng] ",																												  "CMDbatADDcst_int_lng_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:wrd]):bat[:oid,:lng] ",																										  "CMDbatADD_int_wrd_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:wrd]):bat[:oid,:lng] ",																												  "CMDcstADDbat_int_wrd_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:wrd):bat[:oid,:lng] ",																												  "CMDbatADDcst_int_wrd_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:lng] ",																										  "CMDbatADD_int_int_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int]):bat[:oid,:lng] ",																												  "CMDcstADDbat_int_int_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int):bat[:oid,:lng] ",																												  "CMDbatADDcst_int_int_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:lng] ",																										  "CMDbatADD_int_sht_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:lng] ",																												  "CMDcstADDbat_int_sht_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:sht):bat[:oid,:lng] ",																												  "CMDbatADDcst_int_sht_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:lng] ",																										  "CMDbatADD_int_bte_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:lng] ",																												  "CMDcstADDbat_int_bte_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:bte):bat[:oid,:lng] ",																												  "CMDbatADDcst_int_bte_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumADDcst_sht_lng_lng;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumADDcst2_sht_lng_lng;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumADD_sht_lng_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatADD_sht_lng_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstADDbat_sht_lng_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:lng):bat[:oid,:lng] ",																												  "CMDbatADDcst_sht_lng_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:wrd]):bat[:oid,:lng] ",																										  "CMDbatADD_sht_wrd_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:wrd]):bat[:oid,:lng] ",																												  "CMDcstADDbat_sht_wrd_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:wrd):bat[:oid,:lng] ",																												  "CMDbatADDcst_sht_wrd_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:lng] ",																										  "CMDbatADD_sht_int_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:lng] ",																												  "CMDcstADDbat_sht_int_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:int):bat[:oid,:lng] ",																												  "CMDbatADDcst_sht_int_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:lng] ",																										  "CMDbatADD_sht_sht_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:lng] ",																												  "CMDcstADDbat_sht_sht_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:lng] ",																												  "CMDbatADDcst_sht_sht_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:lng] ",																										  "CMDbatADD_sht_bte_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:lng] ",																												  "CMDcstADDbat_sht_bte_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:lng] ",																												  "CMDbatADDcst_sht_bte_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumADDcst_bte_lng_lng;"		  ]
[ "+",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumADDcst2_bte_lng_lng;"		  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumADD_bte_lng_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatADD_bte_lng_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstADDbat_bte_lng_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:lng):bat[:oid,:lng] ",																												  "CMDbatADDcst_bte_lng_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:wrd]):bat[:oid,:lng] ",																										  "CMDbatADD_bte_wrd_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:wrd]):bat[:oid,:lng] ",																												  "CMDcstADDbat_bte_wrd_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:wrd):bat[:oid,:lng] ",																												  "CMDbatADDcst_bte_wrd_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:lng] ",																										  "CMDbatADD_bte_int_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:lng] ",																												  "CMDcstADDbat_bte_int_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:int):bat[:oid,:lng] ",																												  "CMDbatADDcst_bte_int_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:lng] ",																										  "CMDbatADD_bte_sht_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:lng] ",																												  "CMDcstADDbat_bte_sht_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:lng] ",																												  "CMDbatADDcst_bte_sht_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:lng] ",																										  "CMDbatADD_bte_bte_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:lng] ",																												  "CMDcstADDbat_bte_bte_lng;"			  ]
[ "+",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:lng] ",																												  "CMDbatADDcst_bte_bte_lng;"			  ]
[ "+",				  "command",	  "str",		  "(l:str,r:str):str ",																															  "STRConcat;"					  ]
[ "+",				  "command",	  "calc",		  "(left:lng,right:dbl):dbl ",																														  "CALCbinaryADDlngdbl;"			  ]
[ "+",				  "command",	  "calc",		  "(left:lng,right:flt):dbl ",																														  "CALCbinaryADDlngflt;"			  ]
[ "+",				  "command",	  "calc",		  "(left:lng,right:lng):lng ",																														  "CALCbinaryADDlnglng;"			  ]
[ "+",				  "command",	  "calc",		  "(left:lng,right:wrd):lng ",																														  "CALCbinaryADDlngwrd;"			  ]
[ "+",				  "command",	  "calc",		  "(left:lng,right:int):lng ",																														  "CALCbinaryADDlngint;"			  ]
[ "+",				  "command",	  "calc",		  "(left:lng,right:sht):lng ",																														  "CALCbinaryADDlngsht;"			  ]
[ "+",				  "command",	  "calc",		  "(left:lng,right:bte):lng ",																														  "CALCbinaryADDlngbte;"			  ]
[ "+",				  "command",	  "calc",		  "(left:dbl,right:dbl):dbl ",																														  "CALCbinaryADDdbldbl;"			  ]
[ "+",				  "command",	  "calc",		  "(left:dbl,right:flt):dbl ",																														  "CALCbinaryADDdblflt;"			  ]
[ "+",				  "command",	  "calc",		  "(left:dbl,right:lng):dbl ",																														  "CALCbinaryADDdbllng;"			  ]
[ "+",				  "command",	  "calc",		  "(left:dbl,right:wrd):dbl ",																														  "CALCbinaryADDdblwrd;"			  ]
[ "+",				  "command",	  "calc",		  "(left:dbl,right:int):dbl ",																														  "CALCbinaryADDdblint;"			  ]
[ "+",				  "command",	  "calc",		  "(left:dbl,right:sht):dbl ",																														  "CALCbinaryADDdblsht;"			  ]
[ "+",				  "command",	  "calc",		  "(left:dbl,right:bte):dbl ",																														  "CALCbinaryADDdblbte;"			  ]
[ "+",				  "command",	  "calc",		  "(left:flt,right:dbl):dbl ",																														  "CALCbinaryADDfltdbl;"			  ]
[ "+",				  "command",	  "calc",		  "(left:flt,right:flt):flt ",																														  "CALCbinaryADDfltflt;"			  ]
[ "+",				  "command",	  "calc",		  "(left:flt,right:lng):flt ",																														  "CALCbinaryADDfltlng;"			  ]
[ "+",				  "command",	  "calc",		  "(left:flt,right:wrd):flt ",																														  "CALCbinaryADDfltwrd;"			  ]
[ "+",				  "command",	  "calc",		  "(left:flt,right:int):flt ",																														  "CALCbinaryADDfltint;"			  ]
[ "+",				  "command",	  "calc",		  "(left:flt,right:sht):flt ",																														  "CALCbinaryADDfltsht;"			  ]
[ "+",				  "command",	  "calc",		  "(left:flt,right:bte):flt ",																														  "CALCbinaryADDfltbte;"			  ]
[ "+",				  "command",	  "calc",		  "(left:wrd,right:dbl):dbl ",																														  "CALCbinaryADDwrddbl;"			  ]
[ "+",				  "command",	  "calc",		  "(left:wrd,right:flt):flt ",																														  "CALCbinaryADDwrdflt;"			  ]
[ "+",				  "command",	  "calc",		  "(left:wrd,right:lng):lng ",																														  "CALCbinaryADDwrdlng;"			  ]
[ "+",				  "command",	  "calc",		  "(left:wrd,right:wrd):wrd ",																														  "CALCbinaryADDwrdwrd;"			  ]
[ "+",				  "command",	  "calc",		  "(left:wrd,right:int):wrd ",																														  "CALCbinaryADDwrdint;"			  ]
[ "+",				  "command",	  "calc",		  "(left:wrd,right:sht):wrd ",																														  "CALCbinaryADDwrdsht;"			  ]
[ "+",				  "command",	  "calc",		  "(left:wrd,right:bte):wrd ",																														  "CALCbinaryADDwrdbte;"			  ]
[ "+",				  "command",	  "calc",		  "(left:int,right:dbl):dbl ",																														  "CALCbinaryADDintdbl;"			  ]
[ "+",				  "command",	  "calc",		  "(left:int,right:flt):flt ",																														  "CALCbinaryADDintflt;"			  ]
[ "+",				  "command",	  "calc",		  "(left:int,right:lng):lng ",																														  "CALCbinaryADDintlng;"			  ]
[ "+",				  "command",	  "calc",		  "(left:int,right:wrd):wrd ",																														  "CALCbinaryADDintwrd;"			  ]
[ "+",				  "command",	  "calc",		  "(left:int,right:int):int ",																														  "CALCbinaryADDintint;"			  ]
[ "+",				  "command",	  "calc",		  "(left:int,right:sht):int ",																														  "CALCbinaryADDintsht;"			  ]
[ "+",				  "command",	  "calc",		  "(left:int,right:bte):int ",																														  "CALCbinaryADDintbte;"			  ]
[ "+",				  "command",	  "calc",		  "(left:sht,right:dbl):dbl ",																														  "CALCbinaryADDshtdbl;"			  ]
[ "+",				  "command",	  "calc",		  "(left:sht,right:flt):flt ",																														  "CALCbinaryADDshtflt;"			  ]
[ "+",				  "command",	  "calc",		  "(left:sht,right:lng):lng ",																														  "CALCbinaryADDshtlng;"			  ]
[ "+",				  "command",	  "calc",		  "(left:sht,right:wrd):wrd ",																														  "CALCbinaryADDshtwrd;"			  ]
[ "+",				  "command",	  "calc",		  "(left:sht,right:int):int ",																														  "CALCbinaryADDshtint;"			  ]
[ "+",				  "command",	  "calc",		  "(left:sht,right:sht):sht ",																														  "CALCbinaryADDshtsht;"			  ]
[ "+",				  "command",	  "calc",		  "(left:sht,right:bte):sht ",																														  "CALCbinaryADDshtbte;"			  ]
[ "+",				  "command",	  "calc",		  "(left:bte,right:dbl):dbl ",																														  "CALCbinaryADDbtedbl;"			  ]
[ "+",				  "command",	  "calc",		  "(left:bte,right:flt):flt ",																														  "CALCbinaryADDbteflt;"			  ]
[ "+",				  "command",	  "calc",		  "(left:bte,right:lng):lng ",																														  "CALCbinaryADDbtelng;"			  ]
[ "+",				  "command",	  "calc",		  "(left:bte,right:wrd):wrd ",																														  "CALCbinaryADDbtewrd;"			  ]
[ "+",				  "command",	  "calc",		  "(left:bte,right:int):int ",																														  "CALCbinaryADDbteint;"			  ]
[ "+",				  "command",	  "calc",		  "(left:bte,right:sht):sht ",																														  "CALCbinaryADDbtesht;"			  ]
[ "+",				  "command",	  "calc",		  "(left:bte,right:bte):bte ",																														  "CALCbinaryADDbtebte;"			  ]
[ "+",				  "command",	  "calc",		  "(left:oid,right:oid):oid ",																														  "CALCbinaryADDoidoid;"			  ]
[ "+",				  "command",	  "calc",		  "(l:str,r:int):str ",																															  "CALCstrConcatInt;"				  ]
[ "+",				  "command",	  "calc",		  "(l:str,r:str):str ",																															  "CALCstrConcat;"				  ]
[ "++",				  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",																												  "CMDunaryPLUSPLUS;"				  ]
[ "++",				  "command",	  "batcalc",		  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] ",																												  "CMDunaryPLUSPLUS;"				  ]
[ "++",				  "command",	  "batcalc",		  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] ",																												  "CMDunaryPLUSPLUS;"				  ]
[ "++",				  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd]):bat[:any_1,:wrd] ",																												  "CMDunaryPLUSPLUS;"				  ]
[ "++",				  "command",	  "batcalc",		  "(b:bat[:any_1,:int]):bat[:any_1,:int] ",																												  "CMDunaryPLUSPLUS;"				  ]
[ "++",				  "command",	  "batcalc",		  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] ",																												  "CMDunaryPLUSPLUS;"				  ]
[ "++",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bte]):bat[:any_1,:bte] ",																												  "CMDunaryPLUSPLUS;"				  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",																												  "CMDunaryMIN;"				  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] ",																												  "CMDunaryMIN;"				  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] ",																												  "CMDunaryMIN;"				  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd]):bat[:any_1,:wrd] ",																												  "CMDunaryMIN;"				  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:any_1,:int]):bat[:any_1,:int] ",																												  "CMDunaryMIN;"				  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] ",																												  "CMDunaryMIN;"				  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bte]):bat[:any_1,:bte] ",																												  "CMDunaryMIN;"				  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],cst:flt,bflag:bit,cflag:bit):bat[:oid,:flt] ",																									  "CMDbataccumSUBcst_flt_flt_flt;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:oid,:flt],cflag:bit,bflag:bit):bat[:oid,:flt] ",																									  "CMDbataccumSUBcst2_flt_flt_flt;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],c:bat[:oid,:flt],aflag:bit,bflag:bit):bat[:oid,:flt] ",																								  "CMDbataccumSUB_flt_flt_flt;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",																										  "CMDbatSUB_flt_flt_flt;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:oid,:flt]):bat[:oid,:flt] ",																												  "CMDcstSUBbat_flt_flt_flt;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],cst:flt):bat[:oid,:flt] ",																												  "CMDbatSUBcst_flt_flt_flt;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],cst:dbl,bflag:bit,cflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumSUBcst_dbl_dbl_dbl;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:dbl,b:bat[:oid,:dbl],cflag:bit,bflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumSUBcst2_dbl_dbl_dbl;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],c:bat[:oid,:dbl],aflag:bit,bflag:bit):bat[:oid,:dbl] ",																								  "CMDbataccumSUB_dbl_dbl_dbl;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",																										  "CMDbatSUB_dbl_dbl_dbl;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",																												  "CMDcstSUBbat_dbl_dbl_dbl;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],cst:dbl):bat[:oid,:dbl] ",																												  "CMDbatSUBcst_dbl_dbl_dbl;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],cst:flt,bflag:bit,cflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumSUBcst_dbl_flt_dbl;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:dbl,b:bat[:oid,:flt],cflag:bit,bflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumSUBcst2_dbl_flt_dbl;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],c:bat[:oid,:flt],aflag:bit,bflag:bit):bat[:oid,:dbl] ",																								  "CMDbataccumSUB_dbl_flt_dbl;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],c:bat[:oid,:flt]):bat[:oid,:dbl] ",																										  "CMDbatSUB_dbl_flt_dbl;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:dbl,b:bat[:oid,:flt]):bat[:oid,:dbl] ",																												  "CMDcstSUBbat_dbl_flt_dbl;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],cst:flt):bat[:oid,:dbl] ",																												  "CMDbatSUBcst_dbl_flt_dbl;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],cst:dbl,bflag:bit,cflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumSUBcst_flt_dbl_dbl;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:oid,:dbl],cflag:bit,bflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumSUBcst2_flt_dbl_dbl;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],c:bat[:oid,:dbl],aflag:bit,bflag:bit):bat[:oid,:dbl] ",																								  "CMDbataccumSUB_flt_dbl_dbl;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",																										  "CMDbatSUB_flt_dbl_dbl;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",																												  "CMDcstSUBbat_flt_dbl_dbl;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],cst:dbl):bat[:oid,:dbl] ",																												  "CMDbatSUBcst_flt_dbl_dbl;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:dbl] ",																										  "CMDbatSUB_flt_flt_dbl;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:oid,:flt]):bat[:oid,:dbl] ",																												  "CMDcstSUBbat_flt_flt_dbl;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],cst:flt):bat[:oid,:dbl] ",																												  "CMDbatSUBcst_flt_flt_dbl;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte,bflag:bit,cflag:bit):bat[:oid,:bte] ",																									  "CMDbataccumSUBcst_bte_bte_bte;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:bte] ",																									  "CMDbataccumSUBcst2_bte_bte_bte;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:bte] ",																								  "CMDbataccumSUB_bte_bte_bte;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:bte] ",																										  "CMDbatSUB_bte_bte_bte;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:bte] ",																												  "CMDcstSUBbat_bte_bte_bte;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:bte] ",																												  "CMDbatSUBcst_bte_bte_bte;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumSUBcst_sht_sht_sht;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumSUBcst2_sht_sht_sht;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",																								  "CMDbataccumSUB_sht_sht_sht;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",																										  "CMDbatSUB_sht_sht_sht;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",																												  "CMDcstSUBbat_sht_sht_sht;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",																												  "CMDbatSUBcst_sht_sht_sht;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:bte,bflag:bit,cflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumSUBcst_sht_bte_sht;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumSUBcst2_sht_bte_sht;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:sht] ",																								  "CMDbataccumSUB_sht_bte_sht;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:sht] ",																										  "CMDbatSUB_sht_bte_sht;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:sht] ",																												  "CMDcstSUBbat_sht_bte_sht;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:sht] ",																												  "CMDbatSUBcst_sht_bte_sht;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumSUBcst_bte_sht_sht;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumSUBcst2_bte_sht_sht;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",																								  "CMDbataccumSUB_bte_sht_sht;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:sht] ",																										  "CMDbatSUB_bte_sht_sht;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:sht] ",																												  "CMDcstSUBbat_bte_sht_sht;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:sht] ",																												  "CMDbatSUBcst_bte_sht_sht;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:sht] ",																										  "CMDbatSUB_bte_bte_sht;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:sht] ",																												  "CMDcstSUBbat_bte_bte_sht;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:sht] ",																												  "CMDbatSUBcst_bte_bte_sht;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumSUBcst_int_int_int;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumSUBcst2_int_int_int;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumSUB_int_int_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",																										  "CMDbatSUB_int_int_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",																												  "CMDcstSUBbat_int_int_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",																												  "CMDbatSUBcst_int_int_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:sht,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumSUBcst_int_sht_int;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumSUBcst2_int_sht_int;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumSUB_int_sht_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:int] ",																										  "CMDbatSUB_int_sht_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:int] ",																												  "CMDcstSUBbat_int_sht_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:sht):bat[:oid,:int] ",																												  "CMDbatSUBcst_int_sht_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:bte,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumSUBcst_int_bte_int;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumSUBcst2_int_bte_int;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumSUB_int_bte_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:int] ",																										  "CMDbatSUB_int_bte_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:int] ",																												  "CMDcstSUBbat_int_bte_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:bte):bat[:oid,:int] ",																												  "CMDbatSUBcst_int_bte_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumSUBcst_sht_int_int;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumSUBcst2_sht_int_int;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumSUB_sht_int_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",																										  "CMDbatSUB_sht_int_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:int] ",																												  "CMDcstSUBbat_sht_int_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:int):bat[:oid,:int] ",																												  "CMDbatSUBcst_sht_int_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:int] ",																										  "CMDbatSUB_sht_sht_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:int] ",																												  "CMDcstSUBbat_sht_sht_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:int] ",																												  "CMDbatSUBcst_sht_sht_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:int] ",																										  "CMDbatSUB_sht_bte_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:int] ",																												  "CMDcstSUBbat_sht_bte_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:int] ",																												  "CMDbatSUBcst_sht_bte_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumSUBcst_bte_int_int;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumSUBcst2_bte_int_int;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumSUB_bte_int_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:int] ",																										  "CMDbatSUB_bte_int_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:int] ",																												  "CMDcstSUBbat_bte_int_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:int):bat[:oid,:int] ",																												  "CMDbatSUBcst_bte_int_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:int] ",																										  "CMDbatSUB_bte_sht_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:int] ",																												  "CMDcstSUBbat_bte_sht_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:int] ",																												  "CMDbatSUBcst_bte_sht_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:int] ",																										  "CMDbatSUB_bte_bte_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:int] ",																												  "CMDcstSUBbat_bte_bte_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:int] ",																												  "CMDbatSUBcst_bte_bte_int;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumSUBcst_wrd_wrd_wrd;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumSUBcst2_wrd_wrd_wrd;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumSUB_wrd_wrd_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",																										  "CMDbatSUB_wrd_wrd_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",																												  "CMDcstSUBbat_wrd_wrd_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:wrd] ",																												  "CMDbatSUBcst_wrd_wrd_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:int,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumSUBcst_wrd_int_wrd;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumSUBcst2_wrd_int_wrd;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumSUB_wrd_int_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:int]):bat[:oid,:wrd] ",																										  "CMDbatSUB_wrd_int_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] ",																												  "CMDcstSUBbat_wrd_int_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:int):bat[:oid,:wrd] ",																												  "CMDbatSUBcst_wrd_int_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:sht,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumSUBcst_wrd_sht_wrd;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumSUBcst2_wrd_sht_wrd;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumSUB_wrd_sht_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:sht]):bat[:oid,:wrd] ",																										  "CMDbatSUB_wrd_sht_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:sht]):bat[:oid,:wrd] ",																												  "CMDcstSUBbat_wrd_sht_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:sht):bat[:oid,:wrd] ",																												  "CMDbatSUBcst_wrd_sht_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:bte,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumSUBcst_wrd_bte_wrd;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumSUBcst2_wrd_bte_wrd;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumSUB_wrd_bte_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:bte]):bat[:oid,:wrd] ",																										  "CMDbatSUB_wrd_bte_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:bte]):bat[:oid,:wrd] ",																												  "CMDcstSUBbat_wrd_bte_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:bte):bat[:oid,:wrd] ",																												  "CMDbatSUBcst_wrd_bte_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumSUBcst_int_wrd_wrd;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumSUBcst2_int_wrd_wrd;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumSUB_int_wrd_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",																										  "CMDbatSUB_int_wrd_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",																												  "CMDcstSUBbat_int_wrd_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:wrd):bat[:oid,:wrd] ",																												  "CMDbatSUBcst_int_wrd_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:wrd] ",																										  "CMDbatSUB_int_int_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int]):bat[:oid,:wrd] ",																												  "CMDcstSUBbat_int_int_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int):bat[:oid,:wrd] ",																												  "CMDbatSUBcst_int_int_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:wrd] ",																										  "CMDbatSUB_int_sht_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:wrd] ",																												  "CMDcstSUBbat_int_sht_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:sht):bat[:oid,:wrd] ",																												  "CMDbatSUBcst_int_sht_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:wrd] ",																										  "CMDbatSUB_int_bte_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:wrd] ",																												  "CMDcstSUBbat_int_bte_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:bte):bat[:oid,:wrd] ",																												  "CMDbatSUBcst_int_bte_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumSUBcst_sht_wrd_wrd;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumSUBcst2_sht_wrd_wrd;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumSUB_sht_wrd_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",																										  "CMDbatSUB_sht_wrd_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",																												  "CMDcstSUBbat_sht_wrd_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:wrd):bat[:oid,:wrd] ",																												  "CMDbatSUBcst_sht_wrd_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:wrd] ",																										  "CMDbatSUB_sht_int_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:wrd] ",																												  "CMDcstSUBbat_sht_int_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:int):bat[:oid,:wrd] ",																												  "CMDbatSUBcst_sht_int_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:wrd] ",																										  "CMDbatSUB_sht_sht_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:wrd] ",																												  "CMDcstSUBbat_sht_sht_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:wrd] ",																												  "CMDbatSUBcst_sht_sht_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:wrd] ",																										  "CMDbatSUB_sht_bte_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:wrd] ",																												  "CMDcstSUBbat_sht_bte_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:wrd] ",																												  "CMDbatSUBcst_sht_bte_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumSUBcst_bte_wrd_wrd;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumSUBcst2_bte_wrd_wrd;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumSUB_bte_wrd_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",																										  "CMDbatSUB_bte_wrd_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",																												  "CMDcstSUBbat_bte_wrd_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:wrd):bat[:oid,:wrd] ",																												  "CMDbatSUBcst_bte_wrd_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:wrd] ",																										  "CMDbatSUB_bte_int_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:wrd] ",																												  "CMDcstSUBbat_bte_int_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:int):bat[:oid,:wrd] ",																												  "CMDbatSUBcst_bte_int_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:wrd] ",																										  "CMDbatSUB_bte_sht_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:wrd] ",																												  "CMDcstSUBbat_bte_sht_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:wrd] ",																												  "CMDbatSUBcst_bte_sht_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:wrd] ",																										  "CMDbatSUB_bte_bte_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:wrd] ",																												  "CMDcstSUBbat_bte_bte_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:wrd] ",																												  "CMDbatSUBcst_bte_bte_wrd;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumSUBcst_lng_lng_lng;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumSUBcst2_lng_lng_lng;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumSUB_lng_lng_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatSUB_lng_lng_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_lng_lng_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",																												  "CMDbatSUBcst_lng_lng_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumSUBcst_lng_wrd_lng;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumSUBcst2_lng_wrd_lng;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumSUB_lng_wrd_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:wrd]):bat[:oid,:lng] ",																										  "CMDbatSUB_lng_wrd_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:wrd]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_lng_wrd_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:wrd):bat[:oid,:lng] ",																												  "CMDbatSUBcst_lng_wrd_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:int,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumSUBcst_lng_int_lng;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumSUBcst2_lng_int_lng;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumSUB_lng_int_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",																										  "CMDbatSUB_lng_int_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:int]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_lng_int_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:int):bat[:oid,:lng] ",																												  "CMDbatSUBcst_lng_int_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:sht,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumSUBcst_lng_sht_lng;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumSUBcst2_lng_sht_lng;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumSUB_lng_sht_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:sht]):bat[:oid,:lng] ",																										  "CMDbatSUB_lng_sht_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:sht]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_lng_sht_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:sht):bat[:oid,:lng] ",																												  "CMDbatSUBcst_lng_sht_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:bte,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumSUBcst_lng_bte_lng;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumSUBcst2_lng_bte_lng;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumSUB_lng_bte_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:bte]):bat[:oid,:lng] ",																										  "CMDbatSUB_lng_bte_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:bte]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_lng_bte_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:bte):bat[:oid,:lng] ",																												  "CMDbatSUBcst_lng_bte_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumSUBcst_wrd_lng_lng;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumSUBcst2_wrd_lng_lng;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumSUB_wrd_lng_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatSUB_wrd_lng_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_wrd_lng_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:lng):bat[:oid,:lng] ",																												  "CMDbatSUBcst_wrd_lng_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:lng] ",																										  "CMDbatSUB_wrd_wrd_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_wrd_wrd_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:lng] ",																												  "CMDbatSUBcst_wrd_wrd_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:int]):bat[:oid,:lng] ",																										  "CMDbatSUB_wrd_int_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:int]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_wrd_int_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:int):bat[:oid,:lng] ",																												  "CMDbatSUBcst_wrd_int_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:sht]):bat[:oid,:lng] ",																										  "CMDbatSUB_wrd_sht_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:sht]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_wrd_sht_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:sht):bat[:oid,:lng] ",																												  "CMDbatSUBcst_wrd_sht_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:bte]):bat[:oid,:lng] ",																										  "CMDbatSUB_wrd_bte_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:bte]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_wrd_bte_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:bte):bat[:oid,:lng] ",																												  "CMDbatSUBcst_wrd_bte_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumSUBcst_int_lng_lng;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumSUBcst2_int_lng_lng;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumSUB_int_lng_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatSUB_int_lng_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_int_lng_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:lng):bat[:oid,:lng] ",																												  "CMDbatSUBcst_int_lng_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:wrd]):bat[:oid,:lng] ",																										  "CMDbatSUB_int_wrd_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:wrd]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_int_wrd_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:wrd):bat[:oid,:lng] ",																												  "CMDbatSUBcst_int_wrd_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:lng] ",																										  "CMDbatSUB_int_int_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_int_int_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int):bat[:oid,:lng] ",																												  "CMDbatSUBcst_int_int_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:lng] ",																										  "CMDbatSUB_int_sht_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_int_sht_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:sht):bat[:oid,:lng] ",																												  "CMDbatSUBcst_int_sht_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:lng] ",																										  "CMDbatSUB_int_bte_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_int_bte_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:bte):bat[:oid,:lng] ",																												  "CMDbatSUBcst_int_bte_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumSUBcst_sht_lng_lng;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumSUBcst2_sht_lng_lng;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumSUB_sht_lng_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatSUB_sht_lng_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_sht_lng_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:lng):bat[:oid,:lng] ",																												  "CMDbatSUBcst_sht_lng_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:wrd]):bat[:oid,:lng] ",																										  "CMDbatSUB_sht_wrd_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:wrd]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_sht_wrd_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:wrd):bat[:oid,:lng] ",																												  "CMDbatSUBcst_sht_wrd_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:lng] ",																										  "CMDbatSUB_sht_int_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_sht_int_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:int):bat[:oid,:lng] ",																												  "CMDbatSUBcst_sht_int_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:lng] ",																										  "CMDbatSUB_sht_sht_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_sht_sht_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:lng] ",																												  "CMDbatSUBcst_sht_sht_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:lng] ",																										  "CMDbatSUB_sht_bte_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_sht_bte_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:lng] ",																												  "CMDbatSUBcst_sht_bte_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumSUBcst_bte_lng_lng;"		  ]
[ "-",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumSUBcst2_bte_lng_lng;"		  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumSUB_bte_lng_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatSUB_bte_lng_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_bte_lng_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:lng):bat[:oid,:lng] ",																												  "CMDbatSUBcst_bte_lng_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:wrd]):bat[:oid,:lng] ",																										  "CMDbatSUB_bte_wrd_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:wrd]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_bte_wrd_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:wrd):bat[:oid,:lng] ",																												  "CMDbatSUBcst_bte_wrd_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:lng] ",																										  "CMDbatSUB_bte_int_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_bte_int_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:int):bat[:oid,:lng] ",																												  "CMDbatSUBcst_bte_int_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:lng] ",																										  "CMDbatSUB_bte_sht_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_bte_sht_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:lng] ",																												  "CMDbatSUBcst_bte_sht_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:lng] ",																										  "CMDbatSUB_bte_bte_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:lng] ",																												  "CMDcstSUBbat_bte_bte_lng;"			  ]
[ "-",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:lng] ",																												  "CMDbatSUBcst_bte_bte_lng;"			  ]
[ "-",				  "command",	  "calc",		  "(x:dbl):dbl ",																															  "CALCunarydblNEG;"				  ]
[ "-",				  "command",	  "calc",		  "(x:lng):lng ",																															  "CALCunarylngNEG;"				  ]
[ "-",				  "command",	  "calc",		  "(x:flt):flt ",																															  "CALCunaryfltNEG;"				  ]
[ "-",				  "command",	  "calc",		  "(x:wrd):wrd ",																															  "CALCunarywrdNEG;"				  ]
[ "-",				  "command",	  "calc",		  "(x:int):int ",																															  "CALCunaryintNEG;"				  ]
[ "-",				  "command",	  "calc",		  "(x:sht):sht ",																															  "CALCunaryshtNEG;"				  ]
[ "-",				  "command",	  "calc",		  "(x:bte):bte ",																															  "CALCunarybteNEG;"				  ]
[ "-",				  "command",	  "calc",		  "(x:bit):bit ",																															  "CALCunarybitNEG;"				  ]
[ "-",				  "command",	  "calc",		  "(left:lng,right:dbl):dbl ",																														  "CALCbinarySUBlngdbl;"			  ]
[ "-",				  "command",	  "calc",		  "(left:lng,right:flt):dbl ",																														  "CALCbinarySUBlngflt;"			  ]
[ "-",				  "command",	  "calc",		  "(left:lng,right:lng):lng ",																														  "CALCbinarySUBlnglng;"			  ]
[ "-",				  "command",	  "calc",		  "(left:lng,right:wrd):lng ",																														  "CALCbinarySUBlngwrd;"			  ]
[ "-",				  "command",	  "calc",		  "(left:lng,right:int):lng ",																														  "CALCbinarySUBlngint;"			  ]
[ "-",				  "command",	  "calc",		  "(left:lng,right:sht):lng ",																														  "CALCbinarySUBlngsht;"			  ]
[ "-",				  "command",	  "calc",		  "(left:lng,right:bte):lng ",																														  "CALCbinarySUBlngbte;"			  ]
[ "-",				  "command",	  "calc",		  "(left:dbl,right:dbl):dbl ",																														  "CALCbinarySUBdbldbl;"			  ]
[ "-",				  "command",	  "calc",		  "(left:dbl,right:flt):dbl ",																														  "CALCbinarySUBdblflt;"			  ]
[ "-",				  "command",	  "calc",		  "(left:dbl,right:lng):dbl ",																														  "CALCbinarySUBdbllng;"			  ]
[ "-",				  "command",	  "calc",		  "(left:dbl,right:wrd):dbl ",																														  "CALCbinarySUBdblwrd;"			  ]
[ "-",				  "command",	  "calc",		  "(left:dbl,right:int):dbl ",																														  "CALCbinarySUBdblint;"			  ]
[ "-",				  "command",	  "calc",		  "(left:dbl,right:sht):dbl ",																														  "CALCbinarySUBdblsht;"			  ]
[ "-",				  "command",	  "calc",		  "(left:dbl,right:bte):dbl ",																														  "CALCbinarySUBdblbte;"			  ]
[ "-",				  "command",	  "calc",		  "(left:flt,right:dbl):dbl ",																														  "CALCbinarySUBfltdbl;"			  ]
[ "-",				  "command",	  "calc",		  "(left:flt,right:flt):flt ",																														  "CALCbinarySUBfltflt;"			  ]
[ "-",				  "command",	  "calc",		  "(left:flt,right:lng):flt ",																														  "CALCbinarySUBfltlng;"			  ]
[ "-",				  "command",	  "calc",		  "(left:flt,right:wrd):flt ",																														  "CALCbinarySUBfltwrd;"			  ]
[ "-",				  "command",	  "calc",		  "(left:flt,right:int):flt ",																														  "CALCbinarySUBfltint;"			  ]
[ "-",				  "command",	  "calc",		  "(left:flt,right:sht):flt ",																														  "CALCbinarySUBfltsht;"			  ]
[ "-",				  "command",	  "calc",		  "(left:flt,right:bte):flt ",																														  "CALCbinarySUBfltbte;"			  ]
[ "-",				  "command",	  "calc",		  "(left:wrd,right:dbl):dbl ",																														  "CALCbinarySUBwrddbl;"			  ]
[ "-",				  "command",	  "calc",		  "(left:wrd,right:flt):flt ",																														  "CALCbinarySUBwrdflt;"			  ]
[ "-",				  "command",	  "calc",		  "(left:wrd,right:lng):lng ",																														  "CALCbinarySUBwrdlng;"			  ]
[ "-",				  "command",	  "calc",		  "(left:wrd,right:wrd):wrd ",																														  "CALCbinarySUBwrdwrd;"			  ]
[ "-",				  "command",	  "calc",		  "(left:wrd,right:int):wrd ",																														  "CALCbinarySUBwrdint;"			  ]
[ "-",				  "command",	  "calc",		  "(left:wrd,right:sht):wrd ",																														  "CALCbinarySUBwrdsht;"			  ]
[ "-",				  "command",	  "calc",		  "(left:wrd,right:bte):wrd ",																														  "CALCbinarySUBwrdbte;"			  ]
[ "-",				  "command",	  "calc",		  "(left:int,right:dbl):dbl ",																														  "CALCbinarySUBintdbl;"			  ]
[ "-",				  "command",	  "calc",		  "(left:int,right:flt):flt ",																														  "CALCbinarySUBintflt;"			  ]
[ "-",				  "command",	  "calc",		  "(left:int,right:lng):lng ",																														  "CALCbinarySUBintlng;"			  ]
[ "-",				  "command",	  "calc",		  "(left:int,right:wrd):wrd ",																														  "CALCbinarySUBintwrd;"			  ]
[ "-",				  "command",	  "calc",		  "(left:int,right:int):int ",																														  "CALCbinarySUBintint;"			  ]
[ "-",				  "command",	  "calc",		  "(left:int,right:sht):int ",																														  "CALCbinarySUBintsht;"			  ]
[ "-",				  "command",	  "calc",		  "(left:int,right:bte):int ",																														  "CALCbinarySUBintbte;"			  ]
[ "-",				  "command",	  "calc",		  "(left:sht,right:dbl):dbl ",																														  "CALCbinarySUBshtdbl;"			  ]
[ "-",				  "command",	  "calc",		  "(left:sht,right:flt):flt ",																														  "CALCbinarySUBshtflt;"			  ]
[ "-",				  "command",	  "calc",		  "(left:sht,right:lng):lng ",																														  "CALCbinarySUBshtlng;"			  ]
[ "-",				  "command",	  "calc",		  "(left:sht,right:wrd):wrd ",																														  "CALCbinarySUBshtwrd;"			  ]
[ "-",				  "command",	  "calc",		  "(left:sht,right:int):int ",																														  "CALCbinarySUBshtint;"			  ]
[ "-",				  "command",	  "calc",		  "(left:sht,right:sht):sht ",																														  "CALCbinarySUBshtsht;"			  ]
[ "-",				  "command",	  "calc",		  "(left:sht,right:bte):sht ",																														  "CALCbinarySUBshtbte;"			  ]
[ "-",				  "command",	  "calc",		  "(left:bte,right:dbl):dbl ",																														  "CALCbinarySUBbtedbl;"			  ]
[ "-",				  "command",	  "calc",		  "(left:bte,right:flt):flt ",																														  "CALCbinarySUBbteflt;"			  ]
[ "-",				  "command",	  "calc",		  "(left:bte,right:lng):lng ",																														  "CALCbinarySUBbtelng;"			  ]
[ "-",				  "command",	  "calc",		  "(left:bte,right:wrd):wrd ",																														  "CALCbinarySUBbtewrd;"			  ]
[ "-",				  "command",	  "calc",		  "(left:bte,right:int):int ",																														  "CALCbinarySUBbteint;"			  ]
[ "-",				  "command",	  "calc",		  "(left:bte,right:sht):sht ",																														  "CALCbinarySUBbtesht;"			  ]
[ "-",				  "command",	  "calc",		  "(left:bte,right:bte):bte ",																														  "CALCbinarySUBbtebte;"			  ]
[ "-",				  "command",	  "calc",		  "(left:oid,right:oid):oid ",																														  "CALCbinarySUBoidoid;"			  ]
[ "--",				  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",																												  "CMDunaryMINMIN;"				  ]
[ "--",				  "command",	  "batcalc",		  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] ",																												  "CMDunaryMINMIN;"				  ]
[ "--",				  "command",	  "batcalc",		  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] ",																												  "CMDunaryMINMIN;"				  ]
[ "--",				  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd]):bat[:any_1,:wrd] ",																												  "CMDunaryMINMIN;"				  ]
[ "--",				  "command",	  "batcalc",		  "(b:bat[:any_1,:int]):bat[:any_1,:int] ",																												  "CMDunaryMINMIN;"				  ]
[ "--",				  "command",	  "batcalc",		  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] ",																												  "CMDunaryMINMIN;"				  ]
[ "--",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bte]):bat[:any_1,:bte] ",																												  "CMDunaryMINMIN;"				  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],cst:flt,bflag:bit,cflag:bit):bat[:oid,:flt] ",																									  "CMDbataccumDIVcst_flt_flt_flt;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:oid,:flt],cflag:bit,bflag:bit):bat[:oid,:flt] ",																									  "CMDbataccumDIVcst2_flt_flt_flt;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],c:bat[:oid,:flt],aflag:bit,bflag:bit):bat[:oid,:flt] ",																								  "CMDbataccumDIV_flt_flt_flt;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",																										  "CMDbatDIV_flt_flt_flt;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:oid,:flt]):bat[:oid,:flt] ",																												  "CMDcstDIVbat_flt_flt_flt;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],cst:flt):bat[:oid,:flt] ",																												  "CMDbatDIVcst_flt_flt_flt;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],cst:dbl,bflag:bit,cflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumDIVcst_dbl_dbl_dbl;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:dbl,b:bat[:oid,:dbl],cflag:bit,bflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumDIVcst2_dbl_dbl_dbl;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],c:bat[:oid,:dbl],aflag:bit,bflag:bit):bat[:oid,:dbl] ",																								  "CMDbataccumDIV_dbl_dbl_dbl;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",																										  "CMDbatDIV_dbl_dbl_dbl;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",																												  "CMDcstDIVbat_dbl_dbl_dbl;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],cst:dbl):bat[:oid,:dbl] ",																												  "CMDbatDIVcst_dbl_dbl_dbl;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],cst:flt,bflag:bit,cflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumDIVcst_dbl_flt_dbl;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:dbl,b:bat[:oid,:flt],cflag:bit,bflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumDIVcst2_dbl_flt_dbl;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],c:bat[:oid,:flt],aflag:bit,bflag:bit):bat[:oid,:dbl] ",																								  "CMDbataccumDIV_dbl_flt_dbl;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],c:bat[:oid,:flt]):bat[:oid,:dbl] ",																										  "CMDbatDIV_dbl_flt_dbl;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:dbl,b:bat[:oid,:flt]):bat[:oid,:dbl] ",																												  "CMDcstDIVbat_dbl_flt_dbl;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:dbl],cst:flt):bat[:oid,:dbl] ",																												  "CMDbatDIVcst_dbl_flt_dbl;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],cst:dbl,bflag:bit,cflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumDIVcst_flt_dbl_dbl;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:oid,:dbl],cflag:bit,bflag:bit):bat[:oid,:dbl] ",																									  "CMDbataccumDIVcst2_flt_dbl_dbl;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],c:bat[:oid,:dbl],aflag:bit,bflag:bit):bat[:oid,:dbl] ",																								  "CMDbataccumDIV_flt_dbl_dbl;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",																										  "CMDbatDIV_flt_dbl_dbl;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",																												  "CMDcstDIVbat_flt_dbl_dbl;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],cst:dbl):bat[:oid,:dbl] ",																												  "CMDbatDIVcst_flt_dbl_dbl;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:dbl] ",																										  "CMDbatDIV_flt_flt_dbl;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:oid,:flt]):bat[:oid,:dbl] ",																												  "CMDcstDIVbat_flt_flt_dbl;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:flt],cst:flt):bat[:oid,:dbl] ",																												  "CMDbatDIVcst_flt_flt_dbl;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte,bflag:bit,cflag:bit):bat[:oid,:bte] ",																									  "CMDbataccumDIVcst_bte_bte_bte;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:bte] ",																									  "CMDbataccumDIVcst2_bte_bte_bte;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:bte] ",																								  "CMDbataccumDIV_bte_bte_bte;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:bte] ",																										  "CMDbatDIV_bte_bte_bte;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:bte] ",																												  "CMDcstDIVbat_bte_bte_bte;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:bte] ",																												  "CMDbatDIVcst_bte_bte_bte;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumDIVcst_sht_sht_sht;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumDIVcst2_sht_sht_sht;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",																								  "CMDbataccumDIV_sht_sht_sht;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",																										  "CMDbatDIV_sht_sht_sht;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",																												  "CMDcstDIVbat_sht_sht_sht;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",																												  "CMDbatDIVcst_sht_sht_sht;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:bte,bflag:bit,cflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumDIVcst_sht_bte_sht;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumDIVcst2_sht_bte_sht;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:sht] ",																								  "CMDbataccumDIV_sht_bte_sht;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:sht] ",																										  "CMDbatDIV_sht_bte_sht;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:sht] ",																												  "CMDcstDIVbat_sht_bte_sht;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:sht] ",																												  "CMDbatDIVcst_sht_bte_sht;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumDIVcst_bte_sht_sht;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumDIVcst2_bte_sht_sht;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",																								  "CMDbataccumDIV_bte_sht_sht;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:sht] ",																										  "CMDbatDIV_bte_sht_sht;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:sht] ",																												  "CMDcstDIVbat_bte_sht_sht;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:sht] ",																												  "CMDbatDIVcst_bte_sht_sht;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:sht] ",																										  "CMDbatDIV_bte_bte_sht;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:sht] ",																												  "CMDcstDIVbat_bte_bte_sht;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:sht] ",																												  "CMDbatDIVcst_bte_bte_sht;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumDIVcst_int_int_int;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumDIVcst2_int_int_int;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumDIV_int_int_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",																										  "CMDbatDIV_int_int_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",																												  "CMDcstDIVbat_int_int_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",																												  "CMDbatDIVcst_int_int_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:sht,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumDIVcst_int_sht_int;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumDIVcst2_int_sht_int;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumDIV_int_sht_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:int] ",																										  "CMDbatDIV_int_sht_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:int] ",																												  "CMDcstDIVbat_int_sht_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:sht):bat[:oid,:int] ",																												  "CMDbatDIVcst_int_sht_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:bte,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumDIVcst_int_bte_int;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumDIVcst2_int_bte_int;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumDIV_int_bte_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:int] ",																										  "CMDbatDIV_int_bte_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:int] ",																												  "CMDcstDIVbat_int_bte_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:bte):bat[:oid,:int] ",																												  "CMDbatDIVcst_int_bte_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumDIVcst_sht_int_int;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumDIVcst2_sht_int_int;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumDIV_sht_int_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",																										  "CMDbatDIV_sht_int_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:int] ",																												  "CMDcstDIVbat_sht_int_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:int):bat[:oid,:int] ",																												  "CMDbatDIVcst_sht_int_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:int] ",																										  "CMDbatDIV_sht_sht_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:int] ",																												  "CMDcstDIVbat_sht_sht_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:int] ",																												  "CMDbatDIVcst_sht_sht_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:int] ",																										  "CMDbatDIV_sht_bte_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:int] ",																												  "CMDcstDIVbat_sht_bte_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:int] ",																												  "CMDbatDIVcst_sht_bte_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumDIVcst_bte_int_int;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumDIVcst2_bte_int_int;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumDIV_bte_int_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:int] ",																										  "CMDbatDIV_bte_int_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:int] ",																												  "CMDcstDIVbat_bte_int_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:int):bat[:oid,:int] ",																												  "CMDbatDIVcst_bte_int_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:int] ",																										  "CMDbatDIV_bte_sht_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:int] ",																												  "CMDcstDIVbat_bte_sht_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:int] ",																												  "CMDbatDIVcst_bte_sht_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:int] ",																										  "CMDbatDIV_bte_bte_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:int] ",																												  "CMDcstDIVbat_bte_bte_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:int] ",																												  "CMDbatDIVcst_bte_bte_int;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumDIVcst_wrd_wrd_wrd;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumDIVcst2_wrd_wrd_wrd;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumDIV_wrd_wrd_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",																										  "CMDbatDIV_wrd_wrd_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",																												  "CMDcstDIVbat_wrd_wrd_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:wrd] ",																												  "CMDbatDIVcst_wrd_wrd_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:int,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumDIVcst_wrd_int_wrd;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumDIVcst2_wrd_int_wrd;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumDIV_wrd_int_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:int]):bat[:oid,:wrd] ",																										  "CMDbatDIV_wrd_int_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] ",																												  "CMDcstDIVbat_wrd_int_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:int):bat[:oid,:wrd] ",																												  "CMDbatDIVcst_wrd_int_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:sht,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumDIVcst_wrd_sht_wrd;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumDIVcst2_wrd_sht_wrd;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumDIV_wrd_sht_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:sht]):bat[:oid,:wrd] ",																										  "CMDbatDIV_wrd_sht_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:sht]):bat[:oid,:wrd] ",																												  "CMDcstDIVbat_wrd_sht_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:sht):bat[:oid,:wrd] ",																												  "CMDbatDIVcst_wrd_sht_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:bte,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumDIVcst_wrd_bte_wrd;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumDIVcst2_wrd_bte_wrd;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumDIV_wrd_bte_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:bte]):bat[:oid,:wrd] ",																										  "CMDbatDIV_wrd_bte_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:bte]):bat[:oid,:wrd] ",																												  "CMDcstDIVbat_wrd_bte_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:bte):bat[:oid,:wrd] ",																												  "CMDbatDIVcst_wrd_bte_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumDIVcst_int_wrd_wrd;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumDIVcst2_int_wrd_wrd;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumDIV_int_wrd_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",																										  "CMDbatDIV_int_wrd_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",																												  "CMDcstDIVbat_int_wrd_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:wrd):bat[:oid,:wrd] ",																												  "CMDbatDIVcst_int_wrd_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:wrd] ",																										  "CMDbatDIV_int_int_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int]):bat[:oid,:wrd] ",																												  "CMDcstDIVbat_int_int_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int):bat[:oid,:wrd] ",																												  "CMDbatDIVcst_int_int_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:wrd] ",																										  "CMDbatDIV_int_sht_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:wrd] ",																												  "CMDcstDIVbat_int_sht_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:sht):bat[:oid,:wrd] ",																												  "CMDbatDIVcst_int_sht_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:wrd] ",																										  "CMDbatDIV_int_bte_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:wrd] ",																												  "CMDcstDIVbat_int_bte_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:bte):bat[:oid,:wrd] ",																												  "CMDbatDIVcst_int_bte_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumDIVcst_sht_wrd_wrd;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumDIVcst2_sht_wrd_wrd;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumDIV_sht_wrd_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",																										  "CMDbatDIV_sht_wrd_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",																												  "CMDcstDIVbat_sht_wrd_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:wrd):bat[:oid,:wrd] ",																												  "CMDbatDIVcst_sht_wrd_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:wrd] ",																										  "CMDbatDIV_sht_int_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:wrd] ",																												  "CMDcstDIVbat_sht_int_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:int):bat[:oid,:wrd] ",																												  "CMDbatDIVcst_sht_int_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:wrd] ",																										  "CMDbatDIV_sht_sht_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:wrd] ",																												  "CMDcstDIVbat_sht_sht_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:wrd] ",																												  "CMDbatDIVcst_sht_sht_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:wrd] ",																										  "CMDbatDIV_sht_bte_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:wrd] ",																												  "CMDcstDIVbat_sht_bte_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:wrd] ",																												  "CMDbatDIVcst_sht_bte_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumDIVcst_bte_wrd_wrd;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumDIVcst2_bte_wrd_wrd;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumDIV_bte_wrd_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",																										  "CMDbatDIV_bte_wrd_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",																												  "CMDcstDIVbat_bte_wrd_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:wrd):bat[:oid,:wrd] ",																												  "CMDbatDIVcst_bte_wrd_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:wrd] ",																										  "CMDbatDIV_bte_int_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:wrd] ",																												  "CMDcstDIVbat_bte_int_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:int):bat[:oid,:wrd] ",																												  "CMDbatDIVcst_bte_int_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:wrd] ",																										  "CMDbatDIV_bte_sht_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:wrd] ",																												  "CMDcstDIVbat_bte_sht_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:wrd] ",																												  "CMDbatDIVcst_bte_sht_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:wrd] ",																										  "CMDbatDIV_bte_bte_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:wrd] ",																												  "CMDcstDIVbat_bte_bte_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:wrd] ",																												  "CMDbatDIVcst_bte_bte_wrd;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumDIVcst_lng_lng_lng;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumDIVcst2_lng_lng_lng;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumDIV_lng_lng_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatDIV_lng_lng_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_lng_lng_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",																												  "CMDbatDIVcst_lng_lng_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumDIVcst_lng_wrd_lng;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumDIVcst2_lng_wrd_lng;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumDIV_lng_wrd_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:wrd]):bat[:oid,:lng] ",																										  "CMDbatDIV_lng_wrd_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:wrd]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_lng_wrd_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:wrd):bat[:oid,:lng] ",																												  "CMDbatDIVcst_lng_wrd_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:int,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumDIVcst_lng_int_lng;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumDIVcst2_lng_int_lng;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumDIV_lng_int_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",																										  "CMDbatDIV_lng_int_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:int]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_lng_int_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:int):bat[:oid,:lng] ",																												  "CMDbatDIVcst_lng_int_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:sht,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumDIVcst_lng_sht_lng;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumDIVcst2_lng_sht_lng;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumDIV_lng_sht_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:sht]):bat[:oid,:lng] ",																										  "CMDbatDIV_lng_sht_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:sht]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_lng_sht_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:sht):bat[:oid,:lng] ",																												  "CMDbatDIVcst_lng_sht_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:bte,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumDIVcst_lng_bte_lng;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumDIVcst2_lng_bte_lng;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumDIV_lng_bte_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:bte]):bat[:oid,:lng] ",																										  "CMDbatDIV_lng_bte_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:bte]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_lng_bte_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:bte):bat[:oid,:lng] ",																												  "CMDbatDIVcst_lng_bte_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumDIVcst_wrd_lng_lng;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumDIVcst2_wrd_lng_lng;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumDIV_wrd_lng_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatDIV_wrd_lng_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_wrd_lng_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:lng):bat[:oid,:lng] ",																												  "CMDbatDIVcst_wrd_lng_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:lng] ",																										  "CMDbatDIV_wrd_wrd_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_wrd_wrd_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:lng] ",																												  "CMDbatDIVcst_wrd_wrd_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:int]):bat[:oid,:lng] ",																										  "CMDbatDIV_wrd_int_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:int]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_wrd_int_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:int):bat[:oid,:lng] ",																												  "CMDbatDIVcst_wrd_int_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:sht]):bat[:oid,:lng] ",																										  "CMDbatDIV_wrd_sht_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:sht]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_wrd_sht_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:sht):bat[:oid,:lng] ",																												  "CMDbatDIVcst_wrd_sht_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:bte]):bat[:oid,:lng] ",																										  "CMDbatDIV_wrd_bte_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:bte]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_wrd_bte_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:bte):bat[:oid,:lng] ",																												  "CMDbatDIVcst_wrd_bte_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumDIVcst_int_lng_lng;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumDIVcst2_int_lng_lng;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumDIV_int_lng_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatDIV_int_lng_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_int_lng_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:lng):bat[:oid,:lng] ",																												  "CMDbatDIVcst_int_lng_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:wrd]):bat[:oid,:lng] ",																										  "CMDbatDIV_int_wrd_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:wrd]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_int_wrd_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:wrd):bat[:oid,:lng] ",																												  "CMDbatDIVcst_int_wrd_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:lng] ",																										  "CMDbatDIV_int_int_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_int_int_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int):bat[:oid,:lng] ",																												  "CMDbatDIVcst_int_int_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:lng] ",																										  "CMDbatDIV_int_sht_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_int_sht_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:sht):bat[:oid,:lng] ",																												  "CMDbatDIVcst_int_sht_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:lng] ",																										  "CMDbatDIV_int_bte_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_int_bte_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:bte):bat[:oid,:lng] ",																												  "CMDbatDIVcst_int_bte_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumDIVcst_sht_lng_lng;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumDIVcst2_sht_lng_lng;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumDIV_sht_lng_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatDIV_sht_lng_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_sht_lng_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:lng):bat[:oid,:lng] ",																												  "CMDbatDIVcst_sht_lng_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:wrd]):bat[:oid,:lng] ",																										  "CMDbatDIV_sht_wrd_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:wrd]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_sht_wrd_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:wrd):bat[:oid,:lng] ",																												  "CMDbatDIVcst_sht_wrd_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:lng] ",																										  "CMDbatDIV_sht_int_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_sht_int_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:int):bat[:oid,:lng] ",																												  "CMDbatDIVcst_sht_int_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:lng] ",																										  "CMDbatDIV_sht_sht_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_sht_sht_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:lng] ",																												  "CMDbatDIVcst_sht_sht_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:lng] ",																										  "CMDbatDIV_sht_bte_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_sht_bte_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:lng] ",																												  "CMDbatDIVcst_sht_bte_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumDIVcst_bte_lng_lng;"		  ]
[ "/",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumDIVcst2_bte_lng_lng;"		  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumDIV_bte_lng_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatDIV_bte_lng_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_bte_lng_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:lng):bat[:oid,:lng] ",																												  "CMDbatDIVcst_bte_lng_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:wrd]):bat[:oid,:lng] ",																										  "CMDbatDIV_bte_wrd_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:wrd]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_bte_wrd_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:wrd):bat[:oid,:lng] ",																												  "CMDbatDIVcst_bte_wrd_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:lng] ",																										  "CMDbatDIV_bte_int_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_bte_int_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:int):bat[:oid,:lng] ",																												  "CMDbatDIVcst_bte_int_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:lng] ",																										  "CMDbatDIV_bte_sht_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_bte_sht_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:lng] ",																												  "CMDbatDIVcst_bte_sht_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:lng] ",																										  "CMDbatDIV_bte_bte_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:lng] ",																												  "CMDcstDIVbat_bte_bte_lng;"			  ]
[ "/",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:lng] ",																												  "CMDbatDIVcst_bte_bte_lng;"			  ]
[ "/",				  "command",	  "calc",		  "(left:lng,right:dbl):dbl ",																														  "CALCbinarycheckDIVlngdbl;"			  ]
[ "/",				  "command",	  "calc",		  "(left:lng,right:flt):dbl ",																														  "CALCbinarycheckDIVlngflt;"			  ]
[ "/",				  "command",	  "calc",		  "(left:lng,right:lng):lng ",																														  "CALCbinarycheckDIVlnglng;"			  ]
[ "/",				  "command",	  "calc",		  "(left:lng,right:wrd):lng ",																														  "CALCbinarycheckDIVlngwrd;"			  ]
[ "/",				  "command",	  "calc",		  "(left:lng,right:int):lng ",																														  "CALCbinarycheckDIVlngint;"			  ]
[ "/",				  "command",	  "calc",		  "(left:lng,right:sht):lng ",																														  "CALCbinarycheckDIVlngsht;"			  ]
[ "/",				  "command",	  "calc",		  "(left:lng,right:bte):lng ",																														  "CALCbinarycheckDIVlngbte;"			  ]
[ "/",				  "command",	  "calc",		  "(left:dbl,right:dbl):dbl ",																														  "CALCbinarycheckDIVdbldbl;"			  ]
[ "/",				  "command",	  "calc",		  "(left:dbl,right:flt):dbl ",																														  "CALCbinarycheckDIVdblflt;"			  ]
[ "/",				  "command",	  "calc",		  "(left:dbl,right:lng):dbl ",																														  "CALCbinarycheckDIVdbllng;"			  ]
[ "/",				  "command",	  "calc",		  "(left:dbl,right:wrd):dbl ",																														  "CALCbinarycheckDIVdblwrd;"			  ]
[ "/",				  "command",	  "calc",		  "(left:dbl,right:int):dbl ",																														  "CALCbinarycheckDIVdblint;"			  ]
[ "/",				  "command",	  "calc",		  "(left:dbl,right:sht):dbl ",																														  "CALCbinarycheckDIVdblsht;"			  ]
[ "/",				  "command",	  "calc",		  "(left:dbl,right:bte):dbl ",																														  "CALCbinarycheckDIVdblbte;"			  ]
[ "/",				  "command",	  "calc",		  "(left:flt,right:dbl):dbl ",																														  "CALCbinarycheckDIVfltdbl;"			  ]
[ "/",				  "command",	  "calc",		  "(left:flt,right:flt):flt ",																														  "CALCbinarycheckDIVfltflt;"			  ]
[ "/",				  "command",	  "calc",		  "(left:flt,right:lng):flt ",																														  "CALCbinarycheckDIVfltlng;"			  ]
[ "/",				  "command",	  "calc",		  "(left:flt,right:wrd):flt ",																														  "CALCbinarycheckDIVfltwrd;"			  ]
[ "/",				  "command",	  "calc",		  "(left:flt,right:int):flt ",																														  "CALCbinarycheckDIVfltint;"			  ]
[ "/",				  "command",	  "calc",		  "(left:flt,right:sht):flt ",																														  "CALCbinarycheckDIVfltsht;"			  ]
[ "/",				  "command",	  "calc",		  "(left:flt,right:bte):flt ",																														  "CALCbinarycheckDIVfltbte;"			  ]
[ "/",				  "command",	  "calc",		  "(left:wrd,right:dbl):dbl ",																														  "CALCbinarycheckDIVwrddbl;"			  ]
[ "/",				  "command",	  "calc",		  "(left:wrd,right:flt):flt ",																														  "CALCbinarycheckDIVwrdflt;"			  ]
[ "/",				  "command",	  "calc",		  "(left:wrd,right:lng):lng ",																														  "CALCbinarycheckDIVwrdlng;"			  ]
[ "/",				  "command",	  "calc",		  "(left:wrd,right:wrd):wrd ",																														  "CALCbinarycheckDIVwrdwrd;"			  ]
[ "/",				  "command",	  "calc",		  "(left:wrd,right:int):wrd ",																														  "CALCbinarycheckDIVwrdint;"			  ]
[ "/",				  "command",	  "calc",		  "(left:wrd,right:sht):wrd ",																														  "CALCbinarycheckDIVwrdsht;"			  ]
[ "/",				  "command",	  "calc",		  "(left:wrd,right:bte):wrd ",																														  "CALCbinarycheckDIVwrdbte;"			  ]
[ "/",				  "command",	  "calc",		  "(left:int,right:dbl):dbl ",																														  "CALCbinarycheckDIVintdbl;"			  ]
[ "/",				  "command",	  "calc",		  "(left:int,right:flt):flt ",																														  "CALCbinarycheckDIVintflt;"			  ]
[ "/",				  "command",	  "calc",		  "(left:int,right:lng):lng ",																														  "CALCbinarycheckDIVintlng;"			  ]
[ "/",				  "command",	  "calc",		  "(left:int,right:wrd):wrd ",																														  "CALCbinarycheckDIVintwrd;"			  ]
[ "/",				  "command",	  "calc",		  "(left:int,right:int):int ",																														  "CALCbinarycheckDIVintint;"			  ]
[ "/",				  "command",	  "calc",		  "(left:int,right:sht):int ",																														  "CALCbinarycheckDIVintsht;"			  ]
[ "/",				  "command",	  "calc",		  "(left:int,right:bte):int ",																														  "CALCbinarycheckDIVintbte;"			  ]
[ "/",				  "command",	  "calc",		  "(left:sht,right:dbl):dbl ",																														  "CALCbinarycheckDIVshtdbl;"			  ]
[ "/",				  "command",	  "calc",		  "(left:sht,right:flt):flt ",																														  "CALCbinarycheckDIVshtflt;"			  ]
[ "/",				  "command",	  "calc",		  "(left:sht,right:lng):lng ",																														  "CALCbinarycheckDIVshtlng;"			  ]
[ "/",				  "command",	  "calc",		  "(left:sht,right:wrd):wrd ",																														  "CALCbinarycheckDIVshtwrd;"			  ]
[ "/",				  "command",	  "calc",		  "(left:sht,right:int):int ",																														  "CALCbinarycheckDIVshtint;"			  ]
[ "/",				  "command",	  "calc",		  "(left:sht,right:sht):sht ",																														  "CALCbinarycheckDIVshtsht;"			  ]
[ "/",				  "command",	  "calc",		  "(left:sht,right:bte):sht ",																														  "CALCbinarycheckDIVshtbte;"			  ]
[ "/",				  "command",	  "calc",		  "(left:bte,right:dbl):dbl ",																														  "CALCbinarycheckDIVbtedbl;"			  ]
[ "/",				  "command",	  "calc",		  "(left:bte,right:flt):flt ",																														  "CALCbinarycheckDIVbteflt;"			  ]
[ "/",				  "command",	  "calc",		  "(left:bte,right:lng):lng ",																														  "CALCbinarycheckDIVbtelng;"			  ]
[ "/",				  "command",	  "calc",		  "(left:bte,right:wrd):wrd ",																														  "CALCbinarycheckDIVbtewrd;"			  ]
[ "/",				  "command",	  "calc",		  "(left:bte,right:int):int ",																														  "CALCbinarycheckDIVbteint;"			  ]
[ "/",				  "command",	  "calc",		  "(left:bte,right:sht):sht ",																														  "CALCbinarycheckDIVbtesht;"			  ]
[ "/",				  "command",	  "calc",		  "(left:bte,right:bte):bte ",																														  "CALCbinarycheckDIVbtebte;"			  ]
[ "/",				  "command",	  "calc",		  "(left:oid,right:oid):oid ",																														  "CALCbinarycheckDIVoidoid;"			  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",																								  "MTIMEaccum_timestamp_cst_LT;"		  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",																								  "MTIMEaccum_timestamp_LT_cst;"		  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",																						  "MTIMEaccum_timestamp_LT;"			  ]
[ "<",				  "command",	  "batcalc",		  "(l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",																										  "MTIMEbat_timestamp_cst_LT;"			  ]
[ "<",				  "command",	  "batcalc",		  "(l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",																										  "MTIMEbat_timestamp_LT_cst;"			  ]
[ "<",				  "command",	  "batcalc",		  "(l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",																									  "MTIMEbat_timestamp_LT;"			  ]
[ "<",				  "command",	  "batcalc",		  "(l:bat[:oid,:timestamp],r:bat[:oid,:timestamp]):bat[:oid,:bit] ",																									  "MTIMEbat_timestamp_LT;"			  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",																								  "MTIMEaccum_daytime_cst_LT;"			  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",																									  "MTIMEaccum_daytime_LT_cst;"			  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",																							  "MTIMEaccum_daytime_LT;"			  ]
[ "<",				  "command",	  "batcalc",		  "(l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",																											  "MTIMEbat_daytime_cst_LT;"			  ]
[ "<",				  "command",	  "batcalc",		  "(l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",																											  "MTIMEbat_daytime_LT_cst;"			  ]
[ "<",				  "command",	  "batcalc",		  "(l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",																									  "MTIMEbat_daytime_LT;"			  ]
[ "<",				  "command",	  "batcalc",		  "(l:bat[:oid,:daytime],r:bat[:oid,:daytime]):bat[:oid,:bit] ",																									  "MTIMEbat_daytime_LT;"			  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:date],r:date):bat[:void,:bit] ",																									  "MTIMEaccum_date_cst_LT;"			  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:oid,:date],r:date):bat[:oid,:bit] ",																									  "MTIMEaccum_date_LT_cst;"			  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",																								  "MTIMEaccum_date_LT;"				  ]
[ "<",				  "command",	  "batcalc",		  "(l:bat[:void,:date],r:date):bat[:void,:bit] ",																											  "MTIMEbat_date_cst_LT;"			  ]
[ "<",				  "command",	  "batcalc",		  "(l:bat[:oid,:date],r:date):bat[:oid,:bit] ",																												  "MTIMEbat_date_LT_cst;"			  ]
[ "<",				  "command",	  "batcalc",		  "(l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",																										  "MTIMEbat_date_LT;"				  ]
[ "<",				  "command",	  "batcalc",		  "(l:bat[:oid,:date],r:bat[:oid,:date]):bat[:oid,:bit] ",																										  "MTIMEbat_date_LT;"				  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",																									  "CMDaccum_LT_cst_oid;"			  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",																									  "CMDaccum_LT_oid_cst;"			  ]
[ "<",				  "command",	  "batcalc",		  "(cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",																											  "CMD_LT_cst_oid;"				  ]
[ "<",				  "command",	  "batcalc",		  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",																											  "CMD_LT_oid_cst;"				  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",																							  "CMDaccum_LT_oid;"				  ]
[ "<",				  "command",	  "batcalc",		  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",																										  "CMD_LT_oid;"					  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",																									  "CMDaccum_LT_cst_flt;"			  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",																									  "CMDaccum_LT_flt_cst;"			  ]
[ "<",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",																											  "CMD_LT_cst_flt;"				  ]
[ "<",				  "command",	  "batcalc",		  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",																											  "CMD_LT_flt_cst;"				  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",																							  "CMDaccum_LT_flt;"				  ]
[ "<",				  "command",	  "batcalc",		  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",																										  "CMD_LT_flt;"					  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																									  "CMDaccum_LT_cst_dbl;"			  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",																									  "CMDaccum_LT_dbl_cst;"			  ]
[ "<",				  "command",	  "batcalc",		  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																											  "CMD_LT_cst_dbl;"				  ]
[ "<",				  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",																											  "CMD_LT_dbl_cst;"				  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																							  "CMDaccum_LT_dbl;"				  ]
[ "<",				  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																										  "CMD_LT_dbl;"					  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",																									  "CMDaccum_LT_cst_lng;"			  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",																									  "CMDaccum_LT_lng_cst;"			  ]
[ "<",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",																											  "CMD_LT_cst_lng;"				  ]
[ "<",				  "command",	  "batcalc",		  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",																											  "CMD_LT_lng_cst;"				  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",																							  "CMDaccum_LT_lng;"				  ]
[ "<",				  "command",	  "batcalc",		  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",																										  "CMD_LT_lng;"					  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																									  "CMDaccum_LT_cst_wrd;"			  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",																									  "CMDaccum_LT_wrd_cst;"			  ]
[ "<",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																											  "CMD_LT_cst_wrd;"				  ]
[ "<",				  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",																											  "CMD_LT_wrd_cst;"				  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																							  "CMDaccum_LT_wrd;"				  ]
[ "<",				  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																										  "CMD_LT_wrd;"					  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",																									  "CMDaccum_LT_cst_int;"			  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",																									  "CMDaccum_LT_int_cst;"			  ]
[ "<",				  "command",	  "batcalc",		  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",																											  "CMD_LT_cst_int;"				  ]
[ "<",				  "command",	  "batcalc",		  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",																											  "CMD_LT_int_cst;"				  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",																							  "CMDaccum_LT_int;"				  ]
[ "<",				  "command",	  "batcalc",		  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",																										  "CMD_LT_int;"					  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",																									  "CMDaccum_LT_cst_sht;"			  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",																									  "CMDaccum_LT_sht_cst;"			  ]
[ "<",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",																											  "CMD_LT_cst_sht;"				  ]
[ "<",				  "command",	  "batcalc",		  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",																											  "CMD_LT_sht_cst;"				  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",																							  "CMDaccum_LT_sht;"				  ]
[ "<",				  "command",	  "batcalc",		  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",																										  "CMD_LT_sht;"					  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",																									  "CMDaccum_LT_cst_bte;"			  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",																									  "CMDaccum_LT_bte_cst;"			  ]
[ "<",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",																											  "CMD_LT_cst_bte;"				  ]
[ "<",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",																											  "CMD_LT_bte_cst;"				  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",																							  "CMDaccum_LT_bte;"				  ]
[ "<",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",																										  "CMD_LT_bte;"					  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",																									  "CMDaccum_LT_cst_bit;"			  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",																									  "CMDaccum_LT_bit_cst;"			  ]
[ "<",				  "command",	  "batcalc",		  "(cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",																											  "CMD_LT_cst_bit;"				  ]
[ "<",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",																											  "CMD_LT_bit_cst;"				  ]
[ "<",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",																							  "CMDaccum_LT_bit;"				  ]
[ "<",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",																										  "CMD_LT_bit;"					  ]
[ "<",				  "command",	  "inet",		  "(v:inet,w:inet):bit ",																														  "INET_comp_LT;"				  ]
[ "<",				  "command",	  "date",		  "(v:date,w:date):bit ",																														  "MTIMEdate_LT;"				  ]
[ "<",				  "command",	  "timestamp",		  "(v:timestamp,w:timestamp):bit ",																													  "MTIMEtimestamp_LT;"				  ]
[ "<",				  "command",	  "daytime",		  "(v:daytime,w:daytime):bit ",																														  "MTIMEdaytime_LT;"				  ]
[ "<",				  "command",	  "calc",		  "(v:inet,w:inet):bit ",																														  "INET_comp_LT;"				  ]
[ "<",				  "command",	  "calc",		  "(v:timestamp,w:timestamp):bit ",																													  "MTIMEtimestamp_LT;"				  ]
[ "<",				  "command",	  "calc",		  "(v:daytime,w:daytime):bit ",																														  "MTIMEdaytime_LT;"				  ]
[ "<",				  "command",	  "calc",		  "(v:date,w:date):bit ",																														  "MTIMEdate_LT;"				  ]
[ "<",				  "command",	  "calc",		  "(left:str,right:str):bit ",																														  "CALCcompLTstrstr;"				  ]
[ "<",				  "command",	  "calc",		  "(left:lng,right:lng):bit ",																														  "CALCcompLTlnglng;"				  ]
[ "<",				  "command",	  "calc",		  "(left:lng,right:int):bit ",																														  "CALCcompLTlngint;"				  ]
[ "<",				  "command",	  "calc",		  "(left:lng,right:sht):bit ",																														  "CALCcompLTlngsht;"				  ]
[ "<",				  "command",	  "calc",		  "(left:wrd,right:bte):bit ",																														  "CALCcompLTwrdbte;"				  ]
[ "<",				  "command",	  "calc",		  "(left:int,right:lng):bit ",																														  "CALCcompLTintlng;"				  ]
[ "<",				  "command",	  "calc",		  "(left:int,right:int):bit ",																														  "CALCcompLTintint;"				  ]
[ "<",				  "command",	  "calc",		  "(left:int,right:sht):bit ",																														  "CALCcompLTintsht;"				  ]
[ "<",				  "command",	  "calc",		  "(left:int,right:bte):bit ",																														  "CALCcompLTintbte;"				  ]
[ "<",				  "command",	  "calc",		  "(left:int,right:wrd):bit ",																														  "CALCcompLTintwrd;"				  ]
[ "<",				  "command",	  "calc",		  "(left:wrd,right:lng):bit ",																														  "CALCcompLTwrdlng;"				  ]
[ "<",				  "command",	  "calc",		  "(left:wrd,right:int):bit ",																														  "CALCcompLTwrdint;"				  ]
[ "<",				  "command",	  "calc",		  "(left:wrd,right:wrd):bit ",																														  "CALCcompLTwrdwrd;"				  ]
[ "<",				  "command",	  "calc",		  "(left:wrd,right:sht):bit ",																														  "CALCcompLTwrdsht;"				  ]
[ "<",				  "command",	  "calc",		  "(left:wrd,right:bte):bit ",																														  "CALCcompLTwrdbte;"				  ]
[ "<",				  "command",	  "calc",		  "(left:sht,right:lng):bit ",																														  "CALCcompLTshtlng;"				  ]
[ "<",				  "command",	  "calc",		  "(left:sht,right:int):bit ",																														  "CALCcompLTshtint;"				  ]
[ "<",				  "command",	  "calc",		  "(left:sht,right:wrd):bit ",																														  "CALCcompLTshtwrd;"				  ]
[ "<",				  "command",	  "calc",		  "(left:sht,right:sht):bit ",																														  "CALCcompLTshtsht;"				  ]
[ "<",				  "command",	  "calc",		  "(left:sht,right:bte):bit ",																														  "CALCcompLTshtbte;"				  ]
[ "<",				  "command",	  "calc",		  "(left:bte,right:lng):bit ",																														  "CALCcompLTbtelng;"				  ]
[ "<",				  "command",	  "calc",		  "(left:bte,right:wrd):bit ",																														  "CALCcompLTbtewrd;"				  ]
[ "<",				  "command",	  "calc",		  "(left:bte,right:int):bit ",																														  "CALCcompLTbteint;"				  ]
[ "<",				  "command",	  "calc",		  "(left:bte,right:sht):bit ",																														  "CALCcompLTbtesht;"				  ]
[ "<",				  "command",	  "calc",		  "(left:bte,right:bte):bit ",																														  "CALCcompLTbtebte;"				  ]
[ "<",				  "command",	  "calc",		  "(left:dbl,right:dbl):bit ",																														  "CALCcompLTdbldbl;"				  ]
[ "<",				  "command",	  "calc",		  "(left:flt,right:dbl):bit ",																														  "CALCcompLTfltdbl;"				  ]
[ "<",				  "command",	  "calc",		  "(left:flt,right:flt):bit ",																														  "CALCcompLTfltflt;"				  ]
[ "<",				  "command",	  "calc",		  "(left:oid,right:oid):bit ",																														  "CALCcompLToidoid;"				  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:int,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumLSHcst_lng_int_lng;"		  ]
[ "<<",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumLSHcst2_lng_int_lng;"		  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumLSH_lng_int_lng;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",																										  "CMDbatLSH_lng_int_lng;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:int]):bat[:oid,:lng] ",																												  "CMDcstLSHbat_lng_int_lng;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:int):bat[:oid,:lng] ",																												  "CMDbatLSHcst_lng_int_lng;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:int,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumLSHcst_wrd_int_wrd;"		  ]
[ "<<",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumLSHcst2_wrd_int_wrd;"		  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumLSH_wrd_int_wrd;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:int]):bat[:oid,:wrd] ",																										  "CMDbatLSH_wrd_int_wrd;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] ",																												  "CMDcstLSHbat_wrd_int_wrd;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:int):bat[:oid,:wrd] ",																												  "CMDbatLSHcst_wrd_int_wrd;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumLSHcst_int_int_int;"		  ]
[ "<<",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumLSHcst2_int_int_int;"		  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumLSH_int_int_int;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",																										  "CMDbatLSH_int_int_int;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",																												  "CMDcstLSHbat_int_int_int;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",																												  "CMDbatLSHcst_int_int_int;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:int,bflag:bit,cflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumLSHcst_sht_int_sht;"		  ]
[ "<<",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumLSHcst2_sht_int_sht;"		  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:sht] ",																								  "CMDbataccumLSH_sht_int_sht;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:sht] ",																										  "CMDbatLSH_sht_int_sht;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:sht] ",																												  "CMDcstLSHbat_sht_int_sht;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:int):bat[:oid,:sht] ",																												  "CMDbatLSHcst_sht_int_sht;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:int,bflag:bit,cflag:bit):bat[:oid,:bte] ",																									  "CMDbataccumLSHcst_bte_int_bte;"		  ]
[ "<<",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:bte] ",																									  "CMDbataccumLSHcst2_bte_int_bte;"		  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:bte] ",																								  "CMDbataccumLSH_bte_int_bte;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:bte] ",																										  "CMDbatLSH_bte_int_bte;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:bte] ",																												  "CMDcstLSHbat_bte_int_bte;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:int):bat[:oid,:bte] ",																												  "CMDbatLSHcst_bte_int_bte;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:oid],cst:int,bflag:bit,cflag:bit):bat[:oid,:oid] ",																									  "CMDbataccumLSHcst_oid_int_oid;"		  ]
[ "<<",				  "command",	  "batcalc",		  "(cst:oid,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:oid] ",																									  "CMDbataccumLSHcst2_oid_int_oid;"		  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:oid],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:oid] ",																								  "CMDbataccumLSH_oid_int_oid;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:oid],c:bat[:oid,:int]):bat[:oid,:oid] ",																										  "CMDbatLSH_oid_int_oid;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(cst:oid,b:bat[:oid,:int]):bat[:oid,:oid] ",																												  "CMDcstLSHbat_oid_int_oid;"			  ]
[ "<<",				  "command",	  "batcalc",		  "(b:bat[:oid,:oid],cst:int):bat[:oid,:oid] ",																												  "CMDbatLSHcst_oid_int_oid;"			  ]
[ "<<",				  "command",	  "inet",		  "(v:inet,w:inet):bit ",																														  "INET_comp_CW;"				  ]
[ "<<",				  "command",	  "calc",		  "(left:lng,right:int):lng ",																														  "CALCbinaryLSHlngint;"			  ]
[ "<<",				  "command",	  "calc",		  "(left:int,right:int):int ",																														  "CALCbinaryLSHintint;"			  ]
[ "<<",				  "command",	  "calc",		  "(left:sht,right:int):sht ",																														  "CALCbinaryLSHshtint;"			  ]
[ "<<",				  "command",	  "calc",		  "(left:bte,right:int):bte ",																														  "CALCbinaryLSHbteint;"			  ]
[ "<<=",			  "command",	  "inet",		  "(v:inet,w:inet):bit ",																														  "INET_comp_CWE;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",																								  "MTIMEaccum_timestamp_cst_LE;"		  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",																								  "MTIMEaccum_timestamp_LE_cst;"		  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",																						  "MTIMEaccum_timestamp_LE;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",																										  "MTIMEbat_timestamp_cst_LE;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",																										  "MTIMEbat_timestamp_LE_cst;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",																									  "MTIMEbat_timestamp_LE;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(l:bat[:oid,:timestamp],r:bat[:oid,:timestamp]):bat[:oid,:bit] ",																									  "MTIMEbat_timestamp_LE;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",																								  "MTIMEaccum_daytime_cst_LE;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",																									  "MTIMEaccum_daytime_LE_cst;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",																							  "MTIMEaccum_daytime_LE;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",																											  "MTIMEbat_daytime_cst_LE;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",																											  "MTIMEbat_daytime_LE_cst;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",																									  "MTIMEbat_daytime_LE;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(l:bat[:oid,:daytime],r:bat[:oid,:daytime]):bat[:oid,:bit] ",																									  "MTIMEbat_daytime_LE;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:date],r:date):bat[:void,:bit] ",																									  "MTIMEaccum_date_cst_LE;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:oid,:date],r:date):bat[:oid,:bit] ",																									  "MTIMEaccum_date_LE_cst;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",																								  "MTIMEaccum_date_LE;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(l:bat[:void,:date],r:date):bat[:void,:bit] ",																											  "MTIMEbat_date_cst_LE;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(l:bat[:oid,:date],r:date):bat[:oid,:bit] ",																												  "MTIMEbat_date_LE_cst;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",																										  "MTIMEbat_date_LE;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(l:bat[:oid,:date],r:bat[:oid,:date]):bat[:oid,:bit] ",																										  "MTIMEbat_date_LE;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",																									  "CMDaccum_LE_cst_oid;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",																									  "CMDaccum_LE_oid_cst;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",																											  "CMD_LE_cst_oid;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",																											  "CMD_LE_oid_cst;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",																							  "CMDaccum_LE_oid;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",																										  "CMD_LE_oid;"					  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",																									  "CMDaccum_LE_cst_flt;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",																									  "CMDaccum_LE_flt_cst;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",																											  "CMD_LE_cst_flt;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",																											  "CMD_LE_flt_cst;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",																							  "CMDaccum_LE_flt;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",																										  "CMD_LE_flt;"					  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																									  "CMDaccum_LE_cst_dbl;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",																									  "CMDaccum_LE_dbl_cst;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																											  "CMD_LE_cst_dbl;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",																											  "CMD_LE_dbl_cst;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																							  "CMDaccum_LE_dbl;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																										  "CMD_LE_dbl;"					  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",																									  "CMDaccum_LE_cst_lng;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",																									  "CMDaccum_LE_lng_cst;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",																											  "CMD_LE_cst_lng;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",																											  "CMD_LE_lng_cst;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",																							  "CMDaccum_LE_lng;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",																										  "CMD_LE_lng;"					  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																									  "CMDaccum_LE_cst_wrd;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",																									  "CMDaccum_LE_wrd_cst;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																											  "CMD_LE_cst_wrd;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",																											  "CMD_LE_wrd_cst;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																							  "CMDaccum_LE_wrd;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																										  "CMD_LE_wrd;"					  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",																									  "CMDaccum_LE_cst_int;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",																									  "CMDaccum_LE_int_cst;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",																											  "CMD_LE_cst_int;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",																											  "CMD_LE_int_cst;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",																							  "CMDaccum_LE_int;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",																										  "CMD_LE_int;"					  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",																									  "CMDaccum_LE_cst_sht;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",																									  "CMDaccum_LE_sht_cst;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",																											  "CMD_LE_cst_sht;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",																											  "CMD_LE_sht_cst;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",																							  "CMDaccum_LE_sht;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",																										  "CMD_LE_sht;"					  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",																									  "CMDaccum_LE_cst_bte;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",																									  "CMDaccum_LE_bte_cst;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",																											  "CMD_LE_cst_bte;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",																											  "CMD_LE_bte_cst;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",																							  "CMDaccum_LE_bte;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",																										  "CMD_LE_bte;"					  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",																									  "CMDaccum_LE_cst_bit;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",																									  "CMDaccum_LE_bit_cst;"			  ]
[ "<=",				  "command",	  "batcalc",		  "(cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",																											  "CMD_LE_cst_bit;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",																											  "CMD_LE_bit_cst;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",																							  "CMDaccum_LE_bit;"				  ]
[ "<=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",																										  "CMD_LE_bit;"					  ]
[ "<=",				  "command",	  "inet",		  "(v:inet,w:inet):bit ",																														  "INET_comp_LE;"				  ]
[ "<=",				  "command",	  "date",		  "(v:date,w:date):bit ",																														  "MTIMEdate_LE;"				  ]
[ "<=",				  "command",	  "timestamp",		  "(v:timestamp,w:timestamp):bit ",																													  "MTIMEtimestamp_LE;"				  ]
[ "<=",				  "command",	  "daytime",		  "(v:daytime,w:daytime):bit ",																														  "MTIMEdaytime_LE;"				  ]
[ "<=",				  "command",	  "calc",		  "(v:inet,w:inet):bit ",																														  "INET_comp_LE;"				  ]
[ "<=",				  "command",	  "calc",		  "(v:timestamp,w:timestamp):bit ",																													  "MTIMEtimestamp_LE;"				  ]
[ "<=",				  "command",	  "calc",		  "(v:daytime,w:daytime):bit ",																														  "MTIMEdaytime_LE;"				  ]
[ "<=",				  "command",	  "calc",		  "(v:date,w:date):bit ",																														  "MTIMEdate_LE;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:str,right:str):bit ",																														  "CALCcompLEstrstr;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:lng,right:lng):bit ",																														  "CALCcompLElnglng;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:lng,right:int):bit ",																														  "CALCcompLElngint;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:lng,right:sht):bit ",																														  "CALCcompLElngsht;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:wrd,right:bte):bit ",																														  "CALCcompLEwrdbte;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:int,right:lng):bit ",																														  "CALCcompLEintlng;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:int,right:int):bit ",																														  "CALCcompLEintint;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:int,right:sht):bit ",																														  "CALCcompLEintsht;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:int,right:bte):bit ",																														  "CALCcompLEintbte;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:int,right:wrd):bit ",																														  "CALCcompLEintwrd;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:wrd,right:lng):bit ",																														  "CALCcompLEwrdlng;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:wrd,right:int):bit ",																														  "CALCcompLEwrdint;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:wrd,right:wrd):bit ",																														  "CALCcompLEwrdwrd;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:wrd,right:sht):bit ",																														  "CALCcompLEwrdsht;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:wrd,right:bte):bit ",																														  "CALCcompLEwrdbte;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:sht,right:lng):bit ",																														  "CALCcompLEshtlng;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:sht,right:int):bit ",																														  "CALCcompLEshtint;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:sht,right:wrd):bit ",																														  "CALCcompLEshtwrd;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:sht,right:sht):bit ",																														  "CALCcompLEshtsht;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:sht,right:bte):bit ",																														  "CALCcompLEshtbte;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:bte,right:lng):bit ",																														  "CALCcompLEbtelng;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:bte,right:wrd):bit ",																														  "CALCcompLEbtewrd;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:bte,right:int):bit ",																														  "CALCcompLEbteint;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:bte,right:sht):bit ",																														  "CALCcompLEbtesht;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:bte,right:bte):bit ",																														  "CALCcompLEbtebte;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:dbl,right:dbl):bit ",																														  "CALCcompLEdbldbl;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:flt,right:dbl):bit ",																														  "CALCcompLEfltdbl;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:flt,right:flt):bit ",																														  "CALCcompLEfltflt;"				  ]
[ "<=",				  "command",	  "calc",		  "(left:oid,right:oid):bit ",																														  "CALCcompLEoidoid;"				  ]
[ "=",				  "command",	  "inet",		  "(v:inet,w:inet):bit ",																														  "INET_comp_EQ;"				  ]
[ "=",				  "command",	  "calc",		  "(v:inet,w:inet):bit ",																														  "INET_comp_EQ;"				  ]
[ "==",				  "command",	  "batcalc",		  "(l:bat[:oid,:str],r:str):bat[:oid,:bit] ",																												  "STRbatEqualCst;"				  ]
[ "==",				  "command",	  "batcalc",		  "(l:bat[:oid,:str],r:bat[:oid,:str]):bat[:oid,:bit] ",																										  "STRbatEqual;"				  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",																								  "MTIMEaccum_timestamp_cst_EQ;"		  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",																								  "MTIMEaccum_timestamp_EQ_cst;"		  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",																						  "MTIMEaccum_timestamp_EQ;"			  ]
[ "==",				  "command",	  "batcalc",		  "(l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",																										  "MTIMEbat_timestamp_cst_EQ;"			  ]
[ "==",				  "command",	  "batcalc",		  "(l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",																										  "MTIMEbat_timestamp_EQ_cst;"			  ]
[ "==",				  "command",	  "batcalc",		  "(l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",																									  "MTIMEbat_timestamp_EQ;"			  ]
[ "==",				  "command",	  "batcalc",		  "(l:bat[:oid,:timestamp],r:bat[:oid,:timestamp]):bat[:oid,:bit] ",																									  "MTIMEbat_timestamp_EQ;"			  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",																								  "MTIMEaccum_daytime_cst_EQ;"			  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",																									  "MTIMEaccum_daytime_EQ_cst;"			  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",																							  "MTIMEaccum_daytime_EQ;"			  ]
[ "==",				  "command",	  "batcalc",		  "(l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",																											  "MTIMEbat_daytime_cst_EQ;"			  ]
[ "==",				  "command",	  "batcalc",		  "(l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",																											  "MTIMEbat_daytime_EQ_cst;"			  ]
[ "==",				  "command",	  "batcalc",		  "(l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",																									  "MTIMEbat_daytime_EQ;"			  ]
[ "==",				  "command",	  "batcalc",		  "(l:bat[:oid,:daytime],r:bat[:oid,:daytime]):bat[:oid,:bit] ",																									  "MTIMEbat_daytime_EQ;"			  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:date],r:date):bat[:void,:bit] ",																									  "MTIMEaccum_date_cst_EQ;"			  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:oid,:date],r:date):bat[:oid,:bit] ",																									  "MTIMEaccum_date_EQ_cst;"			  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",																								  "MTIMEaccum_date_EQ;"				  ]
[ "==",				  "command",	  "batcalc",		  "(l:bat[:void,:date],r:date):bat[:void,:bit] ",																											  "MTIMEbat_date_cst_EQ;"			  ]
[ "==",				  "command",	  "batcalc",		  "(l:bat[:oid,:date],r:date):bat[:oid,:bit] ",																												  "MTIMEbat_date_EQ_cst;"			  ]
[ "==",				  "command",	  "batcalc",		  "(l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",																										  "MTIMEbat_date_EQ;"				  ]
[ "==",				  "command",	  "batcalc",		  "(l:bat[:oid,:date],r:bat[:oid,:date]):bat[:oid,:bit] ",																										  "MTIMEbat_date_EQ;"				  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",																									  "CMDaccum_EQ_cst_oid;"			  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",																									  "CMDaccum_EQ_oid_cst;"			  ]
[ "==",				  "command",	  "batcalc",		  "(cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",																											  "CMD_EQ_cst_oid;"				  ]
[ "==",				  "command",	  "batcalc",		  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",																											  "CMD_EQ_oid_cst;"				  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",																							  "CMDaccum_EQ_oid;"				  ]
[ "==",				  "command",	  "batcalc",		  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",																										  "CMD_EQ_oid;"					  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",																									  "CMDaccum_EQ_cst_flt;"			  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",																									  "CMDaccum_EQ_flt_cst;"			  ]
[ "==",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",																											  "CMD_EQ_cst_flt;"				  ]
[ "==",				  "command",	  "batcalc",		  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",																											  "CMD_EQ_flt_cst;"				  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",																							  "CMDaccum_EQ_flt;"				  ]
[ "==",				  "command",	  "batcalc",		  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",																										  "CMD_EQ_flt;"					  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																									  "CMDaccum_EQ_cst_dbl;"			  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",																									  "CMDaccum_EQ_dbl_cst;"			  ]
[ "==",				  "command",	  "batcalc",		  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																											  "CMD_EQ_cst_dbl;"				  ]
[ "==",				  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",																											  "CMD_EQ_dbl_cst;"				  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																							  "CMDaccum_EQ_dbl;"				  ]
[ "==",				  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																										  "CMD_EQ_dbl;"					  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",																									  "CMDaccum_EQ_cst_lng;"			  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",																									  "CMDaccum_EQ_lng_cst;"			  ]
[ "==",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",																											  "CMD_EQ_cst_lng;"				  ]
[ "==",				  "command",	  "batcalc",		  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",																											  "CMD_EQ_lng_cst;"				  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",																							  "CMDaccum_EQ_lng;"				  ]
[ "==",				  "command",	  "batcalc",		  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",																										  "CMD_EQ_lng;"					  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																									  "CMDaccum_EQ_cst_wrd;"			  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",																									  "CMDaccum_EQ_wrd_cst;"			  ]
[ "==",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																											  "CMD_EQ_cst_wrd;"				  ]
[ "==",				  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",																											  "CMD_EQ_wrd_cst;"				  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																							  "CMDaccum_EQ_wrd;"				  ]
[ "==",				  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																										  "CMD_EQ_wrd;"					  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",																									  "CMDaccum_EQ_cst_int;"			  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",																									  "CMDaccum_EQ_int_cst;"			  ]
[ "==",				  "command",	  "batcalc",		  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",																											  "CMD_EQ_cst_int;"				  ]
[ "==",				  "command",	  "batcalc",		  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",																											  "CMD_EQ_int_cst;"				  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",																							  "CMDaccum_EQ_int;"				  ]
[ "==",				  "command",	  "batcalc",		  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",																										  "CMD_EQ_int;"					  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",																									  "CMDaccum_EQ_cst_sht;"			  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",																									  "CMDaccum_EQ_sht_cst;"			  ]
[ "==",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",																											  "CMD_EQ_cst_sht;"				  ]
[ "==",				  "command",	  "batcalc",		  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",																											  "CMD_EQ_sht_cst;"				  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",																							  "CMDaccum_EQ_sht;"				  ]
[ "==",				  "command",	  "batcalc",		  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",																										  "CMD_EQ_sht;"					  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",																									  "CMDaccum_EQ_cst_bte;"			  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",																									  "CMDaccum_EQ_bte_cst;"			  ]
[ "==",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",																											  "CMD_EQ_cst_bte;"				  ]
[ "==",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",																											  "CMD_EQ_bte_cst;"				  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",																							  "CMDaccum_EQ_bte;"				  ]
[ "==",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",																										  "CMD_EQ_bte;"					  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",																									  "CMDaccum_EQ_cst_bit;"			  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",																									  "CMDaccum_EQ_bit_cst;"			  ]
[ "==",				  "command",	  "batcalc",		  "(cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",																											  "CMD_EQ_cst_bit;"				  ]
[ "==",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",																											  "CMD_EQ_bit_cst;"				  ]
[ "==",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",																							  "CMDaccum_EQ_bit;"				  ]
[ "==",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",																										  "CMD_EQ_bit;"					  ]
[ "==",				  "command",	  "date",		  "(v:date,w:date):bit ",																														  "MTIMEdate_EQ;"				  ]
[ "==",				  "command",	  "timestamp",		  "(v:timestamp,w:timestamp):bit ",																													  "MTIMEtimestamp_EQ;"				  ]
[ "==",				  "command",	  "daytime",		  "(v:daytime,w:daytime):bit ",																														  "MTIMEdaytime_EQ;"				  ]
[ "==",				  "command",	  "calc",		  "(v:timestamp,w:timestamp):bit ",																													  "MTIMEtimestamp_EQ;"				  ]
[ "==",				  "command",	  "calc",		  "(v:daytime,w:daytime):bit ",																														  "MTIMEdaytime_EQ;"				  ]
[ "==",				  "command",	  "calc",		  "(v:date,w:date):bit ",																														  "MTIMEdate_EQ;"				  ]
[ "==",				  "command",	  "calc",		  "(left:str,right:str):bit ",																														  "CALCcompEQstrstr;"				  ]
[ "==",				  "command",	  "calc",		  "(left:lng,right:lng):bit ",																														  "CALCcompEQlnglng;"				  ]
[ "==",				  "command",	  "calc",		  "(left:lng,right:int):bit ",																														  "CALCcompEQlngint;"				  ]
[ "==",				  "command",	  "calc",		  "(left:lng,right:sht):bit ",																														  "CALCcompEQlngsht;"				  ]
[ "==",				  "command",	  "calc",		  "(left:wrd,right:bte):bit ",																														  "CALCcompEQwrdbte;"				  ]
[ "==",				  "command",	  "calc",		  "(left:int,right:lng):bit ",																														  "CALCcompEQintlng;"				  ]
[ "==",				  "command",	  "calc",		  "(left:int,right:int):bit ",																														  "CALCcompEQintint;"				  ]
[ "==",				  "command",	  "calc",		  "(left:int,right:sht):bit ",																														  "CALCcompEQintsht;"				  ]
[ "==",				  "command",	  "calc",		  "(left:int,right:bte):bit ",																														  "CALCcompEQintbte;"				  ]
[ "==",				  "command",	  "calc",		  "(left:int,right:wrd):bit ",																														  "CALCcompEQintwrd;"				  ]
[ "==",				  "command",	  "calc",		  "(left:wrd,right:lng):bit ",																														  "CALCcompEQwrdlng;"				  ]
[ "==",				  "command",	  "calc",		  "(left:wrd,right:int):bit ",																														  "CALCcompEQwrdint;"				  ]
[ "==",				  "command",	  "calc",		  "(left:wrd,right:wrd):bit ",																														  "CALCcompEQwrdwrd;"				  ]
[ "==",				  "command",	  "calc",		  "(left:wrd,right:sht):bit ",																														  "CALCcompEQwrdsht;"				  ]
[ "==",				  "command",	  "calc",		  "(left:wrd,right:bte):bit ",																														  "CALCcompEQwrdbte;"				  ]
[ "==",				  "command",	  "calc",		  "(left:sht,right:lng):bit ",																														  "CALCcompEQshtlng;"				  ]
[ "==",				  "command",	  "calc",		  "(left:sht,right:int):bit ",																														  "CALCcompEQshtint;"				  ]
[ "==",				  "command",	  "calc",		  "(left:sht,right:wrd):bit ",																														  "CALCcompEQshtwrd;"				  ]
[ "==",				  "command",	  "calc",		  "(left:sht,right:sht):bit ",																														  "CALCcompEQshtsht;"				  ]
[ "==",				  "command",	  "calc",		  "(left:sht,right:bte):bit ",																														  "CALCcompEQshtbte;"				  ]
[ "==",				  "command",	  "calc",		  "(left:bte,right:lng):bit ",																														  "CALCcompEQbtelng;"				  ]
[ "==",				  "command",	  "calc",		  "(left:bte,right:wrd):bit ",																														  "CALCcompEQbtewrd;"				  ]
[ "==",				  "command",	  "calc",		  "(left:bte,right:int):bit ",																														  "CALCcompEQbteint;"				  ]
[ "==",				  "command",	  "calc",		  "(left:bte,right:sht):bit ",																														  "CALCcompEQbtesht;"				  ]
[ "==",				  "command",	  "calc",		  "(left:bte,right:bte):bit ",																														  "CALCcompEQbtebte;"				  ]
[ "==",				  "command",	  "calc",		  "(left:bit,right:lng):bit ",																														  "CALCcompEQbitlng;"				  ]
[ "==",				  "command",	  "calc",		  "(left:bit,right:int):bit ",																														  "CALCcompEQbitint;"				  ]
[ "==",				  "command",	  "calc",		  "(left:bit,right:sht):bit ",																														  "CALCcompEQbitsht;"				  ]
[ "==",				  "command",	  "calc",		  "(left:bit,right:bte):bit ",																														  "CALCcompEQbitbte;"				  ]
[ "==",				  "command",	  "calc",		  "(left:bit,right:bit):bit ",																														  "CALCcompEQbitbit;"				  ]
[ "==",				  "command",	  "calc",		  "(left:dbl,right:dbl):bit ",																														  "CALCcompEQdbldbl;"				  ]
[ "==",				  "command",	  "calc",		  "(left:flt,right:dbl):bit ",																														  "CALCcompEQfltdbl;"				  ]
[ "==",				  "command",	  "calc",		  "(left:flt,right:flt):bit ",																														  "CALCcompEQfltflt;"				  ]
[ "==",				  "command",	  "calc",		  "(left:oid,right:oid):bit ",																														  "CALCcompEQoidoid;"				  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",																								  "MTIMEaccum_timestamp_cst_GT;"		  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",																								  "MTIMEaccum_timestamp_GT_cst;"		  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",																						  "MTIMEaccum_timestamp_GT;"			  ]
[ ">",				  "command",	  "batcalc",		  "(l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",																										  "MTIMEbat_timestamp_cst_GT;"			  ]
[ ">",				  "command",	  "batcalc",		  "(l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",																										  "MTIMEbat_timestamp_GT_cst;"			  ]
[ ">",				  "command",	  "batcalc",		  "(l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",																									  "MTIMEbat_timestamp_GT;"			  ]
[ ">",				  "command",	  "batcalc",		  "(l:bat[:oid,:timestamp],r:bat[:oid,:timestamp]):bat[:oid,:bit] ",																									  "MTIMEbat_timestamp_GT;"			  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",																								  "MTIMEaccum_daytime_cst_GT;"			  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",																									  "MTIMEaccum_daytime_GT_cst;"			  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",																							  "MTIMEaccum_daytime_GT;"			  ]
[ ">",				  "command",	  "batcalc",		  "(l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",																											  "MTIMEbat_daytime_cst_GT;"			  ]
[ ">",				  "command",	  "batcalc",		  "(l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",																											  "MTIMEbat_daytime_GT_cst;"			  ]
[ ">",				  "command",	  "batcalc",		  "(l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",																									  "MTIMEbat_daytime_GT;"			  ]
[ ">",				  "command",	  "batcalc",		  "(l:bat[:oid,:daytime],r:bat[:oid,:daytime]):bat[:oid,:bit] ",																									  "MTIMEbat_daytime_GT;"			  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:date],r:date):bat[:void,:bit] ",																									  "MTIMEaccum_date_cst_GT;"			  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:oid,:date],r:date):bat[:oid,:bit] ",																									  "MTIMEaccum_date_GT_cst;"			  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",																								  "MTIMEaccum_date_GT;"				  ]
[ ">",				  "command",	  "batcalc",		  "(l:bat[:void,:date],r:date):bat[:void,:bit] ",																											  "MTIMEbat_date_cst_GT;"			  ]
[ ">",				  "command",	  "batcalc",		  "(l:bat[:oid,:date],r:date):bat[:oid,:bit] ",																												  "MTIMEbat_date_GT_cst;"			  ]
[ ">",				  "command",	  "batcalc",		  "(l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",																										  "MTIMEbat_date_GT;"				  ]
[ ">",				  "command",	  "batcalc",		  "(l:bat[:oid,:date],r:bat[:oid,:date]):bat[:oid,:bit] ",																										  "MTIMEbat_date_GT;"				  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",																									  "CMDaccum_GT_cst_oid;"			  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",																									  "CMDaccum_GT_oid_cst;"			  ]
[ ">",				  "command",	  "batcalc",		  "(cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",																											  "CMD_GT_cst_oid;"				  ]
[ ">",				  "command",	  "batcalc",		  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",																											  "CMD_GT_oid_cst;"				  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",																							  "CMDaccum_GT_oid;"				  ]
[ ">",				  "command",	  "batcalc",		  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",																										  "CMD_GT_oid;"					  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",																									  "CMDaccum_GT_cst_flt;"			  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",																									  "CMDaccum_GT_flt_cst;"			  ]
[ ">",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",																											  "CMD_GT_cst_flt;"				  ]
[ ">",				  "command",	  "batcalc",		  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",																											  "CMD_GT_flt_cst;"				  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",																							  "CMDaccum_GT_flt;"				  ]
[ ">",				  "command",	  "batcalc",		  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",																										  "CMD_GT_flt;"					  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																									  "CMDaccum_GT_cst_dbl;"			  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",																									  "CMDaccum_GT_dbl_cst;"			  ]
[ ">",				  "command",	  "batcalc",		  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																											  "CMD_GT_cst_dbl;"				  ]
[ ">",				  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",																											  "CMD_GT_dbl_cst;"				  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																							  "CMDaccum_GT_dbl;"				  ]
[ ">",				  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																										  "CMD_GT_dbl;"					  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",																									  "CMDaccum_GT_cst_lng;"			  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",																									  "CMDaccum_GT_lng_cst;"			  ]
[ ">",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",																											  "CMD_GT_cst_lng;"				  ]
[ ">",				  "command",	  "batcalc",		  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",																											  "CMD_GT_lng_cst;"				  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",																							  "CMDaccum_GT_lng;"				  ]
[ ">",				  "command",	  "batcalc",		  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",																										  "CMD_GT_lng;"					  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																									  "CMDaccum_GT_cst_wrd;"			  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",																									  "CMDaccum_GT_wrd_cst;"			  ]
[ ">",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																											  "CMD_GT_cst_wrd;"				  ]
[ ">",				  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",																											  "CMD_GT_wrd_cst;"				  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																							  "CMDaccum_GT_wrd;"				  ]
[ ">",				  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																										  "CMD_GT_wrd;"					  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",																									  "CMDaccum_GT_cst_int;"			  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",																									  "CMDaccum_GT_int_cst;"			  ]
[ ">",				  "command",	  "batcalc",		  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",																											  "CMD_GT_cst_int;"				  ]
[ ">",				  "command",	  "batcalc",		  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",																											  "CMD_GT_int_cst;"				  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",																							  "CMDaccum_GT_int;"				  ]
[ ">",				  "command",	  "batcalc",		  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",																										  "CMD_GT_int;"					  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",																									  "CMDaccum_GT_cst_sht;"			  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",																									  "CMDaccum_GT_sht_cst;"			  ]
[ ">",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",																											  "CMD_GT_cst_sht;"				  ]
[ ">",				  "command",	  "batcalc",		  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",																											  "CMD_GT_sht_cst;"				  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",																							  "CMDaccum_GT_sht;"				  ]
[ ">",				  "command",	  "batcalc",		  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",																										  "CMD_GT_sht;"					  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",																									  "CMDaccum_GT_cst_bte;"			  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",																									  "CMDaccum_GT_bte_cst;"			  ]
[ ">",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",																											  "CMD_GT_cst_bte;"				  ]
[ ">",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",																											  "CMD_GT_bte_cst;"				  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",																							  "CMDaccum_GT_bte;"				  ]
[ ">",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",																										  "CMD_GT_bte;"					  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",																									  "CMDaccum_GT_cst_bit;"			  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",																									  "CMDaccum_GT_bit_cst;"			  ]
[ ">",				  "command",	  "batcalc",		  "(cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",																											  "CMD_GT_cst_bit;"				  ]
[ ">",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",																											  "CMD_GT_bit_cst;"				  ]
[ ">",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",																							  "CMDaccum_GT_bit;"				  ]
[ ">",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",																										  "CMD_GT_bit;"					  ]
[ ">",				  "command",	  "inet",		  "(v:inet,w:inet):bit ",																														  "INET_comp_GT;"				  ]
[ ">",				  "command",	  "date",		  "(v:date,w:date):bit ",																														  "MTIMEdate_GT;"				  ]
[ ">",				  "command",	  "timestamp",		  "(v:timestamp,w:timestamp):bit ",																													  "MTIMEtimestamp_GT;"				  ]
[ ">",				  "command",	  "daytime",		  "(v:daytime,w:daytime):bit ",																														  "MTIMEdaytime_GT;"				  ]
[ ">",				  "command",	  "calc",		  "(v:inet,w:inet):bit ",																														  "INET_comp_GT;"				  ]
[ ">",				  "command",	  "calc",		  "(v:timestamp,w:timestamp):bit ",																													  "MTIMEtimestamp_GT;"				  ]
[ ">",				  "command",	  "calc",		  "(v:daytime,w:daytime):bit ",																														  "MTIMEdaytime_GT;"				  ]
[ ">",				  "command",	  "calc",		  "(v:date,w:date):bit ",																														  "MTIMEdate_GT;"				  ]
[ ">",				  "command",	  "calc",		  "(left:str,right:str):bit ",																														  "CALCcompGTstrstr;"				  ]
[ ">",				  "command",	  "calc",		  "(left:lng,right:lng):bit ",																														  "CALCcompGTlnglng;"				  ]
[ ">",				  "command",	  "calc",		  "(left:lng,right:int):bit ",																														  "CALCcompGTlngint;"				  ]
[ ">",				  "command",	  "calc",		  "(left:lng,right:sht):bit ",																														  "CALCcompGTlngsht;"				  ]
[ ">",				  "command",	  "calc",		  "(left:wrd,right:bte):bit ",																														  "CALCcompGTwrdbte;"				  ]
[ ">",				  "command",	  "calc",		  "(left:int,right:lng):bit ",																														  "CALCcompGTintlng;"				  ]
[ ">",				  "command",	  "calc",		  "(left:int,right:int):bit ",																														  "CALCcompGTintint;"				  ]
[ ">",				  "command",	  "calc",		  "(left:int,right:sht):bit ",																														  "CALCcompGTintsht;"				  ]
[ ">",				  "command",	  "calc",		  "(left:int,right:bte):bit ",																														  "CALCcompGTintbte;"				  ]
[ ">",				  "command",	  "calc",		  "(left:int,right:wrd):bit ",																														  "CALCcompGTintwrd;"				  ]
[ ">",				  "command",	  "calc",		  "(left:wrd,right:lng):bit ",																														  "CALCcompGTwrdlng;"				  ]
[ ">",				  "command",	  "calc",		  "(left:wrd,right:int):bit ",																														  "CALCcompGTwrdint;"				  ]
[ ">",				  "command",	  "calc",		  "(left:wrd,right:wrd):bit ",																														  "CALCcompGTwrdwrd;"				  ]
[ ">",				  "command",	  "calc",		  "(left:wrd,right:sht):bit ",																														  "CALCcompGTwrdsht;"				  ]
[ ">",				  "command",	  "calc",		  "(left:wrd,right:bte):bit ",																														  "CALCcompGTwrdbte;"				  ]
[ ">",				  "command",	  "calc",		  "(left:sht,right:lng):bit ",																														  "CALCcompGTshtlng;"				  ]
[ ">",				  "command",	  "calc",		  "(left:sht,right:int):bit ",																														  "CALCcompGTshtint;"				  ]
[ ">",				  "command",	  "calc",		  "(left:sht,right:wrd):bit ",																														  "CALCcompGTshtwrd;"				  ]
[ ">",				  "command",	  "calc",		  "(left:sht,right:sht):bit ",																														  "CALCcompGTshtsht;"				  ]
[ ">",				  "command",	  "calc",		  "(left:sht,right:bte):bit ",																														  "CALCcompGTshtbte;"				  ]
[ ">",				  "command",	  "calc",		  "(left:bte,right:lng):bit ",																														  "CALCcompGTbtelng;"				  ]
[ ">",				  "command",	  "calc",		  "(left:bte,right:wrd):bit ",																														  "CALCcompGTbtewrd;"				  ]
[ ">",				  "command",	  "calc",		  "(left:bte,right:int):bit ",																														  "CALCcompGTbteint;"				  ]
[ ">",				  "command",	  "calc",		  "(left:bte,right:sht):bit ",																														  "CALCcompGTbtesht;"				  ]
[ ">",				  "command",	  "calc",		  "(left:bte,right:bte):bit ",																														  "CALCcompGTbtebte;"				  ]
[ ">",				  "command",	  "calc",		  "(left:dbl,right:dbl):bit ",																														  "CALCcompGTdbldbl;"				  ]
[ ">",				  "command",	  "calc",		  "(left:flt,right:dbl):bit ",																														  "CALCcompGTfltdbl;"				  ]
[ ">",				  "command",	  "calc",		  "(left:flt,right:flt):bit ",																														  "CALCcompGTfltflt;"				  ]
[ ">",				  "command",	  "calc",		  "(left:oid,right:oid):bit ",																														  "CALCcompGToidoid;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",																								  "MTIMEaccum_timestamp_cst_GE;"		  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",																								  "MTIMEaccum_timestamp_GE_cst;"		  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",																						  "MTIMEaccum_timestamp_GE;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",																										  "MTIMEbat_timestamp_cst_GE;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",																										  "MTIMEbat_timestamp_GE_cst;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",																									  "MTIMEbat_timestamp_GE;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(l:bat[:oid,:timestamp],r:bat[:oid,:timestamp]):bat[:oid,:bit] ",																									  "MTIMEbat_timestamp_GE;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",																								  "MTIMEaccum_daytime_cst_GE;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",																									  "MTIMEaccum_daytime_GE_cst;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",																							  "MTIMEaccum_daytime_GE;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",																											  "MTIMEbat_daytime_cst_GE;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",																											  "MTIMEbat_daytime_GE_cst;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",																									  "MTIMEbat_daytime_GE;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(l:bat[:oid,:daytime],r:bat[:oid,:daytime]):bat[:oid,:bit] ",																									  "MTIMEbat_daytime_GE;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:date],r:date):bat[:void,:bit] ",																									  "MTIMEaccum_date_cst_GE;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:oid,:date],r:date):bat[:oid,:bit] ",																									  "MTIMEaccum_date_GE_cst;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:void,:bit],l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",																								  "MTIMEaccum_date_GE;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(l:bat[:void,:date],r:date):bat[:void,:bit] ",																											  "MTIMEbat_date_cst_GE;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(l:bat[:oid,:date],r:date):bat[:oid,:bit] ",																												  "MTIMEbat_date_GE_cst;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",																										  "MTIMEbat_date_GE;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(l:bat[:oid,:date],r:bat[:oid,:date]):bat[:oid,:bit] ",																										  "MTIMEbat_date_GE;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",																									  "CMDaccum_GE_cst_oid;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",																									  "CMDaccum_GE_oid_cst;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",																											  "CMD_GE_cst_oid;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",																											  "CMD_GE_oid_cst;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",																							  "CMDaccum_GE_oid;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",																										  "CMD_GE_oid;"					  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",																									  "CMDaccum_GE_cst_flt;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",																									  "CMDaccum_GE_flt_cst;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",																											  "CMD_GE_cst_flt;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",																											  "CMD_GE_flt_cst;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",																							  "CMDaccum_GE_flt;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",																										  "CMD_GE_flt;"					  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																									  "CMDaccum_GE_cst_dbl;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",																									  "CMDaccum_GE_dbl_cst;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																											  "CMD_GE_cst_dbl;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",																											  "CMD_GE_dbl_cst;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																							  "CMDaccum_GE_dbl;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																										  "CMD_GE_dbl;"					  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",																									  "CMDaccum_GE_cst_lng;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",																									  "CMDaccum_GE_lng_cst;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",																											  "CMD_GE_cst_lng;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",																											  "CMD_GE_lng_cst;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",																							  "CMDaccum_GE_lng;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",																										  "CMD_GE_lng;"					  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																									  "CMDaccum_GE_cst_wrd;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",																									  "CMDaccum_GE_wrd_cst;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																											  "CMD_GE_cst_wrd;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",																											  "CMD_GE_wrd_cst;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																							  "CMDaccum_GE_wrd;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																										  "CMD_GE_wrd;"					  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",																									  "CMDaccum_GE_cst_int;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",																									  "CMDaccum_GE_int_cst;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",																											  "CMD_GE_cst_int;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",																											  "CMD_GE_int_cst;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",																							  "CMDaccum_GE_int;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",																										  "CMD_GE_int;"					  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",																									  "CMDaccum_GE_cst_sht;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",																									  "CMDaccum_GE_sht_cst;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",																											  "CMD_GE_cst_sht;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",																											  "CMD_GE_sht_cst;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",																							  "CMDaccum_GE_sht;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",																										  "CMD_GE_sht;"					  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",																									  "CMDaccum_GE_cst_bte;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",																									  "CMDaccum_GE_bte_cst;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",																											  "CMD_GE_cst_bte;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",																											  "CMD_GE_bte_cst;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",																							  "CMDaccum_GE_bte;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",																										  "CMD_GE_bte;"					  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",																									  "CMDaccum_GE_cst_bit;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",																									  "CMDaccum_GE_bit_cst;"			  ]
[ ">=",				  "command",	  "batcalc",		  "(cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",																											  "CMD_GE_cst_bit;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",																											  "CMD_GE_bit_cst;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",																							  "CMDaccum_GE_bit;"				  ]
[ ">=",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",																										  "CMD_GE_bit;"					  ]
[ ">=",				  "command",	  "inet",		  "(v:inet,w:inet):bit ",																														  "INET_comp_GE;"				  ]
[ ">=",				  "command",	  "date",		  "(v:date,w:date):bit ",																														  "MTIMEdate_GE;"				  ]
[ ">=",				  "command",	  "timestamp",		  "(v:timestamp,w:timestamp):bit ",																													  "MTIMEtimestamp_GE;"				  ]
[ ">=",				  "command",	  "daytime",		  "(v:daytime,w:daytime):bit ",																														  "MTIMEdaytime_GE;"				  ]
[ ">=",				  "command",	  "calc",		  "(v:inet,w:inet):bit ",																														  "INET_comp_GE;"				  ]
[ ">=",				  "command",	  "calc",		  "(v:timestamp,w:timestamp):bit ",																													  "MTIMEtimestamp_GE;"				  ]
[ ">=",				  "command",	  "calc",		  "(v:daytime,w:daytime):bit ",																														  "MTIMEdaytime_GE;"				  ]
[ ">=",				  "command",	  "calc",		  "(v:date,w:date):bit ",																														  "MTIMEdate_GE;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:str,right:str):bit ",																														  "CALCcompGEstrstr;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:lng,right:lng):bit ",																														  "CALCcompGElnglng;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:lng,right:int):bit ",																														  "CALCcompGElngint;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:lng,right:sht):bit ",																														  "CALCcompGElngsht;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:wrd,right:bte):bit ",																														  "CALCcompGEwrdbte;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:int,right:lng):bit ",																														  "CALCcompGEintlng;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:int,right:int):bit ",																														  "CALCcompGEintint;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:int,right:sht):bit ",																														  "CALCcompGEintsht;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:int,right:bte):bit ",																														  "CALCcompGEintbte;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:int,right:wrd):bit ",																														  "CALCcompGEintwrd;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:wrd,right:lng):bit ",																														  "CALCcompGEwrdlng;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:wrd,right:int):bit ",																														  "CALCcompGEwrdint;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:wrd,right:wrd):bit ",																														  "CALCcompGEwrdwrd;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:wrd,right:sht):bit ",																														  "CALCcompGEwrdsht;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:wrd,right:bte):bit ",																														  "CALCcompGEwrdbte;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:sht,right:lng):bit ",																														  "CALCcompGEshtlng;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:sht,right:int):bit ",																														  "CALCcompGEshtint;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:sht,right:wrd):bit ",																														  "CALCcompGEshtwrd;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:sht,right:sht):bit ",																														  "CALCcompGEshtsht;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:sht,right:bte):bit ",																														  "CALCcompGEshtbte;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:bte,right:lng):bit ",																														  "CALCcompGEbtelng;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:bte,right:wrd):bit ",																														  "CALCcompGEbtewrd;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:bte,right:int):bit ",																														  "CALCcompGEbteint;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:bte,right:sht):bit ",																														  "CALCcompGEbtesht;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:bte,right:bte):bit ",																														  "CALCcompGEbtebte;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:dbl,right:dbl):bit ",																														  "CALCcompGEdbldbl;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:flt,right:dbl):bit ",																														  "CALCcompGEfltdbl;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:flt,right:flt):bit ",																														  "CALCcompGEfltflt;"				  ]
[ ">=",				  "command",	  "calc",		  "(left:oid,right:oid):bit ",																														  "CALCcompGEoidoid;"				  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:int,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumRSHcst_lng_int_lng;"		  ]
[ ">>",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumRSHcst2_lng_int_lng;"		  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumRSH_lng_int_lng;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",																										  "CMDbatRSH_lng_int_lng;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:int]):bat[:oid,:lng] ",																												  "CMDcstRSHbat_lng_int_lng;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:int):bat[:oid,:lng] ",																												  "CMDbatRSHcst_lng_int_lng;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:int,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumRSHcst_wrd_int_wrd;"		  ]
[ ">>",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumRSHcst2_wrd_int_wrd;"		  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumRSH_wrd_int_wrd;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:int]):bat[:oid,:wrd] ",																										  "CMDbatRSH_wrd_int_wrd;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] ",																												  "CMDcstRSHbat_wrd_int_wrd;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:int):bat[:oid,:wrd] ",																												  "CMDbatRSHcst_wrd_int_wrd;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumRSHcst_int_int_int;"		  ]
[ ">>",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumRSHcst2_int_int_int;"		  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumRSH_int_int_int;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",																										  "CMDbatRSH_int_int_int;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",																												  "CMDcstRSHbat_int_int_int;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",																												  "CMDbatRSHcst_int_int_int;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:int,bflag:bit,cflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumRSHcst_sht_int_sht;"		  ]
[ ">>",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumRSHcst2_sht_int_sht;"		  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:sht] ",																								  "CMDbataccumRSH_sht_int_sht;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:sht] ",																										  "CMDbatRSH_sht_int_sht;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:sht] ",																												  "CMDcstRSHbat_sht_int_sht;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:int):bat[:oid,:sht] ",																												  "CMDbatRSHcst_sht_int_sht;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:int,bflag:bit,cflag:bit):bat[:oid,:bte] ",																									  "CMDbataccumRSHcst_bte_int_bte;"		  ]
[ ">>",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:bte] ",																									  "CMDbataccumRSHcst2_bte_int_bte;"		  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:bte] ",																								  "CMDbataccumRSH_bte_int_bte;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:bte] ",																										  "CMDbatRSH_bte_int_bte;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:bte] ",																												  "CMDcstRSHbat_bte_int_bte;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:int):bat[:oid,:bte] ",																												  "CMDbatRSHcst_bte_int_bte;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:oid],cst:int,bflag:bit,cflag:bit):bat[:oid,:oid] ",																									  "CMDbataccumRSHcst_oid_int_oid;"		  ]
[ ">>",				  "command",	  "batcalc",		  "(cst:oid,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:oid] ",																									  "CMDbataccumRSHcst2_oid_int_oid;"		  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:oid],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:oid] ",																								  "CMDbataccumRSH_oid_int_oid;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:oid],c:bat[:oid,:int]):bat[:oid,:oid] ",																										  "CMDbatRSH_oid_int_oid;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(cst:oid,b:bat[:oid,:int]):bat[:oid,:oid] ",																												  "CMDcstRSHbat_oid_int_oid;"			  ]
[ ">>",				  "command",	  "batcalc",		  "(b:bat[:oid,:oid],cst:int):bat[:oid,:oid] ",																												  "CMDbatRSHcst_oid_int_oid;"			  ]
[ ">>",				  "command",	  "inet",		  "(v:inet,w:inet):bit ",																														  "INET_comp_CS;"				  ]
[ ">>",				  "command",	  "calc",		  "(left:lng,right:int):lng ",																														  "CALCbinaryRSHlngint;"			  ]
[ ">>",				  "command",	  "calc",		  "(left:int,right:int):int ",																														  "CALCbinaryRSHintint;"			  ]
[ ">>",				  "command",	  "calc",		  "(left:sht,right:int):sht ",																														  "CALCbinaryRSHshtint;"			  ]
[ ">>",				  "command",	  "calc",		  "(left:bte,right:int):bte ",																														  "CALCbinaryRSHbteint;"			  ]
[ ">>=",			  "command",	  "inet",		  "(v:inet,w:inet):bit ",																														  "INET_comp_CSE;"				  ]
[ "Area",			  "command",	  "geom",		  "(g:wkb):dbl ",																															  "wkbArea;"					  ]
[ "AsText",			  "command",	  "geom",		  "(w:wkb):str ",																															  "wkbAsText;"					  ]
[ "Boundary",			  "command",	  "geom",		  "(w:wkb):wkb ",																															  "wkbBoundary;"				  ]
[ "Buffer",			  "command",	  "geom",		  "(a:wkb,distance:dbl):wkb ",																														  "wkbBuffer;"					  ]
[ "Contains",			  "command",	  "geom",		  "(a:wkb,b:wkb):bit ",																															  "wkbContains;"				  ]
[ "ConvexHull",			  "command",	  "geom",		  "(a:wkb):wkb ",																															  "wkbConvexHull;"				  ]
[ "Crosses",			  "command",	  "geom",		  "(a:wkb,b:wkb):bit ",																															  "wkbCrosses;"					  ]
[ "CurveFromText",		  "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",																														  "nil"						  ]
[ "Difference",			  "command",	  "geom",		  "(a:wkb,b:wkb):wkb ",																															  "wkbDifference;"				  ]
[ "Dimension",			  "command",	  "geom",		  "(w:wkb):int ",																															  "wkbDimension;"				  ]
[ "Disjoint",			  "command",	  "geom",		  "(a:wkb,b:wkb):bit ",																															  "wkbDisjoint;"				  ]
[ "Distance",			  "command",	  "geom",		  "(a:wkb,b:wkb):dbl ",																															  "wkbDistance;"				  ]
[ "Envelope",			  "command",	  "geom",		  "(w:wkb):wkb ",																															  "wkbEnvelope;"				  ]
[ "Equals",			  "command",	  "geom",		  "(a:wkb,b:wkb):bit ",																															  "wkbEquals;"					  ]
[ "FromText",			  "command",	  "wkb",		  "(w:str,type:int):wkb ",																														  "wkbFromText;"				  ]
[ "GeomCollectionFromText",	  "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",																														  "nil"						  ]
[ "GeomFromText",		  "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",																														  "nil"						  ]
[ "GeometryTypeId",		  "command",	  "geom",		  "(w:wkb):int ",																															  "wkbGeometryTypeId;"				  ]
[ "Intersect",			  "command",	  "geom",		  "(a:wkb,b:wkb):bit ",																															  "wkbIntersect;"				  ]
[ "Intersection",		  "command",	  "geom",		  "(a:wkb,b:wkb):wkb ",																															  "wkbIntersection;"				  ]
[ "IsEmpty",			  "command",	  "geom",		  "(w:wkb):bit ",																															  "wkbIsEmpty;"					  ]
[ "IsSimple",			  "command",	  "geom",		  "(w:wkb):bit ",																															  "wkbIsSimple;"				  ]
[ "Length",			  "command",	  "geom",		  "(g:wkb):dbl ",																															  "wkbLength;"					  ]
[ "LineFromText",		  "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",																														  "nil"						  ]
[ "List",			  "pattern",	  "mdb",		  "(M:str,F:str):void ",																														  "MDBlist3Detail;"				  ]
[ "List",			  "pattern",	  "mdb",		  "():void ",																																  "MDBlistDetail;"				  ]
[ "MultiCurveFromText",		  "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",																														  "nil"						  ]
[ "MultiLineFromText",		  "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",																														  "nil"						  ]
[ "MultiPointFromText",		  "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",																														  "nil"						  ]
[ "MultiPolyFromText",		  "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",																														  "nil"						  ]
[ "MultiSurfaceFromText",	  "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",																														  "nil"						  ]
[ "Overlaps",			  "command",	  "geom",		  "(a:wkb,b:wkb):bit ",																															  "wkbOverlaps;"				  ]
[ "PointFromText",		  "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",																														  "nil"						  ]
[ "PolyFromText",		  "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",																														  "nil"						  ]
[ "Relate",			  "command",	  "geom",		  "(a:wkb,b:wkb,intersectionPatternMatrix:str):bit ",																											  "wkbRelate;"					  ]
[ "SRID",			  "command",	  "geom",		  "(w:wkb):int ",																															  "wkbSRID;"					  ]
[ "STRepilogue",		  "command",	  "str",		  "():void ",																																  "strEpilogue;"				  ]
[ "STRprelude",			  "command",	  "str",		  "():void ",																																  "strPrelude;"					  ]
[ "SurfaceFromText",		  "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",																														  "nil"						  ]
[ "SymDifference",		  "command",	  "geom",		  "(a:wkb,b:wkb):wkb ",																															  "wkbSymDifference;"				  ]
[ "Touches",			  "command",	  "geom",		  "(a:wkb,b:wkb):bit ",																															  "wkbTouches;"					  ]
[ "Union",			  "command",	  "geom",		  "(a:wkb,b:wkb):wkb ",																															  "wkbUnion;"					  ]
[ "Within",			  "command",	  "geom",		  "(a:wkb,b:wkb):bit ",																															  "wkbWithin;"					  ]
[ "X",				  "command",	  "geom",		  "(g:wkb):dbl ",																															  "wkbgetcoordX;"				  ]
[ "Y",				  "command",	  "geom",		  "(g:wkb):dbl ",																															  "wkbgetcoordY;"				  ]
[ "abbrev",			  "command",	  "inet",		  "(X_1:inet):str ",																															  "INETabbrev;"					  ]
[ "abort",			  "pattern",	  "transaction",	  "(c:any...):void ",																															  "TRNtrans_abort;"				  ]
[ "abort",			  "command",	  "transaction",	  "():bit ",																																  "TRNglobal_abort;"				  ]
[ "abs",			  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",																												  "CMDunaryABS;"				  ]
[ "abs",			  "command",	  "batcalc",		  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] ",																												  "CMDunaryABS;"				  ]
[ "abs",			  "command",	  "batcalc",		  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] ",																												  "CMDunaryABS;"				  ]
[ "abs",			  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd]):bat[:any_1,:wrd] ",																												  "CMDunaryABS;"				  ]
[ "abs",			  "command",	  "batcalc",		  "(b:bat[:any_1,:int]):bat[:any_1,:int] ",																												  "CMDunaryABS;"				  ]
[ "abs",			  "command",	  "batcalc",		  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] ",																												  "CMDunaryABS;"				  ]
[ "abs",			  "command",	  "batcalc",		  "(b:bat[:any_1,:bte]):bat[:any_1,:bte] ",																												  "CMDunaryABS;"				  ]
[ "abs",			  "command",	  "calc",		  "(x:dbl):dbl ",																															  "CALCunarydblABS;"				  ]
[ "abs",			  "command",	  "calc",		  "(x:lng):lng ",																															  "CALCunarylngABS;"				  ]
[ "abs",			  "command",	  "calc",		  "(x:flt):flt ",																															  "CALCunaryfltABS;"				  ]
[ "abs",			  "command",	  "calc",		  "(x:wrd):wrd ",																															  "CALCunarywrdABS;"				  ]
[ "abs",			  "command",	  "calc",		  "(x:int):int ",																															  "CALCunaryintABS;"				  ]
[ "abs",			  "command",	  "calc",		  "(x:sht):sht ",																															  "CALCunaryshtABS;"				  ]
[ "abs",			  "command",	  "calc",		  "(x:bte):bte ",																															  "CALCunarybteABS;"				  ]
[ "abs",			  "command",	  "calc",		  "(x:bit):bit ",																															  "CALCunarybitABS;"				  ]
[ "accessmode",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTaccessmode;"				  ]
[ "accessmode",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTaccessmode;"				  ]
[ "accumulators",		  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTaccumulators;"				  ]
[ "accumulators",		  "pattern",	  "optimizer",		  "():str ",																																  "OPTaccumulators;"				  ]
[ "acos",			  "command",	  "batmmath",		  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",																													  "CMDscience_bat_flt_acos;"			  ]
[ "acos",			  "command",	  "batmmath",		  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",																													  "CMDscience_bat_dbl_acos;"			  ]
[ "acos",			  "command",	  "mmath",		  "(x:dbl):dbl ",																															  "MATHunary_ACOSdbl;"				  ]
[ "acos",			  "command",	  "mmath",		  "(x:flt):flt ",																															  "MATHunary_ACOSflt;"				  ]
[ "activate",			  "pattern",	  "profiler",		  "(name:str...):void ",																														  "CMDactivateProfiler;"			  ]
[ "add",			  "command",	  "mtime",		  "(v:timestamp,msecs:lng):timestamp ",																													  "MTIMEtimestamp_add;"				  ]
[ "addReg",			  "pattern",	  "datacyclotron",	  "(sch:str,tab:str,col:str,acc:int,part:int,f_bun:int,l_bun:int):int ",																								  "addRegWrap;"					  ]
[ "addUser",			  "pattern",	  "clients",		  "(nme:str,pw:str):oid ",																														  "CLTaddUser;"					  ]
[ "adddays",			  "command",	  "mtime",		  "(value:date,days:int):date ",																													  "MTIMEdate_adddays;"				  ]
[ "addmonths",			  "command",	  "mtime",		  "(value:date,months:int):date ",																													  "MTIMEdate_addmonths;"			  ]
[ "addyears",			  "command",	  "mtime",		  "(value:date,years:int):date ",																													  "MTIMEdate_addyears;"				  ]
[ "affectedRows",		  "pattern",	  "sql",		  "(mvc:int,nr:wrd,w:str):int ",																													  "mvc_affected_rows_wrap;"			  ]
[ "agg",			  "command",	  "xml",		  "(val:bat[:oid,:xml]):xml ",																														  "BATXMLgroup;"				  ]
[ "agg",			  "command",	  "xml",		  "(val:bat[:oid,:xml],grp:bat[:oid,:oid]):bat[:oid,:xml] ",																										  "BATXMLagg;"					  ]
[ "agg",			  "command",	  "xml",		  "(val:bat[:oid,:xml],grp:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:xml] ",																								  "BATXMLagg3;"					  ]
[ "alarm",			  "command",	  "alarm",		  "(secs:int,action:str):void ",																													  "ALARMsetalarm;"				  ]
[ "aliases",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTaliases;"					  ]
[ "aliases",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTaliases;"					  ]
[ "alpha",			  "command",	  "batsql",		  "(dec:bat[:oid,:dbl],theta:dbl):bat[:oid,:dbl] ",																											  "SQLbat_alpha;"				  ]
[ "alpha",			  "command",	  "transaction",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "TRNtrans_alpha;"				  ]
[ "alpha",			  "command",	  "sql",		  "(dec:dbl,theta:dbl):dbl ",																														  "SQLdbl_alpha;"				  ]
[ "and",			  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",																									  "CMDaccum_AND_cst_bit;"			  ]
[ "and",			  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",																									  "CMDaccum_AND_bit_cst;"			  ]
[ "and",			  "command",	  "batcalc",		  "(cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",																											  "CMD_AND_cst_bit;"				  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",																											  "CMD_AND_bit_cst;"				  ]
[ "and",			  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",																							  "CMDaccum_AND_bit;"				  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",																										  "CMD_AND_bit;"				  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumANDcst_lng_lng_lng;"		  ]
[ "and",			  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumANDcst2_lng_lng_lng;"		  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumAND_lng_lng_lng;"			  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatAND_lng_lng_lng;"			  ]
[ "and",			  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstANDbat_lng_lng_lng;"			  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",																												  "CMDbatANDcst_lng_lng_lng;"			  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumANDcst_wrd_wrd_wrd;"		  ]
[ "and",			  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumANDcst2_wrd_wrd_wrd;"		  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumAND_wrd_wrd_wrd;"			  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",																										  "CMDbatAND_wrd_wrd_wrd;"			  ]
[ "and",			  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",																												  "CMDcstANDbat_wrd_wrd_wrd;"			  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:wrd] ",																												  "CMDbatANDcst_wrd_wrd_wrd;"			  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumANDcst_int_int_int;"		  ]
[ "and",			  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumANDcst2_int_int_int;"		  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumAND_int_int_int;"			  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",																										  "CMDbatAND_int_int_int;"			  ]
[ "and",			  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",																												  "CMDcstANDbat_int_int_int;"			  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",																												  "CMDbatANDcst_int_int_int;"			  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumANDcst_sht_sht_sht;"		  ]
[ "and",			  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumANDcst2_sht_sht_sht;"		  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",																								  "CMDbataccumAND_sht_sht_sht;"			  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",																										  "CMDbatAND_sht_sht_sht;"			  ]
[ "and",			  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",																												  "CMDcstANDbat_sht_sht_sht;"			  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",																												  "CMDbatANDcst_sht_sht_sht;"			  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte,bflag:bit,cflag:bit):bat[:oid,:bte] ",																									  "CMDbataccumANDcst_bte_bte_bte;"		  ]
[ "and",			  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:bte] ",																									  "CMDbataccumANDcst2_bte_bte_bte;"		  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:bte] ",																								  "CMDbataccumAND_bte_bte_bte;"			  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:bte] ",																										  "CMDbatAND_bte_bte_bte;"			  ]
[ "and",			  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:bte] ",																												  "CMDcstANDbat_bte_bte_bte;"			  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:bte] ",																												  "CMDbatANDcst_bte_bte_bte;"			  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:oid],cst:oid,bflag:bit,cflag:bit):bat[:oid,:oid] ",																									  "CMDbataccumANDcst_oid_oid_oid;"		  ]
[ "and",			  "command",	  "batcalc",		  "(cst:oid,b:bat[:oid,:oid],cflag:bit,bflag:bit):bat[:oid,:oid] ",																									  "CMDbataccumANDcst2_oid_oid_oid;"		  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:oid],c:bat[:oid,:oid],aflag:bit,bflag:bit):bat[:oid,:oid] ",																								  "CMDbataccumAND_oid_oid_oid;"			  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:oid],c:bat[:oid,:oid]):bat[:oid,:oid] ",																										  "CMDbatAND_oid_oid_oid;"			  ]
[ "and",			  "command",	  "batcalc",		  "(cst:oid,b:bat[:oid,:oid]):bat[:oid,:oid] ",																												  "CMDcstANDbat_oid_oid_oid;"			  ]
[ "and",			  "command",	  "batcalc",		  "(b:bat[:oid,:oid],cst:oid):bat[:oid,:oid] ",																												  "CMDbatANDcst_oid_oid_oid;"			  ]
[ "and",			  "command",	  "calc",		  "(left:lng,right:lng):lng ",																														  "CALCbinaryANDlnglng;"			  ]
[ "and",			  "command",	  "calc",		  "(left:int,right:int):int ",																														  "CALCbinaryANDintint;"			  ]
[ "and",			  "command",	  "calc",		  "(left:sht,right:sht):sht ",																														  "CALCbinaryANDshtsht;"			  ]
[ "and",			  "command",	  "calc",		  "(left:bte,right:bte):bte ",																														  "CALCbinaryANDbtebte;"			  ]
[ "and",			  "command",	  "calc",		  "(left:bit,right:bit):bit ",																														  "CALCbinaryANDbit;"				  ]
[ "angsep",			  "command",	  "lsst",		  "(ra1:dbl,dec1:dbl,ra2:dbl,dec2:dbl):dbl ",																												  "qserv_angSep;"				  ]
[ "antijoin",			  "command",	  "algebra",		  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_4]):bat[:any_1,:any_4] ",																								  "ALGantijoin;"				  ]
[ "antiuselect",		  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],low:any_2,high:any_2,li:bit,hi:bit):bat[:any_1,:void] ",																							  "ALGantiuselectInclusive;"			  ]
[ "antiuselect",		  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],value:any_2):bat[:any_1,:void] ",																										  "ALGantiuselect1;"				  ]
[ "append",			  "command",	  "tokenizer",		  "(u:str):oid ",																															  "TKNZRappend;"				  ]
[ "append",			  "pattern",	  "sql",		  "(mvc:int,sname:str,tname:str,cname:str,ins:any):int ",																										  "mvc_append_wrap;"				  ]
[ "append",			  "command",	  "bat",	  "(i:bat[:any_1,:any_2],u:any_2,force:bit):bat[:any_1,:any_2] ",									  "BKCappend_val_force_wrap;"				  ]
[ "append",				  "command",	  "bat",	  "(i:bat[:any_1,:void],u:any_1):bat[:any_1,:void] ",								  "BKCappend_reverse_val_wrap;"				  ]
[ "append",				  "command",	  "bat",	  "(i:bat[:void,:any_1],u:any_1):bat[:void,:any_1] ",									  "BKCappend_val_wrap;"					  ]
[ "append",				  "command",	  "bat",	  "(i:bat[:oid,:any_1],u:any_1):bat[:oid,:any_1] ",									  "BKCappend_val_wrap;"					  ]
[ "append",			  "command",	  "bat",	  "(i:bat[:any_1,:any_2],u:bat[:any_1,:any_2],force:bit):bat[:any_1,:any_2] ",								  "BKCappend_force_wrap;"				  ]
[ "append",			  "command",	  "bat",	  "(i:bat[:any_1,:any_2],u:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",									  "BKCappend_wrap;"					  ]
[ "argRecord",			  "pattern",	  "sql",		  "(a:any...):str ",																															  "SQLargRecord;"				  ]
[ "argRecord",			  "pattern",	  "sql",		  "():str ",																																  "SQLargRecord;"				  ]
[ "ascii",			  "command",	  "str",		  "(s:str):int ",																															  "STRascii;"					  ]
[ "asin",			  "command",	  "batmmath",		  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",																													  "CMDscience_bat_flt_asin;"			  ]
[ "asin",			  "command",	  "batmmath",		  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",																													  "CMDscience_bat_dbl_asin;"			  ]
[ "asin",			  "command",	  "mmath",		  "(x:dbl):dbl ",																															  "MATHunary_ASINdbl;"				  ]
[ "asin",			  "command",	  "mmath",		  "(x:flt):flt ",																															  "MATHunary_ASINflt;"				  ]
[ "assert",			  "pattern",	  "sql",		  "(b:lng,msg:str):void ",																														  "SQLassertLng;"				  ]
[ "assert",			  "pattern",	  "sql",		  "(b:wrd,msg:str):void ",																														  "SQLassertWrd;"				  ]
[ "assert",			  "pattern",	  "sql",		  "(b:int,msg:str):void ",																														  "SQLassertInt;"				  ]
[ "assert",			  "pattern",	  "sql",		  "(b:bit,msg:str):void ",																														  "SQLassert;"					  ]
[ "assert",			  "pattern",	  "language",		  "(v:any_1,pname:str,oper:str,val:any_2):void ",																											  "MALassertTriple;"				  ]
[ "assert",			  "command",	  "language",		  "(v:oid,term:str):void ",																														  "MALassertOid;"				  ]
[ "assert",			  "command",	  "language",		  "(v:str,term:str):void ",																														  "MALassertStr;"				  ]
[ "assert",			  "command",	  "language",		  "(v:lng,term:str):void ",																														  "MALassertLng;"				  ]
[ "assert",			  "command",	  "language",		  "(v:int,term:str):void ",																														  "MALassertInt;"				  ]
[ "assert",			  "command",	  "language",		  "(v:sht,term:str):void ",																														  "MALassertSht;"				  ]
[ "assert",			  "command",	  "language",		  "(v:bit,term:str):void ",																														  "MALassertBit;"				  ]
[ "assertSpace",		  "pattern",	  "language",		  "(depth:int):void ",																															  "safeguardStack;"				  ]
[ "atan",			  "command",	  "batmmath",		  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",																													  "CMDscience_bat_flt_atan;"			  ]
[ "atan",			  "command",	  "batmmath",		  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",																													  "CMDscience_bat_dbl_atan;"			  ]
[ "atan",			  "command",	  "mmath",		  "(x:dbl):dbl ",																															  "MATHunary_ATANdbl;"				  ]
[ "atan",			  "command",	  "mmath",		  "(x:flt):flt ",																															  "MATHunary_ATANflt;"				  ]
[ "atan2",			  "command",	  "batmmath",		  "(x:bat[:oid,:flt],y:flt):bat[:oid,:flt] ",																												  "CMDscience_bat_cst_atan2_flt;"		  ]
[ "atan2",			  "command",	  "batmmath",		  "(x:bat[:oid,:dbl],y:dbl):bat[:oid,:dbl] ",																												  "CMDscience_bat_cst_atan2_dbl;"		  ]
[ "atan2",			  "command",	  "mmath",		  "(x:dbl,y:dbl):dbl ",																															  "MATHbinary_ATAN2dbl;"			  ]
[ "atan2",			  "command",	  "mmath",		  "(x:flt,y:flt):flt ",																															  "MATHbinary_ATAN2flt;"			  ]
[ "attach",			  "command",	  "bat",	  "(tt:int,heapfile:str):bat[:void,:any_1] ",													  "BKCattach;"					  ]
[ "attribute",			  "command",	  "xml",		  "(name:str,val:bat[:oid,:str]):bat[:oid,:xml] ",																											  "BATXMLattribute;"				  ]
[ "attribute",			  "command",	  "xml",		  "(name:str,val:str):xml ",																														  "XMLattribute;"				  ]
[ "avg",			  "command",	  "group",		  "(b:bat[:any_2,:oid],e:bat[:any_2,:any_1]):bat[:any_2,:oid] ",																									  "GRPavg_oid;"					  ]
[ "avg",			  "command",	  "group",		  "(b:bat[:any_2,:dbl],e:bat[:any_2,:any_1]):bat[:any_2,:dbl] ",																									  "GRPavg_dbl;"					  ]
[ "avg",			  "command",	  "group",		  "(b:bat[:any_2,:flt],e:bat[:any_2,:any_1]):bat[:any_2,:flt] ",																									  "GRPavg_flt;"					  ]
[ "avg",			  "command",	  "group",		  "(b:bat[:any_2,:wrd],e:bat[:any_2,:any_1]):bat[:any_2,:wrd] ",																									  "GRPavg_wrd;"					  ]
[ "avg",			  "command",	  "group",		  "(b:bat[:any_2,:lng],e:bat[:any_2,:any_1]):bat[:any_2,:lng] ",																									  "GRPavg_lng;"					  ]
[ "avg",			  "command",	  "group",		  "(b:bat[:any_2,:int],e:bat[:any_2,:any_1]):bat[:any_2,:int] ",																									  "GRPavg_int;"					  ]
[ "avg",			  "command",	  "group",		  "(b:bat[:any_2,:sht],e:bat[:any_2,:any_1]):bat[:any_2,:sht] ",																									  "GRPavg_sht;"					  ]
[ "avg",			  "command",	  "group",		  "(b:bat[:any_2,:bte],e:bat[:any_2,:any_1]):bat[:any_2,:bte] ",																									  "GRPavg_bte;"					  ]
[ "avg",			  "command",	  "aggr",		  "(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",																								  "AX3aggrX3_avg3_dbl;"				  ]
[ "avg",			  "command",	  "aggr",		  "(b:bat[:oid,:dbl],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",																										  "AX3aggrX3_avg_dbl;"				  ]
[ "avg",			  "command",	  "aggr",		  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",																								  "AX3aggrX3_avg3_flt;"				  ]
[ "avg",			  "command",	  "aggr",		  "(b:bat[:oid,:flt],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",																										  "AX3aggrX3_avg_flt;"				  ]
[ "avg",			  "command",	  "aggr",		  "(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",																								  "AX3aggrX3_avg3_lng;"				  ]
[ "avg",			  "command",	  "aggr",		  "(b:bat[:oid,:lng],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",																										  "AX3aggrX3_avg_lng;"				  ]
[ "avg",			  "command",	  "aggr",		  "(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",																								  "AX3aggrX3_avg3_wrd;"				  ]
[ "avg",			  "command",	  "aggr",		  "(b:bat[:oid,:wrd],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",																										  "AX3aggrX3_avg_wrd;"				  ]
[ "avg",			  "command",	  "aggr",		  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",																								  "AX3aggrX3_avg3_int;"				  ]
[ "avg",			  "command",	  "aggr",		  "(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",																										  "AX3aggrX3_avg_int;"				  ]
[ "avg",			  "command",	  "aggr",		  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",																								  "AX3aggrX3_avg3_sht;"				  ]
[ "avg",			  "command",	  "aggr",		  "(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",																										  "AX3aggrX3_avg_sht;"				  ]
[ "avg",			  "command",	  "aggr",		  "(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",																								  "AX3aggrX3_avg3_bte;"				  ]
[ "avg",			  "command",	  "aggr",		  "(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",																										  "AX3aggrX3_avg_bte;"				  ]
[ "avg",			  "command",	  "aggr",		  "(b:bat[:any_1,:dbl]):dbl ",																														  "ALGavg_dbl;"					  ]
[ "avg",			  "command",	  "aggr",		  "(b:bat[:any_1,:flt]):dbl ",																														  "ALGavg_flt;"					  ]
[ "avg",			  "command",	  "aggr",		  "(b:bat[:any_1,:lng]):dbl ",																														  "ALGavg_lng;"					  ]
[ "avg",			  "command",	  "aggr",		  "(b:bat[:any_1,:wrd]):dbl ",																														  "ALGavg_wrd;"					  ]
[ "avg",			  "command",	  "aggr",		  "(b:bat[:any_1,:int]):dbl ",																														  "ALGavg_int;"					  ]
[ "avg",			  "command",	  "aggr",		  "(b:bat[:any_1,:sht]):dbl ",																														  "ALGavg_sht;"					  ]
[ "avg",			  "command",	  "aggr",		  "(b:bat[:any_1,:bte]):dbl ",																														  "ALGavg_bte;"					  ]
[ "backendsum",			  "command",	  "clients",		  "(pw:str):str ",																															  "CLTbackendsum;"				  ]
[ "bandjoin",			  "command",	  "algebra",		  "(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3],minus:any_2,plus:any_2,li:bit,hi:bit):bat[:any_1,:any_3] ",																			  "ALGbandjoin;"				  ]
[ "bandjoin",			  "command",	  "algebra",		  "(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3],minus:any_2,plus:any_2):bat[:any_1,:any_3] ",																					  "ALGbandjoin_default;"			  ]
[ "bat",			  "command",	  "calc",		  "(v:void):bat[:any_1,:any_2] ",																													  "CALCnil2bat;"				  ]
[ "bat",			  "command",	  "calc",		  "(v:str):bat[:any_1,:any_2] ",																													  "CALCstr2bat;"				  ]
[ "bat",			  "command",	  "calc",		  "(v:void):BAT ",																															  "CALCnil2bat;"				  ]
[ "bat",			  "command",	  "calc",		  "(v:str):BAT ",																															  "CALCstr2bat;"				  ]
[ "batStatistics",		  "command",	  "status",		  "():bat[:str,:str] ",																															  "SYSgdkEnv;"					  ]
[ "batbincopy",			  "pattern",	  "remote",		  "():bat[:void,:any] ",																														  "RMTbincopyfrom;"				  ]
[ "batbincopy",			  "pattern",	  "remote",		  "(b:BAT):void ",																															  "RMTbincopyto;"				  ]
[ "batload",			  "pattern",	  "remote",		  "(ht:any_1,tt:any_2,size:int):bat[:any_1,:any_2] ",																											  "RMTbatload;"					  ]
[ "bbp",			  "function",	  "sql",		  "() (id:bat[:oid,:int],name:bat[:oid,:str],htype:bat[:oid,:str],ttype:bat[:oid,:str],count:bat[:oid,:lng],refcnt:bat[:oid,:int],lrefcnt:bat[:oid,:int],location:bat[:oid,:str],heat:bat[:oid,:int],dirty:bat[:oid,:str],status:bat[:oid,:str],kind:bat[:oid,:str]);",	  "nil"						  ]
[ "between",			  "command",	  "calc",		  "(val:str,low:str,high:str):bit ",																													  "CALCcompBetweenstr;"				  ]
[ "between",			  "command",	  "calc",		  "(val:lng,low:lng,high:lng):bit ",																													  "CALCcompBetweenlng;"				  ]
[ "between",			  "command",	  "calc",		  "(val:lng,low:lng,high:lng):bit ",																													  "CALCcompBetweenlng;"				  ]
[ "between",			  "command",	  "calc",		  "(val:lng,low:lng,high:lng):bit ",																													  "CALCcompBetweenlng;"				  ]
[ "between",			  "command",	  "calc",		  "(val:wrd,low:wrd,high:wrd):bit ",																													  "CALCcompBetweenwrd;"				  ]
[ "between",			  "command",	  "calc",		  "(val:int,low:int,high:int):bit ",																													  "CALCcompBetweenint;"				  ]
[ "between",			  "command",	  "calc",		  "(val:int,low:int,high:int):bit ",																													  "CALCcompBetweenint;"				  ]
[ "between",			  "command",	  "calc",		  "(val:int,low:int,high:int):bit ",																													  "CALCcompBetweenint;"				  ]
[ "between",			  "command",	  "calc",		  "(val:int,low:int,high:int):bit ",																													  "CALCcompBetweenint;"				  ]
[ "between",			  "command",	  "calc",		  "(val:int,low:int,high:int):bit ",																													  "CALCcompBetweenint;"				  ]
[ "between",			  "command",	  "calc",		  "(val:wrd,low:wrd,high:wrd):bit ",																													  "CALCcompBetweenwrd;"				  ]
[ "between",			  "command",	  "calc",		  "(val:wrd,low:wrd,high:wrd):bit ",																													  "CALCcompBetweenwrd;"				  ]
[ "between",			  "command",	  "calc",		  "(val:wrd,low:wrd,high:wrd):bit ",																													  "CALCcompBetweenwrd;"				  ]
[ "between",			  "command",	  "calc",		  "(val:wrd,low:wrd,high:wrd):bit ",																													  "CALCcompBetweenwrd;"				  ]
[ "between",			  "command",	  "calc",		  "(val:wrd,low:wrd,high:wrd):bit ",																													  "CALCcompBetweenwrd;"				  ]
[ "between",			  "command",	  "calc",		  "(val:sht,low:sht,high:sht):bit ",																													  "CALCcompBetweensht;"				  ]
[ "between",			  "command",	  "calc",		  "(val:sht,low:sht,high:sht):bit ",																													  "CALCcompBetweensht;"				  ]
[ "between",			  "command",	  "calc",		  "(val:sht,low:sht,high:sht):bit ",																													  "CALCcompBetweensht;"				  ]
[ "between",			  "command",	  "calc",		  "(val:sht,low:sht,high:sht):bit ",																													  "CALCcompBetweensht;"				  ]
[ "between",			  "command",	  "calc",		  "(val:sht,low:sht,high:sht):bit ",																													  "CALCcompBetweensht;"				  ]
[ "between",			  "command",	  "calc",		  "(val:bte,low:bte,high:bte):bit ",																													  "CALCcompBetweenbte;"				  ]
[ "between",			  "command",	  "calc",		  "(val:bte,low:bte,high:bte):bit ",																													  "CALCcompBetweenbte;"				  ]
[ "between",			  "command",	  "calc",		  "(val:bte,low:bte,high:bte):bit ",																													  "CALCcompBetweenbte;"				  ]
[ "between",			  "command",	  "calc",		  "(val:bte,low:bte,high:bte):bit ",																													  "CALCcompBetweenbte;"				  ]
[ "between",			  "command",	  "calc",		  "(val:bte,low:bte,high:bte):bit ",																													  "CALCcompBetweenbte;"				  ]
[ "between",			  "command",	  "calc",		  "(val:dbl,low:dbl,high:dbl):bit ",																													  "CALCcompBetweendbl;"				  ]
[ "between",			  "command",	  "calc",		  "(val:flt,low:flt,high:flt):bit ",																													  "CALCcompBetweenflt;"				  ]
[ "between",			  "command",	  "calc",		  "(val:flt,low:flt,high:flt):bit ",																													  "CALCcompBetweenflt;"				  ]
[ "between",			  "command",	  "calc",		  "(val:oid,low:oid,high:oid):bit ",																													  "CALCcompBetweenoid;"				  ]
[ "bidding",			  "pattern",	  "scheduler",		  "():bit ",																																  "OCTOPUSbidding;"				  ]
[ "bind",			  "pattern",	  "sql",		  "(mvc:int,schema:str,table:str,column:str,access:int,part_nr:int,nr_parts:int):bat[:oid,:any_1] ",																					  "mvc_bind_wrap;"				  ]
[ "bind",			  "pattern",	  "sql",		  "(mvc:int,schema:str,table:str,column:str,access:int,low:oid,hgh:oid):bat[:oid,:any_1] ",																						  "mvc_bind_wrap;"				  ]
[ "bind",			  "pattern",	  "sql",		  "(mvc:int,schema:str,table:str,column:str,access:int):bat[:oid,:any_1] ",																								  "mvc_bind_wrap;"				  ]
[ "bind",			  "function",	  "octopus",		  "(conn:str,sch:str,tab:str,col:str,kind:int,part_nr:int,nr_parts:int,version:int):bat[:oid,:any_1];",																					  "nil"						  ]
[ "bind",			  "function",	  "octopus",		  "(mvc:int,sch:str,tab:str,col:str,kind:int,part_nr:int,nr_parts:int,version:int):bat[:oid,:any_1];",																					  "nil"						  ]
[ "bind",			  "function",	  "octopus",		  "(conn:str,sch:str,tab:str,col:str,kind:int,version:int):bat[:oid,:any_1];",																								  "nil"						  ]
[ "bind",			  "function",	  "octopus",		  "(conn:str,sch:str,tab:str,col:str,kind:int,low:oid,hgh:oid,version:int):bat[:oid,:any_1];",																						  "nil"						  ]
[ "bind",			  "function",	  "octopus",		  "(mvc:int,sch:str,tab:str,col:str,kind:int,version:int):bat[:oid,:any_1];",																								  "nil"						  ]
[ "bind",			  "function",	  "octopus",		  "(mvc:int,sch:str,tab:str,col:str,kind:int,low:oid,hgh:oid,version:int):bat[:oid,:any_1];",																						  "nil"						  ]
[ "bind",			  "pattern",	  "datacyclotron",	  "(schema:str,table:str,column:str,access:int,partition:int,fbun:int,lbun:int):int ",																							  "DCYbind;"					  ]
[ "bind",			  "command",	  "dictionary",		  "(nme:str) (idx:bat[:oid,:any_1],val:bat[:any_1,:any_2]) ",																										  "DICTbind;"					  ]
[ "bind",			  "pattern",	  "mapi",		  "(key:int,remoteName:str):bat[:any_1,:any_2] ",																											  "SERVERbindBAT;"				  ]
[ "bind",			  "pattern",	  "mapi",		  "(key:int,rschema:str,rtable:str,i:int):bat[:any_1,:any_2] ",																										  "SERVERbindBAT;"				  ]
[ "bind",			  "pattern",	  "mapi",		  "(key:int,rschema:str,rtable:str,rcolumn:str,i:int):bat[:any_1,:any_2] ",																								  "SERVERbindBAT;"				  ]
[ "bind",			  "function",	  "remote",		  "(dbconn:str,sch:str,tab:str,col:str,kind:int,version:int):bat[:oid,:any_1];",																							  "nil"						  ]
[ "bind",			  "pattern",	  "bbp",		  "(idx:int):bat[:any_1,:any_2] ",																													  "CMDbbpbindindex;"				  ]
[ "bind",			  "pattern",	  "bbp",		  "(head:str,tail:str):bat[:any_1,:any_2] ",																												  "CMDbbpbind2;"				  ]
[ "bind",			  "pattern",	  "bbp",		  "(name:str):bat[:any_1,:any_2] ",																													  "CMDbbpbind;"					  ]
[ "bind",			  "pattern",	  "attach",		  "(nme:str):bat[:any_1,:any_2] ",																													  "ATTbind;"					  ]
[ "bind",			  "pattern",	  "attach",		  "(nme:str,low:oid,hgh:oid):bat[:any_1,:any_2] ",																											  "ATTbindPartition;"				  ]
[ "bind_dbat",			  "command",	  "sql",		  "(clientid:int,schema:str,table:str,access:int,oldversion:lng,version:lng):bat[:oid,:oid] ",																						  "mvc_diff_dbat_wrap;"				  ]
[ "bind_dbat",			  "pattern",	  "sql",		  "(mvc:int,schema:str,table:str,access:int):bat[:oid,:oid] ",																										  "mvc_bind_dbat_wrap;"				  ]
[ "bind_dbat",			  "function",	  "octopus",		  "(conn:str,sch:str,tab:str,access:int,version:int):bat[:oid,:oid];",																									  "nil"						  ]
[ "bind_dbat",			  "function",	  "octopus",		  "(mvc:int,sch:str,tab:str,access:int,version:int):bat[:oid,:oid];",																									  "nil"						  ]
[ "bind_dbat",			  "function",	  "remote",		  "(dbconn:str,sch:str,tab:str,access:int,version:int):bat[:oid,:oid];",																								  "nil"						  ]
[ "bind_idxbat",		  "pattern",	  "sql",		  "(mvc:int,schema:str,table:str,index:str,access:int,part_nr:int,nr_parts:int):bat[:oid,:any_1] ",																					  "mvc_bind_idxbat_wrap;"			  ]
[ "bind_idxbat",		  "pattern",	  "sql",		  "(mvc:int,schema:str,table:str,index:str,access:int,low:oid,hgh:oid):bat[:oid,:any_1] ",																						  "mvc_bind_idxbat_wrap;"			  ]
[ "bind_idxbat",		  "pattern",	  "sql",		  "(mvc:int,schema:str,table:str,index:str,access:int):bat[:oid,:any_1] ",																								  "mvc_bind_idxbat_wrap;"			  ]
[ "bind_idxbat",		  "function",	  "octopus",		  "(conn:str,sch:str,tab:str,index:str,access:int,part_nr:int,nr_parts:int,version:int):bat[:oid,:oid];",																				  "nil"						  ]
[ "bind_idxbat",		  "function",	  "octopus",		  "(conn:str,sch:str,tab:str,index:str,access:int,low:oid,hgh:oid,version:int):bat[:oid,:oid];",																					  "nil"						  ]
[ "bind_idxbat",		  "function",	  "octopus",		  "(conn:str,sch:str,tab:str,index:str,access:int,version:int):bat[:oid,:oid];",																							  "nil"						  ]
[ "bind_idxbat",		  "function",	  "octopus",		  "(mvc:int,sch:str,tab:str,index:str,access:int,version:int):bat[:oid,:oid];",																								  "nil"						  ]
[ "bind_idxbat",		  "function",	  "remote",		  "(dbconn:str,sch:str,tab:str,index:str,access:int,version:int):bat[:oid,:oid];",																							  "nil"						  ]
[ "bintype",			  "pattern",	  "remote",		  "():void ",																																  "RMTbintype;"					  ]
[ "bit",			  "command",	  "batcalc",		  "(b:bat[:any_1,:str]):bat[:any_1,:bit] ",																												  "CMDconvert_str_bit;"				  ]
[ "bit",			  "command",	  "batcalc",		  "(b:bat[:any_1,:lng]):bat[:any_1,:bit] ",																												  "CMDconvert_lng_bit;"				  ]
[ "bit",			  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																												  "CMDconvert_wrd_bit;"				  ]
[ "bit",			  "command",	  "batcalc",		  "(b:bat[:any_1,:int]):bat[:any_1,:bit] ",																												  "CMDconvert_int_bit;"				  ]
[ "bit",			  "command",	  "batcalc",		  "(b:bat[:any_1,:sht]):bat[:any_1,:bit] ",																												  "CMDconvert_sht_bit;"				  ]
[ "bit",			  "command",	  "batcalc",		  "(b:bat[:any_1,:bte]):bat[:any_1,:bit] ",																												  "CMDconvert_bte_bit;"				  ]
[ "bit",			  "command",	  "batcalc",		  "(b:bat[:any_1,:bit]):bat[:any_1,:bit] ",																												  "CMDconvert_bit;"				  ]
[ "bit",			  "command",	  "calc",		  "(v:void):bit ",																															  "CALCnil2bit;"				  ]
[ "bit",			  "command",	  "calc",		  "(v:str):bit ",																															  "CALCstr2bit;"				  ]
[ "bit",			  "command",	  "calc",		  "(x:dbl):bit ",																															  "CALCdbl2bit;"				  ]
[ "bit",			  "command",	  "calc",		  "(x:flt):bit ",																															  "CALCflt2bit;"				  ]
[ "bit",			  "command",	  "calc",		  "(x:lng):bit ",																															  "CALClng2bit;"				  ]
[ "bit",			  "command",	  "calc",		  "(x:wrd):bit ",																															  "CALCwrd2bit;"				  ]
[ "bit",			  "command",	  "calc",		  "(x:int):bit ",																															  "CALCint2bit;"				  ]
[ "bit",			  "command",	  "calc",		  "(x:sht):bit ",																															  "CALCsht2bit;"				  ]
[ "bit",			  "command",	  "calc",		  "(x:bte):bit ",																															  "CALCbte2bit;"				  ]
[ "bit",			  "command",	  "calc",		  "(x:bit):bit ",																															  "CALCbit2bit;"				  ]
[ "bit",			  "command",	  "calc",		  "(x:oid):bit ",																															  "CALCoid2bit;"				  ]
[ "blob",			  "command",	  "blob",		  "(s:str):blob ",																															  "BLOBblob_fromstr;"				  ]
[ "blob",			  "command",	  "blob",		  "(s:blob):blob ",																															  "BLOBblob_blob;"				  ]
[ "blob",			  "command",	  "calc",		  "(s:str):blob ",																															  "BLOBblob_fromstr;"				  ]
[ "blob",			  "command",	  "calc",		  "(b:blob):blob ",																															  "BLOBblob_blob;"				  ]
[ "blocked",			  "command",	  "streams",		  "(s:streams):streams ",																														  "open_block_streamwrap;"			  ]
[ "blue",			  "command",	  "batcolor",		  "(c:bat[:oid,:color]):bat[:oid,:int] ",																												  "CLRbatBlue;"					  ]
[ "blue",			  "command",	  "color",		  "(c:color):int ",																															  "CLRblue;"					  ]
[ "broadcast",			  "command",	  "inet",		  "(X_1:inet):inet ",																															  "INETbroadcast;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng],d2:int,s2:int):bat[:oid,:bte] ",																										  "batlng_dec2dec_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng]):bat[:oid,:bte] ",																												  "batlng_dec2_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(v:bat[:oid,:lng],digits:int,scale:int):bat[:oid,:bte] ",																										  "batlng_num2dec_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(v:bat[:oid,:lng]):bat[:oid,:bte] ",																													  "batlng_2_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd],d2:int,s2:int):bat[:oid,:bte] ",																										  "batwrd_dec2dec_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd]):bat[:oid,:bte] ",																												  "batwrd_dec2_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(v:bat[:oid,:wrd],digits:int,scale:int):bat[:oid,:bte] ",																										  "batwrd_num2dec_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(v:bat[:oid,:wrd]):bat[:oid,:bte] ",																													  "batwrd_2_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int],d2:int,s2:int):bat[:oid,:bte] ",																										  "batint_dec2dec_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int]):bat[:oid,:bte] ",																												  "batint_dec2_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(v:bat[:oid,:int],digits:int,scale:int):bat[:oid,:bte] ",																										  "batint_num2dec_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(v:bat[:oid,:int]):bat[:oid,:bte] ",																													  "batint_2_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht],d2:int,s2:int):bat[:oid,:bte] ",																										  "batsht_dec2dec_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht]):bat[:oid,:bte] ",																												  "batsht_dec2_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(v:bat[:oid,:sht],digits:int,scale:int):bat[:oid,:bte] ",																										  "batsht_num2dec_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(v:bat[:oid,:sht]):bat[:oid,:bte] ",																													  "batsht_2_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte],d2:int,s2:int):bat[:oid,:bte] ",																										  "batbte_dec2dec_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte]):bat[:oid,:bte] ",																												  "batbte_dec2_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(v:bat[:oid,:bte],digits:int,scale:int):bat[:oid,:bte] ",																										  "batbte_num2dec_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(v:bat[:oid,:bte]):bat[:oid,:bte] ",																													  "batbte_2_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(v:bat[:oid,:dbl],digits:int,scale:int):bat[:oid,:bte] ",																										  "batdbl_num2dec_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(v:bat[:oid,:dbl]):bat[:oid,:bte] ",																													  "batdbl_2_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(v:bat[:oid,:flt],digits:int,scale:int):bat[:oid,:bte] ",																										  "batflt_num2dec_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(v:bat[:oid,:flt]):bat[:oid,:bte] ",																													  "batflt_2_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(v:bat[:oid,:str],digits:int,scale:int):bat[:oid,:bte] ",																										  "batstr_2dec_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(v:bat[:oid,:str],digits:int):bat[:oid,:bte] ",																											  "batstr_2num_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(v:bat[:oid,:str]):bat[:oid,:bte] ",																													  "batstr_2_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(b:bat[:any_1,:bit]):bat[:any_1,:bte] ",																												  "CMDconvert_bit_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl]):bat[:any_1,:bte] ",																												  "CMDconvert_dbl_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(b:bat[:any_1,:flt]):bat[:any_1,:bte] ",																												  "CMDconvert_flt_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(b:bat[:any_1,:oid]):bat[:any_1,:bte] ",																												  "CMDconvert_oid_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(b:bat[:any_1,:lng]):bat[:any_1,:bte] ",																												  "CMDconvert_lng_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd]):bat[:any_1,:bte] ",																												  "CMDconvert_wrd_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(b:bat[:any_1,:int]):bat[:any_1,:bte] ",																												  "CMDconvert_int_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(b:bat[:any_1,:sht]):bat[:any_1,:bte] ",																												  "CMDconvert_sht_bte;"				  ]
[ "bte",			  "command",	  "batcalc",		  "(b:bat[:any_1,:bte]):bat[:any_1,:bte] ",																												  "CMDconvert_bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(s1:int,v:lng,d2:int,s2:int):bte ",																													  "lng_dec2dec_bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(s1:int,v:lng):bte ",																														  "lng_dec2_bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(v:lng,digits:int,scale:int):bte ",																													  "lng_num2dec_bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(v:lng):bte ",																															  "lng_2_bte;"					  ]
[ "bte",			  "command",	  "calc",		  "(s1:int,v:wrd,d2:int,s2:int):bte ",																													  "wrd_dec2dec_bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(s1:int,v:wrd):bte ",																														  "wrd_dec2_bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(v:wrd,digits:int,scale:int):bte ",																													  "wrd_num2dec_bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(v:wrd):bte ",																															  "wrd_2_bte;"					  ]
[ "bte",			  "command",	  "calc",		  "(s1:int,v:int,d2:int,s2:int):bte ",																													  "int_dec2dec_bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(s1:int,v:int):bte ",																														  "int_dec2_bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(v:int,digits:int,scale:int):bte ",																													  "int_num2dec_bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(v:int):bte ",																															  "int_2_bte;"					  ]
[ "bte",			  "command",	  "calc",		  "(s1:int,v:sht,d2:int,s2:int):bte ",																													  "sht_dec2dec_bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(s1:int,v:sht):bte ",																														  "sht_dec2_bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(v:sht,digits:int,scale:int):bte ",																													  "sht_num2dec_bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(v:sht):bte ",																															  "sht_2_bte;"					  ]
[ "bte",			  "command",	  "calc",		  "(s1:int,v:bte,d2:int,s2:int):bte ",																													  "bte_dec2dec_bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(s1:int,v:bte):bte ",																														  "bte_dec2_bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(v:bte,digits:int,scale:int):bte ",																													  "bte_num2dec_bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(v:bte):bte ",																															  "bte_2_bte;"					  ]
[ "bte",			  "command",	  "calc",		  "(v:dbl,digits:int,scale:int):bte ",																													  "dbl_num2dec_bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(v:dbl):bte ",																															  "dbl_2_bte;"					  ]
[ "bte",			  "command",	  "calc",		  "(v:flt,digits:int,scale:int):bte ",																													  "flt_num2dec_bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(v:flt):bte ",																															  "flt_2_bte;"					  ]
[ "bte",			  "command",	  "calc",		  "(v:str,digits:int,scale:int):bte ",																													  "str_2dec_bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(v:str,digits:int):bte ",																														  "str_2num_bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(v:str):bte ",																															  "str_2_bte;"					  ]
[ "bte",			  "command",	  "calc",		  "(v:void):bte ",																															  "CALCnil2bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(v:str):bte ",																															  "CALCstr2bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(x:lng):bte ",																															  "CALClng2bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(x:int):bte ",																															  "CALCint2bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(x:sht):bte ",																															  "CALCsht2bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(x:bte):bte ",																															  "CALCbte2bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(x:dbl):bte ",																															  "CALCdbl2bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(x:flt):bte ",																															  "CALCflt2bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(x:lng):bte ",																															  "CALClng2bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(x:wrd):bte ",																															  "CALCwrd2bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(x:int):bte ",																															  "CALCint2bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(x:sht):bte ",																															  "CALCsht2bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(x:bte):bte ",																															  "CALCbte2bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(x:bit):bte ",																															  "CALCbit2bte;"				  ]
[ "bte",			  "command",	  "calc",		  "(x:oid):bte ",																															  "CALCoid2bte;"				  ]
[ "bulk_rotate_xor_hash",	  "command",	  "mkey",		  "(h:bat[:oid,:wrd],nbits:int,b:bat[:oid,:any_1]):bat[:oid,:wrd] ",																									  "MKEYbulk_rotate_xor_hash;"			  ]
[ "bulk_rotate_xor_hash",	  "pattern",	  "mkey",		  "(h:bat[:oid,:wrd],nbits:int,v:any):bat[:oid,:wrd] ",																											  "MKEYbulkconst_rotate_xor_hash;"		  ]
[ "bulk_rotate_xor_hash",	  "command",	  "mkey",		  "(h:wrd,nbits:int,b:bat[:oid,:any_1]):bat[:oid,:wrd] ",																										  "MKEYconstbulk_rotate_xor_hash;"		  ]
[ "bulk_rotate_xor_hash",	  "pattern",	  "mkey",		  "(h:wrd,nbits:int,v:any):wrd ",																													  "MKEYrotate_xor_hash;"			  ]
[ "call",			  "pattern",	  "language",		  "(s:bat[:oid,:str]):void ",																														  "CMDcallBAT;"					  ]
[ "call",			  "pattern",	  "language",		  "(s:str):void ",																															  "CMDcallString;"				  ]
[ "cardinality",		  "command",	  "aggr",		  "(b:bat[:any_1,:any_2]):lng ",																													  "ALGcard;"					  ]
[ "catalog",			  "pattern",	  "sql",		  "(type:int,iname:str,itype:int,sname:str,tname:str...):void ",																									  "SQLcatalog;"					  ]
[ "catalog",			  "pattern",	  "sql",		  "(type:int,sname:str,tname:str,grantee:str,privs:int,cname:str,grant:int,grantor:int):void ",																						  "SQLcatalog;"					  ]
[ "catalog",			  "pattern",	  "sql",		  "(type:int,user:str,passwd:str,enc:int,schema:str,fullname:str):void ",																								  "SQLcatalog;"					  ]
[ "catalog",			  "pattern",	  "sql",		  "(type:int,grantee:str,role:str):void ",																												  "SQLcatalog;"					  ]
[ "catalog",			  "pattern",	  "sql",		  "(type:int,sname:str,t:ptr,restart:lng):void ",																											  "SQLcatalog;"					  ]
[ "catalog",			  "pattern",	  "sql",		  "(type:int,sname:str,t:ptr,temp:int):void ",																												  "SQLcatalog;"					  ]
[ "catalog",			  "pattern",	  "sql",		  "(type:int,sname:str,t:ptr):void ",																													  "SQLcatalog;"					  ]
[ "catalog",			  "pattern",	  "sql",		  "(type:int,sname:str,name:str,tname:str,time:int,o:int,event:int,oname:str,nname:str,condition:str,query:str):void ",																			  "SQLcatalog;"					  ]
[ "catalog",			  "pattern",	  "sql",		  "(type:int,sname:str,name:str,funcid:int,ft:int,action:int):void ",																									  "SQLcatalog;"					  ]
[ "catalog",			  "pattern",	  "sql",		  "(type:int,sname:str,name:str,action:int):void ",																											  "SQLcatalog;"					  ]
[ "cb",				  "command",	  "batcolor",		  "(c:bat[:oid,:color]):bat[:oid,:int] ",																												  "CLRbatCb;"					  ]
[ "cb",				  "command",	  "color",		  "(c:color):int ",																															  "CLRcb;"					  ]
[ "ceil",			  "command",	  "batmmath",		  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",																													  "CMDscience_bat_flt_ceil;"			  ]
[ "ceil",			  "command",	  "batmmath",		  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",																													  "CMDscience_bat_dbl_ceil;"			  ]
[ "ceil",			  "command",	  "mmath",		  "(y:dbl):dbl ",																															  "MATHunary_CEILdbl;"				  ]
[ "ceil",			  "command",	  "mmath",		  "(y:flt):flt ",																															  "MATHunary_CEILflt;"				  ]
[ "centipede",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTcentipede;"				  ]
[ "centipede",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTcentipede;"				  ]
[ "changePassword",		  "pattern",	  "clients",		  "(old:str,new:str):void ",																														  "CLTchangePassword;"				  ]
[ "changeUsername",		  "pattern",	  "clients",		  "(old:str,new:str):void ",																														  "CLTchangeUsername;"				  ]
[ "checkPermission",		  "pattern",	  "clients",		  "(usr:str,pw:str):void ",																														  "CLTcheckPermission;"				  ]
[ "choice",			  "pattern",	  "scheduler",		  "(arg:any...):void ",																															  "RUNchoice;"					  ]
[ "choice",			  "pattern",	  "scheduler",		  "():void ",																																  "RUNchoice;"					  ]
[ "clean",			  "pattern",	  "transaction",	  "(c:any...):void ",																															  "TRNtrans_clean;"				  ]
[ "cleanup",			  "command",	  "profiler",		  "():void ",																																  "CMDcleanup;"					  ]
[ "clear_table",		  "pattern",	  "sql",		  "(sname:str,tname:str):wrd ",																														  "mvc_clear_table_wrap;"			  ]
[ "clients",			  "function",	  "sql",		  "() (user:bat[:oid,:str],login:bat[:oid,:str],lastcommand:bat[:oid,:str],actions:bat[:oid,:int],seconds:bat[:oid,:lng]);",																		  "nil"						  ]
[ "close",			  "command",	  "tokenizer",		  "():void ",																																  "TKNZRclose;"					  ]
[ "close",			  "pattern",	  "statistics",		  "():void ",																																  "STATclose;"					  ]
[ "close",			  "pattern",	  "box",		  "(bname:str):void ",																															  "BOXclose;"					  ]
[ "close",			  "command",	  "bbp",		  "():void ",																																  "CMDbbpclose;"				  ]
[ "close",			  "pattern",	  "const",		  "():void ",																																  "CSTclose;"					  ]
[ "close",			  "command",	  "streams",		  "(s:streams):void ",																															  "mnstr_close_streamwrap;"			  ]
[ "closeStream",		  "command",	  "profiler",		  "():void ",																																  "CMDcloseProfilerStream;"			  ]
[ "clrDebug",			  "pattern",	  "optimizer",		  "():void ",																																  "QOTclrdebugOptimizers;"			  ]
[ "clrFilter",			  "pattern",	  "profiler",		  "(v:any):void ",																															  "CMDsetFilterVariable;"			  ]
[ "clrFilter",			  "pattern",	  "profiler",		  "(mod:str,fcn:str):void ",																														  "CMDclrFilterProfiler;"			  ]
[ "cluster",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTcluster;"					  ]
[ "cluster",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTcluster;"					  ]
[ "cluster1",			  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",																														  "SQLcluster1;"				  ]
[ "cluster2",			  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",																														  "SQLcluster2;"				  ]
[ "codeset",			  "command",	  "str",		  "():str ",																																  "STRcodeset;"					  ]
[ "coercions",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTcoercion;"				  ]
[ "coercions",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTcoercion;"				  ]
[ "collect",			  "pattern",	  "mdb",		  "(v:any_1):void ",																															  "OPTtraceCall;"				  ]
[ "color",			  "command",	  "batcolor",		  "(s:bat[:oid,:str]):bat[:oid,:color] ",																												  "CLRbatColor;"				  ]
[ "color",			  "command",	  "color",		  "(s:str):color ",																															  "CLRcolor;"					  ]
[ "column",			  "pattern",	  "cluster",		  "(m:bat[:oid,:oid],b:bat[:oid,:any_1]):bat[:oid,:any_1] ",																										  "CLUSTER_column;"				  ]
[ "comment",			  "command",	  "xml",		  "(val:bat[:oid,:str]):bat[:oid,:xml] ",																												  "BATXMLcomment;"				  ]
[ "comment",			  "command",	  "xml",		  "(val:str):xml ",																															  "XMLcomment;"					  ]
[ "commit",			  "pattern",	  "transaction",	  "(c:any...):void ",																															  "TRNtrans_commit;"				  ]
[ "commit",			  "command",	  "transaction",	  "():bit ",																																  "TRNglobal_commit;"				  ]
[ "commit",			  "pattern",	  "sql",		  "():void ",																																  "SQLcommit;"					  ]
[ "commit",			  "pattern",	  "bbp",		  "():void ",																																  "CMDbbpReleaseAll;"				  ]
[ "commit",			  "command",	  "bbp",		  "(b:bat[:any_1,:any_2]):void ",																													  "CMDbbpSubCommit;"				  ]
[ "commonTerms",		  "pattern",	  "optimizer",		  "(mod:any_1,fcn:any_2):str ",																														  "OPTcommonTerms;"				  ]
[ "commonTerms",		  "pattern",	  "optimizer",		  "():str ",																																  "OPTcommonTerms;"				  ]
[ "compile",			  "command",	  "pcre",		  "(pat:str):pcre ",																															  "PCREcompile_wrap;"				  ]
[ "completion",			  "pattern",	  "manual",		  "(pat:str):bat[:int,:str] ",																														  "MANUALcompletion;"				  ]
[ "compress",			  "pattern",	  "dictionary",		  "(s:str,b:bat[:any_1,:any_2]):void ",																													  "DICTcompress;"				  ]
[ "compress",			  "command",	  "bbp",		  "(b:bat[:any_1,:any_2],fnme:str):bat[:any_1,:any_2] ",																										  "CMDbbpcompress;"				  ]
[ "compression",		  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTcompress;"				  ]
[ "compression",		  "pattern",	  "optimizer",		  "():str ",																																  "OPTcompress;"				  ]
[ "compute",			  "command",	  "mtime",		  "(r:zrule,year:int):date ",																														  "MTIMEcompute_rule_foryear;"			  ]
[ "concat",			  "command",	  "xml",		  "(left:bat[:oid,:xml],right:bat[:oid,:xml]):bat[:oid,:xml] ",																										  "BATXMLconcat;"				  ]
[ "concat",			  "command",	  "xml",		  "(val1:xml,val2:xml):xml ",																														  "XMLconcat;"					  ]
[ "connect",			  "command",	  "srvpool",		  "(dbname:str):str ",																															  "SRVPOOLconnect;"				  ]
[ "connect",			  "command",	  "octopus",		  "(dbname:str):str ",																															  "OCTOPUSconnect;"				  ]
[ "connect",			  "pattern",	  "mapi",		  "(host:str,port:int,usr:str,passwd:str,lang:str):int ",																										  "SERVERconnect;"				  ]
[ "connect",			  "command",	  "remote",		  "(uri:str,user:str,passwd:str,scen:str):str ",																											  "RMTconnectScen;"				  ]
[ "connect",			  "command",	  "remote",		  "(uri:str,user:str,passwd:str):str ",																													  "RMTconnect;"					  ]
[ "constants",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTconstants;"				  ]
[ "constants",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTconstants;"				  ]
[ "content",			  "command",	  "xml",		  "(src:bat[:oid,:str]):bat[:oid,:xml] ",																												  "BATXMLcontent;"				  ]
[ "content",			  "command",	  "xml",		  "(val:str):xml ",																															  "XMLcontent;"					  ]
[ "copy",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "ALGcopy;"					  ]
[ "copy_from",			  "pattern",	  "sql",		  "(sname:str,tname:str,sep:str,rsep:str,ssep:str,ns:str,fname:str,nr:lng,offset:lng,locked:int):bat[:oid,:any]... ",																			  "mvc_import_table_wrap;"			  ]
[ "copyfrom",			  "pattern",	  "sql",		  "(sname:str,tname:str,sep:str,rsep:str,ssep:str,ns:str,nr:lng,offset:lng,locked:int):bat[:oid,:any]... ",																				  "mvc_import_table_stdin;"			  ]
[ "corr",			  "function",	  "aggr",		  "(e1:bat[:oid,:dbl],e2:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:dbl];",																						  "nil"						  ]
[ "corr",			  "function",	  "aggr",		  "(e1:bat[:oid,:dbl],e2:bat[:oid,:dbl]):dbl;",																												  "nil"						  ]
[ "corr",			  "function",	  "aggr",		  "(e1:bat[:oid,:flt],e2:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:flt];",																						  "nil"						  ]
[ "corr",			  "function",	  "aggr",		  "(e1:bat[:oid,:flt],e2:bat[:oid,:flt]):flt;",																												  "nil"						  ]
[ "corr",			  "function",	  "aggr",		  "(e1:bat[:oid,:lng],e2:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:lng];",																						  "nil"						  ]
[ "corr",			  "function",	  "aggr",		  "(e1:bat[:oid,:lng],e2:bat[:oid,:lng]):lng;",																												  "nil"						  ]
[ "corr",			  "function",	  "aggr",		  "(e1:bat[:oid,:int],e2:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:int];",																						  "nil"						  ]
[ "corr",			  "function",	  "aggr",		  "(e1:bat[:oid,:int],e2:bat[:oid,:int]):int;",																												  "nil"						  ]
[ "corr",			  "function",	  "aggr",		  "(e1:bat[:oid,:sht],e2:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:sht];",																						  "nil"						  ]
[ "corr",			  "function",	  "aggr",		  "(e1:bat[:oid,:sht],e2:bat[:oid,:sht]):sht;",																												  "nil"						  ]
[ "corr",			  "function",	  "aggr",		  "(e1:bat[:oid,:bte],e2:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:bte];",																						  "nil"						  ]
[ "corr",			  "function",	  "aggr",		  "(e1:bat[:oid,:bte],e2:bat[:oid,:bte]):bte;",																												  "nil"						  ]
[ "cos",			  "command",	  "batmmath",		  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",																													  "CMDscience_bat_flt_cos;"			  ]
[ "cos",			  "command",	  "batmmath",		  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",																													  "CMDscience_bat_dbl_cos;"			  ]
[ "cos",			  "command",	  "mmath",		  "(x:dbl):dbl ",																															  "MATHunary_COSdbl;"				  ]
[ "cos",			  "command",	  "mmath",		  "(x:flt):flt ",																															  "MATHunary_COSflt;"				  ]
[ "cosh",			  "command",	  "batmmath",		  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",																													  "CMDscience_bat_flt_cosh;"			  ]
[ "cosh",			  "command",	  "batmmath",		  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",																													  "CMDscience_bat_dbl_cosh;"			  ]
[ "cosh",			  "command",	  "mmath",		  "(x:dbl):dbl ",																															  "MATHunary_COSHdbl;"				  ]
[ "cosh",			  "command",	  "mmath",		  "(x:flt):flt ",																															  "MATHunary_COSHflt;"				  ]
[ "costModel",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTcostModel;"				  ]
[ "costModel",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTcostModel;"				  ]
[ "costPrediction",		  "pattern",	  "scheduler",		  "(a:any):lng ",																															  "RUNcostPrediction;"				  ]
[ "cot",			  "command",	  "mmath",		  "(x:dbl):dbl ",																															  "MATHunary_COTdbl;"				  ]
[ "cot",			  "command",	  "mmath",		  "(x:flt):flt ",																															  "MATHunary_COTflt;"				  ]
[ "count",			  "command",	  "group",		  "(b:bat[:any_2,:any_1],e:bat[:any_2,:any_3],nonils:bit):bat[:any_2,:wrd] ",																								  "GRPaggr_count;"				  ]
[ "count",			  "command",	  "aggr",		  "(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:wrd] ",																								  "AX3aggrX3_count3Nils;"			  ]
[ "count",			  "command",	  "aggr",		  "(b:bat[:void,:any_1],e:bat[:void,:any_2]):bat[:void,:wrd] ",																										  "AX3aggrX3_count2Nils;"			  ]
[ "count",			  "command",	  "aggr",		  "(b:bat[:void,:any_1],e:bat[:oid,:any_2]):bat[:void,:wrd] ",																										  "AX3aggrX3_count2Nils;"			  ]
[ "count",			  "command",	  "aggr",		  "(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2],nonils:bit):bat[:void,:wrd] ",																						  "AX3aggrX3_count3;"				  ]
[ "count",			  "command",	  "aggr",		  "(b:bat[:oid,:any_1],e:bat[:oid,:any_2],ignorenils:bit):bat[:oid,:wrd] ",																								  "AX3aggrX3_count;"				  ]
[ "count",			  "command",	  "aggr",		  "(b:bat[:any_1,:any],ignore_nils:bit):wrd ",																												  "ALGcount_nil;"				  ]
[ "count",			  "command",	  "aggr",		  "(b:bat[:any_1,:any]):wrd ",																														  "ALGcount_bat;"				  ]
[ "count_no_nil",		  "command",	  "aggr",		  "(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:wrd] ",																								  "AX3count_no_nil3;"				  ]
[ "count_no_nil",		  "command",	  "aggr",		  "(b:bat[:oid,:any_1],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",																										  "AX3count_no_nil2;"				  ]
[ "count_no_nil",		  "command",	  "aggr",		  "(b:bat[:any_1,:any_2]):wrd ",																													  "ALGcount_no_nil;"				  ]
[ "covar",			  "function",	  "aggr",		  "(e1:bat[:oid,:dbl],e2:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:dbl];",																						  "nil"						  ]
[ "covar",			  "function",	  "aggr",		  "(e1:bat[:oid,:dbl],e2:bat[:oid,:dbl]):dbl;",																												  "nil"						  ]
[ "covar",			  "function",	  "aggr",		  "(e1:bat[:oid,:flt],e2:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:flt];",																						  "nil"						  ]
[ "covar",			  "function",	  "aggr",		  "(e1:bat[:oid,:flt],e2:bat[:oid,:flt]):flt;",																												  "nil"						  ]
[ "covar",			  "function",	  "aggr",		  "(e1:bat[:oid,:lng],e2:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:lng];",																						  "nil"						  ]
[ "covar",			  "function",	  "aggr",		  "(e1:bat[:oid,:lng],e2:bat[:oid,:lng]):lng;",																												  "nil"						  ]
[ "covar",			  "function",	  "aggr",		  "(e1:bat[:oid,:int],e2:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:int];",																						  "nil"						  ]
[ "covar",			  "function",	  "aggr",		  "(e1:bat[:oid,:int],e2:bat[:oid,:int]):int;",																												  "nil"						  ]
[ "covar",			  "function",	  "aggr",		  "(e1:bat[:oid,:sht],e2:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:sht];",																						  "nil"						  ]
[ "covar",			  "function",	  "aggr",		  "(e1:bat[:oid,:sht],e2:bat[:oid,:sht]):sht;",																												  "nil"						  ]
[ "covar",			  "function",	  "aggr",		  "(e1:bat[:oid,:bte],e2:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:bte];",																						  "nil"						  ]
[ "covar",			  "function",	  "aggr",		  "(e1:bat[:oid,:bte],e2:bat[:oid,:bte]):bte;",																												  "nil"						  ]
[ "cpuStatistics",		  "command",	  "status",		  "():bat[:str,:int] ",																															  "SYScpuStatistics;"				  ]
[ "cr",				  "command",	  "batcolor",		  "(c:bat[:oid,:color]):bat[:oid,:int] ",																												  "CLRbatCr;"					  ]
[ "cr",				  "command",	  "color",		  "(c:color):int ",																															  "CLRcr;"					  ]
[ "create",			  "command",	  "bstream",		  "(s:streams,bufsize:int):bstream ",																													  "bstream_create_wrapwrap;"			  ]
[ "create",			  "command",	  "sema",		  "(init:int):sema ",																															  "SEMAcreate;"					  ]
[ "create",			  "command",	  "lock",		  "():lock ",																																  "LCKcreate;"					  ]
[ "createXML",			  "pattern",	  "manual",		  "():void ",																																  "MANUALcreate0;"				  ]
[ "createXML",			  "pattern",	  "manual",		  "(mod:str):void ",																															  "MANUALcreate1;"				  ]
[ "crossproduct",		  "command",	  "algebra",		  "(left:bat[:any_1,:any_2],right:bat[:any_3,:any_4]):bat[:any_1,:any_4] ",																								  "ALGcross;"					  ]
[ "ctime",			  "command",	  "alarm",		  "():str ",																																  "ALARMctime;"					  ]
[ "current_date",		  "command",	  "mtime",		  "():date ",																																  "MTIMEcurrent_date;"				  ]
[ "current_time",		  "command",	  "mtime",		  "():daytime ",																															  "MTIMEcurrent_time;"				  ]
[ "current_timestamp",		  "command",	  "mtime",		  "():timestamp ",																															  "MTIMEcurrent_timestamp;"			  ]
[ "curve",			  "function",	  "calc",		  "(wkt:str):wkb;",																															  "nil"						  ]
[ "data",			  "command",	  "io",			  "(fname:str):str ",																															  "IOdatafile;"					  ]
[ "datacyclotron",		  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTdatacyclotron;"				  ]
[ "datacyclotron",		  "pattern",	  "optimizer",		  "():str ",																																  "OPTdatacyclotron;"				  ]
[ "dataflow",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTdataflow;"				  ]
[ "dataflow",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTdataflow;"				  ]
[ "dataflow",			  "pattern",	  "language",		  "():int ",																																  "MALstartDataflow;"				  ]
[ "date",			  "command",	  "batcalc",		  "(v:bat[:oid,:str]):bat[:oid,:date] ",																												  "batstr_2_date;"				  ]
[ "date",			  "command",	  "date",		  "(s:date):date ",																															  "MTIMEdate_date;"				  ]
[ "date",			  "command",	  "mtime",		  "(t:timestamp,v:timezone):date ",																													  "MTIMEtimestamp_extract_date;"		  ]
[ "date",			  "command",	  "mtime",		  "(t:timestamp):date ",																														  "MTIMEtimestamp_extract_date_default;"	  ]
[ "date",			  "command",	  "mtime",		  "(yr:int,mo:int,day:int):date ",																													  "MTIMEdate_create;"				  ]
[ "date",			  "command",	  "mtime",		  "(s:str):date ",																															  "MTIMEdate_fromstr;"				  ]
[ "date",			  "command",	  "mtime",		  "(X_1:void):date ",																															  "MTIMEnil2date;"				  ]
[ "date",			  "command",	  "mtime",		  "(X_1:date):date ",																															  "MTIMEdate2date;"				  ]
[ "date",			  "command",	  "calc",		  "(v:str):date ",																															  "str_2_date;"					  ]
[ "date",			  "command",	  "calc",		  "(t:timestamp):date ",																														  "MTIMEtimestamp_extract_date_default;"	  ]
[ "date",			  "command",	  "calc",		  "(d:date):date ",																															  "MTIMEdate_date;"				  ]
[ "date",			  "command",	  "calc",		  "(s:str):date ",																															  "MTIMEdate_fromstr;"				  ]
[ "date_add_month_interval",	  "command",	  "mtime",		  "(t:date,s:int):date ",																														  "MTIMEdate_addmonths;"			  ]
[ "date_add_msec_interval",	  "command",	  "mtime",		  "(t:date,ms:lng):date ",																														  "MTIMEdate_add_msec_interval_lng_wrap;"	  ]
[ "date_add_sec_interval",	  "command",	  "mtime",		  "(t:date,s:int):date ",																														  "MTIMEdate_add_sec_interval_wrap;"		  ]
[ "date_sub_msec_interval",	  "command",	  "mtime",		  "(t:date,ms:lng):date ",																														  "MTIMEdate_sub_msec_interval_lng_wrap;"	  ]
[ "date_sub_sec_interval",	  "command",	  "mtime",		  "(t:date,s:int):date ",																														  "MTIMEdate_sub_sec_interval_wrap;"		  ]
[ "date_to_str",		  "command",	  "mtime",		  "(d:date,format:str):str ",																														  "MTIMEstrftime;"				  ]
[ "day",			  "command",	  "mtime",		  "(msecs:lng):lng ",																															  "MTIMEsql_day;"				  ]
[ "day",			  "command",	  "mtime",		  "(t:timestamp):int ",																															  "MTIMEtimestamp_day;"				  ]
[ "day",			  "command",	  "mtime",		  "(t:zrule):int ",																															  "MTIMErule_extract_day;"			  ]
[ "day",			  "command",	  "mtime",		  "(d:date):int ",																															  "MTIMEdate_extract_day;"			  ]
[ "day",			  "command",	  "batmtime",		  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",																												  "MTIMEdate_extract_day_bulk;"			  ]
[ "dayname",			  "command",	  "mtime",		  "(day:int):str ",																															  "MTIMEday_to_str;"				  ]
[ "daynum",			  "command",	  "mtime",		  "(day:str):int ",																															  "MTIMEday_from_str;"				  ]
[ "dayofweek",			  "command",	  "mtime",		  "(d:date):int ",																															  "MTIMEdate_extract_dayofweek;"		  ]
[ "dayofyear",			  "command",	  "mtime",		  "(d:date):int ",																															  "MTIMEdate_extract_dayofyear;"		  ]
[ "daytime",			  "command",	  "batcalc",		  "(v:bat[:oid,:daytime],digits:int):bat[:oid,:daytime] ",																										  "batdaytime_2time_daytime;"			  ]
[ "daytime",			  "command",	  "batcalc",		  "(v:bat[:oid,:str],digits:int):bat[:oid,:daytime] ",																											  "batstr_2time_daytime;"			  ]
[ "daytime",			  "command",	  "batcalc",		  "(v:bat[:oid,:str]):bat[:oid,:daytime] ",																												  "batstr_2_daytime;"				  ]
[ "daytime",			  "command",	  "mtime",		  "(h:int,m:int,s:int):daytime ",																													  "MTIMEdaytime3;"				  ]
[ "daytime",			  "command",	  "mtime",		  "(h:int,m:int):daytime ",																														  "MTIMEdaytime2;"				  ]
[ "daytime",			  "command",	  "mtime",		  "(h:int):daytime ",																															  "MTIMEdaytime1;"				  ]
[ "daytime",			  "command",	  "mtime",		  "(t:timestamp,v:timezone):daytime ",																													  "MTIMEtimestamp_extract_daytime;"		  ]
[ "daytime",			  "command",	  "mtime",		  "(t:timestamp):daytime ",																														  "MTIMEtimestamp_extract_daytime_default;"	  ]
[ "daytime",			  "command",	  "mtime",		  "(h:int,m:int,s:int,mi:int):daytime ",																												  "MTIMEdaytime_create;"			  ]
[ "daytime",			  "command",	  "mtime",		  "(X_1:lng):daytime ",																															  "MTIMEsecs2daytime;"				  ]
[ "daytime",			  "command",	  "mtime",		  "(X_1:daytime):daytime ",																														  "MTIMEdaytime2daytime;"			  ]
[ "daytime",			  "command",	  "mtime",		  "(s:str):daytime ",																															  "MTIMEdaytime_fromstr;"			  ]
[ "daytime",			  "command",	  "calc",		  "(v:timestamp,d:int):daytime ",																													  "timestamp_2_daytime;"			  ]
[ "daytime",			  "command",	  "calc",		  "(v:lng,d:int):daytime ",																														  "second_interval_2_daytime;"			  ]
[ "daytime",			  "command",	  "calc",		  "(v:daytime,digits:int):daytime ",																													  "daytime_2time_daytime;"			  ]
[ "daytime",			  "command",	  "calc",		  "(v:str,digits:int):daytime ",																													  "str_2time_daytime;"				  ]
[ "daytime",			  "command",	  "calc",		  "(v:str):daytime ",																															  "str_2_daytime;"				  ]
[ "daytime",			  "command",	  "calc",		  "(t:timestamp):daytime ",																														  "MTIMEtimestamp_extract_daytime_default;"	  ]
[ "daytime",			  "command",	  "calc",		  "(s:lng):daytime ",																															  "MTIMEsecs2daytime;"				  ]
[ "daytime",			  "command",	  "calc",		  "(d:daytime):daytime ",																														  "MTIMEdaytime2daytime;"			  ]
[ "daytime",			  "command",	  "calc",		  "(s:str):daytime ",																															  "MTIMEdaytime_fromstr;"			  ]
[ "db_users",			  "pattern",	  "sql",		  "():bat[:oid,:str] ",																															  "db_users_wrap;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng],d2:int,s2:int):bat[:oid,:dbl] ",																										  "batlng_dec2dec_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng]):bat[:oid,:dbl] ",																												  "batlng_dec2_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(v:bat[:oid,:lng],digits:int,scale:int):bat[:oid,:dbl] ",																										  "batlng_num2dec_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(v:bat[:oid,:lng]):bat[:oid,:dbl] ",																													  "batlng_2_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd],d2:int,s2:int):bat[:oid,:dbl] ",																										  "batwrd_dec2dec_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd]):bat[:oid,:dbl] ",																												  "batwrd_dec2_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(v:bat[:oid,:wrd],digits:int,scale:int):bat[:oid,:dbl] ",																										  "batwrd_num2dec_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(v:bat[:oid,:wrd]):bat[:oid,:dbl] ",																													  "batwrd_2_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int],d2:int,s2:int):bat[:oid,:dbl] ",																										  "batint_dec2dec_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int]):bat[:oid,:dbl] ",																												  "batint_dec2_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(v:bat[:oid,:int],digits:int,scale:int):bat[:oid,:dbl] ",																										  "batint_num2dec_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(v:bat[:oid,:int]):bat[:oid,:dbl] ",																													  "batint_2_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht],d2:int,s2:int):bat[:oid,:dbl] ",																										  "batsht_dec2dec_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht]):bat[:oid,:dbl] ",																												  "batsht_dec2_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(v:bat[:oid,:sht],digits:int,scale:int):bat[:oid,:dbl] ",																										  "batsht_num2dec_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(v:bat[:oid,:sht]):bat[:oid,:dbl] ",																													  "batsht_2_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte],d2:int,s2:int):bat[:oid,:dbl] ",																										  "batbte_dec2dec_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte]):bat[:oid,:dbl] ",																												  "batbte_dec2_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(v:bat[:oid,:bte],digits:int,scale:int):bat[:oid,:dbl] ",																										  "batbte_num2dec_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(v:bat[:oid,:bte]):bat[:oid,:dbl] ",																													  "batbte_2_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(v:bat[:oid,:str]):bat[:oid,:dbl] ",																													  "batstr_2_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(b:bat[:any_1,:flt]):bat[:any_1,:dbl] ",																												  "CMDconvert_flt_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(b:bat[:any_1,:oid]):bat[:any_1,:dbl] ",																												  "CMDconvert_oid_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(b:bat[:any_1,:lng]):bat[:any_1,:dbl] ",																												  "CMDconvert_lng_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd]):bat[:any_1,:dbl] ",																												  "CMDconvert_wrd_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(b:bat[:any_1,:int]):bat[:any_1,:dbl] ",																												  "CMDconvert_int_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(b:bat[:any_1,:sht]):bat[:any_1,:dbl] ",																												  "CMDconvert_sht_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(b:bat[:any_1,:bte]):bat[:any_1,:dbl] ",																												  "CMDconvert_bte_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",																												  "CMDconvert_dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(s1:int,v:lng,d2:int,s2:int):dbl ",																													  "lng_dec2dec_dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(s1:int,v:lng):dbl ",																														  "lng_dec2_dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(v:lng,digits:int,scale:int):dbl ",																													  "lng_num2dec_dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(v:lng):dbl ",																															  "lng_2_dbl;"					  ]
[ "dbl",			  "command",	  "calc",		  "(s1:int,v:wrd,d2:int,s2:int):dbl ",																													  "wrd_dec2dec_dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(s1:int,v:wrd):dbl ",																														  "wrd_dec2_dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(v:wrd,digits:int,scale:int):dbl ",																													  "wrd_num2dec_dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(v:wrd):dbl ",																															  "wrd_2_dbl;"					  ]
[ "dbl",			  "command",	  "calc",		  "(s1:int,v:int,d2:int,s2:int):dbl ",																													  "int_dec2dec_dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(s1:int,v:int):dbl ",																														  "int_dec2_dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(v:int,digits:int,scale:int):dbl ",																													  "int_num2dec_dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(v:int):dbl ",																															  "int_2_dbl;"					  ]
[ "dbl",			  "command",	  "calc",		  "(s1:int,v:sht,d2:int,s2:int):dbl ",																													  "sht_dec2dec_dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(s1:int,v:sht):dbl ",																														  "sht_dec2_dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(v:sht,digits:int,scale:int):dbl ",																													  "sht_num2dec_dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(v:sht):dbl ",																															  "sht_2_dbl;"					  ]
[ "dbl",			  "command",	  "calc",		  "(s1:int,v:bte,d2:int,s2:int):dbl ",																													  "bte_dec2dec_dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(s1:int,v:bte):dbl ",																														  "bte_dec2_dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(v:bte,digits:int,scale:int):dbl ",																													  "bte_num2dec_dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(v:bte):dbl ",																															  "bte_2_dbl;"					  ]
[ "dbl",			  "command",	  "calc",		  "(v:str):dbl ",																															  "str_2_dbl;"					  ]
[ "dbl",			  "command",	  "calc",		  "(v:void):dbl ",																															  "CALCnil2dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(v:str):dbl ",																															  "CALCstr2dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(x:lng):dbl ",																															  "CALClng2dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(x:int):dbl ",																															  "CALCint2dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(x:sht):dbl ",																															  "CALCsht2dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(x:bte):dbl ",																															  "CALCbte2dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(x:flt):dbl ",																															  "CALCflt2dbl;"				  ]
[ "dbl",			  "command",	  "calc",		  "(x:dbl):dbl ",																															  "CALCdbl2dbl;"				  ]
[ "deactivate",			  "pattern",	  "profiler",		  "(name:str...):void ",																														  "CMDdeactivateProfiler;"			  ]
[ "deadcode",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTdeadcode;"				  ]
[ "deadcode",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTdeadcode;"				  ]
[ "dec_round",			  "command",	  "sql",		  "(v:dbl,r:dbl):dbl ",																															  "dbl_dec_round_wrap;"				  ]
[ "dec_round",			  "command",	  "sql",		  "(v:flt,r:flt):flt ",																															  "flt_dec_round_wrap;"				  ]
[ "dec_round",			  "command",	  "sql",		  "(v:lng,r:lng):lng ",																															  "lng_dec_round_wrap;"				  ]
[ "dec_round",			  "command",	  "sql",		  "(v:int,r:int):int ",																															  "int_dec_round_wrap;"				  ]
[ "dec_round",			  "command",	  "sql",		  "(v:sht,r:sht):sht ",																															  "sht_dec_round_wrap;"				  ]
[ "dec_round",			  "command",	  "sql",		  "(v:bte,r:bte):bte ",																															  "bte_dec_round_wrap;"				  ]
[ "declaredTable",		  "pattern",	  "sql",		  "(name:str):int ",																															  "mvc_declared_table_wrap;"			  ]
[ "decode",			  "command",	  "zorder",		  "(z:bat[:oid,:oid]) (X_2:bat[:oid,:int],X_3:bat[:oid,:int]) ",																									  "ZORDbatdecode_int_oid;"			  ]
[ "decode",			  "command",	  "zorder",		  "(z:oid) (x:int,y:int) ",																														  "ZORDdecode_int_oid;"				  ]
[ "decode_x",			  "command",	  "zorder",		  "(z:bat[:oid,:oid]):bat[:oid,:int] ",																													  "ZORDbatdecode_int_oid_x;"			  ]
[ "decode_x",			  "command",	  "zorder",		  "(z:oid):int ",																															  "ZORDdecode_int_oid_x;"			  ]
[ "decode_y",			  "command",	  "zorder",		  "(z:bat[:oid,:oid]):bat[:oid,:int] ",																													  "ZORDbatdecode_int_oid_y;"			  ]
[ "decode_y",			  "command",	  "zorder",		  "(z:oid):int ",																															  "ZORDdecode_int_oid_y;"			  ]
[ "decompress",			  "command",	  "dictionary",		  "(nme:str):void ",																															  "DICTdecompress;"				  ]
[ "decompress",			  "command",	  "bbp",		  "(b:bat[:any_1,:any_2],fnme:str):bat[:any_1,:any_2] ",																										  "CMDbbpdecompress;"				  ]
[ "define",			  "command",	  "zrule",		  "(m:int,d:str,w:int,min:int):zrule ",																													  "MTIMEruleDef2;"				  ]
[ "define",			  "command",	  "zrule",		  "(m:int,d:str,w:int,h:int,min:int):zrule ",																												  "MTIMEruleDef1;"				  ]
[ "define",			  "command",	  "zrule",		  "(m:int,d:int,w:int,h:int,min:int):zrule ",																												  "MTIMEruleDef0;"				  ]
[ "degrees",			  "command",	  "batmmath",		  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",																													  "CMDscience_bat_flt_degrees;"			  ]
[ "degrees",			  "command",	  "batmmath",		  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",																													  "CMDscience_bat_dbl_degrees;"			  ]
[ "degrees",			  "command",	  "mmath",		  "(x:dbl):dbl ",																															  "MATHunary_DEGREESdbl;"			  ]
[ "degrees",			  "command",	  "mmath",		  "(x:flt):flt ",																															  "MATHunary_DEGREESflt;"			  ]
[ "delete",			  "pattern",	  "sql",		  "(mvc:int,sname:str,tname:str,b:any):int ",																												  "mvc_delete_wrap;"				  ]
[ "delete",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",									  "BKCdelete_bat_bun;"					  ]
[ "delete",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "BKCdelete_all;"					  ]
[ "delete",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1):bat[:any_1,:any_2] ",											  "BKCdelete;"						  ]
[ "delete",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):bat[:any_1,:any_2] ",										  "BKCdelete_bun;"					  ]
[ "deleteHead",			  "command",	  "bat",		  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any]):void ",																											  "BKCdelete_bat;"				  ]
[ "delta",			  "command",	  "transaction",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "TRNtrans_delta;"				  ]
[ "dense_rank",			  "command",	  "sql",		  "(b:bat[:oid,:any_1]):bat[:oid,:int] ",																												  "sql_dense_rank;"				  ]
[ "dense_rank_grp",		  "command",	  "sql",		  "(b:bat[:oid,:any_1],gp:bat[:oid,:oid],gpe:bat[:oid,:oid]):bat[:oid,:int] ",																								  "sql_dense_rank_grp;"				  ]
[ "dense_rank_grp",		  "function",	  "batcalc",		  "(b:bat[:oid,:any_1]):bat[:oid,:int];",																												  "nil"						  ]
[ "dense_rank_grp",		  "function",	  "batcalc",		  "(b:bat[:oid,:any_1],gp:bat[:oid,:oid],gpe:bat[:oid,:oid]):bat[:oid,:int];",																								  "nil"						  ]
[ "densebat",			  "command",	  "bat",	  "(size:wrd):bat[:void,:void] ",														  "BKCdensebat;"				  ]
[ "deposit",			  "pattern",	  "statistics",		  "(name:bat[:any_1,:any_2]):void ",																													  "STATdeposit;"				  ]
[ "deposit",			  "pattern",	  "statistics",		  "(name:str):void ",																															  "STATdepositStr;"				  ]
[ "deposit",			  "pattern",	  "box",		  "(bname:str,name:str,v:any_1):void ",																													  "BOXdeposit;"					  ]
[ "deposit",			  "pattern",	  "bbp",		  "(name:str,loc:str):bat[:any_1,:any_2] ",																												  "CMDbbpbindDefinition;"			  ]
[ "deposit",			  "pattern",	  "bbp",		  "(name:str,v:bat[:any_1,:any_2]):void ",																												  "CMDbbpdeposit;"				  ]
[ "deposit",			  "pattern",	  "const",		  "(name:str,val:any_1):void ",																														  "CSTdeposit;"					  ]
[ "depositFile",		  "command",	  "tokenizer",		  "(fnme:str):void ",																															  "TKNZRdepositFile;"				  ]
[ "dequeue_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:dbl]):void ",																														  "PQdequeue_dblmax;"				  ]
[ "dequeue_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:flt]):void ",																														  "PQdequeue_fltmax;"				  ]
[ "dequeue_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:lng]):void ",																														  "PQdequeue_lngmax;"				  ]
[ "dequeue_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:ptr]):void ",																														  "PQdequeue_ptrmax;"				  ]
[ "dequeue_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:wrd]):void ",																														  "PQdequeue_wrdmax;"				  ]
[ "dequeue_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:oid]):void ",																														  "PQdequeue_oidmax;"				  ]
[ "dequeue_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:int]):void ",																														  "PQdequeue_intmax;"				  ]
[ "dequeue_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:sht]):void ",																														  "PQdequeue_shtmax;"				  ]
[ "dequeue_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:bte]):void ",																														  "PQdequeue_btemax;"				  ]
[ "dequeue_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:any_1]):void ",																														  "PQdequeue_anymax;"				  ]
[ "dequeue_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:dbl]):void ",																														  "PQdequeue_dblmin;"				  ]
[ "dequeue_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:flt]):void ",																														  "PQdequeue_fltmin;"				  ]
[ "dequeue_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:lng]):void ",																														  "PQdequeue_lngmin;"				  ]
[ "dequeue_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:ptr]):void ",																														  "PQdequeue_ptrmin;"				  ]
[ "dequeue_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:wrd]):void ",																														  "PQdequeue_wrdmin;"				  ]
[ "dequeue_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:oid]):void ",																														  "PQdequeue_oidmin;"				  ]
[ "dequeue_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:int]):void ",																														  "PQdequeue_intmin;"				  ]
[ "dequeue_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:sht]):void ",																														  "PQdequeue_shtmin;"				  ]
[ "dequeue_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:bte]):void ",																														  "PQdequeue_btemin;"				  ]
[ "dequeue_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:any_1]):void ",																														  "PQdequeue_anymin;"				  ]
[ "derive",			  "command",	  "group",		  "(histo:bat[:void,:wrd],map:bat[:void,:oid],a:bat[:oid,:any_2]) (hist:bat[:oid,:wrd],grp:bat[:oid,:oid]) ",																				  "GRPderive;"					  ]
[ "derive",			  "command",	  "group",		  "(hist:bat[:any_1,:wrd],map:bat[:any_1,:oid],a:bat[:any_1,:any_2]) (histo:bat[:any_1,:wrd],grp:bat[:any_1,:oid]) ",																			  "GRPderive;"					  ]
[ "deriveCount",		  "pattern",	  "group",		  "(l:bat[:oid,:any]...):bat[:oid,:wrd] ",																												  "ALGderiveCount;"				  ]
[ "derivePath",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTderivePath;"				  ]
[ "derivePath",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTderivePath;"				  ]
[ "derivePath",			  "pattern",	  "group",		  "(l:bat[:oid,:any]...) (grp:bat[:oid,:any],ext:bat[:oid,:any]) ",																									  "ALGderivePath;"				  ]
[ "deriveSum",			  "pattern",	  "group",		  "(s:bat[:oid,:dbl],l:bat[:oid,:any]...):bat[:oid,:dbl] ",																										  "ALGderiveSum;"				  ]
[ "deriveSum",			  "pattern",	  "group",		  "(s:bat[:oid,:flt],l:bat[:oid,:any]...):bat[:oid,:flt] ",																										  "ALGderiveSum;"				  ]
[ "deriveSum",			  "pattern",	  "group",		  "(s:bat[:oid,:lng],l:bat[:oid,:any]...):bat[:oid,:lng] ",																										  "ALGderiveSum;"				  ]
[ "deriveSum",			  "pattern",	  "group",		  "(s:bat[:oid,:int],l:bat[:oid,:any]...):bat[:oid,:int] ",																										  "ALGderiveSum;"				  ]
[ "destroy",			  "pattern",	  "statistics",		  "():void ",																																  "STATdestroy;"				  ]
[ "destroy",			  "command",	  "mapi",		  "(mid:int):void ",																															  "SERVERdestroy;"				  ]
[ "destroy",			  "pattern",	  "box",		  "(bname:str):void ",																															  "BOXdestroy;"					  ]
[ "destroy",			  "pattern",	  "bbp",		  "(b:bat[:any_1,:any_2],immediate:bit):void ",																												  "CMDbbpdestroyBAT;"				  ]
[ "destroy",			  "pattern",	  "bbp",		  "(b:bat[:any_1,:any_2]):void ",																													  "CMDbbpdestroyBAT1;"				  ]
[ "destroy",			  "command",	  "bbp",		  "():void ",																																  "CMDbbpdestroy;"				  ]
[ "destroy",			  "pattern",	  "const",		  "():void ",																																  "CSTdestroy;"					  ]
[ "destroy",			  "command",	  "bstream",		  "(s:bstream):void ",																															  "bstream_destroy_wrapwrap;"			  ]
[ "destroy",			  "command",	  "sema",		  "(s:sema):void ",																															  "SEMAdestroy;"				  ]
[ "destroy",			  "command",	  "lock",		  "(l:lock):void ",																															  "LCKdestroy;"					  ]
[ "dictionary",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTdictionary;"				  ]
[ "dictionary",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTdictionary;"				  ]
[ "diff",			  "command",	  "mtime",		  "(val1:timestamp,val2:timestamp):lng ",																												  "MTIMEtimestamp_diff;"			  ]
[ "diff",			  "command",	  "mtime",		  "(val1:date,val2:date):int ",																														  "MTIMEdate_diff;"				  ]
[ "difference",			  "command",	  "algebra",		  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																								  "ALGsdiff;"					  ]
[ "discard",			  "pattern",	  "statistics",		  "(name:bat[:any_1,:any_2]):void ",																													  "STATdiscard2;"				  ]
[ "discard",			  "pattern",	  "statistics",		  "(name:str):void ",																															  "STATdiscard;"				  ]
[ "discard",			  "pattern",	  "box",		  "(bname:str,name:str):void ",																														  "BOXdiscard;"					  ]
[ "discard",			  "pattern",	  "bbp",		  "(name:str):void ",																															  "CMDbbpdiscard;"				  ]
[ "discard",			  "pattern",	  "const",		  "(name:any_1):void ",																															  "CSTdiscard;"					  ]
[ "disconnect",			  "command",	  "mapi",		  "(mid:int):void ",																															  "SERVERdisconnect;"				  ]
[ "disconnect",			  "command",	  "mapi",		  "():int ",																																  "SERVERdisconnectALL;"			  ]
[ "disconnect",			  "command",	  "mapi",		  "(dbalias:str):int ",																															  "SERVERdisconnectWithAlias;"			  ]
[ "disconnect",			  "command",	  "remote",		  "(conn:str):void ",																															  "RMTdisconnect;"				  ]
[ "display",			  "pattern",	  "tablet",		  "(v:bat[:any_1,:any]...):int ",																													  "TABdisplayTable;"				  ]
[ "display",			  "pattern",	  "tablet",		  "(v:any...):int ",																															  "TABdisplayRow;"				  ]
[ "document",			  "command",	  "xml",		  "(src:bat[:oid,:str]):bat[:oid,:xml] ",																												  "BATXMLdocument;"				  ]
[ "document",			  "command",	  "xml",		  "(val:str):xml ",																															  "XMLdocument;"				  ]
[ "done",			  "command",	  "group",		  "(histo:bat[:void,:wrd],map:bat[:void,:oid],a:bat[:oid,:any_2]) (hist:bat[:oid,:wrd],grp:bat[:oid,:oid]) ",																				  "GRPderive;"					  ]
[ "done",			  "command",	  "group",		  "(hist:bat[:any_1,:wrd],map:bat[:any_1,:oid],a:bat[:any_1,:any_2]) (histo:bat[:any_1,:wrd],grp:bat[:any_1,:oid]) ",																			  "GRPderive;"					  ]
[ "done",			  "command",	  "group",		  "(attr:bat[:any_1,:any_2],N:int,rng:int) (histo:bat[:any_1,:wrd],grp:bat[:any_1,:oid]) ",																						  "GRPgroup_custom;"				  ]
[ "done",			  "command",	  "group",		  "(attr:bat[:any_1,:any_2]) (histo:bat[:any_1,:wrd],grp:bat[:any_1,:oid]) ",																								  "GRPgroup;"					  ]
[ "done",			  "command",	  "group",		  "(attr:bat[:any_1,:any_2]) (histo:bat[:any_1,:wrd],grp:bat[:any_1,:void]) ",																								  "GRPgroup;"					  ]
[ "dot",			  "pattern",	  "mdb",		  "(M:str,F:str,s:str):void ",																														  "MDBshowFlowGraph;"				  ]
[ "dot",			  "pattern",	  "mdb",		  "(s:str):void ",																															  "MDBshowFlowGraph;"				  ]
[ "down",			  "command",	  "sema",		  "(s:sema):void ",																															  "SEMAdown;"					  ]
[ "dropDeclaredTable",		  "pattern",	  "sql",		  "(name:str):void ",																															  "mvc_drop_declared_table_wrap;"		  ]
[ "dropDeclaredTables",		  "pattern",	  "sql",		  "(nr:int):void ",																															  "mvc_drop_declared_tables_wrap;"		  ]
[ "drop_hash",			  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",																														  "SQLdrop_hash;"				  ]
[ "dropdictionary",		  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",																														  "SQLdropDictionary;"				  ]
[ "dst",			  "command",	  "mtime",		  "(t:timestamp,v:timezone):bit ",																													  "MTIMEtimestamp_inside_dst;"			  ]
[ "dtColumn",			  "pattern",	  "sql",		  "(rs:int,tname:str,name:str,typename:str,digits:int,scale:int):void ",																								  "mvc_declared_table_column_wrap;"		  ]
[ "dump",			  "pattern",	  "statistics",		  "():void ",																																  "STATdump;"					  ]
[ "dump",			  "pattern",	  "recycle",		  "(tp:int,nm:str):void ",																														  "RECYCLEdumpWrap;"				  ]
[ "dump",			  "pattern",	  "recycle",		  "(tp:int):void ",																															  "RECYCLEdumpWrap;"				  ]
[ "dump",			  "pattern",	  "recycle",		  "():void ",																																  "RECYCLEdumpWrap;"				  ]
[ "dump",			  "pattern",	  "tablet",		  "(s:streams,b:bat[:any,:any]...):int ",																												  "TABdump;"					  ]
[ "dump",			  "command",	  "tablet",		  "(names:bat[:oid,:str],seps:bat[:oid,:str],bats:bat[:oid,:BAT],datafile:str,nr:int):void ",																						  "CMDtablet_dump;"				  ]
[ "dump",			  "pattern",	  "mdb",		  "():void ",																																  "MDBdump;"					  ]
[ "dumpQEP",			  "pattern",	  "optimizer",		  "():void ",																																  "OPTdumpQEP;"					  ]
[ "dumpTrace",			  "command",	  "profiler",		  "():void ",																																  "CMDdumpTrace;"				  ]
[ "dump_cache",			  "pattern",	  "sql",		  "() (query:bat[:oid,:str],count:bat[:oid,:int]) ",																											  "dump_cache;"					  ]
[ "dump_opt_stats",		  "pattern",	  "sql",		  "() (rewrite:bat[:oid,:str],count:bat[:oid,:int]) ",																											  "dump_opt_stats;"				  ]
[ "dump_trace",			  "pattern",	  "sql",		  "() (event:bat[:oid,:int],clk:bat[:oid,:str],pc:bat[:oid,:str],thread:bat[:oid,:int],user:bat[:oid,:int],ticks:bat[:oid,:lng],reads:bat[:oid,:lng],writes:bat[:oid,:lng],rbytes:bat[:oid,:lng],wbytes:bat[:oid,:lng],type:bat[:oid,:str],stmt:bat[:oid,:str]) ",	  "dump_trace;"					  ]
[ "editdistance",		  "command",	  "txtsim",		  "(s:str,t:str):int ",																															  "levenshteinbasic_impl;"			  ]
[ "editdistance2",		  "command",	  "txtsim",		  "(s:str,t:str):int ",																															  "levenshteinbasic2_impl;"			  ]
[ "element",			  "command",	  "xml",		  "(name:str,ns:xml,attr:xml,s:bat[:oid,:xml]):bat[:oid,:xml] ",																									  "BATXMLelement;"				  ]
[ "element",			  "command",	  "xml",		  "(name:str,s:bat[:oid,:xml]):bat[:oid,:xml] ",																											  "BATXMLelementSmall;"				  ]
[ "element",			  "command",	  "xml",		  "(name:str,s:xml):xml ",																														  "XMLelementSmall;"				  ]
[ "element",			  "command",	  "xml",		  "(name:str,ns:xml,attr:xml,s:xml):xml ",																												  "XMLelement;"					  ]
[ "emptySet",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTemptySet;"				  ]
[ "emptySet",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTemptySet;"				  ]
[ "emptySet",			  "command",	  "constraints",	  "(b:bat[:oid,:any_2]):void ",																														  "CemptySet;"					  ]
[ "encode",			  "command",	  "zorder",		  "(x:bat[:oid,:int],y:bat[:oid,:int]):bat[:oid,:oid] ",																										  "ZORDbatencode_int_oid;"			  ]
[ "encode",			  "command",	  "zorder",		  "(x:int,y:int):oid ",																															  "ZORDencode_int_oid;"				  ]
[ "encode",			  "command",	  "dictionary",		  "(val:bat[:any_1,:any_2],b:bat[:oid,:any_2]):bat[:oid,:any_1] ",																									  "DICTencode;"					  ]
[ "end_dst",			  "command",	  "mtime",		  "(t:timezone):zrule ",																														  "MTIMEtzone_extract_end;"			  ]
[ "endsWith",			  "command",	  "batstr",		  "(s:bat[:oid,:str],suffix:str):bat[:oid,:bit] ",																											  "STRbatSuffixcst;"				  ]
[ "endsWith",			  "command",	  "batstr",		  "(s:bat[:oid,:str],suffix:bat[:oid,:str]):bat[:oid,:bit] ",																										  "STRbatSuffix;"				  ]
[ "endsWith",			  "command",	  "str",		  "(s:str,suffix:str):bit ",																														  "STRSuffix;"					  ]
[ "enqueue_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:dbl],id:oid,value:dbl):void ",																												  "PQenqueue_dblmax;"				  ]
[ "enqueue_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:flt],id:oid,value:flt):void ",																												  "PQenqueue_fltmax;"				  ]
[ "enqueue_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:lng],id:oid,value:lng):void ",																												  "PQenqueue_lngmax;"				  ]
[ "enqueue_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:ptr],id:oid,value:ptr):void ",																												  "PQenqueue_ptrmax;"				  ]
[ "enqueue_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:wrd],id:oid,value:wrd):void ",																												  "PQenqueue_wrdmax;"				  ]
[ "enqueue_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:oid],id:oid,value:oid):void ",																												  "PQenqueue_oidmax;"				  ]
[ "enqueue_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:int],id:oid,value:int):void ",																												  "PQenqueue_intmax;"				  ]
[ "enqueue_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:sht],id:oid,value:sht):void ",																												  "PQenqueue_shtmax;"				  ]
[ "enqueue_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:bte],id:oid,value:bte):void ",																												  "PQenqueue_btemax;"				  ]
[ "enqueue_max",		  "pattern",	  "pqueue",		  "(h:bat[:oid,:any_1],id:oid,value:any_1):void ",																											  "PQenqueue_anymax;"				  ]
[ "enqueue_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:dbl],id:oid,value:dbl):void ",																												  "PQenqueue_dblmin;"				  ]
[ "enqueue_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:flt],id:oid,value:flt):void ",																												  "PQenqueue_fltmin;"				  ]
[ "enqueue_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:lng],id:oid,value:lng):void ",																												  "PQenqueue_lngmin;"				  ]
[ "enqueue_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:ptr],id:oid,value:ptr):void ",																												  "PQenqueue_ptrmin;"				  ]
[ "enqueue_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:wrd],id:oid,value:wrd):void ",																												  "PQenqueue_wrdmin;"				  ]
[ "enqueue_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:oid],id:oid,value:oid):void ",																												  "PQenqueue_oidmin;"				  ]
[ "enqueue_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:int],id:oid,value:int):void ",																												  "PQenqueue_intmin;"				  ]
[ "enqueue_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:sht],id:oid,value:sht):void ",																												  "PQenqueue_shtmin;"				  ]
[ "enqueue_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:bte],id:oid,value:bte):void ",																												  "PQenqueue_btemin;"				  ]
[ "enqueue_min",		  "pattern",	  "pqueue",		  "(h:bat[:oid,:any_1],id:oid,value:any_1):void ",																											  "PQenqueue_anymin;"				  ]
[ "epilogue",			  "command",	  "geom",		  "():void ",																																  "geom_epilogue;"				  ]
[ "epilogue",			  "command",	  "sql",		  "():void ",																																  "SQLepilogue;"				  ]
[ "epilogue",			  "command",	  "statistics",		  "():void ",																																  "STATepilogue;"				  ]
[ "epilogue",			  "command",	  "remote",		  "():void ",																																  "RMTepilogue;"				  ]
[ "epilogue",			  "pattern",	  "recycle",		  "():void ",																																  "RECYCLEepilogue;"				  ]
[ "epilogue",			  "command",	  "sabaoth",		  "():void ",																																  "SABepilogue;"				  ]
[ "epilogue",			  "command",	  "mtime",		  "():void ",																																  "MTIMEepilogue;"				  ]
[ "epilogue",			  "command",	  "alarm",		  "():void ",																																  "ALARMepilogue;"				  ]
[ "epiloque",			  "command",	  "const",		  "():void ",																																  "CSTepilogue;"				  ]
[ "epoch",			  "command",	  "timestamp",		  "(t:int):timestamp ",																															  "MTIMEtimestamp;"				  ]
[ "epoch",			  "command",	  "timestamp",		  "(t:timestamp):int ",																															  "MTIMEepoch2int;"				  ]
[ "epoch",			  "command",	  "timestamp",		  "():timestamp ",																															  "MTIMEepoch;"					  ]
[ "epoch",			  "command",	  "alarm",		  "():int ",																																  "ALARMepoch;"					  ]
[ "equalType",			  "pattern",	  "inspect",		  "(l:any,r:any):bit ",																															  "INSPECTequalType;"				  ]
[ "error",			  "command",	  "mapi",		  "(mid:int):int ",																															  "SERVERerror;"				  ]
[ "eval",			  "pattern",	  "sql",		  "(cmd:str,output:bit):void ",																														  "SQLstatement;"				  ]
[ "eval",			  "pattern",	  "sql",		  "(cmd:str):void ",																															  "SQLstatement;"				  ]
[ "evalAlgebra",		  "pattern",	  "sql",		  "(cmd:str,optimize:bit):void ",																													  "RAstatement;"				  ]
[ "evaluate",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTevaluate;"				  ]
[ "evaluate",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTevaluate;"				  ]
[ "exec",			  "pattern",	  "srvpool",		  "(fname:str,arg:any...):any... ",																													  "SRVPOOLexec;"				  ]
[ "exec",			  "pattern",	  "remote",		  "(conn:str,mod:str,func:str,X_4:str...):str... ",																											  "RMTexec;"					  ]
[ "exec",			  "pattern",	  "remote",		  "(conn:str,mod:str,func:str,X_4:str...):str ",																											  "RMTexec;"					  ]
[ "exec",			  "pattern",	  "remote",		  "(conn:str,mod:str,func:str):str... ",																												  "RMTexec;"					  ]
[ "exec",			  "pattern",	  "remote",		  "(conn:str,mod:str,func:str):str ",																													  "RMTexec;"					  ]
[ "exist",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):bit ",																											  "ALGexistBUN;"				  ]
[ "exist",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],h:any_1):bit ",																												  "ALGexist;"					  ]
[ "exist",			  "command",	  "aggr",		  "(b:bat[:any_1,:any_2],h:any_1):bit ",																												  "ALGexist;"					  ]
[ "exp",			  "command",	  "batmmath",		  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",																													  "CMDscience_bat_flt_exp;"			  ]
[ "exp",			  "command",	  "batmmath",		  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",																													  "CMDscience_bat_dbl_exp;"			  ]
[ "exp",			  "command",	  "mmath",		  "(x:dbl):dbl ",																															  "MATHunary_EXPdbl;"				  ]
[ "exp",			  "command",	  "mmath",		  "(x:flt):flt ",																															  "MATHunary_EXPflt;"				  ]
[ "expand",			  "command",	  "dictionary",		  "(val:bat[:any_1,:any_2],b:bat[:oid,:any_2]):bat[:any_1,:any_2] ",																									  "DICTexpand;"					  ]
[ "expand",			  "command",	  "bbp",		  "(b:bat[:any_1,:any_2],fnme:str):bat[:any_1,:any_2] ",																										  "CMDbbpexpand;"				  ]
[ "explain",			  "command",	  "mapi",		  "(mid:int):str ",																															  "SERVERexplain;"				  ]
[ "export",			  "command",	  "io",			  "(b:bat[:any_1,:any_2],filepath:str):bit ",																												  "IOexport;"					  ]
[ "exportChunk",		  "pattern",	  "sql",		  "(s:streams,res_id:int,offset:int,nr:int):void ",																											  "mvc_export_chunk_wrap;"			  ]
[ "exportChunk",		  "pattern",	  "sql",		  "(s:streams,res_id:int):void ",																													  "mvc_export_chunk_wrap;"			  ]
[ "exportHead",			  "pattern",	  "sql",		  "(s:streams,res_id:int):void ",																													  "mvc_export_head_wrap;"			  ]
[ "exportOperation",		  "pattern",	  "sql",		  "(w:str):void ",																															  "mvc_export_operation_wrap;"			  ]
[ "exportResult",		  "pattern",	  "sql",		  "(s:streams,res_id:int):void ",																													  "mvc_export_result_wrap;"			  ]
[ "exportValue",		  "pattern",	  "sql",		  "(qtype:int,tname:str,name:str,typename:str,digits:int,scale:int,eclass:int,val:any_1,w:str):void ",																					  "mvc_export_value_wrap;"			  ]
[ "fabs",			  "command",	  "batmmath",		  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",																													  "CMDscience_bat_flt_fabs;"			  ]
[ "fabs",			  "command",	  "batmmath",		  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",																													  "CMDscience_bat_dbl_fabs;"			  ]
[ "fabs",			  "command",	  "mmath",		  "(y:dbl):dbl ",																															  "MATHunary_FABSdbl;"				  ]
[ "factorize",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTfactorize;"				  ]
[ "factorize",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTfactorize;"				  ]
[ "fetch",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],s:bat[:oid,:any_3]):bat[:any_1,:any_2] ",																									  "ALGfetchbat;"				  ]
[ "fetch",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],s:bat[:lng,:any_3]):bat[:any_1,:any_2] ",																									  "ALGfetchbat;"				  ]
[ "fetch",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],s:bat[:int,:any_3]):bat[:any_1,:any_2] ",																									  "ALGfetchbat;"				  ]
[ "fetch",			  "command",	  "algebra",		  "(b:bat[:any_2,:any_1],x:int):any_1 ",																												  "ALGfetchint;"				  ]
[ "fetch",			  "command",	  "algebra",		  "(b:bat[:any_2,:any_1],x:lng):any_1 ",																												  "ALGfetch;"					  ]
[ "fetch",			  "command",	  "algebra",		  "(b:bat[:any_2,:any_1],x:oid):any_1 ",																												  "ALGfetchoid;"				  ]
[ "fetch_all_rows",		  "command",	  "mapi",		  "(hdl:int):lng ",																															  "SERVERfetch_all_rows;"			  ]
[ "fetch_field",		  "command",	  "mapi",		  "(hdl:int,fnr:int):bte ",																														  "SERVERfetch_field_bte;"			  ]
[ "fetch_field",		  "command",	  "mapi",		  "(hdl:int,fnr:int):oid ",																														  "SERVERfetch_field_oid;"			  ]
[ "fetch_field",		  "command",	  "mapi",		  "(hdl:int,fnr:int):void ",																														  "SERVERfetch_field_void;"			  ]
[ "fetch_field",		  "command",	  "mapi",		  "(hdl:int,fnr:int):sht ",																														  "SERVERfetch_field_sht;"			  ]
[ "fetch_field",		  "command",	  "mapi",		  "(hdl:int,fnr:int):lng ",																														  "SERVERfetch_field_lng;"			  ]
[ "fetch_field",		  "command",	  "mapi",		  "(hdl:int,fnr:int):int ",																														  "SERVERfetch_field_int;"			  ]
[ "fetch_field",		  "command",	  "mapi",		  "(hdl:int,fnr:int):str ",																														  "SERVERfetch_field_str;"			  ]
[ "fetch_field_array",		  "command",	  "mapi",		  "(hdl:int):bat[:int,:str] ",																														  "SERVERfetch_field_bat;"			  ]
[ "fetch_line",			  "command",	  "mapi",		  "(hdl:int):str ",																															  "SERVERfetch_line;"				  ]
[ "fetch_reset",		  "command",	  "mapi",		  "(hdl:int):int ",																															  "SERVERfetch_reset;"				  ]
[ "fetch_row",			  "command",	  "mapi",		  "(hdl:int):int ",																															  "SERVERfetch_row;"				  ]
[ "fetchjoin",			  "command",	  "algebra",		  "(left:bat[:any_1,:oid],right:bat[:oid,:any_3]):bat[:any_1,:any_3] ",																									  "ALGfetchjoin;"				  ]
[ "find",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],h:any_1):any_2 ",																												  "ALGfind;"					  ]
[ "finish",			  "command",	  "mapi",		  "(hdl:int):int ",																															  "SERVERfinish;"				  ]
[ "finish",			  "pattern",	  "tablet",		  "():void ",																																  "TABfinishReport;"				  ]
[ "finite",			  "command",	  "mmath",		  "(d:dbl):bit ",																															  "MATHunary_FINITE;"				  ]
[ "firstPage",			  "command",	  "tablet",		  "():void ",																																  "TABfirstPage;"				  ]
[ "floor",			  "command",	  "batmmath",		  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",																													  "CMDscience_bat_flt_floor;"			  ]
[ "floor",			  "command",	  "batmmath",		  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",																													  "CMDscience_bat_dbl_floor;"			  ]
[ "floor",			  "command",	  "mmath",		  "(y:dbl):dbl ",																															  "MATHunary_FLOORdbl;"				  ]
[ "floor",			  "command",	  "mmath",		  "(y:flt):flt ",																															  "MATHunary_FLOORflt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng],d2:int,s2:int):bat[:oid,:flt] ",																										  "batlng_dec2dec_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng]):bat[:oid,:flt] ",																												  "batlng_dec2_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(v:bat[:oid,:lng],digits:int,scale:int):bat[:oid,:flt] ",																										  "batlng_num2dec_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(v:bat[:oid,:lng]):bat[:oid,:flt] ",																													  "batlng_2_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd],d2:int,s2:int):bat[:oid,:flt] ",																										  "batwrd_dec2dec_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd]):bat[:oid,:flt] ",																												  "batwrd_dec2_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(v:bat[:oid,:wrd],digits:int,scale:int):bat[:oid,:flt] ",																										  "batwrd_num2dec_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(v:bat[:oid,:wrd]):bat[:oid,:flt] ",																													  "batwrd_2_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int],d2:int,s2:int):bat[:oid,:flt] ",																										  "batint_dec2dec_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int]):bat[:oid,:flt] ",																												  "batint_dec2_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(v:bat[:oid,:int],digits:int,scale:int):bat[:oid,:flt] ",																										  "batint_num2dec_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(v:bat[:oid,:int]):bat[:oid,:flt] ",																													  "batint_2_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht],d2:int,s2:int):bat[:oid,:flt] ",																										  "batsht_dec2dec_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht]):bat[:oid,:flt] ",																												  "batsht_dec2_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(v:bat[:oid,:sht],digits:int,scale:int):bat[:oid,:flt] ",																										  "batsht_num2dec_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(v:bat[:oid,:sht]):bat[:oid,:flt] ",																													  "batsht_2_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte],d2:int,s2:int):bat[:oid,:flt] ",																										  "batbte_dec2dec_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte]):bat[:oid,:flt] ",																												  "batbte_dec2_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(v:bat[:oid,:bte],digits:int,scale:int):bat[:oid,:flt] ",																										  "batbte_num2dec_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(v:bat[:oid,:bte]):bat[:oid,:flt] ",																													  "batbte_2_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(v:bat[:oid,:str]):bat[:oid,:flt] ",																													  "batstr_2_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl]):bat[:any_1,:flt] ",																												  "CMDconvert_dbl_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(b:bat[:any_1,:oid]):bat[:any_1,:flt] ",																												  "CMDconvert_oid_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(b:bat[:any_1,:lng]):bat[:any_1,:flt] ",																												  "CMDconvert_lng_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd]):bat[:any_1,:flt] ",																												  "CMDconvert_wrd_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(b:bat[:any_1,:int]):bat[:any_1,:flt] ",																												  "CMDconvert_int_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(b:bat[:any_1,:sht]):bat[:any_1,:flt] ",																												  "CMDconvert_sht_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(b:bat[:any_1,:bte]):bat[:any_1,:flt] ",																												  "CMDconvert_bte_flt;"				  ]
[ "flt",			  "command",	  "batcalc",		  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] ",																												  "CMDconvert_flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(s1:int,v:lng,d2:int,s2:int):flt ",																													  "lng_dec2dec_flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(s1:int,v:lng):flt ",																														  "lng_dec2_flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(v:lng,digits:int,scale:int):flt ",																													  "lng_num2dec_flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(v:lng):flt ",																															  "lng_2_flt;"					  ]
[ "flt",			  "command",	  "calc",		  "(s1:int,v:wrd,d2:int,s2:int):flt ",																													  "wrd_dec2dec_flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(s1:int,v:wrd):flt ",																														  "wrd_dec2_flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(v:wrd,digits:int,scale:int):flt ",																													  "wrd_num2dec_flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(v:wrd):flt ",																															  "wrd_2_flt;"					  ]
[ "flt",			  "command",	  "calc",		  "(s1:int,v:int,d2:int,s2:int):flt ",																													  "int_dec2dec_flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(s1:int,v:int):flt ",																														  "int_dec2_flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(v:int,digits:int,scale:int):flt ",																													  "int_num2dec_flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(v:int):flt ",																															  "int_2_flt;"					  ]
[ "flt",			  "command",	  "calc",		  "(s1:int,v:sht,d2:int,s2:int):flt ",																													  "sht_dec2dec_flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(s1:int,v:sht):flt ",																														  "sht_dec2_flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(v:sht,digits:int,scale:int):flt ",																													  "sht_num2dec_flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(v:sht):flt ",																															  "sht_2_flt;"					  ]
[ "flt",			  "command",	  "calc",		  "(s1:int,v:bte,d2:int,s2:int):flt ",																													  "bte_dec2dec_flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(s1:int,v:bte):flt ",																														  "bte_dec2_flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(v:bte,digits:int,scale:int):flt ",																													  "bte_num2dec_flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(v:bte):flt ",																															  "bte_2_flt;"					  ]
[ "flt",			  "command",	  "calc",		  "(v:str):flt ",																															  "str_2_flt;"					  ]
[ "flt",			  "command",	  "calc",		  "(v:void):flt ",																															  "CALCnil2flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(v:str):flt ",																															  "CALCstr2flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(x:lng):flt ",																															  "CALClng2flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(x:int):flt ",																															  "CALCint2flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(x:sht):flt ",																															  "CALCsht2flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(x:bte):flt ",																															  "CALCbte2flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(x:dbl):flt ",																															  "CALCdbl2flt;"				  ]
[ "flt",			  "command",	  "calc",		  "(x:flt):flt ",																															  "CALCflt2flt;"				  ]
[ "flush",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):void ",													  "CMDBATflush;"					  ]
[ "flush",			  "command",	  "streams",		  "(s:streams):void ",																															  "mnstr_flush_streamwrap;"			  ]
[ "fmod",			  "command",	  "batmmath",		  "(x:bat[:oid,:flt],y:flt):bat[:oid,:flt] ",																												  "CMDscience_bat_cst_fmod_flt;"		  ]
[ "fmod",			  "command",	  "batmmath",		  "(x:bat[:oid,:dbl],y:dbl):bat[:oid,:dbl] ",																												  "CMDscience_bat_cst_fmod_dbl;"		  ]
[ "fmod",			  "command",	  "mmath",		  "(y:dbl,x:dbl):dbl ",																															  "MATHbinary_FMODdbl;"				  ]
[ "fmod",			  "command",	  "mmath",		  "(y:flt,x:flt):flt ",																															  "MATHbinary_FMODflt;"				  ]
[ "forceUpdate",		  "command",	  "statistics",		  "(bnme:str):void ",																															  "STATforceUpdate;"				  ]
[ "forceUpdate",		  "command",	  "statistics",		  "():void ",																																  "STATforceUpdateAll;"				  ]
[ "forest",			  "pattern",	  "xml",		  "(val:bat[:oid,:xml]...):bat[:oid,:xml] ",																												  "BATXMLforest;"				  ]
[ "forest",			  "pattern",	  "xml",		  "(val:xml...):xml ",																															  "XMLforest;"					  ]
[ "forgetPrevious",		  "pattern",	  "sql",		  "():void ",																																  "OPTforgetPrevious;"				  ]
[ "fragment",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],hlow:any_1,hhigh:any_1,tlow:any_2,thigh:any_2):bat[:any_1,:any_2] ",																						  "ALGfragment;"				  ]
[ "ftable",			  "pattern",	  "io",			  "(fp:streams,order:int,b1:bat[:any_1,:any],b:bat[:any_1,:any]...):void ",																								  "IOfotable;"					  ]
[ "ftable",			  "pattern",	  "io",			  "(filep:streams,b1:bat[:any_1,:any],b:bat[:any_1,:any]...):void ",																									  "IOftable;"					  ]
[ "fuse",			  "command",	  "udf",		  "(one:int,two:int):lng ",																														  "UDFfuse_int_lng;"				  ]
[ "fuse",			  "command",	  "udf",		  "(one:sht,two:sht):int ",																														  "UDFfuse_sht_int;"				  ]
[ "fuse",			  "command",	  "udf",		  "(one:bte,two:bte):sht ",																														  "UDFfuse_bte_sht;"				  ]
[ "fuse",			  "command",	  "batudf",		  "(one:bat[:oid,:int],two:bat[:oid,:int]):bat[:oid,:lng] ",																										  "UDFBATfuse;"					  ]
[ "fuse",			  "command",	  "batudf",		  "(one:bat[:oid,:sht],two:bat[:oid,:sht]):bat[:oid,:int] ",																										  "UDFBATfuse;"					  ]
[ "fuse",			  "command",	  "batudf",		  "(one:bat[:oid,:bte],two:bat[:oid,:bte]):bat[:oid,:sht] ",																										  "UDFBATfuse;"					  ]
[ "garbageCollector",		  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTgarbageCollector;"			  ]
[ "garbageCollector",		  "pattern",	  "optimizer",		  "():str ",																																  "OPTgarbageCollector;"			  ]
[ "geomcollection",		  "function",	  "calc",		  "(wkt:str):wkb;",																															  "nil"						  ]
[ "geometry",			  "function",	  "calc",		  "(wkt:str):wkb;",																															  "nil"						  ]
[ "get",			  "pattern",	  "remote",		  "(conn:str,ident:str):any ",																														  "RMTget;"					  ]
[ "get",			  "command",	  "bbp",		  "() (ns:bat[:any_1,:any_2],ht:bat[:int,:str],tt:bat[:int,:str],cnt:bat[:int,:lng],refcnt:bat[:int,:int],lrefcnt:bat[:int,:int],location:bat[:int,:str],heat:bat[:int,:int],dirty:bat[:int,:str],status:bat[:int,:str],kind:bat[:int,:str]) ",				  "CMDbbp;"					  ]
[ "getAccess",			  "command",	  "bat",		  "(b:bat[:any_1,:any_2]):str ",																													  "BKCgetAccess;"				  ]
[ "getActions",			  "command",	  "clients",		  "():bat[:int,:int] ",																															  "CLTActions;"					  ]
[ "getAddress",			  "pattern",	  "inspect",		  "(mod:str,fcn:str):bat[:str,:str] ",																													  "INSPECTgetAddress;"				  ]
[ "getAddresses",		  "pattern",	  "inspect",		  "():bat[:oid,:str] ",																															  "INSPECTgetAllAddresses;"			  ]
[ "getAdmPolicy",		  "command",	  "recycle",		  "():int ",																																  "RECYCLEgetAdmission;"			  ]
[ "getAlpha",			  "command",	  "bat",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "BKCgetAlpha;"				  ]
[ "getAnchor",			  "command",	  "url",		  "(u:url):str ",																															  "URLgetAnchor;"				  ]
[ "getArrival",			  "command",	  "factories",		  "():bat[:oid,:timestamp] ",																														  "FCTgetArrival;"				  ]
[ "getAtomNames",		  "command",	  "inspect",		  "():bat[:int,:str] ",																															  "INSPECTatom_names;"				  ]
[ "getAtomSizes",		  "command",	  "inspect",		  "():bat[:int,:int] ",																															  "INSPECTatom_sizes;"				  ]
[ "getAtomSuper",		  "command",	  "inspect",		  "():bat[:int,:str] ",																															  "INSPECTatom_sup_names;"			  ]
[ "getBAT",			  "command",	  "calc",		  "(b:BAT):bat[:any_1,:any_2] ",																													  "CALCbatid2bat;"				  ]
[ "getBATidentifier",		  "command",	  "calc",		  "(b:bat[:any_1,:any_2]):BAT ",																													  "CALCbat2batid;"				  ]
[ "getBasename",		  "command",	  "url",		  "(u:url):str ",																															  "URLgetBasename;"				  ]
[ "getBid",			  "function",	  "octopus",		  "(dbname:str,fn:str,bidtype:sht):lng;",																												  "nil"						  ]
[ "getBoxNames",		  "command",	  "box",		  "():bat[:int,:str] ",																															  "BOXgetBoxNames;"				  ]
[ "getCachePolicy",		  "command",	  "recycle",		  "():int ",																																  "RECYCLEgetCache;"				  ]
[ "getCaller",			  "command",	  "factories",		  "():int ",																																  "FCTgetCaller;"				  ]
[ "getCapacity",		  "command",	  "bat",		  "(b:bat[:any_1,:any_2]):lng ",																													  "BKCgetCapacity;"				  ]
[ "getCardinality",		  "command",	  "tokenizer",		  "():bat[:void,:wrd] ",																														  "TKNZRgetCardinality;"			  ]
[ "getCloud",			  "command",	  "mapreduce",		  "(nme:str):bat[:oid,:str] ",																														  "MRgetCloud;"					  ]
[ "getComment",			  "pattern",	  "inspect",		  "(mod:str,fcn:str):bat[:str,:str] ",																													  "INSPECTgetComment;"				  ]
[ "getContent",			  "command",	  "url",		  "(u:url):str ",																															  "URLgetContent;"				  ]
[ "getContext",			  "command",	  "url",		  "(u:url):str ",																															  "URLgetContext;"				  ]
[ "getContext",			  "command",	  "mdb",		  "(s:str):str ",																															  "MDBgetExceptionContext;"			  ]
[ "getCount",			  "command",	  "tokenizer",		  "():bat[:void,:wrd] ",																														  "TKNZRgetCount;"				  ]
[ "getCount",			  "pattern",	  "statistics",		  "(nme:str):lng ",																															  "STATgetCount;"				  ]
[ "getCount",			  "command",	  "bbp",		  "():bat[:int,:lng] ",																															  "CMDbbpCount;"				  ]
[ "getDebug",			  "command",	  "mdb",		  "():int ",																																  "MDBgetDebug;"				  ]
[ "getDefinition",		  "pattern",	  "inspect",		  "(mod:str,fcn:str):bat[:str,:str] ",																													  "INSPECTgetDefinition;"			  ]
[ "getDefinition",		  "pattern",	  "mdb",		  "():bat[:void,:str] ",																														  "MDBgetDefinition;"				  ]
[ "getDelta",			  "command",	  "bat",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "BKCgetDelta;"				  ]
[ "getDeparture",		  "command",	  "factories",		  "():bat[:oid,:timestamp] ",																														  "FCTgetDeparture;"				  ]
[ "getDirectory",		  "command",	  "url",		  "(u:url):bat[:int,:str] ",																														  "URLgetDirectory;"				  ]
[ "getDirty",			  "command",	  "bbp",		  "():bat[:int,:str] ",																															  "CMDbbpDirty;"				  ]
[ "getDiskReads",		  "command",	  "profiler",		  "():lng ",																																  "CMDgetDiskReads;"				  ]
[ "getDiskSize",		  "command",	  "bat",		  "(b:bat[:any_1,:any_2]):lng ",																													  "BKCbatdisksize;"				  ]
[ "getDiskSpace",		  "command",	  "bbp",		  "():lng ",																																  "CMDbbpDiskSpace;"				  ]
[ "getDiskWrites",		  "command",	  "profiler",		  "():lng ",																																  "CMDgetDiskWrites;"				  ]
[ "getDomain",			  "command",	  "url",		  "(u:url):str ",																															  "URLgetDomain;"				  ]
[ "getEnvironment",		  "command",	  "inspect",		  "():bat[:str,:str] ",																															  "INSPECTgetEnvironment;"			  ]
[ "getError",			  "command",	  "mapi",		  "(mid:int):str ",																															  "SERVERgetError;"				  ]
[ "getEvent",			  "pattern",	  "profiler",		  "() (X_1:lng,X_2:lng,X_3:lng) ",																													  "CMDgetEvent;"				  ]
[ "getException",		  "command",	  "mdb",		  "(s:str):str ",																															  "MDBgetExceptionVariable;"			  ]
[ "getExtension",		  "command",	  "url",		  "(u:url):str ",																															  "URLgetExtension;"				  ]
[ "getFile",			  "command",	  "url",		  "(u:url):str ",																															  "URLgetFile;"					  ]
[ "getFootprint",		  "pattern",	  "profiler",		  "():lng ",																																  "CMDgetFootprint;"				  ]
[ "getFunction",		  "pattern",	  "inspect",		  "():bat[:oid,:str] ",																															  "INSPECTgetAllFunctions;"			  ]
[ "getHead",			  "pattern",	  "bat",	  "(b:bat[:any_1,:any],i:lng):any_1 ",													  "CHPgetHead;"						  ]
[ "getHeadType",		  "command",	  "bbp",		  "():bat[:int,:str] ",																															  "CMDbbpHeadType;"				  ]
[ "getHeadType",		  "command",	  "bat",		  "(b:bat[:any_1,:any_2]):str ",																													  "BKCgetHeadType;"				  ]
[ "getHeat",			  "command",	  "bbp",		  "():bat[:int,:int] ",																															  "CMDbbpHeat;"					  ]
[ "getHeat",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):lng ",													  "BKCheat;"						  ]
[ "getHistogram",		  "pattern",	  "statistics",		  "(nme:str):bat[:any_1,:any_2] ",																													  "STATgetHistogram;"				  ]
[ "getHost",			  "command",	  "url",		  "(u:url):str ",																															  "URLgetHost;"					  ]
[ "getHotset",			  "pattern",	  "statistics",		  "():bat[:int,:str] ",																															  "STATgetHotset;"				  ]
[ "getId",			  "pattern",	  "clients",		  "():int ",																																  "CLTgetClientId;"				  ]
[ "getIndex",			  "command",	  "tokenizer",		  "():bat[:void,:oid] ",																														  "TKNZRgetIndex;"				  ]
[ "getIndex",			  "command",	  "bbp",		  "(b:bat[:any_1,:any_2]):int ",																													  "CMDbbpgetIndex;"				  ]
[ "getInfo",			  "pattern",	  "clients",		  "():bat[:str,:str] ",																															  "CLTInfo;"					  ]
[ "getKind",			  "pattern",	  "inspect",		  "():bat[:oid,:str] ",																															  "INSPECTgetkind;"				  ]
[ "getKind",			  "command",	  "bbp",		  "():bat[:int,:str] ",																															  "CMDbbpKind;"					  ]
[ "getLRefCount",		  "command",	  "bbp",		  "(b:bat[:any_1,:any_2]):int ",																													  "CMDgetBATlrefcnt;"				  ]
[ "getLRefCount",		  "command",	  "bbp",		  "():bat[:int,:int] ",																															  "CMDbbpLRefCount;"				  ]
[ "getLastCommand",		  "command",	  "clients",		  "():bat[:int,:str] ",																															  "CLTLastCommand;"				  ]
[ "getLevel",			  "command",	  "tokenizer",		  "(i:int):bat[:oid,:str] ",																														  "TKNZRgetLevel;"				  ]
[ "getLocalConnectionHost",	  "command",	  "sabaoth",		  "():str ",																																  "SABgetLocalConnectionHost;"			  ]
[ "getLocalConnectionPort",	  "command",	  "sabaoth",		  "():int ",																																  "SABgetLocalConnectionPort;"			  ]
[ "getLocalConnectionURI",	  "command",	  "sabaoth",		  "():str ",																																  "SABgetLocalConnectionURI;"			  ]
[ "getLocation",		  "command",	  "bbp",		  "():bat[:int,:str] ",																															  "CMDbbpLocation;"				  ]
[ "getLogins",			  "command",	  "clients",		  "():bat[:int,:str] ",																															  "CLTLogin;"					  ]
[ "getMax",			  "pattern",	  "statistics",		  "(nme:str):lng ",																															  "STATgetMax;"					  ]
[ "getMemory",			  "pattern",	  "profiler",		  "():lng ",																																  "CMDgetMemory;"				  ]
[ "getMemorySize",		  "command",	  "bat",		  "(b:bat[:any_1,:any_2]):lng ",																													  "BKCbatvmsize;"				  ]
[ "getMin",			  "pattern",	  "statistics",		  "(nme:str):lng ",																															  "STATgetMin;"					  ]
[ "getModule",			  "pattern",	  "inspect",		  "():bat[:oid,:str] ",																															  "INSPECTgetAllModules;"			  ]
[ "getName",			  "command",	  "bbp",		  "(b:bat[:any_1,:any_2]):str ",																													  "CMDbbpName;"					  ]
[ "getName",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):str ",													  "BKCgetBBPname;"					  ]
[ "getNames",			  "command",	  "bbp",		  "():bat[:int,:str] ",																															  "CMDbbpNames;"				  ]
[ "getObjects",			  "command",	  "statistics",		  "():bat[:int,:str] ",																															  "STATgetObjects;"				  ]
[ "getObjects",			  "pattern",	  "bbp",		  "():bat[:int,:str] ",																															  "CMDbbpGetObjects;"				  ]
[ "getOwners",			  "command",	  "factories",		  "():bat[:oid,:str] ",																															  "FCTgetOwners;"				  ]
[ "getPage",			  "command",	  "tablet",		  "(i:int):void ",																															  "TABgetPage;"					  ]
[ "getPageCnt",			  "command",	  "tablet",		  "():void ",																																  "TABgetPageCnt;"				  ]
[ "getPageSize",		  "command",	  "bbp",		  "():int ",																																  "CMDgetPageSize;"				  ]
[ "getPasswordHash",		  "pattern",	  "clients",		  "(user:str):str ",																															  "CLTgetPasswordHash;"				  ]
[ "getPlants",			  "command",	  "factories",		  "() (mod:bat[:oid,:str],fcn:bat[:oid,:str]) ",																											  "FCTgetPlants;"				  ]
[ "getPort",			  "command",	  "url",		  "(u:url):str ",																															  "URLgetPort;"					  ]
[ "getProtocol",		  "command",	  "url",		  "(u:url):str ",																															  "URLgetProtocol;"				  ]
[ "getQuery",			  "command",	  "url",		  "(u:url):str ",																															  "URLgetQuery;"				  ]
[ "getQueryArg",		  "command",	  "url",		  "(u:url):bat[:str,:str] ",																														  "URLgetQueryArg;"				  ]
[ "getRNames",			  "command",	  "bbp",		  "():bat[:int,:str] ",																															  "CMDbbpRNames;"				  ]
[ "getReason",			  "command",	  "mdb",		  "(s:str):str ",																															  "MDBgetExceptionReason;"			  ]
[ "getRefCount",		  "command",	  "bbp",		  "(b:bat[:any_1,:any_2]):int ",																													  "CMDgetBATrefcnt;"				  ]
[ "getRefCount",		  "command",	  "bbp",		  "():bat[:int,:int] ",																															  "CMDbbpRefCount;"				  ]
[ "getReusePolicy",		  "command",	  "recycle",		  "():int ",																																  "RECYCLEgetReuse;"				  ]
[ "getRobotURL",		  "command",	  "url",		  "(u:url):str ",																															  "URLgetRobotURL;"				  ]
[ "getRole",			  "command",	  "bat",		  "(bid:bat[:any_1,:any_2]):str ",																													  "BKCgetRole;"					  ]
[ "getScenario",		  "pattern",	  "clients",		  "():str ",																																  "CLTgetScenario;"				  ]
[ "getSequenceBase",		  "command",	  "bat",		  "(b:bat[:oid,:any_1]):oid ",																														  "BKCgetSequenceBase;"				  ]
[ "getSignature",		  "pattern",	  "inspect",		  "(mod:str,fcn:str):bat[:str,:str] ",																													  "INSPECTgetSignature;"			  ]
[ "getSignatures",		  "pattern",	  "inspect",		  "():bat[:oid,:str] ",																															  "INSPECTgetAllSignatures;"			  ]
[ "getSize",			  "pattern",	  "statistics",		  "(nme:str):lng ",																															  "STATgetSize;"				  ]
[ "getSize",			  "pattern",	  "inspect",		  "(mod:str,fcn:str):lng ",																														  "INSPECTgetFunctionSize;"			  ]
[ "getSize",			  "pattern",	  "inspect",		  "(mod:str):bat[:str,:lng] ",																														  "INSPECTgetModuleSize;"			  ]
[ "getSize",			  "pattern",	  "inspect",		  "():lng ",																																  "INSPECTgetSize;"				  ]
[ "getSize",			  "command",	  "bat",		  "(b:bat[:any_1,:any_2]):lng ",																													  "BKCbatsize;"					  ]
[ "getSource",			  "pattern",	  "inspect",		  "(mod:str,fcn:str):str ",																														  "INSPECTgetSource;"				  ]
[ "getSpaceUsed",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):lng ",													  "BKCgetSpaceUsed;"					  ]
[ "getStackDepth",		  "pattern",	  "mdb",		  "():int ",																																  "MDBStkDepth;"				  ]
[ "getStackFrame",		  "pattern",	  "mdb",		  "():bat[:str,:str] ",																															  "MDBgetStackFrame;"				  ]
[ "getStackFrame",		  "pattern",	  "mdb",		  "(i:int):bat[:str,:str] ",																														  "MDBgetStackFrameN;"				  ]
[ "getStackTrace",		  "pattern",	  "mdb",		  "():bat[:void,:str] ",																														  "MDBStkTrace;"				  ]
[ "getStatistics",		  "command",	  "inspect",		  "(nme:str):bat[:any_1,:any_2] ",																													  "QOTgetStatistics;"				  ]
[ "getStatus",			  "command",	  "bbp",		  "():bat[:int,:str] ",																															  "CMDbbpStatus;"				  ]
[ "getStorageSize",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):lng ",													  "BKCgetStorageSize;"					  ]
[ "getSystemTime",		  "command",	  "profiler",		  "():lng ",																																  "CMDgetSystemTime;"				  ]
[ "getTail",			  "pattern",	  "bat",		  "(b:bat[:any_2,:any_1],i:lng):any_1 ",																												  "CHPgetTail;"					  ]
[ "getTailType",		  "command",	  "bbp",		  "():bat[:int,:str] ",																															  "CMDbbpTailType;"				  ]
[ "getTailType",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):str ",													  "BKCgetTailType;"					  ]
[ "getThreads",			  "command",	  "status",		  "():bat[:int,:str] ",																															  "SYSgdkThread;"				  ]
[ "getTime",			  "command",	  "clients",		  "():bat[:int,:lng] ",																															  "CLTTime;"					  ]
[ "getTimeout",			  "pattern",	  "clients",		  "() (q:int,s:int) ",																															  "CLTgetTimeout;"				  ]
[ "getTrace",			  "command",	  "profiler",		  "(e:str):bat[:int,:any_1] ",																														  "CMDgetTrace;"				  ]
[ "getType",			  "pattern",	  "inspect",		  "(v:any_1):str ",																															  "INSPECTtypeName;"				  ]
[ "getType",			  "pattern",	  "inspect",		  "(v:bat[:any_1,:any_2]) (ht:str,tt:str) ",																												  "INSPECTtypeName;"				  ]
[ "getTypeIndex",		  "pattern",	  "inspect",		  "(v:any_1):int ",																															  "INSPECTtypeIndex;"				  ]
[ "getTypeIndex",		  "pattern",	  "inspect",		  "(v:bat[:any_1,:any_2]) (ht:int,tt:int) ",																												  "INSPECTtypeIndex;"				  ]
[ "getTypeName",		  "command",	  "inspect",		  "(v:int):str ",																															  "INSPECTtypename;"				  ]
[ "getUser",			  "command",	  "url",		  "(u:url):str ",																															  "URLgetUser;"					  ]
[ "getUserTime",		  "command",	  "profiler",		  "():lng ",																																  "CMDgetUserTime;"				  ]
[ "getUsername",		  "pattern",	  "clients",		  "():str ",																																  "CLTgetUsername;"				  ]
[ "getUsers",			  "pattern",	  "clients",		  "():bat[:oid,:str] ",																															  "CLTgetUsers;"				  ]
[ "getUsers",			  "command",	  "clients",		  "():bat[:int,:str] ",																															  "CLTusers;"					  ]
[ "getVariable",		  "pattern",	  "sql",		  "(mvc:int,varname:str):any_1 ",																													  "getVariable;"				  ]
[ "getVariable",		  "function",	  "octopus",		  "(conn:str,name:str):any_1;",																														  "nil"						  ]
[ "getVersion",			  "command",	  "sql",		  "(clientid:int):lng ",																														  "mvc_getVersion;"				  ]
[ "getVersion",			  "command",	  "octopus",		  "():int ",																																  "OCTOPUSgetVersion;"				  ]
[ "get_field_count",		  "command",	  "mapi",		  "(hdl:int):int ",																															  "SERVERget_field_count;"			  ]
[ "get_row_count",		  "command",	  "mapi",		  "(hdl:int):lng ",																															  "SERVERget_row_count;"			  ]
[ "get_value",			  "pattern",	  "sql",		  "(sname:str,sequence:str):lng ",																													  "mvc_get_value;"				  ]
[ "getenv",			  "command",	  "unix",		  "(nme:str):str ",																															  "UNIXgetenv;"					  ]
[ "getrss",			  "command",	  "unix",		  "():lng ",																																  "UNIXgetRSS;"					  ]
[ "grab",			  "pattern",	  "mdb",		  "():void ",																																  "mdbGrab;"					  ]
[ "green",			  "command",	  "batcolor",		  "(c:bat[:oid,:color]):bat[:oid,:int] ",																												  "CLRbatGreen;"				  ]
[ "green",			  "command",	  "color",		  "(c:color):int ",																															  "CLRgreen;"					  ]
[ "grid",			  "command",	  "array",		  "(b:bat[:oid,:lng],i:lng,j:lng,k:lng,l:lng,s:lng):bat[:oid,:lng] ",																									  "ARRAYgridBATshift_lng;"			  ]
[ "grid",			  "command",	  "array",		  "(b:bat[:oid,:lng],i:lng,j:lng,k:lng,l:lng):bat[:oid,:lng] ",																										  "ARRAYgridBAT_lng;"				  ]
[ "grid",			  "command",	  "array",		  "(i:lng,j:lng,k:lng,l:lng,s:lng):bat[:oid,:lng] ",																											  "ARRAYgridShift_lng;"				  ]
[ "grid",			  "command",	  "array",		  "(i:lng,j:lng,k:lng,l:lng):bat[:oid,:lng] ",																												  "ARRAYgrid_lng;"				  ]
[ "grid",			  "command",	  "array",		  "(b:bat[:oid,:int],i:int,j:int,k:int,l:int,s:int):bat[:oid,:int] ",																									  "ARRAYgridBATshift_int;"			  ]
[ "grid",			  "command",	  "array",		  "(b:bat[:oid,:int],i:int,j:int,k:int,l:int):bat[:oid,:int] ",																										  "ARRAYgridBAT_int;"				  ]
[ "grid",			  "command",	  "array",		  "(i:int,j:int,k:int,l:int,s:int):bat[:oid,:int] ",																											  "ARRAYgridShift_int;"				  ]
[ "grid",			  "command",	  "array",		  "(i:int,j:int,k:int,l:int):bat[:oid,:int] ",																												  "ARRAYgrid_int;"				  ]
[ "group",			  "command",	  "dictionary",		  "(idx:bat[:oid,:any_1],val:bat[:any_1,:any_2]):bat[:oid,:any_2] ",																									  "DICTgroupid;"				  ]
[ "groupby",			  "command",	  "algebra",		  "(b:bat[:any_1,:wrd]):bat[:any_1,:oid] ",																												  "ALGgroupby;"					  ]
[ "gzcompress",			  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",																														  "SQLgzcompress;"				  ]
[ "gzdecompress",		  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",																														  "SQLgzdecompress;"				  ]
[ "gzexpand",			  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",																														  "SQLexpand;"					  ]
[ "gztruncate",			  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",																														  "SQLtruncate;"				  ]
[ "hasAppendMode",		  "command",	  "bat",		  "(b:bat[:any_1,:any_2]):bit ",																													  "BKChasAppendMode;"				  ]
[ "hasMoreElements",		  "pattern",	  "statistics",		  "() (X_1:lng,X_2:str) ",																														  "STAThasMoreElements;"			  ]
[ "hasMoreElements",		  "pattern",	  "mat",		  "(grp:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",																											  "MAThasMoreElements;"				  ]
[ "hasMoreElements",		  "pattern",	  "const",		  "() (X_1:lng,X_2:str) ",																														  "CSThasMoreElements;"				  ]
[ "hasMoreElements",		  "pattern",	  "bat",	  "(b:bat[:any_1,:BAT]) (X_2:lng,h:any_1,t:any_2) ",										  "CHPbunHasMoreElements;"		  ]
[ "hasMoreElements",		  "pattern",	  "bat",	  "(b:bat[:oid,:any_2]) (X_2:lng,h:oid,t:any_2) ",										  "CHPbunHasMoreElements;"		  ]
[ "hasMoreElements",		  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2]) (X_2:lng,h:any_1,t:any_2) ",										  "CHPbunHasMoreElements;"		  ]
[ "hasMoreElements",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2],size:lng) (X_3:lng,X_4:bat[:any_1,:any_2]) ",								  "CHPhasMoreElements;"			  ]
[ "hasReadMode",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",													  "BKChasReadMode;"					  ]
[ "hasWriteMode",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",													  "BKChasWriteMode;"					  ]
[ "hash",			  "command",	  "batcalc",		  "(b:bat[:oid,:any_1]):bat[:oid,:wrd] ",																												  "MKEYbathash;"				  ]
[ "hash",			  "command",	  "batcalc",		  "(b:bat[:oid,:dbl]):bat[:oid,:wrd] ",																													  "MKEYbathash;"				  ]
[ "hash",			  "command",	  "batcalc",		  "(b:bat[:oid,:flt]):bat[:oid,:wrd] ",																													  "MKEYbathash;"				  ]
[ "hash",			  "command",	  "batcalc",		  "(b:bat[:oid,:wrd]):bat[:oid,:wrd] ",																													  "MKEYbathash;"				  ]
[ "hash",			  "command",	  "batcalc",		  "(b:bat[:oid,:oid]):bat[:oid,:wrd] ",																													  "MKEYbathash;"				  ]
[ "hash",			  "command",	  "batcalc",		  "(b:bat[:oid,:lng]):bat[:oid,:wrd] ",																													  "MKEYbathash;"				  ]
[ "hash",			  "command",	  "batcalc",		  "(b:bat[:oid,:int]):bat[:oid,:wrd] ",																													  "MKEYbathash;"				  ]
[ "hash",			  "command",	  "batcalc",		  "(b:bat[:oid,:sht]):bat[:oid,:wrd] ",																													  "MKEYbathash;"				  ]
[ "hash",			  "command",	  "batcalc",		  "(b:bat[:oid,:bte]):bat[:oid,:wrd] ",																													  "MKEYbathash;"				  ]
[ "hash",			  "command",	  "mkey",		  "(b:bat[:oid,:any_1]):bat[:oid,:wrd] ",																												  "MKEYbathash;"				  ]
[ "hash",			  "command",	  "mkey",		  "(v:str):wrd ",																															  "MKEYhash_str;"				  ]
[ "hash",			  "command",	  "mkey",		  "(v:lng):wrd ",																															  "MKEYhash_lng;"				  ]
[ "hash",			  "command",	  "mkey",		  "(v:dbl):wrd ",																															  "MKEYhash_dbl;"				  ]
[ "hash",			  "command",	  "mkey",		  "(v:wrd):wrd ",																															  "MKEYhash_wrd;"				  ]
[ "hash",			  "command",	  "mkey",		  "(v:flt):wrd ",																															  "MKEYhash_flt;"				  ]
[ "hash",			  "command",	  "mkey",		  "(v:int):wrd ",																															  "MKEYhash_int;"				  ]
[ "hash",			  "command",	  "mkey",		  "(v:sht):wrd ",																															  "MKEYhash_sht;"				  ]
[ "hash",			  "command",	  "mkey",		  "(v:bte):wrd ",																															  "MKEYhash_bte;"				  ]
[ "hash",			  "command",	  "mkey",		  "(v:bit):wrd ",																															  "MKEYhash_bit;"				  ]
[ "hash",			  "pattern",	  "mkey",		  "(v:any):wrd ",																															  "MKEYhash;"					  ]
[ "hash",			  "pattern",	  "calc",		  "(v:any):wrd ",																															  "MKEYhash;"					  ]
[ "hash",			  "pattern",	  "calc",		  "(v:dbl):wrd ",																															  "MKEYhash;"					  ]
[ "hash",			  "pattern",	  "calc",		  "(v:flt):wrd ",																															  "MKEYhash;"					  ]
[ "hash",			  "pattern",	  "calc",		  "(v:wrd):wrd ",																															  "MKEYhash;"					  ]
[ "hash",			  "pattern",	  "calc",		  "(v:oid):wrd ",																															  "MKEYhash;"					  ]
[ "hash",			  "pattern",	  "calc",		  "(v:lng):wrd ",																															  "MKEYhash;"					  ]
[ "hash",			  "pattern",	  "calc",		  "(v:int):wrd ",																															  "MKEYhash;"					  ]
[ "hash",			  "pattern",	  "calc",		  "(v:sht):wrd ",																															  "MKEYhash;"					  ]
[ "hash",			  "pattern",	  "calc",		  "(v:bte):wrd ",																															  "MKEYhash;"					  ]
[ "hashjoin",			  "command",	  "algebra",		  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",																								  "ALGhashjoin;"				  ]
[ "hashsplit",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],buckects:int):bat[:int,:BAT] ",																										  "ALGhashsplit;"				  ]
[ "header",			  "pattern",	  "tablet",		  "(b:any...):int ",																															  "TABheader;"					  ]
[ "help",			  "pattern",	  "manual",		  "(text:str):void ",																															  "MANUALhelp;"					  ]
[ "heuristics",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTheuristics;"				  ]
[ "heuristics",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTheuristics;"				  ]
[ "histogram",			  "command",	  "aggr",		  "(b:bat[:any_1,:any_2]):bat[:any_2,:int] ",																												  "ALGhistogram;"				  ]
[ "history",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPThistory;"					  ]
[ "history",			  "pattern",	  "optimizer",		  "():str ",																																  "OPThistory;"					  ]
[ "host",			  "command",	  "inet",		  "(X_1:inet):str ",																															  "INEThost;"					  ]
[ "hostmask",			  "command",	  "inet",		  "(X_1:inet):inet ",																															  "INEThostmask;"				  ]
[ "hours",			  "command",	  "mtime",		  "(msecs:lng):int ",																															  "MTIMEsql_hours;"				  ]
[ "hours",			  "command",	  "mtime",		  "(t:timestamp):int ",																															  "MTIMEtimestamp_hours;"			  ]
[ "hours",			  "command",	  "mtime",		  "(h:daytime):int ",																															  "MTIMEdaytime_extract_hours;"			  ]
[ "hours",			  "command",	  "batmtime",		  "(d:bat[:any_1,:daytime]):bat[:any_1,:int] ",																												  "MTIMEdaytime_extract_hours_bulk;"		  ]
[ "hsv",			  "command",	  "batcolor",		  "(h:bat[:oid,:flt],s:bat[:oid,:flt],v:bat[:oid,:flt]):bat[:oid,:color] ",																								  "CLRbatHsv;"					  ]
[ "hsv",			  "command",	  "color",		  "(h:flt,s:flt,v:flt):color ",																														  "CLRhsv;"					  ]
[ "hue",			  "command",	  "batcolor",		  "(c:bat[:oid,:color]):bat[:oid,:flt] ",																												  "CLRbatHue;"					  ]
[ "hue",			  "command",	  "batcolor",		  "(c:bat[:oid,:color]):bat[:oid,:int] ",																												  "CLRbatHueInt;"				  ]
[ "hue",			  "command",	  "color",		  "(c:color):flt ",																															  "CLRhue;"					  ]
[ "hue",			  "command",	  "color",		  "(c:color):int ",																															  "CLRhueInt;"					  ]
[ "iconv",			  "command",	  "str",		  "(org:str,fromCs:str,toCs:str):str ",																													  "STRIconv;"					  ]
[ "identifier",			  "command",	  "identifier",		  "(s:str):identifier ",																														  "IDentifier;"					  ]
[ "ifthen",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],v:str):bat[:oid,:str] ",																												  "CMDifThenCst_str;"				  ]
[ "ifthen",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:oid,:str]):bat[:oid,:str] ",																										  "CMDifThen_str;"				  ]
[ "ifthen",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],v:dbl):bat[:oid,:dbl] ",																												  "CMDifThenCst_dbl;"				  ]
[ "ifthen",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:oid,:dbl]):bat[:oid,:dbl] ",																										  "CMDifThen_dbl;"				  ]
[ "ifthen",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],v:flt):bat[:oid,:flt] ",																												  "CMDifThenCst_flt;"				  ]
[ "ifthen",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:oid,:flt]):bat[:oid,:flt] ",																										  "CMDifThen_flt;"				  ]
[ "ifthen",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],v:oid):bat[:oid,:oid] ",																												  "CMDifThenCst_oid;"				  ]
[ "ifthen",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:oid,:oid]):bat[:oid,:oid] ",																										  "CMDifThen_oid;"				  ]
[ "ifthen",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],v:lng):bat[:oid,:lng] ",																												  "CMDifThenCst_lng;"				  ]
[ "ifthen",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDifThen_lng;"				  ]
[ "ifthen",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],v:int):bat[:oid,:int] ",																												  "CMDifThenCst_int;"				  ]
[ "ifthen",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:oid,:int]):bat[:oid,:int] ",																										  "CMDifThen_int;"				  ]
[ "ifthen",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],v:sht):bat[:oid,:sht] ",																												  "CMDifThenCst_sht;"				  ]
[ "ifthen",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:oid,:sht]):bat[:oid,:sht] ",																										  "CMDifThen_sht;"				  ]
[ "ifthen",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],v:bte):bat[:oid,:bte] ",																												  "CMDifThenCst_bte;"				  ]
[ "ifthen",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:oid,:bte]):bat[:oid,:bte] ",																										  "CMDifThen_bte;"				  ]
[ "ifthen",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],v:bit):bat[:oid,:bit] ",																												  "CMDifThenCst_bit;"				  ]
[ "ifthen",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:oid,:bit]):bat[:oid,:bit] ",																										  "CMDifThen_bit;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:any_1,:str],e:str):bat[:oid,:str] ",																									  "CMDifThenElseCst2_str;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],e:str,t:bat[:oid,:str]):bat[:oid,:str] ",																										  "CMDifThenElseCst1_str;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:oid,:str],e:bat[:oid,:str]):bat[:oid,:str] ",																								  "CMDifThenElse_str;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],v:str,w:str):bat[:oid,:str] ",																											  "CMDifThenElseCst_str;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:any_1,:dbl],e:dbl):bat[:oid,:dbl] ",																									  "CMDifThenElseCst2_dbl;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],e:dbl,t:bat[:oid,:dbl]):bat[:oid,:dbl] ",																										  "CMDifThenElseCst1_dbl;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:oid,:dbl],e:bat[:oid,:dbl]):bat[:oid,:dbl] ",																								  "CMDifThenElse_dbl;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],v:dbl,w:dbl):bat[:oid,:dbl] ",																											  "CMDifThenElseCst_dbl;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:any_1,:flt],e:flt):bat[:oid,:flt] ",																									  "CMDifThenElseCst2_flt;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],e:flt,t:bat[:oid,:flt]):bat[:oid,:flt] ",																										  "CMDifThenElseCst1_flt;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:oid,:flt],e:bat[:oid,:flt]):bat[:oid,:flt] ",																								  "CMDifThenElse_flt;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],v:flt,w:flt):bat[:oid,:flt] ",																											  "CMDifThenElseCst_flt;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:any_1,:oid],e:oid):bat[:oid,:oid] ",																									  "CMDifThenElseCst2_oid;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],e:oid,t:bat[:oid,:oid]):bat[:oid,:oid] ",																										  "CMDifThenElseCst1_oid;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:oid,:oid],e:bat[:oid,:oid]):bat[:oid,:oid] ",																								  "CMDifThenElse_oid;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],v:oid,w:oid):bat[:oid,:oid] ",																											  "CMDifThenElseCst_oid;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:any_1,:lng],e:lng):bat[:oid,:lng] ",																									  "CMDifThenElseCst2_lng;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],e:lng,t:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDifThenElseCst1_lng;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:oid,:lng],e:bat[:oid,:lng]):bat[:oid,:lng] ",																								  "CMDifThenElse_lng;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],v:lng,w:lng):bat[:oid,:lng] ",																											  "CMDifThenElseCst_lng;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:any_1,:int],e:int):bat[:oid,:int] ",																									  "CMDifThenElseCst2_int;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],e:int,t:bat[:oid,:int]):bat[:oid,:int] ",																										  "CMDifThenElseCst1_int;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:oid,:int],e:bat[:oid,:int]):bat[:oid,:int] ",																								  "CMDifThenElse_int;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],v:int,w:int):bat[:oid,:int] ",																											  "CMDifThenElseCst_int;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:any_1,:sht],e:sht):bat[:oid,:sht] ",																									  "CMDifThenElseCst2_sht;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],e:sht,t:bat[:oid,:sht]):bat[:oid,:sht] ",																										  "CMDifThenElseCst1_sht;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:oid,:sht],e:bat[:oid,:sht]):bat[:oid,:sht] ",																								  "CMDifThenElse_sht;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],v:sht,w:sht):bat[:oid,:sht] ",																											  "CMDifThenElseCst_sht;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:any_1,:bte],e:bte):bat[:oid,:bte] ",																									  "CMDifThenElseCst2_bte;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],e:bte,t:bat[:oid,:bte]):bat[:oid,:bte] ",																										  "CMDifThenElseCst1_bte;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:oid,:bte],e:bat[:oid,:bte]):bat[:oid,:bte] ",																								  "CMDifThenElse_bte;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],v:bte,w:bte):bat[:oid,:bte] ",																											  "CMDifThenElseCst_bte;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:any_1,:bit],e:bit):bat[:oid,:bit] ",																									  "CMDifThenElseCst2_bit;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],e:bit,t:bat[:oid,:bit]):bat[:oid,:bit] ",																										  "CMDifThenElseCst1_bit;"			  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],t:bat[:oid,:bit],e:bat[:oid,:bit]):bat[:oid,:bit] ",																								  "CMDifThenElse_bit;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",		  "(b:bat[:oid,:bit],v:bit,w:bit):bat[:oid,:bit] ",																											  "CMDifThenElseCst_bit;"			  ]
[ "ifthenelse",			  "pattern",	  "calc",		  "(b:bit,t:any_1,f:any_1):any_1 ",																													  "CALCswitchbit;"				  ]
[ "ilike",			  "command",	  "batstr",		  "(s:bat[:any_1,:str],pat:str):bat[:any_1,:bit] ",																											  "BATPCREilike2;"				  ]
[ "ilike",			  "command",	  "batstr",		  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:bit] ",																										  "BATPCREilike;"				  ]
[ "ilike",			  "command",	  "str",		  "(s:str,pat:str):bit ",																														  "PCREilike2;"					  ]
[ "ilike",			  "command",	  "str",		  "(s:str,pat:str,esc:str):bit ",																													  "PCREilike3;"					  ]
[ "ilike_filter",		  "function",	  "pcre",		  "(s:bat[:any_1,:str],pat:str):bat[:any_1,:str];",																											  "nil"						  ]
[ "ilike_filter",		  "command",	  "pcre",		  "(s:bat[:any_1,:str],pat:bat[:any_2,:str],esc:str):bat[:any_1,:any_2] ",																								  "PCREilike_join_pcre;"			  ]
[ "ilike_filter",		  "command",	  "pcre",		  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:void] ",																										  "PCREilike_uselect_pcre;"			  ]
[ "ilike_select",		  "command",	  "pcre",		  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:str] ",																										  "PCREilike_select_pcre;"			  ]
[ "ilike_uselect",		  "command",	  "pcre",		  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:void] ",																										  "PCREilike_uselect_pcre;"			  ]
[ "imatch",			  "command",	  "pcre",		  "(s:str,pat:str):bit ",																														  "PCREimatch;"					  ]
[ "import",			  "command",	  "io",			  "(b:bat[:any_1,:any_2],filepath:str):bat[:any_1,:any_2] ",																										  "IOimport;"					  ]
[ "importTable",		  "pattern",	  "sql",		  "(sname:str,tname:str,fname:str...):bat[:oid,:any]... ",																										  "mvc_bin_import_table_wrap;"			  ]
[ "include",			  "pattern",	  "sql",		  "(fname:str):void ",																															  "SQLinclude;"					  ]
[ "index",			  "pattern",	  "manual",		  "():void ",																																  "MANUALcreateIndex;"				  ]
[ "index",			  "command",	  "pcre",		  "(pat:pcre,s:str):int ",																														  "PCREindex;"					  ]
[ "indexjoin",			  "command",	  "algebra",		  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",																								  "ALGindexjoin;"				  ]
[ "inet",			  "command",	  "calc",		  "(s:str):inet ",																															  "INET_fromstr;"				  ]
[ "inet",			  "command",	  "calc",		  "(s:inet):inet ",																															  "INET_inet;"					  ]
[ "info",			  "command",	  "mat",		  "(g:str,e:str):bat[:any_1,:any_2] ",																													  "MATinfo;"					  ]
[ "info",			  "command",	  "bat",		  "(b:bat[:any_1,:any_2]):bat[:str,:str] ",																												  "BKCinfo;"					  ]
[ "init",			  "pattern",	  "sql",		  "():void ",																																  "SQLinitEnvironment;"				  ]
[ "init",			  "command",	  "pqueue",		  "(a:bat[:oid,:any_1],maxsize:wrd):bat[:oid,:any_1] ",																											  "PQinit;"					  ]
[ "initialize",			  "command",	  "dictionary",		  "():void ",																																  "DICTinitialize;"				  ]
[ "inline",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTinline;"					  ]
[ "inline",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTinline;"					  ]
[ "inplace",				  "command",	  "bat",	  "(o:bat[:any_1,:any_2],d:bat[:any_1,:any_2],force:bit):bat[:any_1,:any_2] ",							  "BKCbat_inplace_force;"			  ]
[ "inplace",				  "command",	  "bat",	  "(o:bat[:any_1,:any_2],id:any_1,t:any_2,force:bit):bat[:any_1,:any_2] ",							  "BKCbun_inplace_force;"			  ]
[ "inplace",				  "command",	  "bat",	  "(o:bat[:any_1,:any_2],d:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "BKCbat_inplace;"				  ]
[ "inplace",				  "command",	  "bat",	  "(o:bat[:any_1,:any_2],id:any_1,t:any_2):bat[:any_1,:any_2] ",								  "BKCbun_inplace;"				  ]
[ "input",			  "command",	  "tablet",		  "(names:bat[:oid,:str],seps:bat[:oid,:str],types:bat[:oid,:str],s:streams,nr:int):bat[:str,:BAT] ",																					  "CMDtablet_input;"				  ]
[ "insert",			  "command",	  "str",		  "(s:str,start:int,l:int,s2:str):str ",																												  "STRinsert;"					  ]
[ "insert",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2,force:bit):bat[:any_1,:any_2] ",								  "BKCinsert_bun_force;"				  ]
[ "insert",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):bat[:any_1,:any_2] ",										  "BKCinsert_bun;"					  ]
[ "insert",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2],force:bit):bat[:any_1,:any_2] ",							  "BKCinsert_bat_force;"				  ]
[ "insert",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",									  "BKCinsert_bat;"					  ]
[ "inspect",			  "pattern",	  "mdb",		  "(mod:str,fcn:str):void ",																														  "MDBinspect;"					  ]
[ "int",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng],d2:int,s2:int):bat[:oid,:int] ",																										  "batlng_dec2dec_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng]):bat[:oid,:int] ",																												  "batlng_dec2_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(v:bat[:oid,:lng],digits:int,scale:int):bat[:oid,:int] ",																										  "batlng_num2dec_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(v:bat[:oid,:lng]):bat[:oid,:int] ",																													  "batlng_2_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd],d2:int,s2:int):bat[:oid,:int] ",																										  "batwrd_dec2dec_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd]):bat[:oid,:int] ",																												  "batwrd_dec2_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(v:bat[:oid,:wrd],digits:int,scale:int):bat[:oid,:int] ",																										  "batwrd_num2dec_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(v:bat[:oid,:wrd]):bat[:oid,:int] ",																													  "batwrd_2_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int],d2:int,s2:int):bat[:oid,:int] ",																										  "batint_dec2dec_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int]):bat[:oid,:int] ",																												  "batint_dec2_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(v:bat[:oid,:int],digits:int,scale:int):bat[:oid,:int] ",																										  "batint_num2dec_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(v:bat[:oid,:int]):bat[:oid,:int] ",																													  "batint_2_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht],d2:int,s2:int):bat[:oid,:int] ",																										  "batsht_dec2dec_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht]):bat[:oid,:int] ",																												  "batsht_dec2_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(v:bat[:oid,:sht],digits:int,scale:int):bat[:oid,:int] ",																										  "batsht_num2dec_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(v:bat[:oid,:sht]):bat[:oid,:int] ",																													  "batsht_2_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte],d2:int,s2:int):bat[:oid,:int] ",																										  "batbte_dec2dec_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte]):bat[:oid,:int] ",																												  "batbte_dec2_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(v:bat[:oid,:bte],digits:int,scale:int):bat[:oid,:int] ",																										  "batbte_num2dec_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(v:bat[:oid,:bte]):bat[:oid,:int] ",																													  "batbte_2_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(v:bat[:oid,:dbl],digits:int,scale:int):bat[:oid,:int] ",																										  "batdbl_num2dec_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(v:bat[:oid,:dbl]):bat[:oid,:int] ",																													  "batdbl_2_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(v:bat[:oid,:flt],digits:int,scale:int):bat[:oid,:int] ",																										  "batflt_num2dec_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(v:bat[:oid,:flt]):bat[:oid,:int] ",																													  "batflt_2_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(v:bat[:oid,:str],digits:int,scale:int):bat[:oid,:int] ",																										  "batstr_2dec_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(v:bat[:oid,:str],digits:int):bat[:oid,:int] ",																											  "batstr_2num_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(v:bat[:oid,:str]):bat[:oid,:int] ",																													  "batstr_2_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(b:bat[:any_1,:str]):bat[:any_1,:int] ",																												  "CMDconvert_str_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(b:bat[:any_1,:bit]):bat[:any_1,:int] ",																												  "CMDconvert_bit_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl]):bat[:any_1,:int] ",																												  "CMDconvert_dbl_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(b:bat[:any_1,:flt]):bat[:any_1,:int] ",																												  "CMDconvert_flt_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(b:bat[:any_1,:oid]):bat[:any_1,:int] ",																												  "CMDconvert_oid_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(b:bat[:any_1,:lng]):bat[:any_1,:int] ",																												  "CMDconvert_lng_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd]):bat[:any_1,:int] ",																												  "CMDconvert_wrd_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(b:bat[:any_1,:sht]):bat[:any_1,:int] ",																												  "CMDconvert_sht_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(b:bat[:any_1,:bte]):bat[:any_1,:int] ",																												  "CMDconvert_bte_int;"				  ]
[ "int",			  "command",	  "batcalc",		  "(b:bat[:any_1,:int]):bat[:any_1,:int] ",																												  "CMDconvert_int;"				  ]
[ "int",			  "command",	  "calc",		  "(s1:int,v:lng,d2:int,s2:int):int ",																													  "lng_dec2dec_int;"				  ]
[ "int",			  "command",	  "calc",		  "(s1:int,v:lng):int ",																														  "lng_dec2_int;"				  ]
[ "int",			  "command",	  "calc",		  "(v:lng,digits:int,scale:int):int ",																													  "lng_num2dec_int;"				  ]
[ "int",			  "command",	  "calc",		  "(v:lng):int ",																															  "lng_2_int;"					  ]
[ "int",			  "command",	  "calc",		  "(s1:int,v:wrd,d2:int,s2:int):int ",																													  "wrd_dec2dec_int;"				  ]
[ "int",			  "command",	  "calc",		  "(s1:int,v:wrd):int ",																														  "wrd_dec2_int;"				  ]
[ "int",			  "command",	  "calc",		  "(v:wrd,digits:int,scale:int):int ",																													  "wrd_num2dec_int;"				  ]
[ "int",			  "command",	  "calc",		  "(v:wrd):int ",																															  "wrd_2_int;"					  ]
[ "int",			  "command",	  "calc",		  "(s1:int,v:int,d2:int,s2:int):int ",																													  "int_dec2dec_int;"				  ]
[ "int",			  "command",	  "calc",		  "(s1:int,v:int):int ",																														  "int_dec2_int;"				  ]
[ "int",			  "command",	  "calc",		  "(v:int,digits:int,scale:int):int ",																													  "int_num2dec_int;"				  ]
[ "int",			  "command",	  "calc",		  "(v:int):int ",																															  "int_2_int;"					  ]
[ "int",			  "command",	  "calc",		  "(s1:int,v:sht,d2:int,s2:int):int ",																													  "sht_dec2dec_int;"				  ]
[ "int",			  "command",	  "calc",		  "(s1:int,v:sht):int ",																														  "sht_dec2_int;"				  ]
[ "int",			  "command",	  "calc",		  "(v:sht,digits:int,scale:int):int ",																													  "sht_num2dec_int;"				  ]
[ "int",			  "command",	  "calc",		  "(v:sht):int ",																															  "sht_2_int;"					  ]
[ "int",			  "command",	  "calc",		  "(s1:int,v:bte,d2:int,s2:int):int ",																													  "bte_dec2dec_int;"				  ]
[ "int",			  "command",	  "calc",		  "(s1:int,v:bte):int ",																														  "bte_dec2_int;"				  ]
[ "int",			  "command",	  "calc",		  "(v:bte,digits:int,scale:int):int ",																													  "bte_num2dec_int;"				  ]
[ "int",			  "command",	  "calc",		  "(v:bte):int ",																															  "bte_2_int;"					  ]
[ "int",			  "command",	  "calc",		  "(v:dbl,digits:int,scale:int):int ",																													  "dbl_num2dec_int;"				  ]
[ "int",			  "command",	  "calc",		  "(v:dbl):int ",																															  "dbl_2_int;"					  ]
[ "int",			  "command",	  "calc",		  "(v:flt,digits:int,scale:int):int ",																													  "flt_num2dec_int;"				  ]
[ "int",			  "command",	  "calc",		  "(v:flt):int ",																															  "flt_2_int;"					  ]
[ "int",			  "command",	  "calc",		  "(v:str,digits:int,scale:int):int ",																													  "str_2dec_int;"				  ]
[ "int",			  "command",	  "calc",		  "(v:str,digits:int):int ",																														  "str_2num_int;"				  ]
[ "int",			  "command",	  "calc",		  "(v:str):int ",																															  "str_2_int;"					  ]
[ "int",			  "command",	  "calc",		  "(v:void):int ",																															  "CALCnil2int;"				  ]
[ "int",			  "command",	  "calc",		  "(v:str):int ",																															  "CALCstr2int;"				  ]
[ "int",			  "command",	  "calc",		  "(x:dbl):int ",																															  "CALCdbl2int;"				  ]
[ "int",			  "command",	  "calc",		  "(x:flt):int ",																															  "CALCflt2int;"				  ]
[ "int",			  "command",	  "calc",		  "(x:lng):int ",																															  "CALClng2int;"				  ]
[ "int",			  "command",	  "calc",		  "(x:wrd):int ",																															  "CALCwrd2int;"				  ]
[ "int",			  "command",	  "calc",		  "(x:int):int ",																															  "CALCint2int;"				  ]
[ "int",			  "command",	  "calc",		  "(x:sht):int ",																															  "CALCsht2int;"				  ]
[ "int",			  "command",	  "calc",		  "(x:bte):int ",																															  "CALCbte2int;"				  ]
[ "int",			  "command",	  "calc",		  "(x:bit):int ",																															  "CALCbit2int;"				  ]
[ "int",			  "command",	  "calc",		  "(x:oid):int ",																															  "CALCoid2int;"				  ]
[ "intersect",			  "command",	  "algebra",		  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																								  "ALGsintersect;"				  ]
[ "inv",			  "command",	  "calc",		  "(x:dbl):dbl ",																															  "CALCunarycheckdblINV;"			  ]
[ "inv",			  "command",	  "calc",		  "(x:lng):lng ",																															  "CALCunarychecklngINV;"			  ]
[ "inv",			  "command",	  "calc",		  "(x:flt):flt ",																															  "CALCunarycheckfltINV;"			  ]
[ "inv",			  "command",	  "calc",		  "(x:wrd):wrd ",																															  "CALCunarycheckwrdINV;"			  ]
[ "inv",			  "command",	  "calc",		  "(x:int):int ",																															  "CALCunarycheckintINV;"			  ]
[ "inv",			  "command",	  "calc",		  "(x:sht):sht ",																															  "CALCunarycheckshtINV;"			  ]
[ "inv",			  "command",	  "calc",		  "(x:bte):bte ",																															  "CALCunarycheckbteINV;"			  ]
[ "inv",			  "command",	  "calc",		  "(x:bit):bit ",																															  "CALCunarycheckbitINV;"			  ]
[ "ioStatistics",		  "command",	  "status",		  "():bat[:str,:int] ",																															  "SYSioStatistics;"				  ]
[ "isCached",			  "command",	  "bat",		  "(b:bat[:any_1,:any_2]):bit ",																													  "BKCisCached;"				  ]
[ "isPersistent",		  "command",	  "bat",		  "(b:bat[:any_1,:any_2]):bit ",																													  "BKCisPersistent;"				  ]
[ "isSorted",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",													  "BKCisSorted;"					  ]
[ "isSortedReverse",		  "command",	  "bat",		  "(b:bat[:any_1,:any_2]):bit ",																													  "BKCisSortedReverse;"				  ]
[ "isSynced",			  "command",	  "bat",		  "(b1:bat[:any_1,:any_2],b2:bat[:any_3,:any_4]):bit ",																											  "BKCisSynced;"				  ]
[ "isTransient",		  "command",	  "bat",		  "(b:bat[:any_1,:any_2]):bit ",																													  "BKCisTransient;"				  ]
[ "isaKey",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",													  "BKCgetKey;"						  ]
[ "isaSet",			  "command",	  "bat",		  "(b:bat[:any_1,:any_1]):bit ",																													  "BKCisaSet;"					  ]
[ "isaURL",			  "command",	  "url",		  "(u:url):bit ",																															  "URLisaURL;"					  ]
[ "isalive",			  "command",	  "remote",		  "(conn:str):int ",																															  "RMTisalive;"					  ]
[ "isdocument",			  "command",	  "xml",		  "(val:bat[:oid,:str]):bat[:oid,:bit] ",																												  "BATXMLisdocument;"				  ]
[ "isdocument",			  "command",	  "xml",		  "(val:str):bit ",																															  "XMLisdocument;"				  ]
[ "isinf",			  "command",	  "mmath",		  "(d:dbl):int ",																															  "MATHunary_ISINF;"				  ]
[ "isnan",			  "command",	  "mmath",		  "(d:dbl):bit ",																															  "MATHunary_ISNAN;"				  ]
[ "isnil",			  "command",	  "batcalc",		  "(b:bat[:any_1,:timestamp]):bat[:any_1,:bit] ",																											  "MTIMEunaryISNIL;"				  ]
[ "isnil",			  "command",	  "batcalc",		  "(b:bat[:any_1,:daytime]):bat[:any_1,:bit] ",																												  "MTIMEunaryISNIL;"				  ]
[ "isnil",			  "command",	  "batcalc",		  "(b:bat[:any_1,:date]):bat[:any_1,:bit] ",																												  "MTIMEunaryISNIL;"				  ]
[ "isnil",			  "command",	  "batcalc",		  "(b:bat[:any_1,:str]):bat[:any_1,:bit] ",																												  "CMDunaryISNIL;"				  ]
[ "isnil",			  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",																												  "CMDunaryISNIL;"				  ]
[ "isnil",			  "command",	  "batcalc",		  "(b:bat[:any_1,:flt]):bat[:any_1,:bit] ",																												  "CMDunaryISNIL;"				  ]
[ "isnil",			  "command",	  "batcalc",		  "(b:bat[:any_1,:lng]):bat[:any_1,:bit] ",																												  "CMDunaryISNIL;"				  ]
[ "isnil",			  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",																												  "CMDunaryISNIL;"				  ]
[ "isnil",			  "command",	  "batcalc",		  "(b:bat[:any_1,:int]):bat[:any_1,:bit] ",																												  "CMDunaryISNIL;"				  ]
[ "isnil",			  "command",	  "batcalc",		  "(b:bat[:any_1,:sht]):bat[:any_1,:bit] ",																												  "CMDunaryISNIL;"				  ]
[ "isnil",			  "command",	  "batcalc",		  "(b:bat[:any_1,:oid]):bat[:any_1,:bit] ",																												  "CMDunaryISNIL;"				  ]
[ "isnil",			  "command",	  "batcalc",		  "(b:bat[:any_1,:bte]):bat[:any_1,:bit] ",																												  "CMDunaryISNIL;"				  ]
[ "isnil",			  "command",	  "batcalc",		  "(b:bat[:any_1,:bit]):bat[:any_1,:bit] ",																												  "CMDunaryISNIL;"				  ]
[ "isnil",			  "command",	  "inet",		  "(v:inet):bit ",																															  "INET_isnil;"					  ]
[ "isnil",			  "command",	  "date",		  "(v:date):bit ",																															  "MTIMEdate_isnil;"				  ]
[ "isnil",			  "command",	  "timestamp",		  "(v:timestamp):bit ",																															  "MTIMEtimestamp_isnil;"			  ]
[ "isnil",			  "command",	  "daytime",		  "(v:daytime):bit ",																															  "MTIMEdaytime_isnil;"				  ]
[ "isnil",			  "command",	  "calc",		  "(v:wkb):bit ",																															  "wkbIsnil;"					  ]
[ "isnil",			  "command",	  "calc",		  "(v:inet):bit ",																															  "INET_isnil;"					  ]
[ "isnil",			  "command",	  "calc",		  "(v:timestamp):bit ",																															  "MTIMEtimestamp_isnil;"			  ]
[ "isnil",			  "command",	  "calc",		  "(v:daytime):bit ",																															  "MTIMEdaytime_isnil;"				  ]
[ "isnil",			  "command",	  "calc",		  "(v:date):bit ",																															  "MTIMEdate_isnil;"				  ]
[ "isnil",			  "command",	  "calc",		  "(v:sqlblob):bit ",																															  "BLOB_isnil;"					  ]
[ "isnil",			  "command",	  "calc",		  "(v:blob):bit ",																															  "BLOB_isnil;"					  ]
[ "isnil",			  "command",	  "calc",		  "(v:void):bit ",																															  "CALCisnil_void;"				  ]
[ "isnil",			  "command",	  "calc",		  "(v:BAT):bit ",																															  "CALCisnil_bat;"				  ]
[ "isnil",			  "command",	  "calc",		  "(v:str):bit ",																															  "CALCisnil_str;"				  ]
[ "isnil",			  "command",	  "calc",		  "(v:dbl):bit ",																															  "CALCisnil_dbl;"				  ]
[ "isnil",			  "command",	  "calc",		  "(v:flt):bit ",																															  "CALCisnil_flt;"				  ]
[ "isnil",			  "command",	  "calc",		  "(v:lng):bit ",																															  "CALCisnil_lng;"				  ]
[ "isnil",			  "command",	  "calc",		  "(v:wrd):bit ",																															  "CALCisnil_wrd;"				  ]
[ "isnil",			  "command",	  "calc",		  "(v:oid):bit ",																															  "CALCisnil_oid;"				  ]
[ "isnil",			  "command",	  "calc",		  "(v:int):bit ",																															  "CALCisnil_int;"				  ]
[ "isnil",			  "command",	  "calc",		  "(v:sht):bit ",																															  "CALCisnil_sht;"				  ]
[ "isnil",			  "command",	  "calc",		  "(v:bte):bit ",																															  "CALCisnil_bte;"				  ]
[ "isnil",			  "command",	  "calc",		  "(v:bit):bit ",																															  "CALCisnil_bit;"				  ]
[ "isnotnil",			  "command",	  "calc",		  "(v:void):bit ",																															  "CALCisnotnil_void;"				  ]
[ "isnotnil",			  "command",	  "calc",		  "(v:BAT):bit ",																															  "CALCisnotnil_bat;"				  ]
[ "isnotnil",			  "command",	  "calc",		  "(v:str):bit ",																															  "CALCisnotnil_str;"				  ]
[ "isnotnil",			  "command",	  "calc",		  "(v:dbl):bit ",																															  "CALCisnotnil_dbl;"				  ]
[ "isnotnil",			  "command",	  "calc",		  "(v:flt):bit ",																															  "CALCisnotnil_flt;"				  ]
[ "isnotnil",			  "command",	  "calc",		  "(v:lng):bit ",																															  "CALCisnotnil_lng;"				  ]
[ "isnotnil",			  "command",	  "calc",		  "(v:wrd):bit ",																															  "CALCisnotnil_wrd;"				  ]
[ "isnotnil",			  "command",	  "calc",		  "(v:oid):bit ",																															  "CALCisnotnil_oid;"				  ]
[ "isnotnil",			  "command",	  "calc",		  "(v:int):bit ",																															  "CALCisnotnil_int;"				  ]
[ "isnotnil",			  "command",	  "calc",		  "(v:sht):bit ",																															  "CALCisnotnil_sht;"				  ]
[ "isnotnil",			  "command",	  "calc",		  "(v:bte):bit ",																															  "CALCisnotnil_bte;"				  ]
[ "isnotnil",			  "command",	  "calc",		  "(v:bit):bit ",																															  "CALCisnotnil_bit;"				  ]
[ "isolation",			  "pattern",	  "scheduler",		  "():void ",																																  "RUNisolation;"				  ]
[ "iterator",			  "pattern",	  "box",		  "(nme:str):lng ",																															  "BOXiterator;"				  ]
[ "iterator",			  "pattern",	  "bbp",		  "(nme:str):lng ",																															  "CMDbbpiterator;"				  ]
[ "join",			  "command",	  "algebra",		  "(l:bat[:any_1,:any_2],rl:bat[:any_3,:any_2],rh:bat[:any_3,:any_2],li:bit,hi:bit):bat[:any_1,:any_3] ",																				  "ALGrangejoin;"				  ]
[ "join",			  "command",	  "algebra",		  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],estimate:lng):bat[:any_1,:any_3] ",																						  "ALGjoinestimate;"				  ]
[ "join",			  "command",	  "algebra",		  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",																								  "ALGjoin;"					  ]
[ "join",			  "command",	  "algebra",		  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",																								  "ALGjoin;"					  ]
[ "joinPath",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTjoinPath;"				  ]
[ "joinPath",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTjoinPath;"				  ]
[ "joinPath",			  "pattern",	  "algebra",		  "(l:bat[:any,:any]...):bat[:any,:any] ",																												  "ALGjoinPath;"				  ]
[ "kdifference",		  "command",	  "algebra",		  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] ",																								  "ALGkdiff;"					  ]
[ "keepquery",			  "function",	  "sql",		  "(qid:int,qry:str,parse:lng,optimize:lng):void;",																											  "nil"						  ]
[ "key",			  "command",	  "cluster",		  "(b:bat[:oid,:any_1]):bat[:oid,:oid] ",																												  "CLUSTER_key;"				  ]
[ "kintersect",			  "command",	  "algebra",		  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] ",																								  "ALGsemijoin;"				  ]
[ "kunion",			  "command",	  "algebra",		  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																								  "ALGkunion;"					  ]
[ "kunique",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "ALGkunique;"					  ]
[ "lastPage",			  "command",	  "tablet",		  "():void ",																																  "TABlastPage;"				  ]
[ "leftfetchjoin",		  "command",	  "algebra",		  "(left:bat[:any_1,:oid],right:bat[:oid,:any_3]):bat[:any_1,:any_3] ",																									  "ALGleftfetchjoin;"				  ]
[ "leftjoin",			  "command",	  "algebra",		  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],estimate:lng):bat[:any_1,:any_3] ",																						  "ALGleftjoinestimate;"			  ]
[ "leftjoin",			  "command",	  "algebra",		  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",																								  "ALGleftjoin;"				  ]
[ "leftjoinPath",		  "pattern",	  "algebra",		  "(l:bat[:any,:any]...):bat[:any,:any] ",																												  "ALGjoinPath;"				  ]
[ "legAdvice",			  "pattern",	  "octopus",		  "(mod:str,fcn:str):int ",																														  "OPTlegAdvice;"				  ]
[ "length",			  "command",	  "batstr",		  "(s:bat[:oid,:str]):bat[:oid,:int] ",																													  "STRbatLength;"				  ]
[ "length",			  "command",	  "str",		  "(s:str):int ",																															  "STRLength;"					  ]
[ "length",			  "command",	  "calc",		  "(x:str):int ",																															  "CALClengthstr;"				  ]
[ "levenshtein",		  "command",	  "txtsim",		  "(s:str,t:str):int ",																															  "levenshteinbasic_impl;"			  ]
[ "levenshtein",		  "command",	  "txtsim",		  "(s:str,t:str,insdel_cost:int,replace_cost:int,transpose_cost:int):int ",																								  "levenshtein_impl;"				  ]
[ "lifespan",			  "pattern",	  "mdb",		  "(M:str,F:str):void ",																														  "MDBlifespan;"				  ]
[ "like",			  "command",	  "batstr",		  "(s:bat[:any_1,:str],pat:str):bat[:any_1,:bit] ",																											  "BATPCRElike2;"				  ]
[ "like",			  "command",	  "batstr",		  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:bit] ",																										  "BATPCRElike;"				  ]
[ "like",			  "command",	  "str",		  "(s:str,pat:str):bit ",																														  "PCRElike2;"					  ]
[ "like",			  "command",	  "str",		  "(s:str,pat:str,esc:str):bit ",																													  "PCRElike3;"					  ]
[ "like",			  "command",	  "str",		  "(s:str,pat:str,esc:str):bit ",																													  "STRlikewrap;"				  ]
[ "like",			  "command",	  "str",		  "(s:str,pat:str):bit ",																														  "STRlikewrap2;"				  ]
[ "like",			  "command",	  "algebra",		  "(b:bat[:any_1,:str],substr:str):bat[:any_1,:str] ",																											  "ALGlike;"					  ]
[ "like_filter",		  "command",	  "pcre",		  "(s:bat[:any_1,:str],pat:bat[:any_2,:str],esc:str):bat[:any_1,:any_2] ",																								  "PCRElike_join_pcre;"				  ]
[ "like_filter",		  "command",	  "pcre",		  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:void] ",																										  "PCRElike_uselect_pcre;"			  ]
[ "like_select",		  "command",	  "pcre",		  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:str] ",																										  "PCRElike_select_pcre;"			  ]
[ "like_uselect",		  "command",	  "pcre",		  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:void] ",																										  "PCRElike_uselect_pcre;"			  ]
[ "like_uselect",		  "command",	  "batstr",		  "(s:bat[:oid,:str],pat:str,esc:str):bat[:oid,:void] ",																										  "STRbatlike_uselect;"				  ]
[ "like_uselect",		  "command",	  "batstr",		  "(s:bat[:oid,:str],pat:str):bat[:oid,:void] ",																											  "STRbatlike_uselect2;"			  ]
[ "linestring",			  "function",	  "calc",		  "(wkt:str):wkb;",																															  "nil"						  ]
[ "list",			  "pattern",	  "mdb",		  "(M:str,F:str):void ",																														  "MDBlist3;"					  ]
[ "list",			  "pattern",	  "mdb",		  "():void ",																																  "MDBlist;"					  ]
[ "listMapi",			  "pattern",	  "mdb",		  "():void ",																																  "MDBlistMapi;"				  ]
[ "listen",			  "command",	  "mapi",		  "(unixsocket:str):int ",																														  "SERVERlisten_usock;"				  ]
[ "listen",			  "command",	  "mapi",		  "(port:int):int ",																															  "SERVERlisten_port;"				  ]
[ "listen",			  "command",	  "mapi",		  "():int ",																																  "SERVERlisten_default;"			  ]
[ "lng",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng],d2:int,s2:int):bat[:oid,:lng] ",																										  "batlng_dec2dec_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "batlng_dec2_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(v:bat[:oid,:lng],digits:int,scale:int):bat[:oid,:lng] ",																										  "batlng_num2dec_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(v:bat[:oid,:lng]):bat[:oid,:lng] ",																													  "batlng_2_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd],d2:int,s2:int):bat[:oid,:lng] ",																										  "batwrd_dec2dec_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd]):bat[:oid,:lng] ",																												  "batwrd_dec2_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(v:bat[:oid,:wrd],digits:int,scale:int):bat[:oid,:lng] ",																										  "batwrd_num2dec_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(v:bat[:oid,:wrd]):bat[:oid,:lng] ",																													  "batwrd_2_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int],d2:int,s2:int):bat[:oid,:lng] ",																										  "batint_dec2dec_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int]):bat[:oid,:lng] ",																												  "batint_dec2_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(v:bat[:oid,:int],digits:int,scale:int):bat[:oid,:lng] ",																										  "batint_num2dec_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(v:bat[:oid,:int]):bat[:oid,:lng] ",																													  "batint_2_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht],d2:int,s2:int):bat[:oid,:lng] ",																										  "batsht_dec2dec_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht]):bat[:oid,:lng] ",																												  "batsht_dec2_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(v:bat[:oid,:sht],digits:int,scale:int):bat[:oid,:lng] ",																										  "batsht_num2dec_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(v:bat[:oid,:sht]):bat[:oid,:lng] ",																													  "batsht_2_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte],d2:int,s2:int):bat[:oid,:lng] ",																										  "batbte_dec2dec_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte]):bat[:oid,:lng] ",																												  "batbte_dec2_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(v:bat[:oid,:bte],digits:int,scale:int):bat[:oid,:lng] ",																										  "batbte_num2dec_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(v:bat[:oid,:bte]):bat[:oid,:lng] ",																													  "batbte_2_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(v:bat[:oid,:dbl],digits:int,scale:int):bat[:oid,:lng] ",																										  "batdbl_num2dec_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(v:bat[:oid,:dbl]):bat[:oid,:lng] ",																													  "batdbl_2_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(v:bat[:oid,:flt],digits:int,scale:int):bat[:oid,:lng] ",																										  "batflt_num2dec_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(v:bat[:oid,:flt]):bat[:oid,:lng] ",																													  "batflt_2_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(v:bat[:oid,:str],digits:int,scale:int):bat[:oid,:lng] ",																										  "batstr_2dec_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(v:bat[:oid,:str],digits:int):bat[:oid,:lng] ",																											  "batstr_2num_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(v:bat[:oid,:str]):bat[:oid,:lng] ",																													  "batstr_2_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(b:bat[:any_1,:bit]):bat[:any_1,:lng] ",																												  "CMDconvert_bit_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl]):bat[:any_1,:lng] ",																												  "CMDconvert_dbl_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(b:bat[:any_1,:flt]):bat[:any_1,:lng] ",																												  "CMDconvert_flt_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(b:bat[:any_1,:oid]):bat[:any_1,:lng] ",																												  "CMDconvert_oid_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd]):bat[:any_1,:lng] ",																												  "CMDconvert_wrd_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(b:bat[:any_1,:int]):bat[:any_1,:lng] ",																												  "CMDconvert_int_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(b:bat[:any_1,:sht]):bat[:any_1,:lng] ",																												  "CMDconvert_sht_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(b:bat[:any_1,:bte]):bat[:any_1,:lng] ",																												  "CMDconvert_bte_lng;"				  ]
[ "lng",			  "command",	  "batcalc",		  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] ",																												  "CMDconvert_lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(s1:int,v:lng,d2:int,s2:int):lng ",																													  "lng_dec2dec_lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(s1:int,v:lng):lng ",																														  "lng_dec2_lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(v:lng,digits:int,scale:int):lng ",																													  "lng_num2dec_lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(v:lng):lng ",																															  "lng_2_lng;"					  ]
[ "lng",			  "command",	  "calc",		  "(s1:int,v:wrd,d2:int,s2:int):lng ",																													  "wrd_dec2dec_lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(s1:int,v:wrd):lng ",																														  "wrd_dec2_lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(v:wrd,digits:int,scale:int):lng ",																													  "wrd_num2dec_lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(v:wrd):lng ",																															  "wrd_2_lng;"					  ]
[ "lng",			  "command",	  "calc",		  "(s1:int,v:int,d2:int,s2:int):lng ",																													  "int_dec2dec_lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(s1:int,v:int):lng ",																														  "int_dec2_lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(v:int,digits:int,scale:int):lng ",																													  "int_num2dec_lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(v:int):lng ",																															  "int_2_lng;"					  ]
[ "lng",			  "command",	  "calc",		  "(s1:int,v:sht,d2:int,s2:int):lng ",																													  "sht_dec2dec_lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(s1:int,v:sht):lng ",																														  "sht_dec2_lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(v:sht,digits:int,scale:int):lng ",																													  "sht_num2dec_lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(v:sht):lng ",																															  "sht_2_lng;"					  ]
[ "lng",			  "command",	  "calc",		  "(s1:int,v:bte,d2:int,s2:int):lng ",																													  "bte_dec2dec_lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(s1:int,v:bte):lng ",																														  "bte_dec2_lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(v:bte,digits:int,scale:int):lng ",																													  "bte_num2dec_lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(v:bte):lng ",																															  "bte_2_lng;"					  ]
[ "lng",			  "command",	  "calc",		  "(v:dbl,digits:int,scale:int):lng ",																													  "dbl_num2dec_lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(v:dbl):lng ",																															  "dbl_2_lng;"					  ]
[ "lng",			  "command",	  "calc",		  "(v:flt,digits:int,scale:int):lng ",																													  "flt_num2dec_lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(v:flt):lng ",																															  "flt_2_lng;"					  ]
[ "lng",			  "command",	  "calc",		  "(v:str,digits:int,scale:int):lng ",																													  "str_2dec_lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(v:str,digits:int):lng ",																														  "str_2num_lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(v:str):lng ",																															  "str_2_lng;"					  ]
[ "lng",			  "command",	  "calc",		  "(v:void):lng ",																															  "CALCnil2lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(v:str):lng ",																															  "CALCstr2lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(x:dbl):lng ",																															  "CALCdbl2lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(x:flt):lng ",																															  "CALCflt2lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(x:lng):lng ",																															  "CALClng2lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(x:wrd):lng ",																															  "CALCwrd2lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(x:int):lng ",																															  "CALCint2lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(x:sht):lng ",																															  "CALCsht2lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(x:bte):lng ",																															  "CALCbte2lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(x:bit):lng ",																															  "CALCbit2lng;"				  ]
[ "lng",			  "command",	  "calc",		  "(x:oid):lng ",																															  "CALCoid2lng;"				  ]
[ "load",			  "command",	  "tablet",		  "(names:bat[:oid,:str],seps:bat[:oid,:str],types:bat[:oid,:str],datafile:str,nr:int):bat[:str,:BAT] ",																				  "CMDtablet_load;"				  ]
[ "load",			  "command",	  "bat",	  "(name:str):bat[:any_1,:any_2] ",													  "BKCload;"						  ]
[ "local",			  "command",	  "srvpool",		  "(b:bit):void ",																															  "SRVPOOLlocal;"				  ]
[ "local_timezone",		  "command",	  "mtime",		  "():lng ",																																  "MTIMElocal_timezone;"			  ]
[ "locate",			  "pattern",	  "tokenizer",		  "(s:str):oid ",																															  "TKNZRlocate;"				  ]
[ "locate",			  "command",	  "str",		  "(s1:str,s2:str,start:int):int ",																													  "STRlocate2;"					  ]
[ "locate",			  "command",	  "str",		  "(s1:str,s2:str):int ",																														  "STRlocate;"					  ]
[ "location",			  "command",	  "attach",		  "(b:bat[:any_1,:any_2]):str ",																													  "ATTlocation;"				  ]
[ "log",			  "command",	  "recycle",		  "(nm:str):void ",																															  "RECYCLElog;"					  ]
[ "log",			  "command",	  "batmmath",		  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",																													  "CMDscience_bat_flt_log;"			  ]
[ "log",			  "command",	  "batmmath",		  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",																													  "CMDscience_bat_dbl_log;"			  ]
[ "log",			  "command",	  "mmath",		  "(x:dbl):dbl ",																															  "MATHunary_LOGdbl;"				  ]
[ "log",			  "command",	  "mmath",		  "(x:flt):flt ",																															  "MATHunary_LOGflt;"				  ]
[ "log10",			  "command",	  "batmmath",		  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",																													  "CMDscience_bat_flt_log10;"			  ]
[ "log10",			  "command",	  "batmmath",		  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",																													  "CMDscience_bat_dbl_log10;"			  ]
[ "log10",			  "command",	  "mmath",		  "(x:dbl):dbl ",																															  "MATHunary_LOG10dbl;"				  ]
[ "log10",			  "command",	  "mmath",		  "(x:flt):flt ",																															  "MATHunary_LOG10flt;"				  ]
[ "logfile",			  "pattern",	  "sql",		  "(filename:str):void ",																														  "mvc_logfile;"				  ]
[ "lookup",			  "command",	  "mapi",		  "(dbalias:str):int ",																															  "SERVERlookup;"				  ]
[ "ltrim",			  "command",	  "batstr",		  "(s:bat[:oid,:str]):bat[:oid,:str] ",																													  "STRbatLtrim;"				  ]
[ "ltrim",			  "command",	  "str",		  "(s:str):str ",																															  "STRLtrim;"					  ]
[ "luminance",			  "command",	  "batcolor",		  "(c:bat[:oid,:color]):bat[:oid,:int] ",																												  "CLRbatLuminance;"				  ]
[ "luminance",			  "command",	  "color",		  "(c:color):int ",																															  "CLRluminance;"				  ]
[ "macro",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str,targetmod:str,targetfcn:str):void ",																										  "OPTmacro;"					  ]
[ "macro",			  "pattern",	  "optimizer",		  "(targetmod:str,targetfcn:str):void ",																												  "OPTmacro;"					  ]
[ "main",			  "function",	  "user",		  "():void;",																																  "nil"						  ]
[ "makeBid",			  "pattern",	  "trader",		  "(fnname:str,bidtype:sht):lng ",																													  "TRADERmakeBid;"				  ]
[ "makeBids",			  "pattern",	  "trader",		  "(bidtype:sht,fnname1:str...):lng... ",																												  "TRADERmakeBids;"				  ]
[ "makeSchedule",		  "pattern",	  "scheduler",		  "(X_1:int,X_2:lng...):str... ",																													  "OCTOPUSmakeSchedule;"			  ]
[ "malclient",			  "command",	  "mapi",		  "(in:streams,out:streams):void ",																													  "SERVERclient;"				  ]
[ "map",			  "command",	  "cluster",		  "(psum:bat[:oid,:wrd],cluster:bat[:oid,:bte],b:bat[:oid,:any_1]):bat[:oid,:any_1] ",																							  "CLS_map2;"					  ]
[ "map",			  "command",	  "cluster",		  "(cluster:bat[:oid,:wrd],b:bat[:oid,:any_1]):bat[:oid,:any_1] ",																									  "CLS_map;"					  ]
[ "map",			  "command",	  "cluster",		  "(b:bat[:oid,:oid]):bat[:oid,:oid] ",																													  "CLUSTER_map;"				  ]
[ "mapreduce",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTmapreduce;"				  ]
[ "mapreduce",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTmapreduce;"				  ]
[ "marchConnection",		  "command",	  "sabaoth",		  "(host:str,port:int):void ",																														  "SABmarchConnection;"				  ]
[ "marchScenario",		  "command",	  "sabaoth",		  "(lang:str):void ",																															  "SABmarchScenario;"				  ]
[ "markH",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],nr_parts:int,part_nr:int):bat[:any_1,:oid] ",																									  "ALGhmarkp;"					  ]
[ "markH",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],base:oid):bat[:oid,:any_2] ",																											  "ALGmarkHead;"				  ]
[ "markH",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2]):bat[:oid,:any_2] ",																												  "ALGmarkHead_default;"			  ]
[ "markT",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],nr_parts:int,part_nr:int):bat[:any_1,:oid] ",																									  "ALGtmarkp;"					  ]
[ "markT",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:oid] ",																												  "ALGtmark_default;"				  ]
[ "markT",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],base:oid):bat[:any_1,:oid] ",																											  "ALGtmark;"					  ]
[ "mark_grp",			  "function",	  "batcalc",		  "(b:bat[:oid,:any_1]):bat[:oid,:int];",																												  "nil"						  ]
[ "mark_grp",			  "function",	  "batcalc",		  "(b:bat[:oid,:any_1],a:bat[:any_2,:any_3],g:bat[:oid,:oid]):bat[:oid,:int];",																								  "nil"						  ]
[ "mark_grp",			  "command",	  "algebra",		  "(b:bat[:any_1,:oid],g:bat[:oid,:any_2],s:oid):bat[:any_1,:oid] ",																									  "ALGmark_grp_2;"				  ]
[ "mark_grp",			  "command",	  "algebra",		  "(b:bat[:any_1,:oid],g:bat[:oid,:oid]):bat[:any_1,:oid] ",																										  "ALGmark_grp_1;"				  ]
[ "masklen",			  "command",	  "inet",		  "(X_1:inet):int ",																															  "INETmasklen;"				  ]
[ "match",			  "command",	  "pcre",		  "(s:str,pat:str):bit ",																														  "PCREmatch;"					  ]
[ "match",			  "command",	  "pcre",		  "(pat:pcre,s:str):bit ",																														  "PCREexec_wrap;"				  ]
[ "materialize",		  "command",	  "centipede",		  "(b:bat[:any_1,:any_2],low:any_2,high:any_2):bat[:any_1,:any_2] ",																									  "OPTcentipedeMaterialize;"			  ]
[ "materialize",		  "command",	  "algebra",		  "(b:bat[:oid,:any_1]):bat[:oid,:any_1] ",																												  "ALGmaterialize;"				  ]
[ "max",			  "command",	  "group",		  "(b:bat[:any_2,:any_1],e:bat[:any_2,:any_3]):bat[:any_2,:any_1] ",																									  "GRPmax;"					  ]
[ "max",			  "command",	  "calc",		  "(v:timestamp,w:timestamp):timestamp ",																												  "MTIMEtimestamp_max;"				  ]
[ "max",			  "command",	  "calc",		  "(v:daytime,w:daytime):daytime ",																													  "MTIMEdaytime_max;"				  ]
[ "max",			  "command",	  "calc",		  "(v:date,w:date):date ",																														  "MTIMEdate_max;"				  ]
[ "max",			  "command",	  "calc",		  "(s:str,t:str):str ",																															  "STRmax;"					  ]
[ "max",			  "command",	  "calc",		  "(l:dbl,r:dbl):dbl ",																															  "CALCbinaryMAXdbl;"				  ]
[ "max",			  "command",	  "calc",		  "(l:lng,r:lng):lng ",																															  "CALCbinaryMAXlng;"				  ]
[ "max",			  "command",	  "calc",		  "(l:flt,r:flt):flt ",																															  "CALCbinaryMAXflt;"				  ]
[ "max",			  "command",	  "calc",		  "(l:oid,r:oid):oid ",																															  "CALCbinaryMAXoid;"				  ]
[ "max",			  "command",	  "calc",		  "(l:wrd,r:wrd):wrd ",																															  "CALCbinaryMAXwrd;"				  ]
[ "max",			  "command",	  "calc",		  "(l:int,r:int):int ",																															  "CALCbinaryMAXint;"				  ]
[ "max",			  "command",	  "calc",		  "(l:sht,r:sht):sht ",																															  "CALCbinaryMAXsht;"				  ]
[ "max",			  "command",	  "calc",		  "(l:bte,r:bte):bte ",																															  "CALCbinaryMAXbte;"				  ]
[ "max",			  "command",	  "calc",		  "(l:bit,r:bit):bit ",																															  "CALCbinaryMAXbit;"				  ]
[ "max",			  "command",	  "aggr",		  "(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:any_1] ",																								  "AX3aggrX3_max3;"				  ]
[ "max",			  "command",	  "aggr",		  "(b:bat[:oid,:any_1],e:bat[:oid,:any_2]):bat[:oid,:any_1] ",																										  "AX3aggrX3_max;"				  ]
[ "max",			  "command",	  "aggr",		  "(b:bat[:any_1,:lng]):lng ",																														  "ALGmax_lng;"					  ]
[ "max",			  "command",	  "aggr",		  "(b:bat[:any_1,:dbl]):dbl ",																														  "ALGmax_dbl;"					  ]
[ "max",			  "command",	  "aggr",		  "(b:bat[:any_1,:flt]):flt ",																														  "ALGmax_flt;"					  ]
[ "max",			  "command",	  "aggr",		  "(b:bat[:any_1,:wrd]):wrd ",																														  "ALGmax_wrd;"					  ]
[ "max",			  "command",	  "aggr",		  "(b:bat[:any_1,:int]):int ",																														  "ALGmax_int;"					  ]
[ "max",			  "command",	  "aggr",		  "(b:bat[:any_1,:sht]):sht ",																														  "ALGmax_sht;"					  ]
[ "max",			  "command",	  "aggr",		  "(b:bat[:any_1,:bte]):bte ",																														  "ALGmax_bte;"					  ]
[ "max",			  "command",	  "aggr",		  "(b:bat[:any_1,:any_2]):any_2 ",																													  "ALGmaxany;"					  ]
[ "max_no_nil",			  "command",	  "calc",		  "(v:timestamp,w:timestamp):timestamp ",																												  "MTIMEtimestamp_max_no_nil;"			  ]
[ "max_no_nil",			  "command",	  "calc",		  "(v:daytime,w:daytime):daytime ",																													  "MTIMEdaytime_max_no_nil;"			  ]
[ "max_no_nil",			  "command",	  "calc",		  "(v:date,w:date):date ",																														  "MTIMEdate_max_no_nil;"			  ]
[ "max_no_nil",			  "command",	  "calc",		  "(s:str,t:str):str ",																															  "STRmax_no_nil;"				  ]
[ "max_no_nil",			  "command",	  "calc",		  "(l:dbl,r:dbl):dbl ",																															  "CALCbinaryMAX_NO_NILdbl;"			  ]
[ "max_no_nil",			  "command",	  "calc",		  "(l:lng,r:lng):lng ",																															  "CALCbinaryMAX_NO_NILlng;"			  ]
[ "max_no_nil",			  "command",	  "calc",		  "(l:flt,r:flt):flt ",																															  "CALCbinaryMAX_NO_NILflt;"			  ]
[ "max_no_nil",			  "command",	  "calc",		  "(l:oid,r:oid):oid ",																															  "CALCbinaryMAX_NO_NILoid;"			  ]
[ "max_no_nil",			  "command",	  "calc",		  "(l:wrd,r:wrd):wrd ",																															  "CALCbinaryMAX_NO_NILwrd;"			  ]
[ "max_no_nil",			  "command",	  "calc",		  "(l:int,r:int):int ",																															  "CALCbinaryMAX_NO_NILint;"			  ]
[ "max_no_nil",			  "command",	  "calc",		  "(l:sht,r:sht):sht ",																															  "CALCbinaryMAX_NO_NILsht;"			  ]
[ "max_no_nil",			  "command",	  "calc",		  "(l:bte,r:bte):bte ",																															  "CALCbinaryMAX_NO_NILbte;"			  ]
[ "max_no_nil",			  "command",	  "calc",		  "(l:bit,r:bit):bit ",																															  "CALCbinaryMAX_NO_NILbit;"			  ]
[ "mbr",			  "command",	  "geom",		  "(X_1:wkb):mbr ",																															  "wkbMBR;"					  ]
[ "mbr",			  "command",	  "geom",		  "(X_1:flt,X_2:flt,X_3:flt,X_4:flt):mbr ",																												  "ordinatesMBR;"				  ]
[ "mbr",			  "command",	  "mbr",		  "(v:str):mbr ",																															  "mbrFromString;"				  ]
[ "mbr",			  "command",	  "calc",		  "(v:mbr):mbr ",																															  "mbrFromMBR;"					  ]
[ "mbr",			  "command",	  "calc",		  "(v:str):mbr ",																															  "mbrFromString;"				  ]
[ "mbroverlaps",		  "command",	  "geom",		  "(a:mbr,b:mbr):bit ",																															  "mbroverlaps;"				  ]
[ "md5sum",			  "command",	  "clients",		  "(pw:str):str ",																															  "CLTmd5sum;"					  ]
[ "median",			  "function",	  "aggr",		  "(a:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:any_1];",																								  "nil"						  ]
[ "median",			  "function",	  "aggr",		  "(a:bat[:oid,:any_1]):any_1;",																													  "nil"						  ]
[ "memStatistics",		  "command",	  "status",		  "():bat[:str,:wrd] ",																															  "SYSmemStatistics;"				  ]
[ "memUsage",			  "command",	  "status",		  "(minsize:lng):bat[:str,:lng] ",																													  "SYSmem_usage;"				  ]
[ "mem_cursize",		  "command",	  "status",		  "():lng ",																																  "SYSgetmem_cursize;"				  ]
[ "mem_maxsize",		  "command",	  "status",		  "(v:lng):void ",																															  "SYSsetmem_maxsize;"				  ]
[ "mem_maxsize",		  "command",	  "status",		  "():lng ",																																  "SYSgetmem_maxsize;"				  ]
[ "merge",			  "command",	  "algebra",		  "(b:bat[:oid,:oid]):bat[:lng,:oid] ",																													  "ALGmerge;"					  ]
[ "mergejoin",			  "command",	  "algebra",		  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",																								  "ALGmergejoin;"				  ]
[ "mergetable",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTmergetable;"				  ]
[ "mergetable",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTmergetable;"				  ]
[ "middle",			  "command",	  "sql",		  "(val:bat[:oid,:oid],hist:bat[:oid,:wrd]):bat[:oid,:oid] ",																										  "SQLmiddle;"					  ]
[ "milliseconds",		  "command",	  "mtime",		  "(t:timestamp):int ",																															  "MTIMEtimestamp_milliseconds;"		  ]
[ "milliseconds",		  "command",	  "mtime",		  "(d:daytime):int ",																															  "MTIMEdaytime_extract_milliseconds;"		  ]
[ "milliseconds",		  "command",	  "batmtime",		  "(d:bat[:any_1,:daytime]):bat[:any_1,:int] ",																												  "MTIMEdaytime_extract_milliseconds_bulk;"	  ]
[ "min",			  "command",	  "group",		  "(b:bat[:any_2,:any_1],e:bat[:any_2,:any_3]):bat[:any_2,:any_1] ",																									  "GRPmin;"					  ]
[ "min",			  "command",	  "calc",		  "(v:timestamp,w:timestamp):timestamp ",																												  "MTIMEtimestamp_min;"				  ]
[ "min",			  "command",	  "calc",		  "(v:daytime,w:daytime):daytime ",																													  "MTIMEdaytime_min;"				  ]
[ "min",			  "command",	  "calc",		  "(v:date,w:date):date ",																														  "MTIMEdate_min;"				  ]
[ "min",			  "command",	  "calc",		  "(s:str,t:str):str ",																															  "STRmin;"					  ]
[ "min",			  "command",	  "calc",		  "(l:dbl,r:dbl):dbl ",																															  "CALCbinaryMINdbl;"				  ]
[ "min",			  "command",	  "calc",		  "(l:lng,r:lng):lng ",																															  "CALCbinaryMINlng;"				  ]
[ "min",			  "command",	  "calc",		  "(l:flt,r:flt):flt ",																															  "CALCbinaryMINflt;"				  ]
[ "min",			  "command",	  "calc",		  "(l:oid,r:oid):oid ",																															  "CALCbinaryMINoid;"				  ]
[ "min",			  "command",	  "calc",		  "(l:wrd,r:wrd):wrd ",																															  "CALCbinaryMINwrd;"				  ]
[ "min",			  "command",	  "calc",		  "(l:int,r:int):int ",																															  "CALCbinaryMINint;"				  ]
[ "min",			  "command",	  "calc",		  "(l:sht,r:sht):sht ",																															  "CALCbinaryMINsht;"				  ]
[ "min",			  "command",	  "calc",		  "(l:bte,r:bte):bte ",																															  "CALCbinaryMINbte;"				  ]
[ "min",			  "command",	  "calc",		  "(l:bit,r:bit):bit ",																															  "CALCbinaryMINbit;"				  ]
[ "min",			  "command",	  "aggr",		  "(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:any_1] ",																								  "AX3aggrX3_min3;"				  ]
[ "min",			  "command",	  "aggr",		  "(b:bat[:oid,:any_1],e:bat[:oid,:any_2]):bat[:oid,:any_1] ",																										  "AX3aggrX3_min;"				  ]
[ "min",			  "command",	  "aggr",		  "(b:bat[:any_1,:lng]):lng ",																														  "ALGmin_lng;"					  ]
[ "min",			  "command",	  "aggr",		  "(b:bat[:any_1,:dbl]):dbl ",																														  "ALGmin_dbl;"					  ]
[ "min",			  "command",	  "aggr",		  "(b:bat[:any_1,:flt]):flt ",																														  "ALGmin_flt;"					  ]
[ "min",			  "command",	  "aggr",		  "(b:bat[:any_1,:wrd]):wrd ",																														  "ALGmin_wrd;"					  ]
[ "min",			  "command",	  "aggr",		  "(b:bat[:any_1,:int]):int ",																														  "ALGmin_int;"					  ]
[ "min",			  "command",	  "aggr",		  "(b:bat[:any_1,:sht]):sht ",																														  "ALGmin_sht;"					  ]
[ "min",			  "command",	  "aggr",		  "(b:bat[:any_1,:bte]):bte ",																														  "ALGmin_bte;"					  ]
[ "min",			  "command",	  "aggr",		  "(b:bat[:any_1,:any_2]):any_2 ",																													  "ALGminany;"					  ]
[ "min_no_nil",			  "command",	  "calc",		  "(v:timestamp,w:timestamp):timestamp ",																												  "MTIMEtimestamp_min_no_nil;"			  ]
[ "min_no_nil",			  "command",	  "calc",		  "(v:daytime,w:daytime):daytime ",																													  "MTIMEdaytime_min_no_nil;"			  ]
[ "min_no_nil",			  "command",	  "calc",		  "(v:date,w:date):date ",																														  "MTIMEdate_min_no_nil;"			  ]
[ "min_no_nil",			  "command",	  "calc",		  "(s:str,t:str):str ",																															  "STRmin_no_nil;"				  ]
[ "min_no_nil",			  "command",	  "calc",		  "(ll:dbl,r:dbl):dbl ",																														  "CALCbinaryMIN_NO_NILdbl;"			  ]
[ "min_no_nil",			  "command",	  "calc",		  "(ll:lng,r:lng):lng ",																														  "CALCbinaryMIN_NO_NILlng;"			  ]
[ "min_no_nil",			  "command",	  "calc",		  "(ll:flt,r:flt):flt ",																														  "CALCbinaryMIN_NO_NILflt;"			  ]
[ "min_no_nil",			  "command",	  "calc",		  "(ll:oid,r:oid):oid ",																														  "CALCbinaryMIN_NO_NILoid;"			  ]
[ "min_no_nil",			  "command",	  "calc",		  "(ll:wrd,r:wrd):wrd ",																														  "CALCbinaryMIN_NO_NILwrd;"			  ]
[ "min_no_nil",			  "command",	  "calc",		  "(ll:int,r:int):int ",																														  "CALCbinaryMIN_NO_NILint;"			  ]
[ "min_no_nil",			  "command",	  "calc",		  "(ll:sht,r:sht):sht ",																														  "CALCbinaryMIN_NO_NILsht;"			  ]
[ "min_no_nil",			  "command",	  "calc",		  "(ll:bte,r:bte):bte ",																														  "CALCbinaryMIN_NO_NILbte;"			  ]
[ "min_no_nil",			  "command",	  "calc",		  "(ll:bit,r:bit):bit ",																														  "CALCbinaryMIN_NO_NILbit;"			  ]
[ "minutes",			  "command",	  "mtime",		  "(msecs:lng):int ",																															  "MTIMEsql_minutes;"				  ]
[ "minutes",			  "command",	  "mtime",		  "(t:timestamp):int ",																															  "MTIMEtimestamp_minutes;"			  ]
[ "minutes",			  "command",	  "mtime",		  "(t:zrule):int ",																															  "MTIMErule_extract_minutes;"			  ]
[ "minutes",			  "command",	  "mtime",		  "(t:timezone):int ",																															  "MTIMEtzone_extract_minutes;"			  ]
[ "minutes",			  "command",	  "mtime",		  "(d:bat[:any_1,:daytime]):bat[:any_1,:int] ",																												  "MTIMEdaytime_extract_minutes_bulk;"		  ]
[ "minutes",			  "command",	  "mtime",		  "(d:daytime):int ",																															  "MTIMEdaytime_extract_minutes;"		  ]
[ "mirror",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_1] ",												  "BKCmirror;"						  ]
[ "mitosis",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTmitosis;"					  ]
[ "mitosis",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTmitosis;"					  ]
[ "modules",			  "command",	  "mdb",		  "():bat[:int,:str] ",																															  "CMDmodules;"					  ]
[ "monitor",			  "command",	  "recycle",		  "(f:int):void ",																															  "RECYCLEmonitor;"				  ]
[ "month",			  "command",	  "mtime",		  "(months:int):int ",																															  "MTIMEsql_month;"				  ]
[ "month",			  "command",	  "mtime",		  "(t:timestamp):int ",																															  "MTIMEtimestamp_month;"			  ]
[ "month",			  "command",	  "mtime",		  "(t:zrule):int ",																															  "MTIMErule_extract_month;"			  ]
[ "month",			  "command",	  "mtime",		  "(d:date):int ",																															  "MTIMEdate_extract_month;"			  ]
[ "month",			  "command",	  "batmtime",		  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",																												  "MTIMEdate_extract_month_bulk;"		  ]
[ "month_interval",		  "command",	  "calc",		  "(v:lng,ek:int,sk:int):int ",																														  "month_interval_lng;"				  ]
[ "month_interval",		  "command",	  "calc",		  "(v:wrd,ek:int,sk:int):int ",																														  "month_interval_wrd;"				  ]
[ "month_interval",		  "command",	  "calc",		  "(v:int,ek:int,sk:int):int ",																														  "month_interval_int;"				  ]
[ "month_interval",		  "command",	  "calc",		  "(v:sht,ek:int,sk:int):int ",																														  "month_interval_sht;"				  ]
[ "month_interval",		  "command",	  "calc",		  "(v:bte,ek:int,sk:int):int ",																														  "month_interval_bte;"				  ]
[ "month_interval",		  "command",	  "calc",		  "(v:str,ek:int,sk:int):int ",																														  "month_interval_str;"				  ]
[ "monthname",			  "command",	  "mtime",		  "(month:int):str ",																															  "MTIMEmonth_to_str;"				  ]
[ "monthnum",			  "command",	  "mtime",		  "(month:str):int ",																															  "MTIMEmonth_from_str;"			  ]
[ "ms_trunc",			  "command",	  "sql",		  "(v:dbl,r:int):dbl ",																															  "dbl_trunc_wrap;"				  ]
[ "ms_trunc",			  "command",	  "sql",		  "(v:flt,r:int):flt ",																															  "flt_trunc_wrap;"				  ]
[ "msec",			  "command",	  "mtime",		  "():lng ",																																  "MTIMEmsec;"					  ]
[ "msecs",			  "command",	  "mtime",		  "(d:int,h:int,m:int,s:int,ms:int):lng ",																												  "MTIMEmsecs;"					  ]
[ "multicurve",			  "function",	  "calc",		  "(wkt:str):wkb;",																															  "nil"						  ]
[ "multilinestring",		  "function",	  "calc",		  "(wkt:str):wkb;",																															  "nil"						  ]
[ "multiplex",			  "pattern",	  "mal",		  "(a:any...):any ",																															  "OPTremapMultiplex;"				  ]
[ "multiplex",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):void ",																														  "OPTmultiplex;"				  ]
[ "multiplex",			  "pattern",	  "optimizer",		  "():void ",																																  "OPTmultiplex;"				  ]
[ "multipoint",			  "function",	  "calc",		  "(wkt:str):wkb;",																															  "nil"						  ]
[ "multipolygon",		  "function",	  "calc",		  "(wkt:str):wkb;",																															  "nil"						  ]
[ "multisurface",		  "function",	  "calc",		  "(wkt:str):wkb;",																															  "nil"						  ]
[ "mvc",			  "pattern",	  "sql",		  "():int ",																																  "SQLmvc;"					  ]
[ "nbytes",			  "command",	  "batstr",		  "(s:bat[:oid,:str]):bat[:oid,:int] ",																													  "STRbatBytes;"				  ]
[ "nbytes",			  "command",	  "str",		  "(s:str):int ",																															  "STRBytes;"					  ]
[ "netmask",			  "command",	  "inet",		  "(X_1:inet):inet ",																															  "INETnetmask;"				  ]
[ "network",			  "command",	  "inet",		  "(X_1:inet):inet ",																															  "INETnetwork;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:dbl],bits:int,offset:int,order:bit) (psum:bat[:oid,:wrd],map:bat[:oid,:bte]) ",																						  "CLS_create2_dbl;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:dbl],bits:int,offset:int) (psum:bat[:oid,:wrd],map:bat[:oid,:wrd]) ",																							  "CLS_create_dbl;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:flt],bits:int,offset:int,order:bit) (psum:bat[:oid,:wrd],map:bat[:oid,:bte]) ",																						  "CLS_create2_flt;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:flt],bits:int,offset:int) (psum:bat[:oid,:wrd],map:bat[:oid,:wrd]) ",																							  "CLS_create_flt;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:lng],bits:int,offset:int,order:bit) (psum:bat[:oid,:wrd],map:bat[:oid,:bte]) ",																						  "CLS_create2_lng;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:lng],bits:int,offset:int) (psum:bat[:oid,:wrd],map:bat[:oid,:wrd]) ",																							  "CLS_create_lng;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:wrd],bits:int,offset:int,order:bit) (psum:bat[:oid,:wrd],map:bat[:oid,:bte]) ",																						  "CLS_create2_wrd;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:wrd],bits:int,offset:int) (psum:bat[:oid,:wrd],map:bat[:oid,:wrd]) ",																							  "CLS_create_wrd;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:int],bits:int,offset:int,order:bit) (psum:bat[:oid,:wrd],map:bat[:oid,:bte]) ",																						  "CLS_create2_int;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:int],bits:int,offset:int) (psum:bat[:oid,:wrd],map:bat[:oid,:wrd]) ",																							  "CLS_create_int;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:sht],bits:int,offset:int,order:bit) (psum:bat[:oid,:wrd],map:bat[:oid,:bte]) ",																						  "CLS_create2_sht;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:sht],bits:int,offset:int) (psum:bat[:oid,:wrd],map:bat[:oid,:wrd]) ",																							  "CLS_create_sht;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:bte],bits:int,offset:int,order:bit) (psum:bat[:oid,:wrd],map:bat[:oid,:bte]) ",																						  "CLS_create2_bte;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:bte],bits:int,offset:int) (psum:bat[:oid,:wrd],map:bat[:oid,:wrd]) ",																							  "CLS_create_bte;"				  ]
[ "new",			  "pattern",	  "mat",		  "(b:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",																											  "MATpack;"					  ]
[ "new",			  "command",	  "inet",		  "(s:str):inet ",																															  "INETnew;"					  ]
[ "new",			  "command",	  "url",		  "(prot:str,host:str,fnme:str):url ",																													  "URLnew3;"					  ]
[ "new",			  "command",	  "url",		  "(p:str,h:str,prt:int,f:str):url ",																													  "URLnew4;"					  ]
[ "new",			  "command",	  "group",		  "(attr:bat[:any_1,:any_2],N:int,rng:int) (histo:bat[:any_1,:wrd],grp:bat[:any_1,:oid]) ",																						  "GRPgroup_custom;"				  ]
[ "new",			  "command",	  "group",		  "(attr:bat[:any_1,:any_2]) (histo:bat[:any_1,:wrd],grp:bat[:any_1,:oid]) ",																								  "GRPgroup;"					  ]
[ "new",			  "command",	  "group",		  "(attr:bat[:any_1,:any_2]) (histo:bat[:any_1,:wrd],grp:bat[:any_1,:void]) ",																								  "GRPgroup;"					  ]
[ "new",			  "command",	  "group",		  "(b:bat[:any_1,:any_2],start:int,incr:int,grpsize:int):bat[:any_1,:int] ",																								  "GRPgroup0;"					  ]
[ "new",			  "command",	  "bat",	  "(nme:str):bat[:any_1,:any_2] ",													  "CMDBATderivedByName;"				  ]
[ "new",			  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2],size:lng):bat[:any_1,:any_2] ",										  "CMDBATnewDerived;"					  ]
[ "new",			  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "CMDBATnewDerived;"					  ]
[ "new",			  "pattern",	  "bat",	  "(ht:oid,tt:any_2,size:lng):bat[:oid,:any_2] ",											  "CMDBATnew;"						  ]
[ "new",			  "pattern",	  "bat",	  "(ht:oid,tt:any_2,size:int):bat[:oid,:any_2] ",											  "CMDBATnewint;"					  ]
[ "new",			  "pattern",	  "bat",	  "(ht:any_1,tt:any_2,size:lng):bat[:any_1,:any_2] ",											  "CMDBATnew;"						  ]
[ "new",			  "pattern",	  "bat",	  "(ht:any_1,tt:any_2,size:int):bat[:any_1,:any_2] ",											  "CMDBATnewint;"					  ]
[ "new",			  "pattern",	  "bat",	  "(ht:any_1,tt:bat[:any_2,:any_3]):bat[:any_1,:BAT] ",								  "CMDBATnew;"					  ]
[ "new",			  "pattern",	  "bat",	  "(ht:any_1,tt:any_2):bat[:any_1,:any_2] ",												  "CMDBATnew;"						  ]
[ "new",			  "pattern",	  "bat",	  "(ht:any_1,tt:any_2,b:bat[:any_3,:any_4]):bat[:any_1,:any_2] ",									  "CMDBATclone;"					  ]
[ "newIterator",		  "pattern",	  "statistics",		  "() (X_1:lng,X_2:str) ",																														  "STATnewIterator;"				  ]
[ "newIterator",		  "pattern",	  "mat",		  "(grp:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",																											  "MATnewIterator;"				  ]
[ "newIterator",		  "pattern",	  "const",		  "() (X_1:lng,X_2:str) ",																														  "CSTnewIterator;"				  ]
[ "newIterator",		  "pattern",	  "bat",		  "(b:bat[:any_1,:BAT]) (X_2:lng,h:any_1,t:any_2) ",																											  "CHPbunIterator;"				  ]
[ "newIterator",		  "pattern",	  "bat",		  "(b:bat[:any_1,:any_2]) (X_2:lng,h:any_1,t:any_2) ",																											  "CHPbunIterator;"				  ]
[ "newIterator",		  "command",	  "bat",		  "(b:bat[:any_1,:any_2],size:lng) (X_3:lng,X_4:bat[:any_1,:any_2]) ",																									  "CHPnewChunkIterator;"			  ]
[ "newRange",			  "command",	  "language",		  "(v:dbl) (X_2:bit,X_3:dbl) ",																														  "RNGnewRange_dbl;"				  ]
[ "newRange",			  "command",	  "language",		  "(v:flt) (X_2:bit,X_3:flt) ",																														  "RNGnewRange_flt;"				  ]
[ "newRange",			  "command",	  "language",		  "(v:lng) (X_2:bit,X_3:lng) ",																														  "RNGnewRange_lng;"				  ]
[ "newRange",			  "command",	  "language",		  "(v:int) (X_2:bit,X_3:int) ",																														  "RNGnewRange_int;"				  ]
[ "newRange",			  "command",	  "language",		  "(v:sht) (X_2:bit,X_3:sht) ",																														  "RNGnewRange_sht;"				  ]
[ "newRange",			  "command",	  "language",		  "(v:oid) (X_2:bit,X_3:oid) ",																														  "RNGnewRange_oid;"				  ]
[ "newdictionary",		  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",																														  "SQLnewDictionary;"				  ]
[ "newoid",			  "command",	  "calc",		  "(incr:int):oid ",																															  "CALCnewoidInc;"				  ]
[ "newoid",			  "command",	  "calc",		  "(incr:lng):oid ",																															  "CALCnewoidInclng;"				  ]
[ "newoid",			  "command",	  "calc",		  "():oid ",																																  "CALCnewoidBase;"				  ]
[ "nextElement",		  "command",	  "language",		  "(step:dbl,last:dbl) (X_3:bit,X_4:dbl) ",																												  "RNGnextElement_dbl;"				  ]
[ "nextElement",		  "command",	  "language",		  "(step:flt,last:flt) (X_3:bit,X_4:flt) ",																												  "RNGnextElement_flt;"				  ]
[ "nextElement",		  "command",	  "language",		  "(step:lng,last:lng) (X_3:bit,X_4:lng) ",																												  "RNGnextElement_lng;"				  ]
[ "nextElement",		  "command",	  "language",		  "(step:int,last:int) (X_3:bit,X_4:int) ",																												  "RNGnextElement_int;"				  ]
[ "nextElement",		  "command",	  "language",		  "(step:sht,last:sht) (X_3:bit,X_4:sht) ",																												  "RNGnextElement_sht;"				  ]
[ "nextElement",		  "command",	  "language",		  "(step:oid,last:oid) (X_3:bit,X_4:oid) ",																												  "RNGnextElement_oid;"				  ]
[ "nextPage",			  "command",	  "tablet",		  "():void ",																																  "TABnextPage;"				  ]
[ "next_result",		  "command",	  "mapi",		  "(hdl:int):int ",																															  "SERVERnext_result;"				  ]
[ "next_value",			  "pattern",	  "batsql",		  "(sname:bat[:oid,:str],sequence:str):bat[:oid,:lng] ",																										  "mvc_bat_next_value;"				  ]
[ "next_value",			  "pattern",	  "sql",		  "(sname:str,sequence:str):lng ",																													  "mvc_next_value;"				  ]
[ "nitems",			  "command",	  "blob",		  "(b:blob):int ",																															  "BLOBnitems;"					  ]
[ "noop",			  "command",	  "profiler",		  "():void ",																																  "CMDnoopProfiler;"				  ]
[ "not",			  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit]):bat[:any_1,:bit] ",																										  "CMDbitbataccumNOT;"				  ]
[ "not",			  "command",	  "batcalc",		  "(b:bat[:any_1,:bit]):bat[:any_1,:bit] ",																												  "CMDbitbatNOT;"				  ]
[ "not",			  "command",	  "calc",		  "(left:lng):lng ",																															  "CALCunarylngNOT;"				  ]
[ "not",			  "command",	  "calc",		  "(left:int):int ",																															  "CALCunaryintNOT;"				  ]
[ "not",			  "command",	  "calc",		  "(left:sht):sht ",																															  "CALCunaryshtNOT;"				  ]
[ "not",			  "command",	  "calc",		  "(left:bte):bte ",																															  "CALCunarybteNOT;"				  ]
[ "not",			  "command",	  "calc",		  "(left:bit):bit ",																															  "CALCunarybitNOT;"				  ]
[ "not_ilike",			  "command",	  "batstr",		  "(s:bat[:any_1,:str],pat:str):bat[:any_1,:bit] ",																											  "BATPCREnotilike2;"				  ]
[ "not_ilike",			  "command",	  "batstr",		  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:bit] ",																										  "BATPCREnotilike;"				  ]
[ "not_ilike",			  "command",	  "str",		  "(s:str,pat:str):bit ",																														  "PCREnotilike2;"				  ]
[ "not_ilike",			  "command",	  "str",		  "(s:str,pat:str,esc:str):bit ",																													  "PCREnotilike3;"				  ]
[ "not_like",			  "command",	  "batstr",		  "(s:bat[:any_1,:str],pat:str):bat[:any_1,:bit] ",																											  "BATPCREnotlike2;"				  ]
[ "not_like",			  "command",	  "batstr",		  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:bit] ",																										  "BATPCREnotlike;"				  ]
[ "not_like",			  "command",	  "str",		  "(s:str,pat:str):bit ",																														  "PCREnotlike2;"				  ]
[ "not_like",			  "command",	  "str",		  "(s:str,pat:str,esc:str):bit ",																													  "PCREnotlike3;"				  ]
[ "not_unique",			  "command",	  "sql",		  "(b:bat[:oid,:oid]):bit ",																														  "not_unique;"					  ]
[ "not_uniques",		  "command",	  "sql",		  "(b:bat[:oid,:wrd]):bat[:oid,:oid] ",																													  "not_unique_oids;"				  ]
[ "not_uniques",		  "command",	  "sql",		  "(b:bat[:oid,:oid]):bat[:oid,:oid] ",																													  "not_unique_oids;"				  ]
[ "number",			  "command",	  "algebra",		  "(b:bat[:any_1,:any]):bat[:any_1,:int] ",																												  "ALGnumber;"					  ]
[ "octopus",			  "pattern",	  "scheduler",		  "(t:int):bit ",																															  "OCTOPUSrun;"					  ]
[ "octopus",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPToctopus;"					  ]
[ "octopus",			  "pattern",	  "optimizer",		  "():str ",																																  "OPToctopus;"					  ]
[ "oid",			  "command",	  "batcalc",		  "(b:bat[:any_1,:lng]):bat[:any_1,:oid] ",																												  "CMDconvert_lng_oid;"				  ]
[ "oid",			  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd]):bat[:any_1,:oid] ",																												  "CMDconvert_wrd_oid;"				  ]
[ "oid",			  "command",	  "batcalc",		  "(b:bat[:any_1,:int]):bat[:any_1,:oid] ",																												  "CMDconvert_int_oid;"				  ]
[ "oid",			  "command",	  "batcalc",		  "(b:bat[:any_1,:sht]):bat[:any_1,:oid] ",																												  "CMDconvert_sht_oid;"				  ]
[ "oid",			  "command",	  "batcalc",		  "(b:bat[:any_1,:bte]):bat[:any_1,:oid] ",																												  "CMDconvert_bte_oid;"				  ]
[ "oid",			  "command",	  "batcalc",		  "(b:bat[:any_1,:oid]):bat[:any_1,:oid] ",																												  "CMDconvert_oid;"				  ]
[ "oid",			  "command",	  "calc",		  "(v:void):oid ",																															  "CALCnil2oid;"				  ]
[ "oid",			  "command",	  "calc",		  "(v:str):oid ",																															  "CALCstr2oid;"				  ]
[ "oid",			  "command",	  "calc",		  "(x:dbl):oid ",																															  "CALCdbl2oid;"				  ]
[ "oid",			  "command",	  "calc",		  "(x:flt):oid ",																															  "CALCflt2oid;"				  ]
[ "oid",			  "command",	  "calc",		  "(x:int):oid ",																															  "CALCint2oid;"				  ]
[ "oid",			  "command",	  "calc",		  "(x:sht):oid ",																															  "CALCsht2oid;"				  ]
[ "oid",			  "command",	  "calc",		  "(x:bte):oid ",																															  "CALCbte2oid;"				  ]
[ "oid",			  "command",	  "calc",		  "(x:wrd):oid ",																															  "CALCwrd2oid;"				  ]
[ "oid",			  "command",	  "calc",		  "(x:lng):oid ",																															  "CALClng2oid;"				  ]
[ "oid",			  "command",	  "calc",		  "(x:oid):oid ",																															  "CALCoid2oid;"				  ]
[ "olddate",			  "command",	  "mtime",		  "(format:str):date ",																															  "MTIMEolddate;"				  ]
[ "oldduration",		  "command",	  "mtime",		  "(format:str):int ",																															  "MTIMEoldduration;"				  ]
[ "open",			  "command",	  "tokenizer",		  "(name:str):void ",																															  "TKNZRopen;"					  ]
[ "open",			  "pattern",	  "statistics",		  "():void ",																																  "STATopen;"					  ]
[ "open",			  "pattern",	  "box",		  "(nme:str):any_1 ",																															  "BOXopen;"					  ]
[ "open",			  "command",	  "bbp",		  "():void ",																																  "CMDbbpopen;"					  ]
[ "open",			  "pattern",	  "const",		  "():void ",																																  "CSTopen;"					  ]
[ "openRead",			  "command",	  "streams",		  "(s:streams):streams ",																														  "mnstr_stream_rstreamwrap;"			  ]
[ "openRead",			  "command",	  "streams",		  "(filename:str):streams ",																														  "mnstr_open_rastreamwrap;"			  ]
[ "openReadBytes",		  "command",	  "streams",		  "(filename:str):streams ",																														  "mnstr_open_rstreamwrap;"			  ]
[ "openStream",			  "pattern",	  "profiler",		  "(host:str,port:int):void ",																														  "CMDsetProfilerStream;"			  ]
[ "openStream",			  "pattern",	  "profiler",		  "(fnme:str):void ",																															  "CMDsetProfilerFile;"				  ]
[ "openStream",			  "pattern",	  "profiler",		  "():void ",																																  "CMDopenProfilerStream;"			  ]
[ "openWrite",			  "command",	  "streams",		  "(s:streams):streams ",																														  "mnstr_stream_wstreamwrap;"			  ]
[ "openWrite",			  "command",	  "streams",		  "(filename:str):streams ",																														  "mnstr_open_wastreamwrap;"			  ]
[ "openWriteBytes",		  "command",	  "streams",		  "(filename:str):streams ",																														  "mnstr_open_wstreamwrap;"			  ]
[ "optimize",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):void ",																														  "QOToptimize;"				  ]
[ "optimizers",			  "command",	  "sql",		  "() (X_1:bat[:oid,:str],X_2:bat[:oid,:str],X_3:bat[:oid,:str]) ",																									  "getPipeCatalog;"				  ]
[ "options",			  "command",	  "xml",		  "(tag:str,option:str,left:bat[:oid,:xml]):bat[:oid,:xml] ",																										  "BATXMLoptions;"				  ]
[ "or",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",																									  "CMDaccum_OR_cst_bit;"			  ]
[ "or",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",																									  "CMDaccum_OR_bit_cst;"			  ]
[ "or",				  "command",	  "batcalc",		  "(cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",																											  "CMD_OR_cst_bit;"				  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",																											  "CMD_OR_bit_cst;"				  ]
[ "or",				  "command",	  "batcalc",		  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",																							  "CMDaccum_OR_bit;"				  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",																										  "CMD_OR_bit;"					  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumORcst_lng_lng_lng;"		  ]
[ "or",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumORcst2_lng_lng_lng;"		  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumOR_lng_lng_lng;"			  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatOR_lng_lng_lng;"			  ]
[ "or",				  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstORbat_lng_lng_lng;"			  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",																												  "CMDbatORcst_lng_lng_lng;"			  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumORcst_wrd_wrd_wrd;"		  ]
[ "or",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumORcst2_wrd_wrd_wrd;"		  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumOR_wrd_wrd_wrd;"			  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",																										  "CMDbatOR_wrd_wrd_wrd;"			  ]
[ "or",				  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",																												  "CMDcstORbat_wrd_wrd_wrd;"			  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:wrd] ",																												  "CMDbatORcst_wrd_wrd_wrd;"			  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumORcst_int_int_int;"		  ]
[ "or",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumORcst2_int_int_int;"		  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumOR_int_int_int;"			  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",																										  "CMDbatOR_int_int_int;"			  ]
[ "or",				  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",																												  "CMDcstORbat_int_int_int;"			  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",																												  "CMDbatORcst_int_int_int;"			  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumORcst_sht_sht_sht;"		  ]
[ "or",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumORcst2_sht_sht_sht;"		  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",																								  "CMDbataccumOR_sht_sht_sht;"			  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",																										  "CMDbatOR_sht_sht_sht;"			  ]
[ "or",				  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",																												  "CMDcstORbat_sht_sht_sht;"			  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",																												  "CMDbatORcst_sht_sht_sht;"			  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte,bflag:bit,cflag:bit):bat[:oid,:bte] ",																									  "CMDbataccumORcst_bte_bte_bte;"		  ]
[ "or",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:bte] ",																									  "CMDbataccumORcst2_bte_bte_bte;"		  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:bte] ",																								  "CMDbataccumOR_bte_bte_bte;"			  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:bte] ",																										  "CMDbatOR_bte_bte_bte;"			  ]
[ "or",				  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:bte] ",																												  "CMDcstORbat_bte_bte_bte;"			  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:bte] ",																												  "CMDbatORcst_bte_bte_bte;"			  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:oid],cst:oid,bflag:bit,cflag:bit):bat[:oid,:oid] ",																									  "CMDbataccumORcst_oid_oid_oid;"		  ]
[ "or",				  "command",	  "batcalc",		  "(cst:oid,b:bat[:oid,:oid],cflag:bit,bflag:bit):bat[:oid,:oid] ",																									  "CMDbataccumORcst2_oid_oid_oid;"		  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:oid],c:bat[:oid,:oid],aflag:bit,bflag:bit):bat[:oid,:oid] ",																								  "CMDbataccumOR_oid_oid_oid;"			  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:oid],c:bat[:oid,:oid]):bat[:oid,:oid] ",																										  "CMDbatOR_oid_oid_oid;"			  ]
[ "or",				  "command",	  "batcalc",		  "(cst:oid,b:bat[:oid,:oid]):bat[:oid,:oid] ",																												  "CMDcstORbat_oid_oid_oid;"			  ]
[ "or",				  "command",	  "batcalc",		  "(b:bat[:oid,:oid],cst:oid):bat[:oid,:oid] ",																												  "CMDbatORcst_oid_oid_oid;"			  ]
[ "or",				  "command",	  "calc",		  "(left:lng,right:lng):lng ",																														  "CALCbinaryORlnglng;"				  ]
[ "or",				  "command",	  "calc",		  "(left:int,right:int):int ",																														  "CALCbinaryORintint;"				  ]
[ "or",				  "command",	  "calc",		  "(left:sht,right:sht):sht ",																														  "CALCbinaryORshtsht;"				  ]
[ "or",				  "command",	  "calc",		  "(left:bte,right:bte):bte ",																														  "CALCbinaryORbtebte;"				  ]
[ "or",				  "command",	  "calc",		  "(left:bit,right:bit):bit ",																														  "CALCbinaryORbit;"				  ]
[ "orcam",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str,targetmod:str,targetfcn:str):void ",																										  "OPTorcam;"					  ]
[ "orcam",			  "pattern",	  "optimizer",		  "(targetmod:str,targetfcn:str):void ",																												  "OPTorcam;"					  ]
[ "order",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "BKCorder;"						  ]
[ "orderReverse",		  "command",	  "bat",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "BKCorder_rev;"				  ]
[ "origin",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTorigin;"					  ]
[ "origin",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTorigin;"					  ]
[ "outerjoin",			  "command",	  "algebra",		  "(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3],estimate:lng):bat[:any_1,:any_3] ",																						  "ALGouterjoinestimate;"			  ]
[ "outerjoin",			  "command",	  "algebra",		  "(outer:bat[:any_1,:oid],inner:bat[:oid,:any_3]):bat[:any_1,:any_3] ",																								  "ALGouterjoin;"				  ]
[ "outerjoin",			  "command",	  "algebra",		  "(outer:bat[:any_1,:oid],inner:bat[:oid,:any_3]):bat[:any_1,:any_3] ",																								  "ALGouterjoin;"				  ]
[ "outerjoin",			  "command",	  "algebra",		  "(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",																								  "ALGouterjoin;"				  ]
[ "output",			  "command",	  "tablet",		  "(order:bat[:any_1,:any_2],seps:bat[:oid,:str],bats:bat[:oid,:BAT],s:streams):void ",																							  "CMDtablet_output;"				  ]
[ "pack",			  "pattern",	  "mat",		  "(b:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",																											  "MATpack;"					  ]
[ "pack",			  "pattern",	  "mat",		  "(X_1:any_2...):bat[:oid,:any_2] ",																													  "MATpackValues;"				  ]
[ "pack",			  "pattern",	  "mat",		  "(X_1:any_2...):bat[:void,:any_2] ",																													  "MATpackValues;"				  ]
[ "pack",		  "pattern",	  "bat",	  "(v:any_1):bat[:oid,:any_1] ",											  "CMDbatsingleton;"				  ]
[ "pack",			  "pattern",	  "bat",	  "(h:any_1,t:any_2):bat[:any_1,:any_2] ",												  "CMDbatpack;"						  ]
[ "pack2",			  "pattern",	  "mat",		  "(b:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",																											  "MATpack2;"					  ]
[ "pack3",			  "pattern",	  "mat",		  "(b:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",																											  "MATpack3;"					  ]
[ "page",			  "pattern",	  "tablet",		  "(b:bat[:any_1,:any]...):int ",																													  "TABpage;"					  ]
[ "parse",			  "command",	  "xml",		  "(doccont:str,val:bat[:oid,:str],option:str):bat[:oid,:xml] ",																									  "BATXMLparse;"				  ]
[ "parse",			  "command",	  "xml",		  "(doccont:str,val:str,option:str):xml ",																												  "XMLparse;"					  ]
[ "partition",			  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2],pieces:int,part:int):bat[:any_1,:any_2] ",							  "CMDbatpartition2;"				  ]
[ "partition",			  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2]... ",																	  "CMDbatpartition;"				  ]
[ "password",			  "pattern",	  "sql",		  "(user:str):str ",																															  "db_password_wrap;"				  ]
[ "patindex",			  "command",	  "pcre",		  "(pat:str,s:str):int ",																														  "PCREpatindex;"				  ]
[ "pattern",			  "pattern",	  "scheduler",		  "(pat:str):void ",																															  "SRVsetServers;"				  ]
[ "pcre_quote",			  "command",	  "pcre",		  "(s:str):str ",																															  "PCREquote;"					  ]
[ "peephole",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTpeephole;"				  ]
[ "peephole",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTpeephole;"				  ]
[ "peers",			  "pattern",	  "scheduler",		  "(N:int):void ",																															  "SRVsetServers;"				  ]
[ "pi",				  "command",	  "xml",		  "(target:str,val:bat[:oid,:xml]):bat[:oid,:xml] ",																											  "BATXMLpi;"					  ]
[ "pi",				  "command",	  "xml",		  "(target:str,val:str):xml ",																														  "XMLpi;"					  ]
[ "pi",				  "command",	  "mmath",		  "():dbl ",																																  "MATHpi;"					  ]
[ "pick",			  "pattern",	  "scheduler",		  "(arg:any_1...):any_1 ",																														  "RUNpickResult;"				  ]
[ "pin",			  "pattern",	  "datacyclotron",	  "(req_id:int):bat[:any_1,:any_3] ",																													  "DCYpin;"					  ]
[ "ping",			  "command",	  "mapi",		  "(mid:int):int ",																															  "SERVERping;"					  ]
[ "point",			  "command",	  "geom",		  "(x:dbl,y:dbl):wkb ",																															  "wkbcreatepoint;"				  ]
[ "point",			  "command",	  "batgeom",		  "(x:bat[:oid,:dbl],y:bat[:oid,:dbl]):bat[:oid,:wkb] ",																										  "wkbcreatepoint_bat;"				  ]
[ "point",			  "function",	  "calc",		  "(wkt:str):wkb;",																															  "nil"						  ]
[ "polygon",			  "function",	  "calc",		  "(wkt:str):wkb;",																															  "nil"						  ]
[ "position",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],val:any_1,tval:any_2):wrd ",																											  "ALGpositionBUN;"				  ]
[ "position",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],v:any_1):wrd ",																												  "ALGposition;"				  ]
[ "pow",			  "command",	  "batmmath",		  "(x:bat[:oid,:flt],y:flt):bat[:oid,:flt] ",																												  "CMDscience_bat_cst_pow_flt;"			  ]
[ "pow",			  "command",	  "batmmath",		  "(x:bat[:oid,:dbl],y:dbl):bat[:oid,:dbl] ",																												  "CMDscience_bat_cst_pow_dbl;"			  ]
[ "pow",			  "command",	  "mmath",		  "(x:dbl,y:dbl):dbl ",																															  "MATHbinary_POWdbl;"				  ]
[ "pow",			  "command",	  "mmath",		  "(x:flt,y:flt):flt ",																															  "MATHbinary_POWflt;"				  ]
[ "prefix",			  "command",	  "str",		  "(s:str,l:int):str ",																															  "STRprefix;"					  ]
[ "prejoin",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTprejoin;"					  ]
[ "prejoin",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTprejoin;"					  ]
[ "prejoin",			  "command",	  "algebra",		  "(a:bat[:oid,:oid],b:bat[:oid,:any_1]) (c:bat[:oid,:oid],d:bat[:oid,:any_1]) ",																							  "ALGprejoin;"					  ]
[ "prelude",			  "command",	  "geom",		  "():void ",																																  "geom_prelude;"				  ]
[ "prelude",			  "command",	  "sql",		  "():void ",																																  "SQLprelude;"					  ]
[ "prelude",			  "pattern",	  "optimizer",		  "():void ",																																  "optimizer_prelude;"				  ]
[ "prelude",			  "command",	  "statistics",		  "():void ",																																  "STATprelude;"				  ]
[ "prelude",			  "command",	  "remote",		  "():void ",																																  "RMTprelude;"					  ]
[ "prelude",			  "pattern",	  "recycle",		  "():void ",																																  "RECYCLEprelude;"				  ]
[ "prelude",			  "command",	  "tablet",		  "():void ",																																  "TABprelude;"					  ]
[ "prelude",			  "pattern",	  "bbp",		  "():void ",																																  "CMDbbpprelude;"				  ]
[ "prelude",			  "pattern",	  "const",		  "():void ",																																  "CSTprelude;"					  ]
[ "prelude",			  "pattern",	  "pcre",		  "():void ",																																  "pcre_init;"					  ]
[ "prelude",			  "command",	  "sabaoth",		  "():void ",																																  "SABprelude;"					  ]
[ "prelude",			  "command",	  "xml",		  "():void ",																																  "XMLprelude;"					  ]
[ "prelude",			  "command",	  "identifier",		  "():void ",																																  "IDprelude;"					  ]
[ "prelude",			  "command",	  "mtime",		  "():void ",																																  "MTIMEprelude;"				  ]
[ "prelude",			  "command",	  "blob",		  "():void ",																																  "BLOBprelude;"				  ]
[ "prelude",			  "command",	  "group",		  "():void ",																																  "GRPprelude;"					  ]
[ "prelude",			  "command",	  "alarm",		  "():void ",																																  "ALARMprelude;"				  ]
[ "prepare",			  "command",	  "mapi",		  "(mid:int,qry:str):int ",																														  "SERVERprepare;"				  ]
[ "prev",			  "command",	  "transaction",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "TRNtrans_prev;"				  ]
[ "prevPage",			  "command",	  "tablet",		  "():void ",																																  "TABprevPage;"				  ]
[ "print",			  "pattern",	  "mat",		  "(b:bat[:any_1,:any_2]...):void ",																													  "MATprint;"					  ]
[ "print",			  "pattern",	  "io",			  "(val:bat[:any_1,:any_2]):void ",																													  "IOprint_val;"				  ]
[ "print",			  "pattern",	  "io",			  "(val:any_1):void ",																															  "IOprint_val;"				  ]
[ "print",			  "pattern",	  "io",			  "(order:int,b:bat[:any_1,:any],b2:bat[:any_1,:any]...):void ",																									  "IOotable;"					  ]
[ "print",			  "pattern",	  "io",			  "(b1:bat[:any_1,:any]...):void ",																													  "IOtable;"					  ]
[ "print",			  "pattern",	  "io",			  "(val:any_1,lst:any...):void ",																													  "IOprint_val;"				  ]
[ "printf",			  "pattern",	  "io",			  "(filep:streams,fmt:str):void ",																													  "IOprintfStream;"				  ]
[ "printf",			  "pattern",	  "io",			  "(filep:streams,fmt:str,val:any...):void ",																												  "IOprintfStream;"				  ]
[ "printf",			  "pattern",	  "io",			  "(fmt:str):void ",																															  "IOprintf;"					  ]
[ "printf",			  "pattern",	  "io",			  "(fmt:str,val:any...):void ",																														  "IOprintf;"					  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:lng]):dbl;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:lng],empty_is_nil:bit):dbl ",																												  "ALGprod_lng_dbl;"				  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:wrd]):dbl;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:wrd],empty_is_nil:bit):dbl ",																												  "ALGprod_wrd_dbl;"				  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:int]):dbl;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:int],empty_is_nil:bit):dbl ",																												  "ALGprod_int_dbl;"				  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:sht]):dbl;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:sht],empty_is_nil:bit):dbl ",																												  "ALGprod_sht_dbl;"				  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:bte]):dbl;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:bte],empty_is_nil:bit):dbl ",																												  "ALGprod_bte_dbl;"				  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:dbl]):dbl;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:dbl],empty_is_nil:bit):dbl ",																												  "ALGprod_dbl_dbl;"				  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:flt]):dbl;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:flt],empty_is_nil:bit):dbl ",																												  "ALGprod_flt_dbl;"				  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:flt]):flt;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:flt],empty_is_nil:bit):flt ",																												  "ALGprod_flt_flt;"				  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:lng]):lng;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:lng],empty_is_nil:bit):lng ",																												  "ALGprod_lng_lng;"				  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:wrd]):lng;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:wrd],empty_is_nil:bit):lng ",																												  "ALGprod_wrd_lng;"				  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:wrd]):wrd;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:wrd],empty_is_nil:bit):wrd ",																												  "ALGprod_wrd_wrd;"				  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:int]):lng;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:int],empty_is_nil:bit):lng ",																												  "ALGprod_int_lng;"				  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:int]):wrd;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:int],empty_is_nil:bit):wrd ",																												  "ALGprod_int_wrd;"				  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:int]):int;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:int],empty_is_nil:bit):int ",																												  "ALGprod_int_int;"				  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:sht]):lng;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:sht],empty_is_nil:bit):lng ",																												  "ALGprod_sht_lng;"				  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:sht]):wrd;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:sht],empty_is_nil:bit):wrd ",																												  "ALGprod_sht_wrd;"				  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:sht]):int;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:sht],empty_is_nil:bit):int ",																												  "ALGprod_sht_int;"				  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:sht]):sht;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:sht],empty_is_nil:bit):sht ",																												  "ALGprod_sht_sht;"				  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:bte]):lng;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:bte],empty_is_nil:bit):lng ",																												  "ALGprod_bte_lng;"				  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:bte]):wrd;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:bte],empty_is_nil:bit):wrd ",																												  "ALGprod_bte_wrd;"				  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:bte]):int;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:bte],empty_is_nil:bit):int ",																												  "ALGprod_bte_int;"				  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:bte]):sht;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:bte],empty_is_nil:bit):sht ",																												  "ALGprod_bte_sht;"				  ]
[ "prod",			  "function",	  "aggr",		  "(b:bat[:any_1,:bte]):bte;",																														  "nil"						  ]
[ "prod",			  "command",	  "aggr",		  "(b:bat[:any_1,:bte],empty_is_nil:bit):bte ",																												  "ALGprod_bte_bte;"				  ]
[ "product",			  "command",	  "array",		  "(b:bat[:any_3,:any_1],c:bat[:any_4,:any_2]):bat[:any_1,:any_2] ",																									  "ARRAYproduct;"				  ]
[ "product",			  "command",	  "aggr",		  "(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",																								  "AX3aggrX3_prod3_dbl_dbl;"			  ]
[ "product",			  "command",	  "aggr",		  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",																								  "AX3aggrX3_prod3_flt_dbl;"			  ]
[ "product",			  "command",	  "aggr",		  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:flt] ",																								  "AX3aggrX3_prod3_flt_flt;"			  ]
[ "product",			  "command",	  "aggr",		  "(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",																								  "AX3aggrX3_prod3_lng_lng;"			  ]
[ "product",			  "command",	  "aggr",		  "(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",																								  "AX3aggrX3_prod3_lng_wrd;"			  ]
[ "product",			  "command",	  "aggr",		  "(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",																								  "AX3aggrX3_prod3_wrd_lng;"			  ]
[ "product",			  "command",	  "aggr",		  "(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",																								  "AX3aggrX3_prod3_wrd_wrd;"			  ]
[ "product",			  "command",	  "aggr",		  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",																								  "AX3aggrX3_prod3_int_lng;"			  ]
[ "product",			  "command",	  "aggr",		  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",																								  "AX3aggrX3_prod3_int_wrd;"			  ]
[ "product",			  "command",	  "aggr",		  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",																								  "AX3aggrX3_prod3_int_int;"			  ]
[ "product",			  "command",	  "aggr",		  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",																								  "AX3aggrX3_prod3_sht_lng;"			  ]
[ "product",			  "command",	  "aggr",		  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",																								  "AX3aggrX3_prod3_sht_wrd;"			  ]
[ "product",			  "command",	  "aggr",		  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",																								  "AX3aggrX3_prod3_sht_int;"			  ]
[ "product",			  "command",	  "aggr",		  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:sht] ",																								  "AX3aggrX3_prod3_sht_sht;"			  ]
[ "product",			  "command",	  "aggr",		  "(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",																								  "AX3aggrX3_prod3_bte_lng;"			  ]
[ "product",			  "command",	  "aggr",		  "(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",																								  "AX3aggrX3_prod3_bte_wrd;"			  ]
[ "product",			  "command",	  "aggr",		  "(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",																								  "AX3aggrX3_prod3_bte_int;"			  ]
[ "product",			  "command",	  "aggr",		  "(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:sht] ",																								  "AX3aggrX3_prod3_bte_sht;"			  ]
[ "product",			  "command",	  "aggr",		  "(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:bte] ",																								  "AX3aggrX3_prod3_bte_bte;"			  ]
[ "project",			  "pattern",	  "mat",		  "(map:bat[:void,:bte],b:bat[:any_1,:any_2]...):bat[:void,:any_2] ",																									  "MATproject;"					  ]
[ "project",			  "pattern",	  "mat",		  "(map:bat[:void,:bte],b:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",																									  "MATproject;"					  ]
[ "project",			  "command",	  "array",		  "(b:bat[:oid,:any_1],i:int):bat[:oid,:int] ",																												  "ARRAYproject;"				  ]
[ "project",			  "pattern",	  "algebra",		  "(b:bat[:any_1,:any_3],val:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																									  "ALGprojectCst;"				  ]
[ "project",			  "pattern",	  "algebra",		  "(b:bat[:any_1,:any_3],val:any_2):bat[:any_1,:any_2] ",																										  "ALGprojectCst;"				  ]
[ "project",			  "command",	  "algebra",		  "(b:bat[:any_2,:any_1],v:dbl):bat[:any_2,:dbl] ",																											  "ALGprojecttail_dbl;"				  ]
[ "project",			  "command",	  "algebra",		  "(v:dbl,b:bat[:any_2,:any_1]):bat[:dbl,:any_1] ",																											  "ALGprojecthead_dbl;"				  ]
[ "project",			  "command",	  "algebra",		  "(b:bat[:any_2,:any_1],v:flt):bat[:any_2,:flt] ",																											  "ALGprojecttail_flt;"				  ]
[ "project",			  "command",	  "algebra",		  "(v:flt,b:bat[:any_2,:any_1]):bat[:flt,:any_1] ",																											  "ALGprojecthead_flt;"				  ]
[ "project",			  "command",	  "algebra",		  "(b:bat[:any_2,:any_1],v:lng):bat[:any_2,:lng] ",																											  "ALGprojecttail_lng;"				  ]
[ "project",			  "command",	  "algebra",		  "(v:lng,b:bat[:any_2,:any_1]):bat[:lng,:any_1] ",																											  "ALGprojecthead_lng;"				  ]
[ "project",			  "command",	  "algebra",		  "(b:bat[:any_2,:any_1],v:sht):bat[:any_2,:sht] ",																											  "ALGprojecttail_sht;"				  ]
[ "project",			  "command",	  "algebra",		  "(v:sht,b:bat[:any_2,:any_1]):bat[:sht,:any_1] ",																											  "ALGprojecthead_sht;"				  ]
[ "project",			  "command",	  "algebra",		  "(b:bat[:any_2,:any_1],v:int):bat[:any_2,:int] ",																											  "ALGprojecttail_int;"				  ]
[ "project",			  "command",	  "algebra",		  "(v:int,b:bat[:any_2,:any_1]):bat[:int,:any_1] ",																											  "ALGprojecthead_int;"				  ]
[ "project",			  "command",	  "algebra",		  "(b:bat[:any_2,:any_1],v:oid):bat[:any_2,:oid] ",																											  "ALGprojecttail_oid;"				  ]
[ "project",			  "command",	  "algebra",		  "(v:oid,b:bat[:any_2,:any_1]):bat[:oid,:any_1] ",																											  "ALGprojecthead_oid;"				  ]
[ "project",			  "command",	  "algebra",		  "(b:bat[:any_2,:any_1],v:str):bat[:any_2,:str] ",																											  "ALGprojecttail_str;"				  ]
[ "project",			  "command",	  "algebra",		  "(v:str,b:bat[:any_2,:any_1]):bat[:str,:any_1] ",																											  "ALGprojecthead_str;"				  ]
[ "project",			  "command",	  "algebra",		  "(b:bat[:any_2,:any_1],v:bte):bat[:any_2,:bte] ",																											  "ALGprojecttail_bte;"				  ]
[ "project",			  "command",	  "algebra",		  "(v:bte,b:bat[:any_2,:any_1]):bat[:bte,:any_1] ",																											  "ALGprojecthead_bte;"				  ]
[ "project",			  "command",	  "algebra",		  "(b:bat[:any_2,:any_1],v:bit):bat[:any_2,:bit] ",																											  "ALGprojecttail_bit;"				  ]
[ "project",			  "command",	  "algebra",		  "(v:bit,b:bat[:any_2,:any_1]):bat[:bit,:any_1] ",																											  "ALGprojecthead_bit;"				  ]
[ "project",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:void] ",																												  "ALGprojectNIL;"				  ]
[ "prompt",			  "pattern",	  "io",			  "(val:any_1):void ",																															  "IOprompt_val;"				  ]
[ "ptinsphbox",			  "command",	  "lsst",		  "(ra:dbl,dec:dbl,ra_min:dbl,dec_min:dbl,ra_max:dbl,dec_max:dbl):int ",																								  "qserv_ptInSphBox;"				  ]
[ "ptinsphcircle",		  "command",	  "lsst",		  "(ra:dbl,dec:dbl,ra_cen:dbl,dec_cen:dbl,radius:dbl):int ",																										  "qserv_ptInSphCircle;"			  ]
[ "ptinsphellipse",		  "command",	  "lsst",		  "(ra:dbl,dec:dbl,ra_cen:dbl,dec_cen:dbl,smaa:dbl,smia:dbl,ang:dbl):int ",																								  "qserv_ptInSphEllipse;"			  ]
[ "ptinsphpoly",		  "pattern",	  "lsst",		  "(ra:dbl,dec:dbl,list:dbl...):int ",																													  "qserv_ptInSphPoly;"				  ]
[ "ptr",			  "command",	  "calc",		  "(v:void):ptr ",																															  "CALCnil2ptr;"				  ]
[ "ptr",			  "command",	  "calc",		  "(v:str):ptr ",																															  "CALCstr2ptr;"				  ]
[ "ptr",			  "command",	  "calc",		  "(x:ptr):ptr ",																															  "CALCptr2ptr;"				  ]
[ "pushranges",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTpushranges;"				  ]
[ "pushranges",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTpushranges;"				  ]
[ "put",			  "pattern",	  "mapi",		  "(nme:str,val:any_1):str ",																														  "SERVERputLocal;"				  ]
[ "put",			  "pattern",	  "mapi",		  "(mid:int,nme:str,val:any_1):void ",																													  "SERVERput;"					  ]
[ "put",			  "pattern",	  "remote",		  "(conn:str,object:any):str ",																														  "RMTput;"					  ]
[ "qgramnormalize",		  "command",	  "txtsim",		  "(input:str):str ",																															  "CMDqgramnormalize;"				  ]
[ "qgramselfjoin",		  "command",	  "txtsim",		  "(qgram:bat[:oid,:oid],id:bat[:oid,:oid],pos:bat[:oid,:int],len:bat[:oid,:int],c:flt,k:int):bat[:int,:int] ",																				  "CMDqgramselfjoin;"				  ]
[ "query",			  "pattern",	  "srvpool",		  "(plan:str):str... ",																															  "SRVPOOLquery;"				  ]
[ "query",			  "command",	  "mapi",		  "(mid:int,qry:str):int ",																														  "SERVERquery;"				  ]
[ "queryId",			  "function",	  "sql",		  "(qid:int):void;",																															  "nil"						  ]
[ "query_array",		  "pattern",	  "mapi",		  "(mid:int,qry:str,arg:str...):int ",																													  "SERVERquery_array;"				  ]
[ "query_handle",		  "command",	  "mapi",		  "(mid:int,qry:str):int ",																														  "SERVERquery_handle;"				  ]
[ "quit",			  "pattern",	  "clients",		  "(idx:int):void ",																															  "CLTquit;"					  ]
[ "quit",			  "pattern",	  "clients",		  "():void ",																																  "CLTquit;"					  ]
[ "r_search",			  "command",	  "batstr",		  "(s:bat[:oid,:str],c:str):bat[:oid,:int] ",																												  "STRbatRstrSearchcst;"			  ]
[ "r_search",			  "command",	  "batstr",		  "(s:bat[:oid,:str],c:bat[:oid,:str]):bat[:oid,:int] ",																										  "STRbatRstrSearch;"				  ]
[ "r_search",			  "command",	  "str",		  "(s:str,c:str):int ",																															  "STRReverseStrSearch;"			  ]
[ "radians",			  "command",	  "batmmath",		  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",																													  "CMDscience_bat_flt_radians;"			  ]
[ "radians",			  "command",	  "batmmath",		  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",																													  "CMDscience_bat_dbl_radians;"			  ]
[ "radians",			  "command",	  "mmath",		  "(x:dbl):dbl ",																															  "MATHunary_RADIANSdbl;"			  ]
[ "radians",			  "command",	  "mmath",		  "(x:flt):flt ",																															  "MATHunary_RADIANSflt;"			  ]
[ "raise",			  "command",	  "language",		  "(msg:str):str ",																															  "CMDraise;"					  ]
[ "rand",			  "function",	  "mmath",		  "(v:int):int;",																															  "nil"						  ]
[ "rand",			  "command",	  "mmath",		  "():int ",																																  "MATHrandint;"				  ]
[ "rangesplit",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],ranges:int):bat[:any_2,:BAT] ",																										  "ALGrangesplit;"				  ]
[ "rank",			  "command",	  "sql",		  "(b:bat[:oid,:any_1]):bat[:oid,:int] ",																												  "sql_rank;"					  ]
[ "rank_grp",			  "command",	  "sql",		  "(b:bat[:oid,:any_1],gp:bat[:oid,:oid],gpe:bat[:oid,:oid]):bat[:oid,:int] ",																								  "sql_rank_grp;"				  ]
[ "rank_grp",			  "function",	  "batcalc",		  "(b:bat[:oid,:any_1]):bat[:oid,:int];",																												  "nil"						  ]
[ "rank_grp",			  "function",	  "batcalc",		  "(b:bat[:oid,:any_1],gp:bat[:oid,:oid],gpe:bat[:oid,:oid]):bat[:oid,:int];",																								  "nil"						  ]
[ "rdfshred",			  "pattern",	  "sql",		  "(location:str,gname:str,schema:str):void ",																												  "SQLrdfShred;"				  ]
[ "read",			  "command",	  "bstream",		  "(s:bstream,size:int):int ",																														  "bstream_read_wrapwrap;"			  ]
[ "readInt",			  "command",	  "streams",		  "(s:streams):int ",																															  "mnstr_readIntwrap;"				  ]
[ "readStr",			  "command",	  "streams",		  "(s:streams):str ",																															  "mnstr_read_stringwrap;"			  ]
[ "reconnect",			  "command",	  "mapi",		  "(mid:int):void ",																															  "SERVERreconnect;"				  ]
[ "reconnect",			  "pattern",	  "mapi",		  "(host:str,port:int,db_alias:str,usr:str,passwd:str,lang:str):int ",																									  "SERVERreconnectAlias;"			  ]
[ "reconnect",			  "pattern",	  "mapi",		  "(host:str,port:int,usr:str,passwd:str,lang:str):int ",																										  "SERVERreconnectWithoutAlias;"		  ]
[ "recycle",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTrecycle;"					  ]
[ "recycle",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTrecycle;"					  ]
[ "red",			  "command",	  "batcolor",		  "(c:bat[:oid,:color]):bat[:oid,:int] ",																												  "CLRbatRed;"					  ]
[ "red",			  "command",	  "color",		  "(c:color):int ",																															  "CLRred;"					  ]
[ "reduce",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTreduce;"					  ]
[ "reduce",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTreduce;"					  ]
[ "reduce",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "CMDBATreduce;"					  ]
[ "refine",			  "pattern",	  "mat",		  "(sorted:bat[:void,:any_2],map:bat[:void,:bte],b:bat[:any_1,:any_3]...) (rsorted:bat[:void,:oid],rmap:bat[:void,:bte]) ",																		  "MATrefine;"					  ]
[ "refine",			  "command",	  "group",		  "(b:bat[:void,:any_3],a:bat[:oid,:any_1]):bat[:oid,:oid] ",																										  "GRPrefine;"					  ]
[ "refine",			  "command",	  "group",		  "(b:bat[:oid,:any_3],a:bat[:void,:any_1]):bat[:oid,:oid] ",																										  "GRPrefine;"					  ]
[ "refine",			  "command",	  "group",		  "(b:bat[:any_2,:any_3],a:bat[:any_2,:any_1]):bat[:any_2,:oid] ",																									  "GRPrefine;"					  ]
[ "refine_reverse",		  "pattern",	  "mat",		  "(sorted:bat[:void,:any_2],map:bat[:void,:bte],b:bat[:any_1,:any_3]...) (rsorted:bat[:void,:oid],rmap:bat[:void,:bte]) ",																		  "MATrefineReverse;"				  ]
[ "refine_reverse",		  "command",	  "group",		  "(b:bat[:any_2,:any_3],a:bat[:any_2,:any_1]):bat[:any_2,:oid] ",																									  "GRPrefine_rev;"				  ]
[ "register",			  "pattern",	  "scheduler",		  "():bit ",																																  "OCTOPUSdiscoverRegister;"			  ]
[ "register",			  "pattern",	  "octopus",		  "(dbname:str,fname:str...):void ",																													  "OCTOPUSregister;"				  ]
[ "register",			  "pattern",	  "language",		  "(m:str,f:str,code:str,help:str):void ",																												  "CMDregisterFunction;"			  ]
[ "register",			  "pattern",	  "remote",		  "(conn:str,mod:str,fcn:str):void ",																													  "RMTregister;"				  ]
[ "release",			  "pattern",	  "statistics",		  "(name:bat[:any_1,:any_2]):void ",																													  "STATrelease;"				  ]
[ "release",			  "pattern",	  "statistics",		  "(name:str):void ",																															  "STATreleaseStr;"				  ]
[ "release",			  "pattern",	  "box",		  "(bname:str,nme:str,val:any_1):void ",																												  "BOXrelease;"					  ]
[ "release",			  "pattern",	  "bbp",		  "(b:bat[:any_1,:any_2]):void ",																													  "CMDbbpreleaseBAT;"				  ]
[ "release",			  "pattern",	  "bbp",		  "(name:str,val:bat[:any_1,:any_2]):void ",																												  "CMDbbprelease;"				  ]
[ "release",			  "pattern",	  "const",		  "(name:any_1):void ",																															  "CSTrelease;"					  ]
[ "release",			  "pattern",	  "const",		  "(name:str):void ",																															  "CSTrelease;"					  ]
[ "releaseAll",			  "pattern",	  "statistics",		  "():void ",																																  "STATreleaseAll;"				  ]
[ "releaseAll",			  "pattern",	  "box",		  "(bname:str):void ",																															  "BOXreleaseAll;"				  ]
[ "releaseAll",			  "pattern",	  "bbp",		  "():void ",																																  "CMDbbpReleaseAll;"				  ]
[ "releaseAll",			  "pattern",	  "const",		  "():void ",																																  "CSTreleaseAll;"				  ]
[ "remap",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTremap;"					  ]
[ "remap",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTremap;"					  ]
[ "remoteQueries",		  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTremoteQueries;"				  ]
[ "remoteQueries",		  "pattern",	  "optimizer",		  "():str ",																																  "OPTremoteQueries;"				  ]
[ "removeUser",			  "pattern",	  "clients",		  "(nme:str):void ",																															  "CLTremoveUser;"				  ]
[ "reorder",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTreorder;"					  ]
[ "reorder",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTreorder;"					  ]
[ "repeat",			  "command",	  "str",		  "(s2:str,c:int):str ",																														  "STRrepeat;"					  ]
[ "replace",			  "command",	  "pcre",		  "(orig:bat[:any_1,:str],pat:str,repl:str,flag:str):bat[:any_1,:str] ",																								  "PCREreplace_bat_wrap;"			  ]
[ "replace",			  "command",	  "pcre",		  "(origin:str,pat:str,repl:str,flags:str):str ",																											  "PCREreplace_wrap;"				  ]
[ "replace",			  "command",	  "batstr",		  "(s:bat[:oid,:str],pat:str,s2:str):bat[:oid,:str] ",																											  "STRbatreplace;"				  ]
[ "replace",			  "command",	  "str",		  "(s:str,pat:str,s2:str):str ",																													  "STRreplace;"					  ]
[ "replace",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2,force:bit):bat[:any_1,:any_2] ",								  "BKCreplace_bun_force;"				  ]
[ "replace",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):bat[:any_1,:any_2] ",										  "BKCreplace_bun;"					  ]
[ "replace",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2],force:bit):bat[:any_1,:any_2] ",							  "BKCreplace_bat_force;"				  ]
[ "replace",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",									  "BKCreplace_bat;"					  ]
[ "reset",			  "pattern",	  "srvpool",		  "(dbname:str):str ",																															  "SRVPOOLreset;"				  ]
[ "reset",			  "command",	  "profiler",		  "():void ",																																  "CMDclearTrace;"				  ]
[ "reset",			  "pattern",	  "recycle",		  "(delta:int,sname:str...):void ",																													  "RECYCLEresetCMD;"				  ]
[ "reset",			  "pattern",	  "recycle",		  "(bid:BAT):void ",																															  "RECYCLEresetCMD;"				  ]
[ "resolve",			  "command",	  "remote",		  "(pattern:str):bat[:oid,:str] ",																													  "RMTresolve;"					  ]
[ "restart",			  "pattern",	  "sql",		  "(sname:str,sequence:str,start:lng):lng ",																												  "mvc_restart_seq;"				  ]
[ "resultSet",			  "pattern",	  "sql",		  "(nr_cols:int,qtype:int,order:bat[:oid,:any_1]):int ",																										  "mvc_result_table_wrap;"			  ]
[ "resultSet",			  "pattern",	  "sql",		  "(nr_cols:int,qtype:int,order:any_1):int ",																												  "mvc_result_row_wrap;"			  ]
[ "resultSet",			  "pattern",	  "sql",		  "(nr_cols:int,sep:str,rsep:str,ssep:str,ns:str,order:bat[:oid,:any_1]):int ",																								  "mvc_result_file_wrap;"			  ]
[ "resultSet",			  "pattern",	  "sql",		  "(nr_cols:int,sep:str,rsep:str,ssep:str,ns:str,order:any_1):int ",																									  "mvc_result_file_wrap;"			  ]
[ "resume",			  "command",	  "mapi",		  "():void ",																																  "SERVERresume;"				  ]
[ "retreatScenario",		  "command",	  "sabaoth",		  "(lang:str):void ",																															  "SABretreatScenario;"				  ]
[ "reuse",			  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",																														  "SQLreuse;"					  ]
[ "reuse",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "ALGreuse;"					  ]
[ "reuse",			  "command",	  "bat",		  "(b:bat[:oid,:any_1],del:bat[:oid,:oid]):bat[:oid,:any_1] ",																										  "BKCreuseBAT;"				  ]
[ "reuseMap",			  "command",	  "bat",		  "(b:bat[:oid,:any_1],del:bat[:oid,:oid]):bat[:oid,:oid] ",																										  "BKCreuseBATmap;"				  ]
[ "reverse",			  "command",	  "udf",		  "(ra1:str):str ",																															  "UDFreverse;"					  ]
[ "reverse",			  "command",	  "batudf",		  "(b:bat[:oid,:str]):bat[:oid,:str] ",																													  "UDFBATreverse;"				  ]
[ "reverse",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_2,:any_1] ",												  "BKCreverse;"						  ]
[ "revert",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "ALGrevert;"					  ]
[ "revert",			  "command",	  "bat",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "BKCrevert;"					  ]
[ "rgb",			  "command",	  "batcolor",		  "(r:bat[:oid,:int],g:bat[:oid,:int],b:bat[:oid,:int]):bat[:oid,:color] ",																								  "CLRbatRgb;"					  ]
[ "rgb",			  "command",	  "color",		  "(r:int,g:int,b:int):color ",																														  "CLRrgb;"					  ]
[ "ripemd160sum",		  "command",	  "clients",		  "(pw:str):str ",																															  "CLTripemd160sum;"				  ]
[ "root",			  "command",	  "xml",		  "(val:bat[:oid,:xml],version:str,standalone:str):bat[:oid,:xml] ",																									  "BATXMLroot;"					  ]
[ "root",			  "command",	  "xml",		  "(val:xml,version:str,standalone:str):xml ",																												  "XMLroot;"					  ]
[ "rotate",			  "command",	  "mkey",		  "(v:wrd,nbits:int):wrd ",																														  "MKEYrotate;"					  ]
[ "rotate_xor_hash",		  "command",	  "batcalc",		  "(h:bat[:oid,:wrd],nbits:int,b:bat[:oid,:any_1]):bat[:oid,:int] ",																									  "MKEYbulk_rotate_xor_hash;"			  ]
[ "rotate_xor_hash",		  "pattern",	  "calc",		  "(h:wrd,nbits:int,v:any_1):wrd ",																													  "MKEYrotate_xor_hash;"			  ]
[ "round",			  "command",	  "sql",		  "(v:dbl,r:bte):dbl ",																															  "dbl_round_wrap;"				  ]
[ "round",			  "command",	  "sql",		  "(v:flt,r:bte):flt ",																															  "flt_round_wrap;"				  ]
[ "round",			  "command",	  "sql",		  "(v:lng,d:int,s:int,r:bte):lng ",																													  "lng_round_wrap;"				  ]
[ "round",			  "command",	  "sql",		  "(v:int,d:int,s:int,r:bte):int ",																													  "int_round_wrap;"				  ]
[ "round",			  "command",	  "sql",		  "(v:sht,d:int,s:int,r:bte):sht ",																													  "sht_round_wrap;"				  ]
[ "round",			  "command",	  "sql",		  "(v:bte,d:int,s:int,r:bte):bte ",																													  "bte_round_wrap;"				  ]
[ "round",			  "command",	  "mmath",		  "(x:dbl,y:int):dbl ",																															  "MATHbinary_ROUNDdbl;"			  ]
[ "round",			  "command",	  "mmath",		  "(x:flt,y:int):flt ",																															  "MATHbinary_ROUNDflt;"			  ]
[ "rowid",			  "command",	  "calc",		  "(v:any_1,schema:str,table:str):oid ",																												  "sql_rowid;"					  ]
[ "rows_affected",		  "command",	  "mapi",		  "(hdl:int):lng ",																															  "SERVERrows_affected;"			  ]
[ "rpc",			  "command",	  "mapi",		  "(key:int,qry:str):void ",																														  "SERVERquery;"				  ]
[ "rpc",			  "pattern",	  "mapi",		  "(key:int,qry:str):bat[:any_1,:any_2] ",																												  "SERVERmapi_rpc_bat;"				  ]
[ "rpc",			  "pattern",	  "mapi",		  "(key:int,qry:str...):any ",																														  "SERVERmapi_rpc_single_row;"			  ]
[ "rsColumn",			  "pattern",	  "sql",		  "(rs:int,tname:str,name:str,typename:str,digits:int,scale:int,col:bat[:oid,:any_1]):void ",																						  "mvc_result_column_wrap;"			  ]
[ "rsColumn",			  "pattern",	  "sql",		  "(rs:int,tname:str,name:str,typename:str,digits:int,scale:int,val:any_1):void ",																							  "mvc_result_value_wrap;"			  ]
[ "rtrim",			  "command",	  "batstr",		  "(s:bat[:oid,:str]):bat[:oid,:str] ",																													  "STRbatRtrim;"				  ]
[ "rtrim",			  "command",	  "str",		  "(s:str):str ",																															  "STRRtrim;"					  ]
[ "rule",			  "command",	  "mtime",		  "(mo:int,d:int,wkday:int,mi:int):zrule ",																												  "MTIMErule_create;"				  ]
[ "rule",			  "command",	  "mtime",		  "(s:str):zrule ",																															  "MTIMErule_fromstr;"				  ]
[ "sample",			  "command",	  "algebra",		  "(b:bat[:oid,:any_2],num:int):bat[:oid,:any_2] ",																											  "ALGsample;"					  ]
[ "saturation",			  "command",	  "batcolor",		  "(c:bat[:oid,:color]):bat[:oid,:flt] ",																												  "CLRbatSaturation;"				  ]
[ "saturation",			  "command",	  "batcolor",		  "(c:bat[:oid,:color]):bat[:oid,:int] ",																												  "CLRbatSaturationInt;"			  ]
[ "saturation",			  "command",	  "color",		  "(c:color):flt ",																															  "CLRsaturation;"				  ]
[ "saturation",			  "command",	  "color",		  "(c:color):int ",																															  "CLRsaturationInt;"				  ]
[ "save",			  "command",	  "bat",		  "(nme:str):bit ",																															  "BKCsave;"					  ]
[ "save",			  "command",	  "bat",		  "(nme:bat[:any_1,:any_2]):void ",																													  "BKCsave2;"					  ]
[ "sdifference",		  "command",	  "algebra",		  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																								  "ALGsdiff;"					  ]
[ "search",			  "pattern",	  "manual",		  "(text:str):void ",																															  "MANUALsearch;"				  ]
[ "search",			  "command",	  "batstr",		  "(s:bat[:oid,:str],c:str):bat[:oid,:int] ",																												  "STRbatstrSearchcst;"				  ]
[ "search",			  "command",	  "batstr",		  "(s:bat[:oid,:str],c:bat[:oid,:str]):bat[:oid,:int] ",																										  "STRbatstrSearch;"				  ]
[ "search",			  "command",	  "str",		  "(s:str,c:str):int ",																															  "STRstrSearch;"				  ]
[ "second_interval",		  "command",	  "calc",		  "(v:daytime,ek:int,sk:int):lng ",																													  "second_interval_daytime;"			  ]
[ "second_interval",		  "command",	  "calc",		  "(v:lng,ek:int,sk:int):lng ",																														  "second_interval_lng;"			  ]
[ "second_interval",		  "command",	  "calc",		  "(v:wrd,ek:int,sk:int):lng ",																														  "second_interval_wrd;"			  ]
[ "second_interval",		  "command",	  "calc",		  "(v:int,ek:int,sk:int):lng ",																														  "second_interval_int;"			  ]
[ "second_interval",		  "command",	  "calc",		  "(v:sht,ek:int,sk:int):lng ",																														  "second_interval_sht;"			  ]
[ "second_interval",		  "command",	  "calc",		  "(v:bte,ek:int,sk:int):lng ",																														  "second_interval_bte;"			  ]
[ "second_interval",		  "command",	  "calc",		  "(v:str,ek:int,sk:int):lng ",																														  "second_interval_str;"			  ]
[ "second_interval",		  "command",	  "calc",		  "(sc:int,v:lng,ek:int,sk:int):lng ",																													  "lng_dec2second_interval;"			  ]
[ "second_interval",		  "command",	  "calc",		  "(sc:int,v:int,ek:int,sk:int):lng ",																													  "int_dec2second_interval;"			  ]
[ "second_interval",		  "command",	  "calc",		  "(sc:int,v:sht,ek:int,sk:int):lng ",																													  "sht_dec2second_interval;"			  ]
[ "second_interval",		  "command",	  "calc",		  "(sc:int,v:bte,ek:int,sk:int):lng ",																													  "bte_dec2second_interval;"			  ]
[ "seconds",			  "command",	  "mtime",		  "(msecs:lng):int ",																															  "MTIMEsql_seconds;"				  ]
[ "seconds",			  "command",	  "mtime",		  "(t:timestamp):int ",																															  "MTIMEtimestamp_seconds;"			  ]
[ "seconds",			  "command",	  "mtime",		  "(d:daytime):int ",																															  "MTIMEdaytime_extract_seconds;"		  ]
[ "seconds",			  "command",	  "batmtime",		  "(d:bat[:any_1,:daytime]):bat[:any_1,:int] ",																												  "MTIMEdaytime_extract_seconds_bulk;"		  ]
[ "section",			  "pattern",	  "manual",		  "(mod:str):void ",																															  "MANUALcreateSection;"			  ]
[ "select",			  "command",	  "pcre",		  "(pat:str,strs:bat[:any_1,:str]):bat[:any_1,:str] ",																											  "PCREselectDef;"				  ]
[ "select",			  "command",	  "algebra",		  "(b:bat[:any_2,:void],low:any_2,high:any_2,li:bit,hi:bit):bat[:any_2,:void] ",																							  "ALGselectInclusiveHead;"			  ]
[ "select",			  "command",	  "algebra",		  "(b:bat[:any_2,:void],low:any_2,high:any_2):bat[:any_2,:void] ",																									  "ALGselectHead;"				  ]
[ "select",			  "command",	  "algebra",		  "(b:bat[:any_2,:void],low:any_2):bat[:any_2,:void] ",																											  "ALGselect1Head;"				  ]
[ "select",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],value:any_2):bat[:any_1,:any_2] ",																										  "ALGselect1;"					  ]
[ "select",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],low:any_2,high:any_2,li:bit,hi:bit):bat[:any_1,:any_2] ",																							  "ALGselectInclusive;"				  ]
[ "select",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],low:any_2,high:any_2):bat[:any_1,:any_2] ",																									  "ALGselect;"					  ]
[ "selectH",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],value:any_1):bat[:any_1,:any_2] ",																										  "ALGselect1Head;"				  ]
[ "selectH",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],low:any_1,high:any_1,li:bit,hi:bit):bat[:any_1,:any_2] ",																							  "ALGselectInclusiveHead;"			  ]
[ "selectH",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],low:any_1,high:any_1):bat[:any_1,:any_2] ",																									  "ALGselectHead;"				  ]
[ "selectNotNil",		  "command",	  "algebra",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "ALGselectNotNil;"				  ]
[ "semijoin",			  "command",	  "algebra",		  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] ",																								  "ALGsemijoin;"				  ]
[ "semijoinPath",		  "pattern",	  "algebra",		  "(l:bat[:any,:any]...):bat[:any,:any] ",																												  "ALGjoinPath;"				  ]
[ "serialize",			  "command",	  "xml",		  "(val:bat[:oid,:xml]):bat[:oid,:str] ",																												  "BATXMLxml2str;"				  ]
[ "set",			  "command",	  "lock",		  "(l:lock):void ",																															  "LCKset;"					  ]
[ "setAccess",			  "command",	  "bat",		  "(b:bat[:any_1,:any_2],mode:str):bat[:any_1,:any_2] ",																										  "BKCsetAccess;"				  ]
[ "setAdmPolicy",		  "pattern",	  "recycle",		  "(p:int...):void ",																															  "RECYCLEsetAdmission;"			  ]
[ "setAlias",			  "command",	  "mapi",		  "(dbalias:str):void ",																														  "SERVERsetAlias;"				  ]
[ "setAll",			  "pattern",	  "profiler",		  "():void ",																																  "CMDsetAllProfiler;"				  ]
[ "setAppendMode",		  "command",	  "bat",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "BKCsetAppendMode;"				  ]
[ "setBase",			  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2],c:bat[:any_1,:any_2]...):void ",										  "CMDsetBase;"						  ]
[ "setBracket",			  "pattern",	  "tablet",		  "(idx:int,lbrk:str,rbrk:str):void ",																													  "TABsetColumnBracket;"			  ]
[ "setCachePolicy",		  "pattern",	  "recycle",		  "(p:int,cl:int,mem:int,alpha:flt):void ",																												  "RECYCLEsetCache;"				  ]
[ "setCachePolicy",		  "pattern",	  "recycle",		  "(p:int...):void ",																															  "RECYCLEsetCache;"				  ]
[ "setCatch",			  "pattern",	  "mdb",		  "(b:bit):void ",																															  "MDBsetCatch;"				  ]
[ "setCold",			  "command",	  "bat",		  "(b:bat[:any_1,:any_1]):void ",																													  "BKCcoldBAT;"					  ]
[ "setColumn",			  "pattern",	  "tablet",		  "(idx:int,v:any_1):void ",																														  "TABsetColumn;"				  ]
[ "setColumn",			  "command",	  "bat",		  "(b:bat[:any_1,:any_2],h:str,t:str):void ",																												  "BKCsetColumns;"				  ]
[ "setColumn",			  "command",	  "bat",		  "(b:bat[:any_1,:any_2],t:str):void ",																													  "BKCsetColumn;"				  ]
[ "setComplaints",		  "pattern",	  "tablet",		  "(b:bat[:oid,:str]):void ",																														  "TABsetComplaints;"				  ]
[ "setCount",			  "pattern",	  "mdb",		  "(b:bit):void ",																															  "MDBsetCount;"				  ]
[ "setDebug",			  "pattern",	  "optimizer",		  "():void ",																																  "QOTdebugOptimizers;"				  ]
[ "setDebug",			  "command",	  "mdb",		  "(flg:int):int ",																															  "MDBsetDebug;"				  ]
[ "setDebug",			  "command",	  "mdb",		  "(flg:str):int ",																															  "MDBsetDebugStr;"				  ]
[ "setDecimal",			  "pattern",	  "tablet",		  "(idx:int,s:int,p:int):void ",																													  "TABsetColumnDecimal;"			  ]
[ "setDelimiter",		  "pattern",	  "tablet",		  "(sep:str):void ",																															  "TABsetDelimiter;"				  ]
[ "setEndPoint",		  "pattern",	  "profiler",		  "(mod:str,fcn:str):void ",																														  "CMDendPointProfiler;"			  ]
[ "setFilter",			  "pattern",	  "profiler",		  "(v:any):void ",																															  "CMDsetFilterVariable;"			  ]
[ "setFilter",			  "pattern",	  "profiler",		  "(mod:str,fcn:str):void ",																														  "CMDsetFilterProfiler;"			  ]
[ "setFlow",			  "pattern",	  "mdb",		  "(b:bit):void ",																															  "MDBsetFlow;"					  ]
[ "setFootprintFlag",		  "pattern",	  "profiler",		  "():void ",																																  "CMDsetFootprintFlag;"			  ]
[ "setFormat",			  "pattern",	  "tablet",		  "(b:any...):void ",																															  "TABsetFormat;"				  ]
[ "setGarbage",			  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2]):void ",													  "CMDBATsetGarbage;"					  ]
[ "setHash",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],prop:bit):bit ",												  "BKCsetHash;"						  ]
[ "setHistory",			  "pattern",	  "clients",		  "(s:str):void ",																															  "CLTsetHistory;"				  ]
[ "setHot",			  "command",	  "bat",		  "(b:bat[:any_1,:any_2]):void ",																													  "BKChotBAT;"					  ]
[ "setIO",			  "pattern",	  "mdb",		  "(b:bit):void ",																															  "MDBsetIO;"					  ]
[ "setIOTrace",			  "pattern",	  "language",		  "(flg:bit):void ",																															  "CMDsetIOTrace;"				  ]
[ "setKey",			  "command",	  "bat",		  "(b:bat[:any_1,:any_2],mode:bit):bat[:any_1,:any_2] ",																										  "BKCsetkey;"					  ]
[ "setListing",			  "pattern",	  "clients",		  "(flag:int):int ",																															  "CLTsetListing;"				  ]
[ "setMemory",			  "pattern",	  "mdb",		  "(b:bit):void ",																															  "MDBsetMemory;"				  ]
[ "setMemoryAdvise",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2],mode:int):bit ",												  "BKCmadvise2;"					  ]
[ "setMemoryAdvise",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2],head_mode:int,tail_mode:int,hheap_mode:int,theap_mode:int):bit ",						  "BKCmadvise;"						  ]
[ "setMemoryFlag",		  "pattern",	  "profiler",		  "():void ",																																  "CMDsetMemoryFlag;"				  ]
[ "setMemoryMap",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2],mode:int):bit ",												  "BKCmmap2;"						  ]
[ "setMemoryMap",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2],head_mode:int,tail_mode:int,hheap_mode:int,theap_mode:int):bit ",						  "BKCmmap;"						  ]
[ "setMemoryTrace",		  "pattern",	  "language",		  "(flg:bit):void ",																															  "CMDsetMemoryTrace;"				  ]
[ "setMemoryTrace",		  "pattern",	  "mdb",		  "(b:bit):void ",																															  "MDBsetBigfoot;"				  ]
[ "setName",			  "pattern",	  "tablet",		  "(idx:int,nme:str):void ",																														  "TABsetColumnName;"				  ]
[ "setName",			  "command",	  "bat",		  "(b:bat[:any_1,:any_2],s:str):void ",																													  "BKCsetName;"					  ]
[ "setNone",			  "pattern",	  "profiler",		  "():void ",																																  "CMDsetNoneProfiler;"				  ]
[ "setNull",			  "pattern",	  "tablet",		  "(idx:int,fmt:str):void ",																														  "TABsetColumnNull;"				  ]
[ "setPassword",		  "pattern",	  "clients",		  "(user:str,pass:str):void ",																														  "CLTsetPassword;"				  ]
[ "setPersistent",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):void ",													  "BKCsetPersistent;"					  ]
[ "setPersistent",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2],f:bit):void ",													  "BKCpersists;"					  ]
[ "setPivot",			  "pattern",	  "tablet",		  "(b:bat[:void,:oid]):void ",																														  "TABsetPivot;"				  ]
[ "setPosition",		  "pattern",	  "tablet",		  "(idx:int,f:int,i:int):void ",																													  "TABsetColumnPosition;"			  ]
[ "setProperties",		  "pattern",	  "tablet",		  "(prop:str):int ",																															  "TABsetProperties;"				  ]
[ "setReadMode",		  "command",	  "bat",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "BKCsetReadMode;"				  ]
[ "setReusePolicy",		  "pattern",	  "recycle",		  "(p:int...):void ",																															  "RECYCLEsetReuse;"				  ]
[ "setRole",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:str,t:str):void ",												  "BKCsetRole;"						  ]
[ "setRowBracket",		  "pattern",	  "tablet",		  "(lbrk:str,rbrk:str):void ",																														  "TABsetRowBracket;"				  ]
[ "setScenario",		  "pattern",	  "clients",		  "(msg:str):str ",																															  "CLTsetScenario;"				  ]
[ "setSet",			  "command",	  "bat",		  "(b:bat[:any_1,:any_2],mode:bit):bat[:any_1,:any_2] ",																										  "BKCsetSet;"					  ]
[ "setSorted",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",													  "BKCsetSorted;"					  ]
[ "setStartPoint",		  "pattern",	  "profiler",		  "(mod:str,fcn:str):void ",																														  "CMDstartPointProfiler;"			  ]
[ "setStream",			  "pattern",	  "tablet",		  "(s:streams):void ",																															  "TABsetStream;"				  ]
[ "setTableBracket",		  "pattern",	  "tablet",		  "(lbrk:str,rbrk:str):void ",																														  "TABsetTableBracket;"				  ]
[ "setThread",			  "pattern",	  "mdb",		  "(b:bit):void ",																															  "MDBsetThread;"				  ]
[ "setThreadTrace",		  "pattern",	  "language",		  "(flg:bit):void ",																															  "CMDsetThreadTrace;"				  ]
[ "setTimeout",			  "pattern",	  "clients",		  "(q:int,s:int):void ",																														  "CLTsetTimeout;"				  ]
[ "setTimer",			  "pattern",	  "mdb",		  "(b:bit):void ",																															  "MDBsetTimer;"				  ]
[ "setTimerTrace",		  "pattern",	  "language",		  "(flg:bit):void ",																															  "CMDsetTimerTrace;"				  ]
[ "setTimezone",		  "command",	  "mtime",		  "(name:str):timezone ",																														  "MTIMEtimezone;"				  ]
[ "setTrace",			  "pattern",	  "mdb",		  "(b:str):void ",																															  "MDBsetVarTrace;"				  ]
[ "setTrace",			  "pattern",	  "mdb",		  "(b:bit):void ",																															  "MDBsetTrace;"				  ]
[ "setTransient",		  "command",	  "bat",		  "(b:bat[:any_1,:any_2]):void ",																													  "BKCsetTransient;"				  ]
[ "setTrap",			  "pattern",	  "mdb",		  "(idx:int):void ",																															  "mdbTrapClient;"				  ]
[ "setTrap",			  "pattern",	  "mdb",		  "(mod:str,fcn:str,b:bit):void ",																													  "MDBtrapFunction;"				  ]
[ "setTryAll",			  "pattern",	  "tablet",		  "():void ",																																  "TABsetTryAll;"				  ]
[ "setVariable",		  "pattern",	  "sql",		  "(mvc:int,varname:str,value:any_1):int ",																												  "setVariable;"				  ]
[ "setWidth",			  "pattern",	  "tablet",		  "(idx:int,maxwidth:int):void ",																													  "TABsetColumnWidth;"				  ]
[ "setWriteMode",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "BKCsetWriteMode;"					  ]
[ "setenv",			  "command",	  "unix",		  "(nme:str,val:str):bit ",																														  "UNIXsetenv;"					  ]
[ "setmasklen",			  "command",	  "inet",		  "(X_1:inet,X_2:int):inet ",																														  "INETsetmasklen;"				  ]
[ "setoid",			  "command",	  "calc",		  "():oid ",																																  "CALCsetoidBase;"				  ]
[ "setoid",			  "command",	  "calc",		  "(base:oid):oid ",																															  "CALCsetoidInc;"				  ]
[ "setoid",			  "command",	  "calc",		  "(v:oid):void ",																															  "oidSetoidImpl;"				  ]
[ "setoid",			  "command",	  "calc",		  "(v:lng):void ",																															  "lngSetoidImpl;"				  ]
[ "setoid",			  "command",	  "calc",		  "(v:int):void ",																															  "intSetoidImpl;"				  ]
[ "sha1sum",			  "command",	  "clients",		  "(pw:str):str ",																															  "CLTsha1sum;"					  ]
[ "sha2sum",			  "command",	  "clients",		  "(pw:str,bits:int):str ",																														  "CLTsha2sum;"					  ]
[ "showFlowGraph",		  "pattern",	  "optimizer",		  "(M:str,F:str,s:str):void ",																														  "QOTshowFlowGraph;"				  ]
[ "showPlan",			  "pattern",	  "optimizer",		  "():void ",																																  "QOTshowPlan;"				  ]
[ "showPlan",			  "pattern",	  "optimizer",		  "(M:str,F:str,s:str):void ",																														  "QOTshowPlan;"				  ]
[ "shrink",			  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",																														  "SQLshrink;"					  ]
[ "shrink",			  "command",	  "bat",		  "(b:bat[:oid,:any_1],del:bat[:oid,:oid]):bat[:oid,:any_1] ",																										  "BKCshrinkBAT;"				  ]
[ "shrinkMap",			  "command",	  "bat",		  "(b:bat[:oid,:any_1],del:bat[:oid,:oid]):bat[:oid,:oid] ",																										  "BKCshrinkBATmap;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng],d2:int,s2:int):bat[:oid,:sht] ",																										  "batlng_dec2dec_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng]):bat[:oid,:sht] ",																												  "batlng_dec2_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(v:bat[:oid,:lng],digits:int,scale:int):bat[:oid,:sht] ",																										  "batlng_num2dec_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(v:bat[:oid,:lng]):bat[:oid,:sht] ",																													  "batlng_2_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd],d2:int,s2:int):bat[:oid,:sht] ",																										  "batwrd_dec2dec_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd]):bat[:oid,:sht] ",																												  "batwrd_dec2_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(v:bat[:oid,:wrd],digits:int,scale:int):bat[:oid,:sht] ",																										  "batwrd_num2dec_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(v:bat[:oid,:wrd]):bat[:oid,:sht] ",																													  "batwrd_2_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int],d2:int,s2:int):bat[:oid,:sht] ",																										  "batint_dec2dec_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int]):bat[:oid,:sht] ",																												  "batint_dec2_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(v:bat[:oid,:int],digits:int,scale:int):bat[:oid,:sht] ",																										  "batint_num2dec_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(v:bat[:oid,:int]):bat[:oid,:sht] ",																													  "batint_2_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht],d2:int,s2:int):bat[:oid,:sht] ",																										  "batsht_dec2dec_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht]):bat[:oid,:sht] ",																												  "batsht_dec2_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(v:bat[:oid,:sht],digits:int,scale:int):bat[:oid,:sht] ",																										  "batsht_num2dec_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(v:bat[:oid,:sht]):bat[:oid,:sht] ",																													  "batsht_2_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte],d2:int,s2:int):bat[:oid,:sht] ",																										  "batbte_dec2dec_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte]):bat[:oid,:sht] ",																												  "batbte_dec2_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(v:bat[:oid,:bte],digits:int,scale:int):bat[:oid,:sht] ",																										  "batbte_num2dec_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(v:bat[:oid,:bte]):bat[:oid,:sht] ",																													  "batbte_2_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(v:bat[:oid,:dbl],digits:int,scale:int):bat[:oid,:sht] ",																										  "batdbl_num2dec_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(v:bat[:oid,:dbl]):bat[:oid,:sht] ",																													  "batdbl_2_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(v:bat[:oid,:flt],digits:int,scale:int):bat[:oid,:sht] ",																										  "batflt_num2dec_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(v:bat[:oid,:flt]):bat[:oid,:sht] ",																													  "batflt_2_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(v:bat[:oid,:str],digits:int,scale:int):bat[:oid,:sht] ",																										  "batstr_2dec_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(v:bat[:oid,:str],digits:int):bat[:oid,:sht] ",																											  "batstr_2num_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(v:bat[:oid,:str]):bat[:oid,:sht] ",																													  "batstr_2_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(b:bat[:any_1,:bit]):bat[:any_1,:sht] ",																												  "CMDconvert_bit_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl]):bat[:any_1,:sht] ",																												  "CMDconvert_dbl_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(b:bat[:any_1,:flt]):bat[:any_1,:sht] ",																												  "CMDconvert_flt_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(b:bat[:any_1,:oid]):bat[:any_1,:sht] ",																												  "CMDconvert_oid_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(b:bat[:any_1,:lng]):bat[:any_1,:sht] ",																												  "CMDconvert_lng_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd]):bat[:any_1,:sht] ",																												  "CMDconvert_wrd_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(b:bat[:any_1,:int]):bat[:any_1,:sht] ",																												  "CMDconvert_int_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(b:bat[:any_1,:bte]):bat[:any_1,:sht] ",																												  "CMDconvert_bte_sht;"				  ]
[ "sht",			  "command",	  "batcalc",		  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] ",																												  "CMDconvert_sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(s1:int,v:lng,d2:int,s2:int):sht ",																													  "lng_dec2dec_sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(s1:int,v:lng):sht ",																														  "lng_dec2_sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(v:lng,digits:int,scale:int):sht ",																													  "lng_num2dec_sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(v:lng):sht ",																															  "lng_2_sht;"					  ]
[ "sht",			  "command",	  "calc",		  "(s1:int,v:wrd,d2:int,s2:int):sht ",																													  "wrd_dec2dec_sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(s1:int,v:wrd):sht ",																														  "wrd_dec2_sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(v:wrd,digits:int,scale:int):sht ",																													  "wrd_num2dec_sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(v:wrd):sht ",																															  "wrd_2_sht;"					  ]
[ "sht",			  "command",	  "calc",		  "(s1:int,v:int,d2:int,s2:int):sht ",																													  "int_dec2dec_sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(s1:int,v:int):sht ",																														  "int_dec2_sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(v:int,digits:int,scale:int):sht ",																													  "int_num2dec_sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(v:int):sht ",																															  "int_2_sht;"					  ]
[ "sht",			  "command",	  "calc",		  "(s1:int,v:sht,d2:int,s2:int):sht ",																													  "sht_dec2dec_sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(s1:int,v:sht):sht ",																														  "sht_dec2_sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(v:sht,digits:int,scale:int):sht ",																													  "sht_num2dec_sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(v:sht):sht ",																															  "sht_2_sht;"					  ]
[ "sht",			  "command",	  "calc",		  "(s1:int,v:bte,d2:int,s2:int):sht ",																													  "bte_dec2dec_sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(s1:int,v:bte):sht ",																														  "bte_dec2_sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(v:bte,digits:int,scale:int):sht ",																													  "bte_num2dec_sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(v:bte):sht ",																															  "bte_2_sht;"					  ]
[ "sht",			  "command",	  "calc",		  "(v:dbl,digits:int,scale:int):sht ",																													  "dbl_num2dec_sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(v:dbl):sht ",																															  "dbl_2_sht;"					  ]
[ "sht",			  "command",	  "calc",		  "(v:flt,digits:int,scale:int):sht ",																													  "flt_num2dec_sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(v:flt):sht ",																															  "flt_2_sht;"					  ]
[ "sht",			  "command",	  "calc",		  "(v:str,digits:int,scale:int):sht ",																													  "str_2dec_sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(v:str,digits:int):sht ",																														  "str_2num_sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(v:str):sht ",																															  "str_2_sht;"					  ]
[ "sht",			  "command",	  "calc",		  "(v:void):sht ",																															  "CALCnil2sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(v:str):sht ",																															  "CALCstr2sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(x:dbl):sht ",																															  "CALCdbl2sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(x:flt):sht ",																															  "CALCflt2sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(x:lng):sht ",																															  "CALClng2sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(x:wrd):sht ",																															  "CALCwrd2sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(x:int):sht ",																															  "CALCint2sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(x:sht):sht ",																															  "CALCsht2sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(x:bte):sht ",																															  "CALCbte2sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(x:bit):sht ",																															  "CALCbit2sht;"				  ]
[ "sht",			  "command",	  "calc",		  "(x:oid):sht ",																															  "CALCoid2sht;"				  ]
[ "shutdown",			  "pattern",	  "recycle",		  "():void ",																																  "RECYCLEshutdownWrap;"			  ]
[ "shutdown",			  "pattern",	  "factories",		  "(m:str,f:str):void ",																														  "FCTshutdown;"				  ]
[ "shutdown",			  "command",	  "clients",		  "(forced:bit):void ",																															  "CLTshutdown;"				  ]
[ "sign",			  "command",	  "calc",		  "(x:dbl):int ",																															  "CALCunarydblSIGN;"				  ]
[ "sign",			  "command",	  "calc",		  "(x:lng):int ",																															  "CALCunarylngSIGN;"				  ]
[ "sign",			  "command",	  "calc",		  "(x:flt):int ",																															  "CALCunaryfltSIGN;"				  ]
[ "sign",			  "command",	  "calc",		  "(x:wrd):int ",																															  "CALCunarywrdSIGN;"				  ]
[ "sign",			  "command",	  "calc",		  "(x:int):int ",																															  "CALCunaryintSIGN;"				  ]
[ "sign",			  "command",	  "calc",		  "(x:sht):int ",																															  "CALCunaryshtSIGN;"				  ]
[ "sign",			  "command",	  "calc",		  "(x:bte):int ",																															  "CALCunarybteSIGN;"				  ]
[ "sign",			  "command",	  "calc",		  "(x:bit):int ",																															  "CALCunarybitSIGN;"				  ]
[ "similarity",			  "command",	  "txtsim",		  "(string1:str,string2:str):dbl ",																													  "fstrcmp0_impl;"				  ]
[ "similarity",			  "command",	  "txtsim",		  "(string1:str,string2:str,minimum:dbl):dbl ",																												  "fstrcmp_impl;"				  ]
[ "sin",			  "command",	  "batmmath",		  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",																													  "CMDscience_bat_flt_sin;"			  ]
[ "sin",			  "command",	  "batmmath",		  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",																													  "CMDscience_bat_dbl_sin;"			  ]
[ "sin",			  "command",	  "mmath",		  "(x:dbl):dbl ",																															  "MATHunary_SINdbl;"				  ]
[ "sin",			  "command",	  "mmath",		  "(x:flt):flt ",																															  "MATHunary_SINflt;"				  ]
[ "single",			  "function",	  "sql",		  "(x:any_2):bat[:oid,:any_2];",																													  "nil"						  ]
[ "singleton",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTsingleton;"				  ]
[ "singleton",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTsingleton;"				  ]
[ "sinh",			  "command",	  "batmmath",		  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",																													  "CMDscience_bat_flt_sinh;"			  ]
[ "sinh",			  "command",	  "batmmath",		  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",																													  "CMDscience_bat_dbl_sinh;"			  ]
[ "sinh",			  "command",	  "mmath",		  "(x:dbl):dbl ",																															  "MATHunary_SINHdbl;"				  ]
[ "sinh",			  "command",	  "mmath",		  "(x:flt):flt ",																															  "MATHunary_SINHflt;"				  ]
[ "sintersect",			  "command",	  "algebra",		  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																								  "ALGsintersect;"				  ]
[ "size",			  "command",	  "group",		  "(b:bat[:any_2,:bit],e:bat[:any_2,:any_1]):bat[:any_2,:wrd] ",																									  "GRPsize;"					  ]
[ "size",			  "command",	  "aggr",		  "(b:bat[:void,:bit],e:bat[:void,:any_1]):bat[:void,:wrd] ",																										  "AX3aggrX3_size;"				  ]
[ "sizeof",			  "command",	  "calc",		  "(x:dbl):int ",																															  "CALCsizeofdbl;"				  ]
[ "sizeof",			  "command",	  "calc",		  "(x:lng):int ",																															  "CALCsizeoflng;"				  ]
[ "sizeof",			  "command",	  "calc",		  "(x:flt):int ",																															  "CALCsizeofflt;"				  ]
[ "sizeof",			  "command",	  "calc",		  "(x:wrd):int ",																															  "CALCsizeofwrd;"				  ]
[ "sizeof",			  "command",	  "calc",		  "(x:int):int ",																															  "CALCsizeofint;"				  ]
[ "sizeof",			  "command",	  "calc",		  "(x:sht):int ",																															  "CALCsizeofsht;"				  ]
[ "sizeof",			  "command",	  "calc",		  "(x:bte):int ",																															  "CALCsizeofbte;"				  ]
[ "sizeof",			  "command",	  "calc",		  "(x:bit):int ",																															  "CALCsizeofbit;"				  ]
[ "sleep",			  "command",	  "alarm",		  "(secs:int):void ",																															  "ALARMsleep;"					  ]
[ "slice",			  "command",	  "zorder",		  "(xb:int,yb:int,xt:int,yt:int):bat[:oid,:oid] ",																											  "ZORDslice_int;"				  ]
[ "slice",			  "pattern",	  "mat",		  "(first:lng,last:lng,b:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",																									  "MATpackSlice;"				  ]
[ "slice",			  "pattern",	  "mat",		  "(first:int,last:int,b:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",																									  "MATpackSlice;"				  ]
[ "slice",			  "pattern",	  "mat",		  "(first:wrd,last:wrd,b:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",																									  "MATpackSlice;"				  ]
[ "slice",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],x:wrd,y:wrd):bat[:any_1,:any_2] ",																										  "ALGslice_wrd;"				  ]
[ "slice",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],x:int,y:int):bat[:any_1,:any_2] ",																										  "ALGslice_int;"				  ]
[ "slice",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],x:lng,y:lng):bat[:any_1,:any_2] ",																										  "ALGslice;"					  ]
[ "socketRead",			  "command",	  "streams",	  "(skt:int,name:str):streams ",													  "mnstr_socket_rastreamwrap;"				  ]
[ "socketReadBytes",		  "command",	  "streams",	  "(skt:int,name:str):streams ",													  "mnstr_socket_rstreamwrap;"				  ]
[ "socketWrite",		  "command",	  "streams",		  "(skt:int,name:str):streams ",																													  "mnstr_socket_wastreamwrap;"			  ]
[ "socketWriteBytes",		  "command",	  "streams",		  "(skt:int,name:str):streams ",																													  "mnstr_socket_wstreamwrap;"			  ]
[ "sort",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "ALGhsort;"					  ]
[ "sortHT",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "ALGhtsort;"					  ]
[ "sortReverse",		  "command",	  "algebra",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "ALGhsort_rev;"				  ]
[ "sortReverseTail",		  "pattern",	  "mat",		  "(b:bat[:any_1,:any_2]...) (sorted:bat[:void,:any_2],map:bat[:void,:bte]) ",																								  "MATsortReverseTail;"				  ]
[ "sortReverseTail",		  "command",	  "algebra",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "ALGtsort_rev;"				  ]
[ "sortTH",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "ALGthsort;"					  ]
[ "sortTail",			  "pattern",	  "mat",		  "(b:bat[:any_1,:any_2]...) (sorted:bat[:void,:any_2],map:bat[:void,:bte]) ",																								  "MATsortTail;"				  ]
[ "sortTail",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "ALGtsort;"					  ]
[ "soundex",			  "command",	  "txtsim",		  "(name:str):str ",																															  "soundex_impl;"				  ]
[ "source",			  "pattern",	  "language",		  "(f:str):void ",																															  "CMDevalFile;"				  ]
[ "space",			  "command",	  "str",		  "(l:int):str ",																															  "STRspace;"					  ]
[ "split",			  "pattern",	  "cluster",		  "(clustered:bat[:oid,:any_1],psum:bat[:oid,:wrd]):bat[:oid,:any_1]... ",																								  "CLS_split;"					  ]
[ "split",			  "command",	  "algebra",		  "(b:bat[:lng,:oid]):bat[:oid,:oid] ",																													  "ALGsplit;"					  ]
[ "sql2pcre",			  "command",	  "pcre",		  "(pat:str,esc:str):str ",																														  "PCREsql2pcre;"				  ]
[ "sql_append",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTsql_append;"				  ]
[ "sql_append",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTsql_append;"				  ]
[ "sql_environment",		  "function",	  "sql",		  "() (name:bat[:oid,:str],value:bat[:oid,:str]);",																											  "nil"						  ]
[ "sql_seconds",		  "command",	  "mtime",		  "(t:timestamp):int ",																															  "MTIMEtimestamp_sql_seconds;"			  ]
[ "sql_seconds",		  "command",	  "mtime",		  "(d:daytime):int ",																															  "MTIMEdaytime_extract_sql_seconds;"		  ]
[ "sql_seconds",		  "command",	  "batmtime",		  "(d:bat[:any_1,:daytime]):bat[:any_1,:int] ",																												  "MTIMEdaytime_extract_sql_seconds_bulk;"	  ]
[ "sql_slice",			  "command",	  "zorder",		  "(xb:int,yb:int,xt:int,yt:int):bat[:str,:BAT] ",																											  "ZORDsql_slice_int;"				  ]
[ "sql_variables",		  "pattern",	  "sql",		  "():bat[:oid,:str] ",																															  "sql_variables;"				  ]
[ "sqladd",			  "command",	  "calc",		  "(left:lng,right:dbl):dbl ",																														  "CALCbinarySQLADDlngdbl;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:lng,right:flt):dbl ",																														  "CALCbinarySQLADDlngflt;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:lng,right:lng):lng ",																														  "CALCbinarySQLADDlnglng;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:lng,right:wrd):lng ",																														  "CALCbinarySQLADDlngwrd;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:lng,right:int):lng ",																														  "CALCbinarySQLADDlngint;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:lng,right:sht):lng ",																														  "CALCbinarySQLADDlngsht;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:lng,right:bte):lng ",																														  "CALCbinarySQLADDlngbte;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:dbl,right:dbl):dbl ",																														  "CALCbinarySQLADDdbldbl;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:dbl,right:flt):dbl ",																														  "CALCbinarySQLADDdblflt;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:dbl,right:lng):dbl ",																														  "CALCbinarySQLADDdbllng;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:dbl,right:wrd):dbl ",																														  "CALCbinarySQLADDdblwrd;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:dbl,right:int):dbl ",																														  "CALCbinarySQLADDdblint;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:dbl,right:sht):dbl ",																														  "CALCbinarySQLADDdblsht;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:dbl,right:bte):dbl ",																														  "CALCbinarySQLADDdblbte;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:flt,right:dbl):dbl ",																														  "CALCbinarySQLADDfltdbl;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:flt,right:flt):flt ",																														  "CALCbinarySQLADDfltflt;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:flt,right:lng):flt ",																														  "CALCbinarySQLADDfltlng;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:flt,right:wrd):flt ",																														  "CALCbinarySQLADDfltwrd;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:flt,right:int):flt ",																														  "CALCbinarySQLADDfltint;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:flt,right:sht):flt ",																														  "CALCbinarySQLADDfltsht;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:flt,right:bte):flt ",																														  "CALCbinarySQLADDfltbte;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:wrd,right:dbl):dbl ",																														  "CALCbinarySQLADDwrddbl;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:wrd,right:flt):flt ",																														  "CALCbinarySQLADDwrdflt;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:wrd,right:lng):lng ",																														  "CALCbinarySQLADDwrdlng;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:wrd,right:wrd):wrd ",																														  "CALCbinarySQLADDwrdwrd;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:wrd,right:int):wrd ",																														  "CALCbinarySQLADDwrdint;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:wrd,right:sht):wrd ",																														  "CALCbinarySQLADDwrdsht;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:wrd,right:bte):wrd ",																														  "CALCbinarySQLADDwrdbte;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:int,right:dbl):dbl ",																														  "CALCbinarySQLADDintdbl;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:int,right:flt):flt ",																														  "CALCbinarySQLADDintflt;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:int,right:lng):lng ",																														  "CALCbinarySQLADDintlng;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:int,right:wrd):wrd ",																														  "CALCbinarySQLADDintwrd;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:int,right:int):int ",																														  "CALCbinarySQLADDintint;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:int,right:sht):int ",																														  "CALCbinarySQLADDintsht;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:int,right:bte):int ",																														  "CALCbinarySQLADDintbte;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:sht,right:dbl):dbl ",																														  "CALCbinarySQLADDshtdbl;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:sht,right:flt):flt ",																														  "CALCbinarySQLADDshtflt;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:sht,right:lng):lng ",																														  "CALCbinarySQLADDshtlng;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:sht,right:wrd):wrd ",																														  "CALCbinarySQLADDshtwrd;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:sht,right:int):int ",																														  "CALCbinarySQLADDshtint;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:sht,right:sht):sht ",																														  "CALCbinarySQLADDshtsht;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:sht,right:bte):sht ",																														  "CALCbinarySQLADDshtbte;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:bte,right:dbl):dbl ",																														  "CALCbinarySQLADDbtedbl;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:bte,right:flt):flt ",																														  "CALCbinarySQLADDbteflt;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:bte,right:lng):lng ",																														  "CALCbinarySQLADDbtelng;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:bte,right:wrd):wrd ",																														  "CALCbinarySQLADDbtewrd;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:bte,right:int):int ",																														  "CALCbinarySQLADDbteint;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:bte,right:sht):sht ",																														  "CALCbinarySQLADDbtesht;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:bte,right:bte):bte ",																														  "CALCbinarySQLADDbtebte;"			  ]
[ "sqladd",			  "command",	  "calc",		  "(left:oid,right:oid):oid ",																														  "CALCbinarySQLADDoidoid;"			  ]
[ "sqlblob",			  "command",	  "batcalc",		  "(v:bat[:oid,:str]):bat[:oid,:sqlblob] ",																												  "batstr_2_sqlblob;"				  ]
[ "sqlblob",			  "command",	  "sqlblob",		  "(s:str):sqlblob ",																															  "BLOBsqlblob_fromstr;"			  ]
[ "sqlblob",			  "command",	  "sqlblob",		  "(s:sqlblob):sqlblob ",																														  "BLOBblob_blob;"				  ]
[ "sqlblob",			  "command",	  "calc",		  "(v:str):sqlblob ",																															  "str_2_sqlblob;"				  ]
[ "sqlblob",			  "command",	  "calc",		  "(s:str):sqlblob ",																															  "BLOBsqlblob_fromstr;"			  ]
[ "sqlblob",			  "command",	  "calc",		  "(b:sqlblob):sqlblob ",																														  "BLOBblob_blob;"				  ]
[ "sqlrand",			  "command",	  "mmath",	  "(seed:int):int ",											  "MATHsqlrandint;"				  ]
[ "sqrt",			  "command",	  "batmmath",		  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",																													  "CMDscience_bat_flt_sqrt;"			  ]
[ "sqrt",			  "command",	  "batmmath",		  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",																													  "CMDscience_bat_dbl_sqrt;"			  ]
[ "sqrt",			  "command",	  "mmath",	  "(y:dbl):dbl ",															  "MATHunary_SQRTdbl;"					  ]
[ "sqrt",			  "command",	  "mmath",	  "(y:flt):flt ",															  "MATHunary_SQRTflt;"					  ]
[ "srand",			  "command",	  "mmath",		  "(seed:int):void ",																															  "MATHsrandint;"				  ]
[ "srvpool",			  "pattern",	  "scheduler",		  "():int ",																																  "SRVPOOLscheduler;"				  ]
[ "ssort",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "ALGssort;"					  ]
[ "ssort_rev",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "ALGssort_rev;"				  ]
[ "start",			  "pattern",	  "sql",		  "():void ",																																  "SQLsession;"					  ]
[ "start",			  "pattern",	  "profiler",		  "():void ",																																  "CMDstartProfiler;"				  ]
[ "start",			  "pattern",	  "recycle",		  "():void ",																																  "RECYCLEstart;"				  ]
[ "start",			  "pattern",	  "mdb",		  "(mod:str,fcn:str):void ",																														  "MDBstartFactory;"				  ]
[ "start",			  "pattern",	  "mdb",		  "(clientid:int):void ",																														  "MDBstart;"					  ]
[ "start",			  "pattern",	  "mdb",		  "():void ",																																  "MDBstart;"					  ]
[ "start2",			  "pattern",	  "sql",		  "():void ",																																  "SQLsession2;"				  ]
[ "start_dst",			  "command",	  "mtime",		  "(t:timezone):zrule ",																														  "MTIMEtzone_extract_start;"			  ]
[ "startsWith",			  "command",	  "batstr",		  "(s:bat[:oid,:str],prefix:str):bat[:oid,:bit] ",																											  "STRbatPrefixcst;"				  ]
[ "startsWith",			  "command",	  "batstr",		  "(s:bat[:oid,:str],prefix:bat[:oid,:str]):bat[:oid,:bit] ",																										  "STRbatPrefix;"				  ]
[ "startsWith",			  "command",	  "str",		  "(s:str,prefix:str):bit ",																														  "STRPrefix;"					  ]
[ "stddev",			  "function",	  "aggr",		  "(v:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:dbl];",																								  "nil"						  ]
[ "stddev",			  "function",	  "aggr",		  "(e:bat[:oid,:dbl]):dbl;",																														  "nil"						  ]
[ "stddev",			  "function",	  "aggr",		  "(v:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:flt];",																								  "nil"						  ]
[ "stddev",			  "function",	  "aggr",		  "(e:bat[:oid,:flt]):flt;",																														  "nil"						  ]
[ "stddev",			  "function",	  "aggr",		  "(v:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:lng];",																								  "nil"						  ]
[ "stddev",			  "function",	  "aggr",		  "(e:bat[:oid,:lng]):lng;",																														  "nil"						  ]
[ "stddev",			  "function",	  "aggr",		  "(v:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:int];",																								  "nil"						  ]
[ "stddev",			  "function",	  "aggr",		  "(e:bat[:oid,:int]):int;",																														  "nil"						  ]
[ "stddev",			  "function",	  "aggr",		  "(v:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:sht];",																								  "nil"						  ]
[ "stddev",			  "function",	  "aggr",		  "(e:bat[:oid,:sht]):sht;",																														  "nil"						  ]
[ "stddev",			  "function",	  "aggr",		  "(v:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:bte];",																								  "nil"						  ]
[ "stddev",			  "function",	  "aggr",		  "(e:bat[:oid,:bte]):bte;",																														  "nil"						  ]
[ "stddev_pop",			  "function",	  "aggr",		  "(v:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:dbl];",																								  "nil"						  ]
[ "stddev_pop",			  "function",	  "aggr",		  "(v:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:flt];",																								  "nil"						  ]
[ "stddev_pop",			  "function",	  "aggr",		  "(v:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:lng];",																								  "nil"						  ]
[ "stddev_pop",			  "function",	  "aggr",		  "(v:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:int];",																								  "nil"						  ]
[ "stddev_pop",			  "function",	  "aggr",		  "(v:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:sht];",																								  "nil"						  ]
[ "stddev_pop",			  "function",	  "aggr",		  "(v:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:bte];",																								  "nil"						  ]
[ "stderr",			  "pattern",	  "io",			  "():streams ",																															  "io_stderr;"					  ]
[ "stdev",			  "command",	  "aggr",		  "(b:bat[:any_1,:dbl]):dbl ",																														  "ALGstdev_dbl;"				  ]
[ "stdev",			  "command",	  "aggr",		  "(b:bat[:any_1,:flt]):dbl ",																														  "ALGstdev_flt;"				  ]
[ "stdev",			  "command",	  "aggr",		  "(b:bat[:any_1,:lng]):dbl ",																														  "ALGstdev_lng;"				  ]
[ "stdev",			  "command",	  "aggr",		  "(b:bat[:any_1,:wrd]):dbl ",																														  "ALGstdev_wrd;"				  ]
[ "stdev",			  "command",	  "aggr",		  "(b:bat[:any_1,:int]):dbl ",																														  "ALGstdev_int;"				  ]
[ "stdev",			  "command",	  "aggr",		  "(b:bat[:any_1,:sht]):dbl ",																														  "ALGstdev_sht;"				  ]
[ "stdev",			  "command",	  "aggr",		  "(b:bat[:any_1,:bte]):dbl ",																														  "ALGstdev_bte;"				  ]
[ "stdin",			  "pattern",	  "io",			  "():bstream ",																															  "io_stdin;"					  ]
[ "stdout",			  "pattern",	  "io",			  "():streams ",																															  "io_stdout;"					  ]
[ "stop",			  "pattern",	  "profiler",		  "():void ",																																  "CMDstopProfiler;"				  ]
[ "stop",			  "command",	  "mapi",		  "():void ",																																  "SERVERstop;"					  ]
[ "stop",			  "pattern",	  "recycle",		  "():void ",																																  "RECYCLEstop;"				  ]
[ "stop",			  "pattern",	  "clients",		  "(id:int):void ",																															  "CLTstop;"					  ]
[ "stop",			  "pattern",	  "mdb",		  "():void ",																																  "MDBstop;"					  ]
[ "storage",			  "pattern",	  "sql",		  "() (schema:bat[:oid,:str],table:bat[:oid,:str],column:bat[:oid,:str],location:bat[:oid,:str],count:bat[:oid,:lng],capacity:bat[:oid,:lng],width:bat[:oid,:int],size:bat[:oid,:lng],hashsize:bat[:oid,:lng],sorted:bat[:oid,:bit]) ",					  "sql_storage;"				  ]
[ "str",			  "command",	  "batcolor",		  "(b:bat[:oid,:color]):bat[:oid,:str] ",																												  "CLRbatStr;"					  ]
[ "str",			  "pattern",	  "batcalc",		  "(eclass:int,d1:int,s1:int,has_tz:int,v:bat[:oid,:any_1],digits:int):bat[:oid,:str] ",																						  "SQLbatstr_cast;"				  ]
[ "str",			  "command",	  "batcalc",		  "(b:bat[:any_1,:lng]):bat[:any_1,:str] ",																												  "CMDconvert_lng_str;"				  ]
[ "str",			  "command",	  "batcalc",		  "(b:bat[:any_1,:int]):bat[:any_1,:str] ",																												  "CMDconvert_int_str;"				  ]
[ "str",			  "command",	  "batcalc",		  "(b:bat[:any_1,:str]):bat[:any_1,:str] ",																												  "CMDconvert_str;"				  ]
[ "str",			  "command",	  "xml",		  "(src:bat[:oid,:xml]):bat[:oid,:str] ",																												  "BATXMLxml2str;"				  ]
[ "str",			  "command",	  "xml",		  "(src:xml):str ",																															  "XMLxml2str;"					  ]
[ "str",			  "command",	  "timezone",		  "():str ",																																  "MTIMEtzone_tostr;"				  ]
[ "str",			  "command",	  "str",		  "(s:str):str ",																															  "STRtostr;"					  ]
[ "str",			  "command",	  "color",		  "(s:color):str ",																															  "CLRstr;"					  ]
[ "str",			  "pattern",	  "calc",		  "(eclass:int,d1:int,s1:int,has_tz:int,v:any_1,digits:int):str ",																									  "SQLstr_cast;"				  ]
[ "str",			  "command",	  "calc",		  "(v:str):str ",																															  "CALCstr2str;"				  ]
[ "str",			  "command",	  "calc",		  "(v:sqlblob):str ",																															  "SQLsqlblob_2_str;"				  ]
[ "str",			  "command",	  "calc",		  "(v:date):str ",																															  "SQLdate_2_str;"				  ]
[ "str",			  "command",	  "calc",		  "(v:dbl):str ",																															  "SQLdbl_2_str;"				  ]
[ "str",			  "command",	  "calc",		  "(v:flt):str ",																															  "SQLflt_2_str;"				  ]
[ "str",			  "command",	  "calc",		  "(v:wrd):str ",																															  "SQLwrd_2_str;"				  ]
[ "str",			  "command",	  "calc",		  "(v:str):str ",																															  "CALCstr2str;"				  ]
[ "str",			  "command",	  "calc",		  "(v:void):str ",																															  "CALCnil2str;"				  ]
[ "str",			  "command",	  "calc",		  "(v:bat[:any_1,:any_2]):str ",																													  "CALCbat2str;"				  ]
[ "str",			  "command",	  "calc",		  "(v:bte):str ",																															  "CALCbte2str;"				  ]
[ "str",			  "command",	  "calc",		  "(v:ptr):str ",																															  "CALCptr2str;"				  ]
[ "str",			  "command",	  "calc",		  "(v:bit):str ",																															  "CALCbit2str;"				  ]
[ "str",			  "command",	  "calc",		  "(v:dbl):str ",																															  "CALCdbl2str;"				  ]
[ "str",			  "command",	  "calc",		  "(v:flt):str ",																															  "CALCflt2str;"				  ]
[ "str",			  "command",	  "calc",		  "(v:lng):str ",																															  "CALClng2str;"				  ]
[ "str",			  "command",	  "calc",		  "(v:BAT):str ",																															  "CALCbat2str;"				  ]
[ "str",			  "command",	  "calc",		  "(v:int):str ",																															  "CALCint2str;"				  ]
[ "str",			  "command",	  "calc",		  "(v:sht):str ",																															  "CALCsht2str;"				  ]
[ "str",			  "command",	  "calc",		  "(v:oid):str ",																															  "CALCoid2str;"				  ]
[ "str",			  "command",	  "calc",		  "(x:dbl):str ",																															  "CALCdbl2str;"				  ]
[ "str",			  "command",	  "calc",		  "(x:flt):str ",																															  "CALCflt2str;"				  ]
[ "str",			  "command",	  "calc",		  "(x:lng):str ",																															  "CALClng2str;"				  ]
[ "str",			  "command",	  "calc",		  "(x:int):str ",																															  "CALCint2str;"				  ]
[ "str",			  "command",	  "calc",		  "(x:sht):str ",																															  "CALCsht2str;"				  ]
[ "str",			  "command",	  "calc",		  "(x:bte):str ",																															  "CALCbte2str;"				  ]
[ "str2qgrams",			  "function",	  "txtsim",		  "(s:str):bat[:oid,:str];",																														  "nil"						  ]
[ "str_to_date",		  "command",	  "mtime",		  "(s:str,format:str):date ",																														  "MTIMEstrptime;"				  ]
[ "strengthReduction",		  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTstrengthReduction;"			  ]
[ "strengthReduction",		  "pattern",	  "optimizer",		  "():str ",																																  "OPTstrengthReduction;"			  ]
[ "string",			  "command",	  "batstr",		  "(b:bat[:oid,:str],offset:int):bat[:oid,:str] ",																											  "STRbatTailcst;"				  ]
[ "string",			  "command",	  "batstr",		  "(b:bat[:oid,:str],offset:bat[:oid,:int]):bat[:oid,:str] ",																										  "STRbatTail;"					  ]
[ "string",			  "command",	  "str",		  "(s:str,offset:int,count:int):str ",																													  "STRSubString;"				  ]
[ "string",			  "command",	  "str",		  "(s:str,offset:int):str ",																														  "STRTail;"					  ]
[ "stringdiff",			  "command",	  "txtsim",		  "(s1:str,s2:str):int ",																														  "stringdiff_impl;"				  ]
[ "stringleft",			  "command",	  "str",		  "(s:str,l:int):str ",																															  "STRprefix;"					  ]
[ "stringlength",		  "command",	  "batstr",		  "(s:bat[:oid,:str]):bat[:oid,:int] ",																													  "STRbatstringLength;"				  ]
[ "stringlength",		  "command",	  "str",		  "(s:str):int ",																															  "STRstringLength;"				  ]
[ "stringright",		  "command",	  "str",		  "(s:str,l:int):str ",																															  "STRsuffix;"					  ]
[ "subcommit",			  "command",	  "transaction",	  "(b:bat[:any_1,:str]):bit ",																														  "TRNsubcommit;"				  ]
[ "substitute",			  "command",	  "batstr",		  "(s:bat[:oid,:str],src:str,dst:str,rep:bit):bat[:oid,:str] ",																										  "STRbatSubstitutecst;"			  ]
[ "substitute",			  "command",	  "str",		  "(s:str,src:str,dst:str,rep:bit):str ",																												  "STRSubstitute;"				  ]
[ "substring",			  "command",	  "batstr",		  "(s:bat[:oid,:str],start:int,index:int):bat[:oid,:str] ",																										  "STRbatsubstringcst;"				  ]
[ "substring",			  "command",	  "batstr",		  "(s:bat[:oid,:str],start:bat[:oid,:int],index:bat[:oid,:int]):bat[:oid,:str] ",																							  "STRbatsubstring;"				  ]
[ "substring",			  "command",	  "str",		  "(s:str,start:int,len:int):str ",																													  "STRsubstring;"				  ]
[ "substring",			  "command",	  "str",		  "(s:str,start:int):str ",																														  "STRsubstringTail;"				  ]
[ "substring",			  "command",	  "calc",		  "(s:str,offset:int,count:int):str ",																													  "STRsubstring;"				  ]
[ "substring",			  "command",	  "calc",		  "(s:str,offset:int):str ",																														  "STRsubstringTail;"				  ]
[ "suffix",			  "command",	  "str",		  "(s:str,l:int):str ",																															  "STRsuffix;"					  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:oid],size:int,shift:int):bat[:any_2,:oid] ",																										  "GRPslidingsum_oid;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:oid],size:int):bat[:any_2,:oid] ",																											  "GRPwindowsum_oid;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:oid],e:bat[:any_2,:any_1]):bat[:any_2,:oid] ",																									  "GRPsum_oid_oid;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:dbl],size:int,shift:int):bat[:any_2,:dbl] ",																										  "GRPslidingsum_dbl;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:dbl],size:int):bat[:any_2,:dbl] ",																											  "GRPwindowsum_dbl;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:dbl],e:bat[:any_2,:any_1]):bat[:any_2,:dbl] ",																									  "GRPsum_dbl_dbl;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:flt],size:int,shift:int):bat[:any_2,:flt] ",																										  "GRPslidingsum_flt;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:flt],size:int):bat[:any_2,:flt] ",																											  "GRPwindowsum_flt;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:flt],e:bat[:any_2,:any_1]):bat[:any_2,:flt] ",																									  "GRPsum_flt_flt;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:wrd],size:int,shift:int):bat[:any_2,:wrd] ",																										  "GRPslidingsum_wrd;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:wrd],size:int):bat[:any_2,:wrd] ",																											  "GRPwindowsum_wrd;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:wrd],e:bat[:any_2,:any_1]):bat[:any_2,:wrd] ",																									  "GRPsum_wrd_wrd;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:lng],size:int,shift:int):bat[:any_2,:lng] ",																										  "GRPslidingsum_lng;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:lng],size:int):bat[:any_2,:lng] ",																											  "GRPwindowsum_lng;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:lng],e:bat[:any_2,:any_1]):bat[:any_2,:lng] ",																									  "GRPsum_lng_lng;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:int],size:int,shift:int):bat[:any_2,:int] ",																										  "GRPslidingsum_int;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:int],size:int):bat[:any_2,:int] ",																											  "GRPwindowsum_int;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:int],e:bat[:any_2,:any_1]):bat[:any_2,:int] ",																									  "GRPsum_int_int;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:sht],size:int,shift:int):bat[:any_2,:sht] ",																										  "GRPslidingsum_sht;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:sht],size:int):bat[:any_2,:sht] ",																											  "GRPwindowsum_sht;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:sht],e:bat[:any_2,:any_1]):bat[:any_2,:sht] ",																									  "GRPsum_sht_sht;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:bte],size:int,shift:int):bat[:any_2,:bte] ",																										  "GRPslidingsum_bte;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:bte],size:int):bat[:any_2,:bte] ",																											  "GRPwindowsum_bte;"				  ]
[ "sum",			  "command",	  "group",		  "(b:bat[:any_2,:bte],e:bat[:any_2,:any_1]):bat[:any_2,:bte] ",																									  "GRPsum_bte_bte;"				  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",																								  "AX3aggrX3_sum3_dbl_dbl;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:dbl],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",																										  "AX3aggrX3_sum_dbl_dbl;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",																								  "AX3aggrX3_sum3_flt_dbl;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:flt],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",																										  "AX3aggrX3_sum_flt_dbl;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:flt] ",																								  "AX3aggrX3_sum3_flt_flt;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:flt],e:bat[:oid,:any_1]):bat[:oid,:flt] ",																										  "AX3aggrX3_sum_flt_flt;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",																								  "AX3aggrX3_sum3_lng_lng;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:lng],e:bat[:oid,:any_1]):bat[:oid,:lng] ",																										  "AX3aggrX3_sum_lng_lng;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",																								  "AX3aggrX3_sum3_lng_wrd;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:lng],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",																										  "AX3aggrX3_sum_lng_wrd;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",																								  "AX3aggrX3_sum3_wrd_lng;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:wrd],e:bat[:oid,:any_1]):bat[:oid,:lng] ",																										  "AX3aggrX3_sum_wrd_lng;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",																								  "AX3aggrX3_sum3_wrd_wrd;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:wrd],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",																										  "AX3aggrX3_sum_wrd_wrd;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",																								  "AX3aggrX3_sum3_int_lng;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:lng] ",																										  "AX3aggrX3_sum_int_lng;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",																								  "AX3aggrX3_sum3_int_wrd;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",																										  "AX3aggrX3_sum_int_wrd;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",																								  "AX3aggrX3_sum3_int_int;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:int] ",																										  "AX3aggrX3_sum_int_int;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",																								  "AX3aggrX3_sum3_sht_lng;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:lng] ",																										  "AX3aggrX3_sum_sht_lng;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",																								  "AX3aggrX3_sum3_sht_wrd;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",																										  "AX3aggrX3_sum_sht_wrd;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",																								  "AX3aggrX3_sum3_sht_int;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:int] ",																										  "AX3aggrX3_sum_sht_int;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:sht] ",																								  "AX3aggrX3_sum3_sht_sht;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:sht] ",																										  "AX3aggrX3_sum_sht_sht;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",																								  "AX3aggrX3_sum3_bte_lng;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:lng] ",																										  "AX3aggrX3_sum_bte_lng;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",																								  "AX3aggrX3_sum3_bte_wrd;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",																										  "AX3aggrX3_sum_bte_wrd;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",																								  "AX3aggrX3_sum3_bte_int;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:int] ",																										  "AX3aggrX3_sum_bte_int;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:sht] ",																								  "AX3aggrX3_sum3_bte_sht;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:sht] ",																										  "AX3aggrX3_sum_bte_sht;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:bte] ",																								  "AX3aggrX3_sum3_bte_bte;"			  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:bte] ",																										  "AX3aggrX3_sum_bte_bte;"			  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:lng]):dbl;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:lng],empty_is_nil:bit):dbl ",																												  "ALGsum_lng_dbl;"				  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:wrd]):dbl;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:wrd],empty_is_nil:bit):dbl ",																												  "ALGsum_wrd_dbl;"				  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:int]):dbl;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:int],empty_is_nil:bit):dbl ",																												  "ALGsum_int_dbl;"				  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:sht]):dbl;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:sht],empty_is_nil:bit):dbl ",																												  "ALGsum_sht_dbl;"				  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:bte]):dbl;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:bte],empty_is_nil:bit):dbl ",																												  "ALGsum_bte_dbl;"				  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:oid,:dbl]):dbl;",																														  "nil"						  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:dbl]):dbl;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:dbl],empty_is_nil:bit):dbl ",																												  "ALGsum_dbl_dbl;"				  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:flt]):dbl;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:flt],empty_is_nil:bit):dbl ",																												  "ALGsum_flt_dbl;"				  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:oid,:flt]):flt;",																														  "nil"						  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:flt]):flt;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:flt],empty_is_nil:bit):flt ",																												  "ALGsum_flt_flt;"				  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:oid,:lng]):lng;",																														  "nil"						  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:lng]):lng;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:lng],empty_is_nil:bit):lng ",																												  "ALGsum_lng_lng;"				  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:wrd]):lng;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:wrd],empty_is_nil:bit):lng ",																												  "ALGsum_wrd_lng;"				  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:wrd]):wrd;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:wrd],empty_is_nil:bit):wrd ",																												  "ALGsum_wrd_wrd;"				  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:int]):lng;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:int],empty_is_nil:bit):lng ",																												  "ALGsum_int_lng;"				  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:int]):wrd;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:int],empty_is_nil:bit):wrd ",																												  "ALGsum_int_wrd;"				  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:oid,:int]):int;",																														  "nil"						  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:int]):int;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:int],empty_is_nil:bit):int ",																												  "ALGsum_int_int;"				  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:sht]):lng;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:sht],empty_is_nil:bit):lng ",																												  "ALGsum_sht_lng;"				  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:sht]):wrd;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:sht],empty_is_nil:bit):wrd ",																												  "ALGsum_sht_wrd;"				  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:sht]):int;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:sht],empty_is_nil:bit):int ",																												  "ALGsum_sht_int;"				  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:oid,:sht]):sht;",																														  "nil"						  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:sht]):sht;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:sht],empty_is_nil:bit):sht ",																												  "ALGsum_sht_sht;"				  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:bte]):lng;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:bte],empty_is_nil:bit):lng ",																												  "ALGsum_bte_lng;"				  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:bte]):wrd;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:bte],empty_is_nil:bit):wrd ",																												  "ALGsum_bte_wrd;"				  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:bte]):int;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:bte],empty_is_nil:bit):int ",																												  "ALGsum_bte_int;"				  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:bte]):sht;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:bte],empty_is_nil:bit):sht ",																												  "ALGsum_bte_sht;"				  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:oid,:bte]):bte;",																														  "nil"						  ]
[ "sum",			  "function",	  "aggr",		  "(b:bat[:any_1,:bte]):bte;",																														  "nil"						  ]
[ "sum",			  "command",	  "aggr",		  "(b:bat[:any_1,:bte],empty_is_nil:bit):bte ",																												  "ALGsum_bte_bte;"				  ]
[ "summary",			  "pattern",	  "manual",		  "():void ",																																  "MANUALcreateSummary;"			  ]
[ "sunion",			  "command",	  "algebra",		  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																								  "ALGsunion;"					  ]
[ "sunique",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "ALGsunique;"					  ]
[ "surface",			  "function",	  "calc",		  "(wkt:str):wkb;",																															  "nil"						  ]
[ "suspend",			  "command",	  "mapi",		  "():void ",																																  "SERVERsuspend;"				  ]
[ "suspend",			  "pattern",	  "clients",		  "(id:int):void ",																															  "CLTsuspend;"					  ]
[ "sync",			  "command",	  "transaction",	  "():bit ",																																  "TRNglobal_sync;"				  ]
[ "sync",			  "command",	  "unix",		  "():void ",																																  "UNIXsync;"					  ]
[ "table",			  "pattern",	  "cluster",		  "(b:bat[:oid,:any]...):bat[:oid,:oid] ",																												  "CLUSTER_table;"				  ]
[ "table",			  "pattern",	  "io",			  "(order:int,b1:bat[:any_1,:any],b2:bat[:any_1,:any]...):void ",																									  "IOtotable;"					  ]
[ "table",			  "pattern",	  "io",			  "(b1:bat[:any_1,:any],b2:bat[:any_1,:any]...):void ",																											  "IOttable;"					  ]
[ "take",			  "pattern",	  "tokenizer",		  "(i:oid):str ",																															  "TKNZRtakeOid;"				  ]
[ "take",			  "pattern",	  "statistics",		  "(name:any_1):any_2 ",																														  "STATtake;"					  ]
[ "take",			  "pattern",	  "box",		  "(bnme:str,vnme:str):any_1 ",																														  "BOXtake;"					  ]
[ "take",			  "pattern",	  "bbp",		  "(name:str):bat[:any_1,:any_2] ",																													  "CMDbbptake;"					  ]
[ "take",			  "pattern",	  "const",		  "(name:str):any_1 ",																															  "CSTtake;"					  ]
[ "tan",			  "command",	  "batmmath",		  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",																													  "CMDscience_bat_flt_tan;"			  ]
[ "tan",			  "command",	  "batmmath",		  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",																													  "CMDscience_bat_dbl_tan;"			  ]
[ "tan",			  "command",	  "mmath",	  "(x:dbl):dbl ",															  "MATHunary_TANdbl;"					  ]
[ "tan",			  "command",	  "mmath",	  "(x:flt):flt ",															  "MATHunary_TANflt;"					  ]
[ "tanh",			  "command",	  "batmmath",		  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",																													  "CMDscience_bat_flt_tanh;"			  ]
[ "tanh",			  "command",	  "batmmath",		  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",																													  "CMDscience_bat_dbl_tanh;"			  ]
[ "tanh",			  "command",	  "mmath",		  "(x:dbl):dbl ",																															  "MATHunary_TANHdbl;"				  ]
[ "tanh",			  "command",	  "mmath",		  "(x:flt):flt ",																															  "MATHunary_TANHflt;"				  ]
[ "text",			  "command",	  "xml",		  "(val:bat[:oid,:xml]):bat[:oid,:str] ",																												  "BATXMLxmltext;"				  ]
[ "text",			  "command",	  "xml",		  "(src:xml):str ",																															  "XMLxmltext;"					  ]
[ "text",			  "command",	  "inet",		  "(X_1:inet):str ",																															  "INETtext;"					  ]
[ "thetajoin",			  "command",	  "algebra",		  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],opname:int,estimate:lng):bat[:any_1,:any_3] ",																					  "ALGthetajoinEstimate;"			  ]
[ "thetajoin",			  "command",	  "algebra",		  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],opname:int):bat[:any_1,:any_3] ",																							  "ALGthetajoin;"				  ]
[ "thetaselect",		  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],val:any_2,op:str):bat[:any_1,:any_2] ",																									  "ALGthetaselect;"				  ]
[ "thetauselect",		  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],val:any_2,op:str):bat[:any_1,:void] ",																										  "ALGthetauselect;"				  ]
[ "time",			  "command",	  "alarm",	  "():int ",																  "ALARMtime;"						  ]
[ "time_add_msec_interval",	  "command",	  "mtime",		  "(t:daytime,ms:lng):daytime ",																													  "MTIMEtime_add_msec_interval_wrap;"		  ]
[ "time_sub_msec_interval",	  "command",	  "mtime",		  "(t:daytime,ms:lng):daytime ",																													  "MTIMEtime_sub_msec_interval_wrap;"		  ]
[ "time_synonyms",		  "command",	  "mtime",		  "(allow:bit):void ",																															  "MTIMEsynonyms;"				  ]
[ "timers",			  "command",	  "alarm",	  "():bat[:str,:str] ",															  "ALARMtimers;"					  ]
[ "times",			  "factory",	  "sql",		  "():void;",																																  "nil"						  ]
[ "times",			  "function",	  "sql",		  "(elaps:int,inblock:lng,oublock:lng):void;",																												  "nil"						  ]
[ "timestamp",			  "command",	  "batcalc",		  "(v:bat[:oid,:timestamp],digits:int):bat[:oid,:timestamp] ",																										  "battimestamp_2time_timestamp;"		  ]
[ "timestamp",			  "command",	  "batcalc",		  "(v:bat[:oid,:str],digits:int):bat[:oid,:timestamp] ",																										  "batstr_2time_timestamp;"			  ]
[ "timestamp",			  "command",	  "batcalc",		  "(v:bat[:oid,:str]):bat[:oid,:timestamp] ",																												  "batstr_2_timestamp;"				  ]
[ "timestamp",			  "command",	  "mtime",		  "(d:date):timestamp ",																														  "MTIMEtimestamp_create_from_date;"		  ]
[ "timestamp",			  "command",	  "mtime",		  "(d:date,dt:daytime):timestamp ",																													  "MTIMEtimestamp_create_default;"		  ]
[ "timestamp",			  "command",	  "mtime",		  "(d:date,dt:daytime,t:timezone):timestamp ",																												  "MTIMEtimestamp_create;"			  ]
[ "timestamp",			  "command",	  "mtime",		  "(t:timestamp):timestamp ",																														  "MTIMEtimestamp2timestamp;"			  ]
[ "timestamp",			  "command",	  "timezone",		  "(secs:int):timestamp ",																														  "MTIMEtimestamp;"				  ]
[ "timestamp",			  "command",	  "timezone",		  "(s:str):timestamp ",																															  "MTIMEtimestamp_fromstr;"			  ]
[ "timestamp",			  "command",	  "calc",		  "(v:date,d:int):timestamp ",																														  "date_2_timestamp;"				  ]
[ "timestamp",			  "command",	  "calc",		  "(v:timestamp,digits:int):timestamp ",																												  "timestamp_2time_timestamp;"			  ]
[ "timestamp",			  "command",	  "calc",		  "(v:str,digits:int):timestamp ",																													  "str_2time_timestamp;"			  ]
[ "timestamp",			  "command",	  "calc",		  "(v:str):timestamp ",																															  "str_2_timestamp;"				  ]
[ "timestamp",			  "command",	  "calc",		  "(msecs:lng):timestamp ",																														  "MTIMEtimestamp_lng;"				  ]
[ "timestamp",			  "command",	  "calc",		  "(secs:int):timestamp ",																														  "MTIMEtimestamp;"				  ]
[ "timestamp",			  "command",	  "calc",		  "(d:date):timestamp ",																														  "MTIMEtimestamp_create_from_date;"		  ]
[ "timestamp",			  "command",	  "calc",		  "(t:timestamp):timestamp ",																														  "MTIMEtimestamp2timestamp;"			  ]
[ "timestamp",			  "command",	  "calc",		  "(s:str):timestamp ",																															  "MTIMEtimestamp_fromstr;"			  ]
[ "timestamp_add_month_interval", "command",	  "mtime",		  "(t:timestamp,s:int):timestamp ",																													  "MTIMEtimestamp_add_month_interval_wrap;"	  ]
[ "timestamp_add_msec_interval",  "command",	  "mtime",		  "(t:timestamp,ms:lng):timestamp ",																													  "MTIMEtimestamp_add_msec_interval_lng_wrap;"	  ]
[ "timestamp_sub_month_interval", "command",	  "mtime",		  "(t:timestamp,s:int):timestamp ",																													  "MTIMEtimestamp_sub_month_interval_wrap;"	  ]
[ "timestamp_sub_msec_interval",  "command",	  "mtime",		  "(t:timestamp,ms:lng):timestamp ",																													  "MTIMEtimestamp_sub_msec_interval_lng_wrap;"	  ]
[ "timezone",			  "command",	  "mtime",		  "(mi:int,s:zrule,erule:zrule):timezone ",																												  "MTIMEtzone_create_dst;"			  ]
[ "timezone",			  "command",	  "mtime",		  "(s:lng):timezone ",																															  "MTIMEtzone_create;"				  ]
[ "timezone",			  "command",	  "mtime",		  "(s:int):timezone ",																															  "MTIMEtzone_create;"				  ]
[ "timezone",			  "command",	  "mtime",		  "(s:str):timezone ",																															  "MTIMEtzone_fromstr;"				  ]
[ "timezone_local",		  "command",	  "mtime",		  "():timezone ",																															  "MTIMEtzone_get_local;"			  ]
[ "timezone_local",		  "command",	  "mtime",		  "(t:timezone):void ",																															  "MTIMEtzone_set_local;"			  ]
[ "toLower",			  "command",	  "batstr",		  "(s:bat[:oid,:str]):bat[:oid,:str] ",																													  "STRbatLower;"				  ]
[ "toLower",			  "command",	  "str",		  "(s:str):str ",																															  "STRLower;"					  ]
[ "toString",			  "pattern",	  "statistics",		  "(name:any_1):str ",																															  "STATtoString;"				  ]
[ "toString",			  "pattern",	  "box",		  "(bname:str,name:str):str ",																														  "BOXtoString;"				  ]
[ "toString",			  "pattern",	  "bbp",		  "(name:str):str ",																															  "CMDbbptoStr;"				  ]
[ "toString",			  "pattern",	  "const",		  "(name:any_1):str ",																															  "CSTtoString;"				  ]
[ "toUpper",			  "command",	  "batstr",		  "(s:bat[:oid,:str]):bat[:oid,:str] ",																													  "STRbatUpper;"				  ]
[ "toUpper",			  "command",	  "str",		  "(s:str):str ",																															  "STRUpper;"					  ]
[ "toblob",			  "command",	  "blob",		  "(v:str):blob ",																															  "BLOBtoblob;"					  ]
[ "topN",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],top:lng):bat[:any_1,:any_2] ",																											  "ALGtopN;"					  ]
[ "topn_max",			  "command",	  "pqueue",		  "(t:bat[:oid,:dbl],n:wrd):bat[:oid,:oid] ",																												  "PQtopn_dblmax;"				  ]
[ "topn_max",			  "command",	  "pqueue",		  "(t:bat[:oid,:flt],n:wrd):bat[:oid,:oid] ",																												  "PQtopn_fltmax;"				  ]
[ "topn_max",			  "command",	  "pqueue",		  "(t:bat[:oid,:lng],n:wrd):bat[:oid,:oid] ",																												  "PQtopn_lngmax;"				  ]
[ "topn_max",			  "command",	  "pqueue",		  "(t:bat[:oid,:ptr],n:wrd):bat[:oid,:oid] ",																												  "PQtopn_ptrmax;"				  ]
[ "topn_max",			  "command",	  "pqueue",		  "(t:bat[:oid,:wrd],n:wrd):bat[:oid,:oid] ",																												  "PQtopn_wrdmax;"				  ]
[ "topn_max",			  "command",	  "pqueue",		  "(t:bat[:oid,:oid],n:wrd):bat[:oid,:oid] ",																												  "PQtopn_oidmax;"				  ]
[ "topn_max",			  "command",	  "pqueue",		  "(t:bat[:oid,:int],n:wrd):bat[:oid,:oid] ",																												  "PQtopn_intmax;"				  ]
[ "topn_max",			  "command",	  "pqueue",		  "(t:bat[:oid,:sht],n:wrd):bat[:oid,:oid] ",																												  "PQtopn_shtmax;"				  ]
[ "topn_max",			  "command",	  "pqueue",		  "(t:bat[:oid,:bte],n:wrd):bat[:oid,:oid] ",																												  "PQtopn_btemax;"				  ]
[ "topn_max",			  "command",	  "pqueue",		  "(a:bat[:oid,:oid],t:bat[:void,:any_1],n:wrd):bat[:oid,:oid] ",																									  "PQtopn2_anymax;"				  ]
[ "topn_max",			  "command",	  "pqueue",		  "(a:bat[:oid,:oid],t:bat[:oid,:any_1],n:wrd):bat[:oid,:oid] ",																									  "PQtopn2_anymax;"				  ]
[ "topn_max",			  "command",	  "pqueue",		  "(t:bat[:oid,:any_1],n:wrd):bat[:oid,:oid] ",																												  "PQtopn_anymax;"				  ]
[ "topn_min",			  "command",	  "pqueue",		  "(t:bat[:oid,:dbl],n:wrd):bat[:oid,:oid] ",																												  "PQtopn_dblmin;"				  ]
[ "topn_min",			  "command",	  "pqueue",		  "(t:bat[:oid,:flt],n:wrd):bat[:oid,:oid] ",																												  "PQtopn_fltmin;"				  ]
[ "topn_min",			  "command",	  "pqueue",		  "(t:bat[:oid,:lng],n:wrd):bat[:oid,:oid] ",																												  "PQtopn_lngmin;"				  ]
[ "topn_min",			  "command",	  "pqueue",		  "(t:bat[:oid,:ptr],n:wrd):bat[:oid,:oid] ",																												  "PQtopn_ptrmin;"				  ]
[ "topn_min",			  "command",	  "pqueue",		  "(t:bat[:oid,:wrd],n:wrd):bat[:oid,:oid] ",																												  "PQtopn_wrdmin;"				  ]
[ "topn_min",			  "command",	  "pqueue",		  "(t:bat[:oid,:oid],n:wrd):bat[:oid,:oid] ",																												  "PQtopn_oidmin;"				  ]
[ "topn_min",			  "command",	  "pqueue",		  "(t:bat[:oid,:int],n:wrd):bat[:oid,:oid] ",																												  "PQtopn_intmin;"				  ]
[ "topn_min",			  "command",	  "pqueue",		  "(t:bat[:oid,:sht],n:wrd):bat[:oid,:oid] ",																												  "PQtopn_shtmin;"				  ]
[ "topn_min",			  "command",	  "pqueue",		  "(t:bat[:oid,:bte],n:wrd):bat[:oid,:oid] ",																												  "PQtopn_btemin;"				  ]
[ "topn_min",			  "command",	  "pqueue",		  "(a:bat[:oid,:oid],t:bat[:void,:any_1],n:wrd):bat[:oid,:oid] ",																									  "PQtopn2_anymin;"				  ]
[ "topn_min",			  "command",	  "pqueue",		  "(a:bat[:oid,:oid],t:bat[:oid,:any_1],n:wrd):bat[:oid,:oid] ",																									  "PQtopn2_anymin;"				  ]
[ "topn_min",			  "command",	  "pqueue",		  "(t:bat[:oid,:any_1],n:wrd):bat[:oid,:oid] ",																												  "PQtopn_anymin;"				  ]
[ "topreplace_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:dbl],id:oid,value:dbl):void ",																												  "PQtopreplace_dblmax;"			  ]
[ "topreplace_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:flt],id:oid,value:flt):void ",																												  "PQtopreplace_fltmax;"			  ]
[ "topreplace_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:lng],id:oid,value:lng):void ",																												  "PQtopreplace_lngmax;"			  ]
[ "topreplace_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:ptr],id:oid,value:ptr):void ",																												  "PQtopreplace_ptrmax;"			  ]
[ "topreplace_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:wrd],id:oid,value:wrd):void ",																												  "PQtopreplace_wrdmax;"			  ]
[ "topreplace_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:oid],id:oid,value:oid):void ",																												  "PQtopreplace_oidmax;"			  ]
[ "topreplace_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:int],id:oid,value:int):void ",																												  "PQtopreplace_intmax;"			  ]
[ "topreplace_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:sht],id:oid,value:sht):void ",																												  "PQtopreplace_shtmax;"			  ]
[ "topreplace_max",		  "command",	  "pqueue",		  "(h:bat[:oid,:bte],id:oid,value:bte):void ",																												  "PQtopreplace_btemax;"			  ]
[ "topreplace_max",		  "pattern",	  "pqueue",		  "(h:bat[:oid,:any_1],id:oid,value:any_1):void ",																											  "PQtopreplace_anymax;"			  ]
[ "topreplace_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:dbl],id:oid,value:dbl):void ",																												  "PQtopreplace_dblmin;"			  ]
[ "topreplace_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:flt],id:oid,value:flt):void ",																												  "PQtopreplace_fltmin;"			  ]
[ "topreplace_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:lng],id:oid,value:lng):void ",																												  "PQtopreplace_lngmin;"			  ]
[ "topreplace_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:ptr],id:oid,value:ptr):void ",																												  "PQtopreplace_ptrmin;"			  ]
[ "topreplace_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:wrd],id:oid,value:wrd):void ",																												  "PQtopreplace_wrdmin;"			  ]
[ "topreplace_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:oid],id:oid,value:oid):void ",																												  "PQtopreplace_oidmin;"			  ]
[ "topreplace_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:int],id:oid,value:int):void ",																												  "PQtopreplace_intmin;"			  ]
[ "topreplace_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:sht],id:oid,value:sht):void ",																												  "PQtopreplace_shtmin;"			  ]
[ "topreplace_min",		  "command",	  "pqueue",		  "(h:bat[:oid,:bte],id:oid,value:bte):void ",																												  "PQtopreplace_btemin;"			  ]
[ "topreplace_min",		  "pattern",	  "pqueue",		  "(h:bat[:oid,:any_1],id:oid,value:any_1):void ",																											  "PQtopreplace_anymin;"			  ]
[ "tostr",			  "command",	  "lock",	  "(l:lock):void ",															  "lockToStr;"						  ]
[ "tostring",			  "command",	  "blob",		  "(v:blob,index:int):str ",																														  "BLOBfromidx;"				  ]
[ "tostring",			  "command",	  "blob",		  "(v:blob):str ",																															  "BLOBfromblob;"				  ]
[ "trace",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",																														  "OPTdeadcode;"				  ]
[ "trace",			  "pattern",	  "optimizer",		  "():str ",																																  "OPTtrace;"					  ]
[ "trace",			  "command",	  "mapi",		  "(mid:int,flag:int):void ",																														  "SERVERtrace;"				  ]
[ "traceOptimizer",		  "command",	  "mdb",	  "(flg:str):void ",															  "OPTsetDebugStr;"					  ]
[ "trans",			  "pattern",	  "sql",		  "(type:int,chain:int,name:str):void ",																												  "SQLtransaction;"				  ]
[ "transaction",		  "pattern",	  "sql",		  "():void ",																																  "SQLtransaction2;"				  ]
[ "trap",				  "pattern",	  "mdb",	  "():void ",																	  "mdbTrap;"						  ]
[ "trim",			  "command",	  "batstr",		  "(s:bat[:oid,:str]):bat[:oid,:str] ",																													  "STRbatStrip;"				  ]
[ "trim",			  "command",	  "str",		  "(s:str):str ",																															  "STRStrip;"					  ]
[ "truncate",			  "command",	  "bbp",		  "(b:bat[:any_1,:any_2],fnme:str):bat[:any_1,:any_2] ",																										  "CMDbbptruncate;"				  ]
[ "try",			  "command",	  "lock",		  "(l:lock):int ",																															  "LCKtry;"					  ]
[ "tunique",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "ALGtunique;"					  ]
[ "uhashsplit",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],buckets:int):bat[:int,:BAT] ",																											  "ALGuhashsplit;"				  ]
[ "unicode",			  "command",	  "str",		  "(wchar:int):str ",																															  "STRFromWChr;"				  ]
[ "unicodeAt",			  "command",	  "batstr",		  "(s:bat[:oid,:str],index:int):bat[:oid,:int] ",																											  "STRbatWChrAtcst;"				  ]
[ "unicodeAt",			  "command",	  "batstr",		  "(s:bat[:oid,:str],index:bat[:oid,:int]):bat[:oid,:int] ",																										  "STRbatWChrAt;"				  ]
[ "unicodeAt",			  "command",	  "str",		  "(s:str,index:int):int ",																														  "STRWChrAt;"					  ]
[ "uniform",			  "command",	  "sample",		  "(b:bat[:oid,:any],p:dbl):bat[:oid,:any] ",																												  "SAMPLEuniform_dbl;"				  ]
[ "uniform",			  "command",	  "sample",		  "(b:bat[:oid,:any],s:wrd):bat[:oid,:any] ",																												  "SAMPLEuniform;"				  ]
[ "union",			  "command",	  "algebra",		  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																								  "ALGsunion;"					  ]
[ "unique",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",																												  "ALGsunique;"					  ]
[ "unix_epoch",			  "command",	  "timestamp",		  "():timestamp ",																															  "MTIMEunix_epoch;"				  ]
[ "unload",			  "command",	  "bat",		  "(name:str):bit ",																															  "BKCunload;"					  ]
[ "unpack",			  "pattern",	  "bat",		  "(b:bat[:any_1,:any_2]) (h:any_1,t:any_2) ",																												  "CMDbatunpack;"				  ]
[ "unpin",			  "pattern",	  "datacyclotron",	  "(req_id:int):void ",																															  "DCYunpin;"					  ]
[ "unset",			  "command",	  "lock",		  "(l:lock):void ",																															  "LCKunset;"					  ]
[ "up",				  "command",	  "sema",		  "(s:sema):void ",																															  "SEMAup;"					  ]
[ "update",			  "pattern",	  "sql",		  "(mvc:int,sname:str,tname:str,cname:str,ins:any):int ",																										  "mvc_update_wrap;"				  ]
[ "update",			  "command",	  "statistics",		  "():void ",																																  "STATupdate;"					  ]
[ "urangesplit",		  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],ranges:int):bat[:any_2,:BAT] ",																										  "ALGurangesplit;"				  ]
[ "url",			  "command",	  "url",		  "(s:url):url ",																															  "URLnoop;"					  ]
[ "url",			  "command",	  "url",		  "(s:str):url ",																															  "URLnew;"					  ]
[ "url",			  "command",	  "calc",		  "(s:url):url ",																															  "URLnoop;"					  ]
[ "url",			  "command",	  "calc",		  "(s:str):url ",																															  "URLnoop;"					  ]
[ "usec",			  "command",	  "alarm",		  "():lng ",																																  "ALARMusec;"					  ]
[ "uselect",			  "command",	  "pcre",		  "(pat:str,strs:bat[:any_1,:str]):bat[:any_1,:void] ",																											  "PCREuselectDef;"				  ]
[ "uselect",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],value:any_2):bat[:any_1,:void] ",																										  "ALGuselect1;"				  ]
[ "uselect",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],low:any_2,high:any_2):bat[:any_1,:void] ",																									  "ALGuselect;"					  ]
[ "uselect",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],low:any_2,high:any_2,li:bit,hi:bit):bat[:any_1,:void] ",																							  "ALGuselectInclusive;"			  ]
[ "utopn_max",			  "command",	  "pqueue",		  "(t:bat[:oid,:dbl],n:wrd):bat[:oid,:oid] ",																												  "PQutopn_dblmax;"				  ]
[ "utopn_max",			  "command",	  "pqueue",		  "(t:bat[:oid,:flt],n:wrd):bat[:oid,:oid] ",																												  "PQutopn_fltmax;"				  ]
[ "utopn_max",			  "command",	  "pqueue",		  "(t:bat[:oid,:lng],n:wrd):bat[:oid,:oid] ",																												  "PQutopn_lngmax;"				  ]
[ "utopn_max",			  "command",	  "pqueue",		  "(t:bat[:oid,:ptr],n:wrd):bat[:oid,:oid] ",																												  "PQutopn_ptrmax;"				  ]
[ "utopn_max",			  "command",	  "pqueue",		  "(t:bat[:oid,:wrd],n:wrd):bat[:oid,:oid] ",																												  "PQutopn_wrdmax;"				  ]
[ "utopn_max",			  "command",	  "pqueue",		  "(t:bat[:oid,:oid],n:wrd):bat[:oid,:oid] ",																												  "PQutopn_oidmax;"				  ]
[ "utopn_max",			  "command",	  "pqueue",		  "(t:bat[:oid,:int],n:wrd):bat[:oid,:oid] ",																												  "PQutopn_intmax;"				  ]
[ "utopn_max",			  "command",	  "pqueue",		  "(t:bat[:oid,:sht],n:wrd):bat[:oid,:oid] ",																												  "PQutopn_shtmax;"				  ]
[ "utopn_max",			  "command",	  "pqueue",		  "(t:bat[:oid,:bte],n:wrd):bat[:oid,:oid] ",																												  "PQutopn_btemax;"				  ]
[ "utopn_max",			  "command",	  "pqueue",		  "(a:bat[:oid,:oid],t:bat[:void,:any_1],n:wrd):bat[:oid,:oid] ",																									  "PQutopn2_anymax;"				  ]
[ "utopn_max",			  "command",	  "pqueue",		  "(a:bat[:oid,:oid],t:bat[:oid,:any_1],n:wrd):bat[:oid,:oid] ",																									  "PQutopn2_anymax;"				  ]
[ "utopn_max",			  "command",	  "pqueue",		  "(t:bat[:oid,:any_1],n:wrd):bat[:oid,:oid] ",																												  "PQutopn_anymax;"				  ]
[ "utopn_min",			  "command",	  "pqueue",		  "(t:bat[:oid,:dbl],n:wrd):bat[:oid,:oid] ",																												  "PQutopn_dblmin;"				  ]
[ "utopn_min",			  "command",	  "pqueue",		  "(t:bat[:oid,:flt],n:wrd):bat[:oid,:oid] ",																												  "PQutopn_fltmin;"				  ]
[ "utopn_min",			  "command",	  "pqueue",		  "(t:bat[:oid,:lng],n:wrd):bat[:oid,:oid] ",																												  "PQutopn_lngmin;"				  ]
[ "utopn_min",			  "command",	  "pqueue",		  "(t:bat[:oid,:ptr],n:wrd):bat[:oid,:oid] ",																												  "PQutopn_ptrmin;"				  ]
[ "utopn_min",			  "command",	  "pqueue",		  "(t:bat[:oid,:wrd],n:wrd):bat[:oid,:oid] ",																												  "PQutopn_wrdmin;"				  ]
[ "utopn_min",			  "command",	  "pqueue",		  "(t:bat[:oid,:oid],n:wrd):bat[:oid,:oid] ",																												  "PQutopn_oidmin;"				  ]
[ "utopn_min",			  "command",	  "pqueue",		  "(t:bat[:oid,:int],n:wrd):bat[:oid,:oid] ",																												  "PQutopn_intmin;"				  ]
[ "utopn_min",			  "command",	  "pqueue",		  "(t:bat[:oid,:sht],n:wrd):bat[:oid,:oid] ",																												  "PQutopn_shtmin;"				  ]
[ "utopn_min",			  "command",	  "pqueue",		  "(t:bat[:oid,:bte],n:wrd):bat[:oid,:oid] ",																												  "PQutopn_btemin;"				  ]
[ "utopn_min",			  "command",	  "pqueue",		  "(a:bat[:oid,:oid],t:bat[:void,:any_1],n:wrd):bat[:oid,:oid] ",																									  "PQutopn2_anymin;"				  ]
[ "utopn_min",			  "command",	  "pqueue",		  "(a:bat[:oid,:oid],t:bat[:oid,:any_1],n:wrd):bat[:oid,:oid] ",																									  "PQutopn2_anymin;"				  ]
[ "utopn_min",			  "command",	  "pqueue",		  "(t:bat[:oid,:any_1],n:wrd):bat[:oid,:oid] ",																												  "PQutopn_anymin;"				  ]
[ "vacuum",			  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",																														  "SQLvacuum;"					  ]
[ "value",			  "command",	  "batcolor",		  "(c:bat[:oid,:color]):bat[:oid,:flt] ",																												  "CLRbatValue;"				  ]
[ "value",			  "command",	  "batcolor",		  "(c:bat[:oid,:color]):bat[:oid,:int] ",																												  "CLRbatValueInt;"				  ]
[ "value",			  "command",	  "color",		  "(c:color):flt ",																															  "CLRvalue;"					  ]
[ "value",			  "command",	  "color",		  "(c:color):int ",																															  "CLRvalueInt;"				  ]
[ "var",			  "pattern",	  "mdb",	  "(M:str,F:str):void ",														  "MDBvar3;"						  ]
[ "var",			  "pattern",	  "mdb",	  "():void ",																  "MDBvar;"						  ]
[ "variance",			  "command",	  "group",		  "(b:bat[:any_2,:oid],e:bat[:any_2,:any_1]):bat[:any_2,:oid] ",																									  "GRPvar_oid;"					  ]
[ "variance",			  "command",	  "group",		  "(b:bat[:any_2,:dbl],e:bat[:any_2,:any_1]):bat[:any_2,:dbl] ",																									  "GRPvar_dbl;"					  ]
[ "variance",			  "command",	  "group",		  "(b:bat[:any_2,:flt],e:bat[:any_2,:any_1]):bat[:any_2,:flt] ",																									  "GRPvar_flt;"					  ]
[ "variance",			  "command",	  "group",		  "(b:bat[:any_2,:wrd],e:bat[:any_2,:any_1]):bat[:any_2,:wrd] ",																									  "GRPvar_wrd;"					  ]
[ "variance",			  "command",	  "group",		  "(b:bat[:any_2,:lng],e:bat[:any_2,:any_1]):bat[:any_2,:lng] ",																									  "GRPvar_lng;"					  ]
[ "variance",			  "command",	  "group",		  "(b:bat[:any_2,:int],e:bat[:any_2,:any_1]):bat[:any_2,:int] ",																									  "GRPvar_int;"					  ]
[ "variance",			  "command",	  "group",		  "(b:bat[:any_2,:sht],e:bat[:any_2,:any_1]):bat[:any_2,:sht] ",																									  "GRPvar_sht;"					  ]
[ "variance",			  "command",	  "group",		  "(b:bat[:any_2,:bte],e:bat[:any_2,:any_1]):bat[:any_2,:bte] ",																									  "GRPvar_bte;"					  ]
[ "vector",			  "pattern",	  "centipede",		  "(b:bat[:oid,:any_1]):any_1... ",																													  "OPTvector;"					  ]
[ "vmStatistics",		  "command",	  "status",		  "(minsize:lng):bat[:str,:lng] ",																													  "SYSvm_usage;"				  ]
[ "vm_cursize",			  "command",	  "status",		  "():lng ",																																  "SYSgetvm_cursize;"				  ]
[ "vm_maxsize",			  "command",	  "status",		  "(v:lng):void ",																															  "SYSsetvm_maxsize;"				  ]
[ "vm_maxsize",			  "command",	  "status",		  "():lng ",																																  "SYSgetvm_maxsize;"				  ]
[ "void",			  "command",	  "calc",		  "(v:lng):void ",																															  "CALClng2void;"				  ]
[ "void",			  "command",	  "calc",		  "(v:sht):void ",																															  "CALCsht2void;"				  ]
[ "void",			  "command",	  "calc",		  "(v:int):void ",																															  "CALCint2void;"				  ]
[ "void",			  "command",	  "calc",		  "(v:void):void ",																															  "CALCnil2void;"				  ]
[ "volumeCost",			  "pattern",	  "scheduler",		  "(a:any):lng ",																															  "RUNvolumeCost;"				  ]
[ "wakeup",			  "command",	  "clients",		  "(id:int):void ",																															  "CLTwakeup;"					  ]
[ "weekday",			  "command",	  "mtime",		  "(t:zrule):int ",																															  "MTIMErule_extract_weekday;"			  ]
[ "weekofyear",			  "command",	  "mtime",		  "(d:date):int ",																															  "MTIMEdate_extract_weekofyear;"		  ]
[ "wildRetreat",		  "command",	  "sabaoth",		  "():void ",																																  "SABwildRetreat;"				  ]
[ "wkb",			  "command",	  "wkb",		  "(v:str):wkb ",																															  "wkbFromString;"				  ]
[ "wkb",			  "command",	  "calc",		  "(v:wkb):wkb ",																															  "wkbFromWKB;"					  ]
[ "wkb",			  "command",	  "calc",		  "(v:str):wkb ",																															  "wkbFromString;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd],d2:int,s2:int):bat[:oid,:wrd] ",																										  "batwrd_dec2dec_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd]):bat[:oid,:wrd] ",																												  "batwrd_dec2_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(v:bat[:oid,:wrd],digits:int,scale:int):bat[:oid,:wrd] ",																										  "batwrd_num2dec_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(v:bat[:oid,:wrd]):bat[:oid,:wrd] ",																													  "batwrd_2_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int],d2:int,s2:int):bat[:oid,:wrd] ",																										  "batint_dec2dec_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int]):bat[:oid,:wrd] ",																												  "batint_dec2_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(v:bat[:oid,:int],digits:int,scale:int):bat[:oid,:wrd] ",																										  "batint_num2dec_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(v:bat[:oid,:int]):bat[:oid,:wrd] ",																													  "batint_2_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht],d2:int,s2:int):bat[:oid,:wrd] ",																										  "batsht_dec2dec_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht]):bat[:oid,:wrd] ",																												  "batsht_dec2_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(v:bat[:oid,:sht],digits:int,scale:int):bat[:oid,:wrd] ",																										  "batsht_num2dec_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(v:bat[:oid,:sht]):bat[:oid,:wrd] ",																													  "batsht_2_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte],d2:int,s2:int):bat[:oid,:wrd] ",																										  "batbte_dec2dec_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte]):bat[:oid,:wrd] ",																												  "batbte_dec2_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(v:bat[:oid,:bte],digits:int,scale:int):bat[:oid,:wrd] ",																										  "batbte_num2dec_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(v:bat[:oid,:bte]):bat[:oid,:wrd] ",																													  "batbte_2_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(v:bat[:oid,:dbl],digits:int,scale:int):bat[:oid,:wrd] ",																										  "batdbl_num2dec_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(v:bat[:oid,:dbl]):bat[:oid,:wrd] ",																													  "batdbl_2_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(v:bat[:oid,:flt],digits:int,scale:int):bat[:oid,:wrd] ",																										  "batflt_num2dec_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(v:bat[:oid,:flt]):bat[:oid,:wrd] ",																													  "batflt_2_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(v:bat[:oid,:str]):bat[:oid,:wrd] ",																													  "batstr_2_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(b:bat[:any_1,:bit]):bat[:any_1,:wrd] ",																												  "CMDconvert_bit_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(b:bat[:any_1,:dbl]):bat[:any_1,:wrd] ",																												  "CMDconvert_dbl_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(b:bat[:any_1,:flt]):bat[:any_1,:wrd] ",																												  "CMDconvert_flt_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(b:bat[:any_1,:oid]):bat[:any_1,:wrd] ",																												  "CMDconvert_oid_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(b:bat[:any_1,:lng]):bat[:any_1,:wrd] ",																												  "CMDconvert_lng_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(b:bat[:any_1,:int]):bat[:any_1,:wrd] ",																												  "CMDconvert_int_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(b:bat[:any_1,:sht]):bat[:any_1,:wrd] ",																												  "CMDconvert_sht_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(b:bat[:any_1,:bte]):bat[:any_1,:wrd] ",																												  "CMDconvert_bte_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",		  "(b:bat[:any_1,:wrd]):bat[:any_1,:wrd] ",																												  "CMDconvert_wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(s1:int,v:wrd,d2:int,s2:int):wrd ",																													  "wrd_dec2dec_wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(s1:int,v:wrd):wrd ",																														  "wrd_dec2_wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(v:wrd,digits:int,scale:int):wrd ",																													  "wrd_num2dec_wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(v:wrd):wrd ",																															  "wrd_2_wrd;"					  ]
[ "wrd",			  "command",	  "calc",		  "(s1:int,v:int,d2:int,s2:int):wrd ",																													  "int_dec2dec_wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(s1:int,v:int):wrd ",																														  "int_dec2_wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(v:int,digits:int,scale:int):wrd ",																													  "int_num2dec_wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(v:int):wrd ",																															  "int_2_wrd;"					  ]
[ "wrd",			  "command",	  "calc",		  "(s1:int,v:sht,d2:int,s2:int):wrd ",																													  "sht_dec2dec_wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(s1:int,v:sht):wrd ",																														  "sht_dec2_wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(v:sht,digits:int,scale:int):wrd ",																													  "sht_num2dec_wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(v:sht):wrd ",																															  "sht_2_wrd;"					  ]
[ "wrd",			  "command",	  "calc",		  "(s1:int,v:bte,d2:int,s2:int):wrd ",																													  "bte_dec2dec_wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(s1:int,v:bte):wrd ",																														  "bte_dec2_wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(v:bte,digits:int,scale:int):wrd ",																													  "bte_num2dec_wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(v:bte):wrd ",																															  "bte_2_wrd;"					  ]
[ "wrd",			  "command",	  "calc",		  "(v:dbl,digits:int,scale:int):wrd ",																													  "dbl_num2dec_wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(v:dbl):wrd ",																															  "dbl_2_wrd;"					  ]
[ "wrd",			  "command",	  "calc",		  "(v:flt,digits:int,scale:int):wrd ",																													  "flt_num2dec_wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(v:flt):wrd ",																															  "flt_2_wrd;"					  ]
[ "wrd",			  "command",	  "calc",		  "(v:str):wrd ",																															  "str_2_wrd;"					  ]
[ "wrd",			  "command",	  "calc",		  "(x:dbl):wrd ",																															  "CALCdbl2wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(x:flt):wrd ",																															  "CALCflt2wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(x:lng):wrd ",																															  "CALClng2wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(x:wrd):wrd ",																															  "CALCwrd2wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(x:int):wrd ",																															  "CALCint2wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(x:sht):wrd ",																															  "CALCsht2wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(x:bte):wrd ",																															  "CALCbte2wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(x:bit):wrd ",																															  "CALCbit2wrd;"				  ]
[ "wrd",			  "command",	  "calc",		  "(x:oid):wrd ",																															  "CALCoid2wrd;"				  ]
[ "writeInt",			  "command",	  "streams",		  "(s:streams,data:int):void ",																														  "mnstr_writeIntwrap;"				  ]
[ "writeStr",			  "command",	  "streams",		  "(s:streams,data:str):void ",																														  "mnstr_write_stringwrap;"			  ]
[ "xmatch",			  "command",	  "lsst",		  "(l:bat[:oid,:lng],r:bat[:oid,:lng],depth:int):bat[:oid,:oid] ",																									  "LSSTxmatch;"					  ]
[ "xml",			  "command",	  "batcalc",		  "(src:bat[:oid,:str]):bat[:oid,:xml] ",																												  "BATXMLstr2xml;"				  ]
[ "xml",			  "command",	  "xml",		  "(src:bat[:oid,:str]):bat[:oid,:xml] ",																												  "BATXMLstr2xml;"				  ]
[ "xml",			  "command",	  "xml",		  "(src:str):xml ",																															  "XMLstr2xml;"					  ]
[ "xml",			  "command",	  "calc",		  "(src:xml):xml ",																															  "XMLxml2xml;"					  ]
[ "xml",			  "command",	  "calc",		  "(src:str):xml ",																															  "XMLstr2xml;"					  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumXORcst_lng_lng_lng;"		  ]
[ "xor",			  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",																									  "CMDbataccumXORcst2_lng_lng_lng;"		  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",																								  "CMDbataccumXOR_lng_lng_lng;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",																										  "CMDbatXOR_lng_lng_lng;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",																												  "CMDcstXORbat_lng_lng_lng;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",																												  "CMDbatXORcst_lng_lng_lng;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumXORcst_wrd_wrd_wrd;"		  ]
[ "xor",			  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",																									  "CMDbataccumXORcst2_wrd_wrd_wrd;"		  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",																								  "CMDbataccumXOR_wrd_wrd_wrd;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",																										  "CMDbatXOR_wrd_wrd_wrd;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",																												  "CMDcstXORbat_wrd_wrd_wrd;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:wrd] ",																												  "CMDbatXORcst_wrd_wrd_wrd;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",																									  "CMDbataccumXORcst_int_int_int;"		  ]
[ "xor",			  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",																									  "CMDbataccumXORcst2_int_int_int;"		  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",																								  "CMDbataccumXOR_int_int_int;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",																										  "CMDbatXOR_int_int_int;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",																												  "CMDcstXORbat_int_int_int;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",																												  "CMDbatXORcst_int_int_int;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumXORcst_sht_sht_sht;"		  ]
[ "xor",			  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",																									  "CMDbataccumXORcst2_sht_sht_sht;"		  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",																								  "CMDbataccumXOR_sht_sht_sht;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",																										  "CMDbatXOR_sht_sht_sht;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",																												  "CMDcstXORbat_sht_sht_sht;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",																												  "CMDbatXORcst_sht_sht_sht;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte,bflag:bit,cflag:bit):bat[:oid,:bte] ",																									  "CMDbataccumXORcst_bte_bte_bte;"		  ]
[ "xor",			  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:bte] ",																									  "CMDbataccumXORcst2_bte_bte_bte;"		  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:bte] ",																								  "CMDbataccumXOR_bte_bte_bte;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:bte] ",																										  "CMDbatXOR_bte_bte_bte;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:bte] ",																												  "CMDcstXORbat_bte_bte_bte;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:bte] ",																												  "CMDbatXORcst_bte_bte_bte;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:oid],cst:oid,bflag:bit,cflag:bit):bat[:oid,:oid] ",																									  "CMDbataccumXORcst_oid_oid_oid;"		  ]
[ "xor",			  "command",	  "batcalc",		  "(cst:oid,b:bat[:oid,:oid],cflag:bit,bflag:bit):bat[:oid,:oid] ",																									  "CMDbataccumXORcst2_oid_oid_oid;"		  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:oid],c:bat[:oid,:oid],aflag:bit,bflag:bit):bat[:oid,:oid] ",																								  "CMDbataccumXOR_oid_oid_oid;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:oid],c:bat[:oid,:oid]):bat[:oid,:oid] ",																										  "CMDbatXOR_oid_oid_oid;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(cst:oid,b:bat[:oid,:oid]):bat[:oid,:oid] ",																												  "CMDcstXORbat_oid_oid_oid;"			  ]
[ "xor",			  "command",	  "batcalc",		  "(b:bat[:oid,:oid],cst:oid):bat[:oid,:oid] ",																												  "CMDbatXORcst_oid_oid_oid;"			  ]
[ "xor",			  "command",	  "calc",		  "(left:lng,right:lng):lng ",																														  "CALCbinaryXORlnglng;"			  ]
[ "xor",			  "command",	  "calc",		  "(left:int,right:int):int ",																														  "CALCbinaryXORintint;"			  ]
[ "xor",			  "command",	  "calc",		  "(left:sht,right:sht):sht ",																														  "CALCbinaryXORshtsht;"			  ]
[ "xor",			  "command",	  "calc",		  "(left:bte,right:bte):bte ",																														  "CALCbinaryXORbtebte;"			  ]
[ "xor",			  "command",	  "calc",		  "(left:bit,right:bit):bit ",																														  "CALCbinaryXORbit;"				  ]
[ "xquery",			  "command",	  "xml",		  "(val:bat[:oid,:str],expr:str):bat[:oid,:xml] ",																											  "BATXMLxquery;"				  ]
[ "ycc",			  "command",	  "color",		  "(y:int,cr:int,cb:int):color ",																													  "CLRycc;"					  ]
[ "year",			  "command",	  "mtime",		  "(months:int):int ",																															  "MTIMEsql_year;"				  ]
[ "year",			  "command",	  "mtime",		  "(t:timestamp):int ",																															  "MTIMEtimestamp_year;"			  ]
[ "year",			  "command",	  "mtime",		  "(d:date):int ",																															  "MTIMEdate_extract_year;"			  ]
[ "year",			  "command",	  "batmtime",		  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",																												  "MTIMEdate_extract_year_bulk;"		  ]
[ "zero_or_one",		  "function",	  "sql",		  "(b:bat[:oid,:any_1],gp:bat[:oid,:oid],gpe:bat[:oid,:oid]):bat[:oid,:any_1];",																							  "nil"						  ]
[ "zero_or_one",		  "command",	  "sql",		  "(col:bat[:any_2,:any_1]):any_1 ",																													  "zero_or_one;"				  ]

# 08:55:30 >  
# 08:55:30 >  Done.
# 08:55:30 >  

