stdout of test 'inspect05` in directory 'modules/mal` itself:


# 08:55:29 >  
# 08:55:29 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=4 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//dbfarm" --set "sql_logdir=/ufs/mk/monet5//dblogs/logs/sql"  --set mapi_open=true --set xrpc_open=true --set mapi_port=36941 --set xrpc_port=42461 --set monet_prompt= --trace  --dbname=mTests_src_modules_mal  inspect05.mal
# 08:55:29 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_modules_mal', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2008 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:37931/
function user.main():void;
#Illustrate the modules loaded after start 
    k := inspect.getKind();
    m := inspect.getModule();
    f := inspect.getFunction();
    f1 := bat.reverse(f);
    f2 := algebra.ssort(f1);
    fs := bat.reverse(f2);
    s := inspect.getSignatures();
    a := inspect.getAddresses();
    io.table(fs,k,m,s,a);
end main;
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# h				symbol		symbol		 symbol																	 symbol							  # name
# str				str		str		str																	str							  # type
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
[ "main",			  "function",	  "user",	  "():void;",																  "nil"							  ]
[ "fuse",		  "command",	  "udf",	  "(one:int,two:int):lng ",												  "UDFfuse_int_lng;"			  ]
[ "fuse",		  "command",	  "udf",	  "(one:sht,two:sht):int ",												  "UDFfuse_sht_int;"			  ]
[ "fuse",		  "command",	  "udf",	  "(one:bte,two:bte):sht ",												  "UDFfuse_bte_sht;"			  ]
[ "reverse",		  "command",	  "udf",	  "(ra1:str):str ",													  "UDFreverse;"					  ]
[ "fuse",		  "command",	  "batudf",	  "(one:bat[:oid,:int],two:bat[:oid,:int]):bat[:oid,:lng] ",								  "UDFBATfuse;"				  ]
[ "fuse",		  "command",	  "batudf",	  "(one:bat[:oid,:sht],two:bat[:oid,:sht]):bat[:oid,:int] ",								  "UDFBATfuse;"				  ]
[ "fuse",		  "command",	  "batudf",	  "(one:bat[:oid,:bte],two:bat[:oid,:bte]):bat[:oid,:sht] ",								  "UDFBATfuse;"				  ]
[ "reverse",			  "command",	  "batudf",	  "(b:bat[:oid,:str]):bat[:oid,:str] ",												  "UDFBATreverse;"			  ]
[ "angsep",		  "command",	  "lsst",	  "(ra1:dbl,dec1:dbl,ra2:dbl,dec2:dbl):dbl ",																												  "qserv_angSep;"			  ]
[ "ptinsphpoly",	  "pattern",	  "lsst",	  "(ra:dbl,dec:dbl,list:dbl...):int ",																													  "qserv_ptInSphPoly;"			  ]
[ "ptinsphellipse",	  "command",	  "lsst",	  "(ra:dbl,dec:dbl,ra_cen:dbl,dec_cen:dbl,smaa:dbl,smia:dbl,ang:dbl):int ",																								  "qserv_ptInSphEllipse;"		  ]
[ "ptinsphcircle",	  "command",	  "lsst",	  "(ra:dbl,dec:dbl,ra_cen:dbl,dec_cen:dbl,radius:dbl):int ",																										  "qserv_ptInSphCircle;"		  ]
[ "ptinsphbox",		  "command",	  "lsst",	  "(ra:dbl,dec:dbl,ra_min:dbl,dec_min:dbl,ra_max:dbl,dec_max:dbl):int ",																								  "qserv_ptInSphBox;"			  ]
[ "xmatch",		  "command",	  "lsst",	  "(l:bat[:oid,:lng],r:bat[:oid,:lng],depth:int):bat[:oid,:oid] ",																									  "LSSTxmatch;"				  ]
[ "alpha",		  "command",	  "batsql",	  "(dec:bat[:oid,:dbl],theta:dbl):bat[:oid,:dbl] ",									  "SQLbat_alpha;"				  ]
[ "next_value",		  "pattern",	  "batsql",	  "(sname:bat[:oid,:str],sequence:str):bat[:oid,:lng] ",					  "mvc_bat_next_value;"			  ]
[ "Area",		  "command",	  "geom",		  "(g:wkb):dbl ",									  "wkbArea;"				  ]
[ "AsText",		  "command",	  "geom",		  "(w:wkb):str ",									  "wkbAsText;"				  ]
[ "Buffer",		  "command",	  "geom",		  "(a:wkb,distance:dbl):wkb ",								  "wkbBuffer;"				  ]
[ "Boundary",		  "command",	  "geom",		  "(w:wkb):wkb ",									  "wkbBoundary;"			  ]
[ "ConvexHull",		  "command",	  "geom",		  "(a:wkb):wkb ",									  "wkbConvexHull;"			  ]
[ "Contains",		  "command",	  "geom",		  "(a:wkb,b:wkb):bit ",									  "wkbContains;"			  ]
[ "Crosses",		  "command",	  "geom",		  "(a:wkb,b:wkb):bit ",									  "wkbCrosses;"				  ]
[ "CurveFromText",	  "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",								  "nil"					  ]
[ "Difference",		  "command",	  "geom",		  "(a:wkb,b:wkb):wkb ",									  "wkbDifference;"			  ]
[ "Distance",		  "command",	  "geom",		  "(a:wkb,b:wkb):dbl ",									  "wkbDistance;"			  ]
[ "Disjoint",		  "command",	  "geom",		  "(a:wkb,b:wkb):bit ",									  "wkbDisjoint;"			  ]
[ "Dimension",		  "command",	  "geom",		  "(w:wkb):int ",									  "wkbDimension;"			  ]
[ "Equals",		  "command",	  "geom",		  "(a:wkb,b:wkb):bit ",									  "wkbEquals;"				  ]
[ "Envelope",		  "command",	  "geom",		  "(w:wkb):wkb ",									  "wkbEnvelope;"			  ]
[ "GeometryTypeId",	  "command",	  "geom",		  "(w:wkb):int ",									  "wkbGeometryTypeId;"			  ]
[ "GeomCollectionFromText", "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",								  "nil"					  ]
[ "GeomFromText",	  "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",								  "nil"					  ]
[ "Intersection",	  "command",	  "geom",		  "(a:wkb,b:wkb):wkb ",									  "wkbIntersection;"			  ]
[ "Intersect",		  "command",	  "geom",		  "(a:wkb,b:wkb):bit ",									  "wkbIntersect;"			  ]
[ "IsSimple",		  "command",	  "geom",		  "(w:wkb):bit ",									  "wkbIsSimple;"			  ]
[ "IsEmpty",		  "command",	  "geom",		  "(w:wkb):bit ",									  "wkbIsEmpty;"				  ]
[ "Length",		  "command",	  "geom",		  "(g:wkb):dbl ",									  "wkbLength;"				  ]
[ "LineFromText",	  "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",								  "nil"					  ]
[ "MultiPolyFromText",	  "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",								  "nil"					  ]
[ "MultiSurfaceFromText", "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",								  "nil"					  ]
[ "MultiLineFromText",	  "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",								  "nil"					  ]
[ "MultiCurveFromText",	  "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",								  "nil"					  ]
[ "MultiPointFromText",	  "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",								  "nil"					  ]
[ "Overlaps",		  "command",	  "geom",		  "(a:wkb,b:wkb):bit ",									  "wkbOverlaps;"			  ]
[ "PolyFromText",	  "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",								  "nil"					  ]
[ "PointFromText",	  "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",								  "nil"					  ]
[ "Relate",		  "command",	  "geom",		  "(a:wkb,b:wkb,intersectionPatternMatrix:str):bit ",					  "wkbRelate;"				  ]
[ "SymDifference",	  "command",	  "geom",		  "(a:wkb,b:wkb):wkb ",									  "wkbSymDifference;"			  ]
[ "SRID",		  "command",	  "geom",		  "(w:wkb):int ",									  "wkbSRID;"				  ]
[ "SurfaceFromText",	  "function",	  "geom",		  "(wkt:str,srid:sht):wkb;",								  "nil"					  ]
[ "Touches",		  "command",	  "geom",		  "(a:wkb,b:wkb):bit ",									  "wkbTouches;"				  ]
[ "Union",		  "command",	  "geom",		  "(a:wkb,b:wkb):wkb ",									  "wkbUnion;"				  ]
[ "Within",		  "command",	  "geom",		  "(a:wkb,b:wkb):bit ",									  "wkbWithin;"				  ]
[ "X",			  "command",	  "geom",		  "(g:wkb):dbl ",									  "wkbgetcoordX;"			  ]
[ "Y",			  "command",	  "geom",		  "(g:wkb):dbl ",									  "wkbgetcoordY;"			  ]
[ "epilogue",		  "command",	  "geom",		  "():void ",										  "geom_epilogue;"			  ]
[ "mbr",		  "command",	  "geom",	  "(X_1:wkb):mbr ",																															  "wkbMBR;"				  ]
[ "mbr",		  "command",	  "geom",	  "(X_1:flt,X_2:flt,X_3:flt,X_4:flt):mbr ",																												  "ordinatesMBR;"			  ]
[ "mbroverlaps",	  "command",	  "geom",		  "(a:mbr,b:mbr):bit ",									  "mbroverlaps;"			  ]
[ "prelude",		  "command",	  "geom",		  "():void ",										  "geom_prelude;"			  ]
[ "point",		  "command",	  "geom",		  "(x:dbl,y:dbl):wkb ",									  "wkbcreatepoint;"			  ]
[ "point",		  "command",	  "batgeom",		  "(x:bat[:oid,:dbl],y:bat[:oid,:dbl]):bat[:oid,:wkb] ",				  "wkbcreatepoint_bat;"			  ]
[ "#cmp",		  "command",	  "mbr",		  "():int ",										  "mbrCOMP;"				  ]
[ "#fromstr",		  "command",	  "mbr",		  "():mbr ",										  "mbrFROMSTR;"				  ]
[ "#hash",		  "command",	  "mbr",		  "():int ",										  "mbrHASH;"				  ]
[ "mbr",		  "command",	  "mbr",		  "(v:str):mbr ",									  "mbrFromString;"			  ]
[ "#null",		  "command",	  "mbr",		  "():int ",										  "mbrNULL;"				  ]
[ "#read",		  "command",	  "mbr",		  "():void ",										  "mbrREAD;"				  ]
[ "#tostr",		  "command",	  "mbr",		  "():str ",										  "mbrTOSTR;"				  ]
[ "#write",		  "command",	  "mbr",		  "():void ",										  "mbrWRITE;"				  ]
[ "FromText",		  "command",	  "wkb",		  "(w:str,type:int):wkb ",								  "wkbFromText;"			  ]
[ "#cmp",		  "command",	  "wkb",		  "():int ",										  "wkbCOMP;"				  ]
[ "#del",		  "command",	  "wkb",		  "():int ",										  "wkbDEL;"				  ]
[ "#fromstr",		  "command",	  "wkb",		  "():wkb ",										  "wkbFROMSTR;"				  ]
[ "#heap",		  "command",	  "wkb",		  "():int ",										  "wkbHEAP;"				  ]
[ "#hash",		  "command",	  "wkb",		  "():int ",										  "wkbHASH;"				  ]
[ "#length",		  "command",	  "wkb",		  "():int ",										  "wkbLENGTH;"				  ]
[ "#null",		  "command",	  "wkb",		  "():int ",										  "wkbNULL;"				  ]
[ "#put",		  "command",	  "wkb",		  "():int ",										  "wkbPUT;"				  ]
[ "#read",		  "command",	  "wkb",		  "():void ",										  "wkbREAD;"				  ]
[ "#tostr",		  "command",	  "wkb",		  "():str ",										  "wkbTOSTR;"				  ]
[ "wkb",		  "command",	  "wkb",		  "(v:str):wkb ",									  "wkbFromString;"			  ]
[ "#write",		  "command",	  "wkb",		  "():void ",										  "wkbWRITE;"				  ]
[ "connect",		  "command",	  "srvpool",	  "(dbname:str):str ",																															  "SRVPOOLconnect;"			  ]
[ "exec",		  "pattern",	  "srvpool",	  "(fname:str,arg:any...):any... ",																													  "SRVPOOLexec;"			  ]
[ "local",		  "command",	  "srvpool",	  "(b:bit):void ",																															  "SRVPOOLlocal;"			  ]
[ "query",		  "pattern",	  "srvpool",	  "(plan:str):str... ",																															  "SRVPOOLquery;"			  ]
[ "reset",		  "pattern",	  "srvpool",	  "(dbname:str):str ",																															  "SRVPOOLreset;"			  ]
[ "bidding",				  "pattern",	  "scheduler",	  "():bit ",															  "OCTOPUSbidding;"					  ]
[ "costPrediction",		  "pattern",	  "scheduler",	  "(a:any):lng ",															  "RUNcostPrediction;"					  ]
[ "choice",			  "pattern",	  "scheduler",	  "(arg:any...):void ",															  "RUNchoice;"						  ]
[ "choice",			  "pattern",	  "scheduler",	  "():void ",																  "RUNchoice;"						  ]
[ "isolation",			  "pattern",	  "scheduler",	  "():void ",																  "RUNisolation;"					  ]
[ "makeSchedule",	  "pattern",	  "scheduler",	  "(X_1:int,X_2:lng...):str... ",																													  "OCTOPUSmakeSchedule;"		  ]
[ "octopus",			  "pattern",	  "scheduler",	  "(t:int):bit ",													  "OCTOPUSrun;"				  ]
[ "peers",		  "pattern",	  "scheduler",	  "(N:int):void ",																															  "SRVsetServers;"			  ]
[ "pattern",		  "pattern",	  "scheduler",	  "(pat:str):void ",																															  "SRVsetServers;"			  ]
[ "pick",			  "pattern",	  "scheduler",	  "(arg:any_1...):any_1 ",														  "RUNpickResult;"					  ]
[ "register",				  "pattern",	  "scheduler",	  "():bit ",															  "OCTOPUSdiscoverRegister;"				  ]
[ "srvpool",		  "pattern",	  "scheduler",	  "():int ",																																  "SRVPOOLscheduler;"			  ]
[ "volumeCost",			  "pattern",	  "scheduler",	  "(a:any):lng ",															  "RUNvolumeCost;"					  ]
[ "alpha",			  "command",	  "transaction",  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "TRNtrans_alpha;"					  ]
[ "abort",			  "pattern",	  "transaction",  "(c:any...):void ",															  "TRNtrans_abort;"					  ]
[ "abort",			  "command",	  "transaction",  "():bit ",																  "TRNglobal_abort;"					  ]
[ "clean",			  "pattern",	  "transaction",  "(c:any...):void ",															  "TRNtrans_clean;"					  ]
[ "commit",			  "pattern",	  "transaction",  "(c:any...):void ",															  "TRNtrans_commit;"					  ]
[ "commit",			  "command",	  "transaction",  "():bit ",																  "TRNglobal_commit;"					  ]
[ "delta",			  "command",	  "transaction",  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "TRNtrans_delta;"					  ]
[ "prev",			  "command",	  "transaction",  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "TRNtrans_prev;"					  ]
[ "subcommit",			  "command",	  "transaction",  "(b:bat[:any_1,:str]):bit ",														  "TRNsubcommit;"					  ]
[ "sync",			  "command",	  "transaction",  "():bit ",																  "TRNglobal_sync;"					  ]
[ "decode_y",			  "command",	  "zorder",	  "(z:bat[:oid,:oid]):bat[:oid,:int] ",													  "ZORDbatdecode_int_oid_y;"				  ]
[ "decode_y",			  "command",	  "zorder",	  "(z:oid):int ",															  "ZORDdecode_int_oid_y;"				  ]
[ "decode_x",			  "command",	  "zorder",	  "(z:bat[:oid,:oid]):bat[:oid,:int] ",													  "ZORDbatdecode_int_oid_x;"				  ]
[ "decode_x",			  "command",	  "zorder",	  "(z:oid):int ",															  "ZORDdecode_int_oid_x;"				  ]
[ "decode",		  "command",	  "zorder",	  "(z:bat[:oid,:oid]) (X_2:bat[:oid,:int],X_3:bat[:oid,:int]) ",																									  "ZORDbatdecode_int_oid;"		  ]
[ "decode",			  "command",	  "zorder",	  "(z:oid) (x:int,y:int) ",														  "ZORDdecode_int_oid;"					  ]
[ "encode",			  "command",	  "zorder",	  "(x:bat[:oid,:int],y:bat[:oid,:int]):bat[:oid,:oid] ",										  "ZORDbatencode_int_oid;"				  ]
[ "encode",			  "command",	  "zorder",	  "(x:int,y:int):oid ",															  "ZORDencode_int_oid;"					  ]
[ "slice",			  "command",	  "zorder",	  "(xb:int,yb:int,xt:int,yt:int):bat[:oid,:oid] ",											  "ZORDslice_int;"					  ]
[ "sql_slice",			  "command",	  "zorder",	  "(xb:int,yb:int,xt:int,yt:int):bat[:str,:BAT] ",											  "ZORDsql_slice_int;"					  ]
[ "append",			  "command",	  "tokenizer",	  "(u:str):oid ",															  "TKNZRappend;"					  ]
[ "close",				  "command",	  "tokenizer",	  "():void ",														  "TKNZRclose;"						  ]
[ "depositFile",			  "command",	  "tokenizer",	  "(fnme:str):void ",													  "TKNZRdepositFile;"					  ]
[ "getCardinality",			  "command",	  "tokenizer",	  "():bat[:void,:wrd] ",															  "TKNZRgetCardinality;"				  ]
[ "getCount",				  "command",	  "tokenizer",	  "():bat[:void,:wrd] ",															  "TKNZRgetCount;"					  ]
[ "getIndex",			  "command",	  "tokenizer",	  "():bat[:void,:oid] ",														  "TKNZRgetIndex;"					  ]
[ "getLevel",				  "command",	  "tokenizer",	  "(i:int):bat[:oid,:str] ",												  "TKNZRgetLevel;"					  ]
[ "locate",				  "pattern",	  "tokenizer",	  "(s:str):oid ",													  "TKNZRlocate;"					  ]
[ "open",				  "command",	  "tokenizer",	  "(name:str):void ",													  "TKNZRopen;"						  ]
[ "take",				  "pattern",	  "tokenizer",	  "(i:oid):str ",													  "TKNZRtakeOid;"					  ]
[ "editdistance2",		  "command",	  "txtsim",	  "(s:str,t:str):int ",															  "levenshteinbasic2_impl;"				  ]
[ "editdistance",		  "command",	  "txtsim",	  "(s:str,t:str):int ",															  "levenshteinbasic_impl;"				  ]
[ "levenshtein",		  "command",	  "txtsim",	  "(s:str,t:str):int ",															  "levenshteinbasic_impl;"				  ]
[ "levenshtein",		  "command",	  "txtsim",	  "(s:str,t:str,insdel_cost:int,replace_cost:int,transpose_cost:int):int ",								  "levenshtein_impl;"					  ]
[ "qgramselfjoin",		  "command",	  "txtsim",	  "(qgram:bat[:oid,:oid],id:bat[:oid,:oid],pos:bat[:oid,:int],len:bat[:oid,:int],c:flt,k:int):bat[:int,:int] ",				  "CMDqgramselfjoin;"					  ]
[ "qgramnormalize",		  "command",	  "txtsim",	  "(input:str):str ",															  "CMDqgramnormalize;"					  ]
[ "str2qgrams",			  "function",	  "txtsim",	  "(s:str):bat[:oid,:str];",														  "nil"							  ]
[ "stringdiff",			  "command",	  "txtsim",	  "(s1:str,s2:str):int ",														  "stringdiff_impl;"					  ]
[ "soundex",			  "command",	  "txtsim",	  "(name:str):str ",															  "soundex_impl;"					  ]
[ "similarity",			  "command",	  "txtsim",	  "(string1:str,string2:str):dbl ",													  "fstrcmp0_impl;"					  ]
[ "similarity",			  "command",	  "txtsim",	  "(string1:str,string2:str,minimum:dbl):dbl ",												  "fstrcmp_impl;"					  ]
[ "column",				  "pattern",	  "cluster",	  "(m:bat[:oid,:oid],b:bat[:oid,:any_1]):bat[:oid,:any_1] ",										  "CLUSTER_column;"				  ]
[ "key",				  "command",	  "cluster",	  "(b:bat[:oid,:any_1]):bat[:oid,:oid] ",										  "CLUSTER_key;"					  ]
[ "map",			  "command",	  "cluster",		  "(psum:bat[:oid,:wrd],cluster:bat[:oid,:bte],b:bat[:oid,:any_1]):bat[:oid,:any_1] ",						  "CLS_map2;"					  ]
[ "map",			  "command",	  "cluster",	  "(cluster:bat[:oid,:wrd],b:bat[:oid,:any_1]):bat[:oid,:any_1] ",										  "CLS_map;"						  ]
[ "map",				  "command",	  "cluster",	  "(b:bat[:oid,:oid]):bat[:oid,:oid] ",											  "CLUSTER_map;"					  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:dbl],bits:int,offset:int,order:bit) (psum:bat[:oid,:wrd],map:bat[:oid,:bte]) ",					  "CLS_create2_dbl;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:dbl],bits:int,offset:int) (psum:bat[:oid,:wrd],map:bat[:oid,:wrd]) ",						  "CLS_create_dbl;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:flt],bits:int,offset:int,order:bit) (psum:bat[:oid,:wrd],map:bat[:oid,:bte]) ",					  "CLS_create2_flt;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:flt],bits:int,offset:int) (psum:bat[:oid,:wrd],map:bat[:oid,:wrd]) ",						  "CLS_create_flt;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:lng],bits:int,offset:int,order:bit) (psum:bat[:oid,:wrd],map:bat[:oid,:bte]) ",					  "CLS_create2_lng;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:lng],bits:int,offset:int) (psum:bat[:oid,:wrd],map:bat[:oid,:wrd]) ",						  "CLS_create_lng;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:wrd],bits:int,offset:int,order:bit) (psum:bat[:oid,:wrd],map:bat[:oid,:bte]) ",					  "CLS_create2_wrd;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:wrd],bits:int,offset:int) (psum:bat[:oid,:wrd],map:bat[:oid,:wrd]) ",						  "CLS_create_wrd;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:int],bits:int,offset:int,order:bit) (psum:bat[:oid,:wrd],map:bat[:oid,:bte]) ",					  "CLS_create2_int;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:int],bits:int,offset:int) (psum:bat[:oid,:wrd],map:bat[:oid,:wrd]) ",						  "CLS_create_int;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:sht],bits:int,offset:int,order:bit) (psum:bat[:oid,:wrd],map:bat[:oid,:bte]) ",					  "CLS_create2_sht;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:sht],bits:int,offset:int) (psum:bat[:oid,:wrd],map:bat[:oid,:wrd]) ",						  "CLS_create_sht;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:bte],bits:int,offset:int,order:bit) (psum:bat[:oid,:wrd],map:bat[:oid,:bte]) ",					  "CLS_create2_bte;"				  ]
[ "new",			  "command",	  "cluster",		  "(b:bat[:oid,:bte],bits:int,offset:int) (psum:bat[:oid,:wrd],map:bat[:oid,:wrd]) ",						  "CLS_create_bte;"				  ]
[ "split",			  "pattern",	  "cluster",	  "(clustered:bat[:oid,:any_1],psum:bat[:oid,:wrd]):bat[:oid,:any_1]... ",														  "CLS_split;"					  ]
[ "table",				  "pattern",	  "cluster",	  "(b:bat[:oid,:any]...):bat[:oid,:oid] ",										  "CLUSTER_table;"					  ]
[ "getCloud",			  "command",	  "mapreduce",	  "(nme:str):bat[:oid,:str] ",														  "MRgetCloud;"						  ]
[ "multiplex",			  "pattern",	  "mal",	  "(a:any...):any ",															  "OPTremapMultiplex;"					  ]
[ "alpha",		  "command",	  "sql",	  "(dec:dbl,theta:dbl):dbl ",												  "SQLdbl_alpha;"				  ]
[ "argRecord",		  "pattern",	  "sql",		  "(a:any...):str ",									  "SQLargRecord;"			  ]
[ "argRecord",		  "pattern",	  "sql",		  "():str ",										  "SQLargRecord;"			  ]
[ "affectedRows",		  "pattern",	  "sql",	  "(mvc:int,nr:wrd,w:str):int ",										  "mvc_affected_rows_wrap;"			  ]
[ "append",			  "pattern",	  "sql",	  "(mvc:int,sname:str,tname:str,cname:str,ins:any):int ",							  "mvc_append_wrap;"				  ]
[ "assert",		  "pattern",	  "sql",		  "(b:lng,msg:str):void ",								  "SQLassertLng;"			  ]
[ "assert",		  "pattern",	  "sql",		  "(b:wrd,msg:str):void ",								  "SQLassertWrd;"			  ]
[ "assert",		  "pattern",	  "sql",		  "(b:int,msg:str):void ",								  "SQLassertInt;"			  ]
[ "assert",		  "pattern",	  "sql",		  "(b:bit,msg:str):void ",								  "SQLassert;"				  ]
[ "bbp",		  "function",	  "sql",	  "() (id:bat[:oid,:int],name:bat[:oid,:str],htype:bat[:oid,:str],ttype:bat[:oid,:str],count:bat[:oid,:lng],refcnt:bat[:oid,:int],lrefcnt:bat[:oid,:int],location:bat[:oid,:str],heat:bat[:oid,:int],dirty:bat[:oid,:str],status:bat[:oid,:str],kind:bat[:oid,:str]);",	  "nil"					  ]
[ "bind_dbat",		  "command",	  "sql",		  "(clientid:int,schema:str,table:str,access:int,oldversion:lng,version:lng):bat[:oid,:oid] ", "mvc_diff_dbat_wrap;"			  ]
[ "bind",			  "pattern",	  "sql",	  "(mvc:int,schema:str,table:str,column:str,access:int,part_nr:int,nr_parts:int):bat[:oid,:any_1] ",		  "mvc_bind_wrap;"				  ]
[ "bind",			  "pattern",	  "sql",	  "(mvc:int,schema:str,table:str,column:str,access:int,low:oid,hgh:oid):bat[:oid,:any_1] ",			  "mvc_bind_wrap;"				  ]
[ "bind",			  "pattern",	  "sql",	  "(mvc:int,schema:str,table:str,column:str,access:int):bat[:oid,:any_1] ",					  "mvc_bind_wrap;"				  ]
[ "bind_idxbat",		  "pattern",	  "sql",	  "(mvc:int,schema:str,table:str,index:str,access:int,part_nr:int,nr_parts:int):bat[:oid,:any_1] ",		  "mvc_bind_idxbat_wrap;"			  ]
[ "bind_idxbat",		  "pattern",	  "sql",	  "(mvc:int,schema:str,table:str,index:str,access:int,low:oid,hgh:oid):bat[:oid,:any_1] ",			  "mvc_bind_idxbat_wrap;"			  ]
[ "bind_idxbat",		  "pattern",	  "sql",	  "(mvc:int,schema:str,table:str,index:str,access:int):bat[:oid,:any_1] ",					  "mvc_bind_idxbat_wrap;"			  ]
[ "bind_dbat",			  "pattern",	  "sql",	  "(mvc:int,schema:str,table:str,access:int):bat[:oid,:oid] ",							  "mvc_bind_dbat_wrap;"				  ]
[ "cluster2",		  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",								  "SQLcluster2;"			  ]
[ "cluster1",		  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",								  "SQLcluster1;"			  ]
[ "clients",		  "function",	  "sql",	  "() (user:bat[:oid,:str],login:bat[:oid,:str],lastcommand:bat[:oid,:str],actions:bat[:oid,:int],seconds:bat[:oid,:lng]);",																		  "nil"					  ]
[ "copyfrom",		  "pattern",	  "sql",	  "(sname:str,tname:str,sep:str,rsep:str,ssep:str,ns:str,nr:lng,offset:lng,locked:int):bat[:oid,:any]... ",																				  "mvc_import_table_stdin;"		  ]
[ "copy_from",		  "pattern",	  "sql",	  "(sname:str,tname:str,sep:str,rsep:str,ssep:str,ns:str,fname:str,nr:lng,offset:lng,locked:int):bat[:oid,:any]... ",																			  "mvc_import_table_wrap;"		  ]
[ "clear_table",	  "pattern",	  "sql",		  "(sname:str,tname:str):wrd ",								  "mvc_clear_table_wrap;"		  ]
[ "catalog",			  "pattern",	  "sql",	  "(type:int,iname:str,itype:int,sname:str,tname:str...):void ",							  "SQLcatalog;"				  ]
[ "catalog",			  "pattern",	  "sql",	  "(type:int,sname:str,tname:str,grantee:str,privs:int,cname:str,grant:int,grantor:int):void ", "SQLcatalog;"				  ]
[ "catalog",			  "pattern",	  "sql",	  "(type:int,user:str,passwd:str,enc:int,schema:str,fullname:str):void ",						  "SQLcatalog;"				  ]
[ "catalog",			  "pattern",	  "sql",	  "(type:int,grantee:str,role:str):void ",										  "SQLcatalog;"				  ]
[ "catalog",		  "pattern",	  "sql",		  "(type:int,sname:str,t:ptr,restart:lng):void ",					  "SQLcatalog;"				  ]
[ "catalog",		  "pattern",	  "sql",		  "(type:int,sname:str,t:ptr,temp:int):void ",						  "SQLcatalog;"				  ]
[ "catalog",			  "pattern",	  "sql",	  "(type:int,sname:str,t:ptr):void ",																													  "SQLcatalog;"				  ]
[ "catalog",			  "pattern",	  "sql",	  "(type:int,sname:str,name:str,tname:str,time:int,o:int,event:int,oname:str,nname:str,condition:str,query:str):void ",																			  "SQLcatalog;"				  ]
[ "catalog",			  "pattern",	  "sql",	  "(type:int,sname:str,name:str,funcid:int,ft:int,action:int):void ",																									  "SQLcatalog;"				  ]
[ "catalog",		  "pattern",	  "sql",		  "(type:int,sname:str,name:str,action:int):void ",					  "SQLcatalog;"				  ]
[ "commit",		  "pattern",	  "sql",	  "():void ",														  "SQLcommit;"					  ]
[ "dropdictionary",	  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",								  "SQLdropDictionary;"			  ]
[ "drop_hash",		  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",								  "SQLdrop_hash;"			  ]
[ "dense_rank",		  "command",	  "sql",		  "(b:bat[:oid,:any_1]):bat[:oid,:int] ",						  "sql_dense_rank;"			  ]
[ "dense_rank_grp",	  "command",	  "sql",		  "(b:bat[:oid,:any_1],gp:bat[:oid,:oid],gpe:bat[:oid,:oid]):bat[:oid,:int] ",		  "sql_dense_rank_grp;"			  ]
[ "dec_round",		  "command",	  "sql",		  "(v:dbl,r:dbl):dbl ",									  "dbl_dec_round_wrap;"			  ]
[ "dec_round",		  "command",	  "sql",		  "(v:flt,r:flt):flt ",									  "flt_dec_round_wrap;"			  ]
[ "dec_round",		  "command",	  "sql",		  "(v:lng,r:lng):lng ",									  "lng_dec_round_wrap;"			  ]
[ "dec_round",		  "command",	  "sql",		  "(v:int,r:int):int ",									  "int_dec_round_wrap;"			  ]
[ "dec_round",		  "command",	  "sql",		  "(v:sht,r:sht):sht ",									  "sht_dec_round_wrap;"			  ]
[ "dec_round",		  "command",	  "sql",		  "(v:bte,r:bte):bte ",									  "bte_dec_round_wrap;"			  ]
[ "dump_trace",		  "pattern",	  "sql",	  "() (event:bat[:oid,:int],clk:bat[:oid,:str],pc:bat[:oid,:str],thread:bat[:oid,:int],user:bat[:oid,:int],ticks:bat[:oid,:lng],reads:bat[:oid,:lng],writes:bat[:oid,:lng],rbytes:bat[:oid,:lng],wbytes:bat[:oid,:lng],type:bat[:oid,:str],stmt:bat[:oid,:str]) ",	  "dump_trace;"				  ]
[ "dump_opt_stats",	  "pattern",	  "sql",	  "() (rewrite:bat[:oid,:str],count:bat[:oid,:int]) ",																											  "dump_opt_stats;"			  ]
[ "dump_cache",		  "pattern",	  "sql",	  "() (query:bat[:oid,:str],count:bat[:oid,:int]) ",																											  "dump_cache;"				  ]
[ "db_users",		  "pattern",	  "sql",	  "():bat[:oid,:str] ",																															  "db_users_wrap;"			  ]
[ "dropDeclaredTables",	  "pattern",	  "sql",		  "(nr:int):void ",									  "mvc_drop_declared_tables_wrap;"	  ]
[ "dropDeclaredTable",	  "pattern",	  "sql",		  "(name:str):void ",									  "mvc_drop_declared_table_wrap;"	  ]
[ "dtColumn",		  "pattern",	  "sql",		  "(rs:int,tname:str,name:str,typename:str,digits:int,scale:int):void ",		  "mvc_declared_table_column_wrap;"	  ]
[ "declaredTable",	  "pattern",	  "sql",		  "(name:str):int ",									  "mvc_declared_table_wrap;"		  ]
[ "delete",			  "pattern",	  "sql",	  "(mvc:int,sname:str,tname:str,b:any):int ",									  "mvc_delete_wrap;"				  ]
[ "epilogue",		  "command",	  "sql",		  "():void ",										  "SQLepilogue;"			  ]
[ "exportValue",	  "pattern",	  "sql",		  "(qtype:int,tname:str,name:str,typename:str,digits:int,scale:int,eclass:int,val:any_1,w:str):void ", "mvc_export_value_wrap;"		  ]
[ "exportOperation",	  "pattern",	  "sql",		  "(w:str):void ",									  "mvc_export_operation_wrap;"		  ]
[ "exportChunk",	  "pattern",	  "sql",		  "(s:streams,res_id:int,offset:int,nr:int):void ",					  "mvc_export_chunk_wrap;"		  ]
[ "exportChunk",	  "pattern",	  "sql",		  "(s:streams,res_id:int):void ",							  "mvc_export_chunk_wrap;"		  ]
[ "exportResult",	  "pattern",	  "sql",		  "(s:streams,res_id:int):void ",							  "mvc_export_result_wrap;"		  ]
[ "exportHead",		  "pattern",	  "sql",		  "(s:streams,res_id:int):void ",							  "mvc_export_head_wrap;"		  ]
[ "evalAlgebra",		  "pattern",	  "sql",	  "(cmd:str,optimize:bit):void ",						  "RAstatement;"			  ]
[ "eval",		  "pattern",	  "sql",		  "(cmd:str,output:bit):void ",								  "SQLstatement;"			  ]
[ "eval",		  "pattern",	  "sql",		  "(cmd:str):void ",									  "SQLstatement;"			  ]
[ "forgetPrevious",			  "pattern",	  "sql",	  "():void ",																  "OPTforgetPrevious;"					  ]
[ "gzexpand",		  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",								  "SQLexpand;"				  ]
[ "gztruncate",		  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",								  "SQLtruncate;"			  ]
[ "gzdecompress",	  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",								  "SQLgzdecompress;"			  ]
[ "gzcompress",		  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",								  "SQLgzcompress;"			  ]
[ "getVersion",		  "command",	  "sql",		  "(clientid:int):lng ",								  "mvc_getVersion;"			  ]
[ "get_value",		  "pattern",	  "sql",		  "(sname:str,sequence:str):lng ",							  "mvc_get_value;"			  ]
[ "getVariable",		  "pattern",	  "sql",	  "(mvc:int,varname:str):any_1 ",										  "getVariable;"				  ]
[ "importTable",	  "pattern",	  "sql",	  "(sname:str,tname:str,fname:str...):bat[:oid,:any]... ",																										  "mvc_bin_import_table_wrap;"		  ]
[ "include",		  "pattern",	  "sql",		  "(fname:str):void ",									  "SQLinclude;"				  ]
[ "init",		  "pattern",	  "sql",		  "():void ",										  "SQLinitEnvironment;"			  ]
[ "keepquery",				  "function",	  "sql",	  "(qid:int,qry:str,parse:lng,optimize:lng):void;",											  "nil"							  ]
[ "logfile",		  "pattern",	  "sql",		  "(filename:str):void ",								  "mvc_logfile;"			  ]
[ "ms_trunc",		  "command",	  "sql",		  "(v:dbl,r:int):dbl ",									  "dbl_trunc_wrap;"			  ]
[ "ms_trunc",		  "command",	  "sql",		  "(v:flt,r:int):flt ",									  "flt_trunc_wrap;"			  ]
[ "mvc",			  "pattern",	  "sql",	  "():int ",													  "SQLmvc;"					  ]
[ "newdictionary",	  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",								  "SQLnewDictionary;"			  ]
[ "not_uniques",	  "command",	  "sql",		  "(b:bat[:oid,:wrd]):bat[:oid,:oid] ",							  "not_unique_oids;"			  ]
[ "not_uniques",	  "command",	  "sql",		  "(b:bat[:oid,:oid]):bat[:oid,:oid] ",							  "not_unique_oids;"			  ]
[ "not_unique",		  "command",	  "sql",		  "(b:bat[:oid,:oid]):bit ",								  "not_unique;"				  ]
[ "next_value",		  "pattern",	  "sql",		  "(sname:str,sequence:str):lng ",							  "mvc_next_value;"			  ]
[ "optimizers",			  "command",	  "sql",	  "() (X_1:bat[:oid,:str],X_2:bat[:oid,:str],X_3:bat[:oid,:str]) ",					  "getPipeCatalog;"			  ]
[ "prelude",		  "command",	  "sql",		  "():void ",										  "SQLprelude;"				  ]
[ "password",		  "pattern",	  "sql",		  "(user:str):str ",									  "db_password_wrap;"			  ]
[ "queryId",				  "function",	  "sql",	  "(qid:int):void;",															  "nil"							  ]
[ "rdfshred",		  "pattern",	  "sql",		  "(location:str,gname:str,schema:str):void ",						  "SQLrdfShred;"			  ]
[ "reuse",		  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",								  "SQLreuse;"				  ]
[ "rank",		  "command",	  "sql",		  "(b:bat[:oid,:any_1]):bat[:oid,:int] ",						  "sql_rank;"				  ]
[ "rank_grp",		  "command",	  "sql",		  "(b:bat[:oid,:any_1],gp:bat[:oid,:oid],gpe:bat[:oid,:oid]):bat[:oid,:int] ",		  "sql_rank_grp;"			  ]
[ "round",		  "command",	  "sql",		  "(v:dbl,r:bte):dbl ",									  "dbl_round_wrap;"			  ]
[ "round",		  "command",	  "sql",		  "(v:flt,r:bte):flt ",									  "flt_round_wrap;"			  ]
[ "round",		  "command",	  "sql",		  "(v:lng,d:int,s:int,r:bte):lng ",							  "lng_round_wrap;"			  ]
[ "round",		  "command",	  "sql",		  "(v:int,d:int,s:int,r:bte):int ",							  "int_round_wrap;"			  ]
[ "round",		  "command",	  "sql",		  "(v:sht,d:int,s:int,r:bte):sht ",							  "sht_round_wrap;"			  ]
[ "round",		  "command",	  "sql",		  "(v:bte,d:int,s:int,r:bte):bte ",							  "bte_round_wrap;"			  ]
[ "rsColumn",		  "pattern",	  "sql",		  "(rs:int,tname:str,name:str,typename:str,digits:int,scale:int,col:bat[:oid,:any_1]):void ", "mvc_result_column_wrap;"		  ]
[ "rsColumn",		  "pattern",	  "sql",		  "(rs:int,tname:str,name:str,typename:str,digits:int,scale:int,val:any_1):void ",	  "mvc_result_value_wrap;"		  ]
[ "resultSet",		  "pattern",	  "sql",		  "(nr_cols:int,qtype:int,order:bat[:oid,:any_1]):int ",				  "mvc_result_table_wrap;"		  ]
[ "resultSet",		  "pattern",	  "sql",		  "(nr_cols:int,qtype:int,order:any_1):int ",						  "mvc_result_row_wrap;"		  ]
[ "resultSet",		  "pattern",	  "sql",		  "(nr_cols:int,sep:str,rsep:str,ssep:str,ns:str,order:bat[:oid,:any_1]):int ",		  "mvc_result_file_wrap;"		  ]
[ "resultSet",		  "pattern",	  "sql",		  "(nr_cols:int,sep:str,rsep:str,ssep:str,ns:str,order:any_1):int ",			  "mvc_result_file_wrap;"		  ]
[ "restart",		  "pattern",	  "sql",		  "(sname:str,sequence:str,start:lng):lng ",						  "mvc_restart_seq;"			  ]
[ "shrink",		  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",								  "SQLshrink;"				  ]
[ "storage",		  "pattern",	  "sql",	  "() (schema:bat[:oid,:str],table:bat[:oid,:str],column:bat[:oid,:str],location:bat[:oid,:str],count:bat[:oid,:lng],capacity:bat[:oid,:lng],width:bat[:oid,:int],size:bat[:oid,:lng],hashsize:bat[:oid,:lng],sorted:bat[:oid,:bit]) ",					  "sql_storage;"			  ]
[ "sql_variables",	  "pattern",	  "sql",	  "():bat[:oid,:str] ",																															  "sql_variables;"			  ]
[ "sql_environment",	  "function",	  "sql",	  "() (name:bat[:oid,:str],value:bat[:oid,:str]);",																											  "nil"					  ]
[ "single",		  "function",	  "sql",		  "(x:any_2):bat[:oid,:any_2];",							  "nil"					  ]
[ "setVariable",		  "pattern",	  "sql",	  "(mvc:int,varname:str,value:any_1):int ",									  "setVariable;"				  ]
[ "start2",		  "pattern",	  "sql",		  "():void ",										  "SQLsession2;"			  ]
[ "start",		  "pattern",	  "sql",		  "():void ",										  "SQLsession;"				  ]
[ "times",		  "factory",	  "sql",		  "():void;",										  "nil"					  ]
[ "times",		  "function",	  "sql",		  "(elaps:int,inblock:lng,oublock:lng):void;",						  "nil"					  ]
[ "transaction",	  "pattern",	  "sql",	  "():void ",														  "SQLtransaction2;"				  ]
[ "trans",		  "pattern",	  "sql",		  "(type:int,chain:int,name:str):void ",						  "SQLtransaction;"			  ]
[ "update",			  "pattern",	  "sql",	  "(mvc:int,sname:str,tname:str,cname:str,ins:any):int ",							  "mvc_update_wrap;"				  ]
[ "vacuum",		  "pattern",	  "sql",		  "(sch:str,tbl:str):void ",								  "SQLvacuum;"				  ]
[ "zero_or_one",	  "function",	  "sql",		  "(b:bat[:oid,:any_1],gp:bat[:oid,:oid],gpe:bat[:oid,:oid]):bat[:oid,:any_1];",	  "nil"					  ]
[ "zero_or_one",	  "command",	  "sql",		  "(col:bat[:any_2,:any_1]):any_1 ",							  "zero_or_one;"			  ]
[ "bind_idxbat",	  "function",	  "octopus",	  "(conn:str,sch:str,tab:str,index:str,access:int,part_nr:int,nr_parts:int,version:int):bat[:oid,:oid];",		  "nil"						  ]
[ "bind",		  "function",	  "octopus",	  "(conn:str,sch:str,tab:str,col:str,kind:int,part_nr:int,nr_parts:int,version:int):bat[:oid,:any_1];",			  "nil"						  ]
[ "bind",		  "function",	  "octopus",	  "(mvc:int,sch:str,tab:str,col:str,kind:int,part_nr:int,nr_parts:int,version:int):bat[:oid,:any_1];",			  "nil"						  ]
[ "bind_idxbat",	  "function",	  "octopus",		  "(conn:str,sch:str,tab:str,index:str,access:int,low:oid,hgh:oid,version:int):bat[:oid,:oid];", "nil"					  ]
[ "bind_idxbat",	  "function",	  "octopus",		  "(conn:str,sch:str,tab:str,index:str,access:int,version:int):bat[:oid,:oid];",	  "nil"					  ]
[ "bind_idxbat",		  "function",	  "octopus",	  "(mvc:int,sch:str,tab:str,index:str,access:int,version:int):bat[:oid,:oid];",					  "nil"						  ]
[ "bind_dbat",		  "function",	  "octopus",		  "(conn:str,sch:str,tab:str,access:int,version:int):bat[:oid,:oid];",			  "nil"					  ]
[ "bind_dbat",			  "function",	  "octopus",	  "(mvc:int,sch:str,tab:str,access:int,version:int):bat[:oid,:oid];",						  "nil"						  ]
[ "bind",		  "function",	  "octopus",		  "(conn:str,sch:str,tab:str,col:str,kind:int,version:int):bat[:oid,:any_1];",		  "nil"					  ]
[ "bind",		  "function",	  "octopus",		  "(conn:str,sch:str,tab:str,col:str,kind:int,low:oid,hgh:oid,version:int):bat[:oid,:any_1];", "nil"					  ]
[ "bind",			  "function",	  "octopus",	  "(mvc:int,sch:str,tab:str,col:str,kind:int,version:int):bat[:oid,:any_1];",					  "nil"						  ]
[ "bind",			  "function",	  "octopus",	  "(mvc:int,sch:str,tab:str,col:str,kind:int,low:oid,hgh:oid,version:int):bat[:oid,:any_1];",			  "nil"						  ]
[ "connect",			  "command",	  "octopus",	  "(dbname:str):str ",															  "OCTOPUSconnect;"					  ]
[ "getBid",		  "function",	  "octopus",		  "(dbname:str,fn:str,bidtype:sht):lng;",						  "nil"					  ]
[ "getVariable",	  "function",	  "octopus",		  "(conn:str,name:str):any_1;",								  "nil"					  ]
[ "getVersion",			  "command",	  "octopus",	  "():int ",														  "OCTOPUSgetVersion;"			  ]
[ "legAdvice",				  "pattern",	  "octopus",	  "(mod:str,fcn:str):int ",													  "OPTlegAdvice;"					  ]
[ "register",			  "pattern",	  "octopus",	  "(dbname:str,fname:str...):void ",													  "OCTOPUSregister;"					  ]
[ "addReg",			  "pattern",	  "datacyclotron", "(sch:str,tab:str,col:str,acc:int,part:int,f_bun:int,l_bun:int):int ",								  "addRegWrap;"						  ]
[ "bind",			  "pattern",	  "datacyclotron", "(schema:str,table:str,column:str,access:int,partition:int,fbun:int,lbun:int):int ",							  "DCYbind;"						  ]
[ "pin",			  "pattern",	  "datacyclotron", "(req_id:int):bat[:any_1,:any_3] ",													  "DCYpin;"						  ]
[ "unpin",			  "pattern",	  "datacyclotron", "(req_id:int):void ",															  "DCYunpin;"						  ]
[ "bind",				  "command",	  "dictionary",	  "(nme:str) (idx:bat[:oid,:any_1],val:bat[:any_1,:any_2]) ",										  "DICTbind;"						  ]
[ "compress",				  "pattern",	  "dictionary",	  "(s:str,b:bat[:any_1,:any_2]):void ",											  "DICTcompress;"				  ]
[ "decompress",				  "command",	  "dictionary",	  "(nme:str):void ",													  "DICTdecompress;"					  ]
[ "encode",				  "command",	  "dictionary",	  "(val:bat[:any_1,:any_2],b:bat[:oid,:any_2]):bat[:oid,:any_1] ",									  "DICTencode;"						  ]
[ "expand",				  "command",	  "dictionary",	  "(val:bat[:any_1,:any_2],b:bat[:oid,:any_2]):bat[:any_1,:any_2] ",								  "DICTexpand;"					  ]
[ "group",				  "command",	  "dictionary",	  "(idx:bat[:oid,:any_1],val:bat[:any_1,:any_2]):bat[:oid,:any_2] ",								  "DICTgroupid;"				  ]
[ "initialize",				  "command",	  "dictionary",	  "():void ",															  "DICTinitialize;"				  ]
[ "materialize",	  "command",	  "centipede",	  "(b:bat[:any_1,:any_2],low:any_2,high:any_2):bat[:any_1,:any_2] ",																									  "OPTcentipedeMaterialize;"		  ]
[ "vector",		  "pattern",	  "centipede",	  "(b:bat[:oid,:any_1]):any_1... ",																													  "OPTvector;"				  ]
[ "accessmode",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTaccessmode;"					  ]
[ "accessmode",			  "pattern",	  "optimizer",	  "():str ",																  "OPTaccessmode;"					  ]
[ "aliases",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTaliases;"						  ]
[ "aliases",			  "pattern",	  "optimizer",	  "():str ",																  "OPTaliases;"						  ]
[ "accumulators",		  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTaccumulators;"					  ]
[ "accumulators",		  "pattern",	  "optimizer",	  "():str ",																  "OPTaccumulators;"					  ]
[ "cluster",			  "pattern",	  "optimizer",		  "(mod:str,fcn:str):str ",													  "OPTcluster;"					  ]
[ "cluster",			  "pattern",	  "optimizer",		  "():str ",															  "OPTcluster;"					  ]
[ "costModel",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTcostModel;"					  ]
[ "costModel",			  "pattern",	  "optimizer",	  "():str ",																  "OPTcostModel;"					  ]
[ "commonTerms",		  "pattern",	  "optimizer",	  "(mod:any_1,fcn:any_2):str ",														  "OPTcommonTerms;"					  ]
[ "commonTerms",		  "pattern",	  "optimizer",	  "():str ",																  "OPTcommonTerms;"					  ]
[ "compression",		  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTcompress;"				  ]
[ "compression",		  "pattern",	  "optimizer",	  "():str ",														  "OPTcompress;"				  ]
[ "constants",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTconstants;"				  ]
[ "constants",			  "pattern",	  "optimizer",	  "():str ",																  "OPTconstants;"				  ]
[ "coercions",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTcoercion;"					  ]
[ "coercions",			  "pattern",	  "optimizer",	  "():str ",																  "OPTcoercion;"					  ]
[ "centipede",		  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",																														  "OPTcentipede;"			  ]
[ "centipede",		  "pattern",	  "optimizer",	  "():str ",																																  "OPTcentipede;"			  ]
[ "clrDebug",			  "pattern",	  "optimizer",	  "():void ",																  "QOTclrdebugOptimizers;"				  ]
[ "dumpQEP",			  "pattern",	  "optimizer",	  "():void ",																  "OPTdumpQEP;"						  ]
[ "derivePath",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",															  "OPTderivePath;"					  ]
[ "derivePath",				  "pattern",	  "optimizer",	  "():str ",																	  "OPTderivePath;"					  ]
[ "datacyclotron",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",										  "OPTdatacyclotron;"				  ]
[ "datacyclotron",			  "pattern",	  "optimizer",	  "():str ",												  "OPTdatacyclotron;"				  ]
[ "deadcode",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTdeadcode;"					  ]
[ "deadcode",			  "pattern",	  "optimizer",	  "():str ",																  "OPTdeadcode;"					  ]
[ "dictionary",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTdictionary;"					  ]
[ "dictionary",				  "pattern",	  "optimizer",	  "():str ",																  "OPTdictionary;"					  ]
[ "dataflow",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTdataflow;"					  ]
[ "dataflow",			  "pattern",	  "optimizer",	  "():str ",																  "OPTdataflow;"					  ]
[ "evaluate",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTevaluate;"					  ]
[ "evaluate",			  "pattern",	  "optimizer",	  "():str ",																  "OPTevaluate;"					  ]
[ "emptySet",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTemptySet;"					  ]
[ "emptySet",			  "pattern",	  "optimizer",	  "():str ",																  "OPTemptySet;"					  ]
[ "factorize",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTfactorize;"					  ]
[ "factorize",			  "pattern",	  "optimizer",	  "():str ",																  "OPTfactorize;"					  ]
[ "garbageCollector",		  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTgarbageCollector;"				  ]
[ "garbageCollector",		  "pattern",	  "optimizer",	  "():str ",																  "OPTgarbageCollector;"				  ]
[ "history",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPThistory;"					  ]
[ "history",				  "pattern",	  "optimizer",	  "():str ",																  "OPThistory;"					  ]
[ "heuristics",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTheuristics;"					  ]
[ "heuristics",			  "pattern",	  "optimizer",	  "():str ",																  "OPTheuristics;"					  ]
[ "inline",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTinline;"						  ]
[ "inline",			  "pattern",	  "optimizer",	  "():str ",																  "OPTinline;"						  ]
[ "joinPath",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTjoinPath;"					  ]
[ "joinPath",			  "pattern",	  "optimizer",	  "():str ",																  "OPTjoinPath;"					  ]
[ "mapreduce",				  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",													  "OPTmapreduce;"					  ]
[ "mapreduce",				  "pattern",	  "optimizer",	  "():str ",															  "OPTmapreduce;"					  ]
[ "mitosis",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTmitosis;"						  ]
[ "mitosis",			  "pattern",	  "optimizer",	  "():str ",																  "OPTmitosis;"						  ]
[ "mergetable",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTmergetable;"					  ]
[ "mergetable",			  "pattern",	  "optimizer",	  "():str ",																  "OPTmergetable;"					  ]
[ "multiplex",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):void ",														  "OPTmultiplex;"					  ]
[ "multiplex",			  "pattern",	  "optimizer",	  "():void ",																  "OPTmultiplex;"					  ]
[ "macro",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str,targetmod:str,targetfcn:str):void ",										  "OPTmacro;"						  ]
[ "macro",			  "pattern",	  "optimizer",	  "(targetmod:str,targetfcn:str):void ",												  "OPTmacro;"						  ]
[ "origin",		  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",												  "OPTorigin;"					  ]
[ "origin",		  "pattern",	  "optimizer",	  "():str ",														  "OPTorigin;"					  ]
[ "octopus",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPToctopus;"						  ]
[ "octopus",			  "pattern",	  "optimizer",	  "():str ",																  "OPToctopus;"						  ]
[ "orcam",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str,targetmod:str,targetfcn:str):void ",										  "OPTorcam;"						  ]
[ "orcam",			  "pattern",	  "optimizer",	  "(targetmod:str,targetfcn:str):void ",												  "OPTorcam;"						  ]
[ "optimize",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):void ",														  "QOToptimize;"					  ]
[ "pushranges",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTpushranges;"					  ]
[ "pushranges",			  "pattern",	  "optimizer",	  "():str ",																  "OPTpushranges;"					  ]
[ "prejoin",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",													  "OPTprejoin;"					  ]
[ "prejoin",			  "pattern",	  "optimizer",	  "():str ",															  "OPTprejoin;"					  ]
[ "peephole",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTpeephole;"					  ]
[ "peephole",			  "pattern",	  "optimizer",	  "():str ",																  "OPTpeephole;"					  ]
[ "prelude",			  "pattern",	  "optimizer",	  "():void ",																  "optimizer_prelude;"					  ]
[ "remoteQueries",		  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTremoteQueries;"					  ]
[ "remoteQueries",		  "pattern",	  "optimizer",	  "():str ",																  "OPTremoteQueries;"					  ]
[ "recycle",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTrecycle;"						  ]
[ "recycle",			  "pattern",	  "optimizer",	  "():str ",																  "OPTrecycle;"						  ]
[ "remap",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTremap;"						  ]
[ "remap",			  "pattern",	  "optimizer",	  "():str ",																  "OPTremap;"						  ]
[ "reduce",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTreduce;"						  ]
[ "reduce",			  "pattern",	  "optimizer",	  "():str ",																  "OPTreduce;"						  ]
[ "reorder",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",															  "OPTreorder;"					  ]
[ "reorder",			  "pattern",	  "optimizer",	  "():str ",																	  "OPTreorder;"					  ]
[ "sql_append",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",								  "OPTsql_append;"			  ]
[ "sql_append",			  "pattern",	  "optimizer",	  "():str ",										  "OPTsql_append;"			  ]
[ "strengthReduction",		  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTstrengthReduction;"				  ]
[ "strengthReduction",		  "pattern",	  "optimizer",	  "():str ",																  "OPTstrengthReduction;"				  ]
[ "singleton",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTsingleton;"					  ]
[ "singleton",			  "pattern",	  "optimizer",	  "():str ",																  "OPTsingleton;"					  ]
[ "showPlan",			  "pattern",	  "optimizer",	  "():void ",																  "QOTshowPlan;"					  ]
[ "showPlan",			  "pattern",	  "optimizer",	  "(M:str,F:str,s:str):void ",														  "QOTshowPlan;"					  ]
[ "showFlowGraph",		  "pattern",	  "optimizer",	  "(M:str,F:str,s:str):void ",														  "QOTshowFlowGraph;"					  ]
[ "setDebug",			  "pattern",	  "optimizer",	  "():void ",																  "QOTdebugOptimizers;"					  ]
[ "trace",			  "pattern",	  "optimizer",	  "(mod:str,fcn:str):str ",														  "OPTdeadcode;"					  ]
[ "trace",			  "pattern",	  "optimizer",	  "():str ",																  "OPTtrace;"						  ]
[ "uniform",		  "command",	  "sample",	  "(b:bat[:oid,:any],p:dbl):bat[:oid,:any] ",																												  "SAMPLEuniform_dbl;"			  ]
[ "uniform",		  "command",	  "sample",	  "(b:bat[:oid,:any],s:wrd):bat[:oid,:any] ",																												  "SAMPLEuniform;"			  ]
[ "close",			  "pattern",	  "statistics",	  "():void ",																  "STATclose;"						  ]
[ "dump",			  "pattern",	  "statistics",	  "():void ",																  "STATdump;"						  ]
[ "discard",				  "pattern",	  "statistics",	  "(name:bat[:any_1,:any_2]):void ",												  "STATdiscard2;"					  ]
[ "discard",			  "pattern",	  "statistics",	  "(name:str):void ",															  "STATdiscard;"					  ]
[ "deposit",				  "pattern",	  "statistics",		  "(name:bat[:any_1,:any_2]):void ",											  "STATdeposit;"				  ]
[ "deposit",			  "pattern",	  "statistics",	  "(name:str):void ",															  "STATdepositStr;"				  ]
[ "destroy",			  "pattern",	  "statistics",	  "():void ",																  "STATdestroy;"					  ]
[ "epilogue",			  "command",	  "statistics",	  "():void ",																  "STATepilogue;"					  ]
[ "forceUpdate",		  "command",	  "statistics",	  "(bnme:str):void ",															  "STATforceUpdate;"					  ]
[ "forceUpdate",		  "command",	  "statistics",	  "():void ",																  "STATforceUpdateAll;"					  ]
[ "getHistogram",			  "pattern",	  "statistics",	  "(nme:str):bat[:any_1,:any_2] ",											  "STATgetHistogram;"				  ]
[ "getMax",				  "pattern",	  "statistics",	  "(nme:str):lng ",														  "STATgetMax;"						  ]
[ "getMin",				  "pattern",	  "statistics",	  "(nme:str):lng ",														  "STATgetMin;"						  ]
[ "getSize",				  "pattern",	  "statistics",	  "(nme:str):lng ",														  "STATgetSize;"					  ]
[ "getCount",				  "pattern",	  "statistics",	  "(nme:str):lng ",														  "STATgetCount;"					  ]
[ "getHotset",				  "pattern",	  "statistics",	  "():bat[:int,:str] ",														  "STATgetHotset;"					  ]
[ "getObjects",			  "command",	  "statistics",	  "():bat[:int,:str] ",															  "STATgetObjects;"					  ]
[ "hasMoreElements",	  "pattern",	  "statistics",	  "() (X_1:lng,X_2:str) ",																														  "STAThasMoreElements;"		  ]
[ "newIterator",	  "pattern",	  "statistics",	  "() (X_1:lng,X_2:str) ",																														  "STATnewIterator;"			  ]
[ "open",			  "pattern",	  "statistics",	  "():void ",																  "STATopen;"						  ]
[ "prelude",			  "command",	  "statistics",	  "():void ",																  "STATprelude;"					  ]
[ "release",				  "pattern",	  "statistics",	  "(name:bat[:any_1,:any_2]):void ",												  "STATrelease;"					  ]
[ "release",			  "pattern",	  "statistics",	  "(name:str):void ",															  "STATreleaseStr;"					  ]
[ "releaseAll",			  "pattern",	  "statistics",	  "():void ",																  "STATreleaseAll;"					  ]
[ "toString",			  "pattern",	  "statistics",	  "(name:any_1):str ",															  "STATtoString;"					  ]
[ "take",			  "pattern",	  "statistics",	  "(name:any_1):any_2 ",														  "STATtake;"						  ]
[ "update",			  "command",	  "statistics",	  "():void ",																  "STATupdate;"						  ]
[ "activate",				  "pattern",	  "profiler",	  "(name:str...):void ",													  "CMDactivateProfiler;"				  ]
[ "cleanup",			  "command",	  "profiler",	  "():void ",																  "CMDcleanup;"						  ]
[ "clrFilter",			  "pattern",	  "profiler",	  "(v:any):void ",															  "CMDsetFilterVariable;"				  ]
[ "clrFilter",			  "pattern",	  "profiler",	  "(mod:str,fcn:str):void ",														  "CMDclrFilterProfiler;"				  ]
[ "closeStream",		  "command",	  "profiler",	  "():void ",																  "CMDcloseProfilerStream;"				  ]
[ "dumpTrace",			  "command",	  "profiler",	  "():void ",																  "CMDdumpTrace;"					  ]
[ "deactivate",				  "pattern",	  "profiler",	  "(name:str...):void ",													  "CMDdeactivateProfiler;"				  ]
[ "getMemory",				  "pattern",	  "profiler",	  "():lng ",																  "CMDgetMemory;"				  ]
[ "getFootprint",			  "pattern",	  "profiler",	  "():lng ",																  "CMDgetFootprint;"				  ]
[ "getSystemTime",		  "command",	  "profiler",	  "():lng ",																  "CMDgetSystemTime;"				  ]
[ "getUserTime",		  "command",	  "profiler",	  "():lng ",																  "CMDgetUserTime;"				  ]
[ "getDiskWrites",		  "command",	  "profiler",	  "():lng ",																  "CMDgetDiskWrites;"				  ]
[ "getDiskReads",		  "command",	  "profiler",	  "():lng ",																  "CMDgetDiskReads;"				  ]
[ "getEvent",		  "pattern",	  "profiler",	  "() (X_1:lng,X_2:lng,X_3:lng) ",																													  "CMDgetEvent;"			  ]
[ "getTrace",			  "command",	  "profiler",	  "(e:str):bat[:int,:any_1] ",														  "CMDgetTrace;"					  ]
[ "noop",			  "command",	  "profiler",	  "():void ",																  "CMDnoopProfiler;"					  ]
[ "openStream",			  "pattern",	  "profiler",	  "(host:str,port:int):void ",														  "CMDsetProfilerStream;"				  ]
[ "openStream",			  "pattern",	  "profiler",	  "(fnme:str):void ",															  "CMDsetProfilerFile;"					  ]
[ "openStream",			  "pattern",	  "profiler",	  "():void ",																  "CMDopenProfilerStream;"				  ]
[ "reset",			  "command",	  "profiler",	  "():void ",																  "CMDclearTrace;"					  ]
[ "setMemoryFlag",		  "pattern",	  "profiler",	  "():void ",													  "CMDsetMemoryFlag;"				  ]
[ "setFootprintFlag",		  "pattern",	  "profiler",	  "():void ",													  "CMDsetFootprintFlag;"			  ]
[ "stop",			  "pattern",	  "profiler",	  "():void ",																  "CMDstopProfiler;"					  ]
[ "start",			  "pattern",	  "profiler",	  "():void ",																  "CMDstartProfiler;"					  ]
[ "setEndPoint",		  "pattern",	  "profiler",	  "(mod:str,fcn:str):void ",														  "CMDendPointProfiler;"				  ]
[ "setStartPoint",		  "pattern",	  "profiler",	  "(mod:str,fcn:str):void ",														  "CMDstartPointProfiler;"				  ]
[ "setFilter",			  "pattern",	  "profiler",	  "(v:any):void ",															  "CMDsetFilterVariable;"				  ]
[ "setFilter",			  "pattern",	  "profiler",	  "(mod:str,fcn:str):void ",														  "CMDsetFilterProfiler;"				  ]
[ "setNone",			  "pattern",	  "profiler",	  "():void ",																	  "CMDsetNoneProfiler;"				  ]
[ "setAll",			  "pattern",	  "profiler",	  "():void ",																  "CMDsetAllProfiler;"					  ]
[ "bind",			  "pattern",	  "mapi",	  "(key:int,remoteName:str):bat[:any_1,:any_2] ",											  "SERVERbindBAT;"					  ]
[ "bind",			  "pattern",	  "mapi",	  "(key:int,rschema:str,rtable:str,i:int):bat[:any_1,:any_2] ",										  "SERVERbindBAT;"					  ]
[ "bind",			  "pattern",	  "mapi",	  "(key:int,rschema:str,rtable:str,rcolumn:str,i:int):bat[:any_1,:any_2] ",								  "SERVERbindBAT;"					  ]
[ "connect",			  "pattern",	  "mapi",	  "(host:str,port:int,usr:str,passwd:str,lang:str):int ",										  "SERVERconnect;"					  ]
[ "destroy",			  "command",	  "mapi",	  "(mid:int):void ",															  "SERVERdestroy;"					  ]
[ "disconnect",			  "command",	  "mapi",	  "(mid:int):void ",															  "SERVERdisconnect;"					  ]
[ "disconnect",			  "command",	  "mapi",	  "():int ",																  "SERVERdisconnectALL;"				  ]
[ "disconnect",			  "command",	  "mapi",	  "(dbalias:str):int ",															  "SERVERdisconnectWithAlias;"				  ]
[ "explain",			  "command",	  "mapi",	  "(mid:int):str ",															  "SERVERexplain;"					  ]
[ "error",			  "command",	  "mapi",	  "(mid:int):int ",															  "SERVERerror;"					  ]
[ "fetch_reset",		  "command",	  "mapi",	  "(hdl:int):int ",															  "SERVERfetch_reset;"					  ]
[ "fetch_line",			  "command",	  "mapi",	  "(hdl:int):str ",															  "SERVERfetch_line;"					  ]
[ "fetch_field_array",		  "command",	  "mapi",	  "(hdl:int):bat[:int,:str] ",														  "SERVERfetch_field_bat;"				  ]
[ "fetch_field",	  "command",	  "mapi",		  "(hdl:int,fnr:int):bte ",							  "SERVERfetch_field_bte;"			  ]
[ "fetch_field",		  "command",	  "mapi",	  "(hdl:int,fnr:int):oid ",														  "SERVERfetch_field_oid;"				  ]
[ "fetch_field",		  "command",	  "mapi",	  "(hdl:int,fnr:int):void ",														  "SERVERfetch_field_void;"				  ]
[ "fetch_field",		  "command",	  "mapi",	  "(hdl:int,fnr:int):sht ",														  "SERVERfetch_field_sht;"				  ]
[ "fetch_field",		  "command",	  "mapi",	  "(hdl:int,fnr:int):lng ",														  "SERVERfetch_field_lng;"				  ]
[ "fetch_field",		  "command",	  "mapi",	  "(hdl:int,fnr:int):int ",														  "SERVERfetch_field_int;"				  ]
[ "fetch_field",		  "command",	  "mapi",	  "(hdl:int,fnr:int):str ",														  "SERVERfetch_field_str;"				  ]
[ "fetch_all_rows",		  "command",	  "mapi",		  "(hdl:int):lng ",														  "SERVERfetch_all_rows;"			  ]
[ "fetch_row",			  "command",	  "mapi",	  "(hdl:int):int ",															  "SERVERfetch_row;"					  ]
[ "finish",			  "command",	  "mapi",	  "(hdl:int):int ",															  "SERVERfinish;"					  ]
[ "getError",			  "command",	  "mapi",	  "(mid:int):str ",															  "SERVERgetError;"					  ]
[ "get_row_count",		  "command",	  "mapi",		  "(hdl:int):lng ",														  "SERVERget_row_count;"			  ]
[ "get_field_count",		  "command",	  "mapi",	  "(hdl:int):int ",															  "SERVERget_field_count;"				  ]
[ "lookup",			  "command",	  "mapi",	  "(dbalias:str):int ",															  "SERVERlookup;"					  ]
[ "listen",				  "command",	  "mapi",	  "(unixsocket:str):int ",													  "SERVERlisten_usock;"					  ]
[ "listen",			  "command",	  "mapi",	  "(port:int):int ",															  "SERVERlisten_port;"					  ]
[ "listen",			  "command",	  "mapi",	  "():int ",																  "SERVERlisten_default;"				  ]
[ "malclient",			  "command",	  "mapi",	  "(in:streams,out:streams):void ",													  "SERVERclient;"					  ]
[ "next_result",		  "command",	  "mapi",	  "(hdl:int):int ",															  "SERVERnext_result;"					  ]
[ "put",			  "pattern",	  "mapi",	  "(nme:str,val:any_1):str ",														  "SERVERputLocal;"					  ]
[ "put",			  "pattern",	  "mapi",	  "(mid:int,nme:str,val:any_1):void ",													  "SERVERput;"						  ]
[ "prepare",			  "command",	  "mapi",	  "(mid:int,qry:str):int ",														  "SERVERprepare;"					  ]
[ "ping",			  "command",	  "mapi",	  "(mid:int):int ",															  "SERVERping;"						  ]
[ "query_array",		  "pattern",	  "mapi",	  "(mid:int,qry:str,arg:str...):int ",													  "SERVERquery_array;"					  ]
[ "query_handle",		  "command",	  "mapi",	  "(mid:int,qry:str):int ",														  "SERVERquery_handle;"					  ]
[ "query",			  "command",	  "mapi",	  "(mid:int,qry:str):int ",														  "SERVERquery;"					  ]
[ "rpc",			  "command",	  "mapi",	  "(key:int,qry:str):void ",														  "SERVERquery;"					  ]
[ "rpc",			  "pattern",	  "mapi",	  "(key:int,qry:str):bat[:any_1,:any_2] ",												  "SERVERmapi_rpc_bat;"					  ]
[ "rpc",			  "pattern",	  "mapi",	  "(key:int,qry:str...):any ",														  "SERVERmapi_rpc_single_row;"				  ]
[ "rows_affected",		  "command",	  "mapi",		  "(hdl:int):lng ",														  "SERVERrows_affected;"			  ]
[ "reconnect",			  "command",	  "mapi",	  "(mid:int):void ",															  "SERVERreconnect;"					  ]
[ "reconnect",			  "pattern",	  "mapi",	  "(host:str,port:int,db_alias:str,usr:str,passwd:str,lang:str):int ",									  "SERVERreconnectAlias;"				  ]
[ "reconnect",			  "pattern",	  "mapi",	  "(host:str,port:int,usr:str,passwd:str,lang:str):int ",										  "SERVERreconnectWithoutAlias;"			  ]
[ "resume",			  "command",	  "mapi",	  "():void ",																  "SERVERresume;"					  ]
[ "setAlias",			  "command",	  "mapi",	  "(dbalias:str):void ",														  "SERVERsetAlias;"					  ]
[ "suspend",			  "command",	  "mapi",	  "():void ",																  "SERVERsuspend;"					  ]
[ "stop",			  "command",	  "mapi",	  "():void ",																  "SERVERstop;"						  ]
[ "trace",			  "command",	  "mapi",	  "(mid:int,flag:int):void ",														  "SERVERtrace;"					  ]
[ "emptySet",			  "command",	  "constraints",  "(b:bat[:oid,:any_2]):void ",														  "CemptySet;"						  ]
[ "assertSpace",			  "pattern",	  "language",	  "(depth:int):void ",												  "safeguardStack;"				  ]
[ "assert",			  "pattern",	  "language",	  "(v:any_1,pname:str,oper:str,val:any_2):void ",											  "MALassertTriple;"					  ]
[ "assert",			  "command",	  "language",	  "(v:oid,term:str):void ",														  "MALassertOid;"					  ]
[ "assert",			  "command",	  "language",	  "(v:str,term:str):void ",														  "MALassertStr;"					  ]
[ "assert",			  "command",	  "language",	  "(v:lng,term:str):void ",														  "MALassertLng;"					  ]
[ "assert",			  "command",	  "language",	  "(v:int,term:str):void ",														  "MALassertInt;"					  ]
[ "assert",			  "command",	  "language",	  "(v:sht,term:str):void ",														  "MALassertSht;"					  ]
[ "assert",			  "command",	  "language",	  "(v:bit,term:str):void ",														  "MALassertBit;"					  ]
[ "call",			  "pattern",	  "language",	  "(s:bat[:oid,:str]):void ",														  "CMDcallBAT;"						  ]
[ "call",			  "pattern",	  "language",	  "(s:str):void ",															  "CMDcallString;"					  ]
[ "dataflow",			  "pattern",	  "language",	  "():int ",																  "MALstartDataflow;"					  ]
[ "nextElement",	  "command",	  "language",	  "(step:dbl,last:dbl) (X_3:bit,X_4:dbl) ",																												  "RNGnextElement_dbl;"			  ]
[ "nextElement",	  "command",	  "language",	  "(step:flt,last:flt) (X_3:bit,X_4:flt) ",																												  "RNGnextElement_flt;"			  ]
[ "nextElement",	  "command",	  "language",	  "(step:lng,last:lng) (X_3:bit,X_4:lng) ",																												  "RNGnextElement_lng;"			  ]
[ "nextElement",	  "command",	  "language",	  "(step:int,last:int) (X_3:bit,X_4:int) ",																												  "RNGnextElement_int;"			  ]
[ "nextElement",	  "command",	  "language",	  "(step:sht,last:sht) (X_3:bit,X_4:sht) ",																												  "RNGnextElement_sht;"			  ]
[ "nextElement",	  "command",	  "language",	  "(step:oid,last:oid) (X_3:bit,X_4:oid) ",																												  "RNGnextElement_oid;"			  ]
[ "newRange",		  "command",	  "language",	  "(v:dbl) (X_2:bit,X_3:dbl) ",																														  "RNGnewRange_dbl;"			  ]
[ "newRange",		  "command",	  "language",	  "(v:flt) (X_2:bit,X_3:flt) ",																														  "RNGnewRange_flt;"			  ]
[ "newRange",		  "command",	  "language",	  "(v:lng) (X_2:bit,X_3:lng) ",																														  "RNGnewRange_lng;"			  ]
[ "newRange",		  "command",	  "language",	  "(v:int) (X_2:bit,X_3:int) ",																														  "RNGnewRange_int;"			  ]
[ "newRange",		  "command",	  "language",	  "(v:sht) (X_2:bit,X_3:sht) ",																														  "RNGnewRange_sht;"			  ]
[ "newRange",		  "command",	  "language",	  "(v:oid) (X_2:bit,X_3:oid) ",																														  "RNGnewRange_oid;"			  ]
[ "register",			  "pattern",	  "language",	  "(m:str,f:str,code:str,help:str):void ",												  "CMDregisterFunction;"				  ]
[ "raise",			  "command",	  "language",	  "(msg:str):str ",															  "CMDraise;"						  ]
[ "source",			  "pattern",	  "language",	  "(f:str):void ",															  "CMDevalFile;"					  ]
[ "setIOTrace",			  "pattern",	  "language",	  "(flg:bit):void ",															  "CMDsetIOTrace;"					  ]
[ "setTimerTrace",		  "pattern",	  "language",	  "(flg:bit):void ",															  "CMDsetTimerTrace;"					  ]
[ "setThreadTrace",		  "pattern",	  "language",	  "(flg:bit):void ",															  "CMDsetThreadTrace;"					  ]
[ "setMemoryTrace",		  "pattern",	  "language",	  "(flg:bit):void ",															  "CMDsetMemoryTrace;"					  ]
[ "completion",			  "pattern",	  "manual",	  "(pat:str):bat[:int,:str] ",														  "MANUALcompletion;"					  ]
[ "createXML",			  "pattern",	  "manual",	  "():void ",																  "MANUALcreate0;"					  ]
[ "createXML",			  "pattern",	  "manual",	  "(mod:str):void ",															  "MANUALcreate1;"					  ]
[ "help",			  "pattern",	  "manual",	  "(text:str):void ",															  "MANUALhelp;"						  ]
[ "index",			  "pattern",	  "manual",	  "():void ",																  "MANUALcreateIndex;"					  ]
[ "summary",			  "pattern",	  "manual",	  "():void ",														  "MANUALcreateSummary;"				  ]
[ "section",			  "pattern",	  "manual",	  "(mod:str):void ",															  "MANUALcreateSection;"				  ]
[ "search",			  "pattern",	  "manual",	  "(text:str):void ",															  "MANUALsearch;"					  ]
[ "equalType",			  "pattern",	  "inspect",	  "(l:any,r:any):bit ",															  "INSPECTequalType;"					  ]
[ "getStatistics",		  "command",	  "inspect",	  "(nme:str):bat[:any_1,:any_2] ",													  "QOTgetStatistics;"					  ]
[ "getEnvironment",		  "command",	  "inspect",	  "():bat[:str,:str] ",															  "INSPECTgetEnvironment;"				  ]
[ "getAtomSizes",		  "command",	  "inspect",	  "():bat[:int,:int] ",															  "INSPECTatom_sizes;"					  ]
[ "getAtomSuper",		  "command",	  "inspect",	  "():bat[:int,:str] ",															  "INSPECTatom_sup_names;"				  ]
[ "getAtomNames",		  "command",	  "inspect",	  "():bat[:int,:str] ",															  "INSPECTatom_names;"					  ]
[ "getTypeIndex",		  "pattern",	  "inspect",	  "(v:any_1):int ",															  "INSPECTtypeIndex;"					  ]
[ "getTypeIndex",		  "pattern",	  "inspect",	  "(v:bat[:any_1,:any_2]) (ht:int,tt:int) ",												  "INSPECTtypeIndex;"					  ]
[ "getTypeName",		  "command",	  "inspect",	  "(v:int):str ",															  "INSPECTtypename;"					  ]
[ "getType",			  "pattern",	  "inspect",	  "(v:any_1):str ",															  "INSPECTtypeName;"					  ]
[ "getType",			  "pattern",	  "inspect",	  "(v:bat[:any_1,:any_2]) (ht:str,tt:str) ",												  "INSPECTtypeName;"					  ]
[ "getSize",				  "pattern",	  "inspect",		  "(mod:str,fcn:str):lng ",												  "INSPECTgetFunctionSize;"			  ]
[ "getSize",			  "pattern",	  "inspect",	  "(mod:str):bat[:str,:lng] ",														  "INSPECTgetModuleSize;"				  ]
[ "getSize",			  "pattern",	  "inspect",	  "():lng ",																  "INSPECTgetSize;"					  ]
[ "getAddresses",		  "pattern",	  "inspect",	  "():bat[:oid,:str] ",															  "INSPECTgetAllAddresses;"				  ]
[ "getSignatures",		  "pattern",	  "inspect",	  "():bat[:oid,:str] ",															  "INSPECTgetAllSignatures;"				  ]
[ "getFunction",		  "pattern",	  "inspect",	  "():bat[:oid,:str] ",															  "INSPECTgetAllFunctions;"				  ]
[ "getModule",			  "pattern",	  "inspect",	  "():bat[:oid,:str] ",															  "INSPECTgetAllModules;"				  ]
[ "getKind",			  "pattern",	  "inspect",	  "():bat[:oid,:str] ",															  "INSPECTgetkind;"					  ]
[ "getSource",				  "pattern",	  "inspect",		  "(mod:str,fcn:str):str ",												  "INSPECTgetSource;"				  ]
[ "getComment",				  "pattern",	  "inspect",		  "(mod:str,fcn:str):bat[:str,:str] ",											  "INSPECTgetComment;"				  ]
[ "getAddress",				  "pattern",	  "inspect",		  "(mod:str,fcn:str):bat[:str,:str] ",											  "INSPECTgetAddress;"				  ]
[ "getSignature",			  "pattern",	  "inspect",		  "(mod:str,fcn:str):bat[:str,:str] ",											  "INSPECTgetSignature;"			  ]
[ "getDefinition",			  "pattern",	  "inspect",		  "(mod:str,fcn:str):bat[:str,:str] ",											  "INSPECTgetDefinition;"			  ]
[ "hasMoreElements",		  "pattern",	  "mat",	  "(grp:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",											  "MAThasMoreElements;"					  ]
[ "info",			  "command",	  "mat",	  "(g:str,e:str):bat[:any_1,:any_2] ",													  "MATinfo;"						  ]
[ "newIterator",		  "pattern",	  "mat",	  "(grp:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",											  "MATnewIterator;"					  ]
[ "new",				  "pattern",	  "mat",	  "(b:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",									  "MATpack;"						  ]
[ "print",			  "pattern",	  "mat",	  "(b:bat[:any_1,:any_2]...):void ",													  "MATprint;"						  ]
[ "project",				  "pattern",	  "mat",		  "(map:bat[:void,:bte],b:bat[:any_1,:any_2]...):bat[:void,:any_2] ",										  "MATproject;"						  ]
[ "project",				  "pattern",	  "mat",		  "(map:bat[:void,:bte],b:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",										  "MATproject;"						  ]
[ "pack3",		  "pattern",	  "mat",	  "(b:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",																											  "MATpack3;"				  ]
[ "pack2",			  "pattern",	  "mat",		  "(b:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",										  "MATpack2;"					  ]
[ "pack",			  "pattern",	  "mat",	  "(b:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",											  "MATpack;"						  ]
[ "pack",		  "pattern",	  "mat",	  "(X_1:any_2...):bat[:oid,:any_2] ",																													  "MATpackValues;"			  ]
[ "pack",		  "pattern",	  "mat",	  "(X_1:any_2...):bat[:void,:any_2] ",																													  "MATpackValues;"			  ]
[ "refine_reverse",	  "pattern",	  "mat",		  "(sorted:bat[:void,:any_2],map:bat[:void,:bte],b:bat[:any_1,:any_3]...) (rsorted:bat[:void,:oid],rmap:bat[:void,:bte]) ", "MATrefineReverse;"			  ]
[ "refine",				  "pattern",	  "mat",		  "(sorted:bat[:void,:any_2],map:bat[:void,:bte],b:bat[:any_1,:any_3]...) (rsorted:bat[:void,:oid],rmap:bat[:void,:bte]) ",			  "MATrefine;"						  ]
[ "sortReverseTail",			  "pattern",	  "mat",		  "(b:bat[:any_1,:any_2]...) (sorted:bat[:void,:any_2],map:bat[:void,:bte]) ",									  "MATsortReverseTail;"					  ]
[ "sortTail",				  "pattern",	  "mat",		  "(b:bat[:any_1,:any_2]...) (sorted:bat[:void,:any_2],map:bat[:void,:bte]) ",									  "MATsortTail;"					  ]
[ "slice",				  "pattern",	  "mat",	  "(first:lng,last:lng,b:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",										  "MATpackSlice;"				  ]
[ "slice",				  "pattern",	  "mat",	  "(first:int,last:int,b:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",										  "MATpackSlice;"				  ]
[ "slice",				  "pattern",	  "mat",	  "(first:wrd,last:wrd,b:bat[:any_1,:any_2]...):bat[:any_1,:any_2] ",										  "MATpackSlice;"				  ]
[ "makeBids",			  "pattern",	  "trader",	  "(bidtype:sht,fnname1:str...):lng... ",												  "TRADERmakeBids;"					  ]
[ "makeBid",				  "pattern",	  "trader",	  "(fnname:str,bidtype:sht):lng ",												  "TRADERmakeBid;"					  ]
[ "bind_dbat",		  "function",	  "remote",	  "(dbconn:str,sch:str,tab:str,access:int,version:int):bat[:oid,:oid];",																								  "nil"					  ]
[ "bind_idxbat",	  "function",	  "remote",	  "(dbconn:str,sch:str,tab:str,index:str,access:int,version:int):bat[:oid,:oid];",																							  "nil"					  ]
[ "bind",		  "function",	  "remote",	  "(dbconn:str,sch:str,tab:str,col:str,kind:int,version:int):bat[:oid,:any_1];",																							  "nil"					  ]
[ "bintype",		  "pattern",	  "remote",	  "():void ",														  "RMTbintype;"					  ]
[ "batbincopy",		  "pattern",	  "remote",	  "():bat[:void,:any] ",												  "RMTbincopyfrom;"				  ]
[ "batbincopy",		  "pattern",	  "remote",	  "(b:BAT):void ",													  "RMTbincopyto;"				  ]
[ "batload",			  "pattern",	  "remote",	  "(ht:any_1,tt:any_2,size:int):bat[:any_1,:any_2] ",											  "RMTbatload;"						  ]
[ "connect",				  "command",	  "remote",		  "(uri:str,user:str,passwd:str,scen:str):str ",										  "RMTconnectScen;"					  ]
[ "connect",				  "command",	  "remote",		  "(uri:str,user:str,passwd:str):str ",												  "RMTconnect;"						  ]
[ "disconnect",				  "command",	  "remote",		  "(conn:str):void ",														  "RMTdisconnect;"					  ]
[ "exec",		  "pattern",	  "remote",	  "(conn:str,mod:str,func:str,X_4:str...):str... ",																											  "RMTexec;"				  ]
[ "exec",		  "pattern",	  "remote",	  "(conn:str,mod:str,func:str,X_4:str...):str ",																											  "RMTexec;"				  ]
[ "exec",				  "pattern",	  "remote",	  "(conn:str,mod:str,func:str):str... ",											  "RMTexec;"					  ]
[ "exec",			  "pattern",	  "remote",	  "(conn:str,mod:str,func:str):str ",												  "RMTexec;"						  ]
[ "epilogue",			  "command",	  "remote",	  "():void ",																  "RMTepilogue;"					  ]
[ "get",			  "pattern",	  "remote",	  "(conn:str,ident:str):any ",													  "RMTget;"						  ]
[ "isalive",		  "command",	  "remote",	  "(conn:str):int ",																															  "RMTisalive;"				  ]
[ "put",			  "pattern",	  "remote",	  "(conn:str,object:any):str ",													  "RMTput;"						  ]
[ "prelude",			  "command",	  "remote",	  "():void ",																  "RMTprelude;"						  ]
[ "register",				  "pattern",	  "remote",	  "(conn:str,mod:str,fcn:str):void ",										  "RMTregister;"				  ]
[ "resolve",				  "command",	  "remote",	  "(pattern:str):bat[:oid,:str] ",														  "RMTresolve;"						  ]
[ "dump",			  "pattern",	  "recycle",	  "(tp:int,nm:str):void ",														  "RECYCLEdumpWrap;"			  ]
[ "dump",			  "pattern",	  "recycle",	  "(tp:int):void ",															  "RECYCLEdumpWrap;"					  ]
[ "dump",			  "pattern",	  "recycle",	  "():void ",																  "RECYCLEdumpWrap;"					  ]
[ "epilogue",			  "pattern",	  "recycle",	  "():void ",																  "RECYCLEepilogue;"					  ]
[ "getCachePolicy",		  "command",	  "recycle",	  "():int ",																  "RECYCLEgetCache;"					  ]
[ "getReusePolicy",		  "command",	  "recycle",	  "():int ",																  "RECYCLEgetReuse;"					  ]
[ "getAdmPolicy",			  "command",	  "recycle",	  "():int ",																	  "RECYCLEgetAdmission;"			  ]
[ "log",			  "command",	  "recycle",	  "(nm:str):void ",															  "RECYCLElog;"						  ]
[ "monitor",			  "command",	  "recycle",	  "(f:int):void ",															  "RECYCLEmonitor;"					  ]
[ "prelude",			  "pattern",	  "recycle",	  "():void ",																  "RECYCLEprelude;"					  ]
[ "reset",			  "pattern",	  "recycle",	  "(delta:int,sname:str...):void ",												  "RECYCLEresetCMD;"				  ]
[ "reset",			  "pattern",	  "recycle",	  "(bid:BAT):void ",															  "RECYCLEresetCMD;"					  ]
[ "shutdown",			  "pattern",	  "recycle",	  "():void ",																  "RECYCLEshutdownWrap;"				  ]
[ "setCachePolicy",		  "pattern",	  "recycle",	  "(p:int,cl:int,mem:int,alpha:flt):void ",												  "RECYCLEsetCache;"					  ]
[ "setCachePolicy",		  "pattern",	  "recycle",	  "(p:int...):void ",															  "RECYCLEsetCache;"					  ]
[ "setReusePolicy",		  "pattern",	  "recycle",	  "(p:int...):void ",															  "RECYCLEsetReuse;"					  ]
[ "setAdmPolicy",			  "pattern",	  "recycle",	  "(p:int...):void ",																  "RECYCLEsetAdmission;"			  ]
[ "stop",			  "pattern",	  "recycle",	  "():void ",																  "RECYCLEstop;"					  ]
[ "start",			  "pattern",	  "recycle",	  "():void ",																  "RECYCLEstart;"					  ]
[ "getDeparture",			  "command",	  "factories",	  "():bat[:oid,:timestamp] ",														  "FCTgetDeparture;"					  ]
[ "getArrival",				  "command",	  "factories",	  "():bat[:oid,:timestamp] ",														  "FCTgetArrival;"					  ]
[ "getOwners",				  "command",	  "factories",	  "():bat[:oid,:str] ",															  "FCTgetOwners;"					  ]
[ "getCaller",				  "command",	  "factories",	  "():int ",																  "FCTgetCaller;"					  ]
[ "getPlants",				  "command",	  "factories",	  "() (mod:bat[:oid,:str],fcn:bat[:oid,:str]) ",											  "FCTgetPlants;"					  ]
[ "shutdown",				  "pattern",	  "factories",		  "(m:str,f:str):void ",												  "FCTshutdown;"				  ]
[ "dump",			  "pattern",	  "tablet",	  "(s:streams,b:bat[:any,:any]...):int ",												  "TABdump;"						  ]
[ "display",			  "pattern",	  "tablet",	  "(v:bat[:any_1,:any]...):int ",													  "TABdisplayTable;"					  ]
[ "display",			  "pattern",	  "tablet",	  "(v:any...):int ",															  "TABdisplayRow;"					  ]
[ "dump",			  "command",	  "tablet",	  "(names:bat[:oid,:str],seps:bat[:oid,:str],bats:bat[:oid,:BAT],datafile:str,nr:int):void ",						  "CMDtablet_dump;"					  ]
[ "firstPage",			  "command",	  "tablet",	  "():void ",																  "TABfirstPage;"					  ]
[ "finish",			  "pattern",	  "tablet",	  "():void ",																  "TABfinishReport;"					  ]
[ "getPage",			  "command",	  "tablet",	  "(i:int):void ",															  "TABgetPage;"						  ]
[ "getPageCnt",			  "command",	  "tablet",	  "():void ",																  "TABgetPageCnt;"					  ]
[ "header",			  "pattern",	  "tablet",	  "(b:any...):int ",															  "TABheader;"						  ]
[ "input",			  "command",	  "tablet",	  "(names:bat[:oid,:str],seps:bat[:oid,:str],types:bat[:oid,:str],s:streams,nr:int):bat[:str,:BAT] ",					  "CMDtablet_input;"					  ]
[ "lastPage",			  "command",	  "tablet",	  "():void ",																  "TABlastPage;"					  ]
[ "load",			  "command",	  "tablet",	  "(names:bat[:oid,:str],seps:bat[:oid,:str],types:bat[:oid,:str],datafile:str,nr:int):bat[:str,:BAT] ",				  "CMDtablet_load;"					  ]
[ "nextPage",			  "command",	  "tablet",	  "():void ",																  "TABnextPage;"					  ]
[ "output",			  "command",	  "tablet",	  "(order:bat[:any_1,:any_2],seps:bat[:oid,:str],bats:bat[:oid,:BAT],s:streams):void ",							  "CMDtablet_output;"					  ]
[ "prevPage",			  "command",	  "tablet",	  "():void ",																  "TABprevPage;"					  ]
[ "page",			  "pattern",	  "tablet",	  "(b:bat[:any_1,:any]...):int ",													  "TABpage;"						  ]
[ "prelude",		  "command",	  "tablet",	  "():void ",																																  "TABprelude;"				  ]
[ "setComplaints",		  "pattern",	  "tablet",	  "(b:bat[:oid,:str]):void ",														  "TABsetComplaints;"					  ]
[ "setTryAll",			  "pattern",	  "tablet",	  "():void ",																  "TABsetTryAll;"					  ]
[ "setDecimal",			  "pattern",	  "tablet",	  "(idx:int,s:int,p:int):void ",													  "TABsetColumnDecimal;"				  ]
[ "setPosition",		  "pattern",	  "tablet",	  "(idx:int,f:int,i:int):void ",													  "TABsetColumnPosition;"				  ]
[ "setWidth",			  "pattern",	  "tablet",	  "(idx:int,maxwidth:int):void ",													  "TABsetColumnWidth;"					  ]
[ "setNull",			  "pattern",	  "tablet",	  "(idx:int,fmt:str):void ",														  "TABsetColumnNull;"					  ]
[ "setBracket",			  "pattern",	  "tablet",	  "(idx:int,lbrk:str,rbrk:str):void ",													  "TABsetColumnBracket;"				  ]
[ "setName",			  "pattern",	  "tablet",	  "(idx:int,nme:str):void ",														  "TABsetColumnName;"					  ]
[ "setColumn",			  "pattern",	  "tablet",	  "(idx:int,v:any_1):void ",														  "TABsetColumn;"					  ]
[ "setRowBracket",		  "pattern",	  "tablet",	  "(lbrk:str,rbrk:str):void ",														  "TABsetRowBracket;"					  ]
[ "setTableBracket",		  "pattern",	  "tablet",	  "(lbrk:str,rbrk:str):void ",														  "TABsetTableBracket;"					  ]
[ "setDelimiter",		  "pattern",	  "tablet",	  "(sep:str):void ",															  "TABsetDelimiter;"					  ]
[ "setPivot",			  "pattern",	  "tablet",	  "(b:bat[:void,:oid]):void ",														  "TABsetPivot;"					  ]
[ "setStream",			  "pattern",	  "tablet",	  "(s:streams):void ",															  "TABsetStream;"					  ]
[ "setFormat",			  "pattern",	  "tablet",	  "(b:any...):void ",															  "TABsetFormat;"					  ]
[ "setProperties",		  "pattern",	  "tablet",	  "(prop:str):int ",															  "TABsetProperties;"					  ]
[ "data",			  "command",	  "io",		  "(fname:str):str ",															  "IOdatafile;"						  ]
[ "export",			  "command",	  "io",		  "(b:bat[:any_1,:any_2],filepath:str):bit ",												  "IOexport;"						  ]
[ "ftable",			  "pattern",	  "io",		  "(fp:streams,order:int,b1:bat[:any_1,:any],b:bat[:any_1,:any]...):void ",								  "IOfotable;"						  ]
[ "ftable",			  "pattern",	  "io",		  "(filep:streams,b1:bat[:any_1,:any],b:bat[:any_1,:any]...):void ",									  "IOftable;"						  ]
[ "import",			  "command",	  "io",		  "(b:bat[:any_1,:any_2],filepath:str):bat[:any_1,:any_2] ",										  "IOimport;"						  ]
[ "printf",			  "pattern",	  "io",		  "(filep:streams,fmt:str):void ",														  "IOprintfStream;"				  ]
[ "printf",			  "pattern",	  "io",		  "(filep:streams,fmt:str,val:any...):void ",													  "IOprintfStream;"				  ]
[ "printf",				  "pattern",	  "io",		  "(fmt:str):void ",															  "IOprintf;"						  ]
[ "printf",				  "pattern",	  "io",		  "(fmt:str,val:any...):void ",														  "IOprintf;"						  ]
[ "prompt",			  "pattern",	  "io",		  "(val:any_1):void ",															  "IOprompt_val;"					  ]
[ "print",			  "pattern",	  "io",		  "(val:bat[:any_1,:any_2]):void ",													  "IOprint_val;"					  ]
[ "print",			  "pattern",	  "io",		  "(val:any_1):void ",															  "IOprint_val;"					  ]
[ "print",			  "pattern",	  "io",		  "(order:int,b:bat[:any_1,:any],b2:bat[:any_1,:any]...):void ",									  "IOotable;"						  ]
[ "print",			  "pattern",	  "io",		  "(b1:bat[:any_1,:any]...):void ",													  "IOtable;"						  ]
[ "print",			  "pattern",	  "io",		  "(val:any_1,lst:any...):void ",													  "IOprint_val;"					  ]
[ "stdout",			  "pattern",	  "io",		  "():streams ",															  "io_stdout;"						  ]
[ "stderr",			  "pattern",	  "io",		  "():streams ",															  "io_stderr;"						  ]
[ "stdin",			  "pattern",	  "io",		  "():bstream ",															  "io_stdin;"						  ]
[ "table",			  "pattern",	  "io",		  "(order:int,b1:bat[:any_1,:any],b2:bat[:any_1,:any]...):void ",									  "IOtotable;"						  ]
[ "table",			  "pattern",	  "io",		  "(b1:bat[:any_1,:any],b2:bat[:any_1,:any]...):void ",											  "IOttable;"						  ]
[ "close",			  "pattern",	  "box",	  "(bname:str):void ",															  "BOXclose;"						  ]
[ "discard",			  "pattern",	  "box",	  "(bname:str,name:str):void ",														  "BOXdiscard;"						  ]
[ "deposit",			  "pattern",	  "box",	  "(bname:str,name:str,v:any_1):void ",													  "BOXdeposit;"						  ]
[ "destroy",			  "pattern",	  "box",	  "(bname:str):void ",															  "BOXdestroy;"						  ]
[ "getBoxNames",		  "command",	  "box",	  "():bat[:int,:str] ",															  "BOXgetBoxNames;"					  ]
[ "iterator",			  "pattern",	  "box",	  "(nme:str):lng ",															  "BOXiterator;"					  ]
[ "open",			  "pattern",	  "box",	  "(nme:str):any_1 ",															  "BOXopen;"						  ]
[ "release",			  "pattern",	  "box",	  "(bname:str,nme:str,val:any_1):void ",												  "BOXrelease;"						  ]
[ "releaseAll",			  "pattern",	  "box",	  "(bname:str):void ",															  "BOXreleaseAll;"					  ]
[ "toString",			  "pattern",	  "box",	  "(bname:str,name:str):str ",														  "BOXtoString;"					  ]
[ "take",			  "pattern",	  "box",	  "(bnme:str,vnme:str):any_1 ",														  "BOXtake;"						  ]
[ "bind",			  "pattern",	  "bbp",	  "(idx:int):bat[:any_1,:any_2] ",													  "CMDbbpbindindex;"				  ]
[ "bind",			  "pattern",	  "bbp",	  "(head:str,tail:str):bat[:any_1,:any_2] ",												  "CMDbbpbind2;"					  ]
[ "bind",			  "pattern",	  "bbp",	  "(name:str):bat[:any_1,:any_2] ",													  "CMDbbpbind;"						  ]
[ "compress",			  "command",	  "bbp",	  "(b:bat[:any_1,:any_2],fnme:str):bat[:any_1,:any_2] ",								  "CMDbbpcompress;"				  ]
[ "commit",			  "pattern",	  "bbp",	  "():void ",																  "CMDbbpReleaseAll;"					  ]
[ "commit",			  "command",	  "bbp",	  "(b:bat[:any_1,:any_2]):void ",													  "CMDbbpSubCommit;"					  ]
[ "close",			  "command",	  "bbp",	  "():void ",																  "CMDbbpclose;"					  ]
[ "decompress",			  "command",	  "bbp",	  "(b:bat[:any_1,:any_2],fnme:str):bat[:any_1,:any_2] ",								  "CMDbbpdecompress;"				  ]
[ "discard",			  "pattern",	  "bbp",	  "(name:str):void ",															  "CMDbbpdiscard;"					  ]
[ "destroy",			  "pattern",	  "bbp",	  "(b:bat[:any_1,:any_2],immediate:bit):void ",												  "CMDbbpdestroyBAT;"					  ]
[ "destroy",			  "pattern",	  "bbp",	  "(b:bat[:any_1,:any_2]):void ",													  "CMDbbpdestroyBAT1;"					  ]
[ "deposit",			  "pattern",	  "bbp",	  "(name:str,loc:str):bat[:any_1,:any_2] ",												  "CMDbbpbindDefinition;"				  ]
[ "deposit",			  "pattern",	  "bbp",	  "(name:str,v:bat[:any_1,:any_2]):void ",												  "CMDbbpdeposit;"					  ]
[ "destroy",			  "command",	  "bbp",	  "():void ",																  "CMDbbpdestroy;"					  ]
[ "expand",			  "command",	  "bbp",	  "(b:bat[:any_1,:any_2],fnme:str):bat[:any_1,:any_2] ",								  "CMDbbpexpand;"				  ]
[ "getPageSize",			  "command",	  "bbp",	  "():int ",																  "CMDgetPageSize;"				  ]
[ "getDiskSpace",		  "command",	  "bbp",	  "():lng ",																  "CMDbbpDiskSpace;"					  ]
[ "getLRefCount",		  "command",	  "bbp",	  "(b:bat[:any_1,:any_2]):int ",													  "CMDgetBATlrefcnt;"					  ]
[ "getRefCount",		  "command",	  "bbp",	  "(b:bat[:any_1,:any_2]):int ",													  "CMDgetBATrefcnt;"					  ]
[ "getKind",			  "command",	  "bbp",	  "():bat[:int,:str] ",															  "CMDbbpKind;"						  ]
[ "getStatus",			  "command",	  "bbp",	  "():bat[:int,:str] ",															  "CMDbbpStatus;"					  ]
[ "getDirty",			  "command",	  "bbp",	  "():bat[:int,:str] ",															  "CMDbbpDirty;"					  ]
[ "getHeat",			  "command",	  "bbp",	  "():bat[:int,:int] ",															  "CMDbbpHeat;"						  ]
[ "getLocation",		  "command",	  "bbp",	  "():bat[:int,:str] ",															  "CMDbbpLocation;"					  ]
[ "getLRefCount",		  "command",	  "bbp",	  "():bat[:int,:int] ",															  "CMDbbpLRefCount;"					  ]
[ "getRefCount",		  "command",	  "bbp",	  "():bat[:int,:int] ",															  "CMDbbpRefCount;"					  ]
[ "getCount",			  "command",	  "bbp",	  "():bat[:int,:lng] ",															  "CMDbbpCount;"					  ]
[ "getName",			  "command",	  "bbp",	  "(b:bat[:any_1,:any_2]):str ",													  "CMDbbpName;"						  ]
[ "get",		  "command",	  "bbp",	  "() (ns:bat[:any_1,:any_2],ht:bat[:int,:str],tt:bat[:int,:str],cnt:bat[:int,:lng],refcnt:bat[:int,:int],lrefcnt:bat[:int,:int],location:bat[:int,:str],heat:bat[:int,:int],dirty:bat[:int,:str],status:bat[:int,:str],kind:bat[:int,:str]) ",				  "CMDbbp;"				  ]
[ "getRNames",			  "command",	  "bbp",	  "():bat[:int,:str] ",															  "CMDbbpRNames;"					  ]
[ "getNames",			  "command",	  "bbp",	  "():bat[:int,:str] ",															  "CMDbbpNames;"					  ]
[ "getTailType",		  "command",	  "bbp",	  "():bat[:int,:str] ",															  "CMDbbpTailType;"					  ]
[ "getHeadType",		  "command",	  "bbp",	  "():bat[:int,:str] ",															  "CMDbbpHeadType;"					  ]
[ "getIndex",			  "command",	  "bbp",	  "(b:bat[:any_1,:any_2]):int ",													  "CMDbbpgetIndex;"					  ]
[ "getObjects",			  "pattern",	  "bbp",	  "():bat[:int,:str] ",															  "CMDbbpGetObjects;"					  ]
[ "iterator",			  "pattern",	  "bbp",	  "(nme:str):lng ",															  "CMDbbpiterator;"					  ]
[ "open",			  "command",	  "bbp",	  "():void ",																  "CMDbbpopen;"						  ]
[ "prelude",			  "pattern",	  "bbp",	  "():void ",																  "CMDbbpprelude;"					  ]
[ "release",			  "pattern",	  "bbp",	  "(b:bat[:any_1,:any_2]):void ",													  "CMDbbpreleaseBAT;"					  ]
[ "release",			  "pattern",	  "bbp",	  "(name:str,val:bat[:any_1,:any_2]):void ",												  "CMDbbprelease;"					  ]
[ "releaseAll",			  "pattern",	  "bbp",	  "():void ",																  "CMDbbpReleaseAll;"					  ]
[ "truncate",			  "command",	  "bbp",	  "(b:bat[:any_1,:any_2],fnme:str):bat[:any_1,:any_2] ",								  "CMDbbptruncate;"				  ]
[ "toString",			  "pattern",	  "bbp",	  "(name:str):str ",															  "CMDbbptoStr;"					  ]
[ "take",			  "pattern",	  "bbp",	  "(name:str):bat[:any_1,:any_2] ",													  "CMDbbptake;"						  ]
[ "bind",			  "pattern",	  "attach",	  "(nme:str):bat[:any_1,:any_2] ",														  "ATTbind;"					  ]
[ "bind",			  "pattern",	  "attach",	  "(nme:str,low:oid,hgh:oid):bat[:any_1,:any_2] ",												  "ATTbindPartition;"				  ]
[ "location",			  "command",	  "attach",	  "(b:bat[:any_1,:any_2]):str ",														  "ATTlocation;"				  ]
[ "close",			  "pattern",	  "const",	  "():void ",																  "CSTclose;"						  ]
[ "discard",			  "pattern",	  "const",	  "(name:any_1):void ",															  "CSTdiscard;"						  ]
[ "deposit",			  "pattern",	  "const",	  "(name:str,val:any_1):void ",														  "CSTdeposit;"						  ]
[ "destroy",			  "pattern",	  "const",	  "():void ",																  "CSTdestroy;"						  ]
[ "epiloque",			  "command",	  "const",	  "():void ",																  "CSTepilogue;"					  ]
[ "hasMoreElements",	  "pattern",	  "const",	  "() (X_1:lng,X_2:str) ",																														  "CSThasMoreElements;"			  ]
[ "newIterator",	  "pattern",	  "const",	  "() (X_1:lng,X_2:str) ",																														  "CSTnewIterator;"			  ]
[ "open",			  "pattern",	  "const",	  "():void ",																  "CSTopen;"						  ]
[ "prelude",			  "pattern",	  "const",	  "():void ",																  "CSTprelude;"						  ]
[ "release",			  "pattern",	  "const",	  "(name:any_1):void ",															  "CSTrelease;"						  ]
[ "release",			  "pattern",	  "const",	  "(name:str):void ",															  "CSTrelease;"						  ]
[ "releaseAll",			  "pattern",	  "const",	  "():void ",																  "CSTreleaseAll;"					  ]
[ "toString",			  "pattern",	  "const",	  "(name:any_1):str ",															  "CSTtoString;"					  ]
[ "take",			  "pattern",	  "const",	  "(name:str):any_1 ",															  "CSTtake;"						  ]
[ "addUser",		  "pattern",	  "clients",	  "(nme:str,pw:str):oid ",																														  "CLTaddUser;"				  ]
[ "backendsum",			  "command",	  "clients",	  "(pw:str):str ",															  "CLTbackendsum;"				  ]
[ "checkPermission",		  "pattern",	  "clients",		  "(usr:str,pw:str):void ",											  "CLTcheckPermission;"					  ]
[ "changePassword",		  "pattern",	  "clients",		  "(old:str,new:str):void ",												  "CLTchangePassword;"					  ]
[ "changeUsername",		  "pattern",	  "clients",		  "(old:str,new:str):void ",												  "CLTchangeUsername;"					  ]
[ "getUsers",		  "pattern",	  "clients",	  "():bat[:oid,:str] ",																															  "CLTgetUsers;"			  ]
[ "getPasswordHash",		  "pattern",	  "clients",		  "(user:str):str ",													  "CLTgetPasswordHash;"					  ]
[ "getUsername",		  "pattern",	  "clients",		  "():str ",														  "CLTgetUsername;"					  ]
[ "getTimeout",				  "pattern",	  "clients",	  "() (q:int,s:int) ",															  "CLTgetTimeout;"					  ]
[ "getUsers",			  "command",	  "clients",	  "():bat[:int,:str] ",															  "CLTusers;"						  ]
[ "getTime",			  "command",	  "clients",	  "():bat[:int,:lng] ",															  "CLTTime;"						  ]
[ "getActions",			  "command",	  "clients",	  "():bat[:int,:int] ",															  "CLTActions;"						  ]
[ "getLastCommand",		  "command",	  "clients",	  "():bat[:int,:str] ",															  "CLTLastCommand;"					  ]
[ "getLogins",			  "command",	  "clients",	  "():bat[:int,:str] ",															  "CLTLogin;"						  ]
[ "getScenario",		  "pattern",	  "clients",	  "():str ",																  "CLTgetScenario;"					  ]
[ "getInfo",			  "pattern",	  "clients",	  "():bat[:str,:str] ",															  "CLTInfo;"						  ]
[ "getId",			  "pattern",	  "clients",	  "():int ",																  "CLTgetClientId;"					  ]
[ "md5sum",			  "command",	  "clients",	  "(pw:str):str ",															  "CLTmd5sum;"						  ]
[ "quit",				  "pattern",	  "clients",		  "(idx:int):void ",														  "CLTquit;"					  ]
[ "quit",			  "pattern",	  "clients",	  "():void ",																  "CLTquit;"						  ]
[ "removeUser",			  "pattern",	  "clients",		  "(nme:str):void ",													  "CLTremoveUser;"					  ]
[ "ripemd160sum",		  "command",	  "clients",	  "(pw:str):str ",																					  "CLTripemd160sum;"					  ]
[ "setPassword",		  "pattern",	  "clients",		  "(user:str,pass:str):void ",												  "CLTsetPassword;"					  ]
[ "sha2sum",			  "command",	  "clients",	  "(pw:str,bits:int):str ",																				  "CLTsha2sum;"						  ]
[ "sha1sum",			  "command",	  "clients",		  "(pw:str):str ",															  "CLTsha1sum;"						  ]
[ "shutdown",			  "command",	  "clients",	  "(forced:bit):void ",															  "CLTshutdown;"					  ]
[ "setTimeout",				  "pattern",	  "clients",	  "(q:int,s:int):void ",														  "CLTsetTimeout;"					  ]
[ "suspend",			  "pattern",	  "clients",	  "(id:int):void ",															  "CLTsuspend;"						  ]
[ "stop",				  "pattern",	  "clients",	  "(id:int):void ",													  "CLTstop;"						  ]
[ "setScenario",		  "pattern",	  "clients",	  "(msg:str):str ",															  "CLTsetScenario;"					  ]
[ "setHistory",			  "pattern",	  "clients",	  "(s:str):void ",															  "CLTsetHistory;"					  ]
[ "setListing",			  "pattern",	  "clients",	  "(flag:int):int ",															  "CLTsetListing;"					  ]
[ "wakeup",			  "command",	  "clients",	  "(id:int):void ",															  "CLTwakeup;"						  ]
[ "compile",			  "command",	  "pcre",	  "(pat:str):pcre ",															  "PCREcompile_wrap;"					  ]
[ "#del",			  "command",	  "pcre",	  "():void ",																  "pcre_del;"						  ]
[ "#fromstr",			  "command",	  "pcre",	  "():void ",																  "pcre_fromstr;"					  ]
[ "#heap",			  "command",	  "pcre",	  "():void ",																  "pcre_heap;"						  ]
[ "#hash",			  "command",	  "pcre",	  "():void ",																  "pcre_hash;"						  ]
[ "imatch",				  "command",	  "pcre",	  "(s:str,pat:str):bit ",														  "PCREimatch;"						  ]
[ "ilike_filter",	  "function",	  "pcre",	  "(s:bat[:any_1,:str],pat:str):bat[:any_1,:str];",																											  "nil"					  ]
[ "ilike_select",		  "command",	  "pcre",		  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:str] ",									  "PCREilike_select_pcre;"			  ]
[ "ilike_filter",	  "command",	  "pcre",	  "(s:bat[:any_1,:str],pat:bat[:any_2,:str],esc:str):bat[:any_1,:any_2] ",																								  "PCREilike_join_pcre;"		  ]
[ "ilike_filter",	  "command",	  "pcre",	  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:void] ",																										  "PCREilike_uselect_pcre;"		  ]
[ "ilike_uselect",		  "command",	  "pcre",		  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:void] ",									  "PCREilike_uselect_pcre;"			  ]
[ "index",			  "command",	  "pcre",	  "(pat:pcre,s:str):int ",														  "PCREindex;"						  ]
[ "like_select",			  "command",	  "pcre",	  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:str] ",								  "PCRElike_select_pcre;"			  ]
[ "like_filter",	  "command",	  "pcre",	  "(s:bat[:any_1,:str],pat:bat[:any_2,:str],esc:str):bat[:any_1,:any_2] ",																								  "PCRElike_join_pcre;"			  ]
[ "like_filter",	  "command",	  "pcre",	  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:void] ",																										  "PCRElike_uselect_pcre;"		  ]
[ "like_uselect",		  "command",	  "pcre",	  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:void] ",										  "PCRElike_uselect_pcre;"				  ]
[ "#length",			  "command",	  "pcre",	  "():void ",																  "pcre_length;"					  ]
[ "match",			  "command",	  "pcre",	  "(s:str,pat:str):bit ",														  "PCREmatch;"						  ]
[ "match",			  "command",	  "pcre",	  "(pat:pcre,s:str):bit ",														  "PCREexec_wrap;"					  ]
[ "#null",			  "command",	  "pcre",	  "():void ",																  "pcre_null;"						  ]
[ "#nequal",			  "command",	  "pcre",	  "():void ",																  "pcre_nequal;"					  ]
[ "prelude",			  "pattern",	  "pcre",	  "():void ",																  "pcre_init;"						  ]
[ "pcre_quote",			  "command",	  "pcre",	  "(s:str):str ",															  "PCREquote;"						  ]
[ "patindex",			  "command",	  "pcre",	  "(pat:str,s:str):int ",														  "PCREpatindex;"					  ]
[ "#put",			  "command",	  "pcre",	  "():void ",																  "pcre_put;"						  ]
[ "replace",			  "command",	  "pcre",	  "(orig:bat[:any_1,:str],pat:str,repl:str,flag:str):bat[:any_1,:str] ",								  "PCREreplace_bat_wrap;"				  ]
[ "replace",			  "command",	  "pcre",	  "(origin:str,pat:str,repl:str,flags:str):str ",											  "PCREreplace_wrap;"					  ]
[ "sql2pcre",			  "command",	  "pcre",	  "(pat:str,esc:str):str ",														  "PCREsql2pcre;"					  ]
[ "select",			  "command",	  "pcre",	  "(pat:str,strs:bat[:any_1,:str]):bat[:any_1,:str] ",											  "PCREselectDef;"						  ]
[ "#tostr",			  "command",	  "pcre",	  "():void ",																  "pcre_tostr;"						  ]
[ "uselect",			  "command",	  "pcre",	  "(pat:str,strs:bat[:any_1,:str]):bat[:any_1,:void] ",											  "PCREuselectDef;"					  ]
[ "epilogue",			  "command",	  "sabaoth",	  "():void ",																  "SABepilogue;"					  ]
[ "getLocalConnectionPort",	  "command",	  "sabaoth",	  "():int ",																  "SABgetLocalConnectionPort;"				  ]
[ "getLocalConnectionHost",	  "command",	  "sabaoth",	  "():str ",																  "SABgetLocalConnectionHost;"				  ]
[ "getLocalConnectionURI",		  "command",	  "sabaoth",	  "():str ",																  "SABgetLocalConnectionURI;"				  ]
[ "marchConnection",		  "command",	  "sabaoth",	  "(host:str,port:int):void ",														  "SABmarchConnection;"					  ]
[ "marchScenario",		  "command",	  "sabaoth",	  "(lang:str):void ",															  "SABmarchScenario;"					  ]
[ "prelude",			  "command",	  "sabaoth",	  "():void ",																  "SABprelude;"						  ]
[ "retreatScenario",		  "command",	  "sabaoth",	  "(lang:str):void ",															  "SABretreatScenario;"					  ]
[ "wildRetreat",		  "command",	  "sabaoth",	  "():void ",																  "SABwildRetreat;"					  ]
[ "blue",			  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:int] ",												  "CLRbatBlue;"						  ]
[ "cb",				  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:int] ",												  "CLRbatCb;"						  ]
[ "cr",				  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:int] ",												  "CLRbatCr;"						  ]
[ "color",			  "command",	  "batcolor",	  "(s:bat[:oid,:str]):bat[:oid,:color] ",												  "CLRbatColor;"					  ]
[ "green",			  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:int] ",												  "CLRbatGreen;"					  ]
[ "hue",			  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:flt] ",												  "CLRbatHue;"						  ]
[ "hsv",			  "command",	  "batcolor",	  "(h:bat[:oid,:flt],s:bat[:oid,:flt],v:bat[:oid,:flt]):bat[:oid,:color] ",								  "CLRbatHsv;"						  ]
[ "hue",			  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:int] ",												  "CLRbatHueInt;"					  ]
[ "luminance",			  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:int] ",												  "CLRbatLuminance;"					  ]
[ "red",			  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:int] ",												  "CLRbatRed;"						  ]
[ "rgb",			  "command",	  "batcolor",	  "(r:bat[:oid,:int],g:bat[:oid,:int],b:bat[:oid,:int]):bat[:oid,:color] ",								  "CLRbatRgb;"						  ]
[ "saturation",			  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:flt] ",												  "CLRbatSaturation;"					  ]
[ "saturation",			  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:int] ",												  "CLRbatSaturationInt;"				  ]
[ "str",			  "command",	  "batcolor",	  "(b:bat[:oid,:color]):bat[:oid,:str] ",												  "CLRbatStr;"						  ]
[ "value",			  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:flt] ",												  "CLRbatValue;"					  ]
[ "value",			  "command",	  "batcolor",	  "(c:bat[:oid,:color]):bat[:oid,:int] ",												  "CLRbatValueInt;"					  ]
[ "endsWith",			  "command",	  "batstr",	  "(s:bat[:oid,:str],suffix:str):bat[:oid,:bit] ",											  "STRbatSuffixcst;"					  ]
[ "endsWith",			  "command",	  "batstr",	  "(s:bat[:oid,:str],suffix:bat[:oid,:str]):bat[:oid,:bit] ",										  "STRbatSuffix;"					  ]
[ "ilike",				  "command",	  "batstr",	  "(s:bat[:any_1,:str],pat:str):bat[:any_1,:bit] ",											  "BATPCREilike2;"					  ]
[ "ilike",				  "command",	  "batstr",	  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:bit] ",										  "BATPCREilike;"					  ]
[ "like",			  "command",	  "batstr",	  "(s:bat[:any_1,:str],pat:str):bat[:any_1,:bit] ",											  "BATPCRElike2;"					  ]
[ "like",			  "command",	  "batstr",	  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:bit] ",										  "BATPCRElike;"					  ]
[ "like_uselect",		  "command",	  "batstr",		  "(s:bat[:oid,:str],pat:str,esc:str):bat[:oid,:void] ",									  "STRbatlike_uselect;"				  ]
[ "like_uselect",		  "command",	  "batstr",		  "(s:bat[:oid,:str],pat:str):bat[:oid,:void] ",										  "STRbatlike_uselect2;"			  ]
[ "ltrim",			  "command",	  "batstr",	  "(s:bat[:oid,:str]):bat[:oid,:str] ",													  "STRbatLtrim;"					  ]
[ "length",			  "command",	  "batstr",	  "(s:bat[:oid,:str]):bat[:oid,:int] ",													  "STRbatLength;"					  ]
[ "not_ilike",				  "command",	  "batstr",	  "(s:bat[:any_1,:str],pat:str):bat[:any_1,:bit] ",											  "BATPCREnotilike2;"					  ]
[ "not_ilike",				  "command",	  "batstr",	  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:bit] ",										  "BATPCREnotilike;"					  ]
[ "not_like",				  "command",	  "batstr",	  "(s:bat[:any_1,:str],pat:str):bat[:any_1,:bit] ",											  "BATPCREnotlike2;"					  ]
[ "not_like",				  "command",	  "batstr",	  "(s:bat[:any_1,:str],pat:str,esc:str):bat[:any_1,:bit] ",										  "BATPCREnotlike;"					  ]
[ "nbytes",			  "command",	  "batstr",	  "(s:bat[:oid,:str]):bat[:oid,:int] ",													  "STRbatBytes;"					  ]
[ "replace",			  "command",	  "batstr",	  "(s:bat[:oid,:str],pat:str,s2:str):bat[:oid,:str] ",											  "STRbatreplace;"					  ]
[ "r_search",			  "command",	  "batstr",	  "(s:bat[:oid,:str],c:str):bat[:oid,:int] ",												  "STRbatRstrSearchcst;"				  ]
[ "r_search",			  "command",	  "batstr",	  "(s:bat[:oid,:str],c:bat[:oid,:str]):bat[:oid,:int] ",										  "STRbatRstrSearch;"					  ]
[ "rtrim",			  "command",	  "batstr",	  "(s:bat[:oid,:str]):bat[:oid,:str] ",													  "STRbatRtrim;"					  ]
[ "substitute",			  "command",	  "batstr",	  "(s:bat[:oid,:str],src:str,dst:str,rep:bit):bat[:oid,:str] ",										  "STRbatSubstitutecst;"				  ]
[ "substring",			  "command",	  "batstr",	  "(s:bat[:oid,:str],start:int,index:int):bat[:oid,:str] ",										  "STRbatsubstringcst;"					  ]
[ "substring",			  "command",	  "batstr",	  "(s:bat[:oid,:str],start:bat[:oid,:int],index:bat[:oid,:int]):bat[:oid,:str] ",							  "STRbatsubstring;"					  ]
[ "string",			  "command",	  "batstr",	  "(b:bat[:oid,:str],offset:int):bat[:oid,:str] ",											  "STRbatTailcst;"					  ]
[ "string",			  "command",	  "batstr",	  "(b:bat[:oid,:str],offset:bat[:oid,:int]):bat[:oid,:str] ",										  "STRbatTail;"						  ]
[ "search",			  "command",	  "batstr",	  "(s:bat[:oid,:str],c:str):bat[:oid,:int] ",												  "STRbatstrSearchcst;"					  ]
[ "search",			  "command",	  "batstr",	  "(s:bat[:oid,:str],c:bat[:oid,:str]):bat[:oid,:int] ",										  "STRbatstrSearch;"					  ]
[ "startsWith",			  "command",	  "batstr",	  "(s:bat[:oid,:str],prefix:str):bat[:oid,:bit] ",											  "STRbatPrefixcst;"					  ]
[ "startsWith",			  "command",	  "batstr",	  "(s:bat[:oid,:str],prefix:bat[:oid,:str]):bat[:oid,:bit] ",										  "STRbatPrefix;"					  ]
[ "stringlength",		  "command",	  "batstr",	  "(s:bat[:oid,:str]):bat[:oid,:int] ",											  "STRbatstringLength;"				  ]
[ "trim",			  "command",	  "batstr",	  "(s:bat[:oid,:str]):bat[:oid,:str] ",													  "STRbatStrip;"					  ]
[ "toUpper",			  "command",	  "batstr",	  "(s:bat[:oid,:str]):bat[:oid,:str] ",													  "STRbatUpper;"					  ]
[ "toLower",			  "command",	  "batstr",	  "(s:bat[:oid,:str]):bat[:oid,:str] ",													  "STRbatLower;"					  ]
[ "unicodeAt",			  "command",	  "batstr",	  "(s:bat[:oid,:str],index:int):bat[:oid,:int] ",											  "STRbatWChrAtcst;"					  ]
[ "unicodeAt",			  "command",	  "batstr",	  "(s:bat[:oid,:str],index:bat[:oid,:int]):bat[:oid,:int] ",										  "STRbatWChrAt;"					  ]
[ "atan2",			  "command",	  "batmmath",	  "(x:bat[:oid,:flt],y:flt):bat[:oid,:flt] ",										  "CMDscience_bat_cst_atan2_flt;"			  ]
[ "atan2",			  "command",	  "batmmath",	  "(x:bat[:oid,:dbl],y:dbl):bat[:oid,:dbl] ",										  "CMDscience_bat_cst_atan2_dbl;"			  ]
[ "atan",			  "command",	  "batmmath",	  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",											  "CMDscience_bat_flt_atan;"				  ]
[ "atan",			  "command",	  "batmmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDscience_bat_dbl_atan;"				  ]
[ "acos",			  "command",	  "batmmath",	  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",											  "CMDscience_bat_flt_acos;"				  ]
[ "acos",			  "command",	  "batmmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDscience_bat_dbl_acos;"				  ]
[ "asin",			  "command",	  "batmmath",	  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",											  "CMDscience_bat_flt_asin;"				  ]
[ "asin",			  "command",	  "batmmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDscience_bat_dbl_asin;"				  ]
[ "ceil",			  "command",	  "batmmath",	  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",											  "CMDscience_bat_flt_ceil;"				  ]
[ "ceil",			  "command",	  "batmmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDscience_bat_dbl_ceil;"				  ]
[ "cosh",			  "command",	  "batmmath",	  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",											  "CMDscience_bat_flt_cosh;"				  ]
[ "cosh",			  "command",	  "batmmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDscience_bat_dbl_cosh;"				  ]
[ "cos",			  "command",	  "batmmath",	  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",											  "CMDscience_bat_flt_cos;"				  ]
[ "cos",			  "command",	  "batmmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDscience_bat_dbl_cos;"				  ]
[ "degrees",		  "command",	  "batmmath",		  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",									  "CMDscience_bat_flt_degrees;"		  ]
[ "degrees",		  "command",	  "batmmath",		  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",									  "CMDscience_bat_dbl_degrees;"		  ]
[ "exp",			  "command",	  "batmmath",	  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",											  "CMDscience_bat_flt_exp;"				  ]
[ "exp",			  "command",	  "batmmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDscience_bat_dbl_exp;"				  ]
[ "fmod",			  "command",	  "batmmath",	  "(x:bat[:oid,:flt],y:flt):bat[:oid,:flt] ",										  "CMDscience_bat_cst_fmod_flt;"			  ]
[ "fmod",			  "command",	  "batmmath",	  "(x:bat[:oid,:dbl],y:dbl):bat[:oid,:dbl] ",										  "CMDscience_bat_cst_fmod_dbl;"			  ]
[ "floor",			  "command",	  "batmmath",	  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",											  "CMDscience_bat_flt_floor;"				  ]
[ "floor",			  "command",	  "batmmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDscience_bat_dbl_floor;"				  ]
[ "fabs",			  "command",	  "batmmath",	  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",											  "CMDscience_bat_flt_fabs;"				  ]
[ "fabs",			  "command",	  "batmmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDscience_bat_dbl_fabs;"				  ]
[ "log10",			  "command",	  "batmmath",	  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",											  "CMDscience_bat_flt_log10;"				  ]
[ "log10",			  "command",	  "batmmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDscience_bat_dbl_log10;"				  ]
[ "log",			  "command",	  "batmmath",	  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",											  "CMDscience_bat_flt_log;"				  ]
[ "log",			  "command",	  "batmmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDscience_bat_dbl_log;"				  ]
[ "pow",			  "command",	  "batmmath",	  "(x:bat[:oid,:flt],y:flt):bat[:oid,:flt] ",										  "CMDscience_bat_cst_pow_flt;"				  ]
[ "pow",			  "command",	  "batmmath",	  "(x:bat[:oid,:dbl],y:dbl):bat[:oid,:dbl] ",										  "CMDscience_bat_cst_pow_dbl;"				  ]
[ "radians",		  "command",	  "batmmath",		  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",									  "CMDscience_bat_flt_radians;"		  ]
[ "radians",		  "command",	  "batmmath",		  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",									  "CMDscience_bat_dbl_radians;"		  ]
[ "sqrt",			  "command",	  "batmmath",	  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",											  "CMDscience_bat_flt_sqrt;"				  ]
[ "sqrt",			  "command",	  "batmmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDscience_bat_dbl_sqrt;"				  ]
[ "sinh",			  "command",	  "batmmath",	  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",											  "CMDscience_bat_flt_sinh;"				  ]
[ "sinh",			  "command",	  "batmmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDscience_bat_dbl_sinh;"				  ]
[ "sin",			  "command",	  "batmmath",	  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",											  "CMDscience_bat_flt_sin;"				  ]
[ "sin",			  "command",	  "batmmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDscience_bat_dbl_sin;"				  ]
[ "tanh",			  "command",	  "batmmath",	  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",											  "CMDscience_bat_flt_tanh;"				  ]
[ "tanh",			  "command",	  "batmmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDscience_bat_dbl_tanh;"				  ]
[ "tan",			  "command",	  "batmmath",	  "(x:bat[:oid,:flt]):bat[:oid,:flt] ",											  "CMDscience_bat_flt_tan;"				  ]
[ "tan",			  "command",	  "batmmath",	  "(x:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDscience_bat_dbl_tan;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(l:bat[:oid,:str],r:str):bat[:oid,:bit] ",												  "STRbatNotEqualCst;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(l:bat[:oid,:str],r:bat[:oid,:str]):bat[:oid,:bit] ",										  "STRbatNotEqual;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",								  "MTIMEaccum_timestamp_cst_NEQ;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",								  "MTIMEaccum_timestamp_NEQ_cst;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",						  "MTIMEaccum_timestamp_NEQ;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",										  "MTIMEbat_timestamp_cst_NEQ;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",										  "MTIMEbat_timestamp_NEQ_cst;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",									  "MTIMEbat_timestamp_NEQ;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:bat[:oid,:timestamp]):bat[:oid,:bit] ",									  "MTIMEbat_timestamp_NEQ;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",								  "MTIMEaccum_daytime_cst_NEQ;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",									  "MTIMEaccum_daytime_NEQ_cst;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",							  "MTIMEaccum_daytime_NEQ;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",											  "MTIMEbat_daytime_cst_NEQ;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",											  "MTIMEbat_daytime_NEQ_cst;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",									  "MTIMEbat_daytime_NEQ;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:bat[:oid,:daytime]):bat[:oid,:bit] ",									  "MTIMEbat_daytime_NEQ;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:date],r:date):bat[:void,:bit] ",									  "MTIMEaccum_date_cst_NEQ;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:oid,:date],r:date):bat[:oid,:bit] ",									  "MTIMEaccum_date_NEQ_cst;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",								  "MTIMEaccum_date_NEQ;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(l:bat[:void,:date],r:date):bat[:void,:bit] ",											  "MTIMEbat_date_cst_NEQ;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:date):bat[:oid,:bit] ",												  "MTIMEbat_date_NEQ_cst;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",										  "MTIMEbat_date_NEQ;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:bat[:oid,:date]):bat[:oid,:bit] ",										  "MTIMEbat_date_NEQ;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",									  "CMDaccum_NEQ_cst_oid;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",									  "CMDaccum_NEQ_oid_cst;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",								  "CMD_NEQ_cst_oid;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",											  "CMD_NEQ_oid_cst;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",							  "CMDaccum_NEQ_oid;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",										  "CMD_NEQ_oid;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",									  "CMDaccum_NEQ_cst_flt;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",									  "CMDaccum_NEQ_flt_cst;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",								  "CMD_NEQ_cst_flt;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",											  "CMD_NEQ_flt_cst;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",							  "CMDaccum_NEQ_flt;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",										  "CMD_NEQ_flt;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",									  "CMDaccum_NEQ_cst_dbl;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",									  "CMDaccum_NEQ_dbl_cst;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",								  "CMD_NEQ_cst_dbl;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",											  "CMD_NEQ_dbl_cst;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",							  "CMDaccum_NEQ_dbl;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",										  "CMD_NEQ_dbl;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",									  "CMDaccum_NEQ_cst_lng;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",									  "CMDaccum_NEQ_lng_cst;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",								  "CMD_NEQ_cst_lng;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",											  "CMD_NEQ_lng_cst;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",							  "CMDaccum_NEQ_lng;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",										  "CMD_NEQ_lng;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",										  "CMDaccum_NEQ_cst_wrd;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",										  "CMDaccum_NEQ_wrd_cst;"			  ]
[ "!=",				  "command",	  "batcalc",	  "(cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",								  "CMD_NEQ_cst_wrd;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",												  "CMD_NEQ_wrd_cst;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",								  "CMDaccum_NEQ_wrd;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",											  "CMD_NEQ_wrd;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",									  "CMDaccum_NEQ_cst_int;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",									  "CMDaccum_NEQ_int_cst;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",								  "CMD_NEQ_cst_int;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",											  "CMD_NEQ_int_cst;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",							  "CMDaccum_NEQ_int;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",										  "CMD_NEQ_int;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",									  "CMDaccum_NEQ_cst_sht;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",									  "CMDaccum_NEQ_sht_cst;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",								  "CMD_NEQ_cst_sht;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",											  "CMD_NEQ_sht_cst;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",							  "CMDaccum_NEQ_sht;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",										  "CMD_NEQ_sht;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",									  "CMDaccum_NEQ_cst_bte;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",									  "CMDaccum_NEQ_bte_cst;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",								  "CMD_NEQ_cst_bte;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",											  "CMD_NEQ_bte_cst;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",							  "CMDaccum_NEQ_bte;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",										  "CMD_NEQ_bte;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",									  "CMDaccum_NEQ_cst_bit;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",									  "CMDaccum_NEQ_bit_cst;"				  ]
[ "!=",				  "command",	  "batcalc",	  "(cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",								  "CMD_NEQ_cst_bit;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",											  "CMD_NEQ_bit_cst;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",							  "CMDaccum_NEQ_bit;"					  ]
[ "!=",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",										  "CMD_NEQ_bit;"					  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumMODcst_lng_lng_lng;"		  ]
[ "%",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumMODcst2_lng_lng_lng;"		  ]
[ "%",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumMOD_lng_lng_lng;"				  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatMOD_lng_lng_lng;"				  ]
[ "%",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstMODbat_lng_lng_lng;"				  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",											  "CMDbatMODcst_lng_lng_lng;"				  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumMODcst_wrd_wrd_wrd;"		  ]
[ "%",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumMODcst2_wrd_wrd_wrd;"		  ]
[ "%",				  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumMOD_wrd_wrd_wrd;"				  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",									  "CMDbatMOD_wrd_wrd_wrd;"				  ]
[ "%",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",											  "CMDcstMODbat_wrd_wrd_wrd;"				  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:wrd] ",											  "CMDbatMODcst_wrd_wrd_wrd;"				  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",							  "CMDbataccumMODcst_int_int_int;"		  ]
[ "%",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumMODcst2_int_int_int;"		  ]
[ "%",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumMOD_int_int_int;"				  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",									  "CMDbatMOD_int_int_int;"				  ]
[ "%",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",											  "CMDcstMODbat_int_int_int;"				  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",											  "CMDbatMODcst_int_int_int;"				  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",							  "CMDbataccumMODcst_sht_sht_sht;"		  ]
[ "%",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",							  "CMDbataccumMODcst2_sht_sht_sht;"		  ]
[ "%",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",							  "CMDbataccumMOD_sht_sht_sht;"				  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",									  "CMDbatMOD_sht_sht_sht;"				  ]
[ "%",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",											  "CMDcstMODbat_sht_sht_sht;"				  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",											  "CMDbatMODcst_sht_sht_sht;"				  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte,bflag:bit,cflag:bit):bat[:oid,:bte] ",							  "CMDbataccumMODcst_bte_bte_bte;"		  ]
[ "%",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:bte] ",							  "CMDbataccumMODcst2_bte_bte_bte;"		  ]
[ "%",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:bte] ",							  "CMDbataccumMOD_bte_bte_bte;"				  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:bte] ",									  "CMDbatMOD_bte_bte_bte;"				  ]
[ "%",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:bte] ",											  "CMDcstMODbat_bte_bte_bte;"				  ]
[ "%",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:bte] ",											  "CMDbatMODcst_bte_bte_bte;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:flt,bflag:bit,cflag:bit):bat[:oid,:flt] ",							  "CMDbataccumMULcst_flt_flt_flt;"		  ]
[ "*",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:flt],cflag:bit,bflag:bit):bat[:oid,:flt] ",							  "CMDbataccumMULcst2_flt_flt_flt;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:flt],aflag:bit,bflag:bit):bat[:oid,:flt] ",							  "CMDbataccumMUL_flt_flt_flt;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",									  "CMDbatMUL_flt_flt_flt;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:flt]):bat[:oid,:flt] ",											  "CMDcstMULbat_flt_flt_flt;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:flt):bat[:oid,:flt] ",											  "CMDbatMULcst_flt_flt_flt;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],cst:dbl,bflag:bit,cflag:bit):bat[:oid,:dbl] ",							  "CMDbataccumMULcst_dbl_dbl_dbl;"		  ]
[ "*",					  "command",	  "batcalc",	  "(cst:dbl,b:bat[:oid,:dbl],cflag:bit,bflag:bit):bat[:oid,:dbl] ",							  "CMDbataccumMULcst2_dbl_dbl_dbl;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],c:bat[:oid,:dbl],aflag:bit,bflag:bit):bat[:oid,:dbl] ",							  "CMDbataccumMUL_dbl_dbl_dbl;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",									  "CMDbatMUL_dbl_dbl_dbl;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDcstMULbat_dbl_dbl_dbl;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],cst:dbl):bat[:oid,:dbl] ",											  "CMDbatMULcst_dbl_dbl_dbl;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],cst:flt,bflag:bit,cflag:bit):bat[:oid,:dbl] ",										  "CMDbataccumMULcst_dbl_flt_dbl;"			  ]
[ "*",					  "command",	  "batcalc",	  "(cst:dbl,b:bat[:oid,:flt],cflag:bit,bflag:bit):bat[:oid,:dbl] ",										  "CMDbataccumMULcst2_dbl_flt_dbl;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],c:bat[:oid,:flt],aflag:bit,bflag:bit):bat[:oid,:dbl] ",						  "CMDbataccumMUL_dbl_flt_dbl;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],c:bat[:oid,:flt]):bat[:oid,:dbl] ",									  "CMDbatMUL_dbl_flt_dbl;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:dbl,b:bat[:oid,:flt]):bat[:oid,:dbl] ",											  "CMDcstMULbat_dbl_flt_dbl;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],cst:flt):bat[:oid,:dbl] ",											  "CMDbatMULcst_dbl_flt_dbl;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:dbl,bflag:bit,cflag:bit):bat[:oid,:dbl] ",							  "CMDbataccumMULcst_flt_dbl_dbl;"		  ]
[ "*",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:dbl],cflag:bit,bflag:bit):bat[:oid,:dbl] ",							  "CMDbataccumMULcst2_flt_dbl_dbl;"		  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:dbl],aflag:bit,bflag:bit):bat[:oid,:dbl] ",						  "CMDbataccumMUL_flt_dbl_dbl;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",									  "CMDbatMUL_flt_dbl_dbl;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDcstMULbat_flt_dbl_dbl;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:dbl):bat[:oid,:dbl] ",											  "CMDbatMULcst_flt_dbl_dbl;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:dbl] ",											  "CMDbatMUL_flt_flt_dbl;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:flt]):bat[:oid,:dbl] ",													  "CMDcstMULbat_flt_flt_dbl;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:flt):bat[:oid,:dbl] ",													  "CMDbatMULcst_flt_flt_dbl;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte,bflag:bit,cflag:bit):bat[:oid,:bte] ",						  "CMDbataccumMULcst_bte_bte_bte;"			  ]
[ "*",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:bte] ",						  "CMDbataccumMULcst2_bte_bte_bte;"			  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:bte] ",					  "CMDbataccumMUL_bte_bte_bte;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:bte] ",									  "CMDbatMUL_bte_bte_bte;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:bte] ",											  "CMDcstMULbat_bte_bte_bte;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:bte] ",											  "CMDbatMULcst_bte_bte_bte;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",						  "CMDbataccumMULcst_sht_sht_sht;"			  ]
[ "*",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",						  "CMDbataccumMULcst2_sht_sht_sht;"			  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",					  "CMDbataccumMUL_sht_sht_sht;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",									  "CMDbatMUL_sht_sht_sht;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",											  "CMDcstMULbat_sht_sht_sht;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",											  "CMDbatMULcst_sht_sht_sht;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:bte,bflag:bit,cflag:bit):bat[:oid,:sht] ",									  "CMDbataccumMULcst_sht_bte_sht;"		  ]
[ "*",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:sht] ",									  "CMDbataccumMULcst2_sht_bte_sht;"		  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:sht] ",						  "CMDbataccumMUL_sht_bte_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:sht] ",									  "CMDbatMUL_sht_bte_sht;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:sht] ",											  "CMDcstMULbat_sht_bte_sht;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:sht] ",											  "CMDbatMULcst_sht_bte_sht;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",							  "CMDbataccumMULcst_bte_sht_sht;"		  ]
[ "*",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",							  "CMDbataccumMULcst2_bte_sht_sht;"		  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",						  "CMDbataccumMUL_bte_sht_sht;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:sht] ",									  "CMDbatMUL_bte_sht_sht;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:sht] ",											  "CMDcstMULbat_bte_sht_sht;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:sht] ",											  "CMDbatMULcst_bte_sht_sht;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:sht] ",							  "CMDbatMUL_bte_bte_sht;"				  ]
[ "*",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:sht] ",									  "CMDcstMULbat_bte_bte_sht;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:sht] ",									  "CMDbatMULcst_bte_bte_sht;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",							  "CMDbataccumMULcst_int_int_int;"		  ]
[ "*",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumMULcst2_int_int_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumMUL_int_int_int;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",									  "CMDbatMUL_int_int_int;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",											  "CMDcstMULbat_int_int_int;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",											  "CMDbatMULcst_int_int_int;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht,bflag:bit,cflag:bit):bat[:oid,:int] ",						  "CMDbataccumMULcst_int_sht_int;"			  ]
[ "*",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:int] ",						  "CMDbataccumMULcst2_int_sht_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:int] ",						  "CMDbataccumMUL_int_sht_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:int] ",									  "CMDbatMUL_int_sht_int;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:int] ",											  "CMDcstMULbat_int_sht_int;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht):bat[:oid,:int] ",											  "CMDbatMULcst_int_sht_int;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:bte,bflag:bit,cflag:bit):bat[:oid,:int] ",									  "CMDbataccumMULcst_int_bte_int;"		  ]
[ "*",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:int] ",									  "CMDbataccumMULcst2_int_bte_int;"		  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:int] ",						  "CMDbataccumMUL_int_bte_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:int] ",									  "CMDbatMUL_int_bte_int;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:int] ",											  "CMDcstMULbat_int_bte_int;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:bte):bat[:oid,:int] ",											  "CMDbatMULcst_int_bte_int;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",							  "CMDbataccumMULcst_sht_int_int;"		  ]
[ "*",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumMULcst2_sht_int_int;"		  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",						  "CMDbataccumMUL_sht_int_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",									  "CMDbatMUL_sht_int_int;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:int] ",											  "CMDcstMULbat_sht_int_int;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int):bat[:oid,:int] ",											  "CMDbatMULcst_sht_int_int;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:int] ",							  "CMDbatMUL_sht_sht_int;"				  ]
[ "*",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:int] ",									  "CMDcstMULbat_sht_sht_int;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:int] ",									  "CMDbatMULcst_sht_sht_int;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:int] ",										  "CMDbatMUL_sht_bte_int;"			  ]
[ "*",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:int] ",												  "CMDcstMULbat_sht_bte_int;"			  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:int] ",												  "CMDbatMULcst_sht_bte_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",							  "CMDbataccumMULcst_bte_int_int;"		  ]
[ "*",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumMULcst2_bte_int_int;"		  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",						  "CMDbataccumMUL_bte_int_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:int] ",									  "CMDbatMUL_bte_int_int;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:int] ",											  "CMDcstMULbat_bte_int_int;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:int):bat[:oid,:int] ",											  "CMDbatMULcst_bte_int_int;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:int] ",							  "CMDbatMUL_bte_sht_int;"				  ]
[ "*",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:int] ",									  "CMDcstMULbat_bte_sht_int;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:int] ",									  "CMDbatMULcst_bte_sht_int;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:int] ",										  "CMDbatMUL_bte_bte_int;"			  ]
[ "*",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:int] ",												  "CMDcstMULbat_bte_bte_int;"			  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:int] ",												  "CMDbatMULcst_bte_bte_int;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumMULcst_wrd_wrd_wrd;"			  ]
[ "*",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumMULcst2_wrd_wrd_wrd;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",									  "CMDbataccumMUL_wrd_wrd_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",									  "CMDbatMUL_wrd_wrd_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",											  "CMDcstMULbat_wrd_wrd_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:wrd] ",											  "CMDbatMULcst_wrd_wrd_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:int,bflag:bit,cflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumMULcst_wrd_int_wrd;"			  ]
[ "*",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumMULcst2_wrd_int_wrd;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumMUL_wrd_int_wrd;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:int]):bat[:oid,:wrd] ",									  "CMDbatMUL_wrd_int_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] ",											  "CMDcstMULbat_wrd_int_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:int):bat[:oid,:wrd] ",											  "CMDbatMULcst_wrd_int_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:sht,bflag:bit,cflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumMULcst_wrd_sht_wrd;"			  ]
[ "*",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumMULcst2_wrd_sht_wrd;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumMUL_wrd_sht_wrd;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:sht]):bat[:oid,:wrd] ",									  "CMDbatMUL_wrd_sht_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:sht]):bat[:oid,:wrd] ",											  "CMDcstMULbat_wrd_sht_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:sht):bat[:oid,:wrd] ",											  "CMDbatMULcst_wrd_sht_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:bte,bflag:bit,cflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumMULcst_wrd_bte_wrd;"			  ]
[ "*",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumMULcst2_wrd_bte_wrd;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumMUL_wrd_bte_wrd;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:bte]):bat[:oid,:wrd] ",									  "CMDbatMUL_wrd_bte_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:bte]):bat[:oid,:wrd] ",											  "CMDcstMULbat_wrd_bte_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:bte):bat[:oid,:wrd] ",											  "CMDbatMULcst_wrd_bte_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumMULcst_int_wrd_wrd;"		  ]
[ "*",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumMULcst2_int_wrd_wrd;"		  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumMUL_int_wrd_wrd;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",									  "CMDbatMUL_int_wrd_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",											  "CMDcstMULbat_int_wrd_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:wrd):bat[:oid,:wrd] ",											  "CMDbatMULcst_int_wrd_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:wrd] ",											  "CMDbatMUL_int_int_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:wrd] ",													  "CMDcstMULbat_int_int_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:wrd] ",													  "CMDbatMULcst_int_int_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:wrd] ",											  "CMDbatMUL_int_sht_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:wrd] ",													  "CMDcstMULbat_int_sht_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht):bat[:oid,:wrd] ",													  "CMDbatMULcst_int_sht_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:wrd] ",											  "CMDbatMUL_int_bte_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:wrd] ",													  "CMDcstMULbat_int_bte_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:bte):bat[:oid,:wrd] ",													  "CMDbatMULcst_int_bte_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumMULcst_sht_wrd_wrd;"		  ]
[ "*",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumMULcst2_sht_wrd_wrd;"		  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumMUL_sht_wrd_wrd;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",									  "CMDbatMUL_sht_wrd_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",											  "CMDcstMULbat_sht_wrd_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:wrd):bat[:oid,:wrd] ",											  "CMDbatMULcst_sht_wrd_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:wrd] ",											  "CMDbatMUL_sht_int_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:wrd] ",													  "CMDcstMULbat_sht_int_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int):bat[:oid,:wrd] ",													  "CMDbatMULcst_sht_int_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:wrd] ",											  "CMDbatMUL_sht_sht_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:wrd] ",													  "CMDcstMULbat_sht_sht_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:wrd] ",													  "CMDbatMULcst_sht_sht_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:wrd] ",											  "CMDbatMUL_sht_bte_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:wrd] ",													  "CMDcstMULbat_sht_bte_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:wrd] ",													  "CMDbatMULcst_sht_bte_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumMULcst_bte_wrd_wrd;"		  ]
[ "*",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumMULcst2_bte_wrd_wrd;"		  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumMUL_bte_wrd_wrd;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",									  "CMDbatMUL_bte_wrd_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",											  "CMDcstMULbat_bte_wrd_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:wrd):bat[:oid,:wrd] ",											  "CMDbatMULcst_bte_wrd_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:wrd] ",											  "CMDbatMUL_bte_int_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:wrd] ",													  "CMDcstMULbat_bte_int_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:int):bat[:oid,:wrd] ",													  "CMDbatMULcst_bte_int_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:wrd] ",											  "CMDbatMUL_bte_sht_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:wrd] ",													  "CMDcstMULbat_bte_sht_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:wrd] ",													  "CMDbatMULcst_bte_sht_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:wrd] ",											  "CMDbatMUL_bte_bte_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:wrd] ",													  "CMDcstMULbat_bte_bte_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:wrd] ",													  "CMDbatMULcst_bte_bte_wrd;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumMULcst_lng_lng_lng;"		  ]
[ "*",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumMULcst2_lng_lng_lng;"		  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumMUL_lng_lng_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatMUL_lng_lng_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstMULbat_lng_lng_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",											  "CMDbatMULcst_lng_lng_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:lng] ",										  "CMDbataccumMULcst_lng_wrd_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:lng] ",										  "CMDbataccumMULcst2_lng_wrd_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumMUL_lng_wrd_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:wrd]):bat[:oid,:lng] ",									  "CMDbatMUL_lng_wrd_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:wrd]):bat[:oid,:lng] ",											  "CMDcstMULbat_lng_wrd_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:wrd):bat[:oid,:lng] ",											  "CMDbatMULcst_lng_wrd_lng;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:int,bflag:bit,cflag:bit):bat[:oid,:lng] ",						  "CMDbataccumMULcst_lng_int_lng;"			  ]
[ "*",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumMULcst2_lng_int_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumMUL_lng_int_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",									  "CMDbatMUL_lng_int_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:int]):bat[:oid,:lng] ",											  "CMDcstMULbat_lng_int_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:int):bat[:oid,:lng] ",											  "CMDbatMULcst_lng_int_lng;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:sht,bflag:bit,cflag:bit):bat[:oid,:lng] ",						  "CMDbataccumMULcst_lng_sht_lng;"			  ]
[ "*",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumMULcst2_lng_sht_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumMUL_lng_sht_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:sht]):bat[:oid,:lng] ",									  "CMDbatMUL_lng_sht_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:sht]):bat[:oid,:lng] ",											  "CMDcstMULbat_lng_sht_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:sht):bat[:oid,:lng] ",											  "CMDbatMULcst_lng_sht_lng;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:bte,bflag:bit,cflag:bit):bat[:oid,:lng] ",									  "CMDbataccumMULcst_lng_bte_lng;"		  ]
[ "*",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:lng] ",									  "CMDbataccumMULcst2_lng_bte_lng;"		  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumMUL_lng_bte_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:bte]):bat[:oid,:lng] ",									  "CMDbatMUL_lng_bte_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:bte]):bat[:oid,:lng] ",											  "CMDcstMULbat_lng_bte_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:bte):bat[:oid,:lng] ",											  "CMDbatMULcst_lng_bte_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumMULcst_wrd_lng_lng;"		  ]
[ "*",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumMULcst2_wrd_lng_lng;"		  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumMUL_wrd_lng_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatMUL_wrd_lng_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstMULbat_wrd_lng_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:lng):bat[:oid,:lng] ",											  "CMDbatMULcst_wrd_lng_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:lng] ",											  "CMDbatMUL_wrd_wrd_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:lng] ",													  "CMDcstMULbat_wrd_wrd_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:lng] ",													  "CMDbatMULcst_wrd_wrd_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:int]):bat[:oid,:lng] ",											  "CMDbatMUL_wrd_int_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:int]):bat[:oid,:lng] ",													  "CMDcstMULbat_wrd_int_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:int):bat[:oid,:lng] ",													  "CMDbatMULcst_wrd_int_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:sht]):bat[:oid,:lng] ",											  "CMDbatMUL_wrd_sht_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:sht]):bat[:oid,:lng] ",													  "CMDcstMULbat_wrd_sht_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:sht):bat[:oid,:lng] ",													  "CMDbatMULcst_wrd_sht_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:bte]):bat[:oid,:lng] ",											  "CMDbatMUL_wrd_bte_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:bte]):bat[:oid,:lng] ",													  "CMDcstMULbat_wrd_bte_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:bte):bat[:oid,:lng] ",													  "CMDbatMULcst_wrd_bte_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumMULcst_int_lng_lng;"		  ]
[ "*",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumMULcst2_int_lng_lng;"		  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumMUL_int_lng_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatMUL_int_lng_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstMULbat_int_lng_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:lng):bat[:oid,:lng] ",											  "CMDbatMULcst_int_lng_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:wrd]):bat[:oid,:lng] ",											  "CMDbatMUL_int_wrd_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:wrd]):bat[:oid,:lng] ",													  "CMDcstMULbat_int_wrd_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:wrd):bat[:oid,:lng] ",													  "CMDbatMULcst_int_wrd_lng;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:lng] ",										  "CMDbatMUL_int_int_lng;"			  ]
[ "*",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:lng] ",												  "CMDcstMULbat_int_int_lng;"			  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:lng] ",												  "CMDbatMULcst_int_int_lng;"			  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:lng] ",							  "CMDbatMUL_int_sht_lng;"				  ]
[ "*",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:lng] ",									  "CMDcstMULbat_int_sht_lng;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht):bat[:oid,:lng] ",									  "CMDbatMULcst_int_sht_lng;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:lng] ",										  "CMDbatMUL_int_bte_lng;"			  ]
[ "*",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:lng] ",												  "CMDcstMULbat_int_bte_lng;"			  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:bte):bat[:oid,:lng] ",												  "CMDbatMULcst_int_bte_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumMULcst_sht_lng_lng;"		  ]
[ "*",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumMULcst2_sht_lng_lng;"		  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumMUL_sht_lng_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatMUL_sht_lng_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstMULbat_sht_lng_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:lng):bat[:oid,:lng] ",											  "CMDbatMULcst_sht_lng_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:wrd]):bat[:oid,:lng] ",											  "CMDbatMUL_sht_wrd_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:wrd]):bat[:oid,:lng] ",													  "CMDcstMULbat_sht_wrd_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:wrd):bat[:oid,:lng] ",													  "CMDbatMULcst_sht_wrd_lng;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:lng] ",							  "CMDbatMUL_sht_int_lng;"				  ]
[ "*",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:lng] ",									  "CMDcstMULbat_sht_int_lng;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int):bat[:oid,:lng] ",									  "CMDbatMULcst_sht_int_lng;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:lng] ",							  "CMDbatMUL_sht_sht_lng;"				  ]
[ "*",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:lng] ",									  "CMDcstMULbat_sht_sht_lng;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:lng] ",									  "CMDbatMULcst_sht_sht_lng;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:lng] ",										  "CMDbatMUL_sht_bte_lng;"			  ]
[ "*",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:lng] ",												  "CMDcstMULbat_sht_bte_lng;"			  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:lng] ",												  "CMDbatMULcst_sht_bte_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumMULcst_bte_lng_lng;"		  ]
[ "*",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumMULcst2_bte_lng_lng;"		  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumMUL_bte_lng_lng;"			  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatMUL_bte_lng_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstMULbat_bte_lng_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:lng):bat[:oid,:lng] ",											  "CMDbatMULcst_bte_lng_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:wrd]):bat[:oid,:lng] ",											  "CMDbatMUL_bte_wrd_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:wrd]):bat[:oid,:lng] ",													  "CMDcstMULbat_bte_wrd_lng;"				  ]
[ "*",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:wrd):bat[:oid,:lng] ",													  "CMDbatMULcst_bte_wrd_lng;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:lng] ",							  "CMDbatMUL_bte_int_lng;"				  ]
[ "*",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:lng] ",									  "CMDcstMULbat_bte_int_lng;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:int):bat[:oid,:lng] ",									  "CMDbatMULcst_bte_int_lng;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:lng] ",										  "CMDbatMUL_bte_sht_lng;"			  ]
[ "*",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:lng] ",												  "CMDcstMULbat_bte_sht_lng;"			  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:lng] ",												  "CMDbatMULcst_bte_sht_lng;"			  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:lng] ",							  "CMDbatMUL_bte_bte_lng;"				  ]
[ "*",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:lng] ",									  "CMDcstMULbat_bte_bte_lng;"				  ]
[ "*",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:lng] ",									  "CMDbatMULcst_bte_bte_lng;"				  ]
[ "+",				  "command",	  "batcalc",	  "(l:str,r:bat[:oid,:str]):bat[:oid,:str] ",												  "STRcstConcatbat;"					  ]
[ "+",				  "command",	  "batcalc",	  "(l:bat[:oid,:str],r:str):bat[:oid,:str] ",												  "STRbatConcatcst;"					  ]
[ "+",				  "command",	  "batcalc",	  "(l:bat[:oid,:str],r:bat[:oid,:str]):bat[:oid,:str] ",										  "STRbatConcat;"					  ]
[ "++",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",												  "CMDunaryPLUSPLUS;"					  ]
[ "++",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] ",												  "CMDunaryPLUSPLUS;"					  ]
[ "++",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] ",												  "CMDunaryPLUSPLUS;"					  ]
[ "++",				  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd]):bat[:any_1,:wrd] ",													  "CMDunaryPLUSPLUS;"				  ]
[ "++",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:int] ",												  "CMDunaryPLUSPLUS;"					  ]
[ "++",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] ",												  "CMDunaryPLUSPLUS;"					  ]
[ "++",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bte]):bat[:any_1,:bte] ",												  "CMDunaryPLUSPLUS;"					  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:flt,bflag:bit,cflag:bit):bat[:oid,:flt] ",							  "CMDbataccumADDcst_flt_flt_flt;"		  ]
[ "+",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:flt],cflag:bit,bflag:bit):bat[:oid,:flt] ",							  "CMDbataccumADDcst2_flt_flt_flt;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:flt],aflag:bit,bflag:bit):bat[:oid,:flt] ",							  "CMDbataccumADD_flt_flt_flt;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",									  "CMDbatADD_flt_flt_flt;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:flt]):bat[:oid,:flt] ",											  "CMDcstADDbat_flt_flt_flt;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:flt):bat[:oid,:flt] ",											  "CMDbatADDcst_flt_flt_flt;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],cst:dbl,bflag:bit,cflag:bit):bat[:oid,:dbl] ",							  "CMDbataccumADDcst_dbl_dbl_dbl;"		  ]
[ "+",					  "command",	  "batcalc",	  "(cst:dbl,b:bat[:oid,:dbl],cflag:bit,bflag:bit):bat[:oid,:dbl] ",							  "CMDbataccumADDcst2_dbl_dbl_dbl;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],c:bat[:oid,:dbl],aflag:bit,bflag:bit):bat[:oid,:dbl] ",							  "CMDbataccumADD_dbl_dbl_dbl;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",									  "CMDbatADD_dbl_dbl_dbl;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDcstADDbat_dbl_dbl_dbl;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],cst:dbl):bat[:oid,:dbl] ",											  "CMDbatADDcst_dbl_dbl_dbl;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],cst:flt,bflag:bit,cflag:bit):bat[:oid,:dbl] ",										  "CMDbataccumADDcst_dbl_flt_dbl;"			  ]
[ "+",					  "command",	  "batcalc",	  "(cst:dbl,b:bat[:oid,:flt],cflag:bit,bflag:bit):bat[:oid,:dbl] ",										  "CMDbataccumADDcst2_dbl_flt_dbl;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],c:bat[:oid,:flt],aflag:bit,bflag:bit):bat[:oid,:dbl] ",						  "CMDbataccumADD_dbl_flt_dbl;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],c:bat[:oid,:flt]):bat[:oid,:dbl] ",									  "CMDbatADD_dbl_flt_dbl;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:dbl,b:bat[:oid,:flt]):bat[:oid,:dbl] ",											  "CMDcstADDbat_dbl_flt_dbl;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],cst:flt):bat[:oid,:dbl] ",											  "CMDbatADDcst_dbl_flt_dbl;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:dbl,bflag:bit,cflag:bit):bat[:oid,:dbl] ",							  "CMDbataccumADDcst_flt_dbl_dbl;"		  ]
[ "+",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:dbl],cflag:bit,bflag:bit):bat[:oid,:dbl] ",							  "CMDbataccumADDcst2_flt_dbl_dbl;"		  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:dbl],aflag:bit,bflag:bit):bat[:oid,:dbl] ",						  "CMDbataccumADD_flt_dbl_dbl;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",									  "CMDbatADD_flt_dbl_dbl;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDcstADDbat_flt_dbl_dbl;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:dbl):bat[:oid,:dbl] ",											  "CMDbatADDcst_flt_dbl_dbl;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:dbl] ",											  "CMDbatADD_flt_flt_dbl;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:flt]):bat[:oid,:dbl] ",													  "CMDcstADDbat_flt_flt_dbl;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:flt):bat[:oid,:dbl] ",													  "CMDbatADDcst_flt_flt_dbl;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte,bflag:bit,cflag:bit):bat[:oid,:bte] ",						  "CMDbataccumADDcst_bte_bte_bte;"			  ]
[ "+",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:bte] ",						  "CMDbataccumADDcst2_bte_bte_bte;"			  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:bte] ",					  "CMDbataccumADD_bte_bte_bte;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:bte] ",									  "CMDbatADD_bte_bte_bte;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:bte] ",											  "CMDcstADDbat_bte_bte_bte;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:bte] ",											  "CMDbatADDcst_bte_bte_bte;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",						  "CMDbataccumADDcst_sht_sht_sht;"			  ]
[ "+",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",						  "CMDbataccumADDcst2_sht_sht_sht;"			  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",					  "CMDbataccumADD_sht_sht_sht;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",									  "CMDbatADD_sht_sht_sht;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",											  "CMDcstADDbat_sht_sht_sht;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",											  "CMDbatADDcst_sht_sht_sht;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:bte,bflag:bit,cflag:bit):bat[:oid,:sht] ",									  "CMDbataccumADDcst_sht_bte_sht;"		  ]
[ "+",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:sht] ",									  "CMDbataccumADDcst2_sht_bte_sht;"		  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:sht] ",						  "CMDbataccumADD_sht_bte_sht;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:sht] ",									  "CMDbatADD_sht_bte_sht;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:sht] ",											  "CMDcstADDbat_sht_bte_sht;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:sht] ",											  "CMDbatADDcst_sht_bte_sht;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",							  "CMDbataccumADDcst_bte_sht_sht;"		  ]
[ "+",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",							  "CMDbataccumADDcst2_bte_sht_sht;"		  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",						  "CMDbataccumADD_bte_sht_sht;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:sht] ",									  "CMDbatADD_bte_sht_sht;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:sht] ",											  "CMDcstADDbat_bte_sht_sht;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:sht] ",											  "CMDbatADDcst_bte_sht_sht;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:sht] ",							  "CMDbatADD_bte_bte_sht;"				  ]
[ "+",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:sht] ",									  "CMDcstADDbat_bte_bte_sht;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:sht] ",									  "CMDbatADDcst_bte_bte_sht;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",							  "CMDbataccumADDcst_int_int_int;"		  ]
[ "+",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumADDcst2_int_int_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumADD_int_int_int;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",									  "CMDbatADD_int_int_int;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",											  "CMDcstADDbat_int_int_int;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",											  "CMDbatADDcst_int_int_int;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht,bflag:bit,cflag:bit):bat[:oid,:int] ",						  "CMDbataccumADDcst_int_sht_int;"			  ]
[ "+",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:int] ",						  "CMDbataccumADDcst2_int_sht_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:int] ",						  "CMDbataccumADD_int_sht_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:int] ",									  "CMDbatADD_int_sht_int;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:int] ",											  "CMDcstADDbat_int_sht_int;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht):bat[:oid,:int] ",											  "CMDbatADDcst_int_sht_int;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:bte,bflag:bit,cflag:bit):bat[:oid,:int] ",									  "CMDbataccumADDcst_int_bte_int;"		  ]
[ "+",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:int] ",									  "CMDbataccumADDcst2_int_bte_int;"		  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:int] ",						  "CMDbataccumADD_int_bte_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:int] ",									  "CMDbatADD_int_bte_int;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:int] ",											  "CMDcstADDbat_int_bte_int;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:bte):bat[:oid,:int] ",											  "CMDbatADDcst_int_bte_int;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",							  "CMDbataccumADDcst_sht_int_int;"		  ]
[ "+",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumADDcst2_sht_int_int;"		  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",						  "CMDbataccumADD_sht_int_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",									  "CMDbatADD_sht_int_int;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:int] ",											  "CMDcstADDbat_sht_int_int;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int):bat[:oid,:int] ",											  "CMDbatADDcst_sht_int_int;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:int] ",							  "CMDbatADD_sht_sht_int;"				  ]
[ "+",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:int] ",									  "CMDcstADDbat_sht_sht_int;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:int] ",									  "CMDbatADDcst_sht_sht_int;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:int] ",							  "CMDbatADD_sht_bte_int;"				  ]
[ "+",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:int] ",									  "CMDcstADDbat_sht_bte_int;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:int] ",									  "CMDbatADDcst_sht_bte_int;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",							  "CMDbataccumADDcst_bte_int_int;"		  ]
[ "+",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumADDcst2_bte_int_int;"		  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",						  "CMDbataccumADD_bte_int_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:int] ",									  "CMDbatADD_bte_int_int;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:int] ",											  "CMDcstADDbat_bte_int_int;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:int):bat[:oid,:int] ",											  "CMDbatADDcst_bte_int_int;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:int] ",							  "CMDbatADD_bte_sht_int;"				  ]
[ "+",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:int] ",									  "CMDcstADDbat_bte_sht_int;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:int] ",									  "CMDbatADDcst_bte_sht_int;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:int] ",										  "CMDbatADD_bte_bte_int;"			  ]
[ "+",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:int] ",												  "CMDcstADDbat_bte_bte_int;"			  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:int] ",												  "CMDbatADDcst_bte_bte_int;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumADDcst_wrd_wrd_wrd;"			  ]
[ "+",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumADDcst2_wrd_wrd_wrd;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",									  "CMDbataccumADD_wrd_wrd_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",									  "CMDbatADD_wrd_wrd_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",											  "CMDcstADDbat_wrd_wrd_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:wrd] ",											  "CMDbatADDcst_wrd_wrd_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:int,bflag:bit,cflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumADDcst_wrd_int_wrd;"			  ]
[ "+",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumADDcst2_wrd_int_wrd;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumADD_wrd_int_wrd;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:int]):bat[:oid,:wrd] ",									  "CMDbatADD_wrd_int_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] ",											  "CMDcstADDbat_wrd_int_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:int):bat[:oid,:wrd] ",											  "CMDbatADDcst_wrd_int_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:sht,bflag:bit,cflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumADDcst_wrd_sht_wrd;"			  ]
[ "+",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumADDcst2_wrd_sht_wrd;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumADD_wrd_sht_wrd;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:sht]):bat[:oid,:wrd] ",									  "CMDbatADD_wrd_sht_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:sht]):bat[:oid,:wrd] ",											  "CMDcstADDbat_wrd_sht_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:sht):bat[:oid,:wrd] ",											  "CMDbatADDcst_wrd_sht_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:bte,bflag:bit,cflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumADDcst_wrd_bte_wrd;"			  ]
[ "+",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumADDcst2_wrd_bte_wrd;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumADD_wrd_bte_wrd;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:bte]):bat[:oid,:wrd] ",									  "CMDbatADD_wrd_bte_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:bte]):bat[:oid,:wrd] ",											  "CMDcstADDbat_wrd_bte_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:bte):bat[:oid,:wrd] ",											  "CMDbatADDcst_wrd_bte_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumADDcst_int_wrd_wrd;"		  ]
[ "+",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumADDcst2_int_wrd_wrd;"		  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumADD_int_wrd_wrd;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",									  "CMDbatADD_int_wrd_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",											  "CMDcstADDbat_int_wrd_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:wrd):bat[:oid,:wrd] ",											  "CMDbatADDcst_int_wrd_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:wrd] ",											  "CMDbatADD_int_int_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:wrd] ",													  "CMDcstADDbat_int_int_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:wrd] ",													  "CMDbatADDcst_int_int_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:wrd] ",											  "CMDbatADD_int_sht_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:wrd] ",													  "CMDcstADDbat_int_sht_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht):bat[:oid,:wrd] ",													  "CMDbatADDcst_int_sht_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:wrd] ",											  "CMDbatADD_int_bte_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:wrd] ",													  "CMDcstADDbat_int_bte_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:bte):bat[:oid,:wrd] ",													  "CMDbatADDcst_int_bte_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumADDcst_sht_wrd_wrd;"		  ]
[ "+",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumADDcst2_sht_wrd_wrd;"		  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumADD_sht_wrd_wrd;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",									  "CMDbatADD_sht_wrd_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",											  "CMDcstADDbat_sht_wrd_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:wrd):bat[:oid,:wrd] ",											  "CMDbatADDcst_sht_wrd_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:wrd] ",											  "CMDbatADD_sht_int_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:wrd] ",													  "CMDcstADDbat_sht_int_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int):bat[:oid,:wrd] ",													  "CMDbatADDcst_sht_int_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:wrd] ",											  "CMDbatADD_sht_sht_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:wrd] ",													  "CMDcstADDbat_sht_sht_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:wrd] ",													  "CMDbatADDcst_sht_sht_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:wrd] ",											  "CMDbatADD_sht_bte_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:wrd] ",													  "CMDcstADDbat_sht_bte_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:wrd] ",													  "CMDbatADDcst_sht_bte_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumADDcst_bte_wrd_wrd;"		  ]
[ "+",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumADDcst2_bte_wrd_wrd;"		  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumADD_bte_wrd_wrd;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",									  "CMDbatADD_bte_wrd_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",											  "CMDcstADDbat_bte_wrd_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:wrd):bat[:oid,:wrd] ",											  "CMDbatADDcst_bte_wrd_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:wrd] ",											  "CMDbatADD_bte_int_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:wrd] ",													  "CMDcstADDbat_bte_int_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:int):bat[:oid,:wrd] ",													  "CMDbatADDcst_bte_int_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:wrd] ",											  "CMDbatADD_bte_sht_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:wrd] ",													  "CMDcstADDbat_bte_sht_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:wrd] ",													  "CMDbatADDcst_bte_sht_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:wrd] ",											  "CMDbatADD_bte_bte_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:wrd] ",													  "CMDcstADDbat_bte_bte_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:wrd] ",													  "CMDbatADDcst_bte_bte_wrd;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumADDcst_lng_lng_lng;"		  ]
[ "+",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumADDcst2_lng_lng_lng;"		  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumADD_lng_lng_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatADD_lng_lng_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstADDbat_lng_lng_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",											  "CMDbatADDcst_lng_lng_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:lng] ",										  "CMDbataccumADDcst_lng_wrd_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:lng] ",										  "CMDbataccumADDcst2_lng_wrd_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumADD_lng_wrd_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:wrd]):bat[:oid,:lng] ",									  "CMDbatADD_lng_wrd_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:wrd]):bat[:oid,:lng] ",											  "CMDcstADDbat_lng_wrd_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:wrd):bat[:oid,:lng] ",											  "CMDbatADDcst_lng_wrd_lng;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:int,bflag:bit,cflag:bit):bat[:oid,:lng] ",						  "CMDbataccumADDcst_lng_int_lng;"			  ]
[ "+",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumADDcst2_lng_int_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumADD_lng_int_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",									  "CMDbatADD_lng_int_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:int]):bat[:oid,:lng] ",											  "CMDcstADDbat_lng_int_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:int):bat[:oid,:lng] ",											  "CMDbatADDcst_lng_int_lng;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:sht,bflag:bit,cflag:bit):bat[:oid,:lng] ",						  "CMDbataccumADDcst_lng_sht_lng;"			  ]
[ "+",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumADDcst2_lng_sht_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumADD_lng_sht_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:sht]):bat[:oid,:lng] ",									  "CMDbatADD_lng_sht_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:sht]):bat[:oid,:lng] ",											  "CMDcstADDbat_lng_sht_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:sht):bat[:oid,:lng] ",											  "CMDbatADDcst_lng_sht_lng;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:bte,bflag:bit,cflag:bit):bat[:oid,:lng] ",									  "CMDbataccumADDcst_lng_bte_lng;"		  ]
[ "+",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:lng] ",									  "CMDbataccumADDcst2_lng_bte_lng;"		  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumADD_lng_bte_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:bte]):bat[:oid,:lng] ",									  "CMDbatADD_lng_bte_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:bte]):bat[:oid,:lng] ",											  "CMDcstADDbat_lng_bte_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:bte):bat[:oid,:lng] ",											  "CMDbatADDcst_lng_bte_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumADDcst_wrd_lng_lng;"		  ]
[ "+",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumADDcst2_wrd_lng_lng;"		  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumADD_wrd_lng_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatADD_wrd_lng_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstADDbat_wrd_lng_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:lng):bat[:oid,:lng] ",											  "CMDbatADDcst_wrd_lng_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:lng] ",											  "CMDbatADD_wrd_wrd_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:lng] ",													  "CMDcstADDbat_wrd_wrd_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:lng] ",													  "CMDbatADDcst_wrd_wrd_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:int]):bat[:oid,:lng] ",											  "CMDbatADD_wrd_int_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:int]):bat[:oid,:lng] ",													  "CMDcstADDbat_wrd_int_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:int):bat[:oid,:lng] ",													  "CMDbatADDcst_wrd_int_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:sht]):bat[:oid,:lng] ",											  "CMDbatADD_wrd_sht_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:sht]):bat[:oid,:lng] ",													  "CMDcstADDbat_wrd_sht_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:sht):bat[:oid,:lng] ",													  "CMDbatADDcst_wrd_sht_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:bte]):bat[:oid,:lng] ",											  "CMDbatADD_wrd_bte_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:bte]):bat[:oid,:lng] ",													  "CMDcstADDbat_wrd_bte_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:bte):bat[:oid,:lng] ",													  "CMDbatADDcst_wrd_bte_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumADDcst_int_lng_lng;"		  ]
[ "+",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumADDcst2_int_lng_lng;"		  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumADD_int_lng_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatADD_int_lng_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstADDbat_int_lng_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:lng):bat[:oid,:lng] ",											  "CMDbatADDcst_int_lng_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:wrd]):bat[:oid,:lng] ",											  "CMDbatADD_int_wrd_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:wrd]):bat[:oid,:lng] ",													  "CMDcstADDbat_int_wrd_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:wrd):bat[:oid,:lng] ",													  "CMDbatADDcst_int_wrd_lng;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:lng] ",										  "CMDbatADD_int_int_lng;"			  ]
[ "+",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:lng] ",												  "CMDcstADDbat_int_int_lng;"			  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:lng] ",												  "CMDbatADDcst_int_int_lng;"			  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:lng] ",							  "CMDbatADD_int_sht_lng;"				  ]
[ "+",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:lng] ",									  "CMDcstADDbat_int_sht_lng;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht):bat[:oid,:lng] ",									  "CMDbatADDcst_int_sht_lng;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:lng] ",										  "CMDbatADD_int_bte_lng;"			  ]
[ "+",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:lng] ",												  "CMDcstADDbat_int_bte_lng;"			  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:bte):bat[:oid,:lng] ",												  "CMDbatADDcst_int_bte_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumADDcst_sht_lng_lng;"		  ]
[ "+",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumADDcst2_sht_lng_lng;"		  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumADD_sht_lng_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatADD_sht_lng_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstADDbat_sht_lng_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:lng):bat[:oid,:lng] ",											  "CMDbatADDcst_sht_lng_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:wrd]):bat[:oid,:lng] ",											  "CMDbatADD_sht_wrd_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:wrd]):bat[:oid,:lng] ",													  "CMDcstADDbat_sht_wrd_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:wrd):bat[:oid,:lng] ",													  "CMDbatADDcst_sht_wrd_lng;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:lng] ",							  "CMDbatADD_sht_int_lng;"				  ]
[ "+",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:lng] ",									  "CMDcstADDbat_sht_int_lng;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int):bat[:oid,:lng] ",									  "CMDbatADDcst_sht_int_lng;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:lng] ",							  "CMDbatADD_sht_sht_lng;"				  ]
[ "+",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:lng] ",									  "CMDcstADDbat_sht_sht_lng;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:lng] ",									  "CMDbatADDcst_sht_sht_lng;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:lng] ",										  "CMDbatADD_sht_bte_lng;"			  ]
[ "+",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:lng] ",												  "CMDcstADDbat_sht_bte_lng;"			  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:lng] ",												  "CMDbatADDcst_sht_bte_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumADDcst_bte_lng_lng;"		  ]
[ "+",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumADDcst2_bte_lng_lng;"		  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumADD_bte_lng_lng;"			  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatADD_bte_lng_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstADDbat_bte_lng_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:lng):bat[:oid,:lng] ",											  "CMDbatADDcst_bte_lng_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:wrd]):bat[:oid,:lng] ",											  "CMDbatADD_bte_wrd_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:wrd]):bat[:oid,:lng] ",													  "CMDcstADDbat_bte_wrd_lng;"				  ]
[ "+",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:wrd):bat[:oid,:lng] ",													  "CMDbatADDcst_bte_wrd_lng;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:lng] ",							  "CMDbatADD_bte_int_lng;"				  ]
[ "+",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:lng] ",									  "CMDcstADDbat_bte_int_lng;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:int):bat[:oid,:lng] ",									  "CMDbatADDcst_bte_int_lng;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:lng] ",										  "CMDbatADD_bte_sht_lng;"			  ]
[ "+",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:lng] ",												  "CMDcstADDbat_bte_sht_lng;"			  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:lng] ",												  "CMDbatADDcst_bte_sht_lng;"			  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:lng] ",							  "CMDbatADD_bte_bte_lng;"				  ]
[ "+",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:lng] ",									  "CMDcstADDbat_bte_bte_lng;"				  ]
[ "+",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:lng] ",									  "CMDbatADDcst_bte_bte_lng;"				  ]
[ "--",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",												  "CMDunaryMINMIN;"					  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",												  "CMDunaryMIN;"					  ]
[ "--",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] ",												  "CMDunaryMINMIN;"					  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] ",												  "CMDunaryMIN;"					  ]
[ "--",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] ",												  "CMDunaryMINMIN;"					  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] ",												  "CMDunaryMIN;"					  ]
[ "--",				  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd]):bat[:any_1,:wrd] ",													  "CMDunaryMINMIN;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd]):bat[:any_1,:wrd] ",													  "CMDunaryMIN;"				  ]
[ "--",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:int] ",												  "CMDunaryMINMIN;"					  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:int] ",												  "CMDunaryMIN;"					  ]
[ "--",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] ",												  "CMDunaryMINMIN;"					  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] ",												  "CMDunaryMIN;"					  ]
[ "--",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bte]):bat[:any_1,:bte] ",												  "CMDunaryMINMIN;"					  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bte]):bat[:any_1,:bte] ",												  "CMDunaryMIN;"					  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:flt,bflag:bit,cflag:bit):bat[:oid,:flt] ",							  "CMDbataccumSUBcst_flt_flt_flt;"		  ]
[ "-",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:flt],cflag:bit,bflag:bit):bat[:oid,:flt] ",							  "CMDbataccumSUBcst2_flt_flt_flt;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:flt],aflag:bit,bflag:bit):bat[:oid,:flt] ",							  "CMDbataccumSUB_flt_flt_flt;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",									  "CMDbatSUB_flt_flt_flt;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:flt]):bat[:oid,:flt] ",											  "CMDcstSUBbat_flt_flt_flt;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:flt):bat[:oid,:flt] ",											  "CMDbatSUBcst_flt_flt_flt;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],cst:dbl,bflag:bit,cflag:bit):bat[:oid,:dbl] ",							  "CMDbataccumSUBcst_dbl_dbl_dbl;"		  ]
[ "-",					  "command",	  "batcalc",	  "(cst:dbl,b:bat[:oid,:dbl],cflag:bit,bflag:bit):bat[:oid,:dbl] ",							  "CMDbataccumSUBcst2_dbl_dbl_dbl;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],c:bat[:oid,:dbl],aflag:bit,bflag:bit):bat[:oid,:dbl] ",							  "CMDbataccumSUB_dbl_dbl_dbl;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",									  "CMDbatSUB_dbl_dbl_dbl;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDcstSUBbat_dbl_dbl_dbl;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],cst:dbl):bat[:oid,:dbl] ",											  "CMDbatSUBcst_dbl_dbl_dbl;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],cst:flt,bflag:bit,cflag:bit):bat[:oid,:dbl] ",										  "CMDbataccumSUBcst_dbl_flt_dbl;"			  ]
[ "-",					  "command",	  "batcalc",	  "(cst:dbl,b:bat[:oid,:flt],cflag:bit,bflag:bit):bat[:oid,:dbl] ",								  "CMDbataccumSUBcst2_dbl_flt_dbl;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],c:bat[:oid,:flt],aflag:bit,bflag:bit):bat[:oid,:dbl] ",							  "CMDbataccumSUB_dbl_flt_dbl;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],c:bat[:oid,:flt]):bat[:oid,:dbl] ",									  "CMDbatSUB_dbl_flt_dbl;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:dbl,b:bat[:oid,:flt]):bat[:oid,:dbl] ",											  "CMDcstSUBbat_dbl_flt_dbl;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],cst:flt):bat[:oid,:dbl] ",											  "CMDbatSUBcst_dbl_flt_dbl;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:dbl,bflag:bit,cflag:bit):bat[:oid,:dbl] ",							  "CMDbataccumSUBcst_flt_dbl_dbl;"		  ]
[ "-",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:dbl],cflag:bit,bflag:bit):bat[:oid,:dbl] ",							  "CMDbataccumSUBcst2_flt_dbl_dbl;"		  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:dbl],aflag:bit,bflag:bit):bat[:oid,:dbl] ",						  "CMDbataccumSUB_flt_dbl_dbl;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",									  "CMDbatSUB_flt_dbl_dbl;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDcstSUBbat_flt_dbl_dbl;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:dbl):bat[:oid,:dbl] ",											  "CMDbatSUBcst_flt_dbl_dbl;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:dbl] ",											  "CMDbatSUB_flt_flt_dbl;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:flt]):bat[:oid,:dbl] ",													  "CMDcstSUBbat_flt_flt_dbl;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:flt):bat[:oid,:dbl] ",													  "CMDbatSUBcst_flt_flt_dbl;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte,bflag:bit,cflag:bit):bat[:oid,:bte] ",						  "CMDbataccumSUBcst_bte_bte_bte;"			  ]
[ "-",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:bte] ",						  "CMDbataccumSUBcst2_bte_bte_bte;"			  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:bte] ",					  "CMDbataccumSUB_bte_bte_bte;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:bte] ",									  "CMDbatSUB_bte_bte_bte;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:bte] ",											  "CMDcstSUBbat_bte_bte_bte;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:bte] ",											  "CMDbatSUBcst_bte_bte_bte;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",						  "CMDbataccumSUBcst_sht_sht_sht;"			  ]
[ "-",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",						  "CMDbataccumSUBcst2_sht_sht_sht;"			  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",					  "CMDbataccumSUB_sht_sht_sht;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",									  "CMDbatSUB_sht_sht_sht;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",											  "CMDcstSUBbat_sht_sht_sht;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",											  "CMDbatSUBcst_sht_sht_sht;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:bte,bflag:bit,cflag:bit):bat[:oid,:sht] ",									  "CMDbataccumSUBcst_sht_bte_sht;"		  ]
[ "-",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:sht] ",									  "CMDbataccumSUBcst2_sht_bte_sht;"		  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:sht] ",						  "CMDbataccumSUB_sht_bte_sht;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:sht] ",									  "CMDbatSUB_sht_bte_sht;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:sht] ",											  "CMDcstSUBbat_sht_bte_sht;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:sht] ",											  "CMDbatSUBcst_sht_bte_sht;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",							  "CMDbataccumSUBcst_bte_sht_sht;"		  ]
[ "-",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",							  "CMDbataccumSUBcst2_bte_sht_sht;"		  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",						  "CMDbataccumSUB_bte_sht_sht;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:sht] ",									  "CMDbatSUB_bte_sht_sht;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:sht] ",											  "CMDcstSUBbat_bte_sht_sht;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:sht] ",											  "CMDbatSUBcst_bte_sht_sht;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:sht] ",							  "CMDbatSUB_bte_bte_sht;"				  ]
[ "-",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:sht] ",									  "CMDcstSUBbat_bte_bte_sht;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:sht] ",									  "CMDbatSUBcst_bte_bte_sht;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",							  "CMDbataccumSUBcst_int_int_int;"		  ]
[ "-",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumSUBcst2_int_int_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumSUB_int_int_int;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",									  "CMDbatSUB_int_int_int;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",											  "CMDcstSUBbat_int_int_int;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",											  "CMDbatSUBcst_int_int_int;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht,bflag:bit,cflag:bit):bat[:oid,:int] ",						  "CMDbataccumSUBcst_int_sht_int;"			  ]
[ "-",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:int] ",						  "CMDbataccumSUBcst2_int_sht_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:int] ",						  "CMDbataccumSUB_int_sht_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:int] ",									  "CMDbatSUB_int_sht_int;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:int] ",											  "CMDcstSUBbat_int_sht_int;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht):bat[:oid,:int] ",											  "CMDbatSUBcst_int_sht_int;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:bte,bflag:bit,cflag:bit):bat[:oid,:int] ",									  "CMDbataccumSUBcst_int_bte_int;"		  ]
[ "-",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:int] ",									  "CMDbataccumSUBcst2_int_bte_int;"		  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:int] ",						  "CMDbataccumSUB_int_bte_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:int] ",									  "CMDbatSUB_int_bte_int;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:int] ",											  "CMDcstSUBbat_int_bte_int;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:bte):bat[:oid,:int] ",											  "CMDbatSUBcst_int_bte_int;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",							  "CMDbataccumSUBcst_sht_int_int;"		  ]
[ "-",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumSUBcst2_sht_int_int;"		  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",						  "CMDbataccumSUB_sht_int_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",									  "CMDbatSUB_sht_int_int;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:int] ",											  "CMDcstSUBbat_sht_int_int;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int):bat[:oid,:int] ",											  "CMDbatSUBcst_sht_int_int;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:int] ",							  "CMDbatSUB_sht_sht_int;"				  ]
[ "-",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:int] ",									  "CMDcstSUBbat_sht_sht_int;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:int] ",									  "CMDbatSUBcst_sht_sht_int;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:int] ",										  "CMDbatSUB_sht_bte_int;"			  ]
[ "-",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:int] ",												  "CMDcstSUBbat_sht_bte_int;"			  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:int] ",												  "CMDbatSUBcst_sht_bte_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",							  "CMDbataccumSUBcst_bte_int_int;"		  ]
[ "-",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumSUBcst2_bte_int_int;"		  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",						  "CMDbataccumSUB_bte_int_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:int] ",									  "CMDbatSUB_bte_int_int;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:int] ",											  "CMDcstSUBbat_bte_int_int;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:int):bat[:oid,:int] ",											  "CMDbatSUBcst_bte_int_int;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:int] ",							  "CMDbatSUB_bte_sht_int;"				  ]
[ "-",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:int] ",									  "CMDcstSUBbat_bte_sht_int;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:int] ",									  "CMDbatSUBcst_bte_sht_int;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:int] ",										  "CMDbatSUB_bte_bte_int;"			  ]
[ "-",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:int] ",												  "CMDcstSUBbat_bte_bte_int;"			  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:int] ",												  "CMDbatSUBcst_bte_bte_int;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumSUBcst_wrd_wrd_wrd;"			  ]
[ "-",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumSUBcst2_wrd_wrd_wrd;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",									  "CMDbataccumSUB_wrd_wrd_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",									  "CMDbatSUB_wrd_wrd_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",											  "CMDcstSUBbat_wrd_wrd_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:wrd] ",											  "CMDbatSUBcst_wrd_wrd_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:int,bflag:bit,cflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumSUBcst_wrd_int_wrd;"			  ]
[ "-",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumSUBcst2_wrd_int_wrd;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumSUB_wrd_int_wrd;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:int]):bat[:oid,:wrd] ",									  "CMDbatSUB_wrd_int_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] ",											  "CMDcstSUBbat_wrd_int_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:int):bat[:oid,:wrd] ",											  "CMDbatSUBcst_wrd_int_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:sht,bflag:bit,cflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumSUBcst_wrd_sht_wrd;"			  ]
[ "-",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumSUBcst2_wrd_sht_wrd;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumSUB_wrd_sht_wrd;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:sht]):bat[:oid,:wrd] ",									  "CMDbatSUB_wrd_sht_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:sht]):bat[:oid,:wrd] ",											  "CMDcstSUBbat_wrd_sht_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:sht):bat[:oid,:wrd] ",											  "CMDbatSUBcst_wrd_sht_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:bte,bflag:bit,cflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumSUBcst_wrd_bte_wrd;"			  ]
[ "-",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumSUBcst2_wrd_bte_wrd;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumSUB_wrd_bte_wrd;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:bte]):bat[:oid,:wrd] ",									  "CMDbatSUB_wrd_bte_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:bte]):bat[:oid,:wrd] ",											  "CMDcstSUBbat_wrd_bte_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:bte):bat[:oid,:wrd] ",											  "CMDbatSUBcst_wrd_bte_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumSUBcst_int_wrd_wrd;"		  ]
[ "-",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumSUBcst2_int_wrd_wrd;"		  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumSUB_int_wrd_wrd;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",									  "CMDbatSUB_int_wrd_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",											  "CMDcstSUBbat_int_wrd_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:wrd):bat[:oid,:wrd] ",											  "CMDbatSUBcst_int_wrd_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:wrd] ",											  "CMDbatSUB_int_int_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:wrd] ",													  "CMDcstSUBbat_int_int_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:wrd] ",													  "CMDbatSUBcst_int_int_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:wrd] ",											  "CMDbatSUB_int_sht_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:wrd] ",													  "CMDcstSUBbat_int_sht_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht):bat[:oid,:wrd] ",													  "CMDbatSUBcst_int_sht_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:wrd] ",											  "CMDbatSUB_int_bte_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:wrd] ",													  "CMDcstSUBbat_int_bte_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:bte):bat[:oid,:wrd] ",													  "CMDbatSUBcst_int_bte_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumSUBcst_sht_wrd_wrd;"		  ]
[ "-",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumSUBcst2_sht_wrd_wrd;"		  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumSUB_sht_wrd_wrd;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",									  "CMDbatSUB_sht_wrd_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",											  "CMDcstSUBbat_sht_wrd_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:wrd):bat[:oid,:wrd] ",											  "CMDbatSUBcst_sht_wrd_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:wrd] ",											  "CMDbatSUB_sht_int_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:wrd] ",													  "CMDcstSUBbat_sht_int_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int):bat[:oid,:wrd] ",													  "CMDbatSUBcst_sht_int_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:wrd] ",											  "CMDbatSUB_sht_sht_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:wrd] ",													  "CMDcstSUBbat_sht_sht_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:wrd] ",													  "CMDbatSUBcst_sht_sht_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:wrd] ",											  "CMDbatSUB_sht_bte_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:wrd] ",													  "CMDcstSUBbat_sht_bte_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:wrd] ",													  "CMDbatSUBcst_sht_bte_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumSUBcst_bte_wrd_wrd;"		  ]
[ "-",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumSUBcst2_bte_wrd_wrd;"		  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumSUB_bte_wrd_wrd;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",									  "CMDbatSUB_bte_wrd_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",											  "CMDcstSUBbat_bte_wrd_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:wrd):bat[:oid,:wrd] ",											  "CMDbatSUBcst_bte_wrd_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:wrd] ",											  "CMDbatSUB_bte_int_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:wrd] ",													  "CMDcstSUBbat_bte_int_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:int):bat[:oid,:wrd] ",													  "CMDbatSUBcst_bte_int_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:wrd] ",											  "CMDbatSUB_bte_sht_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:wrd] ",													  "CMDcstSUBbat_bte_sht_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:wrd] ",													  "CMDbatSUBcst_bte_sht_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:wrd] ",											  "CMDbatSUB_bte_bte_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:wrd] ",													  "CMDcstSUBbat_bte_bte_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:wrd] ",													  "CMDbatSUBcst_bte_bte_wrd;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumSUBcst_lng_lng_lng;"		  ]
[ "-",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumSUBcst2_lng_lng_lng;"		  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumSUB_lng_lng_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatSUB_lng_lng_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstSUBbat_lng_lng_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",											  "CMDbatSUBcst_lng_lng_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:lng] ",										  "CMDbataccumSUBcst_lng_wrd_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:lng] ",										  "CMDbataccumSUBcst2_lng_wrd_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumSUB_lng_wrd_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:wrd]):bat[:oid,:lng] ",									  "CMDbatSUB_lng_wrd_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:wrd]):bat[:oid,:lng] ",											  "CMDcstSUBbat_lng_wrd_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:wrd):bat[:oid,:lng] ",											  "CMDbatSUBcst_lng_wrd_lng;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:int,bflag:bit,cflag:bit):bat[:oid,:lng] ",						  "CMDbataccumSUBcst_lng_int_lng;"			  ]
[ "-",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumSUBcst2_lng_int_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumSUB_lng_int_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",									  "CMDbatSUB_lng_int_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:int]):bat[:oid,:lng] ",											  "CMDcstSUBbat_lng_int_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:int):bat[:oid,:lng] ",											  "CMDbatSUBcst_lng_int_lng;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:sht,bflag:bit,cflag:bit):bat[:oid,:lng] ",						  "CMDbataccumSUBcst_lng_sht_lng;"			  ]
[ "-",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumSUBcst2_lng_sht_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumSUB_lng_sht_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:sht]):bat[:oid,:lng] ",									  "CMDbatSUB_lng_sht_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:sht]):bat[:oid,:lng] ",											  "CMDcstSUBbat_lng_sht_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:sht):bat[:oid,:lng] ",											  "CMDbatSUBcst_lng_sht_lng;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:bte,bflag:bit,cflag:bit):bat[:oid,:lng] ",									  "CMDbataccumSUBcst_lng_bte_lng;"		  ]
[ "-",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:lng] ",									  "CMDbataccumSUBcst2_lng_bte_lng;"		  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumSUB_lng_bte_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:bte]):bat[:oid,:lng] ",									  "CMDbatSUB_lng_bte_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:bte]):bat[:oid,:lng] ",											  "CMDcstSUBbat_lng_bte_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:bte):bat[:oid,:lng] ",											  "CMDbatSUBcst_lng_bte_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumSUBcst_wrd_lng_lng;"		  ]
[ "-",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumSUBcst2_wrd_lng_lng;"		  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumSUB_wrd_lng_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatSUB_wrd_lng_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstSUBbat_wrd_lng_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:lng):bat[:oid,:lng] ",											  "CMDbatSUBcst_wrd_lng_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:lng] ",											  "CMDbatSUB_wrd_wrd_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:lng] ",													  "CMDcstSUBbat_wrd_wrd_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:lng] ",													  "CMDbatSUBcst_wrd_wrd_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:int]):bat[:oid,:lng] ",											  "CMDbatSUB_wrd_int_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:int]):bat[:oid,:lng] ",													  "CMDcstSUBbat_wrd_int_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:int):bat[:oid,:lng] ",													  "CMDbatSUBcst_wrd_int_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:sht]):bat[:oid,:lng] ",											  "CMDbatSUB_wrd_sht_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:sht]):bat[:oid,:lng] ",													  "CMDcstSUBbat_wrd_sht_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:sht):bat[:oid,:lng] ",													  "CMDbatSUBcst_wrd_sht_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:bte]):bat[:oid,:lng] ",											  "CMDbatSUB_wrd_bte_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:bte]):bat[:oid,:lng] ",													  "CMDcstSUBbat_wrd_bte_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:bte):bat[:oid,:lng] ",													  "CMDbatSUBcst_wrd_bte_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumSUBcst_int_lng_lng;"		  ]
[ "-",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumSUBcst2_int_lng_lng;"		  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumSUB_int_lng_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatSUB_int_lng_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstSUBbat_int_lng_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:lng):bat[:oid,:lng] ",											  "CMDbatSUBcst_int_lng_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:wrd]):bat[:oid,:lng] ",											  "CMDbatSUB_int_wrd_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:wrd]):bat[:oid,:lng] ",													  "CMDcstSUBbat_int_wrd_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:wrd):bat[:oid,:lng] ",													  "CMDbatSUBcst_int_wrd_lng;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:lng] ",										  "CMDbatSUB_int_int_lng;"			  ]
[ "-",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:lng] ",												  "CMDcstSUBbat_int_int_lng;"			  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:lng] ",												  "CMDbatSUBcst_int_int_lng;"			  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:lng] ",							  "CMDbatSUB_int_sht_lng;"				  ]
[ "-",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:lng] ",									  "CMDcstSUBbat_int_sht_lng;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht):bat[:oid,:lng] ",									  "CMDbatSUBcst_int_sht_lng;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:lng] ",										  "CMDbatSUB_int_bte_lng;"			  ]
[ "-",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:lng] ",												  "CMDcstSUBbat_int_bte_lng;"			  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:bte):bat[:oid,:lng] ",												  "CMDbatSUBcst_int_bte_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumSUBcst_sht_lng_lng;"		  ]
[ "-",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumSUBcst2_sht_lng_lng;"		  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumSUB_sht_lng_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatSUB_sht_lng_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstSUBbat_sht_lng_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:lng):bat[:oid,:lng] ",											  "CMDbatSUBcst_sht_lng_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:wrd]):bat[:oid,:lng] ",											  "CMDbatSUB_sht_wrd_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:wrd]):bat[:oid,:lng] ",													  "CMDcstSUBbat_sht_wrd_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:wrd):bat[:oid,:lng] ",													  "CMDbatSUBcst_sht_wrd_lng;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:lng] ",							  "CMDbatSUB_sht_int_lng;"				  ]
[ "-",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:lng] ",									  "CMDcstSUBbat_sht_int_lng;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int):bat[:oid,:lng] ",									  "CMDbatSUBcst_sht_int_lng;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:lng] ",							  "CMDbatSUB_sht_sht_lng;"				  ]
[ "-",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:lng] ",									  "CMDcstSUBbat_sht_sht_lng;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:lng] ",									  "CMDbatSUBcst_sht_sht_lng;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:lng] ",										  "CMDbatSUB_sht_bte_lng;"			  ]
[ "-",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:lng] ",												  "CMDcstSUBbat_sht_bte_lng;"			  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:lng] ",												  "CMDbatSUBcst_sht_bte_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumSUBcst_bte_lng_lng;"		  ]
[ "-",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumSUBcst2_bte_lng_lng;"		  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumSUB_bte_lng_lng;"			  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatSUB_bte_lng_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstSUBbat_bte_lng_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:lng):bat[:oid,:lng] ",											  "CMDbatSUBcst_bte_lng_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:wrd]):bat[:oid,:lng] ",											  "CMDbatSUB_bte_wrd_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:wrd]):bat[:oid,:lng] ",													  "CMDcstSUBbat_bte_wrd_lng;"				  ]
[ "-",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:wrd):bat[:oid,:lng] ",													  "CMDbatSUBcst_bte_wrd_lng;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:lng] ",							  "CMDbatSUB_bte_int_lng;"				  ]
[ "-",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:lng] ",									  "CMDcstSUBbat_bte_int_lng;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:int):bat[:oid,:lng] ",									  "CMDbatSUBcst_bte_int_lng;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:lng] ",										  "CMDbatSUB_bte_sht_lng;"			  ]
[ "-",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:lng] ",												  "CMDcstSUBbat_bte_sht_lng;"			  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:lng] ",												  "CMDbatSUBcst_bte_sht_lng;"			  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:lng] ",							  "CMDbatSUB_bte_bte_lng;"				  ]
[ "-",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:lng] ",									  "CMDcstSUBbat_bte_bte_lng;"				  ]
[ "-",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:lng] ",									  "CMDbatSUBcst_bte_bte_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:flt,bflag:bit,cflag:bit):bat[:oid,:flt] ",							  "CMDbataccumDIVcst_flt_flt_flt;"		  ]
[ "/",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:flt],cflag:bit,bflag:bit):bat[:oid,:flt] ",							  "CMDbataccumDIVcst2_flt_flt_flt;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:flt],aflag:bit,bflag:bit):bat[:oid,:flt] ",							  "CMDbataccumDIV_flt_flt_flt;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:flt] ",									  "CMDbatDIV_flt_flt_flt;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:flt]):bat[:oid,:flt] ",											  "CMDcstDIVbat_flt_flt_flt;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:flt):bat[:oid,:flt] ",											  "CMDbatDIVcst_flt_flt_flt;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],cst:dbl,bflag:bit,cflag:bit):bat[:oid,:dbl] ",							  "CMDbataccumDIVcst_dbl_dbl_dbl;"		  ]
[ "/",					  "command",	  "batcalc",	  "(cst:dbl,b:bat[:oid,:dbl],cflag:bit,bflag:bit):bat[:oid,:dbl] ",							  "CMDbataccumDIVcst2_dbl_dbl_dbl;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],c:bat[:oid,:dbl],aflag:bit,bflag:bit):bat[:oid,:dbl] ",							  "CMDbataccumDIV_dbl_dbl_dbl;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",									  "CMDbatDIV_dbl_dbl_dbl;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:dbl,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDcstDIVbat_dbl_dbl_dbl;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],cst:dbl):bat[:oid,:dbl] ",											  "CMDbatDIVcst_dbl_dbl_dbl;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],cst:flt,bflag:bit,cflag:bit):bat[:oid,:dbl] ",										  "CMDbataccumDIVcst_dbl_flt_dbl;"			  ]
[ "/",					  "command",	  "batcalc",	  "(cst:dbl,b:bat[:oid,:flt],cflag:bit,bflag:bit):bat[:oid,:dbl] ",										  "CMDbataccumDIVcst2_dbl_flt_dbl;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],c:bat[:oid,:flt],aflag:bit,bflag:bit):bat[:oid,:dbl] ",						  "CMDbataccumDIV_dbl_flt_dbl;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],c:bat[:oid,:flt]):bat[:oid,:dbl] ",									  "CMDbatDIV_dbl_flt_dbl;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:dbl,b:bat[:oid,:flt]):bat[:oid,:dbl] ",											  "CMDcstDIVbat_dbl_flt_dbl;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:dbl],cst:flt):bat[:oid,:dbl] ",											  "CMDbatDIVcst_dbl_flt_dbl;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:dbl,bflag:bit,cflag:bit):bat[:oid,:dbl] ",							  "CMDbataccumDIVcst_flt_dbl_dbl;"		  ]
[ "/",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:dbl],cflag:bit,bflag:bit):bat[:oid,:dbl] ",							  "CMDbataccumDIVcst2_flt_dbl_dbl;"		  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:dbl],aflag:bit,bflag:bit):bat[:oid,:dbl] ",						  "CMDbataccumDIV_flt_dbl_dbl;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:dbl]):bat[:oid,:dbl] ",									  "CMDbatDIV_flt_dbl_dbl;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:dbl]):bat[:oid,:dbl] ",											  "CMDcstDIVbat_flt_dbl_dbl;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:dbl):bat[:oid,:dbl] ",											  "CMDbatDIVcst_flt_dbl_dbl;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],c:bat[:oid,:flt]):bat[:oid,:dbl] ",											  "CMDbatDIV_flt_flt_dbl;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:oid,:flt]):bat[:oid,:dbl] ",													  "CMDcstDIVbat_flt_flt_dbl;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:flt],cst:flt):bat[:oid,:dbl] ",													  "CMDbatDIVcst_flt_flt_dbl;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte,bflag:bit,cflag:bit):bat[:oid,:bte] ",						  "CMDbataccumDIVcst_bte_bte_bte;"			  ]
[ "/",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:bte] ",						  "CMDbataccumDIVcst2_bte_bte_bte;"			  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:bte] ",					  "CMDbataccumDIV_bte_bte_bte;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:bte] ",									  "CMDbatDIV_bte_bte_bte;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:bte] ",											  "CMDcstDIVbat_bte_bte_bte;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:bte] ",											  "CMDbatDIVcst_bte_bte_bte;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",						  "CMDbataccumDIVcst_sht_sht_sht;"			  ]
[ "/",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",						  "CMDbataccumDIVcst2_sht_sht_sht;"			  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",					  "CMDbataccumDIV_sht_sht_sht;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",									  "CMDbatDIV_sht_sht_sht;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",											  "CMDcstDIVbat_sht_sht_sht;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",											  "CMDbatDIVcst_sht_sht_sht;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:bte,bflag:bit,cflag:bit):bat[:oid,:sht] ",									  "CMDbataccumDIVcst_sht_bte_sht;"		  ]
[ "/",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:sht] ",									  "CMDbataccumDIVcst2_sht_bte_sht;"		  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:sht] ",						  "CMDbataccumDIV_sht_bte_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:sht] ",									  "CMDbatDIV_sht_bte_sht;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:sht] ",											  "CMDcstDIVbat_sht_bte_sht;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:sht] ",											  "CMDbatDIVcst_sht_bte_sht;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",							  "CMDbataccumDIVcst_bte_sht_sht;"		  ]
[ "/",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",							  "CMDbataccumDIVcst2_bte_sht_sht;"		  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",						  "CMDbataccumDIV_bte_sht_sht;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:sht] ",									  "CMDbatDIV_bte_sht_sht;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:sht] ",											  "CMDcstDIVbat_bte_sht_sht;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:sht] ",											  "CMDbatDIVcst_bte_sht_sht;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:sht] ",							  "CMDbatDIV_bte_bte_sht;"				  ]
[ "/",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:sht] ",									  "CMDcstDIVbat_bte_bte_sht;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:sht] ",									  "CMDbatDIVcst_bte_bte_sht;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",							  "CMDbataccumDIVcst_int_int_int;"		  ]
[ "/",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumDIVcst2_int_int_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumDIV_int_int_int;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",									  "CMDbatDIV_int_int_int;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",											  "CMDcstDIVbat_int_int_int;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",											  "CMDbatDIVcst_int_int_int;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht,bflag:bit,cflag:bit):bat[:oid,:int] ",						  "CMDbataccumDIVcst_int_sht_int;"			  ]
[ "/",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:int] ",						  "CMDbataccumDIVcst2_int_sht_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:int] ",						  "CMDbataccumDIV_int_sht_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:int] ",									  "CMDbatDIV_int_sht_int;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:int] ",											  "CMDcstDIVbat_int_sht_int;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht):bat[:oid,:int] ",											  "CMDbatDIVcst_int_sht_int;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:bte,bflag:bit,cflag:bit):bat[:oid,:int] ",									  "CMDbataccumDIVcst_int_bte_int;"		  ]
[ "/",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:int] ",									  "CMDbataccumDIVcst2_int_bte_int;"		  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:int] ",						  "CMDbataccumDIV_int_bte_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:int] ",									  "CMDbatDIV_int_bte_int;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:int] ",											  "CMDcstDIVbat_int_bte_int;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:bte):bat[:oid,:int] ",											  "CMDbatDIVcst_int_bte_int;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",							  "CMDbataccumDIVcst_sht_int_int;"		  ]
[ "/",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumDIVcst2_sht_int_int;"		  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",						  "CMDbataccumDIV_sht_int_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:int] ",									  "CMDbatDIV_sht_int_int;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:int] ",											  "CMDcstDIVbat_sht_int_int;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int):bat[:oid,:int] ",											  "CMDbatDIVcst_sht_int_int;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:int] ",							  "CMDbatDIV_sht_sht_int;"				  ]
[ "/",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:int] ",									  "CMDcstDIVbat_sht_sht_int;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:int] ",									  "CMDbatDIVcst_sht_sht_int;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:int] ",										  "CMDbatDIV_sht_bte_int;"			  ]
[ "/",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:int] ",												  "CMDcstDIVbat_sht_bte_int;"			  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:int] ",												  "CMDbatDIVcst_sht_bte_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",							  "CMDbataccumDIVcst_bte_int_int;"		  ]
[ "/",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumDIVcst2_bte_int_int;"		  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",						  "CMDbataccumDIV_bte_int_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:int] ",									  "CMDbatDIV_bte_int_int;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:int] ",											  "CMDcstDIVbat_bte_int_int;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:int):bat[:oid,:int] ",											  "CMDbatDIVcst_bte_int_int;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:int] ",							  "CMDbatDIV_bte_sht_int;"				  ]
[ "/",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:int] ",									  "CMDcstDIVbat_bte_sht_int;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:int] ",									  "CMDbatDIVcst_bte_sht_int;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:int] ",										  "CMDbatDIV_bte_bte_int;"			  ]
[ "/",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:int] ",												  "CMDcstDIVbat_bte_bte_int;"			  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:int] ",												  "CMDbatDIVcst_bte_bte_int;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumDIVcst_wrd_wrd_wrd;"			  ]
[ "/",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumDIVcst2_wrd_wrd_wrd;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",									  "CMDbataccumDIV_wrd_wrd_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",									  "CMDbatDIV_wrd_wrd_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",											  "CMDcstDIVbat_wrd_wrd_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:wrd] ",											  "CMDbatDIVcst_wrd_wrd_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:int,bflag:bit,cflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumDIVcst_wrd_int_wrd;"			  ]
[ "/",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumDIVcst2_wrd_int_wrd;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumDIV_wrd_int_wrd;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:int]):bat[:oid,:wrd] ",									  "CMDbatDIV_wrd_int_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] ",											  "CMDcstDIVbat_wrd_int_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:int):bat[:oid,:wrd] ",											  "CMDbatDIVcst_wrd_int_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:sht,bflag:bit,cflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumDIVcst_wrd_sht_wrd;"			  ]
[ "/",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumDIVcst2_wrd_sht_wrd;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumDIV_wrd_sht_wrd;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:sht]):bat[:oid,:wrd] ",									  "CMDbatDIV_wrd_sht_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:sht]):bat[:oid,:wrd] ",											  "CMDcstDIVbat_wrd_sht_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:sht):bat[:oid,:wrd] ",											  "CMDbatDIVcst_wrd_sht_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:bte,bflag:bit,cflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumDIVcst_wrd_bte_wrd;"			  ]
[ "/",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:wrd] ",										  "CMDbataccumDIVcst2_wrd_bte_wrd;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumDIV_wrd_bte_wrd;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:bte]):bat[:oid,:wrd] ",									  "CMDbatDIV_wrd_bte_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:bte]):bat[:oid,:wrd] ",											  "CMDcstDIVbat_wrd_bte_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:bte):bat[:oid,:wrd] ",											  "CMDbatDIVcst_wrd_bte_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumDIVcst_int_wrd_wrd;"		  ]
[ "/",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumDIVcst2_int_wrd_wrd;"		  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumDIV_int_wrd_wrd;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",									  "CMDbatDIV_int_wrd_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",											  "CMDcstDIVbat_int_wrd_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:wrd):bat[:oid,:wrd] ",											  "CMDbatDIVcst_int_wrd_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:wrd] ",											  "CMDbatDIV_int_int_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:wrd] ",													  "CMDcstDIVbat_int_int_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:wrd] ",													  "CMDbatDIVcst_int_int_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:wrd] ",											  "CMDbatDIV_int_sht_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:wrd] ",													  "CMDcstDIVbat_int_sht_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht):bat[:oid,:wrd] ",													  "CMDbatDIVcst_int_sht_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:wrd] ",											  "CMDbatDIV_int_bte_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:wrd] ",													  "CMDcstDIVbat_int_bte_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:bte):bat[:oid,:wrd] ",													  "CMDbatDIVcst_int_bte_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumDIVcst_sht_wrd_wrd;"		  ]
[ "/",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumDIVcst2_sht_wrd_wrd;"		  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumDIV_sht_wrd_wrd;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",									  "CMDbatDIV_sht_wrd_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",											  "CMDcstDIVbat_sht_wrd_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:wrd):bat[:oid,:wrd] ",											  "CMDbatDIVcst_sht_wrd_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:wrd] ",											  "CMDbatDIV_sht_int_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:wrd] ",													  "CMDcstDIVbat_sht_int_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int):bat[:oid,:wrd] ",													  "CMDbatDIVcst_sht_int_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:wrd] ",											  "CMDbatDIV_sht_sht_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:wrd] ",													  "CMDcstDIVbat_sht_sht_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:wrd] ",													  "CMDbatDIVcst_sht_sht_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:wrd] ",											  "CMDbatDIV_sht_bte_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:wrd] ",													  "CMDcstDIVbat_sht_bte_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:wrd] ",													  "CMDbatDIVcst_sht_bte_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumDIVcst_bte_wrd_wrd;"		  ]
[ "/",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumDIVcst2_bte_wrd_wrd;"		  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumDIV_bte_wrd_wrd;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",									  "CMDbatDIV_bte_wrd_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",											  "CMDcstDIVbat_bte_wrd_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:wrd):bat[:oid,:wrd] ",											  "CMDbatDIVcst_bte_wrd_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:wrd] ",											  "CMDbatDIV_bte_int_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:wrd] ",													  "CMDcstDIVbat_bte_int_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:int):bat[:oid,:wrd] ",													  "CMDbatDIVcst_bte_int_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:wrd] ",											  "CMDbatDIV_bte_sht_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:wrd] ",													  "CMDcstDIVbat_bte_sht_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:wrd] ",													  "CMDbatDIVcst_bte_sht_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:wrd] ",											  "CMDbatDIV_bte_bte_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:wrd] ",													  "CMDcstDIVbat_bte_bte_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:wrd] ",													  "CMDbatDIVcst_bte_bte_wrd;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumDIVcst_lng_lng_lng;"		  ]
[ "/",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumDIVcst2_lng_lng_lng;"		  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumDIV_lng_lng_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatDIV_lng_lng_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstDIVbat_lng_lng_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",											  "CMDbatDIVcst_lng_lng_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:lng] ",										  "CMDbataccumDIVcst_lng_wrd_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:lng] ",										  "CMDbataccumDIVcst2_lng_wrd_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumDIV_lng_wrd_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:wrd]):bat[:oid,:lng] ",									  "CMDbatDIV_lng_wrd_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:wrd]):bat[:oid,:lng] ",											  "CMDcstDIVbat_lng_wrd_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:wrd):bat[:oid,:lng] ",											  "CMDbatDIVcst_lng_wrd_lng;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:int,bflag:bit,cflag:bit):bat[:oid,:lng] ",						  "CMDbataccumDIVcst_lng_int_lng;"			  ]
[ "/",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumDIVcst2_lng_int_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumDIV_lng_int_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",									  "CMDbatDIV_lng_int_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:int]):bat[:oid,:lng] ",											  "CMDcstDIVbat_lng_int_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:int):bat[:oid,:lng] ",											  "CMDbatDIVcst_lng_int_lng;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:sht,bflag:bit,cflag:bit):bat[:oid,:lng] ",						  "CMDbataccumDIVcst_lng_sht_lng;"			  ]
[ "/",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumDIVcst2_lng_sht_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumDIV_lng_sht_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:sht]):bat[:oid,:lng] ",									  "CMDbatDIV_lng_sht_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:sht]):bat[:oid,:lng] ",											  "CMDcstDIVbat_lng_sht_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:sht):bat[:oid,:lng] ",											  "CMDbatDIVcst_lng_sht_lng;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:bte,bflag:bit,cflag:bit):bat[:oid,:lng] ",									  "CMDbataccumDIVcst_lng_bte_lng;"		  ]
[ "/",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:lng] ",									  "CMDbataccumDIVcst2_lng_bte_lng;"		  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumDIV_lng_bte_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:bte]):bat[:oid,:lng] ",									  "CMDbatDIV_lng_bte_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:bte]):bat[:oid,:lng] ",											  "CMDcstDIVbat_lng_bte_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:bte):bat[:oid,:lng] ",											  "CMDbatDIVcst_lng_bte_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumDIVcst_wrd_lng_lng;"		  ]
[ "/",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumDIVcst2_wrd_lng_lng;"		  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumDIV_wrd_lng_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatDIV_wrd_lng_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstDIVbat_wrd_lng_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:lng):bat[:oid,:lng] ",											  "CMDbatDIVcst_wrd_lng_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:lng] ",											  "CMDbatDIV_wrd_wrd_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:lng] ",													  "CMDcstDIVbat_wrd_wrd_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:lng] ",													  "CMDbatDIVcst_wrd_wrd_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:int]):bat[:oid,:lng] ",											  "CMDbatDIV_wrd_int_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:int]):bat[:oid,:lng] ",													  "CMDcstDIVbat_wrd_int_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:int):bat[:oid,:lng] ",													  "CMDbatDIVcst_wrd_int_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:sht]):bat[:oid,:lng] ",											  "CMDbatDIV_wrd_sht_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:sht]):bat[:oid,:lng] ",													  "CMDcstDIVbat_wrd_sht_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:sht):bat[:oid,:lng] ",													  "CMDbatDIVcst_wrd_sht_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:bte]):bat[:oid,:lng] ",											  "CMDbatDIV_wrd_bte_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:bte]):bat[:oid,:lng] ",													  "CMDcstDIVbat_wrd_bte_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:bte):bat[:oid,:lng] ",													  "CMDbatDIVcst_wrd_bte_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumDIVcst_int_lng_lng;"		  ]
[ "/",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumDIVcst2_int_lng_lng;"		  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumDIV_int_lng_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatDIV_int_lng_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstDIVbat_int_lng_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:lng):bat[:oid,:lng] ",											  "CMDbatDIVcst_int_lng_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:wrd]):bat[:oid,:lng] ",											  "CMDbatDIV_int_wrd_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:wrd]):bat[:oid,:lng] ",													  "CMDcstDIVbat_int_wrd_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:wrd):bat[:oid,:lng] ",													  "CMDbatDIVcst_int_wrd_lng;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:lng] ",										  "CMDbatDIV_int_int_lng;"			  ]
[ "/",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:lng] ",												  "CMDcstDIVbat_int_int_lng;"			  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:lng] ",												  "CMDbatDIVcst_int_int_lng;"			  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:sht]):bat[:oid,:lng] ",							  "CMDbatDIV_int_sht_lng;"				  ]
[ "/",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:sht]):bat[:oid,:lng] ",									  "CMDcstDIVbat_int_sht_lng;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:sht):bat[:oid,:lng] ",									  "CMDbatDIVcst_int_sht_lng;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:bte]):bat[:oid,:lng] ",										  "CMDbatDIV_int_bte_lng;"			  ]
[ "/",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:bte]):bat[:oid,:lng] ",												  "CMDcstDIVbat_int_bte_lng;"			  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:bte):bat[:oid,:lng] ",												  "CMDbatDIVcst_int_bte_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumDIVcst_sht_lng_lng;"		  ]
[ "/",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumDIVcst2_sht_lng_lng;"		  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumDIV_sht_lng_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatDIV_sht_lng_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstDIVbat_sht_lng_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:lng):bat[:oid,:lng] ",											  "CMDbatDIVcst_sht_lng_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:wrd]):bat[:oid,:lng] ",											  "CMDbatDIV_sht_wrd_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:wrd]):bat[:oid,:lng] ",													  "CMDcstDIVbat_sht_wrd_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:wrd):bat[:oid,:lng] ",													  "CMDbatDIVcst_sht_wrd_lng;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:lng] ",							  "CMDbatDIV_sht_int_lng;"				  ]
[ "/",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:lng] ",									  "CMDcstDIVbat_sht_int_lng;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int):bat[:oid,:lng] ",									  "CMDbatDIVcst_sht_int_lng;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:lng] ",							  "CMDbatDIV_sht_sht_lng;"				  ]
[ "/",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:lng] ",									  "CMDcstDIVbat_sht_sht_lng;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:lng] ",									  "CMDbatDIVcst_sht_sht_lng;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:bte]):bat[:oid,:lng] ",										  "CMDbatDIV_sht_bte_lng;"			  ]
[ "/",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:bte]):bat[:oid,:lng] ",												  "CMDcstDIVbat_sht_bte_lng;"			  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:bte):bat[:oid,:lng] ",												  "CMDbatDIVcst_sht_bte_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumDIVcst_bte_lng_lng;"		  ]
[ "/",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumDIVcst2_bte_lng_lng;"		  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumDIV_bte_lng_lng;"			  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatDIV_bte_lng_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstDIVbat_bte_lng_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:lng):bat[:oid,:lng] ",											  "CMDbatDIVcst_bte_lng_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:wrd]):bat[:oid,:lng] ",											  "CMDbatDIV_bte_wrd_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:wrd]):bat[:oid,:lng] ",													  "CMDcstDIVbat_bte_wrd_lng;"				  ]
[ "/",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:wrd):bat[:oid,:lng] ",													  "CMDbatDIVcst_bte_wrd_lng;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:lng] ",							  "CMDbatDIV_bte_int_lng;"				  ]
[ "/",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:lng] ",									  "CMDcstDIVbat_bte_int_lng;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:int):bat[:oid,:lng] ",									  "CMDbatDIVcst_bte_int_lng;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:sht]):bat[:oid,:lng] ",										  "CMDbatDIV_bte_sht_lng;"			  ]
[ "/",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:sht]):bat[:oid,:lng] ",												  "CMDcstDIVbat_bte_sht_lng;"			  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:sht):bat[:oid,:lng] ",												  "CMDbatDIVcst_bte_sht_lng;"			  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:lng] ",							  "CMDbatDIV_bte_bte_lng;"				  ]
[ "/",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:lng] ",									  "CMDcstDIVbat_bte_bte_lng;"				  ]
[ "/",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:lng] ",									  "CMDbatDIVcst_bte_bte_lng;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",								  "MTIMEaccum_timestamp_cst_LE;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",								  "MTIMEaccum_timestamp_LE_cst;"			  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",						  "MTIMEaccum_timestamp_LE;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",										  "MTIMEbat_timestamp_cst_LE;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",										  "MTIMEbat_timestamp_LE_cst;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",									  "MTIMEbat_timestamp_LE;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:bat[:oid,:timestamp]):bat[:oid,:bit] ",									  "MTIMEbat_timestamp_LE;"				  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",								  "MTIMEaccum_timestamp_cst_LT;"			  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",								  "MTIMEaccum_timestamp_LT_cst;"			  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",						  "MTIMEaccum_timestamp_LT;"				  ]
[ "<",				  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",										  "MTIMEbat_timestamp_cst_LT;"				  ]
[ "<",				  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",										  "MTIMEbat_timestamp_LT_cst;"				  ]
[ "<",				  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",									  "MTIMEbat_timestamp_LT;"				  ]
[ "<",				  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:bat[:oid,:timestamp]):bat[:oid,:bit] ",									  "MTIMEbat_timestamp_LT;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",								  "MTIMEaccum_daytime_cst_LE;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",									  "MTIMEaccum_daytime_LE_cst;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",							  "MTIMEaccum_daytime_LE;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",											  "MTIMEbat_daytime_cst_LE;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",											  "MTIMEbat_daytime_LE_cst;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",									  "MTIMEbat_daytime_LE;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:bat[:oid,:daytime]):bat[:oid,:bit] ",									  "MTIMEbat_daytime_LE;"				  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",								  "MTIMEaccum_daytime_cst_LT;"				  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",									  "MTIMEaccum_daytime_LT_cst;"				  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",							  "MTIMEaccum_daytime_LT;"				  ]
[ "<",				  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",											  "MTIMEbat_daytime_cst_LT;"				  ]
[ "<",				  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",											  "MTIMEbat_daytime_LT_cst;"				  ]
[ "<",				  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",									  "MTIMEbat_daytime_LT;"				  ]
[ "<",				  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:bat[:oid,:daytime]):bat[:oid,:bit] ",									  "MTIMEbat_daytime_LT;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:date],r:date):bat[:void,:bit] ",									  "MTIMEaccum_date_cst_LE;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:oid,:date],r:date):bat[:oid,:bit] ",									  "MTIMEaccum_date_LE_cst;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",								  "MTIMEaccum_date_LE;"					  ]
[ "<=",				  "command",	  "batcalc",	  "(l:bat[:void,:date],r:date):bat[:void,:bit] ",											  "MTIMEbat_date_cst_LE;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:date):bat[:oid,:bit] ",												  "MTIMEbat_date_LE_cst;"				  ]
[ "<=",				  "command",	  "batcalc",	  "(l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",										  "MTIMEbat_date_LE;"					  ]
[ "<=",				  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:bat[:oid,:date]):bat[:oid,:bit] ",										  "MTIMEbat_date_LE;"					  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:date],r:date):bat[:void,:bit] ",									  "MTIMEaccum_date_cst_LT;"				  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:oid,:date],r:date):bat[:oid,:bit] ",									  "MTIMEaccum_date_LT_cst;"				  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",								  "MTIMEaccum_date_LT;"					  ]
[ "<",				  "command",	  "batcalc",	  "(l:bat[:void,:date],r:date):bat[:void,:bit] ",											  "MTIMEbat_date_cst_LT;"				  ]
[ "<",				  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:date):bat[:oid,:bit] ",												  "MTIMEbat_date_LT_cst;"				  ]
[ "<",				  "command",	  "batcalc",	  "(l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",										  "MTIMEbat_date_LT;"					  ]
[ "<",				  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:bat[:oid,:date]):bat[:oid,:bit] ",										  "MTIMEbat_date_LT;"					  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",									  "CMDaccum_LT_cst_oid;"				  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",									  "CMDaccum_LT_oid_cst;"				  ]
[ "<",				  "command",	  "batcalc",	  "(cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",								  "CMD_LT_cst_oid;"					  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",											  "CMD_LT_oid_cst;"					  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",							  "CMDaccum_LT_oid;"					  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",										  "CMD_LT_oid;"						  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",									  "CMDaccum_LE_cst_oid;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",									  "CMDaccum_LE_oid_cst;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",											  "CMD_LE_cst_oid;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",											  "CMD_LE_oid_cst;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",							  "CMDaccum_LE_oid;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",										  "CMD_LE_oid;"					  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",									  "CMDaccum_LT_cst_flt;"				  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",									  "CMDaccum_LT_flt_cst;"				  ]
[ "<",				  "command",	  "batcalc",	  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",								  "CMD_LT_cst_flt;"					  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",											  "CMD_LT_flt_cst;"					  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",							  "CMDaccum_LT_flt;"					  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",										  "CMD_LT_flt;"						  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",									  "CMDaccum_LE_cst_flt;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",									  "CMDaccum_LE_flt_cst;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",											  "CMD_LE_cst_flt;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",											  "CMD_LE_flt_cst;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",							  "CMDaccum_LE_flt;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",										  "CMD_LE_flt;"					  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",									  "CMDaccum_LT_cst_dbl;"				  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",									  "CMDaccum_LT_dbl_cst;"				  ]
[ "<",				  "command",	  "batcalc",	  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",								  "CMD_LT_cst_dbl;"					  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",											  "CMD_LT_dbl_cst;"					  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",							  "CMDaccum_LT_dbl;"					  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",										  "CMD_LT_dbl;"						  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",									  "CMDaccum_LE_cst_dbl;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",									  "CMDaccum_LE_dbl_cst;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",											  "CMD_LE_cst_dbl;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",											  "CMD_LE_dbl_cst;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",							  "CMDaccum_LE_dbl;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",										  "CMD_LE_dbl;"					  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",									  "CMDaccum_LT_cst_lng;"				  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",									  "CMDaccum_LT_lng_cst;"				  ]
[ "<",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",								  "CMD_LT_cst_lng;"					  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",											  "CMD_LT_lng_cst;"					  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",							  "CMDaccum_LT_lng;"					  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",										  "CMD_LT_lng;"						  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",									  "CMDaccum_LE_cst_lng;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",									  "CMDaccum_LE_lng_cst;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",											  "CMD_LE_cst_lng;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",											  "CMD_LE_lng_cst;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",							  "CMDaccum_LE_lng;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",										  "CMD_LE_lng;"					  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",										  "CMDaccum_LT_cst_wrd;"			  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",										  "CMDaccum_LT_wrd_cst;"			  ]
[ "<",				  "command",	  "batcalc",	  "(cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",								  "CMD_LT_cst_wrd;"					  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",												  "CMD_LT_wrd_cst;"				  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",								  "CMDaccum_LT_wrd;"				  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",											  "CMD_LT_wrd;"					  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",									  "CMDaccum_LE_cst_wrd;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",									  "CMDaccum_LE_wrd_cst;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",											  "CMD_LE_cst_wrd;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",											  "CMD_LE_wrd_cst;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",							  "CMDaccum_LE_wrd;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",										  "CMD_LE_wrd;"					  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",									  "CMDaccum_LT_cst_int;"				  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",									  "CMDaccum_LT_int_cst;"				  ]
[ "<",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",								  "CMD_LT_cst_int;"					  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",											  "CMD_LT_int_cst;"					  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",							  "CMDaccum_LT_int;"					  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",										  "CMD_LT_int;"						  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",									  "CMDaccum_LE_cst_int;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",									  "CMDaccum_LE_int_cst;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",											  "CMD_LE_cst_int;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",											  "CMD_LE_int_cst;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",							  "CMDaccum_LE_int;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",										  "CMD_LE_int;"					  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",									  "CMDaccum_LT_cst_sht;"				  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",									  "CMDaccum_LT_sht_cst;"				  ]
[ "<",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",								  "CMD_LT_cst_sht;"					  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",											  "CMD_LT_sht_cst;"					  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",							  "CMDaccum_LT_sht;"					  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",										  "CMD_LT_sht;"						  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",									  "CMDaccum_LE_cst_sht;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",									  "CMDaccum_LE_sht_cst;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",											  "CMD_LE_cst_sht;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",											  "CMD_LE_sht_cst;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",							  "CMDaccum_LE_sht;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",										  "CMD_LE_sht;"					  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",									  "CMDaccum_LT_cst_bte;"				  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",									  "CMDaccum_LT_bte_cst;"				  ]
[ "<",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",								  "CMD_LT_cst_bte;"					  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",											  "CMD_LT_bte_cst;"					  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",							  "CMDaccum_LT_bte;"					  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",										  "CMD_LT_bte;"						  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",									  "CMDaccum_LE_cst_bte;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",									  "CMDaccum_LE_bte_cst;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",											  "CMD_LE_cst_bte;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",											  "CMD_LE_bte_cst;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",							  "CMDaccum_LE_bte;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",										  "CMD_LE_bte;"					  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",									  "CMDaccum_LT_cst_bit;"				  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",									  "CMDaccum_LT_bit_cst;"				  ]
[ "<",				  "command",	  "batcalc",	  "(cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",								  "CMD_LT_cst_bit;"					  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",											  "CMD_LT_bit_cst;"					  ]
[ "<",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",							  "CMDaccum_LT_bit;"					  ]
[ "<",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",										  "CMD_LT_bit;"						  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",									  "CMDaccum_LE_cst_bit;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",									  "CMDaccum_LE_bit_cst;"			  ]
[ "<=",					  "command",	  "batcalc",	  "(cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",											  "CMD_LE_cst_bit;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",											  "CMD_LE_bit_cst;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",							  "CMDaccum_LE_bit;"				  ]
[ "<=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",										  "CMD_LE_bit;"					  ]
[ "<<",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:int,bflag:bit,cflag:bit):bat[:oid,:lng] ",									  "CMDbataccumLSHcst_lng_int_lng;"		  ]
[ "<<",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:lng] ",									  "CMDbataccumLSHcst2_lng_int_lng;"		  ]
[ "<<",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumLSH_lng_int_lng;"			  ]
[ "<<",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",									  "CMDbatLSH_lng_int_lng;"				  ]
[ "<<",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:int]):bat[:oid,:lng] ",											  "CMDcstLSHbat_lng_int_lng;"				  ]
[ "<<",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:int):bat[:oid,:lng] ",											  "CMDbatLSHcst_lng_int_lng;"				  ]
[ "<<",				  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:int,bflag:bit,cflag:bit):bat[:oid,:wrd] ",									  "CMDbataccumLSHcst_wrd_int_wrd;"		  ]
[ "<<",				  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:wrd] ",									  "CMDbataccumLSHcst2_wrd_int_wrd;"		  ]
[ "<<",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumLSH_wrd_int_wrd;"			  ]
[ "<<",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:int]):bat[:oid,:wrd] ",									  "CMDbatLSH_wrd_int_wrd;"				  ]
[ "<<",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] ",											  "CMDcstLSHbat_wrd_int_wrd;"				  ]
[ "<<",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:int):bat[:oid,:wrd] ",											  "CMDbatLSHcst_wrd_int_wrd;"				  ]
[ "<<",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",							  "CMDbataccumLSHcst_int_int_int;"		  ]
[ "<<",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumLSHcst2_int_int_int;"		  ]
[ "<<",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumLSH_int_int_int;"				  ]
[ "<<",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",									  "CMDbatLSH_int_int_int;"				  ]
[ "<<",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",											  "CMDcstLSHbat_int_int_int;"				  ]
[ "<<",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",											  "CMDbatLSHcst_int_int_int;"				  ]
[ "<<",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int,bflag:bit,cflag:bit):bat[:oid,:sht] ",									  "CMDbataccumLSHcst_sht_int_sht;"		  ]
[ "<<",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:sht] ",									  "CMDbataccumLSHcst2_sht_int_sht;"		  ]
[ "<<",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:sht] ",						  "CMDbataccumLSH_sht_int_sht;"			  ]
[ "<<",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:sht] ",									  "CMDbatLSH_sht_int_sht;"				  ]
[ "<<",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:sht] ",											  "CMDcstLSHbat_sht_int_sht;"				  ]
[ "<<",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int):bat[:oid,:sht] ",											  "CMDbatLSHcst_sht_int_sht;"				  ]
[ "<<",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:int,bflag:bit,cflag:bit):bat[:oid,:bte] ",									  "CMDbataccumLSHcst_bte_int_bte;"		  ]
[ "<<",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:bte] ",									  "CMDbataccumLSHcst2_bte_int_bte;"		  ]
[ "<<",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:bte] ",						  "CMDbataccumLSH_bte_int_bte;"			  ]
[ "<<",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:bte] ",									  "CMDbatLSH_bte_int_bte;"				  ]
[ "<<",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:bte] ",											  "CMDcstLSHbat_bte_int_bte;"				  ]
[ "<<",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:int):bat[:oid,:bte] ",											  "CMDbatLSHcst_bte_int_bte;"				  ]
[ "<<",				  "command",	  "batcalc",	  "(b:bat[:oid,:oid],cst:int,bflag:bit,cflag:bit):bat[:oid,:oid] ",									  "CMDbataccumLSHcst_oid_int_oid;"		  ]
[ "<<",				  "command",	  "batcalc",	  "(cst:oid,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:oid] ",									  "CMDbataccumLSHcst2_oid_int_oid;"		  ]
[ "<<",					  "command",	  "batcalc",	  "(b:bat[:oid,:oid],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:oid] ",						  "CMDbataccumLSH_oid_int_oid;"			  ]
[ "<<",					  "command",	  "batcalc",	  "(b:bat[:oid,:oid],c:bat[:oid,:int]):bat[:oid,:oid] ",									  "CMDbatLSH_oid_int_oid;"				  ]
[ "<<",					  "command",	  "batcalc",	  "(cst:oid,b:bat[:oid,:int]):bat[:oid,:oid] ",											  "CMDcstLSHbat_oid_int_oid;"				  ]
[ "<<",					  "command",	  "batcalc",	  "(b:bat[:oid,:oid],cst:int):bat[:oid,:oid] ",											  "CMDbatLSHcst_oid_int_oid;"				  ]
[ "==",				  "command",	  "batcalc",	  "(l:bat[:oid,:str],r:str):bat[:oid,:bit] ",												  "STRbatEqualCst;"					  ]
[ "==",				  "command",	  "batcalc",	  "(l:bat[:oid,:str],r:bat[:oid,:str]):bat[:oid,:bit] ",										  "STRbatEqual;"					  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",								  "MTIMEaccum_timestamp_cst_EQ;"			  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",								  "MTIMEaccum_timestamp_EQ_cst;"			  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",						  "MTIMEaccum_timestamp_EQ;"				  ]
[ "==",				  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",										  "MTIMEbat_timestamp_cst_EQ;"				  ]
[ "==",				  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",										  "MTIMEbat_timestamp_EQ_cst;"				  ]
[ "==",				  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",									  "MTIMEbat_timestamp_EQ;"				  ]
[ "==",				  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:bat[:oid,:timestamp]):bat[:oid,:bit] ",									  "MTIMEbat_timestamp_EQ;"				  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",								  "MTIMEaccum_daytime_cst_EQ;"				  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",									  "MTIMEaccum_daytime_EQ_cst;"				  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",							  "MTIMEaccum_daytime_EQ;"				  ]
[ "==",				  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",											  "MTIMEbat_daytime_cst_EQ;"				  ]
[ "==",				  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",											  "MTIMEbat_daytime_EQ_cst;"				  ]
[ "==",				  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",									  "MTIMEbat_daytime_EQ;"				  ]
[ "==",				  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:bat[:oid,:daytime]):bat[:oid,:bit] ",									  "MTIMEbat_daytime_EQ;"				  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:date],r:date):bat[:void,:bit] ",									  "MTIMEaccum_date_cst_EQ;"				  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:oid,:date],r:date):bat[:oid,:bit] ",									  "MTIMEaccum_date_EQ_cst;"				  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",								  "MTIMEaccum_date_EQ;"					  ]
[ "==",				  "command",	  "batcalc",	  "(l:bat[:void,:date],r:date):bat[:void,:bit] ",											  "MTIMEbat_date_cst_EQ;"				  ]
[ "==",				  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:date):bat[:oid,:bit] ",												  "MTIMEbat_date_EQ_cst;"				  ]
[ "==",				  "command",	  "batcalc",	  "(l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",										  "MTIMEbat_date_EQ;"					  ]
[ "==",				  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:bat[:oid,:date]):bat[:oid,:bit] ",										  "MTIMEbat_date_EQ;"					  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",									  "CMDaccum_EQ_cst_oid;"				  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",									  "CMDaccum_EQ_oid_cst;"				  ]
[ "==",				  "command",	  "batcalc",	  "(cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",								  "CMD_EQ_cst_oid;"					  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",											  "CMD_EQ_oid_cst;"					  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",							  "CMDaccum_EQ_oid;"					  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",										  "CMD_EQ_oid;"						  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",									  "CMDaccum_EQ_cst_flt;"				  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",									  "CMDaccum_EQ_flt_cst;"				  ]
[ "==",				  "command",	  "batcalc",	  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",								  "CMD_EQ_cst_flt;"					  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",											  "CMD_EQ_flt_cst;"					  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",							  "CMDaccum_EQ_flt;"					  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",										  "CMD_EQ_flt;"						  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",									  "CMDaccum_EQ_cst_dbl;"				  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",									  "CMDaccum_EQ_dbl_cst;"				  ]
[ "==",				  "command",	  "batcalc",	  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",								  "CMD_EQ_cst_dbl;"					  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",											  "CMD_EQ_dbl_cst;"					  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",							  "CMDaccum_EQ_dbl;"					  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",										  "CMD_EQ_dbl;"						  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",									  "CMDaccum_EQ_cst_lng;"				  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",									  "CMDaccum_EQ_lng_cst;"				  ]
[ "==",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",								  "CMD_EQ_cst_lng;"					  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",											  "CMD_EQ_lng_cst;"					  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",							  "CMDaccum_EQ_lng;"					  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",										  "CMD_EQ_lng;"						  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",										  "CMDaccum_EQ_cst_wrd;"			  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",										  "CMDaccum_EQ_wrd_cst;"			  ]
[ "==",				  "command",	  "batcalc",	  "(cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",								  "CMD_EQ_cst_wrd;"					  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",												  "CMD_EQ_wrd_cst;"				  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",								  "CMDaccum_EQ_wrd;"				  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",											  "CMD_EQ_wrd;"					  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",									  "CMDaccum_EQ_cst_int;"				  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",									  "CMDaccum_EQ_int_cst;"				  ]
[ "==",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",								  "CMD_EQ_cst_int;"					  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",											  "CMD_EQ_int_cst;"					  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",							  "CMDaccum_EQ_int;"					  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",										  "CMD_EQ_int;"						  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",									  "CMDaccum_EQ_cst_sht;"				  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",									  "CMDaccum_EQ_sht_cst;"				  ]
[ "==",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",								  "CMD_EQ_cst_sht;"					  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",											  "CMD_EQ_sht_cst;"					  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",							  "CMDaccum_EQ_sht;"					  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",										  "CMD_EQ_sht;"						  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",									  "CMDaccum_EQ_cst_bte;"				  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",									  "CMDaccum_EQ_bte_cst;"				  ]
[ "==",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",								  "CMD_EQ_cst_bte;"					  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",											  "CMD_EQ_bte_cst;"					  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",							  "CMDaccum_EQ_bte;"					  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",										  "CMD_EQ_bte;"						  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",									  "CMDaccum_EQ_cst_bit;"				  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",									  "CMDaccum_EQ_bit_cst;"				  ]
[ "==",				  "command",	  "batcalc",	  "(cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",								  "CMD_EQ_cst_bit;"					  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",											  "CMD_EQ_bit_cst;"					  ]
[ "==",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",							  "CMDaccum_EQ_bit;"					  ]
[ "==",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",										  "CMD_EQ_bit;"						  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",								  "MTIMEaccum_timestamp_cst_GE;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",								  "MTIMEaccum_timestamp_GE_cst;"			  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",						  "MTIMEaccum_timestamp_GE;"				  ]
[ ">=",				  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",										  "MTIMEbat_timestamp_cst_GE;"				  ]
[ ">=",				  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",										  "MTIMEbat_timestamp_GE_cst;"				  ]
[ ">=",				  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",									  "MTIMEbat_timestamp_GE;"				  ]
[ ">=",				  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:bat[:oid,:timestamp]):bat[:oid,:bit] ",									  "MTIMEbat_timestamp_GE;"				  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",								  "MTIMEaccum_timestamp_cst_GT;"			  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",								  "MTIMEaccum_timestamp_GT_cst;"			  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",						  "MTIMEaccum_timestamp_GT;"				  ]
[ ">",				  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:timestamp):bat[:void,:bit] ",										  "MTIMEbat_timestamp_cst_GT;"				  ]
[ ">",				  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:timestamp):bat[:oid,:bit] ",										  "MTIMEbat_timestamp_GT_cst;"				  ]
[ ">",				  "command",	  "batcalc",	  "(l:bat[:void,:timestamp],r:bat[:void,:timestamp]):bat[:void,:bit] ",									  "MTIMEbat_timestamp_GT;"				  ]
[ ">",				  "command",	  "batcalc",	  "(l:bat[:oid,:timestamp],r:bat[:oid,:timestamp]):bat[:oid,:bit] ",									  "MTIMEbat_timestamp_GT;"				  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",								  "MTIMEaccum_daytime_cst_GE;"				  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",									  "MTIMEaccum_daytime_GE_cst;"				  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",							  "MTIMEaccum_daytime_GE;"				  ]
[ ">=",				  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",											  "MTIMEbat_daytime_cst_GE;"				  ]
[ ">=",				  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",											  "MTIMEbat_daytime_GE_cst;"				  ]
[ ">=",				  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",									  "MTIMEbat_daytime_GE;"				  ]
[ ">=",				  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:bat[:oid,:daytime]):bat[:oid,:bit] ",									  "MTIMEbat_daytime_GE;"				  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",								  "MTIMEaccum_daytime_cst_GT;"				  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",									  "MTIMEaccum_daytime_GT_cst;"				  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",							  "MTIMEaccum_daytime_GT;"				  ]
[ ">",				  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:daytime):bat[:void,:bit] ",											  "MTIMEbat_daytime_cst_GT;"				  ]
[ ">",				  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:daytime):bat[:oid,:bit] ",											  "MTIMEbat_daytime_GT_cst;"				  ]
[ ">",				  "command",	  "batcalc",	  "(l:bat[:void,:daytime],r:bat[:void,:daytime]):bat[:void,:bit] ",									  "MTIMEbat_daytime_GT;"				  ]
[ ">",				  "command",	  "batcalc",	  "(l:bat[:oid,:daytime],r:bat[:oid,:daytime]):bat[:oid,:bit] ",									  "MTIMEbat_daytime_GT;"				  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:date],r:date):bat[:void,:bit] ",									  "MTIMEaccum_date_cst_GE;"				  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:oid,:date],r:date):bat[:oid,:bit] ",									  "MTIMEaccum_date_GE_cst;"				  ]
[ ">=",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",								  "MTIMEaccum_date_GE;"					  ]
[ ">=",				  "command",	  "batcalc",	  "(l:bat[:void,:date],r:date):bat[:void,:bit] ",											  "MTIMEbat_date_cst_GE;"				  ]
[ ">=",				  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:date):bat[:oid,:bit] ",												  "MTIMEbat_date_GE_cst;"				  ]
[ ">=",				  "command",	  "batcalc",	  "(l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",										  "MTIMEbat_date_GE;"					  ]
[ ">=",				  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:bat[:oid,:date]):bat[:oid,:bit] ",										  "MTIMEbat_date_GE;"					  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:date],r:date):bat[:void,:bit] ",									  "MTIMEaccum_date_cst_GT;"				  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:oid,:date],r:date):bat[:oid,:bit] ",									  "MTIMEaccum_date_GT_cst;"				  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:void,:bit],l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",								  "MTIMEaccum_date_GT;"					  ]
[ ">",				  "command",	  "batcalc",	  "(l:bat[:void,:date],r:date):bat[:void,:bit] ",											  "MTIMEbat_date_cst_GT;"				  ]
[ ">",				  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:date):bat[:oid,:bit] ",												  "MTIMEbat_date_GT_cst;"				  ]
[ ">",				  "command",	  "batcalc",	  "(l:bat[:void,:date],r:bat[:void,:date]):bat[:void,:bit] ",										  "MTIMEbat_date_GT;"					  ]
[ ">",				  "command",	  "batcalc",	  "(l:bat[:oid,:date],r:bat[:oid,:date]):bat[:oid,:bit] ",										  "MTIMEbat_date_GT;"					  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",									  "CMDaccum_GT_cst_oid;"				  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",									  "CMDaccum_GT_oid_cst;"				  ]
[ ">",				  "command",	  "batcalc",	  "(cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",								  "CMD_GT_cst_oid;"					  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",											  "CMD_GT_oid_cst;"					  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",							  "CMDaccum_GT_oid;"					  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",										  "CMD_GT_oid;"						  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",									  "CMDaccum_GE_cst_oid;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",									  "CMDaccum_GE_oid_cst;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(cst:oid,b:bat[:any_1,:oid]):bat[:any_1,:bit] ",											  "CMD_GE_cst_oid;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],cst:oid):bat[:any_1,:bit] ",											  "CMD_GE_oid_cst;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",							  "CMDaccum_GE_oid;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:oid],c:bat[:any_1,:oid]):bat[:any_1,:bit] ",										  "CMD_GE_oid;"					  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",									  "CMDaccum_GT_cst_flt;"				  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",									  "CMDaccum_GT_flt_cst;"				  ]
[ ">",				  "command",	  "batcalc",	  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",								  "CMD_GT_cst_flt;"					  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",											  "CMD_GT_flt_cst;"					  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",							  "CMDaccum_GT_flt;"					  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",										  "CMD_GT_flt;"						  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",									  "CMDaccum_GE_cst_flt;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",									  "CMDaccum_GE_flt_cst;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(cst:flt,b:bat[:any_1,:flt]):bat[:any_1,:bit] ",											  "CMD_GE_cst_flt;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],cst:flt):bat[:any_1,:bit] ",											  "CMD_GE_flt_cst;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",							  "CMDaccum_GE_flt;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:flt],c:bat[:any_1,:flt]):bat[:any_1,:bit] ",										  "CMD_GE_flt;"					  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",									  "CMDaccum_GT_cst_dbl;"				  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",									  "CMDaccum_GT_dbl_cst;"				  ]
[ ">",				  "command",	  "batcalc",	  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",								  "CMD_GT_cst_dbl;"					  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",											  "CMD_GT_dbl_cst;"					  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",							  "CMDaccum_GT_dbl;"					  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",										  "CMD_GT_dbl;"						  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",									  "CMDaccum_GE_cst_dbl;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",									  "CMDaccum_GE_dbl_cst;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(cst:dbl,b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",											  "CMD_GE_cst_dbl;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],cst:dbl):bat[:any_1,:bit] ",											  "CMD_GE_dbl_cst;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",							  "CMDaccum_GE_dbl;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl],c:bat[:any_1,:dbl]):bat[:any_1,:bit] ",										  "CMD_GE_dbl;"					  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",									  "CMDaccum_GT_cst_lng;"				  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",									  "CMDaccum_GT_lng_cst;"				  ]
[ ">",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",								  "CMD_GT_cst_lng;"					  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",											  "CMD_GT_lng_cst;"					  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",							  "CMDaccum_GT_lng;"					  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",										  "CMD_GT_lng;"						  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",									  "CMDaccum_GE_cst_lng;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",									  "CMDaccum_GE_lng_cst;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:any_1,:lng]):bat[:any_1,:bit] ",											  "CMD_GE_cst_lng;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],cst:lng):bat[:any_1,:bit] ",											  "CMD_GE_lng_cst;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",							  "CMDaccum_GE_lng;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:lng],c:bat[:any_1,:lng]):bat[:any_1,:bit] ",										  "CMD_GE_lng;"					  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",										  "CMDaccum_GT_cst_wrd;"			  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",										  "CMDaccum_GT_wrd_cst;"			  ]
[ ">",				  "command",	  "batcalc",	  "(cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",								  "CMD_GT_cst_wrd;"					  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",												  "CMD_GT_wrd_cst;"				  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",								  "CMDaccum_GT_wrd;"				  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",											  "CMD_GT_wrd;"					  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",									  "CMDaccum_GE_cst_wrd;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",									  "CMDaccum_GE_wrd_cst;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",											  "CMD_GE_cst_wrd;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd],cst:wrd):bat[:any_1,:bit] ",											  "CMD_GE_wrd_cst;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",							  "CMDaccum_GE_wrd;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd],c:bat[:any_1,:wrd]):bat[:any_1,:bit] ",										  "CMD_GE_wrd;"					  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",									  "CMDaccum_GT_cst_int;"				  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",									  "CMDaccum_GT_int_cst;"				  ]
[ ">",				  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",								  "CMD_GT_cst_int;"					  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",											  "CMD_GT_int_cst;"					  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",							  "CMDaccum_GT_int;"					  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",										  "CMD_GT_int;"						  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",									  "CMDaccum_GE_cst_int;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",									  "CMDaccum_GE_int_cst;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(cst:int,b:bat[:any_1,:int]):bat[:any_1,:bit] ",											  "CMD_GE_cst_int;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:int],cst:int):bat[:any_1,:bit] ",											  "CMD_GE_int_cst;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",							  "CMDaccum_GE_int;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:int],c:bat[:any_1,:int]):bat[:any_1,:bit] ",										  "CMD_GE_int;"					  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",									  "CMDaccum_GT_cst_sht;"				  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",									  "CMDaccum_GT_sht_cst;"				  ]
[ ">",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",								  "CMD_GT_cst_sht;"					  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",											  "CMD_GT_sht_cst;"					  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",							  "CMDaccum_GT_sht;"					  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",										  "CMD_GT_sht;"						  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",									  "CMDaccum_GE_cst_sht;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",									  "CMDaccum_GE_sht_cst;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:any_1,:sht]):bat[:any_1,:bit] ",											  "CMD_GE_cst_sht;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],cst:sht):bat[:any_1,:bit] ",											  "CMD_GE_sht_cst;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",							  "CMDaccum_GE_sht;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:sht],c:bat[:any_1,:sht]):bat[:any_1,:bit] ",										  "CMD_GE_sht;"					  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",									  "CMDaccum_GT_cst_bte;"				  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",									  "CMDaccum_GT_bte_cst;"				  ]
[ ">",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",								  "CMD_GT_cst_bte;"					  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",											  "CMD_GT_bte_cst;"					  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",							  "CMDaccum_GT_bte;"					  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",										  "CMD_GT_bte;"						  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",									  "CMDaccum_GE_cst_bte;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",									  "CMDaccum_GE_bte_cst;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:any_1,:bte]):bat[:any_1,:bit] ",											  "CMD_GE_cst_bte;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:bte],cst:bte):bat[:any_1,:bit] ",											  "CMD_GE_bte_cst;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",							  "CMDaccum_GE_bte;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:bte],c:bat[:any_1,:bte]):bat[:any_1,:bit] ",										  "CMD_GE_bte;"					  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",									  "CMDaccum_GT_cst_bit;"				  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",									  "CMDaccum_GT_bit_cst;"				  ]
[ ">",				  "command",	  "batcalc",	  "(cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",								  "CMD_GT_cst_bit;"					  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",											  "CMD_GT_bit_cst;"					  ]
[ ">",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",							  "CMDaccum_GT_bit;"					  ]
[ ">",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",										  "CMD_GT_bit;"						  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",									  "CMDaccum_GE_cst_bit;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",									  "CMDaccum_GE_bit_cst;"			  ]
[ ">=",					  "command",	  "batcalc",	  "(cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",											  "CMD_GE_cst_bit;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",											  "CMD_GE_bit_cst;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",							  "CMDaccum_GE_bit;"				  ]
[ ">=",					  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",										  "CMD_GE_bit;"					  ]
[ ">>",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:int,bflag:bit,cflag:bit):bat[:oid,:lng] ",									  "CMDbataccumRSHcst_lng_int_lng;"		  ]
[ ">>",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:lng] ",									  "CMDbataccumRSHcst2_lng_int_lng;"		  ]
[ ">>",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:lng] ",						  "CMDbataccumRSH_lng_int_lng;"			  ]
[ ">>",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:int]):bat[:oid,:lng] ",									  "CMDbatRSH_lng_int_lng;"				  ]
[ ">>",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:int]):bat[:oid,:lng] ",											  "CMDcstRSHbat_lng_int_lng;"				  ]
[ ">>",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:int):bat[:oid,:lng] ",											  "CMDbatRSHcst_lng_int_lng;"				  ]
[ ">>",				  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:int,bflag:bit,cflag:bit):bat[:oid,:wrd] ",									  "CMDbataccumRSHcst_wrd_int_wrd;"		  ]
[ ">>",				  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:wrd] ",									  "CMDbataccumRSHcst2_wrd_int_wrd;"		  ]
[ ">>",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:wrd] ",						  "CMDbataccumRSH_wrd_int_wrd;"			  ]
[ ">>",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:int]):bat[:oid,:wrd] ",									  "CMDbatRSH_wrd_int_wrd;"				  ]
[ ">>",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:int]):bat[:oid,:wrd] ",											  "CMDcstRSHbat_wrd_int_wrd;"				  ]
[ ">>",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:int):bat[:oid,:wrd] ",											  "CMDbatRSHcst_wrd_int_wrd;"				  ]
[ ">>",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",							  "CMDbataccumRSHcst_int_int_int;"		  ]
[ ">>",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumRSHcst2_int_int_int;"		  ]
[ ">>",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumRSH_int_int_int;"				  ]
[ ">>",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",									  "CMDbatRSH_int_int_int;"				  ]
[ ">>",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",											  "CMDcstRSHbat_int_int_int;"				  ]
[ ">>",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",											  "CMDbatRSHcst_int_int_int;"				  ]
[ ">>",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int,bflag:bit,cflag:bit):bat[:oid,:sht] ",									  "CMDbataccumRSHcst_sht_int_sht;"		  ]
[ ">>",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:sht] ",									  "CMDbataccumRSHcst2_sht_int_sht;"		  ]
[ ">>",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:sht] ",						  "CMDbataccumRSH_sht_int_sht;"			  ]
[ ">>",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:int]):bat[:oid,:sht] ",									  "CMDbatRSH_sht_int_sht;"				  ]
[ ">>",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:int]):bat[:oid,:sht] ",											  "CMDcstRSHbat_sht_int_sht;"				  ]
[ ">>",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:int):bat[:oid,:sht] ",											  "CMDbatRSHcst_sht_int_sht;"				  ]
[ ">>",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:int,bflag:bit,cflag:bit):bat[:oid,:bte] ",									  "CMDbataccumRSHcst_bte_int_bte;"		  ]
[ ">>",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:bte] ",									  "CMDbataccumRSHcst2_bte_int_bte;"		  ]
[ ">>",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:bte] ",						  "CMDbataccumRSH_bte_int_bte;"			  ]
[ ">>",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:int]):bat[:oid,:bte] ",									  "CMDbatRSH_bte_int_bte;"				  ]
[ ">>",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:int]):bat[:oid,:bte] ",											  "CMDcstRSHbat_bte_int_bte;"				  ]
[ ">>",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:int):bat[:oid,:bte] ",											  "CMDbatRSHcst_bte_int_bte;"				  ]
[ ">>",				  "command",	  "batcalc",	  "(b:bat[:oid,:oid],cst:int,bflag:bit,cflag:bit):bat[:oid,:oid] ",									  "CMDbataccumRSHcst_oid_int_oid;"		  ]
[ ">>",				  "command",	  "batcalc",	  "(cst:oid,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:oid] ",									  "CMDbataccumRSHcst2_oid_int_oid;"		  ]
[ ">>",					  "command",	  "batcalc",	  "(b:bat[:oid,:oid],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:oid] ",						  "CMDbataccumRSH_oid_int_oid;"			  ]
[ ">>",					  "command",	  "batcalc",	  "(b:bat[:oid,:oid],c:bat[:oid,:int]):bat[:oid,:oid] ",									  "CMDbatRSH_oid_int_oid;"				  ]
[ ">>",					  "command",	  "batcalc",	  "(cst:oid,b:bat[:oid,:int]):bat[:oid,:oid] ",											  "CMDcstRSHbat_oid_int_oid;"				  ]
[ ">>",					  "command",	  "batcalc",	  "(b:bat[:oid,:oid],cst:int):bat[:oid,:oid] ",											  "CMDbatRSHcst_oid_int_oid;"				  ]
[ "and",			  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",									  "CMDaccum_AND_cst_bit;"				  ]
[ "and",			  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",									  "CMDaccum_AND_bit_cst;"				  ]
[ "and",			  "command",	  "batcalc",	  "(cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",								  "CMD_AND_cst_bit;"					  ]
[ "and",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",											  "CMD_AND_bit_cst;"					  ]
[ "and",			  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",							  "CMDaccum_AND_bit;"					  ]
[ "and",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",										  "CMD_AND_bit;"					  ]
[ "abs",				  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",												  "CMDunaryABS;"				  ]
[ "abs",				  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] ",												  "CMDunaryABS;"				  ]
[ "abs",				  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] ",												  "CMDunaryABS;"				  ]
[ "abs",				  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd]):bat[:any_1,:wrd] ",												  "CMDunaryABS;"				  ]
[ "abs",				  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:int] ",												  "CMDunaryABS;"				  ]
[ "abs",				  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] ",												  "CMDunaryABS;"				  ]
[ "abs",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bte]):bat[:any_1,:bte] ",												  "CMDunaryABS;"				  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumANDcst_lng_lng_lng;"		  ]
[ "and",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumANDcst2_lng_lng_lng;"		  ]
[ "and",			  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumAND_lng_lng_lng;"				  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatAND_lng_lng_lng;"				  ]
[ "and",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstANDbat_lng_lng_lng;"				  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",											  "CMDbatANDcst_lng_lng_lng;"				  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumANDcst_wrd_wrd_wrd;"		  ]
[ "and",				  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumANDcst2_wrd_wrd_wrd;"		  ]
[ "and",			  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumAND_wrd_wrd_wrd;"				  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",									  "CMDbatAND_wrd_wrd_wrd;"				  ]
[ "and",				  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",											  "CMDcstANDbat_wrd_wrd_wrd;"				  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:wrd] ",											  "CMDbatANDcst_wrd_wrd_wrd;"				  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",							  "CMDbataccumANDcst_int_int_int;"		  ]
[ "and",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumANDcst2_int_int_int;"		  ]
[ "and",			  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumAND_int_int_int;"				  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",									  "CMDbatAND_int_int_int;"				  ]
[ "and",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",											  "CMDcstANDbat_int_int_int;"				  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",											  "CMDbatANDcst_int_int_int;"				  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",							  "CMDbataccumANDcst_sht_sht_sht;"		  ]
[ "and",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",							  "CMDbataccumANDcst2_sht_sht_sht;"		  ]
[ "and",			  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",							  "CMDbataccumAND_sht_sht_sht;"				  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",									  "CMDbatAND_sht_sht_sht;"				  ]
[ "and",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",											  "CMDcstANDbat_sht_sht_sht;"				  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",											  "CMDbatANDcst_sht_sht_sht;"				  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte,bflag:bit,cflag:bit):bat[:oid,:bte] ",							  "CMDbataccumANDcst_bte_bte_bte;"		  ]
[ "and",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:bte] ",							  "CMDbataccumANDcst2_bte_bte_bte;"		  ]
[ "and",			  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:bte] ",							  "CMDbataccumAND_bte_bte_bte;"				  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:bte] ",									  "CMDbatAND_bte_bte_bte;"				  ]
[ "and",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:bte] ",											  "CMDcstANDbat_bte_bte_bte;"				  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:bte] ",											  "CMDbatANDcst_bte_bte_bte;"				  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:oid],cst:oid,bflag:bit,cflag:bit):bat[:oid,:oid] ",							  "CMDbataccumANDcst_oid_oid_oid;"		  ]
[ "and",				  "command",	  "batcalc",	  "(cst:oid,b:bat[:oid,:oid],cflag:bit,bflag:bit):bat[:oid,:oid] ",							  "CMDbataccumANDcst2_oid_oid_oid;"		  ]
[ "and",			  "command",	  "batcalc",	  "(b:bat[:oid,:oid],c:bat[:oid,:oid],aflag:bit,bflag:bit):bat[:oid,:oid] ",							  "CMDbataccumAND_oid_oid_oid;"				  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:oid],c:bat[:oid,:oid]):bat[:oid,:oid] ",									  "CMDbatAND_oid_oid_oid;"				  ]
[ "and",				  "command",	  "batcalc",	  "(cst:oid,b:bat[:oid,:oid]):bat[:oid,:oid] ",											  "CMDcstANDbat_oid_oid_oid;"				  ]
[ "and",				  "command",	  "batcalc",	  "(b:bat[:oid,:oid],cst:oid):bat[:oid,:oid] ",											  "CMDbatANDcst_oid_oid_oid;"				  ]
[ "bte",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng],d2:int,s2:int):bat[:oid,:bte] ",				  "batlng_dec2dec_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng]):bat[:oid,:bte] ",						  "batlng_dec2_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(v:bat[:oid,:lng],digits:int,scale:int):bat[:oid,:bte] ",				  "batlng_num2dec_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(v:bat[:oid,:lng]):bat[:oid,:bte] ",							  "batlng_2_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd],d2:int,s2:int):bat[:oid,:bte] ",				  "batwrd_dec2dec_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd]):bat[:oid,:bte] ",						  "batwrd_dec2_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(v:bat[:oid,:wrd],digits:int,scale:int):bat[:oid,:bte] ",				  "batwrd_num2dec_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(v:bat[:oid,:wrd]):bat[:oid,:bte] ",							  "batwrd_2_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int],d2:int,s2:int):bat[:oid,:bte] ",				  "batint_dec2dec_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int]):bat[:oid,:bte] ",						  "batint_dec2_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(v:bat[:oid,:int],digits:int,scale:int):bat[:oid,:bte] ",				  "batint_num2dec_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(v:bat[:oid,:int]):bat[:oid,:bte] ",							  "batint_2_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht],d2:int,s2:int):bat[:oid,:bte] ",				  "batsht_dec2dec_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht]):bat[:oid,:bte] ",						  "batsht_dec2_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(v:bat[:oid,:sht],digits:int,scale:int):bat[:oid,:bte] ",				  "batsht_num2dec_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(v:bat[:oid,:sht]):bat[:oid,:bte] ",							  "batsht_2_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte],d2:int,s2:int):bat[:oid,:bte] ",				  "batbte_dec2dec_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte]):bat[:oid,:bte] ",						  "batbte_dec2_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(v:bat[:oid,:bte],digits:int,scale:int):bat[:oid,:bte] ",				  "batbte_num2dec_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(v:bat[:oid,:bte]):bat[:oid,:bte] ",							  "batbte_2_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(v:bat[:oid,:dbl],digits:int,scale:int):bat[:oid,:bte] ",				  "batdbl_num2dec_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(v:bat[:oid,:dbl]):bat[:oid,:bte] ",							  "batdbl_2_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(v:bat[:oid,:flt],digits:int,scale:int):bat[:oid,:bte] ",				  "batflt_num2dec_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(v:bat[:oid,:flt]):bat[:oid,:bte] ",							  "batflt_2_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(v:bat[:oid,:str],digits:int,scale:int):bat[:oid,:bte] ",				  "batstr_2dec_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(v:bat[:oid,:str],digits:int):bat[:oid,:bte] ",					  "batstr_2num_bte;"			  ]
[ "bte",		  "command",	  "batcalc",		  "(v:bat[:oid,:str]):bat[:oid,:bte] ",							  "batstr_2_bte;"			  ]
[ "bit",			  "command",	  "batcalc",	  "(b:bat[:any_1,:str]):bat[:any_1,:bit] ",												  "CMDconvert_str_bit;"					  ]
[ "bit",			  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:bit] ",												  "CMDconvert_lng_bit;"					  ]
[ "bit",			  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",													  "CMDconvert_wrd_bit;"				  ]
[ "bit",			  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:bit] ",												  "CMDconvert_int_bit;"					  ]
[ "bit",			  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:bit] ",												  "CMDconvert_sht_bit;"					  ]
[ "bit",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bte]):bat[:any_1,:bit] ",												  "CMDconvert_bte_bit;"					  ]
[ "bte",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit]):bat[:any_1,:bte] ",												  "CMDconvert_bit_bte;"					  ]
[ "bte",			  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:bte] ",												  "CMDconvert_dbl_bte;"					  ]
[ "bte",			  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:bte] ",												  "CMDconvert_flt_bte;"					  ]
[ "bte",			  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:bte] ",												  "CMDconvert_oid_bte;"					  ]
[ "bte",			  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:bte] ",												  "CMDconvert_lng_bte;"					  ]
[ "bte",			  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd]):bat[:any_1,:bte] ",													  "CMDconvert_wrd_bte;"				  ]
[ "bte",			  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:bte] ",												  "CMDconvert_int_bte;"					  ]
[ "bte",			  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:bte] ",												  "CMDconvert_sht_bte;"					  ]
[ "bte",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bte]):bat[:any_1,:bte] ",												  "CMDconvert_bte;"					  ]
[ "bit",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit]):bat[:any_1,:bit] ",												  "CMDconvert_bit;"					  ]
[ "dense_rank_grp",	  "function",	  "batcalc",		  "(b:bat[:oid,:any_1]):bat[:oid,:int];",						  "nil"					  ]
[ "dense_rank_grp",	  "function",	  "batcalc",		  "(b:bat[:oid,:any_1],gp:bat[:oid,:oid],gpe:bat[:oid,:oid]):bat[:oid,:int];",		  "nil"					  ]
[ "dbl",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng],d2:int,s2:int):bat[:oid,:dbl] ",				  "batlng_dec2dec_dbl;"			  ]
[ "dbl",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng]):bat[:oid,:dbl] ",						  "batlng_dec2_dbl;"			  ]
[ "dbl",		  "command",	  "batcalc",		  "(v:bat[:oid,:lng],digits:int,scale:int):bat[:oid,:dbl] ",				  "batlng_num2dec_dbl;"			  ]
[ "dbl",		  "command",	  "batcalc",		  "(v:bat[:oid,:lng]):bat[:oid,:dbl] ",							  "batlng_2_dbl;"			  ]
[ "dbl",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd],d2:int,s2:int):bat[:oid,:dbl] ",				  "batwrd_dec2dec_dbl;"			  ]
[ "dbl",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd]):bat[:oid,:dbl] ",						  "batwrd_dec2_dbl;"			  ]
[ "dbl",		  "command",	  "batcalc",		  "(v:bat[:oid,:wrd],digits:int,scale:int):bat[:oid,:dbl] ",				  "batwrd_num2dec_dbl;"			  ]
[ "dbl",		  "command",	  "batcalc",		  "(v:bat[:oid,:wrd]):bat[:oid,:dbl] ",							  "batwrd_2_dbl;"			  ]
[ "dbl",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int],d2:int,s2:int):bat[:oid,:dbl] ",				  "batint_dec2dec_dbl;"			  ]
[ "dbl",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int]):bat[:oid,:dbl] ",						  "batint_dec2_dbl;"			  ]
[ "dbl",		  "command",	  "batcalc",		  "(v:bat[:oid,:int],digits:int,scale:int):bat[:oid,:dbl] ",				  "batint_num2dec_dbl;"			  ]
[ "dbl",		  "command",	  "batcalc",		  "(v:bat[:oid,:int]):bat[:oid,:dbl] ",							  "batint_2_dbl;"			  ]
[ "dbl",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht],d2:int,s2:int):bat[:oid,:dbl] ",				  "batsht_dec2dec_dbl;"			  ]
[ "dbl",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht]):bat[:oid,:dbl] ",						  "batsht_dec2_dbl;"			  ]
[ "dbl",		  "command",	  "batcalc",		  "(v:bat[:oid,:sht],digits:int,scale:int):bat[:oid,:dbl] ",				  "batsht_num2dec_dbl;"			  ]
[ "dbl",		  "command",	  "batcalc",		  "(v:bat[:oid,:sht]):bat[:oid,:dbl] ",							  "batsht_2_dbl;"			  ]
[ "dbl",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte],d2:int,s2:int):bat[:oid,:dbl] ",				  "batbte_dec2dec_dbl;"			  ]
[ "dbl",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte]):bat[:oid,:dbl] ",						  "batbte_dec2_dbl;"			  ]
[ "dbl",		  "command",	  "batcalc",		  "(v:bat[:oid,:bte],digits:int,scale:int):bat[:oid,:dbl] ",				  "batbte_num2dec_dbl;"			  ]
[ "dbl",		  "command",	  "batcalc",		  "(v:bat[:oid,:bte]):bat[:oid,:dbl] ",							  "batbte_2_dbl;"			  ]
[ "date",		  "command",	  "batcalc",		  "(v:bat[:oid,:str]):bat[:oid,:date] ",						  "batstr_2_date;"			  ]
[ "dbl",		  "command",	  "batcalc",		  "(v:bat[:oid,:str]):bat[:oid,:dbl] ",							  "batstr_2_dbl;"			  ]
[ "daytime",		  "command",	  "batcalc",	  "(v:bat[:oid,:daytime],digits:int):bat[:oid,:daytime] ",																										  "batdaytime_2time_daytime;"		  ]
[ "daytime",		  "command",	  "batcalc",	  "(v:bat[:oid,:str],digits:int):bat[:oid,:daytime] ",																											  "batstr_2time_daytime;"		  ]
[ "daytime",		  "command",	  "batcalc",	  "(v:bat[:oid,:str]):bat[:oid,:daytime] ",																												  "batstr_2_daytime;"			  ]
[ "dbl",			  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:dbl] ",												  "CMDconvert_flt_dbl;"					  ]
[ "dbl",			  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:dbl] ",												  "CMDconvert_oid_dbl;"					  ]
[ "dbl",			  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:dbl] ",												  "CMDconvert_lng_dbl;"					  ]
[ "dbl",			  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd]):bat[:any_1,:dbl] ",													  "CMDconvert_wrd_dbl;"				  ]
[ "dbl",			  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:dbl] ",												  "CMDconvert_int_dbl;"					  ]
[ "dbl",			  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:dbl] ",												  "CMDconvert_sht_dbl;"					  ]
[ "dbl",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bte]):bat[:any_1,:dbl] ",												  "CMDconvert_bte_dbl;"					  ]
[ "dbl",			  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:dbl] ",												  "CMDconvert_dbl;"					  ]
[ "flt",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng],d2:int,s2:int):bat[:oid,:flt] ",				  "batlng_dec2dec_flt;"			  ]
[ "flt",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng]):bat[:oid,:flt] ",						  "batlng_dec2_flt;"			  ]
[ "flt",		  "command",	  "batcalc",		  "(v:bat[:oid,:lng],digits:int,scale:int):bat[:oid,:flt] ",				  "batlng_num2dec_flt;"			  ]
[ "flt",		  "command",	  "batcalc",		  "(v:bat[:oid,:lng]):bat[:oid,:flt] ",							  "batlng_2_flt;"			  ]
[ "flt",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd],d2:int,s2:int):bat[:oid,:flt] ",				  "batwrd_dec2dec_flt;"			  ]
[ "flt",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd]):bat[:oid,:flt] ",						  "batwrd_dec2_flt;"			  ]
[ "flt",		  "command",	  "batcalc",		  "(v:bat[:oid,:wrd],digits:int,scale:int):bat[:oid,:flt] ",				  "batwrd_num2dec_flt;"			  ]
[ "flt",		  "command",	  "batcalc",		  "(v:bat[:oid,:wrd]):bat[:oid,:flt] ",							  "batwrd_2_flt;"			  ]
[ "flt",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int],d2:int,s2:int):bat[:oid,:flt] ",				  "batint_dec2dec_flt;"			  ]
[ "flt",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int]):bat[:oid,:flt] ",						  "batint_dec2_flt;"			  ]
[ "flt",		  "command",	  "batcalc",		  "(v:bat[:oid,:int],digits:int,scale:int):bat[:oid,:flt] ",				  "batint_num2dec_flt;"			  ]
[ "flt",		  "command",	  "batcalc",		  "(v:bat[:oid,:int]):bat[:oid,:flt] ",							  "batint_2_flt;"			  ]
[ "flt",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht],d2:int,s2:int):bat[:oid,:flt] ",				  "batsht_dec2dec_flt;"			  ]
[ "flt",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht]):bat[:oid,:flt] ",						  "batsht_dec2_flt;"			  ]
[ "flt",		  "command",	  "batcalc",		  "(v:bat[:oid,:sht],digits:int,scale:int):bat[:oid,:flt] ",				  "batsht_num2dec_flt;"			  ]
[ "flt",		  "command",	  "batcalc",		  "(v:bat[:oid,:sht]):bat[:oid,:flt] ",							  "batsht_2_flt;"			  ]
[ "flt",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte],d2:int,s2:int):bat[:oid,:flt] ",				  "batbte_dec2dec_flt;"			  ]
[ "flt",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte]):bat[:oid,:flt] ",						  "batbte_dec2_flt;"			  ]
[ "flt",		  "command",	  "batcalc",		  "(v:bat[:oid,:bte],digits:int,scale:int):bat[:oid,:flt] ",				  "batbte_num2dec_flt;"			  ]
[ "flt",		  "command",	  "batcalc",		  "(v:bat[:oid,:bte]):bat[:oid,:flt] ",							  "batbte_2_flt;"			  ]
[ "flt",		  "command",	  "batcalc",		  "(v:bat[:oid,:str]):bat[:oid,:flt] ",							  "batstr_2_flt;"			  ]
[ "flt",			  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:flt] ",												  "CMDconvert_dbl_flt;"					  ]
[ "flt",			  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:flt] ",												  "CMDconvert_oid_flt;"					  ]
[ "flt",			  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:flt] ",												  "CMDconvert_lng_flt;"					  ]
[ "flt",			  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd]):bat[:any_1,:flt] ",													  "CMDconvert_wrd_flt;"				  ]
[ "flt",			  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:flt] ",												  "CMDconvert_int_flt;"					  ]
[ "flt",			  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:flt] ",												  "CMDconvert_sht_flt;"					  ]
[ "flt",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bte]):bat[:any_1,:flt] ",												  "CMDconvert_bte_flt;"					  ]
[ "flt",			  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:flt] ",												  "CMDconvert_flt;"					  ]
[ "hash",		  "command",	  "batcalc",		  "(b:bat[:oid,:any_1]):bat[:oid,:wrd] ",						  "MKEYbathash;"			  ]
[ "int",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng],d2:int,s2:int):bat[:oid,:int] ",				  "batlng_dec2dec_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng]):bat[:oid,:int] ",						  "batlng_dec2_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(v:bat[:oid,:lng],digits:int,scale:int):bat[:oid,:int] ",				  "batlng_num2dec_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(v:bat[:oid,:lng]):bat[:oid,:int] ",							  "batlng_2_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd],d2:int,s2:int):bat[:oid,:int] ",				  "batwrd_dec2dec_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd]):bat[:oid,:int] ",						  "batwrd_dec2_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(v:bat[:oid,:wrd],digits:int,scale:int):bat[:oid,:int] ",				  "batwrd_num2dec_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(v:bat[:oid,:wrd]):bat[:oid,:int] ",							  "batwrd_2_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int],d2:int,s2:int):bat[:oid,:int] ",				  "batint_dec2dec_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int]):bat[:oid,:int] ",						  "batint_dec2_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(v:bat[:oid,:int],digits:int,scale:int):bat[:oid,:int] ",				  "batint_num2dec_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(v:bat[:oid,:int]):bat[:oid,:int] ",							  "batint_2_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht],d2:int,s2:int):bat[:oid,:int] ",				  "batsht_dec2dec_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht]):bat[:oid,:int] ",						  "batsht_dec2_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(v:bat[:oid,:sht],digits:int,scale:int):bat[:oid,:int] ",				  "batsht_num2dec_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(v:bat[:oid,:sht]):bat[:oid,:int] ",							  "batsht_2_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte],d2:int,s2:int):bat[:oid,:int] ",				  "batbte_dec2dec_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte]):bat[:oid,:int] ",						  "batbte_dec2_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(v:bat[:oid,:bte],digits:int,scale:int):bat[:oid,:int] ",				  "batbte_num2dec_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(v:bat[:oid,:bte]):bat[:oid,:int] ",							  "batbte_2_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(v:bat[:oid,:dbl],digits:int,scale:int):bat[:oid,:int] ",				  "batdbl_num2dec_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(v:bat[:oid,:dbl]):bat[:oid,:int] ",							  "batdbl_2_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(v:bat[:oid,:flt],digits:int,scale:int):bat[:oid,:int] ",				  "batflt_num2dec_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(v:bat[:oid,:flt]):bat[:oid,:int] ",							  "batflt_2_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(v:bat[:oid,:str],digits:int,scale:int):bat[:oid,:int] ",				  "batstr_2dec_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(v:bat[:oid,:str],digits:int):bat[:oid,:int] ",					  "batstr_2num_int;"			  ]
[ "int",		  "command",	  "batcalc",		  "(v:bat[:oid,:str]):bat[:oid,:int] ",							  "batstr_2_int;"			  ]
[ "isnil",			  "command",	  "batcalc",	  "(b:bat[:any_1,:timestamp]):bat[:any_1,:bit] ",												  "MTIMEunaryISNIL;"					  ]
[ "isnil",			  "command",	  "batcalc",	  "(b:bat[:any_1,:daytime]):bat[:any_1,:bit] ",													  "MTIMEunaryISNIL;"					  ]
[ "isnil",			  "command",	  "batcalc",	  "(b:bat[:any_1,:date]):bat[:any_1,:bit] ",													  "MTIMEunaryISNIL;"					  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:any_1,:str],e:str):bat[:oid,:str] ",									  "CMDifThenElseCst2_str;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],e:str,t:bat[:oid,:str]):bat[:oid,:str] ",										  "CMDifThenElseCst1_str;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:str],e:bat[:oid,:str]):bat[:oid,:str] ",								  "CMDifThenElse_str;"					  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:str,w:str):bat[:oid,:str] ",											  "CMDifThenElseCst_str;"				  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:str):bat[:oid,:str] ",												  "CMDifThenCst_str;"					  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:str]):bat[:oid,:str] ",										  "CMDifThen_str;"					  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:any_1,:dbl],e:dbl):bat[:oid,:dbl] ",									  "CMDifThenElseCst2_dbl;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],e:dbl,t:bat[:oid,:dbl]):bat[:oid,:dbl] ",										  "CMDifThenElseCst1_dbl;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:dbl],e:bat[:oid,:dbl]):bat[:oid,:dbl] ",								  "CMDifThenElse_dbl;"					  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:dbl,w:dbl):bat[:oid,:dbl] ",											  "CMDifThenElseCst_dbl;"				  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:dbl):bat[:oid,:dbl] ",												  "CMDifThenCst_dbl;"					  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:dbl]):bat[:oid,:dbl] ",										  "CMDifThen_dbl;"					  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:any_1,:flt],e:flt):bat[:oid,:flt] ",									  "CMDifThenElseCst2_flt;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],e:flt,t:bat[:oid,:flt]):bat[:oid,:flt] ",										  "CMDifThenElseCst1_flt;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:flt],e:bat[:oid,:flt]):bat[:oid,:flt] ",								  "CMDifThenElse_flt;"					  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:flt,w:flt):bat[:oid,:flt] ",											  "CMDifThenElseCst_flt;"				  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:flt):bat[:oid,:flt] ",												  "CMDifThenCst_flt;"					  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:flt]):bat[:oid,:flt] ",										  "CMDifThen_flt;"					  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:any_1,:oid],e:oid):bat[:oid,:oid] ",									  "CMDifThenElseCst2_oid;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],e:oid,t:bat[:oid,:oid]):bat[:oid,:oid] ",										  "CMDifThenElseCst1_oid;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:oid],e:bat[:oid,:oid]):bat[:oid,:oid] ",								  "CMDifThenElse_oid;"					  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:oid,w:oid):bat[:oid,:oid] ",											  "CMDifThenElseCst_oid;"				  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:oid):bat[:oid,:oid] ",												  "CMDifThenCst_oid;"					  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:oid]):bat[:oid,:oid] ",										  "CMDifThen_oid;"					  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:any_1,:lng],e:lng):bat[:oid,:lng] ",									  "CMDifThenElseCst2_lng;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],e:lng,t:bat[:oid,:lng]):bat[:oid,:lng] ",										  "CMDifThenElseCst1_lng;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:lng],e:bat[:oid,:lng]):bat[:oid,:lng] ",								  "CMDifThenElse_lng;"					  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:lng,w:lng):bat[:oid,:lng] ",											  "CMDifThenElseCst_lng;"				  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:lng):bat[:oid,:lng] ",												  "CMDifThenCst_lng;"					  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:lng]):bat[:oid,:lng] ",										  "CMDifThen_lng;"					  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:any_1,:int],e:int):bat[:oid,:int] ",									  "CMDifThenElseCst2_int;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],e:int,t:bat[:oid,:int]):bat[:oid,:int] ",										  "CMDifThenElseCst1_int;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:int],e:bat[:oid,:int]):bat[:oid,:int] ",								  "CMDifThenElse_int;"					  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:int,w:int):bat[:oid,:int] ",											  "CMDifThenElseCst_int;"				  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:int):bat[:oid,:int] ",												  "CMDifThenCst_int;"					  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:int]):bat[:oid,:int] ",										  "CMDifThen_int;"					  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:any_1,:sht],e:sht):bat[:oid,:sht] ",									  "CMDifThenElseCst2_sht;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],e:sht,t:bat[:oid,:sht]):bat[:oid,:sht] ",										  "CMDifThenElseCst1_sht;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:sht],e:bat[:oid,:sht]):bat[:oid,:sht] ",								  "CMDifThenElse_sht;"					  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:sht,w:sht):bat[:oid,:sht] ",											  "CMDifThenElseCst_sht;"				  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:sht):bat[:oid,:sht] ",												  "CMDifThenCst_sht;"					  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:sht]):bat[:oid,:sht] ",										  "CMDifThen_sht;"					  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:any_1,:bte],e:bte):bat[:oid,:bte] ",									  "CMDifThenElseCst2_bte;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],e:bte,t:bat[:oid,:bte]):bat[:oid,:bte] ",										  "CMDifThenElseCst1_bte;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:bte],e:bat[:oid,:bte]):bat[:oid,:bte] ",								  "CMDifThenElse_bte;"					  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:bte,w:bte):bat[:oid,:bte] ",											  "CMDifThenElseCst_bte;"				  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:bte):bat[:oid,:bte] ",												  "CMDifThenCst_bte;"					  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:bte]):bat[:oid,:bte] ",										  "CMDifThen_bte;"					  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:any_1,:bit],e:bit):bat[:oid,:bit] ",									  "CMDifThenElseCst2_bit;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],e:bit,t:bat[:oid,:bit]):bat[:oid,:bit] ",										  "CMDifThenElseCst1_bit;"				  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:bit],e:bat[:oid,:bit]):bat[:oid,:bit] ",								  "CMDifThenElse_bit;"					  ]
[ "ifthenelse",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:bit,w:bit):bat[:oid,:bit] ",											  "CMDifThenElseCst_bit;"				  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],v:bit):bat[:oid,:bit] ",												  "CMDifThenCst_bit;"					  ]
[ "ifthen",			  "command",	  "batcalc",	  "(b:bat[:oid,:bit],t:bat[:oid,:bit]):bat[:oid,:bit] ",										  "CMDifThen_bit;"					  ]
[ "int",			  "command",	  "batcalc",	  "(b:bat[:any_1,:str]):bat[:any_1,:int] ",												  "CMDconvert_str_int;"					  ]
[ "int",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit]):bat[:any_1,:int] ",												  "CMDconvert_bit_int;"					  ]
[ "int",			  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:int] ",												  "CMDconvert_dbl_int;"					  ]
[ "int",			  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:int] ",												  "CMDconvert_flt_int;"					  ]
[ "int",			  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:int] ",												  "CMDconvert_oid_int;"					  ]
[ "int",			  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:int] ",												  "CMDconvert_lng_int;"					  ]
[ "int",			  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd]):bat[:any_1,:int] ",													  "CMDconvert_wrd_int;"				  ]
[ "int",			  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:int] ",												  "CMDconvert_sht_int;"					  ]
[ "int",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bte]):bat[:any_1,:int] ",												  "CMDconvert_bte_int;"					  ]
[ "int",			  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:int] ",												  "CMDconvert_int;"					  ]
[ "isnil",			  "command",	  "batcalc",	  "(b:bat[:any_1,:str]):bat[:any_1,:bit] ",												  "CMDunaryISNIL;"					  ]
[ "isnil",			  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:bit] ",												  "CMDunaryISNIL;"					  ]
[ "isnil",			  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:bit] ",												  "CMDunaryISNIL;"					  ]
[ "isnil",			  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:bit] ",												  "CMDunaryISNIL;"					  ]
[ "isnil",			  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd]):bat[:any_1,:bit] ",													  "CMDunaryISNIL;"				  ]
[ "isnil",			  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:bit] ",												  "CMDunaryISNIL;"					  ]
[ "isnil",			  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:bit] ",												  "CMDunaryISNIL;"					  ]
[ "isnil",			  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:bit] ",												  "CMDunaryISNIL;"				  ]
[ "isnil",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bte]):bat[:any_1,:bit] ",												  "CMDunaryISNIL;"					  ]
[ "isnil",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit]):bat[:any_1,:bit] ",												  "CMDunaryISNIL;"				  ]
[ "lng",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng],d2:int,s2:int):bat[:oid,:lng] ",				  "batlng_dec2dec_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng]):bat[:oid,:lng] ",						  "batlng_dec2_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(v:bat[:oid,:lng],digits:int,scale:int):bat[:oid,:lng] ",				  "batlng_num2dec_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(v:bat[:oid,:lng]):bat[:oid,:lng] ",							  "batlng_2_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd],d2:int,s2:int):bat[:oid,:lng] ",				  "batwrd_dec2dec_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd]):bat[:oid,:lng] ",						  "batwrd_dec2_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(v:bat[:oid,:wrd],digits:int,scale:int):bat[:oid,:lng] ",				  "batwrd_num2dec_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(v:bat[:oid,:wrd]):bat[:oid,:lng] ",							  "batwrd_2_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int],d2:int,s2:int):bat[:oid,:lng] ",				  "batint_dec2dec_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int]):bat[:oid,:lng] ",						  "batint_dec2_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(v:bat[:oid,:int],digits:int,scale:int):bat[:oid,:lng] ",				  "batint_num2dec_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(v:bat[:oid,:int]):bat[:oid,:lng] ",							  "batint_2_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht],d2:int,s2:int):bat[:oid,:lng] ",				  "batsht_dec2dec_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht]):bat[:oid,:lng] ",						  "batsht_dec2_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(v:bat[:oid,:sht],digits:int,scale:int):bat[:oid,:lng] ",				  "batsht_num2dec_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(v:bat[:oid,:sht]):bat[:oid,:lng] ",							  "batsht_2_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte],d2:int,s2:int):bat[:oid,:lng] ",				  "batbte_dec2dec_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte]):bat[:oid,:lng] ",						  "batbte_dec2_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(v:bat[:oid,:bte],digits:int,scale:int):bat[:oid,:lng] ",				  "batbte_num2dec_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(v:bat[:oid,:bte]):bat[:oid,:lng] ",							  "batbte_2_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(v:bat[:oid,:dbl],digits:int,scale:int):bat[:oid,:lng] ",				  "batdbl_num2dec_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(v:bat[:oid,:dbl]):bat[:oid,:lng] ",							  "batdbl_2_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(v:bat[:oid,:flt],digits:int,scale:int):bat[:oid,:lng] ",				  "batflt_num2dec_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(v:bat[:oid,:flt]):bat[:oid,:lng] ",							  "batflt_2_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(v:bat[:oid,:str],digits:int,scale:int):bat[:oid,:lng] ",				  "batstr_2dec_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(v:bat[:oid,:str],digits:int):bat[:oid,:lng] ",					  "batstr_2num_lng;"			  ]
[ "lng",		  "command",	  "batcalc",		  "(v:bat[:oid,:str]):bat[:oid,:lng] ",							  "batstr_2_lng;"			  ]
[ "lng",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit]):bat[:any_1,:lng] ",												  "CMDconvert_bit_lng;"					  ]
[ "lng",			  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:lng] ",												  "CMDconvert_dbl_lng;"					  ]
[ "lng",			  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:lng] ",												  "CMDconvert_flt_lng;"					  ]
[ "lng",			  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:lng] ",												  "CMDconvert_oid_lng;"					  ]
[ "lng",			  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd]):bat[:any_1,:lng] ",													  "CMDconvert_wrd_lng;"				  ]
[ "lng",			  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:lng] ",												  "CMDconvert_int_lng;"					  ]
[ "lng",			  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:lng] ",												  "CMDconvert_sht_lng;"					  ]
[ "lng",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bte]):bat[:any_1,:lng] ",												  "CMDconvert_bte_lng;"					  ]
[ "lng",			  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:lng] ",												  "CMDconvert_lng;"					  ]
[ "mark_grp",		  "function",	  "batcalc",		  "(b:bat[:oid,:any_1]):bat[:oid,:int];",						  "nil"					  ]
[ "mark_grp",		  "function",	  "batcalc",		  "(b:bat[:oid,:any_1],a:bat[:any_2,:any_3],g:bat[:oid,:oid]):bat[:oid,:int];",		  "nil"					  ]
[ "not",			  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit]):bat[:any_1,:bit] ",										  "CMDbitbataccumNOT;"					  ]
[ "not",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit]):bat[:any_1,:bit] ",												  "CMDbitbatNOT;"					  ]
[ "oid",			  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:oid] ",												  "CMDconvert_lng_oid;"					  ]
[ "oid",			  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd]):bat[:any_1,:oid] ",													  "CMDconvert_wrd_oid;"				  ]
[ "oid",			  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:oid] ",												  "CMDconvert_int_oid;"					  ]
[ "oid",			  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:oid] ",												  "CMDconvert_sht_oid;"					  ]
[ "oid",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bte]):bat[:any_1,:oid] ",												  "CMDconvert_bte_oid;"					  ]
[ "oid",			  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:oid] ",												  "CMDconvert_oid;"					  ]
[ "or",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",									  "CMDaccum_OR_cst_bit;"				  ]
[ "or",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",									  "CMDaccum_OR_bit_cst;"				  ]
[ "or",				  "command",	  "batcalc",	  "(cst:bit,b:bat[:any_1,:bit]):bat[:any_1,:bit] ",								  "CMD_OR_cst_bit;"					  ]
[ "or",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],cst:bit):bat[:any_1,:bit] ",											  "CMD_OR_bit_cst;"					  ]
[ "or",				  "command",	  "batcalc",	  "(a:bat[:any_1,:bit],b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",							  "CMDaccum_OR_bit;"					  ]
[ "or",				  "command",	  "batcalc",	  "(b:bat[:any_1,:bit],c:bat[:any_1,:bit]):bat[:any_1,:bit] ",										  "CMD_OR_bit;"						  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumORcst_lng_lng_lng;"		  ]
[ "or",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumORcst2_lng_lng_lng;"		  ]
[ "or",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumOR_lng_lng_lng;"				  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatOR_lng_lng_lng;"				  ]
[ "or",					  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstORbat_lng_lng_lng;"				  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",											  "CMDbatORcst_lng_lng_lng;"				  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumORcst_wrd_wrd_wrd;"		  ]
[ "or",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumORcst2_wrd_wrd_wrd;"		  ]
[ "or",				  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumOR_wrd_wrd_wrd;"				  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",									  "CMDbatOR_wrd_wrd_wrd;"				  ]
[ "or",					  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",											  "CMDcstORbat_wrd_wrd_wrd;"				  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:wrd] ",											  "CMDbatORcst_wrd_wrd_wrd;"				  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",							  "CMDbataccumORcst_int_int_int;"		  ]
[ "or",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumORcst2_int_int_int;"		  ]
[ "or",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumOR_int_int_int;"				  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",									  "CMDbatOR_int_int_int;"				  ]
[ "or",					  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",											  "CMDcstORbat_int_int_int;"				  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",											  "CMDbatORcst_int_int_int;"				  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",							  "CMDbataccumORcst_sht_sht_sht;"		  ]
[ "or",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",							  "CMDbataccumORcst2_sht_sht_sht;"		  ]
[ "or",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",							  "CMDbataccumOR_sht_sht_sht;"				  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",									  "CMDbatOR_sht_sht_sht;"				  ]
[ "or",					  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",											  "CMDcstORbat_sht_sht_sht;"				  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",											  "CMDbatORcst_sht_sht_sht;"				  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte,bflag:bit,cflag:bit):bat[:oid,:bte] ",							  "CMDbataccumORcst_bte_bte_bte;"		  ]
[ "or",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:bte] ",							  "CMDbataccumORcst2_bte_bte_bte;"		  ]
[ "or",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:bte] ",							  "CMDbataccumOR_bte_bte_bte;"				  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:bte] ",									  "CMDbatOR_bte_bte_bte;"				  ]
[ "or",					  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:bte] ",											  "CMDcstORbat_bte_bte_bte;"				  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:bte] ",											  "CMDbatORcst_bte_bte_bte;"				  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:oid],cst:oid,bflag:bit,cflag:bit):bat[:oid,:oid] ",							  "CMDbataccumORcst_oid_oid_oid;"		  ]
[ "or",					  "command",	  "batcalc",	  "(cst:oid,b:bat[:oid,:oid],cflag:bit,bflag:bit):bat[:oid,:oid] ",							  "CMDbataccumORcst2_oid_oid_oid;"		  ]
[ "or",				  "command",	  "batcalc",	  "(b:bat[:oid,:oid],c:bat[:oid,:oid],aflag:bit,bflag:bit):bat[:oid,:oid] ",							  "CMDbataccumOR_oid_oid_oid;"				  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:oid],c:bat[:oid,:oid]):bat[:oid,:oid] ",									  "CMDbatOR_oid_oid_oid;"				  ]
[ "or",					  "command",	  "batcalc",	  "(cst:oid,b:bat[:oid,:oid]):bat[:oid,:oid] ",											  "CMDcstORbat_oid_oid_oid;"				  ]
[ "or",					  "command",	  "batcalc",	  "(b:bat[:oid,:oid],cst:oid):bat[:oid,:oid] ",											  "CMDbatORcst_oid_oid_oid;"				  ]
[ "rank_grp",		  "function",	  "batcalc",		  "(b:bat[:oid,:any_1]):bat[:oid,:int];",						  "nil"					  ]
[ "rank_grp",		  "function",	  "batcalc",		  "(b:bat[:oid,:any_1],gp:bat[:oid,:oid],gpe:bat[:oid,:oid]):bat[:oid,:int];",		  "nil"					  ]
[ "rotate_xor_hash",	  "command",	  "batcalc",		  "(h:bat[:oid,:wrd],nbits:int,b:bat[:oid,:any_1]):bat[:oid,:int] ",			  "MKEYbulk_rotate_xor_hash;"		  ]
[ "sht",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng],d2:int,s2:int):bat[:oid,:sht] ",				  "batlng_dec2dec_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:lng]):bat[:oid,:sht] ",						  "batlng_dec2_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(v:bat[:oid,:lng],digits:int,scale:int):bat[:oid,:sht] ",				  "batlng_num2dec_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(v:bat[:oid,:lng]):bat[:oid,:sht] ",							  "batlng_2_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd],d2:int,s2:int):bat[:oid,:sht] ",				  "batwrd_dec2dec_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd]):bat[:oid,:sht] ",						  "batwrd_dec2_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(v:bat[:oid,:wrd],digits:int,scale:int):bat[:oid,:sht] ",				  "batwrd_num2dec_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(v:bat[:oid,:wrd]):bat[:oid,:sht] ",							  "batwrd_2_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int],d2:int,s2:int):bat[:oid,:sht] ",				  "batint_dec2dec_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int]):bat[:oid,:sht] ",						  "batint_dec2_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(v:bat[:oid,:int],digits:int,scale:int):bat[:oid,:sht] ",				  "batint_num2dec_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(v:bat[:oid,:int]):bat[:oid,:sht] ",							  "batint_2_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht],d2:int,s2:int):bat[:oid,:sht] ",				  "batsht_dec2dec_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht]):bat[:oid,:sht] ",						  "batsht_dec2_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(v:bat[:oid,:sht],digits:int,scale:int):bat[:oid,:sht] ",				  "batsht_num2dec_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(v:bat[:oid,:sht]):bat[:oid,:sht] ",							  "batsht_2_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte],d2:int,s2:int):bat[:oid,:sht] ",				  "batbte_dec2dec_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte]):bat[:oid,:sht] ",						  "batbte_dec2_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(v:bat[:oid,:bte],digits:int,scale:int):bat[:oid,:sht] ",				  "batbte_num2dec_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(v:bat[:oid,:bte]):bat[:oid,:sht] ",							  "batbte_2_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(v:bat[:oid,:dbl],digits:int,scale:int):bat[:oid,:sht] ",				  "batdbl_num2dec_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(v:bat[:oid,:dbl]):bat[:oid,:sht] ",							  "batdbl_2_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(v:bat[:oid,:flt],digits:int,scale:int):bat[:oid,:sht] ",				  "batflt_num2dec_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(v:bat[:oid,:flt]):bat[:oid,:sht] ",							  "batflt_2_sht;"			  ]
[ "str",		  "pattern",	  "batcalc",		  "(eclass:int,d1:int,s1:int,has_tz:int,v:bat[:oid,:any_1],digits:int):bat[:oid,:str] ",  "SQLbatstr_cast;"			  ]
[ "sqlblob",		  "command",	  "batcalc",		  "(v:bat[:oid,:str]):bat[:oid,:sqlblob] ",						  "batstr_2_sqlblob;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(v:bat[:oid,:str],digits:int,scale:int):bat[:oid,:sht] ",				  "batstr_2dec_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(v:bat[:oid,:str],digits:int):bat[:oid,:sht] ",					  "batstr_2num_sht;"			  ]
[ "sht",		  "command",	  "batcalc",		  "(v:bat[:oid,:str]):bat[:oid,:sht] ",							  "batstr_2_sht;"			  ]
[ "str",		  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:str] ",																												  "CMDconvert_lng_str;"			  ]
[ "str",		  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:str] ",																												  "CMDconvert_int_str;"			  ]
[ "sht",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit]):bat[:any_1,:sht] ",												  "CMDconvert_bit_sht;"					  ]
[ "sht",			  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:sht] ",												  "CMDconvert_dbl_sht;"					  ]
[ "sht",			  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:sht] ",												  "CMDconvert_flt_sht;"					  ]
[ "sht",			  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:sht] ",												  "CMDconvert_oid_sht;"					  ]
[ "sht",			  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:sht] ",												  "CMDconvert_lng_sht;"					  ]
[ "sht",			  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd]):bat[:any_1,:sht] ",													  "CMDconvert_wrd_sht;"				  ]
[ "sht",			  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:sht] ",												  "CMDconvert_int_sht;"					  ]
[ "sht",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bte]):bat[:any_1,:sht] ",												  "CMDconvert_bte_sht;"					  ]
[ "str",			  "command",	  "batcalc",	  "(b:bat[:any_1,:str]):bat[:any_1,:str] ",												  "CMDconvert_str;"					  ]
[ "sht",			  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:sht] ",												  "CMDconvert_sht;"					  ]
[ "timestamp",		  "command",	  "batcalc",	  "(v:bat[:oid,:timestamp],digits:int):bat[:oid,:timestamp] ",																										  "battimestamp_2time_timestamp;"	  ]
[ "timestamp",		  "command",	  "batcalc",	  "(v:bat[:oid,:str],digits:int):bat[:oid,:timestamp] ",																										  "batstr_2time_timestamp;"		  ]
[ "timestamp",		  "command",	  "batcalc",		  "(v:bat[:oid,:str]):bat[:oid,:timestamp] ",						  "batstr_2_timestamp;"			  ]
[ "wrd",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd],d2:int,s2:int):bat[:oid,:wrd] ",				  "batwrd_dec2dec_wrd;"			  ]
[ "wrd",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:wrd]):bat[:oid,:wrd] ",						  "batwrd_dec2_wrd;"			  ]
[ "wrd",		  "command",	  "batcalc",		  "(v:bat[:oid,:wrd],digits:int,scale:int):bat[:oid,:wrd] ",				  "batwrd_num2dec_wrd;"			  ]
[ "wrd",		  "command",	  "batcalc",		  "(v:bat[:oid,:wrd]):bat[:oid,:wrd] ",							  "batwrd_2_wrd;"			  ]
[ "wrd",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int],d2:int,s2:int):bat[:oid,:wrd] ",				  "batint_dec2dec_wrd;"			  ]
[ "wrd",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:int]):bat[:oid,:wrd] ",						  "batint_dec2_wrd;"			  ]
[ "wrd",		  "command",	  "batcalc",		  "(v:bat[:oid,:int],digits:int,scale:int):bat[:oid,:wrd] ",				  "batint_num2dec_wrd;"			  ]
[ "wrd",		  "command",	  "batcalc",		  "(v:bat[:oid,:int]):bat[:oid,:wrd] ",							  "batint_2_wrd;"			  ]
[ "wrd",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht],d2:int,s2:int):bat[:oid,:wrd] ",				  "batsht_dec2dec_wrd;"			  ]
[ "wrd",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:sht]):bat[:oid,:wrd] ",						  "batsht_dec2_wrd;"			  ]
[ "wrd",		  "command",	  "batcalc",		  "(v:bat[:oid,:sht],digits:int,scale:int):bat[:oid,:wrd] ",				  "batsht_num2dec_wrd;"			  ]
[ "wrd",		  "command",	  "batcalc",		  "(v:bat[:oid,:sht]):bat[:oid,:wrd] ",							  "batsht_2_wrd;"			  ]
[ "wrd",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte],d2:int,s2:int):bat[:oid,:wrd] ",				  "batbte_dec2dec_wrd;"			  ]
[ "wrd",		  "command",	  "batcalc",		  "(s1:int,v:bat[:oid,:bte]):bat[:oid,:wrd] ",						  "batbte_dec2_wrd;"			  ]
[ "wrd",		  "command",	  "batcalc",		  "(v:bat[:oid,:bte],digits:int,scale:int):bat[:oid,:wrd] ",				  "batbte_num2dec_wrd;"			  ]
[ "wrd",		  "command",	  "batcalc",		  "(v:bat[:oid,:bte]):bat[:oid,:wrd] ",							  "batbte_2_wrd;"			  ]
[ "wrd",		  "command",	  "batcalc",		  "(v:bat[:oid,:dbl],digits:int,scale:int):bat[:oid,:wrd] ",				  "batdbl_num2dec_wrd;"			  ]
[ "wrd",		  "command",	  "batcalc",		  "(v:bat[:oid,:dbl]):bat[:oid,:wrd] ",							  "batdbl_2_wrd;"			  ]
[ "wrd",		  "command",	  "batcalc",		  "(v:bat[:oid,:flt],digits:int,scale:int):bat[:oid,:wrd] ",				  "batflt_num2dec_wrd;"			  ]
[ "wrd",		  "command",	  "batcalc",		  "(v:bat[:oid,:flt]):bat[:oid,:wrd] ",							  "batflt_2_wrd;"			  ]
[ "wrd",		  "command",	  "batcalc",		  "(v:bat[:oid,:str]):bat[:oid,:wrd] ",							  "batstr_2_wrd;"			  ]
[ "wrd",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bit]):bat[:any_1,:wrd] ",													  "CMDconvert_bit_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",	  "(b:bat[:any_1,:dbl]):bat[:any_1,:wrd] ",													  "CMDconvert_dbl_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",	  "(b:bat[:any_1,:flt]):bat[:any_1,:wrd] ",													  "CMDconvert_flt_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",	  "(b:bat[:any_1,:oid]):bat[:any_1,:wrd] ",													  "CMDconvert_oid_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",	  "(b:bat[:any_1,:lng]):bat[:any_1,:wrd] ",													  "CMDconvert_lng_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",	  "(b:bat[:any_1,:int]):bat[:any_1,:wrd] ",													  "CMDconvert_int_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",	  "(b:bat[:any_1,:sht]):bat[:any_1,:wrd] ",													  "CMDconvert_sht_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",	  "(b:bat[:any_1,:bte]):bat[:any_1,:wrd] ",													  "CMDconvert_bte_wrd;"				  ]
[ "wrd",			  "command",	  "batcalc",	  "(b:bat[:any_1,:wrd]):bat[:any_1,:wrd] ",													  "CMDconvert_wrd;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng,bflag:bit,cflag:bit):bat[:oid,:lng] ",							  "CMDbataccumXORcst_lng_lng_lng;"		  ]
[ "xor",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng],cflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumXORcst2_lng_lng_lng;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng],aflag:bit,bflag:bit):bat[:oid,:lng] ",							  "CMDbataccumXOR_lng_lng_lng;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],c:bat[:oid,:lng]):bat[:oid,:lng] ",									  "CMDbatXOR_lng_lng_lng;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(cst:lng,b:bat[:oid,:lng]):bat[:oid,:lng] ",											  "CMDcstXORbat_lng_lng_lng;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:lng],cst:lng):bat[:oid,:lng] ",											  "CMDbatXORcst_lng_lng_lng;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:wrd,bflag:bit,cflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumXORcst_wrd_wrd_wrd;"		  ]
[ "xor",				  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:wrd],cflag:bit,bflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumXORcst2_wrd_wrd_wrd;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd],aflag:bit,bflag:bit):bat[:oid,:wrd] ",							  "CMDbataccumXOR_wrd_wrd_wrd;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],c:bat[:oid,:wrd]):bat[:oid,:wrd] ",									  "CMDbatXOR_wrd_wrd_wrd;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(cst:wrd,b:bat[:oid,:wrd]):bat[:oid,:wrd] ",											  "CMDcstXORbat_wrd_wrd_wrd;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:wrd],cst:wrd):bat[:oid,:wrd] ",											  "CMDbatXORcst_wrd_wrd_wrd;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int,bflag:bit,cflag:bit):bat[:oid,:int] ",							  "CMDbataccumXORcst_int_int_int;"		  ]
[ "xor",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int],cflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumXORcst2_int_int_int;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int],aflag:bit,bflag:bit):bat[:oid,:int] ",							  "CMDbataccumXOR_int_int_int;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],c:bat[:oid,:int]):bat[:oid,:int] ",									  "CMDbatXOR_int_int_int;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(cst:int,b:bat[:oid,:int]):bat[:oid,:int] ",											  "CMDcstXORbat_int_int_int;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:int],cst:int):bat[:oid,:int] ",											  "CMDbatXORcst_int_int_int;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht,bflag:bit,cflag:bit):bat[:oid,:sht] ",							  "CMDbataccumXORcst_sht_sht_sht;"		  ]
[ "xor",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht],cflag:bit,bflag:bit):bat[:oid,:sht] ",							  "CMDbataccumXORcst2_sht_sht_sht;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht],aflag:bit,bflag:bit):bat[:oid,:sht] ",							  "CMDbataccumXOR_sht_sht_sht;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],c:bat[:oid,:sht]):bat[:oid,:sht] ",									  "CMDbatXOR_sht_sht_sht;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(cst:sht,b:bat[:oid,:sht]):bat[:oid,:sht] ",											  "CMDcstXORbat_sht_sht_sht;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:sht],cst:sht):bat[:oid,:sht] ",											  "CMDbatXORcst_sht_sht_sht;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte,bflag:bit,cflag:bit):bat[:oid,:bte] ",							  "CMDbataccumXORcst_bte_bte_bte;"		  ]
[ "xor",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte],cflag:bit,bflag:bit):bat[:oid,:bte] ",							  "CMDbataccumXORcst2_bte_bte_bte;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte],aflag:bit,bflag:bit):bat[:oid,:bte] ",							  "CMDbataccumXOR_bte_bte_bte;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],c:bat[:oid,:bte]):bat[:oid,:bte] ",									  "CMDbatXOR_bte_bte_bte;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(cst:bte,b:bat[:oid,:bte]):bat[:oid,:bte] ",											  "CMDcstXORbat_bte_bte_bte;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:bte],cst:bte):bat[:oid,:bte] ",											  "CMDbatXORcst_bte_bte_bte;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:oid],cst:oid,bflag:bit,cflag:bit):bat[:oid,:oid] ",							  "CMDbataccumXORcst_oid_oid_oid;"		  ]
[ "xor",				  "command",	  "batcalc",	  "(cst:oid,b:bat[:oid,:oid],cflag:bit,bflag:bit):bat[:oid,:oid] ",							  "CMDbataccumXORcst2_oid_oid_oid;"		  ]
[ "xor",			  "command",	  "batcalc",	  "(b:bat[:oid,:oid],c:bat[:oid,:oid],aflag:bit,bflag:bit):bat[:oid,:oid] ",							  "CMDbataccumXOR_oid_oid_oid;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:oid],c:bat[:oid,:oid]):bat[:oid,:oid] ",									  "CMDbatXOR_oid_oid_oid;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(cst:oid,b:bat[:oid,:oid]):bat[:oid,:oid] ",											  "CMDcstXORbat_oid_oid_oid;"				  ]
[ "xor",				  "command",	  "batcalc",	  "(b:bat[:oid,:oid],cst:oid):bat[:oid,:oid] ",											  "CMDbatXORcst_oid_oid_oid;"				  ]
[ "xml",			  "command",	  "batcalc",	  "(src:bat[:oid,:str]):bat[:oid,:xml] ",										  "BATXMLstr2xml;"				  ]
[ "agg",			  "command",	  "xml",	  "(val:bat[:oid,:xml]):xml ",												  "BATXMLgroup;"				  ]
[ "agg",			  "command",	  "xml",	  "(val:bat[:oid,:xml],grp:bat[:oid,:oid]):bat[:oid,:xml] ",								  "BATXMLagg;"					  ]
[ "agg",			  "command",	  "xml",	  "(val:bat[:oid,:xml],grp:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:xml] ",						  "BATXMLagg3;"					  ]
[ "attribute",			  "command",	  "xml",	  "(name:str,val:bat[:oid,:str]):bat[:oid,:xml] ",									  "BATXMLattribute;"				  ]
[ "attribute",			  "command",	  "xml",	  "(name:str,val:str):xml ",												  "XMLattribute;"				  ]
[ "concat",			  "command",	  "xml",	  "(left:bat[:oid,:xml],right:bat[:oid,:xml]):bat[:oid,:xml] ",								  "BATXMLconcat;"				  ]
[ "comment",			  "command",	  "xml",	  "(val:bat[:oid,:str]):bat[:oid,:xml] ",										  "BATXMLcomment;"				  ]
[ "content",			  "command",	  "xml",	  "(src:bat[:oid,:str]):bat[:oid,:xml] ",										  "BATXMLcontent;"				  ]
[ "concat",			  "command",	  "xml",	  "(val1:xml,val2:xml):xml ",												  "XMLconcat;"					  ]
[ "content",			  "command",	  "xml",	  "(val:str):xml ",													  "XMLcontent;"					  ]
[ "comment",			  "command",	  "xml",	  "(val:str):xml ",													  "XMLcomment;"					  ]
[ "document",			  "command",	  "xml",	  "(src:bat[:oid,:str]):bat[:oid,:xml] ",										  "BATXMLdocument;"				  ]
[ "document",			  "command",	  "xml",	  "(val:str):xml ",													  "XMLdocument;"				  ]
[ "element",			  "command",	  "xml",	  "(name:str,ns:xml,attr:xml,s:bat[:oid,:xml]):bat[:oid,:xml] ",							  "BATXMLelement;"				  ]
[ "element",			  "command",	  "xml",	  "(name:str,s:bat[:oid,:xml]):bat[:oid,:xml] ",									  "BATXMLelementSmall;"				  ]
[ "element",			  "command",	  "xml",	  "(name:str,s:xml):xml ",												  "XMLelementSmall;"				  ]
[ "element",			  "command",	  "xml",	  "(name:str,ns:xml,attr:xml,s:xml):xml ",										  "XMLelement;"					  ]
[ "forest",			  "pattern",	  "xml",	  "(val:bat[:oid,:xml]...):bat[:oid,:xml] ",										  "BATXMLforest;"				  ]
[ "forest",			  "pattern",	  "xml",	  "(val:xml...):xml ",													  "XMLforest;"					  ]
[ "#fromstr",			  "command",	  "xml",	  "():xml ",														  "XMLfromString;"				  ]
[ "isdocument",			  "command",	  "xml",	  "(val:bat[:oid,:str]):bat[:oid,:bit] ",										  "BATXMLisdocument;"				  ]
[ "isdocument",			  "command",	  "xml",	  "(val:str):bit ",													  "XMLisdocument;"				  ]
[ "options",			  "command",	  "xml",	  "(tag:str,option:str,left:bat[:oid,:xml]):bat[:oid,:xml] ",								  "BATXMLoptions;"				  ]
[ "pi",				  "command",	  "xml",	  "(target:str,val:bat[:oid,:xml]):bat[:oid,:xml] ",									  "BATXMLpi;"					  ]
[ "parse",			  "command",	  "xml",	  "(doccont:str,val:bat[:oid,:str],option:str):bat[:oid,:xml] ",							  "BATXMLparse;"				  ]
[ "prelude",			  "command",	  "xml",	  "():void ",														  "XMLprelude;"					  ]
[ "pi",				  "command",	  "xml",	  "(target:str,val:str):xml ",												  "XMLpi;"					  ]
[ "parse",			  "command",	  "xml",	  "(doccont:str,val:str,option:str):xml ",										  "XMLparse;"					  ]
[ "root",			  "command",	  "xml",	  "(val:bat[:oid,:xml],version:str,standalone:str):bat[:oid,:xml] ",							  "BATXMLroot;"					  ]
[ "root",			  "command",	  "xml",	  "(val:xml,version:str,standalone:str):xml ",										  "XMLroot;"					  ]
[ "serialize",			  "command",	  "xml",	  "(val:bat[:oid,:xml]):bat[:oid,:str] ",										  "BATXMLxml2str;"				  ]
[ "str",			  "command",	  "xml",	  "(src:bat[:oid,:xml]):bat[:oid,:str] ",										  "BATXMLxml2str;"				  ]
[ "str",			  "command",	  "xml",	  "(src:xml):str ",													  "XMLxml2str;"					  ]
[ "text",			  "command",	  "xml",	  "(val:bat[:oid,:xml]):bat[:oid,:str] ",										  "BATXMLxmltext;"				  ]
[ "text",			  "command",	  "xml",	  "(src:xml):str ",													  "XMLxmltext;"					  ]
[ "#tostr",			  "command",	  "xml",	  "():str ",														  "XMLtoString;"				  ]
[ "xquery",			  "command",	  "xml",	  "(val:bat[:oid,:str],expr:str):bat[:oid,:xml] ",									  "BATXMLxquery;"				  ]
[ "xml",			  "command",	  "xml",	  "(src:bat[:oid,:str]):bat[:oid,:xml] ",										  "BATXMLstr2xml;"				  ]
[ "xml",			  "command",	  "xml",	  "(src:str):xml ",													  "XMLstr2xml;"					  ]
[ "#fromstr",			  "command",	  "identifier",	  "():void ",																  "IDfromString;"					  ]
[ "identifier",			  "command",	  "identifier",	  "(s:str):identifier ",														  "IDentifier;"						  ]
[ "prelude",			  "command",	  "identifier",	  "():void ",																  "IDprelude;"						  ]
[ "#tostr",			  "command",	  "identifier",	  "():void ",																  "IDtoString;"						  ]
[ "!=",				  "command",	  "inet",	  "(v:inet,w:inet):bit ",														  "INET_comp_NEQ;"					  ]
[ "<<=",			  "command",	  "inet",	  "(v:inet,w:inet):bit ",														  "INET_comp_CWE;"					  ]
[ "<<",				  "command",	  "inet",	  "(v:inet,w:inet):bit ",														  "INET_comp_CW;"					  ]
[ "<=",				  "command",	  "inet",	  "(v:inet,w:inet):bit ",														  "INET_comp_LE;"					  ]
[ "<",				  "command",	  "inet",	  "(v:inet,w:inet):bit ",														  "INET_comp_LT;"					  ]
[ "=",				  "command",	  "inet",	  "(v:inet,w:inet):bit ",														  "INET_comp_EQ;"					  ]
[ ">>=",			  "command",	  "inet",	  "(v:inet,w:inet):bit ",														  "INET_comp_CSE;"					  ]
[ ">>",				  "command",	  "inet",	  "(v:inet,w:inet):bit ",														  "INET_comp_CS;"					  ]
[ ">=",				  "command",	  "inet",	  "(v:inet,w:inet):bit ",														  "INET_comp_GE;"					  ]
[ ">",				  "command",	  "inet",	  "(v:inet,w:inet):bit ",														  "INET_comp_GT;"					  ]
[ "abbrev",		  "command",	  "inet",	  "(X_1:inet):str ",																															  "INETabbrev;"				  ]
[ "broadcast",		  "command",	  "inet",	  "(X_1:inet):inet ",																															  "INETbroadcast;"			  ]
[ "#fromstr",			  "command",	  "inet",	  "():void ",																  "INETfromString;"					  ]
[ "hostmask",		  "command",	  "inet",	  "(X_1:inet):inet ",																															  "INEThostmask;"			  ]
[ "host",		  "command",	  "inet",	  "(X_1:inet):str ",																															  "INEThost;"				  ]
[ "isnil",			  "command",	  "inet",	  "(v:inet):bit ",															  "INET_isnil;"						  ]
[ "masklen",		  "command",	  "inet",	  "(X_1:inet):int ",																															  "INETmasklen;"			  ]
[ "network",		  "command",	  "inet",	  "(X_1:inet):inet ",																															  "INETnetwork;"			  ]
[ "netmask",		  "command",	  "inet",	  "(X_1:inet):inet ",																															  "INETnetmask;"			  ]
[ "new",			  "command",	  "inet",	  "(s:str):inet ",															  "INETnew;"						  ]
[ "setmasklen",		  "command",	  "inet",	  "(X_1:inet,X_2:int):inet ",																														  "INETsetmasklen;"			  ]
[ "text",		  "command",	  "inet",	  "(X_1:inet):str ",																															  "INETtext;"				  ]
[ "#tostr",			  "command",	  "inet",	  "():void ",																  "INETtoString;"					  ]
[ "!=",				  "command",	  "date",	  "(v:date,w:date):bit ",														  "MTIMEdate_NEQ;"					  ]
[ "<=",				  "command",	  "date",	  "(v:date,w:date):bit ",														  "MTIMEdate_LE;"					  ]
[ "<",				  "command",	  "date",	  "(v:date,w:date):bit ",														  "MTIMEdate_LT;"					  ]
[ "==",				  "command",	  "date",	  "(v:date,w:date):bit ",														  "MTIMEdate_EQ;"					  ]
[ ">=",				  "command",	  "date",	  "(v:date,w:date):bit ",														  "MTIMEdate_GE;"					  ]
[ ">",				  "command",	  "date",	  "(v:date,w:date):bit ",														  "MTIMEdate_GT;"					  ]
[ "date",			  "command",	  "date",	  "(s:date):date ",															  "MTIMEdate_date;"					  ]
[ "#fromstr",			  "command",	  "date",	  "():date ",																  "date_fromstr;"					  ]
[ "isnil",			  "command",	  "date",	  "(v:date):bit ",															  "MTIMEdate_isnil;"					  ]
[ "#tostr",			  "command",	  "date",	  "():str ",																  "date_tostr;"						  ]
[ "add",			  "command",	  "mtime",	  "(v:timestamp,msecs:lng):timestamp ",													  "MTIMEtimestamp_add;"					  ]
[ "adddays",			  "command",	  "mtime",	  "(value:date,days:int):date ",													  "MTIMEdate_adddays;"					  ]
[ "addmonths",			  "command",	  "mtime",	  "(value:date,months:int):date ",													  "MTIMEdate_addmonths;"				  ]
[ "addyears",			  "command",	  "mtime",	  "(value:date,years:int):date ",													  "MTIMEdate_addyears;"					  ]
[ "current_time",		  "command",	  "mtime",	  "():daytime ",															  "MTIMEcurrent_time;"					  ]
[ "current_date",		  "command",	  "mtime",	  "():date ",																  "MTIMEcurrent_date;"					  ]
[ "current_timestamp",		  "command",	  "mtime",	  "():timestamp ",															  "MTIMEcurrent_timestamp;"				  ]
[ "compute",			  "command",	  "mtime",	  "(r:zrule,year:int):date ",														  "MTIMEcompute_rule_foryear;"				  ]
[ "day",		  "command",	  "mtime",	  "(msecs:lng):lng ",																															  "MTIMEsql_day;"			  ]
[ "day",			  "command",	  "mtime",	  "(t:timestamp):int ",															  "MTIMEtimestamp_day;"					  ]
[ "daytime",			  "command",	  "mtime",	  "(h:int,m:int,s:int):daytime ",													  "MTIMEdaytime3;"					  ]
[ "daytime",			  "command",	  "mtime",	  "(h:int,m:int):daytime ",														  "MTIMEdaytime2;"					  ]
[ "daytime",			  "command",	  "mtime",	  "(h:int):daytime ",															  "MTIMEdaytime1;"					  ]
[ "date_to_str",		  "command",	  "mtime",	  "(d:date,format:str):str ",														  "MTIMEstrftime;"					  ]
[ "dayname",			  "command",	  "mtime",	  "(day:int):str ",															  "MTIMEday_to_str;"					  ]
[ "daynum",			  "command",	  "mtime",	  "(day:str):int ",															  "MTIMEday_from_str;"					  ]
[ "dst",			  "command",	  "mtime",	  "(t:timestamp,v:timezone):bit ",													  "MTIMEtimestamp_inside_dst;"				  ]
[ "diff",			  "command",	  "mtime",	  "(val1:timestamp,val2:timestamp):lng ",												  "MTIMEtimestamp_diff;"				  ]
[ "dayofweek",			  "command",	  "mtime",	  "(d:date):int ",															  "MTIMEdate_extract_dayofweek;"			  ]
[ "dayofyear",			  "command",	  "mtime",	  "(d:date):int ",															  "MTIMEdate_extract_dayofyear;"			  ]
[ "diff",			  "command",	  "mtime",	  "(val1:date,val2:date):int ",														  "MTIMEdate_diff;"					  ]
[ "day",			  "command",	  "mtime",	  "(t:zrule):int ",															  "MTIMErule_extract_day;"				  ]
[ "date",			  "command",	  "mtime",	  "(t:timestamp,v:timezone):date ",													  "MTIMEtimestamp_extract_date;"			  ]
[ "date",			  "command",	  "mtime",	  "(t:timestamp):date ",														  "MTIMEtimestamp_extract_date_default;"		  ]
[ "daytime",			  "command",	  "mtime",	  "(t:timestamp,v:timezone):daytime ",													  "MTIMEtimestamp_extract_daytime;"			  ]
[ "daytime",			  "command",	  "mtime",	  "(t:timestamp):daytime ",														  "MTIMEtimestamp_extract_daytime_default;"		  ]
[ "day",			  "command",	  "mtime",	  "(d:date):int ",															  "MTIMEdate_extract_day;"				  ]
[ "daytime",			  "command",	  "mtime",	  "(h:int,m:int,s:int,mi:int):daytime ",												  "MTIMEdaytime_create;"				  ]
[ "daytime",		  "command",	  "mtime",	  "(X_1:lng):daytime ",																															  "MTIMEsecs2daytime;"			  ]
[ "daytime",		  "command",	  "mtime",	  "(X_1:daytime):daytime ",																														  "MTIMEdaytime2daytime;"		  ]
[ "daytime",			  "command",	  "mtime",	  "(s:str):daytime ",															  "MTIMEdaytime_fromstr;"				  ]
[ "date",			  "command",	  "mtime",	  "(yr:int,mo:int,day:int):date ",													  "MTIMEdate_create;"					  ]
[ "date",			  "command",	  "mtime",	  "(s:str):date ",															  "MTIMEdate_fromstr;"					  ]
[ "date",		  "command",	  "mtime",	  "(X_1:void):date ",																															  "MTIMEnil2date;"			  ]
[ "date",		  "command",	  "mtime",	  "(X_1:date):date ",																															  "MTIMEdate2date;"			  ]
[ "date_add_month_interval",	  "command",	  "mtime",	  "(t:date,s:int):date ",											  "MTIMEdate_addmonths;"			  ]
[ "date_add_msec_interval", "command",	  "mtime",	  "(t:date,ms:lng):date ",																														  "MTIMEdate_add_msec_interval_lng_wrap;"  ]
[ "date_add_sec_interval",	  "command",	  "mtime",	  "(t:date,s:int):date ",														  "MTIMEdate_add_sec_interval_wrap;"			  ]
[ "date_sub_msec_interval", "command",	  "mtime",	  "(t:date,ms:lng):date ",																														  "MTIMEdate_sub_msec_interval_lng_wrap;"  ]
[ "date_sub_sec_interval",	  "command",	  "mtime",	  "(t:date,s:int):date ",														  "MTIMEdate_sub_sec_interval_wrap;"			  ]
[ "epilogue",			  "command",	  "mtime",	  "():void ",																  "MTIMEepilogue;"					  ]
[ "end_dst",			  "command",	  "mtime",	  "(t:timezone):zrule ",														  "MTIMEtzone_extract_end;"				  ]
[ "hours",		  "command",	  "mtime",	  "(msecs:lng):int ",																															  "MTIMEsql_hours;"			  ]
[ "hours",			  "command",	  "mtime",	  "(t:timestamp):int ",															  "MTIMEtimestamp_hours;"				  ]
[ "hours",			  "command",	  "mtime",	  "(h:daytime):int ",															  "MTIMEdaytime_extract_hours;"				  ]
[ "local_timezone",		  "command",	  "mtime",	  "():lng ",																  "MTIMElocal_timezone;"				  ]
[ "msec",			  "command",	  "mtime",	  "():lng ",																  "MTIMEmsec;"						  ]
[ "minutes",		  "command",	  "mtime",	  "(msecs:lng):int ",																															  "MTIMEsql_minutes;"			  ]
[ "month",			  "command",	  "mtime",	  "(months:int):int ",															  "MTIMEsql_month;"					  ]
[ "milliseconds",		  "command",	  "mtime",	  "(t:timestamp):int ",															  "MTIMEtimestamp_milliseconds;"			  ]
[ "minutes",			  "command",	  "mtime",	  "(t:timestamp):int ",															  "MTIMEtimestamp_minutes;"				  ]
[ "month",			  "command",	  "mtime",	  "(t:timestamp):int ",															  "MTIMEtimestamp_month;"				  ]
[ "msecs",			  "command",	  "mtime",	  "(d:int,h:int,m:int,s:int,ms:int):lng ",												  "MTIMEmsecs;"						  ]
[ "monthname",			  "command",	  "mtime",	  "(month:int):str ",															  "MTIMEmonth_to_str;"					  ]
[ "monthnum",			  "command",	  "mtime",	  "(month:str):int ",															  "MTIMEmonth_from_str;"				  ]
[ "minutes",			  "command",	  "mtime",	  "(t:zrule):int ",															  "MTIMErule_extract_minutes;"				  ]
[ "month",			  "command",	  "mtime",	  "(t:zrule):int ",															  "MTIMErule_extract_month;"				  ]
[ "minutes",			  "command",	  "mtime",	  "(t:timezone):int ",															  "MTIMEtzone_extract_minutes;"				  ]
[ "milliseconds",		  "command",	  "mtime",	  "(d:daytime):int ",															  "MTIMEdaytime_extract_milliseconds;"			  ]
[ "minutes",			  "command",	  "mtime",	  "(d:bat[:any_1,:daytime]):bat[:any_1,:int] ",									  "MTIMEdaytime_extract_minutes_bulk;"			  ]
[ "minutes",			  "command",	  "mtime",	  "(d:daytime):int ",															  "MTIMEdaytime_extract_minutes;"			  ]
[ "month",			  "command",	  "mtime",	  "(d:date):int ",															  "MTIMEdate_extract_month;"				  ]
[ "oldduration",		  "command",	  "mtime",	  "(format:str):int ",															  "MTIMEoldduration;"					  ]
[ "olddate",			  "command",	  "mtime",	  "(format:str):date ",															  "MTIMEolddate;"					  ]
[ "prelude",			  "command",	  "mtime",	  "():void ",																  "MTIMEprelude;"					  ]
[ "rule",			  "command",	  "mtime",	  "(mo:int,d:int,wkday:int,mi:int):zrule ",												  "MTIMErule_create;"					  ]
[ "rule",			  "command",	  "mtime",	  "(s:str):zrule ",															  "MTIMErule_fromstr;"					  ]
[ "seconds",		  "command",	  "mtime",	  "(msecs:lng):int ",																															  "MTIMEsql_seconds;"			  ]
[ "sql_seconds",		  "command",	  "mtime",	  "(t:timestamp):int ",										  "MTIMEtimestamp_sql_seconds;"		  ]
[ "seconds",			  "command",	  "mtime",	  "(t:timestamp):int ",															  "MTIMEtimestamp_seconds;"				  ]
[ "str_to_date",		  "command",	  "mtime",	  "(s:str,format:str):date ",														  "MTIMEstrptime;"					  ]
[ "start_dst",			  "command",	  "mtime",	  "(t:timezone):zrule ",														  "MTIMEtzone_extract_start;"				  ]
[ "setTimezone",		  "command",	  "mtime",	  "(name:str):timezone ",														  "MTIMEtimezone;"					  ]
[ "sql_seconds",		  "command",	  "mtime",	  "(d:daytime):int ",										  "MTIMEdaytime_extract_sql_seconds;"	  ]
[ "seconds",			  "command",	  "mtime",	  "(d:daytime):int ",															  "MTIMEdaytime_extract_seconds;"			  ]
[ "time_synonyms",		  "command",	  "mtime",	  "(allow:bit):void ",															  "MTIMEsynonyms;"					  ]
[ "timezone",			  "command",	  "mtime",	  "(mi:int,s:zrule,erule:zrule):timezone ",												  "MTIMEtzone_create_dst;"				  ]
[ "timezone",			  "command",	  "mtime",	  "(s:lng):timezone ",															  "MTIMEtzone_create;"					  ]
[ "timezone",			  "command",	  "mtime",	  "(s:int):timezone ",															  "MTIMEtzone_create;"					  ]
[ "timezone",			  "command",	  "mtime",	  "(s:str):timezone ",															  "MTIMEtzone_fromstr;"					  ]
[ "timestamp",			  "command",	  "mtime",	  "(d:date):timestamp ",														  "MTIMEtimestamp_create_from_date;"			  ]
[ "timestamp",			  "command",	  "mtime",	  "(d:date,dt:daytime):timestamp ",													  "MTIMEtimestamp_create_default;"			  ]
[ "timestamp",			  "command",	  "mtime",	  "(d:date,dt:daytime,t:timezone):timestamp ",												  "MTIMEtimestamp_create;"				  ]
[ "timezone_local",		  "command",	  "mtime",	  "():timezone ",															  "MTIMEtzone_get_local;"				  ]
[ "timezone_local",		  "command",	  "mtime",	  "(t:timezone):void ",															  "MTIMEtzone_set_local;"				  ]
[ "time_add_msec_interval", "command",	  "mtime",	  "(t:daytime,ms:lng):daytime ",																													  "MTIMEtime_add_msec_interval_wrap;"	  ]
[ "time_sub_msec_interval", "command",	  "mtime",	  "(t:daytime,ms:lng):daytime ",																													  "MTIMEtime_sub_msec_interval_wrap;"	  ]
[ "timestamp",			  "command",	  "mtime",	  "(t:timestamp):timestamp ",														  "MTIMEtimestamp2timestamp;"				  ]
[ "timestamp_add_month_interval", "command",	  "mtime",	  "(t:timestamp,s:int):timestamp ",													  "MTIMEtimestamp_add_month_interval_wrap;"		  ]
[ "timestamp_sub_month_interval", "command",	  "mtime",	  "(t:timestamp,s:int):timestamp ",													  "MTIMEtimestamp_sub_month_interval_wrap;"		  ]
[ "timestamp_add_msec_interval", "command",	  "mtime",	  "(t:timestamp,ms:lng):timestamp ",																													  "MTIMEtimestamp_add_msec_interval_lng_wrap;"  ]
[ "timestamp_sub_msec_interval", "command",	  "mtime",	  "(t:timestamp,ms:lng):timestamp ",																													  "MTIMEtimestamp_sub_msec_interval_lng_wrap;"  ]
[ "weekofyear",			  "command",	  "mtime",	  "(d:date):int ",															  "MTIMEdate_extract_weekofyear;"			  ]
[ "weekday",			  "command",	  "mtime",	  "(t:zrule):int ",															  "MTIMErule_extract_weekday;"				  ]
[ "year",			  "command",	  "mtime",	  "(months:int):int ",															  "MTIMEsql_year;"					  ]
[ "year",			  "command",	  "mtime",	  "(t:timestamp):int ",															  "MTIMEtimestamp_year;"				  ]
[ "year",			  "command",	  "mtime",	  "(d:date):int ",															  "MTIMEdate_extract_year;"				  ]
[ "#fromstr",			  "command",	  "timezone",	  "():timezone ",															  "tzone_fromstr;"					  ]
[ "str",			  "command",	  "timezone",	  "():str ",																  "MTIMEtzone_tostr;"					  ]
[ "timestamp",			  "command",	  "timezone",	  "(secs:int):timestamp ",														  "MTIMEtimestamp;"					  ]
[ "timestamp",			  "command",	  "timezone",	  "(s:str):timestamp ",															  "MTIMEtimestamp_fromstr;"				  ]
[ "#tostr",			  "command",	  "timezone",	  "():str ",																  "tzone_tostr;"					  ]
[ "define",			  "command",	  "zrule",	  "(m:int,d:str,w:int,min:int):zrule ",													  "MTIMEruleDef2;"					  ]
[ "define",			  "command",	  "zrule",	  "(m:int,d:str,w:int,h:int,min:int):zrule ",												  "MTIMEruleDef1;"					  ]
[ "define",			  "command",	  "zrule",	  "(m:int,d:int,w:int,h:int,min:int):zrule ",												  "MTIMEruleDef0;"					  ]
[ "#fromstr",			  "command",	  "zrule",	  "():zrule ",																  "rule_fromstr;"					  ]
[ "#tostr",			  "command",	  "zrule",	  "():str ",																  "rule_tostr;"						  ]
[ "day",			  "command",	  "batmtime",	  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",												  "MTIMEdate_extract_day_bulk;"				  ]
[ "hours",			  "command",	  "batmtime",	  "(d:bat[:any_1,:daytime]):bat[:any_1,:int] ",									  "MTIMEdaytime_extract_hours_bulk;"			  ]
[ "milliseconds",		  "command",	  "batmtime",	  "(d:bat[:any_1,:daytime]):bat[:any_1,:int] ",									  "MTIMEdaytime_extract_milliseconds_bulk;"		  ]
[ "month",			  "command",	  "batmtime",	  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",												  "MTIMEdate_extract_month_bulk;"			  ]
[ "sql_seconds",		  "command",	  "batmtime",	  "(d:bat[:any_1,:daytime]):bat[:any_1,:int] ",							  "MTIMEdaytime_extract_sql_seconds_bulk;"  ]
[ "seconds",			  "command",	  "batmtime",	  "(d:bat[:any_1,:daytime]):bat[:any_1,:int] ",									  "MTIMEdaytime_extract_seconds_bulk;"			  ]
[ "year",			  "command",	  "batmtime",	  "(d:bat[:any_1,:date]):bat[:any_1,:int] ",												  "MTIMEdate_extract_year_bulk;"			  ]
[ "!=",				  "command",	  "timestamp",	  "(v:timestamp,w:timestamp):bit ",													  "MTIMEtimestamp_NEQ;"					  ]
[ "<=",				  "command",	  "timestamp",	  "(v:timestamp,w:timestamp):bit ",													  "MTIMEtimestamp_LE;"					  ]
[ "<",				  "command",	  "timestamp",	  "(v:timestamp,w:timestamp):bit ",													  "MTIMEtimestamp_LT;"					  ]
[ "==",				  "command",	  "timestamp",	  "(v:timestamp,w:timestamp):bit ",													  "MTIMEtimestamp_EQ;"					  ]
[ ">=",				  "command",	  "timestamp",	  "(v:timestamp,w:timestamp):bit ",													  "MTIMEtimestamp_GE;"					  ]
[ ">",				  "command",	  "timestamp",	  "(v:timestamp,w:timestamp):bit ",													  "MTIMEtimestamp_GT;"					  ]
[ "epoch",			  "command",	  "timestamp",	  "(t:int):timestamp ",															  "MTIMEtimestamp;"					  ]
[ "epoch",			  "command",	  "timestamp",	  "(t:timestamp):int ",															  "MTIMEepoch2int;"					  ]
[ "epoch",			  "command",	  "timestamp",	  "():timestamp ",															  "MTIMEepoch;"						  ]
[ "#fromstr",			  "command",	  "timestamp",	  "():timestamp ",															  "timestamp_fromstr;"					  ]
[ "isnil",			  "command",	  "timestamp",	  "(v:timestamp):bit ",															  "MTIMEtimestamp_isnil;"				  ]
[ "#tostr",			  "command",	  "timestamp",	  "():str ",																  "timestamp_tostr;"					  ]
[ "unix_epoch",			  "command",	  "timestamp",	  "():timestamp ",															  "MTIMEunix_epoch;"					  ]
[ "!=",				  "command",	  "daytime",	  "(v:daytime,w:daytime):bit ",														  "MTIMEdaytime_NEQ;"					  ]
[ "<=",				  "command",	  "daytime",	  "(v:daytime,w:daytime):bit ",														  "MTIMEdaytime_LE;"					  ]
[ "<",				  "command",	  "daytime",	  "(v:daytime,w:daytime):bit ",														  "MTIMEdaytime_LT;"					  ]
[ "==",				  "command",	  "daytime",	  "(v:daytime,w:daytime):bit ",														  "MTIMEdaytime_EQ;"					  ]
[ ">=",				  "command",	  "daytime",	  "(v:daytime,w:daytime):bit ",														  "MTIMEdaytime_GE;"					  ]
[ ">",				  "command",	  "daytime",	  "(v:daytime,w:daytime):bit ",														  "MTIMEdaytime_GT;"					  ]
[ "#fromstr",			  "command",	  "daytime",	  "():daytime ",															  "daytime_tz_fromstr;"					  ]
[ "isnil",			  "command",	  "daytime",	  "(v:daytime):bit ",															  "MTIMEdaytime_isnil;"					  ]
[ "#tostr",			  "command",	  "daytime",	  "():str ",																  "daytime_tostr;"					  ]
[ "#fromstr",			  "command",	  "url",	  "():url ",																  "URLfromString;"					  ]
[ "getRobotURL",		  "command",	  "url",	  "(u:url):str ",															  "URLgetRobotURL;"					  ]
[ "getUser",			  "command",	  "url",	  "(u:url):str ",															  "URLgetUser;"						  ]
[ "getQueryArg",		  "command",	  "url",	  "(u:url):bat[:str,:str] ",														  "URLgetQueryArg;"					  ]
[ "getQuery",			  "command",	  "url",	  "(u:url):str ",															  "URLgetQuery;"					  ]
[ "getProtocol",		  "command",	  "url",	  "(u:url):str ",															  "URLgetProtocol;"					  ]
[ "getPort",			  "command",	  "url",	  "(u:url):str ",															  "URLgetPort;"						  ]
[ "getHost",			  "command",	  "url",	  "(u:url):str ",															  "URLgetHost;"						  ]
[ "getFile",			  "command",	  "url",	  "(u:url):str ",															  "URLgetFile;"						  ]
[ "getExtension",		  "command",	  "url",	  "(u:url):str ",															  "URLgetExtension;"					  ]
[ "getDomain",			  "command",	  "url",	  "(u:url):str ",															  "URLgetDomain;"					  ]
[ "getDirectory",		  "command",	  "url",	  "(u:url):bat[:int,:str] ",														  "URLgetDirectory;"					  ]
[ "getContext",			  "command",	  "url",	  "(u:url):str ",															  "URLgetContext;"					  ]
[ "getContent",			  "command",	  "url",	  "(u:url):str ",															  "URLgetContent;"					  ]
[ "getBasename",		  "command",	  "url",	  "(u:url):str ",															  "URLgetBasename;"					  ]
[ "getAnchor",			  "command",	  "url",	  "(u:url):str ",															  "URLgetAnchor;"					  ]
[ "isaURL",			  "command",	  "url",	  "(u:url):bit ",															  "URLisaURL;"						  ]
[ "new",			  "command",	  "url",	  "(prot:str,host:str,fnme:str):url ",													  "URLnew3;"						  ]
[ "new",			  "command",	  "url",	  "(p:str,h:str,prt:int,f:str):url ",													  "URLnew4;"						  ]
[ "#tostr",			  "command",	  "url",	  "():str ",																  "URLtoString;"					  ]
[ "url",			  "command",	  "url",	  "(s:url):url ",																  "URLnoop;"						  ]
[ "url",			  "command",	  "url",	  "(s:str):url ",															  "URLnew;"						  ]
[ "+",				  "command",	  "str",	  "(l:str,r:str):str ",															  "STRConcat;"						  ]
[ "STRepilogue",		  "command",	  "str",	  "():void ",																  "strEpilogue;"					  ]
[ "STRprelude",			  "command",	  "str",	  "():void ",																  "strPrelude;"						  ]
[ "ascii",			  "command",	  "str",	  "(s:str):int ",															  "STRascii;"						  ]
[ "codeset",			  "command",	  "str",	  "():str ",																  "STRcodeset;"						  ]
[ "endsWith",			  "command",	  "str",	  "(s:str,suffix:str):bit ",														  "STRSuffix;"						  ]
[ "ilike",				  "command",	  "str",	  "(s:str,pat:str):bit ",														  "PCREilike2;"						  ]
[ "ilike",				  "command",	  "str",	  "(s:str,pat:str,esc:str):bit ",													  "PCREilike3;"						  ]
[ "insert",			  "command",	  "str",	  "(s:str,start:int,l:int,s2:str):str ",												  "STRinsert;"						  ]
[ "iconv",			  "command",	  "str",	  "(org:str,fromCs:str,toCs:str):str ",													  "STRIconv;"						  ]
[ "like",			  "command",	  "str",	  "(s:str,pat:str):bit ",														  "PCRElike2;"						  ]
[ "like",			  "command",	  "str",	  "(s:str,pat:str,esc:str):bit ",													  "PCRElike3;"						  ]
[ "locate",			  "command",	  "str",	  "(s1:str,s2:str,start:int):int ",														  "STRlocate2;"						  ]
[ "locate",			  "command",	  "str",	  "(s1:str,s2:str):int ",														  "STRlocate;"						  ]
[ "like",			  "command",	  "str",	  "(s:str,pat:str,esc:str):bit ",													  "STRlikewrap;"					  ]
[ "like",			  "command",	  "str",	  "(s:str,pat:str):bit ",														  "STRlikewrap2;"					  ]
[ "ltrim",			  "command",	  "str",	  "(s:str):str ",															  "STRLtrim;"						  ]
[ "length",			  "command",	  "str",	  "(s:str):int ",															  "STRLength;"						  ]
[ "not_ilike",				  "command",	  "str",	  "(s:str,pat:str):bit ",														  "PCREnotilike2;"					  ]
[ "not_ilike",				  "command",	  "str",	  "(s:str,pat:str,esc:str):bit ",													  "PCREnotilike3;"					  ]
[ "not_like",				  "command",	  "str",	  "(s:str,pat:str):bit ",														  "PCREnotlike2;"					  ]
[ "not_like",				  "command",	  "str",	  "(s:str,pat:str,esc:str):bit ",													  "PCREnotlike3;"					  ]
[ "nbytes",			  "command",	  "str",	  "(s:str):int ",															  "STRBytes;"						  ]
[ "prefix",			  "command",	  "str",	  "(s:str,l:int):str ",															  "STRprefix;"						  ]
[ "repeat",			  "command",	  "str",	  "(s2:str,c:int):str ",														  "STRrepeat;"						  ]
[ "replace",			  "command",	  "str",	  "(s:str,pat:str,s2:str):str ",													  "STRreplace;"						  ]
[ "rtrim",			  "command",	  "str",	  "(s:str):str ",															  "STRRtrim;"						  ]
[ "r_search",			  "command",	  "str",	  "(s:str,c:str):int ",															  "STRReverseStrSearch;"				  ]
[ "space",			  "command",	  "str",	  "(l:int):str ",															  "STRspace;"						  ]
[ "stringright",		  "command",	  "str",	  "(s:str,l:int):str ",															  "STRsuffix;"						  ]
[ "stringleft",			  "command",	  "str",	  "(s:str,l:int):str ",															  "STRprefix;"						  ]
[ "suffix",			  "command",	  "str",	  "(s:str,l:int):str ",															  "STRsuffix;"						  ]
[ "substring",			  "command",	  "str",	  "(s:str,start:int,len:int):str ",													  "STRsubstring;"					  ]
[ "substring",			  "command",	  "str",	  "(s:str,start:int):str ",														  "STRsubstringTail;"					  ]
[ "substitute",			  "command",	  "str",	  "(s:str,src:str,dst:str,rep:bit):str ",												  "STRSubstitute;"					  ]
[ "search",			  "command",	  "str",	  "(s:str,c:str):int ",															  "STRstrSearch;"					  ]
[ "startsWith",			  "command",	  "str",	  "(s:str,prefix:str):bit ",														  "STRPrefix;"						  ]
[ "stringlength",		  "command",	  "str",	  "(s:str):int ",															  "STRstringLength;"					  ]
[ "string",			  "command",	  "str",	  "(s:str,offset:int,count:int):str ",													  "STRSubString;"					  ]
[ "string",			  "command",	  "str",	  "(s:str,offset:int):str ",														  "STRTail;"						  ]
[ "str",			  "command",	  "str",	  "(s:str):str ",															  "STRtostr;"						  ]
[ "trim",			  "command",	  "str",	  "(s:str):str ",															  "STRStrip;"						  ]
[ "toUpper",			  "command",	  "str",	  "(s:str):str ",															  "STRUpper;"						  ]
[ "toLower",			  "command",	  "str",	  "(s:str):str ",															  "STRLower;"						  ]
[ "unicode",			  "command",	  "str",	  "(wchar:int):str ",															  "STRFromWChr;"					  ]
[ "unicodeAt",			  "command",	  "str",	  "(s:str,index:int):int ",														  "STRWChrAt;"						  ]
[ "blue",			  "command",	  "color",	  "(c:color):int ",															  "CLRblue;"						  ]
[ "cb",				  "command",	  "color",	  "(c:color):int ",															  "CLRcb;"						  ]
[ "cr",				  "command",	  "color",	  "(c:color):int ",															  "CLRcr;"						  ]
[ "color",			  "command",	  "color",	  "(s:str):color ",															  "CLRcolor;"						  ]
[ "#fromstr",			  "command",	  "color",	  "():color ",																  "color_fromstr;"					  ]
[ "green",			  "command",	  "color",	  "(c:color):int ",															  "CLRgreen;"						  ]
[ "hue",			  "command",	  "color",	  "(c:color):flt ",															  "CLRhue;"						  ]
[ "hsv",			  "command",	  "color",	  "(h:flt,s:flt,v:flt):color ",														  "CLRhsv;"						  ]
[ "hue",			  "command",	  "color",	  "(c:color):int ",															  "CLRhueInt;"						  ]
[ "luminance",			  "command",	  "color",	  "(c:color):int ",															  "CLRluminance;"					  ]
[ "red",			  "command",	  "color",	  "(c:color):int ",															  "CLRred;"						  ]
[ "rgb",			  "command",	  "color",	  "(r:int,g:int,b:int):color ",														  "CLRrgb;"						  ]
[ "saturation",			  "command",	  "color",	  "(c:color):flt ",															  "CLRsaturation;"					  ]
[ "saturation",			  "command",	  "color",	  "(c:color):int ",															  "CLRsaturationInt;"					  ]
[ "str",			  "command",	  "color",	  "(s:color):str ",															  "CLRstr;"						  ]
[ "#tostr",			  "command",	  "color",	  "():str ",																  "color_tostr;"					  ]
[ "value",			  "command",	  "color",	  "(c:color):flt ",															  "CLRvalue;"						  ]
[ "value",			  "command",	  "color",	  "(c:color):int ",															  "CLRvalueInt;"					  ]
[ "ycc",			  "command",	  "color",	  "(y:int,cr:int,cb:int):color ",													  "CLRycc;"						  ]
[ "blob",			  "command",	  "blob",	  "(s:str):blob ",															  "BLOBblob_fromstr;"					  ]
[ "blob",			  "command",	  "blob",	  "(s:blob):blob ",															  "BLOBblob_blob;"					  ]
[ "#convert",			  "command",	  "blob",	  "():void ",																  "BLOBconvert;"					  ]
[ "#del",			  "command",	  "blob",	  "():void ",																  "BLOBdel;"						  ]
[ "#fromstr",			  "command",	  "blob",	  "():void ",																  "BLOBfromstr;"					  ]
[ "#heap",			  "command",	  "blob",	  "():void ",																  "BLOBheap;"						  ]
[ "#hash",			  "command",	  "blob",	  "():void ",																  "BLOBhash;"						  ]
[ "#length",			  "command",	  "blob",	  "():void ",																  "BLOBlength;"						  ]
[ "nitems",			  "command",	  "blob",	  "(b:blob):int ",															  "BLOBnitems;"						  ]
[ "#null",			  "command",	  "blob",	  "():void ",																  "BLOBnull;"						  ]
[ "#nequal",			  "command",	  "blob",	  "():void ",																  "BLOBnequal;"						  ]
[ "prelude",			  "command",	  "blob",	  "():void ",																  "BLOBprelude;"					  ]
[ "#put",			  "command",	  "blob",	  "():void ",																  "BLOBput;"						  ]
[ "#read",			  "command",	  "blob",	  "():void ",																  "BLOBread;"						  ]
[ "toblob",			  "command",	  "blob",	  "(v:str):blob ",															  "BLOBtoblob;"						  ]
[ "tostring",			  "command",	  "blob",	  "(v:blob,index:int):str ",														  "BLOBfromidx;"					  ]
[ "tostring",			  "command",	  "blob",	  "(v:blob):str ",															  "BLOBfromblob;"					  ]
[ "#tostr",			  "command",	  "blob",	  "():void ",																  "BLOBtostr;"						  ]
[ "#write",			  "command",	  "blob",	  "():void ",																  "BLOBwrite;"						  ]
[ "#fromstr",			  "command",	  "sqlblob",	  "():void ",																  "SQLBLOBfromstr;"					  ]
[ "sqlblob",			  "command",	  "sqlblob",	  "(s:str):sqlblob ",															  "BLOBsqlblob_fromstr;"				  ]
[ "sqlblob",			  "command",	  "sqlblob",	  "(s:sqlblob):sqlblob ",														  "BLOBblob_blob;"					  ]
[ "#tostr",			  "command",	  "sqlblob",	  "():void ",																  "SQLBLOBtostr;"					  ]
[ "bulk_rotate_xor_hash",	  "command",	  "mkey",	  "(h:bat[:oid,:wrd],nbits:int,b:bat[:oid,:any_1]):bat[:oid,:wrd] ",									  "MKEYbulk_rotate_xor_hash;"		  ]
[ "bulk_rotate_xor_hash",	  "pattern",	  "mkey",	  "(h:bat[:oid,:wrd],nbits:int,v:any):bat[:oid,:wrd] ",									  "MKEYbulkconst_rotate_xor_hash;"	  ]
[ "bulk_rotate_xor_hash",	  "command",	  "mkey",	  "(h:wrd,nbits:int,b:bat[:oid,:any_1]):bat[:oid,:wrd] ",								  "MKEYconstbulk_rotate_xor_hash;"	  ]
[ "bulk_rotate_xor_hash",	  "pattern",	  "mkey",	  "(h:wrd,nbits:int,v:any):wrd ",													  "MKEYrotate_xor_hash;"		  ]
[ "hash",			  "command",	  "mkey",		  "(b:bat[:oid,:any_1]):bat[:oid,:wrd] ",											  "MKEYbathash;"				  ]
[ "hash",			  "command",	  "mkey",	  "(v:str):wrd ",															  "MKEYhash_str;"			  ]
[ "hash",			  "command",	  "mkey",	  "(v:lng):wrd ",															  "MKEYhash_lng;"			  ]
[ "hash",			  "command",	  "mkey",	  "(v:dbl):wrd ",															  "MKEYhash_dbl;"			  ]
[ "hash",			  "command",	  "mkey",	  "(v:wrd):wrd ",															  "MKEYhash_wrd;"			  ]
[ "hash",			  "command",	  "mkey",	  "(v:flt):wrd ",															  "MKEYhash_flt;"			  ]
[ "hash",			  "command",	  "mkey",	  "(v:int):wrd ",															  "MKEYhash_int;"			  ]
[ "hash",			  "command",	  "mkey",	  "(v:sht):wrd ",															  "MKEYhash_sht;"			  ]
[ "hash",			  "command",	  "mkey",	  "(v:bte):wrd ",															  "MKEYhash_bte;"			  ]
[ "hash",			  "command",	  "mkey",	  "(v:bit):wrd ",															  "MKEYhash_bit;"			  ]
[ "hash",			  "pattern",	  "mkey",	  "(v:any):wrd ",															  "MKEYhash;"				  ]
[ "rotate",			  "command",	  "mkey",	  "(v:wrd,nbits:int):wrd ",														  "MKEYrotate;"				  ]
[ "dequeue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:dbl]):void ",														  "PQdequeue_dblmax;"					  ]
[ "dequeue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:dbl]):void ",														  "PQdequeue_dblmin;"					  ]
[ "dequeue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:flt]):void ",														  "PQdequeue_fltmax;"					  ]
[ "dequeue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:flt]):void ",														  "PQdequeue_fltmin;"					  ]
[ "dequeue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:lng]):void ",														  "PQdequeue_lngmax;"					  ]
[ "dequeue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:lng]):void ",														  "PQdequeue_lngmin;"					  ]
[ "dequeue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:ptr]):void ",														  "PQdequeue_ptrmax;"					  ]
[ "dequeue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:ptr]):void ",														  "PQdequeue_ptrmin;"					  ]
[ "dequeue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:wrd]):void ",														  "PQdequeue_wrdmax;"					  ]
[ "dequeue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:wrd]):void ",														  "PQdequeue_wrdmin;"					  ]
[ "dequeue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:oid]):void ",														  "PQdequeue_oidmax;"					  ]
[ "dequeue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:oid]):void ",														  "PQdequeue_oidmin;"					  ]
[ "dequeue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:int]):void ",														  "PQdequeue_intmax;"					  ]
[ "dequeue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:int]):void ",														  "PQdequeue_intmin;"					  ]
[ "dequeue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:sht]):void ",														  "PQdequeue_shtmax;"					  ]
[ "dequeue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:sht]):void ",														  "PQdequeue_shtmin;"					  ]
[ "dequeue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:bte]):void ",														  "PQdequeue_btemax;"					  ]
[ "dequeue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:bte]):void ",														  "PQdequeue_btemin;"					  ]
[ "dequeue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:any_1]):void ",														  "PQdequeue_anymax;"					  ]
[ "dequeue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:any_1]):void ",														  "PQdequeue_anymin;"					  ]
[ "enqueue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:dbl],id:oid,value:dbl):void ",												  "PQenqueue_dblmax;"					  ]
[ "enqueue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:dbl],id:oid,value:dbl):void ",												  "PQenqueue_dblmin;"					  ]
[ "enqueue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:flt],id:oid,value:flt):void ",												  "PQenqueue_fltmax;"					  ]
[ "enqueue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:flt],id:oid,value:flt):void ",												  "PQenqueue_fltmin;"					  ]
[ "enqueue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:lng],id:oid,value:lng):void ",												  "PQenqueue_lngmax;"					  ]
[ "enqueue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:lng],id:oid,value:lng):void ",												  "PQenqueue_lngmin;"					  ]
[ "enqueue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:ptr],id:oid,value:ptr):void ",												  "PQenqueue_ptrmax;"					  ]
[ "enqueue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:ptr],id:oid,value:ptr):void ",												  "PQenqueue_ptrmin;"					  ]
[ "enqueue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:wrd],id:oid,value:wrd):void ",												  "PQenqueue_wrdmax;"					  ]
[ "enqueue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:wrd],id:oid,value:wrd):void ",												  "PQenqueue_wrdmin;"					  ]
[ "enqueue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:oid],id:oid,value:oid):void ",												  "PQenqueue_oidmax;"					  ]
[ "enqueue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:oid],id:oid,value:oid):void ",												  "PQenqueue_oidmin;"					  ]
[ "enqueue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:int],id:oid,value:int):void ",												  "PQenqueue_intmax;"					  ]
[ "enqueue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:int],id:oid,value:int):void ",												  "PQenqueue_intmin;"					  ]
[ "enqueue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:sht],id:oid,value:sht):void ",												  "PQenqueue_shtmax;"					  ]
[ "enqueue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:sht],id:oid,value:sht):void ",												  "PQenqueue_shtmin;"					  ]
[ "enqueue_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:bte],id:oid,value:bte):void ",												  "PQenqueue_btemax;"					  ]
[ "enqueue_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:bte],id:oid,value:bte):void ",												  "PQenqueue_btemin;"					  ]
[ "enqueue_max",		  "pattern",	  "pqueue",	  "(h:bat[:oid,:any_1],id:oid,value:any_1):void ",											  "PQenqueue_anymax;"					  ]
[ "enqueue_min",		  "pattern",	  "pqueue",	  "(h:bat[:oid,:any_1],id:oid,value:any_1):void ",											  "PQenqueue_anymin;"					  ]
[ "init",			  "command",	  "pqueue",	  "(a:bat[:oid,:any_1],maxsize:wrd):bat[:oid,:any_1] ",									  "PQinit;"				  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:dbl],n:wrd):bat[:oid,:oid] ",												  "PQtopn_dblmax;"					  ]
[ "topreplace_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:dbl],id:oid,value:dbl):void ",												  "PQtopreplace_dblmax;"				  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:dbl],n:wrd):bat[:oid,:oid] ",												  "PQtopn_dblmin;"					  ]
[ "topreplace_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:dbl],id:oid,value:dbl):void ",												  "PQtopreplace_dblmin;"				  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:flt],n:wrd):bat[:oid,:oid] ",												  "PQtopn_fltmax;"					  ]
[ "topreplace_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:flt],id:oid,value:flt):void ",												  "PQtopreplace_fltmax;"				  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:flt],n:wrd):bat[:oid,:oid] ",												  "PQtopn_fltmin;"					  ]
[ "topreplace_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:flt],id:oid,value:flt):void ",												  "PQtopreplace_fltmin;"				  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:lng],n:wrd):bat[:oid,:oid] ",												  "PQtopn_lngmax;"					  ]
[ "topreplace_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:lng],id:oid,value:lng):void ",												  "PQtopreplace_lngmax;"				  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:lng],n:wrd):bat[:oid,:oid] ",												  "PQtopn_lngmin;"					  ]
[ "topreplace_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:lng],id:oid,value:lng):void ",												  "PQtopreplace_lngmin;"				  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:ptr],n:wrd):bat[:oid,:oid] ",												  "PQtopn_ptrmax;"					  ]
[ "topreplace_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:ptr],id:oid,value:ptr):void ",												  "PQtopreplace_ptrmax;"				  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:ptr],n:wrd):bat[:oid,:oid] ",												  "PQtopn_ptrmin;"					  ]
[ "topreplace_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:ptr],id:oid,value:ptr):void ",												  "PQtopreplace_ptrmin;"				  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:wrd],n:wrd):bat[:oid,:oid] ",												  "PQtopn_wrdmax;"					  ]
[ "topreplace_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:wrd],id:oid,value:wrd):void ",												  "PQtopreplace_wrdmax;"				  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:wrd],n:wrd):bat[:oid,:oid] ",												  "PQtopn_wrdmin;"					  ]
[ "topreplace_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:wrd],id:oid,value:wrd):void ",												  "PQtopreplace_wrdmin;"				  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:oid],n:wrd):bat[:oid,:oid] ",												  "PQtopn_oidmax;"				  ]
[ "topreplace_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:oid],id:oid,value:oid):void ",												  "PQtopreplace_oidmax;"				  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:oid],n:wrd):bat[:oid,:oid] ",												  "PQtopn_oidmin;"				  ]
[ "topreplace_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:oid],id:oid,value:oid):void ",												  "PQtopreplace_oidmin;"				  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:int],n:wrd):bat[:oid,:oid] ",												  "PQtopn_intmax;"					  ]
[ "topreplace_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:int],id:oid,value:int):void ",												  "PQtopreplace_intmax;"				  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:int],n:wrd):bat[:oid,:oid] ",												  "PQtopn_intmin;"					  ]
[ "topreplace_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:int],id:oid,value:int):void ",												  "PQtopreplace_intmin;"				  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:sht],n:wrd):bat[:oid,:oid] ",												  "PQtopn_shtmax;"					  ]
[ "topreplace_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:sht],id:oid,value:sht):void ",												  "PQtopreplace_shtmax;"				  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:sht],n:wrd):bat[:oid,:oid] ",												  "PQtopn_shtmin;"					  ]
[ "topreplace_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:sht],id:oid,value:sht):void ",												  "PQtopreplace_shtmin;"				  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:bte],n:wrd):bat[:oid,:oid] ",												  "PQtopn_btemax;"					  ]
[ "topreplace_max",		  "command",	  "pqueue",	  "(h:bat[:oid,:bte],id:oid,value:bte):void ",												  "PQtopreplace_btemax;"				  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:bte],n:wrd):bat[:oid,:oid] ",												  "PQtopn_btemin;"					  ]
[ "topreplace_min",		  "command",	  "pqueue",	  "(h:bat[:oid,:bte],id:oid,value:bte):void ",												  "PQtopreplace_btemin;"				  ]
[ "topn_max",			  "command",	  "pqueue",	  "(a:bat[:oid,:oid],t:bat[:void,:any_1],n:wrd):bat[:oid,:oid] ",									  "PQtopn2_anymax;"					  ]
[ "topn_max",			  "command",	  "pqueue",	  "(a:bat[:oid,:oid],t:bat[:oid,:any_1],n:wrd):bat[:oid,:oid] ",									  "PQtopn2_anymax;"					  ]
[ "topn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:any_1],n:wrd):bat[:oid,:oid] ",												  "PQtopn_anymax;"					  ]
[ "topreplace_max",		  "pattern",	  "pqueue",	  "(h:bat[:oid,:any_1],id:oid,value:any_1):void ",											  "PQtopreplace_anymax;"				  ]
[ "topn_min",			  "command",	  "pqueue",	  "(a:bat[:oid,:oid],t:bat[:void,:any_1],n:wrd):bat[:oid,:oid] ",									  "PQtopn2_anymin;"					  ]
[ "topn_min",			  "command",	  "pqueue",	  "(a:bat[:oid,:oid],t:bat[:oid,:any_1],n:wrd):bat[:oid,:oid] ",									  "PQtopn2_anymin;"					  ]
[ "topn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:any_1],n:wrd):bat[:oid,:oid] ",												  "PQtopn_anymin;"					  ]
[ "topreplace_min",		  "pattern",	  "pqueue",	  "(h:bat[:oid,:any_1],id:oid,value:any_1):void ",											  "PQtopreplace_anymin;"				  ]
[ "utopn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:dbl],n:wrd):bat[:oid,:oid] ",												  "PQutopn_dblmax;"					  ]
[ "utopn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:dbl],n:wrd):bat[:oid,:oid] ",												  "PQutopn_dblmin;"					  ]
[ "utopn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:flt],n:wrd):bat[:oid,:oid] ",												  "PQutopn_fltmax;"					  ]
[ "utopn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:flt],n:wrd):bat[:oid,:oid] ",												  "PQutopn_fltmin;"					  ]
[ "utopn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:lng],n:wrd):bat[:oid,:oid] ",												  "PQutopn_lngmax;"					  ]
[ "utopn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:lng],n:wrd):bat[:oid,:oid] ",												  "PQutopn_lngmin;"					  ]
[ "utopn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:ptr],n:wrd):bat[:oid,:oid] ",												  "PQutopn_ptrmax;"					  ]
[ "utopn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:ptr],n:wrd):bat[:oid,:oid] ",												  "PQutopn_ptrmin;"					  ]
[ "utopn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:wrd],n:wrd):bat[:oid,:oid] ",												  "PQutopn_wrdmax;"					  ]
[ "utopn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:wrd],n:wrd):bat[:oid,:oid] ",												  "PQutopn_wrdmin;"					  ]
[ "utopn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:oid],n:wrd):bat[:oid,:oid] ",												  "PQutopn_oidmax;"				  ]
[ "utopn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:oid],n:wrd):bat[:oid,:oid] ",												  "PQutopn_oidmin;"				  ]
[ "utopn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:int],n:wrd):bat[:oid,:oid] ",												  "PQutopn_intmax;"					  ]
[ "utopn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:int],n:wrd):bat[:oid,:oid] ",												  "PQutopn_intmin;"					  ]
[ "utopn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:sht],n:wrd):bat[:oid,:oid] ",												  "PQutopn_shtmax;"					  ]
[ "utopn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:sht],n:wrd):bat[:oid,:oid] ",												  "PQutopn_shtmin;"					  ]
[ "utopn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:bte],n:wrd):bat[:oid,:oid] ",												  "PQutopn_btemax;"					  ]
[ "utopn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:bte],n:wrd):bat[:oid,:oid] ",												  "PQutopn_btemin;"					  ]
[ "utopn_max",			  "command",	  "pqueue",	  "(a:bat[:oid,:oid],t:bat[:void,:any_1],n:wrd):bat[:oid,:oid] ",									  "PQutopn2_anymax;"					  ]
[ "utopn_max",			  "command",	  "pqueue",	  "(a:bat[:oid,:oid],t:bat[:oid,:any_1],n:wrd):bat[:oid,:oid] ",									  "PQutopn2_anymax;"					  ]
[ "utopn_max",			  "command",	  "pqueue",	  "(t:bat[:oid,:any_1],n:wrd):bat[:oid,:oid] ",												  "PQutopn_anymax;"					  ]
[ "utopn_min",			  "command",	  "pqueue",	  "(a:bat[:oid,:oid],t:bat[:void,:any_1],n:wrd):bat[:oid,:oid] ",									  "PQutopn2_anymin;"					  ]
[ "utopn_min",			  "command",	  "pqueue",	  "(a:bat[:oid,:oid],t:bat[:oid,:any_1],n:wrd):bat[:oid,:oid] ",									  "PQutopn2_anymin;"					  ]
[ "utopn_min",			  "command",	  "pqueue",	  "(t:bat[:oid,:any_1],n:wrd):bat[:oid,:oid] ",												  "PQutopn_anymin;"					  ]
[ "grid",			  "command",	  "array",	  "(b:bat[:oid,:lng],i:lng,j:lng,k:lng,l:lng,s:lng):bat[:oid,:lng] ",								  "ARRAYgridBATshift_lng;"			  ]
[ "grid",			  "command",	  "array",	  "(b:bat[:oid,:lng],i:lng,j:lng,k:lng,l:lng):bat[:oid,:lng] ",										  "ARRAYgridBAT_lng;"					  ]
[ "grid",			  "command",	  "array",	  "(i:lng,j:lng,k:lng,l:lng,s:lng):bat[:oid,:lng] ",											  "ARRAYgridShift_lng;"					  ]
[ "grid",			  "command",	  "array",	  "(i:lng,j:lng,k:lng,l:lng):bat[:oid,:lng] ",												  "ARRAYgrid_lng;"					  ]
[ "grid",			  "command",	  "array",	  "(b:bat[:oid,:int],i:int,j:int,k:int,l:int,s:int):bat[:oid,:int] ",								  "ARRAYgridBATshift_int;"			  ]
[ "grid",			  "command",	  "array",	  "(b:bat[:oid,:int],i:int,j:int,k:int,l:int):bat[:oid,:int] ",										  "ARRAYgridBAT_int;"					  ]
[ "grid",			  "command",	  "array",	  "(i:int,j:int,k:int,l:int,s:int):bat[:oid,:int] ",											  "ARRAYgridShift_int;"					  ]
[ "grid",			  "command",	  "array",	  "(i:int,j:int,k:int,l:int):bat[:oid,:int] ",												  "ARRAYgrid_int;"					  ]
[ "project",			  "command",	  "array",	  "(b:bat[:oid,:any_1],i:int):bat[:oid,:int] ",												  "ARRAYproject;"					  ]
[ "product",			  "command",	  "array",	  "(b:bat[:any_3,:any_1],c:bat[:any_4,:any_2]):bat[:any_1,:any_2] ",									  "ARRAYproduct;"					  ]
[ "avg",			  "command",	  "group",	  "(b:bat[:any_2,:oid],e:bat[:any_2,:any_1]):bat[:any_2,:oid] ",									  "GRPavg_oid;"						  ]
[ "avg",			  "command",	  "group",	  "(b:bat[:any_2,:dbl],e:bat[:any_2,:any_1]):bat[:any_2,:dbl] ",									  "GRPavg_dbl;"						  ]
[ "avg",			  "command",	  "group",	  "(b:bat[:any_2,:flt],e:bat[:any_2,:any_1]):bat[:any_2,:flt] ",									  "GRPavg_flt;"						  ]
[ "avg",			  "command",	  "group",	  "(b:bat[:any_2,:wrd],e:bat[:any_2,:any_1]):bat[:any_2,:wrd] ",									  "GRPavg_wrd;"						  ]
[ "avg",			  "command",	  "group",	  "(b:bat[:any_2,:lng],e:bat[:any_2,:any_1]):bat[:any_2,:lng] ",									  "GRPavg_lng;"						  ]
[ "avg",			  "command",	  "group",	  "(b:bat[:any_2,:int],e:bat[:any_2,:any_1]):bat[:any_2,:int] ",									  "GRPavg_int;"						  ]
[ "avg",			  "command",	  "group",	  "(b:bat[:any_2,:sht],e:bat[:any_2,:any_1]):bat[:any_2,:sht] ",									  "GRPavg_sht;"						  ]
[ "avg",			  "command",	  "group",	  "(b:bat[:any_2,:bte],e:bat[:any_2,:any_1]):bat[:any_2,:bte] ",									  "GRPavg_bte;"						  ]
[ "count",			  "command",	  "group",	  "(b:bat[:any_2,:any_1],e:bat[:any_2,:any_3],nonils:bit):bat[:any_2,:wrd] ",									  "GRPaggr_count;"				  ]
[ "deriveSum",			  "pattern",	  "group",	  "(s:bat[:oid,:dbl],l:bat[:oid,:any]...):bat[:oid,:dbl] ",										  "ALGderiveSum;"					  ]
[ "deriveSum",			  "pattern",	  "group",	  "(s:bat[:oid,:flt],l:bat[:oid,:any]...):bat[:oid,:flt] ",										  "ALGderiveSum;"					  ]
[ "deriveSum",			  "pattern",	  "group",	  "(s:bat[:oid,:lng],l:bat[:oid,:any]...):bat[:oid,:lng] ",										  "ALGderiveSum;"					  ]
[ "deriveSum",			  "pattern",	  "group",	  "(s:bat[:oid,:int],l:bat[:oid,:any]...):bat[:oid,:int] ",										  "ALGderiveSum;"					  ]
[ "deriveCount",		  "pattern",	  "group",	  "(l:bat[:oid,:any]...):bat[:oid,:wrd] ",												  "ALGderiveCount;"					  ]
[ "derivePath",			  "pattern",	  "group",	  "(l:bat[:oid,:any]...) (grp:bat[:oid,:any],ext:bat[:oid,:any]) ",									  "ALGderivePath;"					  ]
[ "done",			  "command",	  "group",	  "(histo:bat[:void,:wrd],map:bat[:void,:oid],a:bat[:oid,:any_2]) (hist:bat[:oid,:wrd],grp:bat[:oid,:oid]) ",				  "GRPderive;"					  ]
[ "done",			  "command",	  "group",	  "(hist:bat[:any_1,:wrd],map:bat[:any_1,:oid],a:bat[:any_1,:any_2]) (histo:bat[:any_1,:wrd],grp:bat[:any_1,:oid]) ",			  "GRPderive;"					  ]
[ "derive",			  "command",	  "group",	  "(histo:bat[:void,:wrd],map:bat[:void,:oid],a:bat[:oid,:any_2]) (hist:bat[:oid,:wrd],grp:bat[:oid,:oid]) ",				  "GRPderive;"					  ]
[ "derive",			  "command",	  "group",	  "(hist:bat[:any_1,:wrd],map:bat[:any_1,:oid],a:bat[:any_1,:any_2]) (histo:bat[:any_1,:wrd],grp:bat[:any_1,:oid]) ",			  "GRPderive;"					  ]
[ "done",			  "command",	  "group",	  "(attr:bat[:any_1,:any_2],N:int,rng:int) (histo:bat[:any_1,:wrd],grp:bat[:any_1,:oid]) ",						  "GRPgroup_custom;"				  ]
[ "done",			  "command",	  "group",	  "(attr:bat[:any_1,:any_2]) (histo:bat[:any_1,:wrd],grp:bat[:any_1,:oid]) ",								  "GRPgroup;"					  ]
[ "done",			  "command",	  "group",	  "(attr:bat[:any_1,:any_2]) (histo:bat[:any_1,:wrd],grp:bat[:any_1,:void]) ",								  "GRPgroup;"					  ]
[ "max",			  "command",	  "group",	  "(b:bat[:any_2,:any_1],e:bat[:any_2,:any_3]):bat[:any_2,:any_1] ",									  "GRPmax;"						  ]
[ "min",			  "command",	  "group",	  "(b:bat[:any_2,:any_1],e:bat[:any_2,:any_3]):bat[:any_2,:any_1] ",									  "GRPmin;"						  ]
[ "new",			  "command",	  "group",		  "(attr:bat[:any_1,:any_2],N:int,rng:int) (histo:bat[:any_1,:wrd],grp:bat[:any_1,:oid]) ",					  "GRPgroup_custom;"				  ]
[ "new",			  "command",	  "group",		  "(attr:bat[:any_1,:any_2]) (histo:bat[:any_1,:wrd],grp:bat[:any_1,:oid]) ",							  "GRPgroup;"					  ]
[ "new",			  "command",	  "group",		  "(attr:bat[:any_1,:any_2]) (histo:bat[:any_1,:wrd],grp:bat[:any_1,:void]) ",							  "GRPgroup;"					  ]
[ "new",			  "command",	  "group",	  "(b:bat[:any_1,:any_2],start:int,incr:int,grpsize:int):bat[:any_1,:int] ",								  "GRPgroup0;"						  ]
[ "prelude",			  "command",	  "group",	  "():void ",																  "GRPprelude;"						  ]
[ "refine_reverse",		  "command",	  "group",	  "(b:bat[:any_2,:any_3],a:bat[:any_2,:any_1]):bat[:any_2,:oid] ",									  "GRPrefine_rev;"					  ]
[ "refine",			  "command",	  "group",	  "(b:bat[:void,:any_3],a:bat[:oid,:any_1]):bat[:oid,:oid] ",										  "GRPrefine;"						  ]
[ "refine",			  "command",	  "group",	  "(b:bat[:oid,:any_3],a:bat[:void,:any_1]):bat[:oid,:oid] ",										  "GRPrefine;"						  ]
[ "refine",			  "command",	  "group",	  "(b:bat[:any_2,:any_3],a:bat[:any_2,:any_1]):bat[:any_2,:oid] ",									  "GRPrefine;"						  ]
[ "size",			  "command",	  "group",	  "(b:bat[:any_2,:bit],e:bat[:any_2,:any_1]):bat[:any_2,:wrd] ",										  "GRPsize;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:oid],size:int,shift:int):bat[:any_2,:oid] ",										  "GRPslidingsum_oid;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:oid],size:int):bat[:any_2,:oid] ",											  "GRPwindowsum_oid;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:oid],e:bat[:any_2,:any_1]):bat[:any_2,:oid] ",									  "GRPsum_oid_oid;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:dbl],size:int,shift:int):bat[:any_2,:dbl] ",										  "GRPslidingsum_dbl;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:dbl],size:int):bat[:any_2,:dbl] ",											  "GRPwindowsum_dbl;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:dbl],e:bat[:any_2,:any_1]):bat[:any_2,:dbl] ",									  "GRPsum_dbl_dbl;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:flt],size:int,shift:int):bat[:any_2,:flt] ",										  "GRPslidingsum_flt;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:flt],size:int):bat[:any_2,:flt] ",											  "GRPwindowsum_flt;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:flt],e:bat[:any_2,:any_1]):bat[:any_2,:flt] ",									  "GRPsum_flt_flt;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:wrd],size:int,shift:int):bat[:any_2,:wrd] ",										  "GRPslidingsum_wrd;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:wrd],size:int):bat[:any_2,:wrd] ",											  "GRPwindowsum_wrd;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:wrd],e:bat[:any_2,:any_1]):bat[:any_2,:wrd] ",									  "GRPsum_wrd_wrd;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:lng],size:int,shift:int):bat[:any_2,:lng] ",										  "GRPslidingsum_lng;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:lng],size:int):bat[:any_2,:lng] ",											  "GRPwindowsum_lng;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:lng],e:bat[:any_2,:any_1]):bat[:any_2,:lng] ",									  "GRPsum_lng_lng;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:int],size:int,shift:int):bat[:any_2,:int] ",										  "GRPslidingsum_int;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:int],size:int):bat[:any_2,:int] ",											  "GRPwindowsum_int;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:int],e:bat[:any_2,:any_1]):bat[:any_2,:int] ",									  "GRPsum_int_int;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:sht],size:int,shift:int):bat[:any_2,:sht] ",										  "GRPslidingsum_sht;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:sht],size:int):bat[:any_2,:sht] ",											  "GRPwindowsum_sht;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:sht],e:bat[:any_2,:any_1]):bat[:any_2,:sht] ",									  "GRPsum_sht_sht;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:bte],size:int,shift:int):bat[:any_2,:bte] ",										  "GRPslidingsum_bte;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:bte],size:int):bat[:any_2,:bte] ",											  "GRPwindowsum_bte;"					  ]
[ "sum",			  "command",	  "group",	  "(b:bat[:any_2,:bte],e:bat[:any_2,:any_1]):bat[:any_2,:bte] ",									  "GRPsum_bte_bte;"					  ]
[ "variance",			  "command",	  "group",	  "(b:bat[:any_2,:oid],e:bat[:any_2,:any_1]):bat[:any_2,:oid] ",									  "GRPvar_oid;"						  ]
[ "variance",			  "command",	  "group",	  "(b:bat[:any_2,:dbl],e:bat[:any_2,:any_1]):bat[:any_2,:dbl] ",									  "GRPvar_dbl;"						  ]
[ "variance",			  "command",	  "group",	  "(b:bat[:any_2,:flt],e:bat[:any_2,:any_1]):bat[:any_2,:flt] ",									  "GRPvar_flt;"						  ]
[ "variance",			  "command",	  "group",	  "(b:bat[:any_2,:wrd],e:bat[:any_2,:any_1]):bat[:any_2,:wrd] ",									  "GRPvar_wrd;"						  ]
[ "variance",			  "command",	  "group",	  "(b:bat[:any_2,:lng],e:bat[:any_2,:any_1]):bat[:any_2,:lng] ",									  "GRPvar_lng;"						  ]
[ "variance",			  "command",	  "group",	  "(b:bat[:any_2,:int],e:bat[:any_2,:any_1]):bat[:any_2,:int] ",									  "GRPvar_int;"						  ]
[ "variance",			  "command",	  "group",	  "(b:bat[:any_2,:sht],e:bat[:any_2,:any_1]):bat[:any_2,:sht] ",									  "GRPvar_sht;"						  ]
[ "variance",			  "command",	  "group",	  "(b:bat[:any_2,:bte],e:bat[:any_2,:any_1]):bat[:any_2,:bte] ",									  "GRPvar_bte;"						  ]
[ "batStatistics",		  "command",	  "status",	  "():bat[:str,:str] ",															  "SYSgdkEnv;"						  ]
[ "cpuStatistics",		  "command",	  "status",	  "():bat[:str,:int] ",															  "SYScpuStatistics;"					  ]
[ "getThreads",			  "command",	  "status",	  "():bat[:int,:str] ",															  "SYSgdkThread;"					  ]
[ "ioStatistics",		  "command",	  "status",	  "():bat[:str,:int] ",															  "SYSioStatistics;"					  ]
[ "mem_maxsize",		  "command",	  "status",	  "(v:lng):void ",															  "SYSsetmem_maxsize;"					  ]
[ "mem_maxsize",		  "command",	  "status",	  "():lng ",																  "SYSgetmem_maxsize;"					  ]
[ "mem_cursize",		  "command",	  "status",	  "():lng ",																  "SYSgetmem_cursize;"					  ]
[ "memUsage",			  "command",	  "status",	  "(minsize:lng):bat[:str,:lng] ",													  "SYSmem_usage;"					  ]
[ "memStatistics",		  "command",	  "status",	  "():bat[:str,:wrd] ",															  "SYSmemStatistics;"					  ]
[ "vm_maxsize",			  "command",	  "status",	  "(v:lng):void ",															  "SYSsetvm_maxsize;"					  ]
[ "vm_maxsize",			  "command",	  "status",	  "():lng ",																  "SYSgetvm_maxsize;"					  ]
[ "vm_cursize",			  "command",	  "status",	  "():lng ",																  "SYSgetvm_cursize;"					  ]
[ "vmStatistics",		  "command",	  "status",	  "(minsize:lng):bat[:str,:lng] ",													  "SYSvm_usage;"					  ]
[ "!=",				  "command",	  "calc",	  "(v:inet,w:inet):bit ",														  "INET_comp_NEQ;"					  ]
[ "!=",				  "command",	  "calc",	  "(v:timestamp,w:timestamp):bit ",													  "MTIMEtimestamp_NEQ;"					  ]
[ "!=",				  "command",	  "calc",	  "(v:daytime,w:daytime):bit ",														  "MTIMEdaytime_NEQ;"					  ]
[ "!=",				  "command",	  "calc",	  "(v:date,w:date):bit ",														  "MTIMEdate_NEQ;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:str,right:str):bit ",														  "CALCcompNEQstrstr;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:lng,right:lng):bit ",														  "CALCcompNEQlnglng;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:lng,right:int):bit ",														  "CALCcompNEQlngint;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:lng,right:sht):bit ",														  "CALCcompNEQlngsht;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:wrd,right:bte):bit ",														  "CALCcompNEQwrdbte;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:int,right:lng):bit ",														  "CALCcompNEQintlng;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:int,right:int):bit ",														  "CALCcompNEQintint;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:int,right:sht):bit ",														  "CALCcompNEQintsht;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:int,right:bte):bit ",														  "CALCcompNEQintbte;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:int,right:wrd):bit ",														  "CALCcompNEQintwrd;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:wrd,right:lng):bit ",														  "CALCcompNEQwrdlng;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:wrd,right:int):bit ",														  "CALCcompNEQwrdint;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:wrd,right:wrd):bit ",														  "CALCcompNEQwrdwrd;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:wrd,right:sht):bit ",														  "CALCcompNEQwrdsht;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:wrd,right:bte):bit ",														  "CALCcompNEQwrdbte;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:sht,right:lng):bit ",														  "CALCcompNEQshtlng;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:sht,right:int):bit ",														  "CALCcompNEQshtint;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:sht,right:wrd):bit ",														  "CALCcompNEQshtwrd;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:sht,right:sht):bit ",														  "CALCcompNEQshtsht;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:sht,right:bte):bit ",														  "CALCcompNEQshtbte;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:bte,right:lng):bit ",														  "CALCcompNEQbtelng;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:bte,right:wrd):bit ",														  "CALCcompNEQbtewrd;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:bte,right:int):bit ",														  "CALCcompNEQbteint;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:bte,right:sht):bit ",														  "CALCcompNEQbtesht;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:bte,right:bte):bit ",														  "CALCcompNEQbtebte;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:bit,right:lng):bit ",														  "CALCcompNEQbitlng;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:bit,right:int):bit ",														  "CALCcompNEQbitint;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:bit,right:sht):bit ",														  "CALCcompNEQbitsht;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:bit,right:bte):bit ",														  "CALCcompNEQbitbte;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:bit,right:bit):bit ",														  "CALCcompNEQbitbit;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:dbl,right:dbl):bit ",														  "CALCcompNEQdbldbl;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:flt,right:dbl):bit ",														  "CALCcompNEQfltdbl;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:flt,right:flt):bit ",														  "CALCcompNEQfltflt;"					  ]
[ "!=",				  "command",	  "calc",	  "(left:oid,right:oid):bit ",														  "CALCcompNEQoidoid;"					  ]
[ "%",				  "command",	  "calc",	  "(left:lng,right:dbl):dbl ",														  "CALCbinarycheckMODlngdbl;"				  ]
[ "%",				  "command",	  "calc",	  "(left:lng,right:flt):flt ",														  "CALCbinarycheckMODlngflt;"				  ]
[ "%",				  "command",	  "calc",	  "(left:lng,right:lng):lng ",														  "CALCbinarycheckMODlnglng;"				  ]
[ "%",				  "command",	  "calc",	  "(left:lng,right:wrd):wrd ",														  "CALCbinarycheckMODlngwrd;"				  ]
[ "%",				  "command",	  "calc",	  "(left:lng,right:int):int ",														  "CALCbinarycheckMODlngint;"				  ]
[ "%",				  "command",	  "calc",	  "(left:lng,right:sht):sht ",														  "CALCbinarycheckMODlngsht;"				  ]
[ "%",				  "command",	  "calc",	  "(left:lng,right:bte):bte ",														  "CALCbinarycheckMODlngbte;"				  ]
[ "%",				  "command",	  "calc",	  "(left:dbl,right:dbl):dbl ",														  "CALCbinarycheckMODdbldbl;"				  ]
[ "%",				  "command",	  "calc",	  "(left:dbl,right:flt):dbl ",														  "CALCbinarycheckMODdblflt;"				  ]
[ "%",				  "command",	  "calc",	  "(left:dbl,right:lng):dbl ",														  "CALCbinarycheckMODdbllng;"				  ]
[ "%",				  "command",	  "calc",	  "(left:dbl,right:wrd):dbl ",														  "CALCbinarycheckMODdblwrd;"				  ]
[ "%",				  "command",	  "calc",	  "(left:dbl,right:int):dbl ",														  "CALCbinarycheckMODdblint;"				  ]
[ "%",				  "command",	  "calc",	  "(left:dbl,right:sht):dbl ",														  "CALCbinarycheckMODdblsht;"				  ]
[ "%",				  "command",	  "calc",	  "(left:dbl,right:bte):dbl ",														  "CALCbinarycheckMODdblbte;"				  ]
[ "%",				  "command",	  "calc",	  "(left:flt,right:dbl):dbl ",														  "CALCbinarycheckMODfltdbl;"				  ]
[ "%",				  "command",	  "calc",	  "(left:flt,right:flt):flt ",														  "CALCbinarycheckMODfltflt;"				  ]
[ "%",				  "command",	  "calc",	  "(left:flt,right:lng):flt ",														  "CALCbinarycheckMODfltlng;"				  ]
[ "%",				  "command",	  "calc",	  "(left:flt,right:wrd):flt ",														  "CALCbinarycheckMODfltwrd;"				  ]
[ "%",				  "command",	  "calc",	  "(left:flt,right:int):flt ",														  "CALCbinarycheckMODfltint;"				  ]
[ "%",				  "command",	  "calc",	  "(left:flt,right:sht):flt ",														  "CALCbinarycheckMODfltsht;"				  ]
[ "%",				  "command",	  "calc",	  "(left:flt,right:bte):flt ",														  "CALCbinarycheckMODfltbte;"				  ]
[ "%",				  "command",	  "calc",	  "(left:wrd,right:dbl):dbl ",														  "CALCbinarycheckMODwrddbl;"				  ]
[ "%",				  "command",	  "calc",	  "(left:wrd,right:flt):flt ",														  "CALCbinarycheckMODwrdflt;"				  ]
[ "%",				  "command",	  "calc",	  "(left:wrd,right:lng):lng ",														  "CALCbinarycheckMODwrdlng;"				  ]
[ "%",				  "command",	  "calc",	  "(left:wrd,right:wrd):wrd ",														  "CALCbinarycheckMODwrdwrd;"				  ]
[ "%",				  "command",	  "calc",	  "(left:wrd,right:int):int ",														  "CALCbinarycheckMODwrdint;"				  ]
[ "%",				  "command",	  "calc",	  "(left:wrd,right:sht):sht ",														  "CALCbinarycheckMODwrdsht;"				  ]
[ "%",				  "command",	  "calc",	  "(left:wrd,right:bte):bte ",														  "CALCbinarycheckMODwrdbte;"				  ]
[ "%",				  "command",	  "calc",	  "(left:int,right:dbl):dbl ",														  "CALCbinarycheckMODintdbl;"				  ]
[ "%",				  "command",	  "calc",	  "(left:int,right:flt):flt ",														  "CALCbinarycheckMODintflt;"				  ]
[ "%",				  "command",	  "calc",	  "(left:int,right:lng):lng ",														  "CALCbinarycheckMODintlng;"				  ]
[ "%",				  "command",	  "calc",	  "(left:int,right:wrd):wrd ",														  "CALCbinarycheckMODintwrd;"				  ]
[ "%",				  "command",	  "calc",	  "(left:int,right:int):int ",														  "CALCbinarycheckMODintint;"				  ]
[ "%",				  "command",	  "calc",	  "(left:int,right:sht):sht ",														  "CALCbinarycheckMODintsht;"				  ]
[ "%",				  "command",	  "calc",	  "(left:int,right:bte):bte ",														  "CALCbinarycheckMODintbte;"				  ]
[ "%",				  "command",	  "calc",	  "(left:sht,right:dbl):dbl ",														  "CALCbinarycheckMODshtdbl;"				  ]
[ "%",				  "command",	  "calc",	  "(left:sht,right:flt):flt ",														  "CALCbinarycheckMODshtflt;"				  ]
[ "%",				  "command",	  "calc",	  "(left:sht,right:lng):lng ",														  "CALCbinarycheckMODshtlng;"				  ]
[ "%",				  "command",	  "calc",	  "(left:sht,right:wrd):wrd ",														  "CALCbinarycheckMODshtwrd;"				  ]
[ "%",				  "command",	  "calc",	  "(left:sht,right:int):int ",														  "CALCbinarycheckMODshtint;"				  ]
[ "%",				  "command",	  "calc",	  "(left:sht,right:sht):sht ",														  "CALCbinarycheckMODshtsht;"				  ]
[ "%",				  "command",	  "calc",	  "(left:sht,right:bte):bte ",														  "CALCbinarycheckMODshtbte;"				  ]
[ "%",				  "command",	  "calc",	  "(left:bte,right:dbl):dbl ",														  "CALCbinarycheckMODbtedbl;"				  ]
[ "%",				  "command",	  "calc",	  "(left:bte,right:flt):flt ",														  "CALCbinarycheckMODbteflt;"				  ]
[ "%",				  "command",	  "calc",	  "(left:bte,right:lng):lng ",														  "CALCbinarycheckMODbtelng;"				  ]
[ "%",				  "command",	  "calc",	  "(left:bte,right:wrd):wrd ",														  "CALCbinarycheckMODbtewrd;"				  ]
[ "%",				  "command",	  "calc",	  "(left:bte,right:int):int ",														  "CALCbinarycheckMODbteint;"				  ]
[ "%",				  "command",	  "calc",	  "(left:bte,right:sht):sht ",														  "CALCbinarycheckMODbtesht;"				  ]
[ "%",				  "command",	  "calc",	  "(left:bte,right:bte):bte ",														  "CALCbinarycheckMODbtebte;"				  ]
[ "%",				  "command",	  "calc",	  "(left:oid,right:oid):oid ",														  "CALCbinarycheckMODoidoid;"				  ]
[ "*",				  "command",	  "calc",	  "(left:lng,right:dbl):dbl ",														  "CALCbinaryMULlngdbl;"				  ]
[ "*",				  "command",	  "calc",	  "(left:lng,right:flt):dbl ",														  "CALCbinaryMULlngflt;"				  ]
[ "*",				  "command",	  "calc",	  "(left:lng,right:lng):lng ",														  "CALCbinaryMULlnglng;"				  ]
[ "*",				  "command",	  "calc",	  "(left:lng,right:wrd):lng ",														  "CALCbinaryMULlngwrd;"				  ]
[ "*",				  "command",	  "calc",	  "(left:lng,right:int):lng ",														  "CALCbinaryMULlngint;"				  ]
[ "*",				  "command",	  "calc",	  "(left:lng,right:sht):lng ",														  "CALCbinaryMULlngsht;"				  ]
[ "*",				  "command",	  "calc",	  "(left:lng,right:bte):lng ",														  "CALCbinaryMULlngbte;"				  ]
[ "*",				  "command",	  "calc",	  "(left:dbl,right:dbl):dbl ",														  "CALCbinaryMULdbldbl;"				  ]
[ "*",				  "command",	  "calc",	  "(left:dbl,right:flt):dbl ",														  "CALCbinaryMULdblflt;"				  ]
[ "*",				  "command",	  "calc",	  "(left:dbl,right:lng):dbl ",														  "CALCbinaryMULdbllng;"				  ]
[ "*",				  "command",	  "calc",	  "(left:dbl,right:wrd):dbl ",														  "CALCbinaryMULdblwrd;"				  ]
[ "*",				  "command",	  "calc",	  "(left:dbl,right:int):dbl ",														  "CALCbinaryMULdblint;"				  ]
[ "*",				  "command",	  "calc",	  "(left:dbl,right:sht):dbl ",														  "CALCbinaryMULdblsht;"				  ]
[ "*",				  "command",	  "calc",	  "(left:dbl,right:bte):dbl ",														  "CALCbinaryMULdblbte;"				  ]
[ "*",				  "command",	  "calc",	  "(left:flt,right:dbl):dbl ",														  "CALCbinaryMULfltdbl;"				  ]
[ "*",				  "command",	  "calc",	  "(left:flt,right:flt):flt ",														  "CALCbinaryMULfltflt;"				  ]
[ "*",				  "command",	  "calc",	  "(left:flt,right:lng):flt ",														  "CALCbinaryMULfltlng;"				  ]
[ "*",				  "command",	  "calc",	  "(left:flt,right:wrd):flt ",														  "CALCbinaryMULfltwrd;"				  ]
[ "*",				  "command",	  "calc",	  "(left:flt,right:int):flt ",														  "CALCbinaryMULfltint;"				  ]
[ "*",				  "command",	  "calc",	  "(left:flt,right:sht):flt ",														  "CALCbinaryMULfltsht;"				  ]
[ "*",				  "command",	  "calc",	  "(left:flt,right:bte):flt ",														  "CALCbinaryMULfltbte;"				  ]
[ "*",				  "command",	  "calc",	  "(left:wrd,right:dbl):dbl ",														  "CALCbinaryMULwrddbl;"				  ]
[ "*",				  "command",	  "calc",	  "(left:wrd,right:flt):flt ",														  "CALCbinaryMULwrdflt;"				  ]
[ "*",				  "command",	  "calc",	  "(left:wrd,right:lng):lng ",														  "CALCbinaryMULwrdlng;"				  ]
[ "*",				  "command",	  "calc",	  "(left:wrd,right:wrd):wrd ",														  "CALCbinaryMULwrdwrd;"				  ]
[ "*",				  "command",	  "calc",	  "(left:wrd,right:int):wrd ",														  "CALCbinaryMULwrdint;"				  ]
[ "*",				  "command",	  "calc",	  "(left:wrd,right:sht):wrd ",														  "CALCbinaryMULwrdsht;"				  ]
[ "*",				  "command",	  "calc",	  "(left:wrd,right:bte):wrd ",														  "CALCbinaryMULwrdbte;"				  ]
[ "*",				  "command",	  "calc",	  "(left:int,right:dbl):dbl ",														  "CALCbinaryMULintdbl;"				  ]
[ "*",				  "command",	  "calc",	  "(left:int,right:flt):flt ",														  "CALCbinaryMULintflt;"				  ]
[ "*",				  "command",	  "calc",	  "(left:int,right:lng):lng ",														  "CALCbinaryMULintlng;"				  ]
[ "*",				  "command",	  "calc",	  "(left:int,right:wrd):wrd ",														  "CALCbinaryMULintwrd;"				  ]
[ "*",				  "command",	  "calc",	  "(left:int,right:int):int ",														  "CALCbinaryMULintint;"				  ]
[ "*",				  "command",	  "calc",	  "(left:int,right:sht):int ",														  "CALCbinaryMULintsht;"				  ]
[ "*",				  "command",	  "calc",	  "(left:int,right:bte):int ",														  "CALCbinaryMULintbte;"				  ]
[ "*",				  "command",	  "calc",	  "(left:sht,right:dbl):dbl ",														  "CALCbinaryMULshtdbl;"				  ]
[ "*",				  "command",	  "calc",	  "(left:sht,right:flt):flt ",														  "CALCbinaryMULshtflt;"				  ]
[ "*",				  "command",	  "calc",	  "(left:sht,right:lng):lng ",														  "CALCbinaryMULshtlng;"				  ]
[ "*",				  "command",	  "calc",	  "(left:sht,right:wrd):wrd ",														  "CALCbinaryMULshtwrd;"				  ]
[ "*",				  "command",	  "calc",	  "(left:sht,right:int):int ",														  "CALCbinaryMULshtint;"				  ]
[ "*",				  "command",	  "calc",	  "(left:sht,right:sht):sht ",														  "CALCbinaryMULshtsht;"				  ]
[ "*",				  "command",	  "calc",	  "(left:sht,right:bte):sht ",														  "CALCbinaryMULshtbte;"				  ]
[ "*",				  "command",	  "calc",	  "(left:bte,right:dbl):dbl ",														  "CALCbinaryMULbtedbl;"				  ]
[ "*",				  "command",	  "calc",	  "(left:bte,right:flt):flt ",														  "CALCbinaryMULbteflt;"				  ]
[ "*",				  "command",	  "calc",	  "(left:bte,right:lng):lng ",														  "CALCbinaryMULbtelng;"				  ]
[ "*",				  "command",	  "calc",	  "(left:bte,right:wrd):wrd ",														  "CALCbinaryMULbtewrd;"				  ]
[ "*",				  "command",	  "calc",	  "(left:bte,right:int):int ",														  "CALCbinaryMULbteint;"				  ]
[ "*",				  "command",	  "calc",	  "(left:bte,right:sht):sht ",														  "CALCbinaryMULbtesht;"				  ]
[ "*",				  "command",	  "calc",	  "(left:bte,right:bte):bte ",														  "CALCbinaryMULbtebte;"				  ]
[ "*",				  "command",	  "calc",	  "(left:oid,right:oid):oid ",														  "CALCbinaryMULoidoid;"				  ]
[ "+",				  "command",	  "calc",	  "(left:lng,right:dbl):dbl ",														  "CALCbinaryADDlngdbl;"				  ]
[ "+",				  "command",	  "calc",	  "(left:lng,right:flt):dbl ",														  "CALCbinaryADDlngflt;"				  ]
[ "+",				  "command",	  "calc",	  "(left:lng,right:lng):lng ",														  "CALCbinaryADDlnglng;"				  ]
[ "+",				  "command",	  "calc",	  "(left:lng,right:wrd):lng ",														  "CALCbinaryADDlngwrd;"				  ]
[ "+",				  "command",	  "calc",	  "(left:lng,right:int):lng ",														  "CALCbinaryADDlngint;"				  ]
[ "+",				  "command",	  "calc",	  "(left:lng,right:sht):lng ",														  "CALCbinaryADDlngsht;"				  ]
[ "+",				  "command",	  "calc",	  "(left:lng,right:bte):lng ",														  "CALCbinaryADDlngbte;"				  ]
[ "+",				  "command",	  "calc",	  "(left:dbl,right:dbl):dbl ",														  "CALCbinaryADDdbldbl;"				  ]
[ "+",				  "command",	  "calc",	  "(left:dbl,right:flt):dbl ",														  "CALCbinaryADDdblflt;"				  ]
[ "+",				  "command",	  "calc",	  "(left:dbl,right:lng):dbl ",														  "CALCbinaryADDdbllng;"				  ]
[ "+",				  "command",	  "calc",	  "(left:dbl,right:wrd):dbl ",														  "CALCbinaryADDdblwrd;"				  ]
[ "+",				  "command",	  "calc",	  "(left:dbl,right:int):dbl ",														  "CALCbinaryADDdblint;"				  ]
[ "+",				  "command",	  "calc",	  "(left:dbl,right:sht):dbl ",														  "CALCbinaryADDdblsht;"				  ]
[ "+",				  "command",	  "calc",	  "(left:dbl,right:bte):dbl ",														  "CALCbinaryADDdblbte;"				  ]
[ "+",				  "command",	  "calc",	  "(left:flt,right:dbl):dbl ",														  "CALCbinaryADDfltdbl;"				  ]
[ "+",				  "command",	  "calc",	  "(left:flt,right:flt):flt ",														  "CALCbinaryADDfltflt;"				  ]
[ "+",				  "command",	  "calc",	  "(left:flt,right:lng):flt ",														  "CALCbinaryADDfltlng;"				  ]
[ "+",				  "command",	  "calc",	  "(left:flt,right:wrd):flt ",														  "CALCbinaryADDfltwrd;"				  ]
[ "+",				  "command",	  "calc",	  "(left:flt,right:int):flt ",														  "CALCbinaryADDfltint;"				  ]
[ "+",				  "command",	  "calc",	  "(left:flt,right:sht):flt ",														  "CALCbinaryADDfltsht;"				  ]
[ "+",				  "command",	  "calc",	  "(left:flt,right:bte):flt ",														  "CALCbinaryADDfltbte;"				  ]
[ "+",				  "command",	  "calc",	  "(left:wrd,right:dbl):dbl ",														  "CALCbinaryADDwrddbl;"				  ]
[ "+",				  "command",	  "calc",	  "(left:wrd,right:flt):flt ",														  "CALCbinaryADDwrdflt;"				  ]
[ "+",				  "command",	  "calc",	  "(left:wrd,right:lng):lng ",														  "CALCbinaryADDwrdlng;"				  ]
[ "+",				  "command",	  "calc",	  "(left:wrd,right:wrd):wrd ",														  "CALCbinaryADDwrdwrd;"				  ]
[ "+",				  "command",	  "calc",	  "(left:wrd,right:int):wrd ",														  "CALCbinaryADDwrdint;"				  ]
[ "+",				  "command",	  "calc",	  "(left:wrd,right:sht):wrd ",														  "CALCbinaryADDwrdsht;"				  ]
[ "+",				  "command",	  "calc",	  "(left:wrd,right:bte):wrd ",														  "CALCbinaryADDwrdbte;"				  ]
[ "+",				  "command",	  "calc",	  "(left:int,right:dbl):dbl ",														  "CALCbinaryADDintdbl;"				  ]
[ "+",				  "command",	  "calc",	  "(left:int,right:flt):flt ",														  "CALCbinaryADDintflt;"				  ]
[ "+",				  "command",	  "calc",	  "(left:int,right:lng):lng ",														  "CALCbinaryADDintlng;"				  ]
[ "+",				  "command",	  "calc",	  "(left:int,right:wrd):wrd ",														  "CALCbinaryADDintwrd;"				  ]
[ "+",				  "command",	  "calc",	  "(left:int,right:int):int ",														  "CALCbinaryADDintint;"				  ]
[ "+",				  "command",	  "calc",	  "(left:int,right:sht):int ",														  "CALCbinaryADDintsht;"				  ]
[ "+",				  "command",	  "calc",	  "(left:int,right:bte):int ",														  "CALCbinaryADDintbte;"				  ]
[ "+",				  "command",	  "calc",	  "(left:sht,right:dbl):dbl ",														  "CALCbinaryADDshtdbl;"				  ]
[ "+",				  "command",	  "calc",	  "(left:sht,right:flt):flt ",														  "CALCbinaryADDshtflt;"				  ]
[ "+",				  "command",	  "calc",	  "(left:sht,right:lng):lng ",														  "CALCbinaryADDshtlng;"				  ]
[ "+",				  "command",	  "calc",	  "(left:sht,right:wrd):wrd ",														  "CALCbinaryADDshtwrd;"				  ]
[ "+",				  "command",	  "calc",	  "(left:sht,right:int):int ",														  "CALCbinaryADDshtint;"				  ]
[ "+",				  "command",	  "calc",	  "(left:sht,right:sht):sht ",														  "CALCbinaryADDshtsht;"				  ]
[ "+",				  "command",	  "calc",	  "(left:sht,right:bte):sht ",														  "CALCbinaryADDshtbte;"				  ]
[ "+",				  "command",	  "calc",	  "(left:bte,right:dbl):dbl ",														  "CALCbinaryADDbtedbl;"				  ]
[ "+",				  "command",	  "calc",	  "(left:bte,right:flt):flt ",														  "CALCbinaryADDbteflt;"				  ]
[ "+",				  "command",	  "calc",	  "(left:bte,right:lng):lng ",														  "CALCbinaryADDbtelng;"				  ]
[ "+",				  "command",	  "calc",	  "(left:bte,right:wrd):wrd ",														  "CALCbinaryADDbtewrd;"				  ]
[ "+",				  "command",	  "calc",	  "(left:bte,right:int):int ",														  "CALCbinaryADDbteint;"				  ]
[ "+",				  "command",	  "calc",	  "(left:bte,right:sht):sht ",														  "CALCbinaryADDbtesht;"				  ]
[ "+",				  "command",	  "calc",	  "(left:bte,right:bte):bte ",														  "CALCbinaryADDbtebte;"				  ]
[ "+",				  "command",	  "calc",	  "(left:oid,right:oid):oid ",														  "CALCbinaryADDoidoid;"				  ]
[ "+",				  "command",	  "calc",	  "(l:str,r:int):str ",															  "CALCstrConcatInt;"					  ]
[ "+",				  "command",	  "calc",	  "(l:str,r:str):str ",															  "CALCstrConcat;"					  ]
[ "-",				  "command",	  "calc",	  "(x:dbl):dbl ",															  "CALCunarydblNEG;"					  ]
[ "-",				  "command",	  "calc",	  "(x:lng):lng ",															  "CALCunarylngNEG;"					  ]
[ "-",				  "command",	  "calc",	  "(x:flt):flt ",															  "CALCunaryfltNEG;"					  ]
[ "-",				  "command",	  "calc",	  "(x:wrd):wrd ",															  "CALCunarywrdNEG;"					  ]
[ "-",				  "command",	  "calc",	  "(x:int):int ",															  "CALCunaryintNEG;"					  ]
[ "-",				  "command",	  "calc",	  "(x:sht):sht ",															  "CALCunaryshtNEG;"					  ]
[ "-",				  "command",	  "calc",	  "(x:bte):bte ",															  "CALCunarybteNEG;"					  ]
[ "-",				  "command",	  "calc",	  "(x:bit):bit ",														  "CALCunarybitNEG;"					  ]
[ "-",				  "command",	  "calc",	  "(left:lng,right:dbl):dbl ",														  "CALCbinarySUBlngdbl;"				  ]
[ "-",				  "command",	  "calc",	  "(left:lng,right:flt):dbl ",														  "CALCbinarySUBlngflt;"				  ]
[ "-",				  "command",	  "calc",	  "(left:lng,right:lng):lng ",														  "CALCbinarySUBlnglng;"				  ]
[ "-",				  "command",	  "calc",	  "(left:lng,right:wrd):lng ",														  "CALCbinarySUBlngwrd;"				  ]
[ "-",				  "command",	  "calc",	  "(left:lng,right:int):lng ",														  "CALCbinarySUBlngint;"				  ]
[ "-",				  "command",	  "calc",	  "(left:lng,right:sht):lng ",														  "CALCbinarySUBlngsht;"				  ]
[ "-",				  "command",	  "calc",	  "(left:lng,right:bte):lng ",														  "CALCbinarySUBlngbte;"				  ]
[ "-",				  "command",	  "calc",	  "(left:dbl,right:dbl):dbl ",														  "CALCbinarySUBdbldbl;"				  ]
[ "-",				  "command",	  "calc",	  "(left:dbl,right:flt):dbl ",														  "CALCbinarySUBdblflt;"				  ]
[ "-",				  "command",	  "calc",	  "(left:dbl,right:lng):dbl ",														  "CALCbinarySUBdbllng;"				  ]
[ "-",				  "command",	  "calc",	  "(left:dbl,right:wrd):dbl ",														  "CALCbinarySUBdblwrd;"				  ]
[ "-",				  "command",	  "calc",	  "(left:dbl,right:int):dbl ",														  "CALCbinarySUBdblint;"				  ]
[ "-",				  "command",	  "calc",	  "(left:dbl,right:sht):dbl ",														  "CALCbinarySUBdblsht;"				  ]
[ "-",				  "command",	  "calc",	  "(left:dbl,right:bte):dbl ",														  "CALCbinarySUBdblbte;"				  ]
[ "-",				  "command",	  "calc",	  "(left:flt,right:dbl):dbl ",														  "CALCbinarySUBfltdbl;"				  ]
[ "-",				  "command",	  "calc",	  "(left:flt,right:flt):flt ",														  "CALCbinarySUBfltflt;"				  ]
[ "-",				  "command",	  "calc",	  "(left:flt,right:lng):flt ",														  "CALCbinarySUBfltlng;"				  ]
[ "-",				  "command",	  "calc",	  "(left:flt,right:wrd):flt ",														  "CALCbinarySUBfltwrd;"				  ]
[ "-",				  "command",	  "calc",	  "(left:flt,right:int):flt ",														  "CALCbinarySUBfltint;"				  ]
[ "-",				  "command",	  "calc",	  "(left:flt,right:sht):flt ",														  "CALCbinarySUBfltsht;"				  ]
[ "-",				  "command",	  "calc",	  "(left:flt,right:bte):flt ",														  "CALCbinarySUBfltbte;"				  ]
[ "-",				  "command",	  "calc",	  "(left:wrd,right:dbl):dbl ",														  "CALCbinarySUBwrddbl;"				  ]
[ "-",				  "command",	  "calc",	  "(left:wrd,right:flt):flt ",														  "CALCbinarySUBwrdflt;"				  ]
[ "-",				  "command",	  "calc",	  "(left:wrd,right:lng):lng ",														  "CALCbinarySUBwrdlng;"				  ]
[ "-",				  "command",	  "calc",	  "(left:wrd,right:wrd):wrd ",														  "CALCbinarySUBwrdwrd;"				  ]
[ "-",				  "command",	  "calc",	  "(left:wrd,right:int):wrd ",														  "CALCbinarySUBwrdint;"				  ]
[ "-",				  "command",	  "calc",	  "(left:wrd,right:sht):wrd ",														  "CALCbinarySUBwrdsht;"				  ]
[ "-",				  "command",	  "calc",	  "(left:wrd,right:bte):wrd ",														  "CALCbinarySUBwrdbte;"				  ]
[ "-",				  "command",	  "calc",	  "(left:int,right:dbl):dbl ",														  "CALCbinarySUBintdbl;"				  ]
[ "-",				  "command",	  "calc",	  "(left:int,right:flt):flt ",														  "CALCbinarySUBintflt;"				  ]
[ "-",				  "command",	  "calc",	  "(left:int,right:lng):lng ",														  "CALCbinarySUBintlng;"				  ]
[ "-",				  "command",	  "calc",	  "(left:int,right:wrd):wrd ",														  "CALCbinarySUBintwrd;"				  ]
[ "-",				  "command",	  "calc",	  "(left:int,right:int):int ",														  "CALCbinarySUBintint;"				  ]
[ "-",				  "command",	  "calc",	  "(left:int,right:sht):int ",														  "CALCbinarySUBintsht;"				  ]
[ "-",				  "command",	  "calc",	  "(left:int,right:bte):int ",														  "CALCbinarySUBintbte;"				  ]
[ "-",				  "command",	  "calc",	  "(left:sht,right:dbl):dbl ",														  "CALCbinarySUBshtdbl;"				  ]
[ "-",				  "command",	  "calc",	  "(left:sht,right:flt):flt ",														  "CALCbinarySUBshtflt;"				  ]
[ "-",				  "command",	  "calc",	  "(left:sht,right:lng):lng ",														  "CALCbinarySUBshtlng;"				  ]
[ "-",				  "command",	  "calc",	  "(left:sht,right:wrd):wrd ",														  "CALCbinarySUBshtwrd;"				  ]
[ "-",				  "command",	  "calc",	  "(left:sht,right:int):int ",														  "CALCbinarySUBshtint;"				  ]
[ "-",				  "command",	  "calc",	  "(left:sht,right:sht):sht ",														  "CALCbinarySUBshtsht;"				  ]
[ "-",				  "command",	  "calc",	  "(left:sht,right:bte):sht ",														  "CALCbinarySUBshtbte;"				  ]
[ "-",				  "command",	  "calc",	  "(left:bte,right:dbl):dbl ",														  "CALCbinarySUBbtedbl;"				  ]
[ "-",				  "command",	  "calc",	  "(left:bte,right:flt):flt ",														  "CALCbinarySUBbteflt;"				  ]
[ "-",				  "command",	  "calc",	  "(left:bte,right:lng):lng ",														  "CALCbinarySUBbtelng;"				  ]
[ "-",				  "command",	  "calc",	  "(left:bte,right:wrd):wrd ",														  "CALCbinarySUBbtewrd;"				  ]
[ "-",				  "command",	  "calc",	  "(left:bte,right:int):int ",														  "CALCbinarySUBbteint;"				  ]
[ "-",				  "command",	  "calc",	  "(left:bte,right:sht):sht ",														  "CALCbinarySUBbtesht;"				  ]
[ "-",				  "command",	  "calc",	  "(left:bte,right:bte):bte ",														  "CALCbinarySUBbtebte;"				  ]
[ "-",				  "command",	  "calc",	  "(left:oid,right:oid):oid ",														  "CALCbinarySUBoidoid;"				  ]
[ "/",				  "command",	  "calc",	  "(left:lng,right:dbl):dbl ",														  "CALCbinarycheckDIVlngdbl;"				  ]
[ "/",				  "command",	  "calc",	  "(left:lng,right:flt):dbl ",														  "CALCbinarycheckDIVlngflt;"				  ]
[ "/",				  "command",	  "calc",	  "(left:lng,right:lng):lng ",														  "CALCbinarycheckDIVlnglng;"				  ]
[ "/",				  "command",	  "calc",	  "(left:lng,right:wrd):lng ",														  "CALCbinarycheckDIVlngwrd;"				  ]
[ "/",				  "command",	  "calc",	  "(left:lng,right:int):lng ",														  "CALCbinarycheckDIVlngint;"				  ]
[ "/",				  "command",	  "calc",	  "(left:lng,right:sht):lng ",														  "CALCbinarycheckDIVlngsht;"				  ]
[ "/",				  "command",	  "calc",	  "(left:lng,right:bte):lng ",														  "CALCbinarycheckDIVlngbte;"				  ]
[ "/",				  "command",	  "calc",	  "(left:dbl,right:dbl):dbl ",														  "CALCbinarycheckDIVdbldbl;"				  ]
[ "/",				  "command",	  "calc",	  "(left:dbl,right:flt):dbl ",														  "CALCbinarycheckDIVdblflt;"				  ]
[ "/",				  "command",	  "calc",	  "(left:dbl,right:lng):dbl ",														  "CALCbinarycheckDIVdbllng;"				  ]
[ "/",				  "command",	  "calc",	  "(left:dbl,right:wrd):dbl ",														  "CALCbinarycheckDIVdblwrd;"				  ]
[ "/",				  "command",	  "calc",	  "(left:dbl,right:int):dbl ",														  "CALCbinarycheckDIVdblint;"				  ]
[ "/",				  "command",	  "calc",	  "(left:dbl,right:sht):dbl ",														  "CALCbinarycheckDIVdblsht;"				  ]
[ "/",				  "command",	  "calc",	  "(left:dbl,right:bte):dbl ",														  "CALCbinarycheckDIVdblbte;"				  ]
[ "/",				  "command",	  "calc",	  "(left:flt,right:dbl):dbl ",														  "CALCbinarycheckDIVfltdbl;"				  ]
[ "/",				  "command",	  "calc",	  "(left:flt,right:flt):flt ",														  "CALCbinarycheckDIVfltflt;"				  ]
[ "/",				  "command",	  "calc",	  "(left:flt,right:lng):flt ",														  "CALCbinarycheckDIVfltlng;"				  ]
[ "/",				  "command",	  "calc",	  "(left:flt,right:wrd):flt ",														  "CALCbinarycheckDIVfltwrd;"				  ]
[ "/",				  "command",	  "calc",	  "(left:flt,right:int):flt ",														  "CALCbinarycheckDIVfltint;"				  ]
[ "/",				  "command",	  "calc",	  "(left:flt,right:sht):flt ",														  "CALCbinarycheckDIVfltsht;"				  ]
[ "/",				  "command",	  "calc",	  "(left:flt,right:bte):flt ",														  "CALCbinarycheckDIVfltbte;"				  ]
[ "/",				  "command",	  "calc",	  "(left:wrd,right:dbl):dbl ",														  "CALCbinarycheckDIVwrddbl;"				  ]
[ "/",				  "command",	  "calc",	  "(left:wrd,right:flt):flt ",														  "CALCbinarycheckDIVwrdflt;"				  ]
[ "/",				  "command",	  "calc",	  "(left:wrd,right:lng):lng ",														  "CALCbinarycheckDIVwrdlng;"				  ]
[ "/",				  "command",	  "calc",	  "(left:wrd,right:wrd):wrd ",														  "CALCbinarycheckDIVwrdwrd;"				  ]
[ "/",				  "command",	  "calc",	  "(left:wrd,right:int):wrd ",														  "CALCbinarycheckDIVwrdint;"				  ]
[ "/",				  "command",	  "calc",	  "(left:wrd,right:sht):wrd ",														  "CALCbinarycheckDIVwrdsht;"				  ]
[ "/",				  "command",	  "calc",	  "(left:wrd,right:bte):wrd ",														  "CALCbinarycheckDIVwrdbte;"				  ]
[ "/",				  "command",	  "calc",	  "(left:int,right:dbl):dbl ",														  "CALCbinarycheckDIVintdbl;"				  ]
[ "/",				  "command",	  "calc",	  "(left:int,right:flt):flt ",														  "CALCbinarycheckDIVintflt;"				  ]
[ "/",				  "command",	  "calc",	  "(left:int,right:lng):lng ",														  "CALCbinarycheckDIVintlng;"				  ]
[ "/",				  "command",	  "calc",	  "(left:int,right:wrd):wrd ",														  "CALCbinarycheckDIVintwrd;"				  ]
[ "/",				  "command",	  "calc",	  "(left:int,right:int):int ",														  "CALCbinarycheckDIVintint;"				  ]
[ "/",				  "command",	  "calc",	  "(left:int,right:sht):int ",														  "CALCbinarycheckDIVintsht;"				  ]
[ "/",				  "command",	  "calc",	  "(left:int,right:bte):int ",														  "CALCbinarycheckDIVintbte;"				  ]
[ "/",				  "command",	  "calc",	  "(left:sht,right:dbl):dbl ",														  "CALCbinarycheckDIVshtdbl;"				  ]
[ "/",				  "command",	  "calc",	  "(left:sht,right:flt):flt ",														  "CALCbinarycheckDIVshtflt;"				  ]
[ "/",				  "command",	  "calc",	  "(left:sht,right:lng):lng ",														  "CALCbinarycheckDIVshtlng;"				  ]
[ "/",				  "command",	  "calc",	  "(left:sht,right:wrd):wrd ",														  "CALCbinarycheckDIVshtwrd;"				  ]
[ "/",				  "command",	  "calc",	  "(left:sht,right:int):int ",														  "CALCbinarycheckDIVshtint;"				  ]
[ "/",				  "command",	  "calc",	  "(left:sht,right:sht):sht ",														  "CALCbinarycheckDIVshtsht;"				  ]
[ "/",				  "command",	  "calc",	  "(left:sht,right:bte):sht ",														  "CALCbinarycheckDIVshtbte;"				  ]
[ "/",				  "command",	  "calc",	  "(left:bte,right:dbl):dbl ",														  "CALCbinarycheckDIVbtedbl;"				  ]
[ "/",				  "command",	  "calc",	  "(left:bte,right:flt):flt ",														  "CALCbinarycheckDIVbteflt;"				  ]
[ "/",				  "command",	  "calc",	  "(left:bte,right:lng):lng ",														  "CALCbinarycheckDIVbtelng;"				  ]
[ "/",				  "command",	  "calc",	  "(left:bte,right:wrd):wrd ",														  "CALCbinarycheckDIVbtewrd;"				  ]
[ "/",				  "command",	  "calc",	  "(left:bte,right:int):int ",														  "CALCbinarycheckDIVbteint;"				  ]
[ "/",				  "command",	  "calc",	  "(left:bte,right:sht):sht ",														  "CALCbinarycheckDIVbtesht;"				  ]
[ "/",				  "command",	  "calc",	  "(left:bte,right:bte):bte ",														  "CALCbinarycheckDIVbtebte;"				  ]
[ "/",				  "command",	  "calc",	  "(left:oid,right:oid):oid ",														  "CALCbinarycheckDIVoidoid;"				  ]
[ "<=",				  "command",	  "calc",	  "(v:inet,w:inet):bit ",														  "INET_comp_LE;"					  ]
[ "<",				  "command",	  "calc",	  "(v:inet,w:inet):bit ",														  "INET_comp_LT;"					  ]
[ "<=",				  "command",	  "calc",	  "(v:timestamp,w:timestamp):bit ",													  "MTIMEtimestamp_LE;"					  ]
[ "<",				  "command",	  "calc",	  "(v:timestamp,w:timestamp):bit ",													  "MTIMEtimestamp_LT;"					  ]
[ "<=",				  "command",	  "calc",	  "(v:daytime,w:daytime):bit ",														  "MTIMEdaytime_LE;"					  ]
[ "<",				  "command",	  "calc",	  "(v:daytime,w:daytime):bit ",														  "MTIMEdaytime_LT;"					  ]
[ "<=",				  "command",	  "calc",	  "(v:date,w:date):bit ",														  "MTIMEdate_LE;"					  ]
[ "<",				  "command",	  "calc",	  "(v:date,w:date):bit ",														  "MTIMEdate_LT;"					  ]
[ "<<",				  "command",	  "calc",	  "(left:lng,right:int):lng ",														  "CALCbinaryLSHlngint;"				  ]
[ "<<",				  "command",	  "calc",	  "(left:int,right:int):int ",														  "CALCbinaryLSHintint;"				  ]
[ "<<",				  "command",	  "calc",	  "(left:sht,right:int):sht ",														  "CALCbinaryLSHshtint;"				  ]
[ "<<",				  "command",	  "calc",	  "(left:bte,right:int):bte ",														  "CALCbinaryLSHbteint;"				  ]
[ "<=",				  "command",	  "calc",	  "(left:str,right:str):bit ",														  "CALCcompLEstrstr;"					  ]
[ "<",				  "command",	  "calc",	  "(left:str,right:str):bit ",														  "CALCcompLTstrstr;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:lng,right:lng):bit ",														  "CALCcompLElnglng;"					  ]
[ "<",				  "command",	  "calc",	  "(left:lng,right:lng):bit ",														  "CALCcompLTlnglng;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:lng,right:int):bit ",														  "CALCcompLElngint;"					  ]
[ "<",				  "command",	  "calc",	  "(left:lng,right:int):bit ",														  "CALCcompLTlngint;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:lng,right:sht):bit ",														  "CALCcompLElngsht;"					  ]
[ "<",				  "command",	  "calc",	  "(left:lng,right:sht):bit ",														  "CALCcompLTlngsht;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:wrd,right:bte):bit ",														  "CALCcompLEwrdbte;"					  ]
[ "<",				  "command",	  "calc",	  "(left:wrd,right:bte):bit ",														  "CALCcompLTwrdbte;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:int,right:lng):bit ",														  "CALCcompLEintlng;"					  ]
[ "<",				  "command",	  "calc",	  "(left:int,right:lng):bit ",														  "CALCcompLTintlng;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:int,right:int):bit ",														  "CALCcompLEintint;"					  ]
[ "<",				  "command",	  "calc",	  "(left:int,right:int):bit ",														  "CALCcompLTintint;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:int,right:sht):bit ",														  "CALCcompLEintsht;"					  ]
[ "<",				  "command",	  "calc",	  "(left:int,right:sht):bit ",														  "CALCcompLTintsht;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:int,right:bte):bit ",														  "CALCcompLEintbte;"					  ]
[ "<",				  "command",	  "calc",	  "(left:int,right:bte):bit ",														  "CALCcompLTintbte;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:int,right:wrd):bit ",														  "CALCcompLEintwrd;"					  ]
[ "<",				  "command",	  "calc",	  "(left:int,right:wrd):bit ",														  "CALCcompLTintwrd;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:wrd,right:lng):bit ",														  "CALCcompLEwrdlng;"					  ]
[ "<",				  "command",	  "calc",	  "(left:wrd,right:lng):bit ",														  "CALCcompLTwrdlng;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:wrd,right:int):bit ",														  "CALCcompLEwrdint;"					  ]
[ "<",				  "command",	  "calc",	  "(left:wrd,right:int):bit ",														  "CALCcompLTwrdint;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:wrd,right:wrd):bit ",														  "CALCcompLEwrdwrd;"					  ]
[ "<",				  "command",	  "calc",	  "(left:wrd,right:wrd):bit ",														  "CALCcompLTwrdwrd;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:wrd,right:sht):bit ",														  "CALCcompLEwrdsht;"					  ]
[ "<",				  "command",	  "calc",	  "(left:wrd,right:sht):bit ",														  "CALCcompLTwrdsht;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:wrd,right:bte):bit ",														  "CALCcompLEwrdbte;"					  ]
[ "<",				  "command",	  "calc",	  "(left:wrd,right:bte):bit ",														  "CALCcompLTwrdbte;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:sht,right:lng):bit ",														  "CALCcompLEshtlng;"					  ]
[ "<",				  "command",	  "calc",	  "(left:sht,right:lng):bit ",														  "CALCcompLTshtlng;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:sht,right:int):bit ",														  "CALCcompLEshtint;"					  ]
[ "<",				  "command",	  "calc",	  "(left:sht,right:int):bit ",														  "CALCcompLTshtint;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:sht,right:wrd):bit ",														  "CALCcompLEshtwrd;"					  ]
[ "<",				  "command",	  "calc",	  "(left:sht,right:wrd):bit ",														  "CALCcompLTshtwrd;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:sht,right:sht):bit ",														  "CALCcompLEshtsht;"					  ]
[ "<",				  "command",	  "calc",	  "(left:sht,right:sht):bit ",														  "CALCcompLTshtsht;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:sht,right:bte):bit ",														  "CALCcompLEshtbte;"					  ]
[ "<",				  "command",	  "calc",	  "(left:sht,right:bte):bit ",														  "CALCcompLTshtbte;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:bte,right:lng):bit ",														  "CALCcompLEbtelng;"					  ]
[ "<",				  "command",	  "calc",	  "(left:bte,right:lng):bit ",														  "CALCcompLTbtelng;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:bte,right:wrd):bit ",														  "CALCcompLEbtewrd;"					  ]
[ "<",				  "command",	  "calc",	  "(left:bte,right:wrd):bit ",														  "CALCcompLTbtewrd;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:bte,right:int):bit ",														  "CALCcompLEbteint;"					  ]
[ "<",				  "command",	  "calc",	  "(left:bte,right:int):bit ",														  "CALCcompLTbteint;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:bte,right:sht):bit ",														  "CALCcompLEbtesht;"					  ]
[ "<",				  "command",	  "calc",	  "(left:bte,right:sht):bit ",														  "CALCcompLTbtesht;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:bte,right:bte):bit ",														  "CALCcompLEbtebte;"					  ]
[ "<",				  "command",	  "calc",	  "(left:bte,right:bte):bit ",														  "CALCcompLTbtebte;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:dbl,right:dbl):bit ",														  "CALCcompLEdbldbl;"					  ]
[ "<",				  "command",	  "calc",	  "(left:dbl,right:dbl):bit ",														  "CALCcompLTdbldbl;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:flt,right:dbl):bit ",														  "CALCcompLEfltdbl;"					  ]
[ "<",				  "command",	  "calc",	  "(left:flt,right:dbl):bit ",														  "CALCcompLTfltdbl;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:flt,right:flt):bit ",														  "CALCcompLEfltflt;"					  ]
[ "<",				  "command",	  "calc",	  "(left:flt,right:flt):bit ",														  "CALCcompLTfltflt;"					  ]
[ "<=",				  "command",	  "calc",	  "(left:oid,right:oid):bit ",														  "CALCcompLEoidoid;"					  ]
[ "<",				  "command",	  "calc",	  "(left:oid,right:oid):bit ",														  "CALCcompLToidoid;"					  ]
[ "=",				  "command",	  "calc",	  "(v:inet,w:inet):bit ",														  "INET_comp_EQ;"					  ]
[ "==",				  "command",	  "calc",	  "(v:timestamp,w:timestamp):bit ",													  "MTIMEtimestamp_EQ;"					  ]
[ "==",				  "command",	  "calc",	  "(v:daytime,w:daytime):bit ",														  "MTIMEdaytime_EQ;"					  ]
[ "==",				  "command",	  "calc",	  "(v:date,w:date):bit ",														  "MTIMEdate_EQ;"					  ]
[ "==",				  "command",	  "calc",	  "(left:str,right:str):bit ",														  "CALCcompEQstrstr;"					  ]
[ "==",				  "command",	  "calc",	  "(left:lng,right:lng):bit ",														  "CALCcompEQlnglng;"					  ]
[ "==",				  "command",	  "calc",	  "(left:lng,right:int):bit ",														  "CALCcompEQlngint;"					  ]
[ "==",				  "command",	  "calc",	  "(left:lng,right:sht):bit ",														  "CALCcompEQlngsht;"					  ]
[ "==",				  "command",	  "calc",	  "(left:wrd,right:bte):bit ",														  "CALCcompEQwrdbte;"					  ]
[ "==",				  "command",	  "calc",	  "(left:int,right:lng):bit ",														  "CALCcompEQintlng;"					  ]
[ "==",				  "command",	  "calc",	  "(left:int,right:int):bit ",														  "CALCcompEQintint;"					  ]
[ "==",				  "command",	  "calc",	  "(left:int,right:sht):bit ",														  "CALCcompEQintsht;"					  ]
[ "==",				  "command",	  "calc",	  "(left:int,right:bte):bit ",														  "CALCcompEQintbte;"					  ]
[ "==",				  "command",	  "calc",	  "(left:int,right:wrd):bit ",														  "CALCcompEQintwrd;"					  ]
[ "==",				  "command",	  "calc",	  "(left:wrd,right:lng):bit ",														  "CALCcompEQwrdlng;"					  ]
[ "==",				  "command",	  "calc",	  "(left:wrd,right:int):bit ",														  "CALCcompEQwrdint;"					  ]
[ "==",				  "command",	  "calc",	  "(left:wrd,right:wrd):bit ",														  "CALCcompEQwrdwrd;"					  ]
[ "==",				  "command",	  "calc",	  "(left:wrd,right:sht):bit ",														  "CALCcompEQwrdsht;"					  ]
[ "==",				  "command",	  "calc",	  "(left:wrd,right:bte):bit ",														  "CALCcompEQwrdbte;"					  ]
[ "==",				  "command",	  "calc",	  "(left:sht,right:lng):bit ",														  "CALCcompEQshtlng;"					  ]
[ "==",				  "command",	  "calc",	  "(left:sht,right:int):bit ",														  "CALCcompEQshtint;"					  ]
[ "==",				  "command",	  "calc",	  "(left:sht,right:wrd):bit ",														  "CALCcompEQshtwrd;"					  ]
[ "==",				  "command",	  "calc",	  "(left:sht,right:sht):bit ",														  "CALCcompEQshtsht;"					  ]
[ "==",				  "command",	  "calc",	  "(left:sht,right:bte):bit ",														  "CALCcompEQshtbte;"					  ]
[ "==",				  "command",	  "calc",	  "(left:bte,right:lng):bit ",														  "CALCcompEQbtelng;"					  ]
[ "==",				  "command",	  "calc",	  "(left:bte,right:wrd):bit ",														  "CALCcompEQbtewrd;"					  ]
[ "==",				  "command",	  "calc",	  "(left:bte,right:int):bit ",														  "CALCcompEQbteint;"					  ]
[ "==",				  "command",	  "calc",	  "(left:bte,right:sht):bit ",														  "CALCcompEQbtesht;"					  ]
[ "==",				  "command",	  "calc",	  "(left:bte,right:bte):bit ",														  "CALCcompEQbtebte;"					  ]
[ "==",				  "command",	  "calc",	  "(left:bit,right:lng):bit ",														  "CALCcompEQbitlng;"					  ]
[ "==",				  "command",	  "calc",	  "(left:bit,right:int):bit ",														  "CALCcompEQbitint;"					  ]
[ "==",				  "command",	  "calc",	  "(left:bit,right:sht):bit ",														  "CALCcompEQbitsht;"					  ]
[ "==",				  "command",	  "calc",	  "(left:bit,right:bte):bit ",														  "CALCcompEQbitbte;"					  ]
[ "==",				  "command",	  "calc",	  "(left:bit,right:bit):bit ",														  "CALCcompEQbitbit;"					  ]
[ "==",				  "command",	  "calc",	  "(left:dbl,right:dbl):bit ",														  "CALCcompEQdbldbl;"					  ]
[ "==",				  "command",	  "calc",	  "(left:flt,right:dbl):bit ",														  "CALCcompEQfltdbl;"					  ]
[ "==",				  "command",	  "calc",	  "(left:flt,right:flt):bit ",														  "CALCcompEQfltflt;"					  ]
[ "==",				  "command",	  "calc",	  "(left:oid,right:oid):bit ",														  "CALCcompEQoidoid;"					  ]
[ ">=",				  "command",	  "calc",	  "(v:inet,w:inet):bit ",														  "INET_comp_GE;"					  ]
[ ">",				  "command",	  "calc",	  "(v:inet,w:inet):bit ",														  "INET_comp_GT;"					  ]
[ ">=",				  "command",	  "calc",	  "(v:timestamp,w:timestamp):bit ",													  "MTIMEtimestamp_GE;"					  ]
[ ">",				  "command",	  "calc",	  "(v:timestamp,w:timestamp):bit ",													  "MTIMEtimestamp_GT;"					  ]
[ ">=",				  "command",	  "calc",	  "(v:daytime,w:daytime):bit ",														  "MTIMEdaytime_GE;"					  ]
[ ">",				  "command",	  "calc",	  "(v:daytime,w:daytime):bit ",														  "MTIMEdaytime_GT;"					  ]
[ ">=",				  "command",	  "calc",	  "(v:date,w:date):bit ",														  "MTIMEdate_GE;"					  ]
[ ">",				  "command",	  "calc",	  "(v:date,w:date):bit ",														  "MTIMEdate_GT;"					  ]
[ ">>",				  "command",	  "calc",	  "(left:lng,right:int):lng ",														  "CALCbinaryRSHlngint;"				  ]
[ ">>",				  "command",	  "calc",	  "(left:int,right:int):int ",														  "CALCbinaryRSHintint;"				  ]
[ ">>",				  "command",	  "calc",	  "(left:sht,right:int):sht ",														  "CALCbinaryRSHshtint;"				  ]
[ ">>",				  "command",	  "calc",	  "(left:bte,right:int):bte ",														  "CALCbinaryRSHbteint;"				  ]
[ ">",				  "command",	  "calc",	  "(left:str,right:str):bit ",														  "CALCcompGTstrstr;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:str,right:str):bit ",														  "CALCcompGEstrstr;"					  ]
[ ">",				  "command",	  "calc",	  "(left:lng,right:lng):bit ",														  "CALCcompGTlnglng;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:lng,right:lng):bit ",														  "CALCcompGElnglng;"					  ]
[ ">",				  "command",	  "calc",	  "(left:lng,right:int):bit ",														  "CALCcompGTlngint;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:lng,right:int):bit ",														  "CALCcompGElngint;"					  ]
[ ">",				  "command",	  "calc",	  "(left:lng,right:sht):bit ",														  "CALCcompGTlngsht;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:lng,right:sht):bit ",														  "CALCcompGElngsht;"					  ]
[ ">",				  "command",	  "calc",	  "(left:wrd,right:bte):bit ",														  "CALCcompGTwrdbte;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:wrd,right:bte):bit ",														  "CALCcompGEwrdbte;"					  ]
[ ">",				  "command",	  "calc",	  "(left:int,right:lng):bit ",														  "CALCcompGTintlng;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:int,right:lng):bit ",														  "CALCcompGEintlng;"					  ]
[ ">",				  "command",	  "calc",	  "(left:int,right:int):bit ",														  "CALCcompGTintint;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:int,right:int):bit ",														  "CALCcompGEintint;"					  ]
[ ">",				  "command",	  "calc",	  "(left:int,right:sht):bit ",														  "CALCcompGTintsht;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:int,right:sht):bit ",														  "CALCcompGEintsht;"					  ]
[ ">",				  "command",	  "calc",	  "(left:int,right:bte):bit ",														  "CALCcompGTintbte;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:int,right:bte):bit ",														  "CALCcompGEintbte;"					  ]
[ ">",				  "command",	  "calc",	  "(left:int,right:wrd):bit ",														  "CALCcompGTintwrd;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:int,right:wrd):bit ",														  "CALCcompGEintwrd;"					  ]
[ ">",				  "command",	  "calc",	  "(left:wrd,right:lng):bit ",														  "CALCcompGTwrdlng;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:wrd,right:lng):bit ",														  "CALCcompGEwrdlng;"					  ]
[ ">",				  "command",	  "calc",	  "(left:wrd,right:int):bit ",														  "CALCcompGTwrdint;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:wrd,right:int):bit ",														  "CALCcompGEwrdint;"					  ]
[ ">",				  "command",	  "calc",	  "(left:wrd,right:wrd):bit ",														  "CALCcompGTwrdwrd;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:wrd,right:wrd):bit ",														  "CALCcompGEwrdwrd;"					  ]
[ ">",				  "command",	  "calc",	  "(left:wrd,right:sht):bit ",														  "CALCcompGTwrdsht;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:wrd,right:sht):bit ",														  "CALCcompGEwrdsht;"					  ]
[ ">",				  "command",	  "calc",	  "(left:wrd,right:bte):bit ",														  "CALCcompGTwrdbte;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:wrd,right:bte):bit ",														  "CALCcompGEwrdbte;"					  ]
[ ">",				  "command",	  "calc",	  "(left:sht,right:lng):bit ",														  "CALCcompGTshtlng;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:sht,right:lng):bit ",														  "CALCcompGEshtlng;"					  ]
[ ">",				  "command",	  "calc",	  "(left:sht,right:int):bit ",														  "CALCcompGTshtint;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:sht,right:int):bit ",														  "CALCcompGEshtint;"					  ]
[ ">",				  "command",	  "calc",	  "(left:sht,right:wrd):bit ",														  "CALCcompGTshtwrd;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:sht,right:wrd):bit ",														  "CALCcompGEshtwrd;"					  ]
[ ">",				  "command",	  "calc",	  "(left:sht,right:sht):bit ",														  "CALCcompGTshtsht;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:sht,right:sht):bit ",														  "CALCcompGEshtsht;"					  ]
[ ">",				  "command",	  "calc",	  "(left:sht,right:bte):bit ",														  "CALCcompGTshtbte;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:sht,right:bte):bit ",														  "CALCcompGEshtbte;"					  ]
[ ">",				  "command",	  "calc",	  "(left:bte,right:lng):bit ",														  "CALCcompGTbtelng;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:bte,right:lng):bit ",														  "CALCcompGEbtelng;"					  ]
[ ">",				  "command",	  "calc",	  "(left:bte,right:wrd):bit ",														  "CALCcompGTbtewrd;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:bte,right:wrd):bit ",														  "CALCcompGEbtewrd;"					  ]
[ ">",				  "command",	  "calc",	  "(left:bte,right:int):bit ",														  "CALCcompGTbteint;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:bte,right:int):bit ",														  "CALCcompGEbteint;"					  ]
[ ">",				  "command",	  "calc",	  "(left:bte,right:sht):bit ",														  "CALCcompGTbtesht;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:bte,right:sht):bit ",														  "CALCcompGEbtesht;"					  ]
[ ">",				  "command",	  "calc",	  "(left:bte,right:bte):bit ",														  "CALCcompGTbtebte;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:bte,right:bte):bit ",														  "CALCcompGEbtebte;"					  ]
[ ">",				  "command",	  "calc",	  "(left:dbl,right:dbl):bit ",														  "CALCcompGTdbldbl;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:dbl,right:dbl):bit ",														  "CALCcompGEdbldbl;"					  ]
[ ">",				  "command",	  "calc",	  "(left:flt,right:dbl):bit ",														  "CALCcompGTfltdbl;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:flt,right:dbl):bit ",														  "CALCcompGEfltdbl;"					  ]
[ ">",				  "command",	  "calc",	  "(left:flt,right:flt):bit ",														  "CALCcompGTfltflt;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:flt,right:flt):bit ",														  "CALCcompGEfltflt;"					  ]
[ ">",				  "command",	  "calc",	  "(left:oid,right:oid):bit ",														  "CALCcompGToidoid;"					  ]
[ ">=",				  "command",	  "calc",	  "(left:oid,right:oid):bit ",														  "CALCcompGEoidoid;"					  ]
[ "and",			  "command",	  "calc",	  "(left:lng,right:lng):lng ",														  "CALCbinaryANDlnglng;"				  ]
[ "and",			  "command",	  "calc",	  "(left:int,right:int):int ",														  "CALCbinaryANDintint;"				  ]
[ "and",			  "command",	  "calc",	  "(left:sht,right:sht):sht ",														  "CALCbinaryANDshtsht;"				  ]
[ "and",			  "command",	  "calc",	  "(left:bte,right:bte):bte ",														  "CALCbinaryANDbtebte;"				  ]
[ "and",			  "command",	  "calc",	  "(left:bit,right:bit):bit ",														  "CALCbinaryANDbit;"					  ]
[ "abs",			  "command",	  "calc",	  "(x:dbl):dbl ",															  "CALCunarydblABS;"					  ]
[ "abs",			  "command",	  "calc",	  "(x:lng):lng ",															  "CALCunarylngABS;"					  ]
[ "abs",			  "command",	  "calc",	  "(x:flt):flt ",															  "CALCunaryfltABS;"					  ]
[ "abs",			  "command",	  "calc",	  "(x:wrd):wrd ",															  "CALCunarywrdABS;"					  ]
[ "abs",			  "command",	  "calc",	  "(x:int):int ",															  "CALCunaryintABS;"					  ]
[ "abs",			  "command",	  "calc",	  "(x:sht):sht ",															  "CALCunaryshtABS;"					  ]
[ "abs",			  "command",	  "calc",	  "(x:bte):bte ",															  "CALCunarybteABS;"					  ]
[ "abs",			  "command",	  "calc",	  "(x:bit):bit ",														  "CALCunarybitABS;"					  ]
[ "bte",		  "command",	  "calc",		  "(s1:int,v:lng,d2:int,s2:int):bte ",							  "lng_dec2dec_bte;"			  ]
[ "bte",		  "command",	  "calc",		  "(s1:int,v:lng):bte ",								  "lng_dec2_bte;"			  ]
[ "bte",		  "command",	  "calc",		  "(v:lng,digits:int,scale:int):bte ",							  "lng_num2dec_bte;"			  ]
[ "bte",		  "command",	  "calc",		  "(v:lng):bte ",									  "lng_2_bte;"				  ]
[ "bte",		  "command",	  "calc",		  "(s1:int,v:wrd,d2:int,s2:int):bte ",							  "wrd_dec2dec_bte;"			  ]
[ "bte",		  "command",	  "calc",		  "(s1:int,v:wrd):bte ",								  "wrd_dec2_bte;"			  ]
[ "bte",		  "command",	  "calc",		  "(v:wrd,digits:int,scale:int):bte ",							  "wrd_num2dec_bte;"			  ]
[ "bte",		  "command",	  "calc",		  "(v:wrd):bte ",									  "wrd_2_bte;"				  ]
[ "bte",		  "command",	  "calc",		  "(s1:int,v:int,d2:int,s2:int):bte ",							  "int_dec2dec_bte;"			  ]
[ "bte",		  "command",	  "calc",		  "(s1:int,v:int):bte ",								  "int_dec2_bte;"			  ]
[ "bte",		  "command",	  "calc",		  "(v:int,digits:int,scale:int):bte ",							  "int_num2dec_bte;"			  ]
[ "bte",		  "command",	  "calc",		  "(v:int):bte ",									  "int_2_bte;"				  ]
[ "bte",		  "command",	  "calc",		  "(s1:int,v:sht,d2:int,s2:int):bte ",							  "sht_dec2dec_bte;"			  ]
[ "bte",		  "command",	  "calc",		  "(s1:int,v:sht):bte ",								  "sht_dec2_bte;"			  ]
[ "bte",		  "command",	  "calc",		  "(v:sht,digits:int,scale:int):bte ",							  "sht_num2dec_bte;"			  ]
[ "bte",		  "command",	  "calc",		  "(v:sht):bte ",									  "sht_2_bte;"				  ]
[ "bte",		  "command",	  "calc",		  "(s1:int,v:bte,d2:int,s2:int):bte ",							  "bte_dec2dec_bte;"			  ]
[ "bte",		  "command",	  "calc",		  "(s1:int,v:bte):bte ",								  "bte_dec2_bte;"			  ]
[ "bte",		  "command",	  "calc",		  "(v:bte,digits:int,scale:int):bte ",							  "bte_num2dec_bte;"			  ]
[ "bte",		  "command",	  "calc",		  "(v:bte):bte ",									  "bte_2_bte;"				  ]
[ "bte",		  "command",	  "calc",		  "(v:dbl,digits:int,scale:int):bte ",							  "dbl_num2dec_bte;"			  ]
[ "bte",		  "command",	  "calc",		  "(v:dbl):bte ",									  "dbl_2_bte;"				  ]
[ "bte",		  "command",	  "calc",		  "(v:flt,digits:int,scale:int):bte ",							  "flt_num2dec_bte;"			  ]
[ "bte",		  "command",	  "calc",		  "(v:flt):bte ",									  "flt_2_bte;"				  ]
[ "bte",		  "command",	  "calc",		  "(v:str,digits:int,scale:int):bte ",							  "str_2dec_bte;"			  ]
[ "bte",		  "command",	  "calc",		  "(v:str,digits:int):bte ",								  "str_2num_bte;"			  ]
[ "bte",		  "command",	  "calc",		  "(v:str):bte ",									  "str_2_bte;"				  ]
[ "blob",			  "command",	  "calc",	  "(s:str):blob ",															  "BLOBblob_fromstr;"					  ]
[ "blob",			  "command",	  "calc",	  "(b:blob):blob ",															  "BLOBblob_blob;"					  ]
[ "bat",			  "command",	  "calc",	  "(v:void):bat[:any_1,:any_2] ",													  "CALCnil2bat;"					  ]
[ "bat",			  "command",	  "calc",	  "(v:str):bat[:any_1,:any_2] ",													  "CALCstr2bat;"					  ]
[ "bte",			  "command",	  "calc",	  "(v:void):bte ",															  "CALCnil2bte;"					  ]
[ "bte",			  "command",	  "calc",	  "(v:str):bte ",															  "CALCstr2bte;"					  ]
[ "bit",			  "command",	  "calc",	  "(v:void):bit ",															  "CALCnil2bit;"					  ]
[ "bit",			  "command",	  "calc",	  "(v:str):bit ",															  "CALCstr2bit;"					  ]
[ "bat",			  "command",	  "calc",	  "(v:void):BAT ",															  "CALCnil2bat;"					  ]
[ "bat",			  "command",	  "calc",	  "(v:str):BAT ",															  "CALCstr2bat;"					  ]
[ "bte",			  "command",	  "calc",	  "(x:lng):bte ",															  "CALClng2bte;"					  ]
[ "bte",			  "command",	  "calc",	  "(x:int):bte ",															  "CALCint2bte;"					  ]
[ "bte",			  "command",	  "calc",	  "(x:sht):bte ",															  "CALCsht2bte;"					  ]
[ "bte",			  "command",	  "calc",	  "(x:bte):bte ",															  "CALCbte2bte;"					  ]
[ "bte",			  "command",	  "calc",	  "(x:dbl):bte ",															  "CALCdbl2bte;"					  ]
[ "bte",			  "command",	  "calc",	  "(x:flt):bte ",															  "CALCflt2bte;"					  ]
[ "bte",			  "command",	  "calc",	  "(x:lng):bte ",															  "CALClng2bte;"					  ]
[ "bte",			  "command",	  "calc",	  "(x:wrd):bte ",															  "CALCwrd2bte;"					  ]
[ "bte",			  "command",	  "calc",	  "(x:int):bte ",															  "CALCint2bte;"					  ]
[ "bte",			  "command",	  "calc",	  "(x:sht):bte ",															  "CALCsht2bte;"					  ]
[ "bte",			  "command",	  "calc",	  "(x:bte):bte ",															  "CALCbte2bte;"					  ]
[ "bte",			  "command",	  "calc",	  "(x:bit):bte ",															  "CALCbit2bte;"					  ]
[ "bte",			  "command",	  "calc",	  "(x:oid):bte ",															  "CALCoid2bte;"					  ]
[ "bit",			  "command",	  "calc",	  "(x:dbl):bit ",															  "CALCdbl2bit;"					  ]
[ "bit",			  "command",	  "calc",	  "(x:flt):bit ",															  "CALCflt2bit;"					  ]
[ "bit",			  "command",	  "calc",	  "(x:lng):bit ",															  "CALClng2bit;"					  ]
[ "bit",			  "command",	  "calc",	  "(x:wrd):bit ",															  "CALCwrd2bit;"					  ]
[ "bit",			  "command",	  "calc",	  "(x:int):bit ",															  "CALCint2bit;"					  ]
[ "bit",			  "command",	  "calc",	  "(x:sht):bit ",															  "CALCsht2bit;"					  ]
[ "bit",			  "command",	  "calc",	  "(x:bte):bit ",															  "CALCbte2bit;"					  ]
[ "bit",			  "command",	  "calc",	  "(x:bit):bit ",															  "CALCbit2bit;"					  ]
[ "bit",			  "command",	  "calc",	  "(x:oid):bit ",															  "CALCoid2bit;"					  ]
[ "between",			  "command",	  "calc",	  "(val:str,low:str,high:str):bit ",													  "CALCcompBetweenstr;"					  ]
[ "between",			  "command",	  "calc",	  "(val:lng,low:lng,high:lng):bit ",													  "CALCcompBetweenlng;"					  ]
[ "between",			  "command",	  "calc",	  "(val:lng,low:lng,high:lng):bit ",													  "CALCcompBetweenlng;"					  ]
[ "between",			  "command",	  "calc",	  "(val:lng,low:lng,high:lng):bit ",													  "CALCcompBetweenlng;"					  ]
[ "between",			  "command",	  "calc",	  "(val:wrd,low:wrd,high:wrd):bit ",													  "CALCcompBetweenwrd;"					  ]
[ "between",			  "command",	  "calc",	  "(val:int,low:int,high:int):bit ",													  "CALCcompBetweenint;"					  ]
[ "between",			  "command",	  "calc",	  "(val:int,low:int,high:int):bit ",													  "CALCcompBetweenint;"					  ]
[ "between",			  "command",	  "calc",	  "(val:int,low:int,high:int):bit ",													  "CALCcompBetweenint;"					  ]
[ "between",			  "command",	  "calc",	  "(val:int,low:int,high:int):bit ",													  "CALCcompBetweenint;"					  ]
[ "between",			  "command",	  "calc",	  "(val:int,low:int,high:int):bit ",													  "CALCcompBetweenint;"					  ]
[ "between",			  "command",	  "calc",	  "(val:wrd,low:wrd,high:wrd):bit ",													  "CALCcompBetweenwrd;"					  ]
[ "between",			  "command",	  "calc",	  "(val:wrd,low:wrd,high:wrd):bit ",													  "CALCcompBetweenwrd;"					  ]
[ "between",			  "command",	  "calc",	  "(val:wrd,low:wrd,high:wrd):bit ",													  "CALCcompBetweenwrd;"					  ]
[ "between",			  "command",	  "calc",	  "(val:wrd,low:wrd,high:wrd):bit ",													  "CALCcompBetweenwrd;"					  ]
[ "between",			  "command",	  "calc",	  "(val:wrd,low:wrd,high:wrd):bit ",													  "CALCcompBetweenwrd;"					  ]
[ "between",			  "command",	  "calc",	  "(val:sht,low:sht,high:sht):bit ",													  "CALCcompBetweensht;"					  ]
[ "between",			  "command",	  "calc",	  "(val:sht,low:sht,high:sht):bit ",													  "CALCcompBetweensht;"					  ]
[ "between",			  "command",	  "calc",	  "(val:sht,low:sht,high:sht):bit ",													  "CALCcompBetweensht;"					  ]
[ "between",			  "command",	  "calc",	  "(val:sht,low:sht,high:sht):bit ",													  "CALCcompBetweensht;"					  ]
[ "between",			  "command",	  "calc",	  "(val:sht,low:sht,high:sht):bit ",													  "CALCcompBetweensht;"					  ]
[ "between",			  "command",	  "calc",	  "(val:bte,low:bte,high:bte):bit ",													  "CALCcompBetweenbte;"					  ]
[ "between",			  "command",	  "calc",	  "(val:bte,low:bte,high:bte):bit ",													  "CALCcompBetweenbte;"					  ]
[ "between",			  "command",	  "calc",	  "(val:bte,low:bte,high:bte):bit ",													  "CALCcompBetweenbte;"					  ]
[ "between",			  "command",	  "calc",	  "(val:bte,low:bte,high:bte):bit ",													  "CALCcompBetweenbte;"					  ]
[ "between",			  "command",	  "calc",	  "(val:bte,low:bte,high:bte):bit ",													  "CALCcompBetweenbte;"					  ]
[ "between",			  "command",	  "calc",	  "(val:dbl,low:dbl,high:dbl):bit ",													  "CALCcompBetweendbl;"					  ]
[ "between",			  "command",	  "calc",	  "(val:flt,low:flt,high:flt):bit ",													  "CALCcompBetweenflt;"					  ]
[ "between",			  "command",	  "calc",	  "(val:flt,low:flt,high:flt):bit ",													  "CALCcompBetweenflt;"					  ]
[ "between",			  "command",	  "calc",	  "(val:oid,low:oid,high:oid):bit ",													  "CALCcompBetweenoid;"					  ]
[ "curve",		  "function",	  "calc",		  "(wkt:str):wkb;",									  "nil"					  ]
[ "daytime",		  "command",	  "calc",	  "(v:timestamp,d:int):daytime ",																													  "timestamp_2_daytime;"		  ]
[ "daytime",		  "command",	  "calc",	  "(v:lng,d:int):daytime ",																														  "second_interval_2_daytime;"		  ]
[ "dbl",		  "command",	  "calc",		  "(s1:int,v:lng,d2:int,s2:int):dbl ",							  "lng_dec2dec_dbl;"			  ]
[ "dbl",		  "command",	  "calc",		  "(s1:int,v:lng):dbl ",								  "lng_dec2_dbl;"			  ]
[ "dbl",		  "command",	  "calc",		  "(v:lng,digits:int,scale:int):dbl ",							  "lng_num2dec_dbl;"			  ]
[ "dbl",		  "command",	  "calc",		  "(v:lng):dbl ",									  "lng_2_dbl;"				  ]
[ "dbl",		  "command",	  "calc",		  "(s1:int,v:wrd,d2:int,s2:int):dbl ",							  "wrd_dec2dec_dbl;"			  ]
[ "dbl",		  "command",	  "calc",		  "(s1:int,v:wrd):dbl ",								  "wrd_dec2_dbl;"			  ]
[ "dbl",		  "command",	  "calc",		  "(v:wrd,digits:int,scale:int):dbl ",							  "wrd_num2dec_dbl;"			  ]
[ "dbl",		  "command",	  "calc",		  "(v:wrd):dbl ",									  "wrd_2_dbl;"				  ]
[ "dbl",		  "command",	  "calc",		  "(s1:int,v:int,d2:int,s2:int):dbl ",							  "int_dec2dec_dbl;"			  ]
[ "dbl",		  "command",	  "calc",		  "(s1:int,v:int):dbl ",								  "int_dec2_dbl;"			  ]
[ "dbl",		  "command",	  "calc",		  "(v:int,digits:int,scale:int):dbl ",							  "int_num2dec_dbl;"			  ]
[ "dbl",		  "command",	  "calc",		  "(v:int):dbl ",									  "int_2_dbl;"				  ]
[ "dbl",		  "command",	  "calc",		  "(s1:int,v:sht,d2:int,s2:int):dbl ",							  "sht_dec2dec_dbl;"			  ]
[ "dbl",		  "command",	  "calc",		  "(s1:int,v:sht):dbl ",								  "sht_dec2_dbl;"			  ]
[ "dbl",		  "command",	  "calc",		  "(v:sht,digits:int,scale:int):dbl ",							  "sht_num2dec_dbl;"			  ]
[ "dbl",		  "command",	  "calc",		  "(v:sht):dbl ",									  "sht_2_dbl;"				  ]
[ "dbl",		  "command",	  "calc",		  "(s1:int,v:bte,d2:int,s2:int):dbl ",							  "bte_dec2dec_dbl;"			  ]
[ "dbl",		  "command",	  "calc",		  "(s1:int,v:bte):dbl ",								  "bte_dec2_dbl;"			  ]
[ "dbl",		  "command",	  "calc",		  "(v:bte,digits:int,scale:int):dbl ",							  "bte_num2dec_dbl;"			  ]
[ "dbl",		  "command",	  "calc",		  "(v:bte):dbl ",									  "bte_2_dbl;"				  ]
[ "date",		  "command",	  "calc",		  "(v:str):date ",									  "str_2_date;"				  ]
[ "dbl",		  "command",	  "calc",		  "(v:str):dbl ",									  "str_2_dbl;"				  ]
[ "daytime",		  "command",	  "calc",	  "(v:daytime,digits:int):daytime ",																													  "daytime_2time_daytime;"		  ]
[ "daytime",		  "command",	  "calc",	  "(v:str,digits:int):daytime ",																													  "str_2time_daytime;"			  ]
[ "daytime",		  "command",	  "calc",	  "(v:str):daytime ",																															  "str_2_daytime;"			  ]
[ "daytime",			  "command",	  "calc",	  "(t:timestamp):daytime ",														  "MTIMEtimestamp_extract_daytime_default;"		  ]
[ "daytime",			  "command",	  "calc",	  "(s:lng):daytime ",															  "MTIMEsecs2daytime;"					  ]
[ "daytime",			  "command",	  "calc",	  "(d:daytime):daytime ",														  "MTIMEdaytime2daytime;"				  ]
[ "daytime",			  "command",	  "calc",	  "(s:str):daytime ",															  "MTIMEdaytime_fromstr;"				  ]
[ "date",			  "command",	  "calc",	  "(t:timestamp):date ",														  "MTIMEtimestamp_extract_date_default;"		  ]
[ "date",			  "command",	  "calc",	  "(d:date):date ",															  "MTIMEdate_date;"					  ]
[ "date",			  "command",	  "calc",	  "(s:str):date ",															  "MTIMEdate_fromstr;"					  ]
[ "dbl",			  "command",	  "calc",	  "(v:void):dbl ",															  "CALCnil2dbl;"					  ]
[ "dbl",			  "command",	  "calc",	  "(v:str):dbl ",															  "CALCstr2dbl;"					  ]
[ "dbl",			  "command",	  "calc",	  "(x:lng):dbl ",															  "CALClng2dbl;"					  ]
[ "dbl",			  "command",	  "calc",	  "(x:int):dbl ",															  "CALCint2dbl;"					  ]
[ "dbl",			  "command",	  "calc",	  "(x:sht):dbl ",															  "CALCsht2dbl;"					  ]
[ "dbl",			  "command",	  "calc",	  "(x:bte):dbl ",															  "CALCbte2dbl;"					  ]
[ "dbl",			  "command",	  "calc",	  "(x:flt):dbl ",															  "CALCflt2dbl;"					  ]
[ "dbl",			  "command",	  "calc",	  "(x:dbl):dbl ",															  "CALCdbl2dbl;"					  ]
[ "flt",		  "command",	  "calc",		  "(s1:int,v:lng,d2:int,s2:int):flt ",							  "lng_dec2dec_flt;"			  ]
[ "flt",		  "command",	  "calc",		  "(s1:int,v:lng):flt ",								  "lng_dec2_flt;"			  ]
[ "flt",		  "command",	  "calc",		  "(v:lng,digits:int,scale:int):flt ",							  "lng_num2dec_flt;"			  ]
[ "flt",		  "command",	  "calc",		  "(v:lng):flt ",									  "lng_2_flt;"				  ]
[ "flt",		  "command",	  "calc",		  "(s1:int,v:wrd,d2:int,s2:int):flt ",							  "wrd_dec2dec_flt;"			  ]
[ "flt",		  "command",	  "calc",		  "(s1:int,v:wrd):flt ",								  "wrd_dec2_flt;"			  ]
[ "flt",		  "command",	  "calc",		  "(v:wrd,digits:int,scale:int):flt ",							  "wrd_num2dec_flt;"			  ]
[ "flt",		  "command",	  "calc",		  "(v:wrd):flt ",									  "wrd_2_flt;"				  ]
[ "flt",		  "command",	  "calc",		  "(s1:int,v:int,d2:int,s2:int):flt ",							  "int_dec2dec_flt;"			  ]
[ "flt",		  "command",	  "calc",		  "(s1:int,v:int):flt ",								  "int_dec2_flt;"			  ]
[ "flt",		  "command",	  "calc",		  "(v:int,digits:int,scale:int):flt ",							  "int_num2dec_flt;"			  ]
[ "flt",		  "command",	  "calc",		  "(v:int):flt ",									  "int_2_flt;"				  ]
[ "flt",		  "command",	  "calc",		  "(s1:int,v:sht,d2:int,s2:int):flt ",							  "sht_dec2dec_flt;"			  ]
[ "flt",		  "command",	  "calc",		  "(s1:int,v:sht):flt ",								  "sht_dec2_flt;"			  ]
[ "flt",		  "command",	  "calc",		  "(v:sht,digits:int,scale:int):flt ",							  "sht_num2dec_flt;"			  ]
[ "flt",		  "command",	  "calc",		  "(v:sht):flt ",									  "sht_2_flt;"				  ]
[ "flt",		  "command",	  "calc",		  "(s1:int,v:bte,d2:int,s2:int):flt ",							  "bte_dec2dec_flt;"			  ]
[ "flt",		  "command",	  "calc",		  "(s1:int,v:bte):flt ",								  "bte_dec2_flt;"			  ]
[ "flt",		  "command",	  "calc",		  "(v:bte,digits:int,scale:int):flt ",							  "bte_num2dec_flt;"			  ]
[ "flt",		  "command",	  "calc",		  "(v:bte):flt ",									  "bte_2_flt;"				  ]
[ "flt",		  "command",	  "calc",		  "(v:str):flt ",									  "str_2_flt;"				  ]
[ "flt",			  "command",	  "calc",	  "(v:void):flt ",															  "CALCnil2flt;"					  ]
[ "flt",			  "command",	  "calc",	  "(v:str):flt ",															  "CALCstr2flt;"					  ]
[ "flt",			  "command",	  "calc",	  "(x:lng):flt ",															  "CALClng2flt;"					  ]
[ "flt",			  "command",	  "calc",	  "(x:int):flt ",															  "CALCint2flt;"					  ]
[ "flt",			  "command",	  "calc",	  "(x:sht):flt ",															  "CALCsht2flt;"					  ]
[ "flt",			  "command",	  "calc",	  "(x:bte):flt ",															  "CALCbte2flt;"					  ]
[ "flt",			  "command",	  "calc",	  "(x:dbl):flt ",															  "CALCdbl2flt;"					  ]
[ "flt",			  "command",	  "calc",	  "(x:flt):flt ",															  "CALCflt2flt;"					  ]
[ "geomcollection",	  "function",	  "calc",	  "(wkt:str):wkb;",											  "nil"					  ]
[ "geometry",		  "function",	  "calc",		  "(wkt:str):wkb;",									  "nil"					  ]
[ "getBAT",			  "command",	  "calc",	  "(b:BAT):bat[:any_1,:any_2] ",													  "CALCbatid2bat;"					  ]
[ "getBATidentifier",		  "command",	  "calc",	  "(b:bat[:any_1,:any_2]):BAT ",													  "CALCbat2batid;"					  ]
[ "hash",		  "pattern",	  "calc",		  "(v:any):wrd ",									  "MKEYhash;"				  ]
[ "int",		  "command",	  "calc",		  "(s1:int,v:lng,d2:int,s2:int):int ",							  "lng_dec2dec_int;"			  ]
[ "int",		  "command",	  "calc",		  "(s1:int,v:lng):int ",								  "lng_dec2_int;"			  ]
[ "int",		  "command",	  "calc",		  "(v:lng,digits:int,scale:int):int ",							  "lng_num2dec_int;"			  ]
[ "int",		  "command",	  "calc",		  "(v:lng):int ",									  "lng_2_int;"				  ]
[ "int",		  "command",	  "calc",		  "(s1:int,v:wrd,d2:int,s2:int):int ",							  "wrd_dec2dec_int;"			  ]
[ "int",		  "command",	  "calc",		  "(s1:int,v:wrd):int ",								  "wrd_dec2_int;"			  ]
[ "int",		  "command",	  "calc",		  "(v:wrd,digits:int,scale:int):int ",							  "wrd_num2dec_int;"			  ]
[ "int",		  "command",	  "calc",		  "(v:wrd):int ",									  "wrd_2_int;"				  ]
[ "int",		  "command",	  "calc",		  "(s1:int,v:int,d2:int,s2:int):int ",							  "int_dec2dec_int;"			  ]
[ "int",		  "command",	  "calc",		  "(s1:int,v:int):int ",								  "int_dec2_int;"			  ]
[ "int",		  "command",	  "calc",		  "(v:int,digits:int,scale:int):int ",							  "int_num2dec_int;"			  ]
[ "int",		  "command",	  "calc",		  "(v:int):int ",									  "int_2_int;"				  ]
[ "int",		  "command",	  "calc",		  "(s1:int,v:sht,d2:int,s2:int):int ",							  "sht_dec2dec_int;"			  ]
[ "int",		  "command",	  "calc",		  "(s1:int,v:sht):int ",								  "sht_dec2_int;"			  ]
[ "int",		  "command",	  "calc",		  "(v:sht,digits:int,scale:int):int ",							  "sht_num2dec_int;"			  ]
[ "int",		  "command",	  "calc",		  "(v:sht):int ",									  "sht_2_int;"				  ]
[ "int",		  "command",	  "calc",		  "(s1:int,v:bte,d2:int,s2:int):int ",							  "bte_dec2dec_int;"			  ]
[ "int",		  "command",	  "calc",		  "(s1:int,v:bte):int ",								  "bte_dec2_int;"			  ]
[ "int",		  "command",	  "calc",		  "(v:bte,digits:int,scale:int):int ",							  "bte_num2dec_int;"			  ]
[ "int",		  "command",	  "calc",		  "(v:bte):int ",									  "bte_2_int;"				  ]
[ "int",		  "command",	  "calc",		  "(v:dbl,digits:int,scale:int):int ",							  "dbl_num2dec_int;"			  ]
[ "int",		  "command",	  "calc",		  "(v:dbl):int ",									  "dbl_2_int;"				  ]
[ "int",		  "command",	  "calc",		  "(v:flt,digits:int,scale:int):int ",							  "flt_num2dec_int;"			  ]
[ "int",		  "command",	  "calc",		  "(v:flt):int ",									  "flt_2_int;"				  ]
[ "int",		  "command",	  "calc",		  "(v:str,digits:int,scale:int):int ",							  "str_2dec_int;"			  ]
[ "int",		  "command",	  "calc",		  "(v:str,digits:int):int ",								  "str_2num_int;"			  ]
[ "int",		  "command",	  "calc",		  "(v:str):int ",									  "str_2_int;"				  ]
[ "isnil",		  "command",	  "calc",	  "(v:wkb):bit ",										  "wkbIsnil;"				  ]
[ "isnil",			  "command",	  "calc",	  "(v:inet):bit ",															  "INET_isnil;"						  ]
[ "inet",			  "command",	  "calc",	  "(s:str):inet ",															  "INET_fromstr;"					  ]
[ "inet",			  "command",	  "calc",	  "(s:inet):inet ",															  "INET_inet;"						  ]
[ "isnil",			  "command",	  "calc",	  "(v:timestamp):bit ",															  "MTIMEtimestamp_isnil;"				  ]
[ "isnil",			  "command",	  "calc",	  "(v:daytime):bit ",															  "MTIMEdaytime_isnil;"					  ]
[ "isnil",			  "command",	  "calc",	  "(v:date):bit ",															  "MTIMEdate_isnil;"					  ]
[ "isnil",			  "command",	  "calc",	  "(v:sqlblob):bit ",															  "BLOB_isnil;"						  ]
[ "isnil",			  "command",	  "calc",	  "(v:blob):bit ",															  "BLOB_isnil;"						  ]
[ "int",			  "command",	  "calc",	  "(v:void):int ",															  "CALCnil2int;"					  ]
[ "int",			  "command",	  "calc",	  "(v:str):int ",															  "CALCstr2int;"					  ]
[ "ifthenelse",			  "pattern",	  "calc",	  "(b:bit,t:any_1,f:any_1):any_1 ",													  "CALCswitchbit;"					  ]
[ "int",			  "command",	  "calc",	  "(x:dbl):int ",															  "CALCdbl2int;"					  ]
[ "int",			  "command",	  "calc",	  "(x:flt):int ",															  "CALCflt2int;"					  ]
[ "int",			  "command",	  "calc",	  "(x:lng):int ",															  "CALClng2int;"					  ]
[ "int",			  "command",	  "calc",	  "(x:wrd):int ",															  "CALCwrd2int;"					  ]
[ "int",			  "command",	  "calc",	  "(x:int):int ",															  "CALCint2int;"					  ]
[ "int",			  "command",	  "calc",	  "(x:sht):int ",															  "CALCsht2int;"					  ]
[ "int",			  "command",	  "calc",	  "(x:bte):int ",															  "CALCbte2int;"					  ]
[ "int",			  "command",	  "calc",	  "(x:bit):int ",															  "CALCbit2int;"					  ]
[ "int",			  "command",	  "calc",	  "(x:oid):int ",															  "CALCoid2int;"					  ]
[ "inv",			  "command",	  "calc",	  "(x:dbl):dbl ",															  "CALCunarycheckdblINV;"				  ]
[ "inv",			  "command",	  "calc",	  "(x:lng):lng ",															  "CALCunarychecklngINV;"				  ]
[ "inv",			  "command",	  "calc",	  "(x:flt):flt ",															  "CALCunarycheckfltINV;"				  ]
[ "inv",			  "command",	  "calc",	  "(x:wrd):wrd ",															  "CALCunarycheckwrdINV;"				  ]
[ "inv",			  "command",	  "calc",	  "(x:int):int ",															  "CALCunarycheckintINV;"				  ]
[ "inv",			  "command",	  "calc",	  "(x:sht):sht ",															  "CALCunarycheckshtINV;"				  ]
[ "inv",			  "command",	  "calc",	  "(x:bte):bte ",															  "CALCunarycheckbteINV;"				  ]
[ "inv",			  "command",	  "calc",	  "(x:bit):bit ",														  "CALCunarycheckbitINV;"				  ]
[ "isnotnil",			  "command",	  "calc",	  "(v:void):bit ",															  "CALCisnotnil_void;"					  ]
[ "isnil",			  "command",	  "calc",	  "(v:void):bit ",															  "CALCisnil_void;"					  ]
[ "isnotnil",			  "command",	  "calc",	  "(v:BAT):bit ",															  "CALCisnotnil_bat;"					  ]
[ "isnil",			  "command",	  "calc",	  "(v:BAT):bit ",															  "CALCisnil_bat;"					  ]
[ "isnotnil",			  "command",	  "calc",	  "(v:str):bit ",															  "CALCisnotnil_str;"					  ]
[ "isnil",			  "command",	  "calc",	  "(v:str):bit ",															  "CALCisnil_str;"					  ]
[ "isnotnil",			  "command",	  "calc",	  "(v:dbl):bit ",															  "CALCisnotnil_dbl;"					  ]
[ "isnil",			  "command",	  "calc",	  "(v:dbl):bit ",															  "CALCisnil_dbl;"					  ]
[ "isnotnil",			  "command",	  "calc",	  "(v:flt):bit ",															  "CALCisnotnil_flt;"					  ]
[ "isnil",			  "command",	  "calc",	  "(v:flt):bit ",															  "CALCisnil_flt;"					  ]
[ "isnotnil",			  "command",	  "calc",	  "(v:lng):bit ",																  "CALCisnotnil_lng;"				  ]
[ "isnil",			  "command",	  "calc",	  "(v:lng):bit ",																  "CALCisnil_lng;"				  ]
[ "isnotnil",			  "command",	  "calc",	  "(v:wrd):bit ",																  "CALCisnotnil_wrd;"				  ]
[ "isnil",			  "command",	  "calc",	  "(v:wrd):bit ",																  "CALCisnil_wrd;"				  ]
[ "isnotnil",			  "command",	  "calc",	  "(v:oid):bit ",															  "CALCisnotnil_oid;"					  ]
[ "isnil",			  "command",	  "calc",	  "(v:oid):bit ",															  "CALCisnil_oid;"					  ]
[ "isnotnil",			  "command",	  "calc",	  "(v:int):bit ",															  "CALCisnotnil_int;"					  ]
[ "isnil",			  "command",	  "calc",	  "(v:int):bit ",															  "CALCisnil_int;"					  ]
[ "isnotnil",			  "command",	  "calc",	  "(v:sht):bit ",															  "CALCisnotnil_sht;"					  ]
[ "isnil",			  "command",	  "calc",	  "(v:sht):bit ",															  "CALCisnil_sht;"					  ]
[ "isnotnil",			  "command",	  "calc",	  "(v:bte):bit ",															  "CALCisnotnil_bte;"					  ]
[ "isnil",			  "command",	  "calc",	  "(v:bte):bit ",															  "CALCisnil_bte;"					  ]
[ "isnotnil",			  "command",	  "calc",	  "(v:bit):bit ",															  "CALCisnotnil_bit;"					  ]
[ "isnil",			  "command",	  "calc",	  "(v:bit):bit ",															  "CALCisnil_bit;"					  ]
[ "lng",		  "command",	  "calc",		  "(s1:int,v:lng,d2:int,s2:int):lng ",							  "lng_dec2dec_lng;"			  ]
[ "lng",		  "command",	  "calc",		  "(s1:int,v:lng):lng ",								  "lng_dec2_lng;"			  ]
[ "lng",		  "command",	  "calc",		  "(v:lng,digits:int,scale:int):lng ",							  "lng_num2dec_lng;"			  ]
[ "lng",		  "command",	  "calc",		  "(v:lng):lng ",									  "lng_2_lng;"				  ]
[ "lng",		  "command",	  "calc",		  "(s1:int,v:wrd,d2:int,s2:int):lng ",							  "wrd_dec2dec_lng;"			  ]
[ "lng",		  "command",	  "calc",		  "(s1:int,v:wrd):lng ",								  "wrd_dec2_lng;"			  ]
[ "lng",		  "command",	  "calc",		  "(v:wrd,digits:int,scale:int):lng ",							  "wrd_num2dec_lng;"			  ]
[ "lng",		  "command",	  "calc",		  "(v:wrd):lng ",									  "wrd_2_lng;"				  ]
[ "lng",		  "command",	  "calc",		  "(s1:int,v:int,d2:int,s2:int):lng ",							  "int_dec2dec_lng;"			  ]
[ "lng",		  "command",	  "calc",		  "(s1:int,v:int):lng ",								  "int_dec2_lng;"			  ]
[ "lng",		  "command",	  "calc",		  "(v:int,digits:int,scale:int):lng ",							  "int_num2dec_lng;"			  ]
[ "lng",		  "command",	  "calc",		  "(v:int):lng ",									  "int_2_lng;"				  ]
[ "lng",		  "command",	  "calc",		  "(s1:int,v:sht,d2:int,s2:int):lng ",							  "sht_dec2dec_lng;"			  ]
[ "lng",		  "command",	  "calc",		  "(s1:int,v:sht):lng ",								  "sht_dec2_lng;"			  ]
[ "lng",		  "command",	  "calc",		  "(v:sht,digits:int,scale:int):lng ",							  "sht_num2dec_lng;"			  ]
[ "lng",		  "command",	  "calc",		  "(v:sht):lng ",									  "sht_2_lng;"				  ]
[ "lng",		  "command",	  "calc",		  "(s1:int,v:bte,d2:int,s2:int):lng ",							  "bte_dec2dec_lng;"			  ]
[ "lng",		  "command",	  "calc",		  "(s1:int,v:bte):lng ",								  "bte_dec2_lng;"			  ]
[ "lng",		  "command",	  "calc",		  "(v:bte,digits:int,scale:int):lng ",							  "bte_num2dec_lng;"			  ]
[ "lng",		  "command",	  "calc",		  "(v:bte):lng ",									  "bte_2_lng;"				  ]
[ "lng",		  "command",	  "calc",		  "(v:dbl,digits:int,scale:int):lng ",							  "dbl_num2dec_lng;"			  ]
[ "lng",		  "command",	  "calc",		  "(v:dbl):lng ",									  "dbl_2_lng;"				  ]
[ "lng",		  "command",	  "calc",		  "(v:flt,digits:int,scale:int):lng ",							  "flt_num2dec_lng;"			  ]
[ "lng",		  "command",	  "calc",		  "(v:flt):lng ",									  "flt_2_lng;"				  ]
[ "lng",		  "command",	  "calc",		  "(v:str,digits:int,scale:int):lng ",							  "str_2dec_lng;"			  ]
[ "lng",		  "command",	  "calc",		  "(v:str,digits:int):lng ",								  "str_2num_lng;"			  ]
[ "lng",		  "command",	  "calc",		  "(v:str):lng ",									  "str_2_lng;"				  ]
[ "linestring",		  "function",	  "calc",	  "(wkt:str):wkb;",										  "nil"					  ]
[ "lng",			  "command",	  "calc",	  "(v:void):lng ",															  "CALCnil2lng;"					  ]
[ "lng",			  "command",	  "calc",	  "(v:str):lng ",															  "CALCstr2lng;"					  ]
[ "lng",			  "command",	  "calc",	  "(x:dbl):lng ",															  "CALCdbl2lng;"					  ]
[ "lng",			  "command",	  "calc",	  "(x:flt):lng ",															  "CALCflt2lng;"					  ]
[ "lng",			  "command",	  "calc",	  "(x:lng):lng ",															  "CALClng2lng;"					  ]
[ "lng",			  "command",	  "calc",	  "(x:wrd):lng ",															  "CALCwrd2lng;"					  ]
[ "lng",			  "command",	  "calc",	  "(x:int):lng ",															  "CALCint2lng;"					  ]
[ "lng",			  "command",	  "calc",	  "(x:sht):lng ",															  "CALCsht2lng;"					  ]
[ "lng",			  "command",	  "calc",	  "(x:bte):lng ",															  "CALCbte2lng;"					  ]
[ "lng",			  "command",	  "calc",	  "(x:bit):lng ",															  "CALCbit2lng;"					  ]
[ "lng",			  "command",	  "calc",	  "(x:oid):lng ",															  "CALCoid2lng;"					  ]
[ "length",			  "command",	  "calc",	  "(x:str):int ",															  "CALClengthstr;"					  ]
[ "month_interval",	  "command",	  "calc",	  "(v:lng,ek:int,sk:int):int ",									  "month_interval_lng;"			  ]
[ "month_interval",	  "command",	  "calc",	  "(v:wrd,ek:int,sk:int):int ",									  "month_interval_wrd;"			  ]
[ "month_interval",	  "command",	  "calc",	  "(v:int,ek:int,sk:int):int ",									  "month_interval_int;"			  ]
[ "month_interval",	  "command",	  "calc",	  "(v:sht,ek:int,sk:int):int ",									  "month_interval_sht;"			  ]
[ "month_interval",	  "command",	  "calc",	  "(v:bte,ek:int,sk:int):int ",									  "month_interval_bte;"			  ]
[ "month_interval",	  "command",	  "calc",	  "(v:str,ek:int,sk:int):int ",									  "month_interval_str;"			  ]
[ "multipolygon",	  "function",	  "calc",		  "(wkt:str):wkb;",									  "nil"					  ]
[ "multisurface",	  "function",	  "calc",		  "(wkt:str):wkb;",									  "nil"					  ]
[ "multilinestring",	  "function",	  "calc",		  "(wkt:str):wkb;",									  "nil"					  ]
[ "multicurve",		  "function",	  "calc",		  "(wkt:str):wkb;",									  "nil"					  ]
[ "multipoint",		  "function",	  "calc",		  "(wkt:str):wkb;",									  "nil"					  ]
[ "mbr",		  "command",	  "calc",		  "(v:mbr):mbr ",									  "mbrFromMBR;"				  ]
[ "mbr",		  "command",	  "calc",		  "(v:str):mbr ",									  "mbrFromString;"			  ]
[ "max_no_nil",			  "command",	  "calc",	  "(v:timestamp,w:timestamp):timestamp ",												  "MTIMEtimestamp_max_no_nil;"				  ]
[ "min_no_nil",			  "command",	  "calc",	  "(v:timestamp,w:timestamp):timestamp ",												  "MTIMEtimestamp_min_no_nil;"				  ]
[ "max",			  "command",	  "calc",	  "(v:timestamp,w:timestamp):timestamp ",												  "MTIMEtimestamp_max;"					  ]
[ "min",			  "command",	  "calc",	  "(v:timestamp,w:timestamp):timestamp ",												  "MTIMEtimestamp_min;"					  ]
[ "max_no_nil",			  "command",	  "calc",	  "(v:daytime,w:daytime):daytime ",													  "MTIMEdaytime_max_no_nil;"				  ]
[ "min_no_nil",			  "command",	  "calc",	  "(v:daytime,w:daytime):daytime ",													  "MTIMEdaytime_min_no_nil;"				  ]
[ "max",			  "command",	  "calc",	  "(v:daytime,w:daytime):daytime ",													  "MTIMEdaytime_max;"					  ]
[ "min",			  "command",	  "calc",	  "(v:daytime,w:daytime):daytime ",													  "MTIMEdaytime_min;"					  ]
[ "max_no_nil",			  "command",	  "calc",	  "(v:date,w:date):date ",														  "MTIMEdate_max_no_nil;"				  ]
[ "min_no_nil",			  "command",	  "calc",	  "(v:date,w:date):date ",														  "MTIMEdate_min_no_nil;"				  ]
[ "max",			  "command",	  "calc",	  "(v:date,w:date):date ",														  "MTIMEdate_max;"					  ]
[ "min",			  "command",	  "calc",	  "(v:date,w:date):date ",														  "MTIMEdate_min;"					  ]
[ "min_no_nil",			  "command",	  "calc",	  "(s:str,t:str):str ",															  "STRmin_no_nil;"					  ]
[ "min",			  "command",	  "calc",	  "(s:str,t:str):str ",															  "STRmin;"						  ]
[ "max_no_nil",			  "command",	  "calc",	  "(s:str,t:str):str ",															  "STRmax_no_nil;"					  ]
[ "max",			  "command",	  "calc",	  "(s:str,t:str):str ",															  "STRmax;"						  ]
[ "min_no_nil",			  "command",	  "calc",	  "(ll:dbl,r:dbl):dbl ",														  "CALCbinaryMIN_NO_NILdbl;"				  ]
[ "max_no_nil",			  "command",	  "calc",	  "(l:dbl,r:dbl):dbl ",															  "CALCbinaryMAX_NO_NILdbl;"				  ]
[ "min",			  "command",	  "calc",	  "(l:dbl,r:dbl):dbl ",															  "CALCbinaryMINdbl;"					  ]
[ "max",			  "command",	  "calc",	  "(l:dbl,r:dbl):dbl ",															  "CALCbinaryMAXdbl;"					  ]
[ "min_no_nil",			  "command",	  "calc",	  "(ll:lng,r:lng):lng ",														  "CALCbinaryMIN_NO_NILlng;"				  ]
[ "max_no_nil",			  "command",	  "calc",	  "(l:lng,r:lng):lng ",															  "CALCbinaryMAX_NO_NILlng;"				  ]
[ "min",			  "command",	  "calc",	  "(l:lng,r:lng):lng ",															  "CALCbinaryMINlng;"					  ]
[ "max",			  "command",	  "calc",	  "(l:lng,r:lng):lng ",															  "CALCbinaryMAXlng;"					  ]
[ "min_no_nil",			  "command",	  "calc",	  "(ll:flt,r:flt):flt ",														  "CALCbinaryMIN_NO_NILflt;"				  ]
[ "max_no_nil",			  "command",	  "calc",	  "(l:flt,r:flt):flt ",															  "CALCbinaryMAX_NO_NILflt;"				  ]
[ "min",			  "command",	  "calc",	  "(l:flt,r:flt):flt ",															  "CALCbinaryMINflt;"					  ]
[ "max",			  "command",	  "calc",	  "(l:flt,r:flt):flt ",															  "CALCbinaryMAXflt;"					  ]
[ "min_no_nil",			  "command",	  "calc",	  "(ll:oid,r:oid):oid ",														  "CALCbinaryMIN_NO_NILoid;"				  ]
[ "max_no_nil",			  "command",	  "calc",	  "(l:oid,r:oid):oid ",															  "CALCbinaryMAX_NO_NILoid;"				  ]
[ "min",			  "command",	  "calc",	  "(l:oid,r:oid):oid ",															  "CALCbinaryMINoid;"					  ]
[ "max",			  "command",	  "calc",	  "(l:oid,r:oid):oid ",															  "CALCbinaryMAXoid;"					  ]
[ "min_no_nil",			  "command",	  "calc",	  "(ll:wrd,r:wrd):wrd ",														  "CALCbinaryMIN_NO_NILwrd;"				  ]
[ "max_no_nil",			  "command",	  "calc",	  "(l:wrd,r:wrd):wrd ",															  "CALCbinaryMAX_NO_NILwrd;"				  ]
[ "min",			  "command",	  "calc",	  "(l:wrd,r:wrd):wrd ",															  "CALCbinaryMINwrd;"					  ]
[ "max",			  "command",	  "calc",	  "(l:wrd,r:wrd):wrd ",															  "CALCbinaryMAXwrd;"					  ]
[ "min_no_nil",			  "command",	  "calc",	  "(ll:int,r:int):int ",														  "CALCbinaryMIN_NO_NILint;"				  ]
[ "max_no_nil",			  "command",	  "calc",	  "(l:int,r:int):int ",															  "CALCbinaryMAX_NO_NILint;"				  ]
[ "min",			  "command",	  "calc",	  "(l:int,r:int):int ",															  "CALCbinaryMINint;"					  ]
[ "max",			  "command",	  "calc",	  "(l:int,r:int):int ",															  "CALCbinaryMAXint;"					  ]
[ "min_no_nil",			  "command",	  "calc",	  "(ll:sht,r:sht):sht ",														  "CALCbinaryMIN_NO_NILsht;"				  ]
[ "max_no_nil",			  "command",	  "calc",	  "(l:sht,r:sht):sht ",															  "CALCbinaryMAX_NO_NILsht;"				  ]
[ "min",			  "command",	  "calc",	  "(l:sht,r:sht):sht ",															  "CALCbinaryMINsht;"					  ]
[ "max",			  "command",	  "calc",	  "(l:sht,r:sht):sht ",															  "CALCbinaryMAXsht;"					  ]
[ "min_no_nil",			  "command",	  "calc",	  "(ll:bte,r:bte):bte ",														  "CALCbinaryMIN_NO_NILbte;"				  ]
[ "max_no_nil",			  "command",	  "calc",	  "(l:bte,r:bte):bte ",															  "CALCbinaryMAX_NO_NILbte;"				  ]
[ "min",			  "command",	  "calc",	  "(l:bte,r:bte):bte ",															  "CALCbinaryMINbte;"					  ]
[ "max",			  "command",	  "calc",	  "(l:bte,r:bte):bte ",															  "CALCbinaryMAXbte;"					  ]
[ "min_no_nil",			  "command",	  "calc",	  "(ll:bit,r:bit):bit ",													  "CALCbinaryMIN_NO_NILbit;"				  ]
[ "max_no_nil",			  "command",	  "calc",	  "(l:bit,r:bit):bit ",														  "CALCbinaryMAX_NO_NILbit;"				  ]
[ "min",			  "command",	  "calc",	  "(l:bit,r:bit):bit ",														  "CALCbinaryMINbit;"					  ]
[ "max",			  "command",	  "calc",	  "(l:bit,r:bit):bit ",														  "CALCbinaryMAXbit;"					  ]
[ "newoid",			  "command",	  "calc",	  "(incr:int):oid ",															  "CALCnewoidInc;"					  ]
[ "newoid",			  "command",	  "calc",	  "(incr:lng):oid ",															  "CALCnewoidInclng;"					  ]
[ "newoid",			  "command",	  "calc",	  "():oid ",																  "CALCnewoidBase;"					  ]
[ "not",			  "command",	  "calc",	  "(left:lng):lng ",															  "CALCunarylngNOT;"					  ]
[ "not",			  "command",	  "calc",	  "(left:int):int ",															  "CALCunaryintNOT;"					  ]
[ "not",			  "command",	  "calc",	  "(left:sht):sht ",															  "CALCunaryshtNOT;"					  ]
[ "not",			  "command",	  "calc",	  "(left:bte):bte ",															  "CALCunarybteNOT;"					  ]
[ "not",			  "command",	  "calc",	  "(left:bit):bit ",															  "CALCunarybitNOT;"					  ]
[ "oid",			  "command",	  "calc",	  "(v:void):oid ",															  "CALCnil2oid;"					  ]
[ "oid",			  "command",	  "calc",	  "(v:str):oid ",															  "CALCstr2oid;"					  ]
[ "or",				  "command",	  "calc",	  "(left:lng,right:lng):lng ",														  "CALCbinaryORlnglng;"					  ]
[ "or",				  "command",	  "calc",	  "(left:int,right:int):int ",														  "CALCbinaryORintint;"					  ]
[ "or",				  "command",	  "calc",	  "(left:sht,right:sht):sht ",														  "CALCbinaryORshtsht;"					  ]
[ "or",				  "command",	  "calc",	  "(left:bte,right:bte):bte ",														  "CALCbinaryORbtebte;"					  ]
[ "or",				  "command",	  "calc",	  "(left:bit,right:bit):bit ",														  "CALCbinaryORbit;"					  ]
[ "oid",			  "command",	  "calc",	  "(x:dbl):oid ",															  "CALCdbl2oid;"					  ]
[ "oid",			  "command",	  "calc",	  "(x:flt):oid ",															  "CALCflt2oid;"					  ]
[ "oid",			  "command",	  "calc",	  "(x:int):oid ",															  "CALCint2oid;"					  ]
[ "oid",			  "command",	  "calc",	  "(x:sht):oid ",															  "CALCsht2oid;"					  ]
[ "oid",			  "command",	  "calc",	  "(x:bte):oid ",															  "CALCbte2oid;"					  ]
[ "oid",			  "command",	  "calc",	  "(x:wrd):oid ",															  "CALCwrd2oid;"					  ]
[ "oid",			  "command",	  "calc",	  "(x:lng):oid ",															  "CALClng2oid;"					  ]
[ "oid",			  "command",	  "calc",	  "(x:oid):oid ",															  "CALCoid2oid;"					  ]
[ "polygon",		  "function",	  "calc",		  "(wkt:str):wkb;",									  "nil"					  ]
[ "point",		  "function",	  "calc",		  "(wkt:str):wkb;",									  "nil"					  ]
[ "ptr",			  "command",	  "calc",	  "(v:void):ptr ",															  "CALCnil2ptr;"					  ]
[ "ptr",			  "command",	  "calc",	  "(v:str):ptr ",															  "CALCstr2ptr;"					  ]
[ "ptr",				  "command",	  "calc",	  "(x:ptr):ptr ",														  "CALCptr2ptr;"				  ]
[ "rowid",		  "command",	  "calc",		  "(v:any_1,schema:str,table:str):oid ",						  "sql_rowid;"				  ]
[ "rotate_xor_hash",	  "pattern",	  "calc",		  "(h:wrd,nbits:int,v:any_1):wrd ",							  "MKEYrotate_xor_hash;"		  ]
[ "second_interval",	  "command",	  "calc",		  "(v:daytime,ek:int,sk:int):lng ",							  "second_interval_daytime;"		  ]
[ "second_interval",	  "command",	  "calc",		  "(v:lng,ek:int,sk:int):lng ",								  "second_interval_lng;"		  ]
[ "second_interval",	  "command",	  "calc",		  "(v:wrd,ek:int,sk:int):lng ",								  "second_interval_wrd;"		  ]
[ "second_interval",	  "command",	  "calc",		  "(v:int,ek:int,sk:int):lng ",								  "second_interval_int;"		  ]
[ "second_interval",	  "command",	  "calc",		  "(v:sht,ek:int,sk:int):lng ",								  "second_interval_sht;"		  ]
[ "second_interval",	  "command",	  "calc",		  "(v:bte,ek:int,sk:int):lng ",								  "second_interval_bte;"		  ]
[ "second_interval",	  "command",	  "calc",		  "(v:str,ek:int,sk:int):lng ",								  "second_interval_str;"		  ]
[ "sht",		  "command",	  "calc",		  "(s1:int,v:lng,d2:int,s2:int):sht ",							  "lng_dec2dec_sht;"			  ]
[ "sht",		  "command",	  "calc",		  "(s1:int,v:lng):sht ",								  "lng_dec2_sht;"			  ]
[ "sht",		  "command",	  "calc",		  "(v:lng,digits:int,scale:int):sht ",							  "lng_num2dec_sht;"			  ]
[ "sht",		  "command",	  "calc",		  "(v:lng):sht ",									  "lng_2_sht;"				  ]
[ "sht",		  "command",	  "calc",		  "(s1:int,v:wrd,d2:int,s2:int):sht ",							  "wrd_dec2dec_sht;"			  ]
[ "sht",		  "command",	  "calc",		  "(s1:int,v:wrd):sht ",								  "wrd_dec2_sht;"			  ]
[ "sht",		  "command",	  "calc",		  "(v:wrd,digits:int,scale:int):sht ",							  "wrd_num2dec_sht;"			  ]
[ "sht",		  "command",	  "calc",		  "(v:wrd):sht ",									  "wrd_2_sht;"				  ]
[ "sht",		  "command",	  "calc",		  "(s1:int,v:int,d2:int,s2:int):sht ",							  "int_dec2dec_sht;"			  ]
[ "sht",		  "command",	  "calc",		  "(s1:int,v:int):sht ",								  "int_dec2_sht;"			  ]
[ "sht",		  "command",	  "calc",		  "(v:int,digits:int,scale:int):sht ",							  "int_num2dec_sht;"			  ]
[ "sht",		  "command",	  "calc",		  "(v:int):sht ",									  "int_2_sht;"				  ]
[ "sht",		  "command",	  "calc",		  "(s1:int,v:sht,d2:int,s2:int):sht ",							  "sht_dec2dec_sht;"			  ]
[ "sht",		  "command",	  "calc",		  "(s1:int,v:sht):sht ",								  "sht_dec2_sht;"			  ]
[ "sht",		  "command",	  "calc",		  "(v:sht,digits:int,scale:int):sht ",							  "sht_num2dec_sht;"			  ]
[ "sht",		  "command",	  "calc",		  "(v:sht):sht ",									  "sht_2_sht;"				  ]
[ "sht",		  "command",	  "calc",		  "(s1:int,v:bte,d2:int,s2:int):sht ",							  "bte_dec2dec_sht;"			  ]
[ "sht",		  "command",	  "calc",		  "(s1:int,v:bte):sht ",								  "bte_dec2_sht;"			  ]
[ "sht",		  "command",	  "calc",		  "(v:bte,digits:int,scale:int):sht ",							  "bte_num2dec_sht;"			  ]
[ "sht",		  "command",	  "calc",		  "(v:bte):sht ",									  "bte_2_sht;"				  ]
[ "sht",		  "command",	  "calc",		  "(v:dbl,digits:int,scale:int):sht ",							  "dbl_num2dec_sht;"			  ]
[ "sht",		  "command",	  "calc",		  "(v:dbl):sht ",									  "dbl_2_sht;"				  ]
[ "sht",		  "command",	  "calc",		  "(v:flt,digits:int,scale:int):sht ",							  "flt_num2dec_sht;"			  ]
[ "sht",		  "command",	  "calc",		  "(v:flt):sht ",									  "flt_2_sht;"				  ]
[ "substring",		  "command",	  "calc",		  "(s:str,offset:int,count:int):str ",							  "STRsubstring;"			  ]
[ "substring",		  "command",	  "calc",		  "(s:str,offset:int):str ",								  "STRsubstringTail;"			  ]
[ "str",		  "pattern",	  "calc",		  "(eclass:int,d1:int,s1:int,has_tz:int,v:any_1,digits:int):str ",			  "SQLstr_cast;"			  ]
[ "str",		  "command",	  "calc",		  "(v:str):str ",									  "CALCstr2str;"			  ]
[ "str",		  "command",	  "calc",		  "(v:sqlblob):str ",									  "SQLsqlblob_2_str;"			  ]
[ "sqlblob",		  "command",	  "calc",		  "(v:str):sqlblob ",									  "str_2_sqlblob;"			  ]
[ "str",		  "command",	  "calc",		  "(v:date):str ",									  "SQLdate_2_str;"			  ]
[ "str",		  "command",	  "calc",		  "(v:dbl):str ",									  "SQLdbl_2_str;"			  ]
[ "str",		  "command",	  "calc",		  "(v:flt):str ",									  "SQLflt_2_str;"			  ]
[ "str",		  "command",	  "calc",		  "(v:wrd):str ",									  "SQLwrd_2_str;"			  ]
[ "sht",		  "command",	  "calc",		  "(v:str,digits:int,scale:int):sht ",							  "str_2dec_sht;"			  ]
[ "sht",		  "command",	  "calc",		  "(v:str,digits:int):sht ",								  "str_2num_sht;"			  ]
[ "sht",		  "command",	  "calc",		  "(v:str):sht ",									  "str_2_sht;"				  ]
[ "second_interval",	  "command",	  "calc",	  "(sc:int,v:lng,ek:int,sk:int):lng ",																													  "lng_dec2second_interval;"		  ]
[ "second_interval",	  "command",	  "calc",	  "(sc:int,v:int,ek:int,sk:int):lng ",																													  "int_dec2second_interval;"		  ]
[ "second_interval",	  "command",	  "calc",	  "(sc:int,v:sht,ek:int,sk:int):lng ",																													  "sht_dec2second_interval;"		  ]
[ "second_interval",	  "command",	  "calc",	  "(sc:int,v:bte,ek:int,sk:int):lng ",																													  "bte_dec2second_interval;"		  ]
[ "surface",		  "function",	  "calc",	  "(wkt:str):wkb;",										  "nil"					  ]
[ "sqlblob",			  "command",	  "calc",	  "(s:str):sqlblob ",															  "BLOBsqlblob_fromstr;"				  ]
[ "sqlblob",			  "command",	  "calc",	  "(b:sqlblob):sqlblob ",														  "BLOBblob_blob;"					  ]
[ "setoid",			  "command",	  "calc",	  "():oid ",																  "CALCsetoidBase;"					  ]
[ "setoid",			  "command",	  "calc",	  "(base:oid):oid ",															  "CALCsetoidInc;"					  ]
[ "setoid",			  "command",	  "calc",	  "(v:oid):void ",															  "oidSetoidImpl;"					  ]
[ "setoid",			  "command",	  "calc",	  "(v:lng):void ",															  "lngSetoidImpl;"					  ]
[ "setoid",			  "command",	  "calc",	  "(v:int):void ",															  "intSetoidImpl;"					  ]
[ "str",			  "command",	  "calc",	  "(v:str):str ",															  "CALCstr2str;"					  ]
[ "str",			  "command",	  "calc",	  "(v:void):str ",															  "CALCnil2str;"					  ]
[ "str",			  "command",	  "calc",	  "(v:bat[:any_1,:any_2]):str ",													  "CALCbat2str;"					  ]
[ "str",			  "command",	  "calc",	  "(v:bte):str ",															  "CALCbte2str;"					  ]
[ "str",			  "command",	  "calc",	  "(v:ptr):str ",															  "CALCptr2str;"					  ]
[ "str",			  "command",	  "calc",	  "(v:bit):str ",															  "CALCbit2str;"					  ]
[ "str",			  "command",	  "calc",	  "(v:dbl):str ",															  "CALCdbl2str;"					  ]
[ "str",			  "command",	  "calc",	  "(v:flt):str ",															  "CALCflt2str;"					  ]
[ "str",			  "command",	  "calc",	  "(v:lng):str ",															  "CALClng2str;"					  ]
[ "str",			  "command",	  "calc",	  "(v:BAT):str ",															  "CALCbat2str;"					  ]
[ "str",			  "command",	  "calc",	  "(v:int):str ",															  "CALCint2str;"					  ]
[ "sht",			  "command",	  "calc",	  "(v:void):sht ",															  "CALCnil2sht;"					  ]
[ "str",			  "command",	  "calc",	  "(v:sht):str ",															  "CALCsht2str;"					  ]
[ "sht",			  "command",	  "calc",	  "(v:str):sht ",															  "CALCstr2sht;"					  ]
[ "str",			  "command",	  "calc",	  "(v:oid):str ",															  "CALCoid2str;"					  ]
[ "str",			  "command",	  "calc",	  "(x:dbl):str ",															  "CALCdbl2str;"					  ]
[ "str",			  "command",	  "calc",	  "(x:flt):str ",															  "CALCflt2str;"					  ]
[ "str",			  "command",	  "calc",	  "(x:lng):str ",															  "CALClng2str;"					  ]
[ "str",			  "command",	  "calc",	  "(x:int):str ",															  "CALCint2str;"					  ]
[ "str",			  "command",	  "calc",	  "(x:sht):str ",															  "CALCsht2str;"					  ]
[ "str",			  "command",	  "calc",	  "(x:bte):str ",															  "CALCbte2str;"					  ]
[ "sht",			  "command",	  "calc",	  "(x:dbl):sht ",															  "CALCdbl2sht;"					  ]
[ "sht",			  "command",	  "calc",	  "(x:flt):sht ",															  "CALCflt2sht;"					  ]
[ "sht",			  "command",	  "calc",	  "(x:lng):sht ",															  "CALClng2sht;"					  ]
[ "sht",			  "command",	  "calc",	  "(x:wrd):sht ",															  "CALCwrd2sht;"					  ]
[ "sht",			  "command",	  "calc",	  "(x:int):sht ",															  "CALCint2sht;"					  ]
[ "sht",			  "command",	  "calc",	  "(x:sht):sht ",															  "CALCsht2sht;"					  ]
[ "sht",			  "command",	  "calc",	  "(x:bte):sht ",															  "CALCbte2sht;"					  ]
[ "sht",			  "command",	  "calc",	  "(x:bit):sht ",															  "CALCbit2sht;"					  ]
[ "sht",			  "command",	  "calc",	  "(x:oid):sht ",															  "CALCoid2sht;"					  ]
[ "sign",			  "command",	  "calc",	  "(x:dbl):int ",															  "CALCunarydblSIGN;"					  ]
[ "sizeof",			  "command",	  "calc",	  "(x:dbl):int ",															  "CALCsizeofdbl;"					  ]
[ "sign",			  "command",	  "calc",	  "(x:lng):int ",															  "CALCunarylngSIGN;"					  ]
[ "sizeof",			  "command",	  "calc",	  "(x:lng):int ",															  "CALCsizeoflng;"					  ]
[ "sign",			  "command",	  "calc",	  "(x:flt):int ",															  "CALCunaryfltSIGN;"					  ]
[ "sizeof",			  "command",	  "calc",	  "(x:flt):int ",															  "CALCsizeofflt;"					  ]
[ "sign",			  "command",	  "calc",	  "(x:wrd):int ",															  "CALCunarywrdSIGN;"					  ]
[ "sizeof",			  "command",	  "calc",	  "(x:wrd):int ",															  "CALCsizeofwrd;"					  ]
[ "sign",			  "command",	  "calc",	  "(x:int):int ",															  "CALCunaryintSIGN;"					  ]
[ "sizeof",			  "command",	  "calc",	  "(x:int):int ",															  "CALCsizeofint;"					  ]
[ "sign",			  "command",	  "calc",	  "(x:sht):int ",															  "CALCunaryshtSIGN;"					  ]
[ "sizeof",			  "command",	  "calc",	  "(x:sht):int ",															  "CALCsizeofsht;"					  ]
[ "sign",			  "command",	  "calc",	  "(x:bte):int ",															  "CALCunarybteSIGN;"					  ]
[ "sizeof",			  "command",	  "calc",	  "(x:bte):int ",															  "CALCsizeofbte;"					  ]
[ "sign",			  "command",	  "calc",	  "(x:bit):int ",														  "CALCunarybitSIGN;"					  ]
[ "sizeof",			  "command",	  "calc",	  "(x:bit):int ",														  "CALCsizeofbit;"					  ]
[ "sqladd",				  "command",	  "calc",	  "(left:lng,right:dbl):dbl ",														  "CALCbinarySQLADDlngdbl;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:lng,right:flt):dbl ",														  "CALCbinarySQLADDlngflt;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:lng,right:lng):lng ",														  "CALCbinarySQLADDlnglng;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:lng,right:wrd):lng ",														  "CALCbinarySQLADDlngwrd;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:lng,right:int):lng ",														  "CALCbinarySQLADDlngint;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:lng,right:sht):lng ",														  "CALCbinarySQLADDlngsht;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:lng,right:bte):lng ",														  "CALCbinarySQLADDlngbte;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:dbl,right:dbl):dbl ",														  "CALCbinarySQLADDdbldbl;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:dbl,right:flt):dbl ",														  "CALCbinarySQLADDdblflt;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:dbl,right:lng):dbl ",														  "CALCbinarySQLADDdbllng;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:dbl,right:wrd):dbl ",														  "CALCbinarySQLADDdblwrd;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:dbl,right:int):dbl ",														  "CALCbinarySQLADDdblint;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:dbl,right:sht):dbl ",														  "CALCbinarySQLADDdblsht;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:dbl,right:bte):dbl ",														  "CALCbinarySQLADDdblbte;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:flt,right:dbl):dbl ",														  "CALCbinarySQLADDfltdbl;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:flt,right:flt):flt ",														  "CALCbinarySQLADDfltflt;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:flt,right:lng):flt ",														  "CALCbinarySQLADDfltlng;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:flt,right:wrd):flt ",														  "CALCbinarySQLADDfltwrd;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:flt,right:int):flt ",														  "CALCbinarySQLADDfltint;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:flt,right:sht):flt ",														  "CALCbinarySQLADDfltsht;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:flt,right:bte):flt ",														  "CALCbinarySQLADDfltbte;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:wrd,right:dbl):dbl ",														  "CALCbinarySQLADDwrddbl;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:wrd,right:flt):flt ",														  "CALCbinarySQLADDwrdflt;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:wrd,right:lng):lng ",														  "CALCbinarySQLADDwrdlng;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:wrd,right:wrd):wrd ",														  "CALCbinarySQLADDwrdwrd;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:wrd,right:int):wrd ",														  "CALCbinarySQLADDwrdint;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:wrd,right:sht):wrd ",														  "CALCbinarySQLADDwrdsht;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:wrd,right:bte):wrd ",														  "CALCbinarySQLADDwrdbte;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:int,right:dbl):dbl ",														  "CALCbinarySQLADDintdbl;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:int,right:flt):flt ",														  "CALCbinarySQLADDintflt;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:int,right:lng):lng ",														  "CALCbinarySQLADDintlng;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:int,right:wrd):wrd ",														  "CALCbinarySQLADDintwrd;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:int,right:int):int ",														  "CALCbinarySQLADDintint;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:int,right:sht):int ",														  "CALCbinarySQLADDintsht;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:int,right:bte):int ",														  "CALCbinarySQLADDintbte;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:sht,right:dbl):dbl ",														  "CALCbinarySQLADDshtdbl;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:sht,right:flt):flt ",														  "CALCbinarySQLADDshtflt;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:sht,right:lng):lng ",														  "CALCbinarySQLADDshtlng;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:sht,right:wrd):wrd ",														  "CALCbinarySQLADDshtwrd;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:sht,right:int):int ",														  "CALCbinarySQLADDshtint;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:sht,right:sht):sht ",														  "CALCbinarySQLADDshtsht;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:sht,right:bte):sht ",														  "CALCbinarySQLADDshtbte;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:bte,right:dbl):dbl ",														  "CALCbinarySQLADDbtedbl;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:bte,right:flt):flt ",														  "CALCbinarySQLADDbteflt;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:bte,right:lng):lng ",														  "CALCbinarySQLADDbtelng;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:bte,right:wrd):wrd ",														  "CALCbinarySQLADDbtewrd;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:bte,right:int):int ",														  "CALCbinarySQLADDbteint;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:bte,right:sht):sht ",														  "CALCbinarySQLADDbtesht;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:bte,right:bte):bte ",														  "CALCbinarySQLADDbtebte;"				  ]
[ "sqladd",				  "command",	  "calc",	  "(left:oid,right:oid):oid ",														  "CALCbinarySQLADDoidoid;"				  ]
[ "timestamp",		  "command",	  "calc",	  "(v:date,d:int):timestamp ",																														  "date_2_timestamp;"			  ]
[ "timestamp",		  "command",	  "calc",	  "(v:timestamp,digits:int):timestamp ",																												  "timestamp_2time_timestamp;"		  ]
[ "timestamp",		  "command",	  "calc",	  "(v:str,digits:int):timestamp ",																													  "str_2time_timestamp;"		  ]
[ "timestamp",		  "command",	  "calc",		  "(v:str):timestamp ",									  "str_2_timestamp;"			  ]
[ "timestamp",			  "command",	  "calc",	  "(msecs:lng):timestamp ",														  "MTIMEtimestamp_lng;"					  ]
[ "timestamp",			  "command",	  "calc",	  "(secs:int):timestamp ",														  "MTIMEtimestamp;"					  ]
[ "timestamp",			  "command",	  "calc",	  "(d:date):timestamp ",														  "MTIMEtimestamp_create_from_date;"			  ]
[ "timestamp",			  "command",	  "calc",	  "(t:timestamp):timestamp ",														  "MTIMEtimestamp2timestamp;"				  ]
[ "timestamp",			  "command",	  "calc",	  "(s:str):timestamp ",															  "MTIMEtimestamp_fromstr;"				  ]
[ "url",			  "command",	  "calc",	  "(s:url):url ",																  "URLnoop;"						  ]
[ "url",		  "command",	  "calc",		  "(s:str):url ",											  "URLnoop;"				  ]
[ "void",			  "command",	  "calc",	  "(v:lng):void ",															  "CALClng2void;"					  ]
[ "void",			  "command",	  "calc",	  "(v:sht):void ",															  "CALCsht2void;"					  ]
[ "void",			  "command",	  "calc",	  "(v:int):void ",															  "CALCint2void;"					  ]
[ "void",			  "command",	  "calc",	  "(v:void):void ",															  "CALCnil2void;"					  ]
[ "wrd",		  "command",	  "calc",		  "(s1:int,v:wrd,d2:int,s2:int):wrd ",							  "wrd_dec2dec_wrd;"			  ]
[ "wrd",		  "command",	  "calc",		  "(s1:int,v:wrd):wrd ",								  "wrd_dec2_wrd;"			  ]
[ "wrd",		  "command",	  "calc",		  "(v:wrd,digits:int,scale:int):wrd ",							  "wrd_num2dec_wrd;"			  ]
[ "wrd",		  "command",	  "calc",		  "(v:wrd):wrd ",									  "wrd_2_wrd;"				  ]
[ "wrd",		  "command",	  "calc",		  "(s1:int,v:int,d2:int,s2:int):wrd ",							  "int_dec2dec_wrd;"			  ]
[ "wrd",		  "command",	  "calc",		  "(s1:int,v:int):wrd ",								  "int_dec2_wrd;"			  ]
[ "wrd",		  "command",	  "calc",		  "(v:int,digits:int,scale:int):wrd ",							  "int_num2dec_wrd;"			  ]
[ "wrd",		  "command",	  "calc",		  "(v:int):wrd ",									  "int_2_wrd;"				  ]
[ "wrd",		  "command",	  "calc",		  "(s1:int,v:sht,d2:int,s2:int):wrd ",							  "sht_dec2dec_wrd;"			  ]
[ "wrd",		  "command",	  "calc",		  "(s1:int,v:sht):wrd ",								  "sht_dec2_wrd;"			  ]
[ "wrd",		  "command",	  "calc",		  "(v:sht,digits:int,scale:int):wrd ",							  "sht_num2dec_wrd;"			  ]
[ "wrd",		  "command",	  "calc",		  "(v:sht):wrd ",									  "sht_2_wrd;"				  ]
[ "wrd",		  "command",	  "calc",		  "(s1:int,v:bte,d2:int,s2:int):wrd ",							  "bte_dec2dec_wrd;"			  ]
[ "wrd",		  "command",	  "calc",		  "(s1:int,v:bte):wrd ",								  "bte_dec2_wrd;"			  ]
[ "wrd",		  "command",	  "calc",		  "(v:bte,digits:int,scale:int):wrd ",							  "bte_num2dec_wrd;"			  ]
[ "wrd",		  "command",	  "calc",		  "(v:bte):wrd ",									  "bte_2_wrd;"				  ]
[ "wrd",		  "command",	  "calc",		  "(v:dbl,digits:int,scale:int):wrd ",							  "dbl_num2dec_wrd;"			  ]
[ "wrd",		  "command",	  "calc",		  "(v:dbl):wrd ",									  "dbl_2_wrd;"				  ]
[ "wrd",		  "command",	  "calc",		  "(v:flt,digits:int,scale:int):wrd ",							  "flt_num2dec_wrd;"			  ]
[ "wrd",		  "command",	  "calc",		  "(v:flt):wrd ",									  "flt_2_wrd;"				  ]
[ "wrd",		  "command",	  "calc",		  "(v:str):wrd ",									  "str_2_wrd;"				  ]
[ "wkb",		  "command",	  "calc",	  "(v:wkb):wkb ",										  "wkbFromWKB;"				  ]
[ "wkb",		  "command",	  "calc",	  "(v:str):wkb ",										  "wkbFromString;"			  ]
[ "wrd",			  "command",	  "calc",	  "(x:dbl):wrd ",															  "CALCdbl2wrd;"					  ]
[ "wrd",			  "command",	  "calc",	  "(x:flt):wrd ",															  "CALCflt2wrd;"					  ]
[ "wrd",			  "command",	  "calc",	  "(x:lng):wrd ",															  "CALClng2wrd;"					  ]
[ "wrd",			  "command",	  "calc",	  "(x:wrd):wrd ",															  "CALCwrd2wrd;"					  ]
[ "wrd",			  "command",	  "calc",	  "(x:int):wrd ",															  "CALCint2wrd;"					  ]
[ "wrd",			  "command",	  "calc",	  "(x:sht):wrd ",															  "CALCsht2wrd;"					  ]
[ "wrd",			  "command",	  "calc",	  "(x:bte):wrd ",															  "CALCbte2wrd;"					  ]
[ "wrd",			  "command",	  "calc",	  "(x:bit):wrd ",															  "CALCbit2wrd;"					  ]
[ "wrd",			  "command",	  "calc",	  "(x:oid):wrd ",															  "CALCoid2wrd;"					  ]
[ "xml",			  "command",	  "calc",	  "(src:xml):xml ",													  "XMLxml2xml;"					  ]
[ "xml",			  "command",	  "calc",	  "(src:str):xml ",													  "XMLstr2xml;"					  ]
[ "xor",			  "command",	  "calc",	  "(left:lng,right:lng):lng ",														  "CALCbinaryXORlnglng;"				  ]
[ "xor",			  "command",	  "calc",	  "(left:int,right:int):int ",														  "CALCbinaryXORintint;"				  ]
[ "xor",			  "command",	  "calc",	  "(left:sht,right:sht):sht ",														  "CALCbinaryXORshtsht;"				  ]
[ "xor",			  "command",	  "calc",	  "(left:bte,right:bte):bte ",														  "CALCbinaryXORbtebte;"				  ]
[ "xor",			  "command",	  "calc",	  "(left:bit,right:bit):bit ",														  "CALCbinaryXORbit;"					  ]
[ "antijoin",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_4]):bat[:any_1,:any_4] ",								  "ALGantijoin;"					  ]
[ "antiuselect",		  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],low:any_2,high:any_2,li:bit,hi:bit):bat[:any_1,:void] ",						  "ALGantiuselectInclusive;"			  ]
[ "antiuselect",		  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],value:any_2):bat[:any_1,:void] ",									  "ALGantiuselect1;"				  ]
[ "bandjoin",			  "command",	  "algebra",	  "(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3],minus:any_2,plus:any_2,li:bit,hi:bit):bat[:any_1,:any_3] ",			  "ALGbandjoin;"					  ]
[ "bandjoin",			  "command",	  "algebra",	  "(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3],minus:any_2,plus:any_2):bat[:any_1,:any_3] ",					  "ALGbandjoin_default;"				  ]
[ "crossproduct",		  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_3,:any_4]):bat[:any_1,:any_4] ",								  "ALGcross;"						  ]
[ "copy",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "ALGcopy;"						  ]
[ "difference",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "ALGsdiff;"						  ]
[ "exist",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):bit ",											  "ALGexistBUN;"					  ]
[ "exist",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],h:any_1):bit ",												  "ALGexist;"						  ]
[ "fetchjoin",			  "command",	  "algebra",	  "(left:bat[:any_1,:oid],right:bat[:oid,:any_3]):bat[:any_1,:any_3] ",									  "ALGfetchjoin;"					  ]
[ "fragment",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],hlow:any_1,hhigh:any_1,tlow:any_2,thigh:any_2):bat[:any_1,:any_2] ",						  "ALGfragment;"					  ]
[ "fetch",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],s:bat[:oid,:any_3]):bat[:any_1,:any_2] ",									  "ALGfetchbat;"					  ]
[ "fetch",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],s:bat[:lng,:any_3]):bat[:any_1,:any_2] ",									  "ALGfetchbat;"					  ]
[ "fetch",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],s:bat[:int,:any_3]):bat[:any_1,:any_2] ",									  "ALGfetchbat;"					  ]
[ "fetch",			  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],x:int):any_1 ",												  "ALGfetchint;"					  ]
[ "fetch",			  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],x:lng):any_1 ",												  "ALGfetch;"						  ]
[ "fetch",			  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],x:oid):any_1 ",												  "ALGfetchoid;"					  ]
[ "find",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],h:any_1):any_2 ",												  "ALGfind;"						  ]
[ "groupby",			  "command",	  "algebra",	  "(b:bat[:any_1,:wrd]):bat[:any_1,:oid] ",													  "ALGgroupby;"					  ]
[ "hashsplit",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],buckects:int):bat[:int,:BAT] ",										  "ALGhashsplit;"					  ]
[ "hashjoin",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",								  "ALGhashjoin;"					  ]
[ "indexjoin",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",								  "ALGindexjoin;"					  ]
[ "intersect",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "ALGsintersect;"					  ]
[ "joinPath",			  "pattern",	  "algebra",	  "(l:bat[:any,:any]...):bat[:any,:any] ",												  "ALGjoinPath;"					  ]
[ "join",			  "command",	  "algebra",	  "(l:bat[:any_1,:any_2],rl:bat[:any_3,:any_2],rh:bat[:any_3,:any_2],li:bit,hi:bit):bat[:any_1,:any_3] ",				  "ALGrangejoin;"					  ]
[ "join",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],estimate:lng):bat[:any_1,:any_3] ",						  "ALGjoinestimate;"					  ]
[ "join",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",								  "ALGjoin;"						  ]
[ "join",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",								  "ALGjoin;"						  ]
[ "kunion",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "ALGkunion;"						  ]
[ "kdifference",		  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] ",								  "ALGkdiff;"						  ]
[ "kintersect",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] ",								  "ALGsemijoin;"					  ]
[ "kunique",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "ALGkunique;"						  ]
[ "leftjoinPath",			  "pattern",	  "algebra",	  "(l:bat[:any,:any]...):bat[:any,:any] ",											  "ALGjoinPath;"				  ]
[ "leftfetchjoin",		  "command",	  "algebra",	  "(left:bat[:any_1,:oid],right:bat[:oid,:any_3]):bat[:any_1,:any_3] ",									  "ALGleftfetchjoin;"					  ]
[ "leftjoin",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],estimate:lng):bat[:any_1,:any_3] ",						  "ALGleftjoinestimate;"				  ]
[ "leftjoin",				  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",							  "ALGleftjoin;"				  ]
[ "like",			  "command",	  "algebra",	  "(b:bat[:any_1,:str],substr:str):bat[:any_1,:str] ",											  "ALGlike;"						  ]
[ "materialize",		  "command",	  "algebra",	  "(b:bat[:oid,:any_1]):bat[:oid,:any_1] ",												  "ALGmaterialize;"					  ]
[ "merge",			  "command",	  "algebra",	  "(b:bat[:oid,:oid]):bat[:lng,:oid] ",													  "ALGmerge;"						  ]
[ "mark_grp",			  "command",	  "algebra",	  "(b:bat[:any_1,:oid],g:bat[:oid,:any_2],s:oid):bat[:any_1,:oid] ",									  "ALGmark_grp_2;"					  ]
[ "mark_grp",			  "command",	  "algebra",	  "(b:bat[:any_1,:oid],g:bat[:oid,:oid]):bat[:any_1,:oid] ",										  "ALGmark_grp_1;"					  ]
[ "markH",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],nr_parts:int,part_nr:int):bat[:any_1,:oid] ",								  "ALGhmarkp;"					  ]
[ "markH",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],base:oid):bat[:oid,:any_2] ",											  "ALGmarkHead;"					  ]
[ "markH",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:oid,:any_2] ",												  "ALGmarkHead_default;"				  ]
[ "markT",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],nr_parts:int,part_nr:int):bat[:any_1,:oid] ",								  "ALGtmarkp;"					  ]
[ "markT",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:oid] ",												  "ALGtmark_default;"					  ]
[ "markT",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],base:oid):bat[:any_1,:oid] ",											  "ALGtmark;"						  ]
[ "mergejoin",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",								  "ALGmergejoin;"					  ]
[ "number",			  "command",	  "algebra",	  "(b:bat[:any_1,:any]):bat[:any_1,:int] ",												  "ALGnumber;"						  ]
[ "outerjoin",			  "command",	  "algebra",	  "(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3],estimate:lng):bat[:any_1,:any_3] ",						  "ALGouterjoinestimate;"				  ]
[ "outerjoin",			  "command",	  "algebra",	  "(outer:bat[:any_1,:oid],inner:bat[:oid,:any_3]):bat[:any_1,:any_3] ",								  "ALGouterjoin;"					  ]
[ "outerjoin",			  "command",	  "algebra",	  "(outer:bat[:any_1,:oid],inner:bat[:oid,:any_3]):bat[:any_1,:any_3] ",								  "ALGouterjoin;"					  ]
[ "outerjoin",			  "command",	  "algebra",	  "(outer:bat[:any_1,:any_2],inner:bat[:any_2,:any_3]):bat[:any_1,:any_3] ",								  "ALGouterjoin;"					  ]
[ "prejoin",			  "command",	  "algebra",	  "(a:bat[:oid,:oid],b:bat[:oid,:any_1]) (c:bat[:oid,:oid],d:bat[:oid,:any_1]) ",						  "ALGprejoin;"					  ]
[ "project",			  "pattern",	  "algebra",	  "(b:bat[:any_1,:any_3],val:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",									  "ALGprojectCst;"					  ]
[ "project",			  "pattern",	  "algebra",	  "(b:bat[:any_1,:any_3],val:any_2):bat[:any_1,:any_2] ",										  "ALGprojectCst;"					  ]
[ "project",			  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],v:dbl):bat[:any_2,:dbl] ",											  "ALGprojecttail_dbl;"					  ]
[ "project",			  "command",	  "algebra",	  "(v:dbl,b:bat[:any_2,:any_1]):bat[:dbl,:any_1] ",											  "ALGprojecthead_dbl;"					  ]
[ "project",			  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],v:flt):bat[:any_2,:flt] ",											  "ALGprojecttail_flt;"					  ]
[ "project",			  "command",	  "algebra",	  "(v:flt,b:bat[:any_2,:any_1]):bat[:flt,:any_1] ",											  "ALGprojecthead_flt;"					  ]
[ "project",			  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],v:lng):bat[:any_2,:lng] ",											  "ALGprojecttail_lng;"					  ]
[ "project",			  "command",	  "algebra",	  "(v:lng,b:bat[:any_2,:any_1]):bat[:lng,:any_1] ",											  "ALGprojecthead_lng;"					  ]
[ "project",			  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],v:sht):bat[:any_2,:sht] ",											  "ALGprojecttail_sht;"					  ]
[ "project",			  "command",	  "algebra",	  "(v:sht,b:bat[:any_2,:any_1]):bat[:sht,:any_1] ",											  "ALGprojecthead_sht;"					  ]
[ "project",			  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],v:int):bat[:any_2,:int] ",											  "ALGprojecttail_int;"					  ]
[ "project",			  "command",	  "algebra",	  "(v:int,b:bat[:any_2,:any_1]):bat[:int,:any_1] ",											  "ALGprojecthead_int;"					  ]
[ "project",			  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],v:oid):bat[:any_2,:oid] ",											  "ALGprojecttail_oid;"					  ]
[ "project",			  "command",	  "algebra",	  "(v:oid,b:bat[:any_2,:any_1]):bat[:oid,:any_1] ",											  "ALGprojecthead_oid;"					  ]
[ "project",			  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],v:str):bat[:any_2,:str] ",											  "ALGprojecttail_str;"					  ]
[ "project",			  "command",	  "algebra",	  "(v:str,b:bat[:any_2,:any_1]):bat[:str,:any_1] ",											  "ALGprojecthead_str;"					  ]
[ "project",		  "command",	  "algebra",		  "(b:bat[:any_2,:any_1],v:bte):bat[:any_2,:bte] ",				  "ALGprojecttail_bte;"				  ]
[ "project",		  "command",	  "algebra",		  "(v:bte,b:bat[:any_2,:any_1]):bat[:bte,:any_1] ",				  "ALGprojecthead_bte;"				  ]
[ "project",			  "command",	  "algebra",	  "(b:bat[:any_2,:any_1],v:bit):bat[:any_2,:bit] ",											  "ALGprojecttail_bit;"					  ]
[ "project",			  "command",	  "algebra",	  "(v:bit,b:bat[:any_2,:any_1]):bat[:bit,:any_1] ",											  "ALGprojecthead_bit;"					  ]
[ "project",				  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:void] ",												  "ALGprojectNIL;"					  ]
[ "position",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],val:any_1,tval:any_2):wrd ",											  "ALGpositionBUN;"					  ]
[ "position",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],v:any_1):wrd ",												  "ALGposition;"					  ]
[ "rangesplit",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],ranges:int):bat[:any_2,:BAT] ",										  "ALGrangesplit;"					  ]
[ "reuse",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "ALGreuse;"						  ]
[ "revert",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "ALGrevert;"						  ]
[ "semijoinPath",		  "pattern",	  "algebra",	  "(l:bat[:any,:any]...):bat[:any,:any] ",												  "ALGjoinPath;"				  ]
[ "split",			  "command",	  "algebra",	  "(b:bat[:lng,:oid]):bat[:oid,:oid] ",													  "ALGsplit;"						  ]
[ "sunion",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "ALGsunion;"						  ]
[ "sdifference",		  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "ALGsdiff;"						  ]
[ "semijoin",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any]):bat[:any_1,:any_2] ",								  "ALGsemijoin;"					  ]
[ "sintersect",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "ALGsintersect;"					  ]
[ "sunique",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "ALGsunique;"						  ]
[ "ssort_rev",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "ALGssort_rev;"					  ]
[ "ssort",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "ALGssort;"						  ]
[ "sortTH",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "ALGthsort;"						  ]
[ "sortHT",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "ALGhtsort;"						  ]
[ "sortReverseTail",		  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "ALGtsort_rev;"					  ]
[ "sortTail",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "ALGtsort;"						  ]
[ "sortReverse",		  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "ALGhsort_rev;"					  ]
[ "sort",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "ALGhsort;"						  ]
[ "sample",			  "command",	  "algebra",	  "(b:bat[:oid,:any_2],num:int):bat[:oid,:any_2] ",											  "ALGsample;"						  ]
[ "slice",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],x:wrd,y:wrd):bat[:any_1,:any_2] ",										  "ALGslice_wrd;"				  ]
[ "slice",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],x:int,y:int):bat[:any_1,:any_2] ",										  "ALGslice_int;"					  ]
[ "slice",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],x:lng,y:lng):bat[:any_1,:any_2] ",										  "ALGslice;"						  ]
[ "select",			  "command",	  "algebra",	  "(b:bat[:any_2,:void],low:any_2,high:any_2,li:bit,hi:bit):bat[:any_2,:void] ",							  "ALGselectInclusiveHead;"				  ]
[ "select",			  "command",	  "algebra",	  "(b:bat[:any_2,:void],low:any_2,high:any_2):bat[:any_2,:void] ",									  "ALGselectHead;"					  ]
[ "select",			  "command",	  "algebra",	  "(b:bat[:any_2,:void],low:any_2):bat[:any_2,:void] ",											  "ALGselect1Head;"					  ]
[ "selectH",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],value:any_1):bat[:any_1,:any_2] ",										  "ALGselect1Head;"					  ]
[ "selectH",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],low:any_1,high:any_1,li:bit,hi:bit):bat[:any_1,:any_2] ",							  "ALGselectInclusiveHead;"				  ]
[ "selectH",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],low:any_1,high:any_1):bat[:any_1,:any_2] ",									  "ALGselectHead;"					  ]
[ "selectNotNil",		  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "ALGselectNotNil;"					  ]
[ "select",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],value:any_2):bat[:any_1,:any_2] ",										  "ALGselect1;"						  ]
[ "select",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],low:any_2,high:any_2,li:bit,hi:bit):bat[:any_1,:any_2] ",							  "ALGselectInclusive;"					  ]
[ "select",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],low:any_2,high:any_2):bat[:any_1,:any_2] ",									  "ALGselect;"						  ]
[ "thetajoin",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],opname:int,estimate:lng):bat[:any_1,:any_3] ",					  "ALGthetajoinEstimate;"				  ]
[ "thetajoin",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_2,:any_3],opname:int):bat[:any_1,:any_3] ",							  "ALGthetajoin;"					  ]
[ "tunique",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "ALGtunique;"						  ]
[ "thetauselect",		  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],val:any_2,op:str):bat[:any_1,:void] ",									  "ALGthetauselect;"				  ]
[ "topN",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],top:lng):bat[:any_1,:any_2] ",											  "ALGtopN;"						  ]
[ "thetaselect",		  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],val:any_2,op:str):bat[:any_1,:any_2] ",									  "ALGthetaselect;"					  ]
[ "urangesplit",		  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],ranges:int):bat[:any_2,:BAT] ",										  "ALGurangesplit;"					  ]
[ "uhashsplit",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2],buckets:int):bat[:int,:BAT] ",											  "ALGuhashsplit;"					  ]
[ "union",			  "command",	  "algebra",	  "(left:bat[:any_1,:any_2],right:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "ALGsunion;"						  ]
[ "unique",			  "command",	  "algebra",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "ALGsunique;"						  ]
[ "uselect",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],value:any_2):bat[:any_1,:void] ",									  "ALGuselect1;"				  ]
[ "uselect",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],low:any_2,high:any_2):bat[:any_1,:void] ",								  "ALGuselect;"					  ]
[ "uselect",			  "command",	  "algebra",		  "(b:bat[:any_1,:any_2],low:any_2,high:any_2,li:bit,hi:bit):bat[:any_1,:void] ",						  "ALGuselectInclusive;"			  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",								  "AX3aggrX3_avg3_dbl;"					  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:dbl],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",										  "AX3aggrX3_avg_dbl;"					  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",								  "AX3aggrX3_avg3_flt;"					  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:flt],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",										  "AX3aggrX3_avg_flt;"					  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",								  "AX3aggrX3_avg3_lng;"					  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:lng],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",										  "AX3aggrX3_avg_lng;"					  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",								  "AX3aggrX3_avg3_wrd;"					  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:wrd],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",										  "AX3aggrX3_avg_wrd;"					  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",								  "AX3aggrX3_avg3_int;"					  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",										  "AX3aggrX3_avg_int;"					  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",								  "AX3aggrX3_avg3_sht;"					  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",										  "AX3aggrX3_avg_sht;"					  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",								  "AX3aggrX3_avg3_bte;"					  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",										  "AX3aggrX3_avg_bte;"					  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:any_1,:dbl]):dbl ",														  "ALGavg_dbl;"						  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:any_1,:flt]):dbl ",														  "ALGavg_flt;"						  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:any_1,:lng]):dbl ",														  "ALGavg_lng;"						  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:any_1,:wrd]):dbl ",														  "ALGavg_wrd;"						  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:any_1,:int]):dbl ",														  "ALGavg_int;"						  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:any_1,:sht]):dbl ",														  "ALGavg_sht;"						  ]
[ "avg",			  "command",	  "aggr",	  "(b:bat[:any_1,:bte]):dbl ",														  "ALGavg_bte;"						  ]
[ "count_no_nil",		  "command",	  "aggr",	  "(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:wrd] ",									  "AX3count_no_nil3;"				  ]
[ "count",			  "command",	  "aggr",	  "(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:wrd] ",								  "AX3aggrX3_count3Nils;"				  ]
[ "count_no_nil",		  "command",	  "aggr",	  "(b:bat[:oid,:any_1],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",										  "AX3count_no_nil2;"					  ]
[ "count",			  "command",	  "aggr",	  "(b:bat[:void,:any_1],e:bat[:void,:any_2]):bat[:void,:wrd] ",										  "AX3aggrX3_count2Nils;"				  ]
[ "count",			  "command",	  "aggr",	  "(b:bat[:void,:any_1],e:bat[:oid,:any_2]):bat[:void,:wrd] ",										  "AX3aggrX3_count2Nils;"				  ]
[ "count",			  "command",	  "aggr",	  "(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2],nonils:bit):bat[:void,:wrd] ",						  "AX3aggrX3_count3;"					  ]
[ "count",			  "command",	  "aggr",	  "(b:bat[:oid,:any_1],e:bat[:oid,:any_2],ignorenils:bit):bat[:oid,:wrd] ",								  "AX3aggrX3_count;"					  ]
[ "cardinality",		  "command",	  "aggr",	  "(b:bat[:any_1,:any_2]):lng ",													  "ALGcard;"						  ]
[ "count_no_nil",		  "command",	  "aggr",	  "(b:bat[:any_1,:any_2]):wrd ",													  "ALGcount_no_nil;"					  ]
[ "count",			  "command",	  "aggr",	  "(b:bat[:any_1,:any],ignore_nils:bit):wrd ",												  "ALGcount_nil;"					  ]
[ "count",			  "command",	  "aggr",	  "(b:bat[:any_1,:any]):wrd ",														  "ALGcount_bat;"					  ]
[ "exist",		  "command",	  "aggr",		  "(b:bat[:any_1,:any_2],h:any_1):bit ",						  "ALGexist;"				  ]
[ "histogram",			  "command",	  "aggr",	  "(b:bat[:any_1,:any_2]):bat[:any_2,:int] ",												  "ALGhistogram;"					  ]
[ "max",			  "command",	  "aggr",	  "(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:any_1] ",								  "AX3aggrX3_max3;"					  ]
[ "min",			  "command",	  "aggr",	  "(b:bat[:oid,:any_1],g:bat[:oid,:oid],e:bat[:oid,:any_2]):bat[:oid,:any_1] ",								  "AX3aggrX3_min3;"					  ]
[ "max",			  "command",	  "aggr",	  "(b:bat[:oid,:any_1],e:bat[:oid,:any_2]):bat[:oid,:any_1] ",										  "AX3aggrX3_max;"					  ]
[ "min",			  "command",	  "aggr",	  "(b:bat[:oid,:any_1],e:bat[:oid,:any_2]):bat[:oid,:any_1] ",										  "AX3aggrX3_min;"					  ]
[ "min",			  "command",	  "aggr",	  "(b:bat[:any_1,:lng]):lng ",														  "ALGmin_lng;"						  ]
[ "min",			  "command",	  "aggr",	  "(b:bat[:any_1,:dbl]):dbl ",														  "ALGmin_dbl;"						  ]
[ "min",			  "command",	  "aggr",	  "(b:bat[:any_1,:flt]):flt ",														  "ALGmin_flt;"						  ]
[ "min",			  "command",	  "aggr",	  "(b:bat[:any_1,:wrd]):wrd ",														  "ALGmin_wrd;"						  ]
[ "min",			  "command",	  "aggr",	  "(b:bat[:any_1,:int]):int ",														  "ALGmin_int;"						  ]
[ "min",			  "command",	  "aggr",	  "(b:bat[:any_1,:sht]):sht ",														  "ALGmin_sht;"						  ]
[ "min",			  "command",	  "aggr",	  "(b:bat[:any_1,:bte]):bte ",														  "ALGmin_bte;"						  ]
[ "max",			  "command",	  "aggr",	  "(b:bat[:any_1,:lng]):lng ",														  "ALGmax_lng;"						  ]
[ "max",			  "command",	  "aggr",	  "(b:bat[:any_1,:dbl]):dbl ",														  "ALGmax_dbl;"						  ]
[ "max",			  "command",	  "aggr",	  "(b:bat[:any_1,:flt]):flt ",														  "ALGmax_flt;"						  ]
[ "max",			  "command",	  "aggr",	  "(b:bat[:any_1,:wrd]):wrd ",														  "ALGmax_wrd;"						  ]
[ "max",			  "command",	  "aggr",	  "(b:bat[:any_1,:int]):int ",														  "ALGmax_int;"						  ]
[ "max",			  "command",	  "aggr",	  "(b:bat[:any_1,:sht]):sht ",														  "ALGmax_sht;"						  ]
[ "max",			  "command",	  "aggr",	  "(b:bat[:any_1,:bte]):bte ",														  "ALGmax_bte;"						  ]
[ "max",			  "command",	  "aggr",	  "(b:bat[:any_1,:any_2]):any_2 ",													  "ALGmaxany;"						  ]
[ "min",			  "command",	  "aggr",	  "(b:bat[:any_1,:any_2]):any_2 ",													  "ALGminany;"						  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",								  "AX3aggrX3_prod3_dbl_dbl;"				  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",								  "AX3aggrX3_prod3_flt_dbl;"				  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:flt] ",								  "AX3aggrX3_prod3_flt_flt;"				  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",								  "AX3aggrX3_prod3_lng_lng;"				  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",								  "AX3aggrX3_prod3_lng_wrd;"				  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",								  "AX3aggrX3_prod3_wrd_lng;"				  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",								  "AX3aggrX3_prod3_wrd_wrd;"				  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",								  "AX3aggrX3_prod3_int_lng;"				  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",								  "AX3aggrX3_prod3_int_wrd;"				  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",								  "AX3aggrX3_prod3_int_int;"				  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",								  "AX3aggrX3_prod3_sht_lng;"				  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",								  "AX3aggrX3_prod3_sht_wrd;"				  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",								  "AX3aggrX3_prod3_sht_int;"				  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:sht] ",								  "AX3aggrX3_prod3_sht_sht;"				  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",								  "AX3aggrX3_prod3_bte_lng;"				  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",								  "AX3aggrX3_prod3_bte_wrd;"				  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",								  "AX3aggrX3_prod3_bte_int;"				  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:sht] ",								  "AX3aggrX3_prod3_bte_sht;"				  ]
[ "product",			  "command",	  "aggr",	  "(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:bte] ",								  "AX3aggrX3_prod3_bte_bte;"				  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:lng]):dbl;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:lng],empty_is_nil:bit):dbl ",												  "ALGprod_lng_dbl;"					  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:wrd]):dbl;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:wrd],empty_is_nil:bit):dbl ",												  "ALGprod_wrd_dbl;"					  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:int]):dbl;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:int],empty_is_nil:bit):dbl ",												  "ALGprod_int_dbl;"					  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:sht]):dbl;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:sht],empty_is_nil:bit):dbl ",												  "ALGprod_sht_dbl;"					  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:bte]):dbl;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:bte],empty_is_nil:bit):dbl ",												  "ALGprod_bte_dbl;"					  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:dbl]):dbl;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:dbl],empty_is_nil:bit):dbl ",												  "ALGprod_dbl_dbl;"					  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:flt]):dbl;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:flt],empty_is_nil:bit):dbl ",												  "ALGprod_flt_dbl;"					  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:flt]):flt;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:flt],empty_is_nil:bit):flt ",												  "ALGprod_flt_flt;"					  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:lng]):lng;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:lng],empty_is_nil:bit):lng ",												  "ALGprod_lng_lng;"					  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:wrd]):lng;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:wrd],empty_is_nil:bit):lng ",												  "ALGprod_wrd_lng;"					  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:wrd]):wrd;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:wrd],empty_is_nil:bit):wrd ",												  "ALGprod_wrd_wrd;"					  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:int]):lng;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:int],empty_is_nil:bit):lng ",												  "ALGprod_int_lng;"					  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:int]):wrd;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:int],empty_is_nil:bit):wrd ",												  "ALGprod_int_wrd;"					  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:int]):int;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:int],empty_is_nil:bit):int ",												  "ALGprod_int_int;"					  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:sht]):lng;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:sht],empty_is_nil:bit):lng ",												  "ALGprod_sht_lng;"					  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:sht]):wrd;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:sht],empty_is_nil:bit):wrd ",												  "ALGprod_sht_wrd;"					  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:sht]):int;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:sht],empty_is_nil:bit):int ",												  "ALGprod_sht_int;"					  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:sht]):sht;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:sht],empty_is_nil:bit):sht ",												  "ALGprod_sht_sht;"					  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:bte]):lng;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:bte],empty_is_nil:bit):lng ",												  "ALGprod_bte_lng;"					  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:bte]):wrd;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:bte],empty_is_nil:bit):wrd ",												  "ALGprod_bte_wrd;"					  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:bte]):int;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:bte],empty_is_nil:bit):int ",												  "ALGprod_bte_int;"					  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:bte]):sht;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:bte],empty_is_nil:bit):sht ",												  "ALGprod_bte_sht;"					  ]
[ "prod",			  "function",	  "aggr",	  "(b:bat[:any_1,:bte]):bte;",														  "nil"							  ]
[ "prod",			  "command",	  "aggr",	  "(b:bat[:any_1,:bte],empty_is_nil:bit):bte ",												  "ALGprod_bte_bte;"					  ]
[ "size",			  "command",	  "aggr",	  "(b:bat[:void,:bit],e:bat[:void,:any_1]):bat[:void,:wrd] ",										  "AX3aggrX3_size;"					  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:dbl],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",								  "AX3aggrX3_sum3_dbl_dbl;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:dbl],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",										  "AX3aggrX3_sum_dbl_dbl;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",								  "AX3aggrX3_sum3_flt_dbl;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:flt],e:bat[:oid,:any_1]):bat[:oid,:dbl] ",										  "AX3aggrX3_sum_flt_dbl;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:flt],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:flt] ",								  "AX3aggrX3_sum3_flt_flt;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:flt],e:bat[:oid,:any_1]):bat[:oid,:flt] ",										  "AX3aggrX3_sum_flt_flt;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",								  "AX3aggrX3_sum3_lng_lng;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:lng],e:bat[:oid,:any_1]):bat[:oid,:lng] ",										  "AX3aggrX3_sum_lng_lng;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:lng],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",								  "AX3aggrX3_sum3_lng_wrd;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:lng],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",										  "AX3aggrX3_sum_lng_wrd;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",								  "AX3aggrX3_sum3_wrd_lng;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:wrd],e:bat[:oid,:any_1]):bat[:oid,:lng] ",										  "AX3aggrX3_sum_wrd_lng;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:wrd],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",								  "AX3aggrX3_sum3_wrd_wrd;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:wrd],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",										  "AX3aggrX3_sum_wrd_wrd;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",								  "AX3aggrX3_sum3_int_lng;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:lng] ",										  "AX3aggrX3_sum_int_lng;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",								  "AX3aggrX3_sum3_int_wrd;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",										  "AX3aggrX3_sum_int_wrd;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:int],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",								  "AX3aggrX3_sum3_int_int;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:int],e:bat[:oid,:any_1]):bat[:oid,:int] ",										  "AX3aggrX3_sum_int_int;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",								  "AX3aggrX3_sum3_sht_lng;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:lng] ",										  "AX3aggrX3_sum_sht_lng;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",								  "AX3aggrX3_sum3_sht_wrd;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",										  "AX3aggrX3_sum_sht_wrd;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",								  "AX3aggrX3_sum3_sht_int;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:int] ",										  "AX3aggrX3_sum_sht_int;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:sht],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:sht] ",								  "AX3aggrX3_sum3_sht_sht;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:sht],e:bat[:oid,:any_1]):bat[:oid,:sht] ",										  "AX3aggrX3_sum_sht_sht;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:lng] ",								  "AX3aggrX3_sum3_bte_lng;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:lng] ",										  "AX3aggrX3_sum_bte_lng;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",								  "AX3aggrX3_sum3_bte_wrd;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:wrd] ",										  "AX3aggrX3_sum_bte_wrd;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:int] ",								  "AX3aggrX3_sum3_bte_int;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:int] ",										  "AX3aggrX3_sum_bte_int;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:sht] ",								  "AX3aggrX3_sum3_bte_sht;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:sht] ",										  "AX3aggrX3_sum_bte_sht;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:bte],g:bat[:oid,:oid],e:bat[:oid,:any_1]):bat[:oid,:bte] ",								  "AX3aggrX3_sum3_bte_bte;"				  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:oid,:bte],e:bat[:oid,:any_1]):bat[:oid,:bte] ",										  "AX3aggrX3_sum_bte_bte;"				  ]
[ "stdev",				  "command",	  "aggr",	  "(b:bat[:any_1,:dbl]):dbl ",													  "ALGstdev_dbl;"					  ]
[ "stdev",				  "command",	  "aggr",	  "(b:bat[:any_1,:flt]):dbl ",													  "ALGstdev_flt;"					  ]
[ "stdev",				  "command",	  "aggr",	  "(b:bat[:any_1,:lng]):dbl ",													  "ALGstdev_lng;"					  ]
[ "stdev",				  "command",	  "aggr",	  "(b:bat[:any_1,:wrd]):dbl ",													  "ALGstdev_wrd;"					  ]
[ "stdev",				  "command",	  "aggr",	  "(b:bat[:any_1,:int]):dbl ",													  "ALGstdev_int;"					  ]
[ "stdev",				  "command",	  "aggr",	  "(b:bat[:any_1,:sht]):dbl ",													  "ALGstdev_sht;"					  ]
[ "stdev",				  "command",	  "aggr",	  "(b:bat[:any_1,:bte]):dbl ",													  "ALGstdev_bte;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:lng]):dbl;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:lng],empty_is_nil:bit):dbl ",												  "ALGsum_lng_dbl;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:wrd]):dbl;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:wrd],empty_is_nil:bit):dbl ",												  "ALGsum_wrd_dbl;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:int]):dbl;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:int],empty_is_nil:bit):dbl ",												  "ALGsum_int_dbl;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:sht]):dbl;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:sht],empty_is_nil:bit):dbl ",												  "ALGsum_sht_dbl;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:bte]):dbl;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:bte],empty_is_nil:bit):dbl ",												  "ALGsum_bte_dbl;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:dbl]):dbl;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:dbl],empty_is_nil:bit):dbl ",												  "ALGsum_dbl_dbl;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:flt]):dbl;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:flt],empty_is_nil:bit):dbl ",												  "ALGsum_flt_dbl;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:flt]):flt;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:flt],empty_is_nil:bit):flt ",												  "ALGsum_flt_flt;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:lng]):lng;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:lng],empty_is_nil:bit):lng ",												  "ALGsum_lng_lng;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:wrd]):lng;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:wrd],empty_is_nil:bit):lng ",												  "ALGsum_wrd_lng;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:wrd]):wrd;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:wrd],empty_is_nil:bit):wrd ",												  "ALGsum_wrd_wrd;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:int]):lng;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:int],empty_is_nil:bit):lng ",												  "ALGsum_int_lng;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:int]):wrd;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:int],empty_is_nil:bit):wrd ",												  "ALGsum_int_wrd;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:int]):int;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:int],empty_is_nil:bit):int ",												  "ALGsum_int_int;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:sht]):lng;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:sht],empty_is_nil:bit):lng ",												  "ALGsum_sht_lng;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:sht]):wrd;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:sht],empty_is_nil:bit):wrd ",												  "ALGsum_sht_wrd;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:sht]):int;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:sht],empty_is_nil:bit):int ",												  "ALGsum_sht_int;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:sht]):sht;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:sht],empty_is_nil:bit):sht ",												  "ALGsum_sht_sht;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:bte]):lng;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:bte],empty_is_nil:bit):lng ",												  "ALGsum_bte_lng;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:bte]):wrd;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:bte],empty_is_nil:bit):wrd ",												  "ALGsum_bte_wrd;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:bte]):int;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:bte],empty_is_nil:bit):int ",												  "ALGsum_bte_int;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:bte]):sht;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:bte],empty_is_nil:bit):sht ",												  "ALGsum_bte_sht;"					  ]
[ "sum",			  "function",	  "aggr",	  "(b:bat[:any_1,:bte]):bte;",														  "nil"							  ]
[ "sum",			  "command",	  "aggr",	  "(b:bat[:any_1,:bte],empty_is_nil:bit):bte ",												  "ALGsum_bte_bte;"					  ]
[ "append",			  "command",	  "bat",	  "(i:bat[:any_1,:any_2],u:any_2,force:bit):bat[:any_1,:any_2] ",									  "BKCappend_val_force_wrap;"				  ]
[ "append",				  "command",	  "bat",	  "(i:bat[:any_1,:void],u:any_1):bat[:any_1,:void] ",								  "BKCappend_reverse_val_wrap;"				  ]
[ "append",				  "command",	  "bat",	  "(i:bat[:void,:any_1],u:any_1):bat[:void,:any_1] ",									  "BKCappend_val_wrap;"					  ]
[ "append",				  "command",	  "bat",	  "(i:bat[:oid,:any_1],u:any_1):bat[:oid,:any_1] ",									  "BKCappend_val_wrap;"					  ]
[ "append",			  "command",	  "bat",	  "(i:bat[:any_1,:any_2],u:bat[:any_1,:any_2],force:bit):bat[:any_1,:any_2] ",								  "BKCappend_force_wrap;"				  ]
[ "append",			  "command",	  "bat",	  "(i:bat[:any_1,:any_2],u:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",									  "BKCappend_wrap;"					  ]
[ "attach",			  "command",	  "bat",	  "(tt:int,heapfile:str):bat[:void,:any_1] ",													  "BKCattach;"					  ]
[ "delete",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",									  "BKCdelete_bat_bun;"					  ]
[ "deleteHead",			  "command",	  "bat",		  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any]):void ",										  "BKCdelete_bat;"				  ]
[ "delete",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "BKCdelete_all;"					  ]
[ "delete",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1):bat[:any_1,:any_2] ",											  "BKCdelete;"						  ]
[ "delete",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):bat[:any_1,:any_2] ",										  "BKCdelete_bun;"					  ]
[ "densebat",			  "command",	  "bat",	  "(size:wrd):bat[:void,:void] ",														  "BKCdensebat;"				  ]
[ "flush",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):void ",													  "CMDBATflush;"					  ]
[ "getTail",			  "pattern",	  "bat",	  "(b:bat[:any_2,:any_1],i:lng):any_1 ",												  "CHPgetTail;"						  ]
[ "getHead",			  "pattern",	  "bat",	  "(b:bat[:any_1,:any],i:lng):any_1 ",													  "CHPgetHead;"						  ]
[ "getHeat",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):lng ",													  "BKCheat;"						  ]
[ "getName",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):str ",													  "BKCgetBBPname;"					  ]
[ "getDelta",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "BKCgetDelta;"					  ]
[ "getAlpha",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "BKCgetAlpha;"					  ]
[ "getSpaceUsed",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):lng ",													  "BKCgetSpaceUsed;"					  ]
[ "getStorageSize",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):lng ",													  "BKCgetStorageSize;"					  ]
[ "getSequenceBase",		  "command",	  "bat",	  "(b:bat[:oid,:any_1]):oid ",														  "BKCgetSequenceBase;"					  ]
[ "getAccess",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):str ",													  "BKCgetAccess;"					  ]
[ "getRole",			  "command",	  "bat",	  "(bid:bat[:any_1,:any_2]):str ",													  "BKCgetRole;"						  ]
[ "getTailType",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):str ",													  "BKCgetTailType;"					  ]
[ "getHeadType",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):str ",													  "BKCgetHeadType;"					  ]
[ "getCapacity",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):lng ",													  "BKCgetCapacity;"					  ]
[ "getDiskSize",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):lng ",													  "BKCbatdisksize;"					  ]
[ "getMemorySize",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):lng ",													  "BKCbatvmsize;"					  ]
[ "getSize",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):lng ",													  "BKCbatsize;"						  ]
[ "hasMoreElements",	  "pattern",	  "bat",	  "(b:bat[:any_1,:BAT]) (X_2:lng,h:any_1,t:any_2) ",																											  "CHPbunHasMoreElements;"		  ]
[ "hasMoreElements",	  "pattern",	  "bat",	  "(b:bat[:oid,:any_2]) (X_2:lng,h:oid,t:any_2) ",																											  "CHPbunHasMoreElements;"		  ]
[ "hasMoreElements",	  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2]) (X_2:lng,h:any_1,t:any_2) ",																											  "CHPbunHasMoreElements;"		  ]
[ "hasMoreElements",	  "command",	  "bat",	  "(b:bat[:any_1,:any_2],size:lng) (X_3:lng,X_4:bat[:any_1,:any_2]) ",																									  "CHPhasMoreElements;"			  ]
[ "hasReadMode",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",													  "BKChasReadMode;"					  ]
[ "hasWriteMode",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",													  "BKChasWriteMode;"					  ]
[ "hasAppendMode",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",													  "BKChasAppendMode;"					  ]
[ "isSynced",			  "command",	  "bat",	  "(b1:bat[:any_1,:any_2],b2:bat[:any_3,:any_4]):bit ",											  "BKCisSynced;"					  ]
[ "isCached",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",													  "BKCisCached;"					  ]
[ "isPersistent",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",													  "BKCisPersistent;"					  ]
[ "isTransient",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",													  "BKCisTransient;"					  ]
[ "inplace",				  "command",	  "bat",	  "(o:bat[:any_1,:any_2],d:bat[:any_1,:any_2],force:bit):bat[:any_1,:any_2] ",							  "BKCbat_inplace_force;"			  ]
[ "inplace",				  "command",	  "bat",	  "(o:bat[:any_1,:any_2],id:any_1,t:any_2,force:bit):bat[:any_1,:any_2] ",							  "BKCbun_inplace_force;"			  ]
[ "inplace",				  "command",	  "bat",	  "(o:bat[:any_1,:any_2],d:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",								  "BKCbat_inplace;"				  ]
[ "inplace",				  "command",	  "bat",	  "(o:bat[:any_1,:any_2],id:any_1,t:any_2):bat[:any_1,:any_2] ",								  "BKCbun_inplace;"				  ]
[ "insert",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2,force:bit):bat[:any_1,:any_2] ",								  "BKCinsert_bun_force;"				  ]
[ "insert",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):bat[:any_1,:any_2] ",										  "BKCinsert_bun;"					  ]
[ "insert",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2],force:bit):bat[:any_1,:any_2] ",							  "BKCinsert_bat_force;"				  ]
[ "insert",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",									  "BKCinsert_bat;"					  ]
[ "isSortedReverse",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",													  "BKCisSortedReverse;"					  ]
[ "isSorted",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",													  "BKCisSorted;"					  ]
[ "isaSet",			  "command",	  "bat",	  "(b:bat[:any_1,:any_1]):bit ",													  "BKCisaSet;"						  ]
[ "isaKey",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",													  "BKCgetKey;"						  ]
[ "info",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:str,:str] ",												  "BKCinfo;"						  ]
[ "load",			  "command",	  "bat",	  "(name:str):bat[:any_1,:any_2] ",													  "BKCload;"						  ]
[ "mirror",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_1] ",												  "BKCmirror;"						  ]
[ "newIterator",	  "pattern",	  "bat",	  "(b:bat[:any_1,:BAT]) (X_2:lng,h:any_1,t:any_2) ",																											  "CHPbunIterator;"			  ]
[ "newIterator",	  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2]) (X_2:lng,h:any_1,t:any_2) ",																											  "CHPbunIterator;"			  ]
[ "newIterator",	  "command",	  "bat",	  "(b:bat[:any_1,:any_2],size:lng) (X_3:lng,X_4:bat[:any_1,:any_2]) ",																									  "CHPnewChunkIterator;"		  ]
[ "new",			  "command",	  "bat",	  "(nme:str):bat[:any_1,:any_2] ",													  "CMDBATderivedByName;"				  ]
[ "new",			  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2],size:lng):bat[:any_1,:any_2] ",										  "CMDBATnewDerived;"					  ]
[ "new",			  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "CMDBATnewDerived;"					  ]
[ "new",			  "pattern",	  "bat",	  "(ht:oid,tt:any_2,size:lng):bat[:oid,:any_2] ",											  "CMDBATnew;"						  ]
[ "new",			  "pattern",	  "bat",	  "(ht:oid,tt:any_2,size:int):bat[:oid,:any_2] ",											  "CMDBATnewint;"					  ]
[ "new",			  "pattern",	  "bat",	  "(ht:any_1,tt:any_2,size:lng):bat[:any_1,:any_2] ",											  "CMDBATnew;"						  ]
[ "new",			  "pattern",	  "bat",	  "(ht:any_1,tt:any_2,size:int):bat[:any_1,:any_2] ",											  "CMDBATnewint;"					  ]
[ "new",			  "pattern",	  "bat",	  "(ht:any_1,tt:bat[:any_2,:any_3]):bat[:any_1,:BAT] ",								  "CMDBATnew;"					  ]
[ "new",			  "pattern",	  "bat",	  "(ht:any_1,tt:any_2):bat[:any_1,:any_2] ",												  "CMDBATnew;"						  ]
[ "new",			  "pattern",	  "bat",	  "(ht:any_1,tt:any_2,b:bat[:any_3,:any_4]):bat[:any_1,:any_2] ",									  "CMDBATclone;"					  ]
[ "orderReverse",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "BKCorder_rev;"					  ]
[ "order",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "BKCorder;"						  ]
[ "pack",		  "pattern",	  "bat",	  "(v:any_1):bat[:oid,:any_1] ",											  "CMDbatsingleton;"				  ]
[ "pack",			  "pattern",	  "bat",	  "(h:any_1,t:any_2):bat[:any_1,:any_2] ",												  "CMDbatpack;"						  ]
[ "partition",			  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2],pieces:int,part:int):bat[:any_1,:any_2] ",							  "CMDbatpartition2;"				  ]
[ "partition",			  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2]... ",																	  "CMDbatpartition;"				  ]
[ "reduce",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "CMDBATreduce;"					  ]
[ "reuseMap",			  "command",	  "bat",	  "(b:bat[:oid,:any_1],del:bat[:oid,:oid]):bat[:oid,:oid] ",										  "BKCreuseBATmap;"				  ]
[ "reuse",			  "command",	  "bat",	  "(b:bat[:oid,:any_1],del:bat[:oid,:oid]):bat[:oid,:any_1] ",								  "BKCreuseBAT;"				  ]
[ "replace",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2,force:bit):bat[:any_1,:any_2] ",								  "BKCreplace_bun_force;"				  ]
[ "replace",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:any_1,t:any_2):bat[:any_1,:any_2] ",										  "BKCreplace_bun;"					  ]
[ "replace",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2],force:bit):bat[:any_1,:any_2] ",							  "BKCreplace_bat_force;"				  ]
[ "replace",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],src:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",									  "BKCreplace_bat;"					  ]
[ "revert",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "BKCrevert;"						  ]
[ "reverse",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_2,:any_1] ",												  "BKCreverse;"						  ]
[ "setBase",			  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2],c:bat[:any_1,:any_2]...):void ",										  "CMDsetBase;"						  ]
[ "setGarbage",			  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2]):void ",													  "CMDBATsetGarbage;"					  ]
[ "shrinkMap",			  "command",	  "bat",	  "(b:bat[:oid,:any_1],del:bat[:oid,:oid]):bat[:oid,:oid] ",										  "BKCshrinkBATmap;"				  ]
[ "shrink",			  "command",	  "bat",	  "(b:bat[:oid,:any_1],del:bat[:oid,:oid]):bat[:oid,:any_1] ",								  "BKCshrinkBAT;"				  ]
[ "setHash",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],prop:bit):bit ",												  "BKCsetHash;"						  ]
[ "setMemoryAdvise",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2],mode:int):bit ",												  "BKCmadvise2;"					  ]
[ "setMemoryAdvise",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2],head_mode:int,tail_mode:int,hheap_mode:int,theap_mode:int):bit ",						  "BKCmadvise;"						  ]
[ "setMemoryMap",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2],mode:int):bit ",												  "BKCmmap2;"						  ]
[ "setMemoryMap",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2],head_mode:int,tail_mode:int,hheap_mode:int,theap_mode:int):bit ",						  "BKCmmap;"						  ]
[ "setHot",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):void ",													  "BKChotBAT;"						  ]
[ "setCold",			  "command",	  "bat",	  "(b:bat[:any_1,:any_1]):void ",													  "BKCcoldBAT;"						  ]
[ "save",			  "command",	  "bat",	  "(nme:str):bit ",															  "BKCsave;"						  ]
[ "save",			  "command",	  "bat",	  "(nme:bat[:any_1,:any_2]):void ",													  "BKCsave2;"						  ]
[ "setPersistent",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):void ",													  "BKCsetPersistent;"					  ]
[ "setPersistent",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2],f:bit):void ",													  "BKCpersists;"					  ]
[ "setTransient",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):void ",													  "BKCsetTransient;"					  ]
[ "setColumn",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:str,t:str):void ",												  "BKCsetColumns;"					  ]
[ "setColumn",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],t:str):void ",													  "BKCsetColumn;"					  ]
[ "setRole",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],h:str,t:str):void ",												  "BKCsetRole;"						  ]
[ "setName",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],s:str):void ",													  "BKCsetName;"						  ]
[ "setSorted",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bit ",													  "BKCsetSorted;"					  ]
[ "setWriteMode",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "BKCsetWriteMode;"					  ]
[ "setReadMode",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "BKCsetReadMode;"					  ]
[ "setAppendMode",		  "command",	  "bat",	  "(b:bat[:any_1,:any_2]):bat[:any_1,:any_2] ",												  "BKCsetAppendMode;"					  ]
[ "setAccess",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],mode:str):bat[:any_1,:any_2] ",										  "BKCsetAccess;"					  ]
[ "setSet",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],mode:bit):bat[:any_1,:any_2] ",										  "BKCsetSet;"						  ]
[ "setKey",			  "command",	  "bat",	  "(b:bat[:any_1,:any_2],mode:bit):bat[:any_1,:any_2] ",										  "BKCsetkey;"						  ]
[ "unpack",			  "pattern",	  "bat",	  "(b:bat[:any_1,:any_2]) (h:any_1,t:any_2) ",												  "CMDbatunpack;"					  ]
[ "unload",			  "command",	  "bat",	  "(name:str):bit ",															  "BKCunload;"						  ]
[ "blocked",			  "command",	  "streams",	  "(s:streams):streams ",														  "open_block_streamwrap;"				  ]
[ "close",			  "command",	  "streams",	  "(s:streams):void ",															  "mnstr_close_streamwrap;"				  ]
[ "flush",			  "command",	  "streams",	  "(s:streams):void ",															  "mnstr_flush_streamwrap;"				  ]
[ "openWrite",			  "command",	  "streams",	  "(s:streams):streams ",														  "mnstr_stream_wstreamwrap;"				  ]
[ "openRead",			  "command",	  "streams",	  "(s:streams):streams ",														  "mnstr_stream_rstreamwrap;"				  ]
[ "openWrite",			  "command",	  "streams",	  "(filename:str):streams ",														  "mnstr_open_wastreamwrap;"				  ]
[ "openRead",			  "command",	  "streams",	  "(filename:str):streams ",														  "mnstr_open_rastreamwrap;"				  ]
[ "openWriteBytes",		  "command",	  "streams",	  "(filename:str):streams ",														  "mnstr_open_wstreamwrap;"				  ]
[ "openReadBytes",		  "command",	  "streams",	  "(filename:str):streams ",														  "mnstr_open_rstreamwrap;"				  ]
[ "readInt",			  "command",	  "streams",	  "(s:streams):int ",															  "mnstr_readIntwrap;"					  ]
[ "readStr",			  "command",	  "streams",	  "(s:streams):str ",															  "mnstr_read_stringwrap;"				  ]
[ "socketWrite",		  "command",	  "streams",	  "(skt:int,name:str):streams ",													  "mnstr_socket_wastreamwrap;"				  ]
[ "socketRead",			  "command",	  "streams",	  "(skt:int,name:str):streams ",													  "mnstr_socket_rastreamwrap;"				  ]
[ "socketWriteBytes",		  "command",	  "streams",	  "(skt:int,name:str):streams ",													  "mnstr_socket_wstreamwrap;"				  ]
[ "socketReadBytes",		  "command",	  "streams",	  "(skt:int,name:str):streams ",													  "mnstr_socket_rstreamwrap;"				  ]
[ "writeInt",			  "command",	  "streams",	  "(s:streams,data:int):void ",														  "mnstr_writeIntwrap;"				  ]
[ "writeStr",			  "command",	  "streams",	  "(s:streams,data:str):void ",														  "mnstr_write_stringwrap;"				  ]
[ "create",			  "command",	  "bstream",	  "(s:streams,bufsize:int):bstream ",													  "bstream_create_wrapwrap;"				  ]
[ "destroy",			  "command",	  "bstream",	  "(s:bstream):void ",															  "bstream_destroy_wrapwrap;"				  ]
[ "read",			  "command",	  "bstream",	  "(s:bstream,size:int):int ",														  "bstream_read_wrapwrap;"				  ]
[ "atan2",			  "command",	  "mmath",	  "(x:dbl,y:dbl):dbl ",															  "MATHbinary_ATAN2dbl;"				  ]
[ "atan2",			  "command",	  "mmath",	  "(x:flt,y:flt):flt ",															  "MATHbinary_ATAN2flt;"				  ]
[ "atan",			  "command",	  "mmath",	  "(x:dbl):dbl ",															  "MATHunary_ATANdbl;"					  ]
[ "atan",			  "command",	  "mmath",	  "(x:flt):flt ",															  "MATHunary_ATANflt;"					  ]
[ "asin",			  "command",	  "mmath",	  "(x:dbl):dbl ",															  "MATHunary_ASINdbl;"					  ]
[ "asin",			  "command",	  "mmath",	  "(x:flt):flt ",															  "MATHunary_ASINflt;"					  ]
[ "acos",			  "command",	  "mmath",	  "(x:dbl):dbl ",															  "MATHunary_ACOSdbl;"					  ]
[ "acos",			  "command",	  "mmath",	  "(x:flt):flt ",															  "MATHunary_ACOSflt;"					  ]
[ "ceil",			  "command",	  "mmath",	  "(y:dbl):dbl ",															  "MATHunary_CEILdbl;"					  ]
[ "ceil",			  "command",	  "mmath",	  "(y:flt):flt ",															  "MATHunary_CEILflt;"					  ]
[ "cosh",			  "command",	  "mmath",	  "(x:dbl):dbl ",															  "MATHunary_COSHdbl;"					  ]
[ "cosh",			  "command",	  "mmath",	  "(x:flt):flt ",															  "MATHunary_COSHflt;"					  ]
[ "cot",			  "command",	  "mmath",	  "(x:dbl):dbl ",															  "MATHunary_COTdbl;"					  ]
[ "cot",			  "command",	  "mmath",	  "(x:flt):flt ",															  "MATHunary_COTflt;"					  ]
[ "cos",			  "command",	  "mmath",	  "(x:dbl):dbl ",															  "MATHunary_COSdbl;"					  ]
[ "cos",			  "command",	  "mmath",	  "(x:flt):flt ",															  "MATHunary_COSflt;"					  ]
[ "degrees",		  "command",	  "mmath",		  "(x:dbl):dbl ",											  "MATHunary_DEGREESdbl;"		  ]
[ "degrees",		  "command",	  "mmath",		  "(x:flt):flt ",											  "MATHunary_DEGREESflt;"		  ]
[ "exp",			  "command",	  "mmath",	  "(x:dbl):dbl ",															  "MATHunary_EXPdbl;"					  ]
[ "exp",			  "command",	  "mmath",	  "(x:flt):flt ",															  "MATHunary_EXPflt;"					  ]
[ "finite",			  "command",	  "mmath",	  "(d:dbl):bit ",															  "MATHunary_FINITE;"					  ]
[ "fmod",			  "command",	  "mmath",	  "(y:dbl,x:dbl):dbl ",															  "MATHbinary_FMODdbl;"					  ]
[ "fmod",			  "command",	  "mmath",	  "(y:flt,x:flt):flt ",															  "MATHbinary_FMODflt;"					  ]
[ "floor",			  "command",	  "mmath",	  "(y:dbl):dbl ",															  "MATHunary_FLOORdbl;"					  ]
[ "floor",			  "command",	  "mmath",	  "(y:flt):flt ",															  "MATHunary_FLOORflt;"					  ]
[ "fabs",			  "command",	  "mmath",	  "(y:dbl):dbl ",															  "MATHunary_FABSdbl;"					  ]
[ "isinf",			  "command",	  "mmath",	  "(d:dbl):int ",															  "MATHunary_ISINF;"					  ]
[ "isnan",			  "command",	  "mmath",	  "(d:dbl):bit ",															  "MATHunary_ISNAN;"					  ]
[ "log10",			  "command",	  "mmath",	  "(x:dbl):dbl ",															  "MATHunary_LOG10dbl;"					  ]
[ "log10",			  "command",	  "mmath",	  "(x:flt):flt ",															  "MATHunary_LOG10flt;"					  ]
[ "log",			  "command",	  "mmath",	  "(x:dbl):dbl ",															  "MATHunary_LOGdbl;"					  ]
[ "log",			  "command",	  "mmath",	  "(x:flt):flt ",															  "MATHunary_LOGflt;"					  ]
[ "pi",				  "command",	  "mmath",	  "():dbl ",																  "MATHpi;"						  ]
[ "pow",			  "command",	  "mmath",	  "(x:dbl,y:dbl):dbl ",															  "MATHbinary_POWdbl;"					  ]
[ "pow",			  "command",	  "mmath",	  "(x:flt,y:flt):flt ",															  "MATHbinary_POWflt;"					  ]
[ "rand",		  "function",	  "mmath",		  "(v:int):int;",									  "nil"					  ]
[ "rand",			  "command",	  "mmath",	  "():int ",																  "MATHrandint;"					  ]
[ "round",			  "command",	  "mmath",	  "(x:dbl,y:int):dbl ",															  "MATHbinary_ROUNDdbl;"				  ]
[ "round",			  "command",	  "mmath",	  "(x:flt,y:int):flt ",															  "MATHbinary_ROUNDflt;"				  ]
[ "radians",		  "command",	  "mmath",		  "(x:dbl):dbl ",											  "MATHunary_RADIANSdbl;"		  ]
[ "radians",		  "command",	  "mmath",		  "(x:flt):flt ",											  "MATHunary_RADIANSflt;"		  ]
[ "sqlrand",			  "command",	  "mmath",	  "(seed:int):int ",											  "MATHsqlrandint;"				  ]
[ "srand",			  "command",	  "mmath",	  "(seed:int):void ",															  "MATHsrandint;"					  ]
[ "sqrt",			  "command",	  "mmath",	  "(y:dbl):dbl ",															  "MATHunary_SQRTdbl;"					  ]
[ "sqrt",			  "command",	  "mmath",	  "(y:flt):flt ",															  "MATHunary_SQRTflt;"					  ]
[ "sinh",			  "command",	  "mmath",	  "(x:dbl):dbl ",															  "MATHunary_SINHdbl;"					  ]
[ "sinh",			  "command",	  "mmath",	  "(x:flt):flt ",															  "MATHunary_SINHflt;"					  ]
[ "sin",			  "command",	  "mmath",	  "(x:dbl):dbl ",															  "MATHunary_SINdbl;"					  ]
[ "sin",			  "command",	  "mmath",	  "(x:flt):flt ",															  "MATHunary_SINflt;"					  ]
[ "tanh",			  "command",	  "mmath",	  "(x:dbl):dbl ",															  "MATHunary_TANHdbl;"					  ]
[ "tanh",			  "command",	  "mmath",	  "(x:flt):flt ",															  "MATHunary_TANHflt;"					  ]
[ "tan",			  "command",	  "mmath",	  "(x:dbl):dbl ",															  "MATHunary_TANdbl;"					  ]
[ "tan",			  "command",	  "mmath",	  "(x:flt):flt ",															  "MATHunary_TANflt;"					  ]
[ "alarm",			  "command",	  "alarm",	  "(secs:int,action:str):void ",													  "ALARMsetalarm;"					  ]
[ "ctime",			  "command",	  "alarm",	  "():str ",																  "ALARMctime;"						  ]
[ "epilogue",			  "command",	  "alarm",	  "():void ",																  "ALARMepilogue;"					  ]
[ "epoch",			  "command",	  "alarm",	  "():int ",																  "ALARMepoch;"						  ]
[ "prelude",			  "command",	  "alarm",	  "():void ",																  "ALARMprelude;"					  ]
[ "sleep",			  "command",	  "alarm",	  "(secs:int):void ",															  "ALARMsleep;"						  ]
[ "time",			  "command",	  "alarm",	  "():int ",																  "ALARMtime;"						  ]
[ "timers",			  "command",	  "alarm",	  "():bat[:str,:str] ",															  "ALARMtimers;"					  ]
[ "usec",			  "command",	  "alarm",	  "():lng ",																  "ALARMusec;"						  ]
[ "create",			  "command",	  "sema",	  "(init:int):sema ",															  "SEMAcreate;"						  ]
[ "destroy",			  "command",	  "sema",	  "(s:sema):void ",															  "SEMAdestroy;"					  ]
[ "down",			  "command",	  "sema",	  "(s:sema):void ",															  "SEMAdown;"						  ]
[ "up",				  "command",	  "sema",	  "(s:sema):void ",															  "SEMAup;"						  ]
[ "create",			  "command",	  "lock",	  "():lock ",																  "LCKcreate;"						  ]
[ "destroy",			  "command",	  "lock",	  "(l:lock):void ",															  "LCKdestroy;"						  ]
[ "set",			  "command",	  "lock",	  "(l:lock):void ",															  "LCKset;"						  ]
[ "tostr",			  "command",	  "lock",	  "(l:lock):void ",															  "lockToStr;"						  ]
[ "try",			  "command",	  "lock",	  "(l:lock):int ",															  "LCKtry;"						  ]
[ "unset",			  "command",	  "lock",	  "(l:lock):void ",															  "LCKunset;"						  ]
[ "getrss",			  "command",	  "unix",	  "():lng ",																  "UNIXgetRSS;"						  ]
[ "getenv",			  "command",	  "unix",	  "(nme:str):str ",															  "UNIXgetenv;"						  ]
[ "sync",			  "command",	  "unix",		  "():void ",															  "UNIXsync;"					  ]
[ "setenv",			  "command",	  "unix",	  "(nme:str,val:str):bit ",														  "UNIXsetenv;"						  ]
[ "List",			  "pattern",	  "mdb",	  "(M:str,F:str):void ",														  "MDBlist3Detail;"					  ]
[ "List",			  "pattern",	  "mdb",	  "():void ",																  "MDBlistDetail;"					  ]
[ "collect",			  "pattern",	  "mdb",	  "(v:any_1):void ",															  "OPTtraceCall;"					  ]
[ "dump",			  "pattern",	  "mdb",	  "():void ",																  "MDBdump;"						  ]
[ "dot",			  "pattern",	  "mdb",	  "(M:str,F:str,s:str):void ",														  "MDBshowFlowGraph;"					  ]
[ "dot",			  "pattern",	  "mdb",	  "(s:str):void ",												  "MDBshowFlowGraph;"			  ]
[ "getDefinition",		  "pattern",	  "mdb",	  "():bat[:void,:str] ",														  "MDBgetDefinition;"					  ]
[ "getStackTrace",		  "pattern",	  "mdb",	  "():bat[:void,:str] ",														  "MDBStkTrace;"					  ]
[ "getStackFrame",		  "pattern",	  "mdb",	  "():bat[:str,:str] ",															  "MDBgetStackFrame;"					  ]
[ "getStackFrame",		  "pattern",	  "mdb",	  "(i:int):bat[:str,:str] ",														  "MDBgetStackFrameN;"					  ]
[ "getStackDepth",		  "pattern",	  "mdb",	  "():int ",																  "MDBStkDepth;"					  ]
[ "grab",				  "pattern",	  "mdb",	  "():void ",																	  "mdbGrab;"						  ]
[ "getContext",			  "command",	  "mdb",	  "(s:str):str ",															  "MDBgetExceptionContext;"				  ]
[ "getReason",			  "command",	  "mdb",	  "(s:str):str ",															  "MDBgetExceptionReason;"				  ]
[ "getException",		  "command",	  "mdb",	  "(s:str):str ",															  "MDBgetExceptionVariable;"				  ]
[ "getDebug",			  "command",	  "mdb",	  "():int ",																  "MDBgetDebug;"					  ]
[ "inspect",			  "pattern",	  "mdb",	  "(mod:str,fcn:str):void ",														  "MDBinspect;"						  ]
[ "lifespan",			  "pattern",	  "mdb",	  "(M:str,F:str):void ",														  "MDBlifespan;"					  ]
[ "list",			  "pattern",	  "mdb",	  "(M:str,F:str):void ",														  "MDBlist3;"						  ]
[ "listMapi",			  "pattern",	  "mdb",	  "():void ",																  "MDBlistMapi;"					  ]
[ "list",			  "pattern",	  "mdb",	  "():void ",																  "MDBlist;"						  ]
[ "modules",				  "command",	  "mdb",	  "():bat[:int,:str] ",													  "CMDmodules;"						  ]
[ "setDebug",			  "command",	  "mdb",	  "(flg:int):int ",															  "MDBsetDebug;"					  ]
[ "setDebug",			  "command",	  "mdb",	  "(flg:str):int ",															  "MDBsetDebugStr;"					  ]
[ "setCount",			  "pattern",	  "mdb",	  "(b:bit):void ",															  "MDBsetCount;"					  ]
[ "setIO",			  "pattern",	  "mdb",	  "(b:bit):void ",															  "MDBsetIO;"						  ]
[ "setMemory",			  "pattern",	  "mdb",	  "(b:bit):void ",															  "MDBsetMemory;"				  ]
[ "setFlow",			  "pattern",	  "mdb",	  "(b:bit):void ",															  "MDBsetFlow;"						  ]
[ "setMemoryTrace",		  "pattern",	  "mdb",	  "(b:bit):void ",															  "MDBsetBigfoot;"					  ]
[ "setTimer",			  "pattern",	  "mdb",	  "(b:bit):void ",															  "MDBsetTimer;"					  ]
[ "setThread",				  "pattern",	  "mdb",	  "(b:bit):void ",													  "MDBsetThread;"				  ]
[ "setCatch",			  "pattern",	  "mdb",	  "(b:bit):void ",															  "MDBsetCatch;"					  ]
[ "setTrace",			  "pattern",	  "mdb",	  "(b:str):void ",															  "MDBsetVarTrace;"					  ]
[ "setTrace",			  "pattern",	  "mdb",	  "(b:bit):void ",															  "MDBsetTrace;"					  ]
[ "setTrap",				  "pattern",	  "mdb",	  "(idx:int):void ",																  "mdbTrapClient;"					  ]
[ "setTrap",				  "pattern",	  "mdb",	  "(mod:str,fcn:str,b:bit):void ",														  "MDBtrapFunction;"					  ]
[ "stop",			  "pattern",	  "mdb",	  "():void ",																  "MDBstop;"						  ]
[ "start",			  "pattern",	  "mdb",	  "(mod:str,fcn:str):void ",														  "MDBstartFactory;"					  ]
[ "start",			  "pattern",	  "mdb",	  "(clientid:int):void ",														  "MDBstart;"						  ]
[ "start",			  "pattern",	  "mdb",	  "():void ",																  "MDBstart;"						  ]
[ "traceOptimizer",		  "command",	  "mdb",	  "(flg:str):void ",															  "OPTsetDebugStr;"					  ]
[ "trap",				  "pattern",	  "mdb",	  "():void ",																	  "mdbTrap;"						  ]
[ "var",			  "pattern",	  "mdb",	  "(M:str,F:str):void ",														  "MDBvar3;"						  ]
[ "var",			  "pattern",	  "mdb",	  "():void ",																  "MDBvar;"						  ]

# 08:55:30 >  
# 08:55:30 >  Done.
# 08:55:30 >  

