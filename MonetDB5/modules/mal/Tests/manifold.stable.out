stdout of test 'manifold` in directory 'monetdb5/modules/mal` itself:


# 23:08:15 >  
# 23:08:15 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=34659" "--set" "mapi_usock=/var/tmp/mtest-26669/.s.monetdb.34659" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/export/scratch1/mk/current//Linux/var/MonetDB/mTests_monetdb5_modules_mal" "manifold.mal"
# 23:08:15 >  

# MonetDB 5 server v11.18.0
# This is an unreleased version
# Serving database 'mTests_monetdb5_modules_mal', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.591 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://vienna.ins.cwi.nl:34659/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-26669/.s.monetdb.34659
# MonetDB/GIS module loaded
# MonetDB/JAQL module loaded
# MonetDB/SQL module loaded
#WARNING To speedup mmath.sin a bulk operator implementation is needed
function user.main():void;
# the multiplex code blocks. 
    t0 := alarm.usec();
    b := bat.new(:oid,:dbl);
    INT_MAX := 2147483647;
    dbgmsk_restore := mdb.getDebug();
    dbgmsk_unset := calc.+(8,8388608);
    dbgmsk_keep := calc.xor(INT_MAX,dbgmsk_unset);
    dbgmsk_set := calc.and(dbgmsk_restore,dbgmsk_keep);
    mdb.setDebug(dbgmsk_set);
    r := mmath.srand(0);
barrier i := 0:lng;
    k := mmath.rand();
    l := calc.dbl(k);
    bat.append(b,l);
    redo i := iterator.next(1:lng,1000000:lng);
exit i;
    mdb.setDebug(dbgmsk_restore);
    mdb.setDebug(dbgmsk_set);
    t0 := alarm.usec();
    z:bat[:oid,:dbl]  := mal.manifold("mmath","sin",b);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#mal.manifold(sin) %d\n",d0);
    s := aggr.sum(z);
    io.printf("#sum %f\n",s);
    t0 := alarm.usec();
    x := bat.new(:oid,:dbl);
barrier j := 0@0;
    ii := algebra.fetch(b,j);
    d := mmath.sin(ii);
    bat.append(x,d);
    redo j := iterator.next(1@0,1000000@0);
exit j;
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#mal.multiplex(sin) %d\n",d0);
    s := aggr.sum(x);
    io.printf("#sum %f\n",s);
    t0 := alarm.usec();
    x := batmmath.sin(b);
    t1 := alarm.usec();
    d0 := calc.-(t1,t0);
    io.printf("#mmath.sin() %d\n",d0);
    s := aggr.sum(x);
    io.printf("#sum %f\n",s);
end user.main;
#mal.manifold(sin) 177972
#sum 546.410417
#mal.multiplex(sin) 2354385
#sum 546.410417
#mmath.sin() 50644
#sum 546.410417


# 23:08:16 >  
# 23:08:16 >  "Done."
# 23:08:16 >  

