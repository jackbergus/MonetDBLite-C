# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2015 MonetDB B.V.
# All Rights Reserved.

module mat;

pattern new(b:bat[:oid,:any_2]...):bat[:oid,:any_2]
address MATpack
comment "Define a Merge Association Table (MAT). Faal back to the pack operation
when this is called ";

pattern pack(:any_2...):bat[:oid,:any_2]
address MATpackValues
comment "Materialize the MAT (of values) into a BAT";

pattern pack(b:bat[:oid,:any_2]...):bat[:oid,:any_2]
address MATpack
comment "Materialize the MAT into a BAT";

pattern mergepack(b:bat[:oid,:oid]...):bat[:oid,:oid]
address MATmergepack
comment "Merge multiple candidate lists ";

pattern pack2(b:bat[:oid,:any_2]...):bat[:oid,:any_2]
address MATpack2
comment "Materialize the MAT into a BAT (by an append all)";

pattern packIncrement(b:bat[:oid,:any_2],pieces:int):bat[:oid,:any_2]
address MATpackIncrement
comment "Prepare incremental mat pack";

pattern packIncrement(b:bat[:oid,:any_2],c:bat[:oid,:any_2]):bat[:oid,:any_2]
address MATpackIncrement
comment "Prepare incremental mat pack";

pattern slice(first:wrd, last:wrd, b:bat[:oid,:any_2]...):bat[:oid,:any_2]
address MATpackSlice
comment "Materialize a sliced MAT into a BAT";

pattern slice(first:int, last:int, b:bat[:oid,:any_2]...):bat[:oid,:any_2]
address MATpackSlice
comment "Materialize a sliced MAT into a BAT";

pattern slice(first:lng, last:lng, b:bat[:oid,:any_2]...):bat[:oid,:any_2]
address MATpackSlice
comment "Materialize a sliced MAT into a BAT";

pattern project(map:bat[:oid,:bte], b:bat[:oid,:any_2]...):bat[:oid,:any_2]
address MATproject
comment "project using the map bat (contains which bat to use in scan order)";

pattern sortTail(b:bat[:oid,:any_2]...)
	(sorted:bat[:oid,:any_2], map:bat[:oid,:bte]) 
address MATsortTail
comment "Returns a BAT copy sorted on the head column.";

pattern sortReverseTail(b:bat[:oid,:any_2]...)
	(sorted:bat[:oid,:any_2], map:bat[:oid,:bte]) 
address MATsortReverseTail
comment "Returns a BAT copy sorted on the head column.";

pattern print(b:bat[:oid,:any_2]...):void
address MATprint;

pattern newIterator(grp:bat[:oid,:any_2]...):bat[:oid,:any_2]
address MATnewIterator
comment "Create an iterator over a MAT";

pattern hasMoreElements(grp:bat[:oid,:any_2]...):bat[:oid,:any_2]
address MAThasMoreElements
comment "Find the next element in the merge table";

command info(g:str, e:str):bat[:oid,:any_2]
address MATinfo
comment "retrieve the definition from the partition catalogue";

