# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2014 MonetDB B.V.
# All Rights Reserved.

module bbp;

pattern prelude():void 
address CMDbbpprelude
comment "Initialize the bbp box.";

pattern bind(name:str):bat[:oid,:any_2]
address CMDbbpbind
comment "Locate the BAT using its logical name";

command compress(b:bat[:oid,:any_2],fnme:str):bat[:oid,:any_2]
address CMDbbpcompress
comment "Generate a compressed image of the BAT on a specific file";

command decompress(b:bat[:oid,:any_2],fnme:str):bat[:oid,:any_2] 
address CMDbbpdecompress
comment "Obtain a temporary decompressed image of a BAT from a specific file";

command truncate(b:bat[:oid,:any_2],fnme:str):bat[:oid,:any_2]
address CMDbbptruncate
comment "Truncate the heaps if a compressed image exist";

command expand(b:bat[:oid,:any_2],fnme:str):bat[:oid,:any_2]
address CMDbbpexpand
comment "Expand a compressed image of BAT heaps";


# BAT buffer pool
# The following list of operations permits inspection of the
# buffer pool
command getIndex(b:bat[:oid,:any_2]):int
address CMDbbpgetIndex
comment "Retrieve the index in the BBP";
command getNames() :bat[:oid,:str] 	
address CMDbbpNames
comment "Map BAT into its bbp name";

command get() (id:bat[:oid,:int], ns:bat[:oid,:str],
	       ht:bat[:oid,:str], tt:bat[:oid,:str],
	       cnt:bat[:oid,:lng], refcnt:bat[:oid,:int],
	       lrefcnt:bat[:oid,:int], location:bat[:oid,:str],
	       heat:bat[:oid,:int], dirty:bat[:oid,:str],
	       status:bat[:oid,:str], kind:bat[:oid,:str])
address CMDbbp
comment "bpp";

command getName( b:bat[:oid,:any_1]):str
address CMDbbpName
comment "Map a BAT into its internal name";
command getCount() :bat[:oid,:lng] 	
address CMDbbpCount
comment "Create a BAT with the cardinalities of all known BATs";
command getRefCount() :bat[:oid,:int] 	
address CMDbbpRefCount
comment "Create a BAT with the (hard) reference counts";
command getLRefCount() :bat[:oid,:int] 	
address CMDbbpLRefCount
comment "Create a BAT with the logical reference counts";
command getLocation() :bat[:oid,:str] 	
address CMDbbpLocation
comment "Create a BAT with their disk locations";
command getHeat() :bat[:oid,:int] 	
address CMDbbpHeat
comment "Create a BAT with the heat values";
command getDirty() :bat[:oid,:str] 	
address CMDbbpDirty
comment "Create a BAT with the dirty/ diffs/clean status";
command getStatus() :bat[:oid,:str] 	
address CMDbbpStatus
comment "Create a BAT with the disk/load status";
command getKind():bat[:oid,:str] 
address CMDbbpKind
comment "Create a BAT with the persistency status";
command getRefCount(b:bat[:oid,:any_1]) :int
address CMDgetBATrefcnt
comment "Utility for debugging MAL interpreter";
command getLRefCount(b:bat[:oid,:any_1]) :int
address CMDgetBATlrefcnt
comment "Utility for debugging MAL interpreter";
command getDiskSpace() :lng
address CMDbbpDiskSpace
comment "Estimate the amount of disk space occupied by dbpath";
command getPageSize():int
address CMDgetPageSize
comment "Obtain the memory page size";
