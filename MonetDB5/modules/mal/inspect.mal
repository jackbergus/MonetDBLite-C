# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2015 MonetDB B.V.
# All Rights Reserved.

module inspect;

pattern getDefinition(mod:str,fcn:str) :bat[:oid,:str] 
address INSPECTgetDefinition
comment "Returns a string representation of a specific function.";

pattern getSignature(mod:str,fcn:str) :bat[:oid,:str] 
address INSPECTgetSignature
comment "Returns the function signature(s).";

pattern getAddress(mod:str,fcn:str) :bat[:oid,:str] 
address INSPECTgetAddress
comment "Returns the function signature(s).";

pattern getComment(mod:str,fcn:str) :bat[:oid,:str]
address INSPECTgetComment
comment "Returns the function help information.";

pattern getSource(mod:str,fcn:str):str
address INSPECTgetSource
comment "Return the original input for a function.";

pattern getKind():bat[:oid,:str]
address INSPECTgetkind
comment "Obtain the instruction kind.";
pattern getModule():bat[:oid,:str]
address INSPECTgetAllModules
comment "Obtain the function name.";
pattern getFunction():bat[:oid,:str]
address INSPECTgetAllFunctions
comment "Obtain the function name.";
pattern getSignatures():bat[:oid,:str]
address INSPECTgetAllSignatures
comment "Obtain the function signatures.";
pattern getAddresses():bat[:oid,:str]
address INSPECTgetAllAddresses
comment "Obtain the function address.";


pattern getSize():lng
address INSPECTgetSize
comment "Return the storage size for the current function (in bytes).";

pattern getSize(mod:str,fcn:str):lng
address INSPECTgetFunctionSize
comment "Return the storage size for a function (in bytes).";


pattern getType(v:any_1) :str 
address INSPECTtypeName
comment "Return the concrete type of a variable (expression).";

pattern equalType(l:any, r:any):bit
address INSPECTequalType
comment "Return true if both operands are of the same type";
command getAtomNames():bat[:oid,:str] 
address INSPECTatom_names
comment "Collect a BAT with the atom names.";
command getAtomSuper():bat[:oid,:str] 
address INSPECTatom_sup_names
comment "Collect a BAT with the atom names.";
command getAtomSizes():bat[:oid,:int] 
address INSPECTatom_sizes
comment "Collect a BAT with the atom sizes.";

command getEnvironment() (k:bat[:oid,:str], v:bat[:oid,:str])
address INSPECTgetEnvironment
comment "Collect the environment variables.";
command getEnvironment(k:str) :str
address INSPECTgetEnvironmentKey
comment "Get the value of an environemnt variable";
