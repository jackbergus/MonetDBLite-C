# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2013 MonetDB B.V.
# All Rights Reserved.

atom json:str;

command fromstr():json
address JSONfromString
comment "Validate a string to be JSON compliant. A NOOP if valid json, NULL otherwise.";

command tostr():str
address JSONtoString
comment "Convert JSON to its string equivalent. Dealing with escape characters";

command new(j:str):json
address JSONstr2json
comment "Convert string to its JSON. Dealing with escape characters";

command calc.json(j:str):json
address JSONstr2json
comment "Convert string to its JSON. Dealing with escape characters";

command str(j:json):str
address JSONjson2str
comment "Convert JSON to its string equivalent. Dealing with escape characters";

command filter(name:json, s:str) :json
address JSONfilterObject
comment "Filter the members of an object by name";

command filter(name:json, i:int) :json
address JSONfilterArray
comment "Extract a single element from an array";

command isvalid(val:str):bit
address JSONisvalid
comment "Validate the string as a valid JSON document";

command isvalidobject(val:json):bit
address JSONisobject
comment "Validate the string as a valid JSON object";

command isvalidarray(val:json):bit
address JSONisarray
comment "Validate the string as a valid JSON array";

command length(val:json):int
address JSONlength
comment "Returns the number of elements in the outermost JSON object.";

command names(val:json):bat[:oid,:str]
address JSONnames
comment "Expands the outermost JSON object names.";

command values(val:json):bat[:oid,:str]
address JSONvalues
comment "Expands the outermost JSON values.";

command prelude()
address JSONprelude;

pattern renderobject(val:any...):json
address JSONrenderobject;

pattern renderarray(val:any...):json
address JSONrenderarray;

json.prelude();
