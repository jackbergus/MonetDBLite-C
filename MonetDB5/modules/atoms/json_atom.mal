# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2014 MonetDB B.V.
# All Rights Reserved.

atom json:str;

command fromstr():json
address JSONfromString
comment "Validate a string to be JSON compliant. A NOOP if valid json, NULL otherwise.";

command tostr():str
address JSONtoString
comment "Convert JSON to its string equivalent. Dealing with escape characters";

command new(j:str):json
address JSONstr2json
comment "Convert string to its JSON. Dealing with escape characters";

command calc.json(j:str):json
address JSONstr2json
comment "Convert string to its JSON. Dealing with escape characters";

command calc.json(j:json):json
address JSONstr2json
comment "Convert JSON to JSON. Dealing with escape characters";

command str(j:json):str
address JSONjson2str
comment "Convert JSON to its string equivalent. Dealing with escape characters";

command text(j:json):str
address JSONjson2text
comment "Convert JSON to its plain string equivalent.";

command filter(name:json, pathexpr:str) :json
address JSONfilter
comment "Filter all members of an object by path expression";

command filter(name:json, idx:bte) :json
address JSONfilterArray;
command filter(name:json, idx:sht) :json
address JSONfilterArray;
command filter(name:json, idx:int) :json
address JSONfilterArray;
command filter(name:json, idx:lng) :json
address JSONfilterArray
comment "Extract a single array element";

command isvalid(val:json):bit
address JSONisvalid
comment "Validate the string as a valid JSON document";

command isobject(val:json):bit
address JSONisobject
comment "Validate the string as a valid JSON object";

command isarray(val:json):bit
address JSONisarray
comment "Validate the string as a valid JSON array";

command isvalid(val:str):bit
address JSONisvalid
comment "Validate the string as a valid JSON document";

command isobject(val:str):bit
address JSONisobject
comment "Validate the string as a valid JSON object";

command isarray(val:str):bit
address JSONisarray
comment "Validate the string as a valid JSON array";

command length(val:json):int
address JSONlength
comment "Returns the number of elements in the outermost JSON object.";

command unnest(val:json)(o:bat[:oid,:oid],k:bat[:oid,:str],v:bat[:oid,:json])
address JSONunnestGrouped
comment "Expands the outermost JSON object into key-value pairs with object identity.";

command unnest(val:json)(k:bat[:oid,:str],v:bat[:oid,:json])
address JSONunnest
comment "Expands the outermost JSON object into key-value pairs.";

command unnest(val:json):bat[:oid,:json]
address JSONunnestOne
comment "Expands a JSON list to its elements.";

pattern nest(o:bat[:oid,:oid],k:bat[:oid,:str],v:bat[:oid,:any]):json
address JSONnest
comment "Nest the key-value pairs with object identity into a list of JSON objects ";

pattern nest(k:bat[:oid,:str],v:bat[:oid,:any]):json
address JSONnest
comment "Combine the key-value pairs into a single json object list.";

pattern nest(k:bat[:oid,:str]):json
address JSONnest;
pattern nest(k:bat[:oid,:sht]):json
address JSONnest;
pattern nest(k:bat[:oid,:int]):json
address JSONnest;
pattern nest(k:bat[:oid,:lng]):json
address JSONnest;
pattern nest(k:bat[:oid,:flt]):json
address JSONnest;
pattern nest(k:bat[:oid,:dbl]):json
address JSONnest
comment "Combine the value list into a single json array object.";

command keyarray(val:json):str
address JSONkeyArray
comment "Expands the outermost JSON object keys into a JSON array.";

command valuearray(val:json):str
address JSONvalueArray
comment "Expands the outermost JSON object values into a JSON array.";

command keys(val:json):bat[:oid,:str]
address JSONkeyTable
comment "Expands the outermost JSON object names.";

command values(val:json):bat[:oid,:json]
address JSONvalueTable
comment "Expands the outermost JSON values.";

command prelude()
address JSONprelude;

pattern renderobject(val:any...):json
address JSONrenderobject;

pattern renderarray(val:any...):json
address JSONrenderarray;

pattern calc.isnil(v:json):bit
address CMDvarISNIL
comment "Nil test for json value";

json.prelude();
