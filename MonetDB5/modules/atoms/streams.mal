# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2014 MonetDB B.V.
# All Rights Reserved.

module streams;

atom streams:ptr;

command openReadBytes{unsafe}( filename:str ) :streams
address mnstr_open_rstreamwrap
comment "open a file stream for reading";
command openWriteBytes{unsafe}( filename:str ) :streams
address mnstr_open_wstreamwrap
comment "open a file stream for writing";

command openRead{unsafe}( filename:str ) :streams
address mnstr_open_rastreamwrap
comment "open ascii file stream for reading";
command openWrite{unsafe}( filename:str ) :streams
address mnstr_open_wastreamwrap
comment "open ascii file stream for writing";

command openRead{unsafe}(s:streams):streams
address mnstr_stream_rstreamwrap
comment "convert an ascii stream to binary";
command openWrite{unsafe}(s:streams):streams
address mnstr_stream_wstreamwrap
comment "convert an ascii stream to binary";

command socketReadBytes{unsafe}(skt:int,name:str):streams
address mnstr_socket_rstreamwrap
comment "open a socket stream for reading";
command socketWriteBytes{unsafe}(skt:int,name:str):streams
address mnstr_socket_wstreamwrap
comment "open a socket stream for writing";
command socketRead{unsafe}(skt:int,name:str):streams
address mnstr_socket_rastreamwrap
comment "open ascii socket stream for reading";
command socketWrite{unsafe}(skt:int,name:str):streams
address mnstr_socket_wastreamwrap
comment "open ascii socket stream for writing";

command blocked{unsafe}( s:streams ) :streams
address open_block_streamwrap
comment "open a block based stream";

command writeStr{unsafe}( s:streams, data:str ):void
address mnstr_write_stringwrap
comment "write data on the stream";
command writeInt{unsafe}( s:streams, data:int ):void
address mnstr_writeIntwrap
comment "write data on the stream";
command readStr{unsafe}( s:streams):str
address mnstr_read_stringwrap
comment "read string data from the stream";
command readInt{unsafe}( s:streams):int
address mnstr_readIntwrap
comment "read integer data from the stream";

command flush{unsafe}( s:streams )
address mnstr_flush_streamwrap
comment "flush the stream";

command close{unsafe}( s:streams )
address mnstr_close_streamwrap
comment "close and destroy the stream s";

atom bstream:ptr;
command create{unsafe}(s:streams, bufsize:int):bstream
address bstream_create_wrapwrap
comment "create a buffered stream";

command destroy{unsafe}(s:bstream)
address bstream_destroy_wrapwrap
comment "destroy bstream";

command read{unsafe}(s:bstream,size:int):int
address bstream_read_wrapwrap
comment "read at least size bytes into the buffer of s";
