AGENDA FOR MonetDB Version 5.02 release Jan 2006
- target: MonetDB Version 5 with SQL and APIs
- Overall documentation at a reasonable stage
- Migration documentation
- SQL test set needs work
- APIs should be tested
- Database pool for web-applications
- Mguardian to watch over server
- GDK should switch to private-bats unless stated otherwise.
  ATOMcmp should not walk the storage field, this should be
  made explicit if needed.
- look at memory leaks in connections

AGENDA FOR MonetDB Version 5.04 release Apr 2006
- Target: benefit from compression and scale out
- AMDB column store available 
- Distributed processing by remote MAL execution

AGENDA FOR MonetDB Version 5.06 release Jun 2006
- Target: XQuery
- XQuery port finished

MapiClient:
- propagate the '?' command to the server
- merge word completion semantics with the back-end

Pathfinder support
- it heavily relies on BAT admininistration, which is currently
  not well covered by the type system.  (tst800)

- DD: factor out the error handling to prepare for internationalization
- DD: strong need for partitioned tables.
- DD: mapping BATs to external file sources
- we limit BAT* operation as much as possible to :void headed versions
- all signatures should make in/out role of parameters explicit to
facilitate flow analysis
- BBP should become a fully serialized module, encapsulation with a single lock
(this calls for check for IO triggered activities inside BBP)
- All BATs should be considered private unless otherwise marked (add BATshared())
- we need a small size BAT/HEAP cache to significantly reduce cost for small queries.

MIL 5
- reduce the symbol table during chkFlow as well to save
on stack initialization and garbage collection cost
- make sure the sorted bit is set in batcalc routines where appropriate

MIL 4 'loss' in M5
- M2mal is only meant to enable transition between systems.
- naming conventions get/set properties
- [ht]operation convention or operation[ht]_[ht]

MAL language issues
- BATs entered into a box should become persistent? (tst1004,1005,1014)
- use a process buffer pool to avoid expensive client starts.
- implement an (Box) authorization scheme

Implementation
- BAT calc module only works for aligned BATs. This is less
 powerful than Monet 4. SQL relies on it, so we have to extend
functionality
- global resource management is not ok yet, for 10M tapestry it
is about 5 times slower. It appears that it grows too slow,
spending its time on copying bats all the time.

API issues
- The java front-end terminal and profiler should be re-vived
- Multi-client (concurrent) access has not been tested yet

V4 issues
- overlay V4 database with V5 session should be tested
- Several of the MIL scripts associated with the modules have not
  been converted yet. Reliance on scripts should be minimal

Documentation issues
- README file, document which portions are local/ opensource V4
- Monet quick reference manual update

20051125 started development of the multitable and generator modules.
20051100 the storage requirements for the MAL blocks has been 
reduced. e.g. by moving statistics gathering to its own
storage space upon need.
20051008 major overhaul to reduce maintenance of small structures.
	the MAL program can now not be recovered literally anymore
	due to limitations in the GDK
20050917 Rollforward of M4 finished. counters module added.
20050910 Added appendix generators and cleaned up naming
20050902 stricter type analysis
	make all polymorphic types explicit
	better handle the any,any_<N> and any... cases.
20050827 bring property names also into the namespace.
20050827 rethink the before/after structure for garabage collection
  and handle it explicitly in the interpreter.
	The before/after feature is disabled.
20050827 name completion and online help significantly improved
20050827 module should make exceptions thrown explicit
	they only throw MALEXCEPTIONs
	added a trigger towards the debugger when an exception occurs.
20050827 add intelligent help (partial matching signatures)
20050827 use name completion to ease construction of MAL instructions.
	look at module.mx to search/dump module information
20050825 Windows port works
20050825 the signature types have become more strict
20050728 reference counting is still not ok, see tst220
20050723 the user defined variable types are retained
20050720 turn properties into simple terms (e.g. cnt<1)
20050619 The role of multiplex is reconsidered, because it is 
	an efficient implementation of a macro at language level.
	It has new become an optimizer. Where appropriate the 
	fast bat* operations should be used.
20050616 preparing a new mil parser as a scenario
20050613 keep also the comments in the MAL program
20050608 handle tst081, type resolution
20050608 solve the wrong behavior of include files (datacell)
20050605 realized the first version of the empty set optimizer
200505-- keep the list of profile filters in server and 
		update after each resolve call
		The filtered events can now also be kept in bats
200505-- Dropped in favor of optimizer control
   a generic map() operation is added to the interpreter
  questionable, should be done by front-ends and optimizers
20050418 look at exception handling. Make the call trace more explicit in terms
 of location.
20050416 reduced the cost of parsing
20050416 further limit the MAL language framework to a priory known mod.fcn
  instructions. Inheritance (and overloading) is moved to the optimizer layer.
  Expected gains, faster parsing, much less mallocs.
20050414 exception utils bijwerken
20050414 GDK uses too many BATcounts while they are stable , removed
a few from the code base.
20050404 enum types are gone
20050302 re-enact calling the debugger from a script
20050228 The garbage control is too complicated and consumes too much power.
  before/after calls are only focussed on the first destination argument.
  the patch into the direction of symbol table lookup made it worse
  Garbage collector redone.

20050225 added statistics catalog at MAL layer only.
Test proper declaration of variables to avoid uninitalized variabless
200502--  introduce inplace algebraic variants, checked against RAM example
20041220 Split inpection module into mdb+inspect
20041216 A function may carry an address, to enable JIT
20041216 The replace/insert operations for bats arguments should set the 
  access mode themselves. 
20041212 Implementation of the first MAL C-Compiler
 C-code generator for mal blocks to speed up expensive functions
  (and multiplex routines)
20041210 The first implementation of MACRO and ORCAM algorithms
    Design a macro expansion facility (with property checks)
    Design an inversion facility (replace multiple stmt by one)
20041206 polymorphic type bindings should be allowed throughout the block
  they are replaced by concrete types upon cloning
20041120 Co-routine ('factory') support in the kernel. They 'yield'
  a result on each call and finish upon 'return'
  Factory cloning would then become an issue, they become first
  class citizens or stick to a context.
20041112 Ensured that temporary variables are properly aligned
	with their symbol table entry
20041112 atom definiton implies start of module section
20041108 introduced skip list in symbol table (2 % gain)
	 removed some resolvetype issues (3 % gain)
20041107 check the validity of constants against their type qualifier.
	the type qualifier is retained for (numeric) constants
20041107 Check the cleaned up barrier and catch control structure.
20040801 The V4 testing scheme has been activated 
20040805 The constant definitions of MIL should go to a prelude file
	and not hardwired in the const.mx
20040805 What to do with Mcreatedb and friends: not needed
	wait for Mguardian
20040804 add multiple path analysis (searchpath.mx from V4)
20040730 BAT reference counting in the face of MAL function calls is not
correct (tst220.mal and tst610.mal)
20040529 replace module and function names with entries into a system/user id table
  [expected gain 10-20% due to less mallocs of small structures]
  [only seen in very lengthy programs
200505 finalized cross-compilation issues on supported platforms
200504 copied README and HowToStart from 4.3
210803 (non)-blocked interaction from Mapi and Perl working
170803 blocked io to clients finished for MAL
170803 Incremental parsing of unfinished definitions in single-line interface
150803 Removed bugs in debugger, breakpoint command now passed correctly
150803 Roll forward of modules to 4.3.14
140803 pcl module included, need some work, i.e. library loading
140803 decimal is broken, derefStr policy issue. Dropped module, outdate
100803 Mapi package rewritten
100803 PerlDBI package
230703 mal_import, better bulk loading implemented
230703 update ascii_io module
230703 sqlserver part
220703 merge the updates on the modules since early june
220703 Pattern matching against a BAT of strings, to avoid compilation
overhead of each pattern.
200703 merge updates of bm.mx
200703 merge updates of mvc.mx
200703 merge updates of logger.mx
200703 copy updates on sql/common to sql/parser
200703 merge updates of statement.mx
200703 move mkey module to V5
+ move aggrX3 operations into the group.mx module, too much work now
+ add comment phrase to Module as well
+ implement the stkTrace command
+ Mclient should be reinstalled to provide access to any scenario
+ Inclusion of the x100 instruction set, first version done
+ An XML manual generation routine should be implemented
+ Mclient should properly initialize a session
+ Name/comment cleansing over all modules/functions is needed.
