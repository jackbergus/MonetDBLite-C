# Configuration file for MonetDB version 5

# This startup file is read by the GDK kernel, to set
# system wide parameters. It is stored in the
# database directory by the monetdb script upon database creation.
# It can also reside in the local directory
# where mserver is called, or the home directory of the MonetDB user.

# Absolute path where MonetDB is installed
prefix=@prefix@
exec_prefix=@exec_prefix@

# GDK Section
#============
# All databases are stored as a directory under the directory
# given below.  Use this value to change the overall location
# of your data.
gdk_dbfarm=@localstatedir@@DIRSEP@@PACKAGE@@DIRSEP@dbfarm	

# MonetDB can only handle one database at a time.  You can specify
# the name of the database to use below.  Note that you can use
# multiple databases, but that you have to edit the database name
# and restart MonetDB.
gdk_dbname=demo			# default database to open

gdk_version=@VERSION@
monet_welcome=yes		#Version and copyright information

# The options below deal with various aspects of memory usage behaviour.
# If you don't know what these values mean, you should leave them alone.

# gdk_mem_bigsize & gdk_vm_minsize will be set/limited to
# 1/2 of the physically available amount of main-memory
# during start-up in src/tools/mserver.mx
# memory chunks of size >= gdk_mem_bigsize (in bytes) will be mmaped anonymously
#gdk_mem_bigsize=33554432
# memory chunks of size >= gdk_vm_minsize (in bytes) will be mmaped;
#gdk_vm_minsize=134217728

# for 32 bit systems try claim 3G of (virtual) memory
# set to "no" to run mserver with valgrind;
# also, you need to tell valgrind to use 8-byte alignment, hence:
# "valgrind --alignment=8 mserver --set gdk_alloc_map=no ..."
gdk_alloc_map=no

# You can enable debug for specific parts.  By default debug is
# switched off.
gdk_debug=0	
# possible values: (can be a combination of)
#       1 = thread-specific debug output
#       2 = property enforcing on new BATs
#       4 = memory allocation
#       8 = property checking on all values: tells about wrongly set properties
#      16 = major IO activity
#      32 = BAT handling
#      64 = MIL parser debugging
#     128 = Thread management
#     256 = Event management
#     512 = Transaction management
#    1024 = Locks and Triggers
#    2048 = Dynamic loading
#    4096 = BBP Performance (?)
#    8192 = Delta debugging (?)
#   16384 = Module loading
#   32768 = Yacc specific error messages
#   65536 = tcpip (??)
#  131072 = monet_multiplex: setaggr debugging (??)
#  262144 = \
#  524288 =   ddbench (???)
# 1048576 = /
# 2097152 = show join/select algorithm chosen
# 4194304 = show result size estimations (for join,select)
# 8388608 = extended property checking: tells also about not set properties
#
# the kernel can be used in embedded situations (don't set this yourself)
gdk_embedded=no


# Monet Section
#==============
monet_admin=adm			#administrator user name 
#monet_prompt=>
# Where do the MonetDB modules reside? The second path is for windows dlls.
monet_mod_path=@libdir@@DIRSEP@@PACKAGE@
# Start mserver in daemon mode, or start with MAL interactive interface?
monet_daemon=no	

#Mguardian section
#====================================
delay=300		#waiting between pinging the server 

# MAL section
# Monet Virtual Machine
#====================================
mal_init=${prefix}/lib/MonetDB5/mal_init.mal
mal_debug = yes                 # debugging the MAL component
mal_details = 14                # instruction listing details
mal_listing = 15                # echoing the input

# General client Section
#====================================
#host=localhost				#the host the server runs on

# Monet Application Interface Section
#====================================
#mapi_port=50000			#default port to address a mserver
#mapi_noheaders=no			#show all the mil output
#mapi_debug=0				#The mapi debug level		

# SQL Interface Section
#====================================
sql_prompt=sql>
# default port to address an mserver for an SQL session
sql_port=45123
# The SQL debug level (should be disabled for normal use)
sql_debug=0
# Place to store SQL transaction logs
# The logs are typically stored on a different storage medium
# to protect the database against accidental hardware loss.
sql_logdir=@localstatedir@@DIRSEP@@PACKAGE@@DIRSEP@dblogs 

# XQuery Interface Section
#=========================

# default port to address an mserver for an XQuery session
xquery_port=45789

# default port to address the HTTP server for pathfinder
pf_httpd_port=8080

#output mode "dm" = pretty printed,
#            "xml" = enforce XML with enclosing <XQueryResult> tags
xquery_output=dm

#limit the document cache on disk to 100MB
xquery_cacheMB=100

# Profile Interface Section
#====================================
# for 32 bit systems try to claim 3G of (virtual) memory;
# set to "no" to run mserver with valgrind.
# valgrind --tool=callgrind mserver --set gdk_alloc_map=no ..."
#gdk_alloc_map=yes

