@section The VOC tutorial
Exploring the wealth of functionality offered by MonetDB is best
started using a toy database.  An example of such database is the VOC data
set that provides a peephole view into the administrative
system of a multi-national company, 
the @emph{Vereenigde geoctrooieerde Oostindische
Compagnie} (VOC for short - The (Dutch) East Indian Company).

The VOC was granted a monopoly on the trade in the East Indies on March 20, 1602
by the representatives of the provinces of the Dutch republic.
Attached to this monopoly was the duty to fight the enemies of the Republic and
prevent other European nations to enter the East India trade.
During its history of over 200 years, the VOC became the largest company of its kind,
trading spices like nutmeg, cloves, cinnamon, pepper, and other consumer
products like tea, silk and Chinese porcelain.
Her factories or trade centers were world famous: Desjima in Japan,
Mokha in Yemen, Surat in Persia and of course Batavia,
the Company's headquarters on Java.

The history of the VOC is an active area of research and
a focal point for multi-country heritage projects, 
e.g. @url{http://www.tanap.net/content/voc/organization/organization_intro.htm, TANAP},
which includes a short historic overview of the VOC written by
world expert on the topic F. Gaastra.
The archives of the VOC are spread around the world, but a large
contingent still resides in the @url{ http://www.nationaalarchief.nl/,National Archive},
The Hague.
The archives comprise over 25 million historical records, much of which has not (yet) been digitized.

The MonetDB/SQL tutorial is based on the material published in the book 
@emph{Dutch-Asiatic Shipping in the 17th and 18th Centuries} by J.R. Bruijn, F.S. Gaastra and I. Schaar, which gives an account of the trips made to the East
and ships returned safely (or wrecked on the way).  A total of 8000 records
are provided.  They include information about ship name and type, captain,
the arrival/departure of harbors along the route, personnel accounts,
and anecdotal information.

@subsection Acquiring and loading the VOC data set

Before you load the VOC data set, it is advised to first add a different user
with its own schema to the MonetDB database.
We illustrate this process using the textual SQL client.
Make sure the MonetDB server has been started, then start the SQL client.
Under Linux you will see something like this:

@example
shell> @value{mjclient} --database=voc -umonetdb 
password: ******
Welcome to the MonetDB interactive JDBC terminal!
Database: MonetDB 4.99.19
Driver: MonetDB Native Driver 1.3 (Spur_pre1 20060112)
Type \q to quit, \h for a list of available commands
auto commit mode: on
voc> CREATE USER "voc" WITH PASSWORD 'voc' NAME 'VOC Explorer' SCHEMA "sys";
Operation successful
voc> CREATE SCHEMA "voc" AUTHORIZATION "voc";
Operation successful
voc> ALTER USER "voc" SET SCHEMA "voc";
voc>\q
@end example
In the remainder of the tutorial you can log onto the server
as user @code{voc}.

The VOC data set can be downloaded from
@url{http://monetdb.cwi.nl/Assets/VOC/voc_dump.sql.gz,the MonetDB Assets site}
as a gzipped file with SQL statements.
After the zipfile has been extracted, the file should be loaded into MonetDB
via the @ref{Client Interfaces}.
Alternatively, the URL to the VOC data file can be supplied to the
@value{mjclient} utility, which then directly reads from the URL.

The tutorial database can be initialized using either @value{mjclient} and
@value{mclient} as follows, provided the sql-dump file has already been
downloaded:
@example
shell> @value{mjclient} --database=voc -umonetdb -f voc_dump.sql -Xbatching
password: ***
shell>@value{mclient} -lsql -uvoc <voc_dump.sql
@end example
Alternatively, a remotely living dump file can be used:
@example
shell> @value{mjclient} --database=voc -umonetdb -f http://monetdb.cwi.nl/Assets/VOC/voc_dump.sql.gz -Xbatching
password:***
@end example
The argument @code{Xbatching} instructs the JDBC client to batch instructions
before shipping them to the server. Loading the database takes a few
seconds on a state-of-the-art machine.

@subsection Exploring the VOC data set
The @value{mjclient} contains a @emph{describe} operator, 
denoted by @code{\d} to inspect the
definition of the database schema and its tables.
This functionality is not available in @value{mclient}. 
@example
voc-> \d
TABLE   voc.craftsmen
TABLE   voc.impotenten
TABLE   voc.invoices
TABLE   voc.passengers
TABLE   voc.seafarers
TABLE   voc.soldiers
TABLE   voc.total
TABLE   voc.voyages
@end example
The set consists of 8 tables, which are all bound to each other using 
FOREIGN KEY relationships. The voyages table is considered to be the 
main table, which all others reference to. Every table, except invoices 
has a PRIMARY KEY defined over the columns number and number_sup. 
Since the invoices table holds zero or more invoices per voyage 
(identified by number, number_sub) a PRIMARY KEY constraint is 
not possible. Details of the tables are readily available.
@example
voc-> \d voc.soldiers
CREATE TABLE "voc"."soldiers" (
        "number"               int      NOT NULL,
        "number_sup"           char(1)  NOT NULL,
        "trip"                 int ,
        "trip_sup"             char(1),
        "onboard_at_departure" int ,
        "death_at_cape"        int ,
        "left_at_cape"         int ,
        "onboard_at_cape"      int ,
        "death_during_voyage"  int ,
        "onboard_at_arrival"   int ,
        CONSTRAINT "soldiers_number_number_sup_pkey" PRIMARY KEY ("number", "number_sup"),
        CONSTRAINT "soldiers_number_number_sup_fkey" FOREIGN KEY ("number", "number_sup") REFERENCES "voc"."voyages" ("number", "number_sup")
);
voc->
@end example
The tables craftsmen, importenten, passengers, seafarers, and soldiers 
all share the same columns. We can define a VIEW that combines them all 
into one big table, to make them easier to access.
@example
voc-> CREATE VIEW onboard_people AS
voc=> SELECT * FROM (
voc=(    SELECT 'craftsmen' AS type, craftsmen.* FROM craftsmen
voc=(    UNION ALL
voc=(    SELECT 'impotenten' AS type, impotenten.* FROM impotenten
voc=(    UNION ALL
voc=(    SELECT 'passengers' AS type, passengers.* FROM passengers
voc=(    UNION ALL
voc=(    SELECT 'seafarers' AS type, seafarers.* FROM seafarers
voc=(    UNION ALL
voc=(    SELECT 'soldiers' AS type, soldiers.* FROM soldiers
voc=(    UNION ALL
voc=(    SELECT 'total' AS type, total.* FROM total
voc=( ) AS onboard_people_table;
Operation successful
@end example
The new view will show up and we can just use it as a normal table, 
for instance to calculate the number of records for each group of people:
@example
voc-> SELECT type, COUNT(*) AS total FROM onboard_people GROUP BY type ORDER BY type;
+------------+-------+
| type       | total |
+============+=======+
| craftsmen  |  2349 |
| impotenten |   938 |
| passengers |  2813 |
| seafarers  |  4468 |
| soldiers   |  4177 |
| total      |  2454 |
+------------+-------+
6 rows
 
voc-> select count(*) from impotenten;
+--------------+
| count_number |
+==============+
|          938 |
+--------------+
1 row
@end example
It is possible to play with the set in many ways, to find out several 
things that took place during the voyages of the ships, or the money 
that was earned. A few examples are shown below.
@example
voc-> SELECT COUNT(*) FROM voyages WHERE particulars LIKE '%_recked%';
+--------------+
| count_number |
+==============+
|          354 |
+--------------+
1 row
 
voc-> SELECT chamber, CAST(AVG(invoice) AS integer) AS average
voc=> FROM invoices
voc=> WHERE invoice IS NOT NULL
voc=> GROUP BY chamber
voc=> ORDER BY average DESC;
+---------+----------+
| chamber | average  |
+=========+==========+
| A       |  282996 |
| Z       |  259300 |
| H       |  150182 |
| R       |  149628 |
| D       |  149522 |
| E       |  149518 |
| <NULL>  |   83309 |
+---------+----------+
7 rows
 
voc-> CREATE VIEW extended_onboard AS SELECT number, number_sup, trip, trip_sup, onboard_at_departure, death_at_cape, left_at_cape, onboard_at_cape, death_during_voyage, onboard_at_arrival, death_during_voyage - left_at_cape AS death_at_arrival FROM onboard_people;
Operation successful
@end example
