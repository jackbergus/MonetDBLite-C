@subsection Source Distribution

The source distribution is needed if you intend to inspect or extend 
the code base. The source distribution comes
with the complete test-bench to assure that changes do not affect
(in as far as they get tested) its stability.
A single stable release is maintained for external users while 
we concurrently work on the next release.
Older versions are not actively maintained by the development team.

Set up of a fully functional system requires downloading
a MonetDB server package and either/both the SQL and XQuery packages.
The steps to be taken are described for installing the server
only, because installing the other packages largely follow
the same steps. The deviances are explained at the end of this section.

The development version can be obtained from the CVS repository at SourceForge.
You have to login to the CVS server first:
@verbatim
cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/monetdb login
@end verbatim
Just type RETURN when asked for the password.
Then get the buildtools, MonetDB and SQL module sources using the command:
@verbatim
cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/monetdb co buildtools MonetDB monet5 sql
@end verbatim

This will create the directories buildtools, MonetDB5, monet5 and SQL in 
your current working directory, which hold the sources for all three
project packages. 

MonetDB developers should use @code{ext} instead of @code{pserver}, e.g.
@verbatim
cvs -d :ext:<username>@cvs.sourceforge.net:/cvsroot/monetdb checkout buildtools MonetDB5 sql
@end verbatim
Also see @url{http://sourceforge.net/cvs/?group_id=56967,SourceForge documentation} for more information on using @code{cvs}.

@subsubsection Preparation
The first package to install is @code{buildtools}, which contains
supportive tools needed to build (parts of) the MonetDB suite.

@verbatim
Mx - The tool to extract sources and documentation from .mx files.
mel - The MonetDB Extension Language tool.
autogen - A tool to create Makefiles from Makefile.ag.
burg - A tool to help produce parsers (only used in pathfinder).
@end verbatim

Mx is needed by many other packages and doesn't itself depend on
anything else, so build Mx first.

To build the various tools in one go (not on Windows with the
Micorsoft tools, see below), simply first run the script
@verbatim
        ./bootstrap
        ./configure [--prefix=<install-dir-prefix>]
        make
        make install
@end verbatim

The argument @code{<install-dir-prefix>} should be replaced
by the path to the directory where you want the code to recide.
The tool directories all have a file README with instructions for that
tool, including how to compile on Windows.

@menu
* Linux Installation ::
* Windows Installation ::
* Gentoo Installation ::
* Daily Builds ::
@end menu
@node Linux Installation, Windows Installation, Source Distribution, Source Distribution 
@subsection Linux Installation

@include Assets/LinuxInstall.texi

@node Windows Installation, Gentoo Installation, Linux Installation, Source Distribution
@subsection Windows Installation

@include Assets/WindowsInstall.texi

@node Gentoo Installation, Daily Builds, Windows Installation, Source Distribution
@subsection Gentoo Installation
@include Assets/GentooInstall.texi

@node Daily Builds, Start and Stop the Server, Gentoo Installation, Source Distribution
@subsection Daily Builds
Next to functionality and performance, stability and portability are first 
class goals of the MonetDB project. Pursuing these goals requires to 
constantly monitor the evolving MonetDB code base.
For this purpose, we developed a test environment that automatically compiles 
and tests MonetDB (and its most prominent add-on packages) every night on 
a variety of system configurations. 

Software patches and functional enhancements are checked into
the repositories on a daily basis. A limited set of distribution
packages is prepared to disseminate the latest 
to developers and application programmers as quickly as possible.
Such builds may, however, contain bugs or sometimes even break
old functionality.

The @url{http://monetdb.cwi.nl/Development/TestWeb/index.html,TestWeb}
provides access to the test web-site
that summarizes the results of the Automated Testing activities on various 
@url{http://monetdb.cwi.nl/Development/TestWeb/Platforms/index.html,platforms}.
It is a good starting point before picking up a daily build version.

Two versions of MonetDB are tested daily on all available platforms:
@itemize @bullet
@item
the @emph{cutting edge} development version ("Current"), i.e. the head of the main CVS branch; and
@item
the latest release version ("Stable"), i.e. the head of the most recent release branch.
@end itemize
The test reports consist of three overview pages ("cross-check-lists") revealing the results of
@enumerate
@item
all compilation steps (bootstrap, configure, make, make install),
@item
testing via "make check" (using debugmask 10, i.e., exhaustive monitoring and correction of physical BAT properties is enabled in the server), and
@item
testing via "Mtest.py -d0 -r" (using debugmask 0, i.e., all debugging is switched off in the server). 
@end enumerate

@subsubsection Stability

With a (code-wise) complex system like MonetDB, modifying the source code --- 
be it for fixing bugs or for adding new features --- always bears the risk of 
breaking or at least altering some existing functionality. To facilitate the 
task of detecting such changes, small test scripts together with their 
respective correct/expected ("stable") output are collected within the CVS 
repository of MonetDB. Given the complexity of MonetDB, there is no way to 
do anything close to "exhaustive" testing, hence, the idea is to continuously 
extend the test collection. E.g., each developer should add some tests as soon 
as she/he adds new functionality. Likewise, a test script should be added for 
each bug report to monitor whether/when the bug is fixed, and to prevent 
(or at least detect) future occurrences of the same bug. 
The collection consists for hundreds of test scripts, each
covering many micro-functionality tests.

To run all the tests and compare their current output to their stable output, 
a tool called Mtest is included in the MonetDB code base. 
Mtest recursively walks through the source tree, runs tests, and checks for 
difference between the stable and the current output. As a result, Mtest 
creates the web interface that allows convenient access to the differences 
encountered during testing. Each developer is supposed to run "Mtest" 
(respectively "make check") on his/her favorite development platform and 
check the results before checking in her/his changes. 
During the automatic daily tests, "make check" and "Mtest" are run on all 
testing platforms and the TestWeb is generated to provide convenient 
access to the results.

@subsubsection Portability

Though Fedora Linux on AMD Athlon PC's is our main development platform 
at CWI, we do not limit our attention to this single platform. 
Supporting a broad range of hardware and software platforms is an important 
concern.

Using standard configuration tools like automake, autoconf, and libtool, 
we have the same code base compiling not only on various flavors of 
Unix (e.g., Linux, Cygwin, AIX, IRIX, Solaris, MacOS X) but also on 
native Windows. Furthermore, the very code base compiles with a wide 
spectrum of (C-) compilers, ranging from GNU's gcc over several native 
Unix compilers (IBM, SGI, Sun, Intel, Portland Group) to 
Microsoft's Visual Studio and Visual Studio .NET on Windows.

On the hardware side, we have (had) MonetDB running on "almost anything" 
from a Intel StrongARM-based Linux PDA with 64 MB of flash memory to an 
SGI Origin2000 with 32 MIPS R12k CPU's and a total of 64 GB of (shared) 
main memory.
