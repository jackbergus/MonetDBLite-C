@section MonetDB PHP Library

The MonetDB distribution comes with a MAPI based interface 
for @url{"http://www.php.net",PHP}. It consists of 2 parts the dynamically
loadable php module, MonetDB.so/dll and a driver for 
the @url{"http://pear.php.net/package/DB",PEAR DB} abstraction interface, MonetDB.php. 

For general compilation of MonetDB see the howto's for Unix and Linux.
The unix configure process normally tries to detect if you have PHP 
including developer packages installed and builds the PHP module only 
if you have it.  With the @code{--with-php} option you could tell 'configure' 
where to find the PHP installation.

For windows setups the story is a little bit more complex.
TODO

When the build process is complete you should have a PHP extension_dir under
your MonetDB prefix directory. Usually this is prefix/lib(64)/php4.
Besides this binary module the pear db driver should be installed under
prefix/php_peardir/db, which usually is prefix/share/pear/db.
Depending on your local setup you could now use these files by coping them
into the system extension_dir and php_peardir or with a private webserver
you could simply reset the environment variables, include_path and
extension_dir. For example you could have a php.ini file which has the following
php section.

@example
[PHP]
safe_mode = Off
safe_mode_gid = Off
include_path = ".:/opt/MonetDB-4.6/share/pear:/usr/share/pear"
extension_dir = /opt/MonetDB-4.6/lib(64)/php4
@end example

@subsection A Simple PHP Example
A tiny example of the use the MonetDB PHP module follows:

@verbatim
<?php

# if monetdb.php isn't installed into the correct pear/DB directory
# we load first 
#require("DB/monetdb.php");
require("DB.php");

function printtable($resultset) {
    echo "<table border='1'>";
    echo "<tr>";
    foreach(array_keys($resultset[0]) as $head) 
	echo "<th>".ucfirst($head)."</th>";
    echo "</tr>";
    
    foreach($resultset as $row) {
	echo "<tr&>";
	foreach($row as $k=&>$v)
	echo "</tr&>";
    } 
    echo "</table&>";
}

// Connect to monet giving a user/password/host; default language is SQL. 
$db = DB::connect("monetdb://monetdb:monetdb@@localhost/");
$db->setFetchMode(DB_FETCHMODE_ASSOC);
$db->autoCommit(false);

$db->query("CREATE TABLE testtable (name VARCHAR(255), zipcode VARCHAR(10), registered BOOLEAN);");
$db->query("INSERT INTO testtable VALUES('Arjan Scherpenisse', '1092 GJ', true);");
$db->query("INSERT INTO testtable VALUES('Test', '123', false);");

// Get table names
$tables = $db->getCol($db->getSpecialQuery("tables")); 

echo "<p>The following tables are defined: <strong>" . implode(", ", $tables) . "</strong>";

echo "<p>Contents of testtable:";
$all = $db->getAll("SELECT * FROM testtable;");
printtable($all);
 
$db->disconnect();

?>
@end verbatim

More examples can be found in the sources. 

The PHP module is aligned with the Postgresql implementation.
A synopsis of the operations provided:
@itemize
@item proto resource monetdb_connect([string host [, string port [, string
username [, string password [, string language]]]]])
Open a MonetDB connection
@item proto resource monetdb_pconnect([string host [, string port [, string
username [, string password [, string language]]]]])
Open a persistent MonetDB connection
@item proto bool monetdb_close([resource connection])
Close a PostgreSQL connection
@item proto string monetdb_dbname([resource connection])
Get the database name
@item proto string monetdb_last_error([resource connection])
Get the error message string
@item proto string monetdb_host([resource connection])
Returns the host name associated with the connection
@item proto array monetdb_version([resource connection])
Returns  an  array  with client, protocol and server version (when
available)
@item proto bool monetdb_ping([resource connection])
Ping database. If connection is bad, try to reconnect.
@item proto resource monetdb_query([resource connection,] string query)
Execute a query
@item proto resource monetdb_query_params([resource connection,] string query,
array params)
Execute a query
@item proto resource monetdb_prepare([resource connection,] string stmtname,
string query)
Prepare a query for future execution
@item proto resource monetdb_execute([resource connection,] string stmtname,
array params)
Execute a prepared query
@item proto int monetdb_num_rows(resource result)
Return the number of rows in the result
@item proto int monetdb_num_fields(resource result)
Return the number of fields in the result
@item proto int monetdb_affected_rows(resource result)
Returns the number of affected tuples
@item proto string pg_last_notice(resource connection)
Returns the last notice set by the backend
@item proto string monetdb_field_name(resource result, int field_number)
Returns the name of the field
@item proto string monetdb_field_table(resource result, int field_number)
Returns the name of the table field belongs to
@item proto string monetdb_field_type(resource result, int field_number)
Returns the type of the field
@item proto int monetdb_field_num(resource result, string field_name)
Returns the field number of the named field
@item proto mixed monetdb_fetch_result(resource result, [int row_number,]
mixed field_name)
Returns values from a result identifier
@item proto  array  monetdb_fetch_row(resource  result [, int row [, int
result_type]])
Get a row as an enumerated array
@item proto array monetdb_fetch_assoc(resource result [, int row])
Fetch a row as an assoc array
@item proto  array monetdb_fetch_array(resource result [, int row [, int
result_type]])
Fetch a row as an array
@item proto object monetdb_fetch_object(resource result [, int row [, string
class_name [, NULL|array ctor_params]]])
Fetch a row as an object
@item proto bool monetdb_result_seek(resource result, int offset)
Set internal row offset
@item proto  int  monetdb_field_prtlen(resource result, [int row,] mixed
field_name_or_number)
Returns the printed length
@item proto  int monetdb_field_is_null(resource result, [int row,] mixed
field_name_or_number)
Test if a field is NULL
@item proto bool monetdb_free_result(resource result)
Free result memory
@item proto string monetdb_escape_string(string data)
Escape string for text/char type
@item proto int monetdb_connection_status(resource connnection)
Get connection status
@item proto bool monetdb_connection_reset(resource connection)
Reset connection (reconnect)
@item proto bool monetdb_put_line([resource connection,] string query)
Send null-terminated string to backend server
@item proto bool monetdb_end_copy([resource connection])
Sync with backend. Completes the Copy command
@item proto array monetdb_copy_to(resource connection, string table_name [,
string delimiter [, string null_as]])
Copy table to array
@item proto bool monetdb_copy_from(resource connection, string table_name ,
array rows [, string delimiter [, string null_as]])
Copy table from array
@item proto bool monetdb_connection_busy(resource connection)
Get connection is busy or not
@item proto bool monetdb_send_query(resource connection, string query)
Send asynchronous query
@item proto bool monetdb_send_query_params(resource connection, string query)
Send asynchronous parameterized query
@item proto bool monetdb_send_prepare(resource connection, string stmtname,
string query)
Asynchronously prepare a query for future execution
@item proto bool monetdb_send_execute(resource connection, string stmtname,
array params)
Executes prevriously prepared stmtname asynchronously
@item proto resource monetdb_get_result(resource connection)
Get asynchronous query result
@item proto mixed monetdb_result_status(resource result[, long result_type])
Get status of query result
@item proto array monetdb_meta_data(resource db, string table)
Get meta_data
@item proto array monetdb_convert(resource db, string table, array values[,
int options])
Check and convert values for PostgreSQL SQL statement
@item proto mixed monetdb_insert(resource db, string table, array values[, int
options])
Insert values (filed=>value) to table
@item proto mixed monetdb_update(resource db, string table, array fields,
array ids[, int options])
Update table using values (field=>value) and ids (id=>value)
@item proto mixed monetdb_delete(resource db, string table, array ids[, int
options])
Delete records has ids (id=>value)
@item proto mixed monetdb_select(resource db, string table, array ids[, int
options])
Select records that has ids (id=>value)

@end itemize
@c The PEAR::DB driver is based on the MonetDB php module which can
@c ofcourse also be used directly.  
@c Check out the @url{"http://www.monetdb.com/MonetDB/Version5//phpdoc",PHPdoc documentation} for these functions.
