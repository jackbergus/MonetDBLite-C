@subsection SQL Roadmap
The long term objective for the SQL front-end is to provide all features
available in SQL:2003. The priority for individual features
is determined in an ad hoq way.
The SQL features scheduled for implementation
and those that won't be supported in the foreseeable future
are shown below.

Our current assessment of the features planned for upcoming releases,
in order of priority, are:
@itemize @bullet
@item @emph{Full text retrieval }
A full text retrieval support function consists of a special
constructed index over text appearing in multiple columns of
a relational table. This index is built using well-known
Information Retrieval techniques, such as stemming, keyword
recognition, and stop-word reduction.
Several IR projects are underway, which enhance MonetDB with
IR capabilities.
@item @emph{Stored SQL procedures}
Stored procedures are a powerful scheme to offload operational
abstractions to the server. The MonetDB server comes with its own programming
language MAL to encode critical functions. 
Linking with the SQL compiler is readily
available, leaving a MonetDB specific implementation of stored SQL
procedures less important.
@item @emph{Support for multi-media objects}
MonetDB has been used in several multi-media projects, but mostly
to store and manipulate derived features. Multimedia objects can
be stored as unprotected URLs, i.e. there is no guarantee the
object referred to exists upon answering a query. The functionality
should be extended with image, audio, and video types.
@item @emph{General column and table constraint enforcement}
@item @emph{Internationalization of the character sets}
@item @emph{Full outer-join queries}
@end itemize
The database backend architecture prohibits easy implementation of
several SQL-99 features. Those on the list below are not expected to
be supported.
@itemize @bullet
@item
Cursor based processing, because the execution engine is not based
on the iterator model deployed in other engines. A simulation of the
cursor based scheme would be utterly expensive from a performance
point of view.
@item
Multi-level transaction isolation levels. Coarse grain isolation is
provided using table level locks.
@end itemize
