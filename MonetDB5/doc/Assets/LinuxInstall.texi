This section helps you to install the MonetDB source and compile it
on a Unix platform (e.g., Linux, IRIX, Solaris, AIX, MacOS X/Darwin, or CYGWIN).
For compilation and installation on a native Windows system (NT, 2000, XP)
see @ref{Windows Installation}

@subsubsection Prerequisites
@itemize
@item @emph{CVS}
You need to have a working CVS.  For instructions, see
@url{http://sourceforge.net/docman/?group_id=1,docman}
and look under the heading CVS Instructions.
@item @emph{Python}
MonetDB uses Python (version 2.0.0 or better) during
configuration of the software.  See <a href="http://www.python.org/">
python.org</a> for more information.
@item @emph{autoconf/automake/libtool}
MonetDB uses GNU 
@url{http://www.gnu.org/software/autoconf/,autoconf} (>= 2.53), 
@url{http://www.gnu.org/software/automake/,automake} (>= 1.5), and
@url{http://www.gnu.org/software/libtool/,libtool} (>= 1.4) during 
configuration of the software. Libtool is also used during the build.

@item @emph{standard software development tools}
To compile MonetDB, you also need to have a the following 
standard software development tools installed and ready for use
on you system:
@itemize
@item a C/C++ compiler (e.g., GNU's gcc/g++)</li>
@item a lexical analyzer generator (e.g., "lex" or "flex")</li>
@item a parser generator (e.g., "yacc" or "bison")</li>
@item GNU make ("gmake") (native make's on, e.g., IRIX and Solaris usually don't work)
@end itemize

@item
@emph{dlcompat (MacOS X/Darwin, only)}
MacOS X/Darwin itself does not support dlopen, however, there's
a third-party library called dlcompat from Fink that provides
the respective functionality.  MonetDB requires 
@url{http://fink.sourceforge.net/pdb/package.php/dlcompat,dlcompat}
to be installed on MacOS X/Darwin.
@item
@emph{disk space}
After downloading, MonetDB takes up about 40 MB of disk space;
compilation adds another 70 MB.  Testing takes about 45 MB, and
the installation about 20 MB (not including any databases).
@end itemize

@subsubsection Getting the Software
This command should be done once.  It records a password on the local
machine to be used for all subsequent CVS accesses with this server.
@example
cvs -d:pserver:anonymous@@cvs.sourceforge.net:/cvsroot/monetdb login
@end example

Just type RETURN when asked for the password.

Then get the software by using the command:
@example
cvs -d:pserver:anonymous@@cvs.sourceforge.net:/cvsroot/monetdb checkout MonetDB
@end example
This will create a directory MonetDB in your current working directory.

Also see @url{http://sourceforge.net/cvs/?group_id=56967,SourceForge documentation} for more information.

@subsubsection Configure and Make
Before executing the following steps, make sure that your
shell-environment (especially variables like "PATH" and
"LD_LIBRARY_PATH") is setup, thus that the tools listed above can be
found. 
("Bash"-users at CWI and DD are welcome to simply "source conf/conf.bash".
This sets the proper environment and even provides aliases
"configure_MonetDB" &amp; "Mtest_MonetDB" for convenience.
See conf/conf.bash itself for more details.)

In the top-level directory of MonetDB type the command:
@example
./bootstrap
@end example

Then in any directory (preferably a *new empty* directory and *not* in the
MonetDB top-level directory) give the command

@example
<path-to>/configure [<options>]
@end example

where @code{<path-to>} is replaced with the (absolute or relative)
path to the MonetDB top-level directory.
The directory where you execute configure is the place where all
intermediate source and object files are generated during compilation
via "make".

By default, MonetDB is eventually (i.e., during "make install"; see
below) installed to /usr/local/.  To choose another target directory, 
you need to call
@example
.../configure --prefix=<prefixdir> [<options>]
@end example
A sample of other useful configure options is:

@example
--enable-debug 		 enable full debugging default=off
--enable-optimize 		 enable extra optimization default=off
--enable-warning 		 enable extended compiler warnings default=off
--enable-profile 		 enable profiling default=off
--enable-instrument 	 enable instrument default=off
--with-gcc=[compiler] 	 which C compiler to use
                          ("yes" = gcc/g++, 
                           "no"  = system-specific C/C++ compiler,
                           &lt;other-compiler-name&gt;)
--with-gxx=[compiler] 	 which C++ compiler to use
--with-bits=[#bits] 	 specify number of bits (32 or 64)
@end example
Use the @code{--help} option of configure to find out more about configure
options.

In the same directory (where you called configure) give the command
@example
make
@end example

to compile the source code.


On a lightly loaded, 1.4 GHz Athlon Linux system, configure
takes about 30 seconds, and make about 5 to 10 minutes, depending on
the optimization level chosen during configure.


@subsubsection Testing the Build
If make went successfully, you can try
@example
make check
@end example

This will do a lot of tests, some are unfortunately still expected to
fail, but most should go successfully.  At the end of the output there
is a reference to an HTML file which is created by the test process and
shows the test results.  


Testing takes about 46 MB of disk space in the build directory.<br />
Running the tests takes about 13 minutes on the previously mentioned system.

@subsubsection Installing
Give the command
@example
make install
@end example

By default (if no --prefix option was given to configure above), this
will install in /usr/local/.  Make sure you have appropriate privileges.

@subsubsection Testing the Installation
Make sure that /usr/local/bin (respectively <prefixdir>/bin, where
<prefixdir> is the directory you specified with @code{--prefix} when calling
configure) is in your PATH.

In the MonetDB top-level directory issue the command
@example
Mtest.py -r
@end example

This should produce much the same output as make check above, but uses
the installed version of MonetDB.

You need write permissions on part of the installation directory for
this command: it will create subdirectories <tt>var/dbfarm</tt> and Tests.

@subsubsection Documentation
The documentation starts in <prefixdir>/doc/MonetDB.html

NOTE: the current 'make install' does not yet generate this
      documentation to do this manually, execute *after* successful
      'make install'.  In the top-level directory of the MonetDB build
      tree, call
@example
make html
@end example

@subsubsection Troubleshooting
Bootstrap fails if any of the requisite programs can not be found or
is an incompatible version.<br />
Bootstrap adds files to the source directory, so it must have write
permissions.

During bootstrap, warnings like
@example
	Remember to add `AC_PROG_LIBTOOL' to `configure.in'.
	You should add the contents of `/usr/share/aclocal/libtool.m4' to `aclocal.m4'.
	configure.in:37: warning: do not use m4_patsubst: use patsubst or m4_bpatsubst
	configure.in:104: warning: AC_PROG_LEX invoked multiple times
	configure.in:334: warning: do not use m4_regexp: use regexp or m4_bregexp
	automake/aclocal 1.6.3 is older than 1.7.
	Patching aclocal.m4 for Intel compiler on Linux (icc/ecc).
	patching file aclocal.m4
	Hunk #1 FAILED at 2542.
	1 out of 1 hunk FAILED -- saving rejects to file aclocal.m4.rej
	patching file aclocal.m4
	Hunk #1 FAILED at 1184.
	Hunk #2 FAILED at 2444.
	Hunk #3 FAILED at 2464.
	3 out of 3 hunks FAILED -- saving rejects to file aclocal.m4.rej</pre>
might occur.
@end example
For some technical reasons, it's hard to completely avoid them. However,
it is usually save to ignore them and simply proceed with the usual 
compilation procedure. Only in case the subsequent configure or make
do fail, these warning might have to be take more serious; in any case, 
you should include the e bootstrap output in whenever you report (see below)
compilation problems.


Configure will fail if certain essential programs can't be found or
certain essential tasks (such as compiling a C program) can't be
executed.  The problem will usually be clear from the error message.


E.g., if configure cannot find package XYZ, it is either not installed
on your machine, or it is not installed in places that configure
usually searches (i.e., @code{/usr}, @code{/usr/local}).
In the first case, you need
to install package XYZ before you can configure, make, and install
MonetDB.  In the latter case, you need to tell configure via
"--with-XYZ=<DIR>" where to find packages XYZ on your machine. 
configure then looks for the respective header files in @code{<DIR>/include},
and for the respective libraries in @code{<DIR>/lib}.


Bugs and other problems with compiling or running MonetDB should be
reported using the respective bug-tracking system at 
@url{https://sourceforge.net/tracker/?group_id=56967&atid=482468,
SourceForge} (preferred) or emailed
to @url{mailto:monet@@cwi.nl,monet@@cwi.nl}.  

@subsubsection Running MonetDB with valgrind on Linux<
In case you intend (or need) to run MonetDB with the memory debugging and
profiling tool "valgrind", you need to take care of the following steps:
@enumerate
@item
 set option "gdk_alloc_map" to "no" (in MonetDB.conf: "gdk_alloc_map=no",
   resp. on the Mserver's commandline: "--set gdk_alloc_map=no")
@item tell valgrind to use 8-byte alignment ("valgrind --alignment=8"), hence:
   "valgrind --alignment=8 Mserver --set gdk_alloc_map=no ..."
@item
patch src/gdk/gdk_system.mx as follows and recompile MonetDB 
@example
--- src/gdk/gdk_system.mx       28 Jan 2004 20:42:41 -0000      1.56
+++ src/gdk/gdk_system.mx       2 Mar 2004 17:42:22 -0000
@@ -359,8 +359,8 @@
           process (i.e. with all its threads) is replaced by the new
           program.  If this new program does nothing, other than
           exit, we effectively exit the server.
-        */
        execl(s ? "/bin/false" : "/bin/true", s ? "false" : "true", (char *) 0);
+        */
 #endif
        exit(s);
@end example
@end enumerate
