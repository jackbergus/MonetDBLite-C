@c The steps to be taken are described for installing the server
@c only, because installing the other packages largely follow
@c the same steps. The deviances are explained at the end of this section.

This section helps you to install the MonetDB source and compile it
on a Unix platform (e.g., Linux, MacOS X/Darwin, or CYGWIN).

@subsubsection Getting the source
The development version for Linux-compatible platforms
can be obtained from the CVS repository at SourceForge.
For instructions on how to use CVS, see
@url{http://sourceforge.net/docman/?group_id=1,docman}

You have to login to the CVS server first:
@verbatim
cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/monetdb login
@end verbatim
Just type RETURN when asked for the password.
Then get the buildtools, MonetDB and SQL module sources using the command:
@verbatim
cvs -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/monetdb co buildtools MonetDB monet5 sql
@end verbatim

This will create the directories buildtools, MonetDB5, monet5 and SQL in 
your current working directory, which hold the sources for all three
project packages. These packages should be installed according
to the general scheme described below in this order.

MonetDB developers should use @code{ext} instead of @code{pserver}, e.g.
@verbatim
cvs -d :ext:<username>@cvs.sourceforge.net:/cvsroot/monetdb checkout buildtools MonetDB5 sql
@end verbatim
Also see @url{http://sourceforge.net/cvs/?group_id=56967,SourceForge documentation} for more information on using @code{cvs}.

@subsubsection Prerequisites
@itemize @bullet
@item @emph{Python}
MonetDB uses Python (version 2.0.0 or better) during
configuration of the software.  
See @url{http://www.python.org/, python.org} for more information.
@item @emph{autoconf/automake/libtool}
MonetDB uses GNU 
@url{http://www.gnu.org/software/autoconf/,autoconf} (>= 2.53), 
@url{http://www.gnu.org/software/automake/,automake} (>= 1.5), and
@url{http://www.gnu.org/software/libtool/,libtool} (>= 1.4) during 
configuration of the software. Libtool is also used during the build.

@item @emph{standard software development tools}
To compile MonetDB, you also need to have a the following 
standard software development tools installed and ready for use
on you system:
@itemize @bullet
@item a C/C++ compiler (e.g., GNU's gcc/g++)
@item a lexical analyzer generator (e.g., "lex" or "flex")
@item a parser generator (e.g., "yacc" or "bison")
@item GNU make ("gmake") (native make's on, e.g., IRIX and Solaris usually don't work).
@end itemize

@item Mx, mel, and autogen
These tools are only needed if you are building from CVS. 
They are shipped as the @code{buildtools} package and should be installed first.
If you start with the source distribution from SourceForge you don't need this.
@item
@emph{disk space}
After downloading, MonetDB takes up about 40 MB of disk space;
compilation adds another 70 MB.  Testing takes about 45 MB, and
the installation about 20 MB (not including any databases).
@end itemize

@subsubsection Preparation
The first package to install is @code{buildtools}, which contains
supportive tools needed to build (parts of) the MonetDB suite.

@table @code
@item Mx 
The tool to extract sources and documentation from .mx files.
Mx is needed by many other packages and doesn't itself depend on
anything else, so build it first.
@item mel 
The MonetDB Extension Language tool.
@item autogen 
A tool to create Makefiles from Makefile.ag.
@item burg
A tool to help produce parsers (only used in pathfinder).
@end table

To build the various tools in one go (not on Windows with the
Micorsoft tools, see below), simply first run the script
@verbatim
        ./bootstrap
        ./configure [--prefix=<install-dir-prefix>]
        make
        make install
@end verbatim

The argument @code{<install-dir-prefix>} should be replaced
by the path to the directory where you want the code to recide.
The tool directories all have a file README with instructions for that
tool, including how to compile on Windows.


@subsubsection Bootstrap, Configure and Make
Before executing the following steps, make sure that your
shell-environment (especially variables like "PATH" and
"LD_LIBRARY_PATH") is setup, so that the tools listed above can be
found. 
@footnote{"Bash"-users are welcome to simply "source conf/conf.bash".
This sets the proper environment and even provides aliases
"configure_MonetDB" &amp; "Mtest_MonetDB" for convenience.
See conf/conf.bash itself for more details.}

In case you checked out the CVS version, you have to run @code{bootstrap}
first; in case you downloaded the pre-packaged source distribution,
you should skip @code{bootstrap} and start with @code{configure}.

In the top-level directory of MonetDB type the command:
@example
./bootstrap
@end example
Note that this uses the program @code{autogen.py}, which is part
of the buildtools package. Make sure it can be found in your @code{PATH}.

Then in any directory (preferably a *new empty* directory and *not* in the
MonetDB top-level directory) give the command

@example
.../configure [<options>]
@end example

where @code{...} is replaced with the (absolute or relative)
path to the MonetDB top-level directory.
The directory where you execute @code{configure} is the place where all
intermediate source and object files are generated during compilation
via "make".

By default, MonetDB is eventually (i.e., during "make install"; see
below) installed to /usr/local/.  To choose another target directory, 
you need to call
@example
.../configure --prefix=<prefixdir> [<options>]
@end example
Some other useful configure options are:

@example
--enable-debug 		enable full debugging default=off
--enable-optimize 	enable extra optimization default=off
--enable-warning 	enable extended compiler warnings default=off
--enable-profile 	enable profiling default=off
--enable-instrument 	enable instrument default=off
--with-mx=<Mx>          which Mx binary to use (default: whichever
                        Mx is found in your PATH)
--with-mel=<mel>        which mel binary to use (default: whichever
                        mel is found in your PATH)
CC=<compiler>           which C compiler to use default=gcc
--enable-bits=<#bits>   specify number of bits (32 or 64)
                        default is compiler default
--enable-oid32          use 32-bit OIDs on 64-bit systems default=off
@end example
Use the @code{--help} option of configure to find out more about configure
options.

In the same directory (where you called configure) give the command
@example
make
@end example

to compile the source code.


On a lightly loaded, 1.4 GHz Athlon Linux system, @code{configure}
takes about 30 seconds, and @code{make} about 5 to 10 minutes, depending on
the optimization level chosen during configure.


@subsubsection Testing the Build
If @code{make} went successfully, you can try
@example
make check
@end example

This will perform a large number of tests, some are unfortunately 
still expected to fail, but most should go successfully.  At the end 
of the output there
is a reference to an HTML file which is created by the test process and
shows the test results.  

Testing takes about 50 MB of disk space in the build directory.
Running the tests takes 10-15 minutes.

@subsubsection Installing
The final step is to install the executables in the proper place; give the command
@example
make install
@end example

By default (if no --prefix option was given to configure above), this
will install in /usr/local/.  Make sure you have appropriate privileges.

@subsubsection Testing the Installation
Make sure that /usr/local/bin (respectively <prefixdir>/bin, where
<prefixdir> is the directory you specified with @code{--prefix} when calling
configure) is in your PATH.

In the MonetDB top-level directory issue the command
@example
Mtest.py -r
@end example

This should produce much the same output as make check above, but uses
the installed version of MonetDB.

You need write permissions on part of the installation directory for
this command: it will create subdirectories @code{var/MonetDB5/dbfarm}
and Tests.

@subsubsection Usage
There are two alternatives for using MonetDB interactively. 
In both cases you first need to make sure that your environment 
is set as described in Bootstrap, Configure and Make and Testing 
the Installation above.

If you are "in a hurry", you can then simply start
@ifset M5manual
@example
mserver5
@end example
@end ifset
@ifclear M5manual
@example
Mserver
@end example
@end ifclear

and you'll get the "server console", where you can type your commands.
The server console is mainly meant for administrative use.

For a more convenient interface, you should use the @value{mclient} program.
@ifset M5manual
To do so, first start the server.
Then, in a second shell, set up the same environment and start 
the text-based client.

@example
@value{mclient} -lsql
@end example

With @value{mclient}, you get a text-based interface that supports command-line 
editing and a command-line history. The latter can even be stored 
persistently to be re-used after stopping and restarting @value{mclient};
for details type:
@example
@value{mclient} --help
@end example
@end ifset

@subsubsection Troubleshooting
Bootstrap fails if any of the requisite programs can not be found or
is an incompatible version.
Bootstrap adds files to the source directory, so it must have write
permissions.

During bootstrap, warnings like
@example
	Remember to add `AC_PROG_LIBTOOL' to `configure.in'.
	You should add the contents of `/usr/share/aclocal/libtool.m4' to `aclocal.m4'.
	configure.in:37: warning: do not use m4_patsubst: use patsubst or m4_bpatsubst
	configure.in:104: warning: AC_PROG_LEX invoked multiple times
	configure.in:334: warning: do not use m4_regexp: use regexp or m4_bregexp
	automake/aclocal 1.6.3 is older than 1.7.
	Patching aclocal.m4 for Intel compiler on Linux (icc/ecc).
	patching file aclocal.m4
	Hunk #1 FAILED at 2542.
	1 out of 1 hunk FAILED -- saving rejects to file aclocal.m4.rej
	patching file aclocal.m4
	Hunk #1 FAILED at 1184.
	Hunk #2 FAILED at 2444.
	Hunk #3 FAILED at 2464.
	3 out of 3 hunks FAILED -- saving rejects to file aclocal.m4.rej
@end example
might occur.
For some technical reasons, it's hard to completely avoid them. However,
it is usually save to ignore them and simply proceed with the usual 
compilation procedure. Only in case the subsequent configure or make
do fail, these warning might have to be taken more seriously; in any case, 
you should include the bootstrap output in whenever you report (see below)
compilation problems.


Configure will fail if certain essential programs cannot be found or
certain essential tasks (such as compiling a C program) can't be
executed.  The problem will usually be clear from the error message.


E.g., if configure cannot find package XYZ, it is either not installed
on your machine, or it is not installed in places that configure
usually searches (i.e., @code{/usr}, @code{/usr/local}).
In the first case, you need
to install package XYZ before you can configure, make, and install
MonetDB.  In the latter case, you need to tell configure via
"--with-XYZ=<DIR>" where to find packages XYZ on your machine. 
configure then looks for the respective header files in @code{<DIR>/include},
and for the respective libraries in @code{<DIR>/lib}.

@subsubsection Rescue
In case one of bootstrap, configure, or make fails --- especially 
after a cvs update, or after you changed some code yourself --- try 
the following steps (in this order; if you are using the 
pre-packaged source distribution, you can to skip steps 2 and 3):

In case you experience problems after a cvs update, first make 
sure that you used cvs update -dP (or have a line update -dP in 
your ~/.cvsrc); -d ensures that cvs checks out directories that 
have been added since your last cvs update; -P removes directories 
that have become empty, because all their file have been removed 
from the cvs repository. In case you did not use 
cvs update -dP, re-run cvs update -dP, and remember to always 
use cvs update -dP from now on (or simply add a 
line update -dP to your ~/.cvsrc)!

@enumerate
@item
In case only make fails, you can try running:
@example
make clean
@end example
in your build directory and proceed with step 5; however, if make then still fails, you have to re-start with step 1.

@item
Clean up your whole build directory (i.e., the one where you ran configure and make) by going there and running:
@example
make maintainer-clean
@end example
In case your build directory is different from your source directory, you are advised to remove the whole build directory.

@item 
Go to the top-level source directory and run:
@example
./de-bootstrap
@end example
and type y when asked whether to remove the listed files. This will remove all the files that were created during bootstrap.

@item
In the top-level source directory, re-run:
@example
./bootstrap
@end example

@item
In the build-directory, re-run:
@example
configure
@end example
as described above.
@item
In the build-directory, re-run:
@example
make
make install
@end example

@end enumerate
If this still does not help, please contact us.
Bugs and other problems with compiling or running MonetDB should be
reported using the respective bug-tracking system at 
@url{https://sourceforge.net/tracker/?group_id=56967&atid=482468,
SourceForge} (preferred) or emailed
to @url{mailto:monet@@cwi.nl,monet@@cwi.nl}.  
Please make sure that you give a @emph{detailed} description.

