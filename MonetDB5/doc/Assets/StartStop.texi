@section Start and Stop the Server
Starting and stopping the server under Windows doesn't need an
extensive description. Just locate the server in the
program list and start it. 
After the server has been started, you can activate a textual client interface.
Close the window of the server and/or client and it ceases to exist. 

Once downloaded and installed MonetDB on your Linux system,
it is adviceable to check its functionality with the following actions:
@example
> monetdb --help
@end example
The @code{monetdb} script is a wrapper around the MonetDB
server program @code{mserver5} and its protection program @code{mguardian}.
The call triggers @code{mserver5 --help} and responds
with something like:
@verbatim
Usage: monetdb [command] [options] [script]
Primary command:
    --status        Show the server status [default]
    --start         Server(s) is (are) started
    --stop          Server(s) is (are) stopped
    --databases     Show the known databases
    --checkpoint    Create the checkpoint for a database
    --recover       Restore a database to an earlier date
    --log           Show the server management log

Secondary options:
    --dbname=<database_name>
    --dbfarm=<directory>
    --dbinit=<stmt>           Server prepare statement
    --config=<config_file>    Configuration file
    --debug=<number>          Trace server actions[0]
    --daemon=yes|no           Run in background [no]
    --set <option>=<value>    Set environment value
    --ascii                   Use ascii dump for the database [default=no]
    --help                    This list of options
@end verbatim

An error messages typically indicate a wrongly configured $PATH variable, 
making the @code{monetdb} program
invisible to your shell. Retrace your installation steps.

An access mode violation indicates that either the directory path
to the location of the MonetDB data store does not exists, or the
user has lack of file system permissions to create new directories/files
in the location specified.

To start a server for a database simpy type
@example
> monetdb --start --dbname=voc
Do you want to create database 'voc' ? [yes/no]yes
Database xyz initialized
Starting database server 'voc'... ok
@end example
The question is asked only the first time you attempt
to access o the @code{voc} database.

It responds with a message that this action 
was successful, or an error message explains the problems encountered.
The server is run as a daemon process and you need a 
MonetDB client program to connect to it.
More details on the server configuration parameters are
given in @ref{Architecture overview}.

At any time you can inspect the status of the (running) servers
using the default command option @code{--status}.
@example
>monetdb --status
DBNAME  SERVER  GUARD   DELAY   STARTED
voc     21488   21502   12      Sun Dec 18 09:05:36 2005
@end example
It tells you when the server was started, the identity of the
process looking after it, and the delay between successive
checks.
A server can be put to sleep using the command
@code{monetdb --stop --dbname=<name>}.  
Ommission of a database name stops all running servers.
The actions of monetdb are logged for post analysis, which can
be inspected with @code{monetdb --log}

@node Database Configuration , Checkpoint and Recovery, Start and Stop the Server, Download and Installation
@subsection Database Configuration
The database environment is collected in a configuration file,
which is used by server-side applications, such as @code{monetb},
@code{mserver5}, and @code{mguardian}.
A default version is installed in the database store upon its creation
using the command @code{monetdb}.
Below we illustrate its most important components.
@itemize  @bullet
@item prefix=/ufs/myhome/monet5/Linux
@item exec_prefix=$@verb{ { }prefix@verb{ } }
@item dbfarm=$@verb{ { }prefix@verb{ } }/var/MonetDB5/dbfarm	
@item monet_mod_path=$@verb{ { }exec_prefix@verb{ } }/lib/MonetDB5
@item checkpoint_dir=$@verb{ { }prefix@verb{ } }/var/MonetDB5/chkpnt
@item dbname=demo
@item version=5.0
@item welcome=yes
@item embedded=no
@item gdk_debug=0	# to control level of debugging
@end itemize

The header consist of system wide information.
The @code{prefix} and @code{exec_prefix} describe the location where
MonetDB has been installed. @code{monet_mod_path} tells where to find
the libraries. These arguments are critical for a proper working server.

The remainder consists of arguments used by functional modules, or
related tools. Consult the documentation before changing them.
@itemize @bullet
@item delay=120		
@item mal_init=$@verb{ { }prefix@verb{ } }/lib/MonetDB5/mal_init.mal
@item mal_listing = 7    
@item sql_debug=0
@item sql_logdir=$@verb{ { }prefix@verb{ } }/var/MonetDB5/dblogs 
@item pf_httpd_port=8080
@item xquery_output=dm
@item xquery_cacheMB=100
@end itemize

