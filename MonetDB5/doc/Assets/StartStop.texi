@section Start and Stop the Server
Starting and stopping the server under Windows doesn't need an
extensive description. Just locate the server in the
program list and start it. 
After the server has been started, you can activate a textual client interface.
Close the window of the server and/or client and it ceases to exist. 

Once downloaded and installed MonetDB on your Linux system,
it is adviceable to check its functionality with the following actions:
@example
> monetdb --help
@end example
The @code{monetdb} script is a wrapper around the MonetDB
server program @code{mserver} and its protection program @code{mguardian}.
The call triggers @code{mserver --help} and responds
with something like:
@verbatim
Usage: monetdb [command] [options] [script]
Primary command:
    --status        Show the server status  [default]
    --start         Server(s) are started in the dbfarm
    --stop          Server(s) are gracefully stopped
    --databases     Show the known databases
    --log           Show the server management log

Secondary options:
    --dbname=<database_name>
    --dbfarm=<directory>
    --dbinit=<stmt>           Server prepare statement
    --config=<config_file>    Configuration file
    --debug=<number>          Trace server actions[0]
    --daemon=yes|no           Run in background [no]
    --set <option>=<value>    Set environment value
    --help                    This list of options
@end verbatim

An error messages typically indicate a wrongly configured $PATH variable, 
making the @code{monetdb} program
invisible to your shell. Retrace your installation steps.

An access mode violation indicates that either the directory path
to the location of the MonetDB data store does not exists, or the
user has lack of file system permissions to create new directories/files
in the location specified.

To start a server for a database simpy type
@example
> monetdb --start --dbname=voc
@end example
The first time this command is given, it asks you if you
want to create the @code{voc} database and what listeners
to be activated upon restart. Answers those questions with "yes".

It responds with a message that this action 
was successful, or an error message explains the problems encountered.
The server is run as a daemon process and you need a 
MonetDB client program to connect to it.
More details on the server configuration parameters are
given in @ref{Architecture overview}.

At any time you can inspect the status of the (running) servers
using the default command option @code{--status}.
@example
>monetdb --status
DBNAME  SERVER  GUARD   DELAY   STARTED
voc     21488   21502   12      Sun Dec 18 09:05:36 2005
@end example
It tells you when the server was started, the identity of the
process looking after it, and the delay between successive
checks.
A server can be put to sleep using the command
@code{monetdb --stop --dbname=<name>}.  
Ommission of a database name stops all running servers.
The actions of monetdb are logged for post analysis, which can
be inspected with @code{monetdb --log}

@node Database Configuration , Checkpoint and Recovery, Start and Stop the Server, Download and Installation
@subsection Database Configuration
The database environment is collected in a configuration file,
which is used by server-side applications, such as @code{monetb},
@code{mserver}, and @code{mguardian}.
A default version is installed in the database store upon its creation
using the command @code{monetdb}.
Below we illustrate its most important components.
@itemize 
@item prefix=/ufs/myhome/monet5/Linux
@item exec_prefix=$@verb{ { }prefix@verb{ } }
@item dbfarm=$@verb{ { }prefix@verb{ } }/var/MonetDB5/dbfarm	
@item monet_mod_path=$@verb{ { }exec_prefix@verb{ } }/lib/MonetDB5
@item dbname=demo
@item version=4.99.19
@item welcome=yes
@item embedded=no
@item gdk_debug=0	# to control level of debugging
@end itemize

The header consist of system wide information.
The @code{prefix} and @code{exec_prefix} describe the location where
MonetDB has been installed. @code{monet_mod_path} tells where to find
the libraries. These arguments are critical for a proper working server.

The remainder consists of arguments used by functional modules, or
related tools. Consult the documentation before changing them.
@multitable @columnfractions 0.2 0.7
@item delay=11		#waiting between pinging the server 
@item mal_init=$@verb{ { }prefix@verb{ } }/lib/MonetDB5/mal_init.mal
@item mal_debug = yes     @tab # debugging the MAL component
@item mal_details = 14    @tab # instruction listing details
@item mal_listing = 15    @tab # echoing the input
@item sql_prompt=sql>
@item sql_port=45123
@tab # default port to address an Mserver for an SQL session
@item sql_debug=0
@tab # The SQL debug level (should be disabled for normal use)
@item sql_logdir=$@verb{ { }prefix@verb{ } }/var/MonetDB5/dblogs 
@tab # Place to store SQL transaction logs
@item xquery_port=45789
@tab # default port to address an Mserver for an XQuery session
@item pf_httpd_port=8080
@tab default port to address the HTTP server for pathfinder
@item xquery_output=dm
@tab # output mode "dm" = pretty printed,
@item @tab            # "xml" = enforce XML with enclosing <XQueryResult> tags
@item xquery_cacheMB=100
@tab # limit the document cache on disk to 100MB
@end multitable

