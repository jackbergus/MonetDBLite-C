The table below summarizes the commentary lines encountered in
the system associated with a MAL kernel modules.

@multitable @columnfractions .33 .67 
@item
@item aggr.avg
@tab Grouped tail average on dbl
@item aggr.cardinality
@tab Return the cardinality of the BAT tail values.
@item aggr.count
@tab Grouped count
@item aggr.count_no_nil
@tab Return the number of elements currently 
	in a BAT ignoring BUNs with nil-tail
@item aggr.histogram
@tab Produce a BAT containing the histogram over the tail values.
@item aggr.max
@tab Grouped tail maximum
@item aggr.min
@tab Grouped tail minimum
@item aggr.product
@tab Product over grouped on dbl
@item aggr.size
@tab Grouped count of true values
@item aggr.sum
@tab Grouped tail sum on dbl
@item
@item alarm.alarm
@tab execute action in X secs
@item alarm.ctime
@tab current time as a string
@item alarm.epilogue
@tab Finalize alarm module
@item alarm.epoch
@tab current time as unix epoch
@item alarm.prelude
@tab Initialize alarm module
@item alarm.sleep
@tab sleep X secs
@item alarm.time
@tab time in millisecs
@item alarm.timers
@tab give a list of all active timers
@item alarm.usec
@tab return cpu microseconds info
@item
@item algebra.antijoin
@tab Returns the antijoin
@item algebra.bandjoin
@tab This is a join() for which the predicate is that two BUNs match 
		if the left-tail value is within the range [right-head - minus, 
		right-head + plus]. Works only for the builtin numerical types, 
		and their derivates.
@item algebra.between
@item algebra.betweenCO
@item algebra.betweenOC
@item algebra.betweenOO
@item algebra.copy
@tab Returns physical copy of a BAT.
@item algebra.crossproduct
@tab Returns the cross product
@item algebra.difference
@item algebra.exist
@tab Returns true when 'h,t' occurs as a bun in b.
@item algebra.fetch
@tab Returns a positional selection of b by the oid 
	head values of s
@item algebra.fetchjoin
@tab Hook directly into the fetch implementation of the join.
@item algebra.find
@tab Returns the tail value 't' for which some [h,t] BUN 
	exists in b.  If no such BUN exists, an error occurs.
@item algebra.fragment
@tab Select both on head and tail range.
@item algebra.groupby
@tab Produces a new BAT with groups identified by the head column. The result contains tail times the head value, ie the tail contains the result group sizes.
@item algebra.hashjoin
@tab Hook directly into the hash implementation of the join.
@item algebra.hashsplit
@tab Split a BAT on tail column according (hash-value MOD buckets). 
		Returns a recursive BAT, containing the fragments in the tail, 
		their bucket number in the head.
@item algebra.indexjoin
@tab Hook directly into the index implementation of the join.
@item algebra.intersect
@item algebra.join
@tab Returns all BUNs, consisting of a head-value from 'left' and 
		a tail-value from 'right' for which there are BUNs in 'left' 
		and 'right' with equal tail- resp. head-value (i.e. the join
	columns are projected out).
@item algebra.joinPath
@tab Evaluate a join path.
@item algebra.kdifference
@tab Returns the difference taken over only the *head* columns of two BATs. 
		Results in all BUNs of 'left' that are *not* in 'right'. 
		It does *not* do double-elimination over the 'left' BUNs. 
		If you want this, use:
	 'kdifference(left.kunique,right.kunique)' 
	or: 'kdifference(left,right).kunique'.
@item algebra.kintersect
@tab Returns the intersection taken over only the *head* columns of two BATs. 
	Results in all BUNs of 'left' that are also in 'right'. 
		Does *not* do double- elimination over the 'left' BUNs.
		If you want this, use: 'kintersect(kunique(left),kunique(right))' 
	or: 'kunique(kintersect(left,right))'.
@item algebra.kunion
@tab Returns the union of two BATs; looking at head-columns only. 
		Results in all BUNs of 'left' that are  not in 'right', plus 
	all BUNs of 'right'.  *no* double-elimination is done. 
		If you want this, do:
	'kunion(left.kunique,right.kunique)' 
	or: 'sunion(left,right).kunique'.
@item algebra.kunique
@tab Select unique tuples from the input BAT.  Double elimination is 
		done only looking at the head column. The result is a BAT with
		property hkeyed() == true.
@item algebra.leftfetchjoin
@tab Hook directly into the left fetch join implementation.
@item algebra.like
@tab Selects all elements that have 'substr' as in the tail.
@item algebra.markH
@tab Produces a new BAT with fresh unique dense sequense of OIDs in 
		the head that starts at base (i.e. [base,..base+b.count()-1] ).
@item algebra.markT
@tab Produces a BAT with fresh unique OIDs in the tail starting at 0@@0.
@item algebra.merge
@tab Merge head and tail into a single value
@item algebra.mergejoin
@tab Hook directly into the merge implementation of the join.
@item algebra.number
@tab Produces a new BAT with identical head column, and consecutively 
		increasing integers (start at 0) in the tail column.
@item algebra.outerjoin
@tab Returns all the result of a join, plus the BUNS formed NIL in 
		the tail and the head-values of 'outer' whose tail-value does 
		not match an head-value in 'inner'.
@item algebra.position
@tab Returns the position of the value pair It returns an 
	error if 'val' does not exist.
@item algebra.project
@tab Fill the tail column with a constant.
@item algebra.revert
@tab Returns a BAT copy with buns in reverse order
@item algebra.sample
@tab Produce a random selection of size 'num' from the input BAT.
@item algebra.sdifference
@tab Returns the difference taken over *both* columns of two BATs. 
		Results in all BUNs of 'left' that are *not* in 'right'. 
		Does *not* do double-elimination over the 'left' BUNs. 
		If you want this, use:
		 'sdifference(left.sunique,right.sunique)' 
	or: 'sdifference(left,right).sunique'.
@item algebra.select
@tab Select all BUNs of a BAT with a certain 
	tail value. Selection on NIL is also 
	possible (it should be properly casted, 
	e.g.:int(nil)).
@item algebra.selectH
@item algebra.semijoin
@tab Patch to enable semijoin over void/oid columns
@item algebra.sintersect
@tab Returns the intersection taken over *both* columns of two BATs. 
		Results in all BUNs of 'left' that are also in 'right'. Does *not* 
		do double-elimination over the 'left' BUNs, If you want this, use:
	 'sintersect(sunique(left),sunique(right))' 
	or: 'sunique(sintersect(left,right))'.
@item algebra.slice
@tab Return the slice with the BUNs at position x till y.
@item algebra.sort
@tab Returns a BAT copy sorted on the tail column.
@item algebra.sortHT
@tab Returns a lexicographically sorted copy on head,tail.
@item algebra.sortHead
@tab Returns a BAT copy sorted on the head column.
@item algebra.sortTH
@tab Returns a lexicographically sorted copy on tail,head.
@item algebra.split
@tab Split head into two values
@item algebra.sunion
@tab Returns the union of two BATs; looking at both columns of both BATs.
		Results in all BUNs of 'left' that are  not in 'right', plus all 
		BUNs of 'right'.  *no* double-elimination is done. 
		If you want this, do:
	 'sunion(left.sunique,right.sunique)' 
	or: 'sunion(left,right).sunique'.
@item algebra.sunique
@tab Select unique tuples from the input BAT. Double elimination is 
		done over BUNs as a whole (head and tail).  Result is a BAT 
	with real set() semantics.
@item algebra.thetajoin
@tab Theta join on for 'mode' in @verb{ { } LE, LT, EQ, GT, GE @verb{ } }.  JOIN_EQ is 
		just the same as join(). All other options do merge algorithms. 
		Either using the fact that they are ordered() already (left on tail, 
	right on head), or by using/creating binary search trees on the 
		join columns. 
@item algebra.topN
@tab Trim all but the top N tuples.
@item algebra.tunique
@tab Select unique tuples from the input BAT. Double elimination is 
		done over the BUNs tail. The result is a BAT with property
		tkeyd()== true
@item algebra.uhashsplit
@tab Same as hashsplit, but only collect the head values in the fragments
@item algebra.union
@item algebra.unique
@item algebra.uselect
@tab Value select, but returning only the 
	head values. SEE ALSO:select(bat,val)
@item
@item array.grid
@tab Fills an index BAT, (grpcount,grpsize,clustersize,offset)
and shift all elemenets with a factor s
@item array.print
@tab Prints an array, using 1 value bat and N aligned index bats
@item array.product
@tab Produce an array product
@item array.project
@tab Fill an array representation with constants 
@item
@item bat.append
@tab append the value u to i
@item bat.delete
@tab Delete from the first BAT all BUNs with a corresponding BUN 
        in the second.
@item bat.getAccess
@tab return the access mode attached to this BAT as a character.
@item bat.getAlpha
@tab Obtain the list of BUNs added
@item bat.getBatSize
@tab A version of BATsize that does not require loading the BAT.
@item bat.getCapacity
@tab Returns the current allocation size (in max number of elements) of a BAT.
@item bat.getDelta
@tab Obtain the list of BUNs deleted
@item bat.getHead
@tab return the BUN head value using the cursor.
@item bat.getHeadType
@tab Returns the type of the head column of a BAT, as an integer type number.
@item bat.getHeat
@tab Return the current BBP heat (LRU stamp)
@item bat.getName
@tab Gives back the logical name of a BAT.
@item bat.getRole
@tab Returns the rolename of the head column of a BAT.
@item bat.getSequenceBase
@tab Get the sequence base for the void column of a BAT.
@item bat.getTail
@tab return the BUN tail value using the cursor.
@item bat.getTailType
@tab Returns the type of the tail column of a BAT, as an integer type number.
@item bat.hasAppendMode
@tab return true if to this BAT is append only.
@item bat.hasMoreElements
@tab Produce the next bun for processing.
@item bat.hasReadMode
@tab return true if to this BAT is read only.
@item bat.hasWriteMode
@tab return true if to this BAT is read and write.
@item bat.info
@tab Produce a BAT containing info about a BAT in [attribute,value] format. 
        It contains all properties of the BAT record. See the BAT documentation 
        in GDK for more information.
@item bat.inplace
@tab inplace replace values on the given locations
@item bat.insert
@tab Insert one BUN[h,t] in a BAT.
@item bat.isCached
@tab Bat is stored in main memory.
@item bat.isPersistent
@item bat.isSorted
@tab Returns whether a BAT is ordered on head or not.
@item bat.isSortedReverse
@tab Returns whether a BAT is ordered on head or not.
@item bat.isSynced
@tab Tests whether two BATs are synced or not. 
@item bat.isTransient
@item bat.isaKey
@tab return whether the head column of a BAT is unique (key).
@item bat.isaSet
@tab return whether the BAT mode is set to unique.
@item bat.load
@tab Load a particular BAT from disk
@item bat.mirror
@tab Returns the head-mirror image of a BAT (two head columns).
@item bat.new
@tab Localize a bat by name and produce a variant
@item bat.newIterator
@tab Process the buns one by one extracted from a void table.
@item bat.pack
@tab Pack a pair into a BAT
@item bat.replace
@tab Replace the tail value of one BUN that has some head value.
@item bat.reverse
@tab Returns the reverse view of a BAT (head is tail and tail is head).
        BEWARE  no copying is involved; input and output refer to the 
        same object!
@item bat.revert
@tab Puts all BUNs in a BAT in reverse order.  (Belongs to the 
        BAT sequence module)
@item bat.save
@tab Save a BAT to storage, if it was loaded and dirty.  
        Returns whether IO was necessary.  Please realize that 
	calling this function violates the atomic commit protocol!!
@item bat.setAccess
@tab Try to change the update access priviliges 
	to this BAT. Mode:
	 r[ead-only]      - allow only read access.
	 a[append-only]   - allow reads and update.
	 w[riteable]      - allow all operations.
	BATs are updatable by default. On making a BAT read-only, 
        all subsequent updates fail with an error message.Returns 
        the BAT itself.
@item bat.setAppendMode
@tab Change access privilige of BAT to append only
@item bat.setCold
@tab Makes a BAT very cold for the BBP. The chance of being choses 
        for swapout is big, afterwards.
@item bat.setColumn
@tab Give both columns of a BAT a new name.
@item bat.setGarbage
@tab Designate a BAT as garbage
@item bat.setHash
@item bat.setHot
@tab Makes a BAT very hot for the BBP. The chance of being chosen for 
        swapout is small, afterwards.
@item bat.setKey
@tab Sets the 'key' property of the head column to 'mode'. In 'key' mode, 
        the kernel will silently block insertions that cause a duplicate 
        entries in the head column. KNOWN BUG:when 'key' is set to TRUE, this 
	function does not automatically eliminate duplicates. 
        Use b := b.kunique;
@item bat.setMemoryAdvise
@tab alias for madvise(b,mode,mode,mode, mode,mode)
@item bat.setMemoryMap
@tab Alias for mmap(b,mode,mode,mode, mode,mode)
@item bat.setName
@tab Give a logical name to a BAT. 
@item bat.setPersistent
@tab Make the BAT persistent.  Returns boolean which indicates 
        if the BAT administration has indeed changed.
@item bat.setReadMode
@tab Change access privilige of BAT to read only
@item bat.setRole
@tab Give a logical name to the columns of a BAT.
@item bat.setSequenceBase
@tab Set the sequence base for the void column of a BAT.
@item bat.setSet
@tab Sets the 'set' property on this BAT to 'mode'. In 'set' mode, 
        the kernel will silently block insertions that cause a duplicate 
        BUN [head,tail] entries in the BAT.  KNOWN BUG:when 'set' is set 
        to TRUE, this function does not automatically eliminate duplicates. 
        Use b := b.sunique; Returns the BAT itself.
@item bat.setSorted
@tab Assure BAT is ordered on the head.
@item bat.setTransient
@tab Make the BAT transient.  Returns 
	boolean which indicates if the
BAT administration has indeed changed.
@item bat.setWriteMode
@tab Change access privilige of BAT to read and write
@item bat.unload
@tab Swapout a BAT to disk. Transient BATs can also be swapped out.     
        Returns whether the unload indeed happened. 
@item bat.unpack
@tab Extract the first tuple from a bat
@item
@item batcalc.!=
@item batcalc.%
@tab Binary BAT calculator function with new BAT result
@item batcalc.*
@tab Binary BAT calculator function with new BAT result
@item batcalc.+
@tab Binary BAT calculator function with new BAT result
@item batcalc.++
@tab Unary minus over the tail of the bat
@item batcalc.-
@tab Unary minus over the tail of the bat
@item batcalc.--
@tab Unary minus over the tail of the bat
@item batcalc./
@tab Binary BAT calculator function with new BAT result
@item batcalc.<
@item batcalc.<=
@item batcalc.==
@item batcalc.>
@item batcalc.>=
@item batcalc.and
@item batcalc.bit
@item batcalc.dbl
@tab Coerce an dbl tail to a bat with dbl tail.
@item batcalc.flt
@tab Coerce an dbl tail to a bat with flt tail.
@item batcalc.ifthen
@tab Ifthen operation to assemble a conditional result 
@item batcalc.ifthenelse
@tab Ifthen operation to assemble a conditional result 
@item batcalc.init
@tab Initialize a BAT with a tail constant
@item batcalc.int
@tab Coerce an oid tail to a bat with int tail.
@item batcalc.lng
@tab Coerce an oid tail to a bat with lng tail.
@item batcalc.not
@tab Return a BAT with the negated tail
@item batcalc.oid
@tab Materialize the oid into an oid
@item batcalc.or
@item batcalc.project
@tab Fill the tail with a constant, e.g. [0~b]
@item batcalc.sht
@tab Coerce an oid tail to a bat with sht tail.
@item batcalc.str
@item batcalc.xor
@tab Binary BAT calculator function with new BAT result
@item
@item batcolor.blue
@tab Extracts blue component from a color atom
@item batcolor.cb
@tab Extracts Cb(blue color) component from a color atom
@item batcolor.color
@tab Converts string to color
@item batcolor.cr
@tab Extracts Cr(red color) component from a color atom
@item batcolor.green
@tab Extracts green component from a color atom
@item batcolor.hsv
@tab Converts an HSV triplets to a color atom
@item batcolor.hue
@tab Extracts hue component from a color atom
@item batcolor.luminance
@tab Extracts Y(luminance) component from a color atom
@item batcolor.red
@tab Extracts red component from a color atom
@item batcolor.rgb
@tab Converts an RGB triplets to a color atom
@item batcolor.saturation
@tab Extracts saturation component from a color atom
@item batcolor.str
@tab Identity mapping for string bats
@item batcolor.value
@tab Extracts value component from a color atom
@item
@item batmath.acos
@item batmath.asin
@item batmath.atan
@item batmath.atan2
@item batmath.ceil
@item batmath.cos
@item batmath.cosh
@item batmath.exp
@item batmath.fabs
@item batmath.floor
@item batmath.fmod
@item batmath.log
@item batmath.log10
@item batmath.pow
@item batmath.sin
@item batmath.sinh
@item batmath.sqrt
@item batmath.tan
@item batmath.tanh
@item
@item batstr.!=
@tab Equate a bat of strings against a singleton
@item batstr.+
@tab Concatenate two strings.
@item batstr.==
@tab Equate a bat of strings against a singleton
@item batstr.bytes
@tab Return the string length in bytes.
@item batstr.chrAt
@tab String array lookup operation.
@item batstr.endsWith
@tab Suffix check.
@item batstr.length
@tab Return the length of a string.
@item batstr.like
@tab Perform SQL like operation against a string bat
@item batstr.ltrim
@tab Strip whitespaces from start of a string.
@item batstr.match
@tab POSIX pattern matching against a string BAT
@item batstr.r_search
@tab Reverse search for a substring. Returns position, -1 if not found.
@item batstr.rtrim
@tab Strip whitespaces from end of a string.
@item batstr.search
@tab Search for a substring. Returns position, -1 if not found.
@item batstr.startsWith
@tab Prefix check.
@item batstr.str
@tab Identity mapping for string bats
@item batstr.string
@tab Return substring s[offset..offset+count] of a string s[0..n]
@item batstr.substitute
@tab Substitute first occurrence of 'src' by
	'dst'.  Iff repeated = true this is
	repeated while 'src' can be found in the
	result string. In order to prevent
	recursion and result strings of unlimited
	size, repeating is only done iff src is
	not a substring of dst.
@item batstr.toLower
@tab Convert a string to lower case.
@item batstr.toUpper
@tab Convert a string to upper case.
@item batstr.trim
@tab Strip whitespaces around a string.
@item batstr.unicodeAt
@tab get a unicode character (as an int) from a string position.
@item
@item bstream.create
@tab create a buffered stream
@item bstream.destroy
@tab destroy bstream
@item bstream.read
@tab read at least size bytes into the buffer of s
@item
@item calc.!=
@item calc.%
@item calc.*
@item calc.+
@tab Concatenate two strings
@item calc.-
@tab negative value
@item calc./
@item calc.<
@item calc.<<
@item calc.<=
@item calc.==
@item calc.>
@item calc.>=
@item calc.>>
@item calc.abs
@tab absolute value
@item calc.and
@item calc.bat
@item calc.between
@item calc.bit
@tab coercion dbl to bit
@item calc.chr
@tab coercion lng to chr
@item calc.dbl
@tab coercion lng to dbl
@item calc.flt
@tab coercion lng to flt
@item calc.getBAT
@tab Coerce bat to BAT identifier
@item calc.getBATidentifier
@tab Coerce bat to BAT identifier
@item calc.ifthenelse
@item calc.int
@tab coercion dbl to int
@item calc.inv
@tab inverse value (1/x)
@item calc.isnil
@tab is a value nil?
@item calc.isnotnil
@tab is a value not equal to nil?
@item calc.length
@item calc.lng
@tab coercion dbl to lng
@item calc.max
@item calc.min
@item calc.newoid
@tab Reserves a range of consecutive unique OIDs; returns the lowest 
		in range.  equivalent to newoid(0,incr)
@item calc.not
@item calc.oid
@tab coercion int to oid
@item calc.or
@item calc.ptr
@tab coercion lng to ptr
@item calc.setoid
@tab Equivalent to setoid(1:oid).
@item calc.sht
@tab coercion dbl to sht
@item calc.str
@tab coercion dbl to str
@item calc.void
@item calc.xor
@item
@item color.blue
@tab Extracts blue component from a color atom
@item color.cb
@tab Extracts Cb(blue color) component from a color atom
@item color.color
@tab Converts string to color
@item color.cr
@tab Extracts Cr(red color) component from a color atom
@item color.green
@tab Extracts green component from a color atom
@item color.hsv
@tab Converts an HSV triplets to a color atom
@item color.hue
@tab Extracts hue component from a color atom
@item color.luminance
@tab Extracts Y(luminance) component from a color atom
@item color.print
@item color.printf
@item color.red
@tab Extracts red component from a color atom
@item color.rgb
@tab Converts an RGB triplets to a color atom
@item color.saturation
@tab Extracts saturation component from a color atom
@item color.str
@tab Converts color to string 
@item color.value
@tab Extracts value component from a color atom
@item color.ycc
@tab Converts an YCC triplets to a color atom
@item
@item date.!=
@tab Equality of two dates
@item date.<
@tab Equality of two dates
@item date.<=
@tab Equality of two dates
@item date.=
@tab Equality of two dates
@item date.>
@tab Equality of two dates
@item date.>=
@tab Equality of two dates
@item date.date
@tab Noop routine.
@item date.isnil
@tab Nil test for date value
@item
@item daytime.!=
@tab Equality of two daytimes
@item daytime.<
@tab Equality of two daytimes
@item daytime.<=
@tab Equality of two daytimes
@item daytime.=
@tab Equality of two daytimes
@item daytime.>
@tab Equality of two daytimes
@item daytime.>=
@tab Equality of two daytimes
@item daytime.isnil
@tab Nil test for daytime value
@item
@item group.avg
@tab grouped tail average
@item group.count
@tab Grouped count
@item group.derive
@tab Cross tabulation group extension step.  Returned head values are 
		identical as in 'ct'. Tail values are from the same domain and 
		indicate further refinement of the groups in 'ct', taking into 
		account also the tail-values in 'attr'.
@item group.max
@tab Select the minimum element of each group
@item group.min
@tab Select the minimum element of each group
@item group.new
@tab Cross tabulation group initialization like GRPgroup, but with 
		user provided #bits in hashmask and #distinct values in range.
@item group.prelude
@item group.refine
@tab refine the ordering of a tail-ordered BAT by sub-ordering on the 
		values of a second bat 'a' (where the heads of a and b match 1-1).
		The effect of this is similar to (hash-based) GRPderive, with the 
		distinction that the group ids respect the ordering of the group 
		values.
@item group.refine_reverse
@tab refine the ordering of a tail-ordered BAT by sub-ordering on the 
		values of a second bat 'a' (where the heads of a and b match 1-1).
		The effect of this is similar to (hash-based) GRPderive, with the 
		distinction that the group ids respect the ordering of the group 
		values.
@item group.size
@tab Grouped count of true values
@item group.sum
@tab Tail sum of groups of a sliding window of fixed size
@item
@item inet.!=
@tab Inequality of two inets
@item inet.<
@tab Whether v is less than w
@item inet.<<
@tab Whether v is contained within w
@item inet.<<=
@tab Whether v is contained within or is equal to w
@item inet.<=
@tab Whether v is less than or equal to w
@item inet.=
@tab Equality of two inets
@item inet.>
@tab Whether v is greater than w
@item inet.>=
@tab Whether v is equal to or greater than w
@item inet.>>
@tab Whether v contains w
@item inet.>>=
@tab Whether v contains or is equal to w
@item inet.abbrev
@tab Abbreviated display format as text
@item inet.broadcast
@tab Returns the broadcast address for network
@item inet.host
@tab Extract IP address as text
@item inet.hostmask
@tab Construct host mask for network
@item inet.isnil
@tab Nil test for inet value
@item inet.masklen
@tab Extract netmask length
@item inet.netmask
@tab Construct netmask for network
@item inet.network
@tab Extract network part of address
@item inet.new
@tab Create an inet from a string literal
@item inet.setmasklen
@tab Set netmask length for inet value
@item inet.text
@tab Extract IP address and netmask length as text
@item
@item lock.create
@tab Create an unset lock
@item lock.destroy
@tab Destroy a lock
@item lock.set
@tab Try to set a lock. If set, block till it is freed
@item lock.tostr
@tab Overloaded atom function
@item lock.try
@tab Try a lock. If free set it, if not return EBUSY
@item lock.unset
@tab Unset a lock
@item
@item mkey.bulk_rotate_xor_hash
@tab pre:  h and b should be synced on head
         post: [:xor=]([:rotate=](h, nbits), [hash](b))
@item mkey.hash
@tab compute a hash int number from any value
@item mkey.rotate
@tab left-rotate an int by nbits
@item
@item mmath.acos
@tab The acos(x) function calculates the arc cosine of x, that is the 
	value whose cosine is x. The value is returned in radians and is 
	mathematically defined to be between 0 and PI (inclusive).
@item mmath.asin
@tab The asin(x) function calculates the arc sine of x, that is the value 
	whose sine is x. The value is returned in radians and is mathematically 
	defined to be between -PI/20 and -PI/2 (inclusive).
@item mmath.atan
@tab The atan(x) function calculates the arc tangent of x, that is the value 
	whose tangent is x. The value is returned in radians and is mathematically 
	defined to be between -PI/2 and PI/2 (inclusive).
@item mmath.atan2
@tab The atan2(x,y) function calculates the arc tangent of the two 
        variables x and y.  It is similar to calculating the arc
	tangent of y / x, except that the signs of both arguments are 
        used to determine the quadrant of the result.  The value is 
	returned in radians and is mathematically defined to be between 
        -PI/2 and PI/2 (inclusive).
@item mmath.ceil
@tab The ceil(x) function rounds x upwards to the nearest integer.
@item mmath.cos
@tab The cos(x) function returns the cosine of x, where x is given in 
        radians. The return value is between -1 and 1.
@item mmath.cosh
@tab The cosh() function  returns the hyperbolic cosine of x, which is 
	defined mathematically as (exp(x) + exp(-x)) / 2.
@item mmath.exp
@tab The exp(x) function returns the value of e (the base of 
        natural logarithms) raised to the power of x.
@item mmath.fabs
@tab The fabs(x) function  returns  the  absolute value of the 
        floating-point number x.
@item mmath.finite
@tab The finite(x) function returns true if x is neither infinite 
        nor a 'not-a-number' (NaN) value, and false otherwise.
@item mmath.floor
@tab The floor(x) function rounds x downwards to the nearest integer.
@item mmath.fmod
@tab The fmod(x,y) function computes the remainder of dividing x by y.
	The return value is x - n * y, where n is the quotient of x / y,
	rounded towards zero to an integer.
@item mmath.isinf
@tab The isinf(x) function returns -1 if x represents negative 
        infinity, 1 if x represents positive infinity, and 0 otherwise.
@item mmath.isnan
@tab The isnan(x) function returns true if x is 'not-a-number' 
        (NaN), and false otherwise.
@item mmath.log
@tab The log(x) function returns the natural logarithm of x.
@item mmath.log10
@tab The log10(x) function returns the base-10 logarithm of x.
@item mmath.pow
@tab The pow(x,y) function  returns the value of x raised to the power of y.
@item mmath.rand
@tab return a random number
@item mmath.round
@tab The round(n, m) returns n rounded to m places to the right 
        of the decimal point; if m is omitted, to 0 places. m can be 
	negative to round off digits left of the decimal point. 
        m must be an integer.
@item mmath.sin
@tab The sin(x) function returns the cosine of x, where x is given in 
        radians. The return value is between -1 and 1.
@item mmath.sinh
@tab The sinh() function  returns  the  hyperbolic sine of x, which 
        is defined mathematically as (exp(x) - exp(-x)) / 2.
@item mmath.sqrt
@tab The sqrt(x) function returns the non-negative square root of x.
@item mmath.srand
@tab initialize the rand() function with a seed
@item mmath.tan
@tab The tan(x) function returns the tangent of x,
        where x is given in radians
@item mmath.tanh
@tab The tanh() function returns the hyperbolic tangent of x, which is 
	defined mathematically as sinh(x) / cosh(x).
@item
@item
@item mtime.add
@tab returns the timestamp that comes 'msecs' 
	(possibly negative) after 'value'.
@item mtime.adddays
@tab returns the date after a number 
	of days (possibly negative).
@item mtime.addmonths
@tab returns the date after a number of 
	months (possibly negative).
@item mtime.addyears
@tab returns the date after a number 
	of years (possibly negative).
@item mtime.compute
@tab compute the date from a rule in a given year
@item mtime.current_date
@item mtime.current_time
@item mtime.current_timestamp
@item mtime.date
@tab extracts date from timestamp in a 
	specific timezone.
@item mtime.date_add_month_interval
@tab Add months to a date
@item mtime.date_add_sec_interval
@tab Add seconds to a date
@item mtime.date_sub_sec_interval
@tab Subtract seconds from a date
@item mtime.day
@tab extract day from rule.
@item mtime.dayname
@tab Returns day name from a number 
	between [1-7], str(nil) otherwise.
@item mtime.daynum
@tab Returns number of day [1-7] from a 
	string or nil if does not match any.
@item mtime.dayofweek
@tab Returns the current day of the week 
	where 1=sunday, .., 7=saturday
@item mtime.dayofyear
@tab Returns N where d is the Nth day 
	of the year (january 1 returns 1)
@item mtime.daytime
@tab default time with zeroed components
@item mtime.diff
@tab returns the number of milliseconds 
	between 'val1' and 'val2'.
@item mtime.dst
@tab return whether DST holds in the 
	timezone at a certain point of time.
@item mtime.end_dst
@tab extract rule that determines 
	end of DST from timezone.
@item mtime.epilogue
@item mtime.hours
@tab extracts hour from daytime
@item mtime.local_timezone
@tab get the local timezone in seconds
@item mtime.milliseconds
@tab extracts milliseconds from daytime
@item mtime.minutes
@tab extract minutes from rule.
@item mtime.month
@tab extract month from rule.
@item mtime.monthname
@tab Returns month name from a number 
	between [1-12], str(nil) otherwise.
@item mtime.monthnum
@tab Returns month number [1-12] from a string
	 or nil if does not match any.
@item mtime.msec
@tab get time of day in msec since 1-1-1970.
@item mtime.msecs
@tab convert date components to milliseconds
@item mtime.olddate
@tab create a date from the old instant 
	format.
@item mtime.oldduration
@tab parse the old duration format and 
	return an (estimated) number of days.
@item mtime.prelude
@item mtime.rule
@tab create a DST start/end date rule.
@item mtime.seconds
@tab extracts seconds from daytime
@item mtime.setTimezone
@tab Test and set the timezone.
@item mtime.start_dst
@tab extract rule that determines 
	start of DST from timezone.
@item mtime.time_add_sec_interval
@tab Add seconds to a time
@item mtime.time_sub_sec_interval
@tab Subtract seconds from a time
@item mtime.time_synonyms
@tab Allow synonyms for the parse format of 
	date/timestamp.
@item mtime.timestamp
@tab creates a timestamp from (d,dt) parameters (in the local timezone).
@item mtime.timestamp_add_month_interval
@tab Add months to a timestamp
@item mtime.timestamp_add_sec_interval
@item mtime.timestamp_sub_month_interval
@tab Subtract months from a timestamp
@item mtime.timestamp_sub_sec_interval
@item mtime.timezone
@tab create a timezone as an hour difference 
	from GMT and a DST.
@item mtime.timezone_local
@tab get the local timezone; which is used for printing timestamps
@item mtime.weekday
@tab extract weekday from rule.
@item mtime.weekofyear
@tab Returns the week number in the year.
@item mtime.year
@tab extracts year from date (nonzero 
	value between -5867411 and +5867411).
@item
@item optimizer.accumulators
@tab Replace calculations with accumulator model
@item optimizer.aliasRemoval
@tab Alias removal optimizer
@item optimizer.clrDebug
@item optimizer.coercions
@tab Handle simple type coercions
@item optimizer.commonExpressionRemoval
@tab Common subexpression optimizer
@item optimizer.crack
@tab Replace algebra select with crackers select
@item optimizer.deadCodeRemoval
@tab Dead code optimizer
@item optimizer.dumpQEP
@tab Produce an indented tree visualisation
@item optimizer.emptySet
@tab Move constant expressions out of the blocks
@item optimizer.factorize
@tab Turn function into a factory
@item optimizer.garbageCollector
@tab Garbage collector optimizer
@item optimizer.generators
@tab Resolve the multi-table definitions
@item optimizer.heuristics
@tab Handle simple replacements
@item optimizer.macroContraction
@tab Inliner of a specific function
@item optimizer.macroExpansion
@tab Inline a specific function
@item optimizer.multiplex
@tab Compiler for multiplexed instructions.
@item optimizer.multitable
@tab Resolve the multi-table definitions
@item optimizer.optimize
@tab Optimize a specific operation
@item optimizer.partitionedQuery
@tab Experiment with partitioned databases
@item optimizer.peephole
@tab Perform local rewrites
@item optimizer.prelude
@tab Initialize the optimizer
@item optimizer.reduce
@tab Reduce the stack space claims
@item optimizer.remoteQueries
@tab Resolve the multi-table definitions
@item optimizer.setDebug
@item optimizer.showFlowGraph
@tab Dump the data flow of the function 
	M.F in a format recognizable by the 
	command 'dot' on the file s
@item optimizer.showPlan
@tab Illustrate the plan derived so far
@item optimizer.singleton
@tab Perform singleton optimization
@item optimizer.strengthReduction
@tab Move constant expressions out of the loop
@item
@item pqueue.dequeue_max
@tab Removes top element of the max-pqueue and updates it
@item pqueue.dequeue_min
@tab Removes top element of the min-pqueue and updates it
@item pqueue.enqueue_max
@tab Inserts element (oid,any) in the max-pqueue
@item pqueue.enqueue_min
@tab Inserts element (oid,any) in the min-pqueue
@item pqueue.init
@tab Creates an empty pqueue of bat a's tailtype with maximum size maxsize
@item pqueue.topn_max
@tab Return the topn elements of the bat t using a max-pqueue
@item pqueue.topn_min
@tab Return the topn elements of the bat t using a min-pqueue
@item pqueue.topreplace_max
@tab Replaces top element with input and updates max-pqueue
@item pqueue.topreplace_min
@tab Replaces top element with input and updates min-pqueue
@item
@item
@item sema.create
@tab Create an unset sema, with an initial value
@item sema.destroy
@tab Destroy a semaphore
@item sema.down
@tab Decrement the semaphpore if >0; else block
@item sema.up
@tab Increment the semaphore
@item
@item
@item status.batStatistics
@tab Show distribution of bats by kind
@item status.cpuStatistics
@tab Global cpu usage information
@item status.getDatabases
@tab Produce a list of known databases in the current dbfarm
@item status.getPorts
@tab Produce a list of default ports for a specific language
@item status.getThreads
@tab Produce overview of active threads
@item status.ioStatistics
@tab Global IO activity information
@item status.memStatistics
@tab Global memory usage information
@item status.memUsage
@tab Get a split-up of how much memory blocks are in use.
@item status.mem_cursize
@tab the amount of physical swapspace in KB that is currently in use
@item status.mem_maxsize
@tab set the maximum usable amount of physical swapspace in KB
@item status.vmStatistics
@tab Get a split-up of how much virtual memory blocks are in use.
@item status.vm_cursize
@tab the amount of logical VM space in KB that is currently in use
@item status.vm_maxsize
@tab set the maximum usable amount of physical swapspace in KB
@item
@item str.+
@tab Concatenate two strings.
@item str.STRepilogue
@item str.STRprelude
@item str.ascii
@tab Return unicode of head of string
@item str.chrAt
@tab String array lookup operation.
@item str.codeset
@tab Return the locale's codeset
@item str.endsWith
@tab Suffix check.
@item str.iconv
@tab String codeset conversion
@item str.insert
@tab Insert a string into another
@item str.length
@tab Return the length of a string.
@item str.like
@tab SQL pattern match function
@item str.locate
@tab Locate the start position of a string
@item str.ltrim
@tab Strip whitespaces from start of a string.
@item str.nbytes
@tab Return the string length in bytes.
@item str.prefix
@tab Extract the prefix of a given length
@item str.r_search
@tab Reverse search for a char. Returns 
	 position, -1 if not found.
@item str.repeat
@item str.replace
@tab Insert a string into another
@item str.rtrim
@tab Strip whitespaces from end of a string.
@item str.search
@tab Search for a character. Returns 
	 position, -1 if not found.
@item str.space
@item str.startsWith
@tab Prefix check.
@item str.str
@tab Noop routine.
@item str.string
@tab Return substring s[offset..offset+count] of a string s[0..n]
@item str.stringlength
@tab Return the length of a right trimed string (SQL semantics).
@item str.substitute
@tab Substitute first occurrence of 'src' by 
	'dst'.  Iff repeated = true this is 
	repeated while 'src' can be found in the 
	result string. In order to prevent 
	recursion and result strings of unlimited 
	size, repeating is only done iff src is 
	not a substring of dst.
@item str.substring
@tab Extract a substring from str starting at start, for length len
@item str.suffix
@tab Extract the suffix of a given length
@item str.toLower
@tab Convert a string to lower case.
@item str.toUpper
@tab Convert a string to upper case.
@item str.trim
@tab Strip whitespaces around a string.
@item str.unicode
@tab convert a unicode to a character.
@item str.unicodeAt
@tab get a unicode character 
	(as an int) from a string position.
@item
@item streams.blocked
@tab open a block based stream
@item streams.close
@tab close and destroy the stream s
@item streams.flush
@tab flush the stream
@item streams.openRead
@tab convert an ascii stream to binary
@item streams.openReadBytes
@tab open a file stream for reading
@item streams.openWrite
@tab convert an ascii stream to binary
@item streams.openWriteBytes
@tab open a file stream for writing
@item streams.readInt
@tab read integer data from the stream
@item streams.readStr
@tab read string data from the stream
@item streams.socketRead
@tab open ascii socket stream for reading
@item streams.socketReadBytes
@tab open a socket stream for reading
@item streams.socketWrite
@tab open ascii socket stream for writing
@item streams.socketWriteBytes
@tab open a socket stream for writing
@item streams.writeInt
@tab write data on the stream
@item streams.writeStr
@tab write data on the stream
@item
@item timestamp.!=
@tab Equality of two timestamps
@item timestamp.<
@tab Equality of two timestamps
@item timestamp.<=
@tab Equality of two timestamps
@item timestamp.=
@tab Equality of two timestamps
@item timestamp.>
@tab Equality of two timestamps
@item timestamp.>=
@tab Equality of two timestamps
@item timestamp.epoch
@tab unix-time (epoch) support: seconds since epoch
@item timestamp.isnil
@tab Nil test for timestamp value
@item timestamp.unix_epoch
@tab The Unix epoch time (00:00:00 UTC on January 1, 1970)
@item
@item timezone.str
@item timezone.timestamp
@tab Utility function to create a timestamp from a number of seconds since the Unix epoch
@item
@item unix.getenv
@tab Get the environment variable string.
@item unix.setenv
@tab Set the environment variable string.
@item
@item url.getAnchor
@tab Extract the URL anchor (reference)
@item url.getBasename
@tab Extract the URL base file name
@item url.getContent
@tab Get the URL resource in a local file
@item url.getContext
@tab Get the path context of a URL 
@item url.getDirectory
@tab Extract directory names from the URL
@item url.getDomain
@tab Extract Internet domain from the URL
@item url.getExtension
@tab Extract the file extension of the URL
@item url.getFile
@tab Extract the last file name of the URL
@item url.getHost
@tab Extract the server name from the URL
@item url.getPort
@tab Extract the port id from the URL
@item url.getProtocol
@tab Extract the protocol from the URL
@item url.getQuery
@tab Extract the query string from the URL
@item url.getQueryArg
@tab Extract argument mappings from the URL
@item url.getRobotURL
@tab Extract the location of the robot 
	control file
@item url.getUser
@tab Extract the user identity from the URL
@item url.isaURL
@tab Check conformity of the URL syntax
@item url.new
@tab Construct URL from protocol, host,and file
@item url.url
@tab Create an URL from a string literal
@item
@item user.costModel
@tab Estimate the cost of a relational expression
@item user.joinselect
@tab Replace select with join select
@item user.main
@item
@item zrule.define
@tab Introduce a synomym timezone rule.
@end multitable
