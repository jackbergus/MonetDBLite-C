This section helps you to install MonetDB on a native Windows system (NT, 2000, XP).

@subsubsection Prerequisites
@itemize
@item @emph{CVS}
	You need to have a working CVS.  Several solutions are
	available. We use internally
	@url{http://www.wincvs.org/,WinCVS} and CVS under
	@url{http://www.cygwin.com/,Cygwin}.
	For general information about the SourceForge repository, see
	@url{http://sourceforge.net/docman/?group_id=1,docman}
	and look under the heading CVS Instructions.  Pointers to CVS
	implementations for Windows can be found at e.g.:
	@url{http://www.cvshome.org/cyclic/cvs/windows.html,http://www.cvshome.org/cyclic/cvs/windows.html}
	@url{http://www.wincvs.org/,http://www.wincvs.org/}
	@url{http://www.componentsoftware.com/products/CVS/,http://www.componentsoftware.com/products/CVS/}
@item @emph{Python}
	MonetDB uses Python (version 2.0.0 or better) during
	configuration of the software.  See
	@url{http://www.python.org/,python.org} for more information.
@item @emph{Pthreads}
@url{ftp://sources.redhat.com/pub/pthreads-win32/,Pthreads for Win32}
    should be installed to C:\Pthreads, otherwise you need
    to patch the "PTHREAD = C:\Pthreads" line in "NT\rules.msc"
    according to your setup. Newer versions of Pthreads seem to
    have the "include" &amp; "lib" directory not in C:\Pthreads, but in
    C:\Pthreads\prebuilt. In that case, you either have to move the
    "include" & "lib" directory from C:\Pthreads\prebuilt to
    C:\Pthreads, or set "PTHREAD = C:\Pthreads\prebuilt" in
    "NT\rules.msc".
@item @emph{UnxUtils}
@url{http://UnxUtils.sourceforge.net/,UnxUtils for Win32}
    must be installed in the root directory ("\", i.e.,
    without the default "\UnxUtils\" prefix) of the drive where you
    want to compile MonetDB.
    The same drive is required, as the UnxUtils do not know about
    drive letters, and hence absolute paths start with "\" (i.e.,
    without a leading "C:", "D:", ...).  The default "\UnxUtils\"
    prefix has to be omitted, as otherwise the UnxUtils' "bison"
    does not find its own "bison.simple" file, which it expects to
    be in "/usr/share/bison/bison.simple"
    (aka. "\usr\share\bison\bison.simple").
    Next to some tools used by Mtest.py for testing MonetDB (see
    below), UnxUtils provide the lexical analyzer generator "flex"
    and the parser generator "bison", which are required to compile
    MonetDB.
    Note: You have to install the UnxUtils using the original 
    @url{http://UnxUtils.sourceforge.net/UnxUtils.zip,.zip file}. 
    With the third-party executable 
    @url{http://www.braindonors.net/products/unxutils.asp,installer}, 
    choosing another than the default installation directory doesn't seem to
    work...
@item @emph{Microsoft Visual C++}
    You need Microsoft Visual C++ 5 or higher.
    Notice that if you do not own Microsoft Visual C++, you can
    still compile on Windows using the Cygnus Posix-emulation
    environment @url{http://www.cygwin.com,CYGWIN}
    In that case, you should follow the standard instructions in the file
    'HowToStart'. Alternatively, it might be possible to use the
    free @url{http://www.mingw.org/index.shtml,WIN32-GNU compilers}
    as a drop-in replacement for the Microsoft tools, but we have not
    tried this yet.

@item @emph{disk space}
	After downloading, MonetDB takes up about 40 MB of disk space;
	compilation adds another 70 MB.  Testing takes about 45 MB, and
	the installation about 20 MB (not including any databases).
@end itemize

@subsubsection Compiling
Open a Windows command shell or a UnxUtils shell and go to the
top-level directory of MonetDB.
Make sure that the proper environment for MSVC++ is set,
otherwise call the corresponding BAT file.
(see C:\Program Files\Microsoft Visual Studio\VC98\Bin\VCVARS32.BAT).
Make sure that Python, C:\Pthreads\lib (or wherever you installed
Pthreads), and \usr\local\wbin are in the PATH of your command shell.
When all prerequisites have been satisfied, you type
@example
cd NT
nmake
@end example
to compile the source code.  
If nmake went successfully, you can try
@example
nmake check
@end example

This will do a lot of tests, some are unfortunately still expected to
fail, but most should go successfully.  At the end of the output there
is a reference to an HTML file which is created by the test process and
shows the test results.  An explanation of the test results can be found
in XXX--to be filled in.
Testing takes about 46 MB of disk space in the build directory.

@subsubsection Testing the Installation
Make sure that <sourcedir>\NT\bin, <sourcedir>\NT\lib, and
<sourcedir>\NT\lib\MonetDB are in your PATH.
In the MonetDB top-level directory issue the command
@example
Mtest.py -r
@end example
(Make sure Mtest.py can be found, it should be in the bin directory that
was filled by the nmake install command.)

This should produce much the same output as nmake check above, but uses
the installed version of MonetDB.

@subsubsection Documentation

The documentation starts in <sourcedir>\NT\doc\MonetDB.html

NOTE: the current 'nmake install' does not yet generate this
documentation to do this manually, execute *after* successful
'make install'.  In the top-level directory of the MonetDB build tree, call
@example
nmake html
@end example
