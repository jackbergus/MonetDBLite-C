This section helps you to install and compile MonetDB on a Windows system 
using the Microsoft Visual compiler.

@subsubsection Prerequisites
@itemize
@item @emph{CVS}
	You need to have a working CVS.  Several solutions are
	available. We use internally
	@url{http://www.wincvs.org/,WinCVS} and CVS under
	@url{http://www.cygwin.com/,Cygwin}.
	For general information about the SourceForge repository, see
	@url{http://sourceforge.net/docman/?group_id=1,docman}
	and look under the heading CVS Instructions.  Pointers to CVS
	implementations for Windows can be found at e.g.:
	@url{http://www.cvshome.org/cyclic/cvs/windows.html,http://www.cvshome.org/cyclic/cvs/windows.html}
	@url{http://www.wincvs.org/,http://www.wincvs.org/}
	@url{http://www.componentsoftware.com/products/CVS/,http://www.componentsoftware.com/products/CVS/}
@item @emph{Python}
	MonetDB uses Python (version 2.0.0 or better) during
	configuration of the software.  See
	@url{http://www.python.org/,python.org} for more information.
@item @emph{Pthreads}
@url{ftp://sources.redhat.com/pub/pthreads-win32/,Pthreads for Win32}
    should be installed to C:\Pthreads, otherwise you need
    to patch the "PTHREAD = C:\Pthreads" line in "NT\rules.msc"
    according to your setup. Newer versions of Pthreads seem to
    have the "include" &amp; "lib" directory not in C:\Pthreads, but in
    C:\Pthreads\prebuilt. In that case, you either have to move the
    "include" & "lib" directory from C:\Pthreads\prebuilt to
    C:\Pthreads, or set "PTHREAD = C:\Pthreads\prebuilt" in
    "NT\rules.msc".
@item @emph{UnxUtils}
@url{http://UnxUtils.sourceforge.net/,UnxUtils for Win32}
    must be installed in the root directory ("\", i.e.,
    without the default "\UnxUtils\" prefix) of the drive where you
    want to compile MonetDB.
    The same drive is required, as the UnxUtils do not know about
    drive letters, and hence absolute paths start with "\" (i.e.,
    without a leading "C:", "D:", ...).  The default "\UnxUtils\"
    prefix has to be omitted, as otherwise the UnxUtils' "bison"
    does not find its own "bison.simple" file, which it expects to
    be in "/usr/share/bison/bison.simple"
    (aka. "\usr\share\bison\bison.simple").
    
	In addition to some tools used by Mtest.py for testing MonetDB (see
    below), UnxUtils provide the lexical analyzer generator "flex"
    and the parser generator "bison", which are required to compile
    MonetDB.
    Note: You have to install the UnxUtils using the original 
    @url{http://UnxUtils.sourceforge.net/UnxUtils.zip,.zip file}. 
    The third-party executable 
    @url{http://www.braindonors.net/products/unxutils.asp,installer}, 
    chooses another default installation directory that doesn't seem to
    work...
@item @emph{Microsoft Visual C++}
    You need Microsoft Visual C++ 5 or higher.
    Notice that if you do not own Microsoft Visual C++, you can
    still compile on Windows using the Cygnus Posix-emulation
    environment @url{http://www.cygwin.com,CYGWIN}
    In that case, you should follow the standard instructions in the file
    'HowToStart'. Alternatively, it might be possible to use the
    free @url{http://www.mingw.org/index.shtml,WIN32-GNU compilers}
    as a drop-in replacement for the Microsoft tools, but we have not
    tried this yet.

@item @emph{disk space}
	After downloading, MonetDB takes up about 40 MB of disk space;
	compilation adds another 70 MB.  Testing takes about 45 MB, and
	the installation about 20 MB (not including any databases).
@end itemize

@subsubsection Optional Software

@itemize
@item PHP
Download the Windows binaries in a zip package (i.e. not the
Windows installer) and the source package of PHP 5 from
http://www.php.net/.  Unzip the binaries into
e.g. ``C:\php-5`` (for PHP-5, the zip file does not contain a
top-level directory, so create a new directory,
e.g. ``C:\php-5``, and unzip the files there--for PHP-4, the
zip file does contain a top-level directory, so you can unzip
directly into ``C:\``).  In any case, make sure there are no
spaces in the path chosen.  Also extract the sources
somewhere, e.g. in a directory parallel to MonetDB.  If you
don't use ``C:\php-5`` for the binaries or you don't extract
the sources into ``php-5.1.4`` in the same directory where
MonetDB is extracted, you will have to edit MonetDB's
``NT\rules.msc`` to change the cariables ``PHP_SRCDIR`` and
``PHP_INSTDIR`` to reflect this.  Make sure there are no
spaces in these two path names.  Also note that the paths are
only used from inside the ``NT\src\mapi\clients\php`` folder,
so if they are relative, they have to be relative from there.
In order to get MonetDB to compile with these sources, it was
necessary to remove the line ``#include "arpa/inet.h"`` from
the file ``main\php_network.h``.  When compiling MonetDB, add
the flag ``HAVE_PHP=1`` to the ``nmake`` command line.  Note
that only PHP version 5.1.4 has been tried recently.

@item Pear:
Pear is the PHP Extension and Application Repository.  At the
MonetDB side of things, nothing more than what is described
for PHP needs to be done.  PEAR support is automatically
enabled.

@item Java:
The Java SDK (JDK) can be found at http://java.sun.com/.
After installing, make sure that the directory with java.exe
and javac.exe are in your ``PATH`` environment variable, and
then compile MonetDB with the additional flag ``HAVE_JAVA=1``
on the ``nmake`` command line.
@end itemize

@subsubsection Getting the Software
This command should be done once.  It records a password on the local
machine to be used for all subsequent CVS accesses with this
repository.

@example
cvs -d:pserver:anonymous@@monetdb.cvs.sourceforge.net:/cvsroot/monetdb login
@end example

Just type RETURN when asked for the password.  The actual steps depend
on your CVS tool, e.g. in WinCVS you have to set the Admin
preferences.  Then get the software by using the command::

@example
 cvs -d:pserver:anonymous@@monetdb.cvs.sourceforge.net:/cvsroot/monetdb checkout MonetDB
@end example

This will create a directory MonetDB in your current working directory.

Also see @url{http://sourceforge.net/cvs/?group_id=56967,SourceForge documentation} for more information on using @code{cvs}.

@subsubsection Compiling
Open a Windows command shell or a UnxUtils shell and go to the
top-level directory of MonetDB.
Make sure that the proper environment for MSVC++ is set,
otherwise call the corresponding BAT file.
(see C:\Program Files\Microsoft Visual Studio\VC98\Bin\VCVARS32.BAT).
Make sure that Python, C:\Pthreads\lib (or wherever you installed
Pthreads), and \usr\local\wbin are in the PATH of your command shell.
When all prerequisites have been satisfied, you type
@example
cd NT
nmake NEED_MX=1
@end example
to compile the source code.  If you want to compile with Java and PHP
support, the command is
@example
nmake HAVE_JAVA=1 HAVE_PHP=1
@end example
If nmake went successfully, you can try
@example
nmake check
@end example

This will do a lot of tests, some are unfortunately still expected to
fail, but most should go successfully.  At the end of the output there
is a reference to an HTML file which is created by the test process and
shows the test results.  An explanation of the test results can be found
in XXX--to be filled in.
Testing takes about 46 MB of disk space in the build directory.

@subsubsection Installing
Give the command

@example
nmake install
@end example

By default this will install MonetDB to ``<sourcedir>\NT\`` where
``<sourcedir>`` is the top-level directory of MonetDB source tree.  The
current version does not provide any means to change this default.

@subsubsection Testing the Installation
Make sure that @code{<sourcedir>\NT\bin},  @code{<sourcedir>\NT\lib}, and
@code{<sourcedir>\NT\lib\MonetDB} are in your PATH.
In the MonetDB top-level directory issue the command
@example
Mtest.py -r
@end example
(Make sure Mtest.py can be found, it should be in the bin directory that
was filled by the nmake install command.)

This should produce much the same output as nmake check above, but uses
the installed version of MonetDB.

@subsubsection Usage

There are two alternatives to use MonetDB interactively.  In both
cases, you first need to make sure, that your environment is set as
described above.

If you're "in a hurry", you can then simply start

@ifset M5manual
@example
mserver5
@end example
and you get the "server console", where you can type you commands.
The server console is mainly meant for administrative use, hence there
are no conveniences such as commandline editing or command history.

For a more convenient interface, you should use the @mclient{}.
To do so, start the server  and
then, in a second shell, set up the same environment and start 
@mclient{}

You now have a text-based MAL interface that supports
commandline editing and a commandline history.  The latter can even be
stored persistently to be re-used after stopping and restarting
@mclient{}; see

@example
 @mclient{} --help
@end example
for details.
@end ifset

@subsubsection Alternative builds
It is also possible to compile MonetDB using MinGW (Minimalist GNU for
Windows) on Windows.  See the documentation in the source distribution.

