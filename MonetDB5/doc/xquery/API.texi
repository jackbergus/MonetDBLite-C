MonetDB/XQuery consists of the MonetDB @strong{server} that maintains
a database of XML documents and allows @strong{clients} to query those.  
There are a number of (overlapping) options 
to execute XQuery requests on it and get answers back.


@strong{BEWARE}: take note of the 
current @strong{severe @url{Security,Security}
shortcomings} of MonetDB/XQuery before deploying it.

In the next release (0.14), we will add SOAP RPC as an XQuery interaction mechanism.

@subsection executing .xq scripts
@itemize
@item
invoking the @url{MapiClient,MapiClient Utility} with the @code{-lx} flag
from your command shell (interactively) or from a shell script (Windows: .bat script).
@item
The Windows installer also associates the @code{.xq} file extension with @code{MapiClient -lx},
so double-clicking executes the script (on a Mserver that must already be running on the same machine).
@end itemize

@subsection from a website:
@itemize
@item
The @url{Apache,Apache} page explains how one can put @code{.xq} files
in the contents of a website, as a dynamic page. Each time such a page is shown, 
the query gets executed. You typically render the resulting XML (XHTML) using
css.

@item
The @url{PHP,PHP} page explains how MonetDB/XQuery can be called from within PHP scripts.

@item
Other server-side website program code written in various programming languages can 
also access MonetDB/XQuery (see next points).
@end itemize

@subsection from a Java/C/C++/python/perl program:
@itemize
@item
Java Programmers can use the @url{JDBC-XQ,JDBC} interface originally designed for
SQL to submit XQueries. Atomic-typed (i.e. integer, decimal, float, string) result values 
are given back as individual results.  XML values (nodes) are given back line-by line as 
serialized (each line as a separate result).
@item
Java Programmers can also try the @url{XML-DB,XML:DB} interface
that is better tailored towards XML database functionality. In particular,
it provides proper support vor XML node values. @strong{Warning: experimental!}
@item
The MAPI (MonetDB API) query interface protocol is designed to be used for any query language 
and thus also XQuery. Note that this protocol is lower level, and will not handle
multi-line XML results properly (like JDBC it gives back results line-by-line, as printed). 
MAPI is available for 
@url{_ROOTURL_/MonetDB/Version5/Documentation/The-Mapi-Library.html,C/C++},
@url{_ROOTURL_/MonetDB/Version5/Documentation/The-PHP-Library.html,PHP},
@url{_ROOTURL_/MonetDB/Version5/Documentation/The-Perl-Library.html,Perl} and
@url{_ROOTURL_/MonetDB/Version5/Documentation/The-Python-Library.html,Python}.
programming interfaces can also be used for XQuery interaction.
@strong{Not documented yet. TODO!}
@end itemize

@subsection from MIL:
@itemize
@item
the @url{_ROOTURL_/MonetDB/Version4/Documentation/mil,MIL} low-level
algebra interface of the MonetDM server (version 4) is extended in MonetDB/XQuery
using a @strong{pathfinder} module. Apart from support for XML document shredding,
serialization, and XPath navigation ("loop-lifted staircase join"), this module
provides a new command @code{xquery(str):str}. It allows to execute any XQuery
as a string input, and produces its serialized (XML) result as a string result.

@item
as described in @url{../DocMgmt,XML Document Management}, maintaining
the XML document database (adding and deleting documents) is currently done using 
a MIL interface. 
@end itemize
