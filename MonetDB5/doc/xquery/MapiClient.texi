The @url{_ROOTURL_/MonetDB/Version4/Documentation/Tools/MapiClient,MapiClient} 
is the universal command-line tool that implements the MAPI protocol for client-server interaction
with MonetDB, and it is also used for XQuery (with the @code{-lx} switch).

The relevant MapiClient options for XQuery interaction are:

@verbatim
$ MapiClient -?
Usage: MapiClient [ options ] script
Options are:
 -h hostname /* host to connect to */
 -l language /* {mal,sql,mil,xquery} */
 -p portnr   /* port to connect to */
 -s mode     /* xquery serialization mode {xml,dm} */
 -T          /* timing info */
 -?          /* show this usage message */
@end verbatim

Thus, passing @code{-l xquery} (or shorter: @code{-lxq}) will cause
the query @code{script} to be executed as an XQuery.

The @code{ -h hostname} specifies on which machine the MonetDB server is running.
If you communicate with a MonetDB server on the same machine, it can be omitted.

The default @code{mapi_port} TCP port used is @code{50000}. If this port 
happens to be in use on the server machine (which generally is only the case if you run two MonetDB 
XQuery servers on it), you will have to use the @code{ -p port} switch. Otherwise, it may also 
be omitted.  Note that the default port (and other default options) can be set in the 
@code{MonetDB.conf} file.

@url{../../QuickTour,Link to examples using MapiClient}

@subsection Timing
The -T option causes timing info to be printed, after the query has been executed:
@verbatim
$ MapiClient -T -lx test.xq
"Hello World"
Trans      82.000 msec
Fetch       0.000 msec
Shred       0.000 msec
Query      37.000 msec
Print       6.000 msec
Total     131.000 msec
@end verbatim

@itemize
@item @code{Trans} time it took to translate and optimize the XQuery to
  MIL algebra.
@item @code{Fetch} time it took to retrieve/read XML documents that were 
  used by @code{fn:doc(url)} statements in the query. Note that MonetDB 
  has a <a href='../DocMgmt'>document cache}, so a document may 
  already be cached in the database (in this case, no time is spent fetching 
  nor shredding it).
@item @code{Shred} time it took to shred (import) those XML documents into 
  the database (includes @code{Fetch} time).
@item @code{Query} time it took to actually execute the query (includes 
  @code{Shred} time).
@item @code{Print} time it took to print the query result.
@item @code{Total} time everything took on the client side (includes 
  @code{Trans+Query+Print}; any difference thus is communication time 
  between client and server and the time to print the result on the command-line
  at the client.
@end itemize

@subsection Output Modes
The result of an XQuery is a value sequence; where the values may be nodes (i.e. 
snippets of XML) or simple values (such as integers or strings). Such sequences 
may be printed in different ways. This can be controlled with the @code{-s mode} 
switch.

@itemize
@item 
  @code{none} print no output at all. Useful for performance monitoring, e.g. 
  to exclude any effects of printing (large) results.
@item 
  @code{dm} print easily readable text.
@item 
  @code{xml} print in XML.
@end itemize

Let us consider the example XQuery @code{test.xq}:
@verbatim
(1, 42.0, "Hello World", <node attr="value,test</node>)
@end varbatim
When executing the query in default mode, we get: 
@verbatim
$ MapiClient -lx test.xq
1,
42.000000,
"Hello World",
<node attr="value,test</node>
$
@end varbatim
however, in XML mode we get:
@verbatim
$ MapiClient -lx -s xml test.xq
<?xml version="1.0" encoding="utf-8"?>
<XQueryResult>
1 42.000000 "Hello World" <node attr="value,test</node>
</XQueryResult>
@end varbatim

A new variant on XML mode is the submode @code{-soap}
that encloses atomic values in an element with the name of the 
XQuery type.
@verbatim
$ MapiClient -lx -s xml-soap test.xq
<?xml version="1.0" encoding="utf-8"?>
<XQueryResult>
<xs:integer>1</xs:integer>
<xs:double>42.000000</xs:double>
<xs:string>Hello World</xs:string>
<xs:anyNode><node attr="value,test</node></xs:anyNode>
</XQueryResult>
@end varbatim
The @code{soap} mode will be part of the upcoming support
for @url{..,SOAP} RPC interface for MonetDB/XQuery. 

Thus:
@itemize
@item results are printed in UTF-8, as speficied by the first line of
  XML (the <em>header</em>). This header may be omitted if desired, by 
  appending @code{-noheader} to the mode (thus: @code{-s 
  xml-noheader}).
@itemBy default MonetDB/XQuery generates an artificial XML root element 
  with tag @code{XQueryResult}.
  This is desirable to ensure the output to be valid XML (in case of multiple 
  result values). If you know that your query yields a single XML node, or
  you do not want the output to be valid XML, you 
  may omit the artificial root by adding the sub-mode @code{-noroot} 
  (thus: @code{-s xml-noroot}, or more useful: @code{-s xml-noheader-noroot}).

@item you may also want to change the name of the artificial root tag to e.g. 
  @code{XYZ}. This is done by adding @code{-root-XYZ} as <b>last</b> 
  submode (i.e. @code{-s xml-root-XYZ}).
@end itemize

Finally, rigorous support for typed XML output is provided in yet
another output mode just called @code{-typed}.
It produces the following result (indenting and line breaks added by hand, for readability):
@verbatim
$ MapiClient -lx -s xml-typed test.xq
<?xml version="1.0" encoding="utf-8"?>
<result:sequence 
 xmlns:result="http://monetdb.cwi.nl/XQuery/results" 
 xmlns:xs="http://www.w3.org/2001/XMLSchema" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance,
     <result:atomic-value xsi:type="xs:integer,1</result:atomic-value>
     <result:atomic-value xsi:type="xs:decimal,42.000000</result:atomic-value>
     <result:atomic-value xsi:type="xs:string,Hello World</result:atomic-value>
     <result:element><node attr="value,test</node></result:element>
</result:sequence>
@end varbatim

The default mode for MonetDB/XQuery is @code{dm} but can be set
using the @code{xquery_output} variable in the @code{MonetDB.conf} file.

