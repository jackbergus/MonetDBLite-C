The @emph{Pathfinder} research project has been initiated by
the @url{http://www.inf.uni-konstanz.de/dbis/,Database &
Information Systems Group} at the 
@url{http://www.uni-konstanz.de/,University of Konstanz}, Germany.

All key people (the group of prof. dr. Torsten Grust) relocated in 2005 to the 
@url{http://www-db.in.tum.de/cms/node,Technical University of Munich}
where the project continues unabated.

It is now a joint project with the database groups at @url{
http://www.cwi.nl/,CWI}, Amsterdam,
and the @url{http://www.utwente.nl/,University of Twente}

The project strives for a full XQuery implementation, backed by
modern database technology. As such, the techniques allow for
effective optimizations and scalability to multi-gigabyte volumes
of XML (eXtensible Markup Language).

The software implementation of these techniques is the
open-source system MonetDB/XQuery. As an XQuery front end to
MonetDB, the implementation @emph{compiles} queries in the XQuery
language into a relational equivalent. After applying various
optimization techniques, the relational query is then sent as a
MIL (MonetDB Interpreter Language) program
(the low-level interface language to MonetDB) to the back-end
database. After execution on the MonetDB back-end, the result is
serialized back into an XML format to be returned to

This XQuery compiler is distributed as a separate software
package. The software includes the stand-alone XQuery compiler
@code{pf}, as well as a server plug-in for MonetDB (the
@code{pathfinder} @emph{extension module}) that contains
the compiler and thus allows for server-side XQuery processing on
MonetDB. The stand-alone compiler is mainly targeted 
people from the research community that want to look "under the
hood" of MonetDB/XQuery. Users that just want to have a functional
XQuery implementation will typically stick to the instant XQuery
compilation provided by the @code{pathfinder} extension

@subsection Research Projects at CWI

CWI solicits M.Sc. candidates, as well as post-doctoral researchers
interested in the following projects to 
@url{mailto:boncz@cwi.nl,contact} us. The same holds
for database research groups interested in collaboration.


@subsection Project 1: Run-time XQuery Optimization

The full materialization strategy that MonetDB has a number
of disadvantages (specifically scalability), but it also
has the advantage that run-time query optimization can be 
employed at all stages of a physical query plan. 

In fact, the current compiler already singles out many common
low-cost alternatives that can be detected only at run-time. 
A starting point of a research project is to quantify the 
benefits of this. This should be followed by enhancing the 
run-time query optimization 
opportunities by employing new techniques.


@subsection Project 2: Distributed/P2P XQuery Processing

At CWI, research is underway to extend XQuery to be capable 
of querying and updating XML at multiple sites. The end-target
is to be able to use XML database technology (MonetDB/XQuery)
to create adaptive distributed applications. In this context,
we would like to research the use of P2P data structures and
the integration of P2P query processing techniques.

@subsection Project 3: Multi-Core XQuery Execution

With multi-core CPUs becoming standard, intra query parallelism
is a hot issue in the world of XML, which has as-of-yet received
too little interest. The same can be said of other 
@emph{hardware-conscious} (data cache, instruction cacehe, etc..)
query processing research, which for the moment is only being
performed in the context of relational database technology.


@subsection Project 4: Pipelined XQuery Processing

One of the crucial causes of resource consumption in
XQuery systems is materialization (or "buffering"). As
MonetDB employs full materialization anyway, we cannot really
study this issue in the current system.

By making Pathfinder generate relational plans accepted
by the @url{http://www.cwi.nl:/~boncz/x100.html,X100}
system, it becomes possible to evaluate the benefits of pipelining 
in the XQuery context.


Note that the more stringent ordering requirements of 
XQuery (when compared to relational database query languages) 
and the frequently necessary sorting operations (=materialization)
make it unclear but interesting issue how much pipelining could
increase the scalability and performance of an XQuery system.


@subsection Project 5: Update Performance

The upcoming support for 
the @url{_ROOTURL_/XQuery/Version4/Language/XUpdate,XQuery
Update Facility} in MonetDB/XQuery should be seen as just a starting point
for further work on XQuery updates.

Possible research can look into new adaptive data structures that allow
updating range-based XML encodings (such as pre/post) efficiently,
as well as innovative locking and isolation mechanisms that could boost 
throughput in update-intensive query scenarios.

Part of the project will be defienition and execution of a
scalable and tunable XML transaction performance benchmark.

@subsection Project 6: Holistic Staircase Join

Integration of Holistic Twig Join in MonetDB/XQuery could help 
performance on certain classes of queries. It would be interesting
to characterize the performance benefits that can be gained.

There are interesting open questions in the area of holistic join, 
such as how to employ the algorithms in a nested (loop-lifted)
fashion, how to support other axes than descendant optimally, and 
how to perform pruning (i.e. more general how to avoid generating
duplicates). 


@subsection Relevant links:
@itemize
@item @url{http://www.pathfinder-xquery.org,http://www.pathfinder-xquery.org} - Pathfinder Home
Page
@item @url{http://www.w3.org/XML/Query,http://www.w3.org/XML/Query} 
 - w3c XQuery Home Page
@item @url{http://www.xml-benchmark.org/,http://www.xml-benchmark.org/} 
 - XMark Home Page

@item @url{http://www.xquery.com/,http://www.xquery.com/} 
 - an introduction to XQuery

@item @url{http://www.inf.uni-konstanz.de/dbis/,http://www.inf.uni-konstanz.de/dbis} 
 - University of Konstanz (Database) Home Page
@item @url{http://db.cs.utwente.nl/,http://db.cs.utwente.nl} 
 - University of Twente (Databases) Home Page
@item @url{http://www.cwi.nl/,http://www.cwi.nl} 
 - CWI Home Page
@item @url{http://www-db.in.tum.de/cms/node,http://www-db.in.tum.de/cms/node}
 - Technische Universit&auml;t M&uuml;nchen (Database) Home Page
@end itemize
