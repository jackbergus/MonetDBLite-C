@subsection Document Collection
we can print the current document collection by:
@verbatim
  mil> xmldb_print();
  #---------------------------------------------------------------------------------#
  # alias         URI                                             size              # name
  # str           str                                             lng               # type
  #---------------------------------------------------------------------------------#
  [ "auctions.xml", "http://www.cwi.nl/~boncz/xmark//auctions.xml", 589824          ]
  [ "music.xml",    "http://www.cwi.nl/~boncz/music/music.xml",     3276800         ]
  mil>
@end verbatim
In this case, two XML documents happen to be loaded.
All documents have an @code{alias} (the logical name) and an 
@code{URI} (the physical name).
The size printed is the database file storage space it occupies in bytes.

Documents are shredded either 
@itemize
@item  explicitly (as explained at the start), using the MIL command 
     @url{../AddDoc,@code{shred_doc("URI","alias");}}
@item  or because a query executed the XQuery function @code{fn:doc("uri")}
     and the @ref{Cache Policy} of MonetDB/XQuery determined
     that this document should stay in the cache; so it stayed there
     even after query execution ended (for automatically cached documents, 
     the alias is identical to the URI).
@end itemize

In the former case, the document stays in the database until the point 
that it is explicitly removed with @code{delete_doc(name)}, where 
@code{name} may be either the URI or the alias.
The @code{delete_all_docs(cachedOnly)} deletes all documents
if passed @code{false} and only the automatically cached 
ones if passed @code{true}.
