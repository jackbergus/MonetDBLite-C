Dec 21 2006, challenge replace :void columns by :oid{dense,base=0@0}
as part of the BIG BANG SQL Switchpoint cleanup.

Rationale: the current :bat[:void,-] column is a mixture of type information,
value sequences, and storage implementation. Let alone the naming
confusion, which already lead to coining it :bat[:vid,-] instead.
The :bat[:void,-] column can be freely mixed with :bat[:oid,-] in
the kernel, and many places in the M5 code use multiple signatures to
capture all eligable cases/combinations. Moreover, it complicates
the optimizers, because the typeing information may change as a result
of runtime properties.

Goal: to simplify the MAL language semantics and given its stable
implementation, it seems possible to clearly separate the type
information from the underlying (or desirable properties).
That is, the old :bat[:vid,-] is turned into :bat[:oid{dense,base=0@0},-].

It leaves open the situation to allow for a :void column if you
really want a unary table. It is a none-space consumptive column type.
Thus, the object :bat[:void,:any] has a constant header nil:void.
You can append(-)/insert(nil:void,-) elements. 
It also enables positional lookup and positional updates.
Such objects can be coerced into a :bat[:oid,:any]
using a markH().

The degenerated case is :bat[:void,:void], which contains only
pairs (nil:void,nil:void). If we support bat.setNotNil() then 
it represents an always empty BAT.

A consequence of this move could be that some runtime errors may
emerge, because not all kernel wrapper code can deal with 
real-void headers yet.

Moreover, it now becomes an issue when a physical :vid column is coerced
into a physical :oid column under the hood. A call to bat.new(:oid,-)
creates a :vid headed BAT starting at 0@0, which is coerced to a materialized
:oid column if the sequences gets broken.

Remapping the oids should be performed with a batcalc.+() operation.

Analysis: a global analysis of the consequences is made before
this drastic change is applied.

Status:[28/12] all test cases dealing with :bat[:void,-] have been
checked and recast into a :bat[:oid,-] version. The wrapper
code still should partly be checked. A call to BATnew(TYPE_void,-)
is only allowed if also the sequence base is set. This
creates the :vid column. Ideally, the GDK library should make
this type explicit (TYPE_vid) and distinct from TYPE_void.
Now it is hidden in macros.

src/modules/mal
	40 cases where TYPE_void plays a decisive role
	81 signatures are void specific[done]
src/modules/kernel
	136 cases where TYPE_void plays a decisive role
	203 signatures are :void specific
 bat5.mx- 68 cases 
	setSequenceBase() is dropped. 
	update code for real-void headed bats should be handled.
 algebra.mx (30case)
 	markT and friends involve oid-warping
	identity (dirty hack) is dropped
 aggr.mx
	most routines have to be protected against non-voids or masked
	they should be generalized anyway to avoid the strong limitation on oids
 batcalc.mx
	have to differentiate at runtime rather then compile time the algorithm
	and generalized to support oid columns
 group.mx
	generalize beyond void column
src/mal
	36 cases where TYPE_void plays a decisive role [check done]
src/optimizer
	20 cases where TYPE_void plays a decisive role [check done]
*/Tests
	around 788 test files should be checked and re-approved
	a simple recast experiment in mal/Tests shows that only
	23 out of 195 needs a re-approval when :void is replaced
	with :oid.
