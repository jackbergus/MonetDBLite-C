Dec 21 2006, challenge replace :void columns by :oid{dense,base=0@0}
as part of the BIG BANG SQL Switchpoint cleanup.

Rationale: the BAT[:void,-] column is a mixture between type information,
value sequences, and storage implementation. This has been translated
in many places in the M5 code where multiple signatures are used to
capture all eligable cases/combinations. Moreover, it complicates
the optimizers, because the typeing information may change as a result
of runtime properties.

Goal: to simplify the MAL language semantics and given its stable
implementation, it seems possible to clearly separate the type
information from the underlying (or desirable properties).
That is, :bat[:void,-] should be turned into :bat[:oid{dense,base=0@0},-]
where the base property represents the result of a setSequenceBase.

It leaves open the situation to allow for a :void column if you
really want a unary table. It is a none-space consumptive type.

A consequence of this move could be that some runtime errors
emerge, because not all kernel code can deal with non-void headers,
which can be masked using an upfront view definition.

Moreover, it now becomes an issue when a physical :void column is coerced
into a physical :oid column under the hood. It seems that any column can start
as an old fashioned :void column. The first insert sets the base,
and the second propagates it to a physical :oid column.
The converge route is also possible.

Analysis: a global analysis of the consequences is made before
this drastic change is applied.

src/modules/mal
	40 cases where TYPE_void plays a decisive role
	81 signatures are void specific
src/modules/kernel
	136 cases where TYPE_void plays a decisive role
	203 signatures are :void specific
 bat5.mx- 68 cases 
	setSequenceBase() can be dropped. the base becomes a property
	a constant is good for optimization. Do we need oid-warping?
	insert() 
 algebra.mx (30case)
 	markT and friends involve oid-warping
	identity (dirty hack) can be dropped
 aggr.mx
	most routines have to be protected against non-voids or masked
	they should be generalized anyway to avoid the strong limitation on oids
 batcalc.mx
	have to differentiate at runtime rather then compile time the algorithm
	and generalized to support oid columns
 group.mx
	generalize beyond void column
src/mal
	36 cases where TYPE_void plays a decisive role
src/optimizer
	20 cases where TYPE_void plays a decisive role
*/Tests
	around 788 test files should be checked and re-approved
