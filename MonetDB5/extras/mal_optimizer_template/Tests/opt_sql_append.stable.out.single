stdout of test 'opt_sql_append` in directory 'monetdb5/extras/mal_optimizer_template` itself:


# 22:58:57 >  
# 22:58:57 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "gdk_dbfarm=/ufs/manegold/_/Monet/HG/default/prefix/_/var/MonetDB" "--set" "mapi_open=true" "--set" "mapi_port=36275" "--set" "monet_prompt=" "--trace" "--forcemito" "--set" "mal_listing=2" "--dbname=mTests_extras_mal_optimizer_template" "--set" "mal_listing=0"
# 22:58:57 >  

# MonetDB 5 server v11.8.0
# This is an unreleased version
# Serving database 'mTests_extras_mal_optimizer_template', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Found 15.630 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://rome.ins.cwi.nl:36275/
# MonetDB/GIS module loaded
# MonetDB/SQL module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_history.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_compress.sql
# loading sql script: 18_dictionary.sql
# loading sql script: 19_cluster.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 40_geom.sql
# loading sql script: 80_udf.sql
# loading sql script: 99_system.sql

# 22:58:57 >  
# 22:58:57 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=rome" "--port=36275"
# 22:58:57 >  

#create table ttt (a int, b int, c int);
#select optimizer;
% .L1 # table_name
% L1 # name
% varchar # type
% 12 # length
[ "default_pipe"	]
#select def from optimizers() where name = optimizer;
% .L1 # table_name
% def # name
% clob # type
% 579 # length
[ "optimizer.inline();optimizer.remap();optimizer.costModel();optimizer.coercions();optimizer.evaluate();optimizer.emptybind();optimizer.pushselect();optimizer.aliases();optimizer.mitosis();optimizer.mergetable();optimizer.deadcode();optimizer.aliases();optimizer.constants();optimizer.commonTerms();optimizer.projectionpath();optimizer.deadcode();optimizer.reorder();optimizer.reduce();optimizer.matpack();optimizer.dataflow();optimizer.querylog();optimizer.multiplex();optimizer.generator();optimizer.profiler();optimizer.candidates();optimizer.jit();optimizer.garbageCollector();"	]
#explain copy into ttt from '/tmp/xyz';
% .explain # table_name
% mal # name
% clob # type
% 126 # length
function user.s4_1():void;
    X_24:void := querylog.define("explain copy into ttt from \\'/tmp/xyz\\';","default_pipe",10);
    X_1 := sql.mvc();
    (X_11:bat[:int],X_12:bat[:int],X_13:bat[:int]) := sql.copy_from(nil,"|","\\n",nil:str,"null","/tmp/xyz",-1,0,0,0);
    X_14 := sql.append(X_1,"sys","ttt","a",X_11);
    X_18 := sql.append(X_14,"sys","ttt","b",X_12);
    X_20 := sql.append(X_18,"sys","ttt","c",X_13);
    X_22 := aggr.count(X_13);
    sql.affectedRows(X_20,X_22);
end user.s8_1;
#inline               actions= 0 time=1 usec 
#candidates           actions= 1 time=14 usec 
#remap                actions= 0 time=3 usec 
#costModel            actions= 1 time=12 usec 
#coercions            actions=10 time=13 usec 
#evaluate             actions= 0 time=2 usec 
#emptybind            actions= 0 time=4 usec 
#pushselect           actions= 0 time=3 usec 
#aliases              actions= 0 time=4 usec 
#mitosis              actions= 0 time=2 usec 
#mergetable           actions= 0 time=17 usec 
#deadcode             actions= 0 time=5 usec 
#aliases              actions= 0 time=4 usec 
#constants            actions= 0 time=5 usec 
#commonTerms          actions= 0 time=4 usec 
#projectionpath       actions= 0 time=3 usec 
#deadcode             actions= 0 time=4 usec 
#reorder              actions= 1 time=19 usec 
#reduce               actions=33 time=23 usec 
#matpack              actions= 0 time=3 usec 
#dataflow             actions=31 time=20 usec 
#querylog             actions= 0 time=0 usec 
#multiplex            actions= 0 time=3 usec 
#generator            actions= 0 time=1 usec 
#profiler             actions= 1 time=6 usec 
#garbageCollector     actions= 1 time=13 usec 
#total                actions= 1 time=245 usec 
#declare opt_pipe_name string;
#set opt_pipe_name = ( select optimizer );
#declare opt_pipe_def  string;
#set opt_pipe_def  = ( select def from optimizers() where name = opt_pipe_name );
#set optimizer = substring(opt_pipe_def,0,length(opt_pipe_def)-length('optimizer.garbageCollector();')) || 'optimizer.sql_append();optimizer.garbageCollector();';
#select optimizer;
% .L1 # table_name
% L1 # name
% varchar # type
% 6 # length
[ "user_1"	]
#select def from optimizers() where name = optimizer;
% .L1 # table_name
% def # name
% clob # type
% 602 # length
[ "optimizer.inline();optimizer.remap();optimizer.costModel();optimizer.coercions();optimizer.evaluate();optimizer.emptybind();optimizer.pushselect();optimizer.aliases();optimizer.mitosis();optimizer.mergetable();optimizer.deadcode();optimizer.aliases();optimizer.constants();optimizer.commonTerms();optimizer.projectionpath();optimizer.deadcode();optimizer.reorder();optimizer.reduce();optimizer.matpack();optimizer.dataflow();optimizer.querylog();optimizer.multiplex();optimizer.generator();optimizer.profiler();optimizer.candidates();optimizer.jit();optimizer.sql_append();optimizer.garbageCollector();"	]
#explain copy into ttt from '/tmp/xyz';
% .explain # table_name
% mal # name
% clob # type
% 126 # length
function user.s12_1():void;
    X_24:void := querylog.define("explain copy into ttt from \\'/tmp/xyz\\';","user_1",10);
    X_1 := sql.mvc();
    (X_11:bat[:int],X_12:bat[:int],X_13:bat[:int]) := sql.copy_from(nil,"|","\\n",nil:str,"null","/tmp/xyz",-1,0,0,0);
    X_14 := sql.append(X_1,"sys","ttt","a",X_11);
    X_18 := sql.append(X_14,"sys","ttt","b",X_12);
    X_22 := aggr.count(X_13);
    X_20 := sql.append(X_18,"sys","ttt","c",X_13);
    sql.affectedRows(X_20,X_22);
end user.s24_1;
#inline               actions= 0 time=1 usec 
#candidates           actions= 1 time=14 usec 
#remap                actions= 0 time=3 usec 
#costModel            actions= 1 time=13 usec 
#coercions            actions=10 time=14 usec 
#evaluate             actions= 0 time=3 usec 
#emptybind            actions= 0 time=3 usec 
#pushselect           actions= 0 time=3 usec 
#aliases              actions= 0 time=4 usec 
#mitosis              actions= 0 time=2 usec 
#mergetable           actions= 0 time=16 usec 
#deadcode             actions= 0 time=4 usec 
#aliases              actions= 0 time=4 usec 
#constants            actions= 0 time=4 usec 
#commonTerms          actions= 0 time=4 usec 
#projectionpath       actions= 0 time=3 usec 
#deadcode             actions= 0 time=4 usec 
#reorder              actions= 1 time=19 usec 
#reduce               actions=33 time=23 usec 
#matpack              actions= 0 time=3 usec 
#dataflow             actions=32 time=19 usec 
#querylog             actions= 0 time=1 usec 
#multiplex            actions= 0 time=3 usec 
#generator            actions= 0 time=1 usec 
#profiler             actions= 1 time=7 usec 
#optimizer.sql_append actions= 1 time=8 usec 
#garbageCollector     actions= 1 time=19 usec 
#total                actions= 1 time=261 usec 
#drop table ttt;

# 22:58:58 >  
# 22:58:58 >  "Done."
# 22:58:58 >  

