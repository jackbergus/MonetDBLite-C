
a:= bat.new(:oid,:dbl);
bat.append(a, 1.4:dbl);
bat.append(a, 3.4:dbl);
bat.append(a, 2.1:dbl);
bat.append(a, 8.2:dbl);
bat.append(a, 9.6:dbl);

b:= bat.new(:oid,:dbl);
bat.append(b, 13.4:dbl);
bat.append(b, 17.6:dbl);
bat.append(b, 12.8:dbl);
bat.append(b, 19.1:dbl);
bat.append(b, 19.9:dbl);

c:= bat.new(:oid,:dbl);
bat.append(c, 18.4:dbl);
bat.append(c, 18.5:dbl);
bat.append(c, 18.6:dbl);
;bat.append(c, 18.7:dbl);
bat.append(c, 18.8:dbl);

d:= bat.new(:oid,:dbl);
bat.append(d, 0.04:dbl);
bat.append(d, 0.005:dbl);
bat.append(d, 0.008:dbl);
bat.append(d, 0.04:dbl);
bat.append(d, 0.02:dbl);


# square an array
sqr:bat[:oid,:dbl] := pyapi.eval(nil:ptr, "return(arg1*arg1)", a);
io.print(sqr);

# then take the root of that array again
a:bat[:oid,:dbl] := pyapi.eval(nil:ptr, "return(numpy.sqrt(arg1))", sqr);
io.print(a);

# do some numpy operations
x:bat[:oid,:dbl] := pyapi.eval(nil:ptr, "return(numpy.prod(arg1*arg2*arg3*arg4)*numpy.sum(arg1*arg2*arg3*arg4))", a, b, c, d);
io.print(x);

fib:= bat.new(:oid,:int);
bat.append(fib, 0:int);
bat.append(fib, 1:int);
bat.append(fib, 2:int);
bat.append(fib, 3:int);
bat.append(fib, 4:int);
bat.append(fib, 5:int);
bat.append(fib, 6:int);
bat.append(fib, 7:int);
bat.append(fib, 8:int);
bat.append(fib, 9:int);
bat.append(fib, 10:int);
bat.append(fib, 11:int);
bat.append(fib, 12:int);
bat.append(fib, 13:int);
bat.append(fib, 14:int);
bat.append(fib, 15:int);
bat.append(fib, 16:int);
bat.append(fib, 17:int);
bat.append(fib, 18:int);
bat.append(fib, 19:int);
bat.append(fib, 20:int);
bat.append(fib, 21:int);
bat.append(fib, 22:int);
bat.append(fib, 23:int);
bat.append(fib, 24:int);
bat.append(fib, 25:int);
bat.append(fib, 26:int);
bat.append(fib, 27:int);
bat.append(fib, 28:int);
bat.append(fib, 29:int);

# define a function within the main function and map it to a BAT
s:bat[:oid,:dbl] := pyapi.eval(nil:ptr, "def fibonacci(nmbr):\n\tif (nmbr == 0): return 0\n\tif (nmbr == 1): return 1\n\ta = 0\n\tb = 1\n\tfor i in range(0, nmbr - 1):\n\t\tc = a + b\n\t\ta = b\n\t\tb = c\n\treturn b\nreturn(list(map(fibonacci, arg1)))", fib);
io.print(s);

indices:= bat.new(:oid,:int);
bat.append(indices, 0:int);
bat.append(indices, 1:int);
bat.append(indices, 2:int);
bat.append(indices, 3:int);
bat.append(indices, 4:int);
bat.append(indices, 5:int);
bat.append(indices, 6:int);
bat.append(indices, 7:int);
bat.append(indices, 8:int);
bat.append(indices, 9:int);
bat.append(indices, 10:int);
bat.append(indices, 11:int);
bat.append(indices, 12:int);
bat.append(indices, 13:int);
bat.append(indices, 14:int);
bat.append(indices, 15:int);
bat.append(indices, 16:int);
bat.append(indices, 17:int);
bat.append(indices, 18:int);
bat.append(indices, 19:int);
bat.append(indices, 20:int);
bat.append(indices, 21:int);
bat.append(indices, 22:int);
bat.append(indices, 23:int);
bat.append(indices, 24:int);
bat.append(indices, 25:int);
bat.append(indices, 26:int);
bat.append(indices, 27:int);
bat.append(indices, 28:int);
bat.append(indices, 29:int);
bat.append(indices, 30:int);
bat.append(indices, 31:int);
bat.append(indices, 32:int);
bat.append(indices, 33:int);
bat.append(indices, 34:int);
bat.append(indices, 35:int);
bat.append(indices, 36:int);
bat.append(indices, 37:int);
bat.append(indices, 38:int);
bat.append(indices, 39:int);
bat.append(indices, 40:int);
bat.append(indices, 41:int);
bat.append(indices, 42:int);
bat.append(indices, 43:int);
bat.append(indices, 44:int);
bat.append(indices, 45:int);
bat.append(indices, 46:int);
bat.append(indices, 47:int);
bat.append(indices, 48:int);
bat.append(indices, 49:int);
bat.append(indices, 50:int);
bat.append(indices, 51:int);
bat.append(indices, 52:int);
bat.append(indices, 53:int);
bat.append(indices, 54:int);
bat.append(indices, 55:int);
bat.append(indices, 56:int);
bat.append(indices, 57:int);
bat.append(indices, 58:int);
bat.append(indices, 59:int);
bat.append(indices, 60:int);
bat.append(indices, 61:int);
bat.append(indices, 62:int);
bat.append(indices, 63:int);
bat.append(indices, 64:int);
bat.append(indices, 65:int);
bat.append(indices, 66:int);
bat.append(indices, 67:int);
bat.append(indices, 68:int);
bat.append(indices, 69:int);
bat.append(indices, 70:int);
bat.append(indices, 71:int);
bat.append(indices, 72:int);
bat.append(indices, 73:int);
bat.append(indices, 74:int);
bat.append(indices, 75:int);
bat.append(indices, 76:int);
bat.append(indices, 77:int);
bat.append(indices, 78:int);
bat.append(indices, 79:int);
bat.append(indices, 80:int);
bat.append(indices, 81:int);
bat.append(indices, 82:int);
bat.append(indices, 83:int);
bat.append(indices, 84:int);
bat.append(indices, 85:int);
bat.append(indices, 86:int);
bat.append(indices, 87:int);
bat.append(indices, 88:int);
bat.append(indices, 89:int);
bat.append(indices, 90:int);
bat.append(indices, 91:int);
bat.append(indices, 92:int);
bat.append(indices, 93:int);
bat.append(indices, 94:int);
bat.append(indices, 95:int);
bat.append(indices, 96:int);
bat.append(indices, 97:int);
bat.append(indices, 98:int);
bat.append(indices, 99:int);
bat.append(indices, 100:int);
bat.append(indices, 101:int);
bat.append(indices, 102:int);
bat.append(indices, 103:int);
bat.append(indices, 104:int);
bat.append(indices, 105:int);
bat.append(indices, 106:int);
bat.append(indices, 107:int);
bat.append(indices, 108:int);
bat.append(indices, 109:int);
bat.append(indices, 110:int);
bat.append(indices, 111:int);
bat.append(indices, 112:int);
bat.append(indices, 113:int);
bat.append(indices, 114:int);
bat.append(indices, 115:int);
bat.append(indices, 116:int);
bat.append(indices, 117:int);
bat.append(indices, 118:int);
bat.append(indices, 119:int);
bat.append(indices, 120:int);
bat.append(indices, 121:int);
bat.append(indices, 122:int);
bat.append(indices, 123:int);
bat.append(indices, 124:int);
bat.append(indices, 125:int);
bat.append(indices, 126:int);
bat.append(indices, 127:int);
bat.append(indices, 128:int);
bat.append(indices, 129:int);
bat.append(indices, 130:int);
bat.append(indices, 131:int);
bat.append(indices, 132:int);
bat.append(indices, 133:int);
bat.append(indices, 134:int);
bat.append(indices, 135:int);
bat.append(indices, 136:int);
bat.append(indices, 137:int);
bat.append(indices, 138:int);
bat.append(indices, 139:int);
bat.append(indices, 140:int);
bat.append(indices, 141:int);
bat.append(indices, 142:int);
bat.append(indices, 143:int);
bat.append(indices, 144:int);
bat.append(indices, 145:int);
bat.append(indices, 146:int);
bat.append(indices, 147:int);
bat.append(indices, 148:int);
bat.append(indices, 149:int);
bat.append(indices, 150:int);


# now do it while returning a hge, to test returning very large numbers
s:bat[:oid,:hge] := pyapi.eval(nil:ptr, "def fibonacci(nmbr):\n\tif (nmbr == 0): return 0\n\tif (nmbr == 1): return 1\n\ta = 0\n\tb = 1\n\tfor i in range(0, nmbr - 1):\n\t\tc = a + b\n\t\ta = b\n\t\tb = c\n\treturn b\nreturn(list(map(fibonacci, arg1)))", indices);
io.print(s);
