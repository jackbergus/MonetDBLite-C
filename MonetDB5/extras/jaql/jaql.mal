# The contents of this file are subject to the MonetDB Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.monetdb.org/Legal/MonetDBLicense
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is the MonetDB Database System.
#
# The Initial Developer of the Original Code is CWI.
# Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
# Copyright August 2008-2012 MonetDB B.V.
# All Rights Reserved.

module jaql;

pattern execute(jaql:str):void
address JAQLexecute
comment "Parse and run the given JAQL query";

pattern x(jaql:str):void
address JAQLexecute
comment "execute() alias for the lazy";

pattern getVar(nme:str)(kind:bat[:oid,:bte],string:bat[:oid,:str],integer:bat[:oid,:lng],double:bat[:oid,:dbl],array:bat[:oid,:oid],object:bat[:oid,:oid],name:bat[:oid,:str])
address JAQLgetVar
comment "Retrieve value of JSON variable";

pattern setVar(nme:str, kind:bat[:oid,:bte],string:bat[:oid,:str],integer:bat[:oid,:lng],double:bat[:oid,:dbl],array:bat[:oid,:oid],object:bat[:oid,:oid],name:bat[:oid,:str]):void
address JAQLsetVar
comment "Set or overwrite value of JSON variable";

function range(size:lng)(kind:bat[:oid,:bte],string:bat[:oid,:str],integer:bat[:oid,:lng],double:bat[:oid,:dbl],array:bat[:oid,:oid],object:bat[:oid,:oid],name:bat[:oid,:str]);
	(r1,r2,r3,r4,r5,r6,r7) := jaql.range(0, size - 1);
	return (r1,r2,r3,r4,r5,r6,r7);
end range;

function range(start:lng, end:lng)(kind:bat[:oid,:bte],string:bat[:oid,:str],integer:bat[:oid,:lng],double:bat[:oid,:dbl],array:bat[:oid,:oid],object:bat[:oid,:oid],name:bat[:oid,:str]);
	(r1,r2,r3,r4,r5,r6,r7) := jaql.range(start, end, 1);
	return (r1,r2,r3,r4,r5,r6,r7);
end range;

function range(start:lng, end:lng, skip:lng)(kind:bat[:oid,:bte],string:bat[:oid,:str],integer:bat[:oid,:lng],double:bat[:oid,:dbl],array:bat[:oid,:oid],object:bat[:oid,:oid],name:bat[:oid,:str]);
	r2 := bat.new(:oid,:str);
	r4 := bat.new(:oid,:dbl);
	r6 := bat.new(:oid,:oid);
	r7 := bat.new(:oid,:str);

	# use array.series from sciql
	r3 := array.series(start, skip, end, 1, 1);
	r3 := algebra.markH(r3, 1@0);

	r5 := algebra.project(r3, 0@0);
	r5 := bat.reverse(r5);

	r1 := bat.new(:oid,:bte);
	r1 := bat.insert(0@0, 'a':bte);
	k := algebra.project(r3, 'i':bte);
	r1 := bat.insert(r1, k);

	return (r1,r2,r3,r4,r5,r6,r7);
end range;

