# [ [3,65,8,72], [5,98,2,65] ] -> expand each arr
# '[ [3,65,8,72], [5,98,2,65] ]' | as arr -> expand: arr => <result>
# j_json( [ [3,65,8,72], [5,98,2,65] ] ) j_expand( j_var( arr ) , j_var( arr ) ) j_output()

include json;
out := io.stdout();

# j_json( [ [3,65,8,72], [5,98,2,65] ] )
(x1,x2,x3,x4,x5,x6,x7) := json.shred("[ [3,65,8,72], [5,98,2,65,[]] ]");
json.print(out, x1,x2,x3,x4,x5,x6,x7);

# j_var( arr )
o4 := algebra.selectH(x1, 0@0); # semantic: first is outermost array
o0 := algebra.semijoin(x5, o4);
o2 := bat.reverse(o0);
o1 := algebra.semijoin(x1, o2);

# j_var( arr )
o3 := algebra.uselect(o1, 'a'); # ids from elems (all arrays match)

# j_expand( o1 , o3 )
# construct json with these elements in the outermost array
o6 := algebra.semijoin(x5, o3);
o7 := algebra.project(0@0, o6); # semantic: first is outermost array
# remove nested arrays, collapse all of their content to top-level array
o8 := algebra.sunion(o0, o6);
o9 := algebra.sdifference(x5, o8);
o5 := bat.insert(o9, o7);

# j_output()
out := io.stdout();
json.print(out, x1,x2,x3,x4,o5,x6,x7);


# [ {"name":"Jon Doe", "movie_ids":[3,65,8,72]}, {"name":"Jane Dean", "movie_ids":[5,98,2]} ] -> expand $.movie_ids;
# jaql.x("[ {\"name\":\"Jon Doe\", \"movie_ids\":[3,65,8,72]}, {\"name\":\"Jane Dean\",\"movie_ids\":[5,98,2]} ] -> expand $.movie_ids;");
# [ {"name":"Jon Doe", "movie_ids":[3,65,8,72]}, {"name":"Jane Dean","movie_ids":[5,98,2]} ] as $ -> expand: $.movie_ids => <result>
# j_json( [ {"name":"Jon Doe", "movie_ids":[3,65,8,72]}, {"name":"Jane Dean","movie_ids":[5,98,2]} ] ) j_expand( j_var( $ ) , j_var( $. j_var( movie_ids ) ) ) j_output()

# j_json( [ {"name":"Jon Doe", "movie_ids":[3,65,8,72]}, {"name":"Jane Dean", "movie_ids":[5,98,2]} ] )
(x1,x2,x3,x4,x5,x6,x7) := json.shred("[ {\"name\":\"Jon Doe\", \"movie_ids\":[3,65,8,72]}, {\"name\":\"Jane Dean\",\"movie_ids\":[5,98,2]} ] -> expand $.movie_ids;");
json.print(out, x1,x2,x3,x4,x5,x6,x7);

# j_var( arr )
o4 := algebra.selectH(x1, 0@0); # semantic: first is outermost array
o0 := algebra.semijoin(x5, o4);
o2 := bat.reverse(o0);
o1 := algebra.semijoin(x1, o2);
# = identical

# j_var( $. j_var( movie_ids ) )
# semantic: deref means object
f0 := algebra.uselect(o1, 'o');
f1 := algebra.semijoin(x6, f0);
f2 := bat.reverse(f1);
f3 := algebra.semijoin(x7, f2);
f4 := algebra.uselect(f3, "movie_ids");
f5 := algebra.semijoin(x1, f4);
o3 := algebra.uselect(f5, 'a');  # only arrays match
# = produces elems from x1 (identical interface)

# j_expand( o1 , o3 )
# construct json with these elements in the outermost array
o6 := algebra.semijoin(x5, o3);
o7 := algebra.project(0@0, o6); # semantic: first is outermost array
# remove nested arrays, collapse all of their content to top-level array
o8 := algebra.sunion(o0, o6);
o9 := algebra.sdifference(x5, o8);
o5 := bat.insert(o9, o7);
# = identical

# j_output()
json.print(out, x1,x2,x3,x4,o5,x6,x7);
