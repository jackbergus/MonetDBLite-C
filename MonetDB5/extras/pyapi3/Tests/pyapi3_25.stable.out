stdout of test 'pyapi3_25` in directory 'monetdb5/extras/pyapi3` itself:


# 12:40:00 >  
# 12:40:00 >  "mserver5" "--debug=10" "--set" "gdk_nr_threads=0" "--set" "mapi_open=true" "--set" "mapi_port=30737" "--set" "mapi_usock=/var/tmp/mtest-21450/.s.monetdb.30737" "--set" "monet_prompt=" "--forcemito" "--set" "mal_listing=2" "--dbpath=/home/mytherin/opt/var/MonetDB/mTests_sql_backends_monet5" "--set" "mal_listing=0" "--set" "embedded_r=true" "--set" "embedded_py=true"
# 12:40:00 >  

# MonetDB 5 server v11.22.0
# This is an unreleased version
# Serving database 'mTests_sql_backends_monet5', using 8 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs and 128bit integers dynamically linked
# Found 7.684 GiB available main-memory.
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008-2015 MonetDB B.V., all rights reserved
# Visit http://www.monetdb.org/ for further information
# Listening for connection requests on mapi:monetdb://mytherin-N750JV:30737/
# Listening for UNIX domain connection requests on mapi:monetdb:///var/tmp/mtest-21450/.s.monetdb.30737
# Start processing logs sql/sql_logs version 52200
# Finished processing logs sql/sql_logs
# MonetDB/SQL module loaded
# MonetDB/Python module loaded
# MonetDB/R   module loaded

Ready.
# SQL catalog created, loading sql scripts once
# loading sql script: 09_like.sql
# loading sql script: 10_math.sql
# loading sql script: 11_times.sql
# loading sql script: 12_url.sql
# loading sql script: 13_date.sql
# loading sql script: 14_inet.sql
# loading sql script: 15_querylog.sql
# loading sql script: 16_tracelog.sql
# loading sql script: 17_temporal.sql
# loading sql script: 20_vacuum.sql
# loading sql script: 21_dependency_functions.sql
# loading sql script: 22_clients.sql
# loading sql script: 23_skyserver.sql
# loading sql script: 24_zorder.sql
# loading sql script: 25_debug.sql
# loading sql script: 26_sysmon.sql
# loading sql script: 27_rejects.sql
# loading sql script: 39_analytics.sql
# loading sql script: 39_analytics_hge.sql
# loading sql script: 40_geom.sql
# loading sql script: 40_json.sql
# loading sql script: 40_json_hge.sql
# loading sql script: 41_md5sum.sql
# loading sql script: 45_uuid.sql
# loading sql script: 46_gsl.sql
# loading sql script: 46_profiler.sql
# loading sql script: 51_sys_schema_extension.sql
# loading sql script: 72_fits.sql
# loading sql script: 74_netcdf.sql
# loading sql script: 75_shp.sql
# loading sql script: 75_storagemodel.sql
# loading sql script: 80_statistics.sql
# loading sql script: 80_udf.sql
# loading sql script: 80_udf_hge.sql
# loading sql script: 85_bam.sql
# loading sql script: 90_generator.sql
# loading sql script: 90_generator_hge.sql
# loading sql script: 99_system.sql

# 12:40:00 >  
# 12:40:00 >  "mclient" "-lsql" "-ftest" "-Eutf-8" "-i" "-e" "--host=/var/tmp/mtest-21450" "--port=30737"
# 12:40:00 >  

#START TRANSACTION;
#CREATE TABLE pyapi25table(i integer);
#INSERT INTO pyapi25table VALUES (1), (2), (3), (4);
[ 4	]
#CREATE TABLE pyapi25multiplication(i integer);
#INSERT INTO pyapi25multiplication VALUES (3);
[ 1	]
#CREATE FUNCTION pyapi25(i integer) returns integer
#language PYTHON_MAP
#{
#    res = _conn.execute('SELECT i FROM pyapi25multiplication;')
#    return res['i'] * i
#};
#SELECT pyapi25(i) FROM pyapi25table; #multiply by 3
% sys.L # table_name
% pyapi25_i # name
% int # type
% 2 # length
[ 3	]
[ 6	]
[ 9	]
[ 12	]
#UPDATE pyapi25multiplication SET i=10;
[ 1	]
#SELECT pyapi25(i) FROM pyapi25table; #multiply by 10
% sys.L # table_name
% pyapi25_i # name
% int # type
% 2 # length
[ 10	]
[ 20	]
[ 30	]
[ 40	]
#DROP FUNCTION pyapi25;
#DROP TABLE pyapi25table;
#DROP TABLE pyapi25multiplication;
#CREATE TABLE pyapi25table(i integer);
#INSERT INTO pyapi25table VALUES (1), (2), (3), (4);
[ 4	]
#CREATE FUNCTION pyapi25(i integer) returns integer
#language PYTHON
#{
#    _conn.execute('CREATE TABLE mytable(i INTEGER);')
#    _conn.execute('INSERT INTO mytable VALUES (1), (2), (3), (4);')
#    return i
#};
#SELECT pyapi25(i) FROM pyapi25table;
% sys.L # table_name
% pyapi25_i # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
[ 4	]
#CREATE FUNCTION pyapi25map(i integer) returns integer
#language PYTHON_MAP
#{
#    _conn.execute('UPDATE mytable SET i=i*10;')
#    return i
#};
#SELECT * FROM mytable; # 1,2,3,4
% sys.mytable # table_name
% i # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
[ 4	]
#SELECT pyapi25map(i) FROM pyapi25table;
% sys.L # table_name
% pyapi25map_i # name
% int # type
% 1 # length
[ 1	]
[ 2	]
[ 3	]
[ 4	]
#SELECT * FROM mytable; # 10000, 20000, 30000, 40000 (*10 for every thread, 4 threads because there are 4 entries in pyapi25table)
% sys.mytable # table_name
% i # name
% int # type
% 5 # length
[ 10000	]
[ 20000	]
[ 30000	]
[ 40000	]
#CREATE TABLE pyapi25medians(mean DOUBLE);
#CREATE FUNCTION pyapi25randomtable() returns TABLE(d DOUBLE) LANGUAGE PYTHON
#{
#    numpy.random.seed(33)
#    return numpy.random.rand(1000000)
#};
#CREATE FUNCTION pyapi25mediancompute(d DOUBLE) RETURNS DOUBLE
#language PYTHON_MAP
#{
#    mean = numpy.mean(d)
#    _conn.execute('INSERT INTO pyapi25medians (mean) VALUES (' + str(mean) + ');')
#    return 1
#};
#CREATE TABLE randomtable AS SELECT * FROM pyapi25randomtable() WITH DATA;
#SELECT pyapi25mediancompute(d) FROM randomtable;
% sys.L # table_name
% pyapi25mediancompute_d # name
% double # type
% 24 # length
[ 1	]
[ 1	]
[ 1	]
[ 1	]
[ 1	]
[ 1	]
[ 1	]
[ 1	]
#SELECT pyapi25checker(mean) FROM pyapi25medians;
% sys.L # table_name
% pyapi25checker_mean # name
% boolean # type
% 5 # length
[ true	]
#CREATE FUNCTION pyapi25errortable() returns TABLE(d DOUBLE) LANGUAGE PYTHON_MAP
#{
#    return _conn.execute('SELECT * FROM HOPEFULLYNONEXISTANTTABLE;')
#};
#ROLLBACK;

# 12:40:01 >  
# 12:40:01 >  "Done."
# 12:40:01 >  

