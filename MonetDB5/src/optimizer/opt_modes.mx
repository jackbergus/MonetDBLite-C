@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@f opt_modes
@a M. Kersten
@-
@- Access mode optimization
The routine @code{optimizer.modes()} reduces the number of mode changes of
variables to a minimum. Especially setting a BAT to write mode is expensive,
because it often implies creation of a private copy first.

A full implementation is delayed until really needed.
@{
@mal
pattern optimizer.modes():str
address OPTmodes;
pattern optimizer.modes(mod:str, fcn:str):str
address OPTmodes
comment "Reduce the number of mode changes.";

@h
#ifndef _MAL_MODES_
#define _MAL_MODES_
#include "opt_prelude.h"
#include "opt_support.h"

/* #define DEBUG_OPT_MODES     show partial result */

#endif
@-
The implementation strategy is currently quite simple.
We make a scan to identify all setWriteModes and see if
they are later indeed to target of a function with side
effects.
In a second pass we can then remove/keep them upon need.
@c
#include "opt_modes.h"
#include "mal_interpreter.h"

static int
OPTmodesImplementation(MalBlkPtr mb, MalStkPtr stk, InstrPtr p)
{
	int cnt, i, j,n;
	InstrPtr q;
	int actions = 0;
	(void)stk;

	setLifespan(mb);
	for(i=0; i<mb->stop; i++){
		q= getInstrPtr(mb,i);
		if( getFunctionId(q)== setWriteModeRef && getModuleId(q)== batRef ){
			cnt = 0;
			/* most variables have a very short life span */
			n= getEndLifespan(mb,getArg(q,0));
			for(j= i+1; j<n; j++){
				p= getInstrPtr(mb,j);
				if( ( getFunctionId(p) == insertRef ||
					  getFunctionId(p) == deleteRef ||
					  getFunctionId(p) == appendRef ) &&
					getModuleId(p)== batRef &&
					getArg(p,1) == getArg(q,0)) 
						cnt++;
			}
			if( cnt == 0) {
				/* turn it into an alias */
				setModuleId(q,NULL);
				setFunctionId(q,NULL);
				q->token= ASSIGNsymbol;
				q->argc= 2;
				q->fcn= NULL;
				actions++;
			} 
		} 
	}
#ifdef DEBUG_OPT_MODES
	stream_printf(GDKout,"OPTIMIZE MODES\n");
	printFunction(GDKout,mb,LIST_MAL_ALL);
#endif
	return actions;
}
@include optimizerWrapper.mx
@h
@:exportOptimizer(modes)@
@c
@:wrapOptimizer(modes,OPT_CHECK_ALL)@
@}
