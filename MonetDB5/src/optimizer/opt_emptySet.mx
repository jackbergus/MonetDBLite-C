@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@f opt_emptySet
@a M. Kersten
@-
@node Empty Set Reduction, Singleton Sets, Constant Expressions, Toolkit
@- Emptyset Reduction
One of the key decisions during MAL optimization is to estimate
the size of the BATs produced and consumed. Two cases are of interest
for symbolic processing. Namely when a BAT is known to contain no
tuples and those that have precisely one element.
Such information may come from application domain knowledge or as a
side effect from symbolic evaluation. It is associated with the
program under inspection as properties.

The empty set property is used by the reduction algorithm
presented here. Any empty set is propagated through the program
to arrive at a smaller and therefore faster evaluation.

For example, consider the following MAL test 
@example
@verbatim
    V1 := bat.new(:void,:int);
    V7 := bat.new(:void,:int);
    V10{rows=0} := bat.new(:int,:void);
    V11 := bat.reverse(V10);
    V12 := algebra.kdifference(V7,V11);
    V16 := algebra.markH(V12);
    V17 := algebra.join(V16,V7);
    bat.append(V1,V17);
	optimizer.emptySet();
@end verbatim
@end example
Calling the emptySet optimizer replaces this program
by the following code snippet.
@example
     V1 := bat.new(:void,:int);
     V7 := bat.new(:void,:int);
     V16 := algebra.markH(V7);
     V17 := algebra.join(V16,V7);
     bat.append(V1,V17);
@end example
During empty set propagation, new candidates may appear. For example,
taking the intersection with an empty set creates a target variable
that is empty too. It becomes an immediate target for optimization.
The current implementation is conservative. A limited set of
instructions is considered, geared at SQL.
Any addition to the MonetDB instruction
set would call for assessment on their effect.
@{
The implementation differs slightly from other optimizers in that
we need first to collect the BAT variables that are designated as being empty
@mal
pattern optimizer.emptySet():str
address OPTemptySet;
pattern optimizer.emptySet(mod:str, fcn:str):str
address OPTemptySet
comment "Symbolic evaluation of empty BAT expressions";
@h
#ifndef _MAL_EMPTYSET_
#define _MAL_EMPTYSET_
#include "opt_prelude.h"
#include "opt_support.h"

/* #define DEBUG_OPT_EMPTYSET	 show partial result */
#endif
@c
#include "opt_emptySet.h"
#include "opt_aliases.h"
#include "opt_deadcode.h"
#include "mal_interpreter.h"	/* for showErrors() */
#include "mal_builder.h"

#define propagate(X) {p->token= ASSIGNsymbol; setVarUsed(mb,getArg(p,1),TRUE); \
	getArg(p,1)= getArg(p,X); p->argc = 2; p->fcn = 0; doAR++;\
	if( getVarType(mb,getArg(p,0)) == getVarType(mb,getArg(p,1)) ) { \
		setModuleId(p,NULL); setFunctionId(p,NULL); \
	} else { setModuleId(p,batcalcRef); setFunctionId(p,identityRef);} }

static void
ESevaluate(MalBlkPtr mb, char *empty)
{
	int i, j, k, limit, doAR = 0,tpe;
	InstrPtr p;
	str likeRef = getName("like", 4);
	str existRef = getName("exist", 5);
	str uniqueRef = getName("unique", 6);
	str suniqueRef = getName("sunique", 7);
	str kuniqueRef = getName("kunique", 7);
	str intersectRef = getName("intersect", 9);
	str sintersectRef = getName("sintersect", 10);
	str kintersectRef = getName("kintersect", 10);
	str fragmentRef = getName("fragment", 8);
	str fetchjoinRef = getName("fetchjoin", 9);
	str mergejoinRef = getName("mergejoin", 9);
	str indexjoinRef = getName("indexjoin", 9);
	str hashjoinRef = getName("hashjoin", 8);
	str cartesianproductRef = getName("cartesianproduct", 16);

	setLifespan(mb);
	limit= mb->stop;

	/* Symbolic evaluation of the empty BAT variables */
	/* by looking at empty BAT arguments */
	for (i = k = 0; i < limit; i++) {
		p = getInstrPtr(mb,i);
		mb->stmt[k++] = p;
@-
If the target variable is already marked as containing zero rows,
the statement itself can then be removed.
@= makeEmptySet
		setModuleId(p, batRef);
		setFunctionId(p, newRef);
		p->argc = 1;
		tpe= getVarType(mb,getArg(p,0));
		pushArgument(mb,p,newTypeVariable(mb,getHeadType(tpe)));
		pushArgument(mb,p,newTypeVariable(mb,getTailType(tpe)));
		doAR++;
@c
		if (p->retc==1 && empty[getArg(p, 0)] &&
			isaBatType(getArgType(mb,p,0)) ) {
			@:makeEmptySet@
		}
@-
The bulk of the intelligence lies in inspecting calling
sequences to filter and replace calls with empty arguments.
@c
		for (j = p->retc; j < p->argc; j++)
			if (empty[getArg(p, j)]) {
				/* decode operations */
				if (getModuleId(p) == batRef) {
					if (getFunctionId(p)== insertRef || 
						getFunctionId(p)== deleteRef || 
						getFunctionId(p)== appendRef) {
						if (j == 2) {
							/* represents an empty bulk update */
							/* which does not produce a result */
							freeInstruction(p);
							k--;
						}
					} else 
					if (getFunctionId(p)== reverseRef ){
					}
					break;
				} 
				if (getModuleId(p)== algebraRef) {
					if (getFunctionId(p) == existRef) {
						/* always false */
						setModuleId(p, NULL);
						setFunctionId(p, NULL);
						p->argc = 1;
						p->token = ASSIGNsymbol;
						pushBit(mb, p, FALSE);
						doAR++;
						break;
					} 
					if ( getFunctionId(p) == selectRef || 
						getFunctionId(p) == uselectRef || 
						getFunctionId(p) == tuniqueRef || 
						getFunctionId(p) == likeRef  || 
						getFunctionId(p) == sortHRef  || 
						getFunctionId(p) == sortTRef  ||
						getFunctionId(p) == sortHTRef  || 
						getFunctionId(p) == sortTHRef  || 
						getFunctionId(p) == uniqueRef  || 
						getFunctionId(p) == suniqueRef  || 
						getFunctionId(p) == kuniqueRef  ||
						getFunctionId(p) == intersectRef  || 
						getFunctionId(p) == sintersectRef  || 
						getFunctionId(p) == kintersectRef  ||
						getFunctionId(p) == fragmentRef ){

						/* result is empty */
						propagate(1);
						break;
					} 
					if ( getFunctionId(p) == differenceRef || 
						getFunctionId(p) == kdifferenceRef ) {
						propagate(1);
						break;
					}
					if ( getFunctionId(p) == sunionRef || 
						 getFunctionId(p) == kunionRef || 
						 getFunctionId(p) == unionRef) {
						/* copy non-empty argument */
						if( j == 1) {
							propagate(2);
						} else {
							propagate(1);
						}
						break;
					} 
					if ( getFunctionId(p) == joinRef || 
						getFunctionId(p) == semijoinRef ||
						getFunctionId(p) == fetchjoinRef ||
						getFunctionId(p) == mergejoinRef || 
						getFunctionId(p) == indexjoinRef || 
						getFunctionId(p) == hashjoinRef || 
						getFunctionId(p) == cartesianproductRef
						) {
						/* should always produce an empty bat */
						@:makeEmptySet@
						break;
					} 
					if (getFunctionId(p) == countRef) {
						/* count propagation */
						setModuleId(p, NULL);
						setFunctionId(p, NULL);
						p->argc = 1;
						p->token = ASSIGNsymbol;
						pushLng(mb,p,0);
						doAR++;
						break;
					}
					/* CONTINUE WITH THETA JOIN */
				}
			}
	}
	mb->stop= k;
#ifdef DEBUG_OPT_EMPTYSET
	printf("FINAL STAGE errors=%d\n", mb->errors);
	printFunction(GDKout, mb, LIST_MAL_ALL);
#endif
}
@-
We first have to find all candidates for empty set removal.
They are recognized by an estimated zero row count and they
are not the target of an update.
@c

int
OPTemptySetImplementation(MalBlkPtr mb, MalStkPtr stk, InstrPtr p)
{
	char *empty;
	int i;
	int *rows;
	PropertySet ps;

	empty = (char *) alloca(mb->vtop * sizeof(int));
	memset(empty,0,mb->vtop);
	(void) stk;
	(void) p;
#ifdef DEBUG_OPT_EMPTYSET
	printf("ESoptimizer called, collect empty sets and process them\n");
#endif
	for (i = 0; i < mb->vtop; i++) {
		ps = getVarProperties(mb, i);
		if ( (rows= (int*) getPropertyValue(ps, "rows"))   && *rows == 0) {
#ifdef DEBUG_OPT_EMPTYSET
	if( k == 0)
		stream_printf(GDKout, "START emptyset optimizer %d", i);
	else
		stream_printf(GDKout, ",%d ", i);
#endif
			empty[i] = 1;
		} 
	}
#ifdef DEBUG_OPT_EMPTYSET
	stream_printf(GDKout, "\n");
#endif
	ESevaluate(mb, empty);
	return 1;
}

@include optimizerWrapper.mx
@h
@:exportOptimizer(emptySet)@
@c
@:wrapOptimizer(emptySet,OPT_CHECK_ALL)@
@}
