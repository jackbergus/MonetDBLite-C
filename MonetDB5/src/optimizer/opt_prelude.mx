@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@f opt_prelude
@a M. Kersten
These definitions are handy to have around in the optimizer
@h
#ifndef MAL_PRELUDE
#define MAL_PRELUDE
#include "opt_support.h"

opt_export  str aggrRef;
opt_export  str algebraRef;
opt_export  str appendRef;
opt_export  str avgRef;
opt_export  str batRef;
opt_export  str batcalcRef;
opt_export  str batstrRef;
opt_export  str bbpRef;
opt_export  str bindRef;
opt_export  str evalRef;
opt_export  str bindidxRef;
opt_export  str binddbatRef;
opt_export  str calcRef;
opt_export  str countRef;
opt_export  str crossRef;
opt_export  str deleteRef;
opt_export  str depositRef;
opt_export  str expandRef;
opt_export  str finishRef;
opt_export  str generatorRef;
opt_export  str groupRef;
opt_export  str getRef;
opt_export  str ioRef;
opt_export  str insertRef;
opt_export  str inplaceRef;
opt_export  str joinRef;
opt_export  str kdifferenceRef;
opt_export  str kunionRef;
opt_export  str likeselectRef;
opt_export  str lookupRef;
opt_export  str markTRef;
opt_export  str matRef;
opt_export  str mmathRef;
opt_export  str maxRef;
opt_export  str minRef;
opt_export  str mirrorRef;
opt_export  str mserverRef;
opt_export  str newRef;
opt_export  str packRef;
opt_export  str pbmRef;
opt_export  str plusRef;
opt_export  str printRef;
opt_export  str putRef;
opt_export  str queryRef;
opt_export  str reverseRef;
opt_export  str reconnectRef;
opt_export  str replaceRef;
opt_export  str rpcRef;
opt_export  str resultSetRef;
opt_export  str rsColumnRef;
opt_export  str selectRef;
opt_export  str semijoinRef;
opt_export  str setAccessRef;
opt_export  str setWriteModeRef;
opt_export  str sortRef;
opt_export  str sqlRef;
opt_export  str sumRef;
opt_export  str uselectRef;
opt_export  str unpackRef;
opt_export  str unsafeRef;
opt_export  str bind_dbatRef;

opt_export void optimizerInit(void);
#endif
@c
#include "opt_support.h"
#include "opt_prelude.h"

str aggrRef;
str algebraRef;
str appendRef;
str avgRef;
str batRef;
str batcalcRef;
str batstrRef;
str bbpRef;
str evalRef;
str bindRef;
str bindidxRef;
str binddbatRef;
str calcRef;
str countRef;
str crossRef;
str deleteRef;
str depositRef;
str expandRef;
str finishRef;
str generatorRef;
str groupRef;
str getRef;
str insertRef;
str inplaceRef;
str ioRef;
str joinRef;
str kdifferenceRef;
str kunionRef;
str likeselectRef;
str lookupRef;
str markTRef;
str matRef;
str mmathRef;
str maxRef;
str minRef;
str mirrorRef;
str mserverRef;
str newRef;
str packRef;
str pbmRef;
str plusRef;
str printRef;
str putRef;
str queryRef;
str reverseRef;
str reconnectRef;
str replaceRef;
str rpcRef;
str resultSetRef;
str rsColumnRef;
str selectRef;
str semijoinRef;
str setAccessRef;
str setWriteModeRef;
str sortRef;
str sqlRef;
str sumRef;
str uselectRef;
str unpackRef;
str unsafeRef;
str bind_dbatRef;


void optimizerInit(){
	if(batRef == NULL){
		aggrRef = putName("aggr",4);
		algebraRef = putName("algebra",7);
		appendRef = putName("append",6);
		avgRef = putName("avg",3);
		batRef = putName("bat",3);
		batcalcRef = putName("batcalc",7);
		batstrRef = putName("batstr",6);
		bbpRef = putName("bbp",3);
		evalRef = putName("eval",4);
		bindRef = putName("bind",4);
		bindidxRef = putName("bind_idxbat",11);
		binddbatRef = putName("bind_dbat",9);
		calcRef = putName("calc",4);
		countRef = putName("count",5);
		crossRef = putName("cross",5);
		deleteRef = putName("delete",6);
		depositRef = putName("deposit",7);
		finishRef = putName("finish",6);
		expandRef = putName("expand",6);
		groupRef = putName("group",5);
		getRef = putName("get",3);
		generatorRef = putName("generator",9);
		insertRef = putName("insert",6);
		inplaceRef = putName("inplace",7);
		ioRef = putName("io",2);
		joinRef = putName("join",4);
		kdifferenceRef= putName("kdifference",11);
		kunionRef= putName("kunion",6);
		likeselectRef = putName("likeselect",10);
		lookupRef = putName("lookup",6);
		markTRef = putName("markT",5);
		matRef = putName("mat",3);
		mmathRef = putName("mmath",5);
		maxRef = putName("max",3);
		minRef = putName("min",3);
		mirrorRef = putName("mirror",6);
		mserverRef = putName("mserver",7);
		newRef = putName("new",3);
		packRef = putName("pack",4);
		pbmRef = putName("pbm",3);
		plusRef = putName("+",1);
		printRef = putName("print",5);
		putRef = putName("put",3);
		queryRef = putName("query",5);
		reverseRef = putName("reverse",7);
		reconnectRef = putName("reconnect",9);
		replaceRef = putName("replace",7);
		rpcRef = putName("rpc",3);
		resultSetRef = putName("resultSet",9);
		rsColumnRef = putName("rsColumn",8);
		selectRef = putName("select",6);
		semijoinRef = putName("semijoin",8);
		setAccessRef = putName("setAccess",9);
		setWriteModeRef= putName("setWriteMode",12);
		sortRef = putName("sort",4);
		sqlRef = putName("sql",3);
		sumRef = putName("sum",3);
		uselectRef = putName("uselect",7);
		unpackRef = putName("unpack",6);
		unsafeRef = putName("unsafe",6);
		bind_dbatRef = putName("bind_dbat",9);
	}
}
