@- Optimizer code wrapper
The optimizer wrapper code is the interface to the MAL optimizer calls.
It prepares the environment for the optimizers to do their work and removes
the call itself to avoid endless recursions.

Before an optimizer is finished, it should leave a clean state behind.
Moreover, the information of the optimization step is saved for
debugging and analysis.

The wrapper expects the optimizers to return the number of
actions taken, i.e. number of succesful changes to the code.
@= exportOptimizer
opt_export str OPT@1(MalBlkPtr mb, MalStkPtr stk, InstrPtr p);

@= wrapOptimizer
str OPT@1(MalBlkPtr mb, MalStkPtr stk, InstrPtr p){
	str modnme;
	str fcnnme;
	Module  scope=NULL;
	Symbol s= NULL;
	lng clk= GDKusec();
	int actions = 0;

	optimizerInit();
	if( p )
		removeInstruction(mb, p);
	if( p && p->argc > 1 && getFunctionId(p) != multiplexRef){
		if( getArgType(mb,p,1) != TYPE_str ||
			getArgType(mb,p,2) != TYPE_str ||
			!isConstant(mb,getArg(p,1)) ||
			!isConstant(mb,getArg(p,2))
		) {
			char buf[1024];
			snprintf(buf,1024, "Optimizer requires constant string arguments\n");
			return throwMessage("optimizer.@1",buf);
		}
		if( stk != 0){
			modnme= (str)getArgValue(stk,p,1);
			fcnnme= (str)getArgValue(stk,p,2);
		} else {
			modnme= getArgDefault(mb,p,1);
			fcnnme= getArgDefault(mb,p,2);
		}
		scope = findModule(MCgetClient()->nspace,putName(modnme,strlen(modnme)) );
		if( scope)
			s= findSymbolInModule(scope,putName(fcnnme,strlen(fcnnme)));

		if( s == NULL) {
			char buf[1024];
			snprintf(buf,1024, "Could not find %s.%s\n",modnme,fcnnme);
			return throwMessage("optimizer.@1",buf);
		}
		mb = s->def;
		stk= 0;
	} 
	if( mb->errors )
		return MAL_SUCCEED;
	addtoMalBlkHistory(mb);
	actions= OPT@1Implementation(mb,stk,p);
    optimizerCheck(mb, "optimizer.@1", actions, GDKusec() - clk,@2);
	return MAL_SUCCEED;
}
