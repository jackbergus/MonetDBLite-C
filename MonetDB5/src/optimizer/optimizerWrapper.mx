@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2007 CWI.
@' All Rights Reserved.

@- Optimizer code wrapper
The optimizer wrapper code is the interface to the MAL optimizer calls.
It prepares the environment for the optimizers to do their work and removes
the call itself to avoid endless recursions.

Before an optimizer is finished, it should leave a clean state behind.
Moreover, the information of the optimization step is saved for
debugging and analysis.

The wrapper expects the optimizers to return the number of
actions taken, i.e. number of succesful changes to the code.
@= exportOptimizer
opt_export str OPT@1(MalBlkPtr mb, MalStkPtr stk, InstrPtr p);

@= wrapOptimizer
/* #define _DEBUG_OPTIMIZER_*/

str OPT@1(MalBlkPtr mb, MalStkPtr stk, InstrPtr p){
	str modnme;
	str fcnnme;
	Module  scope=NULL;
	Symbol s= NULL;
	lng t,clk= GDKusec();
	int actions = 0;

	optimizerInit();
	if( p )
		removeInstruction(mb, p);
#ifdef _DEBUG_OPTIMIZER_
	stream_printf(GDKout,"apply @1\n");
	printFunction(GDKout,mb,LIST_MAL_ALL);
#endif
	if( p && p->argc > 1 ){
#ifdef _DEBUG_OPTIMIZER_
		stream_printf(GDKout,"locate function @1\n");
#endif
		if( getArgType(mb,p,1) != TYPE_str ||
			getArgType(mb,p,2) != TYPE_str ||
			!isConstant(mb,getArg(p,1)) ||
			!isConstant(mb,getArg(p,2))
		) {
			char buf[1024];
			snprintf(buf,1024, "Optimizer requires constant string arguments\n");
			throw(MAL, "optimizer.@1",buf);
		}
		if( stk != 0){
			modnme= (str)getArgValue(stk,p,1);
			fcnnme= (str)getArgValue(stk,p,2);
		} else {
			modnme= getArgDefault(mb,p,1);
			fcnnme= getArgDefault(mb,p,2);
		}
		scope = findModule(MCgetClient()->nspace,putName(modnme,strlen(modnme)) );
		if( scope)
			s= findSymbolInModule(scope,putName(fcnnme,strlen(fcnnme)));

		if( s == NULL) {
			char buf[1024];
			snprintf(buf,1024, "Could not find %s.%s\n",modnme,fcnnme);
			throw(MAL, "optimizer.@1",buf);
		}
#ifdef _DEBUG_OPTIMIZER_
		stream_printf(GDKout,"@1 %s %d\n",modnme,fcnnme);
#endif
		mb = s->def;
		stk= 0;
	} 
	if( mb->errors )
		return MAL_SUCCEED;
	actions= OPT@1Implementation(mb,stk,p);
#ifdef _DEBUG_OPTIMIZER_
	stream_printf(GDKout,"finished @1 %d\n",actions);
	printFunction(GDKout,mb,LIST_MAL_ALL);
#endif
    optimizerCheck(mb, "optimizer.@1", actions, t=(GDKusec() - clk),@2);
	QOTupdateStatistics("@1",actions,t);
	addtoMalBlkHistory(mb,"@1");
	return MAL_SUCCEED;
}
