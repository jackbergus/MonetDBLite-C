stdout of test 'part02` in directory 'src/optimizer` itself:


# 23:53:02 >  
# 23:53:02 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=39352 --set sql_port=45171 --set xquery_port=52900 --set monet_prompt= --trace --dbname=mTests_src_optimizer  part02.mal </dev/null
# 23:53:02 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
##testing the partition optimizer
#
#a1:= bbp.new(:void,:int);
#bat.setSequenceBase(a1,0@0);
#a2:= bbp.new(:void,:int);
#bat.setSequenceBase(a2,10@0);
#a3:= bbp.new(:void,:int);
#bat.setSequenceBase(a3,20@0);
#
#b1:= bbp.new(:void,:int);
#bat.setSequenceBase(b1,0@0);
#b2:= bbp.new(:void,:int);
#bat.setSequenceBase(b2,10@0);
#b3:= bbp.new(:void,:int);
#bat.setSequenceBase(b3,20@0);
#
#barrier (go,i):= mal.newRange(0);
#	bat.insert(a1,nil,i);
#	bat.insert(a2,nil,i);
#	bat.insert(a3,nil,i);
#	bat.insert(b1,nil,i);
#	bat.insert(b2,nil,i);
#	bat.insert(b3,nil,i);
#	redo (go,i):= mal.nextElement(1,10);
#exit (go,i);
#
#
## add it to the BAT partition table
#partitions.deposit(a1);
#partitions.deposit(a1,a2);
#partitions.deposit(a1,a3);
#partitions.deposit(b1);
#partitions.deposit(b1,b2);
#partitions.deposit(b1,b3);
#partitions.dump();
#
## this query is already tricky because there are
## two sinks. A naive translation will produce
## a double nested loop
#function qry(a:bat[:void,:int], b:bat[:int,:void]);
#	io.print("experiment 3");
#	j:= algebra.join(a,b);
#	io.print(j);
#end qry;
function user.qry(a:bat[:void,:int],b:bat[:int,:void]):void;	# 0  (qry:void)<-(a:bat[:void,:int])(b:bat[:int,:void])
    io.print("experiment 3");	# 1 IOprint_val (_3:int)<-(_4:str)
    j := algebra.join(a,b);	# 2 ALGjoin (j:bat[:void,:oid])<-(a:bat[:void,:int])(b:bat[:int,:void])
    io.print(j);	# 3 IOprint_val (_6:int)<-(j:bat[:void,:oid])
end qry;	# 4  
#
#optimizer.partitionedQuery("user","qry");
#mdb.list("user","qry");
#io.print("run experiment");
#br:= bat.reverse(b1);
#user.qry(a1,br);
#
start first=1 last=3 
replace first=2 last=3 
variable replacement 'a' instructions 2-3  lifespan 2-2
first=7 last=7 
first=8 last=7 
function user.main():int;	# 0  (main:int)
#testing the partition optimizer 	# 1  (_2:str)
    a1 := bbp.new(:void,:int);	# 2 CMDBATnew (a1:bat[:void,:int])<-(_4:void)(_5:int)
    bat.setSequenceBase(a1,0@0);	# 3 BKCsetSequenceBase (_6:bat[:void,:int])<-(a1:bat[:void,:int])(_7:oid)
    a2 := bbp.new(:void,:int);	# 4 CMDBATnew (a2:bat[:void,:int])<-(_4:void)(_5:int)
    bat.setSequenceBase(a2,10@0);	# 5 BKCsetSequenceBase (_9:bat[:void,:int])<-(a2:bat[:void,:int])(_10:oid)
    a3 := bbp.new(:void,:int);	# 6 CMDBATnew (a3:bat[:void,:int])<-(_4:void)(_5:int)
    bat.setSequenceBase(a3,20@0);	# 7 BKCsetSequenceBase (_12:bat[:void,:int])<-(a3:bat[:void,:int])(_13:oid)
    b1 := bbp.new(:void,:int);	# 8 CMDBATnew (b1:bat[:void,:int])<-(_4:void)(_5:int)
    bat.setSequenceBase(b1,0@0);	# 9 BKCsetSequenceBase (_15:bat[:void,:int])<-(b1:bat[:void,:int])(_7:oid)
    b2 := bbp.new(:void,:int);	# 10 CMDBATnew (b2:bat[:void,:int])<-(_4:void)(_5:int)
    bat.setSequenceBase(b2,10@0);	# 11 BKCsetSequenceBase (_17:bat[:void,:int])<-(b2:bat[:void,:int])(_10:oid)
    b3 := bbp.new(:void,:int);	# 12 CMDBATnew (b3:bat[:void,:int])<-(_4:void)(_5:int)
    bat.setSequenceBase(b3,20@0);	# 13 BKCsetSequenceBase (_19:bat[:void,:int])<-(b3:bat[:void,:int])(_13:oid)
barrier (go,i):= mal.newRange(0);	# 14 RNGnewRange_int (go:bit)(i:int)<-(_22:int) jump 22
    bat.insert(a1,nil,i);	# 15 BKCinsert_bun (_23:bat[:void,:int])<-(a1:bat[:void,:int])(_24:void)(i:int)
    bat.insert(a2,nil,i);	# 16 BKCinsert_bun (_25:bat[:void,:int])<-(a2:bat[:void,:int])(_24:void)(i:int)
    bat.insert(a3,nil,i);	# 17 BKCinsert_bun (_26:bat[:void,:int])<-(a3:bat[:void,:int])(_24:void)(i:int)
    bat.insert(b1,nil,i);	# 18 BKCinsert_bun (_27:bat[:void,:int])<-(b1:bat[:void,:int])(_24:void)(i:int)
    bat.insert(b2,nil,i);	# 19 BKCinsert_bun (_28:bat[:void,:int])<-(b2:bat[:void,:int])(_24:void)(i:int)
    bat.insert(b3,nil,i);	# 20 BKCinsert_bun (_29:bat[:void,:int])<-(b3:bat[:void,:int])(_24:void)(i:int)
    redo (go,i):= mal.nextElement(1,10);	# 21 RNGnextElement_int (go:bit)(i:int)<-(_30:int)(_31:int) jump 15
exit (go,i);	# 22  (go:bit)(i:int)
# add it to the BAT partition table 	# 23  (_33:str)
    partitions.deposit(a1);	# 24 BPTdeposit (_34:void)<-(a1:bat[:void,:int])
    partitions.deposit(a1,a2);	# 25 BPTdeposit2 (_35:void)<-(a1:bat[:void,:int])(a2:bat[:void,:int])
    partitions.deposit(a1,a3);	# 26 BPTdeposit2 (_36:void)<-(a1:bat[:void,:int])(a3:bat[:void,:int])
    partitions.deposit(b1);	# 27 BPTdeposit (_37:void)<-(b1:bat[:void,:int])
    partitions.deposit(b1,b2);	# 28 BPTdeposit2 (_38:void)<-(b1:bat[:void,:int])(b2:bat[:void,:int])
    partitions.deposit(b1,b3);	# 29 BPTdeposit2 (_39:void)<-(b1:bat[:void,:int])(b3:bat[:void,:int])
    partitions.dump();	# 30 BPTdump (_40:void)
# this query is already tricky because there are 	# 31  (_42:str)
# two sinks. A naive translation will produce 	# 32  (_44:str)
# a double nested loop 	# 33  (_46:str)
    mdb.list("user","qry");	# 34 MDBlist3 (_50:void)<-(_48:str)(_49:str)
    io.print("run experiment");	# 35 IOprint_val (_51:int)<-(_52:str)
    br := bat.reverse(b1);	# 36 BKCreverse (br:bat[:int,:void])<-(b1:bat[:void,:int])
    user.qry(a1,br);	# 37  (_54:void)<-(a1:bat[:void,:int])(br:bat[:int,:void])
end main;	# 38  
ptop=6 plimit=1024
[0] bid=13 pid=13 f=0, l=10 prv=-1 nxt=1 cap=-1
[1] bid=13 pid=14 f=10, l=20 prv=0 nxt=2 cap=-1
[2] bid=13 pid=15 f=20, l=30 prv=1 nxt=-1 cap=-1
[3] bid=16 pid=16 f=0, l=10 prv=-1 nxt=4 cap=-1
[4] bid=16 pid=17 f=10, l=20 prv=3 nxt=5 cap=-1
[5] bid=16 pid=18 f=20, l=30 prv=4 nxt=-1 cap=-1
function user.qry(a:bat[:void,:int],b:bat[:int,:void]):void;
    io.print("experiment 3");
barrier (_7,_8):= partitions.newIterator(a);
    j := algebra.join(_8,b);
    io.print(j);
    redo (_7,_8):= partitions.hasMoreElements(a);
exit (_7,_8);
end qry;
[ "run experiment" ]
[ "experiment 3" ]
#-----------------#
# h	t	  # name
# oid	oid	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ 1@0,	  1@0	  ]
[ 2@0,	  2@0	  ]
[ 3@0,	  3@0	  ]
[ 4@0,	  4@0	  ]
[ 5@0,	  5@0	  ]
[ 6@0,	  6@0	  ]
[ 7@0,	  7@0	  ]
[ 8@0,	  8@0	  ]
[ 9@0,	  9@0	  ]
#-----------------#
# h	t	  # name
# oid	oid	  # type
#-----------------#
[ 10@0,	  0@0	  ]
[ 11@0,	  1@0	  ]
[ 12@0,	  2@0	  ]
[ 13@0,	  3@0	  ]
[ 14@0,	  4@0	  ]
[ 15@0,	  5@0	  ]
[ 16@0,	  6@0	  ]
[ 17@0,	  7@0	  ]
[ 18@0,	  8@0	  ]
[ 19@0,	  9@0	  ]
#-----------------#
# h	t	  # name
# oid	oid	  # type
#-----------------#
[ 20@0,	  0@0	  ]
[ 21@0,	  1@0	  ]
[ 22@0,	  2@0	  ]
[ 23@0,	  3@0	  ]
[ 24@0,	  4@0	  ]
[ 25@0,	  5@0	  ]
[ 26@0,	  6@0	  ]
[ 27@0,	  7@0	  ]
[ 28@0,	  8@0	  ]
[ 29@0,	  9@0	  ]

# 23:53:02 >  
# 23:53:02 >  Done.
# 23:53:02 >  

