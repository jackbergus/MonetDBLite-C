stdout of test 'partitions03` in directory 'src/optimizer` itself:


# 08:13:11 >  
# 08:13:11 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=34997 --set xrpc_port=44808 --set monet_prompt= --trace --dbname=mTests_src_optimizer  partitions03.mal
# 08:13:11 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
##testing the BAT partition manager
## use a fake sql library
## see how you handle an aggregation
#module sql;
#pattern bind(s:str,t:str,i:str,flag:int):bat[:oid,:int]
pattern sql.bind(s:str,t:str,i:str,flag:int):bat[:oid,:int] address MDBdummy;#  0 bind:bat[:oid,:int] := sql.bind(s:str, t:str, i:str, flag:int) {G}
#pattern rsColumn(b:any...):void
pattern sql.rsColumn(b:any...):void address MDBdummy;#  0 rsColumn:void := sql.rsColumn(b:any) {P}
#pattern resultSet(b:any...):void
pattern sql.resultSet(b:any...):void address MDBdummy;#  0 resultSet:void := sql.resultSet(b:any) {P}
#pattern exportResult(b:any...):void
pattern sql.exportResult(b:any...):void address MDBdummy;#  0 exportResult:void := sql.exportResult(b:any) {P}
#pattern exportValue(b:any...):void
pattern sql.exportValue(b:any...):void address MDBdummy;#  0 exportValue:void := sql.exportValue(b:any) {P}
#
##select i,j from y group by i,j;
#
#function query(A0:sht):void;
#    x1:bat[:oid,:int]{notnil=true,rows=1,bid=1489}  := sql.bind("sys","y","i",0);
#    x6:bat[:oid,:int]{notnil=true,rows=0,bid=1485}  := sql.bind("sys","y","i",1);
#    constraints.emptySet(x6);
#    x8:bat[:oid,:int]{notnil=true,rows=0,bid=1491}  := sql.bind("sys","y","i",2);
#    constraints.emptySet(x8);
#    x16:bat[:oid,:int]{notnil=true,rows=1,bid=1492}  := sql.bind("sys","y","j",0);
#    x11{rows=1} := algebra.markT(x1,0@0);
#    x12{rows=1} := bat.reverse(x11);
#    x13{rows=1} := algebra.join(x12,x1);
#    (ext23,grp21):= group.new(x13);
#    x18{rows=1} := algebra.join(x12,x16);
#    (ext34,grp32):= group.derive(ext23,grp21,x18);
#    x21 := bat.mirror(ext34);
#    x22 := algebra.joinPath(x21,x12,x1);
#    x23 := algebra.joinPath(x21,x12,x16);
#    x24 := sql.resultSet(2,1,x22);
#    sql.rsColumn(x24,"sys.y","i","int",32,0,x22);
#    sql.rsColumn(x24,"sys.y","j","int",32,0,x23);
#    sql.exportResult(x24,"");
#end query;
function sql.query(A0:sht):void;        #  0 query:void := sql.query(A0:sht) {G}
    x1:bat[:oid,:int]{notnil=true,rows=1,bid=1489}  := sql.bind("sys","y","i",0);#  1 x1:bat[:oid,:int] := MDBdummy(_6:str, _7:str, _8:str, _9:int) {G}
    x6:bat[:oid,:int]{notnil=true,rows=0,bid=1485}  := sql.bind("sys","y","i",1);#  2 x6:bat[:oid,:int] := MDBdummy(_6:str, _7:str, _8:str, _4:int) {G}
    constraints.emptySet(x6);           #  3 _12:void := CemptySet(x6:bat[:oid,:int]) 
    x8:bat[:oid,:int]{notnil=true,rows=0,bid=1491}  := sql.bind("sys","y","i",2);#  4 x8:bat[:oid,:int] := MDBdummy(_6:str, _7:str, _8:str, _15:int) {G}
    constraints.emptySet(x8);           #  5 _16:void := CemptySet(x8:bat[:oid,:int]) 
    x16:bat[:oid,:int]{notnil=true,rows=1,bid=1492}  := sql.bind("sys","y","j",0);#  6 x16:bat[:oid,:int] := MDBdummy(_6:str, _7:str, _19:str, _9:int) {G}
    x11{rows=1} := algebra.markT(x1,0@0);#  7 x11:bat[:oid,:oid] := ALGtmark(x1:bat[:oid,:int], _21:oid) {G}
    x12{rows=1} := bat.reverse(x11);    #  8 x12:bat[:oid,:oid] := BKCreverse(x11:bat[:oid,:oid]) {G}
    x13{rows=1} := algebra.join(x12,x1);#  9 x13:bat[:oid,:int] := ALGjoin(x12:bat[:oid,:oid], x1:bat[:oid,:int]) {G}
    (ext23,grp21):= group.new(x13);     # 10 (ext23:bat[:oid,:int], grp21:bat[:oid,:oid]) := GRPgroup(x13:bat[:oid,:int]) {G}
    x18{rows=1} := algebra.join(x12,x16);# 11 x18:bat[:oid,:int] := ALGjoin(x12:bat[:oid,:oid], x16:bat[:oid,:int]) {G}
    (ext34,grp32):= group.derive(ext23,grp21,x18);# 12 (ext34:bat[:oid,:int], grp32:bat[:oid,:oid]) := GRPderive(ext23:bat[:oid,:int], grp21:bat[:oid,:oid], x18:bat[:oid,:int]) {G}
    x21 := bat.mirror(ext34);           # 13 x21:bat[:oid,:oid] := BKCmirror(ext34:bat[:oid,:int]) {G}
    x22 := algebra.joinPath(x21,x12,x1);# 14 x22:bat[:any,:any] := ALGjoinPath(x21:bat[:oid,:oid], x12:bat[:oid,:oid], x1:bat[:oid,:int]) {G}
    x23 := algebra.joinPath(x21,x12,x16);# 15 x23:bat[:any,:any] := ALGjoinPath(x21:bat[:oid,:oid], x12:bat[:oid,:oid], x16:bat[:oid,:int]) {G}
    x24 := sql.resultSet(2,1,x22);      # 16 x24:void := MDBdummy(_15:int, _4:int, x22:bat[:any,:any]) 
    sql.rsColumn(x24,"sys.y","i","int",32,0,x22);# 17 _33:void := MDBdummy(x24:void, _34:str, _8:str, _35:str, _36:int, _9:int, x22:bat[:any,:any]) 
    sql.rsColumn(x24,"sys.y","j","int",32,0,x23);# 18 _37:void := MDBdummy(x24:void, _34:str, _19:str, _35:str, _36:int, _9:int, x23:bat[:any,:any]) 
    sql.exportResult(x24,"");           # 19 _38:void := MDBdummy(x24:void, _39:str) 
end query;	# 20  
#optimizer.partitions("sql","query");
#mdb.list("sql","query");
#
function user.main():void;              #  0 main:void {G}
#testing the BAT partition manager 
# use a fake sql library 
# see how you handle an aggregation 
#select i,j from y group by i,j; 
    mdb.list("sql","query");            #  5 _8:void := MDBlist3(_6:str, _7:str) 
end main;	# 6  
function sql.query(A0:sht):void;
    x1:bat[:oid,:int]{notnil=true,rows=1,bid=1489}  := sql.bind("sys","y","i",0);
    x6:bat[:oid,:int]{notnil=true,rows=0,bid=1485}  := sql.bind("sys","y","i",1);
    bpm10:bat[:oid,:int]  := bpm.unfold(x6);
    bpm.emptySet(bpm10);
    x8:bat[:oid,:int]{notnil=true,rows=0,bid=1491}  := sql.bind("sys","y","i",2);
    bpm13:bat[:oid,:int]  := bpm.unfold(x8);
    bpm.emptySet(bpm13);
    x16:bat[:oid,:int]{notnil=true,rows=1,bid=1492}  := sql.bind("sys","y","j",0);
    x11{rows=1} := algebra.markT(x1,0@0);
    x12{rows=1} := bat.reverse(x11);
    x13{rows=1} := algebra.join(x12,x1);
    (ext23,grp21):= group.new(x13);
    x18{rows=1} := algebra.join(x12,x16);
    (ext34,grp32):= group.derive(ext23,grp21,x18);
    x21 := bat.mirror(ext34);
    x22 := algebra.joinPath(x21,x12,x1);
    x23 := algebra.joinPath(x21,x12,x16);
    x24 := sql.resultSet(2,1,x22);
    sql.rsColumn(x24,"sys.y","i","int",32,0,x22);
    sql.rsColumn(x24,"sys.y","j","int",32,0,x23);
    sql.exportResult(x24,"");
catch SQLexception;
    bpm.garbage(bpm10);
    bpm.garbage(bpm13);
    raise SQLexception;
exit SQLexception;
    bpm.garbage(bpm10);
    bpm.garbage(bpm13);
end query;

# 08:13:11 >  
# 08:13:11 >  Done.
# 08:13:11 >  

