stdout of test 'inline04` in directory 'src/optimizer` itself:


# 18:00:43 >  
# 18:00:43 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=34223 --set xrpc_port=43286 --set monet_prompt= --trace --dbname=mTests_src_optimizer  inline04.mal
# 18:00:43 >  

# MonetDB server v5.3.0, based on kernel v1.21.0
# Serving database 'mTests_src_optimizer'
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2007 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:32348/
function user.foo{inline}(a:int,b:int):int;
    c := calc.+(a,b);
    base := 1;
barrier loop := true;
    c := calc.*(c,c);
    base := calc.+(base,1);
    redo loop := calc.<(base,3);
exit loop;
    return foo := c;
end foo;
function user.qry():void;
    b := bat.new(:oid,:int);
    bat.insert(b,0@0,1);
    z:bat[:oid,:int]  := mal.multiplex("user","foo",b,b);
    z:bat[:oid,:int]  := mal.multiplex("user","foo",b,2);
end qry;
function user.main():void;
# remapping inline functions 
# the crucial part is to recognize valid inlines 
# here the inlined function contains more then 
# just multiplex callable functions. 
    mdb.List("user","qry");
end main;
function user.qry():void;               #  0 qry:void := user.qry() {G}
    b := bat.new(:oid,:int);            #  1 b:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    bat.insert(b,0@0,1);                #  2 _4:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _5:oid, _6:int) {G}
    _14 := batcalc.+(b,b);              #  3 _14:bat[:oid,:int] := CMDbatADD_int_int_int(b:bat[:oid,:int], b:bat[:oid,:int]) {G}
    _15 := 1;                           #  4 _15:int := _6:int 
barrier _16 := true;                    #  5 _16:bit := _17:bit {J9}
    _14 := batcalc.*(_14,_14);          #  6 _14:bat[:oid,:int] := CMDbatMUL_int_int_int(_14:bat[:oid,:int], _14:bat[:oid,:int]) {G}
    _15 := calc.+(_15,1);               #  7 _15:int := CALCbinaryADDintint(_15:int, _6:int) 
    redo _16 := calc.<(_15,3);          #  8 _16:bit := CALCcompLTintint(_15:int, _18:int) {J6}
exit _16;                               #  9 _16:bit 
    z:bat[:oid,:int] {inline} := _14;   # 10 z:bat[:oid,:int] := _14:bat[:oid,:int] {G}
    _22 := batcalc.+(b,2);              # 11 _22:bat[:oid,:int] := CMDbatADDcst_int_int_int(b:bat[:oid,:int], _10:int) {G}
    _23 := 1;                           # 12 _23:int := _6:int 
barrier _24 := true;                    # 13 _24:bit := _17:bit {J17}
    _22 := batcalc.*(_22,_22);          # 14 _22:bat[:oid,:int] := CMDbatMUL_int_int_int(_22:bat[:oid,:int], _22:bat[:oid,:int]) {G}
    _23 := calc.+(_23,1);               # 15 _23:int := CALCbinaryADDintint(_23:int, _6:int) 
    redo _24 := calc.<(_23,3);          # 16 _24:bit := CALCcompLTintint(_23:int, _18:int) {J14}
exit _24;                               # 17 _24:bit 
    z:bat[:oid,:int] {inline} := _22;   # 18 z:bat[:oid,:int] := _22:bat[:oid,:int] {G}
end qry;                                # 19  

# 18:00:43 >  
# 18:00:43 >  Done.
# 18:00:43 >  

