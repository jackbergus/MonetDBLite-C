stdout of test 'tst4030` in directory 'src/optimizer` itself:


# 23:52:52 >  
# 23:52:52 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=39352 --set sql_port=45171 --set xquery_port=52900 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4030.mal </dev/null
# 23:52:52 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
## testing subsumption optimalisation
#r:= bbp.new(:int,:int);
#bat.insert(r,5,1);
#bat.insert(r,6,2);
#bat.insert(r,7,3);
#bat.insert(r,8,4);
#s:= algebra.select(r,0,5);	# equal to a copy
#io.print(s);
#t:= algebra.select(r,0,3);
##print(t);
#u:= algebra.select(r,0,3);	# reuse t
#io.print(u);
#io.print("done");
#optimizer.commonExpressionRemoval();
#optimizer.aliasRemoval();
#
function user.main():void;              #  0 main:void := user.main() {G}
# testing subsumption optimalisation 
    r := bat.new(:int,:int);            #  2 r:bat[:int,:int] := CMDBATnew(_3:int, _3:int) {G}
    bat.insert(r,5,1);                  #  3 _4:bat[:int,:int] := BKCinsert_bun(r:bat[:int,:int], _5:int, _6:int) {G}
    bat.insert(r,6,2);                  #  4 _7:bat[:int,:int] := BKCinsert_bun(r:bat[:int,:int], _8:int, _9:int) {G}
    bat.insert(r,7,3);                  #  5 _10:bat[:int,:int] := BKCinsert_bun(r:bat[:int,:int], _11:int, _12:int) {G}
    bat.insert(r,8,4);                  #  6 _13:bat[:int,:int] := BKCinsert_bun(r:bat[:int,:int], _14:int, _15:int) {G}
    s := algebra.select(r,0,5);         #  7 s:bat[:int,:int] := ALGselect(r:bat[:int,:int], _17:int, _5:int) {G}
# equal to a copy 
    io.print(s);                        #  9 _19:void := IOprint_val(s:bat[:int,:int]) 
    t := algebra.select(r,0,3);         # 10 t:bat[:int,:int] := ALGselect(r:bat[:int,:int], _17:int, _12:int) {G}
#print(t); 
# reuse t 
    io.print(t);                        # 13 _24:void := IOprint_val(t:bat[:int,:int]) 
    io.print("done");                   # 14 _25:void := IOprint_val(_26:str) 
end main;	# 15  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 5,	  1	  ]
[ 6,	  2	  ]
[ 7,	  3	  ]
[ 8,	  4	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 5,	  1	  ]
[ 6,	  2	  ]
[ 7,	  3	  ]
[ "done" ]

# 23:52:52 >  
# 23:52:52 >  Done.
# 23:52:52 >  

