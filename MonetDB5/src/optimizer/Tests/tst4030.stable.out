stdout of test 'tst4030` in directory 'src/optimizer` itself:


# 23:52:52 >  
# 23:52:52 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=39352 --set sql_port=45171 --set xquery_port=52900 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4030.mal </dev/null
# 23:52:52 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
## testing subsumption optimalisation
#r:= bbp.new(:int,:int);
#bat.insert(r,5,1);
#bat.insert(r,6,2);
#bat.insert(r,7,3);
#bat.insert(r,8,4);
#s:= algebra.select(r,0,5);	# equal to a copy
#io.print(s);
#t:= algebra.select(r,0,3);
##print(t);
#u:= algebra.select(r,0,3);	# reuse t
#io.print(u);
#io.print("done");
#optimizer.commonExpressionRemoval();
#optimizer.aliasRemoval();
#
function user.main():void;	# 0  (main:void)
# testing subsumption optimalisation 	# 1  (_1:str)
    r := bat.new(:int,:int);	# 2 CMDBATnew (r:bat[:int,:int])<-(_3:int)(_3:int)
    bat.insert(r,5,1);	# 3 BKCinsert_bun_int_int (_4:void)<-(r:bat[:int,:int])(_5:int)(_6:int)
    bat.insert(r,6,2);	# 4 BKCinsert_bun_int_int (_7:void)<-(r:bat[:int,:int])(_8:int)(_9:int)
    bat.insert(r,7,3);	# 5 BKCinsert_bun_int_int (_10:void)<-(r:bat[:int,:int])(_11:int)(_12:int)
    bat.insert(r,8,4);	# 6 BKCinsert_bun_int_int (_13:void)<-(r:bat[:int,:int])(_14:int)(_15:int)
    s := algebra.select(r,0,5);	# 7 ALGselect (s:bat[:int,:int])<-(r:bat[:int,:int])(_17:int)(_5:int)
# equal to a copy 	# 8  (_18:str)
    io.print(s);	# 9 IOprint_val (_19:int)<-(s:bat[:int,:int])
    t := algebra.select(r,0,3);	# 10 ALGselect (t:bat[:int,:int])<-(r:bat[:int,:int])(_17:int)(_12:int)
#print(t); 	# 11  (_21:str)
# reuse t 	# 12  (_23:str)
    io.print(t);	# 13 IOprint_val (_24:int)<-(t:bat[:int,:int])
    io.print("done");	# 14 IOprint_val (_25:int)<-(_26:str)
end main;	# 15  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 5,	  1	  ]
[ 6,	  2	  ]
[ 7,	  3	  ]
[ 8,	  4	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 5,	  1	  ]
[ 6,	  2	  ]
[ 7,	  3	  ]
[ "done" ]

# 23:52:52 >  
# 23:52:52 >  Done.
# 23:52:52 >  

