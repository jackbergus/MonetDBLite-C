stdout of test 'pbm00` in directory 'src/optimizer` itself:


# 23:24:12 >  
# 23:24:12 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=35444 --set sql_port=44153 --set xquery_port=51797 --set monet_prompt= --trace --dbname=mTests_src_optimizer  pbm00.mal < /dev/null
# 23:24:12 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
## initialize the BAT partition box.
## to be used in the other pbm* tests
#    pbm.open();
#    b1:= bat.new(:void,:int);
#    bat.setPersistent(b1);
#    pbm.deposit("Sales2005","06",b1);
#    b2:= bat.new(:void,:int);
#    bat.setPersistent(b2);
#    pbm.deposit("Sales2005","07",b2);
#    b3:= bat.new(:void,:int);
#    bat.setPersistent(b3);
#    pbm.deposit("Sales2005","08",b3);
#
#    c1:= bat.new(:void,:int);
#    bat.setPersistent(c1);
#    pbm.deposit("Invoice2005","06",c1);
#    c2:= bat.new(:void,:int);
#    bat.setPersistent(c2);
#    pbm.deposit("Invoice2005","07",c2);
#    c3:= bat.new(:void,:int);
#    pbm.deposit("Invoice2005","08",c3);
#    bat.setPersistent(c3);
#
#    n:= pbm.getNames(); # get content of partitition catalogue.
#    io.print(n);
#    pbm.dump();
#
#barrier (nr,grp,elm):= pbm.newIterator();
#    io.print(grp,elm);
#    redo (nr,grp,elm):=pbm.hasMoreElements();
#exit (nr,grp,elm);
#    pbm.close();
#    io.print("done");
#
function user.main():void;	# 0  (main:void)
# initialize the BAT partition box. 	# 1  (_1:str)
# to be used in the other pbm* tests 	# 2  (_2:str)
    pbm.open();	# 3 PBMopen (_3:void)
    b1 := bat.new(:void,:int);	# 4 CMDBATnew (b1:bat[:void,:int])<-(_5:void)(_6:int)
    bat.setPersistent(b1);	# 5 BKCsetPersistent (_7:void)<-(b1:bat[:void,:int])
    pbm.deposit("Sales2005","06",b1);	# 6 PBMdeposit (_8:void)<-(_9:str)(_10:str)(b1:bat[:void,:int])
    b2 := bat.new(:void,:int);	# 7 CMDBATnew (b2:bat[:void,:int])<-(_5:void)(_6:int)
    bat.setPersistent(b2);	# 8 BKCsetPersistent (_12:void)<-(b2:bat[:void,:int])
    pbm.deposit("Sales2005","07",b2);	# 9 PBMdeposit (_13:void)<-(_9:str)(_14:str)(b2:bat[:void,:int])
    b3 := bat.new(:void,:int);	# 10 CMDBATnew (b3:bat[:void,:int])<-(_5:void)(_6:int)
    bat.setPersistent(b3);	# 11 BKCsetPersistent (_16:void)<-(b3:bat[:void,:int])
    pbm.deposit("Sales2005","08",b3);	# 12 PBMdeposit (_17:void)<-(_9:str)(_18:str)(b3:bat[:void,:int])
    c1 := bat.new(:void,:int);	# 13 CMDBATnew (c1:bat[:void,:int])<-(_5:void)(_6:int)
    bat.setPersistent(c1);	# 14 BKCsetPersistent (_20:void)<-(c1:bat[:void,:int])
    pbm.deposit("Invoice2005","06",c1);	# 15 PBMdeposit (_21:void)<-(_22:str)(_10:str)(c1:bat[:void,:int])
    c2 := bat.new(:void,:int);	# 16 CMDBATnew (c2:bat[:void,:int])<-(_5:void)(_6:int)
    bat.setPersistent(c2);	# 17 BKCsetPersistent (_24:void)<-(c2:bat[:void,:int])
    pbm.deposit("Invoice2005","07",c2);	# 18 PBMdeposit (_25:void)<-(_22:str)(_14:str)(c2:bat[:void,:int])
    c3 := bat.new(:void,:int);	# 19 CMDBATnew (c3:bat[:void,:int])<-(_5:void)(_6:int)
    pbm.deposit("Invoice2005","08",c3);	# 20 PBMdeposit (_27:void)<-(_22:str)(_18:str)(c3:bat[:void,:int])
    bat.setPersistent(c3);	# 21 BKCsetPersistent (_28:void)<-(c3:bat[:void,:int])
    n := pbm.getNames();	# 22 PBMgetNames (n:bat[:str,:str])
# get content of partitition catalogue. 	# 23  (_30:str)
    io.print(n);	# 24 IOprint_val (_31:int)<-(n:bat[:str,:str])
    pbm.dump();	# 25 PBMdump (_32:void)
barrier (nr,grp,elm):= pbm.newIterator();	# 26 PBMnewIteratorBase (nr:int)(grp:str)(elm:str) jump 29
    io.print(grp,elm);	# 27 IOprint_val (_36:int)<-(grp:str)(elm:str)
    redo (nr,grp,elm):= pbm.hasMoreElements();	# 28 PBMhasMoreElementsBase (nr:int)(grp:str)(elm:str) jump 27
exit (nr,grp,elm);	# 29  (nr:int)(grp:str)(elm:str)
    pbm.close();	# 30 PBMclose (_37:void)
    io.print("done");	# 31 IOprint_val (_38:int)<-(_39:str)
end main;	# 32  
#-------------------------#
# h		t	  # name
# str		str	  # type
#-------------------------#
[ "Sales2005",	  "06"	  ]
[ "Sales2005",	  "07"	  ]
[ "Sales2005",	  "08"	  ]
[ "Invoice2005",  "06"	  ]
[ "Invoice2005",  "07"	  ]
[ "Invoice2005",  "08"	  ]
ptop=6 plimit=1024
[0] grp=Sales2005 elm=06 bid=4 type=65541 prv=-1 nxt=1
[1] grp=Sales2005 elm=07 bid=5 type=65541 prv=0 nxt=2
[2] grp=Sales2005 elm=08 bid=6 type=65541 prv=1 nxt=-1
[3] grp=Invoice2005 elm=06 bid=7 type=65541 prv=-1 nxt=4
[4] grp=Invoice2005 elm=07 bid=8 type=65541 prv=3 nxt=5
[5] grp=Invoice2005 elm=08 bid=9 type=65541 prv=4 nxt=-1
[ "Sales2005", "06"]
[ "Sales2005", "07"]
[ "Sales2005", "08"]
[ "Invoice2005", "06"]
[ "Invoice2005", "07"]
[ "Invoice2005", "08"]
[ "done" ]

# 23:24:12 >  
# 23:24:12 >  Done.
# 23:24:12 >  

