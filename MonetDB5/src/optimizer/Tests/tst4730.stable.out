stdout of test 'tst4730` in directory 'src/optimizer` itself:


# 23:52:59 >  
# 23:52:59 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=39352 --set sql_port=45171 --set xquery_port=52900 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4730.mal </dev/null
# 23:52:59 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
##TPCH query 1
## the basis for further optimizer tests
#
##don;t depend on SQL library
#function user.bind(s:str,t:str,c:str,i:int):bat[:any$1,:any$2];
#end column;
function user.bind(s:str,t:str,c:str,i:int):any;	# 0  dynamic (bind:any)<-(s:str)(t:str)(c:str)(i:int)
end bind;	# 1  
!ERROR: function user.bind(s:str,t:str,c:str,i:int):bat[:any$1,:any$2];
!                                                           ^',' expected
!ERROR: end bind;
!       ^';' expected
!ERROR: end column;
!           ^non matching end label, overruled
#    V6:bat[:void,:date] := user.bind("sys","lineitem","l_shipdate",0);
#    V11:bat[:void,:oid] := user.bind_dbat("sys","lineitem",0);
#    V22:bat[:void,:bit] := user.bind("sys","lineitem","l_returnflag",0);
#    V29:bat[:void,:bit] := user.bind("sys","lineitem","l_linestatus",0);
#    V53:bat[:void,:int] := user.bind("sys","lineitem","l_quantity",0);
#    V60:bat[:void,:flt] := user.bind("sys","lineitem","l_extendedprice",0);
#    V75:bat[:void,:flt] := user.bind("sys","lineitem","l_discount",0);
#    V105:bat[:void,:flt] := user.bind("sys","lineitem","l_tax",0);
#barrier always := true;
#    V12 := bat.reverse(V11);
#    V13 := algebra.kdiff(V6,V12);
#    V16 := mtime.date_sub_sec_interval(A3,A4);
#	a := mtime.date(nil);
#    V17 := algebra.uselect(V13,a,V16);
#    V20 := algebra.markT(V17,0@0);
#    V21 := bat.reverse(V20);
#    V26 := algebra.kdiff(V22,V12);
#    V27 := algebra.join(V21,V26);
#    (h,V28) := group.group(V27);
#    V33 := algebra.kdiff(V29,V12);
#    V34 := algebra.join(V21,V33);
#    V35 := group.group(V28,V34);
#    V36 := algebra.tunique(V35);
#    V37 := bat.mirror(V36);
#    V42 := algebra.join(V37,V27);
#    V43 := algebra.sort_reverse(V42);
#    V51 := algebra.join(V37,V34);
#    V52 := group.refine(V43,V51);
#    V57 := algebra.kdiff(V53,V12);
#    V58 := algebra.join(V21,V57);
#    V59 := aggrX3.sum(V58,V35,V37);
#    V64 := algebra.kdiff(V60,V12);
#    V65 := algebra.join(V21,V64);
#    V66 := aggrX3.sum(V65,V35,V37);
#    V72 := calc.lng(A0);
#    V74 := calc.*(V72,100);
#    V82 := algebra.kdiff(V75,V12);
#    V83 := algebra.join(V21,V82);
#    V84 := optimizer.multiplex("calc.-",V74,V83);
#    V86 := batcalc.*(V65,V84);
#    V88 := aggrX3.sum(V86,V35,V37);
#    V94 := calc.lng(A1);
#    V95 := calc.*(V94,100);
#    V100 := optimizer.multiplex("calc.-",V95,V83);
#    V101 := batcalc.*(V65,V100);
#    V103 := calc.lng(A2);
#    V104 := calc.*(V103,100);
#    V109 := algebra.kdiff(V105,V12);
#    V110 := algebra.join(V21,V109);
#    V111 := optimizer.multiplex("calc.+",V104,V110);
#    V113 := batcalc.*(V101,V111);
#    V114 := aggrX3.sum(V113,V35,V37);
#    V122 := aggrX3.avg(V58,V35,V37);
#    V127 := aggrX3.avg(V65,V35,V37);
#    V129 := optimizer.multiplex("calc.round",V127,100);
#    V135 := aggrX3.avg(V83,V35,V37);
#    V136 := optimizer.multiplex("calc.round",V135,100);
#    V137 := aggrX3.count(V35,V35,V37);
#    sql.column(V42,"l_returnflag","varchar",1,0);
#    sql.column(V51,"l_linestatus","varchar",1,0);
#    sql.column(V59,"sum_qty","bigint",0,0);
#    sql.column(V66,"sum_base_price","decimal",19,2);
#    sql.column(V88,"sum_disc_price","decimal",19,4);
#    sql.column(V114,"sum_charge","decimal",19,6);
#    sql.column(V122,"avg_qty","double",53,0);
#    sql.column(V129,"avg_price","double",53,0);
#    sql.column(V136,"avg_disc","double",53,0);
#    sql.column(V137,"count_order","int",0,0);
#    sql.output(V52,V42,V51,V59,V66,V88,V114,V122,V129,V136,V137);
#    yield always;
#    redo always;
#exit always;
#end qry1;
function user.main():int;	# 0  (main:int)
#TPCH query 1 	# 1  (_2:str)
# the basis for further optimizer tests 	# 2  (_4:str)
#don;t depend on SQL library 	# 3  (_6:str)
    V6:bat[:void,:date]  := user.bind("sys","lineitem","l_shipdate",0);	# 4  unknown (V6:bat[:void,:date])<-(_8:str)(_9:str)(_10:str)(_11:int)
    V11:bat[:void,:oid]  := user.bind_dbat("sys","lineitem",0);	# 5  unknown (V11:bat[:void,:oid])<-(_8:str)(_9:str)(_11:int)
    V22:bat[:void,:bit]  := user.bind("sys","lineitem","l_returnflag",0);	# 6  (V22:bat[:void,:bit])<-(_8:str)(_9:str)(_14:str)(_11:int)
    V29:bat[:void,:bit]  := user.bind("sys","lineitem","l_linestatus",0);	# 7  (V29:bat[:void,:bit])<-(_8:str)(_9:str)(_16:str)(_11:int)
    V53:bat[:void,:int]  := user.bind("sys","lineitem","l_quantity",0);	# 8  (V53:bat[:void,:int])<-(_8:str)(_9:str)(_18:str)(_11:int)
    V60:bat[:void,:flt]  := user.bind("sys","lineitem","l_extendedprice",0);	# 9  (V60:bat[:void,:flt])<-(_8:str)(_9:str)(_20:str)(_11:int)
    V75:bat[:void,:flt]  := user.bind("sys","lineitem","l_discount",0);	# 10  (V75:bat[:void,:flt])<-(_8:str)(_9:str)(_22:str)(_11:int)
    V105:bat[:void,:flt]  := user.bind("sys","lineitem","l_tax",0);	# 11  (V105:bat[:void,:flt])<-(_8:str)(_9:str)(_24:str)(_11:int)
barrier always := true;	# 12  (always:bit)<-(_26:bit) jump 75
    V12 := bat.reverse(V11);	# 13 BKCreverse (V12:bat[:oid,:void])<-(V11:bat[:void,:oid])
    V13 := algebra.kdiff(V6,V12);	# 14 ALGkdiff (V13:bat[:oid,:date])<-(V6:bat[:void,:date])(V12:bat[:oid,:void])
    V16 := mtime.date_sub_sec_interval(A3,A4);	# 15  unknown (V16:any)<-(A3:any)(A4:any)
    a := mtime.date(nil);	# 16 MTIMEnil2date (a:date)<-(_33:void)
    V17 := algebra.uselect(V13,a,V16);	# 17  unknown (V17:any)<-(V13:bat[:oid,:date])(a:date)(V16:any)
    V20 := algebra.markT(V17,0@0);	# 18  unknown (V20:any)<-(V17:any)(_36:oid)
    V21 := bat.reverse(V20);	# 19  unknown (V21:any)<-(V20:any)
    V26 := algebra.kdiff(V22,V12);	# 20 ALGkdiff (V26:bat[:oid,:bit])<-(V22:bat[:void,:bit])(V12:bat[:oid,:void])
    V27 := algebra.join(V21,V26);	# 21  unknown (V27:any)<-(V21:any)(V26:bat[:oid,:bit])
    (h,V28):= group.group(V27);	# 22  unknown (h:any)(V28:any)<-(V27:any)
    V33 := algebra.kdiff(V29,V12);	# 23 ALGkdiff (V33:bat[:oid,:bit])<-(V29:bat[:void,:bit])(V12:bat[:oid,:void])
    V34 := algebra.join(V21,V33);	# 24  unknown (V34:any)<-(V21:any)(V33:bat[:oid,:bit])
    V35 := group.group(V28,V34);	# 25  unknown (V35:any)<-(V28:any)(V34:any)
    V36 := algebra.tunique(V35);	# 26  unknown (V36:any)<-(V35:any)
    V37 := bat.mirror(V36);	# 27  unknown (V37:any)<-(V36:any)
    V42 := algebra.join(V37,V27);	# 28  unknown (V42:any)<-(V37:any)(V27:any)
    V43 := algebra.sort_reverse(V42);	# 29  unknown (V43:any)<-(V42:any)
    V51 := algebra.join(V37,V34);	# 30  unknown (V51:any)<-(V37:any)(V34:any)
    V52 := group.refine(V43,V51);	# 31  unknown (V52:any)<-(V43:any)(V51:any)
    V57 := algebra.kdiff(V53,V12);	# 32 ALGkdiff (V57:bat[:oid,:int])<-(V53:bat[:void,:int])(V12:bat[:oid,:void])
    V58 := algebra.join(V21,V57);	# 33  unknown (V58:any)<-(V21:any)(V57:bat[:oid,:int])
    V59 := aggrX3.sum(V58,V35,V37);	# 34  unknown (V59:any)<-(V58:any)(V35:any)(V37:any)
    V64 := algebra.kdiff(V60,V12);	# 35 ALGkdiff (V64:bat[:oid,:flt])<-(V60:bat[:void,:flt])(V12:bat[:oid,:void])
    V65 := algebra.join(V21,V64);	# 36  unknown (V65:any)<-(V21:any)(V64:bat[:oid,:flt])
    V66 := aggrX3.sum(V65,V35,V37);	# 37  unknown (V66:any)<-(V65:any)(V35:any)(V37:any)
    V72 := calc.lng(A0);	# 38  unknown (V72:any)<-(A0:any)
    V74 := calc.*(V72,100);	# 39  unknown (V74:any)<-(V72:any)(_60:int)
    V82 := algebra.kdiff(V75,V12);	# 40 ALGkdiff (V82:bat[:oid,:flt])<-(V75:bat[:void,:flt])(V12:bat[:oid,:void])
    V83 := algebra.join(V21,V82);	# 41  unknown (V83:any)<-(V21:any)(V82:bat[:oid,:flt])
    V84 := optimizer.multiplex("calc.-",V74,V83);	# 42 OPTmultiplex (V84:any)<-(_64:str)(V74:any)(V83:any)
    V86 := batcalc.*(V65,V84);	# 43  unknown (V86:any)<-(V65:any)(V84:any)
    V88 := aggrX3.sum(V86,V35,V37);	# 44  unknown (V88:any)<-(V86:any)(V35:any)(V37:any)
    V94 := calc.lng(A1);	# 45  unknown (V94:any)<-(A1:any)
    V95 := calc.*(V94,100);	# 46  unknown (V95:any)<-(V94:any)(_60:int)
    V100 := optimizer.multiplex("calc.-",V95,V83);	# 47 OPTmultiplex (V100:any)<-(_64:str)(V95:any)(V83:any)
    V101 := batcalc.*(V65,V100);	# 48  unknown (V101:any)<-(V65:any)(V100:any)
    V103 := calc.lng(A2);	# 49  unknown (V103:any)<-(A2:any)
    V104 := calc.*(V103,100);	# 50  unknown (V104:any)<-(V103:any)(_60:int)
    V109 := algebra.kdiff(V105,V12);	# 51 ALGkdiff (V109:bat[:oid,:flt])<-(V105:bat[:void,:flt])(V12:bat[:oid,:void])
    V110 := algebra.join(V21,V109);	# 52  unknown (V110:any)<-(V21:any)(V109:bat[:oid,:flt])
    V111 := optimizer.multiplex("calc.+",V104,V110);	# 53 OPTmultiplex (V111:any)<-(_78:str)(V104:any)(V110:any)
    V113 := batcalc.*(V101,V111);	# 54  unknown (V113:any)<-(V101:any)(V111:any)
    V114 := aggrX3.sum(V113,V35,V37);	# 55  unknown (V114:any)<-(V113:any)(V35:any)(V37:any)
    V122 := aggrX3.avg(V58,V35,V37);	# 56  unknown (V122:any)<-(V58:any)(V35:any)(V37:any)
    V127 := aggrX3.avg(V65,V35,V37);	# 57  unknown (V127:any)<-(V65:any)(V35:any)(V37:any)
    V129 := optimizer.multiplex("calc.round",V127,100);	# 58 OPTmultiplex (V129:any)<-(_84:str)(V127:any)(_60:int)
    V135 := aggrX3.avg(V83,V35,V37);	# 59  unknown (V135:any)<-(V83:any)(V35:any)(V37:any)
    V136 := optimizer.multiplex("calc.round",V135,100);	# 60 OPTmultiplex (V136:any)<-(_84:str)(V135:any)(_60:int)
    V137 := aggrX3.count(V35,V35,V37);	# 61  unknown (V137:any)<-(V35:any)(V35:any)(V37:any)
    sql.column(V42,"l_returnflag","varchar",1,0);	# 62  unknown (_88:any)<-(V42:any)(_89:str)(_90:str)(_91:int)(_92:int)
    sql.column(V51,"l_linestatus","varchar",1,0);	# 63  unknown (_93:any)<-(V51:any)(_94:str)(_90:str)(_91:int)(_92:int)
    sql.column(V59,"sum_qty","bigint",0,0);	# 64  unknown (_95:any)<-(V59:any)(_96:str)(_97:str)(_92:int)(_92:int)
    sql.column(V66,"sum_base_price","decimal",19,2);	# 65  unknown (_98:any)<-(V66:any)(_99:str)(_100:str)(_101:int)(_102:int)
    sql.column(V88,"sum_disc_price","decimal",19,4);	# 66  unknown (_103:any)<-(V88:any)(_104:str)(_100:str)(_101:int)(_105:int)
    sql.column(V114,"sum_charge","decimal",19,6);	# 67  unknown (_106:any)<-(V114:any)(_107:str)(_100:str)(_101:int)(_108:int)
    sql.column(V122,"avg_qty","double",53,0);	# 68  unknown (_109:any)<-(V122:any)(_110:str)(_111:str)(_112:int)(_92:int)
    sql.column(V129,"avg_price","double",53,0);	# 69  unknown (_113:any)<-(V129:any)(_114:str)(_111:str)(_112:int)(_92:int)
    sql.column(V136,"avg_disc","double",53,0);	# 70  unknown (_115:any)<-(V136:any)(_116:str)(_111:str)(_112:int)(_92:int)
    sql.column(V137,"count_order","int",0,0);	# 71  unknown (_117:any)<-(V137:any)(_118:str)(_119:str)(_92:int)(_92:int)
    sql.output(V52,V42,V51,V59,V66,V88,V114,V122,V129,V136,V137);	# 72  unknown (_120:any)<-(V52:any)(V42:any)(V51:any)(V59:any)(V66:any)(V88:any)(V114:any)(V122:any)(V129:any)(V136:any)(V137:any)
    yield always;	# 73  (always:bit)
    redo always;	# 74  (always:bit) jump 13
exit always;	# 75  (always:bit)
end main;	# 76  
!ERROR: end qry1;
!           ^non matching end label, overruled
!ERROR: 'user.bind' undefined in user.main[4]
!ERROR: 'user.bind_dbat' undefined in user.main[5]
!ERROR: 'mtime.date_sub_sec_interval' undefined in user.main[15]
!ERROR: 'algebra.uselect' undefined in user.main[17]
!ERROR: 'algebra.markT' undefined in user.main[18]
!ERROR: 'bat.reverse' undefined in user.main[19]
!ERROR: 'algebra.join' undefined in user.main[21]
!ERROR: 'group.group' undefined in user.main[22]
!ERROR: 'algebra.join' undefined in user.main[24]
!ERROR: 'group.group' undefined in user.main[25]
!ERROR: 'algebra.tunique' undefined in user.main[26]
!ERROR: 'bat.mirror' undefined in user.main[27]
!ERROR: 'algebra.join' undefined in user.main[28]
!ERROR: 'algebra.sort_reverse' undefined in user.main[29]
!ERROR: 'algebra.join' undefined in user.main[30]
!ERROR: 'group.refine' undefined in user.main[31]
!ERROR: 'algebra.join' undefined in user.main[33]
!ERROR: 'aggrX3.sum' undefined in user.main[34]
!ERROR: 'algebra.join' undefined in user.main[36]
!ERROR: 'aggrX3.sum' undefined in user.main[37]
!ERROR: 'calc.lng' undefined in user.main[38]
!ERROR: 'calc.*' undefined in user.main[39]
!ERROR: 'algebra.join' undefined in user.main[41]
!ERROR: 'batcalc.*' undefined in user.main[43]
!ERROR: 'aggrX3.sum' undefined in user.main[44]
!ERROR: 'calc.lng' undefined in user.main[45]
!ERROR: 'calc.*' undefined in user.main[46]
!ERROR: 'batcalc.*' undefined in user.main[48]
!ERROR: 'calc.lng' undefined in user.main[49]
!ERROR: 'calc.*' undefined in user.main[50]
!ERROR: 'algebra.join' undefined in user.main[52]
!ERROR: 'batcalc.*' undefined in user.main[54]
!ERROR: 'aggrX3.sum' undefined in user.main[55]
!ERROR: 'aggrX3.avg' undefined in user.main[56]
!ERROR: 'aggrX3.avg' undefined in user.main[57]
!ERROR: 'aggrX3.avg' undefined in user.main[59]
!ERROR: 'aggrX3.count' undefined in user.main[61]
!ERROR: 'sql.column' undefined in user.main[62]
!ERROR: 'sql.column' undefined in user.main[63]
!ERROR: 'sql.column' undefined in user.main[64]
!ERROR: 'sql.column' undefined in user.main[65]
!ERROR: 'sql.column' undefined in user.main[66]
!ERROR: 'sql.column' undefined in user.main[67]
!ERROR: 'sql.column' undefined in user.main[68]
!ERROR: 'sql.column' undefined in user.main[69]
!ERROR: 'sql.column' undefined in user.main[70]
!ERROR: 'sql.column' undefined in user.main[71]
!ERROR: 'sql.output' undefined in user.main[72]
!ERROR: yield misplaced
!
!ERROR: YIELD type mismatch at type 1
!ERROR: 'A3' may not be used before being set in main[15]
!ERROR: 'A4' may not be used before being set in main[15]
!ERROR: 'A0' may not be used before being set in main[38]
!ERROR: 'A1' may not be used before being set in main[45]
!ERROR: 'A2' may not be used before being set in main[49]
#mdb.list("user","qry1");
#
function user.main():int;	# 0  (main:int)
#TPCH query 1 	# 1  (_2:str)
# the basis for further optimizer tests 	# 2  (_4:str)
#don;t depend on SQL library 	# 3  (_6:str)
    V6:bat[:void,:date]  := user.bind("sys","lineitem","l_shipdate",0);	# 4  unknown (V6:bat[:void,:date])<-(_8:str)(_9:str)(_10:str)(_11:int)
    V11:bat[:void,:oid]  := user.bind_dbat("sys","lineitem",0);	# 5  unknown (V11:bat[:void,:oid])<-(_8:str)(_9:str)(_11:int)
    V22:bat[:void,:bit]  := user.bind("sys","lineitem","l_returnflag",0);	# 6  (V22:bat[:void,:bit])<-(_8:str)(_9:str)(_14:str)(_11:int)
    V29:bat[:void,:bit]  := user.bind("sys","lineitem","l_linestatus",0);	# 7  (V29:bat[:void,:bit])<-(_8:str)(_9:str)(_16:str)(_11:int)
    V53:bat[:void,:int]  := user.bind("sys","lineitem","l_quantity",0);	# 8  (V53:bat[:void,:int])<-(_8:str)(_9:str)(_18:str)(_11:int)
    V60:bat[:void,:flt]  := user.bind("sys","lineitem","l_extendedprice",0);	# 9  (V60:bat[:void,:flt])<-(_8:str)(_9:str)(_20:str)(_11:int)
    V75:bat[:void,:flt]  := user.bind("sys","lineitem","l_discount",0);	# 10  (V75:bat[:void,:flt])<-(_8:str)(_9:str)(_22:str)(_11:int)
    V105:bat[:void,:flt]  := user.bind("sys","lineitem","l_tax",0);	# 11  (V105:bat[:void,:flt])<-(_8:str)(_9:str)(_24:str)(_11:int)
barrier always := true;	# 12  (always:bit)<-(_26:bit) jump 75
    V12 := bat.reverse(V11);	# 13 BKCreverse (V12:bat[:oid,:void])<-(V11:bat[:void,:oid])
    V13 := algebra.kdiff(V6,V12);	# 14 ALGkdiff (V13:bat[:oid,:date])<-(V6:bat[:void,:date])(V12:bat[:oid,:void])
    V16 := mtime.date_sub_sec_interval(A3,A4);	# 15  unknown (V16:any)<-(A3:any)(A4:any)
    a := mtime.date(nil);	# 16 MTIMEnil2date (a:date)<-(_33:void)
    V17 := algebra.uselect(V13,a,V16);	# 17  unknown (V17:any)<-(V13:bat[:oid,:date])(a:date)(V16:any)
    V20 := algebra.markT(V17,0@0);	# 18  unknown (V20:any)<-(V17:any)(_36:oid)
    V21 := bat.reverse(V20);	# 19  unknown (V21:any)<-(V20:any)
    V26 := algebra.kdiff(V22,V12);	# 20 ALGkdiff (V26:bat[:oid,:bit])<-(V22:bat[:void,:bit])(V12:bat[:oid,:void])
    V27 := algebra.join(V21,V26);	# 21  unknown (V27:any)<-(V21:any)(V26:bat[:oid,:bit])
    (h,V28):= group.group(V27);	# 22  unknown (h:any)(V28:any)<-(V27:any)
    V33 := algebra.kdiff(V29,V12);	# 23 ALGkdiff (V33:bat[:oid,:bit])<-(V29:bat[:void,:bit])(V12:bat[:oid,:void])
    V34 := algebra.join(V21,V33);	# 24  unknown (V34:any)<-(V21:any)(V33:bat[:oid,:bit])
    V35 := group.group(V28,V34);	# 25  unknown (V35:any)<-(V28:any)(V34:any)
    V36 := algebra.tunique(V35);	# 26  unknown (V36:any)<-(V35:any)
    V37 := bat.mirror(V36);	# 27  unknown (V37:any)<-(V36:any)
    V42 := algebra.join(V37,V27);	# 28  unknown (V42:any)<-(V37:any)(V27:any)
    V43 := algebra.sort_reverse(V42);	# 29  unknown (V43:any)<-(V42:any)
    V51 := algebra.join(V37,V34);	# 30  unknown (V51:any)<-(V37:any)(V34:any)
    V52 := group.refine(V43,V51);	# 31  unknown (V52:any)<-(V43:any)(V51:any)
    V57 := algebra.kdiff(V53,V12);	# 32 ALGkdiff (V57:bat[:oid,:int])<-(V53:bat[:void,:int])(V12:bat[:oid,:void])
    V58 := algebra.join(V21,V57);	# 33  unknown (V58:any)<-(V21:any)(V57:bat[:oid,:int])
    V59 := aggrX3.sum(V58,V35,V37);	# 34  unknown (V59:any)<-(V58:any)(V35:any)(V37:any)
    V64 := algebra.kdiff(V60,V12);	# 35 ALGkdiff (V64:bat[:oid,:flt])<-(V60:bat[:void,:flt])(V12:bat[:oid,:void])
    V65 := algebra.join(V21,V64);	# 36  unknown (V65:any)<-(V21:any)(V64:bat[:oid,:flt])
    V66 := aggrX3.sum(V65,V35,V37);	# 37  unknown (V66:any)<-(V65:any)(V35:any)(V37:any)
    V72 := calc.lng(A0);	# 38  unknown (V72:any)<-(A0:any)
    V74 := calc.*(V72,100);	# 39  unknown (V74:any)<-(V72:any)(_60:int)
    V82 := algebra.kdiff(V75,V12);	# 40 ALGkdiff (V82:bat[:oid,:flt])<-(V75:bat[:void,:flt])(V12:bat[:oid,:void])
    V83 := algebra.join(V21,V82);	# 41  unknown (V83:any)<-(V21:any)(V82:bat[:oid,:flt])
    V84 := optimizer.multiplex("calc.-",V74,V83);	# 42 OPTmultiplex (V84:any)<-(_64:str)(V74:any)(V83:any)
    V86 := batcalc.*(V65,V84);	# 43  unknown (V86:any)<-(V65:any)(V84:any)
    V88 := aggrX3.sum(V86,V35,V37);	# 44  unknown (V88:any)<-(V86:any)(V35:any)(V37:any)
    V94 := calc.lng(A1);	# 45  unknown (V94:any)<-(A1:any)
    V95 := calc.*(V94,100);	# 46  unknown (V95:any)<-(V94:any)(_60:int)
    V100 := optimizer.multiplex("calc.-",V95,V83);	# 47 OPTmultiplex (V100:any)<-(_64:str)(V95:any)(V83:any)
    V101 := batcalc.*(V65,V100);	# 48  unknown (V101:any)<-(V65:any)(V100:any)
    V103 := calc.lng(A2);	# 49  unknown (V103:any)<-(A2:any)
    V104 := calc.*(V103,100);	# 50  unknown (V104:any)<-(V103:any)(_60:int)
    V109 := algebra.kdiff(V105,V12);	# 51 ALGkdiff (V109:bat[:oid,:flt])<-(V105:bat[:void,:flt])(V12:bat[:oid,:void])
    V110 := algebra.join(V21,V109);	# 52  unknown (V110:any)<-(V21:any)(V109:bat[:oid,:flt])
    V111 := optimizer.multiplex("calc.+",V104,V110);	# 53 OPTmultiplex (V111:any)<-(_78:str)(V104:any)(V110:any)
    V113 := batcalc.*(V101,V111);	# 54  unknown (V113:any)<-(V101:any)(V111:any)
    V114 := aggrX3.sum(V113,V35,V37);	# 55  unknown (V114:any)<-(V113:any)(V35:any)(V37:any)
    V122 := aggrX3.avg(V58,V35,V37);	# 56  unknown (V122:any)<-(V58:any)(V35:any)(V37:any)
    V127 := aggrX3.avg(V65,V35,V37);	# 57  unknown (V127:any)<-(V65:any)(V35:any)(V37:any)
    V129 := optimizer.multiplex("calc.round",V127,100);	# 58 OPTmultiplex (V129:any)<-(_84:str)(V127:any)(_60:int)
    V135 := aggrX3.avg(V83,V35,V37);	# 59  unknown (V135:any)<-(V83:any)(V35:any)(V37:any)
    V136 := optimizer.multiplex("calc.round",V135,100);	# 60 OPTmultiplex (V136:any)<-(_84:str)(V135:any)(_60:int)
    V137 := aggrX3.count(V35,V35,V37);	# 61  unknown (V137:any)<-(V35:any)(V35:any)(V37:any)
    sql.column(V42,"l_returnflag","varchar",1,0);	# 62  unknown (_88:any)<-(V42:any)(_89:str)(_90:str)(_91:int)(_92:int)
    sql.column(V51,"l_linestatus","varchar",1,0);	# 63  unknown (_93:any)<-(V51:any)(_94:str)(_90:str)(_91:int)(_92:int)
    sql.column(V59,"sum_qty","bigint",0,0);	# 64  unknown (_95:any)<-(V59:any)(_96:str)(_97:str)(_92:int)(_92:int)
    sql.column(V66,"sum_base_price","decimal",19,2);	# 65  unknown (_98:any)<-(V66:any)(_99:str)(_100:str)(_101:int)(_102:int)
    sql.column(V88,"sum_disc_price","decimal",19,4);	# 66  unknown (_103:any)<-(V88:any)(_104:str)(_100:str)(_101:int)(_105:int)
    sql.column(V114,"sum_charge","decimal",19,6);	# 67  unknown (_106:any)<-(V114:any)(_107:str)(_100:str)(_101:int)(_108:int)
    sql.column(V122,"avg_qty","double",53,0);	# 68  unknown (_109:any)<-(V122:any)(_110:str)(_111:str)(_112:int)(_92:int)
    sql.column(V129,"avg_price","double",53,0);	# 69  unknown (_113:any)<-(V129:any)(_114:str)(_111:str)(_112:int)(_92:int)
    sql.column(V136,"avg_disc","double",53,0);	# 70  unknown (_115:any)<-(V136:any)(_116:str)(_111:str)(_112:int)(_92:int)
    sql.column(V137,"count_order","int",0,0);	# 71  unknown (_117:any)<-(V137:any)(_118:str)(_119:str)(_92:int)(_92:int)
    sql.output(V52,V42,V51,V59,V66,V88,V114,V122,V129,V136,V137);	# 72  unknown (_120:any)<-(V52:any)(V42:any)(V51:any)(V59:any)(V66:any)(V88:any)(V114:any)(V122:any)(V129:any)(V136:any)(V137:any)
    yield always;	# 73  (always:bit)
    redo always;	# 74  (always:bit) jump 13
exit always;	# 75  (always:bit)
end main;	# 76  
    mdb.list("user","qry1");	# 77  unknown (_121:any)<-(_122:str)(_123:str)
end main;	# 78  unknown 

# 23:52:59 >  
# 23:52:59 >  Done.
# 23:52:59 >  

