#make the test self contained.
#insert into s select sum(i) from r where r.i>0;
module basket;
function unlock(a:any);
end unlock;
function bind(s:str,t:str,c:str,i:int):bat[:any_1,:any_2];
	return bind:= bat.new(:any_1,:any_2);
end bind;

module datacell;
function datacell.basket():bit;
	return basket:=true;
end basket;

function datacell.s0_0(A0:int):void;
    X7 := A0;
barrier go:=datacell.basket(); # the marker of the [
    #generate binds for all input columns
    X2:bat[:oid,:int]  := basket.bind("sys","r","i",0);
    X8 := algebra.thetauselect(X2,X7,">");
    X10 := calc.oid(0@0);
    X12 := algebra.markT(X8,X10);
    X13 := bat.reverse(X12);
    X14 := algebra.join(X13,X2);
    X17 := algebra.selectNotNil(X14);
    X18:lng  := aggr.sum(X17);
    X19 := calc.int(X18);
    #generate binds for all output columns
    X3:bat[:oid,:int]  := basket.bind("sys","s","j",1);
    #generate updates for all columns
    X20:= bat.append(X3,X19);
    #generate deletion based on pivot
    X21:=  algebra.semijoin(X2,X17);
    bat.delete(X2,X21);
exit go; # the marker of the ]
end s0_0;

optimizer.datacell("datacell","s0_0");
mdb.list("datacell","bqs0_0");
