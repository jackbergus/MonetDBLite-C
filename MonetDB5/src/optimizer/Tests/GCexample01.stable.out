stdout of test 'GCexample01` in directory 'src/optimizer` itself:


# 23:17:49 >  
# 23:17:49 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=33385 --set xrpc_port=42531 --set monet_prompt= --trace --dbname=mTests_src_optimizer  GCexample01.mal
# 23:17:49 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
#function qry();
#b:= bat.new(:int,:int);
#c:= bat.new(:int,:int);
#bat.insert(b,1,1);
#
#barrier (x,y,z):= bat.newIterator(b);
#	io.print(x);
#exit (x,y,z);
#
#barrier (x,y,z):= bat.newIterator(c);
#	io.print(x);
#	redo (x,y,z):= bat.hasMoreElements(c);
#exit (x,y,z);
#end qry;
function user.qry():void;               #  0 qry:void {G}
    b := bat.new(:int,:int);            #  1 b:bat[:int,:int] := CMDBATnew(_2:int, _2:int) {G}
    c := bat.new(:int,:int);            #  2 c:bat[:int,:int] := CMDBATnew(_2:int, _2:int) {G}
    d := bat.new(:int,:int);            #  3 d:bat[:int,:int] := CMDBATnew(_2:int, _2:int) {G}
    bat.insert(b,1,1);                  #  4 _5:void := BKCinsert_bun(b:bat[:int,:int], _6:int, _6:int) 
barrier (x,y,z):= bat.newIterator(b);   #  5 (x:lng, y:int, z:int) := CHPbunIterator(b:bat[:int,:int]) {J7}
    io.print(x);                        #  6 _10:void := IOprint_val(x:lng) 
exit (x,y,z);                           #  7 (x:lng, y:int, z:int 
barrier (x,y,z):= bat.newIterator(c);   #  8 (x:lng, y:int, z:int) := CHPbunIterator(c:bat[:int,:int]) {J11}
    io.print(x);                        #  9 _11:void := IOprint_val(x:lng) 
    redo (x,y,z):= bat.hasMoreElements(c);# 10 (x:lng, y:int, z:int) := CHPbunHasMoreElements(c:bat[:int,:int]) {J9}
exit (x,y,z);                           # 11 (x:lng, y:int, z:int 
# do not close d, it may be reused 
barrier go := true;                     # 13 go:bit := _14:bit {J16}
    io.print(d);                        # 14 _15:void := IOprint_val(d:bat[:int,:int]) 
    redo go := true;                    # 15 go:bit := _14:bit {J14}
exit go;                                # 16 go:bit 
end qry;	# 17  
#
#optimizer.garbageCollector("user","qry");
#mdb.list("user","qry");
#
function user.main():void;              #  0 main:void {G}
#checking proper handling of scopes for the garbage collector 
    mdb.list("user","qry");             #  2 _5:void := MDBlist3(_3:str, _4:str) 
end main;	# 3  
function user.qry():void;
    b := bat.new(:int,:int);
    c := bat.new(:int,:int);
    d := bat.new(:int,:int);
    bat.insert(b,1,1);
barrier (x,y,z):= bat.newIterator(b);
    b := nil;
    io.print(x);
exit (x,y,z);
barrier (x,y,z):= bat.newIterator(c);
    io.print(x);
    redo (x,y,z):= bat.hasMoreElements(c);
    c := nil;
exit (x,y,z);
# do not close d, it may be reused 
barrier go := true;
    io.print(d);
    d := nil;
    redo go := true;
exit go;
end qry;

# 23:17:49 >  
# 23:17:49 >  Done.
# 23:17:49 >  

