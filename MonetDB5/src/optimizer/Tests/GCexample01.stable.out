stdout of test 'GCexample01` in directory 'src/optimizer` itself:


# 23:17:49 >  
# 23:17:49 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=33385 --set xrpc_port=42531 --set monet_prompt= --trace --dbname=mTests_src_optimizer  GCexample01.mal
# 23:17:49 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
#function qry();
#b:= bat.new(:int,:int);
#c:= bat.new(:int,:int);
#bat.insert(b,1,1);
#
#barrier (x,y,z):= bat.newIterator(b);
#	io.print(x);
#exit (x,y,z);
#
#barrier (x,y,z):= bat.newIterator(c);
#	io.print(x);
#	redo (x,y,z):= bat.hasMoreElements(c);
#exit (x,y,z);
#end qry;
function user.qry():void;	# 0  (qry:void)
    b := bat.new(:int,:int);	# 1 CMDBATnew (b:bat[:int,:int])<-(_2:int)(_2:int)
    c := bat.new(:int,:int);	# 2 CMDBATnew (c:bat[:int,:int])<-(_2:int)(_2:int)
    d := bat.new(:int,:int);	# 3 CMDBATnew (d:bat[:int,:int])<-(_2:int)(_2:int)
    bat.insert(b,1,1);	# 4 BKCinsert_bun (_5:void)<-(b:bat[:int,:int])(_6:int)(_6:int)
barrier (x,y,z):= bat.newIterator(b);	# 5 CHPbunIterator (x:lng)(y:int)(z:int)<-(b:bat[:int,:int]) jump 7
    io.print(x);	# 6 IOprint_val (_10:void)<-(x:lng)
exit (x,y,z);	# 7  (x:lng)(y:int)(z:int)
barrier (x,y,z):= bat.newIterator(c);	# 8 CHPbunIterator (x:lng)(y:int)(z:int)<-(c:bat[:int,:int]) jump 11
    io.print(x);	# 9 IOprint_val (_11:void)<-(x:lng)
    redo (x,y,z):= bat.hasMoreElements(c);	# 10 CHPbunHasMoreElements (x:lng)(y:int)(z:int)<-(c:bat[:int,:int]) jump 9
exit (x,y,z);	# 11  (x:lng)(y:int)(z:int)
# do not close d, it may be reused 	# 12  (_12:str)
barrier go := true;	# 13  (go:bit)<-(_14:bit) jump 16
    io.print(d);	# 14 IOprint_val (_15:void)<-(d:bat[:int,:int])
    redo go := true;	# 15  (go:bit)<-(_14:bit) jump 14
exit go;	# 16  (go:bit)
end qry;	# 17  
#
#optimizer.garbageCollector("user","qry");
#mdb.list("user","qry");
#
function user.main():void;	# 0  (main:void)
#checking proper handling of scopes for the garbage collector 	# 1  (_1:str)
    mdb.list("user","qry");	# 2 MDBlist3 (_5:void)<-(_3:str)(_4:str)
end main;	# 3  
function user.qry():void;
    b := bat.new(:int,:int);
    c := bat.new(:int,:int);
    d := bat.new(:int,:int);
    bat.insert(b,1,1);
barrier (x,y,z):= bat.newIterator(b);
    b := nil;
    io.print(x);
exit (x,y,z);
barrier (x,y,z):= bat.newIterator(c);
    c := nil;
    io.print(x);
    redo (x,y,z):= bat.hasMoreElements(c);
exit (x,y,z);
# do not close d, it may be reused 
barrier go := true;
    io.print(d);
    redo go := true;
exit go;
end qry;

# 23:17:49 >  
# 23:17:49 >  Done.
# 23:17:49 >  

