stdout of test 'tst4300` in directory 'src/optimizer` itself:


# 23:52:52 >  
# 23:52:52 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=39352 --set sql_port=45171 --set xquery_port=52900 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4300.mal </dev/null
# 23:52:52 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
##some join operations
#
##mdb.start();
#b:= bbp.new(:lng,:lng);
#barrier (k,v):= mal.newRange(0:lng);
#        bat.insert(b,v,v);
#        redo (k,v):= mal.nextElement(1:lng,100:lng);
#exit (k,v);
#
#i:= aggr.count(b);
#io.print(i);
#
#c:= algebra.select(b,0:lng,9:lng);
#i:= aggr.count(c);
#io.print(i);
#d:= algebra.select(b,0:lng,49:lng);
#i:= aggr.count(d);
#io.print(i);
#
#zz:= algebra.joinPath(b,c,d);
#i:= aggr.count(zz);
#io.print(i);
#
##to be detected by join inversion
##z:= joinPath(b,c);
##zz:= joinPath(zz,d);
##i:= aggr.count(z);
##io.print(i);
#
#
function user.main():void;	# 0  (main:void)
#some join operations 	# 1  (_1:str)
#mdb.start(); 	# 2  (_2:str)
    b := bat.new(:lng,:lng);	# 3 CMDBATnew (b:bat[:lng,:lng])<-(_4:lng)(_4:lng)
barrier (k,v):= language.newRange(0:lng);	# 4 RNGnewRange_lng (k:bit)(v:lng)<-(_7:lng) jump 7
    bat.insert(b,v,v);	# 5 BKCinsert_bun (_8:void)<-(b:bat[:lng,:lng])(v:lng)(v:lng)
    redo (k,v):= language.nextElement(1:lng,100:lng);	# 6 RNGnextElement_lng (k:bit)(v:lng)<-(_9:lng)(_10:lng) jump 5
exit (k,v);	# 7  (k:bit)(v:lng)
    i := aggr.count(b);	# 8 ALGcount_bat (i:int)<-(b:bat[:lng,:lng])
    io.print(i);	# 9 IOprint_val (_12:int)<-(i:int)
    c := algebra.select(b,0:lng,9:lng);	# 10 ALGselect (c:bat[:lng,:lng])<-(b:bat[:lng,:lng])(_7:lng)(_14:lng)
    i := aggr.count(c);	# 11 ALGcount_bat (i:int)<-(c:bat[:lng,:lng])
    io.print(i);	# 12 IOprint_val (_15:int)<-(i:int)
    d := algebra.select(b,0:lng,49:lng);	# 13 ALGselect (d:bat[:lng,:lng])<-(b:bat[:lng,:lng])(_7:lng)(_17:lng)
    i := aggr.count(d);	# 14 ALGcount_bat (i:int)<-(d:bat[:lng,:lng])
    io.print(i);	# 15 IOprint_val (_18:int)<-(i:int)
    zz := algebra.joinPath(b,c,d);	# 16 QOTjoinPath (zz:bat[:lng,:lng])<-(b:bat[:lng,:lng])(c:bat[:lng,:lng])(d:bat[:lng,:lng])
    i := aggr.count(zz);	# 17 ALGcount_bat (i:int)<-(zz:bat[:lng,:lng])
    io.print(i);	# 18 IOprint_val (_20:int)<-(i:int)
#to be detected by join inversion 	# 19  (_21:str)
#z:= joinPath(b,c); 	# 20  (_22:str)
#zz:= joinPath(zz,d); 	# 21  (_23:str)
#i:= aggr.count(z); 	# 22  (_24:str)
#io.print(i); 	# 23  (_25:str)
end main;	# 24  
[ 100 ]
[ 10 ]
[ 50 ]
[ 10 ]

# 23:52:52 >  
# 23:52:52 >  Done.
# 23:52:52 >  

