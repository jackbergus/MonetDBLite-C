stdout of test 'tst4300` in directory 'src/optimizer` itself:


# 23:52:52 >  
# 23:52:52 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=39352 --set sql_port=45171 --set xquery_port=52900 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4300.mal </dev/null
# 23:52:52 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
##some join operations
#
##mdb.start();
#b:= bbp.new(:lng,:lng);
#barrier (k,v):= mal.newRange(0:lng);
#        bat.insert(b,v,v);
#        redo (k,v):= mal.nextElement(1:lng,100:lng);
#exit (k,v);
#
#i:= aggr.count(b);
#io.print(i);
#
#c:= algebra.select(b,0:lng,9:lng);
#i:= aggr.count(c);
#io.print(i);
#d:= algebra.select(b,0:lng,49:lng);
#i:= aggr.count(d);
#io.print(i);
#
#zz:= algebra.joinPath(b,c,d);
#i:= aggr.count(zz);
#io.print(i);
#
##to be detected by join inversion
##z:= joinPath(b,c);
##zz:= joinPath(zz,d);
##i:= aggr.count(z);
##io.print(i);
#
#
function user.main():void;              #  0 main:void := user.main() {G}
#some join operations 
#mdb.start(); 
    b := bat.new(:lng,:lng);            #  3 b:bat[:lng,:lng] := CMDBATnew(_4:lng, _4:lng) {G}
barrier (k,v):= language.newRange(0:lng);#  4 (k:bit, v:lng) := RNGnewRange_lng(_7:lng) {J7}
    bat.insert(b,v,v);                  #  5 _8:void := BKCinsert_bun(b:bat[:lng,:lng], v:lng, v:lng) 
    redo (k,v):= language.nextElement(1:lng,100:lng);#  6 (k:bit, v:lng) := RNGnextElement_lng(_9:lng, _10:lng) {J5}
exit (k,v);                             #  7 (k:bit, v:lng) 
    i := aggr.count(b);                 #  8 i:int := ALGcount_bat(b:bat[:lng,:lng]) 
    io.print(i);                        #  9 _12:void := IOprint_val(i:int) 
    c := algebra.select(b,0:lng,9:lng); # 10 c:bat[:lng,:lng] := ALGselect(b:bat[:lng,:lng], _7:lng, _14:lng) {G}
    i := aggr.count(c);                 # 11 i:int := ALGcount_bat(c:bat[:lng,:lng]) 
    io.print(i);                        # 12 _15:void := IOprint_val(i:int) 
    d := algebra.select(b,0:lng,49:lng);# 13 d:bat[:lng,:lng] := ALGselect(b:bat[:lng,:lng], _7:lng, _17:lng) {G}
    i := aggr.count(d);                 # 14 i:int := ALGcount_bat(d:bat[:lng,:lng]) 
    io.print(i);                        # 15 _18:void := IOprint_val(i:int) 
    zz := algebra.joinPath(b,c,d);      # 16 zz:bat[:any,:any] := ALGjoinPath(b:bat[:lng,:lng], c:bat[:lng,:lng], d:bat[:lng,:lng]) {G}
    i := aggr.count(zz);                # 17 i:int := ALGcount_bat(zz:bat[:any,:any]) 
    io.print(i);                        # 18 _20:void := IOprint_val(i:int) 
#to be detected by join inversion 
#z:= joinPath(b,c); 
#zz:= joinPath(zz,d); 
#i:= aggr.count(z); 
#io.print(i); 
end main;	# 24  
[ 100 ]
[ 10 ]
[ 50 ]
[ 10 ]

# 23:52:52 >  
# 23:52:52 >  Done.
# 23:52:52 >  

