stdout of test 'tst4601` in directory 'src/optimizer` itself:


# 19:36:04 >  
# 19:36:04 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=31892 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4601.mal < /dev/null
# 19:36:04 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
## the first test for macro expansions and inversions
#function welcome(lim:int):int;
#    i:= 0;
#barrier j:= i<lim;
#    io.print("Welcome");
#    i:= i+1;
#    redo j:= i<lim;
#exit j;
#    return i;
#end welcome;
function user.welcome(lim:int):int;     #  0 welcome:int := user.welcome(lim:int) 
    i := 0;                             #  1 i:int := _3:int 
barrier j := calc.<(i,lim);             #  2 j:bit := CALCcompLTintint(i:int, lim:int) {J6}
    io.print("Welcome");                #  3 _5:void := IOprint_val(_6:str) 
    i := calc.+(i,1);                   #  4 i:int := CALCbinaryADDintint(i:int, _7:int) 
    redo j := calc.<(i,lim);            #  5 j:bit := CALCcompLTintint(i:int, lim:int) {J3}
exit j;                                 #  6 j:bit 
    return welcome := i;                #  7 welcome:int := i:int 
end welcome;	# 8  
#
#optimizer.macroExpansion("user","welcome");
#
#io.print("test expansion");
#a:=user.welcome(2);
#mdb.list();
#
function user.main():void;              #  0 main:void := user.main() 
# the first test for macro expansions and inversions 
    io.print("test expansion");         #  2 _5:void := IOprint_val(_6:str) 
    a := nil:int;                       #  3 a:int := _19:int 
    _13 := 0;                           #  4 _13:int := _14:int 
barrier _15 := calc.<(_13,2);           #  5 _15:bit := CALCcompLTintint(_13:int, _8:int) {J9}
    io.print("Welcome");                #  6 _16:void := IOprint_val(_17:str) 
    _13 := calc.+(_13,1);               #  7 _13:int := CALCbinaryADDintint(_13:int, _18:int) 
    redo _15 := calc.<(_13,2);          #  8 _15:bit := CALCcompLTintint(_13:int, _8:int) {J6}
exit _15;                               #  9 _15:bit 
    a := _13;                           # 10 a:int := _13:int 
    io.print(a);                        # 11 _9:void := IOprint_val(a:int) 
    mdb.list();                         # 12 _10:void := MDBlist() 
end main;	# 13  
[ "test expansion" ]
[ "Welcome" ]
[ "Welcome" ]
[ 2 ]
function user.main():void;
# the first test for macro expansions and inversions 
    io.print("test expansion");
    a := nil:int;
    _13 := 0;
barrier _15 := calc.<(_13,2);
    io.print("Welcome");
    _13 := calc.+(_13,1);
    redo _15 := calc.<(_13,2);
exit _15;
    a := _13;
    io.print(a);
    mdb.list();
end main;

# 19:36:05 >  
# 19:36:05 >  Done.
# 19:36:05 >  

