stdout of test 'tst4601` in directory 'src/optimizer` itself:


# 19:36:04 >  
# 19:36:04 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=31892 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4601.mal < /dev/null
# 19:36:04 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
## the first test for macro expansions and inversions
#function welcome(lim:int):int;
#    i:= 0;
#barrier j:= i<lim;
#    io.print("Welcome");
#    i:= i+1;
#    redo j:= i<lim;
#exit j;
#    return i;
#end welcome;
function user.welcome(lim:int):int;	# 0  (welcome:int)<-(lim:int)
    i := 0;	# 1  (i:int)<-(_3:int)
barrier j := calc.<(i,lim);	# 2 CALCcompLTintint (j:bit)<-(i:int)(lim:int) jump 6
    io.print("Welcome");	# 3 IOprint_val (_5:void)<-(_6:str)
    i := calc.+(i,1);	# 4 CALCbinaryADDintint (i:int)<-(i:int)(_7:int)
    redo j := calc.<(i,lim);	# 5 CALCcompLTintint (j:bit)<-(i:int)(lim:int) jump 3
exit j;	# 6  (j:bit)
    return welcome := i;	# 7  (welcome:int)<-(i:int)
end welcome;	# 8  
#
#optimizer.macroExpansion("user","welcome");
#
#io.print("test expansion");
#a:=user.welcome(2);
#mdb.list();
#
function user.main():void;	# 0  (main:void)
# the first test for macro expansions and inversions 	# 1  (_1:str)
    io.print("test expansion");	# 2 IOprint_val (_5:void)<-(_6:str)
    _13 := 0;	# 3  (_13:int)<-(_14:int)
barrier _15 := calc.<(_13,2);	# 4 CALCcompLTintint (_15:bit)<-(_13:int)(_8:int) jump 8
    io.print("Welcome");	# 5 IOprint_val (_16:void)<-(_17:str)
    _13 := calc.+(_13,1);	# 6 CALCbinaryADDintint (_13:int)<-(_13:int)(_18:int)
    redo _15 := calc.<(_13,2);	# 7 CALCcompLTintint (_15:bit)<-(_13:int)(_8:int) jump 5
exit _15;	# 8  (_15:bit)
    a := _13;	# 9  (a:int)<-(_13:int)
    io.print(a);	# 10 IOprint_val (_9:void)<-(a:int)
    mdb.list();	# 11 MDBlist (_10:void)
end main;	# 12  
[ "test expansion" ]
[ "Welcome" ]
[ "Welcome" ]
[ 2 ]
function user.main():void;
# the first test for macro expansions and inversions 
    io.print("test expansion");
    _13 := 0;
barrier _15 := calc.<(_13,2);
    io.print("Welcome");
    _13 := calc.+(_13,1);
    redo _15 := calc.<(_13,2);
exit _15;
    a := _13;
    io.print(a);
    mdb.list();
end main;

# 19:36:05 >  
# 19:36:05 >  Done.
# 19:36:05 >  

