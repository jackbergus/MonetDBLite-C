stdout of test 'inlineIfthen` in directory 'src/optimizer` itself:


# 11:53:01 >  
# 11:53:01 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=36453 --set xrpc_port=42260 --set monet_prompt= --trace --dbname=mTests_src_optimizer  inlineIfthen.mal
# 11:53:01 >  

# MonetDB server v5.3.0, based on kernel v1.21.0
# Serving database 'mTests_src_optimizer'
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2007 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://gio.ins.cwi.nl:36453/
#function user.foo{inline}(b:int):int;
#   foo:= 0;
#barrier go:= b<10;
#   foo:= 1;
#exit go;
#   return foo;
#end foo;
function user.foo{inline}(b:int):int;	# 0  (foo:int)<-(b:int)
    foo{inline} := 0;	# 1  (foo:int)<-(_2:int)
barrier go := calc.<(b,10);	# 2 CALCcompLTintint (go:bit)<-(b:int)(_4:int) jump 4
    foo{inline} := 1;	# 3  (foo:int)<-(_5:int)
exit go;	# 4  (go:bit)
    return foo{inline} := foo;	# 5  (foo:int)<-(foo:int)
end foo;	# 6  
#
#function qry();
#	b:= bat.new(:oid,:int);
#	bat.append(b,1);
#	bat.append(b,10);
#	bat.append(b,20);
#	r:bat[:oid,:int]:= mal.multiplex("user","foo",b);
#	io.print(r);
#end qry;
function user.qry():void;	# 0  (qry:void)
    b := bat.new(:oid,:int);	# 1 CMDBATnew (b:bat[:oid,:int])<-(_2:oid)(_3:int)
    bat.append(b,1);	# 2 BKCappend_val_wrap (_4:void)<-(b:bat[:oid,:int])(_5:int)
    bat.append(b,10);	# 3 BKCappend_val_wrap (_6:void)<-(b:bat[:oid,:int])(_7:int)
    bat.append(b,20);	# 4 BKCappend_val_wrap (_8:void)<-(b:bat[:oid,:int])(_9:int)
    r:bat[:oid,:int]  := mal.multiplex("user","foo",b);	# 5 OPTremapMultiplex (r:bat[:oid,:int])<-(_11:str)(_12:str)(b:bat[:oid,:int])
    io.print(r);	# 6 IOprint_val (_13:void)<-(r:bat[:oid,:int])
end qry;	# 7  
#
#optimizer.inline("user","qry");
#optimizer.remap("user","qry");
#mdb.list("user","qry");
#
function user.main():void;	# 0  (main:void)
    mdb.list("user","qry");	# 1 MDBlist3 (_5:void)<-(_2:str)(_3:str)
end main;	# 2  
function user.qry():void;
    b := bat.new(:oid,:int);
    bat.append(b,1);
    bat.append(b,10);
    bat.append(b,20);
    r:bat[:oid,:int]{inline}  := mal.multiplex("user","foo",b);
    io.print(r);
end qry;

# 11:53:01 >  
# 11:53:01 >  Done.
# 11:53:01 >  

