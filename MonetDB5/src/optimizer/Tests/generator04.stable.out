stdout of test 'generator04` in directory 'src/optimizer` itself:


# 11:05:44 >  
# 11:05:44 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=35736 --set sql_port=44954 --set xquery_port=59421 --set monet_prompt= --trace --dbname=mTests_src_optimizer  generator04.mal < /dev/null
# 11:05:44 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
## the generator optimizer
## The flow graph becomes a little more complex 
#mdb.list();
#	io.print("start");
#	b:bat[:void,:int]:= pbm.generator("Sales2005");
#	c:bat[:void,:int]:= pbm.generator("Sales2005");
#	cr:= bat.reverse(c);
#	t:= algebra.select(b,0,3);
#	s:= algebra.join(t,cr);
#	cnt:= aggr.count(s);
#	io.print(cnt);
#	io.print("finished");
#optimizer.generators();
#
#
function user.main():void;	# 0  (main:void)
# the generator optimizer 	# 1  (_2:str)
# The flow graph becomes a little more complex  	# 2  (_4:str)
    mdb.list();	# 3 MDBlist (_5:void)
    io.print("start");	# 4 IOprint_val (_6:int)<-(_7:str)
    cnt := 0;	# 5  (cnt:int)<-(_13:int)
barrier c:bat[:void,:int]  := pbm.newIterator("Sales2005");	# 6 PBMnewIterator (c:bat[:void,:int])<-(_9:str) jump 16
    cr := bat.reverse(c);	# 7 BKCreverse (cr:bat[:int,:void])<-(c:bat[:void,:int])
barrier b:bat[:void,:int]  := pbm.newIterator("Sales2005");	# 8 PBMnewIterator (b:bat[:void,:int])<-(_9:str) jump 14
    t := algebra.select(b,0,3);	# 9 ALGselect (t:bat[:void,:int])<-(b:bat[:void,:int])(_13:int)(_14:int)
    s := algebra.join(t,cr);	# 10 ALGjoin (s:bat[:void,:oid])<-(t:bat[:void,:int])(cr:bat[:int,:void])
    _21 := aggr.count(s);	# 11 ALGcount_bat (_21:int)<-(s:bat[:void,:oid])
    cnt := calc.+(cnt,_21);	# 12 CALCbinaryADDintint (cnt:int)<-(cnt:int)(_21:int)
    redo b:bat[:void,:int]  := pbm.hasMoreElements("Sales2005");	# 13 PBMhasMoreElements (b:bat[:void,:int])<-(_9:str) jump 9
exit b;	# 14 PBMdummy (b:bat[:void,:int])
    redo c:bat[:void,:int]  := pbm.hasMoreElements("Sales2005");	# 15 PBMhasMoreElements (c:bat[:void,:int])<-(_9:str) jump 7
exit c;	# 16 PBMdummy (c:bat[:void,:int])
    io.print(cnt);	# 17 IOprint_val (_17:int)<-(cnt:int)
    io.print("finished");	# 18 IOprint_val (_18:int)<-(_19:str)
end main;	# 19  
function user.main():void;
# the generator optimizer 
# The flow graph becomes a little more complex  
    mdb.list();
    io.print("start");
    cnt := 0;
barrier c:bat[:void,:int]  := pbm.newIterator("Sales2005");
    cr := bat.reverse(c);
barrier b:bat[:void,:int]  := pbm.newIterator("Sales2005");
    t := algebra.select(b,0,3);
    s := algebra.join(t,cr);
    _21 := aggr.count(s);
    cnt := calc.+(cnt,_21);
    redo b:bat[:void,:int]  := pbm.hasMoreElements("Sales2005");
exit b;
    redo c:bat[:void,:int]  := pbm.hasMoreElements("Sales2005");
exit c;
    io.print(cnt);
    io.print("finished");
end main;
[ "start" ]
!ERROR: MALexception:pbm.newIterator:Could not find PBAT

# 11:05:44 >  
# 11:05:44 >  Done.
# 11:05:44 >  

