stdout of test 'roberto1` in directory 'src/optimizer` itself:


# 20:30:34 >  
# 20:30:34 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=37352 --set sql_port=49952 --set xquery_port=55673 --set monet_prompt= --trace --dbname=mTests_src_optimizer  roberto1.mal < /dev/null
# 20:30:34 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
#function f():void;  
#  i:=0;             
#  barrier go:=true; 	
#    # remove from disk
#    a:bat[:void,:dbl] := bbp.bind("P_bat");
#    bat.setPersistent(a,false);
#    transaction.commit();
#    
#    # alter the values
#    a := batcalc.+(a,1.0LL);
#    
#    # store it to disk with the same name
#    bat.setName(a, "P_bat");
#    bat.setPersistent(a,true);
#    transaction.commit();
#    redo go := calc.<(i,2);       
#  exit go;                        
#end f;                            
function user.f():void;                 #  0 f:void := user.f() {G}
    i := 0;                             #  1 i:int := _2:int 
barrier go := true;                     #  2 go:bit := _4:bit {J14}
# remove from disk 
    a:bat[:oid,:dbl]  := bbp.bind("P_bat");#  4 a:bat[:oid,:dbl] := CMDbbpbind(_7:str) {G}
    bat.setPersistent(a,false);         #  5 _8:void := BKCpersists(a:bat[:oid,:dbl], _9:bit) 
    transaction.commit();               #  6 _10:bit := TRNglobal_commit() 
# alter the values 
    a:bat[:oid,:dbl]  := batcalc.+(a,1);#  8 a:bat[:oid,:dbl] := CMDbatADDcst_dbl_dbl_dbl(a:bat[:oid,:dbl], _12:dbl) {G}
# store it to disk with the same name 
    bat.setName(a,"P_bat");             # 10 _14:void := BKCsetName(a:bat[:oid,:dbl], _7:str) 
    bat.setPersistent(a,true);          # 11 _15:void := BKCpersists(a:bat[:oid,:dbl], _4:bit) 
    transaction.commit();               # 12 _16:bit := TRNglobal_commit() 
    redo go := calc.<(i,2);             # 13 go:bit := CALCcompLTintint(i:int, _17:int) {J3}
exit go;                                # 14 go:bit 
end f;	# 15  
#
#
#optimizer.strengthReduction("user", "f");
#mdb.list("user", "f");
#
function user.main():void;              #  0 main:void := user.main() {G}
    mdb.List("user","f");               #  1 _4:void := MDBlist3Detail(_2:str, _3:str) 
end main;	# 2  
function user.f():void;                 #  0 f:void := user.f() {G}
# remove from disk 
# alter the values 
    i := 0;                             #  3 i:int := _2:int 
barrier go := true;                     #  4 go:bit := _4:bit {J14}
    a:bat[:oid,:dbl]  := bbp.bind("P_bat");#  5 a:bat[:oid,:dbl] := CMDbbpbind(_7:str) {G}
    bat.setPersistent(a,false);         #  6 _8:void := BKCpersists(a:bat[:oid,:dbl], _9:bit) 
    transaction.commit();               #  7 _10:bit := TRNglobal_commit() 
    a:bat[:oid,:dbl]  := batcalc.+(a,1);#  8 a:bat[:oid,:dbl] := CMDbatADDcst_dbl_dbl_dbl(a:bat[:oid,:dbl], _12:dbl) {G}
# store it to disk with the same name 
    bat.setName(a,"P_bat");             # 10 _14:void := BKCsetName(a:bat[:oid,:dbl], _7:str) 
    bat.setPersistent(a,true);          # 11 _15:void := BKCpersists(a:bat[:oid,:dbl], _4:bit) 
    transaction.commit();               # 12 _16:bit := TRNglobal_commit() 
    redo go := calc.<(i,2);             # 13 go:bit := CALCcompLTintint(i:int, _17:int) {J3}
exit go;                                # 14 go:bit 
end f;                                  # 15  

# 20:30:34 >  
# 20:30:34 >  Done.
# 20:30:34 >  

