stdout of test 'partitions02` in directory 'src/optimizer` itself:


# 22:44:54 >  
# 22:44:54 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=39818 --set xrpc_port=40069 --set monet_prompt= --trace --dbname=mTests_src_optimizer  partitions02.mal
# 22:44:54 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
##testing the BAT partition manager
## use a fake sql library
## see how you handle an aggregation
#module sql;
#pattern bind(s:str,t:str,i:str,flag:int):bat[:oid,:int]
pattern sql.bind(s:str,t:str,i:str,flag:int):bat[:oid,:int] address MDBdummy;	# 0  (bind:bat[:oid,:int])<-(s:str)(t:str)(i:str)(flag:int)
#pattern rsColumn(b:any...):void
pattern sql.rsColumn(b:any...):void address MDBdummy;	# 0  (rsColumn:void)<-(b:any)
#pattern resultSet(b:any...):void
pattern sql.resultSet(b:any...):void address MDBdummy;	# 0  (resultSet:void)<-(b:any)
#pattern exportResult(b:any...):void
pattern sql.exportResult(b:any...):void address MDBdummy;	# 0  (exportResult:void)<-(b:any)
#pattern exportValue(b:any...):void
pattern sql.exportValue(b:any...):void address MDBdummy;	# 0  (exportValue:void)<-(b:any)
#
##select count(*) from x
#function query(A0:sht):void;
#    x1:bat[:oid,:int]{notnil=true,rows=0,bid=765}  := sql.bind("sys","x","i",0);
#    x6:bat[:oid,:int]{notnil=true,rows=0,bid=769}  := sql.bind("sys","x","i",1);
#    constraints.emptySet(x6);
#    x8:bat[:oid,:int]{notnil=true,rows=0,bid=771}  := sql.bind("sys","x","i",2);
#    constraints.emptySet(x8);
#    x11{rows=0} := algebra.markT(x1,0@0);
#    x12{rows=0} := bat.reverse(x11);
#    x13{rows=1} := aggr.count(x12);
#    sql.exportValue(1,"sys.","countx","int",32,0,6,x13,"");
#end query;
function sql.query(A0:sht):void;	# 0  (query:void)<-(A0:sht)
    x1:bat[:oid,:int]{bid=765,rows=0,notnil=true}  := sql.bind("sys","x","i",0);	# 1 MDBdummy (x1:bat[:oid,:int])<-(_3:str)(_4:str)(_5:str)(_6:int)
    x6:bat[:oid,:int]{bid=769,rows=0,notnil=true}  := sql.bind("sys","x","i",1);	# 2 MDBdummy (x6:bat[:oid,:int])<-(_3:str)(_4:str)(_5:str)(_8:int)
    constraints.emptySet(x6);	# 3 CemptySet (_9:void)<-(x6:bat[:oid,:int])
    x8:bat[:oid,:int]{bid=771,rows=0,notnil=true}  := sql.bind("sys","x","i",2);	# 4 MDBdummy (x8:bat[:oid,:int])<-(_3:str)(_4:str)(_5:str)(_11:int)
    constraints.emptySet(x8);	# 5 CemptySet (_12:void)<-(x8:bat[:oid,:int])
    x11{rows=0} := algebra.markT(x1,0@0);	# 6 ALGtmark (x11:bat[:oid,:oid])<-(x1:bat[:oid,:int])(_14:oid)
    x12{rows=0} := bat.reverse(x11);	# 7 BKCreverse (x12:bat[:oid,:oid])<-(x11:bat[:oid,:oid])
    x13{rows=1} := aggr.count(x12);	# 8 ALGcount_bat (x13:int)<-(x12:bat[:oid,:oid])
    sql.exportValue(1,"sys.","countx","int",32,0,6,x13,"");	# 9 MDBdummy (_17:void)<-(_8:int)(_18:str)(_19:str)(_20:str)(_21:int)(_6:int)(_22:int)(x13:int)(_23:str)
end query;	# 10  
#optimizer.partitions("sql","query");
#mdb.list("sql","query");
#
function user.main():void;	# 0  (main:void)
#testing the BAT partition manager 	# 1  (_1:str)
# use a fake sql library 	# 2  (_2:str)
# see how you handle an aggregation 	# 3  (_3:str)
#select count(*) from x 	# 4  (_4:str)
    mdb.list("sql","query");	# 5 MDBlist3 (_8:void)<-(_6:str)(_7:str)
end main;	# 6  
function sql.query{segment=2}(A0:sht):void;
    x1:bat[:oid,:int]{segment=2,bid=765,rows=0,notnil=true}  := sql.bind("sys","x","i",0);
    bpm2:bat[:oid,:int]  := bpm.take("sys_x_i");
    x6:bat[:oid,:int]{segment=-1,bid=769,rows=0,notnil=true}  := sql.bind("sys","x","i",1);
    constraints.emptySet(x6);
    x8:bat[:oid,:int]{segment=-1,bid=771,rows=0,notnil=true}  := sql.bind("sys","x","i",2);
    constraints.emptySet(x8);
    _27 := bpm.new(:oid,:oid);
barrier x1:bat[:oid,:int]{segment=2,bid=765,rows=0,notnil=true}  := bpm.newIterator(bpm2);
    x11{segment=2,rows=0} := algebra.markT(x1,0@0);
    x12{segment=2,rows=0} := bat.reverse(x11);
    bpm.addPartition(_27,x12);
    redo x1:bat[:oid,:int]{segment=2,bid=765,rows=0,notnil=true}  := bpm.hasMoreElements(bpm2);
exit x1:bat[:oid,:int]{segment=2,bid=765,rows=0,notnil=true} ;
    x13{segment=6,rows=1} := bpm.count(_27);
    sql.exportValue(1,"sys.","countx","int",32,0,6,x13,"");
end query;

# 22:44:54 >  
# 22:44:54 >  Done.
# 22:44:54 >  

