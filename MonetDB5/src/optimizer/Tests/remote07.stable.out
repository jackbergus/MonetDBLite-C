stdout of test 'remote07` in directory 'src/optimizer` itself:


# 15:27:54 >  
# 15:27:54 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=36862 --set monet_prompt= --trace --dbname=mTests_src_optimizer  remote07.mal < /dev/null
# 15:27:54 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
## First test of the remoteQueries optimizer
## we create a remote bat and fake a bind operation.
#
#cat:= inspect.getEnvironment();
#fs := algebra.find(cat,"mapi_port");
#port := calc.int(fs);
##io.printf("port %d\n",port);
#
#mid:= mapi.reconnect("s0_0","localhost",port,"monetdb","monetdb","mal");
#mapi.rpc(mid,"rb:= bat.new(:int,:int); bat.setName(rb,\"rbat\");");
#mapi.rpc(mid,"bat.insert(rb,1,1);");
#mapi.rpc(mid,"bat.insert(rb,3,3);");
#mapi.rpc(mid,"bat.insert(rb,5,5);");
#mapi.rpc(mid,"bat.insert(rb,6,6);");
#mapi.rpc(mid,"bat.insert(rb,7,7);");
#mapi.rpc(mid,"c:=algebra.select(rb,0,12);");
#
#low:= 5+1;
#mapi.put(mid,"low",low);
#i:lng:= mapi.rpc(mid,"e:=algebra.select(d,low,7); i:=aggr.count(d); io.print(i);");
#io.printf(" count %d\n",i);
#d:bat[:int,:int]:= mapi.rpc(mid,"io.print(d);");
#io.print(d);
#optimizer.remoteQueries();
#
function user.main():void;              #  0 main:void := user.main() {G}
# First test of the remoteQueries optimizer 
# we create a remote bat and fake a bind operation. 
    cat := inspect.getEnvironment();    #  3 cat:bat[:str,:str] := INSPECTgetEnvironment() {G}
    fs := algebra.find(cat,"mapi_port");#  4 fs:str := ALGfind(cat:bat[:str,:str], _5:str) {G}
    port := calc.int(fs);               #  5 port:int := CALCstr2int(fs:str) 
#io.printf("port %d\n",port); 
    mid := mapi.reconnect("localhost",port,"s0_0","monetdb","monetdb","mal");#  7 mid:int := SERVERreconnectAlias(_9:str, port:int, _10:str, _11:str, _11:str, _12:str) 
    mapi.rpc(mid,"rb:= bat.new(:int,:int); bat.setName(rb,\"rbat\");");#  8 _13:void := SERVERquery(mid:int, _14:str) 
    mapi.rpc(mid,"bat.insert(rb,1,1);");#  9 _15:void := SERVERquery(mid:int, _16:str) 
    mapi.rpc(mid,"bat.insert(rb,3,3);");# 10 _17:void := SERVERquery(mid:int, _18:str) 
    mapi.rpc(mid,"bat.insert(rb,5,5);");# 11 _19:void := SERVERquery(mid:int, _20:str) 
    mapi.rpc(mid,"bat.insert(rb,6,6);");# 12 _21:void := SERVERquery(mid:int, _22:str) 
    mapi.rpc(mid,"bat.insert(rb,7,7);");# 13 _23:void := SERVERquery(mid:int, _24:str) 
    mapi.rpc(mid,"c:=algebra.select(rb,0,12);");# 14 _25:void := SERVERquery(mid:int, _26:str) 
    low := calc.+(5,1);                 # 15 low:int := CALCbinaryADDintint(_28:int, _29:int) 
    mapi.put(mid,"low",low);            # 16 _30:void := SERVERput(mid:int, _31:str, low:int) 
    i:lng  := mapi.rpc(mid,"e:=algebra.select(rb,low,7); i:=aggr.count(e); io.print(i);");# 17 i:lng := SERVERmapi_rpc_single_row(mid:int, _33:str) 
    io.printf(" count %lld\n",i);       # 18 _34:void := IOprint_formatted_lng(_35:str, i:lng) 
    d:bat[:int,:int]  := mapi.rpc(mid,"io.print(i);");# 19 d:bat[:int,:int] := SERVERmapi_rpc_bat(mid:int, _37:str) {G}
    io.print(d);                        # 20 _38:void := IOprint_val(d:bat[:int,:int]) 
    mapi.disconnect(mid);               # 21 _39:void := SERVERdisconnect(mid:int) 
end main;	# 22  
 count 2
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 7,	  nil	  ]

# 15:27:54 >  
# 15:27:54 >  Done.
# 15:27:54 >  

