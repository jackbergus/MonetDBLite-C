stdout of test 'tst4620` in directory 'src/optimizer` itself:


# 19:36:05 >  
# 19:36:05 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=31892 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4620.mal < /dev/null
# 19:36:05 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
##some join operations
#function algebra.joinPath( a:bat[:any_1,:any_2],
#    z:= algebra.join(a,b);
#    zz:= algebra.join(z,c);
#    return zz;
#end joinPath;
function algebra.joinPath(a:bat[:any_1,:any_2],b:bat[:any_2,:any_3],c:bat[:any_3,:any_4]):bat[:any_1,:any_4];#  0 joinPath:bat[:any_1,:any_4] := algebra.joinPath(a:bat[:any_1,:any_2], b:bat[:any_2,:any_3], c:bat[:any_3,:any_4]) {UPG}
    z := algebra.join(a,b);             #  1 z:bat[:any,:any] := ALGjoin(a:bat[:any_1,:any_2], b:bat[:any_2,:any_3]) {G}
    zz := algebra.join(z,c);            #  2 zz:bat[:any,:any] := ALGjoin(z:bat[:any,:any], c:bat[:any_3,:any_4]) {G}
    return joinPath := zz;              #  3 joinPath:bat[:any_1,:any_4] := zz:bat[:any,:any] {G}
end joinPath;	# 4  
#
#b:= bat.new(:int,:int);
#barrier (k,v):= language.newRange(0:int);
#        bat.insert(b,v,v);
#        redo (k,v):= language.nextElement(1:int,100:int);
#exit (k,v);
#
#i:= aggr.count(b);
#io.print(i);
#
#c:= algebra.select(b,0:int,9:int);
#i:= aggr.count(c);
#io.print(i);
#d:= algebra.select(b,0:int,49:int);
#i:= aggr.count(d);
#io.print(i);
#
#optimizer.macroContraction("algebra","joinPath");
##to be detected by join inversion
#z:= algebra.join(b,c);
#zz:= algebra.join(z,d);
#i:= aggr.count(zz);
#io.print(i);
#mdb.list();
#
function user.main():void;              #  0 main:void := user.main() {G}
#some join operations 
    b := bat.new(:int,:int);            #  2 b:bat[:int,:int] := CMDBATnew(_3:int, _3:int) {G}
barrier (k,v) := language.newRange(0:int);#  3 (k:bit, v:int) := RNGnewRange_int(_6:int) {J6}
    bat.insert(b,v,v);                  #  4 _7:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], v:int, v:int) {G}
    redo (k,v) := language.nextElement(1:int,100:int);#  5 (k:bit, v:int) := RNGnextElement_int(_8:int, _9:int) {J4}
exit (k,v);                             #  6 (k:bit, v:int) 
    i := aggr.count(b);                 #  7 i:wrd := ALGcount_bat(b:bat[:int,:int]) 
    io.print(i);                        #  8 _11:void := IOprint_val(i:wrd) 
    c := algebra.select(b,0:int,9:int); #  9 c:bat[:int,:int] := ALGselect(b:bat[:int,:int], _6:int, _13:int) {G}
    i := aggr.count(c);                 # 10 i:wrd := ALGcount_bat(c:bat[:int,:int]) 
    io.print(i);                        # 11 _14:void := IOprint_val(i:wrd) 
    d := algebra.select(b,0:int,49:int);# 12 d:bat[:int,:int] := ALGselect(b:bat[:int,:int], _6:int, _16:int) {G}
    i := aggr.count(d);                 # 13 i:wrd := ALGcount_bat(d:bat[:int,:int]) 
    io.print(i);                        # 14 _17:void := IOprint_val(i:wrd) 
#to be detected by join inversion 
    zz := algebra.joinPath(b,c,d);      # 16 zz:bat[:int,:int] := algebra.joinPath(b:bat[:int,:int], c:bat[:int,:int], d:bat[:int,:int]) {PG}
    i := aggr.count(zz);                # 17 i:wrd := ALGcount_bat(zz:bat[:int,:int]) 
    io.print(i);                        # 18 _24:void := IOprint_val(i:wrd) 
    mdb.List();                         # 19 _25:void := MDBlistDetail() 
[ 100 ]
[ 10 ]
[ 50 ]
[ 10 ]
function user.main():void;              #  0 main:void := user.main() {G}
#some join operations 
    b := bat.new(:int,:int);            #  2 b:bat[:int,:int] := CMDBATnew(_3:int, _3:int) {G}
barrier (k,v) := language.newRange(0:int);#  3 (k:bit, v:int) := RNGnewRange_int(_6:int) {J6}
    bat.insert(b,v,v);                  #  4 _7:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], v:int, v:int) {G}
    redo (k,v) := language.nextElement(1:int,100:int);#  5 (k:bit, v:int) := RNGnextElement_int(_8:int, _9:int) {J4}
exit (k,v);                             #  6 (k:bit, v:int) 
    i := aggr.count(b);                 #  7 i:wrd := ALGcount_bat(b:bat[:int,:int]) 
    io.print(i);                        #  8 _11:void := IOprint_val(i:wrd) 
    c := algebra.select(b,0:int,9:int); #  9 c:bat[:int,:int] := ALGselect(b:bat[:int,:int], _6:int, _13:int) {G}
    i := aggr.count(c);                 # 10 i:wrd := ALGcount_bat(c:bat[:int,:int]) 
    io.print(i);                        # 11 _14:void := IOprint_val(i:wrd) 
    d := algebra.select(b,0:int,49:int);# 12 d:bat[:int,:int] := ALGselect(b:bat[:int,:int], _6:int, _16:int) {G}
    i := aggr.count(d);                 # 13 i:wrd := ALGcount_bat(d:bat[:int,:int]) 
    io.print(i);                        # 14 _17:void := IOprint_val(i:wrd) 
#to be detected by join inversion 
    zz := algebra.joinPath(b,c,d);      # 16 zz:bat[:int,:int] := algebra.joinPath(b:bat[:int,:int], c:bat[:int,:int], d:bat[:int,:int]) {PG}
    i := aggr.count(zz);                # 17 i:wrd := ALGcount_bat(zz:bat[:int,:int]) 
    io.print(i);                        # 18 _24:void := IOprint_val(i:wrd) 
    mdb.List();                         # 19 _25:void := MDBlistDetail() 

# 19:36:05 >  
# 19:36:05 >  Done.
# 19:36:05 >  

