stdout of test 'partitions00` in directory 'src/optimizer` itself:


# 09:48:29 >  
# 09:48:29 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=36708 --set xrpc_port=48585 --set monet_prompt= --trace --dbname=mTests_src_optimizer  partitions00.mal
# 09:48:29 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
##testing the BAT partition manager
## use a fake sql library
#module sql;
#pattern bind(s:str,t:str,i:str,flag:int):bat[:oid,:int]
pattern sql.bind(s:str,t:str,i:str,flag:int):bat[:oid,:int] address MDBdummy;	# 0  (bind:bat[:oid,:int])<-(s:str)(t:str)(i:str)(flag:int)
#pattern rsColumn(b:any...):void
pattern sql.rsColumn(b:any...):void address MDBdummy;	# 0  (rsColumn:void)<-(b:any)
#pattern resultSet(b:any...):void
pattern sql.resultSet(b:any...):void address MDBdummy;	# 0  (resultSet:void)<-(b:any)
#pattern exportResult(b:any...):void
pattern sql.exportResult(b:any...):void address MDBdummy;	# 0  (exportResult:void)<-(b:any)
#
#function user.query();
#    t1:bat[:oid,:int]:= sql.bind("sys","t","i",0);
#    t11:= algebra.markT(t1,0@0);
#    t12:= bat.reverse(t11);
#    t13:= algebra.join(t12,t1);
#    t14 := sql.resultSet(1,1,t13);
#    sql.rsColumn(t14,"sys.t","i","int",32,0,t13);
#    sql.exportResult(t14,"");
#end query;
function sql.query():void;	# 0  (query:void)
    t1:bat[:oid,:int]  := sql.bind("sys","t","i",1);	# 1 MDBdummy (t1:bat[:oid,:int])<-(_2:str)(_3:str)(_4:str)(_5:int)
    t11 := algebra.markT(t1,0@0);	# 2 ALGtmark (t11:bat[:oid,:oid])<-(t1:bat[:oid,:int])(_7:oid)
    t12 := bat.reverse(t11);	# 3 BKCreverse (t12:bat[:oid,:oid])<-(t11:bat[:oid,:oid])
    t13 := algebra.join(t12,t1);	# 4 ALGjoin (t13:bat[:oid,:int])<-(t12:bat[:oid,:oid])(t1:bat[:oid,:int])
    t14 := sql.resultSet(1,1,t13);	# 5 MDBdummy (t14:void)<-(_5:int)(_5:int)(t13:bat[:oid,:int])
    sql.rsColumn(t14,"sys.t","i","int",32,0,t13);	# 6 MDBdummy (_11:void)<-(t14:void)(_12:str)(_4:str)(_13:str)(_14:int)(_15:int)(t13:bat[:oid,:int])
    sql.exportResult(t14,"");	# 7 MDBdummy (_16:void)<-(t14:void)(_17:str)
end query;	# 8  
#optimizer.partitions("user","query");
#
function user.main():void;	# 0  (main:void)
#testing the BAT partition manager 	# 1  (_1:str)
# use a fake sql library 	# 2  (_2:str)
    mdb.list("sql","query");	# 3 MDBlist3 (_6:void)<-(_4:str)(_5:str)
end main;	# 4  
function sql.query():void;
    t1:bat[:oid,:int]  := sql.bind("sys","t","i",1);
    bpm1:bat[:oid,:int]  := bpm.unfold(t1);
    _20 := bpm.new(:oid,:oid);
barrier t1:bat[:oid,:int]  := bpm.newIterator(bpm1);
    t11 := algebra.markT(t1,0@0);
    bpm.addPartition(_20,t11);
    redo t1:bat[:oid,:int]  := bpm.hasMoreElements(bpm1);
exit t1:bat[:oid,:int] ;
    _26 := bpm.new(:oid,:oid);
barrier t11 := bpm.newIterator(_20);
    t12 := bat.reverse(t11);
    bpm.addPartition(_26,t12);
    redo t11 := bpm.hasMoreElements(_20);
exit t11;
    _32 := bpm.new(:oid,:int);
barrier t12 := bpm.newIterator(_26);
barrier t1:bat[:oid,:int]  := bpm.newIterator(bpm1);
    t13 := algebra.join(t12,t1);
    bpm.addPartition(_32,t13);
    redo t1:bat[:oid,:int]  := bpm.hasMoreElements(bpm1);
    redo t12 := bpm.hasMoreElements(_26);
exit t1:bat[:oid,:int] ;
exit t12;
    t13 := bpm.fold(_32);
    t14 := sql.resultSet(1,1,t13);
    sql.rsColumn(t14,"sys.t","i","int",32,0,t13);
    sql.exportResult(t14,"");
catch SQLexception;
    bpm.garbage(bpm1);
    bpm.garbage(_20);
    bpm.garbage(_26);
    raise SQLexception;
exit SQLexception;
    bpm.garbage(bpm1);
    bpm.garbage(_20);
    bpm.garbage(_26);
end query;

# 09:48:30 >  
# 09:48:30 >  Done.
# 09:48:30 >  

