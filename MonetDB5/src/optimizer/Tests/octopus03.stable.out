stdout of test 'octopus03` in directory 'src/optimizer` itself:


# 15:22:13 >  
# 15:22:13 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=33178 --set xrpc_port=48350 --set monet_prompt= --trace  --dbname=mTests_src_optimizer  octopus03.mal
# 15:22:13 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_optimizer', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2008 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:33178/
function user.q():void;                 #  0 q:void := user.q() {G}
    a:bat[:oid,:int] {rows=1000,hlb=0@0:oid,hub=1000@0:oid} := bat.new(:oid,:int);#  1 a:bat[:oid,:int] := CMDBATnew(_5:oid, _6:int) {G}
    (b:bat[:oid,:int] {hlb=0@0:oid,hub=1000@0:oid},c:bat[:oid,:int] {hlb=0@0:oid,hub=1000@0:oid},d:bat[:oid,:int] {hlb=0@0:oid,hub=1000@0:oid},e:bat[:oid,:int] {hlb=0@0:oid,hub=1000@0:oid}) := bat.partition(a{rows=1000,hlb=0@0:oid,hub=1000@0:oid});#  2 (b:bat[:oid,:int], c:bat[:oid,:int], d:bat[:oid,:int], e:bat[:oid,:int]) := CMDbatpartition(a:bat[:oid,:int]) {G}
    aa := 1;                            #  3 aa:int := _12:int 
    bc := aggr.count(b{hlb=0@0:oid,hub=1000@0:oid});#  4 bc:lng := ALGcount_bat(b:bat[:oid,:int]) 
    dc := aggr.count(c{hlb=0@0:oid,hub=1000@0:oid});#  5 dc:lng := ALGcount_bat(c:bat[:oid,:int]) 
    ca := 3;                            #  6 ca:int := _16:int 
    ea := calc.+(aa,bc);                #  7 ea:lng := CALCbinaryADDintlng(aa:int, bc:lng) 
    fa := calc.+(ca,dc);                #  8 fa:lng := CALCbinaryADDintlng(ca:int, dc:lng) 
    ha := ea;                           #  9 ha:lng := ea:lng 
    ga := calc.+(fa,ha);                # 10 ga:lng := CALCbinaryADDlnglng(fa:lng, ha:lng) 
    io.print(ga);                       # 11 _21:void := IOprint_val(ga:lng) 
end q;                                  # 12  
function user.main():void;              #  0 main:void := user.main() {G}
#simple scalar actions 
    mdb.list("user","q");               #  2 _5:void := MDBlist3(_3:str, _4:str) 
end main;                               #  3  
function user.q():void;                 #  0 q:void := user.q() {G}
    _22 := sabaoth.getLocalConnectionHost();#  1 _22:str := SABgetLocalConnectionHost() {G}
    _23 := sabaoth.getLocalConnectionPort();#  2 _23:int := SABgetLocalConnectionPort() 
    remote.create("A",_22,_23,nil:str,"monetdb","monetdb");#  3 _24:void := RMTcreate(_25:str, _22:str, _23:int, _26:str, _27:str, _27:str) 
    remote.create("B",_22,_23,nil:str,"monetdb","monetdb");#  4 _28:void := RMTcreate(_29:str, _22:str, _23:int, _26:str, _27:str, _27:str) 
    a:bat[:oid,:int] {rows=1000,hlb=0@0:oid,hub=1000@0:oid} := bat.new(:oid,:int);#  5 a:bat[:oid,:int] := CMDBATnew(_5:oid, _6:int) {G}
    (b:bat[:oid,:int] {hlb=0@0:oid,hub=1000@0:oid},c:bat[:oid,:int] {hlb=0@0:oid,hub=1000@0:oid},d:bat[:oid,:int] {hlb=0@0:oid,hub=1000@0:oid},e:bat[:oid,:int] {hlb=0@0:oid,hub=1000@0:oid}) := bat.partition(a{rows=1000,hlb=0@0:oid,hub=1000@0:oid});#  6 (b:bat[:oid,:int], c:bat[:oid,:int], d:bat[:oid,:int], e:bat[:oid,:int]) := CMDbatpartition(a:bat[:oid,:int]) {G}
    _30 := remote.put("A",b{hlb=0@0:oid,hub=1000@0:oid});#  7 _30:rmtobj := RMTput(_25:str, b:bat[:oid,:int]) {G}
    _31 := remote.put("B",c{hlb=0@0:oid,hub=1000@0:oid});#  8 _31:rmtobj := RMTput(_29:str, c:bat[:oid,:int]) {G}
    remote.put("A",d{hlb=0@0:oid,hub=1000@0:oid});#  9 _32:rmtobj := RMTput(_25:str, d:bat[:oid,:int]) {G}
    remote.put("B",e{hlb=0@0:oid,hub=1000@0:oid});# 10 _33:rmtobj := RMTput(_29:str, e:bat[:oid,:int]) {G}
    aa := 1;                            # 11 aa:int := _12:int 
    _34 := remote.exec("A","aggr","count",_30);# 12 _34:rmtobj := RMTexec(_25:str, _35:str, _36:str, _30:rmtobj) {G}
    _37 := remote.exec("B","aggr","count",_31);# 13 _37:rmtobj := RMTexec(_29:str, _35:str, _36:str, _31:rmtobj) {G}
    ca := 3;                            # 14 ca:int := _16:int 
    bc := remote.get("A",_34);          # 15 bc:lng := RMTget(_25:str, _34:rmtobj) 
    ea := calc.+(aa,bc);                # 16 ea:lng := CALCbinaryADDintlng(aa:int, bc:lng) 
    dc := remote.get("B",_37);          # 17 dc:lng := RMTget(_29:str, _37:rmtobj) 
    fa := calc.+(ca,dc);                # 18 fa:lng := CALCbinaryADDintlng(ca:int, dc:lng) 
    ha := ea;                           # 19 ha:lng := ea:lng 
    ga := calc.+(fa,ha);                # 20 ga:lng := CALCbinaryADDlnglng(fa:lng, ha:lng) 
    io.print(ga);                       # 21 _21:void := IOprint_val(ga:lng) 
end q;                                  # 22  

# 15:22:13 >  
# 15:22:13 >  Done.
# 15:22:13 >  

