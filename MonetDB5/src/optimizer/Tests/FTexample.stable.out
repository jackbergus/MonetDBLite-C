stdout of test 'FTexample` in directory 'src/optimizer` itself:


# 23:53:03 >  
# 23:53:03 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=39352 --set sql_port=45171 --set xquery_port=52900 --set monet_prompt= --trace --dbname=mTests_src_optimizer  FTexample.mal </dev/null
# 23:53:03 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
##Code factorization
#function test(s:str):lng;
#	b:= bbp.new(:int,:str);
#	bat.insert(b,1,"hello");
#	z:= algebra.select(b,s,s);
#	i:= aggr.count(z);
#	return i;
#end test;
function user.test(s:str):int;          #  0 test:int := user.test(s:str) {G}
    b := bat.new(:int,:str);            #  1 b:bat[:int,:str] := CMDBATnew(_3:int, _4:str) {G}
    bat.insert(b,1,"hello");            #  2 _5:void := BKCinsert_bun(b:bat[:int,:str], _6:int, _7:str) 
    z := algebra.select(b,s,s);         #  3 z:bat[:int,:str] := ALGselect(b:bat[:int,:str], s:str, s:str) {G}
    i := aggr.count(z);                 #  4 i:int := ALGcount_bat(z:bat[:int,:str]) 
    return test := i;                   #  5 test:int := i:int 
end test;	# 6  
#optimizer.factorize("user","test");
#mdb.list("user","test");
#
function user.main():void;              #  0 main:void := user.main() {G}
#Code factorization 
    mdb.list("user","test");            #  2 _5:void := MDBlist3(_3:str, _4:str) 
end main;	# 3  
factory user.test(s:str):int;
    b := bat.new(:int,:str);
    bat.insert(b,1,"hello");
barrier always := true;
    z := algebra.select(b,s,s);
    i := aggr.count(z);
    yield test := i;
    redo always;
exit always;
end test;

# 23:53:03 >  
# 23:53:03 >  Done.
# 23:53:03 >  

