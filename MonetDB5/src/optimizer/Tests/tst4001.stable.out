stdout of test 'tst4001` in directory 'src/optimizer` itself:


# 23:52:51 >  
# 23:52:51 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=39352 --set sql_port=45171 --set xquery_port=52900 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4001.mal </dev/null
# 23:52:51 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
##tesing the optimizers
#
##setDebug();
#function qry(i:dbl):dbl;
#   i:= 1.0:dbl;
#   z:= mmath.sin(i);
#   j:= 1.0:dbl;
#   k:= mmath.sin(j);
#   l:= k+i;
#   return z;
#end qry;
function user.qry(i:dbl):dbl;           #  0 qry:dbl := user.qry(i:dbl) 
    i := 1:dbl;                         #  1 i:dbl := _2:dbl 
    z := mmath.sin(i);                  #  2 z:dbl := MATHunary_SINdbl(i:dbl) 
    j := 1:dbl;                         #  3 j:dbl := _2:dbl 
    k := mmath.sin(j);                  #  4 k:dbl := MATHunary_SINdbl(j:dbl) 
    l := calc.+(k,i);                   #  5 l:dbl := CALCbinaryADDdbldbl(k:dbl, i:dbl) 
    return qry := z;                    #  6 qry:dbl := z:dbl 
end qry;	# 7  
#t0:= alarm.usec();
#optimizer.aliasRemoval("user","qry");
#optimizer.commonExpressionRemoval("user","qry");
#t1:= alarm.usec();
#t2:= t1-t0;
#io.print("execute");
#z:= user.qry(0.0:dbl);
#io.print(z);
#io.print("done");
#mdb.list("user","qry");
#mdb.list("user","main");
#
function user.main():void;              #  0 main:void := user.main() {G}
#tesing the optimizers 
#setDebug(); 
    t0 := alarm.usec();                 #  3 t0:lng := ALARMusec() 
    t1 := alarm.usec();                 #  4 t1:lng := ALARMusec() 
    t2 := calc.-(t1,t0);                #  5 t2:lng := CALCbinarySUBlnglng(t1:lng, t0:lng) 
    io.print("execute");                #  6 _11:void := IOprint_val(_12:str) 
    z := user.qry(0:dbl);               #  7 z:dbl := user.qry(_14:dbl) 
    io.print(z);                        #  8 _15:void := IOprint_val(z:dbl) 
    io.print("done");                   #  9 _16:void := IOprint_val(_17:str) 
    mdb.List("user","qry");             # 10 _18:void := MDBlist3Detail(_5:str, _6:str) 
    mdb.List();                         # 11 _19:void := MDBlistDetail() 
end main;	# 12  
[ "execute" ]
[ 0.8414709848078965 ]
[ "done" ]
function user.qry(i:dbl):dbl;           #  0 qry:dbl := user.qry(i:dbl) 
    z := mmath.sin(1:dbl);              #  1 z:dbl := MATHunary_SINdbl(_2:dbl) 
    l := calc.+(z,1:dbl);               #  2 l:dbl := CALCbinaryADDdbldbl(z:dbl, _2:dbl) 
    return qry := z;                    #  3 qry:dbl := z:dbl 
end qry;                                #  4  
function user.main():void;              #  0 main:void := user.main() {G}
#tesing the optimizers 
#setDebug(); 
    t0 := alarm.usec();                 #  3 t0:lng := ALARMusec() 
    t1 := alarm.usec();                 #  4 t1:lng := ALARMusec() 
    t2 := calc.-(t1,t0);                #  5 t2:lng := CALCbinarySUBlnglng(t1:lng, t0:lng) 
    io.print("execute");                #  6 _11:void := IOprint_val(_12:str) 
    z := user.qry(0:dbl);               #  7 z:dbl := user.qry(_14:dbl) 
    io.print(z);                        #  8 _15:void := IOprint_val(z:dbl) 
    io.print("done");                   #  9 _16:void := IOprint_val(_17:str) 
    mdb.List("user","qry");             # 10 _18:void := MDBlist3Detail(_5:str, _6:str) 
    mdb.List();                         # 11 _19:void := MDBlistDetail() 
end main;                               # 12  

# 23:52:51 >  
# 23:52:51 >  Done.
# 23:52:51 >  

