#testing the BAT partition manager
# use a fake sql library
# see how you handle an aggregation
module sql;
pattern bind(s:str,t:str,i:str,flag:int):bat[:oid,:int]
address MDBdummy;
pattern rsColumn(b:any...):void
address MDBdummy;
pattern resultSet(b:any...):void
address MDBdummy;
pattern exportResult(b:any...):void
address MDBdummy;
pattern exportValue(b:any...):void
address MDBdummy;

# select * from t order by j;

function query(A0:sht):void;
    x1:bat[:oid,:int]{notnil=true,rows=1,bid=2199}  := sql.bind("sys","t","i",0);
    x6:bat[:oid,:int]{notnil=true,rows=0,bid=2481}  := sql.bind("sys","t","i",1);
    constraints.emptySet(x6);
    x8:bat[:oid,:int]{notnil=true,rows=0,bid=2480}  := sql.bind("sys","t","i",2);
    constraints.emptySet(x8);
    x13:bat[:oid,:int]{notnil=true,rows=1,bid=2201}  := sql.bind("sys","t","j",0);
    x11{rows=1} := algebra.markT(x1,0@0);
    x12{rows=1} := bat.reverse(x11);
    x15{rows=1} := algebra.join(x12,x13);
    x16{rows=1} := algebra.sortTail(x15);
    x17{rows=1} := algebra.join(x12,x1);
    x18 := sql.resultSet(2,1,x16);
    sql.rsColumn(x18,"sys.t","i","int",32,0,x17);
    sql.rsColumn(x18,"sys.t","j","int",32,0,x15);
    sql.exportResult(x18,"");
end query;
optimizer.partitions("sql","query");
mdb.list("sql","query");
