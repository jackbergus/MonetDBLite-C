stdout of test 'generator02` in directory 'src/optimizer` itself:


# 08:52:35 >  
# 08:52:35 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=31986 --set sql_port=44740 --set xquery_port=55062 --set monet_prompt= --trace --dbname=mTests_src_optimizer  generator02.mal < /dev/null
# 08:52:35 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
## the generator optimizer
## The flow graph becomes a little more complex 
#mdb.list();
#	io.print("start");
#	b:bat[:void,:int]:= pbm.generator("Sales2005");
#    low:= 0;
#	high:= 3;
#	s:= algebra.select(b,low,high);
#	c:= aggr.count(s);
#	io.print(c);
#	io.print("finished");
#optimizer.generators();
#
#
function user.main():void;	# 0  (main:void)
# the generator optimizer 	# 1  (_1:str)
# The flow graph becomes a little more complex  	# 2  (_2:str)
    mdb.list();	# 3 MDBlist (_3:void)
    io.print("start");	# 4 IOprint_val (_4:int)<-(_5:str)
    low := 0;	# 5  (low:int)<-(_9:int)
    high := 3;	# 6  (high:int)<-(_11:int)
    c := 0;	# 7  (c:int)<-(_9:int)
barrier b:bat[:void,:int]  := pbm.newIterator("Sales2005");	# 8 PBMnewIterator (b:bat[:void,:int])<-(_7:str) jump 13
    s := algebra.select(b,low,high);	# 9 ALGselect (s:bat[:void,:int])<-(b:bat[:void,:int])(low:int)(high:int)
    _19 := aggr.count(s);	# 10 ALGcount_bat (_19:int)<-(s:bat[:void,:int])
    c := calc.+(c,_19);	# 11 CALCbinaryADDintint (c:int)<-(c:int)(_19:int)
    redo b:bat[:void,:int]  := pbm.getNextElement("Sales2005");	# 12 PBMgetNextElement (b:bat[:void,:int])<-(_7:str) jump 9
exit b;	# 13  (b:bat[:void,:int])
    io.print(c);	# 14 IOprint_val (_14:int)<-(c:int)
    io.print("finished");	# 15 IOprint_val (_15:int)<-(_16:str)
end main;	# 16  
function user.main():void;
# the generator optimizer 
# The flow graph becomes a little more complex  
    mdb.list();
    io.print("start");
    low := 0;
    high := 3;
    c := 0;
barrier b:bat[:void,:int]  := pbm.newIterator("Sales2005");
    s := algebra.select(b,low,high);
    _19 := aggr.count(s);
    c := calc.+(c,_19);
    redo b:bat[:void,:int]  := pbm.getNextElement("Sales2005");
exit b;
    io.print(c);
    io.print("finished");
end main;
[ "start" ]
!ERROR: MALexception:pbm.newIterator:Could not find PBAT

# 08:52:35 >  
# 08:52:35 >  Done.
# 08:52:35 >  

