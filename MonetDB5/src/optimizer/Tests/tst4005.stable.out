stdout of test 'tst4005` in directory 'src/optimizer` itself:


# 19:53:37 >  
# 19:53:37 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib64/MonetDB5:/ufs/mk/monet5/Linux/lib64/MonetDB5/lib:/ufs/mk/monet5/Linux/lib64/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/sql_logs" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/xquery_logs" --set mapi_port=32409 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4005.mal < /dev/null
# 19:53:37 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
## bug discovered in SQL, alias removal does not handle arguments properly
#function getz(p:int):int;
#    x := nil:int;
#    V4 := p;
#    V6 := calc.sht(10);
#    V9 := calc.int(V6);
#    V11 := calc.>(V4,V9);
#barrier V12 := V11;
#    V13 := p;
#    V15 := calc.int(2);
#    V22 := calc.*(V13,V15);
#    V24 := calc.int(V22);
#    x := V24;
#exit V12;
#barrier V27 := calc.not(V11);
#    V28 := p;
#    x := V28;
#exit V27;
#    V30 := x;
#    return V31 := V30;
#end getz;
function user.getz(p:int):int;	# 0  (getz:int)<-(p:int)
    x := nil:int;	# 1  (x:int)<-(_3:int)
    V4 := p;	# 2  (V4:int)<-(p:int)
    V6 := calc.sht(10);	# 3 CALCint2sht (V6:sht)<-(_6:int)
    V9 := calc.int(V6);	# 4 CALCsht2int (V9:int)<-(V6:sht)
    V11 := calc.>(V4,V9);	# 5 CALCcompGTintint (V11:bit)<-(V4:int)(V9:int)
barrier V12 := V11;	# 6  (V12:bit)<-(V11:bit) jump 12
    V13 := p;	# 7  (V13:int)<-(p:int)
    V15 := calc.int(2);	# 8 CALCint2int (V15:int)<-(_12:int)
    V22 := calc.*(V13,V15);	# 9 CALCbinaryMULintint (V22:int)<-(V13:int)(V15:int)
    V24 := calc.int(V22);	# 10 CALCint2int (V24:int)<-(V22:int)
    x := V24;	# 11  (x:int)<-(V24:int)
exit V12;	# 12  (V12:bit)
barrier V27 := calc.not(V11);	# 13 CALCunarybitNOT (V27:bit)<-(V11:bit) jump 16
    V28 := p;	# 14  (V28:int)<-(p:int)
    x := V28;	# 15  (x:int)<-(V28:int)
exit V27;	# 16  (V27:bit)
    V30 := x;	# 17  (V30:int)<-(x:int)
    return V31 := V30;	# 18  (V31:int)<-(V30:int)
end getz;	# 19  
##optimizer.costModel("user","getz");
##optimizer.coercions("user","getz");
##optimizer.emptySet("user","getz");
##optimizer.modes("user","getz");
#optimizer.aliases("user","getz");
##optimizer.commonTerms("user","getz");
##optimizer.accumulators("user","getz");
##optimizer.joinPath("user","getz");
##optimizer.deadcode("user","getz");
##optimizer.reduce("user","getz");
##optimizer.garbageCollector("user","getz");
#mdb.list("user","getz");
#
function user.main():void;	# 0  (main:void)
# bug discovered in SQL, alias removal does not handle arguments properly 	# 1  (_1:str)
#optimizer.costModel("user","getz"); 	# 2  (_2:str)
#optimizer.coercions("user","getz"); 	# 3  (_3:str)
#optimizer.emptySet("user","getz"); 	# 4  (_4:str)
#optimizer.modes("user","getz"); 	# 5  (_5:str)
#optimizer.commonTerms("user","getz"); 	# 6  (_9:str)
#optimizer.accumulators("user","getz"); 	# 7  (_10:str)
#optimizer.joinPath("user","getz"); 	# 8  (_11:str)
#optimizer.deadcode("user","getz"); 	# 9  (_12:str)
#optimizer.reduce("user","getz"); 	# 10  (_13:str)
#optimizer.garbageCollector("user","getz"); 	# 11  (_14:str)
    mdb.list("user","getz");	# 12 MDBlist3 (_15:void)<-(_7:str)(_8:str)
end main;	# 13  
function user.getz(p:int):int;
    x := nil:int;
    V6 := calc.sht(10);
    V9 := calc.int(V6);
    V11 := calc.>(p,V9);
barrier V12 := V11;
    V15 := calc.int(2);
    V22 := calc.*(p,V15);
    V24 := calc.int(V22);
    x := V24;
exit V12;
barrier V27 := calc.not(V11);
    x := p;
exit V27;
    return V31 := x;
end getz;

# 19:53:37 >  
# 19:53:37 >  Done.
# 19:53:37 >  

