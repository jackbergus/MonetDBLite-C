stdout of test 'part04` in directory 'src/optimizer` itself:


# 14:00:18 >  
# 14:00:18 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib64/MonetDB5:/ufs/mk/monet5/Linux/lib64/MonetDB5/lib:/ufs/mk/monet5/Linux/lib64/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/xquery_logs" --set mapi_port=37951 --set monet_prompt= --trace --dbname=mTests_src_optimizer  part04.mal < /dev/null
# 14:00:18 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
##testing the partition optimizer
#
#a1:= bat.new(:void,:int);
#bat.setSequenceBase(a1,0@0);
#a2:= bat.new(:void,:int);
#bat.setSequenceBase(a2,10@0);
#a3:= bat.new(:void,:int);
#bat.setSequenceBase(a3,20@0);
#b1:= bat.new(:void,:int);
#bat.setSequenceBase(b1,0@0);
#b2:= bat.new(:void,:int);
#bat.setSequenceBase(b2,10@0);
#b3:= bat.new(:void,:int);
#bat.setSequenceBase(b3,20@0);
#
#barrier (go,i):= language.newRange(0);
#	bat.append(a1,i);
#	bat.append(a2,i);
#	bat.append(a3,i);
#	bat.append(b1,i);
#	bat.append(b2,i);
#	bat.append(b3,i);
#	redo (go,i):= language.nextElement(1,10);
#exit (go,i);
#
#
## add it to the BAT partition table
#partitions.deposit(a1);
#partitions.deposit(a1,a2);
#partitions.deposit(a1,a3);
#partitions.deposit(b1);
#partitions.deposit(b1,b2);
#partitions.deposit(b1,b3);
#partitions.dump();
#
## this query is already tricky because there are
## two sinks. A naive translation will produce
## a double nested loop
#function qry(a:bat[:void,:int], b:bat[:void,:int]);
#	io.print("a partition");
#	zz:= algebra.select(a,0,10);
#	io.print(zz);
#
#	io.print("b partition");
#	yy:= algebra.select(b,0,10);
#	io.print(yy);
#
#	io.print("experiment 3");
#	c:= algebra.select(a,0,10);
#	m:= bat.mirror(c);
#	j:= algebra.join(m,b);
#	io.print(j);
#end qry;
function user.qry(a:bat[:oid,:int],b:bat[:oid,:int]):void;	# 0  (qry:void)<-(a:bat[:oid,:int])(b:bat[:oid,:int])
    io.print("a partition");	# 1 IOprint_val (_3:void)<-(_4:str)
    zz := algebra.select(a,0,10);	# 2 ALGselect (zz:bat[:oid,:int])<-(a:bat[:oid,:int])(_6:int)(_7:int)
    io.print(zz);	# 3 IOprint_val (_8:void)<-(zz:bat[:oid,:int])
    io.print("b partition");	# 4 IOprint_val (_9:void)<-(_10:str)
    yy := algebra.select(b,0,10);	# 5 ALGselect (yy:bat[:oid,:int])<-(b:bat[:oid,:int])(_6:int)(_7:int)
    io.print(yy);	# 6 IOprint_val (_12:void)<-(yy:bat[:oid,:int])
    io.print("experiment 3");	# 7 IOprint_val (_13:void)<-(_14:str)
    c := algebra.select(a,0,10);	# 8 ALGselect (c:bat[:oid,:int])<-(a:bat[:oid,:int])(_6:int)(_7:int)
    m := bat.mirror(c);	# 9 BKCmirror (m:bat[:oid,:oid])<-(c:bat[:oid,:int])
    j := algebra.join(m,b);	# 10 ALGjoin (j:bat[:oid,:int])<-(m:bat[:oid,:oid])(b:bat[:oid,:int])
    io.print(j);	# 11 IOprint_val (_18:void)<-(j:bat[:oid,:int])
end qry;	# 12  
#
#optimizer.partitionedQuery("user","qry");
#mdb.list("user","qry");
#io.print("run experiment");
#user.qry(a1,b1);
#
start first=1 last=11 
replace first=2 last=3 
variable replacement 'a' instructions 2-3  lifespan 2-8
first=7 last=15 
replace first=11 last=14 
variable replacement 'a' instructions 11-14  lifespan 2-11
first=18 last=18 
first=19 last=18 
start first=1 last=17 
replace first=8 last=9 
variable replacement 'b' instructions 8-9  lifespan 8-14
first=13 last=21 
replace first=17 last=18 
variable replacement 'b' instructions 17-18  lifespan 8-17
first=22 last=24 
first=25 last=24 
function user.main():void;	# 0  (main:void)
#testing the partition optimizer 	# 1  (_1:str)
    a1 := bat.new(:oid,:int);	# 2 CMDBATnew (a1:bat[:oid,:int])<-(_3:oid)(_4:int)
    bat.insert(a1,0@0,0);	# 3 BKCinsert_bun (_5:void)<-(a1:bat[:oid,:int])(_6:oid)(_7:int)
    a2 := bat.new(:oid,:int);	# 4 CMDBATnew (a2:bat[:oid,:int])<-(_3:oid)(_4:int)
    bat.insert(a2,10@0,0);	# 5 BKCinsert_bun (_9:void)<-(a2:bat[:oid,:int])(_10:oid)(_7:int)
    a3 := bat.new(:oid,:int);	# 6 CMDBATnew (a3:bat[:oid,:int])<-(_3:oid)(_4:int)
    bat.insert(a3,20@0,0);	# 7 BKCinsert_bun (_12:void)<-(a3:bat[:oid,:int])(_13:oid)(_7:int)
    b1 := bat.new(:oid,:int);	# 8 CMDBATnew (b1:bat[:oid,:int])<-(_3:oid)(_4:int)
    bat.insert(b1,0@0,0);	# 9 BKCinsert_bun (_15:void)<-(b1:bat[:oid,:int])(_6:oid)(_7:int)
    b2 := bat.new(:oid,:int);	# 10 CMDBATnew (b2:bat[:oid,:int])<-(_3:oid)(_4:int)
    bat.insert(b2,10@0,0);	# 11 BKCinsert_bun (_17:void)<-(b2:bat[:oid,:int])(_10:oid)(_7:int)
    b3 := bat.new(:oid,:int);	# 12 CMDBATnew (b3:bat[:oid,:int])<-(_3:oid)(_4:int)
    bat.insert(b3,20@0,0);	# 13 BKCinsert_bun (_19:void)<-(b3:bat[:oid,:int])(_13:oid)(_7:int)
barrier (go,i):= language.newRange(1);	# 14 RNGnewRange_int (go:bit)(i:int)<-(_22:int) jump 22
    bat.append(a1,i);	# 15 BKCappend_val_wrap (_23:void)<-(a1:bat[:oid,:int])(i:int)
    bat.append(a2,i);	# 16 BKCappend_val_wrap (_24:void)<-(a2:bat[:oid,:int])(i:int)
    bat.append(a3,i);	# 17 BKCappend_val_wrap (_25:void)<-(a3:bat[:oid,:int])(i:int)
    bat.append(b1,i);	# 18 BKCappend_val_wrap (_26:void)<-(b1:bat[:oid,:int])(i:int)
    bat.append(b2,i);	# 19 BKCappend_val_wrap (_27:void)<-(b2:bat[:oid,:int])(i:int)
    bat.append(b3,i);	# 20 BKCappend_val_wrap (_28:void)<-(b3:bat[:oid,:int])(i:int)
    redo (go,i):= language.nextElement(1,10);	# 21 RNGnextElement_int (go:bit)(i:int)<-(_22:int)(_29:int) jump 15
exit (go,i);	# 22  (go:bit)(i:int)
# add it to the BAT partition table 	# 23  (_30:str)
    partitions.deposit(a1);	# 24 BPTdeposit (_31:void)<-(a1:bat[:oid,:int])
    partitions.deposit(a1,a2);	# 25 BPTdeposit2 (_32:void)<-(a1:bat[:oid,:int])(a2:bat[:oid,:int])
    partitions.deposit(a1,a3);	# 26 BPTdeposit2 (_33:void)<-(a1:bat[:oid,:int])(a3:bat[:oid,:int])
    partitions.deposit(b1);	# 27 BPTdeposit (_34:void)<-(b1:bat[:oid,:int])
    partitions.deposit(b1,b2);	# 28 BPTdeposit2 (_35:void)<-(b1:bat[:oid,:int])(b2:bat[:oid,:int])
    partitions.deposit(b1,b3);	# 29 BPTdeposit2 (_36:void)<-(b1:bat[:oid,:int])(b3:bat[:oid,:int])
    partitions.dump();	# 30 BPTdump (_37:void)
# this query is already tricky because there are 	# 31  (_38:str)
# two sinks. A naive translation will produce 	# 32  (_39:str)
# a double nested loop 	# 33  (_40:str)
    mdb.list("user","qry");	# 34 MDBlist3 (_44:void)<-(_42:str)(_43:str)
    io.print("run experiment");	# 35 IOprint_val (_45:void)<-(_46:str)
    user.qry(a1,b1);	# 36  (_47:void)<-(a1:bat[:oid,:int])(b1:bat[:oid,:int])
end main;	# 37  
ptop=6 plimit=1024
[0] bid=7 pid=7 f=0, l=10 prv=-1 nxt=1 cap=-1
[1] bid=7 pid=8 f=10, l=20 prv=0 nxt=2 cap=-1
[2] bid=7 pid=9 f=20, l=30 prv=1 nxt=-1 cap=-1
[3] bid=10 pid=10 f=0, l=10 prv=-1 nxt=4 cap=-1
[4] bid=10 pid=11 f=10, l=20 prv=3 nxt=5 cap=-1
[5] bid=10 pid=12 f=20, l=30 prv=4 nxt=-1 cap=-1
function user.qry(a:bat[:oid,:int],b:bat[:oid,:int]):void;
    io.print("a partition");
barrier (_19,_20):= partitions.newIterator(a);
    zz := algebra.select(_20,0,10);
    io.print(zz);
    redo (_19,_20):= partitions.hasMoreElements(a);
exit (_19,_20);
    io.print("b partition");
barrier (_23,_24):= partitions.newIterator(b);
    yy := algebra.select(_24,0,10);
    io.print(yy);
    redo (_23,_24):= partitions.hasMoreElements(b);
exit (_23,_24);
    io.print("experiment 3");
barrier (_21,_22):= partitions.newIterator(a);
    c := algebra.select(_22,0,10);
    m := bat.mirror(c);
barrier (_25,_26):= partitions.newIterator(b);
    j := algebra.join(m,_26);
    io.print(j);
    redo (_25,_26):= partitions.hasMoreElements(b);
exit (_25,_26);
    redo (_21,_22):= partitions.hasMoreElements(a);
exit (_21,_22);
end qry;
[ "run experiment" ]
[ "a partition" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  2	  ]
[ 3@0,	  3	  ]
[ 4@0,	  4	  ]
[ 5@0,	  5	  ]
[ 6@0,	  6	  ]
[ 7@0,	  7	  ]
[ 8@0,	  8	  ]
[ 9@0,	  9	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 10@0,	  0	  ]
[ 11@0,	  1	  ]
[ 12@0,	  2	  ]
[ 13@0,	  3	  ]
[ 14@0,	  4	  ]
[ 15@0,	  5	  ]
[ 16@0,	  6	  ]
[ 17@0,	  7	  ]
[ 18@0,	  8	  ]
[ 19@0,	  9	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 20@0,	  0	  ]
[ 21@0,	  1	  ]
[ 22@0,	  2	  ]
[ 23@0,	  3	  ]
[ 24@0,	  4	  ]
[ 25@0,	  5	  ]
[ 26@0,	  6	  ]
[ 27@0,	  7	  ]
[ 28@0,	  8	  ]
[ 29@0,	  9	  ]
[ "b partition" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  2	  ]
[ 3@0,	  3	  ]
[ 4@0,	  4	  ]
[ 5@0,	  5	  ]
[ 6@0,	  6	  ]
[ 7@0,	  7	  ]
[ 8@0,	  8	  ]
[ 9@0,	  9	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 10@0,	  0	  ]
[ 11@0,	  1	  ]
[ 12@0,	  2	  ]
[ 13@0,	  3	  ]
[ 14@0,	  4	  ]
[ 15@0,	  5	  ]
[ 16@0,	  6	  ]
[ 17@0,	  7	  ]
[ 18@0,	  8	  ]
[ 19@0,	  9	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 20@0,	  0	  ]
[ 21@0,	  1	  ]
[ 22@0,	  2	  ]
[ 23@0,	  3	  ]
[ 24@0,	  4	  ]
[ 25@0,	  5	  ]
[ 26@0,	  6	  ]
[ 27@0,	  7	  ]
[ 28@0,	  8	  ]
[ 29@0,	  9	  ]
[ "experiment 3" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  2	  ]
[ 3@0,	  3	  ]
[ 4@0,	  4	  ]
[ 5@0,	  5	  ]
[ 6@0,	  6	  ]
[ 7@0,	  7	  ]
[ 8@0,	  8	  ]
[ 9@0,	  9	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 10@0,	  0	  ]
[ 11@0,	  1	  ]
[ 12@0,	  2	  ]
[ 13@0,	  3	  ]
[ 14@0,	  4	  ]
[ 15@0,	  5	  ]
[ 16@0,	  6	  ]
[ 17@0,	  7	  ]
[ 18@0,	  8	  ]
[ 19@0,	  9	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 20@0,	  0	  ]
[ 21@0,	  1	  ]
[ 22@0,	  2	  ]
[ 23@0,	  3	  ]
[ 24@0,	  4	  ]
[ 25@0,	  5	  ]
[ 26@0,	  6	  ]
[ 27@0,	  7	  ]
[ 28@0,	  8	  ]
[ 29@0,	  9	  ]

# 14:00:18 >  
# 14:00:18 >  Done.
# 14:00:18 >  

