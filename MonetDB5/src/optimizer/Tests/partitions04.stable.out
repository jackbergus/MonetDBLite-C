stdout of test 'partitions04` in directory 'src/optimizer` itself:


# 10:36:14 >  
# 10:36:14 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=30252 --set xrpc_port=49927 --set monet_prompt= --trace --dbname=mTests_src_optimizer  partitions04.mal
# 10:36:14 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:32348/
pattern sql.bind(s:str,t:str,i:str,flag:int):bat[:oid,:int] address MDBdummy;
pattern sql.rsColumn(b:any...):void address MDBdummy;
pattern sql.resultSet(b:any...):void address MDBdummy;
pattern sql.exportResult(b:any...):void address MDBdummy;
pattern sql.exportValue(b:any...):void address MDBdummy;
function sql.query(A0:sht):void;
    x1:bat[:oid,:int]  := sql.bind("sys","t","i",0);
    x6:bat[:oid,:int]  := sql.bind("sys","t","i",1);
    constraints.emptySet(x6);
    x8:bat[:oid,:int]  := sql.bind("sys","t","i",2);
    constraints.emptySet(x8);
    x13:bat[:oid,:int]  := sql.bind("sys","t","j",1);
    x11 := algebra.markT(x1,0@0);
    x12 := bat.reverse(x11);
    x15 := algebra.join(x12,x13);
    x16 := algebra.sortTail(x15);
    x17 := algebra.join(x12,x1);
    x18 := sql.resultSet(2,1,x16);
    sql.rsColumn(x18,"sys.t","i","int",32,0,x17);
    sql.rsColumn(x18,"sys.t","j","int",32,0,x15);
    sql.exportResult(x18,"");
end query;
function user.main():void;
#testing the BAT partition manager 
# use a fake sql library 
# see how you handle an aggregation 
# select * from t order by j; 
    mdb.List("sql","query");
end main;
function sql.query(A0:sht):void;        #  0 query:void := sql.query(A0:sht) {G}
    x1:bat[:oid,:int] {notnil=true,rows=1,bid=2199} := sql.bind("sys","t","i",0);#  1 x1:bat[:oid,:int] := MDBdummy(_6:str, _7:str, _8:str, _9:int) {G}
    x6:bat[:oid,:int] {notnil=true,rows=0,bid=2481} := sql.bind("sys","t","i",1);#  2 x6:bat[:oid,:int] := MDBdummy(_6:str, _7:str, _8:str, _4:int) {G}
    bpm10:bat[:oid,:int]  := bpm.unfold(x6{notnil=true,rows=0,bid=2481});#  3 bpm10:bat[:oid,:int] := BPMunfold(x6:bat[:oid,:int]) {G}
    bpm.emptySet(bpm10);                #  4 _12:void := BPMemptySet(bpm10:bat[:oid,:int]) 
    x8:bat[:oid,:int] {notnil=true,rows=0,bid=2480} := sql.bind("sys","t","i",2);#  5 x8:bat[:oid,:int] := MDBdummy(_6:str, _7:str, _8:str, _15:int) {G}
    bpm13:bat[:oid,:int]  := bpm.unfold(x8{notnil=true,rows=0,bid=2480});#  6 bpm13:bat[:oid,:int] := BPMunfold(x8:bat[:oid,:int]) {G}
    bpm.emptySet(bpm13);                #  7 _16:void := BPMemptySet(bpm13:bat[:oid,:int]) 
    x13:bat[:oid,:int] {notnil=true,rows=1,bid=2201} := sql.bind("sys","t","j",1);#  8 x13:bat[:oid,:int] := MDBdummy(_6:str, _7:str, _19:str, _4:int) {G}
    bpm17:bat[:oid,:int]  := bpm.unfold(x13{notnil=true,rows=1,bid=2201});#  9 bpm17:bat[:oid,:int] := BPMunfold(x13:bat[:oid,:int]) {G}
    x11{rows=1} := algebra.markT(x1{notnil=true,rows=1,bid=2199},0@0);# 10 x11:bat[:oid,:oid] := ALGtmark(x1:bat[:oid,:int], _21:oid) {G}
    x12{rows=1} := bat.reverse(x11{rows=1});# 11 x12:bat[:oid,:oid] := BKCreverse(x11:bat[:oid,:oid]) {G}
    _40 := bpm.new(:oid,:int);          # 12 _40:bat[:oid,:int] := BPMnew(_41:oid, _42:int) {G}
    x15{rows=1} := nil;                 # 13 x15:bat[:oid,:int] := _44:bat[:oid,:int] {G}
barrier x13:bat[:oid,:int] {notnil=true,rows=1,bid=2201} := bpm.newIterator(bpm17);# 14 x13:bat[:oid,:int] := BPMnewIterator(bpm17:bat[:oid,:int]) {GJ18}
    x15{rows=1} := algebra.join(x12{rows=1},x13{notnil=true,rows=1,bid=2201});# 15 x15:bat[:oid,:int] := ALGjoin(x12:bat[:oid,:oid], x13:bat[:oid,:int]) {G}
    bpm.addPartition(_40,x15{rows=1});  # 16 _46:void := BPMaddPartition(_40:bat[:oid,:int], x15:bat[:oid,:int]) 
    redo x13:bat[:oid,:int] {notnil=true,rows=1,bid=2201} := bpm.hasMoreElements(bpm17);# 17 x13:bat[:oid,:int] := BPMhasMoreElements(bpm17:bat[:oid,:int]) {GJ15}
exit x13:bat[:oid,:int] {notnil=true,rows=1,bid=2201};# 18 x13:bat[:oid,:int] 
    x15{rows=1} := bpm.fold(_40);       # 19 x15:bat[:oid,:int] := BPMfold(_40:bat[:oid,:int]) {G}
    x16{rows=1} := algebra.sortTail(x15{rows=1});# 20 x16:bat[:oid,:int] := ALGtsort(x15:bat[:oid,:int]) {G}
    x17{rows=1} := algebra.join(x12{rows=1},x1{notnil=true,rows=1,bid=2199});# 21 x17:bat[:oid,:int] := ALGjoin(x12:bat[:oid,:oid], x1:bat[:oid,:int]) {G}
    x18 := sql.resultSet(2,1,x16{rows=1});# 22 x18:void := MDBdummy(_15:int, _4:int, x16:bat[:oid,:int]) 
    sql.rsColumn(x18,"sys.t","i","int",32,0,x17{rows=1});# 23 _27:void := MDBdummy(x18:void, _28:str, _8:str, _29:str, _30:int, _9:int, x17:bat[:oid,:int]) 
    sql.rsColumn(x18,"sys.t","j","int",32,0,x15{rows=1});# 24 _31:void := MDBdummy(x18:void, _28:str, _19:str, _29:str, _30:int, _9:int, x15:bat[:oid,:int]) 
    sql.exportResult(x18,"");           # 25 _32:void := MDBdummy(x18:void, _33:str) 
catch SQLexception;                     # 26 SQLexception:str {J31}
    bpm.garbage(bpm10);                 # 27 _51:void := BPMgarbage(bpm10:bat[:oid,:int]) 
    bpm.garbage(bpm13);                 # 28 _52:void := BPMgarbage(bpm13:bat[:oid,:int]) 
    bpm.garbage(bpm17);                 # 29 _53:void := BPMgarbage(bpm17:bat[:oid,:int]) 
    raise SQLexception;                 # 30 SQLexception:str 
exit SQLexception;                      # 31 SQLexception:str 
    bpm.garbage(bpm10);                 # 32 _56:void := BPMgarbage(bpm10:bat[:oid,:int]) 
    bpm.garbage(bpm13);                 # 33 _57:void := BPMgarbage(bpm13:bat[:oid,:int]) 
    bpm.garbage(bpm17);                 # 34 _58:void := BPMgarbage(bpm17:bat[:oid,:int]) 
end query;                              # 35  

# 10:36:14 >  
# 10:36:14 >  Done.
# 10:36:14 >  

