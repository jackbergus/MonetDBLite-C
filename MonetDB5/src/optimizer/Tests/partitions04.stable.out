stdout of test 'partitions04` in directory 'src/optimizer` itself:


# 10:36:14 >  
# 10:36:14 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=30252 --set xrpc_port=49927 --set monet_prompt= --trace --dbname=mTests_src_optimizer  partitions04.mal
# 10:36:14 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
##testing the BAT partition manager
## use a fake sql library
## see how you handle an aggregation
#module sql;
#pattern bind(s:str,t:str,i:str,flag:int):bat[:oid,:int]
pattern sql.bind(s:str,t:str,i:str,flag:int):bat[:oid,:int] address MDBdummy;	# 0  (bind:bat[:oid,:int])<-(s:str)(t:str)(i:str)(flag:int)
#pattern rsColumn(b:any...):void
pattern sql.rsColumn(b:any...):void address MDBdummy;	# 0  (rsColumn:void)<-(b:any)
#pattern resultSet(b:any...):void
pattern sql.resultSet(b:any...):void address MDBdummy;	# 0  (resultSet:void)<-(b:any)
#pattern exportResult(b:any...):void
pattern sql.exportResult(b:any...):void address MDBdummy;	# 0  (exportResult:void)<-(b:any)
#pattern exportValue(b:any...):void
pattern sql.exportValue(b:any...):void address MDBdummy;	# 0  (exportValue:void)<-(b:any)
#
## select * from t order by j;
#
#function query(A0:sht):void;
#    x1:bat[:oid,:int]{notnil=true,rows=1,bid=2199}  := sql.bind("sys","t","i",0);
#    x6:bat[:oid,:int]{notnil=true,rows=0,bid=2481}  := sql.bind("sys","t","i",1);
#    constraints.emptySet(x6);
#    x8:bat[:oid,:int]{notnil=true,rows=0,bid=2480}  := sql.bind("sys","t","i",2);
#    constraints.emptySet(x8);
#    x13:bat[:oid,:int]{notnil=true,rows=1,bid=2201}  := sql.bind("sys","t","j",0);
#    x11{rows=1} := algebra.markT(x1,0@0);
#    x12{rows=1} := bat.reverse(x11);
#    x15{rows=1} := algebra.join(x12,x13);
#    x16{rows=1} := algebra.sortTail(x15);
#    x17{rows=1} := algebra.join(x12,x1);
#    x18 := sql.resultSet(2,1,x16);
#    sql.rsColumn(x18,"sys.t","i","int",32,0,x17);
#    sql.rsColumn(x18,"sys.t","j","int",32,0,x15);
#    sql.exportResult(x18,"");
#end query;
function sql.query(A0:sht):void;	# 0  (query:void)<-(A0:sht)
    x1:bat[:oid,:int]{bid=2199,rows=1,notnil=true}  := sql.bind("sys","t","i",0);	# 1 MDBdummy (x1:bat[:oid,:int])<-(_3:str)(_4:str)(_5:str)(_6:int)
    x6:bat[:oid,:int]{bid=2481,rows=0,notnil=true}  := sql.bind("sys","t","i",1);	# 2 MDBdummy (x6:bat[:oid,:int])<-(_3:str)(_4:str)(_5:str)(_8:int)
    constraints.emptySet(x6);	# 3 CemptySet (_9:void)<-(x6:bat[:oid,:int])
    x8:bat[:oid,:int]{bid=2480,rows=0,notnil=true}  := sql.bind("sys","t","i",2);	# 4 MDBdummy (x8:bat[:oid,:int])<-(_3:str)(_4:str)(_5:str)(_11:int)
    constraints.emptySet(x8);	# 5 CemptySet (_12:void)<-(x8:bat[:oid,:int])
    x13:bat[:oid,:int]{bid=2201,rows=1,notnil=true}  := sql.bind("sys","t","j",1);	# 6 MDBdummy (x13:bat[:oid,:int])<-(_3:str)(_4:str)(_14:str)(_8:int)
    x11{rows=1} := algebra.markT(x1,0@0);	# 7 ALGtmark (x11:bat[:oid,:oid])<-(x1:bat[:oid,:int])(_16:oid)
    x12{rows=1} := bat.reverse(x11);	# 8 BKCreverse (x12:bat[:oid,:oid])<-(x11:bat[:oid,:oid])
    x15{rows=1} := algebra.join(x12,x13);	# 9 ALGjoin (x15:bat[:oid,:int])<-(x12:bat[:oid,:oid])(x13:bat[:oid,:int])
    x16{rows=1} := algebra.sortTail(x15);	# 10 ALGtsort (x16:bat[:oid,:int])<-(x15:bat[:oid,:int])
    x17{rows=1} := algebra.join(x12,x1);	# 11 ALGjoin (x17:bat[:oid,:int])<-(x12:bat[:oid,:oid])(x1:bat[:oid,:int])
    x18 := sql.resultSet(2,1,x16);	# 12 MDBdummy (x18:void)<-(_11:int)(_8:int)(x16:bat[:oid,:int])
    sql.rsColumn(x18,"sys.t","i","int",32,0,x17);	# 13 MDBdummy (_22:void)<-(x18:void)(_23:str)(_5:str)(_24:str)(_25:int)(_6:int)(x17:bat[:oid,:int])
    sql.rsColumn(x18,"sys.t","j","int",32,0,x15);	# 14 MDBdummy (_26:void)<-(x18:void)(_23:str)(_14:str)(_24:str)(_25:int)(_6:int)(x15:bat[:oid,:int])
    sql.exportResult(x18,"");	# 15 MDBdummy (_27:void)<-(x18:void)(_28:str)
end query;	# 16  
#optimizer.partitions("sql","query");
#mdb.list("sql","query");
#
function user.main():void;	# 0  (main:void)
#testing the BAT partition manager 	# 1  (_1:str)
# use a fake sql library 	# 2  (_2:str)
# see how you handle an aggregation 	# 3  (_3:str)
# select * from t order by j; 	# 4  (_4:str)
    mdb.list("sql","query");	# 5 MDBlist3 (_8:void)<-(_6:str)(_7:str)
end main;	# 6  
function sql.query(A0:sht):void;
    x1:bat[:oid,:int]{bid=2199,rows=1,notnil=true}  := sql.bind("sys","t","i",0);
    x6:bat[:oid,:int]{bid=2481,rows=0,notnil=true}  := sql.bind("sys","t","i",1);
    bpm7:bat[:oid,:int]  := bpm.unfold(x6);
    bpm.emptySet(bpm7);
    x8:bat[:oid,:int]{bid=2480,rows=0,notnil=true}  := sql.bind("sys","t","i",2);
    bpm10:bat[:oid,:int]  := bpm.unfold(x8);
    bpm.emptySet(bpm10);
    x13:bat[:oid,:int]{bid=2201,rows=1,notnil=true}  := sql.bind("sys","t","j",1);
    bpm13:bat[:oid,:int]  := bpm.unfold(x13);
    x11{rows=1} := algebra.markT(x1,0@0);
    x12{rows=1} := bat.reverse(x11);
    _35 := bpm.new(:oid,:int);
barrier x13:bat[:oid,:int]{bid=2201,rows=1,notnil=true}  := bpm.newIterator(bpm13);
    x15{rows=1} := algebra.join(x12,x13);
    bpm.addPartition(_35,x15);
    redo x13:bat[:oid,:int]{bid=2201,rows=1,notnil=true}  := bpm.hasMoreElements(bpm13);
exit x13:bat[:oid,:int]{bid=2201,rows=1,notnil=true} ;
    x15{rows=1} := bpm.fold(_35);
    x16{rows=1} := algebra.sortTail(x15);
    x17{rows=1} := algebra.join(x12,x1);
    x18 := sql.resultSet(2,1,x16);
    sql.rsColumn(x18,"sys.t","i","int",32,0,x17);
    sql.rsColumn(x18,"sys.t","j","int",32,0,x15);
    sql.exportResult(x18,"");
catch SQLexception;
    bpm.garbage(bpm7);
    bpm.garbage(bpm10);
    bpm.garbage(bpm13);
    raise SQLexception;
exit SQLexception;
    bpm.garbage(bpm7);
    bpm.garbage(bpm10);
    bpm.garbage(bpm13);
end query;

# 10:36:14 >  
# 10:36:14 >  Done.
# 10:36:14 >  

