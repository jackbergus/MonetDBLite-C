stdout of test 'partitions04` in directory 'src/optimizer` itself:


# 10:36:14 >  
# 10:36:14 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=30252 --set xrpc_port=49927 --set monet_prompt= --trace --dbname=mTests_src_optimizer  partitions04.mal
# 10:36:14 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
##testing the BAT partition manager
## use a fake sql library
## see how you handle an aggregation
#module sql;
#pattern bind(s:str,t:str,i:str,flag:int):bat[:oid,:int]
pattern sql.bind(s:str,t:str,i:str,flag:int):bat[:oid,:int] address MDBdummy;#  0 bind:bat[:oid,:int] := sql.bind(s:str, t:str, i:str, flag:int) {G}
#pattern rsColumn(b:any...):void
pattern sql.rsColumn(b:any...):void address MDBdummy;#  0 rsColumn:void := sql.rsColumn(b:any) {P}
#pattern resultSet(b:any...):void
pattern sql.resultSet(b:any...):void address MDBdummy;#  0 resultSet:void := sql.resultSet(b:any) {P}
#pattern exportResult(b:any...):void
pattern sql.exportResult(b:any...):void address MDBdummy;#  0 exportResult:void := sql.exportResult(b:any) {P}
#pattern exportValue(b:any...):void
pattern sql.exportValue(b:any...):void address MDBdummy;#  0 exportValue:void := sql.exportValue(b:any) {P}
#
## select * from t order by j;
#
#function query(A0:sht):void;
#    x1:bat[:oid,:int]{notnil=true,rows=1,bid=2199}  := sql.bind("sys","t","i",0);
#    x6:bat[:oid,:int]{notnil=true,rows=0,bid=2481}  := sql.bind("sys","t","i",1);
#    constraints.emptySet(x6);
#    x8:bat[:oid,:int]{notnil=true,rows=0,bid=2480}  := sql.bind("sys","t","i",2);
#    constraints.emptySet(x8);
#    x13:bat[:oid,:int]{notnil=true,rows=1,bid=2201}  := sql.bind("sys","t","j",0);
#    x11{rows=1} := algebra.markT(x1,0@0);
#    x12{rows=1} := bat.reverse(x11);
#    x15{rows=1} := algebra.join(x12,x13);
#    x16{rows=1} := algebra.sortTail(x15);
#    x17{rows=1} := algebra.join(x12,x1);
#    x18 := sql.resultSet(2,1,x16);
#    sql.rsColumn(x18,"sys.t","i","int",32,0,x17);
#    sql.rsColumn(x18,"sys.t","j","int",32,0,x15);
#    sql.exportResult(x18,"");
#end query;
function sql.query(A0:sht):void;        #  0 query:void := sql.query(A0:sht) {G}
    x1:bat[:oid,:int]{notnil=true,rows=1,bid=2199}  := sql.bind("sys","t","i",0);#  1 x1:bat[:oid,:int] := MDBdummy(_6:str, _7:str, _8:str, _9:int) {G}
    x6:bat[:oid,:int]{notnil=true,rows=0,bid=2481}  := sql.bind("sys","t","i",1);#  2 x6:bat[:oid,:int] := MDBdummy(_6:str, _7:str, _8:str, _4:int) {G}
    constraints.emptySet(x6);           #  3 _12:void := CemptySet(x6:bat[:oid,:int]) 
    x8:bat[:oid,:int]{notnil=true,rows=0,bid=2480}  := sql.bind("sys","t","i",2);#  4 x8:bat[:oid,:int] := MDBdummy(_6:str, _7:str, _8:str, _15:int) {G}
    constraints.emptySet(x8);           #  5 _16:void := CemptySet(x8:bat[:oid,:int]) 
    x13:bat[:oid,:int]{notnil=true,rows=1,bid=2201}  := sql.bind("sys","t","j",1);#  6 x13:bat[:oid,:int] := MDBdummy(_6:str, _7:str, _19:str, _4:int) {G}
    x11{rows=1} := algebra.markT(x1,0@0);#  7 x11:bat[:oid,:oid] := ALGtmark(x1:bat[:oid,:int], _21:oid) {G}
    x12{rows=1} := bat.reverse(x11);    #  8 x12:bat[:oid,:oid] := BKCreverse(x11:bat[:oid,:oid]) {G}
    x15{rows=1} := algebra.join(x12,x13);#  9 x15:bat[:oid,:int] := ALGjoin(x12:bat[:oid,:oid], x13:bat[:oid,:int]) {G}
    x16{rows=1} := algebra.sortTail(x15);# 10 x16:bat[:oid,:int] := ALGtsort(x15:bat[:oid,:int]) {G}
    x17{rows=1} := algebra.join(x12,x1);# 11 x17:bat[:oid,:int] := ALGjoin(x12:bat[:oid,:oid], x1:bat[:oid,:int]) {G}
    x18 := sql.resultSet(2,1,x16);      # 12 x18:void := MDBdummy(_15:int, _4:int, x16:bat[:oid,:int]) 
    sql.rsColumn(x18,"sys.t","i","int",32,0,x17);# 13 _27:void := MDBdummy(x18:void, _28:str, _8:str, _29:str, _30:int, _9:int, x17:bat[:oid,:int]) 
    sql.rsColumn(x18,"sys.t","j","int",32,0,x15);# 14 _31:void := MDBdummy(x18:void, _28:str, _19:str, _29:str, _30:int, _9:int, x15:bat[:oid,:int]) 
    sql.exportResult(x18,"");           # 15 _32:void := MDBdummy(x18:void, _33:str) 
end query;	# 16  
#optimizer.partitions("sql","query");
#mdb.list("sql","query");
#
function user.main():void;              #  0 main:void := user.main() {G}
#testing the BAT partition manager 
# use a fake sql library 
# see how you handle an aggregation 
# select * from t order by j; 
    mdb.list("sql","query");            #  5 _8:void := MDBlist3(_6:str, _7:str) 
end main;	# 6  
function sql.query(A0:sht):void;
    x1:bat[:oid,:int]{notnil=true,rows=1,bid=2199}  := sql.bind("sys","t","i",0);
    x6:bat[:oid,:int]{notnil=true,rows=0,bid=2481}  := sql.bind("sys","t","i",1);
    bpm10:bat[:oid,:int]  := bpm.unfold(x6);
    bpm.emptySet(bpm10);
    x8:bat[:oid,:int]{notnil=true,rows=0,bid=2480}  := sql.bind("sys","t","i",2);
    bpm13:bat[:oid,:int]  := bpm.unfold(x8);
    bpm.emptySet(bpm13);
    x13:bat[:oid,:int]{notnil=true,rows=1,bid=2201}  := sql.bind("sys","t","j",1);
    bpm17:bat[:oid,:int]  := bpm.unfold(x13);
    x11{rows=1} := algebra.markT(x1,0@0);
    x12{rows=1} := bat.reverse(x11);
    _40 := bpm.new(:oid,:int);
    x15{rows=1} := nil;
barrier x13:bat[:oid,:int]{notnil=true,rows=1,bid=2201}  := bpm.newIterator(bpm17);
    x15{rows=1} := algebra.join(x12,x13);
    bpm.addPartition(_40,x15);
    redo x13:bat[:oid,:int]{notnil=true,rows=1,bid=2201}  := bpm.hasMoreElements(bpm17);
exit x13:bat[:oid,:int]{notnil=true,rows=1,bid=2201} ;
    x15{rows=1} := bpm.fold(_40);
    x16{rows=1} := algebra.sortTail(x15);
    x17{rows=1} := algebra.join(x12,x1);
    x18 := sql.resultSet(2,1,x16);
    sql.rsColumn(x18,"sys.t","i","int",32,0,x17);
    sql.rsColumn(x18,"sys.t","j","int",32,0,x15);
    sql.exportResult(x18,"");
catch SQLexception;
    bpm.garbage(bpm10);
    bpm.garbage(bpm13);
    bpm.garbage(bpm17);
    raise SQLexception;
exit SQLexception;
    bpm.garbage(bpm10);
    bpm.garbage(bpm13);
    bpm.garbage(bpm17);
end query;

# 10:36:14 >  
# 10:36:14 >  Done.
# 10:36:14 >  

