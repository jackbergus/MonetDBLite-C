stdout of test 'tst4700` in directory 'src/optimizer` itself:


# 23:52:59 >  
# 23:52:59 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=39352 --set sql_port=45171 --set xquery_port=52900 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4700.mal </dev/null
# 23:52:59 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
## The first MAL compiler test
## the result is retained in MCCtst903.c
## which can be compiled and linked with the system.
#
#
#function tst903();
#    t0:= alarm.usec();
#    b:= bbp.new(:void,:lng);
#    barrier (go,i):= mal.newRange(0:lng);
#        k:= mmath.rand();
#        l:= calc.lng(k);
#        bat.insert(b,nil,l);
#        redo (go,i):= mal.nextElement(1:lng,1000000:lng);
#    exit (go,i);
#    t1:= alarm.usec();
#    d0:= t1-t0;
#    io.printf("#loop %d",d0);
#    #setReadMode(b);
#    mx:= aggr.max(b); 
#    #io.printf("max %d",mx);
#    mi:= aggr.min(b); 
#    #io.printf(" min %d\n",mi);
#    t0:= alarm.usec();
#    c:= algebra.copy(b);
#    t1:= alarm.usec();
#    d0:= t1-t0;
#    io.printf("#copy %d",d0);
#    cnt:= aggr.count(c);
#    io.printf("#count %d\n",cnt);
#    t0:= alarm.usec();
#    z:= algebra.select(b,25:lng,25:lng);
#    t1:= alarm.usec();
#    d0:= t1-t0;
#    io.printf("#select none %d",d0);
#    cnt:= aggr.count(z);
#    io.printf(" count %d\n",cnt);
#    t0:= alarm.usec();
#    z2:= algebra.select(b,mi,mx);
#    t1:= alarm.usec();
#    d0:= t1-t0;
#    io.printf("#select all %d",d0);
#    cnt:= aggr.count(z2);
#    io.printf(" count %d\n",cnt);
#    rng:= mx-mi;
#    r2:= rng/20;
#    r3:= mi+r2;
#    t0:= alarm.usec();
#    z3:= algebra.select(b,mi,r3);
#    t1:= alarm.usec();
#    d0:= t1-t0;
#    io.printf("#select 0.05 %d",d0);
#    cnt:= aggr.count(z3);
#    io.printf(" count %d\n",cnt);
#    r2:= rng/10;
#    r3:= mi+r2;
#    t0:= alarm.usec();
#    z4:= algebra.select(b,mi,r3);
#    t1:= alarm.usec();
#    d0:= t1-t0;
#    io.printf("#select 0.1 %d",d0);
#    cnt:= aggr.count(z4);
#    io.printf(" count %d\n",cnt);
#    r2:= rng/5;
#    r3:= mi+r2;
#    t0:= alarm.usec();
#    z5:= algebra.select(b,mi,r3);
#    t1:= alarm.usec();
#    d0:= t1-t0;
#    io.printf("#select 0.2 %d",d0);
#    cnt:= aggr.count(z5);
#    io.printf(" count %d\n",cnt);
#    r3:= r3+r2;
#    t0:= alarm.usec();
#    z6:= algebra.select(b,mi,r3);
#    t1:= alarm.usec();
#    d0:= t1-t0;
#    io.printf("#select 0.4 %d",d0);
#    cnt:= aggr.count(z6);
#    io.printf(" count %d\n",cnt);
#    r3:= r3+r2;
#    t0:= alarm.usec();
#    z7:= algebra.select(b,mi,r3);
#    t1:= alarm.usec();
#    d0:= t1-t0;
#    io.printf("#select 0.6 %d",d0);
#    cnt:= aggr.count(z7);
#    io.printf(" count %d\n",cnt);
#    r3:= r3+r2;
#    t0:= alarm.usec();
#    z8:= algebra.select(b,mi,r3);
#    t1:= alarm.usec();
#    d0:= t1-t0;
#    io.printf("#select 0.8 %d",d0);
#    cnt:= aggr.count(z8);
#    io.printf(" count %d\n",cnt);
#    r3:= r3+r2;
#    t0:= alarm.usec();
#    z9:= algebra.select(b,mi,r3);
#    t1:= alarm.usec();
#    d0:= t1-t0;
#    io.printf("#select 1.0 %d",d0);
#    cnt:= aggr.count(z9);
#    io.printf(" count %d\n",cnt);
#    t0:= alarm.usec();
#    sr:= bat.reverse(b);
#    s:= algebra.sort(sr);
#    t1:= alarm.usec();
#    d0:= t1-t0;
#    io.printf("#tail sort %d",d0);
#end tst903;
function user.tst903():void;	# 0  (tst903:void)
    t0 := alarm.usec();	# 1 ALARMusec (t0:lng)
    b := bat.new(:void,:lng);	# 2 CMDBATnew (b:bat[:void,:lng])<-(_3:void)(_4:lng)
barrier (go,i):= language.newRange(0:lng);	# 3 RNGnewRange_lng (go:bit)(i:lng)<-(_7:lng) jump 8
    k := mmath.rand();	# 4 MATHrandint (k:int)
    l := calc.lng(k);	# 5 CALCint2lng (l:lng)<-(k:int)
    bat.insert(b,nil:void,l);	# 6 BKCinsert_bun (_10:void)<-(b:bat[:void,:lng])(_11:void)(l:lng)
    redo (go,i):= language.nextElement(1:lng,1000000:lng);	# 7 RNGnextElement_lng (go:bit)(i:lng)<-(_12:lng)(_13:lng) jump 4
exit (go,i);	# 8  (go:bit)(i:lng)
    t1 := alarm.usec();	# 9 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 10 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#loop %d",d0);	# 11 IOprint_formatted_lng (_16:int)<-(_17:str)(d0:lng)
#setReadMode(b); 	# 12  (_19:str)
    mx := aggr.max(b);	# 13 ALGmax_lng (mx:lng)<-(b:bat[:void,:lng])
#io.printf("max %d",mx); 	# 14  (_22:str)
    mi := aggr.min(b);	# 15 ALGmin_lng (mi:lng)<-(b:bat[:void,:lng])
#io.printf(" min %d\n",mi); 	# 16  (_25:str)
    t0 := alarm.usec();	# 17 ALARMusec (t0:lng)
    c := algebra.copy(b);	# 18 ALGcopy (c:bat[:void,:lng])<-(b:bat[:void,:lng])
    t1 := alarm.usec();	# 19 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 20 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#copy %d",d0);	# 21 IOprint_formatted_lng (_24:int)<-(_25:str)(d0:lng)
    cnt := aggr.count(c);	# 22 ALGcount_bat (cnt:int)<-(c:bat[:void,:lng])
    io.printf("#count %d\n",cnt);	# 23 IOprint_formatted_int (_27:int)<-(_28:str)(cnt:int)
    t0 := alarm.usec();	# 24 ALARMusec (t0:lng)
    z := algebra.select(b,25:lng,25:lng);	# 25 ALGselect (z:bat[:void,:lng])<-(b:bat[:void,:lng])(_30:lng)(_30:lng)
    t1 := alarm.usec();	# 26 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 27 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select none %d",d0);	# 28 IOprint_formatted_lng (_31:int)<-(_32:str)(d0:lng)
    cnt := aggr.count(z);	# 29 ALGcount_bat (cnt:int)<-(z:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 30 IOprint_formatted_int (_33:int)<-(_34:str)(cnt:int)
    t0 := alarm.usec();	# 31 ALARMusec (t0:lng)
    z2 := algebra.select(b,mi,mx);	# 32 ALGselect (z2:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(mx:lng)
    t1 := alarm.usec();	# 33 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 34 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select all %d",d0);	# 35 IOprint_formatted_lng (_36:int)<-(_37:str)(d0:lng)
    cnt := aggr.count(z2);	# 36 ALGcount_bat (cnt:int)<-(z2:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 37 IOprint_formatted_int (_38:int)<-(_34:str)(cnt:int)
    rng := calc.-(mx,mi);	# 38 CALCbinarySUBlnglng (rng:lng)<-(mx:lng)(mi:lng)
    r2 := calc./(rng,20);	# 39 CALCbinarycheckDIVlngint (r2:lng)<-(rng:lng)(_41:int)
    r3 := calc.+(mi,r2);	# 40 CALCbinaryADDlnglng (r3:lng)<-(mi:lng)(r2:lng)
    t0 := alarm.usec();	# 41 ALARMusec (t0:lng)
    z3 := algebra.select(b,mi,r3);	# 42 ALGselect (z3:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 43 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 44 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.05 %d",d0);	# 45 IOprint_formatted_lng (_44:int)<-(_45:str)(d0:lng)
    cnt := aggr.count(z3);	# 46 ALGcount_bat (cnt:int)<-(z3:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 47 IOprint_formatted_int (_46:int)<-(_34:str)(cnt:int)
    r2 := calc./(rng,10);	# 48 CALCbinarycheckDIVlngint (r2:lng)<-(rng:lng)(_47:int)
    r3 := calc.+(mi,r2);	# 49 CALCbinaryADDlnglng (r3:lng)<-(mi:lng)(r2:lng)
    t0 := alarm.usec();	# 50 ALARMusec (t0:lng)
    z4 := algebra.select(b,mi,r3);	# 51 ALGselect (z4:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 52 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 53 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.1 %d",d0);	# 54 IOprint_formatted_lng (_49:int)<-(_50:str)(d0:lng)
    cnt := aggr.count(z4);	# 55 ALGcount_bat (cnt:int)<-(z4:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 56 IOprint_formatted_int (_51:int)<-(_34:str)(cnt:int)
    r2 := calc./(rng,5);	# 57 CALCbinarycheckDIVlngint (r2:lng)<-(rng:lng)(_52:int)
    r3 := calc.+(mi,r2);	# 58 CALCbinaryADDlnglng (r3:lng)<-(mi:lng)(r2:lng)
    t0 := alarm.usec();	# 59 ALARMusec (t0:lng)
    z5 := algebra.select(b,mi,r3);	# 60 ALGselect (z5:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 61 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 62 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.2 %d",d0);	# 63 IOprint_formatted_lng (_54:int)<-(_55:str)(d0:lng)
    cnt := aggr.count(z5);	# 64 ALGcount_bat (cnt:int)<-(z5:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 65 IOprint_formatted_int (_56:int)<-(_34:str)(cnt:int)
    r3 := calc.+(r3,r2);	# 66 CALCbinaryADDlnglng (r3:lng)<-(r3:lng)(r2:lng)
    t0 := alarm.usec();	# 67 ALARMusec (t0:lng)
    z6 := algebra.select(b,mi,r3);	# 68 ALGselect (z6:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 69 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 70 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.4 %d",d0);	# 71 IOprint_formatted_lng (_58:int)<-(_59:str)(d0:lng)
    cnt := aggr.count(z6);	# 72 ALGcount_bat (cnt:int)<-(z6:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 73 IOprint_formatted_int (_60:int)<-(_34:str)(cnt:int)
    r3 := calc.+(r3,r2);	# 74 CALCbinaryADDlnglng (r3:lng)<-(r3:lng)(r2:lng)
    t0 := alarm.usec();	# 75 ALARMusec (t0:lng)
    z7 := algebra.select(b,mi,r3);	# 76 ALGselect (z7:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 77 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 78 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.6 %d",d0);	# 79 IOprint_formatted_lng (_62:int)<-(_63:str)(d0:lng)
    cnt := aggr.count(z7);	# 80 ALGcount_bat (cnt:int)<-(z7:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 81 IOprint_formatted_int (_64:int)<-(_34:str)(cnt:int)
    r3 := calc.+(r3,r2);	# 82 CALCbinaryADDlnglng (r3:lng)<-(r3:lng)(r2:lng)
    t0 := alarm.usec();	# 83 ALARMusec (t0:lng)
    z8 := algebra.select(b,mi,r3);	# 84 ALGselect (z8:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 85 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 86 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.8 %d",d0);	# 87 IOprint_formatted_lng (_66:int)<-(_67:str)(d0:lng)
    cnt := aggr.count(z8);	# 88 ALGcount_bat (cnt:int)<-(z8:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 89 IOprint_formatted_int (_68:int)<-(_34:str)(cnt:int)
    r3 := calc.+(r3,r2);	# 90 CALCbinaryADDlnglng (r3:lng)<-(r3:lng)(r2:lng)
    t0 := alarm.usec();	# 91 ALARMusec (t0:lng)
    z9 := algebra.select(b,mi,r3);	# 92 ALGselect (z9:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 93 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 94 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 1.0 %d",d0);	# 95 IOprint_formatted_lng (_70:int)<-(_71:str)(d0:lng)
    cnt := aggr.count(z9);	# 96 ALGcount_bat (cnt:int)<-(z9:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 97 IOprint_formatted_int (_72:int)<-(_73:str)(cnt:int)
    t0 := alarm.usec();	# 98 ALARMusec (t0:lng)
    sr := bat.reverse(b);	# 99 BKCreverse (sr:bat[:lng,:void])<-(b:bat[:void,:lng])
    s := algebra.sort(sr);	# 100 ALGtsort (s:bat[:lng,:void])<-(sr:bat[:lng,:void])
    t1 := alarm.usec();	# 101 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 102 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#tail sort %d",d0);	# 103 IOprint_formatted_lng (_76:int)<-(_77:str)(d0:lng)
end tst903;	# 104  
#
#Mcc.compile("user","tst903");
#
!ERROR: 'Mcc.compile' undefined in user.main[4] _4:any := Mcc.compile(_5:str, _6:str)
function user.main():void;	# 0  (main:void)
# The first MAL compiler test 	# 1  (_1:str)
# the result is retained in MCCtst903.c 	# 2  (_2:str)
# which can be compiled and linked with the system. 	# 3  (_3:str)
    Mcc.compile("user","tst903");	# 4  unknown (_4:any)<-(_5:str)(_6:str)
end main;	# 5  

# 23:52:59 >  
# 23:52:59 >  Done.
# 23:52:59 >  

