stdout of test 'inline09` in directory 'src/optimizer` itself:


# 11:53:00 >  
# 11:53:00 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=36453 --set xrpc_port=42260 --set monet_prompt= --trace --dbname=mTests_src_optimizer  inline09.mal
# 11:53:00 >  

# MonetDB server v5.3.0, based on kernel v1.21.0
# Serving database 'mTests_src_optimizer'
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2007 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://gio.ins.cwi.nl:36453/
#
## remapping inline functions
#function foo{inline}(a:str):str;
#	a:= str.replace(a,"A","");
#	a:= str.replace(a,"E","");
#	a:= str.replace(a,"I","");
#	a:= str.replace(a,"O","");
#	a:= str.replace(a,"U","");
#	a:= str.replace(a," ","");
#	return foo:=a;
#end foo;
function user.foo{inline}(a:str):str;	# 0  (foo:str)<-(a:str)
    a := str.replace(a,"A","");	# 1 STRreplace (a:str)<-(a:str)(_2:str)(_3:str)
    a := str.replace(a,"E","");	# 2 STRreplace (a:str)<-(a:str)(_4:str)(_3:str)
    a := str.replace(a,"I","");	# 3 STRreplace (a:str)<-(a:str)(_5:str)(_3:str)
    a := str.replace(a,"O","");	# 4 STRreplace (a:str)<-(a:str)(_6:str)(_3:str)
    a := str.replace(a,"U","");	# 5 STRreplace (a:str)<-(a:str)(_7:str)(_3:str)
    a := str.replace(a," ","");	# 6 STRreplace (a:str)<-(a:str)(_8:str)(_3:str)
    return foo{inline} := a;	# 7  (foo:str)<-(a:str)
end foo;	# 8  
#
#function bar{inline}(a:str,b:str):str;
#	sa:= user.foo(a);
#	sa:= str.substring(sa, 1, 5);
#	sb:= user.foo(b);
#	sb:= str.substring(sb, 1, 3);
#	c:= sa+sb;
#	return bar:=c;
#end bar;
function user.bar{inline}(a:str,b:str):str;	# 0  (bar:str)<-(a:str)(b:str)
    sa := user.foo(a);	# 1  (sa:str)<-(a:str)
    sa := str.substring(sa,1,5);	# 2 STRsubstring (sa:str)<-(sa:str)(_4:int)(_5:int)
    sb := user.foo(b);	# 3  (sb:str)<-(b:str)
    sb := str.substring(sb,1,3);	# 4 STRsubstring (sb:str)<-(sb:str)(_4:int)(_7:int)
    c := calc.+(sa,sb);	# 5 CALCstrConcat (c:str)<-(sa:str)(sb:str)
    return bar{inline} := c;	# 6  (bar:str)<-(c:str)
end bar;	# 7  
#
#function qry();
#	b:= bat.new(:oid,:str);
#	bat.insert(b,0@0,"2");
#	z:bat[:oid,:str]:= mal.multiplex("user","bar",b,b);
#end qry;
function user.qry():void;	# 0  (qry:void)
    b := bat.new(:oid,:str);	# 1 CMDBATnew (b:bat[:oid,:str])<-(_2:oid)(_3:str)
    bat.insert(b,0@0,"2");	# 2 BKCinsert_bun (_4:void)<-(b:bat[:oid,:str])(_5:oid)(_6:str)
    z:bat[:oid,:str]  := mal.multiplex("user","bar",b,b);	# 3 OPTremapMultiplex (z:bat[:oid,:str])<-(_8:str)(_9:str)(b:bat[:oid,:str])(b:bat[:oid,:str])
end qry;	# 4  
#
#	optimizer.inline("user","qry");
#	optimizer.remap("user","qry");
#	mdb.list("user","qry");
#
function user.main():void;	# 0  (main:void)
# remapping inline functions 	# 1  (_1:str)
    mdb.list("user","qry");	# 2 MDBlist3 (_6:void)<-(_3:str)(_4:str)
end main;	# 3  
function user.qry():void;
    b := bat.new(:oid,:str);
    bat.insert(b,0@0,"2");
    z:bat[:oid,:str]{inline}  := nil;
    _13 := nil;
    b := batstr.replace(b,"A","");
    b := batstr.replace(b,"E","");
    b := batstr.replace(b,"I","");
    b := batstr.replace(b,"O","");
    b := batstr.replace(b,"U","");
    b := batstr.replace(b," ","");
    _13 := b;
    _13 := batstr.substring(_13,1,5);
    _16 := nil;
    b := batstr.replace(b,"A","");
    b := batstr.replace(b,"E","");
    b := batstr.replace(b,"I","");
    b := batstr.replace(b,"O","");
    b := batstr.replace(b,"U","");
    b := batstr.replace(b," ","");
    _16 := b;
    _16 := batstr.substring(_16,1,3);
    _18 := batcalc.+(_13,_16);
    z:bat[:oid,:str]{inline}  := _18;
end qry;

# 11:53:00 >  
# 11:53:00 >  Done.
# 11:53:00 >  

