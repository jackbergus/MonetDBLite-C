stdout of test 'inline09` in directory 'src/optimizer` itself:


# 11:53:00 >  
# 11:53:00 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=36453 --set xrpc_port=42260 --set monet_prompt= --trace --dbname=mTests_src_optimizer  inline09.mal
# 11:53:00 >  

# MonetDB server v5.3.0, based on kernel v1.21.0
# Serving database 'mTests_src_optimizer'
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2007 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://gio.ins.cwi.nl:36453/
#
## remapping inline functions
#function foo{inline}(a:str):str;
#	a:= str.replace(a,"A","");
#	a:= str.replace(a,"E","");
#	a:= str.replace(a,"I","");
#	a:= str.replace(a,"O","");
#	a:= str.replace(a,"U","");
#	a:= str.replace(a," ","");
#	return foo:=a;
#end foo;
function user.foo{inline}(a:str):str;   #  0 foo:str := user.foo(a:str) {G}
    a := str.replace(a,"A","");         #  1 a:str := STRreplace(a:str, _2:str, _3:str) {G}
    a := str.replace(a,"E","");         #  2 a:str := STRreplace(a:str, _4:str, _3:str) {G}
    a := str.replace(a,"I","");         #  3 a:str := STRreplace(a:str, _5:str, _3:str) {G}
    a := str.replace(a,"O","");         #  4 a:str := STRreplace(a:str, _6:str, _3:str) {G}
    a := str.replace(a,"U","");         #  5 a:str := STRreplace(a:str, _7:str, _3:str) {G}
    a := str.replace(a," ","");         #  6 a:str := STRreplace(a:str, _8:str, _3:str) {G}
    return foo{inline} := a;            #  7 foo:str := a:str {G}
end foo;	# 8  
#
#function bar{inline}(a:str,b:str):str;
#	sa:= user.foo(a);
#	sa:= str.substring(sa, 1, 5);
#	sb:= user.foo(b);
#	sb:= str.substring(sb, 1, 3);
#	c:= sa+sb;
#	return bar:=c;
#end bar;
function user.bar{inline}(a:str,b:str):str;#  0 bar:str := user.bar(a:str, b:str) {G}
    sa := user.foo(a);                  #  1 sa:str := user.foo(a:str) {G}
    sa := str.substring(sa,1,5);        #  2 sa:str := STRsubstring(sa:str, _4:int, _5:int) {G}
    sb := user.foo(b);                  #  3 sb:str := user.foo(b:str) {G}
    sb := str.substring(sb,1,3);        #  4 sb:str := STRsubstring(sb:str, _4:int, _7:int) {G}
    c := calc.+(sa,sb);                 #  5 c:str := CALCstrConcat(sa:str, sb:str) {G}
    return bar{inline} := c;            #  6 bar:str := c:str {G}
end bar;	# 7  
#
#function qry();
#	b:= bat.new(:oid,:str);
#	bat.insert(b,0@0,"2");
#	z:bat[:oid,:str]:= mal.multiplex("user","bar",b,b);
#end qry;
function user.qry():void;               #  0 qry:void := user.qry() {G}
    b := bat.new(:oid,:str);            #  1 b:bat[:oid,:str] := CMDBATnew(_2:oid, _3:str) {G}
    bat.insert(b,0@0,"2");              #  2 _4:bat[:oid,:str] := BKCinsert_bun(b:bat[:oid,:str], _5:oid, _6:str) {G}
    z:bat[:oid,:str]  := mal.multiplex("user","bar",b,b);#  3 z:bat[:oid,:str] := OPTremapMultiplex(_8:str, _9:str, b:bat[:oid,:str], b:bat[:oid,:str]) {G}
end qry;	# 4  
#
#	optimizer.inline("user","qry");
#	optimizer.remap("user","qry");
#	mdb.list("user","qry");
#
function user.main():void;              #  0 main:void := user.main() {G}
# remapping inline functions 
    mdb.list("user","qry");             #  2 _6:void := MDBlist3(_3:str, _4:str) 
end main;	# 3  
function user.qry():void;               #  0 qry:void := user.qry() {G}
    b := bat.new(:oid,:str);            #  1 b:bat[:oid,:str] := CMDBATnew(_2:oid, _3:str) {G}
    bat.insert(b,0@0,"2");              #  2 _4:bat[:oid,:str] := BKCinsert_bun(b:bat[:oid,:str], _5:oid, _6:str) {G}
    b := batstr.replace(b,"A","");      #  3 b:bat[:oid,:str] := STRbatreplace(b:bat[:oid,:str], _21:str, _22:str) {G}
    b := batstr.replace(b,"E","");      #  4 b:bat[:oid,:str] := STRbatreplace(b:bat[:oid,:str], _23:str, _22:str) {G}
    b := batstr.replace(b,"I","");      #  5 b:bat[:oid,:str] := STRbatreplace(b:bat[:oid,:str], _24:str, _22:str) {G}
    b := batstr.replace(b,"O","");      #  6 b:bat[:oid,:str] := STRbatreplace(b:bat[:oid,:str], _25:str, _22:str) {G}
    b := batstr.replace(b,"U","");      #  7 b:bat[:oid,:str] := STRbatreplace(b:bat[:oid,:str], _26:str, _22:str) {G}
    b := batstr.replace(b," ","");      #  8 b:bat[:oid,:str] := STRbatreplace(b:bat[:oid,:str], _27:str, _22:str) {G}
    _13 := b;                           #  9 _13:bat[:oid,:str] := b:bat[:oid,:str] {G}
    _13 := batstr.substring(_13,1,5);   # 10 _13:bat[:oid,:str] := STRbatsubstringcst(_13:bat[:oid,:str], _14:int, _15:int) {G}
    b := batstr.replace(b,"A","");      # 11 b:bat[:oid,:str] := STRbatreplace(b:bat[:oid,:str], _21:str, _22:str) {G}
    b := batstr.replace(b,"E","");      # 12 b:bat[:oid,:str] := STRbatreplace(b:bat[:oid,:str], _23:str, _22:str) {G}
    b := batstr.replace(b,"I","");      # 13 b:bat[:oid,:str] := STRbatreplace(b:bat[:oid,:str], _24:str, _22:str) {G}
    b := batstr.replace(b,"O","");      # 14 b:bat[:oid,:str] := STRbatreplace(b:bat[:oid,:str], _25:str, _22:str) {G}
    b := batstr.replace(b,"U","");      # 15 b:bat[:oid,:str] := STRbatreplace(b:bat[:oid,:str], _26:str, _22:str) {G}
    b := batstr.replace(b," ","");      # 16 b:bat[:oid,:str] := STRbatreplace(b:bat[:oid,:str], _27:str, _22:str) {G}
    _16 := b;                           # 17 _16:bat[:oid,:str] := b:bat[:oid,:str] {G}
    _16 := batstr.substring(_16,1,3);   # 18 _16:bat[:oid,:str] := STRbatsubstringcst(_16:bat[:oid,:str], _14:int, _17:int) {G}
    _18 := batcalc.+(_13,_16);          # 19 _18:bat[:oid,:str] := STRbatConcat(_13:bat[:oid,:str], _16:bat[:oid,:str]) {G}
    z{inline} := _18;                   # 20 z:bat[:oid,:str] := _18:bat[:oid,:str] {G}
end qry;                                # 21  

# 11:53:00 >  
# 11:53:00 >  Done.
# 11:53:00 >  

