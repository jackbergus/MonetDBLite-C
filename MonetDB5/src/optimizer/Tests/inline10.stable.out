stdout of test 'inline10` in directory 'src/optimizer` itself:


# 11:53:01 >  
# 11:53:01 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=36453 --set xrpc_port=42260 --set monet_prompt= --trace --dbname=mTests_src_optimizer  inline10.mal
# 11:53:01 >  

# MonetDB server v5.3.0, based on kernel v1.21.0
# Serving database 'mTests_src_optimizer'
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2007 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://gio.ins.cwi.nl:36453/
## remapping inline functions
## recursive inlining
#function foo{inline}(a:int,b:int):int;
#	c:= a+b;
#	return foo:=c;
#end foo;
function user.foo{inline}(a:int,b:int):int;#  0 foo:int := user.foo(a:int, b:int) 
    c := calc.+(a,b);                   #  1 c:int := CALCbinaryADDintint(a:int, b:int) 
    return foo{inline} := c;            #  2 foo:int := c:int 
end foo;	# 3  
#
#function bar{inline}(a:int,b:int):int;
#	z:= foo(a,b);
#	return bar:=z;
#end bar;
function user.bar{inline}(a:int,b:int):int;#  0 bar:int := user.bar(a:int, b:int) 
    z := user.foo(a,b);                 #  1 z:int := user.foo(a:int, b:int) 
    return bar{inline} := z;            #  2 bar:int := z:int 
end bar;	# 3  
#
#function qry();
#	b:= bat.new(:oid,:int);
#	bat.insert(b,0@0,1);
#	zz:= user.bar(1,2); # base line test for inlining
#
#	z:bat[:oid,:int]:= mal.multiplex("user","bar",b,b);
#end qry;
function user.qry():void;               #  0 qry:void := user.qry() {G}
    b := bat.new(:oid,:int);            #  1 b:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    bat.insert(b,0@0,1);                #  2 _4:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _5:oid, _6:int) {G}
    zz := user.bar(1,2);                #  3 zz:int := user.bar(_6:int, _8:int) 
# base line test for inlining 
    z:bat[:oid,:int]  := mal.multiplex("user","bar",b,b);#  5 z:bat[:oid,:int] := OPTremapMultiplex(_11:str, _12:str, b:bat[:oid,:int], b:bat[:oid,:int]) {G}
end qry;	# 6  
#
#	optimizer.inline("user","qry");
#	optimizer.remap("user","qry");
#	mdb.list("user","qry");
#
function user.main():void;              #  0 main:void := user.main() {G}
# remapping inline functions 
# recursive inlining 
    mdb.list("user","qry");             #  3 _7:void := MDBlist3(_4:str, _5:str) 
end main;	# 4  
function user.qry():void;               #  0 qry:void := user.qry() {G}
    b := bat.new(:oid,:int);            #  1 b:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    bat.insert(b,0@0,1);                #  2 _4:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _5:oid, _6:int) {G}
    _20 := calc.+(1,2);                 #  3 _20:int := CALCbinaryADDintint(_6:int, _8:int) 
    _16 := _20;                         #  4 _16:int := _20:int 
    zz := _16;                          #  5 zz:int := _16:int 
# base line test for inlining 
    _28 := batcalc.+(b,b);              #  7 _28:bat[:oid,:int] := CMDbatADD_int_int_int(b:bat[:oid,:int], b:bat[:oid,:int]) {G}
    _24 := _28;                         #  8 _24:bat[:oid,:int] := _28:bat[:oid,:int] {G}
    z:bat[:oid,:int] {inline} := _24;   #  9 z:bat[:oid,:int] := _24:bat[:oid,:int] {G}
end qry;                                # 10  

# 11:53:01 >  
# 11:53:01 >  Done.
# 11:53:01 >  

