stdout of test 'inline10` in directory 'src/optimizer` itself:


# 11:53:01 >  
# 11:53:01 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=36453 --set xrpc_port=42260 --set monet_prompt= --trace --dbname=mTests_src_optimizer  inline10.mal
# 11:53:01 >  

# MonetDB server v5.3.0, based on kernel v1.21.0
# Serving database 'mTests_src_optimizer'
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2007 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://gio.ins.cwi.nl:36453/
## remapping inline functions
## recursive inlining
#function foo{inline}(a:int,b:int):int;
#	c:= a+b;
#	return foo:=c;
#end foo;
function user.foo{inline}(a:int,b:int):int;	# 0  (foo:int)<-(a:int)(b:int)
    c := calc.+(a,b);	# 1 CALCbinaryADDintint (c:int)<-(a:int)(b:int)
    return foo{inline} := c;	# 2  (foo:int)<-(c:int)
end foo;	# 3  
#
#function bar{inline}(a:int,b:int):int;
#	z:= foo(a,b);
#	return bar:=z;
#end bar;
function user.bar{inline}(a:int,b:int):int;	# 0  (bar:int)<-(a:int)(b:int)
    z := user.foo(a,b);	# 1  (z:int)<-(a:int)(b:int)
    return bar{inline} := z;	# 2  (bar:int)<-(z:int)
end bar;	# 3  
#
#function qry();
#	b:= bat.new(:oid,:int);
#	bat.insert(b,0@0,1);
#	zz:= user.bar(1,2); # base line test for inlining
#
#	z:bat[:oid,:int]:= mal.multiplex("user","bar",b,b);
#end qry;
function user.qry():void;	# 0  (qry:void)
    b := bat.new(:oid,:int);	# 1 CMDBATnew (b:bat[:oid,:int])<-(_2:oid)(_3:int)
    bat.insert(b,0@0,1);	# 2 BKCinsert_bun (_4:void)<-(b:bat[:oid,:int])(_5:oid)(_6:int)
    zz := user.bar(1,2);	# 3  (zz:int)<-(_6:int)(_8:int)
# base line test for inlining 	# 4  (_9:str)
    z:bat[:oid,:int]  := mal.multiplex("user","bar",b,b);	# 5 OPTremapMultiplex (z:bat[:oid,:int])<-(_11:str)(_12:str)(b:bat[:oid,:int])(b:bat[:oid,:int])
end qry;	# 6  
#
#	optimizer.inline("user","qry");
#	optimizer.remap("user","qry");
#	mdb.list("user","qry");
#
function user.main():void;	# 0  (main:void)
# remapping inline functions 	# 1  (_1:str)
# recursive inlining 	# 2  (_2:str)
    mdb.list("user","qry");	# 3 MDBlist3 (_7:void)<-(_4:str)(_5:str)
end main;	# 4  
function user.qry():void;
    b := bat.new(:oid,:int);
    bat.insert(b,0@0,1);
    zz := nil:int;
    _16 := nil:int;
    _21 := calc.+(1,2);
    _16 := _21;
    zz := _16;
# base line test for inlining 
    z:bat[:oid,:int]{inline}  := nil;
    _25 := nil;
    _29 := batcalc.+(b,b);
    _25 := _29;
    z:bat[:oid,:int]{inline}  := _25;
end qry;

# 11:53:01 >  
# 11:53:01 >  Done.
# 11:53:01 >  

