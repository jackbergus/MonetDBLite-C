stdout of test 'STexample` in directory 'src/optimizer` itself:


# 19:36:15 >  
# 19:36:15 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=31892 --set monet_prompt= --trace --dbname=mTests_src_optimizer  STexample.mal < /dev/null
# 19:36:15 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
#b:= bat.new(:int,:int);
#bat.insert(b,1,2);
##many more inserts
#c{singleton}:= algebra.select(b,0,4);
#d:= algebra.markH(c);
#io.print(d);
#optimizer.singleton();
#mdb.list();
#
START SINGLETON OPTIMIZER 1:[7,14,15] 
function user.main():void;	# 0  (main:void)
    b := bat.new(:int,:int);	# 1 CMDBATnew (b:bat[:int,:int])<-(_2:int)(_2:int)
    bat.insert(b,1,2);	# 2 BKCinsert_bun (_3:void)<-(b:bat[:int,:int])(_4:int)(_5:int)
#many more inserts 	# 3  (_6:str)
    c{singleton} := algebra.select(b,0,4);	# 4 ALGselect (c:bat[:int,:int])<-(b:bat[:int,:int])(_8:int)(_9:int)
    d := algebra.markH(c);	# 5 ALGmarkHead_default (d:bat[:void,:int])<-(c:bat[:int,:int])
    io.print(d);	# 6 IOprint_val (_11:int)<-(d:bat[:void,:int])
    mdb.list();	# 7 MDBlist (_13:void)
end main;	# 8  
START OPTIMIZER MID STAGE doAR=1
function user.main():void;	# 0  (main:void)
    b := bat.new(:int,:int);	# 1 CMDBATnew (b:bat[:int,:int])<-(_2:int)(_2:int)
    bat.insert(b,1,2);	# 2 BKCinsert_bun (_3:void)<-(b:bat[:int,:int])(_4:int)(_5:int)
#many more inserts 	# 3  (_6:str)
    c{singleton} := algebra.select(b,0,4);	# 4 ALGselect (c:bat[:int,:int])<-(b:bat[:int,:int])(_8:int)(_9:int)
    (_14,_15):= bat.unpack(c);	# 5  unknown (_14:int)(_15:int)<-(c:bat[:int,:int])
    (_18,_19):= (nil:void,_15);	# 6 ALGmarkHead_default (_18:oid)(_19:int)<-(_17:void)(_15:int)
    d := bat.pack(_18,_19);	# 7  unknown (d:bat[:void,:int])<-(_18:oid)(_19:int)
    io.print(d);	# 8 IOprint_val (_11:int)<-(d:bat[:void,:int])
    mdb.list();	# 9 MDBlist (_13:void)
end main;	# 10  
[7,14:int,15:int] [10,18:oid,19:int] 
FINAL STAGE SINGLETON errors=0
function user.main():void;	# 0  (main:void)
    b := bat.new(:int,:int);	# 1 CMDBATnew (b:bat[:int,:int])<-(_2:int)(_2:int)
    bat.insert(b,1,2);	# 2 BKCinsert_bun (_3:void)<-(b:bat[:int,:int])(_4:int)(_5:int)
#many more inserts 	# 3  (_6:str)
    c{singleton} := algebra.select(b,0,4);	# 4 ALGselect (c:bat[:int,:int])<-(b:bat[:int,:int])(_8:int)(_9:int)
    (_14,_15):= bat.unpack(c);	# 5 CMDbatunpack (_14:int)(_15:int)<-(c:bat[:int,:int])
    d := bat.pack(nil:void,_15);	# 6 CMDbatpack (d:bat[:void,:int])<-(_17:void)(_15:int)
    io.print(d);	# 7 IOprint_val (_11:int)<-(d:bat[:void,:int])
    mdb.list();	# 8 MDBlist (_13:void)
end main;	# 9  
function user.main():void;	# 0  (main:void)
    b := bat.new(:int,:int);	# 1 CMDBATnew (b:bat[:int,:int])<-(_2:int)(_2:int)
    bat.insert(b,1,2);	# 2 BKCinsert_bun (_3:void)<-(b:bat[:int,:int])(_4:int)(_5:int)
#many more inserts 	# 3  (_6:str)
    c{singleton} := algebra.select(b,0,4);	# 4 ALGselect (c:bat[:int,:int])<-(b:bat[:int,:int])(_8:int)(_9:int)
    (_14,_15):= bat.unpack(c);	# 5 CMDbatunpack (_14:int)(_15:int)<-(c:bat[:int,:int])
    d := bat.pack(nil:void,_15);	# 6 CMDbatpack (d:bat[:void,:int])<-(_17:void)(_15:int)
    io.print(d);	# 7 IOprint_val (_11:int)<-(d:bat[:void,:int])
    mdb.list();	# 8 MDBlist (_13:void)
end main;	# 9  
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  2	  ]
function user.main():void;
    b := bat.new(:int,:int);
    bat.insert(b,1,2);
#many more inserts 
    c{singleton} := algebra.select(b,0,4);
    (_14,_15):= bat.unpack(c);
    d := bat.pack(nil:void,_15);
    io.print(d);
    mdb.list();
end main;

# 19:36:15 >  
# 19:36:15 >  Done.
# 19:36:15 >  

