stdout of test 'CXerror1` in directory 'src/optimizer` itself:


# 09:06:24 >  
# 09:06:24 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=37375 --set sql_port=44387 --set xquery_port=52599 --set monet_prompt= --trace --dbname=mTests_src_optimizer  CXerror1.mal < /dev/null
# 09:06:24 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
##provided by roberto
#function user.f1();
#  # create bat
#  xxx := bat.new(:void, :dbl);
#  bat.setName(xxx,"xxx");
#  bat.setPersistent(xxx,true);
#  transaction.commit();
#  
#  # check existance
#  xxx_1 := bbp.getNames();
#  xxx_2 := bat.reverse(xxx_1);
#  xxx_3 := algebra.exist(xxx_2,"xxx");
#  
#  # if it exists, print it
#  barrier ifb := xxx_3;
#    a := bbp.bind("xxx");
#    io.print(a);
#  exit ifb;
#  
#  # remove it
#  b := bbp.bind("xxx");        ## here, it becomes b := a;
#  bat.setPersistent(b,false);  ## but a might be not defined
#  transaction.commit();
#end f1;
function user.f1():void;                #  0 f1:void {G}
# create bat 
    xxx := bat.new(:void,:dbl);         #  2 xxx:bat[:void,:dbl] := CMDBATnew(_3:void, _4:dbl) {G}
    bat.setName(xxx,"xxx");             #  3 _5:void := BKCsetName(xxx:bat[:void,:dbl], _6:str) 
    bat.setPersistent(xxx,true);        #  4 _7:void := BKCpersists(xxx:bat[:void,:dbl], _8:bit) 
    transaction.commit();               #  5 _9:bit 
# check existance 
    xxx_1 := bbp.getNames();            #  7 xxx_1:bat[:int,:str] {G}
    xxx_2 := bat.reverse(xxx_1);        #  8 xxx_2:bat[:str,:int] := BKCreverse(xxx_1:bat[:int,:str]) {G}
    xxx_3 := algebra.exist(xxx_2,"xxx");#  9 xxx_3:bit := ALGexist(xxx_2:bat[:str,:int], _6:str) 
# if it exists, print it 
barrier ifb := xxx_3;                   # 11 ifb:bit := xxx_3:bit {J14}
    a := bbp.bind("xxx");               # 12 a:bat[:any,:any] := CMDbbpbind(_6:str) {G}
    io.print(a);                        # 13 _17:void := IOprint_val(a:bat[:any,:any]) 
exit ifb;                               # 14 ifb:bit 
# remove it 
    b := bbp.bind("xxx");               # 16 b:bat[:any,:any] := CMDbbpbind(_6:str) {G}
## here, it becomes b := a; 
    bat.setPersistent(b,false);         # 18 _21:void := BKCpersists(b:bat[:any,:any], _22:bit) 
## but a might be not defined 
    transaction.commit();               # 20 _24:bit 
end f1;	# 21  
#optimizer.commonExpressionRemoval("user", "f1");
#
function user.main():void;              #  0 main:void {G}
#provided by roberto 
end main;	# 2  

# 09:06:24 >  
# 09:06:24 >  Done.
# 09:06:24 >  

