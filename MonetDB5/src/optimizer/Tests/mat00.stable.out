stdout of test 'mat00` in directory 'src/optimizer` itself:


# 08:54:20 >  
# 08:54:20 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=36757 --set sql_port=42245 --set xquery_port=56755 --set monet_prompt= --trace --dbname=mTests_src_optimizer  mat00.mal < /dev/null
# 08:54:20 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
## the Multi Assocation Tables
#	mdb.list();
#    m0:= bat.new(:void,:int);
#    bat.insert(m0,nil,0);
#    m1:= bat.new(:void,:int);
#    bat.insert(m1,nil,1);
#    m2:= bat.new(:void,:int);
#    bat.insert(m2,nil,2);
#    b := mat.new(m0,m1,m2);
#    s := algebra.select(b,0,2);
#    i := aggr.count(s);
#    io.print(s);
#    io.print(i);
#    c0 := bat.new(:int,:int);
#    bat.insert(c0,0,4);
#    c1 := bat.new(:int,:int);
#    bat.insert(c1,1,5);
#    c := mat.new(c0,c1);
#    bat.insert(c,1,6);
#    j := algebra.join(b,c);
#    io.print(j);
#
#optimizer.multitable();
#
function user.main():void;	# 0  (main:void)
# the Multi Assocation Tables 	# 1  (_2:str)
    mdb.list();	# 2 MDBlist (_3:void)
    m0 := bat.new(:void,:int);	# 3 CMDBATnew (m0:bat[:void,:int])<-(_5:void)(_6:int)
    bat.insert(m0,nil,0);	# 4 BKCinsert_bun (_7:void)<-(m0:bat[:void,:int])(_8:void)(_9:int)
    m1 := bat.new(:void,:int);	# 5 CMDBATnew (m1:bat[:void,:int])<-(_5:void)(_6:int)
    bat.insert(m1,nil,1);	# 6 BKCinsert_bun (_11:void)<-(m1:bat[:void,:int])(_8:void)(_12:int)
    m2 := bat.new(:void,:int);	# 7 CMDBATnew (m2:bat[:void,:int])<-(_5:void)(_6:int)
    bat.insert(m2,nil,2);	# 8 BKCinsert_bun (_14:void)<-(m2:bat[:void,:int])(_8:void)(_15:int)
    b := mat.new(m0,m1,m2);	# 9 MATnew (b:bat[:void,:int])<-(m0:bat[:void,:int])(m1:bat[:void,:int])(m2:bat[:void,:int])
    _33 := algebra.select(m0,0,2);	# 10 ALGselect (_33:bat[:void,:int])<-(m0:bat[:void,:int])(_9:int)(_15:int)
    _34 := algebra.select(m1,0,2);	# 11 ALGselect (_34:bat[:void,:int])<-(m1:bat[:void,:int])(_9:int)(_15:int)
    _35 := algebra.select(m2,0,2);	# 12 ALGselect (_35:bat[:void,:int])<-(m2:bat[:void,:int])(_9:int)(_15:int)
    s := mat.new(_33,_34,_35);	# 13 MATnew (s:bat[:void,:int])<-(_33:bat[:void,:int])(_34:bat[:void,:int])(_35:bat[:void,:int])
    i := 0;	# 14  (i:int)<-(_9:int)
    _36 := aggr.count(_33);	# 15 ALGcount_bat (_36:int)<-(_33:bat[:void,:int])
    i := calc.+(i,_36);	# 16 CALCbinaryADDintint (i:int)<-(i:int)(_36:int)
    _37 := aggr.count(_34);	# 17 ALGcount_bat (_37:int)<-(_34:bat[:void,:int])
    i := calc.+(i,_37);	# 18 CALCbinaryADDintint (i:int)<-(i:int)(_37:int)
    _38 := aggr.count(_35);	# 19 ALGcount_bat (_38:int)<-(_35:bat[:void,:int])
    i := calc.+(i,_38);	# 20 CALCbinaryADDintint (i:int)<-(i:int)(_38:int)
    s := mat.pack(_33,_34,_35);	# 21 MATpack (s:bat[:void,:int])<-(_33:bat[:void,:int])(_34:bat[:void,:int])(_35:bat[:void,:int])
    io.print(s);	# 22 IOprint_val (_19:int)<-(s:bat[:void,:int])
    io.print(i);	# 23 IOprint_val (_20:int)<-(i:int)
    c0 := bat.new(:int,:int);	# 24 CMDBATnew (c0:bat[:int,:int])<-(_6:int)(_6:int)
    bat.insert(c0,0,4);	# 25 BKCinsert_bun_int_int (_22:void)<-(c0:bat[:int,:int])(_9:int)(_23:int)
    c1 := bat.new(:int,:int);	# 26 CMDBATnew (c1:bat[:int,:int])<-(_6:int)(_6:int)
    bat.insert(c1,1,5);	# 27 BKCinsert_bun_int_int (_25:void)<-(c1:bat[:int,:int])(_12:int)(_26:int)
    c := mat.new(c0,c1);	# 28 MATnew (c:bat[:int,:int])<-(c0:bat[:int,:int])(c1:bat[:int,:int])
    bat.insert(c1,1,6);	# 29 BKCinsert_bun_int_int (_28:void)<-(c1:bat[:int,:int])(_12:int)(_29:int)
    b := mat.pack(m0,m1,m2);	# 30 MATpack (b:bat[:void,:int])<-(m0:bat[:void,:int])(m1:bat[:void,:int])(m2:bat[:void,:int])
    _39 := algebra.join(b,c0);	# 31 ALGjoin (_39:bat[:void,:int])<-(b:bat[:void,:int])(c0:bat[:int,:int])
    _40 := algebra.join(b,c1);	# 32 ALGjoin (_40:bat[:void,:int])<-(b:bat[:void,:int])(c1:bat[:int,:int])
    j := mat.new(_39,_40);	# 33 MATnew (j:bat[:void,:int])<-(_39:bat[:void,:int])(_40:bat[:void,:int])
    j := mat.pack(_39,_40);	# 34 MATpack (j:bat[:void,:int])<-(_39:bat[:void,:int])(_40:bat[:void,:int])
    io.print(j);	# 35 IOprint_val (_31:int)<-(j:bat[:void,:int])
end main;	# 36  
function user.main():void;
# the Multi Assocation Tables 
    mdb.list();
    m0 := bat.new(:void,:int);
    bat.insert(m0,nil,0);
    m1 := bat.new(:void,:int);
    bat.insert(m1,nil,1);
    m2 := bat.new(:void,:int);
    bat.insert(m2,nil,2);
    b := mat.new(m0,m1,m2);
    _33 := algebra.select(m0,0,2);
    _34 := algebra.select(m1,0,2);
    _35 := algebra.select(m2,0,2);
    s := mat.new(_33,_34,_35);
    i := 0;
    _36 := aggr.count(_33);
    i := calc.+(i,_36);
    _37 := aggr.count(_34);
    i := calc.+(i,_37);
    _38 := aggr.count(_35);
    i := calc.+(i,_38);
    s := mat.pack(_33,_34,_35);
    io.print(s);
    io.print(i);
    c0 := bat.new(:int,:int);
    bat.insert(c0,0,4);
    c1 := bat.new(:int,:int);
    bat.insert(c1,1,5);
    c := mat.new(c0,c1);
    bat.insert(c1,1,6);
    b := mat.pack(m0,m1,m2);
    _39 := algebra.join(b,c0);
    _40 := algebra.join(b,c1);
    j := mat.new(_39,_40);
    j := mat.pack(_39,_40);
    io.print(j);
end main;
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
[ 3 ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  4	  ]
[ nil,	  5	  ]
[ nil,	  6	  ]

# 08:54:20 >  
# 08:54:20 >  Done.
# 08:54:20 >  

