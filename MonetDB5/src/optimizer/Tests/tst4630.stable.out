stdout of test 'tst4630` in directory 'src/optimizer` itself:


# 12:56:30 >  
# 12:56:30 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=31732 --set xrpc_port=42786 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4630.mal
# 12:56:30 >  

# MonetDB server v5.3.0, based on kernel v1.21.0
# Serving database 'mTests_src_optimizer'
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2007 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://gio.ins.cwi.nl:31732/
## testing join path optimizations
## the common part should not be replicated
#
#function qry( a:bat[:any_1,:any_2], b:bat[:any_2,:any_3], c:bat[:any_3,:any_4]):bat[:any_1,:any_4];
#	a1:= a;
#	b1:=b;
#	c1:=c;
#    z:= algebra.join(a,b);
#    zz:= algebra.join(z,c);
#	ww:= algebra.join(z,a1);
#	yy:= algebra.join(ww,b1);
#	xx:= algebra.join(yy,c1);
#    return qry:= xx;
#end qry;
function user.qry(a:bat[:any_1,:any_2],b:bat[:any_2,:any_3],c:bat[:any_3,:any_4]):bat[:any_1,:any_4];#  0 qry:bat[:any_1,:any_4] := user.qry(a:bat[:any_1,:any_2], b:bat[:any_2,:any_3], c:bat[:any_3,:any_4]) {UPG}
    a1 := a;                            #  1 a1:bat[:any_1,:any_2] := a:bat[:any_1,:any_2] {PG}
    b1 := b;                            #  2 b1:bat[:any_2,:any_3] := b:bat[:any_2,:any_3] {PG}
    c1 := c;                            #  3 c1:bat[:any_3,:any_4] := c:bat[:any_3,:any_4] {PG}
    z := algebra.join(a,b);             #  4 z:bat[:any,:any] := ALGjoin(a:bat[:any_1,:any_2], b:bat[:any_2,:any_3]) {PG}
    zz := algebra.join(z,c);            #  5 zz:bat[:any,:any] := ALGjoin(z:bat[:any,:any], c:bat[:any_3,:any_4]) {PG}
    ww := algebra.join(z,a1);           #  6 ww:bat[:any,:any] := ALGjoin(z:bat[:any,:any], a1:bat[:any_1,:any_2]) {G}
    yy := algebra.join(ww,b1);          #  7 yy:bat[:any,:any] := ALGjoin(ww:bat[:any,:any], b1:bat[:any_2,:any_3]) {G}
    xx := algebra.join(yy,c1);          #  8 xx:bat[:any,:any] := ALGjoin(yy:bat[:any,:any], c1:bat[:any_3,:any_4]) {G}
    return qry := xx;                   #  9 qry:bat[:any_1,:any_4] := xx:bat[:any,:any] {G}
end qry;	# 10  
#
#optimizer.joinPath("user","qry");
#optimizer.deadcode("user","qry");
#mdb.list("user","qry");
#
#
function user.main():void;              #  0 main:void := user.main() {G}
# testing join path optimizations 
# the common part should not be replicated 
    mdb.list("user","qry");             #  3 _7:void := MDBlist3(_4:str, _5:str) 
end main;	# 4  
function user.qry(a:bat[:any_1,:any_2],b:bat[:any_2,:any_3],c:bat[:any_3,:any_4]):bat[:any_1,:any_4];#  0 qry:bat[:any_1,:any_4] := user.qry(a:bat[:any_1,:any_2], b:bat[:any_2,:any_3], c:bat[:any_3,:any_4]) {UPG}
    z := algebra.join(a,b);             #  1 z:bat[:any,:any] := ALGjoin(a:bat[:any_1,:any_2], b:bat[:any_2,:any_3]) {PG}
    zz := algebra.join(z,c);            #  2 zz:bat[:any,:any] := ALGjoin(z:bat[:any,:any], c:bat[:any_3,:any_4]) {PG}
    ww := algebra.join(z,a);            #  3 ww:bat[:any,:any] := ALGjoin(z:bat[:any,:any], a:bat[:any_1,:any_2]) {G}
    yy := algebra.joinPath(z,a,b);      #  4 yy:bat[:any,:any] := ALGjoinPath(z:bat[:any,:any], a:bat[:any_1,:any_2], b:bat[:any_2,:any_3]) {G}
    xx := algebra.joinPath(z,a,b,c);    #  5 xx:bat[:any,:any] := ALGjoinPath(z:bat[:any,:any], a:bat[:any_1,:any_2], b:bat[:any_2,:any_3], c:bat[:any_3,:any_4]) {G}
    return qry := xx;                   #  6 qry:bat[:any_1,:any_4] := xx:bat[:any,:any] {G}
end qry;                                #  7  

# 12:56:30 >  
# 12:56:30 >  Done.
# 12:56:30 >  

