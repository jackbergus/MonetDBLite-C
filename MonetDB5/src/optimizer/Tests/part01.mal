#testing the partition optimizer

a1:= bbp.new(:void,:int);
bat.setSequenceBase(a1,0@0);
a2:= bbp.new(:void,:int);
bat.setSequenceBase(a2,10@0);
a3:= bbp.new(:void,:int);
bat.setSequenceBase(a3,20@0);
b1:= bbp.new(:void,:int);
bat.setSequenceBase(b1,0@0);
b2:= bbp.new(:void,:int);
bat.setSequenceBase(b2,10@0);
b3:= bbp.new(:void,:int);
bat.setSequenceBase(b3,20@0);

barrier (go,i):= mal.newRange(0);
	bat.insert(a1,nil,i);
	bat.insert(a2,nil,i);
	bat.insert(a3,nil,i);
	bat.insert(b1,nil,i);
	bat.insert(b2,nil,i);
	bat.insert(b3,nil,i);
	redo (go,i):= mal.nextElement(1,10);
exit (go,i);


# add it to the BAT partition table
partitions.deposit(a1);
partitions.deposit(a1,a2);
partitions.deposit(a1,a3);
partitions.deposit(b1);
partitions.deposit(b1,b2);
partitions.deposit(b1,b3);
partitions.dump();

# this query is already tricky because there are
# two sinks. A naive translation will produce
# a double nested loop
function qry(a:bat[:void,:any_1], b:bat[:void,:any_2]);
	io.print("experiment 2");
	io.print(b);
	io.print(a);
	io.print(b);
end qry;

optimizer.partitionedQuery("user","qry");
mdb.list("user","qry");
io.print("run experiment");
user.qry(a1,b1);
