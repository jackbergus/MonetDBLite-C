#testing the BAT partition manager
# use a fake sql library
# see how you handle an aggregation
module sql;
pattern bind(s:str,t:str,i:str,flag:int):bat[:oid,:int]
address MDBdummy;
pattern rsColumn(b:any...):void
address MDBdummy;
pattern resultSet(b:any...):void
address MDBdummy;
pattern exportResult(b:any...):void
address MDBdummy;
pattern exportValue(b:any...):void
address MDBdummy;

# select i+j from t where i<2;

function query(A0:sht):void;
    x1:bat[:oid,:int]{notnil=true,rows=1,bid=2199}  := sql.bind("sys","t","i",0);
    x10:bat[:oid,:int]{notnil=true,rows=0,bid=2653}  := sql.bind("sys","t","i",1);
    constraints.emptySet(x10);
    x12:bat[:oid,:int]{notnil=true,rows=0,bid=2654}  := sql.bind("sys","t","i",2);
    constraints.emptySet(x12);
    x17:bat[:oid,:int]{notnil=true,rows=1,bid=2201}  := sql.bind("sys","t","j",1);
    x7{rows=1} := algebra.uselect(x1,nil:int,2,false,false);
    x14{rows=1} := algebra.markT(x7,0@0);
    x15{rows=1} := bat.reverse(x14);
    x16{rows=1} := algebra.join(x15,x1);
    x19{rows=1} := algebra.join(x15,x17);
    x20:bat[:oid,:int]{rows=1}  := batcalc.+(x16,x19);
    x21 := sql.resultSet(1,1,x20);
    sql.rsColumn(x21,"sys.","sqlxaddxi","int",32,0,x20);
    sql.exportResult(x21,"");
end query;
optimizer.partitions("sql","query");
mdb.List("sql","query");
