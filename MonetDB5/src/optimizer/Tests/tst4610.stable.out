stdout of test 'tst4610` in directory 'src/optimizer` itself:


# 19:36:05 >  
# 19:36:05 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=31892 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4610.mal < /dev/null
# 19:36:05 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
## the first test for macro expansions and inversions
#
#function joinPath( a:bat[:any_1,:any_2],
#    z:= algebra.join(a,b);
#    zz:= algebra.join(z,c);
#    return zz;
#end joinPath;
function user.joinPath(a:bat[:any_1,:any_2],b:bat[:any_2,:any_3],c:bat[:any_3,:any_4]):bat[:any_1,:any_4];#  0 joinPath:bat[:any_1,:any_4] := user.joinPath(a:bat[:any_1,:any_2], b:bat[:any_2,:any_3], c:bat[:any_3,:any_4]) {UPG}
    z := algebra.join(a,b);             #  1 z:bat[:any,:any] := ALGjoin(a:bat[:any_1,:any_2], b:bat[:any_2,:any_3]) {PG}
    zz := algebra.join(z,c);            #  2 zz:bat[:any,:any] := ALGjoin(z:bat[:any,:any], c:bat[:any_3,:any_4]) {PG}
    return joinPath := zz;              #  3 joinPath:bat[:any_1,:any_4] := zz:bat[:any,:any] {G}
end joinPath;	# 4  
#
#optimizer.macroContraction("user","joinPath");
#
#a:= bat.new(:int,:int);
#b:= bat.new(:int,:int);
#c:= bat.new(:int,:int);
#g:= algebra.join(a,b);
#h:= algebra.join(g,c);
#
#r:= algebra.joinPath(a,b,c);
#mdb.list();
#
function user.main():void;              #  0 main:void {G}
# the first test for macro expansions and inversions 
    a := bat.new(:int,:int);            #  2 a:bat[:int,:int] := CMDBATnew(_6:int, _6:int) {G}
    b := bat.new(:int,:int);            #  3 b:bat[:int,:int] := CMDBATnew(_6:int, _6:int) {G}
    c := bat.new(:int,:int);            #  4 c:bat[:int,:int] := CMDBATnew(_6:int, _6:int) {G}
    h := user.joinPath(a,b,c);          #  5 h:bat[:int,:int] := user.joinPath(a:bat[:int,:int], b:bat[:int,:int], c:bat[:int,:int]) {PG}
    r := algebra.joinPath(a,b,c);       #  6 r:bat[:any,:any] := ALGjoinPath(a:bat[:int,:int], b:bat[:int,:int], c:bat[:int,:int]) {G}
    mdb.list();                         #  7 _12:void 
function user.main():void;
# the first test for macro expansions and inversions 
    a := bat.new(:int,:int);
    b := bat.new(:int,:int);
    c := bat.new(:int,:int);
    h := user.joinPath(a,b,c);
    r := algebra.joinPath(a,b,c);
    mdb.list();

# 19:36:05 >  
# 19:36:05 >  Done.
# 19:36:05 >  

