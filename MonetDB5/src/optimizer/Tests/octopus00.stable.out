stdout of test 'octopus00` in directory 'src/optimizer` itself:


# 20:45:24 >  
# 20:45:24 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=4 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=36084 --set xrpc_port=47798 --set monet_prompt= --trace  --dbname=mTests_src_optimizer  octopus00.mal
# 20:45:24 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_optimizer', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2008 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:36084/
function user.q():void;                 #  0 q:void := user.q() {G}
    a:bat[:oid,:int] {rows=1000,hlb=0@0:oid,hub=1000@0:oid} := bat.new(:oid,:int);#  1 a:bat[:oid,:int] := CMDBATnew(_5:oid, _6:int) {G}
    (b:bat[:oid,:int] {hlb=0@0:oid,hub=1000@0:oid},c:bat[:oid,:int] {hlb=0@0:oid,hub=1000@0:oid},d:bat[:oid,:int] {hlb=0@0:oid,hub=1000@0:oid},e:bat[:oid,:int] {hlb=0@0:oid,hub=1000@0:oid}) := bat.partition(a{rows=1000,hlb=0@0:oid,hub=1000@0:oid});#  2 (b:bat[:oid,:int], c:bat[:oid,:int], d:bat[:oid,:int], e:bat[:oid,:int]) := CMDbatpartition(a:bat[:oid,:int]) {G}
    b1 := algebra.select(b{hlb=0@0:oid,hub=1000@0:oid},0,10);#  3 b1:bat[:oid,:int] := ALGselect(b:bat[:oid,:int], _12:int, _13:int) {G}
    c1 := algebra.select(c{hlb=0@0:oid,hub=1000@0:oid},11,20);#  4 c1:bat[:oid,:int] := ALGselect(c:bat[:oid,:int], _15:int, _16:int) {G}
    d1 := algebra.select(d{hlb=0@0:oid,hub=1000@0:oid},21,30);#  5 d1:bat[:oid,:int] := ALGselect(d:bat[:oid,:int], _18:int, _19:int) {G}
    e1 := algebra.select(e{hlb=0@0:oid,hub=1000@0:oid},31,40);#  6 e1:bat[:oid,:int] := ALGselect(e:bat[:oid,:int], _21:int, _22:int) {G}
    u1 := algebra.union(b1,d1);         #  7 u1:bat[:oid,:int] := ALGsunion(b1:bat[:oid,:int], d1:bat[:oid,:int]) {G}
    u2 := algebra.union(c1,e1);         #  8 u2:bat[:oid,:int] := ALGsunion(c1:bat[:oid,:int], e1:bat[:oid,:int]) {G}
    u := algebra.kunion(u1,u2);         #  9 u:bat[:oid,:int] := ALGkunion(u1:bat[:oid,:int], u2:bat[:oid,:int]) {G}
    io.print(u);                        # 10 _26:void := IOprint_val(u:bat[:oid,:int]) 
end q;                                  # 11  
function user.main():void;              #  0 main:void := user.main() {G}
#check the partition type resolution; 
    mdb.list("user","q");               #  2 _5:void := MDBlist3(_3:str, _4:str) 
end main;                               #  3  
function user.q():void;                 #  0 q:void := user.q() {G}
    _27 := sabaoth.getLocalConnectionHost();#  1 _27:str := SABgetLocalConnectionHost() {G}
    _28 := sabaoth.getLocalConnectionPort();#  2 _28:int := SABgetLocalConnectionPort() 
    remote.create("A",_27,_28,nil:str,"monetdb","monetdb");#  3 _29:void := RMTcreate(_30:str, _27:str, _28:int, _31:str, _32:str, _32:str) 
    remote.create("B",_27,_28,nil:str,"monetdb","monetdb");#  4 _33:void := RMTcreate(_34:str, _27:str, _28:int, _31:str, _32:str, _32:str) 
    a:bat[:oid,:int] {rows=1000,hlb=0@0:oid,hub=1000@0:oid} := bat.new(:oid,:int);#  5 a:bat[:oid,:int] := CMDBATnew(_5:oid, _6:int) {G}
    (b:bat[:oid,:int] {hlb=0@0:oid,hub=1000@0:oid},c:bat[:oid,:int] {hlb=0@0:oid,hub=1000@0:oid},d:bat[:oid,:int] {hlb=0@0:oid,hub=1000@0:oid},e:bat[:oid,:int] {hlb=0@0:oid,hub=1000@0:oid}) := bat.partition(a{rows=1000,hlb=0@0:oid,hub=1000@0:oid});#  6 (b:bat[:oid,:int], c:bat[:oid,:int], d:bat[:oid,:int], e:bat[:oid,:int]) := CMDbatpartition(a:bat[:oid,:int]) {G}
    _35 := remote.put("A",b{hlb=0@0:oid,hub=1000@0:oid});#  7 _35:rmtobj := RMTput(_30:str, b:bat[:oid,:int]) {G}
    _36 := remote.put("B",c{hlb=0@0:oid,hub=1000@0:oid});#  8 _36:rmtobj := RMTput(_34:str, c:bat[:oid,:int]) {G}
    _37 := remote.put("A",d{hlb=0@0:oid,hub=1000@0:oid});#  9 _37:rmtobj := RMTput(_30:str, d:bat[:oid,:int]) {G}
    _38 := remote.put("B",e{hlb=0@0:oid,hub=1000@0:oid});# 10 _38:rmtobj := RMTput(_34:str, e:bat[:oid,:int]) {G}
    _39 := remote.put("A",0);           # 11 _39:rmtobj := RMTput(_30:str, _12:int) {G}
    _40 := remote.put("A",10);          # 12 _40:rmtobj := RMTput(_30:str, _13:int) {G}
    _41 := remote.exec("A","algebra","select",_35,_39,_40);# 13 _41:rmtobj := RMTexec(_30:str, _42:str, _43:str, _35:rmtobj, _39:rmtobj, _40:rmtobj) {G}
    _44 := remote.put("B",11);          # 14 _44:rmtobj := RMTput(_34:str, _15:int) {G}
    _45 := remote.put("B",20);          # 15 _45:rmtobj := RMTput(_34:str, _16:int) {G}
    _46 := remote.exec("B","algebra","select",_36,_44,_45);# 16 _46:rmtobj := RMTexec(_34:str, _42:str, _43:str, _36:rmtobj, _44:rmtobj, _45:rmtobj) {G}
    _47 := remote.put("A",21);          # 17 _47:rmtobj := RMTput(_30:str, _18:int) {G}
    _48 := remote.put("A",30);          # 18 _48:rmtobj := RMTput(_30:str, _19:int) {G}
    _49 := remote.exec("A","algebra","select",_37,_47,_48);# 19 _49:rmtobj := RMTexec(_30:str, _42:str, _43:str, _37:rmtobj, _47:rmtobj, _48:rmtobj) {G}
    _50 := remote.put("B",31);          # 20 _50:rmtobj := RMTput(_34:str, _21:int) {G}
    _51 := remote.put("B",40);          # 21 _51:rmtobj := RMTput(_34:str, _22:int) {G}
    _52 := remote.exec("B","algebra","select",_38,_50,_51);# 22 _52:rmtobj := RMTexec(_34:str, _42:str, _43:str, _38:rmtobj, _50:rmtobj, _51:rmtobj) {G}
    _53 := remote.exec("A","algebra","union",_41,_49);# 23 _53:rmtobj := RMTexec(_30:str, _42:str, _54:str, _41:rmtobj, _49:rmtobj) {G}
    _55 := remote.exec("B","algebra","union",_46,_52);# 24 _55:rmtobj := RMTexec(_34:str, _42:str, _54:str, _46:rmtobj, _52:rmtobj) {G}
    u1 := remote.get("A",_53);          # 25 u1:bat[:oid,:int] := RMTget(_30:str, _53:rmtobj) {G}
    _57 := remote.put("B",u1);          # 26 _57:rmtobj := RMTput(_34:str, u1:bat[:oid,:int]) {G}
    _58 := remote.exec("B","algebra","kunion",_57,_55);# 27 _58:rmtobj := RMTexec(_34:str, _42:str, _59:str, _57:rmtobj, _55:rmtobj) {G}
    remote.exec("B","io","print",_58);  # 28 _60:rmtobj := RMTexec(_34:str, _61:str, _62:str, _58:rmtobj) {G}
end q;                                  # 29  

# 20:45:24 >  
# 20:45:24 >  Done.
# 20:45:24 >  

