stdout of test 'emptyset01` in directory 'src/optimizer` itself:


# 08:05:29 >  
# 08:05:29 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=38505 --set xrpc_port=43491 --set monet_prompt= --trace --dbname=mTests_src_optimizer  emptyset01.mal
# 08:05:29 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
##beware that the ESoptimizer does not remove the type of MALException
#function do{inline}(V1:bat[:oid,:int]);
#barrier (x,y,z):= bat.newIterator(V1);
#	io.print("loop");
#catch MALException:str;
#	io.print(MALException);
#exit MALException;
#exit(x,y,z);
#end do;
function user.do{inline}(V1:bat[:oid,:int]):void;	# 0  (do:void)<-(V1:bat[:oid,:int])
barrier (x,y,z):= bat.newIterator(V1);	# 1 CHPbunIterator (x:lng)(y:oid)(z:int)<-(V1:bat[:oid,:int]) jump 6
    io.print("loop");	# 2 IOprint_val (_5:void)<-(_6:str)
catch MALException:str ;	# 3  (MALException:str) jump 5
    io.print(MALException);	# 4 IOprint_val (_8:void)<-(MALException:str)
exit MALException:str ;	# 5  (MALException:str)
exit (x,y,z);	# 6  (x:lng)(y:oid)(z:int)
end do;	# 7  
#
#function tst();
#    V1 := bat.new(:oid,:int);
#    V7 := bat.new(:oid,:int);
#    V10{rows=0} := bat.new(:int,:oid);
#    V11 := bat.reverse(V10);
#    V12 := algebra.kdifference(V7,V11);
#    V16 := algebra.markT(V12);
#    V17 := algebra.join(V16,V7);
#    bat.append(V1,V17);
#	do(V1);
#	io.print("done");
#end tst;
function user.tst():void;	# 0  (tst:void)
    V1 := bat.new(:oid,:int);	# 1 CMDBATnew (V1:bat[:oid,:int])<-(_2:oid)(_3:int)
    V7 := bat.new(:oid,:int);	# 2 CMDBATnew (V7:bat[:oid,:int])<-(_2:oid)(_3:int)
    V10{rows=0:lng} := bat.new(:int,:oid);	# 3 CMDBATnew (V10:bat[:int,:oid])<-(_3:int)(_2:oid)
    V11 := bat.reverse(V10);	# 4 BKCreverse (V11:bat[:oid,:int])<-(V10:bat[:int,:oid])
    V12 := algebra.kdifference(V7,V11);	# 5 ALGkdiff (V12:bat[:oid,:int])<-(V7:bat[:oid,:int])(V11:bat[:oid,:int])
    V16 := algebra.markT(V12);	# 6 ALGtmark_default (V16:bat[:oid,:oid])<-(V12:bat[:oid,:int])
    V17 := algebra.join(V16,V7);	# 7 ALGjoin (V17:bat[:oid,:int])<-(V16:bat[:oid,:oid])(V7:bat[:oid,:int])
    bat.append(V1,V17);	# 8 BKCappend_wrap (_10:void)<-(V1:bat[:oid,:int])(V17:bat[:oid,:int])
    user.do(V1);	# 9  (_11:void)<-(V1:bat[:oid,:int])
    io.print("done");	# 10 IOprint_val (_12:void)<-(_13:str)
end tst;	# 11  
#    optimizer.inline("user","tst");
#    optimizer.costModel("user","tst");
#    optimizer.emptySet("user","tst");
#	mdb.List("user","tst");
#
function user.main():void;	# 0  (main:void)
#beware that the ESoptimizer does not remove the type of MALException 	# 1  (_1:str)
    mdb.List("user","tst");	# 2 MDBlist3Detail (_7:void)<-(_3:str)(_4:str)
end main;	# 3  
function user.tst():void;	# 0  (tst:void)
    V1 := bat.new(:oid,:int);	# 1 CMDBATnew (V1:bat[:oid,:int])<-(_2:oid)(_3:int)
    V7 := bat.new(:oid,:int);	# 2 CMDBATnew (V7:bat[:oid,:int])<-(_2:oid)(_3:int)
    V10{rows=0:lng} := bat.new(:int,:oid);	# 3 CMDBATnew (V10:bat[:int,:oid])<-(_3:int)(_2:oid)
    V11{rows=0:lng} := bat.reverse(V10);	# 4 BKCreverse (V11:bat[:oid,:int])<-(V10:bat[:int,:oid])
    V12 := V7;	# 5  (V12:bat[:oid,:int])<-(V7:bat[:oid,:int])
    V16 := algebra.markT(V12);	# 6 ALGtmark_default (V16:bat[:oid,:oid])<-(V12:bat[:oid,:int])
    V17 := algebra.join(V16,V7);	# 7 ALGjoin (V17:bat[:oid,:int])<-(V16:bat[:oid,:oid])(V7:bat[:oid,:int])
    bat.append(V1,V17);	# 8 BKCappend_wrap (_10:void)<-(V1:bat[:oid,:int])(V17:bat[:oid,:int])
    nil:void;	# 9  (_11:void)<-(_23:void)
barrier (_16,_17,_18):= bat.newIterator(V1);	# 10 CHPbunIterator (_16:lng)(_17:oid)(_18:int)<-(V1:bat[:oid,:int]) jump 15
    io.print("loop");	# 11 IOprint_val (_19:void)<-(_20:str)
catch MALException:str ;	# 12  (MALException:str) jump 14
    io.print(MALException);	# 13 IOprint_val (_22:void)<-(MALException:str)
exit MALException:str ;	# 14  (MALException:str)
exit (_16,_17,_18);	# 15  (_16:lng)(_17:oid)(_18:int)
    io.print("done");	# 16 IOprint_val (_12:void)<-(_13:str)
end tst;	# 17  

# 08:05:29 >  
# 08:05:29 >  Done.
# 08:05:29 >  

