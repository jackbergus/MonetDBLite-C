stdout of test 'emptyset01` in directory 'src/optimizer` itself:


# 08:05:29 >  
# 08:05:29 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=38505 --set xrpc_port=43491 --set monet_prompt= --trace --dbname=mTests_src_optimizer  emptyset01.mal
# 08:05:29 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
##beware that the ESoptimizer does not remove the type of MALException
#function do{inline}(V1:bat[:oid,:int]);
#barrier (x,y,z):= bat.newIterator(V1);
#	io.print("loop");
#catch MALException:str;
#	io.print(MALException);
#exit MALException;
#exit(x,y,z);
#end do;
function user.do{inline}(V1:bat[:oid,:int]):void;#  0 do:void := user.do(V1:bat[:oid,:int]) {G}
barrier (x,y,z) := bat.newIterator(V1); #  1 (x:lng, y:oid, z:int) := CHPbunIterator(V1:bat[:oid,:int]) {J6}
    io.print("loop");                   #  2 _5:void := IOprint_val(_6:str) 
catch MALException:str ;                #  3 MALException:str {J5}
    io.print(MALException);             #  4 _8:void := IOprint_val(MALException:str) 
exit MALException:str ;                 #  5 MALException:str 
exit (x,y,z);                           #  6 (x:lng, y:oid, z:int) 
end do;	# 7  
#
#function tst();
#    V1 := bat.new(:oid,:int);
#    V7 := bat.new(:oid,:int);
#    V10{rows=0} := bat.new(:int,:oid);
#    V11 := bat.reverse(V10);
#    V12 := algebra.kdifference(V7,V11);
#    V16 := algebra.markT(V12);
#    V17 := algebra.join(V16,V7);
#    bat.append(V1,V17);
#	do(V1);
#	io.print("done");
#end tst;
function user.tst():void;               #  0 tst:void := user.tst() {G}
    V1 := bat.new(:oid,:int);           #  1 V1:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    V7 := bat.new(:oid,:int);           #  2 V7:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    V10{rows=0:lng} := bat.new(:int,:oid);#  3 V10:bat[:int,:oid] := CMDBATnew(_3:int, _2:oid) {G}
    V11 := bat.reverse(V10{rows=0:lng});#  4 V11:bat[:oid,:int] := BKCreverse(V10:bat[:int,:oid]) {G}
    V12 := algebra.kdifference(V7,V11); #  5 V12:bat[:oid,:int] := ALGkdiff(V7:bat[:oid,:int], V11:bat[:oid,:int]) {G}
    V16 := algebra.markT(V12);          #  6 V16:bat[:oid,:oid] := ALGtmark_default(V12:bat[:oid,:int]) {G}
    V17 := algebra.join(V16,V7);        #  7 V17:bat[:oid,:int] := ALGjoin(V16:bat[:oid,:oid], V7:bat[:oid,:int]) {G}
    bat.append(V1,V17);                 #  8 _11:bat[:oid,:int] := BKCappend_wrap(V1:bat[:oid,:int], V17:bat[:oid,:int]) {G}
    user.do(V1);                        #  9 _12:void := user.do(V1:bat[:oid,:int]) 
    io.print("done");                   # 10 _13:void := IOprint_val(_14:str) 
end tst;	# 11  
#    optimizer.inline("user","tst");
#    optimizer.costModel("user","tst");
#    optimizer.emptySet("user","tst");
#	mdb.List("user","tst");
#
function user.main():void;              #  0 main:void := user.main() {G}
#beware that the ESoptimizer does not remove the type of MALException 
    mdb.List("user","tst");             #  2 _7:void := MDBlist3Detail(_3:str, _4:str) 
end main;	# 3  
function user.tst():void;               #  0 tst:void := user.tst() {G}
    V1 := bat.new(:oid,:int);           #  1 V1:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    V7 := bat.new(:oid,:int);           #  2 V7:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    V10{rows=0:lng} := bat.new(:int,:oid);#  3 V10:bat[:int,:oid] := CMDBATnew(_3:int, _2:oid) {G}
    V11{rows=0:lng} := bat.reverse(V10{rows=0:lng});#  4 V11:bat[:oid,:int] := BKCreverse(V10:bat[:int,:oid]) {G}
    V12 := V7;                          #  5 V12:bat[:oid,:int] := V7:bat[:oid,:int] {G}
    V16 := algebra.markT(V12);          #  6 V16:bat[:oid,:oid] := ALGtmark_default(V12:bat[:oid,:int]) {G}
    V17 := algebra.join(V16,V7);        #  7 V17:bat[:oid,:int] := ALGjoin(V16:bat[:oid,:oid], V7:bat[:oid,:int]) {G}
    bat.append(V1,V17);                 #  8 _11:bat[:oid,:int] := BKCappend_wrap(V1:bat[:oid,:int], V17:bat[:oid,:int]) {G}
barrier (_17,_18,_19) := bat.newIterator(V1);#  9 (_17:lng, _18:oid, _19:int) := CHPbunIterator(V1:bat[:oid,:int]) {J14}
    io.print("loop");                   # 10 _20:void := IOprint_val(_21:str) 
catch MALException:str ;                # 11 MALException:str {J13}
    io.print(MALException);             # 12 _23:void := IOprint_val(MALException:str) 
exit MALException:str ;                 # 13 MALException:str 
exit (_17,_18,_19);                     # 14 (_17:lng, _18:oid, _19:int) 
    io.print("done");                   # 15 _13:void := IOprint_val(_14:str) 
end tst;	# 16  

# 08:05:29 >  
# 08:05:29 >  Done.
# 08:05:29 >  

