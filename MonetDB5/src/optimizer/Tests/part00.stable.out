stdout of test 'part00` in directory 'src/optimizer` itself:


# 23:53:02 >  
# 23:53:02 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=39352 --set sql_port=45171 --set xquery_port=52900 --set monet_prompt= --trace --dbname=mTests_src_optimizer  part00.mal </dev/null
# 23:53:02 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
##testing the partition optimizer
#
#a1:= bbp.new(:void,:int);
#bat.setSequenceBase(a1,0@0);
#a2:= bbp.new(:void,:int);
#bat.setSequenceBase(a2,10@0);
#a3:= bbp.new(:void,:int);
#bat.setSequenceBase(a3,20@0);
#
#barrier (go,i):= mal.newRange(0);
#	bat.insert(a1,nil,i);
#	bat.insert(a2,nil,i);
#	bat.insert(a3,nil,i);
#	redo (go,i):= mal.nextElement(1,10);
#exit (go,i);
#
## add it to the BAT partition table
#partitions.deposit(a1);
#partitions.deposit(a1,a2);
#partitions.deposit(a1,a3);
#partitions.dump();
#
#function qry(a:bat[:void,:any$1]);
#end qry;
function user.qry(a:bat[:void,:any]):any;	# 0  dynamic (qry:any)<-(a:bat[:void,:any])
    ;	# 1  (_2:any)
end qry;	# 2  
!ERROR: function qry(a:bat[:void,:any$1]);
!                                   	^']' expected
!ERROR: 	io.print("hello");
!	       ^',' expected
!ERROR: 	io.print(a);
!	     ^<identifier> expected
#
#optimizer.partitionedQuery("user","qry");
#mdb.list("user","qry");
#io.print("run experiment");
#user.qry(a1);
#
!ERROR: 'user.qry' undefined in user.main[22]
function user.main():int;	# 0  (main:int)
#testing the partition optimizer 	# 1  (_2:str)
    a1 := bbp.new(:void,:int);	# 2 CMDBATnew (a1:bat[:void,:int])<-(_4:void)(_5:int)
    bat.setSequenceBase(a1,0@0);	# 3 BKCsetSequenceBase (_6:bat[:void,:int])<-(a1:bat[:void,:int])(_7:oid)
    a2 := bbp.new(:void,:int);	# 4 CMDBATnew (a2:bat[:void,:int])<-(_4:void)(_5:int)
    bat.setSequenceBase(a2,10@0);	# 5 BKCsetSequenceBase (_9:bat[:void,:int])<-(a2:bat[:void,:int])(_10:oid)
    a3 := bbp.new(:void,:int);	# 6 CMDBATnew (a3:bat[:void,:int])<-(_4:void)(_5:int)
    bat.setSequenceBase(a3,20@0);	# 7 BKCsetSequenceBase (_12:bat[:void,:int])<-(a3:bat[:void,:int])(_13:oid)
barrier (go,i):= mal.newRange(0);	# 8 RNGnewRange_int (go:bit)(i:int)<-(_16:int) jump 13
    bat.insert(a1,nil,i);	# 9 BKCinsert_bun (_17:bat[:void,:int])<-(a1:bat[:void,:int])(_18:void)(i:int)
    bat.insert(a2,nil,i);	# 10 BKCinsert_bun (_19:bat[:void,:int])<-(a2:bat[:void,:int])(_18:void)(i:int)
    bat.insert(a3,nil,i);	# 11 BKCinsert_bun (_20:bat[:void,:int])<-(a3:bat[:void,:int])(_18:void)(i:int)
    redo (go,i):= mal.nextElement(1,10);	# 12 RNGnextElement_int (go:bit)(i:int)<-(_21:int)(_22:int) jump 9
exit (go,i);	# 13  (go:bit)(i:int)
# add it to the BAT partition table 	# 14  (_24:str)
    partitions.deposit(a1);	# 15 BPTdeposit (_25:void)<-(a1:bat[:void,:int])
    partitions.deposit(a1,a2);	# 16 BPTdeposit2 (_26:void)<-(a1:bat[:void,:int])(a2:bat[:void,:int])
    partitions.deposit(a1,a3);	# 17 BPTdeposit2 (_27:void)<-(a1:bat[:void,:int])(a3:bat[:void,:int])
    partitions.dump();	# 18 BPTdump (_28:void)
    optimizer.partitionedQuery("user","qry");	# 19 QOTBPToptimizerCALL (_29:str)<-(_30:str)(_31:str)
    mdb.list("user","qry");	# 20 MDBlist3 (_32:void)<-(_30:str)(_31:str)
    io.print("run experiment");	# 21 IOprint_val (_33:int)<-(_34:str)
    user.qry(a1);	# 22  unknown (_35:any)<-(a1:bat[:void,:int])
end main;	# 23  

# 23:53:02 >  
# 23:53:02 >  Done.
# 23:53:02 >  

