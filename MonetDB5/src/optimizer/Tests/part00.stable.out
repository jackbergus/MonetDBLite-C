stdout of test 'part00` in directory 'src/optimizer` itself:


# 23:53:02 >  
# 23:53:02 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=39352 --set sql_port=45171 --set xquery_port=52900 --set monet_prompt= --trace --dbname=mTests_src_optimizer  part00.mal </dev/null
# 23:53:02 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
##testing the partition optimizer
#
#a1:= bbp.new(:void,:int);
#bat.setSequenceBase(a1,0@0);
#a2:= bbp.new(:void,:int);
#bat.setSequenceBase(a2,10@0);
#a3:= bbp.new(:void,:int);
#bat.setSequenceBase(a3,20@0);
#
#barrier (go,i):= mal.newRange(0);
#	bat.insert(a1,nil,i);
#	bat.insert(a2,nil,i);
#	bat.insert(a3,nil,i);
#	redo (go,i):= mal.nextElement(1,10);
#exit (go,i);
#
## add it to the BAT partition table
#partitions.deposit(a1);
#partitions.deposit(a1,a2);
#partitions.deposit(a1,a3);
#partitions.dump();
#
#function qry(a:bat[:void,:any$1]);
#end qry;
function user.qry(a:bat[:void,:any_1]):void;	# 0  (qry:void)<-(a:bat[:void,:any_1])
    io.print("hello");	# 1 IOprint_val (_2:int)<-(_3:str)
    io.print(a);	# 2 IOprint_val (_4:int)<-(a:bat[:void,:any_1])
end qry;	# 3  
#
#optimizer.partitionedQuery("user","qry");
#mdb.list("user","qry");
#io.print("run experiment");
#user.qry(a1);
#
start first=1 last=2 
replace first=2 last=2 
variable replacement 'a' instructions 2-2  lifespan 2-2
first=6 last=6 
first=7 last=6 
function user.main():void;	# 0  (main:void)
#testing the partition optimizer 	# 1  (_1:str)
    a1 := bat.new(:void,:int);	# 2 CMDBATnew (a1:bat[:void,:int])<-(_3:void)(_4:int)
    bat.setSequenceBase(a1,0@0);	# 3 BKCsetSequenceBase (_5:bat[:void,:int])<-(a1:bat[:void,:int])(_6:oid)
    a2 := bat.new(:void,:int);	# 4 CMDBATnew (a2:bat[:void,:int])<-(_3:void)(_4:int)
    bat.setSequenceBase(a2,10@0);	# 5 BKCsetSequenceBase (_8:bat[:void,:int])<-(a2:bat[:void,:int])(_9:oid)
    a3 := bat.new(:void,:int);	# 6 CMDBATnew (a3:bat[:void,:int])<-(_3:void)(_4:int)
    bat.setSequenceBase(a3,20@0);	# 7 BKCsetSequenceBase (_11:bat[:void,:int])<-(a3:bat[:void,:int])(_12:oid)
barrier (go,i):= mal.newRange(0);	# 8 RNGnewRange_int (go:bit)(i:int)<-(_15:int) jump 13
    bat.insert(a1,nil,i);	# 9 BKCinsert_bun (_16:void)<-(a1:bat[:void,:int])(_17:void)(i:int)
    bat.insert(a2,nil,i);	# 10 BKCinsert_bun (_18:void)<-(a2:bat[:void,:int])(_17:void)(i:int)
    bat.insert(a3,nil,i);	# 11 BKCinsert_bun (_19:void)<-(a3:bat[:void,:int])(_17:void)(i:int)
    redo (go,i):= mal.nextElement(1,10);	# 12 RNGnextElement_int (go:bit)(i:int)<-(_20:int)(_21:int) jump 9
exit (go,i);	# 13  (go:bit)(i:int)
# add it to the BAT partition table 	# 14  (_22:str)
    partitions.deposit(a1);	# 15 BPTdeposit (_23:void)<-(a1:bat[:void,:int])
    partitions.deposit(a1,a2);	# 16 BPTdeposit2 (_24:void)<-(a1:bat[:void,:int])(a2:bat[:void,:int])
    partitions.deposit(a1,a3);	# 17 BPTdeposit2 (_25:void)<-(a1:bat[:void,:int])(a3:bat[:void,:int])
    partitions.dump();	# 18 BPTdump (_26:void)
    mdb.list("user","qry");	# 19 MDBlist3 (_30:void)<-(_28:str)(_29:str)
    io.print("run experiment");	# 20 IOprint_val (_31:int)<-(_32:str)
    user.qry(a1);	# 21  (_33:void)<-(a1:bat[:void,:int])
end main;	# 22  
ptop=3 plimit=1024
[0] bid=6 pid=6 f=0, l=10 prv=-1 nxt=1 cap=-1
[1] bid=6 pid=7 f=10, l=20 prv=0 nxt=2 cap=-1
[2] bid=6 pid=8 f=20, l=30 prv=1 nxt=-1 cap=-1
function user.qry(a:bat[:void,:int]):void;
    io.print("hello");
barrier (_5,_6):= partitions.newIterator(a);
    io.print(_6);
    redo (_5,_6):= partitions.hasMoreElements(a);
exit (_5,_6);
end qry;
[ "run experiment" ]
[ "hello" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  2	  ]
[ 3@0,	  3	  ]
[ 4@0,	  4	  ]
[ 5@0,	  5	  ]
[ 6@0,	  6	  ]
[ 7@0,	  7	  ]
[ 8@0,	  8	  ]
[ 9@0,	  9	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 10@0,	  0	  ]
[ 11@0,	  1	  ]
[ 12@0,	  2	  ]
[ 13@0,	  3	  ]
[ 14@0,	  4	  ]
[ 15@0,	  5	  ]
[ 16@0,	  6	  ]
[ 17@0,	  7	  ]
[ 18@0,	  8	  ]
[ 19@0,	  9	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 20@0,	  0	  ]
[ 21@0,	  1	  ]
[ 22@0,	  2	  ]
[ 23@0,	  3	  ]
[ 24@0,	  4	  ]
[ 25@0,	  5	  ]
[ 26@0,	  6	  ]
[ 27@0,	  7	  ]
[ 28@0,	  8	  ]
[ 29@0,	  9	  ]

# 23:53:02 >  
# 23:53:02 >  Done.
# 23:53:02 >  

