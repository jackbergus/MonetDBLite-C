stdout of test 'tst4611` in directory 'src/optimizer` itself:


# 23:52:53 >  
# 23:52:53 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=39352 --set sql_port=45171 --set xquery_port=52900 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4611.mal </dev/null
# 23:52:53 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
## the first test for macro expansions and inversions
#
#function algebra.joinPath( a:bat[:any$1,:any$2],
#    a:= zz;
#end joinPath;
function algebra.joinPath(a:any):any;	# 0  dynamic (joinPath:any)<-(a:any)
    ;	# 1  (_2:any)
    a := zz;	# 2  (a:any)<-(zz:any)
end joinPath;	# 3  
!ERROR: function algebra.joinPath( a:bat[:any$1,:any$2],
!                                            ^',' expected
!ERROR:     z:= algebra.join(a,b);
!      ^',' expected
!ERROR:     zz:= algebra.join(z,c);
!      ^<identifier> expected
!ERROR: 'zz' may not be used before being set in joinPath[2]
#
#optimizer.macroContraction("algebra","joinPath");
#
#a:= bbp.new(:int,:int);
#b:= bbp.new(:int,:int);
#c:= bbp.new(:int,:int);
#g:= algebra.join(a,b);
#h:= algebra.join(g,c);
#
#mdb.list();
#
function user.main():int;	# 0  (main:int)
# the first test for macro expansions and inversions 	# 1  (_2:str)
    a := bbp.new(:int,:int);	# 2 CMDBATnew (a:bat[:int,:int])<-(_7:int)(_7:int)
    b := bbp.new(:int,:int);	# 3 CMDBATnew (b:bat[:int,:int])<-(_7:int)(_7:int)
    c := bbp.new(:int,:int);	# 4 CMDBATnew (c:bat[:int,:int])<-(_7:int)(_7:int)
    g := algebra.join(a,b);	# 5 ALGjoin (g:bat[:int,:int])<-(a:bat[:int,:int])(b:bat[:int,:int])
    h := algebra.join(g,c);	# 6 ALGjoin (h:bat[:int,:int])<-(g:bat[:int,:int])(c:bat[:int,:int])
    mdb.list();	# 7 MDBlist (_12:void)
end main;	# 8  
function user.main():int;
# the first test for macro expansions and inversions 
    a := bbp.new(:int,:int);
    b := bbp.new(:int,:int);
    c := bbp.new(:int,:int);
    g := algebra.join(a,b);
    h := algebra.join(g,c);
    mdb.list();
end main;

# 23:52:53 >  
# 23:52:53 >  Done.
# 23:52:53 >  

