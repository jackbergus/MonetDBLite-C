stdout of test 'tst4611` in directory 'src/optimizer` itself:


# 23:52:53 >  
# 23:52:53 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=39352 --set sql_port=45171 --set xquery_port=52900 --set monet_prompt= --trace --dbname=mTests_src_optimizer  tst4611.mal </dev/null
# 23:52:53 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information.
## the first test for macro expansions and inversions
#
#function algebra.joinPath( a:bat[:any$1,:any$2],
#    a:= zz;
#end joinPath;
function algebra.joinPath(a:bat[:any_1,:any_2],b:bat[:any_2,:any_3],c:bat[:any_3,:any_4]):bat[:any_1,:any_4];	# 0  dynamic (joinPath:bat[:any_1,:any_4])<-(a:bat[:any_1,:any_2])(b:bat[:any_2,:any_3])(c:bat[:any_3,:any_4])
    z := algebra.join(a,b);	# 1 ALGjoin (z:bat[:any,:any])<-(a:bat[:any_1,:any_2])(b:bat[:any_2,:any_3])
    zz := algebra.join(z,c);	# 2 ALGjoin (zz:bat[:any,:any])<-(z:bat[:any,:any])(c:bat[:any_3,:any_4])
    return zz;	# 3  (zz:bat[:any,:any])
end joinPath;	# 4  
#
#optimizer.macroContraction("algebra","joinPath");
#
#a:= bbp.new(:int,:int);
#b:= bbp.new(:int,:int);
#c:= bbp.new(:int,:int);
#g:= algebra.join(a,b);
#h:= algebra.join(g,c);
#
#mdb.list();
#
function user.main():void;	# 0  (main:void)
# the first test for macro expansions and inversions 	# 1  (_1:str)
    a := bat.new(:int,:int);	# 2 CMDBATnew (a:bat[:int,:int])<-(_6:int)(_6:int)
    b := bat.new(:int,:int);	# 3 CMDBATnew (b:bat[:int,:int])<-(_6:int)(_6:int)
    c := bat.new(:int,:int);	# 4 CMDBATnew (c:bat[:int,:int])<-(_6:int)(_6:int)
    h := algebra.joinPath(a,b,c);	# 5  (h:bat[:int,:int])<-(a:bat[:int,:int])(b:bat[:int,:int])(c:bat[:int,:int])
    mdb.list();	# 6 MDBlist (_11:void)
function user.main():void;
# the first test for macro expansions and inversions 
    a := bat.new(:int,:int);
    b := bat.new(:int,:int);
    c := bat.new(:int,:int);
    h := algebra.joinPath(a,b,c);
    mdb.list();

# 23:52:53 >  
# 23:52:53 >  Done.
# 23:52:53 >  

