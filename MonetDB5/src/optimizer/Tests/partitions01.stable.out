stdout of test 'partitions01` in directory 'src/optimizer` itself:


# 09:48:30 >  
# 09:48:30 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=36708 --set xrpc_port=48585 --set monet_prompt= --trace --dbname=mTests_src_optimizer  partitions01.mal
# 09:48:30 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
##testing the BAT partition manager
## use a fake sql library
#module sql;
#pattern bind(s:str,t:str,i:str,flag:int):bat[:oid,:int]
pattern sql.bind(s:str,t:str,i:str,flag:int):bat[:oid,:int] address MDBdummy;#  0 bind:bat[:oid,:int] := sql.bind(s:str, t:str, i:str, flag:int) {G}
#pattern rsColumn(b:any...):void
pattern sql.rsColumn(b:any...):void address MDBdummy;#  0 rsColumn:void := sql.rsColumn(b:any) {P}
#pattern resultSet(b:any...):void
pattern sql.resultSet(b:any...):void address MDBdummy;#  0 resultSet:void := sql.resultSet(b:any) {P}
#pattern exportResult(b:any...):void
pattern sql.exportResult(b:any...):void address MDBdummy;#  0 exportResult:void := sql.exportResult(b:any) {P}
#
#function user.query(A0:sht):void;
#   x2:bat[:oid,:int]{bid=777,rows=1,notnil=true}  := sql.bind("sys","tmp","i",0);
#    x11:bat[:oid,:int]{bid=313,rows=0,notnil=true}  := sql.bind("sys","tmp","i",1);
#    constraints.emptySet(x11);
#    x13:bat[:oid,:int]{bid=778,rows=0,notnil=true}  := sql.bind("sys","tmp","i",2);
#    constraints.emptySet(x13);
#    x19:bat[:oid,:int]{bid=779,rows=1,notnil=true}  := sql.bind("sys","tmp","j",0);
#    x7 := calc.int(A0);
#    x8{rows=1} := algebra.uselect(x2,nil:int,x7,false,false);
#    x16{rows=1} := algebra.markT(x8,0@0);
#    x17{rows=1} := bat.reverse(x16);
#    x18{rows=1} := algebra.join(x17,x2);
#    x21{rows=1} := algebra.join(x17,x19);
#    x22 := sql.resultSet(2,1,x18);
#    sql.rsColumn(x22,"sys.tmp","i","int",32,0,x18);
#    sql.rsColumn(x22,"sys.tmp","j","int",32,0,x21);
#    sql.exportResult(x22,"");
#end query;
function sql.query(A0:sht):void;        #  0 query:void := sql.query(A0:sht) {G}
    x1:bat[:oid,:int]{bid=812,rows=1,notnil=true}  := sql.bind("sys","x","i",0);#  1 x1:bat[:oid,:int] := MDBdummy(_6:str, _7:str, _8:str, _9:int) {G}
    x6:bat[:oid,:int]{bid=808,rows=0,notnil=true}  := sql.bind("sys","x","i",1);#  2 x6:bat[:oid,:int] := MDBdummy(_6:str, _7:str, _8:str, _4:int) {G}
    constraints.emptySet(x6);           #  3 _12:void := CemptySet(x6:bat[:oid,:int]) 
    x9:bat[:oid,:int]{bid=814,rows=0,notnil=true}  := sql.bind("sys","x","i",2);#  4 x9:bat[:oid,:int] := MDBdummy(_6:str, _7:str, _8:str, _15:int) {G}
    constraints.emptySet(x9);           #  5 _16:void := CemptySet(x9:bat[:oid,:int]) 
    x21:bat[:oid,:int]{bid=815,rows=1,notnil=true}  := sql.bind("sys","x","j",1);#  6 x21:bat[:oid,:int] := MDBdummy(_6:str, _7:str, _19:str, _4:int) {G}
    x18{rows=1} := algebra.markT(x1,0@0);#  7 x18:bat[:oid,:oid] := ALGtmark(x1:bat[:oid,:int], _21:oid) {G}
    x19{rows=1} := bat.reverse(x18);    #  8 x19:bat[:oid,:oid] := BKCreverse(x18:bat[:oid,:oid]) {G}
    x20{rows=1} := algebra.join(x19,x1);#  9 x20:bat[:oid,:int] := ALGjoin(x19:bat[:oid,:oid], x1:bat[:oid,:int]) {G}
    x28{rows=1} := algebra.join(x19,x21);# 10 x28:bat[:oid,:int] := ALGjoin(x19:bat[:oid,:oid], x21:bat[:oid,:int]) {G}
    x29 := sql.resultSet(2,1,x20);      # 11 x29:void := MDBdummy(_15:int, _4:int, x20:bat[:oid,:int]) 
    sql.rsColumn(x29,"sys.x","i","int",32,0,x20);# 12 _26:void := MDBdummy(x29:void, _27:str, _8:str, _28:str, _29:int, _9:int, x20:bat[:oid,:int]) 
    sql.rsColumn(x29,"sys.x","j","int",32,0,x28);# 13 _30:void := MDBdummy(x29:void, _27:str, _19:str, _28:str, _29:int, _9:int, x28:bat[:oid,:int]) 
    sql.exportResult(x29,"");           # 14 _31:void := MDBdummy(x29:void, _32:str) 
end query;	# 15  
#optimizer.partitions("user","query");
#
function user.main():void;              #  0 main:void := user.main() {G}
#testing the BAT partition manager 
# use a fake sql library 
    mdb.list("sql","query");            #  3 _6:void := MDBlist3(_4:str, _5:str) 
end main;	# 4  
function sql.query(A0:sht):void;
    x1:bat[:oid,:int]{bid=812,rows=1,notnil=true}  := sql.bind("sys","x","i",0);
    x6:bat[:oid,:int]{bid=808,rows=0,notnil=true}  := sql.bind("sys","x","i",1);
    bpm10:bat[:oid,:int]  := bpm.unfold(x6);
    bpm.emptySet(bpm10);
    x9:bat[:oid,:int]{bid=814,rows=0,notnil=true}  := sql.bind("sys","x","i",2);
    bpm13:bat[:oid,:int]  := bpm.unfold(x9);
    bpm.emptySet(bpm13);
    x21:bat[:oid,:int]{bid=815,rows=1,notnil=true}  := sql.bind("sys","x","j",1);
    bpm17:bat[:oid,:int]  := bpm.unfold(x21);
    x18{rows=1} := algebra.markT(x1,0@0);
    x19{rows=1} := bat.reverse(x18);
    x20{rows=1} := algebra.join(x19,x1);
    _39 := bpm.new(:oid,:int);
    x28{rows=1} := nil;
barrier x21:bat[:oid,:int]{bid=815,rows=1,notnil=true}  := bpm.newIterator(bpm17);
    x28{rows=1} := algebra.join(x19,x21);
    bpm.addPartition(_39,x28);
    redo x21:bat[:oid,:int]{bid=815,rows=1,notnil=true}  := bpm.hasMoreElements(bpm17);
exit x21:bat[:oid,:int]{bid=815,rows=1,notnil=true} ;
    x29 := sql.resultSet(2,1,x20);
    sql.rsColumn(x29,"sys.x","i","int",32,0,x20);
    x28{rows=1} := bpm.fold(_39);
    sql.rsColumn(x29,"sys.x","j","int",32,0,x28);
    sql.exportResult(x29,"");
catch SQLexception;
    bpm.garbage(bpm10);
    bpm.garbage(bpm13);
    bpm.garbage(bpm17);
    raise SQLexception;
exit SQLexception;
    bpm.garbage(bpm10);
    bpm.garbage(bpm13);
    bpm.garbage(bpm17);
end query;

# 09:48:30 >  
# 09:48:30 >  Done.
# 09:48:30 >  

