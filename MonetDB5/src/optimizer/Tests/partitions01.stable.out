stdout of test 'partitions01` in directory 'src/optimizer` itself:


# 09:48:30 >  
# 09:48:30 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=36708 --set xrpc_port=48585 --set monet_prompt= --trace --dbname=mTests_src_optimizer  partitions01.mal
# 09:48:30 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_optimizer
# Visit http://monetdb.cwi.nl/ for further information
##testing the BAT partition manager
##before the garbage collector steps in
#include sql;
#sql.start2();
#
#function user.query(A0:sht):void;
#   x2:bat[:oid,:int]{bid=777,rows=1,notnil=true}  := sql.bind("sys","tmp","i",0);
#    x11:bat[:oid,:int]{bid=313,rows=0,notnil=true}  := sql.bind("sys","tmp","i",1);
#    constraints.emptySet(x11);
#    x13:bat[:oid,:int]{bid=778,rows=0,notnil=true}  := sql.bind("sys","tmp","i",2);
#    constraints.emptySet(x13);
#    x19:bat[:oid,:int]{bid=779,rows=1,notnil=true}  := sql.bind("sys","tmp","j",0);
#    x7 := calc.int(A0);
#    x8{rows=1} := algebra.uselect(x2,nil:int,x7,false,false);
#    x16{rows=1} := algebra.markT(x8,0@0);
#    x17{rows=1} := bat.reverse(x16);
#    x18{rows=1} := algebra.join(x17,x2);
#    x21{rows=1} := algebra.join(x17,x19);
#    x22 := sql.resultSet(2,1,x18);
#    sql.rsColumn(x22,"sys.tmp","i","int",32,0,x18);
#    sql.rsColumn(x22,"sys.tmp","j","int",32,0,x21);
#    sql.exportResult(x22,"");
#end query;
function user.query(A0:sht):void;	# 0  (query:void)<-(A0:sht)
    x1:bat[:oid,:int]{notnil=true,rows=1,bid=812}  := sql.bind("sys","x","i",0);	# 1 mvc_bind_wrap (x1:bat[:oid,:int])<-(_3:str)(_4:str)(_5:str)(_6:int)
    x6:bat[:oid,:int]{notnil=true,rows=0,bid=808}  := sql.bind("sys","x","i",1);	# 2 mvc_bind_wrap (x6:bat[:oid,:int])<-(_3:str)(_4:str)(_5:str)(_8:int)
    constraints.emptySet(x6);	# 3 CemptySet (_9:void)<-(x6:bat[:oid,:int])
    x9:bat[:oid,:int]{notnil=true,rows=0,bid=814}  := sql.bind("sys","x","i",2);	# 4 mvc_bind_wrap (x9:bat[:oid,:int])<-(_3:str)(_4:str)(_5:str)(_11:int)
    constraints.emptySet(x9);	# 5 CemptySet (_12:void)<-(x9:bat[:oid,:int])
    x21:bat[:oid,:int]{notnil=true,rows=1,bid=815}  := sql.bind("sys","x","j",0);	# 6 mvc_bind_wrap (x21:bat[:oid,:int])<-(_3:str)(_4:str)(_14:str)(_6:int)
    x18{rows=1} := algebra.markT(x1,0@0);	# 7 ALGtmark (x18:bat[:oid,:oid])<-(x1:bat[:oid,:int])(_16:oid)
    x19{rows=1} := bat.reverse(x18);	# 8 BKCreverse (x19:bat[:oid,:oid])<-(x18:bat[:oid,:oid])
    x20{rows=1} := algebra.join(x19,x1);	# 9 ALGjoin (x20:bat[:oid,:int])<-(x19:bat[:oid,:oid])(x1:bat[:oid,:int])
    x28{rows=1} := algebra.join(x19,x21);	# 10 ALGjoin (x28:bat[:oid,:int])<-(x19:bat[:oid,:oid])(x21:bat[:oid,:int])
    x29 := sql.resultSet(2,1,x20);	# 11 mvc_result_table_wrap (x29:int)<-(_11:int)(_8:int)(x20:bat[:oid,:int])
    sql.rsColumn(x29,"sys.x","i","int",32,0,x20);	# 12 mvc_result_column_wrap (_21:void)<-(x29:int)(_22:str)(_5:str)(_23:str)(_24:int)(_6:int)(x20:bat[:oid,:int])
    sql.rsColumn(x29,"sys.x","j","int",32,0,x28);	# 13 mvc_result_column_wrap (_25:void)<-(x29:int)(_22:str)(_14:str)(_23:str)(_24:int)(_6:int)(x28:bat[:oid,:int])
    sql.exportResult(x29,"");	# 14 mvc_export_result_wrap (_26:void)<-(x29:int)(_27:str)
end query;	# 15  
#optimizer.partitions("user","query");
#
function user.main():void;	# 0  (main:void)
#testing the BAT partition manager 	# 1  (_1:str)
#before the garbage collector steps in 	# 2  (_2:str)
    sql.prelude();	# 3 SQLprelude (_3:void)
    sql.start2();	# 4 SQLsession2 (_4:void)
    mdb.list("user","query");	# 5 MDBlist3 (_8:void)<-(_6:str)(_7:str)
end main;	# 6  
function user.query{segment=2}(A0:sht):void;
    x1:bat[:oid,:int]{segment=2,notnil=true,rows=1,bid=812}  := sql.bind("sys","x","i",0);
    bpm2:bat[:oid,:int]  := bpm.take("sys_x_i");
    x6:bat[:oid,:int]{segment=-1,notnil=true,rows=0,bid=808}  := sql.bind("sys","x","i",1);
    constraints.emptySet(x6);
    x9:bat[:oid,:int]{segment=-1,notnil=true,rows=0,bid=814}  := sql.bind("sys","x","i",2);
    constraints.emptySet(x9);
    x21:bat[:oid,:int]{segment=5,notnil=true,rows=1,bid=815}  := sql.bind("sys","x","j",0);
    bpm13:bat[:oid,:int]  := bpm.take("sys_x_j");
    L15 := list.new();
barrier x1:bat[:oid,:int]{segment=2,notnil=true,rows=1,bid=812}  := bpm.newIterator(bpm2);
    x18{segment=2,rows=1} := algebra.markT(x1,0@0);
    x19{segment=2,rows=1} := bat.reverse(x18);
    list.append(L15,x19);
    redo x1:bat[:oid,:int]{segment=2,notnil=true,rows=1,bid=812}  := bpm.hasMoreElements(bpm2);
exit x1:bat[:oid,:int]{segment=2,notnil=true,rows=1,bid=812} ;
    L18 := list.new();
barrier x19{segment=2,rows=1} := list.newIterator(L15);
barrier x1:bat[:oid,:int]{segment=2,notnil=true,rows=1,bid=812}  := bpm.newIterator(bpm2);
    x20{segment=6,rows=1} := algebra.join(x19,x1);
    x28{segment=6,rows=1} := algebra.join(x19,x21);
    list.append(L18,x28);
    redo x1:bat[:oid,:int]{segment=2,notnil=true,rows=1,bid=812}  := bpm.hasMoreElements(bpm2);
    redo x19{segment=2,rows=1} := list.hasMoreElements(L15);
exit x1:bat[:oid,:int]{segment=2,notnil=true,rows=1,bid=812} ;
exit x19{segment=2,rows=1};
    x20{segment=6,rows=1} := list.glue(L18);
    x29{segment=7} := sql.resultSet(2,1,x20);
    sql.rsColumn(x29,"sys.x","i","int",32,0,x20);
    x28{segment=6,rows=1} := list.glue(L18);
    sql.rsColumn(x29,"sys.x","j","int",32,0,x28);
    sql.exportResult(x29,"");
end query;

# 09:48:30 >  
# 09:48:30 >  Done.
# 09:48:30 >  

