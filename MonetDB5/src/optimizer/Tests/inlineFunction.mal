function my_case{inline}(Av:int):int;
    _3 := calc.==(Av,1);
barrier _4 := _3;
    _6 := calc.int(100);
    return my_case:int  := _6;
exit _4;
barrier _7 := calc.not(_3);
    _9 := calc.==(Av,2);
barrier _10 := _9;
    _12 := calc.int(200:sht);
    return my_case:int  := _12;
exit _10;
barrier _13 := calc.not(_9);
    _14 := calc.-(1);
    _15 := calc.int(_14);
    return my_case:int  := _15;
exit _13;
exit _7;
    return my_case:int ;
end my_case;

function tst();
	z:= my_case(1);
end tst;
optimizer.inline("user","tst");
io.printf("#result of inline\n");
mdb.list("user","tst");
optimizer.remap("user","tst");
optimizer.evaluate("user","tst");
optimizer.costModel("user","tst");
optimizer.coercions("user","tst");
optimizer.emptySet("user","tst");
optimizer.aliases("user","tst");
optimizer.mergetable("user","tst");
optimizer.constants("user","tst");
optimizer.commonTerms("user","tst");
optimizer.joinPath("user","tst");
optimizer.deadcode("user","tst");
optimizer.reduce("user","tst");
optimizer.garbageCollector("user","tst");
optimizer.dataflow("user","tst");
io.printf("#result of all optimizers\n");
mdb.list("user","tst");

