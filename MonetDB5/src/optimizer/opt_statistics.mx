@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2007 CWI.
@' All Rights Reserved.

@f opt_statistics
@a Martin Kersten
@v 0.1
@+ Optimizer Statistics
The optimizers statistics are collected in a small catalog.
It provides a basis for off-line analysis of their contribution
and a source of information of dynamic optimization decisions.

The command is stored in the inspection module, because it
otherwise interferes with the general optimizer phase.
@mal
command inspect.getStatistics(nme:str):bat[:oid,:any_1]
address QOTgetStatistics
comment "Get optimizer property statistics 
such as #calls, #total actions, #total time";
 
@{
@+ Dummy code 
@h
#ifndef _Q_STATISTICS_H
#define _Q_STATISTICS_H
/* #define _Q_STATISTICS_DEBUG */

#include "mal_interpreter.h"
#include "mal_scenario.h"
#include "mal_namespace.h"
#include "opt_support.h"
#include "opt_prelude.h"

opt_export str QOTgetStatistics(int *ret, str *nme);
opt_export void QOTupdateStatistics(str nme, int prop, lng val);
#endif /* _Q_STATISTICS_H */
@c
#include "mal_config.h"
#include "opt_statistics.h"
@
Upon loading the module it should inspect the scenario table
for any unresolved references to the MALoptimizer and set the 
callback function.
@c
@- Optimizer statistics
A few global tables are maintained with optimizer statistics.
They provide the basis for dynamic optimization and offline analysis
@= updateStep
	/* do it */
@c
#define QOTnames	0
#define QOTcalls	1
#define QOTactions	2
#define QOTtimings	3

static BAT *qotStat[4];

static BAT *
QOT_create(str hnme, str tnme, int ht, int tt)
{
	BAT *b;
	char buf[128];

	snprintf(buf, 128, "optstat_%s_%s", hnme, tnme);
	b = BATdescriptor(BBPindex(buf));
	if (b)
		return b;

	b = BATnew(ht, tt, 256);
	if (b == NULL)
		GDKfatal("QOT_create: could not allocate.");

	BATkey(b, TRUE);
	BBPrename(b->batCacheid, buf);
	BATmode(b, PERSISTENT);
	return b;
}
static void QOTstatisticsInit(){
	if( qotStat[0]) return;
	qotStat[QOTnames]= QOT_create("opt","names",TYPE_oid,TYPE_str);
	qotStat[QOTcalls]= QOT_create("opt","calls",TYPE_oid,TYPE_int);
	qotStat[QOTactions]= QOT_create("opt","actions",TYPE_oid,TYPE_int);
	qotStat[QOTtimings]= QOT_create("opt","timings",TYPE_oid,TYPE_int);
}

/*
static void QOTstatisticsExit(){
	int i;
	for(i=0; i<5;i++)
	if(qotStat[i]) 
		BBPreclaim(qotStat[i]);
}
*/

static int QOTindex(str nme){
	if( nme == 0) return -1;
	if(strcmp(nme,"names")) return QOTnames;
	if(strcmp(nme,"calls")) return QOTcalls;
	if(strcmp(nme,"actions")) return QOTactions;
	if(strcmp(nme,"timings")) return QOTtimings;
	return -1;
}

void
QOTupdateStatistics(str nme, int actions, lng val){
	BUN p;
	oid o=oid_nil;
	int *i;
	lng *l;

	QOTstatisticsInit();
#ifdef _Q_STATISTICS_DEBUG
	stream_printf(GDKout,"update optimizer statistics\n");
#endif
	p= BUNfnd(BATrevert(qotStat[0]),(ptr)nme);
	if( p == 0) {
#ifdef _Q_STATISTICS_DEBUG
		stream_printf(GDKout,"insert optimizer statistics %s\n",nme);
#endif
		BUNins(qotStat[0],&o, nme,TRUE);
		p= BUNfnd(BATrevert(qotStat[0]),(ptr)nme);
		if( p == 0)
			return;
	}
	o= * (oid*) BUNhead(qotStat[0],p);
	p= BUNfnd(qotStat[QOTcalls],&o);
	if( p== NULL)
		stream_printf(GDKout,"#Could not access 'calls'");
	i= (int*) BUNtail(qotStat[QOTcalls],p);
	*i= *i+1;

	p= BUNfnd(qotStat[QOTactions],&o);
	if( p== NULL)
		stream_printf(GDKout,"#Could not access 'calls'");
	i= (int*) BUNtail(qotStat[QOTactions],p);
	*i= *i+ actions;

	p= BUNfnd(qotStat[QOTtimings],&o);
	if( p== NULL)
		stream_printf(GDKout,"#Could not access 'calls'");
	l= (lng*) BUNtail(qotStat[QOTtimings],p);
	*l= *l+ val;
}
str
QOTgetStatistics(int *ret, str *nme){
	int idx;
	QOTstatisticsInit();
	idx= QOTindex(*nme);
	if( idx <  0)
		throw(MAL,"optimizer.getStatistics","Illegal property");
	(void) ret;
	BBPincref(*ret= qotStat[idx]->batCacheid,TRUE);
	return MAL_SUCCEED;
}

@}
