@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@f mal_crack
@a S.Idreos
The cracker optimizer searches patterns to be replaced by
the special cracker index operations.

@{
@mal
pattern optimizer.crack():str
address QOTCRKoptimizer;
pattern optimizer.crack(mod:str, fcn:str):str
address QOTCRKoptimizer
comment "Replace algebra select with crackers select";

@h
#ifndef _MAL_CRACK_
#define _MAL_CRACK_
#include "mal_optimizer.h"

/* #define DEBUG_MAL_CRACK */

opt_export str CRKoptimizer(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);

#endif


@c  
#include "mal_crack.h"
#include "mal_namespace.h"
#include "mal_interpreter.h"	/* for showErrors() */
#include "mal_prelude.h"

#define match(X,M,F) ( (X) && getFunctionId(X) && strcmp(getFunctionId(X),F)==0 && \
	getModuleId(X) && strcmp(getModuleId(X),M)==0)

#define match2(X,M,F) ( (X) && getFunctionId(X) && getFunctionId(X)==F && \
	getModuleId(X) && getModuleId(X)==M)

/* find all algebra select structions in a mal block mb and change them to the corresponding crackers command
    */
str
CRKoptimizer(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	InstrPtr p, *old;
	int i, limit;

	lng clk = GDKusec();

	if( mb->errors) 
		return MAL_SUCCEED;

#ifdef DEBUG_MAL_CRACK
	printf("Crack optimizer started\n");
#endif
	(void) stk;
	(void) pci;
	
	limit = mb->stop;
	old = mb->stmt;
	
	for (i = 0; i < limit; i++) {
		p = old[i];
#ifdef DEBUG_MAL_CRACK
		printf("limit is at: %d and i is at: %d  ", limit, i);
	        printInstruction(GDKout, mb, p, LIST_MAL_ALL);	
#endif
		/* find and replace algebra select commands with crack select ones*/

		if (match2(p, batRef, newRef)){  
				/* add a property can be cracked to every base relation */

			if ( getTailType(mb->var[getArg(p,0)]->type)!=TYPE_int &&
			     getTailType(mb->var[getArg(p,0)]->type)!=TYPE_dbl &&
			     getTailType(mb->var[getArg(p,0)]->type)!=TYPE_lng &&
			     getTailType(mb->var[getArg(p,0)]->type)!=TYPE_flt &&
			     getTailType(mb->var[getArg(p,0)]->type)!=TYPE_sht &&
			     getTailType(mb->var[getArg(p,0)]->type)!=TYPE_chr ) 
				
				continue;
				
        		if (mb->var[getArg(p,0)]->props == 0)
                		mb->var[getArg(p,0)]->props = newPropertySet();
			setProperty(mb->var[getArg(p,0)]->props,"canBeCracked","=", TYPE_int, &i);
		}
		if (match2(p, sqlRef, bindRef)){  
				/* add a property can be cracked to every base relation */

			if ( getTailType(mb->var[getArg(p,0)]->type)!=TYPE_int &&
			     getTailType(mb->var[getArg(p,0)]->type)!=TYPE_dbl &&
			     getTailType(mb->var[getArg(p,0)]->type)!=TYPE_lng &&
			     getTailType(mb->var[getArg(p,0)]->type)!=TYPE_flt &&
			     getTailType(mb->var[getArg(p,0)]->type)!=TYPE_sht &&
			     getTailType(mb->var[getArg(p,0)]->type)!=TYPE_chr ) 
				
				continue;
			if (mb->var[getArg(p,4)]->value.val.ival != 0 ) continue;		
        		if (mb->var[getArg(p,0)]->props == 0)
                		mb->var[getArg(p,0)]->props = newPropertySet();
			setProperty(mb->var[getArg(p,0)]->props,"canBeCracked","=", TYPE_int, &i);
		}
		if (match2(p, batRef, setWriteModeRef)){ /* propagete the canBeCracked property */

			if(fndProperty(mb->var[getArg(p,1)]->props,"canBeCracked")){
        			if (mb->var[getArg(p,0)]->props == 0)
                			mb->var[getArg(p,0)]->props = newPropertySet();
				setProperty(mb->var[getArg(p,0)]->props,"canBeCracked","=", TYPE_int, &i);
			}
		}
		if (match2(p, algebraRef, selectRef)){ /* replace the algebra select with the crackers instruction iff the operation is on a base relation */

			if(fndProperty(mb->var[getArg(p,1)]->props,"canBeCracked")){

	        	        setModuleId(p,putName("crackers",8));
			}
		}
		if (match2(p, algebraRef, uselectRef)){ /* replace the algebra uselect with the crackers instruction iff the operation is on a base relation */

                        if(fndProperty(mb->var[getArg(p,1)]->props,"canBeCracked")){

                                setModuleId(p,putName("crackers",8));
                        }
                }

		if (p == pci) 
			removeInstruction(mb, p);

	}
	optimizerCheck(mb, "optimizer.crack", 1, GDKusec() - clk);	
	return MAL_SUCCEED;
}
@- Optimizer code wrapper
@c
mal_export str QOTCRKoptimizer(MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
str QOTCRKoptimizer(MalBlkPtr mb, MalStkPtr stk, InstrPtr p){
	str	modnme;
	str	fcnnme;
	Module  scope=NULL;
	Symbol s= NULL;
	Client c= MCgetClient();
	lng clk= GDKusec();

	/* handle the empty argument list */
	if( p->argc== 1){
		/* setLifespan(mb); they should do it themselves*/
		optimizerInit();
		CRKoptimizer(mb, stk, p);
		optimizerCheck(mb,"crack",1,GDKusec()-clk);
		removeInstruction(mb, p);
		return MAL_SUCCEED;
	}
	if( stk != 0){
		modnme= (str)getArgValue(stk,p,1);
		fcnnme= (str)getArgValue(stk,p,2);
	} else {
		modnme= getArgDefault(mb,p,1);
		fcnnme= getArgDefault(mb,p,2);
	}
	scope = findModule(c->nspace,putName(modnme,strlen(modnme)) );
	if( scope)
		s= findSymbolInModule(scope,putName(fcnnme,strlen(fcnnme)));

	if( s == NULL) {
		char buf[1024];
		snprintf(buf,1024, "Could not find %s.%s\n",modnme,fcnnme);
		return throwMessage("optimizer.crack",buf);
	}
	
	if( s->def->errors == 0){
		optimizerInit();
		CRKoptimizer(s->def,0,0);
		optimizerCheck(s->def,"crack",1,GDKusec()-clk);
	}
	removeInstruction(mb, p);
	return MAL_SUCCEED;
}
@}
