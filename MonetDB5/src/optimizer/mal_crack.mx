@' The contents of this file are subject to the MonetDB Public
@' License Version 1.0 (the "License"); you may not use this file
@' except in compliance with the License. You may obtain a copy of
@' the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.0.html
@'
@' Software distributed under the License is distributed on an "AS
@' IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
@' implied. See the License for the specific language governing
@' rights and limitations under the License.
@'
@' The Original Code is the Monet Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@f mal_crack
@a S.Idreos


@h
#ifndef _MAL_CRACK_
#define _MAL_CRACK_
#include "mal_optimizer.h"

#define DEBUG_MAL_CRACK

opt_export str CRKoptimizer(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);

#endif


@c  
#include "mal_crack.h"
#include "mal_namespace.h"
#include "mal_interpreter.h"	/* for showErrors() */

#define match(X,M,F) ( (X) && getFunctionId(X) && strcmp(getFunctionId(X),F)==0 && \
	getModuleId(X) && strcmp(getModuleId(X),M)==0)

/* find all algebra select structions in a mal block mb and change them to the corresponding crackers command
    */
str
CRKoptimizer(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	InstrPtr p, *old;
	int i, limit;

	lng clk = GDKusec();

	if( mb->errors) 
		return MAL_SUCCEED;

#ifdef DEBUG_MAL_CRACK
	printf("Crack optimizer started\n");
#endif
	(void) stk;
	(void) pci;
	
	limit = mb->stop;
	old = mb->stmt;
	
	for (i = 0; i < limit; i++) {
		p = old[i];
#ifdef DEBUG_MAL_CRACK
		printf("limit is at: %d and i is at: %d  ", limit, i);
	        printInstruction(GDKout, mb, p, LIST_MAL_ALL);	
#endif
		/* find and replace algebra select commands with crack select ones*/

		if (match(p, "sql", "bind")){  /* add a property can be cracked to every base relation */
        		if (mb->var[getArg(p,0)]->props == 0)
                		mb->var[getArg(p,0)]->props = newPropertySet();
			setProperty(mb->var[getArg(p,0)]->props,"CanBeCracked","=", TYPE_int, &i);
		}
		if (match(p, "algebra", "select")){ /* replace the algebra select with the crackers instruction iff the operation is on a base relation */

#ifdef DEBUG_MAL_CRACK
			printf("\n found one at %d \n", i);
#endif
			if(fndProperty(mb->var[getArg(p,1)]->props,"CanBeCracked")){

#ifdef DEBUG_MAL_CRACK
				printf("property value is: %d",* (int*) getPropertyValue(mb->var[getArg(p,1)]->props,"CanBeCracked"));
#endif
	        	        setModuleId(p,putName("crackers",8));
				setFunctionId(p,putName("crackTwoScans",13));
			}
#ifdef DEBUG_MAL_CRACK
			else printf("did not do the replacement\n");
#endif
		}
		if (match(p, "optimizer", "crack")) removeInstruction(mb, p);

	}
	optimizerCheck(mb, "mal.crack", 1, GDKusec() - clk);	
	return MAL_SUCCEED;
}
