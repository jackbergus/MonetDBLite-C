@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2007 CWI.
@' All Rights Reserved.

@f opt_evaluate
@a M. Kersten
@- Constant Expression Evaluation
Expressions produced by compilers involving only constant
arguments can be evaluated once. It is particular relevant
in functions that are repeatably called. One time queries
would not benefit from this extra step.

Consider the following snippet, which contains recursive
use of constant arguments
@verbatim
    a:= 1+1;        io.print(a);
    b:= 2;           io.print(b);
    c:= 3*b;        io.print(c);
    d:= calc.flt(c);io.print(d);
    e:= mmath.sin(d);io.print(e);
    optimizer.aliasRemoval();
    optimizer.evaluate();
@end verbatim
The code produced by the optimizer would be
@verbatim
    io.print(2);
    io.print(2);
    io.print(6);
    io.print(6);
    io.print(-0.279415488);
@end verbatim
@{
@mal
pattern optimizer.evaluate():str
address OPTevaluate;
pattern optimizer.evaluate(mod:str, fcn:str):str
address OPTevaluate
comment "Evaluate constant expressions once.";

@h
#ifndef _OPT_CX_
#define _OPT_CX_
#include "mal_stack.h"
#include "mal_interpreter.h"	/* for showErrors() */
#include "opt_prelude.h"
#include "opt_support.h"

/* #define DEBUG_OPT_CX  */
@c  
#include "mal_config.h"
#include "opt_evaluate.h"
#include "opt_aliases.h"

static int
OPTallConstant(MalBlkPtr mb, InstrPtr p){
	int i;

	for( i= p->retc; i < p->argc; i++)
		if( isVarConstant(mb, getArg(p,i)) == FALSE)
			return FALSE;
	for( i=0; i<p->retc; i++)
		if( isaBatType(getArgType(mb,p,i)))
			return FALSE;
	return ( getModuleId(p) == calcRef || 
			 getModuleId(p) == strRef ||
			 getModuleId(p) == mmathRef);
}
static int
OPTevaluateImplementation(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	InstrPtr p;
	int first=0, nxt, i, j, k, limit, done=0, again=0;
	Client c= MCgetClient();
	MalStkPtr env = NULL;
	str msg;
	int debugstate= c->itrace;
	Lifespan span= newLifespan(mb);

	c->itrace= 0;
	(void) stk;
	(void) pci;

	if (varGetProp(mb, getArg(mb->stmt[0], 0), inlineProp) != NULL)
		return 0;

#ifdef DEBUG_OPT_CX
	stream_printf(GDKout,"Constant expression optimizer started\n");
#endif
	
	env= prepareMALstack(mb);
	env->keepAlive= TRUE;
	do {
		setLifespan(mb,span);
		again = 0;
		limit = mb->stop;
		nxt= first;
		for (k=i= first ; i < limit; i++) {
			p = getInstrPtr(mb,i);
			j = OPTallConstant(mb,p);
			if (j && nxt == first) nxt=i;
#ifdef DEBUG_OPT_CX
			stream_printf(GDKout,"Constants:%d\n",j);
			stream_printf(GDKout,"retc %d var %s\n",p->retc,getVarName(mb,getArg(p,0)));
			stream_printf(GDKout,"last update:%d\n", getLastUpdate(span,getArg(p,0)));
			printInstruction(GDKout, mb, p, LIST_MAL_ALL);	
#endif
			if( j && p->retc== 1 && p->barrier == 0 &&
				getLastUpdate(span,getArg(p,0)) == i  &&
				!isUnsafeFunction(p)){
				msg = reenterMAL(c,mb,i,i+1,env,0,0);
#ifdef DEBUG_OPT_CX
				stream_printf(GDKout,"result:%s\n",msg==MAL_SUCCEED?"ok":msg);
#endif
				if (msg == MAL_SUCCEED){
@-
The last assignment of a constant expression turns the variable into
a constant itself.
@c
					setVarConstant(mb,getArg(p,0));
					clrVarCleanup(mb,getArg(p,0));
					setVarFixed(mb,getArg(p,0));
					getVarConstant(mb,getArg(p,0)) = env->stk[getArg(p,0)];
					env->stk[getArg(p,0)].vtype= TYPE_int; /* no garbage */
					freeInstruction(p);
#ifdef DEBUG_OPT_CX
					stream_printf(GDKout,"Evaluated new constant=%d\n",getArg(p,0));
#endif
					done++;
					again++;
				} else {
					GDKfree(msg);
					mb->stmt[k++]=p;
				}
			} else {
				mb->stmt[k++]=p;
			}
			/* make sure we don't have instructions twice */
			if (k <= i)
				mb->stmt[i] = NULL;
		}
		mb->stop= k;
		first = nxt;
	} while( again );
	GDKfree(span);
	freeStack(env);
	c->itrace= debugstate;
	return 1;
}
@include optimizerWrapper.mx
@h
@:exportOptimizer(evaluate)@
#endif
@c
#include "opt_statistics.h"
@:wrapOptimizer(evaluate,OPT_CHECK_ALL)@
@}

