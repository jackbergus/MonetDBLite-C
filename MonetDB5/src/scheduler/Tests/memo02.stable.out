stdout of test 'memo02` in directory 'src/scheduler` itself:


# 22:34:44 >  
# 22:34:44 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=32539 --set xrpc_port=46725 --set monet_prompt= --trace --dbname=mTests_src_scheduler  memo02.mal < /dev/null
# 22:34:44 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_scheduler
# Visit http://monetdb.cwi.nl/ for further information
## The first memo driven execution
## use a generic cost function
#
#	A:= bat.new(:int,:int);
#	bat.insert(A,1,1);
#	B:= bat.copy(A);
#	bat.insert(B,2,2);
#	C:= bat.copy(B);
#	bat.insert(C,3,3);
#	D:= bat.copy(C);
#	bat.insert(D,3,3);
#
#	scheduler.choice("scheduler.volumeCost",T1,T2,T3);
#	T1:= algebra.join(A,B);
#	T2:= algebra.join(B,C);
#	T3:= algebra.join(C,D);
#	scheduler.choice("scheduler.volumeCost",T4,T5,T6,T7,T8);
#	T4:= algebra.join(T1,C);
#	T5:= algebra.join(A,T2);
#	T6:= algebra.join(T2,D);
#	T7:= algebra.join(B,T3);
#	T8:= algebra.join(C,D);
#	scheduler.choice("scheduler.volumeCost",T9,T10,T11,T12,T13);
#	T9:= algebra.join(T4,D);
#	T10:= algebra.join(T5,D);
#	T11:= algebra.join(A,T6);
#	T12:= algebra.join(A,T7);
#	T13:= algebra.join(T1,T8);
#	scheduler.choice("getVolume",T9,T10,T11,T12,T13);
#	answer:= scheduler.pick(T9,T10,T11,T12,T13);
#	io.print(answer);
#
function user.main():void;	# 0  (main:void)
# The first memo driven execution 	# 1  (_1:str)
# use a generic cost function 	# 2  (_2:str)
    A := bat.new(:int,:int);	# 3 CMDBATnew (A:bat[:int,:int])<-(_4:int)(_4:int)
    bat.insert(A,1,1);	# 4 BKCinsert_bun (_5:void)<-(A:bat[:int,:int])(_6:int)(_6:int)
    B := algebra.copy(A);	# 5 ALGcopy (B:bat[:int,:int])<-(A:bat[:int,:int])
    bat.setWriteMode(B);	# 6 BKCsetWriteMode (_8:bat[:int,:int])<-(B:bat[:int,:int])
    bat.insert(B,2,2);	# 7 BKCinsert_bun (_9:void)<-(B:bat[:int,:int])(_10:int)(_10:int)
    C := algebra.copy(B);	# 8 ALGcopy (C:bat[:int,:int])<-(B:bat[:int,:int])
    bat.setWriteMode(C);	# 9 BKCsetWriteMode (_12:bat[:int,:int])<-(C:bat[:int,:int])
    bat.insert(C,3,3);	# 10 BKCinsert_bun (_13:void)<-(C:bat[:int,:int])(_14:int)(_14:int)
    D := algebra.copy(C);	# 11 ALGcopy (D:bat[:int,:int])<-(C:bat[:int,:int])
    bat.setWriteMode(D);	# 12 BKCsetWriteMode (_16:bat[:int,:int])<-(D:bat[:int,:int])
    bat.insert(D,3,3);	# 13 BKCinsert_bun (_17:void)<-(D:bat[:int,:int])(_14:int)(_14:int)
    scheduler.choice();	# 14 RUNchoice (_18:void)
    T1 := algebra.join(A,B);	# 15 ALGjoin (T1:bat[:int,:int])<-(A:bat[:int,:int])(B:bat[:int,:int])
    T2 := algebra.join(B,C);	# 16 ALGjoin (T2:bat[:int,:int])<-(B:bat[:int,:int])(C:bat[:int,:int])
    T3 := algebra.join(C,D);	# 17 ALGjoin (T3:bat[:int,:int])<-(C:bat[:int,:int])(D:bat[:int,:int])
    scheduler.choice("getVolume",T1,T2,T3);	# 18 RUNchoice (_22:void)<-(_23:str)(T1:bat[:int,:int])(T2:bat[:int,:int])(T3:bat[:int,:int])
    T4 := algebra.join(T1,C);	# 19 ALGjoin (T4:bat[:int,:int])<-(T1:bat[:int,:int])(C:bat[:int,:int])
    T5 := algebra.join(A,T2);	# 20 ALGjoin (T5:bat[:int,:int])<-(A:bat[:int,:int])(T2:bat[:int,:int])
    T6 := algebra.join(T2,D);	# 21 ALGjoin (T6:bat[:int,:int])<-(T2:bat[:int,:int])(D:bat[:int,:int])
    T7 := algebra.join(B,T3);	# 22 ALGjoin (T7:bat[:int,:int])<-(B:bat[:int,:int])(T3:bat[:int,:int])
    T8 := algebra.join(C,D);	# 23 ALGjoin (T8:bat[:int,:int])<-(C:bat[:int,:int])(D:bat[:int,:int])
    scheduler.choice("getVolume",T4,T5,T6,T7,T8);	# 24 RUNchoice (_29:void)<-(_23:str)(T4:bat[:int,:int])(T5:bat[:int,:int])(T6:bat[:int,:int])(T7:bat[:int,:int])(T8:bat[:int,:int])
    T9 := algebra.join(T4,D);	# 25 ALGjoin (T9:bat[:int,:int])<-(T4:bat[:int,:int])(D:bat[:int,:int])
    T10 := algebra.join(T5,D);	# 26 ALGjoin (T10:bat[:int,:int])<-(T5:bat[:int,:int])(D:bat[:int,:int])
    T11 := algebra.join(A,T6);	# 27 ALGjoin (T11:bat[:int,:int])<-(A:bat[:int,:int])(T6:bat[:int,:int])
    T12 := algebra.join(A,T7);	# 28 ALGjoin (T12:bat[:int,:int])<-(A:bat[:int,:int])(T7:bat[:int,:int])
    T13 := algebra.join(T1,T8);	# 29 ALGjoin (T13:bat[:int,:int])<-(T1:bat[:int,:int])(T8:bat[:int,:int])
    scheduler.choice("getVolume",T9,T10,T11,T12,T13);	# 30 RUNchoice (_35:void)<-(_23:str)(T9:bat[:int,:int])(T10:bat[:int,:int])(T11:bat[:int,:int])(T12:bat[:int,:int])(T13:bat[:int,:int])
    answer := scheduler.pick(T9,T10,T11,T12,T13);	# 31 RUNpickResult (answer:bat[:int,:int])<-(T9:bat[:int,:int])(T10:bat[:int,:int])(T11:bat[:int,:int])(T12:bat[:int,:int])(T13:bat[:int,:int])
    io.print(answer);	# 32 IOprint_val (_37:void)<-(answer:bat[:int,:int])
end main;	# 33  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]

# 22:34:44 >  
# 22:34:44 >  Done.
# 22:34:44 >  

