@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2007 CWI.
@' All Rights Reserved.

@f mal_isolation
@a M. Kersten
@+ Run isolation
Run isolation involves making available a private copy of the MAL
block being executed for further massaging, e.g. code replacements
or flow-of-control adjustments.
These changes should be confined to a single execution. The next time around
there may be a different situation to take care off. This is achieved by
replacing the current program with a private copy.

The easiest way is to duplicate the MAL program and assign the old
version to its history. This way any reference to individual instructions
remain valid and the result of the schedule action can be inspected
with the debugger.
Its lifetime then is identical to that of the main program call.

The first example create a private copy, leaving out the scheduler call.
@example
function f();
	i{runonce, rows>4}:=1;	# just properties
    mdb.list();
    io.print("start running\n");
    scheduler.isolation();
    io.print("done\n");
    mdb.list();
end f;
f(); #shows self-modification in action
@end example
This function with its history remain available as long as f()
is defined.
@{
@mal
module scheduler;
pattern isolation():void
address RUNisolation
comment "Run a private copy of the MAL program";
@h
#ifndef _RUN_ISOLATION
#define _RUN_ISOLATION
#include "mal.h"
#include "mal_instruction.h"
#include "mal_client.h"

#define DEBUG_RUN_ISOLATION

#ifdef WIN32
#ifndef LIBRUN_ISOLATION
#define sched_export extern __declspec(dllimport)
#else
#define sched_export extern __declspec(dllexport)
#endif
#else
#define sched_export extern
#endif

sched_export str RUNisolation(MalBlkPtr mb, MalStkPtr stk, InstrPtr p);
#endif /* MAL_RUN_ISOLATION */

@+ Isolation implementation
@c
#include "mal_config.h"
#include "mal_isolation.h"

str
RUNisolation(MalBlkPtr mb, MalStkPtr stk, InstrPtr p)
{
	(void) stk;
	addtoMalBlkHistory(mb);
	removeInstruction(mb, p);
	return MAL_SUCCEED;
}
@}
