#The simpliest throughput experiment consists
# of a single receptor, a identify transformation,
# and a single emitter.

include sql;
include datacell;

datacell.open();

datacell.receptor("ping","localhost", 6000);
datacell.define("ping","event",:int);
datacell.putPicture("ping","http://www.cwi.nl/~mk/datacell/images/ball.jpg");

datacell.emitter("pong","localhost", 6001);
datacell.define("pong","event",:int);
datacell.putPicture("pong","http://www.cwi.nl/~mk/datacell/images/ball.jpg");

datacell.dump();

datacell.pump("bat","sql","insert into pong select * from ping;");
datacell.putPicture("bat","http://www.cwi.nl/~mk/datacell/images/bat.jpg");
#g:= datacell.compiler("insert into pong select * from ping;");
#io.print(g);
#mdb.showFunction("user",g);

s:= datacell.getSource("bat");
io.print(s);
t:= datacell.getSink("bat");
io.print(t);

#manually fill the receptor private buffer with a single element
# it should be transported to the emitter
# beware that bindReceptor ensures you deal with the public part
pub:bat[:void,:timestamp] := datacell.bindReceptor("ping","stamp");
z := mtime.current_timestamp();
bat.insert(pub,nil,z);
io.print(pub);
public:bat[:void,:int] := datacell.bindReceptor("ping","event");
bat.insert(public,nil,3);
io.print(public);

datacell.startPump("ping");
datacell.startPump("bat");
datacell.startPump("pong");
datacell.startScheduler(100); # 100 microseconds delay

#(publ,priv) := datacell.bindEmitter("pong","event");
#io.print(publ);
#io.print(priv);

mapi.listen();
#datacell.close();
