stdout of test 'sql01` in directory 'src/compiler` itself:


# 10:43:14 >  
# 10:43:14 >  Mtimeout -timeout 60  mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/dblogs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=32803 --set xrpc_port=43201 --set monet_prompt= --trace --dbname=mTests_src_compiler  sql01.mal
# 10:43:14 >  







# MonetDB server v5.3.0, based on kernel v1.21.0
# Serving database 'mTests_src_compiler'
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2007 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://gio.ins.cwi.nl:32803/
#include sql;
##sql.compiler("sql01","select * from tables;");
#include mal_compiler;
##include sql;
#module sql;
#function sql.bind(d:str,t:str,a:str,i:int):bat[:any_1,:any_2];
#	bind:= nil;
#	return bind;
#end bind;
function sql.bind(d:str,t:str,a:str,i:int):bat[:any_1,:any_2];	# 0  dynamic (bind:bat[:any_1,:any_2])<-(d:str)(t:str)(a:str)(i:int)
    bind := nil;	# 1  (bind:bat[:any_1,:any_2])<-(_6:BAT)
    return bind;	# 2  (bind:bat[:any_1,:any_2])
end bind;	# 3  
##sql.compiler("sql01","select * from tables;");
#function sql.qry():void;
#    T1:bat[:oid,:int]{notnil=true,rows=0:lng,bid=113}  := sql.bind("tmp","Ttables","id",0);
#    constraints.emptySet(T1);
#    T10:bat[:oid,:sht]{notnil=true,rows=0:lng,bid=117}  := sql.bind("tmp","Ttables","type",0);
#    T13:bat[:oid,:int]{notnil=true,rows=30:lng,bid=67}  := sql.bind("sys","Ttables","id",0);
#    T15:bat[:oid,:int]{notnil=true,rows=0:lng,bid=307}  := sql.bind("sys","Ttables","id",1);
#    constraints.emptySet(T15);
#    T15:bat[:oid,:int]{notnil=true,rows=0:lng,bid=307}  := nil;
#    T16:bat[:oid,:int]{notnil=true,rows=0:lng,bid=309}  := sql.bind("sys","Ttables","id",2);
#    constraints.emptySet(T16);
#    T16:bat[:oid,:int]{notnil=true,rows=0:lng,bid=309}  := nil;
#    T20:bat[:oid,:sht]{notnil=true,rows=30:lng,bid=71}  := sql.bind("sys","Ttables","type",0);
#    T39:bat[:oid,:str]{notnil=true,rows=0:lng,bid=114}  := sql.bind("tmp","Ttables","name",0);
#    T42:bat[:oid,:str]{notnil=true,rows=30:lng,bid=68}  := sql.bind("sys","Ttables","name",0);
#    T47:bat[:oid,:int]{notnil=true,rows=0:lng,bid=115}  := sql.bind("tmp","Ttables","schemaTid",0);
#    T50:bat[:oid,:int]{notnil=true,rows=30:lng,bid=69}  := sql.bind("sys","Ttables","schemaTid",0);
#    T55:bat[:oid,:str]{notnil=true,rows=0:lng,bid=116}  := sql.bind("tmp","Ttables","query",0);
#    T58:bat[:oid,:str]{notnil=true,rows=30:lng,bid=70}  := sql.bind("sys","Ttables","query",0);
#    T64:bat[:oid,:bit]{notnil=true,rows=0:lng,bid=118}  := sql.bind("tmp","Ttables","system",0);
#    T67:bat[:oid,:bit]{notnil=true,rows=30:lng,bid=72}  := sql.bind("sys","Ttables","system",0);
#    T72:bat[:oid,:sht]{notnil=true,rows=0:lng,bid=119}  := sql.bind("tmp","Ttables","commitTaction",0);
#    T75:bat[:oid,:sht]{notnil=true,rows=30:lng,bid=73}  := sql.bind("sys","Ttables","commitTaction",0);
#    T8{rows=0:lng} := algebra.markT(T1,0@0);
#    T9{rows=0:lng} := bat.reverse(T8);
#    T8{rows=0:lng} := nil;
#    T12{rows=0:lng} := algebra.join(T9,T10);
#    T10:bat[:oid,:sht]{notnil=true,rows=0:lng,bid=117}  := nil;
#    T18{rows=30:lng} := algebra.markT(T13,0@0);
#    T19{rows=30:lng} := bat.reverse(T18);
#    T18{rows=30:lng} := nil;
#    T21{rows=30:lng} := algebra.join(T19,T20);
#    T20:bat[:oid,:sht]{notnil=true,rows=30:lng,bid=71}  := nil;
#    T22{rows=31:lng} := bat.setWriteMode(T21);
#    T21{rows=30:lng} := nil;
#    bat.append(T22,T12,true);
#    T12{rows=0:lng} := nil;
#    T26{rows=31:lng} := algebra.uselect(T22,nil:sht,2:sht,false,false);
#    T29{rows=31:lng} := algebra.markT(T26,0@0);
#    T26{rows=31:lng} := nil;
#    T30{rows=31:lng} := bat.reverse(T29);
#    T29{rows=31:lng} := nil;
#    T31{rows=0:lng} := algebra.join(T9,T1);
#    T1:bat[:oid,:int]{notnil=true,rows=0:lng,bid=113}  := nil;
#    T32{rows=30:lng} := algebra.join(T19,T13);
#    T13:bat[:oid,:int]{notnil=true,rows=30:lng,bid=67}  := nil;
#    T33{rows=31:lng} := bat.setWriteMode(T32);
#    T32{rows=30:lng} := nil;
#    bat.append(T33,T31,true);
#    T31{rows=0:lng} := nil;
#    T35{rows=31:lng} := algebra.join(T30,T33);
#    T36{rows=31:lng} := algebra.markT(T35,0@0);
#    T35{rows=31:lng} := nil;
#    T37{rows=31:lng} := bat.reverse(T36);
#    T36{rows=31:lng} := nil;
#    T38{rows=31:lng} := algebra.joinPath(T37,T30,T33);
#    T33{rows=31:lng} := nil;
#    T41{rows=0:lng} := algebra.join(T9,T39);
#    T39:bat[:oid,:str]{notnil=true,rows=0:lng,bid=114}  := nil;
#    T43{rows=30:lng} := algebra.join(T19,T42);
#    T42:bat[:oid,:str]{notnil=true,rows=30:lng,bid=68}  := nil;
#    T44{rows=31:lng} := bat.setWriteMode(T43);
#    T43{rows=30:lng} := nil;
#    bat.append(T44,T41,true);
#    T41{rows=0:lng} := nil;
#    T46{rows=31:lng} := algebra.joinPath(T37,T30,T44);
#    T44{rows=31:lng} := nil;
#    T49{rows=0:lng} := algebra.join(T9,T47);
#    T47:bat[:oid,:int]{notnil=true,rows=0:lng,bid=115}  := nil;
#    T51{rows=30:lng} := algebra.join(T19,T50);
#    T50:bat[:oid,:int]{notnil=true,rows=30:lng,bid=69}  := nil;
#    T52{rows=31:lng} := bat.setWriteMode(T51);
#    T51{rows=30:lng} := nil;
#    bat.append(T52,T49,true);
#    T49{rows=0:lng} := nil;
#    T54{rows=31:lng} := algebra.joinPath(T37,T30,T52);
#    T52{rows=31:lng} := nil;
#    T57{rows=0:lng} := algebra.join(T9,T55);
#    T55:bat[:oid,:str]{notnil=true,rows=0:lng,bid=116}  := nil;
#    T59{rows=30:lng} := algebra.join(T19,T58);
#    T58:bat[:oid,:str]{notnil=true,rows=30:lng,bid=70}  := nil;
#    T60{rows=31:lng} := bat.setWriteMode(T59);
#    T59{rows=30:lng} := nil;
#    bat.append(T60,T57,true);
#    T57{rows=0:lng} := nil;
#    T62{rows=31:lng} := algebra.joinPath(T37,T30,T60);
#    T60{rows=31:lng} := nil;
#    T63{rows=31:lng} := algebra.joinPath(T37,T30,T22);
#    T22{rows=31:lng} := nil;
#    T66{rows=0:lng} := algebra.join(T9,T64);
#    T64:bat[:oid,:bit]{notnil=true,rows=0:lng,bid=118}  := nil;
#    T68{rows=30:lng} := algebra.join(T19,T67);
#    T67:bat[:oid,:bit]{notnil=true,rows=30:lng,bid=72}  := nil;
#    T69{rows=31:lng} := bat.setWriteMode(T68);
#    T68{rows=30:lng} := nil;
#    bat.append(T69,T66,true);
#    T66{rows=0:lng} := nil;
#    T71{rows=31:lng} := algebra.joinPath(T37,T30,T69);
#    T69{rows=31:lng} := nil;
#    T74{rows=0:lng} := algebra.join(T9,T72);
#    T72:bat[:oid,:sht]{notnil=true,rows=0:lng,bid=119}  := nil;
#    T76{rows=30:lng} := algebra.join(T19,T75);
#    T75:bat[:oid,:sht]{notnil=true,rows=30:lng,bid=73}  := nil;
#    T77{rows=31:lng} := bat.setWriteMode(T76);
#    T76{rows=30:lng} := nil;
#    bat.append(T77,T74,true);
#    T74{rows=0:lng} := nil;
#    T79{rows=31:lng} := algebra.joinPath(T37,T30,T77);
#    T77{rows=31:lng} := nil;
#    T81{rows=0:lng} := algebra.project(T9,1);
#    T9{rows=0:lng} := nil;
#    T83{rows=30:lng} := algebra.project(T19,0);
#    T19{rows=30:lng} := nil;
#    T84{rows=31:lng} := bat.setWriteMode(T83);
#    T83{rows=30:lng} := nil;
#    bat.append(T84,T81,true);
#    T81{rows=0:lng} := nil;
#    T86{rows=31:lng} := algebra.joinPath(T37,T30,T84);
#    T37{rows=31:lng} := nil;
#    T30{rows=31:lng} := nil;
#    T84{rows=31:lng} := nil;
#    T87 := sql.resultSet(8,1,T38);
#    sql.rsColumn(T87,"sys.tables","id","int",32,0,T38);
#    T38{rows=31:lng} := nil;
#    sql.rsColumn(T87,"sys.tables","name","varchar",1024,0,T46);
#    T46{rows=31:lng} := nil;
#    sql.rsColumn(T87,"sys.tables","schemaTid","int",32,0,T54);
#    T54{rows=31:lng} := nil;
#    sql.rsColumn(T87,"sys.tables","query","varchar",2048,0,T62);
#    T62{rows=31:lng} := nil;
#    sql.rsColumn(T87,"sys.tables","type","smallint",16,0,T63);
#    T63{rows=31:lng} := nil;
#    sql.rsColumn(T87,"sys.tables","system","boolean",1,0,T71);
#    T71{rows=31:lng} := nil;
#    sql.rsColumn(T87,"sys.tables","commitTaction","smallint",16,0,T79);
#    T79{rows=31:lng} := nil;
#    sql.rsColumn(T87,"sys.tables","temporary","tinyint",8,0,T86);
#    T86{rows=31:lng} := nil;
#    sql.exportResult(T87,"");
#end qry;
function sql.qry():void;	# 0  (qry:void)
    T1:bat[:oid,:int]{bid=113,rows=0:lng,notnil=true}  := sql.bind("tmp","Ttables","id",0);	# 1  (T1:bat[:oid,:int])<-(_2:str)(_3:str)(_4:str)(_5:int)
    constraints.emptySet(T1);	# 2 CemptySet (_6:void)<-(T1:bat[:oid,:int])
    T10:bat[:oid,:sht]{bid=117,rows=0:lng,notnil=true}  := sql.bind("tmp","Ttables","type",0);	# 3  (T10:bat[:oid,:sht])<-(_2:str)(_3:str)(_8:str)(_5:int)
    T13:bat[:oid,:int]{bid=67,rows=30:lng,notnil=true}  := sql.bind("sys","Ttables","id",0);	# 4  (T13:bat[:oid,:int])<-(_10:str)(_3:str)(_4:str)(_5:int)
    T15:bat[:oid,:int]{bid=307,rows=0:lng,notnil=true}  := sql.bind("sys","Ttables","id",1);	# 5  (T15:bat[:oid,:int])<-(_10:str)(_3:str)(_4:str)(_12:int)
    constraints.emptySet(T15);	# 6 CemptySet (_13:void)<-(T15:bat[:oid,:int])
    T15:bat[:oid,:int]{bid=307,rows=0:lng,notnil=true}  := nil;	# 7  (T15:bat[:oid,:int])<-(_94:BAT)
    T16:bat[:oid,:int]{bid=309,rows=0:lng,notnil=true}  := sql.bind("sys","Ttables","id",2);	# 8  (T16:bat[:oid,:int])<-(_10:str)(_3:str)(_4:str)(_16:int)
    constraints.emptySet(T16);	# 9 CemptySet (_17:void)<-(T16:bat[:oid,:int])
    T16:bat[:oid,:int]{bid=309,rows=0:lng,notnil=true}  := nil;	# 10  (T16:bat[:oid,:int])<-(_94:BAT)
    T20:bat[:oid,:sht]{bid=71,rows=30:lng,notnil=true}  := sql.bind("sys","Ttables","type",0);	# 11  (T20:bat[:oid,:sht])<-(_10:str)(_3:str)(_8:str)(_5:int)
    T39:bat[:oid,:str]{bid=114,rows=0:lng,notnil=true}  := sql.bind("tmp","Ttables","name",0);	# 12  (T39:bat[:oid,:str])<-(_2:str)(_3:str)(_20:str)(_5:int)
    T42:bat[:oid,:str]{bid=68,rows=30:lng,notnil=true}  := sql.bind("sys","Ttables","name",0);	# 13  (T42:bat[:oid,:str])<-(_10:str)(_3:str)(_20:str)(_5:int)
    T47:bat[:oid,:int]{bid=115,rows=0:lng,notnil=true}  := sql.bind("tmp","Ttables","schemaTid",0);	# 14  (T47:bat[:oid,:int])<-(_2:str)(_3:str)(_23:str)(_5:int)
    T50:bat[:oid,:int]{bid=69,rows=30:lng,notnil=true}  := sql.bind("sys","Ttables","schemaTid",0);	# 15  (T50:bat[:oid,:int])<-(_10:str)(_3:str)(_23:str)(_5:int)
    T55:bat[:oid,:str]{bid=116,rows=0:lng,notnil=true}  := sql.bind("tmp","Ttables","query",0);	# 16  (T55:bat[:oid,:str])<-(_2:str)(_3:str)(_26:str)(_5:int)
    T58:bat[:oid,:str]{bid=70,rows=30:lng,notnil=true}  := sql.bind("sys","Ttables","query",0);	# 17  (T58:bat[:oid,:str])<-(_10:str)(_3:str)(_26:str)(_5:int)
    T64:bat[:oid,:bit]{bid=118,rows=0:lng,notnil=true}  := sql.bind("tmp","Ttables","system",0);	# 18  (T64:bat[:oid,:bit])<-(_2:str)(_3:str)(_29:str)(_5:int)
    T67:bat[:oid,:bit]{bid=72,rows=30:lng,notnil=true}  := sql.bind("sys","Ttables","system",0);	# 19  (T67:bat[:oid,:bit])<-(_10:str)(_3:str)(_29:str)(_5:int)
    T72:bat[:oid,:sht]{bid=119,rows=0:lng,notnil=true}  := sql.bind("tmp","Ttables","commitTaction",0);	# 20  (T72:bat[:oid,:sht])<-(_2:str)(_3:str)(_32:str)(_5:int)
    T75:bat[:oid,:sht]{bid=73,rows=30:lng,notnil=true}  := sql.bind("sys","Ttables","commitTaction",0);	# 21  (T75:bat[:oid,:sht])<-(_10:str)(_3:str)(_32:str)(_5:int)
    T8{rows=0:lng} := algebra.markT(T1,0@0);	# 22 ALGtmark (T8:bat[:oid,:oid])<-(T1:bat[:oid,:int])(_35:oid)
    T9{rows=0:lng} := bat.reverse(T8);	# 23 BKCreverse (T9:bat[:oid,:oid])<-(T8:bat[:oid,:oid])
    T8{rows=0:lng} := nil;	# 24  (T8:bat[:oid,:oid])<-(_94:BAT)
    T12{rows=0:lng} := algebra.join(T9,T10);	# 25 ALGjoin (T12:bat[:oid,:sht])<-(T9:bat[:oid,:oid])(T10:bat[:oid,:sht])
    T10:bat[:oid,:sht]{bid=117,rows=0:lng,notnil=true}  := nil;	# 26  (T10:bat[:oid,:sht])<-(_94:BAT)
    T18{rows=30:lng} := algebra.markT(T13,0@0);	# 27 ALGtmark (T18:bat[:oid,:oid])<-(T13:bat[:oid,:int])(_35:oid)
    T19{rows=30:lng} := bat.reverse(T18);	# 28 BKCreverse (T19:bat[:oid,:oid])<-(T18:bat[:oid,:oid])
    T18{rows=30:lng} := nil;	# 29  (T18:bat[:oid,:oid])<-(_94:BAT)
    T21{rows=30:lng} := algebra.join(T19,T20);	# 30 ALGjoin (T21:bat[:oid,:sht])<-(T19:bat[:oid,:oid])(T20:bat[:oid,:sht])
    T20:bat[:oid,:sht]{bid=71,rows=30:lng,notnil=true}  := nil;	# 31  (T20:bat[:oid,:sht])<-(_94:BAT)
    T22{rows=31:lng} := bat.setWriteMode(T21);	# 32 BKCsetWriteMode (T22:bat[:oid,:sht])<-(T21:bat[:oid,:sht])
    T21{rows=30:lng} := nil;	# 33  (T21:bat[:oid,:sht])<-(_94:BAT)
    bat.append(T22,T12,true);	# 34 BKCappend_force_wrap (_42:void)<-(T22:bat[:oid,:sht])(T12:bat[:oid,:sht])(_43:bit)
    T12{rows=0:lng} := nil;	# 35  (T12:bat[:oid,:sht])<-(_94:BAT)
    T26{rows=31:lng} := algebra.uselect(T22,nil:sht,2:sht,false,false);	# 36 ALGuselectInclusive (T26:bat[:oid,:oid])<-(T22:bat[:oid,:sht])(_45:sht)(_46:sht)(_47:bit)(_47:bit)
    T29{rows=31:lng} := algebra.markT(T26,0@0);	# 37 ALGtmark (T29:bat[:oid,:oid])<-(T26:bat[:oid,:oid])(_35:oid)
    T26{rows=31:lng} := nil;	# 38  (T26:bat[:oid,:oid])<-(_94:BAT)
    T30{rows=31:lng} := bat.reverse(T29);	# 39 BKCreverse (T30:bat[:oid,:oid])<-(T29:bat[:oid,:oid])
    T29{rows=31:lng} := nil;	# 40  (T29:bat[:oid,:oid])<-(_94:BAT)
    T31{rows=0:lng} := algebra.join(T9,T1);	# 41 ALGjoin (T31:bat[:oid,:int])<-(T9:bat[:oid,:oid])(T1:bat[:oid,:int])
    T1:bat[:oid,:int]{bid=113,rows=0:lng,notnil=true}  := nil;	# 42  (T1:bat[:oid,:int])<-(_94:BAT)
    T32{rows=30:lng} := algebra.join(T19,T13);	# 43 ALGjoin (T32:bat[:oid,:int])<-(T19:bat[:oid,:oid])(T13:bat[:oid,:int])
    T13:bat[:oid,:int]{bid=67,rows=30:lng,notnil=true}  := nil;	# 44  (T13:bat[:oid,:int])<-(_94:BAT)
    T33{rows=31:lng} := bat.setWriteMode(T32);	# 45 BKCsetWriteMode (T33:bat[:oid,:int])<-(T32:bat[:oid,:int])
    T32{rows=30:lng} := nil;	# 46  (T32:bat[:oid,:int])<-(_94:BAT)
    bat.append(T33,T31,true);	# 47 BKCappend_force_wrap (_54:void)<-(T33:bat[:oid,:int])(T31:bat[:oid,:int])(_43:bit)
    T31{rows=0:lng} := nil;	# 48  (T31:bat[:oid,:int])<-(_94:BAT)
    T35{rows=31:lng} := algebra.join(T30,T33);	# 49 ALGjoin (T35:bat[:oid,:int])<-(T30:bat[:oid,:oid])(T33:bat[:oid,:int])
    T36{rows=31:lng} := algebra.markT(T35,0@0);	# 50 ALGtmark (T36:bat[:oid,:oid])<-(T35:bat[:oid,:int])(_35:oid)
    T35{rows=31:lng} := nil;	# 51  (T35:bat[:oid,:int])<-(_94:BAT)
    T37{rows=31:lng} := bat.reverse(T36);	# 52 BKCreverse (T37:bat[:oid,:oid])<-(T36:bat[:oid,:oid])
    T36{rows=31:lng} := nil;	# 53  (T36:bat[:oid,:oid])<-(_94:BAT)
    T38{rows=31:lng} := algebra.joinPath(T37,T30,T33);	# 54 ALGjoinPath (T38:bat[:any,:any])<-(T37:bat[:oid,:oid])(T30:bat[:oid,:oid])(T33:bat[:oid,:int])
    T33{rows=31:lng} := nil;	# 55  (T33:bat[:oid,:int])<-(_94:BAT)
    T41{rows=0:lng} := algebra.join(T9,T39);	# 56 ALGjoin (T41:bat[:oid,:str])<-(T9:bat[:oid,:oid])(T39:bat[:oid,:str])
    T39:bat[:oid,:str]{bid=114,rows=0:lng,notnil=true}  := nil;	# 57  (T39:bat[:oid,:str])<-(_94:BAT)
    T43{rows=30:lng} := algebra.join(T19,T42);	# 58 ALGjoin (T43:bat[:oid,:str])<-(T19:bat[:oid,:oid])(T42:bat[:oid,:str])
    T42:bat[:oid,:str]{bid=68,rows=30:lng,notnil=true}  := nil;	# 59  (T42:bat[:oid,:str])<-(_94:BAT)
    T44{rows=31:lng} := bat.setWriteMode(T43);	# 60 BKCsetWriteMode (T44:bat[:oid,:str])<-(T43:bat[:oid,:str])
    T43{rows=30:lng} := nil;	# 61  (T43:bat[:oid,:str])<-(_94:BAT)
    bat.append(T44,T41,true);	# 62 BKCappend_force_wrap (_62:void)<-(T44:bat[:oid,:str])(T41:bat[:oid,:str])(_43:bit)
    T41{rows=0:lng} := nil;	# 63  (T41:bat[:oid,:str])<-(_94:BAT)
    T46{rows=31:lng} := algebra.joinPath(T37,T30,T44);	# 64 ALGjoinPath (T46:bat[:any,:any])<-(T37:bat[:oid,:oid])(T30:bat[:oid,:oid])(T44:bat[:oid,:str])
    T44{rows=31:lng} := nil;	# 65  (T44:bat[:oid,:str])<-(_94:BAT)
    T49{rows=0:lng} := algebra.join(T9,T47);	# 66 ALGjoin (T49:bat[:oid,:int])<-(T9:bat[:oid,:oid])(T47:bat[:oid,:int])
    T47:bat[:oid,:int]{bid=115,rows=0:lng,notnil=true}  := nil;	# 67  (T47:bat[:oid,:int])<-(_94:BAT)
    T51{rows=30:lng} := algebra.join(T19,T50);	# 68 ALGjoin (T51:bat[:oid,:int])<-(T19:bat[:oid,:oid])(T50:bat[:oid,:int])
    T50:bat[:oid,:int]{bid=69,rows=30:lng,notnil=true}  := nil;	# 69  (T50:bat[:oid,:int])<-(_94:BAT)
    T52{rows=31:lng} := bat.setWriteMode(T51);	# 70 BKCsetWriteMode (T52:bat[:oid,:int])<-(T51:bat[:oid,:int])
    T51{rows=30:lng} := nil;	# 71  (T51:bat[:oid,:int])<-(_94:BAT)
    bat.append(T52,T49,true);	# 72 BKCappend_force_wrap (_67:void)<-(T52:bat[:oid,:int])(T49:bat[:oid,:int])(_43:bit)
    T49{rows=0:lng} := nil;	# 73  (T49:bat[:oid,:int])<-(_94:BAT)
    T54{rows=31:lng} := algebra.joinPath(T37,T30,T52);	# 74 ALGjoinPath (T54:bat[:any,:any])<-(T37:bat[:oid,:oid])(T30:bat[:oid,:oid])(T52:bat[:oid,:int])
    T52{rows=31:lng} := nil;	# 75  (T52:bat[:oid,:int])<-(_94:BAT)
    T57{rows=0:lng} := algebra.join(T9,T55);	# 76 ALGjoin (T57:bat[:oid,:str])<-(T9:bat[:oid,:oid])(T55:bat[:oid,:str])
    T55:bat[:oid,:str]{bid=116,rows=0:lng,notnil=true}  := nil;	# 77  (T55:bat[:oid,:str])<-(_94:BAT)
    T59{rows=30:lng} := algebra.join(T19,T58);	# 78 ALGjoin (T59:bat[:oid,:str])<-(T19:bat[:oid,:oid])(T58:bat[:oid,:str])
    T58:bat[:oid,:str]{bid=70,rows=30:lng,notnil=true}  := nil;	# 79  (T58:bat[:oid,:str])<-(_94:BAT)
    T60{rows=31:lng} := bat.setWriteMode(T59);	# 80 BKCsetWriteMode (T60:bat[:oid,:str])<-(T59:bat[:oid,:str])
    T59{rows=30:lng} := nil;	# 81  (T59:bat[:oid,:str])<-(_94:BAT)
    bat.append(T60,T57,true);	# 82 BKCappend_force_wrap (_72:void)<-(T60:bat[:oid,:str])(T57:bat[:oid,:str])(_43:bit)
    T57{rows=0:lng} := nil;	# 83  (T57:bat[:oid,:str])<-(_94:BAT)
    T62{rows=31:lng} := algebra.joinPath(T37,T30,T60);	# 84 ALGjoinPath (T62:bat[:any,:any])<-(T37:bat[:oid,:oid])(T30:bat[:oid,:oid])(T60:bat[:oid,:str])
    T60{rows=31:lng} := nil;	# 85  (T60:bat[:oid,:str])<-(_94:BAT)
    T63{rows=31:lng} := algebra.joinPath(T37,T30,T22);	# 86 ALGjoinPath (T63:bat[:any,:any])<-(T37:bat[:oid,:oid])(T30:bat[:oid,:oid])(T22:bat[:oid,:sht])
    T22{rows=31:lng} := nil;	# 87  (T22:bat[:oid,:sht])<-(_94:BAT)
    T66{rows=0:lng} := algebra.join(T9,T64);	# 88 ALGjoin (T66:bat[:oid,:bit])<-(T9:bat[:oid,:oid])(T64:bat[:oid,:bit])
    T64:bat[:oid,:bit]{bid=118,rows=0:lng,notnil=true}  := nil;	# 89  (T64:bat[:oid,:bit])<-(_94:BAT)
    T68{rows=30:lng} := algebra.join(T19,T67);	# 90 ALGjoin (T68:bat[:oid,:bit])<-(T19:bat[:oid,:oid])(T67:bat[:oid,:bit])
    T67:bat[:oid,:bit]{bid=72,rows=30:lng,notnil=true}  := nil;	# 91  (T67:bat[:oid,:bit])<-(_94:BAT)
    T69{rows=31:lng} := bat.setWriteMode(T68);	# 92 BKCsetWriteMode (T69:bat[:oid,:bit])<-(T68:bat[:oid,:bit])
    T68{rows=30:lng} := nil;	# 93  (T68:bat[:oid,:bit])<-(_94:BAT)
    bat.append(T69,T66,true);	# 94 BKCappend_force_wrap (_78:void)<-(T69:bat[:oid,:bit])(T66:bat[:oid,:bit])(_79:bit)
    T66{rows=0:lng} := nil;	# 95  (T66:bat[:oid,:bit])<-(_94:BAT)
    T71{rows=31:lng} := algebra.joinPath(T37,T30,T69);	# 96 ALGjoinPath (T71:bat[:any,:any])<-(T37:bat[:oid,:oid])(T30:bat[:oid,:oid])(T69:bat[:oid,:bit])
    T69{rows=31:lng} := nil;	# 97  (T69:bat[:oid,:bit])<-(_94:BAT)
    T74{rows=0:lng} := algebra.join(T9,T72);	# 98 ALGjoin (T74:bat[:oid,:sht])<-(T9:bat[:oid,:oid])(T72:bat[:oid,:sht])
    T72:bat[:oid,:sht]{bid=119,rows=0:lng,notnil=true}  := nil;	# 99  (T72:bat[:oid,:sht])<-(_94:BAT)
    T76{rows=30:lng} := algebra.join(T19,T75);	# 100 ALGjoin (T76:bat[:oid,:sht])<-(T19:bat[:oid,:oid])(T75:bat[:oid,:sht])
    T75:bat[:oid,:sht]{bid=73,rows=30:lng,notnil=true}  := nil;	# 101  (T75:bat[:oid,:sht])<-(_94:BAT)
    T77{rows=31:lng} := bat.setWriteMode(T76);	# 102 BKCsetWriteMode (T77:bat[:oid,:sht])<-(T76:bat[:oid,:sht])
    T76{rows=30:lng} := nil;	# 103  (T76:bat[:oid,:sht])<-(_94:BAT)
    bat.append(T77,T74,true);	# 104 BKCappend_force_wrap (_85:void)<-(T77:bat[:oid,:sht])(T74:bat[:oid,:sht])(_79:bit)
    T74{rows=0:lng} := nil;	# 105  (T74:bat[:oid,:sht])<-(_94:BAT)
    T79{rows=31:lng} := algebra.joinPath(T37,T30,T77);	# 106 ALGjoinPath (T79:bat[:any,:any])<-(T37:bat[:oid,:oid])(T30:bat[:oid,:oid])(T77:bat[:oid,:sht])
    T77{rows=31:lng} := nil;	# 107  (T77:bat[:oid,:sht])<-(_94:BAT)
    T81{rows=0:lng} := algebra.project(T9,1);	# 108 ALGprojectCst (T81:bat[:oid,:int])<-(T9:bat[:oid,:oid])(_88:int)
    T9{rows=0:lng} := nil;	# 109  (T9:bat[:oid,:oid])<-(_94:BAT)
    T83{rows=30:lng} := algebra.project(T19,0);	# 110 ALGprojectCst (T83:bat[:oid,:int])<-(T19:bat[:oid,:oid])(_90:int)
    T19{rows=30:lng} := nil;	# 111  (T19:bat[:oid,:oid])<-(_94:BAT)
    T84{rows=31:lng} := bat.setWriteMode(T83);	# 112 BKCsetWriteMode (T84:bat[:oid,:int])<-(T83:bat[:oid,:int])
    T83{rows=30:lng} := nil;	# 113  (T83:bat[:oid,:int])<-(_94:BAT)
    bat.append(T84,T81,true);	# 114 BKCappend_force_wrap (_92:void)<-(T84:bat[:oid,:int])(T81:bat[:oid,:int])(_79:bit)
    T81{rows=0:lng} := nil;	# 115  (T81:bat[:oid,:int])<-(_94:BAT)
    T86{rows=31:lng} := algebra.joinPath(T37,T30,T84);	# 116 ALGjoinPath (T86:bat[:any,:any])<-(T37:bat[:oid,:oid])(T30:bat[:oid,:oid])(T84:bat[:oid,:int])
    T37{rows=31:lng} := nil;	# 117  (T37:bat[:oid,:oid])<-(_94:BAT)
    T30{rows=31:lng} := nil;	# 118  (T30:bat[:oid,:oid])<-(_94:BAT)
    T84{rows=31:lng} := nil;	# 119  (T84:bat[:oid,:int])<-(_94:BAT)
end qry;	# 120  
#compiler.MALtoC("sql","qry","sql01");
#
function user.main():void;	# 0  (main:void)
#include sql; 	# 1  (_1:str)
#sql.compiler("sql01","select * from tables;"); 	# 2  (_2:str)
    compiler.MALtoC("sql","qry","sql01");	# 3 MCdynamicCompiler (_3:void)<-(_4:str)(_5:str)(_6:str)
end main;	# 4  
# MonetDB/SQL module v2.21.0 loaded
Calling the dynamic compiler
MCdynamicCompiler: sql.qry
!WARNING: call to sql.bind can not be handled correctly
!WARNING: call to sql.bind can not be handled correctly
!WARNING: call to sql.bind can not be handled correctly
!WARNING: call to sql.bind can not be handled correctly
!WARNING: call to sql.bind can not be handled correctly
!WARNING: call to sql.bind can not be handled correctly
!WARNING: call to sql.bind can not be handled correctly
!WARNING: call to sql.bind can not be handled correctly
!WARNING: call to sql.bind can not be handled correctly
!WARNING: call to sql.bind can not be handled correctly
!WARNING: call to sql.bind can not be handled correctly
!WARNING: call to sql.bind can not be handled correctly
!WARNING: call to sql.bind can not be handled correctly
!WARNING: call to sql.bind can not be handled correctly
!WARNING: call to sql.bind can not be handled correctly
!WARNING: call to sql.bind can not be handled correctly
=/* MAL to C compiler
=   Copyright (c) 2001-2007, CWI.
=   All rights reserved.
=*/
=#include "mal_config.h"
=#include "mal.h"
=#include "mal_interpreter.h"
=#include "mal_function.h"
=#define BID int
=str MCCsql_qry(int *qry)
={
=	BID T1= 0; /* bat[:oid,:int] */
=	str V2 = "tmp";
=	str V3 = "Ttables";
=	str V4 = "id";
=	int V5 = 0;
=	void *V6= 0; /* void */
=	BID T10= 0; /* bat[:oid,:sht] */
=	str V8 = "type";
=	BID T13= 0; /* bat[:oid,:int] */
=	str V10 = "sys";
=	BID T15= 0; /* bat[:oid,:int] */
=	int V12 = 1;
=	void *V13= 0; /* void */
=	void *V14= 0; /* void */
=	BID T16= 0; /* bat[:oid,:int] */
=	int V16 = 2;
=	void *V17= 0; /* void */
=	BID T20= 0; /* bat[:oid,:sht] */
=	BID T39= 0; /* bat[:oid,:str] */
=	str V20 = "name";
=	BID T42= 0; /* bat[:oid,:str] */
=	BID T47= 0; /* bat[:oid,:int] */
=	str V23 = "schemaTid";
=	BID T50= 0; /* bat[:oid,:int] */
=	BID T55= 0; /* bat[:oid,:str] */
=	str V26 = "query";
=	BID T58= 0; /* bat[:oid,:str] */
=	BID T64= 0; /* bat[:oid,:bit] */
=	str V29 = "system";
=	BID T67= 0; /* bat[:oid,:bit] */
=	BID T72= 0; /* bat[:oid,:sht] */
=	str V32 = "commitTaction";
=	BID T75= 0; /* bat[:oid,:sht] */
=	BID T8= 0; /* bat[:oid,:oid] */
=	oid V35 = 0;
=	BID T9= 0; /* bat[:oid,:oid] */
=	BID T12= 0; /* bat[:oid,:sht] */
=	BID T18= 0; /* bat[:oid,:oid] */
=	BID T19= 0; /* bat[:oid,:oid] */
=	BID T21= 0; /* bat[:oid,:sht] */
=	BID T22= 0; /* bat[:oid,:sht] */
=	void *V42= 0; /* void */
=	bit V43 = true;
=	BID T26= 0; /* bat[:oid,:oid] */
=	sht V45 = nil;
=	sht V46 = 2;
=	bit V47 = false;
=	BID T29= 0; /* bat[:oid,:oid] */
=	void *V49= 0; /* void */
=	BID T30= 0; /* bat[:oid,:oid] */
=	BID T31= 0; /* bat[:oid,:int] */
=	BID T32= 0; /* bat[:oid,:int] */
=	BID T33= 0; /* bat[:oid,:int] */
=	void *V54= 0; /* void */
=	BID T35= 0; /* bat[:oid,:int] */
=	BID T36= 0; /* bat[:oid,:oid] */
=	BID T37= 0; /* bat[:oid,:oid] */
=	BID T38= 0; /* bat[:any,:any] */
=	BID T41= 0; /* bat[:oid,:str] */
=	BID T43= 0; /* bat[:oid,:str] */
=	BID T44= 0; /* bat[:oid,:str] */
=	void *V62= 0; /* void */
=	BID T46= 0; /* bat[:any,:any] */
=	BID T49= 0; /* bat[:oid,:int] */
=	BID T51= 0; /* bat[:oid,:int] */
=	BID T52= 0; /* bat[:oid,:int] */
=	void *V67= 0; /* void */
=	BID T54= 0; /* bat[:any,:any] */
=	BID T57= 0; /* bat[:oid,:str] */
=	BID T59= 0; /* bat[:oid,:str] */
=	BID T60= 0; /* bat[:oid,:str] */
=	void *V72= 0; /* void */
=	BID T62= 0; /* bat[:any,:any] */
=	BID T63= 0; /* bat[:any,:any] */
=	BID T66= 0; /* bat[:oid,:bit] */
=	BID T68= 0; /* bat[:oid,:bit] */
=	BID T69= 0; /* bat[:oid,:bit] */
=	void *V78= 0; /* void */
=	bit V79 = true;
=	BID T71= 0; /* bat[:any,:any] */
=	BID T74= 0; /* bat[:oid,:sht] */
=	void *V82= 0; /* void */
=	BID T76= 0; /* bat[:oid,:sht] */
=	BID T77= 0; /* bat[:oid,:sht] */
=	void *V85= 0; /* void */
=	BID T79= 0; /* bat[:any,:any] */
=	BID T81= 0; /* bat[:oid,:int] */
=	int V88 = 1;
=	BID T83= 0; /* bat[:oid,:int] */
=	int V90 = 0;
=	BID T84= 0; /* bat[:oid,:int] */
=	void *V92= 0; /* void */
=	BID T86= 0; /* bat[:any,:any] */
=	BAT V94 = nil;
=	str Xmsg = MAL_SUCCEED;
=	BID *backup= (BID*) alloca(8 * sizeof(BID));
=	char **sbackup= (char **) alloca(8 * sizeof(char *));
=	backup[0]=T1;
=	if(backup[0] == T1) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	if( Xmsg = CemptySet(&V6,&T1) ) goto wrapup;
=	backup[0]=T10;
=	if(backup[0] == T10) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T13;
=	if(backup[0] == T13) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T15;
=	if(backup[0] == T15) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	if( Xmsg = CemptySet(&V13,&T15) ) goto wrapup;
=	backup[0]=T15;
=T15 = T15;
=	if(backup[0] == T15) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T16;
=	if(backup[0] == T16) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	if( Xmsg = CemptySet(&V17,&T16) ) goto wrapup;
=	backup[0]=T16;
=T16 = T16;
=	if(backup[0] == T16) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T20;
=	if(backup[0] == T20) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T39;
=	if(backup[0] == T39) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T42;
=	if(backup[0] == T42) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T47;
=	if(backup[0] == T47) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T50;
=	if(backup[0] == T50) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T55;
=	if(backup[0] == T55) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T58;
=	if(backup[0] == T58) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T64;
=	if(backup[0] == T64) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T67;
=	if(backup[0] == T67) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T72;
=	if(backup[0] == T72) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T75;
=	if(backup[0] == T75) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T8;
=	if( Xmsg = ALGtmark(&T8,&T1,&V35) ) goto wrapup;
=	if(backup[0] == T8) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T9;
=	if( Xmsg = BKCreverse(&T9,&T8) ) goto wrapup;
=	if(backup[0] == T9) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T8;
=T8 = T8;
=	if(backup[0] == T8) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T12;
=	if( Xmsg = ALGjoin(&T12,&T9,&T10) ) goto wrapup;
=	if(backup[0] == T12) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T10;
=T10 = T10;
=	if(backup[0] == T10) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T18;
=	if( Xmsg = ALGtmark(&T18,&T13,&V35) ) goto wrapup;
=	if(backup[0] == T18) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T19;
=	if( Xmsg = BKCreverse(&T19,&T18) ) goto wrapup;
=	if(backup[0] == T19) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T18;
=T18 = T18;
=	if(backup[0] == T18) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T21;
=	if( Xmsg = ALGjoin(&T21,&T19,&T20) ) goto wrapup;
=	if(backup[0] == T21) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T20;
=T20 = T20;
=	if(backup[0] == T20) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T22;
=	if( Xmsg = BKCsetWriteMode(&T22,&T21) ) goto wrapup;
=	if(backup[0] == T22) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T21;
=T21 = T21;
=	if(backup[0] == T21) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	if( Xmsg = BKCappend_force_wrap(&V42,&T22,&T12,&V43) ) goto wrapup;
=	backup[0]=T12;
=T12 = T12;
=	if(backup[0] == T12) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T26;
=	if( Xmsg = ALGuselectInclusive(&T26,&T22,&V45,&V46,&V47,&V47) ) goto wrapup;
=	if(backup[0] == T26) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T29;
=	if( Xmsg = ALGtmark(&T29,&T26,&V35) ) goto wrapup;
=	if(backup[0] == T29) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T26;
=T26 = T26;
=	if(backup[0] == T26) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T30;
=	if( Xmsg = BKCreverse(&T30,&T29) ) goto wrapup;
=	if(backup[0] == T30) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T29;
=T29 = T29;
=	if(backup[0] == T29) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T31;
=	if( Xmsg = ALGjoin(&T31,&T9,&T1) ) goto wrapup;
=	if(backup[0] == T31) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T1;
=T1 = T1;
=	if(backup[0] == T1) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T32;
=	if( Xmsg = ALGjoin(&T32,&T19,&T13) ) goto wrapup;
=	if(backup[0] == T32) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T13;
=T13 = T13;
=	if(backup[0] == T13) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T33;
=	if( Xmsg = BKCsetWriteMode(&T33,&T32) ) goto wrapup;
=	if(backup[0] == T33) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T32;
=T32 = T32;
=	if(backup[0] == T32) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	if( Xmsg = BKCappend_force_wrap(&V54,&T33,&T31,&V43) ) goto wrapup;
=	backup[0]=T31;
=T31 = T31;
=	if(backup[0] == T31) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T35;
=	if( Xmsg = ALGjoin(&T35,&T30,&T33) ) goto wrapup;
=	if(backup[0] == T35) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T36;
=	if( Xmsg = ALGtmark(&T36,&T35,&V35) ) goto wrapup;
=	if(backup[0] == T36) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T35;
=T35 = T35;
=	if(backup[0] == T35) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T37;
=	if( Xmsg = BKCreverse(&T37,&T36) ) goto wrapup;
=	if(backup[0] == T37) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T36;
=T36 = T36;
=	if(backup[0] == T36) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	{ BID *j58[]={&T37,&T30,&T33};	T38= ALGjoinPathBody(3,&j58); };
=	backup[0]=T33;
=T33 = T33;
=	if(backup[0] == T33) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T41;
=	if( Xmsg = ALGjoin(&T41,&T9,&T39) ) goto wrapup;
=	if(backup[0] == T41) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T39;
=T39 = T39;
=	if(backup[0] == T39) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T43;
=	if( Xmsg = ALGjoin(&T43,&T19,&T42) ) goto wrapup;
=	if(backup[0] == T43) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T42;
=T42 = T42;
=	if(backup[0] == T42) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T44;
=	if( Xmsg = BKCsetWriteMode(&T44,&T43) ) goto wrapup;
=	if(backup[0] == T44) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T43;
=T43 = T43;
=	if(backup[0] == T43) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	if( Xmsg = BKCappend_force_wrap(&V62,&T44,&T41,&V43) ) goto wrapup;
=	backup[0]=T41;
=T41 = T41;
=	if(backup[0] == T41) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	{ BID *j63[]={&T37,&T30,&T44};	T46= ALGjoinPathBody(3,&j63); };
=	backup[0]=T44;
=T44 = T44;
=	if(backup[0] == T44) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T49;
=	if( Xmsg = ALGjoin(&T49,&T9,&T47) ) goto wrapup;
=	if(backup[0] == T49) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T47;
=T47 = T47;
=	if(backup[0] == T47) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T51;
=	if( Xmsg = ALGjoin(&T51,&T19,&T50) ) goto wrapup;
=	if(backup[0] == T51) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T50;
=T50 = T50;
=	if(backup[0] == T50) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T52;
=	if( Xmsg = BKCsetWriteMode(&T52,&T51) ) goto wrapup;
=	if(backup[0] == T52) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T51;
=T51 = T51;
=	if(backup[0] == T51) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	if( Xmsg = BKCappend_force_wrap(&V67,&T52,&T49,&V43) ) goto wrapup;
=	backup[0]=T49;
=T49 = T49;
=	if(backup[0] == T49) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	{ BID *j68[]={&T37,&T30,&T52};	T54= ALGjoinPathBody(3,&j68); };
=	backup[0]=T52;
=T52 = T52;
=	if(backup[0] == T52) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T57;
=	if( Xmsg = ALGjoin(&T57,&T9,&T55) ) goto wrapup;
=	if(backup[0] == T57) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T55;
=T55 = T55;
=	if(backup[0] == T55) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T59;
=	if( Xmsg = ALGjoin(&T59,&T19,&T58) ) goto wrapup;
=	if(backup[0] == T59) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T58;
=T58 = T58;
=	if(backup[0] == T58) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T60;
=	if( Xmsg = BKCsetWriteMode(&T60,&T59) ) goto wrapup;
=	if(backup[0] == T60) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T59;
=T59 = T59;
=	if(backup[0] == T59) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	if( Xmsg = BKCappend_force_wrap(&V72,&T60,&T57,&V43) ) goto wrapup;
=	backup[0]=T57;
=T57 = T57;
=	if(backup[0] == T57) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	{ BID *j73[]={&T37,&T30,&T60};	T62= ALGjoinPathBody(3,&j73); };
=	backup[0]=T60;
=T60 = T60;
=	if(backup[0] == T60) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	{ BID *j74[]={&T37,&T30,&T22};	T63= ALGjoinPathBody(3,&j74); };
=	backup[0]=T22;
=T22 = T22;
=	if(backup[0] == T22) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T66;
=	if( Xmsg = ALGjoin(&T66,&T9,&T64) ) goto wrapup;
=	if(backup[0] == T66) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T64;
=T64 = T64;
=	if(backup[0] == T64) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T68;
=	if( Xmsg = ALGjoin(&T68,&T19,&T67) ) goto wrapup;
=	if(backup[0] == T68) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T67;
=T67 = T67;
=	if(backup[0] == T67) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T69;
=	if( Xmsg = BKCsetWriteMode(&T69,&T68) ) goto wrapup;
=	if(backup[0] == T69) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T68;
=T68 = T68;
=	if(backup[0] == T68) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	if( Xmsg = BKCappend_force_wrap(&V78,&T69,&T66,&V79) ) goto wrapup;
=	backup[0]=T66;
=T66 = T66;
=	if(backup[0] == T66) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	{ BID *j80[]={&T37,&T30,&T69};	T71= ALGjoinPathBody(3,&j80); };
=	backup[0]=T69;
=T69 = T69;
=	if(backup[0] == T69) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T74;
=	if( Xmsg = ALGjoin(&T74,&T9,&T72) ) goto wrapup;
=	if(backup[0] == T74) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T72;
=T72 = T72;
=	if(backup[0] == T72) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T76;
=	if( Xmsg = ALGjoin(&T76,&T19,&T75) ) goto wrapup;
=	if(backup[0] == T76) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T75;
=T75 = T75;
=	if(backup[0] == T75) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T77;
=	if( Xmsg = BKCsetWriteMode(&T77,&T76) ) goto wrapup;
=	if(backup[0] == T77) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T76;
=T76 = T76;
=	if(backup[0] == T76) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	if( Xmsg = BKCappend_force_wrap(&V85,&T77,&T74,&V79) ) goto wrapup;
=	backup[0]=T74;
=T74 = T74;
=	if(backup[0] == T74) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	{ BID *j86[]={&T37,&T30,&T77};	T79= ALGjoinPathBody(3,&j86); };
=	backup[0]=T77;
=T77 = T77;
=	if(backup[0] == T77) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	if( Xmsg = ALGprojectCstBody(&T81,&T9,&V88,6) ) goto wrapup;
=	backup[0]=T9;
=T9 = T9;
=	if(backup[0] == T9) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	if( Xmsg = ALGprojectCstBody(&T83,&T19,&V90,6) ) goto wrapup;
=	backup[0]=T19;
=T19 = T19;
=	if(backup[0] == T19) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T84;
=	if( Xmsg = BKCsetWriteMode(&T84,&T83) ) goto wrapup;
=	if(backup[0] == T84) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T83;
=T83 = T83;
=	if(backup[0] == T83) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	if( Xmsg = BKCappend_force_wrap(&V92,&T84,&T81,&V79) ) goto wrapup;
=	backup[0]=T81;
=T81 = T81;
=	if(backup[0] == T81) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	{ BID *j93[]={&T37,&T30,&T84};	T86= ALGjoinPathBody(3,&j93); };
=	backup[0]=T37;
=T37 = T37;
=	if(backup[0] == T37) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T30;
=T30 = T30;
=	if(backup[0] == T30) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=	backup[0]=T84;
=T84 = T84;
=	if(backup[0] == T84) BBPreleaseref(backup[0]);
=	else BBPdecref(backup[0],TRUE);
=wrapup:;
=	if( T1&& BBP_lrefs(T1) ) BBPdecref(T1,TRUE);
=	if(V2) GDKfree(V2);
=	if(V3) GDKfree(V3);
=	if(V4) GDKfree(V4);
=	if( T10&& BBP_lrefs(T10) ) BBPdecref(T10,TRUE);
=	if(V8) GDKfree(V8);
=	if( T13&& BBP_lrefs(T13) ) BBPdecref(T13,TRUE);
=	if(V10) GDKfree(V10);
=	if( T15&& BBP_lrefs(T15) ) BBPdecref(T15,TRUE);
=	if( T16&& BBP_lrefs(T16) ) BBPdecref(T16,TRUE);
=	if( T20&& BBP_lrefs(T20) ) BBPdecref(T20,TRUE);
=	if( T39&& BBP_lrefs(T39) ) BBPdecref(T39,TRUE);
=	if(V20) GDKfree(V20);
=	if( T42&& BBP_lrefs(T42) ) BBPdecref(T42,TRUE);
=	if( T47&& BBP_lrefs(T47) ) BBPdecref(T47,TRUE);
=	if(V23) GDKfree(V23);
=	if( T50&& BBP_lrefs(T50) ) BBPdecref(T50,TRUE);
=	if( T55&& BBP_lrefs(T55) ) BBPdecref(T55,TRUE);
=	if(V26) GDKfree(V26);
=	if( T58&& BBP_lrefs(T58) ) BBPdecref(T58,TRUE);
=	if( T64&& BBP_lrefs(T64) ) BBPdecref(T64,TRUE);
=	if(V29) GDKfree(V29);
=	if( T67&& BBP_lrefs(T67) ) BBPdecref(T67,TRUE);
=	if( T72&& BBP_lrefs(T72) ) BBPdecref(T72,TRUE);
=	if(V32) GDKfree(V32);
=	if( T75&& BBP_lrefs(T75) ) BBPdecref(T75,TRUE);
=	if( T8&& BBP_lrefs(T8) ) BBPdecref(T8,TRUE);
=	if( T9&& BBP_lrefs(T9) ) BBPdecref(T9,TRUE);
=	if( T12&& BBP_lrefs(T12) ) BBPdecref(T12,TRUE);
=	if( T18&& BBP_lrefs(T18) ) BBPdecref(T18,TRUE);
=	if( T19&& BBP_lrefs(T19) ) BBPdecref(T19,TRUE);
=	if( T21&& BBP_lrefs(T21) ) BBPdecref(T21,TRUE);
=	if( T22&& BBP_lrefs(T22) ) BBPdecref(T22,TRUE);
=	if( T26&& BBP_lrefs(T26) ) BBPdecref(T26,TRUE);
=	if( T29&& BBP_lrefs(T29) ) BBPdecref(T29,TRUE);
=	if( T30&& BBP_lrefs(T30) ) BBPdecref(T30,TRUE);
=	if( T31&& BBP_lrefs(T31) ) BBPdecref(T31,TRUE);
=	if( T32&& BBP_lrefs(T32) ) BBPdecref(T32,TRUE);
=	if( T33&& BBP_lrefs(T33) ) BBPdecref(T33,TRUE);
=	if( T35&& BBP_lrefs(T35) ) BBPdecref(T35,TRUE);
=	if( T36&& BBP_lrefs(T36) ) BBPdecref(T36,TRUE);
=	if( T37&& BBP_lrefs(T37) ) BBPdecref(T37,TRUE);
=	if( T38&& BBP_lrefs(T38) ) BBPdecref(T38,TRUE);
=	if( T41&& BBP_lrefs(T41) ) BBPdecref(T41,TRUE);
=	if( T43&& BBP_lrefs(T43) ) BBPdecref(T43,TRUE);
=	if( T44&& BBP_lrefs(T44) ) BBPdecref(T44,TRUE);
=	if( T46&& BBP_lrefs(T46) ) BBPdecref(T46,TRUE);
=	if( T49&& BBP_lrefs(T49) ) BBPdecref(T49,TRUE);
=	if( T51&& BBP_lrefs(T51) ) BBPdecref(T51,TRUE);
=	if( T52&& BBP_lrefs(T52) ) BBPdecref(T52,TRUE);
=	if( T54&& BBP_lrefs(T54) ) BBPdecref(T54,TRUE);
=	if( T57&& BBP_lrefs(T57) ) BBPdecref(T57,TRUE);
=	if( T59&& BBP_lrefs(T59) ) BBPdecref(T59,TRUE);
=	if( T60&& BBP_lrefs(T60) ) BBPdecref(T60,TRUE);
=	if( T62&& BBP_lrefs(T62) ) BBPdecref(T62,TRUE);
=	if( T63&& BBP_lrefs(T63) ) BBPdecref(T63,TRUE);
=	if( T66&& BBP_lrefs(T66) ) BBPdecref(T66,TRUE);
=	if( T68&& BBP_lrefs(T68) ) BBPdecref(T68,TRUE);
=	if( T69&& BBP_lrefs(T69) ) BBPdecref(T69,TRUE);
=	if( T71&& BBP_lrefs(T71) ) BBPdecref(T71,TRUE);
=	if( T74&& BBP_lrefs(T74) ) BBPdecref(T74,TRUE);
=	if( T76&& BBP_lrefs(T76) ) BBPdecref(T76,TRUE);
=	if( T77&& BBP_lrefs(T77) ) BBPdecref(T77,TRUE);
=	if( T79&& BBP_lrefs(T79) ) BBPdecref(T79,TRUE);
=	if( T81&& BBP_lrefs(T81) ) BBPdecref(T81,TRUE);
=	if( T83&& BBP_lrefs(T83) ) BBPdecref(T83,TRUE);
=	if( T84&& BBP_lrefs(T84) ) BBPdecref(T84,TRUE);
=	if( T86&& BBP_lrefs(T86) ) BBPdecref(T86,TRUE);
=}
=
# 22:07:26 >  
# 22:07:26 >  Done.
# 22:07:26 >  

