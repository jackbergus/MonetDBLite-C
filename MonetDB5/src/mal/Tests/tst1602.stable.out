stdout of test 'tst1602` in directory 'src/mal` itself:


# 07:59:09 >  
# 07:59:09 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst1602.mal </dev/null
# 07:59:09 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
#	int_1M:= new(:void,:lng,1000000);
#	setSequenceBase(int_1M,0@0);
#
#	i:= 1000000:lng;
#barrier	sj_a:= true;
#	i:= i-1;
#	uj_a := i;
#	vj_a := >=(uj_a,0);
#barrier	tj_a:= vj_a;
#	xj_a := insert(int_1M,nil,i);
#redo	sj_a;
#exit	tj_a;
#exit	sj_a;
#
#        t := alarm.time();
#        ug_a := reverse(int_1M);
#        vg_a := join(int_1M,ug_a);
#        wg_a := count(vg_a);
#        xg_a := printf("#count %d = ",wg_a);
#        x:= alarm.time();
#        yg_a := -(x,t);                                                                ah_a := printf("%d ms\n",yg_a);
#
#
#        t := alarm.time();
#        ug_a := reverse(int_1M);
#        vg_a := join(int_1M,ug_a);
#        wg_a := count(vg_a);
#        xg_a := printf("#count %d = ",wg_a);
#        x:= alarm.time();
#        yg_a := -(x,t);                                                                ah_a := printf("%d ms\n",yg_a);
#
#        t := alarm.time();
#        ug_a := reverse(int_1M);
#        vg_a := join(int_1M,ug_a);
#        wg_a := count(vg_a);
#        xg_a := printf("#count %d = ",wg_a);
#        x:= alarm.time();
#        yg_a := -(x,t);                                                                ah_a := printf("%d ms\n",yg_a);
#
#
#        t := alarm.time();
#        ug_a := reverse(int_1M);
#        vg_a := join(int_1M,ug_a);
#        wg_a := count(vg_a);
#        xg_a := printf("#count %d = ",wg_a);
#        x:= alarm.time();
#        yg_a := -(x,t);                                                                ah_a := printf("%d ms\n",yg_a);
#
#	M2:= new(:lng,:lng,1000000);
#	i:= 1000000:lng;
#barrier	sj_b:= true;
#	i:= i-1;
#	uj_b := i;
#	vj_b := >=(uj_b,0);
#barrier	tj_b:= vj_b;
#	xj_b := insert(M2,i,i);
#redo	sj_b;
#exit	tj_b;
#exit	sj_b;
#
#        t := alarm.time();
#        ug_b := reverse(M2);
#        vg_b := join(M2,ug_b);
#        wg_b := count(vg_b);
#        xg_b := printf("#count %d = ",wg_b);
#        x:= alarm.time();
#        yg_b := -(x,t);                                                                ah_b := printf("%d ms\n",yg_b);
#
#
#        t := alarm.time();
#        ug_b := reverse(M2);
#        vg_b := join(M2,ug_b);
#        wg_b := count(vg_b);
#        xg_b := printf("#count %d = ",wg_b);
#        x:= alarm.time();
#        yg_b := -(x,t);                                                                ah_b := printf("%d ms\n",yg_b);
#
#        t := alarm.time();
#        ug_b := reverse(M2);
#        vg_b := join(M2,ug_b);
#        wg_b := count(vg_b);
#        xg_b := printf("#count %d = ",wg_b);
#        x:= alarm.time();
#        yg_b := -(x,t);                                                                ah_b := printf("%d ms\n",yg_b);
#
#
#        t := alarm.time();
#        ug_b := reverse(M2);
#        vg_b := join(M2,ug_b);
#        wg_b := count(vg_b);
#        xg_b := printf("#count %d = ",wg_b);
#        x:= alarm.time();
#        yg_b := -(x,t);                                                                ah_b := printf("%d ms\n",yg_b);
#
#
function user.main():int;	# 0  (main:int)
    int_1M := bbp.new(:void,:lng,1000000);	# 1 CMDBATnew (int_1M:bat[:void,:lng])<-(_2:void)(_3:lng)(_4:int)
    bat.setSequenceBase(int_1M,0@0);	# 2 BKCsetSequenceBase (_5:bat[:void,:lng])<-(int_1M:bat[:void,:lng])(_6:oid)
    i := 1000000:lng;	# 3  (i:lng)<-(_8:lng)
barrier sj_a := true;	# 4  (sj_a:bit)<-(_10:bit) jump 12
    i := calc.-(i,1);	# 5 CALCbinarySUBlngint (i:lng)<-(i:lng)(_11:int)
    uj_a := i;	# 6  (uj_a:lng)<-(i:lng)
    vj_a := calc.>=(uj_a,0);	# 7 CALCcompGElngint (vj_a:bit)<-(uj_a:lng)(_14:int)
barrier tj_a := vj_a;	# 8  (tj_a:bit)<-(vj_a:bit) jump 11
    xj_a := bat.insert(int_1M,nil,i);	# 9 BKCinsert_bun (xj_a:bat[:void,:lng])<-(int_1M:bat[:void,:lng])(_17:void)(i:lng)
    redo sj_a;	# 10  (sj_a:bit) jump 5
exit tj_a;	# 11  (tj_a:bit)
exit sj_a;	# 12  (sj_a:bit)
    t := alarm.time();	# 13 ALARMtime (t:int)
    ug_a := bat.reverse(int_1M);	# 14 BKCreverse (ug_a:bat[:lng,:void])<-(int_1M:bat[:void,:lng])
    vg_a := algebra.join(int_1M,ug_a);	# 15 ALGjoin (vg_a:bat[:void,:oid])<-(int_1M:bat[:void,:lng])(ug_a:bat[:lng,:void])
    wg_a := algebra.count(vg_a);	# 16 ALGcount_bat (wg_a:lng)<-(vg_a:bat[:void,:oid])
    xg_a := io.printf("#count %d = ",wg_a);	# 17 IOprint_formatted_lng (xg_a:int)<-(_23:str)(wg_a:lng)
    x := alarm.time();	# 18 ALARMtime (x:int)
    yg_a := calc.-(x,t);	# 19 CALCbinarySUBintint (yg_a:int)<-(x:int)(t:int)
    ah_a := io.printf("%d ms\n",yg_a);	# 20 IOprint_formatted_int (ah_a:int)<-(_27:str)(yg_a:int)
    t := alarm.time();	# 21 ALARMtime (t:int)
    ug_a := bat.reverse(int_1M);	# 22 BKCreverse (ug_a:bat[:lng,:void])<-(int_1M:bat[:void,:lng])
    vg_a := algebra.join(int_1M,ug_a);	# 23 ALGjoin (vg_a:bat[:void,:oid])<-(int_1M:bat[:void,:lng])(ug_a:bat[:lng,:void])
    wg_a := algebra.count(vg_a);	# 24 ALGcount_bat (wg_a:lng)<-(vg_a:bat[:void,:oid])
    xg_a := io.printf("#count %d = ",wg_a);	# 25 IOprint_formatted_lng (xg_a:int)<-(_23:str)(wg_a:lng)
    x := alarm.time();	# 26 ALARMtime (x:int)
    yg_a := calc.-(x,t);	# 27 CALCbinarySUBintint (yg_a:int)<-(x:int)(t:int)
    ah_a := io.printf("%d ms\n",yg_a);	# 28 IOprint_formatted_int (ah_a:int)<-(_27:str)(yg_a:int)
    t := alarm.time();	# 29 ALARMtime (t:int)
    ug_a := bat.reverse(int_1M);	# 30 BKCreverse (ug_a:bat[:lng,:void])<-(int_1M:bat[:void,:lng])
    vg_a := algebra.join(int_1M,ug_a);	# 31 ALGjoin (vg_a:bat[:void,:oid])<-(int_1M:bat[:void,:lng])(ug_a:bat[:lng,:void])
    wg_a := algebra.count(vg_a);	# 32 ALGcount_bat (wg_a:lng)<-(vg_a:bat[:void,:oid])
    xg_a := io.printf("#count %d = ",wg_a);	# 33 IOprint_formatted_lng (xg_a:int)<-(_23:str)(wg_a:lng)
    x := alarm.time();	# 34 ALARMtime (x:int)
    yg_a := calc.-(x,t);	# 35 CALCbinarySUBintint (yg_a:int)<-(x:int)(t:int)
    ah_a := io.printf("%d ms\n",yg_a);	# 36 IOprint_formatted_int (ah_a:int)<-(_27:str)(yg_a:int)
    t := alarm.time();	# 37 ALARMtime (t:int)
    ug_a := bat.reverse(int_1M);	# 38 BKCreverse (ug_a:bat[:lng,:void])<-(int_1M:bat[:void,:lng])
    vg_a := algebra.join(int_1M,ug_a);	# 39 ALGjoin (vg_a:bat[:void,:oid])<-(int_1M:bat[:void,:lng])(ug_a:bat[:lng,:void])
    wg_a := algebra.count(vg_a);	# 40 ALGcount_bat (wg_a:lng)<-(vg_a:bat[:void,:oid])
    xg_a := io.printf("#count %d = ",wg_a);	# 41 IOprint_formatted_lng (xg_a:int)<-(_23:str)(wg_a:lng)
    x := alarm.time();	# 42 ALARMtime (x:int)
    yg_a := calc.-(x,t);	# 43 CALCbinarySUBintint (yg_a:int)<-(x:int)(t:int)
    ah_a := io.printf("%d ms\n",yg_a);	# 44 IOprint_formatted_int (ah_a:int)<-(_27:str)(yg_a:int)
    M2 := bbp.new(:lng,:lng,1000000);	# 45 CMDBATnewint (M2:bat[:lng,:lng])<-(_29:lng)(_29:lng)(_4:int)
    i := 1000000:lng;	# 46  (i:lng)<-(_8:lng)
barrier sj_b := true;	# 47  (sj_b:bit)<-(_10:bit) jump 55
    i := calc.-(i,1);	# 48 CALCbinarySUBlngint (i:lng)<-(i:lng)(_11:int)
    uj_b := i;	# 49  (uj_b:lng)<-(i:lng)
    vj_b := calc.>=(uj_b,0);	# 50 CALCcompGElngint (vj_b:bit)<-(uj_b:lng)(_14:int)
barrier tj_b := vj_b;	# 51  (tj_b:bit)<-(vj_b:bit) jump 54
    xj_b := bat.insert(M2,i,i);	# 52 BKCinsert_bun (xj_b:bat[:lng,:lng])<-(M2:bat[:lng,:lng])(i:lng)(i:lng)
    redo sj_b;	# 53  (sj_b:bit) jump 48
exit tj_b;	# 54  (tj_b:bit)
exit sj_b;	# 55  (sj_b:bit)
    t := alarm.time();	# 56 ALARMtime (t:int)
    ug_b := bat.reverse(M2);	# 57 BKCreverse (ug_b:bat[:lng,:lng])<-(M2:bat[:lng,:lng])
    vg_b := algebra.join(M2,ug_b);	# 58 ALGjoin (vg_b:bat[:lng,:lng])<-(M2:bat[:lng,:lng])(ug_b:bat[:lng,:lng])
    wg_b := algebra.count(vg_b);	# 59 ALGcount_bat (wg_b:lng)<-(vg_b:bat[:lng,:lng])
    xg_b := io.printf("#count %d = ",wg_b);	# 60 IOprint_formatted_lng (xg_b:int)<-(_23:str)(wg_b:lng)
    x := alarm.time();	# 61 ALARMtime (x:int)
    yg_b := calc.-(x,t);	# 62 CALCbinarySUBintint (yg_b:int)<-(x:int)(t:int)
    ah_b := io.printf("%d ms\n",yg_b);	# 63 IOprint_formatted_int (ah_b:int)<-(_27:str)(yg_b:int)
    t := alarm.time();	# 64 ALARMtime (t:int)
    ug_b := bat.reverse(M2);	# 65 BKCreverse (ug_b:bat[:lng,:lng])<-(M2:bat[:lng,:lng])
    vg_b := algebra.join(M2,ug_b);	# 66 ALGjoin (vg_b:bat[:lng,:lng])<-(M2:bat[:lng,:lng])(ug_b:bat[:lng,:lng])
    wg_b := algebra.count(vg_b);	# 67 ALGcount_bat (wg_b:lng)<-(vg_b:bat[:lng,:lng])
    xg_b := io.printf("#count %d = ",wg_b);	# 68 IOprint_formatted_lng (xg_b:int)<-(_23:str)(wg_b:lng)
    x := alarm.time();	# 69 ALARMtime (x:int)
    yg_b := calc.-(x,t);	# 70 CALCbinarySUBintint (yg_b:int)<-(x:int)(t:int)
    ah_b := io.printf("%d ms\n",yg_b);	# 71 IOprint_formatted_int (ah_b:int)<-(_27:str)(yg_b:int)
    t := alarm.time();	# 72 ALARMtime (t:int)
    ug_b := bat.reverse(M2);	# 73 BKCreverse (ug_b:bat[:lng,:lng])<-(M2:bat[:lng,:lng])
    vg_b := algebra.join(M2,ug_b);	# 74 ALGjoin (vg_b:bat[:lng,:lng])<-(M2:bat[:lng,:lng])(ug_b:bat[:lng,:lng])
    wg_b := algebra.count(vg_b);	# 75 ALGcount_bat (wg_b:lng)<-(vg_b:bat[:lng,:lng])
    xg_b := io.printf("#count %d = ",wg_b);	# 76 IOprint_formatted_lng (xg_b:int)<-(_23:str)(wg_b:lng)
    x := alarm.time();	# 77 ALARMtime (x:int)
    yg_b := calc.-(x,t);	# 78 CALCbinarySUBintint (yg_b:int)<-(x:int)(t:int)
    ah_b := io.printf("%d ms\n",yg_b);	# 79 IOprint_formatted_int (ah_b:int)<-(_27:str)(yg_b:int)
    t := alarm.time();	# 80 ALARMtime (t:int)
    ug_b := bat.reverse(M2);	# 81 BKCreverse (ug_b:bat[:lng,:lng])<-(M2:bat[:lng,:lng])
    vg_b := algebra.join(M2,ug_b);	# 82 ALGjoin (vg_b:bat[:lng,:lng])<-(M2:bat[:lng,:lng])(ug_b:bat[:lng,:lng])
    wg_b := algebra.count(vg_b);	# 83 ALGcount_bat (wg_b:lng)<-(vg_b:bat[:lng,:lng])
    xg_b := io.printf("#count %d = ",wg_b);	# 84 IOprint_formatted_lng (xg_b:int)<-(_23:str)(wg_b:lng)
    x := alarm.time();	# 85 ALARMtime (x:int)
    yg_b := calc.-(x,t);	# 86 CALCbinarySUBintint (yg_b:int)<-(x:int)(t:int)
    ah_b := io.printf("%d ms\n",yg_b);	# 87 IOprint_formatted_int (ah_b:int)<-(_27:str)(yg_b:int)
end main;	# 88  
#count 1000000 = 297 ms
#count 1000000 = 226 ms
#count 1000000 = 228 ms
#count 1000000 = 225 ms
#count 1000000 = 314 ms
#count 1000000 = 226 ms
#count 1000000 = 230 ms
#count 1000000 = 230 ms

# 07:59:13 >  
# 07:59:13 >  Done.
# 07:59:13 >  

