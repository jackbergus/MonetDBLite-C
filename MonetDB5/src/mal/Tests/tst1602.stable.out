stdout of test 'tst1602` in directory 'src/mal` itself:


# 07:59:09 >  
# 07:59:09 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst1602.mal </dev/null
# 07:59:09 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
#	int_1M:= new(:void,:lng,1000000);
#	setSequenceBase(int_1M,0@0);
#
#	i:= 1000000:lng;
#barrier	sj_a:= true;
#	i:= i-1;
#	uj_a := i;
#	vj_a := >=(uj_a,0);
#barrier	tj_a:= vj_a;
#	xj_a := insert(int_1M,nil,i);
#redo	sj_a;
#exit	tj_a;
#exit	sj_a;
#
#        t := alarm.time();
#        ug_a := reverse(int_1M);
#        vg_a := join(int_1M,ug_a);
#        wg_a := count(vg_a);
#        xg_a := printf("#count %d = ",wg_a);
#        x:= alarm.time();
#        yg_a := -(x,t);                                                                ah_a := printf("%d ms\n",yg_a);
#
#
#        t := alarm.time();
#        ug_a := reverse(int_1M);
#        vg_a := join(int_1M,ug_a);
#        wg_a := count(vg_a);
#        xg_a := printf("#count %d = ",wg_a);
#        x:= alarm.time();
#        yg_a := -(x,t);                                                                ah_a := printf("%d ms\n",yg_a);
#
#        t := alarm.time();
#        ug_a := reverse(int_1M);
#        vg_a := join(int_1M,ug_a);
#        wg_a := count(vg_a);
#        xg_a := printf("#count %d = ",wg_a);
#        x:= alarm.time();
#        yg_a := -(x,t);                                                                ah_a := printf("%d ms\n",yg_a);
#
#
#        t := alarm.time();
#        ug_a := reverse(int_1M);
#        vg_a := join(int_1M,ug_a);
#        wg_a := count(vg_a);
#        xg_a := printf("#count %d = ",wg_a);
#        x:= alarm.time();
#        yg_a := -(x,t);                                                                ah_a := printf("%d ms\n",yg_a);
#
#	M2:= new(:lng,:lng,1000000);
#	i:= 1000000:lng;
#barrier	sj_b:= true;
#	i:= i-1;
#	uj_b := i;
#	vj_b := >=(uj_b,0);
#barrier	tj_b:= vj_b;
#	xj_b := insert(M2,i,i);
#redo	sj_b;
#exit	tj_b;
#exit	sj_b;
#
#        t := alarm.time();
#        ug_b := bat.reverse(M2);
#        vg_b := algebra.join(M2,ug_b);
#        wg_b := aggr.count(vg_b);
#        xg_b := io.printf("#count %d = ",wg_b);
#        x:= alarm.time();
#        yg_b := calc.-(x,t);
#       ah_b := io.printf("%d ms\n",yg_b);
#
#
#        t := alarm.time();
#        ug_b := bat.reverse(M2);
#        vg_b := algebra.join(M2,ug_b);
#        wg_b := aggr.count(vg_b);
#        xg_b := io.printf("#count %d = ",wg_b);
#        x:= alarm.time();
#        yg_b := calc.-(x,t);
#       ah_b := io.printf("%d ms\n",yg_b);
#
#        t := alarm.time();
#        ug_b := bat.reverse(M2);
#        vg_b := algebra.join(M2,ug_b);
#        wg_b := aggr.count(vg_b);
#        xg_b := io.printf("#count %d = ",wg_b);
#        x:= alarm.time();
#        yg_b := calc.-(x,t);
#       ah_b := io.printf("%d ms\n",yg_b);
#
#
#        t := alarm.time();
#        ug_b := bat.reverse(M2);
#        vg_b := algebra.join(M2,ug_b);
#        wg_b := aggr.count(vg_b);
#        xg_b := io.printf("#count %d = ",wg_b);
#        x:= alarm.time();
#        yg_b := calc.-(x,t);
#      ah_b := io.printf("%d ms\n",yg_b);
#
#
function user.main():void;              #  0 main:void := user.main() {G}
    int_1M := bat.new(:oid,:lng,1000000);#  1 int_1M:bat[:oid,:lng] := CMDBATnewint(_2:oid, _3:lng, _4:int) {G}
    i := 1000000:lng;                   #  2 i:lng := _6:lng 
barrier sj_a := true;                   #  3 sj_a:bit := _8:bit {J11}
    i := calc.-(i,1);                   #  4 i:lng := CALCbinarySUBlngint(i:lng, _9:int) 
    uj_a := i;                          #  5 uj_a:lng := i:lng 
    vj_a := calc.>=(uj_a,0);            #  6 vj_a:bit := CALCcompGElngint(uj_a:lng, _12:int) 
barrier tj_a := vj_a;                   #  7 tj_a:bit := vj_a:bit {J10}
    xj_a := bat.insert(int_1M,nil:oid,i);#  8 xj_a:bat[:oid,:lng] := BKCinsert_bun(int_1M:bat[:oid,:lng], _15:oid, i:lng) {G}
    redo sj_a;                          #  9 sj_a:bit {J4}
exit tj_a;                              # 10 tj_a:bit 
exit sj_a;                              # 11 sj_a:bit 
    t := alarm.time();                  # 12 t:int := ALARMtime() 
    ug_a := bat.reverse(int_1M);        # 13 ug_a:bat[:lng,:oid] := BKCreverse(int_1M:bat[:oid,:lng]) {G}
    vg_a := algebra.join(int_1M,ug_a);  # 14 vg_a:bat[:oid,:oid] := ALGjoin(int_1M:bat[:oid,:lng], ug_a:bat[:lng,:oid]) {G}
    wg_a := aggr.count(vg_a);           # 15 wg_a:wrd := ALGcount_bat(vg_a:bat[:oid,:oid]) 
    xg_a := io.printf("#count %d = ",wg_a);# 16 xg_a:void := IOprint_formatted_wrd(_21:str, wg_a:wrd) 
    x := alarm.time();                  # 17 x:int := ALARMtime() 
    yg_a := calc.-(x,t);                # 18 yg_a:int := CALCbinarySUBintint(x:int, t:int) 
    ah_a := io.printf("%d ms\n",yg_a);  # 19 ah_a:void := IOprint_formatted_int(_25:str, yg_a:int) 
    t := alarm.time();                  # 20 t:int := ALARMtime() 
    ug_a := bat.reverse(int_1M);        # 21 ug_a:bat[:lng,:oid] := BKCreverse(int_1M:bat[:oid,:lng]) {G}
    vg_a := algebra.join(int_1M,ug_a);  # 22 vg_a:bat[:oid,:oid] := ALGjoin(int_1M:bat[:oid,:lng], ug_a:bat[:lng,:oid]) {G}
    wg_a := aggr.count(vg_a);           # 23 wg_a:wrd := ALGcount_bat(vg_a:bat[:oid,:oid]) 
    xg_a := io.printf("#count %d = ",wg_a);# 24 xg_a:void := IOprint_formatted_wrd(_21:str, wg_a:wrd) 
    x := alarm.time();                  # 25 x:int := ALARMtime() 
    yg_a := calc.-(x,t);                # 26 yg_a:int := CALCbinarySUBintint(x:int, t:int) 
    ah_a := io.printf("%d ms\n",yg_a);  # 27 ah_a:void := IOprint_formatted_int(_25:str, yg_a:int) 
    t := alarm.time();                  # 28 t:int := ALARMtime() 
    ug_a := bat.reverse(int_1M);        # 29 ug_a:bat[:lng,:oid] := BKCreverse(int_1M:bat[:oid,:lng]) {G}
    vg_a := algebra.join(int_1M,ug_a);  # 30 vg_a:bat[:oid,:oid] := ALGjoin(int_1M:bat[:oid,:lng], ug_a:bat[:lng,:oid]) {G}
    wg_a := aggr.count(vg_a);           # 31 wg_a:wrd := ALGcount_bat(vg_a:bat[:oid,:oid]) 
    xg_a := io.printf("#count %d = ",wg_a);# 32 xg_a:void := IOprint_formatted_wrd(_21:str, wg_a:wrd) 
    x := alarm.time();                  # 33 x:int := ALARMtime() 
    yg_a := calc.-(x,t);                # 34 yg_a:int := CALCbinarySUBintint(x:int, t:int) 
    ah_a := io.printf("%d ms\n",yg_a);  # 35 ah_a:void := IOprint_formatted_int(_25:str, yg_a:int) 
    t := alarm.time();                  # 36 t:int := ALARMtime() 
    ug_a := bat.reverse(int_1M);        # 37 ug_a:bat[:lng,:oid] := BKCreverse(int_1M:bat[:oid,:lng]) {G}
    vg_a := algebra.join(int_1M,ug_a);  # 38 vg_a:bat[:oid,:oid] := ALGjoin(int_1M:bat[:oid,:lng], ug_a:bat[:lng,:oid]) {G}
    wg_a := aggr.count(vg_a);           # 39 wg_a:wrd := ALGcount_bat(vg_a:bat[:oid,:oid]) 
    xg_a := io.printf("#count %d = ",wg_a);# 40 xg_a:void := IOprint_formatted_wrd(_21:str, wg_a:wrd) 
    x := alarm.time();                  # 41 x:int := ALARMtime() 
    yg_a := calc.-(x,t);                # 42 yg_a:int := CALCbinarySUBintint(x:int, t:int) 
    ah_a := io.printf("%d ms\n",yg_a);  # 43 ah_a:void := IOprint_formatted_int(_25:str, yg_a:int) 
    M2 := bat.new(:lng,:lng,1000000);   # 44 M2:bat[:lng,:lng] := CMDBATnewint(_3:lng, _3:lng, _4:int) {G}
    i := 1000000:lng;                   # 45 i:lng := _6:lng 
barrier sj_b := true;                   # 46 sj_b:bit := _8:bit {J54}
    i := calc.-(i,1);                   # 47 i:lng := CALCbinarySUBlngint(i:lng, _9:int) 
    uj_b := i;                          # 48 uj_b:lng := i:lng 
    vj_b := calc.>=(uj_b,0);            # 49 vj_b:bit := CALCcompGElngint(uj_b:lng, _12:int) 
barrier tj_b := vj_b;                   # 50 tj_b:bit := vj_b:bit {J53}
    xj_b := bat.insert(M2,i,i);         # 51 xj_b:bat[:lng,:lng] := BKCinsert_bun(M2:bat[:lng,:lng], i:lng, i:lng) {G}
    redo sj_b;                          # 52 sj_b:bit {J47}
exit tj_b;                              # 53 tj_b:bit 
exit sj_b;                              # 54 sj_b:bit 
    t := alarm.time();                  # 55 t:int := ALARMtime() 
    ug_b := bat.reverse(M2);            # 56 ug_b:bat[:lng,:lng] := BKCreverse(M2:bat[:lng,:lng]) {G}
    vg_b := algebra.join(M2,ug_b);      # 57 vg_b:bat[:lng,:lng] := ALGjoin(M2:bat[:lng,:lng], ug_b:bat[:lng,:lng]) {G}
    wg_b := aggr.count(vg_b);           # 58 wg_b:wrd := ALGcount_bat(vg_b:bat[:lng,:lng]) 
    xg_b := io.printf("#count %d = ",wg_b);# 59 xg_b:void := IOprint_formatted_wrd(_21:str, wg_b:wrd) 
    x := alarm.time();                  # 60 x:int := ALARMtime() 
    yg_b := calc.-(x,t);                # 61 yg_b:int := CALCbinarySUBintint(x:int, t:int) 
    ah_b := io.printf("%d ms\n",yg_b);  # 62 ah_b:void := IOprint_formatted_int(_25:str, yg_b:int) 
    t := alarm.time();                  # 63 t:int := ALARMtime() 
    ug_b := bat.reverse(M2);            # 64 ug_b:bat[:lng,:lng] := BKCreverse(M2:bat[:lng,:lng]) {G}
    vg_b := algebra.join(M2,ug_b);      # 65 vg_b:bat[:lng,:lng] := ALGjoin(M2:bat[:lng,:lng], ug_b:bat[:lng,:lng]) {G}
    wg_b := aggr.count(vg_b);           # 66 wg_b:wrd := ALGcount_bat(vg_b:bat[:lng,:lng]) 
    xg_b := io.printf("#count %d = ",wg_b);# 67 xg_b:void := IOprint_formatted_wrd(_21:str, wg_b:wrd) 
    x := alarm.time();                  # 68 x:int := ALARMtime() 
    yg_b := calc.-(x,t);                # 69 yg_b:int := CALCbinarySUBintint(x:int, t:int) 
    ah_b := io.printf("%d ms\n",yg_b);  # 70 ah_b:void := IOprint_formatted_int(_25:str, yg_b:int) 
    t := alarm.time();                  # 71 t:int := ALARMtime() 
    ug_b := bat.reverse(M2);            # 72 ug_b:bat[:lng,:lng] := BKCreverse(M2:bat[:lng,:lng]) {G}
    vg_b := algebra.join(M2,ug_b);      # 73 vg_b:bat[:lng,:lng] := ALGjoin(M2:bat[:lng,:lng], ug_b:bat[:lng,:lng]) {G}
    wg_b := aggr.count(vg_b);           # 74 wg_b:wrd := ALGcount_bat(vg_b:bat[:lng,:lng]) 
    xg_b := io.printf("#count %d = ",wg_b);# 75 xg_b:void := IOprint_formatted_wrd(_21:str, wg_b:wrd) 
    x := alarm.time();                  # 76 x:int := ALARMtime() 
    yg_b := calc.-(x,t);                # 77 yg_b:int := CALCbinarySUBintint(x:int, t:int) 
    ah_b := io.printf("%d ms\n",yg_b);  # 78 ah_b:void := IOprint_formatted_int(_25:str, yg_b:int) 
    t := alarm.time();                  # 79 t:int := ALARMtime() 
    ug_b := bat.reverse(M2);            # 80 ug_b:bat[:lng,:lng] := BKCreverse(M2:bat[:lng,:lng]) {G}
    vg_b := algebra.join(M2,ug_b);      # 81 vg_b:bat[:lng,:lng] := ALGjoin(M2:bat[:lng,:lng], ug_b:bat[:lng,:lng]) {G}
    wg_b := aggr.count(vg_b);           # 82 wg_b:wrd := ALGcount_bat(vg_b:bat[:lng,:lng]) 
    xg_b := io.printf("#count %d = ",wg_b);# 83 xg_b:void := IOprint_formatted_wrd(_21:str, wg_b:wrd) 
    x := alarm.time();                  # 84 x:int := ALARMtime() 
    yg_b := calc.-(x,t);                # 85 yg_b:int := CALCbinarySUBintint(x:int, t:int) 
    ah_b := io.printf("%d ms\n",yg_b);  # 86 ah_b:void := IOprint_formatted_int(_25:str, yg_b:int) 
end main;	# 87  
#count 1000000 = 203 ms
#count 1000000 = 165 ms
#count 1000000 = 163 ms
#count 1000000 = 165 ms
#count 1000000 = 361 ms
#count 1000000 = 323 ms
#count 1000000 = 323 ms
#count 1000000 = 323 ms

# 07:59:13 >  
# 07:59:13 >  Done.
# 07:59:13 >  

