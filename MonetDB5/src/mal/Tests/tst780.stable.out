stdout of test 'tst780` in directory 'src/mal` itself:


# 22:39:38 >  
# 22:39:38 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=32789 --set monet_prompt= --trace --dbname=mTests_src_mal  tst780.mal < /dev/null
# 22:39:38 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
##some tests to illustrate MAL macro 
#
#macro user.hello():void;
#	io.print("hello world\n");
#end hello;
function dummy.hello():void;	# 0  (hello:void)
    io.print("hello world\n");	# 1 IOprint_val (_1:int)<-(_2:str)
end hello;	# 2  
#
#macro user.doit(i:int, j:str):int;
#	io.print(i);
#	io.print(j);
#	doit:= 3;
#end doit;
function dummy.doit(i:int,j:str):int;	# 0  (doit:int)<-(i:int)(j:str)
    io.print(i);	# 1 IOprint_val (_3:int)<-(i:int)
    io.print(j);	# 2 IOprint_val (_4:int)<-(j:str)
    return doit := 3;	# 3  (doit:int)<-(_5:int)
end doit;	# 4  
#
#user.hello();
#z:=user.doit(1,"help");
#
#
function user.main():void;	# 0  (main:void)
#some tests to illustrate function inlining for a module 	# 1  (_1:str)
    io.print("hello world\n");	# 2 IOprint_val (_10:int)<-(_11:str)
    z := dummy.doit(1,"help");	# 3  (z:int)<-(_4:int)(_5:str)
end main;	# 4  
[ "hello world\n" ]
[ 1 ]
[ "help" ]

# 22:39:38 >  
# 22:39:38 >  Done.
# 22:39:38 >  

