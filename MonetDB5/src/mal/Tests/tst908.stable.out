stdout of test 'tst908` in directory 'src/mal` itself:


# 08:01:39 >  
# 08:01:39 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst908.mal </dev/null
# 08:01:39 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## the multiplex code blocks.
## check detection of the underlying fast implementations
## currently the tactics is replaced by a script during
## initial analysis. It should remain 'tactics'
#
#function perftst( b:bat[:any$1,:any$2],div:any$2):void;
#	print("perftst");print(div);
#	reduce:= multiplex.tactics("/",b,div);
#	print(reduce);
#end perftst;
function user.perftst(b:bat[:any_1,:any_2],div:any_2):void;#  0 perftst:void := user.perftst(b:bat[:any_1,:any_2], div:any_2) {PG}
    io.print("perftst");                #  1 _3:void := IOprint_val(_4:str) 
    io.print(div);                      #  2 _5:void := IOprint_val(div:any_2) {P}
    reduce := batcalc./(b,div);         #  3 reduce:any := batcalc./(b:bat[:any_1,:any_2], div:any_2) {P}
    io.print(reduce);                   #  4 _7:void := IOprint_val(reduce:any) 
end perftst;	# 5  
#
#
#b:= new(:lng,:lng);
#barrier (v,i):= newRange(0:lng);
#        insert(b,i,i);
#        redo (v,i):= nextElement(1:lng,10:lng);
#exit (v,i);
#
function user.main():void;              #  0 main:void := user.main() {G}
# the multiplex code blocks. 
    b := bat.new(:oid,:lng);            #  2 b:bat[:oid,:lng] := CMDBATnew(_3:oid, _4:lng) {G}
barrier (v,i):= language.newRange(0:lng);#  3 (v:bit, i:lng) := RNGnewRange_lng(_7:lng) {J6}
    bat.append(b,i);                    #  4 _8:void := BKCappend_val_wrap(b:bat[:oid,:lng], i:lng) 
    redo (v,i):= language.nextElement(1:lng,10:lng);#  5 (v:bit, i:lng) := RNGnextElement_lng(_9:lng, _10:lng) {J4}
exit (v,i);                             #  6 (v:bit, i:lng) 
    user.perftst(b,1:lng);              #  7 _11:void := user.perftst(b:bat[:oid,:lng], _9:lng) 
end main;	# 8  
[ "perftst" ]
[ 1 ]
#-----------------#
# h	t	  # name
# lng	lng	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  2	  ]
[ 3@0,	  3	  ]
[ 4@0,	  4	  ]
[ 5@0,	  5	  ]
[ 6@0,	  6	  ]
[ 7@0,	  7	  ]
[ 8@0,	  8	  ]
[ 9@0,	  9	  ]

# 08:01:39 >  
# 08:01:39 >  Done.
# 08:01:39 >  

