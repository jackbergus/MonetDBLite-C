stdout of test 'tst908` in directory 'src/mal` itself:


# 08:01:39 >  
# 08:01:39 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst908.mal </dev/null
# 08:01:39 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## the multiplex code blocks.
## check detection of the underlying fast implementations
## currently the tactics is replaced by a script during
## initial analysis. It should remain 'tactics'
#
#function perftst( b:bat[:any$1,:any$2],div:any$2):void;
#	print("perftst");print(div);
#	reduce:= multiplex.tactics("/",b,div);
#	print(reduce);
#end perftst;
function user.perftst(b:bat[:any_1,:any_2],div:any_2):void;	# 0  (perftst:void)<-(b:bat[:any_1,:any_2])(div:any_2)
    io.print("perftst");	# 1 IOprint_val (_3:int)<-(_4:str)
    io.print(div);	# 2 IOprint_val (_5:int)<-(div:any_2)
    reduce := batcalc./(b,div);	# 3 CMDbatDIVcst (reduce:bat[:any,:any])<-(b:bat[:any_1,:any_2])(div:any_2)
    io.print(reduce);	# 4 IOprint_val (_7:int)<-(reduce:bat[:any,:any])
end perftst;	# 5  
#
#
#b:= new(:lng,:lng);
#barrier (v,i):= newRange(0:lng);
#        insert(b,i,i);
#        redo (v,i):= nextElement(1:lng,10:lng);
#exit (v,i);
#
function user.main():int;	# 0  (main:int)
# the multiplex code blocks. 	# 1  (_2:str)
    b := bbp.new(:lng,:lng);	# 2 CMDBATnew (b:bat[:lng,:lng])<-(_4:lng)(_4:lng)
barrier (v,i):= mal.newRange(0:lng);	# 3 RNGnewRange_lng (v:bit)(i:lng)<-(_7:lng) jump 6
    bat.insert(b,i,i);	# 4 BKCinsert_bun (_8:bat[:lng,:lng])<-(b:bat[:lng,:lng])(i:lng)(i:lng)
    redo (v,i):= mal.nextElement(1:lng,10:lng);	# 5 RNGnextElement_lng (v:bit)(i:lng)<-(_9:lng)(_10:lng) jump 4
exit (v,i);	# 6  (v:bit)(i:lng)
    user.perftst(b,1:lng);	# 7  (_11:void)<-(b:bat[:lng,:lng])(_9:lng)
end main;	# 8  
[ "perftst" ]
[ 1 ]
#-----------------#
# h	t	  # name
# lng	lng	  # type
#-----------------#
[ 0,	  0	  ]
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 3,	  3	  ]
[ 4,	  4	  ]
[ 5,	  5	  ]
[ 6,	  6	  ]
[ 7,	  7	  ]
[ 8,	  8	  ]
[ 9,	  9	  ]

# 08:01:39 >  
# 08:01:39 >  Done.
# 08:01:39 >  

