stdout of test 'recycle12` in directory 'src/mal` itself:


# 18:50:02 >  
# 18:50:02 >   mserver5 "--config=/export/scratch1/milena/monet.DBG/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/export/scratch1/milena/monet.DBG/lib/MonetDB5:/export/scratch1/milena/monet.DBG/lib/MonetDB5/lib:/export/scratch1/milena/monet.DBG/lib/MonetDB5/bin" --set "gdk_dbfarm=/export/scratch0/milena/var/dbfarm" --set "sql_logdir=/export/scratch0/milena/var/dblogs/logs/sql"  --set mapi_open=true --set xrpc_open=true --set mapi_port=30138 --set xrpc_port=44901 --set monet_prompt= --trace  --dbname=mTests_src_mal  recycle12.mal
# 18:50:02 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_mal', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2008 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://modi.ins.cwi.nl:30138/
function user.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];#  0 bind:bat[:oid,:int] := user.bind(s:str, t:str, c:str, i:int) {G}
    b := bat.new(:oid,:int);            #  1 b:bat[:oid,:int] := CMDBATnew(_6:oid, _7:int) {G}
    bat.insert(b,0@0,0);                #  2 _8:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _9:oid, _10:int) {G}
    bat.insert(b,1@0,1);                #  3 _11:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _12:oid, _13:int) {G}
    bat.insert(b,2@0,2);                #  4 _14:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _15:oid, _16:int) {G}
    bat.insert(b,3@0,3);                #  5 _17:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _18:oid, _19:int) {G}
    bat.insert(b,4@0,4);                #  6 _20:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _21:oid, _22:int) {G}
    bat.insert(b,5@0,5);                #  7 _23:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _24:oid, _25:int) {G}
    bat.insert(b,6@0,6);                #  8 _26:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _27:oid, _28:int) {G}
    bat.insert(b,7@0,7);                #  9 _29:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _30:oid, _31:int) {G}
    bat.insert(b,8@0,8);                # 10 _32:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _33:oid, _34:int) {G}
    bat.insert(b,9@0,9);                # 11 _35:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _36:oid, _37:int) {G}
    bat.insert(b,10@0,10);              # 12 _38:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _39:oid, _40:int) {G}
    bat.insert(b,11@0,11);              # 13 _41:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _42:oid, _43:int) {G}
    return bind := b;                   # 14 bind:bat[:oid,:int] := b:bat[:oid,:int] {G}
end bind;                               # 15  
function user.qry(low:int,hgh:int):void;#  0 qry:void := user.qry(low:int, hgh:int) {G}
    b := user.bind("schema","table","column",0);#  1 b:bat[:oid,:int] := user.bind(_4:str, _5:str, _6:str, _7:int) {G}
    s1 := algebra.select(b,low,hgh);    #  2 s1:bat[:oid,:int] := ALGselect(b:bat[:oid,:int], low:int, hgh:int) {G}
    l1 := calc.+(low,1);                #  3 l1:int := CALCbinaryADDintint(low:int, _10:int) 
    h1 := calc.-(hgh,1);                #  4 h1:int := CALCbinarySUBintint(hgh:int, _10:int) 
    s2 := algebra.select(b,l1,h1);      #  5 s2:bat[:oid,:int] := ALGselect(b:bat[:oid,:int], l1:int, h1:int) {G}
end qry;                                #  6  
function user.qry1(val:int):void;       #  0 qry1:void := user.qry1(val:int) {G}
    b := user.bind("schema","table","column1",0);#  1 b:bat[:oid,:int] := user.bind(_3:str, _4:str, _5:str, _6:int) {G}
    s1 := algebra.select(b,val);        #  2 s1:bat[:oid,:int] := ALGselect1(b:bat[:oid,:int], val:int) {G}
end qry1;                               #  3  
function user.main():void;              #  0 main:void := user.main() {G}
#test the basics of the recycler 
# testing query categories statistics 
#intra-query commonality 
#inter-query commonality 
    recycle.setRetainPolicy(1);         #  5 _5:void := RECYCLEsetRetain(_6:int) 
    recycle.setReusePolicy(1);          #  6 _7:void := RECYCLEsetReuse(_6:int) 
    recycle.setCachePolicy(3);          #  7 _8:void := RECYCLEsetCache(_9:int) 
    user.qry(2,8);                      #  8 _15:void := user.qry(_16:int, _17:int) 
    user.qry1(10);                      #  9 _18:void := user.qry1(_19:int) 
    user.qry1(10);                      # 10 _20:void := user.qry1(_19:int) 
    recycle.dumpQPat();                 # 11 _21:void := RECYCLEdumpQPatWrap() 
#recycle.dump(); 
end main;                               # 13  
#Query patterns 2
#Name	calls	globRec	locRec	Cat
#qry	1	0	1	0
#qry1	2	2	0	0

# 18:50:02 >  
# 18:50:02 >  Done.
# 18:50:02 >  

