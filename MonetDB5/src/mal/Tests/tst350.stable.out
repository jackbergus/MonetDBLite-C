stdout of test 'tst350` in directory 'src/mal` itself:


# 22:08:03 >  
# 22:08:03 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=31814 --set sql_port=49333 --set xquery_port=54432 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst350.mal < /dev/null
# 22:08:03 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
##inspection of the runtime setting
##it uses the dynamic type analysis scheme
#
#function dir(b:bat[:int,:str]):void;
#	atm:= inspect.getAtomNames();
#	brev:= bat.reverse(b);
#	bm := bat.mirror(brev);
#	h := bbp.getHeadType();
#	bHead:= algebra.join(brev,h);
#	bat.setColumn(bHead,"htype");
#	h := bbp.getTailType();
#	bTail:= algebra.join(brev,h);
#	bat.setColumn(bTail,"ttype");
#	bcount:= bbp.getCount();
#	bCount:= algebra.join(brev,bcount);
#	bat.setColumn(bCount,"count");
#	bheat:= bbp.getHeat();
#	bHeat:= algebra.join(brev,bheat);
#	bat.setColumn(bHeat,"heat");
#	bdirty:= bbp.getDirty();
#	bDirty:= algebra.join(brev,bdirty);
#	bat.setColumn(bDirty,"dirty");
#	bstatus:= bbp.getDirty();
#	bStatus:= algebra.join(brev,bstatus);
#	bat.setColumn(bStatus,"status");
#	bkind:= bbp.getKind();
#	bKind:= algebra.join(brev,bkind);
#	bat.setColumn(bKind,"kind");
#	bref:= bbp.getRefCount();
#	bRef:= algebra.join(brev,bref);
#	bat.setColumn(bRef,"refcnt");
#	io.table(brev, bm, bHead,bTail,bCount, bHeat,bDirty,bStatus,bKind,bRef);
#end dir;
function user.dir(b:bat[:int,:str]):void;	# 0  (dir:void)<-(b:bat[:int,:str])
    atm := inspect.getAtomNames();	# 1 INSPECTatom_names (atm:bat[:int,:str])
    brev := bat.reverse(b);	# 2 BKCreverse (brev:bat[:str,:int])<-(b:bat[:int,:str])
    bm := bat.mirror(brev);	# 3 BKCmirror (bm:bat[:str,:str])<-(brev:bat[:str,:int])
    h := bbp.getHeadType();	# 4 CMDbbpHeadType (h:bat[:int,:str])
    bHead := algebra.join(brev,h);	# 5 ALGjoin (bHead:bat[:str,:str])<-(brev:bat[:str,:int])(h:bat[:int,:str])
    bat.setColumn(bHead,"htype");	# 6 BKCsetColumn (_7:void)<-(bHead:bat[:str,:str])(_8:str)
    h := bbp.getTailType();	# 7 CMDbbpTailType (h:bat[:int,:str])
    bTail := algebra.join(brev,h);	# 8 ALGjoin (bTail:bat[:str,:str])<-(brev:bat[:str,:int])(h:bat[:int,:str])
    bat.setColumn(bTail,"ttype");	# 9 BKCsetColumn (_10:void)<-(bTail:bat[:str,:str])(_11:str)
    bcount := bbp.getCount();	# 10 CMDbbpCount (bcount:bat[:int,:lng])
    bCount := algebra.join(brev,bcount);	# 11 ALGjoin (bCount:bat[:str,:lng])<-(brev:bat[:str,:int])(bcount:bat[:int,:lng])
    bat.setColumn(bCount,"count");	# 12 BKCsetColumn (_14:void)<-(bCount:bat[:str,:lng])(_15:str)
    bheat := bbp.getHeat();	# 13 CMDbbpHeat (bheat:bat[:int,:int])
    bHeat := algebra.join(brev,bheat);	# 14 ALGjoin (bHeat:bat[:str,:int])<-(brev:bat[:str,:int])(bheat:bat[:int,:int])
    bat.setColumn(bHeat,"heat");	# 15 BKCsetColumn (_18:void)<-(bHeat:bat[:str,:int])(_19:str)
    bdirty := bbp.getDirty();	# 16 CMDbbpDirty (bdirty:bat[:int,:str])
    bDirty := algebra.join(brev,bdirty);	# 17 ALGjoin (bDirty:bat[:str,:str])<-(brev:bat[:str,:int])(bdirty:bat[:int,:str])
    bat.setColumn(bDirty,"dirty");	# 18 BKCsetColumn (_22:void)<-(bDirty:bat[:str,:str])(_23:str)
    bstatus := bbp.getDirty();	# 19 CMDbbpDirty (bstatus:bat[:int,:str])
    bStatus := algebra.join(brev,bstatus);	# 20 ALGjoin (bStatus:bat[:str,:str])<-(brev:bat[:str,:int])(bstatus:bat[:int,:str])
    bat.setColumn(bStatus,"status");	# 21 BKCsetColumn (_26:void)<-(bStatus:bat[:str,:str])(_27:str)
    bkind := bbp.getKind();	# 22 CMDbbpKind (bkind:bat[:int,:str])
    bKind := algebra.join(brev,bkind);	# 23 ALGjoin (bKind:bat[:str,:str])<-(brev:bat[:str,:int])(bkind:bat[:int,:str])
    bat.setColumn(bKind,"kind");	# 24 BKCsetColumn (_30:void)<-(bKind:bat[:str,:str])(_31:str)
    bref := bbp.getRefCount();	# 25 CMDbbpRefCount (bref:bat[:int,:int])
    bRef := algebra.join(brev,bref);	# 26 ALGjoin (bRef:bat[:str,:int])<-(brev:bat[:str,:int])(bref:bat[:int,:int])
    bat.setColumn(bRef,"refcnt");	# 27 BKCsetColumn (_34:void)<-(bRef:bat[:str,:int])(_35:str)
    io.table(brev,bm,bHead,bTail,bCount,bHeat,bDirty,bStatus,bKind,bRef);	# 28 IOttable (_36:int)<-(brev:bat[:str,:int])(bm:bat[:str,:str])(bHead:bat[:str,:str])(bTail:bat[:str,:str])(bCount:bat[:str,:lng])(bHeat:bat[:str,:int])(bDirty:bat[:str,:str])(bStatus:bat[:str,:str])(bKind:bat[:str,:str])(bRef:bat[:str,:int])
end dir;	# 29  
#
#function dir(s:str):void;
#	io.print("Search directory by name");
#	t:= bbp.getNames();
#	tn:= algebra.like(t,s);
#	io.print(tn);
#	user.dir(tn);
#end dir;
function user.dir(s:str):void;	# 0  (dir:void)<-(s:str)
    io.print("Search directory by name");	# 1 IOprint_val (_2:int)<-(_3:str)
    t := bbp.getNames();	# 2 CMDbbpNames (t:bat[:int,:str])
    tn := algebra.like(t,s);	# 3 ALGlike (tn:bat[:int,:str])<-(t:bat[:int,:str])(s:str)
    io.print(tn);	# 4 IOprint_val (_6:int)<-(tn:bat[:int,:str])
    user.dir(tn);	# 5  (_7:void)<-(tn:bat[:int,:str])
end dir;	# 6  
#io.print("start test");
#b:=bat.new(:int,:int);
#bat.setName(b,"simplemind");
#
#z:= bbp.getNames();
#user.dir(z);
#
#user.dir("simple");
#
#
function user.main():int;	# 0  (main:int)
#inspection of the runtime setting 	# 1  (_2:str)
#it uses the dynamic type analysis scheme 	# 2  (_4:str)
    io.print("start test");	# 3 IOprint_val (_5:int)<-(_6:str)
    b := bat.new(:int,:int);	# 4 CMDBATnew (b:bat[:int,:int])<-(_8:int)(_8:int)
    bat.setName(b,"simplemind");	# 5 BKCsetName (_9:void)<-(b:bat[:int,:int])(_10:str)
    z := bbp.getNames();	# 6 CMDbbpNames (z:bat[:int,:str])
    user.dir(z);	# 7  (_12:void)<-(z:bat[:int,:str])
    user.dir("simple");	# 8  (_13:void)<-(_14:str)
end main;	# 9  
[ "start test" ]
#---------------------------------------------------------------------------------------------------------------------------------#
# bbp	t			htype	ttype		count	heat	dirty		status		kind		refcnt	  # name
# int	str			str	str		lng	int	str		str		str		int	  # type
#---------------------------------------------------------------------------------------------------------------------------------#
[ 1,	  "monet_environment",	  "str",  "str",	  34,	  538,	  "dirty",	  "dirty",	  "transient",	  1	  ]
[ 2,	  "monet_unicode_case",	  "int",  "int",	  732,	  539,	  "dirty",	  "dirty",	  "transient",	  1	  ]
[ 3,	  "timezones",		  "str",  "tzone",	  24,	  540,	  "dirty",	  "dirty",	  "transient",	  1	  ]
[ 4,	  "stat_id_inuse",	  "int",  "int",	  0,	  497,	  "clean",	  "clean",	  "persistent",	  1	  ]
[ 5,	  "stat_id_nme",	  "int",  "str",	  0,	  498,	  "clean",	  "clean",	  "persistent",	  1	  ]
[ 6,	  "stat_id_expire",	  "int",  "int",	  0,	  499,	  "clean",	  "clean",	  "persistent",	  1	  ]
[ 7,	  "stat_id_stamp",	  "int",  "int",	  0,	  500,	  "clean",	  "clean",	  "persistent",	  1	  ]
[ 8,	  "stat_id_count",	  "int",  "lng",	  0,	  501,	  "clean",	  "clean",	  "persistent",	  1	  ]
[ 9,	  "stat_id_size",	  "int",  "lng",	  0,	  502,	  "clean",	  "clean",	  "persistent",	  1	  ]
[ 10,	  "stat_id_min_lng",	  "int",  "lng",	  0,	  503,	  "clean",	  "clean",	  "persistent",	  1	  ]
[ 11,	  "stat_id_max_lng",	  "int",  "lng",	  0,	  504,	  "clean",	  "clean",	  "persistent",	  1	  ]
[ 12,	  "stat_id_histogram",	  "int",  "str",	  0,	  505,	  "clean",	  "clean",	  "persistent",	  1	  ]
[ 13,	  "simplemind",		  "int",  "int",	  0,	  559,	  "dirty",	  "dirty",	  "transient",	  0	  ]
[ 14,	  "trace_id_time",	  "int",  "str",	  0,	  507,	  "clean",	  "clean",	  "persistent",	  0	  ]
[ 15,	  "trace_id_ticks",	  "int",  "int",	  11,	  508,	  "clean",	  "clean",	  "persistent",	  0	  ]
[ 16,	  "trace_id_pc",	  "int",  "str",	  0,	  509,	  "clean",	  "clean",	  "persistent",	  0	  ]
[ 17,	  "trace_id_modfcn",	  "int",  "str",	  0,	  510,	  "clean",	  "clean",	  "persistent",	  0	  ]
[ 18,	  "trace_id_statement",	  "int",  "str",	  11,	  511,	  "clean",	  "clean",	  "persistent",	  0	  ]
[ "Search directory by name" ]
#-------------------------#
# h	t		  # name
# int	str		  # type
#-------------------------#
[ 13,	  "simplemind"	  ]
#-----------------------------------------------------------------------------------------------------------------#
# h	t		htype	ttype	count	heat	dirty		status		kind		refcnt	  # name
# int	str		str	str	lng	int	str		str		str		int	  # type
#-----------------------------------------------------------------------------------------------------------------#
[ 13,	  "simplemind",	  "int",  "int",  0,	  668,	  "dirty",	  "dirty",	  "transient",	  0	  ]

# 22:08:03 >  
# 22:08:03 >  Done.
# 22:08:03 >  

