stdout of test 'tst041` in directory 'src/mal` itself:


# 07:58:44 >  
# 07:58:44 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst041.mal </dev/null
# 07:58:44 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## this sequence tests nil type management 
#b:=nil;	print(b);
#
#a:=23;	print(a);
#a:= int(nil);	print(a);
#a:= int(13);	print(a);
#a:= int("23");	print(a);
#a:= int(43.0:flt);	print(a);
#a:= int(63.0:dbl);	print(a);
#
#c:= true;	print(c);
#c:= bit(nil);	print(c);
#c:= bit(false);	print(c);
#c:= bit(1);	print(c);
#c:= bit("true");	print(c);
#c:= bit(1.0:flt);	print(c);
#c:= bit(0.0:dbl);	print(c);
#
#d:= 3.14:flt;	print(d);
#d:= flt(nil);	print(d);
#d:= flt(5);	print(d);
#d:= flt("7.14");	print(d);
#
#e:= "hello";	print(e);
#e:= str(nil);	print(e);
#e:= str("nil");	print(e);
#
#f:= 'Z';	print(f);
#f:= chr(nil);	print(f);
#f:= chr("X");	print(f);
#
#p:= 0:ptr;  io.print(p);
#p:= 1:ptr;  io.print(p);
#
function user.main():void;	# 0  (main:void)
# this sequence tests nil type management  	# 1  (_1:str)
    b := nil:void;	# 2  (b:void)<-(_3:void)
    io.print(b);	# 3 IOprint_val (_4:int)<-(b:void)
    a := 23;	# 4  (a:int)<-(_6:int)
    io.print(a);	# 5 IOprint_val (_7:int)<-(a:int)
    a := calc.int(nil:void);	# 6 CALCnil2int (a:int)<-(_3:void)
    io.print(a);	# 7 IOprint_val (_8:int)<-(a:int)
    a := calc.int(nil:int);	# 8 CALCint2int (a:int)<-(_9:int)
    io.print(a);	# 9 IOprint_val (_10:int)<-(a:int)
    a := calc.int(13);	# 10 CALCint2int (a:int)<-(_11:int)
    io.print(a);	# 11 IOprint_val (_12:int)<-(a:int)
    a := calc.int("23");	# 12 CALCstr2int (a:int)<-(_13:str)
    io.print(a);	# 13 IOprint_val (_14:int)<-(a:int)
    a := calc.int(43:flt);	# 14 CALCflt2int (a:int)<-(_15:flt)
    io.print(a);	# 15 IOprint_val (_16:int)<-(a:int)
    a := calc.int(63:dbl);	# 16 CALCdbl2int (a:int)<-(_17:dbl)
    io.print(a);	# 17 IOprint_val (_18:int)<-(a:int)
    a := nil:int;	# 18  (a:int)<-(_9:int)
    io.print(a);	# 19 IOprint_val (_19:int)<-(a:int)
    c := true;	# 20  (c:bit)<-(_21:bit)
    io.print(c);	# 21 IOprint_val (_22:int)<-(c:bit)
    c := calc.bit(nil:void);	# 22 CALCnil2bit (c:bit)<-(_3:void)
    io.print(c);	# 23 IOprint_val (_23:int)<-(c:bit)
    c := calc.bit(nil:bit);	# 24 CALCbit2bit (c:bit)<-(_24:bit)
    io.print(c);	# 25 IOprint_val (_25:int)<-(c:bit)
    c := calc.bit(false);	# 26 CALCbit2bit (c:bit)<-(_26:bit)
    io.print(c);	# 27 IOprint_val (_27:int)<-(c:bit)
    c := calc.bit(1);	# 28 CALCint2bit (c:bit)<-(_28:int)
    io.print(c);	# 29 IOprint_val (_29:int)<-(c:bit)
    c := calc.bit("true");	# 30 CALCstr2bit (c:bit)<-(_30:str)
    io.print(c);	# 31 IOprint_val (_31:int)<-(c:bit)
    c := calc.bit(1:flt);	# 32 CALCflt2bit (c:bit)<-(_32:flt)
    io.print(c);	# 33 IOprint_val (_33:int)<-(c:bit)
    c := calc.bit(0:dbl);	# 34 CALCdbl2bit (c:bit)<-(_34:dbl)
    io.print(c);	# 35 IOprint_val (_35:int)<-(c:bit)
    c := nil:bit;	# 36  (c:bit)<-(_24:bit)
    io.print(c);	# 37 IOprint_val (_36:int)<-(c:bit)
    d := 3.1400001:flt;	# 38  (d:flt)<-(_38:flt)
    io.print(d);	# 39 IOprint_val (_39:int)<-(d:flt)
    d := calc.flt(nil:void);	# 40 CALCnil2flt (d:flt)<-(_40:void)
    io.print(d);	# 41 IOprint_val (_41:int)<-(d:flt)
    d := calc.flt(nil:flt);	# 42 CALCflt2flt (d:flt)<-(_42:flt)
    io.print(c);	# 43 IOprint_val (_43:int)<-(c:bit)
    d := calc.flt(5);	# 44 CALCint2flt (d:flt)<-(_44:int)
    io.print(d);	# 45 IOprint_val (_45:int)<-(d:flt)
    d := calc.flt("7.14");	# 46 CALCstr2flt (d:flt)<-(_46:str)
    io.print(d);	# 47 IOprint_val (_47:int)<-(d:flt)
    d := nil:flt;	# 48  (d:flt)<-(_42:flt)
    io.print(d);	# 49 IOprint_val (_48:int)<-(d:flt)
    e := "hello";	# 50  (e:str)<-(_50:str)
    io.print(e);	# 51 IOprint_val (_51:int)<-(e:str)
    e := calc.str(nil:void);	# 52 CALCnil2str (e:str)<-(_40:void)
    io.print(e);	# 53 IOprint_val (_52:int)<-(e:str)
    e := calc.str("nil");	# 54 CALCstr2str (e:str)<-(_53:str)
    io.print(e);	# 55 IOprint_val (_54:int)<-(e:str)
    e := nil:str;	# 56  (e:str)<-(_55:str)
    io.print(e);	# 57 IOprint_val (_56:int)<-(e:str)
    io.print(nil:str);	# 58 IOprint_val (_57:int)<-(_55:str)
    f := 'Z';	# 59  (f:chr)<-(_59:chr)
    io.print(f);	# 60 IOprint_val (_60:int)<-(f:chr)
    f := calc.chr(nil:void);	# 61 CALCnil2chr (f:chr)<-(_40:void)
    io.print(f);	# 62 IOprint_val (_61:int)<-(f:chr)
    f := calc.chr("X");	# 63 CALCstr2chr (f:chr)<-(_62:str)
    io.print(f);	# 64 IOprint_val (_63:int)<-(f:chr)
end main;	# 65  
[ nil ]
[ 23 ]
[ nil ]
[ nil ]
[ 13 ]
[ 23 ]
[ 43 ]
[ 63 ]
[ nil ]
[ true ]
[ nil ]
[ nil ]
[ false ]
[ true ]
[ true ]
[ true ]
[ false ]
[ nil ]
[ 3.1400001 ]
[ nil ]
[ nil ]
[ 5 ]
[ 7.13999987 ]
[ nil ]
[ "hello" ]
[ nil ]
[ "nil" ]
[ nil ]
[ nil ]
[ 'Z' ]
[ nil ]
[ 'X' ]

# 07:58:44 >  
# 07:58:44 >  Done.
# 07:58:44 >  

