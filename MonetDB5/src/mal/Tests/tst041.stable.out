stdout of test 'tst041` in directory 'src/mal` itself:


# 07:58:44 >  
# 07:58:44 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst041.mal </dev/null
# 07:58:44 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## this sequence tests nil type management 
#b:=nil;	print(b);
#
#a:=23;	print(a);
#a:= int(nil);	print(a);
#a:= int(13);	print(a);
#a:= int("23");	print(a);
#a:= int(43.0:flt);	print(a);
#a:= int(63.0:dbl);	print(a);
#
#c:= true;	print(c);
#c:= bit(nil);	print(c);
#c:= bit(false);	print(c);
#c:= bit(1);	print(c);
#c:= bit("true");	print(c);
#c:= bit(1.0:flt);	print(c);
#c:= bit(0.0:dbl);	print(c);
#
#d:= 3.14:flt;	print(d);
#d:= flt(nil);	print(d);
#d:= flt(5);	print(d);
#d:= flt("7.14");	print(d);
#
#e:= "hello";	print(e);
#e:= str(nil);	print(e);
#e:= str("nil");	print(e);
#
#f:= 'Z';	print(f);
#f:= chr(nil);	print(f);
#f:= chr("X");	print(f);
#
#p:= 0:ptr;  io.print(p);
#p:= 1:ptr;  io.print(p);
#
function user.main():void;	# 0  (main:void)
# this sequence tests nil type management  	# 1  (_2:str)
    b := nil;	# 2  (b:void)<-(_4:void)
    io.print(b);	# 3 IOprint_val (_5:int)<-(b:void)
    a := 23;	# 4  (a:int)<-(_7:int)
    io.print(a);	# 5 IOprint_val (_8:int)<-(a:int)
    a := calc.int(nil);	# 6 CALCnil2int (a:int)<-(_4:void)
    io.print(a);	# 7 IOprint_val (_9:int)<-(a:int)
    a := calc.int(13);	# 8 CALCint2int (a:int)<-(_10:int)
    io.print(a);	# 9 IOprint_val (_11:int)<-(a:int)
    a := calc.int("23");	# 10 CALCstr2int (a:int)<-(_12:str)
    io.print(a);	# 11 IOprint_val (_13:int)<-(a:int)
    a := calc.int(43:flt);	# 12 CALCflt2int (a:int)<-(_14:flt)
    io.print(a);	# 13 IOprint_val (_15:int)<-(a:int)
    a := calc.int(63:dbl);	# 14 CALCdbl2int (a:int)<-(_16:dbl)
    io.print(a);	# 15 IOprint_val (_17:int)<-(a:int)
    c := true;	# 16  (c:bit)<-(_19:bit)
    io.print(c);	# 17 IOprint_val (_20:int)<-(c:bit)
    c := calc.bit(nil);	# 18 CALCnil2bit (c:bit)<-(_4:void)
    io.print(c);	# 19 IOprint_val (_21:int)<-(c:bit)
    c := calc.bit(false);	# 20 CALCbit2bit (c:bit)<-(_22:bit)
    io.print(c);	# 21 IOprint_val (_23:int)<-(c:bit)
    c := calc.bit(1);	# 22 CALCint2bit (c:bit)<-(_24:int)
    io.print(c);	# 23 IOprint_val (_25:int)<-(c:bit)
    c := calc.bit("true");	# 24 CALCstr2bit (c:bit)<-(_26:str)
    io.print(c);	# 25 IOprint_val (_27:int)<-(c:bit)
    c := calc.bit(1:flt);	# 26 CALCflt2bit (c:bit)<-(_28:flt)
    io.print(c);	# 27 IOprint_val (_29:int)<-(c:bit)
    c := calc.bit(0:dbl);	# 28 CALCdbl2bit (c:bit)<-(_30:dbl)
    io.print(c);	# 29 IOprint_val (_31:int)<-(c:bit)
    d := 3.1400001:flt;	# 30  (d:flt)<-(_33:flt)
    io.print(d);	# 31 IOprint_val (_34:int)<-(d:flt)
    d := calc.flt(nil);	# 32 CALCnil2flt (d:flt)<-(_4:void)
    io.print(d);	# 33 IOprint_val (_35:int)<-(d:flt)
    d := calc.flt(5);	# 34 CALCint2flt (d:flt)<-(_36:int)
    io.print(d);	# 35 IOprint_val (_37:int)<-(d:flt)
    d := calc.flt("7.14");	# 36 CALCstr2flt (d:flt)<-(_38:str)
    io.print(d);	# 37 IOprint_val (_39:int)<-(d:flt)
    e := "hello";	# 38  (e:str)<-(_41:str)
    io.print(e);	# 39 IOprint_val (_42:int)<-(e:str)
    e := calc.str(nil);	# 40 CALCnil2str (e:str)<-(_43:void)
    io.print(e);	# 41 IOprint_val (_44:int)<-(e:str)
    e := calc.str("nil");	# 42 CALCstr2str (e:str)<-(_45:str)
    io.print(e);	# 43 IOprint_val (_46:int)<-(e:str)
    f := 'Z';	# 44  (f:chr)<-(_48:chr)
    io.print(f);	# 45 IOprint_val (_49:int)<-(f:chr)
    f := calc.chr(nil);	# 46 CALCnil2chr (f:chr)<-(_43:void)
    io.print(f);	# 47 IOprint_val (_50:int)<-(f:chr)
    f := calc.chr("X");	# 48 CALCstr2chr (f:chr)<-(_51:str)
    io.print(f);	# 49 IOprint_val (_52:int)<-(f:chr)
    p := 0:ptr;	# 50  (p:ptr)<-(_54:ptr)
    io.print(p);	# 51 IOprint_val (_55:int)<-(p:ptr)
    p := 1:ptr;	# 52  (p:ptr)<-(_56:ptr)
    io.print(p);	# 53 IOprint_val (_57:int)<-(p:ptr)
end main;	# 54  
[ nil ]
[ 23 ]
[ nil ]
[ 13 ]
[ 23 ]
[ 43 ]
[ 63 ]
[ true ]
[ nil ]
[ false ]
[ true ]
[ true ]
[ true ]
[ false ]
[ 3.1400001 ]
[ nil ]
[ 5 ]
[ 7.13999987 ]
[ "hello" ]
[ nil ]
[ "nil" ]
[ 'Z' ]
[ nil ]
[ 'X' ]
[ 0 ]
[ 1 ]
#

# 07:58:44 >  
# 07:58:44 >  Done.
# 07:58:44 >  

