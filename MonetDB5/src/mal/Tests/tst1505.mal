	y := bat.new(:void,:dbl);
	bat.setSequenceBase(y,0@0);
	le_a := calc.dbl(1.0);
	me_a := bat.append(y,le_a);
	ne_a := calc.dbl(2.0);
	oe_a := bat.append(y,ne_a);
	pe_a := calc.dbl(2.0);
	qe_a := bat.append(y,pe_a);
	re_a := calc.dbl(2.0);
	se_a := bat.append(y,re_a);
	te_a := calc.dbl(2.0);
	ue_a := bat.append(y,te_a);
	ve_a := calc.dbl(3.0);
	we_a := bat.append(y,ve_a);
	xe_a := calc.dbl(1.0);
	ye_a := bat.append(y,xe_a);
	af_a := calc.dbl(1.0);
	bf_a := bat.append(y,af_a);

z:= batcalc.<(y,2.0:dbl);
io.print(z);
c:= aggr.count(z);
io.print("count");
io.print(c);

	x:= bat.new(:void,:bit);
	bat.append(x,true);
	bat.append(x,false);
	bat.append(x,true);
	bat.append(x,false);
	bat.setSequenceBase(x,0@0);
	io.print(x);
	A:= bat.new(:void,:bit);
	bat.setSequenceBase(A,0@0);
	bat.append(A,true);
	bat.append(A,true);
	bat.append(A,false);
	bat.append(A,false);
	io.print(A);
	xn:= batcalc.not(x); io.print(x,xn);
	xandx:= batcalc.and(x,A); io.print(x,xandx);
	xorx:= batcalc.or(x,A); io.print(x,xorx);
io.print("ifthen group");
	xif0:= batcalc.ifthen(x,x);io.print(x,xif0);
	xif1:= batcalc.ifthen(x,false);io.print(x,xif1);
	xif2:= batcalc.ifthenelse(x,x,xn);io.print(x,x,xn,xif2);
	xif3:= batcalc.ifthenelse(x,x,true);io.print(x,x,xif3);
	xif4:= batcalc.ifthenelse(x,1,2);io.print(x,xif4);
io.print("accumulators");
	x2:= batcalc.not(x,x); io.print(x,x2);
	x3:= batcalc.and(x,A); io.print(x,A,x3);
	x4:= batcalc.or(x,A); io.print(x,A,x4);
