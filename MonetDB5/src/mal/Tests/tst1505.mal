	y := bat.new(:oid,:dbl);
	le_a := calc.dbl(1.0);
	me_a := bat.insert(y,1@0,le_a);
	ne_a := calc.dbl(2.0);
	oe_a := bat.insert(y,2@0,ne_a);
	pe_a := calc.dbl(2.0);
	qe_a := bat.insert(y,3@0,pe_a);
	re_a := calc.dbl(2.0);
	se_a := bat.insert(y,4@0,re_a);
	te_a := calc.dbl(2.0);
	ue_a := bat.insert(y,5@0,te_a);
	ve_a := calc.dbl(3.0);
	we_a := bat.insert(y,6@0,ve_a);
	xe_a := calc.dbl(1.0);
	ye_a := bat.insert(y,7@0,xe_a);
	af_a := calc.dbl(1.0);
	bf_a := bat.insert(y,8@0,af_a);

z:= batcalc.<(y,2.0:dbl);
io.print(z);
c:= algebra.count(z);
io.print("count");
io.print(c);

	x:= bat.new(:oid,:bit);
	bat.insert(x,1@0,true);
	bat.insert(x,2@0,false);
	bat.insert(x,3@0,true);
	bat.insert(x,4@0,false);
	io.print(x);
	A:= bat.new(:oid,:bit);
	bat.insert(A,1@0,true);
	bat.insert(A,2@0,true);
	bat.insert(A,3@0,false);
	bat.insert(A,4@0,false);
	io.print(A);
	xn:= batcalc.not(x); io.print(x,xn);
	xandx:= batcalc.and(x,A); io.print(x,xandx);
	xorx:= batcalc.or(x,A); io.print(x,xorx);
io.print("ifthen group");
	xif0:= batcalc.ifthen(x,x);io.print(x,xif0);
	xif1:= batcalc.ifthen(x,false);io.print(x,xif1);
	xif2:= batcalc.ifthenelse(x,x,xn);io.print(x,x,xn,xif2);
	xif3:= batcalc.ifthenelse(x,x,true);io.print(x,x,xif3);
	xif4:= batcalc.ifthenelse(x,1,2);io.print(x,xif4);
io.print("accumulators");
	x2:= batcalc.not(x,x); io.print(x,x2);
	x3:= batcalc.and(x,A); io.print(x,A,x3);
	x4:= batcalc.or(x,A); io.print(x,A,x4);
