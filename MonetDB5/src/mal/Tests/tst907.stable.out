stdout of test 'tst907` in directory 'src/mal` itself:


# 08:01:38 >  
# 08:01:38 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst907.mal </dev/null
# 08:01:38 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
#function one(base:int):int;
#	print(base);
#	return base;
#end one;
function user.one(base:int):int;        #  0 one:int := user.one(base:int) 
    io.print(base);                     #  1 _2:void := IOprint_val(base:int) 
    return one := base;                 #  2 one:int := base:int 
end one;	# 3  
#
#function three(base:int,x:int,y:int):int;
#	print(base);
#	return base;
#end three;
function user.three(base:int,x:int,y:int):int;#  0 three:int := user.three(base:int, x:int, y:int) 
    io.print(base);                     #  1 _4:void := IOprint_val(base:int) 
    return three := base;               #  2 three:int := base:int 
end three;	# 3  
#function pow(base:int,raise:int):int;
#        mg_a := calc.dbl(base);
#        ng_a := calc.dbl(raise);
#        og_a := *(mg_a,ng_a);
#        pg_a := calc.int(og_a);
#        return pg_a;
#end pow;
function user.pow(base:int,raise:int):int;#  0 pow:int := user.pow(base:int, raise:int) 
    mg_a := calc.dbl(base);             #  1 mg_a:dbl := CALCint2dbl(base:int) 
    ng_a := calc.dbl(raise);            #  2 ng_a:dbl := CALCint2dbl(raise:int) 
    og_a := calc.*(mg_a,ng_a);          #  3 og_a:dbl := CALCbinaryMULdbldbl(mg_a:dbl, ng_a:dbl) 
    pg_a := calc.int(og_a);             #  4 pg_a:int := CALCdbl2int(og_a:dbl) 
    return pow := pg_a;                 #  5 pow:int := pg_a:int 
end pow;	# 6  
#k:=one(1);
#l:=three(1,2,3);
#p:= pow(1,2);
#
#b:=new(:int,:int);
#insert(b,1,1);
#
#print("do multiplex three test");
#z:=multiplex.tactics("three",b,2,3);
#print("do multiplex one test");
#z:=multiplex.tactics("one",b);
#print("do multiplex pow test");
#z:=multiplex.tactics("pow",b,2);
#print(z);
#
function user.main():void;              #  0 main:void := user.main() {G}
    k := user.one(1);                   #  1 k:int := user.one(_2:int) 
    l := user.three(1,2,3);             #  2 l:int := user.three(_2:int, _4:int, _5:int) 
    p := user.pow(1,2);                 #  3 p:int := user.pow(_2:int, _4:int) 
    b := bat.new(:int,:int);            #  4 b:bat[:int,:int] := CMDBATnew(_8:int, _9:int) {G}
    bat.insert(b,1,1);                  #  5 _10:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _2:int, _2:int) {G}
    io.print("do multiplex three test");#  6 _11:void := IOprint_val(_12:str) 
    _23 := bat.new(nil:int,nil:int);    #  7 _23:bat[:int,:int] := CMDBATnew(_24:int, _24:int) {G}
barrier (_26,_27,_28):= bat.newIterator(b);#  8 (_26:lng, _27:int, _28:int) := CHPbunIterator(b:bat[:int,:int]) {J12}
    _30 := user.three(_28,2,3);         #  9 _30:int := user.three(_28:int, _4:int, _5:int) 
    bat.insert(_23,_27,_30);            # 10 _31:bat[:int,:int] := BKCinsert_bun(_23:bat[:int,:int], _27:int, _30:int) {G}
    redo (_26,_27,_28):= bat.hasMoreElements(b);# 11 (_26:lng, _27:int, _28:int) := CHPbunHasMoreElements(b:bat[:int,:int]) {J9}
exit (_26,_27,_28);                     # 12 (_26:lng, _27:int, _28:int) 
    z:bat[:int,:int]  := _23;           # 13 z:bat[:int,:int] := _23:bat[:int,:int] {G}
    io.print("do multiplex one test");  # 14 _16:void := IOprint_val(_17:str) 
    _35 := bat.new(nil:int,nil:int);    # 15 _35:bat[:int,:int] := CMDBATnew(_24:int, _24:int) {G}
barrier (_37,_38,_39):= bat.newIterator(b);# 16 (_37:lng, _38:int, _39:int) := CHPbunIterator(b:bat[:int,:int]) {J20}
    _41 := user.one(_39);               # 17 _41:int := user.one(_39:int) 
    bat.insert(_35,_38,_41);            # 18 _42:bat[:int,:int] := BKCinsert_bun(_35:bat[:int,:int], _38:int, _41:int) {G}
    redo (_37,_38,_39):= bat.hasMoreElements(b);# 19 (_37:lng, _38:int, _39:int) := CHPbunHasMoreElements(b:bat[:int,:int]) {J17}
exit (_37,_38,_39);                     # 20 (_37:lng, _38:int, _39:int) 
    z:bat[:int,:int]  := _35;           # 21 z:bat[:int,:int] := _35:bat[:int,:int] {G}
    io.print("do multiplex pow test");  # 22 _19:void := IOprint_val(_20:str) 
    _46 := bat.new(nil:int,nil:int);    # 23 _46:bat[:int,:int] := CMDBATnew(_24:int, _24:int) {G}
barrier (_48,_49,_50):= bat.newIterator(b);# 24 (_48:lng, _49:int, _50:int) := CHPbunIterator(b:bat[:int,:int]) {J28}
    _52 := user.pow(_50,2);             # 25 _52:int := user.pow(_50:int, _4:int) 
    bat.insert(_46,_49,_52);            # 26 _53:bat[:int,:int] := BKCinsert_bun(_46:bat[:int,:int], _49:int, _52:int) {G}
    redo (_48,_49,_50):= bat.hasMoreElements(b);# 27 (_48:lng, _49:int, _50:int) := CHPbunHasMoreElements(b:bat[:int,:int]) {J25}
exit (_48,_49,_50);                     # 28 (_48:lng, _49:int, _50:int) 
    z:bat[:int,:int]  := _46;           # 29 z:bat[:int,:int] := _46:bat[:int,:int] {G}
    io.print(z);                        # 30 _22:void := IOprint_val(z:bat[:int,:int]) 
end main;                               # 31  
[ 1 ]
[ 1 ]
[ "do multiplex three test" ]
[ 1 ]
[ "do multiplex one test" ]
[ 1 ]
[ "do multiplex pow test" ]
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]

# 08:01:38 >  
# 08:01:38 >  Done.
# 08:01:38 >  

