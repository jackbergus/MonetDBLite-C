stdout of test 'tst830` in directory 'src/mal` itself:


# 20:34:17 >  
# 20:34:17 >  Mtimeout -timeout 60 mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=36259 --set sql_port=40419 --set xquery_port=52492 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst830.mal < /dev/null
# 20:34:17 >  





# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/fabian/scratch/monetdb/five/program-x86_64/etc/MonetDB5.conf
# dbfarm:/net/pegasus.ins.cwi.nl/export/scratch0/fabian/vtmp/mtest-five-monetdb-pegasus.ins.cwi.nl/monetdb/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## a simple functional test for the access control table
#
#u:= clients.getPermissions();
#io.print(u);
#
#clients.addUser("monetdb","Pmonetdb","sql");
#clients.addUser("monetdb","Pmonetdb","mal");
#clients.addUser("checkpoint","Pcheckpoint","mal");
#clients.addUser("legacy","Plegacy","mil");
#
#u:= clients.getPermissions();
#p:= clients.getPasswords();
#io.print(u,p);
#
#clients.delUser("checkpoint");
#clients.delUser("monetdb","mal");
#u:= clients.getPermissions();
#io.print(u);
#
#t:= clients.checkPermission("monetdb","Pmonetdb","sql");
#io.print(t);
#
#t:= clients.checkPermission("monetdb","x","sql");
#io.print(t);
#
#t:= clients.checkPermission("monetdb","Pmonetdb","x");
#io.print(t);
#
#t:= clients.checkPermission("x","Pmonetdb","sql");
#io.print(t);
#
#
function user.main():void;	# 0  (main:void)
# a simple functional test for the access control table 	# 1  (_1:str)
    scens := bat.new(:str,:void);	# 2 CMDBATnew (scens:bat[:str,:void])<-(_3:str)(_4:void)
    bat.insert(scens,"sql",nil:void);	# 3 BKCinsert_bun (_5:void)<-(scens:bat[:str,:void])(_6:str)(_7:void)
    bat.insert(scens,"mal",nil:void);	# 4 BKCinsert_bun (_8:void)<-(scens:bat[:str,:void])(_9:str)(_7:void)
# this should fail, the monetdb user is already there 	# 5  (_10:str)
    id := clients.addUser("monetdb","Pmonetdb",scens);	# 6 CLTaddUser (id:oid)<-(_12:str)(_13:str)(scens:bat[:str,:void])
catch MALException:str ;	# 7  (MALException:str) jump 9
    io.printf("%s\n",MALException);	# 8 IOprint_formatted_str (_15:void)<-(_16:str)(MALException:str)
exit MALException:str ;	# 9  (MALException:str)
# should print 0@1 or something 	# 10  (_17:str)
    id := clients.addUser("test","test",scens);	# 11 CLTaddUser (id:oid)<-(_18:str)(_18:str)(scens:bat[:str,:void])
    io.print(id);	# 12 IOprint_val (_19:void)<-(id:oid)
# this should work also 	# 13  (_20:str)
# don't use nil:bat[:str, :void] here, it results in a crash 	# 14  (_21:str)
    t := bat.new(:str,:void);	# 15 CMDBATnew (t:bat[:str,:void])<-(_23:str)(_4:void)
    id := clients.addUser("checkpoint","Pcheckpoint",t);	# 16 CLTaddUser (id:oid)<-(_24:str)(_25:str)(t:bat[:str,:void])
    io.print(id);	# 17 IOprint_val (_26:void)<-(id:oid)
# do a simple listing of users known 	# 18  (_27:str)
    u := clients.getUsers(t);	# 19 CLTgetUsers (u:bat[:oid,:str])<-(t:bat[:str,:void])
    io.print(u);	# 20 IOprint_val (_29:void)<-(u:bat[:oid,:str])
    bat.insert(t,"mal",nil:void);	# 21 BKCinsert_bun (_30:void)<-(t:bat[:str,:void])(_9:str)(_7:void)
    bat.insert(t,"sql",nil:void);	# 22 BKCinsert_bun (_31:void)<-(t:bat[:str,:void])(_6:str)(_7:void)
    u := clients.getUsers(t);	# 23 CLTgetUsers (u:bat[:oid,:str])<-(t:bat[:str,:void])
    io.print(u);	# 24 IOprint_val (_32:void)<-(u:bat[:oid,:str])
# should work, we're the admin here 	# 25  (_33:str)
    clients.removeUser("checkpoint");	# 26 CLTremoveUser (_34:void)<-(_24:str)
# do a simple listing of users known 	# 27  (_27:str)
    u := clients.getUsers(t);	# 28 CLTgetUsers (u:bat[:oid,:str])<-(t:bat[:str,:void])
    io.print(u);	# 29 IOprint_val (_35:void)<-(u:bat[:oid,:str])
# just remove the scenarios one by one, should work 	# 30  (_36:str)
    clients.removeScenario("test","mal");	# 31 CLTremoveScenario (_37:void)<-(_18:str)(_9:str)
    clients.removeScenario("test","sql");	# 32 CLTremoveScenario (_38:void)<-(_18:str)(_6:str)
# this one should fail: it's not there 	# 33  (_39:str)
    clients.removeScenario("test","mil");	# 34 CLTremoveScenario (_40:void)<-(_18:str)(_41:str)
catch MALException:str ;	# 35  (MALException:str) jump 38
    io.printf("%s\n",MALException);	# 36 IOprint_formatted_str (_42:void)<-(_16:str)(MALException:str)
    MALException:str  := nil:str;	# 37  (MALException:str)<-(_43:str)
exit MALException:str ;	# 38  (MALException:str)
# and add a scenario again 	# 39  (_44:str)
    clients.addScenario("test","mal");	# 40 CLTaddScenario (_45:void)<-(_18:str)(_46:str)
# do it again, see what happens (should fail) 	# 41  (_47:str)
    clients.addScenario("test","mal");	# 42 CLTaddScenario (_48:void)<-(_18:str)(_46:str)
catch MALException:str ;	# 43  (MALException:str) jump 46
    io.printf("%s\n",MALException);	# 44 IOprint_formatted_str (_49:void)<-(_16:str)(MALException:str)
    MALException:str  := nil:str;	# 45  (MALException:str)<-(_43:str)
exit MALException:str ;	# 46  (MALException:str)
# forcefully set the password of the user test 	# 47  (_50:str)
    clients.setPassword("test","newpass");	# 48 CLTsetPassword (_51:void)<-(_18:str)(_52:str)
# now try to set the password for ourself, should fail 	# 49  (_53:str)
    clients.setPassword("monetdb","badpass");	# 50 CLTsetPassword (_54:void)<-(_55:str)(_56:str)
catch InvalidCredentialsException:str ;	# 51  (InvalidCredentialsException:str) jump 53
    io.printf(InvalidCredentialsException);	# 52 IOprint_str (_58:void)<-(InvalidCredentialsException:str)
exit InvalidCredentialsException:str ;	# 53  (InvalidCredentialsException:str)
# change our own password 	# 54  (_59:str)
    clients.changePassword("monetdb","newdb");	# 55 CLTchangePassword (_60:void)<-(_55:str)(_61:str)
# try it again, should fail... 	# 56  (_62:str)
    clients.changePassword("monetdb","newdb");	# 57 CLTchangePassword (_63:void)<-(_55:str)(_61:str)
catch InvalidCredentialsException:str ;	# 58  (InvalidCredentialsException:str) jump 61
    io.printf("%s\n",InvalidCredentialsException);	# 59 IOprint_formatted_str (_64:void)<-(_65:str)(InvalidCredentialsException:str)
    InvalidCredentialsException:str  := nil:str;	# 60  (InvalidCredentialsException:str)<-(_43:str)
exit InvalidCredentialsException:str ;	# 61  (InvalidCredentialsException:str)
# all should fail 	# 62  (_66:str)
    clients.checkPermission("monetdb","Pmonetdb","sql");	# 63 CLTcheckPermission (_67:void)<-(_55:str)(_68:str)(_69:str)
catch InvalidCredentialsException:str ;	# 64  (InvalidCredentialsException:str) jump 67
    io.printf("%s\n",InvalidCredentialsException);	# 65 IOprint_formatted_str (_70:void)<-(_65:str)(InvalidCredentialsException:str)
    InvalidCredentialsException:str  := nil:str;	# 66  (InvalidCredentialsException:str)<-(_43:str)
exit InvalidCredentialsException:str ;	# 67  (InvalidCredentialsException:str)
    clients.checkPermission("monetdb","x","sql");	# 68 CLTcheckPermission (_71:void)<-(_55:str)(_72:str)(_69:str)
catch InvalidCredentialsException:str ;	# 69  (InvalidCredentialsException:str) jump 72
    io.printf("%s\n",InvalidCredentialsException);	# 70 IOprint_formatted_str (_73:void)<-(_65:str)(InvalidCredentialsException:str)
    InvalidCredentialsException:str  := nil:str;	# 71  (InvalidCredentialsException:str)<-(_43:str)
exit InvalidCredentialsException:str ;	# 72  (InvalidCredentialsException:str)
    clients.checkPermission("monetdb","Pmonetdb","x");	# 73 CLTcheckPermission (_74:void)<-(_55:str)(_68:str)(_72:str)
catch InvalidCredentialsException:str ;	# 74  (InvalidCredentialsException:str) jump 77
    io.printf("%s\n",InvalidCredentialsException);	# 75 IOprint_formatted_str (_75:void)<-(_65:str)(InvalidCredentialsException:str)
    InvalidCredentialsException:str  := nil:str;	# 76  (InvalidCredentialsException:str)<-(_43:str)
exit InvalidCredentialsException:str ;	# 77  (InvalidCredentialsException:str)
    clients.checkPermission("x","Pmonetdb","sql");	# 78 CLTcheckPermission (_76:void)<-(_72:str)(_68:str)(_69:str)
catch InvalidCredentialsException:str ;	# 79  (InvalidCredentialsException:str) jump 82
    io.printf("%s\n",InvalidCredentialsException);	# 80 IOprint_formatted_str (_77:void)<-(_65:str)(InvalidCredentialsException:str)
    InvalidCredentialsException:str  := nil:str;	# 81  (InvalidCredentialsException:str)<-(_43:str)
exit InvalidCredentialsException:str ;	# 82  (InvalidCredentialsException:str)
end main;	# 83  
MALException:addUser:user 'monetdb' already exists
[ 1@0 ]
[ 2@0 ]
#-------------------------#
# h	t		  # name
# void	str		  # type
#-------------------------#
[ 0@0,	  "monetdb"	  ]
[ 1@0,	  "test"	  ]
[ 2@0,	  "checkpoint"	  ]
#-------------------------#
# h	t		  # name
# oid	str		  # type
#-------------------------#
[ 0@0,	  "monetdb"	  ]
[ 2@0,	  "checkpoint"	  ]
[ 1@0,	  "test"	  ]
#-------------------------#
# h	t		  # name
# oid	str		  # type
#-------------------------#
[ 0@0,	  "monetdb"	  ]
[ 1@0,	  "test"	  ]
MALException:removeScenario:scenario 'mil' not found for user 'test'
MALException:addScenario:scenario 'mal' already exists for user 'test'
InvalidCredentialsException:setPassword:The administrator cannot set its own password, use changePassword insteadInvalidCredentialsException:changePassword:Access denied
InvalidCredentialsException:checkCredentials:Invalid credentials for user 'monetdb'
InvalidCredentialsException:checkCredentials:Invalid credentials for user 'monetdb'
InvalidCredentialsException:checkCredentials:Invalid credentials for user 'monetdb'
InvalidCredentialsException:checkCredentials:Invalid credentials for user 'x'

# 23:18:00 >  
# 23:18:00 >  Done.
# 23:18:00 >  

