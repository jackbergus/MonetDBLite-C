stdout of test 'tst830` in directory 'src/mal` itself:


# 20:34:17 >  
# 20:34:17 >  Mtimeout -timeout 60 mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=36259 --set sql_port=40419 --set xquery_port=52492 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst830.mal < /dev/null
# 20:34:17 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/fabian/scratch/monetdb/five/program-x86_64/etc/MonetDB5.conf
# dbfarm:/net/pegasus.ins.cwi.nl/export/scratch0/fabian/vtmp/mtest-five-monetdb-pegasus.ins.cwi.nl/monetdb/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## a simple functional test for the access control table
#
#	scens := bat.new(:str, :oid);
#	bat.insert(scens, "sql", nil:oid);
#	bat.insert(scens, "mal", nil:oid);
#
#	# this should fail, the monetdb user is already there
#	id := clients.addUser("monetdb", "Pmonetdb", scens);
#catch MALException:str;
#	io.printf("%s\n",MALException);
#exit MALException;
#
#	# should print 0@1 or something
#	id := clients.addUser("test", "test", scens);
#	io.print(id);
#
#	# this should work also
#	# don't use nil:bat[:str, :oid] here, it results in a crash
#	t := bat.new(:str, :oid);
#	id := clients.addUser("checkpoint", "Pcheckpoint", t);
#	io.print(id);
#
#	# do a simple listing of users known
#	u := clients.getUsers(t);
#	io.print(u);
#	bat.insert(t, "mal", nil:oid);
#	bat.insert(t, "sql", nil:oid);
#	u := clients.getUsers(t);
#	io.print(u);
#
#	# should work, we're the admin here
#	clients.removeUser("checkpoint");
#
#	# do a simple listing of users known
#	u := clients.getUsers(t);
#	io.print(u);
#
#	# just remove the scenarios one by one, should work
#	clients.removeScenario("test", "mal");
#	clients.removeScenario("test", "sql");
#	# this one should fail: it's not there
#	clients.removeScenario("test", "mil");
#catch MALException:str;
#	io.printf("%s\n",MALException);
#	MALException:= nil:str;
#exit MALException;
#
#	# and add a scenario again
#	clients.addScenario("test", "mal");
#	# do it again, see what happens (should fail)
#	clients.addScenario("test", "mal");
#catch MALException:str;
#	io.printf("%s\n",MALException);
#	MALException:= nil:str;
#exit MALException;
#
#	# forcefully set the password of the user test
#	clients.setPassword("test", "newpass");
#	# now try to set the password for ourself, should fail
#	clients.setPassword("monetdb", "badpass");
#catch InvalidCredentialsException:str;
#	io.printf("%s\n", InvalidCredentialsException);
#exit InvalidCredentialsException;
#
#	# change our own password
#	clients.changePassword("monetdb", "newdb");
#	# try it again, should fail...
#	clients.changePassword("monetdb", "newdb");
#catch InvalidCredentialsException:str;
#	io.printf("%s\n",InvalidCredentialsException);
#	InvalidCredentialsException:= nil:str;
#exit InvalidCredentialsException;
#
#	# all should fail
#	clients.checkPermission("monetdb","Pmonetdb","sql");
#catch InvalidCredentialsException:str;
#	io.printf("%s\n",InvalidCredentialsException);
#	InvalidCredentialsException:= nil:str;
#exit InvalidCredentialsException;
#	clients.checkPermission("monetdb","x","sql");
#catch InvalidCredentialsException:str;
#	io.printf("%s\n",InvalidCredentialsException);
#	InvalidCredentialsException:= nil:str;
#exit InvalidCredentialsException;
#	clients.checkPermission("monetdb","Pmonetdb","x");
#catch InvalidCredentialsException:str;
#	io.printf("%s\n",InvalidCredentialsException);
#	InvalidCredentialsException:= nil:str;
#exit InvalidCredentialsException;
#	clients.checkPermission("x","Pmonetdb","sql");
#catch InvalidCredentialsException:str;
#	io.printf("%s\n",InvalidCredentialsException);
#	InvalidCredentialsException:= nil:str;
#exit InvalidCredentialsException;
#
function user.main():void;
# a simple functional test for the access control table 
    scens := bat.new(:str,:oid);
    bat.insert(scens,"sql",nil:oid);
    bat.insert(scens,"mal",nil:oid);
# this should fail, the monetdb user is already there 
    id := clients.addUser("monetdb","Pmonetdb",scens);
catch MALException:str ;
    io.printf("%s\n",MALException);
exit MALException:str ;
# should print 0@1 or something 
    id := clients.addUser("test","test",scens);
    io.print(id);
# this should work also 
# don't use nil:bat[:str, :oid] here, it results in a crash 
    t := bat.new(:str,:oid);
    id := clients.addUser("checkpoint","Pcheckpoint",t);
    io.print(id);
# do a simple listing of users known 
    u := clients.getUsers(t);
    io.print(u);
    bat.insert(t,"mal",nil:oid);
    bat.insert(t,"sql",nil:oid);
    u := clients.getUsers(t);
    io.print(u);
# should work, we're the admin here 
    clients.removeUser("checkpoint");
# do a simple listing of users known 
    u := clients.getUsers(t);
    io.print(u);
# just remove the scenarios one by one, should work 
    clients.removeScenario("test","mal");
    clients.removeScenario("test","sql");
# this one should fail: it's not there 
    clients.removeScenario("test","mil");
catch MALException:str ;
    io.printf("%s\n",MALException);
    MALException:str  := nil:str;
exit MALException:str ;
# and add a scenario again 
    clients.addScenario("test","mal");
# do it again, see what happens (should fail) 
    clients.addScenario("test","mal");
catch MALException:str ;
    io.printf("%s\n",MALException);
    MALException:str  := nil:str;
exit MALException:str ;
# forcefully set the password of the user test 
    clients.setPassword("test","newpass");
# now try to set the password for ourself, should fail 
    clients.setPassword("monetdb","badpass");
catch InvalidCredentialsException:str ;
    io.printf("%s\n",InvalidCredentialsException);
exit InvalidCredentialsException:str ;
# change our own password 
    clients.changePassword("monetdb","newdb");
# try it again, should fail... 
    clients.changePassword("monetdb","newdb");
catch InvalidCredentialsException:str ;
    io.printf("%s\n",InvalidCredentialsException);
    InvalidCredentialsException:str  := nil:str;
exit InvalidCredentialsException:str ;
# all should fail 
    clients.checkPermission("monetdb","Pmonetdb","sql");
catch InvalidCredentialsException:str ;
    io.printf("%s\n",InvalidCredentialsException);
    InvalidCredentialsException:str  := nil:str;
exit InvalidCredentialsException:str ;
    clients.checkPermission("monetdb","x","sql");
catch InvalidCredentialsException:str ;
    io.printf("%s\n",InvalidCredentialsException);
    InvalidCredentialsException:str  := nil:str;
exit InvalidCredentialsException:str ;
    clients.checkPermission("monetdb","Pmonetdb","x");
catch InvalidCredentialsException:str ;
    io.printf("%s\n",InvalidCredentialsException);
    InvalidCredentialsException:str  := nil:str;
exit InvalidCredentialsException:str ;
    clients.checkPermission("x","Pmonetdb","sql");
catch InvalidCredentialsException:str ;
    io.printf("%s\n",InvalidCredentialsException);
    InvalidCredentialsException:str  := nil:str;
exit InvalidCredentialsException:str ;
end main;
MALException:addUser:user 'monetdb' already exists
[ 1@0 ]
[ 2@0 ]
#-------------------------#
# h	t		  # name
# void	str		  # type
#-------------------------#
[ 0@0,	  "monetdb"	  ]
[ 1@0,	  "test"	  ]
[ 2@0,	  "checkpoint"	  ]
#-------------------------#
# h	t		  # name
# oid	str		  # type
#-------------------------#
[ 0@0,	  "monetdb"	  ]
[ 2@0,	  "checkpoint"	  ]
[ 1@0,	  "test"	  ]
#-------------------------#
# h	t		  # name
# oid	str		  # type
#-------------------------#
[ 0@0,	  "monetdb"	  ]
[ 1@0,	  "test"	  ]
MALException:removeScenario:scenario 'mal' not found for user 'test'
MALException:addScenario:scenario 'mal' already exists for user 'test'
InvalidCredentialsException:setPassword:The administrator cannot set its own password, use changePassword instead
InvalidCredentialsException:changePassword:Access denied
InvalidCredentialsException:checkCredentials:Invalid credentials for user 'monetdb'
InvalidCredentialsException:checkCredentials:Invalid credentials for user 'monetdb'
InvalidCredentialsException:checkCredentials:Invalid credentials for user 'monetdb'
InvalidCredentialsException:checkCredentials:Invalid credentials for user 'x'

# 23:18:00 >  
# 23:18:00 >  Done.
# 23:18:00 >  

