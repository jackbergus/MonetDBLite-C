stdout of test 'tst115` in directory 'src/mal` itself:


# 07:58:59 >  
# 07:58:59 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst115.mal </dev/null
# 07:58:59 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## the next step is to trace the call of a mal function call
#
#command + (L:any_1,R:any_1):any_1 
!ERROR: address of 'user.addIntInt' not found
command user.+(L:any_1,R:any_1):any_1 address addIntInt;	# 0  dynamic (+:any_1)<-(L:any_1)(R:any_1)
#
#function doitOnce():int;
#	z:= 12;
#	return z;
#end doitOnce;
function user.doitOnce():int;	# 0  (doitOnce:int)
    z := 12;	# 1  (z:int)<-(_2:int)
    return z;	# 2  (z:int)
end doitOnce;	# 3  
#
#function doitTwice(i:int):int;
#	j:= 2;
#	k:= 11111;
#	i:= j+k;
#	return i;
#end doitTwice;
function user.doitTwice(i:int):int;	# 0  (doitTwice:int)<-(i:int)
    j := 2;	# 1  (j:int)<-(_3:int)
    k := 11111;	# 2  (k:int)<-(_5:int)
    i := calc.+(j,k);	# 3 CALCbinaryADDintint (i:int)<-(j:int)(k:int)
    return i;	# 4  (i:int)
end doitTwice;	# 5  
#
#
#a:=1;
#b:= doitOnce();
#c:= 2;
#d:= doitTwice(3);
#c:= 3;
#d:= doitTwice("wrong");
#
!ERROR: 'user.doitTwice' undefined in user.main[7] d:int := user.doitTwice(_9:str)
function user.main():void;	# 0  (main:void)
# the next step is to trace the call of a mal function call 	# 1  (_1:str)
    a := 1;	# 2  (a:int)<-(_3:int)
    b := user.doitOnce();	# 3  (b:int)
    c := 2;	# 4  (c:int)<-(_6:int)
    d := user.doitTwice(3);	# 5  (d:int)<-(_8:int)
    c := 3;	# 6  (c:int)<-(_8:int)
    d := user.doitTwice("wrong");	# 7  unknown (d:int)<-(_9:str)
end main;	# 8  

# 07:59:00 >  
# 07:59:00 >  Done.
# 07:59:00 >  

