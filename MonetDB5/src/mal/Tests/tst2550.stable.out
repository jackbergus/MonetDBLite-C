stdout of test 'tst2550` in directory 'src/mal` itself:


# 08:01:09 >  
# 08:01:09 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst2550.mal </dev/null
# 08:01:09 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## Factory functions seem to provide a better control structure
#
#factory random(seed:int) (noes:bit,val:int);
#	i:= seed;
#barrier L:= true;
#	i:= 125 *i;
#	i:= i % 32767;
#	yield (noes,val):=(true,i);
#	redo L;
#exit L;
#	return (noes,val):=(false,seed);
#end;
factory user.random(seed:int) (noes:bit,val:int);	# 0  (noes:bit)(val:int)<-(seed:int)
    i := seed;	# 1  (i:int)<-(seed:int)
barrier L := true;	# 2  (L:bit)<-(_6:bit) jump 7
    i := calc.*(125,i);	# 3 CALCbinaryMULintint (i:int)<-(_7:int)(i:int)
    i := calc.%(i,32767);	# 4 CALCbinaryMODintint (i:int)<-(i:int)(_8:int)
    yield (noes,val):= (true,i);	# 5  (noes:bit)(val:int)<-(_6:bit)(i:int)
    redo L;	# 6  (L:bit) jump 3
exit L;	# 7  (L:bit)
    return (noes,val):= (false,seed);	# 8  (noes:bit)(val:int)<-(_9:bit)(seed:int)
end random;	# 9  
#
function user.main():void;	# 0  (main:void)
# Factory functions seem to provide a better control structure 	# 1  (_2:str)
end main;	# 2  

# 08:01:09 >  
# 08:01:09 >  Done.
# 08:01:09 >  

