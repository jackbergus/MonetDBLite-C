stdout of test 'tst201` in directory 'src/mal` itself:


# 07:59:19 >  
# 07:59:19 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst201.mal </dev/null
# 07:59:19 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## Mil compiler Version 1.0)
## Copyright (c) 1993-2001, CWI. All rights reserved.
#
## Predefined code segment
##use "mal/iterator";		CAUSES an ERROR!!
#	_v0:= oid(20000000);
#	_v1:= setoid(_v0);
##setoid(oid(20000000));
###test basic functionality of the BAT library.
###focussed on strings
###it includes insertions,deletions,selections, and joins.
##
#	_v2:= new(:str,:int);
#	b := _v2;
##b:= new(str,int);
#	_v3:= insert(b,"the",1);
##b.insert("the",1);
#	_v4:= insert(b,"quick",2);
##b.insert("quick",2);
#	_v5:= insert(b,"brown",3);
##b.insert("brown",3);
#	_v6:= insert(b,"fox",4);
##b.insert("fox",4);
#	_v7:= insert(b,"jumps",5);
##b.insert("jumps",5);
#	_v8:= insert(b,"over",6);
##b.insert("over",6);
#	_v9:= insert(b,"lazy",7);
##b.insert("lazy",7);
#	_v10:= insert(b,"dog",8);
##b.insert("dog",8);
#	_v11:= str(nil);
#	_v12:= insert(b,_v11,9);
##b.insert(str(nil),9);
#	_v13:= insert(b,".",10);
##b.insert(".",10);
#	_v14:= int(nil);
#	_v15:= insert(b,"",_v14);
##b.insert("",int(nil));
#	_v16:= str(nil);
#	_v17:= int(nil);
#	_v18:= insert(b,_v16,_v17);
##b.insert(str(nil),int(nil));
#	_v19:= print(b);
##b.print;
##
##
### Testing simple retrievals
#	_v20:= find(b,"the");
#	_v21:= print(_v20);
##b.find("the").print;
#	_v22:= find(b,"fox");
#	_v23:= print(_v22);
##b.find("fox").print;
#	_v24:= str(nil);
#	_v25:= find(b,_v24);
#	_v26:= print(_v25);
##b.find(str(nil)).print;
### This should cause an error
#	_v27:= find(b,"cat");
#	_v28:= print(_v27);
#catch MALException;
#	print(MALException);
#exit  MALException;
##b.find("cat").print;
##
### Can we delete them and re-insert them later on
#	_v29:= delete(b,"fox",4);
##b.delete("fox",4);
#	_v30:= delete(b,"the",1);
##b.delete("the",1);
#	_v31:= delete(b,".",10);
##b.delete(".",10);
#	_v32:= print(b);
##b.print;
##
#	_v33:= insert(b,"fox",4);
##b.insert("fox",4);
#	_v34:= insert(b,"the",1);
##b.insert("the",1);
#	_v35:= insert(b,".",10);
##b.insert(".",10);
#	_v36:= count(b);
#	_v37:= print(_v36);
##b.count.print;
##
### Lets cut out a few sections
#	_v38:= select(b,2,4);
#	_v39:= print(_v38);
##b.select(2,4).print;
#	_v40:= int(nil);
#	_v41:= select(b,7,_v40);
#	_v42:= print(_v41);
##b.select(7,int(nil)).print;
#	_v43:= int(nil);
#	_v44:= int(nil);
#	_v45:= select(b,_v43,_v44);
#	_v46:= print(_v45);
##b.select(int(nil),int(nil)).print;
##
### A 2-dimensional cut
#	_v47:= fragment(b,"fox","quick",1,5);
#	bns := _v47;
#	_v48:= print(bns);
##bns:=b.fragment("fox","quick",1,5);bns.print;
#	_v49:= str(nil);
#	_v50:= fragment(b,"fox",_v49,1,5);
#	_v51:= print(_v50);
##b.fragment("fox",str(nil),1,5).print;
#	_v52:= str(nil);
#	_v53:= int(nil);
#	_v54:= int(nil);
#	_v55:= fragment(b,"fox",_v52,_v53,_v54);
#	_v56:= print(_v55);
##b.fragment("fox",str(nil),int(nil),int(nil)).print;
#	_v57:= str(nil);
#	_v58:= int(nil);
#	_v59:= int(nil);
#	_v60:= fragment(b,_v57,"f",_v58,_v59);
#	_v61:= print(_v60);
##b.fragment(str(nil),"f",int(nil),int(nil)).print;
#	_v62:= reverse(b);
#	_v63:= int(nil);
#	_v64:= int(nil);
#	_v65:= str(nil);
#	_v66:= fragment(_v62,_v63,_v64,_v65,"f");
#	_v67:= print(_v66);
##b.reverse.fragment(int(nil),int(nil),str(nil),"f").print;
##
#	_v68:= reverse(bns);
#	_v69:= join(b,_v68);
#	bnj := _v69;
##bnj:= b.join(bns.reverse);
#	_v70:= print(bnj);
##bnj.print;
##
#	_v71:= reverse(bnj);
#	_v72:= semijoin(b,_v71);
#	bnk := _v72;
##bnk:= b.semijoin(bnj.reverse);
#	_v73:= print(bnk);
##bnk.print;
##
### testing the like command
#	_v74:= reverse(b);
#	_v75:= like(_v74,"ox");
#	_v76:= print(_v75);
##b.reverse.like("ox").print;
#	_v77:= reverse(b);
#	_v78:= like(_v77,"fo");
#	_v79:= print(_v78);
##b.reverse.like("fo").print;
#	_v80:= reverse(b);
#	_v81:= like(_v80,"fox");
#	_v82:= print(_v81);
##b.reverse.like("fox").print;
#	_v83:= reverse(b);
#	_v84:= like(_v83," fox");
#	_v85:= print(_v84);
##b.reverse.like(" fox").print;
##quit;
#
function user.main():void;              #  0 main:void := user.main() {G}
# Mil compiler Version 1.0) 
# Copyright (c) 1993-2001, CWI. All rights reserved. 
# Predefined code segment 
#use "mal/iterator";		CAUSES an ERROR!! 
    v0 := calc.oid(20000000);           #  5 v0:oid := CALCint2oid(_6:int) 
    v1 := calc.setoid(v0);              #  6 v1:oid := CALCsetoidInc(v0:oid) 
#setoid(oid(20000000)); 
##test basic functionality of the BAT library. 
##focussed on strings 
##it includes bat.insertions,deletions,selections, and joins. 
    v2 := bat.new(:str,:oid);           # 11 v2:bat[:str,:oid] := CMDBATnew(_13:str, _14:oid) {G}
    b := v2;                            # 12 b:bat[:str,:oid] := v2:bat[:str,:oid] {G}
#b:= new(str,int); 
    v3 := bat.insert(b,"the",1@0);      # 14 v3:bat[:str,:oid] := BKCinsert_bun(b:bat[:str,:oid], _18:str, _19:oid) {G}
#b.insert("the",1); 
    v4 := bat.insert(b,"quick",2@0);    # 16 v4:bat[:str,:oid] := BKCinsert_bun(b:bat[:str,:oid], _22:str, _23:oid) {G}
#b.insert("quick",2); 
    v5 := bat.insert(b,"brown",3@0);    # 18 v5:bat[:str,:oid] := BKCinsert_bun(b:bat[:str,:oid], _26:str, _27:oid) {G}
#b.insert("brown",3); 
    v6 := bat.insert(b,"fox",4@0);      # 20 v6:bat[:str,:oid] := BKCinsert_bun(b:bat[:str,:oid], _30:str, _31:oid) {G}
#b.insert("fox",4); 
    v7 := bat.insert(b,"jumps",5@0);    # 22 v7:bat[:str,:oid] := BKCinsert_bun(b:bat[:str,:oid], _34:str, _35:oid) {G}
#b.insert("jumps",5); 
    v8 := bat.insert(b,"over",6@0);     # 24 v8:bat[:str,:oid] := BKCinsert_bun(b:bat[:str,:oid], _38:str, _39:oid) {G}
#b.insert("over",6); 
    v9 := bat.insert(b,"lazy",7@0);     # 26 v9:bat[:str,:oid] := BKCinsert_bun(b:bat[:str,:oid], _42:str, _43:oid) {G}
#b.insert("lazy",7); 
    v10 := bat.insert(b,"dog",8@0);     # 28 v10:bat[:str,:oid] := BKCinsert_bun(b:bat[:str,:oid], _46:str, _47:oid) {G}
#b.insert("dog",8); 
    v11 := calc.str(nil:void);          # 30 v11:str := CALCnil2str(_50:void) {G}
    v12 := bat.insert(b,v11,9@0);       # 31 v12:bat[:str,:oid] := BKCinsert_bun(b:bat[:str,:oid], v11:str, _52:oid) {G}
#b.insert(str(nil),9); 
    v13 := bat.insert(b,".",10@0);      # 33 v13:bat[:str,:oid] := BKCinsert_bun(b:bat[:str,:oid], _55:str, _56:oid) {G}
#b.insert(".",10); 
    v14 := calc.oid(nil:void);          # 35 v14:oid := CALCnil2oid(_50:void) 
    v15 := bat.insert(b,"",v14);        # 36 v15:bat[:str,:oid] := BKCinsert_bun(b:bat[:str,:oid], _60:str, v14:oid) {G}
#b.insert("",int(nil)); 
    v16 := calc.str(nil:void);          # 38 v16:str := CALCnil2str(_50:void) {G}
    v17 := calc.oid(nil:void);          # 39 v17:oid := CALCnil2oid(_50:void) 
    v18 := bat.insert(b,v16,v17);       # 40 v18:bat[:str,:oid] := BKCinsert_bun(b:bat[:str,:oid], v16:str, v17:oid) {G}
#b.insert(str(nil),int(nil)); 
    v19 := io.print(b);                 # 42 v19:void := IOprint_val(b:bat[:str,:oid]) 
#b.print; 
## Testing simple retrievals 
    v20 := algebra.find(b,"the");       # 45 v20:oid := ALGfind(b:bat[:str,:oid], _70:str) 
    v21 := io.print(v20);               # 46 v21:void := IOprint_val(v20:oid) 
#b.find("the").print; 
    v22 := algebra.find(b,"fox");       # 48 v22:oid := ALGfind(b:bat[:str,:oid], _74:str) 
    v23 := io.print(v22);               # 49 v23:void := IOprint_val(v22:oid) 
#b.find("fox").print; 
    v24 := calc.str(nil:void);          # 51 v24:str := CALCnil2str(_50:void) {G}
    v25 := algebra.find(b,v24);         # 52 v25:oid := ALGfind(b:bat[:str,:oid], v24:str) 
    v26 := io.print(v25);               # 53 v26:void := IOprint_val(v25:oid) 
#b.find(str(nil)).print; 
## This should cause an error 
    v27 := algebra.find(b,"cat");       # 56 v27:oid := ALGfind(b:bat[:str,:oid], _83:str) 
    v28 := io.print(v27);               # 57 v28:void := IOprint_val(v27:oid) 
catch MALException:str ;                # 58 MALException:str {J60}
    io.print(MALException);             # 59 _86:void := IOprint_val(MALException:str) 
exit MALException:str ;                 # 60 MALException:str 
#b.find("cat").print; 
## Can we bat.delete them and re-insert them later on 
    v29 := bat.delete(b,"fox",4@0);     # 63 v29:bat[:str,:oid] := BKCdelete_bun(b:bat[:str,:oid], _74:str, _90:oid) {G}
#b.delete("fox",4); 
    v30 := bat.delete(b,"the",1@0);     # 65 v30:bat[:str,:oid] := BKCdelete_bun(b:bat[:str,:oid], _70:str, _93:oid) {G}
#b.delete("the",1); 
    v31 := bat.delete(b,".",10@0);      # 67 v31:bat[:str,:oid] := BKCdelete_bun(b:bat[:str,:oid], _96:str, _97:oid) {G}
#b.delete(".",10); 
    v32 := io.print(b);                 # 69 v32:void := IOprint_val(b:bat[:str,:oid]) 
#b.print; 
    v33 := bat.insert(b,"fox",4@0);     # 71 v33:bat[:str,:oid] := BKCinsert_bun(b:bat[:str,:oid], _74:str, _90:oid) {G}
#b.insert("fox",4); 
    v34 := bat.insert(b,"the",1@0);     # 73 v34:bat[:str,:oid] := BKCinsert_bun(b:bat[:str,:oid], _104:str, _93:oid) {G}
#b.insert("the",1); 
    v35 := bat.insert(b,".",10@0);      # 75 v35:bat[:str,:oid] := BKCinsert_bun(b:bat[:str,:oid], _96:str, _97:oid) {G}
#b.insert(".",10); 
    v36 := aggr.count(b);               # 77 v36:int := ALGcount_bat(b:bat[:str,:oid]) 
    v37 := io.print(v36);               # 78 v37:void := IOprint_val(v36:int) 
#b.count.print; 
## Lets cut out a few sections 
    v38 := algebra.select(b,2@0,4@0);   # 81 v38:bat[:str,:oid] := ALGselect(b:bat[:str,:oid], _113:oid, _90:oid) {G}
    v39 := io.print(v38);               # 82 v39:void := IOprint_val(v38:bat[:str,:oid]) 
#b.select(2,4).print; 
    v40 := calc.oid(nil:void);          # 84 v40:oid := CALCnil2oid(_117:void) 
    v41 := algebra.select(b,7@0,v40);   # 85 v41:bat[:str,:oid] := ALGselect(b:bat[:str,:oid], _119:oid, v40:oid) {G}
    v42 := io.print(v41);               # 86 v42:void := IOprint_val(v41:bat[:str,:oid]) 
#b.select(7,int(nil)).print; 
    v43 := calc.oid(nil:void);          # 88 v43:oid := CALCnil2oid(_117:void) 
    v44 := calc.oid(nil:void);          # 89 v44:oid := CALCnil2oid(_117:void) 
    v45 := algebra.select(b,v43,v44);   # 90 v45:bat[:str,:oid] := ALGselect(b:bat[:str,:oid], v43:oid, v44:oid) {G}
    v46 := io.print(v45);               # 91 v46:void := IOprint_val(v45:bat[:str,:oid]) 
#b.select(int(nil),int(nil)).print; 
## A 2-dimensional cut 
    v47 := algebra.fragment(b,"fox","quick",1@0,5@0);# 94 v47:bat[:str,:oid] := ALGfragment(b:bat[:str,:oid], _129:str, _130:str, _131:oid, _132:oid) {G}
    bns := v47;                         # 95 bns:bat[:str,:oid] := v47:bat[:str,:oid] {G}
    v48 := io.print(bns);               # 96 v48:void := IOprint_val(bns:bat[:str,:oid]) 
#bns:=b.fragment("fox","quick",1,5);bns.print; 
    v49 := calc.str(nil:void);          # 98 v49:str := CALCnil2str(_117:void) {G}
    v50 := algebra.fragment(b,"fox",v49,1@0,5@0);# 99 v50:bat[:str,:oid] := ALGfragment(b:bat[:str,:oid], _129:str, v49:str, _131:oid, _132:oid) {G}
    v51 := io.print(v50);               #100 v51:void := IOprint_val(v50:bat[:str,:oid]) 
#b.fragment("fox",str(nil),1,5).print; 
    v52 := calc.str(nil:void);          #102 v52:str := CALCnil2str(_117:void) {G}
    v53 := calc.oid(nil:void);          #103 v53:oid := CALCnil2oid(_117:void) 
    v54 := calc.oid(nil:void);          #104 v54:oid := CALCnil2oid(_117:void) 
    v55 := algebra.fragment(b,"fox",v52,v53,v54);#105 v55:bat[:str,:oid] := ALGfragment(b:bat[:str,:oid], _129:str, v52:str, v53:oid, v54:oid) {G}
    v56 := io.print(v55);               #106 v56:void := IOprint_val(v55:bat[:str,:oid]) 
#b.fragment("fox",str(nil),int(nil),int(nil)).print; 
    v57 := calc.str(nil:void);          #108 v57:str := CALCnil2str(_117:void) {G}
    v58 := calc.oid(nil:void);          #109 v58:oid := CALCnil2oid(_117:void) 
    v59 := calc.oid(nil:void);          #110 v59:oid := CALCnil2oid(_117:void) 
    v60 := algebra.fragment(b,v57,"f",v58,v59);#111 v60:bat[:str,:oid] := ALGfragment(b:bat[:str,:oid], v57:str, _150:str, v58:oid, v59:oid) {G}
    v61 := io.print(v60);               #112 v61:void := IOprint_val(v60:bat[:str,:oid]) 
#b.fragment(str(nil),"f",int(nil),int(nil)).print; 
    v62 := bat.reverse(b);              #114 v62:bat[:oid,:str] := BKCreverse(b:bat[:str,:oid]) {G}
    v63 := calc.oid(nil:void);          #115 v63:oid := CALCnil2oid(_155:void) 
    v64 := calc.oid(nil:void);          #116 v64:oid := CALCnil2oid(_155:void) 
    v65 := calc.str(nil:void);          #117 v65:str := CALCnil2str(_155:void) {G}
    v66 := algebra.fragment(v62,v63,v64,v65,"f");#118 v66:bat[:oid,:str] := ALGfragment(v62:bat[:oid,:str], v63:oid, v64:oid, v65:str, _150:str) {G}
    v67 := io.print(v66);               #119 v67:void := IOprint_val(v66:bat[:oid,:str]) 
#b.reverse.fragment(int(nil),int(nil),str(nil),"f").print; 
    v68 := bat.reverse(bns);            #121 v68:bat[:oid,:str] := BKCreverse(bns:bat[:str,:oid]) {G}
    v69 := algebra.join(b,v68);         #122 v69:bat[:str,:str] := ALGjoin(b:bat[:str,:oid], v68:bat[:oid,:str]) {G}
    bnj := v69;                         #123 bnj:bat[:str,:str] := v69:bat[:str,:str] {G}
#bnj:= b.join(bns.reverse); 
    v70 := io.print(bnj);               #125 v70:void := IOprint_val(bnj:bat[:str,:str]) 
#bnj.print; 
    v71 := bat.reverse(bnj);            #127 v71:bat[:str,:str] := BKCreverse(bnj:bat[:str,:str]) {G}
    v72 := algebra.semijoin(b,v71);     #128 v72:bat[:str,:oid] := ALGsemijoin(b:bat[:str,:oid], v71:bat[:str,:str]) {G}
    bnk := v72;                         #129 bnk:bat[:str,:oid] := v72:bat[:str,:oid] {G}
#bnk:= b.semijoin(bnj.reverse); 
    v73 := io.print(bnk);               #131 v73:void := IOprint_val(bnk:bat[:str,:oid]) 
#bnk.print; 
## testing the algebra.like command 
    v74 := bat.reverse(b);              #134 v74:bat[:oid,:str] := BKCreverse(b:bat[:str,:oid]) {G}
    v75 := algebra.like(v74,"ox");      #135 v75:bat[:oid,:str] := ALGlike(v74:bat[:oid,:str], _176:str) {G}
    v76 := io.print(v75);               #136 v76:void := IOprint_val(v75:bat[:oid,:str]) 
#b.reverse.like("ox").print; 
    v77 := bat.reverse(b);              #138 v77:bat[:oid,:str] := BKCreverse(b:bat[:str,:oid]) {G}
    v78 := algebra.like(v77,"fo");      #139 v78:bat[:oid,:str] := ALGlike(v77:bat[:oid,:str], _181:str) {G}
    v79 := io.print(v78);               #140 v79:void := IOprint_val(v78:bat[:oid,:str]) 
#b.reverse.like("fo").print; 
    v80 := bat.reverse(b);              #142 v80:bat[:oid,:str] := BKCreverse(b:bat[:str,:oid]) {G}
    v81 := algebra.like(v80,"fox");     #143 v81:bat[:oid,:str] := ALGlike(v80:bat[:oid,:str], _186:str) {G}
    v82 := io.print(v81);               #144 v82:void := IOprint_val(v81:bat[:oid,:str]) 
#b.reverse.like("fox").print; 
    v83 := bat.reverse(b);              #146 v83:bat[:oid,:str] := BKCreverse(b:bat[:str,:oid]) {G}
    v84 := algebra.like(v83," fox");    #147 v84:bat[:oid,:str] := ALGlike(v83:bat[:oid,:str], _191:str) {G}
    v85 := io.print(v84);               #148 v85:void := IOprint_val(v84:bat[:oid,:str]) 
#b.reverse.like(" fox").print; 
#quit; 
end main;                               #151  
#-------------------------#
# h		t	  # name
# str		oid	  # type
#-------------------------#
[ "the",	  1@0	  ]
[ "quick",	  2@0	  ]
[ "brown",	  3@0	  ]
[ "fox",	  4@0	  ]
[ "jumps",	  5@0	  ]
[ "over",	  6@0	  ]
[ "lazy",	  7@0	  ]
[ "dog",	  8@0	  ]
[ nil,		  9@0	  ]
[ ".",		  10@0	  ]
[ "",		  nil	  ]
[ nil,		  nil	  ]
[ 1@0 ]
[ 4@0 ]
[ nil ]
[ "MALException:algebra.find:can not find element" ]
#-------------------------#
# h		tmp_4	  # name
# str		int	  # type
#-------------------------#
[ "",		  nil	  ]
[ "quick",	  2@0	  ]
[ "brown",	  3@0	  ]
[ nil,		  nil	  ]
[ "jumps",	  5@0	  ]
[ "over",	  6@0	  ]
[ "lazy",	  7@0	  ]
[ "dog",	  8@0	  ]
[ nil,		  9@0	  ]
[ 12 ]
#-------------------------#
# h		tmp_5	  # name
# str		int	  # type
#-------------------------#
[ "quick",	  2@0	  ]
[ "brown",	  3@0	  ]
[ "fox",	  4@0	  ]
#-----------------#
# h	tmp_6	  # name
# str	int	  # type
#-----------------#
[ "lazy", 7@0	  ]
[ "dog",  8@0	  ]
[ nil,	  9@0	  ]
[ ".",	  10@0	  ]
#-------------------------#
# h		t	  # name
# str		oid	  # type
#-------------------------#
[ "quick",	  2@0	  ]
[ "brown",	  3@0	  ]
[ "jumps",	  5@0	  ]
[ "over",	  6@0	  ]
[ "lazy",	  7@0	  ]
[ "dog",	  8@0	  ]
[ nil,		  9@0	  ]
[ "fox",	  4@0	  ]
[ "the",	  1@0	  ]
[ ".",		  10@0	  ]
#-------------------------#
# h		t	  # name
# str		oid	  # type
#-------------------------#
[ "quick",	  2@0	  ]
[ "jumps",	  5@0	  ]
[ "fox",	  4@0	  ]
#-------------------------#
# h		t	  # name
# str		oid	  # type
#-------------------------#
[ "quick",	  2@0	  ]
[ "jumps",	  5@0	  ]
[ "fox",	  4@0	  ]
[ "the",	  1@0	  ]
#-------------------------#
# h		t	  # name
# str		oid	  # type
#-------------------------#
[ "quick",	  2@0	  ]
[ "jumps",	  5@0	  ]
[ "over",	  6@0	  ]
[ "lazy",	  7@0	  ]
[ "fox",	  4@0	  ]
[ "the",	  1@0	  ]
#-------------------------#
# h		tmp_11	  # name
# str		int	  # type
#-------------------------#
[ "",		  nil	  ]
[ "brown",	  3@0	  ]
[ nil,		  nil	  ]
[ "dog",	  8@0	  ]
[ nil,		  9@0	  ]
[ ".",		  10@0	  ]
#-------------------------#
# h	tmp_12		  # name
# int	str		  # type
#-------------------------#
[ nil,	  ""		  ]
[ 3@0,	  "brown"	  ]
[ nil,	  nil		  ]
[ 8@0,	  "dog"		  ]
[ 9@0,	  nil		  ]
[ 10@0,	  "."		  ]
#---------------------------------#
# h		tmp_13		  # name
# str		str		  # type
#---------------------------------#
[ "quick",	  "quick"	  ]
[ "jumps",	  "jumps"	  ]
[ "fox",	  "fox"		  ]
#-------------------------#
# h		tmp_14	  # name
# str		int	  # type
#-------------------------#
[ "quick",	  2@0	  ]
[ "jumps",	  5@0	  ]
[ "fox",	  4@0	  ]
#-----------------#
# h	tmp_15	  # name
# int	str	  # type
#-----------------#
[ 4@0,	  "fox"	  ]
#-----------------#
# h	tmp_16	  # name
# int	str	  # type
#-----------------#
[ 4@0,	  "fox"	  ]
#-----------------#
# h	tmp_17	  # name
# int	str	  # type
#-----------------#
[ 4@0,	  "fox"	  ]
#-----------------#
# h	tmp_18	  # name
# int	str	  # type
#-----------------#

# 07:59:19 >  
# 07:59:19 >  Done.
# 07:59:19 >  

