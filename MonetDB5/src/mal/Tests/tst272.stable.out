stdout of test 'tst272` in directory 'src/mal` itself:


# 21:45:33 >  
# 21:45:33 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=47702 --set sql_port=53059 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst272.mal </dev/null
# 21:45:33 >  

# Monet Database Server V4.7.3
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
##Same as tst270, but includes testing of the profiler trace
#
#profiler.activate("ticks");
##profiler.activate("pc");
#profiler.activate("statement");
#profiler.setFilter("*","insert");
#
#o:=oid(20000000);
#setoid(o);
##test basic functionality of the BAT library.
##focussed on integers
##it includes insertions,deletions,selections, and joins.
#
#b:= new(:int,:int);
#profiler.startTrace();
#err := insert(b,1,15);
#err := insert(b,2,4);
#n0  := int(nil);
#err := insert(b,3,n0);
#err := insert(b,4,16);
#err := insert(b,5,25);
#err := insert(b,6,36);
#err := insert(b,7,49);
#err := insert(b,8,64);
#err := insert(b,9,n0);
#err := insert(b,n0,n0);
#err := insert(b,n0,81);
#print(b);
#print(b,b,b);
#profiler.stopTrace();
#t:= profiler.getTrace("ticks");
#print(t);
#s:= profiler.getTrace("statement");
#print(s);
#print(t,s);
#
function user.main():void;              #  0 main:void := user.main() {G}
#Same as tst270, but includes testing of the profiler trace 
    profiler.activate("ticks");         #  2 _2:void := CMDactivateProfiler(_3:str) 
#profiler.activate("pc"); 
    profiler.activate("statement");     #  4 _5:void := CMDactivateProfiler(_6:str) 
    profiler.setFilter("*","insert");   #  5 _7:void := CMDsetFilterProfiler(_8:str, _9:str) 
    o := calc.oid(20000000);            #  6 o:oid := CALCint2oid(_11:int) 
    calc.setoid(o);                     #  7 _12:oid := CALCsetoidInc(o:oid) 
    b := bat.new(:int,:int);            #  8 b:bat[:int,:int] := CMDBATnew(_14:int, _15:int) {G}
#test basic functionality of the BAT library. 
#focussed on integers 
#it includes insertions,deletions,selections, and joins. 
    profiler.start();                   # 12 _19:void := CMDstartProfiler() 
    err := bat.insert(b,1,15);          # 13 err:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _21:int, _22:int) {G}
    err := bat.insert(b,2,4);           # 14 err:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _23:int, _24:int) {G}
    n0 := calc.int(nil:void);           # 15 n0:int := CALCnil2int(_26:void) 
    err := bat.insert(b,3,n0);          # 16 err:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _27:int, n0:int) {G}
    err := bat.insert(b,4,16);          # 17 err:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _24:int, _28:int) {G}
    err := bat.insert(b,5,25);          # 18 err:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _29:int, _30:int) {G}
    err := bat.insert(b,6,36);          # 19 err:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _31:int, _32:int) {G}
    err := bat.insert(b,7,49);          # 20 err:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _33:int, _34:int) {G}
    err := bat.insert(b,8,64);          # 21 err:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _35:int, _36:int) {G}
    err := bat.insert(b,9,n0);          # 22 err:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _37:int, n0:int) {G}
    err := bat.insert(b,n0,n0);         # 23 err:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], n0:int, n0:int) {G}
    err := bat.insert(b,n0,81);         # 24 err:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], n0:int, _38:int) {G}
    io.print(b);                        # 25 _39:void := IOprint_val(b:bat[:int,:int]) 
    io.print(b,b,b);                    # 26 _40:void := IOtable(b:bat[:int,:int], b:bat[:int,:int], b:bat[:int,:int]) 
    profiler.stop();                    # 27 _41:void := CMDstopProfiler() 
    io.printf("#~BeginVariableOutput~#\n");# 28 _42:void := IOprint_str(_43:str) 
    t := profiler.getTrace("ticks");    # 29 t:bat[:int,:any] := CMDgetTrace(_45:str) {G}
#io.print(t); 
    s := profiler.getTrace("statement");# 31 s:bat[:int,:any] := CMDgetTrace(_48:str) {G}
#io.print(s); 
#io.print(t,s); 
    io.printf("#~EndVariableOutput~#\n");# 34 _51:void := IOprint_str(_52:str) 
    profiler.cleanup();                 # 35 _53:void := CMDcleanup() 
end main;	# 36  
#-----------------#
# h	tmp_13	  # name
# int	int	  # type
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
#---------------------------------#
# h	tmp_13	tmp_13	tmp_13	  # name
# int	int	int	int	  # type
#---------------------------------#
[ 1,	  15,	  15,	  15	  ]
[ 2,	  4,	  4,	  4	  ]
[ 3,	  nil,	  nil,	  nil	  ]
[ 4,	  16,	  16,	  16	  ]
[ 5,	  25,	  25,	  25	  ]
[ 6,	  36,	  36,	  36	  ]
[ 7,	  49,	  49,	  49	  ]
[ 8,	  64,	  64,	  64	  ]
[ 9,	  nil,	  nil,	  nil	  ]
#~BeginVariableOutput~#
#~EndVariableOutput~#

# 21:45:33 >  
# 21:45:33 >  Done.
# 21:45:33 >  

