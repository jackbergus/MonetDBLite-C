stdout of test 'tst602` in directory 'src/mal` itself:


# 08:01:24 >  
# 08:01:24 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst602.mal </dev/null
# 08:01:24 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## Testing the box interfaces
## open de MIL support box and display its content
#
#include mil;
#mil.open();
#barrier (v,nme):= mil.iterator();
#	print(nme);
#	redo (v,nme):=mil.iterator();
#exit v;
#mil.close();	# save the content on persistent store
#
function user.main():void;	# 0  (main:void)
# Testing the box interfaces 	# 1  (_1:str)
# open de MIL support box and display its content 	# 2  (_2:str)
#line 33 "/ufs/mk/monet5/src/mil/mil.mx" 	# 3  (_3:str)
# mil.line is obsolete, produced by previous compiler 	# 4  (_4:str)
#line 39 "/ufs/mk/monet5/src/modules/mil/mil_utils.mx" 	# 5  (_5:str)
#line 92 "/ufs/mk/monet5/src/modules/mil/mil_utils.mx" 	# 6  (_6:str)
#line 97 "/ufs/mk/monet5/src/modules/mil/mil_utils.mx" 	# 7  (_7:str)
#line 153 "/ufs/mk/monet5/src/modules/mil/mil_utils.mx" 	# 8  (_8:str)
    mil_utils.prelude();	# 9 MILutils_prelude (_9:void)
#theta join operator encoding 	# 10  (_10:str)
    EQ := 0;	# 11  (EQ:int)<-(_12:int)
    LT := -1;	# 12  (LT:int)<-(_14:int)
    LE := -2;	# 13  (LE:int)<-(_16:int)
    GT := 1;	# 14  (GT:int)<-(_18:int)
    GE := 2;	# 15  (GE:int)<-(_20:int)
    STORE_MEM := 0;	# 16  (STORE_MEM:int)<-(_12:int)
    STORE_MMAP := 1;	# 17  (STORE_MMAP:int)<-(_18:int)
    STORE_COMPR := 2;	# 18  (STORE_COMPR:int)<-(_20:int)
    BUF_NORMAL := 0;	# 19  (BUF_NORMAL:int)<-(_12:int)
    BUF_RANDOM := 1;	# 20  (BUF_RANDOM:int)<-(_18:int)
    BUF_SEQUENTIAL := 2;	# 21  (BUF_SEQUENTIAL:int)<-(_20:int)
    BUF_WILLNEED := 3;	# 22  (BUF_WILLNEED:int)<-(_28:int)
    BUF_DONTNEED := 4;	# 23  (BUF_DONTNEED:int)<-(_30:int)
    EBUSY := 16;	# 24  (EBUSY:int)<-(_32:int)
    BAT_READ := 1;	# 25  (BAT_READ:int)<-(_18:int)
# allow only read access. 	# 26  (_34:str)
    BAT_APPEND := 2;	# 27  (BAT_APPEND:int)<-(_20:int)
# allow reads and insertions. 	# 28  (_36:str)
    BAT_WRITE := 0;	# 29  (BAT_WRITE:int)<-(_12:int)
# allow reads, insertions, and updates. 	# 30  (_38:str)
    M_E := 2.7182818284590451;	# 31  (M_E:dbl)<-(_40:dbl)
    M_LOG2E := 1.4426950408889634;	# 32  (M_LOG2E:dbl)<-(_42:dbl)
    M_LOG10E := 0.43429448190325182;	# 33  (M_LOG10E:dbl)<-(_44:dbl)
    M_LN2 := 0.69314718055994529;	# 34  (M_LN2:dbl)<-(_46:dbl)
    M_LN10 := 2.3025850929940459;	# 35  (M_LN10:dbl)<-(_48:dbl)
    M_PI := 3.1415926535897931;	# 36  (M_PI:dbl)<-(_50:dbl)
    M_PI_2 := 1.5707963267948966;	# 37  (M_PI_2:dbl)<-(_52:dbl)
    M_PI_4 := 0.78539816339744828;	# 38  (M_PI_4:dbl)<-(_54:dbl)
    M_1_PI := 0.31830988618379069;	# 39  (M_1_PI:dbl)<-(_56:dbl)
    M_2_PI := 0.63661977236758138;	# 40  (M_2_PI:dbl)<-(_58:dbl)
    M_2_SQRTPI := 1.1283791670955126;	# 41  (M_2_SQRTPI:dbl)<-(_60:dbl)
    M_SQRT2 := 1.4142135623730951;	# 42  (M_SQRT2:dbl)<-(_62:dbl)
    M_SQRT1_2 := 0.70710678118654757;	# 43  (M_SQRT1_2:dbl)<-(_64:dbl)
    mil.deposit("EQ",EQ);	# 44 MILdeposit (_65:void)<-(_66:str)(EQ:int)
    mil.deposit("LT",LT);	# 45 MILdeposit (_67:void)<-(_68:str)(LT:int)
    mil.deposit("LE",LE);	# 46 MILdeposit (_69:void)<-(_70:str)(LE:int)
    mil.deposit("GT",GT);	# 47 MILdeposit (_71:void)<-(_72:str)(GT:int)
    mil.deposit("GE",GE);	# 48 MILdeposit (_73:void)<-(_74:str)(GE:int)
    mil.deposit("STORE_MEM",STORE_MEM);	# 49 MILdeposit (_75:void)<-(_76:str)(STORE_MEM:int)
    mil.deposit("STORE_MMAP",STORE_MMAP);	# 50 MILdeposit (_77:void)<-(_78:str)(STORE_MMAP:int)
    mil.deposit("STORE_COMPR",STORE_COMPR);	# 51 MILdeposit (_79:void)<-(_80:str)(STORE_COMPR:int)
    mil.deposit("BUF_NORMAL",BUF_NORMAL);	# 52 MILdeposit (_81:void)<-(_82:str)(BUF_NORMAL:int)
    mil.deposit("BUF_RANDOM",BUF_RANDOM);	# 53 MILdeposit (_83:void)<-(_84:str)(BUF_RANDOM:int)
    mil.deposit("BUF_SEQUENTIAL",BUF_SEQUENTIAL);	# 54 MILdeposit (_85:void)<-(_86:str)(BUF_SEQUENTIAL:int)
    mil.deposit("BUF_WILLNEED",BUF_WILLNEED);	# 55 MILdeposit (_87:void)<-(_88:str)(BUF_WILLNEED:int)
    mil.deposit("BUF_DONTNEED",BUF_DONTNEED);	# 56 MILdeposit (_89:void)<-(_90:str)(BUF_DONTNEED:int)
    mil.deposit("EBUSY",EBUSY);	# 57 MILdeposit (_91:void)<-(_92:str)(EBUSY:int)
    mil.deposit("BAT_READ",BAT_READ);	# 58 MILdeposit (_93:void)<-(_94:str)(BAT_READ:int)
    mil.deposit("BAT_APPEND",BAT_APPEND);	# 59 MILdeposit (_95:void)<-(_96:str)(BAT_APPEND:int)
    mil.deposit("BAT_WRITE",BAT_WRITE);	# 60 MILdeposit (_97:void)<-(_98:str)(BAT_WRITE:int)
    mil.deposit("M_E",M_E);	# 61 MILdeposit (_99:void)<-(_100:str)(M_E:dbl)
    mil.deposit("M_LOG2E",M_LOG2E);	# 62 MILdeposit (_101:void)<-(_102:str)(M_LOG2E:dbl)
    mil.deposit("M_LOG10E",M_LOG10E);	# 63 MILdeposit (_103:void)<-(_104:str)(M_LOG10E:dbl)
    mil.deposit("M_LN2",M_LN2);	# 64 MILdeposit (_105:void)<-(_106:str)(M_LN2:dbl)
    mil.deposit("M_LN10",M_LN10);	# 65 MILdeposit (_107:void)<-(_108:str)(M_LN10:dbl)
    mil.deposit("M_PI",M_PI);	# 66 MILdeposit (_109:void)<-(_110:str)(M_PI:dbl)
    mil.deposit("M_PI_2",M_PI_2);	# 67 MILdeposit (_111:void)<-(_112:str)(M_PI_2:dbl)
    mil.deposit("M_PI_4",M_PI_4);	# 68 MILdeposit (_113:void)<-(_114:str)(M_PI_4:dbl)
    mil.deposit("M_1_PI",M_1_PI);	# 69 MILdeposit (_115:void)<-(_116:str)(M_1_PI:dbl)
    mil.deposit("M_2_PI",M_2_PI);	# 70 MILdeposit (_117:void)<-(_118:str)(M_2_PI:dbl)
    mil.deposit("M_2_SQRTPI",M_2_SQRTPI);	# 71 MILdeposit (_119:void)<-(_120:str)(M_2_SQRTPI:dbl)
    mil.deposit("M_SQRT2",M_SQRT2);	# 72 MILdeposit (_121:void)<-(_122:str)(M_SQRT2:dbl)
    mil.deposit("M_SQRT1_2",M_SQRT1_2);	# 73 MILdeposit (_123:void)<-(_124:str)(M_SQRT1_2:dbl)
#include mil_commands; needs some work 	# 74  (_125:str)
    mil.prelude();	# 75 MILprelude (_126:void)
    mil.open();	# 76 MILopen (_127:void)
barrier (v,nme):= mil.iterator();	# 77 MILnewIterator (v:lng)(nme:str) jump 80
    io.print(nme);	# 78 IOprint_val (_130:int)<-(nme:str)
    redo (v,nme):= mil.hasMoreElements();	# 79 MILhasMoreElements (v:lng)(nme:str) jump 78
exit v;	# 80  (v:lng)
    mil.close();	# 81 MILclose (_131:void)
# save the content on persistent store 	# 82  (_132:str)
end main;	# 83  
[ "EQ" ]
[ "LT" ]
[ "LE" ]
[ "GT" ]
[ "GE" ]
[ "STORE_MEM" ]
[ "STORE_MMAP" ]
[ "STORE_COMPR" ]
[ "BUF_NORMAL" ]
[ "BUF_RANDOM" ]
[ "BUF_SEQUENTIAL" ]
[ "BUF_WILLNEED" ]
[ "BUF_DONTNEED" ]
[ "EBUSY" ]
[ "BAT_READ" ]
[ "BAT_APPEND" ]
[ "BAT_WRITE" ]
[ "M_E" ]
[ "M_LOG2E" ]
[ "M_LOG10E" ]
[ "M_LN2" ]
[ "M_LN10" ]
[ "M_PI" ]
[ "M_PI_2" ]
[ "M_PI_4" ]
[ "M_1_PI" ]
[ "M_2_PI" ]
[ "M_2_SQRTPI" ]
[ "M_SQRT2" ]
[ "M_SQRT1_2" ]

# 08:01:24 >  
# 08:01:24 >  Done.
# 08:01:24 >  

