stdout of test 'tst602` in directory 'src/mal` itself:


# 08:01:24 >  
# 08:01:24 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst602.mal </dev/null
# 08:01:24 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## Testing the box interfaces
## open de MIL support box and display its content
#
#include mil;
#mil.open();
#barrier (v,nme):= mil.iterator();
#	print(nme);
#	redo (v,nme):=mil.iterator();
#exit v;
#mil.close();	# save the content on persistent store
#
function user.main():void;	# 0  (main:void)
# Testing the box interfaces 	# 1  (_1:str)
# open de MIL support box and display its content 	# 2  (_2:str)
# mil.line is obsolete, produced by previous compiler 	# 3  (_3:str)
    mil_utils.prelude();	# 4 MILutils_prelude (_4:void)
#theta join operator encoding 	# 5  (_5:str)
    EQ := 0;	# 6  (EQ:int)<-(_7:int)
    LT := -1;	# 7  (LT:int)<-(_9:int)
    LE := -2;	# 8  (LE:int)<-(_11:int)
    GT := 1;	# 9  (GT:int)<-(_13:int)
    GE := 2;	# 10  (GE:int)<-(_15:int)
    STORE_MEM := 0;	# 11  (STORE_MEM:int)<-(_7:int)
    STORE_MMAP := 1;	# 12  (STORE_MMAP:int)<-(_13:int)
    STORE_COMPR := 2;	# 13  (STORE_COMPR:int)<-(_15:int)
    BUF_NORMAL := 0;	# 14  (BUF_NORMAL:int)<-(_7:int)
    BUF_RANDOM := 1;	# 15  (BUF_RANDOM:int)<-(_13:int)
    BUF_SEQUENTIAL := 2;	# 16  (BUF_SEQUENTIAL:int)<-(_15:int)
    BUF_WILLNEED := 3;	# 17  (BUF_WILLNEED:int)<-(_23:int)
    BUF_DONTNEED := 4;	# 18  (BUF_DONTNEED:int)<-(_25:int)
    EBUSY := 16;	# 19  (EBUSY:int)<-(_27:int)
    BAT_READ := 1;	# 20  (BAT_READ:int)<-(_13:int)
# allow only read access. 	# 21  (_29:str)
    BAT_APPEND := 2;	# 22  (BAT_APPEND:int)<-(_15:int)
# allow reads and insertions. 	# 23  (_31:str)
    BAT_WRITE := 0;	# 24  (BAT_WRITE:int)<-(_7:int)
# allow reads, insertions, and updates. 	# 25  (_33:str)
    M_E := 2.7182818284590451;	# 26  (M_E:dbl)<-(_35:dbl)
    M_LOG2E := 1.4426950408889634;	# 27  (M_LOG2E:dbl)<-(_37:dbl)
    M_LOG10E := 0.43429448190325182;	# 28  (M_LOG10E:dbl)<-(_39:dbl)
    M_LN2 := 0.69314718055994529;	# 29  (M_LN2:dbl)<-(_41:dbl)
    M_LN10 := 2.3025850929940459;	# 30  (M_LN10:dbl)<-(_43:dbl)
    M_PI := 3.1415926535897931;	# 31  (M_PI:dbl)<-(_45:dbl)
    M_PI_2 := 1.5707963267948966;	# 32  (M_PI_2:dbl)<-(_47:dbl)
    M_PI_4 := 0.78539816339744828;	# 33  (M_PI_4:dbl)<-(_49:dbl)
    M_1_PI := 0.31830988618379069;	# 34  (M_1_PI:dbl)<-(_51:dbl)
    M_2_PI := 0.63661977236758138;	# 35  (M_2_PI:dbl)<-(_53:dbl)
    M_2_SQRTPI := 1.1283791670955126;	# 36  (M_2_SQRTPI:dbl)<-(_55:dbl)
    M_SQRT2 := 1.4142135623730951;	# 37  (M_SQRT2:dbl)<-(_57:dbl)
    M_SQRT1_2 := 0.70710678118654757;	# 38  (M_SQRT1_2:dbl)<-(_59:dbl)
    mil.deposit("EQ",EQ);	# 39 MILdeposit (_60:void)<-(_61:str)(EQ:int)
    mil.deposit("LT",LT);	# 40 MILdeposit (_62:void)<-(_63:str)(LT:int)
    mil.deposit("LE",LE);	# 41 MILdeposit (_64:void)<-(_65:str)(LE:int)
    mil.deposit("GT",GT);	# 42 MILdeposit (_66:void)<-(_67:str)(GT:int)
    mil.deposit("GE",GE);	# 43 MILdeposit (_68:void)<-(_69:str)(GE:int)
    mil.deposit("STORE_MEM",STORE_MEM);	# 44 MILdeposit (_70:void)<-(_71:str)(STORE_MEM:int)
    mil.deposit("STORE_MMAP",STORE_MMAP);	# 45 MILdeposit (_72:void)<-(_73:str)(STORE_MMAP:int)
    mil.deposit("STORE_COMPR",STORE_COMPR);	# 46 MILdeposit (_74:void)<-(_75:str)(STORE_COMPR:int)
    mil.deposit("BUF_NORMAL",BUF_NORMAL);	# 47 MILdeposit (_76:void)<-(_77:str)(BUF_NORMAL:int)
    mil.deposit("BUF_RANDOM",BUF_RANDOM);	# 48 MILdeposit (_78:void)<-(_79:str)(BUF_RANDOM:int)
    mil.deposit("BUF_SEQUENTIAL",BUF_SEQUENTIAL);	# 49 MILdeposit (_80:void)<-(_81:str)(BUF_SEQUENTIAL:int)
    mil.deposit("BUF_WILLNEED",BUF_WILLNEED);	# 50 MILdeposit (_82:void)<-(_83:str)(BUF_WILLNEED:int)
    mil.deposit("BUF_DONTNEED",BUF_DONTNEED);	# 51 MILdeposit (_84:void)<-(_85:str)(BUF_DONTNEED:int)
    mil.deposit("EBUSY",EBUSY);	# 52 MILdeposit (_86:void)<-(_87:str)(EBUSY:int)
    mil.deposit("BAT_READ",BAT_READ);	# 53 MILdeposit (_88:void)<-(_89:str)(BAT_READ:int)
    mil.deposit("BAT_APPEND",BAT_APPEND);	# 54 MILdeposit (_90:void)<-(_91:str)(BAT_APPEND:int)
    mil.deposit("BAT_WRITE",BAT_WRITE);	# 55 MILdeposit (_92:void)<-(_93:str)(BAT_WRITE:int)
    mil.deposit("M_E",M_E);	# 56 MILdeposit (_94:void)<-(_95:str)(M_E:dbl)
    mil.deposit("M_LOG2E",M_LOG2E);	# 57 MILdeposit (_96:void)<-(_97:str)(M_LOG2E:dbl)
    mil.deposit("M_LOG10E",M_LOG10E);	# 58 MILdeposit (_98:void)<-(_99:str)(M_LOG10E:dbl)
    mil.deposit("M_LN2",M_LN2);	# 59 MILdeposit (_100:void)<-(_101:str)(M_LN2:dbl)
    mil.deposit("M_LN10",M_LN10);	# 60 MILdeposit (_102:void)<-(_103:str)(M_LN10:dbl)
    mil.deposit("M_PI",M_PI);	# 61 MILdeposit (_104:void)<-(_105:str)(M_PI:dbl)
    mil.deposit("M_PI_2",M_PI_2);	# 62 MILdeposit (_106:void)<-(_107:str)(M_PI_2:dbl)
    mil.deposit("M_PI_4",M_PI_4);	# 63 MILdeposit (_108:void)<-(_109:str)(M_PI_4:dbl)
    mil.deposit("M_1_PI",M_1_PI);	# 64 MILdeposit (_110:void)<-(_111:str)(M_1_PI:dbl)
    mil.deposit("M_2_PI",M_2_PI);	# 65 MILdeposit (_112:void)<-(_113:str)(M_2_PI:dbl)
    mil.deposit("M_2_SQRTPI",M_2_SQRTPI);	# 66 MILdeposit (_114:void)<-(_115:str)(M_2_SQRTPI:dbl)
    mil.deposit("M_SQRT2",M_SQRT2);	# 67 MILdeposit (_116:void)<-(_117:str)(M_SQRT2:dbl)
    mil.deposit("M_SQRT1_2",M_SQRT1_2);	# 68 MILdeposit (_118:void)<-(_119:str)(M_SQRT1_2:dbl)
#include mil_commands; needs some work 	# 69  (_120:str)
    mil.prelude();	# 70 MILprelude (_121:void)
    mil.open();	# 71 MILopen (_122:void)
barrier (v,nme):= mil.iterator();	# 72 MILnewIterator (v:lng)(nme:str) jump 75
    io.print(nme);	# 73 IOprint_val (_125:int)<-(nme:str)
    redo (v,nme):= mil.hasMoreElements();	# 74 MILhasMoreElements (v:lng)(nme:str) jump 73
exit v;	# 75  (v:lng)
    mil.close();	# 76 MILclose (_126:void)
# save the content on persistent store 	# 77  (_127:str)
end main;	# 78  
[ "EQ" ]
[ "LT" ]
[ "LE" ]
[ "GT" ]
[ "GE" ]
[ "STORE_MEM" ]
[ "STORE_MMAP" ]
[ "STORE_COMPR" ]
[ "BUF_NORMAL" ]
[ "BUF_RANDOM" ]
[ "BUF_SEQUENTIAL" ]
[ "BUF_WILLNEED" ]
[ "BUF_DONTNEED" ]
[ "EBUSY" ]
[ "BAT_READ" ]
[ "BAT_APPEND" ]
[ "BAT_WRITE" ]
[ "M_E" ]
[ "M_LOG2E" ]
[ "M_LOG10E" ]
[ "M_LN2" ]
[ "M_LN10" ]
[ "M_PI" ]
[ "M_PI_2" ]
[ "M_PI_4" ]
[ "M_1_PI" ]
[ "M_2_PI" ]
[ "M_2_SQRTPI" ]
[ "M_SQRT2" ]
[ "M_SQRT1_2" ]

# 08:01:24 >  
# 08:01:24 >  Done.
# 08:01:24 >  

