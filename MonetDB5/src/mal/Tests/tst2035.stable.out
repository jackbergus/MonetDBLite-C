stdout of test 'tst2035` in directory 'src/mal` itself:


# 08:00:00 >  
# 08:00:00 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst2035.mal </dev/null
# 08:00:00 >  

# Monet Database Server V4.7.3
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
##The 2000 serie  is focussed on parallelism
#
#function clkticks(n:int):void;
#barrier	b:= n>0;
#	#printf("#clock tick %d\n",n);
#	alarm.sleep(2);
#	n:= n-1;
#	redo b:= n>0;
#exit	b;
#end clkticks;
function user.clkticks(n:int):void;	# 0  (clkticks:void)<-(n:int)
barrier b := calc.>(n,0);	# 1 CALCcompGTintint (b:bit)<-(n:int)(_3:int) jump 5
    alarm.sleep(2);	# 2 ALARMsleep (_4:void)<-(_5:int)
    n := calc.-(n,1);	# 3 CALCbinarySUBintint (n:int)<-(n:int)(_6:int)
    redo b := calc.>(n,0);	# 4 CALCcompGTintint (b:bit)<-(n:int)(_3:int) jump 2
exit b;	# 5  (b:bit)
end clkticks;	# 6  
#
#counter:=0;
#thread 	hdl:=0;	# synchronize through a counter
#	print("#start the child");
#	clkticks(1);
#	counter:= counter+1;
#	#printf("#counter %d\n",counter);
#barrier t:= counter==2;
#	leave hdl;
#exit	t;
#	#printf("#Redo thread\n");
#	redo hdl;
#exit	hdl;
#
#printf("#Main thread\n");
## loop to wait for the child to exit
#barrier wl:= true;
#	alarm.sleep(5);
#	printf("#Wait for child to exit %d\n",hdl);
#barrier	t0:=counter == 2;
#	printf("#Child died \n");
#	leave wl;
#exit	t0;
#	alarm.sleep(5);
#	redo wl;
#exit	wl;
#
function user.main():int;	# 0  (main:int)
#The 2000 serie  is focussed on parallelism 	# 1  (_2:str)
#printf("#clock tick %d\n",n); 	# 2  (_4:str)
    counter := 0;	# 3  (counter:int)<-(_6:int)
thread hdl := 0;	# 4  (hdl:int)<-(_6:int) jump 19
# synchronize through a counter 	# 5  (_9:str)
    io.printf("#handle %d\n",hdl);	# 6 IOprint_formatted_int (_10:int)<-(_11:str)(hdl:int)
    io.print("#start the child");	# 7 IOprint_val (_12:int)<-(_13:str)
barrier go := true;	# 8  (go:bit)<-(_15:bit) jump 17
    user.clkticks(1);	# 9  (_16:void)<-(_17:int)
    counter := calc.+(counter,1);	# 10 CALCbinaryADDintint (counter:int)<-(counter:int)(_17:int)
#printf("#counter %d\n",counter); 	# 11  (_19:str)
barrier t := calc.==(counter,2);	# 12 CALCcompEQintint (t:bit)<-(counter:int)(_21:int) jump 14
    leave go;	# 13  (go:bit) jump 17
exit t;	# 14  (t:bit)
#printf("#Redo thread\n"); 	# 15  ($23:str)
    redo go;	# 16  (go:bit) jump 9
exit go;	# 17  (go:bit)
#printf("#exit thread\n"); 	# 18  ($25:str)
exit hdl;	# 19  (hdl:int)
    io.printf("#Main thread\n");	# 20 IOprint_str (_26:int)<-(_27:str)
# loop to wait for the child to exit 	# 21  (_29:str)
barrier wl := true;	# 22  (wl:bit)<-(_15:bit) jump 31
    alarm.sleep(5);	# 23 ALARMsleep (_31:void)<-(_32:int)
#printf("#Wait for child to exit %d\n",hdl); 	# 24  (_34:str)
barrier t0 := calc.==(counter,2);	# 25 CALCcompEQintint (t0:bit)<-(counter:int)(_21:int) jump 28
    io.printf("#Child died \n");	# 26 IOprint_str (_36:int)<-(_37:str)
    leave wl;	# 27  (wl:bit) jump 31
exit t0;	# 28  (t0:bit)
    alarm.sleep(5);	# 29 ALARMsleep (_38:void)<-(_32:int)
    redo wl;	# 30  (wl:bit) jump 23
exit wl;	# 31  (wl:bit)
end main;	# 32  
#Main thread
[ "#start the child" ]

# 08:01:00 >  
# 08:01:00 >  Done.
# 08:01:00 >  

