stdout of test 'tst047` in directory 'src/mal` itself:


# 07:58:46 >  
# 07:58:46 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst047.mal </dev/null
# 07:58:46 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
##testing copying and counting reversals
##to test reversal handling
#
#b:=new(:int,:int);
#insert(b,1,1);
#insert(b,2,4);
#insert(b,3,9);
#print(b);
#br:= reverse(b);
#print(br);
#
#l0:= copy(b);
#print(l0);
#l1:= copy(br);
#print(l1);
#
function user.main():void;              #  0 main:void {G}
#testing copying and counting reversals 
#to test reversal handling 
    b := bat.new(:int,:int);            #  3 b:bat[:int,:int] := CMDBATnew(_4:int, _4:int) {G}
    bat.insert(b,1,1);                  #  4 _5:void := BKCinsert_bun(b:bat[:int,:int], _6:int, _6:int) 
    bat.insert(b,2,4);                  #  5 _7:void := BKCinsert_bun(b:bat[:int,:int], _8:int, _9:int) 
    bat.insert(b,3,9);                  #  6 _10:void := BKCinsert_bun(b:bat[:int,:int], _11:int, _12:int) 
    io.print(b);                        #  7 _13:void := IOprint_val(b:bat[:int,:int]) 
    br := bat.reverse(b);               #  8 br:bat[:int,:int] := BKCreverse(b:bat[:int,:int]) {G}
    io.print(br);                       #  9 _15:void := IOprint_val(br:bat[:int,:int]) 
    l0 := algebra.copy(b);              # 10 l0:bat[:int,:int] := ALGcopy(b:bat[:int,:int]) {G}
    io.print(l0);                       # 11 _17:void := IOprint_val(l0:bat[:int,:int]) 
    l1 := algebra.copy(br);             # 12 l1:bat[:int,:int] := ALGcopy(br:bat[:int,:int]) {G}
    io.print(l1);                       # 13 _19:void := IOprint_val(l1:bat[:int,:int]) 
end main;	# 14  
#-----------------#
# h	tmp_4	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
#-----------------#
# t	tmp_4	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 4,	  2	  ]
[ 9,	  3	  ]
#-----------------#
# h	tmp_5	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
#-----------------#
# h	tmp_6	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 4,	  2	  ]
[ 9,	  3	  ]

# 07:58:46 >  
# 07:58:46 >  Done.
# 07:58:46 >  

