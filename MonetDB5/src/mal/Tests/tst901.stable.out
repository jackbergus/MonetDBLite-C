stdout of test 'tst901` in directory 'src/mal` itself:


# 08:01:33 >  
# 08:01:33 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst901.mal </dev/null
# 08:01:33 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## the multiplex code blocks.
#
#b:= new(:lng,:lng);
#i:= -1:lng;
#barrier (v,i):= newRange(0:lng);
#	insert(b,i,i);
#	redo (v,i):= nextElement(1:lng,10:lng);
#exit (v,i);
#
function user.main():void;	# 0  (main:void)
# the multiplex code blocks. 	# 1  (_1:str)
    b := bat.new(:void,:int);	# 2 CMDBATnew (b:bat[:void,:int])<-(_3:void)(_4:int)
barrier (v,i):= language.newRange(0:int);	# 3 RNGnewRange_int (v:bit)(i:int)<-(_7:int) jump 6
    bat.append(b,i);	# 4 BKCappend_val_wrap (_8:void)<-(b:bat[:void,:int])(i:int)
    redo (v,i):= language.nextElement(1:int,10:int);	# 5 RNGnextElement_int (v:bit)(i:int)<-(_9:int)(_10:int) jump 4
exit (v,i);	# 6  (v:bit)(i:int)
    c := algebra.copy(b);	# 7 ALGcopy (c:bat[:void,:int])<-(b:bat[:void,:int])
    io.print(c);	# 8 IOprint_val (_12:int)<-(c:bat[:void,:int])
    x := batcalc.+(b,c);	# 9 CMDbatADD_int_int_int (x:bat[:void,:int])<-(b:bat[:void,:int])(c:bat[:void,:int])
    io.print(x);	# 10 IOprint_val (_14:int)<-(x:bat[:void,:int])
    x := batcalc.+(b,1:int);	# 11 CMDbatADDcst_int_int_int (x:bat[:void,:int])<-(b:bat[:void,:int])(_9:int)
    io.print(x);	# 12 IOprint_val (_15:int)<-(x:bat[:void,:int])
    x := batcalc.*(b,c);	# 13 CMDbatMUL_int_int_int (x:bat[:void,:int])<-(b:bat[:void,:int])(c:bat[:void,:int])
    io.print(x);	# 14 IOprint_val (_16:int)<-(x:bat[:void,:int])
    y := batcalc.==(b,b);	# 15 CMD_EQ_int (y:bat[:void,:bit])<-(b:bat[:void,:int])(b:bat[:void,:int])
    io.print(y);	# 16 IOprint_val (_18:int)<-(y:bat[:void,:bit])
    y := batcalc.==(b,x);	# 17 CMD_EQ_int (y:bat[:void,:bit])<-(b:bat[:void,:int])(x:bat[:void,:int])
    io.print(y);	# 18 IOprint_val (_19:int)<-(y:bat[:void,:bit])
    z := batcalc.not(y);	# 19 CMDbitbatNOT (z:bat[:void,:bit])<-(y:bat[:void,:bit])
    io.print(z);	# 20 IOprint_val (_21:int)<-(z:bat[:void,:bit])
end main;	# 21  
#-----------------#
# h	tmp_5	  # name
# lng	lng	  # type
#-----------------#
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
[ nil,	  3	  ]
[ nil,	  4	  ]
[ nil,	  5	  ]
[ nil,	  6	  ]
[ nil,	  7	  ]
[ nil,	  8	  ]
[ nil,	  9	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  0	  ]
[ nil,	  2	  ]
[ nil,	  4	  ]
[ nil,	  6	  ]
[ nil,	  8	  ]
[ nil,	  10	  ]
[ nil,	  12	  ]
[ nil,	  14	  ]
[ nil,	  16	  ]
[ nil,	  18	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  1	  ]
[ nil,	  2	  ]
[ nil,	  3	  ]
[ nil,	  4	  ]
[ nil,	  5	  ]
[ nil,	  6	  ]
[ nil,	  7	  ]
[ nil,	  8	  ]
[ nil,	  9	  ]
[ nil,	  10	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  4	  ]
[ nil,	  9	  ]
[ nil,	  16	  ]
[ nil,	  25	  ]
[ nil,	  36	  ]
[ nil,	  49	  ]
[ nil,	  64	  ]
[ nil,	  81	  ]
#-----------------#
# h	t	  # name
# void	bit	  # type
#-----------------#
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
#-----------------#
# h	t	  # name
# void	bit	  # type
#-----------------#
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  false	  ]
[ nil,	  false	  ]
[ nil,	  false	  ]
[ nil,	  false	  ]
[ nil,	  false	  ]
[ nil,	  false	  ]
[ nil,	  false	  ]
[ nil,	  false	  ]
#-----------------#
# h	t	  # name
# void	bit	  # type
#-----------------#
[ nil,	  false	  ]
[ nil,	  false	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]

# 08:01:33 >  
# 08:01:33 >  Done.
# 08:01:33 >  

