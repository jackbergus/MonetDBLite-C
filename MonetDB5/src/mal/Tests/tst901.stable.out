stdout of test 'tst901` in directory 'src/mal` itself:


# 08:01:33 >  
# 08:01:33 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst901.mal </dev/null
# 08:01:33 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## the multiplex code blocks.
#
#b:= new(:lng,:lng);
#i:= -1:lng;
#barrier (v,i):= newRange(0:lng);
#	insert(b,i,i);
#	redo (v,i):= nextElement(1:lng,10:lng);
#exit (v,i);
#
function user.main():void;              #  0 main:void {G}
# the multiplex code blocks. 
    b := bat.new(:oid,:int);            #  2 b:bat[:oid,:int] := CMDBATnew(_3:oid, _4:int) {G}
barrier (v,i):= language.newRange(0:int);#  3 (v:bit, i:int) := RNGnewRange_int(_7:int) {J6}
    bat.append(b,i);                    #  4 _8:void := BKCappend_val_wrap(b:bat[:oid,:int], i:int) 
    redo (v,i):= language.nextElement(1:int,10:int);#  5 (v:bit, i:int) := RNGnextElement_int(_9:int, _10:int) {J4}
exit (v,i);                             #  6 (v:bit, i:int 
    c := algebra.copy(b);               #  7 c:bat[:oid,:int] := ALGcopy(b:bat[:oid,:int]) {G}
    io.print(c);                        #  8 _12:void := IOprint_val(c:bat[:oid,:int]) 
    x := batcalc.+(b,c);                #  9 x:bat[:oid,:int] := CMDbatADD_int_int_int(b:bat[:oid,:int], c:bat[:oid,:int]) {G}
    io.print(x);                        # 10 _14:void := IOprint_val(x:bat[:oid,:int]) 
    x := batcalc.+(b,1:int);            # 11 x:bat[:oid,:int] := CMDbatADDcst_int_int_int(b:bat[:oid,:int], _9:int) {G}
    io.print(x);                        # 12 _15:void := IOprint_val(x:bat[:oid,:int]) 
    x := batcalc.*(b,c);                # 13 x:bat[:oid,:int] := CMDbatMUL_int_int_int(b:bat[:oid,:int], c:bat[:oid,:int]) {G}
    io.print(x);                        # 14 _16:void := IOprint_val(x:bat[:oid,:int]) 
    y := batcalc.==(b,b);               # 15 y:bat[:oid,:bit] := CMD_EQ_int(b:bat[:oid,:int], b:bat[:oid,:int]) {G}
    io.print(y);                        # 16 _18:void := IOprint_val(y:bat[:oid,:bit]) 
    y := batcalc.==(b,x);               # 17 y:bat[:oid,:bit] := CMD_EQ_int(b:bat[:oid,:int], x:bat[:oid,:int]) {G}
    io.print(y);                        # 18 _19:void := IOprint_val(y:bat[:oid,:bit]) 
    z := batcalc.not(y);                # 19 z:bat[:oid,:bit] := CMDbitbatNOT(y:bat[:oid,:bit]) {G}
    io.print(z);                        # 20 _21:void := IOprint_val(z:bat[:oid,:bit]) 
end main;	# 21  
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  2	  ]
[ 3@0,	  3	  ]
[ 4@0,	  4	  ]
[ 5@0,	  5	  ]
[ 6@0,	  6	  ]
[ 7@0,	  7	  ]
[ 8@0,	  8	  ]
[ 9@0,	  9	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  2	  ]
[ 2@0,	  4	  ]
[ 3@0,	  6	  ]
[ 4@0,	  8	  ]
[ 5@0,	  10	  ]
[ 6@0,	  12	  ]
[ 7@0,	  14	  ]
[ 8@0,	  16	  ]
[ 9@0,	  18	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
[ 2@0,	  3	  ]
[ 3@0,	  4	  ]
[ 4@0,	  5	  ]
[ 5@0,	  6	  ]
[ 6@0,	  7	  ]
[ 7@0,	  8	  ]
[ 8@0,	  9	  ]
[ 9@0,	  10	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  4	  ]
[ 3@0,	  9	  ]
[ 4@0,	  16	  ]
[ 5@0,	  25	  ]
[ 6@0,	  36	  ]
[ 7@0,	  49	  ]
[ 8@0,	  64	  ]
[ 9@0,	  81	  ]
#-----------------#
# h	t	  # name
# void	bit	  # type
#-----------------#
[ 0@0,	  true	  ]
[ 1@0,	  true	  ]
[ 2@0,	  true	  ]
[ 3@0,	  true	  ]
[ 4@0,	  true	  ]
[ 5@0,	  true	  ]
[ 6@0,	  true	  ]
[ 7@0,	  true	  ]
[ 8@0,	  true	  ]
[ 9@0,	  true	  ]
#-----------------#
# h	t	  # name
# void	bit	  # type
#-----------------#
[ 0@0,	  true	  ]
[ 1@0,	  true	  ]
[ 2@0,	  false	  ]
[ 3@0,	  false	  ]
[ 4@0,	  false	  ]
[ 5@0,	  false	  ]
[ 6@0,	  false	  ]
[ 7@0,	  false	  ]
[ 8@0,	  false	  ]
[ 9@0,	  false	  ]
#-----------------#
# h	t	  # name
# void	bit	  # type
#-----------------#
[ 0@0,	  false	  ]
[ 1@0,	  false	  ]
[ 2@0,	  true	  ]
[ 3@0,	  true	  ]
[ 4@0,	  true	  ]
[ 5@0,	  true	  ]
[ 6@0,	  true	  ]
[ 7@0,	  true	  ]
[ 8@0,	  true	  ]
[ 9@0,	  true	  ]

# 08:01:33 >  
# 08:01:33 >  Done.
# 08:01:33 >  

