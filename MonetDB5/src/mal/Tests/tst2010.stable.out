stdout of test 'tst2010` in directory 'src/mal` itself:


# 07:59:19 >  
# 07:59:19 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst2010.mal </dev/null
# 07:59:19 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
##The 2000 serie  is focussed on parallelism
##we start with a non-parallel version
#
#function clkticks(n:int):void;
#	printf("#start clock \n");
#barrier	b:= n>0;
#	printf("#tick\n");
#	alarm.sleep(2);
#	n:= n-1;
#	redo b:= n>0;
#exit	b;
#end clkticks;
function user.clkticks(n:int):void;	# 0  (clkticks:void)<-(n:int)
    io.printf("#start clock \n");	# 1 IOprint_str (_2:int)<-(_3:str)
barrier b := calc.>(n,0);	# 2 CALCcompGTintint (b:bit)<-(n:int)(_5:int) jump 7
    io.printf("#tick\n");	# 3 IOprint_str (_6:int)<-(_7:str)
    alarm.sleep(2);	# 4 ALARMsleep (_8:void)<-(_9:int)
    n := calc.-(n,1);	# 5 CALCbinarySUBintint (n:int)<-(n:int)(_10:int)
    redo b := calc.>(n,0);	# 6 CALCcompGTintint (b:bit)<-(n:int)(_5:int) jump 3
exit b;	# 7  (b:bit)
end clkticks;	# 8  
#
#thread 	hdl:=0;	# should not be assigned a value to get started
#	printf("#START THREAD \n");
#	clkticks(2);
#	printf("#About to exit child\n");
#exit	hdl;
#	printf("#Wait for child to exit too\n");
#	alarm.sleep(15);
#	printf("#Child should have died\n");
#	#wait hdl;
#	#printf("child has finished\n");
#
function user.main():int;	# 0  (main:int)
#The 2000 serie  is focussed on parallelism 	# 1  (_2:str)
#we start with a non-parallel version 	# 2  (_4:str)
thread hdl := 0;	# 3  (hdl:int)<-(_6:int) jump 7
# should not be assigned a value to get started 	# 4  (_8:str)
    io.printf("#START THREAD \n");	# 5 IOprint_str (_9:int)<-(_10:str)
    io.printf("#About to exit child\n");	# 6 IOprint_str (_11:int)<-(_12:str)
exit hdl;	# 7  (hdl:int)
    alarm.sleep(2);	# 8 ALARMsleep (_13:void)<-(_14:int)
    io.printf("#Wait for child to exit too\n");	# 9 IOprint_str (_15:int)<-(_16:str)
    alarm.sleep(5);	# 10 ALARMsleep (_17:void)<-(_18:int)
    io.printf("#Child should have died\n");	# 11 IOprint_str (_19:int)<-(_20:str)
#wait hdl; 	# 12  (_22:str)
#io.printf("child has finished\n"); 	# 13  (_24:str)
end main;	# 14  
#Wait for child to exit too
#START THREAD 
#start clock 
#tick
#tick
#About to exit child
#Child should have died

# 07:59:35 >  
# 07:59:35 >  Done.
# 07:59:35 >  

