stdout of test 'recycle08` in directory 'src/mal` itself:


# 15:54:59 >  
# 15:54:59 >   mserver5 "--config=/export/scratch1/milena/monet.DBG/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/export/scratch1/milena/monet.DBG/lib/MonetDB5:/export/scratch1/milena/monet.DBG/lib/MonetDB5/lib:/export/scratch1/milena/monet.DBG/lib/MonetDB5/bin" --set "gdk_dbfarm=/export/scratch1/milena/monet.DBG/var/MonetDB5/dbfarm" --set "sql_logdir=/export/scratch1/milena/monet.DBG/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=34583 --set xrpc_port=49067 --set monet_prompt= --trace  --dbname=mTests_src_mal  recycle08.mal
# 15:54:59 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_mal'
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2008 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://modi.ins.cwi.nl:34583/
## Test of CREDIT cache policy in limited memory (8 RU)
## Evicts the leaf instruction with smallest credit= cnt*(0.5*ticks + 0.5(wr+rd))
#
#function user.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];
#b:= bat.new(:oid,:int);
#barrier (go,i):= language.newRange(0:int);
#	bat.append(b,i);
#	redo (go,i):= language.nextElement(1:int,1000:int);
#exit (go,i);
#return bind:=b;
#end bind;
function user.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];#  0 bind:bat[:oid,:int] := user.bind(s:str, t:str, c:str, i:int) {G}
    b := bat.new(:oid,:int);            #  1 b:bat[:oid,:int] := CMDBATnew(_6:oid, _7:int) {G}
barrier (go,i):= language.newRange(0:int);#  2 (go:bit, i:int) := RNGnewRange_int(_9:int) {J5}
    bat.append(b,i);                    #  3 _10:bat[:int,:any] := BKCappend_val_wrap(b:bat[:oid,:int], i:int) {G}
    redo (go,i):= language.nextElement(1:int,1000:int);#  4 (go:bit, i:int) := RNGnextElement_int(_11:int, _12:int) {J3}
exit (go,i);                            #  5 (go:bit, i:int) 
    return bind := b;                   #  6 bind:bat[:oid,:int] := b:bat[:oid,:int] {G}
end bind;                               #  7  
#
#function qry(low:int, hgh:int);
#	b:= user.bind("schema","table","column",0);
#	s1:= algebra.select(b,low,hgh);
#end qry;
function user.qry(low:int,hgh:int):void;#  0 qry:void := user.qry(low:int, hgh:int) {G}
    b := user.bind("schema","table","column",0);#  1 b:bat[:oid,:int] := user.bind(_4:str, _5:str, _6:str, _7:int) {G}
    s1 := algebra.select(b,low,hgh);    #  2 s1:bat[:oid,:int] := ALGselect(b:bat[:oid,:int], low:int, hgh:int) {G}
end qry;                                #  3  
#
#recycle.setRetainPolicy(1);
#recycle.setReusePolicy(1);
#recycle.setCachePolicy(2,0,8);
#optimizer.recycle("user","qry");
#
#io.print("start");
#qry(100,150);
#qry(200,240);
#qry(700,720);
#qry(800,900);
#qry(700,720);
#recycle.dump();
## The next query should evict the cheapest 2 selects. 
#qry(300,800);
#recycle.dump();
#
function user.main():void;              #  0 main:void := user.main() {G}
# Test of CREDIT cache policy in limited memory (8 RU) 
# Evicts the leaf instruction with smallest credit= cnt*(0.5*ticks + 0.5(wr+rd)) 
    recycle.setRetainPolicy(1);         #  3 _3:void := RECYCLEsetRetain(_4:int) 
    recycle.setReusePolicy(1);          #  4 _5:void := RECYCLEsetReuse(_4:int) 
    recycle.setCachePolicy(2,0,8);      #  5 _6:void := RECYCLEsetCache(_7:int, _8:int, _9:int) 
    io.print("start");                  #  6 _13:void := IOprint_val(_14:str) 
    user.qry(100,150);                  #  7 _15:void := user.qry(_16:int, _17:int) 
    user.qry(200,240);                  #  8 _18:void := user.qry(_19:int, _20:int) 
    user.qry(700,720);                  #  9 _21:void := user.qry(_22:int, _23:int) 
    user.qry(800,900);                  # 10 _24:void := user.qry(_25:int, _26:int) 
    user.qry(700,720);                  # 11 _27:void := user.qry(_22:int, _23:int) 
    recycle.dump();                     # 12 _28:void := RECYCLEdumpWrap() 
# The next query should evict the cheapest 2 selects.  
    user.qry(300,800);                  # 14 _30:void := user.qry(_31:int, _25:int) 
    recycle.dump();                     # 15 _32:void := RECYCLEdumpWrap() 
end main;                               # 16  
[ "start" ]
#Recycler  catalog
#retain= 1 time =0 sze= 0 alpha= 0.500
#reuse= 1
#rcache= 2 limit= 0 memlimit=8
#hard stmt = 20000 hard var = 100000 hard mem= 8388608
#recycled = 5 incache= 5 executed = 24 saved time(ms)=     3.16 memory(KB)= 8
#Cache search time= 1(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#    1	262779	5	786	1	4	    _1 := user.bind("schema","table","column",0);
#    2	262702	1	45	4	1	    _6 := algebra.select(<tmp_20>,100,150);
#    3	262727	1	19	4	1	    _9 := algebra.select(<tmp_20>,200,240);
#    4	262780	2	18	4	1	    _12 := algebra.select(<tmp_20>,700,720);
#    5	262775	1	22	4	1	    _15 := algebra.select(<tmp_20>,800,900);
#Recycler  catalog
#retain= 1 time =0 sze= 0 alpha= 0.500
#reuse= 1
#rcache= 2 limit= 0 memlimit=8
#hard stmt = 20000 hard var = 100000 hard mem= 8388608
#recycled = 6 incache= 4 executed = 31 saved time(ms)=     3.95 memory(KB)= 8
#Cache search time= 1(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#    1	262847	6	786	1	4	    _1 := user.bind("schema","table","column",0);
#    2	262702	1	45	4	1	    _6 := algebra.select(<tmp_20>,100,150);
#    3	262775	1	22	4	1	    _9 := algebra.select(<tmp_20>,800,900);
#    4	262902	1	55	4	2	    _12 := algebra.select(<tmp_20>,300,800);

# 15:54:59 >  
# 15:54:59 >  Done.
# 15:54:59 >  

