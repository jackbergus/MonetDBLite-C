stdout of test 'tst500` in directory 'src/mal` itself:


# 08:01:21 >  
# 08:01:21 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst500.mal </dev/null
# 08:01:21 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## recursive MAL calls 
#
#function simple(i:int, lim:int, s:str):flt;
#printf("i=%d ",i);
#printf("lim=%d ",lim);
#printf("str=%s\n",s);
#	i:= i+1;
#barrier	v:= i<lim;
#	z:= simple(i,lim,s);
#exit	v;
#	r:= 3.14:flt;
#	return r;
#end simple;
function user.simple(i:int,lim:int,s:str):flt;#  0 simple:flt := user.simple(i:int, lim:int, s:str) {G}
    io.printf("i=%d ",i);               #  1 _4:void := IOprint_formatted_int(_5:str, i:int) 
    io.printf("lim=%d ",lim);           #  2 _6:void := IOprint_formatted_int(_7:str, lim:int) 
    io.printf("str=%s\n",s);            #  3 _8:void := IOprint_formatted_str(_9:str, s:str) 
    i := calc.+(i,1);                   #  4 i:int := CALCbinaryADDintint(i:int, _10:int) 
barrier v := calc.<(i,lim);             #  5 v:bit := CALCcompLTintint(i:int, lim:int) {J7}
    z := user.simple(i,lim,s);          #  6 z:flt := user.simple(i:int, lim:int, s:str) 
exit v;                                 #  7 v:bit 
    r := 3.1400001:flt;                 #  8 r:flt := _14:flt 
    return simple := r;                 #  9 simple:flt := r:flt 
end simple;	# 10  
#
#r:= simple(0,2,"hello");
#
function user.main():void;              #  0 main:void 
# recursive MAL calls  
    r := user.simple(0,2,"hello");      #  2 r:flt := user.simple(_3:int, _4:int, _5:str) 
end main;	# 3  
i=0 lim=2 str=hello
i=1 lim=2 str=hello

# 08:01:21 >  
# 08:01:21 >  Done.
# 08:01:21 >  

