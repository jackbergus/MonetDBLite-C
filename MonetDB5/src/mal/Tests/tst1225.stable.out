stdout of test 'tst1225` in directory 'src/mal` itself:


# 23:39:01 >  
# 23:39:01 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=31765 --set xrpc_port=46302 --set monet_prompt= --trace --dbname=mTests_src_mal  tst1225.mal
# 23:39:01 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
##old bug in tst1200
#	rule_apr:= mtime.rule("last THU on or before aPr 1@01:15");
#	rule_nov:= mtime.rule(11,-10,-4,75);
#	mc_a := calc.*(23,60);
#	tzone_07:= mtime.timezone(mc_a,rule_apr,rule_nov);
#	nc_a := calc.*(-23,59);
#	oc_a := calc.-(nc_a,59);
#	tzone_08:= mtime.timezone(oc_a);
#	tzone_09:= mtime.timezone(0);
#	pc_a := calc.*(23,60);
#	qc_a := calc.+(pc_a,59);
#	tzone_bat:= bat.new(:oid,:timezone);
#	i8:= 8@0;	# don;t use 08@0
#	io.print(i8);	# don;t use 09@0
#	i9:= 9@0;
#	io.print(i9);
#	bd_a := bat.insert(tzone_bat,8@0,tzone_08);
#	cd_a := bat.insert(tzone_bat,9@0,tzone_09);
#	bat.setColumn(tzone_bat,"timezone");
#	jd_a := io.print(tzone_bat);
#
function user.main():void;              #  0 main:void := user.main() {G}
#old bug in tst1200 
    rule_apr := mtime.rule("last THU on or before aPr 1@01:15");#  2 rule_apr:zrule := MTIMErule_fromstr(_3:str) 
    rule_nov := mtime.rule(11,-10,-4,75);#  3 rule_nov:zrule := MTIMErule_create(_5:int, _6:int, _7:int, _8:int) 
    mc_a := calc.*(23,60);              #  4 mc_a:int := CALCbinaryMULintint(_10:int, _11:int) 
    tzone_07 := mtime.timezone(mc_a,rule_apr,rule_nov);#  5 tzone_07:timezone := MTIMEtzone_create_dst(mc_a:int, rule_apr:zrule, rule_nov:zrule) 
    nc_a := calc.*(-23,59);             #  6 nc_a:int := CALCbinaryMULintint(_14:int, _15:int) 
    oc_a := calc.-(nc_a,59);            #  7 oc_a:int := CALCbinarySUBintint(nc_a:int, _15:int) 
    tzone_08 := mtime.timezone(oc_a);   #  8 tzone_08:timezone := MTIMEtzone_create(oc_a:int) 
    tzone_09 := mtime.timezone(0);      #  9 tzone_09:timezone := MTIMEtzone_create(_19:int) 
    pc_a := calc.*(23,60);              # 10 pc_a:int := CALCbinaryMULintint(_10:int, _11:int) 
    qc_a := calc.+(pc_a,59);            # 11 qc_a:int := CALCbinaryADDintint(pc_a:int, _15:int) 
    tzone_bat := bat.new(:oid,:timezone);# 12 tzone_bat:bat[:oid,:timezone] := CMDBATnew(_23:oid, _24:timezone) {G}
    i8 := 8@0;                          # 13 i8:oid := _26:oid 
# don;t use 08@0 
    io.print(i8);                       # 15 _28:void := IOprint_val(i8:oid) 
# don;t use 09@0 
    i9 := 9@0;                          # 17 i9:oid := _31:oid 
    io.print(i9);                       # 18 _32:void := IOprint_val(i9:oid) 
    bd_a := bat.insert(tzone_bat,8@0,tzone_08);# 19 bd_a:void := BKCinsert_bun(tzone_bat:bat[:oid,:timezone], _26:oid, tzone_08:timezone) 
    cd_a := bat.insert(tzone_bat,9@0,tzone_09);# 20 cd_a:void := BKCinsert_bun(tzone_bat:bat[:oid,:timezone], _31:oid, tzone_09:timezone) 
    bat.setColumn(tzone_bat,"timezone");# 21 _35:void := BKCsetColumn(tzone_bat:bat[:oid,:timezone], _36:str) 
    jd_a := io.print(tzone_bat);        # 22 jd_a:void := IOprint_val(tzone_bat:bat[:oid,:timezone]) 
end main;	# 23  
[ 8@0 ]
[ 9@0 ]
#-------------------------#
# h	timezone		  # name
# void	timezone	  # type
#-------------------------#
[ 8@0,	  GMT-23:36	  ]
[ 9@0,	  GMT		  ]

# 23:39:02 >  
# 23:39:02 >  Done.
# 23:39:02 >  

