stdout of test 'tst1225` in directory 'src/mal` itself:


# 23:39:01 >  
# 23:39:01 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=31765 --set xrpc_port=46302 --set monet_prompt= --trace --dbname=mTests_src_mal  tst1225.mal
# 23:39:01 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
##old bug in tst1200
#	rule_apr:= mtime.rule("last THU on or before aPr 1@01:15");
#	rule_nov:= mtime.rule(11,-10,-4,75);
#	mc_a := calc.*(23,60);
#	tzone_07:= mtime.timezone(mc_a,rule_apr,rule_nov);
#	nc_a := calc.*(-23,59);
#	oc_a := calc.-(nc_a,59);
#	tzone_08:= mtime.timezone(oc_a);
#	tzone_09:= mtime.timezone(0);
#	pc_a := calc.*(23,60);
#	qc_a := calc.+(pc_a,59);
#	tzone_bat:= bat.new(:oid,:timezone);
#	i8:= 8@0;	# don;t use 08@0
#	io.print(i8);	# don;t use 09@0
#	i9:= 9@0;
#	io.print(i9);
#	bd_a := bat.insert(tzone_bat,8@0,tzone_08);
#	cd_a := bat.insert(tzone_bat,9@0,tzone_09);
#	bat.setColumn(tzone_bat,"timezone");
#	jd_a := io.print(tzone_bat);
#
function user.main():void;	# 0  (main:void)
#old bug in tst1200 	# 1  (_1:str)
    rule_apr := mtime.rule("last THU on or before aPr 1@01:15");	# 2 MTIMErule_fromstr (rule_apr:zrule)<-(_3:str)
    rule_nov := mtime.rule(11,-10,-4,75);	# 3 MTIMErule_create (rule_nov:zrule)<-(_5:int)(_6:int)(_7:int)(_8:int)
    mc_a := calc.*(23,60);	# 4 CALCbinaryMULintint (mc_a:int)<-(_10:int)(_11:int)
    tzone_07 := mtime.timezone(mc_a,rule_apr,rule_nov);	# 5 MTIMEtzone_create_dst (tzone_07:timezone)<-(mc_a:int)(rule_apr:zrule)(rule_nov:zrule)
    nc_a := calc.*(-23,59);	# 6 CALCbinaryMULintint (nc_a:int)<-(_14:int)(_15:int)
    oc_a := calc.-(nc_a,59);	# 7 CALCbinarySUBintint (oc_a:int)<-(nc_a:int)(_15:int)
    tzone_08 := mtime.timezone(oc_a);	# 8 MTIMEtzone_create (tzone_08:timezone)<-(oc_a:int)
    tzone_09 := mtime.timezone(0);	# 9 MTIMEtzone_create (tzone_09:timezone)<-(_19:int)
    pc_a := calc.*(23,60);	# 10 CALCbinaryMULintint (pc_a:int)<-(_10:int)(_11:int)
    qc_a := calc.+(pc_a,59);	# 11 CALCbinaryADDintint (qc_a:int)<-(pc_a:int)(_15:int)
    tzone_bat := bat.new(:oid,:timezone);	# 12 CMDBATnew (tzone_bat:bat[:oid,:timezone])<-(_23:oid)(_24:timezone)
    i8 := 8@0;	# 13  (i8:oid)<-(_26:oid)
# don;t use 08@0 	# 14  (_27:str)
    io.print(i8);	# 15 IOprint_val (_28:void)<-(i8:oid)
# don;t use 09@0 	# 16  (_29:str)
    i9 := 9@0;	# 17  (i9:oid)<-(_31:oid)
    io.print(i9);	# 18 IOprint_val (_32:void)<-(i9:oid)
    bd_a := bat.insert(tzone_bat,8@0,tzone_08);	# 19 BKCinsert_bun (bd_a:void)<-(tzone_bat:bat[:oid,:timezone])(_26:oid)(tzone_08:timezone)
    cd_a := bat.insert(tzone_bat,9@0,tzone_09);	# 20 BKCinsert_bun (cd_a:void)<-(tzone_bat:bat[:oid,:timezone])(_31:oid)(tzone_09:timezone)
    bat.setColumn(tzone_bat,"timezone");	# 21 BKCsetColumn (_35:void)<-(tzone_bat:bat[:oid,:timezone])(_36:str)
    jd_a := io.print(tzone_bat);	# 22 IOprint_val (jd_a:void)<-(tzone_bat:bat[:oid,:timezone])
end main;	# 23  
[ 8@0 ]
[ 9@0 ]
#-------------------------#
# h	timezone		  # name
# void	timezone	  # type
#-------------------------#
[ 8@0,	  GMT-23:36	  ]
[ 9@0,	  GMT		  ]

# 23:39:02 >  
# 23:39:02 >  Done.
# 23:39:02 >  

