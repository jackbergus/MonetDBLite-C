stdout of test 'tst103` in directory 'src/mal` itself:


# 07:58:55 >  
# 07:58:55 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst103.mal </dev/null
# 07:58:55 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## check propagation of type variables over bats
#
#function f(a:any$1, b:any$2):bat[:any$2,:any$1] ;
#	return f:=bbp.new(:any$2,:any$1); 
#end f;
function user.f(a:any):any;	# 0  dynamic (f:any)<-(a:any)
    ;	# 1  (_2:any)
end f;	# 2  
!ERROR: function f(a:any$1, b:any$2):bat[:any$2,:any$1] ;
!                       ^',' expected
!ERROR: 	return f:=bbp.new(:any$2,:any$1); 
!	     ^<identifier> expected
#
#a:= f(1,"hello");
#b:= f(1,"world");
#c:= f(1.0, -3);
#d:= f(true,false);
#
!ERROR: 'user.f' undefined in user.main[2]
!ERROR: 'user.f' undefined in user.main[3]
!ERROR: 'user.f' undefined in user.main[4]
!ERROR: 'user.f' undefined in user.main[5]
function user.main():int;	# 0  (main:int)
# check propagation of type variables over bats 	# 1  (_2:str)
    a := user.f(1,"hello");	# 2  unknown (a:any)<-(_4:int)(_5:str)
    b := user.f(1,"world");	# 3  unknown (b:any)<-(_4:int)(_7:str)
    c := user.f(1.0,-3);	# 4  unknown (c:any)<-(_9:flt)(_10:int)
    d := user.f(true,false);	# 5  unknown (d:any)<-(_12:bit)(_13:bit)
end main;	# 6  

# 07:58:55 >  
# 07:58:55 >  Done.
# 07:58:55 >  

