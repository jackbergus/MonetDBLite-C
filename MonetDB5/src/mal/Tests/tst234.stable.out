stdout of test 'tst234` in directory 'src/mal` itself:


# 09:11:11 >  
# 09:11:11 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=37247 --set monet_prompt= --trace --dbname=mTests_src_mal  tst234.mal < /dev/null
# 09:11:11 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
## dealing with BAT references in functions
#
#function dir():void;
#	d:= bbp.getRefCount();
#	dl:=bbp.getLRefCount();
#	dn:= bbp.getNames();
#	io.print(dn,d,dl);
#end dir;
function user.dir():void;               #  0 dir:void {G}
    d := bbp.getRefCount();             #  1 d:bat[:int,:int] {G}
    dl := bbp.getLRefCount();           #  2 dl:bat[:int,:int] {G}
    dn := bbp.getNames();               #  3 dn:bat[:int,:str] {G}
    ds := algebra.sort(dn);             #  4 ds:bat[:int,:str] := ALGhsort(dn:bat[:int,:str]) {G}
    io.table(ds,d,dl);                  #  5 _5:void := IOttable(ds:bat[:int,:str], d:bat[:int,:int], dl:bat[:int,:int]) 
end dir;	# 6  
#
#
#function tmp1(b:bat[:any_1,:any_2]):bat[:any_1,:any_2];
#	tmp1:= algebra.copy(b);
#	io.print("inside tmp1");
#	user.dir();
#	return tmp1;
#end tmp1;
function user.tmp1(b:bat[:any_1,:any_2]):bat[:any_1,:any_2];#  0 tmp1:bat[:any_1,:any_2] := user.tmp1(b:bat[:any_1,:any_2]) {UPG}
    tmp1 := algebra.copy(b);            #  1 tmp1:bat[:any_1,:any_2] := ALGcopy(b:bat[:any_1,:any_2]) {PG}
    io.print("inside tmp1");            #  2 _2:void := IOprint_val(_3:str) 
    i := bbp.getLRefCount(b);           #  3 i:int := CMDgetBATlrefcnt(b:bat[:any_1,:any_2]) {P}
    io.print(i);                        #  4 _5:void := IOprint_val(i:int) 
    return tmp1 := tmp1;                #  5 tmp1:bat[:any_1,:any_2] := tmp1:bat[:any_1,:any_2] {G}
end tmp1;	# 6  
#
#b:= bat.new(:int,:int);
#dir();
#d:= user.tmp1(b);
#dir();
#d:= user.tmp1(d);
#dir();
#
function user.main():void;              #  0 main:void {G}
# dealing with BAT references in functions 
    b := bat.new(:int,:int);            #  2 b:bat[:int,:int] := CMDBATnew(_3:int, _3:int) {G}
    d := user.tmp1(b);                  #  3 d:bat[:int,:int] := user.tmp1(b:bat[:int,:int]) {G}
    i := bbp.getLRefCount(d);           #  4 i:int := CMDgetBATlrefcnt(d:bat[:int,:int]) 
    io.print(i);                        #  5 _6:void := IOprint_val(i:int) 
    d := user.tmp1(d);                  #  6 d:bat[:int,:int] := user.tmp1(d:bat[:int,:int]) {G}
    i := bbp.getLRefCount(d);           #  7 i:int := CMDgetBATlrefcnt(d:bat[:int,:int]) 
    io.print(i);                        #  8 _7:void := IOprint_val(i:int) 
end main;	# 9  
[ "inside tmp1" ]
[ 2 ]
[ 1 ]
[ "inside tmp1" ]
[ 2 ]
[ 1 ]

# 09:11:11 >  
# 09:11:11 >  Done.
# 09:11:11 >  

