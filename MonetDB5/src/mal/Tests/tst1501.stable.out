stdout of test 'tst1501` in directory 'src/mal` itself:


# 07:59:06 >  
# 07:59:06 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst1501.mal </dev/null
# 07:59:06 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
#	x := bat.new(:oid,:chr);
#	de_a := bat.insert(x,1@0,'a');
#	ee_a := bat.insert(x,2@0,'a');
#	fe_a := bat.insert(x,3@0,'b');
#	ge_a := bat.insert(x,4@0,'b');
#	he_a := bat.insert(x,5@0,'b');
#	ie_a := bat.insert(x,6@0,'b');
#	je_a := bat.insert(x,7@0,'c');
#	ke_a := bat.insert(x,8@0,'c');
#
#	y := bat.new(:oid,:dbl);
#	le_a := calc.dbl(1.0);
#	me_a := bat.insert(y,1@0,le_a);
#	ne_a := calc.dbl(2.0);
#	oe_a := bat.insert(y,2@0,ne_a);
#	pe_a := calc.dbl(2.0);
#	qe_a := bat.insert(y,3@0,pe_a);
#	re_a := calc.dbl(2.0);
#	se_a := bat.insert(y,4@0,re_a);
#	te_a := calc.dbl(2.0);
#	ue_a := bat.insert(y,5@0,te_a);
#	ve_a := calc.dbl(3.0);
#	we_a := bat.insert(y,6@0,ve_a);
#	xe_a := calc.dbl(1.0);
#	ye_a := bat.insert(y,7@0,xe_a);
#	af_a := calc.dbl(1.0);
#	bf_a := bat.insert(y,8@0,af_a);
#
#	z := bat.new(:oid,:str);
#	cf_a := bat.insert(z,1@0,"c");
#	df_a := bat.insert(z,2@0,"a");
#	ef_a := bat.insert(z,3@0,"b");
#	ff_a := bat.insert(z,4@0,"c");
#	gf_a := bat.insert(z,5@0,"a");
#	hf_a := bat.insert(z,6@0,"a");
#	if_a := bat.insert(z,7@0,"c");
#	jf_a := bat.insert(z,8@0,"a");
#o:= bat.mirror(x);
#io.print(x,y);
#io.table(o,y);
#io.table(o,x,y);
#io.print(x,y,z);
#io.table(o,x,y,z);
#
#
function user.main():void;              #  0 main:void := user.main() {G}
    x := bat.new(:oid,:chr);            #  1 x:bat[:oid,:chr] := CMDBATnew(_2:oid, _3:chr) {G}
    de_a := bat.insert(x,1@0,'a');      #  2 de_a:bat[:oid,:chr] := BKCinsert_bun(x:bat[:oid,:chr], _5:oid, _6:chr) {G}
    ee_a := bat.insert(x,2@0,'a');      #  3 ee_a:bat[:oid,:chr] := BKCinsert_bun(x:bat[:oid,:chr], _8:oid, _6:chr) {G}
    fe_a := bat.insert(x,3@0,'b');      #  4 fe_a:bat[:oid,:chr] := BKCinsert_bun(x:bat[:oid,:chr], _10:oid, _11:chr) {G}
    ge_a := bat.insert(x,4@0,'b');      #  5 ge_a:bat[:oid,:chr] := BKCinsert_bun(x:bat[:oid,:chr], _13:oid, _11:chr) {G}
    he_a := bat.insert(x,5@0,'b');      #  6 he_a:bat[:oid,:chr] := BKCinsert_bun(x:bat[:oid,:chr], _15:oid, _11:chr) {G}
    ie_a := bat.insert(x,6@0,'b');      #  7 ie_a:bat[:oid,:chr] := BKCinsert_bun(x:bat[:oid,:chr], _17:oid, _11:chr) {G}
    je_a := bat.insert(x,7@0,'c');      #  8 je_a:bat[:oid,:chr] := BKCinsert_bun(x:bat[:oid,:chr], _19:oid, _20:chr) {G}
    ke_a := bat.insert(x,8@0,'c');      #  9 ke_a:bat[:oid,:chr] := BKCinsert_bun(x:bat[:oid,:chr], _22:oid, _20:chr) {G}
    y := bat.new(:oid,:dbl);            # 10 y:bat[:oid,:dbl] := CMDBATnew(_2:oid, _24:dbl) {G}
    le_a := calc.dbl(1);                # 11 le_a:dbl := CALCflt2dbl(_26:flt) 
    me_a := bat.insert(y,1@0,le_a);     # 12 me_a:bat[:oid,:dbl] := BKCinsert_bun(y:bat[:oid,:dbl], _5:oid, le_a:dbl) {G}
    ne_a := calc.dbl(2);                # 13 ne_a:dbl := CALCflt2dbl(_29:flt) 
    oe_a := bat.insert(y,2@0,ne_a);     # 14 oe_a:bat[:oid,:dbl] := BKCinsert_bun(y:bat[:oid,:dbl], _8:oid, ne_a:dbl) {G}
    pe_a := calc.dbl(2);                # 15 pe_a:dbl := CALCflt2dbl(_29:flt) 
    qe_a := bat.insert(y,3@0,pe_a);     # 16 qe_a:bat[:oid,:dbl] := BKCinsert_bun(y:bat[:oid,:dbl], _10:oid, pe_a:dbl) {G}
    re_a := calc.dbl(2);                # 17 re_a:dbl := CALCflt2dbl(_29:flt) 
    se_a := bat.insert(y,4@0,re_a);     # 18 se_a:bat[:oid,:dbl] := BKCinsert_bun(y:bat[:oid,:dbl], _13:oid, re_a:dbl) {G}
    te_a := calc.dbl(2);                # 19 te_a:dbl := CALCflt2dbl(_29:flt) 
    ue_a := bat.insert(y,5@0,te_a);     # 20 ue_a:bat[:oid,:dbl] := BKCinsert_bun(y:bat[:oid,:dbl], _15:oid, te_a:dbl) {G}
    ve_a := calc.dbl(3);                # 21 ve_a:dbl := CALCflt2dbl(_38:flt) 
    we_a := bat.insert(y,6@0,ve_a);     # 22 we_a:bat[:oid,:dbl] := BKCinsert_bun(y:bat[:oid,:dbl], _17:oid, ve_a:dbl) {G}
    xe_a := calc.dbl(1);                # 23 xe_a:dbl := CALCflt2dbl(_26:flt) 
    ye_a := bat.insert(y,7@0,xe_a);     # 24 ye_a:bat[:oid,:dbl] := BKCinsert_bun(y:bat[:oid,:dbl], _19:oid, xe_a:dbl) {G}
    af_a := calc.dbl(1);                # 25 af_a:dbl := CALCflt2dbl(_26:flt) 
    bf_a := bat.insert(y,8@0,af_a);     # 26 bf_a:bat[:oid,:dbl] := BKCinsert_bun(y:bat[:oid,:dbl], _22:oid, af_a:dbl) {G}
    z := bat.new(:oid,:str);            # 27 z:bat[:oid,:str] := CMDBATnew(_2:oid, _45:str) {G}
    cf_a := bat.insert(z,1@0,"c");      # 28 cf_a:bat[:oid,:str] := BKCinsert_bun(z:bat[:oid,:str], _47:oid, _48:str) {G}
    df_a := bat.insert(z,2@0,"a");      # 29 df_a:bat[:oid,:str] := BKCinsert_bun(z:bat[:oid,:str], _50:oid, _51:str) {G}
    ef_a := bat.insert(z,3@0,"b");      # 30 ef_a:bat[:oid,:str] := BKCinsert_bun(z:bat[:oid,:str], _53:oid, _54:str) {G}
    ff_a := bat.insert(z,4@0,"c");      # 31 ff_a:bat[:oid,:str] := BKCinsert_bun(z:bat[:oid,:str], _56:oid, _48:str) {G}
    gf_a := bat.insert(z,5@0,"a");      # 32 gf_a:bat[:oid,:str] := BKCinsert_bun(z:bat[:oid,:str], _58:oid, _51:str) {G}
    hf_a := bat.insert(z,6@0,"a");      # 33 hf_a:bat[:oid,:str] := BKCinsert_bun(z:bat[:oid,:str], _60:oid, _51:str) {G}
    if_a := bat.insert(z,7@0,"c");      # 34 if_a:bat[:oid,:str] := BKCinsert_bun(z:bat[:oid,:str], _62:oid, _48:str) {G}
    jf_a := bat.insert(z,8@0,"a");      # 35 jf_a:bat[:oid,:str] := BKCinsert_bun(z:bat[:oid,:str], _64:oid, _51:str) {G}
    o := bat.mirror(x);                 # 36 o:bat[:oid,:oid] := BKCmirror(x:bat[:oid,:chr]) {G}
    io.print(x,y);                      # 37 _66:void := IOtable(x:bat[:oid,:chr], y:bat[:oid,:dbl]) 
    io.table(o,y);                      # 38 _67:void := IOttable(o:bat[:oid,:oid], y:bat[:oid,:dbl]) 
    io.table(o,x,y);                    # 39 _68:void := IOttable(o:bat[:oid,:oid], x:bat[:oid,:chr], y:bat[:oid,:dbl]) 
    io.print(x,y,z);                    # 40 _69:void := IOtable(x:bat[:oid,:chr], y:bat[:oid,:dbl], z:bat[:oid,:str]) 
    io.table(o,x,y,z);                  # 41 _70:void := IOttable(o:bat[:oid,:oid], x:bat[:oid,:chr], y:bat[:oid,:dbl], z:bat[:oid,:str]) 
end main;	# 42  
#-------------------------#
# h	t	t	  # name
# oid	chr	dbl	  # type
#-------------------------#
[ 1@0,	  'a',	  1	  ]
[ 2@0,	  'a',	  2	  ]
[ 3@0,	  'b',	  2	  ]
[ 4@0,	  'b',	  2	  ]
[ 5@0,	  'b',	  2	  ]
[ 6@0,	  'b',	  3	  ]
[ 7@0,	  'c',	  1	  ]
[ 8@0,	  'c',	  1	  ]
#-----------------#
# t	t	  # name
# oid	dbl	  # type
#-----------------#
[ 1@0,	  1	  ]
[ 2@0,	  2	  ]
[ 3@0,	  2	  ]
[ 4@0,	  2	  ]
[ 5@0,	  2	  ]
[ 6@0,	  3	  ]
[ 7@0,	  1	  ]
[ 8@0,	  1	  ]
#-------------------------#
# t	t	t	  # name
# oid	chr	dbl	  # type
#-------------------------#
[ 1@0,	  'a',	  1	  ]
[ 2@0,	  'a',	  2	  ]
[ 3@0,	  'b',	  2	  ]
[ 4@0,	  'b',	  2	  ]
[ 5@0,	  'b',	  2	  ]
[ 6@0,	  'b',	  3	  ]
[ 7@0,	  'c',	  1	  ]
[ 8@0,	  'c',	  1	  ]
#---------------------------------#
# h	t	t	t	  # name
# oid	chr	dbl	str	  # type
#---------------------------------#
[ 1@0,	  'a',	  1,	  "c"	  ]
[ 2@0,	  'a',	  2,	  "a"	  ]
[ 3@0,	  'b',	  2,	  "b"	  ]
[ 4@0,	  'b',	  2,	  "c"	  ]
[ 5@0,	  'b',	  2,	  "a"	  ]
[ 6@0,	  'b',	  3,	  "a"	  ]
[ 7@0,	  'c',	  1,	  "c"	  ]
[ 8@0,	  'c',	  1,	  "a"	  ]
#---------------------------------#
# t	t	t	t	  # name
# oid	chr	dbl	str	  # type
#---------------------------------#
[ 1@0,	  'a',	  1,	  "c"	  ]
[ 2@0,	  'a',	  2,	  "a"	  ]
[ 3@0,	  'b',	  2,	  "b"	  ]
[ 4@0,	  'b',	  2,	  "c"	  ]
[ 5@0,	  'b',	  2,	  "a"	  ]
[ 6@0,	  'b',	  3,	  "a"	  ]
[ 7@0,	  'c',	  1,	  "c"	  ]
[ 8@0,	  'c',	  1,	  "a"	  ]



# 07:59:06 >  
# 07:59:06 >  Done.
# 07:59:06 >  

