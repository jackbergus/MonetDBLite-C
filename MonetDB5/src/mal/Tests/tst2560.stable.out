stdout of test 'tst2560` in directory 'src/mal` itself:


# 11:22:26 >  
# 11:22:26 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=31608 --set monet_prompt= --trace --dbname=mTests_src_mal  tst2560.mal < /dev/null
# 11:22:26 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
##materialized views example
#r:= bat.new(:void,:int);
#bat.setSequenceBase(r,0@0);
#bat.setRole(r,"emp","age");
#bat.append(r,1);
#bat.append(r,2);
#bat.append(r,3);
#io.print(r);
#s:= bat.new(:void,:str);
#bat.setSequenceBase(s,0@0);
#bat.setRole(s,"emp","name");
#bat.append(s,"A");
#bat.append(s,"B");
#bat.append(s,"C");
#io.print(s);
#
#factory view1(l:int,h:int):bat[:void,:str];
#a:bat[:void,:int] := bbp.bind("emp","age");
#b:bat[:void,:str] := bbp.bind("emp","name");
#barrier always:= true;
#	lOld:= l;
#	hOld:= h;
#	io.print("recalc");
#	c := algebra.select(a,l,h);
#	d := algebra.semijoin(b,c);
#	barrier available:=true;
#		yield d;
#		leave available:= lOld != l;
#		leave available:= hOld != h;
#		io.print("reuse");
#		redo available:=true;
#	exit available;
#	redo always;
#exit always;
#end view1;
factory user.view1(l:int,h:int):bat[:oid,:str];	# 0  (view1:bat[:oid,:str])<-(l:int)(h:int)
    a:bat[:oid,:int]  := bbp.bind("emp","age");	# 1 CMDbbpbind2 (a:bat[:oid,:int])<-(_4:str)(_5:str)
    b:bat[:oid,:str]  := bbp.bind("emp","name");	# 2 CMDbbpbind2 (b:bat[:oid,:str])<-(_4:str)(_7:str)
barrier always := true;	# 3  (always:bit)<-(_9:bit) jump 17
    lOld := l;	# 4  (lOld:int)<-(l:int)
    hOld := h;	# 5  (hOld:int)<-(h:int)
    io.print("recalc");	# 6 IOprint_val (_12:void)<-(_13:str)
    c := algebra.select(a,l,h);	# 7 ALGselect (c:bat[:oid,:int])<-(a:bat[:oid,:int])(l:int)(h:int)
    d := algebra.semijoin(b,c);	# 8 ALGsemijoin (d:bat[:oid,:str])<-(b:bat[:oid,:str])(c:bat[:oid,:int])
barrier available := true;	# 9  (available:bit)<-(_9:bit) jump 15
    yield d;	# 10  (d:bat[:oid,:str])
    leave available := calc.!=(lOld,l);	# 11 CALCcompNEQintint (available:bit)<-(lOld:int)(l:int) jump 15
    leave available := calc.!=(hOld,h);	# 12 CALCcompNEQintint (available:bit)<-(hOld:int)(h:int) jump 15
    io.print("reuse");	# 13 IOprint_val (_17:void)<-(_18:str)
    redo available := true;	# 14  (available:bit)<-(_9:bit) jump 10
exit available;	# 15  (available:bit)
    redo always;	# 16  (always:bit) jump 4
exit always;	# 17  (always:bit)
end view1;	# 18  
#
#e:= user.view1(0,2);
#io.print(e);
#e:= user.view1(0,2);
#io.print(e);
#e:= user.view1(0,4);
#io.print(e);
#
#
function user.main():void;	# 0  (main:void)
#materialized views example 	# 1  (_1:str)
    r := bat.new(:oid,:int);	# 2 CMDBATnew (r:bat[:oid,:int])<-(_3:oid)(_4:int)
    bat.setRole(r,"emp","age");	# 3 BKCsetRole (_5:void)<-(r:bat[:oid,:int])(_6:str)(_7:str)
    bat.append(r,1);	# 4 BKCappend_val_wrap (_8:void)<-(r:bat[:oid,:int])(_9:int)
    bat.append(r,2);	# 5 BKCappend_val_wrap (_10:void)<-(r:bat[:oid,:int])(_11:int)
    bat.append(r,3);	# 6 BKCappend_val_wrap (_12:void)<-(r:bat[:oid,:int])(_13:int)
    io.print(r);	# 7 IOprint_val (_14:void)<-(r:bat[:oid,:int])
    s := bat.new(:oid,:str);	# 8 CMDBATnew (s:bat[:oid,:str])<-(_3:oid)(_16:str)
    bat.setRole(s,"emp","name");	# 9 BKCsetRole (_17:void)<-(s:bat[:oid,:str])(_6:str)(_18:str)
    bat.append(s,"A");	# 10 BKCappend_val_wrap (_19:void)<-(s:bat[:oid,:str])(_20:str)
    bat.append(s,"B");	# 11 BKCappend_val_wrap (_21:void)<-(s:bat[:oid,:str])(_22:str)
    bat.append(s,"C");	# 12 BKCappend_val_wrap (_23:void)<-(s:bat[:oid,:str])(_24:str)
    io.print(s);	# 13 IOprint_val (_25:void)<-(s:bat[:oid,:str])
    e := user.view1(0,2);	# 14  (e:bat[:oid,:str])<-(_27:int)(_11:int)
    io.print(e);	# 15 IOprint_val (_28:void)<-(e:bat[:oid,:str])
    e := user.view1(0,2);	# 16  (e:bat[:oid,:str])<-(_27:int)(_11:int)
    io.print(e);	# 17 IOprint_val (_29:void)<-(e:bat[:oid,:str])
    e := user.view1(0,4);	# 18  (e:bat[:oid,:str])<-(_27:int)(_30:int)
    io.print(e);	# 19 IOprint_val (_31:void)<-(e:bat[:oid,:str])
end main;	# 20  
#-----------------#
# emp	age	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
[ 2@0,	  3	  ]
#-----------------#
# emp	name	  # name
# void	str	  # type
#-----------------#
[ 0@0,	  "A"	  ]
[ 1@0,	  "B"	  ]
[ 2@0,	  "C"	  ]
[ "recalc" ]
#-----------------#
# t	h	  # name
# void	str	  # type
#-----------------#
[ 0@0,	  "A"	  ]
[ 1@0,	  "B"	  ]
[ "reuse" ]
#-----------------#
# t	h	  # name
# void	str	  # type
#-----------------#
[ 0@0,	  "A"	  ]
[ 1@0,	  "B"	  ]
[ "recalc" ]
#-----------------#
# h	t	  # name
# void	str	  # type
#-----------------#
[ 0@0,	  "A"	  ]
[ 1@0,	  "B"	  ]
[ 2@0,	  "C"	  ]


# 11:22:26 >  
# 11:22:26 >  Done.
# 11:22:26 >  

