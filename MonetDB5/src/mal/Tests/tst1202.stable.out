stdout of test 'tst1202` in directory 'src/mal` itself:


# 07:59:02 >  
# 07:59:02 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst1202.mal </dev/null
# 07:59:02 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
##       rule_jan:= rule("1st MON from start of JAN@01:15");
##	rule_mar:= rule("first WEDNE on or after march 10@01:15");
#        rule_apr:= rule("last THU on or before aPr 1@01:15");
##        rule_may:= rule("MAY 26@01:15");
##        rule_jun:= rule("2nd TUE from end of june@01:15");
##        rule_jul:= rule(7,1,1,75);
##        rule_aug:= rule(8,-1,1,75);
##        rule_sep:= rule(9,-10,3,75);
##        rule_oct:= rule(10,31,0,75);
#        rule_nov:= rule(11,-10,-4,75);
##        rule_dec:= rule(12,-31,0,75);
##        rule_feb:= rule("first fRiDaY on or after february 30@01:15");
#
function user.main():void;	# 0  (main:void)
#old bug in tst1200 	# 1  (_1:str)
    rule_apr := mtime.rule("last THU on or before aPr 1@01:15");	# 2 MTIMErule_fromstr (rule_apr:zrule)<-(_3:str)
    rule_nov := mtime.rule(11,-10,-4,75);	# 3 MTIMErule_create (rule_nov:zrule)<-(_5:int)(_6:int)(_7:int)(_8:int)
    mc_a := calc.*(23,60);	# 4 CALCbinaryMULintint (mc_a:int)<-(_10:int)(_11:int)
    tzone_07 := mtime.tzone(mc_a,rule_apr,rule_nov);	# 5 MTIMEtzone_create_dst (tzone_07:tzone)<-(mc_a:int)(rule_apr:zrule)(rule_nov:zrule)
    nc_a := calc.*(-23,59);	# 6 CALCbinaryMULintint (nc_a:int)<-(_14:int)(_15:int)
    oc_a := calc.-(nc_a,59);	# 7 CALCbinarySUBintint (oc_a:int)<-(nc_a:int)(_15:int)
    tzone_08 := mtime.tzone(oc_a);	# 8 MTIMEtzone_create (tzone_08:tzone)<-(oc_a:int)
    tzone_09 := mtime.tzone(0);	# 9 MTIMEtzone_create (tzone_09:tzone)<-(_19:int)
    pc_a := calc.*(23,60);	# 10 CALCbinaryMULintint (pc_a:int)<-(_10:int)(_11:int)
    qc_a := calc.+(pc_a,59);	# 11 CALCbinaryADDintint (qc_a:int)<-(pc_a:int)(_15:int)
    tzone_bat := bat.new(:oid,:tzone);	# 12 CMDBATnew (tzone_bat:bat[:oid,:tzone])<-(_23:oid)(_24:tzone)
    i8 := 8@0;	# 13  (i8:oid)<-(_26:oid)
# don;t use 08@0 	# 14  (_27:str)
    io.print(i8);	# 15 IOprint_val (_28:int)<-(i8:oid)
# don;t use 09@0 	# 16  (_29:str)
    i9 := 9@0;	# 17  (i9:oid)<-(_31:oid)
    io.print(i9);	# 18 IOprint_val (_32:int)<-(i9:oid)
    bd_a := bat.insert(tzone_bat,8@0,tzone_08);	# 19 BKCinsert_bun_oid_any (bd_a:void)<-(tzone_bat:bat[:oid,:tzone])(_26:oid)(tzone_08:tzone)
    cd_a := bat.insert(tzone_bat,9@0,tzone_09);	# 20 BKCinsert_bun_oid_any (cd_a:void)<-(tzone_bat:bat[:oid,:tzone])(_31:oid)(tzone_09:tzone)
    bat.setColumn(tzone_bat,"tzone");	# 21 BKCsetColumn (_35:void)<-(tzone_bat:bat[:oid,:tzone])(_36:str)
    jd_a := io.print(tzone_bat);	# 22 IOprint_val (jd_a:int)<-(tzone_bat:bat[:oid,:tzone])
end main;	# 23  
[ 8@0 ]
[ 9@0 ]
#-------------------------#
# h	tzone		  # name
# oid	tzone		  # type
#-------------------------#
[ 8@0,	  GMT-23:36	  ]
[ 9@0,	  GMT		  ]

# 07:59:02 >  
# 07:59:02 >  Done.
# 07:59:02 >  

