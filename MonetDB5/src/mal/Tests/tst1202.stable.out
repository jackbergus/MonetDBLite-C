stdout of test 'tst1202` in directory 'src/mal` itself:


# 07:59:02 >  
# 07:59:02 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst1202.mal </dev/null
# 07:59:02 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
##       rule_jan:= rule("1st MON from start of JAN@01:15");
##	rule_mar:= rule("first WEDNE on or after march 10@01:15");
#        rule_apr:= rule("last THU on or before aPr 1@01:15");
##        rule_may:= rule("MAY 26@01:15");
##        rule_jun:= rule("2nd TUE from end of june@01:15");
##        rule_jul:= rule(7,1,1,75);
##        rule_aug:= rule(8,-1,1,75);
##        rule_sep:= rule(9,-10,3,75);
##        rule_oct:= rule(10,31,0,75);
#        rule_nov:= rule(11,-10,-4,75);
##        rule_dec:= rule(12,-31,0,75);
##        rule_feb:= rule("first fRiDaY on or after february 30@01:15");
#
#
##	tzone_00:= tzone("GMT");
##	tzone_01:= tzone("GMT+01:00");
##	tzone_02:= tzone("GMT+0100");
##	tzone_03:= tzone(60,rule_oct,rule_mar);
##	tzone_04:= tzone(0,rule_jan,rule_aug);
##	tzone_05:= tzone(-97,rule_oct,rule_apr);
##	tzone_06:= tzone(-97,rule_may,rule_sep);
#print("start");
#	mc_a := *(23,60);
#	tzone_07:= tzone(mc_a,rule_apr,rule_nov);
#	nc_a := *(-23,59);
#	oc_a := -(nc_a,59);
#	tzone_08:= tzone(oc_a);
##print("tzone_08");
##print(tzone_08);
#	tzone_09:= tzone(0);
##print("tzone_09");
##print(tzone_09);
##	tzone_10:= tzone(-60);
##print("tzone_10");
##print(tzone_10);
#	pc_a := *(23,60);
#	qc_a := +(pc_a,59);
##	tzone_11:= tzone(qc_a);
##	tzone_12:= tzone(60);
##	tzone_13:= tzone(60,rule_feb,rule_dec);
##	rc_a := *(24,60);
##	tzone_15:= tzone(rc_a,rule_apr,rule_nov);
#	tzone_bat:= new(:oid,:tzone);
##	sc_a := insert(tzone_bat,00@0,tzone_00);
##	tc_a := insert(sc_a,01@0,tzone_01);
##	uc_a := insert(tc_a,02@0,tzone_02);
##	vc_a := insert(tzone_bat,03@0,tzone_03);
##	wc_a := insert(vc_a,04@0,tzone_04);
##	xc_a := insert(wc_a,05@0,tzone_05);
##	yc_a := insert(tzone_bat,06@0,tzone_06);
##	ad_a := insert(yc_a,07@0,tzone_07);
#	bd_a := insert(tzone_bat,08@0,tzone_08);
#	cd_a := insert(tzone_bat,09@0,tzone_09);
##	dd_a := insert(cd_a,10@0,tzone_10);
##	ed_a := insert(dd_a,11@0,tzone_11);
##	fd_a := insert(tzone_bat,12@0,tzone_12);
##	gd_a := insert(fd_a,13@0,tzone_13);
##	hd_a := insert(gd_a,15@0,tzone_15);
#	setColumn(tzone_bat,"tzone");
#	jd_a := print(tzone_bat);
##print("tzone"); print(jd_a);
##	kd_a := multiplex.script("minutes",tzone_bat);
##	ld_a := setColumn(kd_a,"minutes");
##print("minutes"); print(ld_a);
##	md_a := multiplex.script("start_dst",tzone_bat);
##	nd_a := setColumn(md_a,"start_dst");
##print("start_dst"); print(nd_a);
##	od_a := multiplex.script("end_dst",tzone_bat);
##	pd_a := setColumn(od_a,"end_dst");
##print("end_dst");print(pd_a);
##	qd_a := print(ld_a,nd_a,pd_a);
#
function user.main():int;	# 0  (main:int)
#old bug in tst1200 	# 1  (_2:str)
    rule_apr := mtime.rule("last THU on or before aPr 1@01:15");	# 2 MTIMErule_fromstr (rule_apr:rule)<-(_4:str)
    rule_nov := mtime.rule(11,-10,-4,75);	# 3 MTIMErule_create (rule_nov:rule)<-(_6:int)(_7:int)(_8:int)(_9:int)
    mc_a := calc.*(23,60);	# 4 CALCbinaryMULintint (mc_a:int)<-(_11:int)(_12:int)
    tzone_07 := mtime.tzone(mc_a,rule_apr,rule_nov);	# 5 MTIMEtzone_create_dst (tzone_07:tzone)<-(mc_a:int)(rule_apr:rule)(rule_nov:rule)
    nc_a := calc.*(-23,59);	# 6 CALCbinaryMULintint (nc_a:int)<-(_15:int)(_16:int)
    oc_a := calc.-(nc_a,59);	# 7 CALCbinarySUBintint (oc_a:int)<-(nc_a:int)(_16:int)
    tzone_08 := mtime.tzone(oc_a);	# 8 MTIMEtzone_create (tzone_08:tzone)<-(oc_a:int)
    tzone_09 := mtime.tzone(0);	# 9 MTIMEtzone_create (tzone_09:tzone)<-(_20:int)
    pc_a := calc.*(23,60);	# 10 CALCbinaryMULintint (pc_a:int)<-(_11:int)(_12:int)
    qc_a := calc.+(pc_a,59);	# 11 CALCbinaryADDintint (qc_a:int)<-(pc_a:int)(_16:int)
    tzone_bat := bat.new(:oid,:tzone);	# 12 CMDBATnew (tzone_bat:bat[:oid,:tzone])<-(_24:oid)(_25:tzone)
    i8 := 8@0;	# 13  (i8:oid)<-(_27:oid)
# don;t use 08@0 	# 14  (_29:str)
    io.print(i8);	# 15 IOprint_val (_30:int)<-(i8:oid)
# don;t use 09@0 	# 16  (_32:str)
    i9 := 9@0;	# 17  (i9:oid)<-(_34:oid)
    io.print(i9);	# 18 IOprint_val (_35:int)<-(i9:oid)
    bd_a := bat.insert(tzone_bat,8@0,tzone_08);	# 19 BKCinsert_bun (bd_a:void)<-(tzone_bat:bat[:oid,:tzone])(_27:oid)(tzone_08:tzone)
    cd_a := bat.insert(tzone_bat,9@0,tzone_09);	# 20 BKCinsert_bun (cd_a:void)<-(tzone_bat:bat[:oid,:tzone])(_34:oid)(tzone_09:tzone)
    bat.setColumn(tzone_bat,"tzone");	# 21 BKCsetColumn (_38:bat[:oid,:tzone])<-(tzone_bat:bat[:oid,:tzone])(_39:str)
    jd_a := io.print(tzone_bat);	# 22 IOprint_val (jd_a:int)<-(tzone_bat:bat[:oid,:tzone])
end main;	# 23  
[ 8@0 ]
[ 9@0 ]
#-------------------------#
# h	tzone		  # name
# oid	tzone		  # type
#-------------------------#
[ 8@0,	  GMT-23:36	  ]
[ 9@0,	  GMT		  ]

# 07:59:02 >  
# 07:59:02 >  Done.
# 07:59:02 >  

