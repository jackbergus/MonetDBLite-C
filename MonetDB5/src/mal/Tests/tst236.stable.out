stdout of test 'tst236` in directory 'src/mal` itself:


# 13:59:36 >  
# 13:59:36 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib64/MonetDB5:/ufs/mk/monet5/Linux/lib64/MonetDB5/lib:/ufs/mk/monet5/Linux/lib64/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/xquery_logs" --set mapi_port=37951 --set monet_prompt= --trace --dbname=mTests_src_mal  tst236.mal < /dev/null
# 13:59:36 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
## check reference counting and multiplex
#function dir():void;
#        d:= bbp.getRefCount();
#        dl:=bbp.getLRefCount();
#        dn:= bbp.getNames();
#        io.print(dn,d,dl);
#end dir;
function user.dir():void;               #  0 dir:void := user.dir() {G}
    d := bbp.getRefCount();             #  1 d:bat[:int,:int] := CMDbbpRefCount() {G}
    dl := bbp.getLRefCount();           #  2 dl:bat[:int,:int] := CMDbbpLRefCount() {G}
    dn := bbp.getNames();               #  3 dn:bat[:int,:str] := CMDbbpNames() {G}
    ds := algebra.sort(dn);             #  4 ds:bat[:int,:str] := ALGhsort(dn:bat[:int,:str]) {G}
    io.table(ds,d,dl);                  #  5 _5:void := IOttable(ds:bat[:int,:str], d:bat[:int,:int], dl:bat[:int,:int]) 
end dir;	# 6  
#
#function createBAT(name:str):bat;
#	res:= bat.new(:int,:int);
#	bat.setName(res,name);
#	i:= calc.getBATidentifier(res);
#	return i;
#end createBAT;
function user.createBAT(name:str):BAT;  #  0 createBAT:BAT := user.createBAT(name:str) {G}
    res := bat.new(:int,:int);          #  1 res:bat[:int,:int] := CMDBATnew(_3:int, _3:int) {G}
    bat.setName(res,name);              #  2 _4:void := BKCsetName(res:bat[:int,:int], name:str) 
    i := calc.getBATidentifier(res);    #  3 i:BAT := CALCbat2batid(res:bat[:int,:int]) {G}
    return createBAT := i;              #  4 createBAT:BAT := i:BAT {G}
end createBAT;	# 5  
#m:= bat.new(:oid,:str);
#bat.insert(m,10:oid,"ten");
#bat.insert(m,20:oid,"twenty");
#dir();
#r:bat[:oid,:bat]:= optimizer.multiplex("user","createBAT",m);
#dir();
#io.print(r);
#
function user.main():void;              #  0 main:void := user.main() {G}
# check reference counting and multiplex 
    m := bat.new(:oid,:str);            #  2 m:bat[:oid,:str] := CMDBATnew(_3:oid, _4:str) {G}
    bat.insert(m,10@0:oid,"ten");       #  3 _5:void := BKCinsert_bun(m:bat[:oid,:str], _6:oid, _7:str) 
    bat.insert(m,20@0:oid,"twenty");    #  4 _8:void := BKCinsert_bun(m:bat[:oid,:str], _9:oid, _10:str) 
    _15 := bat.new(nil:oid,nil:BAT);    #  5 _15:bat[:oid,:BAT] := CMDBATnew(_16:oid, _17:BAT) {G}
barrier (_19,_20,_21):= bat.newIterator(m);#  6 (_19:lng, _20:oid, _21:str) := CHPbunIterator(m:bat[:oid,:str]) {GJ10}
    _23 := user.createBAT(_21);         #  7 _23:BAT := user.createBAT(_21:str) {G}
    bat.insert(_15,_20,_23);            #  8 _24:void := BKCinsert_bun(_15:bat[:oid,:BAT], _20:oid, _23:BAT) 
    redo (_19,_20,_21):= bat.hasMoreElements(m);#  9 (_19:lng, _20:oid, _21:str) := CHPbunHasMoreElements(m:bat[:oid,:str]) {GJ7}
exit (_19,_20,_21);                     # 10 (_19:lng, _20:oid, _21:str) 
    r:bat[:oid,:BAT]  := _15;           # 11 r:bat[:oid,:BAT] := _15:bat[:oid,:BAT] {G}
    io.print(r);                        # 12 _14:void := IOprint_val(r:bat[:oid,:BAT]) 
end main;                               # 13  
#-------------------------#
# h	t		  # name
# oid	BAT		  # type
#-------------------------#
[ 10@0,	  <ten>		  ]
[ 20@0,	  <twenty>	  ]

# 13:59:36 >  
# 13:59:36 >  Done.
# 13:59:36 >  

