stdout of test 'tst280` in directory 'src/mal` itself:


# 08:01:12 >  
# 08:01:12 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst280.mal </dev/null
# 08:01:12 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
#function pow(i:int,j:int):int;
#	z:= i+j;
#	printf("result %d\n",z);
#	return z;
#end pow;
function user.pow(i:int,j:int):int;	# 0  (pow:int)<-(i:int)(j:int)
    z := calc.+(i,j);	# 1 CALCbinaryADDintint (z:int)<-(i:int)(j:int)
    io.printf("result %d\n",z);	# 2 IOprint_formatted_int (_4:int)<-(_5:str)(z:int)
    return z;	# 3  (z:int)
end pow;	# 4  
#function tst(A2:bat[:void,:int],A3:bat[:void,:int]):bat[:void,:int]; 
#	print(A2);
#	resB := bbp.new(:void,:int); 
#	bat.setSequenceBase(resB,0@0);
#	lim:= count(A2);
#	printf("count %d\n",lim);
#	l:= lng(lim);
#barrier (mloop,m):=mal.newRange(0:lng);
#	printf("loopindex %d\n",m);
#        B2 := algebra.fetch(A2,m);       
#	printf("B2 value %d\n",B2);
#        B3 := algebra.fetch(A3,m);       
#	printf("B3 value %d\n",B3);
#        cr := pow(B2,B3);
#        insert(resB,nil,cr); 
#        redo (mloop,m) :=mal.nextElement(1:lng,l);    
#catch   MALexception;  
#exit    MALexception; 
#exit    (mloop,m) ;  
#  
#        return resB;    
#end tst;   
function user.tst(A2:bat[:void,:int],A3:bat[:void,:int]):bat[:void,:int];	# 0  (tst:bat[:void,:int])<-(A2:bat[:void,:int])(A3:bat[:void,:int])
    io.print(A2);	# 1 IOprint_val (_3:int)<-(A2:bat[:void,:int])
    resB := bat.new(:void,:int);	# 2 CMDBATnew (resB:bat[:void,:int])<-(_5:void)(_6:int)
    bat.setSequenceBase(resB,0@0);	# 3 BKCsetSequenceBase (_7:bat[:void,:int])<-(resB:bat[:void,:int])(_8:oid)
    lim := aggr.count(A2);	# 4 ALGcount_bat (lim:int)<-(A2:bat[:void,:int])
    io.printf("count %d\n",lim);	# 5 IOprint_formatted_int (_10:int)<-(_11:str)(lim:int)
    l := calc.lng(lim);	# 6 CALCint2lng (l:lng)<-(lim:int)
barrier (mloop,m):= mal.newRange(0:lng);	# 7 RNGnewRange_lng (mloop:bit)(m:lng)<-(_15:lng) jump 18
    io.printf("loopindex %d\n",m);	# 8 IOprint_formatted_lng (_16:int)<-(_17:str)(m:lng)
    B2 := algebra.fetch(A2,m);	# 9 ALGfetch (B2:int)<-(A2:bat[:void,:int])(m:lng)
    io.printf("B2 value %d\n",B2);	# 10 IOprint_formatted_int (_19:int)<-(_20:str)(B2:int)
    B3 := algebra.fetch(A3,m);	# 11 ALGfetch (B3:int)<-(A3:bat[:void,:int])(m:lng)
    io.printf("B3 value %d\n",B3);	# 12 IOprint_formatted_int (_22:int)<-(_23:str)(B3:int)
    cr := user.pow(B2,B3);	# 13  (cr:int)<-(B2:int)(B3:int)
    bat.append(resB,cr);	# 14 BKCappend_val_wrap (_25:void)<-(resB:bat[:void,:int])(cr:int)
    redo (mloop,m):= mal.nextElement(1:lng,l);	# 15 RNGnextElement_lng (mloop:bit)(m:lng)<-(_26:lng)(l:lng) jump 8
catch MALexception;	# 16  (MALexception:any) jump 17
exit MALexception;	# 17  (MALexception:any)
exit (mloop,m);	# 18  (mloop:bit)(m:lng)
    return resB;	# 19  (resB:bat[:void,:int])
end tst;	# 20  
#
#	b := new(:void,:int);
#	setSequenceBase(b,0@0);
#	insert(b,nil,1);
#	insert(b,nil,2);
#	e:=fetch(b,1:lng);
#	print(e);
#	print(b);
#	c:= copy(b);
#	z:= tst(b,c);
#	print(z);
#
#
function user.main():void;	# 0  (main:void)
    b := bat.new(:void,:int);	# 1 CMDBATnew (b:bat[:void,:int])<-(_2:void)(_3:int)
    bat.setSequenceBase(b,0@0);	# 2 BKCsetSequenceBase (_4:bat[:void,:int])<-(b:bat[:void,:int])(_5:oid)
    bat.append(b,1);	# 3 BKCappend_val_wrap (_6:void)<-(b:bat[:void,:int])(_7:int)
    bat.append(b,2);	# 4 BKCappend_val_wrap (_8:void)<-(b:bat[:void,:int])(_9:int)
    e := algebra.fetch(b,1:lng);	# 5 ALGfetch (e:int)<-(b:bat[:void,:int])(_11:lng)
    io.print(e);	# 6 IOprint_val (_12:int)<-(e:int)
    io.print(b);	# 7 IOprint_val (_13:int)<-(b:bat[:void,:int])
    c := algebra.copy(b);	# 8 ALGcopy (c:bat[:void,:int])<-(b:bat[:void,:int])
    z := user.tst(b,c);	# 9  (z:bat[:void,:int])<-(b:bat[:void,:int])(c:bat[:void,:int])
    io.print(z);	# 10 IOprint_val (_16:int)<-(z:bat[:void,:int])
end main;	# 11  
[ 2 ]
#-----------------#
# h	tmp_4	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
#-----------------#
# h	tmp_4	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
count 2
loopindex 0
B2 value 1
B3 value 1
result 2
loopindex 1
B2 value 2
B3 value 2
result 4
#-----------------#
# h	tmp_6	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  2	  ]
[ 1@0,	  4	  ]

# 08:01:12 >  
# 08:01:12 >  Done.
# 08:01:12 >  

