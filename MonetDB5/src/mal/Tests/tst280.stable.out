stdout of test 'tst280` in directory 'src/mal` itself:


# 08:01:12 >  
# 08:01:12 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst280.mal </dev/null
# 08:01:12 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
#function pow(i:int,j:int):int;
#	z:= i+j;
#	printf("result %d\n",z);
#	return z;
#end pow;
function user.pow(i:int,j:int):int;     #  0 pow:int := user.pow(i:int, j:int) 
    z := calc.+(i,j);                   #  1 z:int := CALCbinaryADDintint(i:int, j:int) 
    io.printf("result %d\n",z);         #  2 _4:void := IOprint_formatted_int(_5:str, z:int) 
    return pow := z;                    #  3 pow:int := z:int 
end pow;	# 4  
#function tst(A2:bat[:void,:int],A3:bat[:void,:int]):bat[:void,:int]; 
#	print(A2);
#	resB := bbp.new(:void,:int); 
#	bat.setSequenceBase(resB,0@0);
#	lim:= count(A2);
#	printf("count %d\n",lim);
#	l:= lng(lim);
#barrier (mloop,m):=mal.newRange(0:lng);
#	printf("loopindex %d\n",m);
#        B2 := algebra.fetch(A2,m);       
#	printf("B2 value %d\n",B2);
#        B3 := algebra.fetch(A3,m);       
#	printf("B3 value %d\n",B3);
#        cr := pow(B2,B3);
#        insert(resB,nil,cr); 
#        redo (mloop,m) :=mal.nextElement(1:lng,l);    
#catch   MALException;  
#exit    MALException; 
#exit    (mloop,m) ;  
#  
#        return resB;    
#end tst;   
function user.tst(A2:bat[:oid,:int],A3:bat[:oid,:int]):bat[:oid,:int];#  0 tst:bat[:oid,:int] := user.tst(A2:bat[:oid,:int], A3:bat[:oid,:int]) {G}
    io.print(A2);                       #  1 _3:void := IOprint_val(A2:bat[:oid,:int]) 
    resB := bat.new(:oid,:int);         #  2 resB:bat[:oid,:int] := CMDBATnew(_5:oid, _6:int) {G}
    lim := aggr.count(A2);              #  3 lim:int := ALGcount_bat(A2:bat[:oid,:int]) 
    io.printf("count %d\n",lim);        #  4 _8:void := IOprint_formatted_int(_9:str, lim:int) 
    l := calc.lng(lim);                 #  5 l:lng := CALCint2lng(lim:int) 
barrier (mloop,m):= language.newRange(0:lng);#  6 (mloop:bit, m:lng) := RNGnewRange_lng(_13:lng) {J17}
    io.printf("loopindex %d\n",m);      #  7 _14:void := IOprint_formatted_lng(_15:str, m:lng) 
    B2 := algebra.fetch(A2,m);          #  8 B2:int := ALGfetch(A2:bat[:oid,:int], m:lng) 
    io.printf("B2 value %d\n",B2);      #  9 _17:void := IOprint_formatted_int(_18:str, B2:int) 
    B3 := algebra.fetch(A3,m);          # 10 B3:int := ALGfetch(A3:bat[:oid,:int], m:lng) 
    io.printf("B3 value %d\n",B3);      # 11 _20:void := IOprint_formatted_int(_21:str, B3:int) 
    cr := user.pow(B2,B3);              # 12 cr:int := user.pow(B2:int, B3:int) 
    bat.append(resB,cr);                # 13 _23:void := BKCappend_val_wrap(resB:bat[:oid,:int], cr:int) 
    redo (mloop,m):= language.nextElement(1:lng,l);# 14 (mloop:bit, m:lng) := RNGnextElement_lng(_24:lng, l:lng) {J7}
catch MALException:str ;                # 15 MALException:str {J16}
exit MALException:str ;                 # 16 MALException:str 
exit (mloop,m);                         # 17 (mloop:bit, m:lng 
    return tst := resB;                 # 18 tst:bat[:oid,:int] := resB:bat[:oid,:int] {G}
end tst;	# 19  
#
#
function user.main():void;              #  0 main:void {G}
    b := bat.new(:oid,:int);            #  1 b:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    bat.append(b,1);                    #  2 _4:void := BKCappend_val_wrap(b:bat[:oid,:int], _5:int) 
    bat.append(b,2);                    #  3 _6:void := BKCappend_val_wrap(b:bat[:oid,:int], _7:int) 
    e := algebra.fetch(b,1:lng);        #  4 e:int := ALGfetch(b:bat[:oid,:int], _9:lng) 
    io.print(e);                        #  5 _10:void := IOprint_val(e:int) 
    io.print(b);                        #  6 _11:void := IOprint_val(b:bat[:oid,:int]) 
    c := algebra.copy(b);               #  7 c:bat[:oid,:int] := ALGcopy(b:bat[:oid,:int]) {G}
    z := user.tst(b,c);                 #  8 z:bat[:oid,:int] := user.tst(b:bat[:oid,:int], c:bat[:oid,:int]) {G}
    io.print(z);                        #  9 _14:void := IOprint_val(z:bat[:oid,:int]) 
end main;	# 10  
[ 2 ]
#-----------------#
# h	tmp_4	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
#-----------------#
# h	tmp_4	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
count 2
loopindex 0
B2 value 1
B3 value 1
result 2
loopindex 1
B2 value 2
B3 value 2
result 4
#-----------------#
# h	tmp_6	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  2	  ]
[ 1@0,	  4	  ]

# 08:01:12 >  
# 08:01:12 >  Done.
# 08:01:12 >  

