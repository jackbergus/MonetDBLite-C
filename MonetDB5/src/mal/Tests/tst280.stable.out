stdout of test 'tst280` in directory 'src/mal` itself:


# 08:01:12 >  
# 08:01:12 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst280.mal </dev/null
# 08:01:12 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
#function pow(i:int,j:int):int;
#	z:= i+j;
#	printf("result %d\n",z);
#	return z;
#end pow;
function user.pow(i:int,j:int):int;	# 0  (pow:int)<-(i:int)(j:int)
    z := calc.+(i,j);	# 1 CALCbinaryADDintint (z:int)<-(i:int)(j:int)
    io.printf("result %d\n",z);	# 2 IOprint_formatted_int (_4:void)<-(_5:str)(z:int)
    return z;	# 3  (z:int)
end pow;	# 4  
#function tst(A2:bat[:void,:int],A3:bat[:void,:int]):bat[:void,:int]; 
#	print(A2);
#	resB := bbp.new(:void,:int); 
#	bat.setSequenceBase(resB,0@0);
#	lim:= count(A2);
#	printf("count %d\n",lim);
#	l:= lng(lim);
#barrier (mloop,m):=mal.newRange(0:lng);
#	printf("loopindex %d\n",m);
#        B2 := algebra.fetch(A2,m);       
#	printf("B2 value %d\n",B2);
#        B3 := algebra.fetch(A3,m);       
#	printf("B3 value %d\n",B3);
#        cr := pow(B2,B3);
#        insert(resB,nil,cr); 
#        redo (mloop,m) :=mal.nextElement(1:lng,l);    
#catch   MALException;  
#exit    MALException; 
#exit    (mloop,m) ;  
#  
#        return resB;    
#end tst;   
function user.tst(A2:bat[:oid,:int],A3:bat[:oid,:int]):bat[:oid,:int];	# 0  (tst:bat[:oid,:int])<-(A2:bat[:oid,:int])(A3:bat[:oid,:int])
    io.print(A2);	# 1 IOprint_val (_3:void)<-(A2:bat[:oid,:int])
    resB := bat.new(:oid,:int);	# 2 CMDBATnew (resB:bat[:oid,:int])<-(_5:oid)(_6:int)
    lim := aggr.count(A2);	# 3 ALGcount_bat (lim:int)<-(A2:bat[:oid,:int])
    io.printf("count %d\n",lim);	# 4 IOprint_formatted_int (_8:void)<-(_9:str)(lim:int)
    l := calc.lng(lim);	# 5 CALCint2lng (l:lng)<-(lim:int)
barrier (mloop,m):= language.newRange(0:lng);	# 6 RNGnewRange_lng (mloop:bit)(m:lng)<-(_13:lng) jump 17
    io.printf("loopindex %d\n",m);	# 7 IOprint_formatted_lng (_14:void)<-(_15:str)(m:lng)
    B2 := algebra.fetch(A2,m);	# 8 ALGfetch (B2:int)<-(A2:bat[:oid,:int])(m:lng)
    io.printf("B2 value %d\n",B2);	# 9 IOprint_formatted_int (_17:void)<-(_18:str)(B2:int)
    B3 := algebra.fetch(A3,m);	# 10 ALGfetch (B3:int)<-(A3:bat[:oid,:int])(m:lng)
    io.printf("B3 value %d\n",B3);	# 11 IOprint_formatted_int (_20:void)<-(_21:str)(B3:int)
    cr := user.pow(B2,B3);	# 12  (cr:int)<-(B2:int)(B3:int)
    bat.append(resB,cr);	# 13 BKCappend_val_wrap (_23:void)<-(resB:bat[:oid,:int])(cr:int)
    redo (mloop,m):= language.nextElement(1:lng,l);	# 14 RNGnextElement_lng (mloop:bit)(m:lng)<-(_24:lng)(l:lng) jump 7
catch MALException:str ;	# 15  (MALException:str) jump 16
exit MALException:str ;	# 16  (MALException:str)
exit (mloop,m);	# 17  (mloop:bit)(m:lng)
    return resB;	# 18  (resB:bat[:oid,:int])
end tst;	# 19  
#
#
function user.main():void;	# 0  (main:void)
    b := bat.new(:oid,:int);	# 1 CMDBATnew (b:bat[:oid,:int])<-(_2:oid)(_3:int)
    bat.append(b,1);	# 2 BKCappend_val_wrap (_4:void)<-(b:bat[:oid,:int])(_5:int)
    bat.append(b,2);	# 3 BKCappend_val_wrap (_6:void)<-(b:bat[:oid,:int])(_7:int)
    e := algebra.fetch(b,1:lng);	# 4 ALGfetch (e:int)<-(b:bat[:oid,:int])(_9:lng)
    io.print(e);	# 5 IOprint_val (_10:void)<-(e:int)
    io.print(b);	# 6 IOprint_val (_11:void)<-(b:bat[:oid,:int])
    c := algebra.copy(b);	# 7 ALGcopy (c:bat[:oid,:int])<-(b:bat[:oid,:int])
    z := user.tst(b,c);	# 8  (z:bat[:oid,:int])<-(b:bat[:oid,:int])(c:bat[:oid,:int])
    io.print(z);	# 9 IOprint_val (_14:void)<-(z:bat[:oid,:int])
end main;	# 10  
[ 2 ]
#-----------------#
# h	tmp_4	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
#-----------------#
# h	tmp_4	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
count 2
loopindex 0
B2 value 1
B3 value 1
result 2
loopindex 1
B2 value 2
B3 value 2
result 4
#-----------------#
# h	tmp_6	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  2	  ]
[ 1@0,	  4	  ]

# 08:01:12 >  
# 08:01:12 >  Done.
# 08:01:12 >  

