stdout of test 'tst273` in directory 'src/mal` itself:


# 08:45:19 >  
# 08:45:19 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=30797 --set monet_prompt= --trace --dbname=mTests_src_mal  tst273.mal < /dev/null
# 08:45:19 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
## the multiplex code blocks.
#
#t0:= alarm.usec();
#b:= bat.new(:oid,:lng);
#barrier (go,i):= language.newRange(0:lng);
#	k:= mmath.rand();
#	l:= calc.lng(k);
#	bat.insert(b,nil:oid,l);
#	redo (go,i):= language.nextElement(1:lng,10000:lng);
#exit (go,i);
#
#profiler.setFilter(b);
#profiler.startMonitor();
#io.printf("#monitor \n");
#mx:= aggr.max(b); 
#(clk,rdbytes,wrbytes):= profiler.getEvent();
#io.printf("# clk %d\n",clk);
#io.printf("# rdbytes %d\n",rdbytes);
#io.printf("# wrbytes %d\n",wrbytes);
#io.printf("#max %d\n",mx);
#algebra.select(b,nil:lng,mx); 
#(clk,rdbytes,wrbytes):= profiler.getEvent();
#io.printf("# clk %d\n",clk);
#io.printf("# rdbytes %d\n",rdbytes);
#io.printf("# wrbytes %d\n",wrbytes);
#algebra.select(b,mx,nil:lng); 
#(clk,rdbytes,wrbytes):= profiler.getEvent();
#io.printf("# clk %d\n",clk);
#io.printf("# rdbytes %d\n",rdbytes);
#io.printf("# wrbytes %d\n",wrbytes);
#d:= mmath.sin(0.2:dbl);
#(clk,rdbytes,wrbytes):= profiler.getEvent();
#io.printf("# clk %d\n",clk);
#io.printf("# rdbytes %d\n",rdbytes);
#io.printf("# wrbytes %d\n",wrbytes);
#profiler.stopMonitor();
#
function user.main():void;              #  0 main:void := user.main() {G}
# the multiplex code blocks. 
    t0 := alarm.usec();                 #  2 t0:lng := ALARMusec() 
    b := bat.new(:oid,:lng);            #  3 b:bat[:oid,:lng] := CMDBATnew(_4:oid, _5:lng) {G}
barrier (go,i) := language.newRange(0:lng);#  4 (go:bit, i:lng) := RNGnewRange_lng(_8:lng) {J9}
    k := mmath.rand();                  #  5 k:int := MATHrandint() 
    l := calc.lng(k);                   #  6 l:lng := CALCint2lng(k:int) 
    bat.insert(b,nil:oid,l);            #  7 _11:bat[:oid,:lng] := BKCinsert_bun(b:bat[:oid,:lng], _12:oid, l:lng) {G}
    redo (go,i) := language.nextElement(1:lng,10000:lng);#  8 (go:bit, i:lng) := RNGnextElement_lng(_13:lng, _14:lng) {J5}
exit (go,i);                            #  9 (go:bit, i:lng) 
    profiler.setFilter(b);              # 10 _15:void := CMDsetFilterVariable(b:bat[:oid,:lng]) 
    profiler.start();                   # 11 _16:void := CMDstartProfiler() 
    io.printf("#monitor \n");           # 12 _17:void := IOprint_str(_18:str) 
    mx := aggr.max(b);                  # 13 mx:lng := ALGmax_lng(b:bat[:oid,:lng]) 
    (clk,rdbytes,wrbytes) := profiler.getEvent();# 14 (clk:lng, rdbytes:lng, wrbytes:lng) := CMDgetEvent() 
    io.printf("# clk %d\n",clk);        # 15 _23:void := IOprint_formatted_lng(_24:str, clk:lng) 
    io.printf("# rdbytes %d\n",rdbytes);# 16 _25:void := IOprint_formatted_lng(_26:str, rdbytes:lng) 
    io.printf("# wrbytes %d\n",wrbytes);# 17 _27:void := IOprint_formatted_lng(_28:str, wrbytes:lng) 
    io.printf("#max %d\n",mx);          # 18 _29:void := IOprint_formatted_lng(_30:str, mx:lng) 
    algebra.select(b,nil:lng,mx);       # 19 _31:bat[:oid,:lng] := ALGselect(b:bat[:oid,:lng], _32:lng, mx:lng) {G}
    (clk,rdbytes,wrbytes) := profiler.getEvent();# 20 (clk:lng, rdbytes:lng, wrbytes:lng) := CMDgetEvent() 
    io.printf("# clk %d\n",clk);        # 21 _33:void := IOprint_formatted_lng(_24:str, clk:lng) 
    io.printf("# rdbytes %d\n",rdbytes);# 22 _34:void := IOprint_formatted_lng(_26:str, rdbytes:lng) 
    io.printf("# wrbytes %d\n",wrbytes);# 23 _35:void := IOprint_formatted_lng(_28:str, wrbytes:lng) 
    algebra.select(b,mx,nil:lng);       # 24 _36:bat[:oid,:lng] := ALGselect(b:bat[:oid,:lng], mx:lng, _32:lng) {G}
    (clk,rdbytes,wrbytes) := profiler.getEvent();# 25 (clk:lng, rdbytes:lng, wrbytes:lng) := CMDgetEvent() 
    io.printf("# clk %d\n",clk);        # 26 _37:void := IOprint_formatted_lng(_24:str, clk:lng) 
    io.printf("# rdbytes %d\n",rdbytes);# 27 _38:void := IOprint_formatted_lng(_26:str, rdbytes:lng) 
    io.printf("# wrbytes %d\n",wrbytes);# 28 _39:void := IOprint_formatted_lng(_28:str, wrbytes:lng) 
    d := mmath.sin(0.20000000298023224:dbl);# 29 d:dbl := MATHunary_SINdbl(_41:dbl) 
    (clk,rdbytes,wrbytes) := profiler.getEvent();# 30 (clk:lng, rdbytes:lng, wrbytes:lng) := CMDgetEvent() 
    io.printf("# clk %d\n",clk);        # 31 _42:void := IOprint_formatted_lng(_24:str, clk:lng) 
    io.printf("# rdbytes %d\n",rdbytes);# 32 _43:void := IOprint_formatted_lng(_26:str, rdbytes:lng) 
    io.printf("# wrbytes %d\n",wrbytes);# 33 _44:void := IOprint_formatted_lng(_28:str, wrbytes:lng) 
    profiler.stop();                    # 34 _45:void := CMDstopProfiler() 
end main;	# 35  
#monitor 
# clk 225
# rdbytes 0
# wrbytes 160000
#max 2147469841
# clk 2156
# rdbytes 160000
# wrbytes 160000
# clk 147
# rdbytes 16
# wrbytes 160000
# clk 0
# rdbytes 0
# wrbytes 0

# 08:45:20 >  
# 08:45:20 >  Done.
# 08:45:20 >  

