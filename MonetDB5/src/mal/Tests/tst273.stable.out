stdout of test 'tst273` in directory 'src/mal` itself:


# 08:45:19 >  
# 08:45:19 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=30797 --set monet_prompt= --trace --dbname=mTests_src_mal  tst273.mal < /dev/null
# 08:45:19 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
## the multiplex code blocks.
#
#t0:= alarm.usec();
#b:= bat.new(:oid,:lng);
#barrier (go,i):= language.newRange(0:lng);
#	k:= mmath.rand();
#	l:= calc.lng(k);
#	bat.insert(b,nil:oid,l);
#	redo (go,i):= language.nextElement(1:lng,10000:lng);
#exit (go,i);
#
#profiler.setFilter(b);
#profiler.startMonitor();
#io.printf("#monitor \n");
#mx:= aggr.max(b); 
#(clk,rdbytes,wrbytes):= profiler.getEvent();
#io.printf("# clk %d\n",clk);
#io.printf("# rdbytes %d\n",rdbytes);
#io.printf("# wrbytes %d\n",wrbytes);
#io.printf("#max %d\n",mx);
#algebra.select(b,nil:lng,mx); 
#(clk,rdbytes,wrbytes):= profiler.getEvent();
#io.printf("# clk %d\n",clk);
#io.printf("# rdbytes %d\n",rdbytes);
#io.printf("# wrbytes %d\n",wrbytes);
#algebra.select(b,mx,nil:lng); 
#(clk,rdbytes,wrbytes):= profiler.getEvent();
#io.printf("# clk %d\n",clk);
#io.printf("# rdbytes %d\n",rdbytes);
#io.printf("# wrbytes %d\n",wrbytes);
#d:= mmath.sin(0.2:dbl);
#(clk,rdbytes,wrbytes):= profiler.getEvent();
#io.printf("# clk %d\n",clk);
#io.printf("# rdbytes %d\n",rdbytes);
#io.printf("# wrbytes %d\n",wrbytes);
#profiler.stopMonitor();
#
function user.main():void;	# 0  (main:void)
# the multiplex code blocks. 	# 1  (_1:str)
    t0 := alarm.usec();	# 2 ALARMusec (t0:lng)
    b := bat.new(:oid,:lng);	# 3 CMDBATnew (b:bat[:oid,:lng])<-(_4:oid)(_5:lng)
barrier (go,i):= language.newRange(0:lng);	# 4 RNGnewRange_lng (go:bit)(i:lng)<-(_8:lng) jump 9
    k := mmath.rand();	# 5 MATHrandint (k:int)
    l := calc.lng(k);	# 6 CALCint2lng (l:lng)<-(k:int)
    bat.insert(b,nil:oid,l);	# 7 BKCinsert_bun (_11:void)<-(b:bat[:oid,:lng])(_12:oid)(l:lng)
    redo (go,i):= language.nextElement(1:lng,10000:lng);	# 8 RNGnextElement_lng (go:bit)(i:lng)<-(_13:lng)(_14:lng) jump 5
exit (go,i);	# 9  (go:bit)(i:lng)
    profiler.setFilter(b);	# 10 CMDsetFilterVariable (_15:void)<-(b:bat[:oid,:lng])
    profiler.startMonitor();	# 11 CMDstartMonitor (_16:void)
    io.printf("#monitor \n");	# 12 IOprint_str (_17:void)<-(_18:str)
    mx := aggr.max(b);	# 13 ALGmax_lng (mx:lng)<-(b:bat[:oid,:lng])
    (clk,rdbytes,wrbytes):= profiler.getEvent();	# 14 CMDgetEvent (clk:lng)(rdbytes:int)(wrbytes:int)
    io.printf("# clk %d\n",clk);	# 15 IOprint_formatted_lng (_23:void)<-(_24:str)(clk:lng)
    io.printf("# rdbytes %d\n",rdbytes);	# 16 IOprint_formatted_int (_25:void)<-(_26:str)(rdbytes:int)
    io.printf("# wrbytes %d\n",wrbytes);	# 17 IOprint_formatted_int (_27:void)<-(_28:str)(wrbytes:int)
    io.printf("#max %d\n",mx);	# 18 IOprint_formatted_lng (_29:void)<-(_30:str)(mx:lng)
    algebra.select(b,nil:lng,mx);	# 19 ALGselect (_31:bat[:oid,:lng])<-(b:bat[:oid,:lng])(_32:lng)(mx:lng)
    (clk,rdbytes,wrbytes):= profiler.getEvent();	# 20 CMDgetEvent (clk:lng)(rdbytes:int)(wrbytes:int)
    io.printf("# clk %d\n",clk);	# 21 IOprint_formatted_lng (_33:void)<-(_24:str)(clk:lng)
    io.printf("# rdbytes %d\n",rdbytes);	# 22 IOprint_formatted_int (_34:void)<-(_26:str)(rdbytes:int)
    io.printf("# wrbytes %d\n",wrbytes);	# 23 IOprint_formatted_int (_35:void)<-(_28:str)(wrbytes:int)
    algebra.select(b,mx,nil:lng);	# 24 ALGselect (_36:bat[:oid,:lng])<-(b:bat[:oid,:lng])(mx:lng)(_32:lng)
    (clk,rdbytes,wrbytes):= profiler.getEvent();	# 25 CMDgetEvent (clk:lng)(rdbytes:int)(wrbytes:int)
    io.printf("# clk %d\n",clk);	# 26 IOprint_formatted_lng (_37:void)<-(_24:str)(clk:lng)
    io.printf("# rdbytes %d\n",rdbytes);	# 27 IOprint_formatted_int (_38:void)<-(_26:str)(rdbytes:int)
    io.printf("# wrbytes %d\n",wrbytes);	# 28 IOprint_formatted_int (_39:void)<-(_28:str)(wrbytes:int)
    d := mmath.sin(0.20000000298023224:dbl);	# 29 MATHunary_SINdbl (d:dbl)<-(_41:dbl)
    (clk,rdbytes,wrbytes):= profiler.getEvent();	# 30 CMDgetEvent (clk:lng)(rdbytes:int)(wrbytes:int)
    io.printf("# clk %d\n",clk);	# 31 IOprint_formatted_lng (_42:void)<-(_24:str)(clk:lng)
    io.printf("# rdbytes %d\n",rdbytes);	# 32 IOprint_formatted_int (_43:void)<-(_26:str)(rdbytes:int)
    io.printf("# wrbytes %d\n",wrbytes);	# 33 IOprint_formatted_int (_44:void)<-(_28:str)(wrbytes:int)
    profiler.stopMonitor();	# 34 CMDstopMonitor (_45:void)
end main;	# 35  
#monitor 
# clk 225
# rdbytes 0
# wrbytes 160000
#max 2147469841
# clk 2156
# rdbytes 160000
# wrbytes 160000
# clk 147
# rdbytes 16
# wrbytes 160000
# clk 0
# rdbytes 0
# wrbytes 0

# 08:45:20 >  
# 08:45:20 >  Done.
# 08:45:20 >  

