stdout of test 'tst077` in directory 'src/mal` itself:


# 07:58:51 >  
# 07:58:51 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst077.mal </dev/null
# 07:58:51 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## parsing operations with multi-assignments
#function swap(x:bat[:any$1,:int],y:bat[:int,:int]) 
#        a:="done"; 
#        return (a,x);
#
#end swap;
function user.swap(x:bat[:any_1,:int],y:bat[:int,:int]) (a:str,b:bat[:any_1,:int]);#  0 (a:str, b:bat[:any_1,:int]) := user.swap(x:bat[:any_1,:int], y:bat[:int,:int]) {PG}
    a := "done";                        #  1 a:str := _5:str {G}
    return (a,b) := (a,x);              #  2 (a:str, b:bat[:any_1,:int]) := a:str, x:bat[:any_1,:int] {G}
end swap;	# 3  
#
#X:= new(:int,:int);
#insert(X,1,1);
#Y:= new(:int,:int);
#insert(Y,2,2);
#(x,y):= swap(X,Y);
#print(x);
#print(y);
#
#
function user.main():void;              #  0 main:void := user.main() {G}
# parsing operations with multi-assignments 
    X := bat.new(:int,:int);            #  2 X:bat[:int,:int] := CMDBATnew(_3:int, _3:int) {G}
    bat.insert(X,1,1);                  #  3 _4:bat[:int,:int] := BKCinsert_bun(X:bat[:int,:int], _5:int, _5:int) {G}
    Y := bat.new(:int,:int);            #  4 Y:bat[:int,:int] := CMDBATnew(_3:int, _3:int) {G}
    bat.insert(Y,2,2);                  #  5 _7:bat[:int,:int] := BKCinsert_bun(Y:bat[:int,:int], _8:int, _8:int) {G}
    (x,y) := user.swap(X,Y);            #  6 (x:str, y:bat[:int,:int]) := user.swap(X:bat[:int,:int], Y:bat[:int,:int]) {G}
    io.print(x);                        #  7 _11:void := IOprint_val(x:str) 
    io.print(y);                        #  8 _12:void := IOprint_val(y:bat[:int,:int]) 
end main;	# 9  
[ "done" ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]

# 07:58:51 >  
# 07:58:51 >  Done.
# 07:58:51 >  

