stdout of test 'tst610` in directory 'src/mal` itself:


# 08:01:26 >  
# 08:01:26 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst610.mal </dev/null
# 08:01:26 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
##this test is used to monitor reference count setting
##create a persistent bat and destroy it in the next session
#function refs():void;
#    g:=bbp.getNames();
#    gr:=bbp.getRefCount();
#    gl:=bbp.getLRefCount();
#    print(g,gr,gl);
#end refs;
function user.refs():void;	# 0  (refs:void)
    g := bbp.getNames();	# 1 CMDbbpNames (g:bat[:int,:str])
    gr := bbp.getRefCount();	# 2 CMDbbpRefCount (gr:bat[:int,:int])
    gl := bbp.getLRefCount();	# 3 CMDbbpLRefCount (gl:bat[:int,:int])
    io.print(g,gr,gl);	# 4 IOtable (_4:void)<-(g:bat[:int,:str])(gr:bat[:int,:int])(gl:bat[:int,:int])
end refs;	# 5  
#
#b:= new(:int,:int);
##refs();
#insert(b,23,32);
##refs();
#setName(b,"tasks");
##refs();
#setPersistent(b);
##refs();
## it is committed 
#print("open box");
#bbp.open();
#refs();
#t:= bbp.bind("tasks");
#print(t);
#bbp.release(t);
#refs();
#print(t);
#catch MALException;
#print("BAT was released");
#exit MALException;
## the bat is still visible, because the destroy only
## marks it for deletion at the end of session or
## when the reference counters drop to zero
#t:= bind("tasks");
#refs();
## to really remove, we get rid of the current
## references as well
#bbp.destroy(t,true);
#refs();
#print(t);
#catch MALException;
#print("BAT was destroyed");
#exit MALException;
#z:=bind("tasks");
#print(z);
##it is not in the box anymore either
#catch MALException;
#print("BAT was removed from the box");
#exit MALException;
#
function user.main():void;	# 0  (main:void)
#this test is used to monitor reference count setting 	# 1  (_1:str)
#create a persistent bat and destroy it in test 612 	# 2  (_2:str)
    b := bat.new(:int,:int);	# 3 CMDBATnew (b:bat[:int,:int])<-(_4:int)(_4:int)
#refs(); 	# 4  (_5:str)
    bat.insert(b,23,32);	# 5 BKCinsert_bun (_6:void)<-(b:bat[:int,:int])(_7:int)(_8:int)
#refs(); 	# 6  (_5:str)
    bat.setName(b,"tasks");	# 7 BKCsetName (_9:void)<-(b:bat[:int,:int])(_10:str)
#refs(); 	# 8  (_5:str)
    bat.setPersistent(b,true);	# 9 BKCpersists (_11:void)<-(b:bat[:int,:int])(_12:bit)
#refs(); 	# 10  (_5:str)
# it is committed  	# 11  (_13:str)
    io.print("open box");	# 12 IOprint_val (_14:void)<-(_15:str)
    bbp.open();	# 13 CMDbbpopen (_16:void)
    user.refs();	# 14  (_17:void)
    t:bat[:any,:any]  := bbp.bind("tasks");	# 15 CMDbbpbind (t:bat[:any,:any])<-(_10:str)
    io.print(t);	# 16 IOprint_val (_19:void)<-(t:bat[:any,:any])
    bbp.release(t);	# 17 CMDbbpreleaseBAT (_20:void)<-(t:bat[:any,:any])
    user.refs();	# 18  (_21:void)
    io.print(t);	# 19 IOprint_val (_22:void)<-(t:bat[:any,:any])
catch MALException:str ;	# 20  (MALException:str) jump 22
    io.print("BAT was released");	# 21 IOprint_val (_24:void)<-(_25:str)
exit MALException:str ;	# 22  (MALException:str)
# the bat is still visible, because the destroy only 	# 23  (_26:str)
# marks it for deletion at the end of session or 	# 24  (_27:str)
# when the reference counters drop to zero 	# 25  (_28:str)
    t:bat[:any,:any]  := bbp.bind("tasks");	# 26 CMDbbpbind (t:bat[:any,:any])<-(_10:str)
    user.refs();	# 27  (_29:void)
# to really remove, we get rid of the current 	# 28  (_30:str)
# references as well 	# 29  (_31:str)
    bbp.destroy(t,true);	# 30 CMDbbpdestroyBAT (_32:void)<-(t:bat[:any,:any])(_12:bit)
    user.refs();	# 31  (_33:void)
    io.print(t);	# 32 IOprint_val (_34:void)<-(t:bat[:any,:any])
catch MALException:str ;	# 33  (MALException:str) jump 35
    io.print("BAT was destroyed");	# 34 IOprint_val (_35:void)<-(_36:str)
exit MALException:str ;	# 35  (MALException:str)
    z:bat[:any,:any]  := bbp.bind("tasks");	# 36 CMDbbpbind (z:bat[:any,:any])<-(_10:str)
    io.print(z);	# 37 IOprint_val (_38:void)<-(z:bat[:any,:any])
#it is not in the box anymore either 	# 38  (_39:str)
catch MALException:str ;	# 39  (MALException:str) jump 41
    io.print("BAT was removed from the box");	# 40 IOprint_val (_40:void)<-(_41:str)
exit MALException:str ;	# 41  (MALException:str)
end main;	# 42  
[ "open box" ]
#---------------------------------------------------------#
# bbp	name			refcnt	lrefcnt		  # name
# int	str			int	int		  # type
#---------------------------------------------------------#
[ 4,	  "M5system_auth_user",	  1,	  1		  ]
[ 5,	  "M5system_auth_passwd", 1,	  1		  ]
[ 6,	  "M5system_auth_scen",	  1,	  1		  ]
[ 7,	  "monet_environment",	  1,	  0		  ]
[ 8,	  "monet_unicode_case",	  1,	  0		  ]
[ 9,	  "timezones",		  1,	  0		  ]
[ 10,	  "tasks",		  0,	  2		  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 23,	  32	  ]
#---------------------------------------------------------#
# bbp	name			refcnt	lrefcnt		  # name
# int	str			int	int		  # type
#---------------------------------------------------------#
[ 4,	  "M5system_auth_user",	  1,	  1		  ]
[ 5,	  "M5system_auth_passwd", 1,	  1		  ]
[ 6,	  "M5system_auth_scen",	  1,	  1		  ]
[ 7,	  "monet_environment",	  1,	  0		  ]
[ 8,	  "monet_unicode_case",	  1,	  0		  ]
[ 9,	  "timezones",		  1,	  0		  ]
[ nil ]
[ "BAT was destroyed" ]
[ "BAT was removed from the box" ]

# 08:01:26 >  
# 08:01:26 >  Done.
# 08:01:26 >  

