stdout of test 'tst610` in directory 'src/mal` itself:


# 08:01:26 >  
# 08:01:26 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst610.mal </dev/null
# 08:01:26 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
##this test is used to monitor reference count setting
##create a persistent bat and destroy it in the next session
#function refs():void;
#    g:=bbp.getNames();
#    gr:=bbp.getRefCount();
#    gl:=bbp.getLRefCount();
#    print(g,gr,gl);
#end refs;
function user.refs():void;	# 0  (refs:void)
    g := bbp.getNames();	# 1 CMDbbpNames (g:bat[:int,:str])
    gr := bbp.getRefCount();	# 2 CMDbbpRefCount (gr:bat[:int,:int])
    gl := bbp.getLRefCount();	# 3 CMDbbpLRefCount (gl:bat[:int,:int])
    io.print(g,gr,gl);	# 4 IOtable (_4:int)<-(g:bat[:int,:str])(gr:bat[:int,:int])(gl:bat[:int,:int])
end refs;	# 5  
#
#b:= new(:int,:int);
##refs();
#insert(b,23,32);
##refs();
#setName(b,"tasks");
##refs();
#setPersistent(b);
##refs();
## it is committed 
#print("open box");
#bbp.open();
#refs();
#t:= bbp.bind("tasks");
#print(t);
#bbp.release(t);
#refs();
#print(t);
#catch MALexception;
#print("BAT was released");
#exit MALexception;
## the bat is still visible, because the destroy only
## marks it for deletion at the end of session or
## when the reference counters drop to zero
#t:= bind("tasks");
#refs();
## to really remove, we get rid of the current
## references as well
#bbp.destroy(t,true);
#refs();
#print(t);
#catch MALexception;
#print("BAT was destroyed");
#exit MALexception;
#z:=bind("tasks");
#print(z);
##it is not in the box anymore either
#catch MALexception;
#print("BAT was removed from the box");
#exit MALexception;
#
!ERROR: t:bat[:any$1,:any$2]:= bbp.bind("tasks");
!                 ^',' expected
!ERROR: io.print(t);
!      ^';' expected
!ERROR: t:bat[:any$1,:any$2]:= bbp.bind("tasks");
!                 ^',' expected
!ERROR: user.refs();
!      ^';' expected
!ERROR: z:bat[:any$1,:any$2]:= bbp.bind("tasks");
!                 ^',' expected
!ERROR: io.print(z);
!      ^';' expected
function user.main():int;	# 0  unknown (main:int)
#this test is used to monitor reference count setting 	# 1  unknown (_2:str)
#create a persistent bat and destroy it in the next session 	# 2  unknown (_4:str)
    b := bbp.new(:int,:int);	# 3  unknown (b:any)<-(_6:int)(_6:int)
#refs(); 	# 4  unknown (_8:str)
    bat.insert(b,23,32);	# 5  unknown (_9:any)<-(b:any)(_10:int)(_11:int)
#refs(); 	# 6  unknown (_8:str)
    bat.setName(b,"tasks");	# 7  unknown (_13:any)<-(b:any)(_14:str)
#refs(); 	# 8  unknown (_8:str)
    bat.setPersistent(b);	# 9  unknown (_16:any)<-(b:any)
#refs(); 	# 10  unknown (_8:str)
# it is committed  	# 11  unknown (_19:str)
    io.print("open box");	# 12  unknown (_20:any)<-(_21:str)
    bbp.open();	# 13  unknown (_22:any)
    user.refs();	# 14  unknown (_23:any)
    t;	# 15  unknown (t:any)
    user.refs();	# 16  unknown (_25:any)
    io.print(t);	# 17  unknown (_26:any)<-(t:any)
catch MALexception;	# 18  unknown (MALexception:any)
    io.print("BAT was released");	# 19  unknown (_28:any)<-(_29:str)
exit MALexception;	# 20  unknown (MALexception:any)
# the bat is still visible, because the destroy only 	# 21  unknown (_31:str)
# marks it for deletion at the end of session or 	# 22  unknown (_33:str)
# when the reference counters drop to zero 	# 23  unknown (_35:str)
    t;	# 24  unknown (t:any)
    user.refs();	# 25  unknown (_36:any)
    io.print(t);	# 26  unknown (_37:any)<-(t:any)
catch MALexception;	# 27  unknown (MALexception:any)
    io.print("BAT was destroyed");	# 28  unknown (_38:any)<-(_39:str)
exit MALexception;	# 29  unknown (MALexception:any)
    z;	# 30  unknown (z:any)
    io.print("BAT was removed from the box");	# 31  unknown (_41:any)<-(_42:str)
exit MALexception;	# 32  unknown (MALexception:any)
end main;	# 33  unknown 

# 08:01:26 >  
# 08:01:26 >  Done.
# 08:01:26 >  

