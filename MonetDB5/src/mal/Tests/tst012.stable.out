stdout of test 'tst012` in directory 'src/mal` itself:


# 07:58:36 >  
# 07:58:36 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst012.mal </dev/null
# 07:58:36 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## simple loop with controlled redo
#
#	i:=0;
#barrier j:=i<3;
#	print(i);
#	i:=i+1;
#	redo j:= i<3;
#exit	j;
#	print("first loop done");
#	i:=0;
#barrier j:=i<3;
#	print(i);
#	i:=i+1;
#	redo j:= i<3;
#exit	j;
#	print("second loop done");
#
function user.main():void;              #  0 main:void 
# simple loop with controlled redo 
    i := 0;                             #  2 i:int := _3:int 
barrier j := calc.<(i,3);               #  3 j:bit := CALCcompLTintint(i:int, _5:int) {J7}
    io.print(i);                        #  4 _6:void := IOprint_val(i:int) 
    i := calc.+(i,1);                   #  5 i:int := CALCbinaryADDintint(i:int, _7:int) 
    redo j := calc.<(i,3);              #  6 j:bit := CALCcompLTintint(i:int, _5:int) {J4}
exit j;                                 #  7 j:bit 
    io.print("first loop done");        #  8 _8:void := IOprint_val(_9:str) 
    i := 0;                             #  9 i:int := _3:int 
barrier j := calc.<(i,3);               # 10 j:bit := CALCcompLTintint(i:int, _5:int) {J14}
    io.print(i);                        # 11 _10:void := IOprint_val(i:int) 
    i := calc.+(i,1);                   # 12 i:int := CALCbinaryADDintint(i:int, _7:int) 
    redo j := calc.<(i,3);              # 13 j:bit := CALCcompLTintint(i:int, _5:int) {J11}
exit j;                                 # 14 j:bit 
    io.print("second loop done");       # 15 _11:void := IOprint_val(_12:str) 
end main;	# 16  
[ 0 ]
[ 1 ]
[ 2 ]
[ "first loop done" ]
[ 0 ]
[ 1 ]
[ 2 ]
[ "second loop done" ]

# 07:58:36 >  
# 07:58:36 >  Done.
# 07:58:36 >  

