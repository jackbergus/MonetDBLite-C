stdout of test 'tst042` in directory 'src/mal` itself:


# 07:58:44 >  
# 07:58:44 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst042.mal </dev/null
# 07:58:44 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
#s := "hello";
#i := 1;
#f := 3.14;
#c := 'a';
#b:= true;
#bb:= new(:void,:str);
#
#st:= getType(s); printf("string %d\n",st);
#it:= getType(i); printf("int %d\n",it);
#ft:= getType(f); printf("flt %d\n",ft);
#ct:= getType(c); printf("chr %d\n",ct);
#bt:= getType(b); printf("bit %d\n",bt);
#bbt:= getType(bb); printf("bat %d\n",bbt);
#
## get them as strings
#v:= "";
#v:= getTypeName(st); printf("string %s\n",v);
#v:= getTypeName(it); printf("int %s\n",v);
#v:= getTypeName(ft); printf("flt %s\n",v);
#v:= getTypeName(ct); printf("chr %s\n",v);
#v:= getTypeName(bt); printf("bit %s\n",v);
#v:= getTypeName(bbt); printf("bat %s\n",v);
#
#
function user.main():void;              #  0 main:void := user.main() {G}
    s := "hello";                       #  1 s:str := _2:str {G}
    i := 1;                             #  2 i:int := _4:int 
    f := 3.1400001;                     #  3 f:flt := _6:flt 
    c := 'a';                           #  4 c:chr := _8:chr 
    b := true;                          #  5 b:bit := _10:bit 
    w := 1:wrd;                         #  6 w:wrd := _12:wrd 
    B := 2:bte;                         #  7 B:bte := _14:bte 
    bb := bat.new(:oid,:str);           #  8 bb:bat[:oid,:str] := CMDBATnew(_16:oid, _17:str) {G}
    st := inspect.getType(s);           #  9 st:str := INSPECTtypeName(s:str) {G}
    io.printf("%s\n",st);               # 10 _19:void := IOprint_formatted_str(_20:str, st:str) 
    it := inspect.getType(i);           # 11 it:str := INSPECTtypeName(i:int) {G}
    io.printf("%s\n",it);               # 12 _22:void := IOprint_formatted_str(_20:str, it:str) 
    ft := inspect.getType(f);           # 13 ft:str := INSPECTtypeName(f:flt) {G}
    io.printf("%s\n",ft);               # 14 _24:void := IOprint_formatted_str(_20:str, ft:str) 
    ct := inspect.getType(c);           # 15 ct:str := INSPECTtypeName(c:chr) {G}
    io.printf("%s\n",ct);               # 16 _26:void := IOprint_formatted_str(_20:str, ct:str) 
    bt := inspect.getType(b);           # 17 bt:str := INSPECTtypeName(b:bit) {G}
    io.printf("%s\n",bt);               # 18 _28:void := IOprint_formatted_str(_20:str, bt:str) 
    wt := inspect.getType(w);           # 19 wt:str := INSPECTtypeName(w:wrd) {G}
    io.printf("%s\n",wt);               # 20 _30:void := IOprint_formatted_str(_20:str, wt:str) 
    Bt := inspect.getType(B);           # 21 Bt:str := INSPECTtypeName(B:bte) {G}
    io.printf("%s\n",Bt);               # 22 _32:void := IOprint_formatted_str(_20:str, Bt:str) 
    (ht,tt):= inspect.getType(bb);      # 23 (ht:str, tt:str) := INSPECTtypeName(bb:bat[:oid,:str]) {G}
    io.printf("bat  head %s\n",ht);     # 24 _35:void := IOprint_formatted_str(_36:str, ht:str) 
    io.printf("bat  head %s\n",tt);     # 25 _37:void := IOprint_formatted_str(_36:str, tt:str) 
end main;	# 26  
str
int
flt
chr
bit
wrd
bte
bat  head oid
bat  head str

# 07:58:44 >  
# 07:58:44 >  Done.
# 07:58:44 >  

