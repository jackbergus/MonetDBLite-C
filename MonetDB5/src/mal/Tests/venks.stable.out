stdout of test 'venks` in directory 'src/mal` itself:


# 20:15:09 >  
# 20:15:09 >  Mtimeout -timeout 60  mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//dbfarm" --set "sql_logdir=/ufs/mk/monet5//dblogs/logs/sql" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_open=true --set mapi_port=36566 --set xrpc_port=41437 --set monet_prompt= --trace --dbname=mTests_src_mal  venks.mal
# 20:15:09 >  

# MonetDB Server v5.1.0
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
## test an expensive kintersect
## it illustrates weakness of the kintersect routine.
#
#t0:= alarm.usec();
#large:= bat.new(:oid,:sht);
#barrier (go,i):= language.newRange(0:lng);
#	k:= mmath.rand();
#	l:= calc.sht(k);
#	bat.append(large,l);
#	redo (go,i):= language.nextElement(1:lng,1000000:lng);
#exit (go,i);
#
#small:= bat.new(:oid,:sht);
##m:= aggr.min(b);
#m:= mmath.rand();
#l:= calc.sht(m);
#bat.insert(small,1@0,l);
##m:= aggr.max(b);
#m:= mmath.rand();
#l:= calc.sht(m);
#bat.insert(small,4@0,l);
##disturb order
#m:= mmath.rand();
#l:= calc.sht(m);
#bat.insert(small,3@0,l);
#
#largeR:= bat.reverse(large);
#smallR:= bat.reverse(small);
#
#t0:= alarm.usec();
#sj:= algebra.kintersect(largeR,smallR);
#t1:= alarm.usec();
#d0:= t1-t0;
#io.printf("#kintersect(largeRev,smallRev) %d\n",d0);
#v:= aggr.count(sj);
#io.printf("#count %d\n",v);
##io.print(sj);
#
#t0:= alarm.usec();
#j:= algebra.join(large,smallR);
#t1:= alarm.usec();
#d0:= t1-t0;
#io.printf("#join(large,smallRev) %d\n",d0);
#v:= aggr.count(j);
#io.printf("#count %d\n",v);
##io.print(j);
#
#t0:= alarm.usec();
#sj2:= algebra.kintersect(smallR,largeR);
#t1:= alarm.usec();
#d0:= t1-t0;
#io.printf("#kintersect(smallRev,largeRev) %d\n",d0);
#v:= aggr.count(sj2);
#io.printf("#count %d\n",v);
##io.print(sj2);
#
#t0:= alarm.usec();
#j:= algebra.join(small,smallR);
#t1:= alarm.usec();
#d0:= t1-t0;
#io.printf("#join(small,largeRev) %d\n",d0);
#v:= aggr.count(j);
#io.printf("#count %d\n",v);
##io.print(j);
#
function user.main():void;	# 0  (main:void)
# test an expensive kintersect 	# 1  (_1:str)
# it illustrates weakness of the kintersect routine. 	# 2  (_2:str)
    t0 := alarm.usec();	# 3 ALARMusec (t0:lng)
    l := 0:sht;	# 4  (l:sht)<-(_5:sht)
    large := bat.new(:oid,:sht);	# 5 CMDBATnew (large:bat[:oid,:sht])<-(_7:oid)(_8:sht)
barrier (go,i):= language.newRange(0:lng);	# 6 RNGnewRange_lng (go:bit)(i:lng)<-(_11:lng) jump 11
    k := mmath.rand();	# 7 MATHrandint (k:int)
    l := calc.sht(k);	# 8 CALCint2sht (l:sht)<-(k:int)
    bat.append(large,l);	# 9 BKCappend_val_wrap (_13:void)<-(large:bat[:oid,:sht])(l:sht)
    redo (go,i):= language.nextElement(1:lng,1000000:lng);	# 10 RNGnextElement_lng (go:bit)(i:lng)<-(_14:lng)(_15:lng) jump 7
exit (go,i);	# 11  (go:bit)(i:lng)
    small := bat.new(:oid,:sht);	# 12 CMDBATnew (small:bat[:oid,:sht])<-(_7:oid)(_17:sht)
#m:= aggr.min(b); 	# 13  (_18:str)
    m := mmath.rand();	# 14 MATHrandint (m:int)
    l := calc.sht(m);	# 15 CALCint2sht (l:sht)<-(m:int)
    bat.insert(small,1@0,l);	# 16 BKCinsert_bun (_20:void)<-(small:bat[:oid,:sht])(_21:oid)(l:sht)
#m:= aggr.max(b); 	# 17  (_22:str)
    m := mmath.rand();	# 18 MATHrandint (m:int)
    l := calc.sht(m);	# 19 CALCint2sht (l:sht)<-(m:int)
    bat.insert(small,4@0,l);	# 20 BKCinsert_bun (_23:void)<-(small:bat[:oid,:sht])(_24:oid)(l:sht)
#disturb order 	# 21  (_25:str)
    m := mmath.rand();	# 22 MATHrandint (m:int)
    l := calc.sht(m);	# 23 CALCint2sht (l:sht)<-(m:int)
    bat.insert(small,3@0,l);	# 24 BKCinsert_bun (_26:void)<-(small:bat[:oid,:sht])(_27:oid)(l:sht)
    largeR := bat.reverse(large);	# 25 BKCreverse (largeR:bat[:sht,:oid])<-(large:bat[:oid,:sht])
    smallR := bat.reverse(small);	# 26 BKCreverse (smallR:bat[:sht,:oid])<-(small:bat[:oid,:sht])
    t0 := alarm.usec();	# 27 ALARMusec (t0:lng)
    sj := algebra.kintersect(largeR,smallR);	# 28 ALGsemijoin (sj:bat[:sht,:oid])<-(largeR:bat[:sht,:oid])(smallR:bat[:sht,:oid])
    t1 := alarm.usec();	# 29 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 30 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#kintersect(largeRev,smallRev) %d\n",d0);	# 31 IOprint_formatted_lng (_33:void)<-(_34:str)(d0:lng)
    v := aggr.count(sj);	# 32 ALGcount_bat (v:int)<-(sj:bat[:sht,:oid])
    io.printf("#count %d\n",v);	# 33 IOprint_formatted_int (_36:void)<-(_37:str)(v:int)
#io.print(sj); 	# 34  (_38:str)
    t0 := alarm.usec();	# 35 ALARMusec (t0:lng)
    j := algebra.join(large,smallR);	# 36 ALGjoin (j:bat[:oid,:oid])<-(large:bat[:oid,:sht])(smallR:bat[:sht,:oid])
    t1 := alarm.usec();	# 37 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 38 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#join(large,smallRev) %d\n",d0);	# 39 IOprint_formatted_lng (_40:void)<-(_41:str)(d0:lng)
    v := aggr.count(j);	# 40 ALGcount_bat (v:int)<-(j:bat[:oid,:oid])
    io.printf("#count %d\n",v);	# 41 IOprint_formatted_int (_42:void)<-(_37:str)(v:int)
#io.print(j); 	# 42  (_43:str)
    t0 := alarm.usec();	# 43 ALARMusec (t0:lng)
    sj2 := algebra.kintersect(smallR,largeR);	# 44 ALGsemijoin (sj2:bat[:sht,:oid])<-(smallR:bat[:sht,:oid])(largeR:bat[:sht,:oid])
    t1 := alarm.usec();	# 45 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 46 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#kintersect(smallRev,largeRev) %d\n",d0);	# 47 IOprint_formatted_lng (_45:void)<-(_46:str)(d0:lng)
    v := aggr.count(sj2);	# 48 ALGcount_bat (v:int)<-(sj2:bat[:sht,:oid])
    io.printf("#count %d\n",v);	# 49 IOprint_formatted_int (_47:void)<-(_37:str)(v:int)
#io.print(sj2); 	# 50  (_48:str)
    t0 := alarm.usec();	# 51 ALARMusec (t0:lng)
    j := algebra.join(small,smallR);	# 52 ALGjoin (j:bat[:oid,:oid])<-(small:bat[:oid,:sht])(smallR:bat[:sht,:oid])
    t1 := alarm.usec();	# 53 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 54 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#join(small,largeRev) %d\n",d0);	# 55 IOprint_formatted_lng (_49:void)<-(_50:str)(d0:lng)
    v := aggr.count(j);	# 56 ALGcount_bat (v:int)<-(j:bat[:oid,:oid])
    io.printf("#count %d\n",v);	# 57 IOprint_formatted_int (_51:void)<-(_37:str)(v:int)
#io.print(j); 	# 58  (_52:str)
end main;	# 59  
#kintersect(largeRev,smallRev) 16600
#count 41
#join(large,smallRev) 34077
#count 41
#kintersect(smallRev,largeRev) 32
#count 3
#join(small,largeRev) 33
#count 3

# 20:15:10 >  
# 20:15:10 >  Done.
# 20:15:10 >  

