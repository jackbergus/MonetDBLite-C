stdout of test 'venks` in directory 'src/mal` itself:


# 20:15:09 >  
# 20:15:09 >  Mtimeout -timeout 60  mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//dbfarm" --set "sql_logdir=/ufs/mk/monet5//dblogs/logs/sql" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_open=true --set mapi_port=36566 --set xrpc_port=41437 --set monet_prompt= --trace --dbname=mTests_src_mal  venks.mal
# 20:15:09 >  

# MonetDB Server v5.1.0
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
## test an expensive kintersect
## it illustrates weakness of the kintersect routine.
#
#t0:= alarm.usec();
#large:= bat.new(:oid,:sht);
#barrier (go,i):= language.newRange(0:lng);
#	k:= mmath.rand();
#	l:= calc.sht(k);
#	bat.append(large,l);
#	redo (go,i):= language.nextElement(1:lng,1000000:lng);
#exit (go,i);
#
#small:= bat.new(:oid,:sht);
##m:= aggr.min(b);
#m:= mmath.rand();
#l:= calc.sht(m);
#bat.insert(small,1@0,l);
##m:= aggr.max(b);
#m:= mmath.rand();
#l:= calc.sht(m);
#bat.insert(small,4@0,l);
##disturb order
#m:= mmath.rand();
#l:= calc.sht(m);
#bat.insert(small,3@0,l);
#
#largeR:= bat.reverse(large);
#smallR:= bat.reverse(small);
#
#t0:= alarm.usec();
#sj:= algebra.kintersect(largeR,smallR);
#t1:= alarm.usec();
#d0:= t1-t0;
#io.printf("#kintersect(largeRev,smallRev) %d\n",d0);
#v:= aggr.count(sj);
#io.printf("#count %d\n",v);
##io.print(sj);
#
#t0:= alarm.usec();
#j:= algebra.join(large,smallR);
#t1:= alarm.usec();
#d0:= t1-t0;
#io.printf("#join(large,smallRev) %d\n",d0);
#v:= aggr.count(j);
#io.printf("#count %d\n",v);
##io.print(j);
#
#t0:= alarm.usec();
#sj2:= algebra.kintersect(smallR,largeR);
#t1:= alarm.usec();
#d0:= t1-t0;
#io.printf("#kintersect(smallRev,largeRev) %d\n",d0);
#v:= aggr.count(sj2);
#io.printf("#count %d\n",v);
##io.print(sj2);
#
#t0:= alarm.usec();
#j:= algebra.join(small,smallR);
#t1:= alarm.usec();
#d0:= t1-t0;
#io.printf("#join(small,largeRev) %d\n",d0);
#v:= aggr.count(j);
#io.printf("#count %d\n",v);
##io.print(j);
#
function user.main():void;	# 0  (main:void)
# test an expensive kintersect 	# 1  (_1:str)
# it illustrates weakness of the kintersect routine. 	# 2  (_2:str)
    t0 := alarm.usec();	# 3 ALARMusec (t0:lng)
    large := bat.new(:oid,:sht);	# 4 CMDBATnew (large:bat[:oid,:sht])<-(_5:oid)(_6:sht)
barrier (go,i):= language.newRange(0:lng);	# 5 RNGnewRange_lng (go:bit)(i:lng)<-(_9:lng) jump 10
    k := mmath.rand();	# 6 MATHrandint (k:int)
    l := calc.sht(k);	# 7 CALCint2sht (l:sht)<-(k:int)
    bat.append(large,l);	# 8 BKCappend_val_wrap (_12:void)<-(large:bat[:oid,:sht])(l:sht)
    redo (go,i):= language.nextElement(1:lng,1000000:lng);	# 9 RNGnextElement_lng (go:bit)(i:lng)<-(_13:lng)(_14:lng) jump 6
exit (go,i);	# 10  (go:bit)(i:lng)
    small := bat.new(:oid,:sht);	# 11 CMDBATnew (small:bat[:oid,:sht])<-(_5:oid)(_6:sht)
#m:= aggr.min(b); 	# 12  (_16:str)
    m := mmath.rand();	# 13 MATHrandint (m:int)
    l := calc.sht(m);	# 14 CALCint2sht (l:sht)<-(m:int)
    bat.insert(small,1@0,l);	# 15 BKCinsert_bun (_18:void)<-(small:bat[:oid,:sht])(_19:oid)(l:sht)
#m:= aggr.max(b); 	# 16  (_20:str)
    m := mmath.rand();	# 17 MATHrandint (m:int)
    l := calc.sht(m);	# 18 CALCint2sht (l:sht)<-(m:int)
    bat.insert(small,4@0,l);	# 19 BKCinsert_bun (_21:void)<-(small:bat[:oid,:sht])(_22:oid)(l:sht)
#disturb order 	# 20  (_23:str)
    m := mmath.rand();	# 21 MATHrandint (m:int)
    l := calc.sht(m);	# 22 CALCint2sht (l:sht)<-(m:int)
    bat.insert(small,3@0,l);	# 23 BKCinsert_bun (_24:void)<-(small:bat[:oid,:sht])(_25:oid)(l:sht)
    largeR := bat.reverse(large);	# 24 BKCreverse (largeR:bat[:sht,:oid])<-(large:bat[:oid,:sht])
    smallR := bat.reverse(small);	# 25 BKCreverse (smallR:bat[:sht,:oid])<-(small:bat[:oid,:sht])
    t0 := alarm.usec();	# 26 ALARMusec (t0:lng)
    sj := algebra.kintersect(largeR,smallR);	# 27 ALGsemijoin (sj:bat[:sht,:oid])<-(largeR:bat[:sht,:oid])(smallR:bat[:sht,:oid])
    t1 := alarm.usec();	# 28 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 29 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#kintersect(largeRev,smallRev) %d\n",d0);	# 30 IOprint_formatted_lng (_31:void)<-(_32:str)(d0:lng)
    v := aggr.count(sj);	# 31 ALGcount_bat (v:int)<-(sj:bat[:sht,:oid])
    io.printf("#count %d\n",v);	# 32 IOprint_formatted_int (_34:void)<-(_35:str)(v:int)
#io.print(sj); 	# 33  (_36:str)
    t0 := alarm.usec();	# 34 ALARMusec (t0:lng)
    j := algebra.join(large,smallR);	# 35 ALGjoin (j:bat[:oid,:oid])<-(large:bat[:oid,:sht])(smallR:bat[:sht,:oid])
    t1 := alarm.usec();	# 36 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 37 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#join(large,smallRev) %d\n",d0);	# 38 IOprint_formatted_lng (_38:void)<-(_39:str)(d0:lng)
    v := aggr.count(j);	# 39 ALGcount_bat (v:int)<-(j:bat[:oid,:oid])
    io.printf("#count %d\n",v);	# 40 IOprint_formatted_int (_40:void)<-(_35:str)(v:int)
#io.print(j); 	# 41  (_41:str)
    t0 := alarm.usec();	# 42 ALARMusec (t0:lng)
    sj2 := algebra.kintersect(smallR,largeR);	# 43 ALGsemijoin (sj2:bat[:sht,:oid])<-(smallR:bat[:sht,:oid])(largeR:bat[:sht,:oid])
    t1 := alarm.usec();	# 44 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 45 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#kintersect(smallRev,largeRev) %d\n",d0);	# 46 IOprint_formatted_lng (_43:void)<-(_44:str)(d0:lng)
    v := aggr.count(sj2);	# 47 ALGcount_bat (v:int)<-(sj2:bat[:sht,:oid])
    io.printf("#count %d\n",v);	# 48 IOprint_formatted_int (_45:void)<-(_35:str)(v:int)
#io.print(sj2); 	# 49  (_46:str)
    t0 := alarm.usec();	# 50 ALARMusec (t0:lng)
    j := algebra.join(small,smallR);	# 51 ALGjoin (j:bat[:oid,:oid])<-(small:bat[:oid,:sht])(smallR:bat[:sht,:oid])
    t1 := alarm.usec();	# 52 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 53 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#join(small,largeRev) %d\n",d0);	# 54 IOprint_formatted_lng (_47:void)<-(_48:str)(d0:lng)
    v := aggr.count(j);	# 55 ALGcount_bat (v:int)<-(j:bat[:oid,:oid])
    io.printf("#count %d\n",v);	# 56 IOprint_formatted_int (_49:void)<-(_35:str)(v:int)
#io.print(j); 	# 57  (_41:str)
end main;	# 58  
#kintersect(largeRev,smallRev) 55846
#count 61
#join(large,smallRev) 122030
#count 61
#kintersect(smallRev,largeRev) 29
#count 3
#join(small,largeRev) 33
#count 3

# 20:15:10 >  
# 20:15:10 >  Done.
# 20:15:10 >  

