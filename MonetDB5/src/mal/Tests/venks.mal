# test an expensive kintersect
# it illustrates weakness of the kintersect routine.

t0:= alarm.usec();
l:= 0:sht;
large:= bat.new(:oid,:sht);
barrier (go,i):= language.newRange(0:lng);
	k:= mmath.rand();
	l:= calc.sht(k);
	bat.append(large,l);
	redo (go,i):= language.nextElement(1:lng,1000000:lng);
exit (go,i);

small:= bat.new(:oid,:sht);
#m:= aggr.min(b);
m:= mmath.rand();
l:= calc.sht(m);
bat.insert(small,1@0,l);
#m:= aggr.max(b);
m:= mmath.rand();
l:= calc.sht(m);
bat.insert(small,4@0,l);
#disturb order
m:= mmath.rand();
l:= calc.sht(m);
bat.insert(small,3@0,l);

largeR:= bat.reverse(large);
smallR:= bat.reverse(small);

t0:= alarm.usec();
sj:= algebra.kintersect(largeR,smallR);
t1:= alarm.usec();
d0:= t1-t0;
io.printf("#kintersect(largeRev,smallRev) %lld\n",d0);
v:= aggr.count(sj);
io.printf("#count %d\n",v);
#io.print(sj);

t0:= alarm.usec();
j:= algebra.join(large,smallR);
t1:= alarm.usec();
d0:= t1-t0;
io.printf("#join(large,smallRev) %lld\n",d0);
v:= aggr.count(j);
io.printf("#count %d\n",v);
#io.print(j);

t0:= alarm.usec();
sj2:= algebra.kintersect(smallR,largeR);
t1:= alarm.usec();
d0:= t1-t0;
io.printf("#kintersect(smallRev,largeRev) %lld\n",d0);
v:= aggr.count(sj2);
io.printf("#count %d\n",v);
#io.print(sj2);

t0:= alarm.usec();
j:= algebra.join(small,smallR);
t1:= alarm.usec();
d0:= t1-t0;
io.printf("#join(small,largeRev) %lld\n",d0);
v:= aggr.count(j);
io.printf("#count %d\n",v);
#io.print(j);
