stdout of test 'tst3030` in directory 'src/mal` itself:


# 08:01:16 >  
# 08:01:16 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst3030.mal </dev/null
# 08:01:16 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
##Parsing properties and keeping them around
## note the use of the first parameter to obtain property set
#function newsemijoin(A:bat[:int,:any_1], 
#end newsemijoin;
function user.newsemijoin(A:bat[:int,:any_1],B:bat[:int,:any_2]):bat[:int,:any_1];	# 0  dynamic (newsemijoin:bat[:int,:any_1])<-(A:bat[:int,:any_1])(B:bat[:int,:any_2])
end newsemijoin;	# 1  
!ERROR: return missing
#z:= bbp.new(:int{sorted=true},:int);
#w:= bbp.new(:int{sequence=true},:int);
#w:bat[:int,:int]:= bbp.new(:int,:int);
#y:= algebra.sort(w:bat[:int,:int]{sorted=true,dense=true});
#io.print(1);
#y:int{sorted=true}:= algebra.sort(w);
#
!ERROR: MALresolve:user.main[6]:type mismatch int := bat[:int,:int]
!ERROR: 'algebra.sort' undefined in user.main[6]
!ERROR: MALresolve:user.main[8]:type mismatch int := bat[:int,:int]
!ERROR: 'algebra.sort' undefined in user.main[8]
function user.main():int;	# 0  (main:int)
#Parsing properties and keeping them around 	# 1  (_2:str)
# note the use of the first parameter to obtain property set 	# 2  (_4:str)
    z := bat.new(:int{sequence=true,sorted=true},:int{sequence=true,sorted=true});	# 3 CMDBATnew (z:bat[:int,:int])<-(_6:int)(_6:int)
    w:bat[:int,:int]{dense=true,sorted=true}  := bat.new(:int{sequence=true,sorted=true},:int{sequence=true,sorted=true});	# 4 CMDBATnew (w:bat[:int,:int])<-(_6:int)(_6:int)
    w:bat[:int,:int]{dense=true,sorted=true}  := bat.new(:int{sequence=true,sorted=true},:int{sequence=true,sorted=true});	# 5 CMDBATnew (w:bat[:int,:int])<-(_6:int)(_6:int)
    y:int{sorted=true}  := algebra.sort(w{dense=true,sorted=true});	# 6  unknown (y:int)<-(w:bat[:int,:int])
    io.print(1);	# 7 IOprint_val (_9:int)<-(_10:int)
    y:int{sorted=true}  := algebra.sort(w{dense=true,sorted=true});	# 8  unknown (y:int)<-(w:bat[:int,:int])
end main;	# 9  

# 08:01:16 >  
# 08:01:16 >  Done.
# 08:01:16 >  

