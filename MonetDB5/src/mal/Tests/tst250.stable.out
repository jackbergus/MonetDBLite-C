stdout of test 'tst250` in directory 'src/mal` itself:


# 08:01:03 >  
# 08:01:03 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst250.mal </dev/null
# 08:01:03 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## The series tst2?? is a patched version of suite_00
## The first and foremost BAT operations
#
#b:= new(:int,:int);
#err := insert(b,1,15);
#err := insert(b,2,4);
#n0  := int(nil);
#err := insert(b,3,n0);
#err := insert(b,4,16);
#err := insert(b,5,25);
#err := insert(b,6,36);
#err := insert(b,7,49);
#err := insert(b,8,64);
#err := insert(b,9,n0);
#err := insert(b,n0,n0);
#err := insert(b,n0,81);
#print(b);
#barrier (v,h,t):= chopper.newIterator(b);
#	printf("%d,",h);
#	printf("%d\n",t);
#	redo (v,h,t):= chopper.hasMoreElements(b);
#exit v;
#
function user.main():void;              #  0 main:void {G}
# The series tst2?? is a patched version of suite_00 
# The first and foremost BAT operations 
    b := bat.new(:int,:int);            #  3 b:bat[:int,:int] := CMDBATnew(_4:int, _4:int) {G}
    err := bat.insert(b,1,15);          #  4 err:void := BKCinsert_bun(b:bat[:int,:int], _6:int, _7:int) 
    err := bat.insert(b,2,4);           #  5 err:void := BKCinsert_bun(b:bat[:int,:int], _8:int, _9:int) 
    n0 := calc.int(nil:void);           #  6 n0:int := CALCnil2int(_11:void) 
    err := bat.insert(b,3,n0);          #  7 err:void := BKCinsert_bun(b:bat[:int,:int], _12:int, n0:int) 
    err := bat.insert(b,4,16);          #  8 err:void := BKCinsert_bun(b:bat[:int,:int], _9:int, _13:int) 
    err := bat.insert(b,5,25);          #  9 err:void := BKCinsert_bun(b:bat[:int,:int], _14:int, _15:int) 
    err := bat.insert(b,6,36);          # 10 err:void := BKCinsert_bun(b:bat[:int,:int], _16:int, _17:int) 
    err := bat.insert(b,7,49);          # 11 err:void := BKCinsert_bun(b:bat[:int,:int], _18:int, _19:int) 
    err := bat.insert(b,8,64);          # 12 err:void := BKCinsert_bun(b:bat[:int,:int], _20:int, _21:int) 
    err := bat.insert(b,9,n0);          # 13 err:void := BKCinsert_bun(b:bat[:int,:int], _22:int, n0:int) 
    err := bat.insert(b,n0,n0);         # 14 err:void := BKCinsert_bun(b:bat[:int,:int], n0:int, n0:int) 
    err := bat.insert(b,n0,81);         # 15 err:void := BKCinsert_bun(b:bat[:int,:int], n0:int, _23:int) 
    io.print(b);                        # 16 _24:void := IOprint_val(b:bat[:int,:int]) 
barrier (v,h,t):= bat.newIterator(b);   # 17 (v:lng, h:int, t:int) := CHPbunIterator(b:bat[:int,:int]) {J21}
    io.printf("%d,",h);                 # 18 _28:void := IOprint_formatted_int(_29:str, h:int) 
    io.printf("%d\n",t);                # 19 _30:void := IOprint_formatted_int(_31:str, t:int) 
    redo (v,h,t):= bat.hasMoreElements(b);# 20 (v:lng, h:int, t:int) := CHPbunHasMoreElements(b:bat[:int,:int]) {J18}
exit v;                                 # 21 v:lng 
end main;	# 22  
#-----------------#
# h	tmp_4	  # name
# int	int	  # type
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
1,15
2,4
3,nil
4,16
5,25
6,36
7,49
8,64
9,nil
nil,nil
nil,81

# 08:01:03 >  
# 08:01:03 >  Done.
# 08:01:03 >  

