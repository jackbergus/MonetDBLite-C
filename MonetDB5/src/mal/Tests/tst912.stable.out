stdout of test 'tst912` in directory 'src/mal` itself:


# 08:01:41 >  
# 08:01:41 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst912.mal </dev/null
# 08:01:41 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## analyse the overhead of chopping a table
## the multiplex code blocks.
#
#factory getChunk(b:bat[:void,:lng], size:lng)(bb:bit,c:bat[:void,:lng]);
#    (chk,c):= newChunkIterator(b,size);
#    bf:= true; # change in bb to crash
#barrier allways:= chk>0;
#    yield (bb,c):= (true,c);
#    (chk,c):= hasMoreChunks(b,size);
#    redo allways:= chk>0;
#exit allways;
#    printf("#factory done\n");
#    return (bb,c):= (false,c);
#end getChunk;
factory user.getChunk(b:bat[:void,:lng],size:lng) (bb:bit,c:bat[:void,:lng]);	# 0  (bb:bit)(c:bat[:void,:lng])<-(b:bat[:void,:lng])(size:lng)
    (chk,c):= chop.newIterator(b,size);	# 1 CHPnewChunkIterator (chk:lng)(c:bat[:void,:lng])<-(b:bat[:void,:lng])(size:lng)
    bf := true;	# 2  (bf:bit)<-(_7:bit)
# change in bb to crash 	# 3  (_9:str)
barrier allways := calc.>(chk,0);	# 4 CALCcompGTlngint (allways:bit)<-(chk:lng)(_11:int) jump 8
    yield (bb,c):= (true,c);	# 5  (bb:bit)(c:bat[:void,:lng])<-(_7:bit)(c:bat[:void,:lng])
    (chk,c):= chop.hasMoreElements(b,size);	# 6 CHPhasMoreChunks (chk:lng)(c:bat[:void,:lng])<-(b:bat[:void,:lng])(size:lng)
    redo allways := calc.>(chk,0);	# 7 CALCcompGTlngint (allways:bit)<-(chk:lng)(_11:int) jump 5
exit allways;	# 8  (allways:bit)
    io.printf("#factory done\n");	# 9 IOprint_str (_12:int)<-(_13:str)
    return (bb,c):= (false,c);	# 10  (bb:bit)(c:bat[:void,:lng])<-(_14:bit)(c:bat[:void,:lng])
end getChunk;	# 11  
#
#function choptest(b:bat[:void,:lng], size:lng, base:lng);
#    t0:= alarm.usec();
#    barrier (tst,c):= getChunk(b,size);
#        t:= select(c, 256000:lng,266000:lng);
#        redo (tst,c):= getChunk(b,size);
#    exit (tst,c);
#
#    t1:= alarm.usec();
#    d0:= t1-t0;
#    printf("#chopped at %d",size);
#    printf(" %d",d0);
#    d0:= d0-base;
#    printf(" %d ",d0);
#    i:= 1000000:lng/size;
#    if:= flt(i);
#    df:= flt(d0);
#    f:= df/if;
#    printf(" at %f usec\n",f);
#end choptest;
function user.choptest(b:bat[:void,:lng],size:lng,base:lng):void;	# 0  (choptest:void)<-(b:bat[:void,:lng])(size:lng)(base:lng)
    t0 := alarm.usec();	# 1 ALARMusec (t0:lng)
barrier (tst,c):= user.getChunk(b,size);	# 2  (tst:bit)(c:bat[:void,:lng])<-(b:bat[:void,:lng])(size:lng) jump 5
    t := algebra.select(c,256000:lng,266000:lng);	# 3 ALGselect (t:bat[:void,:lng])<-(c:bat[:void,:lng])(_8:lng)(_9:lng)
    redo (tst,c):= user.getChunk(b,size);	# 4  (tst:bit)(c:bat[:void,:lng])<-(b:bat[:void,:lng])(size:lng) jump 3
exit (tst,c);	# 5  (tst:bit)(c:bat[:void,:lng])
    t1 := alarm.usec();	# 6 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 7 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#chopped at %d",size);	# 8 IOprint_formatted_lng (_12:int)<-(_13:str)(size:lng)
    io.printf(" %d",d0);	# 9 IOprint_formatted_lng (_14:int)<-(_15:str)(d0:lng)
    d0 := calc.-(d0,base);	# 10 CALCbinarySUBlnglng (d0:lng)<-(d0:lng)(base:lng)
    io.printf(" %d ",d0);	# 11 IOprint_formatted_lng (_16:int)<-(_17:str)(d0:lng)
    i := calc./(1000000:lng,size);	# 12 CALCbinarycheckDIVlnglng (i:lng)<-(_19:lng)(size:lng)
    if := calc.flt(i);	# 13 CALClng2flt (if:flt)<-(i:lng)
    df := calc.flt(d0);	# 14 CALClng2flt (df:flt)<-(d0:lng)
    f := calc./(df,if);	# 15 CALCbinarycheckDIVfltflt (f:flt)<-(df:flt)(if:flt)
    io.printf(" at %f usec\n",f);	# 16 IOprint_formatted_flt (_23:int)<-(_24:str)(f:flt)
end choptest;	# 17  
#
#b:= new(:void,:lng);
#barrier (go,i):= newRange(0:lng);
#	k:= rand();
#	l:= lng(k);
#	insert(b,nil,l);
#	redo (go,i):= nextElement(1:lng,1000000:lng);
#exit (go,i);
#
#t0:= alarm.usec();
#barrier doit:= true;
#    t:= select(b, 256000:lng,266000:lng);
#exit doit;
#t1:= alarm.usec();
#base:= t1-t0;
#printf("#select direct %d usec\n",base);
#
#choptest(b,100000:lng,base);
#choptest(b,10000:lng,base);
#choptest(b,1000:lng,base);
#choptest(b,100:lng,base);
#
function user.main():int;	# 0  (main:int)
# analyse the overhead of chopping a table 	# 1  (_2:str)
# the multiplex code blocks. 	# 2  (_4:str)
    b := bat.new(:void,:lng);	# 3 CMDBATnew (b:bat[:void,:lng])<-(_6:void)(_7:lng)
barrier (go,i):= mal.newRange(0:lng);	# 4 RNGnewRange_lng (go:bit)(i:lng)<-(_10:lng) jump 9
    k := mmath.rand();	# 5 MATHrandint (k:int)
    l := calc.lng(k);	# 6 CALCint2lng (l:lng)<-(k:int)
    bat.insert(b,nil,l);	# 7 BKCinsert_bun (_13:void)<-(b:bat[:void,:lng])(_14:void)(l:lng)
    redo (go,i):= mal.nextElement(1:lng,1000000:lng);	# 8 RNGnextElement_lng (go:bit)(i:lng)<-(_15:lng)(_16:lng) jump 5
exit (go,i);	# 9  (go:bit)(i:lng)
    t0 := alarm.usec();	# 10 ALARMusec (t0:lng)
barrier doit := true;	# 11  (doit:bit)<-(_19:bit) jump 13
    t := algebra.select(b,256000:lng,266000:lng);	# 12 ALGselect (t:bat[:void,:lng])<-(b:bat[:void,:lng])(_21:lng)(_22:lng)
exit doit;	# 13  (doit:bit)
    t1 := alarm.usec();	# 14 ALARMusec (t1:lng)
    base := calc.-(t1,t0);	# 15 CALCbinarySUBlnglng (base:lng)<-(t1:lng)(t0:lng)
    io.printf("#select direct %d usec\n",base);	# 16 IOprint_formatted_lng (_25:int)<-(_26:str)(base:lng)
    user.choptest(b,100000:lng,base);	# 17  (_27:void)<-(b:bat[:void,:lng])(_28:lng)(base:lng)
    user.choptest(b,10000:lng,base);	# 18  (_29:void)<-(b:bat[:void,:lng])(_30:lng)(base:lng)
    user.choptest(b,1000:lng,base);	# 19  (_31:void)<-(b:bat[:void,:lng])(_32:lng)(base:lng)
    user.choptest(b,100:lng,base);	# 20  (_33:void)<-(b:bat[:void,:lng])(_34:lng)(base:lng)
end main;	# 21  
#select direct 7611 usec
#factory done
#chopped at 100000 25865 1199  at 119.900002 usec
#factory done
#chopped at 10000 27181 2515  at 25.150000 usec
#factory done
#chopped at 1000 42119 17453  at 17.452999 usec
#factory done
#chopped at 100 177391 152725  at 15.272500 usec

# 08:01:42 >  
# 08:01:42 >  Done.
# 08:01:42 >  

