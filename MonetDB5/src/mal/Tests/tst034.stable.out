stdout of test 'tst034` in directory 'src/mal` itself:


# 22:30:08 >  
# 22:30:08 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=37869 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst034.mal < /dev/null
# 22:30:08 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2006, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## test the reference counting scheme
#b:= bat.new(:int,:int);
#bat.insert(b,0,0);
#bat.insert(b,1,1);
#bat.insert(b,2,2);
#bat.insert(b,3,3);
#
#i:= bbp.getLRefCount(b);
#io.printf("start of selections %d [1]\n",i);
#z:= algebra.select(b,0,2); io.print(z);
#i:= bbp.getLRefCount(z);
#io.printf("z select %d [1]\n",i);
#i:= bbp.getLRefCount(b);
#io.printf("select %d [1]\n",i);
#z:= algebra.betweenCO(b,0,2); io.print(z);
#i:= bbp.getLRefCount(b);
#io.printf("select %d [1]\n",i);
#z:= algebra.betweenOC(b,0,2); io.print(z);
#z:= algebra.betweenOO(b,0,2); io.print(z);
#
function user.main():void;	# 0  (main:void)
# test the reference counting scheme 	# 1  (_1:str)
    b := bat.new(:int,:int);	# 2 CMDBATnew (b:bat[:int,:int])<-(_3:int)(_3:int)
    bat.insert(b,0,0);	# 3 BKCinsert_bun (_4:void)<-(b:bat[:int,:int])(_5:int)(_5:int)
    bat.insert(b,1,1);	# 4 BKCinsert_bun (_6:void)<-(b:bat[:int,:int])(_7:int)(_7:int)
    bat.insert(b,2,2);	# 5 BKCinsert_bun (_8:void)<-(b:bat[:int,:int])(_9:int)(_9:int)
    bat.insert(b,3,3);	# 6 BKCinsert_bun (_10:void)<-(b:bat[:int,:int])(_11:int)(_11:int)
    i := bbp.getLRefCount(b);	# 7 CMDgetBATlrefcnt (i:int)<-(b:bat[:int,:int])
    io.printf("start of selections %d [1]\n",i);	# 8 IOprint_formatted_int (_13:void)<-(_14:str)(i:int)
    z := algebra.select(b,0,2);	# 9 ALGselect (z:bat[:int,:int])<-(b:bat[:int,:int])(_5:int)(_9:int)
    io.print(z);	# 10 IOprint_val (_16:void)<-(z:bat[:int,:int])
    i := bbp.getLRefCount(z);	# 11 CMDgetBATlrefcnt (i:int)<-(z:bat[:int,:int])
    io.printf("z select %d [1]\n",i);	# 12 IOprint_formatted_int (_17:void)<-(_18:str)(i:int)
    i := bbp.getLRefCount(b);	# 13 CMDgetBATlrefcnt (i:int)<-(b:bat[:int,:int])
    io.printf("select %d [1]\n",i);	# 14 IOprint_formatted_int (_19:void)<-(_20:str)(i:int)
    z := algebra.select(b,0,2,true,false);	# 15 ALGselectInclusive (z:bat[:int,:int])<-(b:bat[:int,:int])(_5:int)(_9:int)(_21:bit)(_22:bit)
    io.print(z);	# 16 IOprint_val (_23:void)<-(z:bat[:int,:int])
    i := bbp.getLRefCount(b);	# 17 CMDgetBATlrefcnt (i:int)<-(b:bat[:int,:int])
    io.printf("select %d [1]\n",i);	# 18 IOprint_formatted_int (_24:void)<-(_20:str)(i:int)
    z := algebra.select(b,0,2,false,true);	# 19 ALGselectInclusive (z:bat[:int,:int])<-(b:bat[:int,:int])(_5:int)(_9:int)(_22:bit)(_21:bit)
    io.print(z);	# 20 IOprint_val (_25:void)<-(z:bat[:int,:int])
    z := algebra.select(b,0,2,false,false);	# 21 ALGselectInclusive (z:bat[:int,:int])<-(b:bat[:int,:int])(_5:int)(_9:int)(_22:bit)(_22:bit)
    io.print(z);	# 22 IOprint_val (_26:void)<-(z:bat[:int,:int])
end main;	# 23  
start of selections 1 [1]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 0,	  0	  ]
[ 1,	  1	  ]
[ 2,	  2	  ]
z select 1 [1]
select 1 [1]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 0,	  0	  ]
[ 1,	  1	  ]
select 1 [1]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]
[ 2,	  2	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  1	  ]

# 22:30:08 >  
# 22:30:08 >  Done.
# 22:30:08 >  

