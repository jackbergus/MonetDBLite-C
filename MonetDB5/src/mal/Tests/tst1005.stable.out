stdout of test 'tst1005` in directory 'src/mal` itself:


# 07:58:53 >  
# 07:58:53 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst1005.mal </dev/null
# 07:58:53 >  



# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/fabian/scratch/monetdb/five/program-x86_64/etc/MonetDB5.conf
# dbfarm:/net/pegasus.ins.cwi.nl/export/scratch0/fabian/vtmp/mtest-five-monetdb-pegasus.ins.cwi.nl/monetdb/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## the first of a series of BBP test cases
## make sure you can bind to a BAT through the box
#
#bbp.open();
#b:= new(:int,:int);
#insert(b,1,2);
#setName(b,"myfirstlocalbat");
#c:= bbp.bind("myfirstbat");
#print(c);
#bbp.close();
## at the end of the session, the BBP should have discarded
## the temporary bats of the user
#bbp.open();
#v:= bbp.take("myfirstbat");
#catch MALexception;
#	print(MALexception);
#exit MALexception;
#print("v");
#print(v);
#x:= bbp.getObjects();
#print("getObjects");
#print(x);
#bbp.close();
##catch MALexception;
#	#print(MALexception);
##exit MALexception;
##print("done");
#
function user.main():void;	# 0  (main:void)
# the first of a series of BBP test cases 	# 1  (_1:str)
# make sure you can bind to a BAT through the box 	# 2  (_2:str)
    bbp.open();	# 3 CMDbbpopen (_3:void)
    b := bat.new(:int,:int);	# 4 CMDBATnew (b:bat[:int,:int])<-(_5:int)(_5:int)
    bat.insert(b,1,2);	# 5 BKCinsert_bun_int_int (_6:void)<-(b:bat[:int,:int])(_7:int)(_8:int)
    bat.setName(b,"myfirstlocalbat");	# 6 BKCsetName (_9:void)<-(b:bat[:int,:int])(_10:str)
    c := bbp.bind("myfirstbat");	# 7 CMDbbpbind (c:bat[:any,:any])<-(_12:str)
    io.print(c);	# 8 IOprint_val (_13:int)<-(c:bat[:any,:any])
    bbp.close();	# 9 CMDbbpclose (_14:void)
# at the end of the session, the BBP should have discarded 	# 10  (_15:str)
# the temporary bats of the user 	# 11  (_16:str)
    bbp.open();	# 12 CMDbbpopen (_17:void)
    v := bbp.take("myfirstbat");	# 13 CMDbbptake (v:bat[:any,:any])<-(_12:str)
catch MALexception;	# 14  (MALexception:str) jump 16
    io.printf(MALexception);	# 15 IOprint_str (_20:int)<-(MALexception:str)
exit MALexception;	# 16  (MALexception:str)
    io.print("v");	# 17 IOprint_val (_21:int)<-(_22:str)
    io.print(v);	# 18 IOprint_val (_23:int)<-(v:bat[:any,:any])
    x := bbp.getObjects();	# 19 CMDbbpGetObjects (x:bat[:int,:str])
    io.print("getObjects");	# 20 IOprint_val (_25:int)<-(_26:str)
    io.print(x);	# 21 IOprint_val (_27:int)<-(x:bat[:int,:str])
    bbp.close();	# 22 CMDbbpclose (_28:void)
#catch MALexception; 	# 23  (_29:str)
#io.print(MALexception); 	# 24  (_30:str)
#exit MALexception; 	# 25  (_31:str)
#io.print("done"); 	# 26  (_32:str)
end main;	# 27  
MALexception:user.main[7]:bbp.bind:failed to locate object in box
[ "v" ]
[ nil ]
[ "getObjects" ]
#-------------------------#
# bbp	objects		  # name
# int	str		  # type
#-------------------------#

# 07:58:53 >  
# 07:58:53 >  Done.
# 07:58:53 >  

