stdout of test 'tst260` in directory 'src/mal` itself:


# 21:56:13 >  
# 21:56:13 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34411 --set sql_port=49020 --set xquery_port=52098 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst260.mal < /dev/null
# 21:56:13 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## TopN queryies
#
#
#b:= bat.new(:int,:int);
#err := bat.insert(b,1,15);
#err := bat.insert(b,2,4);
#n0  := calc.int(nil);
#err := bat.insert(b,3,n0);
#err := bat.insert(b,4,16);
#err := bat.insert(b,5,25);
#err := bat.insert(b,6,36);
#err := bat.insert(b,7,49);
#err := bat.insert(b,8,64);
#err := bat.insert(b,9,n0);
#err := bat.insert(b,n0,n0);
#err := bat.insert(b,n0,81);
#io.print(b);
#algebra.topN(b,9L);
#io.print(b);
#
function user.main():void;              #  0 main:void := user.main() {G}
# TopN queryies 
    b := bat.new(:int,:int);            #  2 b:bat[:int,:int] := CMDBATnew(_3:int, _3:int) {G}
    err := bat.insert(b,1,15);          #  3 err:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _5:int, _6:int) {G}
    err := bat.insert(b,2,4);           #  4 err:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _7:int, _8:int) {G}
    n0 := calc.int(nil:void);           #  5 n0:int := CALCnil2int(_10:void) 
    err := bat.insert(b,3,n0);          #  6 err:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _11:int, n0:int) {G}
    err := bat.insert(b,4,16);          #  7 err:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _8:int, _12:int) {G}
    err := bat.insert(b,5,25);          #  8 err:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _13:int, _14:int) {G}
    err := bat.insert(b,6,36);          #  9 err:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _15:int, _16:int) {G}
    err := bat.insert(b,7,49);          # 10 err:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _17:int, _18:int) {G}
    err := bat.insert(b,8,64);          # 11 err:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _19:int, _20:int) {G}
    err := bat.insert(b,9,n0);          # 12 err:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], _21:int, n0:int) {G}
    err := bat.insert(b,n0,n0);         # 13 err:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], n0:int, n0:int) {G}
    err := bat.insert(b,n0,81);         # 14 err:bat[:int,:int] := BKCinsert_bun(b:bat[:int,:int], n0:int, _22:int) {G}
    io.print(b);                        # 15 _23:void := IOprint_val(b:bat[:int,:int]) 
    algebra.topN(b,9);                  # 16 _24:bat[:int,:int] := ALGtopN(b:bat[:int,:int], _25:lng) {G}
    io.print(b);                        # 17 _26:void := IOprint_val(b:bat[:int,:int]) 
end main;	# 18  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]
[ nil,	  nil	  ]
[ nil,	  81	  ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  15	  ]
[ 2,	  4	  ]
[ 3,	  nil	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  nil	  ]

# 21:56:13 >  
# 21:56:13 >  Done.
# 21:56:13 >  

