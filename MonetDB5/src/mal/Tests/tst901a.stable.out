stdout of test 'tst901a` in directory 'src/mal` itself:


# 07:48:33 >  
# 07:48:33 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=36666 --set xrpc_port=40130 --set monet_prompt= --trace --dbname=mTests_src_mal  tst901a.mal
# 07:48:33 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
## what is the overhead of MAL in multiplex situations
#profiler.setFilter("*","*");
#b:= bat.new(:oid,:lng);
#t0:= alarm.usec();
#barrier (v,i):= language.newRange(0:lng);
#	o:= calc.oid(i);
#	bat.insert(b,o,i);
#	redo (v,i):= language.nextElement(1:lng,1000000:lng);
#exit (v,i);
#t1:= alarm.usec();
#c:= algebra.copy(b);
#t2:= alarm.usec();
#x:= batcalc.+(b,b,c);
#t3:= alarm.usec();
#d1:= t1-t0;
#d2:= t3-t2;
#xc:= aggr.count(b);
#io.printf("count %d\n",xc);
#io.printf("make %d \n",d1);
#io.printf("multiplex %d\n",d2);
#
function user.main():void;	# 0  (main:void)
# what is the overhead of MAL in multiplex situations 	# 1  (_1:str)
    profiler.setFilter("*","*");	# 2 CMDsetFilterProfiler (_2:void)<-(_3:str)(_3:str)
    b := bat.new(:oid,:lng);	# 3 CMDBATnew (b:bat[:oid,:lng])<-(_5:oid)(_6:lng)
    t0 := alarm.usec();	# 4 ALARMusec (t0:lng)
barrier (v,i):= language.newRange(0:lng);	# 5 RNGnewRange_lng (v:bit)(i:lng)<-(_10:lng) jump 9
    o := calc.oid(i);	# 6 CALClng2oid (o:oid)<-(i:lng)
    bat.insert(b,o,i);	# 7 BKCinsert_bun (_12:void)<-(b:bat[:oid,:lng])(o:oid)(i:lng)
    redo (v,i):= language.nextElement(1:lng,1000000:lng);	# 8 RNGnextElement_lng (v:bit)(i:lng)<-(_13:lng)(_14:lng) jump 6
exit (v,i);	# 9  (v:bit)(i:lng)
    t1 := alarm.usec();	# 10 ALARMusec (t1:lng)
    c := algebra.copy(b);	# 11 ALGcopy (c:bat[:oid,:lng])<-(b:bat[:oid,:lng])
    t2 := alarm.usec();	# 12 ALARMusec (t2:lng)
    x := batcalc.+(b,b,c);	# 13 CMDbataccumADD_lng_lng_lng (x:bat[:oid,:lng])<-(b:bat[:oid,:lng])(b:bat[:oid,:lng])(c:bat[:oid,:lng])
    t3 := alarm.usec();	# 14 ALARMusec (t3:lng)
    d1 := calc.-(t1,t0);	# 15 CALCbinarySUBlnglng (d1:lng)<-(t1:lng)(t0:lng)
    d2 := calc.-(t3,t2);	# 16 CALCbinarySUBlnglng (d2:lng)<-(t3:lng)(t2:lng)
    xc := aggr.count(b);	# 17 ALGcount_bat (xc:int)<-(b:bat[:oid,:lng])
    io.printf("#count %d\n",xc);	# 18 IOprint_formatted_int (_23:void)<-(_24:str)(xc:int)
    io.printf("#make %d \n",d1);	# 19 IOprint_formatted_lng (_25:void)<-(_26:str)(d1:lng)
    io.printf("#multiplex %d\n",d2);	# 20 IOprint_formatted_lng (_27:void)<-(_28:str)(d2:lng)
end main;	# 21  
#count 1000000
#make 788950 
#multiplex 18410

# 07:48:36 >  
# 07:48:36 >  Done.
# 07:48:36 >  

