stdout of test 'tst901a` in directory 'src/mal` itself:


# 07:48:33 >  
# 07:48:33 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=36666 --set xrpc_port=40130 --set monet_prompt= --trace --dbname=mTests_src_mal  tst901a.mal
# 07:48:33 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
## what is the overhead of MAL in multiplex situations
#profiler.setFilter("*","*");
#b:= bat.new(:oid,:lng);
#t0:= alarm.usec();
#barrier (v,i):= language.newRange(0:lng);
#	o:= calc.oid(i);
#	bat.insert(b,o,i);
#	redo (v,i):= language.nextElement(1:lng,1000000:lng);
#exit (v,i);
#t1:= alarm.usec();
#c:= algebra.copy(b);
#t2:= alarm.usec();
#x:= batcalc.+(b,b,c);
#t3:= alarm.usec();
#d1:= t1-t0;
#d2:= t3-t2;
#xc:= aggr.count(b);
#io.printf("count %d\n",xc);
#io.printf("make %d \n",d1);
#io.printf("multiplex %d\n",d2);
#
function user.main():void;              #  0 main:void := user.main() {G}
# what is the overhead of MAL in multiplex situations 
    profiler.setFilter("*","*");        #  2 _2:void := CMDsetFilterProfiler(_3:str, _3:str) 
    b := bat.new(:oid,:lng);            #  3 b:bat[:oid,:lng] := CMDBATnew(_5:oid, _6:lng) {G}
    t0 := alarm.usec();                 #  4 t0:lng := ALARMusec() 
barrier (v,i) := language.newRange(0:lng);#  5 (v:bit, i:lng) := RNGnewRange_lng(_10:lng) {J9}
    o := calc.oid(i);                   #  6 o:oid := CALClng2oid(i:lng) 
    bat.insert(b,o,i);                  #  7 _12:bat[:oid,:lng] := BKCinsert_bun(b:bat[:oid,:lng], o:oid, i:lng) {G}
    redo (v,i) := language.nextElement(1:lng,1000000:lng);#  8 (v:bit, i:lng) := RNGnextElement_lng(_13:lng, _14:lng) {J6}
exit (v,i);                             #  9 (v:bit, i:lng) 
    t1 := alarm.usec();                 # 10 t1:lng := ALARMusec() 
    c := algebra.copy(b);               # 11 c:bat[:oid,:lng] := ALGcopy(b:bat[:oid,:lng]) {G}
    t2 := alarm.usec();                 # 12 t2:lng := ALARMusec() 
    x := batcalc.+(b,b,c);              # 13 x:bat[:oid,:lng] := CMDbataccumADD_lng_lng_lng(b:bat[:oid,:lng], b:bat[:oid,:lng], c:bat[:oid,:lng]) {G}
    t3 := alarm.usec();                 # 14 t3:lng := ALARMusec() 
    d1 := calc.-(t1,t0);                # 15 d1:lng := CALCbinarySUBlnglng(t1:lng, t0:lng) 
    d2 := calc.-(t3,t2);                # 16 d2:lng := CALCbinarySUBlnglng(t3:lng, t2:lng) 
    xc := aggr.count(b);                # 17 xc:int := ALGcount_bat(b:bat[:oid,:lng]) 
    io.printf("#count %d\n",xc);        # 18 _23:void := IOprint_formatted_int(_24:str, xc:int) 
    io.printf("#make %d \n",d1);        # 19 _25:void := IOprint_formatted_lng(_26:str, d1:lng) 
    io.printf("#multiplex %d\n",d2);    # 20 _27:void := IOprint_formatted_lng(_28:str, d2:lng) 
end main;	# 21  
#count 1000000
#make 788950 
#multiplex 18410

# 07:48:36 >  
# 07:48:36 >  Done.
# 07:48:36 >  

