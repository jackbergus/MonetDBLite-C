stdout of test 'tst230` in directory 'src/mal` itself:


# 08:01:02 >  
# 08:01:02 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst230.mal </dev/null
# 08:01:02 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## a test checking BAT reference counting under various situations
#	b:= new(:int,:str);
#	i:= getRefCount(b);
#	printf("refcount =%d\n",i);
#	j:= getRefCount(b);
#	printf("lrefcount =%d\n",j);
#
#	insert(b,1,"bat B");
#	print(b);
#	i:= getRefCount(b);
#	printf("second refcount =%d\n",i);
#	j:= getRefCount(b);
#	printf("lrefcount =%d\n",j);
#
#	# referenceing through mirroring
#	b5:= reverse(b);
#	i:= getRefCount(b);
#	printf("after reverse assignment refcount =%d\n",i);
#	j:= getRefCount(b);
#	printf("lrefcount =%d\n",j);
#
#
function user.main():void;              #  0 main:void {G}
# a test checking BAT reference counting under various situations 
    b := bat.new(:int,:str);            #  2 b:bat[:int,:str] := CMDBATnew(_3:int, _4:str) {G}
    i := bbp.getRefCount(b);            #  3 i:int := CMDgetBATrefcnt(b:bat[:int,:str]) 
    io.printf("refcount =%d\n",i);      #  4 _6:void := IOprint_formatted_int(_7:str, i:int) 
    j := bbp.getLRefCount(b);           #  5 j:int := CMDgetBATlrefcnt(b:bat[:int,:str]) 
    io.printf("lrefcount =%d\n",j);     #  6 _9:void := IOprint_formatted_int(_10:str, j:int) 
    bat.insert(b,1,"bat B");            #  7 _11:void := BKCinsert_bun(b:bat[:int,:str], _12:int, _13:str) 
    io.print(b);                        #  8 _14:void := IOprint_val(b:bat[:int,:str]) 
    i := bbp.getRefCount(b);            #  9 i:int := CMDgetBATrefcnt(b:bat[:int,:str]) 
    io.printf("second refcount =%d\n",i);# 10 _15:void := IOprint_formatted_int(_16:str, i:int) 
    j := bbp.getLRefCount(b);           # 11 j:int := CMDgetBATlrefcnt(b:bat[:int,:str]) 
    io.printf("lrefcount =%d\n",j);     # 12 _17:void := IOprint_formatted_int(_10:str, j:int) 
# referenceing through mirroring 
    b5 := bat.reverse(b);               # 14 b5:bat[:str,:int] := BKCreverse(b:bat[:int,:str]) {G}
    i := bbp.getRefCount(b);            # 15 i:int := CMDgetBATrefcnt(b:bat[:int,:str]) 
    io.printf("after reverse assignment refcount =%d\n",i);# 16 _20:void := IOprint_formatted_int(_21:str, i:int) 
    j := bbp.getLRefCount(b);           # 17 j:int := CMDgetBATlrefcnt(b:bat[:int,:str]) 
    io.printf("lrefcount =%d\n",j);     # 18 _22:void := IOprint_formatted_int(_10:str, j:int) 
end main;	# 19  
refcount =1
lrefcount =1
#-------------------------#
# h	tmp_4		  # name
# int	str		  # type
#-------------------------#
[ 1,	  "bat B"	  ]
second refcount =1
lrefcount =1
after reverse assignment refcount =1
lrefcount =2

# 08:01:02 >  
# 08:01:02 >  Done.
# 08:01:02 >  

