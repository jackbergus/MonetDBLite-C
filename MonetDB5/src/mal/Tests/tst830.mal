# a simple functional test for the access control table

	scens := bat.new(:str, :void);
	bat.insert(scens, "sql", nil:void);
	bat.insert(scens, "mal", nil:void);

	# this should fail, the monetdb user is already there
	id := clients.addUser("monetdb", "Pmonetdb", scens);
catch MALexception:str;
	io.printf(MALexception);
exit MALexception;

	# should print 0@1 or something
	id := clients.addUser("test", "test", scens);
	io.print(id);

	# this should work also
	# don't use nil:bat[:str, :void] here, it results in a crash
	t := bat.new(:str, :void);
	id := clients.addUser("checkpoint", "Pcheckpoint", t);
	io.print(id);

	# do a simple listing of users known
	u := clients.getUsers(t);
	io.print(u);
	bat.insert(t, "mal", nil:void);
	bat.insert(t, "sql", nil:void);
	u := clients.getUsers(t);
	io.print(u);

	# should work, we're the admin here
	clients.removeUser("checkpoint");

	# do a simple listing of users known
	u := clients.getUsers(t);
	io.print(u);

	# just remove the scenarios one by one, should work
	clients.removeScenario("test", "mal");
	clients.removeScenario("test", "sql");
	# this one should fail: it's not there
	clients.removeScenario("test", "mil");
catch MALexception:str;
	io.printf(MALexception);
exit MALexception;

	# and add a scenario again
	clients.addScenario("test", "mal");
	# do it again, see what happens (should fail)
	clients.addScenario("test", "mal");
catch MALexception:str;
	io.printf(MALexception);
exit MALexception;

	# forcefully set the password of the user test
	clients.setPassword("test", "newpass");
	# now try to set the password for ourself, should fail
	clients.setPassword("monetdb", "badpass");
catch InvalidCredentialsException:str;
	io.printf(InvalidCredentialsException);
exit InvalidCredentialsException;

	# change our own password
	clients.changePassword("monetdb", "newdb");
	# try it again, should fail...
	clients.changePassword("monetdb", "newdb");
catch InvalidCredentialsException:str;
	io.printf(InvalidCredentialsException);
exit InvalidCredentialsException;

	# all should fail
	clients.checkPermission("monetdb","Pmonetdb","sql");
catch InvalidCredentialsException:str;
	io.printf(InvalidCredentialsException);
exit InvalidCredentialsException;
	clients.checkPermission("monetdb","x","sql");
catch InvalidCredentialsException:str;
	io.printf(InvalidCredentialsException);
exit InvalidCredentialsException;
	clients.checkPermission("monetdb","Pmonetdb","x");
catch InvalidCredentialsException:str;
	io.printf(InvalidCredentialsException);
exit InvalidCredentialsException;
	clients.checkPermission("x","Pmonetdb","sql");
catch InvalidCredentialsException:str;
	io.printf(InvalidCredentialsException);
exit InvalidCredentialsException;
