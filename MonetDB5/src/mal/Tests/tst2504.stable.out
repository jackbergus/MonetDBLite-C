stdout of test 'tst2504` in directory 'src/mal` itself:


# 08:01:06 >  
# 08:01:06 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst2504.mal </dev/null
# 08:01:06 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## The prototypical factory construct
## test factory return and restart
#
#factory random(seed:int):int;
#	random:= seed;
#	i:= seed;
#	i:= 125 *i;
#	i:= i % 32767;
#	yield i;
#	i:= 125 *i;
#	i:= i % 32767;
#	yield i;
#end random;
factory user.random(seed:int):int;      #  0 random:int := user.random(seed:int) 
    random := seed;                     #  1 random:int := seed:int 
    i := seed;                          #  2 i:int := seed:int 
    i := calc.*(125,i);                 #  3 i:int := CALCbinaryMULintint(_3:int, i:int) 
    i := calc.%(i,32767);               #  4 i:int := CALCbinarycheckMODintint(i:int, _4:int) 
    yield random := i;                  #  5 random:int := i:int 
    i := calc.*(125,i);                 #  6 i:int := CALCbinaryMULintint(_3:int, i:int) 
    i := calc.%(i,32767);               #  7 i:int := CALCbinarycheckMODintint(i:int, _4:int) 
    yield random := i;                  #  8 random:int := i:int 
end random;	# 9  
#
#r1:= random(1);
#print(r1);
#r2:= random(1);
#print(r2);
#r2:= random(1);
#print(r2);
#r2:= random(1);
#print(r2);
#
function user.main():void;              #  0 main:void := user.main() 
# The prototypical factory construct 
# test factory return and restart 
    r1 := user.random(1);               #  3 r1:int := user.random(_4:int) 
    io.print(r1);                       #  4 _5:void := IOprint_val(r1:int) 
    r2 := user.random(1);               #  5 r2:int := user.random(_4:int) 
    io.print(r2);                       #  6 _7:void := IOprint_val(r2:int) 
    r2 := user.random(1);               #  7 r2:int := user.random(_4:int) 
    io.print(r2);                       #  8 _8:void := IOprint_val(r2:int) 
    r2 := user.random(1);               #  9 r2:int := user.random(_4:int) 
    io.print(r2);                       # 10 _9:void := IOprint_val(r2:int) 
end main;	# 11  
[ 125 ]
[ 15625 ]
[ 15625 ]
[ 125 ]

# 08:01:06 >  
# 08:01:06 >  Done.
# 08:01:06 >  

