stdout of test 'tst274` in directory 'src/mal` itself:


# 08:46:49 >  
# 08:46:49 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=38910 --set xrpc_port=45291 --set monet_prompt= --trace --dbname=mTests_src_mal  tst274.mal < /dev/null
# 08:46:49 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
## the multiplex code blocks.
#
#t0:= alarm.usec();
#b:= bat.new(:oid,:lng);
#barrier (go,i):= language.newRange(0:lng);
#	k:= mmath.rand();
#	l:= calc.lng(k);
#	bat.insert(b,nil:oid,l);
#	redo (go,i):= language.nextElement(1:lng,10000:lng);
#exit (go,i);
#
#profiler.activate("ticks");
#profiler.activate("statement");
#profiler.activate("rdbytes");
#profiler.activate("wrbytes");
#profiler.activate("diskspace");
#profiler.setAll();
#
#profiler.start();
#io.printf("#monitor \n");
#mx:= aggr.max(b); 
#algebra.select(b,nil:lng,mx); 
#algebra.select(b,mx,nil:lng); 
#d:= mmath.sin(0.2:dbl);
#profiler.stop();
#
#stmt:= profiler.getTrace("statement");
#io.print(stmt);
#ticks:= profiler.getTrace("ticks");
##io.print(ticks);
#rdbytes:= profiler.getTrace("rdbytes");
#io.print(rdbytes);
#wrbytes:= profiler.getTrace("wrbytes");
##io.print(wrbytes);
#diskspace:= profiler.getTrace("diskspace");
##io.print(diskspace);
#io.print(rdbytes,wrbytes,stmt);
##io.print(ticks,rdbytes,wrbytes,diskspace,stmt);
#
function user.main():void;	# 0  (main:void)
# the multiplex code blocks. 	# 1  (_1:str)
#watch out, the random generator on SUN has a limited range. 	# 2  (_2:str)
    t0 := alarm.usec();	# 3 ALARMusec (t0:lng)
    b := bat.new(:oid,:lng);	# 4 CMDBATnew (b:bat[:oid,:lng])<-(_5:oid)(_6:lng)
barrier (go,i):= language.newRange(0:lng);	# 5 RNGnewRange_lng (go:bit)(i:lng)<-(_9:lng) jump 10
    k := mmath.rand();	# 6 MATHrandint (k:int)
    l := calc.lng(k);	# 7 CALCint2lng (l:lng)<-(k:int)
    bat.insert(b,nil:oid,l);	# 8 BKCinsert_bun (_12:void)<-(b:bat[:oid,:lng])(_13:oid)(l:lng)
    redo (go,i):= language.nextElement(1:lng,10000:lng);	# 9 RNGnextElement_lng (go:bit)(i:lng)<-(_14:lng)(_15:lng) jump 6
exit (go,i);	# 10  (go:bit)(i:lng)
    profiler.activate("ticks");	# 11 CMDactivateProfiler (_16:void)<-(_17:str)
    profiler.activate("statement");	# 12 CMDactivateProfiler (_18:void)<-(_19:str)
    profiler.activate("bytes");	# 13 CMDactivateProfiler (_20:void)<-(_21:str)
    profiler.activate("disk");	# 14 CMDactivateProfiler (_22:void)<-(_23:str)
    profiler.setAll();	# 15 CMDsetAllProfiler (_24:void)
    profiler.start();	# 16 CMDstartProfiler (_25:void)
    io.printf("#monitor \n");	# 17 IOprint_str (_26:void)<-(_27:str)
    mx := aggr.max(b);	# 18 ALGmax_lng (mx:lng)<-(b:bat[:oid,:lng])
    mx := calc.+(mx,1);	# 19 CALCbinaryADDlngint (mx:lng)<-(mx:lng)(_29:int)
#enforce an empty set later on 	# 20  (_30:str)
    k1 := algebra.select(b,nil:lng,mx);	# 21 ALGselect (k1:bat[:oid,:lng])<-(b:bat[:oid,:lng])(_32:lng)(mx:lng)
    k2 := algebra.select(b,mx,nil:lng);	# 22 ALGselect (k2:bat[:oid,:lng])<-(b:bat[:oid,:lng])(mx:lng)(_32:lng)
    d := mmath.sin(0.20000000298023224:dbl);	# 23 MATHunary_SINdbl (d:dbl)<-(_35:dbl)
    profiler.stop();	# 24 CMDstopProfiler (_36:void)
#stmt:= profiler.getTrace("statement"); 	# 25  (_37:str)
#io.print(stmt); 	# 26  (_38:str)
    ticks := profiler.getTrace("ticks");	# 27 CMDgetTrace (ticks:bat[:int,:any])<-(_17:str)
#io.print(ticks); 	# 28  (_40:str)
    rdbytes := profiler.getTrace("ibytes");	# 29 CMDgetTrace (rdbytes:bat[:int,:any])<-(_42:str)
#io.print(rdbytes); 	# 30  (_43:str)
    wrbytes := profiler.getTrace("obytes");	# 31 CMDgetTrace (wrbytes:bat[:int,:any])<-(_45:str)
#io.print(wrbytes); 	# 32  (_46:str)
    diskspace := profiler.getTrace("diskspace");	# 33 CMDgetTrace (diskspace:bat[:int,:any])<-(_48:str)
#io.print(diskspace); 	# 34  (_49:str)
    io.print(rdbytes,wrbytes);	# 35 IOtable (_50:void)<-(rdbytes:bat[:int,:any])(wrbytes:bat[:int,:any])
#io.print(ticks,rdbytes,wrbytes,diskspace); 	# 36  (_51:str)
end main;	# 37  
# Start performance profiling
#monitor 
# Performance profiling stopped
#-------------------------#
# h	t	t	  # name
# int	int	int	  # type
#-------------------------#
[ 1,	  0,	  0	  ]
[ 2,	  0,	  120000  ]
[ 3,	  0,	  0	  ]
[ 4,	  0,	  0	  ]
[ 5,	  120000, 120000  ]
[ 6,	  0,	  120000  ]
[ 7,	  0,	  0	  ]

# 08:46:49 >  
# 08:46:49 >  Done.
# 08:46:49 >  

