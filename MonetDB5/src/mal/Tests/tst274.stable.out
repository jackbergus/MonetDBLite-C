stdout of test 'tst274` in directory 'src/mal` itself:


# 08:46:49 >  
# 08:46:49 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=38910 --set xrpc_port=45291 --set monet_prompt= --trace --dbname=mTests_src_mal  tst274.mal < /dev/null
# 08:46:49 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
## the multiplex code blocks.
#
#t0:= alarm.usec();
#b:= bat.new(:oid,:lng);
#barrier (go,i):= language.newRange(0:lng);
#	k:= mmath.rand();
#	l:= calc.lng(k);
#	bat.insert(b,nil:oid,l);
#	redo (go,i):= language.nextElement(1:lng,10000:lng);
#exit (go,i);
#
#profiler.activate("ticks");
#profiler.activate("statement");
#profiler.activate("rdbytes");
#profiler.activate("wrbytes");
#profiler.activate("diskspace");
#profiler.setAll();
#
#profiler.start();
#io.printf("#monitor \n");
#mx:= aggr.max(b); 
#algebra.select(b,nil:lng,mx); 
#algebra.select(b,mx,nil:lng); 
#d:= mmath.sin(0.2:dbl);
#profiler.stop();
#
#stmt:= profiler.getTrace("statement");
#io.print(stmt);
#ticks:= profiler.getTrace("ticks");
##io.print(ticks);
#rdbytes:= profiler.getTrace("rdbytes");
#io.print(rdbytes);
#wrbytes:= profiler.getTrace("wrbytes");
##io.print(wrbytes);
#diskspace:= profiler.getTrace("diskspace");
##io.print(diskspace);
#io.print(rdbytes,wrbytes,stmt);
##io.print(ticks,rdbytes,wrbytes,diskspace,stmt);
#
function user.main():void;              #  0 main:void := user.main() {G}
# the multiplex code blocks. 
#watch out, the random generator on SUN has a limited range. 
    t0 := alarm.usec();                 #  3 t0:lng := ALARMusec() 
    b := bat.new(:oid,:lng);            #  4 b:bat[:oid,:lng] := CMDBATnew(_5:oid, _6:lng) {G}
barrier (go,i) := language.newRange(0:lng);#  5 (go:bit, i:lng) := RNGnewRange_lng(_9:lng) {J10}
    k := mmath.rand();                  #  6 k:int := MATHrandint() 
    l := calc.lng(k);                   #  7 l:lng := CALCint2lng(k:int) 
    bat.insert(b,nil:oid,l);            #  8 _12:bat[:oid,:lng] := BKCinsert_bun(b:bat[:oid,:lng], _13:oid, l:lng) {G}
    redo (go,i) := language.nextElement(1:lng,10000:lng);#  9 (go:bit, i:lng) := RNGnextElement_lng(_14:lng, _15:lng) {J6}
exit (go,i);                            # 10 (go:bit, i:lng) 
    profiler.activate("ticks");         # 11 _16:void := CMDactivateProfiler(_17:str) 
    profiler.activate("statement");     # 12 _18:void := CMDactivateProfiler(_19:str) 
    profiler.activate("bytes");         # 13 _20:void := CMDactivateProfiler(_21:str) 
    profiler.activate("disk");          # 14 _22:void := CMDactivateProfiler(_23:str) 
    profiler.setAll();                  # 15 _24:void := CMDsetAllProfiler() 
    profiler.start();                   # 16 _25:void := CMDstartProfiler() 
    io.printf("#monitor \n");           # 17 _26:void := IOprintf(_27:str) 
    mx := aggr.max(b);                  # 18 mx:lng := ALGmax_lng(b:bat[:oid,:lng]) 
    mx := calc.+(mx,1);                 # 19 mx:lng := CALCbinaryADDlngint(mx:lng, _29:int) 
#enforce an empty set later on 
    k1 := algebra.select(b,nil:lng,mx); # 21 k1:bat[:oid,:lng] := ALGselect(b:bat[:oid,:lng], _32:lng, mx:lng) {G}
    k2 := algebra.select(b,mx,nil:lng); # 22 k2:bat[:oid,:lng] := ALGselect(b:bat[:oid,:lng], mx:lng, _32:lng) {G}
    d := mmath.sin(0.20000000298023224:dbl);# 23 d:dbl := MATHunary_SINdbl(_35:dbl) 
    profiler.stop();                    # 24 _36:void := CMDstopProfiler() 
#stmt:= profiler.getTrace("statement"); 
#io.print(stmt); 
    ticks := profiler.getTrace("ticks");# 27 ticks:bat[:int,:any] := CMDgetTrace(_17:str) {G}
#io.print(ticks); 
    rdbytes := profiler.getTrace("ibytes");# 29 rdbytes:bat[:int,:any] := CMDgetTrace(_42:str) {G}
#io.print(rdbytes); 
    wrbytes := profiler.getTrace("obytes");# 31 wrbytes:bat[:int,:any] := CMDgetTrace(_45:str) {G}
#io.print(wrbytes); 
    diskspace := profiler.getTrace("diskspace");# 33 diskspace:bat[:int,:any] := CMDgetTrace(_48:str) {G}
#io.print(diskspace); 
    io.print(rdbytes,wrbytes);          # 35 _50:void := IOtable(rdbytes:bat[:int,:any], wrbytes:bat[:int,:any]) 
#io.print(ticks,rdbytes,wrbytes,diskspace); 
end main;	# 37  
# Start performance profiling
#monitor 
# Performance profiling stopped
#-------------------------#
# h	t	t	  # name
# int	int	int	  # type
#-------------------------#
[ 1,	  0,	  0	  ]
[ 2,	  0,	  120000  ]
[ 3,	  0,	  0	  ]
[ 4,	  0,	  0	  ]
[ 5,	  120000, 120000  ]
[ 6,	  0,	  120000  ]
[ 7,	  0,	  0	  ]

# 08:46:49 >  
# 08:46:49 >  Done.
# 08:46:49 >  

