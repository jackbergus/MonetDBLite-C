stdout of test 'tst220` in directory 'src/mal` itself:


# 08:01:01 >  
# 08:01:01 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst220.mal </dev/null
# 08:01:01 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## a test checking BAT reference counting under various situations
#function steal(bb:bat[:any$1,:any$2]) :bat[:any$1,:any$2];
#	i:= getLRefCount(bb);
#	printf("enter function refcount =%d[2]\n",i);
#
#	loc:= bb;
#	i:= getLRefCount(bb);
#	printf("local in function refcount =%d[3]\n",i);
#
#	return bb;
#end steal; 
function user.steal(bb:bat[:any_1,:any_2]):bat[:any_1,:any_2];#  0 steal:bat[:any_1,:any_2] := user.steal(bb:bat[:any_1,:any_2]) {UPG}
    i := bbp.getLRefCount(bb);          #  1 i:int := CMDgetBATlrefcnt(bb:bat[:any_1,:any_2]) 
    io.printf("enter function refcount =%d[2,3]\n",i);#  2 _3:void := IOprintf(_4:str, i:int) 
    loc := bb;                          #  3 loc:bat[:any_1,:any_2] := bb:bat[:any_1,:any_2] {G}
    i := bbp.getLRefCount(bb);          #  4 i:int := CMDgetBATlrefcnt(bb:bat[:any_1,:any_2]) 
    io.printf("local in function refcount =%d[3,4]\n",i);#  5 _6:void := IOprintf(_7:str, i:int) 
    return steal := bb;                 #  6 steal:bat[:any_1,:any_2] := bb:bat[:any_1,:any_2] {G}
end steal;	# 7  
#
#function createone():bat[:int,:str];
#	b:= bbp.new(:int,:str);
#	return b;
#end createone;
function user.createone():bat[:int,:str];#  0 createone:bat[:int,:str] := user.createone() {G}
    b := bat.new(:int,:str);            #  1 b:bat[:int,:str] := CMDBATnew(_2:int, _3:str) {G}
    return createone := b;              #  2 createone:bat[:int,:str] := b:bat[:int,:str] {G}
end createone;	# 3  
#
#	b:= bbp.new(:int,:str);
#	i:= bbp.getLRefCount(b);
#	io.printf("refcount =%d[1]\n",i);	
#
#	bat.insert(b,1,"bat B");
#	io.print(b);
#	i:= bbp.getLRefCount(b);
#	io.printf("refcount =%d[1]\n",i);
#
#	#handle an alias
#	b2:= b;			
#	i:= getLRefCount(b);
#	printf("after assignment refcount =%d[2]\n",i);
#
#	#re-use a bat variable
#	b3:= b;			
#	i:= getLRefCount(b);
#	printf("after 2nd assignment refcount =%d[3]\n",i);
#
#	#re-use a bat variable
#	b3:= new(:int,:str);			
#	i:= getLRefCount(b);
#	printf("after 3rd assignment refcount =%d[2]\n",i);
#	i:= getLRefCount(b3);
#	printf("assignment refcount =%d[1]\n",i);
#
#	#re-use a bat variable
#	b4:= select(b,"bat B","bat B");
#	print(b4);
#	i:= getLRefCount(b);
#	printf("after 4rd assignment refcount =%d[2]\n",i);
#
#	# remove by assignment
#	b2:= b3;
#	i:= getLRefCount(b);
#	printf("after 5rd assignment refcount =%d[1]\n",i);
#
function user.main():void;              #  0 main:void := user.main() {G}
# a test checking BAT reference counting under various situations 
    b := bat.new(:int,:str);            #  2 b:bat[:int,:str] := CMDBATnew(_3:int, _4:str) {G}
    i := bbp.getLRefCount(b);           #  3 i:int := CMDgetBATlrefcnt(b:bat[:int,:str]) 
    io.printf("refcount =%d[1]\n",i);   #  4 _6:void := IOprintf(_7:str, i:int) 
    bat.insert(b,1,"bat B");            #  5 _8:bat[:int,:str] := BKCinsert_bun(b:bat[:int,:str], _9:int, _10:str) {G}
    io.print(b);                        #  6 _11:void := IOprint_val(b:bat[:int,:str]) 
    i := bbp.getLRefCount(b);           #  7 i:int := CMDgetBATlrefcnt(b:bat[:int,:str]) 
    io.printf("refcount =%d[1]\n",i);   #  8 _12:void := IOprintf(_7:str, i:int) 
#handle an alias, which isn;t used! 
    b2 := b;                            # 10 b2:bat[:int,:str] := b:bat[:int,:str] {G}
    i := bbp.getLRefCount(b);           # 11 i:int := CMDgetBATlrefcnt(b:bat[:int,:str]) 
    io.printf("after assignment refcount =%d[2]\n",i);# 12 _15:void := IOprintf(_16:str, i:int) 
#re-use a bat variable 
    b3 := b;                            # 14 b3:bat[:int,:str] := b:bat[:int,:str] {G}
    cnt := aggr.count(b3);              # 15 cnt:wrd := ALGcount_bat(b3:bat[:int,:str]) 
# forced use 
    i := bbp.getLRefCount(b);           # 17 i:int := CMDgetBATlrefcnt(b:bat[:int,:str]) 
    io.printf("after 2nd assignment refcount =%d[3]\n",i);# 18 _21:void := IOprintf(_22:str, i:int) 
#re-use a bat variable 
    b3 := user.createone();             # 20 b3:bat[:int,:str] := user.createone() {G}
    i := bbp.getLRefCount(b);           # 21 i:int := CMDgetBATlrefcnt(b:bat[:int,:str]) 
    io.printf("after 3rd assignment refcount =%d[2]\n",i);# 22 _24:void := IOprintf(_25:str, i:int) 
    i := bbp.getLRefCount(b3);          # 23 i:int := CMDgetBATlrefcnt(b3:bat[:int,:str]) 
    io.printf("assignment refcount =%d[1]\n",i);# 24 _26:void := IOprintf(_27:str, i:int) 
#re-use a bat variable 
    b4 := algebra.select(b,"bat C","bat C");# 26 b4:bat[:int,:str] := ALGselect(b:bat[:int,:str], _30:str, _30:str) {G}
    io.print(b4);                       # 27 _31:void := IOprint_val(b4:bat[:int,:str]) 
    i := bbp.getLRefCount(b);           # 28 i:int := CMDgetBATlrefcnt(b:bat[:int,:str]) 
    io.printf("after 4rd assignment refcount =%d[2]\n",i);# 29 _32:void := IOprintf(_33:str, i:int) 
# remove by assignment 
    b2 := b3;                           # 31 b2:bat[:int,:str] := b3:bat[:int,:str] {G}
    i := bbp.getLRefCount(b);           # 32 i:int := CMDgetBATlrefcnt(b:bat[:int,:str]) 
    io.printf("after 5rd assignment refcount =%d[1]\n",i);# 33 _35:void := IOprintf(_36:str, i:int) 
    io.printf("call function\n");       # 34 _37:void := IOprintf(_38:str) 
    d := user.steal(b);                 # 35 d:bat[:int,:str] := user.steal(b:bat[:int,:str]) {G}
    i := bbp.getLRefCount(b);           # 36 i:int := CMDgetBATlrefcnt(b:bat[:int,:str]) 
    io.printf("return from function refcount =%d[2]\n",i);# 37 _40:void := IOprintf(_41:str, i:int) 
    io.printf("check self replacement, overrule refcount!\n");# 38 _42:void := IOprintf(_43:str) 
    b := user.steal(b);                 # 39 b:bat[:int,:str] := user.steal(b:bat[:int,:str]) {G}
    i := bbp.getLRefCount(b);           # 40 i:int := CMDgetBATlrefcnt(b:bat[:int,:str]) 
    io.printf("return from function refcount =%d[2]\n",i);# 41 _44:void := IOprintf(_41:str, i:int) 
end main;	# 42  
refcount =1[1]
#-------------------------#
# h	t		  # name
# int	str		  # type
#-------------------------#
[ 1,	  "bat B"	  ]
refcount =2[1]
after assignment refcount =3[2]
after 2nd assignment refcount =4[3]
after 3rd assignment refcount =3[2]
assignment refcount =1[1]
#-----------------#
# h	t	  # name
# int	str	  # type
#-----------------#
after 4rd assignment refcount =3[2]
after 5rd assignment refcount =2[1]
call function
enter function refcount =3[2,3]
local in function refcount =4[3,4]
return from function refcount =3[2]
check self replacement, overrule refcount!
enter function refcount =4[2,3]
local in function refcount =5[3,4]
return from function refcount =3[2]

# 08:01:01 >  
# 08:01:01 >  Done.
# 08:01:01 >  

