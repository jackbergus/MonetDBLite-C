stdout of test 'tst031` in directory 'src/mal` itself:


# 07:58:41 >  
# 07:58:41 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst031.mal </dev/null
# 07:58:41 >  

# MonetDB server v5.5.0, based on kernel v1.23.0
# Serving database 'mTests_src_mal'
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2008 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://gio.ins.cwi.nl:30373/
## testing the void semantics, both replace and delete fail (void != oid)
#b:= bat.new(:void,:int);
#bat.append(b,0);
#bat.append(b,1);
#bat.append(b,2);
#io.print(b);
##k:= 1@0;
##bat.replace(b,k,3);
##io.print(b);
##bat.delete(b,2@0);
##io.print(b);
#
## The oid cases, they should start as a vid column, both replace and delete work
#io.print("oid as a vid column");
#c:= bat.new(:oid,:int);
#bat.insert(c,0@0,0);
#bat.insert(c,1@0,1);
#bat.insert(c,2@0,2);
#io.print(c);
#k:= 1@0;
#bat.replace(c,k,3);
#io.print(c);
#bat.delete(c,2@0);
#io.print(c);
#
## The oid cases using nils should fail on replace /delete
#io.print("inserting nil's in a oid column");
#d:= bat.new(:oid,:int);
#bat.insert(d,nil:oid,0);
#bat.insert(d,nil:oid,1);
#bat.insert(d,nil:oid,2);
#io.print(d);
#k:= 1@0;
#bat.replace(d,k,3);
#io.print(d);
#bat.delete(d,2@0);
#io.print(d);
#
## can we handle a vid column starting differently
#io.print("double oid as a vid column starting at 3,5");
#e:= bat.new(:oid,:oid);
#bat.insert(e,3@0,5@0);
#bat.append(e,6@0);
#io.print(e);
#
## the void,void bat they still consume space
## shouldn't that be avoided or limited to at most 1 pair?
#io.print("void,void bat");
#f:= bat.new(:void,:void);
#bat.insert(f,nil:void,nil:void);
#bat.insert(f,nil:void,nil:void);
#io.print(f);
#
#
function user.main():void;              #  0 main:void := user.main() {G}
# testing the void semantics, both replace and delete fail (void != oid) 
    b := bat.new(:void,:int);           #  2 b:bat[:void,:int] := CMDBATnew(_3:void, _4:int) {G}
    bat.append(b,0);                    #  3 _5:bat[:int,:any] := BKCappend_val_wrap(b:bat[:void,:int], _6:int) {G}
    bat.append(b,1);                    #  4 _7:bat[:int,:any] := BKCappend_val_wrap(b:bat[:void,:int], _8:int) {G}
    bat.append(b,2);                    #  5 _9:bat[:int,:any] := BKCappend_val_wrap(b:bat[:void,:int], _10:int) {G}
    io.print(b);                        #  6 _11:void := IOprint_val(b:bat[:void,:int]) 
#k:= 1@0; 
#bat.replace(b,k,3); 
#io.print(b); 
#bat.delete(b,2@0); 
#io.print(b); 
# The oid cases, they should start as a vid column, both replace and delete work 
    io.print("oid as a vid column");    # 13 _18:void := IOprint_val(_19:str) 
    c := bat.new(:oid,:int);            # 14 c:bat[:oid,:int] := CMDBATnew(_21:oid, _4:int) {G}
    bat.insert(c,0@0,0);                # 15 _22:bat[:oid,:int] := BKCinsert_bun(c:bat[:oid,:int], _23:oid, _6:int) {G}
    bat.insert(c,1@0,1);                # 16 _24:bat[:oid,:int] := BKCinsert_bun(c:bat[:oid,:int], _25:oid, _8:int) {G}
    bat.insert(c,2@0,2);                # 17 _26:bat[:oid,:int] := BKCinsert_bun(c:bat[:oid,:int], _27:oid, _10:int) {G}
    io.print(c);                        # 18 _28:void := IOprint_val(c:bat[:oid,:int]) 
    k := 1@0;                           # 19 k:oid := _25:oid 
    bat.replace(c,k,3);                 # 20 _30:bat[:oid,:int] := BKCreplace_bun(c:bat[:oid,:int], k:oid, _31:int) {G}
    io.print(c);                        # 21 _32:void := IOprint_val(c:bat[:oid,:int]) 
    bat.delete(c,2@0);                  # 22 _33:bat[:oid,:int] := BKCdelete(c:bat[:oid,:int], _27:oid) {G}
    io.print(c);                        # 23 _34:void := IOprint_val(c:bat[:oid,:int]) 
# The oid cases using nils should fail on replace /delete 
    io.print("inserting nil's in a oid column");# 25 _36:void := IOprint_val(_37:str) 
    d := bat.new(:oid,:int);            # 26 d:bat[:oid,:int] := CMDBATnew(_21:oid, _4:int) {G}
    bat.insert(d,nil:oid,0);            # 27 _39:bat[:oid,:int] := BKCinsert_bun(d:bat[:oid,:int], _40:oid, _41:int) {G}
    bat.insert(d,nil:oid,1);            # 28 _42:bat[:oid,:int] := BKCinsert_bun(d:bat[:oid,:int], _40:oid, _43:int) {G}
    bat.insert(d,nil:oid,2);            # 29 _44:bat[:oid,:int] := BKCinsert_bun(d:bat[:oid,:int], _40:oid, _45:int) {G}
    io.print(d);                        # 30 _46:void := IOprint_val(d:bat[:oid,:int]) 
    k := 1@0;                           # 31 k:oid := _25:oid 
    bat.replace(d,k,3);                 # 32 _47:bat[:oid,:int] := BKCreplace_bun(d:bat[:oid,:int], k:oid, _31:int) {G}
    io.print(d);                        # 33 _48:void := IOprint_val(d:bat[:oid,:int]) 
    bat.delete(d,2@0);                  # 34 _49:bat[:oid,:int] := BKCdelete(d:bat[:oid,:int], _27:oid) {G}
    io.print(d);                        # 35 _50:void := IOprint_val(d:bat[:oid,:int]) 
# can we handle a vid column starting differently 
    io.print("double oid as a vid column starting at 3,5");# 37 _52:void := IOprint_val(_53:str) 
    e := bat.new(:oid,:oid);            # 38 e:bat[:oid,:oid] := CMDBATnew(_21:oid, _21:oid) {G}
    bat.insert(e,3@0,5@0);              # 39 _55:bat[:oid,:oid] := BKCinsert_bun(e:bat[:oid,:oid], _56:oid, _57:oid) {G}
    bat.append(e,6@0);                  # 40 _58:bat[:oid,:any] := BKCappend_val_wrap(e:bat[:oid,:oid], _59:oid) {G}
    io.print(e);                        # 41 _60:void := IOprint_val(e:bat[:oid,:oid]) 
# the void,void bat they still consume space 
# shouldn't that be avoided or limited to at most 1 pair? 
    io.print("void,void bat");          # 44 _63:void := IOprint_val(_64:str) 
    f := bat.new(:void,:void);          # 45 f:bat[:void,:void] := CMDBATnew(_3:void, _3:void) {G}
    bat.insert(f,nil:void,nil:void);    # 46 _66:bat[:void,:void] := BKCinsert_bun(f:bat[:void,:void], _67:void, _67:void) {G}
    bat.insert(f,nil:void,nil:void);    # 47 _68:bat[:void,:void] := BKCinsert_bun(f:bat[:void,:void], _67:void, _67:void) {G}
    io.print(f);                        # 48 _69:void := IOprint_val(f:bat[:void,:void]) 
end main;	# 49  
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
[ "oid as a vid column" ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  2	  ]
#-----------------#
# h	tmp_4	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  3	  ]
[ 2@0,	  2	  ]
#-----------------#
# h	tmp_4	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  3	  ]
[ "inserting nil's in a oid column" ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
[ "double oid as a vid column starting at 3,5" ]
#-----------------#
# h	t	  # name
# oid	oid	  # type
#-----------------#
[ 3@0,	  5@0	  ]
[ 4@0,	  6@0	  ]
[ "void,void bat" ]
#-----------------#
# h	t	  # name
# void	void	  # type
#-----------------#
[ nil,	  nil	  ]
[ nil,	  nil	  ]

# 07:58:41 >  
# 07:58:41 >  Done.
# 07:58:41 >  

