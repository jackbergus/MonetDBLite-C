stdout of test 'tst031` in directory 'src/mal` itself:


# 07:58:41 >  
# 07:58:41 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst031.mal </dev/null
# 07:58:41 >  



# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
#b:=new(:void,:int);
#setSequenceBase(b,0@0);
#insert(b,nil,0);
#insert(b,nil,1);
#k:=2@0;
#insert(b,k,2);
#print(b);
#replace(b,k,3);
#print(b);
#delete(b,k);
#print(b);
#
#
function user.main():void;	# 0  (main:void)
# testing the void semantics, both replace and delete fail (void != oid) 	# 1  (_1:str)
    b := bat.new(:void,:int);	# 2 CMDBATnew (b:bat[:void,:int])<-(_3:void)(_4:int)
    bat.append(b,0);	# 3 BKCappend_val_wrap (_5:void)<-(b:bat[:void,:int])(_6:int)
    bat.append(b,1);	# 4 BKCappend_val_wrap (_7:void)<-(b:bat[:void,:int])(_8:int)
    bat.append(b,2);	# 5 BKCappend_val_wrap (_9:void)<-(b:bat[:void,:int])(_10:int)
    io.print(b);	# 6 IOprint_val (_11:void)<-(b:bat[:void,:int])
#k:= 1@0; 	# 7  (_12:str)
#bat.replace(b,k,3); 	# 8  (_13:str)
#io.print(b); 	# 9  (_14:str)
#bat.delete(b,2@0); 	# 10  (_15:str)
#io.print(b); 	# 11  (_14:str)
# The oid cases, they should start as a vid column, both replace and delete work 	# 12  (_16:str)
    io.print("oid as a vid column");	# 13 IOprint_val (_17:void)<-(_18:str)
    c := bat.new(:oid,:int);	# 14 CMDBATnew (c:bat[:oid,:int])<-(_20:oid)(_4:int)
    bat.insert(c,0@0,0);	# 15 BKCinsert_bun (_21:void)<-(c:bat[:oid,:int])(_22:oid)(_6:int)
    bat.insert(c,1@0,1);	# 16 BKCinsert_bun (_23:void)<-(c:bat[:oid,:int])(_24:oid)(_8:int)
    bat.insert(c,2@0,2);	# 17 BKCinsert_bun (_25:void)<-(c:bat[:oid,:int])(_26:oid)(_10:int)
    io.print(c);	# 18 IOprint_val (_27:void)<-(c:bat[:oid,:int])
    k := 1@0;	# 19  (k:oid)<-(_24:oid)
    bat.replace(c,k,3);	# 20 BKCreplace_bun (_29:void)<-(c:bat[:oid,:int])(k:oid)(_30:int)
    io.print(c);	# 21 IOprint_val (_31:void)<-(c:bat[:oid,:int])
    bat.delete(c,2@0);	# 22 BKCdelete (_32:void)<-(c:bat[:oid,:int])(_26:oid)
    io.print(c);	# 23 IOprint_val (_33:void)<-(c:bat[:oid,:int])
# The oid cases using nils should fail on replace /delete 	# 24  (_34:str)
    io.print("inserting nil's in a oid column");	# 25 IOprint_val (_35:void)<-(_36:str)
    d := bat.new(:oid,:int);	# 26 CMDBATnew (d:bat[:oid,:int])<-(_20:oid)(_4:int)
    bat.insert(d,nil:oid,0);	# 27 BKCinsert_bun (_38:void)<-(d:bat[:oid,:int])(_39:oid)(_40:int)
    bat.insert(d,nil:oid,1);	# 28 BKCinsert_bun (_41:void)<-(d:bat[:oid,:int])(_39:oid)(_42:int)
    bat.insert(d,nil:oid,2);	# 29 BKCinsert_bun (_43:void)<-(d:bat[:oid,:int])(_39:oid)(_44:int)
    io.print(d);	# 30 IOprint_val (_45:void)<-(d:bat[:oid,:int])
    k := 1@0;	# 31  (k:oid)<-(_24:oid)
    bat.replace(d,k,3);	# 32 BKCreplace_bun (_46:void)<-(d:bat[:oid,:int])(k:oid)(_30:int)
    io.print(d);	# 33 IOprint_val (_47:void)<-(d:bat[:oid,:int])
    bat.delete(d,2@0);	# 34 BKCdelete (_48:void)<-(d:bat[:oid,:int])(_26:oid)
    io.print(d);	# 35 IOprint_val (_49:void)<-(d:bat[:oid,:int])
# can we handle a vid column starting differently 	# 36  (_50:str)
    io.print("double oid as a vid column starting at 3,5");	# 37 IOprint_val (_51:void)<-(_52:str)
    e := bat.new(:oid,:oid);	# 38 CMDBATnew (e:bat[:oid,:oid])<-(_20:oid)(_20:oid)
    bat.insert(e,3@0,5@0);	# 39 BKCinsert_bun (_54:void)<-(e:bat[:oid,:oid])(_55:oid)(_56:oid)
    bat.append(e,6@0);	# 40 BKCappend_val_wrap (_57:void)<-(e:bat[:oid,:oid])(_58:oid)
    io.print(e);	# 41 IOprint_val (_59:void)<-(e:bat[:oid,:oid])
# the void,void bat they still consume space 	# 42  (_60:str)
# shouldn't that be avoided or limited to at most 1 pair? 	# 43  (_61:str)
    io.print("void,void bat");	# 44 IOprint_val (_62:void)<-(_63:str)
    f := bat.new(:void,:void);	# 45 CMDBATnew (f:bat[:void,:void])<-(_3:void)(_3:void)
    bat.insert(f,nil:void,nil:void);	# 46 BKCinsert_bun (_65:void)<-(f:bat[:void,:void])(_66:void)(_66:void)
    bat.insert(f,nil:void,nil:void);	# 47 BKCinsert_bun (_67:void)<-(f:bat[:void,:void])(_66:void)(_66:void)
    io.print(f);	# 48 IOprint_val (_68:void)<-(f:bat[:void,:void])
end main;	# 49  
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
[ "oid as a vid column" ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  1	  ]
[ 2@0,	  2	  ]
#-----------------#
# h	tmp_4	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  3	  ]
[ 2@0,	  2	  ]
#-----------------#
# h	tmp_4	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  3	  ]
[ "inserting nil's in a oid column" ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
[ "double oid as a vid column starting at 3,5" ]
#-----------------#
# h	t	  # name
# oid	oid	  # type
#-----------------#
[ 3@0,	  5@0	  ]
[ 4@0,	  6@0	  ]
[ "void,void bat" ]
#-----------------#
# h	t	  # name
# void	void	  # type
#-----------------#
[ nil,	  nil	  ]
[ nil,	  nil	  ]

# 07:58:41 >  
# 07:58:41 >  Done.
# 07:58:41 >  

