stdout of test 'tst904` in directory 'src/mal` itself:


# 08:01:36 >  
# 08:01:36 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst904.mal </dev/null
# 08:01:36 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## the multiplex code blocks using CONSTANTS.
#setListing(15);
#b:= new(:lng,:lng);
#i:= -1:lng;
#barrier (v,i):= newRange(0:lng);
#	insert(b,i,i);
#	redo (v,i):= nextElement(1:lng,10:lng);
#exit (v,i);
#
#print(b);
#c:= 1;
#xz:= multiplex.script("+",b,c);
#print(xz);
#
function user.main():void;              #  0 main:void := user.main() {G}
# the multiplex code blocks using CONSTANTS. 
    clients.setListing(15);             #  2 _2:int := CLTsetListing(_3:int) 
    b := bat.new(:lng,:lng);            #  3 b:bat[:lng,:lng] := CMDBATnew(_5:lng, _5:lng) {G}
    i := -1:lng;                        #  4 i:lng := _7:lng 
barrier (v,i):= language.newRange(0:lng);#  5 (v:bit, i:lng) := RNGnewRange_lng(_9:lng) {J8}
    bat.insert(b,i,i);                  #  6 _10:void := BKCinsert_bun(b:bat[:lng,:lng], i:lng, i:lng) 
    redo (v,i):= language.nextElement(1:lng,10:lng);#  7 (v:bit, i:lng) := RNGnextElement_lng(_11:lng, _12:lng) {J6}
exit (v,i);                             #  8 (v:bit, i:lng) 
    io.print(b);                        #  9 _13:void := IOprint_val(b:bat[:lng,:lng]) 
    c := 1;                             # 10 c:int := _15:int 
    _20 := bat.new(nil:lng,nil:lng);    # 11 _20:bat[:lng,:lng] := CMDBATnew(_21:lng, _21:lng) {G}
barrier (_23,_24,_25):= bat.newIterator(b);# 12 (_23:lng, _24:lng, _25:lng) := CHPbunIterator(b:bat[:lng,:lng]) {J19}
    _27 := calc.+(_25,c);               # 13 _27:lng := CALCbinaryADDlngint(_25:lng, c:int) 
    bat.insert(_20,_24,_27);            # 14 _28:void := BKCinsert_bun(_20:bat[:lng,:lng], _24:lng, _27:lng) 
    redo (_23,_24,_25):= bat.hasMoreElements(b);# 15 (_23:lng, _24:lng, _25:lng) := CHPbunHasMoreElements(b:bat[:lng,:lng]) {J13}
catch MALException:str ;                # 16 MALException:str {J18}
    redo (_23,_24,_25):= bat.hasMoreElements(b);# 17 (_23:lng, _24:lng, _25:lng) := CHPbunHasMoreElements(b:bat[:lng,:lng]) {J13}
exit MALException:str ;                 # 18 MALException:str 
exit (_23,_24,_25);                     # 19 (_23:lng, _24:lng, _25:lng) 
    xz:bat[:lng,:lng]  := _20;          # 20 xz:bat[:lng,:lng] := _20:bat[:lng,:lng] {G}
    io.print(xz);                       # 21 _19:void := IOprint_val(xz:bat[:lng,:lng]) 
end main;	# 22  
#-----------------#
# h	tmp_4	  # name
# lng	lng	  # type
#-----------------#
[ 0,	  0	  ]
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 3,	  3	  ]
[ 4,	  4	  ]
[ 5,	  5	  ]
[ 6,	  6	  ]
[ 7,	  7	  ]
[ 8,	  8	  ]
[ 9,	  9	  ]
#-----------------#
# h	tmp_5	  # name
# lng	lng	  # type
#-----------------#
[ 0,	  1	  ]
[ 1,	  2	  ]
[ 2,	  3	  ]
[ 3,	  4	  ]
[ 4,	  5	  ]
[ 5,	  6	  ]
[ 6,	  7	  ]
[ 7,	  8	  ]
[ 8,	  9	  ]
[ 9,	  10	  ]

# 08:01:36 >  
# 08:01:36 >  Done.
# 08:01:36 >  

