stdout of test 'tst904` in directory 'src/mal` itself:


# 08:01:36 >  
# 08:01:36 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst904.mal </dev/null
# 08:01:36 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## the multiplex code blocks using CONSTANTS.
#setListing(15);
#b:= new(:lng,:lng);
#i:= -1:lng;
#barrier (v,i):= newRange(0:lng);
#	insert(b,i,i);
#	redo (v,i):= nextElement(1:lng,10:lng);
#exit (v,i);
#
#print(b);
#c:= 1;
#xz:= multiplex.script("+",b,c);
#print(xz);
#
function user.main():void;	# 0  (main:void)
# the multiplex code blocks using CONSTANTS. 	# 1  (_1:str)
    clients.setListing(15);	# 2 CLTsetListing (_2:int)<-(_3:int)
    b := bat.new(:lng,:lng);	# 3 CMDBATnew (b:bat[:lng,:lng])<-(_5:lng)(_5:lng)
    i := -1:lng;	# 4  (i:lng)<-(_7:lng)
barrier (v,i):= language.newRange(0:lng);	# 5 RNGnewRange_lng (v:bit)(i:lng)<-(_9:lng) jump 8
    bat.insert(b,i,i);	# 6 BKCinsert_bun (_10:void)<-(b:bat[:lng,:lng])(i:lng)(i:lng)
    redo (v,i):= language.nextElement(1:lng,10:lng);	# 7 RNGnextElement_lng (v:bit)(i:lng)<-(_11:lng)(_12:lng) jump 6
exit (v,i);	# 8  (v:bit)(i:lng)
    io.print(b);	# 9 IOprint_val (_13:int)<-(b:bat[:lng,:lng])
    c := 1;	# 10  (c:int)<-(_15:int)
    _19 := bat.new(:lng,:lng);	# 11 CMDBATnew (_19:bat[:lng,:lng])<-(_5:lng)(_5:lng)
barrier (_21,_22,_23):= chopper.newIterator(b);	# 12 CHPbunIterator (_21:lng)(_22:lng)(_23:lng)<-(b:bat[:lng,:lng]) jump 18
    _25 := calc.+(_23,c);	# 13 CALCbinaryADDlngint (_25:lng)<-(_23:lng)(c:int)
    bat.insert(_19,_22,_25);	# 14 BKCinsert_bun (_26:void)<-(_19:bat[:lng,:lng])(_22:lng)(_25:lng)
catch MALexception;	# 15  (MALexception:str) jump 16
exit MALexception;	# 16  (MALexception:str)
    redo (_21,_22,_23):= chopper.hasMoreElements(b);	# 17 CHPbunHasMoreElements (_21:lng)(_22:lng)(_23:lng)<-(b:bat[:lng,:lng]) jump 13
exit (_21,_22,_23);	# 18  (_21:lng)(_22:lng)(_23:lng)
    xz:bat[:lng,:lng]  := _19;	# 19  (xz:bat[:lng,:lng])<-(_19:bat[:lng,:lng])
    io.print(xz);	# 20 IOprint_val (_18:int)<-(xz:bat[:lng,:lng])
end main;	# 21  
#-----------------#
# h	tmp_4	  # name
# lng	lng	  # type
#-----------------#
[ 0,	  0	  ]
[ 1,	  1	  ]
[ 2,	  2	  ]
[ 3,	  3	  ]
[ 4,	  4	  ]
[ 5,	  5	  ]
[ 6,	  6	  ]
[ 7,	  7	  ]
[ 8,	  8	  ]
[ 9,	  9	  ]
#-----------------#
# h	tmp_5	  # name
# lng	lng	  # type
#-----------------#
[ 0,	  1	  ]
[ 1,	  2	  ]
[ 2,	  3	  ]
[ 3,	  4	  ]
[ 4,	  5	  ]
[ 5,	  6	  ]
[ 6,	  7	  ]
[ 7,	  8	  ]
[ 8,	  9	  ]
[ 9,	  10	  ]

# 08:01:36 >  
# 08:01:36 >  Done.
# 08:01:36 >  

