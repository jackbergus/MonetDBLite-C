stdout of test 'tst081` in directory 'src/mal` itself:


# 20:27:08 >  
# 20:27:08 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=31752 --set xrpc_port=49281 --set monet_prompt= --trace --dbname=mTests_src_mal  tst081.mal < /dev/null
# 20:27:08 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
#values:= 10000000;
#sel:=2000000;
#
#skewed := 3000000;
#marg1 :=1000000;
#n:=35;
#s:=1;
#barrier (go,i):= (true,0);
#        barrier ifpart:= s==10;
#                low:int:= mmath.rand();
#                low := low % values;
#                redo ifpart := low <skewed;
#                hgh := low + sel;
#                redo ifpart := hgh >values;
#                io.print(low,hgh);
#                s:=1;
#        exit ifpart;
#        low:int:= mmath.rand();
#        low := low % marg1;
#        hgh := low + sel;
#        redo go := hgh > skewed;
#        io.print(low,hgh);
#        s:=s+1;
#        redo (go,i):= language.nextElement(1,n);
#exit (go,i);
#
#
function user.main():void;	# 0  (main:void)
    values := 10000000;	# 1  (values:int)<-(_2:int)
    sel := 2000000;	# 2  (sel:int)<-(_4:int)
    skewed := 3000000;	# 3  (skewed:int)<-(_6:int)
    marg1 := 1000000;	# 4  (marg1:int)<-(_8:int)
    n := 35;	# 5  (n:int)<-(_10:int)
    s := 1;	# 6  (s:int)<-(_12:int)
barrier (go,i):= (true,0);	# 7  (go:bit)(i:int)<-(_15:bit)(_16:int) jump 24
barrier ifpart := calc.==(s,10);	# 8 CALCcompEQintint (ifpart:bit)<-(s:int)(_18:int) jump 16
    low:int  := mmath.rand();	# 9 MATHrandint (low:int)
    low:int  := calc.%(low,values);	# 10 CALCbinarycheckMODintint (low:int)<-(low:int)(values:int)
    redo ifpart := calc.<(low,skewed);	# 11 CALCcompLTintint (ifpart:bit)<-(low:int)(skewed:int) jump 9
    hgh := calc.+(low,sel);	# 12 CALCbinaryADDintint (hgh:int)<-(low:int)(sel:int)
    redo ifpart := calc.>(hgh,values);	# 13 CALCcompGTintint (ifpart:bit)<-(hgh:int)(values:int) jump 9
    io.print(low,hgh);	# 14 IOprint_val (_21:void)<-(low:int)(hgh:int)
    s := 1;	# 15  (s:int)<-(_12:int)
exit ifpart;	# 16  (ifpart:bit)
    low:int  := mmath.rand();	# 17 MATHrandint (low:int)
    low:int  := calc.%(low,marg1);	# 18 CALCbinarycheckMODintint (low:int)<-(low:int)(marg1:int)
    hgh := calc.+(low,sel);	# 19 CALCbinaryADDintint (hgh:int)<-(low:int)(sel:int)
    redo go := calc.>(hgh,skewed);	# 20 CALCcompGTintint (go:bit)<-(hgh:int)(skewed:int) jump 8
    io.print(low,hgh);	# 21 IOprint_val (_22:void)<-(low:int)(hgh:int)
    s := calc.+(s,1);	# 22 CALCbinaryADDintint (s:int)<-(s:int)(_12:int)
    redo (go,i):= language.nextElement(1,n);	# 23 RNGnextElement_int (go:bit)(i:int)<-(_12:int)(n:int) jump 8
exit (go,i);	# 24  (go:bit)(i:int)
end main;	# 25  
[ 289383, 2289383]
[ 930886, 2930886]
[ 692777, 2692777]
[ 636915, 2636915]
[ 747793, 2747793]
[ 238335, 2238335]
[ 885386, 2885386]
[ 760492, 2760492]
[ 516649, 2516649]
[ 5202362, 7202362]
[ 490027, 2490027]
[ 368690, 2368690]
[ 520059, 2520059]
[ 897763, 2897763]
[ 513926, 2513926]
[ 180540, 2180540]
[ 383426, 2383426]
[ 89172, 2089172]
[ 455736, 2455736]
[ 5005211, 7005211]
[ 595368, 2595368]
[ 702567, 2702567]
[ 956429, 2956429]
[ 465782, 2465782]
[ 21530, 2021530]
[ 722862, 2722862]
[ 665123, 2665123]
[ 174067, 2174067]
[ 703135, 2703135]
[ 5634022, 7634022]
[ 723058, 2723058]
[ 133069, 2133069]
[ 898167, 2898167]
[ 961393, 2961393]
[ 18456, 2018456]
[ 175011, 2175011]
[ 478042, 2478042]
[ 176229, 2176229]

# 20:27:08 >  
# 20:27:08 >  Done.
# 20:27:08 >  

