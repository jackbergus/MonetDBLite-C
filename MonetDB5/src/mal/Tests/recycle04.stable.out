stdout of test 'recycle04` in directory 'src/mal` itself:


# 09:13:42 >  
# 09:13:42 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=32298 --set xrpc_port=45688 --set monet_prompt= --trace  --dbname=mTests_src_mal  recycle04.mal
# 09:13:42 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_mal'
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2008 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:32298/
##test the basics of the recycler
##check retention of function calls
#
#function user.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];
#	b:= bat.new(:oid,:int);
#	bat.insert(b,0@0,0);
#	bat.insert(b,1@0,1);
#	bat.insert(b,2@0,2);
#	bat.insert(b,3@0,3);
#	bat.insert(b,4@0,4);
#	bat.insert(b,5@0,5);
#	bat.insert(b,6@0,6);
#	bat.insert(b,7@0,7);
#	bat.insert(b,8@0,8);
#	bat.insert(b,9@0,9);
#	bat.insert(b,10@0,10);
#	bat.insert(b,11@0,11);
#	return bind:=b;
#end bind;
function user.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];#  0 bind:bat[:oid,:int] := user.bind(s:str, t:str, c:str, i:int) {G}
    b := bat.new(:oid,:int);            #  1 b:bat[:oid,:int] := CMDBATnew(_6:oid, _7:int) {G}
    bat.insert(b,0@0,0);                #  2 _8:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _9:oid, _10:int) {G}
    bat.insert(b,1@0,1);                #  3 _11:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _12:oid, _13:int) {G}
    bat.insert(b,2@0,2);                #  4 _14:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _15:oid, _16:int) {G}
    bat.insert(b,3@0,3);                #  5 _17:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _18:oid, _19:int) {G}
    bat.insert(b,4@0,4);                #  6 _20:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _21:oid, _22:int) {G}
    bat.insert(b,5@0,5);                #  7 _23:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _24:oid, _25:int) {G}
    bat.insert(b,6@0,6);                #  8 _26:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _27:oid, _28:int) {G}
    bat.insert(b,7@0,7);                #  9 _29:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _30:oid, _31:int) {G}
    bat.insert(b,8@0,8);                # 10 _32:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _33:oid, _34:int) {G}
    bat.insert(b,9@0,9);                # 11 _35:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _36:oid, _37:int) {G}
    bat.insert(b,10@0,10);              # 12 _38:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _39:oid, _40:int) {G}
    bat.insert(b,11@0,11);              # 13 _41:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _42:oid, _43:int) {G}
    return bind := b;                   # 14 bind:bat[:oid,:int] := b:bat[:oid,:int] {G}
end bind;                               # 15  
#
#function qry(low:int, hgh:int):bat[:oid,:int];
#	b:= user.bind("schema","table","column",0);
#	s1:= algebra.select(b,low,hgh);
#	return qry:=s1;
#end qry;
function user.qry(low:int,hgh:int):bat[:oid,:int];#  0 qry:bat[:oid,:int] := user.qry(low:int, hgh:int) {G}
    b := user.bind("schema","table","column",0);#  1 b:bat[:oid,:int] := user.bind(_4:str, _5:str, _6:str, _7:int) {G}
    s1 := algebra.select(b,low,hgh);    #  2 s1:bat[:oid,:int] := ALGselect(b:bat[:oid,:int], low:int, hgh:int) {G}
    return qry := s1;                   #  3 qry:bat[:oid,:int] := s1:bat[:oid,:int] {G}
end qry;                                #  4  
#
#function tst();
#	qry(1,10);
#	qry(1,10);
#	qry(1,10);
#end tst;
function user.tst():void;               #  0 tst:void := user.tst() {G}
    user.qry(1,10);                     #  1 _1:bat[:oid,:int] := user.qry(_2:int, _3:int) {G}
    user.qry(1,10);                     #  2 _4:bat[:oid,:int] := user.qry(_2:int, _3:int) {G}
    user.qry(1,10);                     #  3 _5:bat[:oid,:int] := user.qry(_2:int, _3:int) {G}
end tst;                                #  4  
#
#optimizer.recycle("user","qry");
#optimizer.recycle("user","tst");
#mdb.List("user","qry");
#mdb.List("user","tst");
#recycle.setReusePolicy(2);
#user.tst();
#recycle.dump();
#
function user.main():void;              #  0 main:void := user.main() {G}
#test the basics of the recycler 
#check retention of function calls 
    mdb.List("user","qry");             #  3 _8:void := MDBlist3Detail(_4:str, _5:str) 
    mdb.List("user","tst");             #  4 _9:void := MDBlist3Detail(_4:str, _7:str) 
    recycle.setReusePolicy(2);          #  5 _10:void := RECYCLEsetReuse(_11:int) 
    user.tst();                         #  6 _12:void := user.tst() 
    recycle.dump();                     #  7 _13:void := RECYCLEdumpWrap() 
end main;                               #  8  
function user.qry(low:int,hgh:int):bat[:oid,:int];#  0 qry:bat[:oid,:int] := user.qry(low:int, hgh:int) {G}
    recycle.prelude();                  #  1 _9:void := RECYCLEprelude() 
    b := user.bind("schema","table","column",0);#  2 b:bat[:oid,:int] := user.bind(_4:str, _5:str, _6:str, _7:int) {GR}
    s1 := algebra.select(b,low,hgh);    #  3 s1:bat[:oid,:int] := ALGselect(b:bat[:oid,:int], low:int, hgh:int) {GR}
    return qry := s1;                   #  4 qry:bat[:oid,:int] := s1:bat[:oid,:int] {G}
    recycle.epilogue();                 #  5 _10:void := RECYCLEepilogue() 
end qry;                                #  6  {R}
function user.tst():void;               #  0 tst:void := user.tst() {G}
    recycle.prelude();                  #  1 _6:void := RECYCLEprelude() 
    user.qry(1,10);                     #  2 _1:bat[:oid,:int] := user.qry(_2:int, _3:int) {GR}
    user.qry(1,10);                     #  3 _4:bat[:oid,:int] := user.qry(_2:int, _3:int) {GR}
    user.qry(1,10);                     #  4 _5:bat[:oid,:int] := user.qry(_2:int, _3:int) {GR}
    recycle.epilogue();                 #  5 _7:void := RECYCLEepilogue() 
end tst;                                #  6  {R}
#Recycler  catalog
#retain= 1 time =0 sze= 0 alpha= 0.500
#reuse= 2
#rcache= 1 limit= 1000 
#hard stmt = 4000 hard var = 25000 hard mem= 8388608
#recycled = 2 statements = 7 saved time(ms)=     0.20 memory(KB)= 0
#    0 lru=        0 cnt=        0 ticks=         0  rd=         0  wr=         0 function user.recycler():any;
#    1 lru=   432457 cnt=        1 ticks=        53  rd=         0  wr=         0     _1 := user.bind("schema","table","column",0);
#    2 lru=   432500 cnt=        1 ticks=        43  rd=         0  wr=         0     _6 := algebra.select(<tmp_20>,1,10);
#    3 lru=   432508 cnt=        3 ticks=       101  rd=         0  wr=         0     _6 := user.qry(1,10);

# 09:13:42 >  
# 09:13:42 >  Done.
# 09:13:42 >  

