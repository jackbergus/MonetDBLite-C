function pow(i:int,j:int):int;
	z:= i+j;
	io.printf("result %d\n",z);
	return z;
end pow;
function tst(A2:bat[:void,:int],A3:bat[:void,:int]):bat[:void,:int]; 
	io.print(A2);
	resB := bat.new(:void,:int); 
	bat.setSequenceBase(resB,0@0);
	lim:= aggr.count(A2);
	io.printf("count %d\n",lim);
	l:= calc.lng(lim);
barrier (mloop,m):=mal.newRange(0:lng);
	io.printf("loopindex %d\n",m);
        B2 := algebra.fetch(A2,m);       
	io.printf("B2 value %d\n",B2);
        B3 := algebra.fetch(A3,m);       
	io.printf("B3 value %d\n",B3);
        cr := user.pow(B2,B3);
        bat.insert(resB,nil,cr); 
        redo (mloop,m) :=mal.nextElement(1:lng,l);    
catch   MALexception;  
exit    MALexception; 
exit    (mloop,m) ;  
        return resB;    
end tst;   

	b := bat.new(:void,:int);
	bat.setSequenceBase(b,0@0);
	bat.insert(b,nil,1);
	bat.insert(b,nil,2);
	e:= algebra.fetch(b,1:lng);
	io.print(e);
	io.print(b);
	c:= algebra.copy(b);
	z:= user.tst(b,c);
	io.print(z);

