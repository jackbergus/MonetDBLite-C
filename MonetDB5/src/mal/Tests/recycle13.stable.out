stdout of test 'recycle13` in directory 'src/mal` itself:


# 15:18:01 >  
# 15:18:01 >   mserver5 "--config=/export/scratch1/milena/monet.DBG/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/export/scratch1/milena/monet.DBG/lib/MonetDB5:/export/scratch1/milena/monet.DBG/lib/MonetDB5/lib:/export/scratch1/milena/monet.DBG/lib/MonetDB5/bin" --set "gdk_dbfarm=/export/scratch1/milena/monet.DBG/var/MonetDB5/dbfarm" --set "sql_logdir=/export/scratch1/milena/monet.DBG/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=31726 --set xrpc_port=43645 --set monet_prompt= --trace  --dbname=mTests_src_mal  recycle13.mal
# 15:18:01 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_mal', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008- MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://modi.ins.cwi.nl:31726/
function user.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];#  0 bind:bat[:oid,:int] := user.bind(s:str, t:str, c:str, i:int) {G}
    b := bat.new(:oid,:int);            #  1 b:bat[:oid,:int] := CMDBATnew(_6:oid, _7:int) {G}
    bat.insert(b,0@0,0);                #  2 _8:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _9:oid, _10:int) {G}
    bat.insert(b,1@0,1);                #  3 _11:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _12:oid, _13:int) {G}
    bat.insert(b,2@0,2);                #  4 _14:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _15:oid, _16:int) {G}
    bat.insert(b,3@0,3);                #  5 _17:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _18:oid, _19:int) {G}
    bat.insert(b,4@0,4);                #  6 _20:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _21:oid, _22:int) {G}
    bat.insert(b,5@0,5);                #  7 _23:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _24:oid, _25:int) {G}
    bat.insert(b,6@0,6);                #  8 _26:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _27:oid, _28:int) {G}
    bat.insert(b,7@0,7);                #  9 _29:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _30:oid, _31:int) {G}
    bat.insert(b,8@0,8);                # 10 _32:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _33:oid, _34:int) {G}
    bat.insert(b,9@0,9);                # 11 _35:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _36:oid, _37:int) {G}
    bat.insert(b,10@0,10);              # 12 _38:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _39:oid, _40:int) {G}
    bat.insert(b,11@0,11);              # 13 _41:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _42:oid, _43:int) {G}
    return bind := b;                   # 14 bind:bat[:oid,:int] := b:bat[:oid,:int] {G}
end bind;                               # 15  
function user.qry(low:int,hgh:int):void;#  0 qry:void := user.qry(low:int, hgh:int) {G}
    b := user.bind("schema","table","column",0);#  1 b:bat[:oid,:int] := user.bind(_4:str, _5:str, _6:str, _7:int) {G}
    s1 := algebra.select(b,low,hgh);    #  2 s1:bat[:oid,:int] := ALGselect(b:bat[:oid,:int], low:int, hgh:int) {G}
    m0 := algebra.markT(s1,0@0);        #  3 m0:bat[:oid,:oid] := ALGtmark(s1:bat[:oid,:int], _10:oid) {G}
    mr := bat.reverse(m0);              #  4 mr:bat[:oid,:oid] := BKCreverse(m0:bat[:oid,:oid]) {G}
    j := algebra.join(mr,s1);           #  5 j:bat[:oid,:int] := ALGjoin(mr:bat[:oid,:oid], s1:bat[:oid,:int]) {G}
end qry;                                #  6  
function user.qry1(val:int):void;       #  0 qry1:void := user.qry1(val:int) {G}
    b := user.bind("schema","table","column1",0);#  1 b:bat[:oid,:int] := user.bind(_3:str, _4:str, _5:str, _6:int) {G}
    s1 := algebra.select(b,val);        #  2 s1:bat[:oid,:int] := ALGselect1(b:bat[:oid,:int], val:int) {G}
    io.print(s1);                       #  3 _8:void := IOprint_val(s1:bat[:oid,:int]) 
end qry1;                               #  4  
function user.main():void;              #  0 main:void := user.main() {G}
#test the basics of the recycler 
# testing toll-based retention 
#inter-query commonality 
    recycle.setRetainPolicy(3);         #  4 _4:void := RECYCLEsetRetain(_5:int) 
    recycle.setReusePolicy(1);          #  5 _6:void := RECYCLEsetReuse(_7:int) 
    recycle.setCachePolicy(1,5);        #  6 _8:void := RECYCLEsetCache(_7:int, _9:int) 
    user.qry1(2);                       #  7 _15:void := user.qry1(_16:int) 
    user.qry1(5);                       #  8 _17:void := user.qry1(_9:int) 
    user.qry1(7);                       #  9 _18:void := user.qry1(_19:int) 
# selection is not reused: it is added maximum (MAX_INTEREST-Min_INTEREST = 3) number of times 
    recycle.dump();                     # 11 _21:void := RECYCLEdumpWrap() 
    io.print("3 select instances");     # 12 _22:void := IOprint_val(_23:str) 
#the following call does not add the select to RP, its tolls are finished 
    user.qry1(10);                      # 14 _25:void := user.qry1(_26:int) 
    recycle.dump();                     # 15 _27:void := RECYCLEdumpWrap() 
    io.print("still 3 select instances, tolls are finished");# 16 _28:void := IOprint_val(_29:str) 
#new execution can still re-use some of the existing instances in the RP 
    user.qry1(5);                       # 18 _31:void := user.qry1(_9:int) 
    recycle.dump();                     # 19 _32:void := RECYCLEdumpWrap() 
    io.print("reuse of instruction #2 even when tolls are finished");# 20 _33:void := IOprint_val(_34:str) 
#next call evicts all instructions from qry1 returning the tolls to the 
#reused ones 
    user.qry(1,5);                      # 23 _37:void := user.qry(_7:int, _9:int) 
    recycle.dump();                     # 24 _38:void := RECYCLEdumpWrap() 
    io.print("all instructions from qry1 evicted");# 25 _39:void := IOprint_val(_40:str) 
# new call adds the instructions with tolls back to RP 
    user.qry1(10);                      # 27 _42:void := user.qry1(_26:int) 
    recycle.dump();                     # 28 _43:void := RECYCLEdumpWrap() 
    io.print("qry1 reused instructions added again");# 29 _44:void := IOprint_val(_45:str) 
end main;                               # 30  
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 2@0,	  2	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 5@0,	  5	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 7@0,	  7	  ]
#Recycler  catalog
#retain= 3 time =0 alpha= 0.500
#reuse= 1
#rcache= 1 limit= 5 memlimit=0
#hard stmt = 20000 hard var = 100000 hard mem=8388608
#recycled = 2 incache= 4 executed = 72 memory(KB)= 4 PersBat memory=0
#Cache search time= 0(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#        0	889073	3	68	1	1	    _0 := user.bind("schema","table","column1",0,2);
#        1	889017	1	44	1	1	    _6 := algebra.select(<tmp_20>,2,3);
#        2	889059	1	16	1	1	    _8 := algebra.select(<tmp_20>,5,3);
#        3	889090	1	16	1	1	    _10 := algebra.select(<tmp_20>,7,3);
[ "3 select instances" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 10@0,	  10	  ]
#Recycler  catalog
#retain= 3 time =0 alpha= 0.500
#reuse= 1
#rcache= 1 limit= 5 memlimit=0
#hard stmt = 20000 hard var = 100000 hard mem=8388608
#recycled = 3 incache= 4 executed = 82 memory(KB)= 4 PersBat memory=0
#Cache search time= 0(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#        0	889160	4	68	1	1	    _0 := user.bind("schema","table","column1",0,2);
#        1	889017	1	44	1	1	    _6 := algebra.select(<tmp_20>,2,3);
#        2	889059	1	16	1	1	    _8 := algebra.select(<tmp_20>,5,3);
#        3	889090	1	16	1	1	    _10 := algebra.select(<tmp_20>,7,3);
[ "still 3 select instances, tolls are finished" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 5@0,	  5	  ]
#Recycler  catalog
#retain= 3 time =0 alpha= 0.500
#reuse= 1
#rcache= 1 limit= 5 memlimit=0
#hard stmt = 20000 hard var = 100000 hard mem=8388608
#recycled = 5 incache= 4 executed = 92 memory(KB)= 4 PersBat memory=0
#Cache search time= 0(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#        0	889234	5	68	1	1	    _0 := user.bind("schema","table","column1",0,2);
#        1	889017	1	44	1	1	    _6 := algebra.select(<tmp_20>,2,3);
#        2	889235	2	16	1	1	    _8 := algebra.select(<tmp_20>,5,3);
#        3	889090	1	16	1	1	    _10 := algebra.select(<tmp_20>,7,3);
[ "reuse of instruction #2 even when tolls are finished" ]
#Recycler  catalog
#retain= 3 time =0 alpha= 0.500
#reuse= 1
#rcache= 1 limit= 5 memlimit=0
#hard stmt = 20000 hard var = 100000 hard mem=8388608
#recycled = 5 incache= 5 executed = 119 memory(KB)= 5 PersBat memory=0
#Cache search time= 0(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#        0	889327	1	35	1	1	    _6 := user.bind("schema","table","column",0,2);
#        1	889354	1	27	1	1	    _8 := algebra.select(<tmp_24>,1,5,3);
#        2	889381	1	27	1	1	    _10 := algebra.markT(<tmp_25>,0@0,4);
#        3	889397	1	16	1	1	    _13 := bat.reverse(<tmp_26>,5);
#        4	889463	1	66	1	1	    _14 := algebra.join(<~tmp_26>,<tmp_25>,6);
[ "all instructions from qry1 evicted" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 10@0,	  10	  ]
#Recycler  catalog
#retain= 3 time =0 alpha= 0.500
#reuse= 1
#rcache= 1 limit= 5 memlimit=0
#hard stmt = 20000 hard var = 100000 hard mem=8388608
#recycled = 5 incache= 5 executed = 143 memory(KB)= 5 PersBat memory=0
#Cache search time= 0(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#        0	889327	1	35	1	1	    _6 := user.bind("schema","table","column",0,2);
#        1	889354	1	27	1	1	    _8 := algebra.select(<tmp_24>,1,5,3);
#        2	889381	1	27	1	1	    _10 := algebra.markT(<tmp_25>,0@0,4);
#        3	889568	1	41	1	1	    _13 := user.bind("schema","table","column1",0,2);
#        4	889584	1	16	1	1	    _15 := algebra.select(<tmp_20>,10,3);
[ "qry1 reused instructions added again" ]

# 15:18:01 >  
# 15:18:01 >  Done.
# 15:18:01 >  

