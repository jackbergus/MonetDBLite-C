stdout of test 'recycle05` in directory 'src/mal` itself:


# 15:54:58 >  
# 15:54:58 >   mserver5 "--config=/export/scratch1/milena/monet.DBG/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/export/scratch1/milena/monet.DBG/lib/MonetDB5:/export/scratch1/milena/monet.DBG/lib/MonetDB5/lib:/export/scratch1/milena/monet.DBG/lib/MonetDB5/bin" --set "gdk_dbfarm=/export/scratch1/milena/monet.DBG/var/MonetDB5/dbfarm" --set "sql_logdir=/export/scratch1/milena/monet.DBG/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=34583 --set xrpc_port=49067 --set monet_prompt= --trace  --dbname=mTests_src_mal  recycle05.mal
# 15:54:58 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_mal'
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2008 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://modi.ins.cwi.nl:34583/
## Test of LRU cache policy in limited memory (12 RU)
#
#function user.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];
#b:= bat.new(:oid,:int);
#barrier (go,i):= language.newRange(0:int);
#	bat.append(b,i);
#	redo (go,i):= language.nextElement(1:int,1000:int);
#exit (go,i);
#return bind:=b;
#end bind;
function user.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];#  0 bind:bat[:oid,:int] := user.bind(s:str, t:str, c:str, i:int) {G}
    b := bat.new(:oid,:int);            #  1 b:bat[:oid,:int] := CMDBATnew(_6:oid, _7:int) {G}
barrier (go,i) := language.newRange(0:int);#  2 (go:bit, i:int) := RNGnewRange_int(_9:int) {J5}
    bat.append(b,i);                    #  3 _10:bat[:int,:any] := BKCappend_val_wrap(b:bat[:oid,:int], i:int) {G}
    redo (go,i) := language.nextElement(1:int,1000:int);#  4 (go:bit, i:int) := RNGnextElement_int(_11:int, _12:int) {J3}
exit (go,i);                            #  5 (go:bit, i:int) 
    return bind := b;                   #  6 bind:bat[:oid,:int] := b:bat[:oid,:int] {G}
end bind;                               #  7  
#
#function qry(low:int, hgh:int);
#	b:= user.bind("schema","table","column",0);
#	s1:= algebra.select(b,low,hgh);
#	m0:= algebra.markT(s1, 0@0);
#	mr:= bat.reverse(m0);
#end qry;
function user.qry(low:int,hgh:int):void;#  0 qry:void := user.qry(low:int, hgh:int) {G}
    b := user.bind("schema","table","column",0);#  1 b:bat[:oid,:int] := user.bind(_4:str, _5:str, _6:str, _7:int) {G}
    s1 := algebra.select(b,low,hgh);    #  2 s1:bat[:oid,:int] := ALGselect(b:bat[:oid,:int], low:int, hgh:int) {G}
    m0 := algebra.markT(s1,0@0);        #  3 m0:bat[:oid,:oid] := ALGtmark(s1:bat[:oid,:int], _10:oid) {G}
    mr := bat.reverse(m0);              #  4 mr:bat[:oid,:oid] := BKCreverse(m0:bat[:oid,:oid]) {G}
end qry;                                #  5  
#
#recycle.setRetainPolicy(1);
#recycle.setReusePolicy(1);
#recycle.setCachePolicy(1,10,12);
#optimizer.recycle("user","qry");
#
#io.print("start");
#qry(100,120);
#qry(700,710);
#recycle.dump();
## The next query should evict the oldest leaves (#3 mark an #4 reverse)
#qry(400,700);
#recycle.dump();
#
#
#
function user.main():void;              #  0 main:void := user.main() {G}
# Test of LRU cache policy in limited memory (12 RU) 
    recycle.setRetainPolicy(1);         #  2 _2:void := RECYCLEsetRetain(_3:int) 
    recycle.setReusePolicy(1);          #  3 _4:void := RECYCLEsetReuse(_3:int) 
    recycle.setCachePolicy(1,10,12);    #  4 _5:void := RECYCLEsetCache(_3:int, _6:int, _7:int) 
    io.print("start");                  #  5 _11:void := IOprint_val(_12:str) 
    user.qry(100,120);                  #  6 _13:void := user.qry(_14:int, _15:int) 
    user.qry(700,710);                  #  7 _16:void := user.qry(_17:int, _18:int) 
    recycle.dump();                     #  8 _19:void := RECYCLEdumpWrap() 
# The next query should evict the oldest leaves (#3 mark an #4 reverse) 
    user.qry(400,700);                  # 10 _21:void := user.qry(_22:int, _17:int) 
    recycle.dump();                     # 11 _23:void := RECYCLEdumpWrap() 
end main;                               # 12  
[ "start" ]
#Recycler  catalog
#retain= 1 time =0 sze= 0 alpha= 0.500
#reuse= 1
#rcache= 1 limit= 10 memlimit=12
#hard stmt = 20000 hard var = 100000 hard mem= 8388608
#recycled = 1 incache= 7 executed = 13 saved time(ms)=     0.80 memory(KB)= 10
#Cache search time= 0(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#    1	729954	2	799	1	4	    _1 := user.bind("schema","table","column",0);
#    2	729919	1	43	4	1	    _6 := algebra.select(<tmp_20>,100,120);
#    3	729941	1	21	1	1	    _9 := algebra.markT(<tmp_21>,0@0);
#    4	729946	1	4	1	1	    _11 := bat.reverse(<tmp_22>);
#    5	729971	1	17	4	1	    _12 := algebra.select(<tmp_20>,700,710);
#    6	729983	1	11	1	1	    _15 := algebra.markT(<tmp_23>,0@0);
#    7	729988	1	5	1	1	    _16 := bat.reverse(<tmp_24>);
#Recycler  catalog
#retain= 1 time =0 sze= 0 alpha= 0.500
#reuse= 1
#rcache= 1 limit= 10 memlimit=12
#hard stmt = 20000 hard var = 100000 hard mem= 8388608
#recycled = 2 incache= 8 executed = 22 saved time(ms)=     1.60 memory(KB)= 12
#Cache search time= 1(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#    1	730063	3	799	1	4	    _1 := user.bind("schema","table","column",0);
#    2	729919	1	43	4	1	    _6 := algebra.select(<tmp_20>,100,120);
#    3	729971	1	17	4	1	    _10 := algebra.select(<tmp_20>,700,710);
#    4	729983	1	11	1	1	    _13 := algebra.markT(<tmp_23>,0@0);
#    5	729988	1	5	1	1	    _14 := bat.reverse(<tmp_24>);
#    6	730097	1	34	4	2	    _15 := algebra.select(<tmp_20>,400,700);
#    7	730121	1	24	2	1	    _17 := algebra.markT(<tmp_25>,0@0);
#    8	730136	1	15	1	1	    _18 := bat.reverse(<tmp_26>);

# 15:54:58 >  
# 15:54:58 >  Done.
# 15:54:58 >  

