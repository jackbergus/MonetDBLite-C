stdout of test 'tst2000` in directory 'src/mal` itself:


# 09:20:16 >  
# 09:20:16 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=34633 --set sql_port=45575 --set xquery_port=56057 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst2000.mal </dev/null
# 09:20:16 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
##The 2000 serie  is focussed on parallelism
##we start with a non-parallel version
#
#function clkticks(n:int):void;
#barrier	b:= n>0;
#	io.printf("clock tick\n");
#	alarm.sleep(2);
#	n:= n-1;
#redo	b:= n>0;
#exit	b;
#end clkticks;
function user.clkticks(n:int):void;	# 0  (clkticks:void)<-(n:int)
barrier b := calc.>(n,0);	# 1 CALCcompGTintint (b:bit)<-(n:int)($3:int) jump 6
    io.printf("clock tick\n");	# 2 IOprint_str ($4:int)<-($5:str)
    alarm.sleep(2);	# 3 ALARMsleep ($6:void)<-($7:int)
    n := calc.-(n,1);	# 4 CALCbinarySUBintint (n:int)<-(n:int)($8:int)
    redo b := calc.>(n,0);	# 5 CALCcompGTintint (b:bit)<-(n:int)($3:int) jump 2
exit b;	# 6  (b:bit)
end clkticks;	# 7  
#
## trace all instructions executed with timing information
#mdb.setTimer(true);
#mdb.setTrace(true);
#user.clkticks(2);
#
function user.main():int;	# 0  (main:int)
#The 2000 serie  is focussed on parallelism 	# 1  ($2:str)
#we start with a non-parallel version 	# 2  ($4:str)
# trace all instructions executed with timing information 	# 3  ($6:str)
    mdb.setTimer(true);	# 4 MDBsetTimer ($7:void)<-($8:bit)
    mdb.setTrace(true);	# 5 MDBsetTrace ($9:void)<-($8:bit)
    user.clkticks(2);	# 6  ($10:void)<-($11:int)
end main;	# 7  
#     3 usec#    mdb.setTimer($8=true)
#    mdb.setTrace($8=true)
#barrier b := calc.>(n=2, $3=0)
clock tick
#    io.printf($5="clock tick\\n")
#    alarm.sleep($7=2)
#    n := calc.-(n=1, $8=1)
#    redo b := calc.>(n=1, $3=0)
clock tick
#    io.printf($5="clock tick\\n")
#    alarm.sleep($7=2)
#    n := calc.-(n=0, $8=1)
#    redo b := calc.>(n=0, $3=0)
#    user.clkticks($11=2)

# 09:20:20 >  
# 09:20:20 >  Done.
# 09:20:20 >  

