stdout of test 'tst007` in directory 'src/mal` itself:


# 07:58:34 >  
# 07:58:34 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst007.mal </dev/null
# 07:58:34 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## A collection of forloops, which should not execute
#barrier	H := batoperatie;
#	Tail:= bat.fetch(b,H);
#	#body
#redo 	H;
#exit	H;
#
#
## de andere loops zijn eenvoudig. 'goto' is altijd beperkt tot
## 'randen' van het blok. (redo L, leave L)
## een while loop
#barrier L := bat.hasMoreElements(b);
#	H:= bat.head(b);
#	v:= bat.nextElement(b);
#redo	L;
#exit	L;
#	
##een do-while loop
#	entry:= true;
#barrier M:= entry_or_exittest;
#	entry:= false;
#	# rest
#redo	M;
#exit	M;
#
##een for-loop 
#	i:= 1;
#barrier N:= i<10;
#	#body
#	i:=i+1;
#redo	N;
#exit	N;
#
#
## de if-then en if-then-else constructies
#
#barrier	FT:= booleanexpr;
#	# thenpart
#exit	FT;
#
#barrier	FTE:= booleanexpr;
#	# thenpart
#exit	FTE;
#barrier FS:= not(FTE);
#	#elsepart
#exit	FS;
#
#
#
!ERROR: TypeException: user.main[3]: 'algebra.fetch' undefined in: Tail:any := algebra.fetch(b:any, H:any)
!ERROR: TypeException: user.main[10]: 'chop.hasMoreElements' undefined in: L:any := chop.hasMoreElements(b:any)
!ERROR: TypeException: user.main[11]: 'chop.head' undefined in: H:any := chop.head(b:any)
!ERROR: TypeException: user.main[12]: 'chop.nextElement' undefined in: v:any := chop.nextElement(b:any)
!ERROR: TypeException: user.main[36]: 'batcalc.not' undefined in: FS:any := batcalc.not(FTE:any)
!ERROR: TypeException: user.main[2]: barrier 'H' should be of type bit, str or number
!ERROR: TypeException: user.main[10]: barrier 'L' should be of type bit, str or number
!ERROR: TypeException: user.main[17]: barrier 'M' should be of type bit, str or number
!ERROR: TypeException: user.main[30]: barrier 'FT' should be of type bit, str or number
!ERROR: TypeException: user.main[33]: barrier 'FTE' should be of type bit, str or number
!ERROR: TypeException: user.main[36]: barrier 'FS' should be of type bit, str or number
!ERROR: TypeException: user.main[2]: 'batoperatie' may not be used before being initialized
!ERROR: TypeException: user.main[3]: 'b' may not be used before being initialized
!ERROR: TypeException: user.main[10]: 'b' may not be used before being initialized
!ERROR: TypeException: user.main[11]: 'b' may not be used before being initialized
!ERROR: TypeException: user.main[12]: 'b' may not be used before being initialized
!ERROR: TypeException: user.main[17]: 'entry_or_exittest' may not be used before being initialized
!ERROR: TypeException: user.main[30]: 'booleanexpr' may not be used before being initialized
!ERROR: TypeException: user.main[33]: 'booleanexpr' may not be used before being initialized
function user.main():void;	# 0  (main:void)
# A collection of forloops, which should not execute 	# 1  (_2:str)
barrier H := batoperatie;	# 2  (H:any)<-(batoperatie:any) jump 6
    Tail := algebra.fetch(b,H);	# 3  unknown (Tail:any)<-(b:any)(H:any)
#body 	# 4  (_8:str)
    redo H;	# 5  (H:any) jump 3
exit H;	# 6  (H:any)
# de andere loops zijn eenvoudig. 'goto' is altijd beperkt tot 	# 7  (_10:str)
# 'randen' van het blok. (redo L, leave L) 	# 8  (_12:str)
# een while loop 	# 9  (_14:str)
barrier L := chop.hasMoreElements(b);	# 10  unknown (L:any)<-(b:any) jump 14
    H := chop.head(b);	# 11  unknown (H:any)<-(b:any)
    v := chop.nextElement(b);	# 12  unknown (v:any)<-(b:any)
    redo L;	# 13  (L:any) jump 11
exit L;	# 14  (L:any)
#een do-while loop 	# 15  (_12:str)
    entry := true;	# 16  (entry:bit)<-(_14:bit)
barrier M := entry_or_exittest;	# 17  (M:any)<-(entry_or_exittest:any) jump 21
    entry := false;	# 18  (entry:bit)<-(_17:bit)
# rest 	# 19  (_18:str)
    redo M;	# 20  (M:any) jump 18
exit M;	# 21  (M:any)
#een for-loop  	# 22  (_19:str)
    i := 1;	# 23  (i:int)<-(_21:int)
barrier N := calc.<(i,10);	# 24 CALCcompLTintint (N:bit)<-(i:int)(_23:int) jump 28
#body 	# 25  (_6:str)
    i := calc.+(i,1);	# 26 CALCbinaryADDintint (i:int)<-(i:int)(_21:int)
    redo N;	# 27  (N:bit) jump 25
exit N;	# 28  (N:bit)
# de if-then en if-then-else constructies 	# 29  ($34:str)
barrier FT := booleanexpr;	# 30  (FT:any)<-(booleanexpr:any) jump 32
# thenpart 	# 31  ($38:str)
exit FT;	# 32  (FT:any)
barrier FTE := booleanexpr;	# 33  (FTE:any)<-(booleanexpr:any) jump 35
# thenpart 	# 34  ($38:str)
exit FTE;	# 35  (FTE:any)
barrier FS := batcalc.not(FTE);	# 36  unknown (FS:any)<-(FTE:any) jump 38
#elsepart 	# 37  (_43:str)
exit FS;	# 38  (FS:any)
end main;	# 39  

# 07:58:34 >  
# 07:58:34 >  Done.
# 07:58:34 >  

