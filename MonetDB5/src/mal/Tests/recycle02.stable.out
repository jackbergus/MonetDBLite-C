stdout of test 'recycle02` in directory 'src/mal` itself:


# 12:49:07 >  
# 12:49:07 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=33469 --set xrpc_port=48324 --set monet_prompt= --trace  --dbname=mTests_src_mal  recycle02.mal
# 12:49:07 >  

# MonetDB server v5.5.0, based on kernel v1.23.0
# Serving database 'mTests_src_mal'
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2008 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://gio.ins.cwi.nl:33469/
##test the basics of the recycler
## re-use joins
#
#function user.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];
#	b:= bat.new(:oid,:int);
#	bat.insert(b,0@0,0);
#	bat.insert(b,1@0,1);
#	bat.insert(b,2@0,2);
#	bat.insert(b,3@0,3);
#	bat.insert(b,4@0,4);
#	bat.insert(b,5@0,5);
#	bat.insert(b,6@0,6);
#	bat.insert(b,7@0,7);
#	bat.insert(b,8@0,8);
#	bat.insert(b,9@0,9);
#	bat.insert(b,10@0,10);
#	bat.insert(b,11@0,11);
#	return bind:=b;
#end bind;
function user.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];#  0 bind:bat[:oid,:int] := user.bind(s:str, t:str, c:str, i:int) {G}
    b := bat.new(:oid,:int);            #  1 b:bat[:oid,:int] := CMDBATnew(_6:oid, _7:int) {G}
    bat.insert(b,0@0,0);                #  2 _8:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _9:oid, _10:int) {G}
    bat.insert(b,1@0,1);                #  3 _11:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _12:oid, _13:int) {G}
    bat.insert(b,2@0,2);                #  4 _14:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _15:oid, _16:int) {G}
    bat.insert(b,3@0,3);                #  5 _17:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _18:oid, _19:int) {G}
    bat.insert(b,4@0,4);                #  6 _20:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _21:oid, _22:int) {G}
    bat.insert(b,5@0,5);                #  7 _23:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _24:oid, _25:int) {G}
    bat.insert(b,6@0,6);                #  8 _26:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _27:oid, _28:int) {G}
    bat.insert(b,7@0,7);                #  9 _29:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _30:oid, _31:int) {G}
    bat.insert(b,8@0,8);                # 10 _32:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _33:oid, _34:int) {G}
    bat.insert(b,9@0,9);                # 11 _35:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _36:oid, _37:int) {G}
    bat.insert(b,10@0,10);              # 12 _38:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _39:oid, _40:int) {G}
    bat.insert(b,11@0,11);              # 13 _41:bat[:oid,:int] := BKCinsert_bun(b:bat[:oid,:int], _42:oid, _43:int) {G}
    return bind := b;                   # 14 bind:bat[:oid,:int] := b:bat[:oid,:int] {G}
end bind;	# 15  
#
#function qry(low:int, hgh:int);
#	b:= user.bind("schema","table","column",0);
#	s1:= algebra.select(b,low,hgh);
#	m0:= algebra.markT(b, 0@0);
#	mr:= bat.reverse(m0);
#	j:= algebra.join(mr,s1);
#	io.print(j);
#end qry;
function user.qry(low:int,hgh:int):void;#  0 qry:void := user.qry(low:int, hgh:int) {G}
    b := user.bind("schema","table","column",0);#  1 b:bat[:oid,:int] := user.bind(_4:str, _5:str, _6:str, _7:int) {G}
    s1 := algebra.select(b,low,hgh);    #  2 s1:bat[:oid,:int] := ALGselect(b:bat[:oid,:int], low:int, hgh:int) {G}
    m0 := algebra.markT(s1,0@0);        #  3 m0:bat[:oid,:oid] := ALGtmark(s1:bat[:oid,:int], _10:oid) {G}
    mr := bat.reverse(m0);              #  4 mr:bat[:oid,:oid] := BKCreverse(m0:bat[:oid,:oid]) {G}
    j := algebra.join(mr,s1);           #  5 j:bat[:oid,:int] := ALGjoin(mr:bat[:oid,:oid], s1:bat[:oid,:int]) {G}
    io.print(j);                        #  6 _13:void := IOprint_val(j:bat[:oid,:int]) 
end qry;	# 7  
#
#recycle.setRetainPolicy(1);
#recycle.setReusePolicy(1);
#optimizer.recycle("user","qry");
#io.print("start");
#qry(1,10);
#io.print("zoom in");
#qry(1,5);
#io.print("next step");
#qry(2,3);
#io.print("last");
#qry(1,11);
#recycle.dump();
#
function user.main():void;              #  0 main:void := user.main() {G}
#test the basics of the recycler 
# re-use joins temporal constrainted 
    recycle.setRetainPolicy(2,2);       #  3 _3:void := RECYCLEsetRetain(_4:int, _4:int) 
    recycle.setReusePolicy(1);          #  4 _5:void := RECYCLEsetReuse(_6:int) 
    io.print("start");                  #  5 _10:void := IOprint_val(_11:str) 
    user.qry(1,10);                     #  6 _12:void := user.qry(_6:int, _13:int) 
    io.print("zoom in");                #  7 _14:void := IOprint_val(_15:str) 
    user.qry(1,5);                      #  8 _16:void := user.qry(_6:int, _17:int) 
    io.print("next step");              #  9 _18:void := IOprint_val(_19:str) 
    user.qry(2,3);                      # 10 _20:void := user.qry(_4:int, _21:int) 
    io.print("last");                   # 11 _22:void := IOprint_val(_23:str) 
    user.qry(1,11);                     # 12 _24:void := user.qry(_6:int, _25:int) 
    recycle.dump();                     # 13 _26:void := RECYCLEdumpWrap() 
end main;	# 14  
[ "start" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
[ 2@0,	  3	  ]
[ 3@0,	  4	  ]
[ 4@0,	  5	  ]
[ 5@0,	  6	  ]
[ 6@0,	  7	  ]
[ 7@0,	  8	  ]
[ 8@0,	  9	  ]
[ 9@0,	  10	  ]
[ "zoom in" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
[ 2@0,	  3	  ]
[ 3@0,	  4	  ]
[ 4@0,	  5	  ]
[ "next step" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  2	  ]
[ 1@0,	  3	  ]
[ "last" ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
[ 2@0,	  3	  ]
[ 3@0,	  4	  ]
[ 4@0,	  5	  ]
[ 5@0,	  6	  ]
[ 6@0,	  7	  ]
[ 7@0,	  8	  ]
[ 8@0,	  9	  ]
[ 9@0,	  10	  ]
[ 10@0,	  11	  ]
#Recycler  catalog
#retain= 2 time =20 sze= 0 alpha= 0.500
#reuse= 1
#rcache= 0
#   0 lru= 0 cnt=   1 ticks=  80  vol=    0     _0 := user.bind("schema","table","column",0);
#   1 lru= 0 cnt=   4 ticks=  55  vol=    0     _5 := algebra.select(<tmp_20>,1,10);
#   2 lru= 0 cnt=   1 ticks=  43  vol=    0     _8 := algebra.markT(<tmp_20>,0@0);
#   3 lru= 0 cnt=   1 ticks=  84  vol=    0     _10 := algebra.join(<~tmp_23>,<tmp_21>);
#   4 lru= 0 cnt=   1 ticks=  31  vol=    0     _12 := algebra.join(<~tmp_23>,<tmp_22>);
#   5 lru= 0 cnt=   1 ticks=  53  vol=    0     _14 := algebra.join(<~tmp_23>,<tmp_24>);
#   6 lru= 0 cnt=   1 ticks=  32  vol=    0     _16 := algebra.join(<~tmp_23>,<tmp_26>);

# 12:49:07 >  
# 12:49:07 >  Done.
# 12:49:07 >  

