stdout of test 'tst905` in directory 'src/mal` itself:


# 08:01:37 >  
# 08:01:37 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst905.mal </dev/null
# 08:01:37 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## the multiplex code blocks.
#
#b:= new(:lng,:lng);
#barrier (v,i):= newRange(0:lng);
#	insert(b,i,i);
#	redo (v,i):= nextElement(1:lng,10:lng);
#exit (v,i);
#
function user.main():void;              #  0 main:void := user.main() {G}
# the multiplex code blocks. 
    b := bat.new(:lng,:lng);            #  2 b:bat[:lng,:lng] := CMDBATnew(_3:lng, _3:lng) {G}
barrier (v,i):= language.newRange(0:lng);#  3 (v:bit, i:lng) := RNGnewRange_lng(_6:lng) {J6}
    bat.insert(b,i,i);                  #  4 _7:bat[:lng,:lng] := BKCinsert_bun(b:bat[:lng,:lng], i:lng, i:lng) {G}
    redo (v,i):= language.nextElement(1:lng,10:lng);#  5 (v:bit, i:lng) := RNGnextElement_lng(_8:lng, _9:lng) {J4}
exit (v,i);                             #  6 (v:bit, i:lng) 
    c := algebra.copy(b);               #  7 c:bat[:lng,:lng] := ALGcopy(b:bat[:lng,:lng]) {G}
    _15 := bat.new(nil:lng,nil:lng);    #  8 _15:bat[:lng,:lng] := CMDBATnew(_16:lng, _16:lng) {G}
barrier (_18,_19,_20):= bat.newIterator(b);#  9 (_18:lng, _19:lng, _20:lng) := CHPbunIterator(b:bat[:lng,:lng]) {J14}
    _22 := algebra.find(c,_19);         # 10 _22:lng := ALGfind(c:bat[:lng,:lng], _19:lng) 
    _24 := calc.+(_20,_22);             # 11 _24:lng := CALCbinaryADDlnglng(_20:lng, _22:lng) 
    bat.insert(_15,_19,_24);            # 12 _25:bat[:lng,:lng] := BKCinsert_bun(_15:bat[:lng,:lng], _19:lng, _24:lng) {G}
    redo (_18,_19,_20):= bat.hasMoreElements(b);# 13 (_18:lng, _19:lng, _20:lng) := CHPbunHasMoreElements(b:bat[:lng,:lng]) {J10}
exit (_18,_19,_20);                     # 14 (_18:lng, _19:lng, _20:lng) 
    x:bat[:lng,:lng]  := _15;           # 15 x:bat[:lng,:lng] := _15:bat[:lng,:lng] {G}
    io.print(x);                        # 16 _14:void := IOprint_val(x:bat[:lng,:lng]) 
end main;                               # 17  
#-----------------#
# h	tmp_6	  # name
# lng	lng	  # type
#-----------------#
[ 0,	  0	  ]
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  6	  ]
[ 4,	  8	  ]
[ 5,	  10	  ]
[ 6,	  12	  ]
[ 7,	  14	  ]
[ 8,	  16	  ]
[ 9,	  18	  ]

# 08:01:37 >  
# 08:01:37 >  Done.
# 08:01:37 >  

