stdout of test 'tst026` in directory 'src/mal` itself:


# 12:49:31 >  
# 12:49:31 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=39517 --set xrpc_port=41696 --set monet_prompt= --trace --dbname=mTests_src_mal  tst026.mal
# 12:49:31 >  

# MonetDB server v5.3.0, based on kernel v1.21.0
# Serving database 'mTests_src_mal'
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2007 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:34102/


function user.foo():void;               #  0 foo:void := user.foo() {G}
    b := bat.new(:oid,:int);            #  1 b:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    cnt := 0:lng;                       #  2 cnt:lng := _5:lng 
barrier d := true;                      #  3 d:bit := _7:bit {J11}
    f := 1;                             #  4 f:int := _9:int 
    cnt := aggr.count(b);               #  5 cnt:lng := ALGcount_bat(b:bat[:oid,:int]) 
    redo d := false;                    #  6 d:bit := _10:bit {J4}
barrier e := true;                      #  7 e:bit := _7:bit {J9}
    g := 1;                             #  8 g:int := _9:int 
exit e;                                 #  9 e:bit 
    io.print(g);                        # 10 _13:void := IOprint_val(g:int) 
exit d;                                 # 11 d:bit 
    cnt := aggr.count(b);               # 12 cnt:lng := ALGcount_bat(b:bat[:oid,:int]) 
    id := calc.oid(cnt);                # 13 id:oid := CALClng2oid(cnt:lng) 
    io.print(f);                        # 14 _15:void := IOprint_val(f:int) 
    io.print(g);                        # 15 _16:void := IOprint_val(g:int) 
end foo;	# 16  

function user.main():void;              #  0 main:void := user.main() 
    user.foo();                         #  1 _1:void := user.foo() 
end main;	# 2  
[ 1 ]
[ 1 ]
[ 1 ]

# 08:57:31 >  
# 08:57:31 >  Done.
# 08:57:31 >  

