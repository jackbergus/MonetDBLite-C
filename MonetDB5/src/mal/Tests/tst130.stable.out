stdout of test 'tst130` in directory 'src/mal` itself:


# 22:38:31 >  
# 22:38:31 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=31072 --set xrpc_port=47187 --set monet_prompt= --trace --dbname=mTests_src_mal  tst130.mal
# 22:38:31 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
## testing batcalc isnull versions
#
#bi:= bat.new(:int,:int);
#bat.insert(bi,1,2);
#bat.insert(bi,1,nil:int);
#zi:= batcalc.isnil(bi);
#io.print(zi);
#
#bb:= bat.new(:int,:bit);
#bat.insert(bb,2,true);
#bat.insert(bb,2,nil:bit);
#bat.insert(bb,2,false);
#zb:= batcalc.isnil(bb);
#io.print(zb);
#
#bf:= bat.new(:int,:flt);
#bat.insert(bf,3,2.0);
#bat.insert(bf,3,nil:flt);
#fi:= batcalc.isnil(bf);
#io.print(fi);
#
#bs:= bat.new(:int,:str);
#bat.insert(bs,4,"hello");
#bat.insert(bs,4,nil:str);
#bat.insert(bs,4,"");
#zs:= batcalc.isnil(bs);
#io.print(zs);
#
#bo:= bat.new(:int,:oid);
#bat.insert(bo,5,0@0);
#bat.insert(bo,5,nil:oid);
#fo:= batcalc.isnil(bo);
#io.print(fo);
#
#bc:= bat.new(:int,:chr);
#bat.insert(bc,6,'a');
#bat.insert(bc,6,nil:chr);
#fc:= batcalc.isnil(bc);
#io.print(fc);
#
function user.main():void;              #  0 main:void := user.main() {G}
# testing batcalc isnull versions 
    bi := bat.new(:int,:int);           #  2 bi:bat[:int,:int] := CMDBATnew(_3:int, _3:int) {G}
    bat.insert(bi,1,2);                 #  3 _4:void := BKCinsert_bun(bi:bat[:int,:int], _5:int, _6:int) 
    bat.insert(bi,1,nil:int);           #  4 _7:void := BKCinsert_bun(bi:bat[:int,:int], _5:int, _8:int) 
    zi := batcalc.isnil(bi);            #  5 zi:bat[:int,:bit] := CMDunaryISNIL(bi:bat[:int,:int]) {G}
    io.print(zi);                       #  6 _10:void := IOprint_val(zi:bat[:int,:bit]) 
    bb := bat.new(:int,:bit);           #  7 bb:bat[:int,:bit] := CMDBATnew(_3:int, _12:bit) {G}
    bat.insert(bb,2,true);              #  8 _13:void := BKCinsert_bun(bb:bat[:int,:bit], _6:int, _14:bit) 
    bat.insert(bb,2,nil:bit);           #  9 _15:void := BKCinsert_bun(bb:bat[:int,:bit], _6:int, _16:bit) 
    bat.insert(bb,2,false);             # 10 _17:void := BKCinsert_bun(bb:bat[:int,:bit], _6:int, _18:bit) 
    zb := batcalc.isnil(bb);            # 11 zb:bat[:int,:bit] := CMDunaryISNIL(bb:bat[:int,:bit]) {G}
    io.print(zb);                       # 12 _20:void := IOprint_val(zb:bat[:int,:bit]) 
    bf := bat.new(:int,:flt);           # 13 bf:bat[:int,:flt] := CMDBATnew(_3:int, _22:flt) {G}
    bat.insert(bf,3,2);                 # 14 _23:void := BKCinsert_bun(bf:bat[:int,:flt], _24:int, _25:flt) 
    bat.insert(bf,3,nil:flt);           # 15 _26:void := BKCinsert_bun(bf:bat[:int,:flt], _24:int, _27:flt) 
    fi := batcalc.isnil(bf);            # 16 fi:bat[:int,:bit] := CMDunaryISNIL(bf:bat[:int,:flt]) {G}
    io.print(fi);                       # 17 _29:void := IOprint_val(fi:bat[:int,:bit]) 
    bs := bat.new(:int,:str);           # 18 bs:bat[:int,:str] := CMDBATnew(_3:int, _31:str) {G}
    bat.insert(bs,4,"hello");           # 19 _32:void := BKCinsert_bun(bs:bat[:int,:str], _33:int, _34:str) 
    bat.insert(bs,4,nil:str);           # 20 _35:void := BKCinsert_bun(bs:bat[:int,:str], _33:int, _36:str) 
    bat.insert(bs,4,"");                # 21 _37:void := BKCinsert_bun(bs:bat[:int,:str], _33:int, _38:str) 
    zs := batcalc.isnil(bs);            # 22 zs:bat[:int,:bit] := CMDunaryISNIL(bs:bat[:int,:str]) {G}
    io.print(zs);                       # 23 _40:void := IOprint_val(zs:bat[:int,:bit]) 
    bo := bat.new(:int,:oid);           # 24 bo:bat[:int,:oid] := CMDBATnew(_3:int, _42:oid) {G}
    bat.insert(bo,5,0@0);               # 25 _43:void := BKCinsert_bun(bo:bat[:int,:oid], _44:int, _45:oid) 
    bat.insert(bo,5,nil:oid);           # 26 _46:void := BKCinsert_bun(bo:bat[:int,:oid], _44:int, _47:oid) 
    fo := batcalc.isnil(bo);            # 27 fo:bat[:int,:bit] := CMDunaryISNIL(bo:bat[:int,:oid]) {G}
    io.print(fo);                       # 28 _49:void := IOprint_val(fo:bat[:int,:bit]) 
    bc := bat.new(:int,:chr);           # 29 bc:bat[:int,:chr] := CMDBATnew(_3:int, _51:chr) {G}
    bat.insert(bc,6,'a');               # 30 _52:void := BKCinsert_bun(bc:bat[:int,:chr], _53:int, _54:chr) 
    bat.insert(bc,6,nil:chr);           # 31 _55:void := BKCinsert_bun(bc:bat[:int,:chr], _53:int, _56:chr) 
    fc := batcalc.isnil(bc);            # 32 fc:bat[:int,:chr] := CMDunaryISNIL(bc:bat[:int,:chr]) {G}
    io.print(fc);                       # 33 _58:void := IOprint_val(fc:bat[:int,:chr]) 
end main;	# 34  
#-----------------#
# h	t	  # name
# int	bit	  # type
#-----------------#
[ 1,	  false	  ]
[ 1,	  true	  ]
#-----------------#
# h	t	  # name
# int	bit	  # type
#-----------------#
[ 2,	  false	  ]
[ 2,	  true	  ]
[ 2,	  false	  ]
#-----------------#
# h	t	  # name
# int	bit	  # type
#-----------------#
[ 3,	  false	  ]
[ 3,	  true	  ]
#-----------------#
# h	t	  # name
# int	bit	  # type
#-----------------#
[ 4,	  false	  ]
[ 4,	  true	  ]
[ 4,	  false	  ]
#-----------------#
# h	t	  # name
# int	bit	  # type
#-----------------#
[ 5,	  false	  ]
[ 5,	  true	  ]
#-----------------#
# h	t	  # name
# int	bit	  # type
#-----------------#
[ 6,	  false	  ]
[ 6,	  true	  ]

# 22:38:31 >  
# 22:38:31 >  Done.
# 22:38:31 >  

