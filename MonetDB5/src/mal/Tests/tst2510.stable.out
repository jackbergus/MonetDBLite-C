stdout of test 'tst2510` in directory 'src/mal` itself:


# 08:01:07 >  
# 08:01:07 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst2510.mal </dev/null
# 08:01:07 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_mal', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2008 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:33085/
factory user.tryme():bit;               #  0 tryme:bit := user.tryme() {G}
    b := bat.new(:oid,:int);            #  1 b:bat[:oid,:int] := CMDBATnew(_2:oid, _3:int) {G}
    bat.setWriteMode(b);                #  2 _4:bat[:oid,:int] := BKCsetWriteMode(b:bat[:oid,:int]) {G}
barrier always := true;                 #  3 always:bit := _6:bit {J6}
    yield tryme := always;              #  4 tryme:bit := always:bit 
    redo always;                        #  5 always:bit {J4}
exit always;                            #  6 always:bit 
#catch MALException:str; 
#print("exception"); 
#exit MALException; 
    return tryme := false;              # 10 tryme:bit := _10:bit 
end tryme;                              # 11  
function user.main():void;              #  0 main:void := user.main() 
# A exception in a factory should terminate it  
    user.tryme();                       #  2 _2:bit := user.tryme() 
# shouldn;t hang when you forget the exception 
end main;	# 4  

# 08:58:58 >  
# 08:58:58 >  Done.
# 08:58:58 >  

