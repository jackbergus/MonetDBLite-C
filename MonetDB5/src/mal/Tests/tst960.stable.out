stdout of test 'tst960` in directory 'src/mal` itself:


# 23:37:05 >  
# 23:37:05 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=40158 --set sql_port=57521 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst960.mal </dev/null
# 23:37:05 >  

# Monet Database Server V4.7.1
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## the chunk mechanism
#
#S:= new(:void,:str);
#setSequenceBase(S,0:oid);
#insert(S,nil,"hello");
#insert(S,nil,"brave");
#insert(S,nil,"new");
#insert(S,nil,"world");
#print(S);
#
#L:= batstr.length(S);
#print(L);
#L:= batstr.bytes(S);
#print(L);
#
#B:= batstr.==(S,"hello");
#print(B);
#
#B:= batstr.match(S,"hello");
#print(B);
#
#U:= batstr.toUpper(S);
#print(U);
#
#l:= batstr.toLower(U);
#print(l);
#
#trim:= batstr.trim(S); 
#print(trim);
#ltrim:= batstr.ltrim(S); 
#print(ltrim);
#rtrim:= batstr.rtrim(S); 
#print(rtrim);
#
#srch:= batstr.search(S,S); 
#io.print(srch);
#plus:= batcalc.+(S,S); 
#io.print(plus);
#
function user.main():void;              #  0 main:void {G}
# the chunk mechanism 
    S := bat.new(:oid,:str);            #  2 S:bat[:oid,:str] := CMDBATnew(_3:oid, _4:str) {G}
    bat.append(S,"hello");              #  3 _5:void := BKCappend_val_wrap(S:bat[:oid,:str], _6:str) 
    bat.append(S,"brave");              #  4 _7:void := BKCappend_val_wrap(S:bat[:oid,:str], _8:str) 
    bat.append(S,"new");                #  5 _9:void := BKCappend_val_wrap(S:bat[:oid,:str], _10:str) 
    bat.append(S,"world");              #  6 _11:void := BKCappend_val_wrap(S:bat[:oid,:str], _12:str) 
    io.print(S);                        #  7 _13:void := IOprint_val(S:bat[:oid,:str]) 
    L := batstr.length(S);              #  8 L:bat[:oid,:int] := STRbatLength(S:bat[:oid,:str]) {G}
    io.print(L);                        #  9 _15:void := IOprint_val(L:bat[:oid,:int]) 
    L := batstr.nbytes(S);              # 10 L:bat[:oid,:int] := STRbatBytes(S:bat[:oid,:str]) {G}
    io.print(L);                        # 11 _16:void := IOprint_val(L:bat[:oid,:int]) 
    B := batcalc.==(S,"hello");         # 12 B:bat[:oid,:bit] := STRbatEqualCst(S:bat[:oid,:str], _6:str) {G}
    io.print(B);                        # 13 _18:void := IOprint_val(B:bat[:oid,:bit]) 
    C := batstr.like_uselect(S,"hello");# 14 C:bat[:oid,:oid] := STRbatlike_uselect2(S:bat[:oid,:str], _6:str) {G}
    io.print(C);                        # 15 _20:void := IOprint_val(C:bat[:oid,:oid]) 
    U := batstr.toUpper(S);             # 16 U:bat[:oid,:str] := STRbatUpper(S:bat[:oid,:str]) {G}
    io.print(U);                        # 17 _22:void := IOprint_val(U:bat[:oid,:str]) 
    l := batstr.toLower(U);             # 18 l:bat[:oid,:str] := STRbatLower(U:bat[:oid,:str]) {G}
    io.print(l);                        # 19 _24:void := IOprint_val(l:bat[:oid,:str]) 
    trim := batstr.trim(S);             # 20 trim:bat[:oid,:str] := STRbatStrip(S:bat[:oid,:str]) {G}
    io.print(trim);                     # 21 _26:void := IOprint_val(trim:bat[:oid,:str]) 
    ltrim := batstr.ltrim(S);           # 22 ltrim:bat[:oid,:str] := STRbatLtrim(S:bat[:oid,:str]) {G}
    io.print(ltrim);                    # 23 _28:void := IOprint_val(ltrim:bat[:oid,:str]) 
    rtrim := batstr.rtrim(S);           # 24 rtrim:bat[:oid,:str] := STRbatRtrim(S:bat[:oid,:str]) {G}
    io.print(rtrim);                    # 25 _30:void := IOprint_val(rtrim:bat[:oid,:str]) 
    io.print("Start searches");         # 26 _31:void := IOprint_val(_32:str) 
    srch := batstr.search(S,"hello");   # 27 srch:bat[:oid,:int] := STRbatstrSearchcst(S:bat[:oid,:str], _6:str) {G}
    io.print(srch);                     # 28 _34:void := IOprint_val(srch:bat[:oid,:int]) 
    srch := batstr.search(S,S);         # 29 srch:bat[:oid,:int] := STRbatstrSearch(S:bat[:oid,:str], S:bat[:oid,:str]) {G}
    io.print(srch);                     # 30 _35:void := IOprint_val(srch:bat[:oid,:int]) 
    plus := batcalc.+(S,S);             # 31 plus:bat[:oid,:str] := STRbatConcat(S:bat[:oid,:str], S:bat[:oid,:str]) {G}
    io.print(plus);                     # 32 _37:void := IOprint_val(plus:bat[:oid,:str]) 
end main;	# 33  
#-------------------------#
# h	tmp_13		  # name
# void	str		  # type
#-------------------------#
[ 0@0,	  "hello"	  ]
[ 1@0,	  "brave"	  ]
[ 2@0,	  "new"		  ]
[ 3@0,	  "world"	  ]
#-----------------#
# h	tmp_14	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  5	  ]
[ 1@0,	  5	  ]
[ 2@0,	  3	  ]
[ 3@0,	  5	  ]
#-----------------#
# h	tmp_15	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  5	  ]
[ 1@0,	  5	  ]
[ 2@0,	  3	  ]
[ 3@0,	  5	  ]
#-----------------#
# h	tmp_14	  # name
# void	bit	  # type
#-----------------#
[ 0@0,	  true	  ]
[ 1@0,	  false	  ]
[ 2@0,	  false	  ]
[ 3@0,	  false	  ]
#-----------------#
# h	tmp_16	  # name
# oid	bit	  # type
#-----------------#
[ 0@0,	  nil	  ]
#-------------------------#
# h	tmp_14		  # name
# void	str		  # type
#-------------------------#
[ 0@0,	  "HELLO"	  ]
[ 1@0,	  "BRAVE"	  ]
[ 2@0,	  "NEW"		  ]
[ 3@0,	  "WORLD"	  ]
#-------------------------#
# h	tmp_17		  # name
# void	str		  # type
#-------------------------#
[ 0@0,	  "hello"	  ]
[ 1@0,	  "brave"	  ]
[ 2@0,	  "new"		  ]
[ 3@0,	  "world"	  ]
#-------------------------#
# h	tmp_18		  # name
# void	str		  # type
#-------------------------#
[ 0@0,	  "hello"	  ]
[ 1@0,	  "brave"	  ]
[ 2@0,	  "new"		  ]
[ 3@0,	  "world"	  ]
#-------------------------#
# h	tmp_19		  # name
# void	str		  # type
#-------------------------#
[ 0@0,	  "hello"	  ]
[ 1@0,	  "brave"	  ]
[ 2@0,	  "new"		  ]
[ 3@0,	  "world"	  ]
#-------------------------#
# h	tmp_20		  # name
# void	str		  # type
#-------------------------#
[ 0@0,	  "hello"	  ]
[ 1@0,	  "brave"	  ]
[ 2@0,	  "new"		  ]
[ 3@0,	  "world"	  ]
[ "Start searches" ]
#-----------------#
# h	tmp_21	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  -1	  ]
[ 2@0,	  -1	  ]
[ 3@0,	  -1	  ]
#-----------------#
# h	tmp_22	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  0	  ]
[ 1@0,	  0	  ]
[ 2@0,	  0	  ]
[ 3@0,	  0	  ]
#-------------------------#
# h	tmp_22		  # name
# void	str		  # type
#-------------------------#
[ 0@0,	  "hellohello"	  ]
[ 1@0,	  "bravebrave"	  ]
[ 2@0,	  "newnew"	  ]
[ 3@0,	  "worldworld"	  ]

# 23:37:05 >  
# 23:37:05 >  Done.
# 23:37:05 >  

