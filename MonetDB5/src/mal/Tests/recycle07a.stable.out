stdout of test 'recycle07a` in directory 'src/mal` itself:


# 15:54:59 >  
# 15:54:59 >   mserver5 "--config=/export/scratch1/milena/monet.DBG/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/export/scratch1/milena/monet.DBG/lib/MonetDB5:/export/scratch1/milena/monet.DBG/lib/MonetDB5/lib:/export/scratch1/milena/monet.DBG/lib/MonetDB5/bin" --set "gdk_dbfarm=/export/scratch1/milena/monet.DBG/var/MonetDB5/dbfarm" --set "sql_logdir=/export/scratch1/milena/monet.DBG/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=34583 --set xrpc_port=49067 --set monet_prompt= --trace  --dbname=mTests_src_mal  recycle07a.mal
# 15:54:59 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_mal'
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2008 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://modi.ins.cwi.nl:34583/
## Test of CREDIT cache policy in limited cache (7 lines, 1 is always taken by fake 0)
## Evicts the leaf instruction with smallest credit= cnt * cost
## The recent, non reused instructions are protected from eviction
#
#function user.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];
#b:= bat.new(:oid,:int);
#barrier (go,i):= language.newRange(0:int);
#	bat.append(b,i);
#	redo (go,i):= language.nextElement(1:int,1000:int);
#exit (go,i);
#return bind:=b;
#end bind;
function user.bind(s:str,t:str,c:str,i:int):bat[:oid,:int];#  0 bind:bat[:oid,:int] := user.bind(s:str, t:str, c:str, i:int) {G}
    b := bat.new(:oid,:int);            #  1 b:bat[:oid,:int] := CMDBATnew(_6:oid, _7:int) {G}
barrier (go,i):= language.newRange(0:int);#  2 (go:bit, i:int) := RNGnewRange_int(_9:int) {J5}
    bat.append(b,i);                    #  3 _10:void := BKCappend_val_wrap(b:bat[:oid,:int], i:int) 
    redo (go,i):= language.nextElement(1:int,1000:int);#  4 (go:bit, i:int) := RNGnextElement_int(_11:int, _12:int) {J3}
exit (go,i);                            #  5 (go:bit, i:int) 
    return bind := b;                   #  6 bind:bat[:oid,:int] := b:bat[:oid,:int] {G}
end bind;                               #  7  
#
#function qry(low:int, hgh:int);
#	b:= user.bind("schema","table","column",0);
#	s1:= algebra.select(b,low,hgh);
#	m0:= algebra.markT(s1, 0@0);
#end qry;
function user.qry(low:int,hgh:int):void;#  0 qry:void := user.qry(low:int, hgh:int) {G}
    b := user.bind("schema","table","column",0);#  1 b:bat[:oid,:int] := user.bind(_4:str, _5:str, _6:str, _7:int) {G}
    s1 := algebra.select(b,low,hgh);    #  2 s1:bat[:oid,:int] := ALGselect(b:bat[:oid,:int], low:int, hgh:int) {G}
    m0 := algebra.markT(s1,0@0);        #  3 m0:bat[:oid,:oid] := ALGtmark(s1:bat[:oid,:int], _10:oid) {G}
end qry;                                #  4  
#
#recycle.setRetainPolicy(1);
#recycle.setReusePolicy(1);
#recycle.setCachePolicy(2,7);
#optimizer.recycle("user","qry");
#
#io.print("start");
#qry(100,250);
#qry(100,250);
#qry(700,710);
#recycle.dump();
## The next query should evict markT leaf ( #3). The other leaf markT (#5) is cheaper,
## but fresh and not reused(cnt=1), thus protected from eviciton.
#qry(400,700);
#recycle.dump();
#
function user.main():void;              #  0 main:void := user.main() {G}
# Test of CREDIT cache policy in limited cache (7 lines, 1 is always taken by fake 0) 
# Evicts the leaf instruction with smallest credit= cnt * cost 
# The recent, non reused instructions are protected from eviction 
    recycle.setRetainPolicy(1);         #  4 _4:void := RECYCLEsetRetain(_5:int) 
    recycle.setReusePolicy(1);          #  5 _6:void := RECYCLEsetReuse(_5:int) 
    recycle.setCachePolicy(2,7);        #  6 _7:void := RECYCLEsetCache(_8:int, _9:int) 
    io.print("start");                  #  7 _13:void := IOprint_val(_14:str) 
    user.qry(100,250);                  #  8 _15:void := user.qry(_16:int, _17:int) 
    user.qry(100,250);                  #  9 _18:void := user.qry(_16:int, _17:int) 
    user.qry(700,710);                  # 10 _19:void := user.qry(_20:int, _21:int) 
    recycle.dump();                     # 11 _22:void := RECYCLEdumpWrap() 
# The next query should evict markT leaf ( #3). The other leaf markT (#5) is cheaper, 
# but fresh and not reused(cnt=1), thus protected from eviciton. 
    user.qry(400,700);                  # 14 _25:void := user.qry(_26:int, _20:int) 
    recycle.dump();                     # 15 _27:void := RECYCLEdumpWrap() 
end main;                               # 16  
[ "start" ]
#Recycler  catalog
#retain= 1 time =0 sze= 0 alpha= 0.500
#reuse= 1
#rcache= 2 limit= 7 memlimit=0
#hard stmt = 20000 hard var = 100000 hard mem= 8388608
#recycled = 4 incache= 5 executed = 15 saved time(ms)=     1.64 memory(KB)= 8
#Cache search time= 1(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#    1	128341	3	784	1	4	    _1 := user.bind("schema","table","column",0);
#    2	128337	2	53	4	1	    _6 := algebra.select(<tmp_20>,100,250);
#    3	128338	2	18	1	1	    _9 := algebra.markT(<tmp_21>,0@0);
#    4	128359	1	17	4	1	    _11 := algebra.select(<tmp_20>,700,710);
#    5	128371	1	12	1	1	    _14 := algebra.markT(<tmp_23>,0@0);
#Recycler  catalog
#retain= 1 time =0 sze= 0 alpha= 0.500
#reuse= 1
#rcache= 2 limit= 7 memlimit=0
#hard stmt = 20000 hard var = 100000 hard mem= 8388608
#recycled = 5 incache= 6 executed = 24 saved time(ms)=     2.42 memory(KB)= 10
#Cache search time= 1(usec)
# CL	   lru		cnt	 ticks	 rd	 wr	 Instr
#    1	128450	4	784	1	4	    _1 := user.bind("schema","table","column",0);
#    2	128337	2	53	4	1	    _6 := algebra.select(<tmp_20>,100,250);
#    3	128359	1	17	4	1	    _10 := algebra.select(<tmp_20>,700,710);
#    4	128371	1	12	1	1	    _13 := algebra.markT(<tmp_23>,0@0);
#    5	128484	1	35	4	2	    _14 := algebra.select(<tmp_20>,400,700);
#    6	128508	1	23	2	1	    _16 := algebra.markT(<tmp_25>,0@0);

# 15:54:59 >  
# 15:54:59 >  Done.
# 15:54:59 >  

