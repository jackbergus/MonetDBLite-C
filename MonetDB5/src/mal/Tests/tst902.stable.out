stdout of test 'tst902` in directory 'src/mal` itself:


# 08:01:33 >  
# 08:01:33 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst902.mal </dev/null
# 08:01:33 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## what is the overhead of MAL in multiplex situations
## using a BATloop !! This is 40x slower as the V4.3 multiplex implementation
#b:= new(:lng,:lng);
#barrier (k,v):= newRange(0:lng);
#	insert(b,v,v);
#	redo (k,v):= nextElement(1:lng,10:lng);
#exit (k,v);
#
#
#c:= copy(b);
#
#d:= new(:lng,:lng);
#barrier (w,h,t):= newIterator(b);
#	B1:= find(b,h);
#	B2:= find(c,h);
#	t:= B1+B2;
#	insert(d,h,t);
#	redo (w,h,t):= hasMoreElements(b);
#catch 	GDKerror;
#exit	GDKerror;
#exit w;
#print(d);
#
function user.main():void;              #  0 main:void := user.main() {G}
# what is the overhead of MAL in multiplex situations 
# using a BATloop !! This is 40x slower as the V4.3 multiplex implementation 
    b := bat.new(:lng,:lng);            #  3 b:bat[:lng,:lng] := CMDBATnew(_4:lng, _4:lng) {G}
barrier (k,v):= language.newRange(0:lng);#  4 (k:bit, v:lng) := RNGnewRange_lng(_7:lng) {J7}
    bat.insert(b,v,v);                  #  5 _8:void := BKCinsert_bun(b:bat[:lng,:lng], v:lng, v:lng) 
    redo (k,v):= language.nextElement(1:lng,10:lng);#  6 (k:bit, v:lng) := RNGnextElement_lng(_9:lng, _10:lng) {J5}
exit (k,v);                             #  7 (k:bit, v:lng) 
    c := algebra.copy(b);               #  8 c:bat[:lng,:lng] := ALGcopy(b:bat[:lng,:lng]) {G}
    d := bat.new(:lng,:lng);            #  9 d:bat[:lng,:lng] := CMDBATnew(_4:lng, _4:lng) {G}
barrier (w,h,t):= bat.newIterator(b);   # 10 (w:lng, h:lng, t:lng) := CHPbunIterator(b:bat[:lng,:lng]) {J18}
    B1 := algebra.find(b,h);            # 11 B1:lng := ALGfind(b:bat[:lng,:lng], h:lng) 
    B2 := algebra.find(c,h);            # 12 B2:lng := ALGfind(c:bat[:lng,:lng], h:lng) 
    t := calc.+(B1,B2);                 # 13 t:lng := CALCbinaryADDlnglng(B1:lng, B2:lng) 
    bat.insert(d,h,t);                  # 14 _18:void := BKCinsert_bun(d:bat[:lng,:lng], h:lng, t:lng) 
    redo (w,h,t):= bat.hasMoreElements(b);# 15 (w:lng, h:lng, t:lng) := CHPbunHasMoreElements(b:bat[:lng,:lng]) {J11}
catch GDKerror:str ;                    # 16 GDKerror:str {J17}
exit GDKerror:str ;                     # 17 GDKerror:str 
exit w;                                 # 18 w:lng 
    io.print(d);                        # 19 _20:void := IOprint_val(d:bat[:lng,:lng]) 
end main;	# 20  
#-----------------#
# h	tmp_6	  # name
# lng	lng	  # type
#-----------------#
[ 0,	  0	  ]
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  6	  ]
[ 4,	  8	  ]
[ 5,	  10	  ]
[ 6,	  12	  ]
[ 7,	  14	  ]
[ 8,	  16	  ]
[ 9,	  18	  ]

# 08:01:33 >  
# 08:01:33 >  Done.
# 08:01:33 >  

