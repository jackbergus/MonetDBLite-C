stdout of test 'tst902` in directory 'src/mal` itself:


# 08:01:33 >  
# 08:01:33 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst902.mal </dev/null
# 08:01:33 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## what is the overhead of MAL in multiplex situations
## using a BATloop !! This is 40x slower as the V4.3 multiplex implementation
#b:= new(:lng,:lng);
#barrier (k,v):= newRange(0:lng);
#	insert(b,v,v);
#	redo (k,v):= nextElement(1:lng,10:lng);
#exit (k,v);
#
#
#c:= copy(b);
#
#d:= new(:lng,:lng);
#barrier (w,h,t):= newIterator(b);
#	B1:= find(b,h);
#	B2:= find(c,h);
#	t:= B1+B2;
#	insert(d,h,t);
#	redo (w,h,t):= hasMoreElements(b);
#catch 	GDKerror;
#exit	GDKerror;
#exit w;
#print(d);
#
function user.main():int;	# 0  (main:int)
# what is the overhead of MAL in multiplex situations 	# 1  (_2:str)
# using a BATloop !! This is 40x slower as the V4.3 multiplex implementation 	# 2  (_4:str)
    b := bat.new(:lng,:lng);	# 3 CMDBATnew (b:bat[:lng,:lng])<-(_6:lng)(_6:lng)
barrier (k,v):= mal.newRange(0:lng);	# 4 RNGnewRange_lng (k:bit)(v:lng)<-(_9:lng) jump 7
    bat.insert(b,v,v);	# 5 BKCinsert_bun (_10:bat[:lng,:lng])<-(b:bat[:lng,:lng])(v:lng)(v:lng)
    redo (k,v):= mal.nextElement(1:lng,10:lng);	# 6 RNGnextElement_lng (k:bit)(v:lng)<-(_11:lng)(_12:lng) jump 5
exit (k,v);	# 7  (k:bit)(v:lng)
    c := algebra.copy(b);	# 8 ALGcopy (c:bat[:lng,:lng])<-(b:bat[:lng,:lng])
    d := bat.new(:lng,:lng);	# 9 CMDBATnew (d:bat[:lng,:lng])<-(_15:lng)(_15:lng)
barrier (w,h,t):= chopper.newIterator(b);	# 10 CHPbunIterator (w:lng)(h:lng)(t:lng)<-(b:bat[:lng,:lng]) jump 18
    B1 := algebra.find(b,h);	# 11 ALGfind (B1:lng)<-(b:bat[:lng,:lng])(h:lng)
    B2 := algebra.find(c,h);	# 12 ALGfind (B2:lng)<-(c:bat[:lng,:lng])(h:lng)
    t := calc.+(B1,B2);	# 13 CALCbinaryADDlnglng (t:lng)<-(B1:lng)(B2:lng)
    bat.insert(d,h,t);	# 14 BKCinsert_bun (_21:bat[:lng,:lng])<-(d:bat[:lng,:lng])(h:lng)(t:lng)
    redo (w,h,t):= chopper.hasMoreElements(b);	# 15 CHPbunHasMoreElements (w:lng)(h:lng)(t:lng)<-(b:bat[:lng,:lng]) jump 11
catch GDKerror;	# 16  (GDKerror:any) jump 17
exit GDKerror;	# 17  (GDKerror:any)
exit w;	# 18  (w:lng)
    io.print(d);	# 19 IOprint_val (_23:int)<-(d:bat[:lng,:lng])
end main;	# 20  
#-----------------#
# h	tmp_6	  # name
# lng	lng	  # type
#-----------------#
[ 0,	  0	  ]
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  6	  ]
[ 4,	  8	  ]
[ 5,	  10	  ]
[ 6,	  12	  ]
[ 7,	  14	  ]
[ 8,	  16	  ]
[ 9,	  18	  ]

# 08:01:33 >  
# 08:01:33 >  Done.
# 08:01:33 >  

