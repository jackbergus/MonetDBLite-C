stdout of test 'tst050` in directory 'src/mal` itself:


# 07:58:46 >  
# 07:58:46 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst050.mal </dev/null
# 07:58:46 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## Variables names may be tagged with a type upfront.
## They may be initialized with a lexical constant using
## either their stored type syntax or with a string literal
#
#s:str := "hello";
#i:sht := 1:sht;
#b:bit   := true;
#z:bat[:int,:int]:= new(:int,:int);
#
## type resolver should complain on the rest
#j:sht := 1:lng;
#k:lng := 1:sht;
#y:bat[:str,:int]:= new(:int,:int);
#f:flt := "wrong";
#
!TypeException:user.main[9]:type mismatch sht := lng

!TypeException:user.main[10]:type mismatch lng := sht

!TypeException:user.main[11]:'bat.new' undefined in: y:bat[:str,:int] := bat.new(_11:int, _11:int)

!TypeException:user.main[12]:type mismatch flt := str
function user.main():void;              #  0 main:void := user.main() {G}
# Variables names may be tagged with a type upfront. 
# They may be initialized with a lexical constant using 
# either their stored type syntax or with a string literal 
    s:str  := "hello";                  #  4 s:str := _5:str {G}
    i:sht  := 1:sht;                    #  5 i:sht := _7:sht 
    b:bit  := true;                     #  6 b:bit := _9:bit 
    z:bat[:int,:int]  := bat.new(:int,:int);#  7 z:bat[:int,:int] := CMDBATnew(_11:int, _11:int) {G}
# type resolver should complain on the rest 
    j:sht  := 1:lng;                    #  9 j:sht := _14:lng {U}
    k:lng  := 1:sht;                    # 10 k:lng := _7:sht {U}
    y:bat[:str,:int]  := bat.new(:int,:int);# 11 y:bat[:str,:int] := bat.new(_11:int, _11:int) {U}
    f:flt  := "wrong";                  # 12 f:flt := _18:str {U}
end main;	# 13  

# 07:58:46 >  
# 07:58:46 >  Done.
# 07:58:46 >  

