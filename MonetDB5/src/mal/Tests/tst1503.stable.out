stdout of test 'tst1503` in directory 'src/mal` itself:


# 07:59:07 >  
# 07:59:07 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst1503.mal </dev/null
# 07:59:07 >  



# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
#	x := new(:oid,:chr);
#	de_a := insert(x,1@0,'a');
#	ee_a := insert(x,2@0,'a');
#	fe_a := insert(x,3@0,'b');
#	ge_a := insert(x,4@0,'b');
#	he_a := insert(x,5@0,'b');
#	ie_a := insert(x,6@0,'b');
#	je_a := insert(x,7@0,'c');
#	ke_a := insert(x,8@0,'c');
#
#	y := new(:oid,:dbl);
#	le_a := dbl(1.0);
#	me_a := insert(y,1@0,le_a);
#	ne_a := dbl(2.0);
#	oe_a := insert(y,2@0,ne_a);
#	pe_a := dbl(2.0);
#	qe_a := insert(y,3@0,pe_a);
#	re_a := dbl(2.0);
#	se_a := insert(y,4@0,re_a);
#	te_a := dbl(2.0);
#	ue_a := insert(y,5@0,te_a);
#	ve_a := dbl(3.0);
#	we_a := insert(y,6@0,ve_a);
#	xe_a := dbl(1.0);
#	ye_a := insert(y,7@0,xe_a);
#	af_a := dbl(1.0);
#	bf_a := insert(y,8@0,af_a);
#
#	z := new(:oid,:str);
#	cf_a := insert(z,1@0,"c");
#	df_a := insert(z,2@0,"a");
#	ef_a := insert(z,3@0,"b");
#	ff_a := insert(z,4@0,"c");
#	gf_a := insert(z,5@0,"a");
#	hf_a := insert(z,6@0,"a");
#	if_a := insert(z,7@0,"c");
#	jf_a := insert(z,8@0,"a");
#print("group x");print(x,y,z);
#        (zb1,b1) := group(x);
#print("b1 becomes"); print(b1);
#print("zb1 becomes"); print(zb1);
#        b2 := group(b1,y);
#print("b2 becomes"); print(b2);
#
#
function user.main():void;              #  0 main:void := user.main() {G}
    x := bat.new(:oid,:chr);            #  1 x:bat[:oid,:chr] := CMDBATnew(_2:oid, _3:chr) {G}
    de_a := bat.insert(x,1@0,'a');      #  2 de_a:void := BKCinsert_bun(x:bat[:oid,:chr], _5:oid, _6:chr) 
    ee_a := bat.insert(x,2@0,'a');      #  3 ee_a:void := BKCinsert_bun(x:bat[:oid,:chr], _8:oid, _6:chr) 
    fe_a := bat.insert(x,3@0,'b');      #  4 fe_a:void := BKCinsert_bun(x:bat[:oid,:chr], _10:oid, _11:chr) 
    ge_a := bat.insert(x,4@0,'b');      #  5 ge_a:void := BKCinsert_bun(x:bat[:oid,:chr], _13:oid, _11:chr) 
    he_a := bat.insert(x,5@0,'b');      #  6 he_a:void := BKCinsert_bun(x:bat[:oid,:chr], _15:oid, _11:chr) 
    ie_a := bat.insert(x,6@0,'b');      #  7 ie_a:void := BKCinsert_bun(x:bat[:oid,:chr], _17:oid, _11:chr) 
    je_a := bat.insert(x,7@0,'c');      #  8 je_a:void := BKCinsert_bun(x:bat[:oid,:chr], _19:oid, _20:chr) 
    ke_a := bat.insert(x,8@0,'c');      #  9 ke_a:void := BKCinsert_bun(x:bat[:oid,:chr], _22:oid, _20:chr) 
    y := bat.new(:oid,:dbl);            # 10 y:bat[:oid,:dbl] := CMDBATnew(_2:oid, _24:dbl) {G}
    le_a := calc.dbl(1);                # 11 le_a:dbl := CALCflt2dbl(_26:flt) 
    me_a := bat.insert(y,1@0,le_a);     # 12 me_a:void := BKCinsert_bun(y:bat[:oid,:dbl], _5:oid, le_a:dbl) 
    ne_a := calc.dbl(2);                # 13 ne_a:dbl := CALCflt2dbl(_29:flt) 
    oe_a := bat.insert(y,2@0,ne_a);     # 14 oe_a:void := BKCinsert_bun(y:bat[:oid,:dbl], _8:oid, ne_a:dbl) 
    pe_a := calc.dbl(2);                # 15 pe_a:dbl := CALCflt2dbl(_29:flt) 
    qe_a := bat.insert(y,3@0,pe_a);     # 16 qe_a:void := BKCinsert_bun(y:bat[:oid,:dbl], _10:oid, pe_a:dbl) 
    re_a := calc.dbl(2);                # 17 re_a:dbl := CALCflt2dbl(_29:flt) 
    se_a := bat.insert(y,4@0,re_a);     # 18 se_a:void := BKCinsert_bun(y:bat[:oid,:dbl], _13:oid, re_a:dbl) 
    te_a := calc.dbl(2);                # 19 te_a:dbl := CALCflt2dbl(_29:flt) 
    ue_a := bat.insert(y,5@0,te_a);     # 20 ue_a:void := BKCinsert_bun(y:bat[:oid,:dbl], _15:oid, te_a:dbl) 
    ve_a := calc.dbl(3);                # 21 ve_a:dbl := CALCflt2dbl(_38:flt) 
    we_a := bat.insert(y,6@0,ve_a);     # 22 we_a:void := BKCinsert_bun(y:bat[:oid,:dbl], _17:oid, ve_a:dbl) 
    xe_a := calc.dbl(1);                # 23 xe_a:dbl := CALCflt2dbl(_26:flt) 
    ye_a := bat.insert(y,7@0,xe_a);     # 24 ye_a:void := BKCinsert_bun(y:bat[:oid,:dbl], _19:oid, xe_a:dbl) 
    af_a := calc.dbl(1);                # 25 af_a:dbl := CALCflt2dbl(_26:flt) 
    bf_a := bat.insert(y,8@0,af_a);     # 26 bf_a:void := BKCinsert_bun(y:bat[:oid,:dbl], _22:oid, af_a:dbl) 
    z := bat.new(:oid,:str);            # 27 z:bat[:oid,:str] := CMDBATnew(_2:oid, _45:str) {G}
    cf_a := bat.insert(z,1@0,"c");      # 28 cf_a:void := BKCinsert_bun(z:bat[:oid,:str], _47:oid, _48:str) 
    df_a := bat.insert(z,2@0,"a");      # 29 df_a:void := BKCinsert_bun(z:bat[:oid,:str], _50:oid, _51:str) 
    ef_a := bat.insert(z,3@0,"b");      # 30 ef_a:void := BKCinsert_bun(z:bat[:oid,:str], _53:oid, _54:str) 
    ff_a := bat.insert(z,4@0,"c");      # 31 ff_a:void := BKCinsert_bun(z:bat[:oid,:str], _56:oid, _48:str) 
    gf_a := bat.insert(z,5@0,"a");      # 32 gf_a:void := BKCinsert_bun(z:bat[:oid,:str], _58:oid, _51:str) 
    hf_a := bat.insert(z,6@0,"a");      # 33 hf_a:void := BKCinsert_bun(z:bat[:oid,:str], _60:oid, _51:str) 
    if_a := bat.insert(z,7@0,"c");      # 34 if_a:void := BKCinsert_bun(z:bat[:oid,:str], _62:oid, _48:str) 
    jf_a := bat.insert(z,8@0,"a");      # 35 jf_a:void := BKCinsert_bun(z:bat[:oid,:str], _64:oid, _51:str) 
    io.print("group x");                # 36 _65:void := IOprint_val(_66:str) 
    io.print(x,y,z);                    # 37 _67:void := IOtable(x:bat[:oid,:chr], y:bat[:oid,:dbl], z:bat[:oid,:str]) 
    (zb1,b1):= group.new(x);            # 38 (zb1:bat[:oid,:int], b1:bat[:oid,:oid]) := GRPgroup(x:bat[:oid,:chr]) {G}
    io.print("b1 becomes");             # 39 _70:void := IOprint_val(_71:str) 
    io.print(b1);                       # 40 _72:void := IOprint_val(b1:bat[:oid,:oid]) 
    io.print("zb1 becomes");            # 41 _73:void := IOprint_val(_74:str) 
    io.print(zb1);                      # 42 _75:void := IOprint_val(zb1:bat[:oid,:int]) 
    (zb2,b2):= group.derive(zb1,b1,y);  # 43 (zb2:bat[:oid,:int], b2:bat[:oid,:oid]) := GRPderive(zb1:bat[:oid,:int], b1:bat[:oid,:oid], y:bat[:oid,:dbl]) {G}
    io.print("b2 becomes");             # 44 _78:void := IOprint_val(_79:str) 
    io.print(b2);                       # 45 _80:void := IOprint_val(b2:bat[:oid,:oid]) 
end main;	# 46  
[ "group x" ]
#---------------------------------#
# h	tmp_4	tmp_5	tmp_6	  # name
# oid	chr	dbl	str	  # type
#---------------------------------#
[ 1@0,	  'a',	  1,	  "c"	  ]
[ 2@0,	  'a',	  2,	  "a"	  ]
[ 3@0,	  'b',	  2,	  "b"	  ]
[ 4@0,	  'b',	  2,	  "c"	  ]
[ 5@0,	  'b',	  2,	  "a"	  ]
[ 6@0,	  'b',	  3,	  "a"	  ]
[ 7@0,	  'c',	  1,	  "c"	  ]
[ 8@0,	  'c',	  1,	  "a"	  ]
[ "b1 becomes" ]
#-----------------#
# h	tmp_7	  # name
# oid	oid	  # type
#-----------------#
[ 1@0,	  1@0	  ]
[ 2@0,	  1@0	  ]
[ 3@0,	  3@0	  ]
[ 4@0,	  3@0	  ]
[ 5@0,	  3@0	  ]
[ 6@0,	  3@0	  ]
[ 7@0,	  7@0	  ]
[ 8@0,	  7@0	  ]
[ "zb1 becomes" ]
#-------------------------#
# h	histo_tmp_7	  # name
# oid	int		  # type
#-------------------------#
[ 1@0,	  2		  ]
[ 3@0,	  4		  ]
[ 7@0,	  2		  ]
[ "b2 becomes" ]
#-----------------#
# h	tmp_9	  # name
# void	oid	  # type
#-----------------#
[ 1@0,	  1@0	  ]
[ 2@0,	  2@0	  ]
[ 3@0,	  3@0	  ]
[ 4@0,	  3@0	  ]
[ 5@0,	  3@0	  ]
[ 6@0,	  6@0	  ]
[ 7@0,	  7@0	  ]
[ 8@0,	  7@0	  ]

# 07:59:07 >  
# 07:59:07 >  Done.
# 07:59:07 >  

