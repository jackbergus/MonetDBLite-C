stdout of test 'tst903` in directory 'src/mal` itself:


# 08:19:07 >  
# 08:19:07 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=46963 --set sql_port=59214 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst903.mal </dev/null
# 08:19:07 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## the multiplex code blocks.
#
#b:= new(:void,:lng);
#barrier (go,i):= newRange(0:lng);
#	k:= rand();
#	l:= lng(k);
#	insert(b,nil,l);
#	redo (go,i):= nextElement(1:lng,1000000:lng);
#exit (go,i);
#
##setReadMode(b);
#mx:= max(b); 
##printf("max %d",mx);
#mi:= min(b); 
##printf(" min %d\n",mi);
#t0:= alarm.usec();
#c:= copy(b);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#copy %d",d0);
#cnt:= count(c);
#printf("#count %d\n",cnt);
#t0:= alarm.usec();
#z:= select(b,25:lng,25:lng);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select none %d",d0);
#cnt:= count(z);
#printf(" count %d\n",cnt);
#t0:= alarm.usec();
#z2:= select(b,mi,mx);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select all %d",d0);
#cnt:= count(z2);
#printf(" count %d\n",cnt);
#rng:= mx-mi;
#r2:= rng/20;
#r3:= mi+r2;
#t0:= alarm.usec();
#z3:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.05 %d",d0);
#cnt:= count(z3);
#printf(" count %d\n",cnt);
#r2:= rng/10;
#r3:= mi+r2;
#t0:= alarm.usec();
#z4:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.1 %d",d0);
#cnt:= count(z4);
#printf(" count %d\n",cnt);
#r2:= rng/5;
#r3:= mi+r2;
#t0:= alarm.usec();
#z5:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.2 %d",d0);
#cnt:= count(z5);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z6:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.4 %d",d0);
#cnt:= count(z6);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z7:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.6 %d",d0);
#cnt:= count(z7);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z8:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.8 %d",d0);
#cnt:= count(z8);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z9:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 1.0 %d",d0);
#cnt:= count(z9);
#printf(" count %d\n",cnt);
#t0:= alarm.usec();
#sr:= reverse(b);
#s:= sort(sr);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#tail sort %d",d0);
#cnt:= count(s);
#printf(" count %d\n",cnt);
#cnt:= count(z9);
#t0:= alarm.usec();
#x:= multiplex.script("+",b,c);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#multiplex.script(+) %d\n",d0);
#t0:= alarm.usec();
#x:= multiplex.tactics("+",b,c);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#multiplex.tactics(+) %d\n",d0);
#
function user.main():void;              #  0 main:void := user.main() {G}
# the multiplex code blocks. 
    t0 := alarm.usec();                 #  2 t0:lng := ALARMusec() 
    b := bat.new(:oid,:lng);            #  3 b:bat[:oid,:lng] := CMDBATnew(_4:oid, _5:lng) {G}
barrier (go,i) := language.newRange(0:lng);#  4 (go:bit, i:lng) := RNGnewRange_lng(_8:lng) {J9}
    k := mmath.rand();                  #  5 k:int := MATHrandint() 
    l := calc.lng(k);                   #  6 l:lng := CALCint2lng(k:int) 
    bat.insert(b,nil:oid,l);            #  7 _11:bat[:oid,:lng] := BKCinsert_bun(b:bat[:oid,:lng], _12:oid, l:lng) {G}
    redo (go,i) := language.nextElement(1:lng,1000000:lng);#  8 (go:bit, i:lng) := RNGnextElement_lng(_13:lng, _14:lng) {J5}
exit (go,i);                            #  9 (go:bit, i:lng) 
    t1 := alarm.usec();                 # 10 t1:lng := ALARMusec() 
    d0 := calc.-(t1,t0);                # 11 d0:lng := CALCbinarySUBlnglng(t1:lng, t0:lng) 
    io.printf("#loop %d\n",d0);         # 12 _17:void := IOprintf(_18:str, d0:lng) 
#setReadMode(b); 
    mx := aggr.max(b);                  # 14 mx:lng := ALGmax_lng(b:bat[:oid,:lng]) 
#io.printf("max %d",mx); 
    mi := aggr.min(b);                  # 16 mi:lng := ALGmin_lng(b:bat[:oid,:lng]) 
#io.printf(" min %d\n",mi); 
    t0 := alarm.usec();                 # 18 t0:lng := ALARMusec() 
    c := algebra.copy(b);               # 19 c:bat[:oid,:lng] := ALGcopy(b:bat[:oid,:lng]) {G}
    t1 := alarm.usec();                 # 20 t1:lng := ALARMusec() 
    d0 := calc.-(t1,t0);                # 21 d0:lng := CALCbinarySUBlnglng(t1:lng, t0:lng) 
    io.printf("#copy %d ",d0);          # 22 _25:void := IOprintf(_26:str, d0:lng) 
    cnt := aggr.count(c);               # 23 cnt:wrd := ALGcount_bat(c:bat[:oid,:lng]) 
    io.printf("count %d\n",cnt);        # 24 _28:void := IOprintf(_29:str, cnt:wrd) 
    t0 := alarm.usec();                 # 25 t0:lng := ALARMusec() 
    z := algebra.select(b,25:lng,25:lng);# 26 z:bat[:oid,:lng] := ALGselect(b:bat[:oid,:lng], _31:lng, _31:lng) {G}
    t1 := alarm.usec();                 # 27 t1:lng := ALARMusec() 
    d0 := calc.-(t1,t0);                # 28 d0:lng := CALCbinarySUBlnglng(t1:lng, t0:lng) 
    io.printf("#select none %d",d0);    # 29 _32:void := IOprintf(_33:str, d0:lng) 
    cnt := aggr.count(z);               # 30 cnt:wrd := ALGcount_bat(z:bat[:oid,:lng]) 
    io.printf(" count %d\n",cnt);       # 31 _34:void := IOprintf(_35:str, cnt:wrd) 
    t0 := alarm.usec();                 # 32 t0:lng := ALARMusec() 
    z2 := algebra.select(b,mi,mx);      # 33 z2:bat[:oid,:lng] := ALGselect(b:bat[:oid,:lng], mi:lng, mx:lng) {G}
    t1 := alarm.usec();                 # 34 t1:lng := ALARMusec() 
    d0 := calc.-(t1,t0);                # 35 d0:lng := CALCbinarySUBlnglng(t1:lng, t0:lng) 
    io.printf("#select all %d",d0);     # 36 _37:void := IOprintf(_38:str, d0:lng) 
    cnt := aggr.count(z2);              # 37 cnt:wrd := ALGcount_bat(z2:bat[:oid,:lng]) 
    io.printf(" count %d\n",cnt);       # 38 _39:void := IOprintf(_35:str, cnt:wrd) 
    rng := calc.-(mx,mi);               # 39 rng:lng := CALCbinarySUBlnglng(mx:lng, mi:lng) 
    r2 := calc./(rng,20);               # 40 r2:lng := CALCbinarycheckDIVlngint(rng:lng, _42:int) 
    r3 := calc.+(mi,r2);                # 41 r3:lng := CALCbinaryADDlnglng(mi:lng, r2:lng) 
    t0 := alarm.usec();                 # 42 t0:lng := ALARMusec() 
    z3 := algebra.select(b,mi,r3);      # 43 z3:bat[:oid,:lng] := ALGselect(b:bat[:oid,:lng], mi:lng, r3:lng) {G}
    t1 := alarm.usec();                 # 44 t1:lng := ALARMusec() 
    d0 := calc.-(t1,t0);                # 45 d0:lng := CALCbinarySUBlnglng(t1:lng, t0:lng) 
    io.printf("#select 0.05 %d",d0);    # 46 _45:void := IOprintf(_46:str, d0:lng) 
    cnt := aggr.count(z3);              # 47 cnt:wrd := ALGcount_bat(z3:bat[:oid,:lng]) 
    io.printf(" count %d\n",cnt);       # 48 _47:void := IOprintf(_35:str, cnt:wrd) 
    r2 := calc./(rng,10);               # 49 r2:lng := CALCbinarycheckDIVlngint(rng:lng, _48:int) 
    r3 := calc.+(mi,r2);                # 50 r3:lng := CALCbinaryADDlnglng(mi:lng, r2:lng) 
    t0 := alarm.usec();                 # 51 t0:lng := ALARMusec() 
    z4 := algebra.select(b,mi,r3);      # 52 z4:bat[:oid,:lng] := ALGselect(b:bat[:oid,:lng], mi:lng, r3:lng) {G}
    t1 := alarm.usec();                 # 53 t1:lng := ALARMusec() 
    d0 := calc.-(t1,t0);                # 54 d0:lng := CALCbinarySUBlnglng(t1:lng, t0:lng) 
    io.printf("#select 0.1 %d",d0);     # 55 _50:void := IOprintf(_51:str, d0:lng) 
    cnt := aggr.count(z4);              # 56 cnt:wrd := ALGcount_bat(z4:bat[:oid,:lng]) 
    io.printf(" count %d\n",cnt);       # 57 _52:void := IOprintf(_35:str, cnt:wrd) 
    r2 := calc./(rng,5);                # 58 r2:lng := CALCbinarycheckDIVlngint(rng:lng, _53:int) 
    r3 := calc.+(mi,r2);                # 59 r3:lng := CALCbinaryADDlnglng(mi:lng, r2:lng) 
    t0 := alarm.usec();                 # 60 t0:lng := ALARMusec() 
    z5 := algebra.select(b,mi,r3);      # 61 z5:bat[:oid,:lng] := ALGselect(b:bat[:oid,:lng], mi:lng, r3:lng) {G}
    t1 := alarm.usec();                 # 62 t1:lng := ALARMusec() 
    d0 := calc.-(t1,t0);                # 63 d0:lng := CALCbinarySUBlnglng(t1:lng, t0:lng) 
    io.printf("#select 0.2 %d",d0);     # 64 _55:void := IOprintf(_56:str, d0:lng) 
    cnt := aggr.count(z5);              # 65 cnt:wrd := ALGcount_bat(z5:bat[:oid,:lng]) 
    io.printf(" count %d\n",cnt);       # 66 _57:void := IOprintf(_35:str, cnt:wrd) 
    r3 := calc.+(r3,r2);                # 67 r3:lng := CALCbinaryADDlnglng(r3:lng, r2:lng) 
    t0 := alarm.usec();                 # 68 t0:lng := ALARMusec() 
    z6 := algebra.select(b,mi,r3);      # 69 z6:bat[:oid,:lng] := ALGselect(b:bat[:oid,:lng], mi:lng, r3:lng) {G}
    t1 := alarm.usec();                 # 70 t1:lng := ALARMusec() 
    d0 := calc.-(t1,t0);                # 71 d0:lng := CALCbinarySUBlnglng(t1:lng, t0:lng) 
    io.printf("#select 0.4 %d",d0);     # 72 _59:void := IOprintf(_60:str, d0:lng) 
    cnt := aggr.count(z6);              # 73 cnt:wrd := ALGcount_bat(z6:bat[:oid,:lng]) 
    io.printf(" count %d\n",cnt);       # 74 _61:void := IOprintf(_35:str, cnt:wrd) 
    r3 := calc.+(r3,r2);                # 75 r3:lng := CALCbinaryADDlnglng(r3:lng, r2:lng) 
    t0 := alarm.usec();                 # 76 t0:lng := ALARMusec() 
    z7 := algebra.select(b,mi,r3);      # 77 z7:bat[:oid,:lng] := ALGselect(b:bat[:oid,:lng], mi:lng, r3:lng) {G}
    t1 := alarm.usec();                 # 78 t1:lng := ALARMusec() 
    d0 := calc.-(t1,t0);                # 79 d0:lng := CALCbinarySUBlnglng(t1:lng, t0:lng) 
    io.printf("#select 0.6 %d",d0);     # 80 _63:void := IOprintf(_64:str, d0:lng) 
    cnt := aggr.count(z7);              # 81 cnt:wrd := ALGcount_bat(z7:bat[:oid,:lng]) 
    io.printf(" count %d\n",cnt);       # 82 _65:void := IOprintf(_35:str, cnt:wrd) 
    r3 := calc.+(r3,r2);                # 83 r3:lng := CALCbinaryADDlnglng(r3:lng, r2:lng) 
    t0 := alarm.usec();                 # 84 t0:lng := ALARMusec() 
    z8 := algebra.select(b,mi,r3);      # 85 z8:bat[:oid,:lng] := ALGselect(b:bat[:oid,:lng], mi:lng, r3:lng) {G}
    t1 := alarm.usec();                 # 86 t1:lng := ALARMusec() 
    d0 := calc.-(t1,t0);                # 87 d0:lng := CALCbinarySUBlnglng(t1:lng, t0:lng) 
    io.printf("#select 0.8 %d",d0);     # 88 _67:void := IOprintf(_68:str, d0:lng) 
    cnt := aggr.count(z8);              # 89 cnt:wrd := ALGcount_bat(z8:bat[:oid,:lng]) 
    io.printf(" count %d\n",cnt);       # 90 _69:void := IOprintf(_70:str, cnt:wrd) 
    r3 := calc.+(r3,r2);                # 91 r3:lng := CALCbinaryADDlnglng(r3:lng, r2:lng) 
    t0 := alarm.usec();                 # 92 t0:lng := ALARMusec() 
    z9 := algebra.select(b,mi,r3);      # 93 z9:bat[:oid,:lng] := ALGselect(b:bat[:oid,:lng], mi:lng, r3:lng) {G}
    t1 := alarm.usec();                 # 94 t1:lng := ALARMusec() 
    d0 := calc.-(t1,t0);                # 95 d0:lng := CALCbinarySUBlnglng(t1:lng, t0:lng) 
    io.printf("#select 1.0 %d",d0);     # 96 _72:void := IOprintf(_73:str, d0:lng) 
    cnt := aggr.count(z9);              # 97 cnt:wrd := ALGcount_bat(z9:bat[:oid,:lng]) 
    io.printf(" count %d\n",cnt);       # 98 _74:void := IOprintf(_70:str, cnt:wrd) 
    t0 := alarm.usec();                 # 99 t0:lng := ALARMusec() 
    sr := bat.reverse(b);               #100 sr:bat[:lng,:oid] := BKCreverse(b:bat[:oid,:lng]) {G}
    s := algebra.sort(sr);              #101 s:bat[:lng,:oid] := ALGhsort(sr:bat[:lng,:oid]) {G}
    t1 := alarm.usec();                 #102 t1:lng := ALARMusec() 
    d0 := calc.-(t1,t0);                #103 d0:lng := CALCbinarySUBlnglng(t1:lng, t0:lng) 
    io.printf("#head sort %d",d0);      #104 _77:void := IOprintf(_78:str, d0:lng) 
    cnt := aggr.count(s);               #105 cnt:wrd := ALGcount_bat(s:bat[:lng,:oid]) 
    io.printf(" count %d\n",cnt);       #106 _79:void := IOprintf(_70:str, cnt:wrd) 
    cnt := aggr.count(z9);              #107 cnt:wrd := ALGcount_bat(z9:bat[:oid,:lng]) 
    t0 := alarm.usec();                 #108 t0:lng := ALARMusec() 
    _87 := bat.new(nil:oid,nil:lng);    #109 _87:bat[:oid,:lng] := CMDBATnew(_88:oid, _89:lng) {G}
barrier (_91,_92,_93) := bat.newIterator(b);#110 (_91:lng, _92:oid, _93:lng) := CHPbunIterator(b:bat[:oid,:lng]) {J115}
    _95 := algebra.find(c,_92);         #111 _95:lng := ALGfind(c:bat[:oid,:lng], _92:oid) 
    _97 := calc.+(_93,_95);             #112 _97:lng := CALCbinaryADDlnglng(_93:lng, _95:lng) 
    bat.insert(_87,_92,_97);            #113 _98:bat[:oid,:lng] := BKCinsert_bun(_87:bat[:oid,:lng], _92:oid, _97:lng) {G}
    redo (_91,_92,_93) := bat.hasMoreElements(b);#114 (_91:lng, _92:oid, _93:lng) := CHPbunHasMoreElements(b:bat[:oid,:lng]) {J111}
exit (_91,_92,_93);                     #115 (_91:lng, _92:oid, _93:lng) 
    x:bat[:oid,:lng]  := _87;           #116 x:bat[:oid,:lng] := _87:bat[:oid,:lng] {G}
    t1 := alarm.usec();                 #117 t1:lng := ALARMusec() 
    d0 := calc.-(t1,t0);                #118 d0:lng := CALCbinarySUBlnglng(t1:lng, t0:lng) 
    io.printf("#mal.multiplex(+) %d\n",d0);#119 _83:void := IOprintf(_84:str, d0:lng) 
    t0 := alarm.usec();                 #120 t0:lng := ALARMusec() 
    x:bat[:oid,:lng]  := batcalc.+(b,c);#121 x:bat[:oid,:lng] := CMDbatADD_lng_lng_lng(b:bat[:oid,:lng], c:bat[:oid,:lng]) {G}
    t1 := alarm.usec();                 #122 t1:lng := ALARMusec() 
    d0 := calc.-(t1,t0);                #123 d0:lng := CALCbinarySUBlnglng(t1:lng, t0:lng) 
    io.printf("#batcalc.+() %d\n",d0);  #124 _85:void := IOprintf(_86:str, d0:lng) 
end main;                               #125  
#loop 648054
#copy 14988#count 1000000
#select none 106994 count 0
#select all 25967 count 1000000
#select 0.05 13295 count 49973
#select 0.1 14949 count 100115
#select 0.2 18962 count 199865
#select 0.4 27607 count 400582
#select 0.6 34124 count 599762
#select 0.8 38619 count 800077
#select 1.0 25645 count 999999
#head sort 321877 count 1000000
#mal.multiplex(+) 1339231
#batcalc.+() 8976

# 08:19:33 >  
# 08:19:33 >  Done.
# 08:19:33 >  

