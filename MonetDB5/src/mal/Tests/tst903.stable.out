stdout of test 'tst903` in directory 'src/mal` itself:


# 08:19:07 >  
# 08:19:07 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=46963 --set sql_port=59214 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst903.mal </dev/null
# 08:19:07 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## the multiplex code blocks.
#
#b:= new(:void,:lng);
#barrier (go,i):= newRange(0:lng);
#	k:= rand();
#	l:= lng(k);
#	insert(b,nil,l);
#	redo (go,i):= nextElement(1:lng,1000000:lng);
#exit (go,i);
#
##setReadMode(b);
#mx:= max(b); 
##printf("max %d",mx);
#mi:= min(b); 
##printf(" min %d\n",mi);
#t0:= alarm.usec();
#c:= copy(b);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#copy %d",d0);
#cnt:= count(c);
#printf("#count %d\n",cnt);
#t0:= alarm.usec();
#z:= select(b,25:lng,25:lng);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select none %d",d0);
#cnt:= count(z);
#printf(" count %d\n",cnt);
#t0:= alarm.usec();
#z2:= select(b,mi,mx);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select all %d",d0);
#cnt:= count(z2);
#printf(" count %d\n",cnt);
#rng:= mx-mi;
#r2:= rng/20;
#r3:= mi+r2;
#t0:= alarm.usec();
#z3:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.05 %d",d0);
#cnt:= count(z3);
#printf(" count %d\n",cnt);
#r2:= rng/10;
#r3:= mi+r2;
#t0:= alarm.usec();
#z4:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.1 %d",d0);
#cnt:= count(z4);
#printf(" count %d\n",cnt);
#r2:= rng/5;
#r3:= mi+r2;
#t0:= alarm.usec();
#z5:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.2 %d",d0);
#cnt:= count(z5);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z6:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.4 %d",d0);
#cnt:= count(z6);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z7:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.6 %d",d0);
#cnt:= count(z7);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z8:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 0.8 %d",d0);
#cnt:= count(z8);
#printf(" count %d\n",cnt);
#r3:= r3+r2;
#t0:= alarm.usec();
#z9:= select(b,mi,r3);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#select 1.0 %d",d0);
#cnt:= count(z9);
#printf(" count %d\n",cnt);
#t0:= alarm.usec();
#sr:= reverse(b);
#s:= sort(sr);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#tail sort %d",d0);
#cnt:= count(s);
#printf(" count %d\n",cnt);
#cnt:= count(z9);
#t0:= alarm.usec();
#x:= multiplex.script("+",b,c);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#multiplex.script(+) %d\n",d0);
#t0:= alarm.usec();
#x:= multiplex.tactics("+",b,c);
#t1:= alarm.usec();
#d0:= t1-t0;
#printf("#multiplex.tactics(+) %d\n",d0);
#
function user.main():void;	# 0  (main:void)
# the multiplex code blocks. 	# 1  (_2:str)
    t0 := alarm.usec();	# 2 ALARMusec (t0:lng)
    b := bat.new(:void,:lng);	# 3 CMDBATnew (b:bat[:void,:lng])<-(_4:void)(_5:lng)
barrier (go,i):= language.newRange(0:lng);	# 4 RNGnewRange_lng (go:bit)(i:lng)<-(_8:lng) jump 9
    k := mmath.rand();	# 5 MATHrandint (k:int)
    l := calc.lng(k);	# 6 CALCint2lng (l:lng)<-(k:int)
    bat.insert(b,nil:void,l);	# 7 BKCinsert_bun (_11:void)<-(b:bat[:void,:lng])(_12:void)(l:lng)
    redo (go,i):= language.nextElement(1:lng,1000000:lng);	# 8 RNGnextElement_lng (go:bit)(i:lng)<-(_13:lng)(_14:lng) jump 5
exit (go,i);	# 9  (go:bit)(i:lng)
    t1 := alarm.usec();	# 10 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 11 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#loop %d\n",d0);	# 12 IOprint_formatted_lng (_17:int)<-(_18:str)(d0:lng)
#setReadMode(b); 	# 13  (_19:str)
    mx := aggr.max(b);	# 14 ALGmax_lng (mx:lng)<-(b:bat[:void,:lng])
#io.printf("max %d",mx); 	# 15  ($24:str)
    mi := aggr.min(b);	# 16 ALGmin_lng (mi:lng)<-(b:bat[:void,:lng])
#io.printf(" min %d\n",mi); 	# 17  ($27:str)
    t0 := alarm.usec();	# 18 ALARMusec (t0:lng)
    c := algebra.copy(b);	# 19 ALGcopy (c:bat[:void,:lng])<-(b:bat[:void,:lng])
    t1 := alarm.usec();	# 20 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 21 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#copy %d",d0);	# 22 IOprint_formatted_lng (_25:int)<-(_26:str)(d0:lng)
    cnt := aggr.count(c);	# 23 ALGcount_bat (cnt:int)<-(c:bat[:void,:lng])
    io.printf("#count %d\n",cnt);	# 24 IOprint_formatted_int (_28:int)<-(_29:str)(cnt:int)
    t0 := alarm.usec();	# 25 ALARMusec (t0:lng)
    z := algebra.select(b,25:lng,25:lng);	# 26 ALGselect (z:bat[:void,:lng])<-(b:bat[:void,:lng])(_31:lng)(_31:lng)
    t1 := alarm.usec();	# 27 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 28 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select none %d",d0);	# 29 IOprint_formatted_lng (_32:int)<-(_33:str)(d0:lng)
    cnt := aggr.count(z);	# 30 ALGcount_bat (cnt:int)<-(z:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 31 IOprint_formatted_int (_34:int)<-(_35:str)(cnt:int)
    t0 := alarm.usec();	# 32 ALARMusec (t0:lng)
    z2 := algebra.select(b,mi,mx);	# 33 ALGselect (z2:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(mx:lng)
    t1 := alarm.usec();	# 34 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 35 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select all %d",d0);	# 36 IOprint_formatted_lng (_37:int)<-(_38:str)(d0:lng)
    cnt := aggr.count(z2);	# 37 ALGcount_bat (cnt:int)<-(z2:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 38 IOprint_formatted_int (_39:int)<-(_35:str)(cnt:int)
    rng := calc.-(mx,mi);	# 39 CALCbinarySUBlnglng (rng:lng)<-(mx:lng)(mi:lng)
    r2 := calc./(rng,20);	# 40 CALCbinarycheckDIVlngint (r2:lng)<-(rng:lng)(_42:int)
    r3 := calc.+(mi,r2);	# 41 CALCbinaryADDlnglng (r3:lng)<-(mi:lng)(r2:lng)
    t0 := alarm.usec();	# 42 ALARMusec (t0:lng)
    z3 := algebra.select(b,mi,r3);	# 43 ALGselect (z3:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 44 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 45 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.05 %d",d0);	# 46 IOprint_formatted_lng (_45:int)<-(_46:str)(d0:lng)
    cnt := aggr.count(z3);	# 47 ALGcount_bat (cnt:int)<-(z3:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 48 IOprint_formatted_int (_47:int)<-(_35:str)(cnt:int)
    r2 := calc./(rng,10);	# 49 CALCbinarycheckDIVlngint (r2:lng)<-(rng:lng)(_48:int)
    r3 := calc.+(mi,r2);	# 50 CALCbinaryADDlnglng (r3:lng)<-(mi:lng)(r2:lng)
    t0 := alarm.usec();	# 51 ALARMusec (t0:lng)
    z4 := algebra.select(b,mi,r3);	# 52 ALGselect (z4:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 53 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 54 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.1 %d",d0);	# 55 IOprint_formatted_lng (_50:int)<-(_51:str)(d0:lng)
    cnt := aggr.count(z4);	# 56 ALGcount_bat (cnt:int)<-(z4:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 57 IOprint_formatted_int (_52:int)<-(_35:str)(cnt:int)
    r2 := calc./(rng,5);	# 58 CALCbinarycheckDIVlngint (r2:lng)<-(rng:lng)(_53:int)
    r3 := calc.+(mi,r2);	# 59 CALCbinaryADDlnglng (r3:lng)<-(mi:lng)(r2:lng)
    t0 := alarm.usec();	# 60 ALARMusec (t0:lng)
    z5 := algebra.select(b,mi,r3);	# 61 ALGselect (z5:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 62 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 63 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.2 %d",d0);	# 64 IOprint_formatted_lng (_55:int)<-(_56:str)(d0:lng)
    cnt := aggr.count(z5);	# 65 ALGcount_bat (cnt:int)<-(z5:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 66 IOprint_formatted_int (_57:int)<-(_35:str)(cnt:int)
    r3 := calc.+(r3,r2);	# 67 CALCbinaryADDlnglng (r3:lng)<-(r3:lng)(r2:lng)
    t0 := alarm.usec();	# 68 ALARMusec (t0:lng)
    z6 := algebra.select(b,mi,r3);	# 69 ALGselect (z6:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 70 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 71 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.4 %d",d0);	# 72 IOprint_formatted_lng (_59:int)<-(_60:str)(d0:lng)
    cnt := aggr.count(z6);	# 73 ALGcount_bat (cnt:int)<-(z6:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 74 IOprint_formatted_int (_61:int)<-(_35:str)(cnt:int)
    r3 := calc.+(r3,r2);	# 75 CALCbinaryADDlnglng (r3:lng)<-(r3:lng)(r2:lng)
    t0 := alarm.usec();	# 76 ALARMusec (t0:lng)
    z7 := algebra.select(b,mi,r3);	# 77 ALGselect (z7:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 78 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 79 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.6 %d",d0);	# 80 IOprint_formatted_lng (_63:int)<-(_64:str)(d0:lng)
    cnt := aggr.count(z7);	# 81 ALGcount_bat (cnt:int)<-(z7:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 82 IOprint_formatted_int (_65:int)<-(_35:str)(cnt:int)
    r3 := calc.+(r3,r2);	# 83 CALCbinaryADDlnglng (r3:lng)<-(r3:lng)(r2:lng)
    t0 := alarm.usec();	# 84 ALARMusec (t0:lng)
    z8 := algebra.select(b,mi,r3);	# 85 ALGselect (z8:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 86 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 87 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 0.8 %d",d0);	# 88 IOprint_formatted_lng (_67:int)<-(_68:str)(d0:lng)
    cnt := aggr.count(z8);	# 89 ALGcount_bat (cnt:int)<-(z8:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 90 IOprint_formatted_int (_69:int)<-(_35:str)(cnt:int)
    r3 := calc.+(r3,r2);	# 91 CALCbinaryADDlnglng (r3:lng)<-(r3:lng)(r2:lng)
    t0 := alarm.usec();	# 92 ALARMusec (t0:lng)
    z9 := algebra.select(b,mi,r3);	# 93 ALGselect (z9:bat[:void,:lng])<-(b:bat[:void,:lng])(mi:lng)(r3:lng)
    t1 := alarm.usec();	# 94 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 95 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#select 1.0 %d",d0);	# 96 IOprint_formatted_lng (_71:int)<-(_72:str)(d0:lng)
    cnt := aggr.count(z9);	# 97 ALGcount_bat (cnt:int)<-(z9:bat[:void,:lng])
    io.printf(" count %d\n",cnt);	# 98 IOprint_formatted_int (_73:int)<-(_74:str)(cnt:int)
    t0 := alarm.usec();	# 99 ALARMusec (t0:lng)
    sr := bat.reverse(b);	# 100 BKCreverse (sr:bat[:lng,:void])<-(b:bat[:void,:lng])
    s := algebra.sort(sr);	# 101 ALGhsort (s:bat[:lng,:void])<-(sr:bat[:lng,:void])
    t1 := alarm.usec();	# 102 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 103 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#head sort %d",d0);	# 104 IOprint_formatted_lng (_77:int)<-(_78:str)(d0:lng)
    cnt := aggr.count(s);	# 105 ALGcount_bat (cnt:int)<-(s:bat[:lng,:void])
    io.printf(" count %d\n",cnt);	# 106 IOprint_formatted_int (_79:int)<-(_74:str)(cnt:int)
    cnt := aggr.count(z9);	# 107 ALGcount_bat (cnt:int)<-(z9:bat[:void,:lng])
    t0 := alarm.usec();	# 108 ALARMusec (t0:lng)
    _86 := bat.new(:void,:lng);	# 109 CMDBATnew (_86:bat[:void,:lng])<-(_4:void)(_5:lng)
    _88 := bat.getSequenceBase(b);	# 110 BKCgetSequenceBase (_88:oid)<-(b:bat[:void,:lng])
    _89 := bat.setSequenceBase(_86,_88);	# 111 BKCsetSequenceBase (_89:bat[:void,:lng])<-(_86:bat[:void,:lng])(_88:oid)
barrier (_91,_92,_93):= bat.newIterator(b);	# 112 CHPbunIterator (_91:lng)(_92:oid)(_93:lng)<-(b:bat[:void,:lng]) jump 119
    _95 := algebra.find(c,_92);	# 113 ALGfind (_95:lng)<-(c:bat[:void,:lng])(_92:oid)
    _97 := calc.+(_93,_95);	# 114 CALCbinaryADDlnglng (_97:lng)<-(_93:lng)(_95:lng)
    bat.insert(_89,_92,_97);	# 115 BKCinsert_bun (_98:void)<-(_89:bat[:void,:lng])(_92:oid)(_97:lng)
catch MALexception:str ;	# 116  (MALexception:str) jump 117
exit MALexception:str ;	# 117  (MALexception:str)
    redo (_91,_92,_93):= bat.hasMoreElements(b);	# 118 CHPbunHasMoreElements (_91:lng)(_92:oid)(_93:lng)<-(b:bat[:void,:lng]) jump 113
exit (_91,_92,_93);	# 119  (_91:lng)(_92:oid)(_93:lng)
    x:bat[:void,:lng]  := _89;	# 120  (x:bat[:void,:lng])<-(_89:bat[:void,:lng])
    t1 := alarm.usec();	# 121 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 122 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#optimizer.multiplex(+) %d\n",d0);	# 123 IOprint_formatted_lng (_82:int)<-(_83:str)(d0:lng)
    t0 := alarm.usec();	# 124 ALARMusec (t0:lng)
    x:bat[:void,:lng]  := batcalc.+(b,c);	# 125 CMDbatADD_lng_lng_lng (x:bat[:void,:lng])<-(b:bat[:void,:lng])(c:bat[:void,:lng])
    t1 := alarm.usec();	# 126 ALARMusec (t1:lng)
    d0 := calc.-(t1,t0);	# 127 CALCbinarySUBlnglng (d0:lng)<-(t1:lng)(t0:lng)
    io.printf("#batcalc.+() %d\n",d0);	# 128 IOprint_formatted_lng (_84:int)<-(_85:str)(d0:lng)
end main;	# 129  
#loop 345476
#copy 11816#count 1000000
#select none 91268 count 0
#select all 13354 count 1000000
#select 0.05 8757 count 50004
#select 0.1 9811 count 100016
#select 0.2 12162 count 199929
#select 0.4 17057 count 399791
#select 0.6 20079 count 600237
#select 0.8 20558 count 799837
#select 1.0 13871 count 999999
#tail sort 175170 count 1000000
#optimizer.multiplex(+) 6279459
#batcalc.+() 23410

# 08:19:33 >  
# 08:19:33 >  Done.
# 08:19:33 >  

