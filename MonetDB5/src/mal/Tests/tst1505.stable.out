stdout of test 'tst1505` in directory 'src/mal` itself:


# 07:59:08 >  
# 07:59:08 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst1505.mal </dev/null
# 07:59:08 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
#	y := new(:oid,:dbl);
#	le_a := dbl(1.0);
#	me_a := insert(y,1@0,le_a);
#	ne_a := dbl(2.0);
#	oe_a := insert(y,2@0,ne_a);
#	pe_a := dbl(2.0);
#	qe_a := insert(y,3@0,pe_a);
#	re_a := dbl(2.0);
#	se_a := insert(y,4@0,re_a);
#	te_a := dbl(2.0);
#	ue_a := insert(y,5@0,te_a);
#	ve_a := dbl(3.0);
#	we_a := insert(y,6@0,ve_a);
#	xe_a := dbl(1.0);
#	ye_a := insert(y,7@0,xe_a);
#	af_a := dbl(1.0);
#	bf_a := insert(y,8@0,af_a);
#
#z:= <(y,2.0:dbl);
#print(z);
#c:= count(z);
#print("count");print(c);
#
#	x:= new(:oid,:bit);
#	insert(x,1@0,true);
#	insert(x,2@0,false);
#	insert(x,3@0,true);
#	insert(x,4@0,false);
#	print(x);
#	A:= new(:oid,:bit);
#	insert(A,1@0,true);
#	insert(A,2@0,true);
#	insert(A,3@0,false);
#	insert(A,4@0,false);
#	print(A);
#	xn:= not(x); print(x,xn);
#	xandx:= and(x,A); print(x,xandx);
#	xorx:= or(x,A); print(x,xorx);
#print("ifthen group");
#	xif0:= ifthen(x,x);print(x,xif0);
#	xif1:= ifthen(x,false);print(x,xif1);
#	xif2:= ifthenelse(x,x,xn);print(x,x,xn,xif2);
#	xif3:= ifthenelse(x,x,true);print(x,x,xif3);
#	xif4:= ifthenelse(x,1,2);print(x,xif4);
#print("accumulators");
#	x2:= not(x,x); print(x,x2);
#	x3:= and(x,A); print(x,A,x3);
#	x4:= or(x,A); print(x,A,x4);
#
function user.main():void;              #  0 main:void := user.main() {G}
    y := bat.new(:oid,:dbl);            #  1 y:bat[:oid,:dbl] := CMDBATnew(_2:oid, _3:dbl) {G}
    le_a := calc.dbl(1);                #  2 le_a:dbl := CALCflt2dbl(_5:flt) 
    bat.append(y,le_a);                 #  3 _6:void := BKCappend_val_wrap(y:bat[:oid,:dbl], le_a:dbl) 
    ne_a := calc.dbl(2);                #  4 ne_a:dbl := CALCflt2dbl(_8:flt) 
    bat.append(y,ne_a);                 #  5 _9:void := BKCappend_val_wrap(y:bat[:oid,:dbl], ne_a:dbl) 
    pe_a := calc.dbl(2);                #  6 pe_a:dbl := CALCflt2dbl(_8:flt) 
    bat.append(y,pe_a);                 #  7 _11:void := BKCappend_val_wrap(y:bat[:oid,:dbl], pe_a:dbl) 
    re_a := calc.dbl(2);                #  8 re_a:dbl := CALCflt2dbl(_8:flt) 
    bat.append(y,re_a);                 #  9 _13:void := BKCappend_val_wrap(y:bat[:oid,:dbl], re_a:dbl) 
    te_a := calc.dbl(2);                # 10 te_a:dbl := CALCflt2dbl(_8:flt) 
    bat.append(y,te_a);                 # 11 _15:void := BKCappend_val_wrap(y:bat[:oid,:dbl], te_a:dbl) 
    ve_a := calc.dbl(3);                # 12 ve_a:dbl := CALCflt2dbl(_17:flt) 
    bat.append(y,ve_a);                 # 13 _18:void := BKCappend_val_wrap(y:bat[:oid,:dbl], ve_a:dbl) 
    xe_a := calc.dbl(1);                # 14 xe_a:dbl := CALCflt2dbl(_5:flt) 
    bat.append(y,xe_a);                 # 15 _20:void := BKCappend_val_wrap(y:bat[:oid,:dbl], xe_a:dbl) 
    af_a := calc.dbl(1);                # 16 af_a:dbl := CALCflt2dbl(_5:flt) 
    bat.append(y,af_a);                 # 17 _22:void := BKCappend_val_wrap(y:bat[:oid,:dbl], af_a:dbl) 
    io.print(y);                        # 18 _23:void := IOprint_val(y:bat[:oid,:dbl]) 
    z := batcalc.<(y,2:dbl);            # 19 z:bat[:oid,:bit] := CMD_LT_dbl_cst(y:bat[:oid,:dbl], _25:dbl) {G}
    io.print(z);                        # 20 _26:void := IOprint_val(z:bat[:oid,:bit]) 
    c := aggr.count(z);                 # 21 c:int := ALGcount_bat(z:bat[:oid,:bit]) 
    io.print("count");                  # 22 _28:void := IOprint_val(_29:str) 
    io.print(c);                        # 23 _30:void := IOprint_val(c:int) 
    x := bat.new(:oid,:bit);            # 24 x:bat[:oid,:bit] := CMDBATnew(_2:oid, _32:bit) {G}
    bat.append(x,true);                 # 25 _33:void := BKCappend_val_wrap(x:bat[:oid,:bit], _34:bit) 
    bat.append(x,false);                # 26 _35:void := BKCappend_val_wrap(x:bat[:oid,:bit], _36:bit) 
    bat.append(x,true);                 # 27 _37:void := BKCappend_val_wrap(x:bat[:oid,:bit], _34:bit) 
    bat.append(x,false);                # 28 _38:void := BKCappend_val_wrap(x:bat[:oid,:bit], _36:bit) 
    io.print(x);                        # 29 _39:void := IOprint_val(x:bat[:oid,:bit]) 
    A := bat.new(:oid,:bit);            # 30 A:bat[:oid,:bit] := CMDBATnew(_2:oid, _32:bit) {G}
    bat.append(A,true);                 # 31 _41:void := BKCappend_val_wrap(A:bat[:oid,:bit], _34:bit) 
    bat.append(A,true);                 # 32 _42:void := BKCappend_val_wrap(A:bat[:oid,:bit], _34:bit) 
    bat.append(A,false);                # 33 _43:void := BKCappend_val_wrap(A:bat[:oid,:bit], _36:bit) 
    bat.append(A,false);                # 34 _44:void := BKCappend_val_wrap(A:bat[:oid,:bit], _36:bit) 
    io.print(A);                        # 35 _45:void := IOprint_val(A:bat[:oid,:bit]) 
    xn := batcalc.not(x);               # 36 xn:bat[:oid,:bit] := CMDbitbatNOT(x:bat[:oid,:bit]) {G}
    io.print(x,xn);                     # 37 _47:void := IOtable(x:bat[:oid,:bit], xn:bat[:oid,:bit]) 
    xandx := batcalc.and(x,A);          # 38 xandx:bat[:oid,:bit] := CMD_AND_bit(x:bat[:oid,:bit], A:bat[:oid,:bit]) {G}
    io.print(x,xandx);                  # 39 _49:void := IOtable(x:bat[:oid,:bit], xandx:bat[:oid,:bit]) 
    xorx := batcalc.or(x,A);            # 40 xorx:bat[:oid,:bit] := CMD_OR_bit(x:bat[:oid,:bit], A:bat[:oid,:bit]) {G}
    io.print(x,xorx);                   # 41 _51:void := IOtable(x:bat[:oid,:bit], xorx:bat[:oid,:bit]) 
    io.print("ifthen group");           # 42 _52:void := IOprint_val(_53:str) 
    xif0 := batcalc.ifthen(x,x);        # 43 xif0:bat[:oid,:bit] := CMDifThen_bit(x:bat[:oid,:bit], x:bat[:oid,:bit]) {G}
    io.print(x,xif0);                   # 44 _55:void := IOtable(x:bat[:oid,:bit], xif0:bat[:oid,:bit]) 
    xif1 := batcalc.ifthen(x,false);    # 45 xif1:bat[:oid,:bit] := CMDifThenCst_bit(x:bat[:oid,:bit], _36:bit) {G}
    io.print(x,xif1);                   # 46 _57:void := IOtable(x:bat[:oid,:bit], xif1:bat[:oid,:bit]) 
    xif2 := batcalc.ifthenelse(x,x,xn); # 47 xif2:bat[:oid,:bit] := CMDifThenElse_bit(x:bat[:oid,:bit], x:bat[:oid,:bit], xn:bat[:oid,:bit]) {G}
    io.print(x,x,xn,xif2);              # 48 _59:void := IOtable(x:bat[:oid,:bit], x:bat[:oid,:bit], xn:bat[:oid,:bit], xif2:bat[:oid,:bit]) 
    xif3 := batcalc.ifthenelse(x,x,true);# 49 xif3:bat[:oid,:bit] := CMDifThenElseCst2_bit(x:bat[:oid,:bit], x:bat[:oid,:bit], _34:bit) {G}
    io.print(x,x,xif3);                 # 50 _61:void := IOtable(x:bat[:oid,:bit], x:bat[:oid,:bit], xif3:bat[:oid,:bit]) 
    xif4 := batcalc.ifthenelse(x,1,2);  # 51 xif4:bat[:oid,:int] := CMDifThenElseCst_int(x:bat[:oid,:bit], _63:int, _64:int) {G}
    io.print(x,xif4);                   # 52 _65:void := IOtable(x:bat[:oid,:bit], xif4:bat[:oid,:int]) 
    io.print("accumulators");           # 53 _66:void := IOprint_val(_67:str) 
    x2 := batcalc.not(x,x);             # 54 x2:bat[:oid,:bit] := CMDbitbataccumNOT(x:bat[:oid,:bit], x:bat[:oid,:bit]) {G}
    io.print(x,x2);                     # 55 _69:void := IOtable(x:bat[:oid,:bit], x2:bat[:oid,:bit]) 
    x3 := batcalc.and(x,A);             # 56 x3:bat[:oid,:bit] := CMD_AND_bit(x:bat[:oid,:bit], A:bat[:oid,:bit]) {G}
    io.print(x,A,x3);                   # 57 _71:void := IOtable(x:bat[:oid,:bit], A:bat[:oid,:bit], x3:bat[:oid,:bit]) 
    x4 := batcalc.or(x,A);              # 58 x4:bat[:oid,:bit] := CMD_OR_bit(x:bat[:oid,:bit], A:bat[:oid,:bit]) {G}
    io.print(x,A,x4);                   # 59 _73:void := IOtable(x:bat[:oid,:bit], A:bat[:oid,:bit], x4:bat[:oid,:bit]) 
end main;	# 60  
#-----------------#
# h	t	  # name
# oid	dbl	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  2	  ]
[ 2@0,	  2	  ]
[ 3@0,	  2	  ]
[ 4@0,	  2	  ]
[ 5@0,	  3	  ]
[ 6@0,	  1	  ]
[ 7@0,	  1	  ]
#-----------------#
# h	tmp_5	  # name
# oid	bit	  # type
#-----------------#
[ 0@0,	  true	  ]
[ 1@0,	  false	  ]
[ 2@0,	  false	  ]
[ 3@0,	  false	  ]
[ 4@0,	  false	  ]
[ 5@0,	  false	  ]
[ 6@0,	  true	  ]
[ 7@0,	  true	  ]
[ "count" ]
[ 8 ]
#-----------------#
# h	tmp_6	  # name
# oid	bit	  # type
#-----------------#
[ 0@0,	  true	  ]
[ 1@0,	  false	  ]
[ 2@0,	  true	  ]
[ 3@0,	  false	  ]
#-----------------#
# h	tmp_7	  # name
# oid	bit	  # type
#-----------------#
[ 0@0,	  true	  ]
[ 1@0,	  true	  ]
[ 2@0,	  false	  ]
[ 3@0,	  false	  ]
#-------------------------#
# h	tmp_6	tmp_8	  # name
# oid	bit	bit	  # type
#-------------------------#
[ 0@0,	  true,	  false	  ]
[ 1@0,	  false,  true	  ]
[ 2@0,	  true,	  false	  ]
[ 3@0,	  false,  true	  ]
#-------------------------#
# h	tmp_6	tmp_9	  # name
# oid	bit	bit	  # type
#-------------------------#
[ 0@0,	  true,	  true	  ]
[ 1@0,	  false,  false	  ]
[ 2@0,	  true,	  false	  ]
[ 3@0,	  false,  false	  ]
#-------------------------#
# h	tmp_6	tmp_10	  # name
# oid	bit	bit	  # type
#-------------------------#
[ 0@0,	  true,	  true	  ]
[ 1@0,	  false,  true	  ]
[ 2@0,	  true,	  true	  ]
[ 3@0,	  false,  false	  ]
[ "ifthen group" ]
#-------------------------#
# h	tmp_6	tmp_11	  # name
# oid	bit	bit	  # type
#-------------------------#
[ 0@0,	  true,	  true	  ]
[ 2@0,	  true,	  true	  ]
#-------------------------#
# h	tmp_6	tmp_12	  # name
# oid	bit	bit	  # type
#-------------------------#
[ 0@0,	  true,	  false	  ]
[ 2@0,	  true,	  false	  ]
#-----------------------------------------#
# h	tmp_6	tmp_6	tmp_8	tmp_13	  # name
# oid	bit	bit	bit	bit	  # type
#-----------------------------------------#
[ 0@0,	  true,	  true,	  false,  true	  ]
[ 1@0,	  false,  false,  true,	  true	  ]
[ 2@0,	  true,	  true,	  false,  true	  ]
[ 3@0,	  false,  false,  true,	  true	  ]
#---------------------------------#
# h	tmp_6	tmp_6	tmp_14	  # name
# oid	bit	bit	bit	  # type
#---------------------------------#
[ 0@0,	  true,	  true,	  true	  ]
[ 1@0,	  false,  false,  true	  ]
[ 2@0,	  true,	  true,	  true	  ]
[ 3@0,	  false,  false,  true	  ]
#-------------------------#
# h	t	t	  # name
# void	bit	int	  # type
#-------------------------#
[ 0@0,	  true,	  1	  ]
[ 1@0,	  false,  2	  ]
[ 2@0,	  true,	  1	  ]
[ 3@0,	  false,  2	  ]
[ "accumulators" ]
#-------------------------#
# h	tmp_6	tmp_6	  # name
# oid	bit	bit	  # type
#-------------------------#
[ 0@0,	  false,  false	  ]
[ 1@0,	  true,	  true	  ]
[ 2@0,	  false,  false	  ]
[ 3@0,	  true,	  true	  ]
#---------------------------------#
# h	tmp_6	tmp_7	tmp_16	  # name
# oid	bit	bit	bit	  # type
#---------------------------------#
[ 0@0,	  false,  true,	  false	  ]
[ 1@0,	  true,	  true,	  true	  ]
[ 2@0,	  false,  false,  false	  ]
[ 3@0,	  true,	  false,  false	  ]
#---------------------------------#
# h	tmp_6	tmp_7	tmp_17	  # name
# oid	bit	bit	bit	  # type
#---------------------------------#
[ 0@0,	  false,  true,	  true	  ]
[ 1@0,	  true,	  true,	  true	  ]
[ 2@0,	  false,  false,  false	  ]
[ 3@0,	  true,	  false,  true	  ]

# 07:59:08 >  
# 07:59:08 >  Done.
# 07:59:08 >  

