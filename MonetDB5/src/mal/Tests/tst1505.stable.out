stdout of test 'tst1505` in directory 'src/mal` itself:


# 07:59:08 >  
# 07:59:08 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst1505.mal </dev/null
# 07:59:08 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
#	y := new(:oid,:dbl);
#	le_a := dbl(1.0);
#	me_a := insert(y,1@0,le_a);
#	ne_a := dbl(2.0);
#	oe_a := insert(y,2@0,ne_a);
#	pe_a := dbl(2.0);
#	qe_a := insert(y,3@0,pe_a);
#	re_a := dbl(2.0);
#	se_a := insert(y,4@0,re_a);
#	te_a := dbl(2.0);
#	ue_a := insert(y,5@0,te_a);
#	ve_a := dbl(3.0);
#	we_a := insert(y,6@0,ve_a);
#	xe_a := dbl(1.0);
#	ye_a := insert(y,7@0,xe_a);
#	af_a := dbl(1.0);
#	bf_a := insert(y,8@0,af_a);
#
#z:= <(y,2.0:dbl);
#print(z);
#c:= count(z);
#print("count");print(c);
#
#	x:= new(:oid,:bit);
#	insert(x,1@0,true);
#	insert(x,2@0,false);
#	insert(x,3@0,true);
#	insert(x,4@0,false);
#	print(x);
#	A:= new(:oid,:bit);
#	insert(A,1@0,true);
#	insert(A,2@0,true);
#	insert(A,3@0,false);
#	insert(A,4@0,false);
#	print(A);
#	xn:= not(x); print(x,xn);
#	xandx:= and(x,A); print(x,xandx);
#	xorx:= or(x,A); print(x,xorx);
#print("ifthen group");
#	xif0:= ifthen(x,x);print(x,xif0);
#	xif1:= ifthen(x,false);print(x,xif1);
#	xif2:= ifthenelse(x,x,xn);print(x,x,xn,xif2);
#	xif3:= ifthenelse(x,x,true);print(x,x,xif3);
#	xif4:= ifthenelse(x,1,2);print(x,xif4);
#print("accumulators");
#	x2:= not(x,x); print(x,x2);
#	x3:= and(x,A); print(x,A,x3);
#	x4:= or(x,A); print(x,A,x4);
#
function user.main():void;	# 0  (main:void)
    y := bat.new(:void,:dbl);	# 1 CMDBATnew (y:bat[:void,:dbl])<-(_2:void)(_3:dbl)
    bat.setSequenceBase(y,0@0);	# 2 BKCsetSequenceBase (_4:bat[:void,:dbl])<-(y:bat[:void,:dbl])(_5:oid)
    le_a := calc.dbl(1);	# 3 CALCflt2dbl (le_a:dbl)<-(_7:flt)
    me_a := bat.append(y,le_a);	# 4 BKCappend_val_wrap (me_a:void)<-(y:bat[:void,:dbl])(le_a:dbl)
    ne_a := calc.dbl(2);	# 5 CALCflt2dbl (ne_a:dbl)<-(_10:flt)
    oe_a := bat.append(y,ne_a);	# 6 BKCappend_val_wrap (oe_a:void)<-(y:bat[:void,:dbl])(ne_a:dbl)
    pe_a := calc.dbl(2);	# 7 CALCflt2dbl (pe_a:dbl)<-(_10:flt)
    qe_a := bat.append(y,pe_a);	# 8 BKCappend_val_wrap (qe_a:void)<-(y:bat[:void,:dbl])(pe_a:dbl)
    re_a := calc.dbl(2);	# 9 CALCflt2dbl (re_a:dbl)<-(_10:flt)
    se_a := bat.append(y,re_a);	# 10 BKCappend_val_wrap (se_a:void)<-(y:bat[:void,:dbl])(re_a:dbl)
    te_a := calc.dbl(2);	# 11 CALCflt2dbl (te_a:dbl)<-(_10:flt)
    ue_a := bat.append(y,te_a);	# 12 BKCappend_val_wrap (ue_a:void)<-(y:bat[:void,:dbl])(te_a:dbl)
    ve_a := calc.dbl(3);	# 13 CALCflt2dbl (ve_a:dbl)<-(_19:flt)
    we_a := bat.append(y,ve_a);	# 14 BKCappend_val_wrap (we_a:void)<-(y:bat[:void,:dbl])(ve_a:dbl)
    xe_a := calc.dbl(1);	# 15 CALCflt2dbl (xe_a:dbl)<-(_7:flt)
    ye_a := bat.append(y,xe_a);	# 16 BKCappend_val_wrap (ye_a:void)<-(y:bat[:void,:dbl])(xe_a:dbl)
    af_a := calc.dbl(1);	# 17 CALCflt2dbl (af_a:dbl)<-(_7:flt)
    bf_a := bat.append(y,af_a);	# 18 BKCappend_val_wrap (bf_a:void)<-(y:bat[:void,:dbl])(af_a:dbl)
    z := batcalc.<(y,2:dbl);	# 19 CMDcmpLTcst (z:bat[:void,:bit])<-(y:bat[:void,:dbl])(_26:dbl)
    io.print(z);	# 20 IOprint_val (_27:int)<-(z:bat[:void,:bit])
    c := aggr.count(z);	# 21 ALGcount_bat (c:int)<-(z:bat[:void,:bit])
    io.print("count");	# 22 IOprint_val (_29:int)<-(_30:str)
    io.print(c);	# 23 IOprint_val (_31:int)<-(c:int)
    x := bat.new(:void,:bit);	# 24 CMDBATnew (x:bat[:void,:bit])<-(_2:void)(_33:bit)
    bat.append(x,true);	# 25 BKCappend_val_wrap (_34:void)<-(x:bat[:void,:bit])(_35:bit)
    bat.append(x,false);	# 26 BKCappend_val_wrap (_36:void)<-(x:bat[:void,:bit])(_37:bit)
    bat.append(x,true);	# 27 BKCappend_val_wrap (_38:void)<-(x:bat[:void,:bit])(_35:bit)
    bat.append(x,false);	# 28 BKCappend_val_wrap (_39:void)<-(x:bat[:void,:bit])(_37:bit)
    bat.setSequenceBase(x,0@0);	# 29 BKCsetSequenceBase (_40:bat[:void,:bit])<-(x:bat[:void,:bit])(_5:oid)
    io.print(x);	# 30 IOprint_val (_41:int)<-(x:bat[:void,:bit])
    A := bat.new(:void,:bit);	# 31 CMDBATnew (A:bat[:void,:bit])<-(_2:void)(_33:bit)
    bat.setSequenceBase(A,0@0);	# 32 BKCsetSequenceBase (_43:bat[:void,:bit])<-(A:bat[:void,:bit])(_44:oid)
    bat.append(A,true);	# 33 BKCappend_val_wrap (_45:void)<-(A:bat[:void,:bit])(_35:bit)
    bat.append(A,true);	# 34 BKCappend_val_wrap (_46:void)<-(A:bat[:void,:bit])(_35:bit)
    bat.append(A,false);	# 35 BKCappend_val_wrap (_47:void)<-(A:bat[:void,:bit])(_37:bit)
    bat.append(A,false);	# 36 BKCappend_val_wrap (_48:void)<-(A:bat[:void,:bit])(_37:bit)
    io.print(A);	# 37 IOprint_val (_49:int)<-(A:bat[:void,:bit])
    xn := batcalc.not(x);	# 38 CMDbitbatNOT (xn:bat[:void,:bit])<-(x:bat[:void,:bit])
    io.print(x,xn);	# 39 IOtable (_51:int)<-(x:bat[:void,:bit])(xn:bat[:void,:bit])
    xandx := batcalc.and(x,A);	# 40 CMDcmpAND (xandx:bat[:void,:bit])<-(x:bat[:void,:bit])(A:bat[:void,:bit])
    io.print(x,xandx);	# 41 IOtable (_53:int)<-(x:bat[:void,:bit])(xandx:bat[:void,:bit])
    xorx := batcalc.or(x,A);	# 42 CMDcmpOR (xorx:bat[:void,:bit])<-(x:bat[:void,:bit])(A:bat[:void,:bit])
    io.print(x,xorx);	# 43 IOtable (_55:int)<-(x:bat[:void,:bit])(xorx:bat[:void,:bit])
    io.print("ifthen group");	# 44 IOprint_val (_56:int)<-(_57:str)
    xif0 := batcalc.ifthen(x,x);	# 45 CMDifThen (xif0:bat[:void,:bit])<-(x:bat[:void,:bit])(x:bat[:void,:bit])
    io.print(x,xif0);	# 46 IOtable (_59:int)<-(x:bat[:void,:bit])(xif0:bat[:void,:bit])
    xif1 := batcalc.ifthen(x,false);	# 47 CMDifThenCst_bit (xif1:bat[:void,:bit])<-(x:bat[:void,:bit])(_37:bit)
    io.print(x,xif1);	# 48 IOtable (_61:int)<-(x:bat[:void,:bit])(xif1:bat[:void,:bit])
    xif2 := batcalc.ifthenelse(x,x,xn);	# 49 CMDifThenElse (xif2:bat[:void,:bit])<-(x:bat[:void,:bit])(x:bat[:void,:bit])(xn:bat[:void,:bit])
    io.print(x,x,xn,xif2);	# 50 IOtable (_63:int)<-(x:bat[:void,:bit])(x:bat[:void,:bit])(xn:bat[:void,:bit])(xif2:bat[:void,:bit])
    xif3 := batcalc.ifthenelse(x,x,true);	# 51 CMDifThenElseCst2 (xif3:bat[:void,:bit])<-(x:bat[:void,:bit])(x:bat[:void,:bit])(_35:bit)
    io.print(x,x,xif3);	# 52 IOtable (_65:int)<-(x:bat[:void,:bit])(x:bat[:void,:bit])(xif3:bat[:void,:bit])
    xif4 := batcalc.ifthenelse(x,1,2);	# 53 CMDifThenElseCst_int (xif4:bat[:void,:int])<-(x:bat[:void,:bit])(_67:int)(_68:int)
    io.print(x,xif4);	# 54 IOtable (_69:int)<-(x:bat[:void,:bit])(xif4:bat[:void,:int])
    io.print("accumulators");	# 55 IOprint_val (_70:int)<-(_71:str)
    x2 := batcalc.not(x,x);	# 56 CMDbitbataccumNOT (x2:bat[:void,:bit])<-(x:bat[:void,:bit])(x:bat[:void,:bit])
    io.print(x,x2);	# 57 IOtable (_73:int)<-(x:bat[:void,:bit])(x2:bat[:void,:bit])
    x3 := batcalc.and(x,A);	# 58 CMDcmpAND (x3:bat[:void,:bit])<-(x:bat[:void,:bit])(A:bat[:void,:bit])
    io.print(x,A,x3);	# 59 IOtable (_75:int)<-(x:bat[:void,:bit])(A:bat[:void,:bit])(x3:bat[:void,:bit])
    x4 := batcalc.or(x,A);	# 60 CMDcmpOR (x4:bat[:void,:bit])<-(x:bat[:void,:bit])(A:bat[:void,:bit])
    io.print(x,A,x4);	# 61 IOtable (_77:int)<-(x:bat[:void,:bit])(A:bat[:void,:bit])(x4:bat[:void,:bit])
end main;	# 62  
#-----------------#
# h	tmp_5	  # name
# oid	bit	  # type
#-----------------#
[ 0@0,	  true	  ]
[ 1@0,	  false	  ]
[ 2@0,	  false	  ]
[ 3@0,	  false	  ]
[ 4@0,	  false	  ]
[ 5@0,	  false	  ]
[ 6@0,	  true	  ]
[ 7@0,	  true	  ]
[ "count" ]
[ 8 ]
#-----------------#
# h	tmp_6	  # name
# oid	bit	  # type
#-----------------#
[ 0@0,	  true	  ]
[ 1@0,	  false	  ]
[ 2@0,	  true	  ]
[ 3@0,	  false	  ]
#-----------------#
# h	tmp_7	  # name
# oid	bit	  # type
#-----------------#
[ 0@0,	  true	  ]
[ 1@0,	  true	  ]
[ 2@0,	  false	  ]
[ 3@0,	  false	  ]
#-------------------------#
# h	tmp_6	tmp_8	  # name
# oid	bit	bit	  # type
#-------------------------#
[ 0@0,	  true,	  false	  ]
[ 1@0,	  false,  true	  ]
[ 2@0,	  true,	  false	  ]
[ 3@0,	  false,  true	  ]
#-------------------------#
# h	tmp_6	tmp_9	  # name
# oid	bit	bit	  # type
#-------------------------#
[ 0@0,	  true,	  true	  ]
[ 1@0,	  false,  false	  ]
[ 2@0,	  true,	  false	  ]
[ 3@0,	  false,  false	  ]
#-------------------------#
# h	tmp_6	tmp_10	  # name
# oid	bit	bit	  # type
#-------------------------#
[ 0@0,	  true,	  true	  ]
[ 1@0,	  false,  true	  ]
[ 2@0,	  true,	  true	  ]
[ 3@0,	  false,  false	  ]
[ "ifthen group" ]
#-------------------------#
# h	tmp_6	tmp_11	  # name
# oid	bit	bit	  # type
#-------------------------#
[ 0@0,	  true,	  true	  ]
[ 2@0,	  true,	  true	  ]
#-------------------------#
# h	tmp_6	tmp_12	  # name
# oid	bit	bit	  # type
#-------------------------#
[ 0@0,	  true,	  false	  ]
[ 2@0,	  true,	  false	  ]
#-----------------------------------------#
# h	tmp_6	tmp_6	tmp_8	tmp_13	  # name
# oid	bit	bit	bit	bit	  # type
#-----------------------------------------#
[ 0@0,	  true,	  true,	  false,  true	  ]
[ 1@0,	  false,  false,  true,	  true	  ]
[ 2@0,	  true,	  true,	  false,  true	  ]
[ 3@0,	  false,  false,  true,	  true	  ]
#---------------------------------#
# h	tmp_6	tmp_6	tmp_14	  # name
# oid	bit	bit	bit	  # type
#---------------------------------#
[ 0@0,	  true,	  true,	  true	  ]
[ 1@0,	  false,  false,  true	  ]
[ 2@0,	  true,	  true,	  true	  ]
[ 3@0,	  false,  false,  true	  ]
#-------------------------#
# h	t	t	  # name
# void	bit	int	  # type
#-------------------------#
[ 0@0,	  true,	  1	  ]
[ 1@0,	  false,  2	  ]
[ 2@0,	  true,	  1	  ]
[ 3@0,	  false,  2	  ]
[ "accumulators" ]
#-------------------------#
# h	tmp_6	tmp_6	  # name
# oid	bit	bit	  # type
#-------------------------#
[ 0@0,	  false,  false	  ]
[ 1@0,	  true,	  true	  ]
[ 2@0,	  false,  false	  ]
[ 3@0,	  true,	  true	  ]
#---------------------------------#
# h	tmp_6	tmp_7	tmp_16	  # name
# oid	bit	bit	bit	  # type
#---------------------------------#
[ 0@0,	  false,  true,	  false	  ]
[ 1@0,	  true,	  true,	  true	  ]
[ 2@0,	  false,  false,  false	  ]
[ 3@0,	  true,	  false,  false	  ]
#---------------------------------#
# h	tmp_6	tmp_7	tmp_17	  # name
# oid	bit	bit	bit	  # type
#---------------------------------#
[ 0@0,	  false,  true,	  true	  ]
[ 1@0,	  true,	  true,	  true	  ]
[ 2@0,	  false,  false,  false	  ]
[ 3@0,	  true,	  false,  true	  ]

# 07:59:08 >  
# 07:59:08 >  Done.
# 07:59:08 >  

