stdout of test 'tst1502` in directory 'src/mal` itself:


# 07:59:07 >  
# 07:59:07 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/log" --set mapi_port=42158 --set sql_port=55708 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst1502.mal </dev/null
# 07:59:07 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
#	x := new(:oid,:chr);
#	insert(x,1@0,'a');
#	insert(x,2@0,'a');
#	insert(x,3@0,'b');
#	insert(x,4@0,'b');
#	insert(x,5@0,'b');
#	insert(x,6@0,'b');
#	insert(x,7@0,'c');
#	insert(x,8@0,'c');
#
#	y := new(:oid,:dbl);
#	le_a := dbl(1.0);
#	insert(y,1@0,le_a);
#	ne_a := dbl(2.0);
#	insert(y,2@0,ne_a);
#	pe_a := dbl(2.0);
#	insert(y,3@0,pe_a);
#	re_a := dbl(2.0);
#	insert(y,4@0,re_a);
#	te_a := dbl(2.0);
#	insert(y,5@0,te_a);
#	ve_a := dbl(3.0);
#	insert(y,6@0,ve_a);
#	xe_a := dbl(1.0);
#	insert(y,7@0,xe_a);
#	af_a := dbl(1.0);
#	insert(y,8@0,af_a);
#
#	z := new(:oid,:str);
#	insert(z,1@0,"c");
#	insert(z,2@0,"a");
#	insert(z,3@0,"b");
#	insert(z,4@0,"c");
#	insert(z,5@0,"a");
#	hf_a := insert(z,6@0,"a");
#	insert(z,7@0,"c");
#	insert(z,8@0,"a");
#	print("sort x"); 
#	xs:=sort(x); 
#	print(xs);
#	print("sort xrev"); 
#	xrev:=reverse(x);
#	xsrev:=sort(xrev); 
#	print(xsrev);
#
#
function user.main():int;	# 0  (main:int)
    x := bat.new(:oid,:chr);	# 1 CMDBATnew (x:bat[:oid,:chr])<-(_2:oid)(_3:chr)
    bat.insert(x,1@0,'a');	# 2 BKCinsert_bun_oid_any (_4:void)<-(x:bat[:oid,:chr])(_5:oid)(_6:chr)
    bat.insert(x,2@0,'a');	# 3 BKCinsert_bun_oid_any (_7:void)<-(x:bat[:oid,:chr])(_8:oid)(_6:chr)
    bat.insert(x,3@0,'b');	# 4 BKCinsert_bun_oid_any (_9:void)<-(x:bat[:oid,:chr])(_10:oid)(_11:chr)
    bat.insert(x,4@0,'b');	# 5 BKCinsert_bun_oid_any (_12:void)<-(x:bat[:oid,:chr])(_13:oid)(_11:chr)
    bat.insert(x,5@0,'b');	# 6 BKCinsert_bun_oid_any (_14:void)<-(x:bat[:oid,:chr])(_15:oid)(_11:chr)
    bat.insert(x,6@0,'b');	# 7 BKCinsert_bun_oid_any (_16:void)<-(x:bat[:oid,:chr])(_17:oid)(_11:chr)
    bat.insert(x,7@0,'c');	# 8 BKCinsert_bun_oid_any (_18:void)<-(x:bat[:oid,:chr])(_19:oid)(_20:chr)
    bat.insert(x,8@0,'c');	# 9 BKCinsert_bun_oid_any (_21:void)<-(x:bat[:oid,:chr])(_22:oid)(_20:chr)
    y := bat.new(:oid,:dbl);	# 10 CMDBATnew (y:bat[:oid,:dbl])<-(_2:oid)(_24:dbl)
    le_a := calc.dbl(1.0);	# 11 CALCflt2dbl (le_a:dbl)<-(_26:flt)
    bat.insert(y,1@0,le_a);	# 12 BKCinsert_bun_oid_any (_27:void)<-(y:bat[:oid,:dbl])(_5:oid)(le_a:dbl)
    ne_a := calc.dbl(2.0);	# 13 CALCflt2dbl (ne_a:dbl)<-(_29:flt)
    bat.insert(y,2@0,ne_a);	# 14 BKCinsert_bun_oid_any (_30:void)<-(y:bat[:oid,:dbl])(_8:oid)(ne_a:dbl)
    pe_a := calc.dbl(2.0);	# 15 CALCflt2dbl (pe_a:dbl)<-(_29:flt)
    bat.insert(y,3@0,pe_a);	# 16 BKCinsert_bun_oid_any (_32:void)<-(y:bat[:oid,:dbl])(_10:oid)(pe_a:dbl)
    re_a := calc.dbl(2.0);	# 17 CALCflt2dbl (re_a:dbl)<-(_29:flt)
    bat.insert(y,4@0,re_a);	# 18 BKCinsert_bun_oid_any (_34:void)<-(y:bat[:oid,:dbl])(_13:oid)(re_a:dbl)
    te_a := calc.dbl(2.0);	# 19 CALCflt2dbl (te_a:dbl)<-(_29:flt)
    bat.insert(y,5@0,te_a);	# 20 BKCinsert_bun_oid_any (_36:void)<-(y:bat[:oid,:dbl])(_15:oid)(te_a:dbl)
    ve_a := calc.dbl(3.0);	# 21 CALCflt2dbl (ve_a:dbl)<-(_38:flt)
    bat.insert(y,6@0,ve_a);	# 22 BKCinsert_bun_oid_any (_39:void)<-(y:bat[:oid,:dbl])(_17:oid)(ve_a:dbl)
    xe_a := calc.dbl(1.0);	# 23 CALCflt2dbl (xe_a:dbl)<-(_26:flt)
    bat.insert(y,7@0,xe_a);	# 24 BKCinsert_bun_oid_any (_41:void)<-(y:bat[:oid,:dbl])(_19:oid)(xe_a:dbl)
    af_a := calc.dbl(1.0);	# 25 CALCflt2dbl (af_a:dbl)<-(_26:flt)
    bat.insert(y,8@0,af_a);	# 26 BKCinsert_bun_oid_any (_43:void)<-(y:bat[:oid,:dbl])(_22:oid)(af_a:dbl)
    z := bat.new(:oid,:str);	# 27 CMDBATnew (z:bat[:oid,:str])<-(_2:oid)(_45:str)
    bat.insert(z,1@0,"c");	# 28 BKCinsert_bun_oid_str (_46:void)<-(z:bat[:oid,:str])(_47:oid)(_48:str)
    bat.insert(z,2@0,"a");	# 29 BKCinsert_bun_oid_str (_49:void)<-(z:bat[:oid,:str])(_50:oid)(_51:str)
    bat.insert(z,3@0,"b");	# 30 BKCinsert_bun_oid_str (_52:void)<-(z:bat[:oid,:str])(_53:oid)(_54:str)
    bat.insert(z,4@0,"c");	# 31 BKCinsert_bun_oid_str (_55:void)<-(z:bat[:oid,:str])(_56:oid)(_48:str)
    bat.insert(z,5@0,"a");	# 32 BKCinsert_bun_oid_str (_57:void)<-(z:bat[:oid,:str])(_58:oid)(_51:str)
    hf_a := bat.insert(z,6@0,"a");	# 33 BKCinsert_bun_oid_str (hf_a:void)<-(z:bat[:oid,:str])(_60:oid)(_51:str)
    bat.insert(z,7@0,"c");	# 34 BKCinsert_bun_oid_str (_61:void)<-(z:bat[:oid,:str])(_62:oid)(_48:str)
    bat.insert(z,8@0,"a");	# 35 BKCinsert_bun_oid_str (_63:void)<-(z:bat[:oid,:str])(_64:oid)(_51:str)
    io.print("sort x");	# 36 IOprint_val (_65:int)<-(_66:str)
    xs := algebra.sort(x);	# 37 ALGtsort (xs:bat[:oid,:chr])<-(x:bat[:oid,:chr])
    io.print(xs);	# 38 IOprint_val (_68:int)<-(xs:bat[:oid,:chr])
    io.print("hsort xrev");	# 39 IOprint_val (_69:int)<-(_70:str)
    xrev := bat.reverse(x);	# 40 BKCreverse (xrev:bat[:chr,:oid])<-(x:bat[:oid,:chr])
    xsrev := algebra.sort(xrev);	# 41 ALGtsort (xsrev:bat[:chr,:oid])<-(xrev:bat[:chr,:oid])
    io.print(xsrev);	# 42 IOprint_val (_73:int)<-(xsrev:bat[:chr,:oid])
end main;	# 43  
[ "sort x" ]
#-----------------#
# h	tmp_7	  # name
# void	chr	  # type
#-----------------#
[ 1@0,	  'a'	  ]
[ 2@0,	  'a'	  ]
[ 3@0,	  'b'	  ]
[ 4@0,	  'b'	  ]
[ 5@0,	  'b'	  ]
[ 6@0,	  'b'	  ]
[ 7@0,	  'c'	  ]
[ 8@0,	  'c'	  ]
[ "hsort xrev" ]
#-----------------#
# h	tmp_8	  # name
# chr	void	  # type
#-----------------#
[ 'a',	  1@0	  ]
[ 'a',	  2@0	  ]
[ 'b',	  3@0	  ]
[ 'b',	  4@0	  ]
[ 'b',	  5@0	  ]
[ 'b',	  6@0	  ]
[ 'c',	  7@0	  ]
[ 'c',	  8@0	  ]

# 07:59:07 >  
# 07:59:07 >  Done.
# 07:59:07 >  

