stdout of test 'tst235` in directory 'src/mal` itself:


# 11:58:32 >  
# 11:58:32 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=37722 --set monet_prompt= --trace --dbname=mTests_src_mal  tst235.mal < /dev/null
# 11:58:32 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
## BAT references are seens as BAT's and should be subject to the
## same reference scheme.
#
#function dir():void;
#	d:= bbp.getRefCount();
#	dl:=bbp.getLRefCount();
#	dn:= bbp.getNames();
#	io.print(dn,d,dl);
#end dir;
function user.dir():void;               #  0 dir:void := user.dir() {G}
    d := bbp.getRefCount();             #  1 d:bat[:int,:int] := CMDbbpRefCount() {G}
    dl := bbp.getLRefCount();           #  2 dl:bat[:int,:int] := CMDbbpLRefCount() {G}
    dn := bbp.getNames();               #  3 dn:bat[:int,:str] := CMDbbpNames() {G}
    ds := algebra.sort(dn);             #  4 ds:bat[:int,:str] := ALGhsort(dn:bat[:int,:str]) {G}
    io.table(ds,d,dl);                  #  5 _5:void := IOttable(ds:bat[:int,:str], d:bat[:int,:int], dl:bat[:int,:int]) 
end dir;	# 6  
#
#function createBAT(name:str):bat;
#    res:= bat.new(:int,:int);
#    bat.setName(res,name);
#    i:= calc.bat(res);
#	j:= i; # now res should have 3 lrefs
#	dir();
#    return i;
#end createBAT;
function user.createBAT(name:str):BAT;  #  0 createBAT:BAT := user.createBAT(name:str) {G}
    res := bat.new(:int,:int);          #  1 res:bat[:int,:int] := CMDBATnew(_3:int, _3:int) {G}
    bat.setName(res,name);              #  2 _4:void := BKCsetName(res:bat[:int,:int], name:str) 
    i := calc.getBATidentifier(res);    #  3 i:BAT := CALCbat2batid(res:bat[:int,:int]) {G}
    j := i;                             #  4 j:BAT := i:BAT {G}
# now res should have 3 lrefs 
    z := bbp.getLRefCount(res);         #  6 z:int := CMDgetBATlrefcnt(res:bat[:int,:int]) 
    io.print(z);                        #  7 _9:void := IOprint_val(z:int) 
    return createBAT := i;              #  8 createBAT:BAT := i:BAT {G}
end createBAT;	# 9  
#
#dir();
#d:= user.createBAT("one");
#io.print(d); # bat d should have 1 lref
#dir();
#
function user.main():void;              #  0 main:void := user.main() {G}
# BAT references are seens as BAT's and should be subject to the 
# same reference scheme. 
    d := user.createBAT("one");         #  3 d:BAT := user.createBAT(_4:str) {G}
    i := bbp.getLRefCount(d);           #  4 i:int := CMDgetBATlrefcnt(d:BAT) 
    io.print(i);                        #  5 _6:void := IOprint_val(i:int) 
# bat d should have 1 lref 
end main;	# 7  
[ 3 ]
[ 1 ]

# 11:58:33 >  
# 11:58:33 >  Done.
# 11:58:33 >  

