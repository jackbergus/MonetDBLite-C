stdout of test 'tst235` in directory 'src/mal` itself:


# 11:58:32 >  
# 11:58:32 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=37722 --set monet_prompt= --trace --dbname=mTests_src_mal  tst235.mal < /dev/null
# 11:58:32 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
## BAT references are seens as BAT's and should be subject to the
## same reference scheme.
#
#function dir():void;
#	d:= bbp.getRefCount();
#	dl:=bbp.getLRefCount();
#	dn:= bbp.getNames();
#	io.print(dn,d,dl);
#end dir;
function user.dir():void;	# 0  (dir:void)
    d := bbp.getRefCount();	# 1 CMDbbpRefCount (d:bat[:int,:int])
    dl := bbp.getLRefCount();	# 2 CMDbbpLRefCount (dl:bat[:int,:int])
    dn := bbp.getNames();	# 3 CMDbbpNames (dn:bat[:int,:str])
    ds := algebra.sort(dn);	# 4 ALGhsort (ds:bat[:int,:str])<-(dn:bat[:int,:str])
    io.table(ds,d,dl);	# 5 IOttable (_5:void)<-(ds:bat[:int,:str])(d:bat[:int,:int])(dl:bat[:int,:int])
end dir;	# 6  
#
#function createBAT(name:str):bat;
#    res:= bat.new(:int,:int);
#    bat.setName(res,name);
#    i:= calc.bat(res);
#	j:= i; # now res should have 3 lrefs
#	dir();
#    return i;
#end createBAT;
function user.createBAT(name:str):BAT;	# 0  (createBAT:BAT)<-(name:str)
    res := bat.new(:int,:int);	# 1 CMDBATnew (res:bat[:int,:int])<-(_3:int)(_3:int)
    bat.setName(res,name);	# 2 BKCsetName (_4:void)<-(res:bat[:int,:int])(name:str)
    i := calc.getBATidentifier(res);	# 3 CALCbat2batid (i:BAT)<-(res:bat[:int,:int])
    j := i;	# 4  (j:BAT)<-(i:BAT)
# now res should have 3 lrefs 	# 5  (_7:str)
    z := bbp.getLRefCount(res);	# 6 CMDgetBATlrefcnt (z:int)<-(res:bat[:int,:int])
    io.print(z);	# 7 IOprint_val (_9:void)<-(z:int)
    return i;	# 8  (i:BAT)
end createBAT;	# 9  
#
#dir();
#d:= user.createBAT("one");
#io.print(d); # bat d should have 1 lref
#dir();
#
function user.main():void;	# 0  (main:void)
# BAT references are seens as BAT's and should be subject to the 	# 1  (_1:str)
# same reference scheme. 	# 2  (_2:str)
    d := user.createBAT("one");	# 3  (d:BAT)<-(_4:str)
    i := bbp.getLRefCount(d);	# 4 CMDgetBATlrefcnt (i:int)<-(d:BAT)
    io.print(i);	# 5 IOprint_val (_6:void)<-(i:int)
# bat d should have 1 lref 	# 6  (_7:str)
end main;	# 7  
[ 3 ]
[ 1 ]

# 11:58:33 >  
# 11:58:33 >  Done.
# 11:58:33 >  

