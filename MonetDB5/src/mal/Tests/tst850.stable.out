stdout of test 'tst850` in directory 'src/mal` itself:


# 14:43:54 >  
# 14:43:54 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=44824 --set sql_port=57958 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst850.mal </dev/null
# 14:43:54 >  

# Monet Database Server V4.5.0
# Copyright (c) 1993-2004, CWI. All rights reserved.
# Compiled for i686-redhat-linux-gnu/32bit; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## The likeselect operation
#
#	t:= new(:int,:str);
#	insert(t,1,"hello world");
#	insert(t,2,"sleep well");
#
#	b:= multiplex.script("startsWith",t,"");
#	print(b);
#
function user.main():int;	# 0  (main:int)
# The likeselect operation 	# 1  (_2:str)
    t := bat.new(:void,:str);	# 2 CMDBATnew (t:bat[:void,:str])<-(_4:void)(_5:str)
    bat.setSequenceBase(t,0@0);	# 3 BKCsetSequenceBase (_6:bat[:void,:str])<-(t:bat[:void,:str])(_7:oid)
    bat.insert(t,nil,"hello world");	# 4 BKCinsert_bun (_8:bat[:void,:str])<-(t:bat[:void,:str])(_9:void)(_10:str)
    bat.insert(t,nil,"sleep well");	# 5 BKCinsert_bun (_11:bat[:void,:str])<-(t:bat[:void,:str])(_9:void)(_12:str)
    io.print(t);	# 6 IOprint_val (_13:int)<-(t:bat[:void,:str])
    _19 := bat.new(:void,:bit);	# 7 CMDBATnew (_19:bat[:void,:bit])<-(_20:void)(_21:bit)
barrier (_23,_24,_25):= chopper.newIterator(t);	# 8 CHPbunIterator (_23:lng)(_24:void)(_25:str)<-(t:bat[:void,:str]) jump 14
    _27 := str.startsWith(_25,"");	# 9 STRPrefix (_27:bit)<-(_25:str)(_16:str)
    bat.insert(_19,_24,_27);	# 10 BKCinsert_bun (_28:bat[:void,:bit])<-(_19:bat[:void,:bit])(_24:void)(_27:bit)
catch MALexception;	# 11  (MALexception:str) jump 12
exit MALexception;	# 12  (MALexception:str)
    redo (_23,_24,_25):= chopper.hasMoreElements(t);	# 13 CHPbunHasMoreElements (_23:lng)(_24:void)(_25:str)<-(t:bat[:void,:str]) jump 9
exit (_23,_24,_25);	# 14  (_23:lng)(_24:void)(_25:str)
    b:bat[:void,:bit]  := _19;	# 15  (b:bat[:void,:bit])<-(_19:bat[:void,:bit])
    bat.setSequenceBase(b,0@0);	# 16 BKCsetSequenceBase (_17:bat[:void,:bit])<-(b:bat[:void,:bit])(_7:oid)
    io.print(b);	# 17 IOprint_val (_18:int)<-(b:bat[:void,:bit])
end main;	# 18  
#-------------------------#
# h	tmp_13		  # name
# void	str		  # type
#-------------------------#
[ 0@0,	  "hello world"	  ]
[ 1@0,	  "sleep well"	  ]
#-----------------#
# h	tmp_5	  # name
# int	bit	  # type
#-----------------#
[ 0@0,	  true	  ]
[ 1@0,	  true	  ]

# 14:43:54 >  
# 14:43:54 >  Done.
# 14:43:54 >  

