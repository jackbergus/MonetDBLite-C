stdout of test 'tst800` in directory 'src/mal` itself:


# 08:56:39 >  
# 08:56:39 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=39454 --set monet_prompt= --trace --dbname=mTests_src_mal  tst800.mal < /dev/null
# 08:56:39 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
##testing simple stuff around type BAT
#z:= bat.new(:int,:int);
#bat.insert(z,1,2);
#io.print(z);
#b:= bat.new(:int,:bat);
#zid:= calc.bat(z);
#io.print("zid");
#io.print(zid);
#za:bat[:int,:int]:= calc.bat(zid);
#io.print(za);
#io.print("zid done");
#
#i:= calc.bat(zid);
#io.print(i);
#
#bat.insert(b,0,zid);
#io.print(b);
#
#a:= algebra.fetch(b,0);
#io.print("fetch it");
#io.print(a);
#aa:bat[:int,:int]:= calc.bat(a);
#io.print(aa);
#io.print("done");
#
function user.main():void;              #  0 main:void := user.main() {G}
#testing simple stuff around type BAT 
    z := bat.new(:int,:int);            #  2 z:bat[:int,:int] := CMDBATnew(_3:int, _3:int) {G}
    bat.insert(z,1,2);                  #  3 _4:bat[:int,:int] := BKCinsert_bun(z:bat[:int,:int], _5:int, _6:int) {G}
    io.print(z);                        #  4 _7:void := IOprint_val(z:bat[:int,:int]) 
    b := bat.new(:int,:BAT);            #  5 b:bat[:int,:BAT] := CMDBATnew(_3:int, _9:BAT) {G}
    zid := calc.getBATidentifier(z);    #  6 zid:BAT := CALCbat2batid(z:bat[:int,:int]) {G}
    io.print("zid");                    #  7 _11:void := IOprint_val(_12:str) 
#io.print(zid); 
    za:bat[:int,:int]  := calc.getBAT(zid);#  9 za:bat[:int,:int] := CALCbatid2bat(zid:BAT) {G}
    io.print(za);                       # 10 _15:void := IOprint_val(za:bat[:int,:int]) 
    io.print("zid done");               # 11 _16:void := IOprint_val(_17:str) 
    i := calc.getBAT(zid);              # 12 i:bat[:any,:any] := CALCbatid2bat(zid:BAT) {G}
    io.print(i);                        # 13 _19:void := IOprint_val(i:bat[:any,:any]) 
    bat.insert(b,0,zid);                # 14 _20:bat[:int,:BAT] := BKCinsert_bun(b:bat[:int,:BAT], _21:int, zid:BAT) {G}
#io.print(b); 
    a := algebra.fetch(b,0);            # 16 a:BAT := ALGfetchint(b:bat[:int,:BAT], _21:int) {G}
    io.print("fetch it");               # 17 _24:void := IOprint_val(_25:str) 
#io.print(a); 
    aa:bat[:int,:int]  := calc.getBAT(a);# 19 aa:bat[:int,:int] := CALCbatid2bat(a:BAT) {G}
    io.print(aa);                       # 20 _28:void := IOprint_val(aa:bat[:int,:int]) 
    io.print("done");                   # 21 _29:void := IOprint_val(_30:str) 
end main;	# 22  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ "zid" ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ "zid done" ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ "fetch it" ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ "done" ]

# 08:56:39 >  
# 08:56:39 >  Done.
# 08:56:39 >  

