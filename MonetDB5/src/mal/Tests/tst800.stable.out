stdout of test 'tst800` in directory 'src/mal` itself:


# 08:56:39 >  
# 08:56:39 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=39454 --set monet_prompt= --trace --dbname=mTests_src_mal  tst800.mal < /dev/null
# 08:56:39 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information
##testing simple stuff around type BAT
#z:= bat.new(:int,:int);
#bat.insert(z,1,2);
#io.print(z);
#b:= bat.new(:int,:bat);
#zid:= calc.bat(z);
#io.print("zid");
#io.print(zid);
#za:bat[:int,:int]:= calc.bat(zid);
#io.print(za);
#io.print("zid done");
#
#i:= calc.bat(zid);
#io.print(i);
#
#bat.insert(b,0,zid);
#io.print(b);
#
#a:= algebra.fetch(b,0);
#io.print("fetch it");
#io.print(a);
#aa:bat[:int,:int]:= calc.bat(a);
#io.print(aa);
#io.print("done");
#
function user.main():void;	# 0  (main:void)
#testing simple stuff around type BAT 	# 1  (_1:str)
    z := bat.new(:int,:int);	# 2 CMDBATnew (z:bat[:int,:int])<-(_3:int)(_3:int)
    bat.insert(z,1,2);	# 3 BKCinsert_bun (_4:void)<-(z:bat[:int,:int])(_5:int)(_6:int)
    io.print(z);	# 4 IOprint_val (_7:void)<-(z:bat[:int,:int])
    b := bat.new(:int,:BAT);	# 5 CMDBATnew (b:bat[:int,:BAT])<-(_3:int)(_9:BAT)
    zid := calc.getBATidentifier(z);	# 6 CALCbat2batid (zid:BAT)<-(z:bat[:int,:int])
    io.print("zid");	# 7 IOprint_val (_11:void)<-(_12:str)
#io.print(zid); 	# 8  (_13:str)
    za:bat[:int,:int]  := calc.getBAT(zid);	# 9 CALCbatid2bat (za:bat[:int,:int])<-(zid:BAT)
    io.print(za);	# 10 IOprint_val (_15:void)<-(za:bat[:int,:int])
    io.print("zid done");	# 11 IOprint_val (_16:void)<-(_17:str)
    i := calc.getBAT(zid);	# 12 CALCbatid2bat (i:bat[:any,:any])<-(zid:BAT)
    io.print(i);	# 13 IOprint_val (_19:void)<-(i:bat[:any,:any])
    bat.insert(b,0,zid);	# 14 BKCinsert_bun (_20:void)<-(b:bat[:int,:BAT])(_21:int)(zid:BAT)
#io.print(b); 	# 15  (_22:str)
    a := algebra.fetch(b,0);	# 16 ALGfetchint (a:BAT)<-(b:bat[:int,:BAT])(_21:int)
    io.print("fetch it");	# 17 IOprint_val (_24:void)<-(_25:str)
#io.print(a); 	# 18  (_26:str)
    aa:bat[:int,:int]  := calc.getBAT(a);	# 19 CALCbatid2bat (aa:bat[:int,:int])<-(a:BAT)
    io.print(aa);	# 20 IOprint_val (_28:void)<-(aa:bat[:int,:int])
    io.print("done");	# 21 IOprint_val (_29:void)<-(_30:str)
end main;	# 22  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ "zid" ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ "zid done" ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ "fetch it" ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ "done" ]

# 08:56:39 >  
# 08:56:39 >  Done.
# 08:56:39 >  

