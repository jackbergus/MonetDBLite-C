stdout of test 'tst906` in directory 'src/mal` itself:


# 19:09:38 >  
# 19:09:38 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=36033 --set sql_port=47929 --set xquery_port=59799 --set monet_prompt= --trace "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --dbname=mTests_src_mal  tst906.mal </dev/null
# 19:09:38 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_mal
# Visit http://monetdb.cwi.nl/ for further information.
## the multiplex code blocks.
## check detection of the underlying fast implementations
#
#b:= bbp.new(:lng,:lng);
#barrier (v,i):= mal.newRange(0:lng);
#	bat.insert(b,i,i);
#	redo (v,i):= mal.nextElement(1:lng,10:lng);
#exit (v,i);
#c:= algebra.copy(b);
#io.print(c);
#x:= batcalc.+(b,c);
#io.print(x);
#x:= batcalc.+(b,1:lng);
#io.print(x);
#x:= batcalc./(b,1:lng);
#io.print(x);
#x:= batcalc.*(b,c);
#io.print(x);
#y:= batcalc.==(b,b);
#io.print(y);
#y:= batcalc.==(b,x);
#io.print(y);
#z:= batcalc.not(y);
#io.print(z);
#
#
function user.main():void;	# 0  (main:void)
# the multiplex code blocks. 	# 1  (_1:str)
# check detection of the underlying fast implementations 	# 2  (_2:str)
    b := bat.new(:void,:lng);	# 3 CMDBATnew (b:bat[:void,:lng])<-(_4:void)(_5:lng)
barrier (v,i):= language.newRange(0:lng);	# 4 RNGnewRange_lng (v:bit)(i:lng)<-(_8:lng) jump 7
    bat.append(b,i);	# 5 BKCappend_val_wrap (_9:void)<-(b:bat[:void,:lng])(i:lng)
    redo (v,i):= language.nextElement(1:lng,10:lng);	# 6 RNGnextElement_lng (v:bit)(i:lng)<-(_10:lng)(_11:lng) jump 5
exit (v,i);	# 7  (v:bit)(i:lng)
    c := algebra.copy(b);	# 8 ALGcopy (c:bat[:void,:lng])<-(b:bat[:void,:lng])
    io.print(c);	# 9 IOprint_val (_13:void)<-(c:bat[:void,:lng])
    x := batcalc.+(b,c);	# 10 CMDbatADD_lng_lng_lng (x:bat[:void,:lng])<-(b:bat[:void,:lng])(c:bat[:void,:lng])
    io.print(x);	# 11 IOprint_val (_15:void)<-(x:bat[:void,:lng])
    x := batcalc.+(b,1:lng);	# 12 CMDbatADDcst_lng_lng_lng (x:bat[:void,:lng])<-(b:bat[:void,:lng])(_10:lng)
    io.print(x);	# 13 IOprint_val (_16:void)<-(x:bat[:void,:lng])
    x := batcalc./(b,1:lng);	# 14 CMDbatDIVcst_lng_lng_lng (x:bat[:void,:lng])<-(b:bat[:void,:lng])(_10:lng)
    io.print(x);	# 15 IOprint_val (_17:void)<-(x:bat[:void,:lng])
    x := batcalc.*(b,c);	# 16 CMDbatMUL_lng_lng_lng (x:bat[:void,:lng])<-(b:bat[:void,:lng])(c:bat[:void,:lng])
    io.print(x);	# 17 IOprint_val (_18:void)<-(x:bat[:void,:lng])
    y := batcalc.==(b,b);	# 18 CMD_EQ_lng (y:bat[:void,:bit])<-(b:bat[:void,:lng])(b:bat[:void,:lng])
    io.print(y);	# 19 IOprint_val (_20:void)<-(y:bat[:void,:bit])
    y := batcalc.==(b,x);	# 20 CMD_EQ_lng (y:bat[:void,:bit])<-(b:bat[:void,:lng])(x:bat[:void,:lng])
    io.print(y);	# 21 IOprint_val (_21:void)<-(y:bat[:void,:bit])
    z := batcalc.not(y);	# 22 CMDbitbatNOT (z:bat[:void,:bit])<-(y:bat[:void,:bit])
    io.print(z);	# 23 IOprint_val (_23:void)<-(z:bat[:void,:bit])
end main;	# 24  
#-----------------#
# h	t	  # name
# lng	lng	  # type
#-----------------#
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
[ nil,	  3	  ]
[ nil,	  4	  ]
[ nil,	  5	  ]
[ nil,	  6	  ]
[ nil,	  7	  ]
[ nil,	  8	  ]
[ nil,	  9	  ]
#-----------------#
# h	t	  # name
# void	lng	  # type
#-----------------#
[ nil,	  0	  ]
[ nil,	  2	  ]
[ nil,	  4	  ]
[ nil,	  6	  ]
[ nil,	  8	  ]
[ nil,	  10	  ]
[ nil,	  12	  ]
[ nil,	  14	  ]
[ nil,	  16	  ]
[ nil,	  18	  ]
#-----------------#
# h	t	  # name
# void	lng	  # type
#-----------------#
[ nil,	  1	  ]
[ nil,	  2	  ]
[ nil,	  3	  ]
[ nil,	  4	  ]
[ nil,	  5	  ]
[ nil,	  6	  ]
[ nil,	  7	  ]
[ nil,	  8	  ]
[ nil,	  9	  ]
[ nil,	  10	  ]
#-----------------#
# h	t	  # name
# void	lng	  # type
#-----------------#
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  2	  ]
[ nil,	  3	  ]
[ nil,	  4	  ]
[ nil,	  5	  ]
[ nil,	  6	  ]
[ nil,	  7	  ]
[ nil,	  8	  ]
[ nil,	  9	  ]
#-----------------#
# h	t	  # name
# void	lng	  # type
#-----------------#
[ nil,	  0	  ]
[ nil,	  1	  ]
[ nil,	  4	  ]
[ nil,	  9	  ]
[ nil,	  16	  ]
[ nil,	  25	  ]
[ nil,	  36	  ]
[ nil,	  49	  ]
[ nil,	  64	  ]
[ nil,	  81	  ]
#-----------------#
# h	t	  # name
# void	bit	  # type
#-----------------#
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
#-----------------#
# h	t	  # name
# void	bit	  # type
#-----------------#
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  false	  ]
[ nil,	  false	  ]
[ nil,	  false	  ]
[ nil,	  false	  ]
[ nil,	  false	  ]
[ nil,	  false	  ]
[ nil,	  false	  ]
[ nil,	  false	  ]
#-----------------#
# h	t	  # name
# void	bit	  # type
#-----------------#
[ nil,	  false	  ]
[ nil,	  false	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]
[ nil,	  true	  ]

# 19:09:39 >  
# 19:09:39 >  Done.
# 19:09:39 >  

