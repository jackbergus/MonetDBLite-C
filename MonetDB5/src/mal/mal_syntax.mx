@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
@' Copyright August 2008- MonetDB B.V.
@' All Rights Reserved.

@a M. L. Kersten
@v 1.0
@-
@appendix MAL syntax summary
The MAL syntax is summarized below in extended BNF.
Alternative constructs are seperated by | and grouped
by parenthesis.
Optional parts are marked with square brackets.
A repetition is marked with either '+' or '*' to
indicate at least once and many times, respectively.
Lexical tokens are illustrated in small capitals.

@multitable @columnfractions .15 .8 
@item program		
@tab : (statement ';') *
@item statement
@tab : moduleStmt [helpinfo] | definition [helpinfo]
@item
@tab | includeStmt | stmt 
@item moduleStmt	
@tab :  @sc{module} ident | @sc{atom} ident [':'ident]  
@item includeStmt	
@tab : @sc{include} identifier 
|  @sc{include} string_literal
@item definition	
@tab : @sc{command} header @sc{address} identifier
@item
@tab | @sc{pattern} header @sc{address}  identifier
@item
@tab |  @sc{function} header statement* @sc{end} identifier
@item
@tab |  @sc{factory} header statement* @sc{end} identifier
@item helpinfo	
@tab : @sc{comment} string_literal 
@item header		
@tab : [ moduelName '.'] name '(' params ')' result 
@item result		
@tab : paramType | '(' params ')'
@item params		
@tab : binding [',' binding]* 
@item binding		
@tab : identifier typeName [ props ]
@item typeName	
@tab : scalarType | collectionType 
| ':' @sc{any} ['_' digit] 
@item scalarType	
@tab : ':' @sc{ identifier} 
@item collectionType	
@tab : ':' @sc{bat} ['[' colType ',' colType ']'] 
@item colType		
@tab : scalarType | anyType 
@item props	
@tab : @verb{ '{' property [ ',' property]* '}' }
@item property	
@tab : identifier [ compare literal]
@item compare
@tab : '=' | '<' | '<=' | '>' | '>=' | '!='
@item stmt	
@tab : [tag] varlist [':=' expr ] 
@item tag
@tab |  @sc{return} | @sc{barrier} | @sc{catch}
|  @sc{leave} | @sc{redo} | @sc{raise} 
@item varlist		
@tab : variable 
|  '(' variable [',' variable ] * ')' 
@item variable	
@tab : identifier [ props ]
@item expr
@tab : fcncall | [factor  operator] factor 
@item factor  	
@tab :  @sc{ literal_constant} | @sc{ nil} | var 
@item fcncall
@tab : moduleName '.' name '(' [args] ')'
@item args
@tab : factor [',' factor]*
@end multitable
