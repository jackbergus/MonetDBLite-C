@' The contents of this file are subject to the MonetDB Public
@' License Version 1.0 (the "License"); you may not use this file
@' except in compliance with the License. You may obtain a copy of
@' the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.0.html
@'
@' Software distributed under the License is distributed on an "AS
@' IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
@' implied. See the License for the specific language governing
@' rights and limitations under the License.
@'
@' The Original Code is the Monet Database System.

@a M. L. Kersten
@v 1.0
@-
@appendix MAL syntax summary
The MAL syntax is summarized below in extended BNF.
Alternative constructs are seperated by | and grouped
by parenthesis.
Optional parts are marked with square brackets.
A repetition is marked with either '+' or '*' to
indicate at least once and many times, respectively.
Lexical tokens are illustrated in small capitals.

@multitable @columnfractions .15 .8 @verb @verb
@item program		
@tab : moduleStmt [helpinfo] |includeStmt
@item
@tab | ( definition [helpinfo] ';' | statement ';' ) *
@item definition	
@tab : commandStmt | patternStmt | functionStmt | factoryStmt 
@item moduleStmt	
@tab : @code{ ATOM} ident [':'ident]  
@item
@tab |  @code{ MODULE} ident 
@item commandStmt	
@tab : @code{ COMMAND } header 
@item
@item patternStmt	
@code{PATTERN } header
@item functionStmt	
@tab : @code{ FUNCTION } header statement* @code{ end } identifier
@item factoryStmt	
@tab : @code{ FACTORY } header statement* @code{ end } identifier
@item includeStmt	
@tab : @code{ INCLUDE} identifier 
|  @code{ INCLUDE} string_literal
@item helpinfo	
@tab : @code{ COMMENT} string_literal 
@item header		
@tab : hdrName '(' params ')' result 
@code{ [address ]} 
@item hdrName		
@tab : [ moduleId '.'] identifier 
@item result		
@tab : paramType | '(' params ')'
@item params		
@tab : binding [',' binding]* 
@item binding		
@tab : identifier typeName [ props ]
@item typeName	
@tab : scalarType | collectionType 
| ':' @code{ ANY} ['_' digit] 
@item scalarType	
@tab : ':' @code{ identifier} 
@item collectionType	
@tab : ':' @code{ BAT} ['[' colType ',' colType ']'] 
@item colType		
@tab : scalarType | anyType 
@item props	
@tab : @verb{ ['{' property [ ',' property]* '}'] }
@item property	
@tab : identifier 
@item statement	
@tab : [tag] varlist [':=' expr ] props
@item tag     	
@tab |  @code{ RETURN} | @code{ BARRIER} | @code{ CATCH}
|  @code{ LEAVE} | @code{ REDO} | @code{RAISE} 
@item varlist		
@tab : variable 
|  '(' variable [',' variable ] * ')' 
@item variable	
@tab : identifier props 
@item expr    	
@tab : fcncall | [factor  operator] factor 
@item factor  	
@tab :  @code{ literal_constant} | @code{ nil} | var 
@end multitable

@-
@{
@c
/* dummy C stuff */
@}
