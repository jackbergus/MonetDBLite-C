@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@f mal_assert
@a M. Kersten
@* Property Evaluation
The properte scheme provides a fertile group to associate
simple terms with various MAL components. However, we should
also be able to interpret them at optimizer time and at runtime
efficiently.

The module provides solutions for both cases.
@+ The static case
@+ The dynamic case

Properties can be associated with variables, MAL blocks, and MAL instructions.
The property list is initialized upon explicit request only, e.g. by
the frontend parser, a box manager, or as a triggered action.

@h
#ifndef _MAL_ASSERT_H
#define _MAL_ASSERT_H
#include "mal.h"
#include "mal_instruction.h"

mal_export str MALassert(MalBlkPtr mb, MalStkPtr stk, InstrPtr p);

#endif /* _MAL_ASSERT_H */
@c
#include "mal_assert.h"
#include "mal_exception.h"
#include "mal_type.h"		/* for idcmp() */

str
MALassert(MalBlkPtr mb, MalStkPtr stk, InstrPtr p){
	(void) mb; (void) stk; (void) p;
	/* well, implement the evaluator */
	throw(ASSERT, "mal.assert", "Not yet implemented");
}
@}
