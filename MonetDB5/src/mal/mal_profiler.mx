@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@a M. Kersten
@v 0.0
@* The MAL Profiler
A key issue in the road towards a high performance implementation
is to understand where resources are being spent. This information
can be obtained using different tools and at different levels of
abstraction.
A coarse grain insight for a particular application can be obtained
using injection of the necessary performance
capturing statements in the instruction sequence.
Fine-grain, platform specific information can be obtained using
existing profilers, like valgrind (http://www.valgrind.org),
or hardware performance counters.

The MAL profiler collects detailed performance information, such
as cpu, memory and statement information. It is optionally extended
with IO activity, which is needed for coarse grain profiling only.

The execution profiler is supported by hooks in the MAL interpreter.
The default strategy is to ship an event record immediately over a stream
to a separate performance monitor, formatted as a tuple.
An alternative strategy is preparation for off-line performance analysis.
For this case the event record is turned into a XML structure and
sent over the stream (most likely linked with a file)
Reflective performance analysis is supported by an event cache,
emptied explicitly upon need.
@menu
* Event Filtering ::
* Event Caching::
@end menu

@node Event Filtering, Event Caching, The MAL Profiler, The MAL Profiler
@+ Event Filtering 
The profiler supports selective retrieval of such information by
tagging the instructions of interest. This means that a profiler
call has a global effect,
all concurrent users are affected by the performance overhead.
Therefore, it is of primary interest to single user sessions.

The example below illustrates how the different performance
counter groups are activated, instructions are filtered for
tracking, and where the profile information is retained for
a posteriori analysis. The tuple format is chosen.
@example
profiler.activate("time");
profiler.activate("ticks");
#profiler.activate("cpu");
#profiler.activate("memory");
#profiler.activate("io");
#profiler.activate("pc");
#profiler.activate("event");
profiler.activate("statement");
profiler.setFilter("*","insert");
profiler.setFilter("*","print");

profiler.openStream("/tmp/MonetDBevents");
profiler.start();
b:= bbp.new(:int,:int);
bat.insert(b,1,15);
bat.insert(b,2,4);
bat.insert(b,3,9);
io.print(b);
profiler.stop();
profiler.closeStream();
@end example

The information on CPU, IO, memory use, program counter
and the event identifier are not retained. 
Furthermore, we are interested in all
functions name @code{insert} and @code{print}. A wildcard
can be used to signify any name, e.g.
no constraints are put on the module in which the operations
are defined.

Execution of the sample leads to the creation of a file with
the following content. The ticks are measured in micro-seconds.

@verbatim
# time, ticks,  stmt,   # name
[ "15:17:56",   12,      "_27 := bat.insert(<tmp_15>,1,15);",    ]
[ "15:17:56",   2,       "_30 := bat.insert(<tmp_15>,2,4);",     ]
[ "15:17:56",   2,       "_33 := bat.insert(<tmp_15>,3,9);",     ]
[ "15:17:56",   245,     "_36 := io.print(<tmp_15>);",   ]
@end verbatim
The XML-formatted output is produced by encapsulation
of a code block with the pair @code{profiler.setOfflineProfiling()}.
The default is tuple format, which can be requested
explicitly using @code{profiler.setOnlineProfiling()}.

@node Event Caching, The MAL Modules, Event Filtering, The MAL Profiler
@+ Event Caching
Aside from shipping events to a separate process, the profiler
can keep the events in a local @code{BAT} group, 
triggered with the command @code{profiler.setCachedProfiling()}.
Ofcourse, every measurement scheme does not come for free and may
even obscure performance measurements obtained throug e.g. valgrind.
The separate event caches can be accessed using the 
operator @code{profiler.getTrace}(@emph{name}).
The current implementation only supports 
access to @code{time},@code{ticks},@code{pc},@code{statement}.
The event cache can be cleared with @code{profiler.clearTrace()}.

Consider the following MAL program snippet:
@example
profiler.setAll();
profiler.setCachedProfiling();
profiler.startTrace();
b:= bbp.new(:int,:int);
bat.insert(b,1,15);
io.print(b);
profiler.stopTrace();
s:= profiler.getTrace("statement");
t:= profiler.getTrace("ticks");
io.print(s,t);
@end example
The result of the program execution becomes:
@verbatim
#-----------------#
# h     t         # name
# int   int       # type
#-----------------#
[ 1,      15      ]
#---------------------------------------------------------#
# h     t                                       t         # name
# int   str                                     int       # type
#---------------------------------------------------------#
[ 1,      "b := bbp.new(0,0);",                   51      ]
[ 2,      "$6 := bat.insert(<tmp_22>,1,15);",     16      ]
[ 3,      "$9 := io.print(<tmp_22>);",            189     ]
@end verbatim
@{
The profiler is activated by defining MALprofiler in the source tree.
This leads to securing space for the counters and for code
in the interpreter to collect the information.

@h
#ifndef _MAL_PROFILER_H
#define _MAL_PROFILER_H

#include "mal_client.h"

#ifdef HAVE_SYS_TIMES_H
# include <sys/times.h>
#endif

#if OSVER < 560 && defined(SOLARIS)
#include "/usr/ucbinclude/sys/rusage.h"
#include "/usr/ucbinclude/sys/resource.h"
#endif

#ifdef HAVE_SYS_RESOURCE_H
#include <sys/resource.h>
typedef struct rusage Rusage;
#endif

typedef struct tms Tms;
typedef struct mallinfo Mallinfo;

mal_export str activateCounter(str name);
mal_export str deactivateCounter(str name);
mal_export str openProfilerStream(void);
mal_export str closeProfilerStream(void);

mal_export void initProfiler(MalBlkPtr mb);
mal_export void profilerEvent(Module cntxt, MalBlkPtr mb, MalStkPtr stk, int pc);
mal_export str setLogFile(Module cntxt, str fname);
mal_export str setStartPoint(Module cntxt, str mod, str fcn);
mal_export str setEndPoint(Module cntxt, str mod, str fcn);
mal_export void setCachedProfiling(void);
mal_export void setOnlineProfiling(void);
mal_export void setOfflineProfiling(void);

mal_export int profilerAvailable(void);
mal_export str startProfiling(void);
mal_export str stopProfiling(void);
mal_export str cleanupProfiler(void);

mal_export int instrFilter(InstrPtr pci, str mod, str fcn);
mal_export void setFilter(Module cntxt, str mod, str fcn);
mal_export void resetFilter(Module cntxt, str mod, str fcn);

mal_export void profileReport(Module cntxt, int outer, stream *out);
mal_export void MPresetProfiler(stream *fdout);

mal_export int malProfileMode;

mal_export void startTrace(void);
mal_export void stopTrace(void);
mal_export void clearTrace(void);
mal_export BAT *getTrace(str ev);

#define DEBUG_MAL_PROFILER

#endif
@+ Performance tracing
The interpreter comes with several variables to hold performance
related data.
Every MAL instruction record is extended with two fields: counter and timer.
The counter is incremented each time the instruction is taken into
execution. Upon return, the timer is incremented with the microseconds
spent.
In addition to the default performance data collection,
the user can request performance events to be collected on a statement
basis. Care should be taken, because it leads to a large trace file,
unless the results are directly passed to a performance monitor
front-end for filtering and summarization.

The performance monitor has exclusive access to the event file, which
avoid concurrency conflicts amongst clients. It avoid cluthered
event records on the event stream. Since this event stream is owned
by a client, we should ensure that the profiler is automatically be
reset once the owner leaves. The routine profilerReset() handles the case.
@c
#include "mal_function.h"
#include "mal_profiler.h"
#include "mal_debugger.h"

#ifdef MALprofiler
static MT_Lock profileLock = 0;
static stream *eventstream = 0;

static int onlineProfiling = TRUE;
static int offlineProfiling = FALSE;
static int cachedProfiling = FALSE;
int
profilerAvailable(void)
{
	return 1;
}
#else
int
profilerAvailable(void)
{
	return 0;
}
#endif

static void onlineProfilerEvent(Module cntxt, MalBlkPtr mb, MalStkPtr stk, int pc);
static void offlineProfilerEvent(Module cntxt, MalBlkPtr mb, MalStkPtr stk, int pc);
static void cachedProfilerEvent(Module cntxt, MalBlkPtr mb, MalStkPtr stk, int pc);

int malProfileMode = 0;		/* global flag to indicate profiling mode */
static int profileAll = 0;	/* all instructions should be profiled */
static int delayswitch = 0;	/* to wait before sending the profile info */

@c
#define PROFtime    0
#define PROFlabel   1
#define PROFcpu     2
#define PROFmemory  3
#define PROFio      4
#define PROFpc      5
#define PROFevent   6
#define PROFstmt    7

static struct {
	str name;		/* which logical counter is needed */
	int status;		/* trace it or not */
} profileCounter[] = {
	/*  0 */  { "time", 0},
	/*  1 */  { "ticks", 0},
	/*  2 */  { "cpu", 0},
	/*  3 */  { "memory", 0},
	/*  4 */  { "io", 0},
	/*  5 */  { "pc", 0},
	/*  6 */  { "event", 0},
	/*  7 */  { "statement", 0},
	/*  8 */  { 0, 0}
};

@-
The counters can be set individually. The XML output uses the order of their
definition.

@= setCounter
	int i;
	for(i=0; profileCounter[i].name;i++)
	if( strcmp(profileCounter[i].name,name)==0){
	    profileCounter[i].status = @1 ;
	    return 0;
	}
	return throwException(MALEXCEPTION, "@2",
	    "profile counter '%s' undefined",name);
@c
str
activateCounter(str name)
{
	@:setCounter(1, activateCounter)@
}

str
deactivateCounter(str name)
{
	@:setCounter(0, deactivateCounter)@
}

@-
The parameter of getEventStream is the return value of the enclosing function:
	profilerEvent:  none/void
	setStartPoint:  a str
	setEndPoint:    a str
@= getEventStream
	if( profileLock==0) profileLock= MT_create_lock();
	mal_set_lock(profileLock,"profileLock");
	if( eventstream == NULL) {
	    mal_unset_lock(profileLock,"profileLock");
	    return @1;
	}
@- Event dispatching
The profiler strategy is encapsulated here
Online- and offline-profiling are disjoint options, because they
currently share the same file descriptor in the client record.
@c
void
profilerEvent(Module cntxt, MalBlkPtr mb, MalStkPtr stk, int pc)
{
#ifdef MALprofiler
	if( mb->profiler == NULL) return;
	if (onlineProfiling)
		onlineProfilerEvent(cntxt, mb, stk, pc);
	if (offlineProfiling)
		offlineProfilerEvent(cntxt, mb, stk, pc);
	if (cachedProfiling)
		cachedProfilerEvent(cntxt, mb, stk, pc);
#endif
}

@+ Online procecing
The online processing structure is the easiest. We merely have to
produce a correct tuple format for the front-end.
@c
#define log(X,Y) stream_printf(eventstream,X,Y);
#define log0(X) stream_printf(eventstream,X);
#define log2(X,Y,Z) stream_printf(eventstream,X,Y,Z);
#define flushLog() stream_flush(eventstream);

#ifdef MALprofiler

static void
onlineProfilerHeader(void)
{
	@:getEventStream()@	/* profilerEvent -> void */
	log0("# ");
	if (profileCounter[PROFpc].status) {
		log0("caller,\t");
		log0("callee,\t");
	}
	if (profileCounter[PROFtime].status) {
		log0("time,\t");
	}
	if (profileCounter[PROFlabel].status) {
		log0("ticks,\t");
	}
	if (profileCounter[PROFstmt].status) {
		log0("stmt,\t");
	}
	if (profileCounter[PROFcpu].status) {
		log0("utime,\t");
		log0("cutime,\t");
		log0("stime,\t");
		log0("cstime,\t");
	}

	if (profileCounter[PROFmemory].status) {
		log0("maxrss,\t");
		log0("arena,\t");
		log0("ordblks,\t");
		log0("smblks,\t");
		log0("hblkhd,\t");
		log0("hblks,\t");
		log0("fsmblks,\t");
		log0("uordblks,\t");
	}
	if (profileCounter[PROFio].status) {
		log0("page reclaim,\t");
		log0("page faults,\t");
		log0("swaps,\t");
		log0("block reads,\t");
		log0("block writes,\t");
		log0("context switch,\t");
		log0("involunarty switch,\t");
	}
	if (profileCounter[PROFevent].status) {
		log0("event\t# name\n");
	} else
		log0("# name\n");
	flushLog();
	mal_unset_lock(profileLock, "profileLock");
}

void
onlineProfilerEvent(Module cntxt, MalBlkPtr mb, MalStkPtr stk, int pc)
{
	static struct mallinfo prevMalloc;
	InstrPtr pci = getInstrPtr(mb,pc);

#ifdef HAVE_SYS_RESOURCE_H
	static struct rusage prevUsage;
	struct rusage infoUsage;
#endif
	static int eventcounter;
#ifdef HAVE_TIMES
	struct tms newTms;
#endif
	struct mallinfo infoMalloc;
	str stmt, c;

	(void) cntxt;

	if (delayswitch > 0) {
		/* first call to profiled */
		onlineProfilerHeader();
		delayswitch--;
		return;
	}
	@:getEventStream()@	/* profilerEvent -> void */
	if (delayswitch == 0) {
		delayswitch = -1;
	}
	if (!profileAll && mb->profiler[pc].trace == FALSE)
		return;
#ifdef HAVE_TIMES
	times(&newTms);
#endif
	infoMalloc = MT_mallinfo();
#ifdef HAVE_SYS_RESOURCE_H
	getrusage(RUSAGE_SELF, &infoUsage);
#endif

	/* make basic profile event tuple  */
	log0("[ ");
	if (profileCounter[PROFpc].status) {
		str nme = "";

		if (stk->blk)
			nme = getFunctionId(getInstrPtr(stk->blk, 0));

		/* get identity of caller */
		log2("%s.%d,\t", nme, getPC(mb, pci));
		if (getModuleId(pci) && getFunctionId(pci)) {
			log2("\"%s.%s\",\t", getModuleId(pci), getFunctionId(pci));
		} else {
			log("\"%s\",\t", operatorName(pci->token));
		}
	}
	if (profileCounter[PROFtime].status) {
		char *tbuf, *c;

		tbuf= ctime(&mb->profiler[pc].clock);
		c = strchr(tbuf, '\n');
		if (c) {
			c[-5] = '"';
			c[-4] = 0;
		}
		tbuf[10] = '"';
		log("%s,\t", tbuf + 10);
	}
	if (profileCounter[PROFlabel].status) {
		log("%d,\t", mb->profiler[pc].ticks);
	}
	if (profileCounter[PROFstmt].status) {
		/* generate actual call statement */
		stmt = call2str(MCgetClient(),mb, stk, getPC(mb, pci));
		c = stmt+1;

		while (c && *c && isspace((int) *c))
			c++;
		log(" \"%s\",\t", c);
	}
#ifdef HAVE_TIMES
	if (profileCounter[PROFcpu].status) {
		log("%d,\t", newTms.tms_utime - mb->profiler[pc].timer.tms_utime);
		log("%d,\t", newTms.tms_cutime - mb->profiler[pc].timer.tms_cutime);
		log("%d,\t", newTms.tms_stime - mb->profiler[pc].timer.tms_stime);
		log("%d,\t", newTms.tms_cstime - mb->profiler[pc].timer.tms_cstime);
	}
#endif

	if (profileCounter[PROFmemory].status) {
#ifdef HAVE_SYS_RESOURCE_H
		log("%d,\t", infoUsage.ru_maxrss);
#endif
		log("%d,\t", infoMalloc.arena - prevMalloc.arena);
		log("%d,\t", infoMalloc.ordblks - prevMalloc.ordblks);
		log("%d,\t", infoMalloc.smblks - prevMalloc.smblks);
		log("%d,\t", infoMalloc.hblkhd - prevMalloc.hblkhd);
		log("%d,\t", infoMalloc.hblks - prevMalloc.hblks);
		log("%d,\t", infoMalloc.fsmblks - prevMalloc.fsmblks);
		log("%d,\t", infoMalloc.uordblks - prevMalloc.uordblks);
		prevMalloc = infoMalloc;
	}
#ifdef HAVE_SYS_RESOURCE_H
	if (profileCounter[PROFio].status) {
		log("%d,\t", infoUsage.ru_minflt - prevUsage.ru_minflt);
		log("%d,\t", infoUsage.ru_majflt - prevUsage.ru_majflt);
		log("%d,\t", infoUsage.ru_nswap - prevUsage.ru_nswap);
		log("%d,\t", infoUsage.ru_inblock - prevUsage.ru_inblock);
		log("%d,\t", infoUsage.ru_oublock - prevUsage.ru_oublock);
		log("%d,\t", infoUsage.ru_nvcsw - prevUsage.ru_nvcsw);
		log("%d,\t", infoUsage.ru_nivcsw - prevUsage.ru_nivcsw);
		prevUsage = infoUsage;
	}
#endif
	if (profileCounter[PROFevent].status) {
		log("%d ]\n", eventcounter);
	} else {
		log0(" ]\n");
	}
	eventcounter++;
	flushLog();
	mal_unset_lock(profileLock, "profileLock");
}
#endif
@+ Postprocessing events
The offlineProfilerEvent below illustrates information that could be
saved in XML format for post-processing. Compared to the
profilerRecord above, it is more verbose and contains more
information relevant for off-line analysis.
@c
void
infoHeapProfile(Heap *hp, str nme)
{
	char buf[PATHLENGTH], *p = buf;

	if (!hp)
		return;

	while (*nme)
		*p++ = *nme++;
	strcpy(p, "free");
	log0(buf);
	log("=\"%d\" ", hp->free);
	strcpy(p, "size");
	log0(buf);
	log("=\"%d\" ", hp->size);
	if (hp->maxsize) {
		strcpy(p, "maxsize");
		log0(buf);
		log("=\"%d\" ", hp->maxsize);
	}
	strcpy(p, "storage");
	if (hp->base) {
		log0(buf);
		log("=\"%s\" ", (hp->base == NULL) ? "absent" : (hp->storage == STORE_MMAP) ? (hp->filename ? "memory mapped" : "anonymous vm") : (hp->storage == STORE_PRIV) ? "private map" : "malloced");
	}
	if (hp->filename) {
		strcpy(p, "filename");
		log0(buf);
		log("=\"%s\" ", hp->filename ? hp->filename : "no file");
	}
}
void
HASHinfoProfile(Hash *h, str s)
{
	char buf[MAXPATHLEN];
	int i;

	if (!h)
		return;
	snprintf(buf, MAXPATHLEN, "%s=\"\" mask=\"", s);
	i = strlen(buf);
	snprintf(buf + i, MAXPATHLEN - i, SZFMT "\" lim=\"", (size_t)h->mask);
	i = strlen(buf);
	snprintf(buf + i, MAXPATHLEN - i, SZFMT "\"", (size_t)h->lim);
	log0(buf);
}

void
offlineProfilerEvent(Module cntxt, MalBlkPtr mb, MalStkPtr stk, int pc)
{
#ifdef MALprofiler
#ifdef HAVE_TIMES
	struct tms newTms;
#endif
	struct mallinfo infoMalloc;

#ifdef HAVE_SYS_RESOURCE_H
	struct rusage infoUsage;
	static struct rusage prevUsage;
#endif
	static struct mallinfo prevMalloc;
	str stmt, c;
	InstrPtr pci= getInstrPtr(mb,pc);

	(void) cntxt;		/* still unused */

	if (!profileAll && mb->profiler[pc].trace == FALSE)
		return;
	if (getDestVar(pci) <= 0)
		return;
	if (delayswitch > 0) {
		delayswitch--;
		return;
	}
	@:getEventStream()@	/* profilerEvent -> void */
	if (delayswitch == 0) {
		log0("<MonetProfile>\n");
		delayswitch = -1;
	}
#ifdef HAVE_TIMES
	times(&newTms);
#endif
	infoMalloc = MT_mallinfo();
#ifdef HAVE_SYS_RESOURCE_H
	getrusage(RUSAGE_SELF, &infoUsage);
#endif

	/* make XML record */
	log0("<event>\n");
	if (profileCounter[PROFcpu].status) {
#ifdef HAVE_TIMES
		log("\t<tms utime=\"%d\" ", 
			newTms.tms_utime - mb->profiler[pc].timer.tms_utime);
		log("cutime=\"%d\" ", 
			newTms.tms_cutime - mb->profiler[pc].timer.tms_cutime);
		log("stime=\"%d\" ", 
			newTms.tms_stime - mb->profiler[pc].timer.tms_stime);
		log("cstime=\"%d\" ", 
			newTms.tms_cstime - mb->profiler[pc].timer.tms_cstime);
#endif
		log("ticks=\"%d\" ", GDKusec() - mb->profiler[pc].clk);
		log0("/>\n");
	}

	if (profileCounter[PROFstmt].status) {
		log0("\t<mal");
		stmt = instruction2str(mb, pci, FALSE);
		c = strchr(stmt, ']');

		if (c)
			c++;
		else
			c = stmt+1;

		while (c && *c && isspace((int) *c))
			c++;

		log0(" stmt=\"");
		for (; c && *c; c++) {
			if (*c == '#')
				break;
			if (*c == '\n')
				break;
			if (*c == '"') {
				log0("&quot;");
			} else if (*c == '&') {
				log0("&amp;");
			} else if (*c == '\'') {
				log0("&apos;");
			} else
				stream_printf(eventstream, "%c", *c);
		}
		log0("\"");

		log(" module=\"%s\"", (getModuleId(pci) ? getModuleId(pci) : "unknown"));
		log(" function=\"%s\"", (getFunctionId(pci) ? getFunctionId(pci) : "unknown"));
		log(" calls=\"%d\"", mb->profiler[pc].counter);

		if (mb->profiler[pc].counter) {
			double avg = mb->profiler[pc].ticks / (mb->profiler[pc].counter +0.0);

			log(" average=\"%5.2f\"", avg);
		}
		log0("/>\n");
	}

@-
The property tracing option inspects the destination variable
and emits its key properties. This is primarilly meant to
inspect the properties of BATs and their propagation.
@c
	if (profileCounter[2].status) {
		ValPtr v;
		VarPtr w;
		str s;
		str mode, access;

		v = &stk->stk[getDestVar(pci)];
		w = getVar(mb, getDestVar(pci));
		s = getTypeName(v->vtype);

		log0("\t<prop ");
		log("type=\"%s\" ", s);
		GDKfree(s);
		if (w->isaconstant)
			log0("constant=\"true\" ");
		if (w->isatypevar)
			log0("typevar=\"true\" ");

		log0("value=\"");
		if (isaBatType(w->type))
			stream_printf(eventstream, "%s", BATgetId(BBPdescriptor(v->val.bval)));
		else if (isaBatType(w->type))
			stream_printf(eventstream, "Column name not yet known");
		else if (isaBatType(w->type))
			stream_printf(eventstream, "Column name not yet known");
		else if (w->type == TYPE_str) {
			char *t, *tt;

			s = GDKmalloc(v->len + 1);
			for (t = s, tt = v->val.sval; *tt; tt++, t++) {
				if (*tt == '<') {
					strcpy(t, "&lt;");
					t += 3;
				} else if (*tt == '>') {
					strcpy(t, "&gt;");
					t += 3;
				} else
					*t = *tt;
			}
		} else
			ATOMprint(v->vtype, VALptr(v), eventstream);
		log0("\" ");
		if (isaBatType(w->type)) {
			BAT *b = BATdescriptor(v->val.bval);

			if (b) {
				if (b->batPersistence & PERSISTENT)
					mode = "persistent";
				else if (b->batPersistence & SESSION)
					mode = "session";
				else if (b->batPersistence & TRANSIENT)
					mode = "transient";
				else
					mode = "unknown";

				switch (b->batRestricted) {
				case BAT_READ:
					access = "read-only";
					break;
				case BAT_WRITE:
					access = "updatable";
					break;
				case BAT_APPEND:
					access = "append-only";
					break;
				default:
					access = "unknown";
				}

				log("count=\"%d\" ", BATcount(b));
				/*log( "version=\"%d\" ", b->GDKversion); */
				/*log( "batCacheid=\"%d\" ", b->batCacheid); */
				/*log( "batParentid=\"%d\" ", b->batParentid); */
				/*log( "batSharecnt=\"%d\" ", b->batSharecnt); */
				/*log( "head=\"%d\" ", ATOMname(b->htype)); */
				/*log( "tail=\"%d\" ", ATOMname(b->ttype)); */
				log("batPersistence=\"%s\" ", mode);
				log("batRestricted=\"%s\" ", access);
				log("batRefcnt=\"%d\" ", BBP_refs(b->batCacheid));
				if (!BATdirty(b))
					log("batDirty=\"%s\" ", BATdirty(b) ? "dirty" : "clean");
				if (b->batSet)
					log("batSet=\"%d\" ", b->batSet);
				if (b->void_tid)
					log("void_tid=\"%d\" ", b->void_tid);
				if (b->void_cnt)
					log("void_cnt=\"%d\" ", b->void_cnt);

				if (BAThordered(b))
					log("hsorted=\"%d\" ", BAThordered(b));
				/*log( "hident",  b->hident); */
				if (BAThdense(b))
					log("hdense=\"%d\" ", BAThdense(b));
				if (b->hseqbase)
					log("hseqbase=\"%d\" ", b->hseqbase);
				if (b->hkey)
					log("hkey=\"%d\" ", b->hkey);
				/*log( "hloc=\"%d\" ", b->hloc); */
				/* log( "hvarsized=\"%d\" ", b->hvarsized); */
				if (b->halign)
					log("halign=\"%d\" ", b->halign);

				/*log( "tident", b->tident); */
				if (BATtdense(b))
					log("tdense=\"%d\" ", BATtdense(b));
				if (b->tseqbase)
					log("tseqbase=\"%d\" ", b->tseqbase);
				if (BATtordered(b))
					log("tsorted=\"%d\" ", BATtordered(b));
				if (b->tkey)
					log("tkey=\"%d\" ", b->tkey);
				/*log( "tloc=\"%d\" ", b->tloc); */
				/*log( "tvarsized=\"%d\" ", b->tvarsized); */
				if (b->talign)
					log("talign=\"%d\" ", b->talign);

				/*log( "batInserted=\"%d\" ", BUNindex(b, b->batInserted)); */
				/*log( "batDeleted=\"%d\" ", BUNindex(b, b->batDeleted)); */
				/*log( "batHole=\"%d\" ", BUNindex(b, b->batHole)); */
				/*log( "top=\"%d\" ", BUNindex(b, (Bunbase(b) + b->batBuns->free))); */
				if (b->batStamp)
					log("batStamp=\"%d\" ", b->batStamp);
				log("curStamp=\"%d\" ", BBPcurstamp());
				if (b->batCopiedtodisk)
					log("batCopiedtodisk=\"%d\" ", b->batCopiedtodisk);
				if (b->batDirtydesc)
					log("batDirtydesc=\"%s\" ", b->batDirtydesc ? "dirty" : "clean");

				if (b->batDirtybuns)
					log("batDirtybuns=\"%s\" ", b->batDirtybuns ? "dirty" : "clean");
				infoHeapProfile(b->batBuns, "batBuns");

				if (b->hheapdirty)
					log("hheapdirty=\"%s\" ", b->hheapdirty ? "dirty" : "clean");
				infoHeapProfile(b->hheap, "hheap");

				if (b->theapdirty)
					log("theapdirty=\"%s\" ", b->theapdirty ? "dirty" : "clean");
				infoHeapProfile(b->theap, "theap");

				if (b->hhash) {
					HASHinfoProfile(b->hhash, "hhash");
				}
				if (b->thash) {
					HASHinfoProfile(b->thash, "thash");
				}
				BBPunfix(b->batCacheid);
			}
		}
		log0("/>\n");
	}

	if (profileCounter[3].status) {
		log0("\t<memory ");
#ifdef HAVE_SYS_RESOURCE_H
		log("maxrss=\"%d\" ", infoUsage.ru_maxrss);
#endif
		log("arena=\"%d\" ", infoMalloc.arena - prevMalloc.arena);
		log("ordblks=\"%d\" ", infoMalloc.ordblks - prevMalloc.ordblks);
		log("smblks=\"%d\" ", infoMalloc.smblks - prevMalloc.smblks);
		log("\n\thblkhd=\"%d\" ", infoMalloc.hblkhd - prevMalloc.hblkhd);
		log("hblks=\"%d\" ", infoMalloc.hblks - prevMalloc.hblks);
		log("fsmblks=\"%d\" ", infoMalloc.fsmblks - prevMalloc.fsmblks);
		log("uordblks=\"%d\" ", infoMalloc.uordblks - prevMalloc.uordblks);
		prevMalloc = infoMalloc;
		log0("/>\n");
	}

	if (profileCounter[PROFio].status) {
		log0("\t<io ");
#ifdef HAVE_SYS_RESOURCE_H
		log("minflt=\"%d\" ", infoUsage.ru_minflt - prevUsage.ru_minflt);
		log("majflt=\"%d\" ", infoUsage.ru_majflt - prevUsage.ru_majflt);
		log("nswap=\"%d\" ", infoUsage.ru_nswap - prevUsage.ru_nswap);
		log("\n\tinblock=\"%d\" ", infoUsage.ru_inblock - prevUsage.ru_inblock);
		log("oublock=\"%d\" ", infoUsage.ru_oublock - prevUsage.ru_oublock);
		log("nvcsw=\"%d\" ", infoUsage.ru_nvcsw - prevUsage.ru_nvcsw);
		log("nivcsw=\"%d\" ", infoUsage.ru_nivcsw - prevUsage.ru_nivcsw);
		prevUsage = infoUsage;
#endif
		log0("/>\n");
	}

	log0("</event>\n");
	mal_unset_lock(profileLock, "profileLock");
	stream_flush(eventstream);
#endif
}

str
setLogFile(Module cntxt, str fname)
{
	(void) cntxt;		/* still unused */
#ifdef MALprofiler
	if (profileLock == 0)
		profileLock = MT_create_lock();
	mal_set_lock(profileLock, "profileLock");
	eventstream = open_wastream(fname);
	if (eventstream == NULL) {
		return throwMessage("mal.profiler", "Could not create event stream file");
	}
	mal_unset_lock(profileLock, "profileLock");
#else
	stream_printf(GDKout, "# Monet not compiled for profiling\n");
#endif
	return MAL_SUCCEED;
}

str
openProfilerStream(void)
{
	Client c = MCgetClient();

	malProfileMode = TRUE;
	eventstream = c->fdout;
	delayswitch = 1;	/* avoid an incomplete initial profile event */
	return MAL_SUCCEED;
}

str
closeProfilerStream(void)
{
	Client c = MCgetClient();

	if (offlineProfiling)
		log0("</MonetProfile>\n");
	if (eventstream != c->fdout)
		close_stream(eventstream);
	malProfileMode = FALSE;
	eventstream = NULL;
	return MAL_SUCCEED;
}

str
setStartPoint(Module cntxt, str mod, str fcn)
{
	(void) cntxt;
	(void) mod;
	(void) fcn;		/* still unused */
#ifdef MALprofiler
	@:getEventStream(MAL_SUCCEED /*? or MAL_? ? */ )@
	stream_printf(GDKout, "# start point not set\n");
	mal_unset_lock(profileLock, "profileLock");
#else
	stream_printf(GDKout, "# Monet not compiled for profiling\n");
#endif
	return MAL_SUCCEED;
}

str
setEndPoint(Module cntxt, str mod, str fcn)
{
	(void) cntxt;
	(void) mod;
	(void) fcn;		/* still unused */
#ifdef MALprofiler
	@:getEventStream(MAL_SUCCEED /*? or MAL_? ? */ )@
	stream_printf(GDKout, "# end point not set\n");
	mal_unset_lock(profileLock, "profileLock");
#else
	stream_printf(GDKout, "# Monet not compiled for profiling\n");
#endif
	return MAL_SUCCEED;
}

@-
When you receive the message to start profiling, we
should wait for the next instruction the stream
is initiated. This is controlled by a delay-switch
@c
str
startProfiling(void)
{
	if (eventstream != NULL) {
		malProfileMode = TRUE;
		delayswitch = 1;
	}
	return MAL_SUCCEED;
}

str
stopProfiling(void)
{
	stream_flush(eventstream);
	malProfileMode = FALSE;
	return MAL_SUCCEED;
}

@-
The resetProfiler is called when the owner of the event stream
leaves the scene. (Unclear if parallelism may cause errors)
@c
void
MPresetProfiler(stream *fdout)
{
	if (fdout != eventstream)
		return;
	mal_set_lock(profileLock, "profileLock");
	eventstream = 0;
	mal_unset_lock(profileLock, "profileLock");
}

@-
Performance tracing is triggered on an instruction basis
or a the global flag 'profileAll' being set.
Calling setFilter(M,F) switches the performance tracing
bit in the instruction record. The routine resetFilter
clears all performance bits.

The routines rely on waking their way through the
instructions space from a given context. This has been
abstracted away.
@c
int
instrFilter(InstrPtr pci, str mod, str fcn)
{
#ifdef MALprofiler
	if (getFunctionId(pci) && (*fcn == '*' || strcmp(fcn, getFunctionId(pci)) == 0)) {
		if (getModuleId(pci) && (*mod == '*' || strcmp(mod, getModuleId(pci)) == 0))
			return 1;
	}
	if (getModuleId(pci) && *fcn == '*' && (*mod == '*' || strcmp(mod, getModuleId(pci)) == 0))
		return 1;
#else
	stream_printf(GDKout, "# Monet not compiled for profiling\n");
#endif
	return 0;
}

void
setFilter(Module cntxt, str mod, str fcn)
{
#ifdef MALprofiler
	int j, k, moduleOnly = 0;
	Module s = cntxt;
	MalBlkPtr mb;
	Symbol t;
	InstrPtr p;

	profileAll = strcmp(mod, "*") == 0 && strcmp(fcn, "*") == 0;
	if (profileAll) {
		int i;

		for (i = 0; profileCounter[i].name; i++)
			profileCounter[i].status = 1;
		return;
	}

	if (profileLock == 0)
		profileLock = MT_create_lock();
	mal_set_lock(profileLock, "profileLock");
	while (s != NULL) {
		if (s->subscope)
			for (j = 0; j < MAXSCOPE; j++)
				if (s->subscope[j]) {
					for (t = s->subscope[j]; t != NULL; t = t->peer) {
						p = getInstrPtr(mb=t->def, 0);
						moduleOnly = getModuleId(p) && strcmp(getModuleId(p), mod) == 0;
						initProfiler(mb);
						for (k = 0; k < t->def->stop; k++) {
							p = getInstrPtr(t->def, k);
							mb->profiler[k].trace = mb->profiler[k].trace || 
													moduleOnly || 
													instrFilter(p, mod, fcn);
						}
					}
				}
		s = s->outer;
	}
	mal_unset_lock(profileLock, "profileLock");
#else
	stream_printf(GDKout, "# Monet not compiled for profiling\n");
#endif
}

@-
Watch out. The profiling bits are only set for the shared modules and
the private main(). The profiler setFilter should explicitly called in
each separate top level routine.
@c
void
resetFilter(Module cntxt, str mod, str fcn)
{
#ifdef MALprofiler
	int j, k;
	Module s = cntxt;
	Symbol t;
	MalBlkPtr mb;

	(void) mod;
	(void) fcn;		/* still unused */

	if (profileLock == 0)
		profileLock = MT_create_lock();
	mal_set_lock(profileLock, "profileLock");
	if (profileAll) {
		profileAll = FALSE;
		return;
	}
	while (s != NULL) {
		if (s->subscope)
			for (j = 0; j < MAXSCOPE; j++)
				if (s->subscope[j]) {
					for (t = s->subscope[j]; t != NULL; t = t->peer) {
						if( (mb=t->def)->profiler)
						for (k = 0; k < t->def->stop; k++) {
							mb->profiler[k].trace = FALSE;
						}
					}
				}
		s = s->outer;
	}
	mal_unset_lock(profileLock, "profileLock");
#else
	stream_printf(GDKout, "# Monet not compiled for profiling\n");
#endif
}

@+ Tracing
The events being captured are stored in separate BATs.
They are made persistent to accumate information over
multiple sessions. This means it has to be explicitly reset
to avoid disc overflow.
@c
static int TRACE_init=0;
static BAT *TRACE_id_time=0;
static BAT *TRACE_id_ticks=0;
static BAT *TRACE_id_pc=0;
static BAT *TRACE_id_modfcn=0;
static BAT *TRACE_id_stmt=0;

static BAT *
TRACEcreate(str hnme, str tnme, int ht, int tt)
{
	BAT *b;
	char buf[128];

	snprintf(buf, 128, "trace_%s_%s", hnme, tnme);
	b = BATdescriptor(BBPindex(buf));
	if (b)
		return b;

	b = BATnew(ht, tt, 256);
	if (b == NULL)
		GDKfatal("STAT_create: could not allocate.");

	BATkey(b, TRUE);
	BBPrename(b->batCacheid, buf);
	BATmode(b, PERSISTENT);
	BATcommit(b);
	return b;
}

void
initTrace(void)
{
	if (TRACE_init)
		return;		/* already initialized */
	mal_set_lock(mal_contextLock, "trace");
	TRACE_id_time = TRACEcreate("id", "time", TYPE_int, TYPE_str);
	TRACE_id_ticks = TRACEcreate("id", "ticks", TYPE_int, TYPE_int);
	TRACE_id_pc = TRACEcreate("id", "pc", TYPE_int, TYPE_str);
	TRACE_id_modfcn = TRACEcreate("id", "modfcn", TYPE_int, TYPE_str);
	TRACE_id_stmt = TRACEcreate("id", "statement", TYPE_int, TYPE_str);
	TRACE_init = 1;
	mal_unset_lock(mal_contextLock, "trace");
}

#define CLEANUP(X)  if(X) { BBPdecref((X)->batCacheid, TRUE); (X)->batPersistence= TRANSIENT; } (X)= NULL;
str
cleanupProfiler(){
	mal_set_lock(mal_contextLock, "cleanup");
	CLEANUP( TRACE_id_time );
	CLEANUP( TRACE_id_pc );
	CLEANUP( TRACE_id_modfcn );
	CLEANUP( TRACE_id_stmt );
	TRACE_init = 0;
	mal_unset_lock(mal_contextLock, "cleanup");
	return MAL_SUCCEED;
}
void
startTrace(void)
{
	initTrace();
	malProfileMode = TRUE;
	cachedProfiling = TRUE;
}

void
stopTrace(void)
{
	initTrace();
	malProfileMode = FALSE;
	cachedProfiling = FALSE;
}

void
setCachedProfiling(void)
{
	onlineProfiling = FALSE;
	offlineProfiling = FALSE;
	cachedProfiling = TRUE;
}

void
setOnlineProfiling(void)
{
	onlineProfiling = TRUE;
	offlineProfiling = FALSE;
	cachedProfiling = FALSE;
}

void
setOfflineProfiling(void)
{
	onlineProfiling = FALSE;
	offlineProfiling = TRUE;
	cachedProfiling = FALSE;
}

void
clearTrace(void)
{
	initTrace();
	/* drop all trace tables */
	BATclear(TRACE_id_time);
	BATclear(TRACE_id_ticks);
	BATclear(TRACE_id_pc);
	BATclear(TRACE_id_modfcn);
	BATclear(TRACE_id_stmt);
}

BAT *
getTrace(str nme)
{
	if (strcmp(nme, "time") == 0)
		return TRACE_id_time;
	if (strcmp(nme, "ticks") == 0)
		return TRACE_id_ticks;
	if (strcmp(nme, "pc") == 0)
		return TRACE_id_pc;
	if (strcmp(nme, "modfcn") == 0)
		return TRACE_id_modfcn;
	if (strcmp(nme, "statement") == 0)
		return TRACE_id_stmt;
	return NULL;
}

void
cachedProfilerEvent(Module cntxt, MalBlkPtr mb, MalStkPtr stk, int pc)
{
	/* static struct mallinfo prevMalloc; */
	/* static struct rusage   prevUsage; */
	static int eventcounter;
#ifdef HAVE_TIMES
	struct tms newTms;
#endif

	/* struct mallinfo infoMalloc; */
#ifdef HAVE_SYS_RESOURCE_H
	struct rusage infoUsage;
#endif
	str stmt, c;
	int evnt;
	InstrPtr pci= getInstrPtr(mb,pc);

	(void) cntxt;

	if (TRACE_init == 0)
		return;
	if (delayswitch > 0) {
		/* first call to profiled */
		delayswitch--;
		return;
	}
	if (delayswitch == 0) {
		delayswitch = -1;
	}
	if (!profileAll && mb->profiler[pc].trace == FALSE)
		return;
#ifdef HAVE_TIMES
	times(&newTms);
#endif
	/* infoMalloc = MT_mallinfo(); */
#ifdef HAVE_SYS_RESOURCE_H
	getrusage(RUSAGE_SELF, &infoUsage);
#endif
	mal_set_lock(profileLock, "profileLock");
	evnt = TRACE_init++;

	/* update the Trace tables */
	if (profileCounter[PROFpc].status) {
		char buf[1024];

		snprintf(buf, 1024, "%s.%s[%d]", 
			getModuleId(getInstrPtr(mb, 0)), 
			getFunctionId(getInstrPtr(mb, 0)), getPC(mb, pci));
		BUNins(TRACE_id_pc, &evnt, buf, FALSE);
		if (getModuleId(pci) && getFunctionId(pci)) {
			snprintf(buf, 1024, "%s.%s", 
				getModuleId(pci), 
				getFunctionId(pci));
		} else {
			snprintf(buf, 1024, "%s", operatorName(pci->token));
		}
		BUNins(TRACE_id_modfcn, &evnt, buf, FALSE);
	}
	if (profileCounter[PROFtime].status) {
		char *tbuf, *c;

		tbuf= ctime(&mb->profiler[pc].clock);
		c = strchr(tbuf, '\n');
		if (c) {
			c[-5] = '"';
			c[-4] = 0;
		}
		tbuf[10] = '"';
		BUNins(TRACE_id_time, &evnt, tbuf + 10, FALSE);
	}
	if (profileCounter[PROFlabel].status) {
		int ticks = (int) (GDKusec() - mb->profiler[pc].clk);

		BUNins(TRACE_id_ticks, &evnt, &ticks, FALSE);
	}
	if (profileCounter[PROFstmt].status) {
		/* generate actual call statement */
		stmt = call2str(MCgetClient(),mb, stk, getPC(mb, pci));
		c = stmt;

		while (c && *c && (isspace((int) *c) || *c == '!'))
			c++;
		BUNins(TRACE_id_stmt, &evnt, c, FALSE);
		GDKfree(stmt);
	}
/* The remainder requires their own BATs
#ifdef HAVE_TIMES
	if( profileCounter[PROFcpu].status ){
	    log("%d,\t", newTms.tms_utime - mb->profiler[pc].timer.tms_utime);
	    log("%d,\t", newTms.tms_cutime - mb->profiler[pc].timer.tms_cutime);
	    log("%d,\t", newTms.tms_stime - mb->profiler[pc].timer.tms_stime);
	    log("%d,\t", newTms.tms_cstime - mb->profiler[pc].timer.tms_cstime);
	}
#endif

	if( profileCounter[PROFmemory].status ){
#ifdef HAVE_SYS_RESOURCE_H
	    log("%d,\t",infoUsage.ru_maxrss);
#endif
	    log("%d,\t", infoMalloc.arena-prevMalloc.arena);
	    log("%d,\t", infoMalloc.ordblks-prevMalloc.ordblks);
	    log("%d,\t", infoMalloc.smblks-prevMalloc.smblks);
	    log("%d,\t", infoMalloc.hblkhd-prevMalloc.hblkhd);
	    log("%d,\t", infoMalloc.hblks-prevMalloc.hblks);
	    log("%d,\t", infoMalloc.fsmblks-prevMalloc.fsmblks);
	    log("%d,\t", infoMalloc.uordblks-prevMalloc.uordblks);
	    prevMalloc = infoMalloc;
	}
	if( profileCounter[PROFio].status ){
#ifdef HAVE_SYS_RESOURCE_H
	    log("%d,\t", infoUsage.ru_minflt- prevUsage.ru_minflt);
	    log("%d,\t", infoUsage.ru_majflt- prevUsage.ru_majflt);
	    log("%d,\t", infoUsage.ru_nswap- prevUsage.ru_nswap);
	    log("%d,\t", infoUsage.ru_inblock- prevUsage.ru_inblock);
	    log("%d,\t", infoUsage.ru_oublock- prevUsage.ru_oublock);
	    log("%d,\t", infoUsage.ru_nvcsw- prevUsage.ru_nvcsw);
	    log("%d,\t", infoUsage.ru_nivcsw- prevUsage.ru_nivcsw);
	    prevUsage = infoUsage;
#endif
	}
*/
	eventcounter++;
	mal_unset_lock(profileLock, "profileLock");
}

@+ Reporting
The performance information is collected on an instruction basis,
which can be used to generate a first-approximation Monet cost model.

For reporting it would be nice to aggregate the information
at command/function level. Furthermore, a gprof like analysis
is extremely helpful. It simple calls for collecting all timings
of the caller environments.

The report is dumped on a file at the end of a session.
It provides a complete list of all commands/functions/patterns
being called at least once. The information is not sorted.
@c
void
profileReport(Module cntxt, int outer, stream *out)
{
#ifdef MALprofiler
	int j, k;
	Module s = cntxt;
	Symbol t;
	InstrPtr p;

	if (malProfileMode == 0)
		return;
	while (out && s != NULL) {
		if (s->subscope)
			for (j = 0; j < MAXSCOPE; j++)
				if (s->subscope[j])
					for (t = s->subscope[j]; t != NULL; t = t->peer) {
						for (k = 0; k < t->def->stop; k++) {
							p = getInstrPtr(t->def, k);
							if( t->def->profiler &&
								t->def->profiler[k].counter)
								printInstruction(out, t->def, p, LIST_MAL_INSTR);
						}
					}
		s = s->outer;
	}
	if (outer && cntxt->outer)
		profileReport(cntxt->outer, outer, out);
#endif
}

@-
The profile vector is added to the MAL block the first time we
have to safe monitor information.
@c
void initProfiler(MalBlkPtr mb){
	if( mb->profiler) return;
	mb->profiler = (ProfPtr) GDKmalloc(mb->ssize*sizeof(ProfRecord));
	memset((char*) mb->profiler, 0, mb->ssize*sizeof(ProfRecord));
}
@}
