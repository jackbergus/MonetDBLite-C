@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@f mal_scenario
@a M. Kersten
@v 0.0
@+ Session Scenarios
In MonetDB multiple languages, optimizers, and execution engines can
be combined at run time to satisfy a wide user-community.
Such an assemblage of components is called a @emph{scenario}
and consists of a @emph{reader}, @emph{parser}, @emph{optimizer},
@emph{tactic scheduler} and @emph{engine}. These hooks allow
for both linked-in and external components.

The languages supported are SQL, XQuery, 
and the Monet Assembler Language (MAL).
The default scenario handles MAL instructions, which is used
to illustrate the behavior of the scenario steps.

The MAL reader component handles interaction with
a front-end to obtain a string for subsequent compilation and
execution. The reader uses the common stream package to read
data in large chunks, if possible. In interactive mode the lines
are processed one at a time. 

The MAL parser component turns the string into
an internal representation of the MAL program. 
During this phase semantic checks are performed, such that
we end up with a type correct program.

The code block is subsequently sent to an MAL optimizer.
In the default case the program is left untouched. For other languages, 
the optimizer deploys language specific code transformations,
e.g. foreign-key optimizations in joins and remote query execution.
All optimization information is statically derived from the
code blocks and possible catalogues maintained for the query language
at hand. Optimizers leave advice and their findings in properties
in the symbol table, see @ref{Property Management}.

Once the program has thus been refined, the
MAL scheduler prepares for execution using tactical optimizations.
For example, it may parallelize the code, generate an ad-hoc
user-defined function, or prepare for efficient replication management.
In the default case, the program is handed over to the MAL interpreter
without any further modification.

The final stage is to choose an execution paradigm,
i.e. interpretative (default), compilation of an ad-hoc user
defined function, dataflow driven interpretation,
or vectorized pipe-line execution by a dedicated engine.

A failure encountered in any of the steps terminates the scenario
cycle. It returns to the user for a new command.
@node Scenario Management, Client Interfaces , Session Scenarios, MonetDB Overview 
@+ Scenario management
Scenarios are captured in modules; they can be dynamically loaded
and remain active until the system is brought to a halt.
The first time a scenario @code{XYZ} is used, the system looks for a scenario
initialization routine @code{XYZinitSystem()} and executes it. 
It is typically used to prepare the server for language specific interactions.
Thereafter its components are set to those required by
the scenario and the client initialization takes place.

When the last user interested in a particular scenario leaves the
scene, we activate its finalization routine calling @code{XYZexitSystem()}.
It typically perform cleanup, backup and monitoring functions.

A scenario is interpreted in a strictly linear fashion,
i.e. performing a symbolic optimization before scheduling decisions
are taken.
The routines associated with each state in
the scenario may patch the code so as to assure that subsequent
execution can use a different scenario, e.g. to handle dynamic
code fragments.

@{
The state of execution is maintained in the scenario record for
each individual client. Sharing this information between clients
should be dealt with in the implementation of the scenario managers.
Upon need, the client can postpone a session scenario by 
pushing a new one(language, optimize, tactic, 
processor). Propagation of the state information is
encapsulated a scenario2scenario() call. Not all transformations
may be legal.

@+ Scenario administration
Administration of scenarios follows the access rules 
defined for code modules in general.

@h

#ifndef _MAL_SCENARIO_H
#define _MAL_SCENARIO_H

#include "mal_import.h"

#define READER 0
#define PARSER  1
#define OPTIMIZE 2
#define SCHEDULER 3
#define ENGINE 4
#define INITCLIENT 5
#define EXITCLIENT 6

/*#define MAL_SCENARIO_DEBUG*/
@-
The scenario descriptions contains all information to
implement the scenario. Each client gets a copy.
An exception or error detected while parsing is turned
into an exception and aborts the scenario.
@h
#define MAXSCEN 128

typedef struct SCENARIO {
	str name, language;
	str initSystem;
	MALfcn initSystemCmd;
	str exitSystem;
	MALfcn exitSystemCmd;
	str initClient;
	MALfcn initClientCmd;
	str exitClient;
	MALfcn exitClientCmd;
	str reader;
	MALfcn readerCmd;
	void *readerState;
	str parser;
	MALfcn parserCmd;
	void *parserState;
	str optimizer;
	MALfcn optimizerCmd;
	void *optimizerState;
	str tactics;
	MALfcn tacticsCmd;
	void *tacticsState;
	str engine;
	MALfcn engineCmd;
	void *engineState;
	struct SCENARIO *next;
} *Scenario;

mal_export str setScenario(Client c, str nme);
mal_export void runScenario(Client c);
mal_export void runScenarioBody(Client c);
mal_export str fillScenario(Client c, Scenario scen);
mal_export void clrScenario(Client c);
mal_export str getScenarioLanguage(Client c);
mal_export Scenario getFreeScenario(void);

mal_export str defaultScenario(Client c);	/* used in src/mal/mal_session.c */
mal_export void exitScenario(Client c);	/* used in src/mal/mal_session.c */
mal_export str initScenario(Client c, Scenario s);

mal_export void showCurrentScenario(void);
mal_export void showScenarioByName(stream *f, str s);
mal_export void showScenario(stream *f, Scenario s);
mal_export void showAllScenarios(stream *f);
mal_export void resetScenario(Client c);

mal_export Scenario findScenario(str nme);
mal_export void updateScenario(str nme, MALfcn fcn);

#endif /* _MAL_SCENARIO_H */
@-
@c
#include "mal_scenario.h"
#include "mal_linker.h"		/* for getAddress() */
#include "mal_client.h"
#include "mal_authorize.h"

struct SCENARIO scenarioRec[MAXSCEN] = {
	{"mal", "mal",
	 0, 0,			/* hardwired MALinit*/
	 0, 0,			/* implicit */
	 "MALinitClient", 0,	/* no MALinitClient */
	 "MALexitClient", (MALfcn) & MALexitClient,
	 "MALreader", (MALfcn) &MALreader, 0,
	 "MALparser", (MALfcn) &MALparser, 0,
	 "MALoptimizer", 0, 0,	
	 0, 0, 0,
	 "MALengine", (MALfcn) &MALengine, 0, 0},
	{0,0,			/* name */
	 0, 0,			/* init */
	 0, 0,			/* exit */
	 0, 0,			/* initClient */
	 0, 0,			/* exitClient */
	 0, 0, 0,		/* reader */
	 0, 0, 0,		/* parser */
	 0, 0, 0,		/* optimizer */
	 0, 0, 0,		/* scheduler */
	 0, 0, 0, 0		/* engine */
	 }
};

@-
Currently each user can define a new scenario, provided we have a free slot.
Scenarios not hardwired can always be dropped.
@c
Scenario
getFreeScenario()
{
	int i;
	Scenario scen = NULL;

	mal_set_lock(mal_contextLock, "Scenario");
	for (i = 0; i < MAXSCEN && scenarioRec[i].name; i++)
		;

	if (i == MAXSCEN) {
		GDKerror("freeScenario:no scenario space left; adjust & recompile");
	} else {
		scen = scenarioRec + i;
	}
	mal_unset_lock(mal_contextLock, "Scenario");

	return scen;
}

@-
@= initScen
if( @1->@2){
	if( @1->@2Cmd == 0) @1->@2Cmd = (MALfcn)getAddress(@3,@1->@2,1);
}
@-
A scenario is initialized only once per session. 
All other requests are silently ignored. 
After initialization, all state functions should have been set.
Initialization includes searching for the scenario startup file in
the etc/MonetDB directory. This creates a dependency, because the
malInclude also needs a scenario. To break this cycle, the system should
call once the routine default scenario for each client first.
@c
str
initScenario(Client c, Scenario s)
{
	str msg = MAL_SUCCEED;

	if (s->initSystemCmd)
		return(fillScenario(c, s));
	/* prepare for conclicts */
	mal_set_lock(mal_contextLock, "Scenario");
	if (s->initSystem && s->initSystemCmd == 0) {
		s->initSystemCmd = (MALfcn) getAddress(s->language, s->initSystem, 1);
		if (s->initSystemCmd) {
			msg = (*s->initSystemCmd) (c);
		} else {
			char buf[BUFSIZ];
			snprintf(buf,BUFSIZ,"%s.init",s->language);
			msg = throwMessage(buf,"Scenario not initialized"); 
		}
	}
	/* does the return below unset the lock? */
	if (msg)
		return msg;
	@:initScen(s, exitSystem,s->language)@
	@:initScen(s, initClient,s->language)@
	@:initScen(s, exitClient,s->language)@
	@:initScen(s, reader,s->language)@
	@:initScen(s, parser,s->language)@
	@:initScen(s, optimizer,s->language)@
	@:initScen(s, tactics,s->language)@
	@:initScen(s, engine,s->language)@
	mal_unset_lock(mal_contextLock, "Scenario");
	return(fillScenario(c, s));
}

str
defaultScenario(Client c)
{
	return initScenario(c, scenarioRec);
}

@-
The Monet debugger provides an option to inspect the scenarios currently
defined.
@= scenarioCommand
    if( scen->@1) stream_printf(f," \"%s%s\",",scen->@1,
        (scen->@1Cmd?"":"?"));
    else stream_printf(f," nil,");
@c
void
showScenario(stream *f, Scenario scen)
{
	stream_printf(f, "[ \"%s\",", scen->name);
	@:scenarioCommand(initSystem)@
	@:scenarioCommand(exitSystem)@
	@:scenarioCommand(initClient)@
	@:scenarioCommand(exitClient)@
	@:scenarioCommand(parser)@
	@:scenarioCommand(optimizer)@
	@:scenarioCommand(tactics)@
	@:scenarioCommand(engine)@
	stream_printf(f, "]\n");
}

Scenario
findScenario(str nme)
{
	int i;
	Scenario scen = scenarioRec;

	for (i = 0; i < MAXSCEN && scen->name; i++, scen++)
		if (strcmp(scen->name, nme) == 0)
			return scen;
	return NULL;
}

@-
Functions may become resolved only after the corresponding module
has been loaded. This should be announced as part of the module
prelude code.
Beware that after the update, we also have to adjust the client records.
They contain a copy of the functions addresses.
@= updLine
if( scen->@1 && strcmp(scen->@1,nme) == 0){
	Client c1;
	scen->@1Cmd = fcn;
    for(c1 = mal_clients; c1 < mal_clients+MAL_MAXCLIENTS; c1++) 
    if(@2 && c1->scenario && strcmp(c1->scenario,scen->name)==0) 
		c1->phase[@2]= fcn;
	else
    if(@2 && c1->oldscenario && strcmp(c1->oldscenario,scen->name)==0) 
		c1->oldphase[@2]= fcn;
}
@c
void
updateScenario(str nme, MALfcn fcn)
{
	int i;
	Scenario scen = scenarioRec;

	for (i = 0; i < MAXSCEN && scen->name; i++, scen++) {
		@:updLine(initSystem, 0)@
		@:updLine(exitSystem, 0)@
		@:updLine(initClient, INITCLIENT)@
		@:updLine(exitClient, EXITCLIENT)@
		@:updLine(reader, READER)@
		@:updLine(parser, PARSER)@
		@:updLine(optimizer, OPTIMIZE)@
		@:updLine(tactics, SCHEDULER)@
		@:updLine(engine, ENGINE)@
	}
}

void
showScenarioByName(stream *f, str nme)
{
	Scenario scen = findScenario(nme);

	if (scen)
		showScenario(f, scen);
}

void
showAllScenarios(stream *f)
{
	int i;
	Scenario scen = scenarioRec;

	for (i = 0; i < MAXSCEN && scen->name; i++, scen++)
		showScenario(f, scen);
}

str getScenarioLanguage(Client c){
	Scenario scen= findScenario(c->scenario);
	if( scen) return scen->language;
	return "mal";
}
@-
Changing the scenario for a particular client invalidates the
state maintained for the previous scenario. The old scenario is
retained in the client record to facilitate propagation of 
state information, or to simply switch back to the previous one.
Before we initialize a scenario the client scenario is reset to
the MAL scenario. This implies that all scenarios are initialized
using the same scenario. After the scenario initialization file 
has been processed, the scenario phases are replaced with the
proper ones.

@-
All client records should be initialized with a default
scenario, i.e. the first described in the scenario table.
@c
str
fillScenario(Client c, Scenario scen)
{
	c->scenario = scen->name;

	c->phase[READER] = scen->readerCmd;
	c->phase[PARSER] = scen->parserCmd;
	c->phase[OPTIMIZE] = scen->optimizerCmd;
	c->phase[SCHEDULER] = scen->tacticsCmd;
	c->phase[ENGINE] = scen->engineCmd;
	c->phase[INITCLIENT] = scen->initClientCmd;
	c->phase[EXITCLIENT] = scen->exitClientCmd;
	c->state[READER] = 0;
	c->state[PARSER] = 0;
	c->state[OPTIMIZE] = 0;
	c->state[SCHEDULER] = 0;
	c->state[ENGINE] = 0;
	c->state[INITCLIENT] = 0;
	c->state[EXITCLIENT] = 0;
	if (scen->initClientCmd)
		return((*scen->initClientCmd) (c));

	return(MAL_SUCCEED);
}

void
clrScenario(Client c)
{
	if (c->scenario == 0)
		return;
	c->scenario = 0;
	c->phase[READER] = 0;
	c->phase[PARSER] = 0;
	c->phase[OPTIMIZE] = 0;
	c->phase[SCHEDULER] = 0;
	c->phase[ENGINE] = 0;
	c->phase[INITCLIENT] = 0;
	c->phase[EXITCLIENT] = 0;
	c->state[READER] = 0;
	c->state[PARSER] = 0;
	c->state[OPTIMIZE] = 0;
	c->state[SCHEDULER] = 0;
	c->state[ENGINE] = 0;
	c->state[INITCLIENT] = 0;
	c->state[EXITCLIENT] = 0;
}

@-
Setting a new scenario calls for saving the previous state
and execution of the initClientScenario routine.
@c
str
setScenario(Client c, str nme)
{
	int i;
	str msg;
	Scenario scen = scenarioRec;

	scen = findScenario(nme);
	if (scen == NULL) {
		char msg[256];
		snprintf(msg,256,"Scenario '%s' not initialized\n",nme);
		return throwMessage("setScenario", msg);
	}
	if (c->scenario) {
		c->oldscenario = c->scenario;
		for (i = 0; i < 7; i++) {
			c->oldstate[i] = c->state[i];
			c->oldphase[i] = c->phase[i];
		}
	}
	for (i = 0; i < 7; i++)
		c->state[i] = 0;

	msg = initScenario(c, scen);
	if (msg)
		return msg;
	return MAL_SUCCEED;
}

@-
After finishing a session in a scenario, we should reset the
state of the previous one. But also call the exitClient
to garbage collect any scenario specific structures.
@c
str
getCurrentScenario(Client c)
{
	return c->scenario;
}

void
resetScenario(Client c)
{
	int i;
	Scenario scen = scenarioRec;

	if (c->scenario == 0)
		return;

	scen = findScenario(c->scenario);
	if (scen != NULL && scen->exitClientCmd)
		(*scen->exitClientCmd) (c);

	c->scenario = c->oldscenario;
	for (i = 0; i < 7; i++) {
		c->state[i] = c->oldstate[i];
		c->phase[i] = c->oldphase[i];
	}
	c->oldscenario = 0;
}

void
exitScenario(Client c)
{
	Scenario scen = scenarioRec;

	if (c->scenario == 0)
		return;
	scen = findScenario(c->scenario);
	if (scen->exitSystemCmd)
		(*scen->exitSystemCmd) (c);
}

@}
@- 
The building blocks of scenarios are routines obeying a strict
name signature. They require exclusive access to the client
record. Any specific information should be accessible from
there, e.g. access to a scenario specific state descriptor.
The client scenario initialization and finalization brackets
are  @code{XYZinitClient()} and @code{XYZexitClient()}.

The @code{XYZparser(Client c)} contains the parser for language XYZ
and should fill the MAL program block associated with the client record.
The latter may have been initialized with variables. 
Each language parser may require a catalog with information
on the translation of language specific datastructures into their BAT
equivalent.

The @code{XYZoptimizer(Client c)} contains language specific optimizations
using the MAL intermediate code as a starting point.

The @code{XYZtactics(Client c)} synchronizes the program execution with the
state of the machine, e.g. claiming resources, the history of the client 
or alignment of the request with concurrent actions (e.g. transaction
coordination).

The @code{XYZengine(Client c)} contains the applicable back-end engine.
The default is the MAL interpreter, which provides good balance
between speed and ability to analysis its behavior.

@-
@{
@= runPhase
	if(msg== MAL_SUCCEED && c->phase[@1] && ((msg= (str) (*c->phase[@1])(c)) ||  c->mode <= FINISHING)){
		/* error occurred */
#ifdef MAL_SCENARIO_DEBUG
		stream_printf(GDKstdout,"Error in @1 phase\n");
		if( /*c->mode > FINISHING &&*/ msg )
			stream_printf(GDKstdout,"%s",msg);
#endif
		if (msg) {
			/* FIXME: why is the error not handed back to the user here? */
			GDKfree(msg); 
			msg=0;
		}
		continue;
	}
@-
Access control enforcement. Except for the server owner
running a scenario should be explicitly permitted.
@c
void
runScenarioBody(Client c)
{
	str msg;

/* postponed
	if( !isServerOwner(c) ){
		c->mode = FINISHING;
	}
*/
	while (c->mode > FINISHING) {
		msg = MAL_SUCCEED;
		@:runPhase(READER)@
		@:runPhase(PARSER)@
		@:runPhase(OPTIMIZE)@
		@:runPhase(SCHEDULER)@
		@:runPhase(ENGINE)@
	}
}
void
runScenario(Client c)
{
	int cnt = 0;
	Client c1;

	if( c== 0 || c->phase[READER] == 0) return;

	runScenarioBody(c);
#ifdef MAL_SCENARIO_DEBUG
	printf("About to terminate scenario %s\n", c->scenario);
#endif
@-
Check if we are closing the last client, because then we also
have to call the scenario exit.
@c
	if( c->scenario)
		for (c1 = mal_clients; c1 < mal_clients + MAL_MAXCLIENTS; c1++)
			if (c1->scenario && strcmp(c->scenario, c1->scenario) == 0)
				cnt++;

	if (c->phase[EXITCLIENT]) {
#ifdef MAL_SCENARIO_DEBUG
		printf("Calling client exit function \n");
#endif
		(*c->phase[EXITCLIENT]) (c);
	}
#ifdef MAL_SCENARIO_DEBUG
		printf("scenario client cnt %d\n",cnt);
#endif
	if (cnt == 1) {
		exitScenario(c);
	}
}

@+ MAL scenario initialization
The scenario initialization is currently empty. However, the file should always
be available. Actually, we should move welcome messages to this script, because
it will indicate that the kernel is basically running as expected.
@mal
#print("Welcome in MAL scenario");

@-
@}
