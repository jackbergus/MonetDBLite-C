@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2008 CWI.
@' All Rights Reserved.

@a M. Kersten
@v 0.0
@* The MAL Interpreter
The MAL interpreter always works in the context of a single user session,
which provides for storage access to global variables and modules.
@menu
* MAL API::
* Exception Handling::
* Garbage Collection::
* Stack Management::
@end menu

@{
@h
#ifndef _MAL_INTERPRET_H
#define _MAL_INTERPRET_H

#include "mal_client.h"
#include "mal_factory.h"
#include "mal_profiler.h"

@-
Activation of a thread requires construction of the argument list
to be passed by a handle.
@h

/*#define DEBUG_MAL_INTERPRETER*/
/*#define DEBUG_FLOW */
/*#define STACKTRACE*/

mal_export void showErrors(Client cntxt);
mal_export MalStkPtr prepareMALstack(MalBlkPtr mb);
mal_export str runMAL(Client c, MalBlkPtr mb, int startpc,
			MalBlkPtr mbcaller, MalStkPtr env, InstrPtr pcicaller);
mal_export str runMALdataflow( Client cntxt, MalBlkPtr mb, int startpc, 
		int stoppc, MalStkPtr stk, MalStkPtr env, InstrPtr pcicaller);
mal_export str reenterMAL(Client cntxt, MalBlkPtr mb, int startpc,
	int stoppc, MalStkPtr stk, MalStkPtr env, InstrPtr pcicaller);
mal_export str callMAL(Client cntxt, MalBlkPtr mb, MalStkPtr *glb, 
	ValPtr argv[], char debug);
mal_export void garbageElement(ValPtr v);
mal_export void garbageCollector(Client cntxt, MalBlkPtr mb, MalStkPtr stk, int flag);
mal_export void releaseBAT(MalBlkPtr mb, MalStkPtr stk, int bid);
mal_export lng getVolume(MalStkPtr stk, InstrPtr pci, int rd);

mal_export ptr getArgValue(MalStkPtr stk, InstrPtr pci, int k);
mal_export ptr getArgReference(MalStkPtr stk, InstrPtr pci, int k);

@c
#include "mal_config.h"
#include "mal_interpreter.h"
#include "mal_debugger.h"   /* for mdbStep() */
#include "mal_recycle.h"
#include "mal_type.h"

#define SLOW 1
#define FAST 0

static str runMALsequence( Client cntxt, MalBlkPtr mb, int startpc, 
		int stoppc, MalStkPtr stk, MalStkPtr env, InstrPtr pcicaller);
static str setDynamicType(MalBlkPtr mb, VarPtr v, int tpe, int pc);
static void showVolume(Client cntxt, MalStkPtr stk, InstrPtr pci, int rd);
static void displayVolume(Client cntxt, lng vol);
@-
We can speed up the copying, provided we ignore copying ptr-based
objects.
@c

ptr getArgValue(MalStkPtr stk, InstrPtr pci, int k){
	int j=0;
	ValRecord *v;
	ptr val = NULL;
	int tpe ;

	j = pci->argv[k];
	v= &stk->stk[j];
	tpe = v->vtype;
tstagain:
	switch(tpe){
	/* switch(ATOMstorage(v->vtype)){ */
	case TYPE_void: val= (ptr) & v->val.ival; break;
	case TYPE_bit: val= (ptr) & v->val.cval[0]; break;
	case TYPE_chr: val= (ptr) & v->val.cval[0]; break;
	case TYPE_sht: val= (ptr) & v->val.shval; break;
	case TYPE_bat: val= (ptr) & v->val.bval; break;
	case TYPE_int: val= (ptr) & v->val.ival; break;
	case TYPE_wrd: val= (ptr) & v->val.wval; break;
	case TYPE_bte: val= (ptr) & v->val.btval; break;
	case TYPE_oid: val= (ptr) & v->val.oval; break;
	case TYPE_ptr: val= (ptr) v->val.pval; break;/*!!*/
	case TYPE_flt: val= (ptr) & v->val.fval; break;
	case TYPE_dbl: val= (ptr) & v->val.dval; break;
	case TYPE_lng: val= (ptr) & v->val.lval; break;
	case TYPE_str: val= (ptr) v->val.sval; break;/*!!*/
	default:
		tpe= ATOMstorage(tpe);
		goto tstagain;
	}
	return val;
} 
@-
Alternatively, the routines can obtain a reference to a particular
value. This is particularly handy for the optimizers, while the former
is mostly used to prepare a call to the linked libraries.
The struct alignment leads to 40% gain in simple instructions when set.
@c
INLINE
ptr getArgReference(MalStkPtr stk, InstrPtr pci, int k)
{
#ifdef STRUCT_ALIGNED
	return (ptr) & stk->stk[pci->argv[k]].val.ival;
#else
	int j=0;
	ValRecord *v=0;
	ptr ret = NULL;

	j = pci->argv[k];
	v= &stk->stk[j];

	switch(ATOMstorage(v->vtype)){
	case TYPE_void: ret= (ptr) & v->val.ival; break;
	case TYPE_bit: ret= (ptr) & v->val.cval[0]; break;
	case TYPE_chr: ret= (ptr) & v->val.cval[0]; break;
	case TYPE_sht: ret= (ptr) & v->val.shval; break;
	case TYPE_bat: ret= (ptr) & v->val.bval; break;
	case TYPE_int: ret= (ptr) & v->val.ival; break;
	case TYPE_wrd: ret= (ptr) & v->val.wval; break;
	case TYPE_bte: ret= (ptr) & v->val.btval; break;
	case TYPE_oid: ret= (ptr) & v->val.oval; break;
	case TYPE_ptr: ret= (ptr) & v->val.pval; break;
	case TYPE_flt: ret= (ptr) & v->val.fval; break;
	case TYPE_dbl: ret= (ptr) & v->val.dval; break;
	case TYPE_lng: ret= (ptr) & v->val.lval; break;
	case TYPE_str: ret= (ptr) & v->val.sval; break;
	default:
		ret= (ptr) & v->val.pval; 
	}
	return ret;
#endif
} 

void showErrors(Client cntxt) {
	int i;
	if (cntxt->errbuf == '\0')
		return;

	if (*cntxt->errbuf) {
		i = (int)strlen(cntxt->errbuf);
		stream_printf(cntxt->fdout, "%s", cntxt->errbuf);
		if (cntxt->errbuf[i - 1] != '\n')
			stream_printf(cntxt->fdout, "\n");
		*cntxt->errbuf = '\0';
	}
}
@-
The bigfoot memory tracker keeps track on the space occupancy of BATs. 
It ignores for the time being the heaps for the variable sized atoms.
@c
static INLINE void 
updateBigFoot(Client cntxt, int bid, int add)
{
	BAT *b;

	if (bid != bat_nil && BBP_lrefs(bid) == 1){
		size_t cnt = 0;
		b= BATdescriptor(bid);
		if (b == NULL) 
			return;
		/* count it once ! */
		cntxt->cnt = cnt = BATcount(b);
		if (add) {
			cntxt->vmfoot += VIEWhparent(b)?0:headsize(b,cnt);
			cntxt->vmfoot += VIEWtparent(b)?0:tailsize(b,cnt);
		} else {
			cntxt->vmfoot -= VIEWhparent(b)?0:headsize(b,cnt);
			cntxt->vmfoot -= VIEWtparent(b)?0:tailsize(b,cnt);
		}
		if (cntxt->vmfoot > cntxt->bigfoot)
			cntxt->bigfoot = cntxt->vmfoot;
		BBPunfix(b->batCacheid);
	}
}
@-
Copy the constant values onto the stack frame
Also we cannot overwrite values on the stack as this maybe part of a 
sequence of factory calls.
@= initStack
	for(i= @1; i< mb->vtop; i++) {
		lhs = &stk->stk[i];
		if( isVarConstant(mb,i) > 0 ){
			assert(!isVarCleanup(mb,i));
			if( !isVarDisabled(mb,i)){
				rhs = &getVarConstant(mb,i);
				*lhs = *rhs;
			}
		} else
			lhs->vtype = getVarGDKType(mb,i);
	}
@c

MalStkPtr
prepareMALstack(MalBlkPtr mb){
	MalStkPtr stk= NULL;
	int i;
	ValPtr lhs,rhs;

	stk= newGlobalStack(mb->vsize);
	memset((char *) stk, 0, stackSize(mb->vtop));
	stk->stktop= mb->vtop; 
	stk->stksize= mb->vsize;
	stk->blk= mb;

	@:initStack(1)@
	return stk;
}

str runMAL(Client cntxt, MalBlkPtr mb, int startpc, MalBlkPtr mbcaller, 
	   MalStkPtr env, InstrPtr pcicaller){
	MalStkPtr stk= NULL;
	int i;
	ValPtr lhs,rhs;
	InstrPtr pci=getInstrPtr(mb,0);
	str ret;
	int stkpc=0;
	@:performanceVariables@

	if (mb->errors) {
		showErrors(cntxt);
		if (cntxt->itrace == 0) /* permit debugger analysis */
			return createScriptException(mb, 0, MAL, NULL, "Syntax error in script");
	}
	@:beginProfile@
@-
Prepare a new interpreter call. This involves two steps, (1) allocate
the minimum amount of stack space needed, some slack resources
are included to permit code optimizers to add a few variables at run time,
(2) copying the arguments into the new stack frame.
Notice that arguments are always the first entries on the stack.

The env stackframe is set when a MAL function is called recursively.
Alternatively, there is no caller but a stk to be re-used for interpretation.
We assume here that it aligns with the variable table of the routine
being called.
@c
	/* allocate space for value stack */
	/* the global stack should be large enough */
	if( mbcaller== NULL && env != NULL){
		stk = env;
		if( mb != stk->blk) 
			showScriptException(mb,0,MAL,"runMAL:misalignment of symbols\n");
		if( mb->vtop > stk->stksize)
			showScriptException(mb,0,MAL,"stack too small\n");
		pci= pcicaller;
	} else {
		newStack(stk,mb->vsize);
		memset((char *) stk, 0, stackSize(mb->vtop));
		stk->stktop= mb->vtop; 
		stk->stksize= mb->vsize;
		stk->blk= mb;
		stk->cmd= cntxt->itrace; /* set debug mode */
		if( env) {
			stk->stkdepth= stk->stksize + env->stkdepth;
			/*safeguardStack*/
		}
	} 

	if( env && mbcaller){
		InstrPtr pp;
		int k;
@-
Beware, a function signature f(a1..an):(b1..bn) is parsed in such a way that
the symbol table and stackframe contains the sequence 
f,a1..an,b1..bn. This slightly complicates the implementation
of the return statement.
@c
		pci= pcicaller;
		pp = getInstrPtr(mb, 0);
		/* set return types */
		for(i=0; i< pci->retc; i++){
			lhs = &stk->stk[i];
			lhs->vtype =getVarGDKType(mb,i);
		}
		for(k=pp->retc; i<pci->argc; i++,k++){
			lhs = &stk->stk[pp->argv[k]];
			/* variable arguments ? */
			if( k== pp->argc-1) k--; 

			rhs = &env->stk[pci->argv[i]];
			VALcopy(lhs,rhs);
			if( lhs->vtype == TYPE_bat)
				BBPincref(lhs->val.bval, TRUE);
		}
		stk->up = env;
		env->down = stk;
	} 
@-
An optimization is to copy all constant variables used in functions immediately
onto the value stack. Then we do not have to check for their location
later on any more. At some point, the effect is optimal, if at least several
constants are referenced in a function (a gain on tst400a of 20% has been 
observed due the small size of the function).

Moreover, we have to copy the result types to the stack for later
use. The stack value is cleared to avoid misinterpretation of left-over
information. Since a stack frame may contain values of a previous call,
we should first remove garbage. 
@c
	@:initStack((env && mbcaller)?pci->argc:1)@

	if(stk->cmd  && env && stk->cmd!='f') stk->cmd = env->cmd ;
	ret = runMALsequence(cntxt, mb, startpc,  0, stk, env, pcicaller);

	/* pass the new debug mode to the caller */
	if (stk->cmd  && env && stk->cmd!='f') env->cmd = stk->cmd; 
	if (!stk->keepAlive && garbageControl(getInstrPtr(mb,0)) )
		garbageCollector(cntxt, mb,stk, env != stk);
	@:endProfile@
	return ret;
}
@-

@+ Single instruction
It is possible to re-enter the interpreter at a specific place.
This is used in the area where we need to support co-routines.

A special case for MAL interpretation is to execute just one instruction.
This is typically used by optimizers and schedulers that need part of the 
answer to direct their actions. Or, a dataflow scheduler could step in
to enforce a completely different execution order.
@c
str reenterMAL(Client cntxt, MalBlkPtr mb, int startpc, int stoppc,
	MalStkPtr stk, MalStkPtr env, InstrPtr pcicaller)
{
	str ret;

	if(env && stk && stk->cmd!='f') stk->cmd = env->cmd ;

	ret = runMALsequence(cntxt, mb, startpc,  stoppc, stk, env, pcicaller);

	/* pass the new debug mode to the caller */
	if (env && stk->cmd!='f') env->cmd = stk->cmd;
	if (!stk->keepAlive && garbageControl(getInstrPtr(mb,0)) )
		garbageCollector(cntxt, mb,stk,env!=stk);
	return ret;
}
@-
Front ends may benefit from a more direct call to any of the MAL
procedural abstractions. The argument list points to the arguments
for the block to be executed. An old stack frame may be re-used,
but it is then up to the caller to ensure it is properly
initialized. 
The call does not return values, they are ignored.
@c
str 
callMAL(Client cntxt, MalBlkPtr mb, MalStkPtr *env, ValPtr argv[], char debug){
	MalStkPtr stk= NULL;
	str ret= MAL_SUCCEED;
	int i;
	ValPtr lhs,rhs;
	InstrPtr pci= getInstrPtr(mb,0);
	int stkpc=0;
	@:performanceVariables@

#ifdef DEBUG_CALLMAL
	stream_printf(cntxt->fdout,"callMAL\n");
	printInstruction(cntxt->fdout,mb,pci,LIST_MAL_ALL);
#endif
	@:beginProfile@
	switch( pci->token){
	case FUNCTIONsymbol:
	case FCNcall:
@-
Prepare the stack frame for this operation. Copy all the arguments
in place. We assume that the caller has supplied pointers for
all arguments and return values.
@c
		if( *env==NULL){
			stk=newGlobalStack(mb->vsize);
			memset((char *) stk, 0, stackSize(mb->vtop));
			stk->stktop= mb->vtop; 
			stk->stksize= mb->vsize;
			stk->blk= mb;
			stk->up = 0;
			@:initStack(pci->argc)@
			stk->keepAlive = TRUE;
			*env= stk;
		} else stk = *env;
		assert(stk);
		for(i=pci->retc; i<pci->argc; i++){
			lhs= &stk->stk[pci->argv[i]];
			VALcopy(lhs, argv[i]);
			if( lhs->vtype == TYPE_bat)
				BBPincref(lhs->val.bval,TRUE);
		}
		stk->cmd = debug;
		ret = runMALsequence(cntxt, mb, 1,  0, stk, 0, 0);
		break;
	case FACTORYsymbol:
	case FACcall:
		ret= callFactory(cntxt, mb, argv,debug);
		break;
	case PATcall:
	case CMDcall:
	default:
		throw(MAL, "mal.interpreter",
				"Non-supported call the MAL interpreter");
	}
	@:endProfile@
	return ret;
}
@-
The core of the interpreter is presented next. It takes the context information
and starts the interpretation at the designated instruction.
Note that the stack frame is aligned and initialized in the enclosing routine.
@c
str runMALsequence( Client cntxt, MalBlkPtr mb, int startpc, 
		int stoppc, MalStkPtr stk, MalStkPtr env, InstrPtr pcicaller)
{   
	ValPtr lhs,rhs,v;
	int i,k; 
	InstrPtr pci=0; 
	int exceptionVar;
	str ret=0;
	int stamp= -1;
	bat *backup= (bat*) alloca(mb->maxarg * sizeof(bat));
	str *sbackup= (str*) alloca(mb->maxarg * sizeof(str));
	lng oldtimer=0;
	struct Mallinfo oldMemory;
	int stkpc=0;
	MT_Lock *lock = NULL;
	int tid = 0;

#ifdef HAVE_SYS_RESOURCE_H
	int oldinblock=0;
	int oldoublock=0;
	struct rusage oldResource;
#endif
	@:performanceVariables@

	if( cntxt->flags & timerFlag)
		oldtimer= cntxt->timer= GDKusec();
	oldMemory.arena= 0;
		
	stkpc = startpc;
	exceptionVar = -1;
@-
From this point onwards we should differentiate fast processing
against monitored processing. Fast processing is possible if there is
no call to the debugger statically/dynamically set. Same holds for
performance control statements.
The code currently does not statically checks the mode change.
Preferrably we should introduce a itrace flag PROFILE
We rely on optimizing compilers to remove the redundant code.
@c
	if (malProfileMode == 0 && cntxt->itrace==0 && cntxt->flags == 0 && GDKdebug == 0) {
		while(stkpc < mb->stop && stkpc != stoppc ){
			pci = getInstrPtr(mb,stkpc);
			if (malProfileMode + cntxt->itrace)
				goto workslow;
			@:MALrecycleStart@ {
				@:MALinterpret(FAST)@
				@:MALrecycleExit@
			}
			@:MALflowofcontrol(FAST,continue)@
		}
	} else
	while(stkpc < mb->stop && stkpc != stoppc ){
		pci = getInstrPtr(mb,stkpc);
workslow:
		if( cntxt->itrace  ) {
			lng t=0;
			if( stk->cmd== 0) stk->cmd= cntxt->itrace;
			if( oldtimer)
				t= GDKusec();
			mdbStep(cntxt,mb,stk,stkpc);
			if( stk->cmd == 'x') {
				stkpc = mb->stop;
				continue;
			}
			if( oldtimer ) {
				/* ignore debugger waiting time*/
				t= GDKusec()-t;
				oldtimer += t;
#ifdef HAVE_SYS_RESOURCE_H
				getrusage(RUSAGE_SELF, &oldResource);
#endif
				oldMemory= MT_mallinfo();
			}
		}

		@:beginProfile@
		@:MALrecycleStart@ {
			@:MALinterpret(SLOW)@
			@:MALrecycleExit@
		}
		@:MALflowofcontrol(SLOW,continue)@
		@:endProfile@
	}
	@:MALwrapup@
	return ret;
}
@- Out of order execution
The alternative is to execute the instructions out of order
using dataflow dependencies. It only works on a code
sequence that does not include additional (implicit) flow of control
statements and, ideally, consist of expensive BAT operations.
The dataflow interpreter selects cheap instructions
using a simple costfunction based on the size of the BATs involved.

The dataflow portion is identified as a guarded block,
whose entry is controlled by the function language.dataflow();
This way the function can inform the caller to skip the block
when dataflow execution was performed.
@h
mal_export str runMALdataflow( Client cntxt, MalBlkPtr mb, int startpc, 
		int stoppc, MalStkPtr stk, MalStkPtr env, InstrPtr pcicaller);
@-
The flow graphs should be organized such that parallel threads can
access it mostly without expensive locking.
Furthermore, per flow block we keep an administration when
variables are blocked or not. An instruction can fire if all
its input variables are not blocked.
@c
#define DFLOWpending 0		/* runnable */
#define DFLOWrunning 1		/* currently in progress */
#define DFLOWwrapup  2		/* done! */

typedef struct queue {
	int size;	/* size of queue */
	int first;	/* first in the queue */
	int last;	/* last element in the queue */
	void **data;	
	MT_Lock l;	/* its a shared resource, ie we need locks */
	MT_Sema s;	/* threads wait on empty queues */
} queue;

typedef struct {
	Client cntxt;		/* for debugging */
	MalBlkPtr mb;		/* carry the context */
	MalStkPtr stk;
	int start, stop;	/* guarded block under consideration*/
	char *status;	/* statements can be blocked on other statements */
	char *blocked;		/* blocked, should be created first */
	int *inuse;		/* inuse reference count */
	int *reassign;
	queue *done;
} *DataFlow, DataFlowRec;

typedef struct {
	int pc;	/* pc in underlying malblock */
	sht status;
	sht cost;
	str error;
	DataFlow flow;
} *FlowStep, FlowStepRec;

@-
The cost of a flow step depends on availability of its
arguments and the total size of the BATs being accessed.
All references to variables outside the block are considered
initialized. All within the block or not, until an instruction
delivers it as a target.

There are several options to calculate the cost.
The dataflow optimizer turns on profiling, which means
we can use the aggregated timing as an indication of the
expected cost. This works optimal for similar queries.

The base line is to use the BAT counts, because these
are the more interesting instructions to consider.
@c
lng
MALflowCost(MalBlkPtr mb, MalStkPtr stk, int pc){
	int i,bid;
	lng cost= 0;
	BAT *b;
	InstrPtr p;

	if (mb->profiler && mb->profiler[pc].counter)
		cost= mb->profiler[pc].ticks/ mb->profiler[pc].counter;

	/* cost is linear related to the total input */
	if (cost == 0){
		p= getInstrPtr(mb,pc);
		for(i= p->retc; i<p->argc; i++)
		if( isaBatType(getArgType(mb,p,i)) &&
			(bid= ABS(stk->stk[getArg(p,i)].val.bval)) ){
			b= BATdescriptor(bid);
			if( b == NULL) continue;
			cost += BATcount(b);
			BBPreleaseref(bid);
		}
	}
	/* naive costs */
	if (cost == 0)
		cost = p->argc;
	return cost;
}

@-
The dataflow execution is confined to a barrier block. 
Within the block there are multiple flows, which, in principle,
can be executed in parallel.
@c
int nway = 2;

typedef struct {
	MT_Id tid;
	int id;
} FlowTask;

static queue*
q_create( int sz )
{
	queue *q = (queue*)GDKmalloc(sizeof(queue));

	q->size = ((sz<<1)>>1); /* we want a multiple of 2 */
	q->first = -1;
	q->last = 0;
	q->data = (void*)GDKmalloc(sizeof(void*)*sz);
	
	MT_init_lock(q->l, "q_create");
	MT_init_sema(q->s, 0, "q_create");
	return q;
}

static void
q_destroy( queue *q )
{
	GDKfree(q->data);
	GDKfree(q);
}

static void
q_enqueue(queue *q, void *d)
{
	MT_set_lock(q->l, "q_enqueue");
	if (q->last == q->first) {
		/* enlarge buffer */
		q->size <<= 1;
		q->data = GDKrealloc(q->data, q->size);
	}
	q->data[q->last] = d;
	if (q->first < 0)
		q->first = q->last;
	q->last = (q->last+1)&(q->size-1);
	MT_unset_lock(q->l, "q_enqueue");
	MT_up_sema(q->s, "q_enqueue");
}

static void *
q_dequeue(queue *q) 
{
	void *r = NULL;

	MT_down_sema(q->s, "q_dequeue");
	MT_set_lock(q->l, "q_dequeue");
	if (q->first < 0) 
		assert(0); 	/* nothing to dequeue */
	r = q->data[q->first];
	q->first = (q->first+1)&(q->size-1);
	if (q->first == q->last) /* empty */
		q->first = -1;
	MT_unset_lock(q->l, "q_dequeue");
	return r;
}

static int
q_empty(queue *q)
{
	/* not thread save ! */
	if (q->first < 0)
		return 1;
	return 0;
}
@-
We simply move a cheap instruction into the front of the queue.
Beware, we assume that variables are assigned a value once, otherwise
the order may really create errors.
The order of the instructions should be retained as long as possible.
@c
static str
DFLOWstep(FlowTask *t, FlowStep fs) 
{
	DataFlow flow = fs->flow;
	int stkpc = fs->pc;

	ValPtr lhs,rhs,v;
	int i,k;
	int exceptionVar= -1;
	str ret = MAL_SUCCEED;
	int stamp = -1;
	bat *backup= (bat*) alloca(flow->mb->maxarg * sizeof(bat));
	str *sbackup= (str*) alloca(flow->mb->maxarg * sizeof(str));
	Client cntxt = flow->cntxt;
	MalBlkPtr mb = flow->mb;
	MalStkPtr stk = flow->stk;
	int startpc = flow->start;
	InstrPtr pci;
	lng oldtimer=0;
	struct Mallinfo oldMemory = MT_mallinfo();
	MT_Lock *lock = &flow->done->l;
	int tid = t->id;

#ifdef HAVE_SYS_RESOURCE_H
	int oldinblock=0;
	int oldoublock=0;
	struct rusage oldResource;
#endif
	@:performanceVariables@

	pci = getInstrPtr(flow->mb, stkpc);
	if (stk->cmd) {
		lng t=0;
		if( oldtimer)
			t= GDKusec();
		mdbStep(cntxt,mb,stk,getPC(mb,pci));
		if (stk->cmd == 'x') {
			/* need a way to skip */
			stkpc = mb->stop;
			fs->pc = -1;
			return ret;
		}
		if (oldtimer ) {
			/* ignore debugger waiting time*/
			t= GDKusec()-t;
			oldtimer += t;
#ifdef HAVE_SYS_RESOURCE_H
			getrusage(RUSAGE_SELF, &oldResource);
#endif
			oldMemory = MT_mallinfo();
		}
	}

	@:beginProfile@
	ret = MAL_SUCCEED;
@-
The number of instructions allowed is severely
limited.
We don't allow sequential flow control here.
@c
	@:MALrecycleStart@ {
		switch (pci->token){
		case ASSIGNsymbol: @:assignStmt(SLOW,fs->pc = -1; return ret)@ break;
		case PATcall: @:patterncall(SLOW,fs->pc = -1; return ret)@ break;
		case CMDcall: @:commandcall(SLOW,fs->pc = -1; return ret)@ break;
		case FACcall: @:factorycall(SLOW,fs->pc = -1; return ret)@ break;
		case FCNcall: @:functioncall(SLOW,fs->pc = -1; return ret)@ break;
		case NOOPsymbol:
		case REMsymbol:
			break;
		default:
			if( pci->token < 0 ){
				/* temporary NOOP instruction */
				break;
			}
			ret = createScriptException(mb, stkpc, MAL,
					NULL, "unkown operation");
		}
		@:MALrecycleExit@
	}
	/* update the list of eligable instructions */
	@:endProfile@
	if (ret)
		fs->pc = -1;
	return ret;
}

static FlowTask *worker = NULL;
static queue *work = NULL;

static void
runDFLOWworker(void *t)
{
	FlowStep fs;
	FlowTask *task = (FlowTask*) t;

#ifdef DEBUG_FLOW
	stream_printf(GDKstdout, "start parallel interpreter thread\n");
#endif
	while(task) {
		fs = (FlowStep)q_dequeue(work);
		fs->error = DFLOWstep(task, fs);
		q_enqueue(fs->flow->done, fs);
	}
}

static void 
DFLOWcreate(void)
{
	int i;

	assert(worker == NULL);

	work = q_create(256);

	nway = GDKnr_threads;
	worker = (FlowTask *) GDKzalloc(sizeof(FlowTask)*nway);
	for(i=0; i<nway; i++) {
		worker[i].id = i;
		/* create the thread and let it wait */
		MT_create_thread(&worker[i].tid, runDFLOWworker, worker+i);
	}
}

static void
DFLOWreassign(DataFlow flow, FlowStep fs, int oa)
{
	int i, use = 0, limit = flow->stop - flow->start;
	
	for (i = flow->reassign[oa] - flow->start; i<limit; i++) {
		int j, a;
		InstrPtr p = getInstrPtr(flow->mb, fs[i].pc);

		for (j=0; j<p->retc; j++){
			a = getArg(p, j);

			if (a == oa) {
				flow->reassign[a] = fs[i].pc;
				/* the variable isn't used inbetween we should
				   set the reassign one down */
				if (!use) {
					flow->reassign[a]++;
					flow->blocked[a] = 1;
				}
				flow->inuse[a] = use;
#ifdef DEBUG_FLOW
	printf("%d [ %1d %2d %3d ]\n", a, 
		flow->blocked[a],
		flow->inuse[a],
		flow->reassign[a]);
#endif
				return;
			}
		}
		for (j=p->retc; j<p->argc; j++){
			a = getArg(p, j);
			if (a == oa)
				use++;
		}
	}
	/* no reassign found */
	flow->reassign[oa] = 0;
	flow->inuse[oa] = use;
}

static void
DFLOWinit(DataFlow flow, FlowStep fs)
{
	int i, n;

	for (n=0, i = flow->start; i<flow->stop; i++, n++) {
		InstrPtr p = getInstrPtr(flow->mb, i);
		int j, a, oa = -1;

		/* initial state, ie everything can run */
		fs[n].pc = i;
		fs[n].status = DFLOWpending; 
		fs[n].flow = flow; 
		fs[n].cost = -1; 
		fs[n].error = NULL; 

		for (j=0; j<p->retc; j++){
			a = getArg(p, j);

			if (!flow->reassign[a] && (flow->blocked[a] ||
			    (flow->inuse[a] && !flow->blocked[a])))
				flow->reassign[a] = i;
			if (!flow->reassign[a] && !flow->blocked[a] && !flow->inuse[a])
				flow->blocked[a] = 1;
		}
		if (p->retc)
			oa = getArg(p, 0);
		for (j=p->retc; j<p->argc; j++){
			a = getArg(p, j);
			if (!isVarConstant(flow->mb, a) && oa != a && !flow->reassign[a])
				flow->inuse[a]++;
		}
	}
#ifdef DEBUG_FLOW
for (i=0; i < flow->mb->vtop; i++) {
	printf("%d [ %1d %2d %3d ]\n", i, 
		flow->blocked[i],
		flow->inuse[i],
		flow->reassign[i]);
}
#endif
}

static int
garbage( MalBlkPtr mb, InstrPtr p) 
{
	int ia;
	ValPtr s;

	if (p->retc != 1 || p->argc != 2)  
		return 0;
	if (!isVarConstant(mb, ia = getArg(p, 1))) 
		return 0;
	if (getVarGDKType(mb, ia) != TYPE_bat)  
		return 0;
	s = &getVarConstant(mb, ia);
	if (s->val.bval && s->val.bval != bat_nil) 
		return 0;
	return 1;
}

static str
DFLOWexecute( DataFlow flow )
{
	int queued = 0;
	int pc = 0, i, j;
	int limit = flow->stop - flow->start;
	str ret = MAL_SUCCEED;
	FlowStep fs = (FlowStep)alloca(sizeof(FlowStepRec) * limit);

	/* initialize the eligible statements */
	DFLOWinit(flow, fs);

	if (flow->cntxt->flags & timerFlag)
		flow->cntxt->timer = GDKusec();
	
	while(pc < limit) {
		for(i = pc; i < limit && queued < (nway<<1); i++) {
			if (fs[i].status == DFLOWwrapup) 
				if (pc == i)
					pc++;
			if (fs[i].status == DFLOWpending) { 
				InstrPtr p = getInstrPtr(flow->mb, fs[i].pc);
				int blocked = 0, oa = getArg(p,0);

				/* check if output args are blocked */
				for(j=0; j<p->retc && !blocked; j++) {
					int oa = getArg(p,j);

					/* inuse or 
					   this is a reassign statement*/
					if (!flow->blocked[oa] ||
					   (flow->reassign[oa] &&
					    flow->reassign[oa] <= fs[i].pc)) 
						blocked++;
				}
				
				/* check if input args aren't blocked */
				for(j=p->retc; j<p->argc && !blocked; j++) {
					int ia = getArg(p,j);

					if ((!isVarConstant(flow->mb, ia) &&
					    ia != oa &&
					    flow->blocked[ia]) || 
					   (ia != oa &&
					    flow->reassign[ia] &&
					    flow->reassign[ia] <= fs[i].pc)) 
						blocked++;
				}

#ifdef DEBUG_FLOW
if (blocked) {
	int oa = getArg(p,0);
	printf("cannot enqueue %d [ %1d %2d %3d ]\n", fs[i].pc, flow->blocked[getArg(p,0)], flow->inuse[oa], flow->reassign[oa]);
	if (oa != getArg(p,1)) {
		oa = getArg(p,1);
		printf("cannot enqueue in [ %1d %2d %3d ]\n", flow->blocked[getArg(p,0)], flow->inuse[oa], flow->reassign[oa]);
	}
	printInstruction(GDKstdout, flow->mb, p, LIST_MAL_ALL);
}
#endif
				if (!blocked) { 
					queued++;
					fs[i].status = DFLOWrunning;

#ifdef DEBUG_FLOW
	printf("enqueue %d\n", fs[i].pc);
	printInstruction(GDKstdout, flow->mb, p, LIST_MAL_ALL);
#endif
					q_enqueue(work, fs+i);
				}
			}
		}
		assert(queued || pc == limit); 
		/* we cannot enqueue, lets wait for the results */ 
		while(queued) {
			FlowStep f = q_dequeue(flow->done);

			f->status = DFLOWwrapup;
			if (f->pc < 0) {
				/* dequeue the remainders */
				while(--queued) 
					(void)q_dequeue(flow->done);
				pc = limit + 1;
				return f->error;
			} else {
				InstrPtr p = getInstrPtr(flow->mb, f->pc);
				int oa = getArg(p,0);

#ifdef DEBUG_FLOW
	printf("done %d\n", f->pc);
	printInstruction(GDKstdout, flow->mb, p, LIST_MAL_ALL);
#endif
				/* deblock the output args */
				for(j=0; j<p->retc; j++) {
					int oa = getArg(p,j);

					/* use can now start */
					flow->blocked[oa] = 0;

					/* second statement, ie
					   garbage collect or accum 
					 */
					/* based on type check for reassign */
					if (flow->inuse[oa] == 0 && 
					    flow->reassign[oa] == f->pc+1 &&
					    !garbage(flow->mb, p)) {
						DFLOWreassign(flow, fs, oa);
					} else if (flow->inuse[oa] == 0 &&
					    !garbage(flow->mb, p)) {
						/* enable reassign */
						flow->blocked[oa] = 1;
						if (flow->reassign[oa])
							flow->reassign[oa]++;
					}
				}

				/* free the input args */
				for(j=p->retc; j<p->argc; j++) {
					int ia = getArg(p,j);

					if (ia != oa && !isVarConstant(flow->mb, ia))
						flow->inuse[ia]--;
					assert(flow->inuse[ia] >= 0);
					
					if (ia != oa && flow->inuse[ia] == 0 && flow->reassign[ia]) {
						/* enable reassign */
						flow->blocked[ia] = 1;
						if (flow->reassign[ia])
							flow->reassign[ia]++;
					}
				}
				if (pc == f->pc-flow->start)
					pc++;

			}
			queued--;
			if (pc < limit && q_empty(flow->done)) /* only fetch next if possible */
				break;
		}
	}
	return ret;
}

str runMALdataflow( Client cntxt, MalBlkPtr mb, int startpc, 
		int stoppc, MalStkPtr stk, MalStkPtr env, InstrPtr pcicaller)
{   
	DataFlowRec flow;
	str ret = MAL_SUCCEED;

#ifdef DEBUG_FLOW
	stream_printf(GDKstdout, "runMALdataflow for block %d - %d\n", startpc,stoppc);
	printFunction(GDKstdout, mb, 0);
#endif

	(void)env;
	(void)pcicaller;

	assert(stoppc > startpc);
	flow.cntxt = cntxt;
	flow.start = startpc+1;
	flow.stop = stoppc;
	flow.mb = mb;
	flow.stk = stk;
	flow.status = (char*) GDKzalloc((stoppc-startpc+1));
	flow.blocked = (char*) GDKzalloc(sizeof(char)*mb->vtop);
	flow.inuse = (int*) GDKzalloc(sizeof(int)*mb->vtop);
	flow.reassign = (int*) GDKzalloc(sizeof(int)*mb->vtop);
	flow.done = q_create(256);

	if (!worker) 
		DFLOWcreate();

	ret = DFLOWexecute(&flow);
	q_destroy(flow.done);
	GDKfree(flow.status);
	GDKfree(flow.blocked);
	GDKfree(flow.inuse);
	GDKfree(flow.reassign);
	return ret; 
}
@-
@= MALwrapup
	if( exceptionVar >= 0) {
		if (ret) {
			ret = createScriptException(mb, mb->stop-1,
					getExceptionType(getVarName(mb,exceptionVar)),
					ret, "Exception not caught");
		} else {
			if (stk->stk[exceptionVar].vtype == TYPE_str) {
				ret = createScriptException(mb, mb->stop-1, MAL,
						stk->stk[exceptionVar].val.sval,
						"Exception not caught");
			} else {
				ret = createScriptException(mb, mb->stop-1, MAL,
						NULL, "Exception not caught");
			}
		}
	}
@+ Safeguarding
The physical stack for each thread is an operating system parameter.
We do not want recursive programs crashing the server, so once in
a while we check whether we are running dangerously low on available
stack space.

This situation can be detected by calling upon the GDK functionality
of by limiting the depth of a function calls.
Expensive? 70 msec for 1M calls. Use with care.
@h
mal_export str safeguardStack(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
@c
str
safeguardStack(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	int depth = *(int*) getArgReference(stk,pci,1);
	if (stk->stkdepth > depth * mb->vtop && THRhighwater()) {
		throw(MAL, "mal.interpreter", 
			"Interpret: running out of physical stack space!\n");
	}
	return MAL_SUCCEED;
}

@+ The interpreter loop
The interpreter is geared towards execution a MAL procedure together
with all its decendant invocations. As such, it provides the 
MAL abtract machine processor.

The value-stack frame of the surrounding scope is needed to resolve
binding values.  Getting (putting) a value from (into) a surrounding
scope should be guarded with the exclusive access lock.
This situation is encapsulated by a bind() function call, whose parameters
contain the access mode required.

The formal procedure arguments are assumed to always occupy the first
elements in the value stack.
@+ The major switch

@= MALinterpret
	ret = 0;
	switch( pci->token){
	case ASSIGNsymbol: @:assignStmt(@1,continue)@ break;
	case PATcall: @:patterncall(@1,continue)@ break;
	case CMDcall: @:commandcall(@1,continue)@ break;
	case FACcall: @:factorycall(@1,continue)@ break;
	case FCNcall: @:functioncall(@1,continue)@ break;
	case NOOPsymbol:
	case REMsymbol:
		break;
	case ENDsymbol: 
		if( getInstrPtr(mb,0)->token == FACTORYsymbol)
			ret= shutdownFactory(mb);
#if @1
		if( oldtimer)
			cntxt->timer= oldtimer;
#endif
		if( pcicaller && garbageControl(getInstrPtr(mb,0)) )
			garbageCollector(cntxt, mb, stk, TRUE);
#if @1
		@:endProfile@
#endif
		stkpc= mb->stop;
		continue;
	default:
		if( pci->token < 0 ){
			/* temporary NOOP instruction */
			break;
		}
		ret = createScriptException(mb, stkpc,MAL,
				NULL, "unkown operation");
#if @1
		@:endProfile@
#endif
		stkpc= mb->stop;
		continue;
	}
@-
After the expression has been evaluated we should check for a
possible change in the control flow. 
@= MALflowofcontrol
switch(pci->barrier){
	case BARRIERsymbol:
		@:barrierControl@ stkpc++;
		break;
	case LEAVEsymbol:
	case REDOsymbol:
		v= &stk->stk[getDestVar(pci)];
		/* skip to end of barrier, depending on the type */
		switch(v->vtype){
			case TYPE_bit:
				if( v->val.cval[0] == TRUE && v->val.cval[0] != bit_nil)
					stkpc= pci->jump; 
				else stkpc++;
				break;
			case TYPE_chr:
				if( v->val.cval[0] )
					stkpc= pci->jump; 
				else stkpc++;
				break;
			case TYPE_str:
				if( v->len > 0 && v->val.pval!= str_nil )
					stkpc= pci->jump; 
				else stkpc++;
				break;
			case TYPE_sht:
				if( v->val.shval >= 0 && v->val.shval!= sht_nil )
					stkpc= pci->jump; 
				else stkpc++;
				break;
			case TYPE_bat:
				if( v->val.bval > 0 )
					stkpc= pci->jump; 
				else stkpc++;
				break;
			case TYPE_int:
				if( v->val.ival >= 0 && v->val.ival!= int_nil )
					stkpc= pci->jump; 
				else stkpc++;
				break;
			case TYPE_wrd:
				if( v->val.wval >= 0 && v->val.wval!= wrd_nil )
					stkpc= pci->jump; 
				else stkpc++;
				break;
			case TYPE_bte:
				if( v->val.btval >= 0 && v->val.btval!= bte_nil )
					stkpc= pci->jump; 
				else stkpc++;
				break;
			case TYPE_lng:
				if( v->val.lval >= 0 && v->val.lval!= lng_nil)
					stkpc= pci->jump; 
				else 
			default:
					stkpc++;
		}
		break;
	case CATCHsymbol:
		/* catch blocks are skipped unless 
		   searched for explicitly*/
		if(exceptionVar < 0) { 
			stkpc= pci->jump; 
			break;
		}
		exceptionVar = -1;
		stkpc++; 
		break;
	case EXITsymbol:
		if( getDestVar(pci) == exceptionVar) 
			exceptionVar = -1; 
		stkpc++; 
		break;
	case RAISEsymbol:
		exceptionVar = getDestVar(pci);
		if (getVarType(mb, getDestVar(pci)) == TYPE_str) {
			ret = createScriptException(mb, stkpc, MAL, NULL,
				stk->stk[getDestVar(pci)].val.sval);
		} else
			ret = createScriptException(mb, stkpc, MAL, NULL,
					"Exception raised");
		@:skipToCatch(exceptionVar,@2)@
		break;
	case YIELDsymbol: /* to be defined */
		if( oldtimer)
			cntxt->timer= oldtimer;
		return yieldFactory( mb, pci, stkpc);
	case RETURNsymbol:
		/* Return from factory involves cleanup */

		if( getInstrPtr(mb,0)->token == FACTORYsymbol){
			yieldResult(mb,pci,stkpc);
			shutdownFactory(mb);
		} else
			/* a fake multi-assignment */
			if( env != NULL && pcicaller != NULL){
				InstrPtr pp=pci;
				@:endProfile@
				pci= pcicaller;
				for(i=0;i < pci->retc; i++){
					rhs = &stk->stk[pp->argv[i]];
					lhs = &env->stk[pci->argv[i]];
					VALcopy(lhs,rhs);
					if( lhs->vtype == TYPE_bat )
						BBPincref(lhs->val.bval, TRUE); 
				}
				if( garbageControl(getInstrPtr(mb,0)) )
					garbageCollector(cntxt, mb, stk, TRUE);
				/* reset the clock */
				if( oldtimer)
					cntxt->timer= oldtimer;
			} else { 
				@:endProfile@
			}
		stkpc= mb->stop;
		continue;
	default:
		stkpc++; 
}

@+ Assignment command
The assignment statement copies values around on the stack frame,
including multiple assignments.

Pushing constants/initial values onto the stack is a separate operation.
It takes the constant value discovered at compile time and stored in the
symbol table and moves it to the stackframe location. This activity
is made part of the start-up procedure.

The before after calls should be reconsidered here, because
their. They seem superflous and the way they are used will
cause errors in multi-assignment statements.
@-
@= assignStmt
{	
	@:safeTarget@
	for(k=0, i=pci->retc; k<pci->retc && i<pci->argc; i++,k++){
		lhs = &stk->stk[pci->argv[k]];
		rhs = &stk->stk[pci->argv[i]];
		VALcopy(lhs,rhs);
		if( lhs->vtype == TYPE_bat)
			BBPincref(lhs->val.bval, TRUE);
	}
	@:restoreTarget(@1)@
	ret = 0;
	@:exceptionHndlr(@1,@2)@
	@:timingHndlr(@1)@
}
@}
@-
@node MAL API, Exception Handling, The MAL Interpreter, The MAL Interpreter

@+ MAL API
The linkage between MAL interpreter and compiled C-routines
is kept as simple as possible.
Basically we distinguish four kinds of calling conventions:
CMDcall, FCNcall, FACcall, and  PATcall.
The FCNcall indicates calling a MAL procedure, which leads
to a recursive call to the interpreter. 

CMDcall initiates calling a linked function, passing pointers 
to the parameters and result variable, i.e.  f(ptr a0,..., ptr aN)
The function returns a MAL-SUCCEED upon success and a pointer
to an exception string upon failure.
Failure leads to raise-ing an exception in the interpreter loop,
by either looking up the relevant exception message in the module
administration or construction of a standard string.

The PATcall initiates a call which contains the MAL context,
i.e. f(MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
The mb provides access to the code definitions. It is primarilly
used by routines intended to manipulate the code base itself, such
as the optimizers. The Mal stack frame pointer provides access
to the values maintained. The arguments passed are offsets
into the stack frame rather than pointers to the actual value.

@{
BAT parameters require some care. Ideally, a BAT should not be kept
around long. This would mean that each time we access a BAT it has to be
pinned in memory and upon leaving the function, it is unpinned.
This degrades performance significantly. 
After the parameters are fixed, we can safely free the destination
variable and re-initialize it to nil.

The policy implemented here is to make pin/unpin decisions part of
the bind(namespace, batname, mode) operation. [todo]

@= safeTarget
#ifdef STACKTRACE
	printf("safeTarget %d\n", needsCleanup(pci));
	printInstruction(cntxt->fdout,mb,pci, LIST_MAL_ALL);
#endif
	if( needsCleanup(pci) ){ 
		assert(pci->retc <= mb->maxarg); 
		for(i=0; i<pci->retc; i++) {
			sbackup[i]= 0;  
			backup[i]= 0;  
			if( stk->stk[getArg(pci,i)].vtype == TYPE_bat) {
				backup[i]= stk->stk[getArg(pci,i)].val.bval;
				stamp= BBPcurstamp();
			} else if( stk->stk[getArg(pci,i)].vtype == TYPE_str) {
				backup[i]= stk->stk[getArg(pci,i)].len;
				sbackup[i]= stk->stk[getArg(pci,i)].val.sval;
				backup[i] += (sbackup[i]!=NULL);
			} 
		}
	} 
@= batpropcheck
{
	if (@1->H != @1->T) {
		BATpropcheck(BATmirror(@1), BATPROPS_QUICK);
	}
	BATpropcheck(@1, BATPROPS_QUICK);
}
@= restoreTarget
#ifdef STACKTRACE
	printf("restoreTarget %d\n", needsCleanup(pci));
#endif
	if( needsCleanup(pci) ){ 
		for(i=0; i<pci->retc; i++)
		if( stk->stk[getArg(pci,i)].vtype == TYPE_bat){
			bat bid = stk->stk[getArg(pci,i)].val.bval;
			/* update the bigfoot information */
			updateBigFoot(cntxt, bid, TRUE);
			if (backup[i]){
				if (backup[i] != bid) {
					/* possible garbage collect the variable */
					updateBigFoot(cntxt, backup[i], FALSE);
				}
				BBPdecref(backup[i], TRUE);
				backup[i]=0;
				sbackup[i]=0;
			} 
/*
This property setting facility leads to a performance
loss of a factor 4(?) on the micro benchmarks.
It does not belong here, but should be propagated 
to the operators.
			BAT *b;
			if ((b = BATdescriptor(bid)) != NULL) {
				BATsettrivprop(b);
				BBPunfix(bid);
			}
*/
		} else if( stk->stk[getArg(pci,i)].vtype == TYPE_str){
			int a= getArg(pci,i);
			if( sbackup[i] && sbackup[i]!= stk->stk[a].val.sval){
				if( backup[i] > 0) 
					GDKfree(sbackup[i]);
				backup[i]=0;
				sbackup[i]=0;
			} 
		} 
	}
	/* Provide debugging support */
#if @1
	if( GDKdebug & 10 && exceptionVar >= 0) {
		BAT *b;
		str oldmsg =0;

		for( i=0; i< pci->retc; i++)
		if( stk->stk[getArg(pci,i)].vtype == TYPE_bat &&
				stk->stk[getArg(pci,i)].val.bval ){
			b= BATdescriptor(stk->stk[getArg(pci,i)].val.bval);
			if( b == NULL)
				continue;
			if( cntxt->errbuf && cntxt->errbuf[0]){
				oldmsg= GDKstrdup(cntxt->errbuf);
				*cntxt->errbuf= 0;
			}
			if( b->batStamp <= stamp){
				if( GDKdebug & 8)
					@:batpropcheck(b)@
			} else
				if( GDKdebug & 2)
					@:batpropcheck(b)@
			BBPunfix(b->batCacheid);
			if( cntxt->errbuf && cntxt->errbuf[0]) {
				if( oldmsg){
					strcpy(cntxt->errbuf,oldmsg);
					GDKfree(oldmsg);
				}
				throw(MAL, "mal.propertyCheck", "Errors found");
			}
			if( oldmsg){
				*cntxt->errbuf = *oldmsg;
				GDKfree(oldmsg);
			}
		}
	}
#endif
@-
@= commandcall
{	
	@:safeTarget
	/* improve performance with 20 ms/1M calls*/
	switch(pci->argc){
	case 0 : ret = (str) (*pci->fcn)(); break;
	case 1 : ret = (str) (*pci->fcn)(
			(ptr) getArgReference(stk,pci,0)); break;
	case 2 : ret = (str) (*pci->fcn)(
			(ptr) getArgReference(stk,pci,0),
			(ptr) getArgReference(stk,pci,1)); 
			 break;
	case 3 : ret = (str) (*pci->fcn)(
			(ptr) getArgReference(stk,pci,0),
			(ptr) getArgReference(stk,pci,1),
			(ptr) getArgReference(stk,pci,2)); 
			 break;
	case 4 : ret = (str) (*pci->fcn)(
			(ptr) getArgReference(stk,pci,0),
			(ptr) getArgReference(stk,pci,1),
			(ptr) getArgReference(stk,pci,2),
			(ptr) getArgReference(stk,pci,3)); 
			 break;
	case 5 : ret = (str) (*pci->fcn)(
			(ptr) getArgReference(stk,pci,0),
			(ptr) getArgReference(stk,pci,1),
			(ptr) getArgReference(stk,pci,2),
			(ptr) getArgReference(stk,pci,3), 
			(ptr) getArgReference(stk,pci,4)); 
			 break;
	case 6 : ret = (str) (*pci->fcn)(
			(ptr) getArgReference(stk,pci,0),
			(ptr) getArgReference(stk,pci,1),
			(ptr) getArgReference(stk,pci,2),
			(ptr) getArgReference(stk,pci,3),
			(ptr) getArgReference(stk,pci,4),
			(ptr) getArgReference(stk,pci,5)); 
			 break;
	case 7 : ret = (str) (*pci->fcn)(
			(ptr) getArgReference(stk,pci,0),
			(ptr) getArgReference(stk,pci,1),
			(ptr) getArgReference(stk,pci,2),
			(ptr) getArgReference(stk,pci,3),
			(ptr) getArgReference(stk,pci,4),
			(ptr) getArgReference(stk,pci,5),
			(ptr) getArgReference(stk,pci,6)); 
			 break;
	case 8 : ret = (str) (*pci->fcn)(
			(ptr) getArgReference(stk,pci,0),
			(ptr) getArgReference(stk,pci,1),
			(ptr) getArgReference(stk,pci,2),
			(ptr) getArgReference(stk,pci,3),
			(ptr) getArgReference(stk,pci,4),
			(ptr) getArgReference(stk,pci,5),
			(ptr) getArgReference(stk,pci,6),
			(ptr) getArgReference(stk,pci,7)); 
			 break;
	case 9 : ret = (str) (*pci->fcn)(
			(ptr) getArgReference(stk,pci,0),
			(ptr) getArgReference(stk,pci,1),
			(ptr) getArgReference(stk,pci,2),
			(ptr) getArgReference(stk,pci,3),
			(ptr) getArgReference(stk,pci,4),
			(ptr) getArgReference(stk,pci,5),
			(ptr) getArgReference(stk,pci,6),
			(ptr) getArgReference(stk,pci,7),
			(ptr) getArgReference(stk,pci,8)); 
			 break;
	case 10 : ret = (str) (*pci->fcn)(
			(ptr) getArgReference(stk,pci,0),
			(ptr) getArgReference(stk,pci,1),
			(ptr) getArgReference(stk,pci,2),
			(ptr) getArgReference(stk,pci,3),
			(ptr) getArgReference(stk,pci,4),
			(ptr) getArgReference(stk,pci,5),
			(ptr) getArgReference(stk,pci,6),
			(ptr) getArgReference(stk,pci,7),
			(ptr) getArgReference(stk,pci,8), 
			(ptr) getArgReference(stk,pci,9)); 
			 break;
	case 11 : ret = (str) (*pci->fcn)(
			(ptr) getArgReference(stk,pci,0),
			(ptr) getArgReference(stk,pci,1),
			(ptr) getArgReference(stk,pci,2),
			(ptr) getArgReference(stk,pci,3),
			(ptr) getArgReference(stk,pci,4),
			(ptr) getArgReference(stk,pci,5),
			(ptr) getArgReference(stk,pci,6),
			(ptr) getArgReference(stk,pci,7),
			(ptr) getArgReference(stk,pci,8), 
			(ptr) getArgReference(stk,pci,9), 
			(ptr) getArgReference(stk,pci,10)); 
			 break;
	case 12 : ret = (str) (*pci->fcn)(
			(ptr) getArgReference(stk,pci,0),
			(ptr) getArgReference(stk,pci,1),
			(ptr) getArgReference(stk,pci,2),
			(ptr) getArgReference(stk,pci,3),
			(ptr) getArgReference(stk,pci,4),
			(ptr) getArgReference(stk,pci,5),
			(ptr) getArgReference(stk,pci,6),
			(ptr) getArgReference(stk,pci,7),
			(ptr) getArgReference(stk,pci,8), 
			(ptr) getArgReference(stk,pci,9), 
			(ptr) getArgReference(stk,pci,10), 
			(ptr) getArgReference(stk,pci,11)); 
			 break;
	default:
		ret = createScriptException(mb, stkpc, MAL, NULL,
				"too many arguments for command call");
	}
	@:restoreTarget(@1)@
	@:exceptionHndlr(@1,@2)@
	@:timingHndlr(@1,@2)@
}
@-
@= patterncall
	if( pci->fcn== NULL)
		ret = createScriptException(mb, stkpc, MAL, NULL,
				"address of pattern missing");
	else {
		@:safeTarget@
		ret = (str) (*pci->fcn)(cntxt,mb,stk,pci);
		@:restoreTarget(@1,@2)@
		@:exceptionHndlr(@1,@2)@
		@:timingHndlr(@1,@2)@
	}
@-
MAL function calls are relatively expensive, because they have to assemble
a new stack frame and do housekeeping, such as garbagecollection of all
non-returned values.

@-
@= functioncall
{	
	stk->pcup = stkpc;
	@:safeTarget@
	ret= runMAL(cntxt,pci->blk,1,mb,stk,pci);
	@:restoreTarget(@1)@
	@:exceptionHndlr(@1,@2)@
	@:timingHndlr(@1)@
}
@-
Factory calls are more involved. At this stage it is a synchrononous
call to the factory manager.
Factory calls should deal with the reference counting.
@= factorycall
	if( pci->blk== NULL)
		ret = createScriptException(mb, stkpc, MAL, NULL,
				"reference to MAL function missing");
	else
		ret= runFactory(cntxt,pci->blk,mb,stk,pci);
	@:exceptionHndlr(@1,@2)@
	@:timingHndlr(SLOW)@
@-
The type dispatching table in getArgValue can be removed if we 
determine at compile time the address offset within a ValRecord. 
We leave this optimization for the future, it leads to about 10%
improvement (100ms for 1M calls).

@+ Flow of control statements
Each assignment (function call) may be part of the initialization
of a barrier- block. In that case we have to test the
outcome of the operation and possibly skip the block altogether.
The latter is implemented as a linear scan for the corresponding
labeled statemtent. This might be optimized later.

@= barrierControl
{   v= &stk->stk[getDestVar(pci)];
	/* skip to end of barrier, depends on the type */
	switch(v->vtype){
		case TYPE_bit:
			if( v->val.cval[0] == FALSE || v->val.cval[0] == bit_nil)
				stkpc= pci->jump;
			break;
		case TYPE_chr:
			if( v->val.cval[0] == chr_nil )
				stkpc= pci->jump;
			break;
		case TYPE_oid:
			if( v->val.oval == oid_nil )
				stkpc= pci->jump;
			break;
		case TYPE_sht:
			if( v->val.shval < 0 || v->val.shval == sht_nil)
				stkpc= pci->jump; 
			break;
		case TYPE_int:
			if( v->val.ival < 0 || v->val.ival == int_nil)
				stkpc= pci->jump; 
			break;
		case TYPE_lng:
			if( v->val.lval < 0 || v->val.lval == lng_nil)
				stkpc= pci->jump; 
			break;
		case TYPE_flt:
		case TYPE_dbl:
			if( v->val.dval < 0 || v->val.dval == dbl_nil)
				stkpc= pci->jump; 
			break;
		case TYPE_str:
			if( v->len == 0 || v->val.pval == str_nil)
				stkpc= pci->jump; 
			break;
		default:
			ret = createScriptException(mb, stkpc, MAL, NULL,
					"%s: Unknown barrier type",
					getVarName(mb, getDestVar(pci)));
	}
}

@-
You can skip to a catch block by searching for the corresponding 'lab'
The return value should be set to pass the error automatically upon
reaching end of function block.
@-
@= skipToCatch
	if( stk->cmd == 'C') {
		stk->cmd = 'n';
		mdbStep(cntxt,mb,stk,stkpc);
		if( stk->cmd == 'x') {
			stkpc = mb->stop;
			@2;
		}
	}
	/* skip to catch block or end */
	for( ; stkpc<mb->stop; stkpc++){
		InstrPtr l= getInstrPtr(mb,stkpc);
		if( l->barrier == CATCHsymbol ){
			int j= -1;
			for(j=0;j<l->retc; j++)
				if( getArg(l,j) == @1) break;
			if(j>=0) break;
		}
	}
	if( stkpc== mb->stop) {
		@:endProfile@ 
			@2;
	}
@-
Each time we enter a barrier block, we could keep its position in the
interpreter stack frame. It forms the starting point to issue a redo.
Unfortunately, this does not easily work in the presence of optimizers, which
may change the order/block structure. Therefore, we simple have to search
the beginning or ensure that during chkProgram the barrier/redo/leave/catch
jumps are re-established.

@}
@-
@node Exception Handling, Garbage Collection, MAL API, The MAL Interpreter
@+ Exception handling
Calling a built-in or user-defined routine may lead to an error or a
cached status message to be dealt with in MAL.
To improve error handling in MAL, an exception handling
scheme based on @sc{catch}-@sc{exit} blocks. The @sc{catch}
statement identifies a (string-valued) variable, which carries the 
exception message from
the originally failed routine or @sc{raise} exception assignment.
During normal processing @sc{catch}-@sc{exit} blocks are simply skipped.
Upon receiving an exception status from a function call, we set the 
exception variable and skip to the first associated @sc{catch}-@sc{exit} 
block.
MAL interpretation then continues until it reaches the end of the block.
If no exception variable was defined, we should abandon the function
alltogether searching for a catch block at a higher layer.

@{
For the time being we have ignored cascaded/stacked exceptions.
The policy is to pass the first recognized exception to a context
in which it can be handled.

@}
@-
Exceptions raised within a linked-in function requires some care.
First, the called procedure does not know anything about the MAL
interpreter context. Thus, we need to return all relevant information
upon leaving the linked library routine.

Second, exceptional cases can be handled deeply in the recursion, where they
may also be handled, i.e. by issueing an GDKerror message. The upper layers
merely receive a negative integer value to indicate occurrence of an
error somewhere in the calling sequence.
We then have to also look into GDKerrbuf to see if there was
an error raised deeply inside the system.

The policy is to require all C-functions to return a string-pointer. 
Upon a successfull call, it is a NULL string. Otherwise it contains an
encoding of the exceptional state encountered. This message
starts with the exception identifer, followed by contextual details.
@{

@= exceptionHndlr
if( ret != MAL_SUCCEED ) {
	str msg = 0, nxt;
	if( stk->cmd  ) {
		stream_printf(cntxt->fdout,"!ERROR: %s\n",ret);
		stk->cmd= '\n';	/* in debugging go to step mode */
		mdbStep(cntxt,mb,stk,stkpc);
		if( stk->cmd == 'x' || stk->cmd == 'q' ) {
			stkpc= mb->stop;
			@2;
		}
		if( stk->cmd == 'r') {
			stk->cmd = 'n';
			stkpc = startpc;
			exceptionVar = -1;
			@2;
		}
	}
	/* Detect any exception received from the implementation. */
	/* The first identifier is an optional exception name */
	msg = strchr(ret,':');
	if(msg) {
		*msg= 0;
		exceptionVar = findVariableLength(mb,ret,(int)(msg-ret));
		*msg=':';
	} else {
		if( ret == MAL_SUCCEED && cntxt->errbuf){
			/* trap hidden (GDK) exception */
			msg= GDKstrdup(cntxt->errbuf);
			exceptionVar= findVariable(mb,"GDKerror");
		} else {
			exceptionVar = getDestVar(pci);
		}
	}
	/* unknown exceptions lead to propagation */
	if( exceptionVar == -1){
		@:endProfile@
		stkpc= mb->stop;
		@2;
	}
	msg++;
	/* assure correct variable type */
	nxt= (str) setDynamicType(mb,getVar(mb,exceptionVar),TYPE_str,stkpc);
	if( nxt == 0){
		v=  &stk->stk[exceptionVar];
		if( getVarType(mb,exceptionVar) == TYPE_any)
			setVarType(mb, exceptionVar, TYPE_str);
		v->vtype = TYPE_str;
		v->val.pval= ret;
		v->len= (int)strlen(v->val.pval);
		ret = 0;
	} else GDKfree(nxt);
	/* position yourself at the catch instruction for further decisions */
	@:skipToCatch(exceptionVar,@2)@
	pci= getInstrPtr(mb,stkpc);
}
@-
During instruction interpretation we may have to be
assured that the type associated with a destination variable
is in line with the result of an operation or exceoption.
@c
str setDynamicType(MalBlkPtr mb, VarPtr v, int tpe, int pc){
	if( v->type ==tpe) return 0;
	if( v->type == TYPE_any) return 0;
	return createScriptException(mb, pc, TYPE, NULL,
			"variable '%s' has already type %s (!=%s)",
			v->name, getTypeName(v->type), getTypeName(tpe));
}

@-
@+ Result Recycler
An optimization scheme for query sequences is to re-use variables
as much as possible.
The recycler works for any variable and relies on policy functions
registered.
@= MALrecycleStart
	if( !RECYCLEentry(cntxt, mb,stk,pci) || mb->version== 0 )
@= MALrecycleExit
	if( pci->recycle )
		RECYCLEexit(cntxt, mb,stk,pci);
@}
@-
@node Garbage Collection, Stack Management, Exception Handling, The MAL Interpreter
@+ Garbage collection
Garbage collection is relatively straightforward, because most values are
retained on the stackframe of an interpreter call. However, two storage
types and possibly user-defined type garbage collector definitions
require attention: BATs and strings.

A key issue is to deal with temporary BATs in an efficient way.
References to bats in the buffer pool may cause dangling references
at the language level. This appears as soons as your share
a reference and delete the BAT from one angle. If not carefull, the
dangling pointer may subsequently be associated with another BAT

All string values are private to the VALrecord, which means they
have to be freed explicitly before a MAL function returns. 
The first step is to always safe the destination variable
before a function call is made.
@{
@-
@c
void garbageElement(ValPtr v)
{   
	if( v->vtype == TYPE_str) {
		if(v->val.pval) {
			GDKfree(v->val.pval);
			v->val.pval = NULL;
		}
		v->len = 0;
		return;
	}
	if( v->vtype== TYPE_bat ) {
@}
@-
All operations are responsible to properly set the
reference count of the BATs being produced or destroyed.
The libraries should not leave the
physical reference count being set. This is only
allowed during the execution of a GDK operation.
All references should be logical.
@-
@{
@c
		int bid = ABS(v->val.bval);
		/* printf("garbage collecting: %d lrefs=%d refs=%d\n",
		   bid, BBP_lrefs(bid),BBP_refs(bid));*/
		v->val.bval = 0;
		if (bid == 0 || !BBP_lrefs(bid)) 
			return;
		BBPdecref(bid,TRUE);
	}
}
@-
@}

Before we return from the interpreter, we should free all
dynamically allocated objects and adjust the BAT reference counts.
Early experience shows that for small stack frames the overhead
is about 200 ms for a 1M function call loop (tst400e). This means that
for the time being we do not introduce more complex garbage
administration code.

Also note that for top-level stack frames (no environment available),
we should retain the value stack because it acts as a global variables. 
This situation is indicated by the 'global' in the stack frame. 
@{
Upon termination of the session, the stack should be cleared.
Beware that variables may be know polymorphic, their actual
type should be saved for variables that recide on a global
stack frame.
@c
void garbageCollector(Client cntxt, MalBlkPtr mb, MalStkPtr stk, int flag)
{   
	int k;
	ValPtr v;

#ifdef STACKTRACE
	stream_printf(cntxt->fdout,"#--->stack before garbage collector\n");
	printStack(cntxt->fdout,mb,stk,0);
#endif
	for(k=0;k<mb->vtop; k++) {
		if(isVarCleanup(mb,k) && (flag || isTmpVar(mb,k) )){
			garbageElement(v= &stk->stk[k]);
			v->vtype= TYPE_int;
			v->val.ival= int_nil;
		}
	}
#ifdef STACKTRACE
	stream_printf(cntxt->fdout,"#-->stack after garbage collector\n");
	printStack(cntxt->fdout,mb,stk,0);
#else
	(void) cntxt;
#endif
}
@-
Sometimes it helps to release a BAT when it won;t be used anymore.
In this case, we have to assure that all references are cleared
as well. The routine below performs this action in the local
stack frame and its parents only.
@c
void releaseBAT(MalBlkPtr mb, MalStkPtr stk, int bid)
{   int k;

   	do {
		for(k=0;k<mb->vtop; k++) 
			if( stk->stk[k].vtype== TYPE_bat && abs(stk->stk[k].val.bval)==bid) {
				BBPdecref(bid,TRUE);
				stk->stk[k].val.ival= 0;
			}
		if(stk->up){
			stk= stk->up;
			mb= stk->blk;
		} else 
			break;
	} while(stk);
}

@-
@+ Performance section
The interpreter has a built-in performance monitor hook, which is
activated using the compile option MALprofiler. Activation can lead to
a significant performance degradation, because for all traced functions
we have to keep track of essential system counter information.
See @ref{The MAL Profiler} for more details.

Running the program under dataflow control will screw up the
order in which performance trace data is displayed. Moreover,
we do not clearly see the start and end of the dataflow execution,
because the performance data is the result of the 'failed' runMALdataflow().
It simply skips the barrier block upon return.

@= performanceVariables
#ifdef MALprofiler
	lng newclk=0;
	int ppc= -1;
	if (malProfileMode)
		setFilterOnBlock(mb, 0, 0);
#endif
@= beginProfile
#ifdef MALprofiler
	if( mb->profiler != NULL && stk ){
		stk->clk= GDKusec();
		if( mb->profiler[stkpc].trace)
		{
			ppc= stkpc;
			mb->profiler[ppc].clk= stk->clk;
			time(&stk->clock);
			mb->profiler[ppc].clock= stk->clock;
#ifdef HAVE_TIMES
			times(&stk->timer);
			mb->profiler[ppc].timer= stk->timer;
#endif
		}
	}
#endif
@= endProfile
#ifdef MALprofiler
	if( malProfileMode == 0)
		/* mostly true */;
	else
	if(ppc!= -1 && mb->profiler != NULL && mb->profiler[ppc].trace && stk)
	{
		newclk= GDKusec();
		mb->profiler[ppc].counter++;
		mb->profiler[ppc].ticks = newclk - stk->clk;
		mb->profiler[ppc].clk += mb->profiler[ppc].clk;
		if( pci){
			mb->profiler[ppc].ibytes= getVolume(stk,pci,0);
			mb->profiler[ppc].obytes= getVolume(stk,pci,1);
		}
		profilerEvent(cntxt->nspace,mb,stk,ppc);
		ppc= -1;
	}
#endif

@= timingHndlr
#if @1
if( cntxt->flags && stk->cmd != 't' && stk->cmd != 'C'){
	if (lock)
		MT_set_lock(*lock, "timing");
	if( cntxt->flags & timerFlag)
		stream_printf(cntxt->fdout,"[%6d usec \@%d ",GDKusec()-cntxt->timer,tid);
#ifdef HAVE_SYS_RESOURCE_H
	if( cntxt-> flags & ioFlag){
		struct  rusage resource;
		getrusage(RUSAGE_SELF, &resource);
		stream_printf(cntxt->fdout," %3d R",
			resource.ru_inblock- oldinblock);
		stream_printf(cntxt->fdout," %3d W ",
			resource.ru_oublock- oldoublock);
	}
#endif
	if( cntxt->flags & memoryFlag){
		struct Mallinfo memory;
		memory= MT_mallinfo();
		if( memory.arena- oldMemory.arena > 0)
			stream_printf(cntxt->fdout," " SZFMT " bytes ",
				(size_t) (memory.arena-oldMemory.arena) );
	}
	if( cntxt->flags & flowFlag){
		/* calculate the read/write byte flow */
		showVolume(cntxt,stk,pci,0);
		stream_printf(cntxt->fdout,"/");
		showVolume(cntxt,stk,pci,1);
		stream_printf(cntxt->fdout," ");
		/* showVolume(cntxt,stk,pci,2);*/
	}
	if( cntxt->flags & bigfootFlag){
		displayVolume(cntxt,cntxt->vmfoot);
		stream_printf(cntxt->fdout,":");
		displayVolume(cntxt,cntxt->bigfoot);
		stream_printf(cntxt->fdout," ");
	}
	if (cntxt->flags & cntFlag)
		stream_printf(cntxt->fdout,":%6d ", cntxt->cnt);
	{str line;
	line= call2str(mb,stk,stkpc,cntxt->flags);
	stream_printf(cntxt->fdout, " %s ]\n", line);
	GDKfree(line);
	}
	if( cntxt->flags & timerFlag)
		cntxt->timer = GDKusec();
	if (lock)
		MT_unset_lock(*lock, "timing");
}
#endif
@-
For performance evaluation it is handy to know the 
maximal amount of bytes read/written. The actual
amount is harder to guess, because it too much
depends on the operation.
@c
lng getVolume(MalStkPtr stk, InstrPtr pci, int rd)
{
	int i, limit;
	lng vol=0;
	BAT *b;
	int isview = 0;

	limit = rd == 0?pci->retc:pci->argc;
	i = rd?pci->retc:0;
	
	if( stk->stk[getArg(pci,0)].vtype == TYPE_bat){
		b = BATdescriptor(stk->stk[getArg(pci,0)].val.bval);
		if (b) {
			isview = isVIEW(b);
			BBPunfix(b->batCacheid);
		}
	}
	for(; i<limit; i++) {
		if (stk->stk[getArg(pci,i)].vtype == TYPE_bat){
			size_t cnt = 0;
			b = BATdescriptor(stk->stk[getArg(pci,i)].val.bval);
			if (b==NULL) 
				continue;
			cnt = BATcount(b);
			/* Usually reading views cost as much as full bats. 
			   But when we output a slice that is not the case. */
			vol += ((rd && !isview) || !VIEWhparent(b))?headsize(b,cnt):0;
			vol += ((rd && !isview) || !VIEWtparent(b))?tailsize(b,cnt):0;
			BBPunfix(b->batCacheid);
		}
	}
	return vol;
}

void displayVolume(Client cntxt, lng vol){
	if( vol <1024)
		stream_printf(cntxt->fdout,LLFMT,vol);
	else
	if( vol <1024*1024)
		stream_printf(cntxt->fdout,LLFMT "K",vol/1024);
	else
	if( vol <1024* 1024*1024)
		stream_printf(cntxt->fdout, LLFMT "M",vol/1024/1024);
	else
		stream_printf(cntxt->fdout, LLFMT "G",vol/1024/1024/1024);
}
void showVolume(Client cntxt, MalStkPtr stk, InstrPtr pci, int rd){
	displayVolume(cntxt, getVolume(stk,pci,rd));
}
@h
#endif /*  _MAL_INTERPRET_H*/
@}
