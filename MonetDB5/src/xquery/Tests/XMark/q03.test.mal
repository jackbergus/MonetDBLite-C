# Query Q3:
# Return the IDs of all open auctions whose current increase is at
# least twice as high as the initial increase.

# FOR    $b IN document("auction.xml")/site/open_auctions/open_auction
# WHERE  $b/bidder[1]/increase/text() *2 <= $b/bidder[last()]/increase/text()
# RETURN <increase first=$b/bidder[1]/increase/text()
#                  last=$b/bidder[last()]/increase/text()/>

# This is a more complex application of index lookups.  In the case of
# a relational DBMS, the query can take advantage of set-valued
# aggregates on the index attribute to accelerate the execution.

#var monet_guide := bat("mxml_guide");
#var b1 := bat(find(monet_guide,"site/open_auctions/open_auction.bidder"));

#var b2 := bat(find(monet_guide,"site/open_auctions/open_auction/bidder/increase"));

#var b3 := bat(find(monet_guide,"site/open_auctions/open_auction/bidder/increase.cdata"));

#var b4 := bat(find(monet_guide,"site/open_auctions/open_auction/bidder/increase.cdata.string@"));
#var b6 := {min}(b1);
#var b7 := {max}(b1);
#var b8 := join(b6,b2);
#var b9 := join(b8,b3);
#var b10 := join(b9,b4);
#var b11 := join(b7,b2);
#var b13 := join(b12,b4);
#var b14 := [flt](b10);
#var b15 := [flt](b13);
#var b16 := [*](b14,2);
#var b17 := [<=](b16,b15);
#var b18 := uselect(b17,true).mirror();
#var b20 := join(b18,b10).sort();
#var b12 := join(b11,b3);
#var b21 := join(b18,b13);
#var b22 := leftjoin(reverse(b20),b21);
#b22@batloop() {
#printf("<increase first=\"%s\" last=\"%s\"/>\n", $h, $t);
#}

# FOR    $b IN document("auction.xml")/site/open_auctions/open_auction
mr:= mguide.open("auctions.xml");
b1 := mguide.bind(mg,"site/open_auctions/open_auction");

# WHERE  $b/bidder[1]
b2 := mguide.bind(mg,"site/open_auctions/open_auction/bidder");
f0 := group.first(b2); # to be implemented
f1 := algebra.semijoin(b1,f0);

# WHERE  $b/bidder[1]/increase/text()
b3 := mguide.bind(mg,"site/open_auctions/open_auction/bidder/increase");
f2 := bat.join(f1,b3);
b4 := mguide.bind(mg,"site/open_auctions/open_auction/bidder/increase/cdata");
f3 := bat.join(f2,b4);
b5 := mguide.bind(mg,"site/open_auctions/open_auction/bidder/increase/cdata/double@");
f4 := bat.join(f3,b5);

# WHERE  $b/bidder[1]/increase/text() * 2
f5 := batcalc.*(f4,2.0);

# $b/bidder[last()]
b6 := mguide.bind(mg,"site/open_auctions/open_auction/bidder");
f6 := group.last(b6); # to be implemented
f7 := algebra.semijoin(b1,f6);

# $b/bidder[last()]/increase/text()
b7 := mguide.bind(mg,"site/open_auctions/open_auction/bidder/increase");
f8 := bat.join(f7,b7);
b8 := mguide.bind(mg,"site/open_auctions/open_auction/bidder/increase/cdata");
f9 := bat.join(f8,b8);
b9 := mguide.bind(mg,"site/open_auctions/open_auction/bidder/increase/cdata/double@");
f10 := bat.join(f9,b9);

# WHERE  $b/bidder[1]/increase/text() *2 <= $b/bidder[last()]/increase/text()
r0 := bat.thetajoin(f5,f10, "<=" );

# sort
r1 := algebra.sort(r0);

mr := mguide.new("result");
e0 := mguide.addElement(mr, "increase", r1);
e1 := mguide.addAttribute(mr, e0, "first@", f4);
e2 := mguide.addAttribute(mr, e0. "last@", f10);
mguide.serialize(mr);
