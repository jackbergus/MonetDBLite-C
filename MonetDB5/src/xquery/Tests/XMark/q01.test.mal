# Query Q1:
# Return the name of the item with ID `item20748' registered in North
# America

# FOR    $b IN document("auction.xml")/site/people/person[@id="person0"]
# RETURN $b/name/text()

# This simple query is mainly used to establish a simple performance
# primitive unit to help establish a `metric' to interpret subsequent
# queries.  It tests the database ability to handle simple string
# lookups with a fully specified path

# A real compiler would have access to the data guide as an
# ordinary catalog. This means that the mapping of the paths
# to the BATs is known upfront.

#monet_guide := bat("mxml_guide");
#var b1 := bat(find(monet_guide,"site.people.person.id@"));
#var b2 := select(b1,"person0");
#var b3 := reverse(b2);
#var b4 := join (b3, bat(find(monet_guide,"site.people.person.name")));
#var b5 := join (b4, bat(find(monet_guide,"site.people.person.name.cdata")));
#var b6 := join (b5, bat(find(monet_guide,"site.people.person.name.cdata.string@")));
#b6@batloop() {
#printf("%s\n",$t);
#}

# why the extra redirection through cdata. It seems we can use string@ directly
# if necessary it will materialize the concatenated the values of its elements.

#$b IN document("auction.xml")
mg := mguide.open("auction.xml");

#/site/people/person and obtain single context [person,self::person]
b0:bat[:oid,:oid] := mguide.bind(mg,"/site/people/person/");
b = bat.mirror(b0);

b1:bat[:oid,:oid] := mguide.bind(mg,"/site/people/person/id");
#[site/people/person/id = "person0"] ->[id,text()]
b2:bat[:oid,:str] := mguide.bind(mg,"/site/people/person/id/text()");
# why this one, because .../id/{int,double,..}() does not exist and = <str> is the goal 
b3:= algebra.uselect(b2,"person0");
# propagate the restriction back to the context persons [person,id] step
b4:= algebra.semijoin(b1,b3);
# this can be optimized away, because it sufficies to do a mirror on b2
# to produce the self-reference bat [person, self::person]
b:= algebra.semijoin(b,b4);

# alternative, combined back propagation from b2 to [person,self::person]
#b3 := mguide.ancestor(b0,b2);

#RETURN $b/name/text()
mr:= mguide.new("result");
# propagate the context restriction to the child
x2:bat[:oid,:oid] := mguide.bind(mg,"/site/people/person/name");
r0 := algebra.join(b,x2);

# construct a new document
dn := oid.new();
r1 := bat.setHead(r0,dn);

# add this as the root(s) of the new
mguide.add(mr,"/",r1);

# don't do anything with the strings expect mentioning it as a target
# visible in the result guide.
x3:bat[:oid,:str] := mguide.bind(mg,"/site/people/person/name/text()");
mguide.add(mr,"/text()", x3);
# beware that the new document itself is inconsistent, because there
# are children without parents in mr.

mguide.serialize(mr);

# The result guide contains the following information
# doc("result")/string()	ordered?