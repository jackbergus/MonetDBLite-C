# Query Q5:
# How many sold items cost more than 40?

# COUNT  (FOR    $i IN document("auction.xml")/site/closed_auctions/closed_auction
#        WHERE  $i/price/text() >= 40
#        RETURN $i/price)

# Strings are the generic data type in XML documents.  Queries that
# interpret strings will often need to cast strings to another data
# type that carries more semantics.  This query challenges the DBMS in
# terms of the casting primitives it provides.  Especially, if there
# is no additional schema information or just a DTD at hand, casts are
# likely to occur frequently.

#var monet_guide := bat("mxml_guide");
#var b0 := bat(find(monet_guide,"site/closed_auctions/closed_auction"));
#var b1 := bat(find(monet_guide,"site/closed_auctions/closed_auction/price"));
#var b2 := bat(find(monet_guide,"site/closed_auctions/closed_auction/price/#cdata"));
#var b3 := bat(find(monet_guide,"site/closed_auctions/closed_auction/price/#cdata/#string@"));
#var b4 := [int](b3);
#var b5 := select(b4,40,int(nil));
#print(count(b5));
#

# FOR $i in doc("auction.xml")
mg:= mguide.open("auctions.xml");

b0:bat[:oid,:str]:= mguide.bind(mg,"/site/closed_auctions/closed_auction/price/@cdata/string@");
b1:= batcalc.int(b0);
b2:= algebra.select(b1,40,nil:int);

# create the $i context closed_auction
b3:bat[:oid,:oid] := mguide.ancestor(mg, b2,
		"/site/closed_auctions/closed_auction/price/@cdata/string@",
		"/site/closed_auctions/closed_auction/price");
i:= bat.mirror(b3);

# we could have stepped back to the price
rg := mguide.new("result");
b4:bat[:oid,:oid] := mguide.descendant(mg,i,
	"/site/closed_auctions/closed_auction",
	"/site/closed_auctions/closed_auction/price");

mguide.add(mr,"/",$i);
mguide.add(mr,"/price",b4);

# and now we have to process the count over this result
b5:bat[:oid,:oid]:= mguide.bind(mr,"/");
i := bat.count(b5);

m2:= mguide.new("result2");
# add a single integer child 
mguide.add(m2,"/",i);

mguide.serialize(m2);

