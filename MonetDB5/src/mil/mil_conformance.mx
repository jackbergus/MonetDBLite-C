@t Conformance
@a M Kersten
@+ Conversion Pitfalls
@{
Since there may be conflicts with user defined identifiers,
we produce a warning listing at the end of each program with
the identifier mappings used.

We also have to avoid module identifiers to be used
as variables. It could produce problems when
compiling, e.g. bbp.setRole(ll)

An extensive set of identifiers is mapped to
their module as well.

Note that not all identifiers can be mapped automatically.
In particuler the following list indicates those requireing
interventions of the users.

Version 4.3		Version 5.		Comments

			bbpBATrefcnt(bat)
and( bit,bit)		\&\&(bit,bit)	
or(bit,bit)		||(bit,bit)	
not(bit)		!(bit)
=(x,y)			==(x,y)
@* Implementation
@c
#include "gdk.h"
struct {
	str v4name;
	str v5mod;
	str v5fcn;
	int used;
} idmap[] = {
	{
	"bat", "bbp", "new", 0}, {
	"bbpname", "bbp", "getName", 0}, {
	"new", "bbp", "new", 0}, {
	"rename", "bbp", "setName", 0}, {
	"cold", "bbp", "setCold", 0}, {
	"hot", "bbp", "setHot", 0}, {
	"info", "bbp", "getInfo", 0}, {
	"save", "bbp", "save", 0}, {
	"view_bbp_name", "bbp", "getNames()", 0}, {
	"view_bbp_refcnt", "bbp", "getRefCount", 0}, {
	"view_bbp_lrefcnt", "bbp", "getLRefCount", 0}, {
	"view_bbp_htype", "bbp", "getHeadType", 0}, {
	"view_bbp_ttype", "bbp", "getTailType", 0}, {
	"view_bbp_count", "bbp", "getCount", 0}, {
	"view_bbp_location", "bbp", "getLocation", 0}, {
	"view_bbp_heat", "bbp", "getHeat", 0}, {
	"view_bbp_dirty", "bbp", "getDirty", 0}, {
	"view_bbp_status", "bbp", "getStatus", 0}, {
	"view_bbp_kind", "bbp", "getKind", 0}, {
	"oid", "calc", "oid", 0}, {
	"int", "calc", "int", 0}, {
	"lng", "calc", "lng", 0}, {
	"flt", "calc", "flt", 0}, {
	"dbl", "calc", "dbl", 0}, {
	"str", "calc", "str", 0}, {
	"chr", "calc", "chr", 0}, {
	"bit", "calc", "bit", 0}, {
	"+", "calc", "+", 0}, {
	"-", "calc", "-", 0}, {
	"*", "calc", "*", 0}, {
	"/", "calc", "/", 0}, {
	"=", "calc", "==", 0}, {
	"<", "calc", "<", 0}, {
	"<=", "calc", "<=", 0}, {
	">", "calc", ">", 0}, {
	">=", "calc", ">=", 0}, {
	"!=", "calc", "!=", 0}, {
	"mod", "calc", "mod", 0}, {
	"and", "calc", "and", 0}, {
	"or", "calc", "or", 0}, {
	"not", "calc", "not", 0}, {
	"print", "io", "print", 0}, {
	"printf", "io", "printf", 0}, {
	"load", "ascio", "load", 0}, {
	"access", "mil", "access", 0}, {
	"append", "bat", "append", 0}, {
	"batsize", "bat", "getBatSize", 0}, {
	"capacity", "bat", "getCapacity", 0}, {
	"col_name", "bat", "setColumn", 0}, {
	"delete", "bat", "delete", 0}, {
	"destroy", "bat", "destroy", 0}, {
	"htype", "bat", "getHeadType", 0}, {
	"insert", "bat", "insert", 0}, {
	"key", "bat", "setKey", 0}, {
	"mirror", "bat", "mirror", 0}, {
	"name", "bat", "setRole", 0}, {
	"ordered", "bat", "isSorted", 0}, {
	"persists", "bat", "setPersistent", 0}, {
	"replace", "bat", "replace", 0}, {
	"reverse", "bat", "reverse", 0}, {
	"set", "bat", "setSet", 0}, {
	"seqbase", "bat", "setSequenceBase", 0}, {
	"synced", "bat", "isSynced", 0}, {
	"ttype", "bat", "getTailType", 0}, {
	"memory", "status", "memStatistics", 0}, {
	"mark", "algebra", "markT", 0}, {
	"bandjoin", "algebra", "bandjoin", 0}, {
	"card", "algebra", "card", 0}, {
	"cross", "algebra", "cross", 0}, {
	"copy", "algebra", "copy", 0}, {
	"count", "algebra", "count", 0}, {
	"count_no_nil", "algebra", "count_no_nil", 0}, {
	"diff", "algebra", "difference", 0}, {
	"exist", "algebra", "exist", 0}, {
	"fetch", "algebra", "fetch", 0}, {
	"fetchjoin", "algebra", "fetchjoin", 0}, {
	"find", "algebra", "find", 0}, {
	"fragment", "algebra", "fragment", 0}, {
	"hashjoin", "algebra", "hashjoin", 0}, {
	"hashsplit", "algebra", "hashsplit", 0}, {
	"histogram", "algebra", "histogram", 0}, {
	"indexjoin", "algebra", "indexjoin", 0}, {
	"intersect", "algebra", "intersect", 0}, {
	"join", "algebra", "join", 0}, {
	"kdiff", "algebra", "kdiff", 0}, {
	"kintersect", "algebra", "kintersect", 0}, {
	"kunion", "algebra", "kunion", 0}, {
	"kunique", "algebra", "kunique", 0}, {
	"like", "algebra", "like", 0}, {
	"max", "algebra", "max", 0}, {
	"merge", "algebra", "merge", 0}, {
	"mergejoin", "algebra", "mergejoin", 0}, {
	"min", "algebra", "min", 0}, {
	"number", "algebra", "number", 0}, {
	"outerjoin", "algebra", "outerjoin", 0}, {
	"position", "algebra", "position", 0}, {
	"prod", "algebra", "prod", 0}, {
	"rangesplit", "algebra", "rangesplit", 0}, {
	"sample", "algebra", "sample", 0}, {
	"sdiff", "algebra", "sdifference", 0}, {
	"select", "algebra", "select", 0}, {
	"semijoin", "algebra", "semijoin", 0}, {
	"sintersect", "algebra", "sintersect", 0}, {
	"slice", "algebra", "slice", 0}, {
	"split", "algebra", "split", 0}, {
	"sum", "algebra", "sum", 0}, {
	"sunion", "algebra", "sunion", 0}, {
	"sunique", "algebra", "sunique", 0}, {
	"thetajoin", "algebra", "thetajoin", 0}, {
	"topN", "algebra", "topN", 0}, {
	"tunique", "algebra", "tunique", 0}, {
	"uhashsplit", "algebra", "uhashsplit", 0}, {
	"union", "algebra", "union", 0}, {
	"unique", "algebra", "unique", 0}, {
	"urangesplit", "algebra", "urangesplit", 0}, {
	"uselect", "algebra", "uselect", 0}, {
	"CTgroup", "group", "group", 0}, {
	"CTrefine", "group", "refine", 0}, {
	"CTderive", "group", "group", 0}, {
	"CTregroup", "group", "regroup", 0}, {
	"alarm", "alarm", "alarm", 0}, {
	"ctime", "alarm", "ctime", 0}, {
	"epoch", "alarm", "epoch", 0}, {
	"time", "alarm", "time", 0}, {
	"timers", "alarm", "timers", 0}, {
	"sleep", "alarm", "sleep", 0}, {
	"usec", "alarm", "usec", 0}, {
	"debugmask", "mdb", "setDebug", 0}, {
	0, 0, 0, 0}
};

str
mapfcn(str n)
{
	int i;

	for (i = 0; idmap[i].v4name; i++)
		if (strcmp(n, idmap[i].v4name) == 0) {
			idmap[i].used++;
			return GDKstrdup(idmap[i].v5fcn);
		}
	return n;
}

/* the modules are derived from the function names */
str
mapmod(str n)
{
	int i;

	for (i = 0; idmap[i].v4name; i++)
		if (strcmp(n, idmap[i].v4name) == 0) {
			idmap[i].used++;
			return GDKstrdup(idmap[i].v5mod);
		}
	return GDKstrdup("milCache");
}

int
ismapped(str n)
{
	int i;

	for (i = 0; idmap[i].v4name; i++)
		if (strcmp(n, idmap[i].v5fcn) == 0) {
			return 1;
		}
	return 0;
}

void
showmappings()
{
	int i;

	for (i = 0; idmap[i].v4name; i++)
		if (idmap[i].used)
			fprintf(stdout, "#Identifer '%s' mapped to '%s.%s'\n", idmap[i].v4name, idmap[i].v5mod, idmap[i].v5fcn);
}

@}
