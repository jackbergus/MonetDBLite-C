@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@f batcalc
@a M.L. Kersten
@* BAT calculator
[TODO: property propagation]
Many applications require extension of the basic calculator and
mathematic functions to work on BAT arguments. Although the
MAL multiplex module contains a command ('multiplex.script')
to generate the necessary code, it is often much more efficient to 
use one of the dedidacted batcalc functions introduced below.

The operators supported are limited to the built-in fixed length
atoms, because they permit ease of storage of the operation result.
Variable sized atoms, especially user defined, may require more
administrative activities.
Furthermore, the operands involved are assumed to be aligned
to assure the fastest possible join evaluation.

Optimal processing performance is further obtained when the operators
can work as 'accumulators', for then we do not pay the price
of space allocation for a new intermediate. It may imply a BATcopy
before the accummulator function is being called.
A new BAT is of course created when the result of a function does not fit 
the accumulator.

The implementation does not take into account possible overflows
caused by the operators. However, the operators respect the NIL
semantics and division by zero produces a NIL.

In addition to arithmetic and comparison operators, casting and
mathematical functions are directly supported.

@+ NULL semantics
The batcalc arithmetic is already constraint to BATs of equal size.
Another improvement can be obtained when we do not have to check
for NULLs in each and every basic operation +,-,/,* and comparisons.
This variant can be obtained using a compile time flag (NULLTST) for the time
being. If it turns out to be effective, we will derive a new
version of batcalc.
Preliminary experiments show that ignoring the NULLS saves about 15\%
for larger instructions.
@mal
module batcalc;

@+ Basic arithmetic
The first group of functions provide abstractions over the
binary operators +,/,-,*, and %. Both on (BAT,BAT) and (BAT,CST)
operands. We also support the type enlargement and auto coercions,
because they avoid expensive BAT copying.
@= calcGrp

	command @1(a:bat[:any_1,:@4], b:bat[:any_1,:@5], c:bat[:any_1,:@2]):bat[:any_1,:@4]
	address CMDbataccum@3_@2_@4_@5
	comment "Binary BAT calculator function with accumulator BAT result";

	command @1(a:bat[:any_1,:@4], cst:@4, b:bat[:any_1,:@5]):bat[:any_1,:@4]
	address CMDbataccum@3cst2_@2_@4_@5
	comment "(BAT,Constant) calculator function with accumulator BAT result";

	command @1(a:bat[:any_1,:@4], b:bat[:any_1,:@4], cst:@5) :bat[:any_1,:@4]
	address CMDbataccum@3cst_@2_@4_@5
	comment "(BAT,Constant) calculator function with accumulator BAT result";

	command @1(b:bat[:any_1,:@4], cst:@5) :bat[:any_1,:@2] 
	address CMDbat@3cst_@2_@4_@5;

	command @1(cst:@4, b:bat[:any_1,:@5]) :bat[:any_1,:@2] 
	address CMDcst@3bat_@2_@4_@5;

	command @1(b:bat[:any_1,:@4], c:bat[:any_1,:@5]) :bat[:any_1,:@2] 
	address CMDbat@3_@2_@4_@5
	comment "Binary BAT calculator function with new BAT result";

	command @1(b:bat[:void,:@4], c:bat[:oid,:@5]) :bat[:oid,:@2] 
	address CMDbat@3_@2_@4_@5
	comment "Binary BAT calculator function with new BAT result";
@{
@-
We need instantiations for the accumulator code,
but should limit modulo functions to integer-based types.
The calc group contains the operator, the desired result typ, its
C qualifier and the operands
@mal
	@:calcGrp(%,oid,MOD,oid,oid)@
	@:calcGrp(%,sht,MOD,sht,sht)@
	@:calcGrp(%,int,MOD,int,int)@
	@:calcGrp(%,lng,MOD,lng,lng)@
	@:calcGrp(xor,oid,XOR,oid,oid)@
	@:calcGrp(xor,sht,XOR,sht,sht)@
	@:calcGrp(xor,int,XOR,int,int)@
	@:calcGrp(xor,lng,XOR,lng,lng)@
	@:calcGrp(and,oid,AND,oid,oid)@
	@:calcGrp(and,sht,AND,sht,sht)@
	@:calcGrp(and,int,AND,int,int)@
	@:calcGrp(and,lng,AND,lng,lng)@
	@:calcGrp(or,oid,OR,oid,oid)@
	@:calcGrp(or,sht,OR,sht,sht)@
	@:calcGrp(or,int,OR,int,int)@
	@:calcGrp(or,lng,OR,lng,lng)@

	@:calcGrp(/,dbl,DIV,dbl,dbl)@
	@:calcGrp(/,flt,DIV,flt,flt)@
	@:calcGrp(/,lng,DIV,int,sht)@
	@:calcGrp(/,lng,DIV,sht,int)@
	@:calcGrp(/,lng,DIV,lng,sht)@
	@:calcGrp(/,lng,DIV,sht,lng)@
	@:calcGrp(/,lng,DIV,sht,sht)@
	@:calcGrp(/,lng,DIV,lng,int)@
	@:calcGrp(/,lng,DIV,int,lng)@
	@:calcGrp(/,lng,DIV,int,int)@
	@:calcGrp(/,int,DIV,sht,sht)@
	@:calcGrp(/,int,DIV,int,sht)@
	@:calcGrp(/,int,DIV,sht,int)@
	@:calcGrp(/,sht,DIV,sht,sht)@
	@:calcGrp(/,lng,DIV,lng,lng)@
	@:calcGrp(/,int,DIV,int,int)@

	@:calcGrp(*,dbl,MUL,dbl,dbl)@
	@:calcGrp(*,flt,MUL,flt,flt)@
	@:calcGrp(*,lng,MUL,int,sht)@
	@:calcGrp(*,lng,MUL,sht,int)@
	@:calcGrp(*,lng,MUL,lng,sht)@
	@:calcGrp(*,lng,MUL,sht,lng)@
	@:calcGrp(*,lng,MUL,sht,sht)@
	@:calcGrp(*,lng,MUL,lng,int)@
	@:calcGrp(*,lng,MUL,int,lng)@
	@:calcGrp(*,lng,MUL,int,int)@
	@:calcGrp(*,int,MUL,sht,sht)@
	@:calcGrp(*,int,MUL,int,sht)@
	@:calcGrp(*,int,MUL,sht,int)@
	@:calcGrp(*,sht,MUL,sht,sht)@
	@:calcGrp(*,lng,MUL,lng,lng)@
	@:calcGrp(*,int,MUL,int,int)@

	@:calcGrp(-,dbl,SUB,dbl,dbl)@
	@:calcGrp(-,flt,SUB,flt,flt)@
	@:calcGrp(-,lng,SUB,int,sht)@
	@:calcGrp(-,lng,SUB,sht,int)@
	@:calcGrp(-,lng,SUB,lng,sht)@
	@:calcGrp(-,lng,SUB,sht,lng)@
	@:calcGrp(-,lng,SUB,lng,lng)@
	@:calcGrp(-,lng,SUB,int,lng)@
	@:calcGrp(-,lng,SUB,int,int)@
	@:calcGrp(-,int,SUB,sht,sht)@
	@:calcGrp(-,int,SUB,int,sht)@
	@:calcGrp(-,int,SUB,sht,int)@
	@:calcGrp(-,sht,SUB,sht,sht)@
	@:calcGrp(-,lng,SUB,lng,int)@
	@:calcGrp(-,int,SUB,int,int)@

	@:calcGrp(+,dbl,ADD,dbl,dbl)@
	@:calcGrp(+,flt,ADD,flt,flt)@
	@:calcGrp(+,lng,ADD,int,sht)@
	@:calcGrp(+,lng,ADD,sht,int)@
	@:calcGrp(+,lng,ADD,lng,sht)@
	@:calcGrp(+,lng,ADD,sht,lng)@
	@:calcGrp(+,lng,ADD,lng,int)@
	@:calcGrp(+,lng,ADD,int,lng)@
	@:calcGrp(+,lng,ADD,int,int)@
	@:calcGrp(+,int,ADD,int,int)@
	@:calcGrp(+,int,ADD,sht,sht)@
	@:calcGrp(+,int,ADD,int,sht)@
	@:calcGrp(+,sht,ADD,sht,sht)@
	@:calcGrp(+,lng,ADD,lng,lng)@
	@:calcGrp(+,int,ADD,sht,int)@


@-
@}
@= unary
	command -(b:bat[:any_1,:@1]):bat[:any_1,:@1] 
	address CMDunaryMIN
	comment "Unary minus over the tail of the bat";
	
	command --(b:bat[:any_1,:@1]):bat[:any_1,:@1] 
	address CMDunaryMINMIN
	comment "Unary minus over the tail of the bat";

	command ++(b:bat[:any_1,:@1]):bat[:any_1,:@1] 
	address CMDunaryPLUSPLUS
	comment "Unary minus over the tail of the bat";
@-
Not used yet
	#command -(a:bat[:any_1,:@1],b:bat[:any_1,:@1])
	#		:bat[:any_1,:@1] 
	#address CMDunaryAccumMIN 
	#comment "Unary - over the tail of the bat";

	#command --(a:bat[:any_1,:@1],b:bat[:any_1,:@1])
	#		:bat[:any_1,:@1] 
	#address CMDunaryAccumMINMIN 
	#comment "Unary -- over the tail of the bat";
	#
	#command ++(a:bat[:any_1,:@1],b:bat[:any_1,:@1])
	#		:bat[:any_1,:@1] 
	#address CMDunaryAccumPLUSPLUS 
	#comment "Unary ++ over the tail of the bat";
@{
@mal
@:unary(oid)@
@:unary(int)@
@:unary(lng)@
@:unary(sht)@
@:unary(flt)@
@:unary(dbl)@
@}
@+ Comparison routines
The command signatures are similar to those above, producing a bit result.
@= comparison
	command @1(b:bat[:any_1,:@2], c:bat[:any_1,:@2]) :bat[:any_1,:bit]
	address CMD_@3_@2;
	command @1(a:bat[:any_1,:bit], b:bat[:any_1,:@2], c:bat[:any_1,:@2])
	:bat[:any_1,:bit]
	address CMDaccum_@3_@2;

	command @1(b:bat[:any_1,:@2],cst:@2) :bat[:any_1,:bit]
	address CMD_@3_@2_cst;

	command @1(a:bat[:any_1,:bit], b:bat[:any_1,:@2],cst:@2) :bat[:any_1,:bit]
	address CMDaccum_@3_@2_cst;
	command @1(a:bat[:any_1,:bit], cst:@2, b:bat[:any_1,:@2]) :bat[:any_1,:bit]
	address CMDaccum_@3_cst_@2;


@= compareGrp
	@:comparison(<,@1,LT)@
	@:comparison(==,@1,EQ)@
	@:comparison(!=,@1,NEQ)@
	@:comparison(>,@1,GT)@
	@:comparison(<=,@1,LE)@
	@:comparison(>=,@1,GE)@
@mal
	@:compareGrp(bit)@
	@:compareGrp(dbl)@
	@:compareGrp(flt)@
	@:compareGrp(oid)@
	@:compareGrp(sht)@
	@:compareGrp(int)@
	@:compareGrp(lng)@

	@:comparison(and,bit,AND)@
	@:comparison(or,bit,OR)@

@}
@+ Boolean operations
The command signature can mostly be borrowed from the arithmetic.

@mal
command not(b:bat[:any_1,:bit]):bat[:any_1,:bit] 
address CMDbitbatNOT
comment "Return a new BAT with the negated tail";

command not(a:bat[:any_1,:bit], b:bat[:any_1,:bit]):bat[:any_1,:bit] 
address CMDbitbataccumNOT
comment "Return a BAT with the negated tail";

@- Implementation
@include kprelude.mx

@h
#include "gdk.h"
#include "math.h"
#include "mal_exception.h"

#ifdef WIN32
#ifndef LIBBATCALC
#define batcalc_export extern __declspec(dllimport)
#else
#define batcalc_export extern __declspec(dllexport)
#endif
#else
#define batcalc_export extern
#endif

#define NULLTST
@-
The accumulator operators are relatively straight forward,
when the target BAT is known and we only have to deal with
fixed-sized types. 
@= batinit
	s@1= BUNsize(@2);
	p@1= (str) (BUNfirst(@2)+@2->tloc);
@-
@= accum
	while( p1 < hend ){
		/* this code is better as x?nil:y  */
#ifdef NULLTST
		if(*(@3 *)p2 == @3_nil || *(@4*)p3 == @4_nil)
			*(@1*)p1= @1_nil;
		else 
#endif
			*(@1*)p1= (@1) (* (@3*) p2 @2 *(@4 *) p3);
		p1= (ptr)( ((char*)p1) + s1);
		p2= (ptr)( ((char*)p2) + s2);
		p3= (ptr)( ((char*)p3) + s3);
	}
@= accumDIV
	while( p1 < hend ){
		/* this code is better as x?nil:y  */
		if (*(@4*)p3 == 0) {
				res = throwMessage("batcalc.@1", "Division by zero");
			break;
		} else
#ifdef NULLTST
		if (*(@3 *)p2 == @3_nil || *(@4*)p3 == @4_nil)
			*(@1*)p1= @1_nil;
		else 
#endif
			*(@1*)p1= (@1)(* (@3*) p2 @2 *(@4 *) p3);
		p1= (ptr)( ((char*)p1) + s1);
		p2= (ptr)( ((char*)p2) + s2);
		p3= (ptr)( ((char*)p3) + s3);
	}
@-
This code could be further improved by factoring
out occurrences of the nil-tst on the constant provided.
This has been left out.
@= accumCst
	while( p1 < hend ){
#ifdef NULLTST
		if(*(@3 *)p2 == @3_nil || *(@4*)cst == @4_nil)
			*(@1*)p1= @1_nil;
		else 
#endif
			*(@1*)p1 = *(@3*) p2 @2 *(@4 *) cst;
		p1= (ptr)( ((char *)p1) + s1);
		p2= (ptr)( ((char *)p2) + s2);
	}
@= accumCstLeft
	while( p1 < hend ){
#ifdef NULLTST
		if(*(@3 *)p2 == @3_nil || *(@4*)cst == @4_nil)
			*(@1*)p1= @1_nil;
		else 
#endif
			*(@1*)p1 = *(@3*) cst @2 *(@4 *) p2;
		p1= (ptr)( ((char *)p1) + s1);
		p2= (ptr)( ((char *)p2) + s2);
	}
@= accumCstDIV
	while( p1 < hend ){
		if(*(@3*)cst == 0) { 
				res = throwMessage("batcalc.@1", "Division by zero");
			break;
		} else 
#ifdef NULLTST
		if(*(@3*)cst == @3_nil || *(@4 *)p2 == @4_nil)
			*(@1*)p1 = @1_nil;
		else 
#endif
			*(@1*)p1 = *(@3 *) cst @2 *(@4*) p2;
		p1= (ptr)( ((char *)p1) + s1);
		p2= (ptr)( ((char *)p2) + s2);
	}
@-
A general assumption in all cases is the bats are synchronized on their
head column. This is not checked and may be mis-used to deploy the
implementation for shifted window arithmetic as well.
@= chkSize
	if( BATcount(@1) != BATcount(@2) )
	return throwMessage("batcalc.@3", "requires bats of identical size");
@= tstBat
if( bn== NULL) {*ret= 0; 
	return throwMessage("batcalc.@1", "can not create bat");}
@-
The code block below heavily uses the MX code expansion involved,
but in essence the structure is relatively simple.
The BAT loops to cover the cases for arithmetic are
collected in bataccum<operator>. Initialization of the
two primary command structures are dealt with in the CMD* alternatives.
The similar code base is produced for dealing with a constant argument. 
@= loopImpl
{	size_t s1,s2,s3;
	ptr p1,p2,p3, hend;

	@:batinit(1,bn)@
	@:batinit(2,left)@
	@:batinit(3,right)@
	hend = (str) BUNlast(bn);
	if( '@1' == '/'){ 
		while( p1 < hend ){
			/* this code is better as x?nil:y  */
			if (*(@5*)p3== 0) {
					res = throwMessage("batcalc.@1", "Division by zero");
				break;
				
			} else 
#ifdef NULLTST
			if (*(@4 *)p2 == @4_nil || *(@5*)p3 == @5_nil)
				*(@3*)p1= @3_nil;
			else 
#endif
				*(@3*)p1= (@3)(* (@4*) p2 / *(@5 *) p3);
			p1= (ptr)( ((char*)p1) + s1);
			p2= (ptr)( ((char*)p2) + s2);
			p3= (ptr)( ((char*)p3) + s3);
		}
	} else {
		while( p1 < hend ){
			/* this code is better as x?nil:y  */
#ifdef NULLTST
			if(*(@4 *)p2 == @4_nil || *(@5*)p3 == @5_nil)
				*(@3*)p1= @3_nil;
			else 
#endif
				*(@3*)p1= (@3) (* (@4*) p2 @1 *(@5 *) p3);
			p1= (ptr)( ((char*)p1) + s1);
			p2= (ptr)( ((char*)p2) + s2);
			p3= (ptr)( ((char*)p3) + s3);
		}
	}
}
@= arithmeticImpl
batcalc_export str CMDbat@2_@3_@4_@5(int *ret, int *l, int *r);
str CMDbat@2_@3_@4_@5(int *ret, int *l, int *r)
{	BAT *bn, *left, *right;
	char *res = MAL_SUCCEED;

	if( (left= BATdescriptor(*l)) == NULL ){
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}
	if( (right= BATdescriptor(*r)) == NULL ){
		BBPreleaseref(left->batCacheid);
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}
	@:chkSize(left,right,CMDbat@2)@

	if (left->ttype == TYPE_@3)
		bn= BATwcopy(left);
	else
		bn= BATwcopy(right);
	if( bn == NULL){
		BBPreleaseref(left->batCacheid);
		BBPreleaseref(right->batCacheid);
		return throwMessage("batcalc.@1", "no copy available ");
	}
	@:loopImpl(@1,@2,@3,@4,@5)@
	BBPreleaseref(left->batCacheid);
	BBPreleaseref(right->batCacheid);
	BATkey(BATmirror(bn),0);           
	bn->tsorted = 0;
	if (!(bn->batDirty&2)) bn = BATsetaccess(bn, BAT_READ); \
	*ret = bn->batCacheid;
	BBPkeepref(*ret);
	return res;
}

batcalc_export str CMDbataccum@2_@3_@4_@5(int *ret, int *d, int *l, int *r);
str CMDbataccum@2_@3_@4_@5(int *ret, int *d, int *l, int *r)
{	BAT *bn, *left, *right;
	char *res = MAL_SUCCEED;

	if( (bn= BATdescriptor(*d)) == NULL ){
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}
	if( (left= BATdescriptor(*l)) == NULL ){
		BBPreleaseref(bn->batCacheid);
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}
	if( (right= BATdescriptor(*r)) == NULL ){
		BBPreleaseref(bn->batCacheid);
		BBPreleaseref(left->batCacheid);
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}

	@:chkSize(bn,left,CMDbataccum@2)@
	@:chkSize(bn,right,CMDbataccum@2)@

	@:loopImpl(@1,@2,@3,@4,@5)@
	BATkey(BATmirror(bn),0);           
	bn->tsorted = 0;
	if (!(bn->batDirty&2)) bn = BATsetaccess(bn, BAT_READ); \
	*ret = bn->batCacheid;
	BBPkeepref(bn->batCacheid);
	BBPreleaseref(left->batCacheid);
	BBPreleaseref(right->batCacheid);
	return res;
}

batcalc_export str CMDbataccum@2cst_@3_@4_@5(int *ret, int *r, int *l, void *cst);
str CMDbataccum@2cst_@3_@4_@5(int *ret, int *r, int *l, void *cst)
{	BAT *bn, *left;
	size_t s1,s2;
	ptr p1,p2, hend;
	char *res = MAL_SUCCEED;

	if( (bn= BATdescriptor(*r)) == NULL ){
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}
	if( (left= BATdescriptor(*l)) == NULL ){
		BBPreleaseref(bn->batCacheid);
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}
	@:chkSize(bn,left,CMDbataccum@2)@
	@:batinit(1,bn)@
	@:batinit(2,left)@
	hend = (str) BUNlast(bn);

	if( '@1'== '/') {
		if (*(@5*)cst == 0) {
			res = throwMessage("batcalc.@1", "Division by zero");
		} else {
			@:accumCst(@3,@1,@4,@5)@ 
		}
	} else {
		@:accumCst(@3,@1,@4,@5)@ 
	}
	if (!(bn->batDirty&2)) bn = BATsetaccess(bn, BAT_READ); \
	bn->tsorted = 0;
	BATkey(BATmirror(bn),0);           
	*ret = bn->batCacheid;
	BBPkeepref(bn->batCacheid);
	BBPreleaseref(left->batCacheid);
	return res;
}
batcalc_export str CMDbataccum@2cst2_@3_@4_@5(int *ret, int *r, void *cst, int *l);
str CMDbataccum@2cst2_@3_@4_@5(int *ret, int *r, void *cst, int *l)
{	BAT *bn, *left;
	size_t s1,s2;
	ptr p1,p2, hend;
	char *res = MAL_SUCCEED;

	if( (bn= BATdescriptor(*r)) == NULL ){
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}
	if( (left= BATdescriptor(*l)) == NULL ){
		BBPreleaseref(bn->batCacheid);
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}
	@:chkSize(bn,left,CMDbataccum@2)@
	@:batinit(1,bn)@
	@:batinit(2,left)@
	hend = (str) BUNlast(bn);

	if( '@1'== '/') {
		@:accumCstDIV(@3,@1,@4,@5)@ 
	} else {
		@:accumCstLeft(@3,@1,@4,@5)@ 
	}
	if (!(bn->batDirty&2)) bn = BATsetaccess(bn, BAT_READ); \
	bn->tsorted = 0;
	BATkey(BATmirror(bn),0);           
	*ret = bn->batCacheid;
	BBPkeepref(bn->batCacheid);
	BBPreleaseref(left->batCacheid);
	return res;
}

batcalc_export str CMDbat@2cst_@3_@4_@5(int *ret, int *l, void *cst);
str CMDbat@2cst_@3_@4_@5(int *ret, int *l, void *cst)
{	BAT *bn, *left;
	size_t s1,s2;
	ptr p1,p2, hend;
	char *res = MAL_SUCCEED;

	if( (left= BATdescriptor(*l)) == NULL ){
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}
	bn= newBATresult(left, TYPE_@3);
	if( bn == NULL){
		BBPreleaseref(left->batCacheid);
		return throwMessage("batcalc.@1", "no copy available ");
	}
	copyHead(bn,left);

	@:batinit(1,bn)@
	@:batinit(2,left)@

	hend = ((str) BUNlast(bn)) + (s1*BATcount(left));

	if( '@1'== '/') {
		if (*(@5*)cst == 0) {
				res = throwMessage("batcalc.@1", "Division by zero");
		} else {
			@:accumCst(@3,@1,@4,@5)@ 
		}
	} else {
		@:accumCst(@3,@1,@4,@5)@ 
	}
	bn->batBuns->free = BATcount(left) * s1;
	BATsetcount(bn, BATcount(left));
	bn->tsorted = 0;
	if (!(bn->batDirty&2)) bn = BATsetaccess(bn, BAT_READ); \
	*ret = bn->batCacheid;
	BBPkeepref(bn->batCacheid);
	BBPreleaseref(left->batCacheid);
	return res;
}
batcalc_export str CMDcst@2bat_@3_@4_@5(int *ret, void *cst, int *l);
str CMDcst@2bat_@3_@4_@5(int *ret, void *cst, int *l)
{	BAT *bn, *left;
	size_t s1,s2;
	ptr p1,p2, hend;
	char *res = MAL_SUCCEED;

	if( (left= BATdescriptor(*l)) == NULL ){
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}
	bn= newBATresult(left, TYPE_@3);
	if( bn == NULL){
		BBPreleaseref(left->batCacheid);
		return throwMessage("batcalc.@1", "no copy available ");
	}
	copyHead(bn,left);

	@:batinit(1,bn)@
	@:batinit(2,left)@

	hend = ((str) BUNlast(bn)) + (s1*BATcount(left));

	if( '@1'== '/') {
		@:accumCstDIV(@3,@1,@4,@5)@ 
	} else {
		@:accumCstLeft(@3,@1,@4,@5)@ 
	}
	bn->batBuns->free = BATcount(left) * s1;
	BATsetcount(bn, BATcount(left));
	bn->tsorted = 0;
	if (!(bn->batDirty&2)) bn = BATsetaccess(bn, BAT_READ); \
	*ret = bn->batCacheid;
	BBPkeepref(bn->batCacheid);
	BBPreleaseref(left->batCacheid);
	return res;
}
@c
#include "batcalc.h"

#define BATwcopy(b) BATcopy(b, b->htype, b->ttype, TRUE)
BAT *newBATresult(BAT *b, int tpe)
{
	BAT *bn;

	if (BAThvoid(b)) {
		bn = BATnew(TYPE_void, tpe, BATcount(b));
		BATseqbase(bn, b->hseqbase);
	} else
		bn = BATnew(b->htype, tpe, BATcount(b));
	bn->hsorted = b->hsorted;
	bn->tsorted = b->tsorted;
	return bn;
}

void
copyHead(BAT *bn, BAT *org)
{
	if (BAThvoid(org)) {
		BATseqbase(bn, org->hseqbase);
	} else { /* works for fixed size only now, need to use a VIEW of the
		    original in case of varsized atoms */
		size_t s1,s2;
		ptr p1,p2,hend;
		int atomsize = ATOMsize(bn->htype);

		s1 = BUNsize(bn);
		p1 = (str) (BUNfirst(bn)+bn->hloc);
		s2 = BUNsize(org);
		p2 = (str) (BUNfirst(org)+org->hloc);
		hend = (str) BUNlast(org);
		switch(atomsize){
		case 1:
			while( p2<hend) {
				*(chr*)p1 = *(chr*)p2;
				p1= (ptr)( ((char*)p1) + s1);
				p2= (ptr)( ((char*)p2) + s2);
			}
		case 2:
			while( p2<hend) {
				*(sht*)p1 = *(sht*)p2;
				p1= (ptr)( ((char*)p1) + s1);
				p2= (ptr)( ((char*)p2) + s2);
			}
		case 4:
			while( p2<hend) {
				*(int*)p1 = *(int*)p2;
				p1= (ptr)( ((char*)p1) + s1);
				p2= (ptr)( ((char*)p2) + s2);
			}
		case 8:
			while( p2<hend) {
				*(lng*)p1 = *(lng*)p2;
				p1= (ptr)( ((char*)p1) + s1);
				p2= (ptr)( ((char*)p2) + s2);
			}
		default:
			while( p2<hend) {
				memcpy(p1,p2,atomsize);
				p1= (ptr)( ((char*)p1) + s1);
				p2= (ptr)( ((char*)p2) + s2);
			}
		}
	}
}

@= arithGrpImpl
@:arithmeticImpl(@1,@2,flt,flt,flt)@
@:arithmeticImpl(@1,@2,dbl,dbl,dbl)@
@:arithmeticImpl(@1,@2,oid,oid,oid)@

@:arithmeticImpl(@1,@2,int,int,sht)@
@:arithmeticImpl(@1,@2,int,sht,int)@
@:arithmeticImpl(@1,@2,int,sht,sht)@
@:arithmeticImpl(@1,@2,sht,sht,sht)@

@:arithmeticImpl(@1,@2,lng,lng,lng)@
@:arithmeticImpl(@1,@2,lng,sht,lng)@
@:arithmeticImpl(@1,@2,lng,lng,sht)@
@:arithmeticImpl(@1,@2,lng,sht,sht)@
@:arithmeticImpl(@1,@2,lng,sht,int)@
@:arithmeticImpl(@1,@2,lng,int,sht)@
@:arithmeticImpl(@1,@2,lng,int,lng)@
@:arithmeticImpl(@1,@2,lng,lng,int)@

@:arithmeticImpl(@1,@2,lng,int,int)@
@:arithmeticImpl(@1,@2,int,int,int)@

@c
@:arithGrpImpl(/,DIV)@
@:arithGrpImpl(*,MUL)@
@:arithGrpImpl(-,SUB)@
@:arithGrpImpl(+,ADD)@

@-  Modulo arithmetic
The Modulo function doesn;t work on all types. Therefore we 
define here the necessary implementations separately by copying
the arithmeticImpl block and removing elements not required.
@c
@= numeric_funcs
batcalc_export str bataccum@1_@3_@4_@5(BAT *bn, BAT *left, BAT *right);
str bataccum@1_@3_@4_@5(BAT *bn, BAT *left, BAT *right)
{	size_t s1,s2,s3;
	ptr p1,p2,p3, hend;

	@:batinit(1,bn)@
	@:batinit(2,left)@
	@:batinit(3,right)@
	hend = (str) BUNlast(bn);
	switch(BATttype(bn)){
	case TYPE_oid: @:accum(oid,@2,oid,oid)@ break;
	case TYPE_sht: @:accum(sht,@2,sht,sht)@ break;
	case TYPE_int: @:accum(int,@2,int,int)@ break;
	case TYPE_lng: @:accum(lng,@2,lng,lng)@ break;
	default: return throwMessage("batcalc.@1", "unexpected type");
	}
	return MAL_SUCCEED;
}

batcalc_export str CMDbat@1_@3_@4_@5(int *ret, int *l, int *r);
str CMDbat@1_@3_@4_@5(int *ret, int *l, int *r)
{	BAT *bn, *left, *right;
	str msg;

	if( (left= BATdescriptor(*l)) == NULL ){
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}
	if( (right= BATdescriptor(*r)) == NULL ){
		BBPreleaseref(left->batCacheid);
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}

	@:chkSize(left,right,CMDbat@1)@

	if (left->ttype == TYPE_@3)
		bn= BATwcopy(left);
	else
		bn= BATwcopy(right);
	if( bn == NULL){
		return throwMessage("batcalc.@1", "no copy available ");
	}
	bn->tsorted = 0;
	msg= bataccum@1_@3_@4_@5(bn,left,right);
	if (!(bn->batDirty&2)) bn = BATsetaccess(bn, BAT_READ); \
	*ret = bn->batCacheid;
	BBPkeepref(*ret);
	BBPreleaseref(left->batCacheid);
	BBPreleaseref(right->batCacheid);
	return msg;
}

batcalc_export str CMDbataccum@1_@3_@4_@5(int *ret, int *d, int *l, int *r);
str CMDbataccum@1_@3_@4_@5(int *ret, int *d, int *l, int *r)
{	BAT *bn, *left, *right;
	str msg;

	if( (bn= BATdescriptor(*d)) == NULL ){
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}
	if( (left= BATdescriptor(*l)) == NULL ){
		BBPreleaseref(bn->batCacheid);
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}
	if( (right= BATdescriptor(*r)) == NULL ){
		BBPreleaseref(bn->batCacheid);
		BBPreleaseref(left->batCacheid);
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}

	@:chkSize(bn,left,CMDbataccum@1)@
	@:chkSize(bn,right,CMDbataccum@1)@

	msg= bataccum@1_@3_@4_@5(bn,left,right);
	bn->tsorted = 0;
	if (!(bn->batDirty&2)) bn = BATsetaccess(bn, BAT_READ); \
	*ret = bn->batCacheid;
	BBPkeepref(bn->batCacheid);
	BBPreleaseref(left->batCacheid);
	BBPreleaseref(right->batCacheid);
	return msg;
}
batcalc_export str CMDbataccum@1cst_@3_@4_@5(int *ret, int *r, int *l, void *cst);
str CMDbataccum@1cst_@3_@4_@5(int *ret, int *r, int *l, void *cst)
{	BAT *bn, *left;
	size_t s1,s2;
	ptr p1,p2, hend;

	if( (bn= BATdescriptor(*r)) == NULL ){
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}
	if( (left= BATdescriptor(*l)) == NULL ){
		BBPreleaseref(bn->batCacheid);
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}
	@:chkSize(bn,left,CMDbataccum@1)@
	@:batinit(1,bn)@
	@:batinit(2,left)@
	hend = (str) BUNlast(bn);

	switch(BATttype(left)){
	case TYPE_oid: @:accumCst(oid,@2,oid,oid)@ break;
	case TYPE_sht: @:accumCst(sht,@2,sht,sht)@ break;
	case TYPE_int: @:accumCst(int,@2,int,int)@ break;
	case TYPE_lng: @:accumCst(lng,@2,lng,lng)@ break;
	default : return throwMessage("batcalc.@1", "unexpected type");
	}
	if (!(bn->batDirty&2)) bn = BATsetaccess(bn, BAT_READ); \
	*ret = bn->batCacheid;
	BBPkeepref(bn->batCacheid);
	BBPreleaseref(left->batCacheid);
	return MAL_SUCCEED;
}

batcalc_export str CMDbataccum@1cst2_@3_@4_@5(int *ret, int *r, void *cst, int *l);
str CMDbataccum@1cst2_@3_@4_@5(int *ret, int *r, void *cst, int *l)
{	BAT *bn, *left;
	size_t s1,s2;
	ptr p1,p2, hend;

	if( (bn= BATdescriptor(*r)) == NULL ){
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}
	if( (left= BATdescriptor(*l)) == NULL ){
		BBPreleaseref(bn->batCacheid);
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}
	@:chkSize(bn,left,CMDbataccum@1)@
	@:batinit(1,bn)@
	@:batinit(2,left)@
	hend = (str) BUNlast(bn);

	switch(BATttype(left)){
	case TYPE_oid: @:accumCstLeft(oid,@2,oid,oid)@ break;
	case TYPE_sht: @:accumCstLeft(sht,@2,sht,sht)@ break;
	case TYPE_int: @:accumCstLeft(int,@2,int,int)@ break;
	case TYPE_lng: @:accumCstLeft(lng,@2,lng,lng)@ break;
	default : return throwMessage("batcalc.@1", "unexpected type");
	}
	if (!(bn->batDirty&2)) bn = BATsetaccess(bn, BAT_READ); \
	*ret = bn->batCacheid;
	BBPkeepref(bn->batCacheid);
	BBPreleaseref(left->batCacheid);
	return MAL_SUCCEED;
}
batcalc_export str CMDbat@1cst_@3_@4_@5(int *ret, int *l, void *cst);
str CMDbat@1cst_@3_@4_@5(int *ret, int *l, void *cst)
{	BAT *bn, *left;
	size_t s1,s2;
	ptr p1,p2, hend;
	char *res = MAL_SUCCEED;

	if( (left= BATdescriptor(*l)) == NULL ){
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}
	bn= newBATresult(left, TYPE_@3);
	if( bn == 0){
		BBPreleaseref(left->batCacheid);
		return throwMessage("batcalc.@1", "no copy available");
	}
	copyHead(bn,left);

	@:batinit(1,bn)@
	@:batinit(2,left)@
	hend = ((str) BUNlast(bn)) + (s1*BATcount(left));

	if( '@2'== '/') {
		if (*(@5*)cst == 0) {
				res = throwMessage("batcalc.@1", "Division by zero");
		} else {
			@:accumCst(@3,@2,@4,@5)@ 
		}
	} else {
		@:accumCst(@3,@2,@4,@5)@ 
	}
	bn->batBuns->free = BATcount(left) * s1;
	BATsetcount(bn, BATcount(left));
	bn->tsorted = 0;
	if (!(bn->batDirty&2)) bn = BATsetaccess(bn, BAT_READ); \
	*ret = bn->batCacheid;
	BBPkeepref(bn->batCacheid);
	BBPreleaseref(left->batCacheid);
	return res;
}
batcalc_export str CMDcst@1bat_@3_@4_@5(int *ret,void *cst, int *l);
str CMDcst@1bat_@3_@4_@5(int *ret,void *cst, int *l)
{	BAT *bn, *left;
	size_t s1,s2;
	ptr p1,p2, hend;
	char *res = MAL_SUCCEED;

	if( (left= BATdescriptor(*l)) == NULL ){
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}
	bn= newBATresult(left, TYPE_@3);
	if( bn == 0){
		BBPreleaseref(left->batCacheid);
		return throwMessage("batcalc.@1", "no copy available");
	}
	copyHead(bn,left);

	@:batinit(1,bn)@
	@:batinit(2,left)@
	hend = ((str) BUNlast(bn)) + (s1*BATcount(left));

	if( '@2'== '/') {
		@:accumCstDIV(@3,@2,@4,@5)@ 
	} else {
		@:accumCstLeft(@3,@2,@4,@5)@ 
	}
	bn->batBuns->free = BATcount(left) * s1;
	BATsetcount(bn, BATcount(left));
	bn->hsorted = BAThordered(left);
	bn->tsorted = 0;
	if (!(bn->batDirty&2)) bn = BATsetaccess(bn, BAT_READ); \
	*ret = bn->batCacheid;
	BBPkeepref(bn->batCacheid);
	BBPreleaseref(left->batCacheid);
	return res;
}
@c
@:numeric_funcs(MOD,%,oid,oid,oid)@
@:numeric_funcs(MOD,%,int,int,int)@
@:numeric_funcs(MOD,%,lng,lng,lng)@
@:numeric_funcs(MOD,%,sht,sht,sht)@
@:numeric_funcs(XOR,^,oid,oid,oid)@
@:numeric_funcs(XOR,^,int,int,int)@
@:numeric_funcs(XOR,^,lng,lng,lng)@
@:numeric_funcs(XOR,^,sht,sht,sht)@
@:numeric_funcs(AND,&,oid,oid,oid)@
@:numeric_funcs(AND,&,int,int,int)@
@:numeric_funcs(AND,&,lng,lng,lng)@
@:numeric_funcs(AND,&,sht,sht,sht)@
@:numeric_funcs(OR,|,oid,oid,oid)@
@:numeric_funcs(OR,|,int,int,int)@
@:numeric_funcs(OR,|,lng,lng,lng)@
@:numeric_funcs(OR,|,sht,sht,sht)@

@- Implementation of unary operations
@= accumUnary
	while( p1 < hend ){
		/* this code is better as x?nil:y  */
#ifdef NULLTST
		if(*(@1 *)p2 == @1_nil )
			*(@1*)p1= @1_nil;
		else 
#endif
			*(@1*)p1= (@1) (@2 *(@1 *) p2);
		p1= (ptr)( ((char *)p1) + s1);
		p2= (ptr)( ((char *)p2) + s2);
	}
@-
Unary accummulators are only indirectly called. They can not
always be defined without signature clashes, eg. -(batA,batC).
@= unary_impl
batcalc_export str CMDunaryAccum@1(int *ret,int *did, int *bid);
str CMDunaryAccum@1(int *ret,int *did, int *bid){
	BAT *b,*bn;
	size_t s1,s2;
	ptr p1,p2, hend;
	
	if( (bn= BATdescriptor(*did)) == NULL ){
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}
	if( (b= BATdescriptor(*bid)) == NULL ){
		BBPreleaseref(bn->batCacheid);
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}
	@:batinit(1,bn)@
	@:batinit(2,b)@
	hend = (str) BUNlast(bn);
	switch(BATttype(bn)){
	case TYPE_oid: @:accumUnary(oid,@2)@ break;
	case TYPE_sht: @:accumUnary(sht,@2)@ break;
	case TYPE_int: @:accumUnary(int,@2)@ break;
	case TYPE_lng: @:accumUnary(lng,@2)@ break;
	case TYPE_flt: @:accumUnary(flt,@2)@ break;
	case TYPE_dbl: @:accumUnary(dbl,@2)@ break;
	default: return throwMessage("batcalc.MIN", "unexpected type");
	}
	if (!(bn->batDirty&2)) bn = BATsetaccess(bn, BAT_READ); \
	*ret= bn->batCacheid;
	BBPkeepref(bn->batCacheid);
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}
batcalc_export str CMDunary@1(int *ret, int *bid);
str CMDunary@1(int *ret, int *bid){
	BAT *b,*bn;
	str msg;
	
	if( (b= BATdescriptor(*bid)) == NULL ){
		return throwMessage("batcalc.@1", "Cannot access descriptor");
	}
	bn= BATwcopy(b);
	if( bn == NULL){
		BBPreleaseref(b->batCacheid);
		return throwMessage("batcalc.unary", "no copy available ");
	}
	msg= CMDunaryAccum@1(ret,&bn->batCacheid,bid);
	BBPreleaseref(bn->batCacheid);
	BBPreleaseref(b->batCacheid);
	return msg;
}
@c
@:unary_impl(MIN,-)@
@:unary_impl(MINMIN,--)@
@:unary_impl(PLUSPLUS,++)@

@- Operator implementation
The structure of this code is copied from the arithmetic scheme.
@= baselineCode
batcalc_export str CMD_@1_@3(int *ret, int *l, int *r);
str CMD_@1_@3(int *ret, int *l, int *r)
{	BAT *bn, *b, *right;
	bit nilval = bit_nil;

	@:getBATdescriptor(l,b,"batcalc.@1")@
	@:getBATdescriptor(r,right,"batcalc.@1", BBPreleaseref(b->batCacheid);)@
	@:chkSize(b,right,batcalc.@1)@
	@:resultBAT(bit,"batcalc.@1")@

	if( b->htype == TYPE_void && right->htype== TYPE_void ){
		@3 *p,*q,*t;
		bit *o;
		o= (bit*) BUNtail(bn,BUNfirst(bn));
		p= (@3*) BUNtail(b,BUNfirst(b));
		q= (@3*) BUNtail(b,BUNlast(b));
		t= (@3*) BUNtail(right,BUNfirst(right));
		
		while(p<q){
			if( *p == @3_nil || *t == @3_nil)
				*o++ = bit_nil;
			else 
				*o++ = (bit)(*p @2 *t);
			p++;  t++;
		}
		(bn)->batBuns->free += BATcount(b)*sizeof(bit);
		BATsetcount(bn, BATcount(b));
	} else {
		BUN p,q,t,h;
		size_t xx= BUNsize(b);
		size_t yy= BUNsize(right);
		bit val;
		h = BUNhead(b,BUNfirst(b));
		p = BUNtail(b,BUNfirst(b));
		q = BUNtail(b,BUNlast(b));
		t = BUNtail(right,BUNfirst(right));
		
		while(p<q){
			if( *(@3*) p == @3_nil || *(@3*) t == @3_nil)
				BUNfastins(bn, h, (ptr) &nilval);
			else {
				val= *(@3*) p @2 *(@3*)t;
				BUNfastins(bn, h, &val);
			}
			p+= xx; h += yy; t+= yy; 
		}
	}

	bn->tsorted= 0;
	if (!(bn->batDirty&2)) bn = BATsetaccess(bn, BAT_READ); \
	BBPkeepref(*ret= bn->batCacheid);
	BBPreleaseref(b->batCacheid);
	BBPreleaseref(right->batCacheid);
	return MAL_SUCCEED;
}

batcalc_export str CMDaccum_@1_@3(int *ret, int *d, int *l, int *r);
str CMDaccum_@1_@3(int *ret, int *d, int *l, int *r)
{	BAT *bn, *b, *right;

	@:getBATdescriptor(l,b,"batcalc.@1")@
	@:getBATdescriptor(r,right,"batcalc.@1", BBPreleaseref(b->batCacheid);)@
	@:getBATdescriptor(d,bn,"batcalc.@1", BBPreleaseref(b->batCacheid);BBPreleaseref(right->batCacheid);)@
	@:chkSize(bn,b,batcalc.@1)@
	@:chkSize(bn,right,batcalc.@1)@

	if(bn->htype== TYPE_void &&
	   b->htype == TYPE_void && right->htype== TYPE_void ){
		@3 *p,*q,*t;
		bit *o;
		p= (@3*) BUNtail(b,BUNfirst(b));
		q= (@3*) BUNtail(b,BUNlast(b));
		t= (@3*) BUNtail(right,BUNfirst(right));
		o= (bit*) BUNtail(bn,BUNfirst(bn));
		
		while(p<q){
			if( *p == @3_nil || *t == @3_nil)
				*o++ = bit_nil;
			else 
				*o++ = (bit)( *p @2 *t);
			p++;  t++;
		}
		(bn)->batBuns->free += BATcount(b)*sizeof(bit);
		BATsetcount(bn, BATcount(b));
	} else {
		BUN o,p,q,t;
		size_t xx= BUNsize(b);
		size_t yy= BUNsize(right);
		size_t zz= BUNsize(bn);
		p = BUNtail(b,BUNfirst(b));
		q = BUNtail(b,BUNlast(b));
		t = BUNtail(right,BUNfirst(right));
		o = BUNtail(bn,BUNfirst(bn));
		
		while(p<q){
			if( *(@3*) p == @3_nil || *(@3*) t == @3_nil)
				*(bit *) o = bit_nil;
			else 
				*(bit *)o = (bit)( *(@3*) p @2 *(@3*)t);
			p+= xx; t+= yy; o += zz;
		}
	}

	bn->tsorted= 0;
	if (!(bn->batDirty&2)) bn = BATsetaccess(bn, BAT_READ); \
	BBPkeepref(*ret= bn->batCacheid);
	BBPreleaseref(b->batCacheid);
	BBPreleaseref(right->batCacheid);
	return MAL_SUCCEED;
}
@= baselineCstCode
batcalc_export str CMD_@1_@3_cst(int *ret, int *l, @3 *cst);
str CMD_@1_@3_cst(int *ret, int *l, @3 *cst)
{	BAT *bn, *b;
	bit nilval= bit_nil;

	@:getBATdescriptor(l,b,"batcalc.@1")@
	@:resultBAT(bit,"batcalc.@1")@

	if( b->htype == TYPE_void ){
		@3 *p,*q;
		bit *o;
		o= (bit*) BUNtail(bn,BUNfirst(bn));
		p= (@3*) BUNtail(b,BUNfirst(b));
		q= (@3*) BUNtail(b,BUNlast(b));
		
		while(p<q){
			if( *p == @3_nil || *cst == @3_nil)
				*o++ = bit_nil;
			else 
				*o++ = (bit)(*p @2 *cst);
			p++;  
		}
		(bn)->batBuns->free += BATcount(b)*sizeof(bit);
		BATsetcount(bn, BATcount(b));
	} else {
		BUN p,q,h;
		size_t xx= BUNsize(b);
		bit val;
		h = BUNhead(b,BUNfirst(b));
		p = BUNtail(b,BUNfirst(b));
		q = BUNtail(b,BUNlast(b));
		
		while(p<q){
			if( *(@3*) p == @3_nil || *cst == @3_nil)
				BUNfastins(bn, h, (ptr) &nilval);
			else {
				val= *(@3*) p @2 *cst;
				BUNfastins(bn, h, &val);
			}
			p+= xx; h+= xx;
		}
	}

	bn->tsorted= 0;
	BBPreleaseref(*ret= bn->batCacheid);
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}
batcalc_export str CMD_@4_cst_@3(int *ret, @3 *cst, int *l);
str CMD_@4_cst_@3(int *ret, @3 *cst, int *l){
	return CMD_@1_@3_cst(ret,l,cst);
}

batcalc_export str CMDaccum_@1_@3_cst(int *ret, int *r, int *l, @3 *cst);
str CMDaccum_@1_@3_cst(int *ret, int *r, int *l, @3 *cst)
{	BAT *bn, *b;
	@:getBATdescriptor(r,bn,"batcalc.@1")@
	@:getBATdescriptor(l,b,"batcalc.@1", BBPreleaseref(bn->batCacheid);)@
	@:chkSize(bn,b,batcalc.@1)@

	if(bn->htype== TYPE_void && b->htype == TYPE_void ){
		@3 *p,*q;
		bit *o;
		p= (@3*) BUNtail(b,BUNfirst(b));
		q= (@3*) BUNtail(b,BUNlast(b));
		o= (bit*) BUNtail(bn,BUNfirst(bn));
		
		while(p<q){
			if( *p == @3_nil || *cst == @3_nil)
				*o++ = bit_nil;
			else 
				*o++ = (bit)(*p @2 *cst);
			p++;  
		}
		(bn)->batBuns->free += BATcount(b)*sizeof(bit);
		BATsetcount(bn, BATcount(b));
	} else {
		BUN o,p,q;
		size_t xx= BUNsize(b);
		size_t zz= BUNsize(bn);
		p = BUNtail(b,BUNfirst(b));
		q = BUNtail(b,BUNlast(b));
		o = BUNtail(bn,BUNfirst(bn));
		
		while(p<q){
			if( *(@3*) p == @3_nil || *cst == @3_nil)
				*(bit*) o = bit_nil;
			else 
				*(bit*)o = (bit)(*(@3*) p @2 *cst);
			p+= xx; o += zz;
		}
	}

	bn->tsorted= 0;
	if (!(bn->batDirty&2)) bn = BATsetaccess(bn, BAT_READ); \
	BBPkeepref(*ret= bn->batCacheid);
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}
batcalc_export str CMDaccum_@4_cst_@3(int *ret, int *r, @3 *cst, int *l);
str CMDaccum_@4_cst_@3(int *ret, int *r, @3 *cst, int *l){
	return CMDaccum_@1_@3_cst(ret, r, l, cst);
}

@-
@= operatorImpl
	@:baselineCode(@1,@2,bit)@
	@:baselineCode(@1,@2,sht)@
	@:baselineCode(@1,@2,int)@
	@:baselineCode(@1,@2,lng)@
	@:baselineCode(@1,@2,oid)@
	@:baselineCode(@1,@2,flt)@
	@:baselineCode(@1,@2,dbl)@
@= operatorCstImpl
	@:baselineCstCode(@1,@2,bit,@3)@
	@:baselineCstCode(@1,@2,sht,@3)@
	@:baselineCstCode(@1,@2,int,@3)@
	@:baselineCstCode(@1,@2,lng,@3)@
	@:baselineCstCode(@1,@2,oid,@3)@
	@:baselineCstCode(@1,@2,flt,@3)@
	@:baselineCstCode(@1,@2,dbl,@3)@
@c
@:operatorImpl(GE,>=)@
@:operatorImpl(LE,<=)@
@:operatorImpl(GT,>)@
@:operatorImpl(LT,<)@
@:operatorImpl(EQ,==)@
@:operatorImpl(NEQ,!=)@
@:operatorImpl(AND,&&)@
@:operatorImpl(OR,||)@

@:operatorCstImpl(GE,>=,LT)@
@:operatorCstImpl(LT,<,GE)@
@:operatorCstImpl(GT,>,LE)@
@:operatorCstImpl(LE,>=,GT)@
@:operatorCstImpl(EQ,==,NEQ)@
@:operatorCstImpl(NEQ,!=,EQ)@
@:operatorCstImpl(AND,&&,AND)@
@:operatorCstImpl(OR,||,OR)@

batcalc_export str CMDbitbataccumNOT(int *ret, int *d, int *l);
str
CMDbitbataccumNOT(int *ret, int *d, int *l)
{
	BAT *bn, *left;

	@:getBATdescriptor(d,bn,"batcalc.not")@
	@:getBATdescriptor(l,left,"batcalc.not",BBPreleaseref(bn->batCacheid);)@
	@:chkSize(bn,left,batcalc.not)@

	if( bn->htype== TYPE_void && left->htype== TYPE_void){
		bit *p,*q,*o;
		o= (bit*) BUNtail(bn,BUNfirst(bn));
		p= (bit*) BUNtail(left,BUNfirst(left));
		q= (bit*) BUNtail(left,BUNlast(left));
		while(p<q){
			if( *p == bit_nil)
				*o++ = bit_nil;
			else 
				*o++ = ! *p;
			p++;  
		}
	} else {
		BUN p,q,t;
		size_t xx= BUNsize(bn);
		size_t yy= BUNsize(left);
		p = BUNtail(bn,BUNfirst(bn));
		q = BUNtail(bn,BUNlast(bn));
		t = BUNtail(left,BUNfirst(left));

		while(p<q){
			if( *(bit*) t == bit_nil)
				*(bit*) p = bit_nil;
			else 
				*(bit*) p = ! *(bit*)t;
			p += xx; t += yy;
		}
	}

	BBPkeepref(*ret= bn->batCacheid);
	BBPreleaseref(left->batCacheid);
	return MAL_SUCCEED;
}

batcalc_export str CMDbitbatNOT(int *ret, int *bid);
str
CMDbitbatNOT(int *ret, int *bid)
{
	BAT *bn, *b;
	bit nilval = bit_nil;

	@:getBATdescriptor(bid,b,"batcalc.not")@
	@:resultBAT(bit,"batcalc.not")@

	if(  b->htype == TYPE_void ){
		bit *p,*q,*o;
		o= (bit*) BUNtail(bn,BUNfirst(bn));
		p= (bit*) BUNtail(b,BUNfirst(b));
		q= (bit*) BUNtail(b,BUNlast(b));
		while(p<q){
			if( *p == bit_nil)
				*o++ = bit_nil;
			else 
				*o++ = ! *p;
			p++;  
		}
		(bn)->batBuns->free += BATcount(b)*sizeof(bit);
		BATsetcount(bn, BATcount(b));
	} else {
		BUN p,q;
		size_t xx;
		BATloopFast(b, p, q, xx) {
			bit t = *(bit*) BUNtail(b,p);

			if( t== bit_nil)
				BUNfastins(bn, BUNhead(b,p), (ptr) &nilval);
			else {
				t= !t;
				BUNfastins(bn, BUNhead(b,p), &t);
			}
		}
	}
	if (!(bn->batDirty&2)) bn = BATsetaccess(bn, BAT_READ);
	BBPkeepref(*ret= bn->batCacheid);
	BBPreleaseref(b->batCacheid);
	return MAL_SUCCEED;
}
@}
