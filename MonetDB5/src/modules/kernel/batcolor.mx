@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@f batcolor
@a M.L. Kersten
@* Color multiplexes
[TODO: property propagations and general testing]
The collection of routines provided here are map operations
for the color string primitives. 

In line with the batcalc module, we assume that
if two bat operands are provided that they are already
aligned on the head. Moreover, the head of the BATs
are limited to :void, which can be cheaply realized using
the GRPsplit operation.
@mal
module batcolor;
command str(b:bat[:void,:color]):bat[:void,:str]
address CLRbatStr
comment "Identity mapping for string bats";

command color(s:bat[:void,:str]):bat[:void,:color]
address CLRbatColor
comment "Converts string to color";

command rgb(r:bat[:void,:int], g:bat[:void,:int], b:bat[:void,:int]):bat[:void,:color] 
address CLRbatRgb
comment	"Converts an RGB triplets to a color atom";

command red(c:bat[:void,:color]) :bat[:void,:int] 
address CLRbatRed
comment	"Extracts red component from a color atom";

command green(c:bat[:void,:color]) :bat[:void,:int] 
address CLRbatGreen
comment	"Extracts green component from a color atom";

command blue (c:bat[:void,:color]) :bat[:void,:int] 
address CLRbatBlue
comment	"Extracts blue component from a color atom";

command hue(c:bat[:void,:color]) :bat[:void,:int] 
address CLRbatHueInt
comment	"Extracts hue component from a color atom";

command saturation(c:bat[:void,:color]) :bat[:void,:int]
address CLRbatSaturationInt
comment	"Extracts saturation component from a color atom";

command value(c:bat[:void,:color]) :bat[:void,:int] 
address CLRbatValueInt
comment	"Extracts value component from a color atom";

command hsv(h:bat[:void,:flt],s:bat[:void,:flt], v:bat[:void,:flt]) :bat[:void,:color] 
address CLRbatHsv
comment	"Converts an HSV triplets to a color atom";

command hue(c:bat[:void,:color]) :bat[:void,:flt] 
address CLRbatHue
comment	"Extracts hue component from a color atom";

command saturation(c:bat[:void,:color]) :bat[:void,:flt] 
address CLRbatSaturation
comment	"Extracts saturation component from a color atom";

command value(c:bat[:void,:color]) :bat[:void,:flt] 
address CLRbatValue
comment	"Extracts value component from a color atom";

#command ycc(y:bat[:void,:int],cr:bat[:void,:int],cb:bat[:void,:int]) :bat[:void,:color] 
#address CLRbatycc
#comment	"Converts an YCC triplets to a color atom";

command luminance (c:bat[:void,:color]) :bat[:void,:int] 
address CLRbatLuminance
comment	"Extracts Y(luminance) component from a color atom";

command cr(c:bat[:void,:color]) :bat[:void,:int] 
address CLRbatCr
comment	"Extracts Cr(red color) component from a color atom";

command cb(c:bat[:void,:color]) :bat[:void,:int] 
address CLRbatCb
comment	"Extracts Cb(blue color) component from a color atom";
@+ Implementation
@c
#include <gdk.h>
#include <string.h>
#include <mal.h>
#include <color.h>
#include "mal_exception.h"

#ifdef WIN32
#ifndef LIBBATCOLOR
#define batcolor_export extern __declspec(dllimport)
#else
#define batcolor_export extern __declspec(dllexport)
#endif
#else
#define batcolor_export extern
#endif

#ifdef HAVE_LANGINFO_H
#include <langinfo.h>
#endif
#ifdef HAVE_ICONV_H
#include <iconv.h>
#endif

#define prepareOperand(X,Y,Z) \
	if( (X= BATdescriptor(*Y)) == NULL ) \
		return throwMessage("batstr." Z, "Cannot access descriptor");
#define prepareOperand2(X,Y,A,B,Z) \
	if( (X= BATdescriptor(*Y)) == NULL ) \
		return throwMessage("batstr." Z, "Cannot access descriptor"); \
	if( (A= BATdescriptor(*B)) == NULL ){\
		BBPreleaseref(X->batCacheid); \
		return throwMessage("batstr."Z, "Cannot access descriptor"); \
	}
#define prepareResult(X,Y,T,Z) \
	X= BATnew(Y->htype,T,BATcount(Y)); \
	if( Y->htype== TYPE_void) \
		BATseqbase(X, Y->hseqbase); \
	if( X == NULL){ \
		BBPreleaseref(Y->batCacheid); \
		return throwMessage("batstr." Z, "no space available "); \
	} \
	X->hsorted=Y->hsorted; \
	X->tsorted=0; 
#define finalizeResult(X,Y,Z) \
	if (!((Y)->batDirty&2)) (Y) = BATsetaccess((Y), BAT_READ); \
	*X = (Y)->batCacheid; \
	BBPkeepref(*(X));\
	BBPreleaseref(Z->batCacheid);
@= BATwalk
batcolor_export str CLRbat@1(int *ret, int *l);
str CLRbat@1(int *ret, int *l)
{   BAT *bn, *b;
	BUN p,q;
	int xx;
	@3 *x;
	@4 y, *yp = &y;

	prepareOperand(b,l,"@1");
	prepareResult(bn,b,getTypeIndex("@4",-1,TYPE_int),"@1");

	BATloopFast(b, p, q, xx) {
		ptr h = BUNhead(b,p);
		x= (@3 *) BUNtail(b,p);
		if(x== 0 || *x == @3_nil)
			y = (@4)@4_nil;
		else @2(yp,x);
		bunfastins(bn, h, yp);
	}
	finalizeResult(ret,bn,b);
	return MAL_SUCCEED;
bunins_failed:
	BBPreleaseref(b->batCacheid);
	BBPreleaseref(bn->batCacheid);
	return throwMessage("batstr.==", "bunins failed");
}

@c
@:BATwalk(Color,CLRcolor,str,color)@
@:BATwalk(Str,CLRstr,color,str)@

@:BATwalk(Red,CLRred,color,int)@
@:BATwalk(Green,CLRgreen,color,int)@
@:BATwalk(Blue,CLRblue,color,int)@

@:BATwalk(Hue,CLRhue,color,flt)@
@:BATwalk(Saturation,CLRsaturation,color,flt)@
@:BATwalk(Value,CLRvalue,color,flt)@

@:BATwalk(HueInt,CLRhueInt,color,int)@
@:BATwalk(SaturationInt,CLRsaturationInt,color,int)@
@:BATwalk(ValueInt,CLRvalueInt,color,int)@

@:BATwalk(Luminance,CLRluminance,color,int)@
@:BATwalk(Cr,CLRcr,color,int)@
@:BATwalk(Cb,CLRcb,color,int)@

@-
A few triple versions.

@= BATwalk3
batcolor_export str CLRbat@1(int *ret, int *l, int *bid2, int *bid3);
str CLRbat@1(int *ret, int *l, int *bid2, int *bid3)
{   BAT *bn, *b2,*b3, *b;
	BUN p,q,p2,p3;
	int xx;
	@3 *x, *x2, *x3;
	@4 y, *yp = &y;

	prepareOperand(b,l,"@1");
	b2= BATdescriptor(*bid2);
	if(b2== NULL) 
		return throwMessage("batcolor.@1","can not access BAT");
	b3= BATdescriptor(*bid3);
	if(b3== NULL) 
		return throwMessage("batcolor.@1","can not access BAT");
	prepareResult(bn,b,getTypeIndex("@4",-1,TYPE_int),"@1");

	p2= BUNfirst(b2);
	p3= BUNfirst(b3);
	BATloopFast(b, p, q, xx) {
		ptr h = BUNhead(b,p);
		x= (@3 *) BUNtail(b,p);
		x2= (@3 *) BUNtail(b2,p);
		x3= (@3 *) BUNtail(b3,p);
		if(x== 0 || *x == @3_nil ||
		   x2== 0 || *x2 == @3_nil ||
		   x3== 0 || *x3 == @3_nil)
			y= @4_nil;
		else @2(yp,x,x2,x3);
		bunfastins(bn, h, yp);
		p2+= BUNsize(b2);
		p3+= BUNsize(b3);
	}
	finalizeResult(ret,bn,b);
	return MAL_SUCCEED;
bunins_failed:
	BBPreleaseref(b->batCacheid);
	BBPreleaseref(bn->batCacheid);
	return throwMessage("batstr.==", "bunins failed");
}
@c
@:BATwalk3(Hsv,CLRhsv,flt,color)@
@:BATwalk3(Rgb,CLRrgb,int,color)@
@:BATwalk3(ycc,CLRycc,int,color)@
