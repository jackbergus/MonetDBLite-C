@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@f logger
@t Transactions
@a N. J. Nes
@v 2.0
@T
@+ Logger
In the philosophy of MonetDB, transaction management overhead should only
be paid when necessary. Transaction management is for this purpose 
implemented as a separate module and applications are required to
obey the transaction policy, e.g. obtaining/releasing locks. 

This module is designed to support efficient logging of the SQL database.
Once loaded, the SQL compiler will insert the proper calls at
transaction commit to include the changes in the log file.

The logger uses a directory to store its log files. One master log file
stores information about the version of the logger and the transaction 
log files. This file is a simple ascii file with the following format: 
 	6DIGIT-VERSION\n[log file number \n]*]*
The transaction log files have a binary format, which stores fixed size 
logformat headers (flag,nr,bid), where the flag is the type of update logged.
The nr field indicates how many changes there were (in case of inserts/deletes).
The bid stores the bid identifier.

The key decision to be made by the user is the location of the log file.
Ideally, it should be stored in fail-safe environment, or at least
the log and databases should be on separate disk columns.

This file system may reside on the same hardware as the database server
and therefore the writes are done to the same disk, but could also 
reside on another system and then the changes are flushed through the network.  
The logger works under the assumption that it is called to safeguard
updates on the database when it has an exclusive lock on
the latest version. This lock should be guaranteed by the calling
transaction manager first.

Finding the updates applied to a BAT is relatively easy, because each
BAT contains a delta structure. On commit these changes are
written to the log file and the delta management is reset. Since each 
commit is written to the same log file, the beginning and end are 
marked by a log identifier.

A server restart should only (re)process blocks which are completely 
written to disk. A log replay therefore ends in a commit or abort on
the changed bats. Once all logs have been read, the changes to
the bats are made persistent, i.e. a bbp sub-commit is done.

@{
@* Module Definition
@mal
module logger;

atom logger = ptr;
end;
command create( debug:int, fn:str, dirname:str, dbname:str, version:ing ):logger 
address logger_create_wrap
comment "Create logger, check if recovery is needed. The fn variable names the frontend,this is needed to keep the catalog bat seperate";

command destroy( l:logger ) :void
address logger_destroy_wrap
comment "Free the resources used by the logger.";

@* Implementation Code 
@h
#ifndef _LOGGER_H_
#define _LOGGER_H_

#define LOG_OK 0
#define LOG_ERR (-1)

#include "bat5.h"
#include "stream.h"

#ifdef WIN32
#ifndef LIBLOGGER
#define logger_export extern __declspec(dllimport)
#else
#define logger_export extern __declspec(dllexport)
#endif
#else
#define logger_export extern
#endif

typedef struct logaction {
	int type;   /* type of change */
	int nr;
	int ht;     /* vid(-1),void etc */
	int tt;
	lng id;
	char *name; /* optional */
	BAT  *b;    /* temporary bat with changes */
} logaction;

/* during the recover process a number of transactions could be active */
typedef struct trans {
	int tid;  /* transaction id */
	int sz;	  /* sz of the changes array */
	int nr;	  /* nr of changes */

	logaction *changes; 

	struct trans *tr;
} trans;

typedef struct logger {
	int debug;
	int changes;
	int version;
	lng id;
	int tid;
	char *fn;
	char *dir;
	stream *log;
	/* Store log_bids (int) to circumvent trouble with reference counting */
	BAT *catalog;	/* int, str */
	BAT *seqs; 	/* int, lng */
	BAT *snapshots;	/* int, int the bid and tid of snapshot bat */
} logger;


#define BATSIZE 0

typedef int log_bid;

@+ Sequence numbers
The logger also keeps sequence numbers. A sequence needs to store each
requested (block) of sequence numbers. This is done using the log_sequence
function. The logger_sequence function can be used to return the
last logged sequence number. Sequences identifiers should be unique, and
2 are already used. The first LOG_SID is used internally for the log files
sequence. The second OBJ_SID is for frontend objects, for example the sql
objects have a global sequence counter such that each table, trigger, sequence
etc. has a unique number. 
@h
/* the sequence identifier for the sequence of log files */
#define LOG_SID	0
/* the sequence identifier for frontend objects */
#define OBJ_SID	1

logger_export logger *logger_create(int debug, char *fn, char *logdir, char *dbname, int version);
logger_export void logger_destroy(logger *logger);
logger_export int logger_exit(logger *logger);
logger_export int logger_restart(logger *logger);
logger_export int logger_cleanup(logger *logger);
logger_export int logger_changes(logger *logger);
logger_export int logger_sequence(logger *logger, int seq, lng *id);

/* todo pass the transaction id */
logger_export int log_bat(logger *logger, BAT *b, char *n);
logger_export int log_bat_clear(logger *logger, char *n);
logger_export int log_bat_persists(logger *logger, BAT *b, char *n);
logger_export int log_bat_transient(logger *logger, char *n);

logger_export int log_tstart(logger *logger);  /* TODO return transaction id */
logger_export int log_tend(logger *logger);
logger_export int log_abort(logger *logger);

logger_export int log_sequence(logger *logger, int seq, lng id);

logger_export log_bid logger_add_bat(logger *logger, BAT *b, char *name);
logger_export void logger_del_bat(logger *logger, log_bid bid);
logger_export log_bid logger_find_bat(logger *logger, char *name);

#endif /*_LOGGER_H_*/
@c
#include "logger.h"
#include "mal.h"
#include "mal_exception.h"

@-
The log record encoding is geared at reduced storage space, but
at the expense of readability. A user can not easily inspect the
log a posteriori to check what has happened.

@c
#define LOG_START	1
#define LOG_END		2
#define LOG_INSERT	3
#define LOG_DELETE	4
#define LOG_UPDATE	5
#define LOG_CREATE	6
#define LOG_DESTROY	7
#define LOG_USE		8
#define LOG_CLEAR	9
#define LOG_SEQ		10

typedef struct logformat_t {
	char flag;
	int tid;
	int nr;
} logformat;

#define LOGFILE "log"

static int bm_commit(logger *logger);
static void tr_grow(trans *tr);

static void
logbat_destroy(BAT *b)
{
	if (b)
		BBPunfix(b->batCacheid);
}

static BAT *
logbat_new(int ht, int tt, size_t size)
{
	BAT *nb = BATnew(ht, tt, size);

	if (ht == TYPE_void)
		BATseqbase(nb, 0);
	nb->batDirty |= 2;
	return nb;
}

static int
log_read_format(logger *l, logformat *data)
{
	int res = 1;

	if (stream_read(l->log, &data->flag, 1, 1) != 1)
		return 0;
	res = stream_readInt(l->log, &data->nr);
	if (res)
		res = stream_readInt(l->log, &data->tid);
	return res;
}

static int
log_write_format(logger *l, logformat *data)
{
	if (stream_write(l->log, &data->flag, 1, 1) != 1 || !stream_writeInt(l->log, data->nr) || !stream_writeInt(l->log, data->tid))
		return LOG_ERR;
	return LOG_OK;
}

static char *
log_read_string(logger *l)
{
	int len;
	ssize_t nr;
	char *buf;

	if (!stream_readInt(l->log, &len))
		return NULL;
	if (len == 0)
		return NULL;
	buf = (char*)GDKmalloc(len);

	if ((nr = stream_read(l->log, buf, 1, len)) != (ssize_t) len) {
		buf[len-1] = 0;
		printf("!ERROR: couldn't read name (%s) " SSZFMT "\n", buf, nr);
		GDKfree(buf);
		return NULL;
	}
	buf[len-1] = 0;
	return buf;
}

static int
log_write_string(logger *l, char *n)
{
	int len = (int) strlen(n) + 1;	/* log including EOS */

	assert(len > 1);
	if (!stream_writeInt(l->log, len) ||
	    stream_write(l->log, n, 1, len) != (ssize_t) len)
		return LOG_ERR;
	return LOG_OK;
}

static void
log_read_clear(logger *logger, trans *tr, char *name)
{
	if (logger->debug & 1)
		fprintf(stderr, "logger found log_read_clear %s\n", name);

	tr_grow(tr);
	tr->changes[tr->nr].type = LOG_CLEAR;
	tr->changes[tr->nr].name = GDKstrdup(name);
	tr->nr++;
}

static void
la_bat_clear(logger *logger, logaction *la)
{
	log_bid bid = logger_find_bat(logger, la->name);
	BAT *b;

	/* do we need to skip these old updates */
	if (BATcount(logger->snapshots)) {
		BUN p = BUNfnd(logger->snapshots, &bid);
		if (p) {
			int tid = *(int*)BUNtloc(logger->snapshots, p);

			if (logger->tid <= tid) 
				return ;
		}
	}

 	b = BATdescriptor(bid);
	if (b) {
		BATclear(b);
		logbat_destroy(b);
	}
}

static int
log_read_seq(logger *logger, logformat *l)
{
	int seq = l->nr;
	lng id;

	if (!stream_readLng(logger->log, &id))
		return LOG_ERR;

	if (BUNfnd(logger->seqs, &seq)) {
		BUNdelHead(logger->seqs, &seq, FALSE);
	}
	BUNins(logger->seqs, &seq, &id, FALSE);
	return LOG_OK;
}

static int
log_read_updates(logger *logger, trans *tr, logformat *l, char *name)
{
	log_bid bid = logger_find_bat(logger, name);
	BAT *b = BATdescriptor(bid);
	int res = LOG_OK;
	int ht = -1, tt = -1, hseq = 0, tseq = 0;

	if (logger->debug & 1)
		fprintf(stderr, "logger found log_read_updates %s %s %d\n", name, l->flag == LOG_INSERT ? "insert" : l->flag == LOG_DELETE ? "delete" : "update", l->nr);

	if (b) { 
		ht = b->htype;
		if (ht == TYPE_void && b->hseqbase != oid_nil)
			hseq = 1;
		tt = b->ttype;
		if (tt == TYPE_void && b->tseqbase != oid_nil)
			tseq = 1;
	} else { /* search trans action for create statement */
		int i;
		for (i=0; i<tr->nr; i++) {
			if (tr->changes[i].type == LOG_CREATE &&
			    strcmp(tr->changes[i].name, name) == 0) {
				ht = tr->changes[i].ht;
				if (ht < 0) {
					hseq = 1;
					ht = TYPE_void;
				}
				tt = tr->changes[i].tt;
				if (tt < 0) {
					tseq = 1;
					tt = TYPE_void;
				}
				break;
			}
		}
	}
	if (ht>=0 && tt>=0) {
		BAT *r;
		void *(*rt) (ptr, stream *, size_t) = BATatoms[tt].atomRead;
		void *tv = ATOMnil(tt);

		r = BATnew(ht, tt, l->nr);

		if (hseq)
			BATseqbase(r, 0);
		if (tseq)
			BATseqbase(BATmirror(r), 0);

		if (ht == TYPE_void && l->flag == LOG_INSERT) { 
			for (; l->nr > 0; l->nr--) {
				void *t = rt(tv, logger->log, 1);

				if (!t) {
					res = LOG_ERR;
					break;
				}
				if (l->flag == LOG_INSERT)
					BUNappend(r, t, TRUE);
				if (t != tv)
					GDKfree(t);
			}
		} else {
			void *(*rh) (ptr, stream *, size_t) = ht == TYPE_void ? BATatoms[TYPE_oid].atomRead : BATatoms[ht].atomRead;
			void *hv = ATOMnil(ht);

			for (; l->nr > 0; l->nr--) {
				void *h = rh(hv, logger->log, 1);
				void *t = rt(tv, logger->log, 1);

				if (!h && !t) {
					res = LOG_ERR;
					break;
				}
				BUNins(r, h, t, TRUE);
				if (h != hv)
					GDKfree(h);
				if (t != tv)
					GDKfree(t);
			}
			GDKfree(hv);
		}
		GDKfree(tv);
		logbat_destroy(b);
		
		tr_grow(tr);
		tr->changes[tr->nr].type = l->flag;
		tr->changes[tr->nr].nr = l->nr;
		tr->changes[tr->nr].ht = ht;
		tr->changes[tr->nr].tt = tt;
		tr->changes[tr->nr].name = GDKstrdup(name);
		tr->changes[tr->nr].b = r;
		tr->nr++;
	} else { /* bat missing ERROR or ignore ? currently error. */
		res = LOG_ERR;
	}
	return res;
}

static void
la_bat_updates(logger *logger, logaction *la)
{
	log_bid bid = logger_find_bat(logger, la->name);
	BAT *b = BATdescriptor(bid);

	/* do we need to skip these old updates */
	if (BATcount(logger->snapshots)) {
		BUN p = BUNfnd(logger->snapshots, &bid);
		if (p) {
			int tid = *(int*)BUNtloc(logger->snapshots, p);

			if (logger->tid <= tid) 
				return ;
		}
	}

	assert(b);
	if (b) {
		if (b->htype == TYPE_void && la->type == LOG_INSERT) { 
			BATappend(b, la->b, TRUE);
		} else {
			if (la->type == LOG_INSERT)
				BATins(b, la->b, TRUE);
			else if (la->type == LOG_DELETE)
				BATdel(b, la->b, TRUE);
			else if (la->type == LOG_UPDATE) { 
				BUN p, q;
				BATloop(la->b, p, q) {
					ptr h = BUNhead(la->b, p);
					ptr t = BUNtail(la->b, p);
					if (BUNfnd(b, h) == NULL) {
						/* if value doesn't exist, insert it
					   	   if b void headed, maintain that by inserting nils */
						if (b->htype == TYPE_void) {
							if (b->batCount == 0 && * (oid *) h != oid_nil)
								b->hseqbase = * (oid *) h;
							if (b->hseqbase != oid_nil && * (oid *) h != oid_nil) {
								void *tv = ATOMnilptr(b->ttype);
								while (b->hseqbase + b->batCount < * (oid *) h)
									BUNappend(b, tv, TRUE);
							}
							BUNappend(b, t, TRUE);
						} else {
							BUNins(b, h, t, TRUE);
						}
					} else {
						BUNreplace(b, h, t, TRUE);
					}
				}
			}
		}
		logbat_destroy(b);
	}
}

static void
log_read_destroy(logger *logger, trans *tr, char *name)
{
	(void)logger;
	tr_grow(tr);
	tr->changes[tr->nr].type = LOG_DESTROY;
	tr->changes[tr->nr].name = GDKstrdup(name);
	tr->nr++;
}

static void
la_bat_destroy(logger *logger, logaction *la)
{
	log_bid bid = logger_find_bat(logger, la->name);

	if (bid)
		logger_del_bat(logger, bid);
}

static int
log_read_create(logger *logger, trans *tr, char *name)
{
	char *buf = log_read_string(logger);

	if (logger->debug & 1)
		fprintf(stderr, "log_read_create %s\n", name);

	if (!buf) {
		return LOG_ERR;
	} else {
		int ht, tt;
		char *ha = buf, *ta = strchr(buf, ',');

		if (!ta) 
			return LOG_ERR;
		*ta = 0;
		ta++;		/* skip over , */
		if (strcmp(ha, "vid") == 0) {
			ht = -1;
		} else {
			ht = ATOMindex(ha);
		}
		if (strcmp(ta, "vid") == 0) {
			tt = -1;
		} else {
			tt = ATOMindex(ta);
		}
		tr_grow(tr);
		tr->changes[tr->nr].type = LOG_CREATE;
		tr->changes[tr->nr].ht = ht;
		tr->changes[tr->nr].tt = tt;
		tr->changes[tr->nr].name = GDKstrdup(name);
		tr->changes[tr->nr].b = NULL;
		tr->nr++;
	}
	if (buf)
		GDKfree(buf);
	return LOG_OK;
}

static void
la_bat_create(logger *logger, logaction *la)
{
	int ht = (la->ht<0)?TYPE_void:la->ht;
	int tt = (la->tt<0)?TYPE_void:la->tt;
	BAT *b = BATnew(ht, tt, BATSIZE);

	if (la->ht<0)
		BATseqbase(b, 0);
	if (la->tt<0)
		BATseqbase(b=BATmirror(b), 0);

	logger_add_bat(logger, b, la->name);
	logbat_destroy(b);
}

static void
log_read_use(logger *logger, trans *tr, logformat *l, char *name)
{
	(void)logger;
	tr_grow(tr);
	tr->changes[tr->nr].type = LOG_USE;
	tr->changes[tr->nr].nr = l->nr;
	tr->changes[tr->nr].name = GDKstrdup(name);
	tr->changes[tr->nr].b = NULL;
	tr->nr++;
}

static void
la_bat_use(logger *logger, logaction *la )
{
	log_bid bid = la->nr;
	BAT *b = BATdescriptor(bid);
	
	if (!b) {
		GDKerror("logger could not use bat (" OIDFMT ") for %s\n", 
			bid, la->name);
		return ;
	}
	logger_add_bat(logger, b, la->name);
	logbat_destroy(b);
}


#define TR_SIZE 	1024

static trans*
tr_create(trans *tr, int tid)
{
	trans *ntr = (trans*)GDKmalloc(sizeof(trans));
	ntr->tid = tid;
	ntr->sz = TR_SIZE;
	ntr->nr = 0;
	ntr->changes = (logaction*)GDKmalloc(sizeof(logaction)*TR_SIZE);
	ntr->tr = tr;
	return ntr;
}

static trans *
tr_find(trans *tr, int tid)
/* finds the tid and reorders the chain list, puts trans with tid first */
{
	trans *t = tr, *p = NULL;

	while(t && t->tid != tid) {
		p = t;
		t = t->tr;
	}
	if (!t)
		return NULL; /* BAD missing transaction */
	if (t == tr) 
		return tr;
	if (t->tr)  /* get this tid out of the list */
		p->tr = t->tr; 
	t->tr = tr; /* and move it to the front */ 
	return t;
}

static void
la_apply( logger *logger, logaction *c )
{
	switch(c->type) {
	case LOG_INSERT:
	case LOG_DELETE:
	case LOG_UPDATE:
		return la_bat_updates(logger, c);
	case LOG_CREATE:
		return la_bat_create(logger, c);
	case LOG_USE:
		return la_bat_use(logger, c);
	case LOG_DESTROY:
		return la_bat_destroy(logger, c);
	case LOG_CLEAR:
		return la_bat_clear(logger, c);
	}
}

static void
la_destroy( logaction *c ) 
{
	if (c->name)
		GDKfree(c->name);
	if (c->b)
		logbat_destroy(c->b);
}

static void
tr_grow(trans *tr)
{
	if (tr->nr == tr->sz) {
		tr->sz <<= 1;
		tr->changes = (logaction*)
			GDKrealloc(tr->changes, tr->sz * sizeof(logaction));
	}
	/* cleanup the next */
	tr->changes[tr->nr].name = NULL;
	tr->changes[tr->nr].b = NULL;
}

static trans *
tr_destroy(trans *tr)
{
	trans *r = tr->tr;
	GDKfree(tr->changes);
	GDKfree(tr);
	return r;
}

static trans *
tr_commit(logger *logger, trans *tr)
{
	int i;
	if (logger->debug & 1)
		printf("tr_commit\n");

	for(i=0; i<tr->nr; i++) {
		la_apply(logger, &tr->changes[i]);
		la_destroy(&tr->changes[i]);
	}
	bm_commit(logger);
	return tr_destroy(tr);
}

static trans *
tr_abort(logger *logger, trans *tr)
{
	int i;
	if (logger->debug & 1)
		printf("tr_abort\n");

	for(i=0; i<tr->nr; i++) 
		la_destroy(&tr->changes[i]);
	return tr_destroy(tr);
}

static int
logger_open(logger *logger)
{
	char filename[BUFSIZ];

	snprintf(filename, BUFSIZ, "%s%s." LLFMT, logger->dir, LOGFILE, logger->id);
	logger->log = open_wstream(filename);
	if (stream_errnr(logger->log))
		 return LOG_ERR;

	return LOG_OK;
}

static void
logger_close(logger *logger)
{
	stream *log = logger->log;

	if (log) {
		stream_close(log);
		stream_destroy(log);
	}
	logger->log = NULL;
}

static int
logger_readlog(logger *logger, char *filename)
{
	trans *tr = NULL;
	logformat l;
	int err = 0;

	logger->log = open_rstream(filename);

	/* if the file doesn't exist, there is nothing to be readback */
	if (!logger->log || stream_errnr(logger->log)) {
		if (logger->log)
			stream_destroy(logger->log);

		return 0;
	}
	while (!err && log_read_format(logger, &l)) {
		char *name = NULL;

		if (l.flag != LOG_START && l.flag != LOG_END && 
		    l.flag != LOG_SEQ) {
			name = log_read_string(logger);

			if (!name) {
				err = -1;
				break;
			}
		}
		/* find proper transaction record */
		if (l.flag != LOG_START)
			tr = tr_find(tr, l.tid);
		switch (l.flag) {
		case LOG_START:
			if (l.nr > logger->tid)
				logger->tid = l.nr;
			tr = tr_create(tr, l.nr);
			if (logger->debug & 1)
				fprintf(stderr, "logger tstart %d\n", 
					tr->tid);
			break;
		case LOG_END:
			if (l.tid != l.nr) /* abort record */
				tr = tr_abort(logger, tr);
			else
				tr = tr_commit(logger, tr);
			break;
		case LOG_SEQ:
			err = (log_read_seq(logger, &l) != LOG_OK);
			break;
		case LOG_INSERT:
		case LOG_DELETE:
		case LOG_UPDATE:
			err = (log_read_updates(logger, tr, &l, name) !=LOG_OK);
			break;
		case LOG_CREATE:
			err = (log_read_create(logger, tr, name) != LOG_OK);
			break;
		case LOG_USE:
			log_read_use(logger, tr, &l, name);
			break;
		case LOG_DESTROY:
			log_read_destroy(logger, tr, name);
			break;
		case LOG_CLEAR:
			log_read_clear(logger, tr, name);
			break;
		default:
			err = -2;
		}
		if (name)
			GDKfree(name);
		logger->changes++;
	}
	logger_close(logger);

	/* remaining transactions are not committed, ie abort */
	while(tr)
		tr = tr_abort(logger, tr);
	return 0;
}

@-
The log files are incrementally numbered. They are processed in the
same sequence.
@c
static int
logger_readlogs(logger *logger, FILE *fp, char *filename)
{
	int res = 0;
	char id[BUFSIZ];

	if (logger->debug & 1)
		fprintf(stderr, "logger_readlogs %s\n", filename);

	while (fgets(id, BUFSIZ, fp) != NULL) {
		char buf[BUFSIZ];
		lng lid = strtoll(id, NULL, 10);
		
		if (lid >= logger->id) {
			logger->id = lid;
			snprintf(buf, BUFSIZ, "%s." LLFMT, filename, logger->id);

			if ((res = logger_readlog(logger, buf)) != 0) {
				/* we cannot distinguish errors from 
				   incomplete transactions (even if we 
				   would log aborts in the logs). 
				   So we simply abort and move to the next 
				   log file */
				(void)res;
			}
		}
	}
	return res;
}

static int
logger_commit(logger *logger)
{
	int id = LOG_SID;
	if (logger->debug & 1)
		fprintf(stderr, "logger_commit\n");

	BUNdelHead(logger->seqs, &id, FALSE);
	BUNins(logger->seqs, &id, &logger->id, FALSE);

	/* cleanup old snapshots */
	if (BATcount(logger->snapshots)) {
		BATclear(logger->snapshots);
		BATcommit(logger->snapshots);
	}
	return bm_commit(logger);
}

static int
check_version(logger *logger, FILE *fp)
{
	int version = 0;

	if (fscanf(fp, "%6d", &version) != 1 || version != logger->version) {
		GDKerror("Incompatible database version %06d, "
			 "this server supports version %06d\n"
			 "Please move away %s and its corresponding dbfarm.",
			 version, logger->version, logger->dir);

		return -1;
	}
	fgetc(fp);		/* skip \n */
	fgetc(fp);		/* skip \n */
	return 0;
}

static
int bm_subcommit( BAT * list, BAT * catalog ) 
{
	BUN p,q;
	BAT *n = logbat_new(TYPE_void, TYPE_str, BATcount(list)*2);
	BAT *b = list;
	int res;

	BATseqbase(n,0);
	/* first loop over deleted then over current and new */
	for (p = b->batDeleted; p < b->batFirst; p = BUNnext(b, p)) {
		bat col = *(log_bid*)BUNhead(b,p);
		str name = BBPname(col);
		BUNappend(n, name, FALSE);
	}
	BATloop(b, p, q) {
		bat col = *(log_bid*)BUNhead(b,p);
		str name = BBPname(col);
		BUNappend(n, name, FALSE);
	}
	BUNappend(n, BBPname(catalog->batCacheid), FALSE);
	/* now commit catalog, so it's also up to date on disk */
	BATcommit(catalog); 
	res = TMsubcommit(n);
	BBPreclaim(n);
	return res;
}

static logger *
logger_new(int debug, char *fn, char *logdir, char *dbname, int version)
{
	int id = LOG_SID;
	logger *logger = (struct logger*)GDKmalloc(sizeof(struct logger));
	FILE *fp;
	char filename[BUFSIZ];
	char bak[BUFSIZ];
	log_bid seqs = 0;
	bat catalog;

	snprintf(bak, BUFSIZ, "%s_catalog", fn);
 	catalog = BBPindex(bak);

	logger->debug = debug;
	logger->changes = 0;
	logger->version = version;
	logger->id = 1;
	logger->tid = 0;

	snprintf(filename, BUFSIZ, "%s%c%s%c", logdir, DIR_SEP, dbname, DIR_SEP);
	logger->fn = GDKstrdup(fn);
	logger->dir = GDKstrdup(filename);
	logger->log = NULL;
	logger->catalog = NULL;

	if (catalog == 0) {
		log_bid bid = 0;
		logger->catalog = logbat_new(TYPE_int, TYPE_str, BATSIZE);
		if (debug)
			printf("create %s catalog\n", fn);

		bid = logger->catalog->batCacheid;

		/* Make persistent */
		BBPincref(bid, TRUE);
		BATmode(logger->catalog, PERSISTENT);
		BBPrename(logger->catalog->batCacheid, bak);

		if (bm_subcommit(logger->catalog, logger->catalog) != 0)  
			return NULL;
	} else { /* find the persistent catalog. As non persistent bats
		    require a logical reference we also add a logical 
		    reference for the persistent bats */
		BUN p, q;
		BAT *b = BATdescriptor(catalog);

		logger->catalog = b;
		BATloop(b, p, q) {
			bat bid = *(log_bid *) BUNhead(b, p);

			BBPincref(bid, TRUE);
		}
	}
	seqs = logger_find_bat(logger, "seqs");
	if (seqs == 0) {
		logger->seqs = logbat_new(TYPE_int, TYPE_lng, 1);
		BATmode(logger->seqs, PERSISTENT);
	        snprintf(bak, BUFSIZ, "%s_seqs", fn);
		BBPrename(logger->seqs->batCacheid, bak);
		
		logger_add_bat(logger, logger->seqs, "seqs");
		BUNins(logger->seqs, &id, &logger->id, FALSE);

		logger->snapshots = logbat_new(TYPE_int, TYPE_int, 1);
		BATmode(logger->snapshots, PERSISTENT);
	        snprintf(bak, BUFSIZ, "%s_snapshots", fn);
		BBPrename(logger->snapshots->batCacheid, bak);
		logger_add_bat(logger, logger->snapshots, "snapshots");
		bm_subcommit(logger->catalog, logger->catalog);
	} else {
		bat snapshots = logger_find_bat(logger, "snapshots");

		logger->seqs = BATdescriptor(seqs);
		if (BATcount(logger->seqs)) {
			logger->id = *(lng*)BUNtail(logger->seqs, BUNfnd(logger->seqs, &id));
		} else {
			BUNins(logger->seqs, &id, &logger->id, FALSE);
		}
		logger->snapshots = BATdescriptor(snapshots);
	}

	snprintf(filename, BUFSIZ, "%s%s", logger->dir, LOGFILE);

	snprintf(bak, BUFSIZ, "%s.bak", filename);

	if ((fp = fopen(filename, "r")) != NULL) {
		if (check_version(logger, fp))
			 return NULL;

		logger->changes++;
		logger_readlogs(logger, fp, filename);
	} else if ((fp = fopen(bak, "r")) != NULL) {
		fclose(fp);
		GDKmove(logger->dir, LOGFILE, "bak", logger->dir, LOGFILE, NULL);

		if ((fp = fopen(filename, "r")) != NULL) {
			if (check_version(logger, fp))
				 return NULL;

			logger->changes++;
			logger_readlogs(logger, fp, filename);
		}
	} else if ((fp = fopen(filename, "w")) == NULL) {
		if (!GDKcreatedir(filename)) {
			GDKerror("logger could not create log directory %s\n", logger->dir);

			return NULL;
		} else if ((fp = fopen(filename, "w")) == NULL) {
			GDKerror("logger could not create file %s\n", filename);
			return NULL;
		}
		fprintf(fp, "%06d\n\n", logger->version);
		logger->id ++;
		fprintf(fp, LLFMT "\n", logger->id);
	} else {
		fprintf(fp, "%06d\n\n", logger->version);
		logger->id ++;
		fprintf(fp, LLFMT "\n", logger->id);
	}
	fclose(fp);
	return logger;
}

logger *
logger_create(int debug, char *fn, char *logdir, char *dbname, int version)
{
	logger *logger = logger_new(debug, fn, logdir, dbname, version);
	if (!logger)
		return NULL;
	if (logger_open(logger) == LOG_ERR) {
		logger_destroy(logger);

		return NULL;
	}
	if (logger->changes && 
	    (logger_restart(logger) != LOG_OK ||
	    logger_cleanup(logger) != LOG_OK)) {
		logger_destroy(logger);

		return NULL;
	}
	return logger;
}

void
logger_destroy(logger *logger)
{
	if (logger->catalog) {
		BUN p, q;
		BAT *b = logger->catalog;

		logger_cleanup(logger);

		/* destroy the deleted */
/* would be an error ....
		for (p = b->batDeleted; p < b->batFirst; p = BUNnext(b, p)) {
			bat bid = *(log_bid *) BUNhead(b, p);

			BBPdecref(bid, TRUE);
		}
*/
		/* free resources */
		BATloop(b, p, q) {
			bat bid = *(log_bid *) BUNhead(b, p);

			BBPdecref(bid, TRUE);
		}

		BBPdecref(logger->catalog->batCacheid, TRUE);
		logbat_destroy(logger->catalog);
	}
	GDKfree(logger->dir);
	logger_close(logger);
	GDKfree(logger);
}

int
logger_exit(logger *logger)
{
	FILE *fp;
	char filename[BUFSIZ];

	logger_close(logger);
	if (GDKmove(logger->dir, LOGFILE, NULL, logger->dir, LOGFILE, "bak") < 0) {
		return LOG_ERR;
	}

	snprintf(filename, BUFSIZ, "%s%s", logger->dir, LOGFILE);
	if ((fp = fopen(filename, "w")) != NULL) {
		char ext[BUFSIZ];

		fprintf(fp, "%06d\n\n", logger->version);
		logger->id ++;

		if (logger_commit(logger) != LOG_OK)
			return LOG_ERR;

		fprintf(fp, LLFMT "\n", logger->id);
		fclose(fp);

		/* atomic action, switch to new log, keep old for later 
		   cleanup actions 
		 */
		snprintf(ext, BUFSIZ, "bak-" LLFMT, logger->id);
		if (GDKmove(logger->dir, LOGFILE, "bak", logger->dir, LOGFILE, ext) < 0)
			 return LOG_ERR;
	} else {
		GDKerror("logger could not open %s\n", filename);
		return LOG_ERR;
	}
	return LOG_OK;
}

int
logger_restart(logger *logger)
{
	int res = 0;

	if ((res = logger_exit(logger)) == LOG_OK)
		res = logger_open(logger);

	return res;
}

int
logger_cleanup(logger *logger)
{
	char buf[BUFSIZ];
	char id[BUFSIZ];
	FILE *fp = NULL;

	snprintf(buf, BUFSIZ, "%s%s.bak-" LLFMT, logger->dir, LOGFILE, logger->id);
	if (logger->debug & 1)
		fprintf(stderr, "logger_cleanup %s\n", buf);

	if ((fp = fopen(buf, "r")) == NULL)
		return LOG_ERR;

	/* skip catalog */
	while (fgets(id, BUFSIZ, fp) != NULL && id[0] != '\n')
		;

	while (fgets(id, BUFSIZ, fp) != NULL) {
		char *e = strchr(id, '\n');

		if (e)
			*e = 0;
		GDKunlink(logger->dir, LOGFILE, id);
	}
	fclose(fp);
	snprintf(buf, BUFSIZ, "bak-" LLFMT, logger->id);
	GDKunlink(logger->dir, LOGFILE, buf);

	return LOG_OK;
}

int
logger_changes(logger *logger)
{
	return logger->changes;
}

int
logger_sequence(logger *logger, int seq, lng *id)
{
	ptr p = BUNfnd(logger->seqs, &seq);

	if (p) {
		*id = *(lng*)BUNtail(logger->seqs, p);
		return 1;
	}
	return 0;
}

@-
Changes made to the BAT descriptor should be stored in the log files.
Actually, we need to save the descriptor file, perhaps we should simply
introduce a versioning scheme. 
@c
int
log_bat_persists(logger *logger, BAT *b, char *name)
{
	char *ha, *ta;
	int len;
	char buf[BUFSIZ];
	logformat l;
	int havevoid = 0;
	int flag = (b->batPersistence == PERSISTENT)?LOG_USE:LOG_CREATE;

	l.nr = 0;
	if (flag == LOG_USE)
		l.nr = b->batCacheid;
	l.flag = flag;
	l.tid = logger->tid;
	logger->changes++;
	if (log_write_format(logger, &l) == LOG_ERR || log_write_string(logger, name) == LOG_ERR)
		return LOG_ERR;

	if (flag == LOG_USE) {
		if (BUNfnd(logger->snapshots, &b->batCacheid)) {
			BUNdelHead(logger->snapshots, &b->batCacheid, FALSE);
		} else {
			BBPincref(b->batCacheid, TRUE);
		}
		BUNins(logger->snapshots, &b->batCacheid, &logger->tid, FALSE);
		return LOG_OK;
	}

	ha = ATOMname(b->htype);
	if (b->htype == TYPE_void && BAThdense(b)) {
		ha = "vid";
		havevoid = 1;
	}
	ta = ATOMname(b->ttype);
	if (!havevoid && b->ttype == TYPE_void && BATtdense(b)) {
		ta = "vid";
	}
	len = snprintf(buf, BUFSIZ, "%s,%s", ha, ta);
	len++;			/* include EOS */
	if (!stream_writeInt(logger->log, len) || stream_write(logger->log, buf, 1, len) != (ssize_t) len)
		 return LOG_ERR;

	if (logger->debug & 1)
		fprintf(stderr, "Logged new bat [%s,%s] %s " SZFMT "\n", ha, ta, name,
			BATcount(b));
	return log_bat(logger, b, name);
}

int
log_bat_transient(logger *logger, char *name)
{
	log_bid bid = logger_find_bat(logger, name);
	logformat l;

	l.flag = LOG_DESTROY;
	l.tid = logger->tid;
	l.nr = 0;
	logger->changes++;

	/* if this is a snapshot bat, we need to skip all changes */
	if (BUNfnd(logger->snapshots, &bid)) {
		BUNdelHead(logger->snapshots, &bid, FALSE);
		BUNins(logger->snapshots, &bid, &logger->tid, FALSE);
	}

	if (log_write_format(logger, &l) == LOG_ERR || log_write_string(logger, name) == LOG_ERR)
		return LOG_ERR;

	if (logger->debug & 1)
		fprintf(stderr, "Logged destroyed bat %s\n", name);
	return LOG_OK;
}

int
log_delta(logger *logger, BAT *b, char *name)
{
	int ok = GDK_SUCCEED;
	logformat l;
	BUN p;

	if (logger->debug & 128) {
		/* logging is switched off */
		return LOG_OK;
	}

	l.tid = logger->tid;
	l.nr = (int)(BUNindex(b, BUNlast(b)) - BUNindex(b, BUNfirst(b)));
	logger->changes += l.nr;

	if (l.nr) {
		int (*wh) (ptr, stream *, size_t) = b->htype == TYPE_void ? BATatoms[TYPE_oid].atomWrite : BATatoms[b->htype].atomWrite;
		int (*wt) (ptr, stream *, size_t) = BATatoms[b->ttype].atomWrite;

		l.flag = LOG_UPDATE;
		if (log_write_format(logger, &l) == LOG_ERR || log_write_string(logger, name) == LOG_ERR)
			return LOG_ERR;

		for (p = BUNfirst(b); p < BUNlast(b) && ok == GDK_SUCCEED; p = BUNnext(b, p)) {
			ptr h = BUNhead(b, p);
			ptr t = BUNtail(b, p);
			ok = wh(h, logger->log, 1);
			ok = (ok == GDK_FAIL) ? ok : wt(t, logger->log, 1);
		}

		if (logger->debug)
			fprintf(stderr, "Logged %s %d inserts\n", name, l.nr);
	}
	return (ok == GDK_SUCCEED) ? LOG_OK : LOG_ERR;
}

int
log_bat(logger *logger, BAT *b, char *name)
{
	int ok = GDK_SUCCEED;
	logformat l;
	BUN p;

	if (logger->debug & 128) {
		/* logging is switched off */
		return LOG_OK;
	}

	l.tid = logger->tid;
	l.nr = (int)(BUNindex(b, BUNlast(b)) - BUNindex(b, b->batInserted));
	logger->changes += l.nr;

	if (l.nr) {
		int (*wh) (ptr, stream *, size_t) = BATatoms[b->htype].atomWrite;
		int (*wt) (ptr, stream *, size_t) = BATatoms[b->ttype].atomWrite;

		l.flag = LOG_INSERT;
		if (log_write_format(logger, &l) == LOG_ERR || log_write_string(logger, name) == LOG_ERR)
			return LOG_ERR;

		if (b->htype == TYPE_void && b->ttype < TYPE_str && !VIEWparent(b)) {
			ptr t = BUNtail(b, b->batInserted);
			ok = wt(t, logger->log, l.nr);
		} else {
			for (p = b->batInserted; p < BUNlast(b) && ok == GDK_SUCCEED; p = BUNnext(b, p)) {
				ptr h = BUNhead(b, p);
				ptr t = BUNtail(b, p);
				ok = wh(h, logger->log, 1);
				ok = (ok == GDK_FAIL) ? ok : wt(t, logger->log, 1);
			}
		}

		if (logger->debug)
			fprintf(stderr, "Logged %s %d inserts\n", name, l.nr);
	}
	l.nr = (int)(BUNindex(b, b->batFirst) - BUNindex(b, b->batDeleted));
	logger->changes += l.nr;

	if (l.nr && ok == GDK_SUCCEED) {
		int (*wh) (ptr, stream *, size_t) = BATatoms[b->htype].atomWrite;
		int (*wt) (ptr, stream *, size_t) = BATatoms[b->ttype].atomWrite;

		l.flag = LOG_DELETE;
		if (log_write_format(logger, &l) == LOG_ERR || log_write_string(logger, name) == LOG_ERR)
			return LOG_ERR;

		for (p = b->batDeleted; p < b->batFirst && ok == GDK_SUCCEED; p = BUNnext(b, p)) {
			ptr h = BUNhead(b, p);
			ptr t = BUNtail(b, p);
			ok = wh(h, logger->log, 1);
			ok = (ok == GDK_FAIL) ? ok : wt(t, logger->log, 1);
		}

		if (logger->debug)
			fprintf(stderr, "Logged %s %d deletes\n", name, l.nr);
	}
	BATcommit(b);

	return (ok == GDK_SUCCEED) ? LOG_OK : LOG_ERR;
}

int
log_bat_clear(logger *logger, char *name)
{
	int ok = GDK_SUCCEED;
	logformat l;

	if (logger->debug & 128) {
		/* logging is switched off */
		return LOG_OK;
	}

	l.nr = 1;
	l.tid = logger->tid;
	logger->changes += l.nr;

	l.flag = LOG_CLEAR;
	if (log_write_format(logger, &l) == LOG_ERR || log_write_string(logger, name) == LOG_ERR)
		return LOG_ERR;

	return (ok == GDK_SUCCEED) ? LOG_OK : LOG_ERR;
}

int
log_tstart(logger *logger)
{
	logformat l;

	l.flag = LOG_START;
	l.tid = ++logger->tid;
	l.nr = logger->tid;

	if (logger->debug)
		fprintf(stderr, "log_tstart %d\n", logger->tid);

	return log_write_format(logger, &l);
}

int
log_tend(logger *logger)
{
	logformat l;
	int res = 0;

	if (logger->debug)
		fprintf(stderr, "log_tend %d\n", logger->tid);

	/* first subcommit the snapshots */
	if (DELTAdirty(logger->snapshots)) { 
		/* sub commit all new snapshots */
		BAT *b = BATselect(logger->snapshots, &logger->tid, &logger->tid);
		res = bm_subcommit(b, logger->snapshots);
		BBPunfix(b->batCacheid);
	}
	l.flag = LOG_END;
	l.tid = logger->tid;
	l.nr = logger->tid;
	if (res || log_write_format(logger, &l) == LOG_ERR || 
	    stream_flush(logger->log) ||
	    stream_fsync(logger->log))
		 return LOG_ERR;

	return LOG_OK;
}

int
log_abort(logger *logger)
{
	logformat l;

	if (logger->debug)
		fprintf(stderr, "log_abort %d\n", logger->tid);

	l.flag = LOG_END;
	l.tid = logger->tid;
	l.nr = -1;

	if (log_write_format(logger, &l) == LOG_ERR)
		 return LOG_ERR;

	return LOG_OK;
}

/* a transaction in it self */
int
log_sequence(logger *logger, int seq, lng id)
{
	logformat l;

	l.flag = LOG_SEQ;
	l.tid = logger->tid;
	l.nr = seq;

	if (logger->debug)
		fprintf(stderr, "log_sequence %d" LLFMT "\n", seq, id);

	if (BUNfnd(logger->seqs, &seq)) {
		BUNdelHead(logger->seqs, &seq, FALSE);
	}
	BUNins(logger->seqs, &seq, &id, FALSE);

	if (log_write_format(logger, &l) == LOG_ERR ||
	    !stream_writeLng(logger->log, id) ||
	    stream_flush(logger->log) ||
	    stream_fsync(logger->log))
		 return LOG_ERR;
	return LOG_OK;
}

static int
bm_commit(logger *logger)
{
	BUN p;
	BAT *b = logger->catalog;

	/* remove the destroyed bats */
	for (p = b->batDeleted; p < b->batFirst; p = BUNnext(b, p)) {
		bat bid = *(log_bid *) BUNhead(b, p);
		BAT *b = BATdescriptor(bid);

		BATmode(b, TRANSIENT);
		BBPdecref(bid, TRUE);
		logbat_destroy(b);
	}

	for (p = b->batInserted; p < BUNlast(b); p = BUNnext(b, p)) {
		log_bid bid = *(log_bid *) BUNhead(b, p);
		BAT *b = BATdescriptor(bid);

		BATmode(b, PERSISTENT);
		logbat_destroy(b);
	}
	if (bm_subcommit(logger->catalog, logger->catalog) != 0)  
		return LOG_ERR;
	return LOG_OK;
}

log_bid
logger_add_bat(logger *logger, BAT *b, char *name)
{
	log_bid bid = logger_find_bat(logger, name);

	if (bid) {
		if (bid != b->batCacheid) 
			BUNdelHead(logger->catalog, &bid, FALSE);
		else
			return bid;
	}
	bid = b->batCacheid;
	if (logger->debug)
		printf("create %s\n", name);
	BUNins(logger->catalog, &bid, name, FALSE);
	BBPincref(bid, TRUE);
	return bid;
}

void
logger_del_bat(logger *logger, log_bid bid)
{
	BUNdelHead(logger->catalog, &bid, FALSE);
}

log_bid
logger_find_bat(logger *logger, char *name)
{
	BAT *r_catalog = BATmirror(logger->catalog);
	log_bid res = 0;
	BUN p = BUNfnd(r_catalog, name);

	if (p) 
		res = *(log_bid *) BUNtail(r_catalog, p);
	return res;
}

/* the wrappers */
str
logger_create_wrap( logger *L, int *debug, str *fn, str *dirname, str *dbname, int *version) 
{
	logger *l = logger_create(*debug, *fn, *dirname, *dbname, *version); 
	
	if (l) {
		*(logger**)L = l;
		return MAL_SUCCEED;
	}
	return throwMessage("logger.create", "failed");
}

str
logger_destroy_wrap( logger *L ) 
{
	logger *l = *(logger**)L;
	if (l) {
		logger_destroy(l);
		return MAL_SUCCEED;
	}
	return throwMessage("logger.destroy", "failed");
}

int 
logger_exit_wrap(logger *L )
{
	logger *l = *(logger**)L;
	if (l && logger_exit(l) == LOG_OK) 
		return GDK_SUCCEED;
	return GDK_FAIL;
}

int 
logger_restart_wrap(logger *L )
{
	logger *l = *(logger**)L;
	if (l && logger_restart(l) == LOG_OK) 
		return GDK_SUCCEED;
	return GDK_FAIL;
}

int 
logger_cleanup_wrap(logger *L )
{
	logger *l = *(logger**)L;
	if (l && logger_cleanup(l) == LOG_OK) 
		return GDK_SUCCEED;
	return GDK_FAIL;
}

int 
logger_changes_wrap(int *r, logger *L )
{
	logger *l = *(logger**)L;
	if (l) {
		*r = logger_changes(l);
		return GDK_SUCCEED;
	}
	*r = 0;
	return GDK_FAIL;
}

int 
log_tstart_wrap(logger *L )
{
	logger *l = *(logger**)L;
	if (l && log_tstart(l) == LOG_OK) 
		return GDK_SUCCEED;
	return GDK_FAIL;
}

int 
log_tend_wrap(logger *L )
{
	logger *l = *(logger**)L;
	if (l && log_tend(l) == LOG_OK) 
		return GDK_SUCCEED;
	return GDK_FAIL;
}

int 
log_abort_wrap(logger *L )
{
	logger *l = *(logger**)L;
	if (l && log_abort(l) == LOG_OK) 
		return GDK_SUCCEED;
	return GDK_FAIL;
}

int 
log_delta_wrap(logger *L, BAT *b, str nme )
{
	logger *l = *(logger**)L;
	if (l && log_delta(l, b, nme) == LOG_OK) 
		return GDK_SUCCEED;
	return GDK_FAIL;
}

int 
log_bat_wrap(logger *L, BAT *b, str nme )
{
	logger *l = *(logger**)L;
	if (l && log_bat(l, b, nme) == LOG_OK) 
		return GDK_SUCCEED;
	return GDK_FAIL;
}

int 
log_bat_clear_wrap(logger *L, str nme )
{
	logger *l = *(logger**)L;
	if (l && log_bat_clear(l, nme) == LOG_OK) 
		return GDK_SUCCEED;
	return GDK_FAIL;
}

int 
log_bat_persists_wrap(logger *L, BAT *b, str nme )
{
	logger *l = *(logger**)L;
	if (l && log_bat_persists(l, b, nme) == LOG_OK) 
		return GDK_SUCCEED;
	return GDK_FAIL;
}

int 
log_bat_transient_wrap(logger *L, str nme )
{
	logger *l = *(logger**)L;
	if (l && log_bat_transient(l, nme) == LOG_OK) 
		return GDK_SUCCEED;
	return GDK_FAIL;
}

int
logger_add_bat_wrap( int *bid, logger *L, BAT *b, str nme ) 
{
	logger *l = *(logger**)L;
	if (l) { 
		*bid = logger_add_bat(l, b, nme); 
		return GDK_SUCCEED;
	}
	return GDK_FAIL;
}

int
logger_del_bat_wrap( logger *L, int *bid ) 
{
	logger *l = *(logger**)L;
	if (l) {
		logger_del_bat(l, *bid); 
		return GDK_SUCCEED;
	}
	return GDK_FAIL;
}

int
logger_find_bat_wrap( int *bid, logger *L, str nme ) 
{
	logger *l = *(logger**)L;
	if (l) { 
		*bid = logger_find_bat(l, nme); 
		return GDK_SUCCEED;
	}
	return GDK_FAIL;
}

@mil
proc logger_start() : void {
	var dir := bat("monet_environment").find("sql_logdir");
	var db := bat("monet_environment").find("gdk_dbname");
	print(dir);
	print(db);
	logger_start(dir, db);
}
@}
