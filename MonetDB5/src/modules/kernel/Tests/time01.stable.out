stdout of test 'time01` in directory 'src/modules/kernel` itself:


# 14:29:57 >  
# 14:29:57 >   mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=4 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=30929 --set xrpc_port=43470 --set monet_prompt= --trace  --dbname=mTests_src_modules_kernel  time01.mal
# 14:29:57 >  







# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_modules_kernel'
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2008 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
#
#x0 := mtime.daytime("10:00:00");
#x1 := mtime.daytime("10:00:20");
#x2 := mtime.daytime("10:00:50");
#
#b0 := bat.new(:oid,:daytime);
#bat.insert(b0, 0:oid, x0);
#bat.insert(b0, 2:oid, x1);
#bat.insert(b0, 1:oid, x2);
#b2 := algebra.sort(b0);
#
#b1 := bat.new(:oid,:daytime);
#bat.append(b1, x0);
#bat.append(b1, x1);
#bat.append(b1, x2);
#
#io.print(b2);
#io.print(b1);
#
#c := batcalc.==(b2, b1);
#io.print(c);
#
function user.main():void;              #  0 main:void := user.main() {G}
    x0 := mtime.daytime("10:00:00");    #  1 x0:daytime := MTIMEdaytime_fromstr(_2:str) 
    x1 := mtime.daytime("10:00:20");    #  2 x1:daytime := MTIMEdaytime_fromstr(_4:str) 
    x2 := mtime.daytime("10:00:50");    #  3 x2:daytime := MTIMEdaytime_fromstr(_6:str) 
    b0 := bat.new(:oid,:daytime);       #  4 b0:bat[:oid,:daytime] := CMDBATnew(_8:oid, _9:daytime) {G}
    bat.insert(b0,0@0:oid,x0);          #  5 _10:void := BKCinsert_bun(b0:bat[:oid,:daytime], _11:oid, x0:daytime) 
    bat.insert(b0,2@0:oid,x1);          #  6 _12:void := BKCinsert_bun(b0:bat[:oid,:daytime], _13:oid, x1:daytime) 
    bat.insert(b0,1@0:oid,x2);          #  7 _14:void := BKCinsert_bun(b0:bat[:oid,:daytime], _15:oid, x2:daytime) 
    b2 := algebra.sort(b0);             #  8 b2:bat[:oid,:daytime] := ALGhsort(b0:bat[:oid,:daytime]) {G}
    b1 := bat.new(:oid,:daytime);       #  9 b1:bat[:oid,:daytime] := CMDBATnew(_8:oid, _9:daytime) {G}
    bat.append(b1,x0);                  # 10 _18:void := BKCappend_val_wrap(b1:bat[:oid,:daytime], x0:daytime) 
    bat.append(b1,x1);                  # 11 _19:void := BKCappend_val_wrap(b1:bat[:oid,:daytime], x1:daytime) 
    bat.append(b1,x2);                  # 12 _20:void := BKCappend_val_wrap(b1:bat[:oid,:daytime], x2:daytime) 
    io.print(b2);                       # 13 _21:void := IOprint_val(b2:bat[:oid,:daytime]) 
    io.print(b1);                       # 14 _22:void := IOprint_val(b1:bat[:oid,:daytime]) 
    c := batcalc.==(b2,b1);             # 15 c:bat[:oid,:bit] := MTIMEbat_daytime_EQ(b2:bat[:oid,:daytime], b1:bat[:oid,:daytime]) {G}
    io.print(c);                        # 16 _24:void := IOprint_val(c:bat[:oid,:bit]) 
end main;	# 17  
#-------------------------#
# h	t		  # name
# oid	daytime	  # type
#-------------------------#
[ 0@0,	  10:00:00.000	  ]
[ 1@0,	  10:00:50.000	  ]
[ 2@0,	  10:00:20.000	  ]
#-------------------------#
# h	t		  # name
# void	daytime	  # type
#-------------------------#
[ 0@0,	  10:00:00.000	  ]
[ 1@0,	  10:00:20.000	  ]
[ 2@0,	  10:00:50.000	  ]
#-----------------#
# h	t	  # name
# oid	bit	  # type
#-----------------#
[ 0@0,	  true	  ]
[ 1@0,	  false	  ]
[ 2@0,	  false	  ]

# 10:14:08 >  
# 10:14:08 >  Done.
# 10:14:08 >  

