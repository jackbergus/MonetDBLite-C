stdout of test 'time01` in directory 'src/modules/kernel` itself:


# 17:14:57 >  
# 17:14:57 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/niels/scratch/monetdb/Linux-x86_64/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/niels/scratch/monetdb/Linux-x86_64/lib/MonetDB5:/ufs/niels/scratch/monetdb/Linux-x86_64/lib/MonetDB5/lib:/ufs/niels/scratch/monetdb/Linux-x86_64/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/niels/scratch/monetdb/Linux-x86_64/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/niels/scratch/monetdb/Linux-x86_64/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/niels/scratch/monetdb/Linux-x86_64/var/MonetDB5/xquery_logs" --set mapi_port=32946 --set xrpc_port=46227 --set monet_prompt= --trace --dbname=mTests_src_modules_kernel  time01.mal
# 17:14:57 >  



# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_modules_kernel
# Visit http://monetdb.cwi.nl/ for further information
#
#x0 := mtime.daytime("10:00:00");
#x1 := mtime.daytime("10:00:20");
#x2 := mtime.daytime("10:00:50");
#
#b0 := bat.new(:oid,:daytime);
#bat.insert(b0, 0:oid, x0);
#bat.insert(b0, 2:oid, x1);
#bat.insert(b0, 1:oid, x2);
#b2 := algebra.sort(b0);
#
#b1 := bat.new(:oid,:daytime);
#bat.append(b1, x0);
#bat.append(b1, x1);
#bat.append(b1, x2);
#
#io.print(b2);
#io.print(b1);
#
#c := batcalc.==(b2, b1);
#io.print(c);
#
function user.main():void;	# 0  (main:void)
    x0 := mtime.daytime("10:00:00");	# 1 MTIMEdaytime_fromstr (x0:daytime)<-(_2:str)
    x1 := mtime.daytime("10:00:20");	# 2 MTIMEdaytime_fromstr (x1:daytime)<-(_4:str)
    x2 := mtime.daytime("10:00:50");	# 3 MTIMEdaytime_fromstr (x2:daytime)<-(_6:str)
    b0 := bat.new(:oid,:daytime);	# 4 CMDBATnew (b0:bat[:oid,:daytime])<-(_8:oid)(_9:daytime)
    bat.insert(b0,0@0:oid,x0);	# 5 BKCinsert_bun (_10:void)<-(b0:bat[:oid,:daytime])(_11:oid)(x0:daytime)
    bat.insert(b0,2@0:oid,x1);	# 6 BKCinsert_bun (_12:void)<-(b0:bat[:oid,:daytime])(_13:oid)(x1:daytime)
    bat.insert(b0,1@0:oid,x2);	# 7 BKCinsert_bun (_14:void)<-(b0:bat[:oid,:daytime])(_15:oid)(x2:daytime)
    b2 := algebra.sort(b0);	# 8 ALGhsort (b2:bat[:oid,:daytime])<-(b0:bat[:oid,:daytime])
    b1 := bat.new(:oid,:daytime);	# 9 CMDBATnew (b1:bat[:oid,:daytime])<-(_8:oid)(_9:daytime)
    bat.append(b1,x0);	# 10 BKCappend_val_wrap (_18:void)<-(b1:bat[:oid,:daytime])(x0:daytime)
    bat.append(b1,x1);	# 11 BKCappend_val_wrap (_19:void)<-(b1:bat[:oid,:daytime])(x1:daytime)
    bat.append(b1,x2);	# 12 BKCappend_val_wrap (_20:void)<-(b1:bat[:oid,:daytime])(x2:daytime)
    io.print(b2);	# 13 IOprint_val (_21:void)<-(b2:bat[:oid,:daytime])
    io.print(b1);	# 14 IOprint_val (_22:void)<-(b1:bat[:oid,:daytime])
    c := batcalc.==(b2,b1);	# 15 MTIMEdaytimebat_EQ (c:bat[:oid,:bit])<-(b2:bat[:oid,:daytime])(b1:bat[:oid,:daytime])
    io.print(c);	# 16 IOprint_val (_24:void)<-(c:bat[:oid,:bit])
end main;	# 17  
#-------------------------#
# h	t		  # name
# oid	daytime	  # type
#-------------------------#
[ 0@0,	  10:00:00.000	  ]
[ 1@0,	  10:00:50.000	  ]
[ 2@0,	  10:00:20.000	  ]
#-------------------------#
# h	t		  # name
# void	daytime	  # type
#-------------------------#
[ 0@0,	  10:00:00.000	  ]
[ 1@0,	  10:00:20.000	  ]
[ 2@0,	  10:00:50.000	  ]
#-----------------#
# h	t	  # name
# oid	bit	  # type
#-----------------#
[ 0@0,	  true	  ]
[ 1@0,	  false	  ]
[ 2@0,	  false	  ]

# 17:14:57 >  
# 17:14:57 >  Done.
# 17:14:57 >  

