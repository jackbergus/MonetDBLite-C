@' The contents of this file are subject to the MonetDB Public
@' License Version 1.0 (the "License"); you may not use this file
@' except in compliance with the License. You may obtain a copy of
@' the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.0.html
@'
@' Software distributed under the License is distributed on an "AS
@' IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
@' implied. See the License for the specific language governing
@' rights and limitations under the License.
@'
@' The Original Code is the Monet Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2006 CWI.
@' All Rights Reserved.

@f mil_insert
@a Martin Kersten
@* MIL backward compatibility
To simplify backward compatibility we introduce here a series
of operators that behave differently in the M5 context.
We should keep the number low, but at the same time it
should be understood that some of the operations carry
an overhead that we normally do not want.
Note that we can not simply rely on the overloading scheme,
either way we define the resolution order 'mil'-'bat' there
will be cases not accounted for. Therefore the compiler checks
for the tricky case explicitly.
@mal
module mil_insert;
command insert(b:bat[:any$1,:any$2], h:any$1, t:any$2) :bat[:any$1,:any$2]
address MILinsert_bun
comment "Insert one BUN[h,t] in a BAT.";
command insert(b:bat[:void,:any$2], h:oid, t:any$2) :bat[:oid,:any$2]
address MILinsert_bun;
@-
Compatibility code wrappers
@c
#include "mal.h"
#include "bat.h"

str
MILinsert_void_bun(int *r, int *bid, ptr t)
{
	*r = *bid;
	return BKCinsert_void_bun(r, bid, t);
}

str
MILinsert_bun(int *r, int *bid, ptr h, ptr t)
{
	*r = *bid;
	return BKCinsert_bun(r, bid, h, t);
}
