@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
@' Copyright August 2008-2009 MonetDB B.V.
@' All Rights Reserved.

@f algebraExtensions
@v 2.0
@a M.L.Kersten, P. Boncz
@+ Algebra Extensions
The algebra extensions rely
on the MAL runtime setting, but logically belong to the kernel/algebra
module.
@mal

pattern algebra.project( b:bat[:any_1,:any_3], val:any_2) :bat[:any_1,:any_2] 	
address ALGprojectCst
comment "Fill the tail column with a newly typed constant.";
pattern algebra.project(b:bat[:any_1,:any_3], val:bat[:any_1,:any_2]) :bat[:any_1,:any_2]
address ALGprojectCst
comment "Fill the tail column with a constant taken from the aligned BAT.";
                                                                                
pattern algebra.prejoin(b:bat[:oid,:any_1],c:bat[:oid,:any_1]) (:bat[:oid,:int],:bat[:oid,:any_1])
address ALGprejoin
comment "Bloom filter to reduce join cost in out-of-memory situations";
@{
@include prelude.mx
@+ Implementation section
In most cases we pass a BAT identifier, which should be unified
with a BAT descriptor. Upon failure we can simply abort the function.

@h
#ifndef _ALGEBRA_EXTENSIONS_H
#define _ALGEBRA_EXTENSIONS_H
#include "mal_box.h"
#include "mal_client.h"
#include "mal_interpreter.h"
#include "bat5.h"
#include "algebra.h"

#ifdef WIN32
#ifndef LIBALGEBRAEXTENSIONS
#define ae_export extern __declspec(dllimport)
#else
#define ae_export extern __declspec(dllexport)
#endif
#else
#define ae_export extern
#endif

ae_export str ALGprojectCst(Client cntxt,MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
ae_export str ALGprojectCstBody(bat *result, int *bid, ptr *p, int tt);
#endif /* _ALGEBRA_EXTENSIONS_H*/

@c
#include "mal_config.h"
#include "algebraExtensions.h"
#include "mal_errors.h"
str
ALGprojectCstBody(bat *result, int *bid, ptr *p, int tt){
	BAT *b, *bn;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bbp.project", INTERNAL_BAT_ACCESS);
	}

	if (ATOMvarsized(tt)) {
		if (p == 0 || *(str *) p == 0)
			p = (ptr *) str_nil;
		else
			p = *(ptr **) p;
	}
	bn = BATconst(b, tt, p);
	BBPunfix(b->batCacheid);
	if (bn) {
		*result = bn->batCacheid;
		BBPkeepref(bn->batCacheid);
		return MAL_SUCCEED;
	}
	throw(MAL, "bbp.project", INTERNAL_OBJ_CREATE);
}

str
ALGprojectCst(Client cntxt,MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	int *result = (int *) getArgReference(stk, pci, 0);
	int *bid = (int *) getArgReference(stk, pci, 1);
	ptr *p = (ptr *) getArgReference(stk, pci, 2);
	int tt = getArgType(mb, pci, 2);

	(void) cntxt;
	return ALGprojectCstBody(result, bid, p, tt);
}
@-
Bloom filters can be used to reduce the processing cost of
joins in case of out-of-memory situations.
@c
/* #define DEBUG_BLOOMFILTER		*/

#define MASK 1024*8
#define THRESHOLD 50000

#define setBit(X, Y, Z) X[Y] |= Z
#define tstBit(X, Y, Z) X[Y] == Z
void
GDKbloomfilter(BAT *b, BAT *c, BAT **bn, BAT **cn){

	int *bv, *cv;
	char hb[MASK], hc[MASK];
	char *bdone, *cdone;
	int  val, valp, i, blim, clim, bcnt, ccnt;
	int mask = MASK, cutoff=10;
	int p,primes[]= {1,3527,2087,1021,881,743,613,479,359,239,101};

	bv = (int*) Tloc(b, BUNfirst(b));
	cv = (int*) Tloc(c, BUNfirst(c));
	blim= BATcount(b);
	clim= BATcount(c);
	bdone = (char*) GDKzalloc(blim);
	cdone = (char*) GDKzalloc(clim);
#ifdef DEBUG_BLOOMFILTER
	stream_printf(GDKout,"b %d\n",blim);
	stream_printf(GDKout,"c %d\n",clim);
#endif

	memset(hb, 0, mask);
	memset(hc, 1, mask);

	bcnt= 0;
	ccnt= 0;
	if ( blim >= THRESHOLD || clim >= THRESHOLD )
	for ( p = 1; p < cutoff; p++){
		bcnt= 0;
		ccnt= 0;

		for ( i = 0; i < blim; i++){
		if ( tstBit(bdone,i,0) ) {
			val = (primes[p] * bv[i]) % mask;
			valp = (primes[p-1] * bv[i]) % mask;
			setBit(hb,ABS(val),1);
			setBit(bdone,i, tstBit(hc,ABS(valp),0));
			bcnt += tstBit(bdone,i,1);
		} else bcnt ++;
#ifdef DEBUG_BLOOMFILTER2
		stream_printf(GDKout,"%d %d %d\n",i, ABS(val), tstBit(bdone,i,1));
#endif
		}

		memset(hc, 0, mask);
		for ( i = 0; i < clim; i++){
		if ( tstBit(cdone,i,0) ) {
			val = (primes[p] * cv[i]) % mask;
			setBit(hc,ABS(val),1);
			setBit(cdone,i,tstBit(hb, ABS(val),0));
			ccnt += tstBit(cdone,i,1);
		} else ccnt++;
#ifdef DEBUG_BLOOMFILTER2
		stream_printf(GDKout,"%d %d %d\n", i, ABS(val), tstBit(cdone,i,1));
#endif
		}
#ifdef DEBUG_BLOOMFILTER
		stream_printf(GDKout,"b-reduce %d->%d\n",blim,bcnt);
		stream_printf(GDKout,"c-reduce %d->%d\n",clim,ccnt);
#endif
		if ( blim-bcnt < THRESHOLD && clim-ccnt < THRESHOLD && p > 1)
			break;
		memset(hb, 0, mask);
	}

	/* stage 2, produce a temporary table */

	/* create a snapshot */
	if ( bcnt == 0){
		*bn = b;
		BBPkeepref(b->batCacheid);
	} else {
		*bn = BATnew(TYPE_oid,TYPE_int, bcnt);
		for ( i = 0; i < blim; i++)
		if( tstBit(bdone,i,0) ){
			oid o = (oid) i;
			*bn= BUNins(*bn,&o, &bv[i], FALSE);
		}
		BBPkeepref((*bn)->batCacheid);
	}

	/* create a snapshot */
	if ( ccnt ==0 ){
		*cn = c;
		BBPkeepref(c->batCacheid);
	} else {
		*cn = BATnew(TYPE_oid,TYPE_int, ccnt);
		for ( i = 0; i < clim; i++)
		if (tstBit(cdone,i,0) ){
			oid o = (oid) i;
			*cn = BUNins(*cn,&o, &cv[i],FALSE);
		}
		BBPkeepref((*cn)->batCacheid);
	}
	GDKfree(bdone);
	GDKfree(cdone);
}

str 
ALGprejoin(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	int *bres = (int *) getArgReference(stk, pci, 0);
	int *cres = (int *) getArgReference(stk, pci, 1);
	int *bid = (int *) getArgReference(stk, pci, 2);
	int *cid = (int *) getArgReference(stk, pci, 3);
	BAT *b, *c, *bn, *cn;
	int tt;

	(void) cntxt;
	if ((b = BATdescriptor(*bid)) == NULL)
		throw(MAL, "bbp.prejoin", INTERNAL_BAT_ACCESS);
	if ( (tt= getTailType(getArgType(mb,pci,2))) != TYPE_int){
		BBPunfix(*bid);
		throw(MAL, "bbp.prejoin", OPERATION_FAILED "non-supported type");
	}
	if ( (c = BATdescriptor(*cid)) == NULL) {
		BBPunfix(*bid);
		throw(MAL, "bbp.prejoin", INTERNAL_BAT_ACCESS);
	}
	if ( BATcount(b) > BATcount(c) )
		GDKbloomfilter(c,b, &cn, &bn);
	else
		GDKbloomfilter(b,c, &bn, &cn);
	*cres= cn->batCacheid;
	*bres= bn->batCacheid;
	return MAL_SUCCEED;
}
@}
