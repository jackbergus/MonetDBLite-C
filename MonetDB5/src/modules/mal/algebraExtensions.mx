@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
@' Copyright August 2008-2009 MonetDB B.V.
@' All Rights Reserved.

@f algebraExtensions
@v 2.0
@a M.L.Kersten, P. Boncz
@+ Algebra Extensions
The algebra extensions rely
on the MAL runtime setting, but logically belong to the kernel/algebra
module.
@mal

pattern algebra.project( b:bat[:any_1,:any_3], val:any_2) :bat[:any_1,:any_2]
address ALGprojectCst
comment "Fill the tail column with a newly typed constant.";
pattern algebra.project(b:bat[:any_1,:any_3], val:bat[:any_1,:any_2]) :bat[:any_1,:any_2]
address ALGprojectCst
comment "Fill the tail column with a constant taken from the aligned BAT.";

pattern algebra.prejoin(b:bat[:oid,:any_1],c:bat[:oid,:any_1]) (:bat[:oid,:any_1],:bat[:oid,:any_1])
address ALGprejoin
comment "Bloom filter to reduce join cost in out-of-memory situations";
pattern algebra.prejoin_l(b:bat[:oid,:any_1],c:bat[:oid,:any_1]) (:bat[:oid,:any_1],:bat[:oid,:any_1])
address ALGprejoin_l
comment "Bloom filter to reduce join cost in out-of-memory situations -- lefteris";
@{
@include prelude.mx
@+ Implementation section
In most cases we pass a BAT identifier, which should be unified
with a BAT descriptor. Upon failure we can simply abort the function.

@h
#ifndef _ALGEBRA_EXTENSIONS_H
#define _ALGEBRA_EXTENSIONS_H
#include "mal_box.h"
#include "mal_client.h"
#include "mal_interpreter.h"
#include "bat5.h"
#include "algebra.h"

#ifdef WIN32
#ifndef LIBALGEBRAEXTENSIONS
#define ae_export extern __declspec(dllimport)
#else
#define ae_export extern __declspec(dllexport)
#endif
#else
#define ae_export extern
#endif

ae_export str ALGprojectCst(Client cntxt,MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
ae_export str ALGprojectCstBody(bat *result, int *bid, ptr *p, int tt);
#endif /* _ALGEBRA_EXTENSIONS_H*/

@c
#include "mal_config.h"
#include "algebraExtensions.h"
#include "mal_errors.h"
#include "mmath.h"
str
ALGprojectCstBody(bat *result, int *bid, ptr *p, int tt){
	BAT *b, *bn;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bbp.project", INTERNAL_BAT_ACCESS);
	}

	if (ATOMvarsized(tt)) {
		if (p == 0 || *(str *) p == 0)
			p = (ptr *) str_nil;
		else
			p = *(ptr **) p;
	}
	bn = BATconst(b, tt, p);
	BBPunfix(b->batCacheid);
	if (bn) {
		*result = bn->batCacheid;
		BBPkeepref(bn->batCacheid);
		return MAL_SUCCEED;
	}
	throw(MAL, "bbp.project", INTERNAL_OBJ_CREATE);
}

str
ALGprojectCst(Client cntxt,MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	int *result = (int *) getArgReference(stk, pci, 0);
	int *bid = (int *) getArgReference(stk, pci, 1);
	ptr *p = (ptr *) getArgReference(stk, pci, 2);
	int tt = getArgType(mb, pci, 2);

	(void) cntxt;
	return ALGprojectCstBody(result, bid, p, tt);
}
@-
Bloom filters can be used to reduce the processing cost of
joins in case of out-of-memory situations.
This footprint in terms of percentage of main memory use
is calculated for the heap(s) only.
@c

#define DEBUG_BLOOMFILTER

static
size_t GDKbatfootprint(BAT *b){
	size_t mem = MT_npages() * MT_pagesize();
	size_t size = b->H->heap.size + b->T->heap.size;
	ALGODEBUG THRprintf(GDKout,
		"footprint " SZFMT " " SZFMT " " SZFMT" \n",mem, size, size /(mem/100));
	return size /(mem/100);
}

#define MASK 1024*64	/* power of 2 */
#define THRESHOLD 50000

#define setBit(X, Y, Z) (X[Y] |= Z)
#define tstBit(X, Y) (X[Y] == 1)

static int primes[]= {577, 601, 613, 619, 7, 41, 239, 9369319, 769,787};

void
GDKbloomfilter_int(BAT *b, BAT *c, BAT **bn, BAT **cn){

	int *bv, *cv;
	char hb[ MASK], hc[ MASK];
	char *bdone, *cdone;
	size_t i, blim, clim, bcnt, ccnt, bincr,cincr;
	int mask, cutoff;
	int brnd, crnd;

	if ( BATcount(b) > BATcount(c) ) {
		GDKbloomfilter_int(c,b, cn, bn);
		return;
	}

	/* consider it an out-of-memory situation 
		when more then 25% is used, 
		otherwise use normal processing scheme 
	if ( b->ttype != TYPE_int || GDKbatfootprint(b) < 25 ){
		*bn = b;
		BBPkeepref(b->batCacheid);
		*cn = c;
		BBPkeepref(c->batCacheid);
		return;
	}	*/
	GDKbatfootprint(b);
	
	bv = (int*) Tloc(b, BUNfirst(b));
	cv = (int*) Tloc(c, BUNfirst(c));
	blim= BATcount(b);
	clim= BATcount(c);
	bdone = (char*) GDKzalloc(blim);
	cdone = (char*) GDKzalloc(clim);
#ifdef DEBUG_BLOOMFILTER
	stream_printf(GDKout,"Martin b %d ",blim);
	stream_printf(GDKout,"c %d vector size %d\n",clim, MASK);
#endif

	bcnt= 0;
	ccnt= 0;
	mask = MASK-1;
	cutoff = (int) log(MASK);

	for(cutoff-- ; cutoff> 1; cutoff-= 2){
		memset(hb, 0, MASK);
		memset(hc, 0, MASK);
		cincr = bincr = 0;
		brnd = (1<< cutoff) - 1;
		brnd = primes[cutoff-1];
		crnd = (1<< (cutoff-1)) - 1;

		for ( i = 0; i < blim; i++)
		if ( !tstBit(bdone,i) ) {
			setBit(hb, (brnd * bv[i]) & mask, 1);
		}

		for ( i = 0; i < clim; i++){
			if ( !tstBit(cdone,i) ) {
				setBit(cdone,i, !tstBit(hb, (brnd * cv[i]) & mask));
				cincr += tstBit(cdone,i);
			}
			if ( !tstBit(cdone,i) ) 
				setBit(hc, (crnd * cv[i]) & mask, 1);
		}

		for ( i = 0; i < blim; i++)
		if ( !tstBit(bdone,i) ) {
			setBit(bdone,i, !tstBit(hc, (crnd * bv[i]) & mask));
			bincr += tstBit(bdone,i);
		}
		ccnt += cincr;
		bcnt += bincr;
		if (cincr == 0 ||  bincr == 0)
			break;

#ifdef DEBUG_BLOOMFILTER
		stream_printf(GDKout,"b-reduce %d %d->%d incr %d\n",brnd,blim,bcnt,bincr);
		stream_printf(GDKout,"c-reduce %d %d->%d incr %d\n",crnd,clim,ccnt,cincr);
#endif
	}

	/* stage 2, produce a temporary table */
	/* create a snapshot */
	if ( bcnt == 0){
		*bn = b;
		BBPkeepref(b->batCacheid);
	} else {
		*bn = BATnew(TYPE_oid,TYPE_int, bcnt);
		for ( i = 0; i < blim; i++)
		if( !tstBit(bdone,i) ){
			oid o = (oid) i;
			*bn= BUNins(*bn,&o, &bv[i], FALSE);
		}
		BBPkeepref((*bn)->batCacheid);
	}

	/* create a snapshot */
	if ( ccnt ==0 ){
		*cn = c;
		BBPkeepref(c->batCacheid);
	} else {
		*cn = BATnew(TYPE_oid,TYPE_int, ccnt);
		for ( i = 0; i < clim; i++)
		if (!tstBit(cdone,i) ){
			oid o = (oid) i;
			*cn = BUNins(*cn,&o, &cv[i],FALSE);
		}
		BBPkeepref((*cn)->batCacheid);
	}
#ifdef DEBUG_BLOOMFILTER
		stream_printf(GDKout,"b-reduced %d->%d\n",blim, BATcount(*bn));
		stream_printf(GDKout,"c-reduced %d->%d\n",clim,  BATcount(*cn));
#endif
	GDKfree(bdone);
	GDKfree(cdone);
}

#define prime(x,y) ((1 << (x+y)) + 1)

@= hash
ABS((prime(@1,7)*@2)%@3)

@c

void
GDKbloomfilter_int_l(BAT *b, BAT *c, BAT **bn, BAT **cn) {
	int *bv, *cv;
	char *bbloom,*cbloom;
	int mb, mc;
	size_t i, blim, clim;

	/* b is the smaller one */
	if ( BATcount(b) > BATcount(c) ) {
		GDKbloomfilter_int_l(c, b, cn, bn);
		return;
	}

	/* consider it an out-of-memory situation
	if ( b->ttype != TYPE_int || GDKbatfootprint(b) < 25 ){
		*bn = b;
		BBPkeepref(b->batCacheid);
		*cn = c;
		BBPkeepref(c->batCacheid);
		return;
	}*/

	bv = (int*) Tloc(b, BUNfirst(b));
	cv = (int*) Tloc(c, BUNfirst(c));
	blim= BATcount(b);
	clim= BATcount(c);
	mb = blim*10;
	mc = clim*10;

#ifdef DEBUG_BLOOMFILTER
	stream_printf(GDKout,"Lefteris b %d ",blim);
	stream_printf(GDKout,"c %d vector size %d,%d\n",clim,mb,mc);
#endif

	bbloom = (char *) GDKmalloc(mb); /* this is a waste of space for now */
	cbloom = (char *) GDKmalloc(mc);
	memset(bbloom, 0, mb);
	memset(cbloom, 0, mc);

	/* for (b) { built bloom } */
	for (i = 0; i < blim; i++) {
		setBit(bbloom, @:hash(1,bv[i],mb)@, 1);
		setBit(bbloom, @:hash(2,bv[i],mb)@, 1);
		setBit(bbloom, @:hash(3,bv[i],mb)@, 1);
		setBit(bbloom, @:hash(4,bv[i],mb)@, 1);
	}

	/*  for (c) { test bbloom; built cbloom } */
	*cn = BATnew(TYPE_oid,TYPE_int, blim/4);
	for (i = 0; i < clim; i++) {
		if ((tstBit(bbloom, @:hash(1,cv[i], mb)@) &&
				tstBit(bbloom, @:hash(2,cv[i], mb)@) &&
				tstBit(bbloom, @:hash(3,cv[i], mb)@) &&
				tstBit(bbloom, @:hash(4,cv[i], mb)@))) {
			oid o = (oid) i;
			*cn = BUNins(*cn, &o, &cv[i], FALSE);
			setBit(cbloom, @:hash(1,cv[i],mc)@,1);
			setBit(cbloom, @:hash(2,cv[i],mc)@,1);
			setBit(cbloom, @:hash(3,cv[i],mc)@,1);
			setBit(cbloom, @:hash(4,cv[i],mc)@,1);
		}
	}

	/* for (b) { check cbloom } */
	*bn = BATnew(TYPE_oid,TYPE_int, blim/4);
	for (i = 0; i < blim; i++) {
		if ((tstBit(cbloom, @:hash(1,bv[i], mc)@) &&
				tstBit(cbloom, @:hash(2,bv[i], mc)@) &&
				tstBit(cbloom, @:hash(3,bv[i], mc)@) &&
				tstBit(cbloom, @:hash(4,bv[i], mc)@))) {
				oid o = (oid) i;
			*bn = BUNins(*bn, &o, &bv[i], FALSE);
		}
	}

#ifdef DEBUG_BLOOMFILTER
		stream_printf(GDKout,"b-reduced %d->%d\n",blim, BATcount(*bn));
		stream_printf(GDKout,"c-reduced %d->%d\n",clim,  BATcount(*cn));
#endif

	BBPkeepref((*bn)->batCacheid);
	BBPkeepref((*cn)->batCacheid);

}

str 
ALGprejoin(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	int *bres = (int *) getArgReference(stk, pci, 0);
	int *cres = (int *) getArgReference(stk, pci, 1);
	int *bid = (int *) getArgReference(stk, pci, 2);
	int *cid = (int *) getArgReference(stk, pci, 3);
	BAT *b, *c, *bn, *cn;

	(void) cntxt;
	(void) mb;

	if ((b = BATdescriptor(*bid)) == NULL)
		throw(MAL, "bbp.prejoin", INTERNAL_BAT_ACCESS);
	if ( (c = BATdescriptor(*cid)) == NULL) {
		BBPunfix(*bid);
		throw(MAL, "bbp.prejoin", INTERNAL_BAT_ACCESS);
	}
	GDKbloomfilter_int(b,c, &bn, &cn);
	*cres= cn->batCacheid;
	*bres= bn->batCacheid;
	return MAL_SUCCEED;
}

str 
ALGprejoin_l(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	int *bres = (int *) getArgReference(stk, pci, 0);
	int *cres = (int *) getArgReference(stk, pci, 1);
	int *bid = (int *) getArgReference(stk, pci, 2);
	int *cid = (int *) getArgReference(stk, pci, 3);
	BAT *b, *c, *bn, *cn;

	(void) cntxt;
	(void) mb;

	if ((b = BATdescriptor(*bid)) == NULL)
		throw(MAL, "bbp.prejoin", INTERNAL_BAT_ACCESS);
	if ( (c = BATdescriptor(*cid)) == NULL) {
		BBPunfix(*bid);
		throw(MAL, "bbp.prejoin", INTERNAL_BAT_ACCESS);
	}
	GDKbloomfilter_int_l(b,c, &bn, &cn);
	*cres= cn->batCacheid;
	*bres= bn->batCacheid;
	return MAL_SUCCEED;
}
@}
