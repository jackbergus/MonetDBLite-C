@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
@' Copyright August 2008-2009 MonetDB B.V.
@' All Rights Reserved.

@f algebraExtensions
@v 2.0
@a M.L.Kersten, P. Boncz
@+ Algebra Extensions
The algebra extensions rely
on the MAL runtime setting, but logically belong to the kernel/algebra
module.
@mal

pattern algebra.project( b:bat[:any_1,:any_3], val:any_2) :bat[:any_1,:any_2]
address ALGprojectCst
comment "Fill the tail column with a newly typed constant.";
pattern algebra.project(b:bat[:any_1,:any_3], val:bat[:any_1,:any_2]) :bat[:any_1,:any_2]
address ALGprojectCst
comment "Fill the tail column with a constant taken from the aligned BAT.";

pattern algebra.prejoin(b:bat[:oid,:any_1],c:bat[:oid,:any_1],algo:int) (:bat[:oid,:any_1],:bat[:oid,:any_1])
address ALGprejoin
comment "Bloom filter to reduce join cost in out-of-memory situations. 1 -- martin, 2 -- lefteris";

pattern algebra.blkjoin(b:bat[:oid,:any_1],c:bat[:any_1,:oid]):bat[:oid,:oid]
address ALGblkjoin
comment "Simple stupid block join for out-of-memory joins";

pattern algebra.scanhashjoin(b:bat[:oid,:any_1],c:bat[:any_1,:oid]):bat[:oid,:oid]
address ALGscanhashjoin
comment "Simple multi-scan hash join for out-of-memory joins";

pattern algebra.partjoin(b:bat[:oid,:int],c:bat[:int,:oid]):bat[:oid,:oid]
address ALGpartjoin
comment "A simple hash-/radix-partitioned hash-join implementation (for out-of-memory joins);
	 num_part must be power of 2;
	 num_part == nil:int  => automatically tuned to memory size";
@{
@include prelude.mx
@+ Implementation section
In most cases we pass a BAT identifier, which should be unified
with a BAT descriptor. Upon failure we can simply abort the function.

@h
#ifndef _ALGEBRA_EXTENSIONS_H
#define _ALGEBRA_EXTENSIONS_H
#include "mal_box.h"
#include "mal_client.h"
#include "mal_interpreter.h"
#include "bat5.h"
#include "algebra.h"

#ifdef WIN32
#ifndef LIBALGEBRAEXTENSIONS
#define ae_export extern __declspec(dllimport)
#else
#define ae_export extern __declspec(dllexport)
#endif
#else
#define ae_export extern
#endif

ae_export str ALGprojectCst(Client cntxt,MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
ae_export str ALGprojectCstBody(bat *result, int *bid, ptr *p, int tt);
ae_export str ALGprejoin(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
ae_export str ALGblkjoin(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
ae_export str ALGscanhashjoin(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
ae_export str ALGpartjoin(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
#endif /* _ALGEBRA_EXTENSIONS_H*/

@c
#include "mal_config.h"
#include "algebraExtensions.h"
#include "mal_errors.h"
#include "mmath.h"
#include <gdk_posix.h>
#define PGALIGN(X) (void*)( ( ((size_t)X)/MT_pagesize()) * MT_pagesize())

str
ALGprojectCstBody(bat *result, int *bid, ptr *p, int tt){
	BAT *b, *bn;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "bbp.project", INTERNAL_BAT_ACCESS);
	}

	if (ATOMvarsized(tt)) {
		if (p == 0 || *(str *) p == 0)
			p = (ptr *) str_nil;
		else
			p = *(ptr **) p;
	}
	bn = BATconst(b, tt, p);
	BBPunfix(b->batCacheid);
	if (bn) {
		*result = bn->batCacheid;
		BBPkeepref(bn->batCacheid);
		return MAL_SUCCEED;
	}
	throw(MAL, "bbp.project", INTERNAL_OBJ_CREATE);
}

str
ALGprojectCst(Client cntxt,MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	int *result = (int *) getArgReference(stk, pci, 0);
	int *bid = (int *) getArgReference(stk, pci, 1);
	ptr *p = (ptr *) getArgReference(stk, pci, 2);
	int tt = getArgType(mb, pci, 2);

	(void) cntxt;
	return ALGprojectCstBody(result, bid, p, tt);
}
@-
Bloom filters can be used to reduce the processing cost of
joins in case of out-of-memory situations.
This footprint in terms of percentage of main memory use
is calculated for the heap(s) only.
@c

#define DEBUG_BLOOMFILTER

static
size_t GDKbatfootprint(BAT *b){
	size_t mem = MT_npages() * MT_pagesize();
	size_t size = b->H->heap.size + b->T->heap.size;
	ALGODEBUG THRprintf(GDKout,
		"footprint " SZFMT " " SZFMT " " SZFMT" \n",mem, size, size /(mem/100));
	return size /(mem/100);
}

#define MASK 1024*64	/* power of 2 */
#define THRESHOLD 50000

#define setBit(X, Y, Z) (X[Y] |= Z)
#define tstBit(X, Y) (X[Y] == 1)

/* static int primes[]= {577, 601, 613, 619, 7, 41, 239, 9369319, 769,787};*/

typedef struct{
	int bits;
	size_t prime;
	size_t mask;
	size_t fill;
	char *hash;
} Filter;

void 
ALGsetFilter(BAT *b, Filter *h, int prime){
	BUN i, blim;
	int *bv, val;

	blim= BATcount(b);
	bv = (int*) Tloc(b, BUNfirst(b));
	h->bits = prime/2 ;
	do {
		h->hash = (char *) GDKzalloc( 1 << h->bits);
		h->mask = (1 << h->bits) -1;
		h->prime = (1 << (prime)) -1;
		h->fill = 0;
		for(i=0; i<blim; i++){
			val = (h->prime * bv[i]) % h->mask;
			if ( h->hash[val] == 0){
				h->hash[val] = 1;
				h->fill++;
				if (h->fill > h->mask/2)
					break;
			}
		}
		if (h->fill < h->mask/2)
			break;
		GDKfree(h->hash);
		h->bits ++;
	} while( h->prime <= (size_t) prime+4);
#ifdef DEBUG_BLOOMFILTER
	THRprintf(GDKout,"hash %d %o %f %\n", h->bits, h->prime, (h->fill+0.0)/ ((h->prime+1)/100));
#endif
}

static BAT *
GDKblockjoin(BAT *b, BAT *c){
	BAT *cp, *j, *bn = 0;
	BUN blim, cap = BUN_NONE;
	BUN clim,cl;
	int k =0;
	BUN blk = (BUN) (MT_npages() * MT_pagesize() / (4.0 * (sizeof(int) + ATOMsize(b->ttype))));

	blim = BATcount(b);
	clim = BATcount(c);
	k =0;
	for( cl = 0; cl < clim + blk; cl+= blk){
		k++;
		cp = BATslice(c, cl, cl+blk);
		posix_madvise(PGALIGN(Tloc(b,BUNfirst(b))), BATcount(b) * sizeof(int), MADV_SEQUENTIAL);
		j = BATjoin(b,cp, cap);
		if( BATcount(j) > 0){
			if (bn == 0)
				bn = BATnew( j->htype, j->ttype, BATcount(j)*clim/blk);
			bn= BATappend(bn,j, FALSE);
		}
		cap = BATcount(j )* 2;
		BBPunfix(j->batCacheid);
		BBPunfix( cp->batCacheid);
	}
printf("block size " BUNFMT "\n|",blk);
printf("outersize " BUNFMT " inner size " BUNFMT "\n", blim,clim);
printf("inner loop %d\n",k);
	if ( bn == 0)
			bn = BATnew( TYPE_oid, TYPE_oid, 0);
	return bn;
}

/* a variation is where you try to explore all points before moving on */
static BAT *
GDKblockjoin2(BAT *b, BAT *c){
	BAT *bp, *cp, *j, *bn = 0;
	BUN blim, bl, cap = BUN_NONE;
	BUN clim,cl;
	int i=0, k =0;
	size_t blk = (size_t) (MT_npages() * MT_pagesize() / (4.0 * (sizeof(int) + ATOMsize(b->ttype))));

	blim = BATcount(b);
	clim = BATcount(c);
	
	for( bl = 0; bl < blim + blk; bl+= blk){
		i++;
		bp = BATslice(b, bl, bl+blk);
		posix_madvise(PGALIGN(Tloc(bp,BUNfirst(bp))), BATcount(bp) * sizeof(int), MADV_SEQUENTIAL);
		k =0;
		printf("next outer %d\n",i);
		for( cl = 0; cl < clim + blk; cl+= blk){
			k++;
			cp = BATslice(c, cl, cl+blk);
		posix_madvise(PGALIGN(Tloc(cp,BUNfirst(cp))), BATcount(cp) * sizeof(int), MADV_SEQUENTIAL);
			j = BATjoin(bp,cp, cap);
			if (bn == 0)
				bn = BATnew( j->htype, j->ttype, BATcount(j)*clim/blk);
			bn= BATappend(bn,j, TRUE);
			cap = BATcount(j )* 2;
			BBPunfix(j->batCacheid);
			BBPunfix( cp->batCacheid);
		}
		BBPunfix( bp->batCacheid);
	}
printf("block size " SZFMT "\n|",blk);
printf("outersize " BUNFMT " inner size " BUNFMT "\n", blim,clim);
printf("inner loop %d\n",k);
	return bn;
}

/* a multi-scan-hash solution */
static BAT *
GDKscanhashjoin(BAT *b, BAT *c){
	BAT **bp = 0, **cp = 0, *j, *bn = 0;
	BUN blim, cap = BUN_NONE;
	BUN clim;
	BUN p,q;
	BATiter bit,cit;
	int type= b->ttype;
	int box=0, *bhash, *chash;
	int l;
	BUN v,i,mask, bcap, ccap;

	size_t blk = (size_t) (MT_npages() * MT_pagesize() / (4.0 * (sizeof(int) + ATOMsize(b->ttype))));

	blim = BATcount(b);
	mask = HASHmask(blim/blk);
	clim = BATcount(c);
	if ( HASHmask(clim/blk) >mask)
		mask = HASHmask(clim/blk);
printf("mask " BUNFMT "\n",mask);

	/* collect the statistics first */
	bhash = GDKzalloc(sizeof(int) * mask);
	chash = GDKzalloc(sizeof(int) * mask);
	mask--;

	bit = bat_iterator(b);
	cit = bat_iterator(c);
	BATloop(b,p,q){
		ptr t = (ptr) BUNtail(bit,p);
		i= (int) ((mask*ATOMhash(type,t)) & mask);
		bhash[i]++;
	}
	BATloop(c,p,q){
		i= (int) ((mask * ATOMhash(type,BUNhead(cit,p))) & mask);
		chash[i]++;
	}

	/* in the next stage we determine the buckets */
	i = 0;
	bp= (BAT**) GDKzalloc( (256) * sizeof( BAT*));
	cp= (BAT**) GDKzalloc( (256) * sizeof( BAT*));
	do{
		box++;
		cap = bcap = ccap = 0;
		for ( ; i <= mask && cap < blk; i++){
			/* printf("hash "BUNFMT " bcap %d ccap %d\n",i,bhash[i],chash[i]);*/
			if ( bhash[i]== 0 ) chash[i] = 0;
			else
			if ( chash[i] == 0 ) bhash[i] = 0;
			else {
				cap += bhash[i] + chash[i];
				bcap += bhash[i];
				ccap += chash[i];
				bhash[i] = box;
				chash[i] = box;
			}
		}
		bp[box] = BATnew(TYPE_oid,b->ttype, bcap);
		cp[box] = BATnew(c->htype,TYPE_oid, ccap);
		/* printf("next stage %d "BUNFMT " bcap " BUNFMT" ccap " BUNFMT"\n",box,,i,bcap,ccap);*/
	} while(box < 255 && i < mask);

	if ( box == 255 ){
		GDKerror("Too many fragments ");
		return 0;
	}

	/* catch the single loop ones */
	/* we could also catch a box=2 case by avoiding the write
		of the temporary to disk, using a second read instead */
	if (box == 1 ){
		bn = BATjoin(b,c,BUN_NONE);
		BBPunfix( bp[1]->batCacheid);
		BBPunfix( cp[1]->batCacheid);
	} else {
		/* now we distributed the elements by hash */
		BATloop(b,p,q){
			ptr t = (ptr) BUNtail(bit,p);
			v= (int) ( (mask * ATOMhash(type,t)) & mask);
			if ( bhash[v] > 0)
				BUNins(bp[bhash[v]], (ptr) BUNhead(bit,p), t, TRUE);
		}
		BATloop(c,p,q){
			ptr t = (ptr) BUNhead(cit,p);
			v= (int) ((mask * ATOMhash(type,t)) & mask);
			if ( chash[v] > 0)
				BUNins(cp[chash[v]], t, (ptr) BUNtail(cit,p), TRUE);
		}
		
		bn = BATnew( b->htype, c->ttype, 0);
		for ( l=1; l <= box; l++){
printf("box %d " BUNFMT " " BUNFMT "\n",l, BATcount(bp[l]), BATcount(cp[l]));
			j = BATjoin(bp[l],cp[l], BUN_NONE);
			bn= BATappend(bn,j, TRUE);
			BBPunfix( bp[l]->batCacheid);
			BBPunfix( cp[l]->batCacheid);
			BBPunfix(j->batCacheid);
		} 
	}
	GDKfree(bp);
	GDKfree(cp);
	return bn;
}

static void
GDKremap( bte *idx, BUN sze, int low, int hgh, BAT *rd){
	BUN i,hb= 0,x,z=0;
	Hash *h;
	BATiter bi = bat_iterator(rd);

	assert(rd->htype == TYPE_oid );
	BAThash(rd, BATcount(rd));
	h= rd->H->hash;
	for( i = 0; i< sze; i++) {
		hb = (BUN)(idx[i] & 255);
		if ( hb >= (BUN)low && hb < (BUN)hgh ){
			/* locate all elements with value z and replace them */
			HASHloop_oid(bi,h,x,z){
				*(oid*) BUNhead(bi,x) = (oid) i;
			}
			z++;
		}
	}
}

static BAT *
GDKclusterhashjoin(BAT *b, BAT *c){
	BAT *bp, *cp, *jn, *bn = 0;
	BAT *bmap, *cmap;
	BUN prime,p,q, bcnt[256],ccnt[256],cnt,bcap,ccap;
	BATiter bit,cit;
	int type= b->ttype;
	int i,low,hgh;
	int *celm, *belm;
	bte *bidx, *cidx;
	BUN blk = (BUN) (  (MT_npages() * MT_pagesize()) / (2 * (ATOMsize(b->ttype) + + ATOMsize(c->htype) + 2 *sizeof(oid))) );

	memset((char*)bcnt, 0, 256 * sizeof(BUN));
	memset((char*)ccnt, 0, 256 * sizeof(BUN));

	prime = HASHmask(BATcount(b));
	if ( HASHmask(BATcount(c)) > prime)
		prime = HASHmask(BATcount(c));
	prime=1;
printf("prime " BUNFMT "\n",prime);

	/* construct the cluster map */
	bmap = BATnew(TYPE_void, TYPE_bte, BATcount(b));
	bidx = (bte*) Tloc(bmap,BUNfirst(bmap));

	bit = bat_iterator(b);
	posix_madvise(PGALIGN(Tloc(b,BUNfirst(b))), BATcount(b) * sizeof(int), MADV_SEQUENTIAL);
	BATloop(b,p,q){
		ptr t = (ptr) BUNtail(bit,p);
		i = (int) ((prime*ATOMhash(type,t)) & 255);
		*bidx = (bte) i;
		bcnt[i]++;
		bidx++;
	}
	BATsetcount(bmap, BATcount(b));

	cmap = BATnew(TYPE_void, TYPE_bte, BATcount(c));
	cidx = (bte*) Tloc(cmap,BUNfirst(cmap));
	posix_madvise(PGALIGN(Hloc(c,BUNfirst(c))), BATcount(c) * sizeof(int), MADV_SEQUENTIAL);
	cit = bat_iterator(c);
	BATloop(c,p,q){
		ptr t = (ptr) BUNhead(cit,p);
		i = ((prime*ATOMhash(type,t)) & 255);
		*cidx = (bte) i;
		ccnt[i]++;
		cidx++;
	}
	BATsetcount(cmap, BATcount(c));

	/* phase two: perform the partial joins  */

	bp = cp = 0;
	low = hgh = 0;
	do{
		/* calculate the range */
		low= hgh;
		cnt = 0;
		bcap = ccap = 0;
		for( ; hgh<256; hgh++){
			if ( cnt + bcnt[hgh] + ccnt[hgh] >blk ) 
				break;
			cnt += bcnt[hgh] + ccnt[hgh];
			bcap += bcnt[hgh];
			ccap += ccnt[hgh];
		}
		printf("box %d %d " BUNFMT " " BUNFMT " " BUNFMT"\n",low,hgh,cnt,bcap,ccap); 
		
		/* prepare the scratch BATs  try to reuse them*/
		if (bp == 0 || BATcapacity(bp) < bcap){
			if ( bp )
				BBPunfix(bp->batCacheid);
			bp = BATnew( TYPE_void, b->ttype, bcap);
		} 
		BATclear(bp);

		/* collect the tuples */
		bit = bat_iterator(b);
		bidx = (bte*) Tloc(bmap,BUNfirst(bmap));
		belm = (int*) Tloc(bp,BUNfirst(bp));
		BATsetcount(bp,bcap);
		bp->tdense = FALSE;
		bp->tkey = FALSE;
		bp->tsorted = FALSE;
		bcap = BATcount(b);

		posix_madvise( PGALIGN(Tloc(b,BUNfirst(b))), BATcount(b) * sizeof(int), MADV_SEQUENTIAL);
		posix_madvise(PGALIGN(bidx),BATcount(b) * sizeof(int), MADV_SEQUENTIAL);
		for( cnt= 0; cnt < bcap; cnt++)
		if ( (int)(bidx[cnt] & 255) >=low && (int)(bidx[cnt] &255) <hgh )
			*belm++ = *(int*) BUNtail(bit,cnt);

		if ( cp == 0 ||   BATcapacity(cp) < ccap){
			if (cp)
				BBPunfix(cp->batCacheid);
			cp = BATnew( TYPE_void, c->htype, ccap);
		} 

		BATclear(cp);
		cit = bat_iterator(c);
		cidx = (bte*) Tloc(cmap,BUNfirst(cmap));
		celm = (int*) Tloc(cp,BUNfirst(cp));
		BATsetcount(cp,ccap);
		cp->tdense = FALSE;
		cp->tkey = FALSE;
		cp->tsorted = FALSE;
		ccap = BATcount(c);

		posix_madvise( PGALIGN(Hloc(c,BUNfirst(c))), BATcount(c) * sizeof(int), MADV_SEQUENTIAL);
		for( cnt= 0; cnt < ccap; cnt++)
		if ( (int)(cidx[cnt] & 255) >=low && (int)(cidx[cnt] & 255) <hgh )
			*celm++ = *(int*) BUNtail(cit,cnt);

		printf("input " BUNFMT " " BUNFMT "\n", BATcount(bp), BATcount(cp));
		jn = BATjoin(bp, BATmirror(cp), BATcount(bp));
		printf("join " BUNFMT "\n", BATcount(jn));
		if ( BATcount(jn) == 0) continue;
		posix_madvise( PGALIGN(Hloc(jn,BUNfirst(jn))), BATcount(jn) * sizeof(int), MADV_SEQUENTIAL);
	if(0)
		GDKremap(bidx, BATcount(bmap), low,hgh, jn);
		posix_madvise( PGALIGN(Tloc(jn,BUNfirst(jn))), BATcount(jn) * sizeof(int), MADV_SEQUENTIAL);
	if(0)
		GDKremap(cidx, BATcount(cmap), low,hgh, BATmirror(jn));
		if( bn == 0)
			bn = jn;
		else
			BATappend(bn,jn,FALSE);
	}  while ( hgh < 256);
	if( bn == 0)
		bn = BATnew( b->htype, c->ttype, 0);
	return bn;
}



/* ======== hash-partitioned (hash-)join ======== */

/*#define StM_DEBUG*/
/*#define StM_L1*/
/*#define StM_HOT_COLD*/
/*#define StM_MADVICE*/
/*#define StM_BAT_SAVE*/
/*#define StM_GDK_M_SIZES*/

#define StMhash1(v) ((v)^((v)>>3)^((v)>>5))
#define StMhash2(v) StMhash1((v)^((v)>>8))
#define StMhash4(v) StMhash2((v)^((v)>>16))
#define StMhash8(v) StMhash4((v)^((v)>>32))

@= StMpartjoin_bailout
	if (bn) {
		BBPunfix(bn->batCacheid);
		bn = 0;
	}
	if (jj) {
		for (p = 0; p < parts; p++) {
			if (jj[p]) {
				BBPunfix(jj[p]->batCacheid);
				jj[p] = 0;
			}
		}
		GDKfree(jj);
		jj = 0;
	}
	if (bb) {
		for (p = 0; p < parts; p++) {
			if (bb[p]) {
				BBPunfix(bb[p]->batCacheid);
				bb[p] = 0;
			}
		}
		GDKfree(bb);
		bb = 0;
	}
	if (cc) {
		for (p = 0; p < parts; p++) {
			if (cc[p]) {
				BBPunfix(cc[p]->batCacheid);
				cc[p] = 0;
			}
		}
		GDKfree(cc);
		cc = 0;
	}
	if (bbh) {
		GDKfree(bbh);
		bbh = 0;
	}
	if (bbt) {
		GDKfree(bbt);
		bbt = 0;
	}
	if (cch) {
		GDKfree(cch);
		cch = 0;
	}
	if (cct) {
		GDKfree(cct);
		cct = 0;
	}
	if (bbi) {
		GDKfree(bbi);
		bbi = 0;
	}
	if (bbj) {
		GDKfree(bbj);
		bbj = 0;
	}
	if (cci) {
		GDKfree(cci);
		cci = 0;
	}
	if (b) {
		BBPunfix(b->batCacheid);
		*_b = b = 0;
	}
	if (c) {
		BBPunfix(c->batCacheid);
		*_c = c = 0;
	}
#ifdef StM_GDK_M_SIZES
	GDK_mmap_minsize = org_mmap_minsize;
	GDK_mem_bigsize  = org_mem_bigsize;
#endif
	return 0;
@c

static BAT *
StMpartjoin(BAT **_b, BAT **_c, int shift) {
	size_t sz_mem = MT_npages() * MT_pagesize();
	size_t sz_l2  = 4 * 1024 * 1024;
#ifdef StM_L1
	size_t sz_l1  = 32 * 1024;
#endif
#ifdef StM_GDK_M_SIZES
	size_t org_mmap_minsize = GDK_mmap_minsize;
	size_t org_mem_bigsize  = GDK_mem_bigsize;
#endif
	BAT *b = *_b, *c = *_c;
	bit swap = FALSE;
	int parts, p, mask, shift_inc = 0;
#ifdef StM_DEBUG
	lng t0, t1;
#endif  
	BAT *bn = 0, **bb = 0, **cc = 0, **jj = 0;
	bte *bbj = 0;
	BUN cap = BUN_NONE, i, bbuns, cbuns, *bbi = 0, *cci = 0, jbuns = 0;
	BUN blim = BATcount(b);
	BUN clim = BATcount(c);
	oid **bbh = 0, **cct = 0;
	int **bbt = 0, **cch = 0;

/*
#ifdef StM_DEBUG
printf("left  size " BUNFMT "\n", blim);
printf("right size " BUNFMT "\n", clim);
printf("mem   size " SZFMT "\n", sz_mem);
printf("L2    size " SZFMT "\n", sz_l2);
#ifdef StM_L1
printf("L1    size " SZFMT "\n", sz_l1);
#endif
fflush(stdout);
#endif
*/

	if (blim < clim) {
		/* swap: use smaller as right/inner */
		BAT *x = b;
		b = BATmirror(c);
		c = BATmirror(x);
		blim = BATcount(b);
		clim = BATcount(c);
		swap = TRUE;
	}

#ifdef StM_L1
	if (clim < sz_l1 / 64) {
		/* smaller fits well in L1
		 * => resort to standard BATjoin()
		 */
#else
	if (clim < sz_l2 / 64) {
		/* smaller fits well in L2
		 * => resort to standard BATjoin()
		 */
#endif
/*
#ifdef StM_DEBUG
		printf("resorting to standard BATjoin()\n");
		fflush(stdout);
#endif  
*/
		bn = BATjoin(b, c, BUN_NONE);
		BBPunfix(b->batCacheid);
		BBPunfix(c->batCacheid);
		*_b = *_c = b = c = 0;
		if (bn == 0) {
			printf("k: (bn == 0)\n");
			fflush(stdout);
			return 0;
		}
		if (swap) {
			bn = BATmirror(bn);
		}
		return bn;
	}
#ifdef StM_L1
	else
	if (clim < sz_l2 / 32) {
		/* smaller exceeds L1 but fits in L2
		 * => partition for L1
		 */
		parts = 1;
		/* smaller determines number of partitions
		 * => minimizes number of partitions
		 */
		while (clim / parts > sz_l1 / 128 && parts < 4096) {
			parts <<= 1;
		}
@(
		/* larger determines number of partitions
		 * => minimizes size of inner partitions
		 */
		while (blim / parts > sz_l1 / 128 && parts < 4096) {
			parts <<= 1;
		}
@)
	}
#endif
	else
	if (clim < sz_mem / 32) {
		/* smaller exceeds L2 but fits in mem
		 * => partition for L2
		 */
		parts = 1;
		/* smaller determines number of partitions
		 * => minimizes number of partitions
		 */
		while (clim / parts > sz_l2 / 128 && parts < 4096) {
			parts <<= 1;
		}
@(
		/* larger determines number of partitions
		 * => minimizes size of inner partitions
		 */
		while (blim / parts > sz_l2 / 128 && parts < 4096) {
			parts <<= 1;
		}
@)
	}
	else
	/* (clim >= sz_mem / 64) */ {
		/* smaller exceeds mem
		 * => partition for mem
		 */
		parts = 1;
		/* smaller determines number of partitions
		 * => minimizes number of partitions
		 */
		while (clim / parts > sz_mem / 128 && parts < 1024) {
			parts <<= 1;
		}
@(
		/* larger determines number of partitions
		 * => minimizes size of inner partitions
		 */
		while (blim / parts > sz_mem / 128 && parts < 1024) {
			parts <<= 1;
		}
@)
	}

#ifdef StM_GDK_M_SIZES
	GDK_mmap_minsize = MIN(GDK_mmap_minsize, sz_mem);
	GDK_mem_bigsize  = MIN(GDK_mem_bigsize,  sz_mem);
#endif

	p = 1;
	while (p < parts) {
		p <<= 1;
		shift_inc++;
	}
	mask = parts - 1;
	bbuns = (BUN) (2 * (dbl)blim / (dbl)parts);
	cbuns = (BUN) (2 * (dbl)clim / (dbl)parts);

#ifdef StM_DEBUG
printf("left  size " BUNFMT "\n", blim);
printf("right size " BUNFMT "\n", clim);
printf("mem   size " SZFMT "\n", sz_mem);
printf("L2    size " SZFMT "\n", sz_l2);

printf("parts/joins %d\n", parts);
printf("mask        %d\n", mask);
printf("shift       %d\n", shift);
printf("shift_inc   %d\n", shift_inc);
printf("buns left   " BUNFMT "\n", bbuns);
printf("buns right  " BUNFMT "\n", cbuns);
fflush(stdout);
#endif  

#ifdef StM_HOT_COLD
	BBPcold(b->batCacheid);
#endif

{
	bit c_hsorted = BAThordered(c)&1;
	bit c_tsorted = BATtordered(c)&1;
	bit c_hkey = c->hkey;
	bit c_tkey = c->tkey;
	int *ch = (int*) Hloc(c, BUNfirst(c));
	oid *cto = (oid*) Tloc(c, BUNfirst(c));
	oid  ctv = c->tseqbase;

	cc = (BAT**) GDKzalloc(parts * sizeof(BAT*));
	if (cc == 0) {
		printf("1: (cc == 0)\n");
		fflush(stdout);
		@:StMpartjoin_bailout@
	}
	cch = (int**) GDKmalloc(parts * sizeof(int*));
	if (cch == 0) {
		printf("2: (cch == 0)\n");
		fflush(stdout);
		@:StMpartjoin_bailout@
	}
	cct = (oid**) GDKmalloc(parts * sizeof(oid*));
	if (cct == 0) {
		printf("3: (cct == 0)\n");
		fflush(stdout);
		@:StMpartjoin_bailout@
	}
	cci = (BUN*) GDKzalloc(parts * sizeof(BUN));
	if (cci == 0) {
		printf("4: (cci == 0)\n");
		fflush(stdout);
		@:StMpartjoin_bailout@
	}
	for (p = 0; p < parts; p++) {
		cc[p] = BATnew(c->htype, TYPE_oid, cbuns);
		if (cc[p] == 0) {
			printf("5: (cc[p] == 0)\n");
			fflush(stdout);
			@:StMpartjoin_bailout@
		}
#ifdef StM_MADVICE
		cc[p]->batDirty = TRUE;
		if (BATmmap(cc[p], STORE_MMAP, STORE_MMAP, STORE_MMAP, STORE_MMAP) != 0) {
			@:StMpartjoin_bailout@
		}
		if (BATmadvise(cc[p], BUF_SEQUENTIAL, BUF_SEQUENTIAL, BUF_SEQUENTIAL, BUF_SEQUENTIAL) != 0) {
			@:StMpartjoin_bailout@
		}
#endif
		cch[p] = (int*) Hloc(cc[p], BUNfirst(cc[p]));
		cct[p] = (oid*) Tloc(cc[p], BUNfirst(cc[p]));
	}
#ifdef StM_DEBUG
t0 = GDKusec();
#endif  
	if (c->ttype == TYPE_void) {
		for (i = 0; i < clim; i++, ctv++) {
			p = (int) ((StMhash4(ch[i]) >> shift) & mask);
			if (cci[p] >= cbuns) {
				/* TODO: BATextend to handle overflow */
				printf("6: (cci[p] >= cbuns)\n");
				fflush(stdout);
				@:StMpartjoin_bailout@
			}
			cch[p][cci[p]] = ch[i];
			cct[p][cci[p]] = ctv;
			cci[p]++;
		}
	} else {
		for (i = 0; i < clim; i++) {
			p = (int) ((StMhash4(ch[i]) >> shift) & mask);
			if (cci[p] >= cbuns) {
				/* TODO: BATextend to handle overflow */
				printf("7: (cci[p] >= cbuns)\n");
				fflush(stdout);
				@:StMpartjoin_bailout@
			}
			cch[p][cci[p]] = ch[i];
			cct[p][cci[p]] = cto[i];
			cci[p]++;
		}
	}
#ifdef StM_DEBUG
t1 = GDKusec();
printf("part inner fill  " LLFMT "\n", t1 - t0);
fflush(stdout);
#endif  
#ifdef StM_HOT_COLD
	/*BBPcold(c->batCacheid);*/
#endif
	BBPunfix(c->batCacheid);
	*_c = c = 0;
#ifdef StM_DEBUG
t0 = GDKusec();
#endif  
	for (p = 0; p < parts; p++) {
		if (cci[p] > 0) {
			bit trivial  = cci[p] < 2;
			
			BATsetcount(cc[p], cci[p]);
			cc[p]->batDirty = TRUE;
			cc[p]->tdense = trivial;
			if (cc[p]->tdense) {
				BATseqbase(BATmirror(cc[p]), cct[p][0]);
			}
			cc[p]->hsorted = (trivial || c_hsorted) ? GDK_SORTED : 0;
			BATkey(cc[p], trivial || c_hkey);
			cc[p]->tsorted = (trivial || c_tsorted) ? GDK_SORTED : 0;
			BATkey(BATmirror(cc[p]), trivial || c_tkey);

			BATsetaccess(cc[p], BAT_READ);
#ifdef StM_MADVICE
			if (BATmadvise(cc[p], BUF_DONTNEED, BUF_DONTNEED, BUF_DONTNEED, BUF_DONTNEED) != 0) {
				@:StMpartjoin_bailout@
			}
#endif
#ifdef StM_BAT_SAVE
			if ((cc[p] = BATsave(cc[p])) == NULL) {
				@:StMpartjoin_bailout@
			}
#endif
#ifdef StM_HOT_COLD
			BBPcold(cc[p]->batCacheid);
#endif
		} else {
			BBPunfix(cc[p]->batCacheid);
			cc[p] = 0;
		}
	}
#ifdef StM_DEBUG
t1 = GDKusec();
printf("part inner save  " LLFMT "\n", t1 - t0);
fflush(stdout);
#endif  
	GDKfree(cch);
	GDKfree(cct);
	GDKfree(cci);
	cch = 0;
	cct = 0;
	cci = 0;
}

#ifdef StM_HOT_COLD
	BBPhot(b->batCacheid);
#endif

{
	bit b_hsorted = BAThordered(b)&1;
	bit b_tsorted = BATtordered(b)&1;
	bit b_hkey = b->hkey;
	bit b_tkey = b->tkey;
	oid  bhv = b->hseqbase;
	oid *bho = (oid*) Hloc(b, BUNfirst(b));
	int *bt = (int*) Tloc(b, BUNfirst(b));
	
	bb = (BAT**) GDKzalloc(parts * sizeof(BAT*));
	if (bb == 0) {
		printf("8: (bb == 0)\n");
		fflush(stdout);
		@:StMpartjoin_bailout@
	}
	bbh = (oid**) GDKmalloc(parts * sizeof(oid*));
	if (bbh == 0) {
		printf("9: (bbh == 0)\n");
		fflush(stdout);
		@:StMpartjoin_bailout@
	}
	bbt = (int**) GDKmalloc(parts * sizeof(int*));
	if (bbt == 0) {
		printf("a: (bbt == 0)\n");
		fflush(stdout);
		@:StMpartjoin_bailout@
	}
	bbi = (BUN*) GDKzalloc(parts * sizeof(BUN));
	if (bbi == 0) {
		printf("b: (bbi == 0)\n");
		fflush(stdout);
		@:StMpartjoin_bailout@
	}
	bbj = (bte*) GDKzalloc(parts * sizeof(bte));
	if (bbj == 0) {
		printf("c: (bb == 0)\n");
		fflush(stdout);
		@:StMpartjoin_bailout@
	}
	for (p = 0; p < parts; p++) {
		bb[p] = BATnew(TYPE_oid, b->ttype, cc[p] == NULL ? 1 : bbuns);
		if (bb[p] == 0) {
			printf("d: (bb[p] == 0)\n");
			fflush(stdout);
			@:StMpartjoin_bailout@
		}
#ifdef StM_MADVICE
		bb[p]->batDirty = TRUE;
		if (BATmmap(bb[p], STORE_MMAP, STORE_MMAP, STORE_MMAP, STORE_MMAP) != 0) {
			@:StMpartjoin_bailout@
		}
		if (BATmadvise(bb[p], BUF_SEQUENTIAL, BUF_SEQUENTIAL, BUF_SEQUENTIAL, BUF_SEQUENTIAL) != 0) {
			@:StMpartjoin_bailout@
		}
#endif
		bbh[p] = (oid*) Hloc(bb[p], BUNfirst(bb[p]));
		bbt[p] = (int*) Tloc(bb[p], BUNfirst(bb[p]));
		bbj[p] = cc[p] == NULL ? 0 : 1;
	}
#ifdef StM_DEBUG
t0 = GDKusec();
#endif  
	if (b->htype == TYPE_void) {
		for (i = 0; i < blim; i++, bhv++) {
			p = (int) ((StMhash4(bt[i]) >> shift) & mask);
			if (bbi[p] >= bbuns) {
				/* TODO: BATextend to handle overflow */
				printf("e: (bbi[p] >= bbuns)\n");
				fflush(stdout);
				@:StMpartjoin_bailout@
			}
			bbh[p][bbi[p]] = bhv;
			bbt[p][bbi[p]] = bt[i];
			bbi[p] += bbj[p];
		}
	} else {
		for (i = 0; i < blim; i++) {
			p = (int) ((StMhash4(bt[i]) >> shift) & mask);
			if (bbi[p] >= bbuns) {
				/* TODO: BATextend to handle overflow */
				printf("f: (bbi[p] >= bbuns)\n");
				fflush(stdout);
				@:StMpartjoin_bailout@
			}
			bbh[p][bbi[p]] = bho[i];
			bbt[p][bbi[p]] = bt[i];
			bbi[p] += bbj[p];
		}
	}
#ifdef StM_DEBUG
t1 = GDKusec();
printf("part outer fill  " LLFMT "\n", t1 - t0);
fflush(stdout);
#endif  
#ifdef StM_HOT_COLD
	/*BBPcold(b->batCacheid);*/
#endif
	BBPunfix(b->batCacheid);
	*_b = b = 0;
#ifdef StM_DEBUG
t0 = GDKusec();
#endif  
	for (p = 0; p < parts; p++) {
		if (bbi[p] > 0) {
			bit trivial  = bbi[p] < 2;
			
			BATsetcount(bb[p], bbi[p]);
			bb[p]->batDirty = TRUE;
			bb[p]->hdense = trivial;
			if (bb[p]->hdense) {
				BATseqbase(bb[p], bbh[p][0]);
			}
			bb[p]->hsorted = (trivial || b_hsorted) ? GDK_SORTED : 0;
			BATkey(bb[p], trivial || b_hkey);
			bb[p]->tsorted = (trivial || b_tsorted) ? GDK_SORTED : 0;
			BATkey(BATmirror(bb[p]), trivial || b_tkey);

			BATsetaccess(bb[p], BAT_READ);
#ifdef StM_MADVICE
			if (BATmadvise(bb[p], BUF_DONTNEED, BUF_DONTNEED, BUF_DONTNEED, BUF_DONTNEED) != 0) {
				@:StMpartjoin_bailout@
			}
#endif
#ifdef StM_BAT_SAVE
			if ((bb[p] = BATsave(bb[p])) == NULL) {
				@:StMpartjoin_bailout@
			}
#endif
#ifdef StM_HOT_COLD
			BBPcold(bb[p]->batCacheid);
#endif
		} else {
			BBPunfix(bb[p]->batCacheid);
			bb[p] = 0;
		}
	}
#ifdef StM_DEBUG
t1 = GDKusec();
printf("part outer save  " LLFMT "\n", t1 - t0);
fflush(stdout);
#endif  
	GDKfree(bbh);
	GDKfree(bbt);
	GDKfree(bbi);
	GDKfree(bbj);
	bbh = 0;
	bbt = 0;
	bbi = 0;
	bbj = 0;
}

	jj = (BAT**) GDKzalloc(parts * sizeof(BAT*));
	if (jj == 0) {
		printf("g: (jj == 0)\n");
		fflush(stdout);
		@:StMpartjoin_bailout@
	}
	
#ifdef StM_DEBUG
t0 = GDKusec();
#endif  
	for (p = 0; p < parts; p++) {
		if (bb[p] && cc[p]) {
#ifdef StM_MADVICE
			if (BATmadvise(bb[p], BUF_WILLNEED, BUF_WILLNEED, BUF_WILLNEED, BUF_WILLNEED) != 0) {
				@:StMpartjoin_bailout@
			}
			if (BATmadvise(cc[p], BUF_WILLNEED, BUF_WILLNEED, BUF_WILLNEED, BUF_WILLNEED) != 0) {
				@:StMpartjoin_bailout@
			}
#endif
#ifdef StM_HOT_COLD
			BBPhot(bb[p]->batCacheid);
			BBPhot(cc[p]->batCacheid);
#endif
			jj[p] = StMpartjoin(&bb[p], &cc[p], shift + shift_inc);
			if (jj[p] == 0) {
				printf("h: (jj[p] == 0)\n");
				fflush(stdout);
				@:StMpartjoin_bailout@
			}
			if (BATcount(jj[p]) == 0) {
				BBPunfix(jj[p]->batCacheid);
				jj[p] = 0;
			} else {
				jbuns += BATcount(jj[p]);
				if (cap == BUN_NONE) {
					cap = 2 * BATcount(jj[p]);
				} else {
					cap = MAX(cap, 2 * BATcount(jj[p]));
				}
#ifdef StM_BAT_SAVE
				if ((jj[p] = BATsave(jj[p])) == NULL) {
					@:StMpartjoin_bailout@
				}
#endif
#ifdef StM_HOT_COLD
				BBPcold(jj[p]->batCacheid);
#endif
			}
		}
		if (bb[p]) {
			BBPunfix(bb[p]->batCacheid);
			bb[p] = 0;
		}
		if (cc[p]) {
			BBPunfix(cc[p]->batCacheid);
			cc[p] = 0;
		}
	}
#ifdef StM_DEBUG
t1 = GDKusec();
printf("join all parts   " LLFMT "\n", t1 - t0);
fflush(stdout);
#endif  
	
	GDKfree(bb);
	GDKfree(cc);
	bb = 0;
	cc = 0;

	bn = BATnew(TYPE_oid, TYPE_oid, jbuns);
	if (bn == 0) {
		printf("i: (bn == 0)\n");
		fflush(stdout);
		@:StMpartjoin_bailout@
	}
#ifdef StM_MADVICE
	bn->batDirty = TRUE;
	if (BATmmap(bn, STORE_MMAP, STORE_MMAP, STORE_MMAP, STORE_MMAP) != 0) {
		@:StMpartjoin_bailout@
	}
	if (BATmadvise(bn, BUF_SEQUENTIAL, BUF_SEQUENTIAL, BUF_SEQUENTIAL, BUF_SEQUENTIAL) != 0) {
		@:StMpartjoin_bailout@
	}
#endif
	
#ifdef StM_DEBUG
t0 = GDKusec();
#endif  
	for (p = 0; p < parts; p++) {
		if (jj[p] != 0) {
#ifdef StM_HOT_COLD
			BBPhot(jj[p]->batCacheid);
#endif
			bn = BATappend(bn, jj[p], TRUE);
			BBPunfix(jj[p]->batCacheid);
			jj[p] = 0;
			if (bn == 0) {
				printf("j: (bn == 0)\n");
				fflush(stdout);
				@:StMpartjoin_bailout@
			}
		}
	}
#ifdef StM_DEBUG
t1 = GDKusec();
printf("merge all parts  " LLFMT "\n", t1 - t0);
fflush(stdout);
#endif  

	BATsetaccess(bn, BAT_READ);	
	GDKfree(jj);
	jj = 0;

#ifdef StM_GDK_M_SIZES
	GDK_mmap_minsize = org_mmap_minsize;
	GDK_mem_bigsize  = org_mem_bigsize;
#endif

	if (swap) {
		bn = BATmirror(bn);
	}
	return bn;
}
/* -------- hash-partitioned (hash-)join -------- */



void
GDKbloomfilter_int(BAT *b, BAT *c, BAT **bn, BAT **cn){

	int *bv, *cv;
	char *bdone, *cdone;
	BUN i, blim, clim, bcnt=0, ccnt=0;
	Filter h[4];

	if ( BATcount(b) > BATcount(c) ) {
		GDKbloomfilter_int(c,b, cn, bn);
		return;
	}

	/* consider it an out-of-memory situation 
		when more then 25% is used, 
		otherwise use normal processing scheme 
	if ( b->ttype != TYPE_int || GDKbatfootprint(b) < 25 ){
		*bn = b;
		BBPkeepref(b->batCacheid);
		*cn = c;
		BBPkeepref(c->batCacheid);
		return;
	}	*/
	GDKbatfootprint(b);

	ALGsetFilter(b,&h[0],13);
	ALGsetFilter(b,&h[1],17);
	ALGsetFilter(b,&h[2],19);
	ALGsetFilter(b,&h[3],23);
	bv = (int*) Tloc(b, BUNfirst(b));
	cv = (int*) Tloc(c, BUNfirst(c));
	blim= BATcount(b);
	clim= BATcount(c);
	bdone = (char*) GDKzalloc(blim);
	cdone = (char*) GDKzalloc(clim);
#ifdef DEBUG_BLOOMFILTER
	stream_printf(GDKout,"Martin b " BUNFMT " ",blim);
	stream_printf(GDKout,"c " BUNFMT " \n",clim);
#endif

	for ( i = 0; i < clim; i++){
		int flg= 
		h[0].hash[(h[0].prime * cv[i]) % h[0].mask]==0 ||
		h[1].hash[(h[1].prime * cv[i]) % h[1].mask]==0 ||
		h[2].hash[(h[2].prime * cv[i]) % h[2].mask]==0 ||
		h[3].hash[(h[3].prime * cv[i]) % h[3].mask]==0;
		setBit(cdone,i, flg);
		ccnt += tstBit(cdone,i);
	}

	/* stage 2, produce a temporary table */
	/* create a snapshot */
	if ( bcnt == 0){
		*bn = b;
		BBPkeepref(b->batCacheid);
	} else {
		*bn = BATnew(TYPE_oid,TYPE_int, bcnt);
		for ( i = 0; i < blim; i++)
		if( !tstBit(bdone,i) ){
			oid o = (oid) i;
			*bn= BUNins(*bn,&o, &bv[i], FALSE);
		}
		BBPkeepref((*bn)->batCacheid);
	}

	/* create a snapshot */
	if ( ccnt ==0 ){
		*cn = c;
		BBPkeepref(c->batCacheid);
	} else {
		*cn = BATnew(TYPE_oid,TYPE_int, ccnt);
		for ( i = 0; i < clim; i++)
		if (!tstBit(cdone,i) ){
			oid o = (oid) i;
			*cn = BUNins(*cn,&o, &cv[i],FALSE);
		}
		BBPkeepref((*cn)->batCacheid);
	}
#ifdef DEBUG_BLOOMFILTER
		stream_printf(GDKout,"b-reduced " BUNFMT "->" BUNFMT "\n",blim,BATcount(*bn));
		stream_printf(GDKout,"c-reduced " BUNFMT "->" BUNFMT "\n",clim,BATcount(*cn));
#endif
	GDKfree(bdone);
	GDKfree(cdone);
}

#define bloomhash(x,y,z) ((unsigned int) ((x)*(y))%(z))
#define bloomhash1(x,y,z) ((int) ((((x)*((double)y))-((int)((x)*(y))))*(z)))
/* #define bloomhash1(x,y,z) ((unsigned int) ((x)*(y))%(z)) */

/*static double primes[]= {19,29,31,41,43,53,59,61};*/

@= print_bbloom
#ifdef DEBUG_BLOOMFILTER
counter = 0;
for (i = 0; i < mb; i++) {
	counter += bbloom[i];
}
stream_printf(GDKout,"bbloom has %d 1's and %d 0's\n", counter, mb-counter);
counter = 0;
#endif

@= print_cbloom
#ifdef DEBUG_BLOOMFILTER
counter = 0;
for (i = 0; i < mc; i++) {
	counter += cbloom[i];
}
stream_printf(GDKout,"cbloom has %d 1's and %d 0's\n", counter, mc-counter);
counter = 0;
#endif

@= body_smallsubset
	char *bbloom;
	int bp[4];
	mb = blim*12;
	bbloom = (char *) GDKmalloc(mb);
	memset(bbloom, 0, mb);
	for (i = 0; i < 4; i++) {
		bp[i] = (1 << (blog + i))+1;
	}

	/* for (b) { built bloom } */
	*bn = NULL;
	for (i = 0; i < blim; i++) {
		setBit(bbloom, bloomhash(bp[0],bv[i],mb), 1);
		setBit(bbloom, bloomhash(bp[1],bv[i],mb), 1);
		setBit(bbloom, bloomhash(bp[2],bv[i],mb), 1);
		setBit(bbloom, bloomhash(bp[3],bv[i],mb), 1);
	}

	/*  for (c) { test bbloom } */
	*cn = BATnew(TYPE_oid,TYPE_int, clim/4);
	for (i = 0; i < clim; i++) {
		if ((tstBit(bbloom, bloomhash(bp[0],cv[i],mb)) &&
			 tstBit(bbloom, bloomhash(bp[1],cv[i],mb)) &&
			 tstBit(bbloom, bloomhash(bp[2],cv[i],mb)) &&
			 tstBit(bbloom, bloomhash(bp[3],cv[i],mb)))) {
			oid o = (oid) i;
			*cn = BUNins(*cn, &o, &cv[i], FALSE);
		}
	}

@= body_equalinmem
	char *bbloom, *cbloom;
	int bp[4];
	int cp[4];
	mb = blim*12;
	bbloom = (char *) GDKmalloc(mb);
	memset(bbloom, 0, mb);
	for (i = 0; i < 4; i++) {
		bp[i] = (1 << (blog + i))+1;
		cp[i] = (1 << (clog + i))+1;
	}

	/* for (b) { built bloom } */
	for (i = 0; i < blim; i++) {
		setBit(bbloom, bloomhash(bp[0],bv[i],mb), 1);
		setBit(bbloom, bloomhash(bp[1],bv[i],mb), 1);
		setBit(bbloom, bloomhash(bp[2],bv[i],mb), 1);
		setBit(bbloom, bloomhash(bp[3],bv[i],mb), 1);
	}

	/*  for (c) { test bbloom; built cbloom } */
	mc = clim*12;
	cbloom = (char *) GDKmalloc(mc);
	memset(cbloom, 0, mc);
	*cn = BATnew(TYPE_oid,TYPE_int, clim/4);
	for (i = 0; i < clim; i++) {
		if ((tstBit(bbloom, bloomhash(bp[0],cv[i],mb)) &&
			 tstBit(bbloom, bloomhash(bp[1],cv[i],mb)) &&
			 tstBit(bbloom, bloomhash(bp[2],cv[i],mb)) &&
			 tstBit(bbloom, bloomhash(bp[3],cv[i],mb)))) {
			oid o = (oid) i;
			*cn = BUNins(*cn, &o, &cv[i], FALSE);
			setBit(cbloom, bloomhash(cp[0],cv[i],mc), 1);
			setBit(cbloom, bloomhash(cp[1],cv[i],mc), 1);
			setBit(cbloom, bloomhash(cp[2],cv[i],mc), 1);
			setBit(cbloom, bloomhash(cp[3],cv[i],mc), 1);
		}
	}

/*
	GDKfree(bbloom);
	clim = BATcount(*cn);
	mc = clim*12;
	cbloom = (char *) GDKmalloc(mc);
	memset(cbloom, 0, mc);

	for (i = 0; i < clim; i++) {
		setBit(cbloom, bloomhash(cp[0],cv[i],mc)@, 1);
		setBit(cbloom, bloomhash(cp[1],cv[i],mc)@, 1);
		setBit(cbloom, bloomhash(cp[2],cv[i],mc)@, 1);
		setBit(cbloom, bloomhash(cp[3],cv[i],mc)@, 1);
	}*/

	/* for (b) { check cbloom } */
	*bn = BATnew(TYPE_oid,TYPE_int, blim/4);
	for (i = 0; i < blim; i++) {
		if ((tstBit(cbloom, bloomhash(cp[0],bv[i],mc)) &&
			 tstBit(cbloom, bloomhash(cp[1],bv[i],mc)) &&
			 tstBit(cbloom, bloomhash(cp[2],bv[i],mc)) &&
			 tstBit(cbloom, bloomhash(cp[3],bv[i],mc)))) {
				oid o = (oid) i;
			*bn = BUNins(*bn, &o, &bv[i], FALSE);
		}
	}

@= body_outofmemory
	char * cbloom, *bbloom;
	char bit;
	/*int bp[4];
	int cp[4];*/
	double bp[4];
	double cp[4];
	int counter = 0;

	b = BATdescriptor(*bid);
	bv = (int*) Tloc(b, BUNfirst(b));
	blim = BATcount(b);
	blog = (int) log(blim);

	mb = blim*2;
	//mc = clim*2;
	bbloom = (char *) GDKmalloc(mb);
	//cbloom = (char *) GDKmalloc(mc);
	memset(bbloom, 0, mb);
	//memset(cbloom, 0, mc);
	for (i = 0; i < 4; i++) {
		bp[i] = (1 << (blog + i))+1;
		//cp[i] = (1 << (clog + i))+1;
		/*
		bp[i] = primes[i]/((double) (sizeof(wrd)*8));
		cp[i] = primes[i+1]/((double) (sizeof(wrd)*8));
		*/
	}

	/* for (b) { built bloom } */
	for (i = 0; i < blim; i++) {
		setBit(bbloom, bloomhash(bp[0],bv[i],mb), 1);
	}
	/*@:print_bbloom@*/
	BBPunfix(*bid);

	c = BATdescriptor(*cid);
	cv = (int*) Tloc(c, BUNfirst(c));
	clim = BATcount(c);
	clog = (int) log(clim);
	mc = clim*2;
	cbloom = (char *) GDKmalloc(mc);
	memset(cbloom, 0, mc);

	for (i = 0; i < 4; i++) {
		cp[i] = (1 << (clog + i))+1;
	}

	/*  for (c) { test bbloom; built cbloom } */
	for (i = 0; i < clim; i++) {
		bit = tstBit(bbloom, bloomhash(bp[0],cv[i],mb));
		setBit(cbloom, bloomhash(cp[0],cv[i],mc),
			bit | tstBit(cbloom, bloomhash(cp[0],cv[i],mc)));
		setBit(cbloom, bloomhash(cp[1],cv[i],mc),
			bit | tstBit(cbloom, bloomhash(cp[1],cv[i],mc)));
		/*if (tstBit(bbloom, bloomhash(bp[0],cv[i],mb))) {
			setBit(cbloom, bloomhash(cp[0],cv[i],mc), 1);
			setBit(cbloom, bloomhash(cp[1],cv[i],mc), 1);
			counter++;
		}*/
	}
	/*@:print_cbloom@*/
	BBPunfix(*cid);

#ifdef DEBUG_BLOOMFILTER
	stream_printf(GDKout, "1st round c %d\n", counter);
	counter = 0;
#endif

	b = BATdescriptor(*bid);
	bv = (int*) Tloc(b, BUNfirst(b));
	memset(bbloom, 0, mb);
	/*  for (b) { test cbloom; rebuilt bbloom } */
	for (i = 0; i < blim; i++) {
		/*
		bit = tstBit(cbloom, bloomhash(cp[0],bv[i],mc)) &&
			tstBit(cbloom, bloomhash(cp[1],bv[i],mc));

		setBit(bbloom, bloomhash(bp[0],bv[i],mb),
		bit | tstBit(bbloom, bloomhash(bp[0],bv[i],mb)));
		setBit(bbloom, bloomhash(bp[1],bv[i],mb),
		bit | tstBit(bbloom, bloomhash(bp[1],bv[i],mb)));
		setBit(bbloom, bloomhash(bp[2],bv[i],mb),
		bit | tstBit(bbloom, bloomhash(bp[2],bv[i],mb)));
		setBit(bbloom, bloomhash(bp[3],bv[i],mb),
		bit | tstBit(bbloom, bloomhash(bp[3],bv[i],mb)));
		*/
		if ((tstBit(cbloom, bloomhash(cp[0],bv[i],mc)) &&
			 tstBit(cbloom, bloomhash(cp[1],bv[i],mc)))) {
			setBit(bbloom, bloomhash(bp[0],bv[i],mb), 1);
			setBit(bbloom, bloomhash(bp[1],bv[i],mb), 1);
			setBit(bbloom, bloomhash(bp[2],bv[i],mb), 1);
			setBit(bbloom, bloomhash(bp[3],bv[i],mb), 1);
			counter++;
		}
	}
	/*@:print_bbloom@*/
	BBPunfix(*bid);

#ifdef DEBUG_BLOOMFILTER
	stream_printf(GDKout, "1st round b %d\n", counter);
	counter = 0;
#endif


	/* for (c) { check bbloom } */
	c = BATdescriptor(*cid);
	cv = (int*) Tloc(c, BUNfirst(c));
	*cn = BATnew(TYPE_oid,TYPE_int, clim/4);
	memset(cbloom, 0, mc);
	for (i = 0; i < clim; i++) {
		if ((tstBit(bbloom, bloomhash(bp[0],cv[i],mb)) &&
			 tstBit(bbloom, bloomhash(bp[1],cv[i],mb)) &&
			 tstBit(bbloom, bloomhash(bp[2],cv[i],mb)) &&
			 tstBit(bbloom, bloomhash(bp[3],cv[i],mb)))) {
			oid o = (oid) i;
			*cn = BUNins(*cn, &o, &cv[i], FALSE);
			setBit(cbloom, bloomhash(cp[0],cv[i],mc), 1);
			setBit(cbloom, bloomhash(cp[1],cv[i],mc), 1);
			setBit(cbloom, bloomhash(cp[2],cv[i],mc), 1);
			setBit(cbloom, bloomhash(cp[3],cv[i],mc), 1);
			counter++;
		}
	}
	/*@:print_cbloom@*/
	BBPunfix(*cid);
	GDKfree(bbloom);

#ifdef DEBUG_BLOOMFILTER
	stream_printf(GDKout, "2nd round c %d\n", counter);
	counter = 0;
#endif

	b = BATdescriptor(*bid);
	bv = (int*) Tloc(b, BUNfirst(b));
	*bn = BATnew(TYPE_oid,TYPE_int, blim/4);
	/* for (b) {check cbloom} */
	for (i = 0; i < blim; i++) {
		if ((tstBit(cbloom, bloomhash(cp[0],bv[i],mc)) &&
			 tstBit(cbloom, bloomhash(cp[1],bv[i],mc)) &&
			 tstBit(cbloom, bloomhash(cp[2],bv[i],mc)) &&
			 tstBit(cbloom, bloomhash(cp[3],bv[i],mc)))) {
			oid o = (oid) i;
			*bn = BUNins(*bn, &o, &bv[i], FALSE);
			counter++;
		}
	}
	BBPunfix(*bid);
	GDKfree(cbloom);

#ifdef DEBUG_BLOOMFILTER
	stream_printf(GDKout, "2nd round b %d\n", counter);
	counter = 0;
#endif

@c

void
GDKbloomfilter_int_l(bat *bid, bat *cid, BAT **bn, BAT **cn, int algo) {
	int *bv =0, *cv =0;
	BAT *b = 0, *c = 0;
	BUN i, blim=0, clim=0;
	int clog=0, blog=0;
	BUN mb, mc;
	mb = mc = 0;

	/* b is the smaller one
	if ( BATcount(b) > BATcount(c) ) {
		GDKbloomfilter_int_l(c, b, cn, bn, algo);
		return;
	} */

	/* consider it an out-of-memory situation
	if ( b->ttype != TYPE_int || GDKbatfootprint(b) < 25 ){
		*bn = b;
		BBPkeepref(b->batCacheid);
		*cn = c;
		BBPkeepref(c->batCacheid);
		return;
	}*/

	bv = (int*) Tloc(b, BUNfirst(b));
	cv = (int*) Tloc(c, BUNfirst(c));
	blim= BATcount(b);
	clim= BATcount(c);
	clog = (int) log(clim);
	blog = (int) log(blim); 

	if (algo == 2) {
		/* only build one bloom filter on the smaller BAT,
		 * scan once the larger BAT to reduce it and exit.
		 * This is the case when
		 * 1. L << R,
		 * 2. L subset of R
		 * 3. L's bloom filter fits in memory
		 */
		@:body_smallsubset@
	} else if (algo == 3) {
		/* both bats are of the same size
		 * build bloom filter on the left
		 * scan right to filter out and built bloom on the right
		 * scan left again to filter out.
		 * This is the case when
		 * 1. L ~ R
		 * 2. the ratio (L|><|R) / (LxR) is small (thus high join selectivity)
		 * 3. L's and R's bloom filters fit in memory
		 */
		@:body_equalinmem@
	} else { /* algo == 4*/
		@:body_outofmemory@
	}

	if ( *bn == NULL ) { /* no filtering on b */
		*bn = b;
		BBPkeepref(b->batCacheid);
	} else {
		BBPkeepref((*bn)->batCacheid);
	}

	BBPkeepref((*cn)->batCacheid);

#ifdef DEBUG_BLOOMFILTER
	stream_printf(GDKout,"Lefteris b " BUNFMT " ", blim);
	stream_printf(GDKout,"c " BUNFMT " vector size " BUNFMT "," BUNFMT "\n", clim, mb, mc);
	stream_printf(GDKout,"b-reduced " BUNFMT "->" BUNFMT "\n",blim, BATcount(*bn));
	stream_printf(GDKout,"c-reduced " BUNFMT "->" BUNFMT "\n",clim,  BATcount(*cn));
#endif

}

str
ALGblkjoin(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	int *bres = (int *) getArgReference(stk, pci, 0);
	int *bid = (int *) getArgReference(stk, pci, 1);
	int *cid = (int *) getArgReference(stk, pci, 2);
	BAT *b, *c, *bn;

	(void) cntxt;
	(void) mb;

	if ((b = BATdescriptor(*bid)) == NULL)
		throw(MAL, "bbp.blkjoin", INTERNAL_BAT_ACCESS);
	if ( (c = BATdescriptor(*cid)) == NULL) {
		BBPunfix(*bid);
		throw(MAL, "bbp.blkjoin", INTERNAL_BAT_ACCESS);
	}

	if ( 0)
		bn = GDKblockjoin(b,c);
	else
		bn = GDKblockjoin2(b,c);
	BBPkeepref(*bres= bn->batCacheid);
	BBPreleaseref(b->batCacheid);
	BBPreleaseref(c->batCacheid);
	return MAL_SUCCEED;
}

str
ALGscanhashjoin(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	int *bres = (int *) getArgReference(stk, pci, 0);
	int *bid = (int *) getArgReference(stk, pci, 1);
	int *cid = (int *) getArgReference(stk, pci, 2);
	BAT *b, *c, *bn;

	(void) cntxt;
	(void) mb;

	if ((b = BATdescriptor(*bid)) == NULL)
		throw(MAL, "bbp.blkjoin", INTERNAL_BAT_ACCESS);
	if ( (c = BATdescriptor(*cid)) == NULL) {
		BBPunfix(*bid);
		throw(MAL, "bbp.blkjoin", INTERNAL_BAT_ACCESS);
	}

	if ( 0 )
		bn = GDKscanhashjoin(b,c);
	else 
		bn = GDKclusterhashjoin(b,c);
	if (bn) 
	BBPkeepref(*bres= bn->batCacheid);
	BBPreleaseref(b->batCacheid);
	BBPreleaseref(c->batCacheid);
	return MAL_SUCCEED;
}

str
ALGpartjoin(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	int *bres = (int *) getArgReference(stk, pci, 0);
	int *bid = (int *) getArgReference(stk, pci, 1);
	int *cid = (int *) getArgReference(stk, pci, 2);
	BAT *b, *c, *bn;

	(void) cntxt;
	(void) mb;

	if ((b = BATdescriptor(*bid)) == NULL) {
		throw(MAL, "algebra.partjoin", INTERNAL_BAT_ACCESS);
	}
	if ( (c = BATdescriptor(*cid)) == NULL) {
		BBPunfix(*bid);
		throw(MAL, "algebra.partjoin", INTERNAL_BAT_ACCESS);
	}

	if (((b->htype == TYPE_void && b->hseqbase != oid_nil) || b->htype == TYPE_oid) && \
	    ((c->ttype == TYPE_void && c->tseqbase != oid_nil) || c->ttype == TYPE_oid) && \
	    b->ttype == TYPE_int && c->htype == TYPE_int) {
		bn = StMpartjoin(&b,&c,0);
	} else {
		BBPunfix(b->batCacheid);
		BBPunfix(c->batCacheid);
		throw(MAL, "algebra.partjoin", "currently only available for [vOID,INT]x[INT,vOID]");
	}

	if (b) {
		BBPunfix(b->batCacheid);
		b = 0;
	}
	if (c) {
		BBPunfix(c->batCacheid);
		c = 0;
	}
	if (bn == NULL) {
		throw(MAL, "algebra.partjoin", "StMpartjoin() failed");
	}

	BBPkeepref(*bres= bn->batCacheid);
	return MAL_SUCCEED;
}

str
ALGprejoin(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci){
	int *bres = (int *) getArgReference(stk, pci, 0);
	int *cres = (int *) getArgReference(stk, pci, 1);
	int *bid = (int *) getArgReference(stk, pci, 2);
	int *cid = (int *) getArgReference(stk, pci, 3);
	int algo = *(int *) getArgReference(stk, pci, 4);
	BAT *b, *c, *bn, *cn;

	(void) cntxt;
	(void) mb;


	if ((b = BATdescriptor(*bid)) == NULL)
		throw(MAL, "bbp.prejoin", INTERNAL_BAT_ACCESS);
	if ( (c = BATdescriptor(*cid)) == NULL) {
		BBPunfix(*bid);
		throw(MAL, "bbp.prejoin", INTERNAL_BAT_ACCESS);
	}

	switch (algo) {
		case 1: /* martin 1st */
			GDKbloomfilter_int(b, c, &bn, &cn);
			break;
		case 2: /* lefteris 1st */
		case 3: /* 2nd */
		case 4: /* 3rd */
			GDKbloomfilter_int_l(bid, cid, &bn, &cn, algo);
			break;
		case 15: /* blocked join */
			bn = GDKblockjoin(b,c);
			cn = c;
			BBPkeepref(*cres= cn->batCacheid);
			BBPkeepref(*bres= bn->batCacheid);
			return MAL_SUCCEED;
		default:
			throw(MAL, "bbp.prejoin", "unknow algo selected");
			break;
	}

	*cres= cn->batCacheid;
	*bres= bn->batCacheid;
	return MAL_SUCCEED;
}

@}
