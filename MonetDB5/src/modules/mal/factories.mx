@/
The contents of this file are subject to the MonetDB Public License
Version 1.1 (the "License"); you may not use this file except in
compliance with the License. You may obtain a copy of the License at
http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html

Software distributed under the License is distributed on an "AS IS"
basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
License for the specific language governing rights and limitations
under the License.

The Original Code is the MonetDB Database System.

The Initial Developer of the Original Code is CWI.
Portions created by CWI are Copyright (C) 1997-July 2008 CWI.
Copyright August 2008-2011 MonetDB B.V.
All Rights Reserved.
@

@f factories
@a Martin Kersten
@v 1.0
@+ Factory management 
The factory infrastructure can be inspected and steered with 
the commands provided here.
@mal
module factories;

command getPlants()(mod:bat[:oid,:str], fcn:bat[:oid,:str])
address FCTgetPlants 
comment "Retrieve the names for all active factories.";

command getCaller():int
address FCTgetCaller
comment "Retrieve the unique identity of the factory caller.";

command getOwners():bat[:oid,:str]
address FCTgetOwners
comment "Retrieve the factory owners table.";

command getArrival():bat[:oid,:timestamp]
address FCTgetArrival
comment "Retrieve the time stamp the last call was made.";

command getDeparture():bat[:oid,:timestamp]
address FCTgetDeparture
comment "Retrieve the time stamp the last answer was returned.";

pattern shutdown(m:str, f:str):void
address FCTshutdown
comment "Close a factory.";
@-
@{
@include prelude.mx
@+ Implementation code 
@h
#ifndef _FACTORIES_H
#define _FACTORIES_H

#include "mal.h"
#include "mal_interpreter.h"
#include "mal_namespace.h"

#ifdef WIN32
#if !defined(LIBMAL) && !defined(LIBATOMS) && !defined(LIBKERNEL) && !defined(LIBMAL) && !defined(LIBOPTIMIZER) && !defined(LIBSCHEDULER) && !defined(LIBMONETDB5)
#define factories_export extern __declspec(dllimport)
#else
#define factories_export extern __declspec(dllexport)
#endif
#else
#define factories_export extern
#endif

factories_export str FCTgetPlants(int *ret, int *ret2);
factories_export str FCTgetCaller(int *ret);
factories_export str FCTgetOwners(int *ret);
factories_export str FCTgetArrival(int *ret);
factories_export str FCTgetDeparture(int *ret);
factories_export str FCTsetLocation(int *ret, str *loc);
factories_export str FCTgetLocations(int *ret);
factories_export str FCTshutdown(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci);
#endif /* _FACTORIES_H */
@c
#include "mal_config.h"
#include "factories.h"


@+ Inspection
@c
str
FCTgetPlants(int *ret, int *ret2)
{
	BAT *bmod, *bfcn;

	bmod = BATnew(TYPE_oid, TYPE_str, 256);
	if( bmod == NULL)
		throw(MAL, "factories.getPlants", MAL_MALLOC_FAIL);
	if (!(bmod->batDirty&2)) bmod = BATsetaccess(bmod, BAT_READ);
    BBPkeepref(*ret= bmod->batCacheid);

	bfcn = BATnew(TYPE_oid, TYPE_str, 256);
	if( bfcn == NULL)
		throw(MAL, "factories.getPlants", MAL_MALLOC_FAIL);
	if (!(bfcn->batDirty&2)) bfcn = BATsetaccess(bfcn, BAT_READ);
    BBPkeepref(*ret2= bfcn->batCacheid);
	return MAL_SUCCEED;
}

str
FCTgetCaller(int *ret)
{
	(void) ret;
	throw(MAL, "factories.getCaller", PROGRAM_NYI);
}

str
FCTgetOwners(int *ret)
{
	BAT *b;

	(void) ret;
	b = BATnew(TYPE_oid, TYPE_str, 256);
	if (!(b->batDirty&2)) b = BATsetaccess(b, BAT_READ);
    *ret = b->batCacheid;
    BBPkeepref(*ret);
	throw(MAL, "factories.getOwner", PROGRAM_NYI);
}

str
FCTgetArrival(int *ret)
{
	BAT *b;

	(void) ret;
	b = BATnew(TYPE_oid, TYPE_str, 256);
    *ret = b->batCacheid;
    BBPkeepref(*ret);
	throw(MAL, "factories.getArrival", PROGRAM_NYI);
}

str
FCTgetDeparture(int *ret)
{
	BAT *b;

	(void) ret;
	b = BATnew(TYPE_oid, TYPE_str, 256);
    *ret = b->batCacheid;
    BBPkeepref(*ret);
	throw(MAL, "factories.getDeparture", PROGRAM_NYI);
}

str
FCTsetLocation(int *ret, str *loc)
{
	(void) ret;
	(void) loc;
	throw(MAL, "factories.setLocation", PROGRAM_NYI);
}

str
FCTgetLocations(int *ret)
{
	BAT *b;

	(void) ret;
	b = BATnew(TYPE_int, TYPE_str, 256);
	if (!(b->batDirty&2)) b = BATsetaccess(b, BAT_READ);
	@:Pseudo(factories,plantid,location)@
	throw(MAL, "factories.getLocations", PROGRAM_NYI);
}

str
FCTshutdown(Client cntxt, MalBlkPtr mb, MalStkPtr stk, InstrPtr pci)
{
	str mod = *(str*) getArgReference(stk, pci, 1);
	str fcn = *(str*) getArgReference(stk, pci, 2);
	Symbol s;
	(void) mb;

	s = findSymbol(cntxt->nspace, putName(mod,strlen(mod)), putName(fcn, strlen(fcn)));
	if (s == NULL)
		throw(MAL, "factories.shutdown", RUNTIME_OBJECT_MISSING);
	shutdownFactory(cntxt,s->def, TRUE);
	return MAL_SUCCEED;
}
@}
