@' The contents of this file are subject to the MonetDB Public License
@' Version 1.1 (the "License"); you may not use this file except in
@' compliance with the License. You may obtain a copy of the License at
@' http://monetdb.cwi.nl/Legal/MonetDBLicense-1.1.html
@'
@' Software distributed under the License is distributed on an "AS IS"
@' basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
@' License for the specific language governing rights and limitations
@' under the License.
@'
@' The Original Code is the MonetDB Database System.
@'
@' The Initial Developer of the Original Code is CWI.
@' Portions created by CWI are Copyright (C) 1997-2007 CWI.
@' All Rights Reserved.

@f factory
@a Martin Kersten
@v 1.0
@+ Factory management 
The factory infrastructure can be inspected and steered with 
the commands provided here.
@mal
module factory;

command getPlants():bat[:str,:str]
address FCTgetPlants 
comment "Retrieve the factory plant description
        for all operational factories";

command getCaller():int
address FCTgetCaller
comment "Retrieve the unique identity
        of the factory caller";

command getOwners():bat[:int,:str]
address FCTgetOwners
comment "Retrieve the factory owners table";

command getTimeIn():date
address FCTgetTimeStampIn
comment "Retrieve the time stamp it was received by the factory";

command getTimeOut():date
address FCTgetTimeStampOut
comment "Retrieve the time stamp the answer was returned to the client";

command setLocation(uri:str):void
address FCTsetLocation
comment "Set the location of the plant
        manager.";
command getLocations():bat[:int,:str]
address FCTgetLocations
comment "Retrieve the location of all
        known plants";

command shutdown(m:str, f:str):void
address FCTshutdown
comment "Close a factory";
@-
@{
@include prelude.mx
@+ Implementation code 
@h
#ifndef _FACTORY_H
#define _FACTORY_H

#include "mal.h"
#include "mal_interpreter.h"
#include "mal_namespace.h"

#ifdef WIN32
#ifndef LIBFACTORY
#define factory_export extern __declspec(dllimport)
#else
#define factory_export extern __declspec(dllexport)
#endif
#else
#define factory_export extern
#endif

factory_export str FCTgetPlants(int *ret);
factory_export str FCTgetCaller(int *ret);
factory_export str FCTgetOwners(int *ret);
factory_export str FCTgetTimeStampIn(int *ret);
factory_export str FCTgetTimeStampOut(int *ret);
factory_export str FCTsetLocation(int *ret, str *loc);
factory_export str FCTgetLocations(int *ret);
factory_export str FCTshutdown(int *ret, str *mod, str *fcn);
#endif /* _FACTORY_H */
@c
#include "mal_config.h"
#include "factory.h"


@+ Inspection
@c
str
FCTgetPlants(int *ret)
{
	BAT *b;

	b = BATnew(TYPE_str, TYPE_str, 256);
	if (!(b->batDirty&2)) b = BATsetaccess(b, BAT_READ);
	@:Pseudo(factory,name,plant)@
	throw(MAL, "factory.getPlants", "not yet implemented");
}

str
FCTgetCaller(int *ret)
{
	(void) ret;
	throw(MAL, "factory.getCaller", "not yet implemented");
}

str
FCTgetOwners(int *ret)
{
	BAT *b;

	(void) ret;
	b = BATnew(TYPE_int, TYPE_str, 256);
	if (!(b->batDirty&2)) b = BATsetaccess(b, BAT_READ);
	@:Pseudo(factory,plantid,location)@
	throw(MAL, "factory.getOwner", "not yet implemented");
}

str
FCTgetTimeStampIn(int *ret)
{
	(void) ret;
	throw(MAL, "factory.getTimeStampIn", "not yet implemented");
}

str
FCTgetTimeStampOut(int *ret)
{
	(void) ret;
	throw(MAL, "factory.getTimeStampOut", "not yet implemented");
}

str
FCTsetLocation(int *ret, str *loc)
{
	(void) ret;
	(void) loc;
	throw(MAL, "factory.setLocation", "not yet implemented");
}

str
FCTgetLocations(int *ret)
{
	BAT *b;

	(void) ret;
	b = BATnew(TYPE_int, TYPE_str, 256);
	if (!(b->batDirty&2)) b = BATsetaccess(b, BAT_READ);
	@:Pseudo(factory,plantid,location)@
	throw(MAL, "factory.getLocations", "not yet implemented");
}

str
FCTshutdown(int *ret, str *mod, str *fcn)
{
	Symbol s;

	(void) ret;
	s = findMALSymbol(putName(*mod, strlen(*mod)), putName(*fcn, strlen(*fcn)));
	if (s == NULL)
		throw(MAL, "factory.shutdown", "Factory not found");
	shutdownFactory(s->def);
	return MAL_SUCCEED;
}

@}
