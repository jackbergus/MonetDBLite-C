## Test generic ResultSet behaviour with all available types of BATs as
## columns

include rsbox;

rs := rsbox.create(9, 't');

b1 := bat.new(:void, :bit);
bat.insert(b1, nil, 1:bit);
bat.insert(b1, nil, 0:bit);
bat.insert(b1, nil, 0:bit);
bat.insert(b1, nil, 0:bit);
bat.insert(b1, nil, nil:bit);
bat.insert(b1, nil, 1:bit);
bat.insert(b1, nil, 0:bit);
bat.insert(b1, nil, 1:bit);
bat.insert(b1, nil, nil:bit);
bat.insert(b1, nil, 1:bit);

b2 := bat.new(:void, :chr);
bat.insert(b2, nil, nil:chr);
bat.insert(b2, nil, 'a');
bat.insert(b2, nil, 'x');
bat.insert(b2, nil, nil:chr);
bat.insert(b2, nil, 'a');
bat.insert(b2, nil, 'f');
bat.insert(b2, nil, 'r');
bat.insert(b2, nil, 'd');
bat.insert(b2, nil, ';');
bat.insert(b2, nil, ' ');

b3 := bat.new(:void, :str);
bat.insert(b3, nil, "Daft Punk - Human After All");
bat.insert(b3, nil, "Spinvis - Spinvis");
bat.insert(b3, nil, "Within Temptation - The Silent Force");
bat.insert(b3, nil, "Anouk - Together Alone");
bat.insert(b3, nil, "Armiral Freebee - Admiral Freebee");
bat.insert(b3, nil, "Lais - Douce Victime");
bat.insert(b3, nil, nil:str);
bat.insert(b3, nil, "Hooverphonic - Sit Down and Listen To...");
bat.insert(b3, nil, "Osdorp Posse - Tegenstrijd");
bat.insert(b3, nil, "MC Wigger & DJ Wanna-B - Fuck Osdorp");

b4 := bat.new(:void, :oid);
bat.insert(b4, nil, 2@0);
bat.insert(b4, nil, nil:oid);
bat.insert(b4, nil, 4@0);
bat.insert(b4, nil, 9@0);
bat.insert(b4, nil, 6@0);
bat.insert(b4, nil, 102@0);
bat.insert(b4, nil, nil:oid);
bat.insert(b4, nil, 28@0);
bat.insert(b4, nil, 4@0);
bat.insert(b4, nil, 1@0);

b5 := bat.new(:void, :sht);
bat.insert(b5, nil, 12:sht);
bat.insert(b5, nil, 0:sht);
bat.insert(b5, nil, -73:sht);
bat.insert(b5, nil, 2:sht);
bat.insert(b5, nil, 9:sht);
bat.insert(b5, nil, -23:sht);
bat.insert(b5, nil, nil:sht);
bat.insert(b5, nil, 2:sht);
bat.insert(b5, nil, 94:sht);
bat.insert(b5, nil, 5:sht);

b6 := bat.new(:void, :int);
bat.insert(b6, nil, 2317:int);
bat.insert(b6, nil, 283:int);
bat.insert(b6, nil, -329:int);
bat.insert(b6, nil, nil:int);
bat.insert(b6, nil, -72:int);
bat.insert(b6, nil, 23:int);
bat.insert(b6, nil, 9217:int);
bat.insert(b6, nil, 1282:int);
bat.insert(b6, nil, -72:int);
bat.insert(b6, nil, 28362:int);

b7 := bat.new(:void, :lng);
bat.insert(b7, nil, 21783253:lng);
bat.insert(b7, nil, -372867832:lng);
bat.insert(b7, nil, 372:lng);
bat.insert(b7, nil, -1:lng);
bat.insert(b7, nil, 3732897923:lng);
bat.insert(b7, nil, 632:lng);
bat.insert(b7, nil, 389263267823:lng);
bat.insert(b7, nil, -32782:lng);
bat.insert(b7, nil, 8329732:lng);
bat.insert(b7, nil, nil:lng);

b8 := bat.new(:void, :flt);
bat.insert(b8, nil, nil:flt);
bat.insert(b8, nil, 63.362:flt);
bat.insert(b8, nil, 725:flt);
bat.insert(b8, nil, -21672.27:flt);
bat.insert(b8, nil, 272.000092:flt);
bat.insert(b8, nil, -392.1:flt);
bat.insert(b8, nil, 821.82:flt);
bat.insert(b8, nil, 2.20371:flt);
bat.insert(b8, nil, 721.271:flt);
bat.insert(b8, nil, nil:flt);

b9 := bat.new(:void, :dbl);
bat.insert(b9, nil, 83927632.38772:dbl);
bat.insert(b9, nil, nil:dbl);
bat.insert(b9, nil, -932720.32:dbl);
bat.insert(b9, nil, 23.73:dbl);
bat.insert(b9, nil, 32782.238:dbl);
bat.insert(b9, nil, 32723.360001:dbl);
bat.insert(b9, nil, nil:dbl);
bat.insert(b9, nil, 0.0000021:dbl);
bat.insert(b9, nil, 4:dbl);
bat.insert(b9, nil, 64.1:dbl);

resultset.populateColumn(rs, 1, b1);
resultset.populateColumn(rs, 2, b2);
resultset.populateColumn(rs, 3, b3);
resultset.populateColumn(rs, 4, b4);
resultset.populateColumn(rs, 5, b5);
resultset.populateColumn(rs, 6, b6);
resultset.populateColumn(rs, 7, b7);
resultset.populateColumn(rs, 8, b8);
resultset.populateColumn(rs, 9, b9);

resultset.writeNextPart(rs);

rsbox.releaseAll();

