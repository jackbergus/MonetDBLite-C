stdout of test 'cluster00` in directory 'src/modules/mal` itself:


# 14:20:04 >  
# 14:20:04 >   mserver5 "--config=/ufs/mk/monet5//Linux/etc/monetdb5.conf" --debug=10 --set gdk_nr_threads=0 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs"  --set mapi_open=true --set xrpc_open=true --set mapi_port=39938 --set xrpc_port=49692 --set monet_prompt= --trace  --dbname=mTests_src_modules_mal  cluster00.mal
# 14:20:04 >  

# MonetDB server v5.7.0, based on kernel v1.25.0
# Serving database 'mTests_src_modules_mal', using 4 threads
# Compiled for x86_64-unknown-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-July 2008 CWI.
# Copyright (c) August 2008- MonetDB B.V., all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://eir.ins.cwi.nl:38516/
function user.main():void;              #  0 main:void := user.main() {G}
#test clustering a small table 
    b := bat.new(:oid,:int);            #  2 b:bat[:oid,:int] := CMDBATnew(_3:oid, _4:int) {G}
    c := bat.new(:oid,:int);            #  3 c:bat[:oid,:int] := CMDBATnew(_3:oid, _4:int) {G}
barrier (v,i) := language.newRange(0:int);#  4 (v:bit, i:int) := RNGnewRange_int(_8:int) {J10}
    j := calc.%(i,5);                   #  5 j:int := CALCbinarycheckMODintint(i:int, _10:int) 
    bat.append(b,j);                    #  6 _11:bat[:int,:any] := BKCappend_val_wrap(b:bat[:oid,:int], j:int) {G}
    j := calc.%(i,3);                   #  7 j:int := CALCbinarycheckMODintint(i:int, _12:int) 
    bat.append(c,j);                    #  8 _13:bat[:int,:any] := BKCappend_val_wrap(c:bat[:oid,:int], j:int) {G}
    redo (v,i) := language.nextElement(1:int,10:int);#  9 (v:bit, i:int) := RNGnextElement_int(_14:int, _15:int) {J5}
exit (v,i);                             # 10 (v:bit, i:int) 
#bat.append(b,b); 
    io.print(b,c);                      # 12 _17:void := IOtable(b:bat[:oid,:int], c:bat[:oid,:int]) 
    keys := cluster.key(b);             # 13 keys:bat[:oid,:oid] := CLUSTER_key(b:bat[:oid,:int]) {G}
    io.print(keys);                     # 14 _19:void := IOprint_val(keys:bat[:oid,:oid]) 
    map := cluster.new(keys);           # 15 map:bat[:oid,:oid] := CLUSTER_new(keys:bat[:oid,:oid]) {G}
    io.print(map);                      # 16 _21:void := IOprint_val(map:bat[:oid,:oid]) 
    b1 := algebra.join(map,b);          # 17 b1:bat[:oid,:int] := ALGjoin(map:bat[:oid,:oid], b:bat[:oid,:int]) {G}
    c1 := algebra.join(map,c);          # 18 c1:bat[:oid,:int] := ALGjoin(map:bat[:oid,:oid], c:bat[:oid,:int]) {G}
    io.print(b1,c1);                    # 19 _24:void := IOtable(b1:bat[:oid,:int], c1:bat[:oid,:int]) 
end main;                               # 20  
#-------------------------#
# h	t		t		  # name
# void	int		int		  # type
#-------------------------#
[ 0@0,	  0,	  0	  ]
[ 1@0,	  1,	  1	  ]
[ 2@0,	  2,	  2	  ]
[ 3@0,	  3,	  0	  ]
[ 4@0,	  4,	  1	  ]
[ 5@0,	  0,	  2	  ]
[ 6@0,	  1,	  0	  ]
[ 7@0,	  2,	  1	  ]
[ 8@0,	  3,	  2	  ]
[ 9@0,	  4,	  0	  ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ 1@0,	  1@0	  ]
[ 2@0,	  2@0	  ]
[ 3@0,	  3@0	  ]
[ 4@0,	  4@0	  ]
[ 5@0,	  0@0	  ]
[ 6@0,	  1@0	  ]
[ 7@0,	  2@0	  ]
[ 8@0,	  3@0	  ]
[ 9@0,	  4@0	  ]
#-----------------#
# h	t	  # name
# void	oid	  # type
#-----------------#
[ 0@0,	  0@0	  ]
[ 1@0,	  1@0	  ]
[ 2@0,	  2@0	  ]
[ 3@0,	  3@0	  ]
[ 4@0,	  4@0	  ]
[ 5@0,	  5@0	  ]
[ 6@0,	  6@0	  ]
[ 7@0,	  7@0	  ]
[ 8@0,	  8@0	  ]
[ 9@0,	  9@0	  ]
#-----------------------------------------#
# h	t		t		  # name
# void	int		int		  # type
#-------------------------#
[ 0@0,	  0,	  0	  ]
[ 1@0,	  1,	  1	  ]
[ 2@0,	  2,	  2	  ]
[ 3@0,	  3,	  0	  ]
[ 4@0,	  4,	  1	  ]
[ 5@0,	  0,	  2	  ]
[ 6@0,	  1,	  0	  ]
[ 7@0,	  2,	  1	  ]
[ 8@0,	  3,	  2	  ]
[ 9@0,	  4,	  0	  ]

# 14:20:04 >  
# 14:20:04 >  Done.
# 14:20:04 >  

