# Attempt to establish a client connection to yourself.

z:= inspect.getEnvironment();
ps:= algebra.find(z,"mapi_port");
port:= calc.int(ps);
hs:= algebra.find(z,"host");

u:= clients.getInfo();
usr:= algebra.find(u,"user");
pwd:= algebra.find(u,"password");
lang:= algebra.find(u,"scenario");

# initialize exception handler
MapiException:= nil:str;
# setup the session
mid:= mserver.connect(hs,port,usr,pwd,lang);
io.print(mid);
# retrieve data from the 'remote' site
# testing t:=1+3;
t0:= alarm.usec();
k:int := mserver.rpc(mid, "t:= 1+3; io.print(t);");
t1:= alarm.usec();
io.print(k);
t1:= t1-t0;
io.print(t1);

t0:= alarm.usec();
mserver.rpc(mid,"r:= bat.new(:oid,:int);");
mserver.rpc(mid,"bat.insert(r, 1@0,311);");
mserver.rpc(mid,"bat.insert(r,2@0,433);");
b:bat[:oid,:int]:= mserver.rpc(mid,"io.print(r);");
t1:= alarm.usec();
t1:= t1-t0;
io.print(b);
io.print(t1);


msg:str := mserver.rpc(mid,"io.print(\"hello world\");");
io.print(msg);
o:oid := mserver.rpc(mid,"io.print(34@0);");
io.print(o);
o:oid := mserver.rpc(mid,"io.print(nil:oid);");
io.print(o);

#needs type checks
#(k:int,s:str):= mserver.rpc(mid,"io.print(nil:int,\"done\");");
#io.print(k,s);

# the remainder should be tested 
#catch MapiException;
#	io.printf("foutje:%s\n",MapiException);
#exit MapiException;
