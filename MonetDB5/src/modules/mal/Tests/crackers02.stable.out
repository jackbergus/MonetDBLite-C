stdout of test 'crackers02` in directory 'src/modules/mal` itself:


# 00:03:54 >  
# 00:03:54 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=33330 --set sql_port=49911 --set xquery_port=56575 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  crackers02.mal </dev/null
# 00:03:54 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information.
## Testing the cracker implementation
#b:= bbp.new(:int,:int);
#bat.insert(b,10,100);
#bat.insert(b,1,2);
#bat.insert(b,6,36);
#bat.insert(b,5,25);
#bat.insert(b,2,4);
#bat.insert(b,3,9);
#bat.insert(b,7,49);
#bat.insert(b,8,64);
#bat.insert(b,4,16);
#bat.insert(b,9,81);
#io.print(b);
#
#crackers.new(b);
#z:= crackers.crack(b,9,25);
#io.print(z);
#crackers.info(b);
#io.print(b);
#
#y:= crackers.crack(b,80,195);
#io.print(z);
#crackers.info(b);
#io.print(b);
#
#y:= crackers.crack(b,2,2);
#io.print(z);
#crackers.info(b);
#io.print(b);
#
#y:= crackers.crack(b,20,99);
#io.print(z);
#crackers.info(b);
#io.print(b);
#
function user.main():void;	# 0  (main:void)
# Testing the cracker implementation 	# 1  (_1:str)
    b := bat.new(:int,:int);	# 2 CMDBATnew (b:bat[:int,:int])<-(_3:int)(_3:int)
    bat.insert(b,10,100);	# 3 BKCinsert_bun_int_int (_4:void)<-(b:bat[:int,:int])(_5:int)(_6:int)
    bat.insert(b,1,2);	# 4 BKCinsert_bun_int_int (_7:void)<-(b:bat[:int,:int])(_8:int)(_9:int)
    bat.insert(b,6,36);	# 5 BKCinsert_bun_int_int (_10:void)<-(b:bat[:int,:int])(_11:int)(_12:int)
    bat.insert(b,5,25);	# 6 BKCinsert_bun_int_int (_13:void)<-(b:bat[:int,:int])(_14:int)(_15:int)
    bat.insert(b,2,4);	# 7 BKCinsert_bun_int_int (_16:void)<-(b:bat[:int,:int])(_9:int)(_17:int)
    bat.insert(b,3,9);	# 8 BKCinsert_bun_int_int (_18:void)<-(b:bat[:int,:int])(_19:int)(_20:int)
    bat.insert(b,7,49);	# 9 BKCinsert_bun_int_int (_21:void)<-(b:bat[:int,:int])(_22:int)(_23:int)
    bat.insert(b,8,64);	# 10 BKCinsert_bun_int_int (_24:void)<-(b:bat[:int,:int])(_25:int)(_26:int)
    bat.insert(b,4,16);	# 11 BKCinsert_bun_int_int (_27:void)<-(b:bat[:int,:int])(_17:int)(_28:int)
    bat.insert(b,9,81);	# 12 BKCinsert_bun_int_int (_29:void)<-(b:bat[:int,:int])(_20:int)(_30:int)
    io.print(b);	# 13 IOprint_val (_31:int)<-(b:bat[:int,:int])
    crackers.new(b);	# 14 CRKnew (_32:void)<-(b:bat[:int,:int])
    z := crackers.crack(b,9,25);	# 15 CRKcrackRange (z:int)<-(b:bat[:int,:int])(_20:int)(_15:int)
    io.print(z);	# 16 IOprint_val (_34:int)<-(z:int)
    crackers.info(b);	# 17 CRKinfo (_35:void)<-(b:bat[:int,:int])
    io.print(b);	# 18 IOprint_val (_36:int)<-(b:bat[:int,:int])
    y := crackers.crack(b,80,195);	# 19 CRKcrackRange (y:int)<-(b:bat[:int,:int])(_38:int)(_39:int)
    io.print(z);	# 20 IOprint_val (_40:int)<-(z:int)
    crackers.info(b);	# 21 CRKinfo (_41:void)<-(b:bat[:int,:int])
    io.print(b);	# 22 IOprint_val (_42:int)<-(b:bat[:int,:int])
    y := crackers.crack(b,2,2);	# 23 CRKcrackRange (y:int)<-(b:bat[:int,:int])(_9:int)(_9:int)
    io.print(z);	# 24 IOprint_val (_43:int)<-(z:int)
    crackers.info(b);	# 25 CRKinfo (_44:void)<-(b:bat[:int,:int])
    io.print(b);	# 26 IOprint_val (_45:int)<-(b:bat[:int,:int])
    y := crackers.crack(b,20,99);	# 27 CRKcrackRange (y:int)<-(b:bat[:int,:int])(_46:int)(_47:int)
    io.print(z);	# 28 IOprint_val (_48:int)<-(z:int)
    crackers.info(b);	# 29 CRKinfo (_49:void)<-(b:bat[:int,:int])
    io.print(b);	# 30 IOprint_val (_50:int)<-(b:bat[:int,:int])
end main;	# 31  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 10,	  100	  ]
[ 1,	  2	  ]
[ 6,	  36	  ]
[ 5,	  25	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 4,	  16	  ]
[ 9,	  81	  ]
[ 2 ]
# idx bid kind parent rng_min rng_max idx_first idx_last left middle right# name
[   0   6, P, -1 -2147483648, 2147483647, 0, 9, 1, 2, 3 ]
 [   1   6, L, 0 -2147483648, 8, 0, 1, -1, -1, -1 ]
 [   2   6, L, 0 9, 25, 2, 4, -1, -1, -1 ]
 [   3   6, L, 0 26, 2147483647, 5, 9, -1, -1, -1 ]
 #-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 5,	  25	  ]
[ 4,	  16	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 10,	  100	  ]
[ 9,	  81	  ]
[ 2 ]
# idx bid kind parent rng_min rng_max idx_first idx_last left middle right# name
[   0   6, P, -1 -2147483648, 2147483647, 0, 9, 1, 2, 3 ]
 [   1   6, L, 0 -2147483648, 8, 0, 1, -1, -1, -1 ]
 [   2   6, L, 0 9, 25, 2, 4, -1, -1, -1 ]
 [   3   6, P, 0 26, 2147483647, 5, 9, 4, -1, 5 ]
 [   4   6, L, 3 26, 79, 5, 7, -1, -1, -1 ]
 [   5   6, L, 3 80, 2147483647, 8, 9, -1, -1, -1 ]
 #-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 5,	  25	  ]
[ 4,	  16	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 10,	  100	  ]
[ 9,	  81	  ]
[ 2 ]
# idx bid kind parent rng_min rng_max idx_first idx_last left middle right# name
[   0   6, P, -1 -2147483648, 2147483647, 0, 9, 1, 2, 3 ]
 [   1   6, P, 0 -2147483648, 8, 0, 1, 6, -1, 7 ]
 [   2   6, L, 0 9, 25, 2, 4, -1, -1, -1 ]
 [   3   6, P, 0 26, 2147483647, 5, 9, 4, -1, 5 ]
 [   4   6, L, 3 26, 79, 5, 7, -1, -1, -1 ]
 [   5   6, L, 3 80, 2147483647, 8, 9, -1, -1, -1 ]
 [   6   6, L, 1 -2147483648, 2, 0, 0, -1, -1, -1 ]
 [   7   6, L, 1 3, 8, 1, 1, -1, -1, -1 ]
 #-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 5,	  25	  ]
[ 4,	  16	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 10,	  100	  ]
[ 9,	  81	  ]
[ 2 ]
# idx bid kind parent rng_min rng_max idx_first idx_last left middle right# name
[   0   6, P, -1 -2147483648, 2147483647, 0, 9, 1, 2, 3 ]
 [   1   6, P, 0 -2147483648, 8, 0, 1, 6, -1, 7 ]
 [   2   6, P, 0 9, 25, 2, 4, 8, -1, 9 ]
 [   3   6, P, 0 26, 2147483647, 5, 9, 4, -1, 5 ]
 [   4   6, L, 3 26, 79, 5, 7, -1, -1, -1 ]
 [   5   6, P, 3 80, 2147483647, 8, 9, 10, -1, 11 ]
 [   6   6, L, 1 -2147483648, 2, 0, 0, -1, -1, -1 ]
 [   7   6, L, 1 3, 8, 1, 1, -1, -1, -1 ]
 [   8   6, L, 2 9, 19, 2, 3, -1, -1, -1 ]
 [   9   6, L, 2 20, 25, 4, 4, -1, -1, -1 ]
 [  10   6, L, 5 80, 99, 8, 8, -1, -1, -1 ]
 [  11   6, L, 5 100, 2147483647, 9, 9, -1, -1, -1 ]
 #-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 4,	  16	  ]
[ 5,	  25	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 9,	  81	  ]
[ 10,	  100	  ]

# 00:03:54 >  
# 00:03:54 >  Done.
# 00:03:54 >  

