stdout of test 'crackers03` in directory 'src/modules/mal` itself:


# 00:03:54 >  
# 00:03:54 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=33330 --set sql_port=49911 --set xquery_port=56575 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  crackers03.mal </dev/null
# 00:03:54 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information.
## Testing the cracker implementation
#b:= bbp.new(:int,:int);
#bat.insert(b,10,100);
#bat.insert(b,1,2);
#bat.insert(b,6,36);
#bat.insert(b,5,25);
#bat.insert(b,2,4);
#bat.insert(b,3,9);
#bat.insert(b,7,49);
#bat.insert(b,8,64);
#bat.insert(b,4,16);
#bat.insert(b,9,81);
#
#crackers.new(b);
#crackers.crack(b,9,25);
##y:= crackers.crack(b,80,195);
##y:= crackers.crack(b,2,2);
##y:= crackers.crack(b,20,99);
#io.print(b);
#crackers.info(b);
#
## testing creation of the portions
#io.print("Get the first piece");
#(i,view):= crackers.newIterator(b);
#io.print(view);
#io.print(i);
#(i,view) := crackers.hasMoreElements(b);
#io.print(view);
#io.print(i);
#(i,view) := crackers.hasMoreElements(b);
#io.print(view);
#io.print(i);
##next one doesn;t exist anymore
##i:= crackers.nextPiece(b,cidx,view,i);
##print(view);
#crackers.drop(b);
#
function user.main():int;	# 0  (main:int)
# Testing the cracker implementation 	# 1  (_2:str)
    b := bat.new(:int,:int);	# 2 CMDBATnew (b:bat[:int,:int])<-(_4:int)(_4:int)
    bat.insert(b,10,100);	# 3 BKCinsert_bun (_5:void)<-(b:bat[:int,:int])(_6:int)(_7:int)
    bat.insert(b,1,2);	# 4 BKCinsert_bun (_8:void)<-(b:bat[:int,:int])(_9:int)(_10:int)
    bat.insert(b,6,36);	# 5 BKCinsert_bun (_11:void)<-(b:bat[:int,:int])(_12:int)(_13:int)
    bat.insert(b,5,25);	# 6 BKCinsert_bun (_14:void)<-(b:bat[:int,:int])(_15:int)(_16:int)
    bat.insert(b,2,4);	# 7 BKCinsert_bun (_17:void)<-(b:bat[:int,:int])(_10:int)(_18:int)
    bat.insert(b,3,9);	# 8 BKCinsert_bun (_19:void)<-(b:bat[:int,:int])(_20:int)(_21:int)
    bat.insert(b,7,49);	# 9 BKCinsert_bun (_22:void)<-(b:bat[:int,:int])(_23:int)(_24:int)
    bat.insert(b,8,64);	# 10 BKCinsert_bun (_25:void)<-(b:bat[:int,:int])(_26:int)(_27:int)
    bat.insert(b,4,16);	# 11 BKCinsert_bun (_28:void)<-(b:bat[:int,:int])(_18:int)(_29:int)
    bat.insert(b,9,81);	# 12 BKCinsert_bun (_30:void)<-(b:bat[:int,:int])(_21:int)(_31:int)
    crackers.new(b);	# 13 CRKnew (_32:void)<-(b:bat[:int,:int])
    crackers.crack(b,9,25);	# 14 CRKcrackRange (_33:int)<-(b:bat[:int,:int])(_21:int)(_16:int)
#y:= crackers.crack(b,80,195); 	# 15  (_35:str)
#y:= crackers.crack(b,2,2); 	# 16  (_37:str)
#y:= crackers.crack(b,20,99); 	# 17  (_39:str)
    io.print(b);	# 18 IOprint_val (_40:int)<-(b:bat[:int,:int])
    crackers.info(b);	# 19 CRKinfo (_41:void)<-(b:bat[:int,:int])
# testing creation of the portions 	# 20  (_43:str)
    io.print("Get the first piece");	# 21 IOprint_val (_44:int)<-(_45:str)
    (i,view):= crackers.newIterator(b);	# 22 CRKnewIterator (i:lng)(view:bat[:int,:int])<-(b:bat[:int,:int])
    io.print(view);	# 23 IOprint_val (_48:int)<-(view:bat[:int,:int])
    io.print(i);	# 24 IOprint_val (_49:int)<-(i:lng)
    (i,view):= crackers.hasMoreElements(b);	# 25 CRKhasMoreElements (i:lng)(view:bat[:int,:int])<-(b:bat[:int,:int])
    io.print(view);	# 26 IOprint_val (_50:int)<-(view:bat[:int,:int])
    io.print(i);	# 27 IOprint_val (_51:int)<-(i:lng)
    (i,view):= crackers.hasMoreElements(b);	# 28 CRKhasMoreElements (i:lng)(view:bat[:int,:int])<-(b:bat[:int,:int])
    io.print(view);	# 29 IOprint_val (_52:int)<-(view:bat[:int,:int])
    io.print(i);	# 30 IOprint_val (_53:int)<-(i:lng)
#next one doesn;t exist anymore 	# 31  (_55:str)
#i:= crackers.nextPiece(b,cidx,view,i); 	# 32  (_57:str)
#print(view); 	# 33  (_59:str)
    crackers.drop(b);	# 34 CRKdropPiece (_60:void)<-(b:bat[:int,:int])
end main;	# 35  
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 3,	  9	  ]
[ 5,	  25	  ]
[ 4,	  16	  ]
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 10,	  100	  ]
[ 9,	  81	  ]
# idx bid kind parent rng_min rng_max idx_first idx_last left middle right# name
[   0  13, P, -1 -2147483648, 2147483647, 0, 9, 1, 2, 3 ]
 [   1  13, L, 0 -2147483648, 8, 0, 1, -1, -1, -1 ]
 [   2  13, L, 0 9, 25, 2, 4, -1, -1, -1 ]
 [   3  13, L, 0 26, 2147483647, 5, 9, -1, -1, -1 ]
 [ "Get the first piece" ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 1,	  2	  ]
[ 2,	  4	  ]
[ 2 ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 3,	  9	  ]
[ 5,	  25	  ]
[ 4,	  16	  ]
[ 3 ]
#-----------------#
# h	t	  # name
# int	int	  # type
#-----------------#
[ 6,	  36	  ]
[ 7,	  49	  ]
[ 8,	  64	  ]
[ 10,	  100	  ]
[ 9,	  81	  ]
[ 4 ]

# 00:03:54 >  
# 00:03:54 >  Done.
# 00:03:54 >  

