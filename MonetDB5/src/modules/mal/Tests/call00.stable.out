stdout of test 'call00` in directory 'src/modules/mal` itself:


# 23:57:54 >  
# 23:57:54 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=38791 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  call00.mal < /dev/null
# 23:57:54 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information
## the base experiment to execute a string
## if we can convert a MAL function to a string
## it can be shipped for remote execution.
#
#function tst(i:int,s:str):bit;
#	j:= i+1;
#	io.print(j);
## ignore comments
#	format:= "hello %s\n";
#	io.printf(format,s);
#	return tst:=true;
#end tst;
function user.tst(i:int,s:str):bit;	# 0  (tst:bit)<-(i:int)(s:str)
    j := calc.+(i,1);	# 1 CALCbinaryADDintint (j:int)<-(i:int)(_4:int)
    io.print(j);	# 2 IOprint_val (_5:void)<-(j:int)
# ignore comments 	# 3  (_6:str)
    format := "hello %s\n";	# 4  (format:str)<-(_8:str)
    io.printf(format,s);	# 5 IOprint_formatted_str (_9:void)<-(format:str)(s:str)
    return tst := true;	# 6  (tst:bit)<-(_10:bit)
end tst;	# 7  
## there should be only one definition
#d:= inspect.getSignature("user","tst");
#io.print(d);
#
#user.tst(1,"world");
#m:=inspect.getSource("user","tst");
#io.print(m);
#
##Call the string derived from definition
#language.call(m);
#
## now we should have two definitions
#d:= inspect.getSignature("user","tst");
#io.print(d);
#
function user.main():void;	# 0  (main:void)
# the base experiment to execute a string 	# 1  (_1:str)
# if we can convert a MAL function to a string 	# 2  (_2:str)
# it can be shipped for remote execution. 	# 3  (_3:str)
# there should be only one definition 	# 4  (_4:str)
    d := inspect.getSignature("user","tst");	# 5 INSPECTgetSignature (d:bat[:str,:str])<-(_6:str)(_7:str)
    io.print(d);	# 6 IOprint_val (_8:void)<-(d:bat[:str,:str])
    user.tst(1,"world");	# 7  (_9:bit)<-(_10:int)(_11:str)
    m := inspect.getSource("user","tst");	# 8 INSPECTgetSource (m:str)<-(_6:str)(_7:str)
    io.print(m);	# 9 IOprint_val (_13:void)<-(m:str)
#Call the string derived from definition 	# 10  (_14:str)
    language.call(m);	# 11 CMDcallString (_15:void)<-(m:str)
# now we should have two definitions 	# 12  (_16:str)
    d := inspect.getSignature("user","tst");	# 13 INSPECTgetSignature (d:bat[:str,:str])<-(_6:str)(_7:str)
    io.print(d);	# 14 IOprint_val (_17:void)<-(d:bat[:str,:str])
end main;	# 15  
#-----------------------------------------#
# view		input			  # name
# str		str			  # type
#-----------------------------------------#
[ "user.tst",	  "(i:int,s:str):bit;"	  ]
[ 2 ]
hello world
[ "function user.tst(i:int,s:str):bit;\n    j := calc.+(i,1);\n    io.print(j);\n# ignore comments \n    format := \"hello %s\\n\";\n    io.printf(format,s);\n    return tst := true;\nend tst;\n" ]
#-----------------------------------------#
# view		input			  # name
# str		str			  # type
#-----------------------------------------#
[ "user.tst",	  "(i:int,s:str):bit;"	  ]
[ "user.tst",	  "(i:int,s:str):bit;"	  ]

# 23:57:54 >  
# 23:57:54 >  Done.
# 23:57:54 >  

