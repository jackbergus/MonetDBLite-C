stdout of test 'bpt10` in directory 'src/modules/mal` itself:


# 00:03:58 >  
# 00:03:58 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=33330 --set sql_port=49911 --set xquery_port=56575 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  bpt10.mal </dev/null
# 00:03:58 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information.
##testing the BAT partition table
## nothing is saved because the bats are not persistent
#a1:= bbp.new(:void,:int);
#bat.setSequenceBase(a1,0@0);
#a2:= bbp.new(:void,:int);
#bat.setSequenceBase(a2,10@0);
#a3:= bbp.new(:void,:int);
#bat.setSequenceBase(a3,20@0);
#
#barrier (go,i):= mal.newRange(0);
#	bat.insert(a1,nil,i);
#	bat.insert(a2,nil,i);
#	bat.insert(a3,nil,i);
#	redo (go,i):= language.nextElement(1,10);
#exit (go,i);
#
## now really add it
#partitions.deposit(a1);
#partitions.deposit(a1,a2);
#partitions.deposit(a1,a3);
#partitions.dump();
#partitions.close();
#
function user.main():void;	# 0  (main:void)
#testing the BAT partition table 	# 1  (_1:str)
# nothing is saved because the bats are not persistent 	# 2  (_2:str)
    a1 := bat.new(:oid,:int);	# 3 CMDBATnew (a1:bat[:oid,:int])<-(_4:oid)(_5:int)
    bat.insert(a1,0@0,0);	# 4 BKCinsert_bun (_6:void)<-(a1:bat[:oid,:int])(_7:oid)(_8:int)
    a2 := bat.new(:oid,:int);	# 5 CMDBATnew (a2:bat[:oid,:int])<-(_4:oid)(_5:int)
    bat.insert(a2,10@0,10);	# 6 BKCinsert_bun (_10:void)<-(a2:bat[:oid,:int])(_11:oid)(_12:int)
    a3 := bat.new(:oid,:int);	# 7 CMDBATnew (a3:bat[:oid,:int])<-(_4:oid)(_5:int)
    bat.insert(a3,20@0,20);	# 8 BKCinsert_bun (_14:void)<-(a3:bat[:oid,:int])(_15:oid)(_16:int)
barrier (go,i):= language.newRange(1);	# 9 RNGnewRange_int (go:bit)(i:int)<-(_19:int) jump 14
    bat.append(a1,i);	# 10 BKCappend_val_wrap (_20:void)<-(a1:bat[:oid,:int])(i:int)
    bat.append(a2,i);	# 11 BKCappend_val_wrap (_21:void)<-(a2:bat[:oid,:int])(i:int)
    bat.append(a3,i);	# 12 BKCappend_val_wrap (_22:void)<-(a3:bat[:oid,:int])(i:int)
    redo (go,i):= language.nextElement(1,10);	# 13 RNGnextElement_int (go:bit)(i:int)<-(_19:int)(_12:int) jump 10
exit (go,i);	# 14  (go:bit)(i:int)
# now really add it 	# 15  (_23:str)
    partitions.deposit(a1);	# 16 BPTdeposit (_24:void)<-(a1:bat[:oid,:int])
    partitions.deposit(a1,a2);	# 17 BPTdeposit2 (_25:void)<-(a1:bat[:oid,:int])(a2:bat[:oid,:int])
    partitions.deposit(a1,a3);	# 18 BPTdeposit2 (_26:void)<-(a1:bat[:oid,:int])(a3:bat[:oid,:int])
    partitions.dump();	# 19 BPTdump (_27:void)
    partitions.close();	# 20 BPTclose (_28:void)
end main;	# 21  
ptop=3 plimit=1024
[0] bid=7 pid=7 f=0, l=10 prv=-1 nxt=1 cap=-1
[1] bid=7 pid=8 f=10, l=20 prv=0 nxt=2 cap=-1
[2] bid=7 pid=9 f=20, l=30 prv=1 nxt=-1 cap=-1

# 00:03:58 >  
# 00:03:58 >  Done.
# 00:03:58 >  

