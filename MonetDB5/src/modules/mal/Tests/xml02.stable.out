stdout of test 'xml02` in directory 'src/modules/mal` itself:


# 22:46:59 >  
# 22:46:59 >  Mtimeout -timeout 60  mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_open=true --set xrpc_open=true --set mapi_port=37863 --set xrpc_port=42558 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  xml02.mal
# 22:46:59 >  

# MonetDB server v5.1.0, based on kernel v1.19.0
# Serving database 'mTests_src_modules_mal'
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# Copyright (c) 1993-2007 CWI, all rights reserved
# Visit http://monetdb.cwi.nl/ for further information
# Listening for connection requests on mapi:monetdb://gio.ins.cwi.nl:37863/
#b:= bat.new(:oid,:str);
#bat.insert(b,0@0,"Mary Ann Walker");
#bat.insert(b,1@0,"Annie Chapman");
#h:= bat.new(:oid,:str);
#bat.insert(h,0@0,"brown");
#bat.insert(h,1@0,"curly dark brown");
#
#io.print(b);
#
#bc:= xml.attribute("name",b);
#hc:= xml.attribute("hair",h);
#bj:= xml.str(bc);
#hj:= xml.str(hc);
#io.print(bj);
#io.print(hj);
#
#aa:= xml.attributes(bc,hc);
#as:= xml.str(aa);
#io.print(as);
#
function user.main():void;              #  0 main:void := user.main() {G}
    b := bat.new(:oid,:str);            #  1 b:bat[:oid,:str] := CMDBATnew(_2:oid, _3:str) {G}
    bat.insert(b,0@0,"Mary Ann Walker");#  2 _4:void := BKCinsert_bun(b:bat[:oid,:str], _5:oid, _6:str) 
    bat.insert(b,1@0,"Annie Chapman");  #  3 _7:void := BKCinsert_bun(b:bat[:oid,:str], _8:oid, _9:str) 
    h := bat.new(:oid,:str);            #  4 h:bat[:oid,:str] := CMDBATnew(_2:oid, _3:str) {G}
    bat.insert(h,0@0,"brown");          #  5 _11:void := BKCinsert_bun(h:bat[:oid,:str], _5:oid, _12:str) 
    bat.insert(h,1@0,"curly dark brown");#  6 _13:void := BKCinsert_bun(h:bat[:oid,:str], _8:oid, _14:str) 
    io.print(b);                        #  7 _15:void := IOprint_val(b:bat[:oid,:str]) 
    bc := xml.attribute("name",b);      #  8 bc:bat[:oid,:xml] := BATXMLattribute(_17:str, b:bat[:oid,:str]) {G}
    hc := xml.attribute("hair",h);      #  9 hc:bat[:oid,:xml] := BATXMLattribute(_19:str, h:bat[:oid,:str]) {G}
    bj := xml.str(bc);                  # 10 bj:bat[:oid,:str] := BATXMLxml2str(bc:bat[:oid,:xml]) {G}
    hj := xml.str(hc);                  # 11 hj:bat[:oid,:str] := BATXMLxml2str(hc:bat[:oid,:xml]) {G}
    io.print(bj);                       # 12 _22:void := IOprint_val(bj:bat[:oid,:str]) 
    io.print(hj);                       # 13 _23:void := IOprint_val(hj:bat[:oid,:str]) 
    aa := xml.concat(bc,hc);            # 14 aa:bat[:oid,:xml] := BATXMLconcat(bc:bat[:oid,:xml], hc:bat[:oid,:xml]) {G}
    as := xml.str(aa);                  # 15 as:bat[:oid,:str] := BATXMLxml2str(aa:bat[:oid,:xml]) {G}
    io.print(as);                       # 16 _26:void := IOprint_val(as:bat[:oid,:str]) 
end main;	# 17  
#---------------------------------#
# h	t			  # name
# void	str			  # type
#---------------------------------#
[ 0@0,	  "Mary Ann Walker"	  ]
[ 1@0,	  "Annie Chapman"	  ]
#-----------------------------------------#
# h	t				  # name
# void	str				  # type
#-----------------------------------------#
[ 0@0,	   name="Mary Ann Walker"	  ]
[ 1@0,	   name="Annie Chapman"		  ]
#-----------------------------------------#
# h	t				  # name
# void	str				  # type
#-----------------------------------------#
[ 0@0,	   hair="brown"			  ]
[ 1@0,	   hair="curly dark brown"	  ]
#---------------------------------------------------------#
# h	t								  # name
# void	xml						  # type
#---------------------------------------------------------#
[ 0@0,	   name="Mary Ann Walker" hair="brown"		  ]
[ 1@0,	   name="Annie Chapman" hair="curly dark brown"	  ]

# 22:46:59 >  
# 22:46:59 >  Done.
# 22:46:59 >  

