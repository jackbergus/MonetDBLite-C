stdout of test 'statistics01` in directory 'src/modules/mal` itself:


# 08:19:58 >  
# 08:19:58 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=37417 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  statistics01.mal < /dev/null
# 08:19:58 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information
##test the statistics module
#tz:= bbp.bind("timezones");
#statistics.prelude();
#statistics.dump();
#statistics.deposit("timezones");
#statistics.dump();
#b:= statistics.getHotset();
#io.print(b);
#l:= statistics.getCount("timezones");
#io.print(l);
#catch MALexception:str;
#	io.print("could not get count from timezones");
#exit MALexception;
#m:= statistics.getMin("timezones");
#catch MALexception:str;
#	io.print("could not get minimum from timezones");
#exit MALexception;
#io.print(m);
#h:= statistics.getHistogram("timezones");
#catch MALexception:str;
#	io.print("could not get histogram from timezones");
#	io.print(MALexception);
#	h:= bat.new(:oid,:int);
#exit MALexception;
#io.print("histogram");
#io.print(h);
#hc:= aggr.count(h);
#io.print(hc);
#statistics.discard("timezones");
#statistics.epilogue();
#d:= bbp.getRefCount();
#dl:=bbp.getLRefCount();
#dn:= bbp.getNames();
#io.print(dn,d,dl);
#
#
function user.main():void;	# 0  (main:void)
#test the statistics module 	# 1  (_1:str)
    tz := bbp.bind("timezones");	# 2 CMDbbpbind (tz:bat[:any,:any])<-(_3:str)
    statistics.prelude();	# 3 STATprelude (_4:void)
    statistics.dump();	# 4 STATdump (_5:void)
    statistics.deposit("timezones");	# 5 STATdepositStr (_6:void)<-(_3:str)
    statistics.dump();	# 6 STATdump (_7:void)
    b := statistics.getHotset();	# 7 STATgetHotset (b:bat[:int,:str])
    io.print(b);	# 8 IOprint_val (_9:int)<-(b:bat[:int,:str])
    l := statistics.getCount("timezones");	# 9 STATgetCount (l:lng)<-(_3:str)
    io.print(l);	# 10 IOprint_val (_11:int)<-(l:lng)
catch MALexception:str ;	# 11  (MALexception:str) jump 13
    io.print("could not get count from timezones");	# 12 IOprint_val (_13:int)<-(_14:str)
exit MALexception:str ;	# 13  (MALexception:str)
    m := statistics.getMin("timezones");	# 14 STATgetMin (m:lng)<-(_3:str)
catch MALexception:str ;	# 15  (MALexception:str) jump 17
    io.print("could not get minimum from timezones");	# 16 IOprint_val (_16:int)<-(_17:str)
exit MALexception:str ;	# 17  (MALexception:str)
    io.print(m);	# 18 IOprint_val (_18:int)<-(m:lng)
    h := statistics.getHistogram("timezones");	# 19 STATgetHistogram (h:bat[:any,:any])<-(_3:str)
catch MALexception:str ;	# 20  (MALexception:str) jump 24
    io.print("could not get histogram from timezones");	# 21 IOprint_val (_20:int)<-(_21:str)
    io.print(MALexception);	# 22 IOprint_val (_22:int)<-(MALexception:str)
    h := bat.new(:oid,:int);	# 23 CMDBATnew (h:bat[:any,:any])<-(_23:oid)(_24:int)
exit MALexception:str ;	# 24  (MALexception:str)
    io.print("histogram");	# 25 IOprint_val (_25:int)<-(_26:str)
    io.print(h);	# 26 IOprint_val (_27:int)<-(h:bat[:any,:any])
    hc := aggr.count(h);	# 27 ALGcount_bat (hc:int)<-(h:bat[:any,:any])
    io.print(hc);	# 28 IOprint_val (_29:int)<-(hc:int)
    statistics.discard("timezones");	# 29 STATdiscard (_30:void)<-(_3:str)
    statistics.epilogue();	# 30 STATepilogue (_31:void)
    d := bbp.getRefCount();	# 31 CMDbbpRefCount (d:bat[:int,:int])
    dl := bbp.getLRefCount();	# 32 CMDbbpLRefCount (dl:bat[:int,:int])
    dn := bbp.getNames();	# 33 CMDbbpNames (dn:bat[:int,:str])
    io.print(dn,d,dl);	# 34 IOtable (_35:int)<-(dn:bat[:int,:str])(d:bat[:int,:int])(dl:bat[:int,:int])
end main;	# 35  
#-------------------------------------------------#
# t	t	t	t	t	t	  # name
# str	lng	lng	lng	lng	str	  # type
#-------------------------------------------------#
#-----------------------------------------------------------------#
# t		t	t	t	t	t		  # name
# str		lng	lng	lng	lng	str		  # type
#-----------------------------------------------------------------#
[ "timezones",	  24,	  15760,  nil,	  nil,	  "Htimezones"	  ]
#-------------------------#
# h	t		  # name
# int	str		  # type
#-------------------------#
[ 3,	  "timezones"	  ]
[ 24 ]
[ nil ]
[ "histogram" ]
#---------------------------------------------------------------------------------------------------------#
# h												t	  # name
# timezone											int	  # type
#---------------------------------------------------------------------------------------------------------#
[ GMT+12:00,											  1	  ]
[ GMT+11:00,											  1	  ]
[ GMT+10:00,											  1	  ]
[ GMT+09:00,											  1	  ]
[ GMT+08:00,											  1	  ]
[ GMT+07:00,											  1	  ]
[ GMT+05:00,											  1	  ]
[ GMT+04:00,											  1	  ]
[ GMT,												  1	  ]
[ GMT-01:00,											  1	  ]
[ GMT-10:00,											  1	  ]
[ GMT-11:00,											  1	  ]
[ GMT+06:00-DST[first sunday from end of march@02:01,first sunday from end of october@02:01],	  1	  ]
[ GMT+03:00-DST[first sunday from end of march@02:01,first sunday from end of october@02:01],	  1	  ]
[ GMT+02:00-DST[first sunday from end of march@02:01,first sunday from end of october@02:01],	  1	  ]
[ GMT+01:00-DST[first sunday from end of march@02:01,first sunday from end of october@02:01],	  1	  ]
[ GMT-DST[first sunday from end of march@02:01,first sunday from end of october@02:01],		  1	  ]
[ GMT-02:00-DST[first sunday from end of october@02:01,first sunday from end of march@02:01],	  1	  ]
[ GMT-03:00-DST[first sunday from end of october@02:01,first sunday from end of march@02:01],	  1	  ]
[ GMT-04:00-DST[first sunday from end of october@02:01,first sunday from end of march@02:01],	  1	  ]
[ GMT-05:00-DST[first sunday from end of march@02:01,first sunday from end of october@02:01],	  1	  ]
[ GMT-06:00-DST[first sunday from end of march@02:01,first sunday from end of october@02:01],	  1	  ]
[ GMT-07:00-DST[first sunday from end of march@02:01,first sunday from end of october@02:01],	  1	  ]
[ GMT-09:00-DST[first sunday from end of march@02:01,first sunday from end of october@02:01],	  1	  ]
[ 24 ]
#---------------------------------------------------------#
# bbp	name			refcnt	lrefcnt		  # name
# int	str			int	int		  # type
#---------------------------------------------------------#
[ 1,	  "monet_environment",	  1,	  0		  ]
[ 2,	  "monet_unicode_case",	  1,	  0		  ]
[ 3,	  "timezones",		  3,	  1		  ]
[ 4,	  "M5system_auth_user",	  1,	  1		  ]
[ 5,	  "M5system_auth_passwd", 1,	  1		  ]
[ 6,	  "M5system_auth_scen",	  1,	  1		  ]
[ 17,	  "Htimezones",		  2,	  2		  ]
[ 18,	  "tmp_22",		  1,	  1		  ]

# 08:19:58 >  
# 08:19:58 >  Done.
# 08:19:58 >  

