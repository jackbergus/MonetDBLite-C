stdout of test 'statistics01` in directory 'src/modules/mal` itself:


# 08:19:58 >  
# 08:19:58 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=37417 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  statistics01.mal < /dev/null
# 08:19:58 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information
##test the statistics module
#tz:= bbp.bind("timezones");
#statistics.prelude();
#statistics.dump();
#statistics.deposit("timezones");
#statistics.dump();
#b:= statistics.getHotset();
#io.print(b);
#l:= statistics.getCount("timezones");
#io.print(l);
#catch MALException:str;
#	io.print("could not get count from timezones");
#exit MALException;
#m:= statistics.getMin("timezones");
#catch MALException:str;
#	io.print("could not get minimum from timezones");
#exit MALException;
#io.print(m);
#h:= statistics.getHistogram("timezones");
#catch MALException:str;
#	io.print("could not get histogram from timezones");
#	io.print(MALException);
#	h:= bat.new(:oid,:int);
#exit MALException;
#io.print("histogram");
#io.print(h);
#hc:= aggr.count(h);
#io.print(hc);
#statistics.discard("timezones");
#statistics.epilogue();
##d:= bbp.getRefCount();
##dl:=bbp.getLRefCount();
##dn:= bbp.getNames();
##ds:= algebra.sort(dn);
##io.table(dn,d,dl);
#
#
function user.main():void;              #  0 main:void := user.main() {G}
#test the statistics module 
    tz:bat[:str,:timezone]  := bbp.bind("timezones");#  2 tz:bat[:str,:timezone] := CMDbbpbind(_3:str) {G}
    statistics.prelude();               #  3 _4:void := STATprelude() 
#statistics.dump();		is size dependent 
    statistics.deposit("timezones");    #  5 _6:void := STATdepositStr(_3:str) 
#statistics.dump();		is size dependent 
    b := statistics.getHotset();        #  7 b:bat[:int,:str] := STATgetHotset() {G}
#io.print(b); 
    l := statistics.getCount("timezones");#  9 l:lng := STATgetCount(_3:str) 
    io.print(l);                        # 10 _11:void := IOprint_val(l:lng) 
catch MALException:str ;                # 11 MALException:str {J13}
    io.print("could not get count from timezones");# 12 _13:void := IOprint_val(_14:str) 
exit MALException:str ;                 # 13 MALException:str 
    m := statistics.getMin("timezones");# 14 m:lng := STATgetMin(_3:str) 
catch MALException:str ;                # 15 MALException:str {J17}
    io.print("could not get minimum from timezones");# 16 _16:void := IOprint_val(_17:str) 
exit MALException:str ;                 # 17 MALException:str 
    io.print(m);                        # 18 _18:void := IOprint_val(m:lng) 
    h := statistics.getHistogram("timezones");# 19 h:bat[:any,:any] := STATgetHistogram(_3:str) {G}
catch MALException:str ;                # 20 MALException:str {J24}
    io.print("could not get histogram from timezones");# 21 _20:void := IOprint_val(_21:str) 
    io.print(MALException);             # 22 _22:void := IOprint_val(MALException:str) 
    h := bat.new(:oid,:int);            # 23 h:bat[:any,:any] := CMDBATnew(_23:oid, _24:int) {G}
exit MALException:str ;                 # 24 MALException:str 
    io.print("histogram");              # 25 _25:void := IOprint_val(_26:str) 
    io.print(h);                        # 26 _27:void := IOprint_val(h:bat[:any,:any]) 
    hc := aggr.count(h);                # 27 hc:wrd := ALGcount_bat(h:bat[:any,:any]) 
    io.print(hc);                       # 28 _29:void := IOprint_val(hc:wrd) 
    statistics.discard("timezones");    # 29 _30:void := STATdiscard(_3:str) 
    statistics.epilogue();              # 30 _31:void := STATepilogue() 
#d:= bbp.getRefCount();
#dl:=bbp.getLRefCount();
#dn:= bbp.getNames();
#ds:= algebra.sort(dn); 
#io.table(dn,d,dl); 
end main;	# 36  
[ 24 ]
[ nil ]
[ "histogram" ]
#---------------------------------------------------------------------------------------------------------#
# h												t	  # name
# timezone											int	  # type
#---------------------------------------------------------------------------------------------------------#
[ GMT+12:00,											  1	  ]
[ GMT+11:00,											  1	  ]
[ GMT+10:00,											  1	  ]
[ GMT+09:00,											  1	  ]
[ GMT+08:00,											  1	  ]
[ GMT+07:00,											  1	  ]
[ GMT+05:00,											  1	  ]
[ GMT+04:00,											  1	  ]
[ GMT,												  1	  ]
[ GMT-01:00,											  1	  ]
[ GMT-10:00,											  1	  ]
[ GMT-11:00,											  1	  ]
[ GMT+06:00-DST[first sunday from end of march@02:01,first sunday from end of october@02:01],	  1	  ]
[ GMT+03:00-DST[first sunday from end of march@02:01,first sunday from end of october@02:01],	  1	  ]
[ GMT+02:00-DST[first sunday from end of march@02:01,first sunday from end of october@02:01],	  1	  ]
[ GMT+01:00-DST[first sunday from end of march@02:01,first sunday from end of october@02:01],	  1	  ]
[ GMT-DST[first sunday from end of march@02:01,first sunday from end of october@02:01],		  1	  ]
[ GMT-02:00-DST[first sunday from end of october@02:01,first sunday from end of march@02:01],	  1	  ]
[ GMT-03:00-DST[first sunday from end of october@02:01,first sunday from end of march@02:01],	  1	  ]
[ GMT-04:00-DST[first sunday from end of october@02:01,first sunday from end of march@02:01],	  1	  ]
[ GMT-05:00-DST[first sunday from end of march@02:01,first sunday from end of october@02:01],	  1	  ]
[ GMT-06:00-DST[first sunday from end of march@02:01,first sunday from end of october@02:01],	  1	  ]
[ GMT-07:00-DST[first sunday from end of march@02:01,first sunday from end of october@02:01],	  1	  ]
[ GMT-09:00-DST[first sunday from end of march@02:01,first sunday from end of october@02:01],	  1	  ]
[ 24 ]

# 08:19:58 >  
# 08:19:58 >  Done.
# 08:19:58 >  

