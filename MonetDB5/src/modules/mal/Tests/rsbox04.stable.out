stdout of test 'rsbox04` in directory 'src/modules/mal` itself:


# 00:03:58 >  
# 00:03:58 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=33330 --set sql_port=49911 --set xquery_port=56575 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  rsbox04.mal </dev/null
# 00:03:58 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information.
### Test generic ResultSet behaviour with all available types of BATs as
### columns
#
#include rsbox;
#
#rs := rsbox.create(9, 't');
#
#b1 := bbp.new(:void, :bit);
#bat.insert(b1, nil, 1:bit);
#bat.insert(b1, nil, 0:bit);
#bat.insert(b1, nil, 0:bit);
#bat.insert(b1, nil, 0:bit);
#bat.insert(b1, nil, nil:bit);
#bat.insert(b1, nil, 1:bit);
#bat.insert(b1, nil, 0:bit);
#bat.insert(b1, nil, 1:bit);
#bat.insert(b1, nil, nil:bit);
#bat.insert(b1, nil, 1:bit);
#
#b2 := bbp.new(:void, :chr);
#bat.insert(b2, nil, nil:chr);
#bat.insert(b2, nil, 'a');
#bat.insert(b2, nil, 'x');
#bat.insert(b2, nil, nil:chr);
#bat.insert(b2, nil, 'a');
#bat.insert(b2, nil, 'f');
#bat.insert(b2, nil, 'r');
#bat.insert(b2, nil, 'd');
#bat.insert(b2, nil, ';');
#bat.insert(b2, nil, ' ');
#
#b3 := bbp.new(:void, :str);
#bat.insert(b3, nil, "Daft Punk - Human After All");
#bat.insert(b3, nil, "Spinvis - Spinvis");
#bat.insert(b3, nil, "Within Temptation - The Silent Force");
#bat.insert(b3, nil, "Anouk - Together Alone");
#bat.insert(b3, nil, "Armiral Freebee - Admiral Freebee");
#bat.insert(b3, nil, "Lais - Douce Victime");
#bat.insert(b3, nil, nil:str);
#bat.insert(b3, nil, "Hooverphonic - Sit Down and Listen To...");
#bat.insert(b3, nil, "Osdorp Posse - Tegenstrijd");
#bat.insert(b3, nil, "MC Wigger & DJ Wanna-B - Fuck Osdorp");
#
#b4 := bbp.new(:void, :oid);
#bat.insert(b4, nil, 2@0);
#bat.insert(b4, nil, nil:oid);
#bat.insert(b4, nil, 4@0);
#bat.insert(b4, nil, 9@0);
#bat.insert(b4, nil, 6@0);
#bat.insert(b4, nil, 102@0);
#bat.insert(b4, nil, nil:oid);
#bat.insert(b4, nil, 28@0);
#bat.insert(b4, nil, 4@0);
#bat.insert(b4, nil, 1@0);
#
#b5 := bbp.new(:void, :sht);
#bat.insert(b5, nil, 12:sht);
#bat.insert(b5, nil, 0:sht);
#bat.insert(b5, nil, -73:sht);
#bat.insert(b5, nil, 2:sht);
#bat.insert(b5, nil, 9:sht);
#bat.insert(b5, nil, -23:sht);
#bat.insert(b5, nil, nil:sht);
#bat.insert(b5, nil, 2:sht);
#bat.insert(b5, nil, 94:sht);
#bat.insert(b5, nil, 5:sht);
#
#b6 := bbp.new(:void, :int);
#bat.insert(b6, nil, 2317:int);
#bat.insert(b6, nil, 283:int);
#bat.insert(b6, nil, -329:int);
#bat.insert(b6, nil, nil:int);
#bat.insert(b6, nil, -72:int);
#bat.insert(b6, nil, 23:int);
#bat.insert(b6, nil, 9217:int);
#bat.insert(b6, nil, 1282:int);
#bat.insert(b6, nil, -72:int);
#bat.insert(b6, nil, 28362:int);
#
#b7 := bbp.new(:void, :lng);
#bat.insert(b7, nil, 21783253:lng);
#bat.insert(b7, nil, -372867832:lng);
#bat.insert(b7, nil, 372:lng);
#bat.insert(b7, nil, -1:lng);
#bat.insert(b7, nil, 3732897923:lng);
#bat.insert(b7, nil, 632:lng);
#bat.insert(b7, nil, 389263267823:lng);
#bat.insert(b7, nil, -32782:lng);
#bat.insert(b7, nil, 8329732:lng);
#bat.insert(b7, nil, nil:lng);
#
#b8 := bbp.new(:void, :flt);
#bat.insert(b8, nil, nil:flt);
#bat.insert(b8, nil, 63.362:flt);
#bat.insert(b8, nil, 725:flt);
#bat.insert(b8, nil, -21672.27:flt);
#bat.insert(b8, nil, 272.000092:flt);
#bat.insert(b8, nil, -392.1:flt);
#bat.insert(b8, nil, 821.82:flt);
#bat.insert(b8, nil, 2.20371:flt);
#bat.insert(b8, nil, 721.271:flt);
#bat.insert(b8, nil, nil:flt);
#
#b9 := bbp.new(:void, :dbl);
#bat.insert(b9, nil, 83927632.38772:dbl);
#bat.insert(b9, nil, nil:dbl);
#bat.insert(b9, nil, -932720.32:dbl);
#bat.insert(b9, nil, 23.73:dbl);
#bat.insert(b9, nil, 32782.238:dbl);
#bat.insert(b9, nil, 32723.360001:dbl);
#bat.insert(b9, nil, nil:dbl);
#bat.insert(b9, nil, 0.0000021:dbl);
#bat.insert(b9, nil, 4:dbl);
#bat.insert(b9, nil, 64.1:dbl);
#
#resultset.populateColumn(rs, 1, b1);
#resultset.populateColumn(rs, 2, b2);
#resultset.populateColumn(rs, 3, b3);
#resultset.populateColumn(rs, 4, b4);
#resultset.populateColumn(rs, 5, b5);
#resultset.populateColumn(rs, 6, b6);
#resultset.populateColumn(rs, 7, b7);
#resultset.populateColumn(rs, 8, b8);
#resultset.populateColumn(rs, 9, b9);
#
#resultset.writeNextPart(rs);
#
#rsbox.releaseAll();
#
#
function user.main():void;	# 0  (main:void)
## Test generic ResultSet behaviour with all available types of BATs as 	# 1  (_1:str)
## columns 	# 2  (_2:str)
# ResultSets themselves should never be serialised to disk.  The 	# 3  (_3:str)
# fromStr and toStr functions merely exist to adhere to the interface 	# 4  (_4:str)
    rs := rsbox.create(9,'t');	# 5 RSBcreate (rs:resultset)<-(_6:int)(_7:chr)
    b1 := bat.new(:void,:bit);	# 6 CMDBATnew (b1:bat[:void,:bit])<-(_9:void)(_10:bit)
    bat.insert(b1,nil:void,true:bit);	# 7 BKCinsert_bun (_11:void)<-(b1:bat[:void,:bit])(_12:void)(_13:bit)
    bat.insert(b1,nil:void,false:bit);	# 8 BKCinsert_bun (_14:void)<-(b1:bat[:void,:bit])(_12:void)(_15:bit)
    bat.insert(b1,nil:void,false:bit);	# 9 BKCinsert_bun (_16:void)<-(b1:bat[:void,:bit])(_12:void)(_15:bit)
    bat.insert(b1,nil:void,false:bit);	# 10 BKCinsert_bun (_17:void)<-(b1:bat[:void,:bit])(_12:void)(_15:bit)
    bat.insert(b1,nil:void,nil:bit);	# 11 BKCinsert_bun (_18:void)<-(b1:bat[:void,:bit])(_12:void)(_19:bit)
    bat.insert(b1,nil:void,true:bit);	# 12 BKCinsert_bun (_20:void)<-(b1:bat[:void,:bit])(_12:void)(_13:bit)
    bat.insert(b1,nil:void,false:bit);	# 13 BKCinsert_bun (_21:void)<-(b1:bat[:void,:bit])(_12:void)(_15:bit)
    bat.insert(b1,nil:void,true:bit);	# 14 BKCinsert_bun (_22:void)<-(b1:bat[:void,:bit])(_12:void)(_13:bit)
    bat.insert(b1,nil:void,nil:bit);	# 15 BKCinsert_bun (_23:void)<-(b1:bat[:void,:bit])(_12:void)(_19:bit)
    bat.insert(b1,nil:void,true:bit);	# 16 BKCinsert_bun (_24:void)<-(b1:bat[:void,:bit])(_12:void)(_13:bit)
    b2 := bat.new(:void,:chr);	# 17 CMDBATnew (b2:bat[:void,:chr])<-(_9:void)(_26:chr)
    bat.insert(b2,nil:void,nil:chr);	# 18 BKCinsert_bun (_27:void)<-(b2:bat[:void,:chr])(_12:void)(_28:chr)
    bat.insert(b2,nil:void,'a');	# 19 BKCinsert_bun (_29:void)<-(b2:bat[:void,:chr])(_12:void)(_30:chr)
    bat.insert(b2,nil:void,'x');	# 20 BKCinsert_bun (_31:void)<-(b2:bat[:void,:chr])(_12:void)(_32:chr)
    bat.insert(b2,nil:void,nil:chr);	# 21 BKCinsert_bun (_33:void)<-(b2:bat[:void,:chr])(_12:void)(_28:chr)
    bat.insert(b2,nil:void,'a');	# 22 BKCinsert_bun (_34:void)<-(b2:bat[:void,:chr])(_12:void)(_30:chr)
    bat.insert(b2,nil:void,'f');	# 23 BKCinsert_bun (_35:void)<-(b2:bat[:void,:chr])(_12:void)(_36:chr)
    bat.insert(b2,nil:void,'r');	# 24 BKCinsert_bun (_37:void)<-(b2:bat[:void,:chr])(_12:void)(_38:chr)
    bat.insert(b2,nil:void,'d');	# 25 BKCinsert_bun (_39:void)<-(b2:bat[:void,:chr])(_12:void)(_40:chr)
    bat.insert(b2,nil:void,';');	# 26 BKCinsert_bun (_41:void)<-(b2:bat[:void,:chr])(_12:void)(_42:chr)
    bat.insert(b2,nil:void,' ');	# 27 BKCinsert_bun (_43:void)<-(b2:bat[:void,:chr])(_12:void)(_44:chr)
    b3 := bat.new(:void,:str);	# 28 CMDBATnew (b3:bat[:void,:str])<-(_9:void)(_46:str)
    bat.insert(b3,nil:void,"Daft Punk - Human After All");	# 29 BKCinsert_bun (_47:void)<-(b3:bat[:void,:str])(_12:void)(_48:str)
    bat.insert(b3,nil:void,"Spinvis - Spinvis");	# 30 BKCinsert_bun (_49:void)<-(b3:bat[:void,:str])(_50:void)(_51:str)
    bat.insert(b3,nil:void,"Within Temptation - The Silent Force");	# 31 BKCinsert_bun (_52:void)<-(b3:bat[:void,:str])(_50:void)(_53:str)
    bat.insert(b3,nil:void,"Anouk - Together Alone");	# 32 BKCinsert_bun (_54:void)<-(b3:bat[:void,:str])(_50:void)(_55:str)
    bat.insert(b3,nil:void,"Armiral Freebee - Admiral Freebee");	# 33 BKCinsert_bun (_56:void)<-(b3:bat[:void,:str])(_50:void)(_57:str)
    bat.insert(b3,nil:void,"Lais - Douce Victime");	# 34 BKCinsert_bun (_58:void)<-(b3:bat[:void,:str])(_50:void)(_59:str)
    bat.insert(b3,nil:void,nil:str);	# 35 BKCinsert_bun (_60:void)<-(b3:bat[:void,:str])(_50:void)(_61:str)
    bat.insert(b3,nil:void,"Hooverphonic - Sit Down and Listen To...");	# 36 BKCinsert_bun (_62:void)<-(b3:bat[:void,:str])(_50:void)(_63:str)
    bat.insert(b3,nil:void,"Osdorp Posse - Tegenstrijd");	# 37 BKCinsert_bun (_64:void)<-(b3:bat[:void,:str])(_50:void)(_65:str)
    bat.insert(b3,nil:void,"MC Wigger & DJ Wanna-B - Fuck Osdorp");	# 38 BKCinsert_bun (_66:void)<-(b3:bat[:void,:str])(_50:void)(_67:str)
    b4 := bat.new(:void,:oid);	# 39 CMDBATnew (b4:bat[:void,:oid])<-(_9:void)(_69:oid)
    bat.insert(b4,nil:void,2@0);	# 40 BKCinsert_bun (_70:void)<-(b4:bat[:void,:oid])(_50:void)(_71:oid)
    bat.insert(b4,nil:void,nil:oid);	# 41 BKCinsert_bun (_72:void)<-(b4:bat[:void,:oid])(_50:void)(_73:oid)
    bat.insert(b4,nil:void,4@0);	# 42 BKCinsert_bun (_74:void)<-(b4:bat[:void,:oid])(_50:void)(_75:oid)
    bat.insert(b4,nil:void,9@0);	# 43 BKCinsert_bun (_76:void)<-(b4:bat[:void,:oid])(_50:void)(_77:oid)
    bat.insert(b4,nil:void,6@0);	# 44 BKCinsert_bun (_78:void)<-(b4:bat[:void,:oid])(_50:void)(_79:oid)
    bat.insert(b4,nil:void,102@0);	# 45 BKCinsert_bun (_80:void)<-(b4:bat[:void,:oid])(_50:void)(_81:oid)
    bat.insert(b4,nil:void,nil:oid);	# 46 BKCinsert_bun (_82:void)<-(b4:bat[:void,:oid])(_50:void)(_73:oid)
    bat.insert(b4,nil:void,28@0);	# 47 BKCinsert_bun (_83:void)<-(b4:bat[:void,:oid])(_50:void)(_84:oid)
    bat.insert(b4,nil:void,4@0);	# 48 BKCinsert_bun (_85:void)<-(b4:bat[:void,:oid])(_50:void)(_75:oid)
    bat.insert(b4,nil:void,1@0);	# 49 BKCinsert_bun (_86:void)<-(b4:bat[:void,:oid])(_87:void)(_88:oid)
    b5 := bat.new(:void,:sht);	# 50 CMDBATnew (b5:bat[:void,:sht])<-(_9:void)(_90:sht)
    bat.insert(b5,nil:void,12:sht);	# 51 BKCinsert_bun (_91:void)<-(b5:bat[:void,:sht])(_87:void)(_92:sht)
    bat.insert(b5,nil:void,0:sht);	# 52 BKCinsert_bun (_93:void)<-(b5:bat[:void,:sht])(_87:void)(_94:sht)
    bat.insert(b5,nil:void,-73:sht);	# 53 BKCinsert_bun (_95:void)<-(b5:bat[:void,:sht])(_87:void)(_96:sht)
    bat.insert(b5,nil:void,2:sht);	# 54 BKCinsert_bun (_97:void)<-(b5:bat[:void,:sht])(_87:void)(_98:sht)
    bat.insert(b5,nil:void,9:sht);	# 55 BKCinsert_bun (_99:void)<-(b5:bat[:void,:sht])(_87:void)(_100:sht)
    bat.insert(b5,nil:void,-23:sht);	# 56 BKCinsert_bun (_101:void)<-(b5:bat[:void,:sht])(_87:void)(_102:sht)
    bat.insert(b5,nil:void,nil:sht);	# 57 BKCinsert_bun (_103:void)<-(b5:bat[:void,:sht])(_87:void)(_104:sht)
    bat.insert(b5,nil:void,2:sht);	# 58 BKCinsert_bun (_105:void)<-(b5:bat[:void,:sht])(_87:void)(_98:sht)
    bat.insert(b5,nil:void,94:sht);	# 59 BKCinsert_bun (_106:void)<-(b5:bat[:void,:sht])(_87:void)(_107:sht)
    bat.insert(b5,nil:void,5:sht);	# 60 BKCinsert_bun (_108:void)<-(b5:bat[:void,:sht])(_87:void)(_109:sht)
    b6 := bat.new(:void,:int);	# 61 CMDBATnew (b6:bat[:void,:int])<-(_9:void)(_111:int)
    bat.insert(b6,nil:void,2317:int);	# 62 BKCinsert_bun (_112:void)<-(b6:bat[:void,:int])(_87:void)(_113:int)
    bat.insert(b6,nil:void,283:int);	# 63 BKCinsert_bun (_114:void)<-(b6:bat[:void,:int])(_87:void)(_115:int)
    bat.insert(b6,nil:void,-329:int);	# 64 BKCinsert_bun (_116:void)<-(b6:bat[:void,:int])(_87:void)(_117:int)
    bat.insert(b6,nil:void,nil:int);	# 65 BKCinsert_bun (_118:void)<-(b6:bat[:void,:int])(_87:void)(_119:int)
    bat.insert(b6,nil:void,-72:int);	# 66 BKCinsert_bun (_120:void)<-(b6:bat[:void,:int])(_87:void)(_121:int)
    bat.insert(b6,nil:void,23:int);	# 67 BKCinsert_bun (_122:void)<-(b6:bat[:void,:int])(_87:void)(_123:int)
    bat.insert(b6,nil:void,9217:int);	# 68 BKCinsert_bun (_124:void)<-(b6:bat[:void,:int])(_125:void)(_126:int)
    bat.insert(b6,nil:void,1282:int);	# 69 BKCinsert_bun (_127:void)<-(b6:bat[:void,:int])(_125:void)(_128:int)
    bat.insert(b6,nil:void,-72:int);	# 70 BKCinsert_bun (_129:void)<-(b6:bat[:void,:int])(_125:void)(_121:int)
    bat.insert(b6,nil:void,28362:int);	# 71 BKCinsert_bun (_130:void)<-(b6:bat[:void,:int])(_125:void)(_131:int)
    b7 := bat.new(:void,:lng);	# 72 CMDBATnew (b7:bat[:void,:lng])<-(_9:void)(_133:lng)
    bat.insert(b7,nil:void,21783253:lng);	# 73 BKCinsert_bun (_134:void)<-(b7:bat[:void,:lng])(_125:void)(_135:lng)
    bat.insert(b7,nil:void,-372867832:lng);	# 74 BKCinsert_bun (_136:void)<-(b7:bat[:void,:lng])(_125:void)(_137:lng)
    bat.insert(b7,nil:void,372:lng);	# 75 BKCinsert_bun (_138:void)<-(b7:bat[:void,:lng])(_125:void)(_139:lng)
    bat.insert(b7,nil:void,-1:lng);	# 76 BKCinsert_bun (_140:void)<-(b7:bat[:void,:lng])(_125:void)(_141:lng)
    bat.insert(b7,nil:void,3732897923:lng);	# 77 BKCinsert_bun (_142:void)<-(b7:bat[:void,:lng])(_125:void)(_143:lng)
    bat.insert(b7,nil:void,632:lng);	# 78 BKCinsert_bun (_144:void)<-(b7:bat[:void,:lng])(_125:void)(_145:lng)
    bat.insert(b7,nil:void,389263267823:lng);	# 79 BKCinsert_bun (_146:void)<-(b7:bat[:void,:lng])(_125:void)(_147:lng)
    bat.insert(b7,nil:void,-32782:lng);	# 80 BKCinsert_bun (_148:void)<-(b7:bat[:void,:lng])(_125:void)(_149:lng)
    bat.insert(b7,nil:void,8329732:lng);	# 81 BKCinsert_bun (_150:void)<-(b7:bat[:void,:lng])(_125:void)(_151:lng)
    bat.insert(b7,nil:void,nil:lng);	# 82 BKCinsert_bun (_152:void)<-(b7:bat[:void,:lng])(_125:void)(_153:lng)
    b8 := bat.new(:void,:flt);	# 83 CMDBATnew (b8:bat[:void,:flt])<-(_9:void)(_155:flt)
    bat.insert(b8,nil:void,nil:flt);	# 84 BKCinsert_bun (_156:void)<-(b8:bat[:void,:flt])(_125:void)(_157:flt)
    bat.insert(b8,nil:void,63.3619995:flt);	# 85 BKCinsert_bun (_158:void)<-(b8:bat[:void,:flt])(_125:void)(_159:flt)
    bat.insert(b8,nil:void,725:flt);	# 86 BKCinsert_bun (_160:void)<-(b8:bat[:void,:flt])(_125:void)(_161:flt)
    bat.insert(b8,nil:void,-21672.2695:flt);	# 87 BKCinsert_bun (_162:void)<-(b8:bat[:void,:flt])(_163:void)(_164:flt)
    bat.insert(b8,nil:void,272.000092:flt);	# 88 BKCinsert_bun (_165:void)<-(b8:bat[:void,:flt])(_163:void)(_166:flt)
    bat.insert(b8,nil:void,-392.100006:flt);	# 89 BKCinsert_bun (_167:void)<-(b8:bat[:void,:flt])(_163:void)(_168:flt)
    bat.insert(b8,nil:void,821.820007:flt);	# 90 BKCinsert_bun (_169:void)<-(b8:bat[:void,:flt])(_163:void)(_170:flt)
    bat.insert(b8,nil:void,2.20371008:flt);	# 91 BKCinsert_bun (_171:void)<-(b8:bat[:void,:flt])(_163:void)(_172:flt)
    bat.insert(b8,nil:void,721.270996:flt);	# 92 BKCinsert_bun (_173:void)<-(b8:bat[:void,:flt])(_163:void)(_174:flt)
    bat.insert(b8,nil:void,nil:flt);	# 93 BKCinsert_bun (_175:void)<-(b8:bat[:void,:flt])(_163:void)(_157:flt)
    b9 := bat.new(:void,:dbl);	# 94 CMDBATnew (b9:bat[:void,:dbl])<-(_9:void)(_177:dbl)
    bat.insert(b9,nil:void,83927632:dbl);	# 95 BKCinsert_bun (_178:void)<-(b9:bat[:void,:dbl])(_163:void)(_179:dbl)
    bat.insert(b9,nil:void,nil:dbl);	# 96 BKCinsert_bun (_180:void)<-(b9:bat[:void,:dbl])(_163:void)(_181:dbl)
    bat.insert(b9,nil:void,-932720.3125:dbl);	# 97 BKCinsert_bun (_182:void)<-(b9:bat[:void,:dbl])(_163:void)(_183:dbl)
    bat.insert(b9,nil:void,23.729999542236328:dbl);	# 98 BKCinsert_bun (_184:void)<-(b9:bat[:void,:dbl])(_163:void)(_185:dbl)
    bat.insert(b9,nil:void,32782.23828125:dbl);	# 99 BKCinsert_bun (_186:void)<-(b9:bat[:void,:dbl])(_163:void)(_187:dbl)
    bat.insert(b9,nil:void,32723.359375:dbl);	# 100 BKCinsert_bun (_188:void)<-(b9:bat[:void,:dbl])(_163:void)(_189:dbl)
    bat.insert(b9,nil:void,nil:dbl);	# 101 BKCinsert_bun (_190:void)<-(b9:bat[:void,:dbl])(_163:void)(_181:dbl)
    bat.insert(b9,nil:void,2.1000000742787961e-06:dbl);	# 102 BKCinsert_bun (_191:void)<-(b9:bat[:void,:dbl])(_163:void)(_192:dbl)
    bat.insert(b9,nil:void,4:dbl);	# 103 BKCinsert_bun (_193:void)<-(b9:bat[:void,:dbl])(_163:void)(_194:dbl)
    bat.insert(b9,nil:void,64.099998474121094:dbl);	# 104 BKCinsert_bun (_195:void)<-(b9:bat[:void,:dbl])(_163:void)(_196:dbl)
    resultset.populateColumn(rs,1,b1);	# 105 RSpopulateColumn (_197:resultset)<-(rs:resultset)(_198:int)(b1:bat[:void,:bit])
    resultset.populateColumn(rs,2,b2);	# 106 RSpopulateColumn (_199:resultset)<-(rs:resultset)(_200:int)(b2:bat[:void,:chr])
    resultset.populateColumn(rs,3,b3);	# 107 RSpopulateColumn (_201:resultset)<-(rs:resultset)(_202:int)(b3:bat[:void,:str])
    resultset.populateColumn(rs,4,b4);	# 108 RSpopulateColumn (_203:resultset)<-(rs:resultset)(_204:int)(b4:bat[:void,:oid])
    resultset.populateColumn(rs,5,b5);	# 109 RSpopulateColumn (_205:resultset)<-(rs:resultset)(_206:int)(b5:bat[:void,:sht])
    resultset.populateColumn(rs,6,b6);	# 110 RSpopulateColumn (_207:resultset)<-(rs:resultset)(_208:int)(b6:bat[:void,:int])
    resultset.populateColumn(rs,7,b7);	# 111 RSpopulateColumn (_209:resultset)<-(rs:resultset)(_210:int)(b7:bat[:void,:lng])
    resultset.populateColumn(rs,8,b8);	# 112 RSpopulateColumn (_211:resultset)<-(rs:resultset)(_212:int)(b8:bat[:void,:flt])
    resultset.populateColumn(rs,9,b9);	# 113 RSpopulateColumn (_213:resultset)<-(rs:resultset)(_214:int)(b9:bat[:void,:dbl])
    resultset.writeNextPart(rs);	# 114 RSwriteNextPart (_215:int)<-(rs:resultset)
    rsbox.releaseAll();	# 115 RSBreleaseAll (_216:void)
end main;	# 116  
&t
$id	1
$columncount	9
$tuplecount	10
$ctype	bcSosilfd
%column	column_1	column_2	column_3	column_4	column_5	column_6	column_7	column_8	column_9
%table									
%schema									
%type	boolean	char	varchar	oid	smallint	int	bigint	real	double
%digits									
%scale									
%width	5	1	40	11	4	9	18	12	24
[1	NULL	27:Daft Punk - Human After All	2	12	2317	21783253	NULL	8.392763e+07
[0	a	17:Spinvis - Spinvis	NULL	0	283	-372867832	6.336200e+01	NULL
[0	x	36:Within Temptation - The Silent Force	4	-73	-329	372	7.250000e+02	-9.327203e+05
[0	NULL	22:Anouk - Together Alone	9	2	NULL	-1	-2.167227e+04	2.373000e+01
[1	a	33:Armiral Freebee - Admiral Freebee	6	9	-72	3732897923	2.720001e+02	3.278224e+04
[1	f	20:Lais - Douce Victime	102	-23	23	632	-3.921000e+02	3.272336e+04
[0	r	NULL	NULL	NULL	9217	389263267823	8.218200e+02	NULL
[1	d	40:Hooverphonic - Sit Down and Listen To...	28	2	1282	-32782	2.203710e+00	2.100000e-06
[1	;	26:Osdorp Posse - Tegenstrijd	4	94	-72	8329732	7.212710e+02	4.000000e+00
[1	 	36:MC Wigger & DJ Wanna-B - Fuck Osdorp	1	5	28362	NULL	NULL	6.410000e+01

# 00:03:58 >  
# 00:03:58 >  Done.
# 00:03:58 >  

