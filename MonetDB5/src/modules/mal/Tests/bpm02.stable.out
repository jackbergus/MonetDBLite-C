stdout of test 'bpm02` in directory 'src/modules/mal` itself:


# 08:32:57 >  
# 08:32:57 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/monetdb5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5//Linux/lib/MonetDB5:/ufs/mk/monet5//Linux/lib/MonetDB5/lib:/ufs/mk/monet5//Linux/lib/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5//Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/sql_logs" --set "xquery_logdir=/ufs/mk/monet5//Linux/var/MonetDB5/xquery_logs" --set mapi_port=39744 --set xrpc_port=40972 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  bpm02.mal
# 08:32:57 >  

# MonetDB Server v5.0.0_beta2_1
# Copyright (c) 1993-2007 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information
##testing the Milena BAT partition manager
#R := bat.new(:oid,:int);
#bat.append(R,1);
#bat.append(R,3);
#bat.append(R,5);
#bat.append(R,7);
#bat.append(R,11);
#
#function user.pr(Ra:bat[:any_1,:any_2]):void;
#barrier Rp:= bpm.newIterator(Ra);
#	io.print(Rp);
#	redo Rp:= bpm.hasMoreElements(Ra);
#exit Rp;
#end pr;
function user.pr(Ra:bat[:any_1,:any_2]):void;	# 0  (pr:void)<-(Ra:bat[:any_1,:any_2])
barrier Rp := bpm.newIterator(Ra);	# 1 BPMnewIterator (Rp:bat[:any,:any])<-(Ra:bat[:any_1,:any_2]) jump 4
    io.print(Rp);	# 2 IOprint_val (_3:void)<-(Rp:bat[:any,:any])
    redo Rp := bpm.hasMoreElements(Ra);	# 3 BPMhasMoreElements (Rp:bat[:any,:any])<-(Ra:bat[:any_1,:any_2]) jump 2
exit Rp;	# 4  (Rp:bat[:any,:any])
end pr;	# 5  
#
## add the stuff to the BPM and dump it
#Ra:= bpm.deposit("myR",R);
#user.pr(Ra);
#
#io.print("Vector partition it ");
#pv:= bat.new(:oid,:int);
#bat.append(pv,0);
#bat.append(pv,5);
#bat.append(pv,6);
#bat.append(pv,nil:int);
#
#bpm.rangePartition(Ra,pv);
#bpm.dump();
#user.pr(Ra);
#
#io.print("Head vector partition it ");
#Rrev:= bat.reverse(Ra);
#po:= bat.new(:oid,:oid);
#bat.append(po,0@0);
#bat.append(po,2@0);
#bat.append(po,nil:oid);
#
#bpm.rangePartition(Rrev,po);
#bpm.dump();
#user.pr(Rrev);
#
## and what is now the result of this
#io.print("And redo tail vector partition ");
#pv:= bat.new(:oid,:int);
#bat.append(pv,0);
#bat.append(pv,3);
#bat.append(pv,nil:int);
#
#bpm.rangePartition(Ra,pv);
#bpm.dump();
#user.pr(Ra);
#bpm.discard(Ra);
#
function user.main():void;	# 0  (main:void)
#testing the Milena BAT partition manager 	# 1  (_1:str)
    R := bat.new(:oid,:int);	# 2 CMDBATnew (R:bat[:oid,:int])<-(_3:oid)(_4:int)
    bat.append(R,1);	# 3 BKCappend_val_wrap (_5:void)<-(R:bat[:oid,:int])(_6:int)
    bat.append(R,3);	# 4 BKCappend_val_wrap (_7:void)<-(R:bat[:oid,:int])(_8:int)
    bat.append(R,5);	# 5 BKCappend_val_wrap (_9:void)<-(R:bat[:oid,:int])(_10:int)
    bat.append(R,7);	# 6 BKCappend_val_wrap (_11:void)<-(R:bat[:oid,:int])(_12:int)
    bat.append(R,11);	# 7 BKCappend_val_wrap (_13:void)<-(R:bat[:oid,:int])(_14:int)
# add the stuff to the BPM and dump it 	# 8  (_15:str)
    Ra := bpm.deposit("myR",R);	# 9 BPMdeposit (Ra:bat[:oid,:int])<-(_17:str)(R:bat[:oid,:int])
    user.pr(Ra);	# 10  (_18:void)<-(Ra:bat[:oid,:int])
    io.print("Vector partition it ");	# 11 IOprint_val (_19:void)<-(_20:str)
    pv := bat.new(:oid,:int);	# 12 CMDBATnew (pv:bat[:oid,:int])<-(_3:oid)(_4:int)
    bat.append(pv,0);	# 13 BKCappend_val_wrap (_22:void)<-(pv:bat[:oid,:int])(_23:int)
    bat.append(pv,5);	# 14 BKCappend_val_wrap (_24:void)<-(pv:bat[:oid,:int])(_10:int)
    bat.append(pv,6);	# 15 BKCappend_val_wrap (_25:void)<-(pv:bat[:oid,:int])(_26:int)
    bat.append(pv,nil:int);	# 16 BKCappend_val_wrap (_27:void)<-(pv:bat[:oid,:int])(_28:int)
    bpm.rangePartition(Ra,pv);	# 17 BPMrangeVector (_29:void)<-(Ra:bat[:oid,:int])(pv:bat[:oid,:int])
    bpm.dump();	# 18 BPMdump (_30:void)
    user.pr(Ra);	# 19  (_31:void)<-(Ra:bat[:oid,:int])
    io.print("Head vector partition it ");	# 20 IOprint_val (_32:void)<-(_33:str)
    Rrev := bat.reverse(Ra);	# 21 BKCreverse (Rrev:bat[:int,:oid])<-(Ra:bat[:oid,:int])
    po := bat.new(:oid,:oid);	# 22 CMDBATnew (po:bat[:oid,:oid])<-(_3:oid)(_3:oid)
    bat.append(po,0@0);	# 23 BKCappend_val_wrap (_36:void)<-(po:bat[:oid,:oid])(_37:oid)
    bat.append(po,2@0);	# 24 BKCappend_val_wrap (_38:void)<-(po:bat[:oid,:oid])(_39:oid)
    bat.append(po,nil:oid);	# 25 BKCappend_val_wrap (_40:void)<-(po:bat[:oid,:oid])(_41:oid)
    bpm.rangePartition(Rrev,po);	# 26 BPMrangeVector (_42:void)<-(Rrev:bat[:int,:oid])(po:bat[:oid,:oid])
    bpm.dump();	# 27 BPMdump (_43:void)
    user.pr(Rrev);	# 28  (_44:void)<-(Rrev:bat[:int,:oid])
# and what is now the result of this 	# 29  (_45:str)
    io.print("And redo tail vector partition ");	# 30 IOprint_val (_46:void)<-(_47:str)
    pv := bat.new(:oid,:int);	# 31 CMDBATnew (pv:bat[:oid,:int])<-(_3:oid)(_4:int)
    bat.append(pv,0);	# 32 BKCappend_val_wrap (_48:void)<-(pv:bat[:oid,:int])(_23:int)
    bat.append(pv,3);	# 33 BKCappend_val_wrap (_49:void)<-(pv:bat[:oid,:int])(_50:int)
    bat.append(pv,nil:int);	# 34 BKCappend_val_wrap (_51:void)<-(pv:bat[:oid,:int])(_28:int)
    bpm.rangePartition(Ra,pv);	# 35 BPMrangeVector (_52:void)<-(Ra:bat[:oid,:int])(pv:bat[:oid,:int])
    bpm.dump();	# 36 BPMdump (_53:void)
    user.pr(Ra);	# 37  (_54:void)<-(Ra:bat[:oid,:int])
    bpm.discard(Ra);	# 38 BPMdiscard (_55:void)<-(Ra:bat[:oid,:int])
end main;	# 39  
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  3	  ]
[ 2@0,	  5	  ]
[ 3@0,	  7	  ]
[ 4@0,	  11	  ]
[ "Vector partition it " ]
partition: myR alias 11 bid 11 bits 0 0 h nil - nil t nil - nil nxt 12 prv 16 cnt 0
partition: myR alias 11 bid 12 bits 0 0 h nil - nil t nil - 0 nxt 14 prv 11 cnt 0
partition: myR alias 11 bid 14 bits 0 0 h nil - nil t 0 - 5 nxt 15 prv 12 cnt 2
partition: myR alias 11 bid 15 bits 0 0 h nil - nil t 5 - 6 nxt 16 prv 14 cnt 1
partition: myR alias 11 bid 16 bits 0 0 h nil - nil t 6 - nil nxt 11 prv 15 cnt 2
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  3	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 2@0,	  5	  ]
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 3@0,	  7	  ]
[ 4@0,	  11	  ]
[ "Head vector partition it " ]
partition: myR alias 11 bid 11 bits 0 0 h nil - nil t nil - nil nxt 12 prv 33 cnt 0
partition: myR alias 11 bid 12 bits 0 0 h nil - 0 t nil - 0 nxt 19 prv 11 cnt 0
partition: myR alias 11 bid 14 bits 0 0 h nil - 0 t 0 - 5 nxt 21 prv 27 cnt 0
partition: myR alias 11 bid 15 bits 0 0 h nil - 0 t 5 - 6 nxt 23 prv 29 cnt 0
partition: myR alias 11 bid 16 bits 0 0 h nil - 0 t 6 - nil nxt 25 prv 31 cnt 0
partition: myR alias 11 bid 19 bits 0 0 h 0 - 2 t nil - 0 nxt 27 prv 12 cnt 0
partition: myR alias 11 bid 21 bits 0 0 h 0 - 2 t 0 - 5 nxt 29 prv 14 cnt 2
partition: myR alias 11 bid 23 bits 0 0 h 0 - 2 t 5 - 6 nxt 31 prv 15 cnt 0
partition: myR alias 11 bid 25 bits 0 0 h 0 - 2 t 6 - nil nxt 33 prv 16 cnt 0
partition: myR alias 11 bid 27 bits 0 0 h 2 - nil t nil - 0 nxt 14 prv 19 cnt 0
partition: myR alias 11 bid 29 bits 0 0 h 2 - nil t 0 - 5 nxt 15 prv 21 cnt 0
partition: myR alias 11 bid 31 bits 0 0 h 2 - nil t 5 - 6 nxt 16 prv 23 cnt 1
partition: myR alias 11 bid 33 bits 0 0 h 2 - nil t 6 - nil nxt 11 prv 25 cnt 2
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  1	  ]
[ 1@0,	  3	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 2@0,	  5	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 3@0,	  7	  ]
[ 4@0,	  11	  ]
[ "And redo tail vector partition " ]
partition: myR alias 11 bid 11 bits 0 0 h nil - nil t nil - nil nxt 12 prv 33 cnt 0
partition: myR alias 11 bid 12 bits 0 0 h nil - 0 t nil - 0 nxt 19 prv 11 cnt 0
partition: myR alias 11 bid 14 bits 0 0 h nil - 0 t 0 - 3 nxt 35 prv 27 cnt 0
partition: myR alias 11 bid 15 bits 0 0 h nil - 0 t 5 - 6 nxt 23 prv 37 cnt 0
partition: myR alias 11 bid 16 bits 0 0 h nil - 0 t 6 - nil nxt 25 prv 31 cnt 0
partition: myR alias 11 bid 19 bits 0 0 h 0 - 2 t nil - 0 nxt 27 prv 12 cnt 0
partition: myR alias 11 bid 21 bits 0 0 h 0 - 2 t 0 - 3 nxt 36 prv 35 cnt 1
partition: myR alias 11 bid 23 bits 0 0 h 0 - 2 t 5 - 6 nxt 31 prv 15 cnt 0
partition: myR alias 11 bid 25 bits 0 0 h 0 - 2 t 6 - nil nxt 33 prv 16 cnt 0
partition: myR alias 11 bid 27 bits 0 0 h 2 - nil t nil - 0 nxt 14 prv 19 cnt 0
partition: myR alias 11 bid 29 bits 0 0 h 2 - nil t 0 - 3 nxt 37 prv 36 cnt 0
partition: myR alias 11 bid 31 bits 0 0 h 2 - nil t 5 - 6 nxt 16 prv 23 cnt 1
partition: myR alias 11 bid 33 bits 0 0 h 2 - nil t 6 - nil nxt 11 prv 25 cnt 2
partition: myR alias 11 bid 35 bits 0 0 h nil - 0 t 3 - 5 nxt 21 prv 14 cnt 0
partition: myR alias 11 bid 36 bits 0 0 h 0 - 2 t 3 - 5 nxt 29 prv 21 cnt 1
partition: myR alias 11 bid 37 bits 0 0 h 2 - nil t 3 - 5 nxt 15 prv 29 cnt 0
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 0@0,	  1	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 1@0,	  3	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
[ 2@0,	  5	  ]
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# oid	int	  # type
#-----------------#
#-----------------#
# h	t	  # name
# void	int	  # type
#-----------------#
[ 3@0,	  7	  ]
[ 4@0,	  11	  ]

# 08:32:57 >  
# 08:32:57 >  Done.
# 08:32:57 >  

