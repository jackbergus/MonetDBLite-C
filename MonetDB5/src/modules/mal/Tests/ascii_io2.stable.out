stdout of test 'ascii_io2` in directory 'src/modules/mal` itself:


# 21:10:47 >  
# 21:10:47 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib64/MonetDB5:/ufs/mk/monet5/Linux/lib64/MonetDB5/lib:/ufs/mk/monet5/Linux/lib64/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/sql_logs" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/xquery_logs" --set mapi_port=37620 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  ascii_io2.mal < /dev/null
# 21:10:47 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information
#namebat := bat.new(:void, :str);
#bat.setSequenceBase(namebat,0@0);
#bat.append(namebat,"tmpdocs");
#bat.append(namebat,"tmpterms");
#
#sepbat := bat.new(:void, :str);
#bat.setSequenceBase(sepbat,0@0);
#bat.append(sepbat,",");
#bat.append(sepbat,"\n");
#
#typebat := bat.new(:void, :str);
#bat.setSequenceBase(typebat,0@0);
#bat.append(typebat,"str");
#bat.append(typebat,"str");
#
#len := 20;
#targetdir := unix.getenv("TSTTRGDIR");
#barrier correct:= targetdir == "";
#	targetdir := unix.getenv("PWD");
#	targetdir := targetdir + "/";
#exit correct;
#
#datafile := targetdir + "ascii_io2.load";
#io.printf("#source:%s\n",datafile);
#
#idxbat := tablet.load(namebat, sepbat, typebat, datafile, len);
#io.print(idxbat);
#
#i1 := algebra.fetch(idxbat,0);
#b1 := bbp.find(i1);
#io.print(b1);
#
#i2 := algebra.fetch(idxbat,1); 
#b2 := bbp.find(i2);
#io.print(b2);
#
function user.main():void;	# 0  (main:void)
    namebat := bat.new(:oid,:str);	# 1 CMDBATnew (namebat:bat[:oid,:str])<-(_2:oid)(_3:str)
    bat.append(namebat,"tmpdocs");	# 2 BKCappend_val_wrap (_4:void)<-(namebat:bat[:oid,:str])(_5:str)
    bat.append(namebat,"tmpterms");	# 3 BKCappend_val_wrap (_6:void)<-(namebat:bat[:oid,:str])(_7:str)
    sepbat := bat.new(:oid,:str);	# 4 CMDBATnew (sepbat:bat[:oid,:str])<-(_2:oid)(_3:str)
    bat.append(sepbat,",");	# 5 BKCappend_val_wrap (_9:void)<-(sepbat:bat[:oid,:str])(_10:str)
    bat.append(sepbat,"\\n");	# 6 BKCappend_val_wrap (_11:void)<-(sepbat:bat[:oid,:str])(_12:str)
    typebat := bat.new(:oid,:str);	# 7 CMDBATnew (typebat:bat[:oid,:str])<-(_2:oid)(_3:str)
    bat.append(typebat,"str");	# 8 BKCappend_val_wrap (_14:void)<-(typebat:bat[:oid,:str])(_15:str)
    bat.append(typebat,"str");	# 9 BKCappend_val_wrap (_16:void)<-(typebat:bat[:oid,:str])(_15:str)
    len := 20;	# 10  (len:int)<-(_18:int)
    targetdir := unix.getenv("TSTTRGDIR");	# 11 UNIXgetenv (targetdir:str)<-(_20:str)
barrier correct := calc.==(targetdir,"");	# 12 CALCcompEQstrstr (correct:bit)<-(targetdir:str)(_22:str) jump 14
    targetdir := unix.getenv("PWD");	# 13 UNIXgetenv (targetdir:str)<-(_23:str)
exit correct;	# 14  (correct:bit)
barrier correct := calc.!=(targetdir,"");	# 15 CALCcompNEQstrstr (correct:bit)<-(targetdir:str)(_22:str) jump 17
    targetdir := calc.+(targetdir,"/");	# 16 CALCstrConcat (targetdir:str)<-(targetdir:str)(_24:str)
exit correct;	# 17  (correct:bit)
    datafile := calc.+(targetdir,"ascii_io2.load");	# 18 CALCstrConcat (datafile:str)<-(targetdir:str)(_26:str)
    io.printf("#source:%s\n",datafile);	# 19 IOprint_formatted_str (_27:void)<-(_28:str)(datafile:str)
    idxbat := tablet.load(namebat,sepbat,typebat,datafile,len);	# 20 CMDtablet_load (idxbat:bat[:str,:BAT])<-(namebat:bat[:oid,:str])(sepbat:bat[:oid,:str])(typebat:bat[:oid,:str])(datafile:str)(len:int)
    io.print(idxbat);	# 21 IOprint_val (_30:void)<-(idxbat:bat[:str,:BAT])
    i1 := algebra.fetch(idxbat,0);	# 22 ALGfetchint (i1:BAT)<-(idxbat:bat[:str,:BAT])(_32:int)
    b1 := bbp.find(i1);	# 23 CMDbbpbindindex (b1:bat[:any,:any])<-(i1:BAT)
    io.print(b1);	# 24 IOprint_val (_34:void)<-(b1:bat[:any,:any])
    i2 := algebra.fetch(idxbat,1);	# 25 ALGfetchint (i2:BAT)<-(idxbat:bat[:str,:BAT])(_36:int)
    b2 := bbp.find(i2);	# 26 CMDbbpbindindex (b2:bat[:any,:any])<-(i2:BAT)
    io.print(b2);	# 27 IOprint_val (_38:void)<-(b2:bat[:any,:any])
end main;	# 28  
#source:/ufs/mk/monet5/Linux/mTests/src/modules/mal/ascii_io2.load
#---------------------------------#
# h		t		  # name
# str		BAT		  # type
#---------------------------------#
[ "tmpdocs",	  <tmp_15>	  ]
[ "tmpterms",	  <tmp_16>	  ]
#-----------------------------------------#
# h	t				  # name
# void	str				  # type
#-----------------------------------------#
[ 0@0,	  "IA073-000474-B024-230"	  ]
[ 1@0,	  "                     "	  ]
[ 2@0,	  "IA073-000474-B024-231"	  ]
[ 3@0,	  ""				  ]
[ 4@0,	  "IA073-000474-B024-232"	  ]
[ 5@0,	  "  "				  ]
[ 6@0,	  "IA073-000474-B024-233"	  ]
[ 7@0,	  ""				  ]
[ 8@0,	  "IA073-000474-B024-234"	  ]
[ 9@0,	  " "				  ]
[ 10@0,	  "IA073-000474-B024-235"	  ]
[ 11@0,	  ""				  ]
[ 12@0,	  "IA073-000474-B024-236"	  ]
[ 13@0,	  ""				  ]
[ 14@0,	  "IA073-000474-B024-237"	  ]
[ 15@0,	  ""				  ]
[ 16@0,	  "IA073-000474-B024-238"	  ]
[ 17@0,	  ""				  ]
[ 18@0,	  "IA073-000474-B024-239"	  ]
#-------------------------#
# h	t		  # name
# void	str		  # type
#-------------------------#
[ 0@0,	  "0-request"	  ]
[ 1@0,	  "         "	  ]
[ 2@0,	  "1-from"	  ]
[ 3@0,	  ""		  ]
[ 4@0,	  "2-library"	  ]
[ 5@0,	  "  "		  ]
[ 6@0,	  "3-subject"	  ]
[ 7@0,	  ""		  ]
[ 8@0,	  "4-listing"	  ]
[ 9@0,	  " "		  ]
[ 10@0,	  "5-up"	  ]
[ 11@0,	  ""		  ]
[ 12@0,	  "6-to"	  ]
[ 13@0,	  ""		  ]
[ 14@0,	  "7-index"	  ]
[ 15@0,	  ""		  ]
[ 16@0,	  "8-up"	  ]
[ 17@0,	  ""		  ]
[ 18@0,	  "9-to"	  ]

# 21:10:47 >  
# 21:10:47 >  Done.
# 21:10:47 >  

