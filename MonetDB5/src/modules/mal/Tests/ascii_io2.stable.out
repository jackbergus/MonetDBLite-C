stdout of test 'ascii_io2` in directory 'src/modules/mal` itself:


# 21:10:47 >  
# 21:10:47 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib64/MonetDB5:/ufs/mk/monet5/Linux/lib64/MonetDB5/lib:/ufs/mk/monet5/Linux/lib64/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/sql_logs" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/xquery_logs" --set mapi_port=37620 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  ascii_io2.mal < /dev/null
# 21:10:47 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information
#namebat := bat.new(:void, :str);
#bat.setSequenceBase(namebat,0@0);
#bat.append(namebat,"tmpdocs");
#bat.append(namebat,"tmpterms");
#
#sepbat := bat.new(:void, :str);
#bat.setSequenceBase(sepbat,0@0);
#bat.append(sepbat,",");
#bat.append(sepbat,"\n");
#
#typebat := bat.new(:void, :str);
#bat.setSequenceBase(typebat,0@0);
#bat.append(typebat,"str");
#bat.append(typebat,"str");
#
#len := 20;
#targetdir := unix.getenv("TSTTRGDIR");
#barrier correct:= targetdir == "";
#	targetdir := unix.getenv("PWD");
#	targetdir := targetdir + "/";
#exit correct;
#
#datafile := targetdir + "ascii_io2.load";
#io.printf("#source:%s\n",datafile);
#
#idxbat := tablet.load(namebat, sepbat, typebat, datafile, len);
#io.print(idxbat);
#
#i1 := algebra.fetch(idxbat,0);
#b1 := bbp.find(i1);
#io.print(b1);
#
#i2 := algebra.fetch(idxbat,1); 
#b2 := bbp.find(i2);
#io.print(b2);
#
function user.main():void;              #  0 main:void {G}
    namebat := bat.new(:oid,:str);      #  1 namebat:bat[:oid,:str] := CMDBATnew(_2:oid, _3:str) {G}
    bat.append(namebat,"tmpdocs");      #  2 _4:void := BKCappend_val_wrap(namebat:bat[:oid,:str], _5:str) 
    bat.append(namebat,"tmpterms");     #  3 _6:void := BKCappend_val_wrap(namebat:bat[:oid,:str], _7:str) 
    sepbat := bat.new(:oid,:str);       #  4 sepbat:bat[:oid,:str] := CMDBATnew(_2:oid, _3:str) {G}
    bat.append(sepbat,",");             #  5 _9:void := BKCappend_val_wrap(sepbat:bat[:oid,:str], _10:str) 
    bat.append(sepbat,"\n");            #  6 _11:void := BKCappend_val_wrap(sepbat:bat[:oid,:str], _12:str) 
    typebat := bat.new(:oid,:str);      #  7 typebat:bat[:oid,:str] := CMDBATnew(_2:oid, _3:str) {G}
    bat.append(typebat,"str");          #  8 _14:void := BKCappend_val_wrap(typebat:bat[:oid,:str], _15:str) 
    bat.append(typebat,"str");          #  9 _16:void := BKCappend_val_wrap(typebat:bat[:oid,:str], _15:str) 
    len := 20;                          # 10 len:int := _18:int 
    targetdir := unix.getenv("TSTTRGDIR");# 11 targetdir:str := UNIXgetenv(_20:str) {G}
barrier correct := calc.==(targetdir,"");# 12 correct:bit := CALCcompEQstrstr(targetdir:str, _22:str) {J14}
    targetdir := unix.getenv("PWD");    # 13 targetdir:str := UNIXgetenv(_23:str) {G}
exit correct;                           # 14 correct:bit 
barrier correct := calc.!=(targetdir,"");# 15 correct:bit := CALCcompNEQstrstr(targetdir:str, _22:str) {J17}
    targetdir := calc.+(targetdir,"/"); # 16 targetdir:str := CALCstrConcat(targetdir:str, _24:str) {G}
exit correct;                           # 17 correct:bit 
    datafile := calc.+(targetdir,"ascii_io2.load");# 18 datafile:str := CALCstrConcat(targetdir:str, _26:str) {G}
    io.printf("#source:%s\n",datafile); # 19 _27:void := IOprint_formatted_str(_28:str, datafile:str) 
    idxbat := tablet.load(namebat,sepbat,typebat,datafile,len);# 20 idxbat:bat[:str,:BAT] := CMDtablet_load(namebat:bat[:oid,:str], sepbat:bat[:oid,:str], typebat:bat[:oid,:str], datafile:str, len:int) {G}
#io.print(idxbat); 
    i1 := algebra.fetch(idxbat,0);      # 22 i1:BAT := ALGfetchint(idxbat:bat[:str,:BAT], _32:int) {G}
    b1:bat[:oid,:str]  := bbp.bind(i1); # 23 b1:bat[:oid,:str] := CMDbbpbindindex(i1:BAT) {G}
#io.print(b1); 
    i2 := algebra.fetch(idxbat,1);      # 25 i2:BAT := ALGfetchint(idxbat:bat[:str,:BAT], _36:int) {G}
    b2:bat[:oid,:str]  := bbp.bind(i2); # 26 b2:bat[:oid,:str] := CMDbbpbindindex(i2:BAT) {G}
#io.print(b2); 
end main;	# 28  
#source:/ufs/mk/monet5/Linux/mTests/src/modules/mal/ascii_io2.load

# 21:10:47 >  
# 21:10:47 >  Done.
# 21:10:47 >  

