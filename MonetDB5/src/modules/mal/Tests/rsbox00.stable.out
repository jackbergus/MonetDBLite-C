stdout of test 'rsbox00` in directory 'src/modules/mal` itself:


# 00:03:58 >  
# 00:03:58 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=33330 --set sql_port=49911 --set xquery_port=56575 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  rsbox00.mal </dev/null
# 00:03:58 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information.
### Test generic ResultSet + rsbox behaviour:
### create two ResultSets, fill one with two BATs and see if everything is
### properly released.
#
#include rsbox;
#
#rs := rsbox.create(1:int, 'u':chr);
#rs := rsbox.create(2:int, 't':chr);
#
#resultset.setProperty(rs, 1, "table", "table1");
#resultset.setProperty(rs, 1, "schema", "sys");
#
#resultset.setProperty(rs, 2, "width", 1);
#resultset.setProperty(rs, 2, "table", "table2");
#resultset.setProperty(rs, 2, "schema", "sys");
#
#b1 := bbp.new(:void, :str);
#bat.insert(b1, nil, "test1");
#bat.insert(b1, nil, "test2");
#bat.insert(b1, nil, nil:str);
#
#b2 := bbp.new(:void, :int);
#bat.insert(b2, nil, 2);
#bat.insert(b2, nil, nil:int);
#bat.insert(b2, nil, 5);
#
#resultset.populateColumn(rs, 1, b1);
#resultset.populateColumn(rs, 2, b2);
#
#resultset.writeNextPart(rs);
#
#io.print("Before any cleanup:");
#barrier (v,res) := rsbox.newIterator();
#	io.print(res);
#redo (v,res) := rsbox.hasMoreElements();
#exit v;
#
#rsbox.release(rs);
#
#io.print("After release of 'myid':");
#barrier (v,res) := rsbox.newIterator();
#	io.print(res);
#redo (v,res) := rsbox.hasMoreElements();
#exit v;
#
#rsbox.releaseAll();
#
#io.print("After a releaseAll:");
#barrier (v,res) := rsbox.newIterator();
#	io.print(res);
#redo (v,res) := rsbox.hasMoreElements();
#exit v;
#
## we did not open, it so why close it?
##rsbox.close();
#
function user.main():void;	# 0  (main:void)
## Test generic ResultSet + rsbox behaviour: 	# 1  (_1:str)
## create two ResultSets, fill one with two BATs and see if everything is 	# 2  (_2:str)
## properly released. 	# 3  (_3:str)
#line 113 "/ufs/mk/monet5/src/modules/mal/rsbox.mx" 	# 4  (_4:str)
# ResultSets themselves should never be serialised to disk.  The 	# 5  (_5:str)
# fromStr and toStr functions merely exist to adhere to the interface 	# 6  (_6:str)
#line 207 "/ufs/mk/monet5/src/modules/mal/rsbox.mx" 	# 7  (_7:str)
#line 208 "/ufs/mk/monet5/src/modules/mal/rsbox.mx" 	# 8  (_8:str)
    rs := rsbox.create(1:int,'u':chr);	# 9 RSBcreate (rs:resultset)<-(_10:int)(_11:chr)
    rs := rsbox.create(2:int,'t':chr);	# 10 RSBcreate (rs:resultset)<-(_12:int)(_13:chr)
    resultset.setProperty(rs,1:int,"table","table1");	# 11 RSsetPropertyStr (_14:resultset)<-(rs:resultset)(_10:int)(_15:str)(_16:str)
    resultset.setProperty(rs,1:int,"schema","sys");	# 12 RSsetPropertyStr (_17:resultset)<-(rs:resultset)(_10:int)(_18:str)(_19:str)
    resultset.setProperty(rs,2:int,"width",1:int);	# 13 RSsetPropertyInt (_20:resultset)<-(rs:resultset)(_12:int)(_21:str)(_10:int)
    resultset.setProperty(rs,2:int,"table","table2");	# 14 RSsetPropertyStr (_22:resultset)<-(rs:resultset)(_12:int)(_15:str)(_23:str)
    resultset.setProperty(rs,2:int,"schema","sys");	# 15 RSsetPropertyStr (_24:resultset)<-(rs:resultset)(_12:int)(_18:str)(_19:str)
    b1 := bat.new(:void,:str);	# 16 CMDBATnew (b1:bat[:void,:str])<-(_26:void)(_27:str)
    bat.insert(b1,nil:void,"test1");	# 17 BKCinsert_bun (_28:void)<-(b1:bat[:void,:str])(_29:void)(_30:str)
    bat.insert(b1,nil:void,"test2");	# 18 BKCinsert_bun (_31:void)<-(b1:bat[:void,:str])(_29:void)(_32:str)
    bat.insert(b1,nil:void,nil:str);	# 19 BKCinsert_bun (_33:void)<-(b1:bat[:void,:str])(_29:void)(_34:str)
    b2 := bat.new(:void,:int);	# 20 CMDBATnew (b2:bat[:void,:int])<-(_26:void)(_36:int)
    bat.insert(b2,nil:void,2:int);	# 21 BKCinsert_bun (_37:void)<-(b2:bat[:void,:int])(_29:void)(_12:int)
    bat.insert(b2,nil:void,nil:int);	# 22 BKCinsert_bun (_38:void)<-(b2:bat[:void,:int])(_29:void)(_39:int)
    bat.insert(b2,nil:void,5);	# 23 BKCinsert_bun (_40:void)<-(b2:bat[:void,:int])(_29:void)(_41:int)
    resultset.populateColumn(rs,1:int,b1);	# 24 RSpopulateColumn (_42:resultset)<-(rs:resultset)(_10:int)(b1:bat[:void,:str])
    resultset.populateColumn(rs,2:int,b2);	# 25 RSpopulateColumn (_43:resultset)<-(rs:resultset)(_12:int)(b2:bat[:void,:int])
    resultset.writeNextPart(rs);	# 26 RSwriteNextPart (_44:int)<-(rs:resultset)
    io.print("Before any cleanup:");	# 27 IOprint_val (_45:int)<-(_46:str)
barrier (v,res):= rsbox.newIterator();	# 28 RSBiterator (v:lng)(res:resultset) jump 31
    io.print(res);	# 29 IOprint_val (_49:int)<-(res:resultset)
    redo (v,res):= rsbox.hasMoreElements();	# 30 RSBhasMoreElements (v:lng)(res:resultset) jump 29
exit v;	# 31  (v:lng)
    rsbox.release(rs);	# 32 RSBdelete (_50:void)<-(rs:resultset)
    io.print("After release of 'myid':");	# 33 IOprint_val (_51:int)<-(_52:str)
barrier (v,res):= rsbox.newIterator();	# 34 RSBiterator (v:lng)(res:resultset) jump 37
    io.print(res);	# 35 IOprint_val (_53:int)<-(res:resultset)
    redo (v,res):= rsbox.hasMoreElements();	# 36 RSBhasMoreElements (v:lng)(res:resultset) jump 35
exit v;	# 37  (v:lng)
    rsbox.releaseAll();	# 38 RSBreleaseAll (_54:void)
    io.print("After a releaseAll:");	# 39 IOprint_val (_55:int)<-(_56:str)
barrier (v,res):= rsbox.newIterator();	# 40 RSBiterator (v:lng)(res:resultset) jump 43
    io.print(res);	# 41 IOprint_val (_57:int)<-(res:resultset)
    redo (v,res):= rsbox.hasMoreElements();	# 42 RSBhasMoreElements (v:lng)(res:resultset) jump 41
exit v;	# 43  (v:lng)
# we did not open, it so why close it? 	# 44  (_58:str)
#rsbox.close(); 	# 45  (_59:str)
end main;	# 46  
&t
$id	2
$columncount	2
$tuplecount	3
$ctype	Si
%column	column_1	column_2
%table	table1	table2
%schema	sys	sys
%type	varchar	int
%digits		
%scale		
%width	5	1
[5:test1	2
[5:test2	NULL
[NULL	5
[ "Before any cleanup:" ]
[ ResultSet '1' ]
[ ResultSet '2' ]
[ "After release of 'myid':" ]
[ ResultSet '1' ]
[ "After a releaseAll:" ]

# 00:03:58 >  
# 00:03:58 >  Done.
# 00:03:58 >  

