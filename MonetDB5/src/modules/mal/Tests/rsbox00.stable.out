stdout of test 'rsbox00` in directory 'src/modules/mal` itself:


# 20:14:42 >  
# 20:14:42 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib64/MonetDB5:/ufs/mk/monet5/Linux/lib64/MonetDB5/lib:/ufs/mk/monet5/Linux/lib64/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35008 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  rsbox00.mal < /dev/null
# 20:14:42 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information
### Test generic ResultSet + rsbox behaviour:
### create two ResultSets, fill one with two BATs and see if everything is
### properly released.
#
#include rsbox;
#
#rs := rsbox.create(1:int, 'u':chr);
#rs := rsbox.create(2:int, 't':chr);
#
#resultset.setProperty(rs, 1, "table", "table1");
#resultset.setProperty(rs, 1, "schema", "sys");
#
#resultset.setProperty(rs, 2, "width", 1);
#resultset.setProperty(rs, 2, "table", "table2");
#resultset.setProperty(rs, 2, "schema", "sys");
#
#b1 := bat.new(:void, :str);
#bat.insert(b1, nil, "test1");
#bat.insert(b1, nil, "test2");
#bat.insert(b1, nil, nil:str);
#
#b2 := bat.new(:void, :int);
#bat.insert(b2, nil, 2);
#bat.insert(b2, nil, nil:int);
#bat.insert(b2, nil, 5);
#
#resultset.populateColumn(rs, 1, b1);
#resultset.populateColumn(rs, 2, b2);
#
#resultset.writeNextPart(rs);
#
#io.print("Before any cleanup:");
#barrier (v,res) := rsbox.newIterator();
#	io.print(res);
#redo (v,res) := rsbox.hasMoreElements();
#exit v;
#
#rsbox.release(rs);
#
#io.print("After release of 'myid':");
#barrier (v,res) := rsbox.newIterator();
#	io.print(res);
#redo (v,res) := rsbox.hasMoreElements();
#exit v;
#
#rsbox.releaseAll();
#
#io.print("After a releaseAll:");
#barrier (v,res) := rsbox.newIterator();
#	io.print(res);
#redo (v,res) := rsbox.hasMoreElements();
#exit v;
#
## we did not open, it so why close it?
##rsbox.close();
#
function user.main():void;	# 0  (main:void)
## Test generic ResultSet + rsbox behaviour: 	# 1  (_1:str)
## create two ResultSets, fill one with two BATs and see if everything is 	# 2  (_2:str)
## properly released. 	# 3  (_3:str)
    rs := rsbox.create(1:int,'u':chr);	# 4 RSBcreate (rs:resultset)<-(_5:int)(_6:chr)
    rs := rsbox.create(2:int,'t':chr);	# 5 RSBcreate (rs:resultset)<-(_7:int)(_8:chr)
    resultset.setProperty(rs,1:int,"table","table1");	# 6 RSsetPropertyStr (_9:resultset)<-(rs:resultset)(_5:int)(_10:str)(_11:str)
    resultset.setProperty(rs,1:int,"schema","sys");	# 7 RSsetPropertyStr (_12:resultset)<-(rs:resultset)(_5:int)(_13:str)(_14:str)
    resultset.setProperty(rs,2:int,"width",1:int);	# 8 RSsetPropertyInt (_15:resultset)<-(rs:resultset)(_7:int)(_16:str)(_5:int)
    resultset.setProperty(rs,2:int,"table","table2");	# 9 RSsetPropertyStr (_17:resultset)<-(rs:resultset)(_7:int)(_10:str)(_18:str)
    resultset.setProperty(rs,2:int,"schema","sys");	# 10 RSsetPropertyStr (_19:resultset)<-(rs:resultset)(_7:int)(_13:str)(_14:str)
    b1 := bat.new(:void,:str);	# 11 CMDBATnew (b1:bat[:void,:str])<-(_21:void)(_22:str)
    bat.insert(b1,nil:void,"test1");	# 12 BKCinsert_bun (_23:void)<-(b1:bat[:void,:str])(_24:void)(_25:str)
    bat.insert(b1,nil:void,"test2");	# 13 BKCinsert_bun (_26:void)<-(b1:bat[:void,:str])(_24:void)(_27:str)
    bat.insert(b1,nil:void,nil:str);	# 14 BKCinsert_bun (_28:void)<-(b1:bat[:void,:str])(_24:void)(_29:str)
    b2 := bat.new(:void,:int);	# 15 CMDBATnew (b2:bat[:void,:int])<-(_21:void)(_31:int)
    bat.insert(b2,nil:void,2:int);	# 16 BKCinsert_bun (_32:void)<-(b2:bat[:void,:int])(_24:void)(_7:int)
    bat.insert(b2,nil:void,nil:int);	# 17 BKCinsert_bun (_33:void)<-(b2:bat[:void,:int])(_24:void)(_34:int)
    bat.insert(b2,nil:void,5);	# 18 BKCinsert_bun (_35:void)<-(b2:bat[:void,:int])(_24:void)(_36:int)
    resultset.populateColumn(rs,1:int,b1);	# 19 RSpopulateColumn (_37:resultset)<-(rs:resultset)(_5:int)(b1:bat[:void,:str])
    resultset.populateColumn(rs,2:int,b2);	# 20 RSpopulateColumn (_38:resultset)<-(rs:resultset)(_7:int)(b2:bat[:void,:int])
    resultset.writeNextPart(rs);	# 21 RSwriteNextPart (_39:int)<-(rs:resultset)
    io.print("Before any cleanup:");	# 22 IOprint_val (_40:int)<-(_41:str)
barrier (v,res):= rsbox.newIterator();	# 23 RSBiterator (v:lng)(res:resultset) jump 26
    io.print(res);	# 24 IOprint_val (_44:int)<-(res:resultset)
    redo (v,res):= rsbox.hasMoreElements();	# 25 RSBhasMoreElements (v:lng)(res:resultset) jump 24
exit v;	# 26  (v:lng)
    rsbox.release(rs);	# 27 RSBdelete (_45:void)<-(rs:resultset)
    io.print("After release of 'myid':");	# 28 IOprint_val (_46:int)<-(_47:str)
barrier (v,res):= rsbox.newIterator();	# 29 RSBiterator (v:lng)(res:resultset) jump 32
    io.print(res);	# 30 IOprint_val (_48:int)<-(res:resultset)
    redo (v,res):= rsbox.hasMoreElements();	# 31 RSBhasMoreElements (v:lng)(res:resultset) jump 30
exit v;	# 32  (v:lng)
    rsbox.releaseAll();	# 33 RSBreleaseAll (_49:void)
    io.print("After a releaseAll:");	# 34 IOprint_val (_50:int)<-(_51:str)
barrier (v,res):= rsbox.newIterator();	# 35 RSBiterator (v:lng)(res:resultset) jump 38
    io.print(res);	# 36 IOprint_val (_52:int)<-(res:resultset)
    redo (v,res):= rsbox.hasMoreElements();	# 37 RSBhasMoreElements (v:lng)(res:resultset) jump 36
exit v;	# 38  (v:lng)
# we did not open, it so why close it? 	# 39  (_53:str)
#rsbox.close(); 	# 40  (_54:str)
end main;	# 41  
&t
$id	2
$columncount	2
$tuplecount	3
$ctype	Si
%column	column_1	column_2
%table	table1	table2
%schema	sys	sys
%type	varchar	int
%digits		
%scale		
%width	5	1
[5:test1	2
[5:test2	NULL
[NULL	5
[ "Before any cleanup:" ]
[ ResultSet '1' ]
[ ResultSet '2' ]
[ "After release of 'myid':" ]
[ ResultSet '1' ]
[ "After a releaseAll:" ]

# 20:14:43 >  
# 20:14:43 >  Done.
# 20:14:43 >  

