stdout of test 'rsbox00` in directory 'src/modules/mal` itself:


# 00:03:58 >  
# 00:03:58 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=33330 --set sql_port=49911 --set xquery_port=56575 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  rsbox00.mal </dev/null
# 00:03:58 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information.
### Test generic ResultSet + rsbox behaviour:
### create two ResultSets, fill one with two BATs and see if everything is
### properly released.
#
#include rsbox;
#
#rs := rsbox.create(1:int, 'u':chr);
#rs := rsbox.create(2:int, 't':chr);
#
#resultset.setProperty(rs, 1, "table", "table1");
#resultset.setProperty(rs, 1, "schema", "sys");
#
#resultset.setProperty(rs, 2, "width", 1);
#resultset.setProperty(rs, 2, "table", "table2");
#resultset.setProperty(rs, 2, "schema", "sys");
#
#b1 := bbp.new(:void, :str);
#bat.insert(b1, nil, "test1");
#bat.insert(b1, nil, "test2");
#bat.insert(b1, nil, nil:str);
#
#b2 := bbp.new(:void, :int);
#bat.insert(b2, nil, 2);
#bat.insert(b2, nil, nil:int);
#bat.insert(b2, nil, 5);
#
#resultset.populateColumn(rs, 1, b1);
#resultset.populateColumn(rs, 2, b2);
#
#resultset.writeNextPart(rs);
#
#io.print("Before any cleanup:");
#barrier (v,res) := rsbox.newIterator();
#	io.print(res);
#redo (v,res) := rsbox.hasMoreElements();
#exit v;
#
#rsbox.release(rs);
#
#io.print("After release of 'myid':");
#barrier (v,res) := rsbox.newIterator();
#	io.print(res);
#redo (v,res) := rsbox.hasMoreElements();
#exit v;
#
#rsbox.releaseAll();
#
#io.print("After a releaseAll:");
#barrier (v,res) := rsbox.newIterator();
#	io.print(res);
#redo (v,res) := rsbox.hasMoreElements();
#exit v;
#
## we did not open, it so why close it?
##rsbox.close();
#
function user.main():int;	# 0  (main:int)
    rs := rsbox.create(1:int,'u':chr);	# 1 RSBcreate (rs:resultset)<-(_2:int)(_3:chr)
    rs := rsbox.create(2:int,'t':chr);	# 2 RSBcreate (rs:resultset)<-(_4:int)(_5:chr)
    resultset.setProperty(rs,1:int,"table","table1");	# 3 RSsetPropertyStr (_6:resultset)<-(rs:resultset)(_2:int)(_7:str)(_8:str)
    resultset.setProperty(rs,1:int,"schema","sys");	# 4 RSsetPropertyStr (_9:resultset)<-(rs:resultset)(_2:int)(_10:str)(_11:str)
    resultset.setProperty(rs,2:int,"width",1:int);	# 5 RSsetPropertyInt (_12:resultset)<-(rs:resultset)(_4:int)(_13:str)(_2:int)
    resultset.setProperty(rs,2:int,"table","table2");	# 6 RSsetPropertyStr (_14:resultset)<-(rs:resultset)(_4:int)(_7:str)(_15:str)
    resultset.setProperty(rs,2:int,"schema","sys");	# 7 RSsetPropertyStr (_16:resultset)<-(rs:resultset)(_4:int)(_10:str)(_11:str)
    b1 := bat.new(:void,:str);	# 8 CMDBATnew (b1:bat[:void,:str])<-(_18:void)(_19:str)
    bat.insert(b1,nil,"test1");	# 9 BKCinsert_bun (_20:void)<-(b1:bat[:void,:str])(_21:void)(_22:str)
    bat.insert(b1,nil,"test2");	# 10 BKCinsert_bun (_23:void)<-(b1:bat[:void,:str])(_21:void)(_24:str)
    bat.insert(b1,nil,nil:str);	# 11 BKCinsert_bun (_25:void)<-(b1:bat[:void,:str])(_21:void)(_26:str)
    b2 := bat.new(:void,:int);	# 12 CMDBATnew (b2:bat[:void,:int])<-(_18:void)(_28:int)
    bat.insert(b2,nil,2:int);	# 13 BKCinsert_bun (_29:void)<-(b2:bat[:void,:int])(_21:void)(_4:int)
    bat.insert(b2,nil,nil:int);	# 14 BKCinsert_bun (_30:void)<-(b2:bat[:void,:int])(_21:void)(_31:int)
    bat.insert(b2,nil,5);	# 15 BKCinsert_bun (_32:void)<-(b2:bat[:void,:int])(_21:void)(_33:int)
    resultset.populateColumn(rs,1,b1);	# 16 RSpopulateColumn (_34:resultset)<-(rs:resultset)(_35:int)(b1:bat[:void,:str])
    resultset.populateColumn(rs,2,b2);	# 17 RSpopulateColumn (_36:resultset)<-(rs:resultset)(_37:int)(b2:bat[:void,:int])
    resultset.writeNextPart(rs);	# 18 RSwriteNextPart (_38:int)<-(rs:resultset)
    io.print("Before any cleanup:");	# 19 IOprint_val (_39:int)<-(_40:str)
barrier (v,res):= rsbox.newIterator();	# 20 RSBiterator (v:lng)(res:resultset) jump 23
    io.print(res);	# 21 IOprint_val (_43:int)<-(res:resultset)
    redo (v,res):= rsbox.hasMoreElements();	# 22 RSBhasMoreElements (v:lng)(res:resultset) jump 21
exit v;	# 23  (v:lng)
    rsbox.release(rs);	# 24 RSBdelete (_44:void)<-(rs:resultset)
    io.print("After release of 'myid':");	# 25 IOprint_val (_45:int)<-(_46:str)
barrier (v,res):= rsbox.newIterator();	# 26 RSBiterator (v:lng)(res:resultset) jump 29
    io.print(res);	# 27 IOprint_val (_47:int)<-(res:resultset)
    redo (v,res):= rsbox.hasMoreElements();	# 28 RSBhasMoreElements (v:lng)(res:resultset) jump 27
exit v;	# 29  (v:lng)
    rsbox.releaseAll();	# 30 RSBreleaseAll (_48:void)
    io.print("After a releaseAll:");	# 31 IOprint_val (_49:int)<-(_50:str)
barrier (v,res):= rsbox.newIterator();	# 32 RSBiterator (v:lng)(res:resultset) jump 35
    io.print(res);	# 33 IOprint_val (_51:int)<-(res:resultset)
    redo (v,res):= rsbox.hasMoreElements();	# 34 RSBhasMoreElements (v:lng)(res:resultset) jump 33
exit v;	# 35  (v:lng)
# we did not open, it so why close it? 	# 36  (_54:str)
#rsbox.close(); 	# 37  (_56:str)
end main;	# 38  
&t
$id	2
$columncount	2
$tuplecount	3
$ctype	Si
%column	column_1	column_2
%table	table1	table2
%schema	sys	sys
%type	varchar	int
%digits		
%scale		
%width	5	1
[5:test1	2
[5:test2	NULL
[NULL	5
[ "Before any cleanup:" ]
[ ResultSet '1' ]
[ ResultSet '2' ]
[ "After release of 'myid':" ]
[ ResultSet '1' ]
[ "After a releaseAll:" ]

# 00:03:58 >  
# 00:03:58 >  Done.
# 00:03:58 >  

