module("radix");
var Bu := uniform(99);
Bu.project(nil).print();
Bu.reverse().project(nil).sort().reverse().print();
var Bn := normal(99);
Bn.project(nil).print();
Bn.reverse().project(nil).sort().reverse().print();

var b:=uniform(16).tmark(0@0);

var b0 := radix_cluster(b,1).tmark(0@0);
var b1 := radix_cluster(b,2).tmark(0@0);
var b2 := radix_cluster(b,3).tmark(0@0);
var b3 := radix_cluster(b,2,1).tmark(0@0);
var b4 := radix_cluster(b,1,2).tmark(0@0);
var b5 := radix_cluster(b,1,1,1).tmark(0@0);
var b6 := radix_cluster(b,4).tmark(0@0);
var b7 := radix_cluster(b,-3,1).tmark(0@0);
var b8 := radix_cluster(b,-2,2).tmark(0@0);
var b9 := radix_cluster(b,-1,1,1).tmark(0@0);

print(b,b0,b1,b2,b3,b4,b5,b6,b7,b8,b9);
print(b,b0.[and](1),b1.[and](3),b2.[and](7),b3.[and](7),b4.[and](7),b5.[and](7),b6.[and](15),b7.[and](8),b8.[and](12),b9.[and](6));

var b0 := radix_cluster2(b,1,1,0).tmark(0@0);
var b1 := radix_cluster2(b,1,2,0).tmark(0@0);
var b2 := radix_cluster2(b,1,3,0).tmark(0@0);
var b3 := radix_cluster2(b,2,3,0).tmark(0@0);
var b4 := radix_cluster2(b,2,3,0).tmark(0@0);
var b5 := radix_cluster2(b,3,3,0).tmark(0@0);
var b6 := radix_cluster2(b,1,4,0).tmark(0@0);
var b7 := radix_cluster2(b,1,1,3).tmark(0@0);
var b8 := radix_cluster2(b,1,2,2).tmark(0@0);
var b9 := radix_cluster2(b,2,2,1).tmark(0@0);

print(b,b0,b1,b2,b3,b4,b5,b6,b7,b8,b9);
print(b,b0.[and](1),b1.[and](3),b2.[and](7),b3.[and](7),b4.[and](7),b5.[and](7),b6.[and](15),b7.[and](8),b8.[and](12),b9.[and](6));

print(radix_bits(reverse(b0)));
print(radix_bits(reverse(b1)));
print(radix_bits(reverse(b2)));
print(radix_bits(reverse(b3)));
print(radix_bits(reverse(b4)));
print(radix_bits(reverse(b5)));
print(radix_bits(reverse(b6)));
print(radix_bits(reverse(b7)));
print(radix_bits(reverse(b8)));
print(radix_bits(reverse(b9)));

print(
 radix_join(b3,reverse(b4))
,radix_join(b2,reverse(b5),3)
,phash_join(b3,reverse(b4))
,phash_join(b2,reverse(b5),3)
);

var l := uniform(15).radix_cluster(2).tmark(0@0);
var r := uniform(17).radix_cluster(2).tmark(0@0).reverse();

print(
 join(l,r)
,radix_join(l,r)
,radix_join(l,r,2)
,phash_join(l,r)
,phash_join(l,r,2)
);

quit();
