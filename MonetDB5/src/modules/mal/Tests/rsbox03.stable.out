stdout of test 'rsbox03` in directory 'src/modules/mal` itself:


# 00:03:58 >  
# 00:03:58 >  Mtimeout -timeout 60 Mserver "--config=/ufs/mk/monet5/src/mal/Tests/All.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib/MonetDB5:/ufs/mk/opensource/MonetDB/Linux/lib/MonetDB" --set "gdk_dbfarm=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/log" --set mapi_port=33330 --set sql_port=49911 --set xquery_port=56575 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  rsbox03.mal </dev/null
# 00:03:58 >  

# Monet Database Server V4.99.19
# Copyright (c) 1993-2005, CWI. All rights reserved.
# Compiled for x86_64-redhat-linux-gnu/64bit with 32bit OIDs; dynamically linked.
# config:/ufs/mk/monet5/src/mal/Tests/All.conf
# dbfarm:/ufs/mk/opensource/MonetDB/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information.
### Test ResultSet unionability
#
#include rsbox;
#
#rs := rsbox.create(1, 't');
#
#resultset.setProperty(rs, 1, "name", "the_column");
#resultset.setProperty(rs, 1, "table", "the_table");
#resultset.setProperty(rs, 1, "schema", "the_schema");
#
#b1 := bbp.new(:void, :int);
#bat.insert(b1, nil, 1);
#bat.insert(b1, nil, 2);
#bat.insert(b1, nil, nil:int);
#bat.insert(b1, nil, 4);
#bat.insert(b1, nil, 6);
#
#resultset.populateColumn(rs, 1, b1);
#resultset.addUnion(rs);
#
#b1 := bbp.new(:void, :int);
#bat.insert(b1, nil, 7);
#bat.insert(b1, nil, 8);
#
#resultset.populateColumn(rs, 1, b1);
#resultset.addUnion(rs);
#
#b1 := bbp.new(:void, :int);
#bat.insert(b1, nil, 13);
#bat.insert(b1, nil, 23);
#
#resultset.populateColumn(rs, 1, b1);
#resultset.writeNextPart(rs);
#
#resultset.dePopulate(rs);
#
#resultset.populateColumn(rs, 1, b1);
#resultset.writeNextPart(rs);
#
#rsbox.release(rs);
#
#
function user.main():void;	# 0  (main:void)
## Test ResultSet unionability 	# 1  (_1:str)
#line 113 "/ufs/mk/monet5/src/modules/mal/rsbox.mx" 	# 2  (_2:str)
# ResultSets themselves should never be serialised to disk.  The 	# 3  (_3:str)
# fromStr and toStr functions merely exist to adhere to the interface 	# 4  (_4:str)
#line 207 "/ufs/mk/monet5/src/modules/mal/rsbox.mx" 	# 5  (_5:str)
#line 208 "/ufs/mk/monet5/src/modules/mal/rsbox.mx" 	# 6  (_6:str)
    rs := rsbox.create(1,'t');	# 7 RSBcreate (rs:resultset)<-(_8:int)(_9:chr)
    resultset.setProperty(rs,1,"name","the_column");	# 8 RSsetPropertyStr (_10:resultset)<-(rs:resultset)(_8:int)(_11:str)(_12:str)
    resultset.setProperty(rs,1,"table","the_table");	# 9 RSsetPropertyStr (_13:resultset)<-(rs:resultset)(_8:int)(_14:str)(_15:str)
    resultset.setProperty(rs,1,"schema","the_schema");	# 10 RSsetPropertyStr (_16:resultset)<-(rs:resultset)(_8:int)(_17:str)(_18:str)
    b1 := bat.new(:void,:int);	# 11 CMDBATnew (b1:bat[:void,:int])<-(_20:void)(_21:int)
    bat.insert(b1,nil:void,1);	# 12 BKCinsert_bun (_22:void)<-(b1:bat[:void,:int])(_23:void)(_8:int)
    bat.insert(b1,nil:void,2);	# 13 BKCinsert_bun (_24:void)<-(b1:bat[:void,:int])(_23:void)(_25:int)
    bat.insert(b1,nil:void,nil:int);	# 14 BKCinsert_bun (_26:void)<-(b1:bat[:void,:int])(_23:void)(_27:int)
    bat.insert(b1,nil:void,4);	# 15 BKCinsert_bun (_28:void)<-(b1:bat[:void,:int])(_23:void)(_29:int)
    bat.insert(b1,nil:void,6);	# 16 BKCinsert_bun (_30:void)<-(b1:bat[:void,:int])(_23:void)(_31:int)
    resultset.populateColumn(rs,1,b1);	# 17 RSpopulateColumn (_32:resultset)<-(rs:resultset)(_8:int)(b1:bat[:void,:int])
    resultset.addUnion(rs);	# 18 RSunion (_33:resultset)<-(rs:resultset)
    b1 := bat.new(:void,:int);	# 19 CMDBATnew (b1:bat[:void,:int])<-(_20:void)(_34:int)
    bat.insert(b1,nil:void,7);	# 20 BKCinsert_bun (_35:void)<-(b1:bat[:void,:int])(_23:void)(_36:int)
    bat.insert(b1,nil:void,8);	# 21 BKCinsert_bun (_37:void)<-(b1:bat[:void,:int])(_23:void)(_38:int)
    resultset.populateColumn(rs,1,b1);	# 22 RSpopulateColumn (_39:resultset)<-(rs:resultset)(_8:int)(b1:bat[:void,:int])
    resultset.addUnion(rs);	# 23 RSunion (_40:resultset)<-(rs:resultset)
    b1 := bat.new(:void,:int);	# 24 CMDBATnew (b1:bat[:void,:int])<-(_20:void)(_41:int)
    bat.insert(b1,nil:void,13);	# 25 BKCinsert_bun (_42:void)<-(b1:bat[:void,:int])(_23:void)(_43:int)
    bat.insert(b1,nil:void,23);	# 26 BKCinsert_bun (_44:void)<-(b1:bat[:void,:int])(_23:void)(_45:int)
    resultset.populateColumn(rs,1,b1);	# 27 RSpopulateColumn (_46:resultset)<-(rs:resultset)(_47:int)(b1:bat[:void,:int])
    resultset.writeNextPart(rs);	# 28 RSwriteNextPart (_48:int)<-(rs:resultset)
    resultset.dePopulate(rs);	# 29 RSdePopulate (_49:resultset)<-(rs:resultset)
    resultset.populateColumn(rs,1,b1);	# 30 RSpopulateColumn (_50:resultset)<-(rs:resultset)(_47:int)(b1:bat[:void,:int])
    resultset.writeNextPart(rs);	# 31 RSwriteNextPart (_51:int)<-(rs:resultset)
    rsbox.release(rs);	# 32 RSBdelete (_52:void)<-(rs:resultset)
end main;	# 33  
&t
$id	1
$columncount	1
$tuplecount	9
$ctype	i
%column	the_column
%table	the_table
%schema	the_schema
%type	int
%digits	
%scale	
%width	9
[1
[2
[NULL
[4
[6
[7
[8
[13
[23
&t
$id	2
$columncount	1
$tuplecount	2
$ctype	i
%column	the_column
%table	the_table
%schema	the_schema
%type	int
%digits	
%scale	
%width	1
[13
[23

# 00:03:58 >  
# 00:03:58 >  Done.
# 00:03:58 >  

