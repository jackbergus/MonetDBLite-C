stdout of test 'rsbox03` in directory 'src/modules/mal` itself:


# 20:14:43 >  
# 20:14:43 >  Mtimeout -timeout 60 mserver5 "--config=/ufs/mk/monet5/Linux/etc/MonetDB5.conf" --debug=10 --set "monet_mod_path=/ufs/mk/monet5/Linux/lib64/MonetDB5:/ufs/mk/monet5/Linux/lib64/MonetDB5/lib:/ufs/mk/monet5/Linux/lib64/MonetDB5/bin" --set "gdk_dbfarm=/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm" --set "sql_logdir=/ufs/mk/monet5/Linux/var/MonetDB5/dblogs" --set mapi_port=35008 --set monet_prompt= --trace --dbname=mTests_src_modules_mal  rsbox03.mal < /dev/null
# 20:14:43 >  

# MonetDB Server v4.99.19
# Copyright (c) 1993-2006 CWI, all rights reserved
# Compiled for x86_64-redhat-linux-gnu/64bit with 64bit OIDs dynamically linked
# config:/ufs/mk/monet5/Linux/etc/MonetDB5.conf
# dbfarm:/ufs/mk/monet5/Linux/var/MonetDB5/dbfarm
# dbname:mTests_src_modules_mal
# Visit http://monetdb.cwi.nl/ for further information
### Test ResultSet unionability
#
#include rsbox;
#
#rs := rsbox.create(1, 't');
#
#resultset.setProperty(rs, 1, "name", "the_column");
#resultset.setProperty(rs, 1, "table", "the_table");
#resultset.setProperty(rs, 1, "schema", "the_schema");
#
#b1 := bat.new(:void, :int);
#bat.insert(b1, nil, 1);
#bat.insert(b1, nil, 2);
#bat.insert(b1, nil, nil:int);
#bat.insert(b1, nil, 4);
#bat.insert(b1, nil, 6);
#
#resultset.populateColumn(rs, 1, b1);
#resultset.addUnion(rs);
#
#b1 := bat.new(:void, :int);
#bat.insert(b1, nil, 7);
#bat.insert(b1, nil, 8);
#
#resultset.populateColumn(rs, 1, b1);
#resultset.addUnion(rs);
#
#b1 := bat.new(:void, :int);
#bat.insert(b1, nil, 13);
#bat.insert(b1, nil, 23);
#
#resultset.populateColumn(rs, 1, b1);
#resultset.writeNextPart(rs);
#
#resultset.dePopulate(rs);
#
#resultset.populateColumn(rs, 1, b1);
#resultset.writeNextPart(rs);
#
#rsbox.release(rs);
#
#
function user.main():void;	# 0  (main:void)
## Test ResultSet unionability 	# 1  (_1:str)
    rs := rsbox.create(1,'t');	# 2 RSBcreate (rs:resultset)<-(_3:int)(_4:chr)
    resultset.setProperty(rs,1,"name","the_column");	# 3 RSsetPropertyStr (_5:resultset)<-(rs:resultset)(_3:int)(_6:str)(_7:str)
    resultset.setProperty(rs,1,"table","the_table");	# 4 RSsetPropertyStr (_8:resultset)<-(rs:resultset)(_3:int)(_9:str)(_10:str)
    resultset.setProperty(rs,1,"schema","the_schema");	# 5 RSsetPropertyStr (_11:resultset)<-(rs:resultset)(_3:int)(_12:str)(_13:str)
    b1 := bat.new(:void,:int);	# 6 CMDBATnew (b1:bat[:void,:int])<-(_15:void)(_16:int)
    bat.insert(b1,nil:void,1);	# 7 BKCinsert_bun (_17:void)<-(b1:bat[:void,:int])(_18:void)(_3:int)
    bat.insert(b1,nil:void,2);	# 8 BKCinsert_bun (_19:void)<-(b1:bat[:void,:int])(_18:void)(_20:int)
    bat.insert(b1,nil:void,nil:int);	# 9 BKCinsert_bun (_21:void)<-(b1:bat[:void,:int])(_18:void)(_22:int)
    bat.insert(b1,nil:void,4);	# 10 BKCinsert_bun (_23:void)<-(b1:bat[:void,:int])(_18:void)(_24:int)
    bat.insert(b1,nil:void,6);	# 11 BKCinsert_bun (_25:void)<-(b1:bat[:void,:int])(_18:void)(_26:int)
    resultset.populateColumn(rs,1,b1);	# 12 RSpopulateColumn (_27:resultset)<-(rs:resultset)(_3:int)(b1:bat[:void,:int])
    resultset.addUnion(rs);	# 13 RSunion (_28:resultset)<-(rs:resultset)
    b1 := bat.new(:void,:int);	# 14 CMDBATnew (b1:bat[:void,:int])<-(_15:void)(_29:int)
    bat.insert(b1,nil:void,7);	# 15 BKCinsert_bun (_30:void)<-(b1:bat[:void,:int])(_18:void)(_31:int)
    bat.insert(b1,nil:void,8);	# 16 BKCinsert_bun (_32:void)<-(b1:bat[:void,:int])(_18:void)(_33:int)
    resultset.populateColumn(rs,1,b1);	# 17 RSpopulateColumn (_34:resultset)<-(rs:resultset)(_3:int)(b1:bat[:void,:int])
    resultset.addUnion(rs);	# 18 RSunion (_35:resultset)<-(rs:resultset)
    b1 := bat.new(:void,:int);	# 19 CMDBATnew (b1:bat[:void,:int])<-(_15:void)(_36:int)
    bat.insert(b1,nil:void,13);	# 20 BKCinsert_bun (_37:void)<-(b1:bat[:void,:int])(_18:void)(_38:int)
    bat.insert(b1,nil:void,23);	# 21 BKCinsert_bun (_39:void)<-(b1:bat[:void,:int])(_18:void)(_40:int)
    resultset.populateColumn(rs,1,b1);	# 22 RSpopulateColumn (_41:resultset)<-(rs:resultset)(_42:int)(b1:bat[:void,:int])
    resultset.writeNextPart(rs);	# 23 RSwriteNextPart (_43:int)<-(rs:resultset)
    resultset.dePopulate(rs);	# 24 RSdePopulate (_44:resultset)<-(rs:resultset)
    resultset.populateColumn(rs,1,b1);	# 25 RSpopulateColumn (_45:resultset)<-(rs:resultset)(_42:int)(b1:bat[:void,:int])
    resultset.writeNextPart(rs);	# 26 RSwriteNextPart (_46:int)<-(rs:resultset)
    rsbox.release(rs);	# 27 RSBdelete (_47:void)<-(rs:resultset)
end main;	# 28  
&t
$id	1
$columncount	1
$tuplecount	9
$ctype	i
%column	the_column
%table	the_table
%schema	the_schema
%type	int
%digits	
%scale	
%width	9
[1
[2
[NULL
[4
[6
[7
[8
[13
[23
&t
$id	2
$columncount	1
$tuplecount	2
$ctype	i
%column	the_column
%table	the_table
%schema	the_schema
%type	int
%digits	
%scale	
%width	1
[13
[23

# 20:14:43 >  
# 20:14:43 >  Done.
# 20:14:43 >  

